
two_motors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000007a0  00000834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800106  00800106  0000083a  2**0
                  ALLOC
  3 .stab         00000900  00000000  00000000  0000083c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cc2  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00001dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000c5  00000000  00000000  00001e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000004de  00000000  00000000  00001ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000249  00000000  00000000  000023c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000359  00000000  00000000  0000260a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a0  00000000  00000000  00002964  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000034e  00000000  00000000  00002a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000017a  00000000  00000000  00002d52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_11>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ea       	ldi	r30, 0xA0	; 160
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 1a 01 	call	0x234	; 0x234 <main>
  c6:	0c 94 ce 03 	jmp	0x79c	; 0x79c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <_ZN16OrangutanDigital9setOutputEhh>:

	// high-level method for setting the specified pin as an output with the specified output state.
	// An outputState value of 0 will cause the pin to drive low; a value of 1 will cause the pin to 
	// drive high.  A value of 0xFF (255) will toggle the output state of the pin (i.e. high -> low and
	// low -> high).
	inline static void setOutput(unsigned char pin, unsigned char outputState)
  ce:	48 2f       	mov	r20, r24
		io->pinRegister = 0;
		io->portRegister = 0;
		io->ddrRegister = 0;
		io->bitmask = 0;

		if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
  d0:	88 30       	cpi	r24, 0x08	; 8
  d2:	68 f4       	brcc	.+26     	; 0xee <_ZN16OrangutanDigital9setOutputEhh+0x20>
		{
			io->pinRegister = (unsigned char*)&PIND;
			io->portRegister = (unsigned char*)&PORTD;
			io->ddrRegister = (unsigned char*)&DDRD;
			io->bitmask = 1 << pin;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <_ZN16OrangutanDigital9setOutputEhh+0x10>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	4a 95       	dec	r20
  e0:	e2 f7       	brpl	.-8      	; 0xda <_ZN16OrangutanDigital9setOutputEhh+0xc>
  e2:	28 2f       	mov	r18, r24
  e4:	aa e2       	ldi	r26, 0x2A	; 42
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	eb e2       	ldi	r30, 0x2B	; 43
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	3e c0       	rjmp	.+124    	; 0x16a <_ZN16OrangutanDigital9setOutputEhh+0x9c>
		}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)

		else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
  ee:	80 31       	cpi	r24, 0x10	; 16
  f0:	88 f4       	brcc	.+34     	; 0x114 <_ZN16OrangutanDigital9setOutputEhh+0x46>
		{
			io->pinRegister = (unsigned char*)&PINB;
			io->portRegister = (unsigned char*)&PORTB;
			io->ddrRegister = (unsigned char*)&DDRB;
			io->bitmask = 1 << (pin - 8);
  f2:	28 2f       	mov	r18, r24
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	28 50       	subi	r18, 0x08	; 8
  f8:	30 40       	sbci	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <_ZN16OrangutanDigital9setOutputEhh+0x36>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	2a 95       	dec	r18
 106:	e2 f7       	brpl	.-8      	; 0x100 <_ZN16OrangutanDigital9setOutputEhh+0x32>
 108:	28 2f       	mov	r18, r24
 10a:	a4 e2       	ldi	r26, 0x24	; 36
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	e5 e2       	ldi	r30, 0x25	; 37
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	2b c0       	rjmp	.+86     	; 0x16a <_ZN16OrangutanDigital9setOutputEhh+0x9c>
		}
		else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
 114:	88 31       	cpi	r24, 0x18	; 24
 116:	88 f4       	brcc	.+34     	; 0x13a <_ZN16OrangutanDigital9setOutputEhh+0x6c>
		{
			io->pinRegister = (unsigned char*)&PINC;
			io->portRegister = (unsigned char*)&PORTC;
			io->ddrRegister = (unsigned char*)&DDRC;
			io->bitmask = 1 << (pin - 16);
 118:	28 2f       	mov	r18, r24
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	20 51       	subi	r18, 0x10	; 16
 11e:	30 40       	sbci	r19, 0x00	; 0
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	2a 95       	dec	r18
 12c:	e2 f7       	brpl	.-8      	; 0x126 <_ZN16OrangutanDigital9setOutputEhh+0x58>
 12e:	28 2f       	mov	r18, r24
 130:	a7 e2       	ldi	r26, 0x27	; 39
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e8 e2       	ldi	r30, 0x28	; 40
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	18 c0       	rjmp	.+48     	; 0x16a <_ZN16OrangutanDigital9setOutputEhh+0x9c>
		}
		else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
 13a:	80 32       	cpi	r24, 0x20	; 32
 13c:	30 f0       	brcs	.+12     	; 0x14a <_ZN16OrangutanDigital9setOutputEhh+0x7c>
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	a0 e0       	ldi	r26, 0x00	; 0
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	e0 e0       	ldi	r30, 0x00	; 0
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	10 c0       	rjmp	.+32     	; 0x16a <_ZN16OrangutanDigital9setOutputEhh+0x9c>
		{
			io->pinRegister = (unsigned char*)&PINA;
			io->portRegister = (unsigned char*)&PORTA;
			io->ddrRegister = (unsigned char*)&DDRA;
			io->bitmask = 1 << (31 - pin);
 14a:	2f e1       	ldi	r18, 0x1F	; 31
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	28 1b       	sub	r18, r24
 150:	31 09       	sbc	r19, r1
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <_ZN16OrangutanDigital9setOutputEhh+0x8e>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	2a 95       	dec	r18
 15e:	e2 f7       	brpl	.-8      	; 0x158 <_ZN16OrangutanDigital9setOutputEhh+0x8a>
 160:	28 2f       	mov	r18, r24
 162:	a1 e2       	ldi	r26, 0x21	; 33
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	e2 e2       	ldi	r30, 0x22	; 34
 168:	f0 e0       	ldi	r31, 0x00	; 0
	// setting it as high-impedance (val = 0) or enabling the internal pull-up (val = 1).  If the pin is an
	// output, this lets you choose between driving low (val = 0) and driving high (val = 1).
	// NOTE: if val is 0xFF (255), this method will toggle the PORT register pin(s).
	inline static void setOutputValue(struct IOStruct* ioPin, unsigned char val)
	{
		if (val == 0xFF)
 16a:	6f 3f       	cpi	r22, 0xFF	; 255
 16c:	19 f4       	brne	.+6      	; 0x174 <_ZN16OrangutanDigital9setOutputEhh+0xa6>
			*(ioPin->portRegister) ^= ioPin->bitmask;
 16e:	80 81       	ld	r24, Z
 170:	82 27       	eor	r24, r18
 172:	09 c0       	rjmp	.+18     	; 0x186 <_ZN16OrangutanDigital9setOutputEhh+0xb8>
		else if (val)
 174:	66 23       	and	r22, r22
 176:	19 f0       	breq	.+6      	; 0x17e <_ZN16OrangutanDigital9setOutputEhh+0xb0>
			*(ioPin->portRegister) |= ioPin->bitmask;
 178:	80 81       	ld	r24, Z
 17a:	82 2b       	or	r24, r18
 17c:	04 c0       	rjmp	.+8      	; 0x186 <_ZN16OrangutanDigital9setOutputEhh+0xb8>
		else
			*(ioPin->portRegister) &= ~ioPin->bitmask;
 17e:	90 81       	ld	r25, Z
 180:	82 2f       	mov	r24, r18
 182:	80 95       	com	r24
 184:	89 23       	and	r24, r25
 186:	80 83       	st	Z, r24
	// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
	// described by an IOStruct pointer.
	inline static void setDataDirection(struct IOStruct* ioPin, unsigned char val)
	{
		if (val)
			*(ioPin->ddrRegister) |= ioPin->bitmask;
 188:	8c 91       	ld	r24, X
 18a:	82 2b       	or	r24, r18
 18c:	8c 93       	st	X, r24
	{
		struct IOStruct registers;
		getIORegisters(&registers, pin);
		setOutputValue(&registers, outputState);
		setDataDirection(&registers, 1);
	}
 18e:	08 95       	ret

00000190 <__cxa_guard_acquire>:

extern "C" int __cxa_guard_acquire(__guard *); 
extern "C" void __cxa_guard_release (__guard *); 
extern "C" void __cxa_guard_abort (__guard *); 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);}; 
 190:	fc 01       	movw	r30, r24
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	88 23       	and	r24, r24
 19a:	11 f4       	brne	.+4      	; 0x1a0 <__cxa_guard_acquire+0x10>
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	c9 01       	movw	r24, r18
 1a2:	08 95       	ret

000001a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;}; 
 1a4:	fc 01       	movw	r30, r24
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 83       	st	Z, r24
 1aa:	08 95       	ret

000001ac <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
 1ac:	08 95       	ret

000001ae <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void); 
void __cxa_pure_virtual(void) {}; 
 1ae:	08 95       	ret

000001b0 <_Z3gcfiii>:



int gcf(int in1, int in2, int in3) //int
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
{
	int gcf = 1;
	for(int i = 2; i <= 100*in1; i ++)
 1bc:	24 e6       	ldi	r18, 0x64	; 100
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	82 9f       	mul	r24, r18
 1c2:	e0 01       	movw	r28, r0
 1c4:	83 9f       	mul	r24, r19
 1c6:	d0 0d       	add	r29, r0
 1c8:	92 9f       	mul	r25, r18
 1ca:	d0 0d       	add	r29, r0
 1cc:	11 24       	eor	r1, r1
	{
		if(100*in1 % i == 0)
		{
			if(100*in2 % i == 0)
 1ce:	62 9f       	mul	r22, r18
 1d0:	70 01       	movw	r14, r0
 1d2:	63 9f       	mul	r22, r19
 1d4:	f0 0c       	add	r15, r0
 1d6:	72 9f       	mul	r23, r18
 1d8:	f0 0c       	add	r15, r0
 1da:	11 24       	eor	r1, r1
			{
				if(100*in3 % i == 0)
 1dc:	42 9f       	mul	r20, r18
 1de:	80 01       	movw	r16, r0
 1e0:	43 9f       	mul	r20, r19
 1e2:	10 0d       	add	r17, r0
 1e4:	52 9f       	mul	r21, r18
 1e6:	10 0d       	add	r17, r0
 1e8:	11 24       	eor	r1, r1
 1ea:	e1 e0       	ldi	r30, 0x01	; 1
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	22 e0       	ldi	r18, 0x02	; 2
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	15 c0       	rjmp	.+42     	; 0x21e <_Z3gcfiii+0x6e>
int gcf(int in1, int in2, int in3) //int
{
	int gcf = 1;
	for(int i = 2; i <= 100*in1; i ++)
	{
		if(100*in1 % i == 0)
 1f4:	ce 01       	movw	r24, r28
 1f6:	b9 01       	movw	r22, r18
 1f8:	0e 94 80 02 	call	0x500	; 0x500 <__divmodhi4>
 1fc:	89 2b       	or	r24, r25
 1fe:	69 f4       	brne	.+26     	; 0x21a <_Z3gcfiii+0x6a>
		{
			if(100*in2 % i == 0)
 200:	c7 01       	movw	r24, r14
 202:	b9 01       	movw	r22, r18
 204:	0e 94 80 02 	call	0x500	; 0x500 <__divmodhi4>
 208:	89 2b       	or	r24, r25
 20a:	39 f4       	brne	.+14     	; 0x21a <_Z3gcfiii+0x6a>
			{
				if(100*in3 % i == 0)
 20c:	c8 01       	movw	r24, r16
 20e:	b9 01       	movw	r22, r18
 210:	0e 94 80 02 	call	0x500	; 0x500 <__divmodhi4>
 214:	89 2b       	or	r24, r25
 216:	09 f4       	brne	.+2      	; 0x21a <_Z3gcfiii+0x6a>
 218:	f9 01       	movw	r30, r18


int gcf(int in1, int in2, int in3) //int
{
	int gcf = 1;
	for(int i = 2; i <= 100*in1; i ++)
 21a:	2f 5f       	subi	r18, 0xFF	; 255
 21c:	3f 4f       	sbci	r19, 0xFF	; 255
 21e:	c2 17       	cp	r28, r18
 220:	d3 07       	cpc	r29, r19
 222:	44 f7       	brge	.-48     	; 0x1f4 <_Z3gcfiii+0x44>
				}
			}
		}
	}
	return gcf;
}
 224:	cf 01       	movw	r24, r30
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	08 95       	ret

00000234 <main>:

int main()
 234:	cf 92       	push	r12
 236:	df 92       	push	r13
 238:	ef 92       	push	r14
 23a:	ff 92       	push	r15
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
{
	int runtime = 8000, steplength = 2, totallength0 = 50, totallength1 = 60;
	//get inputs for runtime and steplength and totallength1 and totallength2
	
	int delaytime = gcf(totallength0, totallength1, steplength)/100;
 244:	82 e3       	ldi	r24, 0x32	; 50
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	6c e3       	ldi	r22, 0x3C	; 60
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	42 e0       	ldi	r20, 0x02	; 2
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z3gcfiii>
 254:	64 e6       	ldi	r22, 0x64	; 100
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	0e 94 80 02 	call	0x500	; 0x500 <__divmodhi4>
 25c:	6b 01       	movw	r12, r22
	for(int j = 0; j < (runtime)/(delaytime); j ++)
 25e:	80 e4       	ldi	r24, 0x40	; 64
 260:	9f e1       	ldi	r25, 0x1F	; 31
 262:	0e 94 80 02 	call	0x500	; 0x500 <__divmodhi4>
 266:	7b 01       	movw	r14, r22
 268:	00 e0       	ldi	r16, 0x00	; 0
 26a:	10 e0       	ldi	r17, 0x00	; 0
 26c:	2f c0       	rjmp	.+94     	; 0x2cc <main+0x98>
	{
		if(j % (totallength0)/(delaytime) < (steplength)/(delaytime))
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	b6 01       	movw	r22, r12
 274:	0e 94 80 02 	call	0x500	; 0x500 <__divmodhi4>
 278:	eb 01       	movw	r28, r22
 27a:	c8 01       	movw	r24, r16
 27c:	62 e3       	ldi	r22, 0x32	; 50
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	0e 94 80 02 	call	0x500	; 0x500 <__divmodhi4>
 284:	b6 01       	movw	r22, r12
 286:	0e 94 80 02 	call	0x500	; 0x500 <__divmodhi4>
 28a:	6c 17       	cp	r22, r28
 28c:	7d 07       	cpc	r23, r29
 28e:	1c f4       	brge	.+6      	; 0x296 <main+0x62>
		{
			OrangutanDigital::setOutput(IO_C0, HIGH);
 290:	80 e1       	ldi	r24, 0x10	; 16
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	02 c0       	rjmp	.+4      	; 0x29a <main+0x66>
		}
		else
		{
			OrangutanDigital::setOutput(IO_C0, LOW);
 296:	80 e1       	ldi	r24, 0x10	; 16
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	0e 94 67 00 	call	0xce	; 0xce <_ZN16OrangutanDigital9setOutputEhh>
		}
		if(j % (totallength1)/(delaytime) < (steplength)/(delaytime))
 29e:	c8 01       	movw	r24, r16
 2a0:	6c e3       	ldi	r22, 0x3C	; 60
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	0e 94 80 02 	call	0x500	; 0x500 <__divmodhi4>
 2a8:	b6 01       	movw	r22, r12
 2aa:	0e 94 80 02 	call	0x500	; 0x500 <__divmodhi4>
 2ae:	6c 17       	cp	r22, r28
 2b0:	7d 07       	cpc	r23, r29
 2b2:	1c f4       	brge	.+6      	; 0x2ba <main+0x86>
		{
			OrangutanDigital::setOutput(IO_C1, HIGH);   //this is the same output!
 2b4:	81 e1       	ldi	r24, 0x11	; 17
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <main+0x8a>
		}
		else
		{
			OrangutanDigital::setOutput(IO_C1, LOW);
 2ba:	81 e1       	ldi	r24, 0x11	; 17
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	0e 94 67 00 	call	0xce	; 0xce <_ZN16OrangutanDigital9setOutputEhh>
// another C++ file.
inline unsigned long get_ms() { return OrangutanTime::ms(); }
inline unsigned long millis() { return OrangutanTime::ms(); }

inline void delay(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
inline void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
 2c2:	c6 01       	movw	r24, r12
 2c4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN13OrangutanTime17delayMillisecondsEj>
{
	int runtime = 8000, steplength = 2, totallength0 = 50, totallength1 = 60;
	//get inputs for runtime and steplength and totallength1 and totallength2
	
	int delaytime = gcf(totallength0, totallength1, steplength)/100;
	for(int j = 0; j < (runtime)/(delaytime); j ++)
 2c8:	0f 5f       	subi	r16, 0xFF	; 255
 2ca:	1f 4f       	sbci	r17, 0xFF	; 255
 2cc:	0e 15       	cp	r16, r14
 2ce:	1f 05       	cpc	r17, r15
 2d0:	74 f2       	brlt	.-100    	; 0x26e <main+0x3a>
		{
			OrangutanDigital::setOutput(IO_C1, LOW);
		}
		delay_ms(delaytime);
	}
}
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	df 90       	pop	r13
 2e4:	cf 90       	pop	r12
 2e6:	08 95       	ret

000002e8 <_ZdlPv>:
  return malloc(size); 
} 

void operator delete(void * ptr) 
{ 
  free(ptr); 
 2e8:	0e 94 76 03 	call	0x6ec	; 0x6ec <free>
} 
 2ec:	08 95       	ret

000002ee <_Znwj>:
void * operator new(size_t size); 
void operator delete(void * ptr); 

void * operator new(size_t size) 
{ 
  return malloc(size); 
 2ee:	0e 94 c9 02 	call	0x592	; 0x592 <malloc>
} 
 2f2:	08 95       	ret

000002f4 <__vector_11>:
 2f4:	2f 92       	push	r2
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	2f b6       	in	r2, 0x3f	; 63
 2fc:	80 91 07 01 	lds	r24, 0x0107
 300:	90 91 08 01 	lds	r25, 0x0108
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	80 93 07 01 	sts	0x0107, r24
 30a:	90 93 08 01 	sts	0x0108, r25
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	80 91 09 01 	lds	r24, 0x0109
 314:	89 1f       	adc	r24, r25
 316:	80 93 09 01 	sts	0x0109, r24
 31a:	90 91 0f 01 	lds	r25, 0x010F
 31e:	9c 5f       	subi	r25, 0xFC	; 252
 320:	90 93 0f 01 	sts	0x010F, r25
 324:	80 91 0e 01 	lds	r24, 0x010E
 328:	80 51       	subi	r24, 0x10	; 16
 32a:	97 42       	sbci	r25, 0x27	; 39
 32c:	c0 f0       	brcs	.+48     	; 0x35e <end>
 32e:	90 93 0f 01 	sts	0x010F, r25
 332:	80 93 0e 01 	sts	0x010E, r24
 336:	80 91 0a 01 	lds	r24, 0x010A
 33a:	90 91 0b 01 	lds	r25, 0x010B
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	80 93 0a 01 	sts	0x010A, r24
 344:	90 93 0b 01 	sts	0x010B, r25
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	80 91 0c 01 	lds	r24, 0x010C
 34e:	89 1f       	adc	r24, r25
 350:	80 93 0c 01 	sts	0x010C, r24
 354:	80 91 0d 01 	lds	r24, 0x010D
 358:	89 1f       	adc	r24, r25
 35a:	80 93 0d 01 	sts	0x010D, r24

0000035e <end>:
 35e:	2f be       	out	0x3f, r2	; 63
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	2f 90       	pop	r2
 366:	18 95       	reti

00000368 <ticks_to_microseconds>:
 368:	6f 5f       	subi	r22, 0xFF	; 255
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	8f 4f       	sbci	r24, 0xFF	; 255
 36e:	9f 4f       	sbci	r25, 0xFF	; 255
 370:	66 0f       	add	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	88 1f       	adc	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	25 e0       	ldi	r18, 0x05	; 5
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	0e 94 93 02 	call	0x526	; 0x526 <__udivmodsi4>
 384:	ca 01       	movw	r24, r20
 386:	b9 01       	movw	r22, r18
 388:	08 95       	ret

0000038a <delay_ms>:
 38a:	28 ee       	ldi	r18, 0xE8	; 232
 38c:	33 e0       	ldi	r19, 0x03	; 3
 38e:	09 c0       	rjmp	.+18     	; 0x3a2 <delay_ms+0x18>
 390:	f9 01       	movw	r30, r18
 392:	6f 93       	push	r22
 394:	64 e0       	ldi	r22, 0x04	; 4
 396:	6a 95       	dec	r22
 398:	f1 f7       	brne	.-4      	; 0x396 <delay_ms+0xc>
 39a:	6f 91       	pop	r22
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	c9 f7       	brne	.-14     	; 0x392 <delay_ms+0x8>
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	00 97       	sbiw	r24, 0x00	; 0
 3a4:	a9 f7       	brne	.-22     	; 0x390 <delay_ms+0x6>
 3a6:	08 95       	ret

000003a8 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
 3a8:	6f 5f       	subi	r22, 0xFF	; 255
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	8f 4f       	sbci	r24, 0xFF	; 255
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	66 0f       	add	r22, r22
 3b2:	77 1f       	adc	r23, r23
 3b4:	88 1f       	adc	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	25 e0       	ldi	r18, 0x05	; 5
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	0e 94 93 02 	call	0x526	; 0x526 <__udivmodsi4>
 3c4:	ca 01       	movw	r24, r20
 3c6:	b9 01       	movw	r22, r18
 3c8:	08 95       	ret

000003ca <_ZN13OrangutanTime17delayMillisecondsEj>:
 3ca:	28 ee       	ldi	r18, 0xE8	; 232
 3cc:	33 e0       	ldi	r19, 0x03	; 3
 3ce:	09 c0       	rjmp	.+18     	; 0x3e2 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
 3d0:	f9 01       	movw	r30, r18
 3d2:	6f 93       	push	r22
 3d4:	64 e0       	ldi	r22, 0x04	; 4
 3d6:	6a 95       	dec	r22
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
 3da:	6f 91       	pop	r22
 3dc:	31 97       	sbiw	r30, 0x01	; 1
 3de:	c9 f7       	brne	.-14     	; 0x3d2 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	00 97       	sbiw	r24, 0x00	; 0
 3e4:	a9 f7       	brne	.-22     	; 0x3d0 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
 3e6:	08 95       	ret

000003e8 <_ZN13OrangutanTime5init2Ev>:
 3e8:	a0 e7       	ldi	r26, 0x70	; 112
 3ea:	b0 e0       	ldi	r27, 0x00	; 0
 3ec:	8c 91       	ld	r24, X
 3ee:	8e 7f       	andi	r24, 0xFE	; 254
 3f0:	8c 93       	st	X, r24
 3f2:	e0 eb       	ldi	r30, 0xB0	; 176
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	83 60       	ori	r24, 0x03	; 3
 3fa:	80 83       	st	Z, r24
 3fc:	e1 eb       	ldi	r30, 0xB1	; 177
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	80 7f       	andi	r24, 0xF0	; 240
 404:	80 83       	st	Z, r24
 406:	80 81       	ld	r24, Z
 408:	82 60       	ori	r24, 0x02	; 2
 40a:	80 83       	st	Z, r24
 40c:	b8 9a       	sbi	0x17, 0	; 23
 40e:	8c 91       	ld	r24, X
 410:	81 60       	ori	r24, 0x01	; 1
 412:	8c 93       	st	X, r24
 414:	78 94       	sei
 416:	08 95       	ret

00000418 <_ZN13OrangutanTime4initEv>:
 418:	80 91 10 01 	lds	r24, 0x0110
 41c:	88 23       	and	r24, r24
 41e:	29 f4       	brne	.+10     	; 0x42a <_ZN13OrangutanTime4initEv+0x12>
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	80 93 10 01 	sts	0x0110, r24
 426:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_ZN13OrangutanTime5init2Ev>
 42a:	08 95       	ret

0000042c <_ZN13OrangutanTime2msEv>:
 42c:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN13OrangutanTime4initEv>
 430:	e0 e7       	ldi	r30, 0x70	; 112
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	8e 7f       	andi	r24, 0xFE	; 254
 438:	80 83       	st	Z, r24
 43a:	20 91 0a 01 	lds	r18, 0x010A
 43e:	30 91 0b 01 	lds	r19, 0x010B
 442:	40 91 0c 01 	lds	r20, 0x010C
 446:	50 91 0d 01 	lds	r21, 0x010D
 44a:	80 81       	ld	r24, Z
 44c:	81 60       	ori	r24, 0x01	; 1
 44e:	80 83       	st	Z, r24
 450:	b9 01       	movw	r22, r18
 452:	ca 01       	movw	r24, r20
 454:	08 95       	ret

00000456 <get_ms>:
 456:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN13OrangutanTime2msEv>
 45a:	08 95       	ret

0000045c <_ZN13OrangutanTime5ticksEv>:
 45c:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN13OrangutanTime4initEv>
 460:	80 91 70 00 	lds	r24, 0x0070
 464:	8e 7f       	andi	r24, 0xFE	; 254
 466:	80 93 70 00 	sts	0x0070, r24
 46a:	60 91 b2 00 	lds	r22, 0x00B2
 46e:	80 91 06 01 	lds	r24, 0x0106
 472:	90 91 07 01 	lds	r25, 0x0107
 476:	a0 91 08 01 	lds	r26, 0x0108
 47a:	b0 91 09 01 	lds	r27, 0x0109
 47e:	b8 99       	sbic	0x17, 0	; 23
 480:	05 c0       	rjmp	.+10     	; 0x48c <_ZN13OrangutanTime5ticksEv+0x30>
 482:	26 2f       	mov	r18, r22
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	11 c0       	rjmp	.+34     	; 0x4ae <_ZN13OrangutanTime5ticksEv+0x52>
 48c:	80 91 b2 00 	lds	r24, 0x00B2
 490:	20 91 06 01 	lds	r18, 0x0106
 494:	30 91 07 01 	lds	r19, 0x0107
 498:	40 91 08 01 	lds	r20, 0x0108
 49c:	50 91 09 01 	lds	r21, 0x0109
 4a0:	20 50       	subi	r18, 0x00	; 0
 4a2:	3f 4f       	sbci	r19, 0xFF	; 255
 4a4:	4f 4f       	sbci	r20, 0xFF	; 255
 4a6:	5f 4f       	sbci	r21, 0xFF	; 255
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	a0 e0       	ldi	r26, 0x00	; 0
 4ac:	b0 e0       	ldi	r27, 0x00	; 0
 4ae:	28 2b       	or	r18, r24
 4b0:	39 2b       	or	r19, r25
 4b2:	4a 2b       	or	r20, r26
 4b4:	5b 2b       	or	r21, r27
 4b6:	80 91 70 00 	lds	r24, 0x0070
 4ba:	81 60       	ori	r24, 0x01	; 1
 4bc:	80 93 70 00 	sts	0x0070, r24
 4c0:	b9 01       	movw	r22, r18
 4c2:	ca 01       	movw	r24, r20
 4c4:	08 95       	ret

000004c6 <get_ticks>:
 4c6:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN13OrangutanTime5ticksEv>
 4ca:	08 95       	ret

000004cc <_ZN13OrangutanTime5resetEv>:
 4cc:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN13OrangutanTime4initEv>
 4d0:	e0 e7       	ldi	r30, 0x70	; 112
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	8e 7f       	andi	r24, 0xFE	; 254
 4d8:	80 83       	st	Z, r24
 4da:	10 92 0a 01 	sts	0x010A, r1
 4de:	10 92 0b 01 	sts	0x010B, r1
 4e2:	10 92 0c 01 	sts	0x010C, r1
 4e6:	10 92 0d 01 	sts	0x010D, r1
 4ea:	10 92 0f 01 	sts	0x010F, r1
 4ee:	10 92 0e 01 	sts	0x010E, r1
 4f2:	80 81       	ld	r24, Z
 4f4:	81 60       	ori	r24, 0x01	; 1
 4f6:	80 83       	st	Z, r24
 4f8:	08 95       	ret

000004fa <time_reset>:
 4fa:	0e 94 66 02 	call	0x4cc	; 0x4cc <_ZN13OrangutanTime5resetEv>
 4fe:	08 95       	ret

00000500 <__divmodhi4>:
 500:	97 fb       	bst	r25, 7
 502:	09 2e       	mov	r0, r25
 504:	07 26       	eor	r0, r23
 506:	0a d0       	rcall	.+20     	; 0x51c <__divmodhi4_neg1>
 508:	77 fd       	sbrc	r23, 7
 50a:	04 d0       	rcall	.+8      	; 0x514 <__divmodhi4_neg2>
 50c:	2e d0       	rcall	.+92     	; 0x56a <__udivmodhi4>
 50e:	06 d0       	rcall	.+12     	; 0x51c <__divmodhi4_neg1>
 510:	00 20       	and	r0, r0
 512:	1a f4       	brpl	.+6      	; 0x51a <__divmodhi4_exit>

00000514 <__divmodhi4_neg2>:
 514:	70 95       	com	r23
 516:	61 95       	neg	r22
 518:	7f 4f       	sbci	r23, 0xFF	; 255

0000051a <__divmodhi4_exit>:
 51a:	08 95       	ret

0000051c <__divmodhi4_neg1>:
 51c:	f6 f7       	brtc	.-4      	; 0x51a <__divmodhi4_exit>
 51e:	90 95       	com	r25
 520:	81 95       	neg	r24
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	08 95       	ret

00000526 <__udivmodsi4>:
 526:	a1 e2       	ldi	r26, 0x21	; 33
 528:	1a 2e       	mov	r1, r26
 52a:	aa 1b       	sub	r26, r26
 52c:	bb 1b       	sub	r27, r27
 52e:	fd 01       	movw	r30, r26
 530:	0d c0       	rjmp	.+26     	; 0x54c <__udivmodsi4_ep>

00000532 <__udivmodsi4_loop>:
 532:	aa 1f       	adc	r26, r26
 534:	bb 1f       	adc	r27, r27
 536:	ee 1f       	adc	r30, r30
 538:	ff 1f       	adc	r31, r31
 53a:	a2 17       	cp	r26, r18
 53c:	b3 07       	cpc	r27, r19
 53e:	e4 07       	cpc	r30, r20
 540:	f5 07       	cpc	r31, r21
 542:	20 f0       	brcs	.+8      	; 0x54c <__udivmodsi4_ep>
 544:	a2 1b       	sub	r26, r18
 546:	b3 0b       	sbc	r27, r19
 548:	e4 0b       	sbc	r30, r20
 54a:	f5 0b       	sbc	r31, r21

0000054c <__udivmodsi4_ep>:
 54c:	66 1f       	adc	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	1a 94       	dec	r1
 556:	69 f7       	brne	.-38     	; 0x532 <__udivmodsi4_loop>
 558:	60 95       	com	r22
 55a:	70 95       	com	r23
 55c:	80 95       	com	r24
 55e:	90 95       	com	r25
 560:	9b 01       	movw	r18, r22
 562:	ac 01       	movw	r20, r24
 564:	bd 01       	movw	r22, r26
 566:	cf 01       	movw	r24, r30
 568:	08 95       	ret

0000056a <__udivmodhi4>:
 56a:	aa 1b       	sub	r26, r26
 56c:	bb 1b       	sub	r27, r27
 56e:	51 e1       	ldi	r21, 0x11	; 17
 570:	07 c0       	rjmp	.+14     	; 0x580 <__udivmodhi4_ep>

00000572 <__udivmodhi4_loop>:
 572:	aa 1f       	adc	r26, r26
 574:	bb 1f       	adc	r27, r27
 576:	a6 17       	cp	r26, r22
 578:	b7 07       	cpc	r27, r23
 57a:	10 f0       	brcs	.+4      	; 0x580 <__udivmodhi4_ep>
 57c:	a6 1b       	sub	r26, r22
 57e:	b7 0b       	sbc	r27, r23

00000580 <__udivmodhi4_ep>:
 580:	88 1f       	adc	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	5a 95       	dec	r21
 586:	a9 f7       	brne	.-22     	; 0x572 <__udivmodhi4_loop>
 588:	80 95       	com	r24
 58a:	90 95       	com	r25
 58c:	bc 01       	movw	r22, r24
 58e:	cd 01       	movw	r24, r26
 590:	08 95       	ret

00000592 <malloc>:
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	bc 01       	movw	r22, r24
 598:	82 30       	cpi	r24, 0x02	; 2
 59a:	91 05       	cpc	r25, r1
 59c:	10 f4       	brcc	.+4      	; 0x5a2 <malloc+0x10>
 59e:	62 e0       	ldi	r22, 0x02	; 2
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	a0 91 13 01 	lds	r26, 0x0113
 5a6:	b0 91 14 01 	lds	r27, 0x0114
 5aa:	ed 01       	movw	r28, r26
 5ac:	e0 e0       	ldi	r30, 0x00	; 0
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	40 e0       	ldi	r20, 0x00	; 0
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	21 c0       	rjmp	.+66     	; 0x5f8 <malloc+0x66>
 5b6:	88 81       	ld	r24, Y
 5b8:	99 81       	ldd	r25, Y+1	; 0x01
 5ba:	86 17       	cp	r24, r22
 5bc:	97 07       	cpc	r25, r23
 5be:	69 f4       	brne	.+26     	; 0x5da <malloc+0x48>
 5c0:	8a 81       	ldd	r24, Y+2	; 0x02
 5c2:	9b 81       	ldd	r25, Y+3	; 0x03
 5c4:	30 97       	sbiw	r30, 0x00	; 0
 5c6:	19 f0       	breq	.+6      	; 0x5ce <malloc+0x3c>
 5c8:	93 83       	std	Z+3, r25	; 0x03
 5ca:	82 83       	std	Z+2, r24	; 0x02
 5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <malloc+0x44>
 5ce:	90 93 14 01 	sts	0x0114, r25
 5d2:	80 93 13 01 	sts	0x0113, r24
 5d6:	fe 01       	movw	r30, r28
 5d8:	34 c0       	rjmp	.+104    	; 0x642 <malloc+0xb0>
 5da:	68 17       	cp	r22, r24
 5dc:	79 07       	cpc	r23, r25
 5de:	38 f4       	brcc	.+14     	; 0x5ee <malloc+0x5c>
 5e0:	41 15       	cp	r20, r1
 5e2:	51 05       	cpc	r21, r1
 5e4:	19 f0       	breq	.+6      	; 0x5ec <malloc+0x5a>
 5e6:	84 17       	cp	r24, r20
 5e8:	95 07       	cpc	r25, r21
 5ea:	08 f4       	brcc	.+2      	; 0x5ee <malloc+0x5c>
 5ec:	ac 01       	movw	r20, r24
 5ee:	fe 01       	movw	r30, r28
 5f0:	8a 81       	ldd	r24, Y+2	; 0x02
 5f2:	9b 81       	ldd	r25, Y+3	; 0x03
 5f4:	9c 01       	movw	r18, r24
 5f6:	e9 01       	movw	r28, r18
 5f8:	20 97       	sbiw	r28, 0x00	; 0
 5fa:	e9 f6       	brne	.-70     	; 0x5b6 <malloc+0x24>
 5fc:	41 15       	cp	r20, r1
 5fe:	51 05       	cpc	r21, r1
 600:	a9 f1       	breq	.+106    	; 0x66c <malloc+0xda>
 602:	ca 01       	movw	r24, r20
 604:	86 1b       	sub	r24, r22
 606:	97 0b       	sbc	r25, r23
 608:	04 97       	sbiw	r24, 0x04	; 4
 60a:	08 f4       	brcc	.+2      	; 0x60e <malloc+0x7c>
 60c:	ba 01       	movw	r22, r20
 60e:	e0 e0       	ldi	r30, 0x00	; 0
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	2a c0       	rjmp	.+84     	; 0x668 <malloc+0xd6>
 614:	8d 91       	ld	r24, X+
 616:	9c 91       	ld	r25, X
 618:	11 97       	sbiw	r26, 0x01	; 1
 61a:	84 17       	cp	r24, r20
 61c:	95 07       	cpc	r25, r21
 61e:	f9 f4       	brne	.+62     	; 0x65e <malloc+0xcc>
 620:	64 17       	cp	r22, r20
 622:	75 07       	cpc	r23, r21
 624:	81 f4       	brne	.+32     	; 0x646 <malloc+0xb4>
 626:	12 96       	adiw	r26, 0x02	; 2
 628:	8d 91       	ld	r24, X+
 62a:	9c 91       	ld	r25, X
 62c:	13 97       	sbiw	r26, 0x03	; 3
 62e:	30 97       	sbiw	r30, 0x00	; 0
 630:	19 f0       	breq	.+6      	; 0x638 <malloc+0xa6>
 632:	93 83       	std	Z+3, r25	; 0x03
 634:	82 83       	std	Z+2, r24	; 0x02
 636:	04 c0       	rjmp	.+8      	; 0x640 <malloc+0xae>
 638:	90 93 14 01 	sts	0x0114, r25
 63c:	80 93 13 01 	sts	0x0113, r24
 640:	fd 01       	movw	r30, r26
 642:	32 96       	adiw	r30, 0x02	; 2
 644:	4f c0       	rjmp	.+158    	; 0x6e4 <malloc+0x152>
 646:	ca 01       	movw	r24, r20
 648:	86 1b       	sub	r24, r22
 64a:	97 0b       	sbc	r25, r23
 64c:	fd 01       	movw	r30, r26
 64e:	e8 0f       	add	r30, r24
 650:	f9 1f       	adc	r31, r25
 652:	61 93       	st	Z+, r22
 654:	71 93       	st	Z+, r23
 656:	02 97       	sbiw	r24, 0x02	; 2
 658:	8d 93       	st	X+, r24
 65a:	9c 93       	st	X, r25
 65c:	43 c0       	rjmp	.+134    	; 0x6e4 <malloc+0x152>
 65e:	fd 01       	movw	r30, r26
 660:	82 81       	ldd	r24, Z+2	; 0x02
 662:	93 81       	ldd	r25, Z+3	; 0x03
 664:	9c 01       	movw	r18, r24
 666:	d9 01       	movw	r26, r18
 668:	10 97       	sbiw	r26, 0x00	; 0
 66a:	a1 f6       	brne	.-88     	; 0x614 <malloc+0x82>
 66c:	80 91 11 01 	lds	r24, 0x0111
 670:	90 91 12 01 	lds	r25, 0x0112
 674:	89 2b       	or	r24, r25
 676:	41 f4       	brne	.+16     	; 0x688 <malloc+0xf6>
 678:	80 91 02 01 	lds	r24, 0x0102
 67c:	90 91 03 01 	lds	r25, 0x0103
 680:	90 93 12 01 	sts	0x0112, r25
 684:	80 93 11 01 	sts	0x0111, r24
 688:	40 91 04 01 	lds	r20, 0x0104
 68c:	50 91 05 01 	lds	r21, 0x0105
 690:	41 15       	cp	r20, r1
 692:	51 05       	cpc	r21, r1
 694:	41 f4       	brne	.+16     	; 0x6a6 <malloc+0x114>
 696:	4d b7       	in	r20, 0x3d	; 61
 698:	5e b7       	in	r21, 0x3e	; 62
 69a:	80 91 00 01 	lds	r24, 0x0100
 69e:	90 91 01 01 	lds	r25, 0x0101
 6a2:	48 1b       	sub	r20, r24
 6a4:	59 0b       	sbc	r21, r25
 6a6:	20 91 11 01 	lds	r18, 0x0111
 6aa:	30 91 12 01 	lds	r19, 0x0112
 6ae:	24 17       	cp	r18, r20
 6b0:	35 07       	cpc	r19, r21
 6b2:	b0 f4       	brcc	.+44     	; 0x6e0 <malloc+0x14e>
 6b4:	ca 01       	movw	r24, r20
 6b6:	82 1b       	sub	r24, r18
 6b8:	93 0b       	sbc	r25, r19
 6ba:	86 17       	cp	r24, r22
 6bc:	97 07       	cpc	r25, r23
 6be:	80 f0       	brcs	.+32     	; 0x6e0 <malloc+0x14e>
 6c0:	ab 01       	movw	r20, r22
 6c2:	4e 5f       	subi	r20, 0xFE	; 254
 6c4:	5f 4f       	sbci	r21, 0xFF	; 255
 6c6:	84 17       	cp	r24, r20
 6c8:	95 07       	cpc	r25, r21
 6ca:	50 f0       	brcs	.+20     	; 0x6e0 <malloc+0x14e>
 6cc:	42 0f       	add	r20, r18
 6ce:	53 1f       	adc	r21, r19
 6d0:	50 93 12 01 	sts	0x0112, r21
 6d4:	40 93 11 01 	sts	0x0111, r20
 6d8:	f9 01       	movw	r30, r18
 6da:	61 93       	st	Z+, r22
 6dc:	71 93       	st	Z+, r23
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <malloc+0x152>
 6e0:	e0 e0       	ldi	r30, 0x00	; 0
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	cf 01       	movw	r24, r30
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <free>:
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	00 97       	sbiw	r24, 0x00	; 0
 6f2:	09 f4       	brne	.+2      	; 0x6f6 <free+0xa>
 6f4:	50 c0       	rjmp	.+160    	; 0x796 <free+0xaa>
 6f6:	ec 01       	movw	r28, r24
 6f8:	22 97       	sbiw	r28, 0x02	; 2
 6fa:	1b 82       	std	Y+3, r1	; 0x03
 6fc:	1a 82       	std	Y+2, r1	; 0x02
 6fe:	a0 91 13 01 	lds	r26, 0x0113
 702:	b0 91 14 01 	lds	r27, 0x0114
 706:	10 97       	sbiw	r26, 0x00	; 0
 708:	09 f1       	breq	.+66     	; 0x74c <free+0x60>
 70a:	40 e0       	ldi	r20, 0x00	; 0
 70c:	50 e0       	ldi	r21, 0x00	; 0
 70e:	ac 17       	cp	r26, r28
 710:	bd 07       	cpc	r27, r29
 712:	08 f1       	brcs	.+66     	; 0x756 <free+0x6a>
 714:	bb 83       	std	Y+3, r27	; 0x03
 716:	aa 83       	std	Y+2, r26	; 0x02
 718:	fe 01       	movw	r30, r28
 71a:	21 91       	ld	r18, Z+
 71c:	31 91       	ld	r19, Z+
 71e:	e2 0f       	add	r30, r18
 720:	f3 1f       	adc	r31, r19
 722:	ae 17       	cp	r26, r30
 724:	bf 07       	cpc	r27, r31
 726:	79 f4       	brne	.+30     	; 0x746 <free+0x5a>
 728:	8d 91       	ld	r24, X+
 72a:	9c 91       	ld	r25, X
 72c:	11 97       	sbiw	r26, 0x01	; 1
 72e:	28 0f       	add	r18, r24
 730:	39 1f       	adc	r19, r25
 732:	2e 5f       	subi	r18, 0xFE	; 254
 734:	3f 4f       	sbci	r19, 0xFF	; 255
 736:	39 83       	std	Y+1, r19	; 0x01
 738:	28 83       	st	Y, r18
 73a:	12 96       	adiw	r26, 0x02	; 2
 73c:	8d 91       	ld	r24, X+
 73e:	9c 91       	ld	r25, X
 740:	13 97       	sbiw	r26, 0x03	; 3
 742:	9b 83       	std	Y+3, r25	; 0x03
 744:	8a 83       	std	Y+2, r24	; 0x02
 746:	41 15       	cp	r20, r1
 748:	51 05       	cpc	r21, r1
 74a:	71 f4       	brne	.+28     	; 0x768 <free+0x7c>
 74c:	d0 93 14 01 	sts	0x0114, r29
 750:	c0 93 13 01 	sts	0x0113, r28
 754:	20 c0       	rjmp	.+64     	; 0x796 <free+0xaa>
 756:	12 96       	adiw	r26, 0x02	; 2
 758:	8d 91       	ld	r24, X+
 75a:	9c 91       	ld	r25, X
 75c:	13 97       	sbiw	r26, 0x03	; 3
 75e:	ad 01       	movw	r20, r26
 760:	00 97       	sbiw	r24, 0x00	; 0
 762:	11 f0       	breq	.+4      	; 0x768 <free+0x7c>
 764:	dc 01       	movw	r26, r24
 766:	d3 cf       	rjmp	.-90     	; 0x70e <free+0x22>
 768:	fa 01       	movw	r30, r20
 76a:	d3 83       	std	Z+3, r29	; 0x03
 76c:	c2 83       	std	Z+2, r28	; 0x02
 76e:	21 91       	ld	r18, Z+
 770:	31 91       	ld	r19, Z+
 772:	e2 0f       	add	r30, r18
 774:	f3 1f       	adc	r31, r19
 776:	ce 17       	cp	r28, r30
 778:	df 07       	cpc	r29, r31
 77a:	69 f4       	brne	.+26     	; 0x796 <free+0xaa>
 77c:	88 81       	ld	r24, Y
 77e:	99 81       	ldd	r25, Y+1	; 0x01
 780:	28 0f       	add	r18, r24
 782:	39 1f       	adc	r19, r25
 784:	2e 5f       	subi	r18, 0xFE	; 254
 786:	3f 4f       	sbci	r19, 0xFF	; 255
 788:	fa 01       	movw	r30, r20
 78a:	31 83       	std	Z+1, r19	; 0x01
 78c:	20 83       	st	Z, r18
 78e:	8a 81       	ldd	r24, Y+2	; 0x02
 790:	9b 81       	ldd	r25, Y+3	; 0x03
 792:	93 83       	std	Z+3, r25	; 0x03
 794:	82 83       	std	Z+2, r24	; 0x02
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	08 95       	ret

0000079c <_exit>:
 79c:	f8 94       	cli

0000079e <__stop_program>:
 79e:	ff cf       	rjmp	.-2      	; 0x79e <__stop_program>
