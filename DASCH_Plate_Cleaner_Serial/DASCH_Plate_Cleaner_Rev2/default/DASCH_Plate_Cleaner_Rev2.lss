
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002f6  00800100  00004324  000043b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004324  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  008003f6  008003f6  000046ae  2**0
                  ALLOC
  3 .stab         00005274  00000000  00000000  000046b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000544b  00000000  00000000  00009924  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000ed6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000043f  00000000  00000000  0000edaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000012c2  00000000  00000000  0000f1ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002fb  00000000  00000000  000104b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000019a6  00000000  00000000  000107ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00012154  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b76  00000000  00000000  000122d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000012c8  00000000  00000000  00012e4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 a7 1c 	jmp	0x394e	; 0x394e <__vector_11>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      50:	0c 94 e4 18 	jmp	0x31c8	; 0x31c8 <__vector_20>
      54:	0c 94 ae 1a 	jmp	0x355c	; 0x355c <__vector_21>
      58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      70:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__vector_28>
      74:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__vector_29>
      78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      8c:	88 0a       	sbc	r8, r24
      8e:	a1 0a       	sbc	r10, r17
      90:	bc 0a       	sbc	r11, r28
      92:	d9 0a       	sbc	r13, r25
      94:	f8 0a       	sbc	r15, r24
      96:	14 0b       	sbc	r17, r20
      98:	32 0b       	sbc	r19, r18
      9a:	53 0b       	sbc	r21, r19
      9c:	75 0b       	sbc	r23, r21
      9e:	7f 0b       	sbc	r23, r31
      a0:	83 0b       	sbc	r24, r19
      a2:	8f 0b       	sbc	r24, r31
      a4:	93 0b       	sbc	r25, r19
      a6:	9d 0b       	sbc	r25, r29
      a8:	a1 0b       	sbc	r26, r17
      aa:	ac 0b       	sbc	r26, r28
      ac:	b0 0b       	sbc	r27, r16
      ae:	bb 0b       	sbc	r27, r27
      b0:	bf 0b       	sbc	r27, r31
      b2:	ca 0b       	sbc	r28, r26
      b4:	ce 0b       	sbc	r28, r30
      b6:	d9 0b       	sbc	r29, r25
      b8:	dd 0b       	sbc	r29, r29
      ba:	ec 0b       	sbc	r30, r28
      bc:	f2 0b       	sbc	r31, r18
      be:	01 0c       	add	r0, r1
      c0:	05 0c       	add	r0, r5
      c2:	10 0c       	add	r1, r0
      c4:	14 0c       	add	r1, r4
      c6:	1f 0c       	add	r1, r15
      c8:	23 0c       	add	r2, r3
      ca:	2f 0c       	add	r2, r15
      cc:	35 0c       	add	r3, r5
      ce:	45 0c       	add	r4, r5
      d0:	4f 0c       	add	r4, r15
      d2:	65 0c       	add	r6, r5
      d4:	6f 0c       	add	r6, r15
      d6:	85 0c       	add	r8, r5
      d8:	8f 0c       	add	r8, r15
      da:	a5 0c       	add	r10, r5
      dc:	af 0c       	add	r10, r15
      de:	c5 0c       	add	r12, r5
      e0:	cf 0c       	add	r12, r15
      e2:	dc 0c       	add	r13, r12

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d0 e4       	ldi	r29, 0x40	; 64
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	13 e0       	ldi	r17, 0x03	; 3
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b1 e0       	ldi	r27, 0x01	; 1
      f6:	e4 e2       	ldi	r30, 0x24	; 36
      f8:	f3 e4       	ldi	r31, 0x43	; 67
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a6 3f       	cpi	r26, 0xF6	; 246
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	14 e0       	ldi	r17, 0x04	; 4
     10c:	a6 ef       	ldi	r26, 0xF6	; 246
     10e:	b3 e0       	ldi	r27, 0x03	; 3
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	ae 33       	cpi	r26, 0x3E	; 62
     116:	b1 07       	cpc	r27, r17
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 8c 07 	call	0xf18	; 0xf18 <main>
     11e:	0c 94 90 21 	jmp	0x4320	; 0x4320 <_exit>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     126:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     12a:	8c e0       	ldi	r24, 0x0C	; 12
     12c:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
     130:	08 95       	ret

00000132 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
     132:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     134:	84 ea       	ldi	r24, 0xA4	; 164
     136:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     13a:	80 91 bc 00 	lds	r24, 0x00BC
     13e:	87 ff       	sbrs	r24, 7
     140:	fc cf       	rjmp	.-8      	; 0x13a <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     142:	80 91 b9 00 	lds	r24, 0x00B9
     146:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     148:	88 30       	cpi	r24, 0x08	; 8
     14a:	21 f0       	breq	.+8      	; 0x154 <i2c_start+0x22>
     14c:	80 31       	cpi	r24, 0x10	; 16
     14e:	11 f0       	breq	.+4      	; 0x154 <i2c_start+0x22>
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	08 95       	ret

	// send device address
	TWDR = address;
     154:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     158:	84 e8       	ldi	r24, 0x84	; 132
     15a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     15e:	80 91 bc 00 	lds	r24, 0x00BC
     162:	87 ff       	sbrs	r24, 7
     164:	fc cf       	rjmp	.-8      	; 0x15e <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     166:	90 91 b9 00 	lds	r25, 0x00B9
     16a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     16c:	98 31       	cpi	r25, 0x18	; 24
     16e:	11 f4       	brne	.+4      	; 0x174 <i2c_start+0x42>
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	08 95       	ret
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 34       	cpi	r25, 0x40	; 64
     178:	09 f0       	breq	.+2      	; 0x17c <i2c_start+0x4a>
     17a:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
     17c:	08 95       	ret

0000017e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     17e:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     180:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     182:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     184:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     186:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     18a:	80 91 bc 00 	lds	r24, 0x00BC
     18e:	87 ff       	sbrs	r24, 7
     190:	fc cf       	rjmp	.-8      	; 0x18a <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     192:	80 91 b9 00 	lds	r24, 0x00B9
     196:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     198:	88 30       	cpi	r24, 0x08	; 8
     19a:	11 f0       	breq	.+4      	; 0x1a0 <i2c_start_wait+0x22>
     19c:	80 31       	cpi	r24, 0x10	; 16
     19e:	99 f7       	brne	.-26     	; 0x186 <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
     1a0:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
     1a4:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     1a8:	80 91 bc 00 	lds	r24, 0x00BC
     1ac:	87 ff       	sbrs	r24, 7
     1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     1b0:	80 91 b9 00 	lds	r24, 0x00B9
     1b4:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     1b6:	80 32       	cpi	r24, 0x20	; 32
     1b8:	11 f0       	breq	.+4      	; 0x1be <i2c_start_wait+0x40>
     1ba:	88 35       	cpi	r24, 0x58	; 88
     1bc:	39 f4       	brne	.+14     	; 0x1cc <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1be:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     1c2:	80 91 bc 00 	lds	r24, 0x00BC
     1c6:	84 fd       	sbrc	r24, 4
     1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <i2c_start_wait+0x44>
     1ca:	dd cf       	rjmp	.-70     	; 0x186 <i2c_start_wait+0x8>
     1cc:	08 95       	ret

000001ce <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     1ce:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>

}/* i2c_rep_start */
     1d2:	08 95       	ret

000001d4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1d4:	84 e9       	ldi	r24, 0x94	; 148
     1d6:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     1da:	80 91 bc 00 	lds	r24, 0x00BC
     1de:	84 fd       	sbrc	r24, 4
     1e0:	fc cf       	rjmp	.-8      	; 0x1da <i2c_stop+0x6>

}/* i2c_stop */
     1e2:	08 95       	ret

000001e4 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     1e4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     1e8:	84 e8       	ldi	r24, 0x84	; 132
     1ea:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     1ee:	80 91 bc 00 	lds	r24, 0x00BC
     1f2:	87 ff       	sbrs	r24, 7
     1f4:	fc cf       	rjmp	.-8      	; 0x1ee <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     1f6:	80 91 b9 00 	lds	r24, 0x00B9
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	88 7f       	andi	r24, 0xF8	; 248
     1fe:	88 32       	cpi	r24, 0x28	; 40
     200:	09 f0       	breq	.+2      	; 0x204 <i2c_write+0x20>
     202:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     204:	89 2f       	mov	r24, r25
     206:	08 95       	ret

00000208 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     208:	84 ec       	ldi	r24, 0xC4	; 196
     20a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     20e:	80 91 bc 00 	lds	r24, 0x00BC
     212:	87 ff       	sbrs	r24, 7
     214:	fc cf       	rjmp	.-8      	; 0x20e <i2c_readAck+0x6>

    return TWDR;
     216:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
     21a:	08 95       	ret

0000021c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     21c:	84 e8       	ldi	r24, 0x84	; 132
     21e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     222:	80 91 bc 00 	lds	r24, 0x00BC
     226:	87 ff       	sbrs	r24, 7
     228:	fc cf       	rjmp	.-8      	; 0x222 <i2c_readNak+0x6>
	
    return TWDR;
     22a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     22e:	08 95       	ret

00000230 <is_digital_input_high>:

// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
// the pin.
static inline unsigned char is_digital_input_high(unsigned char pin)
{
     230:	48 2f       	mov	r20, r24
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     232:	88 30       	cpi	r24, 0x08	; 8
     234:	58 f4       	brcc	.+22     	; 0x24c <is_digital_input_high+0x1c>
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	02 c0       	rjmp	.+4      	; 0x240 <is_digital_input_high+0x10>
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	4a 95       	dec	r20
     242:	e2 f7       	brpl	.-8      	; 0x23c <is_digital_input_high+0xc>
     244:	98 2f       	mov	r25, r24
     246:	e9 e2       	ldi	r30, 0x29	; 41
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	36 c0       	rjmp	.+108    	; 0x2b8 <is_digital_input_high+0x88>
	}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     24c:	80 31       	cpi	r24, 0x10	; 16
     24e:	78 f4       	brcc	.+30     	; 0x26e <is_digital_input_high+0x3e>
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	28 50       	subi	r18, 0x08	; 8
     256:	30 40       	sbci	r19, 0x00	; 0
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	02 c0       	rjmp	.+4      	; 0x262 <is_digital_input_high+0x32>
     25e:	88 0f       	add	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	2a 95       	dec	r18
     264:	e2 f7       	brpl	.-8      	; 0x25e <is_digital_input_high+0x2e>
     266:	98 2f       	mov	r25, r24
     268:	e3 e2       	ldi	r30, 0x23	; 35
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	25 c0       	rjmp	.+74     	; 0x2b8 <is_digital_input_high+0x88>
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     26e:	88 31       	cpi	r24, 0x18	; 24
     270:	78 f4       	brcc	.+30     	; 0x290 <is_digital_input_high+0x60>
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
     272:	28 2f       	mov	r18, r24
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	20 51       	subi	r18, 0x10	; 16
     278:	30 40       	sbci	r19, 0x00	; 0
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	02 c0       	rjmp	.+4      	; 0x284 <is_digital_input_high+0x54>
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	2a 95       	dec	r18
     286:	e2 f7       	brpl	.-8      	; 0x280 <is_digital_input_high+0x50>
     288:	98 2f       	mov	r25, r24
     28a:	e6 e2       	ldi	r30, 0x26	; 38
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	14 c0       	rjmp	.+40     	; 0x2b8 <is_digital_input_high+0x88>
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     290:	80 32       	cpi	r24, 0x20	; 32
     292:	20 f0       	brcs	.+8      	; 0x29c <is_digital_input_high+0x6c>
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	e0 e0       	ldi	r30, 0x00	; 0
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	0e c0       	rjmp	.+28     	; 0x2b8 <is_digital_input_high+0x88>
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
		io->bitmask = 1 << (31 - pin);
     29c:	2f e1       	ldi	r18, 0x1F	; 31
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	28 1b       	sub	r18, r24
     2a2:	31 09       	sbc	r19, r1
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <is_digital_input_high+0x7e>
     2aa:	88 0f       	add	r24, r24
     2ac:	99 1f       	adc	r25, r25
     2ae:	2a 95       	dec	r18
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <is_digital_input_high+0x7a>
     2b2:	98 2f       	mov	r25, r24
     2b4:	e0 e2       	ldi	r30, 0x20	; 32
     2b6:	f0 e0       	ldi	r31, 0x00	; 0

// low-level method for reading the value of the PIN register for an pin or set of pins
// described by an IOStruct pointer.
static inline unsigned char get_digital_input_value(struct IOStruct* ioPin)
{
	return *(ioPin->pinRegister) & ioPin->bitmask;
     2b8:	80 81       	ld	r24, Z
static inline unsigned char is_digital_input_high(unsigned char pin)
{
	struct IOStruct registers;
	get_io_registers(&registers, pin);
	return get_digital_input_value(&registers);
}
     2ba:	89 23       	and	r24, r25
     2bc:	08 95       	ret

000002be <brush1_action>:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
	}
}

void brush1_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	f9 01       	movw	r30, r18
     2c4:	d8 01       	movw	r26, r16
	switch(state){
     2c6:	8b 30       	cpi	r24, 0x0B	; 11
     2c8:	91 05       	cpc	r25, r1
     2ca:	51 f1       	breq	.+84     	; 0x320 <brush1_action+0x62>
     2cc:	8c 30       	cpi	r24, 0x0C	; 12
     2ce:	91 05       	cpc	r25, r1
     2d0:	5c f4       	brge	.+22     	; 0x2e8 <brush1_action+0x2a>
     2d2:	89 30       	cpi	r24, 0x09	; 9
     2d4:	91 05       	cpc	r25, r1
     2d6:	a9 f0       	breq	.+42     	; 0x302 <brush1_action+0x44>
     2d8:	8a 30       	cpi	r24, 0x0A	; 10
     2da:	91 05       	cpc	r25, r1
     2dc:	0c f0       	brlt	.+2      	; 0x2e0 <brush1_action+0x22>
     2de:	43 c0       	rjmp	.+134    	; 0x366 <brush1_action+0xa8>
     2e0:	08 97       	sbiw	r24, 0x08	; 8
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <brush1_action+0x28>
     2e4:	56 c0       	rjmp	.+172    	; 0x392 <brush1_action+0xd4>
     2e6:	30 c0       	rjmp	.+96     	; 0x348 <brush1_action+0x8a>
     2e8:	8d 30       	cpi	r24, 0x0D	; 13
     2ea:	91 05       	cpc	r25, r1
     2ec:	69 f1       	breq	.+90     	; 0x348 <brush1_action+0x8a>
     2ee:	8d 30       	cpi	r24, 0x0D	; 13
     2f0:	91 05       	cpc	r25, r1
     2f2:	0c f1       	brlt	.+66     	; 0x336 <brush1_action+0x78>
     2f4:	8e 30       	cpi	r24, 0x0E	; 14
     2f6:	91 05       	cpc	r25, r1
     2f8:	79 f1       	breq	.+94     	; 0x358 <brush1_action+0x9a>
     2fa:	0f 97       	sbiw	r24, 0x0f	; 15
     2fc:	09 f0       	breq	.+2      	; 0x300 <brush1_action+0x42>
     2fe:	49 c0       	rjmp	.+146    	; 0x392 <brush1_action+0xd4>
     300:	3d c0       	rjmp	.+122    	; 0x37c <brush1_action+0xbe>
		case MOVEC1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B1SET:
			*pfixtureMotor = 0;
     302:	11 82       	std	Z+1, r1	; 0x01
     304:	10 82       	st	Z, r1
			*pbrush1Motor = 1;
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	8d 93       	st	X+, r24
     30c:	9c 93       	st	X, r25
			u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     30e:	80 91 2f 04 	lds	r24, 0x042F
     312:	81 60       	ori	r24, 0x01	; 1
     314:	80 93 2f 04 	sts	0x042F, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;  // ******* dir3 *******
     318:	80 91 33 04 	lds	r24, 0x0433
     31c:	80 68       	ori	r24, 0x80	; 128
     31e:	37 c0       	rjmp	.+110    	; 0x38e <brush1_action+0xd0>
			*pbrush1Motor = 1;
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
			break;
		case CLEAN1_1:
			*pbrush1Motor = 1;
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	8d 93       	st	X+, r24
     326:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	80 83       	st	Z, r24
     32c:	80 91 33 04 	lds	r24, 0x0433
     330:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     332:	8f 7e       	andi	r24, 0xEF	; 239
     334:	2c c0       	rjmp	.+88     	; 0x38e <brush1_action+0xd0>
			break;
		case B1STOP1:
			*pfixtureMotor = 0;
     336:	11 82       	std	Z+1, r1	; 0x01
     338:	10 82       	st	Z, r1
			*pbrush1Motor = 0;
     33a:	1d 92       	st	X+, r1
     33c:	1c 92       	st	X, r1
			u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     33e:	80 91 32 04 	lds	r24, 0x0432
     342:	8f 7b       	andi	r24, 0xBF	; 191
			u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     344:	80 62       	ori	r24, 0x20	; 32
     346:	17 c0       	rjmp	.+46     	; 0x376 <brush1_action+0xb8>
			break;
		case CLEAN1_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     348:	80 91 33 04 	lds	r24, 0x0433
     34c:	80 61       	ori	r24, 0x10	; 16
     34e:	80 93 33 04 	sts	0x0433, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	16 c0       	rjmp	.+44     	; 0x384 <brush1_action+0xc6>
			break;
		case B1START2:
			*pfixtureMotor = 0;
     358:	11 82       	std	Z+1, r1	; 0x01
     35a:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
     35c:	80 91 33 04 	lds	r24, 0x0433
     360:	8f 77       	andi	r24, 0x7F	; 127
     362:	80 93 33 04 	sts	0x0433, r24
			*pbrush1Motor = 1;
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	8d 93       	st	X+, r24
     36c:	9c 93       	st	X, r25
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     36e:	80 91 32 04 	lds	r24, 0x0432
     372:	80 64       	ori	r24, 0x40	; 64
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     374:	8f 7d       	andi	r24, 0xDF	; 223
     376:	80 93 32 04 	sts	0x0432, r24
     37a:	0b c0       	rjmp	.+22     	; 0x392 <brush1_action+0xd4>
			break;
		case CLEAN1_3:
			*pbrush1Motor = 1;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	8d 93       	st	X+, r24
     382:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     384:	91 83       	std	Z+1, r25	; 0x01
     386:	80 83       	st	Z, r24
     388:	80 91 33 04 	lds	r24, 0x0433
     38c:	80 62       	ori	r24, 0x20	; 32
     38e:	80 93 33 04 	sts	0x0433, r24
			break;
	}
}
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	08 95       	ret

00000398 <brush2_action>:

void brush2_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
     39c:	d9 01       	movw	r26, r18
     39e:	f7 01       	movw	r30, r14
	switch(state){
     3a0:	85 31       	cpi	r24, 0x15	; 21
     3a2:	91 05       	cpc	r25, r1
     3a4:	99 f1       	breq	.+102    	; 0x40c <brush2_action+0x74>
     3a6:	86 31       	cpi	r24, 0x16	; 22
     3a8:	91 05       	cpc	r25, r1
     3aa:	8c f4       	brge	.+34     	; 0x3ce <brush2_action+0x36>
     3ac:	82 31       	cpi	r24, 0x12	; 18
     3ae:	91 05       	cpc	r25, r1
     3b0:	19 f1       	breq	.+70     	; 0x3f8 <brush2_action+0x60>
     3b2:	83 31       	cpi	r24, 0x13	; 19
     3b4:	91 05       	cpc	r25, r1
     3b6:	24 f4       	brge	.+8      	; 0x3c0 <brush2_action+0x28>
     3b8:	41 97       	sbiw	r24, 0x11	; 17
     3ba:	09 f0       	breq	.+2      	; 0x3be <brush2_action+0x26>
     3bc:	75 c0       	rjmp	.+234    	; 0x4a8 <brush2_action+0x110>
     3be:	66 c0       	rjmp	.+204    	; 0x48c <brush2_action+0xf4>
     3c0:	83 31       	cpi	r24, 0x13	; 19
     3c2:	91 05       	cpc	r25, r1
     3c4:	d9 f1       	breq	.+118    	; 0x43c <brush2_action+0xa4>
     3c6:	44 97       	sbiw	r24, 0x14	; 20
     3c8:	09 f0       	breq	.+2      	; 0x3cc <brush2_action+0x34>
     3ca:	6e c0       	rjmp	.+220    	; 0x4a8 <brush2_action+0x110>
     3cc:	46 c0       	rjmp	.+140    	; 0x45a <brush2_action+0xc2>
     3ce:	88 31       	cpi	r24, 0x18	; 24
     3d0:	91 05       	cpc	r25, r1
     3d2:	09 f4       	brne	.+2      	; 0x3d6 <brush2_action+0x3e>
     3d4:	42 c0       	rjmp	.+132    	; 0x45a <brush2_action+0xc2>
     3d6:	89 31       	cpi	r24, 0x19	; 25
     3d8:	91 05       	cpc	r25, r1
     3da:	3c f4       	brge	.+14     	; 0x3ea <brush2_action+0x52>
     3dc:	86 31       	cpi	r24, 0x16	; 22
     3de:	91 05       	cpc	r25, r1
     3e0:	11 f1       	breq	.+68     	; 0x426 <brush2_action+0x8e>
     3e2:	47 97       	sbiw	r24, 0x17	; 23
     3e4:	09 f0       	breq	.+2      	; 0x3e8 <brush2_action+0x50>
     3e6:	60 c0       	rjmp	.+192    	; 0x4a8 <brush2_action+0x110>
     3e8:	22 c0       	rjmp	.+68     	; 0x42e <brush2_action+0x96>
     3ea:	89 31       	cpi	r24, 0x19	; 25
     3ec:	91 05       	cpc	r25, r1
     3ee:	d1 f1       	breq	.+116    	; 0x464 <brush2_action+0xcc>
     3f0:	4a 97       	sbiw	r24, 0x1a	; 26
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <brush2_action+0x5e>
     3f4:	59 c0       	rjmp	.+178    	; 0x4a8 <brush2_action+0x110>
     3f6:	4a c0       	rjmp	.+148    	; 0x48c <brush2_action+0xf4>
		case MOVEC2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2SET:
			*pfixtureMotor = 0;
     3f8:	1d 92       	st	X+, r1
     3fa:	1c 92       	st	X, r1
			*pbrush2Motor = 1;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	80 83       	st	Z, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     404:	80 91 2f 04 	lds	r24, 0x042F
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;  // ******* dir4 *******
     408:	8c 60       	ori	r24, 0x0C	; 12
     40a:	3d c0       	rjmp	.+122    	; 0x486 <brush2_action+0xee>
		case CLEAN2_1:
			*pbrush2Motor = 1;
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP1:
			*pfixtureMotor = 0;
     40c:	1d 92       	st	X+, r1
     40e:	1c 92       	st	X, r1
			*pbrush2Motor = 0;
     410:	11 82       	std	Z+1, r1	; 0x01
     412:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     414:	80 91 30 04 	lds	r24, 0x0430
     418:	8e 7f       	andi	r24, 0xFE	; 254
     41a:	80 93 30 04 	sts	0x0430, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     41e:	80 91 32 04 	lds	r24, 0x0432
     422:	80 68       	ori	r24, 0x80	; 128
     424:	17 c0       	rjmp	.+46     	; 0x454 <brush2_action+0xbc>
			break;
		case CLEAN2_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     426:	80 91 33 04 	lds	r24, 0x0433
     42a:	80 61       	ori	r24, 0x10	; 16
     42c:	32 c0       	rjmp	.+100    	; 0x492 <brush2_action+0xfa>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2START2:
			*pfixtureMotor = 0;
     42e:	1d 92       	st	X+, r1
     430:	1c 92       	st	X, r1
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     432:	80 91 2f 04 	lds	r24, 0x042F
     436:	8b 7f       	andi	r24, 0xFB	; 251
     438:	80 93 2f 04 	sts	0x042F, r24
			*pbrush2Motor = 1;
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	91 83       	std	Z+1, r25	; 0x01
     442:	80 83       	st	Z, r24
			u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     444:	80 91 30 04 	lds	r24, 0x0430
     448:	81 60       	ori	r24, 0x01	; 1
     44a:	80 93 30 04 	sts	0x0430, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     44e:	80 91 32 04 	lds	r24, 0x0432
     452:	8f 77       	andi	r24, 0x7F	; 127
     454:	80 93 32 04 	sts	0x0432, r24
     458:	27 c0       	rjmp	.+78     	; 0x4a8 <brush2_action+0x110>
			break;
		case CLEAN2_3:
			*pbrush2Motor = 1;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	91 83       	std	Z+1, r25	; 0x01
     460:	80 83       	st	Z, r24
     462:	1b c0       	rjmp	.+54     	; 0x49a <brush2_action+0x102>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP2:
			*pbrush2Motor = 0;
     464:	11 82       	std	Z+1, r1	; 0x01
     466:	10 82       	st	Z, r1
			*pfixtureMotor = 0;
     468:	1d 92       	st	X+, r1
     46a:	1c 92       	st	X, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     46c:	80 91 30 04 	lds	r24, 0x0430
     470:	8e 7f       	andi	r24, 0xFE	; 254
     472:	80 93 30 04 	sts	0x0430, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     476:	80 91 32 04 	lds	r24, 0x0432
     47a:	80 68       	ori	r24, 0x80	; 128
     47c:	80 93 32 04 	sts	0x0432, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     480:	80 91 2f 04 	lds	r24, 0x042F
     484:	87 7f       	andi	r24, 0xF7	; 247
     486:	80 93 2f 04 	sts	0x042F, r24
     48a:	0e c0       	rjmp	.+28     	; 0x4a8 <brush2_action+0x110>
			break;
		//*************************************************
		case MOVED1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     48c:	80 91 33 04 	lds	r24, 0x0433
     490:	8f 7e       	andi	r24, 0xEF	; 239
     492:	80 93 33 04 	sts	0x0433, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	8d 93       	st	X+, r24
     49c:	9c 93       	st	X, r25
     49e:	80 91 33 04 	lds	r24, 0x0433
     4a2:	80 62       	ori	r24, 0x20	; 32
     4a4:	80 93 33 04 	sts	0x0433, r24
			break;
	}
}
     4a8:	ff 90       	pop	r15
     4aa:	ef 90       	pop	r14
     4ac:	08 95       	ret

000004ae <dry_action>:

void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	ea 01       	movw	r28, r20
     4b8:	f9 01       	movw	r30, r18
     4ba:	d6 01       	movw	r26, r12
	switch(state){
     4bc:	8f 31       	cpi	r24, 0x1F	; 31
     4be:	91 05       	cpc	r25, r1
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <dry_action+0x16>
     4c2:	5f c0       	rjmp	.+190    	; 0x582 <dry_action+0xd4>
     4c4:	80 32       	cpi	r24, 0x20	; 32
     4c6:	91 05       	cpc	r25, r1
     4c8:	8c f4       	brge	.+34     	; 0x4ec <dry_action+0x3e>
     4ca:	8c 31       	cpi	r24, 0x1C	; 28
     4cc:	91 05       	cpc	r25, r1
     4ce:	79 f1       	breq	.+94     	; 0x52e <dry_action+0x80>
     4d0:	8d 31       	cpi	r24, 0x1D	; 29
     4d2:	91 05       	cpc	r25, r1
     4d4:	24 f4       	brge	.+8      	; 0x4de <dry_action+0x30>
     4d6:	4b 97       	sbiw	r24, 0x1b	; 27
     4d8:	09 f0       	breq	.+2      	; 0x4dc <dry_action+0x2e>
     4da:	98 c0       	rjmp	.+304    	; 0x60c <dry_action+0x15e>
     4dc:	1e c0       	rjmp	.+60     	; 0x51a <dry_action+0x6c>
     4de:	8d 31       	cpi	r24, 0x1D	; 29
     4e0:	91 05       	cpc	r25, r1
     4e2:	71 f1       	breq	.+92     	; 0x540 <dry_action+0x92>
     4e4:	4e 97       	sbiw	r24, 0x1e	; 30
     4e6:	09 f0       	breq	.+2      	; 0x4ea <dry_action+0x3c>
     4e8:	91 c0       	rjmp	.+290    	; 0x60c <dry_action+0x15e>
     4ea:	41 c0       	rjmp	.+130    	; 0x56e <dry_action+0xc0>
     4ec:	82 32       	cpi	r24, 0x22	; 34
     4ee:	91 05       	cpc	r25, r1
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <dry_action+0x46>
     4f2:	65 c0       	rjmp	.+202    	; 0x5be <dry_action+0x110>
     4f4:	83 32       	cpi	r24, 0x23	; 35
     4f6:	91 05       	cpc	r25, r1
     4f8:	44 f4       	brge	.+16     	; 0x50a <dry_action+0x5c>
     4fa:	80 32       	cpi	r24, 0x20	; 32
     4fc:	91 05       	cpc	r25, r1
     4fe:	09 f4       	brne	.+2      	; 0x502 <dry_action+0x54>
     500:	63 c0       	rjmp	.+198    	; 0x5c8 <dry_action+0x11a>
     502:	81 97       	sbiw	r24, 0x21	; 33
     504:	09 f0       	breq	.+2      	; 0x508 <dry_action+0x5a>
     506:	82 c0       	rjmp	.+260    	; 0x60c <dry_action+0x15e>
     508:	53 c0       	rjmp	.+166    	; 0x5b0 <dry_action+0x102>
     50a:	83 32       	cpi	r24, 0x23	; 35
     50c:	91 05       	cpc	r25, r1
     50e:	09 f4       	brne	.+2      	; 0x512 <dry_action+0x64>
     510:	65 c0       	rjmp	.+202    	; 0x5dc <dry_action+0x12e>
     512:	84 97       	sbiw	r24, 0x24	; 36
     514:	09 f0       	breq	.+2      	; 0x518 <dry_action+0x6a>
     516:	7a c0       	rjmp	.+244    	; 0x60c <dry_action+0x15e>
     518:	70 c0       	rjmp	.+224    	; 0x5fa <dry_action+0x14c>
		case MOVED1EXTRA:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     51a:	80 91 33 04 	lds	r24, 0x0433
     51e:	80 61       	ori	r24, 0x10	; 16
     520:	80 93 33 04 	sts	0x0433, r24
			*pfixtureMotor = 1;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	91 83       	std	Z+1, r25	; 0x01
     52a:	80 83       	st	Z, r24
     52c:	6f c0       	rjmp	.+222    	; 0x60c <dry_action+0x15e>
			break;
		case DRY1:
		u_outputByte1.bits_in_outputByte1.airKnife = 0;
     52e:	80 91 30 04 	lds	r24, 0x0430
     532:	87 7f       	andi	r24, 0xF7	; 247
     534:	80 93 30 04 	sts	0x0430, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     538:	80 91 33 04 	lds	r24, 0x0433
     53c:	80 61       	ori	r24, 0x10	; 16
     53e:	42 c0       	rjmp	.+132    	; 0x5c4 <dry_action+0x116>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case D1STOP:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     540:	21 e0       	ldi	r18, 0x01	; 1
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	31 83       	std	Z+1, r19	; 0x01
     546:	20 83       	st	Z, r18
     548:	80 91 33 04 	lds	r24, 0x0433
     54c:	80 62       	ori	r24, 0x20	; 32
     54e:	80 93 33 04 	sts	0x0433, r24
			u_outputByte1.bits_in_outputByte1.airKnife = 1;
     552:	80 91 30 04 	lds	r24, 0x0430
     556:	88 60       	ori	r24, 0x08	; 8
     558:	80 93 30 04 	sts	0x0430, r24
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
     55c:	80 91 2f 04 	lds	r24, 0x042F
     560:	80 64       	ori	r24, 0x40	; 64
			u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     562:	8f 7d       	andi	r24, 0xDF	; 223
     564:	80 93 2f 04 	sts	0x042F, r24
			*ppaperTowelMotor = 1;
     568:	2d 93       	st	X+, r18
     56a:	3c 93       	st	X, r19
     56c:	4f c0       	rjmp	.+158    	; 0x60c <dry_action+0x15e>
			break;
		case DRY2:
			u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     56e:	80 91 30 04 	lds	r24, 0x0430
     572:	8d 7f       	andi	r24, 0xFD	; 253
     574:	80 93 30 04 	sts	0x0430, r24
			*ppaperTowelMotor = 1;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	8d 93       	st	X+, r24
     57e:	9c 93       	st	X, r25
     580:	25 c0       	rjmp	.+74     	; 0x5cc <dry_action+0x11e>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case D2STOP:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	80 91 33 04 	lds	r24, 0x0433
     58e:	80 62       	ori	r24, 0x20	; 32
     590:	80 93 33 04 	sts	0x0433, r24
			*ppaperTowelMotor = 0;
     594:	1d 92       	st	X+, r1
     596:	1c 92       	st	X, r1
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
     598:	80 91 2f 04 	lds	r24, 0x042F
     59c:	8f 7b       	andi	r24, 0xBF	; 191
     59e:	80 93 2f 04 	sts	0x042F, r24
			u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     5a2:	80 91 30 04 	lds	r24, 0x0430
     5a6:	82 60       	ori	r24, 0x02	; 2
			u_outputByte1.bits_in_outputByte1.ptLower = 0;
     5a8:	8b 7f       	andi	r24, 0xFB	; 251
     5aa:	80 93 30 04 	sts	0x0430, r24
     5ae:	2e c0       	rjmp	.+92     	; 0x60c <dry_action+0x15e>
		case FIXL2EXTRA:
			*pfixtureMotor = 1;
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case RAISEL2:
			*pfixtureMotor = 0;
     5b0:	11 82       	std	Z+1, r1	; 0x01
     5b2:	10 82       	st	Z, r1
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     5b4:	80 91 32 04 	lds	r24, 0x0432
     5b8:	87 7f       	andi	r24, 0xF7	; 247
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     5ba:	80 61       	ori	r24, 0x10	; 16
     5bc:	1b c0       	rjmp	.+54     	; 0x5f4 <dry_action+0x146>
			break;
		case FIXH:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     5be:	80 91 33 04 	lds	r24, 0x0433
     5c2:	8f 7e       	andi	r24, 0xEF	; 239
     5c4:	80 93 33 04 	sts	0x0433, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	91 83       	std	Z+1, r25	; 0x01
     5ce:	80 83       	st	Z, r24
     5d0:	80 91 33 04 	lds	r24, 0x0433
     5d4:	80 62       	ori	r24, 0x20	; 32
     5d6:	80 93 33 04 	sts	0x0433, r24
     5da:	18 c0       	rjmp	.+48     	; 0x60c <dry_action+0x15e>
			break;
		case LOWERL3:
			*pfixtureMotor = 0;
     5dc:	11 82       	std	Z+1, r1	; 0x01
     5de:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     5e0:	80 91 33 04 	lds	r24, 0x0433
     5e4:	8f 7d       	andi	r24, 0xDF	; 223
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     5e6:	84 60       	ori	r24, 0x04	; 4
     5e8:	80 93 33 04 	sts	0x0433, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     5ec:	80 91 32 04 	lds	r24, 0x0432
     5f0:	88 60       	ori	r24, 0x08	; 8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     5f2:	8f 7e       	andi	r24, 0xEF	; 239
     5f4:	80 93 32 04 	sts	0x0432, r24
     5f8:	09 c0       	rjmp	.+18     	; 0x60c <dry_action+0x15e>
			break;
		case UNLOAD:
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     5fa:	80 91 33 04 	lds	r24, 0x0433
     5fe:	8d 7f       	andi	r24, 0xFD	; 253
     600:	80 93 33 04 	sts	0x0433, r24
			*pplateLoadMotor = 1;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	99 83       	std	Y+1, r25	; 0x01
     60a:	88 83       	st	Y, r24
			break;
	}
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	df 90       	pop	r13
     612:	cf 90       	pop	r12
     614:	08 95       	ret

00000616 <button_debounce>:

bool button_debounce(int counter, int *pstateButton)
{
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	8c 01       	movw	r16, r24
     620:	eb 01       	movw	r28, r22
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && is_digital_input_high(IO_D0)){
     622:	88 81       	ld	r24, Y
     624:	99 81       	ldd	r25, Y+1	; 0x01
     626:	89 2b       	or	r24, r25
     628:	69 f4       	brne	.+26     	; 0x644 <button_debounce+0x2e>
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     630:	88 23       	and	r24, r24
     632:	41 f0       	breq	.+16     	; 0x644 <button_debounce+0x2e>
		counterRefPush = counter;
     634:	10 93 f9 03 	sts	0x03F9, r17
     638:	00 93 f8 03 	sts	0x03F8, r16
		*pstateButton = PRESSED;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	99 83       	std	Y+1, r25	; 0x01
     642:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     644:	88 81       	ld	r24, Y
     646:	99 81       	ldd	r25, Y+1	; 0x01
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	f9 f4       	brne	.+62     	; 0x68a <button_debounce+0x74>
		if(counter - counterRefPush > 15){
     64c:	80 91 f8 03 	lds	r24, 0x03F8
     650:	90 91 f9 03 	lds	r25, 0x03F9
     654:	98 01       	movw	r18, r16
     656:	28 1b       	sub	r18, r24
     658:	39 0b       	sbc	r19, r25
     65a:	20 31       	cpi	r18, 0x10	; 16
     65c:	31 05       	cpc	r19, r1
     65e:	74 f0       	brlt	.+28     	; 0x67c <button_debounce+0x66>
			if(!is_digital_input_high(IO_D0)){
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     666:	88 23       	and	r24, r24
     668:	81 f4       	brne	.+32     	; 0x68a <button_debounce+0x74>
				counterRefRel = counter;
     66a:	10 93 f7 03 	sts	0x03F7, r17
     66e:	00 93 f6 03 	sts	0x03F6, r16
				*pstateButton = RELEASED;
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	99 83       	std	Y+1, r25	; 0x01
     678:	88 83       	st	Y, r24
     67a:	07 c0       	rjmp	.+14     	; 0x68a <button_debounce+0x74>
			}
		}
		else if(!is_digital_input_high(IO_D0)){
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     682:	88 23       	and	r24, r24
     684:	11 f4       	brne	.+4      	; 0x68a <button_debounce+0x74>
			*pstateButton = NONE;
     686:	19 82       	std	Y+1, r1	; 0x01
     688:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     68a:	88 81       	ld	r24, Y
     68c:	99 81       	ldd	r25, Y+1	; 0x01
     68e:	02 97       	sbiw	r24, 0x02	; 2
     690:	d9 f4       	brne	.+54     	; 0x6c8 <button_debounce+0xb2>
		if(is_digital_input_high(IO_D0)){
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     698:	88 23       	and	r24, r24
     69a:	49 f0       	breq	.+18     	; 0x6ae <button_debounce+0x98>
			*pstateButton = PRESSED;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	99 83       	std	Y+1, r25	; 0x01
     6a2:	88 83       	st	Y, r24
			counterRefPush = counter;
     6a4:	10 93 f9 03 	sts	0x03F9, r17
     6a8:	00 93 f8 03 	sts	0x03F8, r16
     6ac:	0d c0       	rjmp	.+26     	; 0x6c8 <button_debounce+0xb2>
		}
		else if(counter - counterRefRel > 15){
     6ae:	80 91 f6 03 	lds	r24, 0x03F6
     6b2:	90 91 f7 03 	lds	r25, 0x03F7
     6b6:	08 1b       	sub	r16, r24
     6b8:	19 0b       	sbc	r17, r25
     6ba:	00 31       	cpi	r16, 0x10	; 16
     6bc:	11 05       	cpc	r17, r1
     6be:	24 f0       	brlt	.+8      	; 0x6c8 <button_debounce+0xb2>
			*pstateButton = NONE;
     6c0:	19 82       	std	Y+1, r1	; 0x01
     6c2:	18 82       	st	Y, r1
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	01 c0       	rjmp	.+2      	; 0x6ca <button_debounce+0xb4>
			return true;
     6c8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	08 95       	ret

000006d4 <init_trans>:

bool init_trans(int state, bool buttonTriggered, int counter, int counterRef){
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	fc 01       	movw	r30, r24
     6da:	86 2f       	mov	r24, r22
     6dc:	da 01       	movw	r26, r20
     6de:	b9 01       	movw	r22, r18
	return((state == INIT && buttonTriggered)||
     6e0:	30 97       	sbiw	r30, 0x00	; 0
     6e2:	19 f4       	brne	.+6      	; 0x6ea <init_trans+0x16>
     6e4:	88 23       	and	r24, r24
     6e6:	81 f1       	breq	.+96     	; 0x748 <init_trans+0x74>
     6e8:	77 c0       	rjmp	.+238    	; 0x7d8 <init_trans+0x104>
     6ea:	e1 30       	cpi	r30, 0x01	; 1
     6ec:	f1 05       	cpc	r31, r1
     6ee:	29 f4       	brne	.+10     	; 0x6fa <init_trans+0x26>
     6f0:	80 91 2e 04 	lds	r24, 0x042E
     6f4:	80 fd       	sbrc	r24, 0
     6f6:	30 c0       	rjmp	.+96     	; 0x758 <init_trans+0x84>
     6f8:	6f c0       	rjmp	.+222    	; 0x7d8 <init_trans+0x104>
     6fa:	e2 30       	cpi	r30, 0x02	; 2
     6fc:	f1 05       	cpc	r31, r1
     6fe:	b1 f4       	brne	.+44     	; 0x72c <init_trans+0x58>
     700:	42 1b       	sub	r20, r18
     702:	53 0b       	sbc	r21, r19
     704:	20 91 b0 03 	lds	r18, 0x03B0
     708:	30 91 b1 03 	lds	r19, 0x03B1
     70c:	80 91 a0 03 	lds	r24, 0x03A0
     710:	90 91 a1 03 	lds	r25, 0x03A1
     714:	ec 01       	movw	r28, r24
     716:	2c 9f       	mul	r18, r28
     718:	c0 01       	movw	r24, r0
     71a:	2d 9f       	mul	r18, r29
     71c:	90 0d       	add	r25, r0
     71e:	3c 9f       	mul	r19, r28
     720:	90 0d       	add	r25, r0
     722:	11 24       	eor	r1, r1
     724:	84 17       	cp	r24, r20
     726:	95 07       	cpc	r25, r21
     728:	ac f5       	brge	.+106    	; 0x794 <init_trans+0xc0>
     72a:	56 c0       	rjmp	.+172    	; 0x7d8 <init_trans+0x104>
     72c:	e3 30       	cpi	r30, 0x03	; 3
     72e:	f1 05       	cpc	r31, r1
     730:	59 f4       	brne	.+22     	; 0x748 <init_trans+0x74>
     732:	9a 01       	movw	r18, r20
     734:	26 1b       	sub	r18, r22
     736:	37 0b       	sbc	r19, r23
     738:	80 91 90 03 	lds	r24, 0x0390
     73c:	90 91 91 03 	lds	r25, 0x0391
     740:	82 17       	cp	r24, r18
     742:	93 07       	cpc	r25, r19
     744:	ac f5       	brge	.+106    	; 0x7b0 <init_trans+0xdc>
     746:	48 c0       	rjmp	.+144    	; 0x7d8 <init_trans+0x104>
     748:	e4 30       	cpi	r30, 0x04	; 4
     74a:	f1 05       	cpc	r31, r1
     74c:	29 f4       	brne	.+10     	; 0x758 <init_trans+0x84>
     74e:	80 91 2e 04 	lds	r24, 0x042E
     752:	86 95       	lsr	r24
     754:	86 95       	lsr	r24
     756:	26 c0       	rjmp	.+76     	; 0x7a4 <init_trans+0xd0>
     758:	e5 30       	cpi	r30, 0x05	; 5
     75a:	f1 05       	cpc	r31, r1
     75c:	d9 f4       	brne	.+54     	; 0x794 <init_trans+0xc0>
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	a6 1b       	sub	r26, r22
     764:	b7 0b       	sbc	r27, r23
     766:	80 91 b2 03 	lds	r24, 0x03B2
     76a:	90 91 b3 03 	lds	r25, 0x03B3
     76e:	20 91 a2 03 	lds	r18, 0x03A2
     772:	30 91 a3 03 	lds	r19, 0x03A3
     776:	bc 01       	movw	r22, r24
     778:	62 9f       	mul	r22, r18
     77a:	c0 01       	movw	r24, r0
     77c:	63 9f       	mul	r22, r19
     77e:	90 0d       	add	r25, r0
     780:	72 9f       	mul	r23, r18
     782:	90 0d       	add	r25, r0
     784:	11 24       	eor	r1, r1
     786:	8a 17       	cp	r24, r26
     788:	9b 07       	cpc	r25, r27
     78a:	14 f4       	brge	.+4      	; 0x790 <init_trans+0xbc>
     78c:	41 e0       	ldi	r20, 0x01	; 1
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	ca 01       	movw	r24, r20
     792:	24 c0       	rjmp	.+72     	; 0x7dc <init_trans+0x108>
     794:	e6 30       	cpi	r30, 0x06	; 6
     796:	f1 05       	cpc	r31, r1
     798:	59 f4       	brne	.+22     	; 0x7b0 <init_trans+0xdc>
     79a:	80 91 2e 04 	lds	r24, 0x042E
     79e:	86 95       	lsr	r24
     7a0:	86 95       	lsr	r24
     7a2:	86 95       	lsr	r24
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	89 27       	eor	r24, r25
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	81 70       	andi	r24, 0x01	; 1
     7ac:	90 70       	andi	r25, 0x00	; 0
     7ae:	16 c0       	rjmp	.+44     	; 0x7dc <init_trans+0x108>
     7b0:	37 97       	sbiw	r30, 0x07	; 7
     7b2:	19 f0       	breq	.+6      	; 0x7ba <init_trans+0xe6>
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	11 c0       	rjmp	.+34     	; 0x7dc <init_trans+0x108>
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	a6 1b       	sub	r26, r22
     7c0:	b7 0b       	sbc	r27, r23
     7c2:	80 91 90 03 	lds	r24, 0x0390
     7c6:	90 91 91 03 	lds	r25, 0x0391
     7ca:	8a 17       	cp	r24, r26
     7cc:	9b 07       	cpc	r25, r27
     7ce:	14 f4       	brge	.+4      	; 0x7d4 <init_trans+0x100>
     7d0:	21 e0       	ldi	r18, 0x01	; 1
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	c9 01       	movw	r24, r18
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <init_trans+0x108>
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 e0       	ldi	r25, 0x00	; 0
	(state == RAISEL1 && counter - counterRef > pWait)||
	(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == FIXLEXTRA && counter - counterRef > totalStepLength2*fixtureLiftExtra)||
	(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0)||
	(state == LOWERL2 && counter - counterRef > pWait));
}
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <firstB_trans>:

bool firstB_trans(int state, int counter, int counterRef){
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	fc 01       	movw	r30, r24
     7e8:	da 01       	movw	r26, r20
	//Had references to counterRef14...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVEC1 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush1Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0)||
     7ea:	88 30       	cpi	r24, 0x08	; 8
     7ec:	91 05       	cpc	r25, r1
     7ee:	29 f4       	brne	.+10     	; 0x7fa <firstB_trans+0x18>
     7f0:	80 91 2e 04 	lds	r24, 0x042E
     7f4:	84 fd       	sbrc	r24, 4
     7f6:	37 c0       	rjmp	.+110    	; 0x866 <firstB_trans+0x84>
     7f8:	78 c0       	rjmp	.+240    	; 0x8ea <firstB_trans+0x108>
     7fa:	89 30       	cpi	r24, 0x09	; 9
     7fc:	91 05       	cpc	r25, r1
     7fe:	59 f4       	brne	.+22     	; 0x816 <firstB_trans+0x34>
     800:	9b 01       	movw	r18, r22
     802:	24 1b       	sub	r18, r20
     804:	35 0b       	sbc	r19, r21
     806:	80 91 92 03 	lds	r24, 0x0392
     80a:	90 91 93 03 	lds	r25, 0x0393
     80e:	82 17       	cp	r24, r18
     810:	93 07       	cpc	r25, r19
     812:	64 f5       	brge	.+88     	; 0x86c <firstB_trans+0x8a>
     814:	6a c0       	rjmp	.+212    	; 0x8ea <firstB_trans+0x108>
     816:	8a 30       	cpi	r24, 0x0A	; 10
     818:	91 05       	cpc	r25, r1
     81a:	59 f4       	brne	.+22     	; 0x832 <firstB_trans+0x50>
     81c:	9b 01       	movw	r18, r22
     81e:	24 1b       	sub	r18, r20
     820:	35 0b       	sbc	r19, r21
     822:	80 91 90 03 	lds	r24, 0x0390
     826:	90 91 91 03 	lds	r25, 0x0391
     82a:	82 17       	cp	r24, r18
     82c:	93 07       	cpc	r25, r19
     82e:	5c f5       	brge	.+86     	; 0x886 <firstB_trans+0xa4>
     830:	5c c0       	rjmp	.+184    	; 0x8ea <firstB_trans+0x108>
     832:	8b 30       	cpi	r24, 0x0B	; 11
     834:	91 05       	cpc	r25, r1
     836:	b9 f4       	brne	.+46     	; 0x866 <firstB_trans+0x84>
     838:	ab 01       	movw	r20, r22
     83a:	4a 1b       	sub	r20, r26
     83c:	5b 0b       	sbc	r21, r27
     83e:	20 91 aa 03 	lds	r18, 0x03AA
     842:	30 91 ab 03 	lds	r19, 0x03AB
     846:	80 91 a2 03 	lds	r24, 0x03A2
     84a:	90 91 a3 03 	lds	r25, 0x03A3
     84e:	ec 01       	movw	r28, r24
     850:	2c 9f       	mul	r18, r28
     852:	c0 01       	movw	r24, r0
     854:	2d 9f       	mul	r18, r29
     856:	90 0d       	add	r25, r0
     858:	3c 9f       	mul	r19, r28
     85a:	90 0d       	add	r25, r0
     85c:	11 24       	eor	r1, r1
     85e:	84 17       	cp	r24, r20
     860:	95 07       	cpc	r25, r21
     862:	1c f5       	brge	.+70     	; 0x8aa <firstB_trans+0xc8>
     864:	42 c0       	rjmp	.+132    	; 0x8ea <firstB_trans+0x108>
     866:	ec 30       	cpi	r30, 0x0C	; 12
     868:	f1 05       	cpc	r31, r1
     86a:	81 f0       	breq	.+32     	; 0x88c <firstB_trans+0xaa>
     86c:	ed 30       	cpi	r30, 0x0D	; 13
     86e:	f1 05       	cpc	r31, r1
     870:	51 f4       	brne	.+20     	; 0x886 <firstB_trans+0xa4>
     872:	80 91 2e 04 	lds	r24, 0x042E
     876:	82 95       	swap	r24
     878:	8f 70       	andi	r24, 0x0F	; 15
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	89 27       	eor	r24, r25
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	81 70       	andi	r24, 0x01	; 1
     882:	90 70       	andi	r25, 0x00	; 0
     884:	34 c0       	rjmp	.+104    	; 0x8ee <firstB_trans+0x10c>
     886:	ee 30       	cpi	r30, 0x0E	; 14
     888:	f1 05       	cpc	r31, r1
     88a:	79 f4       	brne	.+30     	; 0x8aa <firstB_trans+0xc8>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	6a 1b       	sub	r22, r26
     892:	7b 0b       	sbc	r23, r27
     894:	80 91 90 03 	lds	r24, 0x0390
     898:	90 91 91 03 	lds	r25, 0x0391
     89c:	86 17       	cp	r24, r22
     89e:	97 07       	cpc	r25, r23
     8a0:	14 f4       	brge	.+4      	; 0x8a6 <firstB_trans+0xc4>
     8a2:	21 e0       	ldi	r18, 0x01	; 1
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	c9 01       	movw	r24, r18
     8a8:	22 c0       	rjmp	.+68     	; 0x8ee <firstB_trans+0x10c>
     8aa:	3f 97       	sbiw	r30, 0x0f	; 15
     8ac:	19 f0       	breq	.+6      	; 0x8b4 <firstB_trans+0xd2>
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	1d c0       	rjmp	.+58     	; 0x8ee <firstB_trans+0x10c>
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	6a 1b       	sub	r22, r26
     8ba:	7b 0b       	sbc	r23, r27
     8bc:	80 91 aa 03 	lds	r24, 0x03AA
     8c0:	90 91 ab 03 	lds	r25, 0x03AB
     8c4:	20 91 a2 03 	lds	r18, 0x03A2
     8c8:	30 91 a3 03 	lds	r19, 0x03A3
     8cc:	fc 01       	movw	r30, r24
     8ce:	e2 9f       	mul	r30, r18
     8d0:	c0 01       	movw	r24, r0
     8d2:	e3 9f       	mul	r30, r19
     8d4:	90 0d       	add	r25, r0
     8d6:	f2 9f       	mul	r31, r18
     8d8:	90 0d       	add	r25, r0
     8da:	11 24       	eor	r1, r1
     8dc:	86 17       	cp	r24, r22
     8de:	97 07       	cpc	r25, r23
     8e0:	14 f4       	brge	.+4      	; 0x8e6 <firstB_trans+0x104>
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	ca 01       	movw	r24, r20
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <firstB_trans+0x10c>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	90 e0       	ldi	r25, 0x00	; 0
	(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||
	(state == B1STOP1 && counter - counterRef > pWait)||
	(state == CLEAN1_2 && /*counter - counterRef > totalStepLength2*fixtureMotorHalfPlate &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0)||
	(state == B1START2 && counter - counterRef > pWait)||
	(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate));
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <secondB_trans>:

bool secondB_trans(int state, int counter, int counterRef){
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	fc 01       	movw	r30, r24
     8fa:	da 01       	movw	r26, r20
	return((state == MOVEC2 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush2Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0)||
     8fc:	81 31       	cpi	r24, 0x11	; 17
     8fe:	91 05       	cpc	r25, r1
     900:	29 f4       	brne	.+10     	; 0x90c <secondB_trans+0x18>
     902:	80 91 2e 04 	lds	r24, 0x042E
     906:	85 fd       	sbrc	r24, 5
     908:	37 c0       	rjmp	.+110    	; 0x978 <secondB_trans+0x84>
     90a:	90 c0       	rjmp	.+288    	; 0xa2c <secondB_trans+0x138>
     90c:	82 31       	cpi	r24, 0x12	; 18
     90e:	91 05       	cpc	r25, r1
     910:	59 f4       	brne	.+22     	; 0x928 <secondB_trans+0x34>
     912:	9b 01       	movw	r18, r22
     914:	24 1b       	sub	r18, r20
     916:	35 0b       	sbc	r19, r21
     918:	80 91 92 03 	lds	r24, 0x0392
     91c:	90 91 93 03 	lds	r25, 0x0393
     920:	82 17       	cp	r24, r18
     922:	93 07       	cpc	r25, r19
     924:	bc f5       	brge	.+110    	; 0x994 <secondB_trans+0xa0>
     926:	82 c0       	rjmp	.+260    	; 0xa2c <secondB_trans+0x138>
     928:	83 31       	cpi	r24, 0x13	; 19
     92a:	91 05       	cpc	r25, r1
     92c:	59 f4       	brne	.+22     	; 0x944 <secondB_trans+0x50>
     92e:	9b 01       	movw	r18, r22
     930:	24 1b       	sub	r18, r20
     932:	35 0b       	sbc	r19, r21
     934:	80 91 90 03 	lds	r24, 0x0390
     938:	90 91 91 03 	lds	r25, 0x0391
     93c:	82 17       	cp	r24, r18
     93e:	93 07       	cpc	r25, r19
     940:	8c f5       	brge	.+98     	; 0x9a4 <secondB_trans+0xb0>
     942:	74 c0       	rjmp	.+232    	; 0xa2c <secondB_trans+0x138>
     944:	84 31       	cpi	r24, 0x14	; 20
     946:	91 05       	cpc	r25, r1
     948:	b9 f4       	brne	.+46     	; 0x978 <secondB_trans+0x84>
     94a:	ab 01       	movw	r20, r22
     94c:	4a 1b       	sub	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	20 91 aa 03 	lds	r18, 0x03AA
     954:	30 91 ab 03 	lds	r19, 0x03AB
     958:	80 91 a2 03 	lds	r24, 0x03A2
     95c:	90 91 a3 03 	lds	r25, 0x03A3
     960:	ec 01       	movw	r28, r24
     962:	2c 9f       	mul	r18, r28
     964:	c0 01       	movw	r24, r0
     966:	2d 9f       	mul	r18, r29
     968:	90 0d       	add	r25, r0
     96a:	3c 9f       	mul	r19, r28
     96c:	90 0d       	add	r25, r0
     96e:	11 24       	eor	r1, r1
     970:	84 17       	cp	r24, r20
     972:	95 07       	cpc	r25, r21
     974:	d4 f4       	brge	.+52     	; 0x9aa <secondB_trans+0xb6>
     976:	5a c0       	rjmp	.+180    	; 0xa2c <secondB_trans+0x138>
     978:	e5 31       	cpi	r30, 0x15	; 21
     97a:	f1 05       	cpc	r31, r1
     97c:	59 f4       	brne	.+22     	; 0x994 <secondB_trans+0xa0>
     97e:	9b 01       	movw	r18, r22
     980:	2a 1b       	sub	r18, r26
     982:	3b 0b       	sbc	r19, r27
     984:	80 91 90 03 	lds	r24, 0x0390
     988:	90 91 91 03 	lds	r25, 0x0391
     98c:	82 17       	cp	r24, r18
     98e:	93 07       	cpc	r25, r19
     990:	54 f5       	brge	.+84     	; 0x9e6 <secondB_trans+0xf2>
     992:	4c c0       	rjmp	.+152    	; 0xa2c <secondB_trans+0x138>
     994:	e6 31       	cpi	r30, 0x16	; 22
     996:	f1 05       	cpc	r31, r1
     998:	29 f4       	brne	.+10     	; 0x9a4 <secondB_trans+0xb0>
     99a:	80 91 2e 04 	lds	r24, 0x042E
     99e:	85 fd       	sbrc	r24, 5
     9a0:	34 c0       	rjmp	.+104    	; 0xa0a <secondB_trans+0x116>
     9a2:	44 c0       	rjmp	.+136    	; 0xa2c <secondB_trans+0x138>
     9a4:	e7 31       	cpi	r30, 0x17	; 23
     9a6:	f1 05       	cpc	r31, r1
     9a8:	09 f1       	breq	.+66     	; 0x9ec <secondB_trans+0xf8>
     9aa:	e8 31       	cpi	r30, 0x18	; 24
     9ac:	f1 05       	cpc	r31, r1
     9ae:	d9 f4       	brne	.+54     	; 0x9e6 <secondB_trans+0xf2>
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	6a 1b       	sub	r22, r26
     9b6:	7b 0b       	sbc	r23, r27
     9b8:	80 91 aa 03 	lds	r24, 0x03AA
     9bc:	90 91 ab 03 	lds	r25, 0x03AB
     9c0:	20 91 a2 03 	lds	r18, 0x03A2
     9c4:	30 91 a3 03 	lds	r19, 0x03A3
     9c8:	fc 01       	movw	r30, r24
     9ca:	e2 9f       	mul	r30, r18
     9cc:	c0 01       	movw	r24, r0
     9ce:	e3 9f       	mul	r30, r19
     9d0:	90 0d       	add	r25, r0
     9d2:	f2 9f       	mul	r31, r18
     9d4:	90 0d       	add	r25, r0
     9d6:	11 24       	eor	r1, r1
     9d8:	86 17       	cp	r24, r22
     9da:	97 07       	cpc	r25, r23
     9dc:	14 f4       	brge	.+4      	; 0x9e2 <secondB_trans+0xee>
     9de:	41 e0       	ldi	r20, 0x01	; 1
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	ca 01       	movw	r24, r20
     9e4:	25 c0       	rjmp	.+74     	; 0xa30 <secondB_trans+0x13c>
     9e6:	e9 31       	cpi	r30, 0x19	; 25
     9e8:	f1 05       	cpc	r31, r1
     9ea:	79 f4       	brne	.+30     	; 0xa0a <secondB_trans+0x116>
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	6a 1b       	sub	r22, r26
     9f2:	7b 0b       	sbc	r23, r27
     9f4:	80 91 90 03 	lds	r24, 0x0390
     9f8:	90 91 91 03 	lds	r25, 0x0391
     9fc:	86 17       	cp	r24, r22
     9fe:	97 07       	cpc	r25, r23
     a00:	14 f4       	brge	.+4      	; 0xa06 <secondB_trans+0x112>
     a02:	21 e0       	ldi	r18, 0x01	; 1
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	c9 01       	movw	r24, r18
     a08:	13 c0       	rjmp	.+38     	; 0xa30 <secondB_trans+0x13c>
     a0a:	7a 97       	sbiw	r30, 0x1a	; 26
     a0c:	19 f0       	breq	.+6      	; 0xa14 <secondB_trans+0x120>
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e c0       	rjmp	.+28     	; 0xa30 <secondB_trans+0x13c>
     a14:	80 91 2e 04 	lds	r24, 0x042E
     a18:	82 95       	swap	r24
     a1a:	86 95       	lsr	r24
     a1c:	86 95       	lsr	r24
     a1e:	83 70       	andi	r24, 0x03	; 3
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	89 27       	eor	r24, r25
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	81 70       	andi	r24, 0x01	; 1
     a28:	90 70       	andi	r25, 0x00	; 0
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <secondB_trans+0x13c>
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
	(state == CLEAN2_2 && /*counter - counterRef > totalStepLength2*fixtureMotorHalfPlate &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0)||
	(state == B2START2 && counter - counterRef > pWait)||
	(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||
	(state == B2STOP2 && counter - counterRef > pWait)||
	(state == MOVED1 && /*counter - counterRef > totalStepLength2*fixtureMotorDry1Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0));
}
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <dry_trans>:

bool dry_trans(int state, int counter, int counterRef, int counterRefFive){
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	fc 01       	movw	r30, r24
     a3c:	da 01       	movw	r26, r20
	//Had references to counterRef26, 30...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVED1EXTRA && counter - counterRef > fixtureMotorDry1Extra)||
     a3e:	8b 31       	cpi	r24, 0x1B	; 27
     a40:	91 05       	cpc	r25, r1
     a42:	61 f4       	brne	.+24     	; 0xa5c <dry_trans+0x26>
     a44:	9b 01       	movw	r18, r22
     a46:	24 1b       	sub	r18, r20
     a48:	35 0b       	sbc	r19, r21
     a4a:	80 91 bc 03 	lds	r24, 0x03BC
     a4e:	90 91 bd 03 	lds	r25, 0x03BD
     a52:	82 17       	cp	r24, r18
     a54:	93 07       	cpc	r25, r19
     a56:	0c f0       	brlt	.+2      	; 0xa5a <dry_trans+0x24>
     a58:	4f c0       	rjmp	.+158    	; 0xaf8 <dry_trans+0xc2>
     a5a:	b6 c0       	rjmp	.+364    	; 0xbc8 <dry_trans+0x192>
     a5c:	8c 31       	cpi	r24, 0x1C	; 28
     a5e:	91 05       	cpc	r25, r1
     a60:	b9 f4       	brne	.+46     	; 0xa90 <dry_trans+0x5a>
     a62:	ab 01       	movw	r20, r22
     a64:	4a 1b       	sub	r20, r26
     a66:	5b 0b       	sbc	r21, r27
     a68:	20 91 ac 03 	lds	r18, 0x03AC
     a6c:	30 91 ad 03 	lds	r19, 0x03AD
     a70:	80 91 a2 03 	lds	r24, 0x03A2
     a74:	90 91 a3 03 	lds	r25, 0x03A3
     a78:	ec 01       	movw	r28, r24
     a7a:	2c 9f       	mul	r18, r28
     a7c:	c0 01       	movw	r24, r0
     a7e:	2d 9f       	mul	r18, r29
     a80:	90 0d       	add	r25, r0
     a82:	3c 9f       	mul	r19, r28
     a84:	90 0d       	add	r25, r0
     a86:	11 24       	eor	r1, r1
     a88:	84 17       	cp	r24, r20
     a8a:	95 07       	cpc	r25, r21
     a8c:	ec f5       	brge	.+122    	; 0xb08 <dry_trans+0xd2>
     a8e:	9c c0       	rjmp	.+312    	; 0xbc8 <dry_trans+0x192>
     a90:	8d 31       	cpi	r24, 0x1D	; 29
     a92:	91 05       	cpc	r25, r1
     a94:	b9 f4       	brne	.+46     	; 0xac4 <dry_trans+0x8e>
     a96:	ab 01       	movw	r20, r22
     a98:	4a 1b       	sub	r20, r26
     a9a:	5b 0b       	sbc	r21, r27
     a9c:	20 91 be 03 	lds	r18, 0x03BE
     aa0:	30 91 bf 03 	lds	r19, 0x03BF
     aa4:	80 91 a2 03 	lds	r24, 0x03A2
     aa8:	90 91 a3 03 	lds	r25, 0x03A3
     aac:	ec 01       	movw	r28, r24
     aae:	2c 9f       	mul	r18, r28
     ab0:	c0 01       	movw	r24, r0
     ab2:	2d 9f       	mul	r18, r29
     ab4:	90 0d       	add	r25, r0
     ab6:	3c 9f       	mul	r19, r28
     ab8:	90 0d       	add	r25, r0
     aba:	11 24       	eor	r1, r1
     abc:	84 17       	cp	r24, r20
     abe:	95 07       	cpc	r25, r21
     ac0:	ec f5       	brge	.+122    	; 0xb3c <dry_trans+0x106>
     ac2:	82 c0       	rjmp	.+260    	; 0xbc8 <dry_trans+0x192>
     ac4:	8e 31       	cpi	r24, 0x1E	; 30
     ac6:	91 05       	cpc	r25, r1
     ac8:	b9 f4       	brne	.+46     	; 0xaf8 <dry_trans+0xc2>
     aca:	ab 01       	movw	r20, r22
     acc:	4a 1b       	sub	r20, r26
     ace:	5b 0b       	sbc	r21, r27
     ad0:	20 91 ac 03 	lds	r18, 0x03AC
     ad4:	30 91 ad 03 	lds	r19, 0x03AD
     ad8:	80 91 a2 03 	lds	r24, 0x03A2
     adc:	90 91 a3 03 	lds	r25, 0x03A3
     ae0:	ec 01       	movw	r28, r24
     ae2:	2c 9f       	mul	r18, r28
     ae4:	c0 01       	movw	r24, r0
     ae6:	2d 9f       	mul	r18, r29
     ae8:	90 0d       	add	r25, r0
     aea:	3c 9f       	mul	r19, r28
     aec:	90 0d       	add	r25, r0
     aee:	11 24       	eor	r1, r1
     af0:	84 17       	cp	r24, r20
     af2:	95 07       	cpc	r25, r21
     af4:	5c f5       	brge	.+86     	; 0xb4c <dry_trans+0x116>
     af6:	68 c0       	rjmp	.+208    	; 0xbc8 <dry_trans+0x192>
     af8:	ef 31       	cpi	r30, 0x1F	; 31
     afa:	f1 05       	cpc	r31, r1
     afc:	29 f4       	brne	.+10     	; 0xb08 <dry_trans+0xd2>
     afe:	80 91 2e 04 	lds	r24, 0x042E
     b02:	83 fd       	sbrc	r24, 3
     b04:	2f c0       	rjmp	.+94     	; 0xb64 <dry_trans+0x12e>
     b06:	60 c0       	rjmp	.+192    	; 0xbc8 <dry_trans+0x192>
     b08:	e0 32       	cpi	r30, 0x20	; 32
     b0a:	f1 05       	cpc	r31, r1
     b0c:	b9 f4       	brne	.+46     	; 0xb3c <dry_trans+0x106>
     b0e:	ab 01       	movw	r20, r22
     b10:	4a 1b       	sub	r20, r26
     b12:	5b 0b       	sbc	r21, r27
     b14:	20 91 c6 03 	lds	r18, 0x03C6
     b18:	30 91 c7 03 	lds	r19, 0x03C7
     b1c:	80 91 a2 03 	lds	r24, 0x03A2
     b20:	90 91 a3 03 	lds	r25, 0x03A3
     b24:	ec 01       	movw	r28, r24
     b26:	2c 9f       	mul	r18, r28
     b28:	c0 01       	movw	r24, r0
     b2a:	2d 9f       	mul	r18, r29
     b2c:	90 0d       	add	r25, r0
     b2e:	3c 9f       	mul	r19, r28
     b30:	90 0d       	add	r25, r0
     b32:	11 24       	eor	r1, r1
     b34:	84 17       	cp	r24, r20
     b36:	95 07       	cpc	r25, r21
     b38:	3c f5       	brge	.+78     	; 0xb88 <dry_trans+0x152>
     b3a:	46 c0       	rjmp	.+140    	; 0xbc8 <dry_trans+0x192>
     b3c:	e1 32       	cpi	r30, 0x21	; 33
     b3e:	f1 05       	cpc	r31, r1
     b40:	29 f4       	brne	.+10     	; 0xb4c <dry_trans+0x116>
     b42:	80 91 2e 04 	lds	r24, 0x042E
     b46:	86 95       	lsr	r24
     b48:	86 95       	lsr	r24
     b4a:	06 c0       	rjmp	.+12     	; 0xb58 <dry_trans+0x122>
     b4c:	e2 32       	cpi	r30, 0x22	; 34
     b4e:	f1 05       	cpc	r31, r1
     b50:	49 f4       	brne	.+18     	; 0xb64 <dry_trans+0x12e>
     b52:	80 91 2e 04 	lds	r24, 0x042E
     b56:	86 95       	lsr	r24
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	89 27       	eor	r24, r25
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	81 70       	andi	r24, 0x01	; 1
     b60:	90 70       	andi	r25, 0x00	; 0
     b62:	34 c0       	rjmp	.+104    	; 0xbcc <dry_trans+0x196>
     b64:	e3 32       	cpi	r30, 0x23	; 35
     b66:	f1 05       	cpc	r31, r1
     b68:	79 f4       	brne	.+30     	; 0xb88 <dry_trans+0x152>
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	6a 1b       	sub	r22, r26
     b70:	7b 0b       	sbc	r23, r27
     b72:	80 91 90 03 	lds	r24, 0x0390
     b76:	90 91 91 03 	lds	r25, 0x0391
     b7a:	86 17       	cp	r24, r22
     b7c:	97 07       	cpc	r25, r23
     b7e:	14 f4       	brge	.+4      	; 0xb84 <dry_trans+0x14e>
     b80:	21 e0       	ldi	r18, 0x01	; 1
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	c9 01       	movw	r24, r18
     b86:	22 c0       	rjmp	.+68     	; 0xbcc <dry_trans+0x196>
     b88:	b4 97       	sbiw	r30, 0x24	; 36
     b8a:	19 f0       	breq	.+6      	; 0xb92 <dry_trans+0x15c>
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	1d c0       	rjmp	.+58     	; 0xbcc <dry_trans+0x196>
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	6a 1b       	sub	r22, r26
     b98:	7b 0b       	sbc	r23, r27
     b9a:	80 91 ae 03 	lds	r24, 0x03AE
     b9e:	90 91 af 03 	lds	r25, 0x03AF
     ba2:	20 91 a0 03 	lds	r18, 0x03A0
     ba6:	30 91 a1 03 	lds	r19, 0x03A1
     baa:	fc 01       	movw	r30, r24
     bac:	e2 9f       	mul	r30, r18
     bae:	c0 01       	movw	r24, r0
     bb0:	e3 9f       	mul	r30, r19
     bb2:	90 0d       	add	r25, r0
     bb4:	f2 9f       	mul	r31, r18
     bb6:	90 0d       	add	r25, r0
     bb8:	11 24       	eor	r1, r1
     bba:	86 17       	cp	r24, r22
     bbc:	97 07       	cpc	r25, r23
     bbe:	14 f4       	brge	.+4      	; 0xbc4 <dry_trans+0x18e>
     bc0:	41 e0       	ldi	r20, 0x01	; 1
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	ca 01       	movw	r24, r20
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <dry_trans+0x196>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
	(state == FIXL2EXTRA && counter - counterRef > totalStepLength2*fixtureLift2Extra)||
	(state == RAISEL2 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == FIXH && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureHome == 0)||
	(state == LOWERL3 && counter - counterRef > pWait)||
	(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate));
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <motor_and_write>:
	serial_print_string(msg);
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor)
{
     bd2:	6f 92       	push	r6
     bd4:	7f 92       	push	r7
     bd6:	8f 92       	push	r8
     bd8:	9f 92       	push	r9
     bda:	af 92       	push	r10
     bdc:	bf 92       	push	r11
     bde:	cf 92       	push	r12
     be0:	df 92       	push	r13
     be2:	ef 92       	push	r14
     be4:	ff 92       	push	r15
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	4c 01       	movw	r8, r24
     bf0:	3a 01       	movw	r6, r20
     bf2:	e9 01       	movw	r28, r18
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     bf4:	fc 01       	movw	r30, r24
     bf6:	e6 1b       	sub	r30, r22
     bf8:	f7 0b       	sbc	r31, r23
     bfa:	60 91 a0 03 	lds	r22, 0x03A0
     bfe:	70 91 a1 03 	lds	r23, 0x03A1
     c02:	cf 01       	movw	r24, r30
     c04:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <__divmodhi4>
     c08:	20 91 96 03 	lds	r18, 0x0396
     c0c:	30 91 97 03 	lds	r19, 0x0397
     c10:	82 17       	cp	r24, r18
     c12:	93 07       	cpc	r25, r19
     c14:	34 f4       	brge	.+12     	; 0xc22 <motor_and_write+0x50>
     c16:	cd 2b       	or	r28, r29
     c18:	21 f0       	breq	.+8      	; 0xc22 <motor_and_write+0x50>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     c1a:	80 91 33 04 	lds	r24, 0x0433
     c1e:	81 60       	ori	r24, 0x01	; 1
     c20:	03 c0       	rjmp	.+6      	; 0xc28 <motor_and_write+0x56>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     c22:	80 91 33 04 	lds	r24, 0x0433
     c26:	8e 7f       	andi	r24, 0xFE	; 254
     c28:	80 93 33 04 	sts	0x0433, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     c2c:	60 91 a2 03 	lds	r22, 0x03A2
     c30:	70 91 a3 03 	lds	r23, 0x03A3
     c34:	cf 01       	movw	r24, r30
     c36:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <__divmodhi4>
     c3a:	20 91 98 03 	lds	r18, 0x0398
     c3e:	30 91 99 03 	lds	r19, 0x0399
     c42:	82 17       	cp	r24, r18
     c44:	93 07       	cpc	r25, r19
     c46:	34 f4       	brge	.+12     	; 0xc54 <motor_and_write+0x82>
     c48:	01 2b       	or	r16, r17
     c4a:	21 f0       	breq	.+8      	; 0xc54 <motor_and_write+0x82>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     c4c:	80 91 33 04 	lds	r24, 0x0433
     c50:	88 60       	ori	r24, 0x08	; 8
     c52:	03 c0       	rjmp	.+6      	; 0xc5a <motor_and_write+0x88>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     c54:	80 91 33 04 	lds	r24, 0x0433
     c58:	87 7f       	andi	r24, 0xF7	; 247
     c5a:	80 93 33 04 	sts	0x0433, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     c5e:	60 91 a4 03 	lds	r22, 0x03A4
     c62:	70 91 a5 03 	lds	r23, 0x03A5
     c66:	cf 01       	movw	r24, r30
     c68:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <__divmodhi4>
     c6c:	20 91 9a 03 	lds	r18, 0x039A
     c70:	30 91 9b 03 	lds	r19, 0x039B
     c74:	82 17       	cp	r24, r18
     c76:	93 07       	cpc	r25, r19
     c78:	34 f4       	brge	.+12     	; 0xc86 <motor_and_write+0xb4>
     c7a:	ef 28       	or	r14, r15
     c7c:	21 f0       	breq	.+8      	; 0xc86 <motor_and_write+0xb4>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     c7e:	80 91 33 04 	lds	r24, 0x0433
     c82:	80 64       	ori	r24, 0x40	; 64
     c84:	03 c0       	rjmp	.+6      	; 0xc8c <motor_and_write+0xba>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     c86:	80 91 33 04 	lds	r24, 0x0433
     c8a:	8f 7b       	andi	r24, 0xBF	; 191
     c8c:	80 93 33 04 	sts	0x0433, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     c90:	60 91 a6 03 	lds	r22, 0x03A6
     c94:	70 91 a7 03 	lds	r23, 0x03A7
     c98:	cf 01       	movw	r24, r30
     c9a:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <__divmodhi4>
     c9e:	20 91 9c 03 	lds	r18, 0x039C
     ca2:	30 91 9d 03 	lds	r19, 0x039D
     ca6:	82 17       	cp	r24, r18
     ca8:	93 07       	cpc	r25, r19
     caa:	34 f4       	brge	.+12     	; 0xcb8 <motor_and_write+0xe6>
     cac:	cd 28       	or	r12, r13
     cae:	21 f0       	breq	.+8      	; 0xcb8 <motor_and_write+0xe6>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     cb0:	80 91 2f 04 	lds	r24, 0x042F
     cb4:	82 60       	ori	r24, 0x02	; 2
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <motor_and_write+0xec>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     cb8:	80 91 2f 04 	lds	r24, 0x042F
     cbc:	8d 7f       	andi	r24, 0xFD	; 253
     cbe:	80 93 2f 04 	sts	0x042F, r24
	}

	if( ((counter - counterRefFive) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     cc2:	60 91 a8 03 	lds	r22, 0x03A8
     cc6:	70 91 a9 03 	lds	r23, 0x03A9
     cca:	c4 01       	movw	r24, r8
     ccc:	86 19       	sub	r24, r6
     cce:	97 09       	sbc	r25, r7
     cd0:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <__divmodhi4>
     cd4:	20 91 9e 03 	lds	r18, 0x039E
     cd8:	30 91 9f 03 	lds	r19, 0x039F
     cdc:	82 17       	cp	r24, r18
     cde:	93 07       	cpc	r25, r19
     ce0:	34 f4       	brge	.+12     	; 0xcee <motor_and_write+0x11c>
     ce2:	ab 28       	or	r10, r11
     ce4:	21 f0       	breq	.+8      	; 0xcee <motor_and_write+0x11c>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     ce6:	80 91 2f 04 	lds	r24, 0x042F
     cea:	80 61       	ori	r24, 0x10	; 16
     cec:	03 c0       	rjmp	.+6      	; 0xcf4 <motor_and_write+0x122>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     cee:	80 91 2f 04 	lds	r24, 0x042F
     cf2:	8f 7e       	andi	r24, 0xEF	; 239
     cf4:	80 93 2f 04 	sts	0x042F, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     cf8:	80 e4       	ldi	r24, 0x40	; 64
     cfa:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
	i2c_write(0x2);									// write command byte
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     d04:	80 91 33 04 	lds	r24, 0x0433
     d08:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     d0c:	80 91 2f 04 	lds	r24, 0x042F
     d10:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     d14:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

	i2c_start(I2C2+I2C_WRITE);
     d18:	82 e4       	ldi	r24, 0x42	; 66
     d1a:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
	i2c_write(0x2);
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_outputByte0.outputByte0);
     d24:	80 91 32 04 	lds	r24, 0x0432
     d28:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_outputByte1.outputByte1);
     d2c:	80 91 30 04 	lds	r24, 0x0430
     d30:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_stop();
     d34:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
}
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	cf 90       	pop	r12
     d48:	bf 90       	pop	r11
     d4a:	af 90       	pop	r10
     d4c:	9f 90       	pop	r9
     d4e:	8f 90       	pop	r8
     d50:	7f 90       	pop	r7
     d52:	6f 90       	pop	r6
     d54:	08 95       	ret

00000d56 <serial_print_string>:
	}
	serial_print_string("END");
	}
}

void serial_print_string(char msg[]){
     d56:	68 2f       	mov	r22, r24
	serial_send_blocking(USB_COMM, msg, strlen(msg));
     d58:	e8 2f       	mov	r30, r24
     d5a:	f9 2f       	mov	r31, r25
     d5c:	df 01       	movw	r26, r30
     d5e:	0d 90       	ld	r0, X+
     d60:	00 20       	and	r0, r0
     d62:	e9 f7       	brne	.-6      	; 0xd5e <serial_print_string+0x8>
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	ae 1b       	sub	r26, r30
     d68:	bf 0b       	sbc	r27, r31
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	79 2f       	mov	r23, r25
     d6e:	4a 2f       	mov	r20, r26
     d70:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <serial_send_blocking>
	serial_send_blocking(USB_COMM, "\r\n", 2);
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	71 e0       	ldi	r23, 0x01	; 1
     d7a:	42 e0       	ldi	r20, 0x02	; 2
     d7c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <serial_send_blocking>
}
     d80:	08 95       	ret

00000d82 <init_action>:
	i2c_write(u_outputByte0.outputByte0);
	i2c_write(u_outputByte1.outputByte1);
	i2c_stop();
}

void init_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor, bool *pprint0){
     d82:	af 92       	push	r10
     d84:	bf 92       	push	r11
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	ea 01       	movw	r28, r20
     d8c:	f9 01       	movw	r30, r18
	switch(state){
     d8e:	84 30       	cpi	r24, 0x04	; 4
     d90:	91 05       	cpc	r25, r1
     d92:	09 f4       	brne	.+2      	; 0xd96 <init_action+0x14>
     d94:	90 c0       	rjmp	.+288    	; 0xeb6 <init_action+0x134>
     d96:	85 30       	cpi	r24, 0x05	; 5
     d98:	91 05       	cpc	r25, r1
     d9a:	94 f4       	brge	.+36     	; 0xdc0 <init_action+0x3e>
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	91 05       	cpc	r25, r1
     da0:	09 f4       	brne	.+2      	; 0xda4 <init_action+0x22>
     da2:	46 c0       	rjmp	.+140    	; 0xe30 <init_action+0xae>
     da4:	82 30       	cpi	r24, 0x02	; 2
     da6:	91 05       	cpc	r25, r1
     da8:	1c f4       	brge	.+6      	; 0xdb0 <init_action+0x2e>
     daa:	89 2b       	or	r24, r25
     dac:	c9 f0       	breq	.+50     	; 0xde0 <init_action+0x5e>
     dae:	91 c0       	rjmp	.+290    	; 0xed2 <init_action+0x150>
     db0:	82 30       	cpi	r24, 0x02	; 2
     db2:	91 05       	cpc	r25, r1
     db4:	09 f4       	brne	.+2      	; 0xdb8 <init_action+0x36>
     db6:	4f c0       	rjmp	.+158    	; 0xe56 <init_action+0xd4>
     db8:	03 97       	sbiw	r24, 0x03	; 3
     dba:	09 f0       	breq	.+2      	; 0xdbe <init_action+0x3c>
     dbc:	8a c0       	rjmp	.+276    	; 0xed2 <init_action+0x150>
     dbe:	5b c0       	rjmp	.+182    	; 0xe76 <init_action+0xf4>
     dc0:	86 30       	cpi	r24, 0x06	; 6
     dc2:	91 05       	cpc	r25, r1
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <init_action+0x46>
     dc6:	64 c0       	rjmp	.+200    	; 0xe90 <init_action+0x10e>
     dc8:	86 30       	cpi	r24, 0x06	; 6
     dca:	91 05       	cpc	r25, r1
     dcc:	0c f4       	brge	.+2      	; 0xdd0 <init_action+0x4e>
     dce:	73 c0       	rjmp	.+230    	; 0xeb6 <init_action+0x134>
     dd0:	87 30       	cpi	r24, 0x07	; 7
     dd2:	91 05       	cpc	r25, r1
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <init_action+0x56>
     dd6:	69 c0       	rjmp	.+210    	; 0xeaa <init_action+0x128>
     dd8:	08 97       	sbiw	r24, 0x08	; 8
     dda:	09 f0       	breq	.+2      	; 0xdde <init_action+0x5c>
     ddc:	7a c0       	rjmp	.+244    	; 0xed2 <init_action+0x150>
     dde:	6b c0       	rjmp	.+214    	; 0xeb6 <init_action+0x134>
		case INIT:
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
     de0:	80 91 2e 04 	lds	r24, 0x042E
     de4:	90 91 33 04 	lds	r25, 0x0433
     de8:	81 ff       	sbrs	r24, 1
     dea:	07 c0       	rjmp	.+14     	; 0xdfa <init_action+0x78>
				u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
     dec:	9f 7e       	andi	r25, 0xEF	; 239
     dee:	90 93 33 04 	sts	0x0433, r25
				u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     df2:	80 91 32 04 	lds	r24, 0x0432
     df6:	87 7f       	andi	r24, 0xF7	; 247
     df8:	55 c0       	rjmp	.+170    	; 0xea4 <init_action+0x122>
			}
			else{
				u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     dfa:	9f 7d       	andi	r25, 0xDF	; 223
     dfc:	90 93 33 04 	sts	0x0433, r25
				*pfixtureMotor = 0;
     e00:	11 82       	std	Z+1, r1	; 0x01
     e02:	10 82       	st	Z, r1
				u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     e04:	80 91 32 04 	lds	r24, 0x0432
     e08:	8f 7e       	andi	r24, 0xEF	; 239
				u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     e0a:	88 60       	ori	r24, 0x08	; 8
     e0c:	80 93 32 04 	sts	0x0432, r24
				if(*pprint0 == 1){
     e10:	f5 01       	movw	r30, r10
     e12:	80 81       	ld	r24, Z
     e14:	88 23       	and	r24, r24
     e16:	09 f4       	brne	.+2      	; 0xe1a <init_action+0x98>
     e18:	5c c0       	rjmp	.+184    	; 0xed2 <init_action+0x150>
					lcd_goto_xy(0,1);
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
					serial_print_string("PUSH TO START");
     e22:	83 e0       	ldi	r24, 0x03	; 3
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
					*pprint0 = 0;
     e2a:	f5 01       	movw	r30, r10
     e2c:	10 82       	st	Z, r1
     e2e:	51 c0       	rjmp	.+162    	; 0xed2 <init_action+0x150>
				}
			}
			break;
		case LOAD:
			u_outputByte0.bits_in_outputByte0.ACPower = 0;
     e30:	20 91 32 04 	lds	r18, 0x0432
     e34:	32 2f       	mov	r19, r18
     e36:	3e 7f       	andi	r19, 0xFE	; 254
			if((counter % 200) < 100){
     e38:	cb 01       	movw	r24, r22
     e3a:	68 ec       	ldi	r22, 0xC8	; 200
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <__divmodhi4>
     e42:	84 36       	cpi	r24, 0x64	; 100
     e44:	91 05       	cpc	r25, r1
     e46:	24 f4       	brge	.+8      	; 0xe50 <init_action+0xce>
				u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     e48:	2c 7f       	andi	r18, 0xFC	; 252
     e4a:	20 93 32 04 	sts	0x0432, r18
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <init_action+0xd4>
			}
			else{
				u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     e50:	32 60       	ori	r19, 0x02	; 2
     e52:	30 93 32 04 	sts	0x0432, r19
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
			break;
		case LOADEXTRA:
			*pplateLoadMotor = 1;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	99 83       	std	Y+1, r25	; 0x01
     e5c:	88 83       	st	Y, r24
			*pfixtureMotor = 0;
     e5e:	11 82       	std	Z+1, r1	; 0x01
     e60:	10 82       	st	Z, r1
			
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
     e62:	80 91 33 04 	lds	r24, 0x0433
     e66:	8d 7f       	andi	r24, 0xFD	; 253
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     e68:	84 60       	ori	r24, 0x04	; 4
     e6a:	80 93 33 04 	sts	0x0433, r24
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
     e6e:	80 91 32 04 	lds	r24, 0x0432
     e72:	8b 7f       	andi	r24, 0xFB	; 251
     e74:	17 c0       	rjmp	.+46     	; 0xea4 <init_action+0x122>
			break;
		case RAISEL1:
			u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     e76:	80 91 32 04 	lds	r24, 0x0432
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     e7a:	81 7e       	andi	r24, 0xE1	; 225
			u_outputByte0.bits_in_outputByte0.plateStop = 1;
     e7c:	86 61       	ori	r24, 0x16	; 22
     e7e:	80 93 32 04 	sts	0x0432, r24
			*pplateLoadMotor = 0;
     e82:	19 82       	std	Y+1, r1	; 0x01
     e84:	18 82       	st	Y, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     e86:	80 91 33 04 	lds	r24, 0x0433
     e8a:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
     e8c:	8b 7f       	andi	r24, 0xFB	; 251
     e8e:	1f c0       	rjmp	.+62     	; 0xece <init_action+0x14c>
		case FIXLEXTRA:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case LOWERL1:
			*pfixtureMotor = 0;
     e90:	11 82       	std	Z+1, r1	; 0x01
     e92:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     e94:	80 91 33 04 	lds	r24, 0x0433
     e98:	8f 7d       	andi	r24, 0xDF	; 223
     e9a:	80 93 33 04 	sts	0x0433, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     e9e:	80 91 32 04 	lds	r24, 0x0432
     ea2:	88 60       	ori	r24, 0x08	; 8
     ea4:	80 93 32 04 	sts	0x0432, r24
     ea8:	14 c0       	rjmp	.+40     	; 0xed2 <init_action+0x150>
			break;
		case LOWERL2:
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     eaa:	80 91 32 04 	lds	r24, 0x0432
     eae:	8f 7e       	andi	r24, 0xEF	; 239
     eb0:	80 93 32 04 	sts	0x0432, r24
     eb4:	09 c0       	rjmp	.+18     	; 0xec8 <init_action+0x146>
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		//*********************************************
		case MOVEC1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     eb6:	80 91 33 04 	lds	r24, 0x0433
     eba:	80 61       	ori	r24, 0x10	; 16
     ebc:	80 93 33 04 	sts	0x0433, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	91 83       	std	Z+1, r25	; 0x01
     ec6:	80 83       	st	Z, r24
     ec8:	80 91 33 04 	lds	r24, 0x0433
     ecc:	80 62       	ori	r24, 0x20	; 32
     ece:	80 93 33 04 	sts	0x0433, r24
			break;
	}
}
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	bf 90       	pop	r11
     ed8:	af 90       	pop	r10
     eda:	08 95       	ret

00000edc <serial_print_int>:
void serial_print_string(char msg[]){
	serial_send_blocking(USB_COMM, msg, strlen(msg));
	serial_send_blocking(USB_COMM, "\r\n", 2);
}

void serial_print_int(int a){
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <serial_print_int+0xa>
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <serial_print_int+0xc>
     ee8:	0f 92       	push	r0
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	char msg[5];
	itoa(a, msg, 10);
     eee:	8e 01       	movw	r16, r28
     ef0:	0f 5f       	subi	r16, 0xFF	; 255
     ef2:	1f 4f       	sbci	r17, 0xFF	; 255
     ef4:	b8 01       	movw	r22, r16
     ef6:	4a e0       	ldi	r20, 0x0A	; 10
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <itoa>
	serial_print_string(msg);
     efe:	c8 01       	movw	r24, r16
     f00:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
}
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	08 95       	ret

00000f18 <main>:
void serial_print_string(char msg[]);

void serial_print_int(int a);

int main()   
{
     f18:	2f 92       	push	r2
     f1a:	3f 92       	push	r3
     f1c:	4f 92       	push	r4
     f1e:	5f 92       	push	r5
     f20:	6f 92       	push	r6
     f22:	7f 92       	push	r7
     f24:	8f 92       	push	r8
     f26:	9f 92       	push	r9
     f28:	af 92       	push	r10
     f2a:	bf 92       	push	r11
     f2c:	cf 92       	push	r12
     f2e:	df 92       	push	r13
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	6a 97       	sbiw	r28, 0x1a	; 26
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
	bool print0 = true;
	bool  print35 = true;
		
	//initialize button variables
	int button = 1;				
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently
     f4c:	2f ef       	ldi	r18, 0xFF	; 255
     f4e:	3f ef       	ldi	r19, 0xFF	; 255
     f50:	38 8f       	std	Y+24, r19	; 0x18
     f52:	2f 8b       	std	Y+23, r18	; 0x17
     f54:	1c 8a       	std	Y+20, r1	; 0x14
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
    
	while(1){						//Repeats the entire program indefinitely (runs maintenance or normal each time)

							//mx holds whether motor x should move: 0 = no, 1 = yes
	plateLoadMotor = 0;		//plate load motor
     f56:	1b 82       	std	Y+3, r1	; 0x03
     f58:	1a 82       	std	Y+2, r1	; 0x02
	fixtureMotor = 0;		//fixture motor
     f5a:	1d 82       	std	Y+5, r1	; 0x05
     f5c:	1c 82       	std	Y+4, r1	; 0x04
	brush1Motor = 0;		//brush 1 motor
     f5e:	1f 82       	std	Y+7, r1	; 0x07
     f60:	1e 82       	std	Y+6, r1	; 0x06
	brush2Motor = 0;		//brush 2 motor
     f62:	19 86       	std	Y+9, r1	; 0x09
     f64:	18 86       	std	Y+8, r1	; 0x08
	paperTowelMotor = 0; 	//paper towel roller motor
     f66:	1b 86       	std	Y+11, r1	; 0x0b
     f68:	1a 86       	std	Y+10, r1	; 0x0a
	//the ones with numbers correspond to run mode states, and Five refers to motor 5 (paper towel roller)
	counterRef = 0;
	counterRefFive = 0;
		
	//holds wait times for various actions in ms
	pWait = 100;
     f6a:	84 e6       	ldi	r24, 0x64	; 100
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	90 93 91 03 	sts	0x0391, r25
     f72:	80 93 90 03 	sts	0x0390, r24
	mWait = 100;
     f76:	90 93 93 03 	sts	0x0393, r25
     f7a:	80 93 92 03 	sts	0x0392, r24
	kWait = 100;
     f7e:	90 93 95 03 	sts	0x0395, r25
     f82:	80 93 94 03 	sts	0x0394, r24

	//hold the length of the high and high-low periods for the various motors - this controls their speed
	highLength1 = 1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	90 93 97 03 	sts	0x0397, r25
     f8e:	80 93 96 03 	sts	0x0396, r24
	highLength2 = 1;
     f92:	90 93 99 03 	sts	0x0399, r25
     f96:	80 93 98 03 	sts	0x0398, r24
	highLength3 = 1;
     f9a:	90 93 9b 03 	sts	0x039B, r25
     f9e:	80 93 9a 03 	sts	0x039A, r24
	highLength4 = 1;
     fa2:	90 93 9d 03 	sts	0x039D, r25
     fa6:	80 93 9c 03 	sts	0x039C, r24
	highLength5 = 1;
     faa:	90 93 9f 03 	sts	0x039F, r25
     fae:	80 93 9e 03 	sts	0x039E, r24
	totalStepLength1 = 2;
     fb2:	22 e0       	ldi	r18, 0x02	; 2
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	30 93 a1 03 	sts	0x03A1, r19
     fba:	20 93 a0 03 	sts	0x03A0, r18
	totalStepLength2 = 8;
     fbe:	88 e0       	ldi	r24, 0x08	; 8
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	90 93 a3 03 	sts	0x03A3, r25
     fc6:	80 93 a2 03 	sts	0x03A2, r24
	totalStepLength3 = 2;
     fca:	30 93 a5 03 	sts	0x03A5, r19
     fce:	20 93 a4 03 	sts	0x03A4, r18
	totalStepLength4 = 2;
     fd2:	30 93 a7 03 	sts	0x03A7, r19
     fd6:	20 93 a6 03 	sts	0x03A6, r18
	totalStepLength5 = 2;
     fda:	30 93 a9 03 	sts	0x03A9, r19
     fde:	20 93 a8 03 	sts	0x03A8, r18
	
	//hold whether or not statements have been printed yet (numbers refer to run mode states)
	print0 = true;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	89 83       	std	Y+1, r24	; 0x01
	print35 = true;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     fe6:	1d 86       	std	Y+13, r1	; 0x0d
     fe8:	1c 86       	std	Y+12, r1	; 0x0c
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     fea:	10 92 33 04 	sts	0x0433, r1
	u_motorByte1.motorByte1 = 128;  // initialize motorByte1              **********1 or 128, depending on order**********
     fee:	80 e8       	ldi	r24, 0x80	; 128
     ff0:	80 93 2f 04 	sts	0x042F, r24
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	80 93 32 04 	sts	0x0432, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
     ffa:	80 93 30 04 	sts	0x0430, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
     ffe:	10 92 2e 04 	sts	0x042E, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
    1002:	10 92 31 04 	sts	0x0431, r1
	
	//clear();
	serial_print_string("DASCH CLEANER 2c");
    1006:	81 e1       	ldi	r24, 0x11	; 17
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
	lcd_goto_xy(0,1);
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	61 e0       	ldi	r22, 0x01	; 1
    1012:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
	serial_print_string("REV: 40");
    1016:	82 e2       	ldi	r24, 0x22	; 34
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
	delay_ms(2000);
    101e:	80 ed       	ldi	r24, 0xD0	; 208
    1020:	97 e0       	ldi	r25, 0x07	; 7
    1022:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>
	
	//clear();
	serial_print_string("BEGIN ");
    1026:	8a e2       	ldi	r24, 0x2A	; 42
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
	
	delay_ms(1000);
    102e:	88 ee       	ldi	r24, 0xE8	; 232
    1030:	93 e0       	ldi	r25, 0x03	; 3
    1032:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>

    i2c_init();                                // init I2C interface
    1036:	0e 94 93 00 	call	0x126	; 0x126 <i2c_init>
	
    serial_print_string("INIT ");
    103a:	81 e3       	ldi	r24, 0x31	; 49
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
    1042:	80 e4       	ldi	r24, 0x40	; 64
    1044:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    1048:	f8 2e       	mov	r15, r24
	i2c_stop();
    104a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
    104e:	82 e4       	ldi	r24, 0x42	; 66
    1050:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    1054:	18 2f       	mov	r17, r24
	i2c_stop();
    1056:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
    105a:	84 e4       	ldi	r24, 0x44	; 68
    105c:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    1060:	08 2f       	mov	r16, r24
	i2c_stop();
    1062:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
    
	//clear();
	serial_print_string("START ");
    1066:	87 e3       	ldi	r24, 0x37	; 55
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
    106e:	1f 29       	or	r17, r15
    1070:	10 2b       	or	r17, r16
    1072:	61 f0       	breq	.+24     	; 0x108c <main+0x174>
        /* failed to issue start condition(s), possibly no device found */
        
		serial_print_string("I2C BAD ");
    1074:	8e e3       	ldi	r24, 0x3E	; 62
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
		i2c_stop();
    107c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
		serial_print_string("STOP ");
    1080:	87 e4       	ldi	r24, 0x47	; 71
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
    1088:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <main+0x167e>
    }
	else {
		serial_print_string("I2C OK ");
    108c:	8d e4       	ldi	r24, 0x4D	; 77
    108e:	91 e0       	ldi	r25, 0x01	; 1
    1090:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
        /* issuing start conditions ok, devices accessible */
		serial_print_string("BINIT ");
    1094:	85 e5       	ldi	r24, 0x55	; 85
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
    109c:	80 e4       	ldi	r24, 0x40	; 64
    109e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x6);
    10a2:	86 e0       	ldi	r24, 0x06	; 6
    10a4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    10b4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C1+I2C_WRITE);
    10b8:	80 e4       	ldi	r24, 0x40	; 64
    10ba:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    10c4:	80 91 33 04 	lds	r24, 0x0433
    10c8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    10cc:	80 91 2f 04 	lds	r24, 0x042F
    10d0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    10d4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
    10d8:	82 e4       	ldi	r24, 0x42	; 66
    10da:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x6);
    10de:	86 e0       	ldi	r24, 0x06	; 6
    10e0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    10f0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);
    10f4:	82 e4       	ldi	r24, 0x42	; 66
    10f6:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_outputByte0.outputByte0);
    1100:	80 91 32 04 	lds	r24, 0x0432
    1104:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_outputByte1.outputByte1);
    1108:	80 91 30 04 	lds	r24, 0x0430
    110c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1110:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		//Registers default to input, so I2C3 is fine already

		u_motorByte1.bits_in_motorByte1.enableAll = 0;	//Enables all motor drivers after startup
    1114:	80 91 2f 04 	lds	r24, 0x042F
    1118:	8f 77       	andi	r24, 0x7F	; 127
    111a:	80 93 2f 04 	sts	0x042F, r24
		i2c_start(I2C1+I2C_WRITE);
    111e:	80 e4       	ldi	r24, 0x40	; 64
    1120:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    1124:	82 e0       	ldi	r24, 0x02	; 2
    1126:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    112a:	80 91 33 04 	lds	r24, 0x0433
    112e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    1132:	80 91 2f 04 	lds	r24, 0x042F
    1136:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    113a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>


		delay_ms(1000);
    113e:	88 ee       	ldi	r24, 0xE8	; 232
    1140:	93 e0       	ldi	r25, 0x03	; 3
    1142:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
    1146:	8c e5       	ldi	r24, 0x5C	; 92
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
    114e:	ee 24       	eor	r14, r14
    1150:	ff 24       	eor	r15, r15
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1152:	c7 01       	movw	r24, r14
    1154:	be 01       	movw	r22, r28
    1156:	64 5f       	subi	r22, 0xF4	; 244
    1158:	7f 4f       	sbci	r23, 0xFF	; 255
    115a:	0e 94 0b 03 	call	0x616	; 0x616 <button_debounce>
    115e:	18 2f       	mov	r17, r24
			serial_check(); counter++;
    1160:	0e 94 a4 1c 	call	0x3948	; 0x3948 <serial_check>
    1164:	08 94       	sec
    1166:	e1 1c       	adc	r14, r1
    1168:	f1 1c       	adc	r15, r1
			delay_ms(1);
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>
		delay_ms(1000);
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1172:	11 23       	and	r17, r17
    1174:	71 f3       	breq	.-36     	; 0x1152 <main+0x23a>
		buttonTriggered = false;
		counter = 0;
		//clear();


		if(is_digital_input_high(IO_D3))							//Tests if the switch is set to Maintenance Mode
    1176:	83 e0       	ldi	r24, 0x03	; 3
    1178:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    117c:	88 23       	and	r24, r24
    117e:	09 f4       	brne	.+2      	; 0x1182 <main+0x26a>
    1180:	4e c4       	rjmp	.+2204   	; 0x1a1e <main+0xb06>
		{
			serial_print_string("DEBUG");
    1182:	8c e6       	ldi	r24, 0x6C	; 108
    1184:	91 e0       	ldi	r25, 0x01	; 1
    1186:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
			delay_ms(1000);
    118a:	88 ee       	ldi	r24, 0xE8	; 232
    118c:	93 e0       	ldi	r25, 0x03	; 3
    118e:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>
			//initialize
			bool printVar = true;
			int submode = -1;

			//clear();
			serial_print_string("INPUT MODE");
    1192:	82 e7       	ldi	r24, 0x72	; 114
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
    119a:	ee 24       	eor	r14, r14
    119c:	ff 24       	eor	r15, r15
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    119e:	c7 01       	movw	r24, r14
    11a0:	be 01       	movw	r22, r28
    11a2:	64 5f       	subi	r22, 0xF4	; 244
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	0e 94 0b 03 	call	0x616	; 0x616 <button_debounce>
    11aa:	18 2f       	mov	r17, r24
				counter++;
    11ac:	08 94       	sec
    11ae:	e1 1c       	adc	r14, r1
    11b0:	f1 1c       	adc	r15, r1
				delay_ms(1);
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>

			//clear();
			serial_print_string("INPUT MODE");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
    11ba:	11 23       	and	r17, r17
    11bc:	81 f3       	breq	.-32     	; 0x119e <main+0x286>
    11be:	22 24       	eor	r2, r2
    11c0:	33 24       	eor	r3, r3
    11c2:	99 24       	eor	r9, r9
    11c4:	93 94       	inc	r9
    11c6:	6f ef       	ldi	r22, 0xFF	; 255
    11c8:	7f ef       	ldi	r23, 0xFF	; 255
    11ca:	7b 8b       	std	Y+19, r23	; 0x13
    11cc:	6a 8b       	std	Y+18, r22	; 0x12
    11ce:	66 24       	eor	r6, r6
    11d0:	77 24       	eor	r7, r7
    11d2:	44 24       	eor	r4, r4
    11d4:	55 24       	eor	r5, r5
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    11d6:	84 e4       	ldi	r24, 0x44	; 68
    11d8:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    11e2:	85 e4       	ldi	r24, 0x45	; 69
    11e4:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    11e8:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    11ec:	80 93 2e 04 	sts	0x042E, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    11f0:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    11f4:	80 93 31 04 	sts	0x0431, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    11f8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    11fc:	c2 01       	movw	r24, r4
    11fe:	be 01       	movw	r22, r28
    1200:	64 5f       	subi	r22, 0xF4	; 244
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	0e 94 0b 03 	call	0x616	; 0x616 <button_debounce>
    1208:	18 2f       	mov	r17, r24
							Output 			--     starts testing each output individually and ends after testing all outputs
							Motor			--     starts testing each motor individually and ends after testing all motors
							Multi motor		--     starts testing each the fixture motor with each of the brush motors

				*/
				if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != INPUT){
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1210:	88 23       	and	r24, r24
    1212:	c9 f4       	brne	.+50     	; 0x1246 <main+0x32e>
    1214:	82 e0       	ldi	r24, 0x02	; 2
    1216:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    121a:	88 23       	and	r24, r24
    121c:	a1 f4       	brne	.+40     	; 0x1246 <main+0x32e>
    121e:	8a 89       	ldd	r24, Y+18	; 0x12
    1220:	9b 89       	ldd	r25, Y+19	; 0x13
    1222:	89 2b       	or	r24, r25
    1224:	81 f0       	breq	.+32     	; 0x1246 <main+0x32e>
					state = S0;
					submode = INPUT;
					//clear();
					serial_print_string("INPUTS ");
    1226:	8d e7       	ldi	r24, 0x7D	; 125
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
					lcd_goto_xy(0,1);
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	61 e0       	ldi	r22, 0x01	; 1
    1232:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	9c 8b       	std	Y+20, r25	; 0x14
    123a:	99 24       	eor	r9, r9
    123c:	93 94       	inc	r9
    123e:	1b 8a       	std	Y+19, r1	; 0x13
    1240:	1a 8a       	std	Y+18, r1	; 0x12
    1242:	66 24       	eor	r6, r6
    1244:	77 24       	eor	r7, r7
					printVar = true;
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != OUTPUT){
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    124c:	88 23       	and	r24, r24
    124e:	e9 f0       	breq	.+58     	; 0x128a <main+0x372>
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1256:	88 23       	and	r24, r24
    1258:	c1 f4       	brne	.+48     	; 0x128a <main+0x372>
    125a:	2a 89       	ldd	r18, Y+18	; 0x12
    125c:	3b 89       	ldd	r19, Y+19	; 0x13
    125e:	21 30       	cpi	r18, 0x01	; 1
    1260:	31 05       	cpc	r19, r1
    1262:	99 f0       	breq	.+38     	; 0x128a <main+0x372>
					state = O0_ON;
					submode = OUTPUT;
					//clear();
					serial_print_string("OUTPUTS");
    1264:	85 e8       	ldi	r24, 0x85	; 133
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
					lcd_goto_xy(0,1);
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
    1274:	31 e0       	ldi	r19, 0x01	; 1
    1276:	3c 8b       	std	Y+20, r19	; 0x14
    1278:	99 24       	eor	r9, r9
    127a:	93 94       	inc	r9
    127c:	61 e0       	ldi	r22, 0x01	; 1
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	7b 8b       	std	Y+19, r23	; 0x13
    1282:	6a 8b       	std	Y+18, r22	; 0x12
    1284:	68 e0       	ldi	r22, 0x08	; 8
    1286:	66 2e       	mov	r6, r22
    1288:	71 2c       	mov	r7, r1
					printVar = true;
					switched = true;
				}
				if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MOTOR){
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1290:	88 23       	and	r24, r24
    1292:	09 f5       	brne	.+66     	; 0x12d6 <main+0x3be>
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    129a:	88 23       	and	r24, r24
    129c:	e1 f0       	breq	.+56     	; 0x12d6 <main+0x3be>
    129e:	8a 89       	ldd	r24, Y+18	; 0x12
    12a0:	9b 89       	ldd	r25, Y+19	; 0x13
    12a2:	02 97       	sbiw	r24, 0x02	; 2
    12a4:	c1 f0       	breq	.+48     	; 0x12d6 <main+0x3be>
					state = M1_F;
					submode = MOTOR;
					//clear();
					serial_print_string("MOTORS ");
    12a6:	8d e8       	ldi	r24, 0x8D	; 141
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
					lcd_goto_xy(0,1);
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    12b6:	80 91 33 04 	lds	r24, 0x0433
    12ba:	84 60       	ori	r24, 0x04	; 4
    12bc:	80 93 33 04 	sts	0x0433, r24
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	9c 8b       	std	Y+20, r25	; 0x14
    12c4:	99 24       	eor	r9, r9
    12c6:	93 94       	inc	r9
    12c8:	22 e0       	ldi	r18, 0x02	; 2
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	3b 8b       	std	Y+19, r19	; 0x13
    12ce:	2a 8b       	std	Y+18, r18	; 0x12
    12d0:	50 e2       	ldi	r21, 0x20	; 32
    12d2:	65 2e       	mov	r6, r21
    12d4:	71 2c       	mov	r7, r1
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MULTI){
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    12dc:	88 23       	and	r24, r24
    12de:	31 f1       	breq	.+76     	; 0x132c <main+0x414>
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    12e6:	88 23       	and	r24, r24
    12e8:	09 f1       	breq	.+66     	; 0x132c <main+0x414>
    12ea:	6a 89       	ldd	r22, Y+18	; 0x12
    12ec:	7b 89       	ldd	r23, Y+19	; 0x13
    12ee:	63 30       	cpi	r22, 0x03	; 3
    12f0:	71 05       	cpc	r23, r1
    12f2:	e1 f0       	breq	.+56     	; 0x132c <main+0x414>
					state = M2_AND_M3;
					submode = MULTI;
					//clear();
					serial_print_string("MULTI MOTOR");
    12f4:	85 e9       	ldi	r24, 0x95	; 149
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
					lcd_goto_xy(0,1);
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	61 e0       	ldi	r22, 0x01	; 1
    1300:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1304:	80 91 33 04 	lds	r24, 0x0433
    1308:	80 62       	ori	r24, 0x20	; 32
    130a:	80 93 33 04 	sts	0x0433, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    130e:	80 91 2f 04 	lds	r24, 0x042F
    1312:	81 60       	ori	r24, 0x01	; 1
    1314:	80 93 2f 04 	sts	0x042F, r24
    1318:	99 24       	eor	r9, r9
    131a:	93 94       	inc	r9
    131c:	83 e0       	ldi	r24, 0x03	; 3
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9b 8b       	std	Y+19, r25	; 0x13
    1322:	8a 8b       	std	Y+18, r24	; 0x12
    1324:	4a e2       	ldi	r20, 0x2A	; 42
    1326:	64 2e       	mov	r6, r20
    1328:	71 2c       	mov	r7, r1
    132a:	03 c0       	rjmp	.+6      	; 0x1332 <main+0x41a>
					switched = true;
				}
				if(switched){
    132c:	9c 89       	ldd	r25, Y+20	; 0x14
    132e:	99 23       	and	r25, r25
    1330:	c9 f0       	breq	.+50     	; 0x1364 <main+0x44c>
					plateLoadMotor = 0;
    1332:	1b 82       	std	Y+3, r1	; 0x03
    1334:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    1336:	1d 82       	std	Y+5, r1	; 0x05
    1338:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    133a:	1f 82       	std	Y+7, r1	; 0x07
    133c:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    133e:	19 86       	std	Y+9, r1	; 0x09
    1340:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    1342:	1b 86       	std	Y+11, r1	; 0x0b
    1344:	1a 86       	std	Y+10, r1	; 0x0a
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	80 93 32 04 	sts	0x0432, r24
					u_outputByte1.outputByte1 = 255;  // reset outputByte1
    134c:	80 93 30 04 	sts	0x0430, r24
					if(submode != MOTOR && submode != MULTI){
    1350:	8a 89       	ldd	r24, Y+18	; 0x12
    1352:	9b 89       	ldd	r25, Y+19	; 0x13
    1354:	02 97       	sbiw	r24, 0x02	; 2
    1356:	02 97       	sbiw	r24, 0x02	; 2
    1358:	20 f0       	brcs	.+8      	; 0x1362 <main+0x44a>
						u_motorByte0.motorByte0 = 0;	  // reset motorByte0
    135a:	10 92 33 04 	sts	0x0433, r1
						u_motorByte1.motorByte1 = 0;	  // reset motorByte1
    135e:	10 92 2f 04 	sts	0x042F, r1
    1362:	1c 8a       	std	Y+20, r1	; 0x14
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
    1364:	11 23       	and	r17, r17
    1366:	09 f4       	brne	.+2      	; 0x136a <main+0x452>
    1368:	c6 c0       	rjmp	.+396    	; 0x14f6 <main+0x5de>
					if(state <= S7){				//if it's doing the sensors
    136a:	28 e0       	ldi	r18, 0x08	; 8
    136c:	62 16       	cp	r6, r18
    136e:	71 04       	cpc	r7, r1
    1370:	9c f4       	brge	.+38     	; 0x1398 <main+0x480>
						lastVal = -1;
						lcd_goto_xy(0,1);
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
						buttonTriggered = false;
						state ++;
    137a:	08 94       	sec
    137c:	61 1c       	adc	r6, r1
    137e:	71 1c       	adc	r7, r1
						counterRef = counter;
						printVar = true;
						if(state == S7 + 1){		//accounts for end of maintenance mode after sensors
    1380:	38 e0       	ldi	r19, 0x08	; 8
    1382:	63 16       	cp	r6, r19
    1384:	71 04       	cpc	r7, r1
    1386:	11 f4       	brne	.+4      	; 0x138c <main+0x474>
    1388:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <main+0x168a>
    138c:	12 01       	movw	r2, r4
    138e:	6f ef       	ldi	r22, 0xFF	; 255
    1390:	7f ef       	ldi	r23, 0xFF	; 255
    1392:	78 8f       	std	Y+24, r23	; 0x18
    1394:	6f 8b       	std	Y+23, r22	; 0x17
    1396:	ad c0       	rjmp	.+346    	; 0x14f2 <main+0x5da>
							//clear();
							state = DONEM;
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
    1398:	70 e2       	ldi	r23, 0x20	; 32
    139a:	67 16       	cp	r6, r23
    139c:	71 04       	cpc	r7, r1
    139e:	cc f4       	brge	.+50     	; 0x13d2 <main+0x4ba>
						if(state % 2 == 0){			//current state is an 'on' state
    13a0:	60 fc       	sbrc	r6, 0
    13a2:	09 c0       	rjmp	.+18     	; 0x13b6 <main+0x49e>
							lcd_goto_xy(13,1);
    13a4:	8d e0       	ldi	r24, 0x0D	; 13
    13a6:	61 e0       	ldi	r22, 0x01	; 1
    13a8:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
							serial_print_string("OFF");
    13ac:	81 ea       	ldi	r24, 0xA1	; 161
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
    13b4:	04 c0       	rjmp	.+8      	; 0x13be <main+0x4a6>
						}
						else{						//current state is an 'off' state
							lcd_goto_xy(0,1);
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	61 e0       	ldi	r22, 0x01	; 1
    13ba:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
						}
						buttonTriggered = false;
						state ++;
    13be:	08 94       	sec
    13c0:	61 1c       	adc	r6, r1
    13c2:	71 1c       	adc	r7, r1
						counterRef = counter;
						printVar = true;
						if(state == O11_OFF + 1){	//accounts for end of maintenance mode after outputs
    13c4:	80 e2       	ldi	r24, 0x20	; 32
    13c6:	68 16       	cp	r6, r24
    13c8:	71 04       	cpc	r7, r1
    13ca:	09 f0       	breq	.+2      	; 0x13ce <main+0x4b6>
    13cc:	91 c0       	rjmp	.+290    	; 0x14f0 <main+0x5d8>
    13ce:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <main+0x1692>
    13d2:	83 01       	movw	r16, r6
    13d4:	0f 5f       	subi	r16, 0xFF	; 255
    13d6:	1f 4f       	sbci	r17, 0xFF	; 255
							//clear();
							state = DONEM;
						}
					}
					else if(state <= M5_B){							//if it's doing the motors
    13d8:	9a e2       	ldi	r25, 0x2A	; 42
    13da:	69 16       	cp	r6, r25
    13dc:	71 04       	cpc	r7, r1
    13de:	0c f0       	brlt	.+2      	; 0x13e2 <main+0x4ca>
    13e0:	5e c0       	rjmp	.+188    	; 0x149e <main+0x586>
						buttonTriggered = false;
						state ++;
						counterRef = counter;
						printVar = true;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
    13e2:	60 fc       	sbrc	r6, 0
    13e4:	09 c0       	rjmp	.+18     	; 0x13f8 <main+0x4e0>
							lcd_goto_xy(11,1);
    13e6:	8b e0       	ldi	r24, 0x0B	; 11
    13e8:	61 e0       	ldi	r22, 0x01	; 1
    13ea:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
							serial_print_string("BACK ");
    13ee:	85 ea       	ldi	r24, 0xA5	; 165
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
    13f6:	13 c0       	rjmp	.+38     	; 0x141e <main+0x506>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
    13f8:	06 32       	cpi	r16, 0x26	; 38
    13fa:	11 05       	cpc	r17, r1
    13fc:	79 f1       	breq	.+94     	; 0x145c <main+0x544>
    13fe:	07 32       	cpi	r16, 0x27	; 39
    1400:	11 05       	cpc	r17, r1
    1402:	3c f4       	brge	.+14     	; 0x1412 <main+0x4fa>
    1404:	02 32       	cpi	r16, 0x22	; 34
    1406:	11 05       	cpc	r17, r1
    1408:	69 f0       	breq	.+26     	; 0x1424 <main+0x50c>
    140a:	04 32       	cpi	r16, 0x24	; 36
    140c:	11 05       	cpc	r17, r1
    140e:	39 f4       	brne	.+14     	; 0x141e <main+0x506>
    1410:	15 c0       	rjmp	.+42     	; 0x143c <main+0x524>
    1412:	08 32       	cpi	r16, 0x28	; 40
    1414:	11 05       	cpc	r17, r1
    1416:	71 f1       	breq	.+92     	; 0x1474 <main+0x55c>
    1418:	0a 32       	cpi	r16, 0x2A	; 42
    141a:	11 05       	cpc	r17, r1
    141c:	b9 f1       	breq	.+110    	; 0x148c <main+0x574>
    141e:	12 01       	movw	r2, r4
    1420:	38 01       	movw	r6, r16
    1422:	67 c0       	rjmp	.+206    	; 0x14f2 <main+0x5da>
								case M1_B + 1:
									lcd_goto_xy(0,1);
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	61 e0       	ldi	r22, 0x01	; 1
    1428:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    142c:	80 91 33 04 	lds	r24, 0x0433
    1430:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1432:	80 62       	ori	r24, 0x20	; 32
    1434:	80 93 33 04 	sts	0x0433, r24
    1438:	12 01       	movw	r2, r4
    143a:	33 c2       	rjmp	.+1126   	; 0x18a2 <main+0x98a>
									break;
								case M2_B + 1:
									lcd_goto_xy(0,1);
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	61 e0       	ldi	r22, 0x01	; 1
    1440:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1444:	80 91 33 04 	lds	r24, 0x0433
    1448:	8f 7d       	andi	r24, 0xDF	; 223
    144a:	80 93 33 04 	sts	0x0433, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    144e:	80 91 2f 04 	lds	r24, 0x042F
    1452:	81 60       	ori	r24, 0x01	; 1
    1454:	80 93 2f 04 	sts	0x042F, r24
    1458:	12 01       	movw	r2, r4
    145a:	43 c2       	rjmp	.+1158   	; 0x18e2 <main+0x9ca>
									break;
								case M3_B + 1:
									lcd_goto_xy(0,1);
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1464:	80 91 2f 04 	lds	r24, 0x042F
    1468:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    146a:	88 60       	ori	r24, 0x08	; 8
    146c:	80 93 2f 04 	sts	0x042F, r24
    1470:	12 01       	movw	r2, r4
    1472:	57 c2       	rjmp	.+1198   	; 0x1922 <main+0xa0a>
									break;
								case M4_B + 1:
									lcd_goto_xy(0,1);
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	61 e0       	ldi	r22, 0x01	; 1
    1478:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    147c:	80 91 2f 04 	lds	r24, 0x042F
    1480:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    1482:	80 64       	ori	r24, 0x40	; 64
    1484:	80 93 2f 04 	sts	0x042F, r24
    1488:	12 01       	movw	r2, r4
    148a:	6b c2       	rjmp	.+1238   	; 0x1962 <main+0xa4a>
									break;
								case M5_B + 1:
									//clear();
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    148c:	80 91 2f 04 	lds	r24, 0x042F
    1490:	8f 7b       	andi	r24, 0xBF	; 191
    1492:	80 93 2f 04 	sts	0x042F, r24
									state = DONEM;
									paperTowelMotor = 0;
    1496:	1b 86       	std	Y+11, r1	; 0x0b
    1498:	1a 86       	std	Y+10, r1	; 0x0a
    149a:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <main+0x1692>
							}
						}
					}
					else{
						buttonTriggered = false;
						state ++;
    149e:	38 01       	movw	r6, r16
						counterRef = counter;
						printVar = true;
						switch(state){
    14a0:	0b 32       	cpi	r16, 0x2B	; 43
    14a2:	11 05       	cpc	r17, r1
    14a4:	21 f0       	breq	.+8      	; 0x14ae <main+0x596>
    14a6:	0c 32       	cpi	r16, 0x2C	; 44
    14a8:	11 05       	cpc	r17, r1
    14aa:	11 f5       	brne	.+68     	; 0x14f0 <main+0x5d8>
    14ac:	11 c0       	rjmp	.+34     	; 0x14d0 <main+0x5b8>
							case M2_AND_M3 + 1:
								lcd_goto_xy(0,1);
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	61 e0       	ldi	r22, 0x01	; 1
    14b2:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
								u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    14b6:	90 91 2f 04 	lds	r25, 0x042F
    14ba:	9e 7f       	andi	r25, 0xFE	; 254
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    14bc:	80 91 33 04 	lds	r24, 0x0433
    14c0:	80 62       	ori	r24, 0x20	; 32
    14c2:	80 93 33 04 	sts	0x0433, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    14c6:	98 60       	ori	r25, 0x08	; 8
    14c8:	90 93 2f 04 	sts	0x042F, r25
    14cc:	12 01       	movw	r2, r4
    14ce:	76 c2       	rjmp	.+1260   	; 0x19bc <main+0xaa4>
								break;
							case M2_AND_M4 + 1:
								//clear();
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    14d0:	80 91 33 04 	lds	r24, 0x0433
    14d4:	8f 7d       	andi	r24, 0xDF	; 223
    14d6:	80 93 33 04 	sts	0x0433, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    14da:	80 91 2f 04 	lds	r24, 0x042F
    14de:	87 7f       	andi	r24, 0xF7	; 247
    14e0:	80 93 2f 04 	sts	0x042F, r24
								state = DONEM;
								fixtureMotor = 0;
    14e4:	1d 82       	std	Y+5, r1	; 0x05
    14e6:	1c 82       	std	Y+4, r1	; 0x04
								brush2Motor = 0;
    14e8:	19 86       	std	Y+9, r1	; 0x09
    14ea:	18 86       	std	Y+8, r1	; 0x08
    14ec:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <main+0x1692>
    14f0:	12 01       	movw	r2, r4
    14f2:	99 24       	eor	r9, r9
    14f4:	93 94       	inc	r9
						}
					}
				}

				//state actions
				switch (state) {
    14f6:	f3 01       	movw	r30, r6
    14f8:	ec 32       	cpi	r30, 0x2C	; 44
    14fa:	f1 05       	cpc	r31, r1
    14fc:	08 f0       	brcs	.+2      	; 0x1500 <main+0x5e8>
    14fe:	70 c2       	rjmp	.+1248   	; 0x19e0 <main+0xac8>
    1500:	ea 5b       	subi	r30, 0xBA	; 186
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	ee 0f       	add	r30, r30
    1506:	ff 1f       	adc	r31, r31
    1508:	05 90       	lpm	r0, Z+
    150a:	f4 91       	lpm	r31, Z+
    150c:	e0 2d       	mov	r30, r0
    150e:	09 94       	ijmp
					case S0:
						if(printVar){
    1510:	99 20       	and	r9, r9
    1512:	21 f0       	breq	.+8      	; 0x151c <main+0x604>
							serial_print_string("SENSOR 1");
    1514:	8b ea       	ldi	r24, 0xAB	; 171
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    151c:	8f e0       	ldi	r24, 0x0F	; 15
    151e:	61 e0       	ldi	r22, 0x01	; 1
    1520:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.plate){
    1524:	80 91 2e 04 	lds	r24, 0x042E
    1528:	81 70       	andi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	6f 89       	ldd	r22, Y+23	; 0x17
    152e:	78 8d       	ldd	r23, Y+24	; 0x18
    1530:	68 17       	cp	r22, r24
    1532:	79 07       	cpc	r23, r25
    1534:	09 f4       	brne	.+2      	; 0x1538 <main+0x620>
    1536:	53 c2       	rjmp	.+1190   	; 0x19de <main+0xac6>
							serial_print_int(u_inputByte0.bits_in_inputByte0.plate);
    1538:	0e 94 6e 07 	call	0xedc	; 0xedc <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.plate;
    153c:	80 91 2e 04 	lds	r24, 0x042E
    1540:	b0 c0       	rjmp	.+352    	; 0x16a2 <main+0x78a>
						}							
						break;
					case S1:
						if(printVar){
    1542:	99 20       	and	r9, r9
    1544:	21 f0       	breq	.+8      	; 0x154e <main+0x636>
							serial_print_string("SENSOR 2");
    1546:	84 eb       	ldi	r24, 0xB4	; 180
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    154e:	8f e0       	ldi	r24, 0x0F	; 15
    1550:	61 e0       	ldi	r22, 0x01	; 1
    1552:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureHome){
    1556:	80 91 2e 04 	lds	r24, 0x042E
    155a:	86 95       	lsr	r24
    155c:	81 70       	andi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	6f 89       	ldd	r22, Y+23	; 0x17
    1562:	78 8d       	ldd	r23, Y+24	; 0x18
    1564:	68 17       	cp	r22, r24
    1566:	79 07       	cpc	r23, r25
    1568:	09 f4       	brne	.+2      	; 0x156c <main+0x654>
    156a:	39 c2       	rjmp	.+1138   	; 0x19de <main+0xac6>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureHome);
    156c:	0e 94 6e 07 	call	0xedc	; 0xedc <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureHome;
    1570:	80 91 2e 04 	lds	r24, 0x042E
    1574:	86 95       	lsr	r24
    1576:	95 c0       	rjmp	.+298    	; 0x16a2 <main+0x78a>
						}							
						break;
					case S2:
						if(printVar){
    1578:	99 20       	and	r9, r9
    157a:	21 f0       	breq	.+8      	; 0x1584 <main+0x66c>
							serial_print_string("SENSOR 3");
    157c:	8d eb       	ldi	r24, 0xBD	; 189
    157e:	91 e0       	ldi	r25, 0x01	; 1
    1580:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1584:	8f e0       	ldi	r24, 0x0F	; 15
    1586:	61 e0       	ldi	r22, 0x01	; 1
    1588:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureLift){
    158c:	80 91 2e 04 	lds	r24, 0x042E
    1590:	86 95       	lsr	r24
    1592:	86 95       	lsr	r24
    1594:	81 70       	andi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	6f 89       	ldd	r22, Y+23	; 0x17
    159a:	78 8d       	ldd	r23, Y+24	; 0x18
    159c:	68 17       	cp	r22, r24
    159e:	79 07       	cpc	r23, r25
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <main+0x68c>
    15a2:	1d c2       	rjmp	.+1082   	; 0x19de <main+0xac6>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureLift);
    15a4:	0e 94 6e 07 	call	0xedc	; 0xedc <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureLift;
    15a8:	80 91 2e 04 	lds	r24, 0x042E
    15ac:	86 95       	lsr	r24
    15ae:	86 95       	lsr	r24
    15b0:	78 c0       	rjmp	.+240    	; 0x16a2 <main+0x78a>
						}							
						break;
					case S3:
						if(printVar){
    15b2:	99 20       	and	r9, r9
    15b4:	21 f0       	breq	.+8      	; 0x15be <main+0x6a6>
							serial_print_string("SENSOR 4");
    15b6:	86 ec       	ldi	r24, 0xC6	; 198
    15b8:	91 e0       	ldi	r25, 0x01	; 1
    15ba:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    15be:	8f e0       	ldi	r24, 0x0F	; 15
    15c0:	61 e0       	ldi	r22, 0x01	; 1
    15c2:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixturePlate){
    15c6:	80 91 2e 04 	lds	r24, 0x042E
    15ca:	86 95       	lsr	r24
    15cc:	86 95       	lsr	r24
    15ce:	86 95       	lsr	r24
    15d0:	81 70       	andi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	6f 89       	ldd	r22, Y+23	; 0x17
    15d6:	78 8d       	ldd	r23, Y+24	; 0x18
    15d8:	68 17       	cp	r22, r24
    15da:	79 07       	cpc	r23, r25
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <main+0x6c8>
    15de:	ff c1       	rjmp	.+1022   	; 0x19de <main+0xac6>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixturePlate);
    15e0:	0e 94 6e 07 	call	0xedc	; 0xedc <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixturePlate;
    15e4:	80 91 2e 04 	lds	r24, 0x042E
    15e8:	86 95       	lsr	r24
    15ea:	86 95       	lsr	r24
    15ec:	86 95       	lsr	r24
    15ee:	59 c0       	rjmp	.+178    	; 0x16a2 <main+0x78a>
						}							
						break;
					case S4:
						if(printVar){
    15f0:	99 20       	and	r9, r9
    15f2:	21 f0       	breq	.+8      	; 0x15fc <main+0x6e4>
							serial_print_string("SENSOR 5");
    15f4:	8f ec       	ldi	r24, 0xCF	; 207
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    15fc:	8f e0       	ldi	r24, 0x0F	; 15
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush1){
    1604:	80 91 2e 04 	lds	r24, 0x042E
    1608:	82 95       	swap	r24
    160a:	81 70       	andi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	6f 89       	ldd	r22, Y+23	; 0x17
    1610:	78 8d       	ldd	r23, Y+24	; 0x18
    1612:	68 17       	cp	r22, r24
    1614:	79 07       	cpc	r23, r25
    1616:	09 f4       	brne	.+2      	; 0x161a <main+0x702>
    1618:	e2 c1       	rjmp	.+964    	; 0x19de <main+0xac6>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
    161a:	0e 94 6e 07 	call	0xedc	; 0xedc <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush1;
    161e:	80 91 2e 04 	lds	r24, 0x042E
    1622:	82 95       	swap	r24
    1624:	8f 70       	andi	r24, 0x0F	; 15
    1626:	3d c0       	rjmp	.+122    	; 0x16a2 <main+0x78a>
						}							
						break;
					case S5:
						if(printVar){
    1628:	99 20       	and	r9, r9
    162a:	21 f0       	breq	.+8      	; 0x1634 <main+0x71c>
							serial_print_string("SENSOR 6");
    162c:	88 ed       	ldi	r24, 0xD8	; 216
    162e:	91 e0       	ldi	r25, 0x01	; 1
    1630:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1634:	8f e0       	ldi	r24, 0x0F	; 15
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush2){
    163c:	80 91 2e 04 	lds	r24, 0x042E
    1640:	82 95       	swap	r24
    1642:	86 95       	lsr	r24
    1644:	81 70       	andi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	6f 89       	ldd	r22, Y+23	; 0x17
    164a:	78 8d       	ldd	r23, Y+24	; 0x18
    164c:	68 17       	cp	r22, r24
    164e:	79 07       	cpc	r23, r25
    1650:	09 f4       	brne	.+2      	; 0x1654 <main+0x73c>
    1652:	c5 c1       	rjmp	.+906    	; 0x19de <main+0xac6>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
    1654:	0e 94 6e 07 	call	0xedc	; 0xedc <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush2;
    1658:	80 91 2e 04 	lds	r24, 0x042E
    165c:	82 95       	swap	r24
    165e:	86 95       	lsr	r24
    1660:	87 70       	andi	r24, 0x07	; 7
    1662:	1f c0       	rjmp	.+62     	; 0x16a2 <main+0x78a>
						}							
						break;
					case S6:
						if(printVar){
    1664:	99 20       	and	r9, r9
    1666:	21 f0       	breq	.+8      	; 0x1670 <main+0x758>
							serial_print_string("SENSOR 7");
    1668:	81 ee       	ldi	r24, 0xE1	; 225
    166a:	91 e0       	ldi	r25, 0x01	; 1
    166c:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1670:	8f e0       	ldi	r24, 0x0F	; 15
    1672:	61 e0       	ldi	r22, 0x01	; 1
    1674:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry1){
    1678:	80 91 2e 04 	lds	r24, 0x042E
    167c:	82 95       	swap	r24
    167e:	86 95       	lsr	r24
    1680:	86 95       	lsr	r24
    1682:	81 70       	andi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	6f 89       	ldd	r22, Y+23	; 0x17
    1688:	78 8d       	ldd	r23, Y+24	; 0x18
    168a:	68 17       	cp	r22, r24
    168c:	79 07       	cpc	r23, r25
    168e:	09 f4       	brne	.+2      	; 0x1692 <main+0x77a>
    1690:	a6 c1       	rjmp	.+844    	; 0x19de <main+0xac6>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry1);
    1692:	0e 94 6e 07 	call	0xedc	; 0xedc <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry1;
    1696:	80 91 2e 04 	lds	r24, 0x042E
    169a:	82 95       	swap	r24
    169c:	86 95       	lsr	r24
    169e:	86 95       	lsr	r24
    16a0:	83 70       	andi	r24, 0x03	; 3
    16a2:	81 70       	andi	r24, 0x01	; 1
    16a4:	1d c0       	rjmp	.+58     	; 0x16e0 <main+0x7c8>
						}							
						break;
					case S7:
						if(printVar){
    16a6:	99 20       	and	r9, r9
    16a8:	21 f0       	breq	.+8      	; 0x16b2 <main+0x79a>
							serial_print_string("SENSOR 8");
    16aa:	8a ee       	ldi	r24, 0xEA	; 234
    16ac:	91 e0       	ldi	r25, 0x01	; 1
    16ae:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    16b2:	8f e0       	ldi	r24, 0x0F	; 15
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry2){
    16ba:	80 91 2e 04 	lds	r24, 0x042E
    16be:	88 1f       	adc	r24, r24
    16c0:	88 27       	eor	r24, r24
    16c2:	88 1f       	adc	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	6f 89       	ldd	r22, Y+23	; 0x17
    16c8:	78 8d       	ldd	r23, Y+24	; 0x18
    16ca:	68 17       	cp	r22, r24
    16cc:	79 07       	cpc	r23, r25
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <main+0x7ba>
    16d0:	86 c1       	rjmp	.+780    	; 0x19de <main+0xac6>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry2);
    16d2:	0e 94 6e 07 	call	0xedc	; 0xedc <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry2;
    16d6:	80 91 2e 04 	lds	r24, 0x042E
    16da:	88 1f       	adc	r24, r24
    16dc:	88 27       	eor	r24, r24
    16de:	88 1f       	adc	r24, r24
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	38 8f       	std	Y+24, r19	; 0x18
    16e6:	2f 8b       	std	Y+23, r18	; 0x17
    16e8:	7a c1       	rjmp	.+756    	; 0x19de <main+0xac6>
						}							
						break;
					case O0_ON:
						if(printVar){
    16ea:	99 20       	and	r9, r9
    16ec:	21 f0       	breq	.+8      	; 0x16f6 <main+0x7de>
							serial_print_string("AC POWER     ON ");
    16ee:	83 ef       	ldi	r24, 0xF3	; 243
    16f0:	91 e0       	ldi	r25, 0x01	; 1
    16f2:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
    16f6:	80 91 32 04 	lds	r24, 0x0432
    16fa:	8e 7f       	andi	r24, 0xFE	; 254
    16fc:	0d c0       	rjmp	.+26     	; 0x1718 <main+0x800>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
    16fe:	80 91 32 04 	lds	r24, 0x0432
    1702:	81 60       	ori	r24, 0x01	; 1
    1704:	6c c0       	rjmp	.+216    	; 0x17de <main+0x8c6>
						break;
					case O1_ON:
						if(printVar){
    1706:	99 20       	and	r9, r9
    1708:	21 f0       	breq	.+8      	; 0x1712 <main+0x7fa>
							serial_print_string("BLOWER       ON  ");
    170a:	84 e0       	ldi	r24, 0x04	; 4
    170c:	92 e0       	ldi	r25, 0x02	; 2
    170e:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1712:	80 91 32 04 	lds	r24, 0x0432
    1716:	8d 7f       	andi	r24, 0xFD	; 253
    1718:	80 93 32 04 	sts	0x0432, r24
    171c:	60 c1       	rjmp	.+704    	; 0x19de <main+0xac6>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    171e:	80 91 32 04 	lds	r24, 0x0432
    1722:	82 60       	ori	r24, 0x02	; 2
    1724:	5c c0       	rjmp	.+184    	; 0x17de <main+0x8c6>
						break;
					case O2_ON:
						if(printVar){
    1726:	99 20       	and	r9, r9
    1728:	21 f0       	breq	.+8      	; 0x1732 <main+0x81a>
							serial_print_string("PLATE STOP   ON ");
    172a:	86 e1       	ldi	r24, 0x16	; 22
    172c:	92 e0       	ldi	r25, 0x02	; 2
    172e:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1732:	80 91 32 04 	lds	r24, 0x0432
    1736:	8b 7f       	andi	r24, 0xFB	; 251
    1738:	ef cf       	rjmp	.-34     	; 0x1718 <main+0x800>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
    173a:	80 91 32 04 	lds	r24, 0x0432
    173e:	84 60       	ori	r24, 0x04	; 4
    1740:	4e c0       	rjmp	.+156    	; 0x17de <main+0x8c6>
						break;
					case O3_ON:
						if(printVar){
    1742:	99 20       	and	r9, r9
    1744:	21 f0       	breq	.+8      	; 0x174e <main+0x836>
							serial_print_string("PLATE RAISE  ON ");
    1746:	87 e2       	ldi	r24, 0x27	; 39
    1748:	92 e0       	ldi	r25, 0x02	; 2
    174a:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    174e:	80 91 32 04 	lds	r24, 0x0432
    1752:	87 7f       	andi	r24, 0xF7	; 247
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1754:	80 61       	ori	r24, 0x10	; 16
    1756:	e0 cf       	rjmp	.-64     	; 0x1718 <main+0x800>
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1758:	80 91 32 04 	lds	r24, 0x0432
    175c:	88 60       	ori	r24, 0x08	; 8
    175e:	3f c0       	rjmp	.+126    	; 0x17de <main+0x8c6>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(printVar){
    1760:	99 20       	and	r9, r9
    1762:	21 f0       	breq	.+8      	; 0x176c <main+0x854>
							serial_print_string("PLATE LOWER  ON ");
    1764:	88 e3       	ldi	r24, 0x38	; 56
    1766:	92 e0       	ldi	r25, 0x02	; 2
    1768:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    176c:	80 91 32 04 	lds	r24, 0x0432
    1770:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1772:	8f 7e       	andi	r24, 0xEF	; 239
    1774:	d1 cf       	rjmp	.-94     	; 0x1718 <main+0x800>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1776:	80 91 32 04 	lds	r24, 0x0432
    177a:	80 61       	ori	r24, 0x10	; 16
    177c:	30 c0       	rjmp	.+96     	; 0x17de <main+0x8c6>
						break;
					case O5_ON:
						if(printVar){
    177e:	99 20       	and	r9, r9
    1780:	21 f0       	breq	.+8      	; 0x178a <main+0x872>
							serial_print_string("BRUSH1 RAISE ON ");
    1782:	89 e4       	ldi	r24, 0x49	; 73
    1784:	92 e0       	ldi	r25, 0x02	; 2
    1786:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    178a:	80 91 32 04 	lds	r24, 0x0432
    178e:	8f 7d       	andi	r24, 0xDF	; 223
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1790:	80 64       	ori	r24, 0x40	; 64
    1792:	c2 cf       	rjmp	.-124    	; 0x1718 <main+0x800>
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1794:	80 91 32 04 	lds	r24, 0x0432
    1798:	80 62       	ori	r24, 0x20	; 32
    179a:	21 c0       	rjmp	.+66     	; 0x17de <main+0x8c6>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(printVar){
    179c:	99 20       	and	r9, r9
    179e:	21 f0       	breq	.+8      	; 0x17a8 <main+0x890>
							serial_print_string("BRUSH1 LOWER ON ");
    17a0:	8a e5       	ldi	r24, 0x5A	; 90
    17a2:	92 e0       	ldi	r25, 0x02	; 2
    17a4:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    17a8:	80 91 32 04 	lds	r24, 0x0432
    17ac:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    17ae:	80 62       	ori	r24, 0x20	; 32
    17b0:	b3 cf       	rjmp	.-154    	; 0x1718 <main+0x800>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    17b2:	80 91 32 04 	lds	r24, 0x0432
    17b6:	80 64       	ori	r24, 0x40	; 64
    17b8:	12 c0       	rjmp	.+36     	; 0x17de <main+0x8c6>
						break;
					case O7_ON:
						if(printVar){
    17ba:	99 20       	and	r9, r9
    17bc:	21 f0       	breq	.+8      	; 0x17c6 <main+0x8ae>
							serial_print_string("BRUSH2 RAISE ON ");
    17be:	8b e6       	ldi	r24, 0x6B	; 107
    17c0:	92 e0       	ldi	r25, 0x02	; 2
    17c2:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    17c6:	80 91 32 04 	lds	r24, 0x0432
    17ca:	8f 77       	andi	r24, 0x7F	; 127
    17cc:	80 93 32 04 	sts	0x0432, r24
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    17d0:	80 91 30 04 	lds	r24, 0x0430
    17d4:	81 60       	ori	r24, 0x01	; 1
    17d6:	40 c0       	rjmp	.+128    	; 0x1858 <main+0x940>
						break;
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    17d8:	80 91 32 04 	lds	r24, 0x0432
    17dc:	80 68       	ori	r24, 0x80	; 128
    17de:	80 93 32 04 	sts	0x0432, r24
    17e2:	fe c0       	rjmp	.+508    	; 0x19e0 <main+0xac8>
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(printVar){
    17e4:	99 20       	and	r9, r9
    17e6:	21 f0       	breq	.+8      	; 0x17f0 <main+0x8d8>
							serial_print_string("BRUSH2 LOWER ON ");
    17e8:	8c e7       	ldi	r24, 0x7C	; 124
    17ea:	92 e0       	ldi	r25, 0x02	; 2
    17ec:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    17f0:	80 91 30 04 	lds	r24, 0x0430
    17f4:	8e 7f       	andi	r24, 0xFE	; 254
    17f6:	80 93 30 04 	sts	0x0430, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    17fa:	80 91 32 04 	lds	r24, 0x0432
    17fe:	80 68       	ori	r24, 0x80	; 128
    1800:	8b cf       	rjmp	.-234    	; 0x1718 <main+0x800>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1802:	80 91 30 04 	lds	r24, 0x0430
    1806:	81 60       	ori	r24, 0x01	; 1
    1808:	2d c0       	rjmp	.+90     	; 0x1864 <main+0x94c>
						break;
					case O9_ON:
						if(printVar){
    180a:	99 20       	and	r9, r9
    180c:	21 f0       	breq	.+8      	; 0x1816 <main+0x8fe>
							serial_print_string("PAPER RAISE  ON ");
    180e:	8d e8       	ldi	r24, 0x8D	; 141
    1810:	92 e0       	ldi	r25, 0x02	; 2
    1812:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1816:	80 91 30 04 	lds	r24, 0x0430
    181a:	8d 7f       	andi	r24, 0xFD	; 253
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    181c:	84 60       	ori	r24, 0x04	; 4
    181e:	1c c0       	rjmp	.+56     	; 0x1858 <main+0x940>
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1820:	80 91 30 04 	lds	r24, 0x0430
    1824:	82 60       	ori	r24, 0x02	; 2
    1826:	1e c0       	rjmp	.+60     	; 0x1864 <main+0x94c>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(printVar){
    1828:	99 20       	and	r9, r9
    182a:	21 f0       	breq	.+8      	; 0x1834 <main+0x91c>
							serial_print_string("PAPER LOWER  ON ");
    182c:	8e e9       	ldi	r24, 0x9E	; 158
    182e:	92 e0       	ldi	r25, 0x02	; 2
    1830:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1834:	80 91 30 04 	lds	r24, 0x0430
    1838:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    183a:	82 60       	ori	r24, 0x02	; 2
    183c:	0d c0       	rjmp	.+26     	; 0x1858 <main+0x940>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    183e:	80 91 30 04 	lds	r24, 0x0430
    1842:	84 60       	ori	r24, 0x04	; 4
    1844:	0f c0       	rjmp	.+30     	; 0x1864 <main+0x94c>
						break;
					case O11_ON:
						if(printVar){
    1846:	99 20       	and	r9, r9
    1848:	21 f0       	breq	.+8      	; 0x1852 <main+0x93a>
							serial_print_string("AIR KNIFE    ON ");
    184a:	8f ea       	ldi	r24, 0xAF	; 175
    184c:	92 e0       	ldi	r25, 0x02	; 2
    184e:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1852:	80 91 30 04 	lds	r24, 0x0430
    1856:	87 7f       	andi	r24, 0xF7	; 247
    1858:	80 93 30 04 	sts	0x0430, r24
    185c:	c0 c0       	rjmp	.+384    	; 0x19de <main+0xac6>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
    185e:	80 91 30 04 	lds	r24, 0x0430
    1862:	88 60       	ori	r24, 0x08	; 8
    1864:	80 93 30 04 	sts	0x0430, r24
    1868:	bb c0       	rjmp	.+374    	; 0x19e0 <main+0xac8>
						break;
					case M1_F:
						if(printVar){
    186a:	99 20       	and	r9, r9
    186c:	21 f0       	breq	.+8      	; 0x1876 <main+0x95e>
							serial_print_string("LOADING    FRONT");
    186e:	80 ec       	ldi	r24, 0xC0	; 192
    1870:	92 e0       	ldi	r25, 0x02	; 2
    1872:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1876:	80 91 33 04 	lds	r24, 0x0433
    187a:	8d 7f       	andi	r24, 0xFD	; 253
    187c:	80 93 33 04 	sts	0x0433, r24
						plateLoadMotor =  1;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	9b 83       	std	Y+3, r25	; 0x03
    1886:	8a 83       	std	Y+2, r24	; 0x02
    1888:	aa c0       	rjmp	.+340    	; 0x19de <main+0xac6>
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
    188a:	80 91 33 04 	lds	r24, 0x0433
    188e:	82 60       	ori	r24, 0x02	; 2
    1890:	80 93 33 04 	sts	0x0433, r24
						plateLoadMotor =  1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	9b 83       	std	Y+3, r25	; 0x03
    189a:	8a 83       	std	Y+2, r24	; 0x02
    189c:	a1 c0       	rjmp	.+322    	; 0x19e0 <main+0xac8>
						break;
					case M2_F:
						if(printVar){
    189e:	99 20       	and	r9, r9
    18a0:	21 f0       	breq	.+8      	; 0x18aa <main+0x992>
							serial_print_string("DRIVE      FRONT");
    18a2:	81 ed       	ldi	r24, 0xD1	; 209
    18a4:	92 e0       	ldi	r25, 0x02	; 2
    18a6:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    18aa:	80 91 33 04 	lds	r24, 0x0433
    18ae:	8f 7e       	andi	r24, 0xEF	; 239
    18b0:	80 93 33 04 	sts	0x0433, r24
						fixtureMotor =  1;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	9d 83       	std	Y+5, r25	; 0x05
    18ba:	8c 83       	std	Y+4, r24	; 0x04
						plateLoadMotor = 0;
    18bc:	1b 82       	std	Y+3, r1	; 0x03
    18be:	1a 82       	std	Y+2, r1	; 0x02
    18c0:	99 24       	eor	r9, r9
    18c2:	32 e2       	ldi	r19, 0x22	; 34
    18c4:	63 2e       	mov	r6, r19
    18c6:	71 2c       	mov	r7, r1
    18c8:	8b c0       	rjmp	.+278    	; 0x19e0 <main+0xac8>
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
    18ca:	80 91 33 04 	lds	r24, 0x0433
    18ce:	80 61       	ori	r24, 0x10	; 16
    18d0:	80 93 33 04 	sts	0x0433, r24
						fixtureMotor =  1;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	9d 83       	std	Y+5, r25	; 0x05
    18da:	8c 83       	std	Y+4, r24	; 0x04
    18dc:	81 c0       	rjmp	.+258    	; 0x19e0 <main+0xac8>
						break;
					case M3_F:
						if(printVar){
    18de:	99 20       	and	r9, r9
    18e0:	21 f0       	breq	.+8      	; 0x18ea <main+0x9d2>
							serial_print_string("BRUSH1     FRONT");
    18e2:	82 ee       	ldi	r24, 0xE2	; 226
    18e4:	92 e0       	ldi	r25, 0x02	; 2
    18e6:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
    18ea:	80 91 33 04 	lds	r24, 0x0433
    18ee:	8f 77       	andi	r24, 0x7F	; 127
    18f0:	80 93 33 04 	sts	0x0433, r24
						brush1Motor =  1;
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9f 83       	std	Y+7, r25	; 0x07
    18fa:	8e 83       	std	Y+6, r24	; 0x06
						fixtureMotor = 0;
    18fc:	1d 82       	std	Y+5, r1	; 0x05
    18fe:	1c 82       	std	Y+4, r1	; 0x04
    1900:	99 24       	eor	r9, r9
    1902:	24 e2       	ldi	r18, 0x24	; 36
    1904:	62 2e       	mov	r6, r18
    1906:	71 2c       	mov	r7, r1
    1908:	6b c0       	rjmp	.+214    	; 0x19e0 <main+0xac8>
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
    190a:	80 91 33 04 	lds	r24, 0x0433
    190e:	80 68       	ori	r24, 0x80	; 128
    1910:	80 93 33 04 	sts	0x0433, r24
						brush1Motor =  1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9f 83       	std	Y+7, r25	; 0x07
    191a:	8e 83       	std	Y+6, r24	; 0x06
    191c:	61 c0       	rjmp	.+194    	; 0x19e0 <main+0xac8>
						break;
					case M4_F:
						if(printVar){
    191e:	99 20       	and	r9, r9
    1920:	21 f0       	breq	.+8      	; 0x192a <main+0xa12>
							serial_print_string("BRUSH2     FRONT");
    1922:	83 ef       	ldi	r24, 0xF3	; 243
    1924:	92 e0       	ldi	r25, 0x02	; 2
    1926:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
    192a:	80 91 2f 04 	lds	r24, 0x042F
    192e:	8b 7f       	andi	r24, 0xFB	; 251
    1930:	80 93 2f 04 	sts	0x042F, r24
						brush2Motor =  1;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	99 87       	std	Y+9, r25	; 0x09
    193a:	88 87       	std	Y+8, r24	; 0x08
						brush1Motor = 0;
    193c:	1f 82       	std	Y+7, r1	; 0x07
    193e:	1e 82       	std	Y+6, r1	; 0x06
    1940:	99 24       	eor	r9, r9
    1942:	96 e2       	ldi	r25, 0x26	; 38
    1944:	69 2e       	mov	r6, r25
    1946:	71 2c       	mov	r7, r1
    1948:	4b c0       	rjmp	.+150    	; 0x19e0 <main+0xac8>
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
    194a:	80 91 2f 04 	lds	r24, 0x042F
    194e:	84 60       	ori	r24, 0x04	; 4
    1950:	80 93 2f 04 	sts	0x042F, r24
						brush2Motor =  1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	99 87       	std	Y+9, r25	; 0x09
    195a:	88 87       	std	Y+8, r24	; 0x08
    195c:	41 c0       	rjmp	.+130    	; 0x19e0 <main+0xac8>
						break;
					case M5_F:
						if(printVar){
    195e:	99 20       	and	r9, r9
    1960:	21 f0       	breq	.+8      	; 0x196a <main+0xa52>
							serial_print_string("PAPER      FRONT");
    1962:	84 e0       	ldi	r24, 0x04	; 4
    1964:	93 e0       	ldi	r25, 0x03	; 3
    1966:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    196a:	80 91 2f 04 	lds	r24, 0x042F
    196e:	8f 7d       	andi	r24, 0xDF	; 223
    1970:	80 93 2f 04 	sts	0x042F, r24
						paperTowelMotor =  1;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	9b 87       	std	Y+11, r25	; 0x0b
    197a:	8a 87       	std	Y+10, r24	; 0x0a
						brush2Motor = 0;
    197c:	19 86       	std	Y+9, r1	; 0x09
    197e:	18 86       	std	Y+8, r1	; 0x08
    1980:	99 24       	eor	r9, r9
    1982:	88 e2       	ldi	r24, 0x28	; 40
    1984:	68 2e       	mov	r6, r24
    1986:	71 2c       	mov	r7, r1
    1988:	2b c0       	rjmp	.+86     	; 0x19e0 <main+0xac8>
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
    198a:	80 91 2f 04 	lds	r24, 0x042F
    198e:	80 62       	ori	r24, 0x20	; 32
    1990:	80 93 2f 04 	sts	0x042F, r24
						paperTowelMotor =  1;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9b 87       	std	Y+11, r25	; 0x0b
    199a:	8a 87       	std	Y+10, r24	; 0x0a
    199c:	21 c0       	rjmp	.+66     	; 0x19e0 <main+0xac8>
						break;
					case M2_AND_M3:
						if(printVar){
    199e:	99 20       	and	r9, r9
    19a0:	21 f0       	breq	.+8      	; 0x19aa <main+0xa92>
							serial_print_string("FIXTURE & BRUSH1");
    19a2:	85 e1       	ldi	r24, 0x15	; 21
    19a4:	93 e0       	ldi	r25, 0x03	; 3
    19a6:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9d 83       	std	Y+5, r25	; 0x05
    19b0:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 1;
    19b2:	9f 83       	std	Y+7, r25	; 0x07
    19b4:	8e 83       	std	Y+6, r24	; 0x06
    19b6:	13 c0       	rjmp	.+38     	; 0x19de <main+0xac6>
						break;
					case M2_AND_M4:
						if(printVar){
    19b8:	99 20       	and	r9, r9
    19ba:	21 f0       	breq	.+8      	; 0x19c4 <main+0xaac>
							serial_print_string("FIXTURE & BRUSH2");
    19bc:	86 e2       	ldi	r24, 0x26	; 38
    19be:	93 e0       	ldi	r25, 0x03	; 3
    19c0:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9d 83       	std	Y+5, r25	; 0x05
    19ca:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 0;
    19cc:	1f 82       	std	Y+7, r1	; 0x07
    19ce:	1e 82       	std	Y+6, r1	; 0x06
						brush2Motor = 1;
    19d0:	99 87       	std	Y+9, r25	; 0x09
    19d2:	88 87       	std	Y+8, r24	; 0x08
    19d4:	99 24       	eor	r9, r9
    19d6:	0b e2       	ldi	r16, 0x2B	; 43
    19d8:	60 2e       	mov	r6, r16
    19da:	71 2c       	mov	r7, r1
    19dc:	01 c0       	rjmp	.+2      	; 0x19e0 <main+0xac8>
    19de:	99 24       	eor	r9, r9
						break;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    19e0:	2a 81       	ldd	r18, Y+2	; 0x02
    19e2:	3b 81       	ldd	r19, Y+3	; 0x03
    19e4:	0c 81       	ldd	r16, Y+4	; 0x04
    19e6:	1d 81       	ldd	r17, Y+5	; 0x05
    19e8:	ee 80       	ldd	r14, Y+6	; 0x06
    19ea:	ff 80       	ldd	r15, Y+7	; 0x07
    19ec:	c8 84       	ldd	r12, Y+8	; 0x08
    19ee:	d9 84       	ldd	r13, Y+9	; 0x09
    19f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    19f2:	bb 84       	ldd	r11, Y+11	; 0x0b
    19f4:	c2 01       	movw	r24, r4
    19f6:	b1 01       	movw	r22, r2
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <motor_and_write>

				serial_check(); counter++;
    1a00:	0e 94 a4 1c 	call	0x3948	; 0x3948 <serial_check>
				delay_ms(1);
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>
			counter = 0;
			//clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
    1a0c:	3c e2       	ldi	r19, 0x2C	; 44
    1a0e:	63 16       	cp	r6, r19
    1a10:	71 04       	cpc	r7, r1
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <main+0xafe>
    1a14:	a6 c5       	rjmp	.+2892   	; 0x2562 <main+0x164a>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1a16:	08 94       	sec
    1a18:	41 1c       	adc	r4, r1
    1a1a:	51 1c       	adc	r5, r1
    1a1c:	dc cb       	rjmp	.-2120   	; 0x11d6 <main+0x2be>
		}
		else{										//If switch is set to Run Mode
		
		bool printVar = true;

		serial_print_string("NORMAL");
    1a1e:	87 e3       	ldi	r24, 0x37	; 55
    1a20:	93 e0       	ldi	r25, 0x03	; 3
    1a22:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
		delay_ms(1000);
    1a26:	88 ee       	ldi	r24, 0xE8	; 232
    1a28:	93 e0       	ldi	r25, 0x03	; 3
    1a2a:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>
		
		//clear();
		serial_print_string("SELECT CYCLE");
    1a2e:	8e e3       	ldi	r24, 0x3E	; 62
    1a30:	93 e0       	ldi	r25, 0x03	; 3
    1a32:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
    1a36:	ee 24       	eor	r14, r14
    1a38:	ff 24       	eor	r15, r15
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1a3a:	c7 01       	movw	r24, r14
    1a3c:	be 01       	movw	r22, r28
    1a3e:	64 5f       	subi	r22, 0xF4	; 244
    1a40:	7f 4f       	sbci	r23, 0xFF	; 255
    1a42:	0e 94 0b 03 	call	0x616	; 0x616 <button_debounce>
    1a46:	18 2f       	mov	r17, r24
			counter++;
    1a48:	08 94       	sec
    1a4a:	e1 1c       	adc	r14, r1
    1a4c:	f1 1c       	adc	r15, r1
			delay_ms(1);
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>
		delay_ms(1000);
		
		//clear();
		serial_print_string("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1a56:	11 23       	and	r17, r17
    1a58:	81 f3       	breq	.-32     	; 0x1a3a <main+0xb22>
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		//clear();
		serial_print_string("CYCLE:");
    1a5a:	8b e4       	ldi	r24, 0x4B	; 75
    1a5c:	93 e0       	ldi	r25, 0x03	; 3
    1a5e:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>

		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1a62:	80 91 33 04 	lds	r24, 0x0433
    1a66:	80 62       	ori	r24, 0x20	; 32
    1a68:	80 93 33 04 	sts	0x0433, r24

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1a72:	88 23       	and	r24, r24
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <main+0xb60>
    1a76:	70 c1       	rjmp	.+736    	; 0x1d58 <main+0xe40>
    1a78:	82 e0       	ldi	r24, 0x02	; 2
    1a7a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1a7e:	88 23       	and	r24, r24
    1a80:	09 f0       	breq	.+2      	; 0x1a84 <main+0xb6c>
    1a82:	6a c1       	rjmp	.+724    	; 0x1d58 <main+0xe40>
			lcd_goto_xy(7,0);
    1a84:	87 e0       	ldi	r24, 0x07	; 7
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
			serial_print_string("FIRST B");
    1a8c:	82 e5       	ldi	r24, 0x52	; 82
    1a8e:	93 e0       	ldi	r25, 0x03	; 3
    1a90:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9d 83       	std	Y+5, r25	; 0x05
    1a9a:	8c 83       	std	Y+4, r24	; 0x04
    1a9c:	80 91 33 04 	lds	r24, 0x0433
    1aa0:	80 62       	ori	r24, 0x20	; 32
    1aa2:	80 93 33 04 	sts	0x0433, r24
    1aa6:	44 24       	eor	r4, r4
    1aa8:	55 24       	eor	r5, r5
    1aaa:	1f 86       	std	Y+15, r1	; 0x0f
    1aac:	1e 86       	std	Y+14, r1	; 0x0e
    1aae:	22 24       	eor	r2, r2
    1ab0:	23 94       	inc	r2
    1ab2:	33 24       	eor	r3, r3
    1ab4:	33 94       	inc	r3
    1ab6:	88 24       	eor	r8, r8
    1ab8:	99 24       	eor	r9, r9
    1aba:	66 24       	eor	r6, r6
    1abc:	77 24       	eor	r7, r7
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1abe:	84 e4       	ldi	r24, 0x44	; 68
    1ac0:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1aca:	85 e4       	ldi	r24, 0x45	; 69
    1acc:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1ad0:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1ad4:	80 93 2e 04 	sts	0x042E, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1ad8:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1adc:	80 93 31 04 	sts	0x0431, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1ae0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    1ae4:	81 14       	cp	r8, r1
    1ae6:	91 04       	cpc	r9, r1
    1ae8:	b1 f0       	breq	.+44     	; 0x1b16 <main+0xbfe>
    1aea:	33 20       	and	r3, r3
    1aec:	a1 f0       	breq	.+40     	; 0x1b16 <main+0xbfe>
					lcd_goto_xy(6,1);
    1aee:	86 e0       	ldi	r24, 0x06	; 6
    1af0:	61 e0       	ldi	r22, 0x01	; 1
    1af2:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
					serial_print_string("     ");
    1af6:	8a e5       	ldi	r24, 0x5A	; 90
    1af8:	93 e0       	ldi	r25, 0x03	; 3
    1afa:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
					lcd_goto_xy(0,1);
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	61 e0       	ldi	r22, 0x01	; 1
    1b02:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
					serial_print_string("STATE ");
    1b06:	80 e6       	ldi	r24, 0x60	; 96
    1b08:	93 e0       	ldi	r25, 0x03	; 3
    1b0a:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
					serial_print_int(state);
    1b0e:	c4 01       	movw	r24, r8
    1b10:	0e 94 6e 07 	call	0xedc	; 0xedc <serial_print_int>
    1b14:	33 24       	eor	r3, r3
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1b16:	c3 01       	movw	r24, r6
    1b18:	be 01       	movw	r22, r28
    1b1a:	64 5f       	subi	r22, 0xF4	; 244
    1b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1e:	0e 94 0b 03 	call	0x616	; 0x616 <button_debounce>
    1b22:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1b24:	c4 01       	movw	r24, r8
    1b26:	a3 01       	movw	r20, r6
    1b28:	92 01       	movw	r18, r4
    1b2a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <init_trans>
    1b2e:	88 23       	and	r24, r24
    1b30:	31 f0       	breq	.+12     	; 0x1b3e <main+0xc26>
					buttonTriggered = false;
					state ++;
    1b32:	08 94       	sec
    1b34:	81 1c       	adc	r8, r1
    1b36:	91 1c       	adc	r9, r1
    1b38:	23 01       	movw	r4, r6
    1b3a:	33 24       	eor	r3, r3
    1b3c:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    1b3e:	c4 01       	movw	r24, r8
    1b40:	b3 01       	movw	r22, r6
    1b42:	a2 01       	movw	r20, r4
    1b44:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <firstB_trans>
    1b48:	88 23       	and	r24, r24
    1b4a:	71 f0       	breq	.+28     	; 0x1b68 <main+0xc50>
					state ++;
    1b4c:	08 94       	sec
    1b4e:	81 1c       	adc	r8, r1
    1b50:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    1b52:	6c e0       	ldi	r22, 0x0C	; 12
    1b54:	86 16       	cp	r8, r22
    1b56:	91 04       	cpc	r9, r1
    1b58:	f1 f1       	breq	.+124    	; 0x1bd6 <main+0xcbe>
    1b5a:	7f e0       	ldi	r23, 0x0F	; 15
    1b5c:	87 16       	cp	r8, r23
    1b5e:	91 04       	cpc	r9, r1
    1b60:	d1 f1       	breq	.+116    	; 0x1bd6 <main+0xcbe>
    1b62:	23 01       	movw	r4, r6
    1b64:	33 24       	eor	r3, r3
    1b66:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}

				if(state == B1STOP2 && counter - counterRef > pWait){
    1b68:	80 e1       	ldi	r24, 0x10	; 16
    1b6a:	88 16       	cp	r8, r24
    1b6c:	91 04       	cpc	r9, r1
    1b6e:	71 f4       	brne	.+28     	; 0x1b8c <main+0xc74>
    1b70:	93 01       	movw	r18, r6
    1b72:	24 19       	sub	r18, r4
    1b74:	35 09       	sbc	r19, r5
    1b76:	80 91 90 03 	lds	r24, 0x0390
    1b7a:	90 91 91 03 	lds	r25, 0x0391
    1b7e:	82 17       	cp	r24, r18
    1b80:	93 07       	cpc	r25, r19
    1b82:	5c f5       	brge	.+86     	; 0x1bda <main+0xcc2>
    1b84:	23 01       	movw	r4, r6
    1b86:	33 24       	eor	r3, r3
    1b88:	33 94       	inc	r3
    1b8a:	04 c0       	rjmp	.+8      	; 0x1b94 <main+0xc7c>
					state = MOVED1;
					counterRef = counter;
					printVar = true;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1b8c:	9a e1       	ldi	r25, 0x1A	; 26
    1b8e:	89 16       	cp	r8, r25
    1b90:	91 04       	cpc	r9, r1
    1b92:	19 f5       	brne	.+70     	; 0x1bda <main+0xcc2>
    1b94:	a3 01       	movw	r20, r6
    1b96:	44 19       	sub	r20, r4
    1b98:	55 09       	sbc	r21, r5
    1b9a:	20 91 c2 03 	lds	r18, 0x03C2
    1b9e:	30 91 c3 03 	lds	r19, 0x03C3
    1ba2:	80 91 a2 03 	lds	r24, 0x03A2
    1ba6:	90 91 a3 03 	lds	r25, 0x03A3
    1baa:	bc 01       	movw	r22, r24
    1bac:	26 9f       	mul	r18, r22
    1bae:	c0 01       	movw	r24, r0
    1bb0:	27 9f       	mul	r18, r23
    1bb2:	90 0d       	add	r25, r0
    1bb4:	36 9f       	mul	r19, r22
    1bb6:	90 0d       	add	r25, r0
    1bb8:	11 24       	eor	r1, r1
    1bba:	84 17       	cp	r24, r20
    1bbc:	95 07       	cpc	r25, r21
    1bbe:	3c f4       	brge	.+14     	; 0x1bce <main+0xcb6>
    1bc0:	23 01       	movw	r4, r6
    1bc2:	33 24       	eor	r3, r3
    1bc4:	33 94       	inc	r3
    1bc6:	1b e1       	ldi	r17, 0x1B	; 27
    1bc8:	81 2e       	mov	r8, r17
    1bca:	91 2c       	mov	r9, r1
    1bcc:	06 c0       	rjmp	.+12     	; 0x1bda <main+0xcc2>
    1bce:	ba e1       	ldi	r27, 0x1A	; 26
    1bd0:	8b 2e       	mov	r8, r27
    1bd2:	91 2c       	mov	r9, r1
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <main+0xcc2>
    1bd6:	33 24       	eor	r3, r3
    1bd8:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1bda:	c4 01       	movw	r24, r8
    1bdc:	b3 01       	movw	r22, r6
    1bde:	a2 01       	movw	r20, r4
    1be0:	2e 85       	ldd	r18, Y+14	; 0x0e
    1be2:	3f 85       	ldd	r19, Y+15	; 0x0f
    1be4:	0e 94 1b 05 	call	0xa36	; 0xa36 <dry_trans>
    1be8:	88 23       	and	r24, r24
    1bea:	79 f0       	breq	.+30     	; 0x1c0a <main+0xcf2>
					state ++;
    1bec:	08 94       	sec
    1bee:	81 1c       	adc	r8, r1
    1bf0:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    1bf2:	7d e1       	ldi	r23, 0x1D	; 29
    1bf4:	87 16       	cp	r8, r23
    1bf6:	91 04       	cpc	r9, r1
    1bf8:	29 f4       	brne	.+10     	; 0x1c04 <main+0xcec>
    1bfa:	7f 86       	std	Y+15, r7	; 0x0f
    1bfc:	6e 86       	std	Y+14, r6	; 0x0e
    1bfe:	33 24       	eor	r3, r3
    1c00:	33 94       	inc	r3
    1c02:	0f c0       	rjmp	.+30     	; 0x1c22 <main+0xd0a>
    1c04:	23 01       	movw	r4, r6
    1c06:	33 24       	eor	r3, r3
    1c08:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    1c0a:	85 e2       	ldi	r24, 0x25	; 37
    1c0c:	88 16       	cp	r8, r24
    1c0e:	91 04       	cpc	r9, r1
    1c10:	41 f4       	brne	.+16     	; 0x1c22 <main+0xd0a>
    1c12:	c3 01       	movw	r24, r6
    1c14:	84 19       	sub	r24, r4
    1c16:	95 09       	sbc	r25, r5
    1c18:	0b 97       	sbiw	r24, 0x0b	; 11
    1c1a:	1c f0       	brlt	.+6      	; 0x1c22 <main+0xd0a>
    1c1c:	a6 e2       	ldi	r26, 0x26	; 38
    1c1e:	8a 2e       	mov	r8, r26
    1c20:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1c22:	c4 01       	movw	r24, r8
    1c24:	b3 01       	movw	r22, r6
    1c26:	ae 01       	movw	r20, r28
    1c28:	4e 5f       	subi	r20, 0xFE	; 254
    1c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2c:	9e 01       	movw	r18, r28
    1c2e:	2c 5f       	subi	r18, 0xFC	; 252
    1c30:	3f 4f       	sbci	r19, 0xFF	; 255
    1c32:	8e 01       	movw	r16, r28
    1c34:	0a 5f       	subi	r16, 0xFA	; 250
    1c36:	1f 4f       	sbci	r17, 0xFF	; 255
    1c38:	f8 e0       	ldi	r31, 0x08	; 8
    1c3a:	ef 2e       	mov	r14, r31
    1c3c:	f1 2c       	mov	r15, r1
    1c3e:	ec 0e       	add	r14, r28
    1c40:	fd 1e       	adc	r15, r29
    1c42:	ea e0       	ldi	r30, 0x0A	; 10
    1c44:	ce 2e       	mov	r12, r30
    1c46:	d1 2c       	mov	r13, r1
    1c48:	cc 0e       	add	r12, r28
    1c4a:	dd 1e       	adc	r13, r29
    1c4c:	5e 01       	movw	r10, r28
    1c4e:	08 94       	sec
    1c50:	a1 1c       	adc	r10, r1
    1c52:	b1 1c       	adc	r11, r1
    1c54:	0e 94 c1 06 	call	0xd82	; 0xd82 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1c58:	c4 01       	movw	r24, r8
    1c5a:	b3 01       	movw	r22, r6
    1c5c:	ae 01       	movw	r20, r28
    1c5e:	4e 5f       	subi	r20, 0xFE	; 254
    1c60:	5f 4f       	sbci	r21, 0xFF	; 255
    1c62:	9e 01       	movw	r18, r28
    1c64:	2c 5f       	subi	r18, 0xFC	; 252
    1c66:	3f 4f       	sbci	r19, 0xFF	; 255
    1c68:	8e 01       	movw	r16, r28
    1c6a:	0a 5f       	subi	r16, 0xFA	; 250
    1c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6e:	b8 e0       	ldi	r27, 0x08	; 8
    1c70:	eb 2e       	mov	r14, r27
    1c72:	f1 2c       	mov	r15, r1
    1c74:	ec 0e       	add	r14, r28
    1c76:	fd 1e       	adc	r15, r29
    1c78:	aa e0       	ldi	r26, 0x0A	; 10
    1c7a:	ca 2e       	mov	r12, r26
    1c7c:	d1 2c       	mov	r13, r1
    1c7e:	cc 0e       	add	r12, r28
    1c80:	dd 1e       	adc	r13, r29
    1c82:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    1c86:	90 e1       	ldi	r25, 0x10	; 16
    1c88:	89 16       	cp	r8, r25
    1c8a:	91 04       	cpc	r9, r1
    1c8c:	59 f4       	brne	.+22     	; 0x1ca4 <main+0xd8c>
					brush1Motor = 0;
    1c8e:	1f 82       	std	Y+7, r1	; 0x07
    1c90:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    1c92:	1d 82       	std	Y+5, r1	; 0x05
    1c94:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1c96:	80 91 32 04 	lds	r24, 0x0432
    1c9a:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1c9c:	80 62       	ori	r24, 0x20	; 32
    1c9e:	80 93 32 04 	sts	0x0432, r24
    1ca2:	12 c0       	rjmp	.+36     	; 0x1cc8 <main+0xdb0>
				}
				if(state == MOVED1){
    1ca4:	2a e1       	ldi	r18, 0x1A	; 26
    1ca6:	82 16       	cp	r8, r18
    1ca8:	91 04       	cpc	r9, r1
    1caa:	71 f4       	brne	.+28     	; 0x1cc8 <main+0xdb0>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1cac:	80 91 33 04 	lds	r24, 0x0433
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1cb0:	61 e0       	ldi	r22, 0x01	; 1
    1cb2:	70 e0       	ldi	r23, 0x00	; 0
    1cb4:	7d 83       	std	Y+5, r23	; 0x05
    1cb6:	6c 83       	std	Y+4, r22	; 0x04
    1cb8:	80 63       	ori	r24, 0x30	; 48
    1cba:	80 93 33 04 	sts	0x0433, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1cbe:	80 91 2f 04 	lds	r24, 0x042F
    1cc2:	8e 7f       	andi	r24, 0xFE	; 254
    1cc4:	80 93 2f 04 	sts	0x042F, r24
				}
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1cc8:	c4 01       	movw	r24, r8
    1cca:	b3 01       	movw	r22, r6
    1ccc:	ae 01       	movw	r20, r28
    1cce:	4e 5f       	subi	r20, 0xFE	; 254
    1cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd2:	9e 01       	movw	r18, r28
    1cd4:	2c 5f       	subi	r18, 0xFC	; 252
    1cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd8:	8e 01       	movw	r16, r28
    1cda:	0a 5f       	subi	r16, 0xFA	; 250
    1cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cde:	f8 e0       	ldi	r31, 0x08	; 8
    1ce0:	ef 2e       	mov	r14, r31
    1ce2:	f1 2c       	mov	r15, r1
    1ce4:	ec 0e       	add	r14, r28
    1ce6:	fd 1e       	adc	r15, r29
    1ce8:	ea e0       	ldi	r30, 0x0A	; 10
    1cea:	ce 2e       	mov	r12, r30
    1cec:	d1 2c       	mov	r13, r1
    1cee:	cc 0e       	add	r12, r28
    1cf0:	dd 1e       	adc	r13, r29
    1cf2:	0e 94 57 02 	call	0x4ae	; 0x4ae <dry_action>
				if(state == END){
    1cf6:	75 e2       	ldi	r23, 0x25	; 37
    1cf8:	87 16       	cp	r8, r23
    1cfa:	91 04       	cpc	r9, r1
    1cfc:	71 f4       	brne	.+28     	; 0x1d1a <main+0xe02>
					plateLoadMotor = 0;
    1cfe:	1b 82       	std	Y+3, r1	; 0x03
    1d00:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1d02:	80 91 33 04 	lds	r24, 0x0433
    1d06:	8b 7f       	andi	r24, 0xFB	; 251
    1d08:	80 93 33 04 	sts	0x0433, r24
					if(print35 == 1){
    1d0c:	22 20       	and	r2, r2
    1d0e:	29 f0       	breq	.+10     	; 0x1d1a <main+0xe02>
						//clear();
						serial_print_string("END OF CYCLE");
    1d10:	87 e6       	ldi	r24, 0x67	; 103
    1d12:	93 e0       	ldi	r25, 0x03	; 3
    1d14:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
    1d18:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1d1a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d1c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d1e:	0c 81       	ldd	r16, Y+4	; 0x04
    1d20:	1d 81       	ldd	r17, Y+5	; 0x05
    1d22:	ee 80       	ldd	r14, Y+6	; 0x06
    1d24:	ff 80       	ldd	r15, Y+7	; 0x07
    1d26:	c8 84       	ldd	r12, Y+8	; 0x08
    1d28:	d9 84       	ldd	r13, Y+9	; 0x09
    1d2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d2c:	bb 84       	ldd	r11, Y+11	; 0x0b
    1d2e:	c3 01       	movw	r24, r6
    1d30:	b2 01       	movw	r22, r4
    1d32:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d34:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d36:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <motor_and_write>

				serial_check(); counter++;
    1d3a:	0e 94 a4 1c 	call	0x3948	; 0x3948 <serial_check>
				delay_ms(1);
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("FIRST B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1d46:	86 e2       	ldi	r24, 0x26	; 38
    1d48:	88 16       	cp	r8, r24
    1d4a:	91 04       	cpc	r9, r1
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <main+0xe38>
    1d4e:	09 c4       	rjmp	.+2066   	; 0x2562 <main+0x164a>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1d50:	08 94       	sec
    1d52:	61 1c       	adc	r6, r1
    1d54:	71 1c       	adc	r7, r1
    1d56:	b3 ce       	rjmp	.-666    	; 0x1abe <main+0xba6>
				delay_ms(1);
   		 	}
		}


		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1d5e:	88 23       	and	r24, r24
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <main+0xe4c>
    1d62:	29 c1       	rjmp	.+594    	; 0x1fb6 <main+0x109e>
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1d6a:	88 23       	and	r24, r24
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <main+0xe58>
    1d6e:	23 c1       	rjmp	.+582    	; 0x1fb6 <main+0x109e>
			lcd_goto_xy(7,0);
    1d70:	87 e0       	ldi	r24, 0x07	; 7
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
			serial_print_string("SECOND B");
    1d78:	84 e7       	ldi	r24, 0x74	; 116
    1d7a:	93 e0       	ldi	r25, 0x03	; 3
    1d7c:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9d 83       	std	Y+5, r25	; 0x05
    1d86:	8c 83       	std	Y+4, r24	; 0x04
    1d88:	80 91 33 04 	lds	r24, 0x0433
    1d8c:	80 62       	ori	r24, 0x20	; 32
    1d8e:	80 93 33 04 	sts	0x0433, r24
    1d92:	44 24       	eor	r4, r4
    1d94:	55 24       	eor	r5, r5
    1d96:	1e 8a       	std	Y+22, r1	; 0x16
    1d98:	1d 8a       	std	Y+21, r1	; 0x15
    1d9a:	22 24       	eor	r2, r2
    1d9c:	23 94       	inc	r2
    1d9e:	33 24       	eor	r3, r3
    1da0:	33 94       	inc	r3
    1da2:	88 24       	eor	r8, r8
    1da4:	99 24       	eor	r9, r9
    1da6:	66 24       	eor	r6, r6
    1da8:	77 24       	eor	r7, r7
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1daa:	84 e4       	ldi	r24, 0x44	; 68
    1dac:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1db6:	85 e4       	ldi	r24, 0x45	; 69
    1db8:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1dbc:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1dc0:	80 93 2e 04 	sts	0x042E, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1dc4:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1dc8:	80 93 31 04 	sts	0x0431, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1dcc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    1dd0:	81 14       	cp	r8, r1
    1dd2:	91 04       	cpc	r9, r1
    1dd4:	b1 f0       	breq	.+44     	; 0x1e02 <main+0xeea>
    1dd6:	33 20       	and	r3, r3
    1dd8:	a1 f0       	breq	.+40     	; 0x1e02 <main+0xeea>
					lcd_goto_xy(6,1);
    1dda:	86 e0       	ldi	r24, 0x06	; 6
    1ddc:	61 e0       	ldi	r22, 0x01	; 1
    1dde:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
					serial_print_string("     ");
    1de2:	8a e5       	ldi	r24, 0x5A	; 90
    1de4:	93 e0       	ldi	r25, 0x03	; 3
    1de6:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
					lcd_goto_xy(0,1);
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	61 e0       	ldi	r22, 0x01	; 1
    1dee:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
					serial_print_string("STATE ");
    1df2:	80 e6       	ldi	r24, 0x60	; 96
    1df4:	93 e0       	ldi	r25, 0x03	; 3
    1df6:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
					serial_print_int(state);
    1dfa:	c4 01       	movw	r24, r8
    1dfc:	0e 94 6e 07 	call	0xedc	; 0xedc <serial_print_int>
    1e00:	33 24       	eor	r3, r3
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1e02:	c3 01       	movw	r24, r6
    1e04:	be 01       	movw	r22, r28
    1e06:	64 5f       	subi	r22, 0xF4	; 244
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0a:	0e 94 0b 03 	call	0x616	; 0x616 <button_debounce>
    1e0e:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1e10:	c4 01       	movw	r24, r8
    1e12:	a3 01       	movw	r20, r6
    1e14:	92 01       	movw	r18, r4
    1e16:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <init_trans>
    1e1a:	88 23       	and	r24, r24
    1e1c:	31 f0       	breq	.+12     	; 0x1e2a <main+0xf12>
					buttonTriggered = false;
					state ++;
    1e1e:	08 94       	sec
    1e20:	81 1c       	adc	r8, r1
    1e22:	91 1c       	adc	r9, r1
    1e24:	23 01       	movw	r4, r6
    1e26:	33 24       	eor	r3, r3
    1e28:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == MOVEC1 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0){
    1e2a:	98 e0       	ldi	r25, 0x08	; 8
    1e2c:	89 16       	cp	r8, r25
    1e2e:	91 04       	cpc	r9, r1
    1e30:	51 f4       	brne	.+20     	; 0x1e46 <main+0xf2e>
    1e32:	80 91 2e 04 	lds	r24, 0x042E
    1e36:	84 fd       	sbrc	r24, 4
    1e38:	06 c0       	rjmp	.+12     	; 0x1e46 <main+0xf2e>
    1e3a:	23 01       	movw	r4, r6
    1e3c:	33 24       	eor	r3, r3
    1e3e:	33 94       	inc	r3
    1e40:	b2 e1       	ldi	r27, 0x12	; 18
    1e42:	8b 2e       	mov	r8, r27
    1e44:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}

				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    1e46:	c4 01       	movw	r24, r8
    1e48:	b3 01       	movw	r22, r6
    1e4a:	a2 01       	movw	r20, r4
    1e4c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <secondB_trans>
    1e50:	88 23       	and	r24, r24
    1e52:	31 f0       	breq	.+12     	; 0x1e60 <main+0xf48>
					state ++;
    1e54:	08 94       	sec
    1e56:	81 1c       	adc	r8, r1
    1e58:	91 1c       	adc	r9, r1
    1e5a:	23 01       	movw	r4, r6
    1e5c:	33 24       	eor	r3, r3
    1e5e:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1e60:	c4 01       	movw	r24, r8
    1e62:	b3 01       	movw	r22, r6
    1e64:	a2 01       	movw	r20, r4
    1e66:	2d 89       	ldd	r18, Y+21	; 0x15
    1e68:	3e 89       	ldd	r19, Y+22	; 0x16
    1e6a:	0e 94 1b 05 	call	0xa36	; 0xa36 <dry_trans>
    1e6e:	88 23       	and	r24, r24
    1e70:	79 f0       	breq	.+30     	; 0x1e90 <main+0xf78>
					state ++;
    1e72:	08 94       	sec
    1e74:	81 1c       	adc	r8, r1
    1e76:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    1e78:	2d e1       	ldi	r18, 0x1D	; 29
    1e7a:	82 16       	cp	r8, r18
    1e7c:	91 04       	cpc	r9, r1
    1e7e:	29 f4       	brne	.+10     	; 0x1e8a <main+0xf72>
    1e80:	7e 8a       	std	Y+22, r7	; 0x16
    1e82:	6d 8a       	std	Y+21, r6	; 0x15
    1e84:	33 24       	eor	r3, r3
    1e86:	33 94       	inc	r3
    1e88:	0f c0       	rjmp	.+30     	; 0x1ea8 <main+0xf90>
    1e8a:	23 01       	movw	r4, r6
    1e8c:	33 24       	eor	r3, r3
    1e8e:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    1e90:	35 e2       	ldi	r19, 0x25	; 37
    1e92:	83 16       	cp	r8, r19
    1e94:	91 04       	cpc	r9, r1
    1e96:	41 f4       	brne	.+16     	; 0x1ea8 <main+0xf90>
    1e98:	c3 01       	movw	r24, r6
    1e9a:	84 19       	sub	r24, r4
    1e9c:	95 09       	sbc	r25, r5
    1e9e:	0b 97       	sbiw	r24, 0x0b	; 11
    1ea0:	1c f0       	brlt	.+6      	; 0x1ea8 <main+0xf90>
    1ea2:	a6 e2       	ldi	r26, 0x26	; 38
    1ea4:	8a 2e       	mov	r8, r26
    1ea6:	91 2c       	mov	r9, r1
				}


				//state actions
				
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1ea8:	c4 01       	movw	r24, r8
    1eaa:	b3 01       	movw	r22, r6
    1eac:	ae 01       	movw	r20, r28
    1eae:	4e 5f       	subi	r20, 0xFE	; 254
    1eb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb2:	9e 01       	movw	r18, r28
    1eb4:	2c 5f       	subi	r18, 0xFC	; 252
    1eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb8:	8e 01       	movw	r16, r28
    1eba:	0a 5f       	subi	r16, 0xFA	; 250
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	f8 e0       	ldi	r31, 0x08	; 8
    1ec0:	ef 2e       	mov	r14, r31
    1ec2:	f1 2c       	mov	r15, r1
    1ec4:	ec 0e       	add	r14, r28
    1ec6:	fd 1e       	adc	r15, r29
    1ec8:	ea e0       	ldi	r30, 0x0A	; 10
    1eca:	ce 2e       	mov	r12, r30
    1ecc:	d1 2c       	mov	r13, r1
    1ece:	cc 0e       	add	r12, r28
    1ed0:	dd 1e       	adc	r13, r29
    1ed2:	5e 01       	movw	r10, r28
    1ed4:	08 94       	sec
    1ed6:	a1 1c       	adc	r10, r1
    1ed8:	b1 1c       	adc	r11, r1
    1eda:	0e 94 c1 06 	call	0xd82	; 0xd82 <init_action>
				if(state == MOVEC1){
    1ede:	68 e0       	ldi	r22, 0x08	; 8
    1ee0:	86 16       	cp	r8, r22
    1ee2:	91 04       	cpc	r9, r1
    1ee4:	49 f4       	brne	.+18     	; 0x1ef8 <main+0xfe0>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1ee6:	80 91 33 04 	lds	r24, 0x0433
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1eea:	21 e0       	ldi	r18, 0x01	; 1
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	3d 83       	std	Y+5, r19	; 0x05
    1ef0:	2c 83       	std	Y+4, r18	; 0x04
    1ef2:	80 63       	ori	r24, 0x30	; 48
    1ef4:	80 93 33 04 	sts	0x0433, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1ef8:	c4 01       	movw	r24, r8
    1efa:	b3 01       	movw	r22, r6
    1efc:	ae 01       	movw	r20, r28
    1efe:	4e 5f       	subi	r20, 0xFE	; 254
    1f00:	5f 4f       	sbci	r21, 0xFF	; 255
    1f02:	9e 01       	movw	r18, r28
    1f04:	2c 5f       	subi	r18, 0xFC	; 252
    1f06:	3f 4f       	sbci	r19, 0xFF	; 255
    1f08:	8e 01       	movw	r16, r28
    1f0a:	0a 5f       	subi	r16, 0xFA	; 250
    1f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0e:	b8 e0       	ldi	r27, 0x08	; 8
    1f10:	eb 2e       	mov	r14, r27
    1f12:	f1 2c       	mov	r15, r1
    1f14:	ec 0e       	add	r14, r28
    1f16:	fd 1e       	adc	r15, r29
    1f18:	aa e0       	ldi	r26, 0x0A	; 10
    1f1a:	ca 2e       	mov	r12, r26
    1f1c:	d1 2c       	mov	r13, r1
    1f1e:	cc 0e       	add	r12, r28
    1f20:	dd 1e       	adc	r13, r29
    1f22:	0e 94 cc 01 	call	0x398	; 0x398 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1f26:	c4 01       	movw	r24, r8
    1f28:	b3 01       	movw	r22, r6
    1f2a:	ae 01       	movw	r20, r28
    1f2c:	4e 5f       	subi	r20, 0xFE	; 254
    1f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f30:	9e 01       	movw	r18, r28
    1f32:	2c 5f       	subi	r18, 0xFC	; 252
    1f34:	3f 4f       	sbci	r19, 0xFF	; 255
    1f36:	8e 01       	movw	r16, r28
    1f38:	0a 5f       	subi	r16, 0xFA	; 250
    1f3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3c:	f8 e0       	ldi	r31, 0x08	; 8
    1f3e:	ef 2e       	mov	r14, r31
    1f40:	f1 2c       	mov	r15, r1
    1f42:	ec 0e       	add	r14, r28
    1f44:	fd 1e       	adc	r15, r29
    1f46:	ea e0       	ldi	r30, 0x0A	; 10
    1f48:	ce 2e       	mov	r12, r30
    1f4a:	d1 2c       	mov	r13, r1
    1f4c:	cc 0e       	add	r12, r28
    1f4e:	dd 1e       	adc	r13, r29
    1f50:	0e 94 57 02 	call	0x4ae	; 0x4ae <dry_action>
				if(state == END){
    1f54:	35 e2       	ldi	r19, 0x25	; 37
    1f56:	83 16       	cp	r8, r19
    1f58:	91 04       	cpc	r9, r1
    1f5a:	71 f4       	brne	.+28     	; 0x1f78 <main+0x1060>
					plateLoadMotor = 0;
    1f5c:	1b 82       	std	Y+3, r1	; 0x03
    1f5e:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1f60:	80 91 33 04 	lds	r24, 0x0433
    1f64:	8b 7f       	andi	r24, 0xFB	; 251
    1f66:	80 93 33 04 	sts	0x0433, r24
					if(print35 == 1){
    1f6a:	22 20       	and	r2, r2
    1f6c:	29 f0       	breq	.+10     	; 0x1f78 <main+0x1060>
						//clear();
						serial_print_string("END OF CYCLE");
    1f6e:	87 e6       	ldi	r24, 0x67	; 103
    1f70:	93 e0       	ldi	r25, 0x03	; 3
    1f72:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
    1f76:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1f78:	2a 81       	ldd	r18, Y+2	; 0x02
    1f7a:	3b 81       	ldd	r19, Y+3	; 0x03
    1f7c:	0c 81       	ldd	r16, Y+4	; 0x04
    1f7e:	1d 81       	ldd	r17, Y+5	; 0x05
    1f80:	ee 80       	ldd	r14, Y+6	; 0x06
    1f82:	ff 80       	ldd	r15, Y+7	; 0x07
    1f84:	c8 84       	ldd	r12, Y+8	; 0x08
    1f86:	d9 84       	ldd	r13, Y+9	; 0x09
    1f88:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f8a:	bb 84       	ldd	r11, Y+11	; 0x0b
    1f8c:	c3 01       	movw	r24, r6
    1f8e:	b2 01       	movw	r22, r4
    1f90:	4d 89       	ldd	r20, Y+21	; 0x15
    1f92:	5e 89       	ldd	r21, Y+22	; 0x16
    1f94:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <motor_and_write>

				serial_check(); counter++;
    1f98:	0e 94 a4 1c 	call	0x3948	; 0x3948 <serial_check>
				delay_ms(1);
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>

		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("SECOND B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1fa4:	66 e2       	ldi	r22, 0x26	; 38
    1fa6:	86 16       	cp	r8, r22
    1fa8:	91 04       	cpc	r9, r1
    1faa:	09 f4       	brne	.+2      	; 0x1fae <main+0x1096>
    1fac:	da c2       	rjmp	.+1460   	; 0x2562 <main+0x164a>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1fae:	08 94       	sec
    1fb0:	61 1c       	adc	r6, r1
    1fb2:	71 1c       	adc	r7, r1
    1fb4:	fa ce       	rjmp	.-524    	; 0x1daa <main+0xe92>
				delay_ms(1);
   		 	}
		}


		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1fbc:	88 23       	and	r24, r24
    1fbe:	09 f0       	breq	.+2      	; 0x1fc2 <main+0x10aa>
    1fc0:	5f c1       	rjmp	.+702    	; 0x2280 <main+0x1368>
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
    1fc4:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1fc8:	88 23       	and	r24, r24
    1fca:	09 f4       	brne	.+2      	; 0x1fce <main+0x10b6>
    1fcc:	59 c1       	rjmp	.+690    	; 0x2280 <main+0x1368>
			lcd_goto_xy(7,0);
    1fce:	87 e0       	ldi	r24, 0x07	; 7
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
			serial_print_string("BOTH B");
    1fd6:	8d e7       	ldi	r24, 0x7D	; 125
    1fd8:	93 e0       	ldi	r25, 0x03	; 3
    1fda:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9d 83       	std	Y+5, r25	; 0x05
    1fe4:	8c 83       	std	Y+4, r24	; 0x04
    1fe6:	80 91 33 04 	lds	r24, 0x0433
    1fea:	80 62       	ori	r24, 0x20	; 32
    1fec:	80 93 33 04 	sts	0x0433, r24
    1ff0:	44 24       	eor	r4, r4
    1ff2:	55 24       	eor	r5, r5
    1ff4:	19 8a       	std	Y+17, r1	; 0x11
    1ff6:	18 8a       	std	Y+16, r1	; 0x10
    1ff8:	22 24       	eor	r2, r2
    1ffa:	23 94       	inc	r2
    1ffc:	33 24       	eor	r3, r3
    1ffe:	33 94       	inc	r3
    2000:	88 24       	eor	r8, r8
    2002:	99 24       	eor	r9, r9
    2004:	66 24       	eor	r6, r6
    2006:	77 24       	eor	r7, r7
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    2008:	84 e4       	ldi	r24, 0x44	; 68
    200a:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2014:	85 e4       	ldi	r24, 0x45	; 69
    2016:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    201a:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    201e:	80 93 2e 04 	sts	0x042E, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2022:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    2026:	80 93 31 04 	sts	0x0431, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    202a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    202e:	81 14       	cp	r8, r1
    2030:	91 04       	cpc	r9, r1
    2032:	b1 f0       	breq	.+44     	; 0x2060 <main+0x1148>
    2034:	33 20       	and	r3, r3
    2036:	a1 f0       	breq	.+40     	; 0x2060 <main+0x1148>
					lcd_goto_xy(6,1);
    2038:	86 e0       	ldi	r24, 0x06	; 6
    203a:	61 e0       	ldi	r22, 0x01	; 1
    203c:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
					serial_print_string("       ");
    2040:	84 e8       	ldi	r24, 0x84	; 132
    2042:	93 e0       	ldi	r25, 0x03	; 3
    2044:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
					lcd_goto_xy(0,1);
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	61 e0       	ldi	r22, 0x01	; 1
    204c:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
					serial_print_string("STATE ");
    2050:	80 e6       	ldi	r24, 0x60	; 96
    2052:	93 e0       	ldi	r25, 0x03	; 3
    2054:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
					serial_print_int(state);
    2058:	c4 01       	movw	r24, r8
    205a:	0e 94 6e 07 	call	0xedc	; 0xedc <serial_print_int>
    205e:	33 24       	eor	r3, r3
					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    2060:	c3 01       	movw	r24, r6
    2062:	be 01       	movw	r22, r28
    2064:	64 5f       	subi	r22, 0xF4	; 244
    2066:	7f 4f       	sbci	r23, 0xFF	; 255
    2068:	0e 94 0b 03 	call	0x616	; 0x616 <button_debounce>
    206c:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    206e:	c4 01       	movw	r24, r8
    2070:	a3 01       	movw	r20, r6
    2072:	92 01       	movw	r18, r4
    2074:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <init_trans>
    2078:	88 23       	and	r24, r24
    207a:	31 f0       	breq	.+12     	; 0x2088 <main+0x1170>
					buttonTriggered = false;
					state ++;
    207c:	08 94       	sec
    207e:	81 1c       	adc	r8, r1
    2080:	91 1c       	adc	r9, r1
    2082:	23 01       	movw	r4, r6
    2084:	33 24       	eor	r3, r3
    2086:	33 94       	inc	r3
					printVar = true;
				}

				
				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    2088:	c4 01       	movw	r24, r8
    208a:	b3 01       	movw	r22, r6
    208c:	a2 01       	movw	r20, r4
    208e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <firstB_trans>
    2092:	88 23       	and	r24, r24
    2094:	71 f0       	breq	.+28     	; 0x20b2 <main+0x119a>
					state ++;
    2096:	08 94       	sec
    2098:	81 1c       	adc	r8, r1
    209a:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    209c:	7c e0       	ldi	r23, 0x0C	; 12
    209e:	87 16       	cp	r8, r23
    20a0:	91 04       	cpc	r9, r1
    20a2:	e1 f0       	breq	.+56     	; 0x20dc <main+0x11c4>
    20a4:	8f e0       	ldi	r24, 0x0F	; 15
    20a6:	88 16       	cp	r8, r24
    20a8:	91 04       	cpc	r9, r1
    20aa:	c1 f0       	breq	.+48     	; 0x20dc <main+0x11c4>
    20ac:	23 01       	movw	r4, r6
    20ae:	33 24       	eor	r3, r3
    20b0:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    20b2:	90 e1       	ldi	r25, 0x10	; 16
    20b4:	89 16       	cp	r8, r25
    20b6:	91 04       	cpc	r9, r1
    20b8:	99 f4       	brne	.+38     	; 0x20e0 <main+0x11c8>
    20ba:	93 01       	movw	r18, r6
    20bc:	24 19       	sub	r18, r4
    20be:	35 09       	sbc	r19, r5
    20c0:	80 91 90 03 	lds	r24, 0x0390
    20c4:	90 91 91 03 	lds	r25, 0x0391
    20c8:	82 17       	cp	r24, r18
    20ca:	93 07       	cpc	r25, r19
    20cc:	4c f4       	brge	.+18     	; 0x20e0 <main+0x11c8>
    20ce:	23 01       	movw	r4, r6
    20d0:	33 24       	eor	r3, r3
    20d2:	33 94       	inc	r3
    20d4:	01 e1       	ldi	r16, 0x11	; 17
    20d6:	80 2e       	mov	r8, r16
    20d8:	91 2c       	mov	r9, r1
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <main+0x11c8>
    20dc:	33 24       	eor	r3, r3
    20de:	33 94       	inc	r3
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    20e0:	c4 01       	movw	r24, r8
    20e2:	b3 01       	movw	r22, r6
    20e4:	a2 01       	movw	r20, r4
    20e6:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <secondB_trans>
    20ea:	88 23       	and	r24, r24
    20ec:	31 f0       	breq	.+12     	; 0x20fa <main+0x11e2>
					state ++;
    20ee:	08 94       	sec
    20f0:	81 1c       	adc	r8, r1
    20f2:	91 1c       	adc	r9, r1
    20f4:	23 01       	movw	r4, r6
    20f6:	33 24       	eor	r3, r3
    20f8:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    20fa:	c4 01       	movw	r24, r8
    20fc:	b3 01       	movw	r22, r6
    20fe:	a2 01       	movw	r20, r4
    2100:	28 89       	ldd	r18, Y+16	; 0x10
    2102:	39 89       	ldd	r19, Y+17	; 0x11
    2104:	0e 94 1b 05 	call	0xa36	; 0xa36 <dry_trans>
    2108:	88 23       	and	r24, r24
    210a:	79 f0       	breq	.+30     	; 0x212a <main+0x1212>
					state ++;
    210c:	08 94       	sec
    210e:	81 1c       	adc	r8, r1
    2110:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    2112:	2d e1       	ldi	r18, 0x1D	; 29
    2114:	82 16       	cp	r8, r18
    2116:	91 04       	cpc	r9, r1
    2118:	29 f4       	brne	.+10     	; 0x2124 <main+0x120c>
    211a:	79 8a       	std	Y+17, r7	; 0x11
    211c:	68 8a       	std	Y+16, r6	; 0x10
    211e:	33 24       	eor	r3, r3
    2120:	33 94       	inc	r3
    2122:	0f c0       	rjmp	.+30     	; 0x2142 <main+0x122a>
    2124:	23 01       	movw	r4, r6
    2126:	33 24       	eor	r3, r3
    2128:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    212a:	35 e2       	ldi	r19, 0x25	; 37
    212c:	83 16       	cp	r8, r19
    212e:	91 04       	cpc	r9, r1
    2130:	41 f4       	brne	.+16     	; 0x2142 <main+0x122a>
    2132:	c3 01       	movw	r24, r6
    2134:	84 19       	sub	r24, r4
    2136:	95 09       	sbc	r25, r5
    2138:	0b 97       	sbiw	r24, 0x0b	; 11
    213a:	1c f0       	brlt	.+6      	; 0x2142 <main+0x122a>
    213c:	16 e2       	ldi	r17, 0x26	; 38
    213e:	81 2e       	mov	r8, r17
    2140:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    2142:	c4 01       	movw	r24, r8
    2144:	b3 01       	movw	r22, r6
    2146:	ae 01       	movw	r20, r28
    2148:	4e 5f       	subi	r20, 0xFE	; 254
    214a:	5f 4f       	sbci	r21, 0xFF	; 255
    214c:	9e 01       	movw	r18, r28
    214e:	2c 5f       	subi	r18, 0xFC	; 252
    2150:	3f 4f       	sbci	r19, 0xFF	; 255
    2152:	8e 01       	movw	r16, r28
    2154:	0a 5f       	subi	r16, 0xFA	; 250
    2156:	1f 4f       	sbci	r17, 0xFF	; 255
    2158:	b8 e0       	ldi	r27, 0x08	; 8
    215a:	eb 2e       	mov	r14, r27
    215c:	f1 2c       	mov	r15, r1
    215e:	ec 0e       	add	r14, r28
    2160:	fd 1e       	adc	r15, r29
    2162:	aa e0       	ldi	r26, 0x0A	; 10
    2164:	ca 2e       	mov	r12, r26
    2166:	d1 2c       	mov	r13, r1
    2168:	cc 0e       	add	r12, r28
    216a:	dd 1e       	adc	r13, r29
    216c:	5e 01       	movw	r10, r28
    216e:	08 94       	sec
    2170:	a1 1c       	adc	r10, r1
    2172:	b1 1c       	adc	r11, r1
    2174:	0e 94 c1 06 	call	0xd82	; 0xd82 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2178:	c4 01       	movw	r24, r8
    217a:	b3 01       	movw	r22, r6
    217c:	ae 01       	movw	r20, r28
    217e:	4e 5f       	subi	r20, 0xFE	; 254
    2180:	5f 4f       	sbci	r21, 0xFF	; 255
    2182:	9e 01       	movw	r18, r28
    2184:	2c 5f       	subi	r18, 0xFC	; 252
    2186:	3f 4f       	sbci	r19, 0xFF	; 255
    2188:	8e 01       	movw	r16, r28
    218a:	0a 5f       	subi	r16, 0xFA	; 250
    218c:	1f 4f       	sbci	r17, 0xFF	; 255
    218e:	f8 e0       	ldi	r31, 0x08	; 8
    2190:	ef 2e       	mov	r14, r31
    2192:	f1 2c       	mov	r15, r1
    2194:	ec 0e       	add	r14, r28
    2196:	fd 1e       	adc	r15, r29
    2198:	ea e0       	ldi	r30, 0x0A	; 10
    219a:	ce 2e       	mov	r12, r30
    219c:	d1 2c       	mov	r13, r1
    219e:	cc 0e       	add	r12, r28
    21a0:	dd 1e       	adc	r13, r29
    21a2:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    21a6:	60 e1       	ldi	r22, 0x10	; 16
    21a8:	86 16       	cp	r8, r22
    21aa:	91 04       	cpc	r9, r1
    21ac:	51 f4       	brne	.+20     	; 0x21c2 <main+0x12aa>
					brush1Motor = 0;
    21ae:	1f 82       	std	Y+7, r1	; 0x07
    21b0:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    21b2:	1d 82       	std	Y+5, r1	; 0x05
    21b4:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    21b6:	80 91 32 04 	lds	r24, 0x0432
    21ba:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    21bc:	80 62       	ori	r24, 0x20	; 32
    21be:	80 93 32 04 	sts	0x0432, r24
				}
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    21c2:	c4 01       	movw	r24, r8
    21c4:	b3 01       	movw	r22, r6
    21c6:	ae 01       	movw	r20, r28
    21c8:	4e 5f       	subi	r20, 0xFE	; 254
    21ca:	5f 4f       	sbci	r21, 0xFF	; 255
    21cc:	9e 01       	movw	r18, r28
    21ce:	2c 5f       	subi	r18, 0xFC	; 252
    21d0:	3f 4f       	sbci	r19, 0xFF	; 255
    21d2:	8e 01       	movw	r16, r28
    21d4:	0a 5f       	subi	r16, 0xFA	; 250
    21d6:	1f 4f       	sbci	r17, 0xFF	; 255
    21d8:	b8 e0       	ldi	r27, 0x08	; 8
    21da:	eb 2e       	mov	r14, r27
    21dc:	f1 2c       	mov	r15, r1
    21de:	ec 0e       	add	r14, r28
    21e0:	fd 1e       	adc	r15, r29
    21e2:	aa e0       	ldi	r26, 0x0A	; 10
    21e4:	ca 2e       	mov	r12, r26
    21e6:	d1 2c       	mov	r13, r1
    21e8:	cc 0e       	add	r12, r28
    21ea:	dd 1e       	adc	r13, r29
    21ec:	0e 94 cc 01 	call	0x398	; 0x398 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    21f0:	c4 01       	movw	r24, r8
    21f2:	b3 01       	movw	r22, r6
    21f4:	ae 01       	movw	r20, r28
    21f6:	4e 5f       	subi	r20, 0xFE	; 254
    21f8:	5f 4f       	sbci	r21, 0xFF	; 255
    21fa:	9e 01       	movw	r18, r28
    21fc:	2c 5f       	subi	r18, 0xFC	; 252
    21fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2200:	8e 01       	movw	r16, r28
    2202:	0a 5f       	subi	r16, 0xFA	; 250
    2204:	1f 4f       	sbci	r17, 0xFF	; 255
    2206:	f8 e0       	ldi	r31, 0x08	; 8
    2208:	ef 2e       	mov	r14, r31
    220a:	f1 2c       	mov	r15, r1
    220c:	ec 0e       	add	r14, r28
    220e:	fd 1e       	adc	r15, r29
    2210:	ea e0       	ldi	r30, 0x0A	; 10
    2212:	ce 2e       	mov	r12, r30
    2214:	d1 2c       	mov	r13, r1
    2216:	cc 0e       	add	r12, r28
    2218:	dd 1e       	adc	r13, r29
    221a:	0e 94 57 02 	call	0x4ae	; 0x4ae <dry_action>
				if(state == END){
    221e:	75 e2       	ldi	r23, 0x25	; 37
    2220:	87 16       	cp	r8, r23
    2222:	91 04       	cpc	r9, r1
    2224:	71 f4       	brne	.+28     	; 0x2242 <main+0x132a>
					plateLoadMotor = 0;
    2226:	1b 82       	std	Y+3, r1	; 0x03
    2228:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    222a:	80 91 33 04 	lds	r24, 0x0433
    222e:	8b 7f       	andi	r24, 0xFB	; 251
    2230:	80 93 33 04 	sts	0x0433, r24
					if(print35 == 1){
    2234:	22 20       	and	r2, r2
    2236:	29 f0       	breq	.+10     	; 0x2242 <main+0x132a>
						//clear();
						serial_print_string("END OF CYCLE");
    2238:	87 e6       	ldi	r24, 0x67	; 103
    223a:	93 e0       	ldi	r25, 0x03	; 3
    223c:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
    2240:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    2242:	2a 81       	ldd	r18, Y+2	; 0x02
    2244:	3b 81       	ldd	r19, Y+3	; 0x03
    2246:	0c 81       	ldd	r16, Y+4	; 0x04
    2248:	1d 81       	ldd	r17, Y+5	; 0x05
    224a:	ee 80       	ldd	r14, Y+6	; 0x06
    224c:	ff 80       	ldd	r15, Y+7	; 0x07
    224e:	c8 84       	ldd	r12, Y+8	; 0x08
    2250:	d9 84       	ldd	r13, Y+9	; 0x09
    2252:	aa 84       	ldd	r10, Y+10	; 0x0a
    2254:	bb 84       	ldd	r11, Y+11	; 0x0b
    2256:	c3 01       	movw	r24, r6
    2258:	b2 01       	movw	r22, r4
    225a:	48 89       	ldd	r20, Y+16	; 0x10
    225c:	59 89       	ldd	r21, Y+17	; 0x11
    225e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <motor_and_write>

				serial_check(); counter++;
    2262:	0e 94 a4 1c 	call	0x3948	; 0x3948 <serial_check>
				delay_ms(1);
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>

		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("BOTH B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    226e:	86 e2       	ldi	r24, 0x26	; 38
    2270:	88 16       	cp	r8, r24
    2272:	91 04       	cpc	r9, r1
    2274:	09 f4       	brne	.+2      	; 0x2278 <main+0x1360>
    2276:	75 c1       	rjmp	.+746    	; 0x2562 <main+0x164a>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    2278:	08 94       	sec
    227a:	61 1c       	adc	r6, r1
    227c:	71 1c       	adc	r7, r1
    227e:	c4 ce       	rjmp	.-632    	; 0x2008 <main+0x10f0>
				delay_ms(1);
   		 	}
		}

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    2286:	88 23       	and	r24, r24
    2288:	09 f4       	brne	.+2      	; 0x228c <main+0x1374>
    228a:	6b c1       	rjmp	.+726    	; 0x2562 <main+0x164a>
    228c:	82 e0       	ldi	r24, 0x02	; 2
    228e:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    2292:	88 23       	and	r24, r24
    2294:	09 f4       	brne	.+2      	; 0x2298 <main+0x1380>
    2296:	65 c1       	rjmp	.+714    	; 0x2562 <main+0x164a>
			lcd_goto_xy(7,0);
    2298:	87 e0       	ldi	r24, 0x07	; 7
    229a:	60 e0       	ldi	r22, 0x00	; 0
    229c:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
			serial_print_string("DEBUG");
    22a0:	8c e6       	ldi	r24, 0x6C	; 108
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9d 83       	std	Y+5, r25	; 0x05
    22ae:	8c 83       	std	Y+4, r24	; 0x04
    22b0:	80 91 33 04 	lds	r24, 0x0433
    22b4:	80 62       	ori	r24, 0x20	; 32
    22b6:	80 93 33 04 	sts	0x0433, r24
    22ba:	44 24       	eor	r4, r4
    22bc:	55 24       	eor	r5, r5
    22be:	22 24       	eor	r2, r2
    22c0:	23 94       	inc	r2
    22c2:	33 24       	eor	r3, r3
    22c4:	33 94       	inc	r3
    22c6:	88 24       	eor	r8, r8
    22c8:	99 24       	eor	r9, r9
    22ca:	66 24       	eor	r6, r6
    22cc:	77 24       	eor	r7, r7
    22ce:	1a 8e       	std	Y+26, r1	; 0x1a
    22d0:	19 8e       	std	Y+25, r1	; 0x19
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    22d2:	84 e4       	ldi	r24, 0x44	; 68
    22d4:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    22de:	85 e4       	ldi	r24, 0x45	; 69
    22e0:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    22e4:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    22e8:	80 93 2e 04 	sts	0x042E, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    22ec:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    22f0:	80 93 31 04 	sts	0x0431, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    22f4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    22f8:	81 14       	cp	r8, r1
    22fa:	91 04       	cpc	r9, r1
    22fc:	b1 f0       	breq	.+44     	; 0x232a <main+0x1412>
    22fe:	33 20       	and	r3, r3
    2300:	a1 f0       	breq	.+40     	; 0x232a <main+0x1412>
					lcd_goto_xy(6,1);
    2302:	86 e0       	ldi	r24, 0x06	; 6
    2304:	61 e0       	ldi	r22, 0x01	; 1
    2306:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
					serial_print_string("     ");
    230a:	8a e5       	ldi	r24, 0x5A	; 90
    230c:	93 e0       	ldi	r25, 0x03	; 3
    230e:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
					lcd_goto_xy(0,1);
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	61 e0       	ldi	r22, 0x01	; 1
    2316:	0e 94 a5 14 	call	0x294a	; 0x294a <lcd_goto_xy>
					serial_print_string("STATE ");
    231a:	80 e6       	ldi	r24, 0x60	; 96
    231c:	93 e0       	ldi	r25, 0x03	; 3
    231e:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
					serial_print_int(state);
    2322:	c4 01       	movw	r24, r8
    2324:	0e 94 6e 07 	call	0xedc	; 0xedc <serial_print_int>
    2328:	33 24       	eor	r3, r3
					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    232a:	c3 01       	movw	r24, r6
    232c:	be 01       	movw	r22, r28
    232e:	64 5f       	subi	r22, 0xF4	; 244
    2330:	7f 4f       	sbci	r23, 0xFF	; 255
    2332:	0e 94 0b 03 	call	0x616	; 0x616 <button_debounce>
    2336:	18 2f       	mov	r17, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    2338:	c4 01       	movw	r24, r8
    233a:	61 2f       	mov	r22, r17
    233c:	a3 01       	movw	r20, r6
    233e:	92 01       	movw	r18, r4
    2340:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <init_trans>
    2344:	88 23       	and	r24, r24
    2346:	39 f0       	breq	.+14     	; 0x2356 <main+0x143e>
    2348:	23 01       	movw	r4, r6
    234a:	10 e0       	ldi	r17, 0x00	; 0
    234c:	33 24       	eor	r3, r3
    234e:	33 94       	inc	r3
    2350:	37 e2       	ldi	r19, 0x27	; 39
    2352:	83 2e       	mov	r8, r19
    2354:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    2356:	c4 01       	movw	r24, r8
    2358:	b3 01       	movw	r22, r6
    235a:	a2 01       	movw	r20, r4
    235c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <firstB_trans>
    2360:	88 23       	and	r24, r24
    2362:	71 f4       	brne	.+28     	; 0x2380 <main+0x1468>
					state = WAIT;
					if(state != B1STOP1 && state != CLEAN1_3)
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    2364:	90 e1       	ldi	r25, 0x10	; 16
    2366:	89 16       	cp	r8, r25
    2368:	91 04       	cpc	r9, r1
    236a:	81 f4       	brne	.+32     	; 0x238c <main+0x1474>
    236c:	93 01       	movw	r18, r6
    236e:	24 19       	sub	r18, r4
    2370:	35 09       	sbc	r19, r5
    2372:	80 91 90 03 	lds	r24, 0x0390
    2376:	90 91 91 03 	lds	r25, 0x0391
    237a:	82 17       	cp	r24, r18
    237c:	93 07       	cpc	r25, r19
    237e:	34 f4       	brge	.+12     	; 0x238c <main+0x1474>
    2380:	23 01       	movw	r4, r6
    2382:	33 24       	eor	r3, r3
    2384:	33 94       	inc	r3
    2386:	27 e2       	ldi	r18, 0x27	; 39
    2388:	82 2e       	mov	r8, r18
    238a:	91 2c       	mov	r9, r1
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    238c:	c4 01       	movw	r24, r8
    238e:	b3 01       	movw	r22, r6
    2390:	a2 01       	movw	r20, r4
    2392:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <secondB_trans>
    2396:	88 23       	and	r24, r24
    2398:	31 f0       	breq	.+12     	; 0x23a6 <main+0x148e>
    239a:	23 01       	movw	r4, r6
    239c:	33 24       	eor	r3, r3
    239e:	33 94       	inc	r3
    23a0:	97 e2       	ldi	r25, 0x27	; 39
    23a2:	89 2e       	mov	r8, r25
    23a4:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}
				
				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    23a6:	c4 01       	movw	r24, r8
    23a8:	b3 01       	movw	r22, r6
    23aa:	a2 01       	movw	r20, r4
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	0e 94 1b 05 	call	0xa36	; 0xa36 <dry_trans>
    23b4:	88 23       	and	r24, r24
    23b6:	21 f0       	breq	.+8      	; 0x23c0 <main+0x14a8>
    23b8:	23 01       	movw	r4, r6
    23ba:	33 24       	eor	r3, r3
    23bc:	33 94       	inc	r3
    23be:	11 c0       	rjmp	.+34     	; 0x23e2 <main+0x14ca>
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    23c0:	25 e2       	ldi	r18, 0x25	; 37
    23c2:	82 16       	cp	r8, r18
    23c4:	91 04       	cpc	r9, r1
    23c6:	49 f4       	brne	.+18     	; 0x23da <main+0x14c2>
    23c8:	c3 01       	movw	r24, r6
    23ca:	84 19       	sub	r24, r4
    23cc:	95 09       	sbc	r25, r5
    23ce:	0b 97       	sbiw	r24, 0x0b	; 11
    23d0:	54 f1       	brlt	.+84     	; 0x2426 <main+0x150e>
    23d2:	86 e2       	ldi	r24, 0x26	; 38
    23d4:	88 2e       	mov	r8, r24
    23d6:	91 2c       	mov	r9, r1
    23d8:	26 c0       	rjmp	.+76     	; 0x2426 <main+0x150e>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    23da:	37 e2       	ldi	r19, 0x27	; 39
    23dc:	83 16       	cp	r8, r19
    23de:	91 04       	cpc	r9, r1
    23e0:	11 f5       	brne	.+68     	; 0x2426 <main+0x150e>
    23e2:	11 23       	and	r17, r17
    23e4:	21 f4       	brne	.+8      	; 0x23ee <main+0x14d6>
    23e6:	07 e2       	ldi	r16, 0x27	; 39
    23e8:	80 2e       	mov	r8, r16
    23ea:	91 2c       	mov	r9, r1
    23ec:	12 c0       	rjmp	.+36     	; 0x2412 <main+0x14fa>
					state = ++last;
    23ee:	69 8d       	ldd	r22, Y+25	; 0x19
    23f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23f2:	6f 5f       	subi	r22, 0xFF	; 255
    23f4:	7f 4f       	sbci	r23, 0xFF	; 255
    23f6:	7a 8f       	std	Y+26, r23	; 0x1a
    23f8:	69 8f       	std	Y+25, r22	; 0x19
				}


				//state actions
						
				if(state == WAIT){
    23fa:	67 32       	cpi	r22, 0x27	; 39
    23fc:	71 05       	cpc	r23, r1
    23fe:	21 f0       	breq	.+8      	; 0x2408 <main+0x14f0>
    2400:	4b 01       	movw	r8, r22
    2402:	33 24       	eor	r3, r3
    2404:	33 94       	inc	r3
    2406:	0f c0       	rjmp	.+30     	; 0x2426 <main+0x150e>
    2408:	17 e2       	ldi	r17, 0x27	; 39
    240a:	81 2e       	mov	r8, r17
    240c:	91 2c       	mov	r9, r1
    240e:	33 24       	eor	r3, r3
    2410:	33 94       	inc	r3
					plateLoadMotor = 0;
    2412:	1b 82       	std	Y+3, r1	; 0x03
    2414:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    2416:	1d 82       	std	Y+5, r1	; 0x05
    2418:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    241a:	1f 82       	std	Y+7, r1	; 0x07
    241c:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    241e:	19 86       	std	Y+9, r1	; 0x09
    2420:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    2422:	1b 86       	std	Y+11, r1	; 0x0b
    2424:	1a 86       	std	Y+10, r1	; 0x0a
				}
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    2426:	c4 01       	movw	r24, r8
    2428:	b3 01       	movw	r22, r6
    242a:	ae 01       	movw	r20, r28
    242c:	4e 5f       	subi	r20, 0xFE	; 254
    242e:	5f 4f       	sbci	r21, 0xFF	; 255
    2430:	9e 01       	movw	r18, r28
    2432:	2c 5f       	subi	r18, 0xFC	; 252
    2434:	3f 4f       	sbci	r19, 0xFF	; 255
    2436:	8e 01       	movw	r16, r28
    2438:	0a 5f       	subi	r16, 0xFA	; 250
    243a:	1f 4f       	sbci	r17, 0xFF	; 255
    243c:	b8 e0       	ldi	r27, 0x08	; 8
    243e:	eb 2e       	mov	r14, r27
    2440:	f1 2c       	mov	r15, r1
    2442:	ec 0e       	add	r14, r28
    2444:	fd 1e       	adc	r15, r29
    2446:	aa e0       	ldi	r26, 0x0A	; 10
    2448:	ca 2e       	mov	r12, r26
    244a:	d1 2c       	mov	r13, r1
    244c:	cc 0e       	add	r12, r28
    244e:	dd 1e       	adc	r13, r29
    2450:	5e 01       	movw	r10, r28
    2452:	08 94       	sec
    2454:	a1 1c       	adc	r10, r1
    2456:	b1 1c       	adc	r11, r1
    2458:	0e 94 c1 06 	call	0xd82	; 0xd82 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    245c:	c4 01       	movw	r24, r8
    245e:	b3 01       	movw	r22, r6
    2460:	ae 01       	movw	r20, r28
    2462:	4e 5f       	subi	r20, 0xFE	; 254
    2464:	5f 4f       	sbci	r21, 0xFF	; 255
    2466:	9e 01       	movw	r18, r28
    2468:	2c 5f       	subi	r18, 0xFC	; 252
    246a:	3f 4f       	sbci	r19, 0xFF	; 255
    246c:	8e 01       	movw	r16, r28
    246e:	0a 5f       	subi	r16, 0xFA	; 250
    2470:	1f 4f       	sbci	r17, 0xFF	; 255
    2472:	f8 e0       	ldi	r31, 0x08	; 8
    2474:	ef 2e       	mov	r14, r31
    2476:	f1 2c       	mov	r15, r1
    2478:	ec 0e       	add	r14, r28
    247a:	fd 1e       	adc	r15, r29
    247c:	ea e0       	ldi	r30, 0x0A	; 10
    247e:	ce 2e       	mov	r12, r30
    2480:	d1 2c       	mov	r13, r1
    2482:	cc 0e       	add	r12, r28
    2484:	dd 1e       	adc	r13, r29
    2486:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    248a:	70 e1       	ldi	r23, 0x10	; 16
    248c:	87 16       	cp	r8, r23
    248e:	91 04       	cpc	r9, r1
    2490:	51 f4       	brne	.+20     	; 0x24a6 <main+0x158e>
					brush1Motor = 0;
    2492:	1f 82       	std	Y+7, r1	; 0x07
    2494:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    2496:	1d 82       	std	Y+5, r1	; 0x05
    2498:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    249a:	80 91 32 04 	lds	r24, 0x0432
    249e:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    24a0:	80 62       	ori	r24, 0x20	; 32
    24a2:	80 93 32 04 	sts	0x0432, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    24a6:	c4 01       	movw	r24, r8
    24a8:	b3 01       	movw	r22, r6
    24aa:	ae 01       	movw	r20, r28
    24ac:	4e 5f       	subi	r20, 0xFE	; 254
    24ae:	5f 4f       	sbci	r21, 0xFF	; 255
    24b0:	9e 01       	movw	r18, r28
    24b2:	2c 5f       	subi	r18, 0xFC	; 252
    24b4:	3f 4f       	sbci	r19, 0xFF	; 255
    24b6:	8e 01       	movw	r16, r28
    24b8:	0a 5f       	subi	r16, 0xFA	; 250
    24ba:	1f 4f       	sbci	r17, 0xFF	; 255
    24bc:	b8 e0       	ldi	r27, 0x08	; 8
    24be:	eb 2e       	mov	r14, r27
    24c0:	f1 2c       	mov	r15, r1
    24c2:	ec 0e       	add	r14, r28
    24c4:	fd 1e       	adc	r15, r29
    24c6:	aa e0       	ldi	r26, 0x0A	; 10
    24c8:	ca 2e       	mov	r12, r26
    24ca:	d1 2c       	mov	r13, r1
    24cc:	cc 0e       	add	r12, r28
    24ce:	dd 1e       	adc	r13, r29
    24d0:	0e 94 cc 01 	call	0x398	; 0x398 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    24d4:	c4 01       	movw	r24, r8
    24d6:	b3 01       	movw	r22, r6
    24d8:	ae 01       	movw	r20, r28
    24da:	4e 5f       	subi	r20, 0xFE	; 254
    24dc:	5f 4f       	sbci	r21, 0xFF	; 255
    24de:	9e 01       	movw	r18, r28
    24e0:	2c 5f       	subi	r18, 0xFC	; 252
    24e2:	3f 4f       	sbci	r19, 0xFF	; 255
    24e4:	8e 01       	movw	r16, r28
    24e6:	0a 5f       	subi	r16, 0xFA	; 250
    24e8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ea:	f8 e0       	ldi	r31, 0x08	; 8
    24ec:	ef 2e       	mov	r14, r31
    24ee:	f1 2c       	mov	r15, r1
    24f0:	ec 0e       	add	r14, r28
    24f2:	fd 1e       	adc	r15, r29
    24f4:	ea e0       	ldi	r30, 0x0A	; 10
    24f6:	ce 2e       	mov	r12, r30
    24f8:	d1 2c       	mov	r13, r1
    24fa:	cc 0e       	add	r12, r28
    24fc:	dd 1e       	adc	r13, r29
    24fe:	0e 94 57 02 	call	0x4ae	; 0x4ae <dry_action>
				if(state == END){
    2502:	85 e2       	ldi	r24, 0x25	; 37
    2504:	88 16       	cp	r8, r24
    2506:	91 04       	cpc	r9, r1
    2508:	71 f4       	brne	.+28     	; 0x2526 <main+0x160e>
					plateLoadMotor = 0;
    250a:	1b 82       	std	Y+3, r1	; 0x03
    250c:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    250e:	80 91 33 04 	lds	r24, 0x0433
    2512:	8b 7f       	andi	r24, 0xFB	; 251
    2514:	80 93 33 04 	sts	0x0433, r24
					if(print35 == 1){
    2518:	22 20       	and	r2, r2
    251a:	29 f0       	breq	.+10     	; 0x2526 <main+0x160e>
						//clear();
						serial_print_string("END OF CYCLE");
    251c:	87 e6       	ldi	r24, 0x67	; 103
    251e:	93 e0       	ldi	r25, 0x03	; 3
    2520:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
    2524:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    2526:	2a 81       	ldd	r18, Y+2	; 0x02
    2528:	3b 81       	ldd	r19, Y+3	; 0x03
    252a:	0c 81       	ldd	r16, Y+4	; 0x04
    252c:	1d 81       	ldd	r17, Y+5	; 0x05
    252e:	ee 80       	ldd	r14, Y+6	; 0x06
    2530:	ff 80       	ldd	r15, Y+7	; 0x07
    2532:	c8 84       	ldd	r12, Y+8	; 0x08
    2534:	d9 84       	ldd	r13, Y+9	; 0x09
    2536:	aa 84       	ldd	r10, Y+10	; 0x0a
    2538:	bb 84       	ldd	r11, Y+11	; 0x0b
    253a:	c3 01       	movw	r24, r6
    253c:	b2 01       	movw	r22, r4
    253e:	40 e0       	ldi	r20, 0x00	; 0
    2540:	50 e0       	ldi	r21, 0x00	; 0
    2542:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <motor_and_write>

				serial_check(); counter++;
    2546:	0e 94 a4 1c 	call	0x3948	; 0x3948 <serial_check>
				delay_ms(1);
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    2552:	96 e2       	ldi	r25, 0x26	; 38
    2554:	89 16       	cp	r8, r25
    2556:	91 04       	cpc	r9, r1
    2558:	21 f0       	breq	.+8      	; 0x2562 <main+0x164a>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    255a:	08 94       	sec
    255c:	61 1c       	adc	r6, r1
    255e:	71 1c       	adc	r7, r1
    2560:	b8 ce       	rjmp	.-656    	; 0x22d2 <main+0x13ba>
				delay_ms(1);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2562:	80 91 33 04 	lds	r24, 0x0433
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2566:	8b 7d       	andi	r24, 0xDB	; 219
    2568:	80 93 33 04 	sts	0x0433, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    256c:	80 91 2f 04 	lds	r24, 0x042F
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    2570:	86 7b       	andi	r24, 0xB6	; 182
    2572:	80 93 2f 04 	sts	0x042F, r24
		
		i2c_start(I2C1+I2C_WRITE);
    2576:	80 e4       	ldi	r24, 0x40	; 64
    2578:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    2582:	80 91 33 04 	lds	r24, 0x0433
    2586:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    258a:	80 91 2f 04 	lds	r24, 0x042F
    258e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    2592:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	}
	serial_print_string("END");
    2596:	8c e8       	ldi	r24, 0x8C	; 140
    2598:	93 e0       	ldi	r25, 0x03	; 3
    259a:	0e 94 ab 06 	call	0xd56	; 0xd56 <serial_print_string>
    259e:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <main+0x3e>
	}
    25a2:	2f ef       	ldi	r18, 0xFF	; 255
    25a4:	3f ef       	ldi	r19, 0xFF	; 255
    25a6:	38 8f       	std	Y+24, r19	; 0x18
    25a8:	2f 8b       	std	Y+23, r18	; 0x17
    25aa:	12 01       	movw	r2, r4
    25ac:	99 24       	eor	r9, r9
    25ae:	93 94       	inc	r9
    25b0:	8c e2       	ldi	r24, 0x2C	; 44
    25b2:	68 2e       	mov	r6, r24
    25b4:	71 2c       	mov	r7, r1
    25b6:	14 ca       	rjmp	.-3032   	; 0x19e0 <main+0xac8>

000025b8 <_ZN12OrangutanLCDC2Ev>:
    25b8:	08 95       	ret

000025ba <_ZN12OrangutanLCDC1Ev>:
    25ba:	08 95       	ret

000025bc <void_getchar>:
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	08 95       	ret

000025c2 <_ZN12OrangutanLCD8busyWaitEv>:
    25c2:	ef 92       	push	r14
    25c4:	ff 92       	push	r15
    25c6:	0f 93       	push	r16
    25c8:	1f 93       	push	r17
    25ca:	67 b1       	in	r22, 0x07	; 7
    25cc:	3d 98       	cbi	0x07, 5	; 7
    25ce:	28 98       	cbi	0x05, 0	; 5
    25d0:	29 9a       	sbi	0x05, 1	; 5
    25d2:	e0 90 fe 03 	lds	r14, 0x03FE
    25d6:	f0 90 ff 03 	lds	r15, 0x03FF
    25da:	00 91 00 04 	lds	r16, 0x0400
    25de:	10 91 01 04 	lds	r17, 0x0401
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	41 e0       	ldi	r20, 0x01	; 1
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	ca 01       	movw	r24, r20
    25ec:	6f 93       	push	r22
    25ee:	64 e0       	ldi	r22, 0x04	; 4
    25f0:	6a 95       	dec	r22
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    25f4:	6f 91       	pop	r22
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	c9 f7       	brne	.-14     	; 0x25ec <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    25fa:	2a 9a       	sbi	0x05, 2	; 5
    25fc:	ca 01       	movw	r24, r20
    25fe:	6f 93       	push	r22
    2600:	64 e0       	ldi	r22, 0x04	; 4
    2602:	6a 95       	dec	r22
    2604:	f1 f7       	brne	.-4      	; 0x2602 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    2606:	6f 91       	pop	r22
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	c9 f7       	brne	.-14     	; 0x25fe <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    260c:	86 b1       	in	r24, 0x06	; 6
    260e:	2a 98       	cbi	0x05, 2	; 5
    2610:	fa 01       	movw	r30, r20
    2612:	6f 93       	push	r22
    2614:	64 e0       	ldi	r22, 0x04	; 4
    2616:	6a 95       	dec	r22
    2618:	f1 f7       	brne	.-4      	; 0x2616 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    261a:	6f 91       	pop	r22
    261c:	31 97       	sbiw	r30, 0x01	; 1
    261e:	c9 f7       	brne	.-14     	; 0x2612 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    2620:	2a 9a       	sbi	0x05, 2	; 5
    2622:	fa 01       	movw	r30, r20
    2624:	6f 93       	push	r22
    2626:	64 e0       	ldi	r22, 0x04	; 4
    2628:	6a 95       	dec	r22
    262a:	f1 f7       	brne	.-4      	; 0x2628 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    262c:	6f 91       	pop	r22
    262e:	31 97       	sbiw	r30, 0x01	; 1
    2630:	c9 f7       	brne	.-14     	; 0x2624 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    2632:	2a 98       	cbi	0x05, 2	; 5
    2634:	2c 5f       	subi	r18, 0xFC	; 252
    2636:	3f 4f       	sbci	r19, 0xFF	; 255
    2638:	85 ff       	sbrs	r24, 5
    263a:	09 c0       	rjmp	.+18     	; 0x264e <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    263c:	c9 01       	movw	r24, r18
    263e:	a0 e0       	ldi	r26, 0x00	; 0
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	8e 15       	cp	r24, r14
    2644:	9f 05       	cpc	r25, r15
    2646:	a0 07       	cpc	r26, r16
    2648:	b1 07       	cpc	r27, r17
    264a:	08 f4       	brcc	.+2      	; 0x264e <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    264c:	ce cf       	rjmp	.-100    	; 0x25ea <_ZN12OrangutanLCD8busyWaitEv+0x28>
    264e:	c9 01       	movw	r24, r18
    2650:	a0 e0       	ldi	r26, 0x00	; 0
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	8e 15       	cp	r24, r14
    2656:	9f 05       	cpc	r25, r15
    2658:	a0 07       	cpc	r26, r16
    265a:	b1 07       	cpc	r27, r17
    265c:	28 f0       	brcs	.+10     	; 0x2668 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    265e:	82 e3       	ldi	r24, 0x32	; 50
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	a0 e0       	ldi	r26, 0x00	; 0
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	04 c0       	rjmp	.+8      	; 0x2670 <_ZN12OrangutanLCD8busyWaitEv+0xae>
    2668:	80 e3       	ldi	r24, 0x30	; 48
    266a:	95 e7       	ldi	r25, 0x75	; 117
    266c:	a0 e0       	ldi	r26, 0x00	; 0
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	80 93 fe 03 	sts	0x03FE, r24
    2674:	90 93 ff 03 	sts	0x03FF, r25
    2678:	a0 93 00 04 	sts	0x0400, r26
    267c:	b0 93 01 04 	sts	0x0401, r27
    2680:	67 b9       	out	0x07, r22	; 7
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	ff 90       	pop	r15
    2688:	ef 90       	pop	r14
    268a:	08 95       	ret

0000268c <_ZN12OrangutanLCD8sendDataEh>:
    268c:	28 b1       	in	r18, 0x08	; 8
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	8f 70       	andi	r24, 0x0F	; 15
    2692:	90 70       	andi	r25, 0x00	; 0
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	23 7c       	andi	r18, 0xC3	; 195
    269e:	28 2b       	or	r18, r24
    26a0:	28 b9       	out	0x08, r18	; 8
    26a2:	2a 9a       	sbi	0x05, 2	; 5
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	fc 01       	movw	r30, r24
    26aa:	6f 93       	push	r22
    26ac:	64 e0       	ldi	r22, 0x04	; 4
    26ae:	6a 95       	dec	r22
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <_ZN12OrangutanLCD8sendDataEh+0x22>
    26b2:	6f 91       	pop	r22
    26b4:	31 97       	sbiw	r30, 0x01	; 1
    26b6:	c9 f7       	brne	.-14     	; 0x26aa <_ZN12OrangutanLCD8sendDataEh+0x1e>
    26b8:	2a 98       	cbi	0x05, 2	; 5
    26ba:	6f 93       	push	r22
    26bc:	64 e0       	ldi	r22, 0x04	; 4
    26be:	6a 95       	dec	r22
    26c0:	f1 f7       	brne	.-4      	; 0x26be <_ZN12OrangutanLCD8sendDataEh+0x32>
    26c2:	6f 91       	pop	r22
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	c9 f7       	brne	.-14     	; 0x26ba <_ZN12OrangutanLCD8sendDataEh+0x2e>
    26c8:	08 95       	ret

000026ca <_ZN12OrangutanLCD10initPrintfEv>:
    26ca:	80 91 fa 03 	lds	r24, 0x03FA
    26ce:	90 91 fb 03 	lds	r25, 0x03FB
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	11 f0       	breq	.+4      	; 0x26da <_ZN12OrangutanLCD10initPrintfEv+0x10>
    26d6:	0e 94 98 20 	call	0x4130	; 0x4130 <free>
    26da:	80 91 c8 03 	lds	r24, 0x03C8
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	20 91 c9 03 	lds	r18, 0x03C9
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	ac 01       	movw	r20, r24
    26ea:	42 9f       	mul	r20, r18
    26ec:	c0 01       	movw	r24, r0
    26ee:	43 9f       	mul	r20, r19
    26f0:	90 0d       	add	r25, r0
    26f2:	52 9f       	mul	r21, r18
    26f4:	90 0d       	add	r25, r0
    26f6:	11 24       	eor	r1, r1
    26f8:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <malloc>
    26fc:	90 93 fb 03 	sts	0x03FB, r25
    2700:	80 93 fa 03 	sts	0x03FA, r24
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	29 f1       	breq	.+74     	; 0x2752 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	70 e2       	ldi	r23, 0x20	; 32
    270c:	08 c0       	rjmp	.+16     	; 0x271e <_ZN12OrangutanLCD10initPrintfEv+0x54>
    270e:	e0 91 fa 03 	lds	r30, 0x03FA
    2712:	f0 91 fb 03 	lds	r31, 0x03FB
    2716:	e4 0f       	add	r30, r20
    2718:	f5 1f       	adc	r31, r21
    271a:	70 83       	st	Z, r23
    271c:	6f 5f       	subi	r22, 0xFF	; 255
    271e:	46 2f       	mov	r20, r22
    2720:	50 e0       	ldi	r21, 0x00	; 0
    2722:	80 91 c8 03 	lds	r24, 0x03C8
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	20 91 c9 03 	lds	r18, 0x03C9
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	fc 01       	movw	r30, r24
    2732:	e2 9f       	mul	r30, r18
    2734:	c0 01       	movw	r24, r0
    2736:	e3 9f       	mul	r30, r19
    2738:	90 0d       	add	r25, r0
    273a:	f2 9f       	mul	r31, r18
    273c:	90 0d       	add	r25, r0
    273e:	11 24       	eor	r1, r1
    2740:	48 17       	cp	r20, r24
    2742:	59 07       	cpc	r21, r25
    2744:	24 f3       	brlt	.-56     	; 0x270e <_ZN12OrangutanLCD10initPrintfEv+0x44>
    2746:	8d ec       	ldi	r24, 0xCD	; 205
    2748:	95 e1       	ldi	r25, 0x15	; 21
    274a:	6e ed       	ldi	r22, 0xDE	; 222
    274c:	72 e1       	ldi	r23, 0x12	; 18
    274e:	0e 94 11 21 	call	0x4222	; 0x4222 <fdevopen>
    2752:	08 95       	ret

00002754 <_ZN12OrangutanLCD10initPrintfEhh>:
    2754:	80 93 c9 03 	sts	0x03C9, r24
    2758:	60 93 c8 03 	sts	0x03C8, r22
    275c:	0e 94 65 13 	call	0x26ca	; 0x26ca <_ZN12OrangutanLCD10initPrintfEv>
    2760:	08 95       	ret

00002762 <lcd_init_printf_with_dimensions>:
    2762:	80 93 c9 03 	sts	0x03C9, r24
    2766:	60 93 c8 03 	sts	0x03C8, r22
    276a:	0e 94 65 13 	call	0x26ca	; 0x26ca <_ZN12OrangutanLCD10initPrintfEv>
    276e:	08 95       	ret

00002770 <lcd_init_printf>:
    2770:	0e 94 65 13 	call	0x26ca	; 0x26ca <_ZN12OrangutanLCD10initPrintfEv>
    2774:	08 95       	ret

00002776 <_ZN12OrangutanLCD5init2Ev>:
    2776:	3d 98       	cbi	0x07, 5	; 7
    2778:	45 9a       	sbi	0x08, 5	; 8
    277a:	80 e3       	ldi	r24, 0x30	; 48
    277c:	95 e7       	ldi	r25, 0x75	; 117
    277e:	a0 e0       	ldi	r26, 0x00	; 0
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	80 93 fe 03 	sts	0x03FE, r24
    2786:	90 93 ff 03 	sts	0x03FF, r25
    278a:	a0 93 00 04 	sts	0x0400, r26
    278e:	b0 93 01 04 	sts	0x0401, r27
    2792:	20 9a       	sbi	0x04, 0	; 4
    2794:	21 9a       	sbi	0x04, 1	; 4
    2796:	22 9a       	sbi	0x04, 2	; 4
    2798:	8e e1       	ldi	r24, 0x1E	; 30
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>
    27a0:	83 e0       	ldi	r24, 0x03	; 3
    27a2:	0e 94 13 17 	call	0x2e26	; 0x2e26 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    27a6:	86 e0       	ldi	r24, 0x06	; 6
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>
    27ae:	83 e0       	ldi	r24, 0x03	; 3
    27b0:	0e 94 13 17 	call	0x2e26	; 0x2e26 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    27b4:	82 e0       	ldi	r24, 0x02	; 2
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>
    27bc:	83 e0       	ldi	r24, 0x03	; 3
    27be:	0e 94 13 17 	call	0x2e26	; 0x2e26 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    27c2:	82 e0       	ldi	r24, 0x02	; 2
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>
    27ca:	82 e0       	ldi	r24, 0x02	; 2
    27cc:	0e 94 13 17 	call	0x2e26	; 0x2e26 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    27d0:	82 e0       	ldi	r24, 0x02	; 2
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>
    27d8:	88 e2       	ldi	r24, 0x28	; 40
    27da:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN12OrangutanLCD8send_cmdEh>
    27de:	88 e0       	ldi	r24, 0x08	; 8
    27e0:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN12OrangutanLCD8send_cmdEh>
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN12OrangutanLCD8send_cmdEh>
    27ea:	86 e0       	ldi	r24, 0x06	; 6
    27ec:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN12OrangutanLCD8send_cmdEh>
    27f0:	8c e0       	ldi	r24, 0x0C	; 12
    27f2:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN12OrangutanLCD8send_cmdEh>
    27f6:	08 95       	ret

000027f8 <_ZN12OrangutanLCD4initEv>:
    27f8:	80 91 02 04 	lds	r24, 0x0402
    27fc:	88 23       	and	r24, r24
    27fe:	29 f4       	brne	.+10     	; 0x280a <_ZN12OrangutanLCD4initEv+0x12>
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	80 93 02 04 	sts	0x0402, r24
    2806:	0e 94 bb 13 	call	0x2776	; 0x2776 <_ZN12OrangutanLCD5init2Ev>
    280a:	08 95       	ret

0000280c <_ZN12OrangutanLCD4sendEhhh>:
    280c:	ff 92       	push	r15
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	08 2f       	mov	r16, r24
    2814:	16 2f       	mov	r17, r22
    2816:	f4 2e       	mov	r15, r20
    2818:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_ZN12OrangutanLCD4initEv>
    281c:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_ZN12OrangutanLCD8busyWaitEv>
    2820:	37 b1       	in	r19, 0x07	; 7
    2822:	28 b1       	in	r18, 0x08	; 8
    2824:	29 98       	cbi	0x05, 1	; 5
    2826:	11 23       	and	r17, r17
    2828:	11 f0       	breq	.+4      	; 0x282e <_ZN12OrangutanLCD4sendEhhh+0x22>
    282a:	28 9a       	sbi	0x05, 0	; 5
    282c:	01 c0       	rjmp	.+2      	; 0x2830 <_ZN12OrangutanLCD4sendEhhh+0x24>
    282e:	28 98       	cbi	0x05, 0	; 5
    2830:	87 b1       	in	r24, 0x07	; 7
    2832:	8c 63       	ori	r24, 0x3C	; 60
    2834:	87 b9       	out	0x07, r24	; 7
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	f8 16       	cp	r15, r24
    283a:	e1 f0       	breq	.+56     	; 0x2874 <_ZN12OrangutanLCD4sendEhhh+0x68>
    283c:	88 b1       	in	r24, 0x08	; 8
    283e:	90 2f       	mov	r25, r16
    2840:	92 95       	swap	r25
    2842:	9f 70       	andi	r25, 0x0F	; 15
    2844:	99 0f       	add	r25, r25
    2846:	99 0f       	add	r25, r25
    2848:	83 7c       	andi	r24, 0xC3	; 195
    284a:	98 2b       	or	r25, r24
    284c:	98 b9       	out	0x08, r25	; 8
    284e:	2a 9a       	sbi	0x05, 2	; 5
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	fc 01       	movw	r30, r24
    2856:	6f 93       	push	r22
    2858:	64 e0       	ldi	r22, 0x04	; 4
    285a:	6a 95       	dec	r22
    285c:	f1 f7       	brne	.-4      	; 0x285a <_ZN12OrangutanLCD4sendEhhh+0x4e>
    285e:	6f 91       	pop	r22
    2860:	31 97       	sbiw	r30, 0x01	; 1
    2862:	c9 f7       	brne	.-14     	; 0x2856 <_ZN12OrangutanLCD4sendEhhh+0x4a>
    2864:	2a 98       	cbi	0x05, 2	; 5
    2866:	6f 93       	push	r22
    2868:	64 e0       	ldi	r22, 0x04	; 4
    286a:	6a 95       	dec	r22
    286c:	f1 f7       	brne	.-4      	; 0x286a <_ZN12OrangutanLCD4sendEhhh+0x5e>
    286e:	6f 91       	pop	r22
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	c9 f7       	brne	.-14     	; 0x2866 <_ZN12OrangutanLCD4sendEhhh+0x5a>
    2874:	88 b1       	in	r24, 0x08	; 8
    2876:	0f 70       	andi	r16, 0x0F	; 15
    2878:	00 0f       	add	r16, r16
    287a:	00 0f       	add	r16, r16
    287c:	83 7c       	andi	r24, 0xC3	; 195
    287e:	80 2b       	or	r24, r16
    2880:	88 b9       	out	0x08, r24	; 8
    2882:	2a 9a       	sbi	0x05, 2	; 5
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	fc 01       	movw	r30, r24
    288a:	6f 93       	push	r22
    288c:	64 e0       	ldi	r22, 0x04	; 4
    288e:	6a 95       	dec	r22
    2890:	f1 f7       	brne	.-4      	; 0x288e <_ZN12OrangutanLCD4sendEhhh+0x82>
    2892:	6f 91       	pop	r22
    2894:	31 97       	sbiw	r30, 0x01	; 1
    2896:	c9 f7       	brne	.-14     	; 0x288a <_ZN12OrangutanLCD4sendEhhh+0x7e>
    2898:	2a 98       	cbi	0x05, 2	; 5
    289a:	6f 93       	push	r22
    289c:	64 e0       	ldi	r22, 0x04	; 4
    289e:	6a 95       	dec	r22
    28a0:	f1 f7       	brne	.-4      	; 0x289e <_ZN12OrangutanLCD4sendEhhh+0x92>
    28a2:	6f 91       	pop	r22
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	c9 f7       	brne	.-14     	; 0x289a <_ZN12OrangutanLCD4sendEhhh+0x8e>
    28a8:	37 b9       	out	0x07, r19	; 7
    28aa:	28 b9       	out	0x08, r18	; 8
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	ff 90       	pop	r15
    28b2:	08 95       	ret

000028b4 <_ZN12OrangutanLCD8send_cmdEh>:
    28b4:	60 e0       	ldi	r22, 0x00	; 0
    28b6:	42 e0       	ldi	r20, 0x02	; 2
    28b8:	0e 94 06 14 	call	0x280c	; 0x280c <_ZN12OrangutanLCD4sendEhhh>
    28bc:	08 95       	ret

000028be <_ZN12OrangutanLCD10moveCursorEhh>:
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
    28c2:	08 2f       	mov	r16, r24
    28c4:	16 2f       	mov	r17, r22
    28c6:	08 c0       	rjmp	.+16     	; 0x28d8 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    28c8:	00 23       	and	r16, r16
    28ca:	11 f4       	brne	.+4      	; 0x28d0 <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    28cc:	80 e1       	ldi	r24, 0x10	; 16
    28ce:	01 c0       	rjmp	.+2      	; 0x28d2 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    28d0:	84 e1       	ldi	r24, 0x14	; 20
    28d2:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN12OrangutanLCD8send_cmdEh>
    28d6:	11 50       	subi	r17, 0x01	; 1
    28d8:	11 23       	and	r17, r17
    28da:	b1 f7       	brne	.-20     	; 0x28c8 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    28dc:	1f 91       	pop	r17
    28de:	0f 91       	pop	r16
    28e0:	08 95       	ret

000028e2 <lcd_move_cursor>:
    28e2:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN12OrangutanLCD10moveCursorEhh>
    28e6:	08 95       	ret

000028e8 <_ZN12OrangutanLCD10hideCursorEv>:
    28e8:	8c e0       	ldi	r24, 0x0C	; 12
    28ea:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN12OrangutanLCD8send_cmdEh>
    28ee:	08 95       	ret

000028f0 <lcd_hide_cursor>:
    28f0:	0e 94 74 14 	call	0x28e8	; 0x28e8 <_ZN12OrangutanLCD10hideCursorEv>
    28f4:	08 95       	ret

000028f6 <_ZN12OrangutanLCD10showCursorEh>:
    28f6:	81 30       	cpi	r24, 0x01	; 1
    28f8:	11 f4       	brne	.+4      	; 0x28fe <_ZN12OrangutanLCD10showCursorEh+0x8>
    28fa:	8f e0       	ldi	r24, 0x0F	; 15
    28fc:	01 c0       	rjmp	.+2      	; 0x2900 <_ZN12OrangutanLCD10showCursorEh+0xa>
    28fe:	8e e0       	ldi	r24, 0x0E	; 14
    2900:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN12OrangutanLCD8send_cmdEh>
    2904:	08 95       	ret

00002906 <lcd_show_cursor>:
    2906:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <_ZN12OrangutanLCD10showCursorEh>
    290a:	08 95       	ret

0000290c <_ZN12OrangutanLCD6gotoXYEhh>:
    290c:	a4 e0       	ldi	r26, 0x04	; 4
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	ec e8       	ldi	r30, 0x8C	; 140
    2912:	f4 e1       	ldi	r31, 0x14	; 20
    2914:	0c 94 ae 1f 	jmp	0x3f5c	; 0x3f5c <__prologue_saves__+0x1c>
    2918:	18 2f       	mov	r17, r24
    291a:	06 2f       	mov	r16, r22
    291c:	80 e8       	ldi	r24, 0x80	; 128
    291e:	89 83       	std	Y+1, r24	; 0x01
    2920:	80 ec       	ldi	r24, 0xC0	; 192
    2922:	8a 83       	std	Y+2, r24	; 0x02
    2924:	84 e9       	ldi	r24, 0x94	; 148
    2926:	8b 83       	std	Y+3, r24	; 0x03
    2928:	84 ed       	ldi	r24, 0xD4	; 212
    292a:	8c 83       	std	Y+4, r24	; 0x04
    292c:	fe 01       	movw	r30, r28
    292e:	e6 0f       	add	r30, r22
    2930:	f1 1d       	adc	r31, r1
    2932:	81 81       	ldd	r24, Z+1	; 0x01
    2934:	81 0f       	add	r24, r17
    2936:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN12OrangutanLCD8send_cmdEh>
    293a:	10 93 fd 03 	sts	0x03FD, r17
    293e:	00 93 fc 03 	sts	0x03FC, r16
    2942:	24 96       	adiw	r28, 0x04	; 4
    2944:	e4 e0       	ldi	r30, 0x04	; 4
    2946:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <__epilogue_restores__+0x1c>

0000294a <lcd_goto_xy>:
    294a:	0e 94 86 14 	call	0x290c	; 0x290c <_ZN12OrangutanLCD6gotoXYEhh>
    294e:	08 95       	ret

00002950 <_ZN12OrangutanLCD5clearEv>:
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN12OrangutanLCD8send_cmdEh>
    2956:	80 91 fa 03 	lds	r24, 0x03FA
    295a:	90 91 fb 03 	lds	r25, 0x03FB
    295e:	89 2b       	or	r24, r25
    2960:	19 f1       	breq	.+70     	; 0x29a8 <_ZN12OrangutanLCD5clearEv+0x58>
    2962:	60 e0       	ldi	r22, 0x00	; 0
    2964:	70 e2       	ldi	r23, 0x20	; 32
    2966:	08 c0       	rjmp	.+16     	; 0x2978 <_ZN12OrangutanLCD5clearEv+0x28>
    2968:	e0 91 fa 03 	lds	r30, 0x03FA
    296c:	f0 91 fb 03 	lds	r31, 0x03FB
    2970:	e4 0f       	add	r30, r20
    2972:	f5 1f       	adc	r31, r21
    2974:	70 83       	st	Z, r23
    2976:	6f 5f       	subi	r22, 0xFF	; 255
    2978:	46 2f       	mov	r20, r22
    297a:	50 e0       	ldi	r21, 0x00	; 0
    297c:	80 91 c8 03 	lds	r24, 0x03C8
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	20 91 c9 03 	lds	r18, 0x03C9
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	fc 01       	movw	r30, r24
    298c:	e2 9f       	mul	r30, r18
    298e:	c0 01       	movw	r24, r0
    2990:	e3 9f       	mul	r30, r19
    2992:	90 0d       	add	r25, r0
    2994:	f2 9f       	mul	r31, r18
    2996:	90 0d       	add	r25, r0
    2998:	11 24       	eor	r1, r1
    299a:	48 17       	cp	r20, r24
    299c:	59 07       	cpc	r21, r25
    299e:	24 f3       	brlt	.-56     	; 0x2968 <_ZN12OrangutanLCD5clearEv+0x18>
    29a0:	10 92 fd 03 	sts	0x03FD, r1
    29a4:	10 92 fc 03 	sts	0x03FC, r1
    29a8:	08 95       	ret

000029aa <clear>:
    29aa:	0e 94 a8 14 	call	0x2950	; 0x2950 <_ZN12OrangutanLCD5clearEv>
    29ae:	08 95       	ret

000029b0 <_ZN12OrangutanLCD9send_dataEh>:
    29b0:	61 e0       	ldi	r22, 0x01	; 1
    29b2:	42 e0       	ldi	r20, 0x02	; 2
    29b4:	0e 94 06 14 	call	0x280c	; 0x280c <_ZN12OrangutanLCD4sendEhhh>
    29b8:	08 95       	ret

000029ba <_ZN12OrangutanLCD11printBinaryEh>:
    29ba:	0f 93       	push	r16
    29bc:	1f 93       	push	r17
    29be:	cf 93       	push	r28
    29c0:	df 93       	push	r29
    29c2:	00 e0       	ldi	r16, 0x00	; 0
    29c4:	10 e8       	ldi	r17, 0x80	; 128
    29c6:	c8 2f       	mov	r28, r24
    29c8:	d0 e0       	ldi	r29, 0x00	; 0
    29ca:	81 2f       	mov	r24, r17
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	8c 23       	and	r24, r28
    29d0:	9d 23       	and	r25, r29
    29d2:	89 2b       	or	r24, r25
    29d4:	11 f0       	breq	.+4      	; 0x29da <_ZN12OrangutanLCD11printBinaryEh+0x20>
    29d6:	81 e3       	ldi	r24, 0x31	; 49
    29d8:	01 c0       	rjmp	.+2      	; 0x29dc <_ZN12OrangutanLCD11printBinaryEh+0x22>
    29da:	80 e3       	ldi	r24, 0x30	; 48
    29dc:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN12OrangutanLCD9send_dataEh>
    29e0:	0f 5f       	subi	r16, 0xFF	; 255
    29e2:	08 30       	cpi	r16, 0x08	; 8
    29e4:	11 f0       	breq	.+4      	; 0x29ea <_ZN12OrangutanLCD11printBinaryEh+0x30>
    29e6:	16 95       	lsr	r17
    29e8:	f0 cf       	rjmp	.-32     	; 0x29ca <_ZN12OrangutanLCD11printBinaryEh+0x10>
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	1f 91       	pop	r17
    29f0:	0f 91       	pop	r16
    29f2:	08 95       	ret

000029f4 <print_binary>:
    29f4:	0e 94 dd 14 	call	0x29ba	; 0x29ba <_ZN12OrangutanLCD11printBinaryEh>
    29f8:	08 95       	ret

000029fa <_ZN12OrangutanLCD14printHexNibbleEh>:
    29fa:	8a 30       	cpi	r24, 0x0A	; 10
    29fc:	10 f4       	brcc	.+4      	; 0x2a02 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    29fe:	80 5d       	subi	r24, 0xD0	; 208
    2a00:	01 c0       	rjmp	.+2      	; 0x2a04 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    2a02:	89 5c       	subi	r24, 0xC9	; 201
    2a04:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN12OrangutanLCD9send_dataEh>
    2a08:	08 95       	ret

00002a0a <_ZN12OrangutanLCD8printHexEh>:
    2a0a:	1f 93       	push	r17
    2a0c:	18 2f       	mov	r17, r24
    2a0e:	82 95       	swap	r24
    2a10:	8f 70       	andi	r24, 0x0F	; 15
    2a12:	0e 94 fd 14 	call	0x29fa	; 0x29fa <_ZN12OrangutanLCD14printHexNibbleEh>
    2a16:	81 2f       	mov	r24, r17
    2a18:	8f 70       	andi	r24, 0x0F	; 15
    2a1a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <_ZN12OrangutanLCD14printHexNibbleEh>
    2a1e:	1f 91       	pop	r17
    2a20:	08 95       	ret

00002a22 <_ZN12OrangutanLCD8printHexEj>:
    2a22:	1f 93       	push	r17
    2a24:	18 2f       	mov	r17, r24
    2a26:	89 2f       	mov	r24, r25
    2a28:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <_ZN12OrangutanLCD8printHexEh>
    2a2c:	81 2f       	mov	r24, r17
    2a2e:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <_ZN12OrangutanLCD8printHexEh>
    2a32:	1f 91       	pop	r17
    2a34:	08 95       	ret

00002a36 <print_hex>:
    2a36:	0e 94 11 15 	call	0x2a22	; 0x2a22 <_ZN12OrangutanLCD8printHexEj>
    2a3a:	08 95       	ret

00002a3c <print_hex_byte>:
    2a3c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <_ZN12OrangutanLCD8printHexEh>
    2a40:	08 95       	ret

00002a42 <_ZN12OrangutanLCD5printEm>:
    2a42:	6f 92       	push	r6
    2a44:	7f 92       	push	r7
    2a46:	8f 92       	push	r8
    2a48:	9f 92       	push	r9
    2a4a:	af 92       	push	r10
    2a4c:	bf 92       	push	r11
    2a4e:	cf 92       	push	r12
    2a50:	df 92       	push	r13
    2a52:	ff 92       	push	r15
    2a54:	0f 93       	push	r16
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	2a 97       	sbiw	r28, 0x0a	; 10
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	f8 94       	cli
    2a64:	de bf       	out	0x3e, r29	; 62
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	cd bf       	out	0x3d, r28	; 61
    2a6a:	5b 01       	movw	r10, r22
    2a6c:	6c 01       	movw	r12, r24
    2a6e:	0a e0       	ldi	r16, 0x0A	; 10
    2a70:	3e 01       	movw	r6, r28
    2a72:	08 94       	sec
    2a74:	61 1c       	adc	r6, r1
    2a76:	71 1c       	adc	r7, r1
    2a78:	fa 2c       	mov	r15, r10
    2a7a:	c6 01       	movw	r24, r12
    2a7c:	b5 01       	movw	r22, r10
    2a7e:	2a e0       	ldi	r18, 0x0A	; 10
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e0       	ldi	r20, 0x00	; 0
    2a84:	50 e0       	ldi	r21, 0x00	; 0
    2a86:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__udivmodsi4>
    2a8a:	c9 01       	movw	r24, r18
    2a8c:	da 01       	movw	r26, r20
    2a8e:	5c 01       	movw	r10, r24
    2a90:	6d 01       	movw	r12, r26
    2a92:	01 50       	subi	r16, 0x01	; 1
    2a94:	43 01       	movw	r8, r6
    2a96:	80 0e       	add	r8, r16
    2a98:	91 1c       	adc	r9, r1
    2a9a:	80 e3       	ldi	r24, 0x30	; 48
    2a9c:	f8 0e       	add	r15, r24
    2a9e:	c6 01       	movw	r24, r12
    2aa0:	b5 01       	movw	r22, r10
    2aa2:	2a e0       	ldi	r18, 0x0A	; 10
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e0       	ldi	r20, 0x00	; 0
    2aa8:	50 e0       	ldi	r21, 0x00	; 0
    2aaa:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__mulsi3>
    2aae:	f6 1a       	sub	r15, r22
    2ab0:	f4 01       	movw	r30, r8
    2ab2:	f0 82       	st	Z, r15
    2ab4:	a1 14       	cp	r10, r1
    2ab6:	b1 04       	cpc	r11, r1
    2ab8:	c1 04       	cpc	r12, r1
    2aba:	d1 04       	cpc	r13, r1
    2abc:	e9 f6       	brne	.-70     	; 0x2a78 <_ZN12OrangutanLCD5printEm+0x36>
    2abe:	08 c0       	rjmp	.+16     	; 0x2ad0 <_ZN12OrangutanLCD5printEm+0x8e>
    2ac0:	f6 01       	movw	r30, r12
    2ac2:	e0 0f       	add	r30, r16
    2ac4:	f1 1d       	adc	r31, r1
    2ac6:	80 81       	ld	r24, Z
    2ac8:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN12OrangutanLCD9send_dataEh>
    2acc:	0f 5f       	subi	r16, 0xFF	; 255
    2ace:	04 c0       	rjmp	.+8      	; 0x2ad8 <_ZN12OrangutanLCD5printEm+0x96>
    2ad0:	6e 01       	movw	r12, r28
    2ad2:	08 94       	sec
    2ad4:	c1 1c       	adc	r12, r1
    2ad6:	d1 1c       	adc	r13, r1
    2ad8:	0a 30       	cpi	r16, 0x0A	; 10
    2ada:	90 f3       	brcs	.-28     	; 0x2ac0 <_ZN12OrangutanLCD5printEm+0x7e>
    2adc:	2a 96       	adiw	r28, 0x0a	; 10
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	de bf       	out	0x3e, r29	; 62
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	cd bf       	out	0x3d, r28	; 61
    2ae8:	cf 91       	pop	r28
    2aea:	df 91       	pop	r29
    2aec:	0f 91       	pop	r16
    2aee:	ff 90       	pop	r15
    2af0:	df 90       	pop	r13
    2af2:	cf 90       	pop	r12
    2af4:	bf 90       	pop	r11
    2af6:	af 90       	pop	r10
    2af8:	9f 90       	pop	r9
    2afa:	8f 90       	pop	r8
    2afc:	7f 90       	pop	r7
    2afe:	6f 90       	pop	r6
    2b00:	08 95       	ret

00002b02 <print_unsigned_long>:
    2b02:	0e 94 21 15 	call	0x2a42	; 0x2a42 <_ZN12OrangutanLCD5printEm>
    2b06:	08 95       	ret

00002b08 <_ZN12OrangutanLCD5printEl>:
    2b08:	ef 92       	push	r14
    2b0a:	ff 92       	push	r15
    2b0c:	0f 93       	push	r16
    2b0e:	1f 93       	push	r17
    2b10:	7b 01       	movw	r14, r22
    2b12:	8c 01       	movw	r16, r24
    2b14:	97 ff       	sbrs	r25, 7
    2b16:	0b c0       	rjmp	.+22     	; 0x2b2e <_ZN12OrangutanLCD5printEl+0x26>
    2b18:	10 95       	com	r17
    2b1a:	00 95       	com	r16
    2b1c:	f0 94       	com	r15
    2b1e:	e0 94       	com	r14
    2b20:	e1 1c       	adc	r14, r1
    2b22:	f1 1c       	adc	r15, r1
    2b24:	01 1d       	adc	r16, r1
    2b26:	11 1d       	adc	r17, r1
    2b28:	8d e2       	ldi	r24, 0x2D	; 45
    2b2a:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN12OrangutanLCD9send_dataEh>
    2b2e:	c8 01       	movw	r24, r16
    2b30:	b7 01       	movw	r22, r14
    2b32:	0e 94 21 15 	call	0x2a42	; 0x2a42 <_ZN12OrangutanLCD5printEm>
    2b36:	1f 91       	pop	r17
    2b38:	0f 91       	pop	r16
    2b3a:	ff 90       	pop	r15
    2b3c:	ef 90       	pop	r14
    2b3e:	08 95       	ret

00002b40 <print_long>:
    2b40:	0e 94 84 15 	call	0x2b08	; 0x2b08 <_ZN12OrangutanLCD5printEl>
    2b44:	08 95       	ret

00002b46 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    2b46:	cf 93       	push	r28
    2b48:	df 93       	push	r29
    2b4a:	ec 01       	movw	r28, r24
    2b4c:	03 c0       	rjmp	.+6      	; 0x2b54 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    2b4e:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN12OrangutanLCD9send_dataEh>
    2b52:	21 96       	adiw	r28, 0x01	; 1
    2b54:	fe 01       	movw	r30, r28
    2b56:	84 91       	lpm	r24, Z+
    2b58:	88 23       	and	r24, r24
    2b5a:	c9 f7       	brne	.-14     	; 0x2b4e <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	08 95       	ret

00002b62 <print_from_program_space>:
    2b62:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    2b66:	08 95       	ret

00002b68 <_ZN12OrangutanLCD5printEPKc>:
    2b68:	cf 93       	push	r28
    2b6a:	df 93       	push	r29
    2b6c:	ec 01       	movw	r28, r24
    2b6e:	03 c0       	rjmp	.+6      	; 0x2b76 <_ZN12OrangutanLCD5printEPKc+0xe>
    2b70:	21 96       	adiw	r28, 0x01	; 1
    2b72:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN12OrangutanLCD9send_dataEh>
    2b76:	88 81       	ld	r24, Y
    2b78:	88 23       	and	r24, r24
    2b7a:	d1 f7       	brne	.-12     	; 0x2b70 <_ZN12OrangutanLCD5printEPKc+0x8>
    2b7c:	df 91       	pop	r29
    2b7e:	cf 91       	pop	r28
    2b80:	08 95       	ret

00002b82 <_ZN12OrangutanLCD7printInEPKc>:
    2b82:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <_ZN12OrangutanLCD5printEPKc>
    2b86:	08 95       	ret

00002b88 <print>:
    2b88:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <_ZN12OrangutanLCD5printEPKc>
    2b8c:	08 95       	ret

00002b8e <_ZN12OrangutanLCD5printEc>:
    2b8e:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN12OrangutanLCD9send_dataEh>
    2b92:	08 95       	ret

00002b94 <print_character>:
    2b94:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN12OrangutanLCD9send_dataEh>
    2b98:	08 95       	ret

00002b9a <lcd_putchar>:
    2b9a:	a0 e0       	ldi	r26, 0x00	; 0
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	e3 ed       	ldi	r30, 0xD3	; 211
    2ba0:	f5 e1       	ldi	r31, 0x15	; 21
    2ba2:	0c 94 aa 1f 	jmp	0x3f54	; 0x3f54 <__prologue_saves__+0x14>
    2ba6:	e8 2e       	mov	r14, r24
    2ba8:	80 91 fa 03 	lds	r24, 0x03FA
    2bac:	90 91 fb 03 	lds	r25, 0x03FB
    2bb0:	89 2b       	or	r24, r25
    2bb2:	09 f4       	brne	.+2      	; 0x2bb6 <lcd_putchar+0x1c>
    2bb4:	05 c1       	rjmp	.+522    	; 0x2dc0 <lcd_putchar+0x226>
    2bb6:	2a e0       	ldi	r18, 0x0A	; 10
    2bb8:	e2 16       	cp	r14, r18
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <lcd_putchar+0x24>
    2bbc:	46 c0       	rjmp	.+140    	; 0x2c4a <lcd_putchar+0xb0>
    2bbe:	38 e0       	ldi	r19, 0x08	; 8
    2bc0:	e3 16       	cp	r14, r19
    2bc2:	c9 f4       	brne	.+50     	; 0x2bf6 <lcd_putchar+0x5c>
    2bc4:	80 91 fd 03 	lds	r24, 0x03FD
    2bc8:	81 50       	subi	r24, 0x01	; 1
    2bca:	80 93 fd 03 	sts	0x03FD, r24
    2bce:	8f 3f       	cpi	r24, 0xFF	; 255
    2bd0:	51 f4       	brne	.+20     	; 0x2be6 <lcd_putchar+0x4c>
    2bd2:	80 91 fc 03 	lds	r24, 0x03FC
    2bd6:	81 50       	subi	r24, 0x01	; 1
    2bd8:	80 93 fc 03 	sts	0x03FC, r24
    2bdc:	80 91 c9 03 	lds	r24, 0x03C9
    2be0:	81 50       	subi	r24, 0x01	; 1
    2be2:	80 93 fd 03 	sts	0x03FD, r24
    2be6:	80 91 fc 03 	lds	r24, 0x03FC
    2bea:	8f 3f       	cpi	r24, 0xFF	; 255
    2bec:	09 f0       	breq	.+2      	; 0x2bf0 <lcd_putchar+0x56>
    2bee:	e2 c0       	rjmp	.+452    	; 0x2db4 <lcd_putchar+0x21a>
    2bf0:	10 92 fc 03 	sts	0x03FC, r1
    2bf4:	dd c0       	rjmp	.+442    	; 0x2db0 <lcd_putchar+0x216>
    2bf6:	8e 2d       	mov	r24, r14
    2bf8:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN12OrangutanLCD9send_dataEh>
    2bfc:	20 91 fc 03 	lds	r18, 0x03FC
    2c00:	22 23       	and	r18, r18
    2c02:	c9 f0       	breq	.+50     	; 0x2c36 <lcd_putchar+0x9c>
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	21 50       	subi	r18, 0x01	; 1
    2c08:	30 40       	sbci	r19, 0x00	; 0
    2c0a:	80 91 c9 03 	lds	r24, 0x03C9
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	ac 01       	movw	r20, r24
    2c12:	24 9f       	mul	r18, r20
    2c14:	c0 01       	movw	r24, r0
    2c16:	25 9f       	mul	r18, r21
    2c18:	90 0d       	add	r25, r0
    2c1a:	34 9f       	mul	r19, r20
    2c1c:	90 0d       	add	r25, r0
    2c1e:	11 24       	eor	r1, r1
    2c20:	20 91 fd 03 	lds	r18, 0x03FD
    2c24:	e0 91 fa 03 	lds	r30, 0x03FA
    2c28:	f0 91 fb 03 	lds	r31, 0x03FB
    2c2c:	e8 0f       	add	r30, r24
    2c2e:	f9 1f       	adc	r31, r25
    2c30:	e2 0f       	add	r30, r18
    2c32:	f1 1d       	adc	r31, r1
    2c34:	e0 82       	st	Z, r14
    2c36:	80 91 fd 03 	lds	r24, 0x03FD
    2c3a:	8f 5f       	subi	r24, 0xFF	; 255
    2c3c:	80 93 fd 03 	sts	0x03FD, r24
    2c40:	90 91 c9 03 	lds	r25, 0x03C9
    2c44:	89 17       	cp	r24, r25
    2c46:	09 f0       	breq	.+2      	; 0x2c4a <lcd_putchar+0xb0>
    2c48:	bb c0       	rjmp	.+374    	; 0x2dc0 <lcd_putchar+0x226>
    2c4a:	40 91 fc 03 	lds	r20, 0x03FC
    2c4e:	24 2f       	mov	r18, r20
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	80 91 c8 03 	lds	r24, 0x03C8
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	28 17       	cp	r18, r24
    2c5c:	39 07       	cpc	r19, r25
    2c5e:	09 f0       	breq	.+2      	; 0x2c62 <lcd_putchar+0xc8>
    2c60:	a4 c0       	rjmp	.+328    	; 0x2daa <lcd_putchar+0x210>
    2c62:	c0 e0       	ldi	r28, 0x00	; 0
    2c64:	d0 e0       	ldi	r29, 0x00	; 0
    2c66:	44 c0       	rjmp	.+136    	; 0x2cf0 <lcd_putchar+0x156>
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	6c 2f       	mov	r22, r28
    2c6c:	0e 94 86 14 	call	0x290c	; 0x290c <_ZN12OrangutanLCD6gotoXYEhh>
    2c70:	ff 24       	eor	r15, r15
    2c72:	6e 01       	movw	r12, r28
    2c74:	08 94       	sec
    2c76:	c1 1c       	adc	r12, r1
    2c78:	d1 1c       	adc	r13, r1
    2c7a:	35 c0       	rjmp	.+106    	; 0x2ce6 <lcd_putchar+0x14c>
    2c7c:	0f 2d       	mov	r16, r15
    2c7e:	10 e0       	ldi	r17, 0x00	; 0
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9c 01       	movw	r18, r24
    2c84:	c2 9f       	mul	r28, r18
    2c86:	c0 01       	movw	r24, r0
    2c88:	c3 9f       	mul	r28, r19
    2c8a:	90 0d       	add	r25, r0
    2c8c:	d2 9f       	mul	r29, r18
    2c8e:	90 0d       	add	r25, r0
    2c90:	11 24       	eor	r1, r1
    2c92:	e0 91 fa 03 	lds	r30, 0x03FA
    2c96:	f0 91 fb 03 	lds	r31, 0x03FB
    2c9a:	e0 0f       	add	r30, r16
    2c9c:	f1 1f       	adc	r31, r17
    2c9e:	e8 0f       	add	r30, r24
    2ca0:	f9 1f       	adc	r31, r25
    2ca2:	80 81       	ld	r24, Z
    2ca4:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN12OrangutanLCD9send_dataEh>
    2ca8:	e0 91 fa 03 	lds	r30, 0x03FA
    2cac:	f0 91 fb 03 	lds	r31, 0x03FB
    2cb0:	80 91 c9 03 	lds	r24, 0x03C9
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	c8 9f       	mul	r28, r24
    2cb8:	d0 01       	movw	r26, r0
    2cba:	c9 9f       	mul	r28, r25
    2cbc:	b0 0d       	add	r27, r0
    2cbe:	d8 9f       	mul	r29, r24
    2cc0:	b0 0d       	add	r27, r0
    2cc2:	11 24       	eor	r1, r1
    2cc4:	e0 0f       	add	r30, r16
    2cc6:	f1 1f       	adc	r31, r17
    2cc8:	ae 0f       	add	r26, r30
    2cca:	bf 1f       	adc	r27, r31
    2ccc:	ac 01       	movw	r20, r24
    2cce:	c4 9e       	mul	r12, r20
    2cd0:	c0 01       	movw	r24, r0
    2cd2:	c5 9e       	mul	r12, r21
    2cd4:	90 0d       	add	r25, r0
    2cd6:	d4 9e       	mul	r13, r20
    2cd8:	90 0d       	add	r25, r0
    2cda:	11 24       	eor	r1, r1
    2cdc:	e8 0f       	add	r30, r24
    2cde:	f9 1f       	adc	r31, r25
    2ce0:	80 81       	ld	r24, Z
    2ce2:	8c 93       	st	X, r24
    2ce4:	f3 94       	inc	r15
    2ce6:	80 91 c9 03 	lds	r24, 0x03C9
    2cea:	f8 16       	cp	r15, r24
    2cec:	38 f2       	brcs	.-114    	; 0x2c7c <lcd_putchar+0xe2>
    2cee:	e6 01       	movw	r28, r12
    2cf0:	60 91 c8 03 	lds	r22, 0x03C8
    2cf4:	86 2f       	mov	r24, r22
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	02 97       	sbiw	r24, 0x02	; 2
    2cfa:	c8 17       	cp	r28, r24
    2cfc:	d9 07       	cpc	r29, r25
    2cfe:	0c f4       	brge	.+2      	; 0x2d02 <lcd_putchar+0x168>
    2d00:	b3 cf       	rjmp	.-154    	; 0x2c68 <lcd_putchar+0xce>
    2d02:	62 30       	cpi	r22, 0x02	; 2
    2d04:	08 f4       	brcc	.+2      	; 0x2d08 <lcd_putchar+0x16e>
    2d06:	40 c0       	rjmp	.+128    	; 0x2d88 <lcd_putchar+0x1ee>
    2d08:	62 50       	subi	r22, 0x02	; 2
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	0e 94 86 14 	call	0x290c	; 0x290c <_ZN12OrangutanLCD6gotoXYEhh>
    2d10:	ff 24       	eor	r15, r15
    2d12:	40 e2       	ldi	r20, 0x20	; 32
    2d14:	d4 2e       	mov	r13, r20
    2d16:	34 c0       	rjmp	.+104    	; 0x2d80 <lcd_putchar+0x1e6>
    2d18:	0f 2d       	mov	r16, r15
    2d1a:	10 e0       	ldi	r17, 0x00	; 0
    2d1c:	80 91 c8 03 	lds	r24, 0x03C8
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	02 97       	sbiw	r24, 0x02	; 2
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	ac 01       	movw	r20, r24
    2d28:	42 9f       	mul	r20, r18
    2d2a:	c0 01       	movw	r24, r0
    2d2c:	43 9f       	mul	r20, r19
    2d2e:	90 0d       	add	r25, r0
    2d30:	52 9f       	mul	r21, r18
    2d32:	90 0d       	add	r25, r0
    2d34:	11 24       	eor	r1, r1
    2d36:	e0 91 fa 03 	lds	r30, 0x03FA
    2d3a:	f0 91 fb 03 	lds	r31, 0x03FB
    2d3e:	e0 0f       	add	r30, r16
    2d40:	f1 1f       	adc	r31, r17
    2d42:	e8 0f       	add	r30, r24
    2d44:	f9 1f       	adc	r31, r25
    2d46:	80 81       	ld	r24, Z
    2d48:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN12OrangutanLCD9send_dataEh>
    2d4c:	20 91 c8 03 	lds	r18, 0x03C8
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	22 50       	subi	r18, 0x02	; 2
    2d54:	30 40       	sbci	r19, 0x00	; 0
    2d56:	80 91 c9 03 	lds	r24, 0x03C9
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	ac 01       	movw	r20, r24
    2d5e:	24 9f       	mul	r18, r20
    2d60:	c0 01       	movw	r24, r0
    2d62:	25 9f       	mul	r18, r21
    2d64:	90 0d       	add	r25, r0
    2d66:	34 9f       	mul	r19, r20
    2d68:	90 0d       	add	r25, r0
    2d6a:	11 24       	eor	r1, r1
    2d6c:	e0 91 fa 03 	lds	r30, 0x03FA
    2d70:	f0 91 fb 03 	lds	r31, 0x03FB
    2d74:	e0 0f       	add	r30, r16
    2d76:	f1 1f       	adc	r31, r17
    2d78:	e8 0f       	add	r30, r24
    2d7a:	f9 1f       	adc	r31, r25
    2d7c:	d0 82       	st	Z, r13
    2d7e:	f3 94       	inc	r15
    2d80:	20 91 c9 03 	lds	r18, 0x03C9
    2d84:	f2 16       	cp	r15, r18
    2d86:	40 f2       	brcs	.-112    	; 0x2d18 <lcd_putchar+0x17e>
    2d88:	60 91 c8 03 	lds	r22, 0x03C8
    2d8c:	61 50       	subi	r22, 0x01	; 1
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	0e 94 86 14 	call	0x290c	; 0x290c <_ZN12OrangutanLCD6gotoXYEhh>
    2d94:	00 e0       	ldi	r16, 0x00	; 0
    2d96:	04 c0       	rjmp	.+8      	; 0x2da0 <lcd_putchar+0x206>
    2d98:	80 e2       	ldi	r24, 0x20	; 32
    2d9a:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN12OrangutanLCD9send_dataEh>
    2d9e:	0f 5f       	subi	r16, 0xFF	; 255
    2da0:	80 91 c9 03 	lds	r24, 0x03C9
    2da4:	08 17       	cp	r16, r24
    2da6:	c0 f3       	brcs	.-16     	; 0x2d98 <lcd_putchar+0x1fe>
    2da8:	03 c0       	rjmp	.+6      	; 0x2db0 <lcd_putchar+0x216>
    2daa:	4f 5f       	subi	r20, 0xFF	; 255
    2dac:	40 93 fc 03 	sts	0x03FC, r20
    2db0:	10 92 fd 03 	sts	0x03FD, r1
    2db4:	80 91 fd 03 	lds	r24, 0x03FD
    2db8:	60 91 fc 03 	lds	r22, 0x03FC
    2dbc:	0e 94 86 14 	call	0x290c	; 0x290c <_ZN12OrangutanLCD6gotoXYEhh>
    2dc0:	2e 2d       	mov	r18, r14
    2dc2:	33 27       	eor	r19, r19
    2dc4:	27 fd       	sbrc	r18, 7
    2dc6:	30 95       	com	r19
    2dc8:	c9 01       	movw	r24, r18
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	e8 e0       	ldi	r30, 0x08	; 8
    2dd0:	0c 94 c6 1f 	jmp	0x3f8c	; 0x3f8c <__epilogue_restores__+0x14>

00002dd4 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    2dd4:	ef 92       	push	r14
    2dd6:	ff 92       	push	r15
    2dd8:	0f 93       	push	r16
    2dda:	1f 93       	push	r17
    2ddc:	cf 93       	push	r28
    2dde:	df 93       	push	r29
    2de0:	7c 01       	movw	r14, r24
    2de2:	06 2f       	mov	r16, r22
    2de4:	10 e0       	ldi	r17, 0x00	; 0
    2de6:	53 e0       	ldi	r21, 0x03	; 3
    2de8:	00 0f       	add	r16, r16
    2dea:	11 1f       	adc	r17, r17
    2dec:	5a 95       	dec	r21
    2dee:	e1 f7       	brne	.-8      	; 0x2de8 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    2df0:	c0 e0       	ldi	r28, 0x00	; 0
    2df2:	d0 e0       	ldi	r29, 0x00	; 0
    2df4:	9e 01       	movw	r18, r28
    2df6:	20 0f       	add	r18, r16
    2df8:	82 2f       	mov	r24, r18
    2dfa:	80 64       	ori	r24, 0x40	; 64
    2dfc:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN12OrangutanLCD8send_cmdEh>
    2e00:	f7 01       	movw	r30, r14
    2e02:	ec 0f       	add	r30, r28
    2e04:	fd 1f       	adc	r31, r29
    2e06:	e4 91       	lpm	r30, Z+
    2e08:	8e 2f       	mov	r24, r30
    2e0a:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <_ZN12OrangutanLCD9send_dataEh>
    2e0e:	21 96       	adiw	r28, 0x01	; 1
    2e10:	c8 30       	cpi	r28, 0x08	; 8
    2e12:	d1 05       	cpc	r29, r1
    2e14:	79 f7       	brne	.-34     	; 0x2df4 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
    2e1a:	e6 e0       	ldi	r30, 0x06	; 6
    2e1c:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <__epilogue_restores__+0x18>

00002e20 <lcd_load_custom_character>:
    2e20:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    2e24:	08 95       	ret

00002e26 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    2e26:	60 e0       	ldi	r22, 0x00	; 0
    2e28:	41 e0       	ldi	r20, 0x01	; 1
    2e2a:	0e 94 06 14 	call	0x280c	; 0x280c <_ZN12OrangutanLCD4sendEhhh>
    2e2e:	08 95       	ret

00002e30 <_ZN12OrangutanLCD6scrollEhhj>:
    2e30:	0f 93       	push	r16
    2e32:	1f 93       	push	r17
    2e34:	cf 93       	push	r28
    2e36:	df 93       	push	r29
    2e38:	08 2f       	mov	r16, r24
    2e3a:	16 2f       	mov	r17, r22
    2e3c:	ea 01       	movw	r28, r20
    2e3e:	0b c0       	rjmp	.+22     	; 0x2e56 <_ZN12OrangutanLCD6scrollEhhj+0x26>
    2e40:	00 23       	and	r16, r16
    2e42:	11 f4       	brne	.+4      	; 0x2e48 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    2e44:	88 e1       	ldi	r24, 0x18	; 24
    2e46:	01 c0       	rjmp	.+2      	; 0x2e4a <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    2e48:	8c e1       	ldi	r24, 0x1C	; 28
    2e4a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN12OrangutanLCD8send_cmdEh>
    2e4e:	ce 01       	movw	r24, r28
    2e50:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <delay_ms>
    2e54:	11 50       	subi	r17, 0x01	; 1
    2e56:	11 23       	and	r17, r17
    2e58:	99 f7       	brne	.-26     	; 0x2e40 <_ZN12OrangutanLCD6scrollEhhj+0x10>
    2e5a:	df 91       	pop	r29
    2e5c:	cf 91       	pop	r28
    2e5e:	1f 91       	pop	r17
    2e60:	0f 91       	pop	r16
    2e62:	08 95       	ret

00002e64 <lcd_scroll>:
    2e64:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZN12OrangutanLCD6scrollEhhj>
    2e68:	08 95       	ret

00002e6a <serial_get_mode>:
    2e6a:	28 2f       	mov	r18, r24
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	f9 01       	movw	r30, r18
    2e70:	93 e0       	ldi	r25, 0x03	; 3
    2e72:	ee 0f       	add	r30, r30
    2e74:	ff 1f       	adc	r31, r31
    2e76:	9a 95       	dec	r25
    2e78:	e1 f7       	brne	.-8      	; 0x2e72 <serial_get_mode+0x8>
    2e7a:	22 0f       	add	r18, r18
    2e7c:	33 1f       	adc	r19, r19
    2e7e:	e2 0f       	add	r30, r18
    2e80:	f3 1f       	adc	r31, r19
    2e82:	e6 53       	subi	r30, 0x36	; 54
    2e84:	fc 4f       	sbci	r31, 0xFC	; 252
    2e86:	80 81       	ld	r24, Z
    2e88:	08 95       	ret

00002e8a <serial_get_received_bytes>:
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	ee 0f       	add	r30, r30
    2e90:	ff 1f       	adc	r31, r31
    2e92:	ee 0f       	add	r30, r30
    2e94:	ff 1f       	adc	r31, r31
    2e96:	e8 0f       	add	r30, r24
    2e98:	f9 1f       	adc	r31, r25
    2e9a:	ee 0f       	add	r30, r30
    2e9c:	ff 1f       	adc	r31, r31
    2e9e:	e4 53       	subi	r30, 0x34	; 52
    2ea0:	fc 4f       	sbci	r31, 0xFC	; 252
    2ea2:	80 81       	ld	r24, Z
    2ea4:	08 95       	ret

00002ea6 <serial_receive_buffer_full>:
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	ee 0f       	add	r30, r30
    2eac:	ff 1f       	adc	r31, r31
    2eae:	ee 0f       	add	r30, r30
    2eb0:	ff 1f       	adc	r31, r31
    2eb2:	e8 0f       	add	r30, r24
    2eb4:	f9 1f       	adc	r31, r25
    2eb6:	ee 0f       	add	r30, r30
    2eb8:	ff 1f       	adc	r31, r31
    2eba:	e4 53       	subi	r30, 0x34	; 52
    2ebc:	fc 4f       	sbci	r31, 0xFC	; 252
    2ebe:	20 81       	ld	r18, Z
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	53 e0       	ldi	r21, 0x03	; 3
    2ec6:	ee 0f       	add	r30, r30
    2ec8:	ff 1f       	adc	r31, r31
    2eca:	5a 95       	dec	r21
    2ecc:	e1 f7       	brne	.-8      	; 0x2ec6 <serial_receive_buffer_full+0x20>
    2ece:	88 0f       	add	r24, r24
    2ed0:	99 1f       	adc	r25, r25
    2ed2:	e8 0f       	add	r30, r24
    2ed4:	f9 1f       	adc	r31, r25
    2ed6:	e6 53       	subi	r30, 0x36	; 54
    2ed8:	fc 4f       	sbci	r31, 0xFC	; 252
    2eda:	84 81       	ldd	r24, Z+4	; 0x04
    2edc:	28 17       	cp	r18, r24
    2ede:	09 f4       	brne	.+2      	; 0x2ee2 <serial_receive_buffer_full+0x3c>
    2ee0:	31 e0       	ldi	r19, 0x01	; 1
    2ee2:	83 2f       	mov	r24, r19
    2ee4:	08 95       	ret

00002ee6 <serial_get_sent_bytes>:
    2ee6:	28 2f       	mov	r18, r24
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	f9 01       	movw	r30, r18
    2eec:	b3 e0       	ldi	r27, 0x03	; 3
    2eee:	ee 0f       	add	r30, r30
    2ef0:	ff 1f       	adc	r31, r31
    2ef2:	ba 95       	dec	r27
    2ef4:	e1 f7       	brne	.-8      	; 0x2eee <serial_get_sent_bytes+0x8>
    2ef6:	22 0f       	add	r18, r18
    2ef8:	33 1f       	adc	r19, r19
    2efa:	e2 0f       	add	r30, r18
    2efc:	f3 1f       	adc	r31, r19
    2efe:	e6 53       	subi	r30, 0x36	; 54
    2f00:	fc 4f       	sbci	r31, 0xFC	; 252
    2f02:	81 81       	ldd	r24, Z+1	; 0x01
    2f04:	08 95       	ret

00002f06 <serial_send_buffer_empty>:
    2f06:	28 2f       	mov	r18, r24
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	f9 01       	movw	r30, r18
    2f0c:	73 e0       	ldi	r23, 0x03	; 3
    2f0e:	ee 0f       	add	r30, r30
    2f10:	ff 1f       	adc	r31, r31
    2f12:	7a 95       	dec	r23
    2f14:	e1 f7       	brne	.-8      	; 0x2f0e <serial_send_buffer_empty+0x8>
    2f16:	22 0f       	add	r18, r18
    2f18:	33 1f       	adc	r19, r19
    2f1a:	e2 0f       	add	r30, r18
    2f1c:	f3 1f       	adc	r31, r19
    2f1e:	e6 53       	subi	r30, 0x36	; 54
    2f20:	fc 4f       	sbci	r31, 0xFC	; 252
    2f22:	91 81       	ldd	r25, Z+1	; 0x01
    2f24:	40 e0       	ldi	r20, 0x00	; 0
    2f26:	28 2f       	mov	r18, r24
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	f9 01       	movw	r30, r18
    2f2c:	53 e0       	ldi	r21, 0x03	; 3
    2f2e:	ee 0f       	add	r30, r30
    2f30:	ff 1f       	adc	r31, r31
    2f32:	5a 95       	dec	r21
    2f34:	e1 f7       	brne	.-8      	; 0x2f2e <serial_send_buffer_empty+0x28>
    2f36:	22 0f       	add	r18, r18
    2f38:	33 1f       	adc	r19, r19
    2f3a:	e2 0f       	add	r30, r18
    2f3c:	f3 1f       	adc	r31, r19
    2f3e:	e6 53       	subi	r30, 0x36	; 54
    2f40:	fc 4f       	sbci	r31, 0xFC	; 252
    2f42:	83 81       	ldd	r24, Z+3	; 0x03
    2f44:	98 17       	cp	r25, r24
    2f46:	09 f4       	brne	.+2      	; 0x2f4a <serial_send_buffer_empty+0x44>
    2f48:	41 e0       	ldi	r20, 0x01	; 1
    2f4a:	84 2f       	mov	r24, r20
    2f4c:	08 95       	ret

00002f4e <_ZN15OrangutanSerialC2Ev>:
    2f4e:	08 95       	ret

00002f50 <_ZN15OrangutanSerialC1Ev>:
    2f50:	08 95       	ret

00002f52 <_ZN15OrangutanSerial8initPortEh>:
    2f52:	88 23       	and	r24, r24
    2f54:	21 f0       	breq	.+8      	; 0x2f5e <_ZN15OrangutanSerial8initPortEh+0xc>
    2f56:	81 30       	cpi	r24, 0x01	; 1
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <_ZN15OrangutanSerial8initPortEh+0xa>
    2f5a:	44 c0       	rjmp	.+136    	; 0x2fe4 <_ZN15OrangutanSerial8initPortEh+0x92>
    2f5c:	1d c0       	rjmp	.+58     	; 0x2f98 <_ZN15OrangutanSerial8initPortEh+0x46>
    2f5e:	20 91 ca 03 	lds	r18, 0x03CA
    2f62:	22 23       	and	r18, r18
    2f64:	11 f4       	brne	.+4      	; 0x2f6a <_ZN15OrangutanSerial8initPortEh+0x18>
    2f66:	88 e9       	ldi	r24, 0x98	; 152
    2f68:	01 c0       	rjmp	.+2      	; 0x2f6c <_ZN15OrangutanSerial8initPortEh+0x1a>
    2f6a:	88 e1       	ldi	r24, 0x18	; 24
    2f6c:	80 93 c1 00 	sts	0x00C1, r24
    2f70:	80 91 d0 03 	lds	r24, 0x03D0
    2f74:	90 91 d1 03 	lds	r25, 0x03D1
    2f78:	89 2b       	or	r24, r25
    2f7a:	61 f1       	breq	.+88     	; 0x2fd4 <_ZN15OrangutanSerial8initPortEh+0x82>
    2f7c:	90 91 cb 03 	lds	r25, 0x03CB
    2f80:	80 91 cd 03 	lds	r24, 0x03CD
    2f84:	98 17       	cp	r25, r24
    2f86:	30 f5       	brcc	.+76     	; 0x2fd4 <_ZN15OrangutanSerial8initPortEh+0x82>
    2f88:	22 23       	and	r18, r18
    2f8a:	21 f5       	brne	.+72     	; 0x2fd4 <_ZN15OrangutanSerial8initPortEh+0x82>
    2f8c:	80 91 c1 00 	lds	r24, 0x00C1
    2f90:	80 62       	ori	r24, 0x20	; 32
    2f92:	80 93 c1 00 	sts	0x00C1, r24
    2f96:	1c c0       	rjmp	.+56     	; 0x2fd0 <_ZN15OrangutanSerial8initPortEh+0x7e>
    2f98:	20 91 d4 03 	lds	r18, 0x03D4
    2f9c:	22 23       	and	r18, r18
    2f9e:	11 f4       	brne	.+4      	; 0x2fa4 <_ZN15OrangutanSerial8initPortEh+0x52>
    2fa0:	88 e9       	ldi	r24, 0x98	; 152
    2fa2:	01 c0       	rjmp	.+2      	; 0x2fa6 <_ZN15OrangutanSerial8initPortEh+0x54>
    2fa4:	88 e1       	ldi	r24, 0x18	; 24
    2fa6:	80 93 c9 00 	sts	0x00C9, r24
    2faa:	80 91 da 03 	lds	r24, 0x03DA
    2fae:	90 91 db 03 	lds	r25, 0x03DB
    2fb2:	89 2b       	or	r24, r25
    2fb4:	99 f0       	breq	.+38     	; 0x2fdc <_ZN15OrangutanSerial8initPortEh+0x8a>
    2fb6:	90 91 d5 03 	lds	r25, 0x03D5
    2fba:	80 91 d7 03 	lds	r24, 0x03D7
    2fbe:	98 17       	cp	r25, r24
    2fc0:	68 f4       	brcc	.+26     	; 0x2fdc <_ZN15OrangutanSerial8initPortEh+0x8a>
    2fc2:	22 23       	and	r18, r18
    2fc4:	59 f4       	brne	.+22     	; 0x2fdc <_ZN15OrangutanSerial8initPortEh+0x8a>
    2fc6:	80 91 c9 00 	lds	r24, 0x00C9
    2fca:	80 62       	ori	r24, 0x20	; 32
    2fcc:	80 93 c9 00 	sts	0x00C9, r24
    2fd0:	78 94       	sei
    2fd2:	08 95       	ret
    2fd4:	80 91 c1 00 	lds	r24, 0x00C1
    2fd8:	8f 7d       	andi	r24, 0xDF	; 223
    2fda:	db cf       	rjmp	.-74     	; 0x2f92 <_ZN15OrangutanSerial8initPortEh+0x40>
    2fdc:	80 91 c9 00 	lds	r24, 0x00C9
    2fe0:	8f 7d       	andi	r24, 0xDF	; 223
    2fe2:	f4 cf       	rjmp	.-24     	; 0x2fcc <_ZN15OrangutanSerial8initPortEh+0x7a>
    2fe4:	08 95       	ret

00002fe6 <serial_set_mode>:
    2fe6:	28 2f       	mov	r18, r24
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	f9 01       	movw	r30, r18
    2fec:	b3 e0       	ldi	r27, 0x03	; 3
    2fee:	ee 0f       	add	r30, r30
    2ff0:	ff 1f       	adc	r31, r31
    2ff2:	ba 95       	dec	r27
    2ff4:	e1 f7       	brne	.-8      	; 0x2fee <serial_set_mode+0x8>
    2ff6:	22 0f       	add	r18, r18
    2ff8:	33 1f       	adc	r19, r19
    2ffa:	e2 0f       	add	r30, r18
    2ffc:	f3 1f       	adc	r31, r19
    2ffe:	e6 53       	subi	r30, 0x36	; 54
    3000:	fc 4f       	sbci	r31, 0xFC	; 252
    3002:	60 83       	st	Z, r22
    3004:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN15OrangutanSerial8initPortEh>
    3008:	08 95       	ret

0000300a <_ZN15OrangutanSerial11setBaudRateEhm>:
    300a:	a0 e0       	ldi	r26, 0x00	; 0
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	eb e0       	ldi	r30, 0x0B	; 11
    3010:	f8 e1       	ldi	r31, 0x18	; 24
    3012:	0c 94 ab 1f 	jmp	0x3f56	; 0x3f56 <__prologue_saves__+0x16>
    3016:	d8 2e       	mov	r13, r24
    3018:	7a 01       	movw	r14, r20
    301a:	8b 01       	movw	r16, r22
    301c:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN15OrangutanSerial8initPortEh>
    3020:	82 e0       	ldi	r24, 0x02	; 2
    3022:	d8 16       	cp	r13, r24
    3024:	19 f1       	breq	.+70     	; 0x306c <_ZN15OrangutanSerial11setBaudRateEhm+0x62>
    3026:	dd 20       	and	r13, r13
    3028:	19 f0       	breq	.+6      	; 0x3030 <_ZN15OrangutanSerial11setBaudRateEhm+0x26>
    302a:	cc ec       	ldi	r28, 0xCC	; 204
    302c:	d0 e0       	ldi	r29, 0x00	; 0
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <_ZN15OrangutanSerial11setBaudRateEhm+0x2a>
    3030:	c4 ec       	ldi	r28, 0xC4	; 196
    3032:	d0 e0       	ldi	r29, 0x00	; 0
    3034:	60 ea       	ldi	r22, 0xA0	; 160
    3036:	75 e2       	ldi	r23, 0x25	; 37
    3038:	86 e2       	ldi	r24, 0x26	; 38
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	6e 19       	sub	r22, r14
    303e:	7f 09       	sbc	r23, r15
    3040:	80 0b       	sbc	r24, r16
    3042:	91 0b       	sbc	r25, r17
    3044:	33 e0       	ldi	r19, 0x03	; 3
    3046:	66 0f       	add	r22, r22
    3048:	77 1f       	adc	r23, r23
    304a:	88 1f       	adc	r24, r24
    304c:	99 1f       	adc	r25, r25
    304e:	3a 95       	dec	r19
    3050:	d1 f7       	brne	.-12     	; 0x3046 <_ZN15OrangutanSerial11setBaudRateEhm+0x3c>
    3052:	24 e0       	ldi	r18, 0x04	; 4
    3054:	ee 0c       	add	r14, r14
    3056:	ff 1c       	adc	r15, r15
    3058:	00 1f       	adc	r16, r16
    305a:	11 1f       	adc	r17, r17
    305c:	2a 95       	dec	r18
    305e:	d1 f7       	brne	.-12     	; 0x3054 <_ZN15OrangutanSerial11setBaudRateEhm+0x4a>
    3060:	a8 01       	movw	r20, r16
    3062:	97 01       	movw	r18, r14
    3064:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__udivmodsi4>
    3068:	39 83       	std	Y+1, r19	; 0x01
    306a:	28 83       	st	Y, r18
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	e7 e0       	ldi	r30, 0x07	; 7
    3072:	0c 94 c7 1f 	jmp	0x3f8e	; 0x3f8e <__epilogue_restores__+0x16>

00003076 <serial_set_baud_rate>:
    3076:	0e 94 05 18 	call	0x300a	; 0x300a <_ZN15OrangutanSerial11setBaudRateEhm>
    307a:	08 95       	ret

0000307c <_ZN15OrangutanSerial7setModeEhh>:
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	f9 01       	movw	r30, r18
    3082:	53 e0       	ldi	r21, 0x03	; 3
    3084:	ee 0f       	add	r30, r30
    3086:	ff 1f       	adc	r31, r31
    3088:	5a 95       	dec	r21
    308a:	e1 f7       	brne	.-8      	; 0x3084 <_ZN15OrangutanSerial7setModeEhh+0x8>
    308c:	22 0f       	add	r18, r18
    308e:	33 1f       	adc	r19, r19
    3090:	e2 0f       	add	r30, r18
    3092:	f3 1f       	adc	r31, r19
    3094:	e6 53       	subi	r30, 0x36	; 54
    3096:	fc 4f       	sbci	r31, 0xFC	; 252
    3098:	60 83       	st	Z, r22
    309a:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN15OrangutanSerial8initPortEh>
    309e:	08 95       	ret

000030a0 <_ZN15OrangutanSerial7receiveEhPch>:
    30a0:	58 2f       	mov	r21, r24
    30a2:	82 30       	cpi	r24, 0x02	; 2
    30a4:	51 f0       	breq	.+20     	; 0x30ba <_ZN15OrangutanSerial7receiveEhPch+0x1a>
    30a6:	88 23       	and	r24, r24
    30a8:	19 f0       	breq	.+6      	; 0x30b0 <_ZN15OrangutanSerial7receiveEhPch+0x10>
    30aa:	e9 ec       	ldi	r30, 0xC9	; 201
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <_ZN15OrangutanSerial7receiveEhPch+0x14>
    30b0:	e1 ec       	ldi	r30, 0xC1	; 193
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	8f 77       	andi	r24, 0x7F	; 127
    30b8:	80 83       	st	Z, r24
    30ba:	25 2f       	mov	r18, r21
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	d9 01       	movw	r26, r18
    30c0:	aa 0f       	add	r26, r26
    30c2:	bb 1f       	adc	r27, r27
    30c4:	c9 01       	movw	r24, r18
    30c6:	e3 e0       	ldi	r30, 0x03	; 3
    30c8:	88 0f       	add	r24, r24
    30ca:	99 1f       	adc	r25, r25
    30cc:	ea 95       	dec	r30
    30ce:	e1 f7       	brne	.-8      	; 0x30c8 <_ZN15OrangutanSerial7receiveEhPch+0x28>
    30d0:	a8 0f       	add	r26, r24
    30d2:	b9 1f       	adc	r27, r25
    30d4:	a6 53       	subi	r26, 0x36	; 54
    30d6:	bc 4f       	sbci	r27, 0xFC	; 252
    30d8:	19 96       	adiw	r26, 0x09	; 9
    30da:	7c 93       	st	X, r23
    30dc:	6e 93       	st	-X, r22
    30de:	18 97       	sbiw	r26, 0x08	; 8
    30e0:	f9 01       	movw	r30, r18
    30e2:	ee 0f       	add	r30, r30
    30e4:	ff 1f       	adc	r31, r31
    30e6:	ee 0f       	add	r30, r30
    30e8:	ff 1f       	adc	r31, r31
    30ea:	e2 0f       	add	r30, r18
    30ec:	f3 1f       	adc	r31, r19
    30ee:	ee 0f       	add	r30, r30
    30f0:	ff 1f       	adc	r31, r31
    30f2:	e4 53       	subi	r30, 0x34	; 52
    30f4:	fc 4f       	sbci	r31, 0xFC	; 252
    30f6:	10 82       	st	Z, r1
    30f8:	14 96       	adiw	r26, 0x04	; 4
    30fa:	4c 93       	st	X, r20
    30fc:	14 97       	sbiw	r26, 0x04	; 4
    30fe:	15 96       	adiw	r26, 0x05	; 5
    3100:	1c 92       	st	X, r1
    3102:	15 97       	sbiw	r26, 0x05	; 5
    3104:	52 30       	cpi	r21, 0x02	; 2
    3106:	69 f0       	breq	.+26     	; 0x3122 <_ZN15OrangutanSerial7receiveEhPch+0x82>
    3108:	8c 91       	ld	r24, X
    310a:	88 23       	and	r24, r24
    310c:	51 f4       	brne	.+20     	; 0x3122 <_ZN15OrangutanSerial7receiveEhPch+0x82>
    310e:	55 23       	and	r21, r21
    3110:	19 f0       	breq	.+6      	; 0x3118 <_ZN15OrangutanSerial7receiveEhPch+0x78>
    3112:	e9 ec       	ldi	r30, 0xC9	; 201
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	02 c0       	rjmp	.+4      	; 0x311c <_ZN15OrangutanSerial7receiveEhPch+0x7c>
    3118:	e1 ec       	ldi	r30, 0xC1	; 193
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	80 81       	ld	r24, Z
    311e:	80 68       	ori	r24, 0x80	; 128
    3120:	80 83       	st	Z, r24
    3122:	08 95       	ret

00003124 <serial_receive>:
    3124:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZN15OrangutanSerial7receiveEhPch>
    3128:	08 95       	ret

0000312a <_ZN15OrangutanSerial11receiveRingEhPch>:
    312a:	58 2f       	mov	r21, r24
    312c:	82 30       	cpi	r24, 0x02	; 2
    312e:	51 f0       	breq	.+20     	; 0x3144 <_ZN15OrangutanSerial11receiveRingEhPch+0x1a>
    3130:	88 23       	and	r24, r24
    3132:	19 f0       	breq	.+6      	; 0x313a <_ZN15OrangutanSerial11receiveRingEhPch+0x10>
    3134:	e9 ec       	ldi	r30, 0xC9	; 201
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	02 c0       	rjmp	.+4      	; 0x313e <_ZN15OrangutanSerial11receiveRingEhPch+0x14>
    313a:	e1 ec       	ldi	r30, 0xC1	; 193
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	80 81       	ld	r24, Z
    3140:	8f 77       	andi	r24, 0x7F	; 127
    3142:	80 83       	st	Z, r24
    3144:	25 2f       	mov	r18, r21
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	d9 01       	movw	r26, r18
    314a:	aa 0f       	add	r26, r26
    314c:	bb 1f       	adc	r27, r27
    314e:	c9 01       	movw	r24, r18
    3150:	e3 e0       	ldi	r30, 0x03	; 3
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	ea 95       	dec	r30
    3158:	e1 f7       	brne	.-8      	; 0x3152 <_ZN15OrangutanSerial11receiveRingEhPch+0x28>
    315a:	a8 0f       	add	r26, r24
    315c:	b9 1f       	adc	r27, r25
    315e:	a6 53       	subi	r26, 0x36	; 54
    3160:	bc 4f       	sbci	r27, 0xFC	; 252
    3162:	19 96       	adiw	r26, 0x09	; 9
    3164:	7c 93       	st	X, r23
    3166:	6e 93       	st	-X, r22
    3168:	18 97       	sbiw	r26, 0x08	; 8
    316a:	f9 01       	movw	r30, r18
    316c:	ee 0f       	add	r30, r30
    316e:	ff 1f       	adc	r31, r31
    3170:	ee 0f       	add	r30, r30
    3172:	ff 1f       	adc	r31, r31
    3174:	e2 0f       	add	r30, r18
    3176:	f3 1f       	adc	r31, r19
    3178:	ee 0f       	add	r30, r30
    317a:	ff 1f       	adc	r31, r31
    317c:	e4 53       	subi	r30, 0x34	; 52
    317e:	fc 4f       	sbci	r31, 0xFC	; 252
    3180:	10 82       	st	Z, r1
    3182:	14 96       	adiw	r26, 0x04	; 4
    3184:	4c 93       	st	X, r20
    3186:	14 97       	sbiw	r26, 0x04	; 4
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	15 96       	adiw	r26, 0x05	; 5
    318c:	8c 93       	st	X, r24
    318e:	15 97       	sbiw	r26, 0x05	; 5
    3190:	52 30       	cpi	r21, 0x02	; 2
    3192:	69 f0       	breq	.+26     	; 0x31ae <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    3194:	8c 91       	ld	r24, X
    3196:	88 23       	and	r24, r24
    3198:	51 f4       	brne	.+20     	; 0x31ae <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    319a:	55 23       	and	r21, r21
    319c:	19 f0       	breq	.+6      	; 0x31a4 <_ZN15OrangutanSerial11receiveRingEhPch+0x7a>
    319e:	e9 ec       	ldi	r30, 0xC9	; 201
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	02 c0       	rjmp	.+4      	; 0x31a8 <_ZN15OrangutanSerial11receiveRingEhPch+0x7e>
    31a4:	e1 ec       	ldi	r30, 0xC1	; 193
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	80 81       	ld	r24, Z
    31aa:	80 68       	ori	r24, 0x80	; 128
    31ac:	80 83       	st	Z, r24
    31ae:	08 95       	ret

000031b0 <serial_receive_ring>:
    31b0:	0e 94 95 18 	call	0x312a	; 0x312a <_ZN15OrangutanSerial11receiveRingEhPch>
    31b4:	08 95       	ret

000031b6 <_ZN15OrangutanSerial13cancelReceiveEh>:
    31b6:	60 e0       	ldi	r22, 0x00	; 0
    31b8:	70 e0       	ldi	r23, 0x00	; 0
    31ba:	40 e0       	ldi	r20, 0x00	; 0
    31bc:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZN15OrangutanSerial7receiveEhPch>
    31c0:	08 95       	ret

000031c2 <serial_cancel_receive>:
    31c2:	0e 94 db 18 	call	0x31b6	; 0x31b6 <_ZN15OrangutanSerial13cancelReceiveEh>
    31c6:	08 95       	ret

000031c8 <__vector_20>:
    31c8:	1f 92       	push	r1
    31ca:	0f 92       	push	r0
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	0f 92       	push	r0
    31d0:	0b b6       	in	r0, 0x3b	; 59
    31d2:	0f 92       	push	r0
    31d4:	11 24       	eor	r1, r1
    31d6:	2f 93       	push	r18
    31d8:	8f 93       	push	r24
    31da:	9f 93       	push	r25
    31dc:	ef 93       	push	r30
    31de:	ff 93       	push	r31
    31e0:	20 91 c6 00 	lds	r18, 0x00C6
    31e4:	e0 91 d2 03 	lds	r30, 0x03D2
    31e8:	f0 91 d3 03 	lds	r31, 0x03D3
    31ec:	30 97       	sbiw	r30, 0x00	; 0
    31ee:	81 f0       	breq	.+32     	; 0x3210 <__vector_20+0x48>
    31f0:	90 91 cc 03 	lds	r25, 0x03CC
    31f4:	80 91 ce 03 	lds	r24, 0x03CE
    31f8:	98 17       	cp	r25, r24
    31fa:	50 f4       	brcc	.+20     	; 0x3210 <__vector_20+0x48>
    31fc:	80 91 cc 03 	lds	r24, 0x03CC
    3200:	e8 0f       	add	r30, r24
    3202:	f1 1d       	adc	r31, r1
    3204:	20 83       	st	Z, r18
    3206:	80 91 cc 03 	lds	r24, 0x03CC
    320a:	8f 5f       	subi	r24, 0xFF	; 255
    320c:	80 93 cc 03 	sts	0x03CC, r24
    3210:	90 91 cc 03 	lds	r25, 0x03CC
    3214:	80 91 ce 03 	lds	r24, 0x03CE
    3218:	98 17       	cp	r25, r24
    321a:	31 f4       	brne	.+12     	; 0x3228 <__vector_20+0x60>
    321c:	80 91 cf 03 	lds	r24, 0x03CF
    3220:	88 23       	and	r24, r24
    3222:	11 f0       	breq	.+4      	; 0x3228 <__vector_20+0x60>
    3224:	10 92 cc 03 	sts	0x03CC, r1
    3228:	ff 91       	pop	r31
    322a:	ef 91       	pop	r30
    322c:	9f 91       	pop	r25
    322e:	8f 91       	pop	r24
    3230:	2f 91       	pop	r18
    3232:	0f 90       	pop	r0
    3234:	0b be       	out	0x3b, r0	; 59
    3236:	0f 90       	pop	r0
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	0f 90       	pop	r0
    323c:	1f 90       	pop	r1
    323e:	18 95       	reti

00003240 <__vector_28>:
    3240:	1f 92       	push	r1
    3242:	0f 92       	push	r0
    3244:	0f b6       	in	r0, 0x3f	; 63
    3246:	0f 92       	push	r0
    3248:	0b b6       	in	r0, 0x3b	; 59
    324a:	0f 92       	push	r0
    324c:	11 24       	eor	r1, r1
    324e:	2f 93       	push	r18
    3250:	8f 93       	push	r24
    3252:	9f 93       	push	r25
    3254:	ef 93       	push	r30
    3256:	ff 93       	push	r31
    3258:	20 91 ce 00 	lds	r18, 0x00CE
    325c:	e0 91 dc 03 	lds	r30, 0x03DC
    3260:	f0 91 dd 03 	lds	r31, 0x03DD
    3264:	30 97       	sbiw	r30, 0x00	; 0
    3266:	81 f0       	breq	.+32     	; 0x3288 <__vector_28+0x48>
    3268:	90 91 d6 03 	lds	r25, 0x03D6
    326c:	80 91 d8 03 	lds	r24, 0x03D8
    3270:	98 17       	cp	r25, r24
    3272:	50 f4       	brcc	.+20     	; 0x3288 <__vector_28+0x48>
    3274:	80 91 d6 03 	lds	r24, 0x03D6
    3278:	e8 0f       	add	r30, r24
    327a:	f1 1d       	adc	r31, r1
    327c:	20 83       	st	Z, r18
    327e:	80 91 d6 03 	lds	r24, 0x03D6
    3282:	8f 5f       	subi	r24, 0xFF	; 255
    3284:	80 93 d6 03 	sts	0x03D6, r24
    3288:	90 91 d6 03 	lds	r25, 0x03D6
    328c:	80 91 d8 03 	lds	r24, 0x03D8
    3290:	98 17       	cp	r25, r24
    3292:	31 f4       	brne	.+12     	; 0x32a0 <__vector_28+0x60>
    3294:	80 91 d9 03 	lds	r24, 0x03D9
    3298:	88 23       	and	r24, r24
    329a:	11 f0       	breq	.+4      	; 0x32a0 <__vector_28+0x60>
    329c:	10 92 d6 03 	sts	0x03D6, r1
    32a0:	ff 91       	pop	r31
    32a2:	ef 91       	pop	r30
    32a4:	9f 91       	pop	r25
    32a6:	8f 91       	pop	r24
    32a8:	2f 91       	pop	r18
    32aa:	0f 90       	pop	r0
    32ac:	0b be       	out	0x3b, r0	; 59
    32ae:	0f 90       	pop	r0
    32b0:	0f be       	out	0x3f, r0	; 63
    32b2:	0f 90       	pop	r0
    32b4:	1f 90       	pop	r1
    32b6:	18 95       	reti

000032b8 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    32b8:	cf 93       	push	r28
    32ba:	df 93       	push	r29
    32bc:	38 2f       	mov	r19, r24
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	fc 01       	movw	r30, r24
    32c2:	53 e0       	ldi	r21, 0x03	; 3
    32c4:	ee 0f       	add	r30, r30
    32c6:	ff 1f       	adc	r31, r31
    32c8:	5a 95       	dec	r21
    32ca:	e1 f7       	brne	.-8      	; 0x32c4 <_ZN15OrangutanSerial11uart_tx_isrEh+0xc>
    32cc:	88 0f       	add	r24, r24
    32ce:	99 1f       	adc	r25, r25
    32d0:	e8 0f       	add	r30, r24
    32d2:	f9 1f       	adc	r31, r25
    32d4:	e6 53       	subi	r30, 0x36	; 54
    32d6:	fc 4f       	sbci	r31, 0xFC	; 252
    32d8:	a6 81       	ldd	r26, Z+6	; 0x06
    32da:	b7 81       	ldd	r27, Z+7	; 0x07
    32dc:	10 97       	sbiw	r26, 0x00	; 0
    32de:	09 f4       	brne	.+2      	; 0x32e2 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2a>
    32e0:	64 c0       	rjmp	.+200    	; 0x33aa <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    32e2:	83 2f       	mov	r24, r19
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	fc 01       	movw	r30, r24
    32e8:	23 e0       	ldi	r18, 0x03	; 3
    32ea:	ee 0f       	add	r30, r30
    32ec:	ff 1f       	adc	r31, r31
    32ee:	2a 95       	dec	r18
    32f0:	e1 f7       	brne	.-8      	; 0x32ea <_ZN15OrangutanSerial11uart_tx_isrEh+0x32>
    32f2:	88 0f       	add	r24, r24
    32f4:	99 1f       	adc	r25, r25
    32f6:	e8 0f       	add	r30, r24
    32f8:	f9 1f       	adc	r31, r25
    32fa:	e6 53       	subi	r30, 0x36	; 54
    32fc:	fc 4f       	sbci	r31, 0xFC	; 252
    32fe:	21 81       	ldd	r18, Z+1	; 0x01
    3300:	83 2f       	mov	r24, r19
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	fc 01       	movw	r30, r24
    3306:	63 e0       	ldi	r22, 0x03	; 3
    3308:	ee 0f       	add	r30, r30
    330a:	ff 1f       	adc	r31, r31
    330c:	6a 95       	dec	r22
    330e:	e1 f7       	brne	.-8      	; 0x3308 <_ZN15OrangutanSerial11uart_tx_isrEh+0x50>
    3310:	88 0f       	add	r24, r24
    3312:	99 1f       	adc	r25, r25
    3314:	e8 0f       	add	r30, r24
    3316:	f9 1f       	adc	r31, r25
    3318:	e6 53       	subi	r30, 0x36	; 54
    331a:	fc 4f       	sbci	r31, 0xFC	; 252
    331c:	83 81       	ldd	r24, Z+3	; 0x03
    331e:	28 17       	cp	r18, r24
    3320:	08 f0       	brcs	.+2      	; 0x3324 <_ZN15OrangutanSerial11uart_tx_isrEh+0x6c>
    3322:	43 c0       	rjmp	.+134    	; 0x33aa <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    3324:	33 23       	and	r19, r19
    3326:	19 f0       	breq	.+6      	; 0x332e <_ZN15OrangutanSerial11uart_tx_isrEh+0x76>
    3328:	e8 ec       	ldi	r30, 0xC8	; 200
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	02 c0       	rjmp	.+4      	; 0x3332 <_ZN15OrangutanSerial11uart_tx_isrEh+0x7a>
    332e:	e0 ec       	ldi	r30, 0xC0	; 192
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	80 81       	ld	r24, Z
    3334:	85 ff       	sbrs	r24, 5
    3336:	39 c0       	rjmp	.+114    	; 0x33aa <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    3338:	33 23       	and	r19, r19
    333a:	19 f0       	breq	.+6      	; 0x3342 <_ZN15OrangutanSerial11uart_tx_isrEh+0x8a>
    333c:	ce ec       	ldi	r28, 0xCE	; 206
    333e:	d0 e0       	ldi	r29, 0x00	; 0
    3340:	02 c0       	rjmp	.+4      	; 0x3346 <_ZN15OrangutanSerial11uart_tx_isrEh+0x8e>
    3342:	c6 ec       	ldi	r28, 0xC6	; 198
    3344:	d0 e0       	ldi	r29, 0x00	; 0
    3346:	83 2f       	mov	r24, r19
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	fc 01       	movw	r30, r24
    334c:	43 e0       	ldi	r20, 0x03	; 3
    334e:	ee 0f       	add	r30, r30
    3350:	ff 1f       	adc	r31, r31
    3352:	4a 95       	dec	r20
    3354:	e1 f7       	brne	.-8      	; 0x334e <_ZN15OrangutanSerial11uart_tx_isrEh+0x96>
    3356:	88 0f       	add	r24, r24
    3358:	99 1f       	adc	r25, r25
    335a:	e8 0f       	add	r30, r24
    335c:	f9 1f       	adc	r31, r25
    335e:	e6 53       	subi	r30, 0x36	; 54
    3360:	fc 4f       	sbci	r31, 0xFC	; 252
    3362:	81 81       	ldd	r24, Z+1	; 0x01
    3364:	a8 0f       	add	r26, r24
    3366:	b1 1d       	adc	r27, r1
    3368:	8c 91       	ld	r24, X
    336a:	88 83       	st	Y, r24
    336c:	83 2f       	mov	r24, r19
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	fc 01       	movw	r30, r24
    3372:	73 e0       	ldi	r23, 0x03	; 3
    3374:	ee 0f       	add	r30, r30
    3376:	ff 1f       	adc	r31, r31
    3378:	7a 95       	dec	r23
    337a:	e1 f7       	brne	.-8      	; 0x3374 <_ZN15OrangutanSerial11uart_tx_isrEh+0xbc>
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	e8 0f       	add	r30, r24
    3382:	f9 1f       	adc	r31, r25
    3384:	e6 53       	subi	r30, 0x36	; 54
    3386:	fc 4f       	sbci	r31, 0xFC	; 252
    3388:	21 81       	ldd	r18, Z+1	; 0x01
    338a:	2f 5f       	subi	r18, 0xFF	; 255
    338c:	83 2f       	mov	r24, r19
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	fc 01       	movw	r30, r24
    3392:	53 e0       	ldi	r21, 0x03	; 3
    3394:	ee 0f       	add	r30, r30
    3396:	ff 1f       	adc	r31, r31
    3398:	5a 95       	dec	r21
    339a:	e1 f7       	brne	.-8      	; 0x3394 <_ZN15OrangutanSerial11uart_tx_isrEh+0xdc>
    339c:	88 0f       	add	r24, r24
    339e:	99 1f       	adc	r25, r25
    33a0:	e8 0f       	add	r30, r24
    33a2:	f9 1f       	adc	r31, r25
    33a4:	e6 53       	subi	r30, 0x36	; 54
    33a6:	fc 4f       	sbci	r31, 0xFC	; 252
    33a8:	21 83       	std	Z+1, r18	; 0x01
    33aa:	83 2f       	mov	r24, r19
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	fc 01       	movw	r30, r24
    33b0:	b3 e0       	ldi	r27, 0x03	; 3
    33b2:	ee 0f       	add	r30, r30
    33b4:	ff 1f       	adc	r31, r31
    33b6:	ba 95       	dec	r27
    33b8:	e1 f7       	brne	.-8      	; 0x33b2 <_ZN15OrangutanSerial11uart_tx_isrEh+0xfa>
    33ba:	88 0f       	add	r24, r24
    33bc:	99 1f       	adc	r25, r25
    33be:	e8 0f       	add	r30, r24
    33c0:	f9 1f       	adc	r31, r25
    33c2:	e6 53       	subi	r30, 0x36	; 54
    33c4:	fc 4f       	sbci	r31, 0xFC	; 252
    33c6:	86 81       	ldd	r24, Z+6	; 0x06
    33c8:	97 81       	ldd	r25, Z+7	; 0x07
    33ca:	89 2b       	or	r24, r25
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <_ZN15OrangutanSerial11uart_tx_isrEh+0x118>
    33ce:	43 c0       	rjmp	.+134    	; 0x3456 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    33d0:	83 2f       	mov	r24, r19
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	fc 01       	movw	r30, r24
    33d6:	73 e0       	ldi	r23, 0x03	; 3
    33d8:	ee 0f       	add	r30, r30
    33da:	ff 1f       	adc	r31, r31
    33dc:	7a 95       	dec	r23
    33de:	e1 f7       	brne	.-8      	; 0x33d8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x120>
    33e0:	88 0f       	add	r24, r24
    33e2:	99 1f       	adc	r25, r25
    33e4:	e8 0f       	add	r30, r24
    33e6:	f9 1f       	adc	r31, r25
    33e8:	e6 53       	subi	r30, 0x36	; 54
    33ea:	fc 4f       	sbci	r31, 0xFC	; 252
    33ec:	21 81       	ldd	r18, Z+1	; 0x01
    33ee:	83 2f       	mov	r24, r19
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	fc 01       	movw	r30, r24
    33f4:	53 e0       	ldi	r21, 0x03	; 3
    33f6:	ee 0f       	add	r30, r30
    33f8:	ff 1f       	adc	r31, r31
    33fa:	5a 95       	dec	r21
    33fc:	e1 f7       	brne	.-8      	; 0x33f6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x13e>
    33fe:	88 0f       	add	r24, r24
    3400:	99 1f       	adc	r25, r25
    3402:	e8 0f       	add	r30, r24
    3404:	f9 1f       	adc	r31, r25
    3406:	e6 53       	subi	r30, 0x36	; 54
    3408:	fc 4f       	sbci	r31, 0xFC	; 252
    340a:	83 81       	ldd	r24, Z+3	; 0x03
    340c:	28 17       	cp	r18, r24
    340e:	18 f5       	brcc	.+70     	; 0x3456 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    3410:	83 2f       	mov	r24, r19
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	fc 01       	movw	r30, r24
    3416:	b3 e0       	ldi	r27, 0x03	; 3
    3418:	ee 0f       	add	r30, r30
    341a:	ff 1f       	adc	r31, r31
    341c:	ba 95       	dec	r27
    341e:	e1 f7       	brne	.-8      	; 0x3418 <_ZN15OrangutanSerial11uart_tx_isrEh+0x160>
    3420:	88 0f       	add	r24, r24
    3422:	99 1f       	adc	r25, r25
    3424:	e8 0f       	add	r30, r24
    3426:	f9 1f       	adc	r31, r25
    3428:	e6 53       	subi	r30, 0x36	; 54
    342a:	fc 4f       	sbci	r31, 0xFC	; 252
    342c:	80 81       	ld	r24, Z
    342e:	88 23       	and	r24, r24
    3430:	91 f4       	brne	.+36     	; 0x3456 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    3432:	33 23       	and	r19, r19
    3434:	19 f0       	breq	.+6      	; 0x343c <_ZN15OrangutanSerial11uart_tx_isrEh+0x184>
    3436:	e9 ec       	ldi	r30, 0xC9	; 201
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	02 c0       	rjmp	.+4      	; 0x3440 <_ZN15OrangutanSerial11uart_tx_isrEh+0x188>
    343c:	e1 ec       	ldi	r30, 0xC1	; 193
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	80 81       	ld	r24, Z
    3442:	80 62       	ori	r24, 0x20	; 32
    3444:	04 c0       	rjmp	.+8      	; 0x344e <_ZN15OrangutanSerial11uart_tx_isrEh+0x196>
    3446:	e9 ec       	ldi	r30, 0xC9	; 201
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	80 81       	ld	r24, Z
    344c:	8f 7d       	andi	r24, 0xDF	; 223
    344e:	80 83       	st	Z, r24
    3450:	df 91       	pop	r29
    3452:	cf 91       	pop	r28
    3454:	08 95       	ret
    3456:	33 23       	and	r19, r19
    3458:	b1 f7       	brne	.-20     	; 0x3446 <_ZN15OrangutanSerial11uart_tx_isrEh+0x18e>
    345a:	e1 ec       	ldi	r30, 0xC1	; 193
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	f5 cf       	rjmp	.-22     	; 0x344a <_ZN15OrangutanSerial11uart_tx_isrEh+0x192>

00003460 <_ZN15OrangutanSerial4sendEhPch>:
    3460:	28 2f       	mov	r18, r24
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	fc 01       	movw	r30, r24
    3466:	53 e0       	ldi	r21, 0x03	; 3
    3468:	ee 0f       	add	r30, r30
    346a:	ff 1f       	adc	r31, r31
    346c:	5a 95       	dec	r21
    346e:	e1 f7       	brne	.-8      	; 0x3468 <_ZN15OrangutanSerial4sendEhPch+0x8>
    3470:	88 0f       	add	r24, r24
    3472:	99 1f       	adc	r25, r25
    3474:	e8 0f       	add	r30, r24
    3476:	f9 1f       	adc	r31, r25
    3478:	e6 53       	subi	r30, 0x36	; 54
    347a:	fc 4f       	sbci	r31, 0xFC	; 252
    347c:	77 83       	std	Z+7, r23	; 0x07
    347e:	66 83       	std	Z+6, r22	; 0x06
    3480:	82 2f       	mov	r24, r18
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	fc 01       	movw	r30, r24
    3486:	b3 e0       	ldi	r27, 0x03	; 3
    3488:	ee 0f       	add	r30, r30
    348a:	ff 1f       	adc	r31, r31
    348c:	ba 95       	dec	r27
    348e:	e1 f7       	brne	.-8      	; 0x3488 <_ZN15OrangutanSerial4sendEhPch+0x28>
    3490:	88 0f       	add	r24, r24
    3492:	99 1f       	adc	r25, r25
    3494:	e8 0f       	add	r30, r24
    3496:	f9 1f       	adc	r31, r25
    3498:	e6 53       	subi	r30, 0x36	; 54
    349a:	fc 4f       	sbci	r31, 0xFC	; 252
    349c:	11 82       	std	Z+1, r1	; 0x01
    349e:	82 2f       	mov	r24, r18
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	fc 01       	movw	r30, r24
    34a4:	73 e0       	ldi	r23, 0x03	; 3
    34a6:	ee 0f       	add	r30, r30
    34a8:	ff 1f       	adc	r31, r31
    34aa:	7a 95       	dec	r23
    34ac:	e1 f7       	brne	.-8      	; 0x34a6 <_ZN15OrangutanSerial4sendEhPch+0x46>
    34ae:	88 0f       	add	r24, r24
    34b0:	99 1f       	adc	r25, r25
    34b2:	e8 0f       	add	r30, r24
    34b4:	f9 1f       	adc	r31, r25
    34b6:	e6 53       	subi	r30, 0x36	; 54
    34b8:	fc 4f       	sbci	r31, 0xFC	; 252
    34ba:	43 83       	std	Z+3, r20	; 0x03
    34bc:	22 30       	cpi	r18, 0x02	; 2
    34be:	09 f4       	brne	.+2      	; 0x34c2 <_ZN15OrangutanSerial4sendEhPch+0x62>
    34c0:	49 c0       	rjmp	.+146    	; 0x3554 <_ZN15OrangutanSerial4sendEhPch+0xf4>
    34c2:	82 2f       	mov	r24, r18
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	fc 01       	movw	r30, r24
    34c8:	53 e0       	ldi	r21, 0x03	; 3
    34ca:	ee 0f       	add	r30, r30
    34cc:	ff 1f       	adc	r31, r31
    34ce:	5a 95       	dec	r21
    34d0:	e1 f7       	brne	.-8      	; 0x34ca <_ZN15OrangutanSerial4sendEhPch+0x6a>
    34d2:	88 0f       	add	r24, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	e8 0f       	add	r30, r24
    34d8:	f9 1f       	adc	r31, r25
    34da:	e6 53       	subi	r30, 0x36	; 54
    34dc:	fc 4f       	sbci	r31, 0xFC	; 252
    34de:	86 81       	ldd	r24, Z+6	; 0x06
    34e0:	97 81       	ldd	r25, Z+7	; 0x07
    34e2:	89 2b       	or	r24, r25
    34e4:	91 f1       	breq	.+100    	; 0x354a <_ZN15OrangutanSerial4sendEhPch+0xea>
    34e6:	82 2f       	mov	r24, r18
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	fc 01       	movw	r30, r24
    34ec:	b3 e0       	ldi	r27, 0x03	; 3
    34ee:	ee 0f       	add	r30, r30
    34f0:	ff 1f       	adc	r31, r31
    34f2:	ba 95       	dec	r27
    34f4:	e1 f7       	brne	.-8      	; 0x34ee <_ZN15OrangutanSerial4sendEhPch+0x8e>
    34f6:	88 0f       	add	r24, r24
    34f8:	99 1f       	adc	r25, r25
    34fa:	e8 0f       	add	r30, r24
    34fc:	f9 1f       	adc	r31, r25
    34fe:	e6 53       	subi	r30, 0x36	; 54
    3500:	fc 4f       	sbci	r31, 0xFC	; 252
    3502:	81 81       	ldd	r24, Z+1	; 0x01
    3504:	84 17       	cp	r24, r20
    3506:	08 f5       	brcc	.+66     	; 0x354a <_ZN15OrangutanSerial4sendEhPch+0xea>
    3508:	82 2f       	mov	r24, r18
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	fc 01       	movw	r30, r24
    350e:	73 e0       	ldi	r23, 0x03	; 3
    3510:	ee 0f       	add	r30, r30
    3512:	ff 1f       	adc	r31, r31
    3514:	7a 95       	dec	r23
    3516:	e1 f7       	brne	.-8      	; 0x3510 <_ZN15OrangutanSerial4sendEhPch+0xb0>
    3518:	88 0f       	add	r24, r24
    351a:	99 1f       	adc	r25, r25
    351c:	e8 0f       	add	r30, r24
    351e:	f9 1f       	adc	r31, r25
    3520:	e6 53       	subi	r30, 0x36	; 54
    3522:	fc 4f       	sbci	r31, 0xFC	; 252
    3524:	80 81       	ld	r24, Z
    3526:	88 23       	and	r24, r24
    3528:	81 f4       	brne	.+32     	; 0x354a <_ZN15OrangutanSerial4sendEhPch+0xea>
    352a:	22 23       	and	r18, r18
    352c:	19 f0       	breq	.+6      	; 0x3534 <_ZN15OrangutanSerial4sendEhPch+0xd4>
    352e:	e9 ec       	ldi	r30, 0xC9	; 201
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	02 c0       	rjmp	.+4      	; 0x3538 <_ZN15OrangutanSerial4sendEhPch+0xd8>
    3534:	e1 ec       	ldi	r30, 0xC1	; 193
    3536:	f0 e0       	ldi	r31, 0x00	; 0
    3538:	80 81       	ld	r24, Z
    353a:	80 62       	ori	r24, 0x20	; 32
    353c:	04 c0       	rjmp	.+8      	; 0x3546 <_ZN15OrangutanSerial4sendEhPch+0xe6>
    353e:	e9 ec       	ldi	r30, 0xC9	; 201
    3540:	f0 e0       	ldi	r31, 0x00	; 0
    3542:	80 81       	ld	r24, Z
    3544:	8f 7d       	andi	r24, 0xDF	; 223
    3546:	80 83       	st	Z, r24
    3548:	08 95       	ret
    354a:	22 23       	and	r18, r18
    354c:	c1 f7       	brne	.-16     	; 0x353e <_ZN15OrangutanSerial4sendEhPch+0xde>
    354e:	e1 ec       	ldi	r30, 0xC1	; 193
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	f7 cf       	rjmp	.-18     	; 0x3542 <_ZN15OrangutanSerial4sendEhPch+0xe2>
    3554:	08 95       	ret

00003556 <serial_send>:
    3556:	0e 94 30 1a 	call	0x3460	; 0x3460 <_ZN15OrangutanSerial4sendEhPch>
    355a:	08 95       	ret

0000355c <__vector_21>:
    355c:	1f 92       	push	r1
    355e:	0f 92       	push	r0
    3560:	0f b6       	in	r0, 0x3f	; 63
    3562:	0f 92       	push	r0
    3564:	0b b6       	in	r0, 0x3b	; 59
    3566:	0f 92       	push	r0
    3568:	11 24       	eor	r1, r1
    356a:	2f 93       	push	r18
    356c:	3f 93       	push	r19
    356e:	4f 93       	push	r20
    3570:	5f 93       	push	r21
    3572:	6f 93       	push	r22
    3574:	7f 93       	push	r23
    3576:	8f 93       	push	r24
    3578:	9f 93       	push	r25
    357a:	af 93       	push	r26
    357c:	bf 93       	push	r27
    357e:	ef 93       	push	r30
    3580:	ff 93       	push	r31
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_ZN15OrangutanSerial11uart_tx_isrEh>
    3588:	ff 91       	pop	r31
    358a:	ef 91       	pop	r30
    358c:	bf 91       	pop	r27
    358e:	af 91       	pop	r26
    3590:	9f 91       	pop	r25
    3592:	8f 91       	pop	r24
    3594:	7f 91       	pop	r23
    3596:	6f 91       	pop	r22
    3598:	5f 91       	pop	r21
    359a:	4f 91       	pop	r20
    359c:	3f 91       	pop	r19
    359e:	2f 91       	pop	r18
    35a0:	0f 90       	pop	r0
    35a2:	0b be       	out	0x3b, r0	; 59
    35a4:	0f 90       	pop	r0
    35a6:	0f be       	out	0x3f, r0	; 63
    35a8:	0f 90       	pop	r0
    35aa:	1f 90       	pop	r1
    35ac:	18 95       	reti

000035ae <__vector_29>:
    35ae:	1f 92       	push	r1
    35b0:	0f 92       	push	r0
    35b2:	0f b6       	in	r0, 0x3f	; 63
    35b4:	0f 92       	push	r0
    35b6:	0b b6       	in	r0, 0x3b	; 59
    35b8:	0f 92       	push	r0
    35ba:	11 24       	eor	r1, r1
    35bc:	2f 93       	push	r18
    35be:	3f 93       	push	r19
    35c0:	4f 93       	push	r20
    35c2:	5f 93       	push	r21
    35c4:	6f 93       	push	r22
    35c6:	7f 93       	push	r23
    35c8:	8f 93       	push	r24
    35ca:	9f 93       	push	r25
    35cc:	af 93       	push	r26
    35ce:	bf 93       	push	r27
    35d0:	ef 93       	push	r30
    35d2:	ff 93       	push	r31
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_ZN15OrangutanSerial11uart_tx_isrEh>
    35da:	ff 91       	pop	r31
    35dc:	ef 91       	pop	r30
    35de:	bf 91       	pop	r27
    35e0:	af 91       	pop	r26
    35e2:	9f 91       	pop	r25
    35e4:	8f 91       	pop	r24
    35e6:	7f 91       	pop	r23
    35e8:	6f 91       	pop	r22
    35ea:	5f 91       	pop	r21
    35ec:	4f 91       	pop	r20
    35ee:	3f 91       	pop	r19
    35f0:	2f 91       	pop	r18
    35f2:	0f 90       	pop	r0
    35f4:	0b be       	out	0x3b, r0	; 59
    35f6:	0f 90       	pop	r0
    35f8:	0f be       	out	0x3f, r0	; 63
    35fa:	0f 90       	pop	r0
    35fc:	1f 90       	pop	r1
    35fe:	18 95       	reti

00003600 <_ZN15OrangutanSerial15serial_tx_checkEh>:
    3600:	98 2f       	mov	r25, r24
    3602:	82 30       	cpi	r24, 0x02	; 2
    3604:	71 f0       	breq	.+28     	; 0x3622 <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    3606:	88 23       	and	r24, r24
    3608:	19 f0       	breq	.+6      	; 0x3610 <_ZN15OrangutanSerial15serial_tx_checkEh+0x10>
    360a:	e9 ec       	ldi	r30, 0xC9	; 201
    360c:	f0 e0       	ldi	r31, 0x00	; 0
    360e:	02 c0       	rjmp	.+4      	; 0x3614 <_ZN15OrangutanSerial15serial_tx_checkEh+0x14>
    3610:	e1 ec       	ldi	r30, 0xC1	; 193
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	80 81       	ld	r24, Z
    3616:	8f 7d       	andi	r24, 0xDF	; 223
    3618:	80 83       	st	Z, r24
    361a:	89 2f       	mov	r24, r25
    361c:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_ZN15OrangutanSerial11uart_tx_isrEh>
    3620:	08 95       	ret
    3622:	e0 91 e4 03 	lds	r30, 0x03E4
    3626:	f0 91 e5 03 	lds	r31, 0x03E5
    362a:	30 97       	sbiw	r30, 0x00	; 0
    362c:	b1 f0       	breq	.+44     	; 0x365a <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    362e:	90 91 df 03 	lds	r25, 0x03DF
    3632:	80 91 e1 03 	lds	r24, 0x03E1
    3636:	98 17       	cp	r25, r24
    3638:	80 f4       	brcc	.+32     	; 0x365a <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    363a:	06 c0       	rjmp	.+12     	; 0x3648 <_ZN15OrangutanSerial15serial_tx_checkEh+0x48>
    363c:	80 91 df 03 	lds	r24, 0x03DF
    3640:	8f 5f       	subi	r24, 0xFF	; 255
    3642:	80 93 df 03 	sts	0x03DF, r24
    3646:	ed cf       	rjmp	.-38     	; 0x3622 <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    3648:	80 91 df 03 	lds	r24, 0x03DF
    364c:	e8 0f       	add	r30, r24
    364e:	f1 1d       	adc	r31, r1
    3650:	80 81       	ld	r24, Z
    3652:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <_ZN12OrangutanSVP17serialSendIfReadyEc>
    3656:	88 23       	and	r24, r24
    3658:	89 f7       	brne	.-30     	; 0x363c <_ZN15OrangutanSerial15serial_tx_checkEh+0x3c>
    365a:	08 95       	ret

0000365c <_ZN15OrangutanSerial15serial_rx_checkEh>:
    365c:	0f 93       	push	r16
    365e:	1f 93       	push	r17
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
    3664:	68 2f       	mov	r22, r24
    3666:	82 30       	cpi	r24, 0x02	; 2
    3668:	09 f4       	brne	.+2      	; 0x366c <_ZN15OrangutanSerial15serial_rx_checkEh+0x10>
    366a:	9c c0       	rjmp	.+312    	; 0x37a4 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    366c:	88 23       	and	r24, r24
    366e:	19 f0       	breq	.+6      	; 0x3676 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1a>
    3670:	e9 ec       	ldi	r30, 0xC9	; 201
    3672:	f0 e0       	ldi	r31, 0x00	; 0
    3674:	02 c0       	rjmp	.+4      	; 0x367a <_ZN15OrangutanSerial15serial_rx_checkEh+0x1e>
    3676:	e1 ec       	ldi	r30, 0xC1	; 193
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	80 81       	ld	r24, Z
    367c:	8f 77       	andi	r24, 0x7F	; 127
    367e:	80 83       	st	Z, r24
    3680:	46 2f       	mov	r20, r22
    3682:	50 e0       	ldi	r21, 0x00	; 0
    3684:	da 01       	movw	r26, r20
    3686:	aa 0f       	add	r26, r26
    3688:	bb 1f       	adc	r27, r27
    368a:	ca 01       	movw	r24, r20
    368c:	23 e0       	ldi	r18, 0x03	; 3
    368e:	88 0f       	add	r24, r24
    3690:	99 1f       	adc	r25, r25
    3692:	2a 95       	dec	r18
    3694:	e1 f7       	brne	.-8      	; 0x368e <_ZN15OrangutanSerial15serial_rx_checkEh+0x32>
    3696:	a8 0f       	add	r26, r24
    3698:	b9 1f       	adc	r27, r25
    369a:	a6 53       	subi	r26, 0x36	; 54
    369c:	bc 4f       	sbci	r27, 0xFC	; 252
    369e:	18 96       	adiw	r26, 0x08	; 8
    36a0:	cd 91       	ld	r28, X+
    36a2:	dc 91       	ld	r29, X
    36a4:	19 97       	sbiw	r26, 0x09	; 9
    36a6:	20 97       	sbiw	r28, 0x00	; 0
    36a8:	09 f4       	brne	.+2      	; 0x36ac <_ZN15OrangutanSerial15serial_rx_checkEh+0x50>
    36aa:	5a c0       	rjmp	.+180    	; 0x3760 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    36ac:	fa 01       	movw	r30, r20
    36ae:	ee 0f       	add	r30, r30
    36b0:	ff 1f       	adc	r31, r31
    36b2:	ee 0f       	add	r30, r30
    36b4:	ff 1f       	adc	r31, r31
    36b6:	e4 0f       	add	r30, r20
    36b8:	f5 1f       	adc	r31, r21
    36ba:	ee 0f       	add	r30, r30
    36bc:	ff 1f       	adc	r31, r31
    36be:	e4 53       	subi	r30, 0x34	; 52
    36c0:	fc 4f       	sbci	r31, 0xFC	; 252
    36c2:	80 81       	ld	r24, Z
    36c4:	14 96       	adiw	r26, 0x04	; 4
    36c6:	2c 91       	ld	r18, X
    36c8:	82 17       	cp	r24, r18
    36ca:	08 f0       	brcs	.+2      	; 0x36ce <_ZN15OrangutanSerial15serial_rx_checkEh+0x72>
    36cc:	49 c0       	rjmp	.+146    	; 0x3760 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    36ce:	66 23       	and	r22, r22
    36d0:	19 f0       	breq	.+6      	; 0x36d8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x7c>
    36d2:	e8 ec       	ldi	r30, 0xC8	; 200
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	02 c0       	rjmp	.+4      	; 0x36dc <_ZN15OrangutanSerial15serial_rx_checkEh+0x80>
    36d8:	e0 ec       	ldi	r30, 0xC0	; 192
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	80 81       	ld	r24, Z
    36de:	87 ff       	sbrs	r24, 7
    36e0:	3f c0       	rjmp	.+126    	; 0x3760 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    36e2:	66 23       	and	r22, r22
    36e4:	19 f4       	brne	.+6      	; 0x36ec <_ZN15OrangutanSerial15serial_rx_checkEh+0x90>
    36e6:	e6 ec       	ldi	r30, 0xC6	; 198
    36e8:	f0 e0       	ldi	r31, 0x00	; 0
    36ea:	02 c0       	rjmp	.+4      	; 0x36f0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x94>
    36ec:	ee ec       	ldi	r30, 0xCE	; 206
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	90 81       	ld	r25, Z
    36f2:	fa 01       	movw	r30, r20
    36f4:	ee 0f       	add	r30, r30
    36f6:	ff 1f       	adc	r31, r31
    36f8:	ee 0f       	add	r30, r30
    36fa:	ff 1f       	adc	r31, r31
    36fc:	e4 0f       	add	r30, r20
    36fe:	f5 1f       	adc	r31, r21
    3700:	ee 0f       	add	r30, r30
    3702:	ff 1f       	adc	r31, r31
    3704:	e4 53       	subi	r30, 0x34	; 52
    3706:	fc 4f       	sbci	r31, 0xFC	; 252
    3708:	80 81       	ld	r24, Z
    370a:	82 17       	cp	r24, r18
    370c:	38 f4       	brcc	.+14     	; 0x371c <_ZN15OrangutanSerial15serial_rx_checkEh+0xc0>
    370e:	80 81       	ld	r24, Z
    3710:	c8 0f       	add	r28, r24
    3712:	d1 1d       	adc	r29, r1
    3714:	98 83       	st	Y, r25
    3716:	80 81       	ld	r24, Z
    3718:	8f 5f       	subi	r24, 0xFF	; 255
    371a:	80 83       	st	Z, r24
    371c:	fa 01       	movw	r30, r20
    371e:	ee 0f       	add	r30, r30
    3720:	ff 1f       	adc	r31, r31
    3722:	ee 0f       	add	r30, r30
    3724:	ff 1f       	adc	r31, r31
    3726:	e4 0f       	add	r30, r20
    3728:	f5 1f       	adc	r31, r21
    372a:	ee 0f       	add	r30, r30
    372c:	ff 1f       	adc	r31, r31
    372e:	e4 53       	subi	r30, 0x34	; 52
    3730:	fc 4f       	sbci	r31, 0xFC	; 252
    3732:	80 81       	ld	r24, Z
    3734:	da 01       	movw	r26, r20
    3736:	aa 0f       	add	r26, r26
    3738:	bb 1f       	adc	r27, r27
    373a:	9a 01       	movw	r18, r20
    373c:	13 e0       	ldi	r17, 0x03	; 3
    373e:	22 0f       	add	r18, r18
    3740:	33 1f       	adc	r19, r19
    3742:	1a 95       	dec	r17
    3744:	e1 f7       	brne	.-8      	; 0x373e <_ZN15OrangutanSerial15serial_rx_checkEh+0xe2>
    3746:	a2 0f       	add	r26, r18
    3748:	b3 1f       	adc	r27, r19
    374a:	a6 53       	subi	r26, 0x36	; 54
    374c:	bc 4f       	sbci	r27, 0xFC	; 252
    374e:	14 96       	adiw	r26, 0x04	; 4
    3750:	9c 91       	ld	r25, X
    3752:	14 97       	sbiw	r26, 0x04	; 4
    3754:	89 17       	cp	r24, r25
    3756:	21 f4       	brne	.+8      	; 0x3760 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3758:	15 96       	adiw	r26, 0x05	; 5
    375a:	8c 91       	ld	r24, X
    375c:	81 11       	cpse	r24, r1
    375e:	10 82       	st	Z, r1
    3760:	fa 01       	movw	r30, r20
    3762:	a3 e0       	ldi	r26, 0x03	; 3
    3764:	ee 0f       	add	r30, r30
    3766:	ff 1f       	adc	r31, r31
    3768:	aa 95       	dec	r26
    376a:	e1 f7       	brne	.-8      	; 0x3764 <_ZN15OrangutanSerial15serial_rx_checkEh+0x108>
    376c:	44 0f       	add	r20, r20
    376e:	55 1f       	adc	r21, r21
    3770:	e4 0f       	add	r30, r20
    3772:	f5 1f       	adc	r31, r21
    3774:	e6 53       	subi	r30, 0x36	; 54
    3776:	fc 4f       	sbci	r31, 0xFC	; 252
    3778:	80 81       	ld	r24, Z
    377a:	88 23       	and	r24, r24
    377c:	09 f0       	breq	.+2      	; 0x3780 <_ZN15OrangutanSerial15serial_rx_checkEh+0x124>
    377e:	59 c0       	rjmp	.+178    	; 0x3832 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3780:	66 23       	and	r22, r22
    3782:	19 f0       	breq	.+6      	; 0x378a <_ZN15OrangutanSerial15serial_rx_checkEh+0x12e>
    3784:	e9 ec       	ldi	r30, 0xC9	; 201
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	02 c0       	rjmp	.+4      	; 0x378e <_ZN15OrangutanSerial15serial_rx_checkEh+0x132>
    378a:	e1 ec       	ldi	r30, 0xC1	; 193
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	80 81       	ld	r24, Z
    3790:	80 68       	ori	r24, 0x80	; 128
    3792:	80 83       	st	Z, r24
    3794:	4e c0       	rjmp	.+156    	; 0x3832 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3796:	80 91 e3 03 	lds	r24, 0x03E3
    379a:	88 23       	and	r24, r24
    379c:	19 f0       	breq	.+6      	; 0x37a4 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    379e:	10 92 e0 03 	sts	0x03E0, r1
    37a2:	47 c0       	rjmp	.+142    	; 0x3832 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    37a4:	80 91 e6 03 	lds	r24, 0x03E6
    37a8:	90 91 e7 03 	lds	r25, 0x03E7
    37ac:	89 2b       	or	r24, r25
    37ae:	09 f4       	brne	.+2      	; 0x37b2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x156>
    37b0:	40 c0       	rjmp	.+128    	; 0x3832 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    37b2:	90 91 e0 03 	lds	r25, 0x03E0
    37b6:	80 91 e2 03 	lds	r24, 0x03E2
    37ba:	98 17       	cp	r25, r24
    37bc:	d0 f5       	brcc	.+116    	; 0x3832 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    37be:	80 91 03 04 	lds	r24, 0x0403
    37c2:	88 23       	and	r24, r24
    37c4:	a9 f4       	brne	.+42     	; 0x37f0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x194>
    37c6:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_ZN12OrangutanSVP15serialReadStartEv>
    37ca:	80 93 03 04 	sts	0x0403, r24
    37ce:	10 e0       	ldi	r17, 0x00	; 0
    37d0:	0b c0       	rjmp	.+22     	; 0x37e8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x18c>
    37d2:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <_ZN12OrangutanSVP11getNextByteEv>
    37d6:	e0 2f       	mov	r30, r16
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	31 97       	sbiw	r30, 0x01	; 1
    37dc:	e1 1b       	sub	r30, r17
    37de:	f1 09       	sbc	r31, r1
    37e0:	ec 5f       	subi	r30, 0xFC	; 252
    37e2:	fb 4f       	sbci	r31, 0xFB	; 251
    37e4:	80 83       	st	Z, r24
    37e6:	1f 5f       	subi	r17, 0xFF	; 255
    37e8:	00 91 03 04 	lds	r16, 0x0403
    37ec:	10 17       	cp	r17, r16
    37ee:	88 f3       	brcs	.-30     	; 0x37d2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x176>
    37f0:	e0 91 03 04 	lds	r30, 0x0403
    37f4:	ee 23       	and	r30, r30
    37f6:	e9 f0       	breq	.+58     	; 0x3832 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    37f8:	80 91 e0 03 	lds	r24, 0x03E0
    37fc:	a0 91 e6 03 	lds	r26, 0x03E6
    3800:	b0 91 e7 03 	lds	r27, 0x03E7
    3804:	a8 0f       	add	r26, r24
    3806:	b1 1d       	adc	r27, r1
    3808:	e1 50       	subi	r30, 0x01	; 1
    380a:	e0 93 03 04 	sts	0x0403, r30
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	ec 5f       	subi	r30, 0xFC	; 252
    3812:	fb 4f       	sbci	r31, 0xFB	; 251
    3814:	80 81       	ld	r24, Z
    3816:	8c 93       	st	X, r24
    3818:	80 91 e0 03 	lds	r24, 0x03E0
    381c:	8f 5f       	subi	r24, 0xFF	; 255
    381e:	80 93 e0 03 	sts	0x03E0, r24
    3822:	90 91 e0 03 	lds	r25, 0x03E0
    3826:	80 91 e2 03 	lds	r24, 0x03E2
    382a:	98 17       	cp	r25, r24
    382c:	09 f0       	breq	.+2      	; 0x3830 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d4>
    382e:	ba cf       	rjmp	.-140    	; 0x37a4 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    3830:	b2 cf       	rjmp	.-156    	; 0x3796 <_ZN15OrangutanSerial15serial_rx_checkEh+0x13a>
    3832:	df 91       	pop	r29
    3834:	cf 91       	pop	r28
    3836:	1f 91       	pop	r17
    3838:	0f 91       	pop	r16
    383a:	08 95       	ret

0000383c <_ZN15OrangutanSerial5checkEv>:
    383c:	80 e0       	ldi	r24, 0x00	; 0
    383e:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN15OrangutanSerial15serial_tx_checkEh>
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN15OrangutanSerial15serial_tx_checkEh>
    3848:	82 e0       	ldi	r24, 0x02	; 2
    384a:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN15OrangutanSerial15serial_tx_checkEh>
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	0e 94 2e 1b 	call	0x365c	; 0x365c <_ZN15OrangutanSerial15serial_rx_checkEh>
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	0e 94 2e 1b 	call	0x365c	; 0x365c <_ZN15OrangutanSerial15serial_rx_checkEh>
    385a:	82 e0       	ldi	r24, 0x02	; 2
    385c:	0e 94 2e 1b 	call	0x365c	; 0x365c <_ZN15OrangutanSerial15serial_rx_checkEh>
    3860:	08 95       	ret

00003862 <_ZN15OrangutanSerial12sendBlockingEhPch>:
    3862:	1f 93       	push	r17
    3864:	18 2f       	mov	r17, r24
    3866:	0e 94 30 1a 	call	0x3460	; 0x3460 <_ZN15OrangutanSerial4sendEhPch>
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <_ZN15OrangutanSerial12sendBlockingEhPch+0xe>
    386c:	0e 94 1e 1c 	call	0x383c	; 0x383c <_ZN15OrangutanSerial5checkEv>
    3870:	81 2f       	mov	r24, r17
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	fc 01       	movw	r30, r24
    3876:	73 e0       	ldi	r23, 0x03	; 3
    3878:	ee 0f       	add	r30, r30
    387a:	ff 1f       	adc	r31, r31
    387c:	7a 95       	dec	r23
    387e:	e1 f7       	brne	.-8      	; 0x3878 <_ZN15OrangutanSerial12sendBlockingEhPch+0x16>
    3880:	88 0f       	add	r24, r24
    3882:	99 1f       	adc	r25, r25
    3884:	e8 0f       	add	r30, r24
    3886:	f9 1f       	adc	r31, r25
    3888:	e6 53       	subi	r30, 0x36	; 54
    388a:	fc 4f       	sbci	r31, 0xFC	; 252
    388c:	21 81       	ldd	r18, Z+1	; 0x01
    388e:	81 2f       	mov	r24, r17
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	fc 01       	movw	r30, r24
    3894:	53 e0       	ldi	r21, 0x03	; 3
    3896:	ee 0f       	add	r30, r30
    3898:	ff 1f       	adc	r31, r31
    389a:	5a 95       	dec	r21
    389c:	e1 f7       	brne	.-8      	; 0x3896 <_ZN15OrangutanSerial12sendBlockingEhPch+0x34>
    389e:	88 0f       	add	r24, r24
    38a0:	99 1f       	adc	r25, r25
    38a2:	e8 0f       	add	r30, r24
    38a4:	f9 1f       	adc	r31, r25
    38a6:	e6 53       	subi	r30, 0x36	; 54
    38a8:	fc 4f       	sbci	r31, 0xFC	; 252
    38aa:	83 81       	ldd	r24, Z+3	; 0x03
    38ac:	28 17       	cp	r18, r24
    38ae:	f1 f6       	brne	.-68     	; 0x386c <_ZN15OrangutanSerial12sendBlockingEhPch+0xa>
    38b0:	1f 91       	pop	r17
    38b2:	08 95       	ret

000038b4 <serial_send_blocking>:
    38b4:	0e 94 31 1c 	call	0x3862	; 0x3862 <_ZN15OrangutanSerial12sendBlockingEhPch>
    38b8:	08 95       	ret

000038ba <_ZN15OrangutanSerial15receiveBlockingEhPchj>:
    38ba:	a0 e0       	ldi	r26, 0x00	; 0
    38bc:	b0 e0       	ldi	r27, 0x00	; 0
    38be:	e3 e6       	ldi	r30, 0x63	; 99
    38c0:	fc e1       	ldi	r31, 0x1C	; 28
    38c2:	0c 94 a6 1f 	jmp	0x3f4c	; 0x3f4c <__prologue_saves__+0xc>
    38c6:	08 2f       	mov	r16, r24
    38c8:	79 01       	movw	r14, r18
    38ca:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZN15OrangutanSerial7receiveEhPch>
    38ce:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <get_ms>
    38d2:	4b 01       	movw	r8, r22
    38d4:	5c 01       	movw	r10, r24
    38d6:	10 e0       	ldi	r17, 0x00	; 0
    38d8:	e8 01       	movw	r28, r16
    38da:	cc 0f       	add	r28, r28
    38dc:	dd 1f       	adc	r29, r29
    38de:	cc 0f       	add	r28, r28
    38e0:	dd 1f       	adc	r29, r29
    38e2:	c0 0f       	add	r28, r16
    38e4:	d1 1f       	adc	r29, r17
    38e6:	cc 0f       	add	r28, r28
    38e8:	dd 1f       	adc	r29, r29
    38ea:	c4 53       	subi	r28, 0x34	; 52
    38ec:	dc 4f       	sbci	r29, 0xFC	; 252
    38ee:	68 01       	movw	r12, r16
    38f0:	f3 e0       	ldi	r31, 0x03	; 3
    38f2:	cc 0c       	add	r12, r12
    38f4:	dd 1c       	adc	r13, r13
    38f6:	fa 95       	dec	r31
    38f8:	e1 f7       	brne	.-8      	; 0x38f2 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x38>
    38fa:	00 0f       	add	r16, r16
    38fc:	11 1f       	adc	r17, r17
    38fe:	c0 0e       	add	r12, r16
    3900:	d1 1e       	adc	r13, r17
    3902:	8e ec       	ldi	r24, 0xCE	; 206
    3904:	93 e0       	ldi	r25, 0x03	; 3
    3906:	c8 0e       	add	r12, r24
    3908:	d9 1e       	adc	r13, r25
    390a:	00 e0       	ldi	r16, 0x00	; 0
    390c:	10 e0       	ldi	r17, 0x00	; 0
    390e:	0e 94 1e 1c 	call	0x383c	; 0x383c <_ZN15OrangutanSerial5checkEv>
    3912:	98 81       	ld	r25, Y
    3914:	f6 01       	movw	r30, r12
    3916:	80 81       	ld	r24, Z
    3918:	98 17       	cp	r25, r24
    391a:	11 f4       	brne	.+4      	; 0x3920 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x66>
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	0c c0       	rjmp	.+24     	; 0x3938 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x7e>
    3920:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <get_ms>
    3924:	68 19       	sub	r22, r8
    3926:	79 09       	sbc	r23, r9
    3928:	8a 09       	sbc	r24, r10
    392a:	9b 09       	sbc	r25, r11
    392c:	6e 15       	cp	r22, r14
    392e:	7f 05       	cpc	r23, r15
    3930:	80 07       	cpc	r24, r16
    3932:	91 07       	cpc	r25, r17
    3934:	60 f3       	brcs	.-40     	; 0x390e <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x54>
    3936:	81 e0       	ldi	r24, 0x01	; 1
    3938:	cd b7       	in	r28, 0x3d	; 61
    393a:	de b7       	in	r29, 0x3e	; 62
    393c:	ec e0       	ldi	r30, 0x0C	; 12
    393e:	0c 94 c2 1f 	jmp	0x3f84	; 0x3f84 <__epilogue_restores__+0xc>

00003942 <serial_receive_blocking>:
    3942:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <_ZN15OrangutanSerial15receiveBlockingEhPchj>
    3946:	08 95       	ret

00003948 <serial_check>:
    3948:	0e 94 1e 1c 	call	0x383c	; 0x383c <_ZN15OrangutanSerial5checkEv>
    394c:	08 95       	ret

0000394e <__vector_11>:
    394e:	2f 92       	push	r2
    3950:	8f 93       	push	r24
    3952:	9f 93       	push	r25
    3954:	2f b6       	in	r2, 0x3f	; 63
    3956:	80 91 0d 04 	lds	r24, 0x040D
    395a:	90 91 0e 04 	lds	r25, 0x040E
    395e:	01 96       	adiw	r24, 0x01	; 1
    3960:	80 93 0d 04 	sts	0x040D, r24
    3964:	90 93 0e 04 	sts	0x040E, r25
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	80 91 0f 04 	lds	r24, 0x040F
    396e:	89 1f       	adc	r24, r25
    3970:	80 93 0f 04 	sts	0x040F, r24
    3974:	90 91 15 04 	lds	r25, 0x0415
    3978:	9c 5f       	subi	r25, 0xFC	; 252
    397a:	90 93 15 04 	sts	0x0415, r25
    397e:	80 91 14 04 	lds	r24, 0x0414
    3982:	80 51       	subi	r24, 0x10	; 16
    3984:	97 42       	sbci	r25, 0x27	; 39
    3986:	c0 f0       	brcs	.+48     	; 0x39b8 <end>
    3988:	90 93 15 04 	sts	0x0415, r25
    398c:	80 93 14 04 	sts	0x0414, r24
    3990:	80 91 10 04 	lds	r24, 0x0410
    3994:	90 91 11 04 	lds	r25, 0x0411
    3998:	01 96       	adiw	r24, 0x01	; 1
    399a:	80 93 10 04 	sts	0x0410, r24
    399e:	90 93 11 04 	sts	0x0411, r25
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	80 91 12 04 	lds	r24, 0x0412
    39a8:	89 1f       	adc	r24, r25
    39aa:	80 93 12 04 	sts	0x0412, r24
    39ae:	80 91 13 04 	lds	r24, 0x0413
    39b2:	89 1f       	adc	r24, r25
    39b4:	80 93 13 04 	sts	0x0413, r24

000039b8 <end>:
    39b8:	2f be       	out	0x3f, r2	; 63
    39ba:	9f 91       	pop	r25
    39bc:	8f 91       	pop	r24
    39be:	2f 90       	pop	r2
    39c0:	18 95       	reti

000039c2 <ticks_to_microseconds>:
    39c2:	6f 5f       	subi	r22, 0xFF	; 255
    39c4:	7f 4f       	sbci	r23, 0xFF	; 255
    39c6:	8f 4f       	sbci	r24, 0xFF	; 255
    39c8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ca:	66 0f       	add	r22, r22
    39cc:	77 1f       	adc	r23, r23
    39ce:	88 1f       	adc	r24, r24
    39d0:	99 1f       	adc	r25, r25
    39d2:	25 e0       	ldi	r18, 0x05	; 5
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	40 e0       	ldi	r20, 0x00	; 0
    39d8:	50 e0       	ldi	r21, 0x00	; 0
    39da:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__udivmodsi4>
    39de:	ca 01       	movw	r24, r20
    39e0:	b9 01       	movw	r22, r18
    39e2:	08 95       	ret

000039e4 <delay_ms>:
    39e4:	28 ee       	ldi	r18, 0xE8	; 232
    39e6:	33 e0       	ldi	r19, 0x03	; 3
    39e8:	09 c0       	rjmp	.+18     	; 0x39fc <delay_ms+0x18>
    39ea:	f9 01       	movw	r30, r18
    39ec:	6f 93       	push	r22
    39ee:	64 e0       	ldi	r22, 0x04	; 4
    39f0:	6a 95       	dec	r22
    39f2:	f1 f7       	brne	.-4      	; 0x39f0 <delay_ms+0xc>
    39f4:	6f 91       	pop	r22
    39f6:	31 97       	sbiw	r30, 0x01	; 1
    39f8:	c9 f7       	brne	.-14     	; 0x39ec <delay_ms+0x8>
    39fa:	01 97       	sbiw	r24, 0x01	; 1
    39fc:	00 97       	sbiw	r24, 0x00	; 0
    39fe:	a9 f7       	brne	.-22     	; 0x39ea <delay_ms+0x6>
    3a00:	08 95       	ret

00003a02 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    3a02:	6f 5f       	subi	r22, 0xFF	; 255
    3a04:	7f 4f       	sbci	r23, 0xFF	; 255
    3a06:	8f 4f       	sbci	r24, 0xFF	; 255
    3a08:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0a:	66 0f       	add	r22, r22
    3a0c:	77 1f       	adc	r23, r23
    3a0e:	88 1f       	adc	r24, r24
    3a10:	99 1f       	adc	r25, r25
    3a12:	25 e0       	ldi	r18, 0x05	; 5
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	40 e0       	ldi	r20, 0x00	; 0
    3a18:	50 e0       	ldi	r21, 0x00	; 0
    3a1a:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__udivmodsi4>
    3a1e:	ca 01       	movw	r24, r20
    3a20:	b9 01       	movw	r22, r18
    3a22:	08 95       	ret

00003a24 <_ZN13OrangutanTime17delayMillisecondsEj>:
    3a24:	28 ee       	ldi	r18, 0xE8	; 232
    3a26:	33 e0       	ldi	r19, 0x03	; 3
    3a28:	09 c0       	rjmp	.+18     	; 0x3a3c <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3a2a:	f9 01       	movw	r30, r18
    3a2c:	6f 93       	push	r22
    3a2e:	64 e0       	ldi	r22, 0x04	; 4
    3a30:	6a 95       	dec	r22
    3a32:	f1 f7       	brne	.-4      	; 0x3a30 <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3a34:	6f 91       	pop	r22
    3a36:	31 97       	sbiw	r30, 0x01	; 1
    3a38:	c9 f7       	brne	.-14     	; 0x3a2c <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3a3a:	01 97       	sbiw	r24, 0x01	; 1
    3a3c:	00 97       	sbiw	r24, 0x00	; 0
    3a3e:	a9 f7       	brne	.-22     	; 0x3a2a <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    3a40:	08 95       	ret

00003a42 <_ZN13OrangutanTime5init2Ev>:
    3a42:	a0 e7       	ldi	r26, 0x70	; 112
    3a44:	b0 e0       	ldi	r27, 0x00	; 0
    3a46:	8c 91       	ld	r24, X
    3a48:	8e 7f       	andi	r24, 0xFE	; 254
    3a4a:	8c 93       	st	X, r24
    3a4c:	e0 eb       	ldi	r30, 0xB0	; 176
    3a4e:	f0 e0       	ldi	r31, 0x00	; 0
    3a50:	80 81       	ld	r24, Z
    3a52:	83 60       	ori	r24, 0x03	; 3
    3a54:	80 83       	st	Z, r24
    3a56:	e1 eb       	ldi	r30, 0xB1	; 177
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	80 81       	ld	r24, Z
    3a5c:	80 7f       	andi	r24, 0xF0	; 240
    3a5e:	80 83       	st	Z, r24
    3a60:	80 81       	ld	r24, Z
    3a62:	82 60       	ori	r24, 0x02	; 2
    3a64:	80 83       	st	Z, r24
    3a66:	b8 9a       	sbi	0x17, 0	; 23
    3a68:	8c 91       	ld	r24, X
    3a6a:	81 60       	ori	r24, 0x01	; 1
    3a6c:	8c 93       	st	X, r24
    3a6e:	78 94       	sei
    3a70:	08 95       	ret

00003a72 <_ZN13OrangutanTime4initEv>:
    3a72:	80 91 16 04 	lds	r24, 0x0416
    3a76:	88 23       	and	r24, r24
    3a78:	29 f4       	brne	.+10     	; 0x3a84 <_ZN13OrangutanTime4initEv+0x12>
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	80 93 16 04 	sts	0x0416, r24
    3a80:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <_ZN13OrangutanTime5init2Ev>
    3a84:	08 95       	ret

00003a86 <_ZN13OrangutanTime2msEv>:
    3a86:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <_ZN13OrangutanTime4initEv>
    3a8a:	e0 e7       	ldi	r30, 0x70	; 112
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	80 81       	ld	r24, Z
    3a90:	8e 7f       	andi	r24, 0xFE	; 254
    3a92:	80 83       	st	Z, r24
    3a94:	20 91 10 04 	lds	r18, 0x0410
    3a98:	30 91 11 04 	lds	r19, 0x0411
    3a9c:	40 91 12 04 	lds	r20, 0x0412
    3aa0:	50 91 13 04 	lds	r21, 0x0413
    3aa4:	80 81       	ld	r24, Z
    3aa6:	81 60       	ori	r24, 0x01	; 1
    3aa8:	80 83       	st	Z, r24
    3aaa:	b9 01       	movw	r22, r18
    3aac:	ca 01       	movw	r24, r20
    3aae:	08 95       	ret

00003ab0 <get_ms>:
    3ab0:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <_ZN13OrangutanTime2msEv>
    3ab4:	08 95       	ret

00003ab6 <_ZN13OrangutanTime5ticksEv>:
    3ab6:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <_ZN13OrangutanTime4initEv>
    3aba:	80 91 70 00 	lds	r24, 0x0070
    3abe:	8e 7f       	andi	r24, 0xFE	; 254
    3ac0:	80 93 70 00 	sts	0x0070, r24
    3ac4:	60 91 b2 00 	lds	r22, 0x00B2
    3ac8:	80 91 0c 04 	lds	r24, 0x040C
    3acc:	90 91 0d 04 	lds	r25, 0x040D
    3ad0:	a0 91 0e 04 	lds	r26, 0x040E
    3ad4:	b0 91 0f 04 	lds	r27, 0x040F
    3ad8:	b8 99       	sbic	0x17, 0	; 23
    3ada:	05 c0       	rjmp	.+10     	; 0x3ae6 <_ZN13OrangutanTime5ticksEv+0x30>
    3adc:	26 2f       	mov	r18, r22
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	40 e0       	ldi	r20, 0x00	; 0
    3ae2:	50 e0       	ldi	r21, 0x00	; 0
    3ae4:	11 c0       	rjmp	.+34     	; 0x3b08 <_ZN13OrangutanTime5ticksEv+0x52>
    3ae6:	80 91 b2 00 	lds	r24, 0x00B2
    3aea:	20 91 0c 04 	lds	r18, 0x040C
    3aee:	30 91 0d 04 	lds	r19, 0x040D
    3af2:	40 91 0e 04 	lds	r20, 0x040E
    3af6:	50 91 0f 04 	lds	r21, 0x040F
    3afa:	20 50       	subi	r18, 0x00	; 0
    3afc:	3f 4f       	sbci	r19, 0xFF	; 255
    3afe:	4f 4f       	sbci	r20, 0xFF	; 255
    3b00:	5f 4f       	sbci	r21, 0xFF	; 255
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	a0 e0       	ldi	r26, 0x00	; 0
    3b06:	b0 e0       	ldi	r27, 0x00	; 0
    3b08:	28 2b       	or	r18, r24
    3b0a:	39 2b       	or	r19, r25
    3b0c:	4a 2b       	or	r20, r26
    3b0e:	5b 2b       	or	r21, r27
    3b10:	80 91 70 00 	lds	r24, 0x0070
    3b14:	81 60       	ori	r24, 0x01	; 1
    3b16:	80 93 70 00 	sts	0x0070, r24
    3b1a:	b9 01       	movw	r22, r18
    3b1c:	ca 01       	movw	r24, r20
    3b1e:	08 95       	ret

00003b20 <get_ticks>:
    3b20:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <_ZN13OrangutanTime5ticksEv>
    3b24:	08 95       	ret

00003b26 <_ZN13OrangutanTime5resetEv>:
    3b26:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <_ZN13OrangutanTime4initEv>
    3b2a:	e0 e7       	ldi	r30, 0x70	; 112
    3b2c:	f0 e0       	ldi	r31, 0x00	; 0
    3b2e:	80 81       	ld	r24, Z
    3b30:	8e 7f       	andi	r24, 0xFE	; 254
    3b32:	80 83       	st	Z, r24
    3b34:	10 92 10 04 	sts	0x0410, r1
    3b38:	10 92 11 04 	sts	0x0411, r1
    3b3c:	10 92 12 04 	sts	0x0412, r1
    3b40:	10 92 13 04 	sts	0x0413, r1
    3b44:	10 92 15 04 	sts	0x0415, r1
    3b48:	10 92 14 04 	sts	0x0414, r1
    3b4c:	80 81       	ld	r24, Z
    3b4e:	81 60       	ori	r24, 0x01	; 1
    3b50:	80 83       	st	Z, r24
    3b52:	08 95       	ret

00003b54 <time_reset>:
    3b54:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <_ZN13OrangutanTime5resetEv>
    3b58:	08 95       	ret

00003b5a <_ZN12OrangutanSVP7setModeEh>:
    3b5a:	98 2f       	mov	r25, r24
    3b5c:	80 91 2d 04 	lds	r24, 0x042D
    3b60:	89 17       	cp	r24, r25
    3b62:	39 f0       	breq	.+14     	; 0x3b72 <_ZN12OrangutanSVP7setModeEh+0x18>
    3b64:	90 93 2d 04 	sts	0x042D, r25
    3b68:	89 2f       	mov	r24, r25
    3b6a:	80 6c       	ori	r24, 0xC0	; 192
    3b6c:	65 e0       	ldi	r22, 0x05	; 5
    3b6e:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3b72:	08 95       	ret

00003b74 <svp_set_mode>:
    3b74:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <_ZN12OrangutanSVP7setModeEh>
    3b78:	08 95       	ret

00003b7a <_ZN12OrangutanSVP17serialSendIfReadyEc>:
    3b7a:	1f 93       	push	r17
    3b7c:	18 2f       	mov	r17, r24
    3b7e:	88 1f       	adc	r24, r24
    3b80:	88 27       	eor	r24, r24
    3b82:	88 1f       	adc	r24, r24
    3b84:	8c 57       	subi	r24, 0x7C	; 124
    3b86:	65 e0       	ldi	r22, 0x05	; 5
    3b88:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3b8c:	81 2f       	mov	r24, r17
    3b8e:	8f 77       	andi	r24, 0x7F	; 127
    3b90:	65 e0       	ldi	r22, 0x05	; 5
    3b92:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3b96:	1f 91       	pop	r17
    3b98:	08 95       	ret

00003b9a <_ZN12OrangutanSVP11getNextByteEv>:
    3b9a:	8f ef       	ldi	r24, 0xFF	; 255
    3b9c:	64 e0       	ldi	r22, 0x04	; 4
    3b9e:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3ba2:	08 95       	ret

00003ba4 <_ZL23updateVariablesIfNeededv>:
    3ba4:	cf 93       	push	r28
    3ba6:	df 93       	push	r29
    3ba8:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <_ZN13OrangutanTime2msEv>
    3bac:	20 91 ec 03 	lds	r18, 0x03EC
    3bb0:	30 91 ed 03 	lds	r19, 0x03ED
    3bb4:	40 91 ee 03 	lds	r20, 0x03EE
    3bb8:	50 91 ef 03 	lds	r21, 0x03EF
    3bbc:	62 17       	cp	r22, r18
    3bbe:	73 07       	cpc	r23, r19
    3bc0:	84 07       	cpc	r24, r20
    3bc2:	95 07       	cpc	r25, r21
    3bc4:	b9 f0       	breq	.+46     	; 0x3bf4 <_ZL23updateVariablesIfNeededv+0x50>
    3bc6:	81 e8       	ldi	r24, 0x81	; 129
    3bc8:	67 e0       	ldi	r22, 0x07	; 7
    3bca:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3bce:	c0 e2       	ldi	r28, 0x20	; 32
    3bd0:	d4 e0       	ldi	r29, 0x04	; 4
    3bd2:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <_ZN12OrangutanSVP11getNextByteEv>
    3bd6:	89 93       	st	Y+, r24
    3bd8:	84 e0       	ldi	r24, 0x04	; 4
    3bda:	cd 32       	cpi	r28, 0x2D	; 45
    3bdc:	d8 07       	cpc	r29, r24
    3bde:	c9 f7       	brne	.-14     	; 0x3bd2 <_ZL23updateVariablesIfNeededv+0x2e>
    3be0:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <_ZN13OrangutanTime2msEv>
    3be4:	60 93 ec 03 	sts	0x03EC, r22
    3be8:	70 93 ed 03 	sts	0x03ED, r23
    3bec:	80 93 ee 03 	sts	0x03EE, r24
    3bf0:	90 93 ef 03 	sts	0x03EF, r25
    3bf4:	df 91       	pop	r29
    3bf6:	cf 91       	pop	r28
    3bf8:	08 95       	ret

00003bfa <_ZN12OrangutanSVP9getStatusEv>:
    3bfa:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZL23updateVariablesIfNeededv>
    3bfe:	80 91 20 04 	lds	r24, 0x0420
    3c02:	08 95       	ret

00003c04 <svp_get_status>:
    3c04:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <_ZN12OrangutanSVP9getStatusEv>
    3c08:	08 95       	ret

00003c0a <_ZN12OrangutanSVP21getChannelDMillivoltsEv>:
    3c0a:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZL23updateVariablesIfNeededv>
    3c0e:	80 91 27 04 	lds	r24, 0x0427
    3c12:	90 91 28 04 	lds	r25, 0x0428
    3c16:	08 95       	ret

00003c18 <_ZN12OrangutanSVP21getChannelCMillivoltsEv>:
    3c18:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZL23updateVariablesIfNeededv>
    3c1c:	80 91 25 04 	lds	r24, 0x0425
    3c20:	90 91 26 04 	lds	r25, 0x0426
    3c24:	08 95       	ret

00003c26 <_ZN12OrangutanSVP21getChannelBMillivoltsEv>:
    3c26:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZL23updateVariablesIfNeededv>
    3c2a:	80 91 23 04 	lds	r24, 0x0423
    3c2e:	90 91 24 04 	lds	r25, 0x0424
    3c32:	08 95       	ret

00003c34 <_ZN12OrangutanSVP21getChannelAMillivoltsEv>:
    3c34:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZL23updateVariablesIfNeededv>
    3c38:	80 91 21 04 	lds	r24, 0x0421
    3c3c:	90 91 22 04 	lds	r25, 0x0422
    3c40:	08 95       	ret

00003c42 <_ZN12OrangutanSVP20getBatteryMillivoltsEv>:
    3c42:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZL23updateVariablesIfNeededv>
    3c46:	80 91 2b 04 	lds	r24, 0x042B
    3c4a:	90 91 2c 04 	lds	r25, 0x042C
    3c4e:	08 95       	ret

00003c50 <_ZN12OrangutanSVP20getTrimpotMillivoltsEv>:
    3c50:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <_ZL23updateVariablesIfNeededv>
    3c54:	80 91 29 04 	lds	r24, 0x0429
    3c58:	90 91 2a 04 	lds	r25, 0x042A
    3c5c:	08 95       	ret

00003c5e <_ZN12OrangutanSVP15serialReadStartEv>:
    3c5e:	83 e8       	ldi	r24, 0x83	; 131
    3c60:	67 e0       	ldi	r22, 0x07	; 7
    3c62:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3c66:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <_ZN12OrangutanSVP11getNextByteEv>
    3c6a:	08 95       	ret

00003c6c <_Z14updateEncodersv>:
    3c6c:	a5 e0       	ldi	r26, 0x05	; 5
    3c6e:	b0 e0       	ldi	r27, 0x00	; 0
    3c70:	ec e3       	ldi	r30, 0x3C	; 60
    3c72:	fe e1       	ldi	r31, 0x1E	; 30
    3c74:	0c 94 af 1f 	jmp	0x3f5e	; 0x3f5e <__prologue_saves__+0x1e>
    3c78:	82 e8       	ldi	r24, 0x82	; 130
    3c7a:	66 e0       	ldi	r22, 0x06	; 6
    3c7c:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3c80:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <_ZN12OrangutanSVP11getNextByteEv>
    3c84:	80 93 1b 04 	sts	0x041B, r24
    3c88:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <_ZN12OrangutanSVP11getNextByteEv>
    3c8c:	80 93 1c 04 	sts	0x041C, r24
    3c90:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <_ZN12OrangutanSVP11getNextByteEv>
    3c94:	80 93 1d 04 	sts	0x041D, r24
    3c98:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <_ZN12OrangutanSVP11getNextByteEv>
    3c9c:	80 93 1e 04 	sts	0x041E, r24
    3ca0:	10 91 1f 04 	lds	r17, 0x041F
    3ca4:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <_ZN12OrangutanSVP11getNextByteEv>
    3ca8:	18 2b       	or	r17, r24
    3caa:	10 93 1f 04 	sts	0x041F, r17
    3cae:	de 01       	movw	r26, r28
    3cb0:	11 96       	adiw	r26, 0x01	; 1
    3cb2:	eb e1       	ldi	r30, 0x1B	; 27
    3cb4:	f4 e0       	ldi	r31, 0x04	; 4
    3cb6:	85 e0       	ldi	r24, 0x05	; 5
    3cb8:	01 90       	ld	r0, Z+
    3cba:	0d 92       	st	X+, r0
    3cbc:	81 50       	subi	r24, 0x01	; 1
    3cbe:	e1 f7       	brne	.-8      	; 0x3cb8 <_Z14updateEncodersv+0x4c>
    3cc0:	29 81       	ldd	r18, Y+1	; 0x01
    3cc2:	3a 81       	ldd	r19, Y+2	; 0x02
    3cc4:	4b 81       	ldd	r20, Y+3	; 0x03
    3cc6:	5c 81       	ldd	r21, Y+4	; 0x04
    3cc8:	6d 81       	ldd	r22, Y+5	; 0x05
    3cca:	70 e0       	ldi	r23, 0x00	; 0
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	25 96       	adiw	r28, 0x05	; 5
    3cd0:	e3 e0       	ldi	r30, 0x03	; 3
    3cd2:	0c 94 cb 1f 	jmp	0x3f96	; 0x3f96 <__epilogue_restores__+0x1e>

00003cd6 <_ZL22updateEncodersIfNeededv>:
    3cd6:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <_ZN13OrangutanTime2msEv>
    3cda:	20 91 e8 03 	lds	r18, 0x03E8
    3cde:	30 91 e9 03 	lds	r19, 0x03E9
    3ce2:	40 91 ea 03 	lds	r20, 0x03EA
    3ce6:	50 91 eb 03 	lds	r21, 0x03EB
    3cea:	62 17       	cp	r22, r18
    3cec:	73 07       	cpc	r23, r19
    3cee:	84 07       	cpc	r24, r20
    3cf0:	95 07       	cpc	r25, r21
    3cf2:	61 f0       	breq	.+24     	; 0x3d0c <_ZL22updateEncodersIfNeededv+0x36>
    3cf4:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <_Z14updateEncodersv>
    3cf8:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <_ZN13OrangutanTime2msEv>
    3cfc:	60 93 e8 03 	sts	0x03E8, r22
    3d00:	70 93 e9 03 	sts	0x03E9, r23
    3d04:	80 93 ea 03 	sts	0x03EA, r24
    3d08:	90 93 eb 03 	sts	0x03EB, r25
    3d0c:	08 95       	ret

00003d0e <_ZN12OrangutanSVP12checkErrorCDEv>:
    3d0e:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_ZL22updateEncodersIfNeededv>
    3d12:	80 91 1f 04 	lds	r24, 0x041F
    3d16:	81 fd       	sbrc	r24, 1
    3d18:	02 c0       	rjmp	.+4      	; 0x3d1e <_ZN12OrangutanSVP12checkErrorCDEv+0x10>
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	08 95       	ret
    3d1e:	8d 7f       	andi	r24, 0xFD	; 253
    3d20:	80 93 1f 04 	sts	0x041F, r24
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	08 95       	ret

00003d28 <svp_check_error_cd>:
    3d28:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <_ZN12OrangutanSVP12checkErrorCDEv>
    3d2c:	08 95       	ret

00003d2e <_ZN12OrangutanSVP12checkErrorABEv>:
    3d2e:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_ZL22updateEncodersIfNeededv>
    3d32:	80 91 1f 04 	lds	r24, 0x041F
    3d36:	80 fd       	sbrc	r24, 0
    3d38:	02 c0       	rjmp	.+4      	; 0x3d3e <_ZN12OrangutanSVP12checkErrorABEv+0x10>
    3d3a:	80 e0       	ldi	r24, 0x00	; 0
    3d3c:	08 95       	ret
    3d3e:	8e 7f       	andi	r24, 0xFE	; 254
    3d40:	80 93 1f 04 	sts	0x041F, r24
    3d44:	81 e0       	ldi	r24, 0x01	; 1
    3d46:	08 95       	ret

00003d48 <svp_check_error_ab>:
    3d48:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <_ZN12OrangutanSVP12checkErrorABEv>
    3d4c:	08 95       	ret

00003d4e <_ZN12OrangutanSVP11getCountsCDEv>:
    3d4e:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_ZL22updateEncodersIfNeededv>
    3d52:	20 91 1d 04 	lds	r18, 0x041D
    3d56:	30 91 1e 04 	lds	r19, 0x041E
    3d5a:	80 91 19 04 	lds	r24, 0x0419
    3d5e:	90 91 1a 04 	lds	r25, 0x041A
    3d62:	28 1b       	sub	r18, r24
    3d64:	39 0b       	sbc	r19, r25
    3d66:	c9 01       	movw	r24, r18
    3d68:	08 95       	ret

00003d6a <_ZN12OrangutanSVP19getCountsAndResetCDEv>:
    3d6a:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <_ZN12OrangutanSVP11getCountsCDEv>
    3d6e:	20 91 1d 04 	lds	r18, 0x041D
    3d72:	30 91 1e 04 	lds	r19, 0x041E
    3d76:	30 93 1a 04 	sts	0x041A, r19
    3d7a:	20 93 19 04 	sts	0x0419, r18
    3d7e:	08 95       	ret

00003d80 <svp_get_counts_and_reset_cd>:
    3d80:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <_ZN12OrangutanSVP19getCountsAndResetCDEv>
    3d84:	08 95       	ret

00003d86 <svp_get_counts_cd>:
    3d86:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <_ZN12OrangutanSVP11getCountsCDEv>
    3d8a:	08 95       	ret

00003d8c <_ZN12OrangutanSVP11getCountsABEv>:
    3d8c:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <_ZL22updateEncodersIfNeededv>
    3d90:	20 91 1b 04 	lds	r18, 0x041B
    3d94:	30 91 1c 04 	lds	r19, 0x041C
    3d98:	80 91 17 04 	lds	r24, 0x0417
    3d9c:	90 91 18 04 	lds	r25, 0x0418
    3da0:	28 1b       	sub	r18, r24
    3da2:	39 0b       	sbc	r19, r25
    3da4:	c9 01       	movw	r24, r18
    3da6:	08 95       	ret

00003da8 <_ZN12OrangutanSVP19getCountsAndResetABEv>:
    3da8:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <_ZN12OrangutanSVP11getCountsABEv>
    3dac:	20 91 1b 04 	lds	r18, 0x041B
    3db0:	30 91 1c 04 	lds	r19, 0x041C
    3db4:	30 93 18 04 	sts	0x0418, r19
    3db8:	20 93 17 04 	sts	0x0417, r18
    3dbc:	08 95       	ret

00003dbe <svp_get_counts_and_reset_ab>:
    3dbe:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <_ZN12OrangutanSVP19getCountsAndResetABEv>
    3dc2:	08 95       	ret

00003dc4 <svp_get_counts_ab>:
    3dc4:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <_ZN12OrangutanSVP11getCountsABEv>
    3dc8:	08 95       	ret

00003dca <_ZN12OrangutanSVP18getFirmwareVersionEv>:
    3dca:	80 e8       	ldi	r24, 0x80	; 128
    3dcc:	65 e0       	ldi	r22, 0x05	; 5
    3dce:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3dd2:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <_ZN12OrangutanSVP11getNextByteEv>
    3dd6:	08 95       	ret

00003dd8 <svp_get_firmware_version>:
    3dd8:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <_ZN12OrangutanSVP18getFirmwareVersionEv>
    3ddc:	08 95       	ret

00003dde <_ZN18OrangutanSPIMaster4initEhh>:
    3dde:	98 2f       	mov	r25, r24
    3de0:	24 99       	sbic	0x04, 4	; 4
    3de2:	0c c0       	rjmp	.+24     	; 0x3dfc <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    3de4:	2c 99       	sbic	0x05, 4	; 5
    3de6:	0a c0       	rjmp	.+20     	; 0x3dfc <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    3de8:	2c 9a       	sbi	0x05, 4	; 5
    3dea:	ee e1       	ldi	r30, 0x1E	; 30
    3dec:	f0 e0       	ldi	r31, 0x00	; 0
    3dee:	6f 93       	push	r22
    3df0:	64 e0       	ldi	r22, 0x04	; 4
    3df2:	6a 95       	dec	r22
    3df4:	f1 f7       	brne	.-4      	; 0x3df2 <_ZN18OrangutanSPIMaster4initEhh+0x14>
    3df6:	6f 91       	pop	r22
    3df8:	31 97       	sbiw	r30, 0x01	; 1
    3dfa:	c9 f7       	brne	.-14     	; 0x3dee <_ZN18OrangutanSPIMaster4initEhh+0x10>
    3dfc:	84 b1       	in	r24, 0x04	; 4
    3dfe:	80 6a       	ori	r24, 0xA0	; 160
    3e00:	84 b9       	out	0x04, r24	; 4
    3e02:	26 98       	cbi	0x04, 6	; 4
    3e04:	89 2f       	mov	r24, r25
    3e06:	83 70       	andi	r24, 0x03	; 3
    3e08:	80 65       	ori	r24, 0x50	; 80
    3e0a:	6c 7a       	andi	r22, 0xAC	; 172
    3e0c:	86 2b       	or	r24, r22
    3e0e:	8c bd       	out	0x2c, r24	; 44
    3e10:	89 2f       	mov	r24, r25
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	96 95       	lsr	r25
    3e16:	87 95       	ror	r24
    3e18:	96 95       	lsr	r25
    3e1a:	87 95       	ror	r24
    3e1c:	81 70       	andi	r24, 0x01	; 1
    3e1e:	8d bd       	out	0x2d, r24	; 45
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN13OrangutanTime17delayMillisecondsEj>
    3e28:	08 95       	ret

00003e2a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>:
    3e2a:	0f 93       	push	r16
    3e2c:	1f 93       	push	r17
    3e2e:	08 2f       	mov	r16, r24
    3e30:	16 2f       	mov	r17, r22
    3e32:	0c b4       	in	r0, 0x2c	; 44
    3e34:	06 fc       	sbrc	r0, 6
    3e36:	04 c0       	rjmp	.+8      	; 0x3e40 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x16>
    3e38:	80 e0       	ldi	r24, 0x00	; 0
    3e3a:	64 e0       	ldi	r22, 0x04	; 4
    3e3c:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <_ZN18OrangutanSPIMaster4initEhh>
    3e40:	0c b4       	in	r0, 0x2c	; 44
    3e42:	04 fc       	sbrc	r0, 4
    3e44:	03 c0       	rjmp	.+6      	; 0x3e4c <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x22>
    3e46:	8c b5       	in	r24, 0x2c	; 44
    3e48:	80 61       	ori	r24, 0x10	; 16
    3e4a:	8c bd       	out	0x2c, r24	; 44
    3e4c:	0e bd       	out	0x2e, r16	; 46
    3e4e:	05 c0       	rjmp	.+10     	; 0x3e5a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    3e50:	0c b4       	in	r0, 0x2c	; 44
    3e52:	04 fc       	sbrc	r0, 4
    3e54:	02 c0       	rjmp	.+4      	; 0x3e5a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	0f c0       	rjmp	.+30     	; 0x3e78 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4e>
    3e5a:	0d b4       	in	r0, 0x2d	; 45
    3e5c:	07 fe       	sbrs	r0, 7
    3e5e:	f8 cf       	rjmp	.-16     	; 0x3e50 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x26>
    3e60:	11 23       	and	r17, r17
    3e62:	49 f0       	breq	.+18     	; 0x3e76 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4c>
    3e64:	81 2f       	mov	r24, r17
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	6f 93       	push	r22
    3e6a:	64 e0       	ldi	r22, 0x04	; 4
    3e6c:	6a 95       	dec	r22
    3e6e:	f1 f7       	brne	.-4      	; 0x3e6c <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x42>
    3e70:	6f 91       	pop	r22
    3e72:	01 97       	sbiw	r24, 0x01	; 1
    3e74:	c9 f7       	brne	.-14     	; 0x3e68 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x3e>
    3e76:	8e b5       	in	r24, 0x2e	; 46
    3e78:	1f 91       	pop	r17
    3e7a:	0f 91       	pop	r16
    3e7c:	08 95       	ret

00003e7e <_ZN18OrangutanSPIMaster8transmitEh>:
    3e7e:	60 e0       	ldi	r22, 0x00	; 0
    3e80:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3e84:	08 95       	ret

00003e86 <spi_master_transmit>:
    3e86:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_ZN18OrangutanSPIMaster8transmitEh>
    3e8a:	08 95       	ret

00003e8c <spi_master_transmit_and_delay>:
    3e8c:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3e90:	08 95       	ret

00003e92 <spi_master_init>:
    3e92:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <_ZN18OrangutanSPIMaster4initEhh>
    3e96:	08 95       	ret

00003e98 <__mulsi3>:
    3e98:	62 9f       	mul	r22, r18
    3e9a:	d0 01       	movw	r26, r0
    3e9c:	73 9f       	mul	r23, r19
    3e9e:	f0 01       	movw	r30, r0
    3ea0:	82 9f       	mul	r24, r18
    3ea2:	e0 0d       	add	r30, r0
    3ea4:	f1 1d       	adc	r31, r1
    3ea6:	64 9f       	mul	r22, r20
    3ea8:	e0 0d       	add	r30, r0
    3eaa:	f1 1d       	adc	r31, r1
    3eac:	92 9f       	mul	r25, r18
    3eae:	f0 0d       	add	r31, r0
    3eb0:	83 9f       	mul	r24, r19
    3eb2:	f0 0d       	add	r31, r0
    3eb4:	74 9f       	mul	r23, r20
    3eb6:	f0 0d       	add	r31, r0
    3eb8:	65 9f       	mul	r22, r21
    3eba:	f0 0d       	add	r31, r0
    3ebc:	99 27       	eor	r25, r25
    3ebe:	72 9f       	mul	r23, r18
    3ec0:	b0 0d       	add	r27, r0
    3ec2:	e1 1d       	adc	r30, r1
    3ec4:	f9 1f       	adc	r31, r25
    3ec6:	63 9f       	mul	r22, r19
    3ec8:	b0 0d       	add	r27, r0
    3eca:	e1 1d       	adc	r30, r1
    3ecc:	f9 1f       	adc	r31, r25
    3ece:	bd 01       	movw	r22, r26
    3ed0:	cf 01       	movw	r24, r30
    3ed2:	11 24       	eor	r1, r1
    3ed4:	08 95       	ret

00003ed6 <__divmodhi4>:
    3ed6:	97 fb       	bst	r25, 7
    3ed8:	09 2e       	mov	r0, r25
    3eda:	07 26       	eor	r0, r23
    3edc:	0a d0       	rcall	.+20     	; 0x3ef2 <__divmodhi4_neg1>
    3ede:	77 fd       	sbrc	r23, 7
    3ee0:	04 d0       	rcall	.+8      	; 0x3eea <__divmodhi4_neg2>
    3ee2:	65 d0       	rcall	.+202    	; 0x3fae <__udivmodhi4>
    3ee4:	06 d0       	rcall	.+12     	; 0x3ef2 <__divmodhi4_neg1>
    3ee6:	00 20       	and	r0, r0
    3ee8:	1a f4       	brpl	.+6      	; 0x3ef0 <__divmodhi4_exit>

00003eea <__divmodhi4_neg2>:
    3eea:	70 95       	com	r23
    3eec:	61 95       	neg	r22
    3eee:	7f 4f       	sbci	r23, 0xFF	; 255

00003ef0 <__divmodhi4_exit>:
    3ef0:	08 95       	ret

00003ef2 <__divmodhi4_neg1>:
    3ef2:	f6 f7       	brtc	.-4      	; 0x3ef0 <__divmodhi4_exit>
    3ef4:	90 95       	com	r25
    3ef6:	81 95       	neg	r24
    3ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    3efa:	08 95       	ret

00003efc <__udivmodsi4>:
    3efc:	a1 e2       	ldi	r26, 0x21	; 33
    3efe:	1a 2e       	mov	r1, r26
    3f00:	aa 1b       	sub	r26, r26
    3f02:	bb 1b       	sub	r27, r27
    3f04:	fd 01       	movw	r30, r26
    3f06:	0d c0       	rjmp	.+26     	; 0x3f22 <__udivmodsi4_ep>

00003f08 <__udivmodsi4_loop>:
    3f08:	aa 1f       	adc	r26, r26
    3f0a:	bb 1f       	adc	r27, r27
    3f0c:	ee 1f       	adc	r30, r30
    3f0e:	ff 1f       	adc	r31, r31
    3f10:	a2 17       	cp	r26, r18
    3f12:	b3 07       	cpc	r27, r19
    3f14:	e4 07       	cpc	r30, r20
    3f16:	f5 07       	cpc	r31, r21
    3f18:	20 f0       	brcs	.+8      	; 0x3f22 <__udivmodsi4_ep>
    3f1a:	a2 1b       	sub	r26, r18
    3f1c:	b3 0b       	sbc	r27, r19
    3f1e:	e4 0b       	sbc	r30, r20
    3f20:	f5 0b       	sbc	r31, r21

00003f22 <__udivmodsi4_ep>:
    3f22:	66 1f       	adc	r22, r22
    3f24:	77 1f       	adc	r23, r23
    3f26:	88 1f       	adc	r24, r24
    3f28:	99 1f       	adc	r25, r25
    3f2a:	1a 94       	dec	r1
    3f2c:	69 f7       	brne	.-38     	; 0x3f08 <__udivmodsi4_loop>
    3f2e:	60 95       	com	r22
    3f30:	70 95       	com	r23
    3f32:	80 95       	com	r24
    3f34:	90 95       	com	r25
    3f36:	9b 01       	movw	r18, r22
    3f38:	ac 01       	movw	r20, r24
    3f3a:	bd 01       	movw	r22, r26
    3f3c:	cf 01       	movw	r24, r30
    3f3e:	08 95       	ret

00003f40 <__prologue_saves__>:
    3f40:	2f 92       	push	r2
    3f42:	3f 92       	push	r3
    3f44:	4f 92       	push	r4
    3f46:	5f 92       	push	r5
    3f48:	6f 92       	push	r6
    3f4a:	7f 92       	push	r7
    3f4c:	8f 92       	push	r8
    3f4e:	9f 92       	push	r9
    3f50:	af 92       	push	r10
    3f52:	bf 92       	push	r11
    3f54:	cf 92       	push	r12
    3f56:	df 92       	push	r13
    3f58:	ef 92       	push	r14
    3f5a:	ff 92       	push	r15
    3f5c:	0f 93       	push	r16
    3f5e:	1f 93       	push	r17
    3f60:	cf 93       	push	r28
    3f62:	df 93       	push	r29
    3f64:	cd b7       	in	r28, 0x3d	; 61
    3f66:	de b7       	in	r29, 0x3e	; 62
    3f68:	ca 1b       	sub	r28, r26
    3f6a:	db 0b       	sbc	r29, r27
    3f6c:	0f b6       	in	r0, 0x3f	; 63
    3f6e:	f8 94       	cli
    3f70:	de bf       	out	0x3e, r29	; 62
    3f72:	0f be       	out	0x3f, r0	; 63
    3f74:	cd bf       	out	0x3d, r28	; 61
    3f76:	09 94       	ijmp

00003f78 <__epilogue_restores__>:
    3f78:	2a 88       	ldd	r2, Y+18	; 0x12
    3f7a:	39 88       	ldd	r3, Y+17	; 0x11
    3f7c:	48 88       	ldd	r4, Y+16	; 0x10
    3f7e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f80:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f82:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f84:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f86:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f88:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f8a:	b9 84       	ldd	r11, Y+9	; 0x09
    3f8c:	c8 84       	ldd	r12, Y+8	; 0x08
    3f8e:	df 80       	ldd	r13, Y+7	; 0x07
    3f90:	ee 80       	ldd	r14, Y+6	; 0x06
    3f92:	fd 80       	ldd	r15, Y+5	; 0x05
    3f94:	0c 81       	ldd	r16, Y+4	; 0x04
    3f96:	1b 81       	ldd	r17, Y+3	; 0x03
    3f98:	aa 81       	ldd	r26, Y+2	; 0x02
    3f9a:	b9 81       	ldd	r27, Y+1	; 0x01
    3f9c:	ce 0f       	add	r28, r30
    3f9e:	d1 1d       	adc	r29, r1
    3fa0:	0f b6       	in	r0, 0x3f	; 63
    3fa2:	f8 94       	cli
    3fa4:	de bf       	out	0x3e, r29	; 62
    3fa6:	0f be       	out	0x3f, r0	; 63
    3fa8:	cd bf       	out	0x3d, r28	; 61
    3faa:	ed 01       	movw	r28, r26
    3fac:	08 95       	ret

00003fae <__udivmodhi4>:
    3fae:	aa 1b       	sub	r26, r26
    3fb0:	bb 1b       	sub	r27, r27
    3fb2:	51 e1       	ldi	r21, 0x11	; 17
    3fb4:	07 c0       	rjmp	.+14     	; 0x3fc4 <__udivmodhi4_ep>

00003fb6 <__udivmodhi4_loop>:
    3fb6:	aa 1f       	adc	r26, r26
    3fb8:	bb 1f       	adc	r27, r27
    3fba:	a6 17       	cp	r26, r22
    3fbc:	b7 07       	cpc	r27, r23
    3fbe:	10 f0       	brcs	.+4      	; 0x3fc4 <__udivmodhi4_ep>
    3fc0:	a6 1b       	sub	r26, r22
    3fc2:	b7 0b       	sbc	r27, r23

00003fc4 <__udivmodhi4_ep>:
    3fc4:	88 1f       	adc	r24, r24
    3fc6:	99 1f       	adc	r25, r25
    3fc8:	5a 95       	dec	r21
    3fca:	a9 f7       	brne	.-22     	; 0x3fb6 <__udivmodhi4_loop>
    3fcc:	80 95       	com	r24
    3fce:	90 95       	com	r25
    3fd0:	bc 01       	movw	r22, r24
    3fd2:	cd 01       	movw	r24, r26
    3fd4:	08 95       	ret

00003fd6 <malloc>:
    3fd6:	cf 93       	push	r28
    3fd8:	df 93       	push	r29
    3fda:	bc 01       	movw	r22, r24
    3fdc:	82 30       	cpi	r24, 0x02	; 2
    3fde:	91 05       	cpc	r25, r1
    3fe0:	10 f4       	brcc	.+4      	; 0x3fe6 <malloc+0x10>
    3fe2:	62 e0       	ldi	r22, 0x02	; 2
    3fe4:	70 e0       	ldi	r23, 0x00	; 0
    3fe6:	a0 91 36 04 	lds	r26, 0x0436
    3fea:	b0 91 37 04 	lds	r27, 0x0437
    3fee:	ed 01       	movw	r28, r26
    3ff0:	e0 e0       	ldi	r30, 0x00	; 0
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	40 e0       	ldi	r20, 0x00	; 0
    3ff6:	50 e0       	ldi	r21, 0x00	; 0
    3ff8:	21 c0       	rjmp	.+66     	; 0x403c <malloc+0x66>
    3ffa:	88 81       	ld	r24, Y
    3ffc:	99 81       	ldd	r25, Y+1	; 0x01
    3ffe:	86 17       	cp	r24, r22
    4000:	97 07       	cpc	r25, r23
    4002:	69 f4       	brne	.+26     	; 0x401e <malloc+0x48>
    4004:	8a 81       	ldd	r24, Y+2	; 0x02
    4006:	9b 81       	ldd	r25, Y+3	; 0x03
    4008:	30 97       	sbiw	r30, 0x00	; 0
    400a:	19 f0       	breq	.+6      	; 0x4012 <malloc+0x3c>
    400c:	93 83       	std	Z+3, r25	; 0x03
    400e:	82 83       	std	Z+2, r24	; 0x02
    4010:	04 c0       	rjmp	.+8      	; 0x401a <malloc+0x44>
    4012:	90 93 37 04 	sts	0x0437, r25
    4016:	80 93 36 04 	sts	0x0436, r24
    401a:	fe 01       	movw	r30, r28
    401c:	34 c0       	rjmp	.+104    	; 0x4086 <malloc+0xb0>
    401e:	68 17       	cp	r22, r24
    4020:	79 07       	cpc	r23, r25
    4022:	38 f4       	brcc	.+14     	; 0x4032 <malloc+0x5c>
    4024:	41 15       	cp	r20, r1
    4026:	51 05       	cpc	r21, r1
    4028:	19 f0       	breq	.+6      	; 0x4030 <malloc+0x5a>
    402a:	84 17       	cp	r24, r20
    402c:	95 07       	cpc	r25, r21
    402e:	08 f4       	brcc	.+2      	; 0x4032 <malloc+0x5c>
    4030:	ac 01       	movw	r20, r24
    4032:	fe 01       	movw	r30, r28
    4034:	8a 81       	ldd	r24, Y+2	; 0x02
    4036:	9b 81       	ldd	r25, Y+3	; 0x03
    4038:	9c 01       	movw	r18, r24
    403a:	e9 01       	movw	r28, r18
    403c:	20 97       	sbiw	r28, 0x00	; 0
    403e:	e9 f6       	brne	.-70     	; 0x3ffa <malloc+0x24>
    4040:	41 15       	cp	r20, r1
    4042:	51 05       	cpc	r21, r1
    4044:	a9 f1       	breq	.+106    	; 0x40b0 <malloc+0xda>
    4046:	ca 01       	movw	r24, r20
    4048:	86 1b       	sub	r24, r22
    404a:	97 0b       	sbc	r25, r23
    404c:	04 97       	sbiw	r24, 0x04	; 4
    404e:	08 f4       	brcc	.+2      	; 0x4052 <malloc+0x7c>
    4050:	ba 01       	movw	r22, r20
    4052:	e0 e0       	ldi	r30, 0x00	; 0
    4054:	f0 e0       	ldi	r31, 0x00	; 0
    4056:	2a c0       	rjmp	.+84     	; 0x40ac <malloc+0xd6>
    4058:	8d 91       	ld	r24, X+
    405a:	9c 91       	ld	r25, X
    405c:	11 97       	sbiw	r26, 0x01	; 1
    405e:	84 17       	cp	r24, r20
    4060:	95 07       	cpc	r25, r21
    4062:	f9 f4       	brne	.+62     	; 0x40a2 <malloc+0xcc>
    4064:	64 17       	cp	r22, r20
    4066:	75 07       	cpc	r23, r21
    4068:	81 f4       	brne	.+32     	; 0x408a <malloc+0xb4>
    406a:	12 96       	adiw	r26, 0x02	; 2
    406c:	8d 91       	ld	r24, X+
    406e:	9c 91       	ld	r25, X
    4070:	13 97       	sbiw	r26, 0x03	; 3
    4072:	30 97       	sbiw	r30, 0x00	; 0
    4074:	19 f0       	breq	.+6      	; 0x407c <malloc+0xa6>
    4076:	93 83       	std	Z+3, r25	; 0x03
    4078:	82 83       	std	Z+2, r24	; 0x02
    407a:	04 c0       	rjmp	.+8      	; 0x4084 <malloc+0xae>
    407c:	90 93 37 04 	sts	0x0437, r25
    4080:	80 93 36 04 	sts	0x0436, r24
    4084:	fd 01       	movw	r30, r26
    4086:	32 96       	adiw	r30, 0x02	; 2
    4088:	4f c0       	rjmp	.+158    	; 0x4128 <__stack+0x29>
    408a:	ca 01       	movw	r24, r20
    408c:	86 1b       	sub	r24, r22
    408e:	97 0b       	sbc	r25, r23
    4090:	fd 01       	movw	r30, r26
    4092:	e8 0f       	add	r30, r24
    4094:	f9 1f       	adc	r31, r25
    4096:	61 93       	st	Z+, r22
    4098:	71 93       	st	Z+, r23
    409a:	02 97       	sbiw	r24, 0x02	; 2
    409c:	8d 93       	st	X+, r24
    409e:	9c 93       	st	X, r25
    40a0:	43 c0       	rjmp	.+134    	; 0x4128 <__stack+0x29>
    40a2:	fd 01       	movw	r30, r26
    40a4:	82 81       	ldd	r24, Z+2	; 0x02
    40a6:	93 81       	ldd	r25, Z+3	; 0x03
    40a8:	9c 01       	movw	r18, r24
    40aa:	d9 01       	movw	r26, r18
    40ac:	10 97       	sbiw	r26, 0x00	; 0
    40ae:	a1 f6       	brne	.-88     	; 0x4058 <malloc+0x82>
    40b0:	80 91 34 04 	lds	r24, 0x0434
    40b4:	90 91 35 04 	lds	r25, 0x0435
    40b8:	89 2b       	or	r24, r25
    40ba:	41 f4       	brne	.+16     	; 0x40cc <malloc+0xf6>
    40bc:	80 91 f2 03 	lds	r24, 0x03F2
    40c0:	90 91 f3 03 	lds	r25, 0x03F3
    40c4:	90 93 35 04 	sts	0x0435, r25
    40c8:	80 93 34 04 	sts	0x0434, r24
    40cc:	40 91 f4 03 	lds	r20, 0x03F4
    40d0:	50 91 f5 03 	lds	r21, 0x03F5
    40d4:	41 15       	cp	r20, r1
    40d6:	51 05       	cpc	r21, r1
    40d8:	41 f4       	brne	.+16     	; 0x40ea <malloc+0x114>
    40da:	4d b7       	in	r20, 0x3d	; 61
    40dc:	5e b7       	in	r21, 0x3e	; 62
    40de:	80 91 f0 03 	lds	r24, 0x03F0
    40e2:	90 91 f1 03 	lds	r25, 0x03F1
    40e6:	48 1b       	sub	r20, r24
    40e8:	59 0b       	sbc	r21, r25
    40ea:	20 91 34 04 	lds	r18, 0x0434
    40ee:	30 91 35 04 	lds	r19, 0x0435
    40f2:	24 17       	cp	r18, r20
    40f4:	35 07       	cpc	r19, r21
    40f6:	b0 f4       	brcc	.+44     	; 0x4124 <__stack+0x25>
    40f8:	ca 01       	movw	r24, r20
    40fa:	82 1b       	sub	r24, r18
    40fc:	93 0b       	sbc	r25, r19
    40fe:	86 17       	cp	r24, r22
    4100:	97 07       	cpc	r25, r23
    4102:	80 f0       	brcs	.+32     	; 0x4124 <__stack+0x25>
    4104:	ab 01       	movw	r20, r22
    4106:	4e 5f       	subi	r20, 0xFE	; 254
    4108:	5f 4f       	sbci	r21, 0xFF	; 255
    410a:	84 17       	cp	r24, r20
    410c:	95 07       	cpc	r25, r21
    410e:	50 f0       	brcs	.+20     	; 0x4124 <__stack+0x25>
    4110:	42 0f       	add	r20, r18
    4112:	53 1f       	adc	r21, r19
    4114:	50 93 35 04 	sts	0x0435, r21
    4118:	40 93 34 04 	sts	0x0434, r20
    411c:	f9 01       	movw	r30, r18
    411e:	61 93       	st	Z+, r22
    4120:	71 93       	st	Z+, r23
    4122:	02 c0       	rjmp	.+4      	; 0x4128 <__stack+0x29>
    4124:	e0 e0       	ldi	r30, 0x00	; 0
    4126:	f0 e0       	ldi	r31, 0x00	; 0
    4128:	cf 01       	movw	r24, r30
    412a:	df 91       	pop	r29
    412c:	cf 91       	pop	r28
    412e:	08 95       	ret

00004130 <free>:
    4130:	cf 93       	push	r28
    4132:	df 93       	push	r29
    4134:	00 97       	sbiw	r24, 0x00	; 0
    4136:	09 f4       	brne	.+2      	; 0x413a <free+0xa>
    4138:	50 c0       	rjmp	.+160    	; 0x41da <free+0xaa>
    413a:	ec 01       	movw	r28, r24
    413c:	22 97       	sbiw	r28, 0x02	; 2
    413e:	1b 82       	std	Y+3, r1	; 0x03
    4140:	1a 82       	std	Y+2, r1	; 0x02
    4142:	a0 91 36 04 	lds	r26, 0x0436
    4146:	b0 91 37 04 	lds	r27, 0x0437
    414a:	10 97       	sbiw	r26, 0x00	; 0
    414c:	09 f1       	breq	.+66     	; 0x4190 <free+0x60>
    414e:	40 e0       	ldi	r20, 0x00	; 0
    4150:	50 e0       	ldi	r21, 0x00	; 0
    4152:	ac 17       	cp	r26, r28
    4154:	bd 07       	cpc	r27, r29
    4156:	08 f1       	brcs	.+66     	; 0x419a <free+0x6a>
    4158:	bb 83       	std	Y+3, r27	; 0x03
    415a:	aa 83       	std	Y+2, r26	; 0x02
    415c:	fe 01       	movw	r30, r28
    415e:	21 91       	ld	r18, Z+
    4160:	31 91       	ld	r19, Z+
    4162:	e2 0f       	add	r30, r18
    4164:	f3 1f       	adc	r31, r19
    4166:	ae 17       	cp	r26, r30
    4168:	bf 07       	cpc	r27, r31
    416a:	79 f4       	brne	.+30     	; 0x418a <free+0x5a>
    416c:	8d 91       	ld	r24, X+
    416e:	9c 91       	ld	r25, X
    4170:	11 97       	sbiw	r26, 0x01	; 1
    4172:	28 0f       	add	r18, r24
    4174:	39 1f       	adc	r19, r25
    4176:	2e 5f       	subi	r18, 0xFE	; 254
    4178:	3f 4f       	sbci	r19, 0xFF	; 255
    417a:	39 83       	std	Y+1, r19	; 0x01
    417c:	28 83       	st	Y, r18
    417e:	12 96       	adiw	r26, 0x02	; 2
    4180:	8d 91       	ld	r24, X+
    4182:	9c 91       	ld	r25, X
    4184:	13 97       	sbiw	r26, 0x03	; 3
    4186:	9b 83       	std	Y+3, r25	; 0x03
    4188:	8a 83       	std	Y+2, r24	; 0x02
    418a:	41 15       	cp	r20, r1
    418c:	51 05       	cpc	r21, r1
    418e:	71 f4       	brne	.+28     	; 0x41ac <free+0x7c>
    4190:	d0 93 37 04 	sts	0x0437, r29
    4194:	c0 93 36 04 	sts	0x0436, r28
    4198:	20 c0       	rjmp	.+64     	; 0x41da <free+0xaa>
    419a:	12 96       	adiw	r26, 0x02	; 2
    419c:	8d 91       	ld	r24, X+
    419e:	9c 91       	ld	r25, X
    41a0:	13 97       	sbiw	r26, 0x03	; 3
    41a2:	ad 01       	movw	r20, r26
    41a4:	00 97       	sbiw	r24, 0x00	; 0
    41a6:	11 f0       	breq	.+4      	; 0x41ac <free+0x7c>
    41a8:	dc 01       	movw	r26, r24
    41aa:	d3 cf       	rjmp	.-90     	; 0x4152 <free+0x22>
    41ac:	fa 01       	movw	r30, r20
    41ae:	d3 83       	std	Z+3, r29	; 0x03
    41b0:	c2 83       	std	Z+2, r28	; 0x02
    41b2:	21 91       	ld	r18, Z+
    41b4:	31 91       	ld	r19, Z+
    41b6:	e2 0f       	add	r30, r18
    41b8:	f3 1f       	adc	r31, r19
    41ba:	ce 17       	cp	r28, r30
    41bc:	df 07       	cpc	r29, r31
    41be:	69 f4       	brne	.+26     	; 0x41da <free+0xaa>
    41c0:	88 81       	ld	r24, Y
    41c2:	99 81       	ldd	r25, Y+1	; 0x01
    41c4:	28 0f       	add	r18, r24
    41c6:	39 1f       	adc	r19, r25
    41c8:	2e 5f       	subi	r18, 0xFE	; 254
    41ca:	3f 4f       	sbci	r19, 0xFF	; 255
    41cc:	fa 01       	movw	r30, r20
    41ce:	31 83       	std	Z+1, r19	; 0x01
    41d0:	20 83       	st	Z, r18
    41d2:	8a 81       	ldd	r24, Y+2	; 0x02
    41d4:	9b 81       	ldd	r25, Y+3	; 0x03
    41d6:	93 83       	std	Z+3, r25	; 0x03
    41d8:	82 83       	std	Z+2, r24	; 0x02
    41da:	df 91       	pop	r29
    41dc:	cf 91       	pop	r28
    41de:	08 95       	ret

000041e0 <itoa>:
    41e0:	fb 01       	movw	r30, r22
    41e2:	9f 01       	movw	r18, r30
    41e4:	e8 94       	clt
    41e6:	42 30       	cpi	r20, 0x02	; 2
    41e8:	c4 f0       	brlt	.+48     	; 0x421a <itoa+0x3a>
    41ea:	45 32       	cpi	r20, 0x25	; 37
    41ec:	b4 f4       	brge	.+44     	; 0x421a <itoa+0x3a>
    41ee:	4a 30       	cpi	r20, 0x0A	; 10
    41f0:	29 f4       	brne	.+10     	; 0x41fc <itoa+0x1c>
    41f2:	97 fb       	bst	r25, 7
    41f4:	1e f4       	brtc	.+6      	; 0x41fc <itoa+0x1c>
    41f6:	90 95       	com	r25
    41f8:	81 95       	neg	r24
    41fa:	9f 4f       	sbci	r25, 0xFF	; 255
    41fc:	64 2f       	mov	r22, r20
    41fe:	77 27       	eor	r23, r23
    4200:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__udivmodhi4>
    4204:	80 5d       	subi	r24, 0xD0	; 208
    4206:	8a 33       	cpi	r24, 0x3A	; 58
    4208:	0c f0       	brlt	.+2      	; 0x420c <itoa+0x2c>
    420a:	89 5d       	subi	r24, 0xD9	; 217
    420c:	81 93       	st	Z+, r24
    420e:	cb 01       	movw	r24, r22
    4210:	00 97       	sbiw	r24, 0x00	; 0
    4212:	a1 f7       	brne	.-24     	; 0x41fc <itoa+0x1c>
    4214:	16 f4       	brtc	.+4      	; 0x421a <itoa+0x3a>
    4216:	5d e2       	ldi	r21, 0x2D	; 45
    4218:	51 93       	st	Z+, r21
    421a:	10 82       	st	Z, r1
    421c:	c9 01       	movw	r24, r18
    421e:	0c 94 80 21 	jmp	0x4300	; 0x4300 <strrev>

00004222 <fdevopen>:
    4222:	0f 93       	push	r16
    4224:	1f 93       	push	r17
    4226:	cf 93       	push	r28
    4228:	df 93       	push	r29
    422a:	8c 01       	movw	r16, r24
    422c:	eb 01       	movw	r28, r22
    422e:	00 97       	sbiw	r24, 0x00	; 0
    4230:	31 f4       	brne	.+12     	; 0x423e <fdevopen+0x1c>
    4232:	61 15       	cp	r22, r1
    4234:	71 05       	cpc	r23, r1
    4236:	19 f4       	brne	.+6      	; 0x423e <fdevopen+0x1c>
    4238:	20 e0       	ldi	r18, 0x00	; 0
    423a:	30 e0       	ldi	r19, 0x00	; 0
    423c:	38 c0       	rjmp	.+112    	; 0x42ae <fdevopen+0x8c>
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	6e e0       	ldi	r22, 0x0E	; 14
    4244:	70 e0       	ldi	r23, 0x00	; 0
    4246:	0e 94 5d 21 	call	0x42ba	; 0x42ba <calloc>
    424a:	fc 01       	movw	r30, r24
    424c:	9c 01       	movw	r18, r24
    424e:	00 97       	sbiw	r24, 0x00	; 0
    4250:	71 f1       	breq	.+92     	; 0x42ae <fdevopen+0x8c>
    4252:	80 e8       	ldi	r24, 0x80	; 128
    4254:	83 83       	std	Z+3, r24	; 0x03
    4256:	20 97       	sbiw	r28, 0x00	; 0
    4258:	71 f0       	breq	.+28     	; 0x4276 <fdevopen+0x54>
    425a:	d3 87       	std	Z+11, r29	; 0x0b
    425c:	c2 87       	std	Z+10, r28	; 0x0a
    425e:	81 e8       	ldi	r24, 0x81	; 129
    4260:	83 83       	std	Z+3, r24	; 0x03
    4262:	80 91 38 04 	lds	r24, 0x0438
    4266:	90 91 39 04 	lds	r25, 0x0439
    426a:	89 2b       	or	r24, r25
    426c:	21 f4       	brne	.+8      	; 0x4276 <fdevopen+0x54>
    426e:	f0 93 39 04 	sts	0x0439, r31
    4272:	e0 93 38 04 	sts	0x0438, r30
    4276:	01 15       	cp	r16, r1
    4278:	11 05       	cpc	r17, r1
    427a:	c9 f0       	breq	.+50     	; 0x42ae <fdevopen+0x8c>
    427c:	11 87       	std	Z+9, r17	; 0x09
    427e:	00 87       	std	Z+8, r16	; 0x08
    4280:	83 81       	ldd	r24, Z+3	; 0x03
    4282:	82 60       	ori	r24, 0x02	; 2
    4284:	83 83       	std	Z+3, r24	; 0x03
    4286:	80 91 3a 04 	lds	r24, 0x043A
    428a:	90 91 3b 04 	lds	r25, 0x043B
    428e:	89 2b       	or	r24, r25
    4290:	71 f4       	brne	.+28     	; 0x42ae <fdevopen+0x8c>
    4292:	f0 93 3b 04 	sts	0x043B, r31
    4296:	e0 93 3a 04 	sts	0x043A, r30
    429a:	80 91 3c 04 	lds	r24, 0x043C
    429e:	90 91 3d 04 	lds	r25, 0x043D
    42a2:	89 2b       	or	r24, r25
    42a4:	21 f4       	brne	.+8      	; 0x42ae <fdevopen+0x8c>
    42a6:	f0 93 3d 04 	sts	0x043D, r31
    42aa:	e0 93 3c 04 	sts	0x043C, r30
    42ae:	c9 01       	movw	r24, r18
    42b0:	df 91       	pop	r29
    42b2:	cf 91       	pop	r28
    42b4:	1f 91       	pop	r17
    42b6:	0f 91       	pop	r16
    42b8:	08 95       	ret

000042ba <calloc>:
    42ba:	0f 93       	push	r16
    42bc:	1f 93       	push	r17
    42be:	cf 93       	push	r28
    42c0:	df 93       	push	r29
    42c2:	68 9f       	mul	r22, r24
    42c4:	80 01       	movw	r16, r0
    42c6:	69 9f       	mul	r22, r25
    42c8:	10 0d       	add	r17, r0
    42ca:	78 9f       	mul	r23, r24
    42cc:	10 0d       	add	r17, r0
    42ce:	11 24       	eor	r1, r1
    42d0:	c8 01       	movw	r24, r16
    42d2:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <malloc>
    42d6:	ec 01       	movw	r28, r24
    42d8:	00 97       	sbiw	r24, 0x00	; 0
    42da:	29 f0       	breq	.+10     	; 0x42e6 <calloc+0x2c>
    42dc:	60 e0       	ldi	r22, 0x00	; 0
    42de:	70 e0       	ldi	r23, 0x00	; 0
    42e0:	a8 01       	movw	r20, r16
    42e2:	0e 94 79 21 	call	0x42f2	; 0x42f2 <memset>
    42e6:	ce 01       	movw	r24, r28
    42e8:	df 91       	pop	r29
    42ea:	cf 91       	pop	r28
    42ec:	1f 91       	pop	r17
    42ee:	0f 91       	pop	r16
    42f0:	08 95       	ret

000042f2 <memset>:
    42f2:	dc 01       	movw	r26, r24
    42f4:	01 c0       	rjmp	.+2      	; 0x42f8 <memset+0x6>
    42f6:	6d 93       	st	X+, r22
    42f8:	41 50       	subi	r20, 0x01	; 1
    42fa:	50 40       	sbci	r21, 0x00	; 0
    42fc:	e0 f7       	brcc	.-8      	; 0x42f6 <memset+0x4>
    42fe:	08 95       	ret

00004300 <strrev>:
    4300:	dc 01       	movw	r26, r24
    4302:	fc 01       	movw	r30, r24
    4304:	67 2f       	mov	r22, r23
    4306:	71 91       	ld	r23, Z+
    4308:	77 23       	and	r23, r23
    430a:	e1 f7       	brne	.-8      	; 0x4304 <strrev+0x4>
    430c:	32 97       	sbiw	r30, 0x02	; 2
    430e:	04 c0       	rjmp	.+8      	; 0x4318 <strrev+0x18>
    4310:	7c 91       	ld	r23, X
    4312:	6d 93       	st	X+, r22
    4314:	70 83       	st	Z, r23
    4316:	62 91       	ld	r22, -Z
    4318:	ae 17       	cp	r26, r30
    431a:	bf 07       	cpc	r27, r31
    431c:	c8 f3       	brcs	.-14     	; 0x4310 <strrev+0x10>
    431e:	08 95       	ret

00004320 <_exit>:
    4320:	f8 94       	cli

00004322 <__stop_program>:
    4322:	ff cf       	rjmp	.-2      	; 0x4322 <__stop_program>
