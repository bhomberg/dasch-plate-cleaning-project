
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ee  00800100  000041b0  00004244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  008003ee  008003ee  00004532  2**0
                  ALLOC
  3 .stab         00005274  00000000  00000000  00004534  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000544b  00000000  00000000  000097a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000ebf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003cb  00000000  00000000  0000ec33  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001214  00000000  00000000  0000effe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002da  00000000  00000000  00010212  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001906  00000000  00000000  000104ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000170  00000000  00000000  00011df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b57  00000000  00000000  00011f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000129f  00000000  00000000  00012abb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__vector_11>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      50:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__vector_20>
      54:	0c 94 25 1a 	jmp	0x344a	; 0x344a <__vector_21>
      58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      70:	0c 94 97 18 	jmp	0x312e	; 0x312e <__vector_28>
      74:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__vector_29>
      78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      8c:	61 0a       	sbc	r6, r17
      8e:	6e 0a       	sbc	r6, r30
      90:	80 0a       	sbc	r8, r16
      92:	8f 0a       	sbc	r8, r31
      94:	9f 0a       	sbc	r9, r31
      96:	ae 0a       	sbc	r10, r30
      98:	be 0a       	sbc	r11, r30
      9a:	cf 0a       	sbc	r12, r31
      9c:	df 0a       	sbc	r13, r31
      9e:	e9 0a       	sbc	r14, r25
      a0:	ed 0a       	sbc	r14, r29
      a2:	f7 0a       	sbc	r15, r23
      a4:	fd 0a       	sbc	r15, r29
      a6:	07 0b       	sbc	r16, r23
      a8:	0b 0b       	sbc	r16, r27
      aa:	16 0b       	sbc	r17, r22
      ac:	1a 0b       	sbc	r17, r26
      ae:	25 0b       	sbc	r18, r21
      b0:	29 0b       	sbc	r18, r25
      b2:	34 0b       	sbc	r19, r20
      b4:	38 0b       	sbc	r19, r24
      b6:	43 0b       	sbc	r20, r19
      b8:	47 0b       	sbc	r20, r23
      ba:	56 0b       	sbc	r21, r22
      bc:	5a 0b       	sbc	r21, r26
      be:	6b 0b       	sbc	r22, r27
      c0:	6f 0b       	sbc	r22, r31
      c2:	7a 0b       	sbc	r23, r26
      c4:	7e 0b       	sbc	r23, r30
      c6:	89 0b       	sbc	r24, r25
      c8:	8d 0b       	sbc	r24, r29
      ca:	99 0b       	sbc	r25, r25
      cc:	9f 0b       	sbc	r25, r31
      ce:	af 0b       	sbc	r26, r31
      d0:	b9 0b       	sbc	r27, r25
      d2:	cf 0b       	sbc	r28, r31
      d4:	d9 0b       	sbc	r29, r25
      d6:	ef 0b       	sbc	r30, r31
      d8:	f9 0b       	sbc	r31, r25
      da:	0f 0c       	add	r0, r15
      dc:	19 0c       	add	r1, r9
      de:	2f 0c       	add	r2, r15
      e0:	39 0c       	add	r3, r9
      e2:	47 0c       	add	r4, r7

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d0 e4       	ldi	r29, 0x40	; 64
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	13 e0       	ldi	r17, 0x03	; 3
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b1 e0       	ldi	r27, 0x01	; 1
      f6:	e0 eb       	ldi	r30, 0xB0	; 176
      f8:	f1 e4       	ldi	r31, 0x41	; 65
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	ae 3e       	cpi	r26, 0xEE	; 238
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	14 e0       	ldi	r17, 0x04	; 4
     10c:	ae ee       	ldi	r26, 0xEE	; 238
     10e:	b3 e0       	ldi	r27, 0x03	; 3
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	a6 33       	cpi	r26, 0x36	; 54
     116:	b1 07       	cpc	r27, r17
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 72 07 	call	0xee4	; 0xee4 <main>
     11e:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <_exit>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <i2c_init>:
     126:	10 92 b9 00 	sts	0x00B9, r1
     12a:	8c e0       	ldi	r24, 0x0C	; 12
     12c:	80 93 b8 00 	sts	0x00B8, r24
     130:	08 95       	ret

00000132 <i2c_start>:
     132:	98 2f       	mov	r25, r24
     134:	84 ea       	ldi	r24, 0xA4	; 164
     136:	80 93 bc 00 	sts	0x00BC, r24
     13a:	80 91 bc 00 	lds	r24, 0x00BC
     13e:	87 ff       	sbrs	r24, 7
     140:	fc cf       	rjmp	.-8      	; 0x13a <i2c_start+0x8>
     142:	80 91 b9 00 	lds	r24, 0x00B9
     146:	88 7f       	andi	r24, 0xF8	; 248
     148:	88 30       	cpi	r24, 0x08	; 8
     14a:	21 f0       	breq	.+8      	; 0x154 <i2c_start+0x22>
     14c:	80 31       	cpi	r24, 0x10	; 16
     14e:	11 f0       	breq	.+4      	; 0x154 <i2c_start+0x22>
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	08 95       	ret
     154:	90 93 bb 00 	sts	0x00BB, r25
     158:	84 e8       	ldi	r24, 0x84	; 132
     15a:	80 93 bc 00 	sts	0x00BC, r24
     15e:	80 91 bc 00 	lds	r24, 0x00BC
     162:	87 ff       	sbrs	r24, 7
     164:	fc cf       	rjmp	.-8      	; 0x15e <i2c_start+0x2c>
     166:	90 91 b9 00 	lds	r25, 0x00B9
     16a:	98 7f       	andi	r25, 0xF8	; 248
     16c:	98 31       	cpi	r25, 0x18	; 24
     16e:	11 f4       	brne	.+4      	; 0x174 <i2c_start+0x42>
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	08 95       	ret
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 34       	cpi	r25, 0x40	; 64
     178:	09 f0       	breq	.+2      	; 0x17c <i2c_start+0x4a>
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	08 95       	ret

0000017e <i2c_start_wait>:
     17e:	98 2f       	mov	r25, r24
     180:	44 ea       	ldi	r20, 0xA4	; 164
     182:	34 e8       	ldi	r19, 0x84	; 132
     184:	24 e9       	ldi	r18, 0x94	; 148
     186:	40 93 bc 00 	sts	0x00BC, r20
     18a:	80 91 bc 00 	lds	r24, 0x00BC
     18e:	87 ff       	sbrs	r24, 7
     190:	fc cf       	rjmp	.-8      	; 0x18a <i2c_start_wait+0xc>
     192:	80 91 b9 00 	lds	r24, 0x00B9
     196:	88 7f       	andi	r24, 0xF8	; 248
     198:	88 30       	cpi	r24, 0x08	; 8
     19a:	11 f0       	breq	.+4      	; 0x1a0 <i2c_start_wait+0x22>
     19c:	80 31       	cpi	r24, 0x10	; 16
     19e:	99 f7       	brne	.-26     	; 0x186 <i2c_start_wait+0x8>
     1a0:	90 93 bb 00 	sts	0x00BB, r25
     1a4:	30 93 bc 00 	sts	0x00BC, r19
     1a8:	80 91 bc 00 	lds	r24, 0x00BC
     1ac:	87 ff       	sbrs	r24, 7
     1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <i2c_start_wait+0x2a>
     1b0:	80 91 b9 00 	lds	r24, 0x00B9
     1b4:	88 7f       	andi	r24, 0xF8	; 248
     1b6:	80 32       	cpi	r24, 0x20	; 32
     1b8:	11 f0       	breq	.+4      	; 0x1be <i2c_start_wait+0x40>
     1ba:	88 35       	cpi	r24, 0x58	; 88
     1bc:	39 f4       	brne	.+14     	; 0x1cc <i2c_start_wait+0x4e>
     1be:	20 93 bc 00 	sts	0x00BC, r18
     1c2:	80 91 bc 00 	lds	r24, 0x00BC
     1c6:	84 fd       	sbrc	r24, 4
     1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <i2c_start_wait+0x44>
     1ca:	dd cf       	rjmp	.-70     	; 0x186 <i2c_start_wait+0x8>
     1cc:	08 95       	ret

000001ce <i2c_rep_start>:
     1ce:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
     1d2:	08 95       	ret

000001d4 <i2c_stop>:
     1d4:	84 e9       	ldi	r24, 0x94	; 148
     1d6:	80 93 bc 00 	sts	0x00BC, r24
     1da:	80 91 bc 00 	lds	r24, 0x00BC
     1de:	84 fd       	sbrc	r24, 4
     1e0:	fc cf       	rjmp	.-8      	; 0x1da <i2c_stop+0x6>
     1e2:	08 95       	ret

000001e4 <i2c_write>:
     1e4:	80 93 bb 00 	sts	0x00BB, r24
     1e8:	84 e8       	ldi	r24, 0x84	; 132
     1ea:	80 93 bc 00 	sts	0x00BC, r24
     1ee:	80 91 bc 00 	lds	r24, 0x00BC
     1f2:	87 ff       	sbrs	r24, 7
     1f4:	fc cf       	rjmp	.-8      	; 0x1ee <i2c_write+0xa>
     1f6:	80 91 b9 00 	lds	r24, 0x00B9
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	88 7f       	andi	r24, 0xF8	; 248
     1fe:	88 32       	cpi	r24, 0x28	; 40
     200:	09 f0       	breq	.+2      	; 0x204 <i2c_write+0x20>
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	89 2f       	mov	r24, r25
     206:	08 95       	ret

00000208 <i2c_readAck>:
     208:	84 ec       	ldi	r24, 0xC4	; 196
     20a:	80 93 bc 00 	sts	0x00BC, r24
     20e:	80 91 bc 00 	lds	r24, 0x00BC
     212:	87 ff       	sbrs	r24, 7
     214:	fc cf       	rjmp	.-8      	; 0x20e <i2c_readAck+0x6>
     216:	80 91 bb 00 	lds	r24, 0x00BB
     21a:	08 95       	ret

0000021c <i2c_readNak>:
     21c:	84 e8       	ldi	r24, 0x84	; 132
     21e:	80 93 bc 00 	sts	0x00BC, r24
     222:	80 91 bc 00 	lds	r24, 0x00BC
     226:	87 ff       	sbrs	r24, 7
     228:	fc cf       	rjmp	.-8      	; 0x222 <i2c_readNak+0x6>
     22a:	80 91 bb 00 	lds	r24, 0x00BB
     22e:	08 95       	ret

00000230 <is_digital_input_high>:

// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
// the pin.
static inline unsigned char is_digital_input_high(unsigned char pin)
{
     230:	48 2f       	mov	r20, r24
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     232:	88 30       	cpi	r24, 0x08	; 8
     234:	58 f4       	brcc	.+22     	; 0x24c <is_digital_input_high+0x1c>
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	02 c0       	rjmp	.+4      	; 0x240 <is_digital_input_high+0x10>
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	4a 95       	dec	r20
     242:	e2 f7       	brpl	.-8      	; 0x23c <is_digital_input_high+0xc>
     244:	98 2f       	mov	r25, r24
     246:	e9 e2       	ldi	r30, 0x29	; 41
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	36 c0       	rjmp	.+108    	; 0x2b8 <is_digital_input_high+0x88>
	}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     24c:	80 31       	cpi	r24, 0x10	; 16
     24e:	78 f4       	brcc	.+30     	; 0x26e <is_digital_input_high+0x3e>
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	28 50       	subi	r18, 0x08	; 8
     256:	30 40       	sbci	r19, 0x00	; 0
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	02 c0       	rjmp	.+4      	; 0x262 <is_digital_input_high+0x32>
     25e:	88 0f       	add	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	2a 95       	dec	r18
     264:	e2 f7       	brpl	.-8      	; 0x25e <is_digital_input_high+0x2e>
     266:	98 2f       	mov	r25, r24
     268:	e3 e2       	ldi	r30, 0x23	; 35
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	25 c0       	rjmp	.+74     	; 0x2b8 <is_digital_input_high+0x88>
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     26e:	88 31       	cpi	r24, 0x18	; 24
     270:	78 f4       	brcc	.+30     	; 0x290 <is_digital_input_high+0x60>
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
     272:	28 2f       	mov	r18, r24
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	20 51       	subi	r18, 0x10	; 16
     278:	30 40       	sbci	r19, 0x00	; 0
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	02 c0       	rjmp	.+4      	; 0x284 <is_digital_input_high+0x54>
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	2a 95       	dec	r18
     286:	e2 f7       	brpl	.-8      	; 0x280 <is_digital_input_high+0x50>
     288:	98 2f       	mov	r25, r24
     28a:	e6 e2       	ldi	r30, 0x26	; 38
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	14 c0       	rjmp	.+40     	; 0x2b8 <is_digital_input_high+0x88>
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     290:	80 32       	cpi	r24, 0x20	; 32
     292:	20 f0       	brcs	.+8      	; 0x29c <is_digital_input_high+0x6c>
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	e0 e0       	ldi	r30, 0x00	; 0
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	0e c0       	rjmp	.+28     	; 0x2b8 <is_digital_input_high+0x88>
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
		io->bitmask = 1 << (31 - pin);
     29c:	2f e1       	ldi	r18, 0x1F	; 31
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	28 1b       	sub	r18, r24
     2a2:	31 09       	sbc	r19, r1
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <is_digital_input_high+0x7e>
     2aa:	88 0f       	add	r24, r24
     2ac:	99 1f       	adc	r25, r25
     2ae:	2a 95       	dec	r18
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <is_digital_input_high+0x7a>
     2b2:	98 2f       	mov	r25, r24
     2b4:	e0 e2       	ldi	r30, 0x20	; 32
     2b6:	f0 e0       	ldi	r31, 0x00	; 0

// low-level method for reading the value of the PIN register for an pin or set of pins
// described by an IOStruct pointer.
static inline unsigned char get_digital_input_value(struct IOStruct* ioPin)
{
	return *(ioPin->pinRegister) & ioPin->bitmask;
     2b8:	80 81       	ld	r24, Z
static inline unsigned char is_digital_input_high(unsigned char pin)
{
	struct IOStruct registers;
	get_io_registers(&registers, pin);
	return get_digital_input_value(&registers);
}
     2ba:	89 23       	and	r24, r25
     2bc:	08 95       	ret

000002be <brush1_action>:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
	}
}

void brush1_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	f9 01       	movw	r30, r18
     2c4:	d8 01       	movw	r26, r16
	switch(state){
     2c6:	89 30       	cpi	r24, 0x09	; 9
     2c8:	91 05       	cpc	r25, r1
     2ca:	31 f1       	breq	.+76     	; 0x318 <brush1_action+0x5a>
     2cc:	8a 30       	cpi	r24, 0x0A	; 10
     2ce:	91 05       	cpc	r25, r1
     2d0:	5c f4       	brge	.+22     	; 0x2e8 <brush1_action+0x2a>
     2d2:	87 30       	cpi	r24, 0x07	; 7
     2d4:	91 05       	cpc	r25, r1
     2d6:	a9 f0       	breq	.+42     	; 0x302 <brush1_action+0x44>
     2d8:	88 30       	cpi	r24, 0x08	; 8
     2da:	91 05       	cpc	r25, r1
     2dc:	0c f0       	brlt	.+2      	; 0x2e0 <brush1_action+0x22>
     2de:	3f c0       	rjmp	.+126    	; 0x35e <brush1_action+0xa0>
     2e0:	06 97       	sbiw	r24, 0x06	; 6
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <brush1_action+0x28>
     2e4:	52 c0       	rjmp	.+164    	; 0x38a <brush1_action+0xcc>
     2e6:	2c c0       	rjmp	.+88     	; 0x340 <brush1_action+0x82>
     2e8:	8b 30       	cpi	r24, 0x0B	; 11
     2ea:	91 05       	cpc	r25, r1
     2ec:	49 f1       	breq	.+82     	; 0x340 <brush1_action+0x82>
     2ee:	8b 30       	cpi	r24, 0x0B	; 11
     2f0:	91 05       	cpc	r25, r1
     2f2:	ec f0       	brlt	.+58     	; 0x32e <brush1_action+0x70>
     2f4:	8c 30       	cpi	r24, 0x0C	; 12
     2f6:	91 05       	cpc	r25, r1
     2f8:	59 f1       	breq	.+86     	; 0x350 <brush1_action+0x92>
     2fa:	0d 97       	sbiw	r24, 0x0d	; 13
     2fc:	09 f0       	breq	.+2      	; 0x300 <brush1_action+0x42>
     2fe:	45 c0       	rjmp	.+138    	; 0x38a <brush1_action+0xcc>
     300:	39 c0       	rjmp	.+114    	; 0x374 <brush1_action+0xb6>
		case MOVEC1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B1SET:
			*pfixtureMotor = 0;
     302:	11 82       	std	Z+1, r1	; 0x01
     304:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     306:	80 91 27 04 	lds	r24, 0x0427
     30a:	81 60       	ori	r24, 0x01	; 1
     30c:	80 93 27 04 	sts	0x0427, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
     310:	80 91 2b 04 	lds	r24, 0x042B
     314:	8f 77       	andi	r24, 0x7F	; 127
     316:	37 c0       	rjmp	.+110    	; 0x386 <brush1_action+0xc8>
			*pbrush1Motor = 1;
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
			break;
		case CLEAN1_1:
			*pbrush1Motor = 1;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	8d 93       	st	X+, r24
     31e:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     320:	91 83       	std	Z+1, r25	; 0x01
     322:	80 83       	st	Z, r24
     324:	80 91 2b 04 	lds	r24, 0x042B
     328:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     32a:	8f 7e       	andi	r24, 0xEF	; 239
     32c:	2c c0       	rjmp	.+88     	; 0x386 <brush1_action+0xc8>
			break;
		case B1STOP1:
			*pfixtureMotor = 0;
     32e:	11 82       	std	Z+1, r1	; 0x01
     330:	10 82       	st	Z, r1
			*pbrush1Motor = 0;
     332:	1d 92       	st	X+, r1
     334:	1c 92       	st	X, r1
			u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     336:	80 91 2a 04 	lds	r24, 0x042A
     33a:	8f 7b       	andi	r24, 0xBF	; 191
			u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     33c:	80 62       	ori	r24, 0x20	; 32
     33e:	17 c0       	rjmp	.+46     	; 0x36e <brush1_action+0xb0>
			break;
		case CLEAN1_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     340:	80 91 2b 04 	lds	r24, 0x042B
     344:	80 61       	ori	r24, 0x10	; 16
     346:	80 93 2b 04 	sts	0x042B, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	16 c0       	rjmp	.+44     	; 0x37c <brush1_action+0xbe>
			break;
		case B1START2:
			*pfixtureMotor = 0;
     350:	11 82       	std	Z+1, r1	; 0x01
     352:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
     354:	80 91 2b 04 	lds	r24, 0x042B
     358:	8f 77       	andi	r24, 0x7F	; 127
     35a:	80 93 2b 04 	sts	0x042B, r24
			*pbrush1Motor = 1;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	8d 93       	st	X+, r24
     364:	9c 93       	st	X, r25
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     366:	80 91 2a 04 	lds	r24, 0x042A
     36a:	80 64       	ori	r24, 0x40	; 64
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     36c:	8f 7d       	andi	r24, 0xDF	; 223
     36e:	80 93 2a 04 	sts	0x042A, r24
     372:	0b c0       	rjmp	.+22     	; 0x38a <brush1_action+0xcc>
			break;
		case CLEAN1_3:
			*pbrush1Motor = 1;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	8d 93       	st	X+, r24
     37a:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     37c:	91 83       	std	Z+1, r25	; 0x01
     37e:	80 83       	st	Z, r24
     380:	80 91 2b 04 	lds	r24, 0x042B
     384:	80 62       	ori	r24, 0x20	; 32
     386:	80 93 2b 04 	sts	0x042B, r24
			break;
	}
}
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	08 95       	ret

00000390 <brush2_action>:

void brush2_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     390:	ef 92       	push	r14
     392:	ff 92       	push	r15
     394:	f9 01       	movw	r30, r18
     396:	d7 01       	movw	r26, r14
	switch(state){
     398:	83 31       	cpi	r24, 0x13	; 19
     39a:	91 05       	cpc	r25, r1
     39c:	b9 f1       	breq	.+110    	; 0x40c <brush2_action+0x7c>
     39e:	84 31       	cpi	r24, 0x14	; 20
     3a0:	91 05       	cpc	r25, r1
     3a2:	9c f4       	brge	.+38     	; 0x3ca <brush2_action+0x3a>
     3a4:	80 31       	cpi	r24, 0x10	; 16
     3a6:	91 05       	cpc	r25, r1
     3a8:	09 f4       	brne	.+2      	; 0x3ac <brush2_action+0x1c>
     3aa:	3d c0       	rjmp	.+122    	; 0x426 <brush2_action+0x96>
     3ac:	81 31       	cpi	r24, 0x11	; 17
     3ae:	91 05       	cpc	r25, r1
     3b0:	24 f4       	brge	.+8      	; 0x3ba <brush2_action+0x2a>
     3b2:	0f 97       	sbiw	r24, 0x0f	; 15
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <brush2_action+0x28>
     3b6:	68 c0       	rjmp	.+208    	; 0x488 <brush2_action+0xf8>
     3b8:	15 c0       	rjmp	.+42     	; 0x3e4 <brush2_action+0x54>
     3ba:	81 31       	cpi	r24, 0x11	; 17
     3bc:	91 05       	cpc	r25, r1
     3be:	09 f4       	brne	.+2      	; 0x3c2 <brush2_action+0x32>
     3c0:	41 c0       	rjmp	.+130    	; 0x444 <brush2_action+0xb4>
     3c2:	42 97       	sbiw	r24, 0x12	; 18
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <brush2_action+0x38>
     3c6:	60 c0       	rjmp	.+192    	; 0x488 <brush2_action+0xf8>
     3c8:	14 c0       	rjmp	.+40     	; 0x3f2 <brush2_action+0x62>
     3ca:	85 31       	cpi	r24, 0x15	; 21
     3cc:	91 05       	cpc	r25, r1
     3ce:	d1 f1       	breq	.+116    	; 0x444 <brush2_action+0xb4>
     3d0:	85 31       	cpi	r24, 0x15	; 21
     3d2:	91 05       	cpc	r25, r1
     3d4:	0c f1       	brlt	.+66     	; 0x418 <brush2_action+0x88>
     3d6:	86 31       	cpi	r24, 0x16	; 22
     3d8:	91 05       	cpc	r25, r1
     3da:	c9 f1       	breq	.+114    	; 0x44e <brush2_action+0xbe>
     3dc:	47 97       	sbiw	r24, 0x17	; 23
     3de:	09 f0       	breq	.+2      	; 0x3e2 <brush2_action+0x52>
     3e0:	53 c0       	rjmp	.+166    	; 0x488 <brush2_action+0xf8>
     3e2:	49 c0       	rjmp	.+146    	; 0x476 <brush2_action+0xe6>
		case B2SET:
			*pfixtureMotor = 0;
     3e4:	11 82       	std	Z+1, r1	; 0x01
     3e6:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     3e8:	80 91 27 04 	lds	r24, 0x0427
     3ec:	88 60       	ori	r24, 0x08	; 8
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     3ee:	8b 7f       	andi	r24, 0xFB	; 251
     3f0:	3f c0       	rjmp	.+126    	; 0x470 <brush2_action+0xe0>
		case CLEAN2_1:
			*pbrush2Motor = 1;
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP1:
			*pfixtureMotor = 0;
     3f2:	11 82       	std	Z+1, r1	; 0x01
     3f4:	10 82       	st	Z, r1
			*pbrush2Motor = 0;
     3f6:	1d 92       	st	X+, r1
     3f8:	1c 92       	st	X, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     3fa:	80 91 28 04 	lds	r24, 0x0428
     3fe:	8e 7f       	andi	r24, 0xFE	; 254
     400:	80 93 28 04 	sts	0x0428, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     404:	80 91 2a 04 	lds	r24, 0x042A
     408:	80 68       	ori	r24, 0x80	; 128
     40a:	19 c0       	rjmp	.+50     	; 0x43e <brush2_action+0xae>
			break;
		case CLEAN2_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     40c:	80 91 2b 04 	lds	r24, 0x042B
     410:	8f 7e       	andi	r24, 0xEF	; 239
     412:	80 93 2b 04 	sts	0x042B, r24
     416:	2f c0       	rjmp	.+94     	; 0x476 <brush2_action+0xe6>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2START2:
			*pfixtureMotor = 0;
     418:	11 82       	std	Z+1, r1	; 0x01
     41a:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     41c:	80 91 27 04 	lds	r24, 0x0427
     420:	8b 7f       	andi	r24, 0xFB	; 251
     422:	80 93 27 04 	sts	0x0427, r24
			*pbrush2Motor = 1;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	8d 93       	st	X+, r24
     42c:	9c 93       	st	X, r25
			u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     42e:	80 91 28 04 	lds	r24, 0x0428
     432:	81 60       	ori	r24, 0x01	; 1
     434:	80 93 28 04 	sts	0x0428, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     438:	80 91 2a 04 	lds	r24, 0x042A
     43c:	8f 77       	andi	r24, 0x7F	; 127
     43e:	80 93 2a 04 	sts	0x042A, r24
     442:	22 c0       	rjmp	.+68     	; 0x488 <brush2_action+0xf8>
			break;
		case CLEAN2_3:
			*pbrush2Motor = 1;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	8d 93       	st	X+, r24
     44a:	9c 93       	st	X, r25
     44c:	16 c0       	rjmp	.+44     	; 0x47a <brush2_action+0xea>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP2:
			*pbrush2Motor = 0;
     44e:	1d 92       	st	X+, r1
     450:	1c 92       	st	X, r1
			*pfixtureMotor = 0;
     452:	11 82       	std	Z+1, r1	; 0x01
     454:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     456:	80 91 28 04 	lds	r24, 0x0428
     45a:	8e 7f       	andi	r24, 0xFE	; 254
     45c:	80 93 28 04 	sts	0x0428, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     460:	80 91 2a 04 	lds	r24, 0x042A
     464:	80 68       	ori	r24, 0x80	; 128
     466:	80 93 2a 04 	sts	0x042A, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     46a:	80 91 27 04 	lds	r24, 0x0427
     46e:	87 7f       	andi	r24, 0xF7	; 247
     470:	80 93 27 04 	sts	0x0427, r24
     474:	09 c0       	rjmp	.+18     	; 0x488 <brush2_action+0xf8>
			break;
		//*************************************************
		case MOVED1:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	91 83       	std	Z+1, r25	; 0x01
     47c:	80 83       	st	Z, r24
     47e:	80 91 2b 04 	lds	r24, 0x042B
     482:	80 62       	ori	r24, 0x20	; 32
     484:	80 93 2b 04 	sts	0x042B, r24
			break;
	}
}
     488:	ff 90       	pop	r15
     48a:	ef 90       	pop	r14
     48c:	08 95       	ret

0000048e <dry_action>:

void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	ea 01       	movw	r28, r20
     498:	f9 01       	movw	r30, r18
     49a:	d6 01       	movw	r26, r12
	switch(state){
     49c:	8d 31       	cpi	r24, 0x1D	; 29
     49e:	91 05       	cpc	r25, r1
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <dry_action+0x16>
     4a2:	57 c0       	rjmp	.+174    	; 0x552 <dry_action+0xc4>
     4a4:	8e 31       	cpi	r24, 0x1E	; 30
     4a6:	91 05       	cpc	r25, r1
     4a8:	a4 f4       	brge	.+40     	; 0x4d2 <dry_action+0x44>
     4aa:	8a 31       	cpi	r24, 0x1A	; 26
     4ac:	91 05       	cpc	r25, r1
     4ae:	69 f1       	breq	.+90     	; 0x50a <dry_action+0x7c>
     4b0:	8b 31       	cpi	r24, 0x1B	; 27
     4b2:	91 05       	cpc	r25, r1
     4b4:	3c f4       	brge	.+14     	; 0x4c4 <dry_action+0x36>
     4b6:	88 31       	cpi	r24, 0x18	; 24
     4b8:	91 05       	cpc	r25, r1
     4ba:	09 f1       	breq	.+66     	; 0x4fe <dry_action+0x70>
     4bc:	49 97       	sbiw	r24, 0x19	; 25
     4be:	09 f0       	breq	.+2      	; 0x4c2 <dry_action+0x34>
     4c0:	90 c0       	rjmp	.+288    	; 0x5e2 <dry_action+0x154>
     4c2:	68 c0       	rjmp	.+208    	; 0x594 <dry_action+0x106>
     4c4:	8b 31       	cpi	r24, 0x1B	; 27
     4c6:	91 05       	cpc	r25, r1
     4c8:	79 f1       	breq	.+94     	; 0x528 <dry_action+0x9a>
     4ca:	4c 97       	sbiw	r24, 0x1c	; 28
     4cc:	09 f0       	breq	.+2      	; 0x4d0 <dry_action+0x42>
     4ce:	89 c0       	rjmp	.+274    	; 0x5e2 <dry_action+0x154>
     4d0:	38 c0       	rjmp	.+112    	; 0x542 <dry_action+0xb4>
     4d2:	80 32       	cpi	r24, 0x20	; 32
     4d4:	91 05       	cpc	r25, r1
     4d6:	09 f4       	brne	.+2      	; 0x4da <dry_action+0x4c>
     4d8:	5d c0       	rjmp	.+186    	; 0x594 <dry_action+0x106>
     4da:	81 32       	cpi	r24, 0x21	; 33
     4dc:	91 05       	cpc	r25, r1
     4de:	3c f4       	brge	.+14     	; 0x4ee <dry_action+0x60>
     4e0:	8e 31       	cpi	r24, 0x1E	; 30
     4e2:	91 05       	cpc	r25, r1
     4e4:	d9 f1       	breq	.+118    	; 0x55c <dry_action+0xce>
     4e6:	4f 97       	sbiw	r24, 0x1f	; 31
     4e8:	09 f0       	breq	.+2      	; 0x4ec <dry_action+0x5e>
     4ea:	7b c0       	rjmp	.+246    	; 0x5e2 <dry_action+0x154>
     4ec:	4c c0       	rjmp	.+152    	; 0x586 <dry_action+0xf8>
     4ee:	81 32       	cpi	r24, 0x21	; 33
     4f0:	91 05       	cpc	r25, r1
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <dry_action+0x68>
     4f4:	5e c0       	rjmp	.+188    	; 0x5b2 <dry_action+0x124>
     4f6:	82 97       	sbiw	r24, 0x22	; 34
     4f8:	09 f0       	breq	.+2      	; 0x4fc <dry_action+0x6e>
     4fa:	73 c0       	rjmp	.+230    	; 0x5e2 <dry_action+0x154>
     4fc:	69 c0       	rjmp	.+210    	; 0x5d0 <dry_action+0x142>
		case D1START:
			*pfixtureMotor = 0;
     4fe:	11 82       	std	Z+1, r1	; 0x01
     500:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.airKnife = 0;
     502:	80 91 28 04 	lds	r24, 0x0428
     506:	87 7f       	andi	r24, 0xF7	; 247
     508:	0c c0       	rjmp	.+24     	; 0x522 <dry_action+0x94>
		case DRY1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case D1STOP:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	91 83       	std	Z+1, r25	; 0x01
     510:	80 83       	st	Z, r24
     512:	80 91 2b 04 	lds	r24, 0x042B
     516:	80 62       	ori	r24, 0x20	; 32
     518:	80 93 2b 04 	sts	0x042B, r24
			u_outputByte1.bits_in_outputByte1.airKnife = 1;
     51c:	80 91 28 04 	lds	r24, 0x0428
     520:	88 60       	ori	r24, 0x08	; 8
     522:	80 93 28 04 	sts	0x0428, r24
     526:	5d c0       	rjmp	.+186    	; 0x5e2 <dry_action+0x154>
			break;
		case D2START:
			*pfixtureMotor = 0;
     528:	11 82       	std	Z+1, r1	; 0x01
     52a:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
     52c:	80 91 27 04 	lds	r24, 0x0427
     530:	80 64       	ori	r24, 0x40	; 64
			u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     532:	8f 7d       	andi	r24, 0xDF	; 223
     534:	80 93 27 04 	sts	0x0427, r24
			*ppaperTowelMotor = 1;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	8d 93       	st	X+, r24
     53e:	9c 93       	st	X, r25
     540:	50 c0       	rjmp	.+160    	; 0x5e2 <dry_action+0x154>
			break;
		case D2RAISE:
			*ppaperTowelMotor = 1;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	8d 93       	st	X+, r24
     548:	9c 93       	st	X, r25
			u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     54a:	80 91 28 04 	lds	r24, 0x0428
     54e:	8d 7f       	andi	r24, 0xFD	; 253
     550:	e8 cf       	rjmp	.-48     	; 0x522 <dry_action+0x94>
			break;
		case DRY2:
			*ppaperTowelMotor = 1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	8d 93       	st	X+, r24
     558:	9c 93       	st	X, r25
     55a:	23 c0       	rjmp	.+70     	; 0x5a2 <dry_action+0x114>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case D2STOP:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	91 83       	std	Z+1, r25	; 0x01
     562:	80 83       	st	Z, r24
     564:	80 91 2b 04 	lds	r24, 0x042B
     568:	80 62       	ori	r24, 0x20	; 32
     56a:	80 93 2b 04 	sts	0x042B, r24
			*ppaperTowelMotor = 0;
     56e:	1d 92       	st	X+, r1
     570:	1c 92       	st	X, r1
				u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
     572:	80 91 27 04 	lds	r24, 0x0427
     576:	8f 7b       	andi	r24, 0xBF	; 191
     578:	80 93 27 04 	sts	0x0427, r24
			u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     57c:	80 91 28 04 	lds	r24, 0x0428
     580:	82 60       	ori	r24, 0x02	; 2
			u_outputByte1.bits_in_outputByte1.ptLower = 0;
     582:	8b 7f       	andi	r24, 0xFB	; 251
     584:	ce cf       	rjmp	.-100    	; 0x522 <dry_action+0x94>
			break;
		case RAISEL2:
			*pfixtureMotor = 0;
     586:	11 82       	std	Z+1, r1	; 0x01
     588:	10 82       	st	Z, r1
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     58a:	80 91 2a 04 	lds	r24, 0x042A
     58e:	87 7f       	andi	r24, 0xF7	; 247
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     590:	80 61       	ori	r24, 0x10	; 16
     592:	1b c0       	rjmp	.+54     	; 0x5ca <dry_action+0x13c>
			break;
		case FIXH:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     594:	80 91 2b 04 	lds	r24, 0x042B
     598:	8f 7e       	andi	r24, 0xEF	; 239
     59a:	80 93 2b 04 	sts	0x042B, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	91 83       	std	Z+1, r25	; 0x01
     5a4:	80 83       	st	Z, r24
     5a6:	80 91 2b 04 	lds	r24, 0x042B
     5aa:	80 62       	ori	r24, 0x20	; 32
     5ac:	80 93 2b 04 	sts	0x042B, r24
     5b0:	18 c0       	rjmp	.+48     	; 0x5e2 <dry_action+0x154>
			break;
		case LOWERL3:
			*pfixtureMotor = 0;
     5b2:	11 82       	std	Z+1, r1	; 0x01
     5b4:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     5b6:	80 91 2b 04 	lds	r24, 0x042B
     5ba:	8f 7d       	andi	r24, 0xDF	; 223
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     5bc:	84 60       	ori	r24, 0x04	; 4
     5be:	80 93 2b 04 	sts	0x042B, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     5c2:	80 91 2a 04 	lds	r24, 0x042A
     5c6:	88 60       	ori	r24, 0x08	; 8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     5c8:	8f 7e       	andi	r24, 0xEF	; 239
     5ca:	80 93 2a 04 	sts	0x042A, r24
     5ce:	09 c0       	rjmp	.+18     	; 0x5e2 <dry_action+0x154>
			break;
		case UNLOAD:
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     5d0:	80 91 2b 04 	lds	r24, 0x042B
     5d4:	8d 7f       	andi	r24, 0xFD	; 253
     5d6:	80 93 2b 04 	sts	0x042B, r24
			*pplateLoadMotor = 1;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	99 83       	std	Y+1, r25	; 0x01
     5e0:	88 83       	st	Y, r24
			break;
	}
}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	df 90       	pop	r13
     5e8:	cf 90       	pop	r12
     5ea:	08 95       	ret

000005ec <button_debounce>:

bool button_debounce(int counter, int *pstateButton)
{
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	8c 01       	movw	r16, r24
     5f6:	eb 01       	movw	r28, r22
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && is_digital_input_high(IO_D0)){
     5f8:	88 81       	ld	r24, Y
     5fa:	99 81       	ldd	r25, Y+1	; 0x01
     5fc:	89 2b       	or	r24, r25
     5fe:	69 f4       	brne	.+26     	; 0x61a <button_debounce+0x2e>
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     606:	88 23       	and	r24, r24
     608:	41 f0       	breq	.+16     	; 0x61a <button_debounce+0x2e>
		counterRefPush = counter;
     60a:	10 93 f1 03 	sts	0x03F1, r17
     60e:	00 93 f0 03 	sts	0x03F0, r16
		*pstateButton = PRESSED;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	99 83       	std	Y+1, r25	; 0x01
     618:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     61a:	88 81       	ld	r24, Y
     61c:	99 81       	ldd	r25, Y+1	; 0x01
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	f9 f4       	brne	.+62     	; 0x660 <button_debounce+0x74>
		if(counter - counterRefPush > 15){
     622:	80 91 f0 03 	lds	r24, 0x03F0
     626:	90 91 f1 03 	lds	r25, 0x03F1
     62a:	98 01       	movw	r18, r16
     62c:	28 1b       	sub	r18, r24
     62e:	39 0b       	sbc	r19, r25
     630:	20 31       	cpi	r18, 0x10	; 16
     632:	31 05       	cpc	r19, r1
     634:	74 f0       	brlt	.+28     	; 0x652 <button_debounce+0x66>
			if(!is_digital_input_high(IO_D0)){
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     63c:	88 23       	and	r24, r24
     63e:	81 f4       	brne	.+32     	; 0x660 <button_debounce+0x74>
				counterRefRel = counter;
     640:	10 93 ef 03 	sts	0x03EF, r17
     644:	00 93 ee 03 	sts	0x03EE, r16
				*pstateButton = RELEASED;
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	99 83       	std	Y+1, r25	; 0x01
     64e:	88 83       	st	Y, r24
     650:	07 c0       	rjmp	.+14     	; 0x660 <button_debounce+0x74>
			}
		}
		else if(!is_digital_input_high(IO_D0)){
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     658:	88 23       	and	r24, r24
     65a:	11 f4       	brne	.+4      	; 0x660 <button_debounce+0x74>
			*pstateButton = NONE;
     65c:	19 82       	std	Y+1, r1	; 0x01
     65e:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     660:	88 81       	ld	r24, Y
     662:	99 81       	ldd	r25, Y+1	; 0x01
     664:	02 97       	sbiw	r24, 0x02	; 2
     666:	d9 f4       	brne	.+54     	; 0x69e <button_debounce+0xb2>
		if(is_digital_input_high(IO_D0)){
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     66e:	88 23       	and	r24, r24
     670:	49 f0       	breq	.+18     	; 0x684 <button_debounce+0x98>
			*pstateButton = PRESSED;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	99 83       	std	Y+1, r25	; 0x01
     678:	88 83       	st	Y, r24
			counterRefPush = counter;
     67a:	10 93 f1 03 	sts	0x03F1, r17
     67e:	00 93 f0 03 	sts	0x03F0, r16
     682:	0d c0       	rjmp	.+26     	; 0x69e <button_debounce+0xb2>
		}
		else if(counter - counterRefRel > 15){
     684:	80 91 ee 03 	lds	r24, 0x03EE
     688:	90 91 ef 03 	lds	r25, 0x03EF
     68c:	08 1b       	sub	r16, r24
     68e:	19 0b       	sbc	r17, r25
     690:	00 31       	cpi	r16, 0x10	; 16
     692:	11 05       	cpc	r17, r1
     694:	24 f0       	brlt	.+8      	; 0x69e <button_debounce+0xb2>
			*pstateButton = NONE;
     696:	19 82       	std	Y+1, r1	; 0x01
     698:	18 82       	st	Y, r1
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	01 c0       	rjmp	.+2      	; 0x6a0 <button_debounce+0xb4>
			return true;
     69e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	08 95       	ret

000006aa <init_trans>:

bool init_trans(int state, bool buttonTriggered, int counter, int counterRef){
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	dc 01       	movw	r26, r24
     6b0:	86 2f       	mov	r24, r22
     6b2:	fa 01       	movw	r30, r20
     6b4:	b9 01       	movw	r22, r18
	return((state == INIT && buttonTriggered)||
     6b6:	10 97       	sbiw	r26, 0x00	; 0
     6b8:	19 f4       	brne	.+6      	; 0x6c0 <init_trans+0x16>
     6ba:	88 23       	and	r24, r24
     6bc:	21 f1       	breq	.+72     	; 0x706 <init_trans+0x5c>
     6be:	45 c0       	rjmp	.+138    	; 0x74a <init_trans+0xa0>
     6c0:	a1 30       	cpi	r26, 0x01	; 1
     6c2:	b1 05       	cpc	r27, r1
     6c4:	b1 f4       	brne	.+44     	; 0x6f2 <init_trans+0x48>
     6c6:	42 1b       	sub	r20, r18
     6c8:	53 0b       	sbc	r21, r19
     6ca:	20 91 ae 03 	lds	r18, 0x03AE
     6ce:	30 91 af 03 	lds	r19, 0x03AF
     6d2:	80 91 a0 03 	lds	r24, 0x03A0
     6d6:	90 91 a1 03 	lds	r25, 0x03A1
     6da:	ec 01       	movw	r28, r24
     6dc:	2c 9f       	mul	r18, r28
     6de:	c0 01       	movw	r24, r0
     6e0:	2d 9f       	mul	r18, r29
     6e2:	90 0d       	add	r25, r0
     6e4:	3c 9f       	mul	r19, r28
     6e6:	90 0d       	add	r25, r0
     6e8:	11 24       	eor	r1, r1
     6ea:	84 17       	cp	r24, r20
     6ec:	95 07       	cpc	r25, r21
     6ee:	cc f4       	brge	.+50     	; 0x722 <init_trans+0x78>
     6f0:	2c c0       	rjmp	.+88     	; 0x74a <init_trans+0xa0>
     6f2:	a2 30       	cpi	r26, 0x02	; 2
     6f4:	b1 05       	cpc	r27, r1
     6f6:	d1 f0       	breq	.+52     	; 0x72c <init_trans+0x82>
     6f8:	a3 30       	cpi	r26, 0x03	; 3
     6fa:	b1 05       	cpc	r27, r1
     6fc:	21 f4       	brne	.+8      	; 0x706 <init_trans+0x5c>
     6fe:	80 91 26 04 	lds	r24, 0x0426
     702:	86 95       	lsr	r24
     704:	08 c0       	rjmp	.+16     	; 0x716 <init_trans+0x6c>
     706:	a4 30       	cpi	r26, 0x04	; 4
     708:	b1 05       	cpc	r27, r1
     70a:	59 f4       	brne	.+22     	; 0x722 <init_trans+0x78>
     70c:	80 91 26 04 	lds	r24, 0x0426
     710:	86 95       	lsr	r24
     712:	86 95       	lsr	r24
     714:	86 95       	lsr	r24
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	89 27       	eor	r24, r25
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	81 70       	andi	r24, 0x01	; 1
     71e:	90 70       	andi	r25, 0x00	; 0
     720:	16 c0       	rjmp	.+44     	; 0x74e <init_trans+0xa4>
     722:	15 97       	sbiw	r26, 0x05	; 5
     724:	19 f0       	breq	.+6      	; 0x72c <init_trans+0x82>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	11 c0       	rjmp	.+34     	; 0x74e <init_trans+0xa4>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	e6 1b       	sub	r30, r22
     732:	f7 0b       	sbc	r31, r23
     734:	80 91 90 03 	lds	r24, 0x0390
     738:	90 91 91 03 	lds	r25, 0x0391
     73c:	8e 17       	cp	r24, r30
     73e:	9f 07       	cpc	r25, r31
     740:	14 f4       	brge	.+4      	; 0x746 <init_trans+0x9c>
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	c9 01       	movw	r24, r18
     748:	02 c0       	rjmp	.+4      	; 0x74e <init_trans+0xa4>
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	90 e0       	ldi	r25, 0x00	; 0
	(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/)||
	(state == RAISEL1 && counter - counterRef > pWait)||
	(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0)||
	(state == LOWERL2 && counter - counterRef > pWait));
}
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <firstB_trans>:

bool firstB_trans(int state, int counter, int counterRef){
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	fc 01       	movw	r30, r24
     75a:	da 01       	movw	r26, r20
	//Had references to counterRef14...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/)||
     75c:	86 30       	cpi	r24, 0x06	; 6
     75e:	91 05       	cpc	r25, r1
     760:	b9 f4       	brne	.+46     	; 0x790 <firstB_trans+0x3c>
     762:	ab 01       	movw	r20, r22
     764:	4a 1b       	sub	r20, r26
     766:	5b 0b       	sbc	r21, r27
     768:	20 91 b2 03 	lds	r18, 0x03B2
     76c:	30 91 b3 03 	lds	r19, 0x03B3
     770:	80 91 a2 03 	lds	r24, 0x03A2
     774:	90 91 a3 03 	lds	r25, 0x03A3
     778:	ec 01       	movw	r28, r24
     77a:	2c 9f       	mul	r18, r28
     77c:	c0 01       	movw	r24, r0
     77e:	2d 9f       	mul	r18, r29
     780:	90 0d       	add	r25, r0
     782:	3c 9f       	mul	r19, r28
     784:	90 0d       	add	r25, r0
     786:	11 24       	eor	r1, r1
     788:	84 17       	cp	r24, r20
     78a:	95 07       	cpc	r25, r21
     78c:	bc f5       	brge	.+110    	; 0x7fc <firstB_trans+0xa8>
     78e:	83 c0       	rjmp	.+262    	; 0x896 <firstB_trans+0x142>
     790:	87 30       	cpi	r24, 0x07	; 7
     792:	91 05       	cpc	r25, r1
     794:	59 f4       	brne	.+22     	; 0x7ac <firstB_trans+0x58>
     796:	9b 01       	movw	r18, r22
     798:	24 1b       	sub	r18, r20
     79a:	35 0b       	sbc	r19, r21
     79c:	80 91 92 03 	lds	r24, 0x0392
     7a0:	90 91 93 03 	lds	r25, 0x0393
     7a4:	82 17       	cp	r24, r18
     7a6:	93 07       	cpc	r25, r19
     7a8:	64 f5       	brge	.+88     	; 0x802 <firstB_trans+0xae>
     7aa:	75 c0       	rjmp	.+234    	; 0x896 <firstB_trans+0x142>
     7ac:	88 30       	cpi	r24, 0x08	; 8
     7ae:	91 05       	cpc	r25, r1
     7b0:	59 f4       	brne	.+22     	; 0x7c8 <firstB_trans+0x74>
     7b2:	9b 01       	movw	r18, r22
     7b4:	24 1b       	sub	r18, r20
     7b6:	35 0b       	sbc	r19, r21
     7b8:	80 91 90 03 	lds	r24, 0x0390
     7bc:	90 91 91 03 	lds	r25, 0x0391
     7c0:	82 17       	cp	r24, r18
     7c2:	93 07       	cpc	r25, r19
     7c4:	b4 f5       	brge	.+108    	; 0x832 <firstB_trans+0xde>
     7c6:	67 c0       	rjmp	.+206    	; 0x896 <firstB_trans+0x142>
     7c8:	89 30       	cpi	r24, 0x09	; 9
     7ca:	91 05       	cpc	r25, r1
     7cc:	b9 f4       	brne	.+46     	; 0x7fc <firstB_trans+0xa8>
     7ce:	ab 01       	movw	r20, r22
     7d0:	4a 1b       	sub	r20, r26
     7d2:	5b 0b       	sbc	r21, r27
     7d4:	20 91 aa 03 	lds	r18, 0x03AA
     7d8:	30 91 ab 03 	lds	r19, 0x03AB
     7dc:	80 91 a2 03 	lds	r24, 0x03A2
     7e0:	90 91 a3 03 	lds	r25, 0x03A3
     7e4:	ec 01       	movw	r28, r24
     7e6:	2c 9f       	mul	r18, r28
     7e8:	c0 01       	movw	r24, r0
     7ea:	2d 9f       	mul	r18, r29
     7ec:	90 0d       	add	r25, r0
     7ee:	3c 9f       	mul	r19, r28
     7f0:	90 0d       	add	r25, r0
     7f2:	11 24       	eor	r1, r1
     7f4:	84 17       	cp	r24, r20
     7f6:	95 07       	cpc	r25, r21
     7f8:	74 f5       	brge	.+92     	; 0x856 <firstB_trans+0x102>
     7fa:	4d c0       	rjmp	.+154    	; 0x896 <firstB_trans+0x142>
     7fc:	ea 30       	cpi	r30, 0x0A	; 10
     7fe:	f1 05       	cpc	r31, r1
     800:	d9 f0       	breq	.+54     	; 0x838 <firstB_trans+0xe4>
     802:	eb 30       	cpi	r30, 0x0B	; 11
     804:	f1 05       	cpc	r31, r1
     806:	a9 f4       	brne	.+42     	; 0x832 <firstB_trans+0xde>
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	6a 1b       	sub	r22, r26
     80e:	7b 0b       	sbc	r23, r27
     810:	80 91 aa 03 	lds	r24, 0x03AA
     814:	90 91 ab 03 	lds	r25, 0x03AB
     818:	20 91 a2 03 	lds	r18, 0x03A2
     81c:	30 91 a3 03 	lds	r19, 0x03A3
     820:	fc 01       	movw	r30, r24
     822:	e2 9f       	mul	r30, r18
     824:	c0 01       	movw	r24, r0
     826:	e3 9f       	mul	r30, r19
     828:	90 0d       	add	r25, r0
     82a:	f2 9f       	mul	r31, r18
     82c:	90 0d       	add	r25, r0
     82e:	11 24       	eor	r1, r1
     830:	2b c0       	rjmp	.+86     	; 0x888 <firstB_trans+0x134>
     832:	ec 30       	cpi	r30, 0x0C	; 12
     834:	f1 05       	cpc	r31, r1
     836:	79 f4       	brne	.+30     	; 0x856 <firstB_trans+0x102>
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	6a 1b       	sub	r22, r26
     83e:	7b 0b       	sbc	r23, r27
     840:	80 91 90 03 	lds	r24, 0x0390
     844:	90 91 91 03 	lds	r25, 0x0391
     848:	86 17       	cp	r24, r22
     84a:	97 07       	cpc	r25, r23
     84c:	14 f4       	brge	.+4      	; 0x852 <firstB_trans+0xfe>
     84e:	21 e0       	ldi	r18, 0x01	; 1
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	c9 01       	movw	r24, r18
     854:	22 c0       	rjmp	.+68     	; 0x89a <firstB_trans+0x146>
     856:	3d 97       	sbiw	r30, 0x0d	; 13
     858:	19 f0       	breq	.+6      	; 0x860 <firstB_trans+0x10c>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	1d c0       	rjmp	.+58     	; 0x89a <firstB_trans+0x146>
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	6a 1b       	sub	r22, r26
     866:	7b 0b       	sbc	r23, r27
     868:	80 91 aa 03 	lds	r24, 0x03AA
     86c:	90 91 ab 03 	lds	r25, 0x03AB
     870:	20 91 a2 03 	lds	r18, 0x03A2
     874:	30 91 a3 03 	lds	r19, 0x03A3
     878:	ec 01       	movw	r28, r24
     87a:	c2 9f       	mul	r28, r18
     87c:	c0 01       	movw	r24, r0
     87e:	c3 9f       	mul	r28, r19
     880:	90 0d       	add	r25, r0
     882:	d2 9f       	mul	r29, r18
     884:	90 0d       	add	r25, r0
     886:	11 24       	eor	r1, r1
     888:	86 17       	cp	r24, r22
     88a:	97 07       	cpc	r25, r23
     88c:	14 f4       	brge	.+4      	; 0x892 <firstB_trans+0x13e>
     88e:	41 e0       	ldi	r20, 0x01	; 1
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	ca 01       	movw	r24, r20
     894:	02 c0       	rjmp	.+4      	; 0x89a <firstB_trans+0x146>
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
	(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||
	(state == B1STOP1 && counter - counterRef > pWait)||
	(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/)||
	(state == B1START2 && counter - counterRef > pWait)||
	(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate));
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <secondB_trans>:

bool secondB_trans(int state, int counter, int counterRef){
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	fc 01       	movw	r30, r24
     8a6:	da 01       	movw	r26, r20
	return((state == B2SET && counter - counterRef > mWait)||
     8a8:	8f 30       	cpi	r24, 0x0F	; 15
     8aa:	91 05       	cpc	r25, r1
     8ac:	59 f4       	brne	.+22     	; 0x8c4 <secondB_trans+0x24>
     8ae:	9b 01       	movw	r18, r22
     8b0:	24 1b       	sub	r18, r20
     8b2:	35 0b       	sbc	r19, r21
     8b4:	80 91 92 03 	lds	r24, 0x0392
     8b8:	90 91 93 03 	lds	r25, 0x0393
     8bc:	82 17       	cp	r24, r18
     8be:	93 07       	cpc	r25, r19
     8c0:	c4 f5       	brge	.+112    	; 0x932 <secondB_trans+0x92>
     8c2:	9e c0       	rjmp	.+316    	; 0xa00 <secondB_trans+0x160>
     8c4:	80 31       	cpi	r24, 0x10	; 16
     8c6:	91 05       	cpc	r25, r1
     8c8:	61 f4       	brne	.+24     	; 0x8e2 <secondB_trans+0x42>
     8ca:	9b 01       	movw	r18, r22
     8cc:	24 1b       	sub	r18, r20
     8ce:	35 0b       	sbc	r19, r21
     8d0:	80 91 90 03 	lds	r24, 0x0390
     8d4:	90 91 91 03 	lds	r25, 0x0391
     8d8:	82 17       	cp	r24, r18
     8da:	93 07       	cpc	r25, r19
     8dc:	0c f0       	brlt	.+2      	; 0x8e0 <secondB_trans+0x40>
     8de:	43 c0       	rjmp	.+134    	; 0x966 <secondB_trans+0xc6>
     8e0:	8f c0       	rjmp	.+286    	; 0xa00 <secondB_trans+0x160>
     8e2:	81 31       	cpi	r24, 0x11	; 17
     8e4:	91 05       	cpc	r25, r1
     8e6:	b9 f4       	brne	.+46     	; 0x916 <secondB_trans+0x76>
     8e8:	ab 01       	movw	r20, r22
     8ea:	4a 1b       	sub	r20, r26
     8ec:	5b 0b       	sbc	r21, r27
     8ee:	20 91 aa 03 	lds	r18, 0x03AA
     8f2:	30 91 ab 03 	lds	r19, 0x03AB
     8f6:	80 91 a2 03 	lds	r24, 0x03A2
     8fa:	90 91 a3 03 	lds	r25, 0x03A3
     8fe:	ec 01       	movw	r28, r24
     900:	2c 9f       	mul	r18, r28
     902:	c0 01       	movw	r24, r0
     904:	2d 9f       	mul	r18, r29
     906:	90 0d       	add	r25, r0
     908:	3c 9f       	mul	r19, r28
     90a:	90 0d       	add	r25, r0
     90c:	11 24       	eor	r1, r1
     90e:	84 17       	cp	r24, r20
     910:	95 07       	cpc	r25, r21
     912:	64 f5       	brge	.+88     	; 0x96c <secondB_trans+0xcc>
     914:	75 c0       	rjmp	.+234    	; 0xa00 <secondB_trans+0x160>
     916:	82 31       	cpi	r24, 0x12	; 18
     918:	91 05       	cpc	r25, r1
     91a:	59 f4       	brne	.+22     	; 0x932 <secondB_trans+0x92>
     91c:	9b 01       	movw	r18, r22
     91e:	24 1b       	sub	r18, r20
     920:	35 0b       	sbc	r19, r21
     922:	80 91 90 03 	lds	r24, 0x0390
     926:	90 91 91 03 	lds	r25, 0x0391
     92a:	82 17       	cp	r24, r18
     92c:	93 07       	cpc	r25, r19
     92e:	b4 f5       	brge	.+108    	; 0x99c <secondB_trans+0xfc>
     930:	67 c0       	rjmp	.+206    	; 0xa00 <secondB_trans+0x160>
     932:	e3 31       	cpi	r30, 0x13	; 19
     934:	f1 05       	cpc	r31, r1
     936:	b9 f4       	brne	.+46     	; 0x966 <secondB_trans+0xc6>
     938:	ab 01       	movw	r20, r22
     93a:	4a 1b       	sub	r20, r26
     93c:	5b 0b       	sbc	r21, r27
     93e:	20 91 aa 03 	lds	r18, 0x03AA
     942:	30 91 ab 03 	lds	r19, 0x03AB
     946:	80 91 a2 03 	lds	r24, 0x03A2
     94a:	90 91 a3 03 	lds	r25, 0x03A3
     94e:	ec 01       	movw	r28, r24
     950:	2c 9f       	mul	r18, r28
     952:	c0 01       	movw	r24, r0
     954:	2d 9f       	mul	r18, r29
     956:	90 0d       	add	r25, r0
     958:	3c 9f       	mul	r19, r28
     95a:	90 0d       	add	r25, r0
     95c:	11 24       	eor	r1, r1
     95e:	84 17       	cp	r24, r20
     960:	95 07       	cpc	r25, r21
     962:	74 f5       	brge	.+92     	; 0x9c0 <secondB_trans+0x120>
     964:	4d c0       	rjmp	.+154    	; 0xa00 <secondB_trans+0x160>
     966:	e4 31       	cpi	r30, 0x14	; 20
     968:	f1 05       	cpc	r31, r1
     96a:	d9 f0       	breq	.+54     	; 0x9a2 <secondB_trans+0x102>
     96c:	e5 31       	cpi	r30, 0x15	; 21
     96e:	f1 05       	cpc	r31, r1
     970:	a9 f4       	brne	.+42     	; 0x99c <secondB_trans+0xfc>
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	6a 1b       	sub	r22, r26
     978:	7b 0b       	sbc	r23, r27
     97a:	80 91 aa 03 	lds	r24, 0x03AA
     97e:	90 91 ab 03 	lds	r25, 0x03AB
     982:	20 91 a2 03 	lds	r18, 0x03A2
     986:	30 91 a3 03 	lds	r19, 0x03A3
     98a:	fc 01       	movw	r30, r24
     98c:	e2 9f       	mul	r30, r18
     98e:	c0 01       	movw	r24, r0
     990:	e3 9f       	mul	r30, r19
     992:	90 0d       	add	r25, r0
     994:	f2 9f       	mul	r31, r18
     996:	90 0d       	add	r25, r0
     998:	11 24       	eor	r1, r1
     99a:	2b c0       	rjmp	.+86     	; 0x9f2 <secondB_trans+0x152>
     99c:	e6 31       	cpi	r30, 0x16	; 22
     99e:	f1 05       	cpc	r31, r1
     9a0:	79 f4       	brne	.+30     	; 0x9c0 <secondB_trans+0x120>
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	6a 1b       	sub	r22, r26
     9a8:	7b 0b       	sbc	r23, r27
     9aa:	80 91 90 03 	lds	r24, 0x0390
     9ae:	90 91 91 03 	lds	r25, 0x0391
     9b2:	86 17       	cp	r24, r22
     9b4:	97 07       	cpc	r25, r23
     9b6:	14 f4       	brge	.+4      	; 0x9bc <secondB_trans+0x11c>
     9b8:	21 e0       	ldi	r18, 0x01	; 1
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	c9 01       	movw	r24, r18
     9be:	22 c0       	rjmp	.+68     	; 0xa04 <secondB_trans+0x164>
     9c0:	77 97       	sbiw	r30, 0x17	; 23
     9c2:	19 f0       	breq	.+6      	; 0x9ca <secondB_trans+0x12a>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	1d c0       	rjmp	.+58     	; 0xa04 <secondB_trans+0x164>
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	6a 1b       	sub	r22, r26
     9d0:	7b 0b       	sbc	r23, r27
     9d2:	80 91 b6 03 	lds	r24, 0x03B6
     9d6:	90 91 b7 03 	lds	r25, 0x03B7
     9da:	20 91 a2 03 	lds	r18, 0x03A2
     9de:	30 91 a3 03 	lds	r19, 0x03A3
     9e2:	ec 01       	movw	r28, r24
     9e4:	c2 9f       	mul	r28, r18
     9e6:	c0 01       	movw	r24, r0
     9e8:	c3 9f       	mul	r28, r19
     9ea:	90 0d       	add	r25, r0
     9ec:	d2 9f       	mul	r29, r18
     9ee:	90 0d       	add	r25, r0
     9f0:	11 24       	eor	r1, r1
     9f2:	86 17       	cp	r24, r22
     9f4:	97 07       	cpc	r25, r23
     9f6:	14 f4       	brge	.+4      	; 0x9fc <secondB_trans+0x15c>
     9f8:	41 e0       	ldi	r20, 0x01	; 1
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	ca 01       	movw	r24, r20
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <secondB_trans+0x164>
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	90 e0       	ldi	r25, 0x00	; 0
	(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/)||
	(state == B2START2 && counter - counterRef > pWait)||
	(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||
	(state == B2STOP2 && counter - counterRef > pWait)||
	(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/));
}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <dry_trans>:

bool dry_trans(int state, int counter, int counterRef, int counterRefFive){
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	fc 01       	movw	r30, r24
     a10:	da 01       	movw	r26, r20
	//Had references to counterRef26, 30...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == D1START && counter - counterRef > kWait)||
     a12:	88 31       	cpi	r24, 0x18	; 24
     a14:	91 05       	cpc	r25, r1
     a16:	61 f4       	brne	.+24     	; 0xa30 <dry_trans+0x26>
     a18:	9b 01       	movw	r18, r22
     a1a:	24 1b       	sub	r18, r20
     a1c:	35 0b       	sbc	r19, r21
     a1e:	80 91 94 03 	lds	r24, 0x0394
     a22:	90 91 95 03 	lds	r25, 0x0395
     a26:	82 17       	cp	r24, r18
     a28:	93 07       	cpc	r25, r19
     a2a:	0c f0       	brlt	.+2      	; 0xa2e <dry_trans+0x24>
     a2c:	45 c0       	rjmp	.+138    	; 0xab8 <dry_trans+0xae>
     a2e:	de c0       	rjmp	.+444    	; 0xbec <dry_trans+0x1e2>
     a30:	89 31       	cpi	r24, 0x19	; 25
     a32:	91 05       	cpc	r25, r1
     a34:	b9 f4       	brne	.+46     	; 0xa64 <dry_trans+0x5a>
     a36:	ab 01       	movw	r20, r22
     a38:	4a 1b       	sub	r20, r26
     a3a:	5b 0b       	sbc	r21, r27
     a3c:	20 91 ac 03 	lds	r18, 0x03AC
     a40:	30 91 ad 03 	lds	r19, 0x03AD
     a44:	80 91 a2 03 	lds	r24, 0x03A2
     a48:	90 91 a3 03 	lds	r25, 0x03A3
     a4c:	ec 01       	movw	r28, r24
     a4e:	2c 9f       	mul	r18, r28
     a50:	c0 01       	movw	r24, r0
     a52:	2d 9f       	mul	r18, r29
     a54:	90 0d       	add	r25, r0
     a56:	3c 9f       	mul	r19, r28
     a58:	90 0d       	add	r25, r0
     a5a:	11 24       	eor	r1, r1
     a5c:	84 17       	cp	r24, r20
     a5e:	95 07       	cpc	r25, r21
     a60:	d4 f5       	brge	.+116    	; 0xad6 <dry_trans+0xcc>
     a62:	c4 c0       	rjmp	.+392    	; 0xbec <dry_trans+0x1e2>
     a64:	8a 31       	cpi	r24, 0x1A	; 26
     a66:	91 05       	cpc	r25, r1
     a68:	b9 f4       	brne	.+46     	; 0xa98 <dry_trans+0x8e>
     a6a:	ab 01       	movw	r20, r22
     a6c:	4a 1b       	sub	r20, r26
     a6e:	5b 0b       	sbc	r21, r27
     a70:	20 91 b8 03 	lds	r18, 0x03B8
     a74:	30 91 b9 03 	lds	r19, 0x03B9
     a78:	80 91 a2 03 	lds	r24, 0x03A2
     a7c:	90 91 a3 03 	lds	r25, 0x03A3
     a80:	ec 01       	movw	r28, r24
     a82:	2c 9f       	mul	r18, r28
     a84:	c0 01       	movw	r24, r0
     a86:	2d 9f       	mul	r18, r29
     a88:	90 0d       	add	r25, r0
     a8a:	3c 9f       	mul	r19, r28
     a8c:	90 0d       	add	r25, r0
     a8e:	11 24       	eor	r1, r1
     a90:	84 17       	cp	r24, r20
     a92:	95 07       	cpc	r25, r21
     a94:	dc f5       	brge	.+118    	; 0xb0c <dry_trans+0x102>
     a96:	aa c0       	rjmp	.+340    	; 0xbec <dry_trans+0x1e2>
     a98:	8b 31       	cpi	r24, 0x1B	; 27
     a9a:	91 05       	cpc	r25, r1
     a9c:	69 f4       	brne	.+26     	; 0xab8 <dry_trans+0xae>
     a9e:	cb 01       	movw	r24, r22
     aa0:	82 1b       	sub	r24, r18
     aa2:	93 0b       	sbc	r25, r19
     aa4:	9c 01       	movw	r18, r24
     aa6:	80 91 92 03 	lds	r24, 0x0392
     aaa:	90 91 93 03 	lds	r25, 0x0393
     aae:	82 17       	cp	r24, r18
     ab0:	93 07       	cpc	r25, r19
     ab2:	0c f0       	brlt	.+2      	; 0xab6 <dry_trans+0xac>
     ab4:	45 c0       	rjmp	.+138    	; 0xb40 <dry_trans+0x136>
     ab6:	9a c0       	rjmp	.+308    	; 0xbec <dry_trans+0x1e2>
     ab8:	ec 31       	cpi	r30, 0x1C	; 28
     aba:	f1 05       	cpc	r31, r1
     abc:	61 f4       	brne	.+24     	; 0xad6 <dry_trans+0xcc>
     abe:	9b 01       	movw	r18, r22
     ac0:	2a 1b       	sub	r18, r26
     ac2:	3b 0b       	sbc	r19, r27
     ac4:	80 91 90 03 	lds	r24, 0x0390
     ac8:	90 91 91 03 	lds	r25, 0x0391
     acc:	82 17       	cp	r24, r18
     ace:	93 07       	cpc	r25, r19
     ad0:	0c f0       	brlt	.+2      	; 0xad4 <dry_trans+0xca>
     ad2:	42 c0       	rjmp	.+132    	; 0xb58 <dry_trans+0x14e>
     ad4:	8b c0       	rjmp	.+278    	; 0xbec <dry_trans+0x1e2>
     ad6:	ed 31       	cpi	r30, 0x1D	; 29
     ad8:	f1 05       	cpc	r31, r1
     ada:	c1 f4       	brne	.+48     	; 0xb0c <dry_trans+0x102>
     adc:	ab 01       	movw	r20, r22
     ade:	4a 1b       	sub	r20, r26
     ae0:	5b 0b       	sbc	r21, r27
     ae2:	20 91 ac 03 	lds	r18, 0x03AC
     ae6:	30 91 ad 03 	lds	r19, 0x03AD
     aea:	80 91 a2 03 	lds	r24, 0x03A2
     aee:	90 91 a3 03 	lds	r25, 0x03A3
     af2:	ec 01       	movw	r28, r24
     af4:	2c 9f       	mul	r18, r28
     af6:	c0 01       	movw	r24, r0
     af8:	2d 9f       	mul	r18, r29
     afa:	90 0d       	add	r25, r0
     afc:	3c 9f       	mul	r19, r28
     afe:	90 0d       	add	r25, r0
     b00:	11 24       	eor	r1, r1
     b02:	84 17       	cp	r24, r20
     b04:	95 07       	cpc	r25, r21
     b06:	0c f0       	brlt	.+2      	; 0xb0a <dry_trans+0x100>
     b08:	3f c0       	rjmp	.+126    	; 0xb88 <dry_trans+0x17e>
     b0a:	70 c0       	rjmp	.+224    	; 0xbec <dry_trans+0x1e2>
     b0c:	ee 31       	cpi	r30, 0x1E	; 30
     b0e:	f1 05       	cpc	r31, r1
     b10:	b9 f4       	brne	.+46     	; 0xb40 <dry_trans+0x136>
     b12:	ab 01       	movw	r20, r22
     b14:	4a 1b       	sub	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	20 91 ba 03 	lds	r18, 0x03BA
     b1c:	30 91 bb 03 	lds	r19, 0x03BB
     b20:	80 91 a2 03 	lds	r24, 0x03A2
     b24:	90 91 a3 03 	lds	r25, 0x03A3
     b28:	ec 01       	movw	r28, r24
     b2a:	2c 9f       	mul	r18, r28
     b2c:	c0 01       	movw	r24, r0
     b2e:	2d 9f       	mul	r18, r29
     b30:	90 0d       	add	r25, r0
     b32:	3c 9f       	mul	r19, r28
     b34:	90 0d       	add	r25, r0
     b36:	11 24       	eor	r1, r1
     b38:	84 17       	cp	r24, r20
     b3a:	95 07       	cpc	r25, r21
     b3c:	bc f5       	brge	.+110    	; 0xbac <dry_trans+0x1a2>
     b3e:	56 c0       	rjmp	.+172    	; 0xbec <dry_trans+0x1e2>
     b40:	ef 31       	cpi	r30, 0x1F	; 31
     b42:	f1 05       	cpc	r31, r1
     b44:	49 f4       	brne	.+18     	; 0xb58 <dry_trans+0x14e>
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	6a 1b       	sub	r22, r26
     b4c:	7b 0b       	sbc	r23, r27
     b4e:	69 5e       	subi	r22, 0xE9	; 233
     b50:	73 40       	sbci	r23, 0x03	; 3
     b52:	0c f4       	brge	.+2      	; 0xb56 <dry_trans+0x14c>
     b54:	4d c0       	rjmp	.+154    	; 0xbf0 <dry_trans+0x1e6>
     b56:	4a c0       	rjmp	.+148    	; 0xbec <dry_trans+0x1e2>
     b58:	e0 32       	cpi	r30, 0x20	; 32
     b5a:	f1 05       	cpc	r31, r1
     b5c:	a9 f4       	brne	.+42     	; 0xb88 <dry_trans+0x17e>
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	6a 1b       	sub	r22, r26
     b64:	7b 0b       	sbc	r23, r27
     b66:	80 91 b0 03 	lds	r24, 0x03B0
     b6a:	90 91 b1 03 	lds	r25, 0x03B1
     b6e:	20 91 a2 03 	lds	r18, 0x03A2
     b72:	30 91 a3 03 	lds	r19, 0x03A3
     b76:	ec 01       	movw	r28, r24
     b78:	c2 9f       	mul	r28, r18
     b7a:	c0 01       	movw	r24, r0
     b7c:	c3 9f       	mul	r28, r19
     b7e:	90 0d       	add	r25, r0
     b80:	d2 9f       	mul	r29, r18
     b82:	90 0d       	add	r25, r0
     b84:	11 24       	eor	r1, r1
     b86:	2b c0       	rjmp	.+86     	; 0xbde <dry_trans+0x1d4>
     b88:	e1 32       	cpi	r30, 0x21	; 33
     b8a:	f1 05       	cpc	r31, r1
     b8c:	79 f4       	brne	.+30     	; 0xbac <dry_trans+0x1a2>
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	6a 1b       	sub	r22, r26
     b94:	7b 0b       	sbc	r23, r27
     b96:	80 91 90 03 	lds	r24, 0x0390
     b9a:	90 91 91 03 	lds	r25, 0x0391
     b9e:	86 17       	cp	r24, r22
     ba0:	97 07       	cpc	r25, r23
     ba2:	14 f4       	brge	.+4      	; 0xba8 <dry_trans+0x19e>
     ba4:	21 e0       	ldi	r18, 0x01	; 1
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	c9 01       	movw	r24, r18
     baa:	22 c0       	rjmp	.+68     	; 0xbf0 <dry_trans+0x1e6>
     bac:	b2 97       	sbiw	r30, 0x22	; 34
     bae:	19 f0       	breq	.+6      	; 0xbb6 <dry_trans+0x1ac>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	1d c0       	rjmp	.+58     	; 0xbf0 <dry_trans+0x1e6>
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	6a 1b       	sub	r22, r26
     bbc:	7b 0b       	sbc	r23, r27
     bbe:	80 91 ae 03 	lds	r24, 0x03AE
     bc2:	90 91 af 03 	lds	r25, 0x03AF
     bc6:	20 91 a0 03 	lds	r18, 0x03A0
     bca:	30 91 a1 03 	lds	r19, 0x03A1
     bce:	fc 01       	movw	r30, r24
     bd0:	e2 9f       	mul	r30, r18
     bd2:	c0 01       	movw	r24, r0
     bd4:	e3 9f       	mul	r30, r19
     bd6:	90 0d       	add	r25, r0
     bd8:	f2 9f       	mul	r31, r18
     bda:	90 0d       	add	r25, r0
     bdc:	11 24       	eor	r1, r1
     bde:	86 17       	cp	r24, r22
     be0:	97 07       	cpc	r25, r23
     be2:	14 f4       	brge	.+4      	; 0xbe8 <dry_trans+0x1de>
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	ca 01       	movw	r24, r20
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <dry_trans+0x1e6>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
	(state == D2STOP && counter - counterRef > totalStepLength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/)||
	(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/)||
	(state == FIXH && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/)||
	(state == LOWERL3 && counter - counterRef > pWait)||
	(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate));
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	08 95       	ret

00000bf6 <motor_and_write>:
	serial_send_blocking(USB_COMM, "\r\n", 2);
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor)
{
     bf6:	6f 92       	push	r6
     bf8:	7f 92       	push	r7
     bfa:	8f 92       	push	r8
     bfc:	9f 92       	push	r9
     bfe:	af 92       	push	r10
     c00:	bf 92       	push	r11
     c02:	cf 92       	push	r12
     c04:	df 92       	push	r13
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	4c 01       	movw	r8, r24
     c14:	3a 01       	movw	r6, r20
     c16:	e9 01       	movw	r28, r18
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     c18:	fc 01       	movw	r30, r24
     c1a:	e6 1b       	sub	r30, r22
     c1c:	f7 0b       	sbc	r31, r23
     c1e:	60 91 a0 03 	lds	r22, 0x03A0
     c22:	70 91 a1 03 	lds	r23, 0x03A1
     c26:	cf 01       	movw	r24, r30
     c28:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__divmodhi4>
     c2c:	20 91 96 03 	lds	r18, 0x0396
     c30:	30 91 97 03 	lds	r19, 0x0397
     c34:	82 17       	cp	r24, r18
     c36:	93 07       	cpc	r25, r19
     c38:	34 f4       	brge	.+12     	; 0xc46 <motor_and_write+0x50>
     c3a:	cd 2b       	or	r28, r29
     c3c:	21 f0       	breq	.+8      	; 0xc46 <motor_and_write+0x50>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     c3e:	80 91 2b 04 	lds	r24, 0x042B
     c42:	81 60       	ori	r24, 0x01	; 1
     c44:	03 c0       	rjmp	.+6      	; 0xc4c <motor_and_write+0x56>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     c46:	80 91 2b 04 	lds	r24, 0x042B
     c4a:	8e 7f       	andi	r24, 0xFE	; 254
     c4c:	80 93 2b 04 	sts	0x042B, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     c50:	60 91 a2 03 	lds	r22, 0x03A2
     c54:	70 91 a3 03 	lds	r23, 0x03A3
     c58:	cf 01       	movw	r24, r30
     c5a:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__divmodhi4>
     c5e:	20 91 98 03 	lds	r18, 0x0398
     c62:	30 91 99 03 	lds	r19, 0x0399
     c66:	82 17       	cp	r24, r18
     c68:	93 07       	cpc	r25, r19
     c6a:	34 f4       	brge	.+12     	; 0xc78 <motor_and_write+0x82>
     c6c:	01 2b       	or	r16, r17
     c6e:	21 f0       	breq	.+8      	; 0xc78 <motor_and_write+0x82>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     c70:	80 91 2b 04 	lds	r24, 0x042B
     c74:	88 60       	ori	r24, 0x08	; 8
     c76:	03 c0       	rjmp	.+6      	; 0xc7e <motor_and_write+0x88>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     c78:	80 91 2b 04 	lds	r24, 0x042B
     c7c:	87 7f       	andi	r24, 0xF7	; 247
     c7e:	80 93 2b 04 	sts	0x042B, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     c82:	60 91 a4 03 	lds	r22, 0x03A4
     c86:	70 91 a5 03 	lds	r23, 0x03A5
     c8a:	cf 01       	movw	r24, r30
     c8c:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__divmodhi4>
     c90:	20 91 9a 03 	lds	r18, 0x039A
     c94:	30 91 9b 03 	lds	r19, 0x039B
     c98:	82 17       	cp	r24, r18
     c9a:	93 07       	cpc	r25, r19
     c9c:	34 f4       	brge	.+12     	; 0xcaa <motor_and_write+0xb4>
     c9e:	ef 28       	or	r14, r15
     ca0:	21 f0       	breq	.+8      	; 0xcaa <motor_and_write+0xb4>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     ca2:	80 91 2b 04 	lds	r24, 0x042B
     ca6:	80 64       	ori	r24, 0x40	; 64
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <motor_and_write+0xba>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     caa:	80 91 2b 04 	lds	r24, 0x042B
     cae:	8f 7b       	andi	r24, 0xBF	; 191
     cb0:	80 93 2b 04 	sts	0x042B, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     cb4:	60 91 a6 03 	lds	r22, 0x03A6
     cb8:	70 91 a7 03 	lds	r23, 0x03A7
     cbc:	cf 01       	movw	r24, r30
     cbe:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__divmodhi4>
     cc2:	20 91 9c 03 	lds	r18, 0x039C
     cc6:	30 91 9d 03 	lds	r19, 0x039D
     cca:	82 17       	cp	r24, r18
     ccc:	93 07       	cpc	r25, r19
     cce:	34 f4       	brge	.+12     	; 0xcdc <motor_and_write+0xe6>
     cd0:	cd 28       	or	r12, r13
     cd2:	21 f0       	breq	.+8      	; 0xcdc <motor_and_write+0xe6>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     cd4:	80 91 27 04 	lds	r24, 0x0427
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	03 c0       	rjmp	.+6      	; 0xce2 <motor_and_write+0xec>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     cdc:	80 91 27 04 	lds	r24, 0x0427
     ce0:	8d 7f       	andi	r24, 0xFD	; 253
     ce2:	80 93 27 04 	sts	0x0427, r24
	}

	if( ((counter - counterRefFive) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     ce6:	60 91 a8 03 	lds	r22, 0x03A8
     cea:	70 91 a9 03 	lds	r23, 0x03A9
     cee:	c4 01       	movw	r24, r8
     cf0:	86 19       	sub	r24, r6
     cf2:	97 09       	sbc	r25, r7
     cf4:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__divmodhi4>
     cf8:	20 91 9e 03 	lds	r18, 0x039E
     cfc:	30 91 9f 03 	lds	r19, 0x039F
     d00:	82 17       	cp	r24, r18
     d02:	93 07       	cpc	r25, r19
     d04:	34 f4       	brge	.+12     	; 0xd12 <motor_and_write+0x11c>
     d06:	ab 28       	or	r10, r11
     d08:	21 f0       	breq	.+8      	; 0xd12 <motor_and_write+0x11c>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     d0a:	80 91 27 04 	lds	r24, 0x0427
     d0e:	80 61       	ori	r24, 0x10	; 16
     d10:	03 c0       	rjmp	.+6      	; 0xd18 <motor_and_write+0x122>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     d12:	80 91 27 04 	lds	r24, 0x0427
     d16:	8f 7e       	andi	r24, 0xEF	; 239
     d18:	80 93 27 04 	sts	0x0427, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     d1c:	80 e4       	ldi	r24, 0x40	; 64
     d1e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
	i2c_write(0x2);									// write command byte
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     d28:	80 91 2b 04 	lds	r24, 0x042B
     d2c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     d30:	80 91 27 04 	lds	r24, 0x0427
     d34:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     d38:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

	i2c_start(I2C2+I2C_WRITE);
     d3c:	82 e4       	ldi	r24, 0x42	; 66
     d3e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
	i2c_write(0x2);
     d42:	82 e0       	ldi	r24, 0x02	; 2
     d44:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_outputByte0.outputByte0);
     d48:	80 91 2a 04 	lds	r24, 0x042A
     d4c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_outputByte1.outputByte1);
     d50:	80 91 28 04 	lds	r24, 0x0428
     d54:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_stop();
     d58:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
}
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	bf 90       	pop	r11
     d6e:	af 90       	pop	r10
     d70:	9f 90       	pop	r9
     d72:	8f 90       	pop	r8
     d74:	7f 90       	pop	r7
     d76:	6f 90       	pop	r6
     d78:	08 95       	ret

00000d7a <serial_print>:
	}
	serial_print("END");
	}
}

void serial_print(char msg[]){
     d7a:	68 2f       	mov	r22, r24
	serial_send_blocking(USB_COMM, msg, strlen(msg));
     d7c:	e8 2f       	mov	r30, r24
     d7e:	f9 2f       	mov	r31, r25
     d80:	df 01       	movw	r26, r30
     d82:	0d 90       	ld	r0, X+
     d84:	00 20       	and	r0, r0
     d86:	e9 f7       	brne	.-6      	; 0xd82 <serial_print+0x8>
     d88:	11 97       	sbiw	r26, 0x01	; 1
     d8a:	ae 1b       	sub	r26, r30
     d8c:	bf 0b       	sbc	r27, r31
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	79 2f       	mov	r23, r25
     d92:	4a 2f       	mov	r20, r26
     d94:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <serial_send_blocking>
	serial_send_blocking(USB_COMM, "\r\n", 2);
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	71 e0       	ldi	r23, 0x01	; 1
     d9e:	42 e0       	ldi	r20, 0x02	; 2
     da0:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <serial_send_blocking>
}
     da4:	08 95       	ret

00000da6 <init_action>:
	i2c_write(u_outputByte0.outputByte0);
	i2c_write(u_outputByte1.outputByte1);
	i2c_stop();
}

void init_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor, bool *pprint0){
     da6:	af 92       	push	r10
     da8:	bf 92       	push	r11
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	ea 01       	movw	r28, r20
     db0:	f9 01       	movw	r30, r18
	switch(state){
     db2:	83 30       	cpi	r24, 0x03	; 3
     db4:	91 05       	cpc	r25, r1
     db6:	09 f4       	brne	.+2      	; 0xdba <init_action+0x14>
     db8:	82 c0       	rjmp	.+260    	; 0xebe <init_action+0x118>
     dba:	84 30       	cpi	r24, 0x04	; 4
     dbc:	91 05       	cpc	r25, r1
     dbe:	54 f4       	brge	.+20     	; 0xdd4 <init_action+0x2e>
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	91 05       	cpc	r25, r1
     dc4:	d9 f1       	breq	.+118    	; 0xe3c <init_action+0x96>
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	91 05       	cpc	r25, r1
     dca:	0c f0       	brlt	.+2      	; 0xdce <init_action+0x28>
     dcc:	58 c0       	rjmp	.+176    	; 0xe7e <init_action+0xd8>
     dce:	89 2b       	or	r24, r25
     dd0:	69 f0       	breq	.+26     	; 0xdec <init_action+0x46>
     dd2:	83 c0       	rjmp	.+262    	; 0xeda <init_action+0x134>
     dd4:	85 30       	cpi	r24, 0x05	; 5
     dd6:	91 05       	cpc	r25, r1
     dd8:	09 f4       	brne	.+2      	; 0xddc <init_action+0x36>
     dda:	6b c0       	rjmp	.+214    	; 0xeb2 <init_action+0x10c>
     ddc:	85 30       	cpi	r24, 0x05	; 5
     dde:	91 05       	cpc	r25, r1
     de0:	0c f4       	brge	.+2      	; 0xde4 <init_action+0x3e>
     de2:	5a c0       	rjmp	.+180    	; 0xe98 <init_action+0xf2>
     de4:	06 97       	sbiw	r24, 0x06	; 6
     de6:	09 f0       	breq	.+2      	; 0xdea <init_action+0x44>
     de8:	78 c0       	rjmp	.+240    	; 0xeda <init_action+0x134>
     dea:	69 c0       	rjmp	.+210    	; 0xebe <init_action+0x118>
		case INIT:
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
     dec:	80 91 26 04 	lds	r24, 0x0426
     df0:	90 91 2b 04 	lds	r25, 0x042B
     df4:	82 ff       	sbrs	r24, 2
     df6:	07 c0       	rjmp	.+14     	; 0xe06 <init_action+0x60>
				u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
     df8:	9f 7e       	andi	r25, 0xEF	; 239
     dfa:	90 93 2b 04 	sts	0x042B, r25
				u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     dfe:	80 91 2a 04 	lds	r24, 0x042A
     e02:	87 7f       	andi	r24, 0xF7	; 247
     e04:	53 c0       	rjmp	.+166    	; 0xeac <init_action+0x106>
			}
			else{
				u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     e06:	9f 7d       	andi	r25, 0xDF	; 223
     e08:	90 93 2b 04 	sts	0x042B, r25
				*pfixtureMotor = 0;
     e0c:	11 82       	std	Z+1, r1	; 0x01
     e0e:	10 82       	st	Z, r1
				u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     e10:	80 91 2a 04 	lds	r24, 0x042A
     e14:	8f 7e       	andi	r24, 0xEF	; 239
				u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     e16:	88 60       	ori	r24, 0x08	; 8
     e18:	80 93 2a 04 	sts	0x042A, r24
				if(*pprint0 == 1){
     e1c:	f5 01       	movw	r30, r10
     e1e:	80 81       	ld	r24, Z
     e20:	88 23       	and	r24, r24
     e22:	09 f4       	brne	.+2      	; 0xe26 <init_action+0x80>
     e24:	5a c0       	rjmp	.+180    	; 0xeda <init_action+0x134>
					lcd_goto_xy(0,1);
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
					serial_print("PUSH TO START");
     e2e:	83 e0       	ldi	r24, 0x03	; 3
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
					*pprint0 = 0;
     e36:	f5 01       	movw	r30, r10
     e38:	10 82       	st	Z, r1
     e3a:	4f c0       	rjmp	.+158    	; 0xeda <init_action+0x134>
				}
			}
			break;
		case LOAD:
			u_outputByte0.bits_in_outputByte0.ACPower = 0;
     e3c:	20 91 2a 04 	lds	r18, 0x042A
     e40:	32 2f       	mov	r19, r18
     e42:	3e 7f       	andi	r19, 0xFE	; 254
			if((counter % 200) < 100){
     e44:	cb 01       	movw	r24, r22
     e46:	68 ec       	ldi	r22, 0xC8	; 200
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__divmodhi4>
     e4e:	84 36       	cpi	r24, 0x64	; 100
     e50:	91 05       	cpc	r25, r1
     e52:	24 f4       	brge	.+8      	; 0xe5c <init_action+0xb6>
				u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     e54:	2c 7f       	andi	r18, 0xFC	; 252
     e56:	20 93 2a 04 	sts	0x042A, r18
     e5a:	03 c0       	rjmp	.+6      	; 0xe62 <init_action+0xbc>
			}
			else{
				u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     e5c:	32 60       	ori	r19, 0x02	; 2
     e5e:	30 93 2a 04 	sts	0x042A, r19
			}
			*pplateLoadMotor = 1;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	99 83       	std	Y+1, r25	; 0x01
     e68:	88 83       	st	Y, r24
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
     e6a:	80 91 2b 04 	lds	r24, 0x042B
     e6e:	8d 7f       	andi	r24, 0xFD	; 253
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     e70:	84 60       	ori	r24, 0x04	; 4
     e72:	80 93 2b 04 	sts	0x042B, r24
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
     e76:	80 91 2a 04 	lds	r24, 0x042A
     e7a:	8b 7f       	andi	r24, 0xFB	; 251
     e7c:	17 c0       	rjmp	.+46     	; 0xeac <init_action+0x106>
			break;
		case RAISEL1:
			u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     e7e:	80 91 2a 04 	lds	r24, 0x042A
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     e82:	81 7e       	andi	r24, 0xE1	; 225
			u_outputByte0.bits_in_outputByte0.plateStop = 1;
     e84:	86 61       	ori	r24, 0x16	; 22
     e86:	80 93 2a 04 	sts	0x042A, r24
			*pplateLoadMotor = 0;
     e8a:	19 82       	std	Y+1, r1	; 0x01
     e8c:	18 82       	st	Y, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     e8e:	80 91 2b 04 	lds	r24, 0x042B
     e92:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
     e94:	8b 7f       	andi	r24, 0xFB	; 251
     e96:	1f c0       	rjmp	.+62     	; 0xed6 <init_action+0x130>
		case FIXL:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case LOWERL1:
			*pfixtureMotor = 0;
     e98:	11 82       	std	Z+1, r1	; 0x01
     e9a:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     e9c:	80 91 2b 04 	lds	r24, 0x042B
     ea0:	8f 7d       	andi	r24, 0xDF	; 223
     ea2:	80 93 2b 04 	sts	0x042B, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     ea6:	80 91 2a 04 	lds	r24, 0x042A
     eaa:	88 60       	ori	r24, 0x08	; 8
     eac:	80 93 2a 04 	sts	0x042A, r24
     eb0:	14 c0       	rjmp	.+40     	; 0xeda <init_action+0x134>
			break;
		case LOWERL2:
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     eb2:	80 91 2a 04 	lds	r24, 0x042A
     eb6:	8f 7e       	andi	r24, 0xEF	; 239
     eb8:	80 93 2a 04 	sts	0x042A, r24
     ebc:	09 c0       	rjmp	.+18     	; 0xed0 <init_action+0x12a>
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		//*********************************************
		case MOVEC1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     ebe:	80 91 2b 04 	lds	r24, 0x042B
     ec2:	80 61       	ori	r24, 0x10	; 16
     ec4:	80 93 2b 04 	sts	0x042B, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	91 83       	std	Z+1, r25	; 0x01
     ece:	80 83       	st	Z, r24
     ed0:	80 91 2b 04 	lds	r24, 0x042B
     ed4:	80 62       	ori	r24, 0x20	; 32
     ed6:	80 93 2b 04 	sts	0x042B, r24
			break;
	}
}
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	bf 90       	pop	r11
     ee0:	af 90       	pop	r10
     ee2:	08 95       	ret

00000ee4 <main>:
void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor);

void serial_print(char msg[]);

int main()   
{
     ee4:	2f 92       	push	r2
     ee6:	3f 92       	push	r3
     ee8:	4f 92       	push	r4
     eea:	5f 92       	push	r5
     eec:	6f 92       	push	r6
     eee:	7f 92       	push	r7
     ef0:	8f 92       	push	r8
     ef2:	9f 92       	push	r9
     ef4:	af 92       	push	r10
     ef6:	bf 92       	push	r11
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	68 97       	sbiw	r28, 0x18	; 24
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
	bool print0 = true;
	bool  print35 = true;
		
	//initialize button variables
	int button = 1;				
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently
     f18:	1c 8a       	std	Y+20, r1	; 0x14
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
    
	while(1){						//Repeats the entire program indefinitely (runs maintenance or normal each time)

							//mx holds whether motor x should move: 0 = no, 1 = yes
	plateLoadMotor = 0;		//plate load motor
     f1a:	1b 82       	std	Y+3, r1	; 0x03
     f1c:	1a 82       	std	Y+2, r1	; 0x02
	fixtureMotor = 0;		//fixture motor
     f1e:	1d 82       	std	Y+5, r1	; 0x05
     f20:	1c 82       	std	Y+4, r1	; 0x04
	brush1Motor = 0;		//brush 1 motor
     f22:	1f 82       	std	Y+7, r1	; 0x07
     f24:	1e 82       	std	Y+6, r1	; 0x06
	brush2Motor = 0;		//brush 2 motor
     f26:	19 86       	std	Y+9, r1	; 0x09
     f28:	18 86       	std	Y+8, r1	; 0x08
	paperTowelMotor = 0; 	//paper towel roller motor
     f2a:	1b 86       	std	Y+11, r1	; 0x0b
     f2c:	1a 86       	std	Y+10, r1	; 0x0a
	//the ones with numbers correspond to run mode states, and Five refers to motor 5 (paper towel roller)
	counterRef = 0;
	counterRefFive = 0;
		
	//holds wait times for various actions in ms
	pWait = 100;
     f2e:	84 e6       	ldi	r24, 0x64	; 100
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	90 93 91 03 	sts	0x0391, r25
     f36:	80 93 90 03 	sts	0x0390, r24
	mWait = 100;
     f3a:	90 93 93 03 	sts	0x0393, r25
     f3e:	80 93 92 03 	sts	0x0392, r24
	kWait = 100;
     f42:	90 93 95 03 	sts	0x0395, r25
     f46:	80 93 94 03 	sts	0x0394, r24

	//hold the length of the high and high-low periods for the various motors - this controls their speed
	highLength1 = 1;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	90 93 97 03 	sts	0x0397, r25
     f52:	80 93 96 03 	sts	0x0396, r24
	highLength2 = 1;
     f56:	90 93 99 03 	sts	0x0399, r25
     f5a:	80 93 98 03 	sts	0x0398, r24
	highLength3 = 1;
     f5e:	90 93 9b 03 	sts	0x039B, r25
     f62:	80 93 9a 03 	sts	0x039A, r24
	highLength4 = 1;
     f66:	90 93 9d 03 	sts	0x039D, r25
     f6a:	80 93 9c 03 	sts	0x039C, r24
	highLength5 = 1;
     f6e:	90 93 9f 03 	sts	0x039F, r25
     f72:	80 93 9e 03 	sts	0x039E, r24
	totalStepLength1 = 2;
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	90 93 a1 03 	sts	0x03A1, r25
     f7e:	80 93 a0 03 	sts	0x03A0, r24
	totalStepLength2 = 2;
     f82:	90 93 a3 03 	sts	0x03A3, r25
     f86:	80 93 a2 03 	sts	0x03A2, r24
	totalStepLength3 = 2;
     f8a:	90 93 a5 03 	sts	0x03A5, r25
     f8e:	80 93 a4 03 	sts	0x03A4, r24
	totalStepLength4 = 2;
     f92:	90 93 a7 03 	sts	0x03A7, r25
     f96:	80 93 a6 03 	sts	0x03A6, r24
	totalStepLength5 = 2;
     f9a:	90 93 a9 03 	sts	0x03A9, r25
     f9e:	80 93 a8 03 	sts	0x03A8, r24
	
	//hold whether or not statements have been printed yet (numbers refer to run mode states)
	print0 = true;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	89 83       	std	Y+1, r24	; 0x01
	print35 = true;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     fa6:	1d 86       	std	Y+13, r1	; 0x0d
     fa8:	1c 86       	std	Y+12, r1	; 0x0c
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     faa:	10 92 2b 04 	sts	0x042B, r1
	u_motorByte1.motorByte1 = 128;  // initialize motorByte1              **********1 or 128, depending on order**********
     fae:	80 e8       	ldi	r24, 0x80	; 128
     fb0:	80 93 27 04 	sts	0x0427, r24
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	80 93 2a 04 	sts	0x042A, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
     fba:	80 93 28 04 	sts	0x0428, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
     fbe:	10 92 26 04 	sts	0x0426, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
     fc2:	10 92 29 04 	sts	0x0429, r1
	
	//clear();
	serial_print("DASCH CLEANER 2c");
     fc6:	81 e1       	ldi	r24, 0x11	; 17
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
	lcd_goto_xy(0,1);
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
	serial_print("REV: 31");
     fd6:	82 e2       	ldi	r24, 0x22	; 34
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
	delay_ms(2000);
     fde:	80 ed       	ldi	r24, 0xD0	; 208
     fe0:	97 e0       	ldi	r25, 0x07	; 7
     fe2:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>
	
	//clear();
	serial_print("BEGIN ");
     fe6:	8a e2       	ldi	r24, 0x2A	; 42
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
	
	delay_ms(1000);
     fee:	88 ee       	ldi	r24, 0xE8	; 232
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>

    i2c_init();                                // init I2C interface
     ff6:	0e 94 93 00 	call	0x126	; 0x126 <i2c_init>
	
    serial_print("INIT ");
     ffa:	81 e3       	ldi	r24, 0x31	; 49
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
    1002:	80 e4       	ldi	r24, 0x40	; 64
    1004:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    1008:	f8 2e       	mov	r15, r24
	i2c_stop();
    100a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
    100e:	82 e4       	ldi	r24, 0x42	; 66
    1010:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    1014:	18 2f       	mov	r17, r24
	i2c_stop();
    1016:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
    101a:	84 e4       	ldi	r24, 0x44	; 68
    101c:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    1020:	08 2f       	mov	r16, r24
	i2c_stop();
    1022:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
    
	//clear();
	serial_print("START ");
    1026:	87 e3       	ldi	r24, 0x37	; 55
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
    102e:	1f 29       	or	r17, r15
    1030:	10 2b       	or	r17, r16
    1032:	61 f0       	breq	.+24     	; 0x104c <main+0x168>
        /* failed to issue start condition(s), possibly no device found */
        
		serial_print("I2C BAD ");
    1034:	8e e3       	ldi	r24, 0x3E	; 62
    1036:	91 e0       	ldi	r25, 0x01	; 1
    1038:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
		i2c_stop();
    103c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
		serial_print("STOP ");
    1040:	87 e4       	ldi	r24, 0x47	; 71
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    1048:	0c 94 46 12 	jmp	0x248c	; 0x248c <main+0x15a8>
    }
	else {
		serial_print("I2C OK ");
    104c:	8d e4       	ldi	r24, 0x4D	; 77
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
        /* issuing start conditions ok, devices accessible */
		serial_print("BINIT ");
    1054:	85 e5       	ldi	r24, 0x55	; 85
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
    105c:	80 e4       	ldi	r24, 0x40	; 64
    105e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x6);
    1062:	86 e0       	ldi	r24, 0x06	; 6
    1064:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1074:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C1+I2C_WRITE);
    1078:	80 e4       	ldi	r24, 0x40	; 64
    107a:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    1084:	80 91 2b 04 	lds	r24, 0x042B
    1088:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    108c:	80 91 27 04 	lds	r24, 0x0427
    1090:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1094:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
    1098:	82 e4       	ldi	r24, 0x42	; 66
    109a:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x6);
    109e:	86 e0       	ldi	r24, 0x06	; 6
    10a0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    10b0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);
    10b4:	82 e4       	ldi	r24, 0x42	; 66
    10b6:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    10ba:	82 e0       	ldi	r24, 0x02	; 2
    10bc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_outputByte0.outputByte0);
    10c0:	80 91 2a 04 	lds	r24, 0x042A
    10c4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_outputByte1.outputByte1);
    10c8:	80 91 28 04 	lds	r24, 0x0428
    10cc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    10d0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		//Registers default to input, so I2C3 is fine already

		u_motorByte1.bits_in_motorByte1.enableAll = 0;	//Enables all motor drivers after startup
    10d4:	80 91 27 04 	lds	r24, 0x0427
    10d8:	8f 77       	andi	r24, 0x7F	; 127
    10da:	80 93 27 04 	sts	0x0427, r24
		i2c_start(I2C1+I2C_WRITE);
    10de:	80 e4       	ldi	r24, 0x40	; 64
    10e0:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    10ea:	80 91 2b 04 	lds	r24, 0x042B
    10ee:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    10f2:	80 91 27 04 	lds	r24, 0x0427
    10f6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    10fa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>


		delay_ms(1000);
    10fe:	88 ee       	ldi	r24, 0xE8	; 232
    1100:	93 e0       	ldi	r25, 0x03	; 3
    1102:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>
		//clear();
		serial_print("INPUT RUN/DEBUG");
    1106:	8c e5       	ldi	r24, 0x5C	; 92
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    110e:	ee 24       	eor	r14, r14
    1110:	ff 24       	eor	r15, r15
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1112:	c7 01       	movw	r24, r14
    1114:	be 01       	movw	r22, r28
    1116:	64 5f       	subi	r22, 0xF4	; 244
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    111e:	18 2f       	mov	r17, r24
			serial_check(); counter++;
    1120:	0e 94 1b 1c 	call	0x3836	; 0x3836 <serial_check>
    1124:	08 94       	sec
    1126:	e1 1c       	adc	r14, r1
    1128:	f1 1c       	adc	r15, r1
			delay_ms(1);
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>
		delay_ms(1000);
		//clear();
		serial_print("INPUT RUN/DEBUG");
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1132:	11 23       	and	r17, r17
    1134:	71 f3       	breq	.-36     	; 0x1112 <main+0x22e>
		buttonTriggered = false;
		counter = 0;
		//clear();


		if(is_digital_input_high(IO_D3))							//Tests if the switch is set to Maintenance Mode
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    113c:	88 23       	and	r24, r24
    113e:	09 f4       	brne	.+2      	; 0x1142 <main+0x25e>
    1140:	d7 c3       	rjmp	.+1966   	; 0x18f0 <main+0xa0c>
		{
			serial_print("DEBUG");
    1142:	8c e6       	ldi	r24, 0x6C	; 108
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
			delay_ms(1000);
    114a:	88 ee       	ldi	r24, 0xE8	; 232
    114c:	93 e0       	ldi	r25, 0x03	; 3
    114e:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>
			//initialize
			bool printVar = true;
			int submode = -1;

			//clear();
			serial_print("INPUT MODE");
    1152:	82 e7       	ldi	r24, 0x72	; 114
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    115a:	ee 24       	eor	r14, r14
    115c:	ff 24       	eor	r15, r15
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    115e:	c7 01       	movw	r24, r14
    1160:	be 01       	movw	r22, r28
    1162:	64 5f       	subi	r22, 0xF4	; 244
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
    1166:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    116a:	18 2f       	mov	r17, r24
				counter++;
    116c:	08 94       	sec
    116e:	e1 1c       	adc	r14, r1
    1170:	f1 1c       	adc	r15, r1
				delay_ms(1);
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>

			//clear();
			serial_print("INPUT MODE");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
    117a:	11 23       	and	r17, r17
    117c:	81 f3       	breq	.-32     	; 0x115e <main+0x27a>
    117e:	99 24       	eor	r9, r9
    1180:	93 94       	inc	r9
    1182:	2f ef       	ldi	r18, 0xFF	; 255
    1184:	3f ef       	ldi	r19, 0xFF	; 255
    1186:	3b 8b       	std	Y+19, r19	; 0x13
    1188:	2a 8b       	std	Y+18, r18	; 0x12
    118a:	66 24       	eor	r6, r6
    118c:	77 24       	eor	r7, r7
    118e:	44 24       	eor	r4, r4
    1190:	55 24       	eor	r5, r5
    1192:	22 24       	eor	r2, r2
    1194:	33 24       	eor	r3, r3
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1196:	84 e4       	ldi	r24, 0x44	; 68
    1198:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    11a2:	85 e4       	ldi	r24, 0x45	; 69
    11a4:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    11a8:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    11ac:	80 93 26 04 	sts	0x0426, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    11b0:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    11b4:	80 93 29 04 	sts	0x0429, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    11b8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    11bc:	c2 01       	movw	r24, r4
    11be:	be 01       	movw	r22, r28
    11c0:	64 5f       	subi	r22, 0xF4	; 244
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    11c8:	18 2f       	mov	r17, r24
							Output 			--     starts testing each output individually and ends after testing all outputs
							Motor			--     starts testing each motor individually and ends after testing all motors
							Multi motor		--     starts testing each the fixture motor with each of the brush motors

				*/
				if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != INPUT){
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    11d0:	88 23       	and	r24, r24
    11d2:	c9 f4       	brne	.+50     	; 0x1206 <main+0x322>
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    11da:	88 23       	and	r24, r24
    11dc:	a1 f4       	brne	.+40     	; 0x1206 <main+0x322>
    11de:	6a 89       	ldd	r22, Y+18	; 0x12
    11e0:	7b 89       	ldd	r23, Y+19	; 0x13
    11e2:	67 2b       	or	r22, r23
    11e4:	81 f0       	breq	.+32     	; 0x1206 <main+0x322>
					state = S0;
					submode = INPUT;
					//clear();
					serial_print("INPUTS ");
    11e6:	8d e7       	ldi	r24, 0x7D	; 125
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
					lcd_goto_xy(0,1);
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	61 e0       	ldi	r22, 0x01	; 1
    11f2:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
    11f6:	99 24       	eor	r9, r9
    11f8:	93 94       	inc	r9
    11fa:	1b 8a       	std	Y+19, r1	; 0x13
    11fc:	1a 8a       	std	Y+18, r1	; 0x12
    11fe:	66 24       	eor	r6, r6
    1200:	77 24       	eor	r7, r7
    1202:	71 e0       	ldi	r23, 0x01	; 1
    1204:	7c 8b       	std	Y+20, r23	; 0x14
					printVar = true;
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != OUTPUT){
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    120c:	88 23       	and	r24, r24
    120e:	e1 f0       	breq	.+56     	; 0x1248 <main+0x364>
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1216:	88 23       	and	r24, r24
    1218:	b9 f4       	brne	.+46     	; 0x1248 <main+0x364>
    121a:	8a 89       	ldd	r24, Y+18	; 0x12
    121c:	9b 89       	ldd	r25, Y+19	; 0x13
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	99 f0       	breq	.+38     	; 0x1248 <main+0x364>
					state = O0_ON;
					submode = OUTPUT;
					//clear();
					serial_print("OUTPUTS");
    1222:	85 e8       	ldi	r24, 0x85	; 133
    1224:	91 e0       	ldi	r25, 0x01	; 1
    1226:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
					lcd_goto_xy(0,1);
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
    1232:	99 24       	eor	r9, r9
    1234:	93 94       	inc	r9
    1236:	21 e0       	ldi	r18, 0x01	; 1
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3b 8b       	std	Y+19, r19	; 0x13
    123c:	2a 8b       	std	Y+18, r18	; 0x12
    123e:	68 e0       	ldi	r22, 0x08	; 8
    1240:	66 2e       	mov	r6, r22
    1242:	71 2c       	mov	r7, r1
    1244:	31 e0       	ldi	r19, 0x01	; 1
    1246:	3c 8b       	std	Y+20, r19	; 0x14
					printVar = true;
					switched = true;
				}
				if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MOTOR){
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    124e:	88 23       	and	r24, r24
    1250:	11 f5       	brne	.+68     	; 0x1296 <main+0x3b2>
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1258:	88 23       	and	r24, r24
    125a:	e9 f0       	breq	.+58     	; 0x1296 <main+0x3b2>
    125c:	6a 89       	ldd	r22, Y+18	; 0x12
    125e:	7b 89       	ldd	r23, Y+19	; 0x13
    1260:	62 30       	cpi	r22, 0x02	; 2
    1262:	71 05       	cpc	r23, r1
    1264:	c1 f0       	breq	.+48     	; 0x1296 <main+0x3b2>
					state = M1_F;
					submode = MOTOR;
					//clear();
					serial_print("MOTORS ");
    1266:	8d e8       	ldi	r24, 0x8D	; 141
    1268:	91 e0       	ldi	r25, 0x01	; 1
    126a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
					lcd_goto_xy(0,1);
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	61 e0       	ldi	r22, 0x01	; 1
    1272:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1276:	80 91 2b 04 	lds	r24, 0x042B
    127a:	84 60       	ori	r24, 0x04	; 4
    127c:	80 93 2b 04 	sts	0x042B, r24
    1280:	99 24       	eor	r9, r9
    1282:	93 94       	inc	r9
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	9b 8b       	std	Y+19, r25	; 0x13
    128a:	8a 8b       	std	Y+18, r24	; 0x12
    128c:	50 e2       	ldi	r21, 0x20	; 32
    128e:	65 2e       	mov	r6, r21
    1290:	71 2c       	mov	r7, r1
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	9c 8b       	std	Y+20, r25	; 0x14
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MULTI){
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    129c:	88 23       	and	r24, r24
    129e:	31 f1       	breq	.+76     	; 0x12ec <main+0x408>
    12a0:	82 e0       	ldi	r24, 0x02	; 2
    12a2:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    12a6:	88 23       	and	r24, r24
    12a8:	09 f1       	breq	.+66     	; 0x12ec <main+0x408>
    12aa:	2a 89       	ldd	r18, Y+18	; 0x12
    12ac:	3b 89       	ldd	r19, Y+19	; 0x13
    12ae:	23 30       	cpi	r18, 0x03	; 3
    12b0:	31 05       	cpc	r19, r1
    12b2:	e1 f0       	breq	.+56     	; 0x12ec <main+0x408>
					state = M2_AND_M3;
					submode = MULTI;
					//clear();
					serial_print("MULTI MOTOR");
    12b4:	85 e9       	ldi	r24, 0x95	; 149
    12b6:	91 e0       	ldi	r25, 0x01	; 1
    12b8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
					lcd_goto_xy(0,1);
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    12c4:	80 91 2b 04 	lds	r24, 0x042B
    12c8:	80 62       	ori	r24, 0x20	; 32
    12ca:	80 93 2b 04 	sts	0x042B, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    12ce:	80 91 27 04 	lds	r24, 0x0427
    12d2:	81 60       	ori	r24, 0x01	; 1
    12d4:	80 93 27 04 	sts	0x0427, r24
    12d8:	99 24       	eor	r9, r9
    12da:	93 94       	inc	r9
    12dc:	63 e0       	ldi	r22, 0x03	; 3
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	7b 8b       	std	Y+19, r23	; 0x13
    12e2:	6a 8b       	std	Y+18, r22	; 0x12
    12e4:	4a e2       	ldi	r20, 0x2A	; 42
    12e6:	64 2e       	mov	r6, r20
    12e8:	71 2c       	mov	r7, r1
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <main+0x40e>
					switched = true;
				}
				if(switched){
    12ec:	7c 89       	ldd	r23, Y+20	; 0x14
    12ee:	77 23       	and	r23, r23
    12f0:	c9 f0       	breq	.+50     	; 0x1324 <main+0x440>
					plateLoadMotor = 0;
    12f2:	1b 82       	std	Y+3, r1	; 0x03
    12f4:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    12f6:	1d 82       	std	Y+5, r1	; 0x05
    12f8:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    12fa:	1f 82       	std	Y+7, r1	; 0x07
    12fc:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    12fe:	19 86       	std	Y+9, r1	; 0x09
    1300:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    1302:	1b 86       	std	Y+11, r1	; 0x0b
    1304:	1a 86       	std	Y+10, r1	; 0x0a
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	80 93 2a 04 	sts	0x042A, r24
					u_outputByte1.outputByte1 = 255;  // reset outputByte1
    130c:	80 93 28 04 	sts	0x0428, r24
					if(submode != MOTOR && submode != MULTI){
    1310:	8a 89       	ldd	r24, Y+18	; 0x12
    1312:	9b 89       	ldd	r25, Y+19	; 0x13
    1314:	02 97       	sbiw	r24, 0x02	; 2
    1316:	02 97       	sbiw	r24, 0x02	; 2
    1318:	20 f0       	brcs	.+8      	; 0x1322 <main+0x43e>
						u_motorByte0.motorByte0 = 0;	  // reset motorByte0
    131a:	10 92 2b 04 	sts	0x042B, r1
						u_motorByte1.motorByte1 = 0;	  // reset motorByte1
    131e:	10 92 27 04 	sts	0x0427, r1
    1322:	1c 8a       	std	Y+20, r1	; 0x14
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
    1324:	11 23       	and	r17, r17
    1326:	09 f4       	brne	.+2      	; 0x132a <main+0x446>
    1328:	bf c0       	rjmp	.+382    	; 0x14a8 <main+0x5c4>
					if(state <= S7){				//if it's doing the sensors
    132a:	88 e0       	ldi	r24, 0x08	; 8
    132c:	68 16       	cp	r6, r24
    132e:	71 04       	cpc	r7, r1
    1330:	74 f4       	brge	.+28     	; 0x134e <main+0x46a>
						lcd_goto_xy(0,1);
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	61 e0       	ldi	r22, 0x01	; 1
    1336:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
						buttonTriggered = false;
						state ++;
    133a:	08 94       	sec
    133c:	61 1c       	adc	r6, r1
    133e:	71 1c       	adc	r7, r1
						counterRef = counter;
						printVar = true;
						if(state == S7 + 1){		//accounts for end of maintenance mode after sensors
    1340:	98 e0       	ldi	r25, 0x08	; 8
    1342:	69 16       	cp	r6, r25
    1344:	71 04       	cpc	r7, r1
    1346:	09 f0       	breq	.+2      	; 0x134a <main+0x466>
    1348:	ac c0       	rjmp	.+344    	; 0x14a2 <main+0x5be>
    134a:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <main+0x15b4>
							//clear();
							state = DONEM;
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
    134e:	20 e2       	ldi	r18, 0x20	; 32
    1350:	62 16       	cp	r6, r18
    1352:	71 04       	cpc	r7, r1
    1354:	cc f4       	brge	.+50     	; 0x1388 <main+0x4a4>
						if(state % 2 == 0){			//current state is an 'on' state
    1356:	60 fc       	sbrc	r6, 0
    1358:	09 c0       	rjmp	.+18     	; 0x136c <main+0x488>
							lcd_goto_xy(13,1);
    135a:	8d e0       	ldi	r24, 0x0D	; 13
    135c:	61 e0       	ldi	r22, 0x01	; 1
    135e:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
							serial_print("OFF");
    1362:	81 ea       	ldi	r24, 0xA1	; 161
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    136a:	04 c0       	rjmp	.+8      	; 0x1374 <main+0x490>
						}
						else{						//current state is an 'off' state
							lcd_goto_xy(0,1);
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
						}
						buttonTriggered = false;
						state ++;
    1374:	08 94       	sec
    1376:	61 1c       	adc	r6, r1
    1378:	71 1c       	adc	r7, r1
						counterRef = counter;
						printVar = true;
						if(state == O11_OFF + 1){	//accounts for end of maintenance mode after outputs
    137a:	30 e2       	ldi	r19, 0x20	; 32
    137c:	63 16       	cp	r6, r19
    137e:	71 04       	cpc	r7, r1
    1380:	09 f0       	breq	.+2      	; 0x1384 <main+0x4a0>
    1382:	8f c0       	rjmp	.+286    	; 0x14a2 <main+0x5be>
    1384:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <main+0x15b4>
    1388:	83 01       	movw	r16, r6
    138a:	0f 5f       	subi	r16, 0xFF	; 255
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
							//clear();
							state = DONEM;
						}
					}
					else if(state <= M5_B){							//if it's doing the motors
    138e:	6a e2       	ldi	r22, 0x2A	; 42
    1390:	66 16       	cp	r6, r22
    1392:	71 04       	cpc	r7, r1
    1394:	0c f0       	brlt	.+2      	; 0x1398 <main+0x4b4>
    1396:	5d c0       	rjmp	.+186    	; 0x1452 <main+0x56e>
						buttonTriggered = false;
						state ++;
						counterRef = counter;
						printVar = true;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
    1398:	60 fc       	sbrc	r6, 0
    139a:	09 c0       	rjmp	.+18     	; 0x13ae <main+0x4ca>
							lcd_goto_xy(11,1);
    139c:	8b e0       	ldi	r24, 0x0B	; 11
    139e:	61 e0       	ldi	r22, 0x01	; 1
    13a0:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
							serial_print("BACK ");
    13a4:	85 ea       	ldi	r24, 0xA5	; 165
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    13ac:	13 c0       	rjmp	.+38     	; 0x13d4 <main+0x4f0>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
    13ae:	06 32       	cpi	r16, 0x26	; 38
    13b0:	11 05       	cpc	r17, r1
    13b2:	71 f1       	breq	.+92     	; 0x1410 <main+0x52c>
    13b4:	07 32       	cpi	r16, 0x27	; 39
    13b6:	11 05       	cpc	r17, r1
    13b8:	3c f4       	brge	.+14     	; 0x13c8 <main+0x4e4>
    13ba:	02 32       	cpi	r16, 0x22	; 34
    13bc:	11 05       	cpc	r17, r1
    13be:	61 f0       	breq	.+24     	; 0x13d8 <main+0x4f4>
    13c0:	04 32       	cpi	r16, 0x24	; 36
    13c2:	11 05       	cpc	r17, r1
    13c4:	39 f4       	brne	.+14     	; 0x13d4 <main+0x4f0>
    13c6:	14 c0       	rjmp	.+40     	; 0x13f0 <main+0x50c>
    13c8:	08 32       	cpi	r16, 0x28	; 40
    13ca:	11 05       	cpc	r17, r1
    13cc:	69 f1       	breq	.+90     	; 0x1428 <main+0x544>
    13ce:	0a 32       	cpi	r16, 0x2A	; 42
    13d0:	11 05       	cpc	r17, r1
    13d2:	b1 f1       	breq	.+108    	; 0x1440 <main+0x55c>
    13d4:	38 01       	movw	r6, r16
    13d6:	65 c0       	rjmp	.+202    	; 0x14a2 <main+0x5be>
								case M1_B + 1:
									lcd_goto_xy(0,1);
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	61 e0       	ldi	r22, 0x01	; 1
    13dc:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    13e0:	80 91 2b 04 	lds	r24, 0x042B
    13e4:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    13e6:	80 62       	ori	r24, 0x20	; 32
    13e8:	80 93 2b 04 	sts	0x042B, r24
    13ec:	12 01       	movw	r2, r4
    13ee:	c3 c1       	rjmp	.+902    	; 0x1776 <main+0x892>
									break;
								case M2_B + 1:
									lcd_goto_xy(0,1);
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	61 e0       	ldi	r22, 0x01	; 1
    13f4:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    13f8:	80 91 2b 04 	lds	r24, 0x042B
    13fc:	8f 7d       	andi	r24, 0xDF	; 223
    13fe:	80 93 2b 04 	sts	0x042B, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    1402:	80 91 27 04 	lds	r24, 0x0427
    1406:	81 60       	ori	r24, 0x01	; 1
    1408:	80 93 27 04 	sts	0x0427, r24
    140c:	12 01       	movw	r2, r4
    140e:	d3 c1       	rjmp	.+934    	; 0x17b6 <main+0x8d2>
									break;
								case M3_B + 1:
									lcd_goto_xy(0,1);
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1418:	80 91 27 04 	lds	r24, 0x0427
    141c:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    141e:	88 60       	ori	r24, 0x08	; 8
    1420:	80 93 27 04 	sts	0x0427, r24
    1424:	12 01       	movw	r2, r4
    1426:	e7 c1       	rjmp	.+974    	; 0x17f6 <main+0x912>
									break;
								case M4_B + 1:
									lcd_goto_xy(0,1);
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	61 e0       	ldi	r22, 0x01	; 1
    142c:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    1430:	80 91 27 04 	lds	r24, 0x0427
    1434:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    1436:	80 64       	ori	r24, 0x40	; 64
    1438:	80 93 27 04 	sts	0x0427, r24
    143c:	12 01       	movw	r2, r4
    143e:	fb c1       	rjmp	.+1014   	; 0x1836 <main+0x952>
									break;
								case M5_B + 1:
									//clear();
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    1440:	80 91 27 04 	lds	r24, 0x0427
    1444:	8f 7b       	andi	r24, 0xBF	; 191
    1446:	80 93 27 04 	sts	0x0427, r24
									state = DONEM;
									paperTowelMotor = 0;
    144a:	1b 86       	std	Y+11, r1	; 0x0b
    144c:	1a 86       	std	Y+10, r1	; 0x0a
    144e:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <main+0x15b4>
							}
						}
					}
					else{
						buttonTriggered = false;
						state ++;
    1452:	38 01       	movw	r6, r16
						counterRef = counter;
						printVar = true;
						switch(state){
    1454:	0b 32       	cpi	r16, 0x2B	; 43
    1456:	11 05       	cpc	r17, r1
    1458:	21 f0       	breq	.+8      	; 0x1462 <main+0x57e>
    145a:	0c 32       	cpi	r16, 0x2C	; 44
    145c:	11 05       	cpc	r17, r1
    145e:	09 f5       	brne	.+66     	; 0x14a2 <main+0x5be>
    1460:	11 c0       	rjmp	.+34     	; 0x1484 <main+0x5a0>
							case M2_AND_M3 + 1:
								lcd_goto_xy(0,1);
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	61 e0       	ldi	r22, 0x01	; 1
    1466:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
								u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    146a:	90 91 27 04 	lds	r25, 0x0427
    146e:	9e 7f       	andi	r25, 0xFE	; 254
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1470:	80 91 2b 04 	lds	r24, 0x042B
    1474:	80 62       	ori	r24, 0x20	; 32
    1476:	80 93 2b 04 	sts	0x042B, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    147a:	98 60       	ori	r25, 0x08	; 8
    147c:	90 93 27 04 	sts	0x0427, r25
    1480:	12 01       	movw	r2, r4
    1482:	07 c2       	rjmp	.+1038   	; 0x1892 <main+0x9ae>
								break;
							case M2_AND_M4 + 1:
								//clear();
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1484:	80 91 2b 04 	lds	r24, 0x042B
    1488:	8f 7d       	andi	r24, 0xDF	; 223
    148a:	80 93 2b 04 	sts	0x042B, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    148e:	80 91 27 04 	lds	r24, 0x0427
    1492:	87 7f       	andi	r24, 0xF7	; 247
    1494:	80 93 27 04 	sts	0x0427, r24
								state = DONEM;
								fixtureMotor = 0;
    1498:	1d 82       	std	Y+5, r1	; 0x05
    149a:	1c 82       	std	Y+4, r1	; 0x04
								brush2Motor = 0;
    149c:	19 86       	std	Y+9, r1	; 0x09
    149e:	18 86       	std	Y+8, r1	; 0x08
    14a0:	fb c7       	rjmp	.+4086   	; 0x2498 <main+0x15b4>
    14a2:	12 01       	movw	r2, r4
    14a4:	99 24       	eor	r9, r9
    14a6:	93 94       	inc	r9
						}
					}
				}

				//state actions
				switch (state) {
    14a8:	f3 01       	movw	r30, r6
    14aa:	ec 32       	cpi	r30, 0x2C	; 44
    14ac:	f1 05       	cpc	r31, r1
    14ae:	08 f0       	brcs	.+2      	; 0x14b2 <main+0x5ce>
    14b0:	00 c2       	rjmp	.+1024   	; 0x18b2 <main+0x9ce>
    14b2:	ea 5b       	subi	r30, 0xBA	; 186
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	ee 0f       	add	r30, r30
    14b8:	ff 1f       	adc	r31, r31
    14ba:	05 90       	lpm	r0, Z+
    14bc:	f4 91       	lpm	r31, Z+
    14be:	e0 2d       	mov	r30, r0
    14c0:	09 94       	ijmp
					case S0:
						if(printVar){
    14c2:	99 20       	and	r9, r9
    14c4:	21 f0       	breq	.+8      	; 0x14ce <main+0x5ea>
							serial_print("SENSOR 0");
    14c6:	8b ea       	ldi	r24, 0xAB	; 171
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    14ce:	8f e0       	ldi	r24, 0x0F	; 15
    14d0:	61 e0       	ldi	r22, 0x01	; 1
    14d2:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
						serial_print(u_inputByte0.bits_in_inputByte0.plate);
    14d6:	80 91 26 04 	lds	r24, 0x0426
    14da:	0d c0       	rjmp	.+26     	; 0x14f6 <main+0x612>
						break;
					case S1:
						if(printVar){
    14dc:	99 20       	and	r9, r9
    14de:	21 f0       	breq	.+8      	; 0x14e8 <main+0x604>
							serial_print("SENSOR 1");
    14e0:	84 eb       	ldi	r24, 0xB4	; 180
    14e2:	91 e0       	ldi	r25, 0x01	; 1
    14e4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    14e8:	8f e0       	ldi	r24, 0x0F	; 15
    14ea:	61 e0       	ldi	r22, 0x01	; 1
    14ec:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
						serial_print(u_inputByte0.bits_in_inputByte0.fixtureLift);
    14f0:	80 91 26 04 	lds	r24, 0x0426
    14f4:	86 95       	lsr	r24
    14f6:	81 70       	andi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    14fe:	c5 c1       	rjmp	.+906    	; 0x188a <main+0x9a6>
						break;
					case S2:
						if(printVar){
    1500:	99 20       	and	r9, r9
    1502:	21 f0       	breq	.+8      	; 0x150c <main+0x628>
							serial_print("SENSOR 2");
    1504:	8d eb       	ldi	r24, 0xBD	; 189
    1506:	91 e0       	ldi	r25, 0x01	; 1
    1508:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    150c:	8f e0       	ldi	r24, 0x0F	; 15
    150e:	61 e0       	ldi	r22, 0x01	; 1
    1510:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
						serial_print(u_inputByte0.bits_in_inputByte0.fixtureHome);
    1514:	80 91 26 04 	lds	r24, 0x0426
    1518:	86 95       	lsr	r24
    151a:	86 95       	lsr	r24
    151c:	ec cf       	rjmp	.-40     	; 0x14f6 <main+0x612>
						break;
					case S3:
						if(printVar){
    151e:	99 20       	and	r9, r9
    1520:	21 f0       	breq	.+8      	; 0x152a <main+0x646>
							serial_print("SENSOR 3");
    1522:	86 ec       	ldi	r24, 0xC6	; 198
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    152a:	8f e0       	ldi	r24, 0x0F	; 15
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
						serial_print(u_inputByte0.bits_in_inputByte0.fixturePlate);
    1532:	80 91 26 04 	lds	r24, 0x0426
    1536:	86 95       	lsr	r24
    1538:	86 95       	lsr	r24
    153a:	86 95       	lsr	r24
    153c:	dc cf       	rjmp	.-72     	; 0x14f6 <main+0x612>
						break;
					case S4:
						if(printVar){
    153e:	99 20       	and	r9, r9
    1540:	21 f0       	breq	.+8      	; 0x154a <main+0x666>
							serial_print("SENSOR 4");
    1542:	8f ec       	ldi	r24, 0xCF	; 207
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    154a:	8f e0       	ldi	r24, 0x0F	; 15
    154c:	61 e0       	ldi	r22, 0x01	; 1
    154e:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
						serial_print(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
    1552:	80 91 26 04 	lds	r24, 0x0426
    1556:	82 95       	swap	r24
    1558:	8f 70       	andi	r24, 0x0F	; 15
    155a:	cd cf       	rjmp	.-102    	; 0x14f6 <main+0x612>
						break;
					case S5:
						if(printVar){
    155c:	99 20       	and	r9, r9
    155e:	21 f0       	breq	.+8      	; 0x1568 <main+0x684>
							serial_print("SENSOR 5");
    1560:	88 ed       	ldi	r24, 0xD8	; 216
    1562:	91 e0       	ldi	r25, 0x01	; 1
    1564:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1568:	8f e0       	ldi	r24, 0x0F	; 15
    156a:	61 e0       	ldi	r22, 0x01	; 1
    156c:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
						serial_print(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
    1570:	80 91 26 04 	lds	r24, 0x0426
    1574:	82 95       	swap	r24
    1576:	86 95       	lsr	r24
    1578:	87 70       	andi	r24, 0x07	; 7
    157a:	bd cf       	rjmp	.-134    	; 0x14f6 <main+0x612>
						break;
					case S6:
						if(printVar){
    157c:	99 20       	and	r9, r9
    157e:	21 f0       	breq	.+8      	; 0x1588 <main+0x6a4>
							serial_print("SENSOR 6");
    1580:	81 ee       	ldi	r24, 0xE1	; 225
    1582:	91 e0       	ldi	r25, 0x01	; 1
    1584:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1588:	8f e0       	ldi	r24, 0x0F	; 15
    158a:	61 e0       	ldi	r22, 0x01	; 1
    158c:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
						serial_print(u_inputByte0.bits_in_inputByte0.fixtureDry1);
    1590:	80 91 26 04 	lds	r24, 0x0426
    1594:	82 95       	swap	r24
    1596:	86 95       	lsr	r24
    1598:	86 95       	lsr	r24
    159a:	83 70       	andi	r24, 0x03	; 3
    159c:	ac cf       	rjmp	.-168    	; 0x14f6 <main+0x612>
						break;
					case S7:
						if(printVar){
    159e:	99 20       	and	r9, r9
    15a0:	21 f0       	breq	.+8      	; 0x15aa <main+0x6c6>
							serial_print("SENSOR 7");
    15a2:	8a ee       	ldi	r24, 0xEA	; 234
    15a4:	91 e0       	ldi	r25, 0x01	; 1
    15a6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    15aa:	8f e0       	ldi	r24, 0x0F	; 15
    15ac:	61 e0       	ldi	r22, 0x01	; 1
    15ae:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
						serial_print(u_inputByte0.bits_in_inputByte0.fixtureDry2);
    15b2:	80 91 26 04 	lds	r24, 0x0426
    15b6:	88 1f       	adc	r24, r24
    15b8:	88 27       	eor	r24, r24
    15ba:	88 1f       	adc	r24, r24
    15bc:	9d cf       	rjmp	.-198    	; 0x14f8 <main+0x614>
						break;
					case O0_ON:
						if(printVar){
    15be:	99 20       	and	r9, r9
    15c0:	21 f0       	breq	.+8      	; 0x15ca <main+0x6e6>
							serial_print("AC POWER     ON ");
    15c2:	83 ef       	ldi	r24, 0xF3	; 243
    15c4:	91 e0       	ldi	r25, 0x01	; 1
    15c6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
    15ca:	80 91 2a 04 	lds	r24, 0x042A
    15ce:	8e 7f       	andi	r24, 0xFE	; 254
    15d0:	7f c0       	rjmp	.+254    	; 0x16d0 <main+0x7ec>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
    15d2:	80 91 2a 04 	lds	r24, 0x042A
    15d6:	81 60       	ori	r24, 0x01	; 1
    15d8:	0d c0       	rjmp	.+26     	; 0x15f4 <main+0x710>
						break;
					case O1_ON:
						if(printVar){
    15da:	99 20       	and	r9, r9
    15dc:	21 f0       	breq	.+8      	; 0x15e6 <main+0x702>
							serial_print("BLOWER       ON  ");
    15de:	84 e0       	ldi	r24, 0x04	; 4
    15e0:	92 e0       	ldi	r25, 0x02	; 2
    15e2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    15e6:	80 91 2a 04 	lds	r24, 0x042A
    15ea:	8d 7f       	andi	r24, 0xFD	; 253
    15ec:	71 c0       	rjmp	.+226    	; 0x16d0 <main+0x7ec>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    15ee:	80 91 2a 04 	lds	r24, 0x042A
    15f2:	82 60       	ori	r24, 0x02	; 2
    15f4:	80 93 2a 04 	sts	0x042A, r24
    15f8:	5c c1       	rjmp	.+696    	; 0x18b2 <main+0x9ce>
						break;
					case O2_ON:
						if(printVar){
    15fa:	99 20       	and	r9, r9
    15fc:	21 f0       	breq	.+8      	; 0x1606 <main+0x722>
							serial_print("PLATE STOP   ON ");
    15fe:	86 e1       	ldi	r24, 0x16	; 22
    1600:	92 e0       	ldi	r25, 0x02	; 2
    1602:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1606:	80 91 2a 04 	lds	r24, 0x042A
    160a:	8b 7f       	andi	r24, 0xFB	; 251
    160c:	61 c0       	rjmp	.+194    	; 0x16d0 <main+0x7ec>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
    160e:	80 91 2a 04 	lds	r24, 0x042A
    1612:	84 60       	ori	r24, 0x04	; 4
    1614:	ef cf       	rjmp	.-34     	; 0x15f4 <main+0x710>
						break;
					case O3_ON:
						if(printVar){
    1616:	99 20       	and	r9, r9
    1618:	21 f0       	breq	.+8      	; 0x1622 <main+0x73e>
							serial_print("PLATE RAISE  ON ");
    161a:	87 e2       	ldi	r24, 0x27	; 39
    161c:	92 e0       	ldi	r25, 0x02	; 2
    161e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1622:	80 91 2a 04 	lds	r24, 0x042A
    1626:	87 7f       	andi	r24, 0xF7	; 247
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1628:	80 61       	ori	r24, 0x10	; 16
    162a:	52 c0       	rjmp	.+164    	; 0x16d0 <main+0x7ec>
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    162c:	80 91 2a 04 	lds	r24, 0x042A
    1630:	88 60       	ori	r24, 0x08	; 8
    1632:	e0 cf       	rjmp	.-64     	; 0x15f4 <main+0x710>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(printVar){
    1634:	99 20       	and	r9, r9
    1636:	21 f0       	breq	.+8      	; 0x1640 <main+0x75c>
							serial_print("PLATE LOWER  ON ");
    1638:	88 e3       	ldi	r24, 0x38	; 56
    163a:	92 e0       	ldi	r25, 0x02	; 2
    163c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1640:	80 91 2a 04 	lds	r24, 0x042A
    1644:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1646:	8f 7e       	andi	r24, 0xEF	; 239
    1648:	43 c0       	rjmp	.+134    	; 0x16d0 <main+0x7ec>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    164a:	80 91 2a 04 	lds	r24, 0x042A
    164e:	80 61       	ori	r24, 0x10	; 16
    1650:	d1 cf       	rjmp	.-94     	; 0x15f4 <main+0x710>
						break;
					case O5_ON:
						if(printVar){
    1652:	99 20       	and	r9, r9
    1654:	21 f0       	breq	.+8      	; 0x165e <main+0x77a>
							serial_print("BRUSH1 RAISE ON ");
    1656:	89 e4       	ldi	r24, 0x49	; 73
    1658:	92 e0       	ldi	r25, 0x02	; 2
    165a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    165e:	80 91 2a 04 	lds	r24, 0x042A
    1662:	8f 7d       	andi	r24, 0xDF	; 223
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1664:	80 64       	ori	r24, 0x40	; 64
    1666:	34 c0       	rjmp	.+104    	; 0x16d0 <main+0x7ec>
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1668:	80 91 2a 04 	lds	r24, 0x042A
    166c:	80 62       	ori	r24, 0x20	; 32
    166e:	c2 cf       	rjmp	.-124    	; 0x15f4 <main+0x710>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(printVar){
    1670:	99 20       	and	r9, r9
    1672:	21 f0       	breq	.+8      	; 0x167c <main+0x798>
							serial_print("BRUSH1 LOWER ON ");
    1674:	8a e5       	ldi	r24, 0x5A	; 90
    1676:	92 e0       	ldi	r25, 0x02	; 2
    1678:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    167c:	80 91 2a 04 	lds	r24, 0x042A
    1680:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1682:	80 62       	ori	r24, 0x20	; 32
    1684:	25 c0       	rjmp	.+74     	; 0x16d0 <main+0x7ec>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1686:	80 91 2a 04 	lds	r24, 0x042A
    168a:	80 64       	ori	r24, 0x40	; 64
    168c:	b3 cf       	rjmp	.-154    	; 0x15f4 <main+0x710>
						break;
					case O7_ON:
						if(printVar){
    168e:	99 20       	and	r9, r9
    1690:	21 f0       	breq	.+8      	; 0x169a <main+0x7b6>
							serial_print("BRUSH2 RAISE ON ");
    1692:	8b e6       	ldi	r24, 0x6B	; 107
    1694:	92 e0       	ldi	r25, 0x02	; 2
    1696:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    169a:	80 91 2a 04 	lds	r24, 0x042A
    169e:	8f 77       	andi	r24, 0x7F	; 127
    16a0:	80 93 2a 04 	sts	0x042A, r24
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    16a4:	80 91 28 04 	lds	r24, 0x0428
    16a8:	81 60       	ori	r24, 0x01	; 1
    16aa:	40 c0       	rjmp	.+128    	; 0x172c <main+0x848>
						break;
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    16ac:	80 91 2a 04 	lds	r24, 0x042A
    16b0:	80 68       	ori	r24, 0x80	; 128
    16b2:	a0 cf       	rjmp	.-192    	; 0x15f4 <main+0x710>
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(printVar){
    16b4:	99 20       	and	r9, r9
    16b6:	21 f0       	breq	.+8      	; 0x16c0 <main+0x7dc>
							serial_print("BRUSH2 LOWER ON ");
    16b8:	8c e7       	ldi	r24, 0x7C	; 124
    16ba:	92 e0       	ldi	r25, 0x02	; 2
    16bc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    16c0:	80 91 28 04 	lds	r24, 0x0428
    16c4:	8e 7f       	andi	r24, 0xFE	; 254
    16c6:	80 93 28 04 	sts	0x0428, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    16ca:	80 91 2a 04 	lds	r24, 0x042A
    16ce:	80 68       	ori	r24, 0x80	; 128
    16d0:	80 93 2a 04 	sts	0x042A, r24
    16d4:	da c0       	rjmp	.+436    	; 0x188a <main+0x9a6>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    16d6:	80 91 28 04 	lds	r24, 0x0428
    16da:	81 60       	ori	r24, 0x01	; 1
    16dc:	2d c0       	rjmp	.+90     	; 0x1738 <main+0x854>
						break;
					case O9_ON:
						if(printVar){
    16de:	99 20       	and	r9, r9
    16e0:	21 f0       	breq	.+8      	; 0x16ea <main+0x806>
							serial_print("PAPER RAISE  ON ");
    16e2:	8d e8       	ldi	r24, 0x8D	; 141
    16e4:	92 e0       	ldi	r25, 0x02	; 2
    16e6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    16ea:	80 91 28 04 	lds	r24, 0x0428
    16ee:	8d 7f       	andi	r24, 0xFD	; 253
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    16f0:	84 60       	ori	r24, 0x04	; 4
    16f2:	1c c0       	rjmp	.+56     	; 0x172c <main+0x848>
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    16f4:	80 91 28 04 	lds	r24, 0x0428
    16f8:	82 60       	ori	r24, 0x02	; 2
    16fa:	1e c0       	rjmp	.+60     	; 0x1738 <main+0x854>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(printVar){
    16fc:	99 20       	and	r9, r9
    16fe:	21 f0       	breq	.+8      	; 0x1708 <main+0x824>
							serial_print("PAPER LOWER  ON ");
    1700:	8e e9       	ldi	r24, 0x9E	; 158
    1702:	92 e0       	ldi	r25, 0x02	; 2
    1704:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1708:	80 91 28 04 	lds	r24, 0x0428
    170c:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    170e:	82 60       	ori	r24, 0x02	; 2
    1710:	0d c0       	rjmp	.+26     	; 0x172c <main+0x848>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    1712:	80 91 28 04 	lds	r24, 0x0428
    1716:	84 60       	ori	r24, 0x04	; 4
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <main+0x854>
						break;
					case O11_ON:
						if(printVar){
    171a:	99 20       	and	r9, r9
    171c:	21 f0       	breq	.+8      	; 0x1726 <main+0x842>
							serial_print("AIR KNIFE    ON ");
    171e:	8f ea       	ldi	r24, 0xAF	; 175
    1720:	92 e0       	ldi	r25, 0x02	; 2
    1722:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1726:	80 91 28 04 	lds	r24, 0x0428
    172a:	87 7f       	andi	r24, 0xF7	; 247
    172c:	80 93 28 04 	sts	0x0428, r24
    1730:	ac c0       	rjmp	.+344    	; 0x188a <main+0x9a6>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1732:	80 91 28 04 	lds	r24, 0x0428
    1736:	88 60       	ori	r24, 0x08	; 8
    1738:	80 93 28 04 	sts	0x0428, r24
    173c:	ba c0       	rjmp	.+372    	; 0x18b2 <main+0x9ce>
						break;
					case M1_F:
						if(printVar){
    173e:	99 20       	and	r9, r9
    1740:	21 f0       	breq	.+8      	; 0x174a <main+0x866>
							serial_print("LOADING    FRONT");
    1742:	80 ec       	ldi	r24, 0xC0	; 192
    1744:	92 e0       	ldi	r25, 0x02	; 2
    1746:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    174a:	80 91 2b 04 	lds	r24, 0x042B
    174e:	8d 7f       	andi	r24, 0xFD	; 253
    1750:	80 93 2b 04 	sts	0x042B, r24
						plateLoadMotor =  1;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9b 83       	std	Y+3, r25	; 0x03
    175a:	8a 83       	std	Y+2, r24	; 0x02
    175c:	96 c0       	rjmp	.+300    	; 0x188a <main+0x9a6>
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
    175e:	80 91 2b 04 	lds	r24, 0x042B
    1762:	82 60       	ori	r24, 0x02	; 2
    1764:	80 93 2b 04 	sts	0x042B, r24
						plateLoadMotor =  1;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	9b 83       	std	Y+3, r25	; 0x03
    176e:	8a 83       	std	Y+2, r24	; 0x02
    1770:	a0 c0       	rjmp	.+320    	; 0x18b2 <main+0x9ce>
						break;
					case M2_F:
						if(printVar){
    1772:	99 20       	and	r9, r9
    1774:	21 f0       	breq	.+8      	; 0x177e <main+0x89a>
							serial_print("DRIVE      FRONT");
    1776:	81 ed       	ldi	r24, 0xD1	; 209
    1778:	92 e0       	ldi	r25, 0x02	; 2
    177a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    177e:	80 91 2b 04 	lds	r24, 0x042B
    1782:	8f 7e       	andi	r24, 0xEF	; 239
    1784:	80 93 2b 04 	sts	0x042B, r24
						fixtureMotor =  1;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	9d 83       	std	Y+5, r25	; 0x05
    178e:	8c 83       	std	Y+4, r24	; 0x04
						plateLoadMotor = 0;
    1790:	1b 82       	std	Y+3, r1	; 0x03
    1792:	1a 82       	std	Y+2, r1	; 0x02
    1794:	99 24       	eor	r9, r9
    1796:	32 e2       	ldi	r19, 0x22	; 34
    1798:	63 2e       	mov	r6, r19
    179a:	71 2c       	mov	r7, r1
    179c:	8a c0       	rjmp	.+276    	; 0x18b2 <main+0x9ce>
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
    179e:	80 91 2b 04 	lds	r24, 0x042B
    17a2:	80 61       	ori	r24, 0x10	; 16
    17a4:	80 93 2b 04 	sts	0x042B, r24
						fixtureMotor =  1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9d 83       	std	Y+5, r25	; 0x05
    17ae:	8c 83       	std	Y+4, r24	; 0x04
    17b0:	80 c0       	rjmp	.+256    	; 0x18b2 <main+0x9ce>
						break;
					case M3_F:
						if(printVar){
    17b2:	99 20       	and	r9, r9
    17b4:	21 f0       	breq	.+8      	; 0x17be <main+0x8da>
							serial_print("BRUSH1     FRONT");
    17b6:	82 ee       	ldi	r24, 0xE2	; 226
    17b8:	92 e0       	ldi	r25, 0x02	; 2
    17ba:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
    17be:	80 91 2b 04 	lds	r24, 0x042B
    17c2:	8f 77       	andi	r24, 0x7F	; 127
    17c4:	80 93 2b 04 	sts	0x042B, r24
						brush1Motor =  1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9f 83       	std	Y+7, r25	; 0x07
    17ce:	8e 83       	std	Y+6, r24	; 0x06
						fixtureMotor = 0;
    17d0:	1d 82       	std	Y+5, r1	; 0x05
    17d2:	1c 82       	std	Y+4, r1	; 0x04
    17d4:	99 24       	eor	r9, r9
    17d6:	24 e2       	ldi	r18, 0x24	; 36
    17d8:	62 2e       	mov	r6, r18
    17da:	71 2c       	mov	r7, r1
    17dc:	6a c0       	rjmp	.+212    	; 0x18b2 <main+0x9ce>
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
    17de:	80 91 2b 04 	lds	r24, 0x042B
    17e2:	80 68       	ori	r24, 0x80	; 128
    17e4:	80 93 2b 04 	sts	0x042B, r24
						brush1Motor =  1;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	9f 83       	std	Y+7, r25	; 0x07
    17ee:	8e 83       	std	Y+6, r24	; 0x06
    17f0:	60 c0       	rjmp	.+192    	; 0x18b2 <main+0x9ce>
						break;
					case M4_F:
						if(printVar){
    17f2:	99 20       	and	r9, r9
    17f4:	21 f0       	breq	.+8      	; 0x17fe <main+0x91a>
							serial_print("BRUSH2     FRONT");
    17f6:	83 ef       	ldi	r24, 0xF3	; 243
    17f8:	92 e0       	ldi	r25, 0x02	; 2
    17fa:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
    17fe:	80 91 27 04 	lds	r24, 0x0427
    1802:	8b 7f       	andi	r24, 0xFB	; 251
    1804:	80 93 27 04 	sts	0x0427, r24
						brush2Motor =  1;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	99 87       	std	Y+9, r25	; 0x09
    180e:	88 87       	std	Y+8, r24	; 0x08
						brush1Motor = 0;
    1810:	1f 82       	std	Y+7, r1	; 0x07
    1812:	1e 82       	std	Y+6, r1	; 0x06
    1814:	99 24       	eor	r9, r9
    1816:	96 e2       	ldi	r25, 0x26	; 38
    1818:	69 2e       	mov	r6, r25
    181a:	71 2c       	mov	r7, r1
    181c:	4a c0       	rjmp	.+148    	; 0x18b2 <main+0x9ce>
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
    181e:	80 91 27 04 	lds	r24, 0x0427
    1822:	84 60       	ori	r24, 0x04	; 4
    1824:	80 93 27 04 	sts	0x0427, r24
						brush2Motor =  1;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	99 87       	std	Y+9, r25	; 0x09
    182e:	88 87       	std	Y+8, r24	; 0x08
    1830:	40 c0       	rjmp	.+128    	; 0x18b2 <main+0x9ce>
						break;
					case M5_F:
						if(printVar){
    1832:	99 20       	and	r9, r9
    1834:	21 f0       	breq	.+8      	; 0x183e <main+0x95a>
							serial_print("PAPER      FRONT");
    1836:	84 e0       	ldi	r24, 0x04	; 4
    1838:	93 e0       	ldi	r25, 0x03	; 3
    183a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    183e:	80 91 27 04 	lds	r24, 0x0427
    1842:	8f 7d       	andi	r24, 0xDF	; 223
    1844:	80 93 27 04 	sts	0x0427, r24
						paperTowelMotor =  1;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9b 87       	std	Y+11, r25	; 0x0b
    184e:	8a 87       	std	Y+10, r24	; 0x0a
						brush2Motor = 0;
    1850:	19 86       	std	Y+9, r1	; 0x09
    1852:	18 86       	std	Y+8, r1	; 0x08
    1854:	99 24       	eor	r9, r9
    1856:	88 e2       	ldi	r24, 0x28	; 40
    1858:	68 2e       	mov	r6, r24
    185a:	71 2c       	mov	r7, r1
    185c:	2a c0       	rjmp	.+84     	; 0x18b2 <main+0x9ce>
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
    185e:	80 91 27 04 	lds	r24, 0x0427
    1862:	80 62       	ori	r24, 0x20	; 32
    1864:	80 93 27 04 	sts	0x0427, r24
						paperTowelMotor =  1;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9b 87       	std	Y+11, r25	; 0x0b
    186e:	8a 87       	std	Y+10, r24	; 0x0a
    1870:	20 c0       	rjmp	.+64     	; 0x18b2 <main+0x9ce>
						break;
					case M2_AND_M3:
						if(printVar){
    1872:	99 20       	and	r9, r9
    1874:	21 f0       	breq	.+8      	; 0x187e <main+0x99a>
							serial_print("FIXTURE & BRUSH1");
    1876:	85 e1       	ldi	r24, 0x15	; 21
    1878:	93 e0       	ldi	r25, 0x03	; 3
    187a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						fixtureMotor = 1;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	9d 83       	std	Y+5, r25	; 0x05
    1884:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 1;
    1886:	9f 83       	std	Y+7, r25	; 0x07
    1888:	8e 83       	std	Y+6, r24	; 0x06
    188a:	99 24       	eor	r9, r9
    188c:	12 c0       	rjmp	.+36     	; 0x18b2 <main+0x9ce>
						break;
					case M2_AND_M4:
						if(printVar){
    188e:	99 20       	and	r9, r9
    1890:	21 f0       	breq	.+8      	; 0x189a <main+0x9b6>
							serial_print("FIXTURE & BRUSH2");
    1892:	86 e2       	ldi	r24, 0x26	; 38
    1894:	93 e0       	ldi	r25, 0x03	; 3
    1896:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
							printVar = false;
						}
						fixtureMotor = 1;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	9d 83       	std	Y+5, r25	; 0x05
    18a0:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 0;
    18a2:	1f 82       	std	Y+7, r1	; 0x07
    18a4:	1e 82       	std	Y+6, r1	; 0x06
						brush2Motor = 1;
    18a6:	99 87       	std	Y+9, r25	; 0x09
    18a8:	88 87       	std	Y+8, r24	; 0x08
    18aa:	99 24       	eor	r9, r9
    18ac:	0b e2       	ldi	r16, 0x2B	; 43
    18ae:	60 2e       	mov	r6, r16
    18b0:	71 2c       	mov	r7, r1
						break;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    18b2:	2a 81       	ldd	r18, Y+2	; 0x02
    18b4:	3b 81       	ldd	r19, Y+3	; 0x03
    18b6:	0c 81       	ldd	r16, Y+4	; 0x04
    18b8:	1d 81       	ldd	r17, Y+5	; 0x05
    18ba:	ee 80       	ldd	r14, Y+6	; 0x06
    18bc:	ff 80       	ldd	r15, Y+7	; 0x07
    18be:	c8 84       	ldd	r12, Y+8	; 0x08
    18c0:	d9 84       	ldd	r13, Y+9	; 0x09
    18c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    18c4:	bb 84       	ldd	r11, Y+11	; 0x0b
    18c6:	c2 01       	movw	r24, r4
    18c8:	b1 01       	movw	r22, r2
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	50 e0       	ldi	r21, 0x00	; 0
    18ce:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <motor_and_write>

				serial_check(); counter++;
    18d2:	0e 94 1b 1c 	call	0x3836	; 0x3836 <serial_check>
				delay_ms(1);
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>
			counter = 0;
			//clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
    18de:	9c e2       	ldi	r25, 0x2C	; 44
    18e0:	69 16       	cp	r6, r25
    18e2:	71 04       	cpc	r7, r1
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <main+0xa04>
    18e6:	b8 c5       	rjmp	.+2928   	; 0x2458 <main+0x1574>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    18e8:	08 94       	sec
    18ea:	41 1c       	adc	r4, r1
    18ec:	51 1c       	adc	r5, r1
    18ee:	53 cc       	rjmp	.-1882   	; 0x1196 <main+0x2b2>
		}
		else{										//If switch is set to Run Mode
		
		bool printVar = true;

		serial_print("NORMAL");
    18f0:	87 e3       	ldi	r24, 0x37	; 55
    18f2:	93 e0       	ldi	r25, 0x03	; 3
    18f4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
		delay_ms(1000);
    18f8:	88 ee       	ldi	r24, 0xE8	; 232
    18fa:	93 e0       	ldi	r25, 0x03	; 3
    18fc:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>
		
		//clear();
		serial_print("SELECT CYCLE");
    1900:	8e e3       	ldi	r24, 0x3E	; 62
    1902:	93 e0       	ldi	r25, 0x03	; 3
    1904:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    1908:	ee 24       	eor	r14, r14
    190a:	ff 24       	eor	r15, r15
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    190c:	c7 01       	movw	r24, r14
    190e:	be 01       	movw	r22, r28
    1910:	64 5f       	subi	r22, 0xF4	; 244
    1912:	7f 4f       	sbci	r23, 0xFF	; 255
    1914:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    1918:	18 2f       	mov	r17, r24
			counter++;
    191a:	08 94       	sec
    191c:	e1 1c       	adc	r14, r1
    191e:	f1 1c       	adc	r15, r1
			delay_ms(1);
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>
		delay_ms(1000);
		
		//clear();
		serial_print("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1928:	11 23       	and	r17, r17
    192a:	81 f3       	breq	.-32     	; 0x190c <main+0xa28>
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		//clear();
		serial_print("CYCLE:");
    192c:	8b e4       	ldi	r24, 0x4B	; 75
    192e:	93 e0       	ldi	r25, 0x03	; 3
    1930:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>

		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1934:	80 91 2b 04 	lds	r24, 0x042B
    1938:	80 62       	ori	r24, 0x20	; 32
    193a:	80 93 2b 04 	sts	0x042B, r24

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1944:	88 23       	and	r24, r24
    1946:	09 f0       	breq	.+2      	; 0x194a <main+0xa66>
    1948:	70 c1       	rjmp	.+736    	; 0x1c2a <main+0xd46>
    194a:	82 e0       	ldi	r24, 0x02	; 2
    194c:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1950:	88 23       	and	r24, r24
    1952:	09 f0       	breq	.+2      	; 0x1956 <main+0xa72>
    1954:	6a c1       	rjmp	.+724    	; 0x1c2a <main+0xd46>
			lcd_goto_xy(7,0);
    1956:	87 e0       	ldi	r24, 0x07	; 7
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
			serial_print("FIRST B");
    195e:	82 e5       	ldi	r24, 0x52	; 82
    1960:	93 e0       	ldi	r25, 0x03	; 3
    1962:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	9d 83       	std	Y+5, r25	; 0x05
    196c:	8c 83       	std	Y+4, r24	; 0x04
    196e:	80 91 2b 04 	lds	r24, 0x042B
    1972:	80 62       	ori	r24, 0x20	; 32
    1974:	80 93 2b 04 	sts	0x042B, r24
    1978:	33 24       	eor	r3, r3
    197a:	33 94       	inc	r3
    197c:	88 24       	eor	r8, r8
    197e:	99 24       	eor	r9, r9
    1980:	66 24       	eor	r6, r6
    1982:	77 24       	eor	r7, r7
    1984:	44 24       	eor	r4, r4
    1986:	55 24       	eor	r5, r5
    1988:	1e 8a       	std	Y+22, r1	; 0x16
    198a:	1d 8a       	std	Y+21, r1	; 0x15
    198c:	22 24       	eor	r2, r2
    198e:	23 94       	inc	r2
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1990:	84 e4       	ldi	r24, 0x44	; 68
    1992:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    199c:	85 e4       	ldi	r24, 0x45	; 69
    199e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    19a2:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    19a6:	80 93 26 04 	sts	0x0426, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    19aa:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    19ae:	80 93 29 04 	sts	0x0429, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    19b2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    19b6:	81 14       	cp	r8, r1
    19b8:	91 04       	cpc	r9, r1
    19ba:	b1 f0       	breq	.+44     	; 0x19e8 <main+0xb04>
    19bc:	33 20       	and	r3, r3
    19be:	a1 f0       	breq	.+40     	; 0x19e8 <main+0xb04>
					lcd_goto_xy(6,1);
    19c0:	86 e0       	ldi	r24, 0x06	; 6
    19c2:	61 e0       	ldi	r22, 0x01	; 1
    19c4:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
					serial_print("     ");
    19c8:	8a e5       	ldi	r24, 0x5A	; 90
    19ca:	93 e0       	ldi	r25, 0x03	; 3
    19cc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
					lcd_goto_xy(0,1);
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
					serial_print("STATE ");
    19d8:	80 e6       	ldi	r24, 0x60	; 96
    19da:	93 e0       	ldi	r25, 0x03	; 3
    19dc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
					serial_print(state);
    19e0:	c4 01       	movw	r24, r8
    19e2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    19e6:	33 24       	eor	r3, r3
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    19e8:	c3 01       	movw	r24, r6
    19ea:	be 01       	movw	r22, r28
    19ec:	64 5f       	subi	r22, 0xF4	; 244
    19ee:	7f 4f       	sbci	r23, 0xFF	; 255
    19f0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    19f4:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    19f6:	c4 01       	movw	r24, r8
    19f8:	a3 01       	movw	r20, r6
    19fa:	92 01       	movw	r18, r4
    19fc:	0e 94 55 03 	call	0x6aa	; 0x6aa <init_trans>
    1a00:	88 23       	and	r24, r24
    1a02:	31 f0       	breq	.+12     	; 0x1a10 <main+0xb2c>
					buttonTriggered = false;
					state ++;
    1a04:	08 94       	sec
    1a06:	81 1c       	adc	r8, r1
    1a08:	91 1c       	adc	r9, r1
    1a0a:	23 01       	movw	r4, r6
    1a0c:	33 24       	eor	r3, r3
    1a0e:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    1a10:	c4 01       	movw	r24, r8
    1a12:	b3 01       	movw	r22, r6
    1a14:	a2 01       	movw	r20, r4
    1a16:	0e 94 aa 03 	call	0x754	; 0x754 <firstB_trans>
    1a1a:	88 23       	and	r24, r24
    1a1c:	71 f0       	breq	.+28     	; 0x1a3a <main+0xb56>
					state ++;
    1a1e:	08 94       	sec
    1a20:	81 1c       	adc	r8, r1
    1a22:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    1a24:	2a e0       	ldi	r18, 0x0A	; 10
    1a26:	82 16       	cp	r8, r18
    1a28:	91 04       	cpc	r9, r1
    1a2a:	f1 f1       	breq	.+124    	; 0x1aa8 <main+0xbc4>
    1a2c:	3d e0       	ldi	r19, 0x0D	; 13
    1a2e:	83 16       	cp	r8, r19
    1a30:	91 04       	cpc	r9, r1
    1a32:	d1 f1       	breq	.+116    	; 0x1aa8 <main+0xbc4>
    1a34:	23 01       	movw	r4, r6
    1a36:	33 24       	eor	r3, r3
    1a38:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}

				if(state == B1STOP2 && counter - counterRef > pWait){
    1a3a:	6e e0       	ldi	r22, 0x0E	; 14
    1a3c:	86 16       	cp	r8, r22
    1a3e:	91 04       	cpc	r9, r1
    1a40:	71 f4       	brne	.+28     	; 0x1a5e <main+0xb7a>
    1a42:	93 01       	movw	r18, r6
    1a44:	24 19       	sub	r18, r4
    1a46:	35 09       	sbc	r19, r5
    1a48:	80 91 90 03 	lds	r24, 0x0390
    1a4c:	90 91 91 03 	lds	r25, 0x0391
    1a50:	82 17       	cp	r24, r18
    1a52:	93 07       	cpc	r25, r19
    1a54:	5c f5       	brge	.+86     	; 0x1aac <main+0xbc8>
    1a56:	23 01       	movw	r4, r6
    1a58:	33 24       	eor	r3, r3
    1a5a:	33 94       	inc	r3
    1a5c:	04 c0       	rjmp	.+8      	; 0x1a66 <main+0xb82>
					state = MOVED1;
					counterRef = counter;
					printVar = true;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1a5e:	77 e1       	ldi	r23, 0x17	; 23
    1a60:	87 16       	cp	r8, r23
    1a62:	91 04       	cpc	r9, r1
    1a64:	19 f5       	brne	.+70     	; 0x1aac <main+0xbc8>
    1a66:	a3 01       	movw	r20, r6
    1a68:	44 19       	sub	r20, r4
    1a6a:	55 09       	sbc	r21, r5
    1a6c:	20 91 bc 03 	lds	r18, 0x03BC
    1a70:	30 91 bd 03 	lds	r19, 0x03BD
    1a74:	80 91 a2 03 	lds	r24, 0x03A2
    1a78:	90 91 a3 03 	lds	r25, 0x03A3
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	26 9f       	mul	r18, r22
    1a80:	c0 01       	movw	r24, r0
    1a82:	27 9f       	mul	r18, r23
    1a84:	90 0d       	add	r25, r0
    1a86:	36 9f       	mul	r19, r22
    1a88:	90 0d       	add	r25, r0
    1a8a:	11 24       	eor	r1, r1
    1a8c:	84 17       	cp	r24, r20
    1a8e:	95 07       	cpc	r25, r21
    1a90:	3c f4       	brge	.+14     	; 0x1aa0 <main+0xbbc>
    1a92:	23 01       	movw	r4, r6
    1a94:	33 24       	eor	r3, r3
    1a96:	33 94       	inc	r3
    1a98:	18 e1       	ldi	r17, 0x18	; 24
    1a9a:	81 2e       	mov	r8, r17
    1a9c:	91 2c       	mov	r9, r1
    1a9e:	06 c0       	rjmp	.+12     	; 0x1aac <main+0xbc8>
    1aa0:	b7 e1       	ldi	r27, 0x17	; 23
    1aa2:	8b 2e       	mov	r8, r27
    1aa4:	91 2c       	mov	r9, r1
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <main+0xbc8>
    1aa8:	33 24       	eor	r3, r3
    1aaa:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1aac:	c4 01       	movw	r24, r8
    1aae:	b3 01       	movw	r22, r6
    1ab0:	a2 01       	movw	r20, r4
    1ab2:	2d 89       	ldd	r18, Y+21	; 0x15
    1ab4:	3e 89       	ldd	r19, Y+22	; 0x16
    1ab6:	0e 94 05 05 	call	0xa0a	; 0xa0a <dry_trans>
    1aba:	88 23       	and	r24, r24
    1abc:	79 f0       	breq	.+30     	; 0x1adc <main+0xbf8>
					state ++;
    1abe:	08 94       	sec
    1ac0:	81 1c       	adc	r8, r1
    1ac2:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    1ac4:	7a e1       	ldi	r23, 0x1A	; 26
    1ac6:	87 16       	cp	r8, r23
    1ac8:	91 04       	cpc	r9, r1
    1aca:	29 f4       	brne	.+10     	; 0x1ad6 <main+0xbf2>
    1acc:	7e 8a       	std	Y+22, r7	; 0x16
    1ace:	6d 8a       	std	Y+21, r6	; 0x15
    1ad0:	33 24       	eor	r3, r3
    1ad2:	33 94       	inc	r3
    1ad4:	0f c0       	rjmp	.+30     	; 0x1af4 <main+0xc10>
    1ad6:	23 01       	movw	r4, r6
    1ad8:	33 24       	eor	r3, r3
    1ada:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    1adc:	83 e2       	ldi	r24, 0x23	; 35
    1ade:	88 16       	cp	r8, r24
    1ae0:	91 04       	cpc	r9, r1
    1ae2:	41 f4       	brne	.+16     	; 0x1af4 <main+0xc10>
    1ae4:	c3 01       	movw	r24, r6
    1ae6:	84 19       	sub	r24, r4
    1ae8:	95 09       	sbc	r25, r5
    1aea:	0b 97       	sbiw	r24, 0x0b	; 11
    1aec:	1c f0       	brlt	.+6      	; 0x1af4 <main+0xc10>
    1aee:	a4 e2       	ldi	r26, 0x24	; 36
    1af0:	8a 2e       	mov	r8, r26
    1af2:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1af4:	c4 01       	movw	r24, r8
    1af6:	b3 01       	movw	r22, r6
    1af8:	ae 01       	movw	r20, r28
    1afa:	4e 5f       	subi	r20, 0xFE	; 254
    1afc:	5f 4f       	sbci	r21, 0xFF	; 255
    1afe:	9e 01       	movw	r18, r28
    1b00:	2c 5f       	subi	r18, 0xFC	; 252
    1b02:	3f 4f       	sbci	r19, 0xFF	; 255
    1b04:	8e 01       	movw	r16, r28
    1b06:	0a 5f       	subi	r16, 0xFA	; 250
    1b08:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0a:	f8 e0       	ldi	r31, 0x08	; 8
    1b0c:	ef 2e       	mov	r14, r31
    1b0e:	f1 2c       	mov	r15, r1
    1b10:	ec 0e       	add	r14, r28
    1b12:	fd 1e       	adc	r15, r29
    1b14:	ea e0       	ldi	r30, 0x0A	; 10
    1b16:	ce 2e       	mov	r12, r30
    1b18:	d1 2c       	mov	r13, r1
    1b1a:	cc 0e       	add	r12, r28
    1b1c:	dd 1e       	adc	r13, r29
    1b1e:	5e 01       	movw	r10, r28
    1b20:	08 94       	sec
    1b22:	a1 1c       	adc	r10, r1
    1b24:	b1 1c       	adc	r11, r1
    1b26:	0e 94 d3 06 	call	0xda6	; 0xda6 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1b2a:	c4 01       	movw	r24, r8
    1b2c:	b3 01       	movw	r22, r6
    1b2e:	ae 01       	movw	r20, r28
    1b30:	4e 5f       	subi	r20, 0xFE	; 254
    1b32:	5f 4f       	sbci	r21, 0xFF	; 255
    1b34:	9e 01       	movw	r18, r28
    1b36:	2c 5f       	subi	r18, 0xFC	; 252
    1b38:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3a:	8e 01       	movw	r16, r28
    1b3c:	0a 5f       	subi	r16, 0xFA	; 250
    1b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b40:	b8 e0       	ldi	r27, 0x08	; 8
    1b42:	eb 2e       	mov	r14, r27
    1b44:	f1 2c       	mov	r15, r1
    1b46:	ec 0e       	add	r14, r28
    1b48:	fd 1e       	adc	r15, r29
    1b4a:	aa e0       	ldi	r26, 0x0A	; 10
    1b4c:	ca 2e       	mov	r12, r26
    1b4e:	d1 2c       	mov	r13, r1
    1b50:	cc 0e       	add	r12, r28
    1b52:	dd 1e       	adc	r13, r29
    1b54:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    1b58:	9e e0       	ldi	r25, 0x0E	; 14
    1b5a:	89 16       	cp	r8, r25
    1b5c:	91 04       	cpc	r9, r1
    1b5e:	59 f4       	brne	.+22     	; 0x1b76 <main+0xc92>
					brush1Motor = 0;
    1b60:	1f 82       	std	Y+7, r1	; 0x07
    1b62:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    1b64:	1d 82       	std	Y+5, r1	; 0x05
    1b66:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1b68:	80 91 2a 04 	lds	r24, 0x042A
    1b6c:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1b6e:	80 62       	ori	r24, 0x20	; 32
    1b70:	80 93 2a 04 	sts	0x042A, r24
    1b74:	12 c0       	rjmp	.+36     	; 0x1b9a <main+0xcb6>
				}
				if(state == MOVED1){
    1b76:	27 e1       	ldi	r18, 0x17	; 23
    1b78:	82 16       	cp	r8, r18
    1b7a:	91 04       	cpc	r9, r1
    1b7c:	71 f4       	brne	.+28     	; 0x1b9a <main+0xcb6>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1b7e:	80 91 2b 04 	lds	r24, 0x042B
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1b82:	61 e0       	ldi	r22, 0x01	; 1
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	7d 83       	std	Y+5, r23	; 0x05
    1b88:	6c 83       	std	Y+4, r22	; 0x04
    1b8a:	80 63       	ori	r24, 0x30	; 48
    1b8c:	80 93 2b 04 	sts	0x042B, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1b90:	80 91 27 04 	lds	r24, 0x0427
    1b94:	8e 7f       	andi	r24, 0xFE	; 254
    1b96:	80 93 27 04 	sts	0x0427, r24
				}
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1b9a:	c4 01       	movw	r24, r8
    1b9c:	b3 01       	movw	r22, r6
    1b9e:	ae 01       	movw	r20, r28
    1ba0:	4e 5f       	subi	r20, 0xFE	; 254
    1ba2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba4:	9e 01       	movw	r18, r28
    1ba6:	2c 5f       	subi	r18, 0xFC	; 252
    1ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    1baa:	8e 01       	movw	r16, r28
    1bac:	0a 5f       	subi	r16, 0xFA	; 250
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	f8 e0       	ldi	r31, 0x08	; 8
    1bb2:	ef 2e       	mov	r14, r31
    1bb4:	f1 2c       	mov	r15, r1
    1bb6:	ec 0e       	add	r14, r28
    1bb8:	fd 1e       	adc	r15, r29
    1bba:	ea e0       	ldi	r30, 0x0A	; 10
    1bbc:	ce 2e       	mov	r12, r30
    1bbe:	d1 2c       	mov	r13, r1
    1bc0:	cc 0e       	add	r12, r28
    1bc2:	dd 1e       	adc	r13, r29
    1bc4:	0e 94 47 02 	call	0x48e	; 0x48e <dry_action>
				if(state == END){
    1bc8:	73 e2       	ldi	r23, 0x23	; 35
    1bca:	87 16       	cp	r8, r23
    1bcc:	91 04       	cpc	r9, r1
    1bce:	71 f4       	brne	.+28     	; 0x1bec <main+0xd08>
					plateLoadMotor = 0;
    1bd0:	1b 82       	std	Y+3, r1	; 0x03
    1bd2:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1bd4:	80 91 2b 04 	lds	r24, 0x042B
    1bd8:	8b 7f       	andi	r24, 0xFB	; 251
    1bda:	80 93 2b 04 	sts	0x042B, r24
					if(print35 == 1){
    1bde:	22 20       	and	r2, r2
    1be0:	29 f0       	breq	.+10     	; 0x1bec <main+0xd08>
						//clear();
						serial_print("END OF CYCLE");
    1be2:	87 e6       	ldi	r24, 0x67	; 103
    1be4:	93 e0       	ldi	r25, 0x03	; 3
    1be6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    1bea:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1bec:	2a 81       	ldd	r18, Y+2	; 0x02
    1bee:	3b 81       	ldd	r19, Y+3	; 0x03
    1bf0:	0c 81       	ldd	r16, Y+4	; 0x04
    1bf2:	1d 81       	ldd	r17, Y+5	; 0x05
    1bf4:	ee 80       	ldd	r14, Y+6	; 0x06
    1bf6:	ff 80       	ldd	r15, Y+7	; 0x07
    1bf8:	c8 84       	ldd	r12, Y+8	; 0x08
    1bfa:	d9 84       	ldd	r13, Y+9	; 0x09
    1bfc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bfe:	bb 84       	ldd	r11, Y+11	; 0x0b
    1c00:	c3 01       	movw	r24, r6
    1c02:	b2 01       	movw	r22, r4
    1c04:	4d 89       	ldd	r20, Y+21	; 0x15
    1c06:	5e 89       	ldd	r21, Y+22	; 0x16
    1c08:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <motor_and_write>

				serial_check(); counter++;
    1c0c:	0e 94 1b 1c 	call	0x3836	; 0x3836 <serial_check>
				delay_ms(1);
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print("FIRST B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1c18:	84 e2       	ldi	r24, 0x24	; 36
    1c1a:	88 16       	cp	r8, r24
    1c1c:	91 04       	cpc	r9, r1
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <main+0xd3e>
    1c20:	1b c4       	rjmp	.+2102   	; 0x2458 <main+0x1574>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1c22:	08 94       	sec
    1c24:	61 1c       	adc	r6, r1
    1c26:	71 1c       	adc	r7, r1
    1c28:	b3 ce       	rjmp	.-666    	; 0x1990 <main+0xaac>
				delay_ms(1);
   		 	}
		}


		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1c30:	88 23       	and	r24, r24
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <main+0xd52>
    1c34:	3b c1       	rjmp	.+630    	; 0x1eac <main+0xfc8>
    1c36:	82 e0       	ldi	r24, 0x02	; 2
    1c38:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1c3c:	88 23       	and	r24, r24
    1c3e:	09 f0       	breq	.+2      	; 0x1c42 <main+0xd5e>
    1c40:	35 c1       	rjmp	.+618    	; 0x1eac <main+0xfc8>
			lcd_goto_xy(7,0);
    1c42:	87 e0       	ldi	r24, 0x07	; 7
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
			serial_print("SECOND B");
    1c4a:	84 e7       	ldi	r24, 0x74	; 116
    1c4c:	93 e0       	ldi	r25, 0x03	; 3
    1c4e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	9d 83       	std	Y+5, r25	; 0x05
    1c58:	8c 83       	std	Y+4, r24	; 0x04
    1c5a:	80 91 2b 04 	lds	r24, 0x042B
    1c5e:	80 62       	ori	r24, 0x20	; 32
    1c60:	80 93 2b 04 	sts	0x042B, r24
    1c64:	33 24       	eor	r3, r3
    1c66:	33 94       	inc	r3
    1c68:	88 24       	eor	r8, r8
    1c6a:	99 24       	eor	r9, r9
    1c6c:	66 24       	eor	r6, r6
    1c6e:	77 24       	eor	r7, r7
    1c70:	44 24       	eor	r4, r4
    1c72:	55 24       	eor	r5, r5
    1c74:	1f 86       	std	Y+15, r1	; 0x0f
    1c76:	1e 86       	std	Y+14, r1	; 0x0e
    1c78:	22 24       	eor	r2, r2
    1c7a:	23 94       	inc	r2
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1c7c:	84 e4       	ldi	r24, 0x44	; 68
    1c7e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1c88:	85 e4       	ldi	r24, 0x45	; 69
    1c8a:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1c8e:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1c92:	80 93 26 04 	sts	0x0426, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1c96:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1c9a:	80 93 29 04 	sts	0x0429, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1c9e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    1ca2:	81 14       	cp	r8, r1
    1ca4:	91 04       	cpc	r9, r1
    1ca6:	b1 f0       	breq	.+44     	; 0x1cd4 <main+0xdf0>
    1ca8:	33 20       	and	r3, r3
    1caa:	a1 f0       	breq	.+40     	; 0x1cd4 <main+0xdf0>
					lcd_goto_xy(6,1);
    1cac:	86 e0       	ldi	r24, 0x06	; 6
    1cae:	61 e0       	ldi	r22, 0x01	; 1
    1cb0:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
					serial_print("     ");
    1cb4:	8a e5       	ldi	r24, 0x5A	; 90
    1cb6:	93 e0       	ldi	r25, 0x03	; 3
    1cb8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
					lcd_goto_xy(0,1);
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
					serial_print("STATE ");
    1cc4:	80 e6       	ldi	r24, 0x60	; 96
    1cc6:	93 e0       	ldi	r25, 0x03	; 3
    1cc8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
					serial_print(state);
    1ccc:	c4 01       	movw	r24, r8
    1cce:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    1cd2:	33 24       	eor	r3, r3
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1cd4:	c3 01       	movw	r24, r6
    1cd6:	be 01       	movw	r22, r28
    1cd8:	64 5f       	subi	r22, 0xF4	; 244
    1cda:	7f 4f       	sbci	r23, 0xFF	; 255
    1cdc:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    1ce0:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1ce2:	c4 01       	movw	r24, r8
    1ce4:	a3 01       	movw	r20, r6
    1ce6:	92 01       	movw	r18, r4
    1ce8:	0e 94 55 03 	call	0x6aa	; 0x6aa <init_trans>
    1cec:	88 23       	and	r24, r24
    1cee:	31 f0       	breq	.+12     	; 0x1cfc <main+0xe18>
					buttonTriggered = false;
					state ++;
    1cf0:	08 94       	sec
    1cf2:	81 1c       	adc	r8, r1
    1cf4:	91 1c       	adc	r9, r1
    1cf6:	23 01       	movw	r4, r6
    1cf8:	33 24       	eor	r3, r3
    1cfa:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1cfc:	96 e0       	ldi	r25, 0x06	; 6
    1cfe:	89 16       	cp	r8, r25
    1d00:	91 04       	cpc	r9, r1
    1d02:	e1 f4       	brne	.+56     	; 0x1d3c <main+0xe58>
    1d04:	a3 01       	movw	r20, r6
    1d06:	44 19       	sub	r20, r4
    1d08:	55 09       	sbc	r21, r5
    1d0a:	20 91 be 03 	lds	r18, 0x03BE
    1d0e:	30 91 bf 03 	lds	r19, 0x03BF
    1d12:	80 91 a2 03 	lds	r24, 0x03A2
    1d16:	90 91 a3 03 	lds	r25, 0x03A3
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	26 9f       	mul	r18, r22
    1d1e:	c0 01       	movw	r24, r0
    1d20:	27 9f       	mul	r18, r23
    1d22:	90 0d       	add	r25, r0
    1d24:	36 9f       	mul	r19, r22
    1d26:	90 0d       	add	r25, r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	84 17       	cp	r24, r20
    1d2c:	95 07       	cpc	r25, r21
    1d2e:	34 f4       	brge	.+12     	; 0x1d3c <main+0xe58>
    1d30:	23 01       	movw	r4, r6
    1d32:	33 24       	eor	r3, r3
    1d34:	33 94       	inc	r3
    1d36:	bf e0       	ldi	r27, 0x0F	; 15
    1d38:	8b 2e       	mov	r8, r27
    1d3a:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}

				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    1d3c:	c4 01       	movw	r24, r8
    1d3e:	b3 01       	movw	r22, r6
    1d40:	a2 01       	movw	r20, r4
    1d42:	0e 94 50 04 	call	0x8a0	; 0x8a0 <secondB_trans>
    1d46:	88 23       	and	r24, r24
    1d48:	31 f0       	breq	.+12     	; 0x1d56 <main+0xe72>
					state ++;
    1d4a:	08 94       	sec
    1d4c:	81 1c       	adc	r8, r1
    1d4e:	91 1c       	adc	r9, r1
    1d50:	23 01       	movw	r4, r6
    1d52:	33 24       	eor	r3, r3
    1d54:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1d56:	c4 01       	movw	r24, r8
    1d58:	b3 01       	movw	r22, r6
    1d5a:	a2 01       	movw	r20, r4
    1d5c:	2e 85       	ldd	r18, Y+14	; 0x0e
    1d5e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1d60:	0e 94 05 05 	call	0xa0a	; 0xa0a <dry_trans>
    1d64:	88 23       	and	r24, r24
    1d66:	79 f0       	breq	.+30     	; 0x1d86 <main+0xea2>
					state ++;
    1d68:	08 94       	sec
    1d6a:	81 1c       	adc	r8, r1
    1d6c:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    1d6e:	7a e1       	ldi	r23, 0x1A	; 26
    1d70:	87 16       	cp	r8, r23
    1d72:	91 04       	cpc	r9, r1
    1d74:	29 f4       	brne	.+10     	; 0x1d80 <main+0xe9c>
    1d76:	7f 86       	std	Y+15, r7	; 0x0f
    1d78:	6e 86       	std	Y+14, r6	; 0x0e
    1d7a:	33 24       	eor	r3, r3
    1d7c:	33 94       	inc	r3
    1d7e:	0f c0       	rjmp	.+30     	; 0x1d9e <main+0xeba>
    1d80:	23 01       	movw	r4, r6
    1d82:	33 24       	eor	r3, r3
    1d84:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    1d86:	83 e2       	ldi	r24, 0x23	; 35
    1d88:	88 16       	cp	r8, r24
    1d8a:	91 04       	cpc	r9, r1
    1d8c:	41 f4       	brne	.+16     	; 0x1d9e <main+0xeba>
    1d8e:	c3 01       	movw	r24, r6
    1d90:	84 19       	sub	r24, r4
    1d92:	95 09       	sbc	r25, r5
    1d94:	0b 97       	sbiw	r24, 0x0b	; 11
    1d96:	1c f0       	brlt	.+6      	; 0x1d9e <main+0xeba>
    1d98:	a4 e2       	ldi	r26, 0x24	; 36
    1d9a:	8a 2e       	mov	r8, r26
    1d9c:	91 2c       	mov	r9, r1
				}


				//state actions
				
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1d9e:	c4 01       	movw	r24, r8
    1da0:	b3 01       	movw	r22, r6
    1da2:	ae 01       	movw	r20, r28
    1da4:	4e 5f       	subi	r20, 0xFE	; 254
    1da6:	5f 4f       	sbci	r21, 0xFF	; 255
    1da8:	9e 01       	movw	r18, r28
    1daa:	2c 5f       	subi	r18, 0xFC	; 252
    1dac:	3f 4f       	sbci	r19, 0xFF	; 255
    1dae:	8e 01       	movw	r16, r28
    1db0:	0a 5f       	subi	r16, 0xFA	; 250
    1db2:	1f 4f       	sbci	r17, 0xFF	; 255
    1db4:	f8 e0       	ldi	r31, 0x08	; 8
    1db6:	ef 2e       	mov	r14, r31
    1db8:	f1 2c       	mov	r15, r1
    1dba:	ec 0e       	add	r14, r28
    1dbc:	fd 1e       	adc	r15, r29
    1dbe:	ea e0       	ldi	r30, 0x0A	; 10
    1dc0:	ce 2e       	mov	r12, r30
    1dc2:	d1 2c       	mov	r13, r1
    1dc4:	cc 0e       	add	r12, r28
    1dc6:	dd 1e       	adc	r13, r29
    1dc8:	5e 01       	movw	r10, r28
    1dca:	08 94       	sec
    1dcc:	a1 1c       	adc	r10, r1
    1dce:	b1 1c       	adc	r11, r1
    1dd0:	0e 94 d3 06 	call	0xda6	; 0xda6 <init_action>
				if(state == MOVEC1){
    1dd4:	96 e0       	ldi	r25, 0x06	; 6
    1dd6:	89 16       	cp	r8, r25
    1dd8:	91 04       	cpc	r9, r1
    1dda:	49 f4       	brne	.+18     	; 0x1dee <main+0xf0a>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1ddc:	80 91 2b 04 	lds	r24, 0x042B
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1de0:	21 e0       	ldi	r18, 0x01	; 1
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	3d 83       	std	Y+5, r19	; 0x05
    1de6:	2c 83       	std	Y+4, r18	; 0x04
    1de8:	80 63       	ori	r24, 0x30	; 48
    1dea:	80 93 2b 04 	sts	0x042B, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1dee:	c4 01       	movw	r24, r8
    1df0:	b3 01       	movw	r22, r6
    1df2:	ae 01       	movw	r20, r28
    1df4:	4e 5f       	subi	r20, 0xFE	; 254
    1df6:	5f 4f       	sbci	r21, 0xFF	; 255
    1df8:	9e 01       	movw	r18, r28
    1dfa:	2c 5f       	subi	r18, 0xFC	; 252
    1dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfe:	8e 01       	movw	r16, r28
    1e00:	0a 5f       	subi	r16, 0xFA	; 250
    1e02:	1f 4f       	sbci	r17, 0xFF	; 255
    1e04:	b8 e0       	ldi	r27, 0x08	; 8
    1e06:	eb 2e       	mov	r14, r27
    1e08:	f1 2c       	mov	r15, r1
    1e0a:	ec 0e       	add	r14, r28
    1e0c:	fd 1e       	adc	r15, r29
    1e0e:	aa e0       	ldi	r26, 0x0A	; 10
    1e10:	ca 2e       	mov	r12, r26
    1e12:	d1 2c       	mov	r13, r1
    1e14:	cc 0e       	add	r12, r28
    1e16:	dd 1e       	adc	r13, r29
    1e18:	0e 94 c8 01 	call	0x390	; 0x390 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1e1c:	c4 01       	movw	r24, r8
    1e1e:	b3 01       	movw	r22, r6
    1e20:	ae 01       	movw	r20, r28
    1e22:	4e 5f       	subi	r20, 0xFE	; 254
    1e24:	5f 4f       	sbci	r21, 0xFF	; 255
    1e26:	9e 01       	movw	r18, r28
    1e28:	2c 5f       	subi	r18, 0xFC	; 252
    1e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2c:	8e 01       	movw	r16, r28
    1e2e:	0a 5f       	subi	r16, 0xFA	; 250
    1e30:	1f 4f       	sbci	r17, 0xFF	; 255
    1e32:	f8 e0       	ldi	r31, 0x08	; 8
    1e34:	ef 2e       	mov	r14, r31
    1e36:	f1 2c       	mov	r15, r1
    1e38:	ec 0e       	add	r14, r28
    1e3a:	fd 1e       	adc	r15, r29
    1e3c:	ea e0       	ldi	r30, 0x0A	; 10
    1e3e:	ce 2e       	mov	r12, r30
    1e40:	d1 2c       	mov	r13, r1
    1e42:	cc 0e       	add	r12, r28
    1e44:	dd 1e       	adc	r13, r29
    1e46:	0e 94 47 02 	call	0x48e	; 0x48e <dry_action>
				if(state == END){
    1e4a:	33 e2       	ldi	r19, 0x23	; 35
    1e4c:	83 16       	cp	r8, r19
    1e4e:	91 04       	cpc	r9, r1
    1e50:	71 f4       	brne	.+28     	; 0x1e6e <main+0xf8a>
					plateLoadMotor = 0;
    1e52:	1b 82       	std	Y+3, r1	; 0x03
    1e54:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1e56:	80 91 2b 04 	lds	r24, 0x042B
    1e5a:	8b 7f       	andi	r24, 0xFB	; 251
    1e5c:	80 93 2b 04 	sts	0x042B, r24
					if(print35 == 1){
    1e60:	22 20       	and	r2, r2
    1e62:	29 f0       	breq	.+10     	; 0x1e6e <main+0xf8a>
						//clear();
						serial_print("END OF CYCLE");
    1e64:	87 e6       	ldi	r24, 0x67	; 103
    1e66:	93 e0       	ldi	r25, 0x03	; 3
    1e68:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    1e6c:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1e6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e70:	3b 81       	ldd	r19, Y+3	; 0x03
    1e72:	0c 81       	ldd	r16, Y+4	; 0x04
    1e74:	1d 81       	ldd	r17, Y+5	; 0x05
    1e76:	ee 80       	ldd	r14, Y+6	; 0x06
    1e78:	ff 80       	ldd	r15, Y+7	; 0x07
    1e7a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e7c:	d9 84       	ldd	r13, Y+9	; 0x09
    1e7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e80:	bb 84       	ldd	r11, Y+11	; 0x0b
    1e82:	c3 01       	movw	r24, r6
    1e84:	b2 01       	movw	r22, r4
    1e86:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e88:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e8a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <motor_and_write>

				serial_check(); counter++;
    1e8e:	0e 94 1b 1c 	call	0x3836	; 0x3836 <serial_check>
				delay_ms(1);
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>

		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print("SECOND B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1e9a:	64 e2       	ldi	r22, 0x24	; 36
    1e9c:	86 16       	cp	r8, r22
    1e9e:	91 04       	cpc	r9, r1
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <main+0xfc0>
    1ea2:	da c2       	rjmp	.+1460   	; 0x2458 <main+0x1574>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1ea4:	08 94       	sec
    1ea6:	61 1c       	adc	r6, r1
    1ea8:	71 1c       	adc	r7, r1
    1eaa:	e8 ce       	rjmp	.-560    	; 0x1c7c <main+0xd98>
				delay_ms(1);
   		 	}
		}


		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1eb2:	88 23       	and	r24, r24
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <main+0xfd4>
    1eb6:	5f c1       	rjmp	.+702    	; 0x2176 <main+0x1292>
    1eb8:	82 e0       	ldi	r24, 0x02	; 2
    1eba:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1ebe:	88 23       	and	r24, r24
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <main+0xfe0>
    1ec2:	59 c1       	rjmp	.+690    	; 0x2176 <main+0x1292>
			lcd_goto_xy(7,0);
    1ec4:	87 e0       	ldi	r24, 0x07	; 7
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
			serial_print("BOTH B");
    1ecc:	8d e7       	ldi	r24, 0x7D	; 125
    1ece:	93 e0       	ldi	r25, 0x03	; 3
    1ed0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	9d 83       	std	Y+5, r25	; 0x05
    1eda:	8c 83       	std	Y+4, r24	; 0x04
    1edc:	80 91 2b 04 	lds	r24, 0x042B
    1ee0:	80 62       	ori	r24, 0x20	; 32
    1ee2:	80 93 2b 04 	sts	0x042B, r24
    1ee6:	33 24       	eor	r3, r3
    1ee8:	33 94       	inc	r3
    1eea:	88 24       	eor	r8, r8
    1eec:	99 24       	eor	r9, r9
    1eee:	66 24       	eor	r6, r6
    1ef0:	77 24       	eor	r7, r7
    1ef2:	44 24       	eor	r4, r4
    1ef4:	55 24       	eor	r5, r5
    1ef6:	19 8a       	std	Y+17, r1	; 0x11
    1ef8:	18 8a       	std	Y+16, r1	; 0x10
    1efa:	22 24       	eor	r2, r2
    1efc:	23 94       	inc	r2
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1efe:	84 e4       	ldi	r24, 0x44	; 68
    1f00:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1f0a:	85 e4       	ldi	r24, 0x45	; 69
    1f0c:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1f10:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1f14:	80 93 26 04 	sts	0x0426, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1f18:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1f1c:	80 93 29 04 	sts	0x0429, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1f20:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    1f24:	81 14       	cp	r8, r1
    1f26:	91 04       	cpc	r9, r1
    1f28:	b1 f0       	breq	.+44     	; 0x1f56 <main+0x1072>
    1f2a:	33 20       	and	r3, r3
    1f2c:	a1 f0       	breq	.+40     	; 0x1f56 <main+0x1072>
					lcd_goto_xy(6,1);
    1f2e:	86 e0       	ldi	r24, 0x06	; 6
    1f30:	61 e0       	ldi	r22, 0x01	; 1
    1f32:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
					serial_print("       ");
    1f36:	84 e8       	ldi	r24, 0x84	; 132
    1f38:	93 e0       	ldi	r25, 0x03	; 3
    1f3a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
					lcd_goto_xy(0,1);
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	61 e0       	ldi	r22, 0x01	; 1
    1f42:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
					serial_print("STATE ");
    1f46:	80 e6       	ldi	r24, 0x60	; 96
    1f48:	93 e0       	ldi	r25, 0x03	; 3
    1f4a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
					serial_print(state);
    1f4e:	c4 01       	movw	r24, r8
    1f50:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    1f54:	33 24       	eor	r3, r3
					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1f56:	c3 01       	movw	r24, r6
    1f58:	be 01       	movw	r22, r28
    1f5a:	64 5f       	subi	r22, 0xF4	; 244
    1f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    1f62:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1f64:	c4 01       	movw	r24, r8
    1f66:	a3 01       	movw	r20, r6
    1f68:	92 01       	movw	r18, r4
    1f6a:	0e 94 55 03 	call	0x6aa	; 0x6aa <init_trans>
    1f6e:	88 23       	and	r24, r24
    1f70:	31 f0       	breq	.+12     	; 0x1f7e <main+0x109a>
					buttonTriggered = false;
					state ++;
    1f72:	08 94       	sec
    1f74:	81 1c       	adc	r8, r1
    1f76:	91 1c       	adc	r9, r1
    1f78:	23 01       	movw	r4, r6
    1f7a:	33 24       	eor	r3, r3
    1f7c:	33 94       	inc	r3
					printVar = true;
				}

				
				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    1f7e:	c4 01       	movw	r24, r8
    1f80:	b3 01       	movw	r22, r6
    1f82:	a2 01       	movw	r20, r4
    1f84:	0e 94 aa 03 	call	0x754	; 0x754 <firstB_trans>
    1f88:	88 23       	and	r24, r24
    1f8a:	71 f0       	breq	.+28     	; 0x1fa8 <main+0x10c4>
					state ++;
    1f8c:	08 94       	sec
    1f8e:	81 1c       	adc	r8, r1
    1f90:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    1f92:	7a e0       	ldi	r23, 0x0A	; 10
    1f94:	87 16       	cp	r8, r23
    1f96:	91 04       	cpc	r9, r1
    1f98:	e1 f0       	breq	.+56     	; 0x1fd2 <main+0x10ee>
    1f9a:	8d e0       	ldi	r24, 0x0D	; 13
    1f9c:	88 16       	cp	r8, r24
    1f9e:	91 04       	cpc	r9, r1
    1fa0:	c1 f0       	breq	.+48     	; 0x1fd2 <main+0x10ee>
    1fa2:	23 01       	movw	r4, r6
    1fa4:	33 24       	eor	r3, r3
    1fa6:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    1fa8:	9e e0       	ldi	r25, 0x0E	; 14
    1faa:	89 16       	cp	r8, r25
    1fac:	91 04       	cpc	r9, r1
    1fae:	99 f4       	brne	.+38     	; 0x1fd6 <main+0x10f2>
    1fb0:	93 01       	movw	r18, r6
    1fb2:	24 19       	sub	r18, r4
    1fb4:	35 09       	sbc	r19, r5
    1fb6:	80 91 90 03 	lds	r24, 0x0390
    1fba:	90 91 91 03 	lds	r25, 0x0391
    1fbe:	82 17       	cp	r24, r18
    1fc0:	93 07       	cpc	r25, r19
    1fc2:	4c f4       	brge	.+18     	; 0x1fd6 <main+0x10f2>
    1fc4:	23 01       	movw	r4, r6
    1fc6:	33 24       	eor	r3, r3
    1fc8:	33 94       	inc	r3
    1fca:	0f e0       	ldi	r16, 0x0F	; 15
    1fcc:	80 2e       	mov	r8, r16
    1fce:	91 2c       	mov	r9, r1
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <main+0x10f2>
    1fd2:	33 24       	eor	r3, r3
    1fd4:	33 94       	inc	r3
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    1fd6:	c4 01       	movw	r24, r8
    1fd8:	b3 01       	movw	r22, r6
    1fda:	a2 01       	movw	r20, r4
    1fdc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <secondB_trans>
    1fe0:	88 23       	and	r24, r24
    1fe2:	31 f0       	breq	.+12     	; 0x1ff0 <main+0x110c>
					state ++;
    1fe4:	08 94       	sec
    1fe6:	81 1c       	adc	r8, r1
    1fe8:	91 1c       	adc	r9, r1
    1fea:	23 01       	movw	r4, r6
    1fec:	33 24       	eor	r3, r3
    1fee:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1ff0:	c4 01       	movw	r24, r8
    1ff2:	b3 01       	movw	r22, r6
    1ff4:	a2 01       	movw	r20, r4
    1ff6:	28 89       	ldd	r18, Y+16	; 0x10
    1ff8:	39 89       	ldd	r19, Y+17	; 0x11
    1ffa:	0e 94 05 05 	call	0xa0a	; 0xa0a <dry_trans>
    1ffe:	88 23       	and	r24, r24
    2000:	79 f0       	breq	.+30     	; 0x2020 <main+0x113c>
					state ++;
    2002:	08 94       	sec
    2004:	81 1c       	adc	r8, r1
    2006:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    2008:	2a e1       	ldi	r18, 0x1A	; 26
    200a:	82 16       	cp	r8, r18
    200c:	91 04       	cpc	r9, r1
    200e:	29 f4       	brne	.+10     	; 0x201a <main+0x1136>
    2010:	79 8a       	std	Y+17, r7	; 0x11
    2012:	68 8a       	std	Y+16, r6	; 0x10
    2014:	33 24       	eor	r3, r3
    2016:	33 94       	inc	r3
    2018:	0f c0       	rjmp	.+30     	; 0x2038 <main+0x1154>
    201a:	23 01       	movw	r4, r6
    201c:	33 24       	eor	r3, r3
    201e:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    2020:	33 e2       	ldi	r19, 0x23	; 35
    2022:	83 16       	cp	r8, r19
    2024:	91 04       	cpc	r9, r1
    2026:	41 f4       	brne	.+16     	; 0x2038 <main+0x1154>
    2028:	c3 01       	movw	r24, r6
    202a:	84 19       	sub	r24, r4
    202c:	95 09       	sbc	r25, r5
    202e:	0b 97       	sbiw	r24, 0x0b	; 11
    2030:	1c f0       	brlt	.+6      	; 0x2038 <main+0x1154>
    2032:	14 e2       	ldi	r17, 0x24	; 36
    2034:	81 2e       	mov	r8, r17
    2036:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    2038:	c4 01       	movw	r24, r8
    203a:	b3 01       	movw	r22, r6
    203c:	ae 01       	movw	r20, r28
    203e:	4e 5f       	subi	r20, 0xFE	; 254
    2040:	5f 4f       	sbci	r21, 0xFF	; 255
    2042:	9e 01       	movw	r18, r28
    2044:	2c 5f       	subi	r18, 0xFC	; 252
    2046:	3f 4f       	sbci	r19, 0xFF	; 255
    2048:	8e 01       	movw	r16, r28
    204a:	0a 5f       	subi	r16, 0xFA	; 250
    204c:	1f 4f       	sbci	r17, 0xFF	; 255
    204e:	b8 e0       	ldi	r27, 0x08	; 8
    2050:	eb 2e       	mov	r14, r27
    2052:	f1 2c       	mov	r15, r1
    2054:	ec 0e       	add	r14, r28
    2056:	fd 1e       	adc	r15, r29
    2058:	aa e0       	ldi	r26, 0x0A	; 10
    205a:	ca 2e       	mov	r12, r26
    205c:	d1 2c       	mov	r13, r1
    205e:	cc 0e       	add	r12, r28
    2060:	dd 1e       	adc	r13, r29
    2062:	5e 01       	movw	r10, r28
    2064:	08 94       	sec
    2066:	a1 1c       	adc	r10, r1
    2068:	b1 1c       	adc	r11, r1
    206a:	0e 94 d3 06 	call	0xda6	; 0xda6 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    206e:	c4 01       	movw	r24, r8
    2070:	b3 01       	movw	r22, r6
    2072:	ae 01       	movw	r20, r28
    2074:	4e 5f       	subi	r20, 0xFE	; 254
    2076:	5f 4f       	sbci	r21, 0xFF	; 255
    2078:	9e 01       	movw	r18, r28
    207a:	2c 5f       	subi	r18, 0xFC	; 252
    207c:	3f 4f       	sbci	r19, 0xFF	; 255
    207e:	8e 01       	movw	r16, r28
    2080:	0a 5f       	subi	r16, 0xFA	; 250
    2082:	1f 4f       	sbci	r17, 0xFF	; 255
    2084:	f8 e0       	ldi	r31, 0x08	; 8
    2086:	ef 2e       	mov	r14, r31
    2088:	f1 2c       	mov	r15, r1
    208a:	ec 0e       	add	r14, r28
    208c:	fd 1e       	adc	r15, r29
    208e:	ea e0       	ldi	r30, 0x0A	; 10
    2090:	ce 2e       	mov	r12, r30
    2092:	d1 2c       	mov	r13, r1
    2094:	cc 0e       	add	r12, r28
    2096:	dd 1e       	adc	r13, r29
    2098:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    209c:	6e e0       	ldi	r22, 0x0E	; 14
    209e:	86 16       	cp	r8, r22
    20a0:	91 04       	cpc	r9, r1
    20a2:	51 f4       	brne	.+20     	; 0x20b8 <main+0x11d4>
					brush1Motor = 0;
    20a4:	1f 82       	std	Y+7, r1	; 0x07
    20a6:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    20a8:	1d 82       	std	Y+5, r1	; 0x05
    20aa:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    20ac:	80 91 2a 04 	lds	r24, 0x042A
    20b0:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    20b2:	80 62       	ori	r24, 0x20	; 32
    20b4:	80 93 2a 04 	sts	0x042A, r24
				}
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    20b8:	c4 01       	movw	r24, r8
    20ba:	b3 01       	movw	r22, r6
    20bc:	ae 01       	movw	r20, r28
    20be:	4e 5f       	subi	r20, 0xFE	; 254
    20c0:	5f 4f       	sbci	r21, 0xFF	; 255
    20c2:	9e 01       	movw	r18, r28
    20c4:	2c 5f       	subi	r18, 0xFC	; 252
    20c6:	3f 4f       	sbci	r19, 0xFF	; 255
    20c8:	8e 01       	movw	r16, r28
    20ca:	0a 5f       	subi	r16, 0xFA	; 250
    20cc:	1f 4f       	sbci	r17, 0xFF	; 255
    20ce:	b8 e0       	ldi	r27, 0x08	; 8
    20d0:	eb 2e       	mov	r14, r27
    20d2:	f1 2c       	mov	r15, r1
    20d4:	ec 0e       	add	r14, r28
    20d6:	fd 1e       	adc	r15, r29
    20d8:	aa e0       	ldi	r26, 0x0A	; 10
    20da:	ca 2e       	mov	r12, r26
    20dc:	d1 2c       	mov	r13, r1
    20de:	cc 0e       	add	r12, r28
    20e0:	dd 1e       	adc	r13, r29
    20e2:	0e 94 c8 01 	call	0x390	; 0x390 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    20e6:	c4 01       	movw	r24, r8
    20e8:	b3 01       	movw	r22, r6
    20ea:	ae 01       	movw	r20, r28
    20ec:	4e 5f       	subi	r20, 0xFE	; 254
    20ee:	5f 4f       	sbci	r21, 0xFF	; 255
    20f0:	9e 01       	movw	r18, r28
    20f2:	2c 5f       	subi	r18, 0xFC	; 252
    20f4:	3f 4f       	sbci	r19, 0xFF	; 255
    20f6:	8e 01       	movw	r16, r28
    20f8:	0a 5f       	subi	r16, 0xFA	; 250
    20fa:	1f 4f       	sbci	r17, 0xFF	; 255
    20fc:	f8 e0       	ldi	r31, 0x08	; 8
    20fe:	ef 2e       	mov	r14, r31
    2100:	f1 2c       	mov	r15, r1
    2102:	ec 0e       	add	r14, r28
    2104:	fd 1e       	adc	r15, r29
    2106:	ea e0       	ldi	r30, 0x0A	; 10
    2108:	ce 2e       	mov	r12, r30
    210a:	d1 2c       	mov	r13, r1
    210c:	cc 0e       	add	r12, r28
    210e:	dd 1e       	adc	r13, r29
    2110:	0e 94 47 02 	call	0x48e	; 0x48e <dry_action>
				if(state == END){
    2114:	73 e2       	ldi	r23, 0x23	; 35
    2116:	87 16       	cp	r8, r23
    2118:	91 04       	cpc	r9, r1
    211a:	71 f4       	brne	.+28     	; 0x2138 <main+0x1254>
					plateLoadMotor = 0;
    211c:	1b 82       	std	Y+3, r1	; 0x03
    211e:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2120:	80 91 2b 04 	lds	r24, 0x042B
    2124:	8b 7f       	andi	r24, 0xFB	; 251
    2126:	80 93 2b 04 	sts	0x042B, r24
					if(print35 == 1){
    212a:	22 20       	and	r2, r2
    212c:	29 f0       	breq	.+10     	; 0x2138 <main+0x1254>
						//clear();
						serial_print("END OF CYCLE");
    212e:	87 e6       	ldi	r24, 0x67	; 103
    2130:	93 e0       	ldi	r25, 0x03	; 3
    2132:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    2136:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    2138:	2a 81       	ldd	r18, Y+2	; 0x02
    213a:	3b 81       	ldd	r19, Y+3	; 0x03
    213c:	0c 81       	ldd	r16, Y+4	; 0x04
    213e:	1d 81       	ldd	r17, Y+5	; 0x05
    2140:	ee 80       	ldd	r14, Y+6	; 0x06
    2142:	ff 80       	ldd	r15, Y+7	; 0x07
    2144:	c8 84       	ldd	r12, Y+8	; 0x08
    2146:	d9 84       	ldd	r13, Y+9	; 0x09
    2148:	aa 84       	ldd	r10, Y+10	; 0x0a
    214a:	bb 84       	ldd	r11, Y+11	; 0x0b
    214c:	c3 01       	movw	r24, r6
    214e:	b2 01       	movw	r22, r4
    2150:	48 89       	ldd	r20, Y+16	; 0x10
    2152:	59 89       	ldd	r21, Y+17	; 0x11
    2154:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <motor_and_write>

				serial_check(); counter++;
    2158:	0e 94 1b 1c 	call	0x3836	; 0x3836 <serial_check>
				delay_ms(1);
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>

		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print("BOTH B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    2164:	84 e2       	ldi	r24, 0x24	; 36
    2166:	88 16       	cp	r8, r24
    2168:	91 04       	cpc	r9, r1
    216a:	09 f4       	brne	.+2      	; 0x216e <main+0x128a>
    216c:	75 c1       	rjmp	.+746    	; 0x2458 <main+0x1574>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    216e:	08 94       	sec
    2170:	61 1c       	adc	r6, r1
    2172:	71 1c       	adc	r7, r1
    2174:	c4 ce       	rjmp	.-632    	; 0x1efe <main+0x101a>
				delay_ms(1);
   		 	}
		}

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    217c:	88 23       	and	r24, r24
    217e:	09 f4       	brne	.+2      	; 0x2182 <main+0x129e>
    2180:	6b c1       	rjmp	.+726    	; 0x2458 <main+0x1574>
    2182:	82 e0       	ldi	r24, 0x02	; 2
    2184:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    2188:	88 23       	and	r24, r24
    218a:	09 f4       	brne	.+2      	; 0x218e <main+0x12aa>
    218c:	65 c1       	rjmp	.+714    	; 0x2458 <main+0x1574>
			lcd_goto_xy(7,0);
    218e:	87 e0       	ldi	r24, 0x07	; 7
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
			serial_print("DEBUG");
    2196:	8c e6       	ldi	r24, 0x6C	; 108
    2198:	91 e0       	ldi	r25, 0x01	; 1
    219a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	9d 83       	std	Y+5, r25	; 0x05
    21a4:	8c 83       	std	Y+4, r24	; 0x04
    21a6:	80 91 2b 04 	lds	r24, 0x042B
    21aa:	80 62       	ori	r24, 0x20	; 32
    21ac:	80 93 2b 04 	sts	0x042B, r24
    21b0:	33 24       	eor	r3, r3
    21b2:	33 94       	inc	r3
    21b4:	88 24       	eor	r8, r8
    21b6:	99 24       	eor	r9, r9
    21b8:	66 24       	eor	r6, r6
    21ba:	77 24       	eor	r7, r7
    21bc:	18 8e       	std	Y+24, r1	; 0x18
    21be:	1f 8a       	std	Y+23, r1	; 0x17
    21c0:	44 24       	eor	r4, r4
    21c2:	55 24       	eor	r5, r5
    21c4:	22 24       	eor	r2, r2
    21c6:	23 94       	inc	r2
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    21c8:	84 e4       	ldi	r24, 0x44	; 68
    21ca:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    21d4:	85 e4       	ldi	r24, 0x45	; 69
    21d6:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    21da:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    21de:	80 93 26 04 	sts	0x0426, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    21e2:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    21e6:	80 93 29 04 	sts	0x0429, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    21ea:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    21ee:	81 14       	cp	r8, r1
    21f0:	91 04       	cpc	r9, r1
    21f2:	b1 f0       	breq	.+44     	; 0x2220 <main+0x133c>
    21f4:	33 20       	and	r3, r3
    21f6:	a1 f0       	breq	.+40     	; 0x2220 <main+0x133c>
					lcd_goto_xy(6,1);
    21f8:	86 e0       	ldi	r24, 0x06	; 6
    21fa:	61 e0       	ldi	r22, 0x01	; 1
    21fc:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
					serial_print("     ");
    2200:	8a e5       	ldi	r24, 0x5A	; 90
    2202:	93 e0       	ldi	r25, 0x03	; 3
    2204:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
					lcd_goto_xy(0,1);
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	61 e0       	ldi	r22, 0x01	; 1
    220c:	0e 94 1c 14 	call	0x2838	; 0x2838 <lcd_goto_xy>
					serial_print("STATE ");
    2210:	80 e6       	ldi	r24, 0x60	; 96
    2212:	93 e0       	ldi	r25, 0x03	; 3
    2214:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
					serial_print(state);
    2218:	c4 01       	movw	r24, r8
    221a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    221e:	33 24       	eor	r3, r3
					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    2220:	c3 01       	movw	r24, r6
    2222:	be 01       	movw	r22, r28
    2224:	64 5f       	subi	r22, 0xF4	; 244
    2226:	7f 4f       	sbci	r23, 0xFF	; 255
    2228:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    222c:	18 2f       	mov	r17, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    222e:	c4 01       	movw	r24, r8
    2230:	61 2f       	mov	r22, r17
    2232:	a3 01       	movw	r20, r6
    2234:	92 01       	movw	r18, r4
    2236:	0e 94 55 03 	call	0x6aa	; 0x6aa <init_trans>
    223a:	88 23       	and	r24, r24
    223c:	39 f0       	breq	.+14     	; 0x224c <main+0x1368>
    223e:	23 01       	movw	r4, r6
    2240:	33 24       	eor	r3, r3
    2242:	33 94       	inc	r3
    2244:	35 e2       	ldi	r19, 0x25	; 37
    2246:	83 2e       	mov	r8, r19
    2248:	91 2c       	mov	r9, r1
    224a:	10 e0       	ldi	r17, 0x00	; 0
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    224c:	c4 01       	movw	r24, r8
    224e:	b3 01       	movw	r22, r6
    2250:	a2 01       	movw	r20, r4
    2252:	0e 94 aa 03 	call	0x754	; 0x754 <firstB_trans>
    2256:	88 23       	and	r24, r24
    2258:	71 f4       	brne	.+28     	; 0x2276 <main+0x1392>
					state = WAIT;
					if(state != B1STOP1 && state != CLEAN1_3)
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    225a:	9e e0       	ldi	r25, 0x0E	; 14
    225c:	89 16       	cp	r8, r25
    225e:	91 04       	cpc	r9, r1
    2260:	81 f4       	brne	.+32     	; 0x2282 <main+0x139e>
    2262:	93 01       	movw	r18, r6
    2264:	24 19       	sub	r18, r4
    2266:	35 09       	sbc	r19, r5
    2268:	80 91 90 03 	lds	r24, 0x0390
    226c:	90 91 91 03 	lds	r25, 0x0391
    2270:	82 17       	cp	r24, r18
    2272:	93 07       	cpc	r25, r19
    2274:	34 f4       	brge	.+12     	; 0x2282 <main+0x139e>
    2276:	23 01       	movw	r4, r6
    2278:	33 24       	eor	r3, r3
    227a:	33 94       	inc	r3
    227c:	25 e2       	ldi	r18, 0x25	; 37
    227e:	82 2e       	mov	r8, r18
    2280:	91 2c       	mov	r9, r1
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    2282:	c4 01       	movw	r24, r8
    2284:	b3 01       	movw	r22, r6
    2286:	a2 01       	movw	r20, r4
    2288:	0e 94 50 04 	call	0x8a0	; 0x8a0 <secondB_trans>
    228c:	88 23       	and	r24, r24
    228e:	31 f0       	breq	.+12     	; 0x229c <main+0x13b8>
    2290:	23 01       	movw	r4, r6
    2292:	33 24       	eor	r3, r3
    2294:	33 94       	inc	r3
    2296:	95 e2       	ldi	r25, 0x25	; 37
    2298:	89 2e       	mov	r8, r25
    229a:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}
				
				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    229c:	c4 01       	movw	r24, r8
    229e:	b3 01       	movw	r22, r6
    22a0:	a2 01       	movw	r20, r4
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	0e 94 05 05 	call	0xa0a	; 0xa0a <dry_trans>
    22aa:	88 23       	and	r24, r24
    22ac:	21 f0       	breq	.+8      	; 0x22b6 <main+0x13d2>
    22ae:	23 01       	movw	r4, r6
    22b0:	33 24       	eor	r3, r3
    22b2:	33 94       	inc	r3
    22b4:	11 c0       	rjmp	.+34     	; 0x22d8 <main+0x13f4>
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    22b6:	23 e2       	ldi	r18, 0x23	; 35
    22b8:	82 16       	cp	r8, r18
    22ba:	91 04       	cpc	r9, r1
    22bc:	49 f4       	brne	.+18     	; 0x22d0 <main+0x13ec>
    22be:	c3 01       	movw	r24, r6
    22c0:	84 19       	sub	r24, r4
    22c2:	95 09       	sbc	r25, r5
    22c4:	0b 97       	sbiw	r24, 0x0b	; 11
    22c6:	54 f1       	brlt	.+84     	; 0x231c <main+0x1438>
    22c8:	84 e2       	ldi	r24, 0x24	; 36
    22ca:	88 2e       	mov	r8, r24
    22cc:	91 2c       	mov	r9, r1
    22ce:	26 c0       	rjmp	.+76     	; 0x231c <main+0x1438>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    22d0:	35 e2       	ldi	r19, 0x25	; 37
    22d2:	83 16       	cp	r8, r19
    22d4:	91 04       	cpc	r9, r1
    22d6:	11 f5       	brne	.+68     	; 0x231c <main+0x1438>
    22d8:	11 23       	and	r17, r17
    22da:	21 f4       	brne	.+8      	; 0x22e4 <main+0x1400>
    22dc:	05 e2       	ldi	r16, 0x25	; 37
    22de:	80 2e       	mov	r8, r16
    22e0:	91 2c       	mov	r9, r1
    22e2:	12 c0       	rjmp	.+36     	; 0x2308 <main+0x1424>
					state = ++last;
    22e4:	6f 89       	ldd	r22, Y+23	; 0x17
    22e6:	78 8d       	ldd	r23, Y+24	; 0x18
    22e8:	6f 5f       	subi	r22, 0xFF	; 255
    22ea:	7f 4f       	sbci	r23, 0xFF	; 255
    22ec:	78 8f       	std	Y+24, r23	; 0x18
    22ee:	6f 8b       	std	Y+23, r22	; 0x17
				}


				//state actions
						
				if(state == WAIT){
    22f0:	65 32       	cpi	r22, 0x25	; 37
    22f2:	71 05       	cpc	r23, r1
    22f4:	21 f0       	breq	.+8      	; 0x22fe <main+0x141a>
    22f6:	4b 01       	movw	r8, r22
    22f8:	33 24       	eor	r3, r3
    22fa:	33 94       	inc	r3
    22fc:	0f c0       	rjmp	.+30     	; 0x231c <main+0x1438>
    22fe:	15 e2       	ldi	r17, 0x25	; 37
    2300:	81 2e       	mov	r8, r17
    2302:	91 2c       	mov	r9, r1
    2304:	33 24       	eor	r3, r3
    2306:	33 94       	inc	r3
					plateLoadMotor = 0;
    2308:	1b 82       	std	Y+3, r1	; 0x03
    230a:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    230c:	1d 82       	std	Y+5, r1	; 0x05
    230e:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    2310:	1f 82       	std	Y+7, r1	; 0x07
    2312:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    2314:	19 86       	std	Y+9, r1	; 0x09
    2316:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    2318:	1b 86       	std	Y+11, r1	; 0x0b
    231a:	1a 86       	std	Y+10, r1	; 0x0a
				}
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    231c:	c4 01       	movw	r24, r8
    231e:	b3 01       	movw	r22, r6
    2320:	ae 01       	movw	r20, r28
    2322:	4e 5f       	subi	r20, 0xFE	; 254
    2324:	5f 4f       	sbci	r21, 0xFF	; 255
    2326:	9e 01       	movw	r18, r28
    2328:	2c 5f       	subi	r18, 0xFC	; 252
    232a:	3f 4f       	sbci	r19, 0xFF	; 255
    232c:	8e 01       	movw	r16, r28
    232e:	0a 5f       	subi	r16, 0xFA	; 250
    2330:	1f 4f       	sbci	r17, 0xFF	; 255
    2332:	b8 e0       	ldi	r27, 0x08	; 8
    2334:	eb 2e       	mov	r14, r27
    2336:	f1 2c       	mov	r15, r1
    2338:	ec 0e       	add	r14, r28
    233a:	fd 1e       	adc	r15, r29
    233c:	aa e0       	ldi	r26, 0x0A	; 10
    233e:	ca 2e       	mov	r12, r26
    2340:	d1 2c       	mov	r13, r1
    2342:	cc 0e       	add	r12, r28
    2344:	dd 1e       	adc	r13, r29
    2346:	5e 01       	movw	r10, r28
    2348:	08 94       	sec
    234a:	a1 1c       	adc	r10, r1
    234c:	b1 1c       	adc	r11, r1
    234e:	0e 94 d3 06 	call	0xda6	; 0xda6 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2352:	c4 01       	movw	r24, r8
    2354:	b3 01       	movw	r22, r6
    2356:	ae 01       	movw	r20, r28
    2358:	4e 5f       	subi	r20, 0xFE	; 254
    235a:	5f 4f       	sbci	r21, 0xFF	; 255
    235c:	9e 01       	movw	r18, r28
    235e:	2c 5f       	subi	r18, 0xFC	; 252
    2360:	3f 4f       	sbci	r19, 0xFF	; 255
    2362:	8e 01       	movw	r16, r28
    2364:	0a 5f       	subi	r16, 0xFA	; 250
    2366:	1f 4f       	sbci	r17, 0xFF	; 255
    2368:	f8 e0       	ldi	r31, 0x08	; 8
    236a:	ef 2e       	mov	r14, r31
    236c:	f1 2c       	mov	r15, r1
    236e:	ec 0e       	add	r14, r28
    2370:	fd 1e       	adc	r15, r29
    2372:	ea e0       	ldi	r30, 0x0A	; 10
    2374:	ce 2e       	mov	r12, r30
    2376:	d1 2c       	mov	r13, r1
    2378:	cc 0e       	add	r12, r28
    237a:	dd 1e       	adc	r13, r29
    237c:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    2380:	7e e0       	ldi	r23, 0x0E	; 14
    2382:	87 16       	cp	r8, r23
    2384:	91 04       	cpc	r9, r1
    2386:	51 f4       	brne	.+20     	; 0x239c <main+0x14b8>
					brush1Motor = 0;
    2388:	1f 82       	std	Y+7, r1	; 0x07
    238a:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    238c:	1d 82       	std	Y+5, r1	; 0x05
    238e:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2390:	80 91 2a 04 	lds	r24, 0x042A
    2394:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2396:	80 62       	ori	r24, 0x20	; 32
    2398:	80 93 2a 04 	sts	0x042A, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    239c:	c4 01       	movw	r24, r8
    239e:	b3 01       	movw	r22, r6
    23a0:	ae 01       	movw	r20, r28
    23a2:	4e 5f       	subi	r20, 0xFE	; 254
    23a4:	5f 4f       	sbci	r21, 0xFF	; 255
    23a6:	9e 01       	movw	r18, r28
    23a8:	2c 5f       	subi	r18, 0xFC	; 252
    23aa:	3f 4f       	sbci	r19, 0xFF	; 255
    23ac:	8e 01       	movw	r16, r28
    23ae:	0a 5f       	subi	r16, 0xFA	; 250
    23b0:	1f 4f       	sbci	r17, 0xFF	; 255
    23b2:	b8 e0       	ldi	r27, 0x08	; 8
    23b4:	eb 2e       	mov	r14, r27
    23b6:	f1 2c       	mov	r15, r1
    23b8:	ec 0e       	add	r14, r28
    23ba:	fd 1e       	adc	r15, r29
    23bc:	aa e0       	ldi	r26, 0x0A	; 10
    23be:	ca 2e       	mov	r12, r26
    23c0:	d1 2c       	mov	r13, r1
    23c2:	cc 0e       	add	r12, r28
    23c4:	dd 1e       	adc	r13, r29
    23c6:	0e 94 c8 01 	call	0x390	; 0x390 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    23ca:	c4 01       	movw	r24, r8
    23cc:	b3 01       	movw	r22, r6
    23ce:	ae 01       	movw	r20, r28
    23d0:	4e 5f       	subi	r20, 0xFE	; 254
    23d2:	5f 4f       	sbci	r21, 0xFF	; 255
    23d4:	9e 01       	movw	r18, r28
    23d6:	2c 5f       	subi	r18, 0xFC	; 252
    23d8:	3f 4f       	sbci	r19, 0xFF	; 255
    23da:	8e 01       	movw	r16, r28
    23dc:	0a 5f       	subi	r16, 0xFA	; 250
    23de:	1f 4f       	sbci	r17, 0xFF	; 255
    23e0:	f8 e0       	ldi	r31, 0x08	; 8
    23e2:	ef 2e       	mov	r14, r31
    23e4:	f1 2c       	mov	r15, r1
    23e6:	ec 0e       	add	r14, r28
    23e8:	fd 1e       	adc	r15, r29
    23ea:	ea e0       	ldi	r30, 0x0A	; 10
    23ec:	ce 2e       	mov	r12, r30
    23ee:	d1 2c       	mov	r13, r1
    23f0:	cc 0e       	add	r12, r28
    23f2:	dd 1e       	adc	r13, r29
    23f4:	0e 94 47 02 	call	0x48e	; 0x48e <dry_action>
				if(state == END){
    23f8:	83 e2       	ldi	r24, 0x23	; 35
    23fa:	88 16       	cp	r8, r24
    23fc:	91 04       	cpc	r9, r1
    23fe:	71 f4       	brne	.+28     	; 0x241c <main+0x1538>
					plateLoadMotor = 0;
    2400:	1b 82       	std	Y+3, r1	; 0x03
    2402:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2404:	80 91 2b 04 	lds	r24, 0x042B
    2408:	8b 7f       	andi	r24, 0xFB	; 251
    240a:	80 93 2b 04 	sts	0x042B, r24
					if(print35 == 1){
    240e:	22 20       	and	r2, r2
    2410:	29 f0       	breq	.+10     	; 0x241c <main+0x1538>
						//clear();
						serial_print("END OF CYCLE");
    2412:	87 e6       	ldi	r24, 0x67	; 103
    2414:	93 e0       	ldi	r25, 0x03	; 3
    2416:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    241a:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    241c:	2a 81       	ldd	r18, Y+2	; 0x02
    241e:	3b 81       	ldd	r19, Y+3	; 0x03
    2420:	0c 81       	ldd	r16, Y+4	; 0x04
    2422:	1d 81       	ldd	r17, Y+5	; 0x05
    2424:	ee 80       	ldd	r14, Y+6	; 0x06
    2426:	ff 80       	ldd	r15, Y+7	; 0x07
    2428:	c8 84       	ldd	r12, Y+8	; 0x08
    242a:	d9 84       	ldd	r13, Y+9	; 0x09
    242c:	aa 84       	ldd	r10, Y+10	; 0x0a
    242e:	bb 84       	ldd	r11, Y+11	; 0x0b
    2430:	c3 01       	movw	r24, r6
    2432:	b2 01       	movw	r22, r4
    2434:	40 e0       	ldi	r20, 0x00	; 0
    2436:	50 e0       	ldi	r21, 0x00	; 0
    2438:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <motor_and_write>

				serial_check(); counter++;
    243c:	0e 94 1b 1c 	call	0x3836	; 0x3836 <serial_check>
				delay_ms(1);
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    2448:	94 e2       	ldi	r25, 0x24	; 36
    244a:	89 16       	cp	r8, r25
    244c:	91 04       	cpc	r9, r1
    244e:	21 f0       	breq	.+8      	; 0x2458 <main+0x1574>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    2450:	08 94       	sec
    2452:	61 1c       	adc	r6, r1
    2454:	71 1c       	adc	r7, r1
    2456:	b8 ce       	rjmp	.-656    	; 0x21c8 <main+0x12e4>
				delay_ms(1);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2458:	80 91 2b 04 	lds	r24, 0x042B
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    245c:	8b 7d       	andi	r24, 0xDB	; 219
    245e:	80 93 2b 04 	sts	0x042B, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    2462:	80 91 27 04 	lds	r24, 0x0427
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    2466:	86 7b       	andi	r24, 0xB6	; 182
    2468:	80 93 27 04 	sts	0x0427, r24
		
		i2c_start(I2C1+I2C_WRITE);
    246c:	80 e4       	ldi	r24, 0x40	; 64
    246e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    2472:	82 e0       	ldi	r24, 0x02	; 2
    2474:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    2478:	80 91 2b 04 	lds	r24, 0x042B
    247c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    2480:	80 91 27 04 	lds	r24, 0x0427
    2484:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    2488:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	}
	serial_print("END");
    248c:	8c e8       	ldi	r24, 0x8C	; 140
    248e:	93 e0       	ldi	r25, 0x03	; 3
    2490:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print>
    2494:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <main+0x36>
	}
    2498:	12 01       	movw	r2, r4
    249a:	99 24       	eor	r9, r9
    249c:	93 94       	inc	r9
    249e:	8c e2       	ldi	r24, 0x2C	; 44
    24a0:	68 2e       	mov	r6, r24
    24a2:	71 2c       	mov	r7, r1
    24a4:	06 ca       	rjmp	.-3060   	; 0x18b2 <main+0x9ce>

000024a6 <_ZN12OrangutanLCDC2Ev>:
    24a6:	08 95       	ret

000024a8 <_ZN12OrangutanLCDC1Ev>:
    24a8:	08 95       	ret

000024aa <void_getchar>:
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	08 95       	ret

000024b0 <_ZN12OrangutanLCD8busyWaitEv>:
    24b0:	ef 92       	push	r14
    24b2:	ff 92       	push	r15
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
    24b8:	67 b1       	in	r22, 0x07	; 7
    24ba:	3d 98       	cbi	0x07, 5	; 7
    24bc:	28 98       	cbi	0x05, 0	; 5
    24be:	29 9a       	sbi	0x05, 1	; 5
    24c0:	e0 90 f6 03 	lds	r14, 0x03F6
    24c4:	f0 90 f7 03 	lds	r15, 0x03F7
    24c8:	00 91 f8 03 	lds	r16, 0x03F8
    24cc:	10 91 f9 03 	lds	r17, 0x03F9
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	50 e0       	ldi	r21, 0x00	; 0
    24d8:	ca 01       	movw	r24, r20
    24da:	6f 93       	push	r22
    24dc:	64 e0       	ldi	r22, 0x04	; 4
    24de:	6a 95       	dec	r22
    24e0:	f1 f7       	brne	.-4      	; 0x24de <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    24e2:	6f 91       	pop	r22
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	c9 f7       	brne	.-14     	; 0x24da <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    24e8:	2a 9a       	sbi	0x05, 2	; 5
    24ea:	ca 01       	movw	r24, r20
    24ec:	6f 93       	push	r22
    24ee:	64 e0       	ldi	r22, 0x04	; 4
    24f0:	6a 95       	dec	r22
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    24f4:	6f 91       	pop	r22
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	c9 f7       	brne	.-14     	; 0x24ec <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    24fa:	86 b1       	in	r24, 0x06	; 6
    24fc:	2a 98       	cbi	0x05, 2	; 5
    24fe:	fa 01       	movw	r30, r20
    2500:	6f 93       	push	r22
    2502:	64 e0       	ldi	r22, 0x04	; 4
    2504:	6a 95       	dec	r22
    2506:	f1 f7       	brne	.-4      	; 0x2504 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    2508:	6f 91       	pop	r22
    250a:	31 97       	sbiw	r30, 0x01	; 1
    250c:	c9 f7       	brne	.-14     	; 0x2500 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    250e:	2a 9a       	sbi	0x05, 2	; 5
    2510:	fa 01       	movw	r30, r20
    2512:	6f 93       	push	r22
    2514:	64 e0       	ldi	r22, 0x04	; 4
    2516:	6a 95       	dec	r22
    2518:	f1 f7       	brne	.-4      	; 0x2516 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    251a:	6f 91       	pop	r22
    251c:	31 97       	sbiw	r30, 0x01	; 1
    251e:	c9 f7       	brne	.-14     	; 0x2512 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    2520:	2a 98       	cbi	0x05, 2	; 5
    2522:	2c 5f       	subi	r18, 0xFC	; 252
    2524:	3f 4f       	sbci	r19, 0xFF	; 255
    2526:	85 ff       	sbrs	r24, 5
    2528:	09 c0       	rjmp	.+18     	; 0x253c <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    252a:	c9 01       	movw	r24, r18
    252c:	a0 e0       	ldi	r26, 0x00	; 0
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	8e 15       	cp	r24, r14
    2532:	9f 05       	cpc	r25, r15
    2534:	a0 07       	cpc	r26, r16
    2536:	b1 07       	cpc	r27, r17
    2538:	08 f4       	brcc	.+2      	; 0x253c <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    253a:	ce cf       	rjmp	.-100    	; 0x24d8 <_ZN12OrangutanLCD8busyWaitEv+0x28>
    253c:	c9 01       	movw	r24, r18
    253e:	a0 e0       	ldi	r26, 0x00	; 0
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	8e 15       	cp	r24, r14
    2544:	9f 05       	cpc	r25, r15
    2546:	a0 07       	cpc	r26, r16
    2548:	b1 07       	cpc	r27, r17
    254a:	28 f0       	brcs	.+10     	; 0x2556 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    254c:	82 e3       	ldi	r24, 0x32	; 50
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a0 e0       	ldi	r26, 0x00	; 0
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	04 c0       	rjmp	.+8      	; 0x255e <_ZN12OrangutanLCD8busyWaitEv+0xae>
    2556:	80 e3       	ldi	r24, 0x30	; 48
    2558:	95 e7       	ldi	r25, 0x75	; 117
    255a:	a0 e0       	ldi	r26, 0x00	; 0
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	80 93 f6 03 	sts	0x03F6, r24
    2562:	90 93 f7 03 	sts	0x03F7, r25
    2566:	a0 93 f8 03 	sts	0x03F8, r26
    256a:	b0 93 f9 03 	sts	0x03F9, r27
    256e:	67 b9       	out	0x07, r22	; 7
    2570:	1f 91       	pop	r17
    2572:	0f 91       	pop	r16
    2574:	ff 90       	pop	r15
    2576:	ef 90       	pop	r14
    2578:	08 95       	ret

0000257a <_ZN12OrangutanLCD8sendDataEh>:
    257a:	28 b1       	in	r18, 0x08	; 8
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	8f 70       	andi	r24, 0x0F	; 15
    2580:	90 70       	andi	r25, 0x00	; 0
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	23 7c       	andi	r18, 0xC3	; 195
    258c:	28 2b       	or	r18, r24
    258e:	28 b9       	out	0x08, r18	; 8
    2590:	2a 9a       	sbi	0x05, 2	; 5
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	fc 01       	movw	r30, r24
    2598:	6f 93       	push	r22
    259a:	64 e0       	ldi	r22, 0x04	; 4
    259c:	6a 95       	dec	r22
    259e:	f1 f7       	brne	.-4      	; 0x259c <_ZN12OrangutanLCD8sendDataEh+0x22>
    25a0:	6f 91       	pop	r22
    25a2:	31 97       	sbiw	r30, 0x01	; 1
    25a4:	c9 f7       	brne	.-14     	; 0x2598 <_ZN12OrangutanLCD8sendDataEh+0x1e>
    25a6:	2a 98       	cbi	0x05, 2	; 5
    25a8:	6f 93       	push	r22
    25aa:	64 e0       	ldi	r22, 0x04	; 4
    25ac:	6a 95       	dec	r22
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <_ZN12OrangutanLCD8sendDataEh+0x32>
    25b0:	6f 91       	pop	r22
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	c9 f7       	brne	.-14     	; 0x25a8 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    25b6:	08 95       	ret

000025b8 <_ZN12OrangutanLCD10initPrintfEv>:
    25b8:	80 91 f2 03 	lds	r24, 0x03F2
    25bc:	90 91 f3 03 	lds	r25, 0x03F3
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	11 f0       	breq	.+4      	; 0x25c8 <_ZN12OrangutanLCD10initPrintfEv+0x10>
    25c4:	0e 94 0f 20 	call	0x401e	; 0x401e <free>
    25c8:	80 91 c0 03 	lds	r24, 0x03C0
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	20 91 c1 03 	lds	r18, 0x03C1
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	ac 01       	movw	r20, r24
    25d8:	42 9f       	mul	r20, r18
    25da:	c0 01       	movw	r24, r0
    25dc:	43 9f       	mul	r20, r19
    25de:	90 0d       	add	r25, r0
    25e0:	52 9f       	mul	r21, r18
    25e2:	90 0d       	add	r25, r0
    25e4:	11 24       	eor	r1, r1
    25e6:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <malloc>
    25ea:	90 93 f3 03 	sts	0x03F3, r25
    25ee:	80 93 f2 03 	sts	0x03F2, r24
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	29 f1       	breq	.+74     	; 0x2640 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	70 e2       	ldi	r23, 0x20	; 32
    25fa:	08 c0       	rjmp	.+16     	; 0x260c <_ZN12OrangutanLCD10initPrintfEv+0x54>
    25fc:	e0 91 f2 03 	lds	r30, 0x03F2
    2600:	f0 91 f3 03 	lds	r31, 0x03F3
    2604:	e4 0f       	add	r30, r20
    2606:	f5 1f       	adc	r31, r21
    2608:	70 83       	st	Z, r23
    260a:	6f 5f       	subi	r22, 0xFF	; 255
    260c:	46 2f       	mov	r20, r22
    260e:	50 e0       	ldi	r21, 0x00	; 0
    2610:	80 91 c0 03 	lds	r24, 0x03C0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	20 91 c1 03 	lds	r18, 0x03C1
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	fc 01       	movw	r30, r24
    2620:	e2 9f       	mul	r30, r18
    2622:	c0 01       	movw	r24, r0
    2624:	e3 9f       	mul	r30, r19
    2626:	90 0d       	add	r25, r0
    2628:	f2 9f       	mul	r31, r18
    262a:	90 0d       	add	r25, r0
    262c:	11 24       	eor	r1, r1
    262e:	48 17       	cp	r20, r24
    2630:	59 07       	cpc	r21, r25
    2632:	24 f3       	brlt	.-56     	; 0x25fc <_ZN12OrangutanLCD10initPrintfEv+0x44>
    2634:	84 e4       	ldi	r24, 0x44	; 68
    2636:	95 e1       	ldi	r25, 0x15	; 21
    2638:	65 e5       	ldi	r22, 0x55	; 85
    263a:	72 e1       	ldi	r23, 0x12	; 18
    263c:	0e 94 67 20 	call	0x40ce	; 0x40ce <fdevopen>
    2640:	08 95       	ret

00002642 <_ZN12OrangutanLCD10initPrintfEhh>:
    2642:	80 93 c1 03 	sts	0x03C1, r24
    2646:	60 93 c0 03 	sts	0x03C0, r22
    264a:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_ZN12OrangutanLCD10initPrintfEv>
    264e:	08 95       	ret

00002650 <lcd_init_printf_with_dimensions>:
    2650:	80 93 c1 03 	sts	0x03C1, r24
    2654:	60 93 c0 03 	sts	0x03C0, r22
    2658:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_ZN12OrangutanLCD10initPrintfEv>
    265c:	08 95       	ret

0000265e <lcd_init_printf>:
    265e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_ZN12OrangutanLCD10initPrintfEv>
    2662:	08 95       	ret

00002664 <_ZN12OrangutanLCD5init2Ev>:
    2664:	3d 98       	cbi	0x07, 5	; 7
    2666:	45 9a       	sbi	0x08, 5	; 8
    2668:	80 e3       	ldi	r24, 0x30	; 48
    266a:	95 e7       	ldi	r25, 0x75	; 117
    266c:	a0 e0       	ldi	r26, 0x00	; 0
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	80 93 f6 03 	sts	0x03F6, r24
    2674:	90 93 f7 03 	sts	0x03F7, r25
    2678:	a0 93 f8 03 	sts	0x03F8, r26
    267c:	b0 93 f9 03 	sts	0x03F9, r27
    2680:	20 9a       	sbi	0x04, 0	; 4
    2682:	21 9a       	sbi	0x04, 1	; 4
    2684:	22 9a       	sbi	0x04, 2	; 4
    2686:	8e e1       	ldi	r24, 0x1E	; 30
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>
    268e:	83 e0       	ldi	r24, 0x03	; 3
    2690:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2694:	86 e0       	ldi	r24, 0x06	; 6
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>
    269c:	83 e0       	ldi	r24, 0x03	; 3
    269e:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    26a2:	82 e0       	ldi	r24, 0x02	; 2
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>
    26aa:	83 e0       	ldi	r24, 0x03	; 3
    26ac:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    26b0:	82 e0       	ldi	r24, 0x02	; 2
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>
    26b8:	82 e0       	ldi	r24, 0x02	; 2
    26ba:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    26be:	82 e0       	ldi	r24, 0x02	; 2
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>
    26c6:	88 e2       	ldi	r24, 0x28	; 40
    26c8:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN12OrangutanLCD8send_cmdEh>
    26cc:	88 e0       	ldi	r24, 0x08	; 8
    26ce:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN12OrangutanLCD8send_cmdEh>
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN12OrangutanLCD8send_cmdEh>
    26d8:	86 e0       	ldi	r24, 0x06	; 6
    26da:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN12OrangutanLCD8send_cmdEh>
    26de:	8c e0       	ldi	r24, 0x0C	; 12
    26e0:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN12OrangutanLCD8send_cmdEh>
    26e4:	08 95       	ret

000026e6 <_ZN12OrangutanLCD4initEv>:
    26e6:	80 91 fa 03 	lds	r24, 0x03FA
    26ea:	88 23       	and	r24, r24
    26ec:	29 f4       	brne	.+10     	; 0x26f8 <_ZN12OrangutanLCD4initEv+0x12>
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	80 93 fa 03 	sts	0x03FA, r24
    26f4:	0e 94 32 13 	call	0x2664	; 0x2664 <_ZN12OrangutanLCD5init2Ev>
    26f8:	08 95       	ret

000026fa <_ZN12OrangutanLCD4sendEhhh>:
    26fa:	ff 92       	push	r15
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
    2700:	08 2f       	mov	r16, r24
    2702:	16 2f       	mov	r17, r22
    2704:	f4 2e       	mov	r15, r20
    2706:	0e 94 73 13 	call	0x26e6	; 0x26e6 <_ZN12OrangutanLCD4initEv>
    270a:	0e 94 58 12 	call	0x24b0	; 0x24b0 <_ZN12OrangutanLCD8busyWaitEv>
    270e:	37 b1       	in	r19, 0x07	; 7
    2710:	28 b1       	in	r18, 0x08	; 8
    2712:	29 98       	cbi	0x05, 1	; 5
    2714:	11 23       	and	r17, r17
    2716:	11 f0       	breq	.+4      	; 0x271c <_ZN12OrangutanLCD4sendEhhh+0x22>
    2718:	28 9a       	sbi	0x05, 0	; 5
    271a:	01 c0       	rjmp	.+2      	; 0x271e <_ZN12OrangutanLCD4sendEhhh+0x24>
    271c:	28 98       	cbi	0x05, 0	; 5
    271e:	87 b1       	in	r24, 0x07	; 7
    2720:	8c 63       	ori	r24, 0x3C	; 60
    2722:	87 b9       	out	0x07, r24	; 7
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	f8 16       	cp	r15, r24
    2728:	e1 f0       	breq	.+56     	; 0x2762 <_ZN12OrangutanLCD4sendEhhh+0x68>
    272a:	88 b1       	in	r24, 0x08	; 8
    272c:	90 2f       	mov	r25, r16
    272e:	92 95       	swap	r25
    2730:	9f 70       	andi	r25, 0x0F	; 15
    2732:	99 0f       	add	r25, r25
    2734:	99 0f       	add	r25, r25
    2736:	83 7c       	andi	r24, 0xC3	; 195
    2738:	98 2b       	or	r25, r24
    273a:	98 b9       	out	0x08, r25	; 8
    273c:	2a 9a       	sbi	0x05, 2	; 5
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	fc 01       	movw	r30, r24
    2744:	6f 93       	push	r22
    2746:	64 e0       	ldi	r22, 0x04	; 4
    2748:	6a 95       	dec	r22
    274a:	f1 f7       	brne	.-4      	; 0x2748 <_ZN12OrangutanLCD4sendEhhh+0x4e>
    274c:	6f 91       	pop	r22
    274e:	31 97       	sbiw	r30, 0x01	; 1
    2750:	c9 f7       	brne	.-14     	; 0x2744 <_ZN12OrangutanLCD4sendEhhh+0x4a>
    2752:	2a 98       	cbi	0x05, 2	; 5
    2754:	6f 93       	push	r22
    2756:	64 e0       	ldi	r22, 0x04	; 4
    2758:	6a 95       	dec	r22
    275a:	f1 f7       	brne	.-4      	; 0x2758 <_ZN12OrangutanLCD4sendEhhh+0x5e>
    275c:	6f 91       	pop	r22
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	c9 f7       	brne	.-14     	; 0x2754 <_ZN12OrangutanLCD4sendEhhh+0x5a>
    2762:	88 b1       	in	r24, 0x08	; 8
    2764:	0f 70       	andi	r16, 0x0F	; 15
    2766:	00 0f       	add	r16, r16
    2768:	00 0f       	add	r16, r16
    276a:	83 7c       	andi	r24, 0xC3	; 195
    276c:	80 2b       	or	r24, r16
    276e:	88 b9       	out	0x08, r24	; 8
    2770:	2a 9a       	sbi	0x05, 2	; 5
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	fc 01       	movw	r30, r24
    2778:	6f 93       	push	r22
    277a:	64 e0       	ldi	r22, 0x04	; 4
    277c:	6a 95       	dec	r22
    277e:	f1 f7       	brne	.-4      	; 0x277c <_ZN12OrangutanLCD4sendEhhh+0x82>
    2780:	6f 91       	pop	r22
    2782:	31 97       	sbiw	r30, 0x01	; 1
    2784:	c9 f7       	brne	.-14     	; 0x2778 <_ZN12OrangutanLCD4sendEhhh+0x7e>
    2786:	2a 98       	cbi	0x05, 2	; 5
    2788:	6f 93       	push	r22
    278a:	64 e0       	ldi	r22, 0x04	; 4
    278c:	6a 95       	dec	r22
    278e:	f1 f7       	brne	.-4      	; 0x278c <_ZN12OrangutanLCD4sendEhhh+0x92>
    2790:	6f 91       	pop	r22
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	c9 f7       	brne	.-14     	; 0x2788 <_ZN12OrangutanLCD4sendEhhh+0x8e>
    2796:	37 b9       	out	0x07, r19	; 7
    2798:	28 b9       	out	0x08, r18	; 8
    279a:	1f 91       	pop	r17
    279c:	0f 91       	pop	r16
    279e:	ff 90       	pop	r15
    27a0:	08 95       	ret

000027a2 <_ZN12OrangutanLCD8send_cmdEh>:
    27a2:	60 e0       	ldi	r22, 0x00	; 0
    27a4:	42 e0       	ldi	r20, 0x02	; 2
    27a6:	0e 94 7d 13 	call	0x26fa	; 0x26fa <_ZN12OrangutanLCD4sendEhhh>
    27aa:	08 95       	ret

000027ac <_ZN12OrangutanLCD10moveCursorEhh>:
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	08 2f       	mov	r16, r24
    27b2:	16 2f       	mov	r17, r22
    27b4:	08 c0       	rjmp	.+16     	; 0x27c6 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    27b6:	00 23       	and	r16, r16
    27b8:	11 f4       	brne	.+4      	; 0x27be <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    27ba:	80 e1       	ldi	r24, 0x10	; 16
    27bc:	01 c0       	rjmp	.+2      	; 0x27c0 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    27be:	84 e1       	ldi	r24, 0x14	; 20
    27c0:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN12OrangutanLCD8send_cmdEh>
    27c4:	11 50       	subi	r17, 0x01	; 1
    27c6:	11 23       	and	r17, r17
    27c8:	b1 f7       	brne	.-20     	; 0x27b6 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    27ca:	1f 91       	pop	r17
    27cc:	0f 91       	pop	r16
    27ce:	08 95       	ret

000027d0 <lcd_move_cursor>:
    27d0:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN12OrangutanLCD10moveCursorEhh>
    27d4:	08 95       	ret

000027d6 <_ZN12OrangutanLCD10hideCursorEv>:
    27d6:	8c e0       	ldi	r24, 0x0C	; 12
    27d8:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN12OrangutanLCD8send_cmdEh>
    27dc:	08 95       	ret

000027de <lcd_hide_cursor>:
    27de:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN12OrangutanLCD10hideCursorEv>
    27e2:	08 95       	ret

000027e4 <_ZN12OrangutanLCD10showCursorEh>:
    27e4:	81 30       	cpi	r24, 0x01	; 1
    27e6:	11 f4       	brne	.+4      	; 0x27ec <_ZN12OrangutanLCD10showCursorEh+0x8>
    27e8:	8f e0       	ldi	r24, 0x0F	; 15
    27ea:	01 c0       	rjmp	.+2      	; 0x27ee <_ZN12OrangutanLCD10showCursorEh+0xa>
    27ec:	8e e0       	ldi	r24, 0x0E	; 14
    27ee:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN12OrangutanLCD8send_cmdEh>
    27f2:	08 95       	ret

000027f4 <lcd_show_cursor>:
    27f4:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <_ZN12OrangutanLCD10showCursorEh>
    27f8:	08 95       	ret

000027fa <_ZN12OrangutanLCD6gotoXYEhh>:
    27fa:	a4 e0       	ldi	r26, 0x04	; 4
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e3 e0       	ldi	r30, 0x03	; 3
    2800:	f4 e1       	ldi	r31, 0x14	; 20
    2802:	0c 94 25 1f 	jmp	0x3e4a	; 0x3e4a <__prologue_saves__+0x1c>
    2806:	18 2f       	mov	r17, r24
    2808:	06 2f       	mov	r16, r22
    280a:	80 e8       	ldi	r24, 0x80	; 128
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	80 ec       	ldi	r24, 0xC0	; 192
    2810:	8a 83       	std	Y+2, r24	; 0x02
    2812:	84 e9       	ldi	r24, 0x94	; 148
    2814:	8b 83       	std	Y+3, r24	; 0x03
    2816:	84 ed       	ldi	r24, 0xD4	; 212
    2818:	8c 83       	std	Y+4, r24	; 0x04
    281a:	fe 01       	movw	r30, r28
    281c:	e6 0f       	add	r30, r22
    281e:	f1 1d       	adc	r31, r1
    2820:	81 81       	ldd	r24, Z+1	; 0x01
    2822:	81 0f       	add	r24, r17
    2824:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN12OrangutanLCD8send_cmdEh>
    2828:	10 93 f5 03 	sts	0x03F5, r17
    282c:	00 93 f4 03 	sts	0x03F4, r16
    2830:	24 96       	adiw	r28, 0x04	; 4
    2832:	e4 e0       	ldi	r30, 0x04	; 4
    2834:	0c 94 41 1f 	jmp	0x3e82	; 0x3e82 <__epilogue_restores__+0x1c>

00002838 <lcd_goto_xy>:
    2838:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN12OrangutanLCD6gotoXYEhh>
    283c:	08 95       	ret

0000283e <_ZN12OrangutanLCD5clearEv>:
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN12OrangutanLCD8send_cmdEh>
    2844:	80 91 f2 03 	lds	r24, 0x03F2
    2848:	90 91 f3 03 	lds	r25, 0x03F3
    284c:	89 2b       	or	r24, r25
    284e:	19 f1       	breq	.+70     	; 0x2896 <_ZN12OrangutanLCD5clearEv+0x58>
    2850:	60 e0       	ldi	r22, 0x00	; 0
    2852:	70 e2       	ldi	r23, 0x20	; 32
    2854:	08 c0       	rjmp	.+16     	; 0x2866 <_ZN12OrangutanLCD5clearEv+0x28>
    2856:	e0 91 f2 03 	lds	r30, 0x03F2
    285a:	f0 91 f3 03 	lds	r31, 0x03F3
    285e:	e4 0f       	add	r30, r20
    2860:	f5 1f       	adc	r31, r21
    2862:	70 83       	st	Z, r23
    2864:	6f 5f       	subi	r22, 0xFF	; 255
    2866:	46 2f       	mov	r20, r22
    2868:	50 e0       	ldi	r21, 0x00	; 0
    286a:	80 91 c0 03 	lds	r24, 0x03C0
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	20 91 c1 03 	lds	r18, 0x03C1
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	fc 01       	movw	r30, r24
    287a:	e2 9f       	mul	r30, r18
    287c:	c0 01       	movw	r24, r0
    287e:	e3 9f       	mul	r30, r19
    2880:	90 0d       	add	r25, r0
    2882:	f2 9f       	mul	r31, r18
    2884:	90 0d       	add	r25, r0
    2886:	11 24       	eor	r1, r1
    2888:	48 17       	cp	r20, r24
    288a:	59 07       	cpc	r21, r25
    288c:	24 f3       	brlt	.-56     	; 0x2856 <_ZN12OrangutanLCD5clearEv+0x18>
    288e:	10 92 f5 03 	sts	0x03F5, r1
    2892:	10 92 f4 03 	sts	0x03F4, r1
    2896:	08 95       	ret

00002898 <clear>:
    2898:	0e 94 1f 14 	call	0x283e	; 0x283e <_ZN12OrangutanLCD5clearEv>
    289c:	08 95       	ret

0000289e <_ZN12OrangutanLCD9send_dataEh>:
    289e:	61 e0       	ldi	r22, 0x01	; 1
    28a0:	42 e0       	ldi	r20, 0x02	; 2
    28a2:	0e 94 7d 13 	call	0x26fa	; 0x26fa <_ZN12OrangutanLCD4sendEhhh>
    28a6:	08 95       	ret

000028a8 <_ZN12OrangutanLCD11printBinaryEh>:
    28a8:	0f 93       	push	r16
    28aa:	1f 93       	push	r17
    28ac:	cf 93       	push	r28
    28ae:	df 93       	push	r29
    28b0:	00 e0       	ldi	r16, 0x00	; 0
    28b2:	10 e8       	ldi	r17, 0x80	; 128
    28b4:	c8 2f       	mov	r28, r24
    28b6:	d0 e0       	ldi	r29, 0x00	; 0
    28b8:	81 2f       	mov	r24, r17
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	8c 23       	and	r24, r28
    28be:	9d 23       	and	r25, r29
    28c0:	89 2b       	or	r24, r25
    28c2:	11 f0       	breq	.+4      	; 0x28c8 <_ZN12OrangutanLCD11printBinaryEh+0x20>
    28c4:	81 e3       	ldi	r24, 0x31	; 49
    28c6:	01 c0       	rjmp	.+2      	; 0x28ca <_ZN12OrangutanLCD11printBinaryEh+0x22>
    28c8:	80 e3       	ldi	r24, 0x30	; 48
    28ca:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN12OrangutanLCD9send_dataEh>
    28ce:	0f 5f       	subi	r16, 0xFF	; 255
    28d0:	08 30       	cpi	r16, 0x08	; 8
    28d2:	11 f0       	breq	.+4      	; 0x28d8 <_ZN12OrangutanLCD11printBinaryEh+0x30>
    28d4:	16 95       	lsr	r17
    28d6:	f0 cf       	rjmp	.-32     	; 0x28b8 <_ZN12OrangutanLCD11printBinaryEh+0x10>
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	1f 91       	pop	r17
    28de:	0f 91       	pop	r16
    28e0:	08 95       	ret

000028e2 <print_binary>:
    28e2:	0e 94 54 14 	call	0x28a8	; 0x28a8 <_ZN12OrangutanLCD11printBinaryEh>
    28e6:	08 95       	ret

000028e8 <_ZN12OrangutanLCD14printHexNibbleEh>:
    28e8:	8a 30       	cpi	r24, 0x0A	; 10
    28ea:	10 f4       	brcc	.+4      	; 0x28f0 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    28ec:	80 5d       	subi	r24, 0xD0	; 208
    28ee:	01 c0       	rjmp	.+2      	; 0x28f2 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    28f0:	89 5c       	subi	r24, 0xC9	; 201
    28f2:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN12OrangutanLCD9send_dataEh>
    28f6:	08 95       	ret

000028f8 <_ZN12OrangutanLCD8printHexEh>:
    28f8:	1f 93       	push	r17
    28fa:	18 2f       	mov	r17, r24
    28fc:	82 95       	swap	r24
    28fe:	8f 70       	andi	r24, 0x0F	; 15
    2900:	0e 94 74 14 	call	0x28e8	; 0x28e8 <_ZN12OrangutanLCD14printHexNibbleEh>
    2904:	81 2f       	mov	r24, r17
    2906:	8f 70       	andi	r24, 0x0F	; 15
    2908:	0e 94 74 14 	call	0x28e8	; 0x28e8 <_ZN12OrangutanLCD14printHexNibbleEh>
    290c:	1f 91       	pop	r17
    290e:	08 95       	ret

00002910 <_ZN12OrangutanLCD8printHexEj>:
    2910:	1f 93       	push	r17
    2912:	18 2f       	mov	r17, r24
    2914:	89 2f       	mov	r24, r25
    2916:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <_ZN12OrangutanLCD8printHexEh>
    291a:	81 2f       	mov	r24, r17
    291c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <_ZN12OrangutanLCD8printHexEh>
    2920:	1f 91       	pop	r17
    2922:	08 95       	ret

00002924 <print_hex>:
    2924:	0e 94 88 14 	call	0x2910	; 0x2910 <_ZN12OrangutanLCD8printHexEj>
    2928:	08 95       	ret

0000292a <print_hex_byte>:
    292a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <_ZN12OrangutanLCD8printHexEh>
    292e:	08 95       	ret

00002930 <_ZN12OrangutanLCD5printEm>:
    2930:	6f 92       	push	r6
    2932:	7f 92       	push	r7
    2934:	8f 92       	push	r8
    2936:	9f 92       	push	r9
    2938:	af 92       	push	r10
    293a:	bf 92       	push	r11
    293c:	cf 92       	push	r12
    293e:	df 92       	push	r13
    2940:	ff 92       	push	r15
    2942:	0f 93       	push	r16
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	2a 97       	sbiw	r28, 0x0a	; 10
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	cd bf       	out	0x3d, r28	; 61
    2958:	5b 01       	movw	r10, r22
    295a:	6c 01       	movw	r12, r24
    295c:	0a e0       	ldi	r16, 0x0A	; 10
    295e:	3e 01       	movw	r6, r28
    2960:	08 94       	sec
    2962:	61 1c       	adc	r6, r1
    2964:	71 1c       	adc	r7, r1
    2966:	fa 2c       	mov	r15, r10
    2968:	c6 01       	movw	r24, r12
    296a:	b5 01       	movw	r22, r10
    296c:	2a e0       	ldi	r18, 0x0A	; 10
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e0       	ldi	r20, 0x00	; 0
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <__udivmodsi4>
    2978:	c9 01       	movw	r24, r18
    297a:	da 01       	movw	r26, r20
    297c:	5c 01       	movw	r10, r24
    297e:	6d 01       	movw	r12, r26
    2980:	01 50       	subi	r16, 0x01	; 1
    2982:	43 01       	movw	r8, r6
    2984:	80 0e       	add	r8, r16
    2986:	91 1c       	adc	r9, r1
    2988:	80 e3       	ldi	r24, 0x30	; 48
    298a:	f8 0e       	add	r15, r24
    298c:	c6 01       	movw	r24, r12
    298e:	b5 01       	movw	r22, r10
    2990:	2a e0       	ldi	r18, 0x0A	; 10
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e0       	ldi	r20, 0x00	; 0
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__mulsi3>
    299c:	f6 1a       	sub	r15, r22
    299e:	f4 01       	movw	r30, r8
    29a0:	f0 82       	st	Z, r15
    29a2:	a1 14       	cp	r10, r1
    29a4:	b1 04       	cpc	r11, r1
    29a6:	c1 04       	cpc	r12, r1
    29a8:	d1 04       	cpc	r13, r1
    29aa:	e9 f6       	brne	.-70     	; 0x2966 <_ZN12OrangutanLCD5printEm+0x36>
    29ac:	08 c0       	rjmp	.+16     	; 0x29be <_ZN12OrangutanLCD5printEm+0x8e>
    29ae:	f6 01       	movw	r30, r12
    29b0:	e0 0f       	add	r30, r16
    29b2:	f1 1d       	adc	r31, r1
    29b4:	80 81       	ld	r24, Z
    29b6:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN12OrangutanLCD9send_dataEh>
    29ba:	0f 5f       	subi	r16, 0xFF	; 255
    29bc:	04 c0       	rjmp	.+8      	; 0x29c6 <_ZN12OrangutanLCD5printEm+0x96>
    29be:	6e 01       	movw	r12, r28
    29c0:	08 94       	sec
    29c2:	c1 1c       	adc	r12, r1
    29c4:	d1 1c       	adc	r13, r1
    29c6:	0a 30       	cpi	r16, 0x0A	; 10
    29c8:	90 f3       	brcs	.-28     	; 0x29ae <_ZN12OrangutanLCD5printEm+0x7e>
    29ca:	2a 96       	adiw	r28, 0x0a	; 10
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	f8 94       	cli
    29d0:	de bf       	out	0x3e, r29	; 62
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	cd bf       	out	0x3d, r28	; 61
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	0f 91       	pop	r16
    29dc:	ff 90       	pop	r15
    29de:	df 90       	pop	r13
    29e0:	cf 90       	pop	r12
    29e2:	bf 90       	pop	r11
    29e4:	af 90       	pop	r10
    29e6:	9f 90       	pop	r9
    29e8:	8f 90       	pop	r8
    29ea:	7f 90       	pop	r7
    29ec:	6f 90       	pop	r6
    29ee:	08 95       	ret

000029f0 <print_unsigned_long>:
    29f0:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN12OrangutanLCD5printEm>
    29f4:	08 95       	ret

000029f6 <_ZN12OrangutanLCD5printEl>:
    29f6:	ef 92       	push	r14
    29f8:	ff 92       	push	r15
    29fa:	0f 93       	push	r16
    29fc:	1f 93       	push	r17
    29fe:	7b 01       	movw	r14, r22
    2a00:	8c 01       	movw	r16, r24
    2a02:	97 ff       	sbrs	r25, 7
    2a04:	0b c0       	rjmp	.+22     	; 0x2a1c <_ZN12OrangutanLCD5printEl+0x26>
    2a06:	10 95       	com	r17
    2a08:	00 95       	com	r16
    2a0a:	f0 94       	com	r15
    2a0c:	e0 94       	com	r14
    2a0e:	e1 1c       	adc	r14, r1
    2a10:	f1 1c       	adc	r15, r1
    2a12:	01 1d       	adc	r16, r1
    2a14:	11 1d       	adc	r17, r1
    2a16:	8d e2       	ldi	r24, 0x2D	; 45
    2a18:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN12OrangutanLCD9send_dataEh>
    2a1c:	c8 01       	movw	r24, r16
    2a1e:	b7 01       	movw	r22, r14
    2a20:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN12OrangutanLCD5printEm>
    2a24:	1f 91       	pop	r17
    2a26:	0f 91       	pop	r16
    2a28:	ff 90       	pop	r15
    2a2a:	ef 90       	pop	r14
    2a2c:	08 95       	ret

00002a2e <print_long>:
    2a2e:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <_ZN12OrangutanLCD5printEl>
    2a32:	08 95       	ret

00002a34 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    2a34:	cf 93       	push	r28
    2a36:	df 93       	push	r29
    2a38:	ec 01       	movw	r28, r24
    2a3a:	03 c0       	rjmp	.+6      	; 0x2a42 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    2a3c:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN12OrangutanLCD9send_dataEh>
    2a40:	21 96       	adiw	r28, 0x01	; 1
    2a42:	fe 01       	movw	r30, r28
    2a44:	84 91       	lpm	r24, Z+
    2a46:	88 23       	and	r24, r24
    2a48:	c9 f7       	brne	.-14     	; 0x2a3c <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	08 95       	ret

00002a50 <print_from_program_space>:
    2a50:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    2a54:	08 95       	ret

00002a56 <_ZN12OrangutanLCD5printEPKc>:
    2a56:	cf 93       	push	r28
    2a58:	df 93       	push	r29
    2a5a:	ec 01       	movw	r28, r24
    2a5c:	03 c0       	rjmp	.+6      	; 0x2a64 <_ZN12OrangutanLCD5printEPKc+0xe>
    2a5e:	21 96       	adiw	r28, 0x01	; 1
    2a60:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN12OrangutanLCD9send_dataEh>
    2a64:	88 81       	ld	r24, Y
    2a66:	88 23       	and	r24, r24
    2a68:	d1 f7       	brne	.-12     	; 0x2a5e <_ZN12OrangutanLCD5printEPKc+0x8>
    2a6a:	df 91       	pop	r29
    2a6c:	cf 91       	pop	r28
    2a6e:	08 95       	ret

00002a70 <_ZN12OrangutanLCD7printInEPKc>:
    2a70:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <_ZN12OrangutanLCD5printEPKc>
    2a74:	08 95       	ret

00002a76 <print>:
    2a76:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <_ZN12OrangutanLCD5printEPKc>
    2a7a:	08 95       	ret

00002a7c <_ZN12OrangutanLCD5printEc>:
    2a7c:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN12OrangutanLCD9send_dataEh>
    2a80:	08 95       	ret

00002a82 <print_character>:
    2a82:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN12OrangutanLCD9send_dataEh>
    2a86:	08 95       	ret

00002a88 <lcd_putchar>:
    2a88:	a0 e0       	ldi	r26, 0x00	; 0
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	ea e4       	ldi	r30, 0x4A	; 74
    2a8e:	f5 e1       	ldi	r31, 0x15	; 21
    2a90:	0c 94 21 1f 	jmp	0x3e42	; 0x3e42 <__prologue_saves__+0x14>
    2a94:	e8 2e       	mov	r14, r24
    2a96:	80 91 f2 03 	lds	r24, 0x03F2
    2a9a:	90 91 f3 03 	lds	r25, 0x03F3
    2a9e:	89 2b       	or	r24, r25
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <lcd_putchar+0x1c>
    2aa2:	05 c1       	rjmp	.+522    	; 0x2cae <lcd_putchar+0x226>
    2aa4:	2a e0       	ldi	r18, 0x0A	; 10
    2aa6:	e2 16       	cp	r14, r18
    2aa8:	09 f4       	brne	.+2      	; 0x2aac <lcd_putchar+0x24>
    2aaa:	46 c0       	rjmp	.+140    	; 0x2b38 <lcd_putchar+0xb0>
    2aac:	38 e0       	ldi	r19, 0x08	; 8
    2aae:	e3 16       	cp	r14, r19
    2ab0:	c9 f4       	brne	.+50     	; 0x2ae4 <lcd_putchar+0x5c>
    2ab2:	80 91 f5 03 	lds	r24, 0x03F5
    2ab6:	81 50       	subi	r24, 0x01	; 1
    2ab8:	80 93 f5 03 	sts	0x03F5, r24
    2abc:	8f 3f       	cpi	r24, 0xFF	; 255
    2abe:	51 f4       	brne	.+20     	; 0x2ad4 <lcd_putchar+0x4c>
    2ac0:	80 91 f4 03 	lds	r24, 0x03F4
    2ac4:	81 50       	subi	r24, 0x01	; 1
    2ac6:	80 93 f4 03 	sts	0x03F4, r24
    2aca:	80 91 c1 03 	lds	r24, 0x03C1
    2ace:	81 50       	subi	r24, 0x01	; 1
    2ad0:	80 93 f5 03 	sts	0x03F5, r24
    2ad4:	80 91 f4 03 	lds	r24, 0x03F4
    2ad8:	8f 3f       	cpi	r24, 0xFF	; 255
    2ada:	09 f0       	breq	.+2      	; 0x2ade <lcd_putchar+0x56>
    2adc:	e2 c0       	rjmp	.+452    	; 0x2ca2 <lcd_putchar+0x21a>
    2ade:	10 92 f4 03 	sts	0x03F4, r1
    2ae2:	dd c0       	rjmp	.+442    	; 0x2c9e <lcd_putchar+0x216>
    2ae4:	8e 2d       	mov	r24, r14
    2ae6:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN12OrangutanLCD9send_dataEh>
    2aea:	20 91 f4 03 	lds	r18, 0x03F4
    2aee:	22 23       	and	r18, r18
    2af0:	c9 f0       	breq	.+50     	; 0x2b24 <lcd_putchar+0x9c>
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	21 50       	subi	r18, 0x01	; 1
    2af6:	30 40       	sbci	r19, 0x00	; 0
    2af8:	80 91 c1 03 	lds	r24, 0x03C1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	ac 01       	movw	r20, r24
    2b00:	24 9f       	mul	r18, r20
    2b02:	c0 01       	movw	r24, r0
    2b04:	25 9f       	mul	r18, r21
    2b06:	90 0d       	add	r25, r0
    2b08:	34 9f       	mul	r19, r20
    2b0a:	90 0d       	add	r25, r0
    2b0c:	11 24       	eor	r1, r1
    2b0e:	20 91 f5 03 	lds	r18, 0x03F5
    2b12:	e0 91 f2 03 	lds	r30, 0x03F2
    2b16:	f0 91 f3 03 	lds	r31, 0x03F3
    2b1a:	e8 0f       	add	r30, r24
    2b1c:	f9 1f       	adc	r31, r25
    2b1e:	e2 0f       	add	r30, r18
    2b20:	f1 1d       	adc	r31, r1
    2b22:	e0 82       	st	Z, r14
    2b24:	80 91 f5 03 	lds	r24, 0x03F5
    2b28:	8f 5f       	subi	r24, 0xFF	; 255
    2b2a:	80 93 f5 03 	sts	0x03F5, r24
    2b2e:	90 91 c1 03 	lds	r25, 0x03C1
    2b32:	89 17       	cp	r24, r25
    2b34:	09 f0       	breq	.+2      	; 0x2b38 <lcd_putchar+0xb0>
    2b36:	bb c0       	rjmp	.+374    	; 0x2cae <lcd_putchar+0x226>
    2b38:	40 91 f4 03 	lds	r20, 0x03F4
    2b3c:	24 2f       	mov	r18, r20
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	80 91 c0 03 	lds	r24, 0x03C0
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	28 17       	cp	r18, r24
    2b4a:	39 07       	cpc	r19, r25
    2b4c:	09 f0       	breq	.+2      	; 0x2b50 <lcd_putchar+0xc8>
    2b4e:	a4 c0       	rjmp	.+328    	; 0x2c98 <lcd_putchar+0x210>
    2b50:	c0 e0       	ldi	r28, 0x00	; 0
    2b52:	d0 e0       	ldi	r29, 0x00	; 0
    2b54:	44 c0       	rjmp	.+136    	; 0x2bde <lcd_putchar+0x156>
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	6c 2f       	mov	r22, r28
    2b5a:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN12OrangutanLCD6gotoXYEhh>
    2b5e:	ff 24       	eor	r15, r15
    2b60:	6e 01       	movw	r12, r28
    2b62:	08 94       	sec
    2b64:	c1 1c       	adc	r12, r1
    2b66:	d1 1c       	adc	r13, r1
    2b68:	35 c0       	rjmp	.+106    	; 0x2bd4 <lcd_putchar+0x14c>
    2b6a:	0f 2d       	mov	r16, r15
    2b6c:	10 e0       	ldi	r17, 0x00	; 0
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	9c 01       	movw	r18, r24
    2b72:	c2 9f       	mul	r28, r18
    2b74:	c0 01       	movw	r24, r0
    2b76:	c3 9f       	mul	r28, r19
    2b78:	90 0d       	add	r25, r0
    2b7a:	d2 9f       	mul	r29, r18
    2b7c:	90 0d       	add	r25, r0
    2b7e:	11 24       	eor	r1, r1
    2b80:	e0 91 f2 03 	lds	r30, 0x03F2
    2b84:	f0 91 f3 03 	lds	r31, 0x03F3
    2b88:	e0 0f       	add	r30, r16
    2b8a:	f1 1f       	adc	r31, r17
    2b8c:	e8 0f       	add	r30, r24
    2b8e:	f9 1f       	adc	r31, r25
    2b90:	80 81       	ld	r24, Z
    2b92:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN12OrangutanLCD9send_dataEh>
    2b96:	e0 91 f2 03 	lds	r30, 0x03F2
    2b9a:	f0 91 f3 03 	lds	r31, 0x03F3
    2b9e:	80 91 c1 03 	lds	r24, 0x03C1
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	c8 9f       	mul	r28, r24
    2ba6:	d0 01       	movw	r26, r0
    2ba8:	c9 9f       	mul	r28, r25
    2baa:	b0 0d       	add	r27, r0
    2bac:	d8 9f       	mul	r29, r24
    2bae:	b0 0d       	add	r27, r0
    2bb0:	11 24       	eor	r1, r1
    2bb2:	e0 0f       	add	r30, r16
    2bb4:	f1 1f       	adc	r31, r17
    2bb6:	ae 0f       	add	r26, r30
    2bb8:	bf 1f       	adc	r27, r31
    2bba:	ac 01       	movw	r20, r24
    2bbc:	c4 9e       	mul	r12, r20
    2bbe:	c0 01       	movw	r24, r0
    2bc0:	c5 9e       	mul	r12, r21
    2bc2:	90 0d       	add	r25, r0
    2bc4:	d4 9e       	mul	r13, r20
    2bc6:	90 0d       	add	r25, r0
    2bc8:	11 24       	eor	r1, r1
    2bca:	e8 0f       	add	r30, r24
    2bcc:	f9 1f       	adc	r31, r25
    2bce:	80 81       	ld	r24, Z
    2bd0:	8c 93       	st	X, r24
    2bd2:	f3 94       	inc	r15
    2bd4:	80 91 c1 03 	lds	r24, 0x03C1
    2bd8:	f8 16       	cp	r15, r24
    2bda:	38 f2       	brcs	.-114    	; 0x2b6a <lcd_putchar+0xe2>
    2bdc:	e6 01       	movw	r28, r12
    2bde:	60 91 c0 03 	lds	r22, 0x03C0
    2be2:	86 2f       	mov	r24, r22
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	02 97       	sbiw	r24, 0x02	; 2
    2be8:	c8 17       	cp	r28, r24
    2bea:	d9 07       	cpc	r29, r25
    2bec:	0c f4       	brge	.+2      	; 0x2bf0 <lcd_putchar+0x168>
    2bee:	b3 cf       	rjmp	.-154    	; 0x2b56 <lcd_putchar+0xce>
    2bf0:	62 30       	cpi	r22, 0x02	; 2
    2bf2:	08 f4       	brcc	.+2      	; 0x2bf6 <lcd_putchar+0x16e>
    2bf4:	40 c0       	rjmp	.+128    	; 0x2c76 <lcd_putchar+0x1ee>
    2bf6:	62 50       	subi	r22, 0x02	; 2
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN12OrangutanLCD6gotoXYEhh>
    2bfe:	ff 24       	eor	r15, r15
    2c00:	40 e2       	ldi	r20, 0x20	; 32
    2c02:	d4 2e       	mov	r13, r20
    2c04:	34 c0       	rjmp	.+104    	; 0x2c6e <lcd_putchar+0x1e6>
    2c06:	0f 2d       	mov	r16, r15
    2c08:	10 e0       	ldi	r17, 0x00	; 0
    2c0a:	80 91 c0 03 	lds	r24, 0x03C0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	02 97       	sbiw	r24, 0x02	; 2
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	ac 01       	movw	r20, r24
    2c16:	42 9f       	mul	r20, r18
    2c18:	c0 01       	movw	r24, r0
    2c1a:	43 9f       	mul	r20, r19
    2c1c:	90 0d       	add	r25, r0
    2c1e:	52 9f       	mul	r21, r18
    2c20:	90 0d       	add	r25, r0
    2c22:	11 24       	eor	r1, r1
    2c24:	e0 91 f2 03 	lds	r30, 0x03F2
    2c28:	f0 91 f3 03 	lds	r31, 0x03F3
    2c2c:	e0 0f       	add	r30, r16
    2c2e:	f1 1f       	adc	r31, r17
    2c30:	e8 0f       	add	r30, r24
    2c32:	f9 1f       	adc	r31, r25
    2c34:	80 81       	ld	r24, Z
    2c36:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN12OrangutanLCD9send_dataEh>
    2c3a:	20 91 c0 03 	lds	r18, 0x03C0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	22 50       	subi	r18, 0x02	; 2
    2c42:	30 40       	sbci	r19, 0x00	; 0
    2c44:	80 91 c1 03 	lds	r24, 0x03C1
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	ac 01       	movw	r20, r24
    2c4c:	24 9f       	mul	r18, r20
    2c4e:	c0 01       	movw	r24, r0
    2c50:	25 9f       	mul	r18, r21
    2c52:	90 0d       	add	r25, r0
    2c54:	34 9f       	mul	r19, r20
    2c56:	90 0d       	add	r25, r0
    2c58:	11 24       	eor	r1, r1
    2c5a:	e0 91 f2 03 	lds	r30, 0x03F2
    2c5e:	f0 91 f3 03 	lds	r31, 0x03F3
    2c62:	e0 0f       	add	r30, r16
    2c64:	f1 1f       	adc	r31, r17
    2c66:	e8 0f       	add	r30, r24
    2c68:	f9 1f       	adc	r31, r25
    2c6a:	d0 82       	st	Z, r13
    2c6c:	f3 94       	inc	r15
    2c6e:	20 91 c1 03 	lds	r18, 0x03C1
    2c72:	f2 16       	cp	r15, r18
    2c74:	40 f2       	brcs	.-112    	; 0x2c06 <lcd_putchar+0x17e>
    2c76:	60 91 c0 03 	lds	r22, 0x03C0
    2c7a:	61 50       	subi	r22, 0x01	; 1
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN12OrangutanLCD6gotoXYEhh>
    2c82:	00 e0       	ldi	r16, 0x00	; 0
    2c84:	04 c0       	rjmp	.+8      	; 0x2c8e <lcd_putchar+0x206>
    2c86:	80 e2       	ldi	r24, 0x20	; 32
    2c88:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN12OrangutanLCD9send_dataEh>
    2c8c:	0f 5f       	subi	r16, 0xFF	; 255
    2c8e:	80 91 c1 03 	lds	r24, 0x03C1
    2c92:	08 17       	cp	r16, r24
    2c94:	c0 f3       	brcs	.-16     	; 0x2c86 <lcd_putchar+0x1fe>
    2c96:	03 c0       	rjmp	.+6      	; 0x2c9e <lcd_putchar+0x216>
    2c98:	4f 5f       	subi	r20, 0xFF	; 255
    2c9a:	40 93 f4 03 	sts	0x03F4, r20
    2c9e:	10 92 f5 03 	sts	0x03F5, r1
    2ca2:	80 91 f5 03 	lds	r24, 0x03F5
    2ca6:	60 91 f4 03 	lds	r22, 0x03F4
    2caa:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN12OrangutanLCD6gotoXYEhh>
    2cae:	2e 2d       	mov	r18, r14
    2cb0:	33 27       	eor	r19, r19
    2cb2:	27 fd       	sbrc	r18, 7
    2cb4:	30 95       	com	r19
    2cb6:	c9 01       	movw	r24, r18
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	e8 e0       	ldi	r30, 0x08	; 8
    2cbe:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <__epilogue_restores__+0x14>

00002cc2 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    2cc2:	ef 92       	push	r14
    2cc4:	ff 92       	push	r15
    2cc6:	0f 93       	push	r16
    2cc8:	1f 93       	push	r17
    2cca:	cf 93       	push	r28
    2ccc:	df 93       	push	r29
    2cce:	7c 01       	movw	r14, r24
    2cd0:	06 2f       	mov	r16, r22
    2cd2:	10 e0       	ldi	r17, 0x00	; 0
    2cd4:	53 e0       	ldi	r21, 0x03	; 3
    2cd6:	00 0f       	add	r16, r16
    2cd8:	11 1f       	adc	r17, r17
    2cda:	5a 95       	dec	r21
    2cdc:	e1 f7       	brne	.-8      	; 0x2cd6 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    2cde:	c0 e0       	ldi	r28, 0x00	; 0
    2ce0:	d0 e0       	ldi	r29, 0x00	; 0
    2ce2:	9e 01       	movw	r18, r28
    2ce4:	20 0f       	add	r18, r16
    2ce6:	82 2f       	mov	r24, r18
    2ce8:	80 64       	ori	r24, 0x40	; 64
    2cea:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN12OrangutanLCD8send_cmdEh>
    2cee:	f7 01       	movw	r30, r14
    2cf0:	ec 0f       	add	r30, r28
    2cf2:	fd 1f       	adc	r31, r29
    2cf4:	e4 91       	lpm	r30, Z+
    2cf6:	8e 2f       	mov	r24, r30
    2cf8:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN12OrangutanLCD9send_dataEh>
    2cfc:	21 96       	adiw	r28, 0x01	; 1
    2cfe:	c8 30       	cpi	r28, 0x08	; 8
    2d00:	d1 05       	cpc	r29, r1
    2d02:	79 f7       	brne	.-34     	; 0x2ce2 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	e6 e0       	ldi	r30, 0x06	; 6
    2d0a:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__epilogue_restores__+0x18>

00002d0e <lcd_load_custom_character>:
    2d0e:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    2d12:	08 95       	ret

00002d14 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    2d14:	60 e0       	ldi	r22, 0x00	; 0
    2d16:	41 e0       	ldi	r20, 0x01	; 1
    2d18:	0e 94 7d 13 	call	0x26fa	; 0x26fa <_ZN12OrangutanLCD4sendEhhh>
    2d1c:	08 95       	ret

00002d1e <_ZN12OrangutanLCD6scrollEhhj>:
    2d1e:	0f 93       	push	r16
    2d20:	1f 93       	push	r17
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	08 2f       	mov	r16, r24
    2d28:	16 2f       	mov	r17, r22
    2d2a:	ea 01       	movw	r28, r20
    2d2c:	0b c0       	rjmp	.+22     	; 0x2d44 <_ZN12OrangutanLCD6scrollEhhj+0x26>
    2d2e:	00 23       	and	r16, r16
    2d30:	11 f4       	brne	.+4      	; 0x2d36 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    2d32:	88 e1       	ldi	r24, 0x18	; 24
    2d34:	01 c0       	rjmp	.+2      	; 0x2d38 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    2d36:	8c e1       	ldi	r24, 0x1C	; 28
    2d38:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN12OrangutanLCD8send_cmdEh>
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <delay_ms>
    2d42:	11 50       	subi	r17, 0x01	; 1
    2d44:	11 23       	and	r17, r17
    2d46:	99 f7       	brne	.-26     	; 0x2d2e <_ZN12OrangutanLCD6scrollEhhj+0x10>
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	1f 91       	pop	r17
    2d4e:	0f 91       	pop	r16
    2d50:	08 95       	ret

00002d52 <lcd_scroll>:
    2d52:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <_ZN12OrangutanLCD6scrollEhhj>
    2d56:	08 95       	ret

00002d58 <serial_get_mode>:
    2d58:	28 2f       	mov	r18, r24
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	f9 01       	movw	r30, r18
    2d5e:	93 e0       	ldi	r25, 0x03	; 3
    2d60:	ee 0f       	add	r30, r30
    2d62:	ff 1f       	adc	r31, r31
    2d64:	9a 95       	dec	r25
    2d66:	e1 f7       	brne	.-8      	; 0x2d60 <serial_get_mode+0x8>
    2d68:	22 0f       	add	r18, r18
    2d6a:	33 1f       	adc	r19, r19
    2d6c:	e2 0f       	add	r30, r18
    2d6e:	f3 1f       	adc	r31, r19
    2d70:	ee 53       	subi	r30, 0x3E	; 62
    2d72:	fc 4f       	sbci	r31, 0xFC	; 252
    2d74:	80 81       	ld	r24, Z
    2d76:	08 95       	ret

00002d78 <serial_get_received_bytes>:
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	ee 0f       	add	r30, r30
    2d7e:	ff 1f       	adc	r31, r31
    2d80:	ee 0f       	add	r30, r30
    2d82:	ff 1f       	adc	r31, r31
    2d84:	e8 0f       	add	r30, r24
    2d86:	f9 1f       	adc	r31, r25
    2d88:	ee 0f       	add	r30, r30
    2d8a:	ff 1f       	adc	r31, r31
    2d8c:	ec 53       	subi	r30, 0x3C	; 60
    2d8e:	fc 4f       	sbci	r31, 0xFC	; 252
    2d90:	80 81       	ld	r24, Z
    2d92:	08 95       	ret

00002d94 <serial_receive_buffer_full>:
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	fc 01       	movw	r30, r24
    2d98:	ee 0f       	add	r30, r30
    2d9a:	ff 1f       	adc	r31, r31
    2d9c:	ee 0f       	add	r30, r30
    2d9e:	ff 1f       	adc	r31, r31
    2da0:	e8 0f       	add	r30, r24
    2da2:	f9 1f       	adc	r31, r25
    2da4:	ee 0f       	add	r30, r30
    2da6:	ff 1f       	adc	r31, r31
    2da8:	ec 53       	subi	r30, 0x3C	; 60
    2daa:	fc 4f       	sbci	r31, 0xFC	; 252
    2dac:	20 81       	ld	r18, Z
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	fc 01       	movw	r30, r24
    2db2:	53 e0       	ldi	r21, 0x03	; 3
    2db4:	ee 0f       	add	r30, r30
    2db6:	ff 1f       	adc	r31, r31
    2db8:	5a 95       	dec	r21
    2dba:	e1 f7       	brne	.-8      	; 0x2db4 <serial_receive_buffer_full+0x20>
    2dbc:	88 0f       	add	r24, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	e8 0f       	add	r30, r24
    2dc2:	f9 1f       	adc	r31, r25
    2dc4:	ee 53       	subi	r30, 0x3E	; 62
    2dc6:	fc 4f       	sbci	r31, 0xFC	; 252
    2dc8:	84 81       	ldd	r24, Z+4	; 0x04
    2dca:	28 17       	cp	r18, r24
    2dcc:	09 f4       	brne	.+2      	; 0x2dd0 <serial_receive_buffer_full+0x3c>
    2dce:	31 e0       	ldi	r19, 0x01	; 1
    2dd0:	83 2f       	mov	r24, r19
    2dd2:	08 95       	ret

00002dd4 <serial_get_sent_bytes>:
    2dd4:	28 2f       	mov	r18, r24
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	f9 01       	movw	r30, r18
    2dda:	b3 e0       	ldi	r27, 0x03	; 3
    2ddc:	ee 0f       	add	r30, r30
    2dde:	ff 1f       	adc	r31, r31
    2de0:	ba 95       	dec	r27
    2de2:	e1 f7       	brne	.-8      	; 0x2ddc <serial_get_sent_bytes+0x8>
    2de4:	22 0f       	add	r18, r18
    2de6:	33 1f       	adc	r19, r19
    2de8:	e2 0f       	add	r30, r18
    2dea:	f3 1f       	adc	r31, r19
    2dec:	ee 53       	subi	r30, 0x3E	; 62
    2dee:	fc 4f       	sbci	r31, 0xFC	; 252
    2df0:	81 81       	ldd	r24, Z+1	; 0x01
    2df2:	08 95       	ret

00002df4 <serial_send_buffer_empty>:
    2df4:	28 2f       	mov	r18, r24
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	f9 01       	movw	r30, r18
    2dfa:	73 e0       	ldi	r23, 0x03	; 3
    2dfc:	ee 0f       	add	r30, r30
    2dfe:	ff 1f       	adc	r31, r31
    2e00:	7a 95       	dec	r23
    2e02:	e1 f7       	brne	.-8      	; 0x2dfc <serial_send_buffer_empty+0x8>
    2e04:	22 0f       	add	r18, r18
    2e06:	33 1f       	adc	r19, r19
    2e08:	e2 0f       	add	r30, r18
    2e0a:	f3 1f       	adc	r31, r19
    2e0c:	ee 53       	subi	r30, 0x3E	; 62
    2e0e:	fc 4f       	sbci	r31, 0xFC	; 252
    2e10:	91 81       	ldd	r25, Z+1	; 0x01
    2e12:	40 e0       	ldi	r20, 0x00	; 0
    2e14:	28 2f       	mov	r18, r24
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	f9 01       	movw	r30, r18
    2e1a:	53 e0       	ldi	r21, 0x03	; 3
    2e1c:	ee 0f       	add	r30, r30
    2e1e:	ff 1f       	adc	r31, r31
    2e20:	5a 95       	dec	r21
    2e22:	e1 f7       	brne	.-8      	; 0x2e1c <serial_send_buffer_empty+0x28>
    2e24:	22 0f       	add	r18, r18
    2e26:	33 1f       	adc	r19, r19
    2e28:	e2 0f       	add	r30, r18
    2e2a:	f3 1f       	adc	r31, r19
    2e2c:	ee 53       	subi	r30, 0x3E	; 62
    2e2e:	fc 4f       	sbci	r31, 0xFC	; 252
    2e30:	83 81       	ldd	r24, Z+3	; 0x03
    2e32:	98 17       	cp	r25, r24
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <serial_send_buffer_empty+0x44>
    2e36:	41 e0       	ldi	r20, 0x01	; 1
    2e38:	84 2f       	mov	r24, r20
    2e3a:	08 95       	ret

00002e3c <_ZN15OrangutanSerialC2Ev>:
    2e3c:	08 95       	ret

00002e3e <_ZN15OrangutanSerialC1Ev>:
    2e3e:	08 95       	ret

00002e40 <_ZN15OrangutanSerial8initPortEh>:
    2e40:	88 23       	and	r24, r24
    2e42:	21 f0       	breq	.+8      	; 0x2e4c <_ZN15OrangutanSerial8initPortEh+0xc>
    2e44:	81 30       	cpi	r24, 0x01	; 1
    2e46:	09 f0       	breq	.+2      	; 0x2e4a <_ZN15OrangutanSerial8initPortEh+0xa>
    2e48:	44 c0       	rjmp	.+136    	; 0x2ed2 <_ZN15OrangutanSerial8initPortEh+0x92>
    2e4a:	1d c0       	rjmp	.+58     	; 0x2e86 <_ZN15OrangutanSerial8initPortEh+0x46>
    2e4c:	20 91 c2 03 	lds	r18, 0x03C2
    2e50:	22 23       	and	r18, r18
    2e52:	11 f4       	brne	.+4      	; 0x2e58 <_ZN15OrangutanSerial8initPortEh+0x18>
    2e54:	88 e9       	ldi	r24, 0x98	; 152
    2e56:	01 c0       	rjmp	.+2      	; 0x2e5a <_ZN15OrangutanSerial8initPortEh+0x1a>
    2e58:	88 e1       	ldi	r24, 0x18	; 24
    2e5a:	80 93 c1 00 	sts	0x00C1, r24
    2e5e:	80 91 c8 03 	lds	r24, 0x03C8
    2e62:	90 91 c9 03 	lds	r25, 0x03C9
    2e66:	89 2b       	or	r24, r25
    2e68:	61 f1       	breq	.+88     	; 0x2ec2 <_ZN15OrangutanSerial8initPortEh+0x82>
    2e6a:	90 91 c3 03 	lds	r25, 0x03C3
    2e6e:	80 91 c5 03 	lds	r24, 0x03C5
    2e72:	98 17       	cp	r25, r24
    2e74:	30 f5       	brcc	.+76     	; 0x2ec2 <_ZN15OrangutanSerial8initPortEh+0x82>
    2e76:	22 23       	and	r18, r18
    2e78:	21 f5       	brne	.+72     	; 0x2ec2 <_ZN15OrangutanSerial8initPortEh+0x82>
    2e7a:	80 91 c1 00 	lds	r24, 0x00C1
    2e7e:	80 62       	ori	r24, 0x20	; 32
    2e80:	80 93 c1 00 	sts	0x00C1, r24
    2e84:	1c c0       	rjmp	.+56     	; 0x2ebe <_ZN15OrangutanSerial8initPortEh+0x7e>
    2e86:	20 91 cc 03 	lds	r18, 0x03CC
    2e8a:	22 23       	and	r18, r18
    2e8c:	11 f4       	brne	.+4      	; 0x2e92 <_ZN15OrangutanSerial8initPortEh+0x52>
    2e8e:	88 e9       	ldi	r24, 0x98	; 152
    2e90:	01 c0       	rjmp	.+2      	; 0x2e94 <_ZN15OrangutanSerial8initPortEh+0x54>
    2e92:	88 e1       	ldi	r24, 0x18	; 24
    2e94:	80 93 c9 00 	sts	0x00C9, r24
    2e98:	80 91 d2 03 	lds	r24, 0x03D2
    2e9c:	90 91 d3 03 	lds	r25, 0x03D3
    2ea0:	89 2b       	or	r24, r25
    2ea2:	99 f0       	breq	.+38     	; 0x2eca <_ZN15OrangutanSerial8initPortEh+0x8a>
    2ea4:	90 91 cd 03 	lds	r25, 0x03CD
    2ea8:	80 91 cf 03 	lds	r24, 0x03CF
    2eac:	98 17       	cp	r25, r24
    2eae:	68 f4       	brcc	.+26     	; 0x2eca <_ZN15OrangutanSerial8initPortEh+0x8a>
    2eb0:	22 23       	and	r18, r18
    2eb2:	59 f4       	brne	.+22     	; 0x2eca <_ZN15OrangutanSerial8initPortEh+0x8a>
    2eb4:	80 91 c9 00 	lds	r24, 0x00C9
    2eb8:	80 62       	ori	r24, 0x20	; 32
    2eba:	80 93 c9 00 	sts	0x00C9, r24
    2ebe:	78 94       	sei
    2ec0:	08 95       	ret
    2ec2:	80 91 c1 00 	lds	r24, 0x00C1
    2ec6:	8f 7d       	andi	r24, 0xDF	; 223
    2ec8:	db cf       	rjmp	.-74     	; 0x2e80 <_ZN15OrangutanSerial8initPortEh+0x40>
    2eca:	80 91 c9 00 	lds	r24, 0x00C9
    2ece:	8f 7d       	andi	r24, 0xDF	; 223
    2ed0:	f4 cf       	rjmp	.-24     	; 0x2eba <_ZN15OrangutanSerial8initPortEh+0x7a>
    2ed2:	08 95       	ret

00002ed4 <serial_set_mode>:
    2ed4:	28 2f       	mov	r18, r24
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	f9 01       	movw	r30, r18
    2eda:	b3 e0       	ldi	r27, 0x03	; 3
    2edc:	ee 0f       	add	r30, r30
    2ede:	ff 1f       	adc	r31, r31
    2ee0:	ba 95       	dec	r27
    2ee2:	e1 f7       	brne	.-8      	; 0x2edc <serial_set_mode+0x8>
    2ee4:	22 0f       	add	r18, r18
    2ee6:	33 1f       	adc	r19, r19
    2ee8:	e2 0f       	add	r30, r18
    2eea:	f3 1f       	adc	r31, r19
    2eec:	ee 53       	subi	r30, 0x3E	; 62
    2eee:	fc 4f       	sbci	r31, 0xFC	; 252
    2ef0:	60 83       	st	Z, r22
    2ef2:	0e 94 20 17 	call	0x2e40	; 0x2e40 <_ZN15OrangutanSerial8initPortEh>
    2ef6:	08 95       	ret

00002ef8 <_ZN15OrangutanSerial11setBaudRateEhm>:
    2ef8:	a0 e0       	ldi	r26, 0x00	; 0
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	e2 e8       	ldi	r30, 0x82	; 130
    2efe:	f7 e1       	ldi	r31, 0x17	; 23
    2f00:	0c 94 22 1f 	jmp	0x3e44	; 0x3e44 <__prologue_saves__+0x16>
    2f04:	d8 2e       	mov	r13, r24
    2f06:	7a 01       	movw	r14, r20
    2f08:	8b 01       	movw	r16, r22
    2f0a:	0e 94 20 17 	call	0x2e40	; 0x2e40 <_ZN15OrangutanSerial8initPortEh>
    2f0e:	82 e0       	ldi	r24, 0x02	; 2
    2f10:	d8 16       	cp	r13, r24
    2f12:	19 f1       	breq	.+70     	; 0x2f5a <_ZN15OrangutanSerial11setBaudRateEhm+0x62>
    2f14:	dd 20       	and	r13, r13
    2f16:	19 f0       	breq	.+6      	; 0x2f1e <_ZN15OrangutanSerial11setBaudRateEhm+0x26>
    2f18:	cc ec       	ldi	r28, 0xCC	; 204
    2f1a:	d0 e0       	ldi	r29, 0x00	; 0
    2f1c:	02 c0       	rjmp	.+4      	; 0x2f22 <_ZN15OrangutanSerial11setBaudRateEhm+0x2a>
    2f1e:	c4 ec       	ldi	r28, 0xC4	; 196
    2f20:	d0 e0       	ldi	r29, 0x00	; 0
    2f22:	60 ea       	ldi	r22, 0xA0	; 160
    2f24:	75 e2       	ldi	r23, 0x25	; 37
    2f26:	86 e2       	ldi	r24, 0x26	; 38
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	6e 19       	sub	r22, r14
    2f2c:	7f 09       	sbc	r23, r15
    2f2e:	80 0b       	sbc	r24, r16
    2f30:	91 0b       	sbc	r25, r17
    2f32:	33 e0       	ldi	r19, 0x03	; 3
    2f34:	66 0f       	add	r22, r22
    2f36:	77 1f       	adc	r23, r23
    2f38:	88 1f       	adc	r24, r24
    2f3a:	99 1f       	adc	r25, r25
    2f3c:	3a 95       	dec	r19
    2f3e:	d1 f7       	brne	.-12     	; 0x2f34 <_ZN15OrangutanSerial11setBaudRateEhm+0x3c>
    2f40:	24 e0       	ldi	r18, 0x04	; 4
    2f42:	ee 0c       	add	r14, r14
    2f44:	ff 1c       	adc	r15, r15
    2f46:	00 1f       	adc	r16, r16
    2f48:	11 1f       	adc	r17, r17
    2f4a:	2a 95       	dec	r18
    2f4c:	d1 f7       	brne	.-12     	; 0x2f42 <_ZN15OrangutanSerial11setBaudRateEhm+0x4a>
    2f4e:	a8 01       	movw	r20, r16
    2f50:	97 01       	movw	r18, r14
    2f52:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <__udivmodsi4>
    2f56:	39 83       	std	Y+1, r19	; 0x01
    2f58:	28 83       	st	Y, r18
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	e7 e0       	ldi	r30, 0x07	; 7
    2f60:	0c 94 3e 1f 	jmp	0x3e7c	; 0x3e7c <__epilogue_restores__+0x16>

00002f64 <serial_set_baud_rate>:
    2f64:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_ZN15OrangutanSerial11setBaudRateEhm>
    2f68:	08 95       	ret

00002f6a <_ZN15OrangutanSerial7setModeEhh>:
    2f6a:	28 2f       	mov	r18, r24
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	f9 01       	movw	r30, r18
    2f70:	53 e0       	ldi	r21, 0x03	; 3
    2f72:	ee 0f       	add	r30, r30
    2f74:	ff 1f       	adc	r31, r31
    2f76:	5a 95       	dec	r21
    2f78:	e1 f7       	brne	.-8      	; 0x2f72 <_ZN15OrangutanSerial7setModeEhh+0x8>
    2f7a:	22 0f       	add	r18, r18
    2f7c:	33 1f       	adc	r19, r19
    2f7e:	e2 0f       	add	r30, r18
    2f80:	f3 1f       	adc	r31, r19
    2f82:	ee 53       	subi	r30, 0x3E	; 62
    2f84:	fc 4f       	sbci	r31, 0xFC	; 252
    2f86:	60 83       	st	Z, r22
    2f88:	0e 94 20 17 	call	0x2e40	; 0x2e40 <_ZN15OrangutanSerial8initPortEh>
    2f8c:	08 95       	ret

00002f8e <_ZN15OrangutanSerial7receiveEhPch>:
    2f8e:	58 2f       	mov	r21, r24
    2f90:	82 30       	cpi	r24, 0x02	; 2
    2f92:	51 f0       	breq	.+20     	; 0x2fa8 <_ZN15OrangutanSerial7receiveEhPch+0x1a>
    2f94:	88 23       	and	r24, r24
    2f96:	19 f0       	breq	.+6      	; 0x2f9e <_ZN15OrangutanSerial7receiveEhPch+0x10>
    2f98:	e9 ec       	ldi	r30, 0xC9	; 201
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	02 c0       	rjmp	.+4      	; 0x2fa2 <_ZN15OrangutanSerial7receiveEhPch+0x14>
    2f9e:	e1 ec       	ldi	r30, 0xC1	; 193
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
    2fa4:	8f 77       	andi	r24, 0x7F	; 127
    2fa6:	80 83       	st	Z, r24
    2fa8:	25 2f       	mov	r18, r21
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	d9 01       	movw	r26, r18
    2fae:	aa 0f       	add	r26, r26
    2fb0:	bb 1f       	adc	r27, r27
    2fb2:	c9 01       	movw	r24, r18
    2fb4:	e3 e0       	ldi	r30, 0x03	; 3
    2fb6:	88 0f       	add	r24, r24
    2fb8:	99 1f       	adc	r25, r25
    2fba:	ea 95       	dec	r30
    2fbc:	e1 f7       	brne	.-8      	; 0x2fb6 <_ZN15OrangutanSerial7receiveEhPch+0x28>
    2fbe:	a8 0f       	add	r26, r24
    2fc0:	b9 1f       	adc	r27, r25
    2fc2:	ae 53       	subi	r26, 0x3E	; 62
    2fc4:	bc 4f       	sbci	r27, 0xFC	; 252
    2fc6:	19 96       	adiw	r26, 0x09	; 9
    2fc8:	7c 93       	st	X, r23
    2fca:	6e 93       	st	-X, r22
    2fcc:	18 97       	sbiw	r26, 0x08	; 8
    2fce:	f9 01       	movw	r30, r18
    2fd0:	ee 0f       	add	r30, r30
    2fd2:	ff 1f       	adc	r31, r31
    2fd4:	ee 0f       	add	r30, r30
    2fd6:	ff 1f       	adc	r31, r31
    2fd8:	e2 0f       	add	r30, r18
    2fda:	f3 1f       	adc	r31, r19
    2fdc:	ee 0f       	add	r30, r30
    2fde:	ff 1f       	adc	r31, r31
    2fe0:	ec 53       	subi	r30, 0x3C	; 60
    2fe2:	fc 4f       	sbci	r31, 0xFC	; 252
    2fe4:	10 82       	st	Z, r1
    2fe6:	14 96       	adiw	r26, 0x04	; 4
    2fe8:	4c 93       	st	X, r20
    2fea:	14 97       	sbiw	r26, 0x04	; 4
    2fec:	15 96       	adiw	r26, 0x05	; 5
    2fee:	1c 92       	st	X, r1
    2ff0:	15 97       	sbiw	r26, 0x05	; 5
    2ff2:	52 30       	cpi	r21, 0x02	; 2
    2ff4:	69 f0       	breq	.+26     	; 0x3010 <_ZN15OrangutanSerial7receiveEhPch+0x82>
    2ff6:	8c 91       	ld	r24, X
    2ff8:	88 23       	and	r24, r24
    2ffa:	51 f4       	brne	.+20     	; 0x3010 <_ZN15OrangutanSerial7receiveEhPch+0x82>
    2ffc:	55 23       	and	r21, r21
    2ffe:	19 f0       	breq	.+6      	; 0x3006 <_ZN15OrangutanSerial7receiveEhPch+0x78>
    3000:	e9 ec       	ldi	r30, 0xC9	; 201
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	02 c0       	rjmp	.+4      	; 0x300a <_ZN15OrangutanSerial7receiveEhPch+0x7c>
    3006:	e1 ec       	ldi	r30, 0xC1	; 193
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	80 81       	ld	r24, Z
    300c:	80 68       	ori	r24, 0x80	; 128
    300e:	80 83       	st	Z, r24
    3010:	08 95       	ret

00003012 <serial_receive>:
    3012:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <_ZN15OrangutanSerial7receiveEhPch>
    3016:	08 95       	ret

00003018 <_ZN15OrangutanSerial11receiveRingEhPch>:
    3018:	58 2f       	mov	r21, r24
    301a:	82 30       	cpi	r24, 0x02	; 2
    301c:	51 f0       	breq	.+20     	; 0x3032 <_ZN15OrangutanSerial11receiveRingEhPch+0x1a>
    301e:	88 23       	and	r24, r24
    3020:	19 f0       	breq	.+6      	; 0x3028 <_ZN15OrangutanSerial11receiveRingEhPch+0x10>
    3022:	e9 ec       	ldi	r30, 0xC9	; 201
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	02 c0       	rjmp	.+4      	; 0x302c <_ZN15OrangutanSerial11receiveRingEhPch+0x14>
    3028:	e1 ec       	ldi	r30, 0xC1	; 193
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	8f 77       	andi	r24, 0x7F	; 127
    3030:	80 83       	st	Z, r24
    3032:	25 2f       	mov	r18, r21
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	d9 01       	movw	r26, r18
    3038:	aa 0f       	add	r26, r26
    303a:	bb 1f       	adc	r27, r27
    303c:	c9 01       	movw	r24, r18
    303e:	e3 e0       	ldi	r30, 0x03	; 3
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	ea 95       	dec	r30
    3046:	e1 f7       	brne	.-8      	; 0x3040 <_ZN15OrangutanSerial11receiveRingEhPch+0x28>
    3048:	a8 0f       	add	r26, r24
    304a:	b9 1f       	adc	r27, r25
    304c:	ae 53       	subi	r26, 0x3E	; 62
    304e:	bc 4f       	sbci	r27, 0xFC	; 252
    3050:	19 96       	adiw	r26, 0x09	; 9
    3052:	7c 93       	st	X, r23
    3054:	6e 93       	st	-X, r22
    3056:	18 97       	sbiw	r26, 0x08	; 8
    3058:	f9 01       	movw	r30, r18
    305a:	ee 0f       	add	r30, r30
    305c:	ff 1f       	adc	r31, r31
    305e:	ee 0f       	add	r30, r30
    3060:	ff 1f       	adc	r31, r31
    3062:	e2 0f       	add	r30, r18
    3064:	f3 1f       	adc	r31, r19
    3066:	ee 0f       	add	r30, r30
    3068:	ff 1f       	adc	r31, r31
    306a:	ec 53       	subi	r30, 0x3C	; 60
    306c:	fc 4f       	sbci	r31, 0xFC	; 252
    306e:	10 82       	st	Z, r1
    3070:	14 96       	adiw	r26, 0x04	; 4
    3072:	4c 93       	st	X, r20
    3074:	14 97       	sbiw	r26, 0x04	; 4
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	15 96       	adiw	r26, 0x05	; 5
    307a:	8c 93       	st	X, r24
    307c:	15 97       	sbiw	r26, 0x05	; 5
    307e:	52 30       	cpi	r21, 0x02	; 2
    3080:	69 f0       	breq	.+26     	; 0x309c <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    3082:	8c 91       	ld	r24, X
    3084:	88 23       	and	r24, r24
    3086:	51 f4       	brne	.+20     	; 0x309c <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    3088:	55 23       	and	r21, r21
    308a:	19 f0       	breq	.+6      	; 0x3092 <_ZN15OrangutanSerial11receiveRingEhPch+0x7a>
    308c:	e9 ec       	ldi	r30, 0xC9	; 201
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <_ZN15OrangutanSerial11receiveRingEhPch+0x7e>
    3092:	e1 ec       	ldi	r30, 0xC1	; 193
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	80 81       	ld	r24, Z
    3098:	80 68       	ori	r24, 0x80	; 128
    309a:	80 83       	st	Z, r24
    309c:	08 95       	ret

0000309e <serial_receive_ring>:
    309e:	0e 94 0c 18 	call	0x3018	; 0x3018 <_ZN15OrangutanSerial11receiveRingEhPch>
    30a2:	08 95       	ret

000030a4 <_ZN15OrangutanSerial13cancelReceiveEh>:
    30a4:	60 e0       	ldi	r22, 0x00	; 0
    30a6:	70 e0       	ldi	r23, 0x00	; 0
    30a8:	40 e0       	ldi	r20, 0x00	; 0
    30aa:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <_ZN15OrangutanSerial7receiveEhPch>
    30ae:	08 95       	ret

000030b0 <serial_cancel_receive>:
    30b0:	0e 94 52 18 	call	0x30a4	; 0x30a4 <_ZN15OrangutanSerial13cancelReceiveEh>
    30b4:	08 95       	ret

000030b6 <__vector_20>:
    30b6:	1f 92       	push	r1
    30b8:	0f 92       	push	r0
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	0f 92       	push	r0
    30be:	0b b6       	in	r0, 0x3b	; 59
    30c0:	0f 92       	push	r0
    30c2:	11 24       	eor	r1, r1
    30c4:	2f 93       	push	r18
    30c6:	8f 93       	push	r24
    30c8:	9f 93       	push	r25
    30ca:	ef 93       	push	r30
    30cc:	ff 93       	push	r31
    30ce:	20 91 c6 00 	lds	r18, 0x00C6
    30d2:	e0 91 ca 03 	lds	r30, 0x03CA
    30d6:	f0 91 cb 03 	lds	r31, 0x03CB
    30da:	30 97       	sbiw	r30, 0x00	; 0
    30dc:	81 f0       	breq	.+32     	; 0x30fe <__vector_20+0x48>
    30de:	90 91 c4 03 	lds	r25, 0x03C4
    30e2:	80 91 c6 03 	lds	r24, 0x03C6
    30e6:	98 17       	cp	r25, r24
    30e8:	50 f4       	brcc	.+20     	; 0x30fe <__vector_20+0x48>
    30ea:	80 91 c4 03 	lds	r24, 0x03C4
    30ee:	e8 0f       	add	r30, r24
    30f0:	f1 1d       	adc	r31, r1
    30f2:	20 83       	st	Z, r18
    30f4:	80 91 c4 03 	lds	r24, 0x03C4
    30f8:	8f 5f       	subi	r24, 0xFF	; 255
    30fa:	80 93 c4 03 	sts	0x03C4, r24
    30fe:	90 91 c4 03 	lds	r25, 0x03C4
    3102:	80 91 c6 03 	lds	r24, 0x03C6
    3106:	98 17       	cp	r25, r24
    3108:	31 f4       	brne	.+12     	; 0x3116 <__vector_20+0x60>
    310a:	80 91 c7 03 	lds	r24, 0x03C7
    310e:	88 23       	and	r24, r24
    3110:	11 f0       	breq	.+4      	; 0x3116 <__vector_20+0x60>
    3112:	10 92 c4 03 	sts	0x03C4, r1
    3116:	ff 91       	pop	r31
    3118:	ef 91       	pop	r30
    311a:	9f 91       	pop	r25
    311c:	8f 91       	pop	r24
    311e:	2f 91       	pop	r18
    3120:	0f 90       	pop	r0
    3122:	0b be       	out	0x3b, r0	; 59
    3124:	0f 90       	pop	r0
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	0f 90       	pop	r0
    312a:	1f 90       	pop	r1
    312c:	18 95       	reti

0000312e <__vector_28>:
    312e:	1f 92       	push	r1
    3130:	0f 92       	push	r0
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	0f 92       	push	r0
    3136:	0b b6       	in	r0, 0x3b	; 59
    3138:	0f 92       	push	r0
    313a:	11 24       	eor	r1, r1
    313c:	2f 93       	push	r18
    313e:	8f 93       	push	r24
    3140:	9f 93       	push	r25
    3142:	ef 93       	push	r30
    3144:	ff 93       	push	r31
    3146:	20 91 ce 00 	lds	r18, 0x00CE
    314a:	e0 91 d4 03 	lds	r30, 0x03D4
    314e:	f0 91 d5 03 	lds	r31, 0x03D5
    3152:	30 97       	sbiw	r30, 0x00	; 0
    3154:	81 f0       	breq	.+32     	; 0x3176 <__vector_28+0x48>
    3156:	90 91 ce 03 	lds	r25, 0x03CE
    315a:	80 91 d0 03 	lds	r24, 0x03D0
    315e:	98 17       	cp	r25, r24
    3160:	50 f4       	brcc	.+20     	; 0x3176 <__vector_28+0x48>
    3162:	80 91 ce 03 	lds	r24, 0x03CE
    3166:	e8 0f       	add	r30, r24
    3168:	f1 1d       	adc	r31, r1
    316a:	20 83       	st	Z, r18
    316c:	80 91 ce 03 	lds	r24, 0x03CE
    3170:	8f 5f       	subi	r24, 0xFF	; 255
    3172:	80 93 ce 03 	sts	0x03CE, r24
    3176:	90 91 ce 03 	lds	r25, 0x03CE
    317a:	80 91 d0 03 	lds	r24, 0x03D0
    317e:	98 17       	cp	r25, r24
    3180:	31 f4       	brne	.+12     	; 0x318e <__vector_28+0x60>
    3182:	80 91 d1 03 	lds	r24, 0x03D1
    3186:	88 23       	and	r24, r24
    3188:	11 f0       	breq	.+4      	; 0x318e <__vector_28+0x60>
    318a:	10 92 ce 03 	sts	0x03CE, r1
    318e:	ff 91       	pop	r31
    3190:	ef 91       	pop	r30
    3192:	9f 91       	pop	r25
    3194:	8f 91       	pop	r24
    3196:	2f 91       	pop	r18
    3198:	0f 90       	pop	r0
    319a:	0b be       	out	0x3b, r0	; 59
    319c:	0f 90       	pop	r0
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	0f 90       	pop	r0
    31a2:	1f 90       	pop	r1
    31a4:	18 95       	reti

000031a6 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    31a6:	cf 93       	push	r28
    31a8:	df 93       	push	r29
    31aa:	38 2f       	mov	r19, r24
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	fc 01       	movw	r30, r24
    31b0:	53 e0       	ldi	r21, 0x03	; 3
    31b2:	ee 0f       	add	r30, r30
    31b4:	ff 1f       	adc	r31, r31
    31b6:	5a 95       	dec	r21
    31b8:	e1 f7       	brne	.-8      	; 0x31b2 <_ZN15OrangutanSerial11uart_tx_isrEh+0xc>
    31ba:	88 0f       	add	r24, r24
    31bc:	99 1f       	adc	r25, r25
    31be:	e8 0f       	add	r30, r24
    31c0:	f9 1f       	adc	r31, r25
    31c2:	ee 53       	subi	r30, 0x3E	; 62
    31c4:	fc 4f       	sbci	r31, 0xFC	; 252
    31c6:	a6 81       	ldd	r26, Z+6	; 0x06
    31c8:	b7 81       	ldd	r27, Z+7	; 0x07
    31ca:	10 97       	sbiw	r26, 0x00	; 0
    31cc:	09 f4       	brne	.+2      	; 0x31d0 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2a>
    31ce:	64 c0       	rjmp	.+200    	; 0x3298 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    31d0:	83 2f       	mov	r24, r19
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	fc 01       	movw	r30, r24
    31d6:	23 e0       	ldi	r18, 0x03	; 3
    31d8:	ee 0f       	add	r30, r30
    31da:	ff 1f       	adc	r31, r31
    31dc:	2a 95       	dec	r18
    31de:	e1 f7       	brne	.-8      	; 0x31d8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x32>
    31e0:	88 0f       	add	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	e8 0f       	add	r30, r24
    31e6:	f9 1f       	adc	r31, r25
    31e8:	ee 53       	subi	r30, 0x3E	; 62
    31ea:	fc 4f       	sbci	r31, 0xFC	; 252
    31ec:	21 81       	ldd	r18, Z+1	; 0x01
    31ee:	83 2f       	mov	r24, r19
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	fc 01       	movw	r30, r24
    31f4:	63 e0       	ldi	r22, 0x03	; 3
    31f6:	ee 0f       	add	r30, r30
    31f8:	ff 1f       	adc	r31, r31
    31fa:	6a 95       	dec	r22
    31fc:	e1 f7       	brne	.-8      	; 0x31f6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x50>
    31fe:	88 0f       	add	r24, r24
    3200:	99 1f       	adc	r25, r25
    3202:	e8 0f       	add	r30, r24
    3204:	f9 1f       	adc	r31, r25
    3206:	ee 53       	subi	r30, 0x3E	; 62
    3208:	fc 4f       	sbci	r31, 0xFC	; 252
    320a:	83 81       	ldd	r24, Z+3	; 0x03
    320c:	28 17       	cp	r18, r24
    320e:	08 f0       	brcs	.+2      	; 0x3212 <_ZN15OrangutanSerial11uart_tx_isrEh+0x6c>
    3210:	43 c0       	rjmp	.+134    	; 0x3298 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    3212:	33 23       	and	r19, r19
    3214:	19 f0       	breq	.+6      	; 0x321c <_ZN15OrangutanSerial11uart_tx_isrEh+0x76>
    3216:	e8 ec       	ldi	r30, 0xC8	; 200
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	02 c0       	rjmp	.+4      	; 0x3220 <_ZN15OrangutanSerial11uart_tx_isrEh+0x7a>
    321c:	e0 ec       	ldi	r30, 0xC0	; 192
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
    3222:	85 ff       	sbrs	r24, 5
    3224:	39 c0       	rjmp	.+114    	; 0x3298 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    3226:	33 23       	and	r19, r19
    3228:	19 f0       	breq	.+6      	; 0x3230 <_ZN15OrangutanSerial11uart_tx_isrEh+0x8a>
    322a:	ce ec       	ldi	r28, 0xCE	; 206
    322c:	d0 e0       	ldi	r29, 0x00	; 0
    322e:	02 c0       	rjmp	.+4      	; 0x3234 <_ZN15OrangutanSerial11uart_tx_isrEh+0x8e>
    3230:	c6 ec       	ldi	r28, 0xC6	; 198
    3232:	d0 e0       	ldi	r29, 0x00	; 0
    3234:	83 2f       	mov	r24, r19
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	fc 01       	movw	r30, r24
    323a:	43 e0       	ldi	r20, 0x03	; 3
    323c:	ee 0f       	add	r30, r30
    323e:	ff 1f       	adc	r31, r31
    3240:	4a 95       	dec	r20
    3242:	e1 f7       	brne	.-8      	; 0x323c <_ZN15OrangutanSerial11uart_tx_isrEh+0x96>
    3244:	88 0f       	add	r24, r24
    3246:	99 1f       	adc	r25, r25
    3248:	e8 0f       	add	r30, r24
    324a:	f9 1f       	adc	r31, r25
    324c:	ee 53       	subi	r30, 0x3E	; 62
    324e:	fc 4f       	sbci	r31, 0xFC	; 252
    3250:	81 81       	ldd	r24, Z+1	; 0x01
    3252:	a8 0f       	add	r26, r24
    3254:	b1 1d       	adc	r27, r1
    3256:	8c 91       	ld	r24, X
    3258:	88 83       	st	Y, r24
    325a:	83 2f       	mov	r24, r19
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	fc 01       	movw	r30, r24
    3260:	73 e0       	ldi	r23, 0x03	; 3
    3262:	ee 0f       	add	r30, r30
    3264:	ff 1f       	adc	r31, r31
    3266:	7a 95       	dec	r23
    3268:	e1 f7       	brne	.-8      	; 0x3262 <_ZN15OrangutanSerial11uart_tx_isrEh+0xbc>
    326a:	88 0f       	add	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	e8 0f       	add	r30, r24
    3270:	f9 1f       	adc	r31, r25
    3272:	ee 53       	subi	r30, 0x3E	; 62
    3274:	fc 4f       	sbci	r31, 0xFC	; 252
    3276:	21 81       	ldd	r18, Z+1	; 0x01
    3278:	2f 5f       	subi	r18, 0xFF	; 255
    327a:	83 2f       	mov	r24, r19
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	fc 01       	movw	r30, r24
    3280:	53 e0       	ldi	r21, 0x03	; 3
    3282:	ee 0f       	add	r30, r30
    3284:	ff 1f       	adc	r31, r31
    3286:	5a 95       	dec	r21
    3288:	e1 f7       	brne	.-8      	; 0x3282 <_ZN15OrangutanSerial11uart_tx_isrEh+0xdc>
    328a:	88 0f       	add	r24, r24
    328c:	99 1f       	adc	r25, r25
    328e:	e8 0f       	add	r30, r24
    3290:	f9 1f       	adc	r31, r25
    3292:	ee 53       	subi	r30, 0x3E	; 62
    3294:	fc 4f       	sbci	r31, 0xFC	; 252
    3296:	21 83       	std	Z+1, r18	; 0x01
    3298:	83 2f       	mov	r24, r19
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	fc 01       	movw	r30, r24
    329e:	b3 e0       	ldi	r27, 0x03	; 3
    32a0:	ee 0f       	add	r30, r30
    32a2:	ff 1f       	adc	r31, r31
    32a4:	ba 95       	dec	r27
    32a6:	e1 f7       	brne	.-8      	; 0x32a0 <_ZN15OrangutanSerial11uart_tx_isrEh+0xfa>
    32a8:	88 0f       	add	r24, r24
    32aa:	99 1f       	adc	r25, r25
    32ac:	e8 0f       	add	r30, r24
    32ae:	f9 1f       	adc	r31, r25
    32b0:	ee 53       	subi	r30, 0x3E	; 62
    32b2:	fc 4f       	sbci	r31, 0xFC	; 252
    32b4:	86 81       	ldd	r24, Z+6	; 0x06
    32b6:	97 81       	ldd	r25, Z+7	; 0x07
    32b8:	89 2b       	or	r24, r25
    32ba:	09 f4       	brne	.+2      	; 0x32be <_ZN15OrangutanSerial11uart_tx_isrEh+0x118>
    32bc:	43 c0       	rjmp	.+134    	; 0x3344 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    32be:	83 2f       	mov	r24, r19
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	fc 01       	movw	r30, r24
    32c4:	73 e0       	ldi	r23, 0x03	; 3
    32c6:	ee 0f       	add	r30, r30
    32c8:	ff 1f       	adc	r31, r31
    32ca:	7a 95       	dec	r23
    32cc:	e1 f7       	brne	.-8      	; 0x32c6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x120>
    32ce:	88 0f       	add	r24, r24
    32d0:	99 1f       	adc	r25, r25
    32d2:	e8 0f       	add	r30, r24
    32d4:	f9 1f       	adc	r31, r25
    32d6:	ee 53       	subi	r30, 0x3E	; 62
    32d8:	fc 4f       	sbci	r31, 0xFC	; 252
    32da:	21 81       	ldd	r18, Z+1	; 0x01
    32dc:	83 2f       	mov	r24, r19
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	fc 01       	movw	r30, r24
    32e2:	53 e0       	ldi	r21, 0x03	; 3
    32e4:	ee 0f       	add	r30, r30
    32e6:	ff 1f       	adc	r31, r31
    32e8:	5a 95       	dec	r21
    32ea:	e1 f7       	brne	.-8      	; 0x32e4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x13e>
    32ec:	88 0f       	add	r24, r24
    32ee:	99 1f       	adc	r25, r25
    32f0:	e8 0f       	add	r30, r24
    32f2:	f9 1f       	adc	r31, r25
    32f4:	ee 53       	subi	r30, 0x3E	; 62
    32f6:	fc 4f       	sbci	r31, 0xFC	; 252
    32f8:	83 81       	ldd	r24, Z+3	; 0x03
    32fa:	28 17       	cp	r18, r24
    32fc:	18 f5       	brcc	.+70     	; 0x3344 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    32fe:	83 2f       	mov	r24, r19
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	fc 01       	movw	r30, r24
    3304:	b3 e0       	ldi	r27, 0x03	; 3
    3306:	ee 0f       	add	r30, r30
    3308:	ff 1f       	adc	r31, r31
    330a:	ba 95       	dec	r27
    330c:	e1 f7       	brne	.-8      	; 0x3306 <_ZN15OrangutanSerial11uart_tx_isrEh+0x160>
    330e:	88 0f       	add	r24, r24
    3310:	99 1f       	adc	r25, r25
    3312:	e8 0f       	add	r30, r24
    3314:	f9 1f       	adc	r31, r25
    3316:	ee 53       	subi	r30, 0x3E	; 62
    3318:	fc 4f       	sbci	r31, 0xFC	; 252
    331a:	80 81       	ld	r24, Z
    331c:	88 23       	and	r24, r24
    331e:	91 f4       	brne	.+36     	; 0x3344 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    3320:	33 23       	and	r19, r19
    3322:	19 f0       	breq	.+6      	; 0x332a <_ZN15OrangutanSerial11uart_tx_isrEh+0x184>
    3324:	e9 ec       	ldi	r30, 0xC9	; 201
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	02 c0       	rjmp	.+4      	; 0x332e <_ZN15OrangutanSerial11uart_tx_isrEh+0x188>
    332a:	e1 ec       	ldi	r30, 0xC1	; 193
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	80 81       	ld	r24, Z
    3330:	80 62       	ori	r24, 0x20	; 32
    3332:	04 c0       	rjmp	.+8      	; 0x333c <_ZN15OrangutanSerial11uart_tx_isrEh+0x196>
    3334:	e9 ec       	ldi	r30, 0xC9	; 201
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	80 81       	ld	r24, Z
    333a:	8f 7d       	andi	r24, 0xDF	; 223
    333c:	80 83       	st	Z, r24
    333e:	df 91       	pop	r29
    3340:	cf 91       	pop	r28
    3342:	08 95       	ret
    3344:	33 23       	and	r19, r19
    3346:	b1 f7       	brne	.-20     	; 0x3334 <_ZN15OrangutanSerial11uart_tx_isrEh+0x18e>
    3348:	e1 ec       	ldi	r30, 0xC1	; 193
    334a:	f0 e0       	ldi	r31, 0x00	; 0
    334c:	f5 cf       	rjmp	.-22     	; 0x3338 <_ZN15OrangutanSerial11uart_tx_isrEh+0x192>

0000334e <_ZN15OrangutanSerial4sendEhPch>:
    334e:	28 2f       	mov	r18, r24
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	fc 01       	movw	r30, r24
    3354:	53 e0       	ldi	r21, 0x03	; 3
    3356:	ee 0f       	add	r30, r30
    3358:	ff 1f       	adc	r31, r31
    335a:	5a 95       	dec	r21
    335c:	e1 f7       	brne	.-8      	; 0x3356 <_ZN15OrangutanSerial4sendEhPch+0x8>
    335e:	88 0f       	add	r24, r24
    3360:	99 1f       	adc	r25, r25
    3362:	e8 0f       	add	r30, r24
    3364:	f9 1f       	adc	r31, r25
    3366:	ee 53       	subi	r30, 0x3E	; 62
    3368:	fc 4f       	sbci	r31, 0xFC	; 252
    336a:	77 83       	std	Z+7, r23	; 0x07
    336c:	66 83       	std	Z+6, r22	; 0x06
    336e:	82 2f       	mov	r24, r18
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	fc 01       	movw	r30, r24
    3374:	b3 e0       	ldi	r27, 0x03	; 3
    3376:	ee 0f       	add	r30, r30
    3378:	ff 1f       	adc	r31, r31
    337a:	ba 95       	dec	r27
    337c:	e1 f7       	brne	.-8      	; 0x3376 <_ZN15OrangutanSerial4sendEhPch+0x28>
    337e:	88 0f       	add	r24, r24
    3380:	99 1f       	adc	r25, r25
    3382:	e8 0f       	add	r30, r24
    3384:	f9 1f       	adc	r31, r25
    3386:	ee 53       	subi	r30, 0x3E	; 62
    3388:	fc 4f       	sbci	r31, 0xFC	; 252
    338a:	11 82       	std	Z+1, r1	; 0x01
    338c:	82 2f       	mov	r24, r18
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	fc 01       	movw	r30, r24
    3392:	73 e0       	ldi	r23, 0x03	; 3
    3394:	ee 0f       	add	r30, r30
    3396:	ff 1f       	adc	r31, r31
    3398:	7a 95       	dec	r23
    339a:	e1 f7       	brne	.-8      	; 0x3394 <_ZN15OrangutanSerial4sendEhPch+0x46>
    339c:	88 0f       	add	r24, r24
    339e:	99 1f       	adc	r25, r25
    33a0:	e8 0f       	add	r30, r24
    33a2:	f9 1f       	adc	r31, r25
    33a4:	ee 53       	subi	r30, 0x3E	; 62
    33a6:	fc 4f       	sbci	r31, 0xFC	; 252
    33a8:	43 83       	std	Z+3, r20	; 0x03
    33aa:	22 30       	cpi	r18, 0x02	; 2
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <_ZN15OrangutanSerial4sendEhPch+0x62>
    33ae:	49 c0       	rjmp	.+146    	; 0x3442 <_ZN15OrangutanSerial4sendEhPch+0xf4>
    33b0:	82 2f       	mov	r24, r18
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	fc 01       	movw	r30, r24
    33b6:	53 e0       	ldi	r21, 0x03	; 3
    33b8:	ee 0f       	add	r30, r30
    33ba:	ff 1f       	adc	r31, r31
    33bc:	5a 95       	dec	r21
    33be:	e1 f7       	brne	.-8      	; 0x33b8 <_ZN15OrangutanSerial4sendEhPch+0x6a>
    33c0:	88 0f       	add	r24, r24
    33c2:	99 1f       	adc	r25, r25
    33c4:	e8 0f       	add	r30, r24
    33c6:	f9 1f       	adc	r31, r25
    33c8:	ee 53       	subi	r30, 0x3E	; 62
    33ca:	fc 4f       	sbci	r31, 0xFC	; 252
    33cc:	86 81       	ldd	r24, Z+6	; 0x06
    33ce:	97 81       	ldd	r25, Z+7	; 0x07
    33d0:	89 2b       	or	r24, r25
    33d2:	91 f1       	breq	.+100    	; 0x3438 <_ZN15OrangutanSerial4sendEhPch+0xea>
    33d4:	82 2f       	mov	r24, r18
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	fc 01       	movw	r30, r24
    33da:	b3 e0       	ldi	r27, 0x03	; 3
    33dc:	ee 0f       	add	r30, r30
    33de:	ff 1f       	adc	r31, r31
    33e0:	ba 95       	dec	r27
    33e2:	e1 f7       	brne	.-8      	; 0x33dc <_ZN15OrangutanSerial4sendEhPch+0x8e>
    33e4:	88 0f       	add	r24, r24
    33e6:	99 1f       	adc	r25, r25
    33e8:	e8 0f       	add	r30, r24
    33ea:	f9 1f       	adc	r31, r25
    33ec:	ee 53       	subi	r30, 0x3E	; 62
    33ee:	fc 4f       	sbci	r31, 0xFC	; 252
    33f0:	81 81       	ldd	r24, Z+1	; 0x01
    33f2:	84 17       	cp	r24, r20
    33f4:	08 f5       	brcc	.+66     	; 0x3438 <_ZN15OrangutanSerial4sendEhPch+0xea>
    33f6:	82 2f       	mov	r24, r18
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	fc 01       	movw	r30, r24
    33fc:	73 e0       	ldi	r23, 0x03	; 3
    33fe:	ee 0f       	add	r30, r30
    3400:	ff 1f       	adc	r31, r31
    3402:	7a 95       	dec	r23
    3404:	e1 f7       	brne	.-8      	; 0x33fe <_ZN15OrangutanSerial4sendEhPch+0xb0>
    3406:	88 0f       	add	r24, r24
    3408:	99 1f       	adc	r25, r25
    340a:	e8 0f       	add	r30, r24
    340c:	f9 1f       	adc	r31, r25
    340e:	ee 53       	subi	r30, 0x3E	; 62
    3410:	fc 4f       	sbci	r31, 0xFC	; 252
    3412:	80 81       	ld	r24, Z
    3414:	88 23       	and	r24, r24
    3416:	81 f4       	brne	.+32     	; 0x3438 <_ZN15OrangutanSerial4sendEhPch+0xea>
    3418:	22 23       	and	r18, r18
    341a:	19 f0       	breq	.+6      	; 0x3422 <_ZN15OrangutanSerial4sendEhPch+0xd4>
    341c:	e9 ec       	ldi	r30, 0xC9	; 201
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	02 c0       	rjmp	.+4      	; 0x3426 <_ZN15OrangutanSerial4sendEhPch+0xd8>
    3422:	e1 ec       	ldi	r30, 0xC1	; 193
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	80 81       	ld	r24, Z
    3428:	80 62       	ori	r24, 0x20	; 32
    342a:	04 c0       	rjmp	.+8      	; 0x3434 <_ZN15OrangutanSerial4sendEhPch+0xe6>
    342c:	e9 ec       	ldi	r30, 0xC9	; 201
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	80 81       	ld	r24, Z
    3432:	8f 7d       	andi	r24, 0xDF	; 223
    3434:	80 83       	st	Z, r24
    3436:	08 95       	ret
    3438:	22 23       	and	r18, r18
    343a:	c1 f7       	brne	.-16     	; 0x342c <_ZN15OrangutanSerial4sendEhPch+0xde>
    343c:	e1 ec       	ldi	r30, 0xC1	; 193
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	f7 cf       	rjmp	.-18     	; 0x3430 <_ZN15OrangutanSerial4sendEhPch+0xe2>
    3442:	08 95       	ret

00003444 <serial_send>:
    3444:	0e 94 a7 19 	call	0x334e	; 0x334e <_ZN15OrangutanSerial4sendEhPch>
    3448:	08 95       	ret

0000344a <__vector_21>:
    344a:	1f 92       	push	r1
    344c:	0f 92       	push	r0
    344e:	0f b6       	in	r0, 0x3f	; 63
    3450:	0f 92       	push	r0
    3452:	0b b6       	in	r0, 0x3b	; 59
    3454:	0f 92       	push	r0
    3456:	11 24       	eor	r1, r1
    3458:	2f 93       	push	r18
    345a:	3f 93       	push	r19
    345c:	4f 93       	push	r20
    345e:	5f 93       	push	r21
    3460:	6f 93       	push	r22
    3462:	7f 93       	push	r23
    3464:	8f 93       	push	r24
    3466:	9f 93       	push	r25
    3468:	af 93       	push	r26
    346a:	bf 93       	push	r27
    346c:	ef 93       	push	r30
    346e:	ff 93       	push	r31
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_ZN15OrangutanSerial11uart_tx_isrEh>
    3476:	ff 91       	pop	r31
    3478:	ef 91       	pop	r30
    347a:	bf 91       	pop	r27
    347c:	af 91       	pop	r26
    347e:	9f 91       	pop	r25
    3480:	8f 91       	pop	r24
    3482:	7f 91       	pop	r23
    3484:	6f 91       	pop	r22
    3486:	5f 91       	pop	r21
    3488:	4f 91       	pop	r20
    348a:	3f 91       	pop	r19
    348c:	2f 91       	pop	r18
    348e:	0f 90       	pop	r0
    3490:	0b be       	out	0x3b, r0	; 59
    3492:	0f 90       	pop	r0
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	0f 90       	pop	r0
    3498:	1f 90       	pop	r1
    349a:	18 95       	reti

0000349c <__vector_29>:
    349c:	1f 92       	push	r1
    349e:	0f 92       	push	r0
    34a0:	0f b6       	in	r0, 0x3f	; 63
    34a2:	0f 92       	push	r0
    34a4:	0b b6       	in	r0, 0x3b	; 59
    34a6:	0f 92       	push	r0
    34a8:	11 24       	eor	r1, r1
    34aa:	2f 93       	push	r18
    34ac:	3f 93       	push	r19
    34ae:	4f 93       	push	r20
    34b0:	5f 93       	push	r21
    34b2:	6f 93       	push	r22
    34b4:	7f 93       	push	r23
    34b6:	8f 93       	push	r24
    34b8:	9f 93       	push	r25
    34ba:	af 93       	push	r26
    34bc:	bf 93       	push	r27
    34be:	ef 93       	push	r30
    34c0:	ff 93       	push	r31
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_ZN15OrangutanSerial11uart_tx_isrEh>
    34c8:	ff 91       	pop	r31
    34ca:	ef 91       	pop	r30
    34cc:	bf 91       	pop	r27
    34ce:	af 91       	pop	r26
    34d0:	9f 91       	pop	r25
    34d2:	8f 91       	pop	r24
    34d4:	7f 91       	pop	r23
    34d6:	6f 91       	pop	r22
    34d8:	5f 91       	pop	r21
    34da:	4f 91       	pop	r20
    34dc:	3f 91       	pop	r19
    34de:	2f 91       	pop	r18
    34e0:	0f 90       	pop	r0
    34e2:	0b be       	out	0x3b, r0	; 59
    34e4:	0f 90       	pop	r0
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	0f 90       	pop	r0
    34ea:	1f 90       	pop	r1
    34ec:	18 95       	reti

000034ee <_ZN15OrangutanSerial15serial_tx_checkEh>:
    34ee:	98 2f       	mov	r25, r24
    34f0:	82 30       	cpi	r24, 0x02	; 2
    34f2:	71 f0       	breq	.+28     	; 0x3510 <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    34f4:	88 23       	and	r24, r24
    34f6:	19 f0       	breq	.+6      	; 0x34fe <_ZN15OrangutanSerial15serial_tx_checkEh+0x10>
    34f8:	e9 ec       	ldi	r30, 0xC9	; 201
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	02 c0       	rjmp	.+4      	; 0x3502 <_ZN15OrangutanSerial15serial_tx_checkEh+0x14>
    34fe:	e1 ec       	ldi	r30, 0xC1	; 193
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
    3504:	8f 7d       	andi	r24, 0xDF	; 223
    3506:	80 83       	st	Z, r24
    3508:	89 2f       	mov	r24, r25
    350a:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <_ZN15OrangutanSerial11uart_tx_isrEh>
    350e:	08 95       	ret
    3510:	e0 91 dc 03 	lds	r30, 0x03DC
    3514:	f0 91 dd 03 	lds	r31, 0x03DD
    3518:	30 97       	sbiw	r30, 0x00	; 0
    351a:	b1 f0       	breq	.+44     	; 0x3548 <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    351c:	90 91 d7 03 	lds	r25, 0x03D7
    3520:	80 91 d9 03 	lds	r24, 0x03D9
    3524:	98 17       	cp	r25, r24
    3526:	80 f4       	brcc	.+32     	; 0x3548 <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    3528:	06 c0       	rjmp	.+12     	; 0x3536 <_ZN15OrangutanSerial15serial_tx_checkEh+0x48>
    352a:	80 91 d7 03 	lds	r24, 0x03D7
    352e:	8f 5f       	subi	r24, 0xFF	; 255
    3530:	80 93 d7 03 	sts	0x03D7, r24
    3534:	ed cf       	rjmp	.-38     	; 0x3510 <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    3536:	80 91 d7 03 	lds	r24, 0x03D7
    353a:	e8 0f       	add	r30, r24
    353c:	f1 1d       	adc	r31, r1
    353e:	80 81       	ld	r24, Z
    3540:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <_ZN12OrangutanSVP17serialSendIfReadyEc>
    3544:	88 23       	and	r24, r24
    3546:	89 f7       	brne	.-30     	; 0x352a <_ZN15OrangutanSerial15serial_tx_checkEh+0x3c>
    3548:	08 95       	ret

0000354a <_ZN15OrangutanSerial15serial_rx_checkEh>:
    354a:	0f 93       	push	r16
    354c:	1f 93       	push	r17
    354e:	cf 93       	push	r28
    3550:	df 93       	push	r29
    3552:	68 2f       	mov	r22, r24
    3554:	82 30       	cpi	r24, 0x02	; 2
    3556:	09 f4       	brne	.+2      	; 0x355a <_ZN15OrangutanSerial15serial_rx_checkEh+0x10>
    3558:	9c c0       	rjmp	.+312    	; 0x3692 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    355a:	88 23       	and	r24, r24
    355c:	19 f0       	breq	.+6      	; 0x3564 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1a>
    355e:	e9 ec       	ldi	r30, 0xC9	; 201
    3560:	f0 e0       	ldi	r31, 0x00	; 0
    3562:	02 c0       	rjmp	.+4      	; 0x3568 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1e>
    3564:	e1 ec       	ldi	r30, 0xC1	; 193
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	80 81       	ld	r24, Z
    356a:	8f 77       	andi	r24, 0x7F	; 127
    356c:	80 83       	st	Z, r24
    356e:	46 2f       	mov	r20, r22
    3570:	50 e0       	ldi	r21, 0x00	; 0
    3572:	da 01       	movw	r26, r20
    3574:	aa 0f       	add	r26, r26
    3576:	bb 1f       	adc	r27, r27
    3578:	ca 01       	movw	r24, r20
    357a:	23 e0       	ldi	r18, 0x03	; 3
    357c:	88 0f       	add	r24, r24
    357e:	99 1f       	adc	r25, r25
    3580:	2a 95       	dec	r18
    3582:	e1 f7       	brne	.-8      	; 0x357c <_ZN15OrangutanSerial15serial_rx_checkEh+0x32>
    3584:	a8 0f       	add	r26, r24
    3586:	b9 1f       	adc	r27, r25
    3588:	ae 53       	subi	r26, 0x3E	; 62
    358a:	bc 4f       	sbci	r27, 0xFC	; 252
    358c:	18 96       	adiw	r26, 0x08	; 8
    358e:	cd 91       	ld	r28, X+
    3590:	dc 91       	ld	r29, X
    3592:	19 97       	sbiw	r26, 0x09	; 9
    3594:	20 97       	sbiw	r28, 0x00	; 0
    3596:	09 f4       	brne	.+2      	; 0x359a <_ZN15OrangutanSerial15serial_rx_checkEh+0x50>
    3598:	5a c0       	rjmp	.+180    	; 0x364e <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    359a:	fa 01       	movw	r30, r20
    359c:	ee 0f       	add	r30, r30
    359e:	ff 1f       	adc	r31, r31
    35a0:	ee 0f       	add	r30, r30
    35a2:	ff 1f       	adc	r31, r31
    35a4:	e4 0f       	add	r30, r20
    35a6:	f5 1f       	adc	r31, r21
    35a8:	ee 0f       	add	r30, r30
    35aa:	ff 1f       	adc	r31, r31
    35ac:	ec 53       	subi	r30, 0x3C	; 60
    35ae:	fc 4f       	sbci	r31, 0xFC	; 252
    35b0:	80 81       	ld	r24, Z
    35b2:	14 96       	adiw	r26, 0x04	; 4
    35b4:	2c 91       	ld	r18, X
    35b6:	82 17       	cp	r24, r18
    35b8:	08 f0       	brcs	.+2      	; 0x35bc <_ZN15OrangutanSerial15serial_rx_checkEh+0x72>
    35ba:	49 c0       	rjmp	.+146    	; 0x364e <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    35bc:	66 23       	and	r22, r22
    35be:	19 f0       	breq	.+6      	; 0x35c6 <_ZN15OrangutanSerial15serial_rx_checkEh+0x7c>
    35c0:	e8 ec       	ldi	r30, 0xC8	; 200
    35c2:	f0 e0       	ldi	r31, 0x00	; 0
    35c4:	02 c0       	rjmp	.+4      	; 0x35ca <_ZN15OrangutanSerial15serial_rx_checkEh+0x80>
    35c6:	e0 ec       	ldi	r30, 0xC0	; 192
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	87 ff       	sbrs	r24, 7
    35ce:	3f c0       	rjmp	.+126    	; 0x364e <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    35d0:	66 23       	and	r22, r22
    35d2:	19 f4       	brne	.+6      	; 0x35da <_ZN15OrangutanSerial15serial_rx_checkEh+0x90>
    35d4:	e6 ec       	ldi	r30, 0xC6	; 198
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	02 c0       	rjmp	.+4      	; 0x35de <_ZN15OrangutanSerial15serial_rx_checkEh+0x94>
    35da:	ee ec       	ldi	r30, 0xCE	; 206
    35dc:	f0 e0       	ldi	r31, 0x00	; 0
    35de:	90 81       	ld	r25, Z
    35e0:	fa 01       	movw	r30, r20
    35e2:	ee 0f       	add	r30, r30
    35e4:	ff 1f       	adc	r31, r31
    35e6:	ee 0f       	add	r30, r30
    35e8:	ff 1f       	adc	r31, r31
    35ea:	e4 0f       	add	r30, r20
    35ec:	f5 1f       	adc	r31, r21
    35ee:	ee 0f       	add	r30, r30
    35f0:	ff 1f       	adc	r31, r31
    35f2:	ec 53       	subi	r30, 0x3C	; 60
    35f4:	fc 4f       	sbci	r31, 0xFC	; 252
    35f6:	80 81       	ld	r24, Z
    35f8:	82 17       	cp	r24, r18
    35fa:	38 f4       	brcc	.+14     	; 0x360a <_ZN15OrangutanSerial15serial_rx_checkEh+0xc0>
    35fc:	80 81       	ld	r24, Z
    35fe:	c8 0f       	add	r28, r24
    3600:	d1 1d       	adc	r29, r1
    3602:	98 83       	st	Y, r25
    3604:	80 81       	ld	r24, Z
    3606:	8f 5f       	subi	r24, 0xFF	; 255
    3608:	80 83       	st	Z, r24
    360a:	fa 01       	movw	r30, r20
    360c:	ee 0f       	add	r30, r30
    360e:	ff 1f       	adc	r31, r31
    3610:	ee 0f       	add	r30, r30
    3612:	ff 1f       	adc	r31, r31
    3614:	e4 0f       	add	r30, r20
    3616:	f5 1f       	adc	r31, r21
    3618:	ee 0f       	add	r30, r30
    361a:	ff 1f       	adc	r31, r31
    361c:	ec 53       	subi	r30, 0x3C	; 60
    361e:	fc 4f       	sbci	r31, 0xFC	; 252
    3620:	80 81       	ld	r24, Z
    3622:	da 01       	movw	r26, r20
    3624:	aa 0f       	add	r26, r26
    3626:	bb 1f       	adc	r27, r27
    3628:	9a 01       	movw	r18, r20
    362a:	13 e0       	ldi	r17, 0x03	; 3
    362c:	22 0f       	add	r18, r18
    362e:	33 1f       	adc	r19, r19
    3630:	1a 95       	dec	r17
    3632:	e1 f7       	brne	.-8      	; 0x362c <_ZN15OrangutanSerial15serial_rx_checkEh+0xe2>
    3634:	a2 0f       	add	r26, r18
    3636:	b3 1f       	adc	r27, r19
    3638:	ae 53       	subi	r26, 0x3E	; 62
    363a:	bc 4f       	sbci	r27, 0xFC	; 252
    363c:	14 96       	adiw	r26, 0x04	; 4
    363e:	9c 91       	ld	r25, X
    3640:	14 97       	sbiw	r26, 0x04	; 4
    3642:	89 17       	cp	r24, r25
    3644:	21 f4       	brne	.+8      	; 0x364e <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3646:	15 96       	adiw	r26, 0x05	; 5
    3648:	8c 91       	ld	r24, X
    364a:	81 11       	cpse	r24, r1
    364c:	10 82       	st	Z, r1
    364e:	fa 01       	movw	r30, r20
    3650:	a3 e0       	ldi	r26, 0x03	; 3
    3652:	ee 0f       	add	r30, r30
    3654:	ff 1f       	adc	r31, r31
    3656:	aa 95       	dec	r26
    3658:	e1 f7       	brne	.-8      	; 0x3652 <_ZN15OrangutanSerial15serial_rx_checkEh+0x108>
    365a:	44 0f       	add	r20, r20
    365c:	55 1f       	adc	r21, r21
    365e:	e4 0f       	add	r30, r20
    3660:	f5 1f       	adc	r31, r21
    3662:	ee 53       	subi	r30, 0x3E	; 62
    3664:	fc 4f       	sbci	r31, 0xFC	; 252
    3666:	80 81       	ld	r24, Z
    3668:	88 23       	and	r24, r24
    366a:	09 f0       	breq	.+2      	; 0x366e <_ZN15OrangutanSerial15serial_rx_checkEh+0x124>
    366c:	59 c0       	rjmp	.+178    	; 0x3720 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    366e:	66 23       	and	r22, r22
    3670:	19 f0       	breq	.+6      	; 0x3678 <_ZN15OrangutanSerial15serial_rx_checkEh+0x12e>
    3672:	e9 ec       	ldi	r30, 0xC9	; 201
    3674:	f0 e0       	ldi	r31, 0x00	; 0
    3676:	02 c0       	rjmp	.+4      	; 0x367c <_ZN15OrangutanSerial15serial_rx_checkEh+0x132>
    3678:	e1 ec       	ldi	r30, 0xC1	; 193
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	80 81       	ld	r24, Z
    367e:	80 68       	ori	r24, 0x80	; 128
    3680:	80 83       	st	Z, r24
    3682:	4e c0       	rjmp	.+156    	; 0x3720 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3684:	80 91 db 03 	lds	r24, 0x03DB
    3688:	88 23       	and	r24, r24
    368a:	19 f0       	breq	.+6      	; 0x3692 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    368c:	10 92 d8 03 	sts	0x03D8, r1
    3690:	47 c0       	rjmp	.+142    	; 0x3720 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3692:	80 91 de 03 	lds	r24, 0x03DE
    3696:	90 91 df 03 	lds	r25, 0x03DF
    369a:	89 2b       	or	r24, r25
    369c:	09 f4       	brne	.+2      	; 0x36a0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x156>
    369e:	40 c0       	rjmp	.+128    	; 0x3720 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    36a0:	90 91 d8 03 	lds	r25, 0x03D8
    36a4:	80 91 da 03 	lds	r24, 0x03DA
    36a8:	98 17       	cp	r25, r24
    36aa:	d0 f5       	brcc	.+116    	; 0x3720 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    36ac:	80 91 fb 03 	lds	r24, 0x03FB
    36b0:	88 23       	and	r24, r24
    36b2:	a9 f4       	brne	.+42     	; 0x36de <_ZN15OrangutanSerial15serial_rx_checkEh+0x194>
    36b4:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN12OrangutanSVP15serialReadStartEv>
    36b8:	80 93 fb 03 	sts	0x03FB, r24
    36bc:	10 e0       	ldi	r17, 0x00	; 0
    36be:	0b c0       	rjmp	.+22     	; 0x36d6 <_ZN15OrangutanSerial15serial_rx_checkEh+0x18c>
    36c0:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <_ZN12OrangutanSVP11getNextByteEv>
    36c4:	e0 2f       	mov	r30, r16
    36c6:	f0 e0       	ldi	r31, 0x00	; 0
    36c8:	31 97       	sbiw	r30, 0x01	; 1
    36ca:	e1 1b       	sub	r30, r17
    36cc:	f1 09       	sbc	r31, r1
    36ce:	e4 50       	subi	r30, 0x04	; 4
    36d0:	fc 4f       	sbci	r31, 0xFC	; 252
    36d2:	80 83       	st	Z, r24
    36d4:	1f 5f       	subi	r17, 0xFF	; 255
    36d6:	00 91 fb 03 	lds	r16, 0x03FB
    36da:	10 17       	cp	r17, r16
    36dc:	88 f3       	brcs	.-30     	; 0x36c0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x176>
    36de:	e0 91 fb 03 	lds	r30, 0x03FB
    36e2:	ee 23       	and	r30, r30
    36e4:	e9 f0       	breq	.+58     	; 0x3720 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    36e6:	80 91 d8 03 	lds	r24, 0x03D8
    36ea:	a0 91 de 03 	lds	r26, 0x03DE
    36ee:	b0 91 df 03 	lds	r27, 0x03DF
    36f2:	a8 0f       	add	r26, r24
    36f4:	b1 1d       	adc	r27, r1
    36f6:	e1 50       	subi	r30, 0x01	; 1
    36f8:	e0 93 fb 03 	sts	0x03FB, r30
    36fc:	f0 e0       	ldi	r31, 0x00	; 0
    36fe:	e4 50       	subi	r30, 0x04	; 4
    3700:	fc 4f       	sbci	r31, 0xFC	; 252
    3702:	80 81       	ld	r24, Z
    3704:	8c 93       	st	X, r24
    3706:	80 91 d8 03 	lds	r24, 0x03D8
    370a:	8f 5f       	subi	r24, 0xFF	; 255
    370c:	80 93 d8 03 	sts	0x03D8, r24
    3710:	90 91 d8 03 	lds	r25, 0x03D8
    3714:	80 91 da 03 	lds	r24, 0x03DA
    3718:	98 17       	cp	r25, r24
    371a:	09 f0       	breq	.+2      	; 0x371e <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d4>
    371c:	ba cf       	rjmp	.-140    	; 0x3692 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    371e:	b2 cf       	rjmp	.-156    	; 0x3684 <_ZN15OrangutanSerial15serial_rx_checkEh+0x13a>
    3720:	df 91       	pop	r29
    3722:	cf 91       	pop	r28
    3724:	1f 91       	pop	r17
    3726:	0f 91       	pop	r16
    3728:	08 95       	ret

0000372a <_ZN15OrangutanSerial5checkEv>:
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	0e 94 77 1a 	call	0x34ee	; 0x34ee <_ZN15OrangutanSerial15serial_tx_checkEh>
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	0e 94 77 1a 	call	0x34ee	; 0x34ee <_ZN15OrangutanSerial15serial_tx_checkEh>
    3736:	82 e0       	ldi	r24, 0x02	; 2
    3738:	0e 94 77 1a 	call	0x34ee	; 0x34ee <_ZN15OrangutanSerial15serial_tx_checkEh>
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	0e 94 a5 1a 	call	0x354a	; 0x354a <_ZN15OrangutanSerial15serial_rx_checkEh>
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	0e 94 a5 1a 	call	0x354a	; 0x354a <_ZN15OrangutanSerial15serial_rx_checkEh>
    3748:	82 e0       	ldi	r24, 0x02	; 2
    374a:	0e 94 a5 1a 	call	0x354a	; 0x354a <_ZN15OrangutanSerial15serial_rx_checkEh>
    374e:	08 95       	ret

00003750 <_ZN15OrangutanSerial12sendBlockingEhPch>:
    3750:	1f 93       	push	r17
    3752:	18 2f       	mov	r17, r24
    3754:	0e 94 a7 19 	call	0x334e	; 0x334e <_ZN15OrangutanSerial4sendEhPch>
    3758:	02 c0       	rjmp	.+4      	; 0x375e <_ZN15OrangutanSerial12sendBlockingEhPch+0xe>
    375a:	0e 94 95 1b 	call	0x372a	; 0x372a <_ZN15OrangutanSerial5checkEv>
    375e:	81 2f       	mov	r24, r17
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	fc 01       	movw	r30, r24
    3764:	73 e0       	ldi	r23, 0x03	; 3
    3766:	ee 0f       	add	r30, r30
    3768:	ff 1f       	adc	r31, r31
    376a:	7a 95       	dec	r23
    376c:	e1 f7       	brne	.-8      	; 0x3766 <_ZN15OrangutanSerial12sendBlockingEhPch+0x16>
    376e:	88 0f       	add	r24, r24
    3770:	99 1f       	adc	r25, r25
    3772:	e8 0f       	add	r30, r24
    3774:	f9 1f       	adc	r31, r25
    3776:	ee 53       	subi	r30, 0x3E	; 62
    3778:	fc 4f       	sbci	r31, 0xFC	; 252
    377a:	21 81       	ldd	r18, Z+1	; 0x01
    377c:	81 2f       	mov	r24, r17
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	fc 01       	movw	r30, r24
    3782:	53 e0       	ldi	r21, 0x03	; 3
    3784:	ee 0f       	add	r30, r30
    3786:	ff 1f       	adc	r31, r31
    3788:	5a 95       	dec	r21
    378a:	e1 f7       	brne	.-8      	; 0x3784 <_ZN15OrangutanSerial12sendBlockingEhPch+0x34>
    378c:	88 0f       	add	r24, r24
    378e:	99 1f       	adc	r25, r25
    3790:	e8 0f       	add	r30, r24
    3792:	f9 1f       	adc	r31, r25
    3794:	ee 53       	subi	r30, 0x3E	; 62
    3796:	fc 4f       	sbci	r31, 0xFC	; 252
    3798:	83 81       	ldd	r24, Z+3	; 0x03
    379a:	28 17       	cp	r18, r24
    379c:	f1 f6       	brne	.-68     	; 0x375a <_ZN15OrangutanSerial12sendBlockingEhPch+0xa>
    379e:	1f 91       	pop	r17
    37a0:	08 95       	ret

000037a2 <serial_send_blocking>:
    37a2:	0e 94 a8 1b 	call	0x3750	; 0x3750 <_ZN15OrangutanSerial12sendBlockingEhPch>
    37a6:	08 95       	ret

000037a8 <_ZN15OrangutanSerial15receiveBlockingEhPchj>:
    37a8:	a0 e0       	ldi	r26, 0x00	; 0
    37aa:	b0 e0       	ldi	r27, 0x00	; 0
    37ac:	ea ed       	ldi	r30, 0xDA	; 218
    37ae:	fb e1       	ldi	r31, 0x1B	; 27
    37b0:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__prologue_saves__+0xc>
    37b4:	08 2f       	mov	r16, r24
    37b6:	79 01       	movw	r14, r18
    37b8:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <_ZN15OrangutanSerial7receiveEhPch>
    37bc:	0e 94 cf 1c 	call	0x399e	; 0x399e <get_ms>
    37c0:	4b 01       	movw	r8, r22
    37c2:	5c 01       	movw	r10, r24
    37c4:	10 e0       	ldi	r17, 0x00	; 0
    37c6:	e8 01       	movw	r28, r16
    37c8:	cc 0f       	add	r28, r28
    37ca:	dd 1f       	adc	r29, r29
    37cc:	cc 0f       	add	r28, r28
    37ce:	dd 1f       	adc	r29, r29
    37d0:	c0 0f       	add	r28, r16
    37d2:	d1 1f       	adc	r29, r17
    37d4:	cc 0f       	add	r28, r28
    37d6:	dd 1f       	adc	r29, r29
    37d8:	cc 53       	subi	r28, 0x3C	; 60
    37da:	dc 4f       	sbci	r29, 0xFC	; 252
    37dc:	68 01       	movw	r12, r16
    37de:	f3 e0       	ldi	r31, 0x03	; 3
    37e0:	cc 0c       	add	r12, r12
    37e2:	dd 1c       	adc	r13, r13
    37e4:	fa 95       	dec	r31
    37e6:	e1 f7       	brne	.-8      	; 0x37e0 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x38>
    37e8:	00 0f       	add	r16, r16
    37ea:	11 1f       	adc	r17, r17
    37ec:	c0 0e       	add	r12, r16
    37ee:	d1 1e       	adc	r13, r17
    37f0:	86 ec       	ldi	r24, 0xC6	; 198
    37f2:	93 e0       	ldi	r25, 0x03	; 3
    37f4:	c8 0e       	add	r12, r24
    37f6:	d9 1e       	adc	r13, r25
    37f8:	00 e0       	ldi	r16, 0x00	; 0
    37fa:	10 e0       	ldi	r17, 0x00	; 0
    37fc:	0e 94 95 1b 	call	0x372a	; 0x372a <_ZN15OrangutanSerial5checkEv>
    3800:	98 81       	ld	r25, Y
    3802:	f6 01       	movw	r30, r12
    3804:	80 81       	ld	r24, Z
    3806:	98 17       	cp	r25, r24
    3808:	11 f4       	brne	.+4      	; 0x380e <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x66>
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	0c c0       	rjmp	.+24     	; 0x3826 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x7e>
    380e:	0e 94 cf 1c 	call	0x399e	; 0x399e <get_ms>
    3812:	68 19       	sub	r22, r8
    3814:	79 09       	sbc	r23, r9
    3816:	8a 09       	sbc	r24, r10
    3818:	9b 09       	sbc	r25, r11
    381a:	6e 15       	cp	r22, r14
    381c:	7f 05       	cpc	r23, r15
    381e:	80 07       	cpc	r24, r16
    3820:	91 07       	cpc	r25, r17
    3822:	60 f3       	brcs	.-40     	; 0x37fc <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x54>
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	cd b7       	in	r28, 0x3d	; 61
    3828:	de b7       	in	r29, 0x3e	; 62
    382a:	ec e0       	ldi	r30, 0x0C	; 12
    382c:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__epilogue_restores__+0xc>

00003830 <serial_receive_blocking>:
    3830:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <_ZN15OrangutanSerial15receiveBlockingEhPchj>
    3834:	08 95       	ret

00003836 <serial_check>:
    3836:	0e 94 95 1b 	call	0x372a	; 0x372a <_ZN15OrangutanSerial5checkEv>
    383a:	08 95       	ret

0000383c <__vector_11>:
    383c:	2f 92       	push	r2
    383e:	8f 93       	push	r24
    3840:	9f 93       	push	r25
    3842:	2f b6       	in	r2, 0x3f	; 63
    3844:	80 91 05 04 	lds	r24, 0x0405
    3848:	90 91 06 04 	lds	r25, 0x0406
    384c:	01 96       	adiw	r24, 0x01	; 1
    384e:	80 93 05 04 	sts	0x0405, r24
    3852:	90 93 06 04 	sts	0x0406, r25
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	80 91 07 04 	lds	r24, 0x0407
    385c:	89 1f       	adc	r24, r25
    385e:	80 93 07 04 	sts	0x0407, r24
    3862:	90 91 0d 04 	lds	r25, 0x040D
    3866:	9c 5f       	subi	r25, 0xFC	; 252
    3868:	90 93 0d 04 	sts	0x040D, r25
    386c:	80 91 0c 04 	lds	r24, 0x040C
    3870:	80 51       	subi	r24, 0x10	; 16
    3872:	97 42       	sbci	r25, 0x27	; 39
    3874:	c0 f0       	brcs	.+48     	; 0x38a6 <end>
    3876:	90 93 0d 04 	sts	0x040D, r25
    387a:	80 93 0c 04 	sts	0x040C, r24
    387e:	80 91 08 04 	lds	r24, 0x0408
    3882:	90 91 09 04 	lds	r25, 0x0409
    3886:	01 96       	adiw	r24, 0x01	; 1
    3888:	80 93 08 04 	sts	0x0408, r24
    388c:	90 93 09 04 	sts	0x0409, r25
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	80 91 0a 04 	lds	r24, 0x040A
    3896:	89 1f       	adc	r24, r25
    3898:	80 93 0a 04 	sts	0x040A, r24
    389c:	80 91 0b 04 	lds	r24, 0x040B
    38a0:	89 1f       	adc	r24, r25
    38a2:	80 93 0b 04 	sts	0x040B, r24

000038a6 <end>:
    38a6:	2f be       	out	0x3f, r2	; 63
    38a8:	9f 91       	pop	r25
    38aa:	8f 91       	pop	r24
    38ac:	2f 90       	pop	r2
    38ae:	18 95       	reti

000038b0 <ticks_to_microseconds>:
    38b0:	6f 5f       	subi	r22, 0xFF	; 255
    38b2:	7f 4f       	sbci	r23, 0xFF	; 255
    38b4:	8f 4f       	sbci	r24, 0xFF	; 255
    38b6:	9f 4f       	sbci	r25, 0xFF	; 255
    38b8:	66 0f       	add	r22, r22
    38ba:	77 1f       	adc	r23, r23
    38bc:	88 1f       	adc	r24, r24
    38be:	99 1f       	adc	r25, r25
    38c0:	25 e0       	ldi	r18, 0x05	; 5
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	40 e0       	ldi	r20, 0x00	; 0
    38c6:	50 e0       	ldi	r21, 0x00	; 0
    38c8:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <__udivmodsi4>
    38cc:	ca 01       	movw	r24, r20
    38ce:	b9 01       	movw	r22, r18
    38d0:	08 95       	ret

000038d2 <delay_ms>:
    38d2:	28 ee       	ldi	r18, 0xE8	; 232
    38d4:	33 e0       	ldi	r19, 0x03	; 3
    38d6:	09 c0       	rjmp	.+18     	; 0x38ea <delay_ms+0x18>
    38d8:	f9 01       	movw	r30, r18
    38da:	6f 93       	push	r22
    38dc:	64 e0       	ldi	r22, 0x04	; 4
    38de:	6a 95       	dec	r22
    38e0:	f1 f7       	brne	.-4      	; 0x38de <delay_ms+0xc>
    38e2:	6f 91       	pop	r22
    38e4:	31 97       	sbiw	r30, 0x01	; 1
    38e6:	c9 f7       	brne	.-14     	; 0x38da <delay_ms+0x8>
    38e8:	01 97       	sbiw	r24, 0x01	; 1
    38ea:	00 97       	sbiw	r24, 0x00	; 0
    38ec:	a9 f7       	brne	.-22     	; 0x38d8 <delay_ms+0x6>
    38ee:	08 95       	ret

000038f0 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    38f0:	6f 5f       	subi	r22, 0xFF	; 255
    38f2:	7f 4f       	sbci	r23, 0xFF	; 255
    38f4:	8f 4f       	sbci	r24, 0xFF	; 255
    38f6:	9f 4f       	sbci	r25, 0xFF	; 255
    38f8:	66 0f       	add	r22, r22
    38fa:	77 1f       	adc	r23, r23
    38fc:	88 1f       	adc	r24, r24
    38fe:	99 1f       	adc	r25, r25
    3900:	25 e0       	ldi	r18, 0x05	; 5
    3902:	30 e0       	ldi	r19, 0x00	; 0
    3904:	40 e0       	ldi	r20, 0x00	; 0
    3906:	50 e0       	ldi	r21, 0x00	; 0
    3908:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <__udivmodsi4>
    390c:	ca 01       	movw	r24, r20
    390e:	b9 01       	movw	r22, r18
    3910:	08 95       	ret

00003912 <_ZN13OrangutanTime17delayMillisecondsEj>:
    3912:	28 ee       	ldi	r18, 0xE8	; 232
    3914:	33 e0       	ldi	r19, 0x03	; 3
    3916:	09 c0       	rjmp	.+18     	; 0x392a <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3918:	f9 01       	movw	r30, r18
    391a:	6f 93       	push	r22
    391c:	64 e0       	ldi	r22, 0x04	; 4
    391e:	6a 95       	dec	r22
    3920:	f1 f7       	brne	.-4      	; 0x391e <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3922:	6f 91       	pop	r22
    3924:	31 97       	sbiw	r30, 0x01	; 1
    3926:	c9 f7       	brne	.-14     	; 0x391a <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3928:	01 97       	sbiw	r24, 0x01	; 1
    392a:	00 97       	sbiw	r24, 0x00	; 0
    392c:	a9 f7       	brne	.-22     	; 0x3918 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    392e:	08 95       	ret

00003930 <_ZN13OrangutanTime5init2Ev>:
    3930:	a0 e7       	ldi	r26, 0x70	; 112
    3932:	b0 e0       	ldi	r27, 0x00	; 0
    3934:	8c 91       	ld	r24, X
    3936:	8e 7f       	andi	r24, 0xFE	; 254
    3938:	8c 93       	st	X, r24
    393a:	e0 eb       	ldi	r30, 0xB0	; 176
    393c:	f0 e0       	ldi	r31, 0x00	; 0
    393e:	80 81       	ld	r24, Z
    3940:	83 60       	ori	r24, 0x03	; 3
    3942:	80 83       	st	Z, r24
    3944:	e1 eb       	ldi	r30, 0xB1	; 177
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	80 81       	ld	r24, Z
    394a:	80 7f       	andi	r24, 0xF0	; 240
    394c:	80 83       	st	Z, r24
    394e:	80 81       	ld	r24, Z
    3950:	82 60       	ori	r24, 0x02	; 2
    3952:	80 83       	st	Z, r24
    3954:	b8 9a       	sbi	0x17, 0	; 23
    3956:	8c 91       	ld	r24, X
    3958:	81 60       	ori	r24, 0x01	; 1
    395a:	8c 93       	st	X, r24
    395c:	78 94       	sei
    395e:	08 95       	ret

00003960 <_ZN13OrangutanTime4initEv>:
    3960:	80 91 0e 04 	lds	r24, 0x040E
    3964:	88 23       	and	r24, r24
    3966:	29 f4       	brne	.+10     	; 0x3972 <_ZN13OrangutanTime4initEv+0x12>
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	80 93 0e 04 	sts	0x040E, r24
    396e:	0e 94 98 1c 	call	0x3930	; 0x3930 <_ZN13OrangutanTime5init2Ev>
    3972:	08 95       	ret

00003974 <_ZN13OrangutanTime2msEv>:
    3974:	0e 94 b0 1c 	call	0x3960	; 0x3960 <_ZN13OrangutanTime4initEv>
    3978:	e0 e7       	ldi	r30, 0x70	; 112
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	80 81       	ld	r24, Z
    397e:	8e 7f       	andi	r24, 0xFE	; 254
    3980:	80 83       	st	Z, r24
    3982:	20 91 08 04 	lds	r18, 0x0408
    3986:	30 91 09 04 	lds	r19, 0x0409
    398a:	40 91 0a 04 	lds	r20, 0x040A
    398e:	50 91 0b 04 	lds	r21, 0x040B
    3992:	80 81       	ld	r24, Z
    3994:	81 60       	ori	r24, 0x01	; 1
    3996:	80 83       	st	Z, r24
    3998:	b9 01       	movw	r22, r18
    399a:	ca 01       	movw	r24, r20
    399c:	08 95       	ret

0000399e <get_ms>:
    399e:	0e 94 ba 1c 	call	0x3974	; 0x3974 <_ZN13OrangutanTime2msEv>
    39a2:	08 95       	ret

000039a4 <_ZN13OrangutanTime5ticksEv>:
    39a4:	0e 94 b0 1c 	call	0x3960	; 0x3960 <_ZN13OrangutanTime4initEv>
    39a8:	80 91 70 00 	lds	r24, 0x0070
    39ac:	8e 7f       	andi	r24, 0xFE	; 254
    39ae:	80 93 70 00 	sts	0x0070, r24
    39b2:	60 91 b2 00 	lds	r22, 0x00B2
    39b6:	80 91 04 04 	lds	r24, 0x0404
    39ba:	90 91 05 04 	lds	r25, 0x0405
    39be:	a0 91 06 04 	lds	r26, 0x0406
    39c2:	b0 91 07 04 	lds	r27, 0x0407
    39c6:	b8 99       	sbic	0x17, 0	; 23
    39c8:	05 c0       	rjmp	.+10     	; 0x39d4 <_ZN13OrangutanTime5ticksEv+0x30>
    39ca:	26 2f       	mov	r18, r22
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	40 e0       	ldi	r20, 0x00	; 0
    39d0:	50 e0       	ldi	r21, 0x00	; 0
    39d2:	11 c0       	rjmp	.+34     	; 0x39f6 <_ZN13OrangutanTime5ticksEv+0x52>
    39d4:	80 91 b2 00 	lds	r24, 0x00B2
    39d8:	20 91 04 04 	lds	r18, 0x0404
    39dc:	30 91 05 04 	lds	r19, 0x0405
    39e0:	40 91 06 04 	lds	r20, 0x0406
    39e4:	50 91 07 04 	lds	r21, 0x0407
    39e8:	20 50       	subi	r18, 0x00	; 0
    39ea:	3f 4f       	sbci	r19, 0xFF	; 255
    39ec:	4f 4f       	sbci	r20, 0xFF	; 255
    39ee:	5f 4f       	sbci	r21, 0xFF	; 255
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	a0 e0       	ldi	r26, 0x00	; 0
    39f4:	b0 e0       	ldi	r27, 0x00	; 0
    39f6:	28 2b       	or	r18, r24
    39f8:	39 2b       	or	r19, r25
    39fa:	4a 2b       	or	r20, r26
    39fc:	5b 2b       	or	r21, r27
    39fe:	80 91 70 00 	lds	r24, 0x0070
    3a02:	81 60       	ori	r24, 0x01	; 1
    3a04:	80 93 70 00 	sts	0x0070, r24
    3a08:	b9 01       	movw	r22, r18
    3a0a:	ca 01       	movw	r24, r20
    3a0c:	08 95       	ret

00003a0e <get_ticks>:
    3a0e:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <_ZN13OrangutanTime5ticksEv>
    3a12:	08 95       	ret

00003a14 <_ZN13OrangutanTime5resetEv>:
    3a14:	0e 94 b0 1c 	call	0x3960	; 0x3960 <_ZN13OrangutanTime4initEv>
    3a18:	e0 e7       	ldi	r30, 0x70	; 112
    3a1a:	f0 e0       	ldi	r31, 0x00	; 0
    3a1c:	80 81       	ld	r24, Z
    3a1e:	8e 7f       	andi	r24, 0xFE	; 254
    3a20:	80 83       	st	Z, r24
    3a22:	10 92 08 04 	sts	0x0408, r1
    3a26:	10 92 09 04 	sts	0x0409, r1
    3a2a:	10 92 0a 04 	sts	0x040A, r1
    3a2e:	10 92 0b 04 	sts	0x040B, r1
    3a32:	10 92 0d 04 	sts	0x040D, r1
    3a36:	10 92 0c 04 	sts	0x040C, r1
    3a3a:	80 81       	ld	r24, Z
    3a3c:	81 60       	ori	r24, 0x01	; 1
    3a3e:	80 83       	st	Z, r24
    3a40:	08 95       	ret

00003a42 <time_reset>:
    3a42:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <_ZN13OrangutanTime5resetEv>
    3a46:	08 95       	ret

00003a48 <_ZN12OrangutanSVP7setModeEh>:
    3a48:	98 2f       	mov	r25, r24
    3a4a:	80 91 25 04 	lds	r24, 0x0425
    3a4e:	89 17       	cp	r24, r25
    3a50:	39 f0       	breq	.+14     	; 0x3a60 <_ZN12OrangutanSVP7setModeEh+0x18>
    3a52:	90 93 25 04 	sts	0x0425, r25
    3a56:	89 2f       	mov	r24, r25
    3a58:	80 6c       	ori	r24, 0xC0	; 192
    3a5a:	65 e0       	ldi	r22, 0x05	; 5
    3a5c:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3a60:	08 95       	ret

00003a62 <svp_set_mode>:
    3a62:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN12OrangutanSVP7setModeEh>
    3a66:	08 95       	ret

00003a68 <_ZN12OrangutanSVP17serialSendIfReadyEc>:
    3a68:	1f 93       	push	r17
    3a6a:	18 2f       	mov	r17, r24
    3a6c:	88 1f       	adc	r24, r24
    3a6e:	88 27       	eor	r24, r24
    3a70:	88 1f       	adc	r24, r24
    3a72:	8c 57       	subi	r24, 0x7C	; 124
    3a74:	65 e0       	ldi	r22, 0x05	; 5
    3a76:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3a7a:	81 2f       	mov	r24, r17
    3a7c:	8f 77       	andi	r24, 0x7F	; 127
    3a7e:	65 e0       	ldi	r22, 0x05	; 5
    3a80:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3a84:	1f 91       	pop	r17
    3a86:	08 95       	ret

00003a88 <_ZN12OrangutanSVP11getNextByteEv>:
    3a88:	8f ef       	ldi	r24, 0xFF	; 255
    3a8a:	64 e0       	ldi	r22, 0x04	; 4
    3a8c:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3a90:	08 95       	ret

00003a92 <_ZL23updateVariablesIfNeededv>:
    3a92:	cf 93       	push	r28
    3a94:	df 93       	push	r29
    3a96:	0e 94 ba 1c 	call	0x3974	; 0x3974 <_ZN13OrangutanTime2msEv>
    3a9a:	20 91 e4 03 	lds	r18, 0x03E4
    3a9e:	30 91 e5 03 	lds	r19, 0x03E5
    3aa2:	40 91 e6 03 	lds	r20, 0x03E6
    3aa6:	50 91 e7 03 	lds	r21, 0x03E7
    3aaa:	62 17       	cp	r22, r18
    3aac:	73 07       	cpc	r23, r19
    3aae:	84 07       	cpc	r24, r20
    3ab0:	95 07       	cpc	r25, r21
    3ab2:	b9 f0       	breq	.+46     	; 0x3ae2 <_ZL23updateVariablesIfNeededv+0x50>
    3ab4:	81 e8       	ldi	r24, 0x81	; 129
    3ab6:	67 e0       	ldi	r22, 0x07	; 7
    3ab8:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3abc:	c8 e1       	ldi	r28, 0x18	; 24
    3abe:	d4 e0       	ldi	r29, 0x04	; 4
    3ac0:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <_ZN12OrangutanSVP11getNextByteEv>
    3ac4:	89 93       	st	Y+, r24
    3ac6:	84 e0       	ldi	r24, 0x04	; 4
    3ac8:	c5 32       	cpi	r28, 0x25	; 37
    3aca:	d8 07       	cpc	r29, r24
    3acc:	c9 f7       	brne	.-14     	; 0x3ac0 <_ZL23updateVariablesIfNeededv+0x2e>
    3ace:	0e 94 ba 1c 	call	0x3974	; 0x3974 <_ZN13OrangutanTime2msEv>
    3ad2:	60 93 e4 03 	sts	0x03E4, r22
    3ad6:	70 93 e5 03 	sts	0x03E5, r23
    3ada:	80 93 e6 03 	sts	0x03E6, r24
    3ade:	90 93 e7 03 	sts	0x03E7, r25
    3ae2:	df 91       	pop	r29
    3ae4:	cf 91       	pop	r28
    3ae6:	08 95       	ret

00003ae8 <_ZN12OrangutanSVP9getStatusEv>:
    3ae8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <_ZL23updateVariablesIfNeededv>
    3aec:	80 91 18 04 	lds	r24, 0x0418
    3af0:	08 95       	ret

00003af2 <svp_get_status>:
    3af2:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <_ZN12OrangutanSVP9getStatusEv>
    3af6:	08 95       	ret

00003af8 <_ZN12OrangutanSVP21getChannelDMillivoltsEv>:
    3af8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <_ZL23updateVariablesIfNeededv>
    3afc:	80 91 1f 04 	lds	r24, 0x041F
    3b00:	90 91 20 04 	lds	r25, 0x0420
    3b04:	08 95       	ret

00003b06 <_ZN12OrangutanSVP21getChannelCMillivoltsEv>:
    3b06:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <_ZL23updateVariablesIfNeededv>
    3b0a:	80 91 1d 04 	lds	r24, 0x041D
    3b0e:	90 91 1e 04 	lds	r25, 0x041E
    3b12:	08 95       	ret

00003b14 <_ZN12OrangutanSVP21getChannelBMillivoltsEv>:
    3b14:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <_ZL23updateVariablesIfNeededv>
    3b18:	80 91 1b 04 	lds	r24, 0x041B
    3b1c:	90 91 1c 04 	lds	r25, 0x041C
    3b20:	08 95       	ret

00003b22 <_ZN12OrangutanSVP21getChannelAMillivoltsEv>:
    3b22:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <_ZL23updateVariablesIfNeededv>
    3b26:	80 91 19 04 	lds	r24, 0x0419
    3b2a:	90 91 1a 04 	lds	r25, 0x041A
    3b2e:	08 95       	ret

00003b30 <_ZN12OrangutanSVP20getBatteryMillivoltsEv>:
    3b30:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <_ZL23updateVariablesIfNeededv>
    3b34:	80 91 23 04 	lds	r24, 0x0423
    3b38:	90 91 24 04 	lds	r25, 0x0424
    3b3c:	08 95       	ret

00003b3e <_ZN12OrangutanSVP20getTrimpotMillivoltsEv>:
    3b3e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <_ZL23updateVariablesIfNeededv>
    3b42:	80 91 21 04 	lds	r24, 0x0421
    3b46:	90 91 22 04 	lds	r25, 0x0422
    3b4a:	08 95       	ret

00003b4c <_ZN12OrangutanSVP15serialReadStartEv>:
    3b4c:	83 e8       	ldi	r24, 0x83	; 131
    3b4e:	67 e0       	ldi	r22, 0x07	; 7
    3b50:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3b54:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <_ZN12OrangutanSVP11getNextByteEv>
    3b58:	08 95       	ret

00003b5a <_Z14updateEncodersv>:
    3b5a:	a5 e0       	ldi	r26, 0x05	; 5
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	e3 eb       	ldi	r30, 0xB3	; 179
    3b60:	fd e1       	ldi	r31, 0x1D	; 29
    3b62:	0c 94 26 1f 	jmp	0x3e4c	; 0x3e4c <__prologue_saves__+0x1e>
    3b66:	82 e8       	ldi	r24, 0x82	; 130
    3b68:	66 e0       	ldi	r22, 0x06	; 6
    3b6a:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3b6e:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <_ZN12OrangutanSVP11getNextByteEv>
    3b72:	80 93 13 04 	sts	0x0413, r24
    3b76:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <_ZN12OrangutanSVP11getNextByteEv>
    3b7a:	80 93 14 04 	sts	0x0414, r24
    3b7e:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <_ZN12OrangutanSVP11getNextByteEv>
    3b82:	80 93 15 04 	sts	0x0415, r24
    3b86:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <_ZN12OrangutanSVP11getNextByteEv>
    3b8a:	80 93 16 04 	sts	0x0416, r24
    3b8e:	10 91 17 04 	lds	r17, 0x0417
    3b92:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <_ZN12OrangutanSVP11getNextByteEv>
    3b96:	18 2b       	or	r17, r24
    3b98:	10 93 17 04 	sts	0x0417, r17
    3b9c:	de 01       	movw	r26, r28
    3b9e:	11 96       	adiw	r26, 0x01	; 1
    3ba0:	e3 e1       	ldi	r30, 0x13	; 19
    3ba2:	f4 e0       	ldi	r31, 0x04	; 4
    3ba4:	85 e0       	ldi	r24, 0x05	; 5
    3ba6:	01 90       	ld	r0, Z+
    3ba8:	0d 92       	st	X+, r0
    3baa:	81 50       	subi	r24, 0x01	; 1
    3bac:	e1 f7       	brne	.-8      	; 0x3ba6 <_Z14updateEncodersv+0x4c>
    3bae:	29 81       	ldd	r18, Y+1	; 0x01
    3bb0:	3a 81       	ldd	r19, Y+2	; 0x02
    3bb2:	4b 81       	ldd	r20, Y+3	; 0x03
    3bb4:	5c 81       	ldd	r21, Y+4	; 0x04
    3bb6:	6d 81       	ldd	r22, Y+5	; 0x05
    3bb8:	70 e0       	ldi	r23, 0x00	; 0
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	25 96       	adiw	r28, 0x05	; 5
    3bbe:	e3 e0       	ldi	r30, 0x03	; 3
    3bc0:	0c 94 42 1f 	jmp	0x3e84	; 0x3e84 <__epilogue_restores__+0x1e>

00003bc4 <_ZL22updateEncodersIfNeededv>:
    3bc4:	0e 94 ba 1c 	call	0x3974	; 0x3974 <_ZN13OrangutanTime2msEv>
    3bc8:	20 91 e0 03 	lds	r18, 0x03E0
    3bcc:	30 91 e1 03 	lds	r19, 0x03E1
    3bd0:	40 91 e2 03 	lds	r20, 0x03E2
    3bd4:	50 91 e3 03 	lds	r21, 0x03E3
    3bd8:	62 17       	cp	r22, r18
    3bda:	73 07       	cpc	r23, r19
    3bdc:	84 07       	cpc	r24, r20
    3bde:	95 07       	cpc	r25, r21
    3be0:	61 f0       	breq	.+24     	; 0x3bfa <_ZL22updateEncodersIfNeededv+0x36>
    3be2:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <_Z14updateEncodersv>
    3be6:	0e 94 ba 1c 	call	0x3974	; 0x3974 <_ZN13OrangutanTime2msEv>
    3bea:	60 93 e0 03 	sts	0x03E0, r22
    3bee:	70 93 e1 03 	sts	0x03E1, r23
    3bf2:	80 93 e2 03 	sts	0x03E2, r24
    3bf6:	90 93 e3 03 	sts	0x03E3, r25
    3bfa:	08 95       	ret

00003bfc <_ZN12OrangutanSVP12checkErrorCDEv>:
    3bfc:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <_ZL22updateEncodersIfNeededv>
    3c00:	80 91 17 04 	lds	r24, 0x0417
    3c04:	81 fd       	sbrc	r24, 1
    3c06:	02 c0       	rjmp	.+4      	; 0x3c0c <_ZN12OrangutanSVP12checkErrorCDEv+0x10>
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	08 95       	ret
    3c0c:	8d 7f       	andi	r24, 0xFD	; 253
    3c0e:	80 93 17 04 	sts	0x0417, r24
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	08 95       	ret

00003c16 <svp_check_error_cd>:
    3c16:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <_ZN12OrangutanSVP12checkErrorCDEv>
    3c1a:	08 95       	ret

00003c1c <_ZN12OrangutanSVP12checkErrorABEv>:
    3c1c:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <_ZL22updateEncodersIfNeededv>
    3c20:	80 91 17 04 	lds	r24, 0x0417
    3c24:	80 fd       	sbrc	r24, 0
    3c26:	02 c0       	rjmp	.+4      	; 0x3c2c <_ZN12OrangutanSVP12checkErrorABEv+0x10>
    3c28:	80 e0       	ldi	r24, 0x00	; 0
    3c2a:	08 95       	ret
    3c2c:	8e 7f       	andi	r24, 0xFE	; 254
    3c2e:	80 93 17 04 	sts	0x0417, r24
    3c32:	81 e0       	ldi	r24, 0x01	; 1
    3c34:	08 95       	ret

00003c36 <svp_check_error_ab>:
    3c36:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <_ZN12OrangutanSVP12checkErrorABEv>
    3c3a:	08 95       	ret

00003c3c <_ZN12OrangutanSVP11getCountsCDEv>:
    3c3c:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <_ZL22updateEncodersIfNeededv>
    3c40:	20 91 15 04 	lds	r18, 0x0415
    3c44:	30 91 16 04 	lds	r19, 0x0416
    3c48:	80 91 11 04 	lds	r24, 0x0411
    3c4c:	90 91 12 04 	lds	r25, 0x0412
    3c50:	28 1b       	sub	r18, r24
    3c52:	39 0b       	sbc	r19, r25
    3c54:	c9 01       	movw	r24, r18
    3c56:	08 95       	ret

00003c58 <_ZN12OrangutanSVP19getCountsAndResetCDEv>:
    3c58:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <_ZN12OrangutanSVP11getCountsCDEv>
    3c5c:	20 91 15 04 	lds	r18, 0x0415
    3c60:	30 91 16 04 	lds	r19, 0x0416
    3c64:	30 93 12 04 	sts	0x0412, r19
    3c68:	20 93 11 04 	sts	0x0411, r18
    3c6c:	08 95       	ret

00003c6e <svp_get_counts_and_reset_cd>:
    3c6e:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <_ZN12OrangutanSVP19getCountsAndResetCDEv>
    3c72:	08 95       	ret

00003c74 <svp_get_counts_cd>:
    3c74:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <_ZN12OrangutanSVP11getCountsCDEv>
    3c78:	08 95       	ret

00003c7a <_ZN12OrangutanSVP11getCountsABEv>:
    3c7a:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <_ZL22updateEncodersIfNeededv>
    3c7e:	20 91 13 04 	lds	r18, 0x0413
    3c82:	30 91 14 04 	lds	r19, 0x0414
    3c86:	80 91 0f 04 	lds	r24, 0x040F
    3c8a:	90 91 10 04 	lds	r25, 0x0410
    3c8e:	28 1b       	sub	r18, r24
    3c90:	39 0b       	sbc	r19, r25
    3c92:	c9 01       	movw	r24, r18
    3c94:	08 95       	ret

00003c96 <_ZN12OrangutanSVP19getCountsAndResetABEv>:
    3c96:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <_ZN12OrangutanSVP11getCountsABEv>
    3c9a:	20 91 13 04 	lds	r18, 0x0413
    3c9e:	30 91 14 04 	lds	r19, 0x0414
    3ca2:	30 93 10 04 	sts	0x0410, r19
    3ca6:	20 93 0f 04 	sts	0x040F, r18
    3caa:	08 95       	ret

00003cac <svp_get_counts_and_reset_ab>:
    3cac:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN12OrangutanSVP19getCountsAndResetABEv>
    3cb0:	08 95       	ret

00003cb2 <svp_get_counts_ab>:
    3cb2:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <_ZN12OrangutanSVP11getCountsABEv>
    3cb6:	08 95       	ret

00003cb8 <_ZN12OrangutanSVP18getFirmwareVersionEv>:
    3cb8:	80 e8       	ldi	r24, 0x80	; 128
    3cba:	65 e0       	ldi	r22, 0x05	; 5
    3cbc:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3cc0:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <_ZN12OrangutanSVP11getNextByteEv>
    3cc4:	08 95       	ret

00003cc6 <svp_get_firmware_version>:
    3cc6:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <_ZN12OrangutanSVP18getFirmwareVersionEv>
    3cca:	08 95       	ret

00003ccc <_ZN18OrangutanSPIMaster4initEhh>:
    3ccc:	98 2f       	mov	r25, r24
    3cce:	24 99       	sbic	0x04, 4	; 4
    3cd0:	0c c0       	rjmp	.+24     	; 0x3cea <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    3cd2:	2c 99       	sbic	0x05, 4	; 5
    3cd4:	0a c0       	rjmp	.+20     	; 0x3cea <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    3cd6:	2c 9a       	sbi	0x05, 4	; 5
    3cd8:	ee e1       	ldi	r30, 0x1E	; 30
    3cda:	f0 e0       	ldi	r31, 0x00	; 0
    3cdc:	6f 93       	push	r22
    3cde:	64 e0       	ldi	r22, 0x04	; 4
    3ce0:	6a 95       	dec	r22
    3ce2:	f1 f7       	brne	.-4      	; 0x3ce0 <_ZN18OrangutanSPIMaster4initEhh+0x14>
    3ce4:	6f 91       	pop	r22
    3ce6:	31 97       	sbiw	r30, 0x01	; 1
    3ce8:	c9 f7       	brne	.-14     	; 0x3cdc <_ZN18OrangutanSPIMaster4initEhh+0x10>
    3cea:	84 b1       	in	r24, 0x04	; 4
    3cec:	80 6a       	ori	r24, 0xA0	; 160
    3cee:	84 b9       	out	0x04, r24	; 4
    3cf0:	26 98       	cbi	0x04, 6	; 4
    3cf2:	89 2f       	mov	r24, r25
    3cf4:	83 70       	andi	r24, 0x03	; 3
    3cf6:	80 65       	ori	r24, 0x50	; 80
    3cf8:	6c 7a       	andi	r22, 0xAC	; 172
    3cfa:	86 2b       	or	r24, r22
    3cfc:	8c bd       	out	0x2c, r24	; 44
    3cfe:	89 2f       	mov	r24, r25
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	96 95       	lsr	r25
    3d04:	87 95       	ror	r24
    3d06:	96 95       	lsr	r25
    3d08:	87 95       	ror	r24
    3d0a:	81 70       	andi	r24, 0x01	; 1
    3d0c:	8d bd       	out	0x2d, r24	; 45
    3d0e:	81 e0       	ldi	r24, 0x01	; 1
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	0e 94 89 1c 	call	0x3912	; 0x3912 <_ZN13OrangutanTime17delayMillisecondsEj>
    3d16:	08 95       	ret

00003d18 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>:
    3d18:	0f 93       	push	r16
    3d1a:	1f 93       	push	r17
    3d1c:	08 2f       	mov	r16, r24
    3d1e:	16 2f       	mov	r17, r22
    3d20:	0c b4       	in	r0, 0x2c	; 44
    3d22:	06 fc       	sbrc	r0, 6
    3d24:	04 c0       	rjmp	.+8      	; 0x3d2e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x16>
    3d26:	80 e0       	ldi	r24, 0x00	; 0
    3d28:	64 e0       	ldi	r22, 0x04	; 4
    3d2a:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <_ZN18OrangutanSPIMaster4initEhh>
    3d2e:	0c b4       	in	r0, 0x2c	; 44
    3d30:	04 fc       	sbrc	r0, 4
    3d32:	03 c0       	rjmp	.+6      	; 0x3d3a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x22>
    3d34:	8c b5       	in	r24, 0x2c	; 44
    3d36:	80 61       	ori	r24, 0x10	; 16
    3d38:	8c bd       	out	0x2c, r24	; 44
    3d3a:	0e bd       	out	0x2e, r16	; 46
    3d3c:	05 c0       	rjmp	.+10     	; 0x3d48 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    3d3e:	0c b4       	in	r0, 0x2c	; 44
    3d40:	04 fc       	sbrc	r0, 4
    3d42:	02 c0       	rjmp	.+4      	; 0x3d48 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    3d44:	80 e0       	ldi	r24, 0x00	; 0
    3d46:	0f c0       	rjmp	.+30     	; 0x3d66 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4e>
    3d48:	0d b4       	in	r0, 0x2d	; 45
    3d4a:	07 fe       	sbrs	r0, 7
    3d4c:	f8 cf       	rjmp	.-16     	; 0x3d3e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x26>
    3d4e:	11 23       	and	r17, r17
    3d50:	49 f0       	breq	.+18     	; 0x3d64 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4c>
    3d52:	81 2f       	mov	r24, r17
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	6f 93       	push	r22
    3d58:	64 e0       	ldi	r22, 0x04	; 4
    3d5a:	6a 95       	dec	r22
    3d5c:	f1 f7       	brne	.-4      	; 0x3d5a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x42>
    3d5e:	6f 91       	pop	r22
    3d60:	01 97       	sbiw	r24, 0x01	; 1
    3d62:	c9 f7       	brne	.-14     	; 0x3d56 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x3e>
    3d64:	8e b5       	in	r24, 0x2e	; 46
    3d66:	1f 91       	pop	r17
    3d68:	0f 91       	pop	r16
    3d6a:	08 95       	ret

00003d6c <_ZN18OrangutanSPIMaster8transmitEh>:
    3d6c:	60 e0       	ldi	r22, 0x00	; 0
    3d6e:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3d72:	08 95       	ret

00003d74 <spi_master_transmit>:
    3d74:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_ZN18OrangutanSPIMaster8transmitEh>
    3d78:	08 95       	ret

00003d7a <spi_master_transmit_and_delay>:
    3d7a:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3d7e:	08 95       	ret

00003d80 <spi_master_init>:
    3d80:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <_ZN18OrangutanSPIMaster4initEhh>
    3d84:	08 95       	ret

00003d86 <__mulsi3>:
    3d86:	62 9f       	mul	r22, r18
    3d88:	d0 01       	movw	r26, r0
    3d8a:	73 9f       	mul	r23, r19
    3d8c:	f0 01       	movw	r30, r0
    3d8e:	82 9f       	mul	r24, r18
    3d90:	e0 0d       	add	r30, r0
    3d92:	f1 1d       	adc	r31, r1
    3d94:	64 9f       	mul	r22, r20
    3d96:	e0 0d       	add	r30, r0
    3d98:	f1 1d       	adc	r31, r1
    3d9a:	92 9f       	mul	r25, r18
    3d9c:	f0 0d       	add	r31, r0
    3d9e:	83 9f       	mul	r24, r19
    3da0:	f0 0d       	add	r31, r0
    3da2:	74 9f       	mul	r23, r20
    3da4:	f0 0d       	add	r31, r0
    3da6:	65 9f       	mul	r22, r21
    3da8:	f0 0d       	add	r31, r0
    3daa:	99 27       	eor	r25, r25
    3dac:	72 9f       	mul	r23, r18
    3dae:	b0 0d       	add	r27, r0
    3db0:	e1 1d       	adc	r30, r1
    3db2:	f9 1f       	adc	r31, r25
    3db4:	63 9f       	mul	r22, r19
    3db6:	b0 0d       	add	r27, r0
    3db8:	e1 1d       	adc	r30, r1
    3dba:	f9 1f       	adc	r31, r25
    3dbc:	bd 01       	movw	r22, r26
    3dbe:	cf 01       	movw	r24, r30
    3dc0:	11 24       	eor	r1, r1
    3dc2:	08 95       	ret

00003dc4 <__divmodhi4>:
    3dc4:	97 fb       	bst	r25, 7
    3dc6:	09 2e       	mov	r0, r25
    3dc8:	07 26       	eor	r0, r23
    3dca:	0a d0       	rcall	.+20     	; 0x3de0 <__divmodhi4_neg1>
    3dcc:	77 fd       	sbrc	r23, 7
    3dce:	04 d0       	rcall	.+8      	; 0x3dd8 <__divmodhi4_neg2>
    3dd0:	65 d0       	rcall	.+202    	; 0x3e9c <__udivmodhi4>
    3dd2:	06 d0       	rcall	.+12     	; 0x3de0 <__divmodhi4_neg1>
    3dd4:	00 20       	and	r0, r0
    3dd6:	1a f4       	brpl	.+6      	; 0x3dde <__divmodhi4_exit>

00003dd8 <__divmodhi4_neg2>:
    3dd8:	70 95       	com	r23
    3dda:	61 95       	neg	r22
    3ddc:	7f 4f       	sbci	r23, 0xFF	; 255

00003dde <__divmodhi4_exit>:
    3dde:	08 95       	ret

00003de0 <__divmodhi4_neg1>:
    3de0:	f6 f7       	brtc	.-4      	; 0x3dde <__divmodhi4_exit>
    3de2:	90 95       	com	r25
    3de4:	81 95       	neg	r24
    3de6:	9f 4f       	sbci	r25, 0xFF	; 255
    3de8:	08 95       	ret

00003dea <__udivmodsi4>:
    3dea:	a1 e2       	ldi	r26, 0x21	; 33
    3dec:	1a 2e       	mov	r1, r26
    3dee:	aa 1b       	sub	r26, r26
    3df0:	bb 1b       	sub	r27, r27
    3df2:	fd 01       	movw	r30, r26
    3df4:	0d c0       	rjmp	.+26     	; 0x3e10 <__udivmodsi4_ep>

00003df6 <__udivmodsi4_loop>:
    3df6:	aa 1f       	adc	r26, r26
    3df8:	bb 1f       	adc	r27, r27
    3dfa:	ee 1f       	adc	r30, r30
    3dfc:	ff 1f       	adc	r31, r31
    3dfe:	a2 17       	cp	r26, r18
    3e00:	b3 07       	cpc	r27, r19
    3e02:	e4 07       	cpc	r30, r20
    3e04:	f5 07       	cpc	r31, r21
    3e06:	20 f0       	brcs	.+8      	; 0x3e10 <__udivmodsi4_ep>
    3e08:	a2 1b       	sub	r26, r18
    3e0a:	b3 0b       	sbc	r27, r19
    3e0c:	e4 0b       	sbc	r30, r20
    3e0e:	f5 0b       	sbc	r31, r21

00003e10 <__udivmodsi4_ep>:
    3e10:	66 1f       	adc	r22, r22
    3e12:	77 1f       	adc	r23, r23
    3e14:	88 1f       	adc	r24, r24
    3e16:	99 1f       	adc	r25, r25
    3e18:	1a 94       	dec	r1
    3e1a:	69 f7       	brne	.-38     	; 0x3df6 <__udivmodsi4_loop>
    3e1c:	60 95       	com	r22
    3e1e:	70 95       	com	r23
    3e20:	80 95       	com	r24
    3e22:	90 95       	com	r25
    3e24:	9b 01       	movw	r18, r22
    3e26:	ac 01       	movw	r20, r24
    3e28:	bd 01       	movw	r22, r26
    3e2a:	cf 01       	movw	r24, r30
    3e2c:	08 95       	ret

00003e2e <__prologue_saves__>:
    3e2e:	2f 92       	push	r2
    3e30:	3f 92       	push	r3
    3e32:	4f 92       	push	r4
    3e34:	5f 92       	push	r5
    3e36:	6f 92       	push	r6
    3e38:	7f 92       	push	r7
    3e3a:	8f 92       	push	r8
    3e3c:	9f 92       	push	r9
    3e3e:	af 92       	push	r10
    3e40:	bf 92       	push	r11
    3e42:	cf 92       	push	r12
    3e44:	df 92       	push	r13
    3e46:	ef 92       	push	r14
    3e48:	ff 92       	push	r15
    3e4a:	0f 93       	push	r16
    3e4c:	1f 93       	push	r17
    3e4e:	cf 93       	push	r28
    3e50:	df 93       	push	r29
    3e52:	cd b7       	in	r28, 0x3d	; 61
    3e54:	de b7       	in	r29, 0x3e	; 62
    3e56:	ca 1b       	sub	r28, r26
    3e58:	db 0b       	sbc	r29, r27
    3e5a:	0f b6       	in	r0, 0x3f	; 63
    3e5c:	f8 94       	cli
    3e5e:	de bf       	out	0x3e, r29	; 62
    3e60:	0f be       	out	0x3f, r0	; 63
    3e62:	cd bf       	out	0x3d, r28	; 61
    3e64:	09 94       	ijmp

00003e66 <__epilogue_restores__>:
    3e66:	2a 88       	ldd	r2, Y+18	; 0x12
    3e68:	39 88       	ldd	r3, Y+17	; 0x11
    3e6a:	48 88       	ldd	r4, Y+16	; 0x10
    3e6c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e6e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e70:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e72:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e74:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e76:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e78:	b9 84       	ldd	r11, Y+9	; 0x09
    3e7a:	c8 84       	ldd	r12, Y+8	; 0x08
    3e7c:	df 80       	ldd	r13, Y+7	; 0x07
    3e7e:	ee 80       	ldd	r14, Y+6	; 0x06
    3e80:	fd 80       	ldd	r15, Y+5	; 0x05
    3e82:	0c 81       	ldd	r16, Y+4	; 0x04
    3e84:	1b 81       	ldd	r17, Y+3	; 0x03
    3e86:	aa 81       	ldd	r26, Y+2	; 0x02
    3e88:	b9 81       	ldd	r27, Y+1	; 0x01
    3e8a:	ce 0f       	add	r28, r30
    3e8c:	d1 1d       	adc	r29, r1
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	f8 94       	cli
    3e92:	de bf       	out	0x3e, r29	; 62
    3e94:	0f be       	out	0x3f, r0	; 63
    3e96:	cd bf       	out	0x3d, r28	; 61
    3e98:	ed 01       	movw	r28, r26
    3e9a:	08 95       	ret

00003e9c <__udivmodhi4>:
    3e9c:	aa 1b       	sub	r26, r26
    3e9e:	bb 1b       	sub	r27, r27
    3ea0:	51 e1       	ldi	r21, 0x11	; 17
    3ea2:	07 c0       	rjmp	.+14     	; 0x3eb2 <__udivmodhi4_ep>

00003ea4 <__udivmodhi4_loop>:
    3ea4:	aa 1f       	adc	r26, r26
    3ea6:	bb 1f       	adc	r27, r27
    3ea8:	a6 17       	cp	r26, r22
    3eaa:	b7 07       	cpc	r27, r23
    3eac:	10 f0       	brcs	.+4      	; 0x3eb2 <__udivmodhi4_ep>
    3eae:	a6 1b       	sub	r26, r22
    3eb0:	b7 0b       	sbc	r27, r23

00003eb2 <__udivmodhi4_ep>:
    3eb2:	88 1f       	adc	r24, r24
    3eb4:	99 1f       	adc	r25, r25
    3eb6:	5a 95       	dec	r21
    3eb8:	a9 f7       	brne	.-22     	; 0x3ea4 <__udivmodhi4_loop>
    3eba:	80 95       	com	r24
    3ebc:	90 95       	com	r25
    3ebe:	bc 01       	movw	r22, r24
    3ec0:	cd 01       	movw	r24, r26
    3ec2:	08 95       	ret

00003ec4 <malloc>:
    3ec4:	cf 93       	push	r28
    3ec6:	df 93       	push	r29
    3ec8:	bc 01       	movw	r22, r24
    3eca:	82 30       	cpi	r24, 0x02	; 2
    3ecc:	91 05       	cpc	r25, r1
    3ece:	10 f4       	brcc	.+4      	; 0x3ed4 <malloc+0x10>
    3ed0:	62 e0       	ldi	r22, 0x02	; 2
    3ed2:	70 e0       	ldi	r23, 0x00	; 0
    3ed4:	a0 91 2e 04 	lds	r26, 0x042E
    3ed8:	b0 91 2f 04 	lds	r27, 0x042F
    3edc:	ed 01       	movw	r28, r26
    3ede:	e0 e0       	ldi	r30, 0x00	; 0
    3ee0:	f0 e0       	ldi	r31, 0x00	; 0
    3ee2:	40 e0       	ldi	r20, 0x00	; 0
    3ee4:	50 e0       	ldi	r21, 0x00	; 0
    3ee6:	21 c0       	rjmp	.+66     	; 0x3f2a <malloc+0x66>
    3ee8:	88 81       	ld	r24, Y
    3eea:	99 81       	ldd	r25, Y+1	; 0x01
    3eec:	86 17       	cp	r24, r22
    3eee:	97 07       	cpc	r25, r23
    3ef0:	69 f4       	brne	.+26     	; 0x3f0c <malloc+0x48>
    3ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ef6:	30 97       	sbiw	r30, 0x00	; 0
    3ef8:	19 f0       	breq	.+6      	; 0x3f00 <malloc+0x3c>
    3efa:	93 83       	std	Z+3, r25	; 0x03
    3efc:	82 83       	std	Z+2, r24	; 0x02
    3efe:	04 c0       	rjmp	.+8      	; 0x3f08 <malloc+0x44>
    3f00:	90 93 2f 04 	sts	0x042F, r25
    3f04:	80 93 2e 04 	sts	0x042E, r24
    3f08:	fe 01       	movw	r30, r28
    3f0a:	34 c0       	rjmp	.+104    	; 0x3f74 <malloc+0xb0>
    3f0c:	68 17       	cp	r22, r24
    3f0e:	79 07       	cpc	r23, r25
    3f10:	38 f4       	brcc	.+14     	; 0x3f20 <malloc+0x5c>
    3f12:	41 15       	cp	r20, r1
    3f14:	51 05       	cpc	r21, r1
    3f16:	19 f0       	breq	.+6      	; 0x3f1e <malloc+0x5a>
    3f18:	84 17       	cp	r24, r20
    3f1a:	95 07       	cpc	r25, r21
    3f1c:	08 f4       	brcc	.+2      	; 0x3f20 <malloc+0x5c>
    3f1e:	ac 01       	movw	r20, r24
    3f20:	fe 01       	movw	r30, r28
    3f22:	8a 81       	ldd	r24, Y+2	; 0x02
    3f24:	9b 81       	ldd	r25, Y+3	; 0x03
    3f26:	9c 01       	movw	r18, r24
    3f28:	e9 01       	movw	r28, r18
    3f2a:	20 97       	sbiw	r28, 0x00	; 0
    3f2c:	e9 f6       	brne	.-70     	; 0x3ee8 <malloc+0x24>
    3f2e:	41 15       	cp	r20, r1
    3f30:	51 05       	cpc	r21, r1
    3f32:	a9 f1       	breq	.+106    	; 0x3f9e <malloc+0xda>
    3f34:	ca 01       	movw	r24, r20
    3f36:	86 1b       	sub	r24, r22
    3f38:	97 0b       	sbc	r25, r23
    3f3a:	04 97       	sbiw	r24, 0x04	; 4
    3f3c:	08 f4       	brcc	.+2      	; 0x3f40 <malloc+0x7c>
    3f3e:	ba 01       	movw	r22, r20
    3f40:	e0 e0       	ldi	r30, 0x00	; 0
    3f42:	f0 e0       	ldi	r31, 0x00	; 0
    3f44:	2a c0       	rjmp	.+84     	; 0x3f9a <malloc+0xd6>
    3f46:	8d 91       	ld	r24, X+
    3f48:	9c 91       	ld	r25, X
    3f4a:	11 97       	sbiw	r26, 0x01	; 1
    3f4c:	84 17       	cp	r24, r20
    3f4e:	95 07       	cpc	r25, r21
    3f50:	f9 f4       	brne	.+62     	; 0x3f90 <malloc+0xcc>
    3f52:	64 17       	cp	r22, r20
    3f54:	75 07       	cpc	r23, r21
    3f56:	81 f4       	brne	.+32     	; 0x3f78 <malloc+0xb4>
    3f58:	12 96       	adiw	r26, 0x02	; 2
    3f5a:	8d 91       	ld	r24, X+
    3f5c:	9c 91       	ld	r25, X
    3f5e:	13 97       	sbiw	r26, 0x03	; 3
    3f60:	30 97       	sbiw	r30, 0x00	; 0
    3f62:	19 f0       	breq	.+6      	; 0x3f6a <malloc+0xa6>
    3f64:	93 83       	std	Z+3, r25	; 0x03
    3f66:	82 83       	std	Z+2, r24	; 0x02
    3f68:	04 c0       	rjmp	.+8      	; 0x3f72 <malloc+0xae>
    3f6a:	90 93 2f 04 	sts	0x042F, r25
    3f6e:	80 93 2e 04 	sts	0x042E, r24
    3f72:	fd 01       	movw	r30, r26
    3f74:	32 96       	adiw	r30, 0x02	; 2
    3f76:	4f c0       	rjmp	.+158    	; 0x4016 <malloc+0x152>
    3f78:	ca 01       	movw	r24, r20
    3f7a:	86 1b       	sub	r24, r22
    3f7c:	97 0b       	sbc	r25, r23
    3f7e:	fd 01       	movw	r30, r26
    3f80:	e8 0f       	add	r30, r24
    3f82:	f9 1f       	adc	r31, r25
    3f84:	61 93       	st	Z+, r22
    3f86:	71 93       	st	Z+, r23
    3f88:	02 97       	sbiw	r24, 0x02	; 2
    3f8a:	8d 93       	st	X+, r24
    3f8c:	9c 93       	st	X, r25
    3f8e:	43 c0       	rjmp	.+134    	; 0x4016 <malloc+0x152>
    3f90:	fd 01       	movw	r30, r26
    3f92:	82 81       	ldd	r24, Z+2	; 0x02
    3f94:	93 81       	ldd	r25, Z+3	; 0x03
    3f96:	9c 01       	movw	r18, r24
    3f98:	d9 01       	movw	r26, r18
    3f9a:	10 97       	sbiw	r26, 0x00	; 0
    3f9c:	a1 f6       	brne	.-88     	; 0x3f46 <malloc+0x82>
    3f9e:	80 91 2c 04 	lds	r24, 0x042C
    3fa2:	90 91 2d 04 	lds	r25, 0x042D
    3fa6:	89 2b       	or	r24, r25
    3fa8:	41 f4       	brne	.+16     	; 0x3fba <malloc+0xf6>
    3faa:	80 91 ea 03 	lds	r24, 0x03EA
    3fae:	90 91 eb 03 	lds	r25, 0x03EB
    3fb2:	90 93 2d 04 	sts	0x042D, r25
    3fb6:	80 93 2c 04 	sts	0x042C, r24
    3fba:	40 91 ec 03 	lds	r20, 0x03EC
    3fbe:	50 91 ed 03 	lds	r21, 0x03ED
    3fc2:	41 15       	cp	r20, r1
    3fc4:	51 05       	cpc	r21, r1
    3fc6:	41 f4       	brne	.+16     	; 0x3fd8 <malloc+0x114>
    3fc8:	4d b7       	in	r20, 0x3d	; 61
    3fca:	5e b7       	in	r21, 0x3e	; 62
    3fcc:	80 91 e8 03 	lds	r24, 0x03E8
    3fd0:	90 91 e9 03 	lds	r25, 0x03E9
    3fd4:	48 1b       	sub	r20, r24
    3fd6:	59 0b       	sbc	r21, r25
    3fd8:	20 91 2c 04 	lds	r18, 0x042C
    3fdc:	30 91 2d 04 	lds	r19, 0x042D
    3fe0:	24 17       	cp	r18, r20
    3fe2:	35 07       	cpc	r19, r21
    3fe4:	b0 f4       	brcc	.+44     	; 0x4012 <malloc+0x14e>
    3fe6:	ca 01       	movw	r24, r20
    3fe8:	82 1b       	sub	r24, r18
    3fea:	93 0b       	sbc	r25, r19
    3fec:	86 17       	cp	r24, r22
    3fee:	97 07       	cpc	r25, r23
    3ff0:	80 f0       	brcs	.+32     	; 0x4012 <malloc+0x14e>
    3ff2:	ab 01       	movw	r20, r22
    3ff4:	4e 5f       	subi	r20, 0xFE	; 254
    3ff6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ff8:	84 17       	cp	r24, r20
    3ffa:	95 07       	cpc	r25, r21
    3ffc:	50 f0       	brcs	.+20     	; 0x4012 <malloc+0x14e>
    3ffe:	42 0f       	add	r20, r18
    4000:	53 1f       	adc	r21, r19
    4002:	50 93 2d 04 	sts	0x042D, r21
    4006:	40 93 2c 04 	sts	0x042C, r20
    400a:	f9 01       	movw	r30, r18
    400c:	61 93       	st	Z+, r22
    400e:	71 93       	st	Z+, r23
    4010:	02 c0       	rjmp	.+4      	; 0x4016 <malloc+0x152>
    4012:	e0 e0       	ldi	r30, 0x00	; 0
    4014:	f0 e0       	ldi	r31, 0x00	; 0
    4016:	cf 01       	movw	r24, r30
    4018:	df 91       	pop	r29
    401a:	cf 91       	pop	r28
    401c:	08 95       	ret

0000401e <free>:
    401e:	cf 93       	push	r28
    4020:	df 93       	push	r29
    4022:	00 97       	sbiw	r24, 0x00	; 0
    4024:	09 f4       	brne	.+2      	; 0x4028 <free+0xa>
    4026:	50 c0       	rjmp	.+160    	; 0x40c8 <free+0xaa>
    4028:	ec 01       	movw	r28, r24
    402a:	22 97       	sbiw	r28, 0x02	; 2
    402c:	1b 82       	std	Y+3, r1	; 0x03
    402e:	1a 82       	std	Y+2, r1	; 0x02
    4030:	a0 91 2e 04 	lds	r26, 0x042E
    4034:	b0 91 2f 04 	lds	r27, 0x042F
    4038:	10 97       	sbiw	r26, 0x00	; 0
    403a:	09 f1       	breq	.+66     	; 0x407e <free+0x60>
    403c:	40 e0       	ldi	r20, 0x00	; 0
    403e:	50 e0       	ldi	r21, 0x00	; 0
    4040:	ac 17       	cp	r26, r28
    4042:	bd 07       	cpc	r27, r29
    4044:	08 f1       	brcs	.+66     	; 0x4088 <free+0x6a>
    4046:	bb 83       	std	Y+3, r27	; 0x03
    4048:	aa 83       	std	Y+2, r26	; 0x02
    404a:	fe 01       	movw	r30, r28
    404c:	21 91       	ld	r18, Z+
    404e:	31 91       	ld	r19, Z+
    4050:	e2 0f       	add	r30, r18
    4052:	f3 1f       	adc	r31, r19
    4054:	ae 17       	cp	r26, r30
    4056:	bf 07       	cpc	r27, r31
    4058:	79 f4       	brne	.+30     	; 0x4078 <free+0x5a>
    405a:	8d 91       	ld	r24, X+
    405c:	9c 91       	ld	r25, X
    405e:	11 97       	sbiw	r26, 0x01	; 1
    4060:	28 0f       	add	r18, r24
    4062:	39 1f       	adc	r19, r25
    4064:	2e 5f       	subi	r18, 0xFE	; 254
    4066:	3f 4f       	sbci	r19, 0xFF	; 255
    4068:	39 83       	std	Y+1, r19	; 0x01
    406a:	28 83       	st	Y, r18
    406c:	12 96       	adiw	r26, 0x02	; 2
    406e:	8d 91       	ld	r24, X+
    4070:	9c 91       	ld	r25, X
    4072:	13 97       	sbiw	r26, 0x03	; 3
    4074:	9b 83       	std	Y+3, r25	; 0x03
    4076:	8a 83       	std	Y+2, r24	; 0x02
    4078:	41 15       	cp	r20, r1
    407a:	51 05       	cpc	r21, r1
    407c:	71 f4       	brne	.+28     	; 0x409a <free+0x7c>
    407e:	d0 93 2f 04 	sts	0x042F, r29
    4082:	c0 93 2e 04 	sts	0x042E, r28
    4086:	20 c0       	rjmp	.+64     	; 0x40c8 <free+0xaa>
    4088:	12 96       	adiw	r26, 0x02	; 2
    408a:	8d 91       	ld	r24, X+
    408c:	9c 91       	ld	r25, X
    408e:	13 97       	sbiw	r26, 0x03	; 3
    4090:	ad 01       	movw	r20, r26
    4092:	00 97       	sbiw	r24, 0x00	; 0
    4094:	11 f0       	breq	.+4      	; 0x409a <free+0x7c>
    4096:	dc 01       	movw	r26, r24
    4098:	d3 cf       	rjmp	.-90     	; 0x4040 <free+0x22>
    409a:	fa 01       	movw	r30, r20
    409c:	d3 83       	std	Z+3, r29	; 0x03
    409e:	c2 83       	std	Z+2, r28	; 0x02
    40a0:	21 91       	ld	r18, Z+
    40a2:	31 91       	ld	r19, Z+
    40a4:	e2 0f       	add	r30, r18
    40a6:	f3 1f       	adc	r31, r19
    40a8:	ce 17       	cp	r28, r30
    40aa:	df 07       	cpc	r29, r31
    40ac:	69 f4       	brne	.+26     	; 0x40c8 <free+0xaa>
    40ae:	88 81       	ld	r24, Y
    40b0:	99 81       	ldd	r25, Y+1	; 0x01
    40b2:	28 0f       	add	r18, r24
    40b4:	39 1f       	adc	r19, r25
    40b6:	2e 5f       	subi	r18, 0xFE	; 254
    40b8:	3f 4f       	sbci	r19, 0xFF	; 255
    40ba:	fa 01       	movw	r30, r20
    40bc:	31 83       	std	Z+1, r19	; 0x01
    40be:	20 83       	st	Z, r18
    40c0:	8a 81       	ldd	r24, Y+2	; 0x02
    40c2:	9b 81       	ldd	r25, Y+3	; 0x03
    40c4:	93 83       	std	Z+3, r25	; 0x03
    40c6:	82 83       	std	Z+2, r24	; 0x02
    40c8:	df 91       	pop	r29
    40ca:	cf 91       	pop	r28
    40cc:	08 95       	ret

000040ce <fdevopen>:
    40ce:	0f 93       	push	r16
    40d0:	1f 93       	push	r17
    40d2:	cf 93       	push	r28
    40d4:	df 93       	push	r29
    40d6:	8c 01       	movw	r16, r24
    40d8:	eb 01       	movw	r28, r22
    40da:	00 97       	sbiw	r24, 0x00	; 0
    40dc:	31 f4       	brne	.+12     	; 0x40ea <fdevopen+0x1c>
    40de:	61 15       	cp	r22, r1
    40e0:	71 05       	cpc	r23, r1
    40e2:	19 f4       	brne	.+6      	; 0x40ea <fdevopen+0x1c>
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	38 c0       	rjmp	.+112    	; 0x415a <__stack+0x5b>
    40ea:	81 e0       	ldi	r24, 0x01	; 1
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	6e e0       	ldi	r22, 0x0E	; 14
    40f0:	70 e0       	ldi	r23, 0x00	; 0
    40f2:	0e 94 b3 20 	call	0x4166	; 0x4166 <calloc>
    40f6:	fc 01       	movw	r30, r24
    40f8:	9c 01       	movw	r18, r24
    40fa:	00 97       	sbiw	r24, 0x00	; 0
    40fc:	71 f1       	breq	.+92     	; 0x415a <__stack+0x5b>
    40fe:	80 e8       	ldi	r24, 0x80	; 128
    4100:	83 83       	std	Z+3, r24	; 0x03
    4102:	20 97       	sbiw	r28, 0x00	; 0
    4104:	71 f0       	breq	.+28     	; 0x4122 <__stack+0x23>
    4106:	d3 87       	std	Z+11, r29	; 0x0b
    4108:	c2 87       	std	Z+10, r28	; 0x0a
    410a:	81 e8       	ldi	r24, 0x81	; 129
    410c:	83 83       	std	Z+3, r24	; 0x03
    410e:	80 91 30 04 	lds	r24, 0x0430
    4112:	90 91 31 04 	lds	r25, 0x0431
    4116:	89 2b       	or	r24, r25
    4118:	21 f4       	brne	.+8      	; 0x4122 <__stack+0x23>
    411a:	f0 93 31 04 	sts	0x0431, r31
    411e:	e0 93 30 04 	sts	0x0430, r30
    4122:	01 15       	cp	r16, r1
    4124:	11 05       	cpc	r17, r1
    4126:	c9 f0       	breq	.+50     	; 0x415a <__stack+0x5b>
    4128:	11 87       	std	Z+9, r17	; 0x09
    412a:	00 87       	std	Z+8, r16	; 0x08
    412c:	83 81       	ldd	r24, Z+3	; 0x03
    412e:	82 60       	ori	r24, 0x02	; 2
    4130:	83 83       	std	Z+3, r24	; 0x03
    4132:	80 91 32 04 	lds	r24, 0x0432
    4136:	90 91 33 04 	lds	r25, 0x0433
    413a:	89 2b       	or	r24, r25
    413c:	71 f4       	brne	.+28     	; 0x415a <__stack+0x5b>
    413e:	f0 93 33 04 	sts	0x0433, r31
    4142:	e0 93 32 04 	sts	0x0432, r30
    4146:	80 91 34 04 	lds	r24, 0x0434
    414a:	90 91 35 04 	lds	r25, 0x0435
    414e:	89 2b       	or	r24, r25
    4150:	21 f4       	brne	.+8      	; 0x415a <__stack+0x5b>
    4152:	f0 93 35 04 	sts	0x0435, r31
    4156:	e0 93 34 04 	sts	0x0434, r30
    415a:	c9 01       	movw	r24, r18
    415c:	df 91       	pop	r29
    415e:	cf 91       	pop	r28
    4160:	1f 91       	pop	r17
    4162:	0f 91       	pop	r16
    4164:	08 95       	ret

00004166 <calloc>:
    4166:	0f 93       	push	r16
    4168:	1f 93       	push	r17
    416a:	cf 93       	push	r28
    416c:	df 93       	push	r29
    416e:	68 9f       	mul	r22, r24
    4170:	80 01       	movw	r16, r0
    4172:	69 9f       	mul	r22, r25
    4174:	10 0d       	add	r17, r0
    4176:	78 9f       	mul	r23, r24
    4178:	10 0d       	add	r17, r0
    417a:	11 24       	eor	r1, r1
    417c:	c8 01       	movw	r24, r16
    417e:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <malloc>
    4182:	ec 01       	movw	r28, r24
    4184:	00 97       	sbiw	r24, 0x00	; 0
    4186:	29 f0       	breq	.+10     	; 0x4192 <calloc+0x2c>
    4188:	60 e0       	ldi	r22, 0x00	; 0
    418a:	70 e0       	ldi	r23, 0x00	; 0
    418c:	a8 01       	movw	r20, r16
    418e:	0e 94 cf 20 	call	0x419e	; 0x419e <memset>
    4192:	ce 01       	movw	r24, r28
    4194:	df 91       	pop	r29
    4196:	cf 91       	pop	r28
    4198:	1f 91       	pop	r17
    419a:	0f 91       	pop	r16
    419c:	08 95       	ret

0000419e <memset>:
    419e:	dc 01       	movw	r26, r24
    41a0:	01 c0       	rjmp	.+2      	; 0x41a4 <memset+0x6>
    41a2:	6d 93       	st	X+, r22
    41a4:	41 50       	subi	r20, 0x01	; 1
    41a6:	50 40       	sbci	r21, 0x00	; 0
    41a8:	e0 f7       	brcc	.-8      	; 0x41a2 <memset+0x4>
    41aa:	08 95       	ret

000041ac <_exit>:
    41ac:	f8 94       	cli

000041ae <__stop_program>:
    41ae:	ff cf       	rjmp	.-2      	; 0x41ae <__stop_program>
