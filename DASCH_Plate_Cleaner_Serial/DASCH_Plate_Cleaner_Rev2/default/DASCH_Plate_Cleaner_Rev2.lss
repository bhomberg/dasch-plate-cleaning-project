
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002f2  00800100  000043ac  00004440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000043ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  008003f2  008003f2  00004732  2**0
                  ALLOC
  3 .stab         00005274  00000000  00000000  00004734  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000544b  00000000  00000000  000099a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000edf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000040f  00000000  00000000  0000ee33  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000012a4  00000000  00000000  0000f242  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002fb  00000000  00000000  000104e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000019a6  00000000  00000000  000107e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00012188  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b4f  00000000  00000000  00012308  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001318  00000000  00000000  00012e57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__vector_11>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      50:	0c 94 28 19 	jmp	0x3250	; 0x3250 <__vector_20>
      54:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <__vector_21>
      58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      70:	0c 94 64 19 	jmp	0x32c8	; 0x32c8 <__vector_28>
      74:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <__vector_29>
      78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      8c:	cc 0a       	sbc	r12, r28
      8e:	e5 0a       	sbc	r14, r21
      90:	02 0b       	sbc	r16, r18
      92:	1d 0b       	sbc	r17, r29
      94:	3c 0b       	sbc	r19, r28
      96:	58 0b       	sbc	r21, r24
      98:	76 0b       	sbc	r23, r22
      9a:	97 0b       	sbc	r25, r23
      9c:	b9 0b       	sbc	r27, r25
      9e:	c3 0b       	sbc	r28, r19
      a0:	c7 0b       	sbc	r28, r23
      a2:	d3 0b       	sbc	r29, r19
      a4:	d7 0b       	sbc	r29, r23
      a6:	e1 0b       	sbc	r30, r17
      a8:	e5 0b       	sbc	r30, r21
      aa:	f0 0b       	sbc	r31, r16
      ac:	f4 0b       	sbc	r31, r20
      ae:	ff 0b       	sbc	r31, r31
      b0:	03 0c       	add	r0, r3
      b2:	0e 0c       	add	r0, r14
      b4:	12 0c       	add	r1, r2
      b6:	1d 0c       	add	r1, r13
      b8:	21 0c       	add	r2, r1
      ba:	30 0c       	add	r3, r0
      bc:	36 0c       	add	r3, r6
      be:	45 0c       	add	r4, r5
      c0:	49 0c       	add	r4, r9
      c2:	54 0c       	add	r5, r4
      c4:	58 0c       	add	r5, r8
      c6:	63 0c       	add	r6, r3
      c8:	67 0c       	add	r6, r7
      ca:	73 0c       	add	r7, r3
      cc:	79 0c       	add	r7, r9
      ce:	89 0c       	add	r8, r9
      d0:	93 0c       	add	r9, r3
      d2:	a9 0c       	add	r10, r9
      d4:	b3 0c       	add	r11, r3
      d6:	c9 0c       	add	r12, r9
      d8:	d3 0c       	add	r13, r3
      da:	e9 0c       	add	r14, r9
      dc:	f3 0c       	add	r15, r3
      de:	09 0d       	add	r16, r9
      e0:	13 0d       	add	r17, r3
      e2:	20 0d       	add	r18, r0

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d0 e4       	ldi	r29, 0x40	; 64
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	13 e0       	ldi	r17, 0x03	; 3
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b1 e0       	ldi	r27, 0x01	; 1
      f6:	ec ea       	ldi	r30, 0xAC	; 172
      f8:	f3 e4       	ldi	r31, 0x43	; 67
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a2 3f       	cpi	r26, 0xF2	; 242
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	14 e0       	ldi	r17, 0x04	; 4
     10c:	a2 ef       	ldi	r26, 0xF2	; 242
     10e:	b3 e0       	ldi	r27, 0x03	; 3
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	aa 33       	cpi	r26, 0x3A	; 58
     116:	b1 07       	cpc	r27, r17
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <main>
     11e:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <_exit>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     126:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     12a:	8c e0       	ldi	r24, 0x0C	; 12
     12c:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
     130:	08 95       	ret

00000132 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
     132:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     134:	84 ea       	ldi	r24, 0xA4	; 164
     136:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     13a:	80 91 bc 00 	lds	r24, 0x00BC
     13e:	87 ff       	sbrs	r24, 7
     140:	fc cf       	rjmp	.-8      	; 0x13a <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     142:	80 91 b9 00 	lds	r24, 0x00B9
     146:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     148:	88 30       	cpi	r24, 0x08	; 8
     14a:	21 f0       	breq	.+8      	; 0x154 <i2c_start+0x22>
     14c:	80 31       	cpi	r24, 0x10	; 16
     14e:	11 f0       	breq	.+4      	; 0x154 <i2c_start+0x22>
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	08 95       	ret

	// send device address
	TWDR = address;
     154:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     158:	84 e8       	ldi	r24, 0x84	; 132
     15a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     15e:	80 91 bc 00 	lds	r24, 0x00BC
     162:	87 ff       	sbrs	r24, 7
     164:	fc cf       	rjmp	.-8      	; 0x15e <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     166:	90 91 b9 00 	lds	r25, 0x00B9
     16a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     16c:	98 31       	cpi	r25, 0x18	; 24
     16e:	11 f4       	brne	.+4      	; 0x174 <i2c_start+0x42>
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	08 95       	ret
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 34       	cpi	r25, 0x40	; 64
     178:	09 f0       	breq	.+2      	; 0x17c <i2c_start+0x4a>
     17a:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
     17c:	08 95       	ret

0000017e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     17e:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     180:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     182:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     184:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     186:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     18a:	80 91 bc 00 	lds	r24, 0x00BC
     18e:	87 ff       	sbrs	r24, 7
     190:	fc cf       	rjmp	.-8      	; 0x18a <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     192:	80 91 b9 00 	lds	r24, 0x00B9
     196:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     198:	88 30       	cpi	r24, 0x08	; 8
     19a:	11 f0       	breq	.+4      	; 0x1a0 <i2c_start_wait+0x22>
     19c:	80 31       	cpi	r24, 0x10	; 16
     19e:	99 f7       	brne	.-26     	; 0x186 <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
     1a0:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
     1a4:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     1a8:	80 91 bc 00 	lds	r24, 0x00BC
     1ac:	87 ff       	sbrs	r24, 7
     1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     1b0:	80 91 b9 00 	lds	r24, 0x00B9
     1b4:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     1b6:	80 32       	cpi	r24, 0x20	; 32
     1b8:	11 f0       	breq	.+4      	; 0x1be <i2c_start_wait+0x40>
     1ba:	88 35       	cpi	r24, 0x58	; 88
     1bc:	39 f4       	brne	.+14     	; 0x1cc <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1be:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     1c2:	80 91 bc 00 	lds	r24, 0x00BC
     1c6:	84 fd       	sbrc	r24, 4
     1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <i2c_start_wait+0x44>
     1ca:	dd cf       	rjmp	.-70     	; 0x186 <i2c_start_wait+0x8>
     1cc:	08 95       	ret

000001ce <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     1ce:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>

}/* i2c_rep_start */
     1d2:	08 95       	ret

000001d4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1d4:	84 e9       	ldi	r24, 0x94	; 148
     1d6:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     1da:	80 91 bc 00 	lds	r24, 0x00BC
     1de:	84 fd       	sbrc	r24, 4
     1e0:	fc cf       	rjmp	.-8      	; 0x1da <i2c_stop+0x6>

}/* i2c_stop */
     1e2:	08 95       	ret

000001e4 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     1e4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     1e8:	84 e8       	ldi	r24, 0x84	; 132
     1ea:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     1ee:	80 91 bc 00 	lds	r24, 0x00BC
     1f2:	87 ff       	sbrs	r24, 7
     1f4:	fc cf       	rjmp	.-8      	; 0x1ee <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     1f6:	80 91 b9 00 	lds	r24, 0x00B9
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	88 7f       	andi	r24, 0xF8	; 248
     1fe:	88 32       	cpi	r24, 0x28	; 40
     200:	09 f0       	breq	.+2      	; 0x204 <i2c_write+0x20>
     202:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     204:	89 2f       	mov	r24, r25
     206:	08 95       	ret

00000208 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     208:	84 ec       	ldi	r24, 0xC4	; 196
     20a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     20e:	80 91 bc 00 	lds	r24, 0x00BC
     212:	87 ff       	sbrs	r24, 7
     214:	fc cf       	rjmp	.-8      	; 0x20e <i2c_readAck+0x6>

    return TWDR;
     216:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
     21a:	08 95       	ret

0000021c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     21c:	84 e8       	ldi	r24, 0x84	; 132
     21e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     222:	80 91 bc 00 	lds	r24, 0x00BC
     226:	87 ff       	sbrs	r24, 7
     228:	fc cf       	rjmp	.-8      	; 0x222 <i2c_readNak+0x6>
	
    return TWDR;
     22a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     22e:	08 95       	ret

00000230 <is_digital_input_high>:

// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
// the pin.
static inline unsigned char is_digital_input_high(unsigned char pin)
{
     230:	48 2f       	mov	r20, r24
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     232:	88 30       	cpi	r24, 0x08	; 8
     234:	58 f4       	brcc	.+22     	; 0x24c <is_digital_input_high+0x1c>
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	02 c0       	rjmp	.+4      	; 0x240 <is_digital_input_high+0x10>
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	4a 95       	dec	r20
     242:	e2 f7       	brpl	.-8      	; 0x23c <is_digital_input_high+0xc>
     244:	98 2f       	mov	r25, r24
     246:	e9 e2       	ldi	r30, 0x29	; 41
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	36 c0       	rjmp	.+108    	; 0x2b8 <is_digital_input_high+0x88>
	}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     24c:	80 31       	cpi	r24, 0x10	; 16
     24e:	78 f4       	brcc	.+30     	; 0x26e <is_digital_input_high+0x3e>
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	28 50       	subi	r18, 0x08	; 8
     256:	30 40       	sbci	r19, 0x00	; 0
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	02 c0       	rjmp	.+4      	; 0x262 <is_digital_input_high+0x32>
     25e:	88 0f       	add	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	2a 95       	dec	r18
     264:	e2 f7       	brpl	.-8      	; 0x25e <is_digital_input_high+0x2e>
     266:	98 2f       	mov	r25, r24
     268:	e3 e2       	ldi	r30, 0x23	; 35
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	25 c0       	rjmp	.+74     	; 0x2b8 <is_digital_input_high+0x88>
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     26e:	88 31       	cpi	r24, 0x18	; 24
     270:	78 f4       	brcc	.+30     	; 0x290 <is_digital_input_high+0x60>
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
     272:	28 2f       	mov	r18, r24
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	20 51       	subi	r18, 0x10	; 16
     278:	30 40       	sbci	r19, 0x00	; 0
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	02 c0       	rjmp	.+4      	; 0x284 <is_digital_input_high+0x54>
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	2a 95       	dec	r18
     286:	e2 f7       	brpl	.-8      	; 0x280 <is_digital_input_high+0x50>
     288:	98 2f       	mov	r25, r24
     28a:	e6 e2       	ldi	r30, 0x26	; 38
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	14 c0       	rjmp	.+40     	; 0x2b8 <is_digital_input_high+0x88>
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     290:	80 32       	cpi	r24, 0x20	; 32
     292:	20 f0       	brcs	.+8      	; 0x29c <is_digital_input_high+0x6c>
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	e0 e0       	ldi	r30, 0x00	; 0
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	0e c0       	rjmp	.+28     	; 0x2b8 <is_digital_input_high+0x88>
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
		io->bitmask = 1 << (31 - pin);
     29c:	2f e1       	ldi	r18, 0x1F	; 31
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	28 1b       	sub	r18, r24
     2a2:	31 09       	sbc	r19, r1
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <is_digital_input_high+0x7e>
     2aa:	88 0f       	add	r24, r24
     2ac:	99 1f       	adc	r25, r25
     2ae:	2a 95       	dec	r18
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <is_digital_input_high+0x7a>
     2b2:	98 2f       	mov	r25, r24
     2b4:	e0 e2       	ldi	r30, 0x20	; 32
     2b6:	f0 e0       	ldi	r31, 0x00	; 0

// low-level method for reading the value of the PIN register for an pin or set of pins
// described by an IOStruct pointer.
static inline unsigned char get_digital_input_value(struct IOStruct* ioPin)
{
	return *(ioPin->pinRegister) & ioPin->bitmask;
     2b8:	80 81       	ld	r24, Z
static inline unsigned char is_digital_input_high(unsigned char pin)
{
	struct IOStruct registers;
	get_io_registers(&registers, pin);
	return get_digital_input_value(&registers);
}
     2ba:	89 23       	and	r24, r25
     2bc:	08 95       	ret

000002be <brush1_action>:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
	}
}

void brush1_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	f9 01       	movw	r30, r18
     2c4:	d8 01       	movw	r26, r16
	switch(state){
     2c6:	8b 30       	cpi	r24, 0x0B	; 11
     2c8:	91 05       	cpc	r25, r1
     2ca:	51 f1       	breq	.+84     	; 0x320 <brush1_action+0x62>
     2cc:	8c 30       	cpi	r24, 0x0C	; 12
     2ce:	91 05       	cpc	r25, r1
     2d0:	5c f4       	brge	.+22     	; 0x2e8 <brush1_action+0x2a>
     2d2:	89 30       	cpi	r24, 0x09	; 9
     2d4:	91 05       	cpc	r25, r1
     2d6:	a9 f0       	breq	.+42     	; 0x302 <brush1_action+0x44>
     2d8:	8a 30       	cpi	r24, 0x0A	; 10
     2da:	91 05       	cpc	r25, r1
     2dc:	0c f0       	brlt	.+2      	; 0x2e0 <brush1_action+0x22>
     2de:	43 c0       	rjmp	.+134    	; 0x366 <brush1_action+0xa8>
     2e0:	08 97       	sbiw	r24, 0x08	; 8
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <brush1_action+0x28>
     2e4:	56 c0       	rjmp	.+172    	; 0x392 <brush1_action+0xd4>
     2e6:	30 c0       	rjmp	.+96     	; 0x348 <brush1_action+0x8a>
     2e8:	8d 30       	cpi	r24, 0x0D	; 13
     2ea:	91 05       	cpc	r25, r1
     2ec:	69 f1       	breq	.+90     	; 0x348 <brush1_action+0x8a>
     2ee:	8d 30       	cpi	r24, 0x0D	; 13
     2f0:	91 05       	cpc	r25, r1
     2f2:	0c f1       	brlt	.+66     	; 0x336 <brush1_action+0x78>
     2f4:	8e 30       	cpi	r24, 0x0E	; 14
     2f6:	91 05       	cpc	r25, r1
     2f8:	79 f1       	breq	.+94     	; 0x358 <brush1_action+0x9a>
     2fa:	0f 97       	sbiw	r24, 0x0f	; 15
     2fc:	09 f0       	breq	.+2      	; 0x300 <brush1_action+0x42>
     2fe:	49 c0       	rjmp	.+146    	; 0x392 <brush1_action+0xd4>
     300:	3d c0       	rjmp	.+122    	; 0x37c <brush1_action+0xbe>
		case MOVEC1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B1SET:
			*pfixtureMotor = 0;
     302:	11 82       	std	Z+1, r1	; 0x01
     304:	10 82       	st	Z, r1
			*pbrush1Motor = 1;
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	8d 93       	st	X+, r24
     30c:	9c 93       	st	X, r25
			u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     30e:	80 91 2b 04 	lds	r24, 0x042B
     312:	81 60       	ori	r24, 0x01	; 1
     314:	80 93 2b 04 	sts	0x042B, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;  // ******* dir3 *******
     318:	80 91 2f 04 	lds	r24, 0x042F
     31c:	80 68       	ori	r24, 0x80	; 128
     31e:	37 c0       	rjmp	.+110    	; 0x38e <brush1_action+0xd0>
			*pbrush1Motor = 1;
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
			break;
		case CLEAN1_1:
			*pbrush1Motor = 1;
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	8d 93       	st	X+, r24
     326:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	80 83       	st	Z, r24
     32c:	80 91 2f 04 	lds	r24, 0x042F
     330:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     332:	8f 7e       	andi	r24, 0xEF	; 239
     334:	2c c0       	rjmp	.+88     	; 0x38e <brush1_action+0xd0>
			break;
		case B1STOP1:
			*pfixtureMotor = 0;
     336:	11 82       	std	Z+1, r1	; 0x01
     338:	10 82       	st	Z, r1
			*pbrush1Motor = 0;
     33a:	1d 92       	st	X+, r1
     33c:	1c 92       	st	X, r1
			u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     33e:	80 91 2e 04 	lds	r24, 0x042E
     342:	8f 7b       	andi	r24, 0xBF	; 191
			u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     344:	80 62       	ori	r24, 0x20	; 32
     346:	17 c0       	rjmp	.+46     	; 0x376 <brush1_action+0xb8>
			break;
		case CLEAN1_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     348:	80 91 2f 04 	lds	r24, 0x042F
     34c:	80 61       	ori	r24, 0x10	; 16
     34e:	80 93 2f 04 	sts	0x042F, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	16 c0       	rjmp	.+44     	; 0x384 <brush1_action+0xc6>
			break;
		case B1START2:
			*pfixtureMotor = 0;
     358:	11 82       	std	Z+1, r1	; 0x01
     35a:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
     35c:	80 91 2f 04 	lds	r24, 0x042F
     360:	8f 77       	andi	r24, 0x7F	; 127
     362:	80 93 2f 04 	sts	0x042F, r24
			*pbrush1Motor = 1;
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	8d 93       	st	X+, r24
     36c:	9c 93       	st	X, r25
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     36e:	80 91 2e 04 	lds	r24, 0x042E
     372:	80 64       	ori	r24, 0x40	; 64
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     374:	8f 7d       	andi	r24, 0xDF	; 223
     376:	80 93 2e 04 	sts	0x042E, r24
     37a:	0b c0       	rjmp	.+22     	; 0x392 <brush1_action+0xd4>
			break;
		case CLEAN1_3:
			*pbrush1Motor = 1;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	8d 93       	st	X+, r24
     382:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     384:	91 83       	std	Z+1, r25	; 0x01
     386:	80 83       	st	Z, r24
     388:	80 91 2f 04 	lds	r24, 0x042F
     38c:	80 62       	ori	r24, 0x20	; 32
     38e:	80 93 2f 04 	sts	0x042F, r24
			break;
	}
}
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	08 95       	ret

00000398 <brush2_action>:

void brush2_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
     39c:	d9 01       	movw	r26, r18
     39e:	f7 01       	movw	r30, r14
	switch(state){
     3a0:	85 31       	cpi	r24, 0x15	; 21
     3a2:	91 05       	cpc	r25, r1
     3a4:	c9 f1       	breq	.+114    	; 0x418 <brush2_action+0x80>
     3a6:	86 31       	cpi	r24, 0x16	; 22
     3a8:	91 05       	cpc	r25, r1
     3aa:	94 f4       	brge	.+36     	; 0x3d0 <brush2_action+0x38>
     3ac:	82 31       	cpi	r24, 0x12	; 18
     3ae:	91 05       	cpc	r25, r1
     3b0:	49 f1       	breq	.+82     	; 0x404 <brush2_action+0x6c>
     3b2:	83 31       	cpi	r24, 0x13	; 19
     3b4:	91 05       	cpc	r25, r1
     3b6:	24 f4       	brge	.+8      	; 0x3c0 <brush2_action+0x28>
     3b8:	41 97       	sbiw	r24, 0x11	; 17
     3ba:	09 f0       	breq	.+2      	; 0x3be <brush2_action+0x26>
     3bc:	78 c0       	rjmp	.+240    	; 0x4ae <brush2_action+0x116>
     3be:	1e c0       	rjmp	.+60     	; 0x3fc <brush2_action+0x64>
     3c0:	83 31       	cpi	r24, 0x13	; 19
     3c2:	91 05       	cpc	r25, r1
     3c4:	09 f4       	brne	.+2      	; 0x3c8 <brush2_action+0x30>
     3c6:	42 c0       	rjmp	.+132    	; 0x44c <brush2_action+0xb4>
     3c8:	44 97       	sbiw	r24, 0x14	; 20
     3ca:	09 f0       	breq	.+2      	; 0x3ce <brush2_action+0x36>
     3cc:	70 c0       	rjmp	.+224    	; 0x4ae <brush2_action+0x116>
     3ce:	4d c0       	rjmp	.+154    	; 0x46a <brush2_action+0xd2>
     3d0:	88 31       	cpi	r24, 0x18	; 24
     3d2:	91 05       	cpc	r25, r1
     3d4:	09 f4       	brne	.+2      	; 0x3d8 <brush2_action+0x40>
     3d6:	49 c0       	rjmp	.+146    	; 0x46a <brush2_action+0xd2>
     3d8:	89 31       	cpi	r24, 0x19	; 25
     3da:	91 05       	cpc	r25, r1
     3dc:	3c f4       	brge	.+14     	; 0x3ec <brush2_action+0x54>
     3de:	86 31       	cpi	r24, 0x16	; 22
     3e0:	91 05       	cpc	r25, r1
     3e2:	39 f1       	breq	.+78     	; 0x432 <brush2_action+0x9a>
     3e4:	47 97       	sbiw	r24, 0x17	; 23
     3e6:	09 f0       	breq	.+2      	; 0x3ea <brush2_action+0x52>
     3e8:	62 c0       	rjmp	.+196    	; 0x4ae <brush2_action+0x116>
     3ea:	29 c0       	rjmp	.+82     	; 0x43e <brush2_action+0xa6>
     3ec:	89 31       	cpi	r24, 0x19	; 25
     3ee:	91 05       	cpc	r25, r1
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <brush2_action+0x5c>
     3f2:	40 c0       	rjmp	.+128    	; 0x474 <brush2_action+0xdc>
     3f4:	4a 97       	sbiw	r24, 0x1a	; 26
     3f6:	09 f0       	breq	.+2      	; 0x3fa <brush2_action+0x62>
     3f8:	5a c0       	rjmp	.+180    	; 0x4ae <brush2_action+0x116>
     3fa:	50 c0       	rjmp	.+160    	; 0x49c <brush2_action+0x104>
		case MOVEC2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     3fc:	80 91 2f 04 	lds	r24, 0x042F
     400:	8f 7e       	andi	r24, 0xEF	; 239
     402:	1a c0       	rjmp	.+52     	; 0x438 <brush2_action+0xa0>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2SET:
			*pfixtureMotor = 0;
     404:	1d 92       	st	X+, r1
     406:	1c 92       	st	X, r1
			*pbrush2Motor = 1;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	91 83       	std	Z+1, r25	; 0x01
     40e:	80 83       	st	Z, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     410:	80 91 2b 04 	lds	r24, 0x042B
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;  // ******* dir4 *******
     414:	8c 60       	ori	r24, 0x0C	; 12
     416:	3f c0       	rjmp	.+126    	; 0x496 <brush2_action+0xfe>
		case CLEAN2_1:
			*pbrush2Motor = 1;
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP1:
			*pfixtureMotor = 0;
     418:	1d 92       	st	X+, r1
     41a:	1c 92       	st	X, r1
			*pbrush2Motor = 0;
     41c:	11 82       	std	Z+1, r1	; 0x01
     41e:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     420:	80 91 2c 04 	lds	r24, 0x042C
     424:	8e 7f       	andi	r24, 0xFE	; 254
     426:	80 93 2c 04 	sts	0x042C, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     42a:	80 91 2e 04 	lds	r24, 0x042E
     42e:	80 68       	ori	r24, 0x80	; 128
     430:	19 c0       	rjmp	.+50     	; 0x464 <brush2_action+0xcc>
			break;
		case CLEAN2_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     432:	80 91 2f 04 	lds	r24, 0x042F
     436:	80 61       	ori	r24, 0x10	; 16
     438:	80 93 2f 04 	sts	0x042F, r24
     43c:	2f c0       	rjmp	.+94     	; 0x49c <brush2_action+0x104>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2START2:
			*pfixtureMotor = 0;
     43e:	1d 92       	st	X+, r1
     440:	1c 92       	st	X, r1
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     442:	80 91 2b 04 	lds	r24, 0x042B
     446:	8b 7f       	andi	r24, 0xFB	; 251
     448:	80 93 2b 04 	sts	0x042B, r24
			*pbrush2Motor = 1;
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	91 83       	std	Z+1, r25	; 0x01
     452:	80 83       	st	Z, r24
			u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     454:	80 91 2c 04 	lds	r24, 0x042C
     458:	81 60       	ori	r24, 0x01	; 1
     45a:	80 93 2c 04 	sts	0x042C, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     45e:	80 91 2e 04 	lds	r24, 0x042E
     462:	8f 77       	andi	r24, 0x7F	; 127
     464:	80 93 2e 04 	sts	0x042E, r24
     468:	22 c0       	rjmp	.+68     	; 0x4ae <brush2_action+0x116>
			break;
		case CLEAN2_3:
			*pbrush2Motor = 1;
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	91 83       	std	Z+1, r25	; 0x01
     470:	80 83       	st	Z, r24
     472:	16 c0       	rjmp	.+44     	; 0x4a0 <brush2_action+0x108>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP2:
			*pbrush2Motor = 0;
     474:	11 82       	std	Z+1, r1	; 0x01
     476:	10 82       	st	Z, r1
			*pfixtureMotor = 0;
     478:	1d 92       	st	X+, r1
     47a:	1c 92       	st	X, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     47c:	80 91 2c 04 	lds	r24, 0x042C
     480:	8e 7f       	andi	r24, 0xFE	; 254
     482:	80 93 2c 04 	sts	0x042C, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     486:	80 91 2e 04 	lds	r24, 0x042E
     48a:	80 68       	ori	r24, 0x80	; 128
     48c:	80 93 2e 04 	sts	0x042E, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     490:	80 91 2b 04 	lds	r24, 0x042B
     494:	87 7f       	andi	r24, 0xF7	; 247
     496:	80 93 2b 04 	sts	0x042B, r24
     49a:	09 c0       	rjmp	.+18     	; 0x4ae <brush2_action+0x116>
			break;
		//*************************************************
		case MOVED1:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	8d 93       	st	X+, r24
     4a2:	9c 93       	st	X, r25
     4a4:	80 91 2f 04 	lds	r24, 0x042F
     4a8:	80 62       	ori	r24, 0x20	; 32
     4aa:	80 93 2f 04 	sts	0x042F, r24
			break;
	}
}
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	08 95       	ret

000004b4 <dry_action>:

void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     4b4:	cf 92       	push	r12
     4b6:	df 92       	push	r13
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	ea 01       	movw	r28, r20
     4be:	f9 01       	movw	r30, r18
     4c0:	d6 01       	movw	r26, r12
	switch(state){
     4c2:	80 32       	cpi	r24, 0x20	; 32
     4c4:	91 05       	cpc	r25, r1
     4c6:	09 f4       	brne	.+2      	; 0x4ca <dry_action+0x16>
     4c8:	57 c0       	rjmp	.+174    	; 0x578 <dry_action+0xc4>
     4ca:	81 32       	cpi	r24, 0x21	; 33
     4cc:	91 05       	cpc	r25, r1
     4ce:	a4 f4       	brge	.+40     	; 0x4f8 <dry_action+0x44>
     4d0:	8d 31       	cpi	r24, 0x1D	; 29
     4d2:	91 05       	cpc	r25, r1
     4d4:	69 f1       	breq	.+90     	; 0x530 <dry_action+0x7c>
     4d6:	8e 31       	cpi	r24, 0x1E	; 30
     4d8:	91 05       	cpc	r25, r1
     4da:	3c f4       	brge	.+14     	; 0x4ea <dry_action+0x36>
     4dc:	8b 31       	cpi	r24, 0x1B	; 27
     4de:	91 05       	cpc	r25, r1
     4e0:	09 f1       	breq	.+66     	; 0x524 <dry_action+0x70>
     4e2:	4c 97       	sbiw	r24, 0x1c	; 28
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <dry_action+0x34>
     4e6:	90 c0       	rjmp	.+288    	; 0x608 <dry_action+0x154>
     4e8:	68 c0       	rjmp	.+208    	; 0x5ba <dry_action+0x106>
     4ea:	8e 31       	cpi	r24, 0x1E	; 30
     4ec:	91 05       	cpc	r25, r1
     4ee:	79 f1       	breq	.+94     	; 0x54e <dry_action+0x9a>
     4f0:	4f 97       	sbiw	r24, 0x1f	; 31
     4f2:	09 f0       	breq	.+2      	; 0x4f6 <dry_action+0x42>
     4f4:	89 c0       	rjmp	.+274    	; 0x608 <dry_action+0x154>
     4f6:	38 c0       	rjmp	.+112    	; 0x568 <dry_action+0xb4>
     4f8:	83 32       	cpi	r24, 0x23	; 35
     4fa:	91 05       	cpc	r25, r1
     4fc:	09 f4       	brne	.+2      	; 0x500 <dry_action+0x4c>
     4fe:	5d c0       	rjmp	.+186    	; 0x5ba <dry_action+0x106>
     500:	84 32       	cpi	r24, 0x24	; 36
     502:	91 05       	cpc	r25, r1
     504:	3c f4       	brge	.+14     	; 0x514 <dry_action+0x60>
     506:	81 32       	cpi	r24, 0x21	; 33
     508:	91 05       	cpc	r25, r1
     50a:	d9 f1       	breq	.+118    	; 0x582 <dry_action+0xce>
     50c:	82 97       	sbiw	r24, 0x22	; 34
     50e:	09 f0       	breq	.+2      	; 0x512 <dry_action+0x5e>
     510:	7b c0       	rjmp	.+246    	; 0x608 <dry_action+0x154>
     512:	4c c0       	rjmp	.+152    	; 0x5ac <dry_action+0xf8>
     514:	84 32       	cpi	r24, 0x24	; 36
     516:	91 05       	cpc	r25, r1
     518:	09 f4       	brne	.+2      	; 0x51c <dry_action+0x68>
     51a:	5e c0       	rjmp	.+188    	; 0x5d8 <dry_action+0x124>
     51c:	85 97       	sbiw	r24, 0x25	; 37
     51e:	09 f0       	breq	.+2      	; 0x522 <dry_action+0x6e>
     520:	73 c0       	rjmp	.+230    	; 0x608 <dry_action+0x154>
     522:	69 c0       	rjmp	.+210    	; 0x5f6 <dry_action+0x142>
		case D1START:
			*pfixtureMotor = 0;
     524:	11 82       	std	Z+1, r1	; 0x01
     526:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.airKnife = 0;
     528:	80 91 2c 04 	lds	r24, 0x042C
     52c:	87 7f       	andi	r24, 0xF7	; 247
     52e:	0c c0       	rjmp	.+24     	; 0x548 <dry_action+0x94>
		case DRY1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case D1STOP:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	91 83       	std	Z+1, r25	; 0x01
     536:	80 83       	st	Z, r24
     538:	80 91 2f 04 	lds	r24, 0x042F
     53c:	80 62       	ori	r24, 0x20	; 32
     53e:	80 93 2f 04 	sts	0x042F, r24
			u_outputByte1.bits_in_outputByte1.airKnife = 1;
     542:	80 91 2c 04 	lds	r24, 0x042C
     546:	88 60       	ori	r24, 0x08	; 8
     548:	80 93 2c 04 	sts	0x042C, r24
     54c:	5d c0       	rjmp	.+186    	; 0x608 <dry_action+0x154>
			break;
		case D2START:
			*pfixtureMotor = 0;
     54e:	11 82       	std	Z+1, r1	; 0x01
     550:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
     552:	80 91 2b 04 	lds	r24, 0x042B
     556:	80 64       	ori	r24, 0x40	; 64
			u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     558:	8f 7d       	andi	r24, 0xDF	; 223
     55a:	80 93 2b 04 	sts	0x042B, r24
			*ppaperTowelMotor = 1;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	8d 93       	st	X+, r24
     564:	9c 93       	st	X, r25
     566:	50 c0       	rjmp	.+160    	; 0x608 <dry_action+0x154>
			break;
		case D2RAISE:
			*ppaperTowelMotor = 1;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	8d 93       	st	X+, r24
     56e:	9c 93       	st	X, r25
			u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     570:	80 91 2c 04 	lds	r24, 0x042C
     574:	8d 7f       	andi	r24, 0xFD	; 253
     576:	e8 cf       	rjmp	.-48     	; 0x548 <dry_action+0x94>
			break;
		case DRY2:
			*ppaperTowelMotor = 1;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	8d 93       	st	X+, r24
     57e:	9c 93       	st	X, r25
     580:	23 c0       	rjmp	.+70     	; 0x5c8 <dry_action+0x114>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case D2STOP:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	80 91 2f 04 	lds	r24, 0x042F
     58e:	80 62       	ori	r24, 0x20	; 32
     590:	80 93 2f 04 	sts	0x042F, r24
			*ppaperTowelMotor = 0;
     594:	1d 92       	st	X+, r1
     596:	1c 92       	st	X, r1
				u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
     598:	80 91 2b 04 	lds	r24, 0x042B
     59c:	8f 7b       	andi	r24, 0xBF	; 191
     59e:	80 93 2b 04 	sts	0x042B, r24
			u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     5a2:	80 91 2c 04 	lds	r24, 0x042C
     5a6:	82 60       	ori	r24, 0x02	; 2
			u_outputByte1.bits_in_outputByte1.ptLower = 0;
     5a8:	8b 7f       	andi	r24, 0xFB	; 251
     5aa:	ce cf       	rjmp	.-100    	; 0x548 <dry_action+0x94>
			break;
		case RAISEL2:
			*pfixtureMotor = 0;
     5ac:	11 82       	std	Z+1, r1	; 0x01
     5ae:	10 82       	st	Z, r1
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     5b0:	80 91 2e 04 	lds	r24, 0x042E
     5b4:	87 7f       	andi	r24, 0xF7	; 247
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     5b6:	80 61       	ori	r24, 0x10	; 16
     5b8:	1b c0       	rjmp	.+54     	; 0x5f0 <dry_action+0x13c>
			break;
		case FIXH:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     5ba:	80 91 2f 04 	lds	r24, 0x042F
     5be:	8f 7e       	andi	r24, 0xEF	; 239
     5c0:	80 93 2f 04 	sts	0x042F, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	91 83       	std	Z+1, r25	; 0x01
     5ca:	80 83       	st	Z, r24
     5cc:	80 91 2f 04 	lds	r24, 0x042F
     5d0:	80 62       	ori	r24, 0x20	; 32
     5d2:	80 93 2f 04 	sts	0x042F, r24
     5d6:	18 c0       	rjmp	.+48     	; 0x608 <dry_action+0x154>
			break;
		case LOWERL3:
			*pfixtureMotor = 0;
     5d8:	11 82       	std	Z+1, r1	; 0x01
     5da:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     5dc:	80 91 2f 04 	lds	r24, 0x042F
     5e0:	8f 7d       	andi	r24, 0xDF	; 223
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     5e2:	84 60       	ori	r24, 0x04	; 4
     5e4:	80 93 2f 04 	sts	0x042F, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     5e8:	80 91 2e 04 	lds	r24, 0x042E
     5ec:	88 60       	ori	r24, 0x08	; 8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     5ee:	8f 7e       	andi	r24, 0xEF	; 239
     5f0:	80 93 2e 04 	sts	0x042E, r24
     5f4:	09 c0       	rjmp	.+18     	; 0x608 <dry_action+0x154>
			break;
		case UNLOAD:
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     5f6:	80 91 2f 04 	lds	r24, 0x042F
     5fa:	8d 7f       	andi	r24, 0xFD	; 253
     5fc:	80 93 2f 04 	sts	0x042F, r24
			*pplateLoadMotor = 1;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	99 83       	std	Y+1, r25	; 0x01
     606:	88 83       	st	Y, r24
			break;
	}
}
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	df 90       	pop	r13
     60e:	cf 90       	pop	r12
     610:	08 95       	ret

00000612 <button_debounce>:

bool button_debounce(int counter, int *pstateButton)
{
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	8c 01       	movw	r16, r24
     61c:	eb 01       	movw	r28, r22
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && is_digital_input_high(IO_D0)){
     61e:	88 81       	ld	r24, Y
     620:	99 81       	ldd	r25, Y+1	; 0x01
     622:	89 2b       	or	r24, r25
     624:	69 f4       	brne	.+26     	; 0x640 <button_debounce+0x2e>
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     62c:	88 23       	and	r24, r24
     62e:	41 f0       	breq	.+16     	; 0x640 <button_debounce+0x2e>
		counterRefPush = counter;
     630:	10 93 f5 03 	sts	0x03F5, r17
     634:	00 93 f4 03 	sts	0x03F4, r16
		*pstateButton = PRESSED;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	99 83       	std	Y+1, r25	; 0x01
     63e:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     640:	88 81       	ld	r24, Y
     642:	99 81       	ldd	r25, Y+1	; 0x01
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	f9 f4       	brne	.+62     	; 0x686 <button_debounce+0x74>
		if(counter - counterRefPush > 15){
     648:	80 91 f4 03 	lds	r24, 0x03F4
     64c:	90 91 f5 03 	lds	r25, 0x03F5
     650:	98 01       	movw	r18, r16
     652:	28 1b       	sub	r18, r24
     654:	39 0b       	sbc	r19, r25
     656:	20 31       	cpi	r18, 0x10	; 16
     658:	31 05       	cpc	r19, r1
     65a:	74 f0       	brlt	.+28     	; 0x678 <button_debounce+0x66>
			if(!is_digital_input_high(IO_D0)){
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     662:	88 23       	and	r24, r24
     664:	81 f4       	brne	.+32     	; 0x686 <button_debounce+0x74>
				counterRefRel = counter;
     666:	10 93 f3 03 	sts	0x03F3, r17
     66a:	00 93 f2 03 	sts	0x03F2, r16
				*pstateButton = RELEASED;
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	99 83       	std	Y+1, r25	; 0x01
     674:	88 83       	st	Y, r24
     676:	07 c0       	rjmp	.+14     	; 0x686 <button_debounce+0x74>
			}
		}
		else if(!is_digital_input_high(IO_D0)){
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     67e:	88 23       	and	r24, r24
     680:	11 f4       	brne	.+4      	; 0x686 <button_debounce+0x74>
			*pstateButton = NONE;
     682:	19 82       	std	Y+1, r1	; 0x01
     684:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     686:	88 81       	ld	r24, Y
     688:	99 81       	ldd	r25, Y+1	; 0x01
     68a:	02 97       	sbiw	r24, 0x02	; 2
     68c:	d9 f4       	brne	.+54     	; 0x6c4 <button_debounce+0xb2>
		if(is_digital_input_high(IO_D0)){
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     694:	88 23       	and	r24, r24
     696:	49 f0       	breq	.+18     	; 0x6aa <button_debounce+0x98>
			*pstateButton = PRESSED;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	99 83       	std	Y+1, r25	; 0x01
     69e:	88 83       	st	Y, r24
			counterRefPush = counter;
     6a0:	10 93 f5 03 	sts	0x03F5, r17
     6a4:	00 93 f4 03 	sts	0x03F4, r16
     6a8:	0d c0       	rjmp	.+26     	; 0x6c4 <button_debounce+0xb2>
		}
		else if(counter - counterRefRel > 15){
     6aa:	80 91 f2 03 	lds	r24, 0x03F2
     6ae:	90 91 f3 03 	lds	r25, 0x03F3
     6b2:	08 1b       	sub	r16, r24
     6b4:	19 0b       	sbc	r17, r25
     6b6:	00 31       	cpi	r16, 0x10	; 16
     6b8:	11 05       	cpc	r17, r1
     6ba:	24 f0       	brlt	.+8      	; 0x6c4 <button_debounce+0xb2>
			*pstateButton = NONE;
     6bc:	19 82       	std	Y+1, r1	; 0x01
     6be:	18 82       	st	Y, r1
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <button_debounce+0xb4>
			return true;
     6c4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	08 95       	ret

000006d0 <init_trans>:

bool init_trans(int state, bool buttonTriggered, int counter, int counterRef){
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	fc 01       	movw	r30, r24
     6d6:	86 2f       	mov	r24, r22
     6d8:	da 01       	movw	r26, r20
     6da:	b9 01       	movw	r22, r18
	return((state == INIT && buttonTriggered)||
     6dc:	30 97       	sbiw	r30, 0x00	; 0
     6de:	19 f4       	brne	.+6      	; 0x6e6 <init_trans+0x16>
     6e0:	88 23       	and	r24, r24
     6e2:	81 f1       	breq	.+96     	; 0x744 <init_trans+0x74>
     6e4:	77 c0       	rjmp	.+238    	; 0x7d4 <init_trans+0x104>
     6e6:	e1 30       	cpi	r30, 0x01	; 1
     6e8:	f1 05       	cpc	r31, r1
     6ea:	29 f4       	brne	.+10     	; 0x6f6 <init_trans+0x26>
     6ec:	80 91 2a 04 	lds	r24, 0x042A
     6f0:	80 fd       	sbrc	r24, 0
     6f2:	30 c0       	rjmp	.+96     	; 0x754 <init_trans+0x84>
     6f4:	6f c0       	rjmp	.+222    	; 0x7d4 <init_trans+0x104>
     6f6:	e2 30       	cpi	r30, 0x02	; 2
     6f8:	f1 05       	cpc	r31, r1
     6fa:	b1 f4       	brne	.+44     	; 0x728 <init_trans+0x58>
     6fc:	42 1b       	sub	r20, r18
     6fe:	53 0b       	sbc	r21, r19
     700:	20 91 b0 03 	lds	r18, 0x03B0
     704:	30 91 b1 03 	lds	r19, 0x03B1
     708:	80 91 a0 03 	lds	r24, 0x03A0
     70c:	90 91 a1 03 	lds	r25, 0x03A1
     710:	ec 01       	movw	r28, r24
     712:	2c 9f       	mul	r18, r28
     714:	c0 01       	movw	r24, r0
     716:	2d 9f       	mul	r18, r29
     718:	90 0d       	add	r25, r0
     71a:	3c 9f       	mul	r19, r28
     71c:	90 0d       	add	r25, r0
     71e:	11 24       	eor	r1, r1
     720:	84 17       	cp	r24, r20
     722:	95 07       	cpc	r25, r21
     724:	ac f5       	brge	.+106    	; 0x790 <init_trans+0xc0>
     726:	56 c0       	rjmp	.+172    	; 0x7d4 <init_trans+0x104>
     728:	e3 30       	cpi	r30, 0x03	; 3
     72a:	f1 05       	cpc	r31, r1
     72c:	59 f4       	brne	.+22     	; 0x744 <init_trans+0x74>
     72e:	9a 01       	movw	r18, r20
     730:	26 1b       	sub	r18, r22
     732:	37 0b       	sbc	r19, r23
     734:	80 91 90 03 	lds	r24, 0x0390
     738:	90 91 91 03 	lds	r25, 0x0391
     73c:	82 17       	cp	r24, r18
     73e:	93 07       	cpc	r25, r19
     740:	ac f5       	brge	.+106    	; 0x7ac <init_trans+0xdc>
     742:	48 c0       	rjmp	.+144    	; 0x7d4 <init_trans+0x104>
     744:	e4 30       	cpi	r30, 0x04	; 4
     746:	f1 05       	cpc	r31, r1
     748:	29 f4       	brne	.+10     	; 0x754 <init_trans+0x84>
     74a:	80 91 2a 04 	lds	r24, 0x042A
     74e:	86 95       	lsr	r24
     750:	86 95       	lsr	r24
     752:	26 c0       	rjmp	.+76     	; 0x7a0 <init_trans+0xd0>
     754:	e5 30       	cpi	r30, 0x05	; 5
     756:	f1 05       	cpc	r31, r1
     758:	d9 f4       	brne	.+54     	; 0x790 <init_trans+0xc0>
     75a:	40 e0       	ldi	r20, 0x00	; 0
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	a6 1b       	sub	r26, r22
     760:	b7 0b       	sbc	r27, r23
     762:	80 91 b2 03 	lds	r24, 0x03B2
     766:	90 91 b3 03 	lds	r25, 0x03B3
     76a:	20 91 a2 03 	lds	r18, 0x03A2
     76e:	30 91 a3 03 	lds	r19, 0x03A3
     772:	bc 01       	movw	r22, r24
     774:	62 9f       	mul	r22, r18
     776:	c0 01       	movw	r24, r0
     778:	63 9f       	mul	r22, r19
     77a:	90 0d       	add	r25, r0
     77c:	72 9f       	mul	r23, r18
     77e:	90 0d       	add	r25, r0
     780:	11 24       	eor	r1, r1
     782:	8a 17       	cp	r24, r26
     784:	9b 07       	cpc	r25, r27
     786:	14 f4       	brge	.+4      	; 0x78c <init_trans+0xbc>
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	ca 01       	movw	r24, r20
     78e:	24 c0       	rjmp	.+72     	; 0x7d8 <init_trans+0x108>
     790:	e6 30       	cpi	r30, 0x06	; 6
     792:	f1 05       	cpc	r31, r1
     794:	59 f4       	brne	.+22     	; 0x7ac <init_trans+0xdc>
     796:	80 91 2a 04 	lds	r24, 0x042A
     79a:	86 95       	lsr	r24
     79c:	86 95       	lsr	r24
     79e:	86 95       	lsr	r24
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	89 27       	eor	r24, r25
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	81 70       	andi	r24, 0x01	; 1
     7a8:	90 70       	andi	r25, 0x00	; 0
     7aa:	16 c0       	rjmp	.+44     	; 0x7d8 <init_trans+0x108>
     7ac:	37 97       	sbiw	r30, 0x07	; 7
     7ae:	19 f0       	breq	.+6      	; 0x7b6 <init_trans+0xe6>
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	11 c0       	rjmp	.+34     	; 0x7d8 <init_trans+0x108>
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	a6 1b       	sub	r26, r22
     7bc:	b7 0b       	sbc	r27, r23
     7be:	80 91 90 03 	lds	r24, 0x0390
     7c2:	90 91 91 03 	lds	r25, 0x0391
     7c6:	8a 17       	cp	r24, r26
     7c8:	9b 07       	cpc	r25, r27
     7ca:	14 f4       	brge	.+4      	; 0x7d0 <init_trans+0x100>
     7cc:	21 e0       	ldi	r18, 0x01	; 1
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	c9 01       	movw	r24, r18
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <init_trans+0x108>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
	(state == RAISEL1 && counter - counterRef > pWait)||
	(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == FIXLEXTRA && counter - counterRef > totalStepLength2*fixtureLiftExtra)||
	(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0)||
	(state == LOWERL2 && counter - counterRef > pWait));
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <firstB_trans>:

bool firstB_trans(int state, int counter, int counterRef){
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	fc 01       	movw	r30, r24
     7e4:	da 01       	movw	r26, r20
	//Had references to counterRef14...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVEC1 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush1Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0)||
     7e6:	88 30       	cpi	r24, 0x08	; 8
     7e8:	91 05       	cpc	r25, r1
     7ea:	29 f4       	brne	.+10     	; 0x7f6 <firstB_trans+0x18>
     7ec:	80 91 2a 04 	lds	r24, 0x042A
     7f0:	84 fd       	sbrc	r24, 4
     7f2:	37 c0       	rjmp	.+110    	; 0x862 <firstB_trans+0x84>
     7f4:	78 c0       	rjmp	.+240    	; 0x8e6 <firstB_trans+0x108>
     7f6:	89 30       	cpi	r24, 0x09	; 9
     7f8:	91 05       	cpc	r25, r1
     7fa:	59 f4       	brne	.+22     	; 0x812 <firstB_trans+0x34>
     7fc:	9b 01       	movw	r18, r22
     7fe:	24 1b       	sub	r18, r20
     800:	35 0b       	sbc	r19, r21
     802:	80 91 92 03 	lds	r24, 0x0392
     806:	90 91 93 03 	lds	r25, 0x0393
     80a:	82 17       	cp	r24, r18
     80c:	93 07       	cpc	r25, r19
     80e:	64 f5       	brge	.+88     	; 0x868 <firstB_trans+0x8a>
     810:	6a c0       	rjmp	.+212    	; 0x8e6 <firstB_trans+0x108>
     812:	8a 30       	cpi	r24, 0x0A	; 10
     814:	91 05       	cpc	r25, r1
     816:	59 f4       	brne	.+22     	; 0x82e <firstB_trans+0x50>
     818:	9b 01       	movw	r18, r22
     81a:	24 1b       	sub	r18, r20
     81c:	35 0b       	sbc	r19, r21
     81e:	80 91 90 03 	lds	r24, 0x0390
     822:	90 91 91 03 	lds	r25, 0x0391
     826:	82 17       	cp	r24, r18
     828:	93 07       	cpc	r25, r19
     82a:	5c f5       	brge	.+86     	; 0x882 <firstB_trans+0xa4>
     82c:	5c c0       	rjmp	.+184    	; 0x8e6 <firstB_trans+0x108>
     82e:	8b 30       	cpi	r24, 0x0B	; 11
     830:	91 05       	cpc	r25, r1
     832:	b9 f4       	brne	.+46     	; 0x862 <firstB_trans+0x84>
     834:	ab 01       	movw	r20, r22
     836:	4a 1b       	sub	r20, r26
     838:	5b 0b       	sbc	r21, r27
     83a:	20 91 aa 03 	lds	r18, 0x03AA
     83e:	30 91 ab 03 	lds	r19, 0x03AB
     842:	80 91 a2 03 	lds	r24, 0x03A2
     846:	90 91 a3 03 	lds	r25, 0x03A3
     84a:	ec 01       	movw	r28, r24
     84c:	2c 9f       	mul	r18, r28
     84e:	c0 01       	movw	r24, r0
     850:	2d 9f       	mul	r18, r29
     852:	90 0d       	add	r25, r0
     854:	3c 9f       	mul	r19, r28
     856:	90 0d       	add	r25, r0
     858:	11 24       	eor	r1, r1
     85a:	84 17       	cp	r24, r20
     85c:	95 07       	cpc	r25, r21
     85e:	1c f5       	brge	.+70     	; 0x8a6 <firstB_trans+0xc8>
     860:	42 c0       	rjmp	.+132    	; 0x8e6 <firstB_trans+0x108>
     862:	ec 30       	cpi	r30, 0x0C	; 12
     864:	f1 05       	cpc	r31, r1
     866:	81 f0       	breq	.+32     	; 0x888 <firstB_trans+0xaa>
     868:	ed 30       	cpi	r30, 0x0D	; 13
     86a:	f1 05       	cpc	r31, r1
     86c:	51 f4       	brne	.+20     	; 0x882 <firstB_trans+0xa4>
     86e:	80 91 2a 04 	lds	r24, 0x042A
     872:	82 95       	swap	r24
     874:	8f 70       	andi	r24, 0x0F	; 15
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	89 27       	eor	r24, r25
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	81 70       	andi	r24, 0x01	; 1
     87e:	90 70       	andi	r25, 0x00	; 0
     880:	34 c0       	rjmp	.+104    	; 0x8ea <firstB_trans+0x10c>
     882:	ee 30       	cpi	r30, 0x0E	; 14
     884:	f1 05       	cpc	r31, r1
     886:	79 f4       	brne	.+30     	; 0x8a6 <firstB_trans+0xc8>
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	6a 1b       	sub	r22, r26
     88e:	7b 0b       	sbc	r23, r27
     890:	80 91 90 03 	lds	r24, 0x0390
     894:	90 91 91 03 	lds	r25, 0x0391
     898:	86 17       	cp	r24, r22
     89a:	97 07       	cpc	r25, r23
     89c:	14 f4       	brge	.+4      	; 0x8a2 <firstB_trans+0xc4>
     89e:	21 e0       	ldi	r18, 0x01	; 1
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	c9 01       	movw	r24, r18
     8a4:	22 c0       	rjmp	.+68     	; 0x8ea <firstB_trans+0x10c>
     8a6:	3f 97       	sbiw	r30, 0x0f	; 15
     8a8:	19 f0       	breq	.+6      	; 0x8b0 <firstB_trans+0xd2>
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	1d c0       	rjmp	.+58     	; 0x8ea <firstB_trans+0x10c>
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	6a 1b       	sub	r22, r26
     8b6:	7b 0b       	sbc	r23, r27
     8b8:	80 91 aa 03 	lds	r24, 0x03AA
     8bc:	90 91 ab 03 	lds	r25, 0x03AB
     8c0:	20 91 a2 03 	lds	r18, 0x03A2
     8c4:	30 91 a3 03 	lds	r19, 0x03A3
     8c8:	fc 01       	movw	r30, r24
     8ca:	e2 9f       	mul	r30, r18
     8cc:	c0 01       	movw	r24, r0
     8ce:	e3 9f       	mul	r30, r19
     8d0:	90 0d       	add	r25, r0
     8d2:	f2 9f       	mul	r31, r18
     8d4:	90 0d       	add	r25, r0
     8d6:	11 24       	eor	r1, r1
     8d8:	86 17       	cp	r24, r22
     8da:	97 07       	cpc	r25, r23
     8dc:	14 f4       	brge	.+4      	; 0x8e2 <firstB_trans+0x104>
     8de:	41 e0       	ldi	r20, 0x01	; 1
     8e0:	50 e0       	ldi	r21, 0x00	; 0
     8e2:	ca 01       	movw	r24, r20
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <firstB_trans+0x10c>
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	90 e0       	ldi	r25, 0x00	; 0
	(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||
	(state == B1STOP1 && counter - counterRef > pWait)||
	(state == CLEAN1_2 && /*counter - counterRef > totalStepLength2*fixtureMotorHalfPlate &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0)||
	(state == B1START2 && counter - counterRef > pWait)||
	(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate));
}
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <secondB_trans>:

bool secondB_trans(int state, int counter, int counterRef){
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	fc 01       	movw	r30, r24
     8f6:	da 01       	movw	r26, r20
	return((state == MOVEC2 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush2Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0)||
     8f8:	81 31       	cpi	r24, 0x11	; 17
     8fa:	91 05       	cpc	r25, r1
     8fc:	29 f4       	brne	.+10     	; 0x908 <secondB_trans+0x18>
     8fe:	80 91 2a 04 	lds	r24, 0x042A
     902:	85 fd       	sbrc	r24, 5
     904:	38 c0       	rjmp	.+112    	; 0x976 <secondB_trans+0x86>
     906:	ac c0       	rjmp	.+344    	; 0xa60 <secondB_trans+0x170>
     908:	82 31       	cpi	r24, 0x12	; 18
     90a:	91 05       	cpc	r25, r1
     90c:	59 f4       	brne	.+22     	; 0x924 <secondB_trans+0x34>
     90e:	9b 01       	movw	r18, r22
     910:	24 1b       	sub	r18, r20
     912:	35 0b       	sbc	r19, r21
     914:	80 91 92 03 	lds	r24, 0x0392
     918:	90 91 93 03 	lds	r25, 0x0393
     91c:	82 17       	cp	r24, r18
     91e:	93 07       	cpc	r25, r19
     920:	c4 f5       	brge	.+112    	; 0x992 <secondB_trans+0xa2>
     922:	9e c0       	rjmp	.+316    	; 0xa60 <secondB_trans+0x170>
     924:	83 31       	cpi	r24, 0x13	; 19
     926:	91 05       	cpc	r25, r1
     928:	61 f4       	brne	.+24     	; 0x942 <secondB_trans+0x52>
     92a:	9b 01       	movw	r18, r22
     92c:	24 1b       	sub	r18, r20
     92e:	35 0b       	sbc	r19, r21
     930:	80 91 90 03 	lds	r24, 0x0390
     934:	90 91 91 03 	lds	r25, 0x0391
     938:	82 17       	cp	r24, r18
     93a:	93 07       	cpc	r25, r19
     93c:	0c f0       	brlt	.+2      	; 0x940 <secondB_trans+0x50>
     93e:	43 c0       	rjmp	.+134    	; 0x9c6 <secondB_trans+0xd6>
     940:	8f c0       	rjmp	.+286    	; 0xa60 <secondB_trans+0x170>
     942:	84 31       	cpi	r24, 0x14	; 20
     944:	91 05       	cpc	r25, r1
     946:	b9 f4       	brne	.+46     	; 0x976 <secondB_trans+0x86>
     948:	ab 01       	movw	r20, r22
     94a:	4a 1b       	sub	r20, r26
     94c:	5b 0b       	sbc	r21, r27
     94e:	20 91 aa 03 	lds	r18, 0x03AA
     952:	30 91 ab 03 	lds	r19, 0x03AB
     956:	80 91 a2 03 	lds	r24, 0x03A2
     95a:	90 91 a3 03 	lds	r25, 0x03A3
     95e:	ec 01       	movw	r28, r24
     960:	2c 9f       	mul	r18, r28
     962:	c0 01       	movw	r24, r0
     964:	2d 9f       	mul	r18, r29
     966:	90 0d       	add	r25, r0
     968:	3c 9f       	mul	r19, r28
     96a:	90 0d       	add	r25, r0
     96c:	11 24       	eor	r1, r1
     96e:	84 17       	cp	r24, r20
     970:	95 07       	cpc	r25, r21
     972:	64 f5       	brge	.+88     	; 0x9cc <secondB_trans+0xdc>
     974:	75 c0       	rjmp	.+234    	; 0xa60 <secondB_trans+0x170>
     976:	e5 31       	cpi	r30, 0x15	; 21
     978:	f1 05       	cpc	r31, r1
     97a:	59 f4       	brne	.+22     	; 0x992 <secondB_trans+0xa2>
     97c:	9b 01       	movw	r18, r22
     97e:	2a 1b       	sub	r18, r26
     980:	3b 0b       	sbc	r19, r27
     982:	80 91 90 03 	lds	r24, 0x0390
     986:	90 91 91 03 	lds	r25, 0x0391
     98a:	82 17       	cp	r24, r18
     98c:	93 07       	cpc	r25, r19
     98e:	b4 f5       	brge	.+108    	; 0x9fc <secondB_trans+0x10c>
     990:	67 c0       	rjmp	.+206    	; 0xa60 <secondB_trans+0x170>
     992:	e6 31       	cpi	r30, 0x16	; 22
     994:	f1 05       	cpc	r31, r1
     996:	b9 f4       	brne	.+46     	; 0x9c6 <secondB_trans+0xd6>
     998:	ab 01       	movw	r20, r22
     99a:	4a 1b       	sub	r20, r26
     99c:	5b 0b       	sbc	r21, r27
     99e:	20 91 aa 03 	lds	r18, 0x03AA
     9a2:	30 91 ab 03 	lds	r19, 0x03AB
     9a6:	80 91 a2 03 	lds	r24, 0x03A2
     9aa:	90 91 a3 03 	lds	r25, 0x03A3
     9ae:	ec 01       	movw	r28, r24
     9b0:	2c 9f       	mul	r18, r28
     9b2:	c0 01       	movw	r24, r0
     9b4:	2d 9f       	mul	r18, r29
     9b6:	90 0d       	add	r25, r0
     9b8:	3c 9f       	mul	r19, r28
     9ba:	90 0d       	add	r25, r0
     9bc:	11 24       	eor	r1, r1
     9be:	84 17       	cp	r24, r20
     9c0:	95 07       	cpc	r25, r21
     9c2:	74 f5       	brge	.+92     	; 0xa20 <secondB_trans+0x130>
     9c4:	4d c0       	rjmp	.+154    	; 0xa60 <secondB_trans+0x170>
     9c6:	e7 31       	cpi	r30, 0x17	; 23
     9c8:	f1 05       	cpc	r31, r1
     9ca:	d9 f0       	breq	.+54     	; 0xa02 <secondB_trans+0x112>
     9cc:	e8 31       	cpi	r30, 0x18	; 24
     9ce:	f1 05       	cpc	r31, r1
     9d0:	a9 f4       	brne	.+42     	; 0x9fc <secondB_trans+0x10c>
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	6a 1b       	sub	r22, r26
     9d8:	7b 0b       	sbc	r23, r27
     9da:	80 91 aa 03 	lds	r24, 0x03AA
     9de:	90 91 ab 03 	lds	r25, 0x03AB
     9e2:	20 91 a2 03 	lds	r18, 0x03A2
     9e6:	30 91 a3 03 	lds	r19, 0x03A3
     9ea:	fc 01       	movw	r30, r24
     9ec:	e2 9f       	mul	r30, r18
     9ee:	c0 01       	movw	r24, r0
     9f0:	e3 9f       	mul	r30, r19
     9f2:	90 0d       	add	r25, r0
     9f4:	f2 9f       	mul	r31, r18
     9f6:	90 0d       	add	r25, r0
     9f8:	11 24       	eor	r1, r1
     9fa:	2b c0       	rjmp	.+86     	; 0xa52 <secondB_trans+0x162>
     9fc:	e9 31       	cpi	r30, 0x19	; 25
     9fe:	f1 05       	cpc	r31, r1
     a00:	79 f4       	brne	.+30     	; 0xa20 <secondB_trans+0x130>
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	6a 1b       	sub	r22, r26
     a08:	7b 0b       	sbc	r23, r27
     a0a:	80 91 90 03 	lds	r24, 0x0390
     a0e:	90 91 91 03 	lds	r25, 0x0391
     a12:	86 17       	cp	r24, r22
     a14:	97 07       	cpc	r25, r23
     a16:	14 f4       	brge	.+4      	; 0xa1c <secondB_trans+0x12c>
     a18:	21 e0       	ldi	r18, 0x01	; 1
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	c9 01       	movw	r24, r18
     a1e:	22 c0       	rjmp	.+68     	; 0xa64 <secondB_trans+0x174>
     a20:	7a 97       	sbiw	r30, 0x1a	; 26
     a22:	19 f0       	breq	.+6      	; 0xa2a <secondB_trans+0x13a>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	1d c0       	rjmp	.+58     	; 0xa64 <secondB_trans+0x174>
     a2a:	40 e0       	ldi	r20, 0x00	; 0
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	6a 1b       	sub	r22, r26
     a30:	7b 0b       	sbc	r23, r27
     a32:	80 91 ba 03 	lds	r24, 0x03BA
     a36:	90 91 bb 03 	lds	r25, 0x03BB
     a3a:	20 91 a2 03 	lds	r18, 0x03A2
     a3e:	30 91 a3 03 	lds	r19, 0x03A3
     a42:	ec 01       	movw	r28, r24
     a44:	c2 9f       	mul	r28, r18
     a46:	c0 01       	movw	r24, r0
     a48:	c3 9f       	mul	r28, r19
     a4a:	90 0d       	add	r25, r0
     a4c:	d2 9f       	mul	r29, r18
     a4e:	90 0d       	add	r25, r0
     a50:	11 24       	eor	r1, r1
     a52:	86 17       	cp	r24, r22
     a54:	97 07       	cpc	r25, r23
     a56:	14 f4       	brge	.+4      	; 0xa5c <secondB_trans+0x16c>
     a58:	41 e0       	ldi	r20, 0x01	; 1
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	ca 01       	movw	r24, r20
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <secondB_trans+0x174>
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
	(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/)||
	(state == B2START2 && counter - counterRef > pWait)||
	(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||
	(state == B2STOP2 && counter - counterRef > pWait)||
	(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/));
}
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <dry_trans>:

bool dry_trans(int state, int counter, int counterRef, int counterRefFive){
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	fc 01       	movw	r30, r24
     a70:	da 01       	movw	r26, r20
	//Had references to counterRef26, 30...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == D1START && counter - counterRef > kWait)||
     a72:	8b 31       	cpi	r24, 0x1B	; 27
     a74:	91 05       	cpc	r25, r1
     a76:	61 f4       	brne	.+24     	; 0xa90 <dry_trans+0x26>
     a78:	9b 01       	movw	r18, r22
     a7a:	24 1b       	sub	r18, r20
     a7c:	35 0b       	sbc	r19, r21
     a7e:	80 91 94 03 	lds	r24, 0x0394
     a82:	90 91 95 03 	lds	r25, 0x0395
     a86:	82 17       	cp	r24, r18
     a88:	93 07       	cpc	r25, r19
     a8a:	0c f0       	brlt	.+2      	; 0xa8e <dry_trans+0x24>
     a8c:	45 c0       	rjmp	.+138    	; 0xb18 <dry_trans+0xae>
     a8e:	de c0       	rjmp	.+444    	; 0xc4c <dry_trans+0x1e2>
     a90:	8c 31       	cpi	r24, 0x1C	; 28
     a92:	91 05       	cpc	r25, r1
     a94:	b9 f4       	brne	.+46     	; 0xac4 <dry_trans+0x5a>
     a96:	ab 01       	movw	r20, r22
     a98:	4a 1b       	sub	r20, r26
     a9a:	5b 0b       	sbc	r21, r27
     a9c:	20 91 ac 03 	lds	r18, 0x03AC
     aa0:	30 91 ad 03 	lds	r19, 0x03AD
     aa4:	80 91 a2 03 	lds	r24, 0x03A2
     aa8:	90 91 a3 03 	lds	r25, 0x03A3
     aac:	ec 01       	movw	r28, r24
     aae:	2c 9f       	mul	r18, r28
     ab0:	c0 01       	movw	r24, r0
     ab2:	2d 9f       	mul	r18, r29
     ab4:	90 0d       	add	r25, r0
     ab6:	3c 9f       	mul	r19, r28
     ab8:	90 0d       	add	r25, r0
     aba:	11 24       	eor	r1, r1
     abc:	84 17       	cp	r24, r20
     abe:	95 07       	cpc	r25, r21
     ac0:	d4 f5       	brge	.+116    	; 0xb36 <dry_trans+0xcc>
     ac2:	c4 c0       	rjmp	.+392    	; 0xc4c <dry_trans+0x1e2>
     ac4:	8d 31       	cpi	r24, 0x1D	; 29
     ac6:	91 05       	cpc	r25, r1
     ac8:	b9 f4       	brne	.+46     	; 0xaf8 <dry_trans+0x8e>
     aca:	ab 01       	movw	r20, r22
     acc:	4a 1b       	sub	r20, r26
     ace:	5b 0b       	sbc	r21, r27
     ad0:	20 91 bc 03 	lds	r18, 0x03BC
     ad4:	30 91 bd 03 	lds	r19, 0x03BD
     ad8:	80 91 a2 03 	lds	r24, 0x03A2
     adc:	90 91 a3 03 	lds	r25, 0x03A3
     ae0:	ec 01       	movw	r28, r24
     ae2:	2c 9f       	mul	r18, r28
     ae4:	c0 01       	movw	r24, r0
     ae6:	2d 9f       	mul	r18, r29
     ae8:	90 0d       	add	r25, r0
     aea:	3c 9f       	mul	r19, r28
     aec:	90 0d       	add	r25, r0
     aee:	11 24       	eor	r1, r1
     af0:	84 17       	cp	r24, r20
     af2:	95 07       	cpc	r25, r21
     af4:	dc f5       	brge	.+118    	; 0xb6c <dry_trans+0x102>
     af6:	aa c0       	rjmp	.+340    	; 0xc4c <dry_trans+0x1e2>
     af8:	8e 31       	cpi	r24, 0x1E	; 30
     afa:	91 05       	cpc	r25, r1
     afc:	69 f4       	brne	.+26     	; 0xb18 <dry_trans+0xae>
     afe:	cb 01       	movw	r24, r22
     b00:	82 1b       	sub	r24, r18
     b02:	93 0b       	sbc	r25, r19
     b04:	9c 01       	movw	r18, r24
     b06:	80 91 92 03 	lds	r24, 0x0392
     b0a:	90 91 93 03 	lds	r25, 0x0393
     b0e:	82 17       	cp	r24, r18
     b10:	93 07       	cpc	r25, r19
     b12:	0c f0       	brlt	.+2      	; 0xb16 <dry_trans+0xac>
     b14:	45 c0       	rjmp	.+138    	; 0xba0 <dry_trans+0x136>
     b16:	9a c0       	rjmp	.+308    	; 0xc4c <dry_trans+0x1e2>
     b18:	ef 31       	cpi	r30, 0x1F	; 31
     b1a:	f1 05       	cpc	r31, r1
     b1c:	61 f4       	brne	.+24     	; 0xb36 <dry_trans+0xcc>
     b1e:	9b 01       	movw	r18, r22
     b20:	2a 1b       	sub	r18, r26
     b22:	3b 0b       	sbc	r19, r27
     b24:	80 91 90 03 	lds	r24, 0x0390
     b28:	90 91 91 03 	lds	r25, 0x0391
     b2c:	82 17       	cp	r24, r18
     b2e:	93 07       	cpc	r25, r19
     b30:	0c f0       	brlt	.+2      	; 0xb34 <dry_trans+0xca>
     b32:	42 c0       	rjmp	.+132    	; 0xbb8 <dry_trans+0x14e>
     b34:	8b c0       	rjmp	.+278    	; 0xc4c <dry_trans+0x1e2>
     b36:	e0 32       	cpi	r30, 0x20	; 32
     b38:	f1 05       	cpc	r31, r1
     b3a:	c1 f4       	brne	.+48     	; 0xb6c <dry_trans+0x102>
     b3c:	ab 01       	movw	r20, r22
     b3e:	4a 1b       	sub	r20, r26
     b40:	5b 0b       	sbc	r21, r27
     b42:	20 91 ac 03 	lds	r18, 0x03AC
     b46:	30 91 ad 03 	lds	r19, 0x03AD
     b4a:	80 91 a2 03 	lds	r24, 0x03A2
     b4e:	90 91 a3 03 	lds	r25, 0x03A3
     b52:	ec 01       	movw	r28, r24
     b54:	2c 9f       	mul	r18, r28
     b56:	c0 01       	movw	r24, r0
     b58:	2d 9f       	mul	r18, r29
     b5a:	90 0d       	add	r25, r0
     b5c:	3c 9f       	mul	r19, r28
     b5e:	90 0d       	add	r25, r0
     b60:	11 24       	eor	r1, r1
     b62:	84 17       	cp	r24, r20
     b64:	95 07       	cpc	r25, r21
     b66:	0c f0       	brlt	.+2      	; 0xb6a <dry_trans+0x100>
     b68:	3f c0       	rjmp	.+126    	; 0xbe8 <dry_trans+0x17e>
     b6a:	70 c0       	rjmp	.+224    	; 0xc4c <dry_trans+0x1e2>
     b6c:	e1 32       	cpi	r30, 0x21	; 33
     b6e:	f1 05       	cpc	r31, r1
     b70:	b9 f4       	brne	.+46     	; 0xba0 <dry_trans+0x136>
     b72:	ab 01       	movw	r20, r22
     b74:	4a 1b       	sub	r20, r26
     b76:	5b 0b       	sbc	r21, r27
     b78:	20 91 be 03 	lds	r18, 0x03BE
     b7c:	30 91 bf 03 	lds	r19, 0x03BF
     b80:	80 91 a2 03 	lds	r24, 0x03A2
     b84:	90 91 a3 03 	lds	r25, 0x03A3
     b88:	ec 01       	movw	r28, r24
     b8a:	2c 9f       	mul	r18, r28
     b8c:	c0 01       	movw	r24, r0
     b8e:	2d 9f       	mul	r18, r29
     b90:	90 0d       	add	r25, r0
     b92:	3c 9f       	mul	r19, r28
     b94:	90 0d       	add	r25, r0
     b96:	11 24       	eor	r1, r1
     b98:	84 17       	cp	r24, r20
     b9a:	95 07       	cpc	r25, r21
     b9c:	bc f5       	brge	.+110    	; 0xc0c <dry_trans+0x1a2>
     b9e:	56 c0       	rjmp	.+172    	; 0xc4c <dry_trans+0x1e2>
     ba0:	e2 32       	cpi	r30, 0x22	; 34
     ba2:	f1 05       	cpc	r31, r1
     ba4:	49 f4       	brne	.+18     	; 0xbb8 <dry_trans+0x14e>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	6a 1b       	sub	r22, r26
     bac:	7b 0b       	sbc	r23, r27
     bae:	69 5e       	subi	r22, 0xE9	; 233
     bb0:	73 40       	sbci	r23, 0x03	; 3
     bb2:	0c f4       	brge	.+2      	; 0xbb6 <dry_trans+0x14c>
     bb4:	4d c0       	rjmp	.+154    	; 0xc50 <dry_trans+0x1e6>
     bb6:	4a c0       	rjmp	.+148    	; 0xc4c <dry_trans+0x1e2>
     bb8:	e3 32       	cpi	r30, 0x23	; 35
     bba:	f1 05       	cpc	r31, r1
     bbc:	a9 f4       	brne	.+42     	; 0xbe8 <dry_trans+0x17e>
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	6a 1b       	sub	r22, r26
     bc4:	7b 0b       	sbc	r23, r27
     bc6:	80 91 b4 03 	lds	r24, 0x03B4
     bca:	90 91 b5 03 	lds	r25, 0x03B5
     bce:	20 91 a2 03 	lds	r18, 0x03A2
     bd2:	30 91 a3 03 	lds	r19, 0x03A3
     bd6:	ec 01       	movw	r28, r24
     bd8:	c2 9f       	mul	r28, r18
     bda:	c0 01       	movw	r24, r0
     bdc:	c3 9f       	mul	r28, r19
     bde:	90 0d       	add	r25, r0
     be0:	d2 9f       	mul	r29, r18
     be2:	90 0d       	add	r25, r0
     be4:	11 24       	eor	r1, r1
     be6:	2b c0       	rjmp	.+86     	; 0xc3e <dry_trans+0x1d4>
     be8:	e4 32       	cpi	r30, 0x24	; 36
     bea:	f1 05       	cpc	r31, r1
     bec:	79 f4       	brne	.+30     	; 0xc0c <dry_trans+0x1a2>
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	6a 1b       	sub	r22, r26
     bf4:	7b 0b       	sbc	r23, r27
     bf6:	80 91 90 03 	lds	r24, 0x0390
     bfa:	90 91 91 03 	lds	r25, 0x0391
     bfe:	86 17       	cp	r24, r22
     c00:	97 07       	cpc	r25, r23
     c02:	14 f4       	brge	.+4      	; 0xc08 <dry_trans+0x19e>
     c04:	21 e0       	ldi	r18, 0x01	; 1
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	c9 01       	movw	r24, r18
     c0a:	22 c0       	rjmp	.+68     	; 0xc50 <dry_trans+0x1e6>
     c0c:	b5 97       	sbiw	r30, 0x25	; 37
     c0e:	19 f0       	breq	.+6      	; 0xc16 <dry_trans+0x1ac>
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	1d c0       	rjmp	.+58     	; 0xc50 <dry_trans+0x1e6>
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	6a 1b       	sub	r22, r26
     c1c:	7b 0b       	sbc	r23, r27
     c1e:	80 91 ae 03 	lds	r24, 0x03AE
     c22:	90 91 af 03 	lds	r25, 0x03AF
     c26:	20 91 a0 03 	lds	r18, 0x03A0
     c2a:	30 91 a1 03 	lds	r19, 0x03A1
     c2e:	fc 01       	movw	r30, r24
     c30:	e2 9f       	mul	r30, r18
     c32:	c0 01       	movw	r24, r0
     c34:	e3 9f       	mul	r30, r19
     c36:	90 0d       	add	r25, r0
     c38:	f2 9f       	mul	r31, r18
     c3a:	90 0d       	add	r25, r0
     c3c:	11 24       	eor	r1, r1
     c3e:	86 17       	cp	r24, r22
     c40:	97 07       	cpc	r25, r23
     c42:	14 f4       	brge	.+4      	; 0xc48 <dry_trans+0x1de>
     c44:	41 e0       	ldi	r20, 0x01	; 1
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	ca 01       	movw	r24, r20
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <dry_trans+0x1e6>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
	(state == D2STOP && counter - counterRef > totalStepLength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/)||
	(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/)||
	(state == FIXH && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/)||
	(state == LOWERL3 && counter - counterRef > pWait)||
	(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate));
}
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <motor_and_write>:
	serial_print_string(msg);
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor)
{
     c56:	6f 92       	push	r6
     c58:	7f 92       	push	r7
     c5a:	8f 92       	push	r8
     c5c:	9f 92       	push	r9
     c5e:	af 92       	push	r10
     c60:	bf 92       	push	r11
     c62:	cf 92       	push	r12
     c64:	df 92       	push	r13
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
     c6a:	0f 93       	push	r16
     c6c:	1f 93       	push	r17
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	4c 01       	movw	r8, r24
     c74:	3a 01       	movw	r6, r20
     c76:	e9 01       	movw	r28, r18
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     c78:	fc 01       	movw	r30, r24
     c7a:	e6 1b       	sub	r30, r22
     c7c:	f7 0b       	sbc	r31, r23
     c7e:	60 91 a0 03 	lds	r22, 0x03A0
     c82:	70 91 a1 03 	lds	r23, 0x03A1
     c86:	cf 01       	movw	r24, r30
     c88:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__divmodhi4>
     c8c:	20 91 96 03 	lds	r18, 0x0396
     c90:	30 91 97 03 	lds	r19, 0x0397
     c94:	82 17       	cp	r24, r18
     c96:	93 07       	cpc	r25, r19
     c98:	34 f4       	brge	.+12     	; 0xca6 <motor_and_write+0x50>
     c9a:	cd 2b       	or	r28, r29
     c9c:	21 f0       	breq	.+8      	; 0xca6 <motor_and_write+0x50>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     c9e:	80 91 2f 04 	lds	r24, 0x042F
     ca2:	81 60       	ori	r24, 0x01	; 1
     ca4:	03 c0       	rjmp	.+6      	; 0xcac <motor_and_write+0x56>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     ca6:	80 91 2f 04 	lds	r24, 0x042F
     caa:	8e 7f       	andi	r24, 0xFE	; 254
     cac:	80 93 2f 04 	sts	0x042F, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     cb0:	60 91 a2 03 	lds	r22, 0x03A2
     cb4:	70 91 a3 03 	lds	r23, 0x03A3
     cb8:	cf 01       	movw	r24, r30
     cba:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__divmodhi4>
     cbe:	20 91 98 03 	lds	r18, 0x0398
     cc2:	30 91 99 03 	lds	r19, 0x0399
     cc6:	82 17       	cp	r24, r18
     cc8:	93 07       	cpc	r25, r19
     cca:	34 f4       	brge	.+12     	; 0xcd8 <motor_and_write+0x82>
     ccc:	01 2b       	or	r16, r17
     cce:	21 f0       	breq	.+8      	; 0xcd8 <motor_and_write+0x82>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     cd0:	80 91 2f 04 	lds	r24, 0x042F
     cd4:	88 60       	ori	r24, 0x08	; 8
     cd6:	03 c0       	rjmp	.+6      	; 0xcde <motor_and_write+0x88>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     cd8:	80 91 2f 04 	lds	r24, 0x042F
     cdc:	87 7f       	andi	r24, 0xF7	; 247
     cde:	80 93 2f 04 	sts	0x042F, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     ce2:	60 91 a4 03 	lds	r22, 0x03A4
     ce6:	70 91 a5 03 	lds	r23, 0x03A5
     cea:	cf 01       	movw	r24, r30
     cec:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__divmodhi4>
     cf0:	20 91 9a 03 	lds	r18, 0x039A
     cf4:	30 91 9b 03 	lds	r19, 0x039B
     cf8:	82 17       	cp	r24, r18
     cfa:	93 07       	cpc	r25, r19
     cfc:	34 f4       	brge	.+12     	; 0xd0a <motor_and_write+0xb4>
     cfe:	ef 28       	or	r14, r15
     d00:	21 f0       	breq	.+8      	; 0xd0a <motor_and_write+0xb4>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     d02:	80 91 2f 04 	lds	r24, 0x042F
     d06:	80 64       	ori	r24, 0x40	; 64
     d08:	03 c0       	rjmp	.+6      	; 0xd10 <motor_and_write+0xba>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     d0a:	80 91 2f 04 	lds	r24, 0x042F
     d0e:	8f 7b       	andi	r24, 0xBF	; 191
     d10:	80 93 2f 04 	sts	0x042F, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     d14:	60 91 a6 03 	lds	r22, 0x03A6
     d18:	70 91 a7 03 	lds	r23, 0x03A7
     d1c:	cf 01       	movw	r24, r30
     d1e:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__divmodhi4>
     d22:	20 91 9c 03 	lds	r18, 0x039C
     d26:	30 91 9d 03 	lds	r19, 0x039D
     d2a:	82 17       	cp	r24, r18
     d2c:	93 07       	cpc	r25, r19
     d2e:	34 f4       	brge	.+12     	; 0xd3c <motor_and_write+0xe6>
     d30:	cd 28       	or	r12, r13
     d32:	21 f0       	breq	.+8      	; 0xd3c <motor_and_write+0xe6>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     d34:	80 91 2b 04 	lds	r24, 0x042B
     d38:	82 60       	ori	r24, 0x02	; 2
     d3a:	03 c0       	rjmp	.+6      	; 0xd42 <motor_and_write+0xec>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     d3c:	80 91 2b 04 	lds	r24, 0x042B
     d40:	8d 7f       	andi	r24, 0xFD	; 253
     d42:	80 93 2b 04 	sts	0x042B, r24
	}

	if( ((counter - counterRefFive) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     d46:	60 91 a8 03 	lds	r22, 0x03A8
     d4a:	70 91 a9 03 	lds	r23, 0x03A9
     d4e:	c4 01       	movw	r24, r8
     d50:	86 19       	sub	r24, r6
     d52:	97 09       	sbc	r25, r7
     d54:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__divmodhi4>
     d58:	20 91 9e 03 	lds	r18, 0x039E
     d5c:	30 91 9f 03 	lds	r19, 0x039F
     d60:	82 17       	cp	r24, r18
     d62:	93 07       	cpc	r25, r19
     d64:	34 f4       	brge	.+12     	; 0xd72 <motor_and_write+0x11c>
     d66:	ab 28       	or	r10, r11
     d68:	21 f0       	breq	.+8      	; 0xd72 <motor_and_write+0x11c>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     d6a:	80 91 2b 04 	lds	r24, 0x042B
     d6e:	80 61       	ori	r24, 0x10	; 16
     d70:	03 c0       	rjmp	.+6      	; 0xd78 <motor_and_write+0x122>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     d72:	80 91 2b 04 	lds	r24, 0x042B
     d76:	8f 7e       	andi	r24, 0xEF	; 239
     d78:	80 93 2b 04 	sts	0x042B, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     d7c:	80 e4       	ldi	r24, 0x40	; 64
     d7e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
	i2c_write(0x2);									// write command byte
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     d88:	80 91 2f 04 	lds	r24, 0x042F
     d8c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     d90:	80 91 2b 04 	lds	r24, 0x042B
     d94:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     d98:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

	i2c_start(I2C2+I2C_WRITE);
     d9c:	82 e4       	ldi	r24, 0x42	; 66
     d9e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
	i2c_write(0x2);
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_outputByte0.outputByte0);
     da8:	80 91 2e 04 	lds	r24, 0x042E
     dac:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_outputByte1.outputByte1);
     db0:	80 91 2c 04 	lds	r24, 0x042C
     db4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_stop();
     db8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
}
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	af 90       	pop	r10
     dd0:	9f 90       	pop	r9
     dd2:	8f 90       	pop	r8
     dd4:	7f 90       	pop	r7
     dd6:	6f 90       	pop	r6
     dd8:	08 95       	ret

00000dda <serial_print_string>:
	}
	serial_print_string("END");
	}
}

void serial_print_string(char msg[]){
     dda:	68 2f       	mov	r22, r24
	serial_send_blocking(USB_COMM, msg, strlen(msg));
     ddc:	e8 2f       	mov	r30, r24
     dde:	f9 2f       	mov	r31, r25
     de0:	df 01       	movw	r26, r30
     de2:	0d 90       	ld	r0, X+
     de4:	00 20       	and	r0, r0
     de6:	e9 f7       	brne	.-6      	; 0xde2 <serial_print_string+0x8>
     de8:	11 97       	sbiw	r26, 0x01	; 1
     dea:	ae 1b       	sub	r26, r30
     dec:	bf 0b       	sbc	r27, r31
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	79 2f       	mov	r23, r25
     df2:	4a 2f       	mov	r20, r26
     df4:	0e 94 9e 1c 	call	0x393c	; 0x393c <serial_send_blocking>
	serial_send_blocking(USB_COMM, "\r\n", 2);
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	71 e0       	ldi	r23, 0x01	; 1
     dfe:	42 e0       	ldi	r20, 0x02	; 2
     e00:	0e 94 9e 1c 	call	0x393c	; 0x393c <serial_send_blocking>
}
     e04:	08 95       	ret

00000e06 <init_action>:
	i2c_write(u_outputByte0.outputByte0);
	i2c_write(u_outputByte1.outputByte1);
	i2c_stop();
}

void init_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor, bool *pprint0){
     e06:	af 92       	push	r10
     e08:	bf 92       	push	r11
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	ea 01       	movw	r28, r20
     e10:	f9 01       	movw	r30, r18
	switch(state){
     e12:	84 30       	cpi	r24, 0x04	; 4
     e14:	91 05       	cpc	r25, r1
     e16:	09 f4       	brne	.+2      	; 0xe1a <init_action+0x14>
     e18:	90 c0       	rjmp	.+288    	; 0xf3a <init_action+0x134>
     e1a:	85 30       	cpi	r24, 0x05	; 5
     e1c:	91 05       	cpc	r25, r1
     e1e:	94 f4       	brge	.+36     	; 0xe44 <init_action+0x3e>
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	91 05       	cpc	r25, r1
     e24:	09 f4       	brne	.+2      	; 0xe28 <init_action+0x22>
     e26:	46 c0       	rjmp	.+140    	; 0xeb4 <init_action+0xae>
     e28:	82 30       	cpi	r24, 0x02	; 2
     e2a:	91 05       	cpc	r25, r1
     e2c:	1c f4       	brge	.+6      	; 0xe34 <init_action+0x2e>
     e2e:	89 2b       	or	r24, r25
     e30:	c9 f0       	breq	.+50     	; 0xe64 <init_action+0x5e>
     e32:	91 c0       	rjmp	.+290    	; 0xf56 <init_action+0x150>
     e34:	82 30       	cpi	r24, 0x02	; 2
     e36:	91 05       	cpc	r25, r1
     e38:	09 f4       	brne	.+2      	; 0xe3c <init_action+0x36>
     e3a:	4f c0       	rjmp	.+158    	; 0xeda <init_action+0xd4>
     e3c:	03 97       	sbiw	r24, 0x03	; 3
     e3e:	09 f0       	breq	.+2      	; 0xe42 <init_action+0x3c>
     e40:	8a c0       	rjmp	.+276    	; 0xf56 <init_action+0x150>
     e42:	5b c0       	rjmp	.+182    	; 0xefa <init_action+0xf4>
     e44:	86 30       	cpi	r24, 0x06	; 6
     e46:	91 05       	cpc	r25, r1
     e48:	09 f4       	brne	.+2      	; 0xe4c <init_action+0x46>
     e4a:	64 c0       	rjmp	.+200    	; 0xf14 <init_action+0x10e>
     e4c:	86 30       	cpi	r24, 0x06	; 6
     e4e:	91 05       	cpc	r25, r1
     e50:	0c f4       	brge	.+2      	; 0xe54 <init_action+0x4e>
     e52:	73 c0       	rjmp	.+230    	; 0xf3a <init_action+0x134>
     e54:	87 30       	cpi	r24, 0x07	; 7
     e56:	91 05       	cpc	r25, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <init_action+0x56>
     e5a:	69 c0       	rjmp	.+210    	; 0xf2e <init_action+0x128>
     e5c:	08 97       	sbiw	r24, 0x08	; 8
     e5e:	09 f0       	breq	.+2      	; 0xe62 <init_action+0x5c>
     e60:	7a c0       	rjmp	.+244    	; 0xf56 <init_action+0x150>
     e62:	6b c0       	rjmp	.+214    	; 0xf3a <init_action+0x134>
		case INIT:
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
     e64:	80 91 2a 04 	lds	r24, 0x042A
     e68:	90 91 2f 04 	lds	r25, 0x042F
     e6c:	81 ff       	sbrs	r24, 1
     e6e:	07 c0       	rjmp	.+14     	; 0xe7e <init_action+0x78>
				u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
     e70:	9f 7e       	andi	r25, 0xEF	; 239
     e72:	90 93 2f 04 	sts	0x042F, r25
				u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     e76:	80 91 2e 04 	lds	r24, 0x042E
     e7a:	87 7f       	andi	r24, 0xF7	; 247
     e7c:	55 c0       	rjmp	.+170    	; 0xf28 <init_action+0x122>
			}
			else{
				u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     e7e:	9f 7d       	andi	r25, 0xDF	; 223
     e80:	90 93 2f 04 	sts	0x042F, r25
				*pfixtureMotor = 0;
     e84:	11 82       	std	Z+1, r1	; 0x01
     e86:	10 82       	st	Z, r1
				u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     e88:	80 91 2e 04 	lds	r24, 0x042E
     e8c:	8f 7e       	andi	r24, 0xEF	; 239
				u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     e8e:	88 60       	ori	r24, 0x08	; 8
     e90:	80 93 2e 04 	sts	0x042E, r24
				if(*pprint0 == 1){
     e94:	f5 01       	movw	r30, r10
     e96:	80 81       	ld	r24, Z
     e98:	88 23       	and	r24, r24
     e9a:	09 f4       	brne	.+2      	; 0xe9e <init_action+0x98>
     e9c:	5c c0       	rjmp	.+184    	; 0xf56 <init_action+0x150>
					lcd_goto_xy(0,1);
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
					serial_print_string("PUSH TO START");
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
					*pprint0 = 0;
     eae:	f5 01       	movw	r30, r10
     eb0:	10 82       	st	Z, r1
     eb2:	51 c0       	rjmp	.+162    	; 0xf56 <init_action+0x150>
				}
			}
			break;
		case LOAD:
			u_outputByte0.bits_in_outputByte0.ACPower = 0;
     eb4:	20 91 2e 04 	lds	r18, 0x042E
     eb8:	32 2f       	mov	r19, r18
     eba:	3e 7f       	andi	r19, 0xFE	; 254
			if((counter % 200) < 100){
     ebc:	cb 01       	movw	r24, r22
     ebe:	68 ec       	ldi	r22, 0xC8	; 200
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__divmodhi4>
     ec6:	84 36       	cpi	r24, 0x64	; 100
     ec8:	91 05       	cpc	r25, r1
     eca:	24 f4       	brge	.+8      	; 0xed4 <init_action+0xce>
				u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     ecc:	2c 7f       	andi	r18, 0xFC	; 252
     ece:	20 93 2e 04 	sts	0x042E, r18
     ed2:	03 c0       	rjmp	.+6      	; 0xeda <init_action+0xd4>
			}
			else{
				u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     ed4:	32 60       	ori	r19, 0x02	; 2
     ed6:	30 93 2e 04 	sts	0x042E, r19
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
			break;
		case LOADEXTRA:
			*pplateLoadMotor = 1;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	99 83       	std	Y+1, r25	; 0x01
     ee0:	88 83       	st	Y, r24
			*pfixtureMotor = 0;
     ee2:	11 82       	std	Z+1, r1	; 0x01
     ee4:	10 82       	st	Z, r1
			
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
     ee6:	80 91 2f 04 	lds	r24, 0x042F
     eea:	8d 7f       	andi	r24, 0xFD	; 253
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     eec:	84 60       	ori	r24, 0x04	; 4
     eee:	80 93 2f 04 	sts	0x042F, r24
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
     ef2:	80 91 2e 04 	lds	r24, 0x042E
     ef6:	8b 7f       	andi	r24, 0xFB	; 251
     ef8:	17 c0       	rjmp	.+46     	; 0xf28 <init_action+0x122>
			break;
		case RAISEL1:
			u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     efa:	80 91 2e 04 	lds	r24, 0x042E
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     efe:	81 7e       	andi	r24, 0xE1	; 225
			u_outputByte0.bits_in_outputByte0.plateStop = 1;
     f00:	86 61       	ori	r24, 0x16	; 22
     f02:	80 93 2e 04 	sts	0x042E, r24
			*pplateLoadMotor = 0;
     f06:	19 82       	std	Y+1, r1	; 0x01
     f08:	18 82       	st	Y, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     f0a:	80 91 2f 04 	lds	r24, 0x042F
     f0e:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
     f10:	8b 7f       	andi	r24, 0xFB	; 251
     f12:	1f c0       	rjmp	.+62     	; 0xf52 <init_action+0x14c>
		case FIXLEXTRA:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case LOWERL1:
			*pfixtureMotor = 0;
     f14:	11 82       	std	Z+1, r1	; 0x01
     f16:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     f18:	80 91 2f 04 	lds	r24, 0x042F
     f1c:	8f 7d       	andi	r24, 0xDF	; 223
     f1e:	80 93 2f 04 	sts	0x042F, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     f22:	80 91 2e 04 	lds	r24, 0x042E
     f26:	88 60       	ori	r24, 0x08	; 8
     f28:	80 93 2e 04 	sts	0x042E, r24
     f2c:	14 c0       	rjmp	.+40     	; 0xf56 <init_action+0x150>
			break;
		case LOWERL2:
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     f2e:	80 91 2e 04 	lds	r24, 0x042E
     f32:	8f 7e       	andi	r24, 0xEF	; 239
     f34:	80 93 2e 04 	sts	0x042E, r24
     f38:	09 c0       	rjmp	.+18     	; 0xf4c <init_action+0x146>
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		//*********************************************
		case MOVEC1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     f3a:	80 91 2f 04 	lds	r24, 0x042F
     f3e:	80 61       	ori	r24, 0x10	; 16
     f40:	80 93 2f 04 	sts	0x042F, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	91 83       	std	Z+1, r25	; 0x01
     f4a:	80 83       	st	Z, r24
     f4c:	80 91 2f 04 	lds	r24, 0x042F
     f50:	80 62       	ori	r24, 0x20	; 32
     f52:	80 93 2f 04 	sts	0x042F, r24
			break;
	}
}
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	bf 90       	pop	r11
     f5c:	af 90       	pop	r10
     f5e:	08 95       	ret

00000f60 <serial_print_int>:
void serial_print_string(char msg[]){
	serial_send_blocking(USB_COMM, msg, strlen(msg));
	serial_send_blocking(USB_COMM, "\r\n", 2);
}

void serial_print_int(int a){
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	00 d0       	rcall	.+0      	; 0xf6a <serial_print_int+0xa>
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <serial_print_int+0xc>
     f6c:	0f 92       	push	r0
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
	char msg[5];
	itoa(a, msg, 10);
     f72:	8e 01       	movw	r16, r28
     f74:	0f 5f       	subi	r16, 0xFF	; 255
     f76:	1f 4f       	sbci	r17, 0xFF	; 255
     f78:	b8 01       	movw	r22, r16
     f7a:	4a e0       	ldi	r20, 0x0A	; 10
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	0e 94 34 21 	call	0x4268	; 0x4268 <itoa>
	serial_print_string(msg);
     f82:	c8 01       	movw	r24, r16
     f84:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
}
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	08 95       	ret

00000f9c <main>:
void serial_print_string(char msg[]);

void serial_print_int(int a);

int main()   
{
     f9c:	2f 92       	push	r2
     f9e:	3f 92       	push	r3
     fa0:	4f 92       	push	r4
     fa2:	5f 92       	push	r5
     fa4:	6f 92       	push	r6
     fa6:	7f 92       	push	r7
     fa8:	8f 92       	push	r8
     faa:	9f 92       	push	r9
     fac:	af 92       	push	r10
     fae:	bf 92       	push	r11
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	6a 97       	sbiw	r28, 0x1a	; 26
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
	bool print0 = true;
	bool  print35 = true;
		
	//initialize button variables
	int button = 1;				
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently
     fd0:	1c 8a       	std	Y+20, r1	; 0x14
     fd2:	2f ef       	ldi	r18, 0xFF	; 255
     fd4:	3f ef       	ldi	r19, 0xFF	; 255
     fd6:	38 8f       	std	Y+24, r19	; 0x18
     fd8:	2f 8b       	std	Y+23, r18	; 0x17
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
    
	while(1){						//Repeats the entire program indefinitely (runs maintenance or normal each time)

							//mx holds whether motor x should move: 0 = no, 1 = yes
	plateLoadMotor = 0;		//plate load motor
     fda:	1b 82       	std	Y+3, r1	; 0x03
     fdc:	1a 82       	std	Y+2, r1	; 0x02
	fixtureMotor = 0;		//fixture motor
     fde:	1d 82       	std	Y+5, r1	; 0x05
     fe0:	1c 82       	std	Y+4, r1	; 0x04
	brush1Motor = 0;		//brush 1 motor
     fe2:	1f 82       	std	Y+7, r1	; 0x07
     fe4:	1e 82       	std	Y+6, r1	; 0x06
	brush2Motor = 0;		//brush 2 motor
     fe6:	19 86       	std	Y+9, r1	; 0x09
     fe8:	18 86       	std	Y+8, r1	; 0x08
	paperTowelMotor = 0; 	//paper towel roller motor
     fea:	1b 86       	std	Y+11, r1	; 0x0b
     fec:	1a 86       	std	Y+10, r1	; 0x0a
	//the ones with numbers correspond to run mode states, and Five refers to motor 5 (paper towel roller)
	counterRef = 0;
	counterRefFive = 0;
		
	//holds wait times for various actions in ms
	pWait = 100;
     fee:	84 e6       	ldi	r24, 0x64	; 100
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	90 93 91 03 	sts	0x0391, r25
     ff6:	80 93 90 03 	sts	0x0390, r24
	mWait = 100;
     ffa:	90 93 93 03 	sts	0x0393, r25
     ffe:	80 93 92 03 	sts	0x0392, r24
	kWait = 100;
    1002:	90 93 95 03 	sts	0x0395, r25
    1006:	80 93 94 03 	sts	0x0394, r24

	//hold the length of the high and high-low periods for the various motors - this controls their speed
	highLength1 = 1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	90 93 97 03 	sts	0x0397, r25
    1012:	80 93 96 03 	sts	0x0396, r24
	highLength2 = 1;
    1016:	90 93 99 03 	sts	0x0399, r25
    101a:	80 93 98 03 	sts	0x0398, r24
	highLength3 = 1;
    101e:	90 93 9b 03 	sts	0x039B, r25
    1022:	80 93 9a 03 	sts	0x039A, r24
	highLength4 = 1;
    1026:	90 93 9d 03 	sts	0x039D, r25
    102a:	80 93 9c 03 	sts	0x039C, r24
	highLength5 = 1;
    102e:	90 93 9f 03 	sts	0x039F, r25
    1032:	80 93 9e 03 	sts	0x039E, r24
	totalStepLength1 = 2;
    1036:	22 e0       	ldi	r18, 0x02	; 2
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	30 93 a1 03 	sts	0x03A1, r19
    103e:	20 93 a0 03 	sts	0x03A0, r18
	totalStepLength2 = 8;
    1042:	88 e0       	ldi	r24, 0x08	; 8
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	90 93 a3 03 	sts	0x03A3, r25
    104a:	80 93 a2 03 	sts	0x03A2, r24
	totalStepLength3 = 2;
    104e:	30 93 a5 03 	sts	0x03A5, r19
    1052:	20 93 a4 03 	sts	0x03A4, r18
	totalStepLength4 = 2;
    1056:	30 93 a7 03 	sts	0x03A7, r19
    105a:	20 93 a6 03 	sts	0x03A6, r18
	totalStepLength5 = 2;
    105e:	30 93 a9 03 	sts	0x03A9, r19
    1062:	20 93 a8 03 	sts	0x03A8, r18
	
	//hold whether or not statements have been printed yet (numbers refer to run mode states)
	print0 = true;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	89 83       	std	Y+1, r24	; 0x01
	print35 = true;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
    106a:	1d 86       	std	Y+13, r1	; 0x0d
    106c:	1c 86       	std	Y+12, r1	; 0x0c
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
    106e:	10 92 2f 04 	sts	0x042F, r1
	u_motorByte1.motorByte1 = 128;  // initialize motorByte1              **********1 or 128, depending on order**********
    1072:	80 e8       	ldi	r24, 0x80	; 128
    1074:	80 93 2b 04 	sts	0x042B, r24
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	80 93 2e 04 	sts	0x042E, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
    107e:	80 93 2c 04 	sts	0x042C, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
    1082:	10 92 2a 04 	sts	0x042A, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
    1086:	10 92 2d 04 	sts	0x042D, r1
	
	//clear();
	serial_print_string("DASCH CLEANER 2c");
    108a:	81 e1       	ldi	r24, 0x11	; 17
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
	lcd_goto_xy(0,1);
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
	serial_print_string("REV: 31");
    109a:	82 e2       	ldi	r24, 0x22	; 34
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
	delay_ms(2000);
    10a2:	80 ed       	ldi	r24, 0xD0	; 208
    10a4:	97 e0       	ldi	r25, 0x07	; 7
    10a6:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>
	
	//clear();
	serial_print_string("BEGIN ");
    10aa:	8a e2       	ldi	r24, 0x2A	; 42
    10ac:	91 e0       	ldi	r25, 0x01	; 1
    10ae:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
	
	delay_ms(1000);
    10b2:	88 ee       	ldi	r24, 0xE8	; 232
    10b4:	93 e0       	ldi	r25, 0x03	; 3
    10b6:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>

    i2c_init();                                // init I2C interface
    10ba:	0e 94 93 00 	call	0x126	; 0x126 <i2c_init>
	
    serial_print_string("INIT ");
    10be:	81 e3       	ldi	r24, 0x31	; 49
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
    10c6:	80 e4       	ldi	r24, 0x40	; 64
    10c8:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    10cc:	f8 2e       	mov	r15, r24
	i2c_stop();
    10ce:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
    10d2:	82 e4       	ldi	r24, 0x42	; 66
    10d4:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    10d8:	18 2f       	mov	r17, r24
	i2c_stop();
    10da:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
    10de:	84 e4       	ldi	r24, 0x44	; 68
    10e0:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    10e4:	08 2f       	mov	r16, r24
	i2c_stop();
    10e6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
    
	//clear();
	serial_print_string("START ");
    10ea:	87 e3       	ldi	r24, 0x37	; 55
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
    10f2:	1f 29       	or	r17, r15
    10f4:	10 2b       	or	r17, r16
    10f6:	61 f0       	breq	.+24     	; 0x1110 <main+0x174>
        /* failed to issue start condition(s), possibly no device found */
        
		serial_print_string("I2C BAD ");
    10f8:	8e e3       	ldi	r24, 0x3E	; 62
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
		i2c_stop();
    1100:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
		serial_print_string("STOP ");
    1104:	87 e4       	ldi	r24, 0x47	; 71
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
    110c:	0c 94 0f 13 	jmp	0x261e	; 0x261e <main+0x1682>
    }
	else {
		serial_print_string("I2C OK ");
    1110:	8d e4       	ldi	r24, 0x4D	; 77
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
        /* issuing start conditions ok, devices accessible */
		serial_print_string("BINIT ");
    1118:	85 e5       	ldi	r24, 0x55	; 85
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
    1120:	80 e4       	ldi	r24, 0x40	; 64
    1122:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x6);
    1126:	86 e0       	ldi	r24, 0x06	; 6
    1128:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1138:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C1+I2C_WRITE);
    113c:	80 e4       	ldi	r24, 0x40	; 64
    113e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    1148:	80 91 2f 04 	lds	r24, 0x042F
    114c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    1150:	80 91 2b 04 	lds	r24, 0x042B
    1154:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1158:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
    115c:	82 e4       	ldi	r24, 0x42	; 66
    115e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x6);
    1162:	86 e0       	ldi	r24, 0x06	; 6
    1164:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1174:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);
    1178:	82 e4       	ldi	r24, 0x42	; 66
    117a:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    117e:	82 e0       	ldi	r24, 0x02	; 2
    1180:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_outputByte0.outputByte0);
    1184:	80 91 2e 04 	lds	r24, 0x042E
    1188:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_outputByte1.outputByte1);
    118c:	80 91 2c 04 	lds	r24, 0x042C
    1190:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1194:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		//Registers default to input, so I2C3 is fine already

		u_motorByte1.bits_in_motorByte1.enableAll = 0;	//Enables all motor drivers after startup
    1198:	80 91 2b 04 	lds	r24, 0x042B
    119c:	8f 77       	andi	r24, 0x7F	; 127
    119e:	80 93 2b 04 	sts	0x042B, r24
		i2c_start(I2C1+I2C_WRITE);
    11a2:	80 e4       	ldi	r24, 0x40	; 64
    11a4:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    11ae:	80 91 2f 04 	lds	r24, 0x042F
    11b2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    11b6:	80 91 2b 04 	lds	r24, 0x042B
    11ba:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    11be:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>


		delay_ms(1000);
    11c2:	88 ee       	ldi	r24, 0xE8	; 232
    11c4:	93 e0       	ldi	r25, 0x03	; 3
    11c6:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
    11ca:	8c e5       	ldi	r24, 0x5C	; 92
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
    11d2:	ee 24       	eor	r14, r14
    11d4:	ff 24       	eor	r15, r15
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    11d6:	c7 01       	movw	r24, r14
    11d8:	be 01       	movw	r22, r28
    11da:	64 5f       	subi	r22, 0xF4	; 244
    11dc:	7f 4f       	sbci	r23, 0xFF	; 255
    11de:	0e 94 09 03 	call	0x612	; 0x612 <button_debounce>
    11e2:	18 2f       	mov	r17, r24
			serial_check(); counter++;
    11e4:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <serial_check>
    11e8:	08 94       	sec
    11ea:	e1 1c       	adc	r14, r1
    11ec:	f1 1c       	adc	r15, r1
			delay_ms(1);
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>
		delay_ms(1000);
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    11f6:	11 23       	and	r17, r17
    11f8:	71 f3       	breq	.-36     	; 0x11d6 <main+0x23a>
		buttonTriggered = false;
		counter = 0;
		//clear();


		if(is_digital_input_high(IO_D3))							//Tests if the switch is set to Maintenance Mode
    11fa:	83 e0       	ldi	r24, 0x03	; 3
    11fc:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1200:	88 23       	and	r24, r24
    1202:	09 f4       	brne	.+2      	; 0x1206 <main+0x26a>
    1204:	50 c4       	rjmp	.+2208   	; 0x1aa6 <main+0xb0a>
		{
			serial_print_string("DEBUG");
    1206:	8c e6       	ldi	r24, 0x6C	; 108
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
			delay_ms(1000);
    120e:	88 ee       	ldi	r24, 0xE8	; 232
    1210:	93 e0       	ldi	r25, 0x03	; 3
    1212:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>
			//initialize
			bool printVar = true;
			int submode = -1;

			//clear();
			serial_print_string("INPUT MODE");
    1216:	82 e7       	ldi	r24, 0x72	; 114
    1218:	91 e0       	ldi	r25, 0x01	; 1
    121a:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
    121e:	ee 24       	eor	r14, r14
    1220:	ff 24       	eor	r15, r15
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1222:	c7 01       	movw	r24, r14
    1224:	be 01       	movw	r22, r28
    1226:	64 5f       	subi	r22, 0xF4	; 244
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	0e 94 09 03 	call	0x612	; 0x612 <button_debounce>
    122e:	18 2f       	mov	r17, r24
				counter++;
    1230:	08 94       	sec
    1232:	e1 1c       	adc	r14, r1
    1234:	f1 1c       	adc	r15, r1
				delay_ms(1);
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>

			//clear();
			serial_print_string("INPUT MODE");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
    123e:	11 23       	and	r17, r17
    1240:	81 f3       	breq	.-32     	; 0x1222 <main+0x286>
    1242:	22 24       	eor	r2, r2
    1244:	33 24       	eor	r3, r3
    1246:	99 24       	eor	r9, r9
    1248:	93 94       	inc	r9
    124a:	6f ef       	ldi	r22, 0xFF	; 255
    124c:	7f ef       	ldi	r23, 0xFF	; 255
    124e:	7b 8b       	std	Y+19, r23	; 0x13
    1250:	6a 8b       	std	Y+18, r22	; 0x12
    1252:	66 24       	eor	r6, r6
    1254:	77 24       	eor	r7, r7
    1256:	44 24       	eor	r4, r4
    1258:	55 24       	eor	r5, r5
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    125a:	84 e4       	ldi	r24, 0x44	; 68
    125c:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1266:	85 e4       	ldi	r24, 0x45	; 69
    1268:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    126c:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1270:	80 93 2a 04 	sts	0x042A, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1274:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1278:	80 93 2d 04 	sts	0x042D, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    127c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1280:	c2 01       	movw	r24, r4
    1282:	be 01       	movw	r22, r28
    1284:	64 5f       	subi	r22, 0xF4	; 244
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	0e 94 09 03 	call	0x612	; 0x612 <button_debounce>
    128c:	18 2f       	mov	r17, r24
							Output 			--     starts testing each output individually and ends after testing all outputs
							Motor			--     starts testing each motor individually and ends after testing all motors
							Multi motor		--     starts testing each the fixture motor with each of the brush motors

				*/
				if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != INPUT){
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1294:	88 23       	and	r24, r24
    1296:	c9 f4       	brne	.+50     	; 0x12ca <main+0x32e>
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    129e:	88 23       	and	r24, r24
    12a0:	a1 f4       	brne	.+40     	; 0x12ca <main+0x32e>
    12a2:	8a 89       	ldd	r24, Y+18	; 0x12
    12a4:	9b 89       	ldd	r25, Y+19	; 0x13
    12a6:	89 2b       	or	r24, r25
    12a8:	81 f0       	breq	.+32     	; 0x12ca <main+0x32e>
					state = S0;
					submode = INPUT;
					//clear();
					serial_print_string("INPUTS ");
    12aa:	8d e7       	ldi	r24, 0x7D	; 125
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
					lcd_goto_xy(0,1);
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	9c 8b       	std	Y+20, r25	; 0x14
    12be:	99 24       	eor	r9, r9
    12c0:	93 94       	inc	r9
    12c2:	1b 8a       	std	Y+19, r1	; 0x13
    12c4:	1a 8a       	std	Y+18, r1	; 0x12
    12c6:	66 24       	eor	r6, r6
    12c8:	77 24       	eor	r7, r7
					printVar = true;
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != OUTPUT){
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    12d0:	88 23       	and	r24, r24
    12d2:	e9 f0       	breq	.+58     	; 0x130e <main+0x372>
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    12da:	88 23       	and	r24, r24
    12dc:	c1 f4       	brne	.+48     	; 0x130e <main+0x372>
    12de:	2a 89       	ldd	r18, Y+18	; 0x12
    12e0:	3b 89       	ldd	r19, Y+19	; 0x13
    12e2:	21 30       	cpi	r18, 0x01	; 1
    12e4:	31 05       	cpc	r19, r1
    12e6:	99 f0       	breq	.+38     	; 0x130e <main+0x372>
					state = O0_ON;
					submode = OUTPUT;
					//clear();
					serial_print_string("OUTPUTS");
    12e8:	85 e8       	ldi	r24, 0x85	; 133
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
					lcd_goto_xy(0,1);
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
    12f8:	31 e0       	ldi	r19, 0x01	; 1
    12fa:	3c 8b       	std	Y+20, r19	; 0x14
    12fc:	99 24       	eor	r9, r9
    12fe:	93 94       	inc	r9
    1300:	61 e0       	ldi	r22, 0x01	; 1
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	7b 8b       	std	Y+19, r23	; 0x13
    1306:	6a 8b       	std	Y+18, r22	; 0x12
    1308:	68 e0       	ldi	r22, 0x08	; 8
    130a:	66 2e       	mov	r6, r22
    130c:	71 2c       	mov	r7, r1
					printVar = true;
					switched = true;
				}
				if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MOTOR){
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1314:	88 23       	and	r24, r24
    1316:	09 f5       	brne	.+66     	; 0x135a <main+0x3be>
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    131e:	88 23       	and	r24, r24
    1320:	e1 f0       	breq	.+56     	; 0x135a <main+0x3be>
    1322:	8a 89       	ldd	r24, Y+18	; 0x12
    1324:	9b 89       	ldd	r25, Y+19	; 0x13
    1326:	02 97       	sbiw	r24, 0x02	; 2
    1328:	c1 f0       	breq	.+48     	; 0x135a <main+0x3be>
					state = M1_F;
					submode = MOTOR;
					//clear();
					serial_print_string("MOTORS ");
    132a:	8d e8       	ldi	r24, 0x8D	; 141
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
					lcd_goto_xy(0,1);
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	61 e0       	ldi	r22, 0x01	; 1
    1336:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    133a:	80 91 2f 04 	lds	r24, 0x042F
    133e:	84 60       	ori	r24, 0x04	; 4
    1340:	80 93 2f 04 	sts	0x042F, r24
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	9c 8b       	std	Y+20, r25	; 0x14
    1348:	99 24       	eor	r9, r9
    134a:	93 94       	inc	r9
    134c:	22 e0       	ldi	r18, 0x02	; 2
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3b 8b       	std	Y+19, r19	; 0x13
    1352:	2a 8b       	std	Y+18, r18	; 0x12
    1354:	50 e2       	ldi	r21, 0x20	; 32
    1356:	65 2e       	mov	r6, r21
    1358:	71 2c       	mov	r7, r1
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MULTI){
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1360:	88 23       	and	r24, r24
    1362:	31 f1       	breq	.+76     	; 0x13b0 <main+0x414>
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    136a:	88 23       	and	r24, r24
    136c:	09 f1       	breq	.+66     	; 0x13b0 <main+0x414>
    136e:	6a 89       	ldd	r22, Y+18	; 0x12
    1370:	7b 89       	ldd	r23, Y+19	; 0x13
    1372:	63 30       	cpi	r22, 0x03	; 3
    1374:	71 05       	cpc	r23, r1
    1376:	e1 f0       	breq	.+56     	; 0x13b0 <main+0x414>
					state = M2_AND_M3;
					submode = MULTI;
					//clear();
					serial_print_string("MULTI MOTOR");
    1378:	85 e9       	ldi	r24, 0x95	; 149
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
					lcd_goto_xy(0,1);
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	61 e0       	ldi	r22, 0x01	; 1
    1384:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1388:	80 91 2f 04 	lds	r24, 0x042F
    138c:	80 62       	ori	r24, 0x20	; 32
    138e:	80 93 2f 04 	sts	0x042F, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    1392:	80 91 2b 04 	lds	r24, 0x042B
    1396:	81 60       	ori	r24, 0x01	; 1
    1398:	80 93 2b 04 	sts	0x042B, r24
    139c:	99 24       	eor	r9, r9
    139e:	93 94       	inc	r9
    13a0:	83 e0       	ldi	r24, 0x03	; 3
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	9b 8b       	std	Y+19, r25	; 0x13
    13a6:	8a 8b       	std	Y+18, r24	; 0x12
    13a8:	4a e2       	ldi	r20, 0x2A	; 42
    13aa:	64 2e       	mov	r6, r20
    13ac:	71 2c       	mov	r7, r1
    13ae:	03 c0       	rjmp	.+6      	; 0x13b6 <main+0x41a>
					switched = true;
				}
				if(switched){
    13b0:	9c 89       	ldd	r25, Y+20	; 0x14
    13b2:	99 23       	and	r25, r25
    13b4:	c9 f0       	breq	.+50     	; 0x13e8 <main+0x44c>
					plateLoadMotor = 0;
    13b6:	1b 82       	std	Y+3, r1	; 0x03
    13b8:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    13ba:	1d 82       	std	Y+5, r1	; 0x05
    13bc:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    13be:	1f 82       	std	Y+7, r1	; 0x07
    13c0:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    13c2:	19 86       	std	Y+9, r1	; 0x09
    13c4:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    13c6:	1b 86       	std	Y+11, r1	; 0x0b
    13c8:	1a 86       	std	Y+10, r1	; 0x0a
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
    13ca:	8f ef       	ldi	r24, 0xFF	; 255
    13cc:	80 93 2e 04 	sts	0x042E, r24
					u_outputByte1.outputByte1 = 255;  // reset outputByte1
    13d0:	80 93 2c 04 	sts	0x042C, r24
					if(submode != MOTOR && submode != MULTI){
    13d4:	8a 89       	ldd	r24, Y+18	; 0x12
    13d6:	9b 89       	ldd	r25, Y+19	; 0x13
    13d8:	02 97       	sbiw	r24, 0x02	; 2
    13da:	02 97       	sbiw	r24, 0x02	; 2
    13dc:	20 f0       	brcs	.+8      	; 0x13e6 <main+0x44a>
						u_motorByte0.motorByte0 = 0;	  // reset motorByte0
    13de:	10 92 2f 04 	sts	0x042F, r1
						u_motorByte1.motorByte1 = 0;	  // reset motorByte1
    13e2:	10 92 2b 04 	sts	0x042B, r1
    13e6:	1c 8a       	std	Y+20, r1	; 0x14
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
    13e8:	11 23       	and	r17, r17
    13ea:	09 f4       	brne	.+2      	; 0x13ee <main+0x452>
    13ec:	c8 c0       	rjmp	.+400    	; 0x157e <main+0x5e2>
					if(state <= S7){				//if it's doing the sensors
    13ee:	28 e0       	ldi	r18, 0x08	; 8
    13f0:	62 16       	cp	r6, r18
    13f2:	71 04       	cpc	r7, r1
    13f4:	ac f4       	brge	.+42     	; 0x1420 <main+0x484>
						lastVal = -1;
						lcd_goto_xy(0,1);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	61 e0       	ldi	r22, 0x01	; 1
    13fa:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
						buttonTriggered = false;
						state ++;
    13fe:	08 94       	sec
    1400:	61 1c       	adc	r6, r1
    1402:	71 1c       	adc	r7, r1
						counterRef = counter;
						printVar = true;
						if(state == S7 + 1){		//accounts for end of maintenance mode after sensors
    1404:	38 e0       	ldi	r19, 0x08	; 8
    1406:	63 16       	cp	r6, r19
    1408:	71 04       	cpc	r7, r1
    140a:	11 f4       	brne	.+4      	; 0x1410 <main+0x474>
    140c:	0c 94 15 13 	jmp	0x262a	; 0x262a <main+0x168e>
    1410:	12 01       	movw	r2, r4
    1412:	99 24       	eor	r9, r9
    1414:	93 94       	inc	r9
    1416:	6f ef       	ldi	r22, 0xFF	; 255
    1418:	7f ef       	ldi	r23, 0xFF	; 255
    141a:	78 8f       	std	Y+24, r23	; 0x18
    141c:	6f 8b       	std	Y+23, r22	; 0x17
    141e:	af c0       	rjmp	.+350    	; 0x157e <main+0x5e2>
							//clear();
							state = DONEM;
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
    1420:	70 e2       	ldi	r23, 0x20	; 32
    1422:	67 16       	cp	r6, r23
    1424:	71 04       	cpc	r7, r1
    1426:	cc f4       	brge	.+50     	; 0x145a <main+0x4be>
						if(state % 2 == 0){			//current state is an 'on' state
    1428:	60 fc       	sbrc	r6, 0
    142a:	09 c0       	rjmp	.+18     	; 0x143e <main+0x4a2>
							lcd_goto_xy(13,1);
    142c:	8d e0       	ldi	r24, 0x0D	; 13
    142e:	61 e0       	ldi	r22, 0x01	; 1
    1430:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
							serial_print_string("OFF");
    1434:	81 ea       	ldi	r24, 0xA1	; 161
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
    143c:	04 c0       	rjmp	.+8      	; 0x1446 <main+0x4aa>
						}
						else{						//current state is an 'off' state
							lcd_goto_xy(0,1);
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	61 e0       	ldi	r22, 0x01	; 1
    1442:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
						}
						buttonTriggered = false;
						state ++;
    1446:	08 94       	sec
    1448:	61 1c       	adc	r6, r1
    144a:	71 1c       	adc	r7, r1
						counterRef = counter;
						printVar = true;
						if(state == O11_OFF + 1){	//accounts for end of maintenance mode after outputs
    144c:	80 e2       	ldi	r24, 0x20	; 32
    144e:	68 16       	cp	r6, r24
    1450:	71 04       	cpc	r7, r1
    1452:	09 f0       	breq	.+2      	; 0x1456 <main+0x4ba>
    1454:	91 c0       	rjmp	.+290    	; 0x1578 <main+0x5dc>
    1456:	0c 94 19 13 	jmp	0x2632	; 0x2632 <main+0x1696>
    145a:	83 01       	movw	r16, r6
    145c:	0f 5f       	subi	r16, 0xFF	; 255
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
							//clear();
							state = DONEM;
						}
					}
					else if(state <= M5_B){							//if it's doing the motors
    1460:	9a e2       	ldi	r25, 0x2A	; 42
    1462:	69 16       	cp	r6, r25
    1464:	71 04       	cpc	r7, r1
    1466:	0c f0       	brlt	.+2      	; 0x146a <main+0x4ce>
    1468:	5e c0       	rjmp	.+188    	; 0x1526 <main+0x58a>
						buttonTriggered = false;
						state ++;
						counterRef = counter;
						printVar = true;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
    146a:	60 fc       	sbrc	r6, 0
    146c:	09 c0       	rjmp	.+18     	; 0x1480 <main+0x4e4>
							lcd_goto_xy(11,1);
    146e:	8b e0       	ldi	r24, 0x0B	; 11
    1470:	61 e0       	ldi	r22, 0x01	; 1
    1472:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
							serial_print_string("BACK ");
    1476:	85 ea       	ldi	r24, 0xA5	; 165
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
    147e:	13 c0       	rjmp	.+38     	; 0x14a6 <main+0x50a>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
    1480:	06 32       	cpi	r16, 0x26	; 38
    1482:	11 05       	cpc	r17, r1
    1484:	79 f1       	breq	.+94     	; 0x14e4 <main+0x548>
    1486:	07 32       	cpi	r16, 0x27	; 39
    1488:	11 05       	cpc	r17, r1
    148a:	3c f4       	brge	.+14     	; 0x149a <main+0x4fe>
    148c:	02 32       	cpi	r16, 0x22	; 34
    148e:	11 05       	cpc	r17, r1
    1490:	69 f0       	breq	.+26     	; 0x14ac <main+0x510>
    1492:	04 32       	cpi	r16, 0x24	; 36
    1494:	11 05       	cpc	r17, r1
    1496:	39 f4       	brne	.+14     	; 0x14a6 <main+0x50a>
    1498:	15 c0       	rjmp	.+42     	; 0x14c4 <main+0x528>
    149a:	08 32       	cpi	r16, 0x28	; 40
    149c:	11 05       	cpc	r17, r1
    149e:	71 f1       	breq	.+92     	; 0x14fc <main+0x560>
    14a0:	0a 32       	cpi	r16, 0x2A	; 42
    14a2:	11 05       	cpc	r17, r1
    14a4:	b9 f1       	breq	.+110    	; 0x1514 <main+0x578>
    14a6:	12 01       	movw	r2, r4
    14a8:	38 01       	movw	r6, r16
    14aa:	67 c0       	rjmp	.+206    	; 0x157a <main+0x5de>
								case M1_B + 1:
									lcd_goto_xy(0,1);
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	61 e0       	ldi	r22, 0x01	; 1
    14b0:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    14b4:	80 91 2f 04 	lds	r24, 0x042F
    14b8:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    14ba:	80 62       	ori	r24, 0x20	; 32
    14bc:	80 93 2f 04 	sts	0x042F, r24
    14c0:	12 01       	movw	r2, r4
    14c2:	33 c2       	rjmp	.+1126   	; 0x192a <main+0x98e>
									break;
								case M2_B + 1:
									lcd_goto_xy(0,1);
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	61 e0       	ldi	r22, 0x01	; 1
    14c8:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    14cc:	80 91 2f 04 	lds	r24, 0x042F
    14d0:	8f 7d       	andi	r24, 0xDF	; 223
    14d2:	80 93 2f 04 	sts	0x042F, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    14d6:	80 91 2b 04 	lds	r24, 0x042B
    14da:	81 60       	ori	r24, 0x01	; 1
    14dc:	80 93 2b 04 	sts	0x042B, r24
    14e0:	12 01       	movw	r2, r4
    14e2:	43 c2       	rjmp	.+1158   	; 0x196a <main+0x9ce>
									break;
								case M3_B + 1:
									lcd_goto_xy(0,1);
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	61 e0       	ldi	r22, 0x01	; 1
    14e8:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    14ec:	80 91 2b 04 	lds	r24, 0x042B
    14f0:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    14f2:	88 60       	ori	r24, 0x08	; 8
    14f4:	80 93 2b 04 	sts	0x042B, r24
    14f8:	12 01       	movw	r2, r4
    14fa:	57 c2       	rjmp	.+1198   	; 0x19aa <main+0xa0e>
									break;
								case M4_B + 1:
									lcd_goto_xy(0,1);
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	61 e0       	ldi	r22, 0x01	; 1
    1500:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    1504:	80 91 2b 04 	lds	r24, 0x042B
    1508:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    150a:	80 64       	ori	r24, 0x40	; 64
    150c:	80 93 2b 04 	sts	0x042B, r24
    1510:	12 01       	movw	r2, r4
    1512:	6b c2       	rjmp	.+1238   	; 0x19ea <main+0xa4e>
									break;
								case M5_B + 1:
									//clear();
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    1514:	80 91 2b 04 	lds	r24, 0x042B
    1518:	8f 7b       	andi	r24, 0xBF	; 191
    151a:	80 93 2b 04 	sts	0x042B, r24
									state = DONEM;
									paperTowelMotor = 0;
    151e:	1b 86       	std	Y+11, r1	; 0x0b
    1520:	1a 86       	std	Y+10, r1	; 0x0a
    1522:	0c 94 19 13 	jmp	0x2632	; 0x2632 <main+0x1696>
							}
						}
					}
					else{
						buttonTriggered = false;
						state ++;
    1526:	38 01       	movw	r6, r16
						counterRef = counter;
						printVar = true;
						switch(state){
    1528:	0b 32       	cpi	r16, 0x2B	; 43
    152a:	11 05       	cpc	r17, r1
    152c:	21 f0       	breq	.+8      	; 0x1536 <main+0x59a>
    152e:	0c 32       	cpi	r16, 0x2C	; 44
    1530:	11 05       	cpc	r17, r1
    1532:	11 f5       	brne	.+68     	; 0x1578 <main+0x5dc>
    1534:	11 c0       	rjmp	.+34     	; 0x1558 <main+0x5bc>
							case M2_AND_M3 + 1:
								lcd_goto_xy(0,1);
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	61 e0       	ldi	r22, 0x01	; 1
    153a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
								u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    153e:	90 91 2b 04 	lds	r25, 0x042B
    1542:	9e 7f       	andi	r25, 0xFE	; 254
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1544:	80 91 2f 04 	lds	r24, 0x042F
    1548:	80 62       	ori	r24, 0x20	; 32
    154a:	80 93 2f 04 	sts	0x042F, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    154e:	98 60       	ori	r25, 0x08	; 8
    1550:	90 93 2b 04 	sts	0x042B, r25
    1554:	12 01       	movw	r2, r4
    1556:	76 c2       	rjmp	.+1260   	; 0x1a44 <main+0xaa8>
								break;
							case M2_AND_M4 + 1:
								//clear();
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1558:	80 91 2f 04 	lds	r24, 0x042F
    155c:	8f 7d       	andi	r24, 0xDF	; 223
    155e:	80 93 2f 04 	sts	0x042F, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    1562:	80 91 2b 04 	lds	r24, 0x042B
    1566:	87 7f       	andi	r24, 0xF7	; 247
    1568:	80 93 2b 04 	sts	0x042B, r24
								state = DONEM;
								fixtureMotor = 0;
    156c:	1d 82       	std	Y+5, r1	; 0x05
    156e:	1c 82       	std	Y+4, r1	; 0x04
								brush2Motor = 0;
    1570:	19 86       	std	Y+9, r1	; 0x09
    1572:	18 86       	std	Y+8, r1	; 0x08
    1574:	0c 94 19 13 	jmp	0x2632	; 0x2632 <main+0x1696>
    1578:	12 01       	movw	r2, r4
    157a:	99 24       	eor	r9, r9
    157c:	93 94       	inc	r9
						}
					}
				}

				//state actions
				switch (state) {
    157e:	f3 01       	movw	r30, r6
    1580:	ec 32       	cpi	r30, 0x2C	; 44
    1582:	f1 05       	cpc	r31, r1
    1584:	08 f0       	brcs	.+2      	; 0x1588 <main+0x5ec>
    1586:	70 c2       	rjmp	.+1248   	; 0x1a68 <main+0xacc>
    1588:	ea 5b       	subi	r30, 0xBA	; 186
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	ee 0f       	add	r30, r30
    158e:	ff 1f       	adc	r31, r31
    1590:	05 90       	lpm	r0, Z+
    1592:	f4 91       	lpm	r31, Z+
    1594:	e0 2d       	mov	r30, r0
    1596:	09 94       	ijmp
					case S0:
						if(printVar){
    1598:	99 20       	and	r9, r9
    159a:	21 f0       	breq	.+8      	; 0x15a4 <main+0x608>
							serial_print_string("SENSOR 0");
    159c:	8b ea       	ldi	r24, 0xAB	; 171
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    15a4:	8f e0       	ldi	r24, 0x0F	; 15
    15a6:	61 e0       	ldi	r22, 0x01	; 1
    15a8:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.plate){
    15ac:	80 91 2a 04 	lds	r24, 0x042A
    15b0:	81 70       	andi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	6f 89       	ldd	r22, Y+23	; 0x17
    15b6:	78 8d       	ldd	r23, Y+24	; 0x18
    15b8:	68 17       	cp	r22, r24
    15ba:	79 07       	cpc	r23, r25
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <main+0x624>
    15be:	53 c2       	rjmp	.+1190   	; 0x1a66 <main+0xaca>
							serial_print_int(u_inputByte0.bits_in_inputByte0.plate);
    15c0:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.plate;
    15c4:	80 91 2a 04 	lds	r24, 0x042A
    15c8:	b0 c0       	rjmp	.+352    	; 0x172a <main+0x78e>
						}							
						break;
					case S1:
						if(printVar){
    15ca:	99 20       	and	r9, r9
    15cc:	21 f0       	breq	.+8      	; 0x15d6 <main+0x63a>
							serial_print_string("SENSOR 1");
    15ce:	84 eb       	ldi	r24, 0xB4	; 180
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    15d6:	8f e0       	ldi	r24, 0x0F	; 15
    15d8:	61 e0       	ldi	r22, 0x01	; 1
    15da:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureLift){
    15de:	80 91 2a 04 	lds	r24, 0x042A
    15e2:	86 95       	lsr	r24
    15e4:	86 95       	lsr	r24
    15e6:	81 70       	andi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	6f 89       	ldd	r22, Y+23	; 0x17
    15ec:	78 8d       	ldd	r23, Y+24	; 0x18
    15ee:	68 17       	cp	r22, r24
    15f0:	79 07       	cpc	r23, r25
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <main+0x65a>
    15f4:	38 c2       	rjmp	.+1136   	; 0x1a66 <main+0xaca>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureLift);
    15f6:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureLift;
    15fa:	80 91 2a 04 	lds	r24, 0x042A
    15fe:	86 95       	lsr	r24
    1600:	86 95       	lsr	r24
    1602:	93 c0       	rjmp	.+294    	; 0x172a <main+0x78e>
						}							
						break;
					case S2:
						if(printVar){
    1604:	99 20       	and	r9, r9
    1606:	21 f0       	breq	.+8      	; 0x1610 <main+0x674>
							serial_print_string("SENSOR 2");
    1608:	8d eb       	ldi	r24, 0xBD	; 189
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1610:	8f e0       	ldi	r24, 0x0F	; 15
    1612:	61 e0       	ldi	r22, 0x01	; 1
    1614:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureHome){
    1618:	80 91 2a 04 	lds	r24, 0x042A
    161c:	86 95       	lsr	r24
    161e:	81 70       	andi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	6f 89       	ldd	r22, Y+23	; 0x17
    1624:	78 8d       	ldd	r23, Y+24	; 0x18
    1626:	68 17       	cp	r22, r24
    1628:	79 07       	cpc	r23, r25
    162a:	09 f4       	brne	.+2      	; 0x162e <main+0x692>
    162c:	1c c2       	rjmp	.+1080   	; 0x1a66 <main+0xaca>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureHome);
    162e:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureHome;
    1632:	80 91 2a 04 	lds	r24, 0x042A
    1636:	86 95       	lsr	r24
    1638:	78 c0       	rjmp	.+240    	; 0x172a <main+0x78e>
						}							
						break;
					case S3:
						if(printVar){
    163a:	99 20       	and	r9, r9
    163c:	21 f0       	breq	.+8      	; 0x1646 <main+0x6aa>
							serial_print_string("SENSOR 3");
    163e:	86 ec       	ldi	r24, 0xC6	; 198
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1646:	8f e0       	ldi	r24, 0x0F	; 15
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixturePlate){
    164e:	80 91 2a 04 	lds	r24, 0x042A
    1652:	86 95       	lsr	r24
    1654:	86 95       	lsr	r24
    1656:	86 95       	lsr	r24
    1658:	81 70       	andi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	6f 89       	ldd	r22, Y+23	; 0x17
    165e:	78 8d       	ldd	r23, Y+24	; 0x18
    1660:	68 17       	cp	r22, r24
    1662:	79 07       	cpc	r23, r25
    1664:	09 f4       	brne	.+2      	; 0x1668 <main+0x6cc>
    1666:	ff c1       	rjmp	.+1022   	; 0x1a66 <main+0xaca>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixturePlate);
    1668:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixturePlate;
    166c:	80 91 2a 04 	lds	r24, 0x042A
    1670:	86 95       	lsr	r24
    1672:	86 95       	lsr	r24
    1674:	86 95       	lsr	r24
    1676:	59 c0       	rjmp	.+178    	; 0x172a <main+0x78e>
						}							
						break;
					case S4:
						if(printVar){
    1678:	99 20       	and	r9, r9
    167a:	21 f0       	breq	.+8      	; 0x1684 <main+0x6e8>
							serial_print_string("SENSOR 4");
    167c:	8f ec       	ldi	r24, 0xCF	; 207
    167e:	91 e0       	ldi	r25, 0x01	; 1
    1680:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1684:	8f e0       	ldi	r24, 0x0F	; 15
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush1){
    168c:	80 91 2a 04 	lds	r24, 0x042A
    1690:	82 95       	swap	r24
    1692:	81 70       	andi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	6f 89       	ldd	r22, Y+23	; 0x17
    1698:	78 8d       	ldd	r23, Y+24	; 0x18
    169a:	68 17       	cp	r22, r24
    169c:	79 07       	cpc	r23, r25
    169e:	09 f4       	brne	.+2      	; 0x16a2 <main+0x706>
    16a0:	e2 c1       	rjmp	.+964    	; 0x1a66 <main+0xaca>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
    16a2:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush1;
    16a6:	80 91 2a 04 	lds	r24, 0x042A
    16aa:	82 95       	swap	r24
    16ac:	8f 70       	andi	r24, 0x0F	; 15
    16ae:	3d c0       	rjmp	.+122    	; 0x172a <main+0x78e>
						}							
						break;
					case S5:
						if(printVar){
    16b0:	99 20       	and	r9, r9
    16b2:	21 f0       	breq	.+8      	; 0x16bc <main+0x720>
							serial_print_string("SENSOR 5");
    16b4:	88 ed       	ldi	r24, 0xD8	; 216
    16b6:	91 e0       	ldi	r25, 0x01	; 1
    16b8:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    16bc:	8f e0       	ldi	r24, 0x0F	; 15
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush2){
    16c4:	80 91 2a 04 	lds	r24, 0x042A
    16c8:	82 95       	swap	r24
    16ca:	86 95       	lsr	r24
    16cc:	81 70       	andi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	6f 89       	ldd	r22, Y+23	; 0x17
    16d2:	78 8d       	ldd	r23, Y+24	; 0x18
    16d4:	68 17       	cp	r22, r24
    16d6:	79 07       	cpc	r23, r25
    16d8:	09 f4       	brne	.+2      	; 0x16dc <main+0x740>
    16da:	c5 c1       	rjmp	.+906    	; 0x1a66 <main+0xaca>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
    16dc:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush2;
    16e0:	80 91 2a 04 	lds	r24, 0x042A
    16e4:	82 95       	swap	r24
    16e6:	86 95       	lsr	r24
    16e8:	87 70       	andi	r24, 0x07	; 7
    16ea:	1f c0       	rjmp	.+62     	; 0x172a <main+0x78e>
						}							
						break;
					case S6:
						if(printVar){
    16ec:	99 20       	and	r9, r9
    16ee:	21 f0       	breq	.+8      	; 0x16f8 <main+0x75c>
							serial_print_string("SENSOR 6");
    16f0:	81 ee       	ldi	r24, 0xE1	; 225
    16f2:	91 e0       	ldi	r25, 0x01	; 1
    16f4:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    16f8:	8f e0       	ldi	r24, 0x0F	; 15
    16fa:	61 e0       	ldi	r22, 0x01	; 1
    16fc:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry1){
    1700:	80 91 2a 04 	lds	r24, 0x042A
    1704:	82 95       	swap	r24
    1706:	86 95       	lsr	r24
    1708:	86 95       	lsr	r24
    170a:	81 70       	andi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	6f 89       	ldd	r22, Y+23	; 0x17
    1710:	78 8d       	ldd	r23, Y+24	; 0x18
    1712:	68 17       	cp	r22, r24
    1714:	79 07       	cpc	r23, r25
    1716:	09 f4       	brne	.+2      	; 0x171a <main+0x77e>
    1718:	a6 c1       	rjmp	.+844    	; 0x1a66 <main+0xaca>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry1);
    171a:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry1;
    171e:	80 91 2a 04 	lds	r24, 0x042A
    1722:	82 95       	swap	r24
    1724:	86 95       	lsr	r24
    1726:	86 95       	lsr	r24
    1728:	83 70       	andi	r24, 0x03	; 3
    172a:	81 70       	andi	r24, 0x01	; 1
    172c:	1d c0       	rjmp	.+58     	; 0x1768 <main+0x7cc>
						}							
						break;
					case S7:
						if(printVar){
    172e:	99 20       	and	r9, r9
    1730:	21 f0       	breq	.+8      	; 0x173a <main+0x79e>
							serial_print_string("SENSOR 7");
    1732:	8a ee       	ldi	r24, 0xEA	; 234
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    173a:	8f e0       	ldi	r24, 0x0F	; 15
    173c:	61 e0       	ldi	r22, 0x01	; 1
    173e:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry2){
    1742:	80 91 2a 04 	lds	r24, 0x042A
    1746:	88 1f       	adc	r24, r24
    1748:	88 27       	eor	r24, r24
    174a:	88 1f       	adc	r24, r24
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	6f 89       	ldd	r22, Y+23	; 0x17
    1750:	78 8d       	ldd	r23, Y+24	; 0x18
    1752:	68 17       	cp	r22, r24
    1754:	79 07       	cpc	r23, r25
    1756:	09 f4       	brne	.+2      	; 0x175a <main+0x7be>
    1758:	86 c1       	rjmp	.+780    	; 0x1a66 <main+0xaca>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry2);
    175a:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry2;
    175e:	80 91 2a 04 	lds	r24, 0x042A
    1762:	88 1f       	adc	r24, r24
    1764:	88 27       	eor	r24, r24
    1766:	88 1f       	adc	r24, r24
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	38 8f       	std	Y+24, r19	; 0x18
    176e:	2f 8b       	std	Y+23, r18	; 0x17
    1770:	7a c1       	rjmp	.+756    	; 0x1a66 <main+0xaca>
						}							
						break;
					case O0_ON:
						if(printVar){
    1772:	99 20       	and	r9, r9
    1774:	21 f0       	breq	.+8      	; 0x177e <main+0x7e2>
							serial_print_string("AC POWER     ON ");
    1776:	83 ef       	ldi	r24, 0xF3	; 243
    1778:	91 e0       	ldi	r25, 0x01	; 1
    177a:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
    177e:	80 91 2e 04 	lds	r24, 0x042E
    1782:	8e 7f       	andi	r24, 0xFE	; 254
    1784:	0d c0       	rjmp	.+26     	; 0x17a0 <main+0x804>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
    1786:	80 91 2e 04 	lds	r24, 0x042E
    178a:	81 60       	ori	r24, 0x01	; 1
    178c:	6c c0       	rjmp	.+216    	; 0x1866 <main+0x8ca>
						break;
					case O1_ON:
						if(printVar){
    178e:	99 20       	and	r9, r9
    1790:	21 f0       	breq	.+8      	; 0x179a <main+0x7fe>
							serial_print_string("BLOWER       ON  ");
    1792:	84 e0       	ldi	r24, 0x04	; 4
    1794:	92 e0       	ldi	r25, 0x02	; 2
    1796:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    179a:	80 91 2e 04 	lds	r24, 0x042E
    179e:	8d 7f       	andi	r24, 0xFD	; 253
    17a0:	80 93 2e 04 	sts	0x042E, r24
    17a4:	60 c1       	rjmp	.+704    	; 0x1a66 <main+0xaca>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    17a6:	80 91 2e 04 	lds	r24, 0x042E
    17aa:	82 60       	ori	r24, 0x02	; 2
    17ac:	5c c0       	rjmp	.+184    	; 0x1866 <main+0x8ca>
						break;
					case O2_ON:
						if(printVar){
    17ae:	99 20       	and	r9, r9
    17b0:	21 f0       	breq	.+8      	; 0x17ba <main+0x81e>
							serial_print_string("PLATE STOP   ON ");
    17b2:	86 e1       	ldi	r24, 0x16	; 22
    17b4:	92 e0       	ldi	r25, 0x02	; 2
    17b6:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
    17ba:	80 91 2e 04 	lds	r24, 0x042E
    17be:	8b 7f       	andi	r24, 0xFB	; 251
    17c0:	ef cf       	rjmp	.-34     	; 0x17a0 <main+0x804>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
    17c2:	80 91 2e 04 	lds	r24, 0x042E
    17c6:	84 60       	ori	r24, 0x04	; 4
    17c8:	4e c0       	rjmp	.+156    	; 0x1866 <main+0x8ca>
						break;
					case O3_ON:
						if(printVar){
    17ca:	99 20       	and	r9, r9
    17cc:	21 f0       	breq	.+8      	; 0x17d6 <main+0x83a>
							serial_print_string("PLATE RAISE  ON ");
    17ce:	87 e2       	ldi	r24, 0x27	; 39
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    17d6:	80 91 2e 04 	lds	r24, 0x042E
    17da:	87 7f       	andi	r24, 0xF7	; 247
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    17dc:	80 61       	ori	r24, 0x10	; 16
    17de:	e0 cf       	rjmp	.-64     	; 0x17a0 <main+0x804>
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    17e0:	80 91 2e 04 	lds	r24, 0x042E
    17e4:	88 60       	ori	r24, 0x08	; 8
    17e6:	3f c0       	rjmp	.+126    	; 0x1866 <main+0x8ca>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(printVar){
    17e8:	99 20       	and	r9, r9
    17ea:	21 f0       	breq	.+8      	; 0x17f4 <main+0x858>
							serial_print_string("PLATE LOWER  ON ");
    17ec:	88 e3       	ldi	r24, 0x38	; 56
    17ee:	92 e0       	ldi	r25, 0x02	; 2
    17f0:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    17f4:	80 91 2e 04 	lds	r24, 0x042E
    17f8:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    17fa:	8f 7e       	andi	r24, 0xEF	; 239
    17fc:	d1 cf       	rjmp	.-94     	; 0x17a0 <main+0x804>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    17fe:	80 91 2e 04 	lds	r24, 0x042E
    1802:	80 61       	ori	r24, 0x10	; 16
    1804:	30 c0       	rjmp	.+96     	; 0x1866 <main+0x8ca>
						break;
					case O5_ON:
						if(printVar){
    1806:	99 20       	and	r9, r9
    1808:	21 f0       	breq	.+8      	; 0x1812 <main+0x876>
							serial_print_string("BRUSH1 RAISE ON ");
    180a:	89 e4       	ldi	r24, 0x49	; 73
    180c:	92 e0       	ldi	r25, 0x02	; 2
    180e:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    1812:	80 91 2e 04 	lds	r24, 0x042E
    1816:	8f 7d       	andi	r24, 0xDF	; 223
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1818:	80 64       	ori	r24, 0x40	; 64
    181a:	c2 cf       	rjmp	.-124    	; 0x17a0 <main+0x804>
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    181c:	80 91 2e 04 	lds	r24, 0x042E
    1820:	80 62       	ori	r24, 0x20	; 32
    1822:	21 c0       	rjmp	.+66     	; 0x1866 <main+0x8ca>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(printVar){
    1824:	99 20       	and	r9, r9
    1826:	21 f0       	breq	.+8      	; 0x1830 <main+0x894>
							serial_print_string("BRUSH1 LOWER ON ");
    1828:	8a e5       	ldi	r24, 0x5A	; 90
    182a:	92 e0       	ldi	r25, 0x02	; 2
    182c:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1830:	80 91 2e 04 	lds	r24, 0x042E
    1834:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1836:	80 62       	ori	r24, 0x20	; 32
    1838:	b3 cf       	rjmp	.-154    	; 0x17a0 <main+0x804>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    183a:	80 91 2e 04 	lds	r24, 0x042E
    183e:	80 64       	ori	r24, 0x40	; 64
    1840:	12 c0       	rjmp	.+36     	; 0x1866 <main+0x8ca>
						break;
					case O7_ON:
						if(printVar){
    1842:	99 20       	and	r9, r9
    1844:	21 f0       	breq	.+8      	; 0x184e <main+0x8b2>
							serial_print_string("BRUSH2 RAISE ON ");
    1846:	8b e6       	ldi	r24, 0x6B	; 107
    1848:	92 e0       	ldi	r25, 0x02	; 2
    184a:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    184e:	80 91 2e 04 	lds	r24, 0x042E
    1852:	8f 77       	andi	r24, 0x7F	; 127
    1854:	80 93 2e 04 	sts	0x042E, r24
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1858:	80 91 2c 04 	lds	r24, 0x042C
    185c:	81 60       	ori	r24, 0x01	; 1
    185e:	40 c0       	rjmp	.+128    	; 0x18e0 <main+0x944>
						break;
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1860:	80 91 2e 04 	lds	r24, 0x042E
    1864:	80 68       	ori	r24, 0x80	; 128
    1866:	80 93 2e 04 	sts	0x042E, r24
    186a:	fe c0       	rjmp	.+508    	; 0x1a68 <main+0xacc>
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(printVar){
    186c:	99 20       	and	r9, r9
    186e:	21 f0       	breq	.+8      	; 0x1878 <main+0x8dc>
							serial_print_string("BRUSH2 LOWER ON ");
    1870:	8c e7       	ldi	r24, 0x7C	; 124
    1872:	92 e0       	ldi	r25, 0x02	; 2
    1874:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1878:	80 91 2c 04 	lds	r24, 0x042C
    187c:	8e 7f       	andi	r24, 0xFE	; 254
    187e:	80 93 2c 04 	sts	0x042C, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1882:	80 91 2e 04 	lds	r24, 0x042E
    1886:	80 68       	ori	r24, 0x80	; 128
    1888:	8b cf       	rjmp	.-234    	; 0x17a0 <main+0x804>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    188a:	80 91 2c 04 	lds	r24, 0x042C
    188e:	81 60       	ori	r24, 0x01	; 1
    1890:	2d c0       	rjmp	.+90     	; 0x18ec <main+0x950>
						break;
					case O9_ON:
						if(printVar){
    1892:	99 20       	and	r9, r9
    1894:	21 f0       	breq	.+8      	; 0x189e <main+0x902>
							serial_print_string("PAPER RAISE  ON ");
    1896:	8d e8       	ldi	r24, 0x8D	; 141
    1898:	92 e0       	ldi	r25, 0x02	; 2
    189a:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    189e:	80 91 2c 04 	lds	r24, 0x042C
    18a2:	8d 7f       	andi	r24, 0xFD	; 253
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    18a4:	84 60       	ori	r24, 0x04	; 4
    18a6:	1c c0       	rjmp	.+56     	; 0x18e0 <main+0x944>
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    18a8:	80 91 2c 04 	lds	r24, 0x042C
    18ac:	82 60       	ori	r24, 0x02	; 2
    18ae:	1e c0       	rjmp	.+60     	; 0x18ec <main+0x950>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(printVar){
    18b0:	99 20       	and	r9, r9
    18b2:	21 f0       	breq	.+8      	; 0x18bc <main+0x920>
							serial_print_string("PAPER LOWER  ON ");
    18b4:	8e e9       	ldi	r24, 0x9E	; 158
    18b6:	92 e0       	ldi	r25, 0x02	; 2
    18b8:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
    18bc:	80 91 2c 04 	lds	r24, 0x042C
    18c0:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    18c2:	82 60       	ori	r24, 0x02	; 2
    18c4:	0d c0       	rjmp	.+26     	; 0x18e0 <main+0x944>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    18c6:	80 91 2c 04 	lds	r24, 0x042C
    18ca:	84 60       	ori	r24, 0x04	; 4
    18cc:	0f c0       	rjmp	.+30     	; 0x18ec <main+0x950>
						break;
					case O11_ON:
						if(printVar){
    18ce:	99 20       	and	r9, r9
    18d0:	21 f0       	breq	.+8      	; 0x18da <main+0x93e>
							serial_print_string("AIR KNIFE    ON ");
    18d2:	8f ea       	ldi	r24, 0xAF	; 175
    18d4:	92 e0       	ldi	r25, 0x02	; 2
    18d6:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
    18da:	80 91 2c 04 	lds	r24, 0x042C
    18de:	87 7f       	andi	r24, 0xF7	; 247
    18e0:	80 93 2c 04 	sts	0x042C, r24
    18e4:	c0 c0       	rjmp	.+384    	; 0x1a66 <main+0xaca>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
    18e6:	80 91 2c 04 	lds	r24, 0x042C
    18ea:	88 60       	ori	r24, 0x08	; 8
    18ec:	80 93 2c 04 	sts	0x042C, r24
    18f0:	bb c0       	rjmp	.+374    	; 0x1a68 <main+0xacc>
						break;
					case M1_F:
						if(printVar){
    18f2:	99 20       	and	r9, r9
    18f4:	21 f0       	breq	.+8      	; 0x18fe <main+0x962>
							serial_print_string("LOADING    FRONT");
    18f6:	80 ec       	ldi	r24, 0xC0	; 192
    18f8:	92 e0       	ldi	r25, 0x02	; 2
    18fa:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    18fe:	80 91 2f 04 	lds	r24, 0x042F
    1902:	8d 7f       	andi	r24, 0xFD	; 253
    1904:	80 93 2f 04 	sts	0x042F, r24
						plateLoadMotor =  1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9b 83       	std	Y+3, r25	; 0x03
    190e:	8a 83       	std	Y+2, r24	; 0x02
    1910:	aa c0       	rjmp	.+340    	; 0x1a66 <main+0xaca>
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
    1912:	80 91 2f 04 	lds	r24, 0x042F
    1916:	82 60       	ori	r24, 0x02	; 2
    1918:	80 93 2f 04 	sts	0x042F, r24
						plateLoadMotor =  1;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9b 83       	std	Y+3, r25	; 0x03
    1922:	8a 83       	std	Y+2, r24	; 0x02
    1924:	a1 c0       	rjmp	.+322    	; 0x1a68 <main+0xacc>
						break;
					case M2_F:
						if(printVar){
    1926:	99 20       	and	r9, r9
    1928:	21 f0       	breq	.+8      	; 0x1932 <main+0x996>
							serial_print_string("DRIVE      FRONT");
    192a:	81 ed       	ldi	r24, 0xD1	; 209
    192c:	92 e0       	ldi	r25, 0x02	; 2
    192e:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1932:	80 91 2f 04 	lds	r24, 0x042F
    1936:	8f 7e       	andi	r24, 0xEF	; 239
    1938:	80 93 2f 04 	sts	0x042F, r24
						fixtureMotor =  1;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9d 83       	std	Y+5, r25	; 0x05
    1942:	8c 83       	std	Y+4, r24	; 0x04
						plateLoadMotor = 0;
    1944:	1b 82       	std	Y+3, r1	; 0x03
    1946:	1a 82       	std	Y+2, r1	; 0x02
    1948:	99 24       	eor	r9, r9
    194a:	32 e2       	ldi	r19, 0x22	; 34
    194c:	63 2e       	mov	r6, r19
    194e:	71 2c       	mov	r7, r1
    1950:	8b c0       	rjmp	.+278    	; 0x1a68 <main+0xacc>
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
    1952:	80 91 2f 04 	lds	r24, 0x042F
    1956:	80 61       	ori	r24, 0x10	; 16
    1958:	80 93 2f 04 	sts	0x042F, r24
						fixtureMotor =  1;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	9d 83       	std	Y+5, r25	; 0x05
    1962:	8c 83       	std	Y+4, r24	; 0x04
    1964:	81 c0       	rjmp	.+258    	; 0x1a68 <main+0xacc>
						break;
					case M3_F:
						if(printVar){
    1966:	99 20       	and	r9, r9
    1968:	21 f0       	breq	.+8      	; 0x1972 <main+0x9d6>
							serial_print_string("BRUSH1     FRONT");
    196a:	82 ee       	ldi	r24, 0xE2	; 226
    196c:	92 e0       	ldi	r25, 0x02	; 2
    196e:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
    1972:	80 91 2f 04 	lds	r24, 0x042F
    1976:	8f 77       	andi	r24, 0x7F	; 127
    1978:	80 93 2f 04 	sts	0x042F, r24
						brush1Motor =  1;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	9f 83       	std	Y+7, r25	; 0x07
    1982:	8e 83       	std	Y+6, r24	; 0x06
						fixtureMotor = 0;
    1984:	1d 82       	std	Y+5, r1	; 0x05
    1986:	1c 82       	std	Y+4, r1	; 0x04
    1988:	99 24       	eor	r9, r9
    198a:	24 e2       	ldi	r18, 0x24	; 36
    198c:	62 2e       	mov	r6, r18
    198e:	71 2c       	mov	r7, r1
    1990:	6b c0       	rjmp	.+214    	; 0x1a68 <main+0xacc>
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
    1992:	80 91 2f 04 	lds	r24, 0x042F
    1996:	80 68       	ori	r24, 0x80	; 128
    1998:	80 93 2f 04 	sts	0x042F, r24
						brush1Motor =  1;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	9f 83       	std	Y+7, r25	; 0x07
    19a2:	8e 83       	std	Y+6, r24	; 0x06
    19a4:	61 c0       	rjmp	.+194    	; 0x1a68 <main+0xacc>
						break;
					case M4_F:
						if(printVar){
    19a6:	99 20       	and	r9, r9
    19a8:	21 f0       	breq	.+8      	; 0x19b2 <main+0xa16>
							serial_print_string("BRUSH2     FRONT");
    19aa:	83 ef       	ldi	r24, 0xF3	; 243
    19ac:	92 e0       	ldi	r25, 0x02	; 2
    19ae:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
    19b2:	80 91 2b 04 	lds	r24, 0x042B
    19b6:	8b 7f       	andi	r24, 0xFB	; 251
    19b8:	80 93 2b 04 	sts	0x042B, r24
						brush2Motor =  1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	99 87       	std	Y+9, r25	; 0x09
    19c2:	88 87       	std	Y+8, r24	; 0x08
						brush1Motor = 0;
    19c4:	1f 82       	std	Y+7, r1	; 0x07
    19c6:	1e 82       	std	Y+6, r1	; 0x06
    19c8:	99 24       	eor	r9, r9
    19ca:	96 e2       	ldi	r25, 0x26	; 38
    19cc:	69 2e       	mov	r6, r25
    19ce:	71 2c       	mov	r7, r1
    19d0:	4b c0       	rjmp	.+150    	; 0x1a68 <main+0xacc>
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
    19d2:	80 91 2b 04 	lds	r24, 0x042B
    19d6:	84 60       	ori	r24, 0x04	; 4
    19d8:	80 93 2b 04 	sts	0x042B, r24
						brush2Motor =  1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	99 87       	std	Y+9, r25	; 0x09
    19e2:	88 87       	std	Y+8, r24	; 0x08
    19e4:	41 c0       	rjmp	.+130    	; 0x1a68 <main+0xacc>
						break;
					case M5_F:
						if(printVar){
    19e6:	99 20       	and	r9, r9
    19e8:	21 f0       	breq	.+8      	; 0x19f2 <main+0xa56>
							serial_print_string("PAPER      FRONT");
    19ea:	84 e0       	ldi	r24, 0x04	; 4
    19ec:	93 e0       	ldi	r25, 0x03	; 3
    19ee:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    19f2:	80 91 2b 04 	lds	r24, 0x042B
    19f6:	8f 7d       	andi	r24, 0xDF	; 223
    19f8:	80 93 2b 04 	sts	0x042B, r24
						paperTowelMotor =  1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9b 87       	std	Y+11, r25	; 0x0b
    1a02:	8a 87       	std	Y+10, r24	; 0x0a
						brush2Motor = 0;
    1a04:	19 86       	std	Y+9, r1	; 0x09
    1a06:	18 86       	std	Y+8, r1	; 0x08
    1a08:	99 24       	eor	r9, r9
    1a0a:	88 e2       	ldi	r24, 0x28	; 40
    1a0c:	68 2e       	mov	r6, r24
    1a0e:	71 2c       	mov	r7, r1
    1a10:	2b c0       	rjmp	.+86     	; 0x1a68 <main+0xacc>
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
    1a12:	80 91 2b 04 	lds	r24, 0x042B
    1a16:	80 62       	ori	r24, 0x20	; 32
    1a18:	80 93 2b 04 	sts	0x042B, r24
						paperTowelMotor =  1;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	9b 87       	std	Y+11, r25	; 0x0b
    1a22:	8a 87       	std	Y+10, r24	; 0x0a
    1a24:	21 c0       	rjmp	.+66     	; 0x1a68 <main+0xacc>
						break;
					case M2_AND_M3:
						if(printVar){
    1a26:	99 20       	and	r9, r9
    1a28:	21 f0       	breq	.+8      	; 0x1a32 <main+0xa96>
							serial_print_string("FIXTURE & BRUSH1");
    1a2a:	85 e1       	ldi	r24, 0x15	; 21
    1a2c:	93 e0       	ldi	r25, 0x03	; 3
    1a2e:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9d 83       	std	Y+5, r25	; 0x05
    1a38:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 1;
    1a3a:	9f 83       	std	Y+7, r25	; 0x07
    1a3c:	8e 83       	std	Y+6, r24	; 0x06
    1a3e:	13 c0       	rjmp	.+38     	; 0x1a66 <main+0xaca>
						break;
					case M2_AND_M4:
						if(printVar){
    1a40:	99 20       	and	r9, r9
    1a42:	21 f0       	breq	.+8      	; 0x1a4c <main+0xab0>
							serial_print_string("FIXTURE & BRUSH2");
    1a44:	86 e2       	ldi	r24, 0x26	; 38
    1a46:	93 e0       	ldi	r25, 0x03	; 3
    1a48:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	9d 83       	std	Y+5, r25	; 0x05
    1a52:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 0;
    1a54:	1f 82       	std	Y+7, r1	; 0x07
    1a56:	1e 82       	std	Y+6, r1	; 0x06
						brush2Motor = 1;
    1a58:	99 87       	std	Y+9, r25	; 0x09
    1a5a:	88 87       	std	Y+8, r24	; 0x08
    1a5c:	99 24       	eor	r9, r9
    1a5e:	0b e2       	ldi	r16, 0x2B	; 43
    1a60:	60 2e       	mov	r6, r16
    1a62:	71 2c       	mov	r7, r1
    1a64:	01 c0       	rjmp	.+2      	; 0x1a68 <main+0xacc>
    1a66:	99 24       	eor	r9, r9
						break;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1a68:	2a 81       	ldd	r18, Y+2	; 0x02
    1a6a:	3b 81       	ldd	r19, Y+3	; 0x03
    1a6c:	0c 81       	ldd	r16, Y+4	; 0x04
    1a6e:	1d 81       	ldd	r17, Y+5	; 0x05
    1a70:	ee 80       	ldd	r14, Y+6	; 0x06
    1a72:	ff 80       	ldd	r15, Y+7	; 0x07
    1a74:	c8 84       	ldd	r12, Y+8	; 0x08
    1a76:	d9 84       	ldd	r13, Y+9	; 0x09
    1a78:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a7a:	bb 84       	ldd	r11, Y+11	; 0x0b
    1a7c:	c2 01       	movw	r24, r4
    1a7e:	b1 01       	movw	r22, r2
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	0e 94 2b 06 	call	0xc56	; 0xc56 <motor_and_write>

				serial_check(); counter++;
    1a88:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <serial_check>
				delay_ms(1);
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>
			counter = 0;
			//clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
    1a94:	3c e2       	ldi	r19, 0x2C	; 44
    1a96:	63 16       	cp	r6, r19
    1a98:	71 04       	cpc	r7, r1
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <main+0xb02>
    1a9c:	a6 c5       	rjmp	.+2892   	; 0x25ea <main+0x164e>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1a9e:	08 94       	sec
    1aa0:	41 1c       	adc	r4, r1
    1aa2:	51 1c       	adc	r5, r1
    1aa4:	da cb       	rjmp	.-2124   	; 0x125a <main+0x2be>
		}
		else{										//If switch is set to Run Mode
		
		bool printVar = true;

		serial_print_string("NORMAL");
    1aa6:	87 e3       	ldi	r24, 0x37	; 55
    1aa8:	93 e0       	ldi	r25, 0x03	; 3
    1aaa:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
		delay_ms(1000);
    1aae:	88 ee       	ldi	r24, 0xE8	; 232
    1ab0:	93 e0       	ldi	r25, 0x03	; 3
    1ab2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>
		
		//clear();
		serial_print_string("SELECT CYCLE");
    1ab6:	8e e3       	ldi	r24, 0x3E	; 62
    1ab8:	93 e0       	ldi	r25, 0x03	; 3
    1aba:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
    1abe:	ee 24       	eor	r14, r14
    1ac0:	ff 24       	eor	r15, r15
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1ac2:	c7 01       	movw	r24, r14
    1ac4:	be 01       	movw	r22, r28
    1ac6:	64 5f       	subi	r22, 0xF4	; 244
    1ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aca:	0e 94 09 03 	call	0x612	; 0x612 <button_debounce>
    1ace:	18 2f       	mov	r17, r24
			counter++;
    1ad0:	08 94       	sec
    1ad2:	e1 1c       	adc	r14, r1
    1ad4:	f1 1c       	adc	r15, r1
			delay_ms(1);
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>
		delay_ms(1000);
		
		//clear();
		serial_print_string("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1ade:	11 23       	and	r17, r17
    1ae0:	81 f3       	breq	.-32     	; 0x1ac2 <main+0xb26>
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		//clear();
		serial_print_string("CYCLE:");
    1ae2:	8b e4       	ldi	r24, 0x4B	; 75
    1ae4:	93 e0       	ldi	r25, 0x03	; 3
    1ae6:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>

		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1aea:	80 91 2f 04 	lds	r24, 0x042F
    1aee:	80 62       	ori	r24, 0x20	; 32
    1af0:	80 93 2f 04 	sts	0x042F, r24

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1afa:	88 23       	and	r24, r24
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <main+0xb64>
    1afe:	70 c1       	rjmp	.+736    	; 0x1de0 <main+0xe44>
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1b06:	88 23       	and	r24, r24
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <main+0xb70>
    1b0a:	6a c1       	rjmp	.+724    	; 0x1de0 <main+0xe44>
			lcd_goto_xy(7,0);
    1b0c:	87 e0       	ldi	r24, 0x07	; 7
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
			serial_print_string("FIRST B");
    1b14:	82 e5       	ldi	r24, 0x52	; 82
    1b16:	93 e0       	ldi	r25, 0x03	; 3
    1b18:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	9d 83       	std	Y+5, r25	; 0x05
    1b22:	8c 83       	std	Y+4, r24	; 0x04
    1b24:	80 91 2f 04 	lds	r24, 0x042F
    1b28:	80 62       	ori	r24, 0x20	; 32
    1b2a:	80 93 2f 04 	sts	0x042F, r24
    1b2e:	44 24       	eor	r4, r4
    1b30:	55 24       	eor	r5, r5
    1b32:	19 8a       	std	Y+17, r1	; 0x11
    1b34:	18 8a       	std	Y+16, r1	; 0x10
    1b36:	22 24       	eor	r2, r2
    1b38:	23 94       	inc	r2
    1b3a:	33 24       	eor	r3, r3
    1b3c:	33 94       	inc	r3
    1b3e:	88 24       	eor	r8, r8
    1b40:	99 24       	eor	r9, r9
    1b42:	66 24       	eor	r6, r6
    1b44:	77 24       	eor	r7, r7
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1b46:	84 e4       	ldi	r24, 0x44	; 68
    1b48:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1b52:	85 e4       	ldi	r24, 0x45	; 69
    1b54:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1b58:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1b5c:	80 93 2a 04 	sts	0x042A, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1b60:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1b64:	80 93 2d 04 	sts	0x042D, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1b68:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    1b6c:	81 14       	cp	r8, r1
    1b6e:	91 04       	cpc	r9, r1
    1b70:	b1 f0       	breq	.+44     	; 0x1b9e <main+0xc02>
    1b72:	33 20       	and	r3, r3
    1b74:	a1 f0       	breq	.+40     	; 0x1b9e <main+0xc02>
					lcd_goto_xy(6,1);
    1b76:	86 e0       	ldi	r24, 0x06	; 6
    1b78:	61 e0       	ldi	r22, 0x01	; 1
    1b7a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
					serial_print_string("     ");
    1b7e:	8a e5       	ldi	r24, 0x5A	; 90
    1b80:	93 e0       	ldi	r25, 0x03	; 3
    1b82:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
					lcd_goto_xy(0,1);
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	61 e0       	ldi	r22, 0x01	; 1
    1b8a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
					serial_print_string("STATE ");
    1b8e:	80 e6       	ldi	r24, 0x60	; 96
    1b90:	93 e0       	ldi	r25, 0x03	; 3
    1b92:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
					serial_print_int(state);
    1b96:	c4 01       	movw	r24, r8
    1b98:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
    1b9c:	33 24       	eor	r3, r3
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1b9e:	c3 01       	movw	r24, r6
    1ba0:	be 01       	movw	r22, r28
    1ba2:	64 5f       	subi	r22, 0xF4	; 244
    1ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba6:	0e 94 09 03 	call	0x612	; 0x612 <button_debounce>
    1baa:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1bac:	c4 01       	movw	r24, r8
    1bae:	a3 01       	movw	r20, r6
    1bb0:	92 01       	movw	r18, r4
    1bb2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <init_trans>
    1bb6:	88 23       	and	r24, r24
    1bb8:	31 f0       	breq	.+12     	; 0x1bc6 <main+0xc2a>
					buttonTriggered = false;
					state ++;
    1bba:	08 94       	sec
    1bbc:	81 1c       	adc	r8, r1
    1bbe:	91 1c       	adc	r9, r1
    1bc0:	23 01       	movw	r4, r6
    1bc2:	33 24       	eor	r3, r3
    1bc4:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    1bc6:	c4 01       	movw	r24, r8
    1bc8:	b3 01       	movw	r22, r6
    1bca:	a2 01       	movw	r20, r4
    1bcc:	0e 94 ef 03 	call	0x7de	; 0x7de <firstB_trans>
    1bd0:	88 23       	and	r24, r24
    1bd2:	71 f0       	breq	.+28     	; 0x1bf0 <main+0xc54>
					state ++;
    1bd4:	08 94       	sec
    1bd6:	81 1c       	adc	r8, r1
    1bd8:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    1bda:	6c e0       	ldi	r22, 0x0C	; 12
    1bdc:	86 16       	cp	r8, r22
    1bde:	91 04       	cpc	r9, r1
    1be0:	f1 f1       	breq	.+124    	; 0x1c5e <main+0xcc2>
    1be2:	7f e0       	ldi	r23, 0x0F	; 15
    1be4:	87 16       	cp	r8, r23
    1be6:	91 04       	cpc	r9, r1
    1be8:	d1 f1       	breq	.+116    	; 0x1c5e <main+0xcc2>
    1bea:	23 01       	movw	r4, r6
    1bec:	33 24       	eor	r3, r3
    1bee:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}

				if(state == B1STOP2 && counter - counterRef > pWait){
    1bf0:	80 e1       	ldi	r24, 0x10	; 16
    1bf2:	88 16       	cp	r8, r24
    1bf4:	91 04       	cpc	r9, r1
    1bf6:	71 f4       	brne	.+28     	; 0x1c14 <main+0xc78>
    1bf8:	93 01       	movw	r18, r6
    1bfa:	24 19       	sub	r18, r4
    1bfc:	35 09       	sbc	r19, r5
    1bfe:	80 91 90 03 	lds	r24, 0x0390
    1c02:	90 91 91 03 	lds	r25, 0x0391
    1c06:	82 17       	cp	r24, r18
    1c08:	93 07       	cpc	r25, r19
    1c0a:	5c f5       	brge	.+86     	; 0x1c62 <main+0xcc6>
    1c0c:	23 01       	movw	r4, r6
    1c0e:	33 24       	eor	r3, r3
    1c10:	33 94       	inc	r3
    1c12:	04 c0       	rjmp	.+8      	; 0x1c1c <main+0xc80>
					state = MOVED1;
					counterRef = counter;
					printVar = true;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1c14:	9a e1       	ldi	r25, 0x1A	; 26
    1c16:	89 16       	cp	r8, r25
    1c18:	91 04       	cpc	r9, r1
    1c1a:	19 f5       	brne	.+70     	; 0x1c62 <main+0xcc6>
    1c1c:	a3 01       	movw	r20, r6
    1c1e:	44 19       	sub	r20, r4
    1c20:	55 09       	sbc	r21, r5
    1c22:	20 91 c0 03 	lds	r18, 0x03C0
    1c26:	30 91 c1 03 	lds	r19, 0x03C1
    1c2a:	80 91 a2 03 	lds	r24, 0x03A2
    1c2e:	90 91 a3 03 	lds	r25, 0x03A3
    1c32:	bc 01       	movw	r22, r24
    1c34:	26 9f       	mul	r18, r22
    1c36:	c0 01       	movw	r24, r0
    1c38:	27 9f       	mul	r18, r23
    1c3a:	90 0d       	add	r25, r0
    1c3c:	36 9f       	mul	r19, r22
    1c3e:	90 0d       	add	r25, r0
    1c40:	11 24       	eor	r1, r1
    1c42:	84 17       	cp	r24, r20
    1c44:	95 07       	cpc	r25, r21
    1c46:	3c f4       	brge	.+14     	; 0x1c56 <main+0xcba>
    1c48:	23 01       	movw	r4, r6
    1c4a:	33 24       	eor	r3, r3
    1c4c:	33 94       	inc	r3
    1c4e:	1b e1       	ldi	r17, 0x1B	; 27
    1c50:	81 2e       	mov	r8, r17
    1c52:	91 2c       	mov	r9, r1
    1c54:	06 c0       	rjmp	.+12     	; 0x1c62 <main+0xcc6>
    1c56:	ba e1       	ldi	r27, 0x1A	; 26
    1c58:	8b 2e       	mov	r8, r27
    1c5a:	91 2c       	mov	r9, r1
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <main+0xcc6>
    1c5e:	33 24       	eor	r3, r3
    1c60:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1c62:	c4 01       	movw	r24, r8
    1c64:	b3 01       	movw	r22, r6
    1c66:	a2 01       	movw	r20, r4
    1c68:	28 89       	ldd	r18, Y+16	; 0x10
    1c6a:	39 89       	ldd	r19, Y+17	; 0x11
    1c6c:	0e 94 35 05 	call	0xa6a	; 0xa6a <dry_trans>
    1c70:	88 23       	and	r24, r24
    1c72:	79 f0       	breq	.+30     	; 0x1c92 <main+0xcf6>
					state ++;
    1c74:	08 94       	sec
    1c76:	81 1c       	adc	r8, r1
    1c78:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    1c7a:	7d e1       	ldi	r23, 0x1D	; 29
    1c7c:	87 16       	cp	r8, r23
    1c7e:	91 04       	cpc	r9, r1
    1c80:	29 f4       	brne	.+10     	; 0x1c8c <main+0xcf0>
    1c82:	79 8a       	std	Y+17, r7	; 0x11
    1c84:	68 8a       	std	Y+16, r6	; 0x10
    1c86:	33 24       	eor	r3, r3
    1c88:	33 94       	inc	r3
    1c8a:	0f c0       	rjmp	.+30     	; 0x1caa <main+0xd0e>
    1c8c:	23 01       	movw	r4, r6
    1c8e:	33 24       	eor	r3, r3
    1c90:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    1c92:	86 e2       	ldi	r24, 0x26	; 38
    1c94:	88 16       	cp	r8, r24
    1c96:	91 04       	cpc	r9, r1
    1c98:	41 f4       	brne	.+16     	; 0x1caa <main+0xd0e>
    1c9a:	c3 01       	movw	r24, r6
    1c9c:	84 19       	sub	r24, r4
    1c9e:	95 09       	sbc	r25, r5
    1ca0:	0b 97       	sbiw	r24, 0x0b	; 11
    1ca2:	1c f0       	brlt	.+6      	; 0x1caa <main+0xd0e>
    1ca4:	a7 e2       	ldi	r26, 0x27	; 39
    1ca6:	8a 2e       	mov	r8, r26
    1ca8:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1caa:	c4 01       	movw	r24, r8
    1cac:	b3 01       	movw	r22, r6
    1cae:	ae 01       	movw	r20, r28
    1cb0:	4e 5f       	subi	r20, 0xFE	; 254
    1cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb4:	9e 01       	movw	r18, r28
    1cb6:	2c 5f       	subi	r18, 0xFC	; 252
    1cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cba:	8e 01       	movw	r16, r28
    1cbc:	0a 5f       	subi	r16, 0xFA	; 250
    1cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc0:	f8 e0       	ldi	r31, 0x08	; 8
    1cc2:	ef 2e       	mov	r14, r31
    1cc4:	f1 2c       	mov	r15, r1
    1cc6:	ec 0e       	add	r14, r28
    1cc8:	fd 1e       	adc	r15, r29
    1cca:	ea e0       	ldi	r30, 0x0A	; 10
    1ccc:	ce 2e       	mov	r12, r30
    1cce:	d1 2c       	mov	r13, r1
    1cd0:	cc 0e       	add	r12, r28
    1cd2:	dd 1e       	adc	r13, r29
    1cd4:	5e 01       	movw	r10, r28
    1cd6:	08 94       	sec
    1cd8:	a1 1c       	adc	r10, r1
    1cda:	b1 1c       	adc	r11, r1
    1cdc:	0e 94 03 07 	call	0xe06	; 0xe06 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1ce0:	c4 01       	movw	r24, r8
    1ce2:	b3 01       	movw	r22, r6
    1ce4:	ae 01       	movw	r20, r28
    1ce6:	4e 5f       	subi	r20, 0xFE	; 254
    1ce8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cea:	9e 01       	movw	r18, r28
    1cec:	2c 5f       	subi	r18, 0xFC	; 252
    1cee:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf0:	8e 01       	movw	r16, r28
    1cf2:	0a 5f       	subi	r16, 0xFA	; 250
    1cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf6:	b8 e0       	ldi	r27, 0x08	; 8
    1cf8:	eb 2e       	mov	r14, r27
    1cfa:	f1 2c       	mov	r15, r1
    1cfc:	ec 0e       	add	r14, r28
    1cfe:	fd 1e       	adc	r15, r29
    1d00:	aa e0       	ldi	r26, 0x0A	; 10
    1d02:	ca 2e       	mov	r12, r26
    1d04:	d1 2c       	mov	r13, r1
    1d06:	cc 0e       	add	r12, r28
    1d08:	dd 1e       	adc	r13, r29
    1d0a:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    1d0e:	90 e1       	ldi	r25, 0x10	; 16
    1d10:	89 16       	cp	r8, r25
    1d12:	91 04       	cpc	r9, r1
    1d14:	59 f4       	brne	.+22     	; 0x1d2c <main+0xd90>
					brush1Motor = 0;
    1d16:	1f 82       	std	Y+7, r1	; 0x07
    1d18:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    1d1a:	1d 82       	std	Y+5, r1	; 0x05
    1d1c:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1d1e:	80 91 2e 04 	lds	r24, 0x042E
    1d22:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1d24:	80 62       	ori	r24, 0x20	; 32
    1d26:	80 93 2e 04 	sts	0x042E, r24
    1d2a:	12 c0       	rjmp	.+36     	; 0x1d50 <main+0xdb4>
				}
				if(state == MOVED1){
    1d2c:	2a e1       	ldi	r18, 0x1A	; 26
    1d2e:	82 16       	cp	r8, r18
    1d30:	91 04       	cpc	r9, r1
    1d32:	71 f4       	brne	.+28     	; 0x1d50 <main+0xdb4>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1d34:	80 91 2f 04 	lds	r24, 0x042F
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d38:	61 e0       	ldi	r22, 0x01	; 1
    1d3a:	70 e0       	ldi	r23, 0x00	; 0
    1d3c:	7d 83       	std	Y+5, r23	; 0x05
    1d3e:	6c 83       	std	Y+4, r22	; 0x04
    1d40:	80 63       	ori	r24, 0x30	; 48
    1d42:	80 93 2f 04 	sts	0x042F, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1d46:	80 91 2b 04 	lds	r24, 0x042B
    1d4a:	8e 7f       	andi	r24, 0xFE	; 254
    1d4c:	80 93 2b 04 	sts	0x042B, r24
				}
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1d50:	c4 01       	movw	r24, r8
    1d52:	b3 01       	movw	r22, r6
    1d54:	ae 01       	movw	r20, r28
    1d56:	4e 5f       	subi	r20, 0xFE	; 254
    1d58:	5f 4f       	sbci	r21, 0xFF	; 255
    1d5a:	9e 01       	movw	r18, r28
    1d5c:	2c 5f       	subi	r18, 0xFC	; 252
    1d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d60:	8e 01       	movw	r16, r28
    1d62:	0a 5f       	subi	r16, 0xFA	; 250
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    1d66:	f8 e0       	ldi	r31, 0x08	; 8
    1d68:	ef 2e       	mov	r14, r31
    1d6a:	f1 2c       	mov	r15, r1
    1d6c:	ec 0e       	add	r14, r28
    1d6e:	fd 1e       	adc	r15, r29
    1d70:	ea e0       	ldi	r30, 0x0A	; 10
    1d72:	ce 2e       	mov	r12, r30
    1d74:	d1 2c       	mov	r13, r1
    1d76:	cc 0e       	add	r12, r28
    1d78:	dd 1e       	adc	r13, r29
    1d7a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <dry_action>
				if(state == END){
    1d7e:	76 e2       	ldi	r23, 0x26	; 38
    1d80:	87 16       	cp	r8, r23
    1d82:	91 04       	cpc	r9, r1
    1d84:	71 f4       	brne	.+28     	; 0x1da2 <main+0xe06>
					plateLoadMotor = 0;
    1d86:	1b 82       	std	Y+3, r1	; 0x03
    1d88:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1d8a:	80 91 2f 04 	lds	r24, 0x042F
    1d8e:	8b 7f       	andi	r24, 0xFB	; 251
    1d90:	80 93 2f 04 	sts	0x042F, r24
					if(print35 == 1){
    1d94:	22 20       	and	r2, r2
    1d96:	29 f0       	breq	.+10     	; 0x1da2 <main+0xe06>
						//clear();
						serial_print_string("END OF CYCLE");
    1d98:	87 e6       	ldi	r24, 0x67	; 103
    1d9a:	93 e0       	ldi	r25, 0x03	; 3
    1d9c:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
    1da0:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1da2:	2a 81       	ldd	r18, Y+2	; 0x02
    1da4:	3b 81       	ldd	r19, Y+3	; 0x03
    1da6:	0c 81       	ldd	r16, Y+4	; 0x04
    1da8:	1d 81       	ldd	r17, Y+5	; 0x05
    1daa:	ee 80       	ldd	r14, Y+6	; 0x06
    1dac:	ff 80       	ldd	r15, Y+7	; 0x07
    1dae:	c8 84       	ldd	r12, Y+8	; 0x08
    1db0:	d9 84       	ldd	r13, Y+9	; 0x09
    1db2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1db4:	bb 84       	ldd	r11, Y+11	; 0x0b
    1db6:	c3 01       	movw	r24, r6
    1db8:	b2 01       	movw	r22, r4
    1dba:	48 89       	ldd	r20, Y+16	; 0x10
    1dbc:	59 89       	ldd	r21, Y+17	; 0x11
    1dbe:	0e 94 2b 06 	call	0xc56	; 0xc56 <motor_and_write>

				serial_check(); counter++;
    1dc2:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <serial_check>
				delay_ms(1);
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("FIRST B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1dce:	87 e2       	ldi	r24, 0x27	; 39
    1dd0:	88 16       	cp	r8, r24
    1dd2:	91 04       	cpc	r9, r1
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <main+0xe3c>
    1dd6:	09 c4       	rjmp	.+2066   	; 0x25ea <main+0x164e>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1dd8:	08 94       	sec
    1dda:	61 1c       	adc	r6, r1
    1ddc:	71 1c       	adc	r7, r1
    1dde:	b3 ce       	rjmp	.-666    	; 0x1b46 <main+0xbaa>
				delay_ms(1);
   		 	}
		}


		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1de6:	88 23       	and	r24, r24
    1de8:	09 f4       	brne	.+2      	; 0x1dec <main+0xe50>
    1dea:	29 c1       	rjmp	.+594    	; 0x203e <main+0x10a2>
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1df2:	88 23       	and	r24, r24
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <main+0xe5c>
    1df6:	23 c1       	rjmp	.+582    	; 0x203e <main+0x10a2>
			lcd_goto_xy(7,0);
    1df8:	87 e0       	ldi	r24, 0x07	; 7
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
			serial_print_string("SECOND B");
    1e00:	84 e7       	ldi	r24, 0x74	; 116
    1e02:	93 e0       	ldi	r25, 0x03	; 3
    1e04:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	9d 83       	std	Y+5, r25	; 0x05
    1e0e:	8c 83       	std	Y+4, r24	; 0x04
    1e10:	80 91 2f 04 	lds	r24, 0x042F
    1e14:	80 62       	ori	r24, 0x20	; 32
    1e16:	80 93 2f 04 	sts	0x042F, r24
    1e1a:	44 24       	eor	r4, r4
    1e1c:	55 24       	eor	r5, r5
    1e1e:	1f 86       	std	Y+15, r1	; 0x0f
    1e20:	1e 86       	std	Y+14, r1	; 0x0e
    1e22:	22 24       	eor	r2, r2
    1e24:	23 94       	inc	r2
    1e26:	33 24       	eor	r3, r3
    1e28:	33 94       	inc	r3
    1e2a:	88 24       	eor	r8, r8
    1e2c:	99 24       	eor	r9, r9
    1e2e:	66 24       	eor	r6, r6
    1e30:	77 24       	eor	r7, r7
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1e32:	84 e4       	ldi	r24, 0x44	; 68
    1e34:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1e3e:	85 e4       	ldi	r24, 0x45	; 69
    1e40:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1e44:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1e48:	80 93 2a 04 	sts	0x042A, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1e4c:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1e50:	80 93 2d 04 	sts	0x042D, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1e54:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    1e58:	81 14       	cp	r8, r1
    1e5a:	91 04       	cpc	r9, r1
    1e5c:	b1 f0       	breq	.+44     	; 0x1e8a <main+0xeee>
    1e5e:	33 20       	and	r3, r3
    1e60:	a1 f0       	breq	.+40     	; 0x1e8a <main+0xeee>
					lcd_goto_xy(6,1);
    1e62:	86 e0       	ldi	r24, 0x06	; 6
    1e64:	61 e0       	ldi	r22, 0x01	; 1
    1e66:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
					serial_print_string("     ");
    1e6a:	8a e5       	ldi	r24, 0x5A	; 90
    1e6c:	93 e0       	ldi	r25, 0x03	; 3
    1e6e:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
					lcd_goto_xy(0,1);
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	61 e0       	ldi	r22, 0x01	; 1
    1e76:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
					serial_print_string("STATE ");
    1e7a:	80 e6       	ldi	r24, 0x60	; 96
    1e7c:	93 e0       	ldi	r25, 0x03	; 3
    1e7e:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
					serial_print_int(state);
    1e82:	c4 01       	movw	r24, r8
    1e84:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
    1e88:	33 24       	eor	r3, r3
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1e8a:	c3 01       	movw	r24, r6
    1e8c:	be 01       	movw	r22, r28
    1e8e:	64 5f       	subi	r22, 0xF4	; 244
    1e90:	7f 4f       	sbci	r23, 0xFF	; 255
    1e92:	0e 94 09 03 	call	0x612	; 0x612 <button_debounce>
    1e96:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1e98:	c4 01       	movw	r24, r8
    1e9a:	a3 01       	movw	r20, r6
    1e9c:	92 01       	movw	r18, r4
    1e9e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <init_trans>
    1ea2:	88 23       	and	r24, r24
    1ea4:	31 f0       	breq	.+12     	; 0x1eb2 <main+0xf16>
					buttonTriggered = false;
					state ++;
    1ea6:	08 94       	sec
    1ea8:	81 1c       	adc	r8, r1
    1eaa:	91 1c       	adc	r9, r1
    1eac:	23 01       	movw	r4, r6
    1eae:	33 24       	eor	r3, r3
    1eb0:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == MOVEC1 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0){
    1eb2:	98 e0       	ldi	r25, 0x08	; 8
    1eb4:	89 16       	cp	r8, r25
    1eb6:	91 04       	cpc	r9, r1
    1eb8:	51 f4       	brne	.+20     	; 0x1ece <main+0xf32>
    1eba:	80 91 2a 04 	lds	r24, 0x042A
    1ebe:	84 fd       	sbrc	r24, 4
    1ec0:	06 c0       	rjmp	.+12     	; 0x1ece <main+0xf32>
    1ec2:	23 01       	movw	r4, r6
    1ec4:	33 24       	eor	r3, r3
    1ec6:	33 94       	inc	r3
    1ec8:	b2 e1       	ldi	r27, 0x12	; 18
    1eca:	8b 2e       	mov	r8, r27
    1ecc:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}

				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    1ece:	c4 01       	movw	r24, r8
    1ed0:	b3 01       	movw	r22, r6
    1ed2:	a2 01       	movw	r20, r4
    1ed4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <secondB_trans>
    1ed8:	88 23       	and	r24, r24
    1eda:	31 f0       	breq	.+12     	; 0x1ee8 <main+0xf4c>
					state ++;
    1edc:	08 94       	sec
    1ede:	81 1c       	adc	r8, r1
    1ee0:	91 1c       	adc	r9, r1
    1ee2:	23 01       	movw	r4, r6
    1ee4:	33 24       	eor	r3, r3
    1ee6:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1ee8:	c4 01       	movw	r24, r8
    1eea:	b3 01       	movw	r22, r6
    1eec:	a2 01       	movw	r20, r4
    1eee:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ef0:	3f 85       	ldd	r19, Y+15	; 0x0f
    1ef2:	0e 94 35 05 	call	0xa6a	; 0xa6a <dry_trans>
    1ef6:	88 23       	and	r24, r24
    1ef8:	79 f0       	breq	.+30     	; 0x1f18 <main+0xf7c>
					state ++;
    1efa:	08 94       	sec
    1efc:	81 1c       	adc	r8, r1
    1efe:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    1f00:	2d e1       	ldi	r18, 0x1D	; 29
    1f02:	82 16       	cp	r8, r18
    1f04:	91 04       	cpc	r9, r1
    1f06:	29 f4       	brne	.+10     	; 0x1f12 <main+0xf76>
    1f08:	7f 86       	std	Y+15, r7	; 0x0f
    1f0a:	6e 86       	std	Y+14, r6	; 0x0e
    1f0c:	33 24       	eor	r3, r3
    1f0e:	33 94       	inc	r3
    1f10:	0f c0       	rjmp	.+30     	; 0x1f30 <main+0xf94>
    1f12:	23 01       	movw	r4, r6
    1f14:	33 24       	eor	r3, r3
    1f16:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    1f18:	36 e2       	ldi	r19, 0x26	; 38
    1f1a:	83 16       	cp	r8, r19
    1f1c:	91 04       	cpc	r9, r1
    1f1e:	41 f4       	brne	.+16     	; 0x1f30 <main+0xf94>
    1f20:	c3 01       	movw	r24, r6
    1f22:	84 19       	sub	r24, r4
    1f24:	95 09       	sbc	r25, r5
    1f26:	0b 97       	sbiw	r24, 0x0b	; 11
    1f28:	1c f0       	brlt	.+6      	; 0x1f30 <main+0xf94>
    1f2a:	a7 e2       	ldi	r26, 0x27	; 39
    1f2c:	8a 2e       	mov	r8, r26
    1f2e:	91 2c       	mov	r9, r1
				}


				//state actions
				
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1f30:	c4 01       	movw	r24, r8
    1f32:	b3 01       	movw	r22, r6
    1f34:	ae 01       	movw	r20, r28
    1f36:	4e 5f       	subi	r20, 0xFE	; 254
    1f38:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3a:	9e 01       	movw	r18, r28
    1f3c:	2c 5f       	subi	r18, 0xFC	; 252
    1f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f40:	8e 01       	movw	r16, r28
    1f42:	0a 5f       	subi	r16, 0xFA	; 250
    1f44:	1f 4f       	sbci	r17, 0xFF	; 255
    1f46:	f8 e0       	ldi	r31, 0x08	; 8
    1f48:	ef 2e       	mov	r14, r31
    1f4a:	f1 2c       	mov	r15, r1
    1f4c:	ec 0e       	add	r14, r28
    1f4e:	fd 1e       	adc	r15, r29
    1f50:	ea e0       	ldi	r30, 0x0A	; 10
    1f52:	ce 2e       	mov	r12, r30
    1f54:	d1 2c       	mov	r13, r1
    1f56:	cc 0e       	add	r12, r28
    1f58:	dd 1e       	adc	r13, r29
    1f5a:	5e 01       	movw	r10, r28
    1f5c:	08 94       	sec
    1f5e:	a1 1c       	adc	r10, r1
    1f60:	b1 1c       	adc	r11, r1
    1f62:	0e 94 03 07 	call	0xe06	; 0xe06 <init_action>
				if(state == MOVEC1){
    1f66:	68 e0       	ldi	r22, 0x08	; 8
    1f68:	86 16       	cp	r8, r22
    1f6a:	91 04       	cpc	r9, r1
    1f6c:	49 f4       	brne	.+18     	; 0x1f80 <main+0xfe4>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1f6e:	80 91 2f 04 	lds	r24, 0x042F
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1f72:	21 e0       	ldi	r18, 0x01	; 1
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	3d 83       	std	Y+5, r19	; 0x05
    1f78:	2c 83       	std	Y+4, r18	; 0x04
    1f7a:	80 63       	ori	r24, 0x30	; 48
    1f7c:	80 93 2f 04 	sts	0x042F, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1f80:	c4 01       	movw	r24, r8
    1f82:	b3 01       	movw	r22, r6
    1f84:	ae 01       	movw	r20, r28
    1f86:	4e 5f       	subi	r20, 0xFE	; 254
    1f88:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8a:	9e 01       	movw	r18, r28
    1f8c:	2c 5f       	subi	r18, 0xFC	; 252
    1f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f90:	8e 01       	movw	r16, r28
    1f92:	0a 5f       	subi	r16, 0xFA	; 250
    1f94:	1f 4f       	sbci	r17, 0xFF	; 255
    1f96:	b8 e0       	ldi	r27, 0x08	; 8
    1f98:	eb 2e       	mov	r14, r27
    1f9a:	f1 2c       	mov	r15, r1
    1f9c:	ec 0e       	add	r14, r28
    1f9e:	fd 1e       	adc	r15, r29
    1fa0:	aa e0       	ldi	r26, 0x0A	; 10
    1fa2:	ca 2e       	mov	r12, r26
    1fa4:	d1 2c       	mov	r13, r1
    1fa6:	cc 0e       	add	r12, r28
    1fa8:	dd 1e       	adc	r13, r29
    1faa:	0e 94 cc 01 	call	0x398	; 0x398 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1fae:	c4 01       	movw	r24, r8
    1fb0:	b3 01       	movw	r22, r6
    1fb2:	ae 01       	movw	r20, r28
    1fb4:	4e 5f       	subi	r20, 0xFE	; 254
    1fb6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb8:	9e 01       	movw	r18, r28
    1fba:	2c 5f       	subi	r18, 0xFC	; 252
    1fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbe:	8e 01       	movw	r16, r28
    1fc0:	0a 5f       	subi	r16, 0xFA	; 250
    1fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc4:	f8 e0       	ldi	r31, 0x08	; 8
    1fc6:	ef 2e       	mov	r14, r31
    1fc8:	f1 2c       	mov	r15, r1
    1fca:	ec 0e       	add	r14, r28
    1fcc:	fd 1e       	adc	r15, r29
    1fce:	ea e0       	ldi	r30, 0x0A	; 10
    1fd0:	ce 2e       	mov	r12, r30
    1fd2:	d1 2c       	mov	r13, r1
    1fd4:	cc 0e       	add	r12, r28
    1fd6:	dd 1e       	adc	r13, r29
    1fd8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <dry_action>
				if(state == END){
    1fdc:	36 e2       	ldi	r19, 0x26	; 38
    1fde:	83 16       	cp	r8, r19
    1fe0:	91 04       	cpc	r9, r1
    1fe2:	71 f4       	brne	.+28     	; 0x2000 <main+0x1064>
					plateLoadMotor = 0;
    1fe4:	1b 82       	std	Y+3, r1	; 0x03
    1fe6:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1fe8:	80 91 2f 04 	lds	r24, 0x042F
    1fec:	8b 7f       	andi	r24, 0xFB	; 251
    1fee:	80 93 2f 04 	sts	0x042F, r24
					if(print35 == 1){
    1ff2:	22 20       	and	r2, r2
    1ff4:	29 f0       	breq	.+10     	; 0x2000 <main+0x1064>
						//clear();
						serial_print_string("END OF CYCLE");
    1ff6:	87 e6       	ldi	r24, 0x67	; 103
    1ff8:	93 e0       	ldi	r25, 0x03	; 3
    1ffa:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
    1ffe:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    2000:	2a 81       	ldd	r18, Y+2	; 0x02
    2002:	3b 81       	ldd	r19, Y+3	; 0x03
    2004:	0c 81       	ldd	r16, Y+4	; 0x04
    2006:	1d 81       	ldd	r17, Y+5	; 0x05
    2008:	ee 80       	ldd	r14, Y+6	; 0x06
    200a:	ff 80       	ldd	r15, Y+7	; 0x07
    200c:	c8 84       	ldd	r12, Y+8	; 0x08
    200e:	d9 84       	ldd	r13, Y+9	; 0x09
    2010:	aa 84       	ldd	r10, Y+10	; 0x0a
    2012:	bb 84       	ldd	r11, Y+11	; 0x0b
    2014:	c3 01       	movw	r24, r6
    2016:	b2 01       	movw	r22, r4
    2018:	4e 85       	ldd	r20, Y+14	; 0x0e
    201a:	5f 85       	ldd	r21, Y+15	; 0x0f
    201c:	0e 94 2b 06 	call	0xc56	; 0xc56 <motor_and_write>

				serial_check(); counter++;
    2020:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <serial_check>
				delay_ms(1);
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>

		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("SECOND B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    202c:	67 e2       	ldi	r22, 0x27	; 39
    202e:	86 16       	cp	r8, r22
    2030:	91 04       	cpc	r9, r1
    2032:	09 f4       	brne	.+2      	; 0x2036 <main+0x109a>
    2034:	da c2       	rjmp	.+1460   	; 0x25ea <main+0x164e>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    2036:	08 94       	sec
    2038:	61 1c       	adc	r6, r1
    203a:	71 1c       	adc	r7, r1
    203c:	fa ce       	rjmp	.-524    	; 0x1e32 <main+0xe96>
				delay_ms(1);
   		 	}
		}


		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    2044:	88 23       	and	r24, r24
    2046:	09 f0       	breq	.+2      	; 0x204a <main+0x10ae>
    2048:	5f c1       	rjmp	.+702    	; 0x2308 <main+0x136c>
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    2050:	88 23       	and	r24, r24
    2052:	09 f4       	brne	.+2      	; 0x2056 <main+0x10ba>
    2054:	59 c1       	rjmp	.+690    	; 0x2308 <main+0x136c>
			lcd_goto_xy(7,0);
    2056:	87 e0       	ldi	r24, 0x07	; 7
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
			serial_print_string("BOTH B");
    205e:	8d e7       	ldi	r24, 0x7D	; 125
    2060:	93 e0       	ldi	r25, 0x03	; 3
    2062:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	9d 83       	std	Y+5, r25	; 0x05
    206c:	8c 83       	std	Y+4, r24	; 0x04
    206e:	80 91 2f 04 	lds	r24, 0x042F
    2072:	80 62       	ori	r24, 0x20	; 32
    2074:	80 93 2f 04 	sts	0x042F, r24
    2078:	44 24       	eor	r4, r4
    207a:	55 24       	eor	r5, r5
    207c:	1e 8a       	std	Y+22, r1	; 0x16
    207e:	1d 8a       	std	Y+21, r1	; 0x15
    2080:	22 24       	eor	r2, r2
    2082:	23 94       	inc	r2
    2084:	33 24       	eor	r3, r3
    2086:	33 94       	inc	r3
    2088:	88 24       	eor	r8, r8
    208a:	99 24       	eor	r9, r9
    208c:	66 24       	eor	r6, r6
    208e:	77 24       	eor	r7, r7
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    2090:	84 e4       	ldi	r24, 0x44	; 68
    2092:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    209c:	85 e4       	ldi	r24, 0x45	; 69
    209e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    20a2:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    20a6:	80 93 2a 04 	sts	0x042A, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    20aa:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    20ae:	80 93 2d 04 	sts	0x042D, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    20b2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    20b6:	81 14       	cp	r8, r1
    20b8:	91 04       	cpc	r9, r1
    20ba:	b1 f0       	breq	.+44     	; 0x20e8 <main+0x114c>
    20bc:	33 20       	and	r3, r3
    20be:	a1 f0       	breq	.+40     	; 0x20e8 <main+0x114c>
					lcd_goto_xy(6,1);
    20c0:	86 e0       	ldi	r24, 0x06	; 6
    20c2:	61 e0       	ldi	r22, 0x01	; 1
    20c4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
					serial_print_string("       ");
    20c8:	84 e8       	ldi	r24, 0x84	; 132
    20ca:	93 e0       	ldi	r25, 0x03	; 3
    20cc:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
					lcd_goto_xy(0,1);
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	61 e0       	ldi	r22, 0x01	; 1
    20d4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
					serial_print_string("STATE ");
    20d8:	80 e6       	ldi	r24, 0x60	; 96
    20da:	93 e0       	ldi	r25, 0x03	; 3
    20dc:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
					serial_print_int(state);
    20e0:	c4 01       	movw	r24, r8
    20e2:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
    20e6:	33 24       	eor	r3, r3
					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    20e8:	c3 01       	movw	r24, r6
    20ea:	be 01       	movw	r22, r28
    20ec:	64 5f       	subi	r22, 0xF4	; 244
    20ee:	7f 4f       	sbci	r23, 0xFF	; 255
    20f0:	0e 94 09 03 	call	0x612	; 0x612 <button_debounce>
    20f4:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    20f6:	c4 01       	movw	r24, r8
    20f8:	a3 01       	movw	r20, r6
    20fa:	92 01       	movw	r18, r4
    20fc:	0e 94 68 03 	call	0x6d0	; 0x6d0 <init_trans>
    2100:	88 23       	and	r24, r24
    2102:	31 f0       	breq	.+12     	; 0x2110 <main+0x1174>
					buttonTriggered = false;
					state ++;
    2104:	08 94       	sec
    2106:	81 1c       	adc	r8, r1
    2108:	91 1c       	adc	r9, r1
    210a:	23 01       	movw	r4, r6
    210c:	33 24       	eor	r3, r3
    210e:	33 94       	inc	r3
					printVar = true;
				}

				
				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    2110:	c4 01       	movw	r24, r8
    2112:	b3 01       	movw	r22, r6
    2114:	a2 01       	movw	r20, r4
    2116:	0e 94 ef 03 	call	0x7de	; 0x7de <firstB_trans>
    211a:	88 23       	and	r24, r24
    211c:	71 f0       	breq	.+28     	; 0x213a <main+0x119e>
					state ++;
    211e:	08 94       	sec
    2120:	81 1c       	adc	r8, r1
    2122:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    2124:	7c e0       	ldi	r23, 0x0C	; 12
    2126:	87 16       	cp	r8, r23
    2128:	91 04       	cpc	r9, r1
    212a:	e1 f0       	breq	.+56     	; 0x2164 <main+0x11c8>
    212c:	8f e0       	ldi	r24, 0x0F	; 15
    212e:	88 16       	cp	r8, r24
    2130:	91 04       	cpc	r9, r1
    2132:	c1 f0       	breq	.+48     	; 0x2164 <main+0x11c8>
    2134:	23 01       	movw	r4, r6
    2136:	33 24       	eor	r3, r3
    2138:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    213a:	90 e1       	ldi	r25, 0x10	; 16
    213c:	89 16       	cp	r8, r25
    213e:	91 04       	cpc	r9, r1
    2140:	99 f4       	brne	.+38     	; 0x2168 <main+0x11cc>
    2142:	93 01       	movw	r18, r6
    2144:	24 19       	sub	r18, r4
    2146:	35 09       	sbc	r19, r5
    2148:	80 91 90 03 	lds	r24, 0x0390
    214c:	90 91 91 03 	lds	r25, 0x0391
    2150:	82 17       	cp	r24, r18
    2152:	93 07       	cpc	r25, r19
    2154:	4c f4       	brge	.+18     	; 0x2168 <main+0x11cc>
    2156:	23 01       	movw	r4, r6
    2158:	33 24       	eor	r3, r3
    215a:	33 94       	inc	r3
    215c:	01 e1       	ldi	r16, 0x11	; 17
    215e:	80 2e       	mov	r8, r16
    2160:	91 2c       	mov	r9, r1
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <main+0x11cc>
    2164:	33 24       	eor	r3, r3
    2166:	33 94       	inc	r3
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    2168:	c4 01       	movw	r24, r8
    216a:	b3 01       	movw	r22, r6
    216c:	a2 01       	movw	r20, r4
    216e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <secondB_trans>
    2172:	88 23       	and	r24, r24
    2174:	31 f0       	breq	.+12     	; 0x2182 <main+0x11e6>
					state ++;
    2176:	08 94       	sec
    2178:	81 1c       	adc	r8, r1
    217a:	91 1c       	adc	r9, r1
    217c:	23 01       	movw	r4, r6
    217e:	33 24       	eor	r3, r3
    2180:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    2182:	c4 01       	movw	r24, r8
    2184:	b3 01       	movw	r22, r6
    2186:	a2 01       	movw	r20, r4
    2188:	2d 89       	ldd	r18, Y+21	; 0x15
    218a:	3e 89       	ldd	r19, Y+22	; 0x16
    218c:	0e 94 35 05 	call	0xa6a	; 0xa6a <dry_trans>
    2190:	88 23       	and	r24, r24
    2192:	79 f0       	breq	.+30     	; 0x21b2 <main+0x1216>
					state ++;
    2194:	08 94       	sec
    2196:	81 1c       	adc	r8, r1
    2198:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    219a:	2d e1       	ldi	r18, 0x1D	; 29
    219c:	82 16       	cp	r8, r18
    219e:	91 04       	cpc	r9, r1
    21a0:	29 f4       	brne	.+10     	; 0x21ac <main+0x1210>
    21a2:	7e 8a       	std	Y+22, r7	; 0x16
    21a4:	6d 8a       	std	Y+21, r6	; 0x15
    21a6:	33 24       	eor	r3, r3
    21a8:	33 94       	inc	r3
    21aa:	0f c0       	rjmp	.+30     	; 0x21ca <main+0x122e>
    21ac:	23 01       	movw	r4, r6
    21ae:	33 24       	eor	r3, r3
    21b0:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    21b2:	36 e2       	ldi	r19, 0x26	; 38
    21b4:	83 16       	cp	r8, r19
    21b6:	91 04       	cpc	r9, r1
    21b8:	41 f4       	brne	.+16     	; 0x21ca <main+0x122e>
    21ba:	c3 01       	movw	r24, r6
    21bc:	84 19       	sub	r24, r4
    21be:	95 09       	sbc	r25, r5
    21c0:	0b 97       	sbiw	r24, 0x0b	; 11
    21c2:	1c f0       	brlt	.+6      	; 0x21ca <main+0x122e>
    21c4:	17 e2       	ldi	r17, 0x27	; 39
    21c6:	81 2e       	mov	r8, r17
    21c8:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    21ca:	c4 01       	movw	r24, r8
    21cc:	b3 01       	movw	r22, r6
    21ce:	ae 01       	movw	r20, r28
    21d0:	4e 5f       	subi	r20, 0xFE	; 254
    21d2:	5f 4f       	sbci	r21, 0xFF	; 255
    21d4:	9e 01       	movw	r18, r28
    21d6:	2c 5f       	subi	r18, 0xFC	; 252
    21d8:	3f 4f       	sbci	r19, 0xFF	; 255
    21da:	8e 01       	movw	r16, r28
    21dc:	0a 5f       	subi	r16, 0xFA	; 250
    21de:	1f 4f       	sbci	r17, 0xFF	; 255
    21e0:	b8 e0       	ldi	r27, 0x08	; 8
    21e2:	eb 2e       	mov	r14, r27
    21e4:	f1 2c       	mov	r15, r1
    21e6:	ec 0e       	add	r14, r28
    21e8:	fd 1e       	adc	r15, r29
    21ea:	aa e0       	ldi	r26, 0x0A	; 10
    21ec:	ca 2e       	mov	r12, r26
    21ee:	d1 2c       	mov	r13, r1
    21f0:	cc 0e       	add	r12, r28
    21f2:	dd 1e       	adc	r13, r29
    21f4:	5e 01       	movw	r10, r28
    21f6:	08 94       	sec
    21f8:	a1 1c       	adc	r10, r1
    21fa:	b1 1c       	adc	r11, r1
    21fc:	0e 94 03 07 	call	0xe06	; 0xe06 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2200:	c4 01       	movw	r24, r8
    2202:	b3 01       	movw	r22, r6
    2204:	ae 01       	movw	r20, r28
    2206:	4e 5f       	subi	r20, 0xFE	; 254
    2208:	5f 4f       	sbci	r21, 0xFF	; 255
    220a:	9e 01       	movw	r18, r28
    220c:	2c 5f       	subi	r18, 0xFC	; 252
    220e:	3f 4f       	sbci	r19, 0xFF	; 255
    2210:	8e 01       	movw	r16, r28
    2212:	0a 5f       	subi	r16, 0xFA	; 250
    2214:	1f 4f       	sbci	r17, 0xFF	; 255
    2216:	f8 e0       	ldi	r31, 0x08	; 8
    2218:	ef 2e       	mov	r14, r31
    221a:	f1 2c       	mov	r15, r1
    221c:	ec 0e       	add	r14, r28
    221e:	fd 1e       	adc	r15, r29
    2220:	ea e0       	ldi	r30, 0x0A	; 10
    2222:	ce 2e       	mov	r12, r30
    2224:	d1 2c       	mov	r13, r1
    2226:	cc 0e       	add	r12, r28
    2228:	dd 1e       	adc	r13, r29
    222a:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    222e:	60 e1       	ldi	r22, 0x10	; 16
    2230:	86 16       	cp	r8, r22
    2232:	91 04       	cpc	r9, r1
    2234:	51 f4       	brne	.+20     	; 0x224a <main+0x12ae>
					brush1Motor = 0;
    2236:	1f 82       	std	Y+7, r1	; 0x07
    2238:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    223a:	1d 82       	std	Y+5, r1	; 0x05
    223c:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    223e:	80 91 2e 04 	lds	r24, 0x042E
    2242:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2244:	80 62       	ori	r24, 0x20	; 32
    2246:	80 93 2e 04 	sts	0x042E, r24
				}
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    224a:	c4 01       	movw	r24, r8
    224c:	b3 01       	movw	r22, r6
    224e:	ae 01       	movw	r20, r28
    2250:	4e 5f       	subi	r20, 0xFE	; 254
    2252:	5f 4f       	sbci	r21, 0xFF	; 255
    2254:	9e 01       	movw	r18, r28
    2256:	2c 5f       	subi	r18, 0xFC	; 252
    2258:	3f 4f       	sbci	r19, 0xFF	; 255
    225a:	8e 01       	movw	r16, r28
    225c:	0a 5f       	subi	r16, 0xFA	; 250
    225e:	1f 4f       	sbci	r17, 0xFF	; 255
    2260:	b8 e0       	ldi	r27, 0x08	; 8
    2262:	eb 2e       	mov	r14, r27
    2264:	f1 2c       	mov	r15, r1
    2266:	ec 0e       	add	r14, r28
    2268:	fd 1e       	adc	r15, r29
    226a:	aa e0       	ldi	r26, 0x0A	; 10
    226c:	ca 2e       	mov	r12, r26
    226e:	d1 2c       	mov	r13, r1
    2270:	cc 0e       	add	r12, r28
    2272:	dd 1e       	adc	r13, r29
    2274:	0e 94 cc 01 	call	0x398	; 0x398 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2278:	c4 01       	movw	r24, r8
    227a:	b3 01       	movw	r22, r6
    227c:	ae 01       	movw	r20, r28
    227e:	4e 5f       	subi	r20, 0xFE	; 254
    2280:	5f 4f       	sbci	r21, 0xFF	; 255
    2282:	9e 01       	movw	r18, r28
    2284:	2c 5f       	subi	r18, 0xFC	; 252
    2286:	3f 4f       	sbci	r19, 0xFF	; 255
    2288:	8e 01       	movw	r16, r28
    228a:	0a 5f       	subi	r16, 0xFA	; 250
    228c:	1f 4f       	sbci	r17, 0xFF	; 255
    228e:	f8 e0       	ldi	r31, 0x08	; 8
    2290:	ef 2e       	mov	r14, r31
    2292:	f1 2c       	mov	r15, r1
    2294:	ec 0e       	add	r14, r28
    2296:	fd 1e       	adc	r15, r29
    2298:	ea e0       	ldi	r30, 0x0A	; 10
    229a:	ce 2e       	mov	r12, r30
    229c:	d1 2c       	mov	r13, r1
    229e:	cc 0e       	add	r12, r28
    22a0:	dd 1e       	adc	r13, r29
    22a2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <dry_action>
				if(state == END){
    22a6:	76 e2       	ldi	r23, 0x26	; 38
    22a8:	87 16       	cp	r8, r23
    22aa:	91 04       	cpc	r9, r1
    22ac:	71 f4       	brne	.+28     	; 0x22ca <main+0x132e>
					plateLoadMotor = 0;
    22ae:	1b 82       	std	Y+3, r1	; 0x03
    22b0:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    22b2:	80 91 2f 04 	lds	r24, 0x042F
    22b6:	8b 7f       	andi	r24, 0xFB	; 251
    22b8:	80 93 2f 04 	sts	0x042F, r24
					if(print35 == 1){
    22bc:	22 20       	and	r2, r2
    22be:	29 f0       	breq	.+10     	; 0x22ca <main+0x132e>
						//clear();
						serial_print_string("END OF CYCLE");
    22c0:	87 e6       	ldi	r24, 0x67	; 103
    22c2:	93 e0       	ldi	r25, 0x03	; 3
    22c4:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
    22c8:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    22ca:	2a 81       	ldd	r18, Y+2	; 0x02
    22cc:	3b 81       	ldd	r19, Y+3	; 0x03
    22ce:	0c 81       	ldd	r16, Y+4	; 0x04
    22d0:	1d 81       	ldd	r17, Y+5	; 0x05
    22d2:	ee 80       	ldd	r14, Y+6	; 0x06
    22d4:	ff 80       	ldd	r15, Y+7	; 0x07
    22d6:	c8 84       	ldd	r12, Y+8	; 0x08
    22d8:	d9 84       	ldd	r13, Y+9	; 0x09
    22da:	aa 84       	ldd	r10, Y+10	; 0x0a
    22dc:	bb 84       	ldd	r11, Y+11	; 0x0b
    22de:	c3 01       	movw	r24, r6
    22e0:	b2 01       	movw	r22, r4
    22e2:	4d 89       	ldd	r20, Y+21	; 0x15
    22e4:	5e 89       	ldd	r21, Y+22	; 0x16
    22e6:	0e 94 2b 06 	call	0xc56	; 0xc56 <motor_and_write>

				serial_check(); counter++;
    22ea:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <serial_check>
				delay_ms(1);
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>

		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("BOTH B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    22f6:	87 e2       	ldi	r24, 0x27	; 39
    22f8:	88 16       	cp	r8, r24
    22fa:	91 04       	cpc	r9, r1
    22fc:	09 f4       	brne	.+2      	; 0x2300 <main+0x1364>
    22fe:	75 c1       	rjmp	.+746    	; 0x25ea <main+0x164e>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    2300:	08 94       	sec
    2302:	61 1c       	adc	r6, r1
    2304:	71 1c       	adc	r7, r1
    2306:	c4 ce       	rjmp	.-632    	; 0x2090 <main+0x10f4>
				delay_ms(1);
   		 	}
		}

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    230e:	88 23       	and	r24, r24
    2310:	09 f4       	brne	.+2      	; 0x2314 <main+0x1378>
    2312:	6b c1       	rjmp	.+726    	; 0x25ea <main+0x164e>
    2314:	82 e0       	ldi	r24, 0x02	; 2
    2316:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    231a:	88 23       	and	r24, r24
    231c:	09 f4       	brne	.+2      	; 0x2320 <main+0x1384>
    231e:	65 c1       	rjmp	.+714    	; 0x25ea <main+0x164e>
			lcd_goto_xy(7,0);
    2320:	87 e0       	ldi	r24, 0x07	; 7
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
			serial_print_string("DEBUG");
    2328:	8c e6       	ldi	r24, 0x6C	; 108
    232a:	91 e0       	ldi	r25, 0x01	; 1
    232c:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9d 83       	std	Y+5, r25	; 0x05
    2336:	8c 83       	std	Y+4, r24	; 0x04
    2338:	80 91 2f 04 	lds	r24, 0x042F
    233c:	80 62       	ori	r24, 0x20	; 32
    233e:	80 93 2f 04 	sts	0x042F, r24
    2342:	44 24       	eor	r4, r4
    2344:	55 24       	eor	r5, r5
    2346:	22 24       	eor	r2, r2
    2348:	23 94       	inc	r2
    234a:	33 24       	eor	r3, r3
    234c:	33 94       	inc	r3
    234e:	88 24       	eor	r8, r8
    2350:	99 24       	eor	r9, r9
    2352:	66 24       	eor	r6, r6
    2354:	77 24       	eor	r7, r7
    2356:	1a 8e       	std	Y+26, r1	; 0x1a
    2358:	19 8e       	std	Y+25, r1	; 0x19
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    235a:	84 e4       	ldi	r24, 0x44	; 68
    235c:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2366:	85 e4       	ldi	r24, 0x45	; 69
    2368:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    236c:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    2370:	80 93 2a 04 	sts	0x042A, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2374:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    2378:	80 93 2d 04 	sts	0x042D, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    237c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    2380:	81 14       	cp	r8, r1
    2382:	91 04       	cpc	r9, r1
    2384:	b1 f0       	breq	.+44     	; 0x23b2 <main+0x1416>
    2386:	33 20       	and	r3, r3
    2388:	a1 f0       	breq	.+40     	; 0x23b2 <main+0x1416>
					lcd_goto_xy(6,1);
    238a:	86 e0       	ldi	r24, 0x06	; 6
    238c:	61 e0       	ldi	r22, 0x01	; 1
    238e:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
					serial_print_string("     ");
    2392:	8a e5       	ldi	r24, 0x5A	; 90
    2394:	93 e0       	ldi	r25, 0x03	; 3
    2396:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
					lcd_goto_xy(0,1);
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	61 e0       	ldi	r22, 0x01	; 1
    239e:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <lcd_goto_xy>
					serial_print_string("STATE ");
    23a2:	80 e6       	ldi	r24, 0x60	; 96
    23a4:	93 e0       	ldi	r25, 0x03	; 3
    23a6:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
					serial_print_int(state);
    23aa:	c4 01       	movw	r24, r8
    23ac:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
    23b0:	33 24       	eor	r3, r3
					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    23b2:	c3 01       	movw	r24, r6
    23b4:	be 01       	movw	r22, r28
    23b6:	64 5f       	subi	r22, 0xF4	; 244
    23b8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ba:	0e 94 09 03 	call	0x612	; 0x612 <button_debounce>
    23be:	18 2f       	mov	r17, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    23c0:	c4 01       	movw	r24, r8
    23c2:	61 2f       	mov	r22, r17
    23c4:	a3 01       	movw	r20, r6
    23c6:	92 01       	movw	r18, r4
    23c8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <init_trans>
    23cc:	88 23       	and	r24, r24
    23ce:	39 f0       	breq	.+14     	; 0x23de <main+0x1442>
    23d0:	23 01       	movw	r4, r6
    23d2:	10 e0       	ldi	r17, 0x00	; 0
    23d4:	33 24       	eor	r3, r3
    23d6:	33 94       	inc	r3
    23d8:	38 e2       	ldi	r19, 0x28	; 40
    23da:	83 2e       	mov	r8, r19
    23dc:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    23de:	c4 01       	movw	r24, r8
    23e0:	b3 01       	movw	r22, r6
    23e2:	a2 01       	movw	r20, r4
    23e4:	0e 94 ef 03 	call	0x7de	; 0x7de <firstB_trans>
    23e8:	88 23       	and	r24, r24
    23ea:	71 f4       	brne	.+28     	; 0x2408 <main+0x146c>
					state = WAIT;
					if(state != B1STOP1 && state != CLEAN1_3)
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    23ec:	90 e1       	ldi	r25, 0x10	; 16
    23ee:	89 16       	cp	r8, r25
    23f0:	91 04       	cpc	r9, r1
    23f2:	81 f4       	brne	.+32     	; 0x2414 <main+0x1478>
    23f4:	93 01       	movw	r18, r6
    23f6:	24 19       	sub	r18, r4
    23f8:	35 09       	sbc	r19, r5
    23fa:	80 91 90 03 	lds	r24, 0x0390
    23fe:	90 91 91 03 	lds	r25, 0x0391
    2402:	82 17       	cp	r24, r18
    2404:	93 07       	cpc	r25, r19
    2406:	34 f4       	brge	.+12     	; 0x2414 <main+0x1478>
    2408:	23 01       	movw	r4, r6
    240a:	33 24       	eor	r3, r3
    240c:	33 94       	inc	r3
    240e:	28 e2       	ldi	r18, 0x28	; 40
    2410:	82 2e       	mov	r8, r18
    2412:	91 2c       	mov	r9, r1
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    2414:	c4 01       	movw	r24, r8
    2416:	b3 01       	movw	r22, r6
    2418:	a2 01       	movw	r20, r4
    241a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <secondB_trans>
    241e:	88 23       	and	r24, r24
    2420:	31 f0       	breq	.+12     	; 0x242e <main+0x1492>
    2422:	23 01       	movw	r4, r6
    2424:	33 24       	eor	r3, r3
    2426:	33 94       	inc	r3
    2428:	98 e2       	ldi	r25, 0x28	; 40
    242a:	89 2e       	mov	r8, r25
    242c:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}
				
				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    242e:	c4 01       	movw	r24, r8
    2430:	b3 01       	movw	r22, r6
    2432:	a2 01       	movw	r20, r4
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	0e 94 35 05 	call	0xa6a	; 0xa6a <dry_trans>
    243c:	88 23       	and	r24, r24
    243e:	21 f0       	breq	.+8      	; 0x2448 <main+0x14ac>
    2440:	23 01       	movw	r4, r6
    2442:	33 24       	eor	r3, r3
    2444:	33 94       	inc	r3
    2446:	11 c0       	rjmp	.+34     	; 0x246a <main+0x14ce>
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    2448:	26 e2       	ldi	r18, 0x26	; 38
    244a:	82 16       	cp	r8, r18
    244c:	91 04       	cpc	r9, r1
    244e:	49 f4       	brne	.+18     	; 0x2462 <main+0x14c6>
    2450:	c3 01       	movw	r24, r6
    2452:	84 19       	sub	r24, r4
    2454:	95 09       	sbc	r25, r5
    2456:	0b 97       	sbiw	r24, 0x0b	; 11
    2458:	54 f1       	brlt	.+84     	; 0x24ae <main+0x1512>
    245a:	87 e2       	ldi	r24, 0x27	; 39
    245c:	88 2e       	mov	r8, r24
    245e:	91 2c       	mov	r9, r1
    2460:	26 c0       	rjmp	.+76     	; 0x24ae <main+0x1512>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    2462:	38 e2       	ldi	r19, 0x28	; 40
    2464:	83 16       	cp	r8, r19
    2466:	91 04       	cpc	r9, r1
    2468:	11 f5       	brne	.+68     	; 0x24ae <main+0x1512>
    246a:	11 23       	and	r17, r17
    246c:	21 f4       	brne	.+8      	; 0x2476 <main+0x14da>
    246e:	08 e2       	ldi	r16, 0x28	; 40
    2470:	80 2e       	mov	r8, r16
    2472:	91 2c       	mov	r9, r1
    2474:	12 c0       	rjmp	.+36     	; 0x249a <main+0x14fe>
					state = ++last;
    2476:	69 8d       	ldd	r22, Y+25	; 0x19
    2478:	7a 8d       	ldd	r23, Y+26	; 0x1a
    247a:	6f 5f       	subi	r22, 0xFF	; 255
    247c:	7f 4f       	sbci	r23, 0xFF	; 255
    247e:	7a 8f       	std	Y+26, r23	; 0x1a
    2480:	69 8f       	std	Y+25, r22	; 0x19
				}


				//state actions
						
				if(state == WAIT){
    2482:	68 32       	cpi	r22, 0x28	; 40
    2484:	71 05       	cpc	r23, r1
    2486:	21 f0       	breq	.+8      	; 0x2490 <main+0x14f4>
    2488:	4b 01       	movw	r8, r22
    248a:	33 24       	eor	r3, r3
    248c:	33 94       	inc	r3
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <main+0x1512>
    2490:	18 e2       	ldi	r17, 0x28	; 40
    2492:	81 2e       	mov	r8, r17
    2494:	91 2c       	mov	r9, r1
    2496:	33 24       	eor	r3, r3
    2498:	33 94       	inc	r3
					plateLoadMotor = 0;
    249a:	1b 82       	std	Y+3, r1	; 0x03
    249c:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    249e:	1d 82       	std	Y+5, r1	; 0x05
    24a0:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    24a2:	1f 82       	std	Y+7, r1	; 0x07
    24a4:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    24a6:	19 86       	std	Y+9, r1	; 0x09
    24a8:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    24aa:	1b 86       	std	Y+11, r1	; 0x0b
    24ac:	1a 86       	std	Y+10, r1	; 0x0a
				}
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    24ae:	c4 01       	movw	r24, r8
    24b0:	b3 01       	movw	r22, r6
    24b2:	ae 01       	movw	r20, r28
    24b4:	4e 5f       	subi	r20, 0xFE	; 254
    24b6:	5f 4f       	sbci	r21, 0xFF	; 255
    24b8:	9e 01       	movw	r18, r28
    24ba:	2c 5f       	subi	r18, 0xFC	; 252
    24bc:	3f 4f       	sbci	r19, 0xFF	; 255
    24be:	8e 01       	movw	r16, r28
    24c0:	0a 5f       	subi	r16, 0xFA	; 250
    24c2:	1f 4f       	sbci	r17, 0xFF	; 255
    24c4:	b8 e0       	ldi	r27, 0x08	; 8
    24c6:	eb 2e       	mov	r14, r27
    24c8:	f1 2c       	mov	r15, r1
    24ca:	ec 0e       	add	r14, r28
    24cc:	fd 1e       	adc	r15, r29
    24ce:	aa e0       	ldi	r26, 0x0A	; 10
    24d0:	ca 2e       	mov	r12, r26
    24d2:	d1 2c       	mov	r13, r1
    24d4:	cc 0e       	add	r12, r28
    24d6:	dd 1e       	adc	r13, r29
    24d8:	5e 01       	movw	r10, r28
    24da:	08 94       	sec
    24dc:	a1 1c       	adc	r10, r1
    24de:	b1 1c       	adc	r11, r1
    24e0:	0e 94 03 07 	call	0xe06	; 0xe06 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    24e4:	c4 01       	movw	r24, r8
    24e6:	b3 01       	movw	r22, r6
    24e8:	ae 01       	movw	r20, r28
    24ea:	4e 5f       	subi	r20, 0xFE	; 254
    24ec:	5f 4f       	sbci	r21, 0xFF	; 255
    24ee:	9e 01       	movw	r18, r28
    24f0:	2c 5f       	subi	r18, 0xFC	; 252
    24f2:	3f 4f       	sbci	r19, 0xFF	; 255
    24f4:	8e 01       	movw	r16, r28
    24f6:	0a 5f       	subi	r16, 0xFA	; 250
    24f8:	1f 4f       	sbci	r17, 0xFF	; 255
    24fa:	f8 e0       	ldi	r31, 0x08	; 8
    24fc:	ef 2e       	mov	r14, r31
    24fe:	f1 2c       	mov	r15, r1
    2500:	ec 0e       	add	r14, r28
    2502:	fd 1e       	adc	r15, r29
    2504:	ea e0       	ldi	r30, 0x0A	; 10
    2506:	ce 2e       	mov	r12, r30
    2508:	d1 2c       	mov	r13, r1
    250a:	cc 0e       	add	r12, r28
    250c:	dd 1e       	adc	r13, r29
    250e:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    2512:	70 e1       	ldi	r23, 0x10	; 16
    2514:	87 16       	cp	r8, r23
    2516:	91 04       	cpc	r9, r1
    2518:	51 f4       	brne	.+20     	; 0x252e <main+0x1592>
					brush1Motor = 0;
    251a:	1f 82       	std	Y+7, r1	; 0x07
    251c:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    251e:	1d 82       	std	Y+5, r1	; 0x05
    2520:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2522:	80 91 2e 04 	lds	r24, 0x042E
    2526:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2528:	80 62       	ori	r24, 0x20	; 32
    252a:	80 93 2e 04 	sts	0x042E, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    252e:	c4 01       	movw	r24, r8
    2530:	b3 01       	movw	r22, r6
    2532:	ae 01       	movw	r20, r28
    2534:	4e 5f       	subi	r20, 0xFE	; 254
    2536:	5f 4f       	sbci	r21, 0xFF	; 255
    2538:	9e 01       	movw	r18, r28
    253a:	2c 5f       	subi	r18, 0xFC	; 252
    253c:	3f 4f       	sbci	r19, 0xFF	; 255
    253e:	8e 01       	movw	r16, r28
    2540:	0a 5f       	subi	r16, 0xFA	; 250
    2542:	1f 4f       	sbci	r17, 0xFF	; 255
    2544:	b8 e0       	ldi	r27, 0x08	; 8
    2546:	eb 2e       	mov	r14, r27
    2548:	f1 2c       	mov	r15, r1
    254a:	ec 0e       	add	r14, r28
    254c:	fd 1e       	adc	r15, r29
    254e:	aa e0       	ldi	r26, 0x0A	; 10
    2550:	ca 2e       	mov	r12, r26
    2552:	d1 2c       	mov	r13, r1
    2554:	cc 0e       	add	r12, r28
    2556:	dd 1e       	adc	r13, r29
    2558:	0e 94 cc 01 	call	0x398	; 0x398 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    255c:	c4 01       	movw	r24, r8
    255e:	b3 01       	movw	r22, r6
    2560:	ae 01       	movw	r20, r28
    2562:	4e 5f       	subi	r20, 0xFE	; 254
    2564:	5f 4f       	sbci	r21, 0xFF	; 255
    2566:	9e 01       	movw	r18, r28
    2568:	2c 5f       	subi	r18, 0xFC	; 252
    256a:	3f 4f       	sbci	r19, 0xFF	; 255
    256c:	8e 01       	movw	r16, r28
    256e:	0a 5f       	subi	r16, 0xFA	; 250
    2570:	1f 4f       	sbci	r17, 0xFF	; 255
    2572:	f8 e0       	ldi	r31, 0x08	; 8
    2574:	ef 2e       	mov	r14, r31
    2576:	f1 2c       	mov	r15, r1
    2578:	ec 0e       	add	r14, r28
    257a:	fd 1e       	adc	r15, r29
    257c:	ea e0       	ldi	r30, 0x0A	; 10
    257e:	ce 2e       	mov	r12, r30
    2580:	d1 2c       	mov	r13, r1
    2582:	cc 0e       	add	r12, r28
    2584:	dd 1e       	adc	r13, r29
    2586:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <dry_action>
				if(state == END){
    258a:	86 e2       	ldi	r24, 0x26	; 38
    258c:	88 16       	cp	r8, r24
    258e:	91 04       	cpc	r9, r1
    2590:	71 f4       	brne	.+28     	; 0x25ae <main+0x1612>
					plateLoadMotor = 0;
    2592:	1b 82       	std	Y+3, r1	; 0x03
    2594:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2596:	80 91 2f 04 	lds	r24, 0x042F
    259a:	8b 7f       	andi	r24, 0xFB	; 251
    259c:	80 93 2f 04 	sts	0x042F, r24
					if(print35 == 1){
    25a0:	22 20       	and	r2, r2
    25a2:	29 f0       	breq	.+10     	; 0x25ae <main+0x1612>
						//clear();
						serial_print_string("END OF CYCLE");
    25a4:	87 e6       	ldi	r24, 0x67	; 103
    25a6:	93 e0       	ldi	r25, 0x03	; 3
    25a8:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
    25ac:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    25ae:	2a 81       	ldd	r18, Y+2	; 0x02
    25b0:	3b 81       	ldd	r19, Y+3	; 0x03
    25b2:	0c 81       	ldd	r16, Y+4	; 0x04
    25b4:	1d 81       	ldd	r17, Y+5	; 0x05
    25b6:	ee 80       	ldd	r14, Y+6	; 0x06
    25b8:	ff 80       	ldd	r15, Y+7	; 0x07
    25ba:	c8 84       	ldd	r12, Y+8	; 0x08
    25bc:	d9 84       	ldd	r13, Y+9	; 0x09
    25be:	aa 84       	ldd	r10, Y+10	; 0x0a
    25c0:	bb 84       	ldd	r11, Y+11	; 0x0b
    25c2:	c3 01       	movw	r24, r6
    25c4:	b2 01       	movw	r22, r4
    25c6:	40 e0       	ldi	r20, 0x00	; 0
    25c8:	50 e0       	ldi	r21, 0x00	; 0
    25ca:	0e 94 2b 06 	call	0xc56	; 0xc56 <motor_and_write>

				serial_check(); counter++;
    25ce:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <serial_check>
				delay_ms(1);
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    25da:	97 e2       	ldi	r25, 0x27	; 39
    25dc:	89 16       	cp	r8, r25
    25de:	91 04       	cpc	r9, r1
    25e0:	21 f0       	breq	.+8      	; 0x25ea <main+0x164e>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    25e2:	08 94       	sec
    25e4:	61 1c       	adc	r6, r1
    25e6:	71 1c       	adc	r7, r1
    25e8:	b8 ce       	rjmp	.-656    	; 0x235a <main+0x13be>
				delay_ms(1);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    25ea:	80 91 2f 04 	lds	r24, 0x042F
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    25ee:	8b 7d       	andi	r24, 0xDB	; 219
    25f0:	80 93 2f 04 	sts	0x042F, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    25f4:	80 91 2b 04 	lds	r24, 0x042B
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    25f8:	86 7b       	andi	r24, 0xB6	; 182
    25fa:	80 93 2b 04 	sts	0x042B, r24
		
		i2c_start(I2C1+I2C_WRITE);
    25fe:	80 e4       	ldi	r24, 0x40	; 64
    2600:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    2604:	82 e0       	ldi	r24, 0x02	; 2
    2606:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    260a:	80 91 2f 04 	lds	r24, 0x042F
    260e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    2612:	80 91 2b 04 	lds	r24, 0x042B
    2616:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    261a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	}
	serial_print_string("END");
    261e:	8c e8       	ldi	r24, 0x8C	; 140
    2620:	93 e0       	ldi	r25, 0x03	; 3
    2622:	0e 94 ed 06 	call	0xdda	; 0xdda <serial_print_string>
    2626:	0c 94 ed 07 	jmp	0xfda	; 0xfda <main+0x3e>
	}
    262a:	2f ef       	ldi	r18, 0xFF	; 255
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	38 8f       	std	Y+24, r19	; 0x18
    2630:	2f 8b       	std	Y+23, r18	; 0x17
    2632:	12 01       	movw	r2, r4
    2634:	99 24       	eor	r9, r9
    2636:	93 94       	inc	r9
    2638:	8c e2       	ldi	r24, 0x2C	; 44
    263a:	68 2e       	mov	r6, r24
    263c:	71 2c       	mov	r7, r1
    263e:	14 ca       	rjmp	.-3032   	; 0x1a68 <main+0xacc>

00002640 <_ZN12OrangutanLCDC2Ev>:
    2640:	08 95       	ret

00002642 <_ZN12OrangutanLCDC1Ev>:
    2642:	08 95       	ret

00002644 <void_getchar>:
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	08 95       	ret

0000264a <_ZN12OrangutanLCD8busyWaitEv>:
    264a:	ef 92       	push	r14
    264c:	ff 92       	push	r15
    264e:	0f 93       	push	r16
    2650:	1f 93       	push	r17
    2652:	67 b1       	in	r22, 0x07	; 7
    2654:	3d 98       	cbi	0x07, 5	; 7
    2656:	28 98       	cbi	0x05, 0	; 5
    2658:	29 9a       	sbi	0x05, 1	; 5
    265a:	e0 90 fa 03 	lds	r14, 0x03FA
    265e:	f0 90 fb 03 	lds	r15, 0x03FB
    2662:	00 91 fc 03 	lds	r16, 0x03FC
    2666:	10 91 fd 03 	lds	r17, 0x03FD
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	41 e0       	ldi	r20, 0x01	; 1
    2670:	50 e0       	ldi	r21, 0x00	; 0
    2672:	ca 01       	movw	r24, r20
    2674:	6f 93       	push	r22
    2676:	64 e0       	ldi	r22, 0x04	; 4
    2678:	6a 95       	dec	r22
    267a:	f1 f7       	brne	.-4      	; 0x2678 <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    267c:	6f 91       	pop	r22
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	c9 f7       	brne	.-14     	; 0x2674 <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    2682:	2a 9a       	sbi	0x05, 2	; 5
    2684:	ca 01       	movw	r24, r20
    2686:	6f 93       	push	r22
    2688:	64 e0       	ldi	r22, 0x04	; 4
    268a:	6a 95       	dec	r22
    268c:	f1 f7       	brne	.-4      	; 0x268a <_ZN12OrangutanLCD8busyWaitEv+0x40>
    268e:	6f 91       	pop	r22
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	c9 f7       	brne	.-14     	; 0x2686 <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    2694:	86 b1       	in	r24, 0x06	; 6
    2696:	2a 98       	cbi	0x05, 2	; 5
    2698:	fa 01       	movw	r30, r20
    269a:	6f 93       	push	r22
    269c:	64 e0       	ldi	r22, 0x04	; 4
    269e:	6a 95       	dec	r22
    26a0:	f1 f7       	brne	.-4      	; 0x269e <_ZN12OrangutanLCD8busyWaitEv+0x54>
    26a2:	6f 91       	pop	r22
    26a4:	31 97       	sbiw	r30, 0x01	; 1
    26a6:	c9 f7       	brne	.-14     	; 0x269a <_ZN12OrangutanLCD8busyWaitEv+0x50>
    26a8:	2a 9a       	sbi	0x05, 2	; 5
    26aa:	fa 01       	movw	r30, r20
    26ac:	6f 93       	push	r22
    26ae:	64 e0       	ldi	r22, 0x04	; 4
    26b0:	6a 95       	dec	r22
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    26b4:	6f 91       	pop	r22
    26b6:	31 97       	sbiw	r30, 0x01	; 1
    26b8:	c9 f7       	brne	.-14     	; 0x26ac <_ZN12OrangutanLCD8busyWaitEv+0x62>
    26ba:	2a 98       	cbi	0x05, 2	; 5
    26bc:	2c 5f       	subi	r18, 0xFC	; 252
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	85 ff       	sbrs	r24, 5
    26c2:	09 c0       	rjmp	.+18     	; 0x26d6 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    26c4:	c9 01       	movw	r24, r18
    26c6:	a0 e0       	ldi	r26, 0x00	; 0
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	8e 15       	cp	r24, r14
    26cc:	9f 05       	cpc	r25, r15
    26ce:	a0 07       	cpc	r26, r16
    26d0:	b1 07       	cpc	r27, r17
    26d2:	08 f4       	brcc	.+2      	; 0x26d6 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    26d4:	ce cf       	rjmp	.-100    	; 0x2672 <_ZN12OrangutanLCD8busyWaitEv+0x28>
    26d6:	c9 01       	movw	r24, r18
    26d8:	a0 e0       	ldi	r26, 0x00	; 0
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	8e 15       	cp	r24, r14
    26de:	9f 05       	cpc	r25, r15
    26e0:	a0 07       	cpc	r26, r16
    26e2:	b1 07       	cpc	r27, r17
    26e4:	28 f0       	brcs	.+10     	; 0x26f0 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    26e6:	82 e3       	ldi	r24, 0x32	; 50
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	a0 e0       	ldi	r26, 0x00	; 0
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	04 c0       	rjmp	.+8      	; 0x26f8 <_ZN12OrangutanLCD8busyWaitEv+0xae>
    26f0:	80 e3       	ldi	r24, 0x30	; 48
    26f2:	95 e7       	ldi	r25, 0x75	; 117
    26f4:	a0 e0       	ldi	r26, 0x00	; 0
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	80 93 fa 03 	sts	0x03FA, r24
    26fc:	90 93 fb 03 	sts	0x03FB, r25
    2700:	a0 93 fc 03 	sts	0x03FC, r26
    2704:	b0 93 fd 03 	sts	0x03FD, r27
    2708:	67 b9       	out	0x07, r22	; 7
    270a:	1f 91       	pop	r17
    270c:	0f 91       	pop	r16
    270e:	ff 90       	pop	r15
    2710:	ef 90       	pop	r14
    2712:	08 95       	ret

00002714 <_ZN12OrangutanLCD8sendDataEh>:
    2714:	28 b1       	in	r18, 0x08	; 8
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	8f 70       	andi	r24, 0x0F	; 15
    271a:	90 70       	andi	r25, 0x00	; 0
    271c:	88 0f       	add	r24, r24
    271e:	99 1f       	adc	r25, r25
    2720:	88 0f       	add	r24, r24
    2722:	99 1f       	adc	r25, r25
    2724:	23 7c       	andi	r18, 0xC3	; 195
    2726:	28 2b       	or	r18, r24
    2728:	28 b9       	out	0x08, r18	; 8
    272a:	2a 9a       	sbi	0x05, 2	; 5
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	fc 01       	movw	r30, r24
    2732:	6f 93       	push	r22
    2734:	64 e0       	ldi	r22, 0x04	; 4
    2736:	6a 95       	dec	r22
    2738:	f1 f7       	brne	.-4      	; 0x2736 <_ZN12OrangutanLCD8sendDataEh+0x22>
    273a:	6f 91       	pop	r22
    273c:	31 97       	sbiw	r30, 0x01	; 1
    273e:	c9 f7       	brne	.-14     	; 0x2732 <_ZN12OrangutanLCD8sendDataEh+0x1e>
    2740:	2a 98       	cbi	0x05, 2	; 5
    2742:	6f 93       	push	r22
    2744:	64 e0       	ldi	r22, 0x04	; 4
    2746:	6a 95       	dec	r22
    2748:	f1 f7       	brne	.-4      	; 0x2746 <_ZN12OrangutanLCD8sendDataEh+0x32>
    274a:	6f 91       	pop	r22
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	c9 f7       	brne	.-14     	; 0x2742 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    2750:	08 95       	ret

00002752 <_ZN12OrangutanLCD10initPrintfEv>:
    2752:	80 91 f6 03 	lds	r24, 0x03F6
    2756:	90 91 f7 03 	lds	r25, 0x03F7
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	11 f0       	breq	.+4      	; 0x2762 <_ZN12OrangutanLCD10initPrintfEv+0x10>
    275e:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <free>
    2762:	80 91 c4 03 	lds	r24, 0x03C4
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	20 91 c5 03 	lds	r18, 0x03C5
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	ac 01       	movw	r20, r24
    2772:	42 9f       	mul	r20, r18
    2774:	c0 01       	movw	r24, r0
    2776:	43 9f       	mul	r20, r19
    2778:	90 0d       	add	r25, r0
    277a:	52 9f       	mul	r21, r18
    277c:	90 0d       	add	r25, r0
    277e:	11 24       	eor	r1, r1
    2780:	0e 94 2f 20 	call	0x405e	; 0x405e <malloc>
    2784:	90 93 f7 03 	sts	0x03F7, r25
    2788:	80 93 f6 03 	sts	0x03F6, r24
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	29 f1       	breq	.+74     	; 0x27da <_ZN12OrangutanLCD10initPrintfEv+0x88>
    2790:	60 e0       	ldi	r22, 0x00	; 0
    2792:	70 e2       	ldi	r23, 0x20	; 32
    2794:	08 c0       	rjmp	.+16     	; 0x27a6 <_ZN12OrangutanLCD10initPrintfEv+0x54>
    2796:	e0 91 f6 03 	lds	r30, 0x03F6
    279a:	f0 91 f7 03 	lds	r31, 0x03F7
    279e:	e4 0f       	add	r30, r20
    27a0:	f5 1f       	adc	r31, r21
    27a2:	70 83       	st	Z, r23
    27a4:	6f 5f       	subi	r22, 0xFF	; 255
    27a6:	46 2f       	mov	r20, r22
    27a8:	50 e0       	ldi	r21, 0x00	; 0
    27aa:	80 91 c4 03 	lds	r24, 0x03C4
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	20 91 c5 03 	lds	r18, 0x03C5
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	fc 01       	movw	r30, r24
    27ba:	e2 9f       	mul	r30, r18
    27bc:	c0 01       	movw	r24, r0
    27be:	e3 9f       	mul	r30, r19
    27c0:	90 0d       	add	r25, r0
    27c2:	f2 9f       	mul	r31, r18
    27c4:	90 0d       	add	r25, r0
    27c6:	11 24       	eor	r1, r1
    27c8:	48 17       	cp	r20, r24
    27ca:	59 07       	cpc	r21, r25
    27cc:	24 f3       	brlt	.-56     	; 0x2796 <_ZN12OrangutanLCD10initPrintfEv+0x44>
    27ce:	81 e1       	ldi	r24, 0x11	; 17
    27d0:	96 e1       	ldi	r25, 0x16	; 22
    27d2:	62 e2       	ldi	r22, 0x22	; 34
    27d4:	73 e1       	ldi	r23, 0x13	; 19
    27d6:	0e 94 55 21 	call	0x42aa	; 0x42aa <fdevopen>
    27da:	08 95       	ret

000027dc <_ZN12OrangutanLCD10initPrintfEhh>:
    27dc:	80 93 c5 03 	sts	0x03C5, r24
    27e0:	60 93 c4 03 	sts	0x03C4, r22
    27e4:	0e 94 a9 13 	call	0x2752	; 0x2752 <_ZN12OrangutanLCD10initPrintfEv>
    27e8:	08 95       	ret

000027ea <lcd_init_printf_with_dimensions>:
    27ea:	80 93 c5 03 	sts	0x03C5, r24
    27ee:	60 93 c4 03 	sts	0x03C4, r22
    27f2:	0e 94 a9 13 	call	0x2752	; 0x2752 <_ZN12OrangutanLCD10initPrintfEv>
    27f6:	08 95       	ret

000027f8 <lcd_init_printf>:
    27f8:	0e 94 a9 13 	call	0x2752	; 0x2752 <_ZN12OrangutanLCD10initPrintfEv>
    27fc:	08 95       	ret

000027fe <_ZN12OrangutanLCD5init2Ev>:
    27fe:	3d 98       	cbi	0x07, 5	; 7
    2800:	45 9a       	sbi	0x08, 5	; 8
    2802:	80 e3       	ldi	r24, 0x30	; 48
    2804:	95 e7       	ldi	r25, 0x75	; 117
    2806:	a0 e0       	ldi	r26, 0x00	; 0
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	80 93 fa 03 	sts	0x03FA, r24
    280e:	90 93 fb 03 	sts	0x03FB, r25
    2812:	a0 93 fc 03 	sts	0x03FC, r26
    2816:	b0 93 fd 03 	sts	0x03FD, r27
    281a:	20 9a       	sbi	0x04, 0	; 4
    281c:	21 9a       	sbi	0x04, 1	; 4
    281e:	22 9a       	sbi	0x04, 2	; 4
    2820:	8e e1       	ldi	r24, 0x1E	; 30
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>
    2828:	83 e0       	ldi	r24, 0x03	; 3
    282a:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZN12OrangutanLCD13send_4bit_cmdEh>
    282e:	86 e0       	ldi	r24, 0x06	; 6
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>
    2836:	83 e0       	ldi	r24, 0x03	; 3
    2838:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZN12OrangutanLCD13send_4bit_cmdEh>
    283c:	82 e0       	ldi	r24, 0x02	; 2
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>
    2844:	83 e0       	ldi	r24, 0x03	; 3
    2846:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZN12OrangutanLCD13send_4bit_cmdEh>
    284a:	82 e0       	ldi	r24, 0x02	; 2
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>
    2852:	82 e0       	ldi	r24, 0x02	; 2
    2854:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2858:	82 e0       	ldi	r24, 0x02	; 2
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>
    2860:	88 e2       	ldi	r24, 0x28	; 40
    2862:	0e 94 9e 14 	call	0x293c	; 0x293c <_ZN12OrangutanLCD8send_cmdEh>
    2866:	88 e0       	ldi	r24, 0x08	; 8
    2868:	0e 94 9e 14 	call	0x293c	; 0x293c <_ZN12OrangutanLCD8send_cmdEh>
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	0e 94 9e 14 	call	0x293c	; 0x293c <_ZN12OrangutanLCD8send_cmdEh>
    2872:	86 e0       	ldi	r24, 0x06	; 6
    2874:	0e 94 9e 14 	call	0x293c	; 0x293c <_ZN12OrangutanLCD8send_cmdEh>
    2878:	8c e0       	ldi	r24, 0x0C	; 12
    287a:	0e 94 9e 14 	call	0x293c	; 0x293c <_ZN12OrangutanLCD8send_cmdEh>
    287e:	08 95       	ret

00002880 <_ZN12OrangutanLCD4initEv>:
    2880:	80 91 fe 03 	lds	r24, 0x03FE
    2884:	88 23       	and	r24, r24
    2886:	29 f4       	brne	.+10     	; 0x2892 <_ZN12OrangutanLCD4initEv+0x12>
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	80 93 fe 03 	sts	0x03FE, r24
    288e:	0e 94 ff 13 	call	0x27fe	; 0x27fe <_ZN12OrangutanLCD5init2Ev>
    2892:	08 95       	ret

00002894 <_ZN12OrangutanLCD4sendEhhh>:
    2894:	ff 92       	push	r15
    2896:	0f 93       	push	r16
    2898:	1f 93       	push	r17
    289a:	08 2f       	mov	r16, r24
    289c:	16 2f       	mov	r17, r22
    289e:	f4 2e       	mov	r15, r20
    28a0:	0e 94 40 14 	call	0x2880	; 0x2880 <_ZN12OrangutanLCD4initEv>
    28a4:	0e 94 25 13 	call	0x264a	; 0x264a <_ZN12OrangutanLCD8busyWaitEv>
    28a8:	37 b1       	in	r19, 0x07	; 7
    28aa:	28 b1       	in	r18, 0x08	; 8
    28ac:	29 98       	cbi	0x05, 1	; 5
    28ae:	11 23       	and	r17, r17
    28b0:	11 f0       	breq	.+4      	; 0x28b6 <_ZN12OrangutanLCD4sendEhhh+0x22>
    28b2:	28 9a       	sbi	0x05, 0	; 5
    28b4:	01 c0       	rjmp	.+2      	; 0x28b8 <_ZN12OrangutanLCD4sendEhhh+0x24>
    28b6:	28 98       	cbi	0x05, 0	; 5
    28b8:	87 b1       	in	r24, 0x07	; 7
    28ba:	8c 63       	ori	r24, 0x3C	; 60
    28bc:	87 b9       	out	0x07, r24	; 7
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	f8 16       	cp	r15, r24
    28c2:	e1 f0       	breq	.+56     	; 0x28fc <_ZN12OrangutanLCD4sendEhhh+0x68>
    28c4:	88 b1       	in	r24, 0x08	; 8
    28c6:	90 2f       	mov	r25, r16
    28c8:	92 95       	swap	r25
    28ca:	9f 70       	andi	r25, 0x0F	; 15
    28cc:	99 0f       	add	r25, r25
    28ce:	99 0f       	add	r25, r25
    28d0:	83 7c       	andi	r24, 0xC3	; 195
    28d2:	98 2b       	or	r25, r24
    28d4:	98 b9       	out	0x08, r25	; 8
    28d6:	2a 9a       	sbi	0x05, 2	; 5
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	fc 01       	movw	r30, r24
    28de:	6f 93       	push	r22
    28e0:	64 e0       	ldi	r22, 0x04	; 4
    28e2:	6a 95       	dec	r22
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <_ZN12OrangutanLCD4sendEhhh+0x4e>
    28e6:	6f 91       	pop	r22
    28e8:	31 97       	sbiw	r30, 0x01	; 1
    28ea:	c9 f7       	brne	.-14     	; 0x28de <_ZN12OrangutanLCD4sendEhhh+0x4a>
    28ec:	2a 98       	cbi	0x05, 2	; 5
    28ee:	6f 93       	push	r22
    28f0:	64 e0       	ldi	r22, 0x04	; 4
    28f2:	6a 95       	dec	r22
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <_ZN12OrangutanLCD4sendEhhh+0x5e>
    28f6:	6f 91       	pop	r22
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	c9 f7       	brne	.-14     	; 0x28ee <_ZN12OrangutanLCD4sendEhhh+0x5a>
    28fc:	88 b1       	in	r24, 0x08	; 8
    28fe:	0f 70       	andi	r16, 0x0F	; 15
    2900:	00 0f       	add	r16, r16
    2902:	00 0f       	add	r16, r16
    2904:	83 7c       	andi	r24, 0xC3	; 195
    2906:	80 2b       	or	r24, r16
    2908:	88 b9       	out	0x08, r24	; 8
    290a:	2a 9a       	sbi	0x05, 2	; 5
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	fc 01       	movw	r30, r24
    2912:	6f 93       	push	r22
    2914:	64 e0       	ldi	r22, 0x04	; 4
    2916:	6a 95       	dec	r22
    2918:	f1 f7       	brne	.-4      	; 0x2916 <_ZN12OrangutanLCD4sendEhhh+0x82>
    291a:	6f 91       	pop	r22
    291c:	31 97       	sbiw	r30, 0x01	; 1
    291e:	c9 f7       	brne	.-14     	; 0x2912 <_ZN12OrangutanLCD4sendEhhh+0x7e>
    2920:	2a 98       	cbi	0x05, 2	; 5
    2922:	6f 93       	push	r22
    2924:	64 e0       	ldi	r22, 0x04	; 4
    2926:	6a 95       	dec	r22
    2928:	f1 f7       	brne	.-4      	; 0x2926 <_ZN12OrangutanLCD4sendEhhh+0x92>
    292a:	6f 91       	pop	r22
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	c9 f7       	brne	.-14     	; 0x2922 <_ZN12OrangutanLCD4sendEhhh+0x8e>
    2930:	37 b9       	out	0x07, r19	; 7
    2932:	28 b9       	out	0x08, r18	; 8
    2934:	1f 91       	pop	r17
    2936:	0f 91       	pop	r16
    2938:	ff 90       	pop	r15
    293a:	08 95       	ret

0000293c <_ZN12OrangutanLCD8send_cmdEh>:
    293c:	60 e0       	ldi	r22, 0x00	; 0
    293e:	42 e0       	ldi	r20, 0x02	; 2
    2940:	0e 94 4a 14 	call	0x2894	; 0x2894 <_ZN12OrangutanLCD4sendEhhh>
    2944:	08 95       	ret

00002946 <_ZN12OrangutanLCD10moveCursorEhh>:
    2946:	0f 93       	push	r16
    2948:	1f 93       	push	r17
    294a:	08 2f       	mov	r16, r24
    294c:	16 2f       	mov	r17, r22
    294e:	08 c0       	rjmp	.+16     	; 0x2960 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    2950:	00 23       	and	r16, r16
    2952:	11 f4       	brne	.+4      	; 0x2958 <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    2954:	80 e1       	ldi	r24, 0x10	; 16
    2956:	01 c0       	rjmp	.+2      	; 0x295a <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    2958:	84 e1       	ldi	r24, 0x14	; 20
    295a:	0e 94 9e 14 	call	0x293c	; 0x293c <_ZN12OrangutanLCD8send_cmdEh>
    295e:	11 50       	subi	r17, 0x01	; 1
    2960:	11 23       	and	r17, r17
    2962:	b1 f7       	brne	.-20     	; 0x2950 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    2964:	1f 91       	pop	r17
    2966:	0f 91       	pop	r16
    2968:	08 95       	ret

0000296a <lcd_move_cursor>:
    296a:	0e 94 a3 14 	call	0x2946	; 0x2946 <_ZN12OrangutanLCD10moveCursorEhh>
    296e:	08 95       	ret

00002970 <_ZN12OrangutanLCD10hideCursorEv>:
    2970:	8c e0       	ldi	r24, 0x0C	; 12
    2972:	0e 94 9e 14 	call	0x293c	; 0x293c <_ZN12OrangutanLCD8send_cmdEh>
    2976:	08 95       	ret

00002978 <lcd_hide_cursor>:
    2978:	0e 94 b8 14 	call	0x2970	; 0x2970 <_ZN12OrangutanLCD10hideCursorEv>
    297c:	08 95       	ret

0000297e <_ZN12OrangutanLCD10showCursorEh>:
    297e:	81 30       	cpi	r24, 0x01	; 1
    2980:	11 f4       	brne	.+4      	; 0x2986 <_ZN12OrangutanLCD10showCursorEh+0x8>
    2982:	8f e0       	ldi	r24, 0x0F	; 15
    2984:	01 c0       	rjmp	.+2      	; 0x2988 <_ZN12OrangutanLCD10showCursorEh+0xa>
    2986:	8e e0       	ldi	r24, 0x0E	; 14
    2988:	0e 94 9e 14 	call	0x293c	; 0x293c <_ZN12OrangutanLCD8send_cmdEh>
    298c:	08 95       	ret

0000298e <lcd_show_cursor>:
    298e:	0e 94 bf 14 	call	0x297e	; 0x297e <_ZN12OrangutanLCD10showCursorEh>
    2992:	08 95       	ret

00002994 <_ZN12OrangutanLCD6gotoXYEhh>:
    2994:	a4 e0       	ldi	r26, 0x04	; 4
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e0 ed       	ldi	r30, 0xD0	; 208
    299a:	f4 e1       	ldi	r31, 0x14	; 20
    299c:	0c 94 f2 1f 	jmp	0x3fe4	; 0x3fe4 <__prologue_saves__+0x1c>
    29a0:	18 2f       	mov	r17, r24
    29a2:	06 2f       	mov	r16, r22
    29a4:	80 e8       	ldi	r24, 0x80	; 128
    29a6:	89 83       	std	Y+1, r24	; 0x01
    29a8:	80 ec       	ldi	r24, 0xC0	; 192
    29aa:	8a 83       	std	Y+2, r24	; 0x02
    29ac:	84 e9       	ldi	r24, 0x94	; 148
    29ae:	8b 83       	std	Y+3, r24	; 0x03
    29b0:	84 ed       	ldi	r24, 0xD4	; 212
    29b2:	8c 83       	std	Y+4, r24	; 0x04
    29b4:	fe 01       	movw	r30, r28
    29b6:	e6 0f       	add	r30, r22
    29b8:	f1 1d       	adc	r31, r1
    29ba:	81 81       	ldd	r24, Z+1	; 0x01
    29bc:	81 0f       	add	r24, r17
    29be:	0e 94 9e 14 	call	0x293c	; 0x293c <_ZN12OrangutanLCD8send_cmdEh>
    29c2:	10 93 f9 03 	sts	0x03F9, r17
    29c6:	00 93 f8 03 	sts	0x03F8, r16
    29ca:	24 96       	adiw	r28, 0x04	; 4
    29cc:	e4 e0       	ldi	r30, 0x04	; 4
    29ce:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__epilogue_restores__+0x1c>

000029d2 <lcd_goto_xy>:
    29d2:	0e 94 ca 14 	call	0x2994	; 0x2994 <_ZN12OrangutanLCD6gotoXYEhh>
    29d6:	08 95       	ret

000029d8 <_ZN12OrangutanLCD5clearEv>:
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	0e 94 9e 14 	call	0x293c	; 0x293c <_ZN12OrangutanLCD8send_cmdEh>
    29de:	80 91 f6 03 	lds	r24, 0x03F6
    29e2:	90 91 f7 03 	lds	r25, 0x03F7
    29e6:	89 2b       	or	r24, r25
    29e8:	19 f1       	breq	.+70     	; 0x2a30 <_ZN12OrangutanLCD5clearEv+0x58>
    29ea:	60 e0       	ldi	r22, 0x00	; 0
    29ec:	70 e2       	ldi	r23, 0x20	; 32
    29ee:	08 c0       	rjmp	.+16     	; 0x2a00 <_ZN12OrangutanLCD5clearEv+0x28>
    29f0:	e0 91 f6 03 	lds	r30, 0x03F6
    29f4:	f0 91 f7 03 	lds	r31, 0x03F7
    29f8:	e4 0f       	add	r30, r20
    29fa:	f5 1f       	adc	r31, r21
    29fc:	70 83       	st	Z, r23
    29fe:	6f 5f       	subi	r22, 0xFF	; 255
    2a00:	46 2f       	mov	r20, r22
    2a02:	50 e0       	ldi	r21, 0x00	; 0
    2a04:	80 91 c4 03 	lds	r24, 0x03C4
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	20 91 c5 03 	lds	r18, 0x03C5
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	fc 01       	movw	r30, r24
    2a14:	e2 9f       	mul	r30, r18
    2a16:	c0 01       	movw	r24, r0
    2a18:	e3 9f       	mul	r30, r19
    2a1a:	90 0d       	add	r25, r0
    2a1c:	f2 9f       	mul	r31, r18
    2a1e:	90 0d       	add	r25, r0
    2a20:	11 24       	eor	r1, r1
    2a22:	48 17       	cp	r20, r24
    2a24:	59 07       	cpc	r21, r25
    2a26:	24 f3       	brlt	.-56     	; 0x29f0 <_ZN12OrangutanLCD5clearEv+0x18>
    2a28:	10 92 f9 03 	sts	0x03F9, r1
    2a2c:	10 92 f8 03 	sts	0x03F8, r1
    2a30:	08 95       	ret

00002a32 <clear>:
    2a32:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_ZN12OrangutanLCD5clearEv>
    2a36:	08 95       	ret

00002a38 <_ZN12OrangutanLCD9send_dataEh>:
    2a38:	61 e0       	ldi	r22, 0x01	; 1
    2a3a:	42 e0       	ldi	r20, 0x02	; 2
    2a3c:	0e 94 4a 14 	call	0x2894	; 0x2894 <_ZN12OrangutanLCD4sendEhhh>
    2a40:	08 95       	ret

00002a42 <_ZN12OrangutanLCD11printBinaryEh>:
    2a42:	0f 93       	push	r16
    2a44:	1f 93       	push	r17
    2a46:	cf 93       	push	r28
    2a48:	df 93       	push	r29
    2a4a:	00 e0       	ldi	r16, 0x00	; 0
    2a4c:	10 e8       	ldi	r17, 0x80	; 128
    2a4e:	c8 2f       	mov	r28, r24
    2a50:	d0 e0       	ldi	r29, 0x00	; 0
    2a52:	81 2f       	mov	r24, r17
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	8c 23       	and	r24, r28
    2a58:	9d 23       	and	r25, r29
    2a5a:	89 2b       	or	r24, r25
    2a5c:	11 f0       	breq	.+4      	; 0x2a62 <_ZN12OrangutanLCD11printBinaryEh+0x20>
    2a5e:	81 e3       	ldi	r24, 0x31	; 49
    2a60:	01 c0       	rjmp	.+2      	; 0x2a64 <_ZN12OrangutanLCD11printBinaryEh+0x22>
    2a62:	80 e3       	ldi	r24, 0x30	; 48
    2a64:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD9send_dataEh>
    2a68:	0f 5f       	subi	r16, 0xFF	; 255
    2a6a:	08 30       	cpi	r16, 0x08	; 8
    2a6c:	11 f0       	breq	.+4      	; 0x2a72 <_ZN12OrangutanLCD11printBinaryEh+0x30>
    2a6e:	16 95       	lsr	r17
    2a70:	f0 cf       	rjmp	.-32     	; 0x2a52 <_ZN12OrangutanLCD11printBinaryEh+0x10>
    2a72:	df 91       	pop	r29
    2a74:	cf 91       	pop	r28
    2a76:	1f 91       	pop	r17
    2a78:	0f 91       	pop	r16
    2a7a:	08 95       	ret

00002a7c <print_binary>:
    2a7c:	0e 94 21 15 	call	0x2a42	; 0x2a42 <_ZN12OrangutanLCD11printBinaryEh>
    2a80:	08 95       	ret

00002a82 <_ZN12OrangutanLCD14printHexNibbleEh>:
    2a82:	8a 30       	cpi	r24, 0x0A	; 10
    2a84:	10 f4       	brcc	.+4      	; 0x2a8a <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    2a86:	80 5d       	subi	r24, 0xD0	; 208
    2a88:	01 c0       	rjmp	.+2      	; 0x2a8c <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    2a8a:	89 5c       	subi	r24, 0xC9	; 201
    2a8c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD9send_dataEh>
    2a90:	08 95       	ret

00002a92 <_ZN12OrangutanLCD8printHexEh>:
    2a92:	1f 93       	push	r17
    2a94:	18 2f       	mov	r17, r24
    2a96:	82 95       	swap	r24
    2a98:	8f 70       	andi	r24, 0x0F	; 15
    2a9a:	0e 94 41 15 	call	0x2a82	; 0x2a82 <_ZN12OrangutanLCD14printHexNibbleEh>
    2a9e:	81 2f       	mov	r24, r17
    2aa0:	8f 70       	andi	r24, 0x0F	; 15
    2aa2:	0e 94 41 15 	call	0x2a82	; 0x2a82 <_ZN12OrangutanLCD14printHexNibbleEh>
    2aa6:	1f 91       	pop	r17
    2aa8:	08 95       	ret

00002aaa <_ZN12OrangutanLCD8printHexEj>:
    2aaa:	1f 93       	push	r17
    2aac:	18 2f       	mov	r17, r24
    2aae:	89 2f       	mov	r24, r25
    2ab0:	0e 94 49 15 	call	0x2a92	; 0x2a92 <_ZN12OrangutanLCD8printHexEh>
    2ab4:	81 2f       	mov	r24, r17
    2ab6:	0e 94 49 15 	call	0x2a92	; 0x2a92 <_ZN12OrangutanLCD8printHexEh>
    2aba:	1f 91       	pop	r17
    2abc:	08 95       	ret

00002abe <print_hex>:
    2abe:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <_ZN12OrangutanLCD8printHexEj>
    2ac2:	08 95       	ret

00002ac4 <print_hex_byte>:
    2ac4:	0e 94 49 15 	call	0x2a92	; 0x2a92 <_ZN12OrangutanLCD8printHexEh>
    2ac8:	08 95       	ret

00002aca <_ZN12OrangutanLCD5printEm>:
    2aca:	6f 92       	push	r6
    2acc:	7f 92       	push	r7
    2ace:	8f 92       	push	r8
    2ad0:	9f 92       	push	r9
    2ad2:	af 92       	push	r10
    2ad4:	bf 92       	push	r11
    2ad6:	cf 92       	push	r12
    2ad8:	df 92       	push	r13
    2ada:	ff 92       	push	r15
    2adc:	0f 93       	push	r16
    2ade:	df 93       	push	r29
    2ae0:	cf 93       	push	r28
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
    2ae6:	2a 97       	sbiw	r28, 0x0a	; 10
    2ae8:	0f b6       	in	r0, 0x3f	; 63
    2aea:	f8 94       	cli
    2aec:	de bf       	out	0x3e, r29	; 62
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	cd bf       	out	0x3d, r28	; 61
    2af2:	5b 01       	movw	r10, r22
    2af4:	6c 01       	movw	r12, r24
    2af6:	0a e0       	ldi	r16, 0x0A	; 10
    2af8:	3e 01       	movw	r6, r28
    2afa:	08 94       	sec
    2afc:	61 1c       	adc	r6, r1
    2afe:	71 1c       	adc	r7, r1
    2b00:	fa 2c       	mov	r15, r10
    2b02:	c6 01       	movw	r24, r12
    2b04:	b5 01       	movw	r22, r10
    2b06:	2a e0       	ldi	r18, 0x0A	; 10
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e0       	ldi	r20, 0x00	; 0
    2b0c:	50 e0       	ldi	r21, 0x00	; 0
    2b0e:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <__udivmodsi4>
    2b12:	c9 01       	movw	r24, r18
    2b14:	da 01       	movw	r26, r20
    2b16:	5c 01       	movw	r10, r24
    2b18:	6d 01       	movw	r12, r26
    2b1a:	01 50       	subi	r16, 0x01	; 1
    2b1c:	43 01       	movw	r8, r6
    2b1e:	80 0e       	add	r8, r16
    2b20:	91 1c       	adc	r9, r1
    2b22:	80 e3       	ldi	r24, 0x30	; 48
    2b24:	f8 0e       	add	r15, r24
    2b26:	c6 01       	movw	r24, r12
    2b28:	b5 01       	movw	r22, r10
    2b2a:	2a e0       	ldi	r18, 0x0A	; 10
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <__mulsi3>
    2b36:	f6 1a       	sub	r15, r22
    2b38:	f4 01       	movw	r30, r8
    2b3a:	f0 82       	st	Z, r15
    2b3c:	a1 14       	cp	r10, r1
    2b3e:	b1 04       	cpc	r11, r1
    2b40:	c1 04       	cpc	r12, r1
    2b42:	d1 04       	cpc	r13, r1
    2b44:	e9 f6       	brne	.-70     	; 0x2b00 <_ZN12OrangutanLCD5printEm+0x36>
    2b46:	08 c0       	rjmp	.+16     	; 0x2b58 <_ZN12OrangutanLCD5printEm+0x8e>
    2b48:	f6 01       	movw	r30, r12
    2b4a:	e0 0f       	add	r30, r16
    2b4c:	f1 1d       	adc	r31, r1
    2b4e:	80 81       	ld	r24, Z
    2b50:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD9send_dataEh>
    2b54:	0f 5f       	subi	r16, 0xFF	; 255
    2b56:	04 c0       	rjmp	.+8      	; 0x2b60 <_ZN12OrangutanLCD5printEm+0x96>
    2b58:	6e 01       	movw	r12, r28
    2b5a:	08 94       	sec
    2b5c:	c1 1c       	adc	r12, r1
    2b5e:	d1 1c       	adc	r13, r1
    2b60:	0a 30       	cpi	r16, 0x0A	; 10
    2b62:	90 f3       	brcs	.-28     	; 0x2b48 <_ZN12OrangutanLCD5printEm+0x7e>
    2b64:	2a 96       	adiw	r28, 0x0a	; 10
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	cf 91       	pop	r28
    2b72:	df 91       	pop	r29
    2b74:	0f 91       	pop	r16
    2b76:	ff 90       	pop	r15
    2b78:	df 90       	pop	r13
    2b7a:	cf 90       	pop	r12
    2b7c:	bf 90       	pop	r11
    2b7e:	af 90       	pop	r10
    2b80:	9f 90       	pop	r9
    2b82:	8f 90       	pop	r8
    2b84:	7f 90       	pop	r7
    2b86:	6f 90       	pop	r6
    2b88:	08 95       	ret

00002b8a <print_unsigned_long>:
    2b8a:	0e 94 65 15 	call	0x2aca	; 0x2aca <_ZN12OrangutanLCD5printEm>
    2b8e:	08 95       	ret

00002b90 <_ZN12OrangutanLCD5printEl>:
    2b90:	ef 92       	push	r14
    2b92:	ff 92       	push	r15
    2b94:	0f 93       	push	r16
    2b96:	1f 93       	push	r17
    2b98:	7b 01       	movw	r14, r22
    2b9a:	8c 01       	movw	r16, r24
    2b9c:	97 ff       	sbrs	r25, 7
    2b9e:	0b c0       	rjmp	.+22     	; 0x2bb6 <_ZN12OrangutanLCD5printEl+0x26>
    2ba0:	10 95       	com	r17
    2ba2:	00 95       	com	r16
    2ba4:	f0 94       	com	r15
    2ba6:	e0 94       	com	r14
    2ba8:	e1 1c       	adc	r14, r1
    2baa:	f1 1c       	adc	r15, r1
    2bac:	01 1d       	adc	r16, r1
    2bae:	11 1d       	adc	r17, r1
    2bb0:	8d e2       	ldi	r24, 0x2D	; 45
    2bb2:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD9send_dataEh>
    2bb6:	c8 01       	movw	r24, r16
    2bb8:	b7 01       	movw	r22, r14
    2bba:	0e 94 65 15 	call	0x2aca	; 0x2aca <_ZN12OrangutanLCD5printEm>
    2bbe:	1f 91       	pop	r17
    2bc0:	0f 91       	pop	r16
    2bc2:	ff 90       	pop	r15
    2bc4:	ef 90       	pop	r14
    2bc6:	08 95       	ret

00002bc8 <print_long>:
    2bc8:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <_ZN12OrangutanLCD5printEl>
    2bcc:	08 95       	ret

00002bce <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
    2bd2:	ec 01       	movw	r28, r24
    2bd4:	03 c0       	rjmp	.+6      	; 0x2bdc <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    2bd6:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD9send_dataEh>
    2bda:	21 96       	adiw	r28, 0x01	; 1
    2bdc:	fe 01       	movw	r30, r28
    2bde:	84 91       	lpm	r24, Z+
    2be0:	88 23       	and	r24, r24
    2be2:	c9 f7       	brne	.-14     	; 0x2bd6 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	08 95       	ret

00002bea <print_from_program_space>:
    2bea:	0e 94 e7 15 	call	0x2bce	; 0x2bce <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    2bee:	08 95       	ret

00002bf0 <_ZN12OrangutanLCD5printEPKc>:
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	ec 01       	movw	r28, r24
    2bf6:	03 c0       	rjmp	.+6      	; 0x2bfe <_ZN12OrangutanLCD5printEPKc+0xe>
    2bf8:	21 96       	adiw	r28, 0x01	; 1
    2bfa:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD9send_dataEh>
    2bfe:	88 81       	ld	r24, Y
    2c00:	88 23       	and	r24, r24
    2c02:	d1 f7       	brne	.-12     	; 0x2bf8 <_ZN12OrangutanLCD5printEPKc+0x8>
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	08 95       	ret

00002c0a <_ZN12OrangutanLCD7printInEPKc>:
    2c0a:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <_ZN12OrangutanLCD5printEPKc>
    2c0e:	08 95       	ret

00002c10 <print>:
    2c10:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <_ZN12OrangutanLCD5printEPKc>
    2c14:	08 95       	ret

00002c16 <_ZN12OrangutanLCD5printEc>:
    2c16:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD9send_dataEh>
    2c1a:	08 95       	ret

00002c1c <print_character>:
    2c1c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD9send_dataEh>
    2c20:	08 95       	ret

00002c22 <lcd_putchar>:
    2c22:	a0 e0       	ldi	r26, 0x00	; 0
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	e7 e1       	ldi	r30, 0x17	; 23
    2c28:	f6 e1       	ldi	r31, 0x16	; 22
    2c2a:	0c 94 ee 1f 	jmp	0x3fdc	; 0x3fdc <__prologue_saves__+0x14>
    2c2e:	e8 2e       	mov	r14, r24
    2c30:	80 91 f6 03 	lds	r24, 0x03F6
    2c34:	90 91 f7 03 	lds	r25, 0x03F7
    2c38:	89 2b       	or	r24, r25
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <lcd_putchar+0x1c>
    2c3c:	05 c1       	rjmp	.+522    	; 0x2e48 <lcd_putchar+0x226>
    2c3e:	2a e0       	ldi	r18, 0x0A	; 10
    2c40:	e2 16       	cp	r14, r18
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <lcd_putchar+0x24>
    2c44:	46 c0       	rjmp	.+140    	; 0x2cd2 <lcd_putchar+0xb0>
    2c46:	38 e0       	ldi	r19, 0x08	; 8
    2c48:	e3 16       	cp	r14, r19
    2c4a:	c9 f4       	brne	.+50     	; 0x2c7e <lcd_putchar+0x5c>
    2c4c:	80 91 f9 03 	lds	r24, 0x03F9
    2c50:	81 50       	subi	r24, 0x01	; 1
    2c52:	80 93 f9 03 	sts	0x03F9, r24
    2c56:	8f 3f       	cpi	r24, 0xFF	; 255
    2c58:	51 f4       	brne	.+20     	; 0x2c6e <lcd_putchar+0x4c>
    2c5a:	80 91 f8 03 	lds	r24, 0x03F8
    2c5e:	81 50       	subi	r24, 0x01	; 1
    2c60:	80 93 f8 03 	sts	0x03F8, r24
    2c64:	80 91 c5 03 	lds	r24, 0x03C5
    2c68:	81 50       	subi	r24, 0x01	; 1
    2c6a:	80 93 f9 03 	sts	0x03F9, r24
    2c6e:	80 91 f8 03 	lds	r24, 0x03F8
    2c72:	8f 3f       	cpi	r24, 0xFF	; 255
    2c74:	09 f0       	breq	.+2      	; 0x2c78 <lcd_putchar+0x56>
    2c76:	e2 c0       	rjmp	.+452    	; 0x2e3c <lcd_putchar+0x21a>
    2c78:	10 92 f8 03 	sts	0x03F8, r1
    2c7c:	dd c0       	rjmp	.+442    	; 0x2e38 <lcd_putchar+0x216>
    2c7e:	8e 2d       	mov	r24, r14
    2c80:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD9send_dataEh>
    2c84:	20 91 f8 03 	lds	r18, 0x03F8
    2c88:	22 23       	and	r18, r18
    2c8a:	c9 f0       	breq	.+50     	; 0x2cbe <lcd_putchar+0x9c>
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	21 50       	subi	r18, 0x01	; 1
    2c90:	30 40       	sbci	r19, 0x00	; 0
    2c92:	80 91 c5 03 	lds	r24, 0x03C5
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	ac 01       	movw	r20, r24
    2c9a:	24 9f       	mul	r18, r20
    2c9c:	c0 01       	movw	r24, r0
    2c9e:	25 9f       	mul	r18, r21
    2ca0:	90 0d       	add	r25, r0
    2ca2:	34 9f       	mul	r19, r20
    2ca4:	90 0d       	add	r25, r0
    2ca6:	11 24       	eor	r1, r1
    2ca8:	20 91 f9 03 	lds	r18, 0x03F9
    2cac:	e0 91 f6 03 	lds	r30, 0x03F6
    2cb0:	f0 91 f7 03 	lds	r31, 0x03F7
    2cb4:	e8 0f       	add	r30, r24
    2cb6:	f9 1f       	adc	r31, r25
    2cb8:	e2 0f       	add	r30, r18
    2cba:	f1 1d       	adc	r31, r1
    2cbc:	e0 82       	st	Z, r14
    2cbe:	80 91 f9 03 	lds	r24, 0x03F9
    2cc2:	8f 5f       	subi	r24, 0xFF	; 255
    2cc4:	80 93 f9 03 	sts	0x03F9, r24
    2cc8:	90 91 c5 03 	lds	r25, 0x03C5
    2ccc:	89 17       	cp	r24, r25
    2cce:	09 f0       	breq	.+2      	; 0x2cd2 <lcd_putchar+0xb0>
    2cd0:	bb c0       	rjmp	.+374    	; 0x2e48 <lcd_putchar+0x226>
    2cd2:	40 91 f8 03 	lds	r20, 0x03F8
    2cd6:	24 2f       	mov	r18, r20
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	80 91 c4 03 	lds	r24, 0x03C4
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	28 17       	cp	r18, r24
    2ce4:	39 07       	cpc	r19, r25
    2ce6:	09 f0       	breq	.+2      	; 0x2cea <lcd_putchar+0xc8>
    2ce8:	a4 c0       	rjmp	.+328    	; 0x2e32 <lcd_putchar+0x210>
    2cea:	c0 e0       	ldi	r28, 0x00	; 0
    2cec:	d0 e0       	ldi	r29, 0x00	; 0
    2cee:	44 c0       	rjmp	.+136    	; 0x2d78 <lcd_putchar+0x156>
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	6c 2f       	mov	r22, r28
    2cf4:	0e 94 ca 14 	call	0x2994	; 0x2994 <_ZN12OrangutanLCD6gotoXYEhh>
    2cf8:	ff 24       	eor	r15, r15
    2cfa:	6e 01       	movw	r12, r28
    2cfc:	08 94       	sec
    2cfe:	c1 1c       	adc	r12, r1
    2d00:	d1 1c       	adc	r13, r1
    2d02:	35 c0       	rjmp	.+106    	; 0x2d6e <lcd_putchar+0x14c>
    2d04:	0f 2d       	mov	r16, r15
    2d06:	10 e0       	ldi	r17, 0x00	; 0
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	9c 01       	movw	r18, r24
    2d0c:	c2 9f       	mul	r28, r18
    2d0e:	c0 01       	movw	r24, r0
    2d10:	c3 9f       	mul	r28, r19
    2d12:	90 0d       	add	r25, r0
    2d14:	d2 9f       	mul	r29, r18
    2d16:	90 0d       	add	r25, r0
    2d18:	11 24       	eor	r1, r1
    2d1a:	e0 91 f6 03 	lds	r30, 0x03F6
    2d1e:	f0 91 f7 03 	lds	r31, 0x03F7
    2d22:	e0 0f       	add	r30, r16
    2d24:	f1 1f       	adc	r31, r17
    2d26:	e8 0f       	add	r30, r24
    2d28:	f9 1f       	adc	r31, r25
    2d2a:	80 81       	ld	r24, Z
    2d2c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD9send_dataEh>
    2d30:	e0 91 f6 03 	lds	r30, 0x03F6
    2d34:	f0 91 f7 03 	lds	r31, 0x03F7
    2d38:	80 91 c5 03 	lds	r24, 0x03C5
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	c8 9f       	mul	r28, r24
    2d40:	d0 01       	movw	r26, r0
    2d42:	c9 9f       	mul	r28, r25
    2d44:	b0 0d       	add	r27, r0
    2d46:	d8 9f       	mul	r29, r24
    2d48:	b0 0d       	add	r27, r0
    2d4a:	11 24       	eor	r1, r1
    2d4c:	e0 0f       	add	r30, r16
    2d4e:	f1 1f       	adc	r31, r17
    2d50:	ae 0f       	add	r26, r30
    2d52:	bf 1f       	adc	r27, r31
    2d54:	ac 01       	movw	r20, r24
    2d56:	c4 9e       	mul	r12, r20
    2d58:	c0 01       	movw	r24, r0
    2d5a:	c5 9e       	mul	r12, r21
    2d5c:	90 0d       	add	r25, r0
    2d5e:	d4 9e       	mul	r13, r20
    2d60:	90 0d       	add	r25, r0
    2d62:	11 24       	eor	r1, r1
    2d64:	e8 0f       	add	r30, r24
    2d66:	f9 1f       	adc	r31, r25
    2d68:	80 81       	ld	r24, Z
    2d6a:	8c 93       	st	X, r24
    2d6c:	f3 94       	inc	r15
    2d6e:	80 91 c5 03 	lds	r24, 0x03C5
    2d72:	f8 16       	cp	r15, r24
    2d74:	38 f2       	brcs	.-114    	; 0x2d04 <lcd_putchar+0xe2>
    2d76:	e6 01       	movw	r28, r12
    2d78:	60 91 c4 03 	lds	r22, 0x03C4
    2d7c:	86 2f       	mov	r24, r22
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	02 97       	sbiw	r24, 0x02	; 2
    2d82:	c8 17       	cp	r28, r24
    2d84:	d9 07       	cpc	r29, r25
    2d86:	0c f4       	brge	.+2      	; 0x2d8a <lcd_putchar+0x168>
    2d88:	b3 cf       	rjmp	.-154    	; 0x2cf0 <lcd_putchar+0xce>
    2d8a:	62 30       	cpi	r22, 0x02	; 2
    2d8c:	08 f4       	brcc	.+2      	; 0x2d90 <lcd_putchar+0x16e>
    2d8e:	40 c0       	rjmp	.+128    	; 0x2e10 <lcd_putchar+0x1ee>
    2d90:	62 50       	subi	r22, 0x02	; 2
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	0e 94 ca 14 	call	0x2994	; 0x2994 <_ZN12OrangutanLCD6gotoXYEhh>
    2d98:	ff 24       	eor	r15, r15
    2d9a:	40 e2       	ldi	r20, 0x20	; 32
    2d9c:	d4 2e       	mov	r13, r20
    2d9e:	34 c0       	rjmp	.+104    	; 0x2e08 <lcd_putchar+0x1e6>
    2da0:	0f 2d       	mov	r16, r15
    2da2:	10 e0       	ldi	r17, 0x00	; 0
    2da4:	80 91 c4 03 	lds	r24, 0x03C4
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	02 97       	sbiw	r24, 0x02	; 2
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	ac 01       	movw	r20, r24
    2db0:	42 9f       	mul	r20, r18
    2db2:	c0 01       	movw	r24, r0
    2db4:	43 9f       	mul	r20, r19
    2db6:	90 0d       	add	r25, r0
    2db8:	52 9f       	mul	r21, r18
    2dba:	90 0d       	add	r25, r0
    2dbc:	11 24       	eor	r1, r1
    2dbe:	e0 91 f6 03 	lds	r30, 0x03F6
    2dc2:	f0 91 f7 03 	lds	r31, 0x03F7
    2dc6:	e0 0f       	add	r30, r16
    2dc8:	f1 1f       	adc	r31, r17
    2dca:	e8 0f       	add	r30, r24
    2dcc:	f9 1f       	adc	r31, r25
    2dce:	80 81       	ld	r24, Z
    2dd0:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD9send_dataEh>
    2dd4:	20 91 c4 03 	lds	r18, 0x03C4
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	22 50       	subi	r18, 0x02	; 2
    2ddc:	30 40       	sbci	r19, 0x00	; 0
    2dde:	80 91 c5 03 	lds	r24, 0x03C5
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	ac 01       	movw	r20, r24
    2de6:	24 9f       	mul	r18, r20
    2de8:	c0 01       	movw	r24, r0
    2dea:	25 9f       	mul	r18, r21
    2dec:	90 0d       	add	r25, r0
    2dee:	34 9f       	mul	r19, r20
    2df0:	90 0d       	add	r25, r0
    2df2:	11 24       	eor	r1, r1
    2df4:	e0 91 f6 03 	lds	r30, 0x03F6
    2df8:	f0 91 f7 03 	lds	r31, 0x03F7
    2dfc:	e0 0f       	add	r30, r16
    2dfe:	f1 1f       	adc	r31, r17
    2e00:	e8 0f       	add	r30, r24
    2e02:	f9 1f       	adc	r31, r25
    2e04:	d0 82       	st	Z, r13
    2e06:	f3 94       	inc	r15
    2e08:	20 91 c5 03 	lds	r18, 0x03C5
    2e0c:	f2 16       	cp	r15, r18
    2e0e:	40 f2       	brcs	.-112    	; 0x2da0 <lcd_putchar+0x17e>
    2e10:	60 91 c4 03 	lds	r22, 0x03C4
    2e14:	61 50       	subi	r22, 0x01	; 1
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	0e 94 ca 14 	call	0x2994	; 0x2994 <_ZN12OrangutanLCD6gotoXYEhh>
    2e1c:	00 e0       	ldi	r16, 0x00	; 0
    2e1e:	04 c0       	rjmp	.+8      	; 0x2e28 <lcd_putchar+0x206>
    2e20:	80 e2       	ldi	r24, 0x20	; 32
    2e22:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD9send_dataEh>
    2e26:	0f 5f       	subi	r16, 0xFF	; 255
    2e28:	80 91 c5 03 	lds	r24, 0x03C5
    2e2c:	08 17       	cp	r16, r24
    2e2e:	c0 f3       	brcs	.-16     	; 0x2e20 <lcd_putchar+0x1fe>
    2e30:	03 c0       	rjmp	.+6      	; 0x2e38 <lcd_putchar+0x216>
    2e32:	4f 5f       	subi	r20, 0xFF	; 255
    2e34:	40 93 f8 03 	sts	0x03F8, r20
    2e38:	10 92 f9 03 	sts	0x03F9, r1
    2e3c:	80 91 f9 03 	lds	r24, 0x03F9
    2e40:	60 91 f8 03 	lds	r22, 0x03F8
    2e44:	0e 94 ca 14 	call	0x2994	; 0x2994 <_ZN12OrangutanLCD6gotoXYEhh>
    2e48:	2e 2d       	mov	r18, r14
    2e4a:	33 27       	eor	r19, r19
    2e4c:	27 fd       	sbrc	r18, 7
    2e4e:	30 95       	com	r19
    2e50:	c9 01       	movw	r24, r18
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
    2e56:	e8 e0       	ldi	r30, 0x08	; 8
    2e58:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <__epilogue_restores__+0x14>

00002e5c <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    2e5c:	ef 92       	push	r14
    2e5e:	ff 92       	push	r15
    2e60:	0f 93       	push	r16
    2e62:	1f 93       	push	r17
    2e64:	cf 93       	push	r28
    2e66:	df 93       	push	r29
    2e68:	7c 01       	movw	r14, r24
    2e6a:	06 2f       	mov	r16, r22
    2e6c:	10 e0       	ldi	r17, 0x00	; 0
    2e6e:	53 e0       	ldi	r21, 0x03	; 3
    2e70:	00 0f       	add	r16, r16
    2e72:	11 1f       	adc	r17, r17
    2e74:	5a 95       	dec	r21
    2e76:	e1 f7       	brne	.-8      	; 0x2e70 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    2e78:	c0 e0       	ldi	r28, 0x00	; 0
    2e7a:	d0 e0       	ldi	r29, 0x00	; 0
    2e7c:	9e 01       	movw	r18, r28
    2e7e:	20 0f       	add	r18, r16
    2e80:	82 2f       	mov	r24, r18
    2e82:	80 64       	ori	r24, 0x40	; 64
    2e84:	0e 94 9e 14 	call	0x293c	; 0x293c <_ZN12OrangutanLCD8send_cmdEh>
    2e88:	f7 01       	movw	r30, r14
    2e8a:	ec 0f       	add	r30, r28
    2e8c:	fd 1f       	adc	r31, r29
    2e8e:	e4 91       	lpm	r30, Z+
    2e90:	8e 2f       	mov	r24, r30
    2e92:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD9send_dataEh>
    2e96:	21 96       	adiw	r28, 0x01	; 1
    2e98:	c8 30       	cpi	r28, 0x08	; 8
    2e9a:	d1 05       	cpc	r29, r1
    2e9c:	79 f7       	brne	.-34     	; 0x2e7c <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
    2ea2:	e6 e0       	ldi	r30, 0x06	; 6
    2ea4:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <__epilogue_restores__+0x18>

00002ea8 <lcd_load_custom_character>:
    2ea8:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    2eac:	08 95       	ret

00002eae <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    2eae:	60 e0       	ldi	r22, 0x00	; 0
    2eb0:	41 e0       	ldi	r20, 0x01	; 1
    2eb2:	0e 94 4a 14 	call	0x2894	; 0x2894 <_ZN12OrangutanLCD4sendEhhh>
    2eb6:	08 95       	ret

00002eb8 <_ZN12OrangutanLCD6scrollEhhj>:
    2eb8:	0f 93       	push	r16
    2eba:	1f 93       	push	r17
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	08 2f       	mov	r16, r24
    2ec2:	16 2f       	mov	r17, r22
    2ec4:	ea 01       	movw	r28, r20
    2ec6:	0b c0       	rjmp	.+22     	; 0x2ede <_ZN12OrangutanLCD6scrollEhhj+0x26>
    2ec8:	00 23       	and	r16, r16
    2eca:	11 f4       	brne	.+4      	; 0x2ed0 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    2ecc:	88 e1       	ldi	r24, 0x18	; 24
    2ece:	01 c0       	rjmp	.+2      	; 0x2ed2 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    2ed0:	8c e1       	ldi	r24, 0x1C	; 28
    2ed2:	0e 94 9e 14 	call	0x293c	; 0x293c <_ZN12OrangutanLCD8send_cmdEh>
    2ed6:	ce 01       	movw	r24, r28
    2ed8:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <delay_ms>
    2edc:	11 50       	subi	r17, 0x01	; 1
    2ede:	11 23       	and	r17, r17
    2ee0:	99 f7       	brne	.-26     	; 0x2ec8 <_ZN12OrangutanLCD6scrollEhhj+0x10>
    2ee2:	df 91       	pop	r29
    2ee4:	cf 91       	pop	r28
    2ee6:	1f 91       	pop	r17
    2ee8:	0f 91       	pop	r16
    2eea:	08 95       	ret

00002eec <lcd_scroll>:
    2eec:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN12OrangutanLCD6scrollEhhj>
    2ef0:	08 95       	ret

00002ef2 <serial_get_mode>:
    2ef2:	28 2f       	mov	r18, r24
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	f9 01       	movw	r30, r18
    2ef8:	93 e0       	ldi	r25, 0x03	; 3
    2efa:	ee 0f       	add	r30, r30
    2efc:	ff 1f       	adc	r31, r31
    2efe:	9a 95       	dec	r25
    2f00:	e1 f7       	brne	.-8      	; 0x2efa <serial_get_mode+0x8>
    2f02:	22 0f       	add	r18, r18
    2f04:	33 1f       	adc	r19, r19
    2f06:	e2 0f       	add	r30, r18
    2f08:	f3 1f       	adc	r31, r19
    2f0a:	ea 53       	subi	r30, 0x3A	; 58
    2f0c:	fc 4f       	sbci	r31, 0xFC	; 252
    2f0e:	80 81       	ld	r24, Z
    2f10:	08 95       	ret

00002f12 <serial_get_received_bytes>:
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	fc 01       	movw	r30, r24
    2f16:	ee 0f       	add	r30, r30
    2f18:	ff 1f       	adc	r31, r31
    2f1a:	ee 0f       	add	r30, r30
    2f1c:	ff 1f       	adc	r31, r31
    2f1e:	e8 0f       	add	r30, r24
    2f20:	f9 1f       	adc	r31, r25
    2f22:	ee 0f       	add	r30, r30
    2f24:	ff 1f       	adc	r31, r31
    2f26:	e8 53       	subi	r30, 0x38	; 56
    2f28:	fc 4f       	sbci	r31, 0xFC	; 252
    2f2a:	80 81       	ld	r24, Z
    2f2c:	08 95       	ret

00002f2e <serial_receive_buffer_full>:
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	fc 01       	movw	r30, r24
    2f32:	ee 0f       	add	r30, r30
    2f34:	ff 1f       	adc	r31, r31
    2f36:	ee 0f       	add	r30, r30
    2f38:	ff 1f       	adc	r31, r31
    2f3a:	e8 0f       	add	r30, r24
    2f3c:	f9 1f       	adc	r31, r25
    2f3e:	ee 0f       	add	r30, r30
    2f40:	ff 1f       	adc	r31, r31
    2f42:	e8 53       	subi	r30, 0x38	; 56
    2f44:	fc 4f       	sbci	r31, 0xFC	; 252
    2f46:	20 81       	ld	r18, Z
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	53 e0       	ldi	r21, 0x03	; 3
    2f4e:	ee 0f       	add	r30, r30
    2f50:	ff 1f       	adc	r31, r31
    2f52:	5a 95       	dec	r21
    2f54:	e1 f7       	brne	.-8      	; 0x2f4e <serial_receive_buffer_full+0x20>
    2f56:	88 0f       	add	r24, r24
    2f58:	99 1f       	adc	r25, r25
    2f5a:	e8 0f       	add	r30, r24
    2f5c:	f9 1f       	adc	r31, r25
    2f5e:	ea 53       	subi	r30, 0x3A	; 58
    2f60:	fc 4f       	sbci	r31, 0xFC	; 252
    2f62:	84 81       	ldd	r24, Z+4	; 0x04
    2f64:	28 17       	cp	r18, r24
    2f66:	09 f4       	brne	.+2      	; 0x2f6a <serial_receive_buffer_full+0x3c>
    2f68:	31 e0       	ldi	r19, 0x01	; 1
    2f6a:	83 2f       	mov	r24, r19
    2f6c:	08 95       	ret

00002f6e <serial_get_sent_bytes>:
    2f6e:	28 2f       	mov	r18, r24
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	f9 01       	movw	r30, r18
    2f74:	b3 e0       	ldi	r27, 0x03	; 3
    2f76:	ee 0f       	add	r30, r30
    2f78:	ff 1f       	adc	r31, r31
    2f7a:	ba 95       	dec	r27
    2f7c:	e1 f7       	brne	.-8      	; 0x2f76 <serial_get_sent_bytes+0x8>
    2f7e:	22 0f       	add	r18, r18
    2f80:	33 1f       	adc	r19, r19
    2f82:	e2 0f       	add	r30, r18
    2f84:	f3 1f       	adc	r31, r19
    2f86:	ea 53       	subi	r30, 0x3A	; 58
    2f88:	fc 4f       	sbci	r31, 0xFC	; 252
    2f8a:	81 81       	ldd	r24, Z+1	; 0x01
    2f8c:	08 95       	ret

00002f8e <serial_send_buffer_empty>:
    2f8e:	28 2f       	mov	r18, r24
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	f9 01       	movw	r30, r18
    2f94:	73 e0       	ldi	r23, 0x03	; 3
    2f96:	ee 0f       	add	r30, r30
    2f98:	ff 1f       	adc	r31, r31
    2f9a:	7a 95       	dec	r23
    2f9c:	e1 f7       	brne	.-8      	; 0x2f96 <serial_send_buffer_empty+0x8>
    2f9e:	22 0f       	add	r18, r18
    2fa0:	33 1f       	adc	r19, r19
    2fa2:	e2 0f       	add	r30, r18
    2fa4:	f3 1f       	adc	r31, r19
    2fa6:	ea 53       	subi	r30, 0x3A	; 58
    2fa8:	fc 4f       	sbci	r31, 0xFC	; 252
    2faa:	91 81       	ldd	r25, Z+1	; 0x01
    2fac:	40 e0       	ldi	r20, 0x00	; 0
    2fae:	28 2f       	mov	r18, r24
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	f9 01       	movw	r30, r18
    2fb4:	53 e0       	ldi	r21, 0x03	; 3
    2fb6:	ee 0f       	add	r30, r30
    2fb8:	ff 1f       	adc	r31, r31
    2fba:	5a 95       	dec	r21
    2fbc:	e1 f7       	brne	.-8      	; 0x2fb6 <serial_send_buffer_empty+0x28>
    2fbe:	22 0f       	add	r18, r18
    2fc0:	33 1f       	adc	r19, r19
    2fc2:	e2 0f       	add	r30, r18
    2fc4:	f3 1f       	adc	r31, r19
    2fc6:	ea 53       	subi	r30, 0x3A	; 58
    2fc8:	fc 4f       	sbci	r31, 0xFC	; 252
    2fca:	83 81       	ldd	r24, Z+3	; 0x03
    2fcc:	98 17       	cp	r25, r24
    2fce:	09 f4       	brne	.+2      	; 0x2fd2 <serial_send_buffer_empty+0x44>
    2fd0:	41 e0       	ldi	r20, 0x01	; 1
    2fd2:	84 2f       	mov	r24, r20
    2fd4:	08 95       	ret

00002fd6 <_ZN15OrangutanSerialC2Ev>:
    2fd6:	08 95       	ret

00002fd8 <_ZN15OrangutanSerialC1Ev>:
    2fd8:	08 95       	ret

00002fda <_ZN15OrangutanSerial8initPortEh>:
    2fda:	88 23       	and	r24, r24
    2fdc:	21 f0       	breq	.+8      	; 0x2fe6 <_ZN15OrangutanSerial8initPortEh+0xc>
    2fde:	81 30       	cpi	r24, 0x01	; 1
    2fe0:	09 f0       	breq	.+2      	; 0x2fe4 <_ZN15OrangutanSerial8initPortEh+0xa>
    2fe2:	44 c0       	rjmp	.+136    	; 0x306c <_ZN15OrangutanSerial8initPortEh+0x92>
    2fe4:	1d c0       	rjmp	.+58     	; 0x3020 <_ZN15OrangutanSerial8initPortEh+0x46>
    2fe6:	20 91 c6 03 	lds	r18, 0x03C6
    2fea:	22 23       	and	r18, r18
    2fec:	11 f4       	brne	.+4      	; 0x2ff2 <_ZN15OrangutanSerial8initPortEh+0x18>
    2fee:	88 e9       	ldi	r24, 0x98	; 152
    2ff0:	01 c0       	rjmp	.+2      	; 0x2ff4 <_ZN15OrangutanSerial8initPortEh+0x1a>
    2ff2:	88 e1       	ldi	r24, 0x18	; 24
    2ff4:	80 93 c1 00 	sts	0x00C1, r24
    2ff8:	80 91 cc 03 	lds	r24, 0x03CC
    2ffc:	90 91 cd 03 	lds	r25, 0x03CD
    3000:	89 2b       	or	r24, r25
    3002:	61 f1       	breq	.+88     	; 0x305c <_ZN15OrangutanSerial8initPortEh+0x82>
    3004:	90 91 c7 03 	lds	r25, 0x03C7
    3008:	80 91 c9 03 	lds	r24, 0x03C9
    300c:	98 17       	cp	r25, r24
    300e:	30 f5       	brcc	.+76     	; 0x305c <_ZN15OrangutanSerial8initPortEh+0x82>
    3010:	22 23       	and	r18, r18
    3012:	21 f5       	brne	.+72     	; 0x305c <_ZN15OrangutanSerial8initPortEh+0x82>
    3014:	80 91 c1 00 	lds	r24, 0x00C1
    3018:	80 62       	ori	r24, 0x20	; 32
    301a:	80 93 c1 00 	sts	0x00C1, r24
    301e:	1c c0       	rjmp	.+56     	; 0x3058 <_ZN15OrangutanSerial8initPortEh+0x7e>
    3020:	20 91 d0 03 	lds	r18, 0x03D0
    3024:	22 23       	and	r18, r18
    3026:	11 f4       	brne	.+4      	; 0x302c <_ZN15OrangutanSerial8initPortEh+0x52>
    3028:	88 e9       	ldi	r24, 0x98	; 152
    302a:	01 c0       	rjmp	.+2      	; 0x302e <_ZN15OrangutanSerial8initPortEh+0x54>
    302c:	88 e1       	ldi	r24, 0x18	; 24
    302e:	80 93 c9 00 	sts	0x00C9, r24
    3032:	80 91 d6 03 	lds	r24, 0x03D6
    3036:	90 91 d7 03 	lds	r25, 0x03D7
    303a:	89 2b       	or	r24, r25
    303c:	99 f0       	breq	.+38     	; 0x3064 <_ZN15OrangutanSerial8initPortEh+0x8a>
    303e:	90 91 d1 03 	lds	r25, 0x03D1
    3042:	80 91 d3 03 	lds	r24, 0x03D3
    3046:	98 17       	cp	r25, r24
    3048:	68 f4       	brcc	.+26     	; 0x3064 <_ZN15OrangutanSerial8initPortEh+0x8a>
    304a:	22 23       	and	r18, r18
    304c:	59 f4       	brne	.+22     	; 0x3064 <_ZN15OrangutanSerial8initPortEh+0x8a>
    304e:	80 91 c9 00 	lds	r24, 0x00C9
    3052:	80 62       	ori	r24, 0x20	; 32
    3054:	80 93 c9 00 	sts	0x00C9, r24
    3058:	78 94       	sei
    305a:	08 95       	ret
    305c:	80 91 c1 00 	lds	r24, 0x00C1
    3060:	8f 7d       	andi	r24, 0xDF	; 223
    3062:	db cf       	rjmp	.-74     	; 0x301a <_ZN15OrangutanSerial8initPortEh+0x40>
    3064:	80 91 c9 00 	lds	r24, 0x00C9
    3068:	8f 7d       	andi	r24, 0xDF	; 223
    306a:	f4 cf       	rjmp	.-24     	; 0x3054 <_ZN15OrangutanSerial8initPortEh+0x7a>
    306c:	08 95       	ret

0000306e <serial_set_mode>:
    306e:	28 2f       	mov	r18, r24
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	f9 01       	movw	r30, r18
    3074:	b3 e0       	ldi	r27, 0x03	; 3
    3076:	ee 0f       	add	r30, r30
    3078:	ff 1f       	adc	r31, r31
    307a:	ba 95       	dec	r27
    307c:	e1 f7       	brne	.-8      	; 0x3076 <serial_set_mode+0x8>
    307e:	22 0f       	add	r18, r18
    3080:	33 1f       	adc	r19, r19
    3082:	e2 0f       	add	r30, r18
    3084:	f3 1f       	adc	r31, r19
    3086:	ea 53       	subi	r30, 0x3A	; 58
    3088:	fc 4f       	sbci	r31, 0xFC	; 252
    308a:	60 83       	st	Z, r22
    308c:	0e 94 ed 17 	call	0x2fda	; 0x2fda <_ZN15OrangutanSerial8initPortEh>
    3090:	08 95       	ret

00003092 <_ZN15OrangutanSerial11setBaudRateEhm>:
    3092:	a0 e0       	ldi	r26, 0x00	; 0
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	ef e4       	ldi	r30, 0x4F	; 79
    3098:	f8 e1       	ldi	r31, 0x18	; 24
    309a:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__prologue_saves__+0x16>
    309e:	d8 2e       	mov	r13, r24
    30a0:	7a 01       	movw	r14, r20
    30a2:	8b 01       	movw	r16, r22
    30a4:	0e 94 ed 17 	call	0x2fda	; 0x2fda <_ZN15OrangutanSerial8initPortEh>
    30a8:	82 e0       	ldi	r24, 0x02	; 2
    30aa:	d8 16       	cp	r13, r24
    30ac:	19 f1       	breq	.+70     	; 0x30f4 <_ZN15OrangutanSerial11setBaudRateEhm+0x62>
    30ae:	dd 20       	and	r13, r13
    30b0:	19 f0       	breq	.+6      	; 0x30b8 <_ZN15OrangutanSerial11setBaudRateEhm+0x26>
    30b2:	cc ec       	ldi	r28, 0xCC	; 204
    30b4:	d0 e0       	ldi	r29, 0x00	; 0
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <_ZN15OrangutanSerial11setBaudRateEhm+0x2a>
    30b8:	c4 ec       	ldi	r28, 0xC4	; 196
    30ba:	d0 e0       	ldi	r29, 0x00	; 0
    30bc:	60 ea       	ldi	r22, 0xA0	; 160
    30be:	75 e2       	ldi	r23, 0x25	; 37
    30c0:	86 e2       	ldi	r24, 0x26	; 38
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	6e 19       	sub	r22, r14
    30c6:	7f 09       	sbc	r23, r15
    30c8:	80 0b       	sbc	r24, r16
    30ca:	91 0b       	sbc	r25, r17
    30cc:	33 e0       	ldi	r19, 0x03	; 3
    30ce:	66 0f       	add	r22, r22
    30d0:	77 1f       	adc	r23, r23
    30d2:	88 1f       	adc	r24, r24
    30d4:	99 1f       	adc	r25, r25
    30d6:	3a 95       	dec	r19
    30d8:	d1 f7       	brne	.-12     	; 0x30ce <_ZN15OrangutanSerial11setBaudRateEhm+0x3c>
    30da:	24 e0       	ldi	r18, 0x04	; 4
    30dc:	ee 0c       	add	r14, r14
    30de:	ff 1c       	adc	r15, r15
    30e0:	00 1f       	adc	r16, r16
    30e2:	11 1f       	adc	r17, r17
    30e4:	2a 95       	dec	r18
    30e6:	d1 f7       	brne	.-12     	; 0x30dc <_ZN15OrangutanSerial11setBaudRateEhm+0x4a>
    30e8:	a8 01       	movw	r20, r16
    30ea:	97 01       	movw	r18, r14
    30ec:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <__udivmodsi4>
    30f0:	39 83       	std	Y+1, r19	; 0x01
    30f2:	28 83       	st	Y, r18
    30f4:	cd b7       	in	r28, 0x3d	; 61
    30f6:	de b7       	in	r29, 0x3e	; 62
    30f8:	e7 e0       	ldi	r30, 0x07	; 7
    30fa:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <__epilogue_restores__+0x16>

000030fe <serial_set_baud_rate>:
    30fe:	0e 94 49 18 	call	0x3092	; 0x3092 <_ZN15OrangutanSerial11setBaudRateEhm>
    3102:	08 95       	ret

00003104 <_ZN15OrangutanSerial7setModeEhh>:
    3104:	28 2f       	mov	r18, r24
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	f9 01       	movw	r30, r18
    310a:	53 e0       	ldi	r21, 0x03	; 3
    310c:	ee 0f       	add	r30, r30
    310e:	ff 1f       	adc	r31, r31
    3110:	5a 95       	dec	r21
    3112:	e1 f7       	brne	.-8      	; 0x310c <_ZN15OrangutanSerial7setModeEhh+0x8>
    3114:	22 0f       	add	r18, r18
    3116:	33 1f       	adc	r19, r19
    3118:	e2 0f       	add	r30, r18
    311a:	f3 1f       	adc	r31, r19
    311c:	ea 53       	subi	r30, 0x3A	; 58
    311e:	fc 4f       	sbci	r31, 0xFC	; 252
    3120:	60 83       	st	Z, r22
    3122:	0e 94 ed 17 	call	0x2fda	; 0x2fda <_ZN15OrangutanSerial8initPortEh>
    3126:	08 95       	ret

00003128 <_ZN15OrangutanSerial7receiveEhPch>:
    3128:	58 2f       	mov	r21, r24
    312a:	82 30       	cpi	r24, 0x02	; 2
    312c:	51 f0       	breq	.+20     	; 0x3142 <_ZN15OrangutanSerial7receiveEhPch+0x1a>
    312e:	88 23       	and	r24, r24
    3130:	19 f0       	breq	.+6      	; 0x3138 <_ZN15OrangutanSerial7receiveEhPch+0x10>
    3132:	e9 ec       	ldi	r30, 0xC9	; 201
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	02 c0       	rjmp	.+4      	; 0x313c <_ZN15OrangutanSerial7receiveEhPch+0x14>
    3138:	e1 ec       	ldi	r30, 0xC1	; 193
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	80 81       	ld	r24, Z
    313e:	8f 77       	andi	r24, 0x7F	; 127
    3140:	80 83       	st	Z, r24
    3142:	25 2f       	mov	r18, r21
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	d9 01       	movw	r26, r18
    3148:	aa 0f       	add	r26, r26
    314a:	bb 1f       	adc	r27, r27
    314c:	c9 01       	movw	r24, r18
    314e:	e3 e0       	ldi	r30, 0x03	; 3
    3150:	88 0f       	add	r24, r24
    3152:	99 1f       	adc	r25, r25
    3154:	ea 95       	dec	r30
    3156:	e1 f7       	brne	.-8      	; 0x3150 <_ZN15OrangutanSerial7receiveEhPch+0x28>
    3158:	a8 0f       	add	r26, r24
    315a:	b9 1f       	adc	r27, r25
    315c:	aa 53       	subi	r26, 0x3A	; 58
    315e:	bc 4f       	sbci	r27, 0xFC	; 252
    3160:	19 96       	adiw	r26, 0x09	; 9
    3162:	7c 93       	st	X, r23
    3164:	6e 93       	st	-X, r22
    3166:	18 97       	sbiw	r26, 0x08	; 8
    3168:	f9 01       	movw	r30, r18
    316a:	ee 0f       	add	r30, r30
    316c:	ff 1f       	adc	r31, r31
    316e:	ee 0f       	add	r30, r30
    3170:	ff 1f       	adc	r31, r31
    3172:	e2 0f       	add	r30, r18
    3174:	f3 1f       	adc	r31, r19
    3176:	ee 0f       	add	r30, r30
    3178:	ff 1f       	adc	r31, r31
    317a:	e8 53       	subi	r30, 0x38	; 56
    317c:	fc 4f       	sbci	r31, 0xFC	; 252
    317e:	10 82       	st	Z, r1
    3180:	14 96       	adiw	r26, 0x04	; 4
    3182:	4c 93       	st	X, r20
    3184:	14 97       	sbiw	r26, 0x04	; 4
    3186:	15 96       	adiw	r26, 0x05	; 5
    3188:	1c 92       	st	X, r1
    318a:	15 97       	sbiw	r26, 0x05	; 5
    318c:	52 30       	cpi	r21, 0x02	; 2
    318e:	69 f0       	breq	.+26     	; 0x31aa <_ZN15OrangutanSerial7receiveEhPch+0x82>
    3190:	8c 91       	ld	r24, X
    3192:	88 23       	and	r24, r24
    3194:	51 f4       	brne	.+20     	; 0x31aa <_ZN15OrangutanSerial7receiveEhPch+0x82>
    3196:	55 23       	and	r21, r21
    3198:	19 f0       	breq	.+6      	; 0x31a0 <_ZN15OrangutanSerial7receiveEhPch+0x78>
    319a:	e9 ec       	ldi	r30, 0xC9	; 201
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <_ZN15OrangutanSerial7receiveEhPch+0x7c>
    31a0:	e1 ec       	ldi	r30, 0xC1	; 193
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	80 68       	ori	r24, 0x80	; 128
    31a8:	80 83       	st	Z, r24
    31aa:	08 95       	ret

000031ac <serial_receive>:
    31ac:	0e 94 94 18 	call	0x3128	; 0x3128 <_ZN15OrangutanSerial7receiveEhPch>
    31b0:	08 95       	ret

000031b2 <_ZN15OrangutanSerial11receiveRingEhPch>:
    31b2:	58 2f       	mov	r21, r24
    31b4:	82 30       	cpi	r24, 0x02	; 2
    31b6:	51 f0       	breq	.+20     	; 0x31cc <_ZN15OrangutanSerial11receiveRingEhPch+0x1a>
    31b8:	88 23       	and	r24, r24
    31ba:	19 f0       	breq	.+6      	; 0x31c2 <_ZN15OrangutanSerial11receiveRingEhPch+0x10>
    31bc:	e9 ec       	ldi	r30, 0xC9	; 201
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	02 c0       	rjmp	.+4      	; 0x31c6 <_ZN15OrangutanSerial11receiveRingEhPch+0x14>
    31c2:	e1 ec       	ldi	r30, 0xC1	; 193
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	8f 77       	andi	r24, 0x7F	; 127
    31ca:	80 83       	st	Z, r24
    31cc:	25 2f       	mov	r18, r21
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	d9 01       	movw	r26, r18
    31d2:	aa 0f       	add	r26, r26
    31d4:	bb 1f       	adc	r27, r27
    31d6:	c9 01       	movw	r24, r18
    31d8:	e3 e0       	ldi	r30, 0x03	; 3
    31da:	88 0f       	add	r24, r24
    31dc:	99 1f       	adc	r25, r25
    31de:	ea 95       	dec	r30
    31e0:	e1 f7       	brne	.-8      	; 0x31da <_ZN15OrangutanSerial11receiveRingEhPch+0x28>
    31e2:	a8 0f       	add	r26, r24
    31e4:	b9 1f       	adc	r27, r25
    31e6:	aa 53       	subi	r26, 0x3A	; 58
    31e8:	bc 4f       	sbci	r27, 0xFC	; 252
    31ea:	19 96       	adiw	r26, 0x09	; 9
    31ec:	7c 93       	st	X, r23
    31ee:	6e 93       	st	-X, r22
    31f0:	18 97       	sbiw	r26, 0x08	; 8
    31f2:	f9 01       	movw	r30, r18
    31f4:	ee 0f       	add	r30, r30
    31f6:	ff 1f       	adc	r31, r31
    31f8:	ee 0f       	add	r30, r30
    31fa:	ff 1f       	adc	r31, r31
    31fc:	e2 0f       	add	r30, r18
    31fe:	f3 1f       	adc	r31, r19
    3200:	ee 0f       	add	r30, r30
    3202:	ff 1f       	adc	r31, r31
    3204:	e8 53       	subi	r30, 0x38	; 56
    3206:	fc 4f       	sbci	r31, 0xFC	; 252
    3208:	10 82       	st	Z, r1
    320a:	14 96       	adiw	r26, 0x04	; 4
    320c:	4c 93       	st	X, r20
    320e:	14 97       	sbiw	r26, 0x04	; 4
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	15 96       	adiw	r26, 0x05	; 5
    3214:	8c 93       	st	X, r24
    3216:	15 97       	sbiw	r26, 0x05	; 5
    3218:	52 30       	cpi	r21, 0x02	; 2
    321a:	69 f0       	breq	.+26     	; 0x3236 <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    321c:	8c 91       	ld	r24, X
    321e:	88 23       	and	r24, r24
    3220:	51 f4       	brne	.+20     	; 0x3236 <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    3222:	55 23       	and	r21, r21
    3224:	19 f0       	breq	.+6      	; 0x322c <_ZN15OrangutanSerial11receiveRingEhPch+0x7a>
    3226:	e9 ec       	ldi	r30, 0xC9	; 201
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <_ZN15OrangutanSerial11receiveRingEhPch+0x7e>
    322c:	e1 ec       	ldi	r30, 0xC1	; 193
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	80 68       	ori	r24, 0x80	; 128
    3234:	80 83       	st	Z, r24
    3236:	08 95       	ret

00003238 <serial_receive_ring>:
    3238:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN15OrangutanSerial11receiveRingEhPch>
    323c:	08 95       	ret

0000323e <_ZN15OrangutanSerial13cancelReceiveEh>:
    323e:	60 e0       	ldi	r22, 0x00	; 0
    3240:	70 e0       	ldi	r23, 0x00	; 0
    3242:	40 e0       	ldi	r20, 0x00	; 0
    3244:	0e 94 94 18 	call	0x3128	; 0x3128 <_ZN15OrangutanSerial7receiveEhPch>
    3248:	08 95       	ret

0000324a <serial_cancel_receive>:
    324a:	0e 94 1f 19 	call	0x323e	; 0x323e <_ZN15OrangutanSerial13cancelReceiveEh>
    324e:	08 95       	ret

00003250 <__vector_20>:
    3250:	1f 92       	push	r1
    3252:	0f 92       	push	r0
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	0f 92       	push	r0
    3258:	0b b6       	in	r0, 0x3b	; 59
    325a:	0f 92       	push	r0
    325c:	11 24       	eor	r1, r1
    325e:	2f 93       	push	r18
    3260:	8f 93       	push	r24
    3262:	9f 93       	push	r25
    3264:	ef 93       	push	r30
    3266:	ff 93       	push	r31
    3268:	20 91 c6 00 	lds	r18, 0x00C6
    326c:	e0 91 ce 03 	lds	r30, 0x03CE
    3270:	f0 91 cf 03 	lds	r31, 0x03CF
    3274:	30 97       	sbiw	r30, 0x00	; 0
    3276:	81 f0       	breq	.+32     	; 0x3298 <__vector_20+0x48>
    3278:	90 91 c8 03 	lds	r25, 0x03C8
    327c:	80 91 ca 03 	lds	r24, 0x03CA
    3280:	98 17       	cp	r25, r24
    3282:	50 f4       	brcc	.+20     	; 0x3298 <__vector_20+0x48>
    3284:	80 91 c8 03 	lds	r24, 0x03C8
    3288:	e8 0f       	add	r30, r24
    328a:	f1 1d       	adc	r31, r1
    328c:	20 83       	st	Z, r18
    328e:	80 91 c8 03 	lds	r24, 0x03C8
    3292:	8f 5f       	subi	r24, 0xFF	; 255
    3294:	80 93 c8 03 	sts	0x03C8, r24
    3298:	90 91 c8 03 	lds	r25, 0x03C8
    329c:	80 91 ca 03 	lds	r24, 0x03CA
    32a0:	98 17       	cp	r25, r24
    32a2:	31 f4       	brne	.+12     	; 0x32b0 <__vector_20+0x60>
    32a4:	80 91 cb 03 	lds	r24, 0x03CB
    32a8:	88 23       	and	r24, r24
    32aa:	11 f0       	breq	.+4      	; 0x32b0 <__vector_20+0x60>
    32ac:	10 92 c8 03 	sts	0x03C8, r1
    32b0:	ff 91       	pop	r31
    32b2:	ef 91       	pop	r30
    32b4:	9f 91       	pop	r25
    32b6:	8f 91       	pop	r24
    32b8:	2f 91       	pop	r18
    32ba:	0f 90       	pop	r0
    32bc:	0b be       	out	0x3b, r0	; 59
    32be:	0f 90       	pop	r0
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	0f 90       	pop	r0
    32c4:	1f 90       	pop	r1
    32c6:	18 95       	reti

000032c8 <__vector_28>:
    32c8:	1f 92       	push	r1
    32ca:	0f 92       	push	r0
    32cc:	0f b6       	in	r0, 0x3f	; 63
    32ce:	0f 92       	push	r0
    32d0:	0b b6       	in	r0, 0x3b	; 59
    32d2:	0f 92       	push	r0
    32d4:	11 24       	eor	r1, r1
    32d6:	2f 93       	push	r18
    32d8:	8f 93       	push	r24
    32da:	9f 93       	push	r25
    32dc:	ef 93       	push	r30
    32de:	ff 93       	push	r31
    32e0:	20 91 ce 00 	lds	r18, 0x00CE
    32e4:	e0 91 d8 03 	lds	r30, 0x03D8
    32e8:	f0 91 d9 03 	lds	r31, 0x03D9
    32ec:	30 97       	sbiw	r30, 0x00	; 0
    32ee:	81 f0       	breq	.+32     	; 0x3310 <__vector_28+0x48>
    32f0:	90 91 d2 03 	lds	r25, 0x03D2
    32f4:	80 91 d4 03 	lds	r24, 0x03D4
    32f8:	98 17       	cp	r25, r24
    32fa:	50 f4       	brcc	.+20     	; 0x3310 <__vector_28+0x48>
    32fc:	80 91 d2 03 	lds	r24, 0x03D2
    3300:	e8 0f       	add	r30, r24
    3302:	f1 1d       	adc	r31, r1
    3304:	20 83       	st	Z, r18
    3306:	80 91 d2 03 	lds	r24, 0x03D2
    330a:	8f 5f       	subi	r24, 0xFF	; 255
    330c:	80 93 d2 03 	sts	0x03D2, r24
    3310:	90 91 d2 03 	lds	r25, 0x03D2
    3314:	80 91 d4 03 	lds	r24, 0x03D4
    3318:	98 17       	cp	r25, r24
    331a:	31 f4       	brne	.+12     	; 0x3328 <__vector_28+0x60>
    331c:	80 91 d5 03 	lds	r24, 0x03D5
    3320:	88 23       	and	r24, r24
    3322:	11 f0       	breq	.+4      	; 0x3328 <__vector_28+0x60>
    3324:	10 92 d2 03 	sts	0x03D2, r1
    3328:	ff 91       	pop	r31
    332a:	ef 91       	pop	r30
    332c:	9f 91       	pop	r25
    332e:	8f 91       	pop	r24
    3330:	2f 91       	pop	r18
    3332:	0f 90       	pop	r0
    3334:	0b be       	out	0x3b, r0	; 59
    3336:	0f 90       	pop	r0
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	0f 90       	pop	r0
    333c:	1f 90       	pop	r1
    333e:	18 95       	reti

00003340 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    3340:	cf 93       	push	r28
    3342:	df 93       	push	r29
    3344:	38 2f       	mov	r19, r24
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	fc 01       	movw	r30, r24
    334a:	53 e0       	ldi	r21, 0x03	; 3
    334c:	ee 0f       	add	r30, r30
    334e:	ff 1f       	adc	r31, r31
    3350:	5a 95       	dec	r21
    3352:	e1 f7       	brne	.-8      	; 0x334c <_ZN15OrangutanSerial11uart_tx_isrEh+0xc>
    3354:	88 0f       	add	r24, r24
    3356:	99 1f       	adc	r25, r25
    3358:	e8 0f       	add	r30, r24
    335a:	f9 1f       	adc	r31, r25
    335c:	ea 53       	subi	r30, 0x3A	; 58
    335e:	fc 4f       	sbci	r31, 0xFC	; 252
    3360:	a6 81       	ldd	r26, Z+6	; 0x06
    3362:	b7 81       	ldd	r27, Z+7	; 0x07
    3364:	10 97       	sbiw	r26, 0x00	; 0
    3366:	09 f4       	brne	.+2      	; 0x336a <_ZN15OrangutanSerial11uart_tx_isrEh+0x2a>
    3368:	64 c0       	rjmp	.+200    	; 0x3432 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    336a:	83 2f       	mov	r24, r19
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	fc 01       	movw	r30, r24
    3370:	23 e0       	ldi	r18, 0x03	; 3
    3372:	ee 0f       	add	r30, r30
    3374:	ff 1f       	adc	r31, r31
    3376:	2a 95       	dec	r18
    3378:	e1 f7       	brne	.-8      	; 0x3372 <_ZN15OrangutanSerial11uart_tx_isrEh+0x32>
    337a:	88 0f       	add	r24, r24
    337c:	99 1f       	adc	r25, r25
    337e:	e8 0f       	add	r30, r24
    3380:	f9 1f       	adc	r31, r25
    3382:	ea 53       	subi	r30, 0x3A	; 58
    3384:	fc 4f       	sbci	r31, 0xFC	; 252
    3386:	21 81       	ldd	r18, Z+1	; 0x01
    3388:	83 2f       	mov	r24, r19
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	fc 01       	movw	r30, r24
    338e:	63 e0       	ldi	r22, 0x03	; 3
    3390:	ee 0f       	add	r30, r30
    3392:	ff 1f       	adc	r31, r31
    3394:	6a 95       	dec	r22
    3396:	e1 f7       	brne	.-8      	; 0x3390 <_ZN15OrangutanSerial11uart_tx_isrEh+0x50>
    3398:	88 0f       	add	r24, r24
    339a:	99 1f       	adc	r25, r25
    339c:	e8 0f       	add	r30, r24
    339e:	f9 1f       	adc	r31, r25
    33a0:	ea 53       	subi	r30, 0x3A	; 58
    33a2:	fc 4f       	sbci	r31, 0xFC	; 252
    33a4:	83 81       	ldd	r24, Z+3	; 0x03
    33a6:	28 17       	cp	r18, r24
    33a8:	08 f0       	brcs	.+2      	; 0x33ac <_ZN15OrangutanSerial11uart_tx_isrEh+0x6c>
    33aa:	43 c0       	rjmp	.+134    	; 0x3432 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    33ac:	33 23       	and	r19, r19
    33ae:	19 f0       	breq	.+6      	; 0x33b6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x76>
    33b0:	e8 ec       	ldi	r30, 0xC8	; 200
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	02 c0       	rjmp	.+4      	; 0x33ba <_ZN15OrangutanSerial11uart_tx_isrEh+0x7a>
    33b6:	e0 ec       	ldi	r30, 0xC0	; 192
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	80 81       	ld	r24, Z
    33bc:	85 ff       	sbrs	r24, 5
    33be:	39 c0       	rjmp	.+114    	; 0x3432 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    33c0:	33 23       	and	r19, r19
    33c2:	19 f0       	breq	.+6      	; 0x33ca <_ZN15OrangutanSerial11uart_tx_isrEh+0x8a>
    33c4:	ce ec       	ldi	r28, 0xCE	; 206
    33c6:	d0 e0       	ldi	r29, 0x00	; 0
    33c8:	02 c0       	rjmp	.+4      	; 0x33ce <_ZN15OrangutanSerial11uart_tx_isrEh+0x8e>
    33ca:	c6 ec       	ldi	r28, 0xC6	; 198
    33cc:	d0 e0       	ldi	r29, 0x00	; 0
    33ce:	83 2f       	mov	r24, r19
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	fc 01       	movw	r30, r24
    33d4:	43 e0       	ldi	r20, 0x03	; 3
    33d6:	ee 0f       	add	r30, r30
    33d8:	ff 1f       	adc	r31, r31
    33da:	4a 95       	dec	r20
    33dc:	e1 f7       	brne	.-8      	; 0x33d6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x96>
    33de:	88 0f       	add	r24, r24
    33e0:	99 1f       	adc	r25, r25
    33e2:	e8 0f       	add	r30, r24
    33e4:	f9 1f       	adc	r31, r25
    33e6:	ea 53       	subi	r30, 0x3A	; 58
    33e8:	fc 4f       	sbci	r31, 0xFC	; 252
    33ea:	81 81       	ldd	r24, Z+1	; 0x01
    33ec:	a8 0f       	add	r26, r24
    33ee:	b1 1d       	adc	r27, r1
    33f0:	8c 91       	ld	r24, X
    33f2:	88 83       	st	Y, r24
    33f4:	83 2f       	mov	r24, r19
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	fc 01       	movw	r30, r24
    33fa:	73 e0       	ldi	r23, 0x03	; 3
    33fc:	ee 0f       	add	r30, r30
    33fe:	ff 1f       	adc	r31, r31
    3400:	7a 95       	dec	r23
    3402:	e1 f7       	brne	.-8      	; 0x33fc <_ZN15OrangutanSerial11uart_tx_isrEh+0xbc>
    3404:	88 0f       	add	r24, r24
    3406:	99 1f       	adc	r25, r25
    3408:	e8 0f       	add	r30, r24
    340a:	f9 1f       	adc	r31, r25
    340c:	ea 53       	subi	r30, 0x3A	; 58
    340e:	fc 4f       	sbci	r31, 0xFC	; 252
    3410:	21 81       	ldd	r18, Z+1	; 0x01
    3412:	2f 5f       	subi	r18, 0xFF	; 255
    3414:	83 2f       	mov	r24, r19
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	fc 01       	movw	r30, r24
    341a:	53 e0       	ldi	r21, 0x03	; 3
    341c:	ee 0f       	add	r30, r30
    341e:	ff 1f       	adc	r31, r31
    3420:	5a 95       	dec	r21
    3422:	e1 f7       	brne	.-8      	; 0x341c <_ZN15OrangutanSerial11uart_tx_isrEh+0xdc>
    3424:	88 0f       	add	r24, r24
    3426:	99 1f       	adc	r25, r25
    3428:	e8 0f       	add	r30, r24
    342a:	f9 1f       	adc	r31, r25
    342c:	ea 53       	subi	r30, 0x3A	; 58
    342e:	fc 4f       	sbci	r31, 0xFC	; 252
    3430:	21 83       	std	Z+1, r18	; 0x01
    3432:	83 2f       	mov	r24, r19
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	fc 01       	movw	r30, r24
    3438:	b3 e0       	ldi	r27, 0x03	; 3
    343a:	ee 0f       	add	r30, r30
    343c:	ff 1f       	adc	r31, r31
    343e:	ba 95       	dec	r27
    3440:	e1 f7       	brne	.-8      	; 0x343a <_ZN15OrangutanSerial11uart_tx_isrEh+0xfa>
    3442:	88 0f       	add	r24, r24
    3444:	99 1f       	adc	r25, r25
    3446:	e8 0f       	add	r30, r24
    3448:	f9 1f       	adc	r31, r25
    344a:	ea 53       	subi	r30, 0x3A	; 58
    344c:	fc 4f       	sbci	r31, 0xFC	; 252
    344e:	86 81       	ldd	r24, Z+6	; 0x06
    3450:	97 81       	ldd	r25, Z+7	; 0x07
    3452:	89 2b       	or	r24, r25
    3454:	09 f4       	brne	.+2      	; 0x3458 <_ZN15OrangutanSerial11uart_tx_isrEh+0x118>
    3456:	43 c0       	rjmp	.+134    	; 0x34de <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    3458:	83 2f       	mov	r24, r19
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	fc 01       	movw	r30, r24
    345e:	73 e0       	ldi	r23, 0x03	; 3
    3460:	ee 0f       	add	r30, r30
    3462:	ff 1f       	adc	r31, r31
    3464:	7a 95       	dec	r23
    3466:	e1 f7       	brne	.-8      	; 0x3460 <_ZN15OrangutanSerial11uart_tx_isrEh+0x120>
    3468:	88 0f       	add	r24, r24
    346a:	99 1f       	adc	r25, r25
    346c:	e8 0f       	add	r30, r24
    346e:	f9 1f       	adc	r31, r25
    3470:	ea 53       	subi	r30, 0x3A	; 58
    3472:	fc 4f       	sbci	r31, 0xFC	; 252
    3474:	21 81       	ldd	r18, Z+1	; 0x01
    3476:	83 2f       	mov	r24, r19
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	fc 01       	movw	r30, r24
    347c:	53 e0       	ldi	r21, 0x03	; 3
    347e:	ee 0f       	add	r30, r30
    3480:	ff 1f       	adc	r31, r31
    3482:	5a 95       	dec	r21
    3484:	e1 f7       	brne	.-8      	; 0x347e <_ZN15OrangutanSerial11uart_tx_isrEh+0x13e>
    3486:	88 0f       	add	r24, r24
    3488:	99 1f       	adc	r25, r25
    348a:	e8 0f       	add	r30, r24
    348c:	f9 1f       	adc	r31, r25
    348e:	ea 53       	subi	r30, 0x3A	; 58
    3490:	fc 4f       	sbci	r31, 0xFC	; 252
    3492:	83 81       	ldd	r24, Z+3	; 0x03
    3494:	28 17       	cp	r18, r24
    3496:	18 f5       	brcc	.+70     	; 0x34de <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    3498:	83 2f       	mov	r24, r19
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	fc 01       	movw	r30, r24
    349e:	b3 e0       	ldi	r27, 0x03	; 3
    34a0:	ee 0f       	add	r30, r30
    34a2:	ff 1f       	adc	r31, r31
    34a4:	ba 95       	dec	r27
    34a6:	e1 f7       	brne	.-8      	; 0x34a0 <_ZN15OrangutanSerial11uart_tx_isrEh+0x160>
    34a8:	88 0f       	add	r24, r24
    34aa:	99 1f       	adc	r25, r25
    34ac:	e8 0f       	add	r30, r24
    34ae:	f9 1f       	adc	r31, r25
    34b0:	ea 53       	subi	r30, 0x3A	; 58
    34b2:	fc 4f       	sbci	r31, 0xFC	; 252
    34b4:	80 81       	ld	r24, Z
    34b6:	88 23       	and	r24, r24
    34b8:	91 f4       	brne	.+36     	; 0x34de <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    34ba:	33 23       	and	r19, r19
    34bc:	19 f0       	breq	.+6      	; 0x34c4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x184>
    34be:	e9 ec       	ldi	r30, 0xC9	; 201
    34c0:	f0 e0       	ldi	r31, 0x00	; 0
    34c2:	02 c0       	rjmp	.+4      	; 0x34c8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x188>
    34c4:	e1 ec       	ldi	r30, 0xC1	; 193
    34c6:	f0 e0       	ldi	r31, 0x00	; 0
    34c8:	80 81       	ld	r24, Z
    34ca:	80 62       	ori	r24, 0x20	; 32
    34cc:	04 c0       	rjmp	.+8      	; 0x34d6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x196>
    34ce:	e9 ec       	ldi	r30, 0xC9	; 201
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	80 81       	ld	r24, Z
    34d4:	8f 7d       	andi	r24, 0xDF	; 223
    34d6:	80 83       	st	Z, r24
    34d8:	df 91       	pop	r29
    34da:	cf 91       	pop	r28
    34dc:	08 95       	ret
    34de:	33 23       	and	r19, r19
    34e0:	b1 f7       	brne	.-20     	; 0x34ce <_ZN15OrangutanSerial11uart_tx_isrEh+0x18e>
    34e2:	e1 ec       	ldi	r30, 0xC1	; 193
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	f5 cf       	rjmp	.-22     	; 0x34d2 <_ZN15OrangutanSerial11uart_tx_isrEh+0x192>

000034e8 <_ZN15OrangutanSerial4sendEhPch>:
    34e8:	28 2f       	mov	r18, r24
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	fc 01       	movw	r30, r24
    34ee:	53 e0       	ldi	r21, 0x03	; 3
    34f0:	ee 0f       	add	r30, r30
    34f2:	ff 1f       	adc	r31, r31
    34f4:	5a 95       	dec	r21
    34f6:	e1 f7       	brne	.-8      	; 0x34f0 <_ZN15OrangutanSerial4sendEhPch+0x8>
    34f8:	88 0f       	add	r24, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	e8 0f       	add	r30, r24
    34fe:	f9 1f       	adc	r31, r25
    3500:	ea 53       	subi	r30, 0x3A	; 58
    3502:	fc 4f       	sbci	r31, 0xFC	; 252
    3504:	77 83       	std	Z+7, r23	; 0x07
    3506:	66 83       	std	Z+6, r22	; 0x06
    3508:	82 2f       	mov	r24, r18
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	fc 01       	movw	r30, r24
    350e:	b3 e0       	ldi	r27, 0x03	; 3
    3510:	ee 0f       	add	r30, r30
    3512:	ff 1f       	adc	r31, r31
    3514:	ba 95       	dec	r27
    3516:	e1 f7       	brne	.-8      	; 0x3510 <_ZN15OrangutanSerial4sendEhPch+0x28>
    3518:	88 0f       	add	r24, r24
    351a:	99 1f       	adc	r25, r25
    351c:	e8 0f       	add	r30, r24
    351e:	f9 1f       	adc	r31, r25
    3520:	ea 53       	subi	r30, 0x3A	; 58
    3522:	fc 4f       	sbci	r31, 0xFC	; 252
    3524:	11 82       	std	Z+1, r1	; 0x01
    3526:	82 2f       	mov	r24, r18
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	fc 01       	movw	r30, r24
    352c:	73 e0       	ldi	r23, 0x03	; 3
    352e:	ee 0f       	add	r30, r30
    3530:	ff 1f       	adc	r31, r31
    3532:	7a 95       	dec	r23
    3534:	e1 f7       	brne	.-8      	; 0x352e <_ZN15OrangutanSerial4sendEhPch+0x46>
    3536:	88 0f       	add	r24, r24
    3538:	99 1f       	adc	r25, r25
    353a:	e8 0f       	add	r30, r24
    353c:	f9 1f       	adc	r31, r25
    353e:	ea 53       	subi	r30, 0x3A	; 58
    3540:	fc 4f       	sbci	r31, 0xFC	; 252
    3542:	43 83       	std	Z+3, r20	; 0x03
    3544:	22 30       	cpi	r18, 0x02	; 2
    3546:	09 f4       	brne	.+2      	; 0x354a <_ZN15OrangutanSerial4sendEhPch+0x62>
    3548:	49 c0       	rjmp	.+146    	; 0x35dc <_ZN15OrangutanSerial4sendEhPch+0xf4>
    354a:	82 2f       	mov	r24, r18
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	fc 01       	movw	r30, r24
    3550:	53 e0       	ldi	r21, 0x03	; 3
    3552:	ee 0f       	add	r30, r30
    3554:	ff 1f       	adc	r31, r31
    3556:	5a 95       	dec	r21
    3558:	e1 f7       	brne	.-8      	; 0x3552 <_ZN15OrangutanSerial4sendEhPch+0x6a>
    355a:	88 0f       	add	r24, r24
    355c:	99 1f       	adc	r25, r25
    355e:	e8 0f       	add	r30, r24
    3560:	f9 1f       	adc	r31, r25
    3562:	ea 53       	subi	r30, 0x3A	; 58
    3564:	fc 4f       	sbci	r31, 0xFC	; 252
    3566:	86 81       	ldd	r24, Z+6	; 0x06
    3568:	97 81       	ldd	r25, Z+7	; 0x07
    356a:	89 2b       	or	r24, r25
    356c:	91 f1       	breq	.+100    	; 0x35d2 <_ZN15OrangutanSerial4sendEhPch+0xea>
    356e:	82 2f       	mov	r24, r18
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	fc 01       	movw	r30, r24
    3574:	b3 e0       	ldi	r27, 0x03	; 3
    3576:	ee 0f       	add	r30, r30
    3578:	ff 1f       	adc	r31, r31
    357a:	ba 95       	dec	r27
    357c:	e1 f7       	brne	.-8      	; 0x3576 <_ZN15OrangutanSerial4sendEhPch+0x8e>
    357e:	88 0f       	add	r24, r24
    3580:	99 1f       	adc	r25, r25
    3582:	e8 0f       	add	r30, r24
    3584:	f9 1f       	adc	r31, r25
    3586:	ea 53       	subi	r30, 0x3A	; 58
    3588:	fc 4f       	sbci	r31, 0xFC	; 252
    358a:	81 81       	ldd	r24, Z+1	; 0x01
    358c:	84 17       	cp	r24, r20
    358e:	08 f5       	brcc	.+66     	; 0x35d2 <_ZN15OrangutanSerial4sendEhPch+0xea>
    3590:	82 2f       	mov	r24, r18
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	fc 01       	movw	r30, r24
    3596:	73 e0       	ldi	r23, 0x03	; 3
    3598:	ee 0f       	add	r30, r30
    359a:	ff 1f       	adc	r31, r31
    359c:	7a 95       	dec	r23
    359e:	e1 f7       	brne	.-8      	; 0x3598 <_ZN15OrangutanSerial4sendEhPch+0xb0>
    35a0:	88 0f       	add	r24, r24
    35a2:	99 1f       	adc	r25, r25
    35a4:	e8 0f       	add	r30, r24
    35a6:	f9 1f       	adc	r31, r25
    35a8:	ea 53       	subi	r30, 0x3A	; 58
    35aa:	fc 4f       	sbci	r31, 0xFC	; 252
    35ac:	80 81       	ld	r24, Z
    35ae:	88 23       	and	r24, r24
    35b0:	81 f4       	brne	.+32     	; 0x35d2 <_ZN15OrangutanSerial4sendEhPch+0xea>
    35b2:	22 23       	and	r18, r18
    35b4:	19 f0       	breq	.+6      	; 0x35bc <_ZN15OrangutanSerial4sendEhPch+0xd4>
    35b6:	e9 ec       	ldi	r30, 0xC9	; 201
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	02 c0       	rjmp	.+4      	; 0x35c0 <_ZN15OrangutanSerial4sendEhPch+0xd8>
    35bc:	e1 ec       	ldi	r30, 0xC1	; 193
    35be:	f0 e0       	ldi	r31, 0x00	; 0
    35c0:	80 81       	ld	r24, Z
    35c2:	80 62       	ori	r24, 0x20	; 32
    35c4:	04 c0       	rjmp	.+8      	; 0x35ce <_ZN15OrangutanSerial4sendEhPch+0xe6>
    35c6:	e9 ec       	ldi	r30, 0xC9	; 201
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	8f 7d       	andi	r24, 0xDF	; 223
    35ce:	80 83       	st	Z, r24
    35d0:	08 95       	ret
    35d2:	22 23       	and	r18, r18
    35d4:	c1 f7       	brne	.-16     	; 0x35c6 <_ZN15OrangutanSerial4sendEhPch+0xde>
    35d6:	e1 ec       	ldi	r30, 0xC1	; 193
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	f7 cf       	rjmp	.-18     	; 0x35ca <_ZN15OrangutanSerial4sendEhPch+0xe2>
    35dc:	08 95       	ret

000035de <serial_send>:
    35de:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <_ZN15OrangutanSerial4sendEhPch>
    35e2:	08 95       	ret

000035e4 <__vector_21>:
    35e4:	1f 92       	push	r1
    35e6:	0f 92       	push	r0
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	0f 92       	push	r0
    35ec:	0b b6       	in	r0, 0x3b	; 59
    35ee:	0f 92       	push	r0
    35f0:	11 24       	eor	r1, r1
    35f2:	2f 93       	push	r18
    35f4:	3f 93       	push	r19
    35f6:	4f 93       	push	r20
    35f8:	5f 93       	push	r21
    35fa:	6f 93       	push	r22
    35fc:	7f 93       	push	r23
    35fe:	8f 93       	push	r24
    3600:	9f 93       	push	r25
    3602:	af 93       	push	r26
    3604:	bf 93       	push	r27
    3606:	ef 93       	push	r30
    3608:	ff 93       	push	r31
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN15OrangutanSerial11uart_tx_isrEh>
    3610:	ff 91       	pop	r31
    3612:	ef 91       	pop	r30
    3614:	bf 91       	pop	r27
    3616:	af 91       	pop	r26
    3618:	9f 91       	pop	r25
    361a:	8f 91       	pop	r24
    361c:	7f 91       	pop	r23
    361e:	6f 91       	pop	r22
    3620:	5f 91       	pop	r21
    3622:	4f 91       	pop	r20
    3624:	3f 91       	pop	r19
    3626:	2f 91       	pop	r18
    3628:	0f 90       	pop	r0
    362a:	0b be       	out	0x3b, r0	; 59
    362c:	0f 90       	pop	r0
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	0f 90       	pop	r0
    3632:	1f 90       	pop	r1
    3634:	18 95       	reti

00003636 <__vector_29>:
    3636:	1f 92       	push	r1
    3638:	0f 92       	push	r0
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	0f 92       	push	r0
    363e:	0b b6       	in	r0, 0x3b	; 59
    3640:	0f 92       	push	r0
    3642:	11 24       	eor	r1, r1
    3644:	2f 93       	push	r18
    3646:	3f 93       	push	r19
    3648:	4f 93       	push	r20
    364a:	5f 93       	push	r21
    364c:	6f 93       	push	r22
    364e:	7f 93       	push	r23
    3650:	8f 93       	push	r24
    3652:	9f 93       	push	r25
    3654:	af 93       	push	r26
    3656:	bf 93       	push	r27
    3658:	ef 93       	push	r30
    365a:	ff 93       	push	r31
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN15OrangutanSerial11uart_tx_isrEh>
    3662:	ff 91       	pop	r31
    3664:	ef 91       	pop	r30
    3666:	bf 91       	pop	r27
    3668:	af 91       	pop	r26
    366a:	9f 91       	pop	r25
    366c:	8f 91       	pop	r24
    366e:	7f 91       	pop	r23
    3670:	6f 91       	pop	r22
    3672:	5f 91       	pop	r21
    3674:	4f 91       	pop	r20
    3676:	3f 91       	pop	r19
    3678:	2f 91       	pop	r18
    367a:	0f 90       	pop	r0
    367c:	0b be       	out	0x3b, r0	; 59
    367e:	0f 90       	pop	r0
    3680:	0f be       	out	0x3f, r0	; 63
    3682:	0f 90       	pop	r0
    3684:	1f 90       	pop	r1
    3686:	18 95       	reti

00003688 <_ZN15OrangutanSerial15serial_tx_checkEh>:
    3688:	98 2f       	mov	r25, r24
    368a:	82 30       	cpi	r24, 0x02	; 2
    368c:	71 f0       	breq	.+28     	; 0x36aa <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    368e:	88 23       	and	r24, r24
    3690:	19 f0       	breq	.+6      	; 0x3698 <_ZN15OrangutanSerial15serial_tx_checkEh+0x10>
    3692:	e9 ec       	ldi	r30, 0xC9	; 201
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	02 c0       	rjmp	.+4      	; 0x369c <_ZN15OrangutanSerial15serial_tx_checkEh+0x14>
    3698:	e1 ec       	ldi	r30, 0xC1	; 193
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	80 81       	ld	r24, Z
    369e:	8f 7d       	andi	r24, 0xDF	; 223
    36a0:	80 83       	st	Z, r24
    36a2:	89 2f       	mov	r24, r25
    36a4:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN15OrangutanSerial11uart_tx_isrEh>
    36a8:	08 95       	ret
    36aa:	e0 91 e0 03 	lds	r30, 0x03E0
    36ae:	f0 91 e1 03 	lds	r31, 0x03E1
    36b2:	30 97       	sbiw	r30, 0x00	; 0
    36b4:	b1 f0       	breq	.+44     	; 0x36e2 <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    36b6:	90 91 db 03 	lds	r25, 0x03DB
    36ba:	80 91 dd 03 	lds	r24, 0x03DD
    36be:	98 17       	cp	r25, r24
    36c0:	80 f4       	brcc	.+32     	; 0x36e2 <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    36c2:	06 c0       	rjmp	.+12     	; 0x36d0 <_ZN15OrangutanSerial15serial_tx_checkEh+0x48>
    36c4:	80 91 db 03 	lds	r24, 0x03DB
    36c8:	8f 5f       	subi	r24, 0xFF	; 255
    36ca:	80 93 db 03 	sts	0x03DB, r24
    36ce:	ed cf       	rjmp	.-38     	; 0x36aa <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    36d0:	80 91 db 03 	lds	r24, 0x03DB
    36d4:	e8 0f       	add	r30, r24
    36d6:	f1 1d       	adc	r31, r1
    36d8:	80 81       	ld	r24, Z
    36da:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN12OrangutanSVP17serialSendIfReadyEc>
    36de:	88 23       	and	r24, r24
    36e0:	89 f7       	brne	.-30     	; 0x36c4 <_ZN15OrangutanSerial15serial_tx_checkEh+0x3c>
    36e2:	08 95       	ret

000036e4 <_ZN15OrangutanSerial15serial_rx_checkEh>:
    36e4:	0f 93       	push	r16
    36e6:	1f 93       	push	r17
    36e8:	cf 93       	push	r28
    36ea:	df 93       	push	r29
    36ec:	68 2f       	mov	r22, r24
    36ee:	82 30       	cpi	r24, 0x02	; 2
    36f0:	09 f4       	brne	.+2      	; 0x36f4 <_ZN15OrangutanSerial15serial_rx_checkEh+0x10>
    36f2:	9c c0       	rjmp	.+312    	; 0x382c <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    36f4:	88 23       	and	r24, r24
    36f6:	19 f0       	breq	.+6      	; 0x36fe <_ZN15OrangutanSerial15serial_rx_checkEh+0x1a>
    36f8:	e9 ec       	ldi	r30, 0xC9	; 201
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	02 c0       	rjmp	.+4      	; 0x3702 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1e>
    36fe:	e1 ec       	ldi	r30, 0xC1	; 193
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	80 81       	ld	r24, Z
    3704:	8f 77       	andi	r24, 0x7F	; 127
    3706:	80 83       	st	Z, r24
    3708:	46 2f       	mov	r20, r22
    370a:	50 e0       	ldi	r21, 0x00	; 0
    370c:	da 01       	movw	r26, r20
    370e:	aa 0f       	add	r26, r26
    3710:	bb 1f       	adc	r27, r27
    3712:	ca 01       	movw	r24, r20
    3714:	23 e0       	ldi	r18, 0x03	; 3
    3716:	88 0f       	add	r24, r24
    3718:	99 1f       	adc	r25, r25
    371a:	2a 95       	dec	r18
    371c:	e1 f7       	brne	.-8      	; 0x3716 <_ZN15OrangutanSerial15serial_rx_checkEh+0x32>
    371e:	a8 0f       	add	r26, r24
    3720:	b9 1f       	adc	r27, r25
    3722:	aa 53       	subi	r26, 0x3A	; 58
    3724:	bc 4f       	sbci	r27, 0xFC	; 252
    3726:	18 96       	adiw	r26, 0x08	; 8
    3728:	cd 91       	ld	r28, X+
    372a:	dc 91       	ld	r29, X
    372c:	19 97       	sbiw	r26, 0x09	; 9
    372e:	20 97       	sbiw	r28, 0x00	; 0
    3730:	09 f4       	brne	.+2      	; 0x3734 <_ZN15OrangutanSerial15serial_rx_checkEh+0x50>
    3732:	5a c0       	rjmp	.+180    	; 0x37e8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3734:	fa 01       	movw	r30, r20
    3736:	ee 0f       	add	r30, r30
    3738:	ff 1f       	adc	r31, r31
    373a:	ee 0f       	add	r30, r30
    373c:	ff 1f       	adc	r31, r31
    373e:	e4 0f       	add	r30, r20
    3740:	f5 1f       	adc	r31, r21
    3742:	ee 0f       	add	r30, r30
    3744:	ff 1f       	adc	r31, r31
    3746:	e8 53       	subi	r30, 0x38	; 56
    3748:	fc 4f       	sbci	r31, 0xFC	; 252
    374a:	80 81       	ld	r24, Z
    374c:	14 96       	adiw	r26, 0x04	; 4
    374e:	2c 91       	ld	r18, X
    3750:	82 17       	cp	r24, r18
    3752:	08 f0       	brcs	.+2      	; 0x3756 <_ZN15OrangutanSerial15serial_rx_checkEh+0x72>
    3754:	49 c0       	rjmp	.+146    	; 0x37e8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3756:	66 23       	and	r22, r22
    3758:	19 f0       	breq	.+6      	; 0x3760 <_ZN15OrangutanSerial15serial_rx_checkEh+0x7c>
    375a:	e8 ec       	ldi	r30, 0xC8	; 200
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	02 c0       	rjmp	.+4      	; 0x3764 <_ZN15OrangutanSerial15serial_rx_checkEh+0x80>
    3760:	e0 ec       	ldi	r30, 0xC0	; 192
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	80 81       	ld	r24, Z
    3766:	87 ff       	sbrs	r24, 7
    3768:	3f c0       	rjmp	.+126    	; 0x37e8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    376a:	66 23       	and	r22, r22
    376c:	19 f4       	brne	.+6      	; 0x3774 <_ZN15OrangutanSerial15serial_rx_checkEh+0x90>
    376e:	e6 ec       	ldi	r30, 0xC6	; 198
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	02 c0       	rjmp	.+4      	; 0x3778 <_ZN15OrangutanSerial15serial_rx_checkEh+0x94>
    3774:	ee ec       	ldi	r30, 0xCE	; 206
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	90 81       	ld	r25, Z
    377a:	fa 01       	movw	r30, r20
    377c:	ee 0f       	add	r30, r30
    377e:	ff 1f       	adc	r31, r31
    3780:	ee 0f       	add	r30, r30
    3782:	ff 1f       	adc	r31, r31
    3784:	e4 0f       	add	r30, r20
    3786:	f5 1f       	adc	r31, r21
    3788:	ee 0f       	add	r30, r30
    378a:	ff 1f       	adc	r31, r31
    378c:	e8 53       	subi	r30, 0x38	; 56
    378e:	fc 4f       	sbci	r31, 0xFC	; 252
    3790:	80 81       	ld	r24, Z
    3792:	82 17       	cp	r24, r18
    3794:	38 f4       	brcc	.+14     	; 0x37a4 <_ZN15OrangutanSerial15serial_rx_checkEh+0xc0>
    3796:	80 81       	ld	r24, Z
    3798:	c8 0f       	add	r28, r24
    379a:	d1 1d       	adc	r29, r1
    379c:	98 83       	st	Y, r25
    379e:	80 81       	ld	r24, Z
    37a0:	8f 5f       	subi	r24, 0xFF	; 255
    37a2:	80 83       	st	Z, r24
    37a4:	fa 01       	movw	r30, r20
    37a6:	ee 0f       	add	r30, r30
    37a8:	ff 1f       	adc	r31, r31
    37aa:	ee 0f       	add	r30, r30
    37ac:	ff 1f       	adc	r31, r31
    37ae:	e4 0f       	add	r30, r20
    37b0:	f5 1f       	adc	r31, r21
    37b2:	ee 0f       	add	r30, r30
    37b4:	ff 1f       	adc	r31, r31
    37b6:	e8 53       	subi	r30, 0x38	; 56
    37b8:	fc 4f       	sbci	r31, 0xFC	; 252
    37ba:	80 81       	ld	r24, Z
    37bc:	da 01       	movw	r26, r20
    37be:	aa 0f       	add	r26, r26
    37c0:	bb 1f       	adc	r27, r27
    37c2:	9a 01       	movw	r18, r20
    37c4:	13 e0       	ldi	r17, 0x03	; 3
    37c6:	22 0f       	add	r18, r18
    37c8:	33 1f       	adc	r19, r19
    37ca:	1a 95       	dec	r17
    37cc:	e1 f7       	brne	.-8      	; 0x37c6 <_ZN15OrangutanSerial15serial_rx_checkEh+0xe2>
    37ce:	a2 0f       	add	r26, r18
    37d0:	b3 1f       	adc	r27, r19
    37d2:	aa 53       	subi	r26, 0x3A	; 58
    37d4:	bc 4f       	sbci	r27, 0xFC	; 252
    37d6:	14 96       	adiw	r26, 0x04	; 4
    37d8:	9c 91       	ld	r25, X
    37da:	14 97       	sbiw	r26, 0x04	; 4
    37dc:	89 17       	cp	r24, r25
    37de:	21 f4       	brne	.+8      	; 0x37e8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    37e0:	15 96       	adiw	r26, 0x05	; 5
    37e2:	8c 91       	ld	r24, X
    37e4:	81 11       	cpse	r24, r1
    37e6:	10 82       	st	Z, r1
    37e8:	fa 01       	movw	r30, r20
    37ea:	a3 e0       	ldi	r26, 0x03	; 3
    37ec:	ee 0f       	add	r30, r30
    37ee:	ff 1f       	adc	r31, r31
    37f0:	aa 95       	dec	r26
    37f2:	e1 f7       	brne	.-8      	; 0x37ec <_ZN15OrangutanSerial15serial_rx_checkEh+0x108>
    37f4:	44 0f       	add	r20, r20
    37f6:	55 1f       	adc	r21, r21
    37f8:	e4 0f       	add	r30, r20
    37fa:	f5 1f       	adc	r31, r21
    37fc:	ea 53       	subi	r30, 0x3A	; 58
    37fe:	fc 4f       	sbci	r31, 0xFC	; 252
    3800:	80 81       	ld	r24, Z
    3802:	88 23       	and	r24, r24
    3804:	09 f0       	breq	.+2      	; 0x3808 <_ZN15OrangutanSerial15serial_rx_checkEh+0x124>
    3806:	59 c0       	rjmp	.+178    	; 0x38ba <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3808:	66 23       	and	r22, r22
    380a:	19 f0       	breq	.+6      	; 0x3812 <_ZN15OrangutanSerial15serial_rx_checkEh+0x12e>
    380c:	e9 ec       	ldi	r30, 0xC9	; 201
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	02 c0       	rjmp	.+4      	; 0x3816 <_ZN15OrangutanSerial15serial_rx_checkEh+0x132>
    3812:	e1 ec       	ldi	r30, 0xC1	; 193
    3814:	f0 e0       	ldi	r31, 0x00	; 0
    3816:	80 81       	ld	r24, Z
    3818:	80 68       	ori	r24, 0x80	; 128
    381a:	80 83       	st	Z, r24
    381c:	4e c0       	rjmp	.+156    	; 0x38ba <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    381e:	80 91 df 03 	lds	r24, 0x03DF
    3822:	88 23       	and	r24, r24
    3824:	19 f0       	breq	.+6      	; 0x382c <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    3826:	10 92 dc 03 	sts	0x03DC, r1
    382a:	47 c0       	rjmp	.+142    	; 0x38ba <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    382c:	80 91 e2 03 	lds	r24, 0x03E2
    3830:	90 91 e3 03 	lds	r25, 0x03E3
    3834:	89 2b       	or	r24, r25
    3836:	09 f4       	brne	.+2      	; 0x383a <_ZN15OrangutanSerial15serial_rx_checkEh+0x156>
    3838:	40 c0       	rjmp	.+128    	; 0x38ba <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    383a:	90 91 dc 03 	lds	r25, 0x03DC
    383e:	80 91 de 03 	lds	r24, 0x03DE
    3842:	98 17       	cp	r25, r24
    3844:	d0 f5       	brcc	.+116    	; 0x38ba <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3846:	80 91 ff 03 	lds	r24, 0x03FF
    384a:	88 23       	and	r24, r24
    384c:	a9 f4       	brne	.+42     	; 0x3878 <_ZN15OrangutanSerial15serial_rx_checkEh+0x194>
    384e:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <_ZN12OrangutanSVP15serialReadStartEv>
    3852:	80 93 ff 03 	sts	0x03FF, r24
    3856:	10 e0       	ldi	r17, 0x00	; 0
    3858:	0b c0       	rjmp	.+22     	; 0x3870 <_ZN15OrangutanSerial15serial_rx_checkEh+0x18c>
    385a:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <_ZN12OrangutanSVP11getNextByteEv>
    385e:	e0 2f       	mov	r30, r16
    3860:	f0 e0       	ldi	r31, 0x00	; 0
    3862:	31 97       	sbiw	r30, 0x01	; 1
    3864:	e1 1b       	sub	r30, r17
    3866:	f1 09       	sbc	r31, r1
    3868:	e0 50       	subi	r30, 0x00	; 0
    386a:	fc 4f       	sbci	r31, 0xFC	; 252
    386c:	80 83       	st	Z, r24
    386e:	1f 5f       	subi	r17, 0xFF	; 255
    3870:	00 91 ff 03 	lds	r16, 0x03FF
    3874:	10 17       	cp	r17, r16
    3876:	88 f3       	brcs	.-30     	; 0x385a <_ZN15OrangutanSerial15serial_rx_checkEh+0x176>
    3878:	e0 91 ff 03 	lds	r30, 0x03FF
    387c:	ee 23       	and	r30, r30
    387e:	e9 f0       	breq	.+58     	; 0x38ba <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3880:	80 91 dc 03 	lds	r24, 0x03DC
    3884:	a0 91 e2 03 	lds	r26, 0x03E2
    3888:	b0 91 e3 03 	lds	r27, 0x03E3
    388c:	a8 0f       	add	r26, r24
    388e:	b1 1d       	adc	r27, r1
    3890:	e1 50       	subi	r30, 0x01	; 1
    3892:	e0 93 ff 03 	sts	0x03FF, r30
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	e0 50       	subi	r30, 0x00	; 0
    389a:	fc 4f       	sbci	r31, 0xFC	; 252
    389c:	80 81       	ld	r24, Z
    389e:	8c 93       	st	X, r24
    38a0:	80 91 dc 03 	lds	r24, 0x03DC
    38a4:	8f 5f       	subi	r24, 0xFF	; 255
    38a6:	80 93 dc 03 	sts	0x03DC, r24
    38aa:	90 91 dc 03 	lds	r25, 0x03DC
    38ae:	80 91 de 03 	lds	r24, 0x03DE
    38b2:	98 17       	cp	r25, r24
    38b4:	09 f0       	breq	.+2      	; 0x38b8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d4>
    38b6:	ba cf       	rjmp	.-140    	; 0x382c <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    38b8:	b2 cf       	rjmp	.-156    	; 0x381e <_ZN15OrangutanSerial15serial_rx_checkEh+0x13a>
    38ba:	df 91       	pop	r29
    38bc:	cf 91       	pop	r28
    38be:	1f 91       	pop	r17
    38c0:	0f 91       	pop	r16
    38c2:	08 95       	ret

000038c4 <_ZN15OrangutanSerial5checkEv>:
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	0e 94 44 1b 	call	0x3688	; 0x3688 <_ZN15OrangutanSerial15serial_tx_checkEh>
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	0e 94 44 1b 	call	0x3688	; 0x3688 <_ZN15OrangutanSerial15serial_tx_checkEh>
    38d0:	82 e0       	ldi	r24, 0x02	; 2
    38d2:	0e 94 44 1b 	call	0x3688	; 0x3688 <_ZN15OrangutanSerial15serial_tx_checkEh>
    38d6:	80 e0       	ldi	r24, 0x00	; 0
    38d8:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <_ZN15OrangutanSerial15serial_rx_checkEh>
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <_ZN15OrangutanSerial15serial_rx_checkEh>
    38e2:	82 e0       	ldi	r24, 0x02	; 2
    38e4:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <_ZN15OrangutanSerial15serial_rx_checkEh>
    38e8:	08 95       	ret

000038ea <_ZN15OrangutanSerial12sendBlockingEhPch>:
    38ea:	1f 93       	push	r17
    38ec:	18 2f       	mov	r17, r24
    38ee:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <_ZN15OrangutanSerial4sendEhPch>
    38f2:	02 c0       	rjmp	.+4      	; 0x38f8 <_ZN15OrangutanSerial12sendBlockingEhPch+0xe>
    38f4:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <_ZN15OrangutanSerial5checkEv>
    38f8:	81 2f       	mov	r24, r17
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	fc 01       	movw	r30, r24
    38fe:	73 e0       	ldi	r23, 0x03	; 3
    3900:	ee 0f       	add	r30, r30
    3902:	ff 1f       	adc	r31, r31
    3904:	7a 95       	dec	r23
    3906:	e1 f7       	brne	.-8      	; 0x3900 <_ZN15OrangutanSerial12sendBlockingEhPch+0x16>
    3908:	88 0f       	add	r24, r24
    390a:	99 1f       	adc	r25, r25
    390c:	e8 0f       	add	r30, r24
    390e:	f9 1f       	adc	r31, r25
    3910:	ea 53       	subi	r30, 0x3A	; 58
    3912:	fc 4f       	sbci	r31, 0xFC	; 252
    3914:	21 81       	ldd	r18, Z+1	; 0x01
    3916:	81 2f       	mov	r24, r17
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	fc 01       	movw	r30, r24
    391c:	53 e0       	ldi	r21, 0x03	; 3
    391e:	ee 0f       	add	r30, r30
    3920:	ff 1f       	adc	r31, r31
    3922:	5a 95       	dec	r21
    3924:	e1 f7       	brne	.-8      	; 0x391e <_ZN15OrangutanSerial12sendBlockingEhPch+0x34>
    3926:	88 0f       	add	r24, r24
    3928:	99 1f       	adc	r25, r25
    392a:	e8 0f       	add	r30, r24
    392c:	f9 1f       	adc	r31, r25
    392e:	ea 53       	subi	r30, 0x3A	; 58
    3930:	fc 4f       	sbci	r31, 0xFC	; 252
    3932:	83 81       	ldd	r24, Z+3	; 0x03
    3934:	28 17       	cp	r18, r24
    3936:	f1 f6       	brne	.-68     	; 0x38f4 <_ZN15OrangutanSerial12sendBlockingEhPch+0xa>
    3938:	1f 91       	pop	r17
    393a:	08 95       	ret

0000393c <serial_send_blocking>:
    393c:	0e 94 75 1c 	call	0x38ea	; 0x38ea <_ZN15OrangutanSerial12sendBlockingEhPch>
    3940:	08 95       	ret

00003942 <_ZN15OrangutanSerial15receiveBlockingEhPchj>:
    3942:	a0 e0       	ldi	r26, 0x00	; 0
    3944:	b0 e0       	ldi	r27, 0x00	; 0
    3946:	e7 ea       	ldi	r30, 0xA7	; 167
    3948:	fc e1       	ldi	r31, 0x1C	; 28
    394a:	0c 94 ea 1f 	jmp	0x3fd4	; 0x3fd4 <__prologue_saves__+0xc>
    394e:	08 2f       	mov	r16, r24
    3950:	79 01       	movw	r14, r18
    3952:	0e 94 94 18 	call	0x3128	; 0x3128 <_ZN15OrangutanSerial7receiveEhPch>
    3956:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <get_ms>
    395a:	4b 01       	movw	r8, r22
    395c:	5c 01       	movw	r10, r24
    395e:	10 e0       	ldi	r17, 0x00	; 0
    3960:	e8 01       	movw	r28, r16
    3962:	cc 0f       	add	r28, r28
    3964:	dd 1f       	adc	r29, r29
    3966:	cc 0f       	add	r28, r28
    3968:	dd 1f       	adc	r29, r29
    396a:	c0 0f       	add	r28, r16
    396c:	d1 1f       	adc	r29, r17
    396e:	cc 0f       	add	r28, r28
    3970:	dd 1f       	adc	r29, r29
    3972:	c8 53       	subi	r28, 0x38	; 56
    3974:	dc 4f       	sbci	r29, 0xFC	; 252
    3976:	68 01       	movw	r12, r16
    3978:	f3 e0       	ldi	r31, 0x03	; 3
    397a:	cc 0c       	add	r12, r12
    397c:	dd 1c       	adc	r13, r13
    397e:	fa 95       	dec	r31
    3980:	e1 f7       	brne	.-8      	; 0x397a <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x38>
    3982:	00 0f       	add	r16, r16
    3984:	11 1f       	adc	r17, r17
    3986:	c0 0e       	add	r12, r16
    3988:	d1 1e       	adc	r13, r17
    398a:	8a ec       	ldi	r24, 0xCA	; 202
    398c:	93 e0       	ldi	r25, 0x03	; 3
    398e:	c8 0e       	add	r12, r24
    3990:	d9 1e       	adc	r13, r25
    3992:	00 e0       	ldi	r16, 0x00	; 0
    3994:	10 e0       	ldi	r17, 0x00	; 0
    3996:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <_ZN15OrangutanSerial5checkEv>
    399a:	98 81       	ld	r25, Y
    399c:	f6 01       	movw	r30, r12
    399e:	80 81       	ld	r24, Z
    39a0:	98 17       	cp	r25, r24
    39a2:	11 f4       	brne	.+4      	; 0x39a8 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x66>
    39a4:	80 e0       	ldi	r24, 0x00	; 0
    39a6:	0c c0       	rjmp	.+24     	; 0x39c0 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x7e>
    39a8:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <get_ms>
    39ac:	68 19       	sub	r22, r8
    39ae:	79 09       	sbc	r23, r9
    39b0:	8a 09       	sbc	r24, r10
    39b2:	9b 09       	sbc	r25, r11
    39b4:	6e 15       	cp	r22, r14
    39b6:	7f 05       	cpc	r23, r15
    39b8:	80 07       	cpc	r24, r16
    39ba:	91 07       	cpc	r25, r17
    39bc:	60 f3       	brcs	.-40     	; 0x3996 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x54>
    39be:	81 e0       	ldi	r24, 0x01	; 1
    39c0:	cd b7       	in	r28, 0x3d	; 61
    39c2:	de b7       	in	r29, 0x3e	; 62
    39c4:	ec e0       	ldi	r30, 0x0C	; 12
    39c6:	0c 94 06 20 	jmp	0x400c	; 0x400c <__epilogue_restores__+0xc>

000039ca <serial_receive_blocking>:
    39ca:	0e 94 a1 1c 	call	0x3942	; 0x3942 <_ZN15OrangutanSerial15receiveBlockingEhPchj>
    39ce:	08 95       	ret

000039d0 <serial_check>:
    39d0:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <_ZN15OrangutanSerial5checkEv>
    39d4:	08 95       	ret

000039d6 <__vector_11>:
    39d6:	2f 92       	push	r2
    39d8:	8f 93       	push	r24
    39da:	9f 93       	push	r25
    39dc:	2f b6       	in	r2, 0x3f	; 63
    39de:	80 91 09 04 	lds	r24, 0x0409
    39e2:	90 91 0a 04 	lds	r25, 0x040A
    39e6:	01 96       	adiw	r24, 0x01	; 1
    39e8:	80 93 09 04 	sts	0x0409, r24
    39ec:	90 93 0a 04 	sts	0x040A, r25
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	80 91 0b 04 	lds	r24, 0x040B
    39f6:	89 1f       	adc	r24, r25
    39f8:	80 93 0b 04 	sts	0x040B, r24
    39fc:	90 91 11 04 	lds	r25, 0x0411
    3a00:	9c 5f       	subi	r25, 0xFC	; 252
    3a02:	90 93 11 04 	sts	0x0411, r25
    3a06:	80 91 10 04 	lds	r24, 0x0410
    3a0a:	80 51       	subi	r24, 0x10	; 16
    3a0c:	97 42       	sbci	r25, 0x27	; 39
    3a0e:	c0 f0       	brcs	.+48     	; 0x3a40 <end>
    3a10:	90 93 11 04 	sts	0x0411, r25
    3a14:	80 93 10 04 	sts	0x0410, r24
    3a18:	80 91 0c 04 	lds	r24, 0x040C
    3a1c:	90 91 0d 04 	lds	r25, 0x040D
    3a20:	01 96       	adiw	r24, 0x01	; 1
    3a22:	80 93 0c 04 	sts	0x040C, r24
    3a26:	90 93 0d 04 	sts	0x040D, r25
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	80 91 0e 04 	lds	r24, 0x040E
    3a30:	89 1f       	adc	r24, r25
    3a32:	80 93 0e 04 	sts	0x040E, r24
    3a36:	80 91 0f 04 	lds	r24, 0x040F
    3a3a:	89 1f       	adc	r24, r25
    3a3c:	80 93 0f 04 	sts	0x040F, r24

00003a40 <end>:
    3a40:	2f be       	out	0x3f, r2	; 63
    3a42:	9f 91       	pop	r25
    3a44:	8f 91       	pop	r24
    3a46:	2f 90       	pop	r2
    3a48:	18 95       	reti

00003a4a <ticks_to_microseconds>:
    3a4a:	6f 5f       	subi	r22, 0xFF	; 255
    3a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a4e:	8f 4f       	sbci	r24, 0xFF	; 255
    3a50:	9f 4f       	sbci	r25, 0xFF	; 255
    3a52:	66 0f       	add	r22, r22
    3a54:	77 1f       	adc	r23, r23
    3a56:	88 1f       	adc	r24, r24
    3a58:	99 1f       	adc	r25, r25
    3a5a:	25 e0       	ldi	r18, 0x05	; 5
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	40 e0       	ldi	r20, 0x00	; 0
    3a60:	50 e0       	ldi	r21, 0x00	; 0
    3a62:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <__udivmodsi4>
    3a66:	ca 01       	movw	r24, r20
    3a68:	b9 01       	movw	r22, r18
    3a6a:	08 95       	ret

00003a6c <delay_ms>:
    3a6c:	28 ee       	ldi	r18, 0xE8	; 232
    3a6e:	33 e0       	ldi	r19, 0x03	; 3
    3a70:	09 c0       	rjmp	.+18     	; 0x3a84 <delay_ms+0x18>
    3a72:	f9 01       	movw	r30, r18
    3a74:	6f 93       	push	r22
    3a76:	64 e0       	ldi	r22, 0x04	; 4
    3a78:	6a 95       	dec	r22
    3a7a:	f1 f7       	brne	.-4      	; 0x3a78 <delay_ms+0xc>
    3a7c:	6f 91       	pop	r22
    3a7e:	31 97       	sbiw	r30, 0x01	; 1
    3a80:	c9 f7       	brne	.-14     	; 0x3a74 <delay_ms+0x8>
    3a82:	01 97       	sbiw	r24, 0x01	; 1
    3a84:	00 97       	sbiw	r24, 0x00	; 0
    3a86:	a9 f7       	brne	.-22     	; 0x3a72 <delay_ms+0x6>
    3a88:	08 95       	ret

00003a8a <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    3a8a:	6f 5f       	subi	r22, 0xFF	; 255
    3a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a8e:	8f 4f       	sbci	r24, 0xFF	; 255
    3a90:	9f 4f       	sbci	r25, 0xFF	; 255
    3a92:	66 0f       	add	r22, r22
    3a94:	77 1f       	adc	r23, r23
    3a96:	88 1f       	adc	r24, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	25 e0       	ldi	r18, 0x05	; 5
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	40 e0       	ldi	r20, 0x00	; 0
    3aa0:	50 e0       	ldi	r21, 0x00	; 0
    3aa2:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <__udivmodsi4>
    3aa6:	ca 01       	movw	r24, r20
    3aa8:	b9 01       	movw	r22, r18
    3aaa:	08 95       	ret

00003aac <_ZN13OrangutanTime17delayMillisecondsEj>:
    3aac:	28 ee       	ldi	r18, 0xE8	; 232
    3aae:	33 e0       	ldi	r19, 0x03	; 3
    3ab0:	09 c0       	rjmp	.+18     	; 0x3ac4 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3ab2:	f9 01       	movw	r30, r18
    3ab4:	6f 93       	push	r22
    3ab6:	64 e0       	ldi	r22, 0x04	; 4
    3ab8:	6a 95       	dec	r22
    3aba:	f1 f7       	brne	.-4      	; 0x3ab8 <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3abc:	6f 91       	pop	r22
    3abe:	31 97       	sbiw	r30, 0x01	; 1
    3ac0:	c9 f7       	brne	.-14     	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	00 97       	sbiw	r24, 0x00	; 0
    3ac6:	a9 f7       	brne	.-22     	; 0x3ab2 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    3ac8:	08 95       	ret

00003aca <_ZN13OrangutanTime5init2Ev>:
    3aca:	a0 e7       	ldi	r26, 0x70	; 112
    3acc:	b0 e0       	ldi	r27, 0x00	; 0
    3ace:	8c 91       	ld	r24, X
    3ad0:	8e 7f       	andi	r24, 0xFE	; 254
    3ad2:	8c 93       	st	X, r24
    3ad4:	e0 eb       	ldi	r30, 0xB0	; 176
    3ad6:	f0 e0       	ldi	r31, 0x00	; 0
    3ad8:	80 81       	ld	r24, Z
    3ada:	83 60       	ori	r24, 0x03	; 3
    3adc:	80 83       	st	Z, r24
    3ade:	e1 eb       	ldi	r30, 0xB1	; 177
    3ae0:	f0 e0       	ldi	r31, 0x00	; 0
    3ae2:	80 81       	ld	r24, Z
    3ae4:	80 7f       	andi	r24, 0xF0	; 240
    3ae6:	80 83       	st	Z, r24
    3ae8:	80 81       	ld	r24, Z
    3aea:	82 60       	ori	r24, 0x02	; 2
    3aec:	80 83       	st	Z, r24
    3aee:	b8 9a       	sbi	0x17, 0	; 23
    3af0:	8c 91       	ld	r24, X
    3af2:	81 60       	ori	r24, 0x01	; 1
    3af4:	8c 93       	st	X, r24
    3af6:	78 94       	sei
    3af8:	08 95       	ret

00003afa <_ZN13OrangutanTime4initEv>:
    3afa:	80 91 12 04 	lds	r24, 0x0412
    3afe:	88 23       	and	r24, r24
    3b00:	29 f4       	brne	.+10     	; 0x3b0c <_ZN13OrangutanTime4initEv+0x12>
    3b02:	81 e0       	ldi	r24, 0x01	; 1
    3b04:	80 93 12 04 	sts	0x0412, r24
    3b08:	0e 94 65 1d 	call	0x3aca	; 0x3aca <_ZN13OrangutanTime5init2Ev>
    3b0c:	08 95       	ret

00003b0e <_ZN13OrangutanTime2msEv>:
    3b0e:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <_ZN13OrangutanTime4initEv>
    3b12:	e0 e7       	ldi	r30, 0x70	; 112
    3b14:	f0 e0       	ldi	r31, 0x00	; 0
    3b16:	80 81       	ld	r24, Z
    3b18:	8e 7f       	andi	r24, 0xFE	; 254
    3b1a:	80 83       	st	Z, r24
    3b1c:	20 91 0c 04 	lds	r18, 0x040C
    3b20:	30 91 0d 04 	lds	r19, 0x040D
    3b24:	40 91 0e 04 	lds	r20, 0x040E
    3b28:	50 91 0f 04 	lds	r21, 0x040F
    3b2c:	80 81       	ld	r24, Z
    3b2e:	81 60       	ori	r24, 0x01	; 1
    3b30:	80 83       	st	Z, r24
    3b32:	b9 01       	movw	r22, r18
    3b34:	ca 01       	movw	r24, r20
    3b36:	08 95       	ret

00003b38 <get_ms>:
    3b38:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <_ZN13OrangutanTime2msEv>
    3b3c:	08 95       	ret

00003b3e <_ZN13OrangutanTime5ticksEv>:
    3b3e:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <_ZN13OrangutanTime4initEv>
    3b42:	80 91 70 00 	lds	r24, 0x0070
    3b46:	8e 7f       	andi	r24, 0xFE	; 254
    3b48:	80 93 70 00 	sts	0x0070, r24
    3b4c:	60 91 b2 00 	lds	r22, 0x00B2
    3b50:	80 91 08 04 	lds	r24, 0x0408
    3b54:	90 91 09 04 	lds	r25, 0x0409
    3b58:	a0 91 0a 04 	lds	r26, 0x040A
    3b5c:	b0 91 0b 04 	lds	r27, 0x040B
    3b60:	b8 99       	sbic	0x17, 0	; 23
    3b62:	05 c0       	rjmp	.+10     	; 0x3b6e <_ZN13OrangutanTime5ticksEv+0x30>
    3b64:	26 2f       	mov	r18, r22
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	40 e0       	ldi	r20, 0x00	; 0
    3b6a:	50 e0       	ldi	r21, 0x00	; 0
    3b6c:	11 c0       	rjmp	.+34     	; 0x3b90 <_ZN13OrangutanTime5ticksEv+0x52>
    3b6e:	80 91 b2 00 	lds	r24, 0x00B2
    3b72:	20 91 08 04 	lds	r18, 0x0408
    3b76:	30 91 09 04 	lds	r19, 0x0409
    3b7a:	40 91 0a 04 	lds	r20, 0x040A
    3b7e:	50 91 0b 04 	lds	r21, 0x040B
    3b82:	20 50       	subi	r18, 0x00	; 0
    3b84:	3f 4f       	sbci	r19, 0xFF	; 255
    3b86:	4f 4f       	sbci	r20, 0xFF	; 255
    3b88:	5f 4f       	sbci	r21, 0xFF	; 255
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	a0 e0       	ldi	r26, 0x00	; 0
    3b8e:	b0 e0       	ldi	r27, 0x00	; 0
    3b90:	28 2b       	or	r18, r24
    3b92:	39 2b       	or	r19, r25
    3b94:	4a 2b       	or	r20, r26
    3b96:	5b 2b       	or	r21, r27
    3b98:	80 91 70 00 	lds	r24, 0x0070
    3b9c:	81 60       	ori	r24, 0x01	; 1
    3b9e:	80 93 70 00 	sts	0x0070, r24
    3ba2:	b9 01       	movw	r22, r18
    3ba4:	ca 01       	movw	r24, r20
    3ba6:	08 95       	ret

00003ba8 <get_ticks>:
    3ba8:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <_ZN13OrangutanTime5ticksEv>
    3bac:	08 95       	ret

00003bae <_ZN13OrangutanTime5resetEv>:
    3bae:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <_ZN13OrangutanTime4initEv>
    3bb2:	e0 e7       	ldi	r30, 0x70	; 112
    3bb4:	f0 e0       	ldi	r31, 0x00	; 0
    3bb6:	80 81       	ld	r24, Z
    3bb8:	8e 7f       	andi	r24, 0xFE	; 254
    3bba:	80 83       	st	Z, r24
    3bbc:	10 92 0c 04 	sts	0x040C, r1
    3bc0:	10 92 0d 04 	sts	0x040D, r1
    3bc4:	10 92 0e 04 	sts	0x040E, r1
    3bc8:	10 92 0f 04 	sts	0x040F, r1
    3bcc:	10 92 11 04 	sts	0x0411, r1
    3bd0:	10 92 10 04 	sts	0x0410, r1
    3bd4:	80 81       	ld	r24, Z
    3bd6:	81 60       	ori	r24, 0x01	; 1
    3bd8:	80 83       	st	Z, r24
    3bda:	08 95       	ret

00003bdc <time_reset>:
    3bdc:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <_ZN13OrangutanTime5resetEv>
    3be0:	08 95       	ret

00003be2 <_ZN12OrangutanSVP7setModeEh>:
    3be2:	98 2f       	mov	r25, r24
    3be4:	80 91 29 04 	lds	r24, 0x0429
    3be8:	89 17       	cp	r24, r25
    3bea:	39 f0       	breq	.+14     	; 0x3bfa <_ZN12OrangutanSVP7setModeEh+0x18>
    3bec:	90 93 29 04 	sts	0x0429, r25
    3bf0:	89 2f       	mov	r24, r25
    3bf2:	80 6c       	ori	r24, 0xC0	; 192
    3bf4:	65 e0       	ldi	r22, 0x05	; 5
    3bf6:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3bfa:	08 95       	ret

00003bfc <svp_set_mode>:
    3bfc:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <_ZN12OrangutanSVP7setModeEh>
    3c00:	08 95       	ret

00003c02 <_ZN12OrangutanSVP17serialSendIfReadyEc>:
    3c02:	1f 93       	push	r17
    3c04:	18 2f       	mov	r17, r24
    3c06:	88 1f       	adc	r24, r24
    3c08:	88 27       	eor	r24, r24
    3c0a:	88 1f       	adc	r24, r24
    3c0c:	8c 57       	subi	r24, 0x7C	; 124
    3c0e:	65 e0       	ldi	r22, 0x05	; 5
    3c10:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3c14:	81 2f       	mov	r24, r17
    3c16:	8f 77       	andi	r24, 0x7F	; 127
    3c18:	65 e0       	ldi	r22, 0x05	; 5
    3c1a:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3c1e:	1f 91       	pop	r17
    3c20:	08 95       	ret

00003c22 <_ZN12OrangutanSVP11getNextByteEv>:
    3c22:	8f ef       	ldi	r24, 0xFF	; 255
    3c24:	64 e0       	ldi	r22, 0x04	; 4
    3c26:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3c2a:	08 95       	ret

00003c2c <_ZL23updateVariablesIfNeededv>:
    3c2c:	cf 93       	push	r28
    3c2e:	df 93       	push	r29
    3c30:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <_ZN13OrangutanTime2msEv>
    3c34:	20 91 e8 03 	lds	r18, 0x03E8
    3c38:	30 91 e9 03 	lds	r19, 0x03E9
    3c3c:	40 91 ea 03 	lds	r20, 0x03EA
    3c40:	50 91 eb 03 	lds	r21, 0x03EB
    3c44:	62 17       	cp	r22, r18
    3c46:	73 07       	cpc	r23, r19
    3c48:	84 07       	cpc	r24, r20
    3c4a:	95 07       	cpc	r25, r21
    3c4c:	b9 f0       	breq	.+46     	; 0x3c7c <_ZL23updateVariablesIfNeededv+0x50>
    3c4e:	81 e8       	ldi	r24, 0x81	; 129
    3c50:	67 e0       	ldi	r22, 0x07	; 7
    3c52:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3c56:	cc e1       	ldi	r28, 0x1C	; 28
    3c58:	d4 e0       	ldi	r29, 0x04	; 4
    3c5a:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <_ZN12OrangutanSVP11getNextByteEv>
    3c5e:	89 93       	st	Y+, r24
    3c60:	84 e0       	ldi	r24, 0x04	; 4
    3c62:	c9 32       	cpi	r28, 0x29	; 41
    3c64:	d8 07       	cpc	r29, r24
    3c66:	c9 f7       	brne	.-14     	; 0x3c5a <_ZL23updateVariablesIfNeededv+0x2e>
    3c68:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <_ZN13OrangutanTime2msEv>
    3c6c:	60 93 e8 03 	sts	0x03E8, r22
    3c70:	70 93 e9 03 	sts	0x03E9, r23
    3c74:	80 93 ea 03 	sts	0x03EA, r24
    3c78:	90 93 eb 03 	sts	0x03EB, r25
    3c7c:	df 91       	pop	r29
    3c7e:	cf 91       	pop	r28
    3c80:	08 95       	ret

00003c82 <_ZN12OrangutanSVP9getStatusEv>:
    3c82:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <_ZL23updateVariablesIfNeededv>
    3c86:	80 91 1c 04 	lds	r24, 0x041C
    3c8a:	08 95       	ret

00003c8c <svp_get_status>:
    3c8c:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <_ZN12OrangutanSVP9getStatusEv>
    3c90:	08 95       	ret

00003c92 <_ZN12OrangutanSVP21getChannelDMillivoltsEv>:
    3c92:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <_ZL23updateVariablesIfNeededv>
    3c96:	80 91 23 04 	lds	r24, 0x0423
    3c9a:	90 91 24 04 	lds	r25, 0x0424
    3c9e:	08 95       	ret

00003ca0 <_ZN12OrangutanSVP21getChannelCMillivoltsEv>:
    3ca0:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <_ZL23updateVariablesIfNeededv>
    3ca4:	80 91 21 04 	lds	r24, 0x0421
    3ca8:	90 91 22 04 	lds	r25, 0x0422
    3cac:	08 95       	ret

00003cae <_ZN12OrangutanSVP21getChannelBMillivoltsEv>:
    3cae:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <_ZL23updateVariablesIfNeededv>
    3cb2:	80 91 1f 04 	lds	r24, 0x041F
    3cb6:	90 91 20 04 	lds	r25, 0x0420
    3cba:	08 95       	ret

00003cbc <_ZN12OrangutanSVP21getChannelAMillivoltsEv>:
    3cbc:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <_ZL23updateVariablesIfNeededv>
    3cc0:	80 91 1d 04 	lds	r24, 0x041D
    3cc4:	90 91 1e 04 	lds	r25, 0x041E
    3cc8:	08 95       	ret

00003cca <_ZN12OrangutanSVP20getBatteryMillivoltsEv>:
    3cca:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <_ZL23updateVariablesIfNeededv>
    3cce:	80 91 27 04 	lds	r24, 0x0427
    3cd2:	90 91 28 04 	lds	r25, 0x0428
    3cd6:	08 95       	ret

00003cd8 <_ZN12OrangutanSVP20getTrimpotMillivoltsEv>:
    3cd8:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <_ZL23updateVariablesIfNeededv>
    3cdc:	80 91 25 04 	lds	r24, 0x0425
    3ce0:	90 91 26 04 	lds	r25, 0x0426
    3ce4:	08 95       	ret

00003ce6 <_ZN12OrangutanSVP15serialReadStartEv>:
    3ce6:	83 e8       	ldi	r24, 0x83	; 131
    3ce8:	67 e0       	ldi	r22, 0x07	; 7
    3cea:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3cee:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <_ZN12OrangutanSVP11getNextByteEv>
    3cf2:	08 95       	ret

00003cf4 <_Z14updateEncodersv>:
    3cf4:	a5 e0       	ldi	r26, 0x05	; 5
    3cf6:	b0 e0       	ldi	r27, 0x00	; 0
    3cf8:	e0 e8       	ldi	r30, 0x80	; 128
    3cfa:	fe e1       	ldi	r31, 0x1E	; 30
    3cfc:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <__prologue_saves__+0x1e>
    3d00:	82 e8       	ldi	r24, 0x82	; 130
    3d02:	66 e0       	ldi	r22, 0x06	; 6
    3d04:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3d08:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <_ZN12OrangutanSVP11getNextByteEv>
    3d0c:	80 93 17 04 	sts	0x0417, r24
    3d10:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <_ZN12OrangutanSVP11getNextByteEv>
    3d14:	80 93 18 04 	sts	0x0418, r24
    3d18:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <_ZN12OrangutanSVP11getNextByteEv>
    3d1c:	80 93 19 04 	sts	0x0419, r24
    3d20:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <_ZN12OrangutanSVP11getNextByteEv>
    3d24:	80 93 1a 04 	sts	0x041A, r24
    3d28:	10 91 1b 04 	lds	r17, 0x041B
    3d2c:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <_ZN12OrangutanSVP11getNextByteEv>
    3d30:	18 2b       	or	r17, r24
    3d32:	10 93 1b 04 	sts	0x041B, r17
    3d36:	de 01       	movw	r26, r28
    3d38:	11 96       	adiw	r26, 0x01	; 1
    3d3a:	e7 e1       	ldi	r30, 0x17	; 23
    3d3c:	f4 e0       	ldi	r31, 0x04	; 4
    3d3e:	85 e0       	ldi	r24, 0x05	; 5
    3d40:	01 90       	ld	r0, Z+
    3d42:	0d 92       	st	X+, r0
    3d44:	81 50       	subi	r24, 0x01	; 1
    3d46:	e1 f7       	brne	.-8      	; 0x3d40 <_Z14updateEncodersv+0x4c>
    3d48:	29 81       	ldd	r18, Y+1	; 0x01
    3d4a:	3a 81       	ldd	r19, Y+2	; 0x02
    3d4c:	4b 81       	ldd	r20, Y+3	; 0x03
    3d4e:	5c 81       	ldd	r21, Y+4	; 0x04
    3d50:	6d 81       	ldd	r22, Y+5	; 0x05
    3d52:	70 e0       	ldi	r23, 0x00	; 0
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	25 96       	adiw	r28, 0x05	; 5
    3d58:	e3 e0       	ldi	r30, 0x03	; 3
    3d5a:	0c 94 0f 20 	jmp	0x401e	; 0x401e <__epilogue_restores__+0x1e>

00003d5e <_ZL22updateEncodersIfNeededv>:
    3d5e:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <_ZN13OrangutanTime2msEv>
    3d62:	20 91 e4 03 	lds	r18, 0x03E4
    3d66:	30 91 e5 03 	lds	r19, 0x03E5
    3d6a:	40 91 e6 03 	lds	r20, 0x03E6
    3d6e:	50 91 e7 03 	lds	r21, 0x03E7
    3d72:	62 17       	cp	r22, r18
    3d74:	73 07       	cpc	r23, r19
    3d76:	84 07       	cpc	r24, r20
    3d78:	95 07       	cpc	r25, r21
    3d7a:	61 f0       	breq	.+24     	; 0x3d94 <_ZL22updateEncodersIfNeededv+0x36>
    3d7c:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <_Z14updateEncodersv>
    3d80:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <_ZN13OrangutanTime2msEv>
    3d84:	60 93 e4 03 	sts	0x03E4, r22
    3d88:	70 93 e5 03 	sts	0x03E5, r23
    3d8c:	80 93 e6 03 	sts	0x03E6, r24
    3d90:	90 93 e7 03 	sts	0x03E7, r25
    3d94:	08 95       	ret

00003d96 <_ZN12OrangutanSVP12checkErrorCDEv>:
    3d96:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <_ZL22updateEncodersIfNeededv>
    3d9a:	80 91 1b 04 	lds	r24, 0x041B
    3d9e:	81 fd       	sbrc	r24, 1
    3da0:	02 c0       	rjmp	.+4      	; 0x3da6 <_ZN12OrangutanSVP12checkErrorCDEv+0x10>
    3da2:	80 e0       	ldi	r24, 0x00	; 0
    3da4:	08 95       	ret
    3da6:	8d 7f       	andi	r24, 0xFD	; 253
    3da8:	80 93 1b 04 	sts	0x041B, r24
    3dac:	81 e0       	ldi	r24, 0x01	; 1
    3dae:	08 95       	ret

00003db0 <svp_check_error_cd>:
    3db0:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <_ZN12OrangutanSVP12checkErrorCDEv>
    3db4:	08 95       	ret

00003db6 <_ZN12OrangutanSVP12checkErrorABEv>:
    3db6:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <_ZL22updateEncodersIfNeededv>
    3dba:	80 91 1b 04 	lds	r24, 0x041B
    3dbe:	80 fd       	sbrc	r24, 0
    3dc0:	02 c0       	rjmp	.+4      	; 0x3dc6 <_ZN12OrangutanSVP12checkErrorABEv+0x10>
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
    3dc4:	08 95       	ret
    3dc6:	8e 7f       	andi	r24, 0xFE	; 254
    3dc8:	80 93 1b 04 	sts	0x041B, r24
    3dcc:	81 e0       	ldi	r24, 0x01	; 1
    3dce:	08 95       	ret

00003dd0 <svp_check_error_ab>:
    3dd0:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN12OrangutanSVP12checkErrorABEv>
    3dd4:	08 95       	ret

00003dd6 <_ZN12OrangutanSVP11getCountsCDEv>:
    3dd6:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <_ZL22updateEncodersIfNeededv>
    3dda:	20 91 19 04 	lds	r18, 0x0419
    3dde:	30 91 1a 04 	lds	r19, 0x041A
    3de2:	80 91 15 04 	lds	r24, 0x0415
    3de6:	90 91 16 04 	lds	r25, 0x0416
    3dea:	28 1b       	sub	r18, r24
    3dec:	39 0b       	sbc	r19, r25
    3dee:	c9 01       	movw	r24, r18
    3df0:	08 95       	ret

00003df2 <_ZN12OrangutanSVP19getCountsAndResetCDEv>:
    3df2:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <_ZN12OrangutanSVP11getCountsCDEv>
    3df6:	20 91 19 04 	lds	r18, 0x0419
    3dfa:	30 91 1a 04 	lds	r19, 0x041A
    3dfe:	30 93 16 04 	sts	0x0416, r19
    3e02:	20 93 15 04 	sts	0x0415, r18
    3e06:	08 95       	ret

00003e08 <svp_get_counts_and_reset_cd>:
    3e08:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_ZN12OrangutanSVP19getCountsAndResetCDEv>
    3e0c:	08 95       	ret

00003e0e <svp_get_counts_cd>:
    3e0e:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <_ZN12OrangutanSVP11getCountsCDEv>
    3e12:	08 95       	ret

00003e14 <_ZN12OrangutanSVP11getCountsABEv>:
    3e14:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <_ZL22updateEncodersIfNeededv>
    3e18:	20 91 17 04 	lds	r18, 0x0417
    3e1c:	30 91 18 04 	lds	r19, 0x0418
    3e20:	80 91 13 04 	lds	r24, 0x0413
    3e24:	90 91 14 04 	lds	r25, 0x0414
    3e28:	28 1b       	sub	r18, r24
    3e2a:	39 0b       	sbc	r19, r25
    3e2c:	c9 01       	movw	r24, r18
    3e2e:	08 95       	ret

00003e30 <_ZN12OrangutanSVP19getCountsAndResetABEv>:
    3e30:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <_ZN12OrangutanSVP11getCountsABEv>
    3e34:	20 91 17 04 	lds	r18, 0x0417
    3e38:	30 91 18 04 	lds	r19, 0x0418
    3e3c:	30 93 14 04 	sts	0x0414, r19
    3e40:	20 93 13 04 	sts	0x0413, r18
    3e44:	08 95       	ret

00003e46 <svp_get_counts_and_reset_ab>:
    3e46:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <_ZN12OrangutanSVP19getCountsAndResetABEv>
    3e4a:	08 95       	ret

00003e4c <svp_get_counts_ab>:
    3e4c:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <_ZN12OrangutanSVP11getCountsABEv>
    3e50:	08 95       	ret

00003e52 <_ZN12OrangutanSVP18getFirmwareVersionEv>:
    3e52:	80 e8       	ldi	r24, 0x80	; 128
    3e54:	65 e0       	ldi	r22, 0x05	; 5
    3e56:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3e5a:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <_ZN12OrangutanSVP11getNextByteEv>
    3e5e:	08 95       	ret

00003e60 <svp_get_firmware_version>:
    3e60:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <_ZN12OrangutanSVP18getFirmwareVersionEv>
    3e64:	08 95       	ret

00003e66 <_ZN18OrangutanSPIMaster4initEhh>:
    3e66:	98 2f       	mov	r25, r24
    3e68:	24 99       	sbic	0x04, 4	; 4
    3e6a:	0c c0       	rjmp	.+24     	; 0x3e84 <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    3e6c:	2c 99       	sbic	0x05, 4	; 5
    3e6e:	0a c0       	rjmp	.+20     	; 0x3e84 <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    3e70:	2c 9a       	sbi	0x05, 4	; 5
    3e72:	ee e1       	ldi	r30, 0x1E	; 30
    3e74:	f0 e0       	ldi	r31, 0x00	; 0
    3e76:	6f 93       	push	r22
    3e78:	64 e0       	ldi	r22, 0x04	; 4
    3e7a:	6a 95       	dec	r22
    3e7c:	f1 f7       	brne	.-4      	; 0x3e7a <_ZN18OrangutanSPIMaster4initEhh+0x14>
    3e7e:	6f 91       	pop	r22
    3e80:	31 97       	sbiw	r30, 0x01	; 1
    3e82:	c9 f7       	brne	.-14     	; 0x3e76 <_ZN18OrangutanSPIMaster4initEhh+0x10>
    3e84:	84 b1       	in	r24, 0x04	; 4
    3e86:	80 6a       	ori	r24, 0xA0	; 160
    3e88:	84 b9       	out	0x04, r24	; 4
    3e8a:	26 98       	cbi	0x04, 6	; 4
    3e8c:	89 2f       	mov	r24, r25
    3e8e:	83 70       	andi	r24, 0x03	; 3
    3e90:	80 65       	ori	r24, 0x50	; 80
    3e92:	6c 7a       	andi	r22, 0xAC	; 172
    3e94:	86 2b       	or	r24, r22
    3e96:	8c bd       	out	0x2c, r24	; 44
    3e98:	89 2f       	mov	r24, r25
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	96 95       	lsr	r25
    3e9e:	87 95       	ror	r24
    3ea0:	96 95       	lsr	r25
    3ea2:	87 95       	ror	r24
    3ea4:	81 70       	andi	r24, 0x01	; 1
    3ea6:	8d bd       	out	0x2d, r24	; 45
    3ea8:	81 e0       	ldi	r24, 0x01	; 1
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	0e 94 56 1d 	call	0x3aac	; 0x3aac <_ZN13OrangutanTime17delayMillisecondsEj>
    3eb0:	08 95       	ret

00003eb2 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>:
    3eb2:	0f 93       	push	r16
    3eb4:	1f 93       	push	r17
    3eb6:	08 2f       	mov	r16, r24
    3eb8:	16 2f       	mov	r17, r22
    3eba:	0c b4       	in	r0, 0x2c	; 44
    3ebc:	06 fc       	sbrc	r0, 6
    3ebe:	04 c0       	rjmp	.+8      	; 0x3ec8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x16>
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	64 e0       	ldi	r22, 0x04	; 4
    3ec4:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <_ZN18OrangutanSPIMaster4initEhh>
    3ec8:	0c b4       	in	r0, 0x2c	; 44
    3eca:	04 fc       	sbrc	r0, 4
    3ecc:	03 c0       	rjmp	.+6      	; 0x3ed4 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x22>
    3ece:	8c b5       	in	r24, 0x2c	; 44
    3ed0:	80 61       	ori	r24, 0x10	; 16
    3ed2:	8c bd       	out	0x2c, r24	; 44
    3ed4:	0e bd       	out	0x2e, r16	; 46
    3ed6:	05 c0       	rjmp	.+10     	; 0x3ee2 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    3ed8:	0c b4       	in	r0, 0x2c	; 44
    3eda:	04 fc       	sbrc	r0, 4
    3edc:	02 c0       	rjmp	.+4      	; 0x3ee2 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    3ede:	80 e0       	ldi	r24, 0x00	; 0
    3ee0:	0f c0       	rjmp	.+30     	; 0x3f00 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4e>
    3ee2:	0d b4       	in	r0, 0x2d	; 45
    3ee4:	07 fe       	sbrs	r0, 7
    3ee6:	f8 cf       	rjmp	.-16     	; 0x3ed8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x26>
    3ee8:	11 23       	and	r17, r17
    3eea:	49 f0       	breq	.+18     	; 0x3efe <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4c>
    3eec:	81 2f       	mov	r24, r17
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	6f 93       	push	r22
    3ef2:	64 e0       	ldi	r22, 0x04	; 4
    3ef4:	6a 95       	dec	r22
    3ef6:	f1 f7       	brne	.-4      	; 0x3ef4 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x42>
    3ef8:	6f 91       	pop	r22
    3efa:	01 97       	sbiw	r24, 0x01	; 1
    3efc:	c9 f7       	brne	.-14     	; 0x3ef0 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x3e>
    3efe:	8e b5       	in	r24, 0x2e	; 46
    3f00:	1f 91       	pop	r17
    3f02:	0f 91       	pop	r16
    3f04:	08 95       	ret

00003f06 <_ZN18OrangutanSPIMaster8transmitEh>:
    3f06:	60 e0       	ldi	r22, 0x00	; 0
    3f08:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3f0c:	08 95       	ret

00003f0e <spi_master_transmit>:
    3f0e:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <_ZN18OrangutanSPIMaster8transmitEh>
    3f12:	08 95       	ret

00003f14 <spi_master_transmit_and_delay>:
    3f14:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3f18:	08 95       	ret

00003f1a <spi_master_init>:
    3f1a:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <_ZN18OrangutanSPIMaster4initEhh>
    3f1e:	08 95       	ret

00003f20 <__mulsi3>:
    3f20:	62 9f       	mul	r22, r18
    3f22:	d0 01       	movw	r26, r0
    3f24:	73 9f       	mul	r23, r19
    3f26:	f0 01       	movw	r30, r0
    3f28:	82 9f       	mul	r24, r18
    3f2a:	e0 0d       	add	r30, r0
    3f2c:	f1 1d       	adc	r31, r1
    3f2e:	64 9f       	mul	r22, r20
    3f30:	e0 0d       	add	r30, r0
    3f32:	f1 1d       	adc	r31, r1
    3f34:	92 9f       	mul	r25, r18
    3f36:	f0 0d       	add	r31, r0
    3f38:	83 9f       	mul	r24, r19
    3f3a:	f0 0d       	add	r31, r0
    3f3c:	74 9f       	mul	r23, r20
    3f3e:	f0 0d       	add	r31, r0
    3f40:	65 9f       	mul	r22, r21
    3f42:	f0 0d       	add	r31, r0
    3f44:	99 27       	eor	r25, r25
    3f46:	72 9f       	mul	r23, r18
    3f48:	b0 0d       	add	r27, r0
    3f4a:	e1 1d       	adc	r30, r1
    3f4c:	f9 1f       	adc	r31, r25
    3f4e:	63 9f       	mul	r22, r19
    3f50:	b0 0d       	add	r27, r0
    3f52:	e1 1d       	adc	r30, r1
    3f54:	f9 1f       	adc	r31, r25
    3f56:	bd 01       	movw	r22, r26
    3f58:	cf 01       	movw	r24, r30
    3f5a:	11 24       	eor	r1, r1
    3f5c:	08 95       	ret

00003f5e <__divmodhi4>:
    3f5e:	97 fb       	bst	r25, 7
    3f60:	09 2e       	mov	r0, r25
    3f62:	07 26       	eor	r0, r23
    3f64:	0a d0       	rcall	.+20     	; 0x3f7a <__divmodhi4_neg1>
    3f66:	77 fd       	sbrc	r23, 7
    3f68:	04 d0       	rcall	.+8      	; 0x3f72 <__divmodhi4_neg2>
    3f6a:	65 d0       	rcall	.+202    	; 0x4036 <__udivmodhi4>
    3f6c:	06 d0       	rcall	.+12     	; 0x3f7a <__divmodhi4_neg1>
    3f6e:	00 20       	and	r0, r0
    3f70:	1a f4       	brpl	.+6      	; 0x3f78 <__divmodhi4_exit>

00003f72 <__divmodhi4_neg2>:
    3f72:	70 95       	com	r23
    3f74:	61 95       	neg	r22
    3f76:	7f 4f       	sbci	r23, 0xFF	; 255

00003f78 <__divmodhi4_exit>:
    3f78:	08 95       	ret

00003f7a <__divmodhi4_neg1>:
    3f7a:	f6 f7       	brtc	.-4      	; 0x3f78 <__divmodhi4_exit>
    3f7c:	90 95       	com	r25
    3f7e:	81 95       	neg	r24
    3f80:	9f 4f       	sbci	r25, 0xFF	; 255
    3f82:	08 95       	ret

00003f84 <__udivmodsi4>:
    3f84:	a1 e2       	ldi	r26, 0x21	; 33
    3f86:	1a 2e       	mov	r1, r26
    3f88:	aa 1b       	sub	r26, r26
    3f8a:	bb 1b       	sub	r27, r27
    3f8c:	fd 01       	movw	r30, r26
    3f8e:	0d c0       	rjmp	.+26     	; 0x3faa <__udivmodsi4_ep>

00003f90 <__udivmodsi4_loop>:
    3f90:	aa 1f       	adc	r26, r26
    3f92:	bb 1f       	adc	r27, r27
    3f94:	ee 1f       	adc	r30, r30
    3f96:	ff 1f       	adc	r31, r31
    3f98:	a2 17       	cp	r26, r18
    3f9a:	b3 07       	cpc	r27, r19
    3f9c:	e4 07       	cpc	r30, r20
    3f9e:	f5 07       	cpc	r31, r21
    3fa0:	20 f0       	brcs	.+8      	; 0x3faa <__udivmodsi4_ep>
    3fa2:	a2 1b       	sub	r26, r18
    3fa4:	b3 0b       	sbc	r27, r19
    3fa6:	e4 0b       	sbc	r30, r20
    3fa8:	f5 0b       	sbc	r31, r21

00003faa <__udivmodsi4_ep>:
    3faa:	66 1f       	adc	r22, r22
    3fac:	77 1f       	adc	r23, r23
    3fae:	88 1f       	adc	r24, r24
    3fb0:	99 1f       	adc	r25, r25
    3fb2:	1a 94       	dec	r1
    3fb4:	69 f7       	brne	.-38     	; 0x3f90 <__udivmodsi4_loop>
    3fb6:	60 95       	com	r22
    3fb8:	70 95       	com	r23
    3fba:	80 95       	com	r24
    3fbc:	90 95       	com	r25
    3fbe:	9b 01       	movw	r18, r22
    3fc0:	ac 01       	movw	r20, r24
    3fc2:	bd 01       	movw	r22, r26
    3fc4:	cf 01       	movw	r24, r30
    3fc6:	08 95       	ret

00003fc8 <__prologue_saves__>:
    3fc8:	2f 92       	push	r2
    3fca:	3f 92       	push	r3
    3fcc:	4f 92       	push	r4
    3fce:	5f 92       	push	r5
    3fd0:	6f 92       	push	r6
    3fd2:	7f 92       	push	r7
    3fd4:	8f 92       	push	r8
    3fd6:	9f 92       	push	r9
    3fd8:	af 92       	push	r10
    3fda:	bf 92       	push	r11
    3fdc:	cf 92       	push	r12
    3fde:	df 92       	push	r13
    3fe0:	ef 92       	push	r14
    3fe2:	ff 92       	push	r15
    3fe4:	0f 93       	push	r16
    3fe6:	1f 93       	push	r17
    3fe8:	cf 93       	push	r28
    3fea:	df 93       	push	r29
    3fec:	cd b7       	in	r28, 0x3d	; 61
    3fee:	de b7       	in	r29, 0x3e	; 62
    3ff0:	ca 1b       	sub	r28, r26
    3ff2:	db 0b       	sbc	r29, r27
    3ff4:	0f b6       	in	r0, 0x3f	; 63
    3ff6:	f8 94       	cli
    3ff8:	de bf       	out	0x3e, r29	; 62
    3ffa:	0f be       	out	0x3f, r0	; 63
    3ffc:	cd bf       	out	0x3d, r28	; 61
    3ffe:	09 94       	ijmp

00004000 <__epilogue_restores__>:
    4000:	2a 88       	ldd	r2, Y+18	; 0x12
    4002:	39 88       	ldd	r3, Y+17	; 0x11
    4004:	48 88       	ldd	r4, Y+16	; 0x10
    4006:	5f 84       	ldd	r5, Y+15	; 0x0f
    4008:	6e 84       	ldd	r6, Y+14	; 0x0e
    400a:	7d 84       	ldd	r7, Y+13	; 0x0d
    400c:	8c 84       	ldd	r8, Y+12	; 0x0c
    400e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4010:	aa 84       	ldd	r10, Y+10	; 0x0a
    4012:	b9 84       	ldd	r11, Y+9	; 0x09
    4014:	c8 84       	ldd	r12, Y+8	; 0x08
    4016:	df 80       	ldd	r13, Y+7	; 0x07
    4018:	ee 80       	ldd	r14, Y+6	; 0x06
    401a:	fd 80       	ldd	r15, Y+5	; 0x05
    401c:	0c 81       	ldd	r16, Y+4	; 0x04
    401e:	1b 81       	ldd	r17, Y+3	; 0x03
    4020:	aa 81       	ldd	r26, Y+2	; 0x02
    4022:	b9 81       	ldd	r27, Y+1	; 0x01
    4024:	ce 0f       	add	r28, r30
    4026:	d1 1d       	adc	r29, r1
    4028:	0f b6       	in	r0, 0x3f	; 63
    402a:	f8 94       	cli
    402c:	de bf       	out	0x3e, r29	; 62
    402e:	0f be       	out	0x3f, r0	; 63
    4030:	cd bf       	out	0x3d, r28	; 61
    4032:	ed 01       	movw	r28, r26
    4034:	08 95       	ret

00004036 <__udivmodhi4>:
    4036:	aa 1b       	sub	r26, r26
    4038:	bb 1b       	sub	r27, r27
    403a:	51 e1       	ldi	r21, 0x11	; 17
    403c:	07 c0       	rjmp	.+14     	; 0x404c <__udivmodhi4_ep>

0000403e <__udivmodhi4_loop>:
    403e:	aa 1f       	adc	r26, r26
    4040:	bb 1f       	adc	r27, r27
    4042:	a6 17       	cp	r26, r22
    4044:	b7 07       	cpc	r27, r23
    4046:	10 f0       	brcs	.+4      	; 0x404c <__udivmodhi4_ep>
    4048:	a6 1b       	sub	r26, r22
    404a:	b7 0b       	sbc	r27, r23

0000404c <__udivmodhi4_ep>:
    404c:	88 1f       	adc	r24, r24
    404e:	99 1f       	adc	r25, r25
    4050:	5a 95       	dec	r21
    4052:	a9 f7       	brne	.-22     	; 0x403e <__udivmodhi4_loop>
    4054:	80 95       	com	r24
    4056:	90 95       	com	r25
    4058:	bc 01       	movw	r22, r24
    405a:	cd 01       	movw	r24, r26
    405c:	08 95       	ret

0000405e <malloc>:
    405e:	cf 93       	push	r28
    4060:	df 93       	push	r29
    4062:	bc 01       	movw	r22, r24
    4064:	82 30       	cpi	r24, 0x02	; 2
    4066:	91 05       	cpc	r25, r1
    4068:	10 f4       	brcc	.+4      	; 0x406e <malloc+0x10>
    406a:	62 e0       	ldi	r22, 0x02	; 2
    406c:	70 e0       	ldi	r23, 0x00	; 0
    406e:	a0 91 32 04 	lds	r26, 0x0432
    4072:	b0 91 33 04 	lds	r27, 0x0433
    4076:	ed 01       	movw	r28, r26
    4078:	e0 e0       	ldi	r30, 0x00	; 0
    407a:	f0 e0       	ldi	r31, 0x00	; 0
    407c:	40 e0       	ldi	r20, 0x00	; 0
    407e:	50 e0       	ldi	r21, 0x00	; 0
    4080:	21 c0       	rjmp	.+66     	; 0x40c4 <malloc+0x66>
    4082:	88 81       	ld	r24, Y
    4084:	99 81       	ldd	r25, Y+1	; 0x01
    4086:	86 17       	cp	r24, r22
    4088:	97 07       	cpc	r25, r23
    408a:	69 f4       	brne	.+26     	; 0x40a6 <malloc+0x48>
    408c:	8a 81       	ldd	r24, Y+2	; 0x02
    408e:	9b 81       	ldd	r25, Y+3	; 0x03
    4090:	30 97       	sbiw	r30, 0x00	; 0
    4092:	19 f0       	breq	.+6      	; 0x409a <malloc+0x3c>
    4094:	93 83       	std	Z+3, r25	; 0x03
    4096:	82 83       	std	Z+2, r24	; 0x02
    4098:	04 c0       	rjmp	.+8      	; 0x40a2 <malloc+0x44>
    409a:	90 93 33 04 	sts	0x0433, r25
    409e:	80 93 32 04 	sts	0x0432, r24
    40a2:	fe 01       	movw	r30, r28
    40a4:	34 c0       	rjmp	.+104    	; 0x410e <__stack+0xf>
    40a6:	68 17       	cp	r22, r24
    40a8:	79 07       	cpc	r23, r25
    40aa:	38 f4       	brcc	.+14     	; 0x40ba <malloc+0x5c>
    40ac:	41 15       	cp	r20, r1
    40ae:	51 05       	cpc	r21, r1
    40b0:	19 f0       	breq	.+6      	; 0x40b8 <malloc+0x5a>
    40b2:	84 17       	cp	r24, r20
    40b4:	95 07       	cpc	r25, r21
    40b6:	08 f4       	brcc	.+2      	; 0x40ba <malloc+0x5c>
    40b8:	ac 01       	movw	r20, r24
    40ba:	fe 01       	movw	r30, r28
    40bc:	8a 81       	ldd	r24, Y+2	; 0x02
    40be:	9b 81       	ldd	r25, Y+3	; 0x03
    40c0:	9c 01       	movw	r18, r24
    40c2:	e9 01       	movw	r28, r18
    40c4:	20 97       	sbiw	r28, 0x00	; 0
    40c6:	e9 f6       	brne	.-70     	; 0x4082 <malloc+0x24>
    40c8:	41 15       	cp	r20, r1
    40ca:	51 05       	cpc	r21, r1
    40cc:	a9 f1       	breq	.+106    	; 0x4138 <__stack+0x39>
    40ce:	ca 01       	movw	r24, r20
    40d0:	86 1b       	sub	r24, r22
    40d2:	97 0b       	sbc	r25, r23
    40d4:	04 97       	sbiw	r24, 0x04	; 4
    40d6:	08 f4       	brcc	.+2      	; 0x40da <malloc+0x7c>
    40d8:	ba 01       	movw	r22, r20
    40da:	e0 e0       	ldi	r30, 0x00	; 0
    40dc:	f0 e0       	ldi	r31, 0x00	; 0
    40de:	2a c0       	rjmp	.+84     	; 0x4134 <__stack+0x35>
    40e0:	8d 91       	ld	r24, X+
    40e2:	9c 91       	ld	r25, X
    40e4:	11 97       	sbiw	r26, 0x01	; 1
    40e6:	84 17       	cp	r24, r20
    40e8:	95 07       	cpc	r25, r21
    40ea:	f9 f4       	brne	.+62     	; 0x412a <__stack+0x2b>
    40ec:	64 17       	cp	r22, r20
    40ee:	75 07       	cpc	r23, r21
    40f0:	81 f4       	brne	.+32     	; 0x4112 <__stack+0x13>
    40f2:	12 96       	adiw	r26, 0x02	; 2
    40f4:	8d 91       	ld	r24, X+
    40f6:	9c 91       	ld	r25, X
    40f8:	13 97       	sbiw	r26, 0x03	; 3
    40fa:	30 97       	sbiw	r30, 0x00	; 0
    40fc:	19 f0       	breq	.+6      	; 0x4104 <__stack+0x5>
    40fe:	93 83       	std	Z+3, r25	; 0x03
    4100:	82 83       	std	Z+2, r24	; 0x02
    4102:	04 c0       	rjmp	.+8      	; 0x410c <__stack+0xd>
    4104:	90 93 33 04 	sts	0x0433, r25
    4108:	80 93 32 04 	sts	0x0432, r24
    410c:	fd 01       	movw	r30, r26
    410e:	32 96       	adiw	r30, 0x02	; 2
    4110:	4f c0       	rjmp	.+158    	; 0x41b0 <__stack+0xb1>
    4112:	ca 01       	movw	r24, r20
    4114:	86 1b       	sub	r24, r22
    4116:	97 0b       	sbc	r25, r23
    4118:	fd 01       	movw	r30, r26
    411a:	e8 0f       	add	r30, r24
    411c:	f9 1f       	adc	r31, r25
    411e:	61 93       	st	Z+, r22
    4120:	71 93       	st	Z+, r23
    4122:	02 97       	sbiw	r24, 0x02	; 2
    4124:	8d 93       	st	X+, r24
    4126:	9c 93       	st	X, r25
    4128:	43 c0       	rjmp	.+134    	; 0x41b0 <__stack+0xb1>
    412a:	fd 01       	movw	r30, r26
    412c:	82 81       	ldd	r24, Z+2	; 0x02
    412e:	93 81       	ldd	r25, Z+3	; 0x03
    4130:	9c 01       	movw	r18, r24
    4132:	d9 01       	movw	r26, r18
    4134:	10 97       	sbiw	r26, 0x00	; 0
    4136:	a1 f6       	brne	.-88     	; 0x40e0 <malloc+0x82>
    4138:	80 91 30 04 	lds	r24, 0x0430
    413c:	90 91 31 04 	lds	r25, 0x0431
    4140:	89 2b       	or	r24, r25
    4142:	41 f4       	brne	.+16     	; 0x4154 <__stack+0x55>
    4144:	80 91 ee 03 	lds	r24, 0x03EE
    4148:	90 91 ef 03 	lds	r25, 0x03EF
    414c:	90 93 31 04 	sts	0x0431, r25
    4150:	80 93 30 04 	sts	0x0430, r24
    4154:	40 91 f0 03 	lds	r20, 0x03F0
    4158:	50 91 f1 03 	lds	r21, 0x03F1
    415c:	41 15       	cp	r20, r1
    415e:	51 05       	cpc	r21, r1
    4160:	41 f4       	brne	.+16     	; 0x4172 <__stack+0x73>
    4162:	4d b7       	in	r20, 0x3d	; 61
    4164:	5e b7       	in	r21, 0x3e	; 62
    4166:	80 91 ec 03 	lds	r24, 0x03EC
    416a:	90 91 ed 03 	lds	r25, 0x03ED
    416e:	48 1b       	sub	r20, r24
    4170:	59 0b       	sbc	r21, r25
    4172:	20 91 30 04 	lds	r18, 0x0430
    4176:	30 91 31 04 	lds	r19, 0x0431
    417a:	24 17       	cp	r18, r20
    417c:	35 07       	cpc	r19, r21
    417e:	b0 f4       	brcc	.+44     	; 0x41ac <__stack+0xad>
    4180:	ca 01       	movw	r24, r20
    4182:	82 1b       	sub	r24, r18
    4184:	93 0b       	sbc	r25, r19
    4186:	86 17       	cp	r24, r22
    4188:	97 07       	cpc	r25, r23
    418a:	80 f0       	brcs	.+32     	; 0x41ac <__stack+0xad>
    418c:	ab 01       	movw	r20, r22
    418e:	4e 5f       	subi	r20, 0xFE	; 254
    4190:	5f 4f       	sbci	r21, 0xFF	; 255
    4192:	84 17       	cp	r24, r20
    4194:	95 07       	cpc	r25, r21
    4196:	50 f0       	brcs	.+20     	; 0x41ac <__stack+0xad>
    4198:	42 0f       	add	r20, r18
    419a:	53 1f       	adc	r21, r19
    419c:	50 93 31 04 	sts	0x0431, r21
    41a0:	40 93 30 04 	sts	0x0430, r20
    41a4:	f9 01       	movw	r30, r18
    41a6:	61 93       	st	Z+, r22
    41a8:	71 93       	st	Z+, r23
    41aa:	02 c0       	rjmp	.+4      	; 0x41b0 <__stack+0xb1>
    41ac:	e0 e0       	ldi	r30, 0x00	; 0
    41ae:	f0 e0       	ldi	r31, 0x00	; 0
    41b0:	cf 01       	movw	r24, r30
    41b2:	df 91       	pop	r29
    41b4:	cf 91       	pop	r28
    41b6:	08 95       	ret

000041b8 <free>:
    41b8:	cf 93       	push	r28
    41ba:	df 93       	push	r29
    41bc:	00 97       	sbiw	r24, 0x00	; 0
    41be:	09 f4       	brne	.+2      	; 0x41c2 <free+0xa>
    41c0:	50 c0       	rjmp	.+160    	; 0x4262 <free+0xaa>
    41c2:	ec 01       	movw	r28, r24
    41c4:	22 97       	sbiw	r28, 0x02	; 2
    41c6:	1b 82       	std	Y+3, r1	; 0x03
    41c8:	1a 82       	std	Y+2, r1	; 0x02
    41ca:	a0 91 32 04 	lds	r26, 0x0432
    41ce:	b0 91 33 04 	lds	r27, 0x0433
    41d2:	10 97       	sbiw	r26, 0x00	; 0
    41d4:	09 f1       	breq	.+66     	; 0x4218 <free+0x60>
    41d6:	40 e0       	ldi	r20, 0x00	; 0
    41d8:	50 e0       	ldi	r21, 0x00	; 0
    41da:	ac 17       	cp	r26, r28
    41dc:	bd 07       	cpc	r27, r29
    41de:	08 f1       	brcs	.+66     	; 0x4222 <free+0x6a>
    41e0:	bb 83       	std	Y+3, r27	; 0x03
    41e2:	aa 83       	std	Y+2, r26	; 0x02
    41e4:	fe 01       	movw	r30, r28
    41e6:	21 91       	ld	r18, Z+
    41e8:	31 91       	ld	r19, Z+
    41ea:	e2 0f       	add	r30, r18
    41ec:	f3 1f       	adc	r31, r19
    41ee:	ae 17       	cp	r26, r30
    41f0:	bf 07       	cpc	r27, r31
    41f2:	79 f4       	brne	.+30     	; 0x4212 <free+0x5a>
    41f4:	8d 91       	ld	r24, X+
    41f6:	9c 91       	ld	r25, X
    41f8:	11 97       	sbiw	r26, 0x01	; 1
    41fa:	28 0f       	add	r18, r24
    41fc:	39 1f       	adc	r19, r25
    41fe:	2e 5f       	subi	r18, 0xFE	; 254
    4200:	3f 4f       	sbci	r19, 0xFF	; 255
    4202:	39 83       	std	Y+1, r19	; 0x01
    4204:	28 83       	st	Y, r18
    4206:	12 96       	adiw	r26, 0x02	; 2
    4208:	8d 91       	ld	r24, X+
    420a:	9c 91       	ld	r25, X
    420c:	13 97       	sbiw	r26, 0x03	; 3
    420e:	9b 83       	std	Y+3, r25	; 0x03
    4210:	8a 83       	std	Y+2, r24	; 0x02
    4212:	41 15       	cp	r20, r1
    4214:	51 05       	cpc	r21, r1
    4216:	71 f4       	brne	.+28     	; 0x4234 <free+0x7c>
    4218:	d0 93 33 04 	sts	0x0433, r29
    421c:	c0 93 32 04 	sts	0x0432, r28
    4220:	20 c0       	rjmp	.+64     	; 0x4262 <free+0xaa>
    4222:	12 96       	adiw	r26, 0x02	; 2
    4224:	8d 91       	ld	r24, X+
    4226:	9c 91       	ld	r25, X
    4228:	13 97       	sbiw	r26, 0x03	; 3
    422a:	ad 01       	movw	r20, r26
    422c:	00 97       	sbiw	r24, 0x00	; 0
    422e:	11 f0       	breq	.+4      	; 0x4234 <free+0x7c>
    4230:	dc 01       	movw	r26, r24
    4232:	d3 cf       	rjmp	.-90     	; 0x41da <free+0x22>
    4234:	fa 01       	movw	r30, r20
    4236:	d3 83       	std	Z+3, r29	; 0x03
    4238:	c2 83       	std	Z+2, r28	; 0x02
    423a:	21 91       	ld	r18, Z+
    423c:	31 91       	ld	r19, Z+
    423e:	e2 0f       	add	r30, r18
    4240:	f3 1f       	adc	r31, r19
    4242:	ce 17       	cp	r28, r30
    4244:	df 07       	cpc	r29, r31
    4246:	69 f4       	brne	.+26     	; 0x4262 <free+0xaa>
    4248:	88 81       	ld	r24, Y
    424a:	99 81       	ldd	r25, Y+1	; 0x01
    424c:	28 0f       	add	r18, r24
    424e:	39 1f       	adc	r19, r25
    4250:	2e 5f       	subi	r18, 0xFE	; 254
    4252:	3f 4f       	sbci	r19, 0xFF	; 255
    4254:	fa 01       	movw	r30, r20
    4256:	31 83       	std	Z+1, r19	; 0x01
    4258:	20 83       	st	Z, r18
    425a:	8a 81       	ldd	r24, Y+2	; 0x02
    425c:	9b 81       	ldd	r25, Y+3	; 0x03
    425e:	93 83       	std	Z+3, r25	; 0x03
    4260:	82 83       	std	Z+2, r24	; 0x02
    4262:	df 91       	pop	r29
    4264:	cf 91       	pop	r28
    4266:	08 95       	ret

00004268 <itoa>:
    4268:	fb 01       	movw	r30, r22
    426a:	9f 01       	movw	r18, r30
    426c:	e8 94       	clt
    426e:	42 30       	cpi	r20, 0x02	; 2
    4270:	c4 f0       	brlt	.+48     	; 0x42a2 <itoa+0x3a>
    4272:	45 32       	cpi	r20, 0x25	; 37
    4274:	b4 f4       	brge	.+44     	; 0x42a2 <itoa+0x3a>
    4276:	4a 30       	cpi	r20, 0x0A	; 10
    4278:	29 f4       	brne	.+10     	; 0x4284 <itoa+0x1c>
    427a:	97 fb       	bst	r25, 7
    427c:	1e f4       	brtc	.+6      	; 0x4284 <itoa+0x1c>
    427e:	90 95       	com	r25
    4280:	81 95       	neg	r24
    4282:	9f 4f       	sbci	r25, 0xFF	; 255
    4284:	64 2f       	mov	r22, r20
    4286:	77 27       	eor	r23, r23
    4288:	0e 94 1b 20 	call	0x4036	; 0x4036 <__udivmodhi4>
    428c:	80 5d       	subi	r24, 0xD0	; 208
    428e:	8a 33       	cpi	r24, 0x3A	; 58
    4290:	0c f0       	brlt	.+2      	; 0x4294 <itoa+0x2c>
    4292:	89 5d       	subi	r24, 0xD9	; 217
    4294:	81 93       	st	Z+, r24
    4296:	cb 01       	movw	r24, r22
    4298:	00 97       	sbiw	r24, 0x00	; 0
    429a:	a1 f7       	brne	.-24     	; 0x4284 <itoa+0x1c>
    429c:	16 f4       	brtc	.+4      	; 0x42a2 <itoa+0x3a>
    429e:	5d e2       	ldi	r21, 0x2D	; 45
    42a0:	51 93       	st	Z+, r21
    42a2:	10 82       	st	Z, r1
    42a4:	c9 01       	movw	r24, r18
    42a6:	0c 94 c4 21 	jmp	0x4388	; 0x4388 <strrev>

000042aa <fdevopen>:
    42aa:	0f 93       	push	r16
    42ac:	1f 93       	push	r17
    42ae:	cf 93       	push	r28
    42b0:	df 93       	push	r29
    42b2:	8c 01       	movw	r16, r24
    42b4:	eb 01       	movw	r28, r22
    42b6:	00 97       	sbiw	r24, 0x00	; 0
    42b8:	31 f4       	brne	.+12     	; 0x42c6 <fdevopen+0x1c>
    42ba:	61 15       	cp	r22, r1
    42bc:	71 05       	cpc	r23, r1
    42be:	19 f4       	brne	.+6      	; 0x42c6 <fdevopen+0x1c>
    42c0:	20 e0       	ldi	r18, 0x00	; 0
    42c2:	30 e0       	ldi	r19, 0x00	; 0
    42c4:	38 c0       	rjmp	.+112    	; 0x4336 <fdevopen+0x8c>
    42c6:	81 e0       	ldi	r24, 0x01	; 1
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	6e e0       	ldi	r22, 0x0E	; 14
    42cc:	70 e0       	ldi	r23, 0x00	; 0
    42ce:	0e 94 a1 21 	call	0x4342	; 0x4342 <calloc>
    42d2:	fc 01       	movw	r30, r24
    42d4:	9c 01       	movw	r18, r24
    42d6:	00 97       	sbiw	r24, 0x00	; 0
    42d8:	71 f1       	breq	.+92     	; 0x4336 <fdevopen+0x8c>
    42da:	80 e8       	ldi	r24, 0x80	; 128
    42dc:	83 83       	std	Z+3, r24	; 0x03
    42de:	20 97       	sbiw	r28, 0x00	; 0
    42e0:	71 f0       	breq	.+28     	; 0x42fe <fdevopen+0x54>
    42e2:	d3 87       	std	Z+11, r29	; 0x0b
    42e4:	c2 87       	std	Z+10, r28	; 0x0a
    42e6:	81 e8       	ldi	r24, 0x81	; 129
    42e8:	83 83       	std	Z+3, r24	; 0x03
    42ea:	80 91 34 04 	lds	r24, 0x0434
    42ee:	90 91 35 04 	lds	r25, 0x0435
    42f2:	89 2b       	or	r24, r25
    42f4:	21 f4       	brne	.+8      	; 0x42fe <fdevopen+0x54>
    42f6:	f0 93 35 04 	sts	0x0435, r31
    42fa:	e0 93 34 04 	sts	0x0434, r30
    42fe:	01 15       	cp	r16, r1
    4300:	11 05       	cpc	r17, r1
    4302:	c9 f0       	breq	.+50     	; 0x4336 <fdevopen+0x8c>
    4304:	11 87       	std	Z+9, r17	; 0x09
    4306:	00 87       	std	Z+8, r16	; 0x08
    4308:	83 81       	ldd	r24, Z+3	; 0x03
    430a:	82 60       	ori	r24, 0x02	; 2
    430c:	83 83       	std	Z+3, r24	; 0x03
    430e:	80 91 36 04 	lds	r24, 0x0436
    4312:	90 91 37 04 	lds	r25, 0x0437
    4316:	89 2b       	or	r24, r25
    4318:	71 f4       	brne	.+28     	; 0x4336 <fdevopen+0x8c>
    431a:	f0 93 37 04 	sts	0x0437, r31
    431e:	e0 93 36 04 	sts	0x0436, r30
    4322:	80 91 38 04 	lds	r24, 0x0438
    4326:	90 91 39 04 	lds	r25, 0x0439
    432a:	89 2b       	or	r24, r25
    432c:	21 f4       	brne	.+8      	; 0x4336 <fdevopen+0x8c>
    432e:	f0 93 39 04 	sts	0x0439, r31
    4332:	e0 93 38 04 	sts	0x0438, r30
    4336:	c9 01       	movw	r24, r18
    4338:	df 91       	pop	r29
    433a:	cf 91       	pop	r28
    433c:	1f 91       	pop	r17
    433e:	0f 91       	pop	r16
    4340:	08 95       	ret

00004342 <calloc>:
    4342:	0f 93       	push	r16
    4344:	1f 93       	push	r17
    4346:	cf 93       	push	r28
    4348:	df 93       	push	r29
    434a:	68 9f       	mul	r22, r24
    434c:	80 01       	movw	r16, r0
    434e:	69 9f       	mul	r22, r25
    4350:	10 0d       	add	r17, r0
    4352:	78 9f       	mul	r23, r24
    4354:	10 0d       	add	r17, r0
    4356:	11 24       	eor	r1, r1
    4358:	c8 01       	movw	r24, r16
    435a:	0e 94 2f 20 	call	0x405e	; 0x405e <malloc>
    435e:	ec 01       	movw	r28, r24
    4360:	00 97       	sbiw	r24, 0x00	; 0
    4362:	29 f0       	breq	.+10     	; 0x436e <calloc+0x2c>
    4364:	60 e0       	ldi	r22, 0x00	; 0
    4366:	70 e0       	ldi	r23, 0x00	; 0
    4368:	a8 01       	movw	r20, r16
    436a:	0e 94 bd 21 	call	0x437a	; 0x437a <memset>
    436e:	ce 01       	movw	r24, r28
    4370:	df 91       	pop	r29
    4372:	cf 91       	pop	r28
    4374:	1f 91       	pop	r17
    4376:	0f 91       	pop	r16
    4378:	08 95       	ret

0000437a <memset>:
    437a:	dc 01       	movw	r26, r24
    437c:	01 c0       	rjmp	.+2      	; 0x4380 <memset+0x6>
    437e:	6d 93       	st	X+, r22
    4380:	41 50       	subi	r20, 0x01	; 1
    4382:	50 40       	sbci	r21, 0x00	; 0
    4384:	e0 f7       	brcc	.-8      	; 0x437e <memset+0x4>
    4386:	08 95       	ret

00004388 <strrev>:
    4388:	dc 01       	movw	r26, r24
    438a:	fc 01       	movw	r30, r24
    438c:	67 2f       	mov	r22, r23
    438e:	71 91       	ld	r23, Z+
    4390:	77 23       	and	r23, r23
    4392:	e1 f7       	brne	.-8      	; 0x438c <strrev+0x4>
    4394:	32 97       	sbiw	r30, 0x02	; 2
    4396:	04 c0       	rjmp	.+8      	; 0x43a0 <strrev+0x18>
    4398:	7c 91       	ld	r23, X
    439a:	6d 93       	st	X+, r22
    439c:	70 83       	st	Z, r23
    439e:	62 91       	ld	r22, -Z
    43a0:	ae 17       	cp	r26, r30
    43a2:	bf 07       	cpc	r27, r31
    43a4:	c8 f3       	brcs	.-14     	; 0x4398 <strrev+0x10>
    43a6:	08 95       	ret

000043a8 <_exit>:
    43a8:	f8 94       	cli

000043aa <__stop_program>:
    43aa:	ff cf       	rjmp	.-2      	; 0x43aa <__stop_program>
