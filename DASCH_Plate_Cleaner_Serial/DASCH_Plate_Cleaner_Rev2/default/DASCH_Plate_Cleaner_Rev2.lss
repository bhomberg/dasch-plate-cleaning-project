
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000007b0  00800100  000047b0  00004844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000047b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  008008b0  008008b0  00004ff4  2**0
                  ALLOC
  3 .stab         00005274  00000000  00000000  00004ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000544b  00000000  00000000  0000a268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000f6b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003fc  00000000  00000000  0000f6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000013f2  00000000  00000000  0000faef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000338  00000000  00000000  00010ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001da4  00000000  00000000  00011219  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000190  00000000  00000000  00012fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b83  00000000  00000000  00013150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000145e  00000000  00000000  00013cd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
       4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <__vector_11>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      50:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <__vector_20>
      54:	0c 94 f4 1c 	jmp	0x39e8	; 0x39e8 <__vector_21>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      70:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <__vector_28>
      74:	0c 94 1d 1d 	jmp	0x3a3a	; 0x3a3a <__vector_29>
      78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      80:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      8c:	1e 0c       	add	r1, r14
      8e:	37 0c       	add	r3, r7
      90:	52 0c       	add	r5, r2
      92:	6f 0c       	add	r6, r15
      94:	8e 0c       	add	r8, r14
      96:	aa 0c       	add	r10, r10
      98:	c8 0c       	add	r12, r8
      9a:	e9 0c       	add	r14, r9
      9c:	0b 0d       	add	r16, r11
      9e:	15 0d       	add	r17, r5
      a0:	19 0d       	add	r17, r9
      a2:	25 0d       	add	r18, r5
      a4:	29 0d       	add	r18, r9
      a6:	33 0d       	add	r19, r3
      a8:	37 0d       	add	r19, r7
      aa:	42 0d       	add	r20, r2
      ac:	46 0d       	add	r20, r6
      ae:	51 0d       	add	r21, r1
      b0:	55 0d       	add	r21, r5
      b2:	60 0d       	add	r22, r0
      b4:	64 0d       	add	r22, r4
      b6:	6f 0d       	add	r22, r15
      b8:	73 0d       	add	r23, r3
      ba:	82 0d       	add	r24, r2
      bc:	88 0d       	add	r24, r8
      be:	97 0d       	add	r25, r7
      c0:	9b 0d       	add	r25, r11
      c2:	a6 0d       	add	r26, r6
      c4:	aa 0d       	add	r26, r10
      c6:	b5 0d       	add	r27, r5
      c8:	b9 0d       	add	r27, r9
      ca:	c3 0d       	add	r28, r3
      cc:	c7 0d       	add	r28, r7
      ce:	d1 0d       	add	r29, r1
      d0:	d5 0d       	add	r29, r5
      d2:	e1 0d       	add	r30, r1
      d4:	e7 0d       	add	r30, r7
      d6:	f7 0d       	add	r31, r7
      d8:	01 0e       	add	r0, r17
      da:	17 0e       	add	r1, r23
      dc:	21 0e       	add	r2, r17
      de:	37 0e       	add	r3, r23
      e0:	41 0e       	add	r4, r17
      e2:	57 0e       	add	r5, r23
      e4:	61 0e       	add	r6, r17
      e6:	77 0e       	add	r7, r23
      e8:	81 0e       	add	r8, r17
      ea:	8e 0e       	add	r8, r30

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	d0 e4       	ldi	r29, 0x40	; 64
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_copy_data>:
      f8:	18 e0       	ldi	r17, 0x08	; 8
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	e0 eb       	ldi	r30, 0xB0	; 176
     100:	f7 e4       	ldi	r31, 0x47	; 71
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0b bf       	out	0x3b, r16	; 59
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
     108:	07 90       	elpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	a0 3b       	cpi	r26, 0xB0	; 176
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
     112:	18 e0       	ldi	r17, 0x08	; 8
     114:	a0 eb       	ldi	r26, 0xB0	; 176
     116:	b8 e0       	ldi	r27, 0x08	; 8
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	a9 3f       	cpi	r26, 0xF9	; 249
     11e:	b1 07       	cpc	r27, r17
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
     122:	0e 94 a5 08 	call	0x114a	; 0x114a <main>
     126:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     12e:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     132:	8c e0       	ldi	r24, 0x0C	; 12
     134:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
     138:	08 95       	ret

0000013a <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
     13a:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     13c:	84 ea       	ldi	r24, 0xA4	; 164
     13e:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     142:	80 91 bc 00 	lds	r24, 0x00BC
     146:	87 ff       	sbrs	r24, 7
     148:	fc cf       	rjmp	.-8      	; 0x142 <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     14a:	80 91 b9 00 	lds	r24, 0x00B9
     14e:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     150:	88 30       	cpi	r24, 0x08	; 8
     152:	21 f0       	breq	.+8      	; 0x15c <i2c_start+0x22>
     154:	80 31       	cpi	r24, 0x10	; 16
     156:	11 f0       	breq	.+4      	; 0x15c <i2c_start+0x22>
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	08 95       	ret

	// send device address
	TWDR = address;
     15c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     160:	84 e8       	ldi	r24, 0x84	; 132
     162:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     166:	80 91 bc 00 	lds	r24, 0x00BC
     16a:	87 ff       	sbrs	r24, 7
     16c:	fc cf       	rjmp	.-8      	; 0x166 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     16e:	90 91 b9 00 	lds	r25, 0x00B9
     172:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     174:	98 31       	cpi	r25, 0x18	; 24
     176:	11 f4       	brne	.+4      	; 0x17c <i2c_start+0x42>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	08 95       	ret
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 34       	cpi	r25, 0x40	; 64
     180:	09 f0       	breq	.+2      	; 0x184 <i2c_start+0x4a>
     182:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
     184:	08 95       	ret

00000186 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     186:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     188:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     18a:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     18c:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     18e:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     192:	80 91 bc 00 	lds	r24, 0x00BC
     196:	87 ff       	sbrs	r24, 7
     198:	fc cf       	rjmp	.-8      	; 0x192 <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     19a:	80 91 b9 00 	lds	r24, 0x00B9
     19e:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     1a0:	88 30       	cpi	r24, 0x08	; 8
     1a2:	11 f0       	breq	.+4      	; 0x1a8 <i2c_start_wait+0x22>
     1a4:	80 31       	cpi	r24, 0x10	; 16
     1a6:	99 f7       	brne	.-26     	; 0x18e <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
     1a8:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
     1ac:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     1b0:	80 91 bc 00 	lds	r24, 0x00BC
     1b4:	87 ff       	sbrs	r24, 7
     1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     1b8:	80 91 b9 00 	lds	r24, 0x00B9
     1bc:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     1be:	80 32       	cpi	r24, 0x20	; 32
     1c0:	11 f0       	breq	.+4      	; 0x1c6 <i2c_start_wait+0x40>
     1c2:	88 35       	cpi	r24, 0x58	; 88
     1c4:	39 f4       	brne	.+14     	; 0x1d4 <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1c6:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     1ca:	80 91 bc 00 	lds	r24, 0x00BC
     1ce:	84 fd       	sbrc	r24, 4
     1d0:	fc cf       	rjmp	.-8      	; 0x1ca <i2c_start_wait+0x44>
     1d2:	dd cf       	rjmp	.-70     	; 0x18e <i2c_start_wait+0x8>
     1d4:	08 95       	ret

000001d6 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     1d6:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>

}/* i2c_rep_start */
     1da:	08 95       	ret

000001dc <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1dc:	84 e9       	ldi	r24, 0x94	; 148
     1de:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     1e2:	80 91 bc 00 	lds	r24, 0x00BC
     1e6:	84 fd       	sbrc	r24, 4
     1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <i2c_stop+0x6>

}/* i2c_stop */
     1ea:	08 95       	ret

000001ec <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     1ec:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     1f0:	84 e8       	ldi	r24, 0x84	; 132
     1f2:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     1f6:	80 91 bc 00 	lds	r24, 0x00BC
     1fa:	87 ff       	sbrs	r24, 7
     1fc:	fc cf       	rjmp	.-8      	; 0x1f6 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     1fe:	80 91 b9 00 	lds	r24, 0x00B9
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	88 7f       	andi	r24, 0xF8	; 248
     206:	88 32       	cpi	r24, 0x28	; 40
     208:	09 f0       	breq	.+2      	; 0x20c <i2c_write+0x20>
     20a:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     20c:	89 2f       	mov	r24, r25
     20e:	08 95       	ret

00000210 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     210:	84 ec       	ldi	r24, 0xC4	; 196
     212:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     216:	80 91 bc 00 	lds	r24, 0x00BC
     21a:	87 ff       	sbrs	r24, 7
     21c:	fc cf       	rjmp	.-8      	; 0x216 <i2c_readAck+0x6>

    return TWDR;
     21e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
     222:	08 95       	ret

00000224 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     224:	84 e8       	ldi	r24, 0x84	; 132
     226:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     22a:	80 91 bc 00 	lds	r24, 0x00BC
     22e:	87 ff       	sbrs	r24, 7
     230:	fc cf       	rjmp	.-8      	; 0x22a <i2c_readNak+0x6>
	
    return TWDR;
     232:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     236:	08 95       	ret

00000238 <is_digital_input_high>:

// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
// the pin.
static inline unsigned char is_digital_input_high(unsigned char pin)
{
     238:	48 2f       	mov	r20, r24
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     23a:	88 30       	cpi	r24, 0x08	; 8
     23c:	58 f4       	brcc	.+22     	; 0x254 <is_digital_input_high+0x1c>
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	02 c0       	rjmp	.+4      	; 0x248 <is_digital_input_high+0x10>
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	4a 95       	dec	r20
     24a:	e2 f7       	brpl	.-8      	; 0x244 <is_digital_input_high+0xc>
     24c:	98 2f       	mov	r25, r24
     24e:	e9 e2       	ldi	r30, 0x29	; 41
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	36 c0       	rjmp	.+108    	; 0x2c0 <is_digital_input_high+0x88>
	}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     254:	80 31       	cpi	r24, 0x10	; 16
     256:	78 f4       	brcc	.+30     	; 0x276 <is_digital_input_high+0x3e>
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
     258:	28 2f       	mov	r18, r24
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	28 50       	subi	r18, 0x08	; 8
     25e:	30 40       	sbci	r19, 0x00	; 0
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	02 c0       	rjmp	.+4      	; 0x26a <is_digital_input_high+0x32>
     266:	88 0f       	add	r24, r24
     268:	99 1f       	adc	r25, r25
     26a:	2a 95       	dec	r18
     26c:	e2 f7       	brpl	.-8      	; 0x266 <is_digital_input_high+0x2e>
     26e:	98 2f       	mov	r25, r24
     270:	e3 e2       	ldi	r30, 0x23	; 35
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	25 c0       	rjmp	.+74     	; 0x2c0 <is_digital_input_high+0x88>
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     276:	88 31       	cpi	r24, 0x18	; 24
     278:	78 f4       	brcc	.+30     	; 0x298 <is_digital_input_high+0x60>
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
     27a:	28 2f       	mov	r18, r24
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	20 51       	subi	r18, 0x10	; 16
     280:	30 40       	sbci	r19, 0x00	; 0
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	02 c0       	rjmp	.+4      	; 0x28c <is_digital_input_high+0x54>
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	2a 95       	dec	r18
     28e:	e2 f7       	brpl	.-8      	; 0x288 <is_digital_input_high+0x50>
     290:	98 2f       	mov	r25, r24
     292:	e6 e2       	ldi	r30, 0x26	; 38
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	14 c0       	rjmp	.+40     	; 0x2c0 <is_digital_input_high+0x88>
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     298:	80 32       	cpi	r24, 0x20	; 32
     29a:	20 f0       	brcs	.+8      	; 0x2a4 <is_digital_input_high+0x6c>
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	e0 e0       	ldi	r30, 0x00	; 0
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	0e c0       	rjmp	.+28     	; 0x2c0 <is_digital_input_high+0x88>
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
		io->bitmask = 1 << (31 - pin);
     2a4:	2f e1       	ldi	r18, 0x1F	; 31
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	28 1b       	sub	r18, r24
     2aa:	31 09       	sbc	r19, r1
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <is_digital_input_high+0x7e>
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	2a 95       	dec	r18
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <is_digital_input_high+0x7a>
     2ba:	98 2f       	mov	r25, r24
     2bc:	e0 e2       	ldi	r30, 0x20	; 32
     2be:	f0 e0       	ldi	r31, 0x00	; 0

// low-level method for reading the value of the PIN register for an pin or set of pins
// described by an IOStruct pointer.
static inline unsigned char get_digital_input_value(struct IOStruct* ioPin)
{
	return *(ioPin->pinRegister) & ioPin->bitmask;
     2c0:	80 81       	ld	r24, Z
static inline unsigned char is_digital_input_high(unsigned char pin)
{
	struct IOStruct registers;
	get_io_registers(&registers, pin);
	return get_digital_input_value(&registers);
}
     2c2:	89 23       	and	r24, r25
     2c4:	08 95       	ret

000002c6 <brush1_action>:
			break;
		//*********************************************
	}
}

void brush1_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     2c6:	0f 93       	push	r16
     2c8:	1f 93       	push	r17
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	bc 01       	movw	r22, r24
     2d0:	ea 01       	movw	r28, r20
     2d2:	f9 01       	movw	r30, r18
     2d4:	d8 01       	movw	r26, r16
	switch(state){
     2d6:	8c 30       	cpi	r24, 0x0C	; 12
     2d8:	91 05       	cpc	r25, r1
     2da:	09 f4       	brne	.+2      	; 0x2de <brush1_action+0x18>
     2dc:	82 c0       	rjmp	.+260    	; 0x3e2 <brush1_action+0x11c>
     2de:	8d 30       	cpi	r24, 0x0D	; 13
     2e0:	91 05       	cpc	r25, r1
     2e2:	a4 f4       	brge	.+40     	; 0x30c <brush1_action+0x46>
     2e4:	89 30       	cpi	r24, 0x09	; 9
     2e6:	91 05       	cpc	r25, r1
     2e8:	a1 f1       	breq	.+104    	; 0x352 <brush1_action+0x8c>
     2ea:	8a 30       	cpi	r24, 0x0A	; 10
     2ec:	91 05       	cpc	r25, r1
     2ee:	2c f4       	brge	.+10     	; 0x2fa <brush1_action+0x34>
     2f0:	88 30       	cpi	r24, 0x08	; 8
     2f2:	91 05       	cpc	r25, r1
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <brush1_action+0x32>
     2f6:	11 c1       	rjmp	.+546    	; 0x51a <brush1_action+0x254>
     2f8:	22 c0       	rjmp	.+68     	; 0x33e <brush1_action+0x78>
     2fa:	8a 30       	cpi	r24, 0x0A	; 10
     2fc:	91 05       	cpc	r25, r1
     2fe:	09 f4       	brne	.+2      	; 0x302 <brush1_action+0x3c>
     300:	4a c0       	rjmp	.+148    	; 0x396 <brush1_action+0xd0>
     302:	8b 30       	cpi	r24, 0x0B	; 11
     304:	91 05       	cpc	r25, r1
     306:	09 f0       	breq	.+2      	; 0x30a <brush1_action+0x44>
     308:	08 c1       	rjmp	.+528    	; 0x51a <brush1_action+0x254>
     30a:	66 c0       	rjmp	.+204    	; 0x3d8 <brush1_action+0x112>
     30c:	8f 30       	cpi	r24, 0x0F	; 15
     30e:	91 05       	cpc	r25, r1
     310:	09 f4       	brne	.+2      	; 0x314 <brush1_action+0x4e>
     312:	9c c0       	rjmp	.+312    	; 0x44c <brush1_action+0x186>
     314:	80 31       	cpi	r24, 0x10	; 16
     316:	91 05       	cpc	r25, r1
     318:	4c f4       	brge	.+18     	; 0x32c <brush1_action+0x66>
     31a:	8d 30       	cpi	r24, 0x0D	; 13
     31c:	91 05       	cpc	r25, r1
     31e:	09 f4       	brne	.+2      	; 0x322 <brush1_action+0x5c>
     320:	7c c0       	rjmp	.+248    	; 0x41a <brush1_action+0x154>
     322:	8e 30       	cpi	r24, 0x0E	; 14
     324:	91 05       	cpc	r25, r1
     326:	09 f0       	breq	.+2      	; 0x32a <brush1_action+0x64>
     328:	f8 c0       	rjmp	.+496    	; 0x51a <brush1_action+0x254>
     32a:	7f c0       	rjmp	.+254    	; 0x42a <brush1_action+0x164>
     32c:	80 31       	cpi	r24, 0x10	; 16
     32e:	91 05       	cpc	r25, r1
     330:	09 f4       	brne	.+2      	; 0x334 <brush1_action+0x6e>
     332:	b5 c0       	rjmp	.+362    	; 0x49e <brush1_action+0x1d8>
     334:	81 31       	cpi	r24, 0x11	; 17
     336:	91 05       	cpc	r25, r1
     338:	09 f0       	breq	.+2      	; 0x33c <brush1_action+0x76>
     33a:	ef c0       	rjmp	.+478    	; 0x51a <brush1_action+0x254>
     33c:	cd c0       	rjmp	.+410    	; 0x4d8 <brush1_action+0x212>
		case MOVEC1:  //state 8   move to first cleaning stateion
		
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // move fixture to brush1 center   
     33e:	80 91 ee 08 	lds	r24, 0x08EE
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     342:	80 63       	ori	r24, 0x30	; 48
     344:	80 93 ee 08 	sts	0x08EE, r24
			*pfixtureMotor = 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	91 83       	std	Z+1, r25	; 0x01
     34e:	80 83       	st	Z, r24
     350:	e2 c0       	rjmp	.+452    	; 0x516 <brush1_action+0x250>
			*pplateLoadMotor = 0;
			break;
			
		case B1SET1:    //state 9
		
			u_outputByte0.bits_in_outputByte0.brush1Raise = 1;		// turn off raise brush1(if on)
     352:	80 91 ec 08 	lds	r24, 0x08EC
     356:	80 62       	ori	r24, 0x20	; 32
			u_outputByte0.bits_in_outputByte0.brush1Lower = 0;		 //force brush low
     358:	8f 7b       	andi	r24, 0xBF	; 191
     35a:	80 93 ec 08 	sts	0x08EC, r24
			u_outputByte1.bits_in_outputByte1.brush1Pump = 1;		//Pump on to wet brush
     35e:	80 91 ea 08 	lds	r24, 0x08EA
     362:	80 61       	ori	r24, 0x10	; 16
     364:	80 93 ea 08 	sts	0x08EA, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;		 // set brush 1 direction ccw (1)
     368:	80 91 ee 08 	lds	r24, 0x08EE
     36c:	80 68       	ori	r24, 0x80	; 128
     36e:	80 93 ee 08 	sts	0x08EE, r24
			u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1; // set the brush motor current up
     372:	80 91 e9 08 	lds	r24, 0x08E9
     376:	81 60       	ori	r24, 0x01	; 1
     378:	80 93 e9 08 	sts	0x08E9, r24
			delayTimeMicroSeconds = 4000;   //  slow down the brush for wetting 
     37c:	80 ea       	ldi	r24, 0xA0	; 160
     37e:	9f e0       	ldi	r25, 0x0F	; 15
     380:	90 93 15 04 	sts	0x0415, r25
     384:	80 93 14 04 	sts	0x0414, r24
			*pbrush1Motor = 1;				// turn on brush motor
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	8d 93       	st	X+, r24
     38e:	9c 93       	st	X, r25
			*pfixtureMotor = 0;				//stop fixture
     390:	11 82       	std	Z+1, r1	; 0x01
     392:	10 82       	st	Z, r1
     394:	c2 c0       	rjmp	.+388    	; 0x51a <brush1_action+0x254>
			break;
			
		case B1START1: //state 10
		
			u_outputByte1.bits_in_outputByte1.brush1Pump = 0;	 // turn off the pump
     396:	80 91 ea 08 	lds	r24, 0x08EA
     39a:	8f 7e       	andi	r24, 0xEF	; 239
     39c:	80 93 ea 08 	sts	0x08EA, r24
			delayTimeMicroSeconds =250; // speed up brush and fixture
     3a0:	8a ef       	ldi	r24, 0xFA	; 250
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	90 93 15 04 	sts	0x0415, r25
     3a8:	80 93 14 04 	sts	0x0414, r24
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;   //release brush low
     3ac:	80 91 ec 08 	lds	r24, 0x08EC
     3b0:	80 64       	ori	r24, 0x40	; 64
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;    // raise the brush against the glass
     3b2:	8f 7d       	andi	r24, 0xDF	; 223
     3b4:	80 93 ec 08 	sts	0x08EC, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;		 // set brush 1 direction cw (1)
     3b8:	80 91 ee 08 	lds	r24, 0x08EE
     3bc:	80 68       	ori	r24, 0x80	; 128
     3be:	80 93 ee 08 	sts	0x08EE, r24
			highLength2 = 5;
     3c2:	85 e0       	ldi	r24, 0x05	; 5
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	90 93 03 04 	sts	0x0403, r25
     3ca:	80 93 02 04 	sts	0x0402, r24
			totalStepLength2 = 10;
     3ce:	70 93 0d 04 	sts	0x040D, r23
     3d2:	60 93 0c 04 	sts	0x040C, r22
     3d6:	1e c0       	rjmp	.+60     	; 0x414 <brush1_action+0x14e>
			
			*pbrush1Motor = 0;								     // stop the brush motor	
			break;
			
		case CLEAN1_1:    //state 11
			 u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     3d8:	80 91 ee 08 	lds	r24, 0x08EE
     3dc:	80 62       	ori	r24, 0x20	; 32
			 u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // fixture moves backward
     3de:	8f 7e       	andi	r24, 0xEF	; 239
     3e0:	72 c0       	rjmp	.+228    	; 0x4c6 <brush1_action+0x200>
			*pfixtureMotor = 1;			  //start fixture moving

			break;
			
		case B1STOP1:      // state 12
			u_outputByte0.bits_in_outputByte0.brush1Raise =1 ;       //turn off brush raise
     3e2:	80 91 ec 08 	lds	r24, 0x08EC
     3e6:	80 62       	ori	r24, 0x20	; 32
			u_outputByte0.bits_in_outputByte0.brush1Lower = 0;       //drive brush low
     3e8:	8f 7b       	andi	r24, 0xBF	; 191
     3ea:	80 93 ec 08 	sts	0x08EC, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;		 // set brush 1 direction CW (1)
     3ee:	80 91 ee 08 	lds	r24, 0x08EE
     3f2:	80 68       	ori	r24, 0x80	; 128
     3f4:	80 93 ee 08 	sts	0x08EE, r24
			highLength2 = 1;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	90 93 03 04 	sts	0x0403, r25
     400:	80 93 02 04 	sts	0x0402, r24
			totalStepLength2 = 2;
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	90 93 0d 04 	sts	0x040D, r25
     40c:	80 93 0c 04 	sts	0x040C, r24
			*pfixtureMotor = 0;              // stop fixture
     410:	11 82       	std	Z+1, r1	; 0x01
     412:	10 82       	st	Z, r1
			*pbrush1Motor = 0;              // stop	brush motor
     414:	1d 92       	st	X+, r1
     416:	1c 92       	st	X, r1
     418:	80 c0       	rjmp	.+256    	; 0x51a <brush1_action+0x254>
			
			break;
		case CLEAN1_2:    //state 13
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // fixture moves to center of brush1
     41a:	80 91 ee 08 	lds	r24, 0x08EE
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     41e:	80 63       	ori	r24, 0x30	; 48
     420:	80 93 ee 08 	sts	0x08EE, r24
			*pfixtureMotor = 1;
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	54 c0       	rjmp	.+168    	; 0x4d2 <brush1_action+0x20c>
			break;
			
		case B1SET2:    //state 14
			delayTimeMicroSeconds = 4000;   //  slow down the brush for wetting 
     42a:	80 ea       	ldi	r24, 0xA0	; 160
     42c:	9f e0       	ldi	r25, 0x0F	; 15
     42e:	90 93 15 04 	sts	0x0415, r25
     432:	80 93 14 04 	sts	0x0414, r24
			u_outputByte1.bits_in_outputByte1.brush1Pump = 1;	//pump on to wet brush
     436:	80 91 ea 08 	lds	r24, 0x08EA
     43a:	80 61       	ori	r24, 0x10	; 16
     43c:	80 93 ea 08 	sts	0x08EA, r24
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1; 
     440:	80 91 ec 08 	lds	r24, 0x08EC
     444:	80 64       	ori	r24, 0x40	; 64
     446:	80 93 ec 08 	sts	0x08EC, r24
     44a:	22 c0       	rjmp	.+68     	; 0x490 <brush1_action+0x1ca>
			*pfixtureMotor = 0;
			*pbrush1Motor = 1;
		
			break;
		case B1START2:   //state 15
			delayTimeMicroSeconds = 250; // speed up the brush
     44c:	8a ef       	ldi	r24, 0xFA	; 250
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	90 93 15 04 	sts	0x0415, r25
     454:	80 93 14 04 	sts	0x0414, r24
			highLength2 = 5;
     458:	85 e0       	ldi	r24, 0x05	; 5
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	90 93 03 04 	sts	0x0403, r25
     460:	80 93 02 04 	sts	0x0402, r24
			totalStepLength2 = 10;    // slow the fixture motor
     464:	8a e0       	ldi	r24, 0x0A	; 10
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	90 93 0d 04 	sts	0x040D, r25
     46c:	80 93 0c 04 	sts	0x040C, r24
			u_outputByte1.bits_in_outputByte1.brush1Pump = 0;	//Pump off
     470:	80 91 ea 08 	lds	r24, 0x08EA
     474:	8f 7e       	andi	r24, 0xEF	; 239
     476:	80 93 ea 08 	sts	0x08EA, r24
		    u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  //brush1 dir CCW(1)
     47a:	90 91 ee 08 	lds	r25, 0x08EE
     47e:	9f 77       	andi	r25, 0x7F	; 127
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;  
     480:	80 91 ec 08 	lds	r24, 0x08EC
     484:	80 64       	ori	r24, 0x40	; 64
     486:	80 93 ec 08 	sts	0x08EC, r24
			//u_outputByte0.bits_in_outputByte0.brush1Raise = 0;  
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     48a:	90 62       	ori	r25, 0x20	; 32
     48c:	90 93 ee 08 	sts	0x08EE, r25
			*pfixtureMotor = 0;
     490:	11 82       	std	Z+1, r1	; 0x01
     492:	10 82       	st	Z, r1
			*pbrush1Motor = 1;            //turnup current on brush 1 motor
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	8d 93       	st	X+, r24
     49a:	9c 93       	st	X, r25
     49c:	3e c0       	rjmp	.+124    	; 0x51a <brush1_action+0x254>

			break;
			
		case CLEAN1_3:    // state 16
			highLength2 = 5;
     49e:	85 e0       	ldi	r24, 0x05	; 5
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	90 93 03 04 	sts	0x0403, r25
     4a6:	80 93 02 04 	sts	0x0402, r24
			totalStepLength2 = 10;  // slow down fixture motor
     4aa:	8a e0       	ldi	r24, 0x0A	; 10
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	90 93 0d 04 	sts	0x040D, r25
     4b2:	80 93 0c 04 	sts	0x040C, r24
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;  // raise brush
     4b6:	80 91 ec 08 	lds	r24, 0x08EC
     4ba:	8f 7d       	andi	r24, 0xDF	; 223
     4bc:	80 93 ec 08 	sts	0x08EC, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     4c0:	80 91 ee 08 	lds	r24, 0x08EE
     4c4:	80 62       	ori	r24, 0x20	; 32
     4c6:	80 93 ee 08 	sts	0x08EE, r24
			*pbrush1Motor = 1;
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	8d 93       	st	X+, r24
     4d0:	9c 93       	st	X, r25
			*pfixtureMotor = 1;
     4d2:	91 83       	std	Z+1, r25	; 0x01
     4d4:	80 83       	st	Z, r24
     4d6:	21 c0       	rjmp	.+66     	; 0x51a <brush1_action+0x254>
			

			break;
			
		case B1STOP2:    //state  17
			highLength2 = 1;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	90 93 03 04 	sts	0x0403, r25
     4e0:	80 93 02 04 	sts	0x0402, r24
			totalStepLength2 = 2; //speed up fixture motor
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	90 93 0d 04 	sts	0x040D, r25
     4ec:	80 93 0c 04 	sts	0x040C, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 0; // turn off raise
     4f0:	80 91 ec 08 	lds	r24, 0x08EC
     4f4:	8f 77       	andi	r24, 0x7F	; 127
     4f6:	80 93 ec 08 	sts	0x08EC, r24
			u_outputByte1.bits_in_outputByte1.brush2Lower = 1;  // turn on lower
     4fa:	80 91 ea 08 	lds	r24, 0x08EA
     4fe:	81 60       	ori	r24, 0x01	; 1
     500:	80 93 ea 08 	sts	0x08EA, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;  //idle brush motor
     504:	80 91 e9 08 	lds	r24, 0x08E9
     508:	87 7f       	andi	r24, 0xF7	; 247
     50a:	80 93 e9 08 	sts	0x08E9, r24
			*pbrush1Motor = 0; //turn of all motors
     50e:	1d 92       	st	X+, r1
     510:	1c 92       	st	X, r1
			*pfixtureMotor = 0;
     512:	11 82       	std	Z+1, r1	; 0x01
     514:	10 82       	st	Z, r1
			*pplateLoadMotor = 0;
     516:	19 82       	std	Y+1, r1	; 0x01
     518:	18 82       	st	Y, r1
					break;		
	}
}
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	1f 91       	pop	r17
     520:	0f 91       	pop	r16
     522:	08 95       	ret

00000524 <brush2_action>:

void brush2_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	f9 01       	movw	r30, r18
     52a:	d7 01       	movw	r26, r14
	switch(state){
     52c:	87 31       	cpi	r24, 0x17	; 23
     52e:	91 05       	cpc	r25, r1
     530:	09 f4       	brne	.+2      	; 0x534 <brush2_action+0x10>
     532:	77 c0       	rjmp	.+238    	; 0x622 <brush2_action+0xfe>
     534:	88 31       	cpi	r24, 0x18	; 24
     536:	91 05       	cpc	r25, r1
     538:	b4 f4       	brge	.+44     	; 0x566 <brush2_action+0x42>
     53a:	84 31       	cpi	r24, 0x14	; 20
     53c:	91 05       	cpc	r25, r1
     53e:	09 f4       	brne	.+2      	; 0x542 <brush2_action+0x1e>
     540:	48 c0       	rjmp	.+144    	; 0x5d2 <brush2_action+0xae>
     542:	85 31       	cpi	r24, 0x15	; 21
     544:	91 05       	cpc	r25, r1
     546:	3c f4       	brge	.+14     	; 0x556 <brush2_action+0x32>
     548:	82 31       	cpi	r24, 0x12	; 18
     54a:	91 05       	cpc	r25, r1
     54c:	19 f1       	breq	.+70     	; 0x594 <brush2_action+0x70>
     54e:	43 97       	sbiw	r24, 0x13	; 19
     550:	09 f0       	breq	.+2      	; 0x554 <brush2_action+0x30>
     552:	d5 c0       	rjmp	.+426    	; 0x6fe <brush2_action+0x1da>
     554:	2a c0       	rjmp	.+84     	; 0x5aa <brush2_action+0x86>
     556:	85 31       	cpi	r24, 0x15	; 21
     558:	91 05       	cpc	r25, r1
     55a:	09 f4       	brne	.+2      	; 0x55e <brush2_action+0x3a>
     55c:	93 c0       	rjmp	.+294    	; 0x684 <brush2_action+0x160>
     55e:	46 97       	sbiw	r24, 0x16	; 22
     560:	09 f0       	breq	.+2      	; 0x564 <brush2_action+0x40>
     562:	cd c0       	rjmp	.+410    	; 0x6fe <brush2_action+0x1da>
     564:	4f c0       	rjmp	.+158    	; 0x604 <brush2_action+0xe0>
     566:	8a 31       	cpi	r24, 0x1A	; 26
     568:	91 05       	cpc	r25, r1
     56a:	09 f4       	brne	.+2      	; 0x56e <brush2_action+0x4a>
     56c:	8b c0       	rjmp	.+278    	; 0x684 <brush2_action+0x160>
     56e:	8b 31       	cpi	r24, 0x1B	; 27
     570:	91 05       	cpc	r25, r1
     572:	44 f4       	brge	.+16     	; 0x584 <brush2_action+0x60>
     574:	88 31       	cpi	r24, 0x18	; 24
     576:	91 05       	cpc	r25, r1
     578:	09 f4       	brne	.+2      	; 0x57c <brush2_action+0x58>
     57a:	61 c0       	rjmp	.+194    	; 0x63e <brush2_action+0x11a>
     57c:	49 97       	sbiw	r24, 0x19	; 25
     57e:	09 f0       	breq	.+2      	; 0x582 <brush2_action+0x5e>
     580:	be c0       	rjmp	.+380    	; 0x6fe <brush2_action+0x1da>
     582:	69 c0       	rjmp	.+210    	; 0x656 <brush2_action+0x132>
     584:	8b 31       	cpi	r24, 0x1B	; 27
     586:	91 05       	cpc	r25, r1
     588:	09 f4       	brne	.+2      	; 0x58c <brush2_action+0x68>
     58a:	86 c0       	rjmp	.+268    	; 0x698 <brush2_action+0x174>
     58c:	4c 97       	sbiw	r24, 0x1c	; 28
     58e:	09 f0       	breq	.+2      	; 0x592 <brush2_action+0x6e>
     590:	b6 c0       	rjmp	.+364    	; 0x6fe <brush2_action+0x1da>
     592:	a2 c0       	rjmp	.+324    	; 0x6d8 <brush2_action+0x1b4>
		
		case MOVEC2:  // state 18
			delayTimeMicroSeconds = 250; // speed up to move fixture
     594:	8a ef       	ldi	r24, 0xFA	; 250
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	90 93 15 04 	sts	0x0415, r25
     59c:	80 93 14 04 	sts	0x0414, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // set fixture motor to go forward
     5a0:	80 91 ee 08 	lds	r24, 0x08EE
     5a4:	8f 7e       	andi	r24, 0xEF	; 239
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     5a6:	80 62       	ori	r24, 0x20	; 32
     5a8:	45 c0       	rjmp	.+138    	; 0x634 <brush2_action+0x110>
			*pfixtureMotor = 1; 
			break;
			
		case B2SET1:  //state 19
			delayTimeMicroSeconds = 4000; //slow down to wet brush
     5aa:	80 ea       	ldi	r24, 0xA0	; 160
     5ac:	9f e0       	ldi	r25, 0x0F	; 15
     5ae:	90 93 15 04 	sts	0x0415, r25
     5b2:	80 93 14 04 	sts	0x0414, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0; //turn current down on fixture motor
     5b6:	80 91 ee 08 	lds	r24, 0x08EE
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;   //set fixture motor to go backward
     5ba:	8f 7c       	andi	r24, 0xCF	; 207
     5bc:	80 93 ee 08 	sts	0x08EE, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;   //make sure raise is off
     5c0:	80 91 ec 08 	lds	r24, 0x08EC
     5c4:	80 68       	ori	r24, 0x80	; 128
     5c6:	80 93 ec 08 	sts	0x08EC, r24
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;  // drive down brush to wet
     5ca:	80 91 ea 08 	lds	r24, 0x08EA
     5ce:	8e 7f       	andi	r24, 0xFE	; 254
     5d0:	38 c0       	rjmp	.+112    	; 0x642 <brush2_action+0x11e>
			*pfixtureMotor = 0;  // turn off fixture motor
			*pbrush2Motor = 1;
			break;
			
		case B2START1:   //state 20
			delayTimeMicroSeconds =250; // speed up to move fixture
     5d2:	8a ef       	ldi	r24, 0xFA	; 250
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	90 93 15 04 	sts	0x0415, r25
     5da:	80 93 14 04 	sts	0x0414, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;  //set power up
     5de:	80 91 ee 08 	lds	r24, 0x08EE
     5e2:	80 62       	ori	r24, 0x20	; 32
     5e4:	80 93 ee 08 	sts	0x08EE, r24
			u_outputByte1.bits_in_outputByte1.brush2Pump = 0;	//turn off brush2 pump
     5e8:	80 91 ea 08 	lds	r24, 0x08EA
     5ec:	8f 7d       	andi	r24, 0xDF	; 223
			u_outputByte1.bits_in_outputByte1.brush2Lower = 1;  // release brush 2 lower
     5ee:	81 60       	ori	r24, 0x01	; 1
     5f0:	80 93 ea 08 	sts	0x08EA, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 0;  // raise brush 2 to clean
     5f4:	80 91 ec 08 	lds	r24, 0x08EC
     5f8:	8f 77       	andi	r24, 0x7F	; 127
     5fa:	80 93 ec 08 	sts	0x08EC, r24
			*pbrush2Motor = 0;      // turn off brush2
     5fe:	1d 92       	st	X+, r1
     600:	1c 92       	st	X, r1
     602:	1a c0       	rjmp	.+52     	; 0x638 <brush2_action+0x114>
			 *pbrush2Motor = 1;
			 *pfixtureMotor = 1;
			break;
			
		case B2STOP1:   //state 22
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;  //drive brush low
     604:	80 91 ea 08 	lds	r24, 0x08EA
     608:	8e 7f       	andi	r24, 0xFE	; 254
     60a:	80 93 ea 08 	sts	0x08EA, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;  //release brush raise
     60e:	80 91 ec 08 	lds	r24, 0x08EC
     612:	80 68       	ori	r24, 0x80	; 128
     614:	80 93 ec 08 	sts	0x08EC, r24
			*pfixtureMotor = 0;
     618:	11 82       	std	Z+1, r1	; 0x01
     61a:	10 82       	st	Z, r1
			*pbrush2Motor = 0;
     61c:	1d 92       	st	X+, r1
     61e:	1c 92       	st	X, r1
     620:	6e c0       	rjmp	.+220    	; 0x6fe <brush2_action+0x1da>
			break;
			
		case CLEAN2_2:    // state 23
			delayTimeMicroSeconds = 250; // speed up to move fixture
     622:	8a ef       	ldi	r24, 0xFA	; 250
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	90 93 15 04 	sts	0x0415, r25
     62a:	80 93 14 04 	sts	0x0414, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // fixture direction to forward
     62e:	80 91 ee 08 	lds	r24, 0x08EE
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     632:	80 63       	ori	r24, 0x30	; 48
     634:	80 93 ee 08 	sts	0x08EE, r24
			*pfixtureMotor = 1;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	5e c0       	rjmp	.+188    	; 0x6fa <brush2_action+0x1d6>
			break;
			
		case B2SET2:   // state 24
			u_outputByte1.bits_in_outputByte1.brush2Pump = 1;	//turn pump2 on
     63e:	80 91 ea 08 	lds	r24, 0x08EA
     642:	80 62       	ori	r24, 0x20	; 32
     644:	80 93 ea 08 	sts	0x08EA, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     648:	80 91 e9 08 	lds	r24, 0x08E9
     64c:	88 60       	ori	r24, 0x08	; 8
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  //brush direction for wetting
     64e:	8b 7f       	andi	r24, 0xFB	; 251
     650:	80 93 e9 08 	sts	0x08E9, r24
     654:	10 c0       	rjmp	.+32     	; 0x676 <brush2_action+0x152>
			*pbrush2Motor = 1;
			break;
			
		case B2START2:   //State 25
	
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // brush direction for forward cleaning
     656:	80 91 e9 08 	lds	r24, 0x08E9
     65a:	8b 7f       	andi	r24, 0xFB	; 251
     65c:	80 93 e9 08 	sts	0x08E9, r24
			u_outputByte1.bits_in_outputByte1.brush2Pump = 0;	//turn pump2 on
     660:	80 91 ea 08 	lds	r24, 0x08EA
     664:	8f 7d       	andi	r24, 0xDF	; 223
			u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     666:	81 60       	ori	r24, 0x01	; 1
     668:	80 93 ea 08 	sts	0x08EA, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     66c:	80 91 ec 08 	lds	r24, 0x08EC
     670:	8f 77       	andi	r24, 0x7F	; 127
     672:	80 93 ec 08 	sts	0x08EC, r24
			*pfixtureMotor = 0;
     676:	11 82       	std	Z+1, r1	; 0x01
     678:	10 82       	st	Z, r1
			*pbrush2Motor = 1;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	8d 93       	st	X+, r24
     680:	9c 93       	st	X, r25
     682:	3d c0       	rjmp	.+122    	; 0x6fe <brush2_action+0x1da>
			break;
			
		case CLEAN2_3:     // state 26
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     684:	80 91 ee 08 	lds	r24, 0x08EE
     688:	80 62       	ori	r24, 0x20	; 32
     68a:	80 93 ee 08 	sts	0x08EE, r24
			*pbrush2Motor = 1;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	8d 93       	st	X+, r24
     694:	9c 93       	st	X, r25
     696:	31 c0       	rjmp	.+98     	; 0x6fa <brush2_action+0x1d6>
			*pfixtureMotor = 1;
			break;
			
		case B2STOP2:    // state 27
			highLength2 = 1;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	90 93 03 04 	sts	0x0403, r25
     6a0:	80 93 02 04 	sts	0x0402, r24
			totalStepLength2 = 2;
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	90 93 0d 04 	sts	0x040D, r25
     6ac:	80 93 0c 04 	sts	0x040C, r24
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     6b0:	80 91 ea 08 	lds	r24, 0x08EA
     6b4:	8e 7f       	andi	r24, 0xFE	; 254
     6b6:	80 93 ea 08 	sts	0x08EA, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     6ba:	80 91 ec 08 	lds	r24, 0x08EC
     6be:	80 68       	ori	r24, 0x80	; 128
     6c0:	80 93 ec 08 	sts	0x08EC, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     6c4:	80 91 e9 08 	lds	r24, 0x08E9
     6c8:	87 7f       	andi	r24, 0xF7	; 247
     6ca:	80 93 e9 08 	sts	0x08E9, r24
			*pbrush2Motor = 0;
     6ce:	1d 92       	st	X+, r1
     6d0:	1c 92       	st	X, r1
			*pfixtureMotor = 0;
     6d2:	11 82       	std	Z+1, r1	; 0x01
     6d4:	10 82       	st	Z, r1
     6d6:	13 c0       	rjmp	.+38     	; 0x6fe <brush2_action+0x1da>
			break;
			
		case MOVED1:    // state 28
			highLength2 = 1;
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	90 93 03 04 	sts	0x0403, r25
     6e0:	80 93 02 04 	sts	0x0402, r24
			totalStepLength2 = 2;
     6e4:	22 e0       	ldi	r18, 0x02	; 2
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	30 93 0d 04 	sts	0x040D, r19
     6ec:	20 93 0c 04 	sts	0x040C, r18
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     6f0:	20 91 ee 08 	lds	r18, 0x08EE
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     6f4:	20 63       	ori	r18, 0x30	; 48
     6f6:	20 93 ee 08 	sts	0x08EE, r18
			*pfixtureMotor = 1;
     6fa:	91 83       	std	Z+1, r25	; 0x01
     6fc:	80 83       	st	Z, r24
			break;
	}
}
     6fe:	ff 90       	pop	r15
     700:	ef 90       	pop	r14
     702:	08 95       	ret

00000704 <dry_action>:

void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	ea 01       	movw	r28, r20
     70e:	f9 01       	movw	r30, r18
     710:	d6 01       	movw	r26, r12
	switch(state){
     712:	80 32       	cpi	r24, 0x20	; 32
     714:	91 05       	cpc	r25, r1
     716:	09 f4       	brne	.+2      	; 0x71a <dry_action+0x16>
     718:	5f c0       	rjmp	.+190    	; 0x7d8 <dry_action+0xd4>
     71a:	81 32       	cpi	r24, 0x21	; 33
     71c:	91 05       	cpc	r25, r1
     71e:	5c f4       	brge	.+22     	; 0x736 <dry_action+0x32>
     720:	8e 31       	cpi	r24, 0x1E	; 30
     722:	91 05       	cpc	r25, r1
     724:	51 f1       	breq	.+84     	; 0x77a <dry_action+0x76>
     726:	8f 31       	cpi	r24, 0x1F	; 31
     728:	91 05       	cpc	r25, r1
     72a:	0c f0       	brlt	.+2      	; 0x72e <dry_action+0x2a>
     72c:	3e c0       	rjmp	.+124    	; 0x7aa <dry_action+0xa6>
     72e:	4d 97       	sbiw	r24, 0x1d	; 29
     730:	09 f0       	breq	.+2      	; 0x734 <dry_action+0x30>
     732:	90 c0       	rjmp	.+288    	; 0x854 <dry_action+0x150>
     734:	10 c0       	rjmp	.+32     	; 0x756 <dry_action+0x52>
     736:	82 32       	cpi	r24, 0x22	; 34
     738:	91 05       	cpc	r25, r1
     73a:	09 f4       	brne	.+2      	; 0x73e <dry_action+0x3a>
     73c:	5f c0       	rjmp	.+190    	; 0x7fc <dry_action+0xf8>
     73e:	82 32       	cpi	r24, 0x22	; 34
     740:	91 05       	cpc	r25, r1
     742:	0c f4       	brge	.+2      	; 0x746 <dry_action+0x42>
     744:	52 c0       	rjmp	.+164    	; 0x7ea <dry_action+0xe6>
     746:	83 32       	cpi	r24, 0x23	; 35
     748:	91 05       	cpc	r25, r1
     74a:	09 f4       	brne	.+2      	; 0x74e <dry_action+0x4a>
     74c:	62 c0       	rjmp	.+196    	; 0x812 <dry_action+0x10e>
     74e:	84 97       	sbiw	r24, 0x24	; 36
     750:	09 f0       	breq	.+2      	; 0x754 <dry_action+0x50>
     752:	80 c0       	rjmp	.+256    	; 0x854 <dry_action+0x150>
     754:	65 c0       	rjmp	.+202    	; 0x820 <dry_action+0x11c>
		
		case MOVED1EXTRA:    //state 29  ?
			highLength2 = 1;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	90 93 03 04 	sts	0x0403, r25
     75e:	80 93 02 04 	sts	0x0402, r24
			totalStepLength2 = 2;
     762:	22 e0       	ldi	r18, 0x02	; 2
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	30 93 0d 04 	sts	0x040D, r19
     76a:	20 93 0c 04 	sts	0x040C, r18
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     76e:	20 91 ee 08 	lds	r18, 0x08EE
     772:	20 61       	ori	r18, 0x10	; 16
     774:	20 93 ee 08 	sts	0x08EE, r18
     778:	49 c0       	rjmp	.+146    	; 0x80c <dry_action+0x108>
			*pfixtureMotor = 1;
			break;
			
		case DRY:    // state 30   stop running paper towel advance
		
			u_outputByte1.bits_in_outputByte1.airKnife = 0;   // turn on air to dry
     77a:	90 91 ea 08 	lds	r25, 0x08EA
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     77e:	80 91 ee 08 	lds	r24, 0x08EE
     782:	8f 7e       	andi	r24, 0xEF	; 239
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     784:	80 62       	ori	r24, 0x20	; 32
     786:	80 93 ee 08 	sts	0x08EE, r24
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
     78a:	80 91 e9 08 	lds	r24, 0x08E9
     78e:	80 64       	ori	r24, 0x40	; 64
			u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     790:	8f 7d       	andi	r24, 0xDF	; 223
     792:	80 93 e9 08 	sts	0x08E9, r24
			u_outputByte1.bits_in_outputByte1.ptRaise = 0;   //raise the rollers
     796:	93 7f       	andi	r25, 0xF3	; 243
     798:	90 93 ea 08 	sts	0x08EA, r25
			*pfixtureMotor = 1;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	91 83       	std	Z+1, r25	; 0x01
     7a2:	80 83       	st	Z, r24
			*ppaperTowelMotor = 1;   //start advancing the paper
     7a4:	8d 93       	st	X+, r24
     7a6:	9c 93       	st	X, r25
     7a8:	55 c0       	rjmp	.+170    	; 0x854 <dry_action+0x150>
			break;
			
		case DSTOP:   // state 31 turn off drying --plate is past
		
			u_outputByte1.bits_in_outputByte1.airKnife = 1;
     7aa:	90 91 ea 08 	lds	r25, 0x08EA
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     7ae:	80 91 ee 08 	lds	r24, 0x08EE
     7b2:	80 62       	ori	r24, 0x20	; 32
     7b4:	80 93 ee 08 	sts	0x08EE, r24
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
     7b8:	80 91 e9 08 	lds	r24, 0x08E9
     7bc:	8f 7b       	andi	r24, 0xBF	; 191
     7be:	80 93 e9 08 	sts	0x08E9, r24
			u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     7c2:	9c 60       	ori	r25, 0x0C	; 12
			u_outputByte1.bits_in_outputByte1.ptLower = 0;
     7c4:	9d 7f       	andi	r25, 0xFD	; 253
     7c6:	90 93 ea 08 	sts	0x08EA, r25
		    *pfixtureMotor = 1;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	91 83       	std	Z+1, r25	; 0x01
     7d0:	80 83       	st	Z, r24
			*ppaperTowelMotor = 0;
     7d2:	1d 92       	st	X+, r1
     7d4:	1c 92       	st	X, r1
     7d6:	3e c0       	rjmp	.+124    	; 0x854 <dry_action+0x150>
			break;
			
		case FIXL2EXTRA:  //state 32
			u_outputByte1.bits_in_outputByte1.ptLower = 1;
     7d8:	80 91 ea 08 	lds	r24, 0x08EA
     7dc:	82 60       	ori	r24, 0x02	; 2
     7de:	80 93 ea 08 	sts	0x08EA, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     7e2:	80 91 ee 08 	lds	r24, 0x08EE
     7e6:	80 62       	ori	r24, 0x20	; 32
     7e8:	0d c0       	rjmp	.+26     	; 0x804 <dry_action+0x100>
			*pfixtureMotor = 1;
			break;
			
		case RAISEL2:  //state 33   raise fixture lifts
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;   //make sure pistons are free
     7ea:	80 91 ec 08 	lds	r24, 0x08EC
     7ee:	80 61       	ori	r24, 0x10	; 16
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;    // raise fixture
     7f0:	87 7f       	andi	r24, 0xF7	; 247
     7f2:	80 93 ec 08 	sts	0x08EC, r24
			*pfixtureMotor = 0;
     7f6:	11 82       	std	Z+1, r1	; 0x01
     7f8:	10 82       	st	Z, r1
     7fa:	2c c0       	rjmp	.+88     	; 0x854 <dry_action+0x150>
			break;
			
		case FIXH:   // state 34  home fixture
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     7fc:	80 91 ee 08 	lds	r24, 0x08EE
     800:	8f 7e       	andi	r24, 0xEF	; 239
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     802:	84 62       	ori	r24, 0x24	; 36
     804:	80 93 ee 08 	sts	0x08EE, r24
			*pfixtureMotor = 1; 
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	91 83       	std	Z+1, r25	; 0x01
     80e:	80 83       	st	Z, r24
     810:	21 c0       	rjmp	.+66     	; 0x854 <dry_action+0x150>
			break;
			
		case LOWERL3:   // state 35
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1; // let pistons down again
     812:	80 91 ec 08 	lds	r24, 0x08EC
     816:	88 60       	ori	r24, 0x08	; 8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;   //drive pistons down
     818:	8f 7e       	andi	r24, 0xEF	; 239
     81a:	80 93 ec 08 	sts	0x08EC, r24
     81e:	1a c0       	rjmp	.+52     	; 0x854 <dry_action+0x150>
			break;
			
		case UNLOAD:     // state 36
		
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     820:	80 91 ec 08 	lds	r24, 0x08EC
     824:	88 60       	ori	r24, 0x08	; 8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     826:	8f 7e       	andi	r24, 0xEF	; 239
     828:	80 93 ec 08 	sts	0x08EC, r24
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 0)
     82c:	80 91 e8 08 	lds	r24, 0x08E8
     830:	81 fd       	sbrc	r24, 1
     832:	07 c0       	rjmp	.+14     	; 0x842 <dry_action+0x13e>
			{
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     834:	80 91 ee 08 	lds	r24, 0x08EE
     838:	8f 7d       	andi	r24, 0xDF	; 223
     83a:	80 93 ee 08 	sts	0x08EE, r24
			*pfixtureMotor = 0;
     83e:	11 82       	std	Z+1, r1	; 0x01
     840:	10 82       	st	Z, r1
			}
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     842:	80 91 ee 08 	lds	r24, 0x08EE
     846:	8d 7f       	andi	r24, 0xFD	; 253
     848:	80 93 ee 08 	sts	0x08EE, r24
			*pplateLoadMotor = 1;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	99 83       	std	Y+1, r25	; 0x01
     852:	88 83       	st	Y, r24
			break;
	}
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	df 90       	pop	r13
     85a:	cf 90       	pop	r12
     85c:	08 95       	ret

0000085e <button_debounce>:

bool button_debounce(int counter, int *pstateButton)
{
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	8c 01       	movw	r16, r24
     868:	eb 01       	movw	r28, r22
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && is_digital_input_high(IO_D0)){
     86a:	88 81       	ld	r24, Y
     86c:	99 81       	ldd	r25, Y+1	; 0x01
     86e:	89 2b       	or	r24, r25
     870:	69 f4       	brne	.+26     	; 0x88c <button_debounce+0x2e>
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
     878:	88 23       	and	r24, r24
     87a:	41 f0       	breq	.+16     	; 0x88c <button_debounce+0x2e>
		counterRefPush = counter;
     87c:	10 93 b3 08 	sts	0x08B3, r17
     880:	00 93 b2 08 	sts	0x08B2, r16
		*pstateButton = PRESSED;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	99 83       	std	Y+1, r25	; 0x01
     88a:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     88c:	88 81       	ld	r24, Y
     88e:	99 81       	ldd	r25, Y+1	; 0x01
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	39 f5       	brne	.+78     	; 0x8e2 <button_debounce+0x84>
		if(counter - counterRefPush > 15*1000/delayTimeMicroSeconds){
     894:	80 91 b2 08 	lds	r24, 0x08B2
     898:	90 91 b3 08 	lds	r25, 0x08B3
     89c:	98 01       	movw	r18, r16
     89e:	28 1b       	sub	r18, r24
     8a0:	39 0b       	sbc	r19, r25
     8a2:	60 91 14 04 	lds	r22, 0x0414
     8a6:	70 91 15 04 	lds	r23, 0x0415
     8aa:	88 e9       	ldi	r24, 0x98	; 152
     8ac:	9a e3       	ldi	r25, 0x3A	; 58
     8ae:	0e 94 b1 21 	call	0x4362	; 0x4362 <__divmodhi4>
     8b2:	62 17       	cp	r22, r18
     8b4:	73 07       	cpc	r23, r19
     8b6:	74 f4       	brge	.+28     	; 0x8d4 <button_debounce+0x76>
			if(!is_digital_input_high(IO_D0)){
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
     8be:	88 23       	and	r24, r24
     8c0:	81 f4       	brne	.+32     	; 0x8e2 <button_debounce+0x84>
				counterRefRel = counter;
     8c2:	10 93 b1 08 	sts	0x08B1, r17
     8c6:	00 93 b0 08 	sts	0x08B0, r16
				*pstateButton = RELEASED;
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	99 83       	std	Y+1, r25	; 0x01
     8d0:	88 83       	st	Y, r24
     8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <button_debounce+0x84>
			}
		}
		else if(!is_digital_input_high(IO_D0)){
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
     8da:	88 23       	and	r24, r24
     8dc:	11 f4       	brne	.+4      	; 0x8e2 <button_debounce+0x84>
			*pstateButton = NONE;
     8de:	19 82       	std	Y+1, r1	; 0x01
     8e0:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     8e2:	88 81       	ld	r24, Y
     8e4:	99 81       	ldd	r25, Y+1	; 0x01
     8e6:	02 97       	sbiw	r24, 0x02	; 2
     8e8:	19 f5       	brne	.+70     	; 0x930 <button_debounce+0xd2>
		if(is_digital_input_high(IO_D0)){
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
     8f0:	88 23       	and	r24, r24
     8f2:	49 f0       	breq	.+18     	; 0x906 <button_debounce+0xa8>
			*pstateButton = PRESSED;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	99 83       	std	Y+1, r25	; 0x01
     8fa:	88 83       	st	Y, r24
			counterRefPush = counter;
     8fc:	10 93 b3 08 	sts	0x08B3, r17
     900:	00 93 b2 08 	sts	0x08B2, r16
     904:	15 c0       	rjmp	.+42     	; 0x930 <button_debounce+0xd2>
		}
		else if(counter - counterRefRel > 15*1000/delayTimeMicroSeconds){
     906:	80 91 b0 08 	lds	r24, 0x08B0
     90a:	90 91 b1 08 	lds	r25, 0x08B1
     90e:	08 1b       	sub	r16, r24
     910:	19 0b       	sbc	r17, r25
     912:	60 91 14 04 	lds	r22, 0x0414
     916:	70 91 15 04 	lds	r23, 0x0415
     91a:	88 e9       	ldi	r24, 0x98	; 152
     91c:	9a e3       	ldi	r25, 0x3A	; 58
     91e:	0e 94 b1 21 	call	0x4362	; 0x4362 <__divmodhi4>
     922:	60 17       	cp	r22, r16
     924:	71 07       	cpc	r23, r17
     926:	24 f4       	brge	.+8      	; 0x930 <button_debounce+0xd2>
			*pstateButton = NONE;
     928:	19 82       	std	Y+1, r1	; 0x01
     92a:	18 82       	st	Y, r1
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	01 c0       	rjmp	.+2      	; 0x932 <button_debounce+0xd4>
			return true;
     930:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	08 95       	ret

0000093c <init_trans>:

bool init_trans(int state, bool buttonTriggered, int counter, int counterRef){
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	fc 01       	movw	r30, r24
     942:	86 2f       	mov	r24, r22
     944:	da 01       	movw	r26, r20
     946:	b9 01       	movw	r22, r18
	return((state == INIT && buttonTriggered)||
     948:	30 97       	sbiw	r30, 0x00	; 0
     94a:	19 f4       	brne	.+6      	; 0x952 <init_trans+0x16>
     94c:	88 23       	and	r24, r24
     94e:	81 f1       	breq	.+96     	; 0x9b0 <init_trans+0x74>
     950:	77 c0       	rjmp	.+238    	; 0xa40 <init_trans+0x104>
     952:	e1 30       	cpi	r30, 0x01	; 1
     954:	f1 05       	cpc	r31, r1
     956:	29 f4       	brne	.+10     	; 0x962 <init_trans+0x26>
     958:	80 91 e8 08 	lds	r24, 0x08E8
     95c:	80 fd       	sbrc	r24, 0
     95e:	30 c0       	rjmp	.+96     	; 0x9c0 <init_trans+0x84>
     960:	6f c0       	rjmp	.+222    	; 0xa40 <init_trans+0x104>
     962:	e2 30       	cpi	r30, 0x02	; 2
     964:	f1 05       	cpc	r31, r1
     966:	b1 f4       	brne	.+44     	; 0x994 <init_trans+0x58>
     968:	42 1b       	sub	r20, r18
     96a:	53 0b       	sbc	r21, r19
     96c:	20 91 20 04 	lds	r18, 0x0420
     970:	30 91 21 04 	lds	r19, 0x0421
     974:	80 91 0a 04 	lds	r24, 0x040A
     978:	90 91 0b 04 	lds	r25, 0x040B
     97c:	ec 01       	movw	r28, r24
     97e:	2c 9f       	mul	r18, r28
     980:	c0 01       	movw	r24, r0
     982:	2d 9f       	mul	r18, r29
     984:	90 0d       	add	r25, r0
     986:	3c 9f       	mul	r19, r28
     988:	90 0d       	add	r25, r0
     98a:	11 24       	eor	r1, r1
     98c:	84 17       	cp	r24, r20
     98e:	95 07       	cpc	r25, r21
     990:	ac f5       	brge	.+106    	; 0x9fc <init_trans+0xc0>
     992:	56 c0       	rjmp	.+172    	; 0xa40 <init_trans+0x104>
     994:	e3 30       	cpi	r30, 0x03	; 3
     996:	f1 05       	cpc	r31, r1
     998:	59 f4       	brne	.+22     	; 0x9b0 <init_trans+0x74>
     99a:	9a 01       	movw	r18, r20
     99c:	26 1b       	sub	r18, r22
     99e:	37 0b       	sbc	r19, r23
     9a0:	80 91 fa 03 	lds	r24, 0x03FA
     9a4:	90 91 fb 03 	lds	r25, 0x03FB
     9a8:	82 17       	cp	r24, r18
     9aa:	93 07       	cpc	r25, r19
     9ac:	ac f5       	brge	.+106    	; 0xa18 <init_trans+0xdc>
     9ae:	48 c0       	rjmp	.+144    	; 0xa40 <init_trans+0x104>
     9b0:	e4 30       	cpi	r30, 0x04	; 4
     9b2:	f1 05       	cpc	r31, r1
     9b4:	29 f4       	brne	.+10     	; 0x9c0 <init_trans+0x84>
     9b6:	80 91 e8 08 	lds	r24, 0x08E8
     9ba:	86 95       	lsr	r24
     9bc:	86 95       	lsr	r24
     9be:	26 c0       	rjmp	.+76     	; 0xa0c <init_trans+0xd0>
     9c0:	e5 30       	cpi	r30, 0x05	; 5
     9c2:	f1 05       	cpc	r31, r1
     9c4:	d9 f4       	brne	.+54     	; 0x9fc <init_trans+0xc0>
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	a6 1b       	sub	r26, r22
     9cc:	b7 0b       	sbc	r27, r23
     9ce:	80 91 22 04 	lds	r24, 0x0422
     9d2:	90 91 23 04 	lds	r25, 0x0423
     9d6:	20 91 0c 04 	lds	r18, 0x040C
     9da:	30 91 0d 04 	lds	r19, 0x040D
     9de:	bc 01       	movw	r22, r24
     9e0:	62 9f       	mul	r22, r18
     9e2:	c0 01       	movw	r24, r0
     9e4:	63 9f       	mul	r22, r19
     9e6:	90 0d       	add	r25, r0
     9e8:	72 9f       	mul	r23, r18
     9ea:	90 0d       	add	r25, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	8a 17       	cp	r24, r26
     9f0:	9b 07       	cpc	r25, r27
     9f2:	14 f4       	brge	.+4      	; 0x9f8 <init_trans+0xbc>
     9f4:	41 e0       	ldi	r20, 0x01	; 1
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	ca 01       	movw	r24, r20
     9fa:	24 c0       	rjmp	.+72     	; 0xa44 <init_trans+0x108>
     9fc:	e6 30       	cpi	r30, 0x06	; 6
     9fe:	f1 05       	cpc	r31, r1
     a00:	59 f4       	brne	.+22     	; 0xa18 <init_trans+0xdc>
     a02:	80 91 e8 08 	lds	r24, 0x08E8
     a06:	86 95       	lsr	r24
     a08:	86 95       	lsr	r24
     a0a:	86 95       	lsr	r24
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	89 27       	eor	r24, r25
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	81 70       	andi	r24, 0x01	; 1
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	16 c0       	rjmp	.+44     	; 0xa44 <init_trans+0x108>
     a18:	37 97       	sbiw	r30, 0x07	; 7
     a1a:	19 f0       	breq	.+6      	; 0xa22 <init_trans+0xe6>
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	11 c0       	rjmp	.+34     	; 0xa44 <init_trans+0x108>
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	a6 1b       	sub	r26, r22
     a28:	b7 0b       	sbc	r27, r23
     a2a:	80 91 fa 03 	lds	r24, 0x03FA
     a2e:	90 91 fb 03 	lds	r25, 0x03FB
     a32:	8a 17       	cp	r24, r26
     a34:	9b 07       	cpc	r25, r27
     a36:	14 f4       	brge	.+4      	; 0xa3c <init_trans+0x100>
     a38:	21 e0       	ldi	r18, 0x01	; 1
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	c9 01       	movw	r24, r18
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <init_trans+0x108>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
	(state == RAISEL1 && counter - counterRef > pWait)||
	(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == FIXLEXTRA && counter - counterRef > totalStepLength2*fixtureLiftExtra)||
	(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0)||
	(state == LOWERL2 && counter - counterRef > pWait));
}
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <firstB_trans>:

bool firstB_trans(int state, int counter, int counterRef){
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	fc 01       	movw	r30, r24
     a50:	da 01       	movw	r26, r20
	//Had references to counterRef14...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVEC1 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush1Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0)||
     a52:	88 30       	cpi	r24, 0x08	; 8
     a54:	91 05       	cpc	r25, r1
     a56:	29 f4       	brne	.+10     	; 0xa62 <firstB_trans+0x18>
     a58:	80 91 e8 08 	lds	r24, 0x08E8
     a5c:	84 fd       	sbrc	r24, 4
     a5e:	37 c0       	rjmp	.+110    	; 0xace <firstB_trans+0x84>
     a60:	8d c0       	rjmp	.+282    	; 0xb7c <firstB_trans+0x132>
     a62:	89 30       	cpi	r24, 0x09	; 9
     a64:	91 05       	cpc	r25, r1
     a66:	59 f4       	brne	.+22     	; 0xa7e <firstB_trans+0x34>
     a68:	9b 01       	movw	r18, r22
     a6a:	24 1b       	sub	r18, r20
     a6c:	35 0b       	sbc	r19, r21
     a6e:	80 91 fc 03 	lds	r24, 0x03FC
     a72:	90 91 fd 03 	lds	r25, 0x03FD
     a76:	82 17       	cp	r24, r18
     a78:	93 07       	cpc	r25, r19
     a7a:	bc f5       	brge	.+110    	; 0xaea <firstB_trans+0xa0>
     a7c:	7f c0       	rjmp	.+254    	; 0xb7c <firstB_trans+0x132>
     a7e:	8a 30       	cpi	r24, 0x0A	; 10
     a80:	91 05       	cpc	r25, r1
     a82:	59 f4       	brne	.+22     	; 0xa9a <firstB_trans+0x50>
     a84:	9b 01       	movw	r18, r22
     a86:	24 1b       	sub	r18, r20
     a88:	35 0b       	sbc	r19, r21
     a8a:	80 91 fa 03 	lds	r24, 0x03FA
     a8e:	90 91 fb 03 	lds	r25, 0x03FB
     a92:	82 17       	cp	r24, r18
     a94:	93 07       	cpc	r25, r19
     a96:	8c f5       	brge	.+98     	; 0xafa <firstB_trans+0xb0>
     a98:	71 c0       	rjmp	.+226    	; 0xb7c <firstB_trans+0x132>
     a9a:	8b 30       	cpi	r24, 0x0B	; 11
     a9c:	91 05       	cpc	r25, r1
     a9e:	b9 f4       	brne	.+46     	; 0xace <firstB_trans+0x84>
     aa0:	ab 01       	movw	r20, r22
     aa2:	4a 1b       	sub	r20, r26
     aa4:	5b 0b       	sbc	r21, r27
     aa6:	20 91 18 04 	lds	r18, 0x0418
     aaa:	30 91 19 04 	lds	r19, 0x0419
     aae:	80 91 0c 04 	lds	r24, 0x040C
     ab2:	90 91 0d 04 	lds	r25, 0x040D
     ab6:	ec 01       	movw	r28, r24
     ab8:	2c 9f       	mul	r18, r28
     aba:	c0 01       	movw	r24, r0
     abc:	2d 9f       	mul	r18, r29
     abe:	90 0d       	add	r25, r0
     ac0:	3c 9f       	mul	r19, r28
     ac2:	90 0d       	add	r25, r0
     ac4:	11 24       	eor	r1, r1
     ac6:	84 17       	cp	r24, r20
     ac8:	95 07       	cpc	r25, r21
     aca:	1c f5       	brge	.+70     	; 0xb12 <firstB_trans+0xc8>
     acc:	57 c0       	rjmp	.+174    	; 0xb7c <firstB_trans+0x132>
     ace:	ec 30       	cpi	r30, 0x0C	; 12
     ad0:	f1 05       	cpc	r31, r1
     ad2:	59 f4       	brne	.+22     	; 0xaea <firstB_trans+0xa0>
     ad4:	9b 01       	movw	r18, r22
     ad6:	2a 1b       	sub	r18, r26
     ad8:	3b 0b       	sbc	r19, r27
     ada:	80 91 fa 03 	lds	r24, 0x03FA
     ade:	90 91 fb 03 	lds	r25, 0x03FB
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	c4 f4       	brge	.+48     	; 0xb18 <firstB_trans+0xce>
     ae8:	49 c0       	rjmp	.+146    	; 0xb7c <firstB_trans+0x132>
     aea:	ed 30       	cpi	r30, 0x0D	; 13
     aec:	f1 05       	cpc	r31, r1
     aee:	29 f4       	brne	.+10     	; 0xafa <firstB_trans+0xb0>
     af0:	80 91 e8 08 	lds	r24, 0x08E8
     af4:	84 fd       	sbrc	r24, 4
     af6:	2e c0       	rjmp	.+92     	; 0xb54 <firstB_trans+0x10a>
     af8:	41 c0       	rjmp	.+130    	; 0xb7c <firstB_trans+0x132>
     afa:	ee 30       	cpi	r30, 0x0E	; 14
     afc:	f1 05       	cpc	r31, r1
     afe:	49 f4       	brne	.+18     	; 0xb12 <firstB_trans+0xc8>
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	6a 1b       	sub	r22, r26
     b06:	7b 0b       	sbc	r23, r27
     b08:	80 91 fc 03 	lds	r24, 0x03FC
     b0c:	90 91 fd 03 	lds	r25, 0x03FD
     b10:	2e c0       	rjmp	.+92     	; 0xb6e <firstB_trans+0x124>
     b12:	ef 30       	cpi	r30, 0x0F	; 15
     b14:	f1 05       	cpc	r31, r1
     b16:	19 f1       	breq	.+70     	; 0xb5e <firstB_trans+0x114>
     b18:	e0 31       	cpi	r30, 0x10	; 16
     b1a:	f1 05       	cpc	r31, r1
     b1c:	d9 f4       	brne	.+54     	; 0xb54 <firstB_trans+0x10a>
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	6a 1b       	sub	r22, r26
     b24:	7b 0b       	sbc	r23, r27
     b26:	80 91 1a 04 	lds	r24, 0x041A
     b2a:	90 91 1b 04 	lds	r25, 0x041B
     b2e:	20 91 0c 04 	lds	r18, 0x040C
     b32:	30 91 0d 04 	lds	r19, 0x040D
     b36:	fc 01       	movw	r30, r24
     b38:	e2 9f       	mul	r30, r18
     b3a:	c0 01       	movw	r24, r0
     b3c:	e3 9f       	mul	r30, r19
     b3e:	90 0d       	add	r25, r0
     b40:	f2 9f       	mul	r31, r18
     b42:	90 0d       	add	r25, r0
     b44:	11 24       	eor	r1, r1
     b46:	86 17       	cp	r24, r22
     b48:	97 07       	cpc	r25, r23
     b4a:	14 f4       	brge	.+4      	; 0xb50 <firstB_trans+0x106>
     b4c:	41 e0       	ldi	r20, 0x01	; 1
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	ca 01       	movw	r24, r20
     b52:	16 c0       	rjmp	.+44     	; 0xb80 <firstB_trans+0x136>
     b54:	71 97       	sbiw	r30, 0x11	; 17
     b56:	19 f0       	breq	.+6      	; 0xb5e <firstB_trans+0x114>
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	11 c0       	rjmp	.+34     	; 0xb80 <firstB_trans+0x136>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	6a 1b       	sub	r22, r26
     b64:	7b 0b       	sbc	r23, r27
     b66:	80 91 fa 03 	lds	r24, 0x03FA
     b6a:	90 91 fb 03 	lds	r25, 0x03FB
     b6e:	86 17       	cp	r24, r22
     b70:	97 07       	cpc	r25, r23
     b72:	14 f4       	brge	.+4      	; 0xb78 <firstB_trans+0x12e>
     b74:	21 e0       	ldi	r18, 0x01	; 1
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	c9 01       	movw	r24, r18
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <firstB_trans+0x136>
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
	(state == CLEAN1_2 && /*counter - counterRef > totalStepLength2*fixtureMotorHalfPlate &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0)||
	(state == B1SET2 && counter - counterRef > mWait)||
	(state == B1START2 && counter - counterRef > pWait)||
	(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorBigHalfPlate||
	(state == B1STOP2 && counter - counterRef > pWait)));
}
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <secondB_trans>:

bool secondB_trans(int state, int counter, int counterRef){
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	fc 01       	movw	r30, r24
     b8c:	da 01       	movw	r26, r20
	return((state == MOVEC2 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush2Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0)||
     b8e:	82 31       	cpi	r24, 0x12	; 18
     b90:	91 05       	cpc	r25, r1
     b92:	29 f4       	brne	.+10     	; 0xb9e <secondB_trans+0x18>
     b94:	80 91 e8 08 	lds	r24, 0x08E8
     b98:	85 fd       	sbrc	r24, 5
     b9a:	37 c0       	rjmp	.+110    	; 0xc0a <secondB_trans+0x84>
     b9c:	9d c0       	rjmp	.+314    	; 0xcd8 <secondB_trans+0x152>
     b9e:	83 31       	cpi	r24, 0x13	; 19
     ba0:	91 05       	cpc	r25, r1
     ba2:	59 f4       	brne	.+22     	; 0xbba <secondB_trans+0x34>
     ba4:	9b 01       	movw	r18, r22
     ba6:	24 1b       	sub	r18, r20
     ba8:	35 0b       	sbc	r19, r21
     baa:	80 91 fc 03 	lds	r24, 0x03FC
     bae:	90 91 fd 03 	lds	r25, 0x03FD
     bb2:	82 17       	cp	r24, r18
     bb4:	93 07       	cpc	r25, r19
     bb6:	bc f5       	brge	.+110    	; 0xc26 <secondB_trans+0xa0>
     bb8:	8f c0       	rjmp	.+286    	; 0xcd8 <secondB_trans+0x152>
     bba:	84 31       	cpi	r24, 0x14	; 20
     bbc:	91 05       	cpc	r25, r1
     bbe:	59 f4       	brne	.+22     	; 0xbd6 <secondB_trans+0x50>
     bc0:	9b 01       	movw	r18, r22
     bc2:	24 1b       	sub	r18, r20
     bc4:	35 0b       	sbc	r19, r21
     bc6:	80 91 fa 03 	lds	r24, 0x03FA
     bca:	90 91 fb 03 	lds	r25, 0x03FB
     bce:	82 17       	cp	r24, r18
     bd0:	93 07       	cpc	r25, r19
     bd2:	8c f5       	brge	.+98     	; 0xc36 <secondB_trans+0xb0>
     bd4:	81 c0       	rjmp	.+258    	; 0xcd8 <secondB_trans+0x152>
     bd6:	85 31       	cpi	r24, 0x15	; 21
     bd8:	91 05       	cpc	r25, r1
     bda:	b9 f4       	brne	.+46     	; 0xc0a <secondB_trans+0x84>
     bdc:	ab 01       	movw	r20, r22
     bde:	4a 1b       	sub	r20, r26
     be0:	5b 0b       	sbc	r21, r27
     be2:	20 91 1a 04 	lds	r18, 0x041A
     be6:	30 91 1b 04 	lds	r19, 0x041B
     bea:	80 91 0c 04 	lds	r24, 0x040C
     bee:	90 91 0d 04 	lds	r25, 0x040D
     bf2:	ec 01       	movw	r28, r24
     bf4:	2c 9f       	mul	r18, r28
     bf6:	c0 01       	movw	r24, r0
     bf8:	2d 9f       	mul	r18, r29
     bfa:	90 0d       	add	r25, r0
     bfc:	3c 9f       	mul	r19, r28
     bfe:	90 0d       	add	r25, r0
     c00:	11 24       	eor	r1, r1
     c02:	84 17       	cp	r24, r20
     c04:	95 07       	cpc	r25, r21
     c06:	24 f5       	brge	.+72     	; 0xc50 <secondB_trans+0xca>
     c08:	67 c0       	rjmp	.+206    	; 0xcd8 <secondB_trans+0x152>
     c0a:	e6 31       	cpi	r30, 0x16	; 22
     c0c:	f1 05       	cpc	r31, r1
     c0e:	59 f4       	brne	.+22     	; 0xc26 <secondB_trans+0xa0>
     c10:	9b 01       	movw	r18, r22
     c12:	2a 1b       	sub	r18, r26
     c14:	3b 0b       	sbc	r19, r27
     c16:	80 91 fa 03 	lds	r24, 0x03FA
     c1a:	90 91 fb 03 	lds	r25, 0x03FB
     c1e:	82 17       	cp	r24, r18
     c20:	93 07       	cpc	r25, r19
     c22:	cc f4       	brge	.+50     	; 0xc56 <secondB_trans+0xd0>
     c24:	59 c0       	rjmp	.+178    	; 0xcd8 <secondB_trans+0x152>
     c26:	e7 31       	cpi	r30, 0x17	; 23
     c28:	f1 05       	cpc	r31, r1
     c2a:	29 f4       	brne	.+10     	; 0xc36 <secondB_trans+0xb0>
     c2c:	80 91 e8 08 	lds	r24, 0x08E8
     c30:	85 fd       	sbrc	r24, 5
     c32:	2f c0       	rjmp	.+94     	; 0xc92 <secondB_trans+0x10c>
     c34:	51 c0       	rjmp	.+162    	; 0xcd8 <secondB_trans+0x152>
     c36:	e8 31       	cpi	r30, 0x18	; 24
     c38:	f1 05       	cpc	r31, r1
     c3a:	51 f4       	brne	.+20     	; 0xc50 <secondB_trans+0xca>
     c3c:	6a 1b       	sub	r22, r26
     c3e:	7b 0b       	sbc	r23, r27
     c40:	80 91 fc 03 	lds	r24, 0x03FC
     c44:	90 91 fd 03 	lds	r25, 0x03FD
     c48:	86 17       	cp	r24, r22
     c4a:	97 07       	cpc	r25, r23
     c4c:	a4 f5       	brge	.+104    	; 0xcb6 <secondB_trans+0x130>
     c4e:	44 c0       	rjmp	.+136    	; 0xcd8 <secondB_trans+0x152>
     c50:	e9 31       	cpi	r30, 0x19	; 25
     c52:	f1 05       	cpc	r31, r1
     c54:	09 f1       	breq	.+66     	; 0xc98 <secondB_trans+0x112>
     c56:	ea 31       	cpi	r30, 0x1A	; 26
     c58:	f1 05       	cpc	r31, r1
     c5a:	d9 f4       	brne	.+54     	; 0xc92 <secondB_trans+0x10c>
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	6a 1b       	sub	r22, r26
     c62:	7b 0b       	sbc	r23, r27
     c64:	80 91 18 04 	lds	r24, 0x0418
     c68:	90 91 19 04 	lds	r25, 0x0419
     c6c:	20 91 0c 04 	lds	r18, 0x040C
     c70:	30 91 0d 04 	lds	r19, 0x040D
     c74:	fc 01       	movw	r30, r24
     c76:	e2 9f       	mul	r30, r18
     c78:	c0 01       	movw	r24, r0
     c7a:	e3 9f       	mul	r30, r19
     c7c:	90 0d       	add	r25, r0
     c7e:	f2 9f       	mul	r31, r18
     c80:	90 0d       	add	r25, r0
     c82:	11 24       	eor	r1, r1
     c84:	86 17       	cp	r24, r22
     c86:	97 07       	cpc	r25, r23
     c88:	14 f4       	brge	.+4      	; 0xc8e <secondB_trans+0x108>
     c8a:	41 e0       	ldi	r20, 0x01	; 1
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	ca 01       	movw	r24, r20
     c90:	25 c0       	rjmp	.+74     	; 0xcdc <secondB_trans+0x156>
     c92:	eb 31       	cpi	r30, 0x1B	; 27
     c94:	f1 05       	cpc	r31, r1
     c96:	79 f4       	brne	.+30     	; 0xcb6 <secondB_trans+0x130>
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	6a 1b       	sub	r22, r26
     c9e:	7b 0b       	sbc	r23, r27
     ca0:	80 91 fa 03 	lds	r24, 0x03FA
     ca4:	90 91 fb 03 	lds	r25, 0x03FB
     ca8:	86 17       	cp	r24, r22
     caa:	97 07       	cpc	r25, r23
     cac:	14 f4       	brge	.+4      	; 0xcb2 <secondB_trans+0x12c>
     cae:	21 e0       	ldi	r18, 0x01	; 1
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	c9 01       	movw	r24, r18
     cb4:	13 c0       	rjmp	.+38     	; 0xcdc <secondB_trans+0x156>
     cb6:	7c 97       	sbiw	r30, 0x1c	; 28
     cb8:	19 f0       	breq	.+6      	; 0xcc0 <secondB_trans+0x13a>
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e c0       	rjmp	.+28     	; 0xcdc <secondB_trans+0x156>
     cc0:	80 91 e8 08 	lds	r24, 0x08E8
     cc4:	82 95       	swap	r24
     cc6:	86 95       	lsr	r24
     cc8:	86 95       	lsr	r24
     cca:	83 70       	andi	r24, 0x03	; 3
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	89 27       	eor	r24, r25
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	81 70       	andi	r24, 0x01	; 1
     cd4:	90 70       	andi	r25, 0x00	; 0
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <secondB_trans+0x156>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
	(state == B2START2 && counter - counterRef > pWait)||
	(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorSmallHalfPlate)||
	(state == B2STOP2 && counter - counterRef > pWait)||
	(state == MOVED1 && /*counter - counterRef > totalStepLength2*fixtureMotorDry1Step &&*/ 
	u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0));
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <dry_trans>:

bool dry_trans(int state, int counter, int counterRef){
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	fc 01       	movw	r30, r24
     ce8:	da 01       	movw	r26, r20
	//Had references to counterRef26, 30...not used in any transitions, though...unnecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVED1EXTRA && counter - counterRef > fixtureMotorDry1Extra)||
     cea:	8d 31       	cpi	r24, 0x1D	; 29
     cec:	91 05       	cpc	r25, r1
     cee:	59 f4       	brne	.+22     	; 0xd06 <dry_trans+0x24>
     cf0:	9b 01       	movw	r18, r22
     cf2:	24 1b       	sub	r18, r20
     cf4:	35 0b       	sbc	r19, r21
     cf6:	80 91 24 04 	lds	r24, 0x0424
     cfa:	90 91 25 04 	lds	r25, 0x0425
     cfe:	82 17       	cp	r24, r18
     d00:	93 07       	cpc	r25, r19
     d02:	ec f5       	brge	.+122    	; 0xd7e <dry_trans+0x9c>
     d04:	7f c0       	rjmp	.+254    	; 0xe04 <dry_trans+0x122>
     d06:	8e 31       	cpi	r24, 0x1E	; 30
     d08:	91 05       	cpc	r25, r1
     d0a:	b9 f4       	brne	.+46     	; 0xd3a <dry_trans+0x58>
     d0c:	ab 01       	movw	r20, r22
     d0e:	4a 1b       	sub	r20, r26
     d10:	5b 0b       	sbc	r21, r27
     d12:	20 91 1c 04 	lds	r18, 0x041C
     d16:	30 91 1d 04 	lds	r19, 0x041D
     d1a:	80 91 0c 04 	lds	r24, 0x040C
     d1e:	90 91 0d 04 	lds	r25, 0x040D
     d22:	ec 01       	movw	r28, r24
     d24:	2c 9f       	mul	r18, r28
     d26:	c0 01       	movw	r24, r0
     d28:	2d 9f       	mul	r18, r29
     d2a:	90 0d       	add	r25, r0
     d2c:	3c 9f       	mul	r19, r28
     d2e:	90 0d       	add	r25, r0
     d30:	11 24       	eor	r1, r1
     d32:	84 17       	cp	r24, r20
     d34:	95 07       	cpc	r25, r21
     d36:	84 f5       	brge	.+96     	; 0xd98 <dry_trans+0xb6>
     d38:	65 c0       	rjmp	.+202    	; 0xe04 <dry_trans+0x122>
     d3a:	8f 31       	cpi	r24, 0x1F	; 31
     d3c:	91 05       	cpc	r25, r1
     d3e:	29 f4       	brne	.+10     	; 0xd4a <dry_trans+0x68>
     d40:	80 91 e8 08 	lds	r24, 0x08E8
     d44:	83 fd       	sbrc	r24, 3
     d46:	33 c0       	rjmp	.+102    	; 0xdae <dry_trans+0xcc>
     d48:	5d c0       	rjmp	.+186    	; 0xe04 <dry_trans+0x122>
     d4a:	80 32       	cpi	r24, 0x20	; 32
     d4c:	91 05       	cpc	r25, r1
     d4e:	b9 f4       	brne	.+46     	; 0xd7e <dry_trans+0x9c>
     d50:	ab 01       	movw	r20, r22
     d52:	4a 1b       	sub	r20, r26
     d54:	5b 0b       	sbc	r21, r27
     d56:	20 91 28 04 	lds	r18, 0x0428
     d5a:	30 91 29 04 	lds	r19, 0x0429
     d5e:	80 91 0c 04 	lds	r24, 0x040C
     d62:	90 91 0d 04 	lds	r25, 0x040D
     d66:	ec 01       	movw	r28, r24
     d68:	2c 9f       	mul	r18, r28
     d6a:	c0 01       	movw	r24, r0
     d6c:	2d 9f       	mul	r18, r29
     d6e:	90 0d       	add	r25, r0
     d70:	3c 9f       	mul	r19, r28
     d72:	90 0d       	add	r25, r0
     d74:	11 24       	eor	r1, r1
     d76:	84 17       	cp	r24, r20
     d78:	95 07       	cpc	r25, r21
     d7a:	24 f5       	brge	.+72     	; 0xdc4 <dry_trans+0xe2>
     d7c:	43 c0       	rjmp	.+134    	; 0xe04 <dry_trans+0x122>
     d7e:	e1 32       	cpi	r30, 0x21	; 33
     d80:	f1 05       	cpc	r31, r1
     d82:	51 f4       	brne	.+20     	; 0xd98 <dry_trans+0xb6>
     d84:	80 91 e8 08 	lds	r24, 0x08E8
     d88:	86 95       	lsr	r24
     d8a:	86 95       	lsr	r24
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	89 27       	eor	r24, r25
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	81 70       	andi	r24, 0x01	; 1
     d94:	90 70       	andi	r25, 0x00	; 0
     d96:	38 c0       	rjmp	.+112    	; 0xe08 <dry_trans+0x126>
     d98:	e2 32       	cpi	r30, 0x22	; 34
     d9a:	f1 05       	cpc	r31, r1
     d9c:	41 f4       	brne	.+16     	; 0xdae <dry_trans+0xcc>
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	6a 1b       	sub	r22, r26
     da4:	7b 0b       	sbc	r23, r27
     da6:	69 3c       	cpi	r22, 0xC9	; 201
     da8:	71 05       	cpc	r23, r1
     daa:	74 f1       	brlt	.+92     	; 0xe08 <dry_trans+0x126>
     dac:	2b c0       	rjmp	.+86     	; 0xe04 <dry_trans+0x122>
     dae:	e3 32       	cpi	r30, 0x23	; 35
     db0:	f1 05       	cpc	r31, r1
     db2:	41 f4       	brne	.+16     	; 0xdc4 <dry_trans+0xe2>
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	6a 1b       	sub	r22, r26
     dba:	7b 0b       	sbc	r23, r27
     dbc:	65 58       	subi	r22, 0x85	; 133
     dbe:	73 40       	sbci	r23, 0x03	; 3
     dc0:	1c f1       	brlt	.+70     	; 0xe08 <dry_trans+0x126>
     dc2:	20 c0       	rjmp	.+64     	; 0xe04 <dry_trans+0x122>
     dc4:	b4 97       	sbiw	r30, 0x24	; 36
     dc6:	19 f0       	breq	.+6      	; 0xdce <dry_trans+0xec>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	1d c0       	rjmp	.+58     	; 0xe08 <dry_trans+0x126>
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	6a 1b       	sub	r22, r26
     dd4:	7b 0b       	sbc	r23, r27
     dd6:	80 91 1e 04 	lds	r24, 0x041E
     dda:	90 91 1f 04 	lds	r25, 0x041F
     dde:	20 91 0a 04 	lds	r18, 0x040A
     de2:	30 91 0b 04 	lds	r19, 0x040B
     de6:	ec 01       	movw	r28, r24
     de8:	c2 9f       	mul	r28, r18
     dea:	c0 01       	movw	r24, r0
     dec:	c3 9f       	mul	r28, r19
     dee:	90 0d       	add	r25, r0
     df0:	d2 9f       	mul	r29, r18
     df2:	90 0d       	add	r25, r0
     df4:	11 24       	eor	r1, r1
     df6:	86 17       	cp	r24, r22
     df8:	97 07       	cpc	r25, r23
     dfa:	14 f4       	brge	.+4      	; 0xe00 <dry_trans+0x11e>
     dfc:	41 e0       	ldi	r20, 0x01	; 1
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	ca 01       	movw	r24, r20
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <dry_trans+0x126>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
	(state == FIXL2EXTRA && counter - counterRef > totalStepLength2*fixtureLift2Extra)||
	(state == RAISEL2 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == FIXH && counter - counterRef > 200)||
	(state == LOWERL3 && counter - counterRef > 900)||
	(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate));
}
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <motor_and_write>:
	serial_print_string(msg);
}


void motor_and_write(int counter, int counterRef, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor)
{
     e0e:	af 92       	push	r10
     e10:	bf 92       	push	r11
     e12:	cf 92       	push	r12
     e14:	df 92       	push	r13
     e16:	ef 92       	push	r14
     e18:	ff 92       	push	r15
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	ea 01       	movw	r28, r20
     e24:	59 01       	movw	r10, r18
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     e26:	fc 01       	movw	r30, r24
     e28:	e6 1b       	sub	r30, r22
     e2a:	f7 0b       	sbc	r31, r23
     e2c:	60 91 0a 04 	lds	r22, 0x040A
     e30:	70 91 0b 04 	lds	r23, 0x040B
     e34:	cf 01       	movw	r24, r30
     e36:	0e 94 b1 21 	call	0x4362	; 0x4362 <__divmodhi4>
     e3a:	20 91 00 04 	lds	r18, 0x0400
     e3e:	30 91 01 04 	lds	r19, 0x0401
     e42:	82 17       	cp	r24, r18
     e44:	93 07       	cpc	r25, r19
     e46:	34 f4       	brge	.+12     	; 0xe54 <motor_and_write+0x46>
     e48:	cd 2b       	or	r28, r29
     e4a:	21 f0       	breq	.+8      	; 0xe54 <motor_and_write+0x46>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 1
     e4c:	80 91 ee 08 	lds	r24, 0x08EE
     e50:	81 60       	ori	r24, 0x01	; 1
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <motor_and_write+0x4c>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     e54:	80 91 ee 08 	lds	r24, 0x08EE
     e58:	8e 7f       	andi	r24, 0xFE	; 254
     e5a:	80 93 ee 08 	sts	0x08EE, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     e5e:	60 91 0c 04 	lds	r22, 0x040C
     e62:	70 91 0d 04 	lds	r23, 0x040D
     e66:	cf 01       	movw	r24, r30
     e68:	0e 94 b1 21 	call	0x4362	; 0x4362 <__divmodhi4>
     e6c:	20 91 02 04 	lds	r18, 0x0402
     e70:	30 91 03 04 	lds	r19, 0x0403
     e74:	82 17       	cp	r24, r18
     e76:	93 07       	cpc	r25, r19
     e78:	34 f4       	brge	.+12     	; 0xe86 <motor_and_write+0x78>
     e7a:	ab 28       	or	r10, r11
     e7c:	21 f0       	breq	.+8      	; 0xe86 <motor_and_write+0x78>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     e7e:	80 91 ee 08 	lds	r24, 0x08EE
     e82:	88 60       	ori	r24, 0x08	; 8
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <motor_and_write+0x7e>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 0
     e86:	80 91 ee 08 	lds	r24, 0x08EE
     e8a:	87 7f       	andi	r24, 0xF7	; 247
     e8c:	80 93 ee 08 	sts	0x08EE, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     e90:	60 91 0e 04 	lds	r22, 0x040E
     e94:	70 91 0f 04 	lds	r23, 0x040F
     e98:	cf 01       	movw	r24, r30
     e9a:	0e 94 b1 21 	call	0x4362	; 0x4362 <__divmodhi4>
     e9e:	20 91 04 04 	lds	r18, 0x0404
     ea2:	30 91 05 04 	lds	r19, 0x0405
     ea6:	82 17       	cp	r24, r18
     ea8:	93 07       	cpc	r25, r19
     eaa:	34 f4       	brge	.+12     	; 0xeb8 <motor_and_write+0xaa>
     eac:	01 2b       	or	r16, r17
     eae:	21 f0       	breq	.+8      	; 0xeb8 <motor_and_write+0xaa>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     eb0:	80 91 ee 08 	lds	r24, 0x08EE
     eb4:	80 64       	ori	r24, 0x40	; 64
     eb6:	03 c0       	rjmp	.+6      	; 0xebe <motor_and_write+0xb0>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 0
     eb8:	80 91 ee 08 	lds	r24, 0x08EE
     ebc:	8f 7b       	andi	r24, 0xBF	; 191
     ebe:	80 93 ee 08 	sts	0x08EE, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     ec2:	60 91 10 04 	lds	r22, 0x0410
     ec6:	70 91 11 04 	lds	r23, 0x0411
     eca:	cf 01       	movw	r24, r30
     ecc:	0e 94 b1 21 	call	0x4362	; 0x4362 <__divmodhi4>
     ed0:	20 91 06 04 	lds	r18, 0x0406
     ed4:	30 91 07 04 	lds	r19, 0x0407
     ed8:	82 17       	cp	r24, r18
     eda:	93 07       	cpc	r25, r19
     edc:	34 f4       	brge	.+12     	; 0xeea <motor_and_write+0xdc>
     ede:	ef 28       	or	r14, r15
     ee0:	21 f0       	breq	.+8      	; 0xeea <motor_and_write+0xdc>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     ee2:	80 91 e9 08 	lds	r24, 0x08E9
     ee6:	82 60       	ori	r24, 0x02	; 2
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <motor_and_write+0xe2>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 0
     eea:	80 91 e9 08 	lds	r24, 0x08E9
     eee:	8d 7f       	andi	r24, 0xFD	; 253
     ef0:	80 93 e9 08 	sts	0x08E9, r24
	}

	if( ((counter - counterRef) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     ef4:	60 91 12 04 	lds	r22, 0x0412
     ef8:	70 91 13 04 	lds	r23, 0x0413
     efc:	cf 01       	movw	r24, r30
     efe:	0e 94 b1 21 	call	0x4362	; 0x4362 <__divmodhi4>
     f02:	20 91 08 04 	lds	r18, 0x0408
     f06:	30 91 09 04 	lds	r19, 0x0409
     f0a:	82 17       	cp	r24, r18
     f0c:	93 07       	cpc	r25, r19
     f0e:	34 f4       	brge	.+12     	; 0xf1c <motor_and_write+0x10e>
     f10:	cd 28       	or	r12, r13
     f12:	21 f0       	breq	.+8      	; 0xf1c <motor_and_write+0x10e>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     f14:	80 91 e9 08 	lds	r24, 0x08E9
     f18:	80 61       	ori	r24, 0x10	; 16
     f1a:	03 c0       	rjmp	.+6      	; 0xf22 <motor_and_write+0x114>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 0
     f1c:	80 91 e9 08 	lds	r24, 0x08E9
     f20:	8f 7e       	andi	r24, 0xEF	; 239
     f22:	80 93 e9 08 	sts	0x08E9, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     f26:	80 e4       	ldi	r24, 0x40	; 64
     f28:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
	i2c_write(0x2);									// write command byte to motor chip
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     f32:	80 91 ee 08 	lds	r24, 0x08EE
     f36:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     f3a:	80 91 e9 08 	lds	r24, 0x08E9
     f3e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_stop();                            // set stop condition = release bus
     f42:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

	i2c_start(I2C2+I2C_WRITE);                // write to output chip
     f46:	82 e4       	ldi	r24, 0x42	; 66
     f48:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
	i2c_write(0x2);
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_write(u_outputByte0.outputByte0);
     f52:	80 91 ec 08 	lds	r24, 0x08EC
     f56:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_write(u_outputByte1.outputByte1);
     f5a:	80 91 ea 08 	lds	r24, 0x08EA
     f5e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_stop();
     f62:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
}
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	df 90       	pop	r13
     f74:	cf 90       	pop	r12
     f76:	bf 90       	pop	r11
     f78:	af 90       	pop	r10
     f7a:	08 95       	ret

00000f7c <serial_print_string_noCRLF>:
void serial_print_string(char msg[]){
	serial_send_blocking(USB_COMM, msg, strlen(msg));
	serial_send_blocking(USB_COMM, "\r\n", 2);
}

void serial_print_string_noCRLF(char msg[]){
     f7c:	68 2f       	mov	r22, r24
	serial_send_blocking(USB_COMM, msg, strlen(msg));
     f7e:	e8 2f       	mov	r30, r24
     f80:	f9 2f       	mov	r31, r25
     f82:	df 01       	movw	r26, r30
     f84:	0d 90       	ld	r0, X+
     f86:	00 20       	and	r0, r0
     f88:	e9 f7       	brne	.-6      	; 0xf84 <serial_print_string_noCRLF+0x8>
     f8a:	11 97       	sbiw	r26, 0x01	; 1
     f8c:	ae 1b       	sub	r26, r30
     f8e:	bf 0b       	sbc	r27, r31
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	79 2f       	mov	r23, r25
     f94:	4a 2f       	mov	r20, r26
     f96:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <serial_send_blocking>
}
     f9a:	08 95       	ret

00000f9c <serial_print_string>:
	}
	serial_print_string("END");
	}
}

void serial_print_string(char msg[]){
     f9c:	68 2f       	mov	r22, r24
	serial_send_blocking(USB_COMM, msg, strlen(msg));
     f9e:	e8 2f       	mov	r30, r24
     fa0:	f9 2f       	mov	r31, r25
     fa2:	df 01       	movw	r26, r30
     fa4:	0d 90       	ld	r0, X+
     fa6:	00 20       	and	r0, r0
     fa8:	e9 f7       	brne	.-6      	; 0xfa4 <serial_print_string+0x8>
     faa:	11 97       	sbiw	r26, 0x01	; 1
     fac:	ae 1b       	sub	r26, r30
     fae:	bf 0b       	sbc	r27, r31
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	79 2f       	mov	r23, r25
     fb4:	4a 2f       	mov	r20, r26
     fb6:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <serial_send_blocking>
	serial_send_blocking(USB_COMM, "\r\n", 2);
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	71 e0       	ldi	r23, 0x01	; 1
     fc0:	42 e0       	ldi	r20, 0x02	; 2
     fc2:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <serial_send_blocking>
}
     fc6:	08 95       	ret

00000fc8 <init_action>:
	i2c_write(u_outputByte0.outputByte0);
	i2c_write(u_outputByte1.outputByte1);
	i2c_stop();
}

void init_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor, bool *pprint0){
     fc8:	af 92       	push	r10
     fca:	bf 92       	push	r11
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	ea 01       	movw	r28, r20
     fd2:	f9 01       	movw	r30, r18
	switch(state){
     fd4:	83 30       	cpi	r24, 0x03	; 3
     fd6:	91 05       	cpc	r25, r1
     fd8:	09 f4       	brne	.+2      	; 0xfdc <init_action+0x14>
     fda:	64 c0       	rjmp	.+200    	; 0x10a4 <init_action+0xdc>
     fdc:	84 30       	cpi	r24, 0x04	; 4
     fde:	91 05       	cpc	r25, r1
     fe0:	54 f4       	brge	.+20     	; 0xff6 <init_action+0x2e>
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	91 05       	cpc	r25, r1
     fe6:	e1 f1       	breq	.+120    	; 0x1060 <init_action+0x98>
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	91 05       	cpc	r25, r1
     fec:	0c f0       	brlt	.+2      	; 0xff0 <init_action+0x28>
     fee:	4b c0       	rjmp	.+150    	; 0x1086 <init_action+0xbe>
     ff0:	89 2b       	or	r24, r25
     ff2:	89 f0       	breq	.+34     	; 0x1016 <init_action+0x4e>
     ff4:	87 c0       	rjmp	.+270    	; 0x1104 <init_action+0x13c>
     ff6:	85 30       	cpi	r24, 0x05	; 5
     ff8:	91 05       	cpc	r25, r1
     ffa:	09 f4       	brne	.+2      	; 0xffe <init_action+0x36>
     ffc:	62 c0       	rjmp	.+196    	; 0x10c2 <init_action+0xfa>
     ffe:	85 30       	cpi	r24, 0x05	; 5
    1000:	91 05       	cpc	r25, r1
    1002:	0c f4       	brge	.+2      	; 0x1006 <init_action+0x3e>
    1004:	5e c0       	rjmp	.+188    	; 0x10c2 <init_action+0xfa>
    1006:	86 30       	cpi	r24, 0x06	; 6
    1008:	91 05       	cpc	r25, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <init_action+0x46>
    100c:	64 c0       	rjmp	.+200    	; 0x10d6 <init_action+0x10e>
    100e:	07 97       	sbiw	r24, 0x07	; 7
    1010:	09 f0       	breq	.+2      	; 0x1014 <init_action+0x4c>
    1012:	78 c0       	rjmp	.+240    	; 0x1104 <init_action+0x13c>
    1014:	6d c0       	rjmp	.+218    	; 0x10f0 <init_action+0x128>
		
		case INIT:   // state 0
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    1016:	80 91 e8 08 	lds	r24, 0x08E8
    101a:	90 91 ee 08 	lds	r25, 0x08EE
    101e:	81 ff       	sbrs	r24, 1
    1020:	04 c0       	rjmp	.+8      	; 0x102a <init_action+0x62>
				u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    1022:	9f 7e       	andi	r25, 0xEF	; 239
    1024:	90 93 ee 08 	sts	0x08EE, r25
    1028:	6d c0       	rjmp	.+218    	; 0x1104 <init_action+0x13c>
				//u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
			}
			else{
				u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    102a:	9f 7d       	andi	r25, 0xDF	; 223
    102c:	90 93 ee 08 	sts	0x08EE, r25
				u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1030:	80 91 ec 08 	lds	r24, 0x08EC
    1034:	8f 7e       	andi	r24, 0xEF	; 239
				u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1036:	88 60       	ori	r24, 0x08	; 8
    1038:	80 93 ec 08 	sts	0x08EC, r24
				*pfixtureMotor = 0;
    103c:	11 82       	std	Z+1, r1	; 0x01
    103e:	10 82       	st	Z, r1
				if(*pprint0 == 1){
    1040:	f5 01       	movw	r30, r10
    1042:	80 81       	ld	r24, Z
    1044:	88 23       	and	r24, r24
    1046:	09 f4       	brne	.+2      	; 0x104a <init_action+0x82>
    1048:	5d c0       	rjmp	.+186    	; 0x1104 <init_action+0x13c>
					lcd_goto_xy(0,1);
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
					serial_print_string("PUSH TO START");
    1052:	83 e0       	ldi	r24, 0x03	; 3
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
					*pprint0 = 0;
    105a:	f5 01       	movw	r30, r10
    105c:	10 82       	st	Z, r1
    105e:	52 c0       	rjmp	.+164    	; 0x1104 <init_action+0x13c>
				}
			}
			break;
			
		case LOAD:    //state 1
			u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1060:	20 91 ec 08 	lds	r18, 0x08EC
    1064:	32 2f       	mov	r19, r18
    1066:	3e 7f       	andi	r19, 0xFE	; 254
			if((counter % 200) < 100){
    1068:	cb 01       	movw	r24, r22
    106a:	68 ec       	ldi	r22, 0xC8	; 200
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	0e 94 b1 21 	call	0x4362	; 0x4362 <__divmodhi4>
    1072:	84 36       	cpi	r24, 0x64	; 100
    1074:	91 05       	cpc	r25, r1
    1076:	24 f4       	brge	.+8      	; 0x1080 <init_action+0xb8>
				u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1078:	2c 7f       	andi	r18, 0xFC	; 252
    107a:	20 93 ec 08 	sts	0x08EC, r18
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <init_action+0xbe>
			}
			else{
				u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1080:	32 60       	ori	r19, 0x02	; 2
    1082:	30 93 ec 08 	sts	0x08EC, r19
			*pplateLoadMotor = 1;
			*pfixtureMotor = 0;
			break;
			
		case LOADEXTRA:  // state 2
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //set direction to load plate
    1086:	80 91 ee 08 	lds	r24, 0x08EE
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    108a:	86 60       	ori	r24, 0x06	; 6
    108c:	80 93 ee 08 	sts	0x08EE, r24
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1090:	80 91 ec 08 	lds	r24, 0x08EC
    1094:	8b 7f       	andi	r24, 0xFB	; 251
    1096:	80 93 ec 08 	sts	0x08EC, r24
			*pplateLoadMotor = 1;   // turn on plate loading motor
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	99 83       	std	Y+1, r25	; 0x01
    10a0:	88 83       	st	Y, r24
    10a2:	23 c0       	rjmp	.+70     	; 0x10ea <init_action+0x122>
			*pfixtureMotor = 0;
			break;
			
		case RAISEL1:    // state 3
			u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    10a4:	80 91 ec 08 	lds	r24, 0x08EC
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    10a8:	81 7e       	andi	r24, 0xE1	; 225
			u_outputByte0.bits_in_outputByte0.plateStop = 1;
    10aa:	86 61       	ori	r24, 0x16	; 22
    10ac:	80 93 ec 08 	sts	0x08EC, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    10b0:	80 91 ee 08 	lds	r24, 0x08EE
    10b4:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    10b6:	8b 7f       	andi	r24, 0xFB	; 251
    10b8:	80 93 ee 08 	sts	0x08EE, r24
			*pplateLoadMotor = 0;
    10bc:	19 82       	std	Y+1, r1	; 0x01
    10be:	18 82       	st	Y, r1
    10c0:	21 c0       	rjmp	.+66     	; 0x1104 <init_action+0x13c>
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			*pfixtureMotor = 1;
			break;
			
		case FIXLEXTRA:   // state 5
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // fixture takes a few steps to get to drop point
    10c2:	80 91 ee 08 	lds	r24, 0x08EE
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    10c6:	80 63       	ori	r24, 0x30	; 48
    10c8:	80 93 ee 08 	sts	0x08EE, r24
			*pfixtureMotor = 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	91 83       	std	Z+1, r25	; 0x01
    10d2:	80 83       	st	Z, r24
    10d4:	17 c0       	rjmp	.+46     	; 0x1104 <init_action+0x13c>
			break;
			
		case LOWERL1:      // state 6
			
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    10d6:	80 91 ee 08 	lds	r24, 0x08EE
    10da:	8f 7d       	andi	r24, 0xDF	; 223
    10dc:	80 93 ee 08 	sts	0x08EE, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;    // removes air to drop fixture
    10e0:	80 91 ec 08 	lds	r24, 0x08EC
    10e4:	88 60       	ori	r24, 0x08	; 8
    10e6:	80 93 ec 08 	sts	0x08EC, r24
			*pfixtureMotor = 0;
    10ea:	11 82       	std	Z+1, r1	; 0x01
    10ec:	10 82       	st	Z, r1
    10ee:	0a c0       	rjmp	.+20     	; 0x1104 <init_action+0x13c>
			break;
			
		case LOWERL2:     // state 7
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;    // drives lifts down
    10f0:	80 91 ec 08 	lds	r24, 0x08EC
    10f4:	8f 7e       	andi	r24, 0xEF	; 239
    10f6:	80 93 ec 08 	sts	0x08EC, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    10fa:	80 91 ee 08 	lds	r24, 0x08EE
    10fe:	80 62       	ori	r24, 0x20	; 32
    1100:	80 93 ee 08 	sts	0x08EE, r24
			break;
		//*********************************************
	}
}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	bf 90       	pop	r11
    110a:	af 90       	pop	r10
    110c:	08 95       	ret

0000110e <serial_print_int>:

void serial_print_string_noCRLF(char msg[]){
	serial_send_blocking(USB_COMM, msg, strlen(msg));
}

void serial_print_int(int a){
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <serial_print_int+0xa>
    1118:	00 d0       	rcall	.+0      	; 0x111a <serial_print_int+0xc>
    111a:	0f 92       	push	r0
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
	char msg[5];
	itoa(a, msg, 10);
    1120:	8e 01       	movw	r16, r28
    1122:	0f 5f       	subi	r16, 0xFF	; 255
    1124:	1f 4f       	sbci	r17, 0xFF	; 255
    1126:	b8 01       	movw	r22, r16
    1128:	4a e0       	ldi	r20, 0x0A	; 10
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	0e 94 36 23 	call	0x466c	; 0x466c <itoa>
	serial_print_string(msg);
    1130:	c8 01       	movw	r24, r16
    1132:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
}
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	1f 91       	pop	r17
    1146:	0f 91       	pop	r16
    1148:	08 95       	ret

0000114a <main>:
void serial_print_int(int a);

void serial_print_string_noCRLF(char msg[]);

int main()   
{
    114a:	2f 92       	push	r2
    114c:	3f 92       	push	r3
    114e:	4f 92       	push	r4
    1150:	5f 92       	push	r5
    1152:	6f 92       	push	r6
    1154:	7f 92       	push	r7
    1156:	8f 92       	push	r8
    1158:	9f 92       	push	r9
    115a:	af 92       	push	r10
    115c:	bf 92       	push	r11
    115e:	cf 92       	push	r12
    1160:	df 92       	push	r13
    1162:	ef 92       	push	r14
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	62 97       	sbiw	r28, 0x12	; 18
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently

	bool buttonTriggered = false;	//buttonTriggered is false if it hasn't been triggered, true if it has;
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
	
	fixtureMotorSmallHalfPlate *= stepFactor;
    117e:	80 91 18 04 	lds	r24, 0x0418
    1182:	90 91 19 04 	lds	r25, 0x0419
    1186:	20 91 16 04 	lds	r18, 0x0416
    118a:	30 91 17 04 	lds	r19, 0x0417
    118e:	ac 01       	movw	r20, r24
    1190:	42 9f       	mul	r20, r18
    1192:	c0 01       	movw	r24, r0
    1194:	43 9f       	mul	r20, r19
    1196:	90 0d       	add	r25, r0
    1198:	52 9f       	mul	r21, r18
    119a:	90 0d       	add	r25, r0
    119c:	11 24       	eor	r1, r1
    119e:	90 93 19 04 	sts	0x0419, r25
    11a2:	80 93 18 04 	sts	0x0418, r24
	fixtureMotorBigHalfPlate   *= stepFactor;
    11a6:	80 91 1a 04 	lds	r24, 0x041A
    11aa:	90 91 1b 04 	lds	r25, 0x041B
    11ae:	ac 01       	movw	r20, r24
    11b0:	42 9f       	mul	r20, r18
    11b2:	c0 01       	movw	r24, r0
    11b4:	43 9f       	mul	r20, r19
    11b6:	90 0d       	add	r25, r0
    11b8:	52 9f       	mul	r21, r18
    11ba:	90 0d       	add	r25, r0
    11bc:	11 24       	eor	r1, r1
    11be:	90 93 1b 04 	sts	0x041B, r25
    11c2:	80 93 1a 04 	sts	0x041A, r24
	fixtureMotorDry            *= stepFactor;
    11c6:	80 91 1c 04 	lds	r24, 0x041C
    11ca:	90 91 1d 04 	lds	r25, 0x041D
    11ce:	ac 01       	movw	r20, r24
    11d0:	42 9f       	mul	r20, r18
    11d2:	c0 01       	movw	r24, r0
    11d4:	43 9f       	mul	r20, r19
    11d6:	90 0d       	add	r25, r0
    11d8:	52 9f       	mul	r21, r18
    11da:	90 0d       	add	r25, r0
    11dc:	11 24       	eor	r1, r1
    11de:	90 93 1d 04 	sts	0x041D, r25
    11e2:	80 93 1c 04 	sts	0x041C, r24
	plateLoadMotorLoadPlate    *= stepFactor;
    11e6:	80 91 1e 04 	lds	r24, 0x041E
    11ea:	90 91 1f 04 	lds	r25, 0x041F
    11ee:	ac 01       	movw	r20, r24
    11f0:	42 9f       	mul	r20, r18
    11f2:	c0 01       	movw	r24, r0
    11f4:	43 9f       	mul	r20, r19
    11f6:	90 0d       	add	r25, r0
    11f8:	52 9f       	mul	r21, r18
    11fa:	90 0d       	add	r25, r0
    11fc:	11 24       	eor	r1, r1
    11fe:	90 93 1f 04 	sts	0x041F, r25
    1202:	80 93 1e 04 	sts	0x041E, r24
	plateLoadExtra             *= stepFactor;
    1206:	80 91 20 04 	lds	r24, 0x0420
    120a:	90 91 21 04 	lds	r25, 0x0421
    120e:	ac 01       	movw	r20, r24
    1210:	42 9f       	mul	r20, r18
    1212:	c0 01       	movw	r24, r0
    1214:	43 9f       	mul	r20, r19
    1216:	90 0d       	add	r25, r0
    1218:	52 9f       	mul	r21, r18
    121a:	90 0d       	add	r25, r0
    121c:	11 24       	eor	r1, r1
    121e:	90 93 21 04 	sts	0x0421, r25
    1222:	80 93 20 04 	sts	0x0420, r24
	fixtureLiftExtra           *= stepFactor;
    1226:	80 91 22 04 	lds	r24, 0x0422
    122a:	90 91 23 04 	lds	r25, 0x0423
    122e:	ac 01       	movw	r20, r24
    1230:	42 9f       	mul	r20, r18
    1232:	c0 01       	movw	r24, r0
    1234:	43 9f       	mul	r20, r19
    1236:	90 0d       	add	r25, r0
    1238:	52 9f       	mul	r21, r18
    123a:	90 0d       	add	r25, r0
    123c:	11 24       	eor	r1, r1
    123e:	90 93 23 04 	sts	0x0423, r25
    1242:	80 93 22 04 	sts	0x0422, r24
	fixtureLift2Extra          *= stepFactor;
    1246:	80 91 28 04 	lds	r24, 0x0428
    124a:	90 91 29 04 	lds	r25, 0x0429
    124e:	ac 01       	movw	r20, r24
    1250:	42 9f       	mul	r20, r18
    1252:	c0 01       	movw	r24, r0
    1254:	43 9f       	mul	r20, r19
    1256:	90 0d       	add	r25, r0
    1258:	52 9f       	mul	r21, r18
    125a:	90 0d       	add	r25, r0
    125c:	11 24       	eor	r1, r1
    125e:	90 93 29 04 	sts	0x0429, r25
    1262:	80 93 28 04 	sts	0x0428, r24
	fixtureMotorDry1Extra      *= stepFactor;
    1266:	80 91 24 04 	lds	r24, 0x0424
    126a:	90 91 25 04 	lds	r25, 0x0425
    126e:	ac 01       	movw	r20, r24
    1270:	42 9f       	mul	r20, r18
    1272:	c0 01       	movw	r24, r0
    1274:	43 9f       	mul	r20, r19
    1276:	90 0d       	add	r25, r0
    1278:	52 9f       	mul	r21, r18
    127a:	90 0d       	add	r25, r0
    127c:	11 24       	eor	r1, r1
    127e:	90 93 25 04 	sts	0x0425, r25
    1282:	80 93 24 04 	sts	0x0424, r24
	fixtureMotorDry2Step       *= stepFactor;
    1286:	80 91 26 04 	lds	r24, 0x0426
    128a:	90 91 27 04 	lds	r25, 0x0427
    128e:	ac 01       	movw	r20, r24
    1290:	42 9f       	mul	r20, r18
    1292:	c0 01       	movw	r24, r0
    1294:	43 9f       	mul	r20, r19
    1296:	90 0d       	add	r25, r0
    1298:	52 9f       	mul	r21, r18
    129a:	90 0d       	add	r25, r0
    129c:	11 24       	eor	r1, r1
    129e:	90 93 27 04 	sts	0x0427, r25
    12a2:	80 93 26 04 	sts	0x0426, r24
    12a6:	8f ef       	ldi	r24, 0xFF	; 255
    12a8:	9f ef       	ldi	r25, 0xFF	; 255
    12aa:	98 8b       	std	Y+16, r25	; 0x10
    12ac:	8f 87       	std	Y+15, r24	; 0x0f
    12ae:	1e 86       	std	Y+14, r1	; 0x0e
    
	while(1){		//Repeats the entire program indefinitely (runs maintenance or normal each time)

							//mx holds whether motor x should move: 0 = no, 1 = yes
	plateLoadMotor = 0;		//plate load motor
    12b0:	1b 82       	std	Y+3, r1	; 0x03
    12b2:	1a 82       	std	Y+2, r1	; 0x02
	fixtureMotor = 0;		//fixture motor
    12b4:	1d 82       	std	Y+5, r1	; 0x05
    12b6:	1c 82       	std	Y+4, r1	; 0x04
	brush1Motor = 0;		//brush 1 motor
    12b8:	1f 82       	std	Y+7, r1	; 0x07
    12ba:	1e 82       	std	Y+6, r1	; 0x06
	brush2Motor = 0;		//brush 2 motor
    12bc:	19 86       	std	Y+9, r1	; 0x09
    12be:	18 86       	std	Y+8, r1	; 0x08
	paperTowelMotor = 0; 	//paper towel roller motor
    12c0:	1b 86       	std	Y+11, r1	; 0x0b
    12c2:	1a 86       	std	Y+10, r1	; 0x0a
	//various reference points used by the program to tell how long since an event has occurred
	//the ones with numbers correspond to run mode states, and Five refers to motor 5 (paper towel roller)
	counterRef = 0;
	
	//hold whether or not statements have been printed yet (numbers refer to run mode states)
	print0 = true;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	89 83       	std	Y+1, r24	; 0x01
	print35 = true;
	
	//initialize button variables
	button = 1;						//button = 0 means it has been de-bounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;				//holds the state in the button subroutine where the program is currently
    12c8:	1d 86       	std	Y+13, r1	; 0x0d
    12ca:	1c 86       	std	Y+12, r1	; 0x0c

	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
    12cc:	10 92 ee 08 	sts	0x08EE, r1
	u_motorByte1.motorByte1 = 128;  // initialize motorByte1              **********1 or 128, depending on order**********
    12d0:	80 e8       	ldi	r24, 0x80	; 128
    12d2:	80 93 e9 08 	sts	0x08E9, r24
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
    12d6:	8f ef       	ldi	r24, 0xFF	; 255
    12d8:	80 93 ec 08 	sts	0x08EC, r24
	u_outputByte1.outputByte1 = 15;  // initialize outputByte1
    12dc:	8f e0       	ldi	r24, 0x0F	; 15
    12de:	80 93 ea 08 	sts	0x08EA, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
    12e2:	10 92 e8 08 	sts	0x08E8, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
    12e6:	10 92 eb 08 	sts	0x08EB, r1
	
	//clear();
	serial_print_string(PROGRAM_NAME);
    12ea:	81 e1       	ldi	r24, 0x11	; 17
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
	lcd_goto_xy(0,1);
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
	serial_print_string(REVISION_NUMBER);
    12fa:	82 e2       	ldi	r24, 0x22	; 34
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
	delay_ms(2000);
    1302:	80 ed       	ldi	r24, 0xD0	; 208
    1304:	97 e0       	ldi	r25, 0x07	; 7
    1306:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <delay_ms>
	
	//clear();
	serial_print_string("BEGIN ");
    130a:	8c e2       	ldi	r24, 0x2C	; 44
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
	
	delay_ms(1000);
    1312:	88 ee       	ldi	r24, 0xE8	; 232
    1314:	93 e0       	ldi	r25, 0x03	; 3
    1316:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <delay_ms>

    i2c_init();                                // init I2C interface
    131a:	0e 94 97 00 	call	0x12e	; 0x12e <i2c_init>
	
    serial_print_string("INIT ");
    131e:	83 e3       	ldi	r24, 0x33	; 51
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
    1326:	80 e4       	ldi	r24, 0x40	; 64
    1328:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
    132c:	f8 2e       	mov	r15, r24
	// OR
	//      ret1 = IC_START( IC22 ); 
	//		serial_print_string( "I2C2 ");
	//      serial_print_string( (ret1)? "DOWN":"UP" ); 
	//		i2c_stop();
	if (ret1) {
    132e:	88 23       	and	r24, r24
    1330:	19 f0       	breq	.+6      	; 0x1338 <main+0x1ee>
		serial_print_string("I2C1 DOWN ");
    1332:	89 e3       	ldi	r24, 0x39	; 57
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	02 c0       	rjmp	.+4      	; 0x133c <main+0x1f2>
		}
	else {
		serial_print_string("I2C1 UP");
    1338:	84 e4       	ldi	r24, 0x44	; 68
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
		}	
	i2c_stop();	
    1340:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
	
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
    1344:	82 e4       	ldi	r24, 0x42	; 66
    1346:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
    134a:	18 2f       	mov	r17, r24
	
	if (ret2){
    134c:	88 23       	and	r24, r24
    134e:	19 f0       	breq	.+6      	; 0x1356 <main+0x20c>
		
		serial_print_string("I2C2 DOWN ");
    1350:	8c e4       	ldi	r24, 0x4C	; 76
    1352:	91 e0       	ldi	r25, 0x01	; 1
    1354:	02 c0       	rjmp	.+4      	; 0x135a <main+0x210>
		}
	else{
		serial_print_string("I2C2 UP");
    1356:	87 e5       	ldi	r24, 0x57	; 87
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
		}		
	i2c_stop();
    135e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
    1362:	84 e4       	ldi	r24, 0x44	; 68
    1364:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
    1368:	08 2f       	mov	r16, r24
	if (ret3){
    136a:	88 23       	and	r24, r24
    136c:	19 f0       	breq	.+6      	; 0x1374 <main+0x22a>
		serial_print_string("I2C3 DOWN ");
    136e:	8f e5       	ldi	r24, 0x5F	; 95
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <main+0x22e>
		}		
	else{
		serial_print_string("I2C3 UP");
    1374:	8a e6       	ldi	r24, 0x6A	; 106
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
		}		
	i2c_stop();
    137c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
    
	//clear();
	serial_print_string("START ");
    1380:	82 e7       	ldi	r24, 0x72	; 114
    1382:	91 e0       	ldi	r25, 0x01	; 1
    1384:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
	
	if ( ret1 | ret2 | ret3 ) {			
    1388:	1f 29       	or	r17, r15
    138a:	10 2b       	or	r17, r16
    138c:	61 f0       	breq	.+24     	; 0x13a6 <main+0x25c>
		// Check if all three I2C devices responded properly
        /* failed to issue start condition(s), possibly no device found */
        
		serial_print_string("I2C BAD ");
    138e:	89 e7       	ldi	r24, 0x79	; 121
    1390:	91 e0       	ldi	r25, 0x01	; 1
    1392:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
		i2c_stop();
    1396:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
		serial_print_string("STOP PROG ");
    139a:	82 e8       	ldi	r24, 0x82	; 130
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
    13a2:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <main+0x18d8>
    }
	else {
		serial_print_string("I2C OK ");
    13a6:	8d e8       	ldi	r24, 0x8D	; 141
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
        /* issuing start conditions ok, devices accessible */
		serial_print_string("BINIT ");
    13ae:	85 e9       	ldi	r24, 0x95	; 149
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
    13b6:	80 e4       	ldi	r24, 0x40	; 64
    13b8:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
		i2c_write(0x6);
    13bc:	86 e0       	ldi	r24, 0x06	; 6
    13be:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(0x0);
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(0x0);
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_stop();
    13ce:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

		i2c_start(I2C1+I2C_WRITE);
    13d2:	80 e4       	ldi	r24, 0x40	; 64
    13d4:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
		i2c_write(0x2);
    13d8:	82 e0       	ldi	r24, 0x02	; 2
    13da:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    13de:	80 91 ee 08 	lds	r24, 0x08EE
    13e2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    13e6:	80 91 e9 08 	lds	r24, 0x08E9
    13ea:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_stop();
    13ee:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

        i2c_start(I2C2+I2C_WRITE);       //moved above to make sure right outputs are available
    13f2:	82 e4       	ldi	r24, 0x42	; 66
    13f4:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
        i2c_write(0x2);
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
        i2c_write(u_outputByte0.outputByte0);
    13fe:	80 91 ec 08 	lds	r24, 0x08EC
    1402:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
        i2c_write(u_outputByte1.outputByte1);
    1406:	80 91 ea 08 	lds	r24, 0x08EA
    140a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
        i2c_stop();
    140e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
    1412:	82 e4       	ldi	r24, 0x42	; 66
    1414:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
		i2c_write(0x6);
    1418:	86 e0       	ldi	r24, 0x06	; 6
    141a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(0x0);
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(0x0);
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_stop();
    142a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

		
		//Registers default to input, so I2C3 is fine already

		u_motorByte1.bits_in_motorByte1.enableAll = 0;	//Enables all motor drivers after startup
    142e:	80 91 e9 08 	lds	r24, 0x08E9
    1432:	8f 77       	andi	r24, 0x7F	; 127
    1434:	80 93 e9 08 	sts	0x08E9, r24
		i2c_start(I2C1+I2C_WRITE);
    1438:	80 e4       	ldi	r24, 0x40	; 64
    143a:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
		i2c_write(0x2);
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    1444:	80 91 ee 08 	lds	r24, 0x08EE
    1448:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    144c:	80 91 e9 08 	lds	r24, 0x08E9
    1450:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_stop();
    1454:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>


		delay_ms(1000);
    1458:	88 ee       	ldi	r24, 0xE8	; 232
    145a:	93 e0       	ldi	r25, 0x03	; 3
    145c:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <delay_ms>
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
    1460:	8c e9       	ldi	r24, 0x9C	; 156
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
		int selection = !is_digital_input_high(IO_D3);
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    146e:	00 e0       	ldi	r16, 0x00	; 0
    1470:	10 e0       	ldi	r17, 0x00	; 0
    1472:	88 23       	and	r24, r24
    1474:	11 f4       	brne	.+4      	; 0x147a <main+0x330>
    1476:	01 e0       	ldi	r16, 0x01	; 1
    1478:	10 e0       	ldi	r17, 0x00	; 0
    147a:	ee 24       	eor	r14, r14
    147c:	ff 24       	eor	r15, r15
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			if(selection != is_digital_input_high(IO_D3)){
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	08 17       	cp	r16, r24
    1488:	19 07       	cpc	r17, r25
    148a:	49 f0       	breq	.+18     	; 0x149e <main+0x354>
				if(!selection){
    148c:	01 2b       	or	r16, r17
    148e:	19 f4       	brne	.+6      	; 0x1496 <main+0x34c>
					serial_print_string("DEBUG");
    1490:	8c ea       	ldi	r24, 0xAC	; 172
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	02 c0       	rjmp	.+4      	; 0x149a <main+0x350>
				}
				else{
					serial_print_string("RUN");
    1496:	82 eb       	ldi	r24, 0xB2	; 178
    1498:	91 e0       	ldi	r25, 0x01	; 1
    149a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
				}
			}
			selection = is_digital_input_high(IO_D3);
    149e:	83 e0       	ldi	r24, 0x03	; 3
    14a0:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    14a4:	08 2f       	mov	r16, r24
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    14a6:	c7 01       	movw	r24, r14
    14a8:	be 01       	movw	r22, r28
    14aa:	64 5f       	subi	r22, 0xF4	; 244
    14ac:	7f 4f       	sbci	r23, 0xFF	; 255
    14ae:	0e 94 2f 04 	call	0x85e	; 0x85e <button_debounce>
    14b2:	18 2f       	mov	r17, r24
			serial_check(); counter++;
    14b4:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <serial_check>
void time_reset(void);

// This is inline for efficiency:
static inline void delay_us(unsigned int microseconds)
{
  __asm__ volatile (
    14b8:	80 91 14 04 	lds	r24, 0x0414
    14bc:	90 91 15 04 	lds	r25, 0x0415
    14c0:	6f 93       	push	r22
    14c2:	64 e0       	ldi	r22, 0x04	; 4
    14c4:	6a 95       	dec	r22
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <main+0x37a>
    14c8:	6f 91       	pop	r22
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	c9 f7       	brne	.-14     	; 0x14c0 <main+0x376>
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
		int selection = !is_digital_input_high(IO_D3);
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    14ce:	11 23       	and	r17, r17
    14d0:	29 f4       	brne	.+10     	; 0x14dc <main+0x392>
				}
				else{
					serial_print_string("RUN");
				}
			}
			selection = is_digital_input_high(IO_D3);
    14d2:	10 e0       	ldi	r17, 0x00	; 0
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
			serial_check(); counter++;
    14d4:	08 94       	sec
    14d6:	e1 1c       	adc	r14, r1
    14d8:	f1 1c       	adc	r15, r1
    14da:	d1 cf       	rjmp	.-94     	; 0x147e <main+0x334>
		buttonTriggered = false;
		counter = 0;
		//clear();


		if(is_digital_input_high(IO_D3))							//Tests if the switch is set to Maintenance Mode
    14dc:	83 e0       	ldi	r24, 0x03	; 3
    14de:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    14e2:	88 23       	and	r24, r24
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <main+0x39e>
    14e6:	52 c4       	rjmp	.+2212   	; 0x1d8c <main+0xc42>
		{
			serial_print_string("DEBUG");
    14e8:	8c ea       	ldi	r24, 0xAC	; 172
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
			delay_ms(1000);
    14f0:	88 ee       	ldi	r24, 0xE8	; 232
    14f2:	93 e0       	ldi	r25, 0x03	; 3
    14f4:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <delay_ms>
    14f8:	88 24       	eor	r8, r8
    14fa:	99 24       	eor	r9, r9
    14fc:	66 24       	eor	r6, r6
    14fe:	77 24       	eor	r7, r7
    1500:	44 24       	eor	r4, r4
    1502:	55 24       	eor	r5, r5
    1504:	bb 24       	eor	r11, r11
    1506:	b3 94       	inc	r11
    1508:	22 24       	eor	r2, r2
    150a:	2a 94       	dec	r2
    150c:	32 2c       	mov	r3, r2
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    150e:	84 e4       	ldi	r24, 0x44	; 68
    1510:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				i2c_write(0x0);								// write command byte
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    151a:	85 e4       	ldi	r24, 0x45	; 69
    151c:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1520:	0e 94 08 01 	call	0x210	; 0x210 <i2c_readAck>
    1524:	80 93 e8 08 	sts	0x08E8, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1528:	0e 94 12 01 	call	0x224	; 0x224 <i2c_readNak>
    152c:	80 93 eb 08 	sts	0x08EB, r24
  	 	     	i2c_stop();								// set stop condition = release bus 		
    1530:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1534:	c3 01       	movw	r24, r6
    1536:	be 01       	movw	r22, r28
    1538:	64 5f       	subi	r22, 0xF4	; 244
    153a:	7f 4f       	sbci	r23, 0xFF	; 255
    153c:	0e 94 2f 04 	call	0x85e	; 0x85e <button_debounce>
    1540:	18 2f       	mov	r17, r24
							Output 			--     starts testing each output individually and ends after testing all outputs
							Motor			--     starts testing each motor individually and ends after testing all motors
							Multi motor		--     starts testing each the fixture motor with each of the brush motors

				*/
				if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != INPUT){
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1548:	88 23       	and	r24, r24
    154a:	c1 f4       	brne	.+48     	; 0x157c <main+0x432>
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1552:	88 23       	and	r24, r24
    1554:	99 f4       	brne	.+38     	; 0x157c <main+0x432>
    1556:	21 14       	cp	r2, r1
    1558:	31 04       	cpc	r3, r1
    155a:	81 f0       	breq	.+32     	; 0x157c <main+0x432>
					state = S0;
					submode = INPUT;
					//clear();
					serial_print_string("INPUTS ");
    155c:	86 eb       	ldi	r24, 0xB6	; 182
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
					lcd_goto_xy(0,1);
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
    156c:	88 24       	eor	r8, r8
    156e:	99 24       	eor	r9, r9
    1570:	91 e0       	ldi	r25, 0x01	; 1
    1572:	9e 87       	std	Y+14, r25	; 0x0e
    1574:	bb 24       	eor	r11, r11
    1576:	b3 94       	inc	r11
    1578:	22 24       	eor	r2, r2
    157a:	33 24       	eor	r3, r3
					printVar = true;
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != OUTPUT){
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1582:	88 23       	and	r24, r24
    1584:	d9 f0       	breq	.+54     	; 0x15bc <main+0x472>
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    158c:	88 23       	and	r24, r24
    158e:	b1 f4       	brne	.+44     	; 0x15bc <main+0x472>
    1590:	21 e0       	ldi	r18, 0x01	; 1
    1592:	22 16       	cp	r2, r18
    1594:	31 04       	cpc	r3, r1
    1596:	91 f0       	breq	.+36     	; 0x15bc <main+0x472>
					state = O0_ON;
					submode = OUTPUT;
					//clear();
					serial_print_string("OUTPUTS");
    1598:	8e eb       	ldi	r24, 0xBE	; 190
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
					lcd_goto_xy(0,1);
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	61 e0       	ldi	r22, 0x01	; 1
    15a4:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
    15a8:	b8 e0       	ldi	r27, 0x08	; 8
    15aa:	8b 2e       	mov	r8, r27
    15ac:	91 2c       	mov	r9, r1
    15ae:	31 e0       	ldi	r19, 0x01	; 1
    15b0:	3e 87       	std	Y+14, r19	; 0x0e
    15b2:	bb 24       	eor	r11, r11
    15b4:	b3 94       	inc	r11
    15b6:	a1 e0       	ldi	r26, 0x01	; 1
    15b8:	2a 2e       	mov	r2, r26
    15ba:	31 2c       	mov	r3, r1
					printVar = true;
					switched = true;
				}
				if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MOTOR){
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    15c2:	88 23       	and	r24, r24
    15c4:	01 f5       	brne	.+64     	; 0x1606 <main+0x4bc>
    15c6:	82 e0       	ldi	r24, 0x02	; 2
    15c8:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    15cc:	88 23       	and	r24, r24
    15ce:	d9 f0       	breq	.+54     	; 0x1606 <main+0x4bc>
    15d0:	42 e0       	ldi	r20, 0x02	; 2
    15d2:	24 16       	cp	r2, r20
    15d4:	31 04       	cpc	r3, r1
    15d6:	b9 f0       	breq	.+46     	; 0x1606 <main+0x4bc>
					state = M1_F;
					submode = MOTOR;
					//clear();
					serial_print_string("MOTORS ");
    15d8:	86 ec       	ldi	r24, 0xC6	; 198
    15da:	91 e0       	ldi	r25, 0x01	; 1
    15dc:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
					lcd_goto_xy(0,1);
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	61 e0       	ldi	r22, 0x01	; 1
    15e4:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    15e8:	80 91 ee 08 	lds	r24, 0x08EE
    15ec:	84 60       	ori	r24, 0x04	; 4
    15ee:	80 93 ee 08 	sts	0x08EE, r24
    15f2:	f4 e2       	ldi	r31, 0x24	; 36
    15f4:	8f 2e       	mov	r8, r31
    15f6:	91 2c       	mov	r9, r1
    15f8:	51 e0       	ldi	r21, 0x01	; 1
    15fa:	5e 87       	std	Y+14, r21	; 0x0e
    15fc:	bb 24       	eor	r11, r11
    15fe:	b3 94       	inc	r11
    1600:	e2 e0       	ldi	r30, 0x02	; 2
    1602:	2e 2e       	mov	r2, r30
    1604:	31 2c       	mov	r3, r1
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MULTI){
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    160c:	88 23       	and	r24, r24
    160e:	21 f1       	breq	.+72     	; 0x1658 <main+0x50e>
    1610:	82 e0       	ldi	r24, 0x02	; 2
    1612:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1616:	88 23       	and	r24, r24
    1618:	f9 f0       	breq	.+62     	; 0x1658 <main+0x50e>
    161a:	83 e0       	ldi	r24, 0x03	; 3
    161c:	28 16       	cp	r2, r24
    161e:	31 04       	cpc	r3, r1
    1620:	d9 f0       	breq	.+54     	; 0x1658 <main+0x50e>
					state = M2_AND_M3;
					submode = MULTI;
					//clear();
					serial_print_string("MULTI MOTOR");
    1622:	8e ec       	ldi	r24, 0xCE	; 206
    1624:	91 e0       	ldi	r25, 0x01	; 1
    1626:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
					lcd_goto_xy(0,1);
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1632:	80 91 ee 08 	lds	r24, 0x08EE
    1636:	80 62       	ori	r24, 0x20	; 32
    1638:	80 93 ee 08 	sts	0x08EE, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    163c:	80 91 e9 08 	lds	r24, 0x08E9
    1640:	81 60       	ori	r24, 0x01	; 1
    1642:	80 93 e9 08 	sts	0x08E9, r24
    1646:	7e e2       	ldi	r23, 0x2E	; 46
    1648:	87 2e       	mov	r8, r23
    164a:	91 2c       	mov	r9, r1
    164c:	bb 24       	eor	r11, r11
    164e:	b3 94       	inc	r11
    1650:	63 e0       	ldi	r22, 0x03	; 3
    1652:	26 2e       	mov	r2, r22
    1654:	31 2c       	mov	r3, r1
    1656:	03 c0       	rjmp	.+6      	; 0x165e <main+0x514>
					switched = true;
				}
				if(switched){
    1658:	9e 85       	ldd	r25, Y+14	; 0x0e
    165a:	99 23       	and	r25, r25
    165c:	c9 f0       	breq	.+50     	; 0x1690 <main+0x546>
					plateLoadMotor = 0;
    165e:	1b 82       	std	Y+3, r1	; 0x03
    1660:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    1662:	1d 82       	std	Y+5, r1	; 0x05
    1664:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    1666:	1f 82       	std	Y+7, r1	; 0x07
    1668:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    166a:	19 86       	std	Y+9, r1	; 0x09
    166c:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    166e:	1b 86       	std	Y+11, r1	; 0x0b
    1670:	1a 86       	std	Y+10, r1	; 0x0a
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
    1672:	8f ef       	ldi	r24, 0xFF	; 255
    1674:	80 93 ec 08 	sts	0x08EC, r24
					u_outputByte1.outputByte1 = 15;  // reset outputByte1
    1678:	8f e0       	ldi	r24, 0x0F	; 15
    167a:	80 93 ea 08 	sts	0x08EA, r24
					if(submode != MOTOR && submode != MULTI){
    167e:	c1 01       	movw	r24, r2
    1680:	02 97       	sbiw	r24, 0x02	; 2
    1682:	02 97       	sbiw	r24, 0x02	; 2
    1684:	20 f0       	brcs	.+8      	; 0x168e <main+0x544>
						u_motorByte0.motorByte0 = 0;	  // reset motorByte0
    1686:	10 92 ee 08 	sts	0x08EE, r1
						u_motorByte1.motorByte1 = 0;	  // reset motorByte1
    168a:	10 92 e9 08 	sts	0x08E9, r1
    168e:	1e 86       	std	Y+14, r1	; 0x0e
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
    1690:	11 23       	and	r17, r17
    1692:	09 f4       	brne	.+2      	; 0x1696 <main+0x54c>
    1694:	c6 c0       	rjmp	.+396    	; 0x1822 <main+0x6d8>
					if(state <= S7){				//if it's doing the sensors
    1696:	28 e0       	ldi	r18, 0x08	; 8
    1698:	82 16       	cp	r8, r18
    169a:	91 04       	cpc	r9, r1
    169c:	74 f4       	brge	.+28     	; 0x16ba <main+0x570>
						lastVal = -1;
						lcd_goto_xy(0,1);
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
						buttonTriggered = false;
						state ++;
    16a6:	08 94       	sec
    16a8:	81 1c       	adc	r8, r1
    16aa:	91 1c       	adc	r9, r1
						counterRef = counter;
						printVar = true;
						if(state == S7 + 1){		//accounts for end of maintenance mode after sensors
    16ac:	38 e0       	ldi	r19, 0x08	; 8
    16ae:	83 16       	cp	r8, r19
    16b0:	91 04       	cpc	r9, r1
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <main+0x56c>
    16b4:	ad c0       	rjmp	.+346    	; 0x1810 <main+0x6c6>
    16b6:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <main+0x18e4>
							//clear();
							state = DONEM;
						}
					}
					else if(state <= O13_OFF){		//if it's doing the outputs
    16ba:	44 e2       	ldi	r20, 0x24	; 36
    16bc:	84 16       	cp	r8, r20
    16be:	91 04       	cpc	r9, r1
    16c0:	cc f4       	brge	.+50     	; 0x16f4 <main+0x5aa>
						if(state % 2 == 0){			//current state is an 'on' state
    16c2:	80 fc       	sbrc	r8, 0
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <main+0x58e>
							lcd_goto_xy(13,1);
    16c6:	8d e0       	ldi	r24, 0x0D	; 13
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
							serial_print_string("OFF");
    16ce:	8a ed       	ldi	r24, 0xDA	; 218
    16d0:	91 e0       	ldi	r25, 0x01	; 1
    16d2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <main+0x596>
						}
						else{						//current state is an 'off' state
							lcd_goto_xy(0,1);
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	61 e0       	ldi	r22, 0x01	; 1
    16dc:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
						}
						buttonTriggered = false;
						state ++;
    16e0:	08 94       	sec
    16e2:	81 1c       	adc	r8, r1
    16e4:	91 1c       	adc	r9, r1
						counterRef = counter;
						printVar = true;
						if(state == O13_OFF + 1){	//accounts for end of maintenance mode after outputs
    16e6:	54 e2       	ldi	r21, 0x24	; 36
    16e8:	85 16       	cp	r8, r21
    16ea:	91 04       	cpc	r9, r1
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <main+0x5a6>
    16ee:	96 c0       	rjmp	.+300    	; 0x181c <main+0x6d2>
    16f0:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <main+0x18ec>
    16f4:	84 01       	movw	r16, r8
    16f6:	0f 5f       	subi	r16, 0xFF	; 255
    16f8:	1f 4f       	sbci	r17, 0xFF	; 255
							//clear();
							state = DONEM;
						}
					}
					else if(state <= M5_B){							//if it's doing the motors
    16fa:	8e e2       	ldi	r24, 0x2E	; 46
    16fc:	88 16       	cp	r8, r24
    16fe:	91 04       	cpc	r9, r1
    1700:	0c f0       	brlt	.+2      	; 0x1704 <main+0x5ba>
    1702:	5d c0       	rjmp	.+186    	; 0x17be <main+0x674>
						buttonTriggered = false;
						state ++;
						counterRef = counter;
						printVar = true;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
    1704:	80 fc       	sbrc	r8, 0
    1706:	09 c0       	rjmp	.+18     	; 0x171a <main+0x5d0>
							lcd_goto_xy(11,1);
    1708:	8b e0       	ldi	r24, 0x0B	; 11
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
							serial_print_string("BACK ");
    1710:	8e ed       	ldi	r24, 0xDE	; 222
    1712:	91 e0       	ldi	r25, 0x01	; 1
    1714:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
    1718:	13 c0       	rjmp	.+38     	; 0x1740 <main+0x5f6>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
    171a:	0a 32       	cpi	r16, 0x2A	; 42
    171c:	11 05       	cpc	r17, r1
    171e:	71 f1       	breq	.+92     	; 0x177c <main+0x632>
    1720:	0b 32       	cpi	r16, 0x2B	; 43
    1722:	11 05       	cpc	r17, r1
    1724:	3c f4       	brge	.+14     	; 0x1734 <main+0x5ea>
    1726:	06 32       	cpi	r16, 0x26	; 38
    1728:	11 05       	cpc	r17, r1
    172a:	61 f0       	breq	.+24     	; 0x1744 <main+0x5fa>
    172c:	08 32       	cpi	r16, 0x28	; 40
    172e:	11 05       	cpc	r17, r1
    1730:	39 f4       	brne	.+14     	; 0x1740 <main+0x5f6>
    1732:	14 c0       	rjmp	.+40     	; 0x175c <main+0x612>
    1734:	0c 32       	cpi	r16, 0x2C	; 44
    1736:	11 05       	cpc	r17, r1
    1738:	69 f1       	breq	.+90     	; 0x1794 <main+0x64a>
    173a:	0e 32       	cpi	r16, 0x2E	; 46
    173c:	11 05       	cpc	r17, r1
    173e:	b1 f1       	breq	.+108    	; 0x17ac <main+0x662>
    1740:	48 01       	movw	r8, r16
    1742:	6c c0       	rjmp	.+216    	; 0x181c <main+0x6d2>
								case M1_B + 1:
									lcd_goto_xy(0,1);
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	61 e0       	ldi	r22, 0x01	; 1
    1748:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    174c:	80 91 ee 08 	lds	r24, 0x08EE
    1750:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1752:	80 62       	ori	r24, 0x20	; 32
    1754:	80 93 ee 08 	sts	0x08EE, r24
    1758:	23 01       	movw	r4, r6
    175a:	55 c2       	rjmp	.+1194   	; 0x1c06 <main+0xabc>
									break;
								case M2_B + 1:
									lcd_goto_xy(0,1);
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	61 e0       	ldi	r22, 0x01	; 1
    1760:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1764:	80 91 ee 08 	lds	r24, 0x08EE
    1768:	8f 7d       	andi	r24, 0xDF	; 223
    176a:	80 93 ee 08 	sts	0x08EE, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    176e:	80 91 e9 08 	lds	r24, 0x08E9
    1772:	81 60       	ori	r24, 0x01	; 1
    1774:	80 93 e9 08 	sts	0x08E9, r24
    1778:	23 01       	movw	r4, r6
    177a:	65 c2       	rjmp	.+1226   	; 0x1c46 <main+0xafc>
									break;
								case M3_B + 1:
									lcd_goto_xy(0,1);
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	61 e0       	ldi	r22, 0x01	; 1
    1780:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1784:	80 91 e9 08 	lds	r24, 0x08E9
    1788:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    178a:	88 60       	ori	r24, 0x08	; 8
    178c:	80 93 e9 08 	sts	0x08E9, r24
    1790:	23 01       	movw	r4, r6
    1792:	79 c2       	rjmp	.+1266   	; 0x1c86 <main+0xb3c>
									break;
								case M4_B + 1:
									lcd_goto_xy(0,1);
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	61 e0       	ldi	r22, 0x01	; 1
    1798:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    179c:	80 91 e9 08 	lds	r24, 0x08E9
    17a0:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    17a2:	80 64       	ori	r24, 0x40	; 64
    17a4:	80 93 e9 08 	sts	0x08E9, r24
    17a8:	23 01       	movw	r4, r6
    17aa:	8d c2       	rjmp	.+1306   	; 0x1cc6 <main+0xb7c>
									break;
								case M5_B + 1:
									//clear();
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    17ac:	80 91 e9 08 	lds	r24, 0x08E9
    17b0:	8f 7b       	andi	r24, 0xBF	; 191
    17b2:	80 93 e9 08 	sts	0x08E9, r24
									state = DONEM;
									paperTowelMotor = 0;
    17b6:	1b 86       	std	Y+11, r1	; 0x0b
    17b8:	1a 86       	std	Y+10, r1	; 0x0a
    17ba:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <main+0x18ec>
							}
						}
					}
					else{
						buttonTriggered = false;
						state ++;
    17be:	48 01       	movw	r8, r16
						counterRef = counter;
						printVar = true;
						switch(state){
    17c0:	0f 32       	cpi	r16, 0x2F	; 47
    17c2:	11 05       	cpc	r17, r1
    17c4:	21 f0       	breq	.+8      	; 0x17ce <main+0x684>
    17c6:	00 33       	cpi	r16, 0x30	; 48
    17c8:	11 05       	cpc	r17, r1
    17ca:	41 f5       	brne	.+80     	; 0x181c <main+0x6d2>
    17cc:	11 c0       	rjmp	.+34     	; 0x17f0 <main+0x6a6>
							case M2_AND_M3 + 1:
								lcd_goto_xy(0,1);
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	61 e0       	ldi	r22, 0x01	; 1
    17d2:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
								u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    17d6:	90 91 e9 08 	lds	r25, 0x08E9
    17da:	9e 7f       	andi	r25, 0xFE	; 254
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    17dc:	80 91 ee 08 	lds	r24, 0x08EE
    17e0:	80 62       	ori	r24, 0x20	; 32
    17e2:	80 93 ee 08 	sts	0x08EE, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    17e6:	98 60       	ori	r25, 0x08	; 8
    17e8:	90 93 e9 08 	sts	0x08E9, r25
    17ec:	23 01       	movw	r4, r6
    17ee:	98 c2       	rjmp	.+1328   	; 0x1d20 <main+0xbd6>
								break;
							case M2_AND_M4 + 1:
								//clear();
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    17f0:	80 91 ee 08 	lds	r24, 0x08EE
    17f4:	8f 7d       	andi	r24, 0xDF	; 223
    17f6:	80 93 ee 08 	sts	0x08EE, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    17fa:	80 91 e9 08 	lds	r24, 0x08E9
    17fe:	87 7f       	andi	r24, 0xF7	; 247
    1800:	80 93 e9 08 	sts	0x08E9, r24
								state = DONEM;
								fixtureMotor = 0;
    1804:	1d 82       	std	Y+5, r1	; 0x05
    1806:	1c 82       	std	Y+4, r1	; 0x04
								brush2Motor = 0;
    1808:	19 86       	std	Y+9, r1	; 0x09
    180a:	18 86       	std	Y+8, r1	; 0x08
    180c:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <main+0x18ec>
    1810:	23 01       	movw	r4, r6
    1812:	4f ef       	ldi	r20, 0xFF	; 255
    1814:	5f ef       	ldi	r21, 0xFF	; 255
    1816:	58 8b       	std	Y+16, r21	; 0x10
    1818:	4f 87       	std	Y+15, r20	; 0x0f
    181a:	01 c0       	rjmp	.+2      	; 0x181e <main+0x6d4>
    181c:	23 01       	movw	r4, r6
    181e:	bb 24       	eor	r11, r11
    1820:	b3 94       	inc	r11
						}
					}
				}

				//state actions
				switch (state) {
    1822:	f4 01       	movw	r30, r8
    1824:	e0 33       	cpi	r30, 0x30	; 48
    1826:	f1 05       	cpc	r31, r1
    1828:	08 f0       	brcs	.+2      	; 0x182c <main+0x6e2>
    182a:	8c c2       	rjmp	.+1304   	; 0x1d44 <main+0xbfa>
    182c:	ea 5b       	subi	r30, 0xBA	; 186
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	ee 0f       	add	r30, r30
    1832:	ff 1f       	adc	r31, r31
    1834:	05 90       	lpm	r0, Z+
    1836:	f4 91       	lpm	r31, Z+
    1838:	e0 2d       	mov	r30, r0
    183a:	09 94       	ijmp
					case S0:
						if(printVar){
    183c:	bb 20       	and	r11, r11
    183e:	21 f0       	breq	.+8      	; 0x1848 <main+0x6fe>
							serial_print_string("SENSOR 1");
    1840:	84 ee       	ldi	r24, 0xE4	; 228
    1842:	91 e0       	ldi	r25, 0x01	; 1
    1844:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1848:	8f e0       	ldi	r24, 0x0F	; 15
    184a:	61 e0       	ldi	r22, 0x01	; 1
    184c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.plate){
    1850:	80 91 e8 08 	lds	r24, 0x08E8
    1854:	81 70       	andi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	2f 85       	ldd	r18, Y+15	; 0x0f
    185a:	38 89       	ldd	r19, Y+16	; 0x10
    185c:	28 17       	cp	r18, r24
    185e:	39 07       	cpc	r19, r25
    1860:	09 f4       	brne	.+2      	; 0x1864 <main+0x71a>
    1862:	6f c2       	rjmp	.+1246   	; 0x1d42 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.plate);
    1864:	0e 94 87 08 	call	0x110e	; 0x110e <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.plate;
    1868:	80 91 e8 08 	lds	r24, 0x08E8
    186c:	b0 c0       	rjmp	.+352    	; 0x19ce <main+0x884>
						}							
						break;
					case S1:
						if(printVar){
    186e:	bb 20       	and	r11, r11
    1870:	21 f0       	breq	.+8      	; 0x187a <main+0x730>
							serial_print_string("SENSOR 2");
    1872:	8d ee       	ldi	r24, 0xED	; 237
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    187a:	8f e0       	ldi	r24, 0x0F	; 15
    187c:	61 e0       	ldi	r22, 0x01	; 1
    187e:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureHome){
    1882:	80 91 e8 08 	lds	r24, 0x08E8
    1886:	86 95       	lsr	r24
    1888:	81 70       	andi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	2f 85       	ldd	r18, Y+15	; 0x0f
    188e:	38 89       	ldd	r19, Y+16	; 0x10
    1890:	28 17       	cp	r18, r24
    1892:	39 07       	cpc	r19, r25
    1894:	09 f4       	brne	.+2      	; 0x1898 <main+0x74e>
    1896:	55 c2       	rjmp	.+1194   	; 0x1d42 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureHome);
    1898:	0e 94 87 08 	call	0x110e	; 0x110e <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureHome;
    189c:	80 91 e8 08 	lds	r24, 0x08E8
    18a0:	86 95       	lsr	r24
    18a2:	95 c0       	rjmp	.+298    	; 0x19ce <main+0x884>
						}							
						break;
					case S2:
						if(printVar){
    18a4:	bb 20       	and	r11, r11
    18a6:	21 f0       	breq	.+8      	; 0x18b0 <main+0x766>
							serial_print_string("SENSOR 3");
    18a8:	86 ef       	ldi	r24, 0xF6	; 246
    18aa:	91 e0       	ldi	r25, 0x01	; 1
    18ac:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    18b0:	8f e0       	ldi	r24, 0x0F	; 15
    18b2:	61 e0       	ldi	r22, 0x01	; 1
    18b4:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureLift){
    18b8:	80 91 e8 08 	lds	r24, 0x08E8
    18bc:	86 95       	lsr	r24
    18be:	86 95       	lsr	r24
    18c0:	81 70       	andi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	2f 85       	ldd	r18, Y+15	; 0x0f
    18c6:	38 89       	ldd	r19, Y+16	; 0x10
    18c8:	28 17       	cp	r18, r24
    18ca:	39 07       	cpc	r19, r25
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <main+0x786>
    18ce:	39 c2       	rjmp	.+1138   	; 0x1d42 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureLift);
    18d0:	0e 94 87 08 	call	0x110e	; 0x110e <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureLift;
    18d4:	80 91 e8 08 	lds	r24, 0x08E8
    18d8:	86 95       	lsr	r24
    18da:	86 95       	lsr	r24
    18dc:	78 c0       	rjmp	.+240    	; 0x19ce <main+0x884>
						}							
						break;
					case S3:
						if(printVar){
    18de:	bb 20       	and	r11, r11
    18e0:	21 f0       	breq	.+8      	; 0x18ea <main+0x7a0>
							serial_print_string("SENSOR 4");
    18e2:	8f ef       	ldi	r24, 0xFF	; 255
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    18ea:	8f e0       	ldi	r24, 0x0F	; 15
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixturePlate){
    18f2:	80 91 e8 08 	lds	r24, 0x08E8
    18f6:	86 95       	lsr	r24
    18f8:	86 95       	lsr	r24
    18fa:	86 95       	lsr	r24
    18fc:	81 70       	andi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	2f 85       	ldd	r18, Y+15	; 0x0f
    1902:	38 89       	ldd	r19, Y+16	; 0x10
    1904:	28 17       	cp	r18, r24
    1906:	39 07       	cpc	r19, r25
    1908:	09 f4       	brne	.+2      	; 0x190c <main+0x7c2>
    190a:	1b c2       	rjmp	.+1078   	; 0x1d42 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixturePlate);
    190c:	0e 94 87 08 	call	0x110e	; 0x110e <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixturePlate;
    1910:	80 91 e8 08 	lds	r24, 0x08E8
    1914:	86 95       	lsr	r24
    1916:	86 95       	lsr	r24
    1918:	86 95       	lsr	r24
    191a:	59 c0       	rjmp	.+178    	; 0x19ce <main+0x884>
						}							
						break;
					case S4:
						if(printVar){
    191c:	bb 20       	and	r11, r11
    191e:	21 f0       	breq	.+8      	; 0x1928 <main+0x7de>
							serial_print_string("SENSOR 5");
    1920:	88 e0       	ldi	r24, 0x08	; 8
    1922:	92 e0       	ldi	r25, 0x02	; 2
    1924:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1928:	8f e0       	ldi	r24, 0x0F	; 15
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush1){
    1930:	80 91 e8 08 	lds	r24, 0x08E8
    1934:	82 95       	swap	r24
    1936:	81 70       	andi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	2f 85       	ldd	r18, Y+15	; 0x0f
    193c:	38 89       	ldd	r19, Y+16	; 0x10
    193e:	28 17       	cp	r18, r24
    1940:	39 07       	cpc	r19, r25
    1942:	09 f4       	brne	.+2      	; 0x1946 <main+0x7fc>
    1944:	fe c1       	rjmp	.+1020   	; 0x1d42 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
    1946:	0e 94 87 08 	call	0x110e	; 0x110e <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush1;
    194a:	80 91 e8 08 	lds	r24, 0x08E8
    194e:	82 95       	swap	r24
    1950:	8f 70       	andi	r24, 0x0F	; 15
    1952:	3d c0       	rjmp	.+122    	; 0x19ce <main+0x884>
						}							
						break;
					case S5:
						if(printVar){
    1954:	bb 20       	and	r11, r11
    1956:	21 f0       	breq	.+8      	; 0x1960 <main+0x816>
							serial_print_string("SENSOR 6");
    1958:	81 e1       	ldi	r24, 0x11	; 17
    195a:	92 e0       	ldi	r25, 0x02	; 2
    195c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1960:	8f e0       	ldi	r24, 0x0F	; 15
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush2){
    1968:	80 91 e8 08 	lds	r24, 0x08E8
    196c:	82 95       	swap	r24
    196e:	86 95       	lsr	r24
    1970:	81 70       	andi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	2f 85       	ldd	r18, Y+15	; 0x0f
    1976:	38 89       	ldd	r19, Y+16	; 0x10
    1978:	28 17       	cp	r18, r24
    197a:	39 07       	cpc	r19, r25
    197c:	09 f4       	brne	.+2      	; 0x1980 <main+0x836>
    197e:	e1 c1       	rjmp	.+962    	; 0x1d42 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
    1980:	0e 94 87 08 	call	0x110e	; 0x110e <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush2;
    1984:	80 91 e8 08 	lds	r24, 0x08E8
    1988:	82 95       	swap	r24
    198a:	86 95       	lsr	r24
    198c:	87 70       	andi	r24, 0x07	; 7
    198e:	1f c0       	rjmp	.+62     	; 0x19ce <main+0x884>
						}							
						break;
					case S6:
						if(printVar){
    1990:	bb 20       	and	r11, r11
    1992:	21 f0       	breq	.+8      	; 0x199c <main+0x852>
							serial_print_string("SENSOR 7");
    1994:	8a e1       	ldi	r24, 0x1A	; 26
    1996:	92 e0       	ldi	r25, 0x02	; 2
    1998:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    199c:	8f e0       	ldi	r24, 0x0F	; 15
    199e:	61 e0       	ldi	r22, 0x01	; 1
    19a0:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry1){
    19a4:	80 91 e8 08 	lds	r24, 0x08E8
    19a8:	82 95       	swap	r24
    19aa:	86 95       	lsr	r24
    19ac:	86 95       	lsr	r24
    19ae:	81 70       	andi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	2f 85       	ldd	r18, Y+15	; 0x0f
    19b4:	38 89       	ldd	r19, Y+16	; 0x10
    19b6:	28 17       	cp	r18, r24
    19b8:	39 07       	cpc	r19, r25
    19ba:	09 f4       	brne	.+2      	; 0x19be <main+0x874>
    19bc:	c2 c1       	rjmp	.+900    	; 0x1d42 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry1);
    19be:	0e 94 87 08 	call	0x110e	; 0x110e <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry1;
    19c2:	80 91 e8 08 	lds	r24, 0x08E8
    19c6:	82 95       	swap	r24
    19c8:	86 95       	lsr	r24
    19ca:	86 95       	lsr	r24
    19cc:	83 70       	andi	r24, 0x03	; 3
    19ce:	81 70       	andi	r24, 0x01	; 1
    19d0:	1d c0       	rjmp	.+58     	; 0x1a0c <main+0x8c2>
						}							
						break;
					case S7:
						if(printVar){
    19d2:	bb 20       	and	r11, r11
    19d4:	21 f0       	breq	.+8      	; 0x19de <main+0x894>
							serial_print_string("SENSOR 8");
    19d6:	83 e2       	ldi	r24, 0x23	; 35
    19d8:	92 e0       	ldi	r25, 0x02	; 2
    19da:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    19de:	8f e0       	ldi	r24, 0x0F	; 15
    19e0:	61 e0       	ldi	r22, 0x01	; 1
    19e2:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry2){
    19e6:	80 91 e8 08 	lds	r24, 0x08E8
    19ea:	88 1f       	adc	r24, r24
    19ec:	88 27       	eor	r24, r24
    19ee:	88 1f       	adc	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	2f 85       	ldd	r18, Y+15	; 0x0f
    19f4:	38 89       	ldd	r19, Y+16	; 0x10
    19f6:	28 17       	cp	r18, r24
    19f8:	39 07       	cpc	r19, r25
    19fa:	09 f4       	brne	.+2      	; 0x19fe <main+0x8b4>
    19fc:	a2 c1       	rjmp	.+836    	; 0x1d42 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry2);
    19fe:	0e 94 87 08 	call	0x110e	; 0x110e <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry2;
    1a02:	80 91 e8 08 	lds	r24, 0x08E8
    1a06:	88 1f       	adc	r24, r24
    1a08:	88 27       	eor	r24, r24
    1a0a:	88 1f       	adc	r24, r24
    1a0c:	48 2f       	mov	r20, r24
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	58 8b       	std	Y+16, r21	; 0x10
    1a12:	4f 87       	std	Y+15, r20	; 0x0f
    1a14:	96 c1       	rjmp	.+812    	; 0x1d42 <main+0xbf8>
						}							
						break;
					case O0_ON:
						if(printVar){
    1a16:	bb 20       	and	r11, r11
    1a18:	21 f0       	breq	.+8      	; 0x1a22 <main+0x8d8>
							serial_print_string("AC POWER     ON ");
    1a1a:	8c e2       	ldi	r24, 0x2C	; 44
    1a1c:	92 e0       	ldi	r25, 0x02	; 2
    1a1e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1a22:	80 91 ec 08 	lds	r24, 0x08EC
    1a26:	8e 7f       	andi	r24, 0xFE	; 254
    1a28:	0d c0       	rjmp	.+26     	; 0x1a44 <main+0x8fa>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
    1a2a:	80 91 ec 08 	lds	r24, 0x08EC
    1a2e:	81 60       	ori	r24, 0x01	; 1
    1a30:	6c c0       	rjmp	.+216    	; 0x1b0a <main+0x9c0>
						break;
					case O1_ON:
						if(printVar){
    1a32:	bb 20       	and	r11, r11
    1a34:	21 f0       	breq	.+8      	; 0x1a3e <main+0x8f4>
							serial_print_string("BLOWER       ON  ");
    1a36:	8d e3       	ldi	r24, 0x3D	; 61
    1a38:	92 e0       	ldi	r25, 0x02	; 2
    1a3a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1a3e:	80 91 ec 08 	lds	r24, 0x08EC
    1a42:	8d 7f       	andi	r24, 0xFD	; 253
    1a44:	80 93 ec 08 	sts	0x08EC, r24
    1a48:	7c c1       	rjmp	.+760    	; 0x1d42 <main+0xbf8>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1a4a:	80 91 ec 08 	lds	r24, 0x08EC
    1a4e:	82 60       	ori	r24, 0x02	; 2
    1a50:	5c c0       	rjmp	.+184    	; 0x1b0a <main+0x9c0>
						break;
					case O2_ON:
						if(printVar){
    1a52:	bb 20       	and	r11, r11
    1a54:	21 f0       	breq	.+8      	; 0x1a5e <main+0x914>
							serial_print_string("PLATE STOP   ON ");
    1a56:	8f e4       	ldi	r24, 0x4F	; 79
    1a58:	92 e0       	ldi	r25, 0x02	; 2
    1a5a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1a5e:	80 91 ec 08 	lds	r24, 0x08EC
    1a62:	8b 7f       	andi	r24, 0xFB	; 251
    1a64:	ef cf       	rjmp	.-34     	; 0x1a44 <main+0x8fa>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1a66:	80 91 ec 08 	lds	r24, 0x08EC
    1a6a:	84 60       	ori	r24, 0x04	; 4
    1a6c:	4e c0       	rjmp	.+156    	; 0x1b0a <main+0x9c0>
						break;
					case O3_ON:
						if(printVar){
    1a6e:	bb 20       	and	r11, r11
    1a70:	21 f0       	breq	.+8      	; 0x1a7a <main+0x930>
							serial_print_string("PLATE RAISE  ON ");
    1a72:	80 e6       	ldi	r24, 0x60	; 96
    1a74:	92 e0       	ldi	r25, 0x02	; 2
    1a76:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1a7a:	80 91 ec 08 	lds	r24, 0x08EC
    1a7e:	87 7f       	andi	r24, 0xF7	; 247
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1a80:	80 61       	ori	r24, 0x10	; 16
    1a82:	e0 cf       	rjmp	.-64     	; 0x1a44 <main+0x8fa>
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1a84:	80 91 ec 08 	lds	r24, 0x08EC
    1a88:	88 60       	ori	r24, 0x08	; 8
    1a8a:	3f c0       	rjmp	.+126    	; 0x1b0a <main+0x9c0>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(printVar){
    1a8c:	bb 20       	and	r11, r11
    1a8e:	21 f0       	breq	.+8      	; 0x1a98 <main+0x94e>
							serial_print_string("PLATE LOWER  ON ");
    1a90:	81 e7       	ldi	r24, 0x71	; 113
    1a92:	92 e0       	ldi	r25, 0x02	; 2
    1a94:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1a98:	80 91 ec 08 	lds	r24, 0x08EC
    1a9c:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1a9e:	8f 7e       	andi	r24, 0xEF	; 239
    1aa0:	d1 cf       	rjmp	.-94     	; 0x1a44 <main+0x8fa>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1aa2:	80 91 ec 08 	lds	r24, 0x08EC
    1aa6:	80 61       	ori	r24, 0x10	; 16
    1aa8:	30 c0       	rjmp	.+96     	; 0x1b0a <main+0x9c0>
						break;
					case O5_ON:
						if(printVar){
    1aaa:	bb 20       	and	r11, r11
    1aac:	21 f0       	breq	.+8      	; 0x1ab6 <main+0x96c>
							serial_print_string("BRUSH1 RAISE ON ");
    1aae:	82 e8       	ldi	r24, 0x82	; 130
    1ab0:	92 e0       	ldi	r25, 0x02	; 2
    1ab2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    1ab6:	80 91 ec 08 	lds	r24, 0x08EC
    1aba:	8f 7d       	andi	r24, 0xDF	; 223
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1abc:	80 64       	ori	r24, 0x40	; 64
    1abe:	c2 cf       	rjmp	.-124    	; 0x1a44 <main+0x8fa>
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1ac0:	80 91 ec 08 	lds	r24, 0x08EC
    1ac4:	80 62       	ori	r24, 0x20	; 32
    1ac6:	21 c0       	rjmp	.+66     	; 0x1b0a <main+0x9c0>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(printVar){
    1ac8:	bb 20       	and	r11, r11
    1aca:	21 f0       	breq	.+8      	; 0x1ad4 <main+0x98a>
							serial_print_string("BRUSH1 LOWER ON ");
    1acc:	83 e9       	ldi	r24, 0x93	; 147
    1ace:	92 e0       	ldi	r25, 0x02	; 2
    1ad0:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1ad4:	80 91 ec 08 	lds	r24, 0x08EC
    1ad8:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1ada:	80 62       	ori	r24, 0x20	; 32
    1adc:	b3 cf       	rjmp	.-154    	; 0x1a44 <main+0x8fa>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1ade:	80 91 ec 08 	lds	r24, 0x08EC
    1ae2:	80 64       	ori	r24, 0x40	; 64
    1ae4:	12 c0       	rjmp	.+36     	; 0x1b0a <main+0x9c0>
						break;
					case O7_ON:
						if(printVar){
    1ae6:	bb 20       	and	r11, r11
    1ae8:	21 f0       	breq	.+8      	; 0x1af2 <main+0x9a8>
							serial_print_string("BRUSH2 RAISE ON ");
    1aea:	84 ea       	ldi	r24, 0xA4	; 164
    1aec:	92 e0       	ldi	r25, 0x02	; 2
    1aee:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1af2:	80 91 ec 08 	lds	r24, 0x08EC
    1af6:	8f 77       	andi	r24, 0x7F	; 127
    1af8:	80 93 ec 08 	sts	0x08EC, r24
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1afc:	80 91 ea 08 	lds	r24, 0x08EA
    1b00:	81 60       	ori	r24, 0x01	; 1
    1b02:	5c c0       	rjmp	.+184    	; 0x1bbc <main+0xa72>
						break;
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1b04:	80 91 ec 08 	lds	r24, 0x08EC
    1b08:	80 68       	ori	r24, 0x80	; 128
    1b0a:	80 93 ec 08 	sts	0x08EC, r24
    1b0e:	1a c1       	rjmp	.+564    	; 0x1d44 <main+0xbfa>
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(printVar){
    1b10:	bb 20       	and	r11, r11
    1b12:	21 f0       	breq	.+8      	; 0x1b1c <main+0x9d2>
							serial_print_string("BRUSH2 LOWER ON ");
    1b14:	85 eb       	ldi	r24, 0xB5	; 181
    1b16:	92 e0       	ldi	r25, 0x02	; 2
    1b18:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1b1c:	80 91 ea 08 	lds	r24, 0x08EA
    1b20:	8e 7f       	andi	r24, 0xFE	; 254
    1b22:	80 93 ea 08 	sts	0x08EA, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1b26:	80 91 ec 08 	lds	r24, 0x08EC
    1b2a:	80 68       	ori	r24, 0x80	; 128
    1b2c:	8b cf       	rjmp	.-234    	; 0x1a44 <main+0x8fa>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1b2e:	80 91 ea 08 	lds	r24, 0x08EA
    1b32:	81 60       	ori	r24, 0x01	; 1
    1b34:	49 c0       	rjmp	.+146    	; 0x1bc8 <main+0xa7e>
						break;
					case O9_ON:
						if(printVar){
    1b36:	bb 20       	and	r11, r11
    1b38:	21 f0       	breq	.+8      	; 0x1b42 <main+0x9f8>
							serial_print_string("PAPER RAISE  ON ");
    1b3a:	86 ec       	ldi	r24, 0xC6	; 198
    1b3c:	92 e0       	ldi	r25, 0x02	; 2
    1b3e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1b42:	80 91 ea 08 	lds	r24, 0x08EA
    1b46:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    1b48:	82 60       	ori	r24, 0x02	; 2
    1b4a:	38 c0       	rjmp	.+112    	; 0x1bbc <main+0xa72>
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1b4c:	80 91 ea 08 	lds	r24, 0x08EA
    1b50:	84 60       	ori	r24, 0x04	; 4
    1b52:	3a c0       	rjmp	.+116    	; 0x1bc8 <main+0xa7e>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(printVar){
    1b54:	bb 20       	and	r11, r11
    1b56:	21 f0       	breq	.+8      	; 0x1b60 <main+0xa16>
							serial_print_string("PAPER LOWER  ON ");
    1b58:	87 ed       	ldi	r24, 0xD7	; 215
    1b5a:	92 e0       	ldi	r25, 0x02	; 2
    1b5c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1b60:	80 91 ea 08 	lds	r24, 0x08EA
    1b64:	8d 7f       	andi	r24, 0xFD	; 253
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1b66:	84 60       	ori	r24, 0x04	; 4
    1b68:	29 c0       	rjmp	.+82     	; 0x1bbc <main+0xa72>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    1b6a:	80 91 ea 08 	lds	r24, 0x08EA
    1b6e:	82 60       	ori	r24, 0x02	; 2
    1b70:	2b c0       	rjmp	.+86     	; 0x1bc8 <main+0xa7e>
						break;
					case O11_ON:
						if(printVar){
    1b72:	bb 20       	and	r11, r11
    1b74:	21 f0       	breq	.+8      	; 0x1b7e <main+0xa34>
							serial_print_string("AIR KNIFE    ON ");
    1b76:	88 ee       	ldi	r24, 0xE8	; 232
    1b78:	92 e0       	ldi	r25, 0x02	; 2
    1b7a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1b7e:	80 91 ea 08 	lds	r24, 0x08EA
    1b82:	87 7f       	andi	r24, 0xF7	; 247
    1b84:	1b c0       	rjmp	.+54     	; 0x1bbc <main+0xa72>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1b86:	80 91 ea 08 	lds	r24, 0x08EA
    1b8a:	88 60       	ori	r24, 0x08	; 8
    1b8c:	1d c0       	rjmp	.+58     	; 0x1bc8 <main+0xa7e>
						break;
					case O12_ON:
                        if(printVar){
    1b8e:	bb 20       	and	r11, r11
    1b90:	21 f0       	breq	.+8      	; 0x1b9a <main+0xa50>
							serial_print_string("BRUSH1PUMP    ON ");
    1b92:	89 ef       	ldi	r24, 0xF9	; 249
    1b94:	92 e0       	ldi	r25, 0x02	; 2
    1b96:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;	
						}	
						u_outputByte1.bits_in_outputByte1.brush1Pump = 1;
    1b9a:	80 91 ea 08 	lds	r24, 0x08EA
    1b9e:	80 61       	ori	r24, 0x10	; 16
    1ba0:	0d c0       	rjmp	.+26     	; 0x1bbc <main+0xa72>
					break;	
					case O12_OFF:
						u_outputByte1.bits_in_outputByte1.brush1Pump = 0;
    1ba2:	80 91 ea 08 	lds	r24, 0x08EA
    1ba6:	8f 7e       	andi	r24, 0xEF	; 239
    1ba8:	0f c0       	rjmp	.+30     	; 0x1bc8 <main+0xa7e>
					break;						
					case O13_ON:
                        if(printVar){
    1baa:	bb 20       	and	r11, r11
    1bac:	21 f0       	breq	.+8      	; 0x1bb6 <main+0xa6c>
							serial_print_string("BRUSH2PUMP    ON ");
    1bae:	8b e0       	ldi	r24, 0x0B	; 11
    1bb0:	93 e0       	ldi	r25, 0x03	; 3
    1bb2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;	
						}	
						u_outputByte1.bits_in_outputByte1.brush2Pump = 1;
    1bb6:	80 91 ea 08 	lds	r24, 0x08EA
    1bba:	80 62       	ori	r24, 0x20	; 32
    1bbc:	80 93 ea 08 	sts	0x08EA, r24
    1bc0:	c0 c0       	rjmp	.+384    	; 0x1d42 <main+0xbf8>
					break;	
					case O13_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Pump = 0;
    1bc2:	80 91 ea 08 	lds	r24, 0x08EA
    1bc6:	8f 7d       	andi	r24, 0xDF	; 223
    1bc8:	80 93 ea 08 	sts	0x08EA, r24
    1bcc:	bb c0       	rjmp	.+374    	; 0x1d44 <main+0xbfa>
						break;								
					case M1_F:		// M1_F:    /* ALERT is there a case missing??? */
						if(printVar){
    1bce:	bb 20       	and	r11, r11
    1bd0:	21 f0       	breq	.+8      	; 0x1bda <main+0xa90>
							serial_print_string("LOADING    FRONT");
    1bd2:	8d e1       	ldi	r24, 0x1D	; 29
    1bd4:	93 e0       	ldi	r25, 0x03	; 3
    1bd6:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  // dir needs reversing on other side
    1bda:	80 91 ee 08 	lds	r24, 0x08EE
    1bde:	82 60       	ori	r24, 0x02	; 2
    1be0:	80 93 ee 08 	sts	0x08EE, r24
						plateLoadMotor =  1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9b 83       	std	Y+3, r25	; 0x03
    1bea:	8a 83       	std	Y+2, r24	; 0x02
    1bec:	aa c0       	rjmp	.+340    	; 0x1d42 <main+0xbf8>
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1bee:	80 91 ee 08 	lds	r24, 0x08EE
    1bf2:	8d 7f       	andi	r24, 0xFD	; 253
    1bf4:	80 93 ee 08 	sts	0x08EE, r24
						plateLoadMotor =  1;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	9b 83       	std	Y+3, r25	; 0x03
    1bfe:	8a 83       	std	Y+2, r24	; 0x02
    1c00:	a1 c0       	rjmp	.+322    	; 0x1d44 <main+0xbfa>
						break;
					case M2_F:
						if(printVar){
    1c02:	bb 20       	and	r11, r11
    1c04:	21 f0       	breq	.+8      	; 0x1c0e <main+0xac4>
							serial_print_string("DRIVE      FRONT");
    1c06:	8e e2       	ldi	r24, 0x2E	; 46
    1c08:	93 e0       	ldi	r25, 0x03	; 3
    1c0a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1c0e:	80 91 ee 08 	lds	r24, 0x08EE
    1c12:	8f 7e       	andi	r24, 0xEF	; 239
    1c14:	80 93 ee 08 	sts	0x08EE, r24
						fixtureMotor =  1;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9d 83       	std	Y+5, r25	; 0x05
    1c1e:	8c 83       	std	Y+4, r24	; 0x04
						plateLoadMotor = 0;
    1c20:	1b 82       	std	Y+3, r1	; 0x03
    1c22:	1a 82       	std	Y+2, r1	; 0x02
    1c24:	bb 24       	eor	r11, r11
    1c26:	56 e2       	ldi	r21, 0x26	; 38
    1c28:	85 2e       	mov	r8, r21
    1c2a:	91 2c       	mov	r9, r1
    1c2c:	8b c0       	rjmp	.+278    	; 0x1d44 <main+0xbfa>
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
    1c2e:	80 91 ee 08 	lds	r24, 0x08EE
    1c32:	80 61       	ori	r24, 0x10	; 16
    1c34:	80 93 ee 08 	sts	0x08EE, r24
						fixtureMotor =  1;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9d 83       	std	Y+5, r25	; 0x05
    1c3e:	8c 83       	std	Y+4, r24	; 0x04
    1c40:	81 c0       	rjmp	.+258    	; 0x1d44 <main+0xbfa>
						break;
					case M3_F:
						if(printVar){
    1c42:	bb 20       	and	r11, r11
    1c44:	21 f0       	breq	.+8      	; 0x1c4e <main+0xb04>
							serial_print_string("BRUSH1     FRONT");
    1c46:	8f e3       	ldi	r24, 0x3F	; 63
    1c48:	93 e0       	ldi	r25, 0x03	; 3
    1c4a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
    1c4e:	80 91 ee 08 	lds	r24, 0x08EE
    1c52:	8f 77       	andi	r24, 0x7F	; 127
    1c54:	80 93 ee 08 	sts	0x08EE, r24
						brush1Motor =  1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9f 83       	std	Y+7, r25	; 0x07
    1c5e:	8e 83       	std	Y+6, r24	; 0x06
						fixtureMotor = 0;
    1c60:	1d 82       	std	Y+5, r1	; 0x05
    1c62:	1c 82       	std	Y+4, r1	; 0x04
    1c64:	bb 24       	eor	r11, r11
    1c66:	48 e2       	ldi	r20, 0x28	; 40
    1c68:	84 2e       	mov	r8, r20
    1c6a:	91 2c       	mov	r9, r1
    1c6c:	6b c0       	rjmp	.+214    	; 0x1d44 <main+0xbfa>
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
    1c6e:	80 91 ee 08 	lds	r24, 0x08EE
    1c72:	80 68       	ori	r24, 0x80	; 128
    1c74:	80 93 ee 08 	sts	0x08EE, r24
						brush1Motor =  1;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9f 83       	std	Y+7, r25	; 0x07
    1c7e:	8e 83       	std	Y+6, r24	; 0x06
    1c80:	61 c0       	rjmp	.+194    	; 0x1d44 <main+0xbfa>
						break;
					case M4_F:
						if(printVar){
    1c82:	bb 20       	and	r11, r11
    1c84:	21 f0       	breq	.+8      	; 0x1c8e <main+0xb44>
							serial_print_string("BRUSH2     FRONT");
    1c86:	80 e5       	ldi	r24, 0x50	; 80
    1c88:	93 e0       	ldi	r25, 0x03	; 3
    1c8a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
    1c8e:	80 91 e9 08 	lds	r24, 0x08E9
    1c92:	8b 7f       	andi	r24, 0xFB	; 251
    1c94:	80 93 e9 08 	sts	0x08E9, r24
						brush2Motor =  1;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	99 87       	std	Y+9, r25	; 0x09
    1c9e:	88 87       	std	Y+8, r24	; 0x08
						brush1Motor = 0;
    1ca0:	1f 82       	std	Y+7, r1	; 0x07
    1ca2:	1e 82       	std	Y+6, r1	; 0x06
    1ca4:	bb 24       	eor	r11, r11
    1ca6:	3a e2       	ldi	r19, 0x2A	; 42
    1ca8:	83 2e       	mov	r8, r19
    1caa:	91 2c       	mov	r9, r1
    1cac:	4b c0       	rjmp	.+150    	; 0x1d44 <main+0xbfa>
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
    1cae:	80 91 e9 08 	lds	r24, 0x08E9
    1cb2:	84 60       	ori	r24, 0x04	; 4
    1cb4:	80 93 e9 08 	sts	0x08E9, r24
						brush2Motor =  1;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	99 87       	std	Y+9, r25	; 0x09
    1cbe:	88 87       	std	Y+8, r24	; 0x08
    1cc0:	41 c0       	rjmp	.+130    	; 0x1d44 <main+0xbfa>
						break;
					case M5_F:
						if(printVar){
    1cc2:	bb 20       	and	r11, r11
    1cc4:	21 f0       	breq	.+8      	; 0x1cce <main+0xb84>
							serial_print_string("PAPER      FRONT");
    1cc6:	81 e6       	ldi	r24, 0x61	; 97
    1cc8:	93 e0       	ldi	r25, 0x03	; 3
    1cca:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1cce:	80 91 e9 08 	lds	r24, 0x08E9
    1cd2:	8f 7d       	andi	r24, 0xDF	; 223
    1cd4:	80 93 e9 08 	sts	0x08E9, r24
						paperTowelMotor =  1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9b 87       	std	Y+11, r25	; 0x0b
    1cde:	8a 87       	std	Y+10, r24	; 0x0a
						brush2Motor = 0;
    1ce0:	19 86       	std	Y+9, r1	; 0x09
    1ce2:	18 86       	std	Y+8, r1	; 0x08
    1ce4:	bb 24       	eor	r11, r11
    1ce6:	2c e2       	ldi	r18, 0x2C	; 44
    1ce8:	82 2e       	mov	r8, r18
    1cea:	91 2c       	mov	r9, r1
    1cec:	2b c0       	rjmp	.+86     	; 0x1d44 <main+0xbfa>
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
    1cee:	80 91 e9 08 	lds	r24, 0x08E9
    1cf2:	80 62       	ori	r24, 0x20	; 32
    1cf4:	80 93 e9 08 	sts	0x08E9, r24
						paperTowelMotor =  1;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	9b 87       	std	Y+11, r25	; 0x0b
    1cfe:	8a 87       	std	Y+10, r24	; 0x0a
    1d00:	21 c0       	rjmp	.+66     	; 0x1d44 <main+0xbfa>
						break;
					case M2_AND_M3:
						if(printVar){
    1d02:	bb 20       	and	r11, r11
    1d04:	21 f0       	breq	.+8      	; 0x1d0e <main+0xbc4>
							serial_print_string("FIXTURE & BRUSH1");
    1d06:	82 e7       	ldi	r24, 0x72	; 114
    1d08:	93 e0       	ldi	r25, 0x03	; 3
    1d0a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9d 83       	std	Y+5, r25	; 0x05
    1d14:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 1;
    1d16:	9f 83       	std	Y+7, r25	; 0x07
    1d18:	8e 83       	std	Y+6, r24	; 0x06
    1d1a:	13 c0       	rjmp	.+38     	; 0x1d42 <main+0xbf8>
						break;
					case M2_AND_M4:
						if(printVar){
    1d1c:	bb 20       	and	r11, r11
    1d1e:	21 f0       	breq	.+8      	; 0x1d28 <main+0xbde>
							serial_print_string("FIXTURE & BRUSH2");
    1d20:	83 e8       	ldi	r24, 0x83	; 131
    1d22:	93 e0       	ldi	r25, 0x03	; 3
    1d24:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9d 83       	std	Y+5, r25	; 0x05
    1d2e:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 0;
    1d30:	1f 82       	std	Y+7, r1	; 0x07
    1d32:	1e 82       	std	Y+6, r1	; 0x06
						brush2Motor = 1;
    1d34:	99 87       	std	Y+9, r25	; 0x09
    1d36:	88 87       	std	Y+8, r24	; 0x08
    1d38:	bb 24       	eor	r11, r11
    1d3a:	9f e2       	ldi	r25, 0x2F	; 47
    1d3c:	89 2e       	mov	r8, r25
    1d3e:	91 2c       	mov	r9, r1
    1d40:	01 c0       	rjmp	.+2      	; 0x1d44 <main+0xbfa>
    1d42:	bb 24       	eor	r11, r11
						break;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1d44:	4a 81       	ldd	r20, Y+2	; 0x02
    1d46:	5b 81       	ldd	r21, Y+3	; 0x03
    1d48:	2c 81       	ldd	r18, Y+4	; 0x04
    1d4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d4c:	0e 81       	ldd	r16, Y+6	; 0x06
    1d4e:	1f 81       	ldd	r17, Y+7	; 0x07
    1d50:	e8 84       	ldd	r14, Y+8	; 0x08
    1d52:	f9 84       	ldd	r15, Y+9	; 0x09
    1d54:	ca 84       	ldd	r12, Y+10	; 0x0a
    1d56:	db 84       	ldd	r13, Y+11	; 0x0b
    1d58:	c3 01       	movw	r24, r6
    1d5a:	b2 01       	movw	r22, r4
    1d5c:	0e 94 07 07 	call	0xe0e	; 0xe0e <motor_and_write>

				serial_check(); counter++;
    1d60:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <serial_check>
    1d64:	80 91 14 04 	lds	r24, 0x0414
    1d68:	90 91 15 04 	lds	r25, 0x0415
    1d6c:	6f 93       	push	r22
    1d6e:	64 e0       	ldi	r22, 0x04	; 4
    1d70:	6a 95       	dec	r22
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <main+0xc26>
    1d74:	6f 91       	pop	r22
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	c9 f7       	brne	.-14     	; 0x1d6c <main+0xc22>
			counter = 0;
			//clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
    1d7a:	50 e3       	ldi	r21, 0x30	; 48
    1d7c:	85 16       	cp	r8, r21
    1d7e:	91 04       	cpc	r9, r1
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <main+0xc3a>
    1d82:	35 c6       	rjmp	.+3178   	; 0x29ee <main+0x18a4>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1d84:	08 94       	sec
    1d86:	61 1c       	adc	r6, r1
    1d88:	71 1c       	adc	r7, r1
    1d8a:	c1 cb       	rjmp	.-2174   	; 0x150e <main+0x3c4>
		}
		else{										//If switch is set to Run Mode
		
		bool printVar = true;

		serial_print_string("NORMAL");
    1d8c:	84 e9       	ldi	r24, 0x94	; 148
    1d8e:	93 e0       	ldi	r25, 0x03	; 3
    1d90:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
		delay_ms(1000);
    1d94:	88 ee       	ldi	r24, 0xE8	; 232
    1d96:	93 e0       	ldi	r25, 0x03	; 3
    1d98:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <delay_ms>
		
		//clear();
		serial_print_string("SELECT CYCLE");
    1d9c:	8b e9       	ldi	r24, 0x9B	; 155
    1d9e:	93 e0       	ldi	r25, 0x03	; 3
    1da0:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
		delay_ms(1000);
    1da4:	88 ee       	ldi	r24, 0xE8	; 232
    1da6:	93 e0       	ldi	r25, 0x03	; 3
    1da8:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <delay_ms>
		int sel1 = !is_digital_input_high(IO_D1);
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1db2:	ee 24       	eor	r14, r14
    1db4:	ff 24       	eor	r15, r15
    1db6:	88 23       	and	r24, r24
    1db8:	19 f4       	brne	.+6      	; 0x1dc0 <main+0xc76>
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	e8 2e       	mov	r14, r24
    1dbe:	f1 2c       	mov	r15, r1
		int sel2 = !is_digital_input_high(IO_D2);
    1dc0:	82 e0       	ldi	r24, 0x02	; 2
    1dc2:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1dc6:	00 e0       	ldi	r16, 0x00	; 0
    1dc8:	10 e0       	ldi	r17, 0x00	; 0
    1dca:	88 23       	and	r24, r24
    1dcc:	11 f4       	brne	.+4      	; 0x1dd2 <main+0xc88>
    1dce:	01 e0       	ldi	r16, 0x01	; 1
    1dd0:	10 e0       	ldi	r17, 0x00	; 0
    1dd2:	cc 24       	eor	r12, r12
    1dd4:	dd 24       	eor	r13, r13
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			if(sel1 != is_digital_input_high(IO_D1) || sel2 != is_digital_input_high(IO_D2)){
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	e8 16       	cp	r14, r24
    1de0:	f9 06       	cpc	r15, r25
    1de2:	39 f4       	brne	.+14     	; 0x1df2 <main+0xca8>
    1de4:	82 e0       	ldi	r24, 0x02	; 2
    1de6:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	08 17       	cp	r16, r24
    1dee:	19 07       	cpc	r17, r25
    1df0:	59 f1       	breq	.+86     	; 0x1e48 <main+0xcfe>
				if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2))
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1df8:	88 23       	and	r24, r24
    1dfa:	41 f4       	brne	.+16     	; 0x1e0c <main+0xcc2>
    1dfc:	82 e0       	ldi	r24, 0x02	; 2
    1dfe:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e02:	88 23       	and	r24, r24
    1e04:	19 f4       	brne	.+6      	; 0x1e0c <main+0xcc2>
					serial_print_string("FIRST B");
    1e06:	88 ea       	ldi	r24, 0xA8	; 168
    1e08:	93 e0       	ldi	r25, 0x03	; 3
    1e0a:	1c c0       	rjmp	.+56     	; 0x1e44 <main+0xcfa>
				else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2))
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e12:	88 23       	and	r24, r24
    1e14:	41 f0       	breq	.+16     	; 0x1e26 <main+0xcdc>
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e1c:	88 23       	and	r24, r24
    1e1e:	19 f4       	brne	.+6      	; 0x1e26 <main+0xcdc>
					serial_print_string("SECOND B");
    1e20:	80 eb       	ldi	r24, 0xB0	; 176
    1e22:	93 e0       	ldi	r25, 0x03	; 3
    1e24:	0f c0       	rjmp	.+30     	; 0x1e44 <main+0xcfa>
				else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2))
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e2c:	88 23       	and	r24, r24
    1e2e:	41 f4       	brne	.+16     	; 0x1e40 <main+0xcf6>
    1e30:	82 e0       	ldi	r24, 0x02	; 2
    1e32:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e36:	88 23       	and	r24, r24
    1e38:	19 f0       	breq	.+6      	; 0x1e40 <main+0xcf6>
					serial_print_string("BOTH B");
    1e3a:	89 eb       	ldi	r24, 0xB9	; 185
    1e3c:	93 e0       	ldi	r25, 0x03	; 3
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <main+0xcfa>
				else
					serial_print_string("STEP");
    1e40:	80 ec       	ldi	r24, 0xC0	; 192
    1e42:	93 e0       	ldi	r25, 0x03	; 3
    1e44:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
					state = 0;          /* added to reset state counter to zero*/
			}
			sel1 = is_digital_input_high(IO_D1);
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e4e:	08 2f       	mov	r16, r24
			sel2 = is_digital_input_high(IO_D2);
    1e50:	82 e0       	ldi	r24, 0x02	; 2
    1e52:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e56:	18 2f       	mov	r17, r24
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1e58:	c6 01       	movw	r24, r12
    1e5a:	be 01       	movw	r22, r28
    1e5c:	64 5f       	subi	r22, 0xF4	; 244
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e60:	0e 94 2f 04 	call	0x85e	; 0x85e <button_debounce>
    1e64:	e0 91 14 04 	lds	r30, 0x0414
    1e68:	f0 91 15 04 	lds	r31, 0x0415
    1e6c:	6f 93       	push	r22
    1e6e:	64 e0       	ldi	r22, 0x04	; 4
    1e70:	6a 95       	dec	r22
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <main+0xd26>
    1e74:	6f 91       	pop	r22
    1e76:	31 97       	sbiw	r30, 0x01	; 1
    1e78:	c9 f7       	brne	.-14     	; 0x1e6c <main+0xd22>
		serial_print_string("SELECT CYCLE");
		delay_ms(1000);
		int sel1 = !is_digital_input_high(IO_D1);
		int sel2 = !is_digital_input_high(IO_D2);
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1e7a:	88 23       	and	r24, r24
    1e7c:	41 f4       	brne	.+16     	; 0x1e8e <main+0xd44>
					serial_print_string("BOTH B");
				else
					serial_print_string("STEP");
					state = 0;          /* added to reset state counter to zero*/
			}
			sel1 = is_digital_input_high(IO_D1);
    1e7e:	e0 2e       	mov	r14, r16
    1e80:	ff 24       	eor	r15, r15
			sel2 = is_digital_input_high(IO_D2);
    1e82:	01 2f       	mov	r16, r17
    1e84:	10 e0       	ldi	r17, 0x00	; 0
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
			counter++;
    1e86:	08 94       	sec
    1e88:	c1 1c       	adc	r12, r1
    1e8a:	d1 1c       	adc	r13, r1
    1e8c:	a4 cf       	rjmp	.-184    	; 0x1dd6 <main+0xc8c>
			delay_us(delayTimeMicroSeconds);
		}
		buttonTriggered = false;
		counter = 0;
		//clear();
		serial_print_string("CYCLE:");
    1e8e:	85 ec       	ldi	r24, 0xC5	; 197
    1e90:	93 e0       	ldi	r25, 0x03	; 3
    1e92:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>

		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1e96:	80 91 ee 08 	lds	r24, 0x08EE
    1e9a:	80 62       	ori	r24, 0x20	; 32
    1e9c:	80 93 ee 08 	sts	0x08EE, r24

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1ea6:	88 23       	and	r24, r24
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <main+0xd62>
    1eaa:	75 c1       	rjmp	.+746    	; 0x2196 <main+0x104c>
    1eac:	82 e0       	ldi	r24, 0x02	; 2
    1eae:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1eb2:	88 23       	and	r24, r24
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <main+0xd6e>
    1eb6:	6f c1       	rjmp	.+734    	; 0x2196 <main+0x104c>
			lcd_goto_xy(7,0);
    1eb8:	87 e0       	ldi	r24, 0x07	; 7
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
			serial_print_string("FIRST B");    //start of first brush cycle
    1ec0:	88 ea       	ldi	r24, 0xA8	; 168
    1ec2:	93 e0       	ldi	r25, 0x03	; 3
    1ec4:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9d 83       	std	Y+5, r25	; 0x05
    1ece:	8c 83       	std	Y+4, r24	; 0x04
    1ed0:	80 91 ee 08 	lds	r24, 0x08EE
    1ed4:	80 62       	ori	r24, 0x20	; 32
    1ed6:	80 93 ee 08 	sts	0x08EE, r24
    1eda:	88 24       	eor	r8, r8
    1edc:	99 24       	eor	r9, r9
    1ede:	66 24       	eor	r6, r6
    1ee0:	77 24       	eor	r7, r7
    1ee2:	44 24       	eor	r4, r4
    1ee4:	55 24       	eor	r5, r5
    1ee6:	22 24       	eor	r2, r2
    1ee8:	23 94       	inc	r2
    1eea:	33 24       	eor	r3, r3
    1eec:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1eee:	84 e4       	ldi	r24, 0x44	; 68
    1ef0:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				i2c_write(0x0);								// write command byte
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1efa:	85 e4       	ldi	r24, 0x45	; 69
    1efc:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1f00:	0e 94 08 01 	call	0x210	; 0x210 <i2c_readAck>
    1f04:	80 93 e8 08 	sts	0x08E8, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1f08:	0e 94 12 01 	call	0x224	; 0x224 <i2c_readNak>
    1f0c:	80 93 eb 08 	sts	0x08EB, r24
  	 	     	i2c_stop();								// set stop condition = release bus 		
    1f10:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
				
				if(state != INIT && printVar){
    1f14:	81 14       	cp	r8, r1
    1f16:	91 04       	cpc	r9, r1
    1f18:	a9 f1       	breq	.+106    	; 0x1f84 <main+0xe3a>
    1f1a:	33 20       	and	r3, r3
    1f1c:	99 f1       	breq	.+102    	; 0x1f84 <main+0xe3a>
					lcd_goto_xy(6,1);
    1f1e:	86 e0       	ldi	r24, 0x06	; 6
    1f20:	61 e0       	ldi	r22, 0x01	; 1
    1f22:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
					serial_print_string("     ");
    1f26:	8c ec       	ldi	r24, 0xCC	; 204
    1f28:	93 e0       	ldi	r25, 0x03	; 3
    1f2a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
					lcd_goto_xy(0,1);
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	61 e0       	ldi	r22, 0x01	; 1
    1f32:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
					serial_print_string_noCRLF("STATE: ");
    1f36:	82 ed       	ldi	r24, 0xD2	; 210
    1f38:	93 e0       	ldi	r25, 0x03	; 3
    1f3a:	0e 94 be 07 	call	0xf7c	; 0xf7c <serial_print_string_noCRLF>
					serial_print_int(state);
    1f3e:	c4 01       	movw	r24, r8
    1f40:	0e 94 87 08 	call	0x110e	; 0x110e <serial_print_int>
					serial_print_string_noCRLF("=> ");
    1f44:	8a ed       	ldi	r24, 0xDA	; 218
    1f46:	93 e0       	ldi	r25, 0x03	; 3
    1f48:	0e 94 be 07 	call	0xf7c	; 0xf7c <serial_print_string_noCRLF>
					serial_print_string(run_states_msg_list[state]);
    1f4c:	f4 01       	movw	r30, r8
    1f4e:	ee 0f       	add	r30, r30
    1f50:	ff 1f       	adc	r31, r31
    1f52:	ef 5c       	subi	r30, 0xCF	; 207
    1f54:	f7 4f       	sbci	r31, 0xF7	; 247
    1f56:	80 81       	ld	r24, Z
    1f58:	91 81       	ldd	r25, Z+1	; 0x01
    1f5a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
					serial_print_string(" ");
    1f5e:	8e ed       	ldi	r24, 0xDE	; 222
    1f60:	93 e0       	ldi	r25, 0x03	; 3
    1f62:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
					serial_print_string_noCRLF("Counter:");
    1f66:	80 ee       	ldi	r24, 0xE0	; 224
    1f68:	93 e0       	ldi	r25, 0x03	; 3
    1f6a:	0e 94 be 07 	call	0xf7c	; 0xf7c <serial_print_string_noCRLF>
					serial_print_int(counter/stepFactor);      // want to print number of steps to reach here
    1f6e:	60 91 16 04 	lds	r22, 0x0416
    1f72:	70 91 17 04 	lds	r23, 0x0417
    1f76:	c3 01       	movw	r24, r6
    1f78:	0e 94 b1 21 	call	0x4362	; 0x4362 <__divmodhi4>
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	0e 94 87 08 	call	0x110e	; 0x110e <serial_print_int>
    1f82:	33 24       	eor	r3, r3
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1f84:	c3 01       	movw	r24, r6
    1f86:	be 01       	movw	r22, r28
    1f88:	64 5f       	subi	r22, 0xF4	; 244
    1f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8c:	0e 94 2f 04 	call	0x85e	; 0x85e <button_debounce>
    1f90:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1f92:	c4 01       	movw	r24, r8
    1f94:	a3 01       	movw	r20, r6
    1f96:	92 01       	movw	r18, r4
    1f98:	0e 94 9e 04 	call	0x93c	; 0x93c <init_trans>
    1f9c:	88 23       	and	r24, r24
    1f9e:	31 f0       	breq	.+12     	; 0x1fac <main+0xe62>
					buttonTriggered = false;
					state ++;
    1fa0:	08 94       	sec
    1fa2:	81 1c       	adc	r8, r1
    1fa4:	91 1c       	adc	r9, r1
    1fa6:	23 01       	movw	r4, r6
    1fa8:	33 24       	eor	r3, r3
    1faa:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    1fac:	c4 01       	movw	r24, r8
    1fae:	b3 01       	movw	r22, r6
    1fb0:	a2 01       	movw	r20, r4
    1fb2:	0e 94 25 05 	call	0xa4a	; 0xa4a <firstB_trans>
    1fb6:	88 23       	and	r24, r24
    1fb8:	71 f0       	breq	.+28     	; 0x1fd6 <main+0xe8c>
					//serial_print_string("firstB_trans: ");
					//serial_print_int(counter);      // want to print number of steps to reach here
					state ++;
    1fba:	08 94       	sec
    1fbc:	81 1c       	adc	r8, r1
    1fbe:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    1fc0:	8c e0       	ldi	r24, 0x0C	; 12
    1fc2:	88 16       	cp	r8, r24
    1fc4:	91 04       	cpc	r9, r1
    1fc6:	51 f1       	breq	.+84     	; 0x201c <main+0xed2>
    1fc8:	90 e1       	ldi	r25, 0x10	; 16
    1fca:	89 16       	cp	r8, r25
    1fcc:	91 04       	cpc	r9, r1
    1fce:	31 f1       	breq	.+76     	; 0x201c <main+0xed2>
    1fd0:	23 01       	movw	r4, r6
    1fd2:	33 24       	eor	r3, r3
    1fd4:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}

				if(state == B1STOP2 && counter - counterRef > pWait){
    1fd6:	21 e1       	ldi	r18, 0x11	; 17
    1fd8:	82 16       	cp	r8, r18
    1fda:	91 04       	cpc	r9, r1
    1fdc:	71 f4       	brne	.+28     	; 0x1ffa <main+0xeb0>
    1fde:	93 01       	movw	r18, r6
    1fe0:	24 19       	sub	r18, r4
    1fe2:	35 09       	sbc	r19, r5
    1fe4:	80 91 fa 03 	lds	r24, 0x03FA
    1fe8:	90 91 fb 03 	lds	r25, 0x03FB
    1fec:	82 17       	cp	r24, r18
    1fee:	93 07       	cpc	r25, r19
    1ff0:	bc f4       	brge	.+46     	; 0x2020 <main+0xed6>
    1ff2:	23 01       	movw	r4, r6
    1ff4:	33 24       	eor	r3, r3
    1ff6:	33 94       	inc	r3
    1ff8:	04 c0       	rjmp	.+8      	; 0x2002 <main+0xeb8>
					state = MOVED1;
					counterRef = counter;
					printVar = true;
				}
				if(state == MOVED1 /*&& counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole*/ && u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0){
    1ffa:	3c e1       	ldi	r19, 0x1C	; 28
    1ffc:	83 16       	cp	r8, r19
    1ffe:	91 04       	cpc	r9, r1
    2000:	79 f4       	brne	.+30     	; 0x2020 <main+0xed6>
    2002:	80 91 e8 08 	lds	r24, 0x08E8
    2006:	86 fd       	sbrc	r24, 6
    2008:	05 c0       	rjmp	.+10     	; 0x2014 <main+0xeca>
    200a:	23 01       	movw	r4, r6
    200c:	1d e1       	ldi	r17, 0x1D	; 29
    200e:	81 2e       	mov	r8, r17
    2010:	91 2c       	mov	r9, r1
    2012:	04 c0       	rjmp	.+8      	; 0x201c <main+0xed2>
    2014:	bc e1       	ldi	r27, 0x1C	; 28
    2016:	8b 2e       	mov	r8, r27
    2018:	91 2c       	mov	r9, r1
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <main+0xed6>
    201c:	33 24       	eor	r3, r3
    201e:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef)){
    2020:	c4 01       	movw	r24, r8
    2022:	b3 01       	movw	r22, r6
    2024:	a2 01       	movw	r20, r4
    2026:	0e 94 71 06 	call	0xce2	; 0xce2 <dry_trans>
    202a:	88 23       	and	r24, r24
    202c:	31 f0       	breq	.+12     	; 0x203a <main+0xef0>
					state ++;
    202e:	08 94       	sec
    2030:	81 1c       	adc	r8, r1
    2032:	91 1c       	adc	r9, r1
    2034:	23 01       	movw	r4, r6
    2036:	33 24       	eor	r3, r3
    2038:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    203a:	45 e2       	ldi	r20, 0x25	; 37
    203c:	84 16       	cp	r8, r20
    203e:	91 04       	cpc	r9, r1
    2040:	41 f4       	brne	.+16     	; 0x2052 <main+0xf08>
    2042:	c3 01       	movw	r24, r6
    2044:	84 19       	sub	r24, r4
    2046:	95 09       	sbc	r25, r5
    2048:	0b 97       	sbiw	r24, 0x0b	; 11
    204a:	1c f0       	brlt	.+6      	; 0x2052 <main+0xf08>
    204c:	a6 e2       	ldi	r26, 0x26	; 38
    204e:	8a 2e       	mov	r8, r26
    2050:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    2052:	c4 01       	movw	r24, r8
    2054:	b3 01       	movw	r22, r6
    2056:	ae 01       	movw	r20, r28
    2058:	4e 5f       	subi	r20, 0xFE	; 254
    205a:	5f 4f       	sbci	r21, 0xFF	; 255
    205c:	9e 01       	movw	r18, r28
    205e:	2c 5f       	subi	r18, 0xFC	; 252
    2060:	3f 4f       	sbci	r19, 0xFF	; 255
    2062:	8e 01       	movw	r16, r28
    2064:	0a 5f       	subi	r16, 0xFA	; 250
    2066:	1f 4f       	sbci	r17, 0xFF	; 255
    2068:	f8 e0       	ldi	r31, 0x08	; 8
    206a:	ef 2e       	mov	r14, r31
    206c:	f1 2c       	mov	r15, r1
    206e:	ec 0e       	add	r14, r28
    2070:	fd 1e       	adc	r15, r29
    2072:	ea e0       	ldi	r30, 0x0A	; 10
    2074:	ce 2e       	mov	r12, r30
    2076:	d1 2c       	mov	r13, r1
    2078:	cc 0e       	add	r12, r28
    207a:	dd 1e       	adc	r13, r29
    207c:	5e 01       	movw	r10, r28
    207e:	08 94       	sec
    2080:	a1 1c       	adc	r10, r1
    2082:	b1 1c       	adc	r11, r1
    2084:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2088:	c4 01       	movw	r24, r8
    208a:	b3 01       	movw	r22, r6
    208c:	ae 01       	movw	r20, r28
    208e:	4e 5f       	subi	r20, 0xFE	; 254
    2090:	5f 4f       	sbci	r21, 0xFF	; 255
    2092:	9e 01       	movw	r18, r28
    2094:	2c 5f       	subi	r18, 0xFC	; 252
    2096:	3f 4f       	sbci	r19, 0xFF	; 255
    2098:	8e 01       	movw	r16, r28
    209a:	0a 5f       	subi	r16, 0xFA	; 250
    209c:	1f 4f       	sbci	r17, 0xFF	; 255
    209e:	b8 e0       	ldi	r27, 0x08	; 8
    20a0:	eb 2e       	mov	r14, r27
    20a2:	f1 2c       	mov	r15, r1
    20a4:	ec 0e       	add	r14, r28
    20a6:	fd 1e       	adc	r15, r29
    20a8:	aa e0       	ldi	r26, 0x0A	; 10
    20aa:	ca 2e       	mov	r12, r26
    20ac:	d1 2c       	mov	r13, r1
    20ae:	cc 0e       	add	r12, r28
    20b0:	dd 1e       	adc	r13, r29
    20b2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <brush1_action>
				if(state == B1STOP2){
    20b6:	51 e1       	ldi	r21, 0x11	; 17
    20b8:	85 16       	cp	r8, r21
    20ba:	91 04       	cpc	r9, r1
    20bc:	59 f4       	brne	.+22     	; 0x20d4 <main+0xf8a>
					brush1Motor = 0;
    20be:	1f 82       	std	Y+7, r1	; 0x07
    20c0:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    20c2:	1d 82       	std	Y+5, r1	; 0x05
    20c4:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    20c6:	80 91 ec 08 	lds	r24, 0x08EC
    20ca:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    20cc:	80 62       	ori	r24, 0x20	; 32
    20ce:	80 93 ec 08 	sts	0x08EC, r24
    20d2:	12 c0       	rjmp	.+36     	; 0x20f8 <main+0xfae>
				}
				if(state == MOVED1){
    20d4:	8c e1       	ldi	r24, 0x1C	; 28
    20d6:	88 16       	cp	r8, r24
    20d8:	91 04       	cpc	r9, r1
    20da:	71 f4       	brne	.+28     	; 0x20f8 <main+0xfae>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    20dc:	80 91 ee 08 	lds	r24, 0x08EE
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    20e0:	21 e0       	ldi	r18, 0x01	; 1
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	3d 83       	std	Y+5, r19	; 0x05
    20e6:	2c 83       	std	Y+4, r18	; 0x04
    20e8:	80 63       	ori	r24, 0x30	; 48
    20ea:	80 93 ee 08 	sts	0x08EE, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    20ee:	80 91 e9 08 	lds	r24, 0x08E9
    20f2:	8e 7f       	andi	r24, 0xFE	; 254
    20f4:	80 93 e9 08 	sts	0x08E9, r24
				}
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    20f8:	c4 01       	movw	r24, r8
    20fa:	b3 01       	movw	r22, r6
    20fc:	ae 01       	movw	r20, r28
    20fe:	4e 5f       	subi	r20, 0xFE	; 254
    2100:	5f 4f       	sbci	r21, 0xFF	; 255
    2102:	9e 01       	movw	r18, r28
    2104:	2c 5f       	subi	r18, 0xFC	; 252
    2106:	3f 4f       	sbci	r19, 0xFF	; 255
    2108:	8e 01       	movw	r16, r28
    210a:	0a 5f       	subi	r16, 0xFA	; 250
    210c:	1f 4f       	sbci	r17, 0xFF	; 255
    210e:	f8 e0       	ldi	r31, 0x08	; 8
    2110:	ef 2e       	mov	r14, r31
    2112:	f1 2c       	mov	r15, r1
    2114:	ec 0e       	add	r14, r28
    2116:	fd 1e       	adc	r15, r29
    2118:	ea e0       	ldi	r30, 0x0A	; 10
    211a:	ce 2e       	mov	r12, r30
    211c:	d1 2c       	mov	r13, r1
    211e:	cc 0e       	add	r12, r28
    2120:	dd 1e       	adc	r13, r29
    2122:	0e 94 82 03 	call	0x704	; 0x704 <dry_action>
				if(state == END){
    2126:	35 e2       	ldi	r19, 0x25	; 37
    2128:	83 16       	cp	r8, r19
    212a:	91 04       	cpc	r9, r1
    212c:	81 f4       	brne	.+32     	; 0x214e <main+0x1004>
					plateLoadMotor = 1;      // may need reversing on other side?
    212e:	41 e0       	ldi	r20, 0x01	; 1
    2130:	50 e0       	ldi	r21, 0x00	; 0
    2132:	5b 83       	std	Y+3, r21	; 0x03
    2134:	4a 83       	std	Y+2, r20	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2136:	80 91 ee 08 	lds	r24, 0x08EE
    213a:	8b 7f       	andi	r24, 0xFB	; 251
    213c:	80 93 ee 08 	sts	0x08EE, r24
					if(print35 == 1){
    2140:	22 20       	and	r2, r2
    2142:	29 f0       	breq	.+10     	; 0x214e <main+0x1004>
						//clear();
						serial_print_string("END OF CYCLE");
    2144:	89 ee       	ldi	r24, 0xE9	; 233
    2146:	93 e0       	ldi	r25, 0x03	; 3
    2148:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
    214c:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    214e:	4a 81       	ldd	r20, Y+2	; 0x02
    2150:	5b 81       	ldd	r21, Y+3	; 0x03
    2152:	2c 81       	ldd	r18, Y+4	; 0x04
    2154:	3d 81       	ldd	r19, Y+5	; 0x05
    2156:	0e 81       	ldd	r16, Y+6	; 0x06
    2158:	1f 81       	ldd	r17, Y+7	; 0x07
    215a:	e8 84       	ldd	r14, Y+8	; 0x08
    215c:	f9 84       	ldd	r15, Y+9	; 0x09
    215e:	ca 84       	ldd	r12, Y+10	; 0x0a
    2160:	db 84       	ldd	r13, Y+11	; 0x0b
    2162:	c3 01       	movw	r24, r6
    2164:	b2 01       	movw	r22, r4
    2166:	0e 94 07 07 	call	0xe0e	; 0xe0e <motor_and_write>

				serial_check(); counter++;
    216a:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <serial_check>
    216e:	80 91 14 04 	lds	r24, 0x0414
    2172:	90 91 15 04 	lds	r25, 0x0415
    2176:	6f 93       	push	r22
    2178:	64 e0       	ldi	r22, 0x04	; 4
    217a:	6a 95       	dec	r22
    217c:	f1 f7       	brne	.-4      	; 0x217a <main+0x1030>
    217e:	6f 91       	pop	r22
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	c9 f7       	brne	.-14     	; 0x2176 <main+0x102c>

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("FIRST B");    //start of first brush cycle
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    2184:	56 e2       	ldi	r21, 0x26	; 38
    2186:	85 16       	cp	r8, r21
    2188:	91 04       	cpc	r9, r1
    218a:	09 f4       	brne	.+2      	; 0x218e <main+0x1044>
    218c:	30 c4       	rjmp	.+2144   	; 0x29ee <main+0x18a4>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    218e:	08 94       	sec
    2190:	61 1c       	adc	r6, r1
    2192:	71 1c       	adc	r7, r1
    2194:	ac ce       	rjmp	.-680    	; 0x1eee <main+0xda4>
				delay_us(delayTimeMicroSeconds);
   		 	}     // end of first brush while cycle
		}   


		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    219c:	88 23       	and	r24, r24
    219e:	09 f4       	brne	.+2      	; 0x21a2 <main+0x1058>
    21a0:	32 c1       	rjmp	.+612    	; 0x2406 <main+0x12bc>
    21a2:	82 e0       	ldi	r24, 0x02	; 2
    21a4:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    21a8:	88 23       	and	r24, r24
    21aa:	09 f0       	breq	.+2      	; 0x21ae <main+0x1064>
    21ac:	2c c1       	rjmp	.+600    	; 0x2406 <main+0x12bc>
			lcd_goto_xy(7,0);
    21ae:	87 e0       	ldi	r24, 0x07	; 7
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
			serial_print_string("SECOND B");
    21b6:	80 eb       	ldi	r24, 0xB0	; 176
    21b8:	93 e0       	ldi	r25, 0x03	; 3
    21ba:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	9d 83       	std	Y+5, r25	; 0x05
    21c4:	8c 83       	std	Y+4, r24	; 0x04
    21c6:	80 91 ee 08 	lds	r24, 0x08EE
    21ca:	80 62       	ori	r24, 0x20	; 32
    21cc:	80 93 ee 08 	sts	0x08EE, r24
    21d0:	88 24       	eor	r8, r8
    21d2:	99 24       	eor	r9, r9
    21d4:	66 24       	eor	r6, r6
    21d6:	77 24       	eor	r7, r7
    21d8:	44 24       	eor	r4, r4
    21da:	55 24       	eor	r5, r5
    21dc:	22 24       	eor	r2, r2
    21de:	23 94       	inc	r2
    21e0:	33 24       	eor	r3, r3
    21e2:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    21e4:	84 e4       	ldi	r24, 0x44	; 68
    21e6:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				i2c_write(0x0);								// write command byte
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    21f0:	85 e4       	ldi	r24, 0x45	; 69
    21f2:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    21f6:	0e 94 08 01 	call	0x210	; 0x210 <i2c_readAck>
    21fa:	80 93 e8 08 	sts	0x08E8, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    21fe:	0e 94 12 01 	call	0x224	; 0x224 <i2c_readNak>
    2202:	80 93 eb 08 	sts	0x08EB, r24
  	 	     	i2c_stop();								// set stop condition = release bus 		
    2206:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
				
				if(state != INIT && printVar){
    220a:	81 14       	cp	r8, r1
    220c:	91 04       	cpc	r9, r1
    220e:	39 f1       	breq	.+78     	; 0x225e <main+0x1114>
    2210:	33 20       	and	r3, r3
    2212:	29 f1       	breq	.+74     	; 0x225e <main+0x1114>
					lcd_goto_xy(6,1);
    2214:	86 e0       	ldi	r24, 0x06	; 6
    2216:	61 e0       	ldi	r22, 0x01	; 1
    2218:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
					serial_print_string("     ");
    221c:	8c ec       	ldi	r24, 0xCC	; 204
    221e:	93 e0       	ldi	r25, 0x03	; 3
    2220:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
					lcd_goto_xy(0,1);
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	61 e0       	ldi	r22, 0x01	; 1
    2228:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
					serial_print_string_noCRLF("STATE: ");
    222c:	82 ed       	ldi	r24, 0xD2	; 210
    222e:	93 e0       	ldi	r25, 0x03	; 3
    2230:	0e 94 be 07 	call	0xf7c	; 0xf7c <serial_print_string_noCRLF>
					serial_print_int(state);
    2234:	c4 01       	movw	r24, r8
    2236:	0e 94 87 08 	call	0x110e	; 0x110e <serial_print_int>
					serial_print_string_noCRLF("=> ");
    223a:	8a ed       	ldi	r24, 0xDA	; 218
    223c:	93 e0       	ldi	r25, 0x03	; 3
    223e:	0e 94 be 07 	call	0xf7c	; 0xf7c <serial_print_string_noCRLF>
					serial_print_string(run_states_msg_list[state]);
    2242:	f4 01       	movw	r30, r8
    2244:	ee 0f       	add	r30, r30
    2246:	ff 1f       	adc	r31, r31
    2248:	ef 5c       	subi	r30, 0xCF	; 207
    224a:	f7 4f       	sbci	r31, 0xF7	; 247
    224c:	80 81       	ld	r24, Z
    224e:	91 81       	ldd	r25, Z+1	; 0x01
    2250:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
					serial_print_string(" ");
    2254:	8e ed       	ldi	r24, 0xDE	; 222
    2256:	93 e0       	ldi	r25, 0x03	; 3
    2258:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
    225c:	33 24       	eor	r3, r3

					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    225e:	c3 01       	movw	r24, r6
    2260:	be 01       	movw	r22, r28
    2262:	64 5f       	subi	r22, 0xF4	; 244
    2264:	7f 4f       	sbci	r23, 0xFF	; 255
    2266:	0e 94 2f 04 	call	0x85e	; 0x85e <button_debounce>
    226a:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    226c:	c4 01       	movw	r24, r8
    226e:	a3 01       	movw	r20, r6
    2270:	92 01       	movw	r18, r4
    2272:	0e 94 9e 04 	call	0x93c	; 0x93c <init_trans>
    2276:	88 23       	and	r24, r24
    2278:	31 f0       	breq	.+12     	; 0x2286 <main+0x113c>
					buttonTriggered = false;
					state ++;
    227a:	08 94       	sec
    227c:	81 1c       	adc	r8, r1
    227e:	91 1c       	adc	r9, r1
    2280:	23 01       	movw	r4, r6
    2282:	33 24       	eor	r3, r3
    2284:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == MOVEC1 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0){
    2286:	88 e0       	ldi	r24, 0x08	; 8
    2288:	88 16       	cp	r8, r24
    228a:	91 04       	cpc	r9, r1
    228c:	51 f4       	brne	.+20     	; 0x22a2 <main+0x1158>
    228e:	80 91 e8 08 	lds	r24, 0x08E8
    2292:	85 fd       	sbrc	r24, 5
    2294:	06 c0       	rjmp	.+12     	; 0x22a2 <main+0x1158>
    2296:	23 01       	movw	r4, r6
    2298:	b3 e1       	ldi	r27, 0x13	; 19
    229a:	8b 2e       	mov	r8, r27
    229c:	91 2c       	mov	r9, r1
    229e:	33 24       	eor	r3, r3
    22a0:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    22a2:	c4 01       	movw	r24, r8
    22a4:	b3 01       	movw	r22, r6
    22a6:	a2 01       	movw	r20, r4
    22a8:	0e 94 c3 05 	call	0xb86	; 0xb86 <secondB_trans>
    22ac:	88 23       	and	r24, r24
    22ae:	31 f0       	breq	.+12     	; 0x22bc <main+0x1172>
					state ++;
    22b0:	08 94       	sec
    22b2:	81 1c       	adc	r8, r1
    22b4:	91 1c       	adc	r9, r1
    22b6:	23 01       	movw	r4, r6
    22b8:	33 24       	eor	r3, r3
    22ba:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef)){
    22bc:	c4 01       	movw	r24, r8
    22be:	b3 01       	movw	r22, r6
    22c0:	a2 01       	movw	r20, r4
    22c2:	0e 94 71 06 	call	0xce2	; 0xce2 <dry_trans>
    22c6:	88 23       	and	r24, r24
    22c8:	31 f0       	breq	.+12     	; 0x22d6 <main+0x118c>
					state ++;
    22ca:	08 94       	sec
    22cc:	81 1c       	adc	r8, r1
    22ce:	91 1c       	adc	r9, r1
    22d0:	23 01       	movw	r4, r6
    22d2:	33 24       	eor	r3, r3
    22d4:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    22d6:	95 e2       	ldi	r25, 0x25	; 37
    22d8:	89 16       	cp	r8, r25
    22da:	91 04       	cpc	r9, r1
    22dc:	41 f4       	brne	.+16     	; 0x22ee <main+0x11a4>
    22de:	c3 01       	movw	r24, r6
    22e0:	84 19       	sub	r24, r4
    22e2:	95 09       	sbc	r25, r5
    22e4:	0b 97       	sbiw	r24, 0x0b	; 11
    22e6:	1c f0       	brlt	.+6      	; 0x22ee <main+0x11a4>
    22e8:	a6 e2       	ldi	r26, 0x26	; 38
    22ea:	8a 2e       	mov	r8, r26
    22ec:	91 2c       	mov	r9, r1
				}


				//state actions
				
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    22ee:	c4 01       	movw	r24, r8
    22f0:	b3 01       	movw	r22, r6
    22f2:	ae 01       	movw	r20, r28
    22f4:	4e 5f       	subi	r20, 0xFE	; 254
    22f6:	5f 4f       	sbci	r21, 0xFF	; 255
    22f8:	9e 01       	movw	r18, r28
    22fa:	2c 5f       	subi	r18, 0xFC	; 252
    22fc:	3f 4f       	sbci	r19, 0xFF	; 255
    22fe:	8e 01       	movw	r16, r28
    2300:	0a 5f       	subi	r16, 0xFA	; 250
    2302:	1f 4f       	sbci	r17, 0xFF	; 255
    2304:	f8 e0       	ldi	r31, 0x08	; 8
    2306:	ef 2e       	mov	r14, r31
    2308:	f1 2c       	mov	r15, r1
    230a:	ec 0e       	add	r14, r28
    230c:	fd 1e       	adc	r15, r29
    230e:	ea e0       	ldi	r30, 0x0A	; 10
    2310:	ce 2e       	mov	r12, r30
    2312:	d1 2c       	mov	r13, r1
    2314:	cc 0e       	add	r12, r28
    2316:	dd 1e       	adc	r13, r29
    2318:	5e 01       	movw	r10, r28
    231a:	08 94       	sec
    231c:	a1 1c       	adc	r10, r1
    231e:	b1 1c       	adc	r11, r1
    2320:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <init_action>
				if(state == MOVEC1){
    2324:	28 e0       	ldi	r18, 0x08	; 8
    2326:	82 16       	cp	r8, r18
    2328:	91 04       	cpc	r9, r1
    232a:	49 f4       	brne	.+18     	; 0x233e <main+0x11f4>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    232c:	80 91 ee 08 	lds	r24, 0x08EE
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2330:	41 e0       	ldi	r20, 0x01	; 1
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	5d 83       	std	Y+5, r21	; 0x05
    2336:	4c 83       	std	Y+4, r20	; 0x04
    2338:	80 63       	ori	r24, 0x30	; 48
    233a:	80 93 ee 08 	sts	0x08EE, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    233e:	c4 01       	movw	r24, r8
    2340:	b3 01       	movw	r22, r6
    2342:	ae 01       	movw	r20, r28
    2344:	4e 5f       	subi	r20, 0xFE	; 254
    2346:	5f 4f       	sbci	r21, 0xFF	; 255
    2348:	9e 01       	movw	r18, r28
    234a:	2c 5f       	subi	r18, 0xFC	; 252
    234c:	3f 4f       	sbci	r19, 0xFF	; 255
    234e:	8e 01       	movw	r16, r28
    2350:	0a 5f       	subi	r16, 0xFA	; 250
    2352:	1f 4f       	sbci	r17, 0xFF	; 255
    2354:	b8 e0       	ldi	r27, 0x08	; 8
    2356:	eb 2e       	mov	r14, r27
    2358:	f1 2c       	mov	r15, r1
    235a:	ec 0e       	add	r14, r28
    235c:	fd 1e       	adc	r15, r29
    235e:	aa e0       	ldi	r26, 0x0A	; 10
    2360:	ca 2e       	mov	r12, r26
    2362:	d1 2c       	mov	r13, r1
    2364:	cc 0e       	add	r12, r28
    2366:	dd 1e       	adc	r13, r29
    2368:	0e 94 92 02 	call	0x524	; 0x524 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    236c:	c4 01       	movw	r24, r8
    236e:	b3 01       	movw	r22, r6
    2370:	ae 01       	movw	r20, r28
    2372:	4e 5f       	subi	r20, 0xFE	; 254
    2374:	5f 4f       	sbci	r21, 0xFF	; 255
    2376:	9e 01       	movw	r18, r28
    2378:	2c 5f       	subi	r18, 0xFC	; 252
    237a:	3f 4f       	sbci	r19, 0xFF	; 255
    237c:	8e 01       	movw	r16, r28
    237e:	0a 5f       	subi	r16, 0xFA	; 250
    2380:	1f 4f       	sbci	r17, 0xFF	; 255
    2382:	f8 e0       	ldi	r31, 0x08	; 8
    2384:	ef 2e       	mov	r14, r31
    2386:	f1 2c       	mov	r15, r1
    2388:	ec 0e       	add	r14, r28
    238a:	fd 1e       	adc	r15, r29
    238c:	ea e0       	ldi	r30, 0x0A	; 10
    238e:	ce 2e       	mov	r12, r30
    2390:	d1 2c       	mov	r13, r1
    2392:	cc 0e       	add	r12, r28
    2394:	dd 1e       	adc	r13, r29
    2396:	0e 94 82 03 	call	0x704	; 0x704 <dry_action>
				if(state == END){
    239a:	55 e2       	ldi	r21, 0x25	; 37
    239c:	85 16       	cp	r8, r21
    239e:	91 04       	cpc	r9, r1
    23a0:	71 f4       	brne	.+28     	; 0x23be <main+0x1274>
					plateLoadMotor = 0;
    23a2:	1b 82       	std	Y+3, r1	; 0x03
    23a4:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    23a6:	80 91 ee 08 	lds	r24, 0x08EE
    23aa:	8b 7f       	andi	r24, 0xFB	; 251
    23ac:	80 93 ee 08 	sts	0x08EE, r24
					if(print35 == 1){
    23b0:	22 20       	and	r2, r2
    23b2:	29 f0       	breq	.+10     	; 0x23be <main+0x1274>
						//clear();
						serial_print_string("END OF CYCLE");
    23b4:	89 ee       	ldi	r24, 0xE9	; 233
    23b6:	93 e0       	ldi	r25, 0x03	; 3
    23b8:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
    23bc:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    23be:	4a 81       	ldd	r20, Y+2	; 0x02
    23c0:	5b 81       	ldd	r21, Y+3	; 0x03
    23c2:	2c 81       	ldd	r18, Y+4	; 0x04
    23c4:	3d 81       	ldd	r19, Y+5	; 0x05
    23c6:	0e 81       	ldd	r16, Y+6	; 0x06
    23c8:	1f 81       	ldd	r17, Y+7	; 0x07
    23ca:	e8 84       	ldd	r14, Y+8	; 0x08
    23cc:	f9 84       	ldd	r15, Y+9	; 0x09
    23ce:	ca 84       	ldd	r12, Y+10	; 0x0a
    23d0:	db 84       	ldd	r13, Y+11	; 0x0b
    23d2:	c3 01       	movw	r24, r6
    23d4:	b2 01       	movw	r22, r4
    23d6:	0e 94 07 07 	call	0xe0e	; 0xe0e <motor_and_write>

				serial_check(); counter++;
    23da:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <serial_check>
    23de:	80 91 14 04 	lds	r24, 0x0414
    23e2:	90 91 15 04 	lds	r25, 0x0415
    23e6:	6f 93       	push	r22
    23e8:	64 e0       	ldi	r22, 0x04	; 4
    23ea:	6a 95       	dec	r22
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <main+0x12a0>
    23ee:	6f 91       	pop	r22
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	c9 f7       	brne	.-14     	; 0x23e6 <main+0x129c>

		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("SECOND B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    23f4:	86 e2       	ldi	r24, 0x26	; 38
    23f6:	88 16       	cp	r8, r24
    23f8:	91 04       	cpc	r9, r1
    23fa:	09 f4       	brne	.+2      	; 0x23fe <main+0x12b4>
    23fc:	f8 c2       	rjmp	.+1520   	; 0x29ee <main+0x18a4>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    23fe:	08 94       	sec
    2400:	61 1c       	adc	r6, r1
    2402:	71 1c       	adc	r7, r1
    2404:	ef ce       	rjmp	.-546    	; 0x21e4 <main+0x109a>
				delay_us(delayTimeMicroSeconds);
   		 	}
		}


		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    240c:	88 23       	and	r24, r24
    240e:	09 f0       	breq	.+2      	; 0x2412 <main+0x12c8>
    2410:	6a c1       	rjmp	.+724    	; 0x26e6 <main+0x159c>
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    2418:	88 23       	and	r24, r24
    241a:	09 f4       	brne	.+2      	; 0x241e <main+0x12d4>
    241c:	64 c1       	rjmp	.+712    	; 0x26e6 <main+0x159c>
			lcd_goto_xy(7,0);
    241e:	87 e0       	ldi	r24, 0x07	; 7
    2420:	60 e0       	ldi	r22, 0x00	; 0
    2422:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
			serial_print_string("BOTH B");
    2426:	89 eb       	ldi	r24, 0xB9	; 185
    2428:	93 e0       	ldi	r25, 0x03	; 3
    242a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9d 83       	std	Y+5, r25	; 0x05
    2434:	8c 83       	std	Y+4, r24	; 0x04
    2436:	80 91 ee 08 	lds	r24, 0x08EE
    243a:	80 62       	ori	r24, 0x20	; 32
    243c:	80 93 ee 08 	sts	0x08EE, r24
    2440:	88 24       	eor	r8, r8
    2442:	99 24       	eor	r9, r9
    2444:	66 24       	eor	r6, r6
    2446:	77 24       	eor	r7, r7
    2448:	44 24       	eor	r4, r4
    244a:	55 24       	eor	r5, r5
    244c:	22 24       	eor	r2, r2
    244e:	23 94       	inc	r2
    2450:	33 24       	eor	r3, r3
    2452:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    2454:	84 e4       	ldi	r24, 0x44	; 68
    2456:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				i2c_write(0x0);								// write command byte
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2460:	85 e4       	ldi	r24, 0x45	; 69
    2462:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    2466:	0e 94 08 01 	call	0x210	; 0x210 <i2c_readAck>
    246a:	80 93 e8 08 	sts	0x08E8, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    246e:	0e 94 12 01 	call	0x224	; 0x224 <i2c_readNak>
    2472:	80 93 eb 08 	sts	0x08EB, r24
  	 	     	i2c_stop();								// set stop condition = release bus 		
    2476:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
				
				if(state != INIT && printVar){
    247a:	81 14       	cp	r8, r1
    247c:	91 04       	cpc	r9, r1
    247e:	39 f1       	breq	.+78     	; 0x24ce <main+0x1384>
    2480:	33 20       	and	r3, r3
    2482:	29 f1       	breq	.+74     	; 0x24ce <main+0x1384>
					lcd_goto_xy(6,1);
    2484:	86 e0       	ldi	r24, 0x06	; 6
    2486:	61 e0       	ldi	r22, 0x01	; 1
    2488:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
					serial_print_string("     ");
    248c:	8c ec       	ldi	r24, 0xCC	; 204
    248e:	93 e0       	ldi	r25, 0x03	; 3
    2490:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
					lcd_goto_xy(0,1);
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	61 e0       	ldi	r22, 0x01	; 1
    2498:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
					serial_print_string_noCRLF("STATE: ");
    249c:	82 ed       	ldi	r24, 0xD2	; 210
    249e:	93 e0       	ldi	r25, 0x03	; 3
    24a0:	0e 94 be 07 	call	0xf7c	; 0xf7c <serial_print_string_noCRLF>
					serial_print_int(state);
    24a4:	c4 01       	movw	r24, r8
    24a6:	0e 94 87 08 	call	0x110e	; 0x110e <serial_print_int>
					serial_print_string_noCRLF("=> ");
    24aa:	8a ed       	ldi	r24, 0xDA	; 218
    24ac:	93 e0       	ldi	r25, 0x03	; 3
    24ae:	0e 94 be 07 	call	0xf7c	; 0xf7c <serial_print_string_noCRLF>
					serial_print_string(run_states_msg_list[state]);
    24b2:	f4 01       	movw	r30, r8
    24b4:	ee 0f       	add	r30, r30
    24b6:	ff 1f       	adc	r31, r31
    24b8:	ef 5c       	subi	r30, 0xCF	; 207
    24ba:	f7 4f       	sbci	r31, 0xF7	; 247
    24bc:	80 81       	ld	r24, Z
    24be:	91 81       	ldd	r25, Z+1	; 0x01
    24c0:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
					serial_print_string(" ");
    24c4:	8e ed       	ldi	r24, 0xDE	; 222
    24c6:	93 e0       	ldi	r25, 0x03	; 3
    24c8:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
    24cc:	33 24       	eor	r3, r3

					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    24ce:	c3 01       	movw	r24, r6
    24d0:	be 01       	movw	r22, r28
    24d2:	64 5f       	subi	r22, 0xF4	; 244
    24d4:	7f 4f       	sbci	r23, 0xFF	; 255
    24d6:	0e 94 2f 04 	call	0x85e	; 0x85e <button_debounce>
    24da:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    24dc:	c4 01       	movw	r24, r8
    24de:	a3 01       	movw	r20, r6
    24e0:	92 01       	movw	r18, r4
    24e2:	0e 94 9e 04 	call	0x93c	; 0x93c <init_trans>
    24e6:	88 23       	and	r24, r24
    24e8:	31 f0       	breq	.+12     	; 0x24f6 <main+0x13ac>
					buttonTriggered = false;
					state ++;
    24ea:	08 94       	sec
    24ec:	81 1c       	adc	r8, r1
    24ee:	91 1c       	adc	r9, r1
    24f0:	23 01       	movw	r4, r6
    24f2:	33 24       	eor	r3, r3
    24f4:	33 94       	inc	r3
					printVar = true;
				}

				
				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    24f6:	c4 01       	movw	r24, r8
    24f8:	b3 01       	movw	r22, r6
    24fa:	a2 01       	movw	r20, r4
    24fc:	0e 94 25 05 	call	0xa4a	; 0xa4a <firstB_trans>
    2500:	88 23       	and	r24, r24
    2502:	71 f0       	breq	.+28     	; 0x2520 <main+0x13d6>
					state ++;
    2504:	08 94       	sec
    2506:	81 1c       	adc	r8, r1
    2508:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    250a:	9c e0       	ldi	r25, 0x0C	; 12
    250c:	89 16       	cp	r8, r25
    250e:	91 04       	cpc	r9, r1
    2510:	c9 f0       	breq	.+50     	; 0x2544 <main+0x13fa>
    2512:	20 e1       	ldi	r18, 0x10	; 16
    2514:	82 16       	cp	r8, r18
    2516:	91 04       	cpc	r9, r1
    2518:	a9 f0       	breq	.+42     	; 0x2544 <main+0x13fa>
    251a:	23 01       	movw	r4, r6
    251c:	33 24       	eor	r3, r3
    251e:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    2520:	31 e1       	ldi	r19, 0x11	; 17
    2522:	83 16       	cp	r8, r19
    2524:	91 04       	cpc	r9, r1
    2526:	81 f4       	brne	.+32     	; 0x2548 <main+0x13fe>
    2528:	93 01       	movw	r18, r6
    252a:	24 19       	sub	r18, r4
    252c:	35 09       	sbc	r19, r5
    252e:	80 91 fa 03 	lds	r24, 0x03FA
    2532:	90 91 fb 03 	lds	r25, 0x03FB
    2536:	82 17       	cp	r24, r18
    2538:	93 07       	cpc	r25, r19
    253a:	34 f4       	brge	.+12     	; 0x2548 <main+0x13fe>
    253c:	23 01       	movw	r4, r6
    253e:	02 e1       	ldi	r16, 0x12	; 18
    2540:	80 2e       	mov	r8, r16
    2542:	91 2c       	mov	r9, r1
    2544:	33 24       	eor	r3, r3
    2546:	33 94       	inc	r3
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    2548:	c4 01       	movw	r24, r8
    254a:	b3 01       	movw	r22, r6
    254c:	a2 01       	movw	r20, r4
    254e:	0e 94 c3 05 	call	0xb86	; 0xb86 <secondB_trans>
    2552:	88 23       	and	r24, r24
    2554:	31 f0       	breq	.+12     	; 0x2562 <main+0x1418>
					state ++;
    2556:	08 94       	sec
    2558:	81 1c       	adc	r8, r1
    255a:	91 1c       	adc	r9, r1
    255c:	23 01       	movw	r4, r6
    255e:	33 24       	eor	r3, r3
    2560:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef)){
    2562:	c4 01       	movw	r24, r8
    2564:	b3 01       	movw	r22, r6
    2566:	a2 01       	movw	r20, r4
    2568:	0e 94 71 06 	call	0xce2	; 0xce2 <dry_trans>
    256c:	88 23       	and	r24, r24
    256e:	31 f0       	breq	.+12     	; 0x257c <main+0x1432>
					state ++;
    2570:	08 94       	sec
    2572:	81 1c       	adc	r8, r1
    2574:	91 1c       	adc	r9, r1
    2576:	23 01       	movw	r4, r6
    2578:	33 24       	eor	r3, r3
    257a:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    257c:	45 e2       	ldi	r20, 0x25	; 37
    257e:	84 16       	cp	r8, r20
    2580:	91 04       	cpc	r9, r1
    2582:	41 f4       	brne	.+16     	; 0x2594 <main+0x144a>
    2584:	c3 01       	movw	r24, r6
    2586:	84 19       	sub	r24, r4
    2588:	95 09       	sbc	r25, r5
    258a:	0b 97       	sbiw	r24, 0x0b	; 11
    258c:	1c f0       	brlt	.+6      	; 0x2594 <main+0x144a>
    258e:	16 e2       	ldi	r17, 0x26	; 38
    2590:	81 2e       	mov	r8, r17
    2592:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    2594:	c4 01       	movw	r24, r8
    2596:	b3 01       	movw	r22, r6
    2598:	ae 01       	movw	r20, r28
    259a:	4e 5f       	subi	r20, 0xFE	; 254
    259c:	5f 4f       	sbci	r21, 0xFF	; 255
    259e:	9e 01       	movw	r18, r28
    25a0:	2c 5f       	subi	r18, 0xFC	; 252
    25a2:	3f 4f       	sbci	r19, 0xFF	; 255
    25a4:	8e 01       	movw	r16, r28
    25a6:	0a 5f       	subi	r16, 0xFA	; 250
    25a8:	1f 4f       	sbci	r17, 0xFF	; 255
    25aa:	b8 e0       	ldi	r27, 0x08	; 8
    25ac:	eb 2e       	mov	r14, r27
    25ae:	f1 2c       	mov	r15, r1
    25b0:	ec 0e       	add	r14, r28
    25b2:	fd 1e       	adc	r15, r29
    25b4:	aa e0       	ldi	r26, 0x0A	; 10
    25b6:	ca 2e       	mov	r12, r26
    25b8:	d1 2c       	mov	r13, r1
    25ba:	cc 0e       	add	r12, r28
    25bc:	dd 1e       	adc	r13, r29
    25be:	5e 01       	movw	r10, r28
    25c0:	08 94       	sec
    25c2:	a1 1c       	adc	r10, r1
    25c4:	b1 1c       	adc	r11, r1
    25c6:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    25ca:	c4 01       	movw	r24, r8
    25cc:	b3 01       	movw	r22, r6
    25ce:	ae 01       	movw	r20, r28
    25d0:	4e 5f       	subi	r20, 0xFE	; 254
    25d2:	5f 4f       	sbci	r21, 0xFF	; 255
    25d4:	9e 01       	movw	r18, r28
    25d6:	2c 5f       	subi	r18, 0xFC	; 252
    25d8:	3f 4f       	sbci	r19, 0xFF	; 255
    25da:	8e 01       	movw	r16, r28
    25dc:	0a 5f       	subi	r16, 0xFA	; 250
    25de:	1f 4f       	sbci	r17, 0xFF	; 255
    25e0:	f8 e0       	ldi	r31, 0x08	; 8
    25e2:	ef 2e       	mov	r14, r31
    25e4:	f1 2c       	mov	r15, r1
    25e6:	ec 0e       	add	r14, r28
    25e8:	fd 1e       	adc	r15, r29
    25ea:	ea e0       	ldi	r30, 0x0A	; 10
    25ec:	ce 2e       	mov	r12, r30
    25ee:	d1 2c       	mov	r13, r1
    25f0:	cc 0e       	add	r12, r28
    25f2:	dd 1e       	adc	r13, r29
    25f4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <brush1_action>
				if(state == B1STOP2){
    25f8:	51 e1       	ldi	r21, 0x11	; 17
    25fa:	85 16       	cp	r8, r21
    25fc:	91 04       	cpc	r9, r1
    25fe:	79 f4       	brne	.+30     	; 0x261e <main+0x14d4>
					brush1Motor = 0;
    2600:	1f 82       	std	Y+7, r1	; 0x07
    2602:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    2604:	1d 82       	std	Y+5, r1	; 0x05
    2606:	1c 82       	std	Y+4, r1	; 0x04
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    2608:	80 91 e9 08 	lds	r24, 0x08E9
    260c:	8e 7f       	andi	r24, 0xFE	; 254
    260e:	80 93 e9 08 	sts	0x08E9, r24
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2612:	80 91 ec 08 	lds	r24, 0x08EC
    2616:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2618:	80 62       	ori	r24, 0x20	; 32
    261a:	80 93 ec 08 	sts	0x08EC, r24
				}
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    261e:	c4 01       	movw	r24, r8
    2620:	b3 01       	movw	r22, r6
    2622:	ae 01       	movw	r20, r28
    2624:	4e 5f       	subi	r20, 0xFE	; 254
    2626:	5f 4f       	sbci	r21, 0xFF	; 255
    2628:	9e 01       	movw	r18, r28
    262a:	2c 5f       	subi	r18, 0xFC	; 252
    262c:	3f 4f       	sbci	r19, 0xFF	; 255
    262e:	8e 01       	movw	r16, r28
    2630:	0a 5f       	subi	r16, 0xFA	; 250
    2632:	1f 4f       	sbci	r17, 0xFF	; 255
    2634:	b8 e0       	ldi	r27, 0x08	; 8
    2636:	eb 2e       	mov	r14, r27
    2638:	f1 2c       	mov	r15, r1
    263a:	ec 0e       	add	r14, r28
    263c:	fd 1e       	adc	r15, r29
    263e:	aa e0       	ldi	r26, 0x0A	; 10
    2640:	ca 2e       	mov	r12, r26
    2642:	d1 2c       	mov	r13, r1
    2644:	cc 0e       	add	r12, r28
    2646:	dd 1e       	adc	r13, r29
    2648:	0e 94 92 02 	call	0x524	; 0x524 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    264c:	c4 01       	movw	r24, r8
    264e:	b3 01       	movw	r22, r6
    2650:	ae 01       	movw	r20, r28
    2652:	4e 5f       	subi	r20, 0xFE	; 254
    2654:	5f 4f       	sbci	r21, 0xFF	; 255
    2656:	9e 01       	movw	r18, r28
    2658:	2c 5f       	subi	r18, 0xFC	; 252
    265a:	3f 4f       	sbci	r19, 0xFF	; 255
    265c:	8e 01       	movw	r16, r28
    265e:	0a 5f       	subi	r16, 0xFA	; 250
    2660:	1f 4f       	sbci	r17, 0xFF	; 255
    2662:	f8 e0       	ldi	r31, 0x08	; 8
    2664:	ef 2e       	mov	r14, r31
    2666:	f1 2c       	mov	r15, r1
    2668:	ec 0e       	add	r14, r28
    266a:	fd 1e       	adc	r15, r29
    266c:	ea e0       	ldi	r30, 0x0A	; 10
    266e:	ce 2e       	mov	r12, r30
    2670:	d1 2c       	mov	r13, r1
    2672:	cc 0e       	add	r12, r28
    2674:	dd 1e       	adc	r13, r29
    2676:	0e 94 82 03 	call	0x704	; 0x704 <dry_action>
				if(state == END){
    267a:	85 e2       	ldi	r24, 0x25	; 37
    267c:	88 16       	cp	r8, r24
    267e:	91 04       	cpc	r9, r1
    2680:	71 f4       	brne	.+28     	; 0x269e <main+0x1554>
					plateLoadMotor = 0;
    2682:	1b 82       	std	Y+3, r1	; 0x03
    2684:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2686:	80 91 ee 08 	lds	r24, 0x08EE
    268a:	8b 7f       	andi	r24, 0xFB	; 251
    268c:	80 93 ee 08 	sts	0x08EE, r24
					if(print35 == 1){
    2690:	22 20       	and	r2, r2
    2692:	29 f0       	breq	.+10     	; 0x269e <main+0x1554>
						//clear();
						serial_print_string("END OF CYCLE");
    2694:	89 ee       	ldi	r24, 0xE9	; 233
    2696:	93 e0       	ldi	r25, 0x03	; 3
    2698:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
    269c:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    269e:	4a 81       	ldd	r20, Y+2	; 0x02
    26a0:	5b 81       	ldd	r21, Y+3	; 0x03
    26a2:	2c 81       	ldd	r18, Y+4	; 0x04
    26a4:	3d 81       	ldd	r19, Y+5	; 0x05
    26a6:	0e 81       	ldd	r16, Y+6	; 0x06
    26a8:	1f 81       	ldd	r17, Y+7	; 0x07
    26aa:	e8 84       	ldd	r14, Y+8	; 0x08
    26ac:	f9 84       	ldd	r15, Y+9	; 0x09
    26ae:	ca 84       	ldd	r12, Y+10	; 0x0a
    26b0:	db 84       	ldd	r13, Y+11	; 0x0b
    26b2:	c3 01       	movw	r24, r6
    26b4:	b2 01       	movw	r22, r4
    26b6:	0e 94 07 07 	call	0xe0e	; 0xe0e <motor_and_write>

				serial_check(); counter++;
    26ba:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <serial_check>
    26be:	80 91 14 04 	lds	r24, 0x0414
    26c2:	90 91 15 04 	lds	r25, 0x0415
    26c6:	6f 93       	push	r22
    26c8:	64 e0       	ldi	r22, 0x04	; 4
    26ca:	6a 95       	dec	r22
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <main+0x1580>
    26ce:	6f 91       	pop	r22
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	c9 f7       	brne	.-14     	; 0x26c6 <main+0x157c>

		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("BOTH B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    26d4:	96 e2       	ldi	r25, 0x26	; 38
    26d6:	89 16       	cp	r8, r25
    26d8:	91 04       	cpc	r9, r1
    26da:	09 f4       	brne	.+2      	; 0x26de <main+0x1594>
    26dc:	88 c1       	rjmp	.+784    	; 0x29ee <main+0x18a4>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    26de:	08 94       	sec
    26e0:	61 1c       	adc	r6, r1
    26e2:	71 1c       	adc	r7, r1
    26e4:	b7 ce       	rjmp	.-658    	; 0x2454 <main+0x130a>
				delay_us(delayTimeMicroSeconds);
   		 	}
		}

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    26ec:	88 23       	and	r24, r24
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <main+0x15a8>
    26f0:	7e c1       	rjmp	.+764    	; 0x29ee <main+0x18a4>
    26f2:	82 e0       	ldi	r24, 0x02	; 2
    26f4:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    26f8:	88 23       	and	r24, r24
    26fa:	09 f4       	brne	.+2      	; 0x26fe <main+0x15b4>
    26fc:	78 c1       	rjmp	.+752    	; 0x29ee <main+0x18a4>
			lcd_goto_xy(7,0);
    26fe:	87 e0       	ldi	r24, 0x07	; 7
    2700:	60 e0       	ldi	r22, 0x00	; 0
    2702:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
			serial_print_string("STEP");
    2706:	80 ec       	ldi	r24, 0xC0	; 192
    2708:	93 e0       	ldi	r25, 0x03	; 3
    270a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9d 83       	std	Y+5, r25	; 0x05
    2714:	8c 83       	std	Y+4, r24	; 0x04
    2716:	80 91 ee 08 	lds	r24, 0x08EE
    271a:	80 62       	ori	r24, 0x20	; 32
    271c:	80 93 ee 08 	sts	0x08EE, r24
    2720:	88 24       	eor	r8, r8
    2722:	99 24       	eor	r9, r9
    2724:	66 24       	eor	r6, r6
    2726:	77 24       	eor	r7, r7
    2728:	1a 8a       	std	Y+18, r1	; 0x12
    272a:	19 8a       	std	Y+17, r1	; 0x11
    272c:	44 24       	eor	r4, r4
    272e:	55 24       	eor	r5, r5
    2730:	22 24       	eor	r2, r2
    2732:	23 94       	inc	r2
    2734:	33 24       	eor	r3, r3
    2736:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    2738:	84 e4       	ldi	r24, 0x44	; 68
    273a:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				i2c_write(0x0);								// write command byte
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2744:	85 e4       	ldi	r24, 0x45	; 69
    2746:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    274a:	0e 94 08 01 	call	0x210	; 0x210 <i2c_readAck>
    274e:	80 93 e8 08 	sts	0x08E8, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2752:	0e 94 12 01 	call	0x224	; 0x224 <i2c_readNak>
    2756:	80 93 eb 08 	sts	0x08EB, r24
  	 	     	i2c_stop();								// set stop condition = release bus 		
    275a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
				
				if(state != INIT && printVar){
    275e:	81 14       	cp	r8, r1
    2760:	91 04       	cpc	r9, r1
    2762:	39 f1       	breq	.+78     	; 0x27b2 <main+0x1668>
    2764:	33 20       	and	r3, r3
    2766:	29 f1       	breq	.+74     	; 0x27b2 <main+0x1668>
					lcd_goto_xy(6,1);
    2768:	86 e0       	ldi	r24, 0x06	; 6
    276a:	61 e0       	ldi	r22, 0x01	; 1
    276c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
					serial_print_string("     ");
    2770:	8c ec       	ldi	r24, 0xCC	; 204
    2772:	93 e0       	ldi	r25, 0x03	; 3
    2774:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
					lcd_goto_xy(0,1);
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	61 e0       	ldi	r22, 0x01	; 1
    277c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <lcd_goto_xy>
					serial_print_string_noCRLF("STATE: ");
    2780:	82 ed       	ldi	r24, 0xD2	; 210
    2782:	93 e0       	ldi	r25, 0x03	; 3
    2784:	0e 94 be 07 	call	0xf7c	; 0xf7c <serial_print_string_noCRLF>
					serial_print_int(state);
    2788:	c4 01       	movw	r24, r8
    278a:	0e 94 87 08 	call	0x110e	; 0x110e <serial_print_int>
					serial_print_string_noCRLF("=> ");
    278e:	8a ed       	ldi	r24, 0xDA	; 218
    2790:	93 e0       	ldi	r25, 0x03	; 3
    2792:	0e 94 be 07 	call	0xf7c	; 0xf7c <serial_print_string_noCRLF>
					serial_print_string(run_states_msg_list[state]);
    2796:	f4 01       	movw	r30, r8
    2798:	ee 0f       	add	r30, r30
    279a:	ff 1f       	adc	r31, r31
    279c:	ef 5c       	subi	r30, 0xCF	; 207
    279e:	f7 4f       	sbci	r31, 0xF7	; 247
    27a0:	80 81       	ld	r24, Z
    27a2:	91 81       	ldd	r25, Z+1	; 0x01
    27a4:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
					serial_print_string(" ");
    27a8:	8e ed       	ldi	r24, 0xDE	; 222
    27aa:	93 e0       	ldi	r25, 0x03	; 3
    27ac:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
    27b0:	33 24       	eor	r3, r3

					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    27b2:	c3 01       	movw	r24, r6
    27b4:	be 01       	movw	r22, r28
    27b6:	64 5f       	subi	r22, 0xF4	; 244
    27b8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ba:	0e 94 2f 04 	call	0x85e	; 0x85e <button_debounce>
    27be:	18 2f       	mov	r17, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    27c0:	c4 01       	movw	r24, r8
    27c2:	61 2f       	mov	r22, r17
    27c4:	a3 01       	movw	r20, r6
    27c6:	92 01       	movw	r18, r4
    27c8:	0e 94 9e 04 	call	0x93c	; 0x93c <init_trans>
    27cc:	88 23       	and	r24, r24
    27ce:	39 f0       	breq	.+14     	; 0x27de <main+0x1694>
    27d0:	23 01       	movw	r4, r6
    27d2:	10 e0       	ldi	r17, 0x00	; 0
    27d4:	37 e2       	ldi	r19, 0x27	; 39
    27d6:	83 2e       	mov	r8, r19
    27d8:	91 2c       	mov	r9, r1
    27da:	33 24       	eor	r3, r3
    27dc:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    27de:	c4 01       	movw	r24, r8
    27e0:	b3 01       	movw	r22, r6
    27e2:	a2 01       	movw	r20, r4
    27e4:	0e 94 25 05 	call	0xa4a	; 0xa4a <firstB_trans>
    27e8:	88 23       	and	r24, r24
    27ea:	71 f4       	brne	.+28     	; 0x2808 <main+0x16be>
					state = WAIT;
					if(state != B1STOP1 && state != CLEAN1_3)
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > kWait){
    27ec:	21 e1       	ldi	r18, 0x11	; 17
    27ee:	82 16       	cp	r8, r18
    27f0:	91 04       	cpc	r9, r1
    27f2:	81 f4       	brne	.+32     	; 0x2814 <main+0x16ca>
    27f4:	93 01       	movw	r18, r6
    27f6:	24 19       	sub	r18, r4
    27f8:	35 09       	sbc	r19, r5
    27fa:	80 91 fe 03 	lds	r24, 0x03FE
    27fe:	90 91 ff 03 	lds	r25, 0x03FF
    2802:	82 17       	cp	r24, r18
    2804:	93 07       	cpc	r25, r19
    2806:	34 f4       	brge	.+12     	; 0x2814 <main+0x16ca>
    2808:	23 01       	movw	r4, r6
    280a:	27 e2       	ldi	r18, 0x27	; 39
    280c:	82 2e       	mov	r8, r18
    280e:	91 2c       	mov	r9, r1
    2810:	33 24       	eor	r3, r3
    2812:	33 94       	inc	r3
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    2814:	c4 01       	movw	r24, r8
    2816:	b3 01       	movw	r22, r6
    2818:	a2 01       	movw	r20, r4
    281a:	0e 94 c3 05 	call	0xb86	; 0xb86 <secondB_trans>
    281e:	88 23       	and	r24, r24
    2820:	31 f0       	breq	.+12     	; 0x282e <main+0x16e4>
    2822:	23 01       	movw	r4, r6
    2824:	97 e2       	ldi	r25, 0x27	; 39
    2826:	89 2e       	mov	r8, r25
    2828:	91 2c       	mov	r9, r1
    282a:	33 24       	eor	r3, r3
    282c:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}
				
				//Dry
				if(dry_trans(state, counter, counterRef)){
    282e:	c4 01       	movw	r24, r8
    2830:	b3 01       	movw	r22, r6
    2832:	a2 01       	movw	r20, r4
    2834:	0e 94 71 06 	call	0xce2	; 0xce2 <dry_trans>
    2838:	88 23       	and	r24, r24
    283a:	21 f0       	breq	.+8      	; 0x2844 <main+0x16fa>
    283c:	23 01       	movw	r4, r6
    283e:	33 24       	eor	r3, r3
    2840:	33 94       	inc	r3
    2842:	11 c0       	rjmp	.+34     	; 0x2866 <main+0x171c>
					state = WAIT;
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    2844:	35 e2       	ldi	r19, 0x25	; 37
    2846:	83 16       	cp	r8, r19
    2848:	91 04       	cpc	r9, r1
    284a:	49 f4       	brne	.+18     	; 0x285e <main+0x1714>
    284c:	c3 01       	movw	r24, r6
    284e:	84 19       	sub	r24, r4
    2850:	95 09       	sbc	r25, r5
    2852:	0b 97       	sbiw	r24, 0x0b	; 11
    2854:	4c f1       	brlt	.+82     	; 0x28a8 <main+0x175e>
    2856:	86 e2       	ldi	r24, 0x26	; 38
    2858:	88 2e       	mov	r8, r24
    285a:	91 2c       	mov	r9, r1
    285c:	25 c0       	rjmp	.+74     	; 0x28a8 <main+0x175e>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    285e:	47 e2       	ldi	r20, 0x27	; 39
    2860:	84 16       	cp	r8, r20
    2862:	91 04       	cpc	r9, r1
    2864:	09 f5       	brne	.+66     	; 0x28a8 <main+0x175e>
    2866:	11 23       	and	r17, r17
    2868:	21 f4       	brne	.+8      	; 0x2872 <main+0x1728>
    286a:	07 e2       	ldi	r16, 0x27	; 39
    286c:	80 2e       	mov	r8, r16
    286e:	91 2c       	mov	r9, r1
    2870:	11 c0       	rjmp	.+34     	; 0x2894 <main+0x174a>
					state = ++last;
    2872:	89 89       	ldd	r24, Y+17	; 0x11
    2874:	9a 89       	ldd	r25, Y+18	; 0x12
    2876:	01 96       	adiw	r24, 0x01	; 1
    2878:	9a 8b       	std	Y+18, r25	; 0x12
    287a:	89 8b       	std	Y+17, r24	; 0x11
				}


				//state actions
						
				if(state == WAIT){
    287c:	87 32       	cpi	r24, 0x27	; 39
    287e:	91 05       	cpc	r25, r1
    2880:	21 f0       	breq	.+8      	; 0x288a <main+0x1740>
    2882:	4c 01       	movw	r8, r24
    2884:	33 24       	eor	r3, r3
    2886:	33 94       	inc	r3
    2888:	0f c0       	rjmp	.+30     	; 0x28a8 <main+0x175e>
    288a:	17 e2       	ldi	r17, 0x27	; 39
    288c:	81 2e       	mov	r8, r17
    288e:	91 2c       	mov	r9, r1
    2890:	33 24       	eor	r3, r3
    2892:	33 94       	inc	r3
					plateLoadMotor = 0;
    2894:	1b 82       	std	Y+3, r1	; 0x03
    2896:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    2898:	1d 82       	std	Y+5, r1	; 0x05
    289a:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    289c:	1f 82       	std	Y+7, r1	; 0x07
    289e:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    28a0:	19 86       	std	Y+9, r1	; 0x09
    28a2:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    28a4:	1b 86       	std	Y+11, r1	; 0x0b
    28a6:	1a 86       	std	Y+10, r1	; 0x0a
				}
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    28a8:	c4 01       	movw	r24, r8
    28aa:	b3 01       	movw	r22, r6
    28ac:	ae 01       	movw	r20, r28
    28ae:	4e 5f       	subi	r20, 0xFE	; 254
    28b0:	5f 4f       	sbci	r21, 0xFF	; 255
    28b2:	9e 01       	movw	r18, r28
    28b4:	2c 5f       	subi	r18, 0xFC	; 252
    28b6:	3f 4f       	sbci	r19, 0xFF	; 255
    28b8:	8e 01       	movw	r16, r28
    28ba:	0a 5f       	subi	r16, 0xFA	; 250
    28bc:	1f 4f       	sbci	r17, 0xFF	; 255
    28be:	b8 e0       	ldi	r27, 0x08	; 8
    28c0:	eb 2e       	mov	r14, r27
    28c2:	f1 2c       	mov	r15, r1
    28c4:	ec 0e       	add	r14, r28
    28c6:	fd 1e       	adc	r15, r29
    28c8:	aa e0       	ldi	r26, 0x0A	; 10
    28ca:	ca 2e       	mov	r12, r26
    28cc:	d1 2c       	mov	r13, r1
    28ce:	cc 0e       	add	r12, r28
    28d0:	dd 1e       	adc	r13, r29
    28d2:	5e 01       	movw	r10, r28
    28d4:	08 94       	sec
    28d6:	a1 1c       	adc	r10, r1
    28d8:	b1 1c       	adc	r11, r1
    28da:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    28de:	c4 01       	movw	r24, r8
    28e0:	b3 01       	movw	r22, r6
    28e2:	ae 01       	movw	r20, r28
    28e4:	4e 5f       	subi	r20, 0xFE	; 254
    28e6:	5f 4f       	sbci	r21, 0xFF	; 255
    28e8:	9e 01       	movw	r18, r28
    28ea:	2c 5f       	subi	r18, 0xFC	; 252
    28ec:	3f 4f       	sbci	r19, 0xFF	; 255
    28ee:	8e 01       	movw	r16, r28
    28f0:	0a 5f       	subi	r16, 0xFA	; 250
    28f2:	1f 4f       	sbci	r17, 0xFF	; 255
    28f4:	f8 e0       	ldi	r31, 0x08	; 8
    28f6:	ef 2e       	mov	r14, r31
    28f8:	f1 2c       	mov	r15, r1
    28fa:	ec 0e       	add	r14, r28
    28fc:	fd 1e       	adc	r15, r29
    28fe:	ea e0       	ldi	r30, 0x0A	; 10
    2900:	ce 2e       	mov	r12, r30
    2902:	d1 2c       	mov	r13, r1
    2904:	cc 0e       	add	r12, r28
    2906:	dd 1e       	adc	r13, r29
    2908:	0e 94 63 01 	call	0x2c6	; 0x2c6 <brush1_action>
				if(state == B1STOP2){
    290c:	91 e1       	ldi	r25, 0x11	; 17
    290e:	89 16       	cp	r8, r25
    2910:	91 04       	cpc	r9, r1
    2912:	51 f4       	brne	.+20     	; 0x2928 <main+0x17de>
					brush1Motor = 0;
    2914:	1f 82       	std	Y+7, r1	; 0x07
    2916:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    2918:	1d 82       	std	Y+5, r1	; 0x05
    291a:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    291c:	80 91 ec 08 	lds	r24, 0x08EC
    2920:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2922:	80 62       	ori	r24, 0x20	; 32
    2924:	80 93 ec 08 	sts	0x08EC, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2928:	c4 01       	movw	r24, r8
    292a:	b3 01       	movw	r22, r6
    292c:	ae 01       	movw	r20, r28
    292e:	4e 5f       	subi	r20, 0xFE	; 254
    2930:	5f 4f       	sbci	r21, 0xFF	; 255
    2932:	9e 01       	movw	r18, r28
    2934:	2c 5f       	subi	r18, 0xFC	; 252
    2936:	3f 4f       	sbci	r19, 0xFF	; 255
    2938:	8e 01       	movw	r16, r28
    293a:	0a 5f       	subi	r16, 0xFA	; 250
    293c:	1f 4f       	sbci	r17, 0xFF	; 255
    293e:	b8 e0       	ldi	r27, 0x08	; 8
    2940:	eb 2e       	mov	r14, r27
    2942:	f1 2c       	mov	r15, r1
    2944:	ec 0e       	add	r14, r28
    2946:	fd 1e       	adc	r15, r29
    2948:	aa e0       	ldi	r26, 0x0A	; 10
    294a:	ca 2e       	mov	r12, r26
    294c:	d1 2c       	mov	r13, r1
    294e:	cc 0e       	add	r12, r28
    2950:	dd 1e       	adc	r13, r29
    2952:	0e 94 92 02 	call	0x524	; 0x524 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2956:	c4 01       	movw	r24, r8
    2958:	b3 01       	movw	r22, r6
    295a:	ae 01       	movw	r20, r28
    295c:	4e 5f       	subi	r20, 0xFE	; 254
    295e:	5f 4f       	sbci	r21, 0xFF	; 255
    2960:	9e 01       	movw	r18, r28
    2962:	2c 5f       	subi	r18, 0xFC	; 252
    2964:	3f 4f       	sbci	r19, 0xFF	; 255
    2966:	8e 01       	movw	r16, r28
    2968:	0a 5f       	subi	r16, 0xFA	; 250
    296a:	1f 4f       	sbci	r17, 0xFF	; 255
    296c:	f8 e0       	ldi	r31, 0x08	; 8
    296e:	ef 2e       	mov	r14, r31
    2970:	f1 2c       	mov	r15, r1
    2972:	ec 0e       	add	r14, r28
    2974:	fd 1e       	adc	r15, r29
    2976:	ea e0       	ldi	r30, 0x0A	; 10
    2978:	ce 2e       	mov	r12, r30
    297a:	d1 2c       	mov	r13, r1
    297c:	cc 0e       	add	r12, r28
    297e:	dd 1e       	adc	r13, r29
    2980:	0e 94 82 03 	call	0x704	; 0x704 <dry_action>
				if(state == END){
    2984:	25 e2       	ldi	r18, 0x25	; 37
    2986:	82 16       	cp	r8, r18
    2988:	91 04       	cpc	r9, r1
    298a:	71 f4       	brne	.+28     	; 0x29a8 <main+0x185e>
					plateLoadMotor = 0;
    298c:	1b 82       	std	Y+3, r1	; 0x03
    298e:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2990:	80 91 ee 08 	lds	r24, 0x08EE
    2994:	8b 7f       	andi	r24, 0xFB	; 251
    2996:	80 93 ee 08 	sts	0x08EE, r24
					if(print35 == 1){
    299a:	22 20       	and	r2, r2
    299c:	29 f0       	breq	.+10     	; 0x29a8 <main+0x185e>
						//clear();
						serial_print_string("END OF CYCLE");
    299e:	89 ee       	ldi	r24, 0xE9	; 233
    29a0:	93 e0       	ldi	r25, 0x03	; 3
    29a2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
    29a6:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    29a8:	4a 81       	ldd	r20, Y+2	; 0x02
    29aa:	5b 81       	ldd	r21, Y+3	; 0x03
    29ac:	2c 81       	ldd	r18, Y+4	; 0x04
    29ae:	3d 81       	ldd	r19, Y+5	; 0x05
    29b0:	0e 81       	ldd	r16, Y+6	; 0x06
    29b2:	1f 81       	ldd	r17, Y+7	; 0x07
    29b4:	e8 84       	ldd	r14, Y+8	; 0x08
    29b6:	f9 84       	ldd	r15, Y+9	; 0x09
    29b8:	ca 84       	ldd	r12, Y+10	; 0x0a
    29ba:	db 84       	ldd	r13, Y+11	; 0x0b
    29bc:	c3 01       	movw	r24, r6
    29be:	b2 01       	movw	r22, r4
    29c0:	0e 94 07 07 	call	0xe0e	; 0xe0e <motor_and_write>

				serial_check(); counter++;
    29c4:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <serial_check>
    29c8:	80 91 14 04 	lds	r24, 0x0414
    29cc:	90 91 15 04 	lds	r25, 0x0415
    29d0:	6f 93       	push	r22
    29d2:	64 e0       	ldi	r22, 0x04	; 4
    29d4:	6a 95       	dec	r22
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <main+0x188a>
    29d8:	6f 91       	pop	r22
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	c9 f7       	brne	.-14     	; 0x29d0 <main+0x1886>

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("STEP");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    29de:	36 e2       	ldi	r19, 0x26	; 38
    29e0:	83 16       	cp	r8, r19
    29e2:	91 04       	cpc	r9, r1
    29e4:	21 f0       	breq	.+8      	; 0x29ee <main+0x18a4>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    29e6:	08 94       	sec
    29e8:	61 1c       	adc	r6, r1
    29ea:	71 1c       	adc	r7, r1
    29ec:	a5 ce       	rjmp	.-694    	; 0x2738 <main+0x15ee>
				delay_us(delayTimeMicroSeconds);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    29ee:	80 91 ee 08 	lds	r24, 0x08EE
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    29f2:	8b 7d       	andi	r24, 0xDB	; 219
    29f4:	80 93 ee 08 	sts	0x08EE, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    29f8:	80 91 e9 08 	lds	r24, 0x08E9
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    29fc:	86 7b       	andi	r24, 0xB6	; 182
    29fe:	80 93 e9 08 	sts	0x08E9, r24
		
		i2c_start(I2C1+I2C_WRITE);
    2a02:	80 e4       	ldi	r24, 0x40	; 64
    2a04:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
		i2c_write(0x2);
    2a08:	82 e0       	ldi	r24, 0x02	; 2
    2a0a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    2a0e:	80 91 ee 08 	lds	r24, 0x08EE
    2a12:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    2a16:	80 91 e9 08 	lds	r24, 0x08E9
    2a1a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_stop();
    2a1e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
	}
	serial_print_string("END");
    2a22:	86 ef       	ldi	r24, 0xF6	; 246
    2a24:	93 e0       	ldi	r25, 0x03	; 3
    2a26:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_print_string>
    2a2a:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <main+0x166>
	}
    2a2e:	4f ef       	ldi	r20, 0xFF	; 255
    2a30:	5f ef       	ldi	r21, 0xFF	; 255
    2a32:	58 8b       	std	Y+16, r21	; 0x10
    2a34:	4f 87       	std	Y+15, r20	; 0x0f
    2a36:	23 01       	movw	r4, r6
    2a38:	bb 24       	eor	r11, r11
    2a3a:	b3 94       	inc	r11
    2a3c:	80 e3       	ldi	r24, 0x30	; 48
    2a3e:	88 2e       	mov	r8, r24
    2a40:	91 2c       	mov	r9, r1
    2a42:	80 c9       	rjmp	.-3328   	; 0x1d44 <main+0xbfa>

00002a44 <_ZN12OrangutanLCDC2Ev>:
    2a44:	08 95       	ret

00002a46 <_ZN12OrangutanLCDC1Ev>:
    2a46:	08 95       	ret

00002a48 <void_getchar>:
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	08 95       	ret

00002a4e <_ZN12OrangutanLCD8busyWaitEv>:
    2a4e:	ef 92       	push	r14
    2a50:	ff 92       	push	r15
    2a52:	0f 93       	push	r16
    2a54:	1f 93       	push	r17
    2a56:	67 b1       	in	r22, 0x07	; 7
    2a58:	3d 98       	cbi	0x07, 5	; 7
    2a5a:	28 98       	cbi	0x05, 0	; 5
    2a5c:	29 9a       	sbi	0x05, 1	; 5
    2a5e:	e0 90 b8 08 	lds	r14, 0x08B8
    2a62:	f0 90 b9 08 	lds	r15, 0x08B9
    2a66:	00 91 ba 08 	lds	r16, 0x08BA
    2a6a:	10 91 bb 08 	lds	r17, 0x08BB
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	41 e0       	ldi	r20, 0x01	; 1
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	ca 01       	movw	r24, r20
    2a78:	6f 93       	push	r22
    2a7a:	64 e0       	ldi	r22, 0x04	; 4
    2a7c:	6a 95       	dec	r22
    2a7e:	f1 f7       	brne	.-4      	; 0x2a7c <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    2a80:	6f 91       	pop	r22
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	c9 f7       	brne	.-14     	; 0x2a78 <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    2a86:	2a 9a       	sbi	0x05, 2	; 5
    2a88:	ca 01       	movw	r24, r20
    2a8a:	6f 93       	push	r22
    2a8c:	64 e0       	ldi	r22, 0x04	; 4
    2a8e:	6a 95       	dec	r22
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <_ZN12OrangutanLCD8busyWaitEv+0x40>
    2a92:	6f 91       	pop	r22
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	c9 f7       	brne	.-14     	; 0x2a8a <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    2a98:	86 b1       	in	r24, 0x06	; 6
    2a9a:	2a 98       	cbi	0x05, 2	; 5
    2a9c:	fa 01       	movw	r30, r20
    2a9e:	6f 93       	push	r22
    2aa0:	64 e0       	ldi	r22, 0x04	; 4
    2aa2:	6a 95       	dec	r22
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    2aa6:	6f 91       	pop	r22
    2aa8:	31 97       	sbiw	r30, 0x01	; 1
    2aaa:	c9 f7       	brne	.-14     	; 0x2a9e <_ZN12OrangutanLCD8busyWaitEv+0x50>
    2aac:	2a 9a       	sbi	0x05, 2	; 5
    2aae:	fa 01       	movw	r30, r20
    2ab0:	6f 93       	push	r22
    2ab2:	64 e0       	ldi	r22, 0x04	; 4
    2ab4:	6a 95       	dec	r22
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    2ab8:	6f 91       	pop	r22
    2aba:	31 97       	sbiw	r30, 0x01	; 1
    2abc:	c9 f7       	brne	.-14     	; 0x2ab0 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    2abe:	2a 98       	cbi	0x05, 2	; 5
    2ac0:	2c 5f       	subi	r18, 0xFC	; 252
    2ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac4:	85 ff       	sbrs	r24, 5
    2ac6:	09 c0       	rjmp	.+18     	; 0x2ada <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    2ac8:	c9 01       	movw	r24, r18
    2aca:	a0 e0       	ldi	r26, 0x00	; 0
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	8e 15       	cp	r24, r14
    2ad0:	9f 05       	cpc	r25, r15
    2ad2:	a0 07       	cpc	r26, r16
    2ad4:	b1 07       	cpc	r27, r17
    2ad6:	08 f4       	brcc	.+2      	; 0x2ada <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    2ad8:	ce cf       	rjmp	.-100    	; 0x2a76 <_ZN12OrangutanLCD8busyWaitEv+0x28>
    2ada:	c9 01       	movw	r24, r18
    2adc:	a0 e0       	ldi	r26, 0x00	; 0
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	8e 15       	cp	r24, r14
    2ae2:	9f 05       	cpc	r25, r15
    2ae4:	a0 07       	cpc	r26, r16
    2ae6:	b1 07       	cpc	r27, r17
    2ae8:	28 f0       	brcs	.+10     	; 0x2af4 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    2aea:	82 e3       	ldi	r24, 0x32	; 50
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	a0 e0       	ldi	r26, 0x00	; 0
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	04 c0       	rjmp	.+8      	; 0x2afc <_ZN12OrangutanLCD8busyWaitEv+0xae>
    2af4:	80 e3       	ldi	r24, 0x30	; 48
    2af6:	95 e7       	ldi	r25, 0x75	; 117
    2af8:	a0 e0       	ldi	r26, 0x00	; 0
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	80 93 b8 08 	sts	0x08B8, r24
    2b00:	90 93 b9 08 	sts	0x08B9, r25
    2b04:	a0 93 ba 08 	sts	0x08BA, r26
    2b08:	b0 93 bb 08 	sts	0x08BB, r27
    2b0c:	67 b9       	out	0x07, r22	; 7
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	ff 90       	pop	r15
    2b14:	ef 90       	pop	r14
    2b16:	08 95       	ret

00002b18 <_ZN12OrangutanLCD8sendDataEh>:
    2b18:	28 b1       	in	r18, 0x08	; 8
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	8f 70       	andi	r24, 0x0F	; 15
    2b1e:	90 70       	andi	r25, 0x00	; 0
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	23 7c       	andi	r18, 0xC3	; 195
    2b2a:	28 2b       	or	r18, r24
    2b2c:	28 b9       	out	0x08, r18	; 8
    2b2e:	2a 9a       	sbi	0x05, 2	; 5
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	fc 01       	movw	r30, r24
    2b36:	6f 93       	push	r22
    2b38:	64 e0       	ldi	r22, 0x04	; 4
    2b3a:	6a 95       	dec	r22
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <_ZN12OrangutanLCD8sendDataEh+0x22>
    2b3e:	6f 91       	pop	r22
    2b40:	31 97       	sbiw	r30, 0x01	; 1
    2b42:	c9 f7       	brne	.-14     	; 0x2b36 <_ZN12OrangutanLCD8sendDataEh+0x1e>
    2b44:	2a 98       	cbi	0x05, 2	; 5
    2b46:	6f 93       	push	r22
    2b48:	64 e0       	ldi	r22, 0x04	; 4
    2b4a:	6a 95       	dec	r22
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <_ZN12OrangutanLCD8sendDataEh+0x32>
    2b4e:	6f 91       	pop	r22
    2b50:	01 97       	sbiw	r24, 0x01	; 1
    2b52:	c9 f7       	brne	.-14     	; 0x2b46 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    2b54:	08 95       	ret

00002b56 <_ZN12OrangutanLCD10initPrintfEv>:
    2b56:	80 91 b4 08 	lds	r24, 0x08B4
    2b5a:	90 91 b5 08 	lds	r25, 0x08B5
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	11 f0       	breq	.+4      	; 0x2b66 <_ZN12OrangutanLCD10initPrintfEv+0x10>
    2b62:	0e 94 de 22 	call	0x45bc	; 0x45bc <free>
    2b66:	80 91 81 08 	lds	r24, 0x0881
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	01 97       	sbiw	r24, 0x01	; 1
    2b6e:	20 91 82 08 	lds	r18, 0x0882
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	ac 01       	movw	r20, r24
    2b76:	42 9f       	mul	r20, r18
    2b78:	c0 01       	movw	r24, r0
    2b7a:	43 9f       	mul	r20, r19
    2b7c:	90 0d       	add	r25, r0
    2b7e:	52 9f       	mul	r21, r18
    2b80:	90 0d       	add	r25, r0
    2b82:	11 24       	eor	r1, r1
    2b84:	0e 94 31 22 	call	0x4462	; 0x4462 <malloc>
    2b88:	90 93 b5 08 	sts	0x08B5, r25
    2b8c:	80 93 b4 08 	sts	0x08B4, r24
    2b90:	00 97       	sbiw	r24, 0x00	; 0
    2b92:	29 f1       	breq	.+74     	; 0x2bde <_ZN12OrangutanLCD10initPrintfEv+0x88>
    2b94:	60 e0       	ldi	r22, 0x00	; 0
    2b96:	70 e2       	ldi	r23, 0x20	; 32
    2b98:	08 c0       	rjmp	.+16     	; 0x2baa <_ZN12OrangutanLCD10initPrintfEv+0x54>
    2b9a:	e0 91 b4 08 	lds	r30, 0x08B4
    2b9e:	f0 91 b5 08 	lds	r31, 0x08B5
    2ba2:	e4 0f       	add	r30, r20
    2ba4:	f5 1f       	adc	r31, r21
    2ba6:	70 83       	st	Z, r23
    2ba8:	6f 5f       	subi	r22, 0xFF	; 255
    2baa:	46 2f       	mov	r20, r22
    2bac:	50 e0       	ldi	r21, 0x00	; 0
    2bae:	80 91 81 08 	lds	r24, 0x0881
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	20 91 82 08 	lds	r18, 0x0882
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	e2 9f       	mul	r30, r18
    2bc0:	c0 01       	movw	r24, r0
    2bc2:	e3 9f       	mul	r30, r19
    2bc4:	90 0d       	add	r25, r0
    2bc6:	f2 9f       	mul	r31, r18
    2bc8:	90 0d       	add	r25, r0
    2bca:	11 24       	eor	r1, r1
    2bcc:	48 17       	cp	r20, r24
    2bce:	59 07       	cpc	r21, r25
    2bd0:	24 f3       	brlt	.-56     	; 0x2b9a <_ZN12OrangutanLCD10initPrintfEv+0x44>
    2bd2:	83 e1       	ldi	r24, 0x13	; 19
    2bd4:	98 e1       	ldi	r25, 0x18	; 24
    2bd6:	64 e2       	ldi	r22, 0x24	; 36
    2bd8:	75 e1       	ldi	r23, 0x15	; 21
    2bda:	0e 94 57 23 	call	0x46ae	; 0x46ae <fdevopen>
    2bde:	08 95       	ret

00002be0 <_ZN12OrangutanLCD10initPrintfEhh>:
    2be0:	80 93 82 08 	sts	0x0882, r24
    2be4:	60 93 81 08 	sts	0x0881, r22
    2be8:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <_ZN12OrangutanLCD10initPrintfEv>
    2bec:	08 95       	ret

00002bee <lcd_init_printf_with_dimensions>:
    2bee:	80 93 82 08 	sts	0x0882, r24
    2bf2:	60 93 81 08 	sts	0x0881, r22
    2bf6:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <_ZN12OrangutanLCD10initPrintfEv>
    2bfa:	08 95       	ret

00002bfc <lcd_init_printf>:
    2bfc:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <_ZN12OrangutanLCD10initPrintfEv>
    2c00:	08 95       	ret

00002c02 <_ZN12OrangutanLCD5init2Ev>:
    2c02:	3d 98       	cbi	0x07, 5	; 7
    2c04:	45 9a       	sbi	0x08, 5	; 8
    2c06:	80 e3       	ldi	r24, 0x30	; 48
    2c08:	95 e7       	ldi	r25, 0x75	; 117
    2c0a:	a0 e0       	ldi	r26, 0x00	; 0
    2c0c:	b0 e0       	ldi	r27, 0x00	; 0
    2c0e:	80 93 b8 08 	sts	0x08B8, r24
    2c12:	90 93 b9 08 	sts	0x08B9, r25
    2c16:	a0 93 ba 08 	sts	0x08BA, r26
    2c1a:	b0 93 bb 08 	sts	0x08BB, r27
    2c1e:	20 9a       	sbi	0x04, 0	; 4
    2c20:	21 9a       	sbi	0x04, 1	; 4
    2c22:	22 9a       	sbi	0x04, 2	; 4
    2c24:	8e e1       	ldi	r24, 0x1E	; 30
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <delay_ms>
    2c2c:	83 e0       	ldi	r24, 0x03	; 3
    2c2e:	0e 94 59 19 	call	0x32b2	; 0x32b2 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2c32:	86 e0       	ldi	r24, 0x06	; 6
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <delay_ms>
    2c3a:	83 e0       	ldi	r24, 0x03	; 3
    2c3c:	0e 94 59 19 	call	0x32b2	; 0x32b2 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2c40:	82 e0       	ldi	r24, 0x02	; 2
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <delay_ms>
    2c48:	83 e0       	ldi	r24, 0x03	; 3
    2c4a:	0e 94 59 19 	call	0x32b2	; 0x32b2 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2c4e:	82 e0       	ldi	r24, 0x02	; 2
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <delay_ms>
    2c56:	82 e0       	ldi	r24, 0x02	; 2
    2c58:	0e 94 59 19 	call	0x32b2	; 0x32b2 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2c5c:	82 e0       	ldi	r24, 0x02	; 2
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <delay_ms>
    2c64:	88 e2       	ldi	r24, 0x28	; 40
    2c66:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD8send_cmdEh>
    2c6a:	88 e0       	ldi	r24, 0x08	; 8
    2c6c:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD8send_cmdEh>
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD8send_cmdEh>
    2c76:	86 e0       	ldi	r24, 0x06	; 6
    2c78:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD8send_cmdEh>
    2c7c:	8c e0       	ldi	r24, 0x0C	; 12
    2c7e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD8send_cmdEh>
    2c82:	08 95       	ret

00002c84 <_ZN12OrangutanLCD4initEv>:
    2c84:	80 91 bc 08 	lds	r24, 0x08BC
    2c88:	88 23       	and	r24, r24
    2c8a:	29 f4       	brne	.+10     	; 0x2c96 <_ZN12OrangutanLCD4initEv+0x12>
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	80 93 bc 08 	sts	0x08BC, r24
    2c92:	0e 94 01 16 	call	0x2c02	; 0x2c02 <_ZN12OrangutanLCD5init2Ev>
    2c96:	08 95       	ret

00002c98 <_ZN12OrangutanLCD4sendEhhh>:
    2c98:	ff 92       	push	r15
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	08 2f       	mov	r16, r24
    2ca0:	16 2f       	mov	r17, r22
    2ca2:	f4 2e       	mov	r15, r20
    2ca4:	0e 94 42 16 	call	0x2c84	; 0x2c84 <_ZN12OrangutanLCD4initEv>
    2ca8:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_ZN12OrangutanLCD8busyWaitEv>
    2cac:	37 b1       	in	r19, 0x07	; 7
    2cae:	28 b1       	in	r18, 0x08	; 8
    2cb0:	29 98       	cbi	0x05, 1	; 5
    2cb2:	11 23       	and	r17, r17
    2cb4:	11 f0       	breq	.+4      	; 0x2cba <_ZN12OrangutanLCD4sendEhhh+0x22>
    2cb6:	28 9a       	sbi	0x05, 0	; 5
    2cb8:	01 c0       	rjmp	.+2      	; 0x2cbc <_ZN12OrangutanLCD4sendEhhh+0x24>
    2cba:	28 98       	cbi	0x05, 0	; 5
    2cbc:	87 b1       	in	r24, 0x07	; 7
    2cbe:	8c 63       	ori	r24, 0x3C	; 60
    2cc0:	87 b9       	out	0x07, r24	; 7
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	f8 16       	cp	r15, r24
    2cc6:	e1 f0       	breq	.+56     	; 0x2d00 <_ZN12OrangutanLCD4sendEhhh+0x68>
    2cc8:	88 b1       	in	r24, 0x08	; 8
    2cca:	90 2f       	mov	r25, r16
    2ccc:	92 95       	swap	r25
    2cce:	9f 70       	andi	r25, 0x0F	; 15
    2cd0:	99 0f       	add	r25, r25
    2cd2:	99 0f       	add	r25, r25
    2cd4:	83 7c       	andi	r24, 0xC3	; 195
    2cd6:	98 2b       	or	r25, r24
    2cd8:	98 b9       	out	0x08, r25	; 8
    2cda:	2a 9a       	sbi	0x05, 2	; 5
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	6f 93       	push	r22
    2ce4:	64 e0       	ldi	r22, 0x04	; 4
    2ce6:	6a 95       	dec	r22
    2ce8:	f1 f7       	brne	.-4      	; 0x2ce6 <_ZN12OrangutanLCD4sendEhhh+0x4e>
    2cea:	6f 91       	pop	r22
    2cec:	31 97       	sbiw	r30, 0x01	; 1
    2cee:	c9 f7       	brne	.-14     	; 0x2ce2 <_ZN12OrangutanLCD4sendEhhh+0x4a>
    2cf0:	2a 98       	cbi	0x05, 2	; 5
    2cf2:	6f 93       	push	r22
    2cf4:	64 e0       	ldi	r22, 0x04	; 4
    2cf6:	6a 95       	dec	r22
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <_ZN12OrangutanLCD4sendEhhh+0x5e>
    2cfa:	6f 91       	pop	r22
    2cfc:	01 97       	sbiw	r24, 0x01	; 1
    2cfe:	c9 f7       	brne	.-14     	; 0x2cf2 <_ZN12OrangutanLCD4sendEhhh+0x5a>
    2d00:	88 b1       	in	r24, 0x08	; 8
    2d02:	0f 70       	andi	r16, 0x0F	; 15
    2d04:	00 0f       	add	r16, r16
    2d06:	00 0f       	add	r16, r16
    2d08:	83 7c       	andi	r24, 0xC3	; 195
    2d0a:	80 2b       	or	r24, r16
    2d0c:	88 b9       	out	0x08, r24	; 8
    2d0e:	2a 9a       	sbi	0x05, 2	; 5
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	fc 01       	movw	r30, r24
    2d16:	6f 93       	push	r22
    2d18:	64 e0       	ldi	r22, 0x04	; 4
    2d1a:	6a 95       	dec	r22
    2d1c:	f1 f7       	brne	.-4      	; 0x2d1a <_ZN12OrangutanLCD4sendEhhh+0x82>
    2d1e:	6f 91       	pop	r22
    2d20:	31 97       	sbiw	r30, 0x01	; 1
    2d22:	c9 f7       	brne	.-14     	; 0x2d16 <_ZN12OrangutanLCD4sendEhhh+0x7e>
    2d24:	2a 98       	cbi	0x05, 2	; 5
    2d26:	6f 93       	push	r22
    2d28:	64 e0       	ldi	r22, 0x04	; 4
    2d2a:	6a 95       	dec	r22
    2d2c:	f1 f7       	brne	.-4      	; 0x2d2a <_ZN12OrangutanLCD4sendEhhh+0x92>
    2d2e:	6f 91       	pop	r22
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	c9 f7       	brne	.-14     	; 0x2d26 <_ZN12OrangutanLCD4sendEhhh+0x8e>
    2d34:	37 b9       	out	0x07, r19	; 7
    2d36:	28 b9       	out	0x08, r18	; 8
    2d38:	1f 91       	pop	r17
    2d3a:	0f 91       	pop	r16
    2d3c:	ff 90       	pop	r15
    2d3e:	08 95       	ret

00002d40 <_ZN12OrangutanLCD8send_cmdEh>:
    2d40:	60 e0       	ldi	r22, 0x00	; 0
    2d42:	42 e0       	ldi	r20, 0x02	; 2
    2d44:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <_ZN12OrangutanLCD4sendEhhh>
    2d48:	08 95       	ret

00002d4a <_ZN12OrangutanLCD10moveCursorEhh>:
    2d4a:	0f 93       	push	r16
    2d4c:	1f 93       	push	r17
    2d4e:	08 2f       	mov	r16, r24
    2d50:	16 2f       	mov	r17, r22
    2d52:	08 c0       	rjmp	.+16     	; 0x2d64 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    2d54:	00 23       	and	r16, r16
    2d56:	11 f4       	brne	.+4      	; 0x2d5c <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    2d58:	80 e1       	ldi	r24, 0x10	; 16
    2d5a:	01 c0       	rjmp	.+2      	; 0x2d5e <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    2d5c:	84 e1       	ldi	r24, 0x14	; 20
    2d5e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD8send_cmdEh>
    2d62:	11 50       	subi	r17, 0x01	; 1
    2d64:	11 23       	and	r17, r17
    2d66:	b1 f7       	brne	.-20     	; 0x2d54 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    2d68:	1f 91       	pop	r17
    2d6a:	0f 91       	pop	r16
    2d6c:	08 95       	ret

00002d6e <lcd_move_cursor>:
    2d6e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_ZN12OrangutanLCD10moveCursorEhh>
    2d72:	08 95       	ret

00002d74 <_ZN12OrangutanLCD10hideCursorEv>:
    2d74:	8c e0       	ldi	r24, 0x0C	; 12
    2d76:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD8send_cmdEh>
    2d7a:	08 95       	ret

00002d7c <lcd_hide_cursor>:
    2d7c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <_ZN12OrangutanLCD10hideCursorEv>
    2d80:	08 95       	ret

00002d82 <_ZN12OrangutanLCD10showCursorEh>:
    2d82:	81 30       	cpi	r24, 0x01	; 1
    2d84:	11 f4       	brne	.+4      	; 0x2d8a <_ZN12OrangutanLCD10showCursorEh+0x8>
    2d86:	8f e0       	ldi	r24, 0x0F	; 15
    2d88:	01 c0       	rjmp	.+2      	; 0x2d8c <_ZN12OrangutanLCD10showCursorEh+0xa>
    2d8a:	8e e0       	ldi	r24, 0x0E	; 14
    2d8c:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD8send_cmdEh>
    2d90:	08 95       	ret

00002d92 <lcd_show_cursor>:
    2d92:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <_ZN12OrangutanLCD10showCursorEh>
    2d96:	08 95       	ret

00002d98 <_ZN12OrangutanLCD6gotoXYEhh>:
    2d98:	a4 e0       	ldi	r26, 0x04	; 4
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	e2 ed       	ldi	r30, 0xD2	; 210
    2d9e:	f6 e1       	ldi	r31, 0x16	; 22
    2da0:	0c 94 f4 21 	jmp	0x43e8	; 0x43e8 <__prologue_saves__+0x1c>
    2da4:	18 2f       	mov	r17, r24
    2da6:	06 2f       	mov	r16, r22
    2da8:	80 e8       	ldi	r24, 0x80	; 128
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	80 ec       	ldi	r24, 0xC0	; 192
    2dae:	8a 83       	std	Y+2, r24	; 0x02
    2db0:	84 e9       	ldi	r24, 0x94	; 148
    2db2:	8b 83       	std	Y+3, r24	; 0x03
    2db4:	84 ed       	ldi	r24, 0xD4	; 212
    2db6:	8c 83       	std	Y+4, r24	; 0x04
    2db8:	fe 01       	movw	r30, r28
    2dba:	e6 0f       	add	r30, r22
    2dbc:	f1 1d       	adc	r31, r1
    2dbe:	81 81       	ldd	r24, Z+1	; 0x01
    2dc0:	81 0f       	add	r24, r17
    2dc2:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD8send_cmdEh>
    2dc6:	10 93 b7 08 	sts	0x08B7, r17
    2dca:	00 93 b6 08 	sts	0x08B6, r16
    2dce:	24 96       	adiw	r28, 0x04	; 4
    2dd0:	e4 e0       	ldi	r30, 0x04	; 4
    2dd2:	0c 94 10 22 	jmp	0x4420	; 0x4420 <__epilogue_restores__+0x1c>

00002dd6 <lcd_goto_xy>:
    2dd6:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_ZN12OrangutanLCD6gotoXYEhh>
    2dda:	08 95       	ret

00002ddc <_ZN12OrangutanLCD5clearEv>:
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD8send_cmdEh>
    2de2:	80 91 b4 08 	lds	r24, 0x08B4
    2de6:	90 91 b5 08 	lds	r25, 0x08B5
    2dea:	89 2b       	or	r24, r25
    2dec:	19 f1       	breq	.+70     	; 0x2e34 <_ZN12OrangutanLCD5clearEv+0x58>
    2dee:	60 e0       	ldi	r22, 0x00	; 0
    2df0:	70 e2       	ldi	r23, 0x20	; 32
    2df2:	08 c0       	rjmp	.+16     	; 0x2e04 <_ZN12OrangutanLCD5clearEv+0x28>
    2df4:	e0 91 b4 08 	lds	r30, 0x08B4
    2df8:	f0 91 b5 08 	lds	r31, 0x08B5
    2dfc:	e4 0f       	add	r30, r20
    2dfe:	f5 1f       	adc	r31, r21
    2e00:	70 83       	st	Z, r23
    2e02:	6f 5f       	subi	r22, 0xFF	; 255
    2e04:	46 2f       	mov	r20, r22
    2e06:	50 e0       	ldi	r21, 0x00	; 0
    2e08:	80 91 81 08 	lds	r24, 0x0881
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	20 91 82 08 	lds	r18, 0x0882
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	fc 01       	movw	r30, r24
    2e18:	e2 9f       	mul	r30, r18
    2e1a:	c0 01       	movw	r24, r0
    2e1c:	e3 9f       	mul	r30, r19
    2e1e:	90 0d       	add	r25, r0
    2e20:	f2 9f       	mul	r31, r18
    2e22:	90 0d       	add	r25, r0
    2e24:	11 24       	eor	r1, r1
    2e26:	48 17       	cp	r20, r24
    2e28:	59 07       	cpc	r21, r25
    2e2a:	24 f3       	brlt	.-56     	; 0x2df4 <_ZN12OrangutanLCD5clearEv+0x18>
    2e2c:	10 92 b7 08 	sts	0x08B7, r1
    2e30:	10 92 b6 08 	sts	0x08B6, r1
    2e34:	08 95       	ret

00002e36 <clear>:
    2e36:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <_ZN12OrangutanLCD5clearEv>
    2e3a:	08 95       	ret

00002e3c <_ZN12OrangutanLCD9send_dataEh>:
    2e3c:	61 e0       	ldi	r22, 0x01	; 1
    2e3e:	42 e0       	ldi	r20, 0x02	; 2
    2e40:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <_ZN12OrangutanLCD4sendEhhh>
    2e44:	08 95       	ret

00002e46 <_ZN12OrangutanLCD11printBinaryEh>:
    2e46:	0f 93       	push	r16
    2e48:	1f 93       	push	r17
    2e4a:	cf 93       	push	r28
    2e4c:	df 93       	push	r29
    2e4e:	00 e0       	ldi	r16, 0x00	; 0
    2e50:	10 e8       	ldi	r17, 0x80	; 128
    2e52:	c8 2f       	mov	r28, r24
    2e54:	d0 e0       	ldi	r29, 0x00	; 0
    2e56:	81 2f       	mov	r24, r17
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	8c 23       	and	r24, r28
    2e5c:	9d 23       	and	r25, r29
    2e5e:	89 2b       	or	r24, r25
    2e60:	11 f0       	breq	.+4      	; 0x2e66 <_ZN12OrangutanLCD11printBinaryEh+0x20>
    2e62:	81 e3       	ldi	r24, 0x31	; 49
    2e64:	01 c0       	rjmp	.+2      	; 0x2e68 <_ZN12OrangutanLCD11printBinaryEh+0x22>
    2e66:	80 e3       	ldi	r24, 0x30	; 48
    2e68:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN12OrangutanLCD9send_dataEh>
    2e6c:	0f 5f       	subi	r16, 0xFF	; 255
    2e6e:	08 30       	cpi	r16, 0x08	; 8
    2e70:	11 f0       	breq	.+4      	; 0x2e76 <_ZN12OrangutanLCD11printBinaryEh+0x30>
    2e72:	16 95       	lsr	r17
    2e74:	f0 cf       	rjmp	.-32     	; 0x2e56 <_ZN12OrangutanLCD11printBinaryEh+0x10>
    2e76:	df 91       	pop	r29
    2e78:	cf 91       	pop	r28
    2e7a:	1f 91       	pop	r17
    2e7c:	0f 91       	pop	r16
    2e7e:	08 95       	ret

00002e80 <print_binary>:
    2e80:	0e 94 23 17 	call	0x2e46	; 0x2e46 <_ZN12OrangutanLCD11printBinaryEh>
    2e84:	08 95       	ret

00002e86 <_ZN12OrangutanLCD14printHexNibbleEh>:
    2e86:	8a 30       	cpi	r24, 0x0A	; 10
    2e88:	10 f4       	brcc	.+4      	; 0x2e8e <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    2e8a:	80 5d       	subi	r24, 0xD0	; 208
    2e8c:	01 c0       	rjmp	.+2      	; 0x2e90 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    2e8e:	89 5c       	subi	r24, 0xC9	; 201
    2e90:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN12OrangutanLCD9send_dataEh>
    2e94:	08 95       	ret

00002e96 <_ZN12OrangutanLCD8printHexEh>:
    2e96:	1f 93       	push	r17
    2e98:	18 2f       	mov	r17, r24
    2e9a:	82 95       	swap	r24
    2e9c:	8f 70       	andi	r24, 0x0F	; 15
    2e9e:	0e 94 43 17 	call	0x2e86	; 0x2e86 <_ZN12OrangutanLCD14printHexNibbleEh>
    2ea2:	81 2f       	mov	r24, r17
    2ea4:	8f 70       	andi	r24, 0x0F	; 15
    2ea6:	0e 94 43 17 	call	0x2e86	; 0x2e86 <_ZN12OrangutanLCD14printHexNibbleEh>
    2eaa:	1f 91       	pop	r17
    2eac:	08 95       	ret

00002eae <_ZN12OrangutanLCD8printHexEj>:
    2eae:	1f 93       	push	r17
    2eb0:	18 2f       	mov	r17, r24
    2eb2:	89 2f       	mov	r24, r25
    2eb4:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <_ZN12OrangutanLCD8printHexEh>
    2eb8:	81 2f       	mov	r24, r17
    2eba:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <_ZN12OrangutanLCD8printHexEh>
    2ebe:	1f 91       	pop	r17
    2ec0:	08 95       	ret

00002ec2 <print_hex>:
    2ec2:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZN12OrangutanLCD8printHexEj>
    2ec6:	08 95       	ret

00002ec8 <print_hex_byte>:
    2ec8:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <_ZN12OrangutanLCD8printHexEh>
    2ecc:	08 95       	ret

00002ece <_ZN12OrangutanLCD5printEm>:
    2ece:	6f 92       	push	r6
    2ed0:	7f 92       	push	r7
    2ed2:	8f 92       	push	r8
    2ed4:	9f 92       	push	r9
    2ed6:	af 92       	push	r10
    2ed8:	bf 92       	push	r11
    2eda:	cf 92       	push	r12
    2edc:	df 92       	push	r13
    2ede:	ff 92       	push	r15
    2ee0:	0f 93       	push	r16
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	2a 97       	sbiw	r28, 0x0a	; 10
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	5b 01       	movw	r10, r22
    2ef8:	6c 01       	movw	r12, r24
    2efa:	0a e0       	ldi	r16, 0x0A	; 10
    2efc:	3e 01       	movw	r6, r28
    2efe:	08 94       	sec
    2f00:	61 1c       	adc	r6, r1
    2f02:	71 1c       	adc	r7, r1
    2f04:	fa 2c       	mov	r15, r10
    2f06:	c6 01       	movw	r24, r12
    2f08:	b5 01       	movw	r22, r10
    2f0a:	2a e0       	ldi	r18, 0x0A	; 10
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e0       	ldi	r20, 0x00	; 0
    2f10:	50 e0       	ldi	r21, 0x00	; 0
    2f12:	0e 94 c4 21 	call	0x4388	; 0x4388 <__udivmodsi4>
    2f16:	c9 01       	movw	r24, r18
    2f18:	da 01       	movw	r26, r20
    2f1a:	5c 01       	movw	r10, r24
    2f1c:	6d 01       	movw	r12, r26
    2f1e:	01 50       	subi	r16, 0x01	; 1
    2f20:	43 01       	movw	r8, r6
    2f22:	80 0e       	add	r8, r16
    2f24:	91 1c       	adc	r9, r1
    2f26:	80 e3       	ldi	r24, 0x30	; 48
    2f28:	f8 0e       	add	r15, r24
    2f2a:	c6 01       	movw	r24, r12
    2f2c:	b5 01       	movw	r22, r10
    2f2e:	2a e0       	ldi	r18, 0x0A	; 10
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	50 e0       	ldi	r21, 0x00	; 0
    2f36:	0e 94 92 21 	call	0x4324	; 0x4324 <__mulsi3>
    2f3a:	f6 1a       	sub	r15, r22
    2f3c:	f4 01       	movw	r30, r8
    2f3e:	f0 82       	st	Z, r15
    2f40:	a1 14       	cp	r10, r1
    2f42:	b1 04       	cpc	r11, r1
    2f44:	c1 04       	cpc	r12, r1
    2f46:	d1 04       	cpc	r13, r1
    2f48:	e9 f6       	brne	.-70     	; 0x2f04 <_ZN12OrangutanLCD5printEm+0x36>
    2f4a:	08 c0       	rjmp	.+16     	; 0x2f5c <_ZN12OrangutanLCD5printEm+0x8e>
    2f4c:	f6 01       	movw	r30, r12
    2f4e:	e0 0f       	add	r30, r16
    2f50:	f1 1d       	adc	r31, r1
    2f52:	80 81       	ld	r24, Z
    2f54:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN12OrangutanLCD9send_dataEh>
    2f58:	0f 5f       	subi	r16, 0xFF	; 255
    2f5a:	04 c0       	rjmp	.+8      	; 0x2f64 <_ZN12OrangutanLCD5printEm+0x96>
    2f5c:	6e 01       	movw	r12, r28
    2f5e:	08 94       	sec
    2f60:	c1 1c       	adc	r12, r1
    2f62:	d1 1c       	adc	r13, r1
    2f64:	0a 30       	cpi	r16, 0x0A	; 10
    2f66:	90 f3       	brcs	.-28     	; 0x2f4c <_ZN12OrangutanLCD5printEm+0x7e>
    2f68:	2a 96       	adiw	r28, 0x0a	; 10
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	0f 91       	pop	r16
    2f7a:	ff 90       	pop	r15
    2f7c:	df 90       	pop	r13
    2f7e:	cf 90       	pop	r12
    2f80:	bf 90       	pop	r11
    2f82:	af 90       	pop	r10
    2f84:	9f 90       	pop	r9
    2f86:	8f 90       	pop	r8
    2f88:	7f 90       	pop	r7
    2f8a:	6f 90       	pop	r6
    2f8c:	08 95       	ret

00002f8e <print_unsigned_long>:
    2f8e:	0e 94 67 17 	call	0x2ece	; 0x2ece <_ZN12OrangutanLCD5printEm>
    2f92:	08 95       	ret

00002f94 <_ZN12OrangutanLCD5printEl>:
    2f94:	ef 92       	push	r14
    2f96:	ff 92       	push	r15
    2f98:	0f 93       	push	r16
    2f9a:	1f 93       	push	r17
    2f9c:	7b 01       	movw	r14, r22
    2f9e:	8c 01       	movw	r16, r24
    2fa0:	97 ff       	sbrs	r25, 7
    2fa2:	0b c0       	rjmp	.+22     	; 0x2fba <_ZN12OrangutanLCD5printEl+0x26>
    2fa4:	10 95       	com	r17
    2fa6:	00 95       	com	r16
    2fa8:	f0 94       	com	r15
    2faa:	e0 94       	com	r14
    2fac:	e1 1c       	adc	r14, r1
    2fae:	f1 1c       	adc	r15, r1
    2fb0:	01 1d       	adc	r16, r1
    2fb2:	11 1d       	adc	r17, r1
    2fb4:	8d e2       	ldi	r24, 0x2D	; 45
    2fb6:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN12OrangutanLCD9send_dataEh>
    2fba:	c8 01       	movw	r24, r16
    2fbc:	b7 01       	movw	r22, r14
    2fbe:	0e 94 67 17 	call	0x2ece	; 0x2ece <_ZN12OrangutanLCD5printEm>
    2fc2:	1f 91       	pop	r17
    2fc4:	0f 91       	pop	r16
    2fc6:	ff 90       	pop	r15
    2fc8:	ef 90       	pop	r14
    2fca:	08 95       	ret

00002fcc <print_long>:
    2fcc:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <_ZN12OrangutanLCD5printEl>
    2fd0:	08 95       	ret

00002fd2 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    2fd6:	ec 01       	movw	r28, r24
    2fd8:	03 c0       	rjmp	.+6      	; 0x2fe0 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    2fda:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN12OrangutanLCD9send_dataEh>
    2fde:	21 96       	adiw	r28, 0x01	; 1
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	84 91       	lpm	r24, Z+
    2fe4:	88 23       	and	r24, r24
    2fe6:	c9 f7       	brne	.-14     	; 0x2fda <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    2fe8:	df 91       	pop	r29
    2fea:	cf 91       	pop	r28
    2fec:	08 95       	ret

00002fee <print_from_program_space>:
    2fee:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    2ff2:	08 95       	ret

00002ff4 <_ZN12OrangutanLCD5printEPKc>:
    2ff4:	cf 93       	push	r28
    2ff6:	df 93       	push	r29
    2ff8:	ec 01       	movw	r28, r24
    2ffa:	03 c0       	rjmp	.+6      	; 0x3002 <_ZN12OrangutanLCD5printEPKc+0xe>
    2ffc:	21 96       	adiw	r28, 0x01	; 1
    2ffe:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN12OrangutanLCD9send_dataEh>
    3002:	88 81       	ld	r24, Y
    3004:	88 23       	and	r24, r24
    3006:	d1 f7       	brne	.-12     	; 0x2ffc <_ZN12OrangutanLCD5printEPKc+0x8>
    3008:	df 91       	pop	r29
    300a:	cf 91       	pop	r28
    300c:	08 95       	ret

0000300e <_ZN12OrangutanLCD7printInEPKc>:
    300e:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <_ZN12OrangutanLCD5printEPKc>
    3012:	08 95       	ret

00003014 <print>:
    3014:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <_ZN12OrangutanLCD5printEPKc>
    3018:	08 95       	ret

0000301a <_ZN12OrangutanLCD5printEc>:
    301a:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN12OrangutanLCD9send_dataEh>
    301e:	08 95       	ret

00003020 <print_character>:
    3020:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN12OrangutanLCD9send_dataEh>
    3024:	08 95       	ret

00003026 <lcd_putchar>:
    3026:	a0 e0       	ldi	r26, 0x00	; 0
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	e9 e1       	ldi	r30, 0x19	; 25
    302c:	f8 e1       	ldi	r31, 0x18	; 24
    302e:	0c 94 f0 21 	jmp	0x43e0	; 0x43e0 <__prologue_saves__+0x14>
    3032:	e8 2e       	mov	r14, r24
    3034:	80 91 b4 08 	lds	r24, 0x08B4
    3038:	90 91 b5 08 	lds	r25, 0x08B5
    303c:	89 2b       	or	r24, r25
    303e:	09 f4       	brne	.+2      	; 0x3042 <lcd_putchar+0x1c>
    3040:	05 c1       	rjmp	.+522    	; 0x324c <lcd_putchar+0x226>
    3042:	2a e0       	ldi	r18, 0x0A	; 10
    3044:	e2 16       	cp	r14, r18
    3046:	09 f4       	brne	.+2      	; 0x304a <lcd_putchar+0x24>
    3048:	46 c0       	rjmp	.+140    	; 0x30d6 <lcd_putchar+0xb0>
    304a:	38 e0       	ldi	r19, 0x08	; 8
    304c:	e3 16       	cp	r14, r19
    304e:	c9 f4       	brne	.+50     	; 0x3082 <lcd_putchar+0x5c>
    3050:	80 91 b7 08 	lds	r24, 0x08B7
    3054:	81 50       	subi	r24, 0x01	; 1
    3056:	80 93 b7 08 	sts	0x08B7, r24
    305a:	8f 3f       	cpi	r24, 0xFF	; 255
    305c:	51 f4       	brne	.+20     	; 0x3072 <lcd_putchar+0x4c>
    305e:	80 91 b6 08 	lds	r24, 0x08B6
    3062:	81 50       	subi	r24, 0x01	; 1
    3064:	80 93 b6 08 	sts	0x08B6, r24
    3068:	80 91 82 08 	lds	r24, 0x0882
    306c:	81 50       	subi	r24, 0x01	; 1
    306e:	80 93 b7 08 	sts	0x08B7, r24
    3072:	80 91 b6 08 	lds	r24, 0x08B6
    3076:	8f 3f       	cpi	r24, 0xFF	; 255
    3078:	09 f0       	breq	.+2      	; 0x307c <lcd_putchar+0x56>
    307a:	e2 c0       	rjmp	.+452    	; 0x3240 <lcd_putchar+0x21a>
    307c:	10 92 b6 08 	sts	0x08B6, r1
    3080:	dd c0       	rjmp	.+442    	; 0x323c <lcd_putchar+0x216>
    3082:	8e 2d       	mov	r24, r14
    3084:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN12OrangutanLCD9send_dataEh>
    3088:	20 91 b6 08 	lds	r18, 0x08B6
    308c:	22 23       	and	r18, r18
    308e:	c9 f0       	breq	.+50     	; 0x30c2 <lcd_putchar+0x9c>
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	21 50       	subi	r18, 0x01	; 1
    3094:	30 40       	sbci	r19, 0x00	; 0
    3096:	80 91 82 08 	lds	r24, 0x0882
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	ac 01       	movw	r20, r24
    309e:	24 9f       	mul	r18, r20
    30a0:	c0 01       	movw	r24, r0
    30a2:	25 9f       	mul	r18, r21
    30a4:	90 0d       	add	r25, r0
    30a6:	34 9f       	mul	r19, r20
    30a8:	90 0d       	add	r25, r0
    30aa:	11 24       	eor	r1, r1
    30ac:	20 91 b7 08 	lds	r18, 0x08B7
    30b0:	e0 91 b4 08 	lds	r30, 0x08B4
    30b4:	f0 91 b5 08 	lds	r31, 0x08B5
    30b8:	e8 0f       	add	r30, r24
    30ba:	f9 1f       	adc	r31, r25
    30bc:	e2 0f       	add	r30, r18
    30be:	f1 1d       	adc	r31, r1
    30c0:	e0 82       	st	Z, r14
    30c2:	80 91 b7 08 	lds	r24, 0x08B7
    30c6:	8f 5f       	subi	r24, 0xFF	; 255
    30c8:	80 93 b7 08 	sts	0x08B7, r24
    30cc:	90 91 82 08 	lds	r25, 0x0882
    30d0:	89 17       	cp	r24, r25
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <lcd_putchar+0xb0>
    30d4:	bb c0       	rjmp	.+374    	; 0x324c <lcd_putchar+0x226>
    30d6:	40 91 b6 08 	lds	r20, 0x08B6
    30da:	24 2f       	mov	r18, r20
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	80 91 81 08 	lds	r24, 0x0881
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	28 17       	cp	r18, r24
    30e8:	39 07       	cpc	r19, r25
    30ea:	09 f0       	breq	.+2      	; 0x30ee <lcd_putchar+0xc8>
    30ec:	a4 c0       	rjmp	.+328    	; 0x3236 <lcd_putchar+0x210>
    30ee:	c0 e0       	ldi	r28, 0x00	; 0
    30f0:	d0 e0       	ldi	r29, 0x00	; 0
    30f2:	44 c0       	rjmp	.+136    	; 0x317c <lcd_putchar+0x156>
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	6c 2f       	mov	r22, r28
    30f8:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_ZN12OrangutanLCD6gotoXYEhh>
    30fc:	ff 24       	eor	r15, r15
    30fe:	6e 01       	movw	r12, r28
    3100:	08 94       	sec
    3102:	c1 1c       	adc	r12, r1
    3104:	d1 1c       	adc	r13, r1
    3106:	35 c0       	rjmp	.+106    	; 0x3172 <lcd_putchar+0x14c>
    3108:	0f 2d       	mov	r16, r15
    310a:	10 e0       	ldi	r17, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	9c 01       	movw	r18, r24
    3110:	c2 9f       	mul	r28, r18
    3112:	c0 01       	movw	r24, r0
    3114:	c3 9f       	mul	r28, r19
    3116:	90 0d       	add	r25, r0
    3118:	d2 9f       	mul	r29, r18
    311a:	90 0d       	add	r25, r0
    311c:	11 24       	eor	r1, r1
    311e:	e0 91 b4 08 	lds	r30, 0x08B4
    3122:	f0 91 b5 08 	lds	r31, 0x08B5
    3126:	e0 0f       	add	r30, r16
    3128:	f1 1f       	adc	r31, r17
    312a:	e8 0f       	add	r30, r24
    312c:	f9 1f       	adc	r31, r25
    312e:	80 81       	ld	r24, Z
    3130:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN12OrangutanLCD9send_dataEh>
    3134:	e0 91 b4 08 	lds	r30, 0x08B4
    3138:	f0 91 b5 08 	lds	r31, 0x08B5
    313c:	80 91 82 08 	lds	r24, 0x0882
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	c8 9f       	mul	r28, r24
    3144:	d0 01       	movw	r26, r0
    3146:	c9 9f       	mul	r28, r25
    3148:	b0 0d       	add	r27, r0
    314a:	d8 9f       	mul	r29, r24
    314c:	b0 0d       	add	r27, r0
    314e:	11 24       	eor	r1, r1
    3150:	e0 0f       	add	r30, r16
    3152:	f1 1f       	adc	r31, r17
    3154:	ae 0f       	add	r26, r30
    3156:	bf 1f       	adc	r27, r31
    3158:	ac 01       	movw	r20, r24
    315a:	c4 9e       	mul	r12, r20
    315c:	c0 01       	movw	r24, r0
    315e:	c5 9e       	mul	r12, r21
    3160:	90 0d       	add	r25, r0
    3162:	d4 9e       	mul	r13, r20
    3164:	90 0d       	add	r25, r0
    3166:	11 24       	eor	r1, r1
    3168:	e8 0f       	add	r30, r24
    316a:	f9 1f       	adc	r31, r25
    316c:	80 81       	ld	r24, Z
    316e:	8c 93       	st	X, r24
    3170:	f3 94       	inc	r15
    3172:	80 91 82 08 	lds	r24, 0x0882
    3176:	f8 16       	cp	r15, r24
    3178:	38 f2       	brcs	.-114    	; 0x3108 <lcd_putchar+0xe2>
    317a:	e6 01       	movw	r28, r12
    317c:	60 91 81 08 	lds	r22, 0x0881
    3180:	86 2f       	mov	r24, r22
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	02 97       	sbiw	r24, 0x02	; 2
    3186:	c8 17       	cp	r28, r24
    3188:	d9 07       	cpc	r29, r25
    318a:	0c f4       	brge	.+2      	; 0x318e <lcd_putchar+0x168>
    318c:	b3 cf       	rjmp	.-154    	; 0x30f4 <lcd_putchar+0xce>
    318e:	62 30       	cpi	r22, 0x02	; 2
    3190:	08 f4       	brcc	.+2      	; 0x3194 <lcd_putchar+0x16e>
    3192:	40 c0       	rjmp	.+128    	; 0x3214 <lcd_putchar+0x1ee>
    3194:	62 50       	subi	r22, 0x02	; 2
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_ZN12OrangutanLCD6gotoXYEhh>
    319c:	ff 24       	eor	r15, r15
    319e:	40 e2       	ldi	r20, 0x20	; 32
    31a0:	d4 2e       	mov	r13, r20
    31a2:	34 c0       	rjmp	.+104    	; 0x320c <lcd_putchar+0x1e6>
    31a4:	0f 2d       	mov	r16, r15
    31a6:	10 e0       	ldi	r17, 0x00	; 0
    31a8:	80 91 81 08 	lds	r24, 0x0881
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	02 97       	sbiw	r24, 0x02	; 2
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	ac 01       	movw	r20, r24
    31b4:	42 9f       	mul	r20, r18
    31b6:	c0 01       	movw	r24, r0
    31b8:	43 9f       	mul	r20, r19
    31ba:	90 0d       	add	r25, r0
    31bc:	52 9f       	mul	r21, r18
    31be:	90 0d       	add	r25, r0
    31c0:	11 24       	eor	r1, r1
    31c2:	e0 91 b4 08 	lds	r30, 0x08B4
    31c6:	f0 91 b5 08 	lds	r31, 0x08B5
    31ca:	e0 0f       	add	r30, r16
    31cc:	f1 1f       	adc	r31, r17
    31ce:	e8 0f       	add	r30, r24
    31d0:	f9 1f       	adc	r31, r25
    31d2:	80 81       	ld	r24, Z
    31d4:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN12OrangutanLCD9send_dataEh>
    31d8:	20 91 81 08 	lds	r18, 0x0881
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	22 50       	subi	r18, 0x02	; 2
    31e0:	30 40       	sbci	r19, 0x00	; 0
    31e2:	80 91 82 08 	lds	r24, 0x0882
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	ac 01       	movw	r20, r24
    31ea:	24 9f       	mul	r18, r20
    31ec:	c0 01       	movw	r24, r0
    31ee:	25 9f       	mul	r18, r21
    31f0:	90 0d       	add	r25, r0
    31f2:	34 9f       	mul	r19, r20
    31f4:	90 0d       	add	r25, r0
    31f6:	11 24       	eor	r1, r1
    31f8:	e0 91 b4 08 	lds	r30, 0x08B4
    31fc:	f0 91 b5 08 	lds	r31, 0x08B5
    3200:	e0 0f       	add	r30, r16
    3202:	f1 1f       	adc	r31, r17
    3204:	e8 0f       	add	r30, r24
    3206:	f9 1f       	adc	r31, r25
    3208:	d0 82       	st	Z, r13
    320a:	f3 94       	inc	r15
    320c:	20 91 82 08 	lds	r18, 0x0882
    3210:	f2 16       	cp	r15, r18
    3212:	40 f2       	brcs	.-112    	; 0x31a4 <lcd_putchar+0x17e>
    3214:	60 91 81 08 	lds	r22, 0x0881
    3218:	61 50       	subi	r22, 0x01	; 1
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_ZN12OrangutanLCD6gotoXYEhh>
    3220:	00 e0       	ldi	r16, 0x00	; 0
    3222:	04 c0       	rjmp	.+8      	; 0x322c <lcd_putchar+0x206>
    3224:	80 e2       	ldi	r24, 0x20	; 32
    3226:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN12OrangutanLCD9send_dataEh>
    322a:	0f 5f       	subi	r16, 0xFF	; 255
    322c:	80 91 82 08 	lds	r24, 0x0882
    3230:	08 17       	cp	r16, r24
    3232:	c0 f3       	brcs	.-16     	; 0x3224 <lcd_putchar+0x1fe>
    3234:	03 c0       	rjmp	.+6      	; 0x323c <lcd_putchar+0x216>
    3236:	4f 5f       	subi	r20, 0xFF	; 255
    3238:	40 93 b6 08 	sts	0x08B6, r20
    323c:	10 92 b7 08 	sts	0x08B7, r1
    3240:	80 91 b7 08 	lds	r24, 0x08B7
    3244:	60 91 b6 08 	lds	r22, 0x08B6
    3248:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_ZN12OrangutanLCD6gotoXYEhh>
    324c:	2e 2d       	mov	r18, r14
    324e:	33 27       	eor	r19, r19
    3250:	27 fd       	sbrc	r18, 7
    3252:	30 95       	com	r19
    3254:	c9 01       	movw	r24, r18
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	e8 e0       	ldi	r30, 0x08	; 8
    325c:	0c 94 0c 22 	jmp	0x4418	; 0x4418 <__epilogue_restores__+0x14>

00003260 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    3260:	ef 92       	push	r14
    3262:	ff 92       	push	r15
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	cf 93       	push	r28
    326a:	df 93       	push	r29
    326c:	7c 01       	movw	r14, r24
    326e:	06 2f       	mov	r16, r22
    3270:	10 e0       	ldi	r17, 0x00	; 0
    3272:	53 e0       	ldi	r21, 0x03	; 3
    3274:	00 0f       	add	r16, r16
    3276:	11 1f       	adc	r17, r17
    3278:	5a 95       	dec	r21
    327a:	e1 f7       	brne	.-8      	; 0x3274 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    327c:	c0 e0       	ldi	r28, 0x00	; 0
    327e:	d0 e0       	ldi	r29, 0x00	; 0
    3280:	9e 01       	movw	r18, r28
    3282:	20 0f       	add	r18, r16
    3284:	82 2f       	mov	r24, r18
    3286:	80 64       	ori	r24, 0x40	; 64
    3288:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD8send_cmdEh>
    328c:	f7 01       	movw	r30, r14
    328e:	ec 0f       	add	r30, r28
    3290:	fd 1f       	adc	r31, r29
    3292:	e4 91       	lpm	r30, Z+
    3294:	8e 2f       	mov	r24, r30
    3296:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN12OrangutanLCD9send_dataEh>
    329a:	21 96       	adiw	r28, 0x01	; 1
    329c:	c8 30       	cpi	r28, 0x08	; 8
    329e:	d1 05       	cpc	r29, r1
    32a0:	79 f7       	brne	.-34     	; 0x3280 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    32a2:	cd b7       	in	r28, 0x3d	; 61
    32a4:	de b7       	in	r29, 0x3e	; 62
    32a6:	e6 e0       	ldi	r30, 0x06	; 6
    32a8:	0c 94 0e 22 	jmp	0x441c	; 0x441c <__epilogue_restores__+0x18>

000032ac <lcd_load_custom_character>:
    32ac:	0e 94 30 19 	call	0x3260	; 0x3260 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    32b0:	08 95       	ret

000032b2 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    32b2:	60 e0       	ldi	r22, 0x00	; 0
    32b4:	41 e0       	ldi	r20, 0x01	; 1
    32b6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <_ZN12OrangutanLCD4sendEhhh>
    32ba:	08 95       	ret

000032bc <_ZN12OrangutanLCD6scrollEhhj>:
    32bc:	0f 93       	push	r16
    32be:	1f 93       	push	r17
    32c0:	cf 93       	push	r28
    32c2:	df 93       	push	r29
    32c4:	08 2f       	mov	r16, r24
    32c6:	16 2f       	mov	r17, r22
    32c8:	ea 01       	movw	r28, r20
    32ca:	0b c0       	rjmp	.+22     	; 0x32e2 <_ZN12OrangutanLCD6scrollEhhj+0x26>
    32cc:	00 23       	and	r16, r16
    32ce:	11 f4       	brne	.+4      	; 0x32d4 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    32d0:	88 e1       	ldi	r24, 0x18	; 24
    32d2:	01 c0       	rjmp	.+2      	; 0x32d6 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    32d4:	8c e1       	ldi	r24, 0x1C	; 28
    32d6:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD8send_cmdEh>
    32da:	ce 01       	movw	r24, r28
    32dc:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <delay_ms>
    32e0:	11 50       	subi	r17, 0x01	; 1
    32e2:	11 23       	and	r17, r17
    32e4:	99 f7       	brne	.-26     	; 0x32cc <_ZN12OrangutanLCD6scrollEhhj+0x10>
    32e6:	df 91       	pop	r29
    32e8:	cf 91       	pop	r28
    32ea:	1f 91       	pop	r17
    32ec:	0f 91       	pop	r16
    32ee:	08 95       	ret

000032f0 <lcd_scroll>:
    32f0:	0e 94 5e 19 	call	0x32bc	; 0x32bc <_ZN12OrangutanLCD6scrollEhhj>
    32f4:	08 95       	ret

000032f6 <serial_get_mode>:
    32f6:	28 2f       	mov	r18, r24
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	f9 01       	movw	r30, r18
    32fc:	93 e0       	ldi	r25, 0x03	; 3
    32fe:	ee 0f       	add	r30, r30
    3300:	ff 1f       	adc	r31, r31
    3302:	9a 95       	dec	r25
    3304:	e1 f7       	brne	.-8      	; 0x32fe <serial_get_mode+0x8>
    3306:	22 0f       	add	r18, r18
    3308:	33 1f       	adc	r19, r19
    330a:	e2 0f       	add	r30, r18
    330c:	f3 1f       	adc	r31, r19
    330e:	ed 57       	subi	r30, 0x7D	; 125
    3310:	f7 4f       	sbci	r31, 0xF7	; 247
    3312:	80 81       	ld	r24, Z
    3314:	08 95       	ret

00003316 <serial_get_received_bytes>:
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	fc 01       	movw	r30, r24
    331a:	ee 0f       	add	r30, r30
    331c:	ff 1f       	adc	r31, r31
    331e:	ee 0f       	add	r30, r30
    3320:	ff 1f       	adc	r31, r31
    3322:	e8 0f       	add	r30, r24
    3324:	f9 1f       	adc	r31, r25
    3326:	ee 0f       	add	r30, r30
    3328:	ff 1f       	adc	r31, r31
    332a:	eb 57       	subi	r30, 0x7B	; 123
    332c:	f7 4f       	sbci	r31, 0xF7	; 247
    332e:	80 81       	ld	r24, Z
    3330:	08 95       	ret

00003332 <serial_receive_buffer_full>:
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	fc 01       	movw	r30, r24
    3336:	ee 0f       	add	r30, r30
    3338:	ff 1f       	adc	r31, r31
    333a:	ee 0f       	add	r30, r30
    333c:	ff 1f       	adc	r31, r31
    333e:	e8 0f       	add	r30, r24
    3340:	f9 1f       	adc	r31, r25
    3342:	ee 0f       	add	r30, r30
    3344:	ff 1f       	adc	r31, r31
    3346:	eb 57       	subi	r30, 0x7B	; 123
    3348:	f7 4f       	sbci	r31, 0xF7	; 247
    334a:	20 81       	ld	r18, Z
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	fc 01       	movw	r30, r24
    3350:	53 e0       	ldi	r21, 0x03	; 3
    3352:	ee 0f       	add	r30, r30
    3354:	ff 1f       	adc	r31, r31
    3356:	5a 95       	dec	r21
    3358:	e1 f7       	brne	.-8      	; 0x3352 <serial_receive_buffer_full+0x20>
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	e8 0f       	add	r30, r24
    3360:	f9 1f       	adc	r31, r25
    3362:	ed 57       	subi	r30, 0x7D	; 125
    3364:	f7 4f       	sbci	r31, 0xF7	; 247
    3366:	84 81       	ldd	r24, Z+4	; 0x04
    3368:	28 17       	cp	r18, r24
    336a:	09 f4       	brne	.+2      	; 0x336e <serial_receive_buffer_full+0x3c>
    336c:	31 e0       	ldi	r19, 0x01	; 1
    336e:	83 2f       	mov	r24, r19
    3370:	08 95       	ret

00003372 <serial_get_sent_bytes>:
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	f9 01       	movw	r30, r18
    3378:	b3 e0       	ldi	r27, 0x03	; 3
    337a:	ee 0f       	add	r30, r30
    337c:	ff 1f       	adc	r31, r31
    337e:	ba 95       	dec	r27
    3380:	e1 f7       	brne	.-8      	; 0x337a <serial_get_sent_bytes+0x8>
    3382:	22 0f       	add	r18, r18
    3384:	33 1f       	adc	r19, r19
    3386:	e2 0f       	add	r30, r18
    3388:	f3 1f       	adc	r31, r19
    338a:	ed 57       	subi	r30, 0x7D	; 125
    338c:	f7 4f       	sbci	r31, 0xF7	; 247
    338e:	81 81       	ldd	r24, Z+1	; 0x01
    3390:	08 95       	ret

00003392 <serial_send_buffer_empty>:
    3392:	28 2f       	mov	r18, r24
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	f9 01       	movw	r30, r18
    3398:	73 e0       	ldi	r23, 0x03	; 3
    339a:	ee 0f       	add	r30, r30
    339c:	ff 1f       	adc	r31, r31
    339e:	7a 95       	dec	r23
    33a0:	e1 f7       	brne	.-8      	; 0x339a <serial_send_buffer_empty+0x8>
    33a2:	22 0f       	add	r18, r18
    33a4:	33 1f       	adc	r19, r19
    33a6:	e2 0f       	add	r30, r18
    33a8:	f3 1f       	adc	r31, r19
    33aa:	ed 57       	subi	r30, 0x7D	; 125
    33ac:	f7 4f       	sbci	r31, 0xF7	; 247
    33ae:	91 81       	ldd	r25, Z+1	; 0x01
    33b0:	40 e0       	ldi	r20, 0x00	; 0
    33b2:	28 2f       	mov	r18, r24
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	f9 01       	movw	r30, r18
    33b8:	53 e0       	ldi	r21, 0x03	; 3
    33ba:	ee 0f       	add	r30, r30
    33bc:	ff 1f       	adc	r31, r31
    33be:	5a 95       	dec	r21
    33c0:	e1 f7       	brne	.-8      	; 0x33ba <serial_send_buffer_empty+0x28>
    33c2:	22 0f       	add	r18, r18
    33c4:	33 1f       	adc	r19, r19
    33c6:	e2 0f       	add	r30, r18
    33c8:	f3 1f       	adc	r31, r19
    33ca:	ed 57       	subi	r30, 0x7D	; 125
    33cc:	f7 4f       	sbci	r31, 0xF7	; 247
    33ce:	83 81       	ldd	r24, Z+3	; 0x03
    33d0:	98 17       	cp	r25, r24
    33d2:	09 f4       	brne	.+2      	; 0x33d6 <serial_send_buffer_empty+0x44>
    33d4:	41 e0       	ldi	r20, 0x01	; 1
    33d6:	84 2f       	mov	r24, r20
    33d8:	08 95       	ret

000033da <_ZN15OrangutanSerialC2Ev>:
    33da:	08 95       	ret

000033dc <_ZN15OrangutanSerialC1Ev>:
    33dc:	08 95       	ret

000033de <_ZN15OrangutanSerial8initPortEh>:
    33de:	88 23       	and	r24, r24
    33e0:	21 f0       	breq	.+8      	; 0x33ea <_ZN15OrangutanSerial8initPortEh+0xc>
    33e2:	81 30       	cpi	r24, 0x01	; 1
    33e4:	09 f0       	breq	.+2      	; 0x33e8 <_ZN15OrangutanSerial8initPortEh+0xa>
    33e6:	44 c0       	rjmp	.+136    	; 0x3470 <_ZN15OrangutanSerial8initPortEh+0x92>
    33e8:	1d c0       	rjmp	.+58     	; 0x3424 <_ZN15OrangutanSerial8initPortEh+0x46>
    33ea:	20 91 83 08 	lds	r18, 0x0883
    33ee:	22 23       	and	r18, r18
    33f0:	11 f4       	brne	.+4      	; 0x33f6 <_ZN15OrangutanSerial8initPortEh+0x18>
    33f2:	88 e9       	ldi	r24, 0x98	; 152
    33f4:	01 c0       	rjmp	.+2      	; 0x33f8 <_ZN15OrangutanSerial8initPortEh+0x1a>
    33f6:	88 e1       	ldi	r24, 0x18	; 24
    33f8:	80 93 c1 00 	sts	0x00C1, r24
    33fc:	80 91 89 08 	lds	r24, 0x0889
    3400:	90 91 8a 08 	lds	r25, 0x088A
    3404:	89 2b       	or	r24, r25
    3406:	61 f1       	breq	.+88     	; 0x3460 <_ZN15OrangutanSerial8initPortEh+0x82>
    3408:	90 91 84 08 	lds	r25, 0x0884
    340c:	80 91 86 08 	lds	r24, 0x0886
    3410:	98 17       	cp	r25, r24
    3412:	30 f5       	brcc	.+76     	; 0x3460 <_ZN15OrangutanSerial8initPortEh+0x82>
    3414:	22 23       	and	r18, r18
    3416:	21 f5       	brne	.+72     	; 0x3460 <_ZN15OrangutanSerial8initPortEh+0x82>
    3418:	80 91 c1 00 	lds	r24, 0x00C1
    341c:	80 62       	ori	r24, 0x20	; 32
    341e:	80 93 c1 00 	sts	0x00C1, r24
    3422:	1c c0       	rjmp	.+56     	; 0x345c <_ZN15OrangutanSerial8initPortEh+0x7e>
    3424:	20 91 8d 08 	lds	r18, 0x088D
    3428:	22 23       	and	r18, r18
    342a:	11 f4       	brne	.+4      	; 0x3430 <_ZN15OrangutanSerial8initPortEh+0x52>
    342c:	88 e9       	ldi	r24, 0x98	; 152
    342e:	01 c0       	rjmp	.+2      	; 0x3432 <_ZN15OrangutanSerial8initPortEh+0x54>
    3430:	88 e1       	ldi	r24, 0x18	; 24
    3432:	80 93 c9 00 	sts	0x00C9, r24
    3436:	80 91 93 08 	lds	r24, 0x0893
    343a:	90 91 94 08 	lds	r25, 0x0894
    343e:	89 2b       	or	r24, r25
    3440:	99 f0       	breq	.+38     	; 0x3468 <_ZN15OrangutanSerial8initPortEh+0x8a>
    3442:	90 91 8e 08 	lds	r25, 0x088E
    3446:	80 91 90 08 	lds	r24, 0x0890
    344a:	98 17       	cp	r25, r24
    344c:	68 f4       	brcc	.+26     	; 0x3468 <_ZN15OrangutanSerial8initPortEh+0x8a>
    344e:	22 23       	and	r18, r18
    3450:	59 f4       	brne	.+22     	; 0x3468 <_ZN15OrangutanSerial8initPortEh+0x8a>
    3452:	80 91 c9 00 	lds	r24, 0x00C9
    3456:	80 62       	ori	r24, 0x20	; 32
    3458:	80 93 c9 00 	sts	0x00C9, r24
    345c:	78 94       	sei
    345e:	08 95       	ret
    3460:	80 91 c1 00 	lds	r24, 0x00C1
    3464:	8f 7d       	andi	r24, 0xDF	; 223
    3466:	db cf       	rjmp	.-74     	; 0x341e <_ZN15OrangutanSerial8initPortEh+0x40>
    3468:	80 91 c9 00 	lds	r24, 0x00C9
    346c:	8f 7d       	andi	r24, 0xDF	; 223
    346e:	f4 cf       	rjmp	.-24     	; 0x3458 <_ZN15OrangutanSerial8initPortEh+0x7a>
    3470:	08 95       	ret

00003472 <serial_set_mode>:
    3472:	28 2f       	mov	r18, r24
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	f9 01       	movw	r30, r18
    3478:	b3 e0       	ldi	r27, 0x03	; 3
    347a:	ee 0f       	add	r30, r30
    347c:	ff 1f       	adc	r31, r31
    347e:	ba 95       	dec	r27
    3480:	e1 f7       	brne	.-8      	; 0x347a <serial_set_mode+0x8>
    3482:	22 0f       	add	r18, r18
    3484:	33 1f       	adc	r19, r19
    3486:	e2 0f       	add	r30, r18
    3488:	f3 1f       	adc	r31, r19
    348a:	ed 57       	subi	r30, 0x7D	; 125
    348c:	f7 4f       	sbci	r31, 0xF7	; 247
    348e:	60 83       	st	Z, r22
    3490:	0e 94 ef 19 	call	0x33de	; 0x33de <_ZN15OrangutanSerial8initPortEh>
    3494:	08 95       	ret

00003496 <_ZN15OrangutanSerial11setBaudRateEhm>:
    3496:	a0 e0       	ldi	r26, 0x00	; 0
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	e1 e5       	ldi	r30, 0x51	; 81
    349c:	fa e1       	ldi	r31, 0x1A	; 26
    349e:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <__prologue_saves__+0x16>
    34a2:	d8 2e       	mov	r13, r24
    34a4:	7a 01       	movw	r14, r20
    34a6:	8b 01       	movw	r16, r22
    34a8:	0e 94 ef 19 	call	0x33de	; 0x33de <_ZN15OrangutanSerial8initPortEh>
    34ac:	82 e0       	ldi	r24, 0x02	; 2
    34ae:	d8 16       	cp	r13, r24
    34b0:	19 f1       	breq	.+70     	; 0x34f8 <_ZN15OrangutanSerial11setBaudRateEhm+0x62>
    34b2:	dd 20       	and	r13, r13
    34b4:	19 f0       	breq	.+6      	; 0x34bc <_ZN15OrangutanSerial11setBaudRateEhm+0x26>
    34b6:	cc ec       	ldi	r28, 0xCC	; 204
    34b8:	d0 e0       	ldi	r29, 0x00	; 0
    34ba:	02 c0       	rjmp	.+4      	; 0x34c0 <_ZN15OrangutanSerial11setBaudRateEhm+0x2a>
    34bc:	c4 ec       	ldi	r28, 0xC4	; 196
    34be:	d0 e0       	ldi	r29, 0x00	; 0
    34c0:	60 ea       	ldi	r22, 0xA0	; 160
    34c2:	75 e2       	ldi	r23, 0x25	; 37
    34c4:	86 e2       	ldi	r24, 0x26	; 38
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	6e 19       	sub	r22, r14
    34ca:	7f 09       	sbc	r23, r15
    34cc:	80 0b       	sbc	r24, r16
    34ce:	91 0b       	sbc	r25, r17
    34d0:	33 e0       	ldi	r19, 0x03	; 3
    34d2:	66 0f       	add	r22, r22
    34d4:	77 1f       	adc	r23, r23
    34d6:	88 1f       	adc	r24, r24
    34d8:	99 1f       	adc	r25, r25
    34da:	3a 95       	dec	r19
    34dc:	d1 f7       	brne	.-12     	; 0x34d2 <_ZN15OrangutanSerial11setBaudRateEhm+0x3c>
    34de:	24 e0       	ldi	r18, 0x04	; 4
    34e0:	ee 0c       	add	r14, r14
    34e2:	ff 1c       	adc	r15, r15
    34e4:	00 1f       	adc	r16, r16
    34e6:	11 1f       	adc	r17, r17
    34e8:	2a 95       	dec	r18
    34ea:	d1 f7       	brne	.-12     	; 0x34e0 <_ZN15OrangutanSerial11setBaudRateEhm+0x4a>
    34ec:	a8 01       	movw	r20, r16
    34ee:	97 01       	movw	r18, r14
    34f0:	0e 94 c4 21 	call	0x4388	; 0x4388 <__udivmodsi4>
    34f4:	39 83       	std	Y+1, r19	; 0x01
    34f6:	28 83       	st	Y, r18
    34f8:	cd b7       	in	r28, 0x3d	; 61
    34fa:	de b7       	in	r29, 0x3e	; 62
    34fc:	e7 e0       	ldi	r30, 0x07	; 7
    34fe:	0c 94 0d 22 	jmp	0x441a	; 0x441a <__epilogue_restores__+0x16>

00003502 <serial_set_baud_rate>:
    3502:	0e 94 4b 1a 	call	0x3496	; 0x3496 <_ZN15OrangutanSerial11setBaudRateEhm>
    3506:	08 95       	ret

00003508 <_ZN15OrangutanSerial7setModeEhh>:
    3508:	28 2f       	mov	r18, r24
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	f9 01       	movw	r30, r18
    350e:	53 e0       	ldi	r21, 0x03	; 3
    3510:	ee 0f       	add	r30, r30
    3512:	ff 1f       	adc	r31, r31
    3514:	5a 95       	dec	r21
    3516:	e1 f7       	brne	.-8      	; 0x3510 <_ZN15OrangutanSerial7setModeEhh+0x8>
    3518:	22 0f       	add	r18, r18
    351a:	33 1f       	adc	r19, r19
    351c:	e2 0f       	add	r30, r18
    351e:	f3 1f       	adc	r31, r19
    3520:	ed 57       	subi	r30, 0x7D	; 125
    3522:	f7 4f       	sbci	r31, 0xF7	; 247
    3524:	60 83       	st	Z, r22
    3526:	0e 94 ef 19 	call	0x33de	; 0x33de <_ZN15OrangutanSerial8initPortEh>
    352a:	08 95       	ret

0000352c <_ZN15OrangutanSerial7receiveEhPch>:
    352c:	58 2f       	mov	r21, r24
    352e:	82 30       	cpi	r24, 0x02	; 2
    3530:	51 f0       	breq	.+20     	; 0x3546 <_ZN15OrangutanSerial7receiveEhPch+0x1a>
    3532:	88 23       	and	r24, r24
    3534:	19 f0       	breq	.+6      	; 0x353c <_ZN15OrangutanSerial7receiveEhPch+0x10>
    3536:	e9 ec       	ldi	r30, 0xC9	; 201
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <_ZN15OrangutanSerial7receiveEhPch+0x14>
    353c:	e1 ec       	ldi	r30, 0xC1	; 193
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	80 81       	ld	r24, Z
    3542:	8f 77       	andi	r24, 0x7F	; 127
    3544:	80 83       	st	Z, r24
    3546:	25 2f       	mov	r18, r21
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	d9 01       	movw	r26, r18
    354c:	aa 0f       	add	r26, r26
    354e:	bb 1f       	adc	r27, r27
    3550:	c9 01       	movw	r24, r18
    3552:	e3 e0       	ldi	r30, 0x03	; 3
    3554:	88 0f       	add	r24, r24
    3556:	99 1f       	adc	r25, r25
    3558:	ea 95       	dec	r30
    355a:	e1 f7       	brne	.-8      	; 0x3554 <_ZN15OrangutanSerial7receiveEhPch+0x28>
    355c:	a8 0f       	add	r26, r24
    355e:	b9 1f       	adc	r27, r25
    3560:	ad 57       	subi	r26, 0x7D	; 125
    3562:	b7 4f       	sbci	r27, 0xF7	; 247
    3564:	19 96       	adiw	r26, 0x09	; 9
    3566:	7c 93       	st	X, r23
    3568:	6e 93       	st	-X, r22
    356a:	18 97       	sbiw	r26, 0x08	; 8
    356c:	f9 01       	movw	r30, r18
    356e:	ee 0f       	add	r30, r30
    3570:	ff 1f       	adc	r31, r31
    3572:	ee 0f       	add	r30, r30
    3574:	ff 1f       	adc	r31, r31
    3576:	e2 0f       	add	r30, r18
    3578:	f3 1f       	adc	r31, r19
    357a:	ee 0f       	add	r30, r30
    357c:	ff 1f       	adc	r31, r31
    357e:	eb 57       	subi	r30, 0x7B	; 123
    3580:	f7 4f       	sbci	r31, 0xF7	; 247
    3582:	10 82       	st	Z, r1
    3584:	14 96       	adiw	r26, 0x04	; 4
    3586:	4c 93       	st	X, r20
    3588:	14 97       	sbiw	r26, 0x04	; 4
    358a:	15 96       	adiw	r26, 0x05	; 5
    358c:	1c 92       	st	X, r1
    358e:	15 97       	sbiw	r26, 0x05	; 5
    3590:	52 30       	cpi	r21, 0x02	; 2
    3592:	69 f0       	breq	.+26     	; 0x35ae <_ZN15OrangutanSerial7receiveEhPch+0x82>
    3594:	8c 91       	ld	r24, X
    3596:	88 23       	and	r24, r24
    3598:	51 f4       	brne	.+20     	; 0x35ae <_ZN15OrangutanSerial7receiveEhPch+0x82>
    359a:	55 23       	and	r21, r21
    359c:	19 f0       	breq	.+6      	; 0x35a4 <_ZN15OrangutanSerial7receiveEhPch+0x78>
    359e:	e9 ec       	ldi	r30, 0xC9	; 201
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	02 c0       	rjmp	.+4      	; 0x35a8 <_ZN15OrangutanSerial7receiveEhPch+0x7c>
    35a4:	e1 ec       	ldi	r30, 0xC1	; 193
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	80 81       	ld	r24, Z
    35aa:	80 68       	ori	r24, 0x80	; 128
    35ac:	80 83       	st	Z, r24
    35ae:	08 95       	ret

000035b0 <serial_receive>:
    35b0:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN15OrangutanSerial7receiveEhPch>
    35b4:	08 95       	ret

000035b6 <_ZN15OrangutanSerial11receiveRingEhPch>:
    35b6:	58 2f       	mov	r21, r24
    35b8:	82 30       	cpi	r24, 0x02	; 2
    35ba:	51 f0       	breq	.+20     	; 0x35d0 <_ZN15OrangutanSerial11receiveRingEhPch+0x1a>
    35bc:	88 23       	and	r24, r24
    35be:	19 f0       	breq	.+6      	; 0x35c6 <_ZN15OrangutanSerial11receiveRingEhPch+0x10>
    35c0:	e9 ec       	ldi	r30, 0xC9	; 201
    35c2:	f0 e0       	ldi	r31, 0x00	; 0
    35c4:	02 c0       	rjmp	.+4      	; 0x35ca <_ZN15OrangutanSerial11receiveRingEhPch+0x14>
    35c6:	e1 ec       	ldi	r30, 0xC1	; 193
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	8f 77       	andi	r24, 0x7F	; 127
    35ce:	80 83       	st	Z, r24
    35d0:	25 2f       	mov	r18, r21
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	d9 01       	movw	r26, r18
    35d6:	aa 0f       	add	r26, r26
    35d8:	bb 1f       	adc	r27, r27
    35da:	c9 01       	movw	r24, r18
    35dc:	e3 e0       	ldi	r30, 0x03	; 3
    35de:	88 0f       	add	r24, r24
    35e0:	99 1f       	adc	r25, r25
    35e2:	ea 95       	dec	r30
    35e4:	e1 f7       	brne	.-8      	; 0x35de <_ZN15OrangutanSerial11receiveRingEhPch+0x28>
    35e6:	a8 0f       	add	r26, r24
    35e8:	b9 1f       	adc	r27, r25
    35ea:	ad 57       	subi	r26, 0x7D	; 125
    35ec:	b7 4f       	sbci	r27, 0xF7	; 247
    35ee:	19 96       	adiw	r26, 0x09	; 9
    35f0:	7c 93       	st	X, r23
    35f2:	6e 93       	st	-X, r22
    35f4:	18 97       	sbiw	r26, 0x08	; 8
    35f6:	f9 01       	movw	r30, r18
    35f8:	ee 0f       	add	r30, r30
    35fa:	ff 1f       	adc	r31, r31
    35fc:	ee 0f       	add	r30, r30
    35fe:	ff 1f       	adc	r31, r31
    3600:	e2 0f       	add	r30, r18
    3602:	f3 1f       	adc	r31, r19
    3604:	ee 0f       	add	r30, r30
    3606:	ff 1f       	adc	r31, r31
    3608:	eb 57       	subi	r30, 0x7B	; 123
    360a:	f7 4f       	sbci	r31, 0xF7	; 247
    360c:	10 82       	st	Z, r1
    360e:	14 96       	adiw	r26, 0x04	; 4
    3610:	4c 93       	st	X, r20
    3612:	14 97       	sbiw	r26, 0x04	; 4
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	15 96       	adiw	r26, 0x05	; 5
    3618:	8c 93       	st	X, r24
    361a:	15 97       	sbiw	r26, 0x05	; 5
    361c:	52 30       	cpi	r21, 0x02	; 2
    361e:	69 f0       	breq	.+26     	; 0x363a <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    3620:	8c 91       	ld	r24, X
    3622:	88 23       	and	r24, r24
    3624:	51 f4       	brne	.+20     	; 0x363a <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    3626:	55 23       	and	r21, r21
    3628:	19 f0       	breq	.+6      	; 0x3630 <_ZN15OrangutanSerial11receiveRingEhPch+0x7a>
    362a:	e9 ec       	ldi	r30, 0xC9	; 201
    362c:	f0 e0       	ldi	r31, 0x00	; 0
    362e:	02 c0       	rjmp	.+4      	; 0x3634 <_ZN15OrangutanSerial11receiveRingEhPch+0x7e>
    3630:	e1 ec       	ldi	r30, 0xC1	; 193
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	80 81       	ld	r24, Z
    3636:	80 68       	ori	r24, 0x80	; 128
    3638:	80 83       	st	Z, r24
    363a:	08 95       	ret

0000363c <serial_receive_ring>:
    363c:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <_ZN15OrangutanSerial11receiveRingEhPch>
    3640:	08 95       	ret

00003642 <_ZN15OrangutanSerial13cancelReceiveEh>:
    3642:	60 e0       	ldi	r22, 0x00	; 0
    3644:	70 e0       	ldi	r23, 0x00	; 0
    3646:	40 e0       	ldi	r20, 0x00	; 0
    3648:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN15OrangutanSerial7receiveEhPch>
    364c:	08 95       	ret

0000364e <serial_cancel_receive>:
    364e:	0e 94 21 1b 	call	0x3642	; 0x3642 <_ZN15OrangutanSerial13cancelReceiveEh>
    3652:	08 95       	ret

00003654 <__vector_20>:
    3654:	1f 92       	push	r1
    3656:	0f 92       	push	r0
    3658:	0f b6       	in	r0, 0x3f	; 63
    365a:	0f 92       	push	r0
    365c:	0b b6       	in	r0, 0x3b	; 59
    365e:	0f 92       	push	r0
    3660:	11 24       	eor	r1, r1
    3662:	2f 93       	push	r18
    3664:	8f 93       	push	r24
    3666:	9f 93       	push	r25
    3668:	ef 93       	push	r30
    366a:	ff 93       	push	r31
    366c:	20 91 c6 00 	lds	r18, 0x00C6
    3670:	e0 91 8b 08 	lds	r30, 0x088B
    3674:	f0 91 8c 08 	lds	r31, 0x088C
    3678:	30 97       	sbiw	r30, 0x00	; 0
    367a:	81 f0       	breq	.+32     	; 0x369c <__vector_20+0x48>
    367c:	90 91 85 08 	lds	r25, 0x0885
    3680:	80 91 87 08 	lds	r24, 0x0887
    3684:	98 17       	cp	r25, r24
    3686:	50 f4       	brcc	.+20     	; 0x369c <__vector_20+0x48>
    3688:	80 91 85 08 	lds	r24, 0x0885
    368c:	e8 0f       	add	r30, r24
    368e:	f1 1d       	adc	r31, r1
    3690:	20 83       	st	Z, r18
    3692:	80 91 85 08 	lds	r24, 0x0885
    3696:	8f 5f       	subi	r24, 0xFF	; 255
    3698:	80 93 85 08 	sts	0x0885, r24
    369c:	90 91 85 08 	lds	r25, 0x0885
    36a0:	80 91 87 08 	lds	r24, 0x0887
    36a4:	98 17       	cp	r25, r24
    36a6:	31 f4       	brne	.+12     	; 0x36b4 <__vector_20+0x60>
    36a8:	80 91 88 08 	lds	r24, 0x0888
    36ac:	88 23       	and	r24, r24
    36ae:	11 f0       	breq	.+4      	; 0x36b4 <__vector_20+0x60>
    36b0:	10 92 85 08 	sts	0x0885, r1
    36b4:	ff 91       	pop	r31
    36b6:	ef 91       	pop	r30
    36b8:	9f 91       	pop	r25
    36ba:	8f 91       	pop	r24
    36bc:	2f 91       	pop	r18
    36be:	0f 90       	pop	r0
    36c0:	0b be       	out	0x3b, r0	; 59
    36c2:	0f 90       	pop	r0
    36c4:	0f be       	out	0x3f, r0	; 63
    36c6:	0f 90       	pop	r0
    36c8:	1f 90       	pop	r1
    36ca:	18 95       	reti

000036cc <__vector_28>:
    36cc:	1f 92       	push	r1
    36ce:	0f 92       	push	r0
    36d0:	0f b6       	in	r0, 0x3f	; 63
    36d2:	0f 92       	push	r0
    36d4:	0b b6       	in	r0, 0x3b	; 59
    36d6:	0f 92       	push	r0
    36d8:	11 24       	eor	r1, r1
    36da:	2f 93       	push	r18
    36dc:	8f 93       	push	r24
    36de:	9f 93       	push	r25
    36e0:	ef 93       	push	r30
    36e2:	ff 93       	push	r31
    36e4:	20 91 ce 00 	lds	r18, 0x00CE
    36e8:	e0 91 95 08 	lds	r30, 0x0895
    36ec:	f0 91 96 08 	lds	r31, 0x0896
    36f0:	30 97       	sbiw	r30, 0x00	; 0
    36f2:	81 f0       	breq	.+32     	; 0x3714 <__vector_28+0x48>
    36f4:	90 91 8f 08 	lds	r25, 0x088F
    36f8:	80 91 91 08 	lds	r24, 0x0891
    36fc:	98 17       	cp	r25, r24
    36fe:	50 f4       	brcc	.+20     	; 0x3714 <__vector_28+0x48>
    3700:	80 91 8f 08 	lds	r24, 0x088F
    3704:	e8 0f       	add	r30, r24
    3706:	f1 1d       	adc	r31, r1
    3708:	20 83       	st	Z, r18
    370a:	80 91 8f 08 	lds	r24, 0x088F
    370e:	8f 5f       	subi	r24, 0xFF	; 255
    3710:	80 93 8f 08 	sts	0x088F, r24
    3714:	90 91 8f 08 	lds	r25, 0x088F
    3718:	80 91 91 08 	lds	r24, 0x0891
    371c:	98 17       	cp	r25, r24
    371e:	31 f4       	brne	.+12     	; 0x372c <__vector_28+0x60>
    3720:	80 91 92 08 	lds	r24, 0x0892
    3724:	88 23       	and	r24, r24
    3726:	11 f0       	breq	.+4      	; 0x372c <__vector_28+0x60>
    3728:	10 92 8f 08 	sts	0x088F, r1
    372c:	ff 91       	pop	r31
    372e:	ef 91       	pop	r30
    3730:	9f 91       	pop	r25
    3732:	8f 91       	pop	r24
    3734:	2f 91       	pop	r18
    3736:	0f 90       	pop	r0
    3738:	0b be       	out	0x3b, r0	; 59
    373a:	0f 90       	pop	r0
    373c:	0f be       	out	0x3f, r0	; 63
    373e:	0f 90       	pop	r0
    3740:	1f 90       	pop	r1
    3742:	18 95       	reti

00003744 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    3744:	cf 93       	push	r28
    3746:	df 93       	push	r29
    3748:	38 2f       	mov	r19, r24
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	fc 01       	movw	r30, r24
    374e:	53 e0       	ldi	r21, 0x03	; 3
    3750:	ee 0f       	add	r30, r30
    3752:	ff 1f       	adc	r31, r31
    3754:	5a 95       	dec	r21
    3756:	e1 f7       	brne	.-8      	; 0x3750 <_ZN15OrangutanSerial11uart_tx_isrEh+0xc>
    3758:	88 0f       	add	r24, r24
    375a:	99 1f       	adc	r25, r25
    375c:	e8 0f       	add	r30, r24
    375e:	f9 1f       	adc	r31, r25
    3760:	ed 57       	subi	r30, 0x7D	; 125
    3762:	f7 4f       	sbci	r31, 0xF7	; 247
    3764:	a6 81       	ldd	r26, Z+6	; 0x06
    3766:	b7 81       	ldd	r27, Z+7	; 0x07
    3768:	10 97       	sbiw	r26, 0x00	; 0
    376a:	09 f4       	brne	.+2      	; 0x376e <_ZN15OrangutanSerial11uart_tx_isrEh+0x2a>
    376c:	64 c0       	rjmp	.+200    	; 0x3836 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    376e:	83 2f       	mov	r24, r19
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	fc 01       	movw	r30, r24
    3774:	23 e0       	ldi	r18, 0x03	; 3
    3776:	ee 0f       	add	r30, r30
    3778:	ff 1f       	adc	r31, r31
    377a:	2a 95       	dec	r18
    377c:	e1 f7       	brne	.-8      	; 0x3776 <_ZN15OrangutanSerial11uart_tx_isrEh+0x32>
    377e:	88 0f       	add	r24, r24
    3780:	99 1f       	adc	r25, r25
    3782:	e8 0f       	add	r30, r24
    3784:	f9 1f       	adc	r31, r25
    3786:	ed 57       	subi	r30, 0x7D	; 125
    3788:	f7 4f       	sbci	r31, 0xF7	; 247
    378a:	21 81       	ldd	r18, Z+1	; 0x01
    378c:	83 2f       	mov	r24, r19
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	fc 01       	movw	r30, r24
    3792:	63 e0       	ldi	r22, 0x03	; 3
    3794:	ee 0f       	add	r30, r30
    3796:	ff 1f       	adc	r31, r31
    3798:	6a 95       	dec	r22
    379a:	e1 f7       	brne	.-8      	; 0x3794 <_ZN15OrangutanSerial11uart_tx_isrEh+0x50>
    379c:	88 0f       	add	r24, r24
    379e:	99 1f       	adc	r25, r25
    37a0:	e8 0f       	add	r30, r24
    37a2:	f9 1f       	adc	r31, r25
    37a4:	ed 57       	subi	r30, 0x7D	; 125
    37a6:	f7 4f       	sbci	r31, 0xF7	; 247
    37a8:	83 81       	ldd	r24, Z+3	; 0x03
    37aa:	28 17       	cp	r18, r24
    37ac:	08 f0       	brcs	.+2      	; 0x37b0 <_ZN15OrangutanSerial11uart_tx_isrEh+0x6c>
    37ae:	43 c0       	rjmp	.+134    	; 0x3836 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    37b0:	33 23       	and	r19, r19
    37b2:	19 f0       	breq	.+6      	; 0x37ba <_ZN15OrangutanSerial11uart_tx_isrEh+0x76>
    37b4:	e8 ec       	ldi	r30, 0xC8	; 200
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	02 c0       	rjmp	.+4      	; 0x37be <_ZN15OrangutanSerial11uart_tx_isrEh+0x7a>
    37ba:	e0 ec       	ldi	r30, 0xC0	; 192
    37bc:	f0 e0       	ldi	r31, 0x00	; 0
    37be:	80 81       	ld	r24, Z
    37c0:	85 ff       	sbrs	r24, 5
    37c2:	39 c0       	rjmp	.+114    	; 0x3836 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    37c4:	33 23       	and	r19, r19
    37c6:	19 f0       	breq	.+6      	; 0x37ce <_ZN15OrangutanSerial11uart_tx_isrEh+0x8a>
    37c8:	ce ec       	ldi	r28, 0xCE	; 206
    37ca:	d0 e0       	ldi	r29, 0x00	; 0
    37cc:	02 c0       	rjmp	.+4      	; 0x37d2 <_ZN15OrangutanSerial11uart_tx_isrEh+0x8e>
    37ce:	c6 ec       	ldi	r28, 0xC6	; 198
    37d0:	d0 e0       	ldi	r29, 0x00	; 0
    37d2:	83 2f       	mov	r24, r19
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	fc 01       	movw	r30, r24
    37d8:	43 e0       	ldi	r20, 0x03	; 3
    37da:	ee 0f       	add	r30, r30
    37dc:	ff 1f       	adc	r31, r31
    37de:	4a 95       	dec	r20
    37e0:	e1 f7       	brne	.-8      	; 0x37da <_ZN15OrangutanSerial11uart_tx_isrEh+0x96>
    37e2:	88 0f       	add	r24, r24
    37e4:	99 1f       	adc	r25, r25
    37e6:	e8 0f       	add	r30, r24
    37e8:	f9 1f       	adc	r31, r25
    37ea:	ed 57       	subi	r30, 0x7D	; 125
    37ec:	f7 4f       	sbci	r31, 0xF7	; 247
    37ee:	81 81       	ldd	r24, Z+1	; 0x01
    37f0:	a8 0f       	add	r26, r24
    37f2:	b1 1d       	adc	r27, r1
    37f4:	8c 91       	ld	r24, X
    37f6:	88 83       	st	Y, r24
    37f8:	83 2f       	mov	r24, r19
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	fc 01       	movw	r30, r24
    37fe:	73 e0       	ldi	r23, 0x03	; 3
    3800:	ee 0f       	add	r30, r30
    3802:	ff 1f       	adc	r31, r31
    3804:	7a 95       	dec	r23
    3806:	e1 f7       	brne	.-8      	; 0x3800 <_ZN15OrangutanSerial11uart_tx_isrEh+0xbc>
    3808:	88 0f       	add	r24, r24
    380a:	99 1f       	adc	r25, r25
    380c:	e8 0f       	add	r30, r24
    380e:	f9 1f       	adc	r31, r25
    3810:	ed 57       	subi	r30, 0x7D	; 125
    3812:	f7 4f       	sbci	r31, 0xF7	; 247
    3814:	21 81       	ldd	r18, Z+1	; 0x01
    3816:	2f 5f       	subi	r18, 0xFF	; 255
    3818:	83 2f       	mov	r24, r19
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	fc 01       	movw	r30, r24
    381e:	53 e0       	ldi	r21, 0x03	; 3
    3820:	ee 0f       	add	r30, r30
    3822:	ff 1f       	adc	r31, r31
    3824:	5a 95       	dec	r21
    3826:	e1 f7       	brne	.-8      	; 0x3820 <_ZN15OrangutanSerial11uart_tx_isrEh+0xdc>
    3828:	88 0f       	add	r24, r24
    382a:	99 1f       	adc	r25, r25
    382c:	e8 0f       	add	r30, r24
    382e:	f9 1f       	adc	r31, r25
    3830:	ed 57       	subi	r30, 0x7D	; 125
    3832:	f7 4f       	sbci	r31, 0xF7	; 247
    3834:	21 83       	std	Z+1, r18	; 0x01
    3836:	83 2f       	mov	r24, r19
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	fc 01       	movw	r30, r24
    383c:	b3 e0       	ldi	r27, 0x03	; 3
    383e:	ee 0f       	add	r30, r30
    3840:	ff 1f       	adc	r31, r31
    3842:	ba 95       	dec	r27
    3844:	e1 f7       	brne	.-8      	; 0x383e <_ZN15OrangutanSerial11uart_tx_isrEh+0xfa>
    3846:	88 0f       	add	r24, r24
    3848:	99 1f       	adc	r25, r25
    384a:	e8 0f       	add	r30, r24
    384c:	f9 1f       	adc	r31, r25
    384e:	ed 57       	subi	r30, 0x7D	; 125
    3850:	f7 4f       	sbci	r31, 0xF7	; 247
    3852:	86 81       	ldd	r24, Z+6	; 0x06
    3854:	97 81       	ldd	r25, Z+7	; 0x07
    3856:	89 2b       	or	r24, r25
    3858:	09 f4       	brne	.+2      	; 0x385c <_ZN15OrangutanSerial11uart_tx_isrEh+0x118>
    385a:	43 c0       	rjmp	.+134    	; 0x38e2 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    385c:	83 2f       	mov	r24, r19
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	fc 01       	movw	r30, r24
    3862:	73 e0       	ldi	r23, 0x03	; 3
    3864:	ee 0f       	add	r30, r30
    3866:	ff 1f       	adc	r31, r31
    3868:	7a 95       	dec	r23
    386a:	e1 f7       	brne	.-8      	; 0x3864 <_ZN15OrangutanSerial11uart_tx_isrEh+0x120>
    386c:	88 0f       	add	r24, r24
    386e:	99 1f       	adc	r25, r25
    3870:	e8 0f       	add	r30, r24
    3872:	f9 1f       	adc	r31, r25
    3874:	ed 57       	subi	r30, 0x7D	; 125
    3876:	f7 4f       	sbci	r31, 0xF7	; 247
    3878:	21 81       	ldd	r18, Z+1	; 0x01
    387a:	83 2f       	mov	r24, r19
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	fc 01       	movw	r30, r24
    3880:	53 e0       	ldi	r21, 0x03	; 3
    3882:	ee 0f       	add	r30, r30
    3884:	ff 1f       	adc	r31, r31
    3886:	5a 95       	dec	r21
    3888:	e1 f7       	brne	.-8      	; 0x3882 <_ZN15OrangutanSerial11uart_tx_isrEh+0x13e>
    388a:	88 0f       	add	r24, r24
    388c:	99 1f       	adc	r25, r25
    388e:	e8 0f       	add	r30, r24
    3890:	f9 1f       	adc	r31, r25
    3892:	ed 57       	subi	r30, 0x7D	; 125
    3894:	f7 4f       	sbci	r31, 0xF7	; 247
    3896:	83 81       	ldd	r24, Z+3	; 0x03
    3898:	28 17       	cp	r18, r24
    389a:	18 f5       	brcc	.+70     	; 0x38e2 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    389c:	83 2f       	mov	r24, r19
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	fc 01       	movw	r30, r24
    38a2:	b3 e0       	ldi	r27, 0x03	; 3
    38a4:	ee 0f       	add	r30, r30
    38a6:	ff 1f       	adc	r31, r31
    38a8:	ba 95       	dec	r27
    38aa:	e1 f7       	brne	.-8      	; 0x38a4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x160>
    38ac:	88 0f       	add	r24, r24
    38ae:	99 1f       	adc	r25, r25
    38b0:	e8 0f       	add	r30, r24
    38b2:	f9 1f       	adc	r31, r25
    38b4:	ed 57       	subi	r30, 0x7D	; 125
    38b6:	f7 4f       	sbci	r31, 0xF7	; 247
    38b8:	80 81       	ld	r24, Z
    38ba:	88 23       	and	r24, r24
    38bc:	91 f4       	brne	.+36     	; 0x38e2 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    38be:	33 23       	and	r19, r19
    38c0:	19 f0       	breq	.+6      	; 0x38c8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x184>
    38c2:	e9 ec       	ldi	r30, 0xC9	; 201
    38c4:	f0 e0       	ldi	r31, 0x00	; 0
    38c6:	02 c0       	rjmp	.+4      	; 0x38cc <_ZN15OrangutanSerial11uart_tx_isrEh+0x188>
    38c8:	e1 ec       	ldi	r30, 0xC1	; 193
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	80 81       	ld	r24, Z
    38ce:	80 62       	ori	r24, 0x20	; 32
    38d0:	04 c0       	rjmp	.+8      	; 0x38da <_ZN15OrangutanSerial11uart_tx_isrEh+0x196>
    38d2:	e9 ec       	ldi	r30, 0xC9	; 201
    38d4:	f0 e0       	ldi	r31, 0x00	; 0
    38d6:	80 81       	ld	r24, Z
    38d8:	8f 7d       	andi	r24, 0xDF	; 223
    38da:	80 83       	st	Z, r24
    38dc:	df 91       	pop	r29
    38de:	cf 91       	pop	r28
    38e0:	08 95       	ret
    38e2:	33 23       	and	r19, r19
    38e4:	b1 f7       	brne	.-20     	; 0x38d2 <_ZN15OrangutanSerial11uart_tx_isrEh+0x18e>
    38e6:	e1 ec       	ldi	r30, 0xC1	; 193
    38e8:	f0 e0       	ldi	r31, 0x00	; 0
    38ea:	f5 cf       	rjmp	.-22     	; 0x38d6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x192>

000038ec <_ZN15OrangutanSerial4sendEhPch>:
    38ec:	28 2f       	mov	r18, r24
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	fc 01       	movw	r30, r24
    38f2:	53 e0       	ldi	r21, 0x03	; 3
    38f4:	ee 0f       	add	r30, r30
    38f6:	ff 1f       	adc	r31, r31
    38f8:	5a 95       	dec	r21
    38fa:	e1 f7       	brne	.-8      	; 0x38f4 <_ZN15OrangutanSerial4sendEhPch+0x8>
    38fc:	88 0f       	add	r24, r24
    38fe:	99 1f       	adc	r25, r25
    3900:	e8 0f       	add	r30, r24
    3902:	f9 1f       	adc	r31, r25
    3904:	ed 57       	subi	r30, 0x7D	; 125
    3906:	f7 4f       	sbci	r31, 0xF7	; 247
    3908:	77 83       	std	Z+7, r23	; 0x07
    390a:	66 83       	std	Z+6, r22	; 0x06
    390c:	82 2f       	mov	r24, r18
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	fc 01       	movw	r30, r24
    3912:	b3 e0       	ldi	r27, 0x03	; 3
    3914:	ee 0f       	add	r30, r30
    3916:	ff 1f       	adc	r31, r31
    3918:	ba 95       	dec	r27
    391a:	e1 f7       	brne	.-8      	; 0x3914 <_ZN15OrangutanSerial4sendEhPch+0x28>
    391c:	88 0f       	add	r24, r24
    391e:	99 1f       	adc	r25, r25
    3920:	e8 0f       	add	r30, r24
    3922:	f9 1f       	adc	r31, r25
    3924:	ed 57       	subi	r30, 0x7D	; 125
    3926:	f7 4f       	sbci	r31, 0xF7	; 247
    3928:	11 82       	std	Z+1, r1	; 0x01
    392a:	82 2f       	mov	r24, r18
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	fc 01       	movw	r30, r24
    3930:	73 e0       	ldi	r23, 0x03	; 3
    3932:	ee 0f       	add	r30, r30
    3934:	ff 1f       	adc	r31, r31
    3936:	7a 95       	dec	r23
    3938:	e1 f7       	brne	.-8      	; 0x3932 <_ZN15OrangutanSerial4sendEhPch+0x46>
    393a:	88 0f       	add	r24, r24
    393c:	99 1f       	adc	r25, r25
    393e:	e8 0f       	add	r30, r24
    3940:	f9 1f       	adc	r31, r25
    3942:	ed 57       	subi	r30, 0x7D	; 125
    3944:	f7 4f       	sbci	r31, 0xF7	; 247
    3946:	43 83       	std	Z+3, r20	; 0x03
    3948:	22 30       	cpi	r18, 0x02	; 2
    394a:	09 f4       	brne	.+2      	; 0x394e <_ZN15OrangutanSerial4sendEhPch+0x62>
    394c:	49 c0       	rjmp	.+146    	; 0x39e0 <_ZN15OrangutanSerial4sendEhPch+0xf4>
    394e:	82 2f       	mov	r24, r18
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	fc 01       	movw	r30, r24
    3954:	53 e0       	ldi	r21, 0x03	; 3
    3956:	ee 0f       	add	r30, r30
    3958:	ff 1f       	adc	r31, r31
    395a:	5a 95       	dec	r21
    395c:	e1 f7       	brne	.-8      	; 0x3956 <_ZN15OrangutanSerial4sendEhPch+0x6a>
    395e:	88 0f       	add	r24, r24
    3960:	99 1f       	adc	r25, r25
    3962:	e8 0f       	add	r30, r24
    3964:	f9 1f       	adc	r31, r25
    3966:	ed 57       	subi	r30, 0x7D	; 125
    3968:	f7 4f       	sbci	r31, 0xF7	; 247
    396a:	86 81       	ldd	r24, Z+6	; 0x06
    396c:	97 81       	ldd	r25, Z+7	; 0x07
    396e:	89 2b       	or	r24, r25
    3970:	91 f1       	breq	.+100    	; 0x39d6 <_ZN15OrangutanSerial4sendEhPch+0xea>
    3972:	82 2f       	mov	r24, r18
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	fc 01       	movw	r30, r24
    3978:	b3 e0       	ldi	r27, 0x03	; 3
    397a:	ee 0f       	add	r30, r30
    397c:	ff 1f       	adc	r31, r31
    397e:	ba 95       	dec	r27
    3980:	e1 f7       	brne	.-8      	; 0x397a <_ZN15OrangutanSerial4sendEhPch+0x8e>
    3982:	88 0f       	add	r24, r24
    3984:	99 1f       	adc	r25, r25
    3986:	e8 0f       	add	r30, r24
    3988:	f9 1f       	adc	r31, r25
    398a:	ed 57       	subi	r30, 0x7D	; 125
    398c:	f7 4f       	sbci	r31, 0xF7	; 247
    398e:	81 81       	ldd	r24, Z+1	; 0x01
    3990:	84 17       	cp	r24, r20
    3992:	08 f5       	brcc	.+66     	; 0x39d6 <_ZN15OrangutanSerial4sendEhPch+0xea>
    3994:	82 2f       	mov	r24, r18
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	fc 01       	movw	r30, r24
    399a:	73 e0       	ldi	r23, 0x03	; 3
    399c:	ee 0f       	add	r30, r30
    399e:	ff 1f       	adc	r31, r31
    39a0:	7a 95       	dec	r23
    39a2:	e1 f7       	brne	.-8      	; 0x399c <_ZN15OrangutanSerial4sendEhPch+0xb0>
    39a4:	88 0f       	add	r24, r24
    39a6:	99 1f       	adc	r25, r25
    39a8:	e8 0f       	add	r30, r24
    39aa:	f9 1f       	adc	r31, r25
    39ac:	ed 57       	subi	r30, 0x7D	; 125
    39ae:	f7 4f       	sbci	r31, 0xF7	; 247
    39b0:	80 81       	ld	r24, Z
    39b2:	88 23       	and	r24, r24
    39b4:	81 f4       	brne	.+32     	; 0x39d6 <_ZN15OrangutanSerial4sendEhPch+0xea>
    39b6:	22 23       	and	r18, r18
    39b8:	19 f0       	breq	.+6      	; 0x39c0 <_ZN15OrangutanSerial4sendEhPch+0xd4>
    39ba:	e9 ec       	ldi	r30, 0xC9	; 201
    39bc:	f0 e0       	ldi	r31, 0x00	; 0
    39be:	02 c0       	rjmp	.+4      	; 0x39c4 <_ZN15OrangutanSerial4sendEhPch+0xd8>
    39c0:	e1 ec       	ldi	r30, 0xC1	; 193
    39c2:	f0 e0       	ldi	r31, 0x00	; 0
    39c4:	80 81       	ld	r24, Z
    39c6:	80 62       	ori	r24, 0x20	; 32
    39c8:	04 c0       	rjmp	.+8      	; 0x39d2 <_ZN15OrangutanSerial4sendEhPch+0xe6>
    39ca:	e9 ec       	ldi	r30, 0xC9	; 201
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	80 81       	ld	r24, Z
    39d0:	8f 7d       	andi	r24, 0xDF	; 223
    39d2:	80 83       	st	Z, r24
    39d4:	08 95       	ret
    39d6:	22 23       	and	r18, r18
    39d8:	c1 f7       	brne	.-16     	; 0x39ca <_ZN15OrangutanSerial4sendEhPch+0xde>
    39da:	e1 ec       	ldi	r30, 0xC1	; 193
    39dc:	f0 e0       	ldi	r31, 0x00	; 0
    39de:	f7 cf       	rjmp	.-18     	; 0x39ce <_ZN15OrangutanSerial4sendEhPch+0xe2>
    39e0:	08 95       	ret

000039e2 <serial_send>:
    39e2:	0e 94 76 1c 	call	0x38ec	; 0x38ec <_ZN15OrangutanSerial4sendEhPch>
    39e6:	08 95       	ret

000039e8 <__vector_21>:
    39e8:	1f 92       	push	r1
    39ea:	0f 92       	push	r0
    39ec:	0f b6       	in	r0, 0x3f	; 63
    39ee:	0f 92       	push	r0
    39f0:	0b b6       	in	r0, 0x3b	; 59
    39f2:	0f 92       	push	r0
    39f4:	11 24       	eor	r1, r1
    39f6:	2f 93       	push	r18
    39f8:	3f 93       	push	r19
    39fa:	4f 93       	push	r20
    39fc:	5f 93       	push	r21
    39fe:	6f 93       	push	r22
    3a00:	7f 93       	push	r23
    3a02:	8f 93       	push	r24
    3a04:	9f 93       	push	r25
    3a06:	af 93       	push	r26
    3a08:	bf 93       	push	r27
    3a0a:	ef 93       	push	r30
    3a0c:	ff 93       	push	r31
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN15OrangutanSerial11uart_tx_isrEh>
    3a14:	ff 91       	pop	r31
    3a16:	ef 91       	pop	r30
    3a18:	bf 91       	pop	r27
    3a1a:	af 91       	pop	r26
    3a1c:	9f 91       	pop	r25
    3a1e:	8f 91       	pop	r24
    3a20:	7f 91       	pop	r23
    3a22:	6f 91       	pop	r22
    3a24:	5f 91       	pop	r21
    3a26:	4f 91       	pop	r20
    3a28:	3f 91       	pop	r19
    3a2a:	2f 91       	pop	r18
    3a2c:	0f 90       	pop	r0
    3a2e:	0b be       	out	0x3b, r0	; 59
    3a30:	0f 90       	pop	r0
    3a32:	0f be       	out	0x3f, r0	; 63
    3a34:	0f 90       	pop	r0
    3a36:	1f 90       	pop	r1
    3a38:	18 95       	reti

00003a3a <__vector_29>:
    3a3a:	1f 92       	push	r1
    3a3c:	0f 92       	push	r0
    3a3e:	0f b6       	in	r0, 0x3f	; 63
    3a40:	0f 92       	push	r0
    3a42:	0b b6       	in	r0, 0x3b	; 59
    3a44:	0f 92       	push	r0
    3a46:	11 24       	eor	r1, r1
    3a48:	2f 93       	push	r18
    3a4a:	3f 93       	push	r19
    3a4c:	4f 93       	push	r20
    3a4e:	5f 93       	push	r21
    3a50:	6f 93       	push	r22
    3a52:	7f 93       	push	r23
    3a54:	8f 93       	push	r24
    3a56:	9f 93       	push	r25
    3a58:	af 93       	push	r26
    3a5a:	bf 93       	push	r27
    3a5c:	ef 93       	push	r30
    3a5e:	ff 93       	push	r31
    3a60:	81 e0       	ldi	r24, 0x01	; 1
    3a62:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN15OrangutanSerial11uart_tx_isrEh>
    3a66:	ff 91       	pop	r31
    3a68:	ef 91       	pop	r30
    3a6a:	bf 91       	pop	r27
    3a6c:	af 91       	pop	r26
    3a6e:	9f 91       	pop	r25
    3a70:	8f 91       	pop	r24
    3a72:	7f 91       	pop	r23
    3a74:	6f 91       	pop	r22
    3a76:	5f 91       	pop	r21
    3a78:	4f 91       	pop	r20
    3a7a:	3f 91       	pop	r19
    3a7c:	2f 91       	pop	r18
    3a7e:	0f 90       	pop	r0
    3a80:	0b be       	out	0x3b, r0	; 59
    3a82:	0f 90       	pop	r0
    3a84:	0f be       	out	0x3f, r0	; 63
    3a86:	0f 90       	pop	r0
    3a88:	1f 90       	pop	r1
    3a8a:	18 95       	reti

00003a8c <_ZN15OrangutanSerial15serial_tx_checkEh>:
    3a8c:	98 2f       	mov	r25, r24
    3a8e:	82 30       	cpi	r24, 0x02	; 2
    3a90:	71 f0       	breq	.+28     	; 0x3aae <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    3a92:	88 23       	and	r24, r24
    3a94:	19 f0       	breq	.+6      	; 0x3a9c <_ZN15OrangutanSerial15serial_tx_checkEh+0x10>
    3a96:	e9 ec       	ldi	r30, 0xC9	; 201
    3a98:	f0 e0       	ldi	r31, 0x00	; 0
    3a9a:	02 c0       	rjmp	.+4      	; 0x3aa0 <_ZN15OrangutanSerial15serial_tx_checkEh+0x14>
    3a9c:	e1 ec       	ldi	r30, 0xC1	; 193
    3a9e:	f0 e0       	ldi	r31, 0x00	; 0
    3aa0:	80 81       	ld	r24, Z
    3aa2:	8f 7d       	andi	r24, 0xDF	; 223
    3aa4:	80 83       	st	Z, r24
    3aa6:	89 2f       	mov	r24, r25
    3aa8:	0e 94 a2 1b 	call	0x3744	; 0x3744 <_ZN15OrangutanSerial11uart_tx_isrEh>
    3aac:	08 95       	ret
    3aae:	e0 91 9d 08 	lds	r30, 0x089D
    3ab2:	f0 91 9e 08 	lds	r31, 0x089E
    3ab6:	30 97       	sbiw	r30, 0x00	; 0
    3ab8:	b1 f0       	breq	.+44     	; 0x3ae6 <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    3aba:	90 91 98 08 	lds	r25, 0x0898
    3abe:	80 91 9a 08 	lds	r24, 0x089A
    3ac2:	98 17       	cp	r25, r24
    3ac4:	80 f4       	brcc	.+32     	; 0x3ae6 <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    3ac6:	06 c0       	rjmp	.+12     	; 0x3ad4 <_ZN15OrangutanSerial15serial_tx_checkEh+0x48>
    3ac8:	80 91 98 08 	lds	r24, 0x0898
    3acc:	8f 5f       	subi	r24, 0xFF	; 255
    3ace:	80 93 98 08 	sts	0x0898, r24
    3ad2:	ed cf       	rjmp	.-38     	; 0x3aae <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    3ad4:	80 91 98 08 	lds	r24, 0x0898
    3ad8:	e8 0f       	add	r30, r24
    3ada:	f1 1d       	adc	r31, r1
    3adc:	80 81       	ld	r24, Z
    3ade:	0e 94 03 20 	call	0x4006	; 0x4006 <_ZN12OrangutanSVP17serialSendIfReadyEc>
    3ae2:	88 23       	and	r24, r24
    3ae4:	89 f7       	brne	.-30     	; 0x3ac8 <_ZN15OrangutanSerial15serial_tx_checkEh+0x3c>
    3ae6:	08 95       	ret

00003ae8 <_ZN15OrangutanSerial15serial_rx_checkEh>:
    3ae8:	0f 93       	push	r16
    3aea:	1f 93       	push	r17
    3aec:	cf 93       	push	r28
    3aee:	df 93       	push	r29
    3af0:	68 2f       	mov	r22, r24
    3af2:	82 30       	cpi	r24, 0x02	; 2
    3af4:	09 f4       	brne	.+2      	; 0x3af8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x10>
    3af6:	9c c0       	rjmp	.+312    	; 0x3c30 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    3af8:	88 23       	and	r24, r24
    3afa:	19 f0       	breq	.+6      	; 0x3b02 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1a>
    3afc:	e9 ec       	ldi	r30, 0xC9	; 201
    3afe:	f0 e0       	ldi	r31, 0x00	; 0
    3b00:	02 c0       	rjmp	.+4      	; 0x3b06 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1e>
    3b02:	e1 ec       	ldi	r30, 0xC1	; 193
    3b04:	f0 e0       	ldi	r31, 0x00	; 0
    3b06:	80 81       	ld	r24, Z
    3b08:	8f 77       	andi	r24, 0x7F	; 127
    3b0a:	80 83       	st	Z, r24
    3b0c:	46 2f       	mov	r20, r22
    3b0e:	50 e0       	ldi	r21, 0x00	; 0
    3b10:	da 01       	movw	r26, r20
    3b12:	aa 0f       	add	r26, r26
    3b14:	bb 1f       	adc	r27, r27
    3b16:	ca 01       	movw	r24, r20
    3b18:	23 e0       	ldi	r18, 0x03	; 3
    3b1a:	88 0f       	add	r24, r24
    3b1c:	99 1f       	adc	r25, r25
    3b1e:	2a 95       	dec	r18
    3b20:	e1 f7       	brne	.-8      	; 0x3b1a <_ZN15OrangutanSerial15serial_rx_checkEh+0x32>
    3b22:	a8 0f       	add	r26, r24
    3b24:	b9 1f       	adc	r27, r25
    3b26:	ad 57       	subi	r26, 0x7D	; 125
    3b28:	b7 4f       	sbci	r27, 0xF7	; 247
    3b2a:	18 96       	adiw	r26, 0x08	; 8
    3b2c:	cd 91       	ld	r28, X+
    3b2e:	dc 91       	ld	r29, X
    3b30:	19 97       	sbiw	r26, 0x09	; 9
    3b32:	20 97       	sbiw	r28, 0x00	; 0
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <_ZN15OrangutanSerial15serial_rx_checkEh+0x50>
    3b36:	5a c0       	rjmp	.+180    	; 0x3bec <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3b38:	fa 01       	movw	r30, r20
    3b3a:	ee 0f       	add	r30, r30
    3b3c:	ff 1f       	adc	r31, r31
    3b3e:	ee 0f       	add	r30, r30
    3b40:	ff 1f       	adc	r31, r31
    3b42:	e4 0f       	add	r30, r20
    3b44:	f5 1f       	adc	r31, r21
    3b46:	ee 0f       	add	r30, r30
    3b48:	ff 1f       	adc	r31, r31
    3b4a:	eb 57       	subi	r30, 0x7B	; 123
    3b4c:	f7 4f       	sbci	r31, 0xF7	; 247
    3b4e:	80 81       	ld	r24, Z
    3b50:	14 96       	adiw	r26, 0x04	; 4
    3b52:	2c 91       	ld	r18, X
    3b54:	82 17       	cp	r24, r18
    3b56:	08 f0       	brcs	.+2      	; 0x3b5a <_ZN15OrangutanSerial15serial_rx_checkEh+0x72>
    3b58:	49 c0       	rjmp	.+146    	; 0x3bec <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3b5a:	66 23       	and	r22, r22
    3b5c:	19 f0       	breq	.+6      	; 0x3b64 <_ZN15OrangutanSerial15serial_rx_checkEh+0x7c>
    3b5e:	e8 ec       	ldi	r30, 0xC8	; 200
    3b60:	f0 e0       	ldi	r31, 0x00	; 0
    3b62:	02 c0       	rjmp	.+4      	; 0x3b68 <_ZN15OrangutanSerial15serial_rx_checkEh+0x80>
    3b64:	e0 ec       	ldi	r30, 0xC0	; 192
    3b66:	f0 e0       	ldi	r31, 0x00	; 0
    3b68:	80 81       	ld	r24, Z
    3b6a:	87 ff       	sbrs	r24, 7
    3b6c:	3f c0       	rjmp	.+126    	; 0x3bec <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3b6e:	66 23       	and	r22, r22
    3b70:	19 f4       	brne	.+6      	; 0x3b78 <_ZN15OrangutanSerial15serial_rx_checkEh+0x90>
    3b72:	e6 ec       	ldi	r30, 0xC6	; 198
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	02 c0       	rjmp	.+4      	; 0x3b7c <_ZN15OrangutanSerial15serial_rx_checkEh+0x94>
    3b78:	ee ec       	ldi	r30, 0xCE	; 206
    3b7a:	f0 e0       	ldi	r31, 0x00	; 0
    3b7c:	90 81       	ld	r25, Z
    3b7e:	fa 01       	movw	r30, r20
    3b80:	ee 0f       	add	r30, r30
    3b82:	ff 1f       	adc	r31, r31
    3b84:	ee 0f       	add	r30, r30
    3b86:	ff 1f       	adc	r31, r31
    3b88:	e4 0f       	add	r30, r20
    3b8a:	f5 1f       	adc	r31, r21
    3b8c:	ee 0f       	add	r30, r30
    3b8e:	ff 1f       	adc	r31, r31
    3b90:	eb 57       	subi	r30, 0x7B	; 123
    3b92:	f7 4f       	sbci	r31, 0xF7	; 247
    3b94:	80 81       	ld	r24, Z
    3b96:	82 17       	cp	r24, r18
    3b98:	38 f4       	brcc	.+14     	; 0x3ba8 <_ZN15OrangutanSerial15serial_rx_checkEh+0xc0>
    3b9a:	80 81       	ld	r24, Z
    3b9c:	c8 0f       	add	r28, r24
    3b9e:	d1 1d       	adc	r29, r1
    3ba0:	98 83       	st	Y, r25
    3ba2:	80 81       	ld	r24, Z
    3ba4:	8f 5f       	subi	r24, 0xFF	; 255
    3ba6:	80 83       	st	Z, r24
    3ba8:	fa 01       	movw	r30, r20
    3baa:	ee 0f       	add	r30, r30
    3bac:	ff 1f       	adc	r31, r31
    3bae:	ee 0f       	add	r30, r30
    3bb0:	ff 1f       	adc	r31, r31
    3bb2:	e4 0f       	add	r30, r20
    3bb4:	f5 1f       	adc	r31, r21
    3bb6:	ee 0f       	add	r30, r30
    3bb8:	ff 1f       	adc	r31, r31
    3bba:	eb 57       	subi	r30, 0x7B	; 123
    3bbc:	f7 4f       	sbci	r31, 0xF7	; 247
    3bbe:	80 81       	ld	r24, Z
    3bc0:	da 01       	movw	r26, r20
    3bc2:	aa 0f       	add	r26, r26
    3bc4:	bb 1f       	adc	r27, r27
    3bc6:	9a 01       	movw	r18, r20
    3bc8:	13 e0       	ldi	r17, 0x03	; 3
    3bca:	22 0f       	add	r18, r18
    3bcc:	33 1f       	adc	r19, r19
    3bce:	1a 95       	dec	r17
    3bd0:	e1 f7       	brne	.-8      	; 0x3bca <_ZN15OrangutanSerial15serial_rx_checkEh+0xe2>
    3bd2:	a2 0f       	add	r26, r18
    3bd4:	b3 1f       	adc	r27, r19
    3bd6:	ad 57       	subi	r26, 0x7D	; 125
    3bd8:	b7 4f       	sbci	r27, 0xF7	; 247
    3bda:	14 96       	adiw	r26, 0x04	; 4
    3bdc:	9c 91       	ld	r25, X
    3bde:	14 97       	sbiw	r26, 0x04	; 4
    3be0:	89 17       	cp	r24, r25
    3be2:	21 f4       	brne	.+8      	; 0x3bec <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3be4:	15 96       	adiw	r26, 0x05	; 5
    3be6:	8c 91       	ld	r24, X
    3be8:	81 11       	cpse	r24, r1
    3bea:	10 82       	st	Z, r1
    3bec:	fa 01       	movw	r30, r20
    3bee:	a3 e0       	ldi	r26, 0x03	; 3
    3bf0:	ee 0f       	add	r30, r30
    3bf2:	ff 1f       	adc	r31, r31
    3bf4:	aa 95       	dec	r26
    3bf6:	e1 f7       	brne	.-8      	; 0x3bf0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x108>
    3bf8:	44 0f       	add	r20, r20
    3bfa:	55 1f       	adc	r21, r21
    3bfc:	e4 0f       	add	r30, r20
    3bfe:	f5 1f       	adc	r31, r21
    3c00:	ed 57       	subi	r30, 0x7D	; 125
    3c02:	f7 4f       	sbci	r31, 0xF7	; 247
    3c04:	80 81       	ld	r24, Z
    3c06:	88 23       	and	r24, r24
    3c08:	09 f0       	breq	.+2      	; 0x3c0c <_ZN15OrangutanSerial15serial_rx_checkEh+0x124>
    3c0a:	59 c0       	rjmp	.+178    	; 0x3cbe <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3c0c:	66 23       	and	r22, r22
    3c0e:	19 f0       	breq	.+6      	; 0x3c16 <_ZN15OrangutanSerial15serial_rx_checkEh+0x12e>
    3c10:	e9 ec       	ldi	r30, 0xC9	; 201
    3c12:	f0 e0       	ldi	r31, 0x00	; 0
    3c14:	02 c0       	rjmp	.+4      	; 0x3c1a <_ZN15OrangutanSerial15serial_rx_checkEh+0x132>
    3c16:	e1 ec       	ldi	r30, 0xC1	; 193
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	80 81       	ld	r24, Z
    3c1c:	80 68       	ori	r24, 0x80	; 128
    3c1e:	80 83       	st	Z, r24
    3c20:	4e c0       	rjmp	.+156    	; 0x3cbe <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3c22:	80 91 9c 08 	lds	r24, 0x089C
    3c26:	88 23       	and	r24, r24
    3c28:	19 f0       	breq	.+6      	; 0x3c30 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    3c2a:	10 92 99 08 	sts	0x0899, r1
    3c2e:	47 c0       	rjmp	.+142    	; 0x3cbe <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3c30:	80 91 9f 08 	lds	r24, 0x089F
    3c34:	90 91 a0 08 	lds	r25, 0x08A0
    3c38:	89 2b       	or	r24, r25
    3c3a:	09 f4       	brne	.+2      	; 0x3c3e <_ZN15OrangutanSerial15serial_rx_checkEh+0x156>
    3c3c:	40 c0       	rjmp	.+128    	; 0x3cbe <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3c3e:	90 91 99 08 	lds	r25, 0x0899
    3c42:	80 91 9b 08 	lds	r24, 0x089B
    3c46:	98 17       	cp	r25, r24
    3c48:	d0 f5       	brcc	.+116    	; 0x3cbe <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3c4a:	80 91 bd 08 	lds	r24, 0x08BD
    3c4e:	88 23       	and	r24, r24
    3c50:	a9 f4       	brne	.+42     	; 0x3c7c <_ZN15OrangutanSerial15serial_rx_checkEh+0x194>
    3c52:	0e 94 75 20 	call	0x40ea	; 0x40ea <_ZN12OrangutanSVP15serialReadStartEv>
    3c56:	80 93 bd 08 	sts	0x08BD, r24
    3c5a:	10 e0       	ldi	r17, 0x00	; 0
    3c5c:	0b c0       	rjmp	.+22     	; 0x3c74 <_ZN15OrangutanSerial15serial_rx_checkEh+0x18c>
    3c5e:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN12OrangutanSVP11getNextByteEv>
    3c62:	e0 2f       	mov	r30, r16
    3c64:	f0 e0       	ldi	r31, 0x00	; 0
    3c66:	31 97       	sbiw	r30, 0x01	; 1
    3c68:	e1 1b       	sub	r30, r17
    3c6a:	f1 09       	sbc	r31, r1
    3c6c:	e2 54       	subi	r30, 0x42	; 66
    3c6e:	f7 4f       	sbci	r31, 0xF7	; 247
    3c70:	80 83       	st	Z, r24
    3c72:	1f 5f       	subi	r17, 0xFF	; 255
    3c74:	00 91 bd 08 	lds	r16, 0x08BD
    3c78:	10 17       	cp	r17, r16
    3c7a:	88 f3       	brcs	.-30     	; 0x3c5e <_ZN15OrangutanSerial15serial_rx_checkEh+0x176>
    3c7c:	e0 91 bd 08 	lds	r30, 0x08BD
    3c80:	ee 23       	and	r30, r30
    3c82:	e9 f0       	breq	.+58     	; 0x3cbe <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3c84:	80 91 99 08 	lds	r24, 0x0899
    3c88:	a0 91 9f 08 	lds	r26, 0x089F
    3c8c:	b0 91 a0 08 	lds	r27, 0x08A0
    3c90:	a8 0f       	add	r26, r24
    3c92:	b1 1d       	adc	r27, r1
    3c94:	e1 50       	subi	r30, 0x01	; 1
    3c96:	e0 93 bd 08 	sts	0x08BD, r30
    3c9a:	f0 e0       	ldi	r31, 0x00	; 0
    3c9c:	e2 54       	subi	r30, 0x42	; 66
    3c9e:	f7 4f       	sbci	r31, 0xF7	; 247
    3ca0:	80 81       	ld	r24, Z
    3ca2:	8c 93       	st	X, r24
    3ca4:	80 91 99 08 	lds	r24, 0x0899
    3ca8:	8f 5f       	subi	r24, 0xFF	; 255
    3caa:	80 93 99 08 	sts	0x0899, r24
    3cae:	90 91 99 08 	lds	r25, 0x0899
    3cb2:	80 91 9b 08 	lds	r24, 0x089B
    3cb6:	98 17       	cp	r25, r24
    3cb8:	09 f0       	breq	.+2      	; 0x3cbc <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d4>
    3cba:	ba cf       	rjmp	.-140    	; 0x3c30 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    3cbc:	b2 cf       	rjmp	.-156    	; 0x3c22 <_ZN15OrangutanSerial15serial_rx_checkEh+0x13a>
    3cbe:	df 91       	pop	r29
    3cc0:	cf 91       	pop	r28
    3cc2:	1f 91       	pop	r17
    3cc4:	0f 91       	pop	r16
    3cc6:	08 95       	ret

00003cc8 <_ZN15OrangutanSerial5checkEv>:
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <_ZN15OrangutanSerial15serial_tx_checkEh>
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <_ZN15OrangutanSerial15serial_tx_checkEh>
    3cd4:	82 e0       	ldi	r24, 0x02	; 2
    3cd6:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <_ZN15OrangutanSerial15serial_tx_checkEh>
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <_ZN15OrangutanSerial15serial_rx_checkEh>
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <_ZN15OrangutanSerial15serial_rx_checkEh>
    3ce6:	82 e0       	ldi	r24, 0x02	; 2
    3ce8:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <_ZN15OrangutanSerial15serial_rx_checkEh>
    3cec:	08 95       	ret

00003cee <_ZN15OrangutanSerial12sendBlockingEhPch>:
    3cee:	1f 93       	push	r17
    3cf0:	18 2f       	mov	r17, r24
    3cf2:	0e 94 76 1c 	call	0x38ec	; 0x38ec <_ZN15OrangutanSerial4sendEhPch>
    3cf6:	02 c0       	rjmp	.+4      	; 0x3cfc <_ZN15OrangutanSerial12sendBlockingEhPch+0xe>
    3cf8:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <_ZN15OrangutanSerial5checkEv>
    3cfc:	81 2f       	mov	r24, r17
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	fc 01       	movw	r30, r24
    3d02:	73 e0       	ldi	r23, 0x03	; 3
    3d04:	ee 0f       	add	r30, r30
    3d06:	ff 1f       	adc	r31, r31
    3d08:	7a 95       	dec	r23
    3d0a:	e1 f7       	brne	.-8      	; 0x3d04 <_ZN15OrangutanSerial12sendBlockingEhPch+0x16>
    3d0c:	88 0f       	add	r24, r24
    3d0e:	99 1f       	adc	r25, r25
    3d10:	e8 0f       	add	r30, r24
    3d12:	f9 1f       	adc	r31, r25
    3d14:	ed 57       	subi	r30, 0x7D	; 125
    3d16:	f7 4f       	sbci	r31, 0xF7	; 247
    3d18:	21 81       	ldd	r18, Z+1	; 0x01
    3d1a:	81 2f       	mov	r24, r17
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	fc 01       	movw	r30, r24
    3d20:	53 e0       	ldi	r21, 0x03	; 3
    3d22:	ee 0f       	add	r30, r30
    3d24:	ff 1f       	adc	r31, r31
    3d26:	5a 95       	dec	r21
    3d28:	e1 f7       	brne	.-8      	; 0x3d22 <_ZN15OrangutanSerial12sendBlockingEhPch+0x34>
    3d2a:	88 0f       	add	r24, r24
    3d2c:	99 1f       	adc	r25, r25
    3d2e:	e8 0f       	add	r30, r24
    3d30:	f9 1f       	adc	r31, r25
    3d32:	ed 57       	subi	r30, 0x7D	; 125
    3d34:	f7 4f       	sbci	r31, 0xF7	; 247
    3d36:	83 81       	ldd	r24, Z+3	; 0x03
    3d38:	28 17       	cp	r18, r24
    3d3a:	f1 f6       	brne	.-68     	; 0x3cf8 <_ZN15OrangutanSerial12sendBlockingEhPch+0xa>
    3d3c:	1f 91       	pop	r17
    3d3e:	08 95       	ret

00003d40 <serial_send_blocking>:
    3d40:	0e 94 77 1e 	call	0x3cee	; 0x3cee <_ZN15OrangutanSerial12sendBlockingEhPch>
    3d44:	08 95       	ret

00003d46 <_ZN15OrangutanSerial15receiveBlockingEhPchj>:
    3d46:	a0 e0       	ldi	r26, 0x00	; 0
    3d48:	b0 e0       	ldi	r27, 0x00	; 0
    3d4a:	e9 ea       	ldi	r30, 0xA9	; 169
    3d4c:	fe e1       	ldi	r31, 0x1E	; 30
    3d4e:	0c 94 ec 21 	jmp	0x43d8	; 0x43d8 <__prologue_saves__+0xc>
    3d52:	08 2f       	mov	r16, r24
    3d54:	79 01       	movw	r14, r18
    3d56:	0e 94 96 1a 	call	0x352c	; 0x352c <_ZN15OrangutanSerial7receiveEhPch>
    3d5a:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <get_ms>
    3d5e:	4b 01       	movw	r8, r22
    3d60:	5c 01       	movw	r10, r24
    3d62:	10 e0       	ldi	r17, 0x00	; 0
    3d64:	e8 01       	movw	r28, r16
    3d66:	cc 0f       	add	r28, r28
    3d68:	dd 1f       	adc	r29, r29
    3d6a:	cc 0f       	add	r28, r28
    3d6c:	dd 1f       	adc	r29, r29
    3d6e:	c0 0f       	add	r28, r16
    3d70:	d1 1f       	adc	r29, r17
    3d72:	cc 0f       	add	r28, r28
    3d74:	dd 1f       	adc	r29, r29
    3d76:	cb 57       	subi	r28, 0x7B	; 123
    3d78:	d7 4f       	sbci	r29, 0xF7	; 247
    3d7a:	68 01       	movw	r12, r16
    3d7c:	f3 e0       	ldi	r31, 0x03	; 3
    3d7e:	cc 0c       	add	r12, r12
    3d80:	dd 1c       	adc	r13, r13
    3d82:	fa 95       	dec	r31
    3d84:	e1 f7       	brne	.-8      	; 0x3d7e <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x38>
    3d86:	00 0f       	add	r16, r16
    3d88:	11 1f       	adc	r17, r17
    3d8a:	c0 0e       	add	r12, r16
    3d8c:	d1 1e       	adc	r13, r17
    3d8e:	87 e8       	ldi	r24, 0x87	; 135
    3d90:	98 e0       	ldi	r25, 0x08	; 8
    3d92:	c8 0e       	add	r12, r24
    3d94:	d9 1e       	adc	r13, r25
    3d96:	00 e0       	ldi	r16, 0x00	; 0
    3d98:	10 e0       	ldi	r17, 0x00	; 0
    3d9a:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <_ZN15OrangutanSerial5checkEv>
    3d9e:	98 81       	ld	r25, Y
    3da0:	f6 01       	movw	r30, r12
    3da2:	80 81       	ld	r24, Z
    3da4:	98 17       	cp	r25, r24
    3da6:	11 f4       	brne	.+4      	; 0x3dac <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x66>
    3da8:	80 e0       	ldi	r24, 0x00	; 0
    3daa:	0c c0       	rjmp	.+24     	; 0x3dc4 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x7e>
    3dac:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <get_ms>
    3db0:	68 19       	sub	r22, r8
    3db2:	79 09       	sbc	r23, r9
    3db4:	8a 09       	sbc	r24, r10
    3db6:	9b 09       	sbc	r25, r11
    3db8:	6e 15       	cp	r22, r14
    3dba:	7f 05       	cpc	r23, r15
    3dbc:	80 07       	cpc	r24, r16
    3dbe:	91 07       	cpc	r25, r17
    3dc0:	60 f3       	brcs	.-40     	; 0x3d9a <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x54>
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62
    3dc8:	ec e0       	ldi	r30, 0x0C	; 12
    3dca:	0c 94 08 22 	jmp	0x4410	; 0x4410 <__epilogue_restores__+0xc>

00003dce <serial_receive_blocking>:
    3dce:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <_ZN15OrangutanSerial15receiveBlockingEhPchj>
    3dd2:	08 95       	ret

00003dd4 <serial_check>:
    3dd4:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <_ZN15OrangutanSerial5checkEv>
    3dd8:	08 95       	ret

00003dda <__vector_11>:
    3dda:	2f 92       	push	r2
    3ddc:	8f 93       	push	r24
    3dde:	9f 93       	push	r25
    3de0:	2f b6       	in	r2, 0x3f	; 63
    3de2:	80 91 c7 08 	lds	r24, 0x08C7
    3de6:	90 91 c8 08 	lds	r25, 0x08C8
    3dea:	01 96       	adiw	r24, 0x01	; 1
    3dec:	80 93 c7 08 	sts	0x08C7, r24
    3df0:	90 93 c8 08 	sts	0x08C8, r25
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	80 91 c9 08 	lds	r24, 0x08C9
    3dfa:	89 1f       	adc	r24, r25
    3dfc:	80 93 c9 08 	sts	0x08C9, r24
    3e00:	90 91 cf 08 	lds	r25, 0x08CF
    3e04:	9c 5f       	subi	r25, 0xFC	; 252
    3e06:	90 93 cf 08 	sts	0x08CF, r25
    3e0a:	80 91 ce 08 	lds	r24, 0x08CE
    3e0e:	80 51       	subi	r24, 0x10	; 16
    3e10:	97 42       	sbci	r25, 0x27	; 39
    3e12:	c0 f0       	brcs	.+48     	; 0x3e44 <end>
    3e14:	90 93 cf 08 	sts	0x08CF, r25
    3e18:	80 93 ce 08 	sts	0x08CE, r24
    3e1c:	80 91 ca 08 	lds	r24, 0x08CA
    3e20:	90 91 cb 08 	lds	r25, 0x08CB
    3e24:	01 96       	adiw	r24, 0x01	; 1
    3e26:	80 93 ca 08 	sts	0x08CA, r24
    3e2a:	90 93 cb 08 	sts	0x08CB, r25
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	80 91 cc 08 	lds	r24, 0x08CC
    3e34:	89 1f       	adc	r24, r25
    3e36:	80 93 cc 08 	sts	0x08CC, r24
    3e3a:	80 91 cd 08 	lds	r24, 0x08CD
    3e3e:	89 1f       	adc	r24, r25
    3e40:	80 93 cd 08 	sts	0x08CD, r24

00003e44 <end>:
    3e44:	2f be       	out	0x3f, r2	; 63
    3e46:	9f 91       	pop	r25
    3e48:	8f 91       	pop	r24
    3e4a:	2f 90       	pop	r2
    3e4c:	18 95       	reti

00003e4e <ticks_to_microseconds>:
    3e4e:	6f 5f       	subi	r22, 0xFF	; 255
    3e50:	7f 4f       	sbci	r23, 0xFF	; 255
    3e52:	8f 4f       	sbci	r24, 0xFF	; 255
    3e54:	9f 4f       	sbci	r25, 0xFF	; 255
    3e56:	66 0f       	add	r22, r22
    3e58:	77 1f       	adc	r23, r23
    3e5a:	88 1f       	adc	r24, r24
    3e5c:	99 1f       	adc	r25, r25
    3e5e:	25 e0       	ldi	r18, 0x05	; 5
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	40 e0       	ldi	r20, 0x00	; 0
    3e64:	50 e0       	ldi	r21, 0x00	; 0
    3e66:	0e 94 c4 21 	call	0x4388	; 0x4388 <__udivmodsi4>
    3e6a:	ca 01       	movw	r24, r20
    3e6c:	b9 01       	movw	r22, r18
    3e6e:	08 95       	ret

00003e70 <delay_ms>:
    3e70:	28 ee       	ldi	r18, 0xE8	; 232
    3e72:	33 e0       	ldi	r19, 0x03	; 3
    3e74:	09 c0       	rjmp	.+18     	; 0x3e88 <delay_ms+0x18>
    3e76:	f9 01       	movw	r30, r18
    3e78:	6f 93       	push	r22
    3e7a:	64 e0       	ldi	r22, 0x04	; 4
    3e7c:	6a 95       	dec	r22
    3e7e:	f1 f7       	brne	.-4      	; 0x3e7c <delay_ms+0xc>
    3e80:	6f 91       	pop	r22
    3e82:	31 97       	sbiw	r30, 0x01	; 1
    3e84:	c9 f7       	brne	.-14     	; 0x3e78 <delay_ms+0x8>
    3e86:	01 97       	sbiw	r24, 0x01	; 1
    3e88:	00 97       	sbiw	r24, 0x00	; 0
    3e8a:	a9 f7       	brne	.-22     	; 0x3e76 <delay_ms+0x6>
    3e8c:	08 95       	ret

00003e8e <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    3e8e:	6f 5f       	subi	r22, 0xFF	; 255
    3e90:	7f 4f       	sbci	r23, 0xFF	; 255
    3e92:	8f 4f       	sbci	r24, 0xFF	; 255
    3e94:	9f 4f       	sbci	r25, 0xFF	; 255
    3e96:	66 0f       	add	r22, r22
    3e98:	77 1f       	adc	r23, r23
    3e9a:	88 1f       	adc	r24, r24
    3e9c:	99 1f       	adc	r25, r25
    3e9e:	25 e0       	ldi	r18, 0x05	; 5
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	40 e0       	ldi	r20, 0x00	; 0
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	0e 94 c4 21 	call	0x4388	; 0x4388 <__udivmodsi4>
    3eaa:	ca 01       	movw	r24, r20
    3eac:	b9 01       	movw	r22, r18
    3eae:	08 95       	ret

00003eb0 <_ZN13OrangutanTime17delayMillisecondsEj>:
    3eb0:	28 ee       	ldi	r18, 0xE8	; 232
    3eb2:	33 e0       	ldi	r19, 0x03	; 3
    3eb4:	09 c0       	rjmp	.+18     	; 0x3ec8 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3eb6:	f9 01       	movw	r30, r18
    3eb8:	6f 93       	push	r22
    3eba:	64 e0       	ldi	r22, 0x04	; 4
    3ebc:	6a 95       	dec	r22
    3ebe:	f1 f7       	brne	.-4      	; 0x3ebc <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3ec0:	6f 91       	pop	r22
    3ec2:	31 97       	sbiw	r30, 0x01	; 1
    3ec4:	c9 f7       	brne	.-14     	; 0x3eb8 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3ec6:	01 97       	sbiw	r24, 0x01	; 1
    3ec8:	00 97       	sbiw	r24, 0x00	; 0
    3eca:	a9 f7       	brne	.-22     	; 0x3eb6 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    3ecc:	08 95       	ret

00003ece <_ZN13OrangutanTime5init2Ev>:
    3ece:	a0 e7       	ldi	r26, 0x70	; 112
    3ed0:	b0 e0       	ldi	r27, 0x00	; 0
    3ed2:	8c 91       	ld	r24, X
    3ed4:	8e 7f       	andi	r24, 0xFE	; 254
    3ed6:	8c 93       	st	X, r24
    3ed8:	e0 eb       	ldi	r30, 0xB0	; 176
    3eda:	f0 e0       	ldi	r31, 0x00	; 0
    3edc:	80 81       	ld	r24, Z
    3ede:	83 60       	ori	r24, 0x03	; 3
    3ee0:	80 83       	st	Z, r24
    3ee2:	e1 eb       	ldi	r30, 0xB1	; 177
    3ee4:	f0 e0       	ldi	r31, 0x00	; 0
    3ee6:	80 81       	ld	r24, Z
    3ee8:	80 7f       	andi	r24, 0xF0	; 240
    3eea:	80 83       	st	Z, r24
    3eec:	80 81       	ld	r24, Z
    3eee:	82 60       	ori	r24, 0x02	; 2
    3ef0:	80 83       	st	Z, r24
    3ef2:	b8 9a       	sbi	0x17, 0	; 23
    3ef4:	8c 91       	ld	r24, X
    3ef6:	81 60       	ori	r24, 0x01	; 1
    3ef8:	8c 93       	st	X, r24
    3efa:	78 94       	sei
    3efc:	08 95       	ret

00003efe <_ZN13OrangutanTime4initEv>:
    3efe:	80 91 d0 08 	lds	r24, 0x08D0
    3f02:	88 23       	and	r24, r24
    3f04:	29 f4       	brne	.+10     	; 0x3f10 <_ZN13OrangutanTime4initEv+0x12>
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	80 93 d0 08 	sts	0x08D0, r24
    3f0c:	0e 94 67 1f 	call	0x3ece	; 0x3ece <_ZN13OrangutanTime5init2Ev>
    3f10:	08 95       	ret

00003f12 <_ZN13OrangutanTime2msEv>:
    3f12:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <_ZN13OrangutanTime4initEv>
    3f16:	e0 e7       	ldi	r30, 0x70	; 112
    3f18:	f0 e0       	ldi	r31, 0x00	; 0
    3f1a:	80 81       	ld	r24, Z
    3f1c:	8e 7f       	andi	r24, 0xFE	; 254
    3f1e:	80 83       	st	Z, r24
    3f20:	20 91 ca 08 	lds	r18, 0x08CA
    3f24:	30 91 cb 08 	lds	r19, 0x08CB
    3f28:	40 91 cc 08 	lds	r20, 0x08CC
    3f2c:	50 91 cd 08 	lds	r21, 0x08CD
    3f30:	80 81       	ld	r24, Z
    3f32:	81 60       	ori	r24, 0x01	; 1
    3f34:	80 83       	st	Z, r24
    3f36:	b9 01       	movw	r22, r18
    3f38:	ca 01       	movw	r24, r20
    3f3a:	08 95       	ret

00003f3c <get_ms>:
    3f3c:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <_ZN13OrangutanTime2msEv>
    3f40:	08 95       	ret

00003f42 <_ZN13OrangutanTime5ticksEv>:
    3f42:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <_ZN13OrangutanTime4initEv>
    3f46:	80 91 70 00 	lds	r24, 0x0070
    3f4a:	8e 7f       	andi	r24, 0xFE	; 254
    3f4c:	80 93 70 00 	sts	0x0070, r24
    3f50:	60 91 b2 00 	lds	r22, 0x00B2
    3f54:	80 91 c6 08 	lds	r24, 0x08C6
    3f58:	90 91 c7 08 	lds	r25, 0x08C7
    3f5c:	a0 91 c8 08 	lds	r26, 0x08C8
    3f60:	b0 91 c9 08 	lds	r27, 0x08C9
    3f64:	b8 99       	sbic	0x17, 0	; 23
    3f66:	05 c0       	rjmp	.+10     	; 0x3f72 <_ZN13OrangutanTime5ticksEv+0x30>
    3f68:	26 2f       	mov	r18, r22
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	40 e0       	ldi	r20, 0x00	; 0
    3f6e:	50 e0       	ldi	r21, 0x00	; 0
    3f70:	11 c0       	rjmp	.+34     	; 0x3f94 <_ZN13OrangutanTime5ticksEv+0x52>
    3f72:	80 91 b2 00 	lds	r24, 0x00B2
    3f76:	20 91 c6 08 	lds	r18, 0x08C6
    3f7a:	30 91 c7 08 	lds	r19, 0x08C7
    3f7e:	40 91 c8 08 	lds	r20, 0x08C8
    3f82:	50 91 c9 08 	lds	r21, 0x08C9
    3f86:	20 50       	subi	r18, 0x00	; 0
    3f88:	3f 4f       	sbci	r19, 0xFF	; 255
    3f8a:	4f 4f       	sbci	r20, 0xFF	; 255
    3f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	a0 e0       	ldi	r26, 0x00	; 0
    3f92:	b0 e0       	ldi	r27, 0x00	; 0
    3f94:	28 2b       	or	r18, r24
    3f96:	39 2b       	or	r19, r25
    3f98:	4a 2b       	or	r20, r26
    3f9a:	5b 2b       	or	r21, r27
    3f9c:	80 91 70 00 	lds	r24, 0x0070
    3fa0:	81 60       	ori	r24, 0x01	; 1
    3fa2:	80 93 70 00 	sts	0x0070, r24
    3fa6:	b9 01       	movw	r22, r18
    3fa8:	ca 01       	movw	r24, r20
    3faa:	08 95       	ret

00003fac <get_ticks>:
    3fac:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <_ZN13OrangutanTime5ticksEv>
    3fb0:	08 95       	ret

00003fb2 <_ZN13OrangutanTime5resetEv>:
    3fb2:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <_ZN13OrangutanTime4initEv>
    3fb6:	e0 e7       	ldi	r30, 0x70	; 112
    3fb8:	f0 e0       	ldi	r31, 0x00	; 0
    3fba:	80 81       	ld	r24, Z
    3fbc:	8e 7f       	andi	r24, 0xFE	; 254
    3fbe:	80 83       	st	Z, r24
    3fc0:	10 92 ca 08 	sts	0x08CA, r1
    3fc4:	10 92 cb 08 	sts	0x08CB, r1
    3fc8:	10 92 cc 08 	sts	0x08CC, r1
    3fcc:	10 92 cd 08 	sts	0x08CD, r1
    3fd0:	10 92 cf 08 	sts	0x08CF, r1
    3fd4:	10 92 ce 08 	sts	0x08CE, r1
    3fd8:	80 81       	ld	r24, Z
    3fda:	81 60       	ori	r24, 0x01	; 1
    3fdc:	80 83       	st	Z, r24
    3fde:	08 95       	ret

00003fe0 <time_reset>:
    3fe0:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <_ZN13OrangutanTime5resetEv>
    3fe4:	08 95       	ret

00003fe6 <_ZN12OrangutanSVP7setModeEh>:
    3fe6:	98 2f       	mov	r25, r24
    3fe8:	80 91 e7 08 	lds	r24, 0x08E7
    3fec:	89 17       	cp	r24, r25
    3fee:	39 f0       	breq	.+14     	; 0x3ffe <_ZN12OrangutanSVP7setModeEh+0x18>
    3ff0:	90 93 e7 08 	sts	0x08E7, r25
    3ff4:	89 2f       	mov	r24, r25
    3ff6:	80 6c       	ori	r24, 0xC0	; 192
    3ff8:	65 e0       	ldi	r22, 0x05	; 5
    3ffa:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3ffe:	08 95       	ret

00004000 <svp_set_mode>:
    4000:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <_ZN12OrangutanSVP7setModeEh>
    4004:	08 95       	ret

00004006 <_ZN12OrangutanSVP17serialSendIfReadyEc>:
    4006:	1f 93       	push	r17
    4008:	18 2f       	mov	r17, r24
    400a:	88 1f       	adc	r24, r24
    400c:	88 27       	eor	r24, r24
    400e:	88 1f       	adc	r24, r24
    4010:	8c 57       	subi	r24, 0x7C	; 124
    4012:	65 e0       	ldi	r22, 0x05	; 5
    4014:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    4018:	81 2f       	mov	r24, r17
    401a:	8f 77       	andi	r24, 0x7F	; 127
    401c:	65 e0       	ldi	r22, 0x05	; 5
    401e:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    4022:	1f 91       	pop	r17
    4024:	08 95       	ret

00004026 <_ZN12OrangutanSVP11getNextByteEv>:
    4026:	8f ef       	ldi	r24, 0xFF	; 255
    4028:	64 e0       	ldi	r22, 0x04	; 4
    402a:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    402e:	08 95       	ret

00004030 <_ZL23updateVariablesIfNeededv>:
    4030:	cf 93       	push	r28
    4032:	df 93       	push	r29
    4034:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <_ZN13OrangutanTime2msEv>
    4038:	20 91 a5 08 	lds	r18, 0x08A5
    403c:	30 91 a6 08 	lds	r19, 0x08A6
    4040:	40 91 a7 08 	lds	r20, 0x08A7
    4044:	50 91 a8 08 	lds	r21, 0x08A8
    4048:	62 17       	cp	r22, r18
    404a:	73 07       	cpc	r23, r19
    404c:	84 07       	cpc	r24, r20
    404e:	95 07       	cpc	r25, r21
    4050:	b9 f0       	breq	.+46     	; 0x4080 <_ZL23updateVariablesIfNeededv+0x50>
    4052:	81 e8       	ldi	r24, 0x81	; 129
    4054:	67 e0       	ldi	r22, 0x07	; 7
    4056:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    405a:	ca ed       	ldi	r28, 0xDA	; 218
    405c:	d8 e0       	ldi	r29, 0x08	; 8
    405e:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN12OrangutanSVP11getNextByteEv>
    4062:	89 93       	st	Y+, r24
    4064:	88 e0       	ldi	r24, 0x08	; 8
    4066:	c7 3e       	cpi	r28, 0xE7	; 231
    4068:	d8 07       	cpc	r29, r24
    406a:	c9 f7       	brne	.-14     	; 0x405e <_ZL23updateVariablesIfNeededv+0x2e>
    406c:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <_ZN13OrangutanTime2msEv>
    4070:	60 93 a5 08 	sts	0x08A5, r22
    4074:	70 93 a6 08 	sts	0x08A6, r23
    4078:	80 93 a7 08 	sts	0x08A7, r24
    407c:	90 93 a8 08 	sts	0x08A8, r25
    4080:	df 91       	pop	r29
    4082:	cf 91       	pop	r28
    4084:	08 95       	ret

00004086 <_ZN12OrangutanSVP9getStatusEv>:
    4086:	0e 94 18 20 	call	0x4030	; 0x4030 <_ZL23updateVariablesIfNeededv>
    408a:	80 91 da 08 	lds	r24, 0x08DA
    408e:	08 95       	ret

00004090 <svp_get_status>:
    4090:	0e 94 43 20 	call	0x4086	; 0x4086 <_ZN12OrangutanSVP9getStatusEv>
    4094:	08 95       	ret

00004096 <_ZN12OrangutanSVP21getChannelDMillivoltsEv>:
    4096:	0e 94 18 20 	call	0x4030	; 0x4030 <_ZL23updateVariablesIfNeededv>
    409a:	80 91 e1 08 	lds	r24, 0x08E1
    409e:	90 91 e2 08 	lds	r25, 0x08E2
    40a2:	08 95       	ret

000040a4 <_ZN12OrangutanSVP21getChannelCMillivoltsEv>:
    40a4:	0e 94 18 20 	call	0x4030	; 0x4030 <_ZL23updateVariablesIfNeededv>
    40a8:	80 91 df 08 	lds	r24, 0x08DF
    40ac:	90 91 e0 08 	lds	r25, 0x08E0
    40b0:	08 95       	ret

000040b2 <_ZN12OrangutanSVP21getChannelBMillivoltsEv>:
    40b2:	0e 94 18 20 	call	0x4030	; 0x4030 <_ZL23updateVariablesIfNeededv>
    40b6:	80 91 dd 08 	lds	r24, 0x08DD
    40ba:	90 91 de 08 	lds	r25, 0x08DE
    40be:	08 95       	ret

000040c0 <_ZN12OrangutanSVP21getChannelAMillivoltsEv>:
    40c0:	0e 94 18 20 	call	0x4030	; 0x4030 <_ZL23updateVariablesIfNeededv>
    40c4:	80 91 db 08 	lds	r24, 0x08DB
    40c8:	90 91 dc 08 	lds	r25, 0x08DC
    40cc:	08 95       	ret

000040ce <_ZN12OrangutanSVP20getBatteryMillivoltsEv>:
    40ce:	0e 94 18 20 	call	0x4030	; 0x4030 <_ZL23updateVariablesIfNeededv>
    40d2:	80 91 e5 08 	lds	r24, 0x08E5
    40d6:	90 91 e6 08 	lds	r25, 0x08E6
    40da:	08 95       	ret

000040dc <_ZN12OrangutanSVP20getTrimpotMillivoltsEv>:
    40dc:	0e 94 18 20 	call	0x4030	; 0x4030 <_ZL23updateVariablesIfNeededv>
    40e0:	80 91 e3 08 	lds	r24, 0x08E3
    40e4:	90 91 e4 08 	lds	r25, 0x08E4
    40e8:	08 95       	ret

000040ea <_ZN12OrangutanSVP15serialReadStartEv>:
    40ea:	83 e8       	ldi	r24, 0x83	; 131
    40ec:	67 e0       	ldi	r22, 0x07	; 7
    40ee:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    40f2:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN12OrangutanSVP11getNextByteEv>
    40f6:	08 95       	ret

000040f8 <_Z14updateEncodersv>:
    40f8:	a5 e0       	ldi	r26, 0x05	; 5
    40fa:	b0 e0       	ldi	r27, 0x00	; 0
    40fc:	e2 e8       	ldi	r30, 0x82	; 130
    40fe:	f0 e2       	ldi	r31, 0x20	; 32
    4100:	0c 94 f5 21 	jmp	0x43ea	; 0x43ea <__prologue_saves__+0x1e>
    4104:	82 e8       	ldi	r24, 0x82	; 130
    4106:	66 e0       	ldi	r22, 0x06	; 6
    4108:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    410c:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN12OrangutanSVP11getNextByteEv>
    4110:	80 93 d5 08 	sts	0x08D5, r24
    4114:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN12OrangutanSVP11getNextByteEv>
    4118:	80 93 d6 08 	sts	0x08D6, r24
    411c:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN12OrangutanSVP11getNextByteEv>
    4120:	80 93 d7 08 	sts	0x08D7, r24
    4124:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN12OrangutanSVP11getNextByteEv>
    4128:	80 93 d8 08 	sts	0x08D8, r24
    412c:	10 91 d9 08 	lds	r17, 0x08D9
    4130:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN12OrangutanSVP11getNextByteEv>
    4134:	18 2b       	or	r17, r24
    4136:	10 93 d9 08 	sts	0x08D9, r17
    413a:	de 01       	movw	r26, r28
    413c:	11 96       	adiw	r26, 0x01	; 1
    413e:	e5 ed       	ldi	r30, 0xD5	; 213
    4140:	f8 e0       	ldi	r31, 0x08	; 8
    4142:	85 e0       	ldi	r24, 0x05	; 5
    4144:	01 90       	ld	r0, Z+
    4146:	0d 92       	st	X+, r0
    4148:	81 50       	subi	r24, 0x01	; 1
    414a:	e1 f7       	brne	.-8      	; 0x4144 <__stack+0x45>
    414c:	29 81       	ldd	r18, Y+1	; 0x01
    414e:	3a 81       	ldd	r19, Y+2	; 0x02
    4150:	4b 81       	ldd	r20, Y+3	; 0x03
    4152:	5c 81       	ldd	r21, Y+4	; 0x04
    4154:	6d 81       	ldd	r22, Y+5	; 0x05
    4156:	70 e0       	ldi	r23, 0x00	; 0
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	25 96       	adiw	r28, 0x05	; 5
    415c:	e3 e0       	ldi	r30, 0x03	; 3
    415e:	0c 94 11 22 	jmp	0x4422	; 0x4422 <__epilogue_restores__+0x1e>

00004162 <_ZL22updateEncodersIfNeededv>:
    4162:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <_ZN13OrangutanTime2msEv>
    4166:	20 91 a1 08 	lds	r18, 0x08A1
    416a:	30 91 a2 08 	lds	r19, 0x08A2
    416e:	40 91 a3 08 	lds	r20, 0x08A3
    4172:	50 91 a4 08 	lds	r21, 0x08A4
    4176:	62 17       	cp	r22, r18
    4178:	73 07       	cpc	r23, r19
    417a:	84 07       	cpc	r24, r20
    417c:	95 07       	cpc	r25, r21
    417e:	61 f0       	breq	.+24     	; 0x4198 <_ZL22updateEncodersIfNeededv+0x36>
    4180:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <_Z14updateEncodersv>
    4184:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <_ZN13OrangutanTime2msEv>
    4188:	60 93 a1 08 	sts	0x08A1, r22
    418c:	70 93 a2 08 	sts	0x08A2, r23
    4190:	80 93 a3 08 	sts	0x08A3, r24
    4194:	90 93 a4 08 	sts	0x08A4, r25
    4198:	08 95       	ret

0000419a <_ZN12OrangutanSVP12checkErrorCDEv>:
    419a:	0e 94 b1 20 	call	0x4162	; 0x4162 <_ZL22updateEncodersIfNeededv>
    419e:	80 91 d9 08 	lds	r24, 0x08D9
    41a2:	81 fd       	sbrc	r24, 1
    41a4:	02 c0       	rjmp	.+4      	; 0x41aa <_ZN12OrangutanSVP12checkErrorCDEv+0x10>
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    41a8:	08 95       	ret
    41aa:	8d 7f       	andi	r24, 0xFD	; 253
    41ac:	80 93 d9 08 	sts	0x08D9, r24
    41b0:	81 e0       	ldi	r24, 0x01	; 1
    41b2:	08 95       	ret

000041b4 <svp_check_error_cd>:
    41b4:	0e 94 cd 20 	call	0x419a	; 0x419a <_ZN12OrangutanSVP12checkErrorCDEv>
    41b8:	08 95       	ret

000041ba <_ZN12OrangutanSVP12checkErrorABEv>:
    41ba:	0e 94 b1 20 	call	0x4162	; 0x4162 <_ZL22updateEncodersIfNeededv>
    41be:	80 91 d9 08 	lds	r24, 0x08D9
    41c2:	80 fd       	sbrc	r24, 0
    41c4:	02 c0       	rjmp	.+4      	; 0x41ca <_ZN12OrangutanSVP12checkErrorABEv+0x10>
    41c6:	80 e0       	ldi	r24, 0x00	; 0
    41c8:	08 95       	ret
    41ca:	8e 7f       	andi	r24, 0xFE	; 254
    41cc:	80 93 d9 08 	sts	0x08D9, r24
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	08 95       	ret

000041d4 <svp_check_error_ab>:
    41d4:	0e 94 dd 20 	call	0x41ba	; 0x41ba <_ZN12OrangutanSVP12checkErrorABEv>
    41d8:	08 95       	ret

000041da <_ZN12OrangutanSVP11getCountsCDEv>:
    41da:	0e 94 b1 20 	call	0x4162	; 0x4162 <_ZL22updateEncodersIfNeededv>
    41de:	20 91 d7 08 	lds	r18, 0x08D7
    41e2:	30 91 d8 08 	lds	r19, 0x08D8
    41e6:	80 91 d3 08 	lds	r24, 0x08D3
    41ea:	90 91 d4 08 	lds	r25, 0x08D4
    41ee:	28 1b       	sub	r18, r24
    41f0:	39 0b       	sbc	r19, r25
    41f2:	c9 01       	movw	r24, r18
    41f4:	08 95       	ret

000041f6 <_ZN12OrangutanSVP19getCountsAndResetCDEv>:
    41f6:	0e 94 ed 20 	call	0x41da	; 0x41da <_ZN12OrangutanSVP11getCountsCDEv>
    41fa:	20 91 d7 08 	lds	r18, 0x08D7
    41fe:	30 91 d8 08 	lds	r19, 0x08D8
    4202:	30 93 d4 08 	sts	0x08D4, r19
    4206:	20 93 d3 08 	sts	0x08D3, r18
    420a:	08 95       	ret

0000420c <svp_get_counts_and_reset_cd>:
    420c:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <_ZN12OrangutanSVP19getCountsAndResetCDEv>
    4210:	08 95       	ret

00004212 <svp_get_counts_cd>:
    4212:	0e 94 ed 20 	call	0x41da	; 0x41da <_ZN12OrangutanSVP11getCountsCDEv>
    4216:	08 95       	ret

00004218 <_ZN12OrangutanSVP11getCountsABEv>:
    4218:	0e 94 b1 20 	call	0x4162	; 0x4162 <_ZL22updateEncodersIfNeededv>
    421c:	20 91 d5 08 	lds	r18, 0x08D5
    4220:	30 91 d6 08 	lds	r19, 0x08D6
    4224:	80 91 d1 08 	lds	r24, 0x08D1
    4228:	90 91 d2 08 	lds	r25, 0x08D2
    422c:	28 1b       	sub	r18, r24
    422e:	39 0b       	sbc	r19, r25
    4230:	c9 01       	movw	r24, r18
    4232:	08 95       	ret

00004234 <_ZN12OrangutanSVP19getCountsAndResetABEv>:
    4234:	0e 94 0c 21 	call	0x4218	; 0x4218 <_ZN12OrangutanSVP11getCountsABEv>
    4238:	20 91 d5 08 	lds	r18, 0x08D5
    423c:	30 91 d6 08 	lds	r19, 0x08D6
    4240:	30 93 d2 08 	sts	0x08D2, r19
    4244:	20 93 d1 08 	sts	0x08D1, r18
    4248:	08 95       	ret

0000424a <svp_get_counts_and_reset_ab>:
    424a:	0e 94 1a 21 	call	0x4234	; 0x4234 <_ZN12OrangutanSVP19getCountsAndResetABEv>
    424e:	08 95       	ret

00004250 <svp_get_counts_ab>:
    4250:	0e 94 0c 21 	call	0x4218	; 0x4218 <_ZN12OrangutanSVP11getCountsABEv>
    4254:	08 95       	ret

00004256 <_ZN12OrangutanSVP18getFirmwareVersionEv>:
    4256:	80 e8       	ldi	r24, 0x80	; 128
    4258:	65 e0       	ldi	r22, 0x05	; 5
    425a:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    425e:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN12OrangutanSVP11getNextByteEv>
    4262:	08 95       	ret

00004264 <svp_get_firmware_version>:
    4264:	0e 94 2b 21 	call	0x4256	; 0x4256 <_ZN12OrangutanSVP18getFirmwareVersionEv>
    4268:	08 95       	ret

0000426a <_ZN18OrangutanSPIMaster4initEhh>:
    426a:	98 2f       	mov	r25, r24
    426c:	24 99       	sbic	0x04, 4	; 4
    426e:	0c c0       	rjmp	.+24     	; 0x4288 <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    4270:	2c 99       	sbic	0x05, 4	; 5
    4272:	0a c0       	rjmp	.+20     	; 0x4288 <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    4274:	2c 9a       	sbi	0x05, 4	; 5
    4276:	ee e1       	ldi	r30, 0x1E	; 30
    4278:	f0 e0       	ldi	r31, 0x00	; 0
    427a:	6f 93       	push	r22
    427c:	64 e0       	ldi	r22, 0x04	; 4
    427e:	6a 95       	dec	r22
    4280:	f1 f7       	brne	.-4      	; 0x427e <_ZN18OrangutanSPIMaster4initEhh+0x14>
    4282:	6f 91       	pop	r22
    4284:	31 97       	sbiw	r30, 0x01	; 1
    4286:	c9 f7       	brne	.-14     	; 0x427a <_ZN18OrangutanSPIMaster4initEhh+0x10>
    4288:	84 b1       	in	r24, 0x04	; 4
    428a:	80 6a       	ori	r24, 0xA0	; 160
    428c:	84 b9       	out	0x04, r24	; 4
    428e:	26 98       	cbi	0x04, 6	; 4
    4290:	89 2f       	mov	r24, r25
    4292:	83 70       	andi	r24, 0x03	; 3
    4294:	80 65       	ori	r24, 0x50	; 80
    4296:	6c 7a       	andi	r22, 0xAC	; 172
    4298:	86 2b       	or	r24, r22
    429a:	8c bd       	out	0x2c, r24	; 44
    429c:	89 2f       	mov	r24, r25
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	96 95       	lsr	r25
    42a2:	87 95       	ror	r24
    42a4:	96 95       	lsr	r25
    42a6:	87 95       	ror	r24
    42a8:	81 70       	andi	r24, 0x01	; 1
    42aa:	8d bd       	out	0x2d, r24	; 45
    42ac:	81 e0       	ldi	r24, 0x01	; 1
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <_ZN13OrangutanTime17delayMillisecondsEj>
    42b4:	08 95       	ret

000042b6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>:
    42b6:	0f 93       	push	r16
    42b8:	1f 93       	push	r17
    42ba:	08 2f       	mov	r16, r24
    42bc:	16 2f       	mov	r17, r22
    42be:	0c b4       	in	r0, 0x2c	; 44
    42c0:	06 fc       	sbrc	r0, 6
    42c2:	04 c0       	rjmp	.+8      	; 0x42cc <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x16>
    42c4:	80 e0       	ldi	r24, 0x00	; 0
    42c6:	64 e0       	ldi	r22, 0x04	; 4
    42c8:	0e 94 35 21 	call	0x426a	; 0x426a <_ZN18OrangutanSPIMaster4initEhh>
    42cc:	0c b4       	in	r0, 0x2c	; 44
    42ce:	04 fc       	sbrc	r0, 4
    42d0:	03 c0       	rjmp	.+6      	; 0x42d8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x22>
    42d2:	8c b5       	in	r24, 0x2c	; 44
    42d4:	80 61       	ori	r24, 0x10	; 16
    42d6:	8c bd       	out	0x2c, r24	; 44
    42d8:	0e bd       	out	0x2e, r16	; 46
    42da:	05 c0       	rjmp	.+10     	; 0x42e6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    42dc:	0c b4       	in	r0, 0x2c	; 44
    42de:	04 fc       	sbrc	r0, 4
    42e0:	02 c0       	rjmp	.+4      	; 0x42e6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	0f c0       	rjmp	.+30     	; 0x4304 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4e>
    42e6:	0d b4       	in	r0, 0x2d	; 45
    42e8:	07 fe       	sbrs	r0, 7
    42ea:	f8 cf       	rjmp	.-16     	; 0x42dc <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x26>
    42ec:	11 23       	and	r17, r17
    42ee:	49 f0       	breq	.+18     	; 0x4302 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4c>
    42f0:	81 2f       	mov	r24, r17
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	6f 93       	push	r22
    42f6:	64 e0       	ldi	r22, 0x04	; 4
    42f8:	6a 95       	dec	r22
    42fa:	f1 f7       	brne	.-4      	; 0x42f8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x42>
    42fc:	6f 91       	pop	r22
    42fe:	01 97       	sbiw	r24, 0x01	; 1
    4300:	c9 f7       	brne	.-14     	; 0x42f4 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x3e>
    4302:	8e b5       	in	r24, 0x2e	; 46
    4304:	1f 91       	pop	r17
    4306:	0f 91       	pop	r16
    4308:	08 95       	ret

0000430a <_ZN18OrangutanSPIMaster8transmitEh>:
    430a:	60 e0       	ldi	r22, 0x00	; 0
    430c:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    4310:	08 95       	ret

00004312 <spi_master_transmit>:
    4312:	0e 94 85 21 	call	0x430a	; 0x430a <_ZN18OrangutanSPIMaster8transmitEh>
    4316:	08 95       	ret

00004318 <spi_master_transmit_and_delay>:
    4318:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    431c:	08 95       	ret

0000431e <spi_master_init>:
    431e:	0e 94 35 21 	call	0x426a	; 0x426a <_ZN18OrangutanSPIMaster4initEhh>
    4322:	08 95       	ret

00004324 <__mulsi3>:
    4324:	62 9f       	mul	r22, r18
    4326:	d0 01       	movw	r26, r0
    4328:	73 9f       	mul	r23, r19
    432a:	f0 01       	movw	r30, r0
    432c:	82 9f       	mul	r24, r18
    432e:	e0 0d       	add	r30, r0
    4330:	f1 1d       	adc	r31, r1
    4332:	64 9f       	mul	r22, r20
    4334:	e0 0d       	add	r30, r0
    4336:	f1 1d       	adc	r31, r1
    4338:	92 9f       	mul	r25, r18
    433a:	f0 0d       	add	r31, r0
    433c:	83 9f       	mul	r24, r19
    433e:	f0 0d       	add	r31, r0
    4340:	74 9f       	mul	r23, r20
    4342:	f0 0d       	add	r31, r0
    4344:	65 9f       	mul	r22, r21
    4346:	f0 0d       	add	r31, r0
    4348:	99 27       	eor	r25, r25
    434a:	72 9f       	mul	r23, r18
    434c:	b0 0d       	add	r27, r0
    434e:	e1 1d       	adc	r30, r1
    4350:	f9 1f       	adc	r31, r25
    4352:	63 9f       	mul	r22, r19
    4354:	b0 0d       	add	r27, r0
    4356:	e1 1d       	adc	r30, r1
    4358:	f9 1f       	adc	r31, r25
    435a:	bd 01       	movw	r22, r26
    435c:	cf 01       	movw	r24, r30
    435e:	11 24       	eor	r1, r1
    4360:	08 95       	ret

00004362 <__divmodhi4>:
    4362:	97 fb       	bst	r25, 7
    4364:	09 2e       	mov	r0, r25
    4366:	07 26       	eor	r0, r23
    4368:	0a d0       	rcall	.+20     	; 0x437e <__divmodhi4_neg1>
    436a:	77 fd       	sbrc	r23, 7
    436c:	04 d0       	rcall	.+8      	; 0x4376 <__divmodhi4_neg2>
    436e:	65 d0       	rcall	.+202    	; 0x443a <__udivmodhi4>
    4370:	06 d0       	rcall	.+12     	; 0x437e <__divmodhi4_neg1>
    4372:	00 20       	and	r0, r0
    4374:	1a f4       	brpl	.+6      	; 0x437c <__divmodhi4_exit>

00004376 <__divmodhi4_neg2>:
    4376:	70 95       	com	r23
    4378:	61 95       	neg	r22
    437a:	7f 4f       	sbci	r23, 0xFF	; 255

0000437c <__divmodhi4_exit>:
    437c:	08 95       	ret

0000437e <__divmodhi4_neg1>:
    437e:	f6 f7       	brtc	.-4      	; 0x437c <__divmodhi4_exit>
    4380:	90 95       	com	r25
    4382:	81 95       	neg	r24
    4384:	9f 4f       	sbci	r25, 0xFF	; 255
    4386:	08 95       	ret

00004388 <__udivmodsi4>:
    4388:	a1 e2       	ldi	r26, 0x21	; 33
    438a:	1a 2e       	mov	r1, r26
    438c:	aa 1b       	sub	r26, r26
    438e:	bb 1b       	sub	r27, r27
    4390:	fd 01       	movw	r30, r26
    4392:	0d c0       	rjmp	.+26     	; 0x43ae <__udivmodsi4_ep>

00004394 <__udivmodsi4_loop>:
    4394:	aa 1f       	adc	r26, r26
    4396:	bb 1f       	adc	r27, r27
    4398:	ee 1f       	adc	r30, r30
    439a:	ff 1f       	adc	r31, r31
    439c:	a2 17       	cp	r26, r18
    439e:	b3 07       	cpc	r27, r19
    43a0:	e4 07       	cpc	r30, r20
    43a2:	f5 07       	cpc	r31, r21
    43a4:	20 f0       	brcs	.+8      	; 0x43ae <__udivmodsi4_ep>
    43a6:	a2 1b       	sub	r26, r18
    43a8:	b3 0b       	sbc	r27, r19
    43aa:	e4 0b       	sbc	r30, r20
    43ac:	f5 0b       	sbc	r31, r21

000043ae <__udivmodsi4_ep>:
    43ae:	66 1f       	adc	r22, r22
    43b0:	77 1f       	adc	r23, r23
    43b2:	88 1f       	adc	r24, r24
    43b4:	99 1f       	adc	r25, r25
    43b6:	1a 94       	dec	r1
    43b8:	69 f7       	brne	.-38     	; 0x4394 <__udivmodsi4_loop>
    43ba:	60 95       	com	r22
    43bc:	70 95       	com	r23
    43be:	80 95       	com	r24
    43c0:	90 95       	com	r25
    43c2:	9b 01       	movw	r18, r22
    43c4:	ac 01       	movw	r20, r24
    43c6:	bd 01       	movw	r22, r26
    43c8:	cf 01       	movw	r24, r30
    43ca:	08 95       	ret

000043cc <__prologue_saves__>:
    43cc:	2f 92       	push	r2
    43ce:	3f 92       	push	r3
    43d0:	4f 92       	push	r4
    43d2:	5f 92       	push	r5
    43d4:	6f 92       	push	r6
    43d6:	7f 92       	push	r7
    43d8:	8f 92       	push	r8
    43da:	9f 92       	push	r9
    43dc:	af 92       	push	r10
    43de:	bf 92       	push	r11
    43e0:	cf 92       	push	r12
    43e2:	df 92       	push	r13
    43e4:	ef 92       	push	r14
    43e6:	ff 92       	push	r15
    43e8:	0f 93       	push	r16
    43ea:	1f 93       	push	r17
    43ec:	cf 93       	push	r28
    43ee:	df 93       	push	r29
    43f0:	cd b7       	in	r28, 0x3d	; 61
    43f2:	de b7       	in	r29, 0x3e	; 62
    43f4:	ca 1b       	sub	r28, r26
    43f6:	db 0b       	sbc	r29, r27
    43f8:	0f b6       	in	r0, 0x3f	; 63
    43fa:	f8 94       	cli
    43fc:	de bf       	out	0x3e, r29	; 62
    43fe:	0f be       	out	0x3f, r0	; 63
    4400:	cd bf       	out	0x3d, r28	; 61
    4402:	09 94       	ijmp

00004404 <__epilogue_restores__>:
    4404:	2a 88       	ldd	r2, Y+18	; 0x12
    4406:	39 88       	ldd	r3, Y+17	; 0x11
    4408:	48 88       	ldd	r4, Y+16	; 0x10
    440a:	5f 84       	ldd	r5, Y+15	; 0x0f
    440c:	6e 84       	ldd	r6, Y+14	; 0x0e
    440e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4410:	8c 84       	ldd	r8, Y+12	; 0x0c
    4412:	9b 84       	ldd	r9, Y+11	; 0x0b
    4414:	aa 84       	ldd	r10, Y+10	; 0x0a
    4416:	b9 84       	ldd	r11, Y+9	; 0x09
    4418:	c8 84       	ldd	r12, Y+8	; 0x08
    441a:	df 80       	ldd	r13, Y+7	; 0x07
    441c:	ee 80       	ldd	r14, Y+6	; 0x06
    441e:	fd 80       	ldd	r15, Y+5	; 0x05
    4420:	0c 81       	ldd	r16, Y+4	; 0x04
    4422:	1b 81       	ldd	r17, Y+3	; 0x03
    4424:	aa 81       	ldd	r26, Y+2	; 0x02
    4426:	b9 81       	ldd	r27, Y+1	; 0x01
    4428:	ce 0f       	add	r28, r30
    442a:	d1 1d       	adc	r29, r1
    442c:	0f b6       	in	r0, 0x3f	; 63
    442e:	f8 94       	cli
    4430:	de bf       	out	0x3e, r29	; 62
    4432:	0f be       	out	0x3f, r0	; 63
    4434:	cd bf       	out	0x3d, r28	; 61
    4436:	ed 01       	movw	r28, r26
    4438:	08 95       	ret

0000443a <__udivmodhi4>:
    443a:	aa 1b       	sub	r26, r26
    443c:	bb 1b       	sub	r27, r27
    443e:	51 e1       	ldi	r21, 0x11	; 17
    4440:	07 c0       	rjmp	.+14     	; 0x4450 <__udivmodhi4_ep>

00004442 <__udivmodhi4_loop>:
    4442:	aa 1f       	adc	r26, r26
    4444:	bb 1f       	adc	r27, r27
    4446:	a6 17       	cp	r26, r22
    4448:	b7 07       	cpc	r27, r23
    444a:	10 f0       	brcs	.+4      	; 0x4450 <__udivmodhi4_ep>
    444c:	a6 1b       	sub	r26, r22
    444e:	b7 0b       	sbc	r27, r23

00004450 <__udivmodhi4_ep>:
    4450:	88 1f       	adc	r24, r24
    4452:	99 1f       	adc	r25, r25
    4454:	5a 95       	dec	r21
    4456:	a9 f7       	brne	.-22     	; 0x4442 <__udivmodhi4_loop>
    4458:	80 95       	com	r24
    445a:	90 95       	com	r25
    445c:	bc 01       	movw	r22, r24
    445e:	cd 01       	movw	r24, r26
    4460:	08 95       	ret

00004462 <malloc>:
    4462:	cf 93       	push	r28
    4464:	df 93       	push	r29
    4466:	bc 01       	movw	r22, r24
    4468:	82 30       	cpi	r24, 0x02	; 2
    446a:	91 05       	cpc	r25, r1
    446c:	10 f4       	brcc	.+4      	; 0x4472 <malloc+0x10>
    446e:	62 e0       	ldi	r22, 0x02	; 2
    4470:	70 e0       	ldi	r23, 0x00	; 0
    4472:	a0 91 f1 08 	lds	r26, 0x08F1
    4476:	b0 91 f2 08 	lds	r27, 0x08F2
    447a:	ed 01       	movw	r28, r26
    447c:	e0 e0       	ldi	r30, 0x00	; 0
    447e:	f0 e0       	ldi	r31, 0x00	; 0
    4480:	40 e0       	ldi	r20, 0x00	; 0
    4482:	50 e0       	ldi	r21, 0x00	; 0
    4484:	21 c0       	rjmp	.+66     	; 0x44c8 <malloc+0x66>
    4486:	88 81       	ld	r24, Y
    4488:	99 81       	ldd	r25, Y+1	; 0x01
    448a:	86 17       	cp	r24, r22
    448c:	97 07       	cpc	r25, r23
    448e:	69 f4       	brne	.+26     	; 0x44aa <malloc+0x48>
    4490:	8a 81       	ldd	r24, Y+2	; 0x02
    4492:	9b 81       	ldd	r25, Y+3	; 0x03
    4494:	30 97       	sbiw	r30, 0x00	; 0
    4496:	19 f0       	breq	.+6      	; 0x449e <malloc+0x3c>
    4498:	93 83       	std	Z+3, r25	; 0x03
    449a:	82 83       	std	Z+2, r24	; 0x02
    449c:	04 c0       	rjmp	.+8      	; 0x44a6 <malloc+0x44>
    449e:	90 93 f2 08 	sts	0x08F2, r25
    44a2:	80 93 f1 08 	sts	0x08F1, r24
    44a6:	fe 01       	movw	r30, r28
    44a8:	34 c0       	rjmp	.+104    	; 0x4512 <malloc+0xb0>
    44aa:	68 17       	cp	r22, r24
    44ac:	79 07       	cpc	r23, r25
    44ae:	38 f4       	brcc	.+14     	; 0x44be <malloc+0x5c>
    44b0:	41 15       	cp	r20, r1
    44b2:	51 05       	cpc	r21, r1
    44b4:	19 f0       	breq	.+6      	; 0x44bc <malloc+0x5a>
    44b6:	84 17       	cp	r24, r20
    44b8:	95 07       	cpc	r25, r21
    44ba:	08 f4       	brcc	.+2      	; 0x44be <malloc+0x5c>
    44bc:	ac 01       	movw	r20, r24
    44be:	fe 01       	movw	r30, r28
    44c0:	8a 81       	ldd	r24, Y+2	; 0x02
    44c2:	9b 81       	ldd	r25, Y+3	; 0x03
    44c4:	9c 01       	movw	r18, r24
    44c6:	e9 01       	movw	r28, r18
    44c8:	20 97       	sbiw	r28, 0x00	; 0
    44ca:	e9 f6       	brne	.-70     	; 0x4486 <malloc+0x24>
    44cc:	41 15       	cp	r20, r1
    44ce:	51 05       	cpc	r21, r1
    44d0:	a9 f1       	breq	.+106    	; 0x453c <malloc+0xda>
    44d2:	ca 01       	movw	r24, r20
    44d4:	86 1b       	sub	r24, r22
    44d6:	97 0b       	sbc	r25, r23
    44d8:	04 97       	sbiw	r24, 0x04	; 4
    44da:	08 f4       	brcc	.+2      	; 0x44de <malloc+0x7c>
    44dc:	ba 01       	movw	r22, r20
    44de:	e0 e0       	ldi	r30, 0x00	; 0
    44e0:	f0 e0       	ldi	r31, 0x00	; 0
    44e2:	2a c0       	rjmp	.+84     	; 0x4538 <malloc+0xd6>
    44e4:	8d 91       	ld	r24, X+
    44e6:	9c 91       	ld	r25, X
    44e8:	11 97       	sbiw	r26, 0x01	; 1
    44ea:	84 17       	cp	r24, r20
    44ec:	95 07       	cpc	r25, r21
    44ee:	f9 f4       	brne	.+62     	; 0x452e <malloc+0xcc>
    44f0:	64 17       	cp	r22, r20
    44f2:	75 07       	cpc	r23, r21
    44f4:	81 f4       	brne	.+32     	; 0x4516 <malloc+0xb4>
    44f6:	12 96       	adiw	r26, 0x02	; 2
    44f8:	8d 91       	ld	r24, X+
    44fa:	9c 91       	ld	r25, X
    44fc:	13 97       	sbiw	r26, 0x03	; 3
    44fe:	30 97       	sbiw	r30, 0x00	; 0
    4500:	19 f0       	breq	.+6      	; 0x4508 <malloc+0xa6>
    4502:	93 83       	std	Z+3, r25	; 0x03
    4504:	82 83       	std	Z+2, r24	; 0x02
    4506:	04 c0       	rjmp	.+8      	; 0x4510 <malloc+0xae>
    4508:	90 93 f2 08 	sts	0x08F2, r25
    450c:	80 93 f1 08 	sts	0x08F1, r24
    4510:	fd 01       	movw	r30, r26
    4512:	32 96       	adiw	r30, 0x02	; 2
    4514:	4f c0       	rjmp	.+158    	; 0x45b4 <malloc+0x152>
    4516:	ca 01       	movw	r24, r20
    4518:	86 1b       	sub	r24, r22
    451a:	97 0b       	sbc	r25, r23
    451c:	fd 01       	movw	r30, r26
    451e:	e8 0f       	add	r30, r24
    4520:	f9 1f       	adc	r31, r25
    4522:	61 93       	st	Z+, r22
    4524:	71 93       	st	Z+, r23
    4526:	02 97       	sbiw	r24, 0x02	; 2
    4528:	8d 93       	st	X+, r24
    452a:	9c 93       	st	X, r25
    452c:	43 c0       	rjmp	.+134    	; 0x45b4 <malloc+0x152>
    452e:	fd 01       	movw	r30, r26
    4530:	82 81       	ldd	r24, Z+2	; 0x02
    4532:	93 81       	ldd	r25, Z+3	; 0x03
    4534:	9c 01       	movw	r18, r24
    4536:	d9 01       	movw	r26, r18
    4538:	10 97       	sbiw	r26, 0x00	; 0
    453a:	a1 f6       	brne	.-88     	; 0x44e4 <malloc+0x82>
    453c:	80 91 ef 08 	lds	r24, 0x08EF
    4540:	90 91 f0 08 	lds	r25, 0x08F0
    4544:	89 2b       	or	r24, r25
    4546:	41 f4       	brne	.+16     	; 0x4558 <malloc+0xf6>
    4548:	80 91 ab 08 	lds	r24, 0x08AB
    454c:	90 91 ac 08 	lds	r25, 0x08AC
    4550:	90 93 f0 08 	sts	0x08F0, r25
    4554:	80 93 ef 08 	sts	0x08EF, r24
    4558:	40 91 ad 08 	lds	r20, 0x08AD
    455c:	50 91 ae 08 	lds	r21, 0x08AE
    4560:	41 15       	cp	r20, r1
    4562:	51 05       	cpc	r21, r1
    4564:	41 f4       	brne	.+16     	; 0x4576 <malloc+0x114>
    4566:	4d b7       	in	r20, 0x3d	; 61
    4568:	5e b7       	in	r21, 0x3e	; 62
    456a:	80 91 a9 08 	lds	r24, 0x08A9
    456e:	90 91 aa 08 	lds	r25, 0x08AA
    4572:	48 1b       	sub	r20, r24
    4574:	59 0b       	sbc	r21, r25
    4576:	20 91 ef 08 	lds	r18, 0x08EF
    457a:	30 91 f0 08 	lds	r19, 0x08F0
    457e:	24 17       	cp	r18, r20
    4580:	35 07       	cpc	r19, r21
    4582:	b0 f4       	brcc	.+44     	; 0x45b0 <malloc+0x14e>
    4584:	ca 01       	movw	r24, r20
    4586:	82 1b       	sub	r24, r18
    4588:	93 0b       	sbc	r25, r19
    458a:	86 17       	cp	r24, r22
    458c:	97 07       	cpc	r25, r23
    458e:	80 f0       	brcs	.+32     	; 0x45b0 <malloc+0x14e>
    4590:	ab 01       	movw	r20, r22
    4592:	4e 5f       	subi	r20, 0xFE	; 254
    4594:	5f 4f       	sbci	r21, 0xFF	; 255
    4596:	84 17       	cp	r24, r20
    4598:	95 07       	cpc	r25, r21
    459a:	50 f0       	brcs	.+20     	; 0x45b0 <malloc+0x14e>
    459c:	42 0f       	add	r20, r18
    459e:	53 1f       	adc	r21, r19
    45a0:	50 93 f0 08 	sts	0x08F0, r21
    45a4:	40 93 ef 08 	sts	0x08EF, r20
    45a8:	f9 01       	movw	r30, r18
    45aa:	61 93       	st	Z+, r22
    45ac:	71 93       	st	Z+, r23
    45ae:	02 c0       	rjmp	.+4      	; 0x45b4 <malloc+0x152>
    45b0:	e0 e0       	ldi	r30, 0x00	; 0
    45b2:	f0 e0       	ldi	r31, 0x00	; 0
    45b4:	cf 01       	movw	r24, r30
    45b6:	df 91       	pop	r29
    45b8:	cf 91       	pop	r28
    45ba:	08 95       	ret

000045bc <free>:
    45bc:	cf 93       	push	r28
    45be:	df 93       	push	r29
    45c0:	00 97       	sbiw	r24, 0x00	; 0
    45c2:	09 f4       	brne	.+2      	; 0x45c6 <free+0xa>
    45c4:	50 c0       	rjmp	.+160    	; 0x4666 <free+0xaa>
    45c6:	ec 01       	movw	r28, r24
    45c8:	22 97       	sbiw	r28, 0x02	; 2
    45ca:	1b 82       	std	Y+3, r1	; 0x03
    45cc:	1a 82       	std	Y+2, r1	; 0x02
    45ce:	a0 91 f1 08 	lds	r26, 0x08F1
    45d2:	b0 91 f2 08 	lds	r27, 0x08F2
    45d6:	10 97       	sbiw	r26, 0x00	; 0
    45d8:	09 f1       	breq	.+66     	; 0x461c <free+0x60>
    45da:	40 e0       	ldi	r20, 0x00	; 0
    45dc:	50 e0       	ldi	r21, 0x00	; 0
    45de:	ac 17       	cp	r26, r28
    45e0:	bd 07       	cpc	r27, r29
    45e2:	08 f1       	brcs	.+66     	; 0x4626 <free+0x6a>
    45e4:	bb 83       	std	Y+3, r27	; 0x03
    45e6:	aa 83       	std	Y+2, r26	; 0x02
    45e8:	fe 01       	movw	r30, r28
    45ea:	21 91       	ld	r18, Z+
    45ec:	31 91       	ld	r19, Z+
    45ee:	e2 0f       	add	r30, r18
    45f0:	f3 1f       	adc	r31, r19
    45f2:	ae 17       	cp	r26, r30
    45f4:	bf 07       	cpc	r27, r31
    45f6:	79 f4       	brne	.+30     	; 0x4616 <free+0x5a>
    45f8:	8d 91       	ld	r24, X+
    45fa:	9c 91       	ld	r25, X
    45fc:	11 97       	sbiw	r26, 0x01	; 1
    45fe:	28 0f       	add	r18, r24
    4600:	39 1f       	adc	r19, r25
    4602:	2e 5f       	subi	r18, 0xFE	; 254
    4604:	3f 4f       	sbci	r19, 0xFF	; 255
    4606:	39 83       	std	Y+1, r19	; 0x01
    4608:	28 83       	st	Y, r18
    460a:	12 96       	adiw	r26, 0x02	; 2
    460c:	8d 91       	ld	r24, X+
    460e:	9c 91       	ld	r25, X
    4610:	13 97       	sbiw	r26, 0x03	; 3
    4612:	9b 83       	std	Y+3, r25	; 0x03
    4614:	8a 83       	std	Y+2, r24	; 0x02
    4616:	41 15       	cp	r20, r1
    4618:	51 05       	cpc	r21, r1
    461a:	71 f4       	brne	.+28     	; 0x4638 <free+0x7c>
    461c:	d0 93 f2 08 	sts	0x08F2, r29
    4620:	c0 93 f1 08 	sts	0x08F1, r28
    4624:	20 c0       	rjmp	.+64     	; 0x4666 <free+0xaa>
    4626:	12 96       	adiw	r26, 0x02	; 2
    4628:	8d 91       	ld	r24, X+
    462a:	9c 91       	ld	r25, X
    462c:	13 97       	sbiw	r26, 0x03	; 3
    462e:	ad 01       	movw	r20, r26
    4630:	00 97       	sbiw	r24, 0x00	; 0
    4632:	11 f0       	breq	.+4      	; 0x4638 <free+0x7c>
    4634:	dc 01       	movw	r26, r24
    4636:	d3 cf       	rjmp	.-90     	; 0x45de <free+0x22>
    4638:	fa 01       	movw	r30, r20
    463a:	d3 83       	std	Z+3, r29	; 0x03
    463c:	c2 83       	std	Z+2, r28	; 0x02
    463e:	21 91       	ld	r18, Z+
    4640:	31 91       	ld	r19, Z+
    4642:	e2 0f       	add	r30, r18
    4644:	f3 1f       	adc	r31, r19
    4646:	ce 17       	cp	r28, r30
    4648:	df 07       	cpc	r29, r31
    464a:	69 f4       	brne	.+26     	; 0x4666 <free+0xaa>
    464c:	88 81       	ld	r24, Y
    464e:	99 81       	ldd	r25, Y+1	; 0x01
    4650:	28 0f       	add	r18, r24
    4652:	39 1f       	adc	r19, r25
    4654:	2e 5f       	subi	r18, 0xFE	; 254
    4656:	3f 4f       	sbci	r19, 0xFF	; 255
    4658:	fa 01       	movw	r30, r20
    465a:	31 83       	std	Z+1, r19	; 0x01
    465c:	20 83       	st	Z, r18
    465e:	8a 81       	ldd	r24, Y+2	; 0x02
    4660:	9b 81       	ldd	r25, Y+3	; 0x03
    4662:	93 83       	std	Z+3, r25	; 0x03
    4664:	82 83       	std	Z+2, r24	; 0x02
    4666:	df 91       	pop	r29
    4668:	cf 91       	pop	r28
    466a:	08 95       	ret

0000466c <itoa>:
    466c:	fb 01       	movw	r30, r22
    466e:	9f 01       	movw	r18, r30
    4670:	e8 94       	clt
    4672:	42 30       	cpi	r20, 0x02	; 2
    4674:	c4 f0       	brlt	.+48     	; 0x46a6 <itoa+0x3a>
    4676:	45 32       	cpi	r20, 0x25	; 37
    4678:	b4 f4       	brge	.+44     	; 0x46a6 <itoa+0x3a>
    467a:	4a 30       	cpi	r20, 0x0A	; 10
    467c:	29 f4       	brne	.+10     	; 0x4688 <itoa+0x1c>
    467e:	97 fb       	bst	r25, 7
    4680:	1e f4       	brtc	.+6      	; 0x4688 <itoa+0x1c>
    4682:	90 95       	com	r25
    4684:	81 95       	neg	r24
    4686:	9f 4f       	sbci	r25, 0xFF	; 255
    4688:	64 2f       	mov	r22, r20
    468a:	77 27       	eor	r23, r23
    468c:	0e 94 1d 22 	call	0x443a	; 0x443a <__udivmodhi4>
    4690:	80 5d       	subi	r24, 0xD0	; 208
    4692:	8a 33       	cpi	r24, 0x3A	; 58
    4694:	0c f0       	brlt	.+2      	; 0x4698 <itoa+0x2c>
    4696:	89 5d       	subi	r24, 0xD9	; 217
    4698:	81 93       	st	Z+, r24
    469a:	cb 01       	movw	r24, r22
    469c:	00 97       	sbiw	r24, 0x00	; 0
    469e:	a1 f7       	brne	.-24     	; 0x4688 <itoa+0x1c>
    46a0:	16 f4       	brtc	.+4      	; 0x46a6 <itoa+0x3a>
    46a2:	5d e2       	ldi	r21, 0x2D	; 45
    46a4:	51 93       	st	Z+, r21
    46a6:	10 82       	st	Z, r1
    46a8:	c9 01       	movw	r24, r18
    46aa:	0c 94 c6 23 	jmp	0x478c	; 0x478c <strrev>

000046ae <fdevopen>:
    46ae:	0f 93       	push	r16
    46b0:	1f 93       	push	r17
    46b2:	cf 93       	push	r28
    46b4:	df 93       	push	r29
    46b6:	8c 01       	movw	r16, r24
    46b8:	eb 01       	movw	r28, r22
    46ba:	00 97       	sbiw	r24, 0x00	; 0
    46bc:	31 f4       	brne	.+12     	; 0x46ca <fdevopen+0x1c>
    46be:	61 15       	cp	r22, r1
    46c0:	71 05       	cpc	r23, r1
    46c2:	19 f4       	brne	.+6      	; 0x46ca <fdevopen+0x1c>
    46c4:	20 e0       	ldi	r18, 0x00	; 0
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	38 c0       	rjmp	.+112    	; 0x473a <fdevopen+0x8c>
    46ca:	81 e0       	ldi	r24, 0x01	; 1
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	6e e0       	ldi	r22, 0x0E	; 14
    46d0:	70 e0       	ldi	r23, 0x00	; 0
    46d2:	0e 94 a3 23 	call	0x4746	; 0x4746 <calloc>
    46d6:	fc 01       	movw	r30, r24
    46d8:	9c 01       	movw	r18, r24
    46da:	00 97       	sbiw	r24, 0x00	; 0
    46dc:	71 f1       	breq	.+92     	; 0x473a <fdevopen+0x8c>
    46de:	80 e8       	ldi	r24, 0x80	; 128
    46e0:	83 83       	std	Z+3, r24	; 0x03
    46e2:	20 97       	sbiw	r28, 0x00	; 0
    46e4:	71 f0       	breq	.+28     	; 0x4702 <fdevopen+0x54>
    46e6:	d3 87       	std	Z+11, r29	; 0x0b
    46e8:	c2 87       	std	Z+10, r28	; 0x0a
    46ea:	81 e8       	ldi	r24, 0x81	; 129
    46ec:	83 83       	std	Z+3, r24	; 0x03
    46ee:	80 91 f3 08 	lds	r24, 0x08F3
    46f2:	90 91 f4 08 	lds	r25, 0x08F4
    46f6:	89 2b       	or	r24, r25
    46f8:	21 f4       	brne	.+8      	; 0x4702 <fdevopen+0x54>
    46fa:	f0 93 f4 08 	sts	0x08F4, r31
    46fe:	e0 93 f3 08 	sts	0x08F3, r30
    4702:	01 15       	cp	r16, r1
    4704:	11 05       	cpc	r17, r1
    4706:	c9 f0       	breq	.+50     	; 0x473a <fdevopen+0x8c>
    4708:	11 87       	std	Z+9, r17	; 0x09
    470a:	00 87       	std	Z+8, r16	; 0x08
    470c:	83 81       	ldd	r24, Z+3	; 0x03
    470e:	82 60       	ori	r24, 0x02	; 2
    4710:	83 83       	std	Z+3, r24	; 0x03
    4712:	80 91 f5 08 	lds	r24, 0x08F5
    4716:	90 91 f6 08 	lds	r25, 0x08F6
    471a:	89 2b       	or	r24, r25
    471c:	71 f4       	brne	.+28     	; 0x473a <fdevopen+0x8c>
    471e:	f0 93 f6 08 	sts	0x08F6, r31
    4722:	e0 93 f5 08 	sts	0x08F5, r30
    4726:	80 91 f7 08 	lds	r24, 0x08F7
    472a:	90 91 f8 08 	lds	r25, 0x08F8
    472e:	89 2b       	or	r24, r25
    4730:	21 f4       	brne	.+8      	; 0x473a <fdevopen+0x8c>
    4732:	f0 93 f8 08 	sts	0x08F8, r31
    4736:	e0 93 f7 08 	sts	0x08F7, r30
    473a:	c9 01       	movw	r24, r18
    473c:	df 91       	pop	r29
    473e:	cf 91       	pop	r28
    4740:	1f 91       	pop	r17
    4742:	0f 91       	pop	r16
    4744:	08 95       	ret

00004746 <calloc>:
    4746:	0f 93       	push	r16
    4748:	1f 93       	push	r17
    474a:	cf 93       	push	r28
    474c:	df 93       	push	r29
    474e:	68 9f       	mul	r22, r24
    4750:	80 01       	movw	r16, r0
    4752:	69 9f       	mul	r22, r25
    4754:	10 0d       	add	r17, r0
    4756:	78 9f       	mul	r23, r24
    4758:	10 0d       	add	r17, r0
    475a:	11 24       	eor	r1, r1
    475c:	c8 01       	movw	r24, r16
    475e:	0e 94 31 22 	call	0x4462	; 0x4462 <malloc>
    4762:	ec 01       	movw	r28, r24
    4764:	00 97       	sbiw	r24, 0x00	; 0
    4766:	29 f0       	breq	.+10     	; 0x4772 <calloc+0x2c>
    4768:	60 e0       	ldi	r22, 0x00	; 0
    476a:	70 e0       	ldi	r23, 0x00	; 0
    476c:	a8 01       	movw	r20, r16
    476e:	0e 94 bf 23 	call	0x477e	; 0x477e <memset>
    4772:	ce 01       	movw	r24, r28
    4774:	df 91       	pop	r29
    4776:	cf 91       	pop	r28
    4778:	1f 91       	pop	r17
    477a:	0f 91       	pop	r16
    477c:	08 95       	ret

0000477e <memset>:
    477e:	dc 01       	movw	r26, r24
    4780:	01 c0       	rjmp	.+2      	; 0x4784 <memset+0x6>
    4782:	6d 93       	st	X+, r22
    4784:	41 50       	subi	r20, 0x01	; 1
    4786:	50 40       	sbci	r21, 0x00	; 0
    4788:	e0 f7       	brcc	.-8      	; 0x4782 <memset+0x4>
    478a:	08 95       	ret

0000478c <strrev>:
    478c:	dc 01       	movw	r26, r24
    478e:	fc 01       	movw	r30, r24
    4790:	67 2f       	mov	r22, r23
    4792:	71 91       	ld	r23, Z+
    4794:	77 23       	and	r23, r23
    4796:	e1 f7       	brne	.-8      	; 0x4790 <strrev+0x4>
    4798:	32 97       	sbiw	r30, 0x02	; 2
    479a:	04 c0       	rjmp	.+8      	; 0x47a4 <strrev+0x18>
    479c:	7c 91       	ld	r23, X
    479e:	6d 93       	st	X+, r22
    47a0:	70 83       	st	Z, r23
    47a2:	62 91       	ld	r22, -Z
    47a4:	ae 17       	cp	r26, r30
    47a6:	bf 07       	cpc	r27, r31
    47a8:	c8 f3       	brcs	.-14     	; 0x479c <strrev+0x10>
    47aa:	08 95       	ret

000047ac <_exit>:
    47ac:	f8 94       	cli

000047ae <__stop_program>:
    47ae:	ff cf       	rjmp	.-2      	; 0x47ae <__stop_program>
