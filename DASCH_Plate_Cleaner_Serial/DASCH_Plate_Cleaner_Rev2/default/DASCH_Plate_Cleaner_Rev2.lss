
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000324  00800100  00004450  000044e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004450  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800424  00800424  00004808  2**0
                  ALLOC
  3 .stab         00005274  00000000  00000000  00004808  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000544b  00000000  00000000  00009a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000eec7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003ab  00000000  00000000  0000ef07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001277  00000000  00000000  0000f2b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000030a  00000000  00000000  00010529  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ab2  00000000  00000000  00010833  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000122e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000aff  00000000  00000000  00012468  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001170  00000000  00000000  00012f67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__vector_11>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      50:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <__vector_20>
      54:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <__vector_21>
      58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      70:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__vector_28>
      74:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__vector_29>
      78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      8c:	02 0b       	sbc	r16, r18
      8e:	1b 0b       	sbc	r17, r27
      90:	36 0b       	sbc	r19, r22
      92:	53 0b       	sbc	r21, r19
      94:	72 0b       	sbc	r23, r18
      96:	8e 0b       	sbc	r24, r30
      98:	ac 0b       	sbc	r26, r28
      9a:	cd 0b       	sbc	r28, r29
      9c:	ef 0b       	sbc	r30, r31
      9e:	f9 0b       	sbc	r31, r25
      a0:	fd 0b       	sbc	r31, r29
      a2:	09 0c       	add	r0, r9
      a4:	0d 0c       	add	r0, r13
      a6:	17 0c       	add	r1, r7
      a8:	1b 0c       	add	r1, r11
      aa:	26 0c       	add	r2, r6
      ac:	2a 0c       	add	r2, r10
      ae:	35 0c       	add	r3, r5
      b0:	39 0c       	add	r3, r9
      b2:	44 0c       	add	r4, r4
      b4:	48 0c       	add	r4, r8
      b6:	53 0c       	add	r5, r3
      b8:	57 0c       	add	r5, r7
      ba:	66 0c       	add	r6, r6
      bc:	6c 0c       	add	r6, r12
      be:	7b 0c       	add	r7, r11
      c0:	7f 0c       	add	r7, r15
      c2:	8a 0c       	add	r8, r10
      c4:	8e 0c       	add	r8, r14
      c6:	99 0c       	add	r9, r9
      c8:	9d 0c       	add	r9, r13
      ca:	a9 0c       	add	r10, r9
      cc:	af 0c       	add	r10, r15
      ce:	bf 0c       	add	r11, r15
      d0:	c9 0c       	add	r12, r9
      d2:	df 0c       	add	r13, r15
      d4:	e9 0c       	add	r14, r9
      d6:	ff 0c       	add	r15, r15
      d8:	09 0d       	add	r16, r9
      da:	1f 0d       	add	r17, r15
      dc:	29 0d       	add	r18, r9
      de:	3f 0d       	add	r19, r15
      e0:	49 0d       	add	r20, r9
      e2:	56 0d       	add	r21, r6

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d0 e4       	ldi	r29, 0x40	; 64
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	14 e0       	ldi	r17, 0x04	; 4
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b1 e0       	ldi	r27, 0x01	; 1
      f6:	e0 e5       	ldi	r30, 0x50	; 80
      f8:	f4 e4       	ldi	r31, 0x44	; 68
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a4 32       	cpi	r26, 0x24	; 36
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	14 e0       	ldi	r17, 0x04	; 4
     10c:	a4 e2       	ldi	r26, 0x24	; 36
     10e:	b4 e0       	ldi	r27, 0x04	; 4
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	ac 36       	cpi	r26, 0x6C	; 108
     116:	b1 07       	cpc	r27, r17
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 90 07 	call	0xf20	; 0xf20 <main>
     11e:	0c 94 26 22 	jmp	0x444c	; 0x444c <_exit>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     126:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     12a:	8c e0       	ldi	r24, 0x0C	; 12
     12c:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
     130:	08 95       	ret

00000132 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
     132:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     134:	84 ea       	ldi	r24, 0xA4	; 164
     136:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     13a:	80 91 bc 00 	lds	r24, 0x00BC
     13e:	87 ff       	sbrs	r24, 7
     140:	fc cf       	rjmp	.-8      	; 0x13a <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     142:	80 91 b9 00 	lds	r24, 0x00B9
     146:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     148:	88 30       	cpi	r24, 0x08	; 8
     14a:	21 f0       	breq	.+8      	; 0x154 <i2c_start+0x22>
     14c:	80 31       	cpi	r24, 0x10	; 16
     14e:	11 f0       	breq	.+4      	; 0x154 <i2c_start+0x22>
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	08 95       	ret

	// send device address
	TWDR = address;
     154:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     158:	84 e8       	ldi	r24, 0x84	; 132
     15a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     15e:	80 91 bc 00 	lds	r24, 0x00BC
     162:	87 ff       	sbrs	r24, 7
     164:	fc cf       	rjmp	.-8      	; 0x15e <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     166:	90 91 b9 00 	lds	r25, 0x00B9
     16a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     16c:	98 31       	cpi	r25, 0x18	; 24
     16e:	11 f4       	brne	.+4      	; 0x174 <i2c_start+0x42>
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	08 95       	ret
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 34       	cpi	r25, 0x40	; 64
     178:	09 f0       	breq	.+2      	; 0x17c <i2c_start+0x4a>
     17a:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
     17c:	08 95       	ret

0000017e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     17e:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     180:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     182:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     184:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     186:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     18a:	80 91 bc 00 	lds	r24, 0x00BC
     18e:	87 ff       	sbrs	r24, 7
     190:	fc cf       	rjmp	.-8      	; 0x18a <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     192:	80 91 b9 00 	lds	r24, 0x00B9
     196:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     198:	88 30       	cpi	r24, 0x08	; 8
     19a:	11 f0       	breq	.+4      	; 0x1a0 <i2c_start_wait+0x22>
     19c:	80 31       	cpi	r24, 0x10	; 16
     19e:	99 f7       	brne	.-26     	; 0x186 <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
     1a0:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
     1a4:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     1a8:	80 91 bc 00 	lds	r24, 0x00BC
     1ac:	87 ff       	sbrs	r24, 7
     1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     1b0:	80 91 b9 00 	lds	r24, 0x00B9
     1b4:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     1b6:	80 32       	cpi	r24, 0x20	; 32
     1b8:	11 f0       	breq	.+4      	; 0x1be <i2c_start_wait+0x40>
     1ba:	88 35       	cpi	r24, 0x58	; 88
     1bc:	39 f4       	brne	.+14     	; 0x1cc <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1be:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     1c2:	80 91 bc 00 	lds	r24, 0x00BC
     1c6:	84 fd       	sbrc	r24, 4
     1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <i2c_start_wait+0x44>
     1ca:	dd cf       	rjmp	.-70     	; 0x186 <i2c_start_wait+0x8>
     1cc:	08 95       	ret

000001ce <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     1ce:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>

}/* i2c_rep_start */
     1d2:	08 95       	ret

000001d4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1d4:	84 e9       	ldi	r24, 0x94	; 148
     1d6:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     1da:	80 91 bc 00 	lds	r24, 0x00BC
     1de:	84 fd       	sbrc	r24, 4
     1e0:	fc cf       	rjmp	.-8      	; 0x1da <i2c_stop+0x6>

}/* i2c_stop */
     1e2:	08 95       	ret

000001e4 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     1e4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     1e8:	84 e8       	ldi	r24, 0x84	; 132
     1ea:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     1ee:	80 91 bc 00 	lds	r24, 0x00BC
     1f2:	87 ff       	sbrs	r24, 7
     1f4:	fc cf       	rjmp	.-8      	; 0x1ee <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     1f6:	80 91 b9 00 	lds	r24, 0x00B9
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	88 7f       	andi	r24, 0xF8	; 248
     1fe:	88 32       	cpi	r24, 0x28	; 40
     200:	09 f0       	breq	.+2      	; 0x204 <i2c_write+0x20>
     202:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     204:	89 2f       	mov	r24, r25
     206:	08 95       	ret

00000208 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     208:	84 ec       	ldi	r24, 0xC4	; 196
     20a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     20e:	80 91 bc 00 	lds	r24, 0x00BC
     212:	87 ff       	sbrs	r24, 7
     214:	fc cf       	rjmp	.-8      	; 0x20e <i2c_readAck+0x6>

    return TWDR;
     216:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
     21a:	08 95       	ret

0000021c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     21c:	84 e8       	ldi	r24, 0x84	; 132
     21e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     222:	80 91 bc 00 	lds	r24, 0x00BC
     226:	87 ff       	sbrs	r24, 7
     228:	fc cf       	rjmp	.-8      	; 0x222 <i2c_readNak+0x6>
	
    return TWDR;
     22a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     22e:	08 95       	ret

00000230 <is_digital_input_high>:

// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
// the pin.
static inline unsigned char is_digital_input_high(unsigned char pin)
{
     230:	48 2f       	mov	r20, r24
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     232:	88 30       	cpi	r24, 0x08	; 8
     234:	58 f4       	brcc	.+22     	; 0x24c <is_digital_input_high+0x1c>
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	02 c0       	rjmp	.+4      	; 0x240 <is_digital_input_high+0x10>
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	4a 95       	dec	r20
     242:	e2 f7       	brpl	.-8      	; 0x23c <is_digital_input_high+0xc>
     244:	98 2f       	mov	r25, r24
     246:	e9 e2       	ldi	r30, 0x29	; 41
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	36 c0       	rjmp	.+108    	; 0x2b8 <is_digital_input_high+0x88>
	}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     24c:	80 31       	cpi	r24, 0x10	; 16
     24e:	78 f4       	brcc	.+30     	; 0x26e <is_digital_input_high+0x3e>
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	28 50       	subi	r18, 0x08	; 8
     256:	30 40       	sbci	r19, 0x00	; 0
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	02 c0       	rjmp	.+4      	; 0x262 <is_digital_input_high+0x32>
     25e:	88 0f       	add	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	2a 95       	dec	r18
     264:	e2 f7       	brpl	.-8      	; 0x25e <is_digital_input_high+0x2e>
     266:	98 2f       	mov	r25, r24
     268:	e3 e2       	ldi	r30, 0x23	; 35
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	25 c0       	rjmp	.+74     	; 0x2b8 <is_digital_input_high+0x88>
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     26e:	88 31       	cpi	r24, 0x18	; 24
     270:	78 f4       	brcc	.+30     	; 0x290 <is_digital_input_high+0x60>
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
     272:	28 2f       	mov	r18, r24
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	20 51       	subi	r18, 0x10	; 16
     278:	30 40       	sbci	r19, 0x00	; 0
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	02 c0       	rjmp	.+4      	; 0x284 <is_digital_input_high+0x54>
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	2a 95       	dec	r18
     286:	e2 f7       	brpl	.-8      	; 0x280 <is_digital_input_high+0x50>
     288:	98 2f       	mov	r25, r24
     28a:	e6 e2       	ldi	r30, 0x26	; 38
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	14 c0       	rjmp	.+40     	; 0x2b8 <is_digital_input_high+0x88>
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     290:	80 32       	cpi	r24, 0x20	; 32
     292:	20 f0       	brcs	.+8      	; 0x29c <is_digital_input_high+0x6c>
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	e0 e0       	ldi	r30, 0x00	; 0
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	0e c0       	rjmp	.+28     	; 0x2b8 <is_digital_input_high+0x88>
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
		io->bitmask = 1 << (31 - pin);
     29c:	2f e1       	ldi	r18, 0x1F	; 31
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	28 1b       	sub	r18, r24
     2a2:	31 09       	sbc	r19, r1
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <is_digital_input_high+0x7e>
     2aa:	88 0f       	add	r24, r24
     2ac:	99 1f       	adc	r25, r25
     2ae:	2a 95       	dec	r18
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <is_digital_input_high+0x7a>
     2b2:	98 2f       	mov	r25, r24
     2b4:	e0 e2       	ldi	r30, 0x20	; 32
     2b6:	f0 e0       	ldi	r31, 0x00	; 0

// low-level method for reading the value of the PIN register for an pin or set of pins
// described by an IOStruct pointer.
static inline unsigned char get_digital_input_value(struct IOStruct* ioPin)
{
	return *(ioPin->pinRegister) & ioPin->bitmask;
     2b8:	80 81       	ld	r24, Z
static inline unsigned char is_digital_input_high(unsigned char pin)
{
	struct IOStruct registers;
	get_io_registers(&registers, pin);
	return get_digital_input_value(&registers);
}
     2ba:	89 23       	and	r24, r25
     2bc:	08 95       	ret

000002be <brush1_action>:
			break;
		//*********************************************
	}
}

void brush1_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	f9 01       	movw	r30, r18
     2c4:	d8 01       	movw	r26, r16
	switch(state){
     2c6:	8c 30       	cpi	r24, 0x0C	; 12
     2c8:	91 05       	cpc	r25, r1
     2ca:	09 f4       	brne	.+2      	; 0x2ce <brush1_action+0x10>
     2cc:	3c c0       	rjmp	.+120    	; 0x346 <brush1_action+0x88>
     2ce:	8d 30       	cpi	r24, 0x0D	; 13
     2d0:	91 05       	cpc	r25, r1
     2d2:	94 f4       	brge	.+36     	; 0x2f8 <brush1_action+0x3a>
     2d4:	89 30       	cpi	r24, 0x09	; 9
     2d6:	91 05       	cpc	r25, r1
     2d8:	e1 f0       	breq	.+56     	; 0x312 <brush1_action+0x54>
     2da:	8a 30       	cpi	r24, 0x0A	; 10
     2dc:	91 05       	cpc	r25, r1
     2de:	24 f4       	brge	.+8      	; 0x2e8 <brush1_action+0x2a>
     2e0:	08 97       	sbiw	r24, 0x08	; 8
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <brush1_action+0x28>
     2e4:	68 c0       	rjmp	.+208    	; 0x3b6 <brush1_action+0xf8>
     2e6:	38 c0       	rjmp	.+112    	; 0x358 <brush1_action+0x9a>
     2e8:	8a 30       	cpi	r24, 0x0A	; 10
     2ea:	91 05       	cpc	r25, r1
     2ec:	09 f4       	brne	.+2      	; 0x2f0 <brush1_action+0x32>
     2ee:	4d c0       	rjmp	.+154    	; 0x38a <brush1_action+0xcc>
     2f0:	0b 97       	sbiw	r24, 0x0b	; 11
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <brush1_action+0x38>
     2f4:	60 c0       	rjmp	.+192    	; 0x3b6 <brush1_action+0xf8>
     2f6:	1c c0       	rjmp	.+56     	; 0x330 <brush1_action+0x72>
     2f8:	8e 30       	cpi	r24, 0x0E	; 14
     2fa:	91 05       	cpc	r25, r1
     2fc:	a9 f1       	breq	.+106    	; 0x368 <brush1_action+0xaa>
     2fe:	8e 30       	cpi	r24, 0x0E	; 14
     300:	91 05       	cpc	r25, r1
     302:	54 f1       	brlt	.+84     	; 0x358 <brush1_action+0x9a>
     304:	8f 30       	cpi	r24, 0x0F	; 15
     306:	91 05       	cpc	r25, r1
     308:	c9 f1       	breq	.+114    	; 0x37c <brush1_action+0xbe>
     30a:	40 97       	sbiw	r24, 0x10	; 16
     30c:	09 f0       	breq	.+2      	; 0x310 <brush1_action+0x52>
     30e:	53 c0       	rjmp	.+166    	; 0x3b6 <brush1_action+0xf8>
     310:	47 c0       	rjmp	.+142    	; 0x3a0 <brush1_action+0xe2>
		case MOVEC1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******   
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B1SET1:
			*pfixtureMotor = 0;
     312:	11 82       	std	Z+1, r1	; 0x01
     314:	10 82       	st	Z, r1
			*pbrush1Motor = 1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	8d 93       	st	X+, r24
     31c:	9c 93       	st	X, r25
			//u_outputByte1.bits_in_outputByte1.brush1Pump = 0;	//Pump control
			u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     31e:	80 91 5d 04 	lds	r24, 0x045D
     322:	81 60       	ori	r24, 0x01	; 1
     324:	80 93 5d 04 	sts	0x045D, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;  // ******* dir3 *******
     328:	80 91 61 04 	lds	r24, 0x0461
     32c:	80 68       	ori	r24, 0x80	; 128
     32e:	41 c0       	rjmp	.+130    	; 0x3b2 <brush1_action+0xf4>
			//u_outputByte1.bits_in_outputByte1.brush1Pump = 1;	//Pump control
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
			break;
		case CLEAN1_1:
			*pbrush1Motor = 1;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	8d 93       	st	X+, r24
     336:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     338:	91 83       	std	Z+1, r25	; 0x01
     33a:	80 83       	st	Z, r24
     33c:	80 91 61 04 	lds	r24, 0x0461
     340:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     342:	8f 7e       	andi	r24, 0xEF	; 239
     344:	36 c0       	rjmp	.+108    	; 0x3b2 <brush1_action+0xf4>
			break;
		case B1STOP1:
			*pfixtureMotor = 0;
     346:	11 82       	std	Z+1, r1	; 0x01
     348:	10 82       	st	Z, r1
			*pbrush1Motor = 0;
     34a:	1d 92       	st	X+, r1
     34c:	1c 92       	st	X, r1
			u_outputByte0.bits_in_outputByte0.brush1Lower = 0;   //add brush1 wet here?
     34e:	80 91 60 04 	lds	r24, 0x0460
     352:	8f 7b       	andi	r24, 0xBF	; 191
			u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     354:	80 62       	ori	r24, 0x20	; 32
     356:	21 c0       	rjmp	.+66     	; 0x39a <brush1_action+0xdc>
			break;
		case CLEAN1_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     358:	80 91 61 04 	lds	r24, 0x0461
     35c:	80 61       	ori	r24, 0x10	; 16
     35e:	80 93 61 04 	sts	0x0461, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	20 c0       	rjmp	.+64     	; 0x3a8 <brush1_action+0xea>
			break;
		case B1SET2:
			*pfixtureMotor = 0;
     368:	11 82       	std	Z+1, r1	; 0x01
     36a:	10 82       	st	Z, r1
			*pbrush1Motor = 1;
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	8d 93       	st	X+, r24
     372:	9c 93       	st	X, r25
			//u_outputByte1.bits_in_outputByte1.brush1Pump = 0;	//Pump control
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
     374:	80 91 61 04 	lds	r24, 0x0461
     378:	8f 77       	andi	r24, 0x7F	; 127
     37a:	1b c0       	rjmp	.+54     	; 0x3b2 <brush1_action+0xf4>
			break;
		case B1START2:
			*pfixtureMotor = 0;
     37c:	11 82       	std	Z+1, r1	; 0x01
     37e:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
     380:	80 91 61 04 	lds	r24, 0x0461
     384:	8f 77       	andi	r24, 0x7F	; 127
     386:	80 93 61 04 	sts	0x0461, r24
			//u_outputByte1.bits_in_outputByte1.brush1Pump = 1;	//Pump control
			*pbrush1Motor = 1;
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	8d 93       	st	X+, r24
     390:	9c 93       	st	X, r25
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;  //add brush1 wet here?
     392:	80 91 60 04 	lds	r24, 0x0460
     396:	80 64       	ori	r24, 0x40	; 64
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     398:	8f 7d       	andi	r24, 0xDF	; 223
     39a:	80 93 60 04 	sts	0x0460, r24
     39e:	0b c0       	rjmp	.+22     	; 0x3b6 <brush1_action+0xf8>
			break;
		case CLEAN1_3:
			*pbrush1Motor = 1;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	8d 93       	st	X+, r24
     3a6:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     3a8:	91 83       	std	Z+1, r25	; 0x01
     3aa:	80 83       	st	Z, r24
     3ac:	80 91 61 04 	lds	r24, 0x0461
     3b0:	80 62       	ori	r24, 0x20	; 32
     3b2:	80 93 61 04 	sts	0x0461, r24
			break;
	}
}
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	08 95       	ret

000003bc <brush2_action>:

void brush2_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     3bc:	ef 92       	push	r14
     3be:	ff 92       	push	r15
     3c0:	f9 01       	movw	r30, r18
     3c2:	d7 01       	movw	r26, r14
	switch(state){
     3c4:	87 31       	cpi	r24, 0x17	; 23
     3c6:	91 05       	cpc	r25, r1
     3c8:	09 f4       	brne	.+2      	; 0x3cc <brush2_action+0x10>
     3ca:	89 c0       	rjmp	.+274    	; 0x4de <brush2_action+0x122>
     3cc:	88 31       	cpi	r24, 0x18	; 24
     3ce:	91 05       	cpc	r25, r1
     3d0:	b4 f4       	brge	.+44     	; 0x3fe <brush2_action+0x42>
     3d2:	84 31       	cpi	r24, 0x14	; 20
     3d4:	91 05       	cpc	r25, r1
     3d6:	09 f4       	brne	.+2      	; 0x3da <brush2_action+0x1e>
     3d8:	5a c0       	rjmp	.+180    	; 0x48e <brush2_action+0xd2>
     3da:	85 31       	cpi	r24, 0x15	; 21
     3dc:	91 05       	cpc	r25, r1
     3de:	3c f4       	brge	.+14     	; 0x3ee <brush2_action+0x32>
     3e0:	82 31       	cpi	r24, 0x12	; 18
     3e2:	91 05       	cpc	r25, r1
     3e4:	11 f1       	breq	.+68     	; 0x42a <brush2_action+0x6e>
     3e6:	43 97       	sbiw	r24, 0x13	; 19
     3e8:	09 f0       	breq	.+2      	; 0x3ec <brush2_action+0x30>
     3ea:	87 c0       	rjmp	.+270    	; 0x4fa <brush2_action+0x13e>
     3ec:	22 c0       	rjmp	.+68     	; 0x432 <brush2_action+0x76>
     3ee:	85 31       	cpi	r24, 0x15	; 21
     3f0:	91 05       	cpc	r25, r1
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <brush2_action+0x3a>
     3f4:	5b c0       	rjmp	.+182    	; 0x4ac <brush2_action+0xf0>
     3f6:	46 97       	sbiw	r24, 0x16	; 22
     3f8:	09 f0       	breq	.+2      	; 0x3fc <brush2_action+0x40>
     3fa:	7f c0       	rjmp	.+254    	; 0x4fa <brush2_action+0x13e>
     3fc:	29 c0       	rjmp	.+82     	; 0x450 <brush2_action+0x94>
     3fe:	8a 31       	cpi	r24, 0x1A	; 26
     400:	91 05       	cpc	r25, r1
     402:	09 f4       	brne	.+2      	; 0x406 <brush2_action+0x4a>
     404:	53 c0       	rjmp	.+166    	; 0x4ac <brush2_action+0xf0>
     406:	8b 31       	cpi	r24, 0x1B	; 27
     408:	91 05       	cpc	r25, r1
     40a:	3c f4       	brge	.+14     	; 0x41a <brush2_action+0x5e>
     40c:	88 31       	cpi	r24, 0x18	; 24
     40e:	91 05       	cpc	r25, r1
     410:	61 f1       	breq	.+88     	; 0x46a <brush2_action+0xae>
     412:	49 97       	sbiw	r24, 0x19	; 25
     414:	09 f0       	breq	.+2      	; 0x418 <brush2_action+0x5c>
     416:	71 c0       	rjmp	.+226    	; 0x4fa <brush2_action+0x13e>
     418:	33 c0       	rjmp	.+102    	; 0x480 <brush2_action+0xc4>
     41a:	8b 31       	cpi	r24, 0x1B	; 27
     41c:	91 05       	cpc	r25, r1
     41e:	09 f4       	brne	.+2      	; 0x422 <brush2_action+0x66>
     420:	4a c0       	rjmp	.+148    	; 0x4b6 <brush2_action+0xfa>
     422:	4c 97       	sbiw	r24, 0x1c	; 28
     424:	09 f0       	breq	.+2      	; 0x428 <brush2_action+0x6c>
     426:	69 c0       	rjmp	.+210    	; 0x4fa <brush2_action+0x13e>
     428:	5a c0       	rjmp	.+180    	; 0x4de <brush2_action+0x122>
		case MOVEC2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 ******* change dir here?? and further??
     42a:	80 91 61 04 	lds	r24, 0x0461
     42e:	8f 7e       	andi	r24, 0xEF	; 239
     430:	59 c0       	rjmp	.+178    	; 0x4e4 <brush2_action+0x128>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2SET1:
			*pfixtureMotor = 0;
     432:	11 82       	std	Z+1, r1	; 0x01
     434:	10 82       	st	Z, r1
			*pbrush2Motor = 1;
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	8d 93       	st	X+, r24
     43c:	9c 93       	st	X, r25
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     43e:	80 91 61 04 	lds	r24, 0x0461
     442:	8f 7e       	andi	r24, 0xEF	; 239
     444:	80 93 61 04 	sts	0x0461, r24
			//u_outputByte1.bits_in_outputByte1.brush2Pump = 0;	//Pump control
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     448:	80 91 5d 04 	lds	r24, 0x045D
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;  // ******* dir4 ******* 
     44c:	8c 60       	ori	r24, 0x0C	; 12
     44e:	44 c0       	rjmp	.+136    	; 0x4d8 <brush2_action+0x11c>
		case CLEAN2_1:
			*pbrush2Motor = 1;
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP1:
			*pfixtureMotor = 0;
     450:	11 82       	std	Z+1, r1	; 0x01
     452:	10 82       	st	Z, r1
			*pbrush2Motor = 0;
     454:	1d 92       	st	X+, r1
     456:	1c 92       	st	X, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;  //add brush2 wet here??
     458:	80 91 5e 04 	lds	r24, 0x045E
     45c:	8e 7f       	andi	r24, 0xFE	; 254
     45e:	80 93 5e 04 	sts	0x045E, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     462:	80 91 60 04 	lds	r24, 0x0460
     466:	80 68       	ori	r24, 0x80	; 128
     468:	1e c0       	rjmp	.+60     	; 0x4a6 <brush2_action+0xea>
		case CLEAN2_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2SET2:
			*pfixtureMotor = 0;
     46a:	11 82       	std	Z+1, r1	; 0x01
     46c:	10 82       	st	Z, r1
			*pbrush2Motor = 1;
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	8d 93       	st	X+, r24
     474:	9c 93       	st	X, r25
			//u_outputByte1.bits_in_outputByte1.brush2Pump = 0;	//Pump control
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     476:	80 91 5d 04 	lds	r24, 0x045D
     47a:	88 60       	ori	r24, 0x08	; 8
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     47c:	8b 7f       	andi	r24, 0xFB	; 251
     47e:	2c c0       	rjmp	.+88     	; 0x4d8 <brush2_action+0x11c>
			break;
		case B2START2:
			*pfixtureMotor = 0;
     480:	11 82       	std	Z+1, r1	; 0x01
     482:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     484:	80 91 5d 04 	lds	r24, 0x045D
     488:	8b 7f       	andi	r24, 0xFB	; 251
     48a:	80 93 5d 04 	sts	0x045D, r24
			//u_outputByte1.bits_in_outputByte1.brush2Pump = 1;	//Pump control
			*pbrush2Motor = 1;
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	8d 93       	st	X+, r24
     494:	9c 93       	st	X, r25
			u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     496:	80 91 5e 04 	lds	r24, 0x045E
     49a:	81 60       	ori	r24, 0x01	; 1
     49c:	80 93 5e 04 	sts	0x045E, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     4a0:	80 91 60 04 	lds	r24, 0x0460
     4a4:	8f 77       	andi	r24, 0x7F	; 127
     4a6:	80 93 60 04 	sts	0x0460, r24
     4aa:	27 c0       	rjmp	.+78     	; 0x4fa <brush2_action+0x13e>
			break;
		case CLEAN2_3:
			*pbrush2Motor = 1;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	8d 93       	st	X+, r24
     4b2:	9c 93       	st	X, r25
     4b4:	1b c0       	rjmp	.+54     	; 0x4ec <brush2_action+0x130>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP2:
			*pbrush2Motor = 0;
     4b6:	1d 92       	st	X+, r1
     4b8:	1c 92       	st	X, r1
			*pfixtureMotor = 0;
     4ba:	11 82       	std	Z+1, r1	; 0x01
     4bc:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     4be:	80 91 5e 04 	lds	r24, 0x045E
     4c2:	8e 7f       	andi	r24, 0xFE	; 254
     4c4:	80 93 5e 04 	sts	0x045E, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     4c8:	80 91 60 04 	lds	r24, 0x0460
     4cc:	80 68       	ori	r24, 0x80	; 128
     4ce:	80 93 60 04 	sts	0x0460, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     4d2:	80 91 5d 04 	lds	r24, 0x045D
     4d6:	87 7f       	andi	r24, 0xF7	; 247
     4d8:	80 93 5d 04 	sts	0x045D, r24
     4dc:	0e c0       	rjmp	.+28     	; 0x4fa <brush2_action+0x13e>
			break;
		//*************************************************
		case MOVED1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     4de:	80 91 61 04 	lds	r24, 0x0461
     4e2:	80 61       	ori	r24, 0x10	; 16
     4e4:	80 93 61 04 	sts	0x0461, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	91 83       	std	Z+1, r25	; 0x01
     4ee:	80 83       	st	Z, r24
     4f0:	80 91 61 04 	lds	r24, 0x0461
     4f4:	80 62       	ori	r24, 0x20	; 32
     4f6:	80 93 61 04 	sts	0x0461, r24
			break;
	}
}
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	08 95       	ret

00000500 <dry_action>:

void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     500:	cf 92       	push	r12
     502:	df 92       	push	r13
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	ea 01       	movw	r28, r20
     50a:	f9 01       	movw	r30, r18
     50c:	d6 01       	movw	r26, r12
	switch(state){
     50e:	80 32       	cpi	r24, 0x20	; 32
     510:	91 05       	cpc	r25, r1
     512:	09 f4       	brne	.+2      	; 0x516 <dry_action+0x16>
     514:	65 c0       	rjmp	.+202    	; 0x5e0 <dry_action+0xe0>
     516:	81 32       	cpi	r24, 0x21	; 33
     518:	91 05       	cpc	r25, r1
     51a:	5c f4       	brge	.+22     	; 0x532 <dry_action+0x32>
     51c:	8e 31       	cpi	r24, 0x1E	; 30
     51e:	91 05       	cpc	r25, r1
     520:	11 f1       	breq	.+68     	; 0x566 <dry_action+0x66>
     522:	8f 31       	cpi	r24, 0x1F	; 31
     524:	91 05       	cpc	r25, r1
     526:	0c f0       	brlt	.+2      	; 0x52a <dry_action+0x2a>
     528:	3f c0       	rjmp	.+126    	; 0x5a8 <dry_action+0xa8>
     52a:	4d 97       	sbiw	r24, 0x1d	; 29
     52c:	09 f0       	breq	.+2      	; 0x530 <dry_action+0x30>
     52e:	9c c0       	rjmp	.+312    	; 0x668 <dry_action+0x168>
     530:	10 c0       	rjmp	.+32     	; 0x552 <dry_action+0x52>
     532:	82 32       	cpi	r24, 0x22	; 34
     534:	91 05       	cpc	r25, r1
     536:	09 f4       	brne	.+2      	; 0x53a <dry_action+0x3a>
     538:	67 c0       	rjmp	.+206    	; 0x608 <dry_action+0x108>
     53a:	82 32       	cpi	r24, 0x22	; 34
     53c:	91 05       	cpc	r25, r1
     53e:	0c f4       	brge	.+2      	; 0x542 <dry_action+0x42>
     540:	5c c0       	rjmp	.+184    	; 0x5fa <dry_action+0xfa>
     542:	83 32       	cpi	r24, 0x23	; 35
     544:	91 05       	cpc	r25, r1
     546:	09 f4       	brne	.+2      	; 0x54a <dry_action+0x4a>
     548:	6e c0       	rjmp	.+220    	; 0x626 <dry_action+0x126>
     54a:	84 97       	sbiw	r24, 0x24	; 36
     54c:	09 f0       	breq	.+2      	; 0x550 <dry_action+0x50>
     54e:	8c c0       	rjmp	.+280    	; 0x668 <dry_action+0x168>
     550:	71 c0       	rjmp	.+226    	; 0x634 <dry_action+0x134>
		case MOVED1EXTRA:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     552:	80 91 61 04 	lds	r24, 0x0461
     556:	80 61       	ori	r24, 0x10	; 16
     558:	80 93 61 04 	sts	0x0461, r24
			*pfixtureMotor = 1;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	91 83       	std	Z+1, r25	; 0x01
     562:	80 83       	st	Z, r24
     564:	81 c0       	rjmp	.+258    	; 0x668 <dry_action+0x168>
			break;
		case DRY:
			u_outputByte1.bits_in_outputByte1.airKnife = 0;
     566:	80 91 5e 04 	lds	r24, 0x045E
     56a:	87 7f       	andi	r24, 0xF7	; 247
     56c:	80 93 5e 04 	sts	0x045E, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     570:	80 91 61 04 	lds	r24, 0x0461
     574:	8f 7e       	andi	r24, 0xEF	; 239
     576:	80 93 61 04 	sts	0x0461, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     57a:	21 e0       	ldi	r18, 0x01	; 1
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	31 83       	std	Z+1, r19	; 0x01
     580:	20 83       	st	Z, r18
     582:	80 91 61 04 	lds	r24, 0x0461
     586:	80 62       	ori	r24, 0x20	; 32
     588:	80 93 61 04 	sts	0x0461, r24
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
     58c:	80 91 5d 04 	lds	r24, 0x045D
     590:	80 64       	ori	r24, 0x40	; 64
			u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     592:	8f 7d       	andi	r24, 0xDF	; 223
     594:	80 93 5d 04 	sts	0x045D, r24
			u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     598:	80 91 5e 04 	lds	r24, 0x045E
     59c:	8b 7f       	andi	r24, 0xFB	; 251
     59e:	80 93 5e 04 	sts	0x045E, r24
			*ppaperTowelMotor = 1;
     5a2:	2d 93       	st	X+, r18
     5a4:	3c 93       	st	X, r19
     5a6:	60 c0       	rjmp	.+192    	; 0x668 <dry_action+0x168>
			break;
		case DSTOP:
			u_outputByte1.bits_in_outputByte1.airKnife = 1;
     5a8:	80 91 5e 04 	lds	r24, 0x045E
     5ac:	88 60       	ori	r24, 0x08	; 8
     5ae:	80 93 5e 04 	sts	0x045E, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	91 83       	std	Z+1, r25	; 0x01
     5b8:	80 83       	st	Z, r24
     5ba:	80 91 61 04 	lds	r24, 0x0461
     5be:	80 62       	ori	r24, 0x20	; 32
     5c0:	80 93 61 04 	sts	0x0461, r24
			*ppaperTowelMotor = 0;
     5c4:	1d 92       	st	X+, r1
     5c6:	1c 92       	st	X, r1
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
     5c8:	80 91 5d 04 	lds	r24, 0x045D
     5cc:	8f 7b       	andi	r24, 0xBF	; 191
     5ce:	80 93 5d 04 	sts	0x045D, r24
			u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     5d2:	80 91 5e 04 	lds	r24, 0x045E
     5d6:	84 60       	ori	r24, 0x04	; 4
			u_outputByte1.bits_in_outputByte1.ptLower = 0;
     5d8:	8d 7f       	andi	r24, 0xFD	; 253
     5da:	80 93 5e 04 	sts	0x045E, r24
     5de:	44 c0       	rjmp	.+136    	; 0x668 <dry_action+0x168>
			break;
		case FIXL2EXTRA:
			u_outputByte1.bits_in_outputByte1.ptLower = 1;
     5e0:	80 91 5e 04 	lds	r24, 0x045E
     5e4:	82 60       	ori	r24, 0x02	; 2
     5e6:	80 93 5e 04 	sts	0x045E, r24
			*pfixtureMotor = 1;
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	91 83       	std	Z+1, r25	; 0x01
     5f0:	80 83       	st	Z, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     5f2:	80 91 61 04 	lds	r24, 0x0461
     5f6:	80 62       	ori	r24, 0x20	; 32
     5f8:	13 c0       	rjmp	.+38     	; 0x620 <dry_action+0x120>
			break;
		case RAISEL2:
			*pfixtureMotor = 0;
     5fa:	11 82       	std	Z+1, r1	; 0x01
     5fc:	10 82       	st	Z, r1
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     5fe:	80 91 60 04 	lds	r24, 0x0460
     602:	87 7f       	andi	r24, 0xF7	; 247
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     604:	80 61       	ori	r24, 0x10	; 16
     606:	13 c0       	rjmp	.+38     	; 0x62e <dry_action+0x12e>
			break;
		case FIXH:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     608:	80 91 61 04 	lds	r24, 0x0461
     60c:	8f 7e       	andi	r24, 0xEF	; 239
     60e:	80 93 61 04 	sts	0x0461, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	91 83       	std	Z+1, r25	; 0x01
     618:	80 83       	st	Z, r24
     61a:	80 91 61 04 	lds	r24, 0x0461
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     61e:	84 62       	ori	r24, 0x24	; 36
     620:	80 93 61 04 	sts	0x0461, r24
     624:	21 c0       	rjmp	.+66     	; 0x668 <dry_action+0x168>
			break;
		case LOWERL3:
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     626:	80 91 60 04 	lds	r24, 0x0460
     62a:	88 60       	ori	r24, 0x08	; 8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     62c:	8f 7e       	andi	r24, 0xEF	; 239
     62e:	80 93 60 04 	sts	0x0460, r24
     632:	1a c0       	rjmp	.+52     	; 0x668 <dry_action+0x168>
			break;
		case UNLOAD:
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     634:	80 91 60 04 	lds	r24, 0x0460
     638:	88 60       	ori	r24, 0x08	; 8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     63a:	8f 7e       	andi	r24, 0xEF	; 239
     63c:	80 93 60 04 	sts	0x0460, r24
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 0){
     640:	80 91 5c 04 	lds	r24, 0x045C
     644:	81 fd       	sbrc	r24, 1
     646:	07 c0       	rjmp	.+14     	; 0x656 <dry_action+0x156>
				u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     648:	80 91 61 04 	lds	r24, 0x0461
     64c:	8f 7d       	andi	r24, 0xDF	; 223
     64e:	80 93 61 04 	sts	0x0461, r24
				*pfixtureMotor = 0;
     652:	11 82       	std	Z+1, r1	; 0x01
     654:	10 82       	st	Z, r1
			}
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
     656:	80 91 61 04 	lds	r24, 0x0461
     65a:	82 60       	ori	r24, 0x02	; 2
     65c:	80 93 61 04 	sts	0x0461, r24
			*pplateLoadMotor = 1;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	99 83       	std	Y+1, r25	; 0x01
     666:	88 83       	st	Y, r24
			break;
	}
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	08 95       	ret

00000672 <button_debounce>:

bool button_debounce(int counter, int *pstateButton)
{
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	8c 01       	movw	r16, r24
     67c:	eb 01       	movw	r28, r22
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && is_digital_input_high(IO_D0)){
     67e:	88 81       	ld	r24, Y
     680:	99 81       	ldd	r25, Y+1	; 0x01
     682:	89 2b       	or	r24, r25
     684:	69 f4       	brne	.+26     	; 0x6a0 <button_debounce+0x2e>
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     68c:	88 23       	and	r24, r24
     68e:	41 f0       	breq	.+16     	; 0x6a0 <button_debounce+0x2e>
		counterRefPush = counter;
     690:	10 93 27 04 	sts	0x0427, r17
     694:	00 93 26 04 	sts	0x0426, r16
		*pstateButton = PRESSED;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	99 83       	std	Y+1, r25	; 0x01
     69e:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     6a0:	88 81       	ld	r24, Y
     6a2:	99 81       	ldd	r25, Y+1	; 0x01
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	f9 f4       	brne	.+62     	; 0x6e6 <button_debounce+0x74>
		if(counter - counterRefPush > 15){
     6a8:	80 91 26 04 	lds	r24, 0x0426
     6ac:	90 91 27 04 	lds	r25, 0x0427
     6b0:	98 01       	movw	r18, r16
     6b2:	28 1b       	sub	r18, r24
     6b4:	39 0b       	sbc	r19, r25
     6b6:	20 31       	cpi	r18, 0x10	; 16
     6b8:	31 05       	cpc	r19, r1
     6ba:	74 f0       	brlt	.+28     	; 0x6d8 <button_debounce+0x66>
			if(!is_digital_input_high(IO_D0)){
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     6c2:	88 23       	and	r24, r24
     6c4:	81 f4       	brne	.+32     	; 0x6e6 <button_debounce+0x74>
				counterRefRel = counter;
     6c6:	10 93 25 04 	sts	0x0425, r17
     6ca:	00 93 24 04 	sts	0x0424, r16
				*pstateButton = RELEASED;
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	99 83       	std	Y+1, r25	; 0x01
     6d4:	88 83       	st	Y, r24
     6d6:	07 c0       	rjmp	.+14     	; 0x6e6 <button_debounce+0x74>
			}
		}
		else if(!is_digital_input_high(IO_D0)){
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     6de:	88 23       	and	r24, r24
     6e0:	11 f4       	brne	.+4      	; 0x6e6 <button_debounce+0x74>
			*pstateButton = NONE;
     6e2:	19 82       	std	Y+1, r1	; 0x01
     6e4:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     6e6:	88 81       	ld	r24, Y
     6e8:	99 81       	ldd	r25, Y+1	; 0x01
     6ea:	02 97       	sbiw	r24, 0x02	; 2
     6ec:	d9 f4       	brne	.+54     	; 0x724 <button_debounce+0xb2>
		if(is_digital_input_high(IO_D0)){
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     6f4:	88 23       	and	r24, r24
     6f6:	49 f0       	breq	.+18     	; 0x70a <button_debounce+0x98>
			*pstateButton = PRESSED;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	99 83       	std	Y+1, r25	; 0x01
     6fe:	88 83       	st	Y, r24
			counterRefPush = counter;
     700:	10 93 27 04 	sts	0x0427, r17
     704:	00 93 26 04 	sts	0x0426, r16
     708:	0d c0       	rjmp	.+26     	; 0x724 <button_debounce+0xb2>
		}
		else if(counter - counterRefRel > 15){
     70a:	80 91 24 04 	lds	r24, 0x0424
     70e:	90 91 25 04 	lds	r25, 0x0425
     712:	08 1b       	sub	r16, r24
     714:	19 0b       	sbc	r17, r25
     716:	00 31       	cpi	r16, 0x10	; 16
     718:	11 05       	cpc	r17, r1
     71a:	24 f0       	brlt	.+8      	; 0x724 <button_debounce+0xb2>
			*pstateButton = NONE;
     71c:	19 82       	std	Y+1, r1	; 0x01
     71e:	18 82       	st	Y, r1
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	01 c0       	rjmp	.+2      	; 0x726 <button_debounce+0xb4>
			return true;
     724:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	08 95       	ret

00000730 <init_trans>:

bool init_trans(int state, bool buttonTriggered, int counter, int counterRef){
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	fc 01       	movw	r30, r24
     736:	86 2f       	mov	r24, r22
     738:	da 01       	movw	r26, r20
     73a:	b9 01       	movw	r22, r18
	return((state == INIT && buttonTriggered)||
     73c:	30 97       	sbiw	r30, 0x00	; 0
     73e:	19 f4       	brne	.+6      	; 0x746 <init_trans+0x16>
     740:	88 23       	and	r24, r24
     742:	81 f1       	breq	.+96     	; 0x7a4 <init_trans+0x74>
     744:	77 c0       	rjmp	.+238    	; 0x834 <init_trans+0x104>
     746:	e1 30       	cpi	r30, 0x01	; 1
     748:	f1 05       	cpc	r31, r1
     74a:	29 f4       	brne	.+10     	; 0x756 <init_trans+0x26>
     74c:	80 91 5c 04 	lds	r24, 0x045C
     750:	80 fd       	sbrc	r24, 0
     752:	30 c0       	rjmp	.+96     	; 0x7b4 <init_trans+0x84>
     754:	6f c0       	rjmp	.+222    	; 0x834 <init_trans+0x104>
     756:	e2 30       	cpi	r30, 0x02	; 2
     758:	f1 05       	cpc	r31, r1
     75a:	b1 f4       	brne	.+44     	; 0x788 <init_trans+0x58>
     75c:	42 1b       	sub	r20, r18
     75e:	53 0b       	sbc	r21, r19
     760:	20 91 eb 03 	lds	r18, 0x03EB
     764:	30 91 ec 03 	lds	r19, 0x03EC
     768:	80 91 d7 03 	lds	r24, 0x03D7
     76c:	90 91 d8 03 	lds	r25, 0x03D8
     770:	ec 01       	movw	r28, r24
     772:	2c 9f       	mul	r18, r28
     774:	c0 01       	movw	r24, r0
     776:	2d 9f       	mul	r18, r29
     778:	90 0d       	add	r25, r0
     77a:	3c 9f       	mul	r19, r28
     77c:	90 0d       	add	r25, r0
     77e:	11 24       	eor	r1, r1
     780:	84 17       	cp	r24, r20
     782:	95 07       	cpc	r25, r21
     784:	ac f5       	brge	.+106    	; 0x7f0 <init_trans+0xc0>
     786:	56 c0       	rjmp	.+172    	; 0x834 <init_trans+0x104>
     788:	e3 30       	cpi	r30, 0x03	; 3
     78a:	f1 05       	cpc	r31, r1
     78c:	59 f4       	brne	.+22     	; 0x7a4 <init_trans+0x74>
     78e:	9a 01       	movw	r18, r20
     790:	26 1b       	sub	r18, r22
     792:	37 0b       	sbc	r19, r23
     794:	80 91 c7 03 	lds	r24, 0x03C7
     798:	90 91 c8 03 	lds	r25, 0x03C8
     79c:	82 17       	cp	r24, r18
     79e:	93 07       	cpc	r25, r19
     7a0:	ac f5       	brge	.+106    	; 0x80c <init_trans+0xdc>
     7a2:	48 c0       	rjmp	.+144    	; 0x834 <init_trans+0x104>
     7a4:	e4 30       	cpi	r30, 0x04	; 4
     7a6:	f1 05       	cpc	r31, r1
     7a8:	29 f4       	brne	.+10     	; 0x7b4 <init_trans+0x84>
     7aa:	80 91 5c 04 	lds	r24, 0x045C
     7ae:	86 95       	lsr	r24
     7b0:	86 95       	lsr	r24
     7b2:	26 c0       	rjmp	.+76     	; 0x800 <init_trans+0xd0>
     7b4:	e5 30       	cpi	r30, 0x05	; 5
     7b6:	f1 05       	cpc	r31, r1
     7b8:	d9 f4       	brne	.+54     	; 0x7f0 <init_trans+0xc0>
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	a6 1b       	sub	r26, r22
     7c0:	b7 0b       	sbc	r27, r23
     7c2:	80 91 ed 03 	lds	r24, 0x03ED
     7c6:	90 91 ee 03 	lds	r25, 0x03EE
     7ca:	20 91 d9 03 	lds	r18, 0x03D9
     7ce:	30 91 da 03 	lds	r19, 0x03DA
     7d2:	bc 01       	movw	r22, r24
     7d4:	62 9f       	mul	r22, r18
     7d6:	c0 01       	movw	r24, r0
     7d8:	63 9f       	mul	r22, r19
     7da:	90 0d       	add	r25, r0
     7dc:	72 9f       	mul	r23, r18
     7de:	90 0d       	add	r25, r0
     7e0:	11 24       	eor	r1, r1
     7e2:	8a 17       	cp	r24, r26
     7e4:	9b 07       	cpc	r25, r27
     7e6:	14 f4       	brge	.+4      	; 0x7ec <init_trans+0xbc>
     7e8:	41 e0       	ldi	r20, 0x01	; 1
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	ca 01       	movw	r24, r20
     7ee:	24 c0       	rjmp	.+72     	; 0x838 <init_trans+0x108>
     7f0:	e6 30       	cpi	r30, 0x06	; 6
     7f2:	f1 05       	cpc	r31, r1
     7f4:	59 f4       	brne	.+22     	; 0x80c <init_trans+0xdc>
     7f6:	80 91 5c 04 	lds	r24, 0x045C
     7fa:	86 95       	lsr	r24
     7fc:	86 95       	lsr	r24
     7fe:	86 95       	lsr	r24
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	89 27       	eor	r24, r25
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	81 70       	andi	r24, 0x01	; 1
     808:	90 70       	andi	r25, 0x00	; 0
     80a:	16 c0       	rjmp	.+44     	; 0x838 <init_trans+0x108>
     80c:	37 97       	sbiw	r30, 0x07	; 7
     80e:	19 f0       	breq	.+6      	; 0x816 <init_trans+0xe6>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	11 c0       	rjmp	.+34     	; 0x838 <init_trans+0x108>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	a6 1b       	sub	r26, r22
     81c:	b7 0b       	sbc	r27, r23
     81e:	80 91 c7 03 	lds	r24, 0x03C7
     822:	90 91 c8 03 	lds	r25, 0x03C8
     826:	8a 17       	cp	r24, r26
     828:	9b 07       	cpc	r25, r27
     82a:	14 f4       	brge	.+4      	; 0x830 <init_trans+0x100>
     82c:	21 e0       	ldi	r18, 0x01	; 1
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	c9 01       	movw	r24, r18
     832:	02 c0       	rjmp	.+4      	; 0x838 <init_trans+0x108>
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	90 e0       	ldi	r25, 0x00	; 0
	(state == RAISEL1 && counter - counterRef > pWait)||
	(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == FIXLEXTRA && counter - counterRef > totalStepLength2*fixtureLiftExtra)||
	(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0)||
	(state == LOWERL2 && counter - counterRef > pWait));
}
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <firstB_trans>:

bool firstB_trans(int state, int counter, int counterRef){
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	fc 01       	movw	r30, r24
     844:	da 01       	movw	r26, r20
	//Had references to counterRef14...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVEC1 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush1Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0)||
     846:	88 30       	cpi	r24, 0x08	; 8
     848:	91 05       	cpc	r25, r1
     84a:	29 f4       	brne	.+10     	; 0x856 <firstB_trans+0x18>
     84c:	80 91 5c 04 	lds	r24, 0x045C
     850:	84 fd       	sbrc	r24, 4
     852:	37 c0       	rjmp	.+110    	; 0x8c2 <firstB_trans+0x84>
     854:	8f c0       	rjmp	.+286    	; 0x974 <firstB_trans+0x136>
     856:	89 30       	cpi	r24, 0x09	; 9
     858:	91 05       	cpc	r25, r1
     85a:	59 f4       	brne	.+22     	; 0x872 <firstB_trans+0x34>
     85c:	9b 01       	movw	r18, r22
     85e:	24 1b       	sub	r18, r20
     860:	35 0b       	sbc	r19, r21
     862:	80 91 c9 03 	lds	r24, 0x03C9
     866:	90 91 ca 03 	lds	r25, 0x03CA
     86a:	82 17       	cp	r24, r18
     86c:	93 07       	cpc	r25, r19
     86e:	bc f5       	brge	.+110    	; 0x8de <firstB_trans+0xa0>
     870:	81 c0       	rjmp	.+258    	; 0x974 <firstB_trans+0x136>
     872:	8a 30       	cpi	r24, 0x0A	; 10
     874:	91 05       	cpc	r25, r1
     876:	59 f4       	brne	.+22     	; 0x88e <firstB_trans+0x50>
     878:	9b 01       	movw	r18, r22
     87a:	24 1b       	sub	r18, r20
     87c:	35 0b       	sbc	r19, r21
     87e:	80 91 c7 03 	lds	r24, 0x03C7
     882:	90 91 c8 03 	lds	r25, 0x03C8
     886:	82 17       	cp	r24, r18
     888:	93 07       	cpc	r25, r19
     88a:	b4 f5       	brge	.+108    	; 0x8f8 <firstB_trans+0xba>
     88c:	73 c0       	rjmp	.+230    	; 0x974 <firstB_trans+0x136>
     88e:	8b 30       	cpi	r24, 0x0B	; 11
     890:	91 05       	cpc	r25, r1
     892:	b9 f4       	brne	.+46     	; 0x8c2 <firstB_trans+0x84>
     894:	ab 01       	movw	r20, r22
     896:	4a 1b       	sub	r20, r26
     898:	5b 0b       	sbc	r21, r27
     89a:	20 91 e3 03 	lds	r18, 0x03E3
     89e:	30 91 e4 03 	lds	r19, 0x03E4
     8a2:	80 91 d9 03 	lds	r24, 0x03D9
     8a6:	90 91 da 03 	lds	r25, 0x03DA
     8aa:	ec 01       	movw	r28, r24
     8ac:	2c 9f       	mul	r18, r28
     8ae:	c0 01       	movw	r24, r0
     8b0:	2d 9f       	mul	r18, r29
     8b2:	90 0d       	add	r25, r0
     8b4:	3c 9f       	mul	r19, r28
     8b6:	90 0d       	add	r25, r0
     8b8:	11 24       	eor	r1, r1
     8ba:	84 17       	cp	r24, r20
     8bc:	95 07       	cpc	r25, r21
     8be:	44 f5       	brge	.+80     	; 0x910 <firstB_trans+0xd2>
     8c0:	59 c0       	rjmp	.+178    	; 0x974 <firstB_trans+0x136>
     8c2:	ec 30       	cpi	r30, 0x0C	; 12
     8c4:	f1 05       	cpc	r31, r1
     8c6:	59 f4       	brne	.+22     	; 0x8de <firstB_trans+0xa0>
     8c8:	9b 01       	movw	r18, r22
     8ca:	2a 1b       	sub	r18, r26
     8cc:	3b 0b       	sbc	r19, r27
     8ce:	80 91 c7 03 	lds	r24, 0x03C7
     8d2:	90 91 c8 03 	lds	r25, 0x03C8
     8d6:	82 17       	cp	r24, r18
     8d8:	93 07       	cpc	r25, r19
     8da:	64 f5       	brge	.+88     	; 0x934 <firstB_trans+0xf6>
     8dc:	4b c0       	rjmp	.+150    	; 0x974 <firstB_trans+0x136>
     8de:	ed 30       	cpi	r30, 0x0D	; 13
     8e0:	f1 05       	cpc	r31, r1
     8e2:	51 f4       	brne	.+20     	; 0x8f8 <firstB_trans+0xba>
     8e4:	80 91 5c 04 	lds	r24, 0x045C
     8e8:	82 95       	swap	r24
     8ea:	8f 70       	andi	r24, 0x0F	; 15
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	89 27       	eor	r24, r25
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	81 70       	andi	r24, 0x01	; 1
     8f4:	90 70       	andi	r25, 0x00	; 0
     8f6:	40 c0       	rjmp	.+128    	; 0x978 <firstB_trans+0x13a>
     8f8:	ee 30       	cpi	r30, 0x0E	; 14
     8fa:	f1 05       	cpc	r31, r1
     8fc:	49 f4       	brne	.+18     	; 0x910 <firstB_trans+0xd2>
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	6a 1b       	sub	r22, r26
     904:	7b 0b       	sbc	r23, r27
     906:	80 91 c9 03 	lds	r24, 0x03C9
     90a:	90 91 ca 03 	lds	r25, 0x03CA
     90e:	0b c0       	rjmp	.+22     	; 0x926 <firstB_trans+0xe8>
     910:	ef 30       	cpi	r30, 0x0F	; 15
     912:	f1 05       	cpc	r31, r1
     914:	79 f4       	brne	.+30     	; 0x934 <firstB_trans+0xf6>
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	6a 1b       	sub	r22, r26
     91c:	7b 0b       	sbc	r23, r27
     91e:	80 91 c7 03 	lds	r24, 0x03C7
     922:	90 91 c8 03 	lds	r25, 0x03C8
     926:	86 17       	cp	r24, r22
     928:	97 07       	cpc	r25, r23
     92a:	14 f4       	brge	.+4      	; 0x930 <firstB_trans+0xf2>
     92c:	21 e0       	ldi	r18, 0x01	; 1
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	c9 01       	movw	r24, r18
     932:	22 c0       	rjmp	.+68     	; 0x978 <firstB_trans+0x13a>
     934:	70 97       	sbiw	r30, 0x10	; 16
     936:	19 f0       	breq	.+6      	; 0x93e <firstB_trans+0x100>
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	1d c0       	rjmp	.+58     	; 0x978 <firstB_trans+0x13a>
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	6a 1b       	sub	r22, r26
     944:	7b 0b       	sbc	r23, r27
     946:	80 91 e5 03 	lds	r24, 0x03E5
     94a:	90 91 e6 03 	lds	r25, 0x03E6
     94e:	20 91 d9 03 	lds	r18, 0x03D9
     952:	30 91 da 03 	lds	r19, 0x03DA
     956:	fc 01       	movw	r30, r24
     958:	e2 9f       	mul	r30, r18
     95a:	c0 01       	movw	r24, r0
     95c:	e3 9f       	mul	r30, r19
     95e:	90 0d       	add	r25, r0
     960:	f2 9f       	mul	r31, r18
     962:	90 0d       	add	r25, r0
     964:	11 24       	eor	r1, r1
     966:	86 17       	cp	r24, r22
     968:	97 07       	cpc	r25, r23
     96a:	14 f4       	brge	.+4      	; 0x970 <firstB_trans+0x132>
     96c:	41 e0       	ldi	r20, 0x01	; 1
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	ca 01       	movw	r24, r20
     972:	02 c0       	rjmp	.+4      	; 0x978 <firstB_trans+0x13a>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
	(state == B1STOP1 && counter - counterRef > pWait)||
	(state == CLEAN1_2 && /*counter - counterRef > totalStepLength2*fixtureMotorHalfPlate &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0)||
	(state == B1SET2 && counter - counterRef > mWait)||
	(state == B1START2 && counter - counterRef > pWait)||
	(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorBigHalfPlate));
}
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <secondB_trans>:

bool secondB_trans(int state, int counter, int counterRef){
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	fc 01       	movw	r30, r24
     984:	da 01       	movw	r26, r20
	return((state == MOVEC2 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush2Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0)||
     986:	82 31       	cpi	r24, 0x12	; 18
     988:	91 05       	cpc	r25, r1
     98a:	29 f4       	brne	.+10     	; 0x996 <secondB_trans+0x18>
     98c:	80 91 5c 04 	lds	r24, 0x045C
     990:	85 fd       	sbrc	r24, 5
     992:	37 c0       	rjmp	.+110    	; 0xa02 <secondB_trans+0x84>
     994:	9d c0       	rjmp	.+314    	; 0xad0 <secondB_trans+0x152>
     996:	83 31       	cpi	r24, 0x13	; 19
     998:	91 05       	cpc	r25, r1
     99a:	59 f4       	brne	.+22     	; 0x9b2 <secondB_trans+0x34>
     99c:	9b 01       	movw	r18, r22
     99e:	24 1b       	sub	r18, r20
     9a0:	35 0b       	sbc	r19, r21
     9a2:	80 91 c9 03 	lds	r24, 0x03C9
     9a6:	90 91 ca 03 	lds	r25, 0x03CA
     9aa:	82 17       	cp	r24, r18
     9ac:	93 07       	cpc	r25, r19
     9ae:	bc f5       	brge	.+110    	; 0xa1e <secondB_trans+0xa0>
     9b0:	8f c0       	rjmp	.+286    	; 0xad0 <secondB_trans+0x152>
     9b2:	84 31       	cpi	r24, 0x14	; 20
     9b4:	91 05       	cpc	r25, r1
     9b6:	59 f4       	brne	.+22     	; 0x9ce <secondB_trans+0x50>
     9b8:	9b 01       	movw	r18, r22
     9ba:	24 1b       	sub	r18, r20
     9bc:	35 0b       	sbc	r19, r21
     9be:	80 91 c7 03 	lds	r24, 0x03C7
     9c2:	90 91 c8 03 	lds	r25, 0x03C8
     9c6:	82 17       	cp	r24, r18
     9c8:	93 07       	cpc	r25, r19
     9ca:	8c f5       	brge	.+98     	; 0xa2e <secondB_trans+0xb0>
     9cc:	81 c0       	rjmp	.+258    	; 0xad0 <secondB_trans+0x152>
     9ce:	85 31       	cpi	r24, 0x15	; 21
     9d0:	91 05       	cpc	r25, r1
     9d2:	b9 f4       	brne	.+46     	; 0xa02 <secondB_trans+0x84>
     9d4:	ab 01       	movw	r20, r22
     9d6:	4a 1b       	sub	r20, r26
     9d8:	5b 0b       	sbc	r21, r27
     9da:	20 91 e5 03 	lds	r18, 0x03E5
     9de:	30 91 e6 03 	lds	r19, 0x03E6
     9e2:	80 91 d9 03 	lds	r24, 0x03D9
     9e6:	90 91 da 03 	lds	r25, 0x03DA
     9ea:	ec 01       	movw	r28, r24
     9ec:	2c 9f       	mul	r18, r28
     9ee:	c0 01       	movw	r24, r0
     9f0:	2d 9f       	mul	r18, r29
     9f2:	90 0d       	add	r25, r0
     9f4:	3c 9f       	mul	r19, r28
     9f6:	90 0d       	add	r25, r0
     9f8:	11 24       	eor	r1, r1
     9fa:	84 17       	cp	r24, r20
     9fc:	95 07       	cpc	r25, r21
     9fe:	24 f5       	brge	.+72     	; 0xa48 <secondB_trans+0xca>
     a00:	67 c0       	rjmp	.+206    	; 0xad0 <secondB_trans+0x152>
     a02:	e6 31       	cpi	r30, 0x16	; 22
     a04:	f1 05       	cpc	r31, r1
     a06:	59 f4       	brne	.+22     	; 0xa1e <secondB_trans+0xa0>
     a08:	9b 01       	movw	r18, r22
     a0a:	2a 1b       	sub	r18, r26
     a0c:	3b 0b       	sbc	r19, r27
     a0e:	80 91 c7 03 	lds	r24, 0x03C7
     a12:	90 91 c8 03 	lds	r25, 0x03C8
     a16:	82 17       	cp	r24, r18
     a18:	93 07       	cpc	r25, r19
     a1a:	cc f4       	brge	.+50     	; 0xa4e <secondB_trans+0xd0>
     a1c:	59 c0       	rjmp	.+178    	; 0xad0 <secondB_trans+0x152>
     a1e:	e7 31       	cpi	r30, 0x17	; 23
     a20:	f1 05       	cpc	r31, r1
     a22:	29 f4       	brne	.+10     	; 0xa2e <secondB_trans+0xb0>
     a24:	80 91 5c 04 	lds	r24, 0x045C
     a28:	85 fd       	sbrc	r24, 5
     a2a:	2f c0       	rjmp	.+94     	; 0xa8a <secondB_trans+0x10c>
     a2c:	51 c0       	rjmp	.+162    	; 0xad0 <secondB_trans+0x152>
     a2e:	e8 31       	cpi	r30, 0x18	; 24
     a30:	f1 05       	cpc	r31, r1
     a32:	51 f4       	brne	.+20     	; 0xa48 <secondB_trans+0xca>
     a34:	6a 1b       	sub	r22, r26
     a36:	7b 0b       	sbc	r23, r27
     a38:	80 91 c9 03 	lds	r24, 0x03C9
     a3c:	90 91 ca 03 	lds	r25, 0x03CA
     a40:	86 17       	cp	r24, r22
     a42:	97 07       	cpc	r25, r23
     a44:	a4 f5       	brge	.+104    	; 0xaae <secondB_trans+0x130>
     a46:	44 c0       	rjmp	.+136    	; 0xad0 <secondB_trans+0x152>
     a48:	e9 31       	cpi	r30, 0x19	; 25
     a4a:	f1 05       	cpc	r31, r1
     a4c:	09 f1       	breq	.+66     	; 0xa90 <secondB_trans+0x112>
     a4e:	ea 31       	cpi	r30, 0x1A	; 26
     a50:	f1 05       	cpc	r31, r1
     a52:	d9 f4       	brne	.+54     	; 0xa8a <secondB_trans+0x10c>
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	6a 1b       	sub	r22, r26
     a5a:	7b 0b       	sbc	r23, r27
     a5c:	80 91 e3 03 	lds	r24, 0x03E3
     a60:	90 91 e4 03 	lds	r25, 0x03E4
     a64:	20 91 d9 03 	lds	r18, 0x03D9
     a68:	30 91 da 03 	lds	r19, 0x03DA
     a6c:	fc 01       	movw	r30, r24
     a6e:	e2 9f       	mul	r30, r18
     a70:	c0 01       	movw	r24, r0
     a72:	e3 9f       	mul	r30, r19
     a74:	90 0d       	add	r25, r0
     a76:	f2 9f       	mul	r31, r18
     a78:	90 0d       	add	r25, r0
     a7a:	11 24       	eor	r1, r1
     a7c:	86 17       	cp	r24, r22
     a7e:	97 07       	cpc	r25, r23
     a80:	14 f4       	brge	.+4      	; 0xa86 <secondB_trans+0x108>
     a82:	41 e0       	ldi	r20, 0x01	; 1
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	ca 01       	movw	r24, r20
     a88:	25 c0       	rjmp	.+74     	; 0xad4 <secondB_trans+0x156>
     a8a:	eb 31       	cpi	r30, 0x1B	; 27
     a8c:	f1 05       	cpc	r31, r1
     a8e:	79 f4       	brne	.+30     	; 0xaae <secondB_trans+0x130>
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	6a 1b       	sub	r22, r26
     a96:	7b 0b       	sbc	r23, r27
     a98:	80 91 c7 03 	lds	r24, 0x03C7
     a9c:	90 91 c8 03 	lds	r25, 0x03C8
     aa0:	86 17       	cp	r24, r22
     aa2:	97 07       	cpc	r25, r23
     aa4:	14 f4       	brge	.+4      	; 0xaaa <secondB_trans+0x12c>
     aa6:	21 e0       	ldi	r18, 0x01	; 1
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	c9 01       	movw	r24, r18
     aac:	13 c0       	rjmp	.+38     	; 0xad4 <secondB_trans+0x156>
     aae:	7c 97       	sbiw	r30, 0x1c	; 28
     ab0:	19 f0       	breq	.+6      	; 0xab8 <secondB_trans+0x13a>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e c0       	rjmp	.+28     	; 0xad4 <secondB_trans+0x156>
     ab8:	80 91 5c 04 	lds	r24, 0x045C
     abc:	82 95       	swap	r24
     abe:	86 95       	lsr	r24
     ac0:	86 95       	lsr	r24
     ac2:	83 70       	andi	r24, 0x03	; 3
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	89 27       	eor	r24, r25
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	81 70       	andi	r24, 0x01	; 1
     acc:	90 70       	andi	r25, 0x00	; 0
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <secondB_trans+0x156>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
	(state == B2SET2 && counter - counterRef > mWait)||
	(state == B2START2 && counter - counterRef > pWait)||
	(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorSmallHalfPlate)||
	(state == B2STOP2 && counter - counterRef > pWait)||
	(state == MOVED1 && /*counter - counterRef > totalStepLength2*fixtureMotorDry1Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0));
}
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <dry_trans>:

bool dry_trans(int state, int counter, int counterRef){
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	fc 01       	movw	r30, r24
     ae0:	da 01       	movw	r26, r20
	//Had references to counterRef26, 30...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVED1EXTRA && counter - counterRef > fixtureMotorDry1Extra)||
     ae2:	8d 31       	cpi	r24, 0x1D	; 29
     ae4:	91 05       	cpc	r25, r1
     ae6:	59 f4       	brne	.+22     	; 0xafe <dry_trans+0x24>
     ae8:	9b 01       	movw	r18, r22
     aea:	24 1b       	sub	r18, r20
     aec:	35 0b       	sbc	r19, r21
     aee:	80 91 ef 03 	lds	r24, 0x03EF
     af2:	90 91 f0 03 	lds	r25, 0x03F0
     af6:	82 17       	cp	r24, r18
     af8:	93 07       	cpc	r25, r19
     afa:	ec f5       	brge	.+122    	; 0xb76 <dry_trans+0x9c>
     afc:	7f c0       	rjmp	.+254    	; 0xbfc <dry_trans+0x122>
     afe:	8e 31       	cpi	r24, 0x1E	; 30
     b00:	91 05       	cpc	r25, r1
     b02:	b9 f4       	brne	.+46     	; 0xb32 <dry_trans+0x58>
     b04:	ab 01       	movw	r20, r22
     b06:	4a 1b       	sub	r20, r26
     b08:	5b 0b       	sbc	r21, r27
     b0a:	20 91 e7 03 	lds	r18, 0x03E7
     b0e:	30 91 e8 03 	lds	r19, 0x03E8
     b12:	80 91 d9 03 	lds	r24, 0x03D9
     b16:	90 91 da 03 	lds	r25, 0x03DA
     b1a:	ec 01       	movw	r28, r24
     b1c:	2c 9f       	mul	r18, r28
     b1e:	c0 01       	movw	r24, r0
     b20:	2d 9f       	mul	r18, r29
     b22:	90 0d       	add	r25, r0
     b24:	3c 9f       	mul	r19, r28
     b26:	90 0d       	add	r25, r0
     b28:	11 24       	eor	r1, r1
     b2a:	84 17       	cp	r24, r20
     b2c:	95 07       	cpc	r25, r21
     b2e:	84 f5       	brge	.+96     	; 0xb90 <dry_trans+0xb6>
     b30:	65 c0       	rjmp	.+202    	; 0xbfc <dry_trans+0x122>
     b32:	8f 31       	cpi	r24, 0x1F	; 31
     b34:	91 05       	cpc	r25, r1
     b36:	29 f4       	brne	.+10     	; 0xb42 <dry_trans+0x68>
     b38:	80 91 5c 04 	lds	r24, 0x045C
     b3c:	83 fd       	sbrc	r24, 3
     b3e:	33 c0       	rjmp	.+102    	; 0xba6 <dry_trans+0xcc>
     b40:	5d c0       	rjmp	.+186    	; 0xbfc <dry_trans+0x122>
     b42:	80 32       	cpi	r24, 0x20	; 32
     b44:	91 05       	cpc	r25, r1
     b46:	b9 f4       	brne	.+46     	; 0xb76 <dry_trans+0x9c>
     b48:	ab 01       	movw	r20, r22
     b4a:	4a 1b       	sub	r20, r26
     b4c:	5b 0b       	sbc	r21, r27
     b4e:	20 91 f3 03 	lds	r18, 0x03F3
     b52:	30 91 f4 03 	lds	r19, 0x03F4
     b56:	80 91 d9 03 	lds	r24, 0x03D9
     b5a:	90 91 da 03 	lds	r25, 0x03DA
     b5e:	ec 01       	movw	r28, r24
     b60:	2c 9f       	mul	r18, r28
     b62:	c0 01       	movw	r24, r0
     b64:	2d 9f       	mul	r18, r29
     b66:	90 0d       	add	r25, r0
     b68:	3c 9f       	mul	r19, r28
     b6a:	90 0d       	add	r25, r0
     b6c:	11 24       	eor	r1, r1
     b6e:	84 17       	cp	r24, r20
     b70:	95 07       	cpc	r25, r21
     b72:	24 f5       	brge	.+72     	; 0xbbc <dry_trans+0xe2>
     b74:	43 c0       	rjmp	.+134    	; 0xbfc <dry_trans+0x122>
     b76:	e1 32       	cpi	r30, 0x21	; 33
     b78:	f1 05       	cpc	r31, r1
     b7a:	51 f4       	brne	.+20     	; 0xb90 <dry_trans+0xb6>
     b7c:	80 91 5c 04 	lds	r24, 0x045C
     b80:	86 95       	lsr	r24
     b82:	86 95       	lsr	r24
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	89 27       	eor	r24, r25
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	81 70       	andi	r24, 0x01	; 1
     b8c:	90 70       	andi	r25, 0x00	; 0
     b8e:	38 c0       	rjmp	.+112    	; 0xc00 <dry_trans+0x126>
     b90:	e2 32       	cpi	r30, 0x22	; 34
     b92:	f1 05       	cpc	r31, r1
     b94:	41 f4       	brne	.+16     	; 0xba6 <dry_trans+0xcc>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	6a 1b       	sub	r22, r26
     b9c:	7b 0b       	sbc	r23, r27
     b9e:	69 3c       	cpi	r22, 0xC9	; 201
     ba0:	71 05       	cpc	r23, r1
     ba2:	74 f1       	brlt	.+92     	; 0xc00 <dry_trans+0x126>
     ba4:	2b c0       	rjmp	.+86     	; 0xbfc <dry_trans+0x122>
     ba6:	e3 32       	cpi	r30, 0x23	; 35
     ba8:	f1 05       	cpc	r31, r1
     baa:	41 f4       	brne	.+16     	; 0xbbc <dry_trans+0xe2>
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	6a 1b       	sub	r22, r26
     bb2:	7b 0b       	sbc	r23, r27
     bb4:	65 5f       	subi	r22, 0xF5	; 245
     bb6:	71 40       	sbci	r23, 0x01	; 1
     bb8:	1c f1       	brlt	.+70     	; 0xc00 <dry_trans+0x126>
     bba:	20 c0       	rjmp	.+64     	; 0xbfc <dry_trans+0x122>
     bbc:	b4 97       	sbiw	r30, 0x24	; 36
     bbe:	19 f0       	breq	.+6      	; 0xbc6 <dry_trans+0xec>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	1d c0       	rjmp	.+58     	; 0xc00 <dry_trans+0x126>
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	6a 1b       	sub	r22, r26
     bcc:	7b 0b       	sbc	r23, r27
     bce:	80 91 e9 03 	lds	r24, 0x03E9
     bd2:	90 91 ea 03 	lds	r25, 0x03EA
     bd6:	20 91 d7 03 	lds	r18, 0x03D7
     bda:	30 91 d8 03 	lds	r19, 0x03D8
     bde:	ec 01       	movw	r28, r24
     be0:	c2 9f       	mul	r28, r18
     be2:	c0 01       	movw	r24, r0
     be4:	c3 9f       	mul	r28, r19
     be6:	90 0d       	add	r25, r0
     be8:	d2 9f       	mul	r29, r18
     bea:	90 0d       	add	r25, r0
     bec:	11 24       	eor	r1, r1
     bee:	86 17       	cp	r24, r22
     bf0:	97 07       	cpc	r25, r23
     bf2:	14 f4       	brge	.+4      	; 0xbf8 <dry_trans+0x11e>
     bf4:	41 e0       	ldi	r20, 0x01	; 1
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	ca 01       	movw	r24, r20
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <dry_trans+0x126>
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
	(state == FIXL2EXTRA && counter - counterRef > totalStepLength2*fixtureLift2Extra)||
	(state == RAISEL2 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == FIXH && counter - counterRef > 200)||
	(state == LOWERL3 && counter - counterRef > 500)||
	(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate));
}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <motor_and_write>:
	serial_print_string(msg);
}


void motor_and_write(int counter, int counterRef, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor)
{
     c06:	af 92       	push	r10
     c08:	bf 92       	push	r11
     c0a:	cf 92       	push	r12
     c0c:	df 92       	push	r13
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	ea 01       	movw	r28, r20
     c1c:	59 01       	movw	r10, r18
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     c1e:	fc 01       	movw	r30, r24
     c20:	e6 1b       	sub	r30, r22
     c22:	f7 0b       	sbc	r31, r23
     c24:	60 91 d7 03 	lds	r22, 0x03D7
     c28:	70 91 d8 03 	lds	r23, 0x03D8
     c2c:	cf 01       	movw	r24, r30
     c2e:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodhi4>
     c32:	20 91 cd 03 	lds	r18, 0x03CD
     c36:	30 91 ce 03 	lds	r19, 0x03CE
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	34 f4       	brge	.+12     	; 0xc4c <motor_and_write+0x46>
     c40:	cd 2b       	or	r28, r29
     c42:	21 f0       	breq	.+8      	; 0xc4c <motor_and_write+0x46>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 1
     c44:	80 91 61 04 	lds	r24, 0x0461
     c48:	81 60       	ori	r24, 0x01	; 1
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <motor_and_write+0x4c>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     c4c:	80 91 61 04 	lds	r24, 0x0461
     c50:	8e 7f       	andi	r24, 0xFE	; 254
     c52:	80 93 61 04 	sts	0x0461, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     c56:	60 91 d9 03 	lds	r22, 0x03D9
     c5a:	70 91 da 03 	lds	r23, 0x03DA
     c5e:	cf 01       	movw	r24, r30
     c60:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodhi4>
     c64:	20 91 cf 03 	lds	r18, 0x03CF
     c68:	30 91 d0 03 	lds	r19, 0x03D0
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	34 f4       	brge	.+12     	; 0xc7e <motor_and_write+0x78>
     c72:	ab 28       	or	r10, r11
     c74:	21 f0       	breq	.+8      	; 0xc7e <motor_and_write+0x78>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     c76:	80 91 61 04 	lds	r24, 0x0461
     c7a:	88 60       	ori	r24, 0x08	; 8
     c7c:	03 c0       	rjmp	.+6      	; 0xc84 <motor_and_write+0x7e>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 0
     c7e:	80 91 61 04 	lds	r24, 0x0461
     c82:	87 7f       	andi	r24, 0xF7	; 247
     c84:	80 93 61 04 	sts	0x0461, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     c88:	60 91 db 03 	lds	r22, 0x03DB
     c8c:	70 91 dc 03 	lds	r23, 0x03DC
     c90:	cf 01       	movw	r24, r30
     c92:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodhi4>
     c96:	20 91 d1 03 	lds	r18, 0x03D1
     c9a:	30 91 d2 03 	lds	r19, 0x03D2
     c9e:	82 17       	cp	r24, r18
     ca0:	93 07       	cpc	r25, r19
     ca2:	34 f4       	brge	.+12     	; 0xcb0 <motor_and_write+0xaa>
     ca4:	01 2b       	or	r16, r17
     ca6:	21 f0       	breq	.+8      	; 0xcb0 <motor_and_write+0xaa>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     ca8:	80 91 61 04 	lds	r24, 0x0461
     cac:	80 64       	ori	r24, 0x40	; 64
     cae:	03 c0       	rjmp	.+6      	; 0xcb6 <motor_and_write+0xb0>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 0
     cb0:	80 91 61 04 	lds	r24, 0x0461
     cb4:	8f 7b       	andi	r24, 0xBF	; 191
     cb6:	80 93 61 04 	sts	0x0461, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     cba:	60 91 dd 03 	lds	r22, 0x03DD
     cbe:	70 91 de 03 	lds	r23, 0x03DE
     cc2:	cf 01       	movw	r24, r30
     cc4:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodhi4>
     cc8:	20 91 d3 03 	lds	r18, 0x03D3
     ccc:	30 91 d4 03 	lds	r19, 0x03D4
     cd0:	82 17       	cp	r24, r18
     cd2:	93 07       	cpc	r25, r19
     cd4:	34 f4       	brge	.+12     	; 0xce2 <motor_and_write+0xdc>
     cd6:	ef 28       	or	r14, r15
     cd8:	21 f0       	breq	.+8      	; 0xce2 <motor_and_write+0xdc>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     cda:	80 91 5d 04 	lds	r24, 0x045D
     cde:	82 60       	ori	r24, 0x02	; 2
     ce0:	03 c0       	rjmp	.+6      	; 0xce8 <motor_and_write+0xe2>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 0
     ce2:	80 91 5d 04 	lds	r24, 0x045D
     ce6:	8d 7f       	andi	r24, 0xFD	; 253
     ce8:	80 93 5d 04 	sts	0x045D, r24
	}

	if( ((counter - counterRef) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     cec:	60 91 df 03 	lds	r22, 0x03DF
     cf0:	70 91 e0 03 	lds	r23, 0x03E0
     cf4:	cf 01       	movw	r24, r30
     cf6:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodhi4>
     cfa:	20 91 d5 03 	lds	r18, 0x03D5
     cfe:	30 91 d6 03 	lds	r19, 0x03D6
     d02:	82 17       	cp	r24, r18
     d04:	93 07       	cpc	r25, r19
     d06:	34 f4       	brge	.+12     	; 0xd14 <motor_and_write+0x10e>
     d08:	cd 28       	or	r12, r13
     d0a:	21 f0       	breq	.+8      	; 0xd14 <motor_and_write+0x10e>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     d0c:	80 91 5d 04 	lds	r24, 0x045D
     d10:	80 61       	ori	r24, 0x10	; 16
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <motor_and_write+0x114>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 0
     d14:	80 91 5d 04 	lds	r24, 0x045D
     d18:	8f 7e       	andi	r24, 0xEF	; 239
     d1a:	80 93 5d 04 	sts	0x045D, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     d1e:	80 e4       	ldi	r24, 0x40	; 64
     d20:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
	i2c_write(0x2);									// write command byte
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     d2a:	80 91 61 04 	lds	r24, 0x0461
     d2e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     d32:	80 91 5d 04 	lds	r24, 0x045D
     d36:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_stop();                            // set stop condition = release bus
     d3a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

	i2c_start(I2C2+I2C_WRITE);                // why the second write?
     d3e:	82 e4       	ldi	r24, 0x42	; 66
     d40:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
	i2c_write(0x2);
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_outputByte0.outputByte0);
     d4a:	80 91 60 04 	lds	r24, 0x0460
     d4e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_outputByte1.outputByte1);
     d52:	80 91 5e 04 	lds	r24, 0x045E
     d56:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_stop();
     d5a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
}
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	ff 90       	pop	r15
     d68:	ef 90       	pop	r14
     d6a:	df 90       	pop	r13
     d6c:	cf 90       	pop	r12
     d6e:	bf 90       	pop	r11
     d70:	af 90       	pop	r10
     d72:	08 95       	ret

00000d74 <serial_print_string>:
	}
	serial_print_string("END");
	}
}

void serial_print_string(char msg[]){
     d74:	68 2f       	mov	r22, r24
	serial_send_blocking(USB_COMM, msg, strlen(msg));
     d76:	e8 2f       	mov	r30, r24
     d78:	f9 2f       	mov	r31, r25
     d7a:	df 01       	movw	r26, r30
     d7c:	0d 90       	ld	r0, X+
     d7e:	00 20       	and	r0, r0
     d80:	e9 f7       	brne	.-6      	; 0xd7c <serial_print_string+0x8>
     d82:	11 97       	sbiw	r26, 0x01	; 1
     d84:	ae 1b       	sub	r26, r30
     d86:	bf 0b       	sbc	r27, r31
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	79 2f       	mov	r23, r25
     d8c:	4a 2f       	mov	r20, r26
     d8e:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <serial_send_blocking>
	serial_send_blocking(USB_COMM, "\r\n", 2);
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	71 e0       	ldi	r23, 0x01	; 1
     d98:	42 e0       	ldi	r20, 0x02	; 2
     d9a:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <serial_send_blocking>
}
     d9e:	08 95       	ret

00000da0 <init_action>:
	i2c_write(u_outputByte0.outputByte0);
	i2c_write(u_outputByte1.outputByte1);
	i2c_stop();
}

void init_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor, bool *pprint0){
     da0:	af 92       	push	r10
     da2:	bf 92       	push	r11
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	ea 01       	movw	r28, r20
     daa:	f9 01       	movw	r30, r18
	switch(state){
     dac:	83 30       	cpi	r24, 0x03	; 3
     dae:	91 05       	cpc	r25, r1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <init_action+0x14>
     db2:	65 c0       	rjmp	.+202    	; 0xe7e <init_action+0xde>
     db4:	84 30       	cpi	r24, 0x04	; 4
     db6:	91 05       	cpc	r25, r1
     db8:	54 f4       	brge	.+20     	; 0xdce <init_action+0x2e>
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	91 05       	cpc	r25, r1
     dbe:	e1 f1       	breq	.+120    	; 0xe38 <init_action+0x98>
     dc0:	82 30       	cpi	r24, 0x02	; 2
     dc2:	91 05       	cpc	r25, r1
     dc4:	0c f0       	brlt	.+2      	; 0xdc8 <init_action+0x28>
     dc6:	4b c0       	rjmp	.+150    	; 0xe5e <init_action+0xbe>
     dc8:	89 2b       	or	r24, r25
     dca:	89 f0       	breq	.+34     	; 0xdee <init_action+0x4e>
     dcc:	86 c0       	rjmp	.+268    	; 0xeda <init_action+0x13a>
     dce:	85 30       	cpi	r24, 0x05	; 5
     dd0:	91 05       	cpc	r25, r1
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <init_action+0x36>
     dd4:	61 c0       	rjmp	.+194    	; 0xe98 <init_action+0xf8>
     dd6:	85 30       	cpi	r24, 0x05	; 5
     dd8:	91 05       	cpc	r25, r1
     dda:	0c f4       	brge	.+2      	; 0xdde <init_action+0x3e>
     ddc:	5d c0       	rjmp	.+186    	; 0xe98 <init_action+0xf8>
     dde:	86 30       	cpi	r24, 0x06	; 6
     de0:	91 05       	cpc	r25, r1
     de2:	09 f4       	brne	.+2      	; 0xde6 <init_action+0x46>
     de4:	63 c0       	rjmp	.+198    	; 0xeac <init_action+0x10c>
     de6:	07 97       	sbiw	r24, 0x07	; 7
     de8:	09 f0       	breq	.+2      	; 0xdec <init_action+0x4c>
     dea:	77 c0       	rjmp	.+238    	; 0xeda <init_action+0x13a>
     dec:	6c c0       	rjmp	.+216    	; 0xec6 <init_action+0x126>
		case INIT:
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
     dee:	80 91 5c 04 	lds	r24, 0x045C
     df2:	90 91 61 04 	lds	r25, 0x0461
     df6:	81 ff       	sbrs	r24, 1
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <init_action+0x62>
				u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
     dfa:	9f 7e       	andi	r25, 0xEF	; 239
     dfc:	90 93 61 04 	sts	0x0461, r25
     e00:	6c c0       	rjmp	.+216    	; 0xeda <init_action+0x13a>
				//u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
			}
			else{
				u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     e02:	9f 7d       	andi	r25, 0xDF	; 223
     e04:	90 93 61 04 	sts	0x0461, r25
				*pfixtureMotor = 0;
     e08:	11 82       	std	Z+1, r1	; 0x01
     e0a:	10 82       	st	Z, r1
				u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     e0c:	80 91 60 04 	lds	r24, 0x0460
     e10:	8f 7e       	andi	r24, 0xEF	; 239
				u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     e12:	88 60       	ori	r24, 0x08	; 8
     e14:	80 93 60 04 	sts	0x0460, r24
				if(*pprint0 == 1){
     e18:	f5 01       	movw	r30, r10
     e1a:	80 81       	ld	r24, Z
     e1c:	88 23       	and	r24, r24
     e1e:	09 f4       	brne	.+2      	; 0xe22 <init_action+0x82>
     e20:	5c c0       	rjmp	.+184    	; 0xeda <init_action+0x13a>
					lcd_goto_xy(0,1);
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
					serial_print_string("PUSH TO START");
     e2a:	83 e0       	ldi	r24, 0x03	; 3
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
					*pprint0 = 0;
     e32:	f5 01       	movw	r30, r10
     e34:	10 82       	st	Z, r1
     e36:	51 c0       	rjmp	.+162    	; 0xeda <init_action+0x13a>
				}
			}
			break;
		case LOAD:
			u_outputByte0.bits_in_outputByte0.ACPower = 0;
     e38:	20 91 60 04 	lds	r18, 0x0460
     e3c:	32 2f       	mov	r19, r18
     e3e:	3e 7f       	andi	r19, 0xFE	; 254
			if((counter % 200) < 100){
     e40:	cb 01       	movw	r24, r22
     e42:	68 ec       	ldi	r22, 0xC8	; 200
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	0e 94 01 20 	call	0x4002	; 0x4002 <__divmodhi4>
     e4a:	84 36       	cpi	r24, 0x64	; 100
     e4c:	91 05       	cpc	r25, r1
     e4e:	24 f4       	brge	.+8      	; 0xe58 <init_action+0xb8>
				u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     e50:	2c 7f       	andi	r18, 0xFC	; 252
     e52:	20 93 60 04 	sts	0x0460, r18
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <init_action+0xbe>
			}
			else{
				u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     e58:	32 60       	ori	r19, 0x02	; 2
     e5a:	30 93 60 04 	sts	0x0460, r19
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
			break;
		case LOADEXTRA:
			*pplateLoadMotor = 1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	99 83       	std	Y+1, r25	; 0x01
     e64:	88 83       	st	Y, r24
			*pfixtureMotor = 0;
     e66:	11 82       	std	Z+1, r1	; 0x01
     e68:	10 82       	st	Z, r1
			
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
     e6a:	80 91 61 04 	lds	r24, 0x0461
     e6e:	8d 7f       	andi	r24, 0xFD	; 253
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     e70:	84 60       	ori	r24, 0x04	; 4
     e72:	80 93 61 04 	sts	0x0461, r24
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
     e76:	80 91 60 04 	lds	r24, 0x0460
     e7a:	8b 7f       	andi	r24, 0xFB	; 251
     e7c:	21 c0       	rjmp	.+66     	; 0xec0 <init_action+0x120>
			break;
		case RAISEL1:
			u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     e7e:	80 91 60 04 	lds	r24, 0x0460
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     e82:	81 7e       	andi	r24, 0xE1	; 225
			u_outputByte0.bits_in_outputByte0.plateStop = 1;
     e84:	86 61       	ori	r24, 0x16	; 22
     e86:	80 93 60 04 	sts	0x0460, r24
			*pplateLoadMotor = 0;
     e8a:	19 82       	std	Y+1, r1	; 0x01
     e8c:	18 82       	st	Y, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     e8e:	80 91 61 04 	lds	r24, 0x0461
     e92:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
     e94:	8b 7f       	andi	r24, 0xFB	; 251
     e96:	1f c0       	rjmp	.+62     	; 0xed6 <init_action+0x136>
		case FIXL:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case FIXLEXTRA:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
     e98:	80 91 61 04 	lds	r24, 0x0461
     e9c:	80 61       	ori	r24, 0x10	; 16
     e9e:	80 93 61 04 	sts	0x0461, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	91 83       	std	Z+1, r25	; 0x01
     ea8:	80 83       	st	Z, r24
     eaa:	12 c0       	rjmp	.+36     	; 0xed0 <init_action+0x130>
			break;
		case LOWERL1:
			*pfixtureMotor = 0;
     eac:	11 82       	std	Z+1, r1	; 0x01
     eae:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     eb0:	80 91 61 04 	lds	r24, 0x0461
     eb4:	8f 7d       	andi	r24, 0xDF	; 223
     eb6:	80 93 61 04 	sts	0x0461, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     eba:	80 91 60 04 	lds	r24, 0x0460
     ebe:	88 60       	ori	r24, 0x08	; 8
     ec0:	80 93 60 04 	sts	0x0460, r24
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <init_action+0x13a>
			break;
		case LOWERL2:
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     ec6:	80 91 60 04 	lds	r24, 0x0460
     eca:	8f 7e       	andi	r24, 0xEF	; 239
     ecc:	80 93 60 04 	sts	0x0460, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     ed0:	80 91 61 04 	lds	r24, 0x0461
     ed4:	80 62       	ori	r24, 0x20	; 32
     ed6:	80 93 61 04 	sts	0x0461, r24
			break;
		//*********************************************
	}
}
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	bf 90       	pop	r11
     ee0:	af 90       	pop	r10
     ee2:	08 95       	ret

00000ee4 <serial_print_int>:
void serial_print_string(char msg[]){
	serial_send_blocking(USB_COMM, msg, strlen(msg));
	serial_send_blocking(USB_COMM, "\r\n", 2);
}

void serial_print_int(int a){
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	00 d0       	rcall	.+0      	; 0xeee <serial_print_int+0xa>
     eee:	00 d0       	rcall	.+0      	; 0xef0 <serial_print_int+0xc>
     ef0:	0f 92       	push	r0
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	char msg[5];
	itoa(a, msg, 10);
     ef6:	8e 01       	movw	r16, r28
     ef8:	0f 5f       	subi	r16, 0xFF	; 255
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	b8 01       	movw	r22, r16
     efe:	4a e0       	ldi	r20, 0x0A	; 10
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	0e 94 86 21 	call	0x430c	; 0x430c <itoa>
	serial_print_string(msg);
     f06:	c8 01       	movw	r24, r16
     f08:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
}
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	08 95       	ret

00000f20 <main>:
void serial_print_string(char msg[]);

void serial_print_int(int a);

int main()   
{
     f20:	2f 92       	push	r2
     f22:	3f 92       	push	r3
     f24:	4f 92       	push	r4
     f26:	5f 92       	push	r5
     f28:	6f 92       	push	r6
     f2a:	7f 92       	push	r7
     f2c:	8f 92       	push	r8
     f2e:	9f 92       	push	r9
     f30:	af 92       	push	r10
     f32:	bf 92       	push	r11
     f34:	cf 92       	push	r12
     f36:	df 92       	push	r13
     f38:	ef 92       	push	r14
     f3a:	ff 92       	push	r15
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	62 97       	sbiw	r28, 0x12	; 18
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently

	bool buttonTriggered = false;	//buttonTriggered is false if it hasn't been triggered, true if it has;
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
	
	fixtureMotorSmallHalfPlate *= stepFactor;
     f54:	80 91 e3 03 	lds	r24, 0x03E3
     f58:	90 91 e4 03 	lds	r25, 0x03E4
     f5c:	20 91 e1 03 	lds	r18, 0x03E1
     f60:	30 91 e2 03 	lds	r19, 0x03E2
     f64:	ac 01       	movw	r20, r24
     f66:	42 9f       	mul	r20, r18
     f68:	c0 01       	movw	r24, r0
     f6a:	43 9f       	mul	r20, r19
     f6c:	90 0d       	add	r25, r0
     f6e:	52 9f       	mul	r21, r18
     f70:	90 0d       	add	r25, r0
     f72:	11 24       	eor	r1, r1
     f74:	90 93 e4 03 	sts	0x03E4, r25
     f78:	80 93 e3 03 	sts	0x03E3, r24
	fixtureMotorBigHalfPlate *= stepFactor;
     f7c:	80 91 e5 03 	lds	r24, 0x03E5
     f80:	90 91 e6 03 	lds	r25, 0x03E6
     f84:	ac 01       	movw	r20, r24
     f86:	42 9f       	mul	r20, r18
     f88:	c0 01       	movw	r24, r0
     f8a:	43 9f       	mul	r20, r19
     f8c:	90 0d       	add	r25, r0
     f8e:	52 9f       	mul	r21, r18
     f90:	90 0d       	add	r25, r0
     f92:	11 24       	eor	r1, r1
     f94:	90 93 e6 03 	sts	0x03E6, r25
     f98:	80 93 e5 03 	sts	0x03E5, r24
	fixtureMotorDry *= stepFactor;
     f9c:	80 91 e7 03 	lds	r24, 0x03E7
     fa0:	90 91 e8 03 	lds	r25, 0x03E8
     fa4:	ac 01       	movw	r20, r24
     fa6:	42 9f       	mul	r20, r18
     fa8:	c0 01       	movw	r24, r0
     faa:	43 9f       	mul	r20, r19
     fac:	90 0d       	add	r25, r0
     fae:	52 9f       	mul	r21, r18
     fb0:	90 0d       	add	r25, r0
     fb2:	11 24       	eor	r1, r1
     fb4:	90 93 e8 03 	sts	0x03E8, r25
     fb8:	80 93 e7 03 	sts	0x03E7, r24
	plateLoadMotorLoadPlate *= stepFactor;
     fbc:	80 91 e9 03 	lds	r24, 0x03E9
     fc0:	90 91 ea 03 	lds	r25, 0x03EA
     fc4:	ac 01       	movw	r20, r24
     fc6:	42 9f       	mul	r20, r18
     fc8:	c0 01       	movw	r24, r0
     fca:	43 9f       	mul	r20, r19
     fcc:	90 0d       	add	r25, r0
     fce:	52 9f       	mul	r21, r18
     fd0:	90 0d       	add	r25, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	90 93 ea 03 	sts	0x03EA, r25
     fd8:	80 93 e9 03 	sts	0x03E9, r24
	plateLoadExtra *= stepFactor;
     fdc:	80 91 eb 03 	lds	r24, 0x03EB
     fe0:	90 91 ec 03 	lds	r25, 0x03EC
     fe4:	ac 01       	movw	r20, r24
     fe6:	42 9f       	mul	r20, r18
     fe8:	c0 01       	movw	r24, r0
     fea:	43 9f       	mul	r20, r19
     fec:	90 0d       	add	r25, r0
     fee:	52 9f       	mul	r21, r18
     ff0:	90 0d       	add	r25, r0
     ff2:	11 24       	eor	r1, r1
     ff4:	90 93 ec 03 	sts	0x03EC, r25
     ff8:	80 93 eb 03 	sts	0x03EB, r24
	fixtureLiftExtra *= stepFactor;
     ffc:	80 91 ed 03 	lds	r24, 0x03ED
    1000:	90 91 ee 03 	lds	r25, 0x03EE
    1004:	ac 01       	movw	r20, r24
    1006:	42 9f       	mul	r20, r18
    1008:	c0 01       	movw	r24, r0
    100a:	43 9f       	mul	r20, r19
    100c:	90 0d       	add	r25, r0
    100e:	52 9f       	mul	r21, r18
    1010:	90 0d       	add	r25, r0
    1012:	11 24       	eor	r1, r1
    1014:	90 93 ee 03 	sts	0x03EE, r25
    1018:	80 93 ed 03 	sts	0x03ED, r24
	fixtureLift2Extra *= stepFactor;
    101c:	80 91 f3 03 	lds	r24, 0x03F3
    1020:	90 91 f4 03 	lds	r25, 0x03F4
    1024:	ac 01       	movw	r20, r24
    1026:	42 9f       	mul	r20, r18
    1028:	c0 01       	movw	r24, r0
    102a:	43 9f       	mul	r20, r19
    102c:	90 0d       	add	r25, r0
    102e:	52 9f       	mul	r21, r18
    1030:	90 0d       	add	r25, r0
    1032:	11 24       	eor	r1, r1
    1034:	90 93 f4 03 	sts	0x03F4, r25
    1038:	80 93 f3 03 	sts	0x03F3, r24
	fixtureMotorDry1Extra *= stepFactor;
    103c:	80 91 ef 03 	lds	r24, 0x03EF
    1040:	90 91 f0 03 	lds	r25, 0x03F0
    1044:	ac 01       	movw	r20, r24
    1046:	42 9f       	mul	r20, r18
    1048:	c0 01       	movw	r24, r0
    104a:	43 9f       	mul	r20, r19
    104c:	90 0d       	add	r25, r0
    104e:	52 9f       	mul	r21, r18
    1050:	90 0d       	add	r25, r0
    1052:	11 24       	eor	r1, r1
    1054:	90 93 f0 03 	sts	0x03F0, r25
    1058:	80 93 ef 03 	sts	0x03EF, r24
	fixtureMotorDry2Step *= stepFactor;
    105c:	80 91 f1 03 	lds	r24, 0x03F1
    1060:	90 91 f2 03 	lds	r25, 0x03F2
    1064:	ac 01       	movw	r20, r24
    1066:	42 9f       	mul	r20, r18
    1068:	c0 01       	movw	r24, r0
    106a:	43 9f       	mul	r20, r19
    106c:	90 0d       	add	r25, r0
    106e:	52 9f       	mul	r21, r18
    1070:	90 0d       	add	r25, r0
    1072:	11 24       	eor	r1, r1
    1074:	90 93 f2 03 	sts	0x03F2, r25
    1078:	80 93 f1 03 	sts	0x03F1, r24
    107c:	1e 86       	std	Y+14, r1	; 0x0e
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	9f ef       	ldi	r25, 0xFF	; 255
    1082:	98 8b       	std	Y+16, r25	; 0x10
    1084:	8f 87       	std	Y+15, r24	; 0x0f
    
	while(1){						//Repeats the entire program indefinitely (runs maintenance or normal each time)

							//mx holds whether motor x should move: 0 = no, 1 = yes
	plateLoadMotor = 0;		//plate load motor
    1086:	1b 82       	std	Y+3, r1	; 0x03
    1088:	1a 82       	std	Y+2, r1	; 0x02
	fixtureMotor = 0;		//fixture motor
    108a:	1d 82       	std	Y+5, r1	; 0x05
    108c:	1c 82       	std	Y+4, r1	; 0x04
	brush1Motor = 0;		//brush 1 motor
    108e:	1f 82       	std	Y+7, r1	; 0x07
    1090:	1e 82       	std	Y+6, r1	; 0x06
	brush2Motor = 0;		//brush 2 motor
    1092:	19 86       	std	Y+9, r1	; 0x09
    1094:	18 86       	std	Y+8, r1	; 0x08
	paperTowelMotor = 0; 	//paper towel roller motor
    1096:	1b 86       	std	Y+11, r1	; 0x0b
    1098:	1a 86       	std	Y+10, r1	; 0x0a
	//various reference points used by the program to tell how long since an event has occurred
	//the ones with numbers correspond to run mode states, and Five refers to motor 5 (paper towel roller)
	counterRef = 0;
	
	//hold whether or not statements have been printed yet (numbers refer to run mode states)
	print0 = true;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	89 83       	std	Y+1, r24	; 0x01
	print35 = true;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been de-bounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
    109e:	1d 86       	std	Y+13, r1	; 0x0d
    10a0:	1c 86       	std	Y+12, r1	; 0x0c
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
    10a2:	10 92 61 04 	sts	0x0461, r1
	u_motorByte1.motorByte1 = 128;  // initialize motorByte1              **********1 or 128, depending on order**********
    10a6:	80 e8       	ldi	r24, 0x80	; 128
    10a8:	80 93 5d 04 	sts	0x045D, r24
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
    10ac:	8f ef       	ldi	r24, 0xFF	; 255
    10ae:	80 93 60 04 	sts	0x0460, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
    10b2:	80 93 5e 04 	sts	0x045E, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
    10b6:	10 92 5c 04 	sts	0x045C, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
    10ba:	10 92 5f 04 	sts	0x045F, r1
	
	//clear();
	serial_print_string("DASCH CLEANER 2c");
    10be:	81 e1       	ldi	r24, 0x11	; 17
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
	lcd_goto_xy(0,1);
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
	serial_print_string("REV: 43");
    10ce:	82 e2       	ldi	r24, 0x22	; 34
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
	delay_ms(2000);
    10d6:	80 ed       	ldi	r24, 0xD0	; 208
    10d8:	97 e0       	ldi	r25, 0x07	; 7
    10da:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>
	
	//clear();
	serial_print_string("BEGIN ");
    10de:	8a e2       	ldi	r24, 0x2A	; 42
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
	
	delay_ms(1000);
    10e6:	88 ee       	ldi	r24, 0xE8	; 232
    10e8:	93 e0       	ldi	r25, 0x03	; 3
    10ea:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>

    i2c_init();                                // init I2C interface
    10ee:	0e 94 93 00 	call	0x126	; 0x126 <i2c_init>
	
    serial_print_string("INIT ");
    10f2:	81 e3       	ldi	r24, 0x31	; 49
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
    10fa:	80 e4       	ldi	r24, 0x40	; 64
    10fc:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    1100:	f8 2e       	mov	r15, r24
	i2c_stop();	
    1102:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
    1106:	82 e4       	ldi	r24, 0x42	; 66
    1108:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    110c:	18 2f       	mov	r17, r24
	i2c_stop();
    110e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
    1112:	84 e4       	ldi	r24, 0x44	; 68
    1114:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    1118:	08 2f       	mov	r16, r24
	i2c_stop();
    111a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	
	if (ret1)
    111e:	ff 20       	and	r15, r15
    1120:	19 f0       	breq	.+6      	; 0x1128 <main+0x208>
		serial_print_string("I2C1 DOWN ");
    1122:	87 e3       	ldi	r24, 0x37	; 55
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	02 c0       	rjmp	.+4      	; 0x112c <main+0x20c>
	else
		serial_print_string("I2C1 UP");
    1128:	82 e4       	ldi	r24, 0x42	; 66
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
	if (ret2)
    1130:	11 23       	and	r17, r17
    1132:	19 f0       	breq	.+6      	; 0x113a <main+0x21a>
		serial_print_string("I2C2 DOWN ");
    1134:	8a e4       	ldi	r24, 0x4A	; 74
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	02 c0       	rjmp	.+4      	; 0x113e <main+0x21e>
	else
		serial_print_string("I2C2 UP");
    113a:	85 e5       	ldi	r24, 0x55	; 85
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
	if (ret3)
    1142:	00 23       	and	r16, r16
    1144:	19 f0       	breq	.+6      	; 0x114c <main+0x22c>
		serial_print_string("I2C3 DOWN ");
    1146:	8d e5       	ldi	r24, 0x5D	; 93
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <main+0x230>
	else
		serial_print_string("I2C3 UP");
    114c:	88 e6       	ldi	r24, 0x68	; 104
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
    
	//clear();
	serial_print_string("START ");
    1154:	80 e7       	ldi	r24, 0x70	; 112
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
    115c:	1f 29       	or	r17, r15
    115e:	10 2b       	or	r17, r16
    1160:	61 f0       	breq	.+24     	; 0x117a <main+0x25a>
        /* failed to issue start condition(s), possibly no device found */
        
		serial_print_string("I2C BAD ");
    1162:	87 e7       	ldi	r24, 0x77	; 119
    1164:	91 e0       	ldi	r25, 0x01	; 1
    1166:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
		i2c_stop();
    116a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
		serial_print_string("STOP PROG ");
    116e:	80 e8       	ldi	r24, 0x80	; 128
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
    1176:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <main+0x17a2>
    }
	else {
		serial_print_string("I2C OK ");
    117a:	8b e8       	ldi	r24, 0x8B	; 139
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
        /* issuing start conditions ok, devices accessible */
		serial_print_string("BINIT ");
    1182:	83 e9       	ldi	r24, 0x93	; 147
    1184:	91 e0       	ldi	r25, 0x01	; 1
    1186:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
    118a:	80 e4       	ldi	r24, 0x40	; 64
    118c:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x6);
    1190:	86 e0       	ldi	r24, 0x06	; 6
    1192:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    11a2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C1+I2C_WRITE);
    11a6:	80 e4       	ldi	r24, 0x40	; 64
    11a8:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    11b2:	80 91 61 04 	lds	r24, 0x0461
    11b6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    11ba:	80 91 5d 04 	lds	r24, 0x045D
    11be:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    11c2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
    11c6:	82 e4       	ldi	r24, 0x42	; 66
    11c8:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x6);
    11cc:	86 e0       	ldi	r24, 0x06	; 6
    11ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    11de:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);
    11e2:	82 e4       	ldi	r24, 0x42	; 66
    11e4:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_outputByte0.outputByte0);
    11ee:	80 91 60 04 	lds	r24, 0x0460
    11f2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_outputByte1.outputByte1);
    11f6:	80 91 5e 04 	lds	r24, 0x045E
    11fa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    11fe:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		//Registers default to input, so I2C3 is fine already

		u_motorByte1.bits_in_motorByte1.enableAll = 0;	//Enables all motor drivers after startup
    1202:	80 91 5d 04 	lds	r24, 0x045D
    1206:	8f 77       	andi	r24, 0x7F	; 127
    1208:	80 93 5d 04 	sts	0x045D, r24
		i2c_start(I2C1+I2C_WRITE);
    120c:	80 e4       	ldi	r24, 0x40	; 64
    120e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    1218:	80 91 61 04 	lds	r24, 0x0461
    121c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    1220:	80 91 5d 04 	lds	r24, 0x045D
    1224:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1228:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>


		delay_ms(1000);
    122c:	88 ee       	ldi	r24, 0xE8	; 232
    122e:	93 e0       	ldi	r25, 0x03	; 3
    1230:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
    1234:	8a e9       	ldi	r24, 0x9A	; 154
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
		int selection = !is_digital_input_high(IO_D3);
    123c:	83 e0       	ldi	r24, 0x03	; 3
    123e:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1242:	00 e0       	ldi	r16, 0x00	; 0
    1244:	10 e0       	ldi	r17, 0x00	; 0
    1246:	88 23       	and	r24, r24
    1248:	11 f4       	brne	.+4      	; 0x124e <main+0x32e>
    124a:	01 e0       	ldi	r16, 0x01	; 1
    124c:	10 e0       	ldi	r17, 0x00	; 0
    124e:	ee 24       	eor	r14, r14
    1250:	ff 24       	eor	r15, r15
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			if(selection != is_digital_input_high(IO_D3)){
    1252:	83 e0       	ldi	r24, 0x03	; 3
    1254:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	08 17       	cp	r16, r24
    125c:	19 07       	cpc	r17, r25
    125e:	49 f0       	breq	.+18     	; 0x1272 <main+0x352>
				if(!selection){
    1260:	01 2b       	or	r16, r17
    1262:	19 f4       	brne	.+6      	; 0x126a <main+0x34a>
					serial_print_string("DEBUG");
    1264:	8a ea       	ldi	r24, 0xAA	; 170
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	02 c0       	rjmp	.+4      	; 0x126e <main+0x34e>
				}
				else{
					serial_print_string("RUN");
    126a:	80 eb       	ldi	r24, 0xB0	; 176
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
				}
			}
			selection = is_digital_input_high(IO_D3);
    1272:	83 e0       	ldi	r24, 0x03	; 3
    1274:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1278:	08 2f       	mov	r16, r24
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    127a:	c7 01       	movw	r24, r14
    127c:	be 01       	movw	r22, r28
    127e:	64 5f       	subi	r22, 0xF4	; 244
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	0e 94 39 03 	call	0x672	; 0x672 <button_debounce>
    1286:	18 2f       	mov	r17, r24
			serial_check(); counter++;
    1288:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <serial_check>
			delay_ms(1);
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
		int selection = !is_digital_input_high(IO_D3);
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1294:	11 23       	and	r17, r17
    1296:	29 f4       	brne	.+10     	; 0x12a2 <main+0x382>
				}
				else{
					serial_print_string("RUN");
				}
			}
			selection = is_digital_input_high(IO_D3);
    1298:	10 e0       	ldi	r17, 0x00	; 0
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
			serial_check(); counter++;
    129a:	08 94       	sec
    129c:	e1 1c       	adc	r14, r1
    129e:	f1 1c       	adc	r15, r1
    12a0:	d8 cf       	rjmp	.-80     	; 0x1252 <main+0x332>
		buttonTriggered = false;
		counter = 0;
		//clear();


		if(is_digital_input_high(IO_D3))							//Tests if the switch is set to Maintenance Mode
    12a2:	83 e0       	ldi	r24, 0x03	; 3
    12a4:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    12a8:	88 23       	and	r24, r24
    12aa:	09 f4       	brne	.+2      	; 0x12ae <main+0x38e>
    12ac:	30 c4       	rjmp	.+2144   	; 0x1b0e <main+0xbee>
		{
			serial_print_string("DEBUG");
    12ae:	8a ea       	ldi	r24, 0xAA	; 170
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
			delay_ms(1000);
    12b6:	88 ee       	ldi	r24, 0xE8	; 232
    12b8:	93 e0       	ldi	r25, 0x03	; 3
    12ba:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>
    12be:	bb 24       	eor	r11, r11
    12c0:	b3 94       	inc	r11
    12c2:	22 24       	eor	r2, r2
    12c4:	2a 94       	dec	r2
    12c6:	32 2c       	mov	r3, r2
    12c8:	88 24       	eor	r8, r8
    12ca:	99 24       	eor	r9, r9
    12cc:	66 24       	eor	r6, r6
    12ce:	77 24       	eor	r7, r7
    12d0:	44 24       	eor	r4, r4
    12d2:	55 24       	eor	r5, r5
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    12d4:	84 e4       	ldi	r24, 0x44	; 68
    12d6:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    12e0:	85 e4       	ldi	r24, 0x45	; 69
    12e2:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    12e6:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    12ea:	80 93 5c 04 	sts	0x045C, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    12ee:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    12f2:	80 93 5f 04 	sts	0x045F, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    12f6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    12fa:	c3 01       	movw	r24, r6
    12fc:	be 01       	movw	r22, r28
    12fe:	64 5f       	subi	r22, 0xF4	; 244
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	0e 94 39 03 	call	0x672	; 0x672 <button_debounce>
    1306:	18 2f       	mov	r17, r24
							Output 			--     starts testing each output individually and ends after testing all outputs
							Motor			--     starts testing each motor individually and ends after testing all motors
							Multi motor		--     starts testing each the fixture motor with each of the brush motors

				*/
				if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != INPUT){
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    130e:	88 23       	and	r24, r24
    1310:	c1 f4       	brne	.+48     	; 0x1342 <main+0x422>
    1312:	82 e0       	ldi	r24, 0x02	; 2
    1314:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1318:	88 23       	and	r24, r24
    131a:	99 f4       	brne	.+38     	; 0x1342 <main+0x422>
    131c:	21 14       	cp	r2, r1
    131e:	31 04       	cpc	r3, r1
    1320:	81 f0       	breq	.+32     	; 0x1342 <main+0x422>
					state = S0;
					submode = INPUT;
					//clear();
					serial_print_string("INPUTS ");
    1322:	84 eb       	ldi	r24, 0xB4	; 180
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
					lcd_goto_xy(0,1);
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	61 e0       	ldi	r22, 0x01	; 1
    132e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
    1332:	91 e0       	ldi	r25, 0x01	; 1
    1334:	9e 87       	std	Y+14, r25	; 0x0e
    1336:	bb 24       	eor	r11, r11
    1338:	b3 94       	inc	r11
    133a:	22 24       	eor	r2, r2
    133c:	33 24       	eor	r3, r3
    133e:	88 24       	eor	r8, r8
    1340:	99 24       	eor	r9, r9
					printVar = true;
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != OUTPUT){
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1348:	88 23       	and	r24, r24
    134a:	d9 f0       	breq	.+54     	; 0x1382 <main+0x462>
    134c:	82 e0       	ldi	r24, 0x02	; 2
    134e:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1352:	88 23       	and	r24, r24
    1354:	b1 f4       	brne	.+44     	; 0x1382 <main+0x462>
    1356:	21 e0       	ldi	r18, 0x01	; 1
    1358:	22 16       	cp	r2, r18
    135a:	31 04       	cpc	r3, r1
    135c:	91 f0       	breq	.+36     	; 0x1382 <main+0x462>
					state = O0_ON;
					submode = OUTPUT;
					//clear();
					serial_print_string("OUTPUTS");
    135e:	8c eb       	ldi	r24, 0xBC	; 188
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
					lcd_goto_xy(0,1);
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	61 e0       	ldi	r22, 0x01	; 1
    136a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
    136e:	31 e0       	ldi	r19, 0x01	; 1
    1370:	3e 87       	std	Y+14, r19	; 0x0e
    1372:	bb 24       	eor	r11, r11
    1374:	b3 94       	inc	r11
    1376:	a1 e0       	ldi	r26, 0x01	; 1
    1378:	2a 2e       	mov	r2, r26
    137a:	31 2c       	mov	r3, r1
    137c:	f8 e0       	ldi	r31, 0x08	; 8
    137e:	8f 2e       	mov	r8, r31
    1380:	91 2c       	mov	r9, r1
					printVar = true;
					switched = true;
				}
				if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MOTOR){
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1388:	88 23       	and	r24, r24
    138a:	01 f5       	brne	.+64     	; 0x13cc <main+0x4ac>
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1392:	88 23       	and	r24, r24
    1394:	d9 f0       	breq	.+54     	; 0x13cc <main+0x4ac>
    1396:	42 e0       	ldi	r20, 0x02	; 2
    1398:	24 16       	cp	r2, r20
    139a:	31 04       	cpc	r3, r1
    139c:	b9 f0       	breq	.+46     	; 0x13cc <main+0x4ac>
					state = M1_F;
					submode = MOTOR;
					//clear();
					serial_print_string("MOTORS ");
    139e:	84 ec       	ldi	r24, 0xC4	; 196
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
					lcd_goto_xy(0,1);
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	61 e0       	ldi	r22, 0x01	; 1
    13aa:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    13ae:	80 91 61 04 	lds	r24, 0x0461
    13b2:	84 60       	ori	r24, 0x04	; 4
    13b4:	80 93 61 04 	sts	0x0461, r24
    13b8:	51 e0       	ldi	r21, 0x01	; 1
    13ba:	5e 87       	std	Y+14, r21	; 0x0e
    13bc:	bb 24       	eor	r11, r11
    13be:	b3 94       	inc	r11
    13c0:	e2 e0       	ldi	r30, 0x02	; 2
    13c2:	2e 2e       	mov	r2, r30
    13c4:	31 2c       	mov	r3, r1
    13c6:	70 e2       	ldi	r23, 0x20	; 32
    13c8:	87 2e       	mov	r8, r23
    13ca:	91 2c       	mov	r9, r1
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MULTI){
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    13d2:	88 23       	and	r24, r24
    13d4:	21 f1       	breq	.+72     	; 0x141e <main+0x4fe>
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    13dc:	88 23       	and	r24, r24
    13de:	f9 f0       	breq	.+62     	; 0x141e <main+0x4fe>
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	28 16       	cp	r2, r24
    13e4:	31 04       	cpc	r3, r1
    13e6:	d9 f0       	breq	.+54     	; 0x141e <main+0x4fe>
					state = M2_AND_M3;
					submode = MULTI;
					//clear();
					serial_print_string("MULTI MOTOR");
    13e8:	8c ec       	ldi	r24, 0xCC	; 204
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
					lcd_goto_xy(0,1);
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	61 e0       	ldi	r22, 0x01	; 1
    13f4:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    13f8:	80 91 61 04 	lds	r24, 0x0461
    13fc:	80 62       	ori	r24, 0x20	; 32
    13fe:	80 93 61 04 	sts	0x0461, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    1402:	80 91 5d 04 	lds	r24, 0x045D
    1406:	81 60       	ori	r24, 0x01	; 1
    1408:	80 93 5d 04 	sts	0x045D, r24
    140c:	bb 24       	eor	r11, r11
    140e:	b3 94       	inc	r11
    1410:	63 e0       	ldi	r22, 0x03	; 3
    1412:	26 2e       	mov	r2, r22
    1414:	31 2c       	mov	r3, r1
    1416:	5a e2       	ldi	r21, 0x2A	; 42
    1418:	85 2e       	mov	r8, r21
    141a:	91 2c       	mov	r9, r1
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <main+0x504>
					switched = true;
				}
				if(switched){
    141e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1420:	99 23       	and	r25, r25
    1422:	c1 f0       	breq	.+48     	; 0x1454 <main+0x534>
					plateLoadMotor = 0;
    1424:	1b 82       	std	Y+3, r1	; 0x03
    1426:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    1428:	1d 82       	std	Y+5, r1	; 0x05
    142a:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    142c:	1f 82       	std	Y+7, r1	; 0x07
    142e:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    1430:	19 86       	std	Y+9, r1	; 0x09
    1432:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    1434:	1b 86       	std	Y+11, r1	; 0x0b
    1436:	1a 86       	std	Y+10, r1	; 0x0a
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
    1438:	8f ef       	ldi	r24, 0xFF	; 255
    143a:	80 93 60 04 	sts	0x0460, r24
					u_outputByte1.outputByte1 = 255;  // reset outputByte1
    143e:	80 93 5e 04 	sts	0x045E, r24
					if(submode != MOTOR && submode != MULTI){
    1442:	c1 01       	movw	r24, r2
    1444:	02 97       	sbiw	r24, 0x02	; 2
    1446:	02 97       	sbiw	r24, 0x02	; 2
    1448:	20 f0       	brcs	.+8      	; 0x1452 <main+0x532>
						u_motorByte0.motorByte0 = 0;	  // reset motorByte0
    144a:	10 92 61 04 	sts	0x0461, r1
						u_motorByte1.motorByte1 = 0;	  // reset motorByte1
    144e:	10 92 5d 04 	sts	0x045D, r1
    1452:	1e 86       	std	Y+14, r1	; 0x0e
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
    1454:	11 23       	and	r17, r17
    1456:	09 f4       	brne	.+2      	; 0x145a <main+0x53a>
    1458:	c8 c0       	rjmp	.+400    	; 0x15ea <main+0x6ca>
					if(state <= S7){				//if it's doing the sensors
    145a:	28 e0       	ldi	r18, 0x08	; 8
    145c:	82 16       	cp	r8, r18
    145e:	91 04       	cpc	r9, r1
    1460:	74 f4       	brge	.+28     	; 0x147e <main+0x55e>
						lastVal = -1;
						lcd_goto_xy(0,1);
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	61 e0       	ldi	r22, 0x01	; 1
    1466:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
						buttonTriggered = false;
						state ++;
    146a:	08 94       	sec
    146c:	81 1c       	adc	r8, r1
    146e:	91 1c       	adc	r9, r1
						counterRef = counter;
						printVar = true;
						if(state == S7 + 1){		//accounts for end of maintenance mode after sensors
    1470:	38 e0       	ldi	r19, 0x08	; 8
    1472:	83 16       	cp	r8, r19
    1474:	91 04       	cpc	r9, r1
    1476:	09 f0       	breq	.+2      	; 0x147a <main+0x55a>
    1478:	ad c0       	rjmp	.+346    	; 0x15d4 <main+0x6b4>
    147a:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <main+0x17ae>
							//clear();
							state = DONEM;
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
    147e:	40 e2       	ldi	r20, 0x20	; 32
    1480:	84 16       	cp	r8, r20
    1482:	91 04       	cpc	r9, r1
    1484:	cc f4       	brge	.+50     	; 0x14b8 <main+0x598>
						if(state % 2 == 0){			//current state is an 'on' state
    1486:	80 fc       	sbrc	r8, 0
    1488:	09 c0       	rjmp	.+18     	; 0x149c <main+0x57c>
							lcd_goto_xy(13,1);
    148a:	8d e0       	ldi	r24, 0x0D	; 13
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
							serial_print_string("OFF");
    1492:	88 ed       	ldi	r24, 0xD8	; 216
    1494:	91 e0       	ldi	r25, 0x01	; 1
    1496:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <main+0x584>
						}
						else{						//current state is an 'off' state
							lcd_goto_xy(0,1);
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	61 e0       	ldi	r22, 0x01	; 1
    14a0:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
						}
						buttonTriggered = false;
						state ++;
    14a4:	08 94       	sec
    14a6:	81 1c       	adc	r8, r1
    14a8:	91 1c       	adc	r9, r1
						counterRef = counter;
						printVar = true;
						if(state == O11_OFF + 1){	//accounts for end of maintenance mode after outputs
    14aa:	50 e2       	ldi	r21, 0x20	; 32
    14ac:	85 16       	cp	r8, r21
    14ae:	91 04       	cpc	r9, r1
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <main+0x594>
    14b2:	98 c0       	rjmp	.+304    	; 0x15e4 <main+0x6c4>
    14b4:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <main+0x17b6>
    14b8:	84 01       	movw	r16, r8
    14ba:	0f 5f       	subi	r16, 0xFF	; 255
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
							//clear();
							state = DONEM;
						}
					}
					else if(state <= M5_B){							//if it's doing the motors
    14be:	8a e2       	ldi	r24, 0x2A	; 42
    14c0:	88 16       	cp	r8, r24
    14c2:	91 04       	cpc	r9, r1
    14c4:	0c f0       	brlt	.+2      	; 0x14c8 <main+0x5a8>
    14c6:	5d c0       	rjmp	.+186    	; 0x1582 <main+0x662>
						buttonTriggered = false;
						state ++;
						counterRef = counter;
						printVar = true;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
    14c8:	80 fc       	sbrc	r8, 0
    14ca:	09 c0       	rjmp	.+18     	; 0x14de <main+0x5be>
							lcd_goto_xy(11,1);
    14cc:	8b e0       	ldi	r24, 0x0B	; 11
    14ce:	61 e0       	ldi	r22, 0x01	; 1
    14d0:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
							serial_print_string("BACK ");
    14d4:	8c ed       	ldi	r24, 0xDC	; 220
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
    14dc:	13 c0       	rjmp	.+38     	; 0x1504 <main+0x5e4>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
    14de:	06 32       	cpi	r16, 0x26	; 38
    14e0:	11 05       	cpc	r17, r1
    14e2:	71 f1       	breq	.+92     	; 0x1540 <main+0x620>
    14e4:	07 32       	cpi	r16, 0x27	; 39
    14e6:	11 05       	cpc	r17, r1
    14e8:	3c f4       	brge	.+14     	; 0x14f8 <main+0x5d8>
    14ea:	02 32       	cpi	r16, 0x22	; 34
    14ec:	11 05       	cpc	r17, r1
    14ee:	61 f0       	breq	.+24     	; 0x1508 <main+0x5e8>
    14f0:	04 32       	cpi	r16, 0x24	; 36
    14f2:	11 05       	cpc	r17, r1
    14f4:	39 f4       	brne	.+14     	; 0x1504 <main+0x5e4>
    14f6:	14 c0       	rjmp	.+40     	; 0x1520 <main+0x600>
    14f8:	08 32       	cpi	r16, 0x28	; 40
    14fa:	11 05       	cpc	r17, r1
    14fc:	69 f1       	breq	.+90     	; 0x1558 <main+0x638>
    14fe:	0a 32       	cpi	r16, 0x2A	; 42
    1500:	11 05       	cpc	r17, r1
    1502:	b1 f1       	breq	.+108    	; 0x1570 <main+0x650>
    1504:	48 01       	movw	r8, r16
    1506:	6e c0       	rjmp	.+220    	; 0x15e4 <main+0x6c4>
								case M1_B + 1:
									lcd_goto_xy(0,1);
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1510:	80 91 61 04 	lds	r24, 0x0461
    1514:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1516:	80 62       	ori	r24, 0x20	; 32
    1518:	80 93 61 04 	sts	0x0461, r24
    151c:	23 01       	movw	r4, r6
    151e:	3b c2       	rjmp	.+1142   	; 0x1996 <main+0xa76>
									break;
								case M2_B + 1:
									lcd_goto_xy(0,1);
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	61 e0       	ldi	r22, 0x01	; 1
    1524:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1528:	80 91 61 04 	lds	r24, 0x0461
    152c:	8f 7d       	andi	r24, 0xDF	; 223
    152e:	80 93 61 04 	sts	0x0461, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    1532:	80 91 5d 04 	lds	r24, 0x045D
    1536:	81 60       	ori	r24, 0x01	; 1
    1538:	80 93 5d 04 	sts	0x045D, r24
    153c:	23 01       	movw	r4, r6
    153e:	4b c2       	rjmp	.+1174   	; 0x19d6 <main+0xab6>
									break;
								case M3_B + 1:
									lcd_goto_xy(0,1);
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	61 e0       	ldi	r22, 0x01	; 1
    1544:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1548:	80 91 5d 04 	lds	r24, 0x045D
    154c:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    154e:	88 60       	ori	r24, 0x08	; 8
    1550:	80 93 5d 04 	sts	0x045D, r24
    1554:	23 01       	movw	r4, r6
    1556:	5f c2       	rjmp	.+1214   	; 0x1a16 <main+0xaf6>
									break;
								case M4_B + 1:
									lcd_goto_xy(0,1);
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	61 e0       	ldi	r22, 0x01	; 1
    155c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    1560:	80 91 5d 04 	lds	r24, 0x045D
    1564:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    1566:	80 64       	ori	r24, 0x40	; 64
    1568:	80 93 5d 04 	sts	0x045D, r24
    156c:	23 01       	movw	r4, r6
    156e:	73 c2       	rjmp	.+1254   	; 0x1a56 <main+0xb36>
									break;
								case M5_B + 1:
									//clear();
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    1570:	80 91 5d 04 	lds	r24, 0x045D
    1574:	8f 7b       	andi	r24, 0xBF	; 191
    1576:	80 93 5d 04 	sts	0x045D, r24
									state = DONEM;
									paperTowelMotor = 0;
    157a:	1b 86       	std	Y+11, r1	; 0x0b
    157c:	1a 86       	std	Y+10, r1	; 0x0a
    157e:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <main+0x17b6>
							}
						}
					}
					else{
						buttonTriggered = false;
						state ++;
    1582:	48 01       	movw	r8, r16
						counterRef = counter;
						printVar = true;
						switch(state){
    1584:	0b 32       	cpi	r16, 0x2B	; 43
    1586:	11 05       	cpc	r17, r1
    1588:	21 f0       	breq	.+8      	; 0x1592 <main+0x672>
    158a:	0c 32       	cpi	r16, 0x2C	; 44
    158c:	11 05       	cpc	r17, r1
    158e:	51 f5       	brne	.+84     	; 0x15e4 <main+0x6c4>
    1590:	11 c0       	rjmp	.+34     	; 0x15b4 <main+0x694>
							case M2_AND_M3 + 1:
								lcd_goto_xy(0,1);
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	61 e0       	ldi	r22, 0x01	; 1
    1596:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
								u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    159a:	90 91 5d 04 	lds	r25, 0x045D
    159e:	9e 7f       	andi	r25, 0xFE	; 254
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    15a0:	80 91 61 04 	lds	r24, 0x0461
    15a4:	80 62       	ori	r24, 0x20	; 32
    15a6:	80 93 61 04 	sts	0x0461, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    15aa:	98 60       	ori	r25, 0x08	; 8
    15ac:	90 93 5d 04 	sts	0x045D, r25
    15b0:	23 01       	movw	r4, r6
    15b2:	7e c2       	rjmp	.+1276   	; 0x1ab0 <main+0xb90>
								break;
							case M2_AND_M4 + 1:
								//clear();
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    15b4:	80 91 61 04 	lds	r24, 0x0461
    15b8:	8f 7d       	andi	r24, 0xDF	; 223
    15ba:	80 93 61 04 	sts	0x0461, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    15be:	80 91 5d 04 	lds	r24, 0x045D
    15c2:	87 7f       	andi	r24, 0xF7	; 247
    15c4:	80 93 5d 04 	sts	0x045D, r24
								state = DONEM;
								fixtureMotor = 0;
    15c8:	1d 82       	std	Y+5, r1	; 0x05
    15ca:	1c 82       	std	Y+4, r1	; 0x04
								brush2Motor = 0;
    15cc:	19 86       	std	Y+9, r1	; 0x09
    15ce:	18 86       	std	Y+8, r1	; 0x08
    15d0:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <main+0x17b6>
    15d4:	23 01       	movw	r4, r6
    15d6:	bb 24       	eor	r11, r11
    15d8:	b3 94       	inc	r11
    15da:	4f ef       	ldi	r20, 0xFF	; 255
    15dc:	5f ef       	ldi	r21, 0xFF	; 255
    15de:	58 8b       	std	Y+16, r21	; 0x10
    15e0:	4f 87       	std	Y+15, r20	; 0x0f
    15e2:	03 c0       	rjmp	.+6      	; 0x15ea <main+0x6ca>
    15e4:	23 01       	movw	r4, r6
    15e6:	bb 24       	eor	r11, r11
    15e8:	b3 94       	inc	r11
						}
					}
				}

				//state actions
				switch (state) {
    15ea:	f4 01       	movw	r30, r8
    15ec:	ec 32       	cpi	r30, 0x2C	; 44
    15ee:	f1 05       	cpc	r31, r1
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <main+0x6d4>
    15f2:	70 c2       	rjmp	.+1248   	; 0x1ad4 <main+0xbb4>
    15f4:	ea 5b       	subi	r30, 0xBA	; 186
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	ee 0f       	add	r30, r30
    15fa:	ff 1f       	adc	r31, r31
    15fc:	05 90       	lpm	r0, Z+
    15fe:	f4 91       	lpm	r31, Z+
    1600:	e0 2d       	mov	r30, r0
    1602:	09 94       	ijmp
					case S0:
						if(printVar){
    1604:	bb 20       	and	r11, r11
    1606:	21 f0       	breq	.+8      	; 0x1610 <main+0x6f0>
							serial_print_string("SENSOR 1");
    1608:	82 ee       	ldi	r24, 0xE2	; 226
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1610:	8f e0       	ldi	r24, 0x0F	; 15
    1612:	61 e0       	ldi	r22, 0x01	; 1
    1614:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.plate){
    1618:	80 91 5c 04 	lds	r24, 0x045C
    161c:	81 70       	andi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	2f 85       	ldd	r18, Y+15	; 0x0f
    1622:	38 89       	ldd	r19, Y+16	; 0x10
    1624:	28 17       	cp	r18, r24
    1626:	39 07       	cpc	r19, r25
    1628:	09 f4       	brne	.+2      	; 0x162c <main+0x70c>
    162a:	53 c2       	rjmp	.+1190   	; 0x1ad2 <main+0xbb2>
							serial_print_int(u_inputByte0.bits_in_inputByte0.plate);
    162c:	0e 94 72 07 	call	0xee4	; 0xee4 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.plate;
    1630:	80 91 5c 04 	lds	r24, 0x045C
    1634:	b0 c0       	rjmp	.+352    	; 0x1796 <main+0x876>
						}							
						break;
					case S1:
						if(printVar){
    1636:	bb 20       	and	r11, r11
    1638:	21 f0       	breq	.+8      	; 0x1642 <main+0x722>
							serial_print_string("SENSOR 2");
    163a:	8b ee       	ldi	r24, 0xEB	; 235
    163c:	91 e0       	ldi	r25, 0x01	; 1
    163e:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1642:	8f e0       	ldi	r24, 0x0F	; 15
    1644:	61 e0       	ldi	r22, 0x01	; 1
    1646:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureHome){
    164a:	80 91 5c 04 	lds	r24, 0x045C
    164e:	86 95       	lsr	r24
    1650:	81 70       	andi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	2f 85       	ldd	r18, Y+15	; 0x0f
    1656:	38 89       	ldd	r19, Y+16	; 0x10
    1658:	28 17       	cp	r18, r24
    165a:	39 07       	cpc	r19, r25
    165c:	09 f4       	brne	.+2      	; 0x1660 <main+0x740>
    165e:	39 c2       	rjmp	.+1138   	; 0x1ad2 <main+0xbb2>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureHome);
    1660:	0e 94 72 07 	call	0xee4	; 0xee4 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureHome;
    1664:	80 91 5c 04 	lds	r24, 0x045C
    1668:	86 95       	lsr	r24
    166a:	95 c0       	rjmp	.+298    	; 0x1796 <main+0x876>
						}							
						break;
					case S2:
						if(printVar){
    166c:	bb 20       	and	r11, r11
    166e:	21 f0       	breq	.+8      	; 0x1678 <main+0x758>
							serial_print_string("SENSOR 3");
    1670:	84 ef       	ldi	r24, 0xF4	; 244
    1672:	91 e0       	ldi	r25, 0x01	; 1
    1674:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1678:	8f e0       	ldi	r24, 0x0F	; 15
    167a:	61 e0       	ldi	r22, 0x01	; 1
    167c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureLift){
    1680:	80 91 5c 04 	lds	r24, 0x045C
    1684:	86 95       	lsr	r24
    1686:	86 95       	lsr	r24
    1688:	81 70       	andi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	2f 85       	ldd	r18, Y+15	; 0x0f
    168e:	38 89       	ldd	r19, Y+16	; 0x10
    1690:	28 17       	cp	r18, r24
    1692:	39 07       	cpc	r19, r25
    1694:	09 f4       	brne	.+2      	; 0x1698 <main+0x778>
    1696:	1d c2       	rjmp	.+1082   	; 0x1ad2 <main+0xbb2>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureLift);
    1698:	0e 94 72 07 	call	0xee4	; 0xee4 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureLift;
    169c:	80 91 5c 04 	lds	r24, 0x045C
    16a0:	86 95       	lsr	r24
    16a2:	86 95       	lsr	r24
    16a4:	78 c0       	rjmp	.+240    	; 0x1796 <main+0x876>
						}							
						break;
					case S3:
						if(printVar){
    16a6:	bb 20       	and	r11, r11
    16a8:	21 f0       	breq	.+8      	; 0x16b2 <main+0x792>
							serial_print_string("SENSOR 4");
    16aa:	8d ef       	ldi	r24, 0xFD	; 253
    16ac:	91 e0       	ldi	r25, 0x01	; 1
    16ae:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    16b2:	8f e0       	ldi	r24, 0x0F	; 15
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixturePlate){
    16ba:	80 91 5c 04 	lds	r24, 0x045C
    16be:	86 95       	lsr	r24
    16c0:	86 95       	lsr	r24
    16c2:	86 95       	lsr	r24
    16c4:	81 70       	andi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	2f 85       	ldd	r18, Y+15	; 0x0f
    16ca:	38 89       	ldd	r19, Y+16	; 0x10
    16cc:	28 17       	cp	r18, r24
    16ce:	39 07       	cpc	r19, r25
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <main+0x7b4>
    16d2:	ff c1       	rjmp	.+1022   	; 0x1ad2 <main+0xbb2>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixturePlate);
    16d4:	0e 94 72 07 	call	0xee4	; 0xee4 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixturePlate;
    16d8:	80 91 5c 04 	lds	r24, 0x045C
    16dc:	86 95       	lsr	r24
    16de:	86 95       	lsr	r24
    16e0:	86 95       	lsr	r24
    16e2:	59 c0       	rjmp	.+178    	; 0x1796 <main+0x876>
						}							
						break;
					case S4:
						if(printVar){
    16e4:	bb 20       	and	r11, r11
    16e6:	21 f0       	breq	.+8      	; 0x16f0 <main+0x7d0>
							serial_print_string("SENSOR 5");
    16e8:	86 e0       	ldi	r24, 0x06	; 6
    16ea:	92 e0       	ldi	r25, 0x02	; 2
    16ec:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    16f0:	8f e0       	ldi	r24, 0x0F	; 15
    16f2:	61 e0       	ldi	r22, 0x01	; 1
    16f4:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush1){
    16f8:	80 91 5c 04 	lds	r24, 0x045C
    16fc:	82 95       	swap	r24
    16fe:	81 70       	andi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	2f 85       	ldd	r18, Y+15	; 0x0f
    1704:	38 89       	ldd	r19, Y+16	; 0x10
    1706:	28 17       	cp	r18, r24
    1708:	39 07       	cpc	r19, r25
    170a:	09 f4       	brne	.+2      	; 0x170e <main+0x7ee>
    170c:	e2 c1       	rjmp	.+964    	; 0x1ad2 <main+0xbb2>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
    170e:	0e 94 72 07 	call	0xee4	; 0xee4 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush1;
    1712:	80 91 5c 04 	lds	r24, 0x045C
    1716:	82 95       	swap	r24
    1718:	8f 70       	andi	r24, 0x0F	; 15
    171a:	3d c0       	rjmp	.+122    	; 0x1796 <main+0x876>
						}							
						break;
					case S5:
						if(printVar){
    171c:	bb 20       	and	r11, r11
    171e:	21 f0       	breq	.+8      	; 0x1728 <main+0x808>
							serial_print_string("SENSOR 6");
    1720:	8f e0       	ldi	r24, 0x0F	; 15
    1722:	92 e0       	ldi	r25, 0x02	; 2
    1724:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1728:	8f e0       	ldi	r24, 0x0F	; 15
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush2){
    1730:	80 91 5c 04 	lds	r24, 0x045C
    1734:	82 95       	swap	r24
    1736:	86 95       	lsr	r24
    1738:	81 70       	andi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	2f 85       	ldd	r18, Y+15	; 0x0f
    173e:	38 89       	ldd	r19, Y+16	; 0x10
    1740:	28 17       	cp	r18, r24
    1742:	39 07       	cpc	r19, r25
    1744:	09 f4       	brne	.+2      	; 0x1748 <main+0x828>
    1746:	c5 c1       	rjmp	.+906    	; 0x1ad2 <main+0xbb2>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
    1748:	0e 94 72 07 	call	0xee4	; 0xee4 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush2;
    174c:	80 91 5c 04 	lds	r24, 0x045C
    1750:	82 95       	swap	r24
    1752:	86 95       	lsr	r24
    1754:	87 70       	andi	r24, 0x07	; 7
    1756:	1f c0       	rjmp	.+62     	; 0x1796 <main+0x876>
						}							
						break;
					case S6:
						if(printVar){
    1758:	bb 20       	and	r11, r11
    175a:	21 f0       	breq	.+8      	; 0x1764 <main+0x844>
							serial_print_string("SENSOR 7");
    175c:	88 e1       	ldi	r24, 0x18	; 24
    175e:	92 e0       	ldi	r25, 0x02	; 2
    1760:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1764:	8f e0       	ldi	r24, 0x0F	; 15
    1766:	61 e0       	ldi	r22, 0x01	; 1
    1768:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry1){
    176c:	80 91 5c 04 	lds	r24, 0x045C
    1770:	82 95       	swap	r24
    1772:	86 95       	lsr	r24
    1774:	86 95       	lsr	r24
    1776:	81 70       	andi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	2f 85       	ldd	r18, Y+15	; 0x0f
    177c:	38 89       	ldd	r19, Y+16	; 0x10
    177e:	28 17       	cp	r18, r24
    1780:	39 07       	cpc	r19, r25
    1782:	09 f4       	brne	.+2      	; 0x1786 <main+0x866>
    1784:	a6 c1       	rjmp	.+844    	; 0x1ad2 <main+0xbb2>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry1);
    1786:	0e 94 72 07 	call	0xee4	; 0xee4 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry1;
    178a:	80 91 5c 04 	lds	r24, 0x045C
    178e:	82 95       	swap	r24
    1790:	86 95       	lsr	r24
    1792:	86 95       	lsr	r24
    1794:	83 70       	andi	r24, 0x03	; 3
    1796:	81 70       	andi	r24, 0x01	; 1
    1798:	1d c0       	rjmp	.+58     	; 0x17d4 <main+0x8b4>
						}							
						break;
					case S7:
						if(printVar){
    179a:	bb 20       	and	r11, r11
    179c:	21 f0       	breq	.+8      	; 0x17a6 <main+0x886>
							serial_print_string("SENSOR 8");
    179e:	81 e2       	ldi	r24, 0x21	; 33
    17a0:	92 e0       	ldi	r25, 0x02	; 2
    17a2:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    17a6:	8f e0       	ldi	r24, 0x0F	; 15
    17a8:	61 e0       	ldi	r22, 0x01	; 1
    17aa:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry2){
    17ae:	80 91 5c 04 	lds	r24, 0x045C
    17b2:	88 1f       	adc	r24, r24
    17b4:	88 27       	eor	r24, r24
    17b6:	88 1f       	adc	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	2f 85       	ldd	r18, Y+15	; 0x0f
    17bc:	38 89       	ldd	r19, Y+16	; 0x10
    17be:	28 17       	cp	r18, r24
    17c0:	39 07       	cpc	r19, r25
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <main+0x8a6>
    17c4:	86 c1       	rjmp	.+780    	; 0x1ad2 <main+0xbb2>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry2);
    17c6:	0e 94 72 07 	call	0xee4	; 0xee4 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry2;
    17ca:	80 91 5c 04 	lds	r24, 0x045C
    17ce:	88 1f       	adc	r24, r24
    17d0:	88 27       	eor	r24, r24
    17d2:	88 1f       	adc	r24, r24
    17d4:	48 2f       	mov	r20, r24
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	58 8b       	std	Y+16, r21	; 0x10
    17da:	4f 87       	std	Y+15, r20	; 0x0f
    17dc:	7a c1       	rjmp	.+756    	; 0x1ad2 <main+0xbb2>
						}							
						break;
					case O0_ON:
						if(printVar){
    17de:	bb 20       	and	r11, r11
    17e0:	21 f0       	breq	.+8      	; 0x17ea <main+0x8ca>
							serial_print_string("AC POWER     ON ");
    17e2:	8a e2       	ldi	r24, 0x2A	; 42
    17e4:	92 e0       	ldi	r25, 0x02	; 2
    17e6:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
    17ea:	80 91 60 04 	lds	r24, 0x0460
    17ee:	8e 7f       	andi	r24, 0xFE	; 254
    17f0:	0d c0       	rjmp	.+26     	; 0x180c <main+0x8ec>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
    17f2:	80 91 60 04 	lds	r24, 0x0460
    17f6:	81 60       	ori	r24, 0x01	; 1
    17f8:	6c c0       	rjmp	.+216    	; 0x18d2 <main+0x9b2>
						break;
					case O1_ON:
						if(printVar){
    17fa:	bb 20       	and	r11, r11
    17fc:	21 f0       	breq	.+8      	; 0x1806 <main+0x8e6>
							serial_print_string("BLOWER       ON  ");
    17fe:	8b e3       	ldi	r24, 0x3B	; 59
    1800:	92 e0       	ldi	r25, 0x02	; 2
    1802:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1806:	80 91 60 04 	lds	r24, 0x0460
    180a:	8d 7f       	andi	r24, 0xFD	; 253
    180c:	80 93 60 04 	sts	0x0460, r24
    1810:	60 c1       	rjmp	.+704    	; 0x1ad2 <main+0xbb2>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1812:	80 91 60 04 	lds	r24, 0x0460
    1816:	82 60       	ori	r24, 0x02	; 2
    1818:	5c c0       	rjmp	.+184    	; 0x18d2 <main+0x9b2>
						break;
					case O2_ON:
						if(printVar){
    181a:	bb 20       	and	r11, r11
    181c:	21 f0       	breq	.+8      	; 0x1826 <main+0x906>
							serial_print_string("PLATE STOP   ON ");
    181e:	8d e4       	ldi	r24, 0x4D	; 77
    1820:	92 e0       	ldi	r25, 0x02	; 2
    1822:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1826:	80 91 60 04 	lds	r24, 0x0460
    182a:	8b 7f       	andi	r24, 0xFB	; 251
    182c:	ef cf       	rjmp	.-34     	; 0x180c <main+0x8ec>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
    182e:	80 91 60 04 	lds	r24, 0x0460
    1832:	84 60       	ori	r24, 0x04	; 4
    1834:	4e c0       	rjmp	.+156    	; 0x18d2 <main+0x9b2>
						break;
					case O3_ON:
						if(printVar){
    1836:	bb 20       	and	r11, r11
    1838:	21 f0       	breq	.+8      	; 0x1842 <main+0x922>
							serial_print_string("PLATE RAISE  ON ");
    183a:	8e e5       	ldi	r24, 0x5E	; 94
    183c:	92 e0       	ldi	r25, 0x02	; 2
    183e:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1842:	80 91 60 04 	lds	r24, 0x0460
    1846:	87 7f       	andi	r24, 0xF7	; 247
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1848:	80 61       	ori	r24, 0x10	; 16
    184a:	e0 cf       	rjmp	.-64     	; 0x180c <main+0x8ec>
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    184c:	80 91 60 04 	lds	r24, 0x0460
    1850:	88 60       	ori	r24, 0x08	; 8
    1852:	3f c0       	rjmp	.+126    	; 0x18d2 <main+0x9b2>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(printVar){
    1854:	bb 20       	and	r11, r11
    1856:	21 f0       	breq	.+8      	; 0x1860 <main+0x940>
							serial_print_string("PLATE LOWER  ON ");
    1858:	8f e6       	ldi	r24, 0x6F	; 111
    185a:	92 e0       	ldi	r25, 0x02	; 2
    185c:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1860:	80 91 60 04 	lds	r24, 0x0460
    1864:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1866:	8f 7e       	andi	r24, 0xEF	; 239
    1868:	d1 cf       	rjmp	.-94     	; 0x180c <main+0x8ec>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    186a:	80 91 60 04 	lds	r24, 0x0460
    186e:	80 61       	ori	r24, 0x10	; 16
    1870:	30 c0       	rjmp	.+96     	; 0x18d2 <main+0x9b2>
						break;
					case O5_ON:
						if(printVar){
    1872:	bb 20       	and	r11, r11
    1874:	21 f0       	breq	.+8      	; 0x187e <main+0x95e>
							serial_print_string("BRUSH1 RAISE ON ");
    1876:	80 e8       	ldi	r24, 0x80	; 128
    1878:	92 e0       	ldi	r25, 0x02	; 2
    187a:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    187e:	80 91 60 04 	lds	r24, 0x0460
    1882:	8f 7d       	andi	r24, 0xDF	; 223
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1884:	80 64       	ori	r24, 0x40	; 64
    1886:	c2 cf       	rjmp	.-124    	; 0x180c <main+0x8ec>
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1888:	80 91 60 04 	lds	r24, 0x0460
    188c:	80 62       	ori	r24, 0x20	; 32
    188e:	21 c0       	rjmp	.+66     	; 0x18d2 <main+0x9b2>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(printVar){
    1890:	bb 20       	and	r11, r11
    1892:	21 f0       	breq	.+8      	; 0x189c <main+0x97c>
							serial_print_string("BRUSH1 LOWER ON ");
    1894:	81 e9       	ldi	r24, 0x91	; 145
    1896:	92 e0       	ldi	r25, 0x02	; 2
    1898:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    189c:	80 91 60 04 	lds	r24, 0x0460
    18a0:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    18a2:	80 62       	ori	r24, 0x20	; 32
    18a4:	b3 cf       	rjmp	.-154    	; 0x180c <main+0x8ec>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    18a6:	80 91 60 04 	lds	r24, 0x0460
    18aa:	80 64       	ori	r24, 0x40	; 64
    18ac:	12 c0       	rjmp	.+36     	; 0x18d2 <main+0x9b2>
						break;
					case O7_ON:
						if(printVar){
    18ae:	bb 20       	and	r11, r11
    18b0:	21 f0       	breq	.+8      	; 0x18ba <main+0x99a>
							serial_print_string("BRUSH2 RAISE ON ");
    18b2:	82 ea       	ldi	r24, 0xA2	; 162
    18b4:	92 e0       	ldi	r25, 0x02	; 2
    18b6:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    18ba:	80 91 60 04 	lds	r24, 0x0460
    18be:	8f 77       	andi	r24, 0x7F	; 127
    18c0:	80 93 60 04 	sts	0x0460, r24
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    18c4:	80 91 5e 04 	lds	r24, 0x045E
    18c8:	81 60       	ori	r24, 0x01	; 1
    18ca:	40 c0       	rjmp	.+128    	; 0x194c <main+0xa2c>
						break;
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    18cc:	80 91 60 04 	lds	r24, 0x0460
    18d0:	80 68       	ori	r24, 0x80	; 128
    18d2:	80 93 60 04 	sts	0x0460, r24
    18d6:	fe c0       	rjmp	.+508    	; 0x1ad4 <main+0xbb4>
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(printVar){
    18d8:	bb 20       	and	r11, r11
    18da:	21 f0       	breq	.+8      	; 0x18e4 <main+0x9c4>
							serial_print_string("BRUSH2 LOWER ON ");
    18dc:	83 eb       	ldi	r24, 0xB3	; 179
    18de:	92 e0       	ldi	r25, 0x02	; 2
    18e0:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    18e4:	80 91 5e 04 	lds	r24, 0x045E
    18e8:	8e 7f       	andi	r24, 0xFE	; 254
    18ea:	80 93 5e 04 	sts	0x045E, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    18ee:	80 91 60 04 	lds	r24, 0x0460
    18f2:	80 68       	ori	r24, 0x80	; 128
    18f4:	8b cf       	rjmp	.-234    	; 0x180c <main+0x8ec>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    18f6:	80 91 5e 04 	lds	r24, 0x045E
    18fa:	81 60       	ori	r24, 0x01	; 1
    18fc:	2d c0       	rjmp	.+90     	; 0x1958 <main+0xa38>
						break;
					case O9_ON:
						if(printVar){
    18fe:	bb 20       	and	r11, r11
    1900:	21 f0       	breq	.+8      	; 0x190a <main+0x9ea>
							serial_print_string("PAPER RAISE  ON ");
    1902:	84 ec       	ldi	r24, 0xC4	; 196
    1904:	92 e0       	ldi	r25, 0x02	; 2
    1906:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    190a:	80 91 5e 04 	lds	r24, 0x045E
    190e:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    1910:	82 60       	ori	r24, 0x02	; 2
    1912:	1c c0       	rjmp	.+56     	; 0x194c <main+0xa2c>
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1914:	80 91 5e 04 	lds	r24, 0x045E
    1918:	84 60       	ori	r24, 0x04	; 4
    191a:	1e c0       	rjmp	.+60     	; 0x1958 <main+0xa38>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(printVar){
    191c:	bb 20       	and	r11, r11
    191e:	21 f0       	breq	.+8      	; 0x1928 <main+0xa08>
							serial_print_string("PAPER LOWER  ON ");
    1920:	85 ed       	ldi	r24, 0xD5	; 213
    1922:	92 e0       	ldi	r25, 0x02	; 2
    1924:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1928:	80 91 5e 04 	lds	r24, 0x045E
    192c:	8d 7f       	andi	r24, 0xFD	; 253
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    192e:	84 60       	ori	r24, 0x04	; 4
    1930:	0d c0       	rjmp	.+26     	; 0x194c <main+0xa2c>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    1932:	80 91 5e 04 	lds	r24, 0x045E
    1936:	82 60       	ori	r24, 0x02	; 2
    1938:	0f c0       	rjmp	.+30     	; 0x1958 <main+0xa38>
						break;
					case O11_ON:
						if(printVar){
    193a:	bb 20       	and	r11, r11
    193c:	21 f0       	breq	.+8      	; 0x1946 <main+0xa26>
							serial_print_string("AIR KNIFE    ON ");
    193e:	86 ee       	ldi	r24, 0xE6	; 230
    1940:	92 e0       	ldi	r25, 0x02	; 2
    1942:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1946:	80 91 5e 04 	lds	r24, 0x045E
    194a:	87 7f       	andi	r24, 0xF7	; 247
    194c:	80 93 5e 04 	sts	0x045E, r24
    1950:	c0 c0       	rjmp	.+384    	; 0x1ad2 <main+0xbb2>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1952:	80 91 5e 04 	lds	r24, 0x045E
    1956:	88 60       	ori	r24, 0x08	; 8
    1958:	80 93 5e 04 	sts	0x045E, r24
    195c:	bb c0       	rjmp	.+374    	; 0x1ad4 <main+0xbb4>
						break;
					case M1_F:
						if(printVar){
    195e:	bb 20       	and	r11, r11
    1960:	21 f0       	breq	.+8      	; 0x196a <main+0xa4a>
							serial_print_string("LOADING    FRONT");
    1962:	87 ef       	ldi	r24, 0xF7	; 247
    1964:	92 e0       	ldi	r25, 0x02	; 2
    1966:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    196a:	80 91 61 04 	lds	r24, 0x0461
    196e:	8d 7f       	andi	r24, 0xFD	; 253
    1970:	80 93 61 04 	sts	0x0461, r24
						plateLoadMotor =  1;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	9b 83       	std	Y+3, r25	; 0x03
    197a:	8a 83       	std	Y+2, r24	; 0x02
    197c:	aa c0       	rjmp	.+340    	; 0x1ad2 <main+0xbb2>
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
    197e:	80 91 61 04 	lds	r24, 0x0461
    1982:	82 60       	ori	r24, 0x02	; 2
    1984:	80 93 61 04 	sts	0x0461, r24
						plateLoadMotor =  1;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9b 83       	std	Y+3, r25	; 0x03
    198e:	8a 83       	std	Y+2, r24	; 0x02
    1990:	a1 c0       	rjmp	.+322    	; 0x1ad4 <main+0xbb4>
						break;
					case M2_F:
						if(printVar){
    1992:	bb 20       	and	r11, r11
    1994:	21 f0       	breq	.+8      	; 0x199e <main+0xa7e>
							serial_print_string("DRIVE      FRONT");
    1996:	88 e0       	ldi	r24, 0x08	; 8
    1998:	93 e0       	ldi	r25, 0x03	; 3
    199a:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    199e:	80 91 61 04 	lds	r24, 0x0461
    19a2:	8f 7e       	andi	r24, 0xEF	; 239
    19a4:	80 93 61 04 	sts	0x0461, r24
						fixtureMotor =  1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	9d 83       	std	Y+5, r25	; 0x05
    19ae:	8c 83       	std	Y+4, r24	; 0x04
						plateLoadMotor = 0;
    19b0:	1b 82       	std	Y+3, r1	; 0x03
    19b2:	1a 82       	std	Y+2, r1	; 0x02
    19b4:	bb 24       	eor	r11, r11
    19b6:	42 e2       	ldi	r20, 0x22	; 34
    19b8:	84 2e       	mov	r8, r20
    19ba:	91 2c       	mov	r9, r1
    19bc:	8b c0       	rjmp	.+278    	; 0x1ad4 <main+0xbb4>
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
    19be:	80 91 61 04 	lds	r24, 0x0461
    19c2:	80 61       	ori	r24, 0x10	; 16
    19c4:	80 93 61 04 	sts	0x0461, r24
						fixtureMotor =  1;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	9d 83       	std	Y+5, r25	; 0x05
    19ce:	8c 83       	std	Y+4, r24	; 0x04
    19d0:	81 c0       	rjmp	.+258    	; 0x1ad4 <main+0xbb4>
						break;
					case M3_F:
						if(printVar){
    19d2:	bb 20       	and	r11, r11
    19d4:	21 f0       	breq	.+8      	; 0x19de <main+0xabe>
							serial_print_string("BRUSH1     FRONT");
    19d6:	89 e1       	ldi	r24, 0x19	; 25
    19d8:	93 e0       	ldi	r25, 0x03	; 3
    19da:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
    19de:	80 91 61 04 	lds	r24, 0x0461
    19e2:	8f 77       	andi	r24, 0x7F	; 127
    19e4:	80 93 61 04 	sts	0x0461, r24
						brush1Motor =  1;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	9f 83       	std	Y+7, r25	; 0x07
    19ee:	8e 83       	std	Y+6, r24	; 0x06
						fixtureMotor = 0;
    19f0:	1d 82       	std	Y+5, r1	; 0x05
    19f2:	1c 82       	std	Y+4, r1	; 0x04
    19f4:	bb 24       	eor	r11, r11
    19f6:	34 e2       	ldi	r19, 0x24	; 36
    19f8:	83 2e       	mov	r8, r19
    19fa:	91 2c       	mov	r9, r1
    19fc:	6b c0       	rjmp	.+214    	; 0x1ad4 <main+0xbb4>
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
    19fe:	80 91 61 04 	lds	r24, 0x0461
    1a02:	80 68       	ori	r24, 0x80	; 128
    1a04:	80 93 61 04 	sts	0x0461, r24
						brush1Motor =  1;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9f 83       	std	Y+7, r25	; 0x07
    1a0e:	8e 83       	std	Y+6, r24	; 0x06
    1a10:	61 c0       	rjmp	.+194    	; 0x1ad4 <main+0xbb4>
						break;
					case M4_F:
						if(printVar){
    1a12:	bb 20       	and	r11, r11
    1a14:	21 f0       	breq	.+8      	; 0x1a1e <main+0xafe>
							serial_print_string("BRUSH2     FRONT");
    1a16:	8a e2       	ldi	r24, 0x2A	; 42
    1a18:	93 e0       	ldi	r25, 0x03	; 3
    1a1a:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
    1a1e:	80 91 5d 04 	lds	r24, 0x045D
    1a22:	8b 7f       	andi	r24, 0xFB	; 251
    1a24:	80 93 5d 04 	sts	0x045D, r24
						brush2Motor =  1;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	99 87       	std	Y+9, r25	; 0x09
    1a2e:	88 87       	std	Y+8, r24	; 0x08
						brush1Motor = 0;
    1a30:	1f 82       	std	Y+7, r1	; 0x07
    1a32:	1e 82       	std	Y+6, r1	; 0x06
    1a34:	bb 24       	eor	r11, r11
    1a36:	26 e2       	ldi	r18, 0x26	; 38
    1a38:	82 2e       	mov	r8, r18
    1a3a:	91 2c       	mov	r9, r1
    1a3c:	4b c0       	rjmp	.+150    	; 0x1ad4 <main+0xbb4>
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
    1a3e:	80 91 5d 04 	lds	r24, 0x045D
    1a42:	84 60       	ori	r24, 0x04	; 4
    1a44:	80 93 5d 04 	sts	0x045D, r24
						brush2Motor =  1;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	99 87       	std	Y+9, r25	; 0x09
    1a4e:	88 87       	std	Y+8, r24	; 0x08
    1a50:	41 c0       	rjmp	.+130    	; 0x1ad4 <main+0xbb4>
						break;
					case M5_F:
						if(printVar){
    1a52:	bb 20       	and	r11, r11
    1a54:	21 f0       	breq	.+8      	; 0x1a5e <main+0xb3e>
							serial_print_string("PAPER      FRONT");
    1a56:	8b e3       	ldi	r24, 0x3B	; 59
    1a58:	93 e0       	ldi	r25, 0x03	; 3
    1a5a:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1a5e:	80 91 5d 04 	lds	r24, 0x045D
    1a62:	8f 7d       	andi	r24, 0xDF	; 223
    1a64:	80 93 5d 04 	sts	0x045D, r24
						paperTowelMotor =  1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9b 87       	std	Y+11, r25	; 0x0b
    1a6e:	8a 87       	std	Y+10, r24	; 0x0a
						brush2Motor = 0;
    1a70:	19 86       	std	Y+9, r1	; 0x09
    1a72:	18 86       	std	Y+8, r1	; 0x08
    1a74:	bb 24       	eor	r11, r11
    1a76:	98 e2       	ldi	r25, 0x28	; 40
    1a78:	89 2e       	mov	r8, r25
    1a7a:	91 2c       	mov	r9, r1
    1a7c:	2b c0       	rjmp	.+86     	; 0x1ad4 <main+0xbb4>
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
    1a7e:	80 91 5d 04 	lds	r24, 0x045D
    1a82:	80 62       	ori	r24, 0x20	; 32
    1a84:	80 93 5d 04 	sts	0x045D, r24
						paperTowelMotor =  1;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9b 87       	std	Y+11, r25	; 0x0b
    1a8e:	8a 87       	std	Y+10, r24	; 0x0a
    1a90:	21 c0       	rjmp	.+66     	; 0x1ad4 <main+0xbb4>
						break;
					case M2_AND_M3:
						if(printVar){
    1a92:	bb 20       	and	r11, r11
    1a94:	21 f0       	breq	.+8      	; 0x1a9e <main+0xb7e>
							serial_print_string("FIXTURE & BRUSH1");
    1a96:	8c e4       	ldi	r24, 0x4C	; 76
    1a98:	93 e0       	ldi	r25, 0x03	; 3
    1a9a:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9d 83       	std	Y+5, r25	; 0x05
    1aa4:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 1;
    1aa6:	9f 83       	std	Y+7, r25	; 0x07
    1aa8:	8e 83       	std	Y+6, r24	; 0x06
    1aaa:	13 c0       	rjmp	.+38     	; 0x1ad2 <main+0xbb2>
						break;
					case M2_AND_M4:
						if(printVar){
    1aac:	bb 20       	and	r11, r11
    1aae:	21 f0       	breq	.+8      	; 0x1ab8 <main+0xb98>
							serial_print_string("FIXTURE & BRUSH2");
    1ab0:	8d e5       	ldi	r24, 0x5D	; 93
    1ab2:	93 e0       	ldi	r25, 0x03	; 3
    1ab4:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9d 83       	std	Y+5, r25	; 0x05
    1abe:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 0;
    1ac0:	1f 82       	std	Y+7, r1	; 0x07
    1ac2:	1e 82       	std	Y+6, r1	; 0x06
						brush2Motor = 1;
    1ac4:	99 87       	std	Y+9, r25	; 0x09
    1ac6:	88 87       	std	Y+8, r24	; 0x08
    1ac8:	bb 24       	eor	r11, r11
    1aca:	8b e2       	ldi	r24, 0x2B	; 43
    1acc:	88 2e       	mov	r8, r24
    1ace:	91 2c       	mov	r9, r1
    1ad0:	01 c0       	rjmp	.+2      	; 0x1ad4 <main+0xbb4>
    1ad2:	bb 24       	eor	r11, r11
						break;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1ad4:	4a 81       	ldd	r20, Y+2	; 0x02
    1ad6:	5b 81       	ldd	r21, Y+3	; 0x03
    1ad8:	2c 81       	ldd	r18, Y+4	; 0x04
    1ada:	3d 81       	ldd	r19, Y+5	; 0x05
    1adc:	0e 81       	ldd	r16, Y+6	; 0x06
    1ade:	1f 81       	ldd	r17, Y+7	; 0x07
    1ae0:	e8 84       	ldd	r14, Y+8	; 0x08
    1ae2:	f9 84       	ldd	r15, Y+9	; 0x09
    1ae4:	ca 84       	ldd	r12, Y+10	; 0x0a
    1ae6:	db 84       	ldd	r13, Y+11	; 0x0b
    1ae8:	c3 01       	movw	r24, r6
    1aea:	b2 01       	movw	r22, r4
    1aec:	0e 94 03 06 	call	0xc06	; 0xc06 <motor_and_write>

				serial_check(); counter++;
    1af0:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <serial_check>
				delay_ms(1);
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>
			counter = 0;
			//clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
    1afc:	5c e2       	ldi	r21, 0x2C	; 44
    1afe:	85 16       	cp	r8, r21
    1b00:	91 04       	cpc	r9, r1
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <main+0xbe6>
    1b04:	c4 c5       	rjmp	.+2952   	; 0x268e <main+0x176e>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1b06:	08 94       	sec
    1b08:	61 1c       	adc	r6, r1
    1b0a:	71 1c       	adc	r7, r1
    1b0c:	e3 cb       	rjmp	.-2106   	; 0x12d4 <main+0x3b4>
		}
		else{										//If switch is set to Run Mode
		
		bool printVar = true;

		serial_print_string("NORMAL");
    1b0e:	8e e6       	ldi	r24, 0x6E	; 110
    1b10:	93 e0       	ldi	r25, 0x03	; 3
    1b12:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
		delay_ms(1000);
    1b16:	88 ee       	ldi	r24, 0xE8	; 232
    1b18:	93 e0       	ldi	r25, 0x03	; 3
    1b1a:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>
		
		//clear();
		serial_print_string("SELECT CYCLE");
    1b1e:	85 e7       	ldi	r24, 0x75	; 117
    1b20:	93 e0       	ldi	r25, 0x03	; 3
    1b22:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
		delay_ms(1000);
    1b26:	88 ee       	ldi	r24, 0xE8	; 232
    1b28:	93 e0       	ldi	r25, 0x03	; 3
    1b2a:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>
		int sel1 = !is_digital_input_high(IO_D1);
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1b34:	ee 24       	eor	r14, r14
    1b36:	ff 24       	eor	r15, r15
    1b38:	88 23       	and	r24, r24
    1b3a:	19 f4       	brne	.+6      	; 0x1b42 <main+0xc22>
    1b3c:	01 e0       	ldi	r16, 0x01	; 1
    1b3e:	e0 2e       	mov	r14, r16
    1b40:	f1 2c       	mov	r15, r1
		int sel2 = !is_digital_input_high(IO_D2);
    1b42:	82 e0       	ldi	r24, 0x02	; 2
    1b44:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1b48:	00 e0       	ldi	r16, 0x00	; 0
    1b4a:	10 e0       	ldi	r17, 0x00	; 0
    1b4c:	88 23       	and	r24, r24
    1b4e:	11 f4       	brne	.+4      	; 0x1b54 <main+0xc34>
    1b50:	01 e0       	ldi	r16, 0x01	; 1
    1b52:	10 e0       	ldi	r17, 0x00	; 0
    1b54:	cc 24       	eor	r12, r12
    1b56:	dd 24       	eor	r13, r13
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			if(sel1 != is_digital_input_high(IO_D1) || sel2 != is_digital_input_high(IO_D2)){
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	e8 16       	cp	r14, r24
    1b62:	f9 06       	cpc	r15, r25
    1b64:	39 f4       	brne	.+14     	; 0x1b74 <main+0xc54>
    1b66:	82 e0       	ldi	r24, 0x02	; 2
    1b68:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	08 17       	cp	r16, r24
    1b70:	19 07       	cpc	r17, r25
    1b72:	59 f1       	breq	.+86     	; 0x1bca <main+0xcaa>
				if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2))
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1b7a:	88 23       	and	r24, r24
    1b7c:	41 f4       	brne	.+16     	; 0x1b8e <main+0xc6e>
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1b84:	88 23       	and	r24, r24
    1b86:	19 f4       	brne	.+6      	; 0x1b8e <main+0xc6e>
					serial_print_string("FIRST B");
    1b88:	82 e8       	ldi	r24, 0x82	; 130
    1b8a:	93 e0       	ldi	r25, 0x03	; 3
    1b8c:	1c c0       	rjmp	.+56     	; 0x1bc6 <main+0xca6>
				else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2))
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1b94:	88 23       	and	r24, r24
    1b96:	41 f0       	breq	.+16     	; 0x1ba8 <main+0xc88>
    1b98:	82 e0       	ldi	r24, 0x02	; 2
    1b9a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1b9e:	88 23       	and	r24, r24
    1ba0:	19 f4       	brne	.+6      	; 0x1ba8 <main+0xc88>
					serial_print_string("SECOND B");
    1ba2:	8a e8       	ldi	r24, 0x8A	; 138
    1ba4:	93 e0       	ldi	r25, 0x03	; 3
    1ba6:	0f c0       	rjmp	.+30     	; 0x1bc6 <main+0xca6>
				else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2))
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1bae:	88 23       	and	r24, r24
    1bb0:	41 f4       	brne	.+16     	; 0x1bc2 <main+0xca2>
    1bb2:	82 e0       	ldi	r24, 0x02	; 2
    1bb4:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1bb8:	88 23       	and	r24, r24
    1bba:	19 f0       	breq	.+6      	; 0x1bc2 <main+0xca2>
					serial_print_string("BOTH B");
    1bbc:	83 e9       	ldi	r24, 0x93	; 147
    1bbe:	93 e0       	ldi	r25, 0x03	; 3
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <main+0xca6>
				else
					serial_print_string("DEBUG");
    1bc2:	8a ea       	ldi	r24, 0xAA	; 170
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
			}
			sel1 = is_digital_input_high(IO_D1);
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1bd0:	f8 2e       	mov	r15, r24
			sel2 = is_digital_input_high(IO_D2);
    1bd2:	82 e0       	ldi	r24, 0x02	; 2
    1bd4:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1bd8:	08 2f       	mov	r16, r24
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1bda:	c6 01       	movw	r24, r12
    1bdc:	be 01       	movw	r22, r28
    1bde:	64 5f       	subi	r22, 0xF4	; 244
    1be0:	7f 4f       	sbci	r23, 0xFF	; 255
    1be2:	0e 94 39 03 	call	0x672	; 0x672 <button_debounce>
    1be6:	18 2f       	mov	r17, r24
			counter++;
			delay_ms(1);
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>
		serial_print_string("SELECT CYCLE");
		delay_ms(1000);
		int sel1 = !is_digital_input_high(IO_D1);
		int sel2 = !is_digital_input_high(IO_D2);
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1bf0:	11 23       	and	r17, r17
    1bf2:	39 f4       	brne	.+14     	; 0x1c02 <main+0xce2>
				else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2))
					serial_print_string("BOTH B");
				else
					serial_print_string("DEBUG");
			}
			sel1 = is_digital_input_high(IO_D1);
    1bf4:	ef 2c       	mov	r14, r15
    1bf6:	ff 24       	eor	r15, r15
			sel2 = is_digital_input_high(IO_D2);
    1bf8:	10 e0       	ldi	r17, 0x00	; 0
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
			counter++;
    1bfa:	08 94       	sec
    1bfc:	c1 1c       	adc	r12, r1
    1bfe:	d1 1c       	adc	r13, r1
    1c00:	ab cf       	rjmp	.-170    	; 0x1b58 <main+0xc38>
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		//clear();
		serial_print_string("CYCLE:");
    1c02:	8a e9       	ldi	r24, 0x9A	; 154
    1c04:	93 e0       	ldi	r25, 0x03	; 3
    1c06:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>

		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1c0a:	80 91 61 04 	lds	r24, 0x0461
    1c0e:	80 62       	ori	r24, 0x20	; 32
    1c10:	80 93 61 04 	sts	0x0461, r24

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1c1a:	88 23       	and	r24, r24
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <main+0xd00>
    1c1e:	4f c1       	rjmp	.+670    	; 0x1ebe <main+0xf9e>
    1c20:	82 e0       	ldi	r24, 0x02	; 2
    1c22:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1c26:	88 23       	and	r24, r24
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <main+0xd0c>
    1c2a:	49 c1       	rjmp	.+658    	; 0x1ebe <main+0xf9e>
			lcd_goto_xy(7,0);
    1c2c:	87 e0       	ldi	r24, 0x07	; 7
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
			serial_print_string("FIRST B");
    1c34:	82 e8       	ldi	r24, 0x82	; 130
    1c36:	93 e0       	ldi	r25, 0x03	; 3
    1c38:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9d 83       	std	Y+5, r25	; 0x05
    1c42:	8c 83       	std	Y+4, r24	; 0x04
    1c44:	80 91 61 04 	lds	r24, 0x0461
    1c48:	80 62       	ori	r24, 0x20	; 32
    1c4a:	80 93 61 04 	sts	0x0461, r24
    1c4e:	33 24       	eor	r3, r3
    1c50:	33 94       	inc	r3
    1c52:	88 24       	eor	r8, r8
    1c54:	99 24       	eor	r9, r9
    1c56:	66 24       	eor	r6, r6
    1c58:	77 24       	eor	r7, r7
    1c5a:	44 24       	eor	r4, r4
    1c5c:	55 24       	eor	r5, r5
    1c5e:	22 24       	eor	r2, r2
    1c60:	23 94       	inc	r2
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1c62:	84 e4       	ldi	r24, 0x44	; 68
    1c64:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1c6e:	85 e4       	ldi	r24, 0x45	; 69
    1c70:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1c74:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1c78:	80 93 5c 04 	sts	0x045C, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1c7c:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1c80:	80 93 5f 04 	sts	0x045F, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1c84:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    1c88:	81 14       	cp	r8, r1
    1c8a:	91 04       	cpc	r9, r1
    1c8c:	b1 f0       	breq	.+44     	; 0x1cba <main+0xd9a>
    1c8e:	33 20       	and	r3, r3
    1c90:	a1 f0       	breq	.+40     	; 0x1cba <main+0xd9a>
					lcd_goto_xy(6,1);
    1c92:	86 e0       	ldi	r24, 0x06	; 6
    1c94:	61 e0       	ldi	r22, 0x01	; 1
    1c96:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
					serial_print_string("     ");
    1c9a:	81 ea       	ldi	r24, 0xA1	; 161
    1c9c:	93 e0       	ldi	r25, 0x03	; 3
    1c9e:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
					lcd_goto_xy(0,1);
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	61 e0       	ldi	r22, 0x01	; 1
    1ca6:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
					serial_print_string("STATE ");
    1caa:	87 ea       	ldi	r24, 0xA7	; 167
    1cac:	93 e0       	ldi	r25, 0x03	; 3
    1cae:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
					serial_print_int(state);
    1cb2:	c4 01       	movw	r24, r8
    1cb4:	0e 94 72 07 	call	0xee4	; 0xee4 <serial_print_int>
    1cb8:	33 24       	eor	r3, r3
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1cba:	c3 01       	movw	r24, r6
    1cbc:	be 01       	movw	r22, r28
    1cbe:	64 5f       	subi	r22, 0xF4	; 244
    1cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc2:	0e 94 39 03 	call	0x672	; 0x672 <button_debounce>
    1cc6:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1cc8:	c4 01       	movw	r24, r8
    1cca:	a3 01       	movw	r20, r6
    1ccc:	92 01       	movw	r18, r4
    1cce:	0e 94 98 03 	call	0x730	; 0x730 <init_trans>
    1cd2:	88 23       	and	r24, r24
    1cd4:	31 f0       	breq	.+12     	; 0x1ce2 <main+0xdc2>
					buttonTriggered = false;
					state ++;
    1cd6:	08 94       	sec
    1cd8:	81 1c       	adc	r8, r1
    1cda:	91 1c       	adc	r9, r1
    1cdc:	23 01       	movw	r4, r6
    1cde:	33 24       	eor	r3, r3
    1ce0:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    1ce2:	c4 01       	movw	r24, r8
    1ce4:	b3 01       	movw	r22, r6
    1ce6:	a2 01       	movw	r20, r4
    1ce8:	0e 94 1f 04 	call	0x83e	; 0x83e <firstB_trans>
    1cec:	88 23       	and	r24, r24
    1cee:	71 f0       	breq	.+28     	; 0x1d0c <main+0xdec>
					state ++;
    1cf0:	08 94       	sec
    1cf2:	81 1c       	adc	r8, r1
    1cf4:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)         // want to print number of steps to reach here
    1cf6:	8c e0       	ldi	r24, 0x0C	; 12
    1cf8:	88 16       	cp	r8, r24
    1cfa:	91 04       	cpc	r9, r1
    1cfc:	61 f1       	breq	.+88     	; 0x1d56 <main+0xe36>
    1cfe:	90 e1       	ldi	r25, 0x10	; 16
    1d00:	89 16       	cp	r8, r25
    1d02:	91 04       	cpc	r9, r1
    1d04:	41 f1       	breq	.+80     	; 0x1d56 <main+0xe36>
    1d06:	23 01       	movw	r4, r6
    1d08:	33 24       	eor	r3, r3
    1d0a:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}

				if(state == B1STOP2 && counter - counterRef > pWait){
    1d0c:	21 e1       	ldi	r18, 0x11	; 17
    1d0e:	82 16       	cp	r8, r18
    1d10:	91 04       	cpc	r9, r1
    1d12:	71 f4       	brne	.+28     	; 0x1d30 <main+0xe10>
    1d14:	93 01       	movw	r18, r6
    1d16:	24 19       	sub	r18, r4
    1d18:	35 09       	sbc	r19, r5
    1d1a:	80 91 c7 03 	lds	r24, 0x03C7
    1d1e:	90 91 c8 03 	lds	r25, 0x03C8
    1d22:	82 17       	cp	r24, r18
    1d24:	93 07       	cpc	r25, r19
    1d26:	cc f4       	brge	.+50     	; 0x1d5a <main+0xe3a>
    1d28:	23 01       	movw	r4, r6
    1d2a:	33 24       	eor	r3, r3
    1d2c:	33 94       	inc	r3
    1d2e:	04 c0       	rjmp	.+8      	; 0x1d38 <main+0xe18>
					state = MOVED1;
					counterRef = counter;
					printVar = true;
				}
				if(state == MOVED1 /*&& counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole*/ && u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0){
    1d30:	3c e1       	ldi	r19, 0x1C	; 28
    1d32:	83 16       	cp	r8, r19
    1d34:	91 04       	cpc	r9, r1
    1d36:	89 f4       	brne	.+34     	; 0x1d5a <main+0xe3a>
    1d38:	80 91 5c 04 	lds	r24, 0x045C
    1d3c:	86 fd       	sbrc	r24, 6
    1d3e:	07 c0       	rjmp	.+14     	; 0x1d4e <main+0xe2e>
    1d40:	23 01       	movw	r4, r6
    1d42:	33 24       	eor	r3, r3
    1d44:	33 94       	inc	r3
    1d46:	1d e1       	ldi	r17, 0x1D	; 29
    1d48:	81 2e       	mov	r8, r17
    1d4a:	91 2c       	mov	r9, r1
    1d4c:	06 c0       	rjmp	.+12     	; 0x1d5a <main+0xe3a>
    1d4e:	bc e1       	ldi	r27, 0x1C	; 28
    1d50:	8b 2e       	mov	r8, r27
    1d52:	91 2c       	mov	r9, r1
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <main+0xe3a>
    1d56:	33 24       	eor	r3, r3
    1d58:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef)){
    1d5a:	c4 01       	movw	r24, r8
    1d5c:	b3 01       	movw	r22, r6
    1d5e:	a2 01       	movw	r20, r4
    1d60:	0e 94 6d 05 	call	0xada	; 0xada <dry_trans>
    1d64:	88 23       	and	r24, r24
    1d66:	31 f0       	breq	.+12     	; 0x1d74 <main+0xe54>
					state ++;
    1d68:	08 94       	sec
    1d6a:	81 1c       	adc	r8, r1
    1d6c:	91 1c       	adc	r9, r1
    1d6e:	23 01       	movw	r4, r6
    1d70:	33 24       	eor	r3, r3
    1d72:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    1d74:	45 e2       	ldi	r20, 0x25	; 37
    1d76:	84 16       	cp	r8, r20
    1d78:	91 04       	cpc	r9, r1
    1d7a:	41 f4       	brne	.+16     	; 0x1d8c <main+0xe6c>
    1d7c:	c3 01       	movw	r24, r6
    1d7e:	84 19       	sub	r24, r4
    1d80:	95 09       	sbc	r25, r5
    1d82:	0b 97       	sbiw	r24, 0x0b	; 11
    1d84:	1c f0       	brlt	.+6      	; 0x1d8c <main+0xe6c>
    1d86:	a6 e2       	ldi	r26, 0x26	; 38
    1d88:	8a 2e       	mov	r8, r26
    1d8a:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1d8c:	c4 01       	movw	r24, r8
    1d8e:	b3 01       	movw	r22, r6
    1d90:	ae 01       	movw	r20, r28
    1d92:	4e 5f       	subi	r20, 0xFE	; 254
    1d94:	5f 4f       	sbci	r21, 0xFF	; 255
    1d96:	9e 01       	movw	r18, r28
    1d98:	2c 5f       	subi	r18, 0xFC	; 252
    1d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9c:	8e 01       	movw	r16, r28
    1d9e:	0a 5f       	subi	r16, 0xFA	; 250
    1da0:	1f 4f       	sbci	r17, 0xFF	; 255
    1da2:	f8 e0       	ldi	r31, 0x08	; 8
    1da4:	ef 2e       	mov	r14, r31
    1da6:	f1 2c       	mov	r15, r1
    1da8:	ec 0e       	add	r14, r28
    1daa:	fd 1e       	adc	r15, r29
    1dac:	ea e0       	ldi	r30, 0x0A	; 10
    1dae:	ce 2e       	mov	r12, r30
    1db0:	d1 2c       	mov	r13, r1
    1db2:	cc 0e       	add	r12, r28
    1db4:	dd 1e       	adc	r13, r29
    1db6:	5e 01       	movw	r10, r28
    1db8:	08 94       	sec
    1dba:	a1 1c       	adc	r10, r1
    1dbc:	b1 1c       	adc	r11, r1
    1dbe:	0e 94 d0 06 	call	0xda0	; 0xda0 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1dc2:	c4 01       	movw	r24, r8
    1dc4:	b3 01       	movw	r22, r6
    1dc6:	ae 01       	movw	r20, r28
    1dc8:	4e 5f       	subi	r20, 0xFE	; 254
    1dca:	5f 4f       	sbci	r21, 0xFF	; 255
    1dcc:	9e 01       	movw	r18, r28
    1dce:	2c 5f       	subi	r18, 0xFC	; 252
    1dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd2:	8e 01       	movw	r16, r28
    1dd4:	0a 5f       	subi	r16, 0xFA	; 250
    1dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd8:	b8 e0       	ldi	r27, 0x08	; 8
    1dda:	eb 2e       	mov	r14, r27
    1ddc:	f1 2c       	mov	r15, r1
    1dde:	ec 0e       	add	r14, r28
    1de0:	fd 1e       	adc	r15, r29
    1de2:	aa e0       	ldi	r26, 0x0A	; 10
    1de4:	ca 2e       	mov	r12, r26
    1de6:	d1 2c       	mov	r13, r1
    1de8:	cc 0e       	add	r12, r28
    1dea:	dd 1e       	adc	r13, r29
    1dec:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    1df0:	51 e1       	ldi	r21, 0x11	; 17
    1df2:	85 16       	cp	r8, r21
    1df4:	91 04       	cpc	r9, r1
    1df6:	59 f4       	brne	.+22     	; 0x1e0e <main+0xeee>
					brush1Motor = 0;
    1df8:	1f 82       	std	Y+7, r1	; 0x07
    1dfa:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    1dfc:	1d 82       	std	Y+5, r1	; 0x05
    1dfe:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1e00:	80 91 60 04 	lds	r24, 0x0460
    1e04:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1e06:	80 62       	ori	r24, 0x20	; 32
    1e08:	80 93 60 04 	sts	0x0460, r24
    1e0c:	12 c0       	rjmp	.+36     	; 0x1e32 <main+0xf12>
				}
				if(state == MOVED1){
    1e0e:	8c e1       	ldi	r24, 0x1C	; 28
    1e10:	88 16       	cp	r8, r24
    1e12:	91 04       	cpc	r9, r1
    1e14:	71 f4       	brne	.+28     	; 0x1e32 <main+0xf12>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1e16:	80 91 61 04 	lds	r24, 0x0461
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1e1a:	21 e0       	ldi	r18, 0x01	; 1
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	3d 83       	std	Y+5, r19	; 0x05
    1e20:	2c 83       	std	Y+4, r18	; 0x04
    1e22:	80 63       	ori	r24, 0x30	; 48
    1e24:	80 93 61 04 	sts	0x0461, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1e28:	80 91 5d 04 	lds	r24, 0x045D
    1e2c:	8e 7f       	andi	r24, 0xFE	; 254
    1e2e:	80 93 5d 04 	sts	0x045D, r24
				}
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1e32:	c4 01       	movw	r24, r8
    1e34:	b3 01       	movw	r22, r6
    1e36:	ae 01       	movw	r20, r28
    1e38:	4e 5f       	subi	r20, 0xFE	; 254
    1e3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e3c:	9e 01       	movw	r18, r28
    1e3e:	2c 5f       	subi	r18, 0xFC	; 252
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	8e 01       	movw	r16, r28
    1e44:	0a 5f       	subi	r16, 0xFA	; 250
    1e46:	1f 4f       	sbci	r17, 0xFF	; 255
    1e48:	f8 e0       	ldi	r31, 0x08	; 8
    1e4a:	ef 2e       	mov	r14, r31
    1e4c:	f1 2c       	mov	r15, r1
    1e4e:	ec 0e       	add	r14, r28
    1e50:	fd 1e       	adc	r15, r29
    1e52:	ea e0       	ldi	r30, 0x0A	; 10
    1e54:	ce 2e       	mov	r12, r30
    1e56:	d1 2c       	mov	r13, r1
    1e58:	cc 0e       	add	r12, r28
    1e5a:	dd 1e       	adc	r13, r29
    1e5c:	0e 94 80 02 	call	0x500	; 0x500 <dry_action>
				if(state == END){
    1e60:	35 e2       	ldi	r19, 0x25	; 37
    1e62:	83 16       	cp	r8, r19
    1e64:	91 04       	cpc	r9, r1
    1e66:	71 f4       	brne	.+28     	; 0x1e84 <main+0xf64>
					plateLoadMotor = 0;
    1e68:	1b 82       	std	Y+3, r1	; 0x03
    1e6a:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1e6c:	80 91 61 04 	lds	r24, 0x0461
    1e70:	8b 7f       	andi	r24, 0xFB	; 251
    1e72:	80 93 61 04 	sts	0x0461, r24
					if(print35 == 1){
    1e76:	22 20       	and	r2, r2
    1e78:	29 f0       	breq	.+10     	; 0x1e84 <main+0xf64>
						//clear();
						serial_print_string("END OF CYCLE");
    1e7a:	8e ea       	ldi	r24, 0xAE	; 174
    1e7c:	93 e0       	ldi	r25, 0x03	; 3
    1e7e:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
    1e82:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1e84:	4a 81       	ldd	r20, Y+2	; 0x02
    1e86:	5b 81       	ldd	r21, Y+3	; 0x03
    1e88:	2c 81       	ldd	r18, Y+4	; 0x04
    1e8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e8c:	0e 81       	ldd	r16, Y+6	; 0x06
    1e8e:	1f 81       	ldd	r17, Y+7	; 0x07
    1e90:	e8 84       	ldd	r14, Y+8	; 0x08
    1e92:	f9 84       	ldd	r15, Y+9	; 0x09
    1e94:	ca 84       	ldd	r12, Y+10	; 0x0a
    1e96:	db 84       	ldd	r13, Y+11	; 0x0b
    1e98:	c3 01       	movw	r24, r6
    1e9a:	b2 01       	movw	r22, r4
    1e9c:	0e 94 03 06 	call	0xc06	; 0xc06 <motor_and_write>

				serial_check(); counter++;
    1ea0:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <serial_check>
				delay_ms(1);
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("FIRST B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1eac:	46 e2       	ldi	r20, 0x26	; 38
    1eae:	84 16       	cp	r8, r20
    1eb0:	91 04       	cpc	r9, r1
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <main+0xf96>
    1eb4:	ec c3       	rjmp	.+2008   	; 0x268e <main+0x176e>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1eb6:	08 94       	sec
    1eb8:	61 1c       	adc	r6, r1
    1eba:	71 1c       	adc	r7, r1
    1ebc:	d2 ce       	rjmp	.-604    	; 0x1c62 <main+0xd42>
				delay_ms(1);
   		 	}
		}


		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1ec4:	88 23       	and	r24, r24
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <main+0xfaa>
    1ec8:	1a c1       	rjmp	.+564    	; 0x20fe <main+0x11de>
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1ed0:	88 23       	and	r24, r24
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <main+0xfb6>
    1ed4:	14 c1       	rjmp	.+552    	; 0x20fe <main+0x11de>
			lcd_goto_xy(7,0);
    1ed6:	87 e0       	ldi	r24, 0x07	; 7
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
			serial_print_string("SECOND B");
    1ede:	8a e8       	ldi	r24, 0x8A	; 138
    1ee0:	93 e0       	ldi	r25, 0x03	; 3
    1ee2:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9d 83       	std	Y+5, r25	; 0x05
    1eec:	8c 83       	std	Y+4, r24	; 0x04
    1eee:	80 91 61 04 	lds	r24, 0x0461
    1ef2:	80 62       	ori	r24, 0x20	; 32
    1ef4:	80 93 61 04 	sts	0x0461, r24
    1ef8:	33 24       	eor	r3, r3
    1efa:	33 94       	inc	r3
    1efc:	88 24       	eor	r8, r8
    1efe:	99 24       	eor	r9, r9
    1f00:	66 24       	eor	r6, r6
    1f02:	77 24       	eor	r7, r7
    1f04:	44 24       	eor	r4, r4
    1f06:	55 24       	eor	r5, r5
    1f08:	22 24       	eor	r2, r2
    1f0a:	23 94       	inc	r2
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1f0c:	84 e4       	ldi	r24, 0x44	; 68
    1f0e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1f18:	85 e4       	ldi	r24, 0x45	; 69
    1f1a:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1f1e:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1f22:	80 93 5c 04 	sts	0x045C, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1f26:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1f2a:	80 93 5f 04 	sts	0x045F, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1f2e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    1f32:	81 14       	cp	r8, r1
    1f34:	91 04       	cpc	r9, r1
    1f36:	b1 f0       	breq	.+44     	; 0x1f64 <main+0x1044>
    1f38:	33 20       	and	r3, r3
    1f3a:	a1 f0       	breq	.+40     	; 0x1f64 <main+0x1044>
					lcd_goto_xy(6,1);
    1f3c:	86 e0       	ldi	r24, 0x06	; 6
    1f3e:	61 e0       	ldi	r22, 0x01	; 1
    1f40:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
					serial_print_string("     ");
    1f44:	81 ea       	ldi	r24, 0xA1	; 161
    1f46:	93 e0       	ldi	r25, 0x03	; 3
    1f48:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
					lcd_goto_xy(0,1);
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	61 e0       	ldi	r22, 0x01	; 1
    1f50:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
					serial_print_string("STATE ");
    1f54:	87 ea       	ldi	r24, 0xA7	; 167
    1f56:	93 e0       	ldi	r25, 0x03	; 3
    1f58:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
					serial_print_int(state);
    1f5c:	c4 01       	movw	r24, r8
    1f5e:	0e 94 72 07 	call	0xee4	; 0xee4 <serial_print_int>
    1f62:	33 24       	eor	r3, r3
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1f64:	c3 01       	movw	r24, r6
    1f66:	be 01       	movw	r22, r28
    1f68:	64 5f       	subi	r22, 0xF4	; 244
    1f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6c:	0e 94 39 03 	call	0x672	; 0x672 <button_debounce>
    1f70:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1f72:	c4 01       	movw	r24, r8
    1f74:	a3 01       	movw	r20, r6
    1f76:	92 01       	movw	r18, r4
    1f78:	0e 94 98 03 	call	0x730	; 0x730 <init_trans>
    1f7c:	88 23       	and	r24, r24
    1f7e:	31 f0       	breq	.+12     	; 0x1f8c <main+0x106c>
					buttonTriggered = false;
					state ++;
    1f80:	08 94       	sec
    1f82:	81 1c       	adc	r8, r1
    1f84:	91 1c       	adc	r9, r1
    1f86:	23 01       	movw	r4, r6
    1f88:	33 24       	eor	r3, r3
    1f8a:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == MOVEC1 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0){
    1f8c:	58 e0       	ldi	r21, 0x08	; 8
    1f8e:	85 16       	cp	r8, r21
    1f90:	91 04       	cpc	r9, r1
    1f92:	51 f4       	brne	.+20     	; 0x1fa8 <main+0x1088>
    1f94:	80 91 5c 04 	lds	r24, 0x045C
    1f98:	85 fd       	sbrc	r24, 5
    1f9a:	06 c0       	rjmp	.+12     	; 0x1fa8 <main+0x1088>
    1f9c:	23 01       	movw	r4, r6
    1f9e:	33 24       	eor	r3, r3
    1fa0:	33 94       	inc	r3
    1fa2:	b3 e1       	ldi	r27, 0x13	; 19
    1fa4:	8b 2e       	mov	r8, r27
    1fa6:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}

				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    1fa8:	c4 01       	movw	r24, r8
    1faa:	b3 01       	movw	r22, r6
    1fac:	a2 01       	movw	r20, r4
    1fae:	0e 94 bf 04 	call	0x97e	; 0x97e <secondB_trans>
    1fb2:	88 23       	and	r24, r24
    1fb4:	31 f0       	breq	.+12     	; 0x1fc2 <main+0x10a2>
					state ++;
    1fb6:	08 94       	sec
    1fb8:	81 1c       	adc	r8, r1
    1fba:	91 1c       	adc	r9, r1
    1fbc:	23 01       	movw	r4, r6
    1fbe:	33 24       	eor	r3, r3
    1fc0:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef)){
    1fc2:	c4 01       	movw	r24, r8
    1fc4:	b3 01       	movw	r22, r6
    1fc6:	a2 01       	movw	r20, r4
    1fc8:	0e 94 6d 05 	call	0xada	; 0xada <dry_trans>
    1fcc:	88 23       	and	r24, r24
    1fce:	31 f0       	breq	.+12     	; 0x1fdc <main+0x10bc>
					state ++;
    1fd0:	08 94       	sec
    1fd2:	81 1c       	adc	r8, r1
    1fd4:	91 1c       	adc	r9, r1
    1fd6:	23 01       	movw	r4, r6
    1fd8:	33 24       	eor	r3, r3
    1fda:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    1fdc:	85 e2       	ldi	r24, 0x25	; 37
    1fde:	88 16       	cp	r8, r24
    1fe0:	91 04       	cpc	r9, r1
    1fe2:	41 f4       	brne	.+16     	; 0x1ff4 <main+0x10d4>
    1fe4:	c3 01       	movw	r24, r6
    1fe6:	84 19       	sub	r24, r4
    1fe8:	95 09       	sbc	r25, r5
    1fea:	0b 97       	sbiw	r24, 0x0b	; 11
    1fec:	1c f0       	brlt	.+6      	; 0x1ff4 <main+0x10d4>
    1fee:	a6 e2       	ldi	r26, 0x26	; 38
    1ff0:	8a 2e       	mov	r8, r26
    1ff2:	91 2c       	mov	r9, r1
				}


				//state actions
				
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1ff4:	c4 01       	movw	r24, r8
    1ff6:	b3 01       	movw	r22, r6
    1ff8:	ae 01       	movw	r20, r28
    1ffa:	4e 5f       	subi	r20, 0xFE	; 254
    1ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ffe:	9e 01       	movw	r18, r28
    2000:	2c 5f       	subi	r18, 0xFC	; 252
    2002:	3f 4f       	sbci	r19, 0xFF	; 255
    2004:	8e 01       	movw	r16, r28
    2006:	0a 5f       	subi	r16, 0xFA	; 250
    2008:	1f 4f       	sbci	r17, 0xFF	; 255
    200a:	f8 e0       	ldi	r31, 0x08	; 8
    200c:	ef 2e       	mov	r14, r31
    200e:	f1 2c       	mov	r15, r1
    2010:	ec 0e       	add	r14, r28
    2012:	fd 1e       	adc	r15, r29
    2014:	ea e0       	ldi	r30, 0x0A	; 10
    2016:	ce 2e       	mov	r12, r30
    2018:	d1 2c       	mov	r13, r1
    201a:	cc 0e       	add	r12, r28
    201c:	dd 1e       	adc	r13, r29
    201e:	5e 01       	movw	r10, r28
    2020:	08 94       	sec
    2022:	a1 1c       	adc	r10, r1
    2024:	b1 1c       	adc	r11, r1
    2026:	0e 94 d0 06 	call	0xda0	; 0xda0 <init_action>
				if(state == MOVEC1){
    202a:	98 e0       	ldi	r25, 0x08	; 8
    202c:	89 16       	cp	r8, r25
    202e:	91 04       	cpc	r9, r1
    2030:	49 f4       	brne	.+18     	; 0x2044 <main+0x1124>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2032:	80 91 61 04 	lds	r24, 0x0461
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2036:	21 e0       	ldi	r18, 0x01	; 1
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	3d 83       	std	Y+5, r19	; 0x05
    203c:	2c 83       	std	Y+4, r18	; 0x04
    203e:	80 63       	ori	r24, 0x30	; 48
    2040:	80 93 61 04 	sts	0x0461, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2044:	c4 01       	movw	r24, r8
    2046:	b3 01       	movw	r22, r6
    2048:	ae 01       	movw	r20, r28
    204a:	4e 5f       	subi	r20, 0xFE	; 254
    204c:	5f 4f       	sbci	r21, 0xFF	; 255
    204e:	9e 01       	movw	r18, r28
    2050:	2c 5f       	subi	r18, 0xFC	; 252
    2052:	3f 4f       	sbci	r19, 0xFF	; 255
    2054:	8e 01       	movw	r16, r28
    2056:	0a 5f       	subi	r16, 0xFA	; 250
    2058:	1f 4f       	sbci	r17, 0xFF	; 255
    205a:	b8 e0       	ldi	r27, 0x08	; 8
    205c:	eb 2e       	mov	r14, r27
    205e:	f1 2c       	mov	r15, r1
    2060:	ec 0e       	add	r14, r28
    2062:	fd 1e       	adc	r15, r29
    2064:	aa e0       	ldi	r26, 0x0A	; 10
    2066:	ca 2e       	mov	r12, r26
    2068:	d1 2c       	mov	r13, r1
    206a:	cc 0e       	add	r12, r28
    206c:	dd 1e       	adc	r13, r29
    206e:	0e 94 de 01 	call	0x3bc	; 0x3bc <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2072:	c4 01       	movw	r24, r8
    2074:	b3 01       	movw	r22, r6
    2076:	ae 01       	movw	r20, r28
    2078:	4e 5f       	subi	r20, 0xFE	; 254
    207a:	5f 4f       	sbci	r21, 0xFF	; 255
    207c:	9e 01       	movw	r18, r28
    207e:	2c 5f       	subi	r18, 0xFC	; 252
    2080:	3f 4f       	sbci	r19, 0xFF	; 255
    2082:	8e 01       	movw	r16, r28
    2084:	0a 5f       	subi	r16, 0xFA	; 250
    2086:	1f 4f       	sbci	r17, 0xFF	; 255
    2088:	f8 e0       	ldi	r31, 0x08	; 8
    208a:	ef 2e       	mov	r14, r31
    208c:	f1 2c       	mov	r15, r1
    208e:	ec 0e       	add	r14, r28
    2090:	fd 1e       	adc	r15, r29
    2092:	ea e0       	ldi	r30, 0x0A	; 10
    2094:	ce 2e       	mov	r12, r30
    2096:	d1 2c       	mov	r13, r1
    2098:	cc 0e       	add	r12, r28
    209a:	dd 1e       	adc	r13, r29
    209c:	0e 94 80 02 	call	0x500	; 0x500 <dry_action>
				if(state == END){
    20a0:	35 e2       	ldi	r19, 0x25	; 37
    20a2:	83 16       	cp	r8, r19
    20a4:	91 04       	cpc	r9, r1
    20a6:	71 f4       	brne	.+28     	; 0x20c4 <main+0x11a4>
					plateLoadMotor = 0;
    20a8:	1b 82       	std	Y+3, r1	; 0x03
    20aa:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    20ac:	80 91 61 04 	lds	r24, 0x0461
    20b0:	8b 7f       	andi	r24, 0xFB	; 251
    20b2:	80 93 61 04 	sts	0x0461, r24
					if(print35 == 1){
    20b6:	22 20       	and	r2, r2
    20b8:	29 f0       	breq	.+10     	; 0x20c4 <main+0x11a4>
						//clear();
						serial_print_string("END OF CYCLE");
    20ba:	8e ea       	ldi	r24, 0xAE	; 174
    20bc:	93 e0       	ldi	r25, 0x03	; 3
    20be:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
    20c2:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    20c4:	4a 81       	ldd	r20, Y+2	; 0x02
    20c6:	5b 81       	ldd	r21, Y+3	; 0x03
    20c8:	2c 81       	ldd	r18, Y+4	; 0x04
    20ca:	3d 81       	ldd	r19, Y+5	; 0x05
    20cc:	0e 81       	ldd	r16, Y+6	; 0x06
    20ce:	1f 81       	ldd	r17, Y+7	; 0x07
    20d0:	e8 84       	ldd	r14, Y+8	; 0x08
    20d2:	f9 84       	ldd	r15, Y+9	; 0x09
    20d4:	ca 84       	ldd	r12, Y+10	; 0x0a
    20d6:	db 84       	ldd	r13, Y+11	; 0x0b
    20d8:	c3 01       	movw	r24, r6
    20da:	b2 01       	movw	r22, r4
    20dc:	0e 94 03 06 	call	0xc06	; 0xc06 <motor_and_write>

				serial_check(); counter++;
    20e0:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <serial_check>
				delay_ms(1);
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>

		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("SECOND B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    20ec:	46 e2       	ldi	r20, 0x26	; 38
    20ee:	84 16       	cp	r8, r20
    20f0:	91 04       	cpc	r9, r1
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <main+0x11d6>
    20f4:	cc c2       	rjmp	.+1432   	; 0x268e <main+0x176e>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    20f6:	08 94       	sec
    20f8:	61 1c       	adc	r6, r1
    20fa:	71 1c       	adc	r7, r1
    20fc:	07 cf       	rjmp	.-498    	; 0x1f0c <main+0xfec>
				delay_ms(1);
   		 	}
		}


		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    2104:	88 23       	and	r24, r24
    2106:	09 f0       	breq	.+2      	; 0x210a <main+0x11ea>
    2108:	55 c1       	rjmp	.+682    	; 0x23b4 <main+0x1494>
    210a:	82 e0       	ldi	r24, 0x02	; 2
    210c:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    2110:	88 23       	and	r24, r24
    2112:	09 f4       	brne	.+2      	; 0x2116 <main+0x11f6>
    2114:	4f c1       	rjmp	.+670    	; 0x23b4 <main+0x1494>
			lcd_goto_xy(7,0);
    2116:	87 e0       	ldi	r24, 0x07	; 7
    2118:	60 e0       	ldi	r22, 0x00	; 0
    211a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
			serial_print_string("BOTH B");
    211e:	83 e9       	ldi	r24, 0x93	; 147
    2120:	93 e0       	ldi	r25, 0x03	; 3
    2122:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9d 83       	std	Y+5, r25	; 0x05
    212c:	8c 83       	std	Y+4, r24	; 0x04
    212e:	80 91 61 04 	lds	r24, 0x0461
    2132:	80 62       	ori	r24, 0x20	; 32
    2134:	80 93 61 04 	sts	0x0461, r24
    2138:	33 24       	eor	r3, r3
    213a:	33 94       	inc	r3
    213c:	88 24       	eor	r8, r8
    213e:	99 24       	eor	r9, r9
    2140:	66 24       	eor	r6, r6
    2142:	77 24       	eor	r7, r7
    2144:	44 24       	eor	r4, r4
    2146:	55 24       	eor	r5, r5
    2148:	22 24       	eor	r2, r2
    214a:	23 94       	inc	r2
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    214c:	84 e4       	ldi	r24, 0x44	; 68
    214e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2158:	85 e4       	ldi	r24, 0x45	; 69
    215a:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    215e:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    2162:	80 93 5c 04 	sts	0x045C, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2166:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    216a:	80 93 5f 04 	sts	0x045F, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    216e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    2172:	81 14       	cp	r8, r1
    2174:	91 04       	cpc	r9, r1
    2176:	b1 f0       	breq	.+44     	; 0x21a4 <main+0x1284>
    2178:	33 20       	and	r3, r3
    217a:	a1 f0       	breq	.+40     	; 0x21a4 <main+0x1284>
					lcd_goto_xy(6,1);
    217c:	86 e0       	ldi	r24, 0x06	; 6
    217e:	61 e0       	ldi	r22, 0x01	; 1
    2180:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
					serial_print_string("       ");
    2184:	8b eb       	ldi	r24, 0xBB	; 187
    2186:	93 e0       	ldi	r25, 0x03	; 3
    2188:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
					lcd_goto_xy(0,1);
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	61 e0       	ldi	r22, 0x01	; 1
    2190:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
					serial_print_string("STATE ");
    2194:	87 ea       	ldi	r24, 0xA7	; 167
    2196:	93 e0       	ldi	r25, 0x03	; 3
    2198:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
					serial_print_int(state);
    219c:	c4 01       	movw	r24, r8
    219e:	0e 94 72 07 	call	0xee4	; 0xee4 <serial_print_int>
    21a2:	33 24       	eor	r3, r3
					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    21a4:	c3 01       	movw	r24, r6
    21a6:	be 01       	movw	r22, r28
    21a8:	64 5f       	subi	r22, 0xF4	; 244
    21aa:	7f 4f       	sbci	r23, 0xFF	; 255
    21ac:	0e 94 39 03 	call	0x672	; 0x672 <button_debounce>
    21b0:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    21b2:	c4 01       	movw	r24, r8
    21b4:	a3 01       	movw	r20, r6
    21b6:	92 01       	movw	r18, r4
    21b8:	0e 94 98 03 	call	0x730	; 0x730 <init_trans>
    21bc:	88 23       	and	r24, r24
    21be:	31 f0       	breq	.+12     	; 0x21cc <main+0x12ac>
					buttonTriggered = false;
					state ++;
    21c0:	08 94       	sec
    21c2:	81 1c       	adc	r8, r1
    21c4:	91 1c       	adc	r9, r1
    21c6:	23 01       	movw	r4, r6
    21c8:	33 24       	eor	r3, r3
    21ca:	33 94       	inc	r3
					printVar = true;
				}

				
				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    21cc:	c4 01       	movw	r24, r8
    21ce:	b3 01       	movw	r22, r6
    21d0:	a2 01       	movw	r20, r4
    21d2:	0e 94 1f 04 	call	0x83e	; 0x83e <firstB_trans>
    21d6:	88 23       	and	r24, r24
    21d8:	71 f0       	breq	.+28     	; 0x21f6 <main+0x12d6>
					state ++;
    21da:	08 94       	sec
    21dc:	81 1c       	adc	r8, r1
    21de:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    21e0:	5c e0       	ldi	r21, 0x0C	; 12
    21e2:	85 16       	cp	r8, r21
    21e4:	91 04       	cpc	r9, r1
    21e6:	e1 f0       	breq	.+56     	; 0x2220 <main+0x1300>
    21e8:	80 e1       	ldi	r24, 0x10	; 16
    21ea:	88 16       	cp	r8, r24
    21ec:	91 04       	cpc	r9, r1
    21ee:	c1 f0       	breq	.+48     	; 0x2220 <main+0x1300>
    21f0:	23 01       	movw	r4, r6
    21f2:	33 24       	eor	r3, r3
    21f4:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    21f6:	91 e1       	ldi	r25, 0x11	; 17
    21f8:	89 16       	cp	r8, r25
    21fa:	91 04       	cpc	r9, r1
    21fc:	99 f4       	brne	.+38     	; 0x2224 <main+0x1304>
    21fe:	93 01       	movw	r18, r6
    2200:	24 19       	sub	r18, r4
    2202:	35 09       	sbc	r19, r5
    2204:	80 91 c7 03 	lds	r24, 0x03C7
    2208:	90 91 c8 03 	lds	r25, 0x03C8
    220c:	82 17       	cp	r24, r18
    220e:	93 07       	cpc	r25, r19
    2210:	4c f4       	brge	.+18     	; 0x2224 <main+0x1304>
    2212:	23 01       	movw	r4, r6
    2214:	33 24       	eor	r3, r3
    2216:	33 94       	inc	r3
    2218:	02 e1       	ldi	r16, 0x12	; 18
    221a:	80 2e       	mov	r8, r16
    221c:	91 2c       	mov	r9, r1
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <main+0x1304>
    2220:	33 24       	eor	r3, r3
    2222:	33 94       	inc	r3
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    2224:	c4 01       	movw	r24, r8
    2226:	b3 01       	movw	r22, r6
    2228:	a2 01       	movw	r20, r4
    222a:	0e 94 bf 04 	call	0x97e	; 0x97e <secondB_trans>
    222e:	88 23       	and	r24, r24
    2230:	31 f0       	breq	.+12     	; 0x223e <main+0x131e>
					state ++;
    2232:	08 94       	sec
    2234:	81 1c       	adc	r8, r1
    2236:	91 1c       	adc	r9, r1
    2238:	23 01       	movw	r4, r6
    223a:	33 24       	eor	r3, r3
    223c:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef)){
    223e:	c4 01       	movw	r24, r8
    2240:	b3 01       	movw	r22, r6
    2242:	a2 01       	movw	r20, r4
    2244:	0e 94 6d 05 	call	0xada	; 0xada <dry_trans>
    2248:	88 23       	and	r24, r24
    224a:	31 f0       	breq	.+12     	; 0x2258 <main+0x1338>
					state ++;
    224c:	08 94       	sec
    224e:	81 1c       	adc	r8, r1
    2250:	91 1c       	adc	r9, r1
    2252:	23 01       	movw	r4, r6
    2254:	33 24       	eor	r3, r3
    2256:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    2258:	25 e2       	ldi	r18, 0x25	; 37
    225a:	82 16       	cp	r8, r18
    225c:	91 04       	cpc	r9, r1
    225e:	41 f4       	brne	.+16     	; 0x2270 <main+0x1350>
    2260:	c3 01       	movw	r24, r6
    2262:	84 19       	sub	r24, r4
    2264:	95 09       	sbc	r25, r5
    2266:	0b 97       	sbiw	r24, 0x0b	; 11
    2268:	1c f0       	brlt	.+6      	; 0x2270 <main+0x1350>
    226a:	16 e2       	ldi	r17, 0x26	; 38
    226c:	81 2e       	mov	r8, r17
    226e:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    2270:	c4 01       	movw	r24, r8
    2272:	b3 01       	movw	r22, r6
    2274:	ae 01       	movw	r20, r28
    2276:	4e 5f       	subi	r20, 0xFE	; 254
    2278:	5f 4f       	sbci	r21, 0xFF	; 255
    227a:	9e 01       	movw	r18, r28
    227c:	2c 5f       	subi	r18, 0xFC	; 252
    227e:	3f 4f       	sbci	r19, 0xFF	; 255
    2280:	8e 01       	movw	r16, r28
    2282:	0a 5f       	subi	r16, 0xFA	; 250
    2284:	1f 4f       	sbci	r17, 0xFF	; 255
    2286:	b8 e0       	ldi	r27, 0x08	; 8
    2288:	eb 2e       	mov	r14, r27
    228a:	f1 2c       	mov	r15, r1
    228c:	ec 0e       	add	r14, r28
    228e:	fd 1e       	adc	r15, r29
    2290:	aa e0       	ldi	r26, 0x0A	; 10
    2292:	ca 2e       	mov	r12, r26
    2294:	d1 2c       	mov	r13, r1
    2296:	cc 0e       	add	r12, r28
    2298:	dd 1e       	adc	r13, r29
    229a:	5e 01       	movw	r10, r28
    229c:	08 94       	sec
    229e:	a1 1c       	adc	r10, r1
    22a0:	b1 1c       	adc	r11, r1
    22a2:	0e 94 d0 06 	call	0xda0	; 0xda0 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    22a6:	c4 01       	movw	r24, r8
    22a8:	b3 01       	movw	r22, r6
    22aa:	ae 01       	movw	r20, r28
    22ac:	4e 5f       	subi	r20, 0xFE	; 254
    22ae:	5f 4f       	sbci	r21, 0xFF	; 255
    22b0:	9e 01       	movw	r18, r28
    22b2:	2c 5f       	subi	r18, 0xFC	; 252
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	8e 01       	movw	r16, r28
    22b8:	0a 5f       	subi	r16, 0xFA	; 250
    22ba:	1f 4f       	sbci	r17, 0xFF	; 255
    22bc:	f8 e0       	ldi	r31, 0x08	; 8
    22be:	ef 2e       	mov	r14, r31
    22c0:	f1 2c       	mov	r15, r1
    22c2:	ec 0e       	add	r14, r28
    22c4:	fd 1e       	adc	r15, r29
    22c6:	ea e0       	ldi	r30, 0x0A	; 10
    22c8:	ce 2e       	mov	r12, r30
    22ca:	d1 2c       	mov	r13, r1
    22cc:	cc 0e       	add	r12, r28
    22ce:	dd 1e       	adc	r13, r29
    22d0:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    22d4:	31 e1       	ldi	r19, 0x11	; 17
    22d6:	83 16       	cp	r8, r19
    22d8:	91 04       	cpc	r9, r1
    22da:	79 f4       	brne	.+30     	; 0x22fa <main+0x13da>
					brush1Motor = 0;
    22dc:	1f 82       	std	Y+7, r1	; 0x07
    22de:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    22e0:	1d 82       	std	Y+5, r1	; 0x05
    22e2:	1c 82       	std	Y+4, r1	; 0x04
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    22e4:	80 91 5d 04 	lds	r24, 0x045D
    22e8:	8e 7f       	andi	r24, 0xFE	; 254
    22ea:	80 93 5d 04 	sts	0x045D, r24
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    22ee:	80 91 60 04 	lds	r24, 0x0460
    22f2:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    22f4:	80 62       	ori	r24, 0x20	; 32
    22f6:	80 93 60 04 	sts	0x0460, r24
				}
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    22fa:	c4 01       	movw	r24, r8
    22fc:	b3 01       	movw	r22, r6
    22fe:	ae 01       	movw	r20, r28
    2300:	4e 5f       	subi	r20, 0xFE	; 254
    2302:	5f 4f       	sbci	r21, 0xFF	; 255
    2304:	9e 01       	movw	r18, r28
    2306:	2c 5f       	subi	r18, 0xFC	; 252
    2308:	3f 4f       	sbci	r19, 0xFF	; 255
    230a:	8e 01       	movw	r16, r28
    230c:	0a 5f       	subi	r16, 0xFA	; 250
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
    2310:	b8 e0       	ldi	r27, 0x08	; 8
    2312:	eb 2e       	mov	r14, r27
    2314:	f1 2c       	mov	r15, r1
    2316:	ec 0e       	add	r14, r28
    2318:	fd 1e       	adc	r15, r29
    231a:	aa e0       	ldi	r26, 0x0A	; 10
    231c:	ca 2e       	mov	r12, r26
    231e:	d1 2c       	mov	r13, r1
    2320:	cc 0e       	add	r12, r28
    2322:	dd 1e       	adc	r13, r29
    2324:	0e 94 de 01 	call	0x3bc	; 0x3bc <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2328:	c4 01       	movw	r24, r8
    232a:	b3 01       	movw	r22, r6
    232c:	ae 01       	movw	r20, r28
    232e:	4e 5f       	subi	r20, 0xFE	; 254
    2330:	5f 4f       	sbci	r21, 0xFF	; 255
    2332:	9e 01       	movw	r18, r28
    2334:	2c 5f       	subi	r18, 0xFC	; 252
    2336:	3f 4f       	sbci	r19, 0xFF	; 255
    2338:	8e 01       	movw	r16, r28
    233a:	0a 5f       	subi	r16, 0xFA	; 250
    233c:	1f 4f       	sbci	r17, 0xFF	; 255
    233e:	f8 e0       	ldi	r31, 0x08	; 8
    2340:	ef 2e       	mov	r14, r31
    2342:	f1 2c       	mov	r15, r1
    2344:	ec 0e       	add	r14, r28
    2346:	fd 1e       	adc	r15, r29
    2348:	ea e0       	ldi	r30, 0x0A	; 10
    234a:	ce 2e       	mov	r12, r30
    234c:	d1 2c       	mov	r13, r1
    234e:	cc 0e       	add	r12, r28
    2350:	dd 1e       	adc	r13, r29
    2352:	0e 94 80 02 	call	0x500	; 0x500 <dry_action>
				if(state == END){
    2356:	45 e2       	ldi	r20, 0x25	; 37
    2358:	84 16       	cp	r8, r20
    235a:	91 04       	cpc	r9, r1
    235c:	71 f4       	brne	.+28     	; 0x237a <main+0x145a>
					plateLoadMotor = 0;
    235e:	1b 82       	std	Y+3, r1	; 0x03
    2360:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2362:	80 91 61 04 	lds	r24, 0x0461
    2366:	8b 7f       	andi	r24, 0xFB	; 251
    2368:	80 93 61 04 	sts	0x0461, r24
					if(print35 == 1){
    236c:	22 20       	and	r2, r2
    236e:	29 f0       	breq	.+10     	; 0x237a <main+0x145a>
						//clear();
						serial_print_string("END OF CYCLE");
    2370:	8e ea       	ldi	r24, 0xAE	; 174
    2372:	93 e0       	ldi	r25, 0x03	; 3
    2374:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
    2378:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    237a:	4a 81       	ldd	r20, Y+2	; 0x02
    237c:	5b 81       	ldd	r21, Y+3	; 0x03
    237e:	2c 81       	ldd	r18, Y+4	; 0x04
    2380:	3d 81       	ldd	r19, Y+5	; 0x05
    2382:	0e 81       	ldd	r16, Y+6	; 0x06
    2384:	1f 81       	ldd	r17, Y+7	; 0x07
    2386:	e8 84       	ldd	r14, Y+8	; 0x08
    2388:	f9 84       	ldd	r15, Y+9	; 0x09
    238a:	ca 84       	ldd	r12, Y+10	; 0x0a
    238c:	db 84       	ldd	r13, Y+11	; 0x0b
    238e:	c3 01       	movw	r24, r6
    2390:	b2 01       	movw	r22, r4
    2392:	0e 94 03 06 	call	0xc06	; 0xc06 <motor_and_write>

				serial_check(); counter++;
    2396:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <serial_check>
				delay_ms(1);
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>

		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("BOTH B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    23a2:	56 e2       	ldi	r21, 0x26	; 38
    23a4:	85 16       	cp	r8, r21
    23a6:	91 04       	cpc	r9, r1
    23a8:	09 f4       	brne	.+2      	; 0x23ac <main+0x148c>
    23aa:	71 c1       	rjmp	.+738    	; 0x268e <main+0x176e>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    23ac:	08 94       	sec
    23ae:	61 1c       	adc	r6, r1
    23b0:	71 1c       	adc	r7, r1
    23b2:	cc ce       	rjmp	.-616    	; 0x214c <main+0x122c>
				delay_ms(1);
   		 	}
		}

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    23ba:	88 23       	and	r24, r24
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <main+0x14a0>
    23be:	67 c1       	rjmp	.+718    	; 0x268e <main+0x176e>
    23c0:	82 e0       	ldi	r24, 0x02	; 2
    23c2:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    23c6:	88 23       	and	r24, r24
    23c8:	09 f4       	brne	.+2      	; 0x23cc <main+0x14ac>
    23ca:	61 c1       	rjmp	.+706    	; 0x268e <main+0x176e>
			lcd_goto_xy(7,0);
    23cc:	87 e0       	ldi	r24, 0x07	; 7
    23ce:	60 e0       	ldi	r22, 0x00	; 0
    23d0:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
			serial_print_string("DEBUG");
    23d4:	8a ea       	ldi	r24, 0xAA	; 170
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9d 83       	std	Y+5, r25	; 0x05
    23e2:	8c 83       	std	Y+4, r24	; 0x04
    23e4:	80 91 61 04 	lds	r24, 0x0461
    23e8:	80 62       	ori	r24, 0x20	; 32
    23ea:	80 93 61 04 	sts	0x0461, r24
    23ee:	1a 8a       	std	Y+18, r1	; 0x12
    23f0:	19 8a       	std	Y+17, r1	; 0x11
    23f2:	33 24       	eor	r3, r3
    23f4:	33 94       	inc	r3
    23f6:	88 24       	eor	r8, r8
    23f8:	99 24       	eor	r9, r9
    23fa:	66 24       	eor	r6, r6
    23fc:	77 24       	eor	r7, r7
    23fe:	44 24       	eor	r4, r4
    2400:	55 24       	eor	r5, r5
    2402:	22 24       	eor	r2, r2
    2404:	23 94       	inc	r2
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    2406:	84 e4       	ldi	r24, 0x44	; 68
    2408:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2412:	85 e4       	ldi	r24, 0x45	; 69
    2414:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    2418:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    241c:	80 93 5c 04 	sts	0x045C, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2420:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    2424:	80 93 5f 04 	sts	0x045F, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    2428:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    242c:	81 14       	cp	r8, r1
    242e:	91 04       	cpc	r9, r1
    2430:	b1 f0       	breq	.+44     	; 0x245e <main+0x153e>
    2432:	33 20       	and	r3, r3
    2434:	a1 f0       	breq	.+40     	; 0x245e <main+0x153e>
					lcd_goto_xy(6,1);
    2436:	86 e0       	ldi	r24, 0x06	; 6
    2438:	61 e0       	ldi	r22, 0x01	; 1
    243a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
					serial_print_string("     ");
    243e:	81 ea       	ldi	r24, 0xA1	; 161
    2440:	93 e0       	ldi	r25, 0x03	; 3
    2442:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
					lcd_goto_xy(0,1);
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	61 e0       	ldi	r22, 0x01	; 1
    244a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <lcd_goto_xy>
					serial_print_string("STATE ");
    244e:	87 ea       	ldi	r24, 0xA7	; 167
    2450:	93 e0       	ldi	r25, 0x03	; 3
    2452:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
					serial_print_int(state);
    2456:	c4 01       	movw	r24, r8
    2458:	0e 94 72 07 	call	0xee4	; 0xee4 <serial_print_int>
    245c:	33 24       	eor	r3, r3
					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    245e:	c3 01       	movw	r24, r6
    2460:	be 01       	movw	r22, r28
    2462:	64 5f       	subi	r22, 0xF4	; 244
    2464:	7f 4f       	sbci	r23, 0xFF	; 255
    2466:	0e 94 39 03 	call	0x672	; 0x672 <button_debounce>
    246a:	18 2f       	mov	r17, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    246c:	c4 01       	movw	r24, r8
    246e:	61 2f       	mov	r22, r17
    2470:	a3 01       	movw	r20, r6
    2472:	92 01       	movw	r18, r4
    2474:	0e 94 98 03 	call	0x730	; 0x730 <init_trans>
    2478:	88 23       	and	r24, r24
    247a:	39 f0       	breq	.+14     	; 0x248a <main+0x156a>
    247c:	23 01       	movw	r4, r6
    247e:	33 24       	eor	r3, r3
    2480:	33 94       	inc	r3
    2482:	37 e2       	ldi	r19, 0x27	; 39
    2484:	83 2e       	mov	r8, r19
    2486:	91 2c       	mov	r9, r1
    2488:	10 e0       	ldi	r17, 0x00	; 0
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    248a:	c4 01       	movw	r24, r8
    248c:	b3 01       	movw	r22, r6
    248e:	a2 01       	movw	r20, r4
    2490:	0e 94 1f 04 	call	0x83e	; 0x83e <firstB_trans>
    2494:	88 23       	and	r24, r24
    2496:	71 f4       	brne	.+28     	; 0x24b4 <main+0x1594>
					state = WAIT;
					if(state != B1STOP1 && state != CLEAN1_3)
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    2498:	81 e1       	ldi	r24, 0x11	; 17
    249a:	88 16       	cp	r8, r24
    249c:	91 04       	cpc	r9, r1
    249e:	81 f4       	brne	.+32     	; 0x24c0 <main+0x15a0>
    24a0:	93 01       	movw	r18, r6
    24a2:	24 19       	sub	r18, r4
    24a4:	35 09       	sbc	r19, r5
    24a6:	80 91 c7 03 	lds	r24, 0x03C7
    24aa:	90 91 c8 03 	lds	r25, 0x03C8
    24ae:	82 17       	cp	r24, r18
    24b0:	93 07       	cpc	r25, r19
    24b2:	34 f4       	brge	.+12     	; 0x24c0 <main+0x15a0>
    24b4:	23 01       	movw	r4, r6
    24b6:	33 24       	eor	r3, r3
    24b8:	33 94       	inc	r3
    24ba:	27 e2       	ldi	r18, 0x27	; 39
    24bc:	82 2e       	mov	r8, r18
    24be:	91 2c       	mov	r9, r1
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    24c0:	c4 01       	movw	r24, r8
    24c2:	b3 01       	movw	r22, r6
    24c4:	a2 01       	movw	r20, r4
    24c6:	0e 94 bf 04 	call	0x97e	; 0x97e <secondB_trans>
    24ca:	88 23       	and	r24, r24
    24cc:	31 f0       	breq	.+12     	; 0x24da <main+0x15ba>
    24ce:	23 01       	movw	r4, r6
    24d0:	33 24       	eor	r3, r3
    24d2:	33 94       	inc	r3
    24d4:	97 e2       	ldi	r25, 0x27	; 39
    24d6:	89 2e       	mov	r8, r25
    24d8:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}
				
				//Dry
				if(dry_trans(state, counter, counterRef)){
    24da:	c4 01       	movw	r24, r8
    24dc:	b3 01       	movw	r22, r6
    24de:	a2 01       	movw	r20, r4
    24e0:	0e 94 6d 05 	call	0xada	; 0xada <dry_trans>
    24e4:	88 23       	and	r24, r24
    24e6:	21 f0       	breq	.+8      	; 0x24f0 <main+0x15d0>
    24e8:	23 01       	movw	r4, r6
    24ea:	33 24       	eor	r3, r3
    24ec:	33 94       	inc	r3
    24ee:	11 c0       	rjmp	.+34     	; 0x2512 <main+0x15f2>
					state = WAIT;
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    24f0:	95 e2       	ldi	r25, 0x25	; 37
    24f2:	89 16       	cp	r8, r25
    24f4:	91 04       	cpc	r9, r1
    24f6:	49 f4       	brne	.+18     	; 0x250a <main+0x15ea>
    24f8:	c3 01       	movw	r24, r6
    24fa:	84 19       	sub	r24, r4
    24fc:	95 09       	sbc	r25, r5
    24fe:	0b 97       	sbiw	r24, 0x0b	; 11
    2500:	54 f1       	brlt	.+84     	; 0x2556 <main+0x1636>
    2502:	86 e2       	ldi	r24, 0x26	; 38
    2504:	88 2e       	mov	r8, r24
    2506:	91 2c       	mov	r9, r1
    2508:	26 c0       	rjmp	.+76     	; 0x2556 <main+0x1636>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    250a:	27 e2       	ldi	r18, 0x27	; 39
    250c:	82 16       	cp	r8, r18
    250e:	91 04       	cpc	r9, r1
    2510:	11 f5       	brne	.+68     	; 0x2556 <main+0x1636>
    2512:	11 23       	and	r17, r17
    2514:	21 f4       	brne	.+8      	; 0x251e <main+0x15fe>
    2516:	07 e2       	ldi	r16, 0x27	; 39
    2518:	80 2e       	mov	r8, r16
    251a:	91 2c       	mov	r9, r1
    251c:	12 c0       	rjmp	.+36     	; 0x2542 <main+0x1622>
					state = ++last;
    251e:	49 89       	ldd	r20, Y+17	; 0x11
    2520:	5a 89       	ldd	r21, Y+18	; 0x12
    2522:	4f 5f       	subi	r20, 0xFF	; 255
    2524:	5f 4f       	sbci	r21, 0xFF	; 255
    2526:	5a 8b       	std	Y+18, r21	; 0x12
    2528:	49 8b       	std	Y+17, r20	; 0x11
				}


				//state actions
						
				if(state == WAIT){
    252a:	47 32       	cpi	r20, 0x27	; 39
    252c:	51 05       	cpc	r21, r1
    252e:	21 f0       	breq	.+8      	; 0x2538 <main+0x1618>
    2530:	4a 01       	movw	r8, r20
    2532:	33 24       	eor	r3, r3
    2534:	33 94       	inc	r3
    2536:	0f c0       	rjmp	.+30     	; 0x2556 <main+0x1636>
    2538:	17 e2       	ldi	r17, 0x27	; 39
    253a:	81 2e       	mov	r8, r17
    253c:	91 2c       	mov	r9, r1
    253e:	33 24       	eor	r3, r3
    2540:	33 94       	inc	r3
					plateLoadMotor = 0;
    2542:	1b 82       	std	Y+3, r1	; 0x03
    2544:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    2546:	1d 82       	std	Y+5, r1	; 0x05
    2548:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    254a:	1f 82       	std	Y+7, r1	; 0x07
    254c:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    254e:	19 86       	std	Y+9, r1	; 0x09
    2550:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    2552:	1b 86       	std	Y+11, r1	; 0x0b
    2554:	1a 86       	std	Y+10, r1	; 0x0a
				}
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    2556:	c4 01       	movw	r24, r8
    2558:	b3 01       	movw	r22, r6
    255a:	ae 01       	movw	r20, r28
    255c:	4e 5f       	subi	r20, 0xFE	; 254
    255e:	5f 4f       	sbci	r21, 0xFF	; 255
    2560:	9e 01       	movw	r18, r28
    2562:	2c 5f       	subi	r18, 0xFC	; 252
    2564:	3f 4f       	sbci	r19, 0xFF	; 255
    2566:	8e 01       	movw	r16, r28
    2568:	0a 5f       	subi	r16, 0xFA	; 250
    256a:	1f 4f       	sbci	r17, 0xFF	; 255
    256c:	b8 e0       	ldi	r27, 0x08	; 8
    256e:	eb 2e       	mov	r14, r27
    2570:	f1 2c       	mov	r15, r1
    2572:	ec 0e       	add	r14, r28
    2574:	fd 1e       	adc	r15, r29
    2576:	aa e0       	ldi	r26, 0x0A	; 10
    2578:	ca 2e       	mov	r12, r26
    257a:	d1 2c       	mov	r13, r1
    257c:	cc 0e       	add	r12, r28
    257e:	dd 1e       	adc	r13, r29
    2580:	5e 01       	movw	r10, r28
    2582:	08 94       	sec
    2584:	a1 1c       	adc	r10, r1
    2586:	b1 1c       	adc	r11, r1
    2588:	0e 94 d0 06 	call	0xda0	; 0xda0 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    258c:	c4 01       	movw	r24, r8
    258e:	b3 01       	movw	r22, r6
    2590:	ae 01       	movw	r20, r28
    2592:	4e 5f       	subi	r20, 0xFE	; 254
    2594:	5f 4f       	sbci	r21, 0xFF	; 255
    2596:	9e 01       	movw	r18, r28
    2598:	2c 5f       	subi	r18, 0xFC	; 252
    259a:	3f 4f       	sbci	r19, 0xFF	; 255
    259c:	8e 01       	movw	r16, r28
    259e:	0a 5f       	subi	r16, 0xFA	; 250
    25a0:	1f 4f       	sbci	r17, 0xFF	; 255
    25a2:	f8 e0       	ldi	r31, 0x08	; 8
    25a4:	ef 2e       	mov	r14, r31
    25a6:	f1 2c       	mov	r15, r1
    25a8:	ec 0e       	add	r14, r28
    25aa:	fd 1e       	adc	r15, r29
    25ac:	ea e0       	ldi	r30, 0x0A	; 10
    25ae:	ce 2e       	mov	r12, r30
    25b0:	d1 2c       	mov	r13, r1
    25b2:	cc 0e       	add	r12, r28
    25b4:	dd 1e       	adc	r13, r29
    25b6:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    25ba:	51 e1       	ldi	r21, 0x11	; 17
    25bc:	85 16       	cp	r8, r21
    25be:	91 04       	cpc	r9, r1
    25c0:	51 f4       	brne	.+20     	; 0x25d6 <main+0x16b6>
					brush1Motor = 0;
    25c2:	1f 82       	std	Y+7, r1	; 0x07
    25c4:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    25c6:	1d 82       	std	Y+5, r1	; 0x05
    25c8:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    25ca:	80 91 60 04 	lds	r24, 0x0460
    25ce:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    25d0:	80 62       	ori	r24, 0x20	; 32
    25d2:	80 93 60 04 	sts	0x0460, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    25d6:	c4 01       	movw	r24, r8
    25d8:	b3 01       	movw	r22, r6
    25da:	ae 01       	movw	r20, r28
    25dc:	4e 5f       	subi	r20, 0xFE	; 254
    25de:	5f 4f       	sbci	r21, 0xFF	; 255
    25e0:	9e 01       	movw	r18, r28
    25e2:	2c 5f       	subi	r18, 0xFC	; 252
    25e4:	3f 4f       	sbci	r19, 0xFF	; 255
    25e6:	8e 01       	movw	r16, r28
    25e8:	0a 5f       	subi	r16, 0xFA	; 250
    25ea:	1f 4f       	sbci	r17, 0xFF	; 255
    25ec:	b8 e0       	ldi	r27, 0x08	; 8
    25ee:	eb 2e       	mov	r14, r27
    25f0:	f1 2c       	mov	r15, r1
    25f2:	ec 0e       	add	r14, r28
    25f4:	fd 1e       	adc	r15, r29
    25f6:	aa e0       	ldi	r26, 0x0A	; 10
    25f8:	ca 2e       	mov	r12, r26
    25fa:	d1 2c       	mov	r13, r1
    25fc:	cc 0e       	add	r12, r28
    25fe:	dd 1e       	adc	r13, r29
    2600:	0e 94 de 01 	call	0x3bc	; 0x3bc <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2604:	c4 01       	movw	r24, r8
    2606:	b3 01       	movw	r22, r6
    2608:	ae 01       	movw	r20, r28
    260a:	4e 5f       	subi	r20, 0xFE	; 254
    260c:	5f 4f       	sbci	r21, 0xFF	; 255
    260e:	9e 01       	movw	r18, r28
    2610:	2c 5f       	subi	r18, 0xFC	; 252
    2612:	3f 4f       	sbci	r19, 0xFF	; 255
    2614:	8e 01       	movw	r16, r28
    2616:	0a 5f       	subi	r16, 0xFA	; 250
    2618:	1f 4f       	sbci	r17, 0xFF	; 255
    261a:	f8 e0       	ldi	r31, 0x08	; 8
    261c:	ef 2e       	mov	r14, r31
    261e:	f1 2c       	mov	r15, r1
    2620:	ec 0e       	add	r14, r28
    2622:	fd 1e       	adc	r15, r29
    2624:	ea e0       	ldi	r30, 0x0A	; 10
    2626:	ce 2e       	mov	r12, r30
    2628:	d1 2c       	mov	r13, r1
    262a:	cc 0e       	add	r12, r28
    262c:	dd 1e       	adc	r13, r29
    262e:	0e 94 80 02 	call	0x500	; 0x500 <dry_action>
				if(state == END){
    2632:	85 e2       	ldi	r24, 0x25	; 37
    2634:	88 16       	cp	r8, r24
    2636:	91 04       	cpc	r9, r1
    2638:	71 f4       	brne	.+28     	; 0x2656 <main+0x1736>
					plateLoadMotor = 0;
    263a:	1b 82       	std	Y+3, r1	; 0x03
    263c:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    263e:	80 91 61 04 	lds	r24, 0x0461
    2642:	8b 7f       	andi	r24, 0xFB	; 251
    2644:	80 93 61 04 	sts	0x0461, r24
					if(print35 == 1){
    2648:	22 20       	and	r2, r2
    264a:	29 f0       	breq	.+10     	; 0x2656 <main+0x1736>
						//clear();
						serial_print_string("END OF CYCLE");
    264c:	8e ea       	ldi	r24, 0xAE	; 174
    264e:	93 e0       	ldi	r25, 0x03	; 3
    2650:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
    2654:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    2656:	4a 81       	ldd	r20, Y+2	; 0x02
    2658:	5b 81       	ldd	r21, Y+3	; 0x03
    265a:	2c 81       	ldd	r18, Y+4	; 0x04
    265c:	3d 81       	ldd	r19, Y+5	; 0x05
    265e:	0e 81       	ldd	r16, Y+6	; 0x06
    2660:	1f 81       	ldd	r17, Y+7	; 0x07
    2662:	e8 84       	ldd	r14, Y+8	; 0x08
    2664:	f9 84       	ldd	r15, Y+9	; 0x09
    2666:	ca 84       	ldd	r12, Y+10	; 0x0a
    2668:	db 84       	ldd	r13, Y+11	; 0x0b
    266a:	c3 01       	movw	r24, r6
    266c:	b2 01       	movw	r22, r4
    266e:	0e 94 03 06 	call	0xc06	; 0xc06 <motor_and_write>

				serial_check(); counter++;
    2672:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <serial_check>
				delay_ms(1);
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    267e:	96 e2       	ldi	r25, 0x26	; 38
    2680:	89 16       	cp	r8, r25
    2682:	91 04       	cpc	r9, r1
    2684:	21 f0       	breq	.+8      	; 0x268e <main+0x176e>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    2686:	08 94       	sec
    2688:	61 1c       	adc	r6, r1
    268a:	71 1c       	adc	r7, r1
    268c:	bc ce       	rjmp	.-648    	; 0x2406 <main+0x14e6>
				delay_ms(1);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    268e:	80 91 61 04 	lds	r24, 0x0461
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2692:	8b 7d       	andi	r24, 0xDB	; 219
    2694:	80 93 61 04 	sts	0x0461, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    2698:	80 91 5d 04 	lds	r24, 0x045D
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    269c:	86 7b       	andi	r24, 0xB6	; 182
    269e:	80 93 5d 04 	sts	0x045D, r24
		
		i2c_start(I2C1+I2C_WRITE);
    26a2:	80 e4       	ldi	r24, 0x40	; 64
    26a4:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    26a8:	82 e0       	ldi	r24, 0x02	; 2
    26aa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    26ae:	80 91 61 04 	lds	r24, 0x0461
    26b2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    26b6:	80 91 5d 04 	lds	r24, 0x045D
    26ba:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    26be:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	}
	serial_print_string("END");
    26c2:	83 ec       	ldi	r24, 0xC3	; 195
    26c4:	93 e0       	ldi	r25, 0x03	; 3
    26c6:	0e 94 ba 06 	call	0xd74	; 0xd74 <serial_print_string>
    26ca:	0c 94 43 08 	jmp	0x1086	; 0x1086 <main+0x166>
	}
    26ce:	2f ef       	ldi	r18, 0xFF	; 255
    26d0:	3f ef       	ldi	r19, 0xFF	; 255
    26d2:	38 8b       	std	Y+16, r19	; 0x10
    26d4:	2f 87       	std	Y+15, r18	; 0x0f
    26d6:	23 01       	movw	r4, r6
    26d8:	bb 24       	eor	r11, r11
    26da:	b3 94       	inc	r11
    26dc:	8c e2       	ldi	r24, 0x2C	; 44
    26de:	88 2e       	mov	r8, r24
    26e0:	91 2c       	mov	r9, r1
    26e2:	f8 c9       	rjmp	.-3088   	; 0x1ad4 <main+0xbb4>

000026e4 <_ZN12OrangutanLCDC2Ev>:
    26e4:	08 95       	ret

000026e6 <_ZN12OrangutanLCDC1Ev>:
    26e6:	08 95       	ret

000026e8 <void_getchar>:
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	08 95       	ret

000026ee <_ZN12OrangutanLCD8busyWaitEv>:
    26ee:	ef 92       	push	r14
    26f0:	ff 92       	push	r15
    26f2:	0f 93       	push	r16
    26f4:	1f 93       	push	r17
    26f6:	67 b1       	in	r22, 0x07	; 7
    26f8:	3d 98       	cbi	0x07, 5	; 7
    26fa:	28 98       	cbi	0x05, 0	; 5
    26fc:	29 9a       	sbi	0x05, 1	; 5
    26fe:	e0 90 2c 04 	lds	r14, 0x042C
    2702:	f0 90 2d 04 	lds	r15, 0x042D
    2706:	00 91 2e 04 	lds	r16, 0x042E
    270a:	10 91 2f 04 	lds	r17, 0x042F
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	41 e0       	ldi	r20, 0x01	; 1
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	ca 01       	movw	r24, r20
    2718:	6f 93       	push	r22
    271a:	64 e0       	ldi	r22, 0x04	; 4
    271c:	6a 95       	dec	r22
    271e:	f1 f7       	brne	.-4      	; 0x271c <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    2720:	6f 91       	pop	r22
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	c9 f7       	brne	.-14     	; 0x2718 <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    2726:	2a 9a       	sbi	0x05, 2	; 5
    2728:	ca 01       	movw	r24, r20
    272a:	6f 93       	push	r22
    272c:	64 e0       	ldi	r22, 0x04	; 4
    272e:	6a 95       	dec	r22
    2730:	f1 f7       	brne	.-4      	; 0x272e <_ZN12OrangutanLCD8busyWaitEv+0x40>
    2732:	6f 91       	pop	r22
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	c9 f7       	brne	.-14     	; 0x272a <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    2738:	86 b1       	in	r24, 0x06	; 6
    273a:	2a 98       	cbi	0x05, 2	; 5
    273c:	fa 01       	movw	r30, r20
    273e:	6f 93       	push	r22
    2740:	64 e0       	ldi	r22, 0x04	; 4
    2742:	6a 95       	dec	r22
    2744:	f1 f7       	brne	.-4      	; 0x2742 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    2746:	6f 91       	pop	r22
    2748:	31 97       	sbiw	r30, 0x01	; 1
    274a:	c9 f7       	brne	.-14     	; 0x273e <_ZN12OrangutanLCD8busyWaitEv+0x50>
    274c:	2a 9a       	sbi	0x05, 2	; 5
    274e:	fa 01       	movw	r30, r20
    2750:	6f 93       	push	r22
    2752:	64 e0       	ldi	r22, 0x04	; 4
    2754:	6a 95       	dec	r22
    2756:	f1 f7       	brne	.-4      	; 0x2754 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    2758:	6f 91       	pop	r22
    275a:	31 97       	sbiw	r30, 0x01	; 1
    275c:	c9 f7       	brne	.-14     	; 0x2750 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    275e:	2a 98       	cbi	0x05, 2	; 5
    2760:	2c 5f       	subi	r18, 0xFC	; 252
    2762:	3f 4f       	sbci	r19, 0xFF	; 255
    2764:	85 ff       	sbrs	r24, 5
    2766:	09 c0       	rjmp	.+18     	; 0x277a <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    2768:	c9 01       	movw	r24, r18
    276a:	a0 e0       	ldi	r26, 0x00	; 0
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	8e 15       	cp	r24, r14
    2770:	9f 05       	cpc	r25, r15
    2772:	a0 07       	cpc	r26, r16
    2774:	b1 07       	cpc	r27, r17
    2776:	08 f4       	brcc	.+2      	; 0x277a <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    2778:	ce cf       	rjmp	.-100    	; 0x2716 <_ZN12OrangutanLCD8busyWaitEv+0x28>
    277a:	c9 01       	movw	r24, r18
    277c:	a0 e0       	ldi	r26, 0x00	; 0
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	8e 15       	cp	r24, r14
    2782:	9f 05       	cpc	r25, r15
    2784:	a0 07       	cpc	r26, r16
    2786:	b1 07       	cpc	r27, r17
    2788:	28 f0       	brcs	.+10     	; 0x2794 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    278a:	82 e3       	ldi	r24, 0x32	; 50
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	a0 e0       	ldi	r26, 0x00	; 0
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	04 c0       	rjmp	.+8      	; 0x279c <_ZN12OrangutanLCD8busyWaitEv+0xae>
    2794:	80 e3       	ldi	r24, 0x30	; 48
    2796:	95 e7       	ldi	r25, 0x75	; 117
    2798:	a0 e0       	ldi	r26, 0x00	; 0
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	80 93 2c 04 	sts	0x042C, r24
    27a0:	90 93 2d 04 	sts	0x042D, r25
    27a4:	a0 93 2e 04 	sts	0x042E, r26
    27a8:	b0 93 2f 04 	sts	0x042F, r27
    27ac:	67 b9       	out	0x07, r22	; 7
    27ae:	1f 91       	pop	r17
    27b0:	0f 91       	pop	r16
    27b2:	ff 90       	pop	r15
    27b4:	ef 90       	pop	r14
    27b6:	08 95       	ret

000027b8 <_ZN12OrangutanLCD8sendDataEh>:
    27b8:	28 b1       	in	r18, 0x08	; 8
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	8f 70       	andi	r24, 0x0F	; 15
    27be:	90 70       	andi	r25, 0x00	; 0
    27c0:	88 0f       	add	r24, r24
    27c2:	99 1f       	adc	r25, r25
    27c4:	88 0f       	add	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	23 7c       	andi	r18, 0xC3	; 195
    27ca:	28 2b       	or	r18, r24
    27cc:	28 b9       	out	0x08, r18	; 8
    27ce:	2a 9a       	sbi	0x05, 2	; 5
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	fc 01       	movw	r30, r24
    27d6:	6f 93       	push	r22
    27d8:	64 e0       	ldi	r22, 0x04	; 4
    27da:	6a 95       	dec	r22
    27dc:	f1 f7       	brne	.-4      	; 0x27da <_ZN12OrangutanLCD8sendDataEh+0x22>
    27de:	6f 91       	pop	r22
    27e0:	31 97       	sbiw	r30, 0x01	; 1
    27e2:	c9 f7       	brne	.-14     	; 0x27d6 <_ZN12OrangutanLCD8sendDataEh+0x1e>
    27e4:	2a 98       	cbi	0x05, 2	; 5
    27e6:	6f 93       	push	r22
    27e8:	64 e0       	ldi	r22, 0x04	; 4
    27ea:	6a 95       	dec	r22
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <_ZN12OrangutanLCD8sendDataEh+0x32>
    27ee:	6f 91       	pop	r22
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	c9 f7       	brne	.-14     	; 0x27e6 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    27f4:	08 95       	ret

000027f6 <_ZN12OrangutanLCD10initPrintfEv>:
    27f6:	80 91 28 04 	lds	r24, 0x0428
    27fa:	90 91 29 04 	lds	r25, 0x0429
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	11 f0       	breq	.+4      	; 0x2806 <_ZN12OrangutanLCD10initPrintfEv+0x10>
    2802:	0e 94 2e 21 	call	0x425c	; 0x425c <free>
    2806:	80 91 f5 03 	lds	r24, 0x03F5
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	20 91 f6 03 	lds	r18, 0x03F6
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	ac 01       	movw	r20, r24
    2816:	42 9f       	mul	r20, r18
    2818:	c0 01       	movw	r24, r0
    281a:	43 9f       	mul	r20, r19
    281c:	90 0d       	add	r25, r0
    281e:	52 9f       	mul	r21, r18
    2820:	90 0d       	add	r25, r0
    2822:	11 24       	eor	r1, r1
    2824:	0e 94 81 20 	call	0x4102	; 0x4102 <malloc>
    2828:	90 93 29 04 	sts	0x0429, r25
    282c:	80 93 28 04 	sts	0x0428, r24
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	29 f1       	breq	.+74     	; 0x287e <_ZN12OrangutanLCD10initPrintfEv+0x88>
    2834:	60 e0       	ldi	r22, 0x00	; 0
    2836:	70 e2       	ldi	r23, 0x20	; 32
    2838:	08 c0       	rjmp	.+16     	; 0x284a <_ZN12OrangutanLCD10initPrintfEv+0x54>
    283a:	e0 91 28 04 	lds	r30, 0x0428
    283e:	f0 91 29 04 	lds	r31, 0x0429
    2842:	e4 0f       	add	r30, r20
    2844:	f5 1f       	adc	r31, r21
    2846:	70 83       	st	Z, r23
    2848:	6f 5f       	subi	r22, 0xFF	; 255
    284a:	46 2f       	mov	r20, r22
    284c:	50 e0       	ldi	r21, 0x00	; 0
    284e:	80 91 f5 03 	lds	r24, 0x03F5
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	20 91 f6 03 	lds	r18, 0x03F6
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	fc 01       	movw	r30, r24
    285e:	e2 9f       	mul	r30, r18
    2860:	c0 01       	movw	r24, r0
    2862:	e3 9f       	mul	r30, r19
    2864:	90 0d       	add	r25, r0
    2866:	f2 9f       	mul	r31, r18
    2868:	90 0d       	add	r25, r0
    286a:	11 24       	eor	r1, r1
    286c:	48 17       	cp	r20, r24
    286e:	59 07       	cpc	r21, r25
    2870:	24 f3       	brlt	.-56     	; 0x283a <_ZN12OrangutanLCD10initPrintfEv+0x44>
    2872:	83 e6       	ldi	r24, 0x63	; 99
    2874:	96 e1       	ldi	r25, 0x16	; 22
    2876:	64 e7       	ldi	r22, 0x74	; 116
    2878:	73 e1       	ldi	r23, 0x13	; 19
    287a:	0e 94 a7 21 	call	0x434e	; 0x434e <fdevopen>
    287e:	08 95       	ret

00002880 <_ZN12OrangutanLCD10initPrintfEhh>:
    2880:	80 93 f6 03 	sts	0x03F6, r24
    2884:	60 93 f5 03 	sts	0x03F5, r22
    2888:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_ZN12OrangutanLCD10initPrintfEv>
    288c:	08 95       	ret

0000288e <lcd_init_printf_with_dimensions>:
    288e:	80 93 f6 03 	sts	0x03F6, r24
    2892:	60 93 f5 03 	sts	0x03F5, r22
    2896:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_ZN12OrangutanLCD10initPrintfEv>
    289a:	08 95       	ret

0000289c <lcd_init_printf>:
    289c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_ZN12OrangutanLCD10initPrintfEv>
    28a0:	08 95       	ret

000028a2 <_ZN12OrangutanLCD5init2Ev>:
    28a2:	3d 98       	cbi	0x07, 5	; 7
    28a4:	45 9a       	sbi	0x08, 5	; 8
    28a6:	80 e3       	ldi	r24, 0x30	; 48
    28a8:	95 e7       	ldi	r25, 0x75	; 117
    28aa:	a0 e0       	ldi	r26, 0x00	; 0
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	80 93 2c 04 	sts	0x042C, r24
    28b2:	90 93 2d 04 	sts	0x042D, r25
    28b6:	a0 93 2e 04 	sts	0x042E, r26
    28ba:	b0 93 2f 04 	sts	0x042F, r27
    28be:	20 9a       	sbi	0x04, 0	; 4
    28c0:	21 9a       	sbi	0x04, 1	; 4
    28c2:	22 9a       	sbi	0x04, 2	; 4
    28c4:	8e e1       	ldi	r24, 0x1E	; 30
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>
    28cc:	83 e0       	ldi	r24, 0x03	; 3
    28ce:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    28d2:	86 e0       	ldi	r24, 0x06	; 6
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>
    28da:	83 e0       	ldi	r24, 0x03	; 3
    28dc:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    28e0:	82 e0       	ldi	r24, 0x02	; 2
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>
    28e8:	83 e0       	ldi	r24, 0x03	; 3
    28ea:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    28ee:	82 e0       	ldi	r24, 0x02	; 2
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>
    28f6:	82 e0       	ldi	r24, 0x02	; 2
    28f8:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    28fc:	82 e0       	ldi	r24, 0x02	; 2
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>
    2904:	88 e2       	ldi	r24, 0x28	; 40
    2906:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN12OrangutanLCD8send_cmdEh>
    290a:	88 e0       	ldi	r24, 0x08	; 8
    290c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN12OrangutanLCD8send_cmdEh>
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN12OrangutanLCD8send_cmdEh>
    2916:	86 e0       	ldi	r24, 0x06	; 6
    2918:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN12OrangutanLCD8send_cmdEh>
    291c:	8c e0       	ldi	r24, 0x0C	; 12
    291e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN12OrangutanLCD8send_cmdEh>
    2922:	08 95       	ret

00002924 <_ZN12OrangutanLCD4initEv>:
    2924:	80 91 30 04 	lds	r24, 0x0430
    2928:	88 23       	and	r24, r24
    292a:	29 f4       	brne	.+10     	; 0x2936 <_ZN12OrangutanLCD4initEv+0x12>
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	80 93 30 04 	sts	0x0430, r24
    2932:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_ZN12OrangutanLCD5init2Ev>
    2936:	08 95       	ret

00002938 <_ZN12OrangutanLCD4sendEhhh>:
    2938:	ff 92       	push	r15
    293a:	0f 93       	push	r16
    293c:	1f 93       	push	r17
    293e:	08 2f       	mov	r16, r24
    2940:	16 2f       	mov	r17, r22
    2942:	f4 2e       	mov	r15, r20
    2944:	0e 94 92 14 	call	0x2924	; 0x2924 <_ZN12OrangutanLCD4initEv>
    2948:	0e 94 77 13 	call	0x26ee	; 0x26ee <_ZN12OrangutanLCD8busyWaitEv>
    294c:	37 b1       	in	r19, 0x07	; 7
    294e:	28 b1       	in	r18, 0x08	; 8
    2950:	29 98       	cbi	0x05, 1	; 5
    2952:	11 23       	and	r17, r17
    2954:	11 f0       	breq	.+4      	; 0x295a <_ZN12OrangutanLCD4sendEhhh+0x22>
    2956:	28 9a       	sbi	0x05, 0	; 5
    2958:	01 c0       	rjmp	.+2      	; 0x295c <_ZN12OrangutanLCD4sendEhhh+0x24>
    295a:	28 98       	cbi	0x05, 0	; 5
    295c:	87 b1       	in	r24, 0x07	; 7
    295e:	8c 63       	ori	r24, 0x3C	; 60
    2960:	87 b9       	out	0x07, r24	; 7
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	f8 16       	cp	r15, r24
    2966:	e1 f0       	breq	.+56     	; 0x29a0 <_ZN12OrangutanLCD4sendEhhh+0x68>
    2968:	88 b1       	in	r24, 0x08	; 8
    296a:	90 2f       	mov	r25, r16
    296c:	92 95       	swap	r25
    296e:	9f 70       	andi	r25, 0x0F	; 15
    2970:	99 0f       	add	r25, r25
    2972:	99 0f       	add	r25, r25
    2974:	83 7c       	andi	r24, 0xC3	; 195
    2976:	98 2b       	or	r25, r24
    2978:	98 b9       	out	0x08, r25	; 8
    297a:	2a 9a       	sbi	0x05, 2	; 5
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	fc 01       	movw	r30, r24
    2982:	6f 93       	push	r22
    2984:	64 e0       	ldi	r22, 0x04	; 4
    2986:	6a 95       	dec	r22
    2988:	f1 f7       	brne	.-4      	; 0x2986 <_ZN12OrangutanLCD4sendEhhh+0x4e>
    298a:	6f 91       	pop	r22
    298c:	31 97       	sbiw	r30, 0x01	; 1
    298e:	c9 f7       	brne	.-14     	; 0x2982 <_ZN12OrangutanLCD4sendEhhh+0x4a>
    2990:	2a 98       	cbi	0x05, 2	; 5
    2992:	6f 93       	push	r22
    2994:	64 e0       	ldi	r22, 0x04	; 4
    2996:	6a 95       	dec	r22
    2998:	f1 f7       	brne	.-4      	; 0x2996 <_ZN12OrangutanLCD4sendEhhh+0x5e>
    299a:	6f 91       	pop	r22
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	c9 f7       	brne	.-14     	; 0x2992 <_ZN12OrangutanLCD4sendEhhh+0x5a>
    29a0:	88 b1       	in	r24, 0x08	; 8
    29a2:	0f 70       	andi	r16, 0x0F	; 15
    29a4:	00 0f       	add	r16, r16
    29a6:	00 0f       	add	r16, r16
    29a8:	83 7c       	andi	r24, 0xC3	; 195
    29aa:	80 2b       	or	r24, r16
    29ac:	88 b9       	out	0x08, r24	; 8
    29ae:	2a 9a       	sbi	0x05, 2	; 5
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	fc 01       	movw	r30, r24
    29b6:	6f 93       	push	r22
    29b8:	64 e0       	ldi	r22, 0x04	; 4
    29ba:	6a 95       	dec	r22
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <_ZN12OrangutanLCD4sendEhhh+0x82>
    29be:	6f 91       	pop	r22
    29c0:	31 97       	sbiw	r30, 0x01	; 1
    29c2:	c9 f7       	brne	.-14     	; 0x29b6 <_ZN12OrangutanLCD4sendEhhh+0x7e>
    29c4:	2a 98       	cbi	0x05, 2	; 5
    29c6:	6f 93       	push	r22
    29c8:	64 e0       	ldi	r22, 0x04	; 4
    29ca:	6a 95       	dec	r22
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <_ZN12OrangutanLCD4sendEhhh+0x92>
    29ce:	6f 91       	pop	r22
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	c9 f7       	brne	.-14     	; 0x29c6 <_ZN12OrangutanLCD4sendEhhh+0x8e>
    29d4:	37 b9       	out	0x07, r19	; 7
    29d6:	28 b9       	out	0x08, r18	; 8
    29d8:	1f 91       	pop	r17
    29da:	0f 91       	pop	r16
    29dc:	ff 90       	pop	r15
    29de:	08 95       	ret

000029e0 <_ZN12OrangutanLCD8send_cmdEh>:
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	42 e0       	ldi	r20, 0x02	; 2
    29e4:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZN12OrangutanLCD4sendEhhh>
    29e8:	08 95       	ret

000029ea <_ZN12OrangutanLCD10moveCursorEhh>:
    29ea:	0f 93       	push	r16
    29ec:	1f 93       	push	r17
    29ee:	08 2f       	mov	r16, r24
    29f0:	16 2f       	mov	r17, r22
    29f2:	08 c0       	rjmp	.+16     	; 0x2a04 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    29f4:	00 23       	and	r16, r16
    29f6:	11 f4       	brne	.+4      	; 0x29fc <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    29f8:	80 e1       	ldi	r24, 0x10	; 16
    29fa:	01 c0       	rjmp	.+2      	; 0x29fe <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    29fc:	84 e1       	ldi	r24, 0x14	; 20
    29fe:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN12OrangutanLCD8send_cmdEh>
    2a02:	11 50       	subi	r17, 0x01	; 1
    2a04:	11 23       	and	r17, r17
    2a06:	b1 f7       	brne	.-20     	; 0x29f4 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
    2a0c:	08 95       	ret

00002a0e <lcd_move_cursor>:
    2a0e:	0e 94 f5 14 	call	0x29ea	; 0x29ea <_ZN12OrangutanLCD10moveCursorEhh>
    2a12:	08 95       	ret

00002a14 <_ZN12OrangutanLCD10hideCursorEv>:
    2a14:	8c e0       	ldi	r24, 0x0C	; 12
    2a16:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN12OrangutanLCD8send_cmdEh>
    2a1a:	08 95       	ret

00002a1c <lcd_hide_cursor>:
    2a1c:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <_ZN12OrangutanLCD10hideCursorEv>
    2a20:	08 95       	ret

00002a22 <_ZN12OrangutanLCD10showCursorEh>:
    2a22:	81 30       	cpi	r24, 0x01	; 1
    2a24:	11 f4       	brne	.+4      	; 0x2a2a <_ZN12OrangutanLCD10showCursorEh+0x8>
    2a26:	8f e0       	ldi	r24, 0x0F	; 15
    2a28:	01 c0       	rjmp	.+2      	; 0x2a2c <_ZN12OrangutanLCD10showCursorEh+0xa>
    2a2a:	8e e0       	ldi	r24, 0x0E	; 14
    2a2c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN12OrangutanLCD8send_cmdEh>
    2a30:	08 95       	ret

00002a32 <lcd_show_cursor>:
    2a32:	0e 94 11 15 	call	0x2a22	; 0x2a22 <_ZN12OrangutanLCD10showCursorEh>
    2a36:	08 95       	ret

00002a38 <_ZN12OrangutanLCD6gotoXYEhh>:
    2a38:	a4 e0       	ldi	r26, 0x04	; 4
    2a3a:	b0 e0       	ldi	r27, 0x00	; 0
    2a3c:	e2 e2       	ldi	r30, 0x22	; 34
    2a3e:	f5 e1       	ldi	r31, 0x15	; 21
    2a40:	0c 94 44 20 	jmp	0x4088	; 0x4088 <__prologue_saves__+0x1c>
    2a44:	18 2f       	mov	r17, r24
    2a46:	06 2f       	mov	r16, r22
    2a48:	80 e8       	ldi	r24, 0x80	; 128
    2a4a:	89 83       	std	Y+1, r24	; 0x01
    2a4c:	80 ec       	ldi	r24, 0xC0	; 192
    2a4e:	8a 83       	std	Y+2, r24	; 0x02
    2a50:	84 e9       	ldi	r24, 0x94	; 148
    2a52:	8b 83       	std	Y+3, r24	; 0x03
    2a54:	84 ed       	ldi	r24, 0xD4	; 212
    2a56:	8c 83       	std	Y+4, r24	; 0x04
    2a58:	fe 01       	movw	r30, r28
    2a5a:	e6 0f       	add	r30, r22
    2a5c:	f1 1d       	adc	r31, r1
    2a5e:	81 81       	ldd	r24, Z+1	; 0x01
    2a60:	81 0f       	add	r24, r17
    2a62:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN12OrangutanLCD8send_cmdEh>
    2a66:	10 93 2b 04 	sts	0x042B, r17
    2a6a:	00 93 2a 04 	sts	0x042A, r16
    2a6e:	24 96       	adiw	r28, 0x04	; 4
    2a70:	e4 e0       	ldi	r30, 0x04	; 4
    2a72:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <__epilogue_restores__+0x1c>

00002a76 <lcd_goto_xy>:
    2a76:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD6gotoXYEhh>
    2a7a:	08 95       	ret

00002a7c <_ZN12OrangutanLCD5clearEv>:
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN12OrangutanLCD8send_cmdEh>
    2a82:	80 91 28 04 	lds	r24, 0x0428
    2a86:	90 91 29 04 	lds	r25, 0x0429
    2a8a:	89 2b       	or	r24, r25
    2a8c:	19 f1       	breq	.+70     	; 0x2ad4 <_ZN12OrangutanLCD5clearEv+0x58>
    2a8e:	60 e0       	ldi	r22, 0x00	; 0
    2a90:	70 e2       	ldi	r23, 0x20	; 32
    2a92:	08 c0       	rjmp	.+16     	; 0x2aa4 <_ZN12OrangutanLCD5clearEv+0x28>
    2a94:	e0 91 28 04 	lds	r30, 0x0428
    2a98:	f0 91 29 04 	lds	r31, 0x0429
    2a9c:	e4 0f       	add	r30, r20
    2a9e:	f5 1f       	adc	r31, r21
    2aa0:	70 83       	st	Z, r23
    2aa2:	6f 5f       	subi	r22, 0xFF	; 255
    2aa4:	46 2f       	mov	r20, r22
    2aa6:	50 e0       	ldi	r21, 0x00	; 0
    2aa8:	80 91 f5 03 	lds	r24, 0x03F5
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	20 91 f6 03 	lds	r18, 0x03F6
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	e2 9f       	mul	r30, r18
    2aba:	c0 01       	movw	r24, r0
    2abc:	e3 9f       	mul	r30, r19
    2abe:	90 0d       	add	r25, r0
    2ac0:	f2 9f       	mul	r31, r18
    2ac2:	90 0d       	add	r25, r0
    2ac4:	11 24       	eor	r1, r1
    2ac6:	48 17       	cp	r20, r24
    2ac8:	59 07       	cpc	r21, r25
    2aca:	24 f3       	brlt	.-56     	; 0x2a94 <_ZN12OrangutanLCD5clearEv+0x18>
    2acc:	10 92 2b 04 	sts	0x042B, r1
    2ad0:	10 92 2a 04 	sts	0x042A, r1
    2ad4:	08 95       	ret

00002ad6 <clear>:
    2ad6:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <_ZN12OrangutanLCD5clearEv>
    2ada:	08 95       	ret

00002adc <_ZN12OrangutanLCD9send_dataEh>:
    2adc:	61 e0       	ldi	r22, 0x01	; 1
    2ade:	42 e0       	ldi	r20, 0x02	; 2
    2ae0:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZN12OrangutanLCD4sendEhhh>
    2ae4:	08 95       	ret

00002ae6 <_ZN12OrangutanLCD11printBinaryEh>:
    2ae6:	0f 93       	push	r16
    2ae8:	1f 93       	push	r17
    2aea:	cf 93       	push	r28
    2aec:	df 93       	push	r29
    2aee:	00 e0       	ldi	r16, 0x00	; 0
    2af0:	10 e8       	ldi	r17, 0x80	; 128
    2af2:	c8 2f       	mov	r28, r24
    2af4:	d0 e0       	ldi	r29, 0x00	; 0
    2af6:	81 2f       	mov	r24, r17
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	8c 23       	and	r24, r28
    2afc:	9d 23       	and	r25, r29
    2afe:	89 2b       	or	r24, r25
    2b00:	11 f0       	breq	.+4      	; 0x2b06 <_ZN12OrangutanLCD11printBinaryEh+0x20>
    2b02:	81 e3       	ldi	r24, 0x31	; 49
    2b04:	01 c0       	rjmp	.+2      	; 0x2b08 <_ZN12OrangutanLCD11printBinaryEh+0x22>
    2b06:	80 e3       	ldi	r24, 0x30	; 48
    2b08:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN12OrangutanLCD9send_dataEh>
    2b0c:	0f 5f       	subi	r16, 0xFF	; 255
    2b0e:	08 30       	cpi	r16, 0x08	; 8
    2b10:	11 f0       	breq	.+4      	; 0x2b16 <_ZN12OrangutanLCD11printBinaryEh+0x30>
    2b12:	16 95       	lsr	r17
    2b14:	f0 cf       	rjmp	.-32     	; 0x2af6 <_ZN12OrangutanLCD11printBinaryEh+0x10>
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	08 95       	ret

00002b20 <print_binary>:
    2b20:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <_ZN12OrangutanLCD11printBinaryEh>
    2b24:	08 95       	ret

00002b26 <_ZN12OrangutanLCD14printHexNibbleEh>:
    2b26:	8a 30       	cpi	r24, 0x0A	; 10
    2b28:	10 f4       	brcc	.+4      	; 0x2b2e <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    2b2a:	80 5d       	subi	r24, 0xD0	; 208
    2b2c:	01 c0       	rjmp	.+2      	; 0x2b30 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    2b2e:	89 5c       	subi	r24, 0xC9	; 201
    2b30:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN12OrangutanLCD9send_dataEh>
    2b34:	08 95       	ret

00002b36 <_ZN12OrangutanLCD8printHexEh>:
    2b36:	1f 93       	push	r17
    2b38:	18 2f       	mov	r17, r24
    2b3a:	82 95       	swap	r24
    2b3c:	8f 70       	andi	r24, 0x0F	; 15
    2b3e:	0e 94 93 15 	call	0x2b26	; 0x2b26 <_ZN12OrangutanLCD14printHexNibbleEh>
    2b42:	81 2f       	mov	r24, r17
    2b44:	8f 70       	andi	r24, 0x0F	; 15
    2b46:	0e 94 93 15 	call	0x2b26	; 0x2b26 <_ZN12OrangutanLCD14printHexNibbleEh>
    2b4a:	1f 91       	pop	r17
    2b4c:	08 95       	ret

00002b4e <_ZN12OrangutanLCD8printHexEj>:
    2b4e:	1f 93       	push	r17
    2b50:	18 2f       	mov	r17, r24
    2b52:	89 2f       	mov	r24, r25
    2b54:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <_ZN12OrangutanLCD8printHexEh>
    2b58:	81 2f       	mov	r24, r17
    2b5a:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <_ZN12OrangutanLCD8printHexEh>
    2b5e:	1f 91       	pop	r17
    2b60:	08 95       	ret

00002b62 <print_hex>:
    2b62:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN12OrangutanLCD8printHexEj>
    2b66:	08 95       	ret

00002b68 <print_hex_byte>:
    2b68:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <_ZN12OrangutanLCD8printHexEh>
    2b6c:	08 95       	ret

00002b6e <_ZN12OrangutanLCD5printEm>:
    2b6e:	6f 92       	push	r6
    2b70:	7f 92       	push	r7
    2b72:	8f 92       	push	r8
    2b74:	9f 92       	push	r9
    2b76:	af 92       	push	r10
    2b78:	bf 92       	push	r11
    2b7a:	cf 92       	push	r12
    2b7c:	df 92       	push	r13
    2b7e:	ff 92       	push	r15
    2b80:	0f 93       	push	r16
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
    2b8a:	2a 97       	sbiw	r28, 0x0a	; 10
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	de bf       	out	0x3e, r29	; 62
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	cd bf       	out	0x3d, r28	; 61
    2b96:	5b 01       	movw	r10, r22
    2b98:	6c 01       	movw	r12, r24
    2b9a:	0a e0       	ldi	r16, 0x0A	; 10
    2b9c:	3e 01       	movw	r6, r28
    2b9e:	08 94       	sec
    2ba0:	61 1c       	adc	r6, r1
    2ba2:	71 1c       	adc	r7, r1
    2ba4:	fa 2c       	mov	r15, r10
    2ba6:	c6 01       	movw	r24, r12
    2ba8:	b5 01       	movw	r22, r10
    2baa:	2a e0       	ldi	r18, 0x0A	; 10
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e0       	ldi	r20, 0x00	; 0
    2bb0:	50 e0       	ldi	r21, 0x00	; 0
    2bb2:	0e 94 14 20 	call	0x4028	; 0x4028 <__udivmodsi4>
    2bb6:	c9 01       	movw	r24, r18
    2bb8:	da 01       	movw	r26, r20
    2bba:	5c 01       	movw	r10, r24
    2bbc:	6d 01       	movw	r12, r26
    2bbe:	01 50       	subi	r16, 0x01	; 1
    2bc0:	43 01       	movw	r8, r6
    2bc2:	80 0e       	add	r8, r16
    2bc4:	91 1c       	adc	r9, r1
    2bc6:	80 e3       	ldi	r24, 0x30	; 48
    2bc8:	f8 0e       	add	r15, r24
    2bca:	c6 01       	movw	r24, r12
    2bcc:	b5 01       	movw	r22, r10
    2bce:	2a e0       	ldi	r18, 0x0A	; 10
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e0       	ldi	r20, 0x00	; 0
    2bd4:	50 e0       	ldi	r21, 0x00	; 0
    2bd6:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <__mulsi3>
    2bda:	f6 1a       	sub	r15, r22
    2bdc:	f4 01       	movw	r30, r8
    2bde:	f0 82       	st	Z, r15
    2be0:	a1 14       	cp	r10, r1
    2be2:	b1 04       	cpc	r11, r1
    2be4:	c1 04       	cpc	r12, r1
    2be6:	d1 04       	cpc	r13, r1
    2be8:	e9 f6       	brne	.-70     	; 0x2ba4 <_ZN12OrangutanLCD5printEm+0x36>
    2bea:	08 c0       	rjmp	.+16     	; 0x2bfc <_ZN12OrangutanLCD5printEm+0x8e>
    2bec:	f6 01       	movw	r30, r12
    2bee:	e0 0f       	add	r30, r16
    2bf0:	f1 1d       	adc	r31, r1
    2bf2:	80 81       	ld	r24, Z
    2bf4:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN12OrangutanLCD9send_dataEh>
    2bf8:	0f 5f       	subi	r16, 0xFF	; 255
    2bfa:	04 c0       	rjmp	.+8      	; 0x2c04 <_ZN12OrangutanLCD5printEm+0x96>
    2bfc:	6e 01       	movw	r12, r28
    2bfe:	08 94       	sec
    2c00:	c1 1c       	adc	r12, r1
    2c02:	d1 1c       	adc	r13, r1
    2c04:	0a 30       	cpi	r16, 0x0A	; 10
    2c06:	90 f3       	brcs	.-28     	; 0x2bec <_ZN12OrangutanLCD5printEm+0x7e>
    2c08:	2a 96       	adiw	r28, 0x0a	; 10
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	0f 91       	pop	r16
    2c1a:	ff 90       	pop	r15
    2c1c:	df 90       	pop	r13
    2c1e:	cf 90       	pop	r12
    2c20:	bf 90       	pop	r11
    2c22:	af 90       	pop	r10
    2c24:	9f 90       	pop	r9
    2c26:	8f 90       	pop	r8
    2c28:	7f 90       	pop	r7
    2c2a:	6f 90       	pop	r6
    2c2c:	08 95       	ret

00002c2e <print_unsigned_long>:
    2c2e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <_ZN12OrangutanLCD5printEm>
    2c32:	08 95       	ret

00002c34 <_ZN12OrangutanLCD5printEl>:
    2c34:	ef 92       	push	r14
    2c36:	ff 92       	push	r15
    2c38:	0f 93       	push	r16
    2c3a:	1f 93       	push	r17
    2c3c:	7b 01       	movw	r14, r22
    2c3e:	8c 01       	movw	r16, r24
    2c40:	97 ff       	sbrs	r25, 7
    2c42:	0b c0       	rjmp	.+22     	; 0x2c5a <_ZN12OrangutanLCD5printEl+0x26>
    2c44:	10 95       	com	r17
    2c46:	00 95       	com	r16
    2c48:	f0 94       	com	r15
    2c4a:	e0 94       	com	r14
    2c4c:	e1 1c       	adc	r14, r1
    2c4e:	f1 1c       	adc	r15, r1
    2c50:	01 1d       	adc	r16, r1
    2c52:	11 1d       	adc	r17, r1
    2c54:	8d e2       	ldi	r24, 0x2D	; 45
    2c56:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN12OrangutanLCD9send_dataEh>
    2c5a:	c8 01       	movw	r24, r16
    2c5c:	b7 01       	movw	r22, r14
    2c5e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <_ZN12OrangutanLCD5printEm>
    2c62:	1f 91       	pop	r17
    2c64:	0f 91       	pop	r16
    2c66:	ff 90       	pop	r15
    2c68:	ef 90       	pop	r14
    2c6a:	08 95       	ret

00002c6c <print_long>:
    2c6c:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN12OrangutanLCD5printEl>
    2c70:	08 95       	ret

00002c72 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    2c72:	cf 93       	push	r28
    2c74:	df 93       	push	r29
    2c76:	ec 01       	movw	r28, r24
    2c78:	03 c0       	rjmp	.+6      	; 0x2c80 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    2c7a:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN12OrangutanLCD9send_dataEh>
    2c7e:	21 96       	adiw	r28, 0x01	; 1
    2c80:	fe 01       	movw	r30, r28
    2c82:	84 91       	lpm	r24, Z+
    2c84:	88 23       	and	r24, r24
    2c86:	c9 f7       	brne	.-14     	; 0x2c7a <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	08 95       	ret

00002c8e <print_from_program_space>:
    2c8e:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    2c92:	08 95       	ret

00002c94 <_ZN12OrangutanLCD5printEPKc>:
    2c94:	cf 93       	push	r28
    2c96:	df 93       	push	r29
    2c98:	ec 01       	movw	r28, r24
    2c9a:	03 c0       	rjmp	.+6      	; 0x2ca2 <_ZN12OrangutanLCD5printEPKc+0xe>
    2c9c:	21 96       	adiw	r28, 0x01	; 1
    2c9e:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN12OrangutanLCD9send_dataEh>
    2ca2:	88 81       	ld	r24, Y
    2ca4:	88 23       	and	r24, r24
    2ca6:	d1 f7       	brne	.-12     	; 0x2c9c <_ZN12OrangutanLCD5printEPKc+0x8>
    2ca8:	df 91       	pop	r29
    2caa:	cf 91       	pop	r28
    2cac:	08 95       	ret

00002cae <_ZN12OrangutanLCD7printInEPKc>:
    2cae:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN12OrangutanLCD5printEPKc>
    2cb2:	08 95       	ret

00002cb4 <print>:
    2cb4:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN12OrangutanLCD5printEPKc>
    2cb8:	08 95       	ret

00002cba <_ZN12OrangutanLCD5printEc>:
    2cba:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN12OrangutanLCD9send_dataEh>
    2cbe:	08 95       	ret

00002cc0 <print_character>:
    2cc0:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN12OrangutanLCD9send_dataEh>
    2cc4:	08 95       	ret

00002cc6 <lcd_putchar>:
    2cc6:	a0 e0       	ldi	r26, 0x00	; 0
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	e9 e6       	ldi	r30, 0x69	; 105
    2ccc:	f6 e1       	ldi	r31, 0x16	; 22
    2cce:	0c 94 40 20 	jmp	0x4080	; 0x4080 <__prologue_saves__+0x14>
    2cd2:	e8 2e       	mov	r14, r24
    2cd4:	80 91 28 04 	lds	r24, 0x0428
    2cd8:	90 91 29 04 	lds	r25, 0x0429
    2cdc:	89 2b       	or	r24, r25
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <lcd_putchar+0x1c>
    2ce0:	05 c1       	rjmp	.+522    	; 0x2eec <lcd_putchar+0x226>
    2ce2:	2a e0       	ldi	r18, 0x0A	; 10
    2ce4:	e2 16       	cp	r14, r18
    2ce6:	09 f4       	brne	.+2      	; 0x2cea <lcd_putchar+0x24>
    2ce8:	46 c0       	rjmp	.+140    	; 0x2d76 <lcd_putchar+0xb0>
    2cea:	38 e0       	ldi	r19, 0x08	; 8
    2cec:	e3 16       	cp	r14, r19
    2cee:	c9 f4       	brne	.+50     	; 0x2d22 <lcd_putchar+0x5c>
    2cf0:	80 91 2b 04 	lds	r24, 0x042B
    2cf4:	81 50       	subi	r24, 0x01	; 1
    2cf6:	80 93 2b 04 	sts	0x042B, r24
    2cfa:	8f 3f       	cpi	r24, 0xFF	; 255
    2cfc:	51 f4       	brne	.+20     	; 0x2d12 <lcd_putchar+0x4c>
    2cfe:	80 91 2a 04 	lds	r24, 0x042A
    2d02:	81 50       	subi	r24, 0x01	; 1
    2d04:	80 93 2a 04 	sts	0x042A, r24
    2d08:	80 91 f6 03 	lds	r24, 0x03F6
    2d0c:	81 50       	subi	r24, 0x01	; 1
    2d0e:	80 93 2b 04 	sts	0x042B, r24
    2d12:	80 91 2a 04 	lds	r24, 0x042A
    2d16:	8f 3f       	cpi	r24, 0xFF	; 255
    2d18:	09 f0       	breq	.+2      	; 0x2d1c <lcd_putchar+0x56>
    2d1a:	e2 c0       	rjmp	.+452    	; 0x2ee0 <lcd_putchar+0x21a>
    2d1c:	10 92 2a 04 	sts	0x042A, r1
    2d20:	dd c0       	rjmp	.+442    	; 0x2edc <lcd_putchar+0x216>
    2d22:	8e 2d       	mov	r24, r14
    2d24:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN12OrangutanLCD9send_dataEh>
    2d28:	20 91 2a 04 	lds	r18, 0x042A
    2d2c:	22 23       	and	r18, r18
    2d2e:	c9 f0       	breq	.+50     	; 0x2d62 <lcd_putchar+0x9c>
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	21 50       	subi	r18, 0x01	; 1
    2d34:	30 40       	sbci	r19, 0x00	; 0
    2d36:	80 91 f6 03 	lds	r24, 0x03F6
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	ac 01       	movw	r20, r24
    2d3e:	24 9f       	mul	r18, r20
    2d40:	c0 01       	movw	r24, r0
    2d42:	25 9f       	mul	r18, r21
    2d44:	90 0d       	add	r25, r0
    2d46:	34 9f       	mul	r19, r20
    2d48:	90 0d       	add	r25, r0
    2d4a:	11 24       	eor	r1, r1
    2d4c:	20 91 2b 04 	lds	r18, 0x042B
    2d50:	e0 91 28 04 	lds	r30, 0x0428
    2d54:	f0 91 29 04 	lds	r31, 0x0429
    2d58:	e8 0f       	add	r30, r24
    2d5a:	f9 1f       	adc	r31, r25
    2d5c:	e2 0f       	add	r30, r18
    2d5e:	f1 1d       	adc	r31, r1
    2d60:	e0 82       	st	Z, r14
    2d62:	80 91 2b 04 	lds	r24, 0x042B
    2d66:	8f 5f       	subi	r24, 0xFF	; 255
    2d68:	80 93 2b 04 	sts	0x042B, r24
    2d6c:	90 91 f6 03 	lds	r25, 0x03F6
    2d70:	89 17       	cp	r24, r25
    2d72:	09 f0       	breq	.+2      	; 0x2d76 <lcd_putchar+0xb0>
    2d74:	bb c0       	rjmp	.+374    	; 0x2eec <lcd_putchar+0x226>
    2d76:	40 91 2a 04 	lds	r20, 0x042A
    2d7a:	24 2f       	mov	r18, r20
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	80 91 f5 03 	lds	r24, 0x03F5
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	28 17       	cp	r18, r24
    2d88:	39 07       	cpc	r19, r25
    2d8a:	09 f0       	breq	.+2      	; 0x2d8e <lcd_putchar+0xc8>
    2d8c:	a4 c0       	rjmp	.+328    	; 0x2ed6 <lcd_putchar+0x210>
    2d8e:	c0 e0       	ldi	r28, 0x00	; 0
    2d90:	d0 e0       	ldi	r29, 0x00	; 0
    2d92:	44 c0       	rjmp	.+136    	; 0x2e1c <lcd_putchar+0x156>
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	6c 2f       	mov	r22, r28
    2d98:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD6gotoXYEhh>
    2d9c:	ff 24       	eor	r15, r15
    2d9e:	6e 01       	movw	r12, r28
    2da0:	08 94       	sec
    2da2:	c1 1c       	adc	r12, r1
    2da4:	d1 1c       	adc	r13, r1
    2da6:	35 c0       	rjmp	.+106    	; 0x2e12 <lcd_putchar+0x14c>
    2da8:	0f 2d       	mov	r16, r15
    2daa:	10 e0       	ldi	r17, 0x00	; 0
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	9c 01       	movw	r18, r24
    2db0:	c2 9f       	mul	r28, r18
    2db2:	c0 01       	movw	r24, r0
    2db4:	c3 9f       	mul	r28, r19
    2db6:	90 0d       	add	r25, r0
    2db8:	d2 9f       	mul	r29, r18
    2dba:	90 0d       	add	r25, r0
    2dbc:	11 24       	eor	r1, r1
    2dbe:	e0 91 28 04 	lds	r30, 0x0428
    2dc2:	f0 91 29 04 	lds	r31, 0x0429
    2dc6:	e0 0f       	add	r30, r16
    2dc8:	f1 1f       	adc	r31, r17
    2dca:	e8 0f       	add	r30, r24
    2dcc:	f9 1f       	adc	r31, r25
    2dce:	80 81       	ld	r24, Z
    2dd0:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN12OrangutanLCD9send_dataEh>
    2dd4:	e0 91 28 04 	lds	r30, 0x0428
    2dd8:	f0 91 29 04 	lds	r31, 0x0429
    2ddc:	80 91 f6 03 	lds	r24, 0x03F6
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	c8 9f       	mul	r28, r24
    2de4:	d0 01       	movw	r26, r0
    2de6:	c9 9f       	mul	r28, r25
    2de8:	b0 0d       	add	r27, r0
    2dea:	d8 9f       	mul	r29, r24
    2dec:	b0 0d       	add	r27, r0
    2dee:	11 24       	eor	r1, r1
    2df0:	e0 0f       	add	r30, r16
    2df2:	f1 1f       	adc	r31, r17
    2df4:	ae 0f       	add	r26, r30
    2df6:	bf 1f       	adc	r27, r31
    2df8:	ac 01       	movw	r20, r24
    2dfa:	c4 9e       	mul	r12, r20
    2dfc:	c0 01       	movw	r24, r0
    2dfe:	c5 9e       	mul	r12, r21
    2e00:	90 0d       	add	r25, r0
    2e02:	d4 9e       	mul	r13, r20
    2e04:	90 0d       	add	r25, r0
    2e06:	11 24       	eor	r1, r1
    2e08:	e8 0f       	add	r30, r24
    2e0a:	f9 1f       	adc	r31, r25
    2e0c:	80 81       	ld	r24, Z
    2e0e:	8c 93       	st	X, r24
    2e10:	f3 94       	inc	r15
    2e12:	80 91 f6 03 	lds	r24, 0x03F6
    2e16:	f8 16       	cp	r15, r24
    2e18:	38 f2       	brcs	.-114    	; 0x2da8 <lcd_putchar+0xe2>
    2e1a:	e6 01       	movw	r28, r12
    2e1c:	60 91 f5 03 	lds	r22, 0x03F5
    2e20:	86 2f       	mov	r24, r22
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	02 97       	sbiw	r24, 0x02	; 2
    2e26:	c8 17       	cp	r28, r24
    2e28:	d9 07       	cpc	r29, r25
    2e2a:	0c f4       	brge	.+2      	; 0x2e2e <lcd_putchar+0x168>
    2e2c:	b3 cf       	rjmp	.-154    	; 0x2d94 <lcd_putchar+0xce>
    2e2e:	62 30       	cpi	r22, 0x02	; 2
    2e30:	08 f4       	brcc	.+2      	; 0x2e34 <lcd_putchar+0x16e>
    2e32:	40 c0       	rjmp	.+128    	; 0x2eb4 <lcd_putchar+0x1ee>
    2e34:	62 50       	subi	r22, 0x02	; 2
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD6gotoXYEhh>
    2e3c:	ff 24       	eor	r15, r15
    2e3e:	40 e2       	ldi	r20, 0x20	; 32
    2e40:	d4 2e       	mov	r13, r20
    2e42:	34 c0       	rjmp	.+104    	; 0x2eac <lcd_putchar+0x1e6>
    2e44:	0f 2d       	mov	r16, r15
    2e46:	10 e0       	ldi	r17, 0x00	; 0
    2e48:	80 91 f5 03 	lds	r24, 0x03F5
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	02 97       	sbiw	r24, 0x02	; 2
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	ac 01       	movw	r20, r24
    2e54:	42 9f       	mul	r20, r18
    2e56:	c0 01       	movw	r24, r0
    2e58:	43 9f       	mul	r20, r19
    2e5a:	90 0d       	add	r25, r0
    2e5c:	52 9f       	mul	r21, r18
    2e5e:	90 0d       	add	r25, r0
    2e60:	11 24       	eor	r1, r1
    2e62:	e0 91 28 04 	lds	r30, 0x0428
    2e66:	f0 91 29 04 	lds	r31, 0x0429
    2e6a:	e0 0f       	add	r30, r16
    2e6c:	f1 1f       	adc	r31, r17
    2e6e:	e8 0f       	add	r30, r24
    2e70:	f9 1f       	adc	r31, r25
    2e72:	80 81       	ld	r24, Z
    2e74:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN12OrangutanLCD9send_dataEh>
    2e78:	20 91 f5 03 	lds	r18, 0x03F5
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	22 50       	subi	r18, 0x02	; 2
    2e80:	30 40       	sbci	r19, 0x00	; 0
    2e82:	80 91 f6 03 	lds	r24, 0x03F6
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	ac 01       	movw	r20, r24
    2e8a:	24 9f       	mul	r18, r20
    2e8c:	c0 01       	movw	r24, r0
    2e8e:	25 9f       	mul	r18, r21
    2e90:	90 0d       	add	r25, r0
    2e92:	34 9f       	mul	r19, r20
    2e94:	90 0d       	add	r25, r0
    2e96:	11 24       	eor	r1, r1
    2e98:	e0 91 28 04 	lds	r30, 0x0428
    2e9c:	f0 91 29 04 	lds	r31, 0x0429
    2ea0:	e0 0f       	add	r30, r16
    2ea2:	f1 1f       	adc	r31, r17
    2ea4:	e8 0f       	add	r30, r24
    2ea6:	f9 1f       	adc	r31, r25
    2ea8:	d0 82       	st	Z, r13
    2eaa:	f3 94       	inc	r15
    2eac:	20 91 f6 03 	lds	r18, 0x03F6
    2eb0:	f2 16       	cp	r15, r18
    2eb2:	40 f2       	brcs	.-112    	; 0x2e44 <lcd_putchar+0x17e>
    2eb4:	60 91 f5 03 	lds	r22, 0x03F5
    2eb8:	61 50       	subi	r22, 0x01	; 1
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD6gotoXYEhh>
    2ec0:	00 e0       	ldi	r16, 0x00	; 0
    2ec2:	04 c0       	rjmp	.+8      	; 0x2ecc <lcd_putchar+0x206>
    2ec4:	80 e2       	ldi	r24, 0x20	; 32
    2ec6:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN12OrangutanLCD9send_dataEh>
    2eca:	0f 5f       	subi	r16, 0xFF	; 255
    2ecc:	80 91 f6 03 	lds	r24, 0x03F6
    2ed0:	08 17       	cp	r16, r24
    2ed2:	c0 f3       	brcs	.-16     	; 0x2ec4 <lcd_putchar+0x1fe>
    2ed4:	03 c0       	rjmp	.+6      	; 0x2edc <lcd_putchar+0x216>
    2ed6:	4f 5f       	subi	r20, 0xFF	; 255
    2ed8:	40 93 2a 04 	sts	0x042A, r20
    2edc:	10 92 2b 04 	sts	0x042B, r1
    2ee0:	80 91 2b 04 	lds	r24, 0x042B
    2ee4:	60 91 2a 04 	lds	r22, 0x042A
    2ee8:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD6gotoXYEhh>
    2eec:	2e 2d       	mov	r18, r14
    2eee:	33 27       	eor	r19, r19
    2ef0:	27 fd       	sbrc	r18, 7
    2ef2:	30 95       	com	r19
    2ef4:	c9 01       	movw	r24, r18
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	e8 e0       	ldi	r30, 0x08	; 8
    2efc:	0c 94 5c 20 	jmp	0x40b8	; 0x40b8 <__epilogue_restores__+0x14>

00002f00 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    2f00:	ef 92       	push	r14
    2f02:	ff 92       	push	r15
    2f04:	0f 93       	push	r16
    2f06:	1f 93       	push	r17
    2f08:	cf 93       	push	r28
    2f0a:	df 93       	push	r29
    2f0c:	7c 01       	movw	r14, r24
    2f0e:	06 2f       	mov	r16, r22
    2f10:	10 e0       	ldi	r17, 0x00	; 0
    2f12:	53 e0       	ldi	r21, 0x03	; 3
    2f14:	00 0f       	add	r16, r16
    2f16:	11 1f       	adc	r17, r17
    2f18:	5a 95       	dec	r21
    2f1a:	e1 f7       	brne	.-8      	; 0x2f14 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    2f1c:	c0 e0       	ldi	r28, 0x00	; 0
    2f1e:	d0 e0       	ldi	r29, 0x00	; 0
    2f20:	9e 01       	movw	r18, r28
    2f22:	20 0f       	add	r18, r16
    2f24:	82 2f       	mov	r24, r18
    2f26:	80 64       	ori	r24, 0x40	; 64
    2f28:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN12OrangutanLCD8send_cmdEh>
    2f2c:	f7 01       	movw	r30, r14
    2f2e:	ec 0f       	add	r30, r28
    2f30:	fd 1f       	adc	r31, r29
    2f32:	e4 91       	lpm	r30, Z+
    2f34:	8e 2f       	mov	r24, r30
    2f36:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN12OrangutanLCD9send_dataEh>
    2f3a:	21 96       	adiw	r28, 0x01	; 1
    2f3c:	c8 30       	cpi	r28, 0x08	; 8
    2f3e:	d1 05       	cpc	r29, r1
    2f40:	79 f7       	brne	.-34     	; 0x2f20 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	e6 e0       	ldi	r30, 0x06	; 6
    2f48:	0c 94 5e 20 	jmp	0x40bc	; 0x40bc <__epilogue_restores__+0x18>

00002f4c <lcd_load_custom_character>:
    2f4c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    2f50:	08 95       	ret

00002f52 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    2f52:	60 e0       	ldi	r22, 0x00	; 0
    2f54:	41 e0       	ldi	r20, 0x01	; 1
    2f56:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZN12OrangutanLCD4sendEhhh>
    2f5a:	08 95       	ret

00002f5c <_ZN12OrangutanLCD6scrollEhhj>:
    2f5c:	0f 93       	push	r16
    2f5e:	1f 93       	push	r17
    2f60:	cf 93       	push	r28
    2f62:	df 93       	push	r29
    2f64:	08 2f       	mov	r16, r24
    2f66:	16 2f       	mov	r17, r22
    2f68:	ea 01       	movw	r28, r20
    2f6a:	0b c0       	rjmp	.+22     	; 0x2f82 <_ZN12OrangutanLCD6scrollEhhj+0x26>
    2f6c:	00 23       	and	r16, r16
    2f6e:	11 f4       	brne	.+4      	; 0x2f74 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    2f70:	88 e1       	ldi	r24, 0x18	; 24
    2f72:	01 c0       	rjmp	.+2      	; 0x2f76 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    2f74:	8c e1       	ldi	r24, 0x1C	; 28
    2f76:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN12OrangutanLCD8send_cmdEh>
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <delay_ms>
    2f80:	11 50       	subi	r17, 0x01	; 1
    2f82:	11 23       	and	r17, r17
    2f84:	99 f7       	brne	.-26     	; 0x2f6c <_ZN12OrangutanLCD6scrollEhhj+0x10>
    2f86:	df 91       	pop	r29
    2f88:	cf 91       	pop	r28
    2f8a:	1f 91       	pop	r17
    2f8c:	0f 91       	pop	r16
    2f8e:	08 95       	ret

00002f90 <lcd_scroll>:
    2f90:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <_ZN12OrangutanLCD6scrollEhhj>
    2f94:	08 95       	ret

00002f96 <serial_get_mode>:
    2f96:	28 2f       	mov	r18, r24
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	f9 01       	movw	r30, r18
    2f9c:	93 e0       	ldi	r25, 0x03	; 3
    2f9e:	ee 0f       	add	r30, r30
    2fa0:	ff 1f       	adc	r31, r31
    2fa2:	9a 95       	dec	r25
    2fa4:	e1 f7       	brne	.-8      	; 0x2f9e <serial_get_mode+0x8>
    2fa6:	22 0f       	add	r18, r18
    2fa8:	33 1f       	adc	r19, r19
    2faa:	e2 0f       	add	r30, r18
    2fac:	f3 1f       	adc	r31, r19
    2fae:	e9 50       	subi	r30, 0x09	; 9
    2fb0:	fc 4f       	sbci	r31, 0xFC	; 252
    2fb2:	80 81       	ld	r24, Z
    2fb4:	08 95       	ret

00002fb6 <serial_get_received_bytes>:
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	fc 01       	movw	r30, r24
    2fba:	ee 0f       	add	r30, r30
    2fbc:	ff 1f       	adc	r31, r31
    2fbe:	ee 0f       	add	r30, r30
    2fc0:	ff 1f       	adc	r31, r31
    2fc2:	e8 0f       	add	r30, r24
    2fc4:	f9 1f       	adc	r31, r25
    2fc6:	ee 0f       	add	r30, r30
    2fc8:	ff 1f       	adc	r31, r31
    2fca:	e7 50       	subi	r30, 0x07	; 7
    2fcc:	fc 4f       	sbci	r31, 0xFC	; 252
    2fce:	80 81       	ld	r24, Z
    2fd0:	08 95       	ret

00002fd2 <serial_receive_buffer_full>:
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	ee 0f       	add	r30, r30
    2fd8:	ff 1f       	adc	r31, r31
    2fda:	ee 0f       	add	r30, r30
    2fdc:	ff 1f       	adc	r31, r31
    2fde:	e8 0f       	add	r30, r24
    2fe0:	f9 1f       	adc	r31, r25
    2fe2:	ee 0f       	add	r30, r30
    2fe4:	ff 1f       	adc	r31, r31
    2fe6:	e7 50       	subi	r30, 0x07	; 7
    2fe8:	fc 4f       	sbci	r31, 0xFC	; 252
    2fea:	20 81       	ld	r18, Z
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	fc 01       	movw	r30, r24
    2ff0:	53 e0       	ldi	r21, 0x03	; 3
    2ff2:	ee 0f       	add	r30, r30
    2ff4:	ff 1f       	adc	r31, r31
    2ff6:	5a 95       	dec	r21
    2ff8:	e1 f7       	brne	.-8      	; 0x2ff2 <serial_receive_buffer_full+0x20>
    2ffa:	88 0f       	add	r24, r24
    2ffc:	99 1f       	adc	r25, r25
    2ffe:	e8 0f       	add	r30, r24
    3000:	f9 1f       	adc	r31, r25
    3002:	e9 50       	subi	r30, 0x09	; 9
    3004:	fc 4f       	sbci	r31, 0xFC	; 252
    3006:	84 81       	ldd	r24, Z+4	; 0x04
    3008:	28 17       	cp	r18, r24
    300a:	09 f4       	brne	.+2      	; 0x300e <serial_receive_buffer_full+0x3c>
    300c:	31 e0       	ldi	r19, 0x01	; 1
    300e:	83 2f       	mov	r24, r19
    3010:	08 95       	ret

00003012 <serial_get_sent_bytes>:
    3012:	28 2f       	mov	r18, r24
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	f9 01       	movw	r30, r18
    3018:	b3 e0       	ldi	r27, 0x03	; 3
    301a:	ee 0f       	add	r30, r30
    301c:	ff 1f       	adc	r31, r31
    301e:	ba 95       	dec	r27
    3020:	e1 f7       	brne	.-8      	; 0x301a <serial_get_sent_bytes+0x8>
    3022:	22 0f       	add	r18, r18
    3024:	33 1f       	adc	r19, r19
    3026:	e2 0f       	add	r30, r18
    3028:	f3 1f       	adc	r31, r19
    302a:	e9 50       	subi	r30, 0x09	; 9
    302c:	fc 4f       	sbci	r31, 0xFC	; 252
    302e:	81 81       	ldd	r24, Z+1	; 0x01
    3030:	08 95       	ret

00003032 <serial_send_buffer_empty>:
    3032:	28 2f       	mov	r18, r24
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	f9 01       	movw	r30, r18
    3038:	73 e0       	ldi	r23, 0x03	; 3
    303a:	ee 0f       	add	r30, r30
    303c:	ff 1f       	adc	r31, r31
    303e:	7a 95       	dec	r23
    3040:	e1 f7       	brne	.-8      	; 0x303a <serial_send_buffer_empty+0x8>
    3042:	22 0f       	add	r18, r18
    3044:	33 1f       	adc	r19, r19
    3046:	e2 0f       	add	r30, r18
    3048:	f3 1f       	adc	r31, r19
    304a:	e9 50       	subi	r30, 0x09	; 9
    304c:	fc 4f       	sbci	r31, 0xFC	; 252
    304e:	91 81       	ldd	r25, Z+1	; 0x01
    3050:	40 e0       	ldi	r20, 0x00	; 0
    3052:	28 2f       	mov	r18, r24
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	f9 01       	movw	r30, r18
    3058:	53 e0       	ldi	r21, 0x03	; 3
    305a:	ee 0f       	add	r30, r30
    305c:	ff 1f       	adc	r31, r31
    305e:	5a 95       	dec	r21
    3060:	e1 f7       	brne	.-8      	; 0x305a <serial_send_buffer_empty+0x28>
    3062:	22 0f       	add	r18, r18
    3064:	33 1f       	adc	r19, r19
    3066:	e2 0f       	add	r30, r18
    3068:	f3 1f       	adc	r31, r19
    306a:	e9 50       	subi	r30, 0x09	; 9
    306c:	fc 4f       	sbci	r31, 0xFC	; 252
    306e:	83 81       	ldd	r24, Z+3	; 0x03
    3070:	98 17       	cp	r25, r24
    3072:	09 f4       	brne	.+2      	; 0x3076 <serial_send_buffer_empty+0x44>
    3074:	41 e0       	ldi	r20, 0x01	; 1
    3076:	84 2f       	mov	r24, r20
    3078:	08 95       	ret

0000307a <_ZN15OrangutanSerialC2Ev>:
    307a:	08 95       	ret

0000307c <_ZN15OrangutanSerialC1Ev>:
    307c:	08 95       	ret

0000307e <_ZN15OrangutanSerial8initPortEh>:
    307e:	88 23       	and	r24, r24
    3080:	21 f0       	breq	.+8      	; 0x308a <_ZN15OrangutanSerial8initPortEh+0xc>
    3082:	81 30       	cpi	r24, 0x01	; 1
    3084:	09 f0       	breq	.+2      	; 0x3088 <_ZN15OrangutanSerial8initPortEh+0xa>
    3086:	44 c0       	rjmp	.+136    	; 0x3110 <_ZN15OrangutanSerial8initPortEh+0x92>
    3088:	1d c0       	rjmp	.+58     	; 0x30c4 <_ZN15OrangutanSerial8initPortEh+0x46>
    308a:	20 91 f7 03 	lds	r18, 0x03F7
    308e:	22 23       	and	r18, r18
    3090:	11 f4       	brne	.+4      	; 0x3096 <_ZN15OrangutanSerial8initPortEh+0x18>
    3092:	88 e9       	ldi	r24, 0x98	; 152
    3094:	01 c0       	rjmp	.+2      	; 0x3098 <_ZN15OrangutanSerial8initPortEh+0x1a>
    3096:	88 e1       	ldi	r24, 0x18	; 24
    3098:	80 93 c1 00 	sts	0x00C1, r24
    309c:	80 91 fd 03 	lds	r24, 0x03FD
    30a0:	90 91 fe 03 	lds	r25, 0x03FE
    30a4:	89 2b       	or	r24, r25
    30a6:	61 f1       	breq	.+88     	; 0x3100 <_ZN15OrangutanSerial8initPortEh+0x82>
    30a8:	90 91 f8 03 	lds	r25, 0x03F8
    30ac:	80 91 fa 03 	lds	r24, 0x03FA
    30b0:	98 17       	cp	r25, r24
    30b2:	30 f5       	brcc	.+76     	; 0x3100 <_ZN15OrangutanSerial8initPortEh+0x82>
    30b4:	22 23       	and	r18, r18
    30b6:	21 f5       	brne	.+72     	; 0x3100 <_ZN15OrangutanSerial8initPortEh+0x82>
    30b8:	80 91 c1 00 	lds	r24, 0x00C1
    30bc:	80 62       	ori	r24, 0x20	; 32
    30be:	80 93 c1 00 	sts	0x00C1, r24
    30c2:	1c c0       	rjmp	.+56     	; 0x30fc <_ZN15OrangutanSerial8initPortEh+0x7e>
    30c4:	20 91 01 04 	lds	r18, 0x0401
    30c8:	22 23       	and	r18, r18
    30ca:	11 f4       	brne	.+4      	; 0x30d0 <_ZN15OrangutanSerial8initPortEh+0x52>
    30cc:	88 e9       	ldi	r24, 0x98	; 152
    30ce:	01 c0       	rjmp	.+2      	; 0x30d2 <_ZN15OrangutanSerial8initPortEh+0x54>
    30d0:	88 e1       	ldi	r24, 0x18	; 24
    30d2:	80 93 c9 00 	sts	0x00C9, r24
    30d6:	80 91 07 04 	lds	r24, 0x0407
    30da:	90 91 08 04 	lds	r25, 0x0408
    30de:	89 2b       	or	r24, r25
    30e0:	99 f0       	breq	.+38     	; 0x3108 <_ZN15OrangutanSerial8initPortEh+0x8a>
    30e2:	90 91 02 04 	lds	r25, 0x0402
    30e6:	80 91 04 04 	lds	r24, 0x0404
    30ea:	98 17       	cp	r25, r24
    30ec:	68 f4       	brcc	.+26     	; 0x3108 <_ZN15OrangutanSerial8initPortEh+0x8a>
    30ee:	22 23       	and	r18, r18
    30f0:	59 f4       	brne	.+22     	; 0x3108 <_ZN15OrangutanSerial8initPortEh+0x8a>
    30f2:	80 91 c9 00 	lds	r24, 0x00C9
    30f6:	80 62       	ori	r24, 0x20	; 32
    30f8:	80 93 c9 00 	sts	0x00C9, r24
    30fc:	78 94       	sei
    30fe:	08 95       	ret
    3100:	80 91 c1 00 	lds	r24, 0x00C1
    3104:	8f 7d       	andi	r24, 0xDF	; 223
    3106:	db cf       	rjmp	.-74     	; 0x30be <_ZN15OrangutanSerial8initPortEh+0x40>
    3108:	80 91 c9 00 	lds	r24, 0x00C9
    310c:	8f 7d       	andi	r24, 0xDF	; 223
    310e:	f4 cf       	rjmp	.-24     	; 0x30f8 <_ZN15OrangutanSerial8initPortEh+0x7a>
    3110:	08 95       	ret

00003112 <serial_set_mode>:
    3112:	28 2f       	mov	r18, r24
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	f9 01       	movw	r30, r18
    3118:	b3 e0       	ldi	r27, 0x03	; 3
    311a:	ee 0f       	add	r30, r30
    311c:	ff 1f       	adc	r31, r31
    311e:	ba 95       	dec	r27
    3120:	e1 f7       	brne	.-8      	; 0x311a <serial_set_mode+0x8>
    3122:	22 0f       	add	r18, r18
    3124:	33 1f       	adc	r19, r19
    3126:	e2 0f       	add	r30, r18
    3128:	f3 1f       	adc	r31, r19
    312a:	e9 50       	subi	r30, 0x09	; 9
    312c:	fc 4f       	sbci	r31, 0xFC	; 252
    312e:	60 83       	st	Z, r22
    3130:	0e 94 3f 18 	call	0x307e	; 0x307e <_ZN15OrangutanSerial8initPortEh>
    3134:	08 95       	ret

00003136 <_ZN15OrangutanSerial11setBaudRateEhm>:
    3136:	a0 e0       	ldi	r26, 0x00	; 0
    3138:	b0 e0       	ldi	r27, 0x00	; 0
    313a:	e1 ea       	ldi	r30, 0xA1	; 161
    313c:	f8 e1       	ldi	r31, 0x18	; 24
    313e:	0c 94 41 20 	jmp	0x4082	; 0x4082 <__prologue_saves__+0x16>
    3142:	d8 2e       	mov	r13, r24
    3144:	7a 01       	movw	r14, r20
    3146:	8b 01       	movw	r16, r22
    3148:	0e 94 3f 18 	call	0x307e	; 0x307e <_ZN15OrangutanSerial8initPortEh>
    314c:	82 e0       	ldi	r24, 0x02	; 2
    314e:	d8 16       	cp	r13, r24
    3150:	19 f1       	breq	.+70     	; 0x3198 <_ZN15OrangutanSerial11setBaudRateEhm+0x62>
    3152:	dd 20       	and	r13, r13
    3154:	19 f0       	breq	.+6      	; 0x315c <_ZN15OrangutanSerial11setBaudRateEhm+0x26>
    3156:	cc ec       	ldi	r28, 0xCC	; 204
    3158:	d0 e0       	ldi	r29, 0x00	; 0
    315a:	02 c0       	rjmp	.+4      	; 0x3160 <_ZN15OrangutanSerial11setBaudRateEhm+0x2a>
    315c:	c4 ec       	ldi	r28, 0xC4	; 196
    315e:	d0 e0       	ldi	r29, 0x00	; 0
    3160:	60 ea       	ldi	r22, 0xA0	; 160
    3162:	75 e2       	ldi	r23, 0x25	; 37
    3164:	86 e2       	ldi	r24, 0x26	; 38
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	6e 19       	sub	r22, r14
    316a:	7f 09       	sbc	r23, r15
    316c:	80 0b       	sbc	r24, r16
    316e:	91 0b       	sbc	r25, r17
    3170:	33 e0       	ldi	r19, 0x03	; 3
    3172:	66 0f       	add	r22, r22
    3174:	77 1f       	adc	r23, r23
    3176:	88 1f       	adc	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	3a 95       	dec	r19
    317c:	d1 f7       	brne	.-12     	; 0x3172 <_ZN15OrangutanSerial11setBaudRateEhm+0x3c>
    317e:	24 e0       	ldi	r18, 0x04	; 4
    3180:	ee 0c       	add	r14, r14
    3182:	ff 1c       	adc	r15, r15
    3184:	00 1f       	adc	r16, r16
    3186:	11 1f       	adc	r17, r17
    3188:	2a 95       	dec	r18
    318a:	d1 f7       	brne	.-12     	; 0x3180 <_ZN15OrangutanSerial11setBaudRateEhm+0x4a>
    318c:	a8 01       	movw	r20, r16
    318e:	97 01       	movw	r18, r14
    3190:	0e 94 14 20 	call	0x4028	; 0x4028 <__udivmodsi4>
    3194:	39 83       	std	Y+1, r19	; 0x01
    3196:	28 83       	st	Y, r18
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62
    319c:	e7 e0       	ldi	r30, 0x07	; 7
    319e:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <__epilogue_restores__+0x16>

000031a2 <serial_set_baud_rate>:
    31a2:	0e 94 9b 18 	call	0x3136	; 0x3136 <_ZN15OrangutanSerial11setBaudRateEhm>
    31a6:	08 95       	ret

000031a8 <_ZN15OrangutanSerial7setModeEhh>:
    31a8:	28 2f       	mov	r18, r24
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	f9 01       	movw	r30, r18
    31ae:	53 e0       	ldi	r21, 0x03	; 3
    31b0:	ee 0f       	add	r30, r30
    31b2:	ff 1f       	adc	r31, r31
    31b4:	5a 95       	dec	r21
    31b6:	e1 f7       	brne	.-8      	; 0x31b0 <_ZN15OrangutanSerial7setModeEhh+0x8>
    31b8:	22 0f       	add	r18, r18
    31ba:	33 1f       	adc	r19, r19
    31bc:	e2 0f       	add	r30, r18
    31be:	f3 1f       	adc	r31, r19
    31c0:	e9 50       	subi	r30, 0x09	; 9
    31c2:	fc 4f       	sbci	r31, 0xFC	; 252
    31c4:	60 83       	st	Z, r22
    31c6:	0e 94 3f 18 	call	0x307e	; 0x307e <_ZN15OrangutanSerial8initPortEh>
    31ca:	08 95       	ret

000031cc <_ZN15OrangutanSerial7receiveEhPch>:
    31cc:	58 2f       	mov	r21, r24
    31ce:	82 30       	cpi	r24, 0x02	; 2
    31d0:	51 f0       	breq	.+20     	; 0x31e6 <_ZN15OrangutanSerial7receiveEhPch+0x1a>
    31d2:	88 23       	and	r24, r24
    31d4:	19 f0       	breq	.+6      	; 0x31dc <_ZN15OrangutanSerial7receiveEhPch+0x10>
    31d6:	e9 ec       	ldi	r30, 0xC9	; 201
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <_ZN15OrangutanSerial7receiveEhPch+0x14>
    31dc:	e1 ec       	ldi	r30, 0xC1	; 193
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	80 81       	ld	r24, Z
    31e2:	8f 77       	andi	r24, 0x7F	; 127
    31e4:	80 83       	st	Z, r24
    31e6:	25 2f       	mov	r18, r21
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	d9 01       	movw	r26, r18
    31ec:	aa 0f       	add	r26, r26
    31ee:	bb 1f       	adc	r27, r27
    31f0:	c9 01       	movw	r24, r18
    31f2:	e3 e0       	ldi	r30, 0x03	; 3
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	ea 95       	dec	r30
    31fa:	e1 f7       	brne	.-8      	; 0x31f4 <_ZN15OrangutanSerial7receiveEhPch+0x28>
    31fc:	a8 0f       	add	r26, r24
    31fe:	b9 1f       	adc	r27, r25
    3200:	a9 50       	subi	r26, 0x09	; 9
    3202:	bc 4f       	sbci	r27, 0xFC	; 252
    3204:	19 96       	adiw	r26, 0x09	; 9
    3206:	7c 93       	st	X, r23
    3208:	6e 93       	st	-X, r22
    320a:	18 97       	sbiw	r26, 0x08	; 8
    320c:	f9 01       	movw	r30, r18
    320e:	ee 0f       	add	r30, r30
    3210:	ff 1f       	adc	r31, r31
    3212:	ee 0f       	add	r30, r30
    3214:	ff 1f       	adc	r31, r31
    3216:	e2 0f       	add	r30, r18
    3218:	f3 1f       	adc	r31, r19
    321a:	ee 0f       	add	r30, r30
    321c:	ff 1f       	adc	r31, r31
    321e:	e7 50       	subi	r30, 0x07	; 7
    3220:	fc 4f       	sbci	r31, 0xFC	; 252
    3222:	10 82       	st	Z, r1
    3224:	14 96       	adiw	r26, 0x04	; 4
    3226:	4c 93       	st	X, r20
    3228:	14 97       	sbiw	r26, 0x04	; 4
    322a:	15 96       	adiw	r26, 0x05	; 5
    322c:	1c 92       	st	X, r1
    322e:	15 97       	sbiw	r26, 0x05	; 5
    3230:	52 30       	cpi	r21, 0x02	; 2
    3232:	69 f0       	breq	.+26     	; 0x324e <_ZN15OrangutanSerial7receiveEhPch+0x82>
    3234:	8c 91       	ld	r24, X
    3236:	88 23       	and	r24, r24
    3238:	51 f4       	brne	.+20     	; 0x324e <_ZN15OrangutanSerial7receiveEhPch+0x82>
    323a:	55 23       	and	r21, r21
    323c:	19 f0       	breq	.+6      	; 0x3244 <_ZN15OrangutanSerial7receiveEhPch+0x78>
    323e:	e9 ec       	ldi	r30, 0xC9	; 201
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	02 c0       	rjmp	.+4      	; 0x3248 <_ZN15OrangutanSerial7receiveEhPch+0x7c>
    3244:	e1 ec       	ldi	r30, 0xC1	; 193
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	80 68       	ori	r24, 0x80	; 128
    324c:	80 83       	st	Z, r24
    324e:	08 95       	ret

00003250 <serial_receive>:
    3250:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN15OrangutanSerial7receiveEhPch>
    3254:	08 95       	ret

00003256 <_ZN15OrangutanSerial11receiveRingEhPch>:
    3256:	58 2f       	mov	r21, r24
    3258:	82 30       	cpi	r24, 0x02	; 2
    325a:	51 f0       	breq	.+20     	; 0x3270 <_ZN15OrangutanSerial11receiveRingEhPch+0x1a>
    325c:	88 23       	and	r24, r24
    325e:	19 f0       	breq	.+6      	; 0x3266 <_ZN15OrangutanSerial11receiveRingEhPch+0x10>
    3260:	e9 ec       	ldi	r30, 0xC9	; 201
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	02 c0       	rjmp	.+4      	; 0x326a <_ZN15OrangutanSerial11receiveRingEhPch+0x14>
    3266:	e1 ec       	ldi	r30, 0xC1	; 193
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	80 81       	ld	r24, Z
    326c:	8f 77       	andi	r24, 0x7F	; 127
    326e:	80 83       	st	Z, r24
    3270:	25 2f       	mov	r18, r21
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	d9 01       	movw	r26, r18
    3276:	aa 0f       	add	r26, r26
    3278:	bb 1f       	adc	r27, r27
    327a:	c9 01       	movw	r24, r18
    327c:	e3 e0       	ldi	r30, 0x03	; 3
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	ea 95       	dec	r30
    3284:	e1 f7       	brne	.-8      	; 0x327e <_ZN15OrangutanSerial11receiveRingEhPch+0x28>
    3286:	a8 0f       	add	r26, r24
    3288:	b9 1f       	adc	r27, r25
    328a:	a9 50       	subi	r26, 0x09	; 9
    328c:	bc 4f       	sbci	r27, 0xFC	; 252
    328e:	19 96       	adiw	r26, 0x09	; 9
    3290:	7c 93       	st	X, r23
    3292:	6e 93       	st	-X, r22
    3294:	18 97       	sbiw	r26, 0x08	; 8
    3296:	f9 01       	movw	r30, r18
    3298:	ee 0f       	add	r30, r30
    329a:	ff 1f       	adc	r31, r31
    329c:	ee 0f       	add	r30, r30
    329e:	ff 1f       	adc	r31, r31
    32a0:	e2 0f       	add	r30, r18
    32a2:	f3 1f       	adc	r31, r19
    32a4:	ee 0f       	add	r30, r30
    32a6:	ff 1f       	adc	r31, r31
    32a8:	e7 50       	subi	r30, 0x07	; 7
    32aa:	fc 4f       	sbci	r31, 0xFC	; 252
    32ac:	10 82       	st	Z, r1
    32ae:	14 96       	adiw	r26, 0x04	; 4
    32b0:	4c 93       	st	X, r20
    32b2:	14 97       	sbiw	r26, 0x04	; 4
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	15 96       	adiw	r26, 0x05	; 5
    32b8:	8c 93       	st	X, r24
    32ba:	15 97       	sbiw	r26, 0x05	; 5
    32bc:	52 30       	cpi	r21, 0x02	; 2
    32be:	69 f0       	breq	.+26     	; 0x32da <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    32c0:	8c 91       	ld	r24, X
    32c2:	88 23       	and	r24, r24
    32c4:	51 f4       	brne	.+20     	; 0x32da <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    32c6:	55 23       	and	r21, r21
    32c8:	19 f0       	breq	.+6      	; 0x32d0 <_ZN15OrangutanSerial11receiveRingEhPch+0x7a>
    32ca:	e9 ec       	ldi	r30, 0xC9	; 201
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	02 c0       	rjmp	.+4      	; 0x32d4 <_ZN15OrangutanSerial11receiveRingEhPch+0x7e>
    32d0:	e1 ec       	ldi	r30, 0xC1	; 193
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	80 68       	ori	r24, 0x80	; 128
    32d8:	80 83       	st	Z, r24
    32da:	08 95       	ret

000032dc <serial_receive_ring>:
    32dc:	0e 94 2b 19 	call	0x3256	; 0x3256 <_ZN15OrangutanSerial11receiveRingEhPch>
    32e0:	08 95       	ret

000032e2 <_ZN15OrangutanSerial13cancelReceiveEh>:
    32e2:	60 e0       	ldi	r22, 0x00	; 0
    32e4:	70 e0       	ldi	r23, 0x00	; 0
    32e6:	40 e0       	ldi	r20, 0x00	; 0
    32e8:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN15OrangutanSerial7receiveEhPch>
    32ec:	08 95       	ret

000032ee <serial_cancel_receive>:
    32ee:	0e 94 71 19 	call	0x32e2	; 0x32e2 <_ZN15OrangutanSerial13cancelReceiveEh>
    32f2:	08 95       	ret

000032f4 <__vector_20>:
    32f4:	1f 92       	push	r1
    32f6:	0f 92       	push	r0
    32f8:	0f b6       	in	r0, 0x3f	; 63
    32fa:	0f 92       	push	r0
    32fc:	0b b6       	in	r0, 0x3b	; 59
    32fe:	0f 92       	push	r0
    3300:	11 24       	eor	r1, r1
    3302:	2f 93       	push	r18
    3304:	8f 93       	push	r24
    3306:	9f 93       	push	r25
    3308:	ef 93       	push	r30
    330a:	ff 93       	push	r31
    330c:	20 91 c6 00 	lds	r18, 0x00C6
    3310:	e0 91 ff 03 	lds	r30, 0x03FF
    3314:	f0 91 00 04 	lds	r31, 0x0400
    3318:	30 97       	sbiw	r30, 0x00	; 0
    331a:	81 f0       	breq	.+32     	; 0x333c <__vector_20+0x48>
    331c:	90 91 f9 03 	lds	r25, 0x03F9
    3320:	80 91 fb 03 	lds	r24, 0x03FB
    3324:	98 17       	cp	r25, r24
    3326:	50 f4       	brcc	.+20     	; 0x333c <__vector_20+0x48>
    3328:	80 91 f9 03 	lds	r24, 0x03F9
    332c:	e8 0f       	add	r30, r24
    332e:	f1 1d       	adc	r31, r1
    3330:	20 83       	st	Z, r18
    3332:	80 91 f9 03 	lds	r24, 0x03F9
    3336:	8f 5f       	subi	r24, 0xFF	; 255
    3338:	80 93 f9 03 	sts	0x03F9, r24
    333c:	90 91 f9 03 	lds	r25, 0x03F9
    3340:	80 91 fb 03 	lds	r24, 0x03FB
    3344:	98 17       	cp	r25, r24
    3346:	31 f4       	brne	.+12     	; 0x3354 <__vector_20+0x60>
    3348:	80 91 fc 03 	lds	r24, 0x03FC
    334c:	88 23       	and	r24, r24
    334e:	11 f0       	breq	.+4      	; 0x3354 <__vector_20+0x60>
    3350:	10 92 f9 03 	sts	0x03F9, r1
    3354:	ff 91       	pop	r31
    3356:	ef 91       	pop	r30
    3358:	9f 91       	pop	r25
    335a:	8f 91       	pop	r24
    335c:	2f 91       	pop	r18
    335e:	0f 90       	pop	r0
    3360:	0b be       	out	0x3b, r0	; 59
    3362:	0f 90       	pop	r0
    3364:	0f be       	out	0x3f, r0	; 63
    3366:	0f 90       	pop	r0
    3368:	1f 90       	pop	r1
    336a:	18 95       	reti

0000336c <__vector_28>:
    336c:	1f 92       	push	r1
    336e:	0f 92       	push	r0
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	0f 92       	push	r0
    3374:	0b b6       	in	r0, 0x3b	; 59
    3376:	0f 92       	push	r0
    3378:	11 24       	eor	r1, r1
    337a:	2f 93       	push	r18
    337c:	8f 93       	push	r24
    337e:	9f 93       	push	r25
    3380:	ef 93       	push	r30
    3382:	ff 93       	push	r31
    3384:	20 91 ce 00 	lds	r18, 0x00CE
    3388:	e0 91 09 04 	lds	r30, 0x0409
    338c:	f0 91 0a 04 	lds	r31, 0x040A
    3390:	30 97       	sbiw	r30, 0x00	; 0
    3392:	81 f0       	breq	.+32     	; 0x33b4 <__vector_28+0x48>
    3394:	90 91 03 04 	lds	r25, 0x0403
    3398:	80 91 05 04 	lds	r24, 0x0405
    339c:	98 17       	cp	r25, r24
    339e:	50 f4       	brcc	.+20     	; 0x33b4 <__vector_28+0x48>
    33a0:	80 91 03 04 	lds	r24, 0x0403
    33a4:	e8 0f       	add	r30, r24
    33a6:	f1 1d       	adc	r31, r1
    33a8:	20 83       	st	Z, r18
    33aa:	80 91 03 04 	lds	r24, 0x0403
    33ae:	8f 5f       	subi	r24, 0xFF	; 255
    33b0:	80 93 03 04 	sts	0x0403, r24
    33b4:	90 91 03 04 	lds	r25, 0x0403
    33b8:	80 91 05 04 	lds	r24, 0x0405
    33bc:	98 17       	cp	r25, r24
    33be:	31 f4       	brne	.+12     	; 0x33cc <__vector_28+0x60>
    33c0:	80 91 06 04 	lds	r24, 0x0406
    33c4:	88 23       	and	r24, r24
    33c6:	11 f0       	breq	.+4      	; 0x33cc <__vector_28+0x60>
    33c8:	10 92 03 04 	sts	0x0403, r1
    33cc:	ff 91       	pop	r31
    33ce:	ef 91       	pop	r30
    33d0:	9f 91       	pop	r25
    33d2:	8f 91       	pop	r24
    33d4:	2f 91       	pop	r18
    33d6:	0f 90       	pop	r0
    33d8:	0b be       	out	0x3b, r0	; 59
    33da:	0f 90       	pop	r0
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	0f 90       	pop	r0
    33e0:	1f 90       	pop	r1
    33e2:	18 95       	reti

000033e4 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    33e4:	cf 93       	push	r28
    33e6:	df 93       	push	r29
    33e8:	38 2f       	mov	r19, r24
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	fc 01       	movw	r30, r24
    33ee:	53 e0       	ldi	r21, 0x03	; 3
    33f0:	ee 0f       	add	r30, r30
    33f2:	ff 1f       	adc	r31, r31
    33f4:	5a 95       	dec	r21
    33f6:	e1 f7       	brne	.-8      	; 0x33f0 <_ZN15OrangutanSerial11uart_tx_isrEh+0xc>
    33f8:	88 0f       	add	r24, r24
    33fa:	99 1f       	adc	r25, r25
    33fc:	e8 0f       	add	r30, r24
    33fe:	f9 1f       	adc	r31, r25
    3400:	e9 50       	subi	r30, 0x09	; 9
    3402:	fc 4f       	sbci	r31, 0xFC	; 252
    3404:	a6 81       	ldd	r26, Z+6	; 0x06
    3406:	b7 81       	ldd	r27, Z+7	; 0x07
    3408:	10 97       	sbiw	r26, 0x00	; 0
    340a:	09 f4       	brne	.+2      	; 0x340e <_ZN15OrangutanSerial11uart_tx_isrEh+0x2a>
    340c:	64 c0       	rjmp	.+200    	; 0x34d6 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    340e:	83 2f       	mov	r24, r19
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	fc 01       	movw	r30, r24
    3414:	23 e0       	ldi	r18, 0x03	; 3
    3416:	ee 0f       	add	r30, r30
    3418:	ff 1f       	adc	r31, r31
    341a:	2a 95       	dec	r18
    341c:	e1 f7       	brne	.-8      	; 0x3416 <_ZN15OrangutanSerial11uart_tx_isrEh+0x32>
    341e:	88 0f       	add	r24, r24
    3420:	99 1f       	adc	r25, r25
    3422:	e8 0f       	add	r30, r24
    3424:	f9 1f       	adc	r31, r25
    3426:	e9 50       	subi	r30, 0x09	; 9
    3428:	fc 4f       	sbci	r31, 0xFC	; 252
    342a:	21 81       	ldd	r18, Z+1	; 0x01
    342c:	83 2f       	mov	r24, r19
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	fc 01       	movw	r30, r24
    3432:	63 e0       	ldi	r22, 0x03	; 3
    3434:	ee 0f       	add	r30, r30
    3436:	ff 1f       	adc	r31, r31
    3438:	6a 95       	dec	r22
    343a:	e1 f7       	brne	.-8      	; 0x3434 <_ZN15OrangutanSerial11uart_tx_isrEh+0x50>
    343c:	88 0f       	add	r24, r24
    343e:	99 1f       	adc	r25, r25
    3440:	e8 0f       	add	r30, r24
    3442:	f9 1f       	adc	r31, r25
    3444:	e9 50       	subi	r30, 0x09	; 9
    3446:	fc 4f       	sbci	r31, 0xFC	; 252
    3448:	83 81       	ldd	r24, Z+3	; 0x03
    344a:	28 17       	cp	r18, r24
    344c:	08 f0       	brcs	.+2      	; 0x3450 <_ZN15OrangutanSerial11uart_tx_isrEh+0x6c>
    344e:	43 c0       	rjmp	.+134    	; 0x34d6 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    3450:	33 23       	and	r19, r19
    3452:	19 f0       	breq	.+6      	; 0x345a <_ZN15OrangutanSerial11uart_tx_isrEh+0x76>
    3454:	e8 ec       	ldi	r30, 0xC8	; 200
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	02 c0       	rjmp	.+4      	; 0x345e <_ZN15OrangutanSerial11uart_tx_isrEh+0x7a>
    345a:	e0 ec       	ldi	r30, 0xC0	; 192
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	80 81       	ld	r24, Z
    3460:	85 ff       	sbrs	r24, 5
    3462:	39 c0       	rjmp	.+114    	; 0x34d6 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    3464:	33 23       	and	r19, r19
    3466:	19 f0       	breq	.+6      	; 0x346e <_ZN15OrangutanSerial11uart_tx_isrEh+0x8a>
    3468:	ce ec       	ldi	r28, 0xCE	; 206
    346a:	d0 e0       	ldi	r29, 0x00	; 0
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <_ZN15OrangutanSerial11uart_tx_isrEh+0x8e>
    346e:	c6 ec       	ldi	r28, 0xC6	; 198
    3470:	d0 e0       	ldi	r29, 0x00	; 0
    3472:	83 2f       	mov	r24, r19
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	fc 01       	movw	r30, r24
    3478:	43 e0       	ldi	r20, 0x03	; 3
    347a:	ee 0f       	add	r30, r30
    347c:	ff 1f       	adc	r31, r31
    347e:	4a 95       	dec	r20
    3480:	e1 f7       	brne	.-8      	; 0x347a <_ZN15OrangutanSerial11uart_tx_isrEh+0x96>
    3482:	88 0f       	add	r24, r24
    3484:	99 1f       	adc	r25, r25
    3486:	e8 0f       	add	r30, r24
    3488:	f9 1f       	adc	r31, r25
    348a:	e9 50       	subi	r30, 0x09	; 9
    348c:	fc 4f       	sbci	r31, 0xFC	; 252
    348e:	81 81       	ldd	r24, Z+1	; 0x01
    3490:	a8 0f       	add	r26, r24
    3492:	b1 1d       	adc	r27, r1
    3494:	8c 91       	ld	r24, X
    3496:	88 83       	st	Y, r24
    3498:	83 2f       	mov	r24, r19
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	fc 01       	movw	r30, r24
    349e:	73 e0       	ldi	r23, 0x03	; 3
    34a0:	ee 0f       	add	r30, r30
    34a2:	ff 1f       	adc	r31, r31
    34a4:	7a 95       	dec	r23
    34a6:	e1 f7       	brne	.-8      	; 0x34a0 <_ZN15OrangutanSerial11uart_tx_isrEh+0xbc>
    34a8:	88 0f       	add	r24, r24
    34aa:	99 1f       	adc	r25, r25
    34ac:	e8 0f       	add	r30, r24
    34ae:	f9 1f       	adc	r31, r25
    34b0:	e9 50       	subi	r30, 0x09	; 9
    34b2:	fc 4f       	sbci	r31, 0xFC	; 252
    34b4:	21 81       	ldd	r18, Z+1	; 0x01
    34b6:	2f 5f       	subi	r18, 0xFF	; 255
    34b8:	83 2f       	mov	r24, r19
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	fc 01       	movw	r30, r24
    34be:	53 e0       	ldi	r21, 0x03	; 3
    34c0:	ee 0f       	add	r30, r30
    34c2:	ff 1f       	adc	r31, r31
    34c4:	5a 95       	dec	r21
    34c6:	e1 f7       	brne	.-8      	; 0x34c0 <_ZN15OrangutanSerial11uart_tx_isrEh+0xdc>
    34c8:	88 0f       	add	r24, r24
    34ca:	99 1f       	adc	r25, r25
    34cc:	e8 0f       	add	r30, r24
    34ce:	f9 1f       	adc	r31, r25
    34d0:	e9 50       	subi	r30, 0x09	; 9
    34d2:	fc 4f       	sbci	r31, 0xFC	; 252
    34d4:	21 83       	std	Z+1, r18	; 0x01
    34d6:	83 2f       	mov	r24, r19
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	fc 01       	movw	r30, r24
    34dc:	b3 e0       	ldi	r27, 0x03	; 3
    34de:	ee 0f       	add	r30, r30
    34e0:	ff 1f       	adc	r31, r31
    34e2:	ba 95       	dec	r27
    34e4:	e1 f7       	brne	.-8      	; 0x34de <_ZN15OrangutanSerial11uart_tx_isrEh+0xfa>
    34e6:	88 0f       	add	r24, r24
    34e8:	99 1f       	adc	r25, r25
    34ea:	e8 0f       	add	r30, r24
    34ec:	f9 1f       	adc	r31, r25
    34ee:	e9 50       	subi	r30, 0x09	; 9
    34f0:	fc 4f       	sbci	r31, 0xFC	; 252
    34f2:	86 81       	ldd	r24, Z+6	; 0x06
    34f4:	97 81       	ldd	r25, Z+7	; 0x07
    34f6:	89 2b       	or	r24, r25
    34f8:	09 f4       	brne	.+2      	; 0x34fc <_ZN15OrangutanSerial11uart_tx_isrEh+0x118>
    34fa:	43 c0       	rjmp	.+134    	; 0x3582 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    34fc:	83 2f       	mov	r24, r19
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	fc 01       	movw	r30, r24
    3502:	73 e0       	ldi	r23, 0x03	; 3
    3504:	ee 0f       	add	r30, r30
    3506:	ff 1f       	adc	r31, r31
    3508:	7a 95       	dec	r23
    350a:	e1 f7       	brne	.-8      	; 0x3504 <_ZN15OrangutanSerial11uart_tx_isrEh+0x120>
    350c:	88 0f       	add	r24, r24
    350e:	99 1f       	adc	r25, r25
    3510:	e8 0f       	add	r30, r24
    3512:	f9 1f       	adc	r31, r25
    3514:	e9 50       	subi	r30, 0x09	; 9
    3516:	fc 4f       	sbci	r31, 0xFC	; 252
    3518:	21 81       	ldd	r18, Z+1	; 0x01
    351a:	83 2f       	mov	r24, r19
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	fc 01       	movw	r30, r24
    3520:	53 e0       	ldi	r21, 0x03	; 3
    3522:	ee 0f       	add	r30, r30
    3524:	ff 1f       	adc	r31, r31
    3526:	5a 95       	dec	r21
    3528:	e1 f7       	brne	.-8      	; 0x3522 <_ZN15OrangutanSerial11uart_tx_isrEh+0x13e>
    352a:	88 0f       	add	r24, r24
    352c:	99 1f       	adc	r25, r25
    352e:	e8 0f       	add	r30, r24
    3530:	f9 1f       	adc	r31, r25
    3532:	e9 50       	subi	r30, 0x09	; 9
    3534:	fc 4f       	sbci	r31, 0xFC	; 252
    3536:	83 81       	ldd	r24, Z+3	; 0x03
    3538:	28 17       	cp	r18, r24
    353a:	18 f5       	brcc	.+70     	; 0x3582 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    353c:	83 2f       	mov	r24, r19
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	fc 01       	movw	r30, r24
    3542:	b3 e0       	ldi	r27, 0x03	; 3
    3544:	ee 0f       	add	r30, r30
    3546:	ff 1f       	adc	r31, r31
    3548:	ba 95       	dec	r27
    354a:	e1 f7       	brne	.-8      	; 0x3544 <_ZN15OrangutanSerial11uart_tx_isrEh+0x160>
    354c:	88 0f       	add	r24, r24
    354e:	99 1f       	adc	r25, r25
    3550:	e8 0f       	add	r30, r24
    3552:	f9 1f       	adc	r31, r25
    3554:	e9 50       	subi	r30, 0x09	; 9
    3556:	fc 4f       	sbci	r31, 0xFC	; 252
    3558:	80 81       	ld	r24, Z
    355a:	88 23       	and	r24, r24
    355c:	91 f4       	brne	.+36     	; 0x3582 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    355e:	33 23       	and	r19, r19
    3560:	19 f0       	breq	.+6      	; 0x3568 <_ZN15OrangutanSerial11uart_tx_isrEh+0x184>
    3562:	e9 ec       	ldi	r30, 0xC9	; 201
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	02 c0       	rjmp	.+4      	; 0x356c <_ZN15OrangutanSerial11uart_tx_isrEh+0x188>
    3568:	e1 ec       	ldi	r30, 0xC1	; 193
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	80 81       	ld	r24, Z
    356e:	80 62       	ori	r24, 0x20	; 32
    3570:	04 c0       	rjmp	.+8      	; 0x357a <_ZN15OrangutanSerial11uart_tx_isrEh+0x196>
    3572:	e9 ec       	ldi	r30, 0xC9	; 201
    3574:	f0 e0       	ldi	r31, 0x00	; 0
    3576:	80 81       	ld	r24, Z
    3578:	8f 7d       	andi	r24, 0xDF	; 223
    357a:	80 83       	st	Z, r24
    357c:	df 91       	pop	r29
    357e:	cf 91       	pop	r28
    3580:	08 95       	ret
    3582:	33 23       	and	r19, r19
    3584:	b1 f7       	brne	.-20     	; 0x3572 <_ZN15OrangutanSerial11uart_tx_isrEh+0x18e>
    3586:	e1 ec       	ldi	r30, 0xC1	; 193
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	f5 cf       	rjmp	.-22     	; 0x3576 <_ZN15OrangutanSerial11uart_tx_isrEh+0x192>

0000358c <_ZN15OrangutanSerial4sendEhPch>:
    358c:	28 2f       	mov	r18, r24
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	fc 01       	movw	r30, r24
    3592:	53 e0       	ldi	r21, 0x03	; 3
    3594:	ee 0f       	add	r30, r30
    3596:	ff 1f       	adc	r31, r31
    3598:	5a 95       	dec	r21
    359a:	e1 f7       	brne	.-8      	; 0x3594 <_ZN15OrangutanSerial4sendEhPch+0x8>
    359c:	88 0f       	add	r24, r24
    359e:	99 1f       	adc	r25, r25
    35a0:	e8 0f       	add	r30, r24
    35a2:	f9 1f       	adc	r31, r25
    35a4:	e9 50       	subi	r30, 0x09	; 9
    35a6:	fc 4f       	sbci	r31, 0xFC	; 252
    35a8:	77 83       	std	Z+7, r23	; 0x07
    35aa:	66 83       	std	Z+6, r22	; 0x06
    35ac:	82 2f       	mov	r24, r18
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	fc 01       	movw	r30, r24
    35b2:	b3 e0       	ldi	r27, 0x03	; 3
    35b4:	ee 0f       	add	r30, r30
    35b6:	ff 1f       	adc	r31, r31
    35b8:	ba 95       	dec	r27
    35ba:	e1 f7       	brne	.-8      	; 0x35b4 <_ZN15OrangutanSerial4sendEhPch+0x28>
    35bc:	88 0f       	add	r24, r24
    35be:	99 1f       	adc	r25, r25
    35c0:	e8 0f       	add	r30, r24
    35c2:	f9 1f       	adc	r31, r25
    35c4:	e9 50       	subi	r30, 0x09	; 9
    35c6:	fc 4f       	sbci	r31, 0xFC	; 252
    35c8:	11 82       	std	Z+1, r1	; 0x01
    35ca:	82 2f       	mov	r24, r18
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	fc 01       	movw	r30, r24
    35d0:	73 e0       	ldi	r23, 0x03	; 3
    35d2:	ee 0f       	add	r30, r30
    35d4:	ff 1f       	adc	r31, r31
    35d6:	7a 95       	dec	r23
    35d8:	e1 f7       	brne	.-8      	; 0x35d2 <_ZN15OrangutanSerial4sendEhPch+0x46>
    35da:	88 0f       	add	r24, r24
    35dc:	99 1f       	adc	r25, r25
    35de:	e8 0f       	add	r30, r24
    35e0:	f9 1f       	adc	r31, r25
    35e2:	e9 50       	subi	r30, 0x09	; 9
    35e4:	fc 4f       	sbci	r31, 0xFC	; 252
    35e6:	43 83       	std	Z+3, r20	; 0x03
    35e8:	22 30       	cpi	r18, 0x02	; 2
    35ea:	09 f4       	brne	.+2      	; 0x35ee <_ZN15OrangutanSerial4sendEhPch+0x62>
    35ec:	49 c0       	rjmp	.+146    	; 0x3680 <_ZN15OrangutanSerial4sendEhPch+0xf4>
    35ee:	82 2f       	mov	r24, r18
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	fc 01       	movw	r30, r24
    35f4:	53 e0       	ldi	r21, 0x03	; 3
    35f6:	ee 0f       	add	r30, r30
    35f8:	ff 1f       	adc	r31, r31
    35fa:	5a 95       	dec	r21
    35fc:	e1 f7       	brne	.-8      	; 0x35f6 <_ZN15OrangutanSerial4sendEhPch+0x6a>
    35fe:	88 0f       	add	r24, r24
    3600:	99 1f       	adc	r25, r25
    3602:	e8 0f       	add	r30, r24
    3604:	f9 1f       	adc	r31, r25
    3606:	e9 50       	subi	r30, 0x09	; 9
    3608:	fc 4f       	sbci	r31, 0xFC	; 252
    360a:	86 81       	ldd	r24, Z+6	; 0x06
    360c:	97 81       	ldd	r25, Z+7	; 0x07
    360e:	89 2b       	or	r24, r25
    3610:	91 f1       	breq	.+100    	; 0x3676 <_ZN15OrangutanSerial4sendEhPch+0xea>
    3612:	82 2f       	mov	r24, r18
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	fc 01       	movw	r30, r24
    3618:	b3 e0       	ldi	r27, 0x03	; 3
    361a:	ee 0f       	add	r30, r30
    361c:	ff 1f       	adc	r31, r31
    361e:	ba 95       	dec	r27
    3620:	e1 f7       	brne	.-8      	; 0x361a <_ZN15OrangutanSerial4sendEhPch+0x8e>
    3622:	88 0f       	add	r24, r24
    3624:	99 1f       	adc	r25, r25
    3626:	e8 0f       	add	r30, r24
    3628:	f9 1f       	adc	r31, r25
    362a:	e9 50       	subi	r30, 0x09	; 9
    362c:	fc 4f       	sbci	r31, 0xFC	; 252
    362e:	81 81       	ldd	r24, Z+1	; 0x01
    3630:	84 17       	cp	r24, r20
    3632:	08 f5       	brcc	.+66     	; 0x3676 <_ZN15OrangutanSerial4sendEhPch+0xea>
    3634:	82 2f       	mov	r24, r18
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	fc 01       	movw	r30, r24
    363a:	73 e0       	ldi	r23, 0x03	; 3
    363c:	ee 0f       	add	r30, r30
    363e:	ff 1f       	adc	r31, r31
    3640:	7a 95       	dec	r23
    3642:	e1 f7       	brne	.-8      	; 0x363c <_ZN15OrangutanSerial4sendEhPch+0xb0>
    3644:	88 0f       	add	r24, r24
    3646:	99 1f       	adc	r25, r25
    3648:	e8 0f       	add	r30, r24
    364a:	f9 1f       	adc	r31, r25
    364c:	e9 50       	subi	r30, 0x09	; 9
    364e:	fc 4f       	sbci	r31, 0xFC	; 252
    3650:	80 81       	ld	r24, Z
    3652:	88 23       	and	r24, r24
    3654:	81 f4       	brne	.+32     	; 0x3676 <_ZN15OrangutanSerial4sendEhPch+0xea>
    3656:	22 23       	and	r18, r18
    3658:	19 f0       	breq	.+6      	; 0x3660 <_ZN15OrangutanSerial4sendEhPch+0xd4>
    365a:	e9 ec       	ldi	r30, 0xC9	; 201
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	02 c0       	rjmp	.+4      	; 0x3664 <_ZN15OrangutanSerial4sendEhPch+0xd8>
    3660:	e1 ec       	ldi	r30, 0xC1	; 193
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	80 81       	ld	r24, Z
    3666:	80 62       	ori	r24, 0x20	; 32
    3668:	04 c0       	rjmp	.+8      	; 0x3672 <_ZN15OrangutanSerial4sendEhPch+0xe6>
    366a:	e9 ec       	ldi	r30, 0xC9	; 201
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	80 81       	ld	r24, Z
    3670:	8f 7d       	andi	r24, 0xDF	; 223
    3672:	80 83       	st	Z, r24
    3674:	08 95       	ret
    3676:	22 23       	and	r18, r18
    3678:	c1 f7       	brne	.-16     	; 0x366a <_ZN15OrangutanSerial4sendEhPch+0xde>
    367a:	e1 ec       	ldi	r30, 0xC1	; 193
    367c:	f0 e0       	ldi	r31, 0x00	; 0
    367e:	f7 cf       	rjmp	.-18     	; 0x366e <_ZN15OrangutanSerial4sendEhPch+0xe2>
    3680:	08 95       	ret

00003682 <serial_send>:
    3682:	0e 94 c6 1a 	call	0x358c	; 0x358c <_ZN15OrangutanSerial4sendEhPch>
    3686:	08 95       	ret

00003688 <__vector_21>:
    3688:	1f 92       	push	r1
    368a:	0f 92       	push	r0
    368c:	0f b6       	in	r0, 0x3f	; 63
    368e:	0f 92       	push	r0
    3690:	0b b6       	in	r0, 0x3b	; 59
    3692:	0f 92       	push	r0
    3694:	11 24       	eor	r1, r1
    3696:	2f 93       	push	r18
    3698:	3f 93       	push	r19
    369a:	4f 93       	push	r20
    369c:	5f 93       	push	r21
    369e:	6f 93       	push	r22
    36a0:	7f 93       	push	r23
    36a2:	8f 93       	push	r24
    36a4:	9f 93       	push	r25
    36a6:	af 93       	push	r26
    36a8:	bf 93       	push	r27
    36aa:	ef 93       	push	r30
    36ac:	ff 93       	push	r31
    36ae:	80 e0       	ldi	r24, 0x00	; 0
    36b0:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <_ZN15OrangutanSerial11uart_tx_isrEh>
    36b4:	ff 91       	pop	r31
    36b6:	ef 91       	pop	r30
    36b8:	bf 91       	pop	r27
    36ba:	af 91       	pop	r26
    36bc:	9f 91       	pop	r25
    36be:	8f 91       	pop	r24
    36c0:	7f 91       	pop	r23
    36c2:	6f 91       	pop	r22
    36c4:	5f 91       	pop	r21
    36c6:	4f 91       	pop	r20
    36c8:	3f 91       	pop	r19
    36ca:	2f 91       	pop	r18
    36cc:	0f 90       	pop	r0
    36ce:	0b be       	out	0x3b, r0	; 59
    36d0:	0f 90       	pop	r0
    36d2:	0f be       	out	0x3f, r0	; 63
    36d4:	0f 90       	pop	r0
    36d6:	1f 90       	pop	r1
    36d8:	18 95       	reti

000036da <__vector_29>:
    36da:	1f 92       	push	r1
    36dc:	0f 92       	push	r0
    36de:	0f b6       	in	r0, 0x3f	; 63
    36e0:	0f 92       	push	r0
    36e2:	0b b6       	in	r0, 0x3b	; 59
    36e4:	0f 92       	push	r0
    36e6:	11 24       	eor	r1, r1
    36e8:	2f 93       	push	r18
    36ea:	3f 93       	push	r19
    36ec:	4f 93       	push	r20
    36ee:	5f 93       	push	r21
    36f0:	6f 93       	push	r22
    36f2:	7f 93       	push	r23
    36f4:	8f 93       	push	r24
    36f6:	9f 93       	push	r25
    36f8:	af 93       	push	r26
    36fa:	bf 93       	push	r27
    36fc:	ef 93       	push	r30
    36fe:	ff 93       	push	r31
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <_ZN15OrangutanSerial11uart_tx_isrEh>
    3706:	ff 91       	pop	r31
    3708:	ef 91       	pop	r30
    370a:	bf 91       	pop	r27
    370c:	af 91       	pop	r26
    370e:	9f 91       	pop	r25
    3710:	8f 91       	pop	r24
    3712:	7f 91       	pop	r23
    3714:	6f 91       	pop	r22
    3716:	5f 91       	pop	r21
    3718:	4f 91       	pop	r20
    371a:	3f 91       	pop	r19
    371c:	2f 91       	pop	r18
    371e:	0f 90       	pop	r0
    3720:	0b be       	out	0x3b, r0	; 59
    3722:	0f 90       	pop	r0
    3724:	0f be       	out	0x3f, r0	; 63
    3726:	0f 90       	pop	r0
    3728:	1f 90       	pop	r1
    372a:	18 95       	reti

0000372c <_ZN15OrangutanSerial15serial_tx_checkEh>:
    372c:	98 2f       	mov	r25, r24
    372e:	82 30       	cpi	r24, 0x02	; 2
    3730:	71 f0       	breq	.+28     	; 0x374e <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    3732:	88 23       	and	r24, r24
    3734:	19 f0       	breq	.+6      	; 0x373c <_ZN15OrangutanSerial15serial_tx_checkEh+0x10>
    3736:	e9 ec       	ldi	r30, 0xC9	; 201
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	02 c0       	rjmp	.+4      	; 0x3740 <_ZN15OrangutanSerial15serial_tx_checkEh+0x14>
    373c:	e1 ec       	ldi	r30, 0xC1	; 193
    373e:	f0 e0       	ldi	r31, 0x00	; 0
    3740:	80 81       	ld	r24, Z
    3742:	8f 7d       	andi	r24, 0xDF	; 223
    3744:	80 83       	st	Z, r24
    3746:	89 2f       	mov	r24, r25
    3748:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <_ZN15OrangutanSerial11uart_tx_isrEh>
    374c:	08 95       	ret
    374e:	e0 91 11 04 	lds	r30, 0x0411
    3752:	f0 91 12 04 	lds	r31, 0x0412
    3756:	30 97       	sbiw	r30, 0x00	; 0
    3758:	b1 f0       	breq	.+44     	; 0x3786 <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    375a:	90 91 0c 04 	lds	r25, 0x040C
    375e:	80 91 0e 04 	lds	r24, 0x040E
    3762:	98 17       	cp	r25, r24
    3764:	80 f4       	brcc	.+32     	; 0x3786 <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    3766:	06 c0       	rjmp	.+12     	; 0x3774 <_ZN15OrangutanSerial15serial_tx_checkEh+0x48>
    3768:	80 91 0c 04 	lds	r24, 0x040C
    376c:	8f 5f       	subi	r24, 0xFF	; 255
    376e:	80 93 0c 04 	sts	0x040C, r24
    3772:	ed cf       	rjmp	.-38     	; 0x374e <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    3774:	80 91 0c 04 	lds	r24, 0x040C
    3778:	e8 0f       	add	r30, r24
    377a:	f1 1d       	adc	r31, r1
    377c:	80 81       	ld	r24, Z
    377e:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <_ZN12OrangutanSVP17serialSendIfReadyEc>
    3782:	88 23       	and	r24, r24
    3784:	89 f7       	brne	.-30     	; 0x3768 <_ZN15OrangutanSerial15serial_tx_checkEh+0x3c>
    3786:	08 95       	ret

00003788 <_ZN15OrangutanSerial15serial_rx_checkEh>:
    3788:	0f 93       	push	r16
    378a:	1f 93       	push	r17
    378c:	cf 93       	push	r28
    378e:	df 93       	push	r29
    3790:	68 2f       	mov	r22, r24
    3792:	82 30       	cpi	r24, 0x02	; 2
    3794:	09 f4       	brne	.+2      	; 0x3798 <_ZN15OrangutanSerial15serial_rx_checkEh+0x10>
    3796:	9c c0       	rjmp	.+312    	; 0x38d0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    3798:	88 23       	and	r24, r24
    379a:	19 f0       	breq	.+6      	; 0x37a2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1a>
    379c:	e9 ec       	ldi	r30, 0xC9	; 201
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	02 c0       	rjmp	.+4      	; 0x37a6 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1e>
    37a2:	e1 ec       	ldi	r30, 0xC1	; 193
    37a4:	f0 e0       	ldi	r31, 0x00	; 0
    37a6:	80 81       	ld	r24, Z
    37a8:	8f 77       	andi	r24, 0x7F	; 127
    37aa:	80 83       	st	Z, r24
    37ac:	46 2f       	mov	r20, r22
    37ae:	50 e0       	ldi	r21, 0x00	; 0
    37b0:	da 01       	movw	r26, r20
    37b2:	aa 0f       	add	r26, r26
    37b4:	bb 1f       	adc	r27, r27
    37b6:	ca 01       	movw	r24, r20
    37b8:	23 e0       	ldi	r18, 0x03	; 3
    37ba:	88 0f       	add	r24, r24
    37bc:	99 1f       	adc	r25, r25
    37be:	2a 95       	dec	r18
    37c0:	e1 f7       	brne	.-8      	; 0x37ba <_ZN15OrangutanSerial15serial_rx_checkEh+0x32>
    37c2:	a8 0f       	add	r26, r24
    37c4:	b9 1f       	adc	r27, r25
    37c6:	a9 50       	subi	r26, 0x09	; 9
    37c8:	bc 4f       	sbci	r27, 0xFC	; 252
    37ca:	18 96       	adiw	r26, 0x08	; 8
    37cc:	cd 91       	ld	r28, X+
    37ce:	dc 91       	ld	r29, X
    37d0:	19 97       	sbiw	r26, 0x09	; 9
    37d2:	20 97       	sbiw	r28, 0x00	; 0
    37d4:	09 f4       	brne	.+2      	; 0x37d8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x50>
    37d6:	5a c0       	rjmp	.+180    	; 0x388c <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    37d8:	fa 01       	movw	r30, r20
    37da:	ee 0f       	add	r30, r30
    37dc:	ff 1f       	adc	r31, r31
    37de:	ee 0f       	add	r30, r30
    37e0:	ff 1f       	adc	r31, r31
    37e2:	e4 0f       	add	r30, r20
    37e4:	f5 1f       	adc	r31, r21
    37e6:	ee 0f       	add	r30, r30
    37e8:	ff 1f       	adc	r31, r31
    37ea:	e7 50       	subi	r30, 0x07	; 7
    37ec:	fc 4f       	sbci	r31, 0xFC	; 252
    37ee:	80 81       	ld	r24, Z
    37f0:	14 96       	adiw	r26, 0x04	; 4
    37f2:	2c 91       	ld	r18, X
    37f4:	82 17       	cp	r24, r18
    37f6:	08 f0       	brcs	.+2      	; 0x37fa <_ZN15OrangutanSerial15serial_rx_checkEh+0x72>
    37f8:	49 c0       	rjmp	.+146    	; 0x388c <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    37fa:	66 23       	and	r22, r22
    37fc:	19 f0       	breq	.+6      	; 0x3804 <_ZN15OrangutanSerial15serial_rx_checkEh+0x7c>
    37fe:	e8 ec       	ldi	r30, 0xC8	; 200
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	02 c0       	rjmp	.+4      	; 0x3808 <_ZN15OrangutanSerial15serial_rx_checkEh+0x80>
    3804:	e0 ec       	ldi	r30, 0xC0	; 192
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	80 81       	ld	r24, Z
    380a:	87 ff       	sbrs	r24, 7
    380c:	3f c0       	rjmp	.+126    	; 0x388c <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    380e:	66 23       	and	r22, r22
    3810:	19 f4       	brne	.+6      	; 0x3818 <_ZN15OrangutanSerial15serial_rx_checkEh+0x90>
    3812:	e6 ec       	ldi	r30, 0xC6	; 198
    3814:	f0 e0       	ldi	r31, 0x00	; 0
    3816:	02 c0       	rjmp	.+4      	; 0x381c <_ZN15OrangutanSerial15serial_rx_checkEh+0x94>
    3818:	ee ec       	ldi	r30, 0xCE	; 206
    381a:	f0 e0       	ldi	r31, 0x00	; 0
    381c:	90 81       	ld	r25, Z
    381e:	fa 01       	movw	r30, r20
    3820:	ee 0f       	add	r30, r30
    3822:	ff 1f       	adc	r31, r31
    3824:	ee 0f       	add	r30, r30
    3826:	ff 1f       	adc	r31, r31
    3828:	e4 0f       	add	r30, r20
    382a:	f5 1f       	adc	r31, r21
    382c:	ee 0f       	add	r30, r30
    382e:	ff 1f       	adc	r31, r31
    3830:	e7 50       	subi	r30, 0x07	; 7
    3832:	fc 4f       	sbci	r31, 0xFC	; 252
    3834:	80 81       	ld	r24, Z
    3836:	82 17       	cp	r24, r18
    3838:	38 f4       	brcc	.+14     	; 0x3848 <_ZN15OrangutanSerial15serial_rx_checkEh+0xc0>
    383a:	80 81       	ld	r24, Z
    383c:	c8 0f       	add	r28, r24
    383e:	d1 1d       	adc	r29, r1
    3840:	98 83       	st	Y, r25
    3842:	80 81       	ld	r24, Z
    3844:	8f 5f       	subi	r24, 0xFF	; 255
    3846:	80 83       	st	Z, r24
    3848:	fa 01       	movw	r30, r20
    384a:	ee 0f       	add	r30, r30
    384c:	ff 1f       	adc	r31, r31
    384e:	ee 0f       	add	r30, r30
    3850:	ff 1f       	adc	r31, r31
    3852:	e4 0f       	add	r30, r20
    3854:	f5 1f       	adc	r31, r21
    3856:	ee 0f       	add	r30, r30
    3858:	ff 1f       	adc	r31, r31
    385a:	e7 50       	subi	r30, 0x07	; 7
    385c:	fc 4f       	sbci	r31, 0xFC	; 252
    385e:	80 81       	ld	r24, Z
    3860:	da 01       	movw	r26, r20
    3862:	aa 0f       	add	r26, r26
    3864:	bb 1f       	adc	r27, r27
    3866:	9a 01       	movw	r18, r20
    3868:	13 e0       	ldi	r17, 0x03	; 3
    386a:	22 0f       	add	r18, r18
    386c:	33 1f       	adc	r19, r19
    386e:	1a 95       	dec	r17
    3870:	e1 f7       	brne	.-8      	; 0x386a <_ZN15OrangutanSerial15serial_rx_checkEh+0xe2>
    3872:	a2 0f       	add	r26, r18
    3874:	b3 1f       	adc	r27, r19
    3876:	a9 50       	subi	r26, 0x09	; 9
    3878:	bc 4f       	sbci	r27, 0xFC	; 252
    387a:	14 96       	adiw	r26, 0x04	; 4
    387c:	9c 91       	ld	r25, X
    387e:	14 97       	sbiw	r26, 0x04	; 4
    3880:	89 17       	cp	r24, r25
    3882:	21 f4       	brne	.+8      	; 0x388c <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3884:	15 96       	adiw	r26, 0x05	; 5
    3886:	8c 91       	ld	r24, X
    3888:	81 11       	cpse	r24, r1
    388a:	10 82       	st	Z, r1
    388c:	fa 01       	movw	r30, r20
    388e:	a3 e0       	ldi	r26, 0x03	; 3
    3890:	ee 0f       	add	r30, r30
    3892:	ff 1f       	adc	r31, r31
    3894:	aa 95       	dec	r26
    3896:	e1 f7       	brne	.-8      	; 0x3890 <_ZN15OrangutanSerial15serial_rx_checkEh+0x108>
    3898:	44 0f       	add	r20, r20
    389a:	55 1f       	adc	r21, r21
    389c:	e4 0f       	add	r30, r20
    389e:	f5 1f       	adc	r31, r21
    38a0:	e9 50       	subi	r30, 0x09	; 9
    38a2:	fc 4f       	sbci	r31, 0xFC	; 252
    38a4:	80 81       	ld	r24, Z
    38a6:	88 23       	and	r24, r24
    38a8:	09 f0       	breq	.+2      	; 0x38ac <_ZN15OrangutanSerial15serial_rx_checkEh+0x124>
    38aa:	59 c0       	rjmp	.+178    	; 0x395e <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    38ac:	66 23       	and	r22, r22
    38ae:	19 f0       	breq	.+6      	; 0x38b6 <_ZN15OrangutanSerial15serial_rx_checkEh+0x12e>
    38b0:	e9 ec       	ldi	r30, 0xC9	; 201
    38b2:	f0 e0       	ldi	r31, 0x00	; 0
    38b4:	02 c0       	rjmp	.+4      	; 0x38ba <_ZN15OrangutanSerial15serial_rx_checkEh+0x132>
    38b6:	e1 ec       	ldi	r30, 0xC1	; 193
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	80 81       	ld	r24, Z
    38bc:	80 68       	ori	r24, 0x80	; 128
    38be:	80 83       	st	Z, r24
    38c0:	4e c0       	rjmp	.+156    	; 0x395e <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    38c2:	80 91 10 04 	lds	r24, 0x0410
    38c6:	88 23       	and	r24, r24
    38c8:	19 f0       	breq	.+6      	; 0x38d0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    38ca:	10 92 0d 04 	sts	0x040D, r1
    38ce:	47 c0       	rjmp	.+142    	; 0x395e <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    38d0:	80 91 13 04 	lds	r24, 0x0413
    38d4:	90 91 14 04 	lds	r25, 0x0414
    38d8:	89 2b       	or	r24, r25
    38da:	09 f4       	brne	.+2      	; 0x38de <_ZN15OrangutanSerial15serial_rx_checkEh+0x156>
    38dc:	40 c0       	rjmp	.+128    	; 0x395e <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    38de:	90 91 0d 04 	lds	r25, 0x040D
    38e2:	80 91 0f 04 	lds	r24, 0x040F
    38e6:	98 17       	cp	r25, r24
    38e8:	d0 f5       	brcc	.+116    	; 0x395e <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    38ea:	80 91 31 04 	lds	r24, 0x0431
    38ee:	88 23       	and	r24, r24
    38f0:	a9 f4       	brne	.+42     	; 0x391c <_ZN15OrangutanSerial15serial_rx_checkEh+0x194>
    38f2:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <_ZN12OrangutanSVP15serialReadStartEv>
    38f6:	80 93 31 04 	sts	0x0431, r24
    38fa:	10 e0       	ldi	r17, 0x00	; 0
    38fc:	0b c0       	rjmp	.+22     	; 0x3914 <_ZN15OrangutanSerial15serial_rx_checkEh+0x18c>
    38fe:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <_ZN12OrangutanSVP11getNextByteEv>
    3902:	e0 2f       	mov	r30, r16
    3904:	f0 e0       	ldi	r31, 0x00	; 0
    3906:	31 97       	sbiw	r30, 0x01	; 1
    3908:	e1 1b       	sub	r30, r17
    390a:	f1 09       	sbc	r31, r1
    390c:	ee 5c       	subi	r30, 0xCE	; 206
    390e:	fb 4f       	sbci	r31, 0xFB	; 251
    3910:	80 83       	st	Z, r24
    3912:	1f 5f       	subi	r17, 0xFF	; 255
    3914:	00 91 31 04 	lds	r16, 0x0431
    3918:	10 17       	cp	r17, r16
    391a:	88 f3       	brcs	.-30     	; 0x38fe <_ZN15OrangutanSerial15serial_rx_checkEh+0x176>
    391c:	e0 91 31 04 	lds	r30, 0x0431
    3920:	ee 23       	and	r30, r30
    3922:	e9 f0       	breq	.+58     	; 0x395e <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3924:	80 91 0d 04 	lds	r24, 0x040D
    3928:	a0 91 13 04 	lds	r26, 0x0413
    392c:	b0 91 14 04 	lds	r27, 0x0414
    3930:	a8 0f       	add	r26, r24
    3932:	b1 1d       	adc	r27, r1
    3934:	e1 50       	subi	r30, 0x01	; 1
    3936:	e0 93 31 04 	sts	0x0431, r30
    393a:	f0 e0       	ldi	r31, 0x00	; 0
    393c:	ee 5c       	subi	r30, 0xCE	; 206
    393e:	fb 4f       	sbci	r31, 0xFB	; 251
    3940:	80 81       	ld	r24, Z
    3942:	8c 93       	st	X, r24
    3944:	80 91 0d 04 	lds	r24, 0x040D
    3948:	8f 5f       	subi	r24, 0xFF	; 255
    394a:	80 93 0d 04 	sts	0x040D, r24
    394e:	90 91 0d 04 	lds	r25, 0x040D
    3952:	80 91 0f 04 	lds	r24, 0x040F
    3956:	98 17       	cp	r25, r24
    3958:	09 f0       	breq	.+2      	; 0x395c <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d4>
    395a:	ba cf       	rjmp	.-140    	; 0x38d0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    395c:	b2 cf       	rjmp	.-156    	; 0x38c2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x13a>
    395e:	df 91       	pop	r29
    3960:	cf 91       	pop	r28
    3962:	1f 91       	pop	r17
    3964:	0f 91       	pop	r16
    3966:	08 95       	ret

00003968 <_ZN15OrangutanSerial5checkEv>:
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	0e 94 96 1b 	call	0x372c	; 0x372c <_ZN15OrangutanSerial15serial_tx_checkEh>
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	0e 94 96 1b 	call	0x372c	; 0x372c <_ZN15OrangutanSerial15serial_tx_checkEh>
    3974:	82 e0       	ldi	r24, 0x02	; 2
    3976:	0e 94 96 1b 	call	0x372c	; 0x372c <_ZN15OrangutanSerial15serial_tx_checkEh>
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	0e 94 c4 1b 	call	0x3788	; 0x3788 <_ZN15OrangutanSerial15serial_rx_checkEh>
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	0e 94 c4 1b 	call	0x3788	; 0x3788 <_ZN15OrangutanSerial15serial_rx_checkEh>
    3986:	82 e0       	ldi	r24, 0x02	; 2
    3988:	0e 94 c4 1b 	call	0x3788	; 0x3788 <_ZN15OrangutanSerial15serial_rx_checkEh>
    398c:	08 95       	ret

0000398e <_ZN15OrangutanSerial12sendBlockingEhPch>:
    398e:	1f 93       	push	r17
    3990:	18 2f       	mov	r17, r24
    3992:	0e 94 c6 1a 	call	0x358c	; 0x358c <_ZN15OrangutanSerial4sendEhPch>
    3996:	02 c0       	rjmp	.+4      	; 0x399c <_ZN15OrangutanSerial12sendBlockingEhPch+0xe>
    3998:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_ZN15OrangutanSerial5checkEv>
    399c:	81 2f       	mov	r24, r17
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	fc 01       	movw	r30, r24
    39a2:	73 e0       	ldi	r23, 0x03	; 3
    39a4:	ee 0f       	add	r30, r30
    39a6:	ff 1f       	adc	r31, r31
    39a8:	7a 95       	dec	r23
    39aa:	e1 f7       	brne	.-8      	; 0x39a4 <_ZN15OrangutanSerial12sendBlockingEhPch+0x16>
    39ac:	88 0f       	add	r24, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	e8 0f       	add	r30, r24
    39b2:	f9 1f       	adc	r31, r25
    39b4:	e9 50       	subi	r30, 0x09	; 9
    39b6:	fc 4f       	sbci	r31, 0xFC	; 252
    39b8:	21 81       	ldd	r18, Z+1	; 0x01
    39ba:	81 2f       	mov	r24, r17
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	fc 01       	movw	r30, r24
    39c0:	53 e0       	ldi	r21, 0x03	; 3
    39c2:	ee 0f       	add	r30, r30
    39c4:	ff 1f       	adc	r31, r31
    39c6:	5a 95       	dec	r21
    39c8:	e1 f7       	brne	.-8      	; 0x39c2 <_ZN15OrangutanSerial12sendBlockingEhPch+0x34>
    39ca:	88 0f       	add	r24, r24
    39cc:	99 1f       	adc	r25, r25
    39ce:	e8 0f       	add	r30, r24
    39d0:	f9 1f       	adc	r31, r25
    39d2:	e9 50       	subi	r30, 0x09	; 9
    39d4:	fc 4f       	sbci	r31, 0xFC	; 252
    39d6:	83 81       	ldd	r24, Z+3	; 0x03
    39d8:	28 17       	cp	r18, r24
    39da:	f1 f6       	brne	.-68     	; 0x3998 <_ZN15OrangutanSerial12sendBlockingEhPch+0xa>
    39dc:	1f 91       	pop	r17
    39de:	08 95       	ret

000039e0 <serial_send_blocking>:
    39e0:	0e 94 c7 1c 	call	0x398e	; 0x398e <_ZN15OrangutanSerial12sendBlockingEhPch>
    39e4:	08 95       	ret

000039e6 <_ZN15OrangutanSerial15receiveBlockingEhPchj>:
    39e6:	a0 e0       	ldi	r26, 0x00	; 0
    39e8:	b0 e0       	ldi	r27, 0x00	; 0
    39ea:	e9 ef       	ldi	r30, 0xF9	; 249
    39ec:	fc e1       	ldi	r31, 0x1C	; 28
    39ee:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <__prologue_saves__+0xc>
    39f2:	08 2f       	mov	r16, r24
    39f4:	79 01       	movw	r14, r18
    39f6:	0e 94 e6 18 	call	0x31cc	; 0x31cc <_ZN15OrangutanSerial7receiveEhPch>
    39fa:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <get_ms>
    39fe:	4b 01       	movw	r8, r22
    3a00:	5c 01       	movw	r10, r24
    3a02:	10 e0       	ldi	r17, 0x00	; 0
    3a04:	e8 01       	movw	r28, r16
    3a06:	cc 0f       	add	r28, r28
    3a08:	dd 1f       	adc	r29, r29
    3a0a:	cc 0f       	add	r28, r28
    3a0c:	dd 1f       	adc	r29, r29
    3a0e:	c0 0f       	add	r28, r16
    3a10:	d1 1f       	adc	r29, r17
    3a12:	cc 0f       	add	r28, r28
    3a14:	dd 1f       	adc	r29, r29
    3a16:	c7 50       	subi	r28, 0x07	; 7
    3a18:	dc 4f       	sbci	r29, 0xFC	; 252
    3a1a:	68 01       	movw	r12, r16
    3a1c:	f3 e0       	ldi	r31, 0x03	; 3
    3a1e:	cc 0c       	add	r12, r12
    3a20:	dd 1c       	adc	r13, r13
    3a22:	fa 95       	dec	r31
    3a24:	e1 f7       	brne	.-8      	; 0x3a1e <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x38>
    3a26:	00 0f       	add	r16, r16
    3a28:	11 1f       	adc	r17, r17
    3a2a:	c0 0e       	add	r12, r16
    3a2c:	d1 1e       	adc	r13, r17
    3a2e:	8b ef       	ldi	r24, 0xFB	; 251
    3a30:	93 e0       	ldi	r25, 0x03	; 3
    3a32:	c8 0e       	add	r12, r24
    3a34:	d9 1e       	adc	r13, r25
    3a36:	00 e0       	ldi	r16, 0x00	; 0
    3a38:	10 e0       	ldi	r17, 0x00	; 0
    3a3a:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_ZN15OrangutanSerial5checkEv>
    3a3e:	98 81       	ld	r25, Y
    3a40:	f6 01       	movw	r30, r12
    3a42:	80 81       	ld	r24, Z
    3a44:	98 17       	cp	r25, r24
    3a46:	11 f4       	brne	.+4      	; 0x3a4c <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x66>
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	0c c0       	rjmp	.+24     	; 0x3a64 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x7e>
    3a4c:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <get_ms>
    3a50:	68 19       	sub	r22, r8
    3a52:	79 09       	sbc	r23, r9
    3a54:	8a 09       	sbc	r24, r10
    3a56:	9b 09       	sbc	r25, r11
    3a58:	6e 15       	cp	r22, r14
    3a5a:	7f 05       	cpc	r23, r15
    3a5c:	80 07       	cpc	r24, r16
    3a5e:	91 07       	cpc	r25, r17
    3a60:	60 f3       	brcs	.-40     	; 0x3a3a <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x54>
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	cd b7       	in	r28, 0x3d	; 61
    3a66:	de b7       	in	r29, 0x3e	; 62
    3a68:	ec e0       	ldi	r30, 0x0C	; 12
    3a6a:	0c 94 58 20 	jmp	0x40b0	; 0x40b0 <__epilogue_restores__+0xc>

00003a6e <serial_receive_blocking>:
    3a6e:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <_ZN15OrangutanSerial15receiveBlockingEhPchj>
    3a72:	08 95       	ret

00003a74 <serial_check>:
    3a74:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_ZN15OrangutanSerial5checkEv>
    3a78:	08 95       	ret

00003a7a <__vector_11>:
    3a7a:	2f 92       	push	r2
    3a7c:	8f 93       	push	r24
    3a7e:	9f 93       	push	r25
    3a80:	2f b6       	in	r2, 0x3f	; 63
    3a82:	80 91 3b 04 	lds	r24, 0x043B
    3a86:	90 91 3c 04 	lds	r25, 0x043C
    3a8a:	01 96       	adiw	r24, 0x01	; 1
    3a8c:	80 93 3b 04 	sts	0x043B, r24
    3a90:	90 93 3c 04 	sts	0x043C, r25
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	80 91 3d 04 	lds	r24, 0x043D
    3a9a:	89 1f       	adc	r24, r25
    3a9c:	80 93 3d 04 	sts	0x043D, r24
    3aa0:	90 91 43 04 	lds	r25, 0x0443
    3aa4:	9c 5f       	subi	r25, 0xFC	; 252
    3aa6:	90 93 43 04 	sts	0x0443, r25
    3aaa:	80 91 42 04 	lds	r24, 0x0442
    3aae:	80 51       	subi	r24, 0x10	; 16
    3ab0:	97 42       	sbci	r25, 0x27	; 39
    3ab2:	c0 f0       	brcs	.+48     	; 0x3ae4 <end>
    3ab4:	90 93 43 04 	sts	0x0443, r25
    3ab8:	80 93 42 04 	sts	0x0442, r24
    3abc:	80 91 3e 04 	lds	r24, 0x043E
    3ac0:	90 91 3f 04 	lds	r25, 0x043F
    3ac4:	01 96       	adiw	r24, 0x01	; 1
    3ac6:	80 93 3e 04 	sts	0x043E, r24
    3aca:	90 93 3f 04 	sts	0x043F, r25
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	80 91 40 04 	lds	r24, 0x0440
    3ad4:	89 1f       	adc	r24, r25
    3ad6:	80 93 40 04 	sts	0x0440, r24
    3ada:	80 91 41 04 	lds	r24, 0x0441
    3ade:	89 1f       	adc	r24, r25
    3ae0:	80 93 41 04 	sts	0x0441, r24

00003ae4 <end>:
    3ae4:	2f be       	out	0x3f, r2	; 63
    3ae6:	9f 91       	pop	r25
    3ae8:	8f 91       	pop	r24
    3aea:	2f 90       	pop	r2
    3aec:	18 95       	reti

00003aee <ticks_to_microseconds>:
    3aee:	6f 5f       	subi	r22, 0xFF	; 255
    3af0:	7f 4f       	sbci	r23, 0xFF	; 255
    3af2:	8f 4f       	sbci	r24, 0xFF	; 255
    3af4:	9f 4f       	sbci	r25, 0xFF	; 255
    3af6:	66 0f       	add	r22, r22
    3af8:	77 1f       	adc	r23, r23
    3afa:	88 1f       	adc	r24, r24
    3afc:	99 1f       	adc	r25, r25
    3afe:	25 e0       	ldi	r18, 0x05	; 5
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	40 e0       	ldi	r20, 0x00	; 0
    3b04:	50 e0       	ldi	r21, 0x00	; 0
    3b06:	0e 94 14 20 	call	0x4028	; 0x4028 <__udivmodsi4>
    3b0a:	ca 01       	movw	r24, r20
    3b0c:	b9 01       	movw	r22, r18
    3b0e:	08 95       	ret

00003b10 <delay_ms>:
    3b10:	28 ee       	ldi	r18, 0xE8	; 232
    3b12:	33 e0       	ldi	r19, 0x03	; 3
    3b14:	09 c0       	rjmp	.+18     	; 0x3b28 <delay_ms+0x18>
    3b16:	f9 01       	movw	r30, r18
    3b18:	6f 93       	push	r22
    3b1a:	64 e0       	ldi	r22, 0x04	; 4
    3b1c:	6a 95       	dec	r22
    3b1e:	f1 f7       	brne	.-4      	; 0x3b1c <delay_ms+0xc>
    3b20:	6f 91       	pop	r22
    3b22:	31 97       	sbiw	r30, 0x01	; 1
    3b24:	c9 f7       	brne	.-14     	; 0x3b18 <delay_ms+0x8>
    3b26:	01 97       	sbiw	r24, 0x01	; 1
    3b28:	00 97       	sbiw	r24, 0x00	; 0
    3b2a:	a9 f7       	brne	.-22     	; 0x3b16 <delay_ms+0x6>
    3b2c:	08 95       	ret

00003b2e <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    3b2e:	6f 5f       	subi	r22, 0xFF	; 255
    3b30:	7f 4f       	sbci	r23, 0xFF	; 255
    3b32:	8f 4f       	sbci	r24, 0xFF	; 255
    3b34:	9f 4f       	sbci	r25, 0xFF	; 255
    3b36:	66 0f       	add	r22, r22
    3b38:	77 1f       	adc	r23, r23
    3b3a:	88 1f       	adc	r24, r24
    3b3c:	99 1f       	adc	r25, r25
    3b3e:	25 e0       	ldi	r18, 0x05	; 5
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	40 e0       	ldi	r20, 0x00	; 0
    3b44:	50 e0       	ldi	r21, 0x00	; 0
    3b46:	0e 94 14 20 	call	0x4028	; 0x4028 <__udivmodsi4>
    3b4a:	ca 01       	movw	r24, r20
    3b4c:	b9 01       	movw	r22, r18
    3b4e:	08 95       	ret

00003b50 <_ZN13OrangutanTime17delayMillisecondsEj>:
    3b50:	28 ee       	ldi	r18, 0xE8	; 232
    3b52:	33 e0       	ldi	r19, 0x03	; 3
    3b54:	09 c0       	rjmp	.+18     	; 0x3b68 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3b56:	f9 01       	movw	r30, r18
    3b58:	6f 93       	push	r22
    3b5a:	64 e0       	ldi	r22, 0x04	; 4
    3b5c:	6a 95       	dec	r22
    3b5e:	f1 f7       	brne	.-4      	; 0x3b5c <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3b60:	6f 91       	pop	r22
    3b62:	31 97       	sbiw	r30, 0x01	; 1
    3b64:	c9 f7       	brne	.-14     	; 0x3b58 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3b66:	01 97       	sbiw	r24, 0x01	; 1
    3b68:	00 97       	sbiw	r24, 0x00	; 0
    3b6a:	a9 f7       	brne	.-22     	; 0x3b56 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    3b6c:	08 95       	ret

00003b6e <_ZN13OrangutanTime5init2Ev>:
    3b6e:	a0 e7       	ldi	r26, 0x70	; 112
    3b70:	b0 e0       	ldi	r27, 0x00	; 0
    3b72:	8c 91       	ld	r24, X
    3b74:	8e 7f       	andi	r24, 0xFE	; 254
    3b76:	8c 93       	st	X, r24
    3b78:	e0 eb       	ldi	r30, 0xB0	; 176
    3b7a:	f0 e0       	ldi	r31, 0x00	; 0
    3b7c:	80 81       	ld	r24, Z
    3b7e:	83 60       	ori	r24, 0x03	; 3
    3b80:	80 83       	st	Z, r24
    3b82:	e1 eb       	ldi	r30, 0xB1	; 177
    3b84:	f0 e0       	ldi	r31, 0x00	; 0
    3b86:	80 81       	ld	r24, Z
    3b88:	80 7f       	andi	r24, 0xF0	; 240
    3b8a:	80 83       	st	Z, r24
    3b8c:	80 81       	ld	r24, Z
    3b8e:	82 60       	ori	r24, 0x02	; 2
    3b90:	80 83       	st	Z, r24
    3b92:	b8 9a       	sbi	0x17, 0	; 23
    3b94:	8c 91       	ld	r24, X
    3b96:	81 60       	ori	r24, 0x01	; 1
    3b98:	8c 93       	st	X, r24
    3b9a:	78 94       	sei
    3b9c:	08 95       	ret

00003b9e <_ZN13OrangutanTime4initEv>:
    3b9e:	80 91 44 04 	lds	r24, 0x0444
    3ba2:	88 23       	and	r24, r24
    3ba4:	29 f4       	brne	.+10     	; 0x3bb0 <_ZN13OrangutanTime4initEv+0x12>
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	80 93 44 04 	sts	0x0444, r24
    3bac:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <_ZN13OrangutanTime5init2Ev>
    3bb0:	08 95       	ret

00003bb2 <_ZN13OrangutanTime2msEv>:
    3bb2:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <_ZN13OrangutanTime4initEv>
    3bb6:	e0 e7       	ldi	r30, 0x70	; 112
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	80 81       	ld	r24, Z
    3bbc:	8e 7f       	andi	r24, 0xFE	; 254
    3bbe:	80 83       	st	Z, r24
    3bc0:	20 91 3e 04 	lds	r18, 0x043E
    3bc4:	30 91 3f 04 	lds	r19, 0x043F
    3bc8:	40 91 40 04 	lds	r20, 0x0440
    3bcc:	50 91 41 04 	lds	r21, 0x0441
    3bd0:	80 81       	ld	r24, Z
    3bd2:	81 60       	ori	r24, 0x01	; 1
    3bd4:	80 83       	st	Z, r24
    3bd6:	b9 01       	movw	r22, r18
    3bd8:	ca 01       	movw	r24, r20
    3bda:	08 95       	ret

00003bdc <get_ms>:
    3bdc:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <_ZN13OrangutanTime2msEv>
    3be0:	08 95       	ret

00003be2 <_ZN13OrangutanTime5ticksEv>:
    3be2:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <_ZN13OrangutanTime4initEv>
    3be6:	80 91 70 00 	lds	r24, 0x0070
    3bea:	8e 7f       	andi	r24, 0xFE	; 254
    3bec:	80 93 70 00 	sts	0x0070, r24
    3bf0:	60 91 b2 00 	lds	r22, 0x00B2
    3bf4:	80 91 3a 04 	lds	r24, 0x043A
    3bf8:	90 91 3b 04 	lds	r25, 0x043B
    3bfc:	a0 91 3c 04 	lds	r26, 0x043C
    3c00:	b0 91 3d 04 	lds	r27, 0x043D
    3c04:	b8 99       	sbic	0x17, 0	; 23
    3c06:	05 c0       	rjmp	.+10     	; 0x3c12 <_ZN13OrangutanTime5ticksEv+0x30>
    3c08:	26 2f       	mov	r18, r22
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	40 e0       	ldi	r20, 0x00	; 0
    3c0e:	50 e0       	ldi	r21, 0x00	; 0
    3c10:	11 c0       	rjmp	.+34     	; 0x3c34 <_ZN13OrangutanTime5ticksEv+0x52>
    3c12:	80 91 b2 00 	lds	r24, 0x00B2
    3c16:	20 91 3a 04 	lds	r18, 0x043A
    3c1a:	30 91 3b 04 	lds	r19, 0x043B
    3c1e:	40 91 3c 04 	lds	r20, 0x043C
    3c22:	50 91 3d 04 	lds	r21, 0x043D
    3c26:	20 50       	subi	r18, 0x00	; 0
    3c28:	3f 4f       	sbci	r19, 0xFF	; 255
    3c2a:	4f 4f       	sbci	r20, 0xFF	; 255
    3c2c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	a0 e0       	ldi	r26, 0x00	; 0
    3c32:	b0 e0       	ldi	r27, 0x00	; 0
    3c34:	28 2b       	or	r18, r24
    3c36:	39 2b       	or	r19, r25
    3c38:	4a 2b       	or	r20, r26
    3c3a:	5b 2b       	or	r21, r27
    3c3c:	80 91 70 00 	lds	r24, 0x0070
    3c40:	81 60       	ori	r24, 0x01	; 1
    3c42:	80 93 70 00 	sts	0x0070, r24
    3c46:	b9 01       	movw	r22, r18
    3c48:	ca 01       	movw	r24, r20
    3c4a:	08 95       	ret

00003c4c <get_ticks>:
    3c4c:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <_ZN13OrangutanTime5ticksEv>
    3c50:	08 95       	ret

00003c52 <_ZN13OrangutanTime5resetEv>:
    3c52:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <_ZN13OrangutanTime4initEv>
    3c56:	e0 e7       	ldi	r30, 0x70	; 112
    3c58:	f0 e0       	ldi	r31, 0x00	; 0
    3c5a:	80 81       	ld	r24, Z
    3c5c:	8e 7f       	andi	r24, 0xFE	; 254
    3c5e:	80 83       	st	Z, r24
    3c60:	10 92 3e 04 	sts	0x043E, r1
    3c64:	10 92 3f 04 	sts	0x043F, r1
    3c68:	10 92 40 04 	sts	0x0440, r1
    3c6c:	10 92 41 04 	sts	0x0441, r1
    3c70:	10 92 43 04 	sts	0x0443, r1
    3c74:	10 92 42 04 	sts	0x0442, r1
    3c78:	80 81       	ld	r24, Z
    3c7a:	81 60       	ori	r24, 0x01	; 1
    3c7c:	80 83       	st	Z, r24
    3c7e:	08 95       	ret

00003c80 <time_reset>:
    3c80:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <_ZN13OrangutanTime5resetEv>
    3c84:	08 95       	ret

00003c86 <_ZN12OrangutanSVP7setModeEh>:
    3c86:	98 2f       	mov	r25, r24
    3c88:	80 91 5b 04 	lds	r24, 0x045B
    3c8c:	89 17       	cp	r24, r25
    3c8e:	39 f0       	breq	.+14     	; 0x3c9e <_ZN12OrangutanSVP7setModeEh+0x18>
    3c90:	90 93 5b 04 	sts	0x045B, r25
    3c94:	89 2f       	mov	r24, r25
    3c96:	80 6c       	ori	r24, 0xC0	; 192
    3c98:	65 e0       	ldi	r22, 0x05	; 5
    3c9a:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3c9e:	08 95       	ret

00003ca0 <svp_set_mode>:
    3ca0:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <_ZN12OrangutanSVP7setModeEh>
    3ca4:	08 95       	ret

00003ca6 <_ZN12OrangutanSVP17serialSendIfReadyEc>:
    3ca6:	1f 93       	push	r17
    3ca8:	18 2f       	mov	r17, r24
    3caa:	88 1f       	adc	r24, r24
    3cac:	88 27       	eor	r24, r24
    3cae:	88 1f       	adc	r24, r24
    3cb0:	8c 57       	subi	r24, 0x7C	; 124
    3cb2:	65 e0       	ldi	r22, 0x05	; 5
    3cb4:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3cb8:	81 2f       	mov	r24, r17
    3cba:	8f 77       	andi	r24, 0x7F	; 127
    3cbc:	65 e0       	ldi	r22, 0x05	; 5
    3cbe:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3cc2:	1f 91       	pop	r17
    3cc4:	08 95       	ret

00003cc6 <_ZN12OrangutanSVP11getNextByteEv>:
    3cc6:	8f ef       	ldi	r24, 0xFF	; 255
    3cc8:	64 e0       	ldi	r22, 0x04	; 4
    3cca:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3cce:	08 95       	ret

00003cd0 <_ZL23updateVariablesIfNeededv>:
    3cd0:	cf 93       	push	r28
    3cd2:	df 93       	push	r29
    3cd4:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <_ZN13OrangutanTime2msEv>
    3cd8:	20 91 19 04 	lds	r18, 0x0419
    3cdc:	30 91 1a 04 	lds	r19, 0x041A
    3ce0:	40 91 1b 04 	lds	r20, 0x041B
    3ce4:	50 91 1c 04 	lds	r21, 0x041C
    3ce8:	62 17       	cp	r22, r18
    3cea:	73 07       	cpc	r23, r19
    3cec:	84 07       	cpc	r24, r20
    3cee:	95 07       	cpc	r25, r21
    3cf0:	b9 f0       	breq	.+46     	; 0x3d20 <_ZL23updateVariablesIfNeededv+0x50>
    3cf2:	81 e8       	ldi	r24, 0x81	; 129
    3cf4:	67 e0       	ldi	r22, 0x07	; 7
    3cf6:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3cfa:	ce e4       	ldi	r28, 0x4E	; 78
    3cfc:	d4 e0       	ldi	r29, 0x04	; 4
    3cfe:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <_ZN12OrangutanSVP11getNextByteEv>
    3d02:	89 93       	st	Y+, r24
    3d04:	84 e0       	ldi	r24, 0x04	; 4
    3d06:	cb 35       	cpi	r28, 0x5B	; 91
    3d08:	d8 07       	cpc	r29, r24
    3d0a:	c9 f7       	brne	.-14     	; 0x3cfe <_ZL23updateVariablesIfNeededv+0x2e>
    3d0c:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <_ZN13OrangutanTime2msEv>
    3d10:	60 93 19 04 	sts	0x0419, r22
    3d14:	70 93 1a 04 	sts	0x041A, r23
    3d18:	80 93 1b 04 	sts	0x041B, r24
    3d1c:	90 93 1c 04 	sts	0x041C, r25
    3d20:	df 91       	pop	r29
    3d22:	cf 91       	pop	r28
    3d24:	08 95       	ret

00003d26 <_ZN12OrangutanSVP9getStatusEv>:
    3d26:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_ZL23updateVariablesIfNeededv>
    3d2a:	80 91 4e 04 	lds	r24, 0x044E
    3d2e:	08 95       	ret

00003d30 <svp_get_status>:
    3d30:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <_ZN12OrangutanSVP9getStatusEv>
    3d34:	08 95       	ret

00003d36 <_ZN12OrangutanSVP21getChannelDMillivoltsEv>:
    3d36:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_ZL23updateVariablesIfNeededv>
    3d3a:	80 91 55 04 	lds	r24, 0x0455
    3d3e:	90 91 56 04 	lds	r25, 0x0456
    3d42:	08 95       	ret

00003d44 <_ZN12OrangutanSVP21getChannelCMillivoltsEv>:
    3d44:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_ZL23updateVariablesIfNeededv>
    3d48:	80 91 53 04 	lds	r24, 0x0453
    3d4c:	90 91 54 04 	lds	r25, 0x0454
    3d50:	08 95       	ret

00003d52 <_ZN12OrangutanSVP21getChannelBMillivoltsEv>:
    3d52:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_ZL23updateVariablesIfNeededv>
    3d56:	80 91 51 04 	lds	r24, 0x0451
    3d5a:	90 91 52 04 	lds	r25, 0x0452
    3d5e:	08 95       	ret

00003d60 <_ZN12OrangutanSVP21getChannelAMillivoltsEv>:
    3d60:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_ZL23updateVariablesIfNeededv>
    3d64:	80 91 4f 04 	lds	r24, 0x044F
    3d68:	90 91 50 04 	lds	r25, 0x0450
    3d6c:	08 95       	ret

00003d6e <_ZN12OrangutanSVP20getBatteryMillivoltsEv>:
    3d6e:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_ZL23updateVariablesIfNeededv>
    3d72:	80 91 59 04 	lds	r24, 0x0459
    3d76:	90 91 5a 04 	lds	r25, 0x045A
    3d7a:	08 95       	ret

00003d7c <_ZN12OrangutanSVP20getTrimpotMillivoltsEv>:
    3d7c:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_ZL23updateVariablesIfNeededv>
    3d80:	80 91 57 04 	lds	r24, 0x0457
    3d84:	90 91 58 04 	lds	r25, 0x0458
    3d88:	08 95       	ret

00003d8a <_ZN12OrangutanSVP15serialReadStartEv>:
    3d8a:	83 e8       	ldi	r24, 0x83	; 131
    3d8c:	67 e0       	ldi	r22, 0x07	; 7
    3d8e:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3d92:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <_ZN12OrangutanSVP11getNextByteEv>
    3d96:	08 95       	ret

00003d98 <_Z14updateEncodersv>:
    3d98:	a5 e0       	ldi	r26, 0x05	; 5
    3d9a:	b0 e0       	ldi	r27, 0x00	; 0
    3d9c:	e2 ed       	ldi	r30, 0xD2	; 210
    3d9e:	fe e1       	ldi	r31, 0x1E	; 30
    3da0:	0c 94 45 20 	jmp	0x408a	; 0x408a <__prologue_saves__+0x1e>
    3da4:	82 e8       	ldi	r24, 0x82	; 130
    3da6:	66 e0       	ldi	r22, 0x06	; 6
    3da8:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3dac:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <_ZN12OrangutanSVP11getNextByteEv>
    3db0:	80 93 49 04 	sts	0x0449, r24
    3db4:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <_ZN12OrangutanSVP11getNextByteEv>
    3db8:	80 93 4a 04 	sts	0x044A, r24
    3dbc:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <_ZN12OrangutanSVP11getNextByteEv>
    3dc0:	80 93 4b 04 	sts	0x044B, r24
    3dc4:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <_ZN12OrangutanSVP11getNextByteEv>
    3dc8:	80 93 4c 04 	sts	0x044C, r24
    3dcc:	10 91 4d 04 	lds	r17, 0x044D
    3dd0:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <_ZN12OrangutanSVP11getNextByteEv>
    3dd4:	18 2b       	or	r17, r24
    3dd6:	10 93 4d 04 	sts	0x044D, r17
    3dda:	de 01       	movw	r26, r28
    3ddc:	11 96       	adiw	r26, 0x01	; 1
    3dde:	e9 e4       	ldi	r30, 0x49	; 73
    3de0:	f4 e0       	ldi	r31, 0x04	; 4
    3de2:	85 e0       	ldi	r24, 0x05	; 5
    3de4:	01 90       	ld	r0, Z+
    3de6:	0d 92       	st	X+, r0
    3de8:	81 50       	subi	r24, 0x01	; 1
    3dea:	e1 f7       	brne	.-8      	; 0x3de4 <_Z14updateEncodersv+0x4c>
    3dec:	29 81       	ldd	r18, Y+1	; 0x01
    3dee:	3a 81       	ldd	r19, Y+2	; 0x02
    3df0:	4b 81       	ldd	r20, Y+3	; 0x03
    3df2:	5c 81       	ldd	r21, Y+4	; 0x04
    3df4:	6d 81       	ldd	r22, Y+5	; 0x05
    3df6:	70 e0       	ldi	r23, 0x00	; 0
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	25 96       	adiw	r28, 0x05	; 5
    3dfc:	e3 e0       	ldi	r30, 0x03	; 3
    3dfe:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <__epilogue_restores__+0x1e>

00003e02 <_ZL22updateEncodersIfNeededv>:
    3e02:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <_ZN13OrangutanTime2msEv>
    3e06:	20 91 15 04 	lds	r18, 0x0415
    3e0a:	30 91 16 04 	lds	r19, 0x0416
    3e0e:	40 91 17 04 	lds	r20, 0x0417
    3e12:	50 91 18 04 	lds	r21, 0x0418
    3e16:	62 17       	cp	r22, r18
    3e18:	73 07       	cpc	r23, r19
    3e1a:	84 07       	cpc	r24, r20
    3e1c:	95 07       	cpc	r25, r21
    3e1e:	61 f0       	breq	.+24     	; 0x3e38 <_ZL22updateEncodersIfNeededv+0x36>
    3e20:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <_Z14updateEncodersv>
    3e24:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <_ZN13OrangutanTime2msEv>
    3e28:	60 93 15 04 	sts	0x0415, r22
    3e2c:	70 93 16 04 	sts	0x0416, r23
    3e30:	80 93 17 04 	sts	0x0417, r24
    3e34:	90 93 18 04 	sts	0x0418, r25
    3e38:	08 95       	ret

00003e3a <_ZN12OrangutanSVP12checkErrorCDEv>:
    3e3a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <_ZL22updateEncodersIfNeededv>
    3e3e:	80 91 4d 04 	lds	r24, 0x044D
    3e42:	81 fd       	sbrc	r24, 1
    3e44:	02 c0       	rjmp	.+4      	; 0x3e4a <_ZN12OrangutanSVP12checkErrorCDEv+0x10>
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	08 95       	ret
    3e4a:	8d 7f       	andi	r24, 0xFD	; 253
    3e4c:	80 93 4d 04 	sts	0x044D, r24
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	08 95       	ret

00003e54 <svp_check_error_cd>:
    3e54:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <_ZN12OrangutanSVP12checkErrorCDEv>
    3e58:	08 95       	ret

00003e5a <_ZN12OrangutanSVP12checkErrorABEv>:
    3e5a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <_ZL22updateEncodersIfNeededv>
    3e5e:	80 91 4d 04 	lds	r24, 0x044D
    3e62:	80 fd       	sbrc	r24, 0
    3e64:	02 c0       	rjmp	.+4      	; 0x3e6a <_ZN12OrangutanSVP12checkErrorABEv+0x10>
    3e66:	80 e0       	ldi	r24, 0x00	; 0
    3e68:	08 95       	ret
    3e6a:	8e 7f       	andi	r24, 0xFE	; 254
    3e6c:	80 93 4d 04 	sts	0x044D, r24
    3e70:	81 e0       	ldi	r24, 0x01	; 1
    3e72:	08 95       	ret

00003e74 <svp_check_error_ab>:
    3e74:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <_ZN12OrangutanSVP12checkErrorABEv>
    3e78:	08 95       	ret

00003e7a <_ZN12OrangutanSVP11getCountsCDEv>:
    3e7a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <_ZL22updateEncodersIfNeededv>
    3e7e:	20 91 4b 04 	lds	r18, 0x044B
    3e82:	30 91 4c 04 	lds	r19, 0x044C
    3e86:	80 91 47 04 	lds	r24, 0x0447
    3e8a:	90 91 48 04 	lds	r25, 0x0448
    3e8e:	28 1b       	sub	r18, r24
    3e90:	39 0b       	sbc	r19, r25
    3e92:	c9 01       	movw	r24, r18
    3e94:	08 95       	ret

00003e96 <_ZN12OrangutanSVP19getCountsAndResetCDEv>:
    3e96:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_ZN12OrangutanSVP11getCountsCDEv>
    3e9a:	20 91 4b 04 	lds	r18, 0x044B
    3e9e:	30 91 4c 04 	lds	r19, 0x044C
    3ea2:	30 93 48 04 	sts	0x0448, r19
    3ea6:	20 93 47 04 	sts	0x0447, r18
    3eaa:	08 95       	ret

00003eac <svp_get_counts_and_reset_cd>:
    3eac:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <_ZN12OrangutanSVP19getCountsAndResetCDEv>
    3eb0:	08 95       	ret

00003eb2 <svp_get_counts_cd>:
    3eb2:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_ZN12OrangutanSVP11getCountsCDEv>
    3eb6:	08 95       	ret

00003eb8 <_ZN12OrangutanSVP11getCountsABEv>:
    3eb8:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <_ZL22updateEncodersIfNeededv>
    3ebc:	20 91 49 04 	lds	r18, 0x0449
    3ec0:	30 91 4a 04 	lds	r19, 0x044A
    3ec4:	80 91 45 04 	lds	r24, 0x0445
    3ec8:	90 91 46 04 	lds	r25, 0x0446
    3ecc:	28 1b       	sub	r18, r24
    3ece:	39 0b       	sbc	r19, r25
    3ed0:	c9 01       	movw	r24, r18
    3ed2:	08 95       	ret

00003ed4 <_ZN12OrangutanSVP19getCountsAndResetABEv>:
    3ed4:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <_ZN12OrangutanSVP11getCountsABEv>
    3ed8:	20 91 49 04 	lds	r18, 0x0449
    3edc:	30 91 4a 04 	lds	r19, 0x044A
    3ee0:	30 93 46 04 	sts	0x0446, r19
    3ee4:	20 93 45 04 	sts	0x0445, r18
    3ee8:	08 95       	ret

00003eea <svp_get_counts_and_reset_ab>:
    3eea:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <_ZN12OrangutanSVP19getCountsAndResetABEv>
    3eee:	08 95       	ret

00003ef0 <svp_get_counts_ab>:
    3ef0:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <_ZN12OrangutanSVP11getCountsABEv>
    3ef4:	08 95       	ret

00003ef6 <_ZN12OrangutanSVP18getFirmwareVersionEv>:
    3ef6:	80 e8       	ldi	r24, 0x80	; 128
    3ef8:	65 e0       	ldi	r22, 0x05	; 5
    3efa:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3efe:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <_ZN12OrangutanSVP11getNextByteEv>
    3f02:	08 95       	ret

00003f04 <svp_get_firmware_version>:
    3f04:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <_ZN12OrangutanSVP18getFirmwareVersionEv>
    3f08:	08 95       	ret

00003f0a <_ZN18OrangutanSPIMaster4initEhh>:
    3f0a:	98 2f       	mov	r25, r24
    3f0c:	24 99       	sbic	0x04, 4	; 4
    3f0e:	0c c0       	rjmp	.+24     	; 0x3f28 <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    3f10:	2c 99       	sbic	0x05, 4	; 5
    3f12:	0a c0       	rjmp	.+20     	; 0x3f28 <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    3f14:	2c 9a       	sbi	0x05, 4	; 5
    3f16:	ee e1       	ldi	r30, 0x1E	; 30
    3f18:	f0 e0       	ldi	r31, 0x00	; 0
    3f1a:	6f 93       	push	r22
    3f1c:	64 e0       	ldi	r22, 0x04	; 4
    3f1e:	6a 95       	dec	r22
    3f20:	f1 f7       	brne	.-4      	; 0x3f1e <_ZN18OrangutanSPIMaster4initEhh+0x14>
    3f22:	6f 91       	pop	r22
    3f24:	31 97       	sbiw	r30, 0x01	; 1
    3f26:	c9 f7       	brne	.-14     	; 0x3f1a <_ZN18OrangutanSPIMaster4initEhh+0x10>
    3f28:	84 b1       	in	r24, 0x04	; 4
    3f2a:	80 6a       	ori	r24, 0xA0	; 160
    3f2c:	84 b9       	out	0x04, r24	; 4
    3f2e:	26 98       	cbi	0x04, 6	; 4
    3f30:	89 2f       	mov	r24, r25
    3f32:	83 70       	andi	r24, 0x03	; 3
    3f34:	80 65       	ori	r24, 0x50	; 80
    3f36:	6c 7a       	andi	r22, 0xAC	; 172
    3f38:	86 2b       	or	r24, r22
    3f3a:	8c bd       	out	0x2c, r24	; 44
    3f3c:	89 2f       	mov	r24, r25
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	96 95       	lsr	r25
    3f42:	87 95       	ror	r24
    3f44:	96 95       	lsr	r25
    3f46:	87 95       	ror	r24
    3f48:	81 70       	andi	r24, 0x01	; 1
    3f4a:	8d bd       	out	0x2d, r24	; 45
    3f4c:	81 e0       	ldi	r24, 0x01	; 1
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <_ZN13OrangutanTime17delayMillisecondsEj>
    3f54:	08 95       	ret

00003f56 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>:
    3f56:	0f 93       	push	r16
    3f58:	1f 93       	push	r17
    3f5a:	08 2f       	mov	r16, r24
    3f5c:	16 2f       	mov	r17, r22
    3f5e:	0c b4       	in	r0, 0x2c	; 44
    3f60:	06 fc       	sbrc	r0, 6
    3f62:	04 c0       	rjmp	.+8      	; 0x3f6c <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x16>
    3f64:	80 e0       	ldi	r24, 0x00	; 0
    3f66:	64 e0       	ldi	r22, 0x04	; 4
    3f68:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <_ZN18OrangutanSPIMaster4initEhh>
    3f6c:	0c b4       	in	r0, 0x2c	; 44
    3f6e:	04 fc       	sbrc	r0, 4
    3f70:	03 c0       	rjmp	.+6      	; 0x3f78 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x22>
    3f72:	8c b5       	in	r24, 0x2c	; 44
    3f74:	80 61       	ori	r24, 0x10	; 16
    3f76:	8c bd       	out	0x2c, r24	; 44
    3f78:	0e bd       	out	0x2e, r16	; 46
    3f7a:	05 c0       	rjmp	.+10     	; 0x3f86 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    3f7c:	0c b4       	in	r0, 0x2c	; 44
    3f7e:	04 fc       	sbrc	r0, 4
    3f80:	02 c0       	rjmp	.+4      	; 0x3f86 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    3f82:	80 e0       	ldi	r24, 0x00	; 0
    3f84:	0f c0       	rjmp	.+30     	; 0x3fa4 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4e>
    3f86:	0d b4       	in	r0, 0x2d	; 45
    3f88:	07 fe       	sbrs	r0, 7
    3f8a:	f8 cf       	rjmp	.-16     	; 0x3f7c <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x26>
    3f8c:	11 23       	and	r17, r17
    3f8e:	49 f0       	breq	.+18     	; 0x3fa2 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4c>
    3f90:	81 2f       	mov	r24, r17
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	6f 93       	push	r22
    3f96:	64 e0       	ldi	r22, 0x04	; 4
    3f98:	6a 95       	dec	r22
    3f9a:	f1 f7       	brne	.-4      	; 0x3f98 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x42>
    3f9c:	6f 91       	pop	r22
    3f9e:	01 97       	sbiw	r24, 0x01	; 1
    3fa0:	c9 f7       	brne	.-14     	; 0x3f94 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x3e>
    3fa2:	8e b5       	in	r24, 0x2e	; 46
    3fa4:	1f 91       	pop	r17
    3fa6:	0f 91       	pop	r16
    3fa8:	08 95       	ret

00003faa <_ZN18OrangutanSPIMaster8transmitEh>:
    3faa:	60 e0       	ldi	r22, 0x00	; 0
    3fac:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3fb0:	08 95       	ret

00003fb2 <spi_master_transmit>:
    3fb2:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <_ZN18OrangutanSPIMaster8transmitEh>
    3fb6:	08 95       	ret

00003fb8 <spi_master_transmit_and_delay>:
    3fb8:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3fbc:	08 95       	ret

00003fbe <spi_master_init>:
    3fbe:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <_ZN18OrangutanSPIMaster4initEhh>
    3fc2:	08 95       	ret

00003fc4 <__mulsi3>:
    3fc4:	62 9f       	mul	r22, r18
    3fc6:	d0 01       	movw	r26, r0
    3fc8:	73 9f       	mul	r23, r19
    3fca:	f0 01       	movw	r30, r0
    3fcc:	82 9f       	mul	r24, r18
    3fce:	e0 0d       	add	r30, r0
    3fd0:	f1 1d       	adc	r31, r1
    3fd2:	64 9f       	mul	r22, r20
    3fd4:	e0 0d       	add	r30, r0
    3fd6:	f1 1d       	adc	r31, r1
    3fd8:	92 9f       	mul	r25, r18
    3fda:	f0 0d       	add	r31, r0
    3fdc:	83 9f       	mul	r24, r19
    3fde:	f0 0d       	add	r31, r0
    3fe0:	74 9f       	mul	r23, r20
    3fe2:	f0 0d       	add	r31, r0
    3fe4:	65 9f       	mul	r22, r21
    3fe6:	f0 0d       	add	r31, r0
    3fe8:	99 27       	eor	r25, r25
    3fea:	72 9f       	mul	r23, r18
    3fec:	b0 0d       	add	r27, r0
    3fee:	e1 1d       	adc	r30, r1
    3ff0:	f9 1f       	adc	r31, r25
    3ff2:	63 9f       	mul	r22, r19
    3ff4:	b0 0d       	add	r27, r0
    3ff6:	e1 1d       	adc	r30, r1
    3ff8:	f9 1f       	adc	r31, r25
    3ffa:	bd 01       	movw	r22, r26
    3ffc:	cf 01       	movw	r24, r30
    3ffe:	11 24       	eor	r1, r1
    4000:	08 95       	ret

00004002 <__divmodhi4>:
    4002:	97 fb       	bst	r25, 7
    4004:	09 2e       	mov	r0, r25
    4006:	07 26       	eor	r0, r23
    4008:	0a d0       	rcall	.+20     	; 0x401e <__divmodhi4_neg1>
    400a:	77 fd       	sbrc	r23, 7
    400c:	04 d0       	rcall	.+8      	; 0x4016 <__divmodhi4_neg2>
    400e:	65 d0       	rcall	.+202    	; 0x40da <__udivmodhi4>
    4010:	06 d0       	rcall	.+12     	; 0x401e <__divmodhi4_neg1>
    4012:	00 20       	and	r0, r0
    4014:	1a f4       	brpl	.+6      	; 0x401c <__divmodhi4_exit>

00004016 <__divmodhi4_neg2>:
    4016:	70 95       	com	r23
    4018:	61 95       	neg	r22
    401a:	7f 4f       	sbci	r23, 0xFF	; 255

0000401c <__divmodhi4_exit>:
    401c:	08 95       	ret

0000401e <__divmodhi4_neg1>:
    401e:	f6 f7       	brtc	.-4      	; 0x401c <__divmodhi4_exit>
    4020:	90 95       	com	r25
    4022:	81 95       	neg	r24
    4024:	9f 4f       	sbci	r25, 0xFF	; 255
    4026:	08 95       	ret

00004028 <__udivmodsi4>:
    4028:	a1 e2       	ldi	r26, 0x21	; 33
    402a:	1a 2e       	mov	r1, r26
    402c:	aa 1b       	sub	r26, r26
    402e:	bb 1b       	sub	r27, r27
    4030:	fd 01       	movw	r30, r26
    4032:	0d c0       	rjmp	.+26     	; 0x404e <__udivmodsi4_ep>

00004034 <__udivmodsi4_loop>:
    4034:	aa 1f       	adc	r26, r26
    4036:	bb 1f       	adc	r27, r27
    4038:	ee 1f       	adc	r30, r30
    403a:	ff 1f       	adc	r31, r31
    403c:	a2 17       	cp	r26, r18
    403e:	b3 07       	cpc	r27, r19
    4040:	e4 07       	cpc	r30, r20
    4042:	f5 07       	cpc	r31, r21
    4044:	20 f0       	brcs	.+8      	; 0x404e <__udivmodsi4_ep>
    4046:	a2 1b       	sub	r26, r18
    4048:	b3 0b       	sbc	r27, r19
    404a:	e4 0b       	sbc	r30, r20
    404c:	f5 0b       	sbc	r31, r21

0000404e <__udivmodsi4_ep>:
    404e:	66 1f       	adc	r22, r22
    4050:	77 1f       	adc	r23, r23
    4052:	88 1f       	adc	r24, r24
    4054:	99 1f       	adc	r25, r25
    4056:	1a 94       	dec	r1
    4058:	69 f7       	brne	.-38     	; 0x4034 <__udivmodsi4_loop>
    405a:	60 95       	com	r22
    405c:	70 95       	com	r23
    405e:	80 95       	com	r24
    4060:	90 95       	com	r25
    4062:	9b 01       	movw	r18, r22
    4064:	ac 01       	movw	r20, r24
    4066:	bd 01       	movw	r22, r26
    4068:	cf 01       	movw	r24, r30
    406a:	08 95       	ret

0000406c <__prologue_saves__>:
    406c:	2f 92       	push	r2
    406e:	3f 92       	push	r3
    4070:	4f 92       	push	r4
    4072:	5f 92       	push	r5
    4074:	6f 92       	push	r6
    4076:	7f 92       	push	r7
    4078:	8f 92       	push	r8
    407a:	9f 92       	push	r9
    407c:	af 92       	push	r10
    407e:	bf 92       	push	r11
    4080:	cf 92       	push	r12
    4082:	df 92       	push	r13
    4084:	ef 92       	push	r14
    4086:	ff 92       	push	r15
    4088:	0f 93       	push	r16
    408a:	1f 93       	push	r17
    408c:	cf 93       	push	r28
    408e:	df 93       	push	r29
    4090:	cd b7       	in	r28, 0x3d	; 61
    4092:	de b7       	in	r29, 0x3e	; 62
    4094:	ca 1b       	sub	r28, r26
    4096:	db 0b       	sbc	r29, r27
    4098:	0f b6       	in	r0, 0x3f	; 63
    409a:	f8 94       	cli
    409c:	de bf       	out	0x3e, r29	; 62
    409e:	0f be       	out	0x3f, r0	; 63
    40a0:	cd bf       	out	0x3d, r28	; 61
    40a2:	09 94       	ijmp

000040a4 <__epilogue_restores__>:
    40a4:	2a 88       	ldd	r2, Y+18	; 0x12
    40a6:	39 88       	ldd	r3, Y+17	; 0x11
    40a8:	48 88       	ldd	r4, Y+16	; 0x10
    40aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    40ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    40ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    40b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    40b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    40b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    40b6:	b9 84       	ldd	r11, Y+9	; 0x09
    40b8:	c8 84       	ldd	r12, Y+8	; 0x08
    40ba:	df 80       	ldd	r13, Y+7	; 0x07
    40bc:	ee 80       	ldd	r14, Y+6	; 0x06
    40be:	fd 80       	ldd	r15, Y+5	; 0x05
    40c0:	0c 81       	ldd	r16, Y+4	; 0x04
    40c2:	1b 81       	ldd	r17, Y+3	; 0x03
    40c4:	aa 81       	ldd	r26, Y+2	; 0x02
    40c6:	b9 81       	ldd	r27, Y+1	; 0x01
    40c8:	ce 0f       	add	r28, r30
    40ca:	d1 1d       	adc	r29, r1
    40cc:	0f b6       	in	r0, 0x3f	; 63
    40ce:	f8 94       	cli
    40d0:	de bf       	out	0x3e, r29	; 62
    40d2:	0f be       	out	0x3f, r0	; 63
    40d4:	cd bf       	out	0x3d, r28	; 61
    40d6:	ed 01       	movw	r28, r26
    40d8:	08 95       	ret

000040da <__udivmodhi4>:
    40da:	aa 1b       	sub	r26, r26
    40dc:	bb 1b       	sub	r27, r27
    40de:	51 e1       	ldi	r21, 0x11	; 17
    40e0:	07 c0       	rjmp	.+14     	; 0x40f0 <__udivmodhi4_ep>

000040e2 <__udivmodhi4_loop>:
    40e2:	aa 1f       	adc	r26, r26
    40e4:	bb 1f       	adc	r27, r27
    40e6:	a6 17       	cp	r26, r22
    40e8:	b7 07       	cpc	r27, r23
    40ea:	10 f0       	brcs	.+4      	; 0x40f0 <__udivmodhi4_ep>
    40ec:	a6 1b       	sub	r26, r22
    40ee:	b7 0b       	sbc	r27, r23

000040f0 <__udivmodhi4_ep>:
    40f0:	88 1f       	adc	r24, r24
    40f2:	99 1f       	adc	r25, r25
    40f4:	5a 95       	dec	r21
    40f6:	a9 f7       	brne	.-22     	; 0x40e2 <__udivmodhi4_loop>
    40f8:	80 95       	com	r24
    40fa:	90 95       	com	r25
    40fc:	bc 01       	movw	r22, r24
    40fe:	cd 01       	movw	r24, r26
    4100:	08 95       	ret

00004102 <malloc>:
    4102:	cf 93       	push	r28
    4104:	df 93       	push	r29
    4106:	bc 01       	movw	r22, r24
    4108:	82 30       	cpi	r24, 0x02	; 2
    410a:	91 05       	cpc	r25, r1
    410c:	10 f4       	brcc	.+4      	; 0x4112 <malloc+0x10>
    410e:	62 e0       	ldi	r22, 0x02	; 2
    4110:	70 e0       	ldi	r23, 0x00	; 0
    4112:	a0 91 64 04 	lds	r26, 0x0464
    4116:	b0 91 65 04 	lds	r27, 0x0465
    411a:	ed 01       	movw	r28, r26
    411c:	e0 e0       	ldi	r30, 0x00	; 0
    411e:	f0 e0       	ldi	r31, 0x00	; 0
    4120:	40 e0       	ldi	r20, 0x00	; 0
    4122:	50 e0       	ldi	r21, 0x00	; 0
    4124:	21 c0       	rjmp	.+66     	; 0x4168 <malloc+0x66>
    4126:	88 81       	ld	r24, Y
    4128:	99 81       	ldd	r25, Y+1	; 0x01
    412a:	86 17       	cp	r24, r22
    412c:	97 07       	cpc	r25, r23
    412e:	69 f4       	brne	.+26     	; 0x414a <malloc+0x48>
    4130:	8a 81       	ldd	r24, Y+2	; 0x02
    4132:	9b 81       	ldd	r25, Y+3	; 0x03
    4134:	30 97       	sbiw	r30, 0x00	; 0
    4136:	19 f0       	breq	.+6      	; 0x413e <malloc+0x3c>
    4138:	93 83       	std	Z+3, r25	; 0x03
    413a:	82 83       	std	Z+2, r24	; 0x02
    413c:	04 c0       	rjmp	.+8      	; 0x4146 <malloc+0x44>
    413e:	90 93 65 04 	sts	0x0465, r25
    4142:	80 93 64 04 	sts	0x0464, r24
    4146:	fe 01       	movw	r30, r28
    4148:	34 c0       	rjmp	.+104    	; 0x41b2 <malloc+0xb0>
    414a:	68 17       	cp	r22, r24
    414c:	79 07       	cpc	r23, r25
    414e:	38 f4       	brcc	.+14     	; 0x415e <malloc+0x5c>
    4150:	41 15       	cp	r20, r1
    4152:	51 05       	cpc	r21, r1
    4154:	19 f0       	breq	.+6      	; 0x415c <malloc+0x5a>
    4156:	84 17       	cp	r24, r20
    4158:	95 07       	cpc	r25, r21
    415a:	08 f4       	brcc	.+2      	; 0x415e <malloc+0x5c>
    415c:	ac 01       	movw	r20, r24
    415e:	fe 01       	movw	r30, r28
    4160:	8a 81       	ldd	r24, Y+2	; 0x02
    4162:	9b 81       	ldd	r25, Y+3	; 0x03
    4164:	9c 01       	movw	r18, r24
    4166:	e9 01       	movw	r28, r18
    4168:	20 97       	sbiw	r28, 0x00	; 0
    416a:	e9 f6       	brne	.-70     	; 0x4126 <malloc+0x24>
    416c:	41 15       	cp	r20, r1
    416e:	51 05       	cpc	r21, r1
    4170:	a9 f1       	breq	.+106    	; 0x41dc <malloc+0xda>
    4172:	ca 01       	movw	r24, r20
    4174:	86 1b       	sub	r24, r22
    4176:	97 0b       	sbc	r25, r23
    4178:	04 97       	sbiw	r24, 0x04	; 4
    417a:	08 f4       	brcc	.+2      	; 0x417e <malloc+0x7c>
    417c:	ba 01       	movw	r22, r20
    417e:	e0 e0       	ldi	r30, 0x00	; 0
    4180:	f0 e0       	ldi	r31, 0x00	; 0
    4182:	2a c0       	rjmp	.+84     	; 0x41d8 <malloc+0xd6>
    4184:	8d 91       	ld	r24, X+
    4186:	9c 91       	ld	r25, X
    4188:	11 97       	sbiw	r26, 0x01	; 1
    418a:	84 17       	cp	r24, r20
    418c:	95 07       	cpc	r25, r21
    418e:	f9 f4       	brne	.+62     	; 0x41ce <malloc+0xcc>
    4190:	64 17       	cp	r22, r20
    4192:	75 07       	cpc	r23, r21
    4194:	81 f4       	brne	.+32     	; 0x41b6 <malloc+0xb4>
    4196:	12 96       	adiw	r26, 0x02	; 2
    4198:	8d 91       	ld	r24, X+
    419a:	9c 91       	ld	r25, X
    419c:	13 97       	sbiw	r26, 0x03	; 3
    419e:	30 97       	sbiw	r30, 0x00	; 0
    41a0:	19 f0       	breq	.+6      	; 0x41a8 <malloc+0xa6>
    41a2:	93 83       	std	Z+3, r25	; 0x03
    41a4:	82 83       	std	Z+2, r24	; 0x02
    41a6:	04 c0       	rjmp	.+8      	; 0x41b0 <malloc+0xae>
    41a8:	90 93 65 04 	sts	0x0465, r25
    41ac:	80 93 64 04 	sts	0x0464, r24
    41b0:	fd 01       	movw	r30, r26
    41b2:	32 96       	adiw	r30, 0x02	; 2
    41b4:	4f c0       	rjmp	.+158    	; 0x4254 <malloc+0x152>
    41b6:	ca 01       	movw	r24, r20
    41b8:	86 1b       	sub	r24, r22
    41ba:	97 0b       	sbc	r25, r23
    41bc:	fd 01       	movw	r30, r26
    41be:	e8 0f       	add	r30, r24
    41c0:	f9 1f       	adc	r31, r25
    41c2:	61 93       	st	Z+, r22
    41c4:	71 93       	st	Z+, r23
    41c6:	02 97       	sbiw	r24, 0x02	; 2
    41c8:	8d 93       	st	X+, r24
    41ca:	9c 93       	st	X, r25
    41cc:	43 c0       	rjmp	.+134    	; 0x4254 <malloc+0x152>
    41ce:	fd 01       	movw	r30, r26
    41d0:	82 81       	ldd	r24, Z+2	; 0x02
    41d2:	93 81       	ldd	r25, Z+3	; 0x03
    41d4:	9c 01       	movw	r18, r24
    41d6:	d9 01       	movw	r26, r18
    41d8:	10 97       	sbiw	r26, 0x00	; 0
    41da:	a1 f6       	brne	.-88     	; 0x4184 <malloc+0x82>
    41dc:	80 91 62 04 	lds	r24, 0x0462
    41e0:	90 91 63 04 	lds	r25, 0x0463
    41e4:	89 2b       	or	r24, r25
    41e6:	41 f4       	brne	.+16     	; 0x41f8 <malloc+0xf6>
    41e8:	80 91 1f 04 	lds	r24, 0x041F
    41ec:	90 91 20 04 	lds	r25, 0x0420
    41f0:	90 93 63 04 	sts	0x0463, r25
    41f4:	80 93 62 04 	sts	0x0462, r24
    41f8:	40 91 21 04 	lds	r20, 0x0421
    41fc:	50 91 22 04 	lds	r21, 0x0422
    4200:	41 15       	cp	r20, r1
    4202:	51 05       	cpc	r21, r1
    4204:	41 f4       	brne	.+16     	; 0x4216 <malloc+0x114>
    4206:	4d b7       	in	r20, 0x3d	; 61
    4208:	5e b7       	in	r21, 0x3e	; 62
    420a:	80 91 1d 04 	lds	r24, 0x041D
    420e:	90 91 1e 04 	lds	r25, 0x041E
    4212:	48 1b       	sub	r20, r24
    4214:	59 0b       	sbc	r21, r25
    4216:	20 91 62 04 	lds	r18, 0x0462
    421a:	30 91 63 04 	lds	r19, 0x0463
    421e:	24 17       	cp	r18, r20
    4220:	35 07       	cpc	r19, r21
    4222:	b0 f4       	brcc	.+44     	; 0x4250 <malloc+0x14e>
    4224:	ca 01       	movw	r24, r20
    4226:	82 1b       	sub	r24, r18
    4228:	93 0b       	sbc	r25, r19
    422a:	86 17       	cp	r24, r22
    422c:	97 07       	cpc	r25, r23
    422e:	80 f0       	brcs	.+32     	; 0x4250 <malloc+0x14e>
    4230:	ab 01       	movw	r20, r22
    4232:	4e 5f       	subi	r20, 0xFE	; 254
    4234:	5f 4f       	sbci	r21, 0xFF	; 255
    4236:	84 17       	cp	r24, r20
    4238:	95 07       	cpc	r25, r21
    423a:	50 f0       	brcs	.+20     	; 0x4250 <malloc+0x14e>
    423c:	42 0f       	add	r20, r18
    423e:	53 1f       	adc	r21, r19
    4240:	50 93 63 04 	sts	0x0463, r21
    4244:	40 93 62 04 	sts	0x0462, r20
    4248:	f9 01       	movw	r30, r18
    424a:	61 93       	st	Z+, r22
    424c:	71 93       	st	Z+, r23
    424e:	02 c0       	rjmp	.+4      	; 0x4254 <malloc+0x152>
    4250:	e0 e0       	ldi	r30, 0x00	; 0
    4252:	f0 e0       	ldi	r31, 0x00	; 0
    4254:	cf 01       	movw	r24, r30
    4256:	df 91       	pop	r29
    4258:	cf 91       	pop	r28
    425a:	08 95       	ret

0000425c <free>:
    425c:	cf 93       	push	r28
    425e:	df 93       	push	r29
    4260:	00 97       	sbiw	r24, 0x00	; 0
    4262:	09 f4       	brne	.+2      	; 0x4266 <free+0xa>
    4264:	50 c0       	rjmp	.+160    	; 0x4306 <free+0xaa>
    4266:	ec 01       	movw	r28, r24
    4268:	22 97       	sbiw	r28, 0x02	; 2
    426a:	1b 82       	std	Y+3, r1	; 0x03
    426c:	1a 82       	std	Y+2, r1	; 0x02
    426e:	a0 91 64 04 	lds	r26, 0x0464
    4272:	b0 91 65 04 	lds	r27, 0x0465
    4276:	10 97       	sbiw	r26, 0x00	; 0
    4278:	09 f1       	breq	.+66     	; 0x42bc <free+0x60>
    427a:	40 e0       	ldi	r20, 0x00	; 0
    427c:	50 e0       	ldi	r21, 0x00	; 0
    427e:	ac 17       	cp	r26, r28
    4280:	bd 07       	cpc	r27, r29
    4282:	08 f1       	brcs	.+66     	; 0x42c6 <free+0x6a>
    4284:	bb 83       	std	Y+3, r27	; 0x03
    4286:	aa 83       	std	Y+2, r26	; 0x02
    4288:	fe 01       	movw	r30, r28
    428a:	21 91       	ld	r18, Z+
    428c:	31 91       	ld	r19, Z+
    428e:	e2 0f       	add	r30, r18
    4290:	f3 1f       	adc	r31, r19
    4292:	ae 17       	cp	r26, r30
    4294:	bf 07       	cpc	r27, r31
    4296:	79 f4       	brne	.+30     	; 0x42b6 <free+0x5a>
    4298:	8d 91       	ld	r24, X+
    429a:	9c 91       	ld	r25, X
    429c:	11 97       	sbiw	r26, 0x01	; 1
    429e:	28 0f       	add	r18, r24
    42a0:	39 1f       	adc	r19, r25
    42a2:	2e 5f       	subi	r18, 0xFE	; 254
    42a4:	3f 4f       	sbci	r19, 0xFF	; 255
    42a6:	39 83       	std	Y+1, r19	; 0x01
    42a8:	28 83       	st	Y, r18
    42aa:	12 96       	adiw	r26, 0x02	; 2
    42ac:	8d 91       	ld	r24, X+
    42ae:	9c 91       	ld	r25, X
    42b0:	13 97       	sbiw	r26, 0x03	; 3
    42b2:	9b 83       	std	Y+3, r25	; 0x03
    42b4:	8a 83       	std	Y+2, r24	; 0x02
    42b6:	41 15       	cp	r20, r1
    42b8:	51 05       	cpc	r21, r1
    42ba:	71 f4       	brne	.+28     	; 0x42d8 <free+0x7c>
    42bc:	d0 93 65 04 	sts	0x0465, r29
    42c0:	c0 93 64 04 	sts	0x0464, r28
    42c4:	20 c0       	rjmp	.+64     	; 0x4306 <free+0xaa>
    42c6:	12 96       	adiw	r26, 0x02	; 2
    42c8:	8d 91       	ld	r24, X+
    42ca:	9c 91       	ld	r25, X
    42cc:	13 97       	sbiw	r26, 0x03	; 3
    42ce:	ad 01       	movw	r20, r26
    42d0:	00 97       	sbiw	r24, 0x00	; 0
    42d2:	11 f0       	breq	.+4      	; 0x42d8 <free+0x7c>
    42d4:	dc 01       	movw	r26, r24
    42d6:	d3 cf       	rjmp	.-90     	; 0x427e <free+0x22>
    42d8:	fa 01       	movw	r30, r20
    42da:	d3 83       	std	Z+3, r29	; 0x03
    42dc:	c2 83       	std	Z+2, r28	; 0x02
    42de:	21 91       	ld	r18, Z+
    42e0:	31 91       	ld	r19, Z+
    42e2:	e2 0f       	add	r30, r18
    42e4:	f3 1f       	adc	r31, r19
    42e6:	ce 17       	cp	r28, r30
    42e8:	df 07       	cpc	r29, r31
    42ea:	69 f4       	brne	.+26     	; 0x4306 <free+0xaa>
    42ec:	88 81       	ld	r24, Y
    42ee:	99 81       	ldd	r25, Y+1	; 0x01
    42f0:	28 0f       	add	r18, r24
    42f2:	39 1f       	adc	r19, r25
    42f4:	2e 5f       	subi	r18, 0xFE	; 254
    42f6:	3f 4f       	sbci	r19, 0xFF	; 255
    42f8:	fa 01       	movw	r30, r20
    42fa:	31 83       	std	Z+1, r19	; 0x01
    42fc:	20 83       	st	Z, r18
    42fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4300:	9b 81       	ldd	r25, Y+3	; 0x03
    4302:	93 83       	std	Z+3, r25	; 0x03
    4304:	82 83       	std	Z+2, r24	; 0x02
    4306:	df 91       	pop	r29
    4308:	cf 91       	pop	r28
    430a:	08 95       	ret

0000430c <itoa>:
    430c:	fb 01       	movw	r30, r22
    430e:	9f 01       	movw	r18, r30
    4310:	e8 94       	clt
    4312:	42 30       	cpi	r20, 0x02	; 2
    4314:	c4 f0       	brlt	.+48     	; 0x4346 <itoa+0x3a>
    4316:	45 32       	cpi	r20, 0x25	; 37
    4318:	b4 f4       	brge	.+44     	; 0x4346 <itoa+0x3a>
    431a:	4a 30       	cpi	r20, 0x0A	; 10
    431c:	29 f4       	brne	.+10     	; 0x4328 <itoa+0x1c>
    431e:	97 fb       	bst	r25, 7
    4320:	1e f4       	brtc	.+6      	; 0x4328 <itoa+0x1c>
    4322:	90 95       	com	r25
    4324:	81 95       	neg	r24
    4326:	9f 4f       	sbci	r25, 0xFF	; 255
    4328:	64 2f       	mov	r22, r20
    432a:	77 27       	eor	r23, r23
    432c:	0e 94 6d 20 	call	0x40da	; 0x40da <__udivmodhi4>
    4330:	80 5d       	subi	r24, 0xD0	; 208
    4332:	8a 33       	cpi	r24, 0x3A	; 58
    4334:	0c f0       	brlt	.+2      	; 0x4338 <itoa+0x2c>
    4336:	89 5d       	subi	r24, 0xD9	; 217
    4338:	81 93       	st	Z+, r24
    433a:	cb 01       	movw	r24, r22
    433c:	00 97       	sbiw	r24, 0x00	; 0
    433e:	a1 f7       	brne	.-24     	; 0x4328 <itoa+0x1c>
    4340:	16 f4       	brtc	.+4      	; 0x4346 <itoa+0x3a>
    4342:	5d e2       	ldi	r21, 0x2D	; 45
    4344:	51 93       	st	Z+, r21
    4346:	10 82       	st	Z, r1
    4348:	c9 01       	movw	r24, r18
    434a:	0c 94 16 22 	jmp	0x442c	; 0x442c <strrev>

0000434e <fdevopen>:
    434e:	0f 93       	push	r16
    4350:	1f 93       	push	r17
    4352:	cf 93       	push	r28
    4354:	df 93       	push	r29
    4356:	8c 01       	movw	r16, r24
    4358:	eb 01       	movw	r28, r22
    435a:	00 97       	sbiw	r24, 0x00	; 0
    435c:	31 f4       	brne	.+12     	; 0x436a <fdevopen+0x1c>
    435e:	61 15       	cp	r22, r1
    4360:	71 05       	cpc	r23, r1
    4362:	19 f4       	brne	.+6      	; 0x436a <fdevopen+0x1c>
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	38 c0       	rjmp	.+112    	; 0x43da <fdevopen+0x8c>
    436a:	81 e0       	ldi	r24, 0x01	; 1
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	6e e0       	ldi	r22, 0x0E	; 14
    4370:	70 e0       	ldi	r23, 0x00	; 0
    4372:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <calloc>
    4376:	fc 01       	movw	r30, r24
    4378:	9c 01       	movw	r18, r24
    437a:	00 97       	sbiw	r24, 0x00	; 0
    437c:	71 f1       	breq	.+92     	; 0x43da <fdevopen+0x8c>
    437e:	80 e8       	ldi	r24, 0x80	; 128
    4380:	83 83       	std	Z+3, r24	; 0x03
    4382:	20 97       	sbiw	r28, 0x00	; 0
    4384:	71 f0       	breq	.+28     	; 0x43a2 <fdevopen+0x54>
    4386:	d3 87       	std	Z+11, r29	; 0x0b
    4388:	c2 87       	std	Z+10, r28	; 0x0a
    438a:	81 e8       	ldi	r24, 0x81	; 129
    438c:	83 83       	std	Z+3, r24	; 0x03
    438e:	80 91 66 04 	lds	r24, 0x0466
    4392:	90 91 67 04 	lds	r25, 0x0467
    4396:	89 2b       	or	r24, r25
    4398:	21 f4       	brne	.+8      	; 0x43a2 <fdevopen+0x54>
    439a:	f0 93 67 04 	sts	0x0467, r31
    439e:	e0 93 66 04 	sts	0x0466, r30
    43a2:	01 15       	cp	r16, r1
    43a4:	11 05       	cpc	r17, r1
    43a6:	c9 f0       	breq	.+50     	; 0x43da <fdevopen+0x8c>
    43a8:	11 87       	std	Z+9, r17	; 0x09
    43aa:	00 87       	std	Z+8, r16	; 0x08
    43ac:	83 81       	ldd	r24, Z+3	; 0x03
    43ae:	82 60       	ori	r24, 0x02	; 2
    43b0:	83 83       	std	Z+3, r24	; 0x03
    43b2:	80 91 68 04 	lds	r24, 0x0468
    43b6:	90 91 69 04 	lds	r25, 0x0469
    43ba:	89 2b       	or	r24, r25
    43bc:	71 f4       	brne	.+28     	; 0x43da <fdevopen+0x8c>
    43be:	f0 93 69 04 	sts	0x0469, r31
    43c2:	e0 93 68 04 	sts	0x0468, r30
    43c6:	80 91 6a 04 	lds	r24, 0x046A
    43ca:	90 91 6b 04 	lds	r25, 0x046B
    43ce:	89 2b       	or	r24, r25
    43d0:	21 f4       	brne	.+8      	; 0x43da <fdevopen+0x8c>
    43d2:	f0 93 6b 04 	sts	0x046B, r31
    43d6:	e0 93 6a 04 	sts	0x046A, r30
    43da:	c9 01       	movw	r24, r18
    43dc:	df 91       	pop	r29
    43de:	cf 91       	pop	r28
    43e0:	1f 91       	pop	r17
    43e2:	0f 91       	pop	r16
    43e4:	08 95       	ret

000043e6 <calloc>:
    43e6:	0f 93       	push	r16
    43e8:	1f 93       	push	r17
    43ea:	cf 93       	push	r28
    43ec:	df 93       	push	r29
    43ee:	68 9f       	mul	r22, r24
    43f0:	80 01       	movw	r16, r0
    43f2:	69 9f       	mul	r22, r25
    43f4:	10 0d       	add	r17, r0
    43f6:	78 9f       	mul	r23, r24
    43f8:	10 0d       	add	r17, r0
    43fa:	11 24       	eor	r1, r1
    43fc:	c8 01       	movw	r24, r16
    43fe:	0e 94 81 20 	call	0x4102	; 0x4102 <malloc>
    4402:	ec 01       	movw	r28, r24
    4404:	00 97       	sbiw	r24, 0x00	; 0
    4406:	29 f0       	breq	.+10     	; 0x4412 <calloc+0x2c>
    4408:	60 e0       	ldi	r22, 0x00	; 0
    440a:	70 e0       	ldi	r23, 0x00	; 0
    440c:	a8 01       	movw	r20, r16
    440e:	0e 94 0f 22 	call	0x441e	; 0x441e <memset>
    4412:	ce 01       	movw	r24, r28
    4414:	df 91       	pop	r29
    4416:	cf 91       	pop	r28
    4418:	1f 91       	pop	r17
    441a:	0f 91       	pop	r16
    441c:	08 95       	ret

0000441e <memset>:
    441e:	dc 01       	movw	r26, r24
    4420:	01 c0       	rjmp	.+2      	; 0x4424 <memset+0x6>
    4422:	6d 93       	st	X+, r22
    4424:	41 50       	subi	r20, 0x01	; 1
    4426:	50 40       	sbci	r21, 0x00	; 0
    4428:	e0 f7       	brcc	.-8      	; 0x4422 <memset+0x4>
    442a:	08 95       	ret

0000442c <strrev>:
    442c:	dc 01       	movw	r26, r24
    442e:	fc 01       	movw	r30, r24
    4430:	67 2f       	mov	r22, r23
    4432:	71 91       	ld	r23, Z+
    4434:	77 23       	and	r23, r23
    4436:	e1 f7       	brne	.-8      	; 0x4430 <strrev+0x4>
    4438:	32 97       	sbiw	r30, 0x02	; 2
    443a:	04 c0       	rjmp	.+8      	; 0x4444 <strrev+0x18>
    443c:	7c 91       	ld	r23, X
    443e:	6d 93       	st	X+, r22
    4440:	70 83       	st	Z, r23
    4442:	62 91       	ld	r22, -Z
    4444:	ae 17       	cp	r26, r30
    4446:	bf 07       	cpc	r27, r31
    4448:	c8 f3       	brcs	.-14     	; 0x443c <strrev+0x10>
    444a:	08 95       	ret

0000444c <_exit>:
    444c:	f8 94       	cli

0000444e <__stop_program>:
    444e:	ff cf       	rjmp	.-2      	; 0x444e <__stop_program>
