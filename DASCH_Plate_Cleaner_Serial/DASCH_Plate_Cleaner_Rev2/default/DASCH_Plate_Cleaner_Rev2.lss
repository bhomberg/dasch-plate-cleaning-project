
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000808  00800100  000046b2  00004746  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000046b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800908  00800908  00004f4e  2**0
                  ALLOC
  3 .stab         00005274  00000000  00000000  00004f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000544b  00000000  00000000  0000a1c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000f60f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003fc  00000000  00000000  0000f64f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000013e7  00000000  00000000  0000fa4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000338  00000000  00000000  00010e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ccc  00000000  00000000  0001116a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000190  00000000  00000000  00012e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b83  00000000  00000000  00012fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000136e  00000000  00000000  00013b4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
       4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 6e 1e 	jmp	0x3cdc	; 0x3cdc <__vector_11>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      50:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__vector_20>
      54:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <__vector_21>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      70:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__vector_28>
      74:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <__vector_29>
      78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      80:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      8c:	9f 0b       	sbc	r25, r31
      8e:	b8 0b       	sbc	r27, r24
      90:	d3 0b       	sbc	r29, r19
      92:	f0 0b       	sbc	r31, r16
      94:	0f 0c       	add	r0, r15
      96:	2b 0c       	add	r2, r11
      98:	49 0c       	add	r4, r9
      9a:	6a 0c       	add	r6, r10
      9c:	8c 0c       	add	r8, r12
      9e:	96 0c       	add	r9, r6
      a0:	9a 0c       	add	r9, r10
      a2:	a6 0c       	add	r10, r6
      a4:	aa 0c       	add	r10, r10
      a6:	b4 0c       	add	r11, r4
      a8:	b8 0c       	add	r11, r8
      aa:	c3 0c       	add	r12, r3
      ac:	c7 0c       	add	r12, r7
      ae:	d2 0c       	add	r13, r2
      b0:	d6 0c       	add	r13, r6
      b2:	e1 0c       	add	r14, r1
      b4:	e5 0c       	add	r14, r5
      b6:	f0 0c       	add	r15, r0
      b8:	f4 0c       	add	r15, r4
      ba:	03 0d       	add	r16, r3
      bc:	09 0d       	add	r16, r9
      be:	18 0d       	add	r17, r8
      c0:	1c 0d       	add	r17, r12
      c2:	27 0d       	add	r18, r7
      c4:	2b 0d       	add	r18, r11
      c6:	36 0d       	add	r19, r6
      c8:	3a 0d       	add	r19, r10
      ca:	44 0d       	add	r20, r4
      cc:	48 0d       	add	r20, r8
      ce:	52 0d       	add	r21, r2
      d0:	56 0d       	add	r21, r6
      d2:	62 0d       	add	r22, r2
      d4:	68 0d       	add	r22, r8
      d6:	78 0d       	add	r23, r8
      d8:	82 0d       	add	r24, r2
      da:	98 0d       	add	r25, r8
      dc:	a2 0d       	add	r26, r2
      de:	b8 0d       	add	r27, r8
      e0:	c2 0d       	add	r28, r2
      e2:	d8 0d       	add	r29, r8
      e4:	e2 0d       	add	r30, r2
      e6:	f8 0d       	add	r31, r8
      e8:	02 0e       	add	r0, r18
      ea:	0f 0e       	add	r0, r31

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	d0 e4       	ldi	r29, 0x40	; 64
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_copy_data>:
      f8:	19 e0       	ldi	r17, 0x09	; 9
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	e2 eb       	ldi	r30, 0xB2	; 178
     100:	f6 e4       	ldi	r31, 0x46	; 70
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0b bf       	out	0x3b, r16	; 59
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
     108:	07 90       	elpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	a8 30       	cpi	r26, 0x08	; 8
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
     112:	19 e0       	ldi	r17, 0x09	; 9
     114:	a8 e0       	ldi	r26, 0x08	; 8
     116:	b9 e0       	ldi	r27, 0x09	; 9
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	a0 35       	cpi	r26, 0x50	; 80
     11e:	b1 07       	cpc	r27, r17
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
     122:	0e 94 26 08 	call	0x104c	; 0x104c <main>
     126:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     12e:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     132:	8c e0       	ldi	r24, 0x0C	; 12
     134:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
     138:	08 95       	ret

0000013a <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
     13a:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     13c:	84 ea       	ldi	r24, 0xA4	; 164
     13e:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     142:	80 91 bc 00 	lds	r24, 0x00BC
     146:	87 ff       	sbrs	r24, 7
     148:	fc cf       	rjmp	.-8      	; 0x142 <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     14a:	80 91 b9 00 	lds	r24, 0x00B9
     14e:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     150:	88 30       	cpi	r24, 0x08	; 8
     152:	21 f0       	breq	.+8      	; 0x15c <i2c_start+0x22>
     154:	80 31       	cpi	r24, 0x10	; 16
     156:	11 f0       	breq	.+4      	; 0x15c <i2c_start+0x22>
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	08 95       	ret

	// send device address
	TWDR = address;
     15c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     160:	84 e8       	ldi	r24, 0x84	; 132
     162:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     166:	80 91 bc 00 	lds	r24, 0x00BC
     16a:	87 ff       	sbrs	r24, 7
     16c:	fc cf       	rjmp	.-8      	; 0x166 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     16e:	90 91 b9 00 	lds	r25, 0x00B9
     172:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     174:	98 31       	cpi	r25, 0x18	; 24
     176:	11 f4       	brne	.+4      	; 0x17c <i2c_start+0x42>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	08 95       	ret
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 34       	cpi	r25, 0x40	; 64
     180:	09 f0       	breq	.+2      	; 0x184 <i2c_start+0x4a>
     182:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
     184:	08 95       	ret

00000186 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     186:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     188:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     18a:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     18c:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     18e:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     192:	80 91 bc 00 	lds	r24, 0x00BC
     196:	87 ff       	sbrs	r24, 7
     198:	fc cf       	rjmp	.-8      	; 0x192 <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     19a:	80 91 b9 00 	lds	r24, 0x00B9
     19e:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     1a0:	88 30       	cpi	r24, 0x08	; 8
     1a2:	11 f0       	breq	.+4      	; 0x1a8 <i2c_start_wait+0x22>
     1a4:	80 31       	cpi	r24, 0x10	; 16
     1a6:	99 f7       	brne	.-26     	; 0x18e <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
     1a8:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
     1ac:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     1b0:	80 91 bc 00 	lds	r24, 0x00BC
     1b4:	87 ff       	sbrs	r24, 7
     1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     1b8:	80 91 b9 00 	lds	r24, 0x00B9
     1bc:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     1be:	80 32       	cpi	r24, 0x20	; 32
     1c0:	11 f0       	breq	.+4      	; 0x1c6 <i2c_start_wait+0x40>
     1c2:	88 35       	cpi	r24, 0x58	; 88
     1c4:	39 f4       	brne	.+14     	; 0x1d4 <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1c6:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     1ca:	80 91 bc 00 	lds	r24, 0x00BC
     1ce:	84 fd       	sbrc	r24, 4
     1d0:	fc cf       	rjmp	.-8      	; 0x1ca <i2c_start_wait+0x44>
     1d2:	dd cf       	rjmp	.-70     	; 0x18e <i2c_start_wait+0x8>
     1d4:	08 95       	ret

000001d6 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     1d6:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>

}/* i2c_rep_start */
     1da:	08 95       	ret

000001dc <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1dc:	84 e9       	ldi	r24, 0x94	; 148
     1de:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     1e2:	80 91 bc 00 	lds	r24, 0x00BC
     1e6:	84 fd       	sbrc	r24, 4
     1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <i2c_stop+0x6>

}/* i2c_stop */
     1ea:	08 95       	ret

000001ec <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     1ec:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     1f0:	84 e8       	ldi	r24, 0x84	; 132
     1f2:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     1f6:	80 91 bc 00 	lds	r24, 0x00BC
     1fa:	87 ff       	sbrs	r24, 7
     1fc:	fc cf       	rjmp	.-8      	; 0x1f6 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     1fe:	80 91 b9 00 	lds	r24, 0x00B9
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	88 7f       	andi	r24, 0xF8	; 248
     206:	88 32       	cpi	r24, 0x28	; 40
     208:	09 f0       	breq	.+2      	; 0x20c <i2c_write+0x20>
     20a:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     20c:	89 2f       	mov	r24, r25
     20e:	08 95       	ret

00000210 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     210:	84 ec       	ldi	r24, 0xC4	; 196
     212:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     216:	80 91 bc 00 	lds	r24, 0x00BC
     21a:	87 ff       	sbrs	r24, 7
     21c:	fc cf       	rjmp	.-8      	; 0x216 <i2c_readAck+0x6>

    return TWDR;
     21e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
     222:	08 95       	ret

00000224 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     224:	84 e8       	ldi	r24, 0x84	; 132
     226:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     22a:	80 91 bc 00 	lds	r24, 0x00BC
     22e:	87 ff       	sbrs	r24, 7
     230:	fc cf       	rjmp	.-8      	; 0x22a <i2c_readNak+0x6>
	
    return TWDR;
     232:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     236:	08 95       	ret

00000238 <is_digital_input_high>:

// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
// the pin.
static inline unsigned char is_digital_input_high(unsigned char pin)
{
     238:	48 2f       	mov	r20, r24
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     23a:	88 30       	cpi	r24, 0x08	; 8
     23c:	58 f4       	brcc	.+22     	; 0x254 <is_digital_input_high+0x1c>
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	02 c0       	rjmp	.+4      	; 0x248 <is_digital_input_high+0x10>
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	4a 95       	dec	r20
     24a:	e2 f7       	brpl	.-8      	; 0x244 <is_digital_input_high+0xc>
     24c:	98 2f       	mov	r25, r24
     24e:	e9 e2       	ldi	r30, 0x29	; 41
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	36 c0       	rjmp	.+108    	; 0x2c0 <is_digital_input_high+0x88>
	}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     254:	80 31       	cpi	r24, 0x10	; 16
     256:	78 f4       	brcc	.+30     	; 0x276 <is_digital_input_high+0x3e>
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
     258:	28 2f       	mov	r18, r24
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	28 50       	subi	r18, 0x08	; 8
     25e:	30 40       	sbci	r19, 0x00	; 0
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	02 c0       	rjmp	.+4      	; 0x26a <is_digital_input_high+0x32>
     266:	88 0f       	add	r24, r24
     268:	99 1f       	adc	r25, r25
     26a:	2a 95       	dec	r18
     26c:	e2 f7       	brpl	.-8      	; 0x266 <is_digital_input_high+0x2e>
     26e:	98 2f       	mov	r25, r24
     270:	e3 e2       	ldi	r30, 0x23	; 35
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	25 c0       	rjmp	.+74     	; 0x2c0 <is_digital_input_high+0x88>
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     276:	88 31       	cpi	r24, 0x18	; 24
     278:	78 f4       	brcc	.+30     	; 0x298 <is_digital_input_high+0x60>
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
     27a:	28 2f       	mov	r18, r24
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	20 51       	subi	r18, 0x10	; 16
     280:	30 40       	sbci	r19, 0x00	; 0
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	02 c0       	rjmp	.+4      	; 0x28c <is_digital_input_high+0x54>
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	2a 95       	dec	r18
     28e:	e2 f7       	brpl	.-8      	; 0x288 <is_digital_input_high+0x50>
     290:	98 2f       	mov	r25, r24
     292:	e6 e2       	ldi	r30, 0x26	; 38
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	14 c0       	rjmp	.+40     	; 0x2c0 <is_digital_input_high+0x88>
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     298:	80 32       	cpi	r24, 0x20	; 32
     29a:	20 f0       	brcs	.+8      	; 0x2a4 <is_digital_input_high+0x6c>
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	e0 e0       	ldi	r30, 0x00	; 0
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	0e c0       	rjmp	.+28     	; 0x2c0 <is_digital_input_high+0x88>
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
		io->bitmask = 1 << (31 - pin);
     2a4:	2f e1       	ldi	r18, 0x1F	; 31
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	28 1b       	sub	r18, r24
     2aa:	31 09       	sbc	r19, r1
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <is_digital_input_high+0x7e>
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	2a 95       	dec	r18
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <is_digital_input_high+0x7a>
     2ba:	98 2f       	mov	r25, r24
     2bc:	e0 e2       	ldi	r30, 0x20	; 32
     2be:	f0 e0       	ldi	r31, 0x00	; 0

// low-level method for reading the value of the PIN register for an pin or set of pins
// described by an IOStruct pointer.
static inline unsigned char get_digital_input_value(struct IOStruct* ioPin)
{
	return *(ioPin->pinRegister) & ioPin->bitmask;
     2c0:	80 81       	ld	r24, Z
static inline unsigned char is_digital_input_high(unsigned char pin)
{
	struct IOStruct registers;
	get_io_registers(&registers, pin);
	return get_digital_input_value(&registers);
}
     2c2:	89 23       	and	r24, r25
     2c4:	08 95       	ret

000002c6 <brush1_action>:
			break;
		//*********************************************
	}
}

void brush1_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     2c6:	0f 93       	push	r16
     2c8:	1f 93       	push	r17
     2ca:	f9 01       	movw	r30, r18
     2cc:	d8 01       	movw	r26, r16
	switch(state){
     2ce:	8c 30       	cpi	r24, 0x0C	; 12
     2d0:	91 05       	cpc	r25, r1
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <brush1_action+0x10>
     2d4:	75 c0       	rjmp	.+234    	; 0x3c0 <brush1_action+0xfa>
     2d6:	8d 30       	cpi	r24, 0x0D	; 13
     2d8:	91 05       	cpc	r25, r1
     2da:	94 f4       	brge	.+36     	; 0x300 <brush1_action+0x3a>
     2dc:	89 30       	cpi	r24, 0x09	; 9
     2de:	91 05       	cpc	r25, r1
     2e0:	71 f1       	breq	.+92     	; 0x33e <brush1_action+0x78>
     2e2:	8a 30       	cpi	r24, 0x0A	; 10
     2e4:	91 05       	cpc	r25, r1
     2e6:	24 f4       	brge	.+8      	; 0x2f0 <brush1_action+0x2a>
     2e8:	08 97       	sbiw	r24, 0x08	; 8
     2ea:	09 f0       	breq	.+2      	; 0x2ee <brush1_action+0x28>
     2ec:	de c0       	rjmp	.+444    	; 0x4aa <brush1_action+0x1e4>
     2ee:	1f c0       	rjmp	.+62     	; 0x32e <brush1_action+0x68>
     2f0:	8a 30       	cpi	r24, 0x0A	; 10
     2f2:	91 05       	cpc	r25, r1
     2f4:	09 f4       	brne	.+2      	; 0x2f8 <brush1_action+0x32>
     2f6:	45 c0       	rjmp	.+138    	; 0x382 <brush1_action+0xbc>
     2f8:	0b 97       	sbiw	r24, 0x0b	; 11
     2fa:	09 f0       	breq	.+2      	; 0x2fe <brush1_action+0x38>
     2fc:	d6 c0       	rjmp	.+428    	; 0x4aa <brush1_action+0x1e4>
     2fe:	53 c0       	rjmp	.+166    	; 0x3a6 <brush1_action+0xe0>
     300:	8f 30       	cpi	r24, 0x0F	; 15
     302:	91 05       	cpc	r25, r1
     304:	09 f4       	brne	.+2      	; 0x308 <brush1_action+0x42>
     306:	91 c0       	rjmp	.+290    	; 0x42a <brush1_action+0x164>
     308:	80 31       	cpi	r24, 0x10	; 16
     30a:	91 05       	cpc	r25, r1
     30c:	44 f4       	brge	.+16     	; 0x31e <brush1_action+0x58>
     30e:	8d 30       	cpi	r24, 0x0D	; 13
     310:	91 05       	cpc	r25, r1
     312:	09 f4       	brne	.+2      	; 0x316 <brush1_action+0x50>
     314:	65 c0       	rjmp	.+202    	; 0x3e0 <brush1_action+0x11a>
     316:	0e 97       	sbiw	r24, 0x0e	; 14
     318:	09 f0       	breq	.+2      	; 0x31c <brush1_action+0x56>
     31a:	c7 c0       	rjmp	.+398    	; 0x4aa <brush1_action+0x1e4>
     31c:	74 c0       	rjmp	.+232    	; 0x406 <brush1_action+0x140>
     31e:	80 31       	cpi	r24, 0x10	; 16
     320:	91 05       	cpc	r25, r1
     322:	09 f4       	brne	.+2      	; 0x326 <brush1_action+0x60>
     324:	98 c0       	rjmp	.+304    	; 0x456 <brush1_action+0x190>
     326:	4b 97       	sbiw	r24, 0x1b	; 27
     328:	09 f0       	breq	.+2      	; 0x32c <brush1_action+0x66>
     32a:	bf c0       	rjmp	.+382    	; 0x4aa <brush1_action+0x1e4>
     32c:	ab c0       	rjmp	.+342    	; 0x484 <brush1_action+0x1be>
		case MOVEC1:  //state 8   move to first cleaning stateion
		
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // move fixture to brush1 center   
     32e:	80 91 45 09 	lds	r24, 0x0945
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     332:	80 63       	ori	r24, 0x30	; 48
     334:	80 93 45 09 	sts	0x0945, r24
			*pfixtureMotor = 1;
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	3e c0       	rjmp	.+124    	; 0x3ba <brush1_action+0xf4>
			break;
			
		case B1SET1:    //state 9
		
			*pfixtureMotor = 0;				//stop fixture
     33e:	11 82       	std	Z+1, r1	; 0x01
     340:	10 82       	st	Z, r1
			u_outputByte0.bits_in_outputByte0.brush1Raise = 1;		// turn off raise brush1(if on)
     342:	80 91 44 09 	lds	r24, 0x0944
     346:	80 62       	ori	r24, 0x20	; 32
			u_outputByte0.bits_in_outputByte0.brush1Lower = 0;		 //force brush low
     348:	8f 7b       	andi	r24, 0xBF	; 191
     34a:	80 93 44 09 	sts	0x0944, r24
			u_outputByte1.bits_in_outputByte1.brush1Pump = 1;		//Pump on to wet brush
     34e:	80 91 42 09 	lds	r24, 0x0942
     352:	80 61       	ori	r24, 0x10	; 16
     354:	80 93 42 09 	sts	0x0942, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;		 // set brush 1 direction ccw (1)
     358:	80 91 45 09 	lds	r24, 0x0945
     35c:	80 68       	ori	r24, 0x80	; 128
     35e:	80 93 45 09 	sts	0x0945, r24
			u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1; // set the brush motor current up
     362:	80 91 41 09 	lds	r24, 0x0941
     366:	81 60       	ori	r24, 0x01	; 1
     368:	80 93 41 09 	sts	0x0941, r24
			delayTimeMicroSeconds = 4000;   //  slow down the brush for wetting utputByte0.bits_in_outputByte0.brush1Lower = 1;
     36c:	80 ea       	ldi	r24, 0xA0	; 160
     36e:	9f e0       	ldi	r25, 0x0F	; 15
     370:	90 93 12 04 	sts	0x0412, r25
     374:	80 93 11 04 	sts	0x0411, r24
			*pbrush1Motor = 1;										// turn on brush motor
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	8d 93       	st	X+, r24
     37e:	9c 93       	st	X, r25
     380:	94 c0       	rjmp	.+296    	; 0x4aa <brush1_action+0x1e4>
			break;
			
		case B1START1: //state 10
		
			u_outputByte1.bits_in_outputByte1.brush1Pump = 0;	 // turn off the pump
     382:	80 91 42 09 	lds	r24, 0x0942
     386:	8f 7e       	andi	r24, 0xEF	; 239
     388:	80 93 42 09 	sts	0x0942, r24
			*pbrush1Motor = 0;								     // stop the brush motor	
     38c:	1d 92       	st	X+, r1
     38e:	1c 92       	st	X, r1
			delayTimeMicroSeconds = 800; // speed up brush and fixture
     390:	80 e2       	ldi	r24, 0x20	; 32
     392:	93 e0       	ldi	r25, 0x03	; 3
     394:	90 93 12 04 	sts	0x0412, r25
     398:	80 93 11 04 	sts	0x0411, r24
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;   //release brush low
     39c:	80 91 44 09 	lds	r24, 0x0944
     3a0:	80 64       	ori	r24, 0x40	; 64
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;    // raise the brush against the glass
     3a2:	8f 7d       	andi	r24, 0xDF	; 223
     3a4:	15 c0       	rjmp	.+42     	; 0x3d0 <brush1_action+0x10a>
			break;
			
		case CLEAN1_1:    //state 11
	
			 //delayTimeMicroSeconds = 800; // speed up brush and fixture
			 u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     3a6:	80 91 45 09 	lds	r24, 0x0945
     3aa:	80 62       	ori	r24, 0x20	; 32
			 u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // fixture moves backward
     3ac:	8f 7e       	andi	r24, 0xEF	; 239
     3ae:	80 93 45 09 	sts	0x0945, r24
			*pbrush1Motor = 1;            //turn on the brush for cleaning
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	8d 93       	st	X+, r24
     3b8:	9c 93       	st	X, r25
			*pfixtureMotor = 1;			  //start fixture moving
     3ba:	91 83       	std	Z+1, r25	; 0x01
     3bc:	80 83       	st	Z, r24
     3be:	75 c0       	rjmp	.+234    	; 0x4aa <brush1_action+0x1e4>
			break;
			
		case B1STOP1:      // state 12
			*pfixtureMotor = 0;              // stop fixture
     3c0:	11 82       	std	Z+1, r1	; 0x01
     3c2:	10 82       	st	Z, r1
		    //delayTimeMicroSeconds = 4000;   //  slow down the brush for wetting 
			*pbrush1Motor = 0;              // stop	brush motor
     3c4:	1d 92       	st	X+, r1
     3c6:	1c 92       	st	X, r1
			u_outputByte0.bits_in_outputByte0.brush1Raise =1 ;       //turn off brush raise
     3c8:	80 91 44 09 	lds	r24, 0x0944
     3cc:	80 62       	ori	r24, 0x20	; 32
			u_outputByte0.bits_in_outputByte0.brush1Lower = 0;       //drive brush low
     3ce:	8f 7b       	andi	r24, 0xBF	; 191
     3d0:	80 93 44 09 	sts	0x0944, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;		 // set brush 1 direction CW (1)
     3d4:	80 91 45 09 	lds	r24, 0x0945
     3d8:	80 68       	ori	r24, 0x80	; 128
     3da:	80 93 45 09 	sts	0x0945, r24
     3de:	65 c0       	rjmp	.+202    	; 0x4aa <brush1_action+0x1e4>
			
			break;
		case CLEAN1_2:    //state 13
		
		    delayTimeMicroSeconds = 400; // speed up the brush
     3e0:	80 e9       	ldi	r24, 0x90	; 144
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	90 93 12 04 	sts	0x0412, r25
     3e8:	80 93 11 04 	sts	0x0411, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // fixture moves to center of brush1
     3ec:	80 91 45 09 	lds	r24, 0x0945
     3f0:	80 61       	ori	r24, 0x10	; 16
     3f2:	80 93 45 09 	sts	0x0945, r24
			*pfixtureMotor = 1;
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	91 83       	std	Z+1, r25	; 0x01
     3fc:	80 83       	st	Z, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     3fe:	80 91 45 09 	lds	r24, 0x0945
     402:	80 62       	ori	r24, 0x20	; 32
     404:	ea cf       	rjmp	.-44     	; 0x3da <brush1_action+0x114>
			break;
			
		case B1SET2:    //state 14
		
			*pfixtureMotor = 0;
     406:	11 82       	std	Z+1, r1	; 0x01
     408:	10 82       	st	Z, r1
			*pbrush1Motor = 1;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	8d 93       	st	X+, r24
     410:	9c 93       	st	X, r25
			
			delayTimeMicroSeconds = 4000;   //  slow down the brush for wetting 
     412:	80 ea       	ldi	r24, 0xA0	; 160
     414:	9f e0       	ldi	r25, 0x0F	; 15
     416:	90 93 12 04 	sts	0x0412, r25
     41a:	80 93 11 04 	sts	0x0411, r24
			u_outputByte1.bits_in_outputByte1.brush1Pump = 1;	//pump on to wet brush
     41e:	80 91 42 09 	lds	r24, 0x0942
     422:	80 61       	ori	r24, 0x10	; 16
     424:	80 93 42 09 	sts	0x0942, r24
     428:	40 c0       	rjmp	.+128    	; 0x4aa <brush1_action+0x1e4>
		
			break;
		case B1START2:   //state 15
		
			*pfixtureMotor = 0;
     42a:	11 82       	std	Z+1, r1	; 0x01
     42c:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.brush1Pump = 0;	//Pump off
     42e:	80 91 42 09 	lds	r24, 0x0942
     432:	8f 7e       	andi	r24, 0xEF	; 239
     434:	80 93 42 09 	sts	0x0942, r24
		    u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  //brush1 dir CCW(1)
     438:	80 91 45 09 	lds	r24, 0x0945
     43c:	8f 77       	andi	r24, 0x7F	; 127
     43e:	80 93 45 09 	sts	0x0945, r24
			*pbrush1Motor = 1;            //turnup current on brush 1 motor
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	8d 93       	st	X+, r24
     448:	9c 93       	st	X, r25
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;  
     44a:	80 91 44 09 	lds	r24, 0x0944
     44e:	80 64       	ori	r24, 0x40	; 64
     450:	80 93 44 09 	sts	0x0944, r24
     454:	2a c0       	rjmp	.+84     	; 0x4aa <brush1_action+0x1e4>
			//u_outputByte0.bits_in_outputByte0.brush1Raise = 0;  
			break;
			
		case CLEAN1_3:    // state 16
			delayTimeMicroSeconds = 800; // speed up the motors
			*pbrush1Motor = 1;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	8d 93       	st	X+, r24
     45c:	9c 93       	st	X, r25
			*pfixtureMotor = 1;
     45e:	91 83       	std	Z+1, r25	; 0x01
     460:	80 83       	st	Z, r24
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;  // raise brush
     462:	80 91 44 09 	lds	r24, 0x0944
     466:	8f 7d       	andi	r24, 0xDF	; 223
     468:	80 93 44 09 	sts	0x0944, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     46c:	80 91 45 09 	lds	r24, 0x0945
     470:	80 62       	ori	r24, 0x20	; 32
     472:	80 93 45 09 	sts	0x0945, r24
			delayTimeMicroSeconds = 400; // speed up the motors
     476:	80 e9       	ldi	r24, 0x90	; 144
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	90 93 12 04 	sts	0x0412, r25
     47e:	80 93 11 04 	sts	0x0411, r24
     482:	13 c0       	rjmp	.+38     	; 0x4aa <brush1_action+0x1e4>
			break;
			
		case B2STOP2:    //state  17
			*pbrush1Motor = 0;
     484:	1d 92       	st	X+, r1
     486:	1c 92       	st	X, r1
			*pfixtureMotor = 0;
     488:	11 82       	std	Z+1, r1	; 0x01
     48a:	10 82       	st	Z, r1
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0; // turn off raise
     48c:	80 91 44 09 	lds	r24, 0x0944
     490:	8f 77       	andi	r24, 0x7F	; 127
     492:	80 93 44 09 	sts	0x0944, r24
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;  // turn on lower
     496:	80 91 42 09 	lds	r24, 0x0942
     49a:	81 60       	ori	r24, 0x01	; 1
     49c:	80 93 42 09 	sts	0x0942, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;  //idle brush motor
     4a0:	80 91 41 09 	lds	r24, 0x0941
     4a4:	87 7f       	andi	r24, 0xF7	; 247
     4a6:	80 93 41 09 	sts	0x0941, r24
					break;		
	}
}
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	08 95       	ret

000004b0 <brush2_action>:

void brush2_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	d9 01       	movw	r26, r18
     4b6:	f7 01       	movw	r30, r14
	switch(state){
     4b8:	87 31       	cpi	r24, 0x17	; 23
     4ba:	91 05       	cpc	r25, r1
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <brush2_action+0x10>
     4be:	8f c0       	rjmp	.+286    	; 0x5de <brush2_action+0x12e>
     4c0:	88 31       	cpi	r24, 0x18	; 24
     4c2:	91 05       	cpc	r25, r1
     4c4:	b4 f4       	brge	.+44     	; 0x4f2 <brush2_action+0x42>
     4c6:	84 31       	cpi	r24, 0x14	; 20
     4c8:	91 05       	cpc	r25, r1
     4ca:	09 f4       	brne	.+2      	; 0x4ce <brush2_action+0x1e>
     4cc:	60 c0       	rjmp	.+192    	; 0x58e <brush2_action+0xde>
     4ce:	85 31       	cpi	r24, 0x15	; 21
     4d0:	91 05       	cpc	r25, r1
     4d2:	3c f4       	brge	.+14     	; 0x4e2 <brush2_action+0x32>
     4d4:	82 31       	cpi	r24, 0x12	; 18
     4d6:	91 05       	cpc	r25, r1
     4d8:	11 f1       	breq	.+68     	; 0x51e <brush2_action+0x6e>
     4da:	43 97       	sbiw	r24, 0x13	; 19
     4dc:	09 f0       	breq	.+2      	; 0x4e0 <brush2_action+0x30>
     4de:	8d c0       	rjmp	.+282    	; 0x5fa <brush2_action+0x14a>
     4e0:	28 c0       	rjmp	.+80     	; 0x532 <brush2_action+0x82>
     4e2:	85 31       	cpi	r24, 0x15	; 21
     4e4:	91 05       	cpc	r25, r1
     4e6:	09 f4       	brne	.+2      	; 0x4ea <brush2_action+0x3a>
     4e8:	61 c0       	rjmp	.+194    	; 0x5ac <brush2_action+0xfc>
     4ea:	46 97       	sbiw	r24, 0x16	; 22
     4ec:	09 f0       	breq	.+2      	; 0x4f0 <brush2_action+0x40>
     4ee:	85 c0       	rjmp	.+266    	; 0x5fa <brush2_action+0x14a>
     4f0:	2f c0       	rjmp	.+94     	; 0x550 <brush2_action+0xa0>
     4f2:	8a 31       	cpi	r24, 0x1A	; 26
     4f4:	91 05       	cpc	r25, r1
     4f6:	09 f4       	brne	.+2      	; 0x4fa <brush2_action+0x4a>
     4f8:	59 c0       	rjmp	.+178    	; 0x5ac <brush2_action+0xfc>
     4fa:	8b 31       	cpi	r24, 0x1B	; 27
     4fc:	91 05       	cpc	r25, r1
     4fe:	3c f4       	brge	.+14     	; 0x50e <brush2_action+0x5e>
     500:	88 31       	cpi	r24, 0x18	; 24
     502:	91 05       	cpc	r25, r1
     504:	91 f1       	breq	.+100    	; 0x56a <brush2_action+0xba>
     506:	49 97       	sbiw	r24, 0x19	; 25
     508:	09 f0       	breq	.+2      	; 0x50c <brush2_action+0x5c>
     50a:	77 c0       	rjmp	.+238    	; 0x5fa <brush2_action+0x14a>
     50c:	39 c0       	rjmp	.+114    	; 0x580 <brush2_action+0xd0>
     50e:	8b 31       	cpi	r24, 0x1B	; 27
     510:	91 05       	cpc	r25, r1
     512:	09 f4       	brne	.+2      	; 0x516 <brush2_action+0x66>
     514:	50 c0       	rjmp	.+160    	; 0x5b6 <brush2_action+0x106>
     516:	4c 97       	sbiw	r24, 0x1c	; 28
     518:	09 f0       	breq	.+2      	; 0x51c <brush2_action+0x6c>
     51a:	6f c0       	rjmp	.+222    	; 0x5fa <brush2_action+0x14a>
     51c:	60 c0       	rjmp	.+192    	; 0x5de <brush2_action+0x12e>
		
		case MOVEC2:  // state 18
			delayTimeMicroSeconds = 400; // speed up to move fixture
     51e:	80 e9       	ldi	r24, 0x90	; 144
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	90 93 12 04 	sts	0x0412, r25
     526:	80 93 11 04 	sts	0x0411, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 ******* change dir here?? and further??
     52a:	80 91 45 09 	lds	r24, 0x0945
     52e:	8f 7e       	andi	r24, 0xEF	; 239
     530:	59 c0       	rjmp	.+178    	; 0x5e4 <brush2_action+0x134>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
			
		case B2SET1:  //state 19
			*pfixtureMotor = 0;
     532:	1d 92       	st	X+, r1
     534:	1c 92       	st	X, r1
			*pbrush2Motor = 1;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	91 83       	std	Z+1, r25	; 0x01
     53c:	80 83       	st	Z, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     53e:	80 91 45 09 	lds	r24, 0x0945
     542:	8f 7e       	andi	r24, 0xEF	; 239
     544:	80 93 45 09 	sts	0x0945, r24
			//u_outputByte1.bits_in_outputByte1.brush2Pump = 1;	//Pump control
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     548:	80 91 41 09 	lds	r24, 0x0941
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;  // ******* dir4 ******* 
     54c:	8c 60       	ori	r24, 0x0C	; 12
     54e:	44 c0       	rjmp	.+136    	; 0x5d8 <brush2_action+0x128>
			*pbrush2Motor = 1;
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
			
		case B2STOP1:   //state 22
			*pfixtureMotor = 0;
     550:	1d 92       	st	X+, r1
     552:	1c 92       	st	X, r1
			*pbrush2Motor = 0;
     554:	11 82       	std	Z+1, r1	; 0x01
     556:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;  //add brush2 wet here??
     558:	80 91 42 09 	lds	r24, 0x0942
     55c:	8e 7f       	andi	r24, 0xFE	; 254
     55e:	80 93 42 09 	sts	0x0942, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     562:	80 91 44 09 	lds	r24, 0x0944
     566:	80 68       	ori	r24, 0x80	; 128
     568:	1e c0       	rjmp	.+60     	; 0x5a6 <brush2_action+0xf6>
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
			
		case B2SET2:   // state 24
			*pfixtureMotor = 0;
     56a:	1d 92       	st	X+, r1
     56c:	1c 92       	st	X, r1
			*pbrush2Motor = 1;
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	91 83       	std	Z+1, r25	; 0x01
     574:	80 83       	st	Z, r24
			//u_outputByte1.bits_in_outputByte1.brush2Pump = 1;	//Pump control
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     576:	80 91 41 09 	lds	r24, 0x0941
     57a:	88 60       	ori	r24, 0x08	; 8
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     57c:	8b 7f       	andi	r24, 0xFB	; 251
     57e:	2c c0       	rjmp	.+88     	; 0x5d8 <brush2_action+0x128>
			break;
			
		case B2START2:   //State 25
			*pfixtureMotor = 0;
     580:	1d 92       	st	X+, r1
     582:	1c 92       	st	X, r1
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     584:	80 91 41 09 	lds	r24, 0x0941
     588:	8b 7f       	andi	r24, 0xFB	; 251
     58a:	80 93 41 09 	sts	0x0941, r24
			//u_outputByte1.bits_in_outputByte1.brush2Pump = 0;	//Pump control
			*pbrush2Motor = 1;
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	91 83       	std	Z+1, r25	; 0x01
     594:	80 83       	st	Z, r24
			u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     596:	80 91 42 09 	lds	r24, 0x0942
     59a:	81 60       	ori	r24, 0x01	; 1
     59c:	80 93 42 09 	sts	0x0942, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     5a0:	80 91 44 09 	lds	r24, 0x0944
     5a4:	8f 77       	andi	r24, 0x7F	; 127
     5a6:	80 93 44 09 	sts	0x0944, r24
     5aa:	27 c0       	rjmp	.+78     	; 0x5fa <brush2_action+0x14a>
			break;
			
		case CLEAN2_3:     // state 26
			*pbrush2Motor = 1;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	91 83       	std	Z+1, r25	; 0x01
     5b2:	80 83       	st	Z, r24
     5b4:	1b c0       	rjmp	.+54     	; 0x5ec <brush2_action+0x13c>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
			
		case B2STOP2:    // state 27
			*pbrush2Motor = 0;
     5b6:	11 82       	std	Z+1, r1	; 0x01
     5b8:	10 82       	st	Z, r1
			*pfixtureMotor = 0;
     5ba:	1d 92       	st	X+, r1
     5bc:	1c 92       	st	X, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     5be:	80 91 42 09 	lds	r24, 0x0942
     5c2:	8e 7f       	andi	r24, 0xFE	; 254
     5c4:	80 93 42 09 	sts	0x0942, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     5c8:	80 91 44 09 	lds	r24, 0x0944
     5cc:	80 68       	ori	r24, 0x80	; 128
     5ce:	80 93 44 09 	sts	0x0944, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     5d2:	80 91 41 09 	lds	r24, 0x0941
     5d6:	87 7f       	andi	r24, 0xF7	; 247
     5d8:	80 93 41 09 	sts	0x0941, r24
     5dc:	0e c0       	rjmp	.+28     	; 0x5fa <brush2_action+0x14a>
			break;
			
		case MOVED1:    // state 28
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     5de:	80 91 45 09 	lds	r24, 0x0945
     5e2:	80 61       	ori	r24, 0x10	; 16
     5e4:	80 93 45 09 	sts	0x0945, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	8d 93       	st	X+, r24
     5ee:	9c 93       	st	X, r25
     5f0:	80 91 45 09 	lds	r24, 0x0945
     5f4:	80 62       	ori	r24, 0x20	; 32
     5f6:	80 93 45 09 	sts	0x0945, r24
			break;
	}
}
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	08 95       	ret

00000600 <dry_action>:

void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	ea 01       	movw	r28, r20
     60a:	f9 01       	movw	r30, r18
     60c:	d6 01       	movw	r26, r12
	switch(state){
     60e:	80 32       	cpi	r24, 0x20	; 32
     610:	91 05       	cpc	r25, r1
     612:	09 f4       	brne	.+2      	; 0x616 <dry_action+0x16>
     614:	5e c0       	rjmp	.+188    	; 0x6d2 <dry_action+0xd2>
     616:	81 32       	cpi	r24, 0x21	; 33
     618:	91 05       	cpc	r25, r1
     61a:	54 f4       	brge	.+20     	; 0x630 <dry_action+0x30>
     61c:	8e 31       	cpi	r24, 0x1E	; 30
     61e:	91 05       	cpc	r25, r1
     620:	d9 f0       	breq	.+54     	; 0x658 <dry_action+0x58>
     622:	8f 31       	cpi	r24, 0x1F	; 31
     624:	91 05       	cpc	r25, r1
     626:	cc f5       	brge	.+114    	; 0x69a <dry_action+0x9a>
     628:	4d 97       	sbiw	r24, 0x1d	; 29
     62a:	09 f0       	breq	.+2      	; 0x62e <dry_action+0x2e>
     62c:	94 c0       	rjmp	.+296    	; 0x756 <dry_action+0x156>
     62e:	10 c0       	rjmp	.+32     	; 0x650 <dry_action+0x50>
     630:	82 32       	cpi	r24, 0x22	; 34
     632:	91 05       	cpc	r25, r1
     634:	09 f4       	brne	.+2      	; 0x638 <dry_action+0x38>
     636:	63 c0       	rjmp	.+198    	; 0x6fe <dry_action+0xfe>
     638:	82 32       	cpi	r24, 0x22	; 34
     63a:	91 05       	cpc	r25, r1
     63c:	0c f4       	brge	.+2      	; 0x640 <dry_action+0x40>
     63e:	58 c0       	rjmp	.+176    	; 0x6f0 <dry_action+0xf0>
     640:	83 32       	cpi	r24, 0x23	; 35
     642:	91 05       	cpc	r25, r1
     644:	09 f4       	brne	.+2      	; 0x648 <dry_action+0x48>
     646:	66 c0       	rjmp	.+204    	; 0x714 <dry_action+0x114>
     648:	84 97       	sbiw	r24, 0x24	; 36
     64a:	09 f0       	breq	.+2      	; 0x64e <dry_action+0x4e>
     64c:	84 c0       	rjmp	.+264    	; 0x756 <dry_action+0x156>
     64e:	69 c0       	rjmp	.+210    	; 0x722 <dry_action+0x122>
		
		case MOVED1EXTRA:    //state 29  ?
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     650:	80 91 45 09 	lds	r24, 0x0945
     654:	80 61       	ori	r24, 0x10	; 16
     656:	57 c0       	rjmp	.+174    	; 0x706 <dry_action+0x106>
			*pfixtureMotor = 1;
			break;
			
		case DRY:    // state 30   stop running paper towel advance
		
			u_outputByte1.bits_in_outputByte1.airKnife = 0;   // turn on air to dry
     658:	80 91 42 09 	lds	r24, 0x0942
     65c:	87 7f       	andi	r24, 0xF7	; 247
     65e:	80 93 42 09 	sts	0x0942, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     662:	80 91 45 09 	lds	r24, 0x0945
     666:	8f 7e       	andi	r24, 0xEF	; 239
     668:	80 93 45 09 	sts	0x0945, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	31 83       	std	Z+1, r19	; 0x01
     672:	20 83       	st	Z, r18
     674:	80 91 45 09 	lds	r24, 0x0945
     678:	80 62       	ori	r24, 0x20	; 32
     67a:	80 93 45 09 	sts	0x0945, r24
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
     67e:	80 91 41 09 	lds	r24, 0x0941
     682:	80 64       	ori	r24, 0x40	; 64
			u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     684:	8f 7d       	andi	r24, 0xDF	; 223
     686:	80 93 41 09 	sts	0x0941, r24
			u_outputByte1.bits_in_outputByte1.ptRaise = 0;   //raise the rollers
     68a:	80 91 42 09 	lds	r24, 0x0942
     68e:	8b 7f       	andi	r24, 0xFB	; 251
     690:	80 93 42 09 	sts	0x0942, r24
			*ppaperTowelMotor = 1;   //start advancing the paper
     694:	2d 93       	st	X+, r18
     696:	3c 93       	st	X, r19
     698:	5e c0       	rjmp	.+188    	; 0x756 <dry_action+0x156>
			break;
			
		case DSTOP:   // state 31 turn off drying --plate is past
		
			u_outputByte1.bits_in_outputByte1.airKnife = 1;
     69a:	80 91 42 09 	lds	r24, 0x0942
     69e:	88 60       	ori	r24, 0x08	; 8
     6a0:	80 93 42 09 	sts	0x0942, r24
			*pfixtureMotor = 1;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	91 83       	std	Z+1, r25	; 0x01
     6aa:	80 83       	st	Z, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     6ac:	80 91 45 09 	lds	r24, 0x0945
     6b0:	80 62       	ori	r24, 0x20	; 32
     6b2:	80 93 45 09 	sts	0x0945, r24
			*ppaperTowelMotor = 0;
     6b6:	1d 92       	st	X+, r1
     6b8:	1c 92       	st	X, r1
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
     6ba:	80 91 41 09 	lds	r24, 0x0941
     6be:	8f 7b       	andi	r24, 0xBF	; 191
     6c0:	80 93 41 09 	sts	0x0941, r24
			u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     6c4:	80 91 42 09 	lds	r24, 0x0942
     6c8:	84 60       	ori	r24, 0x04	; 4
			u_outputByte1.bits_in_outputByte1.ptLower = 0;
     6ca:	8d 7f       	andi	r24, 0xFD	; 253
     6cc:	80 93 42 09 	sts	0x0942, r24
     6d0:	42 c0       	rjmp	.+132    	; 0x756 <dry_action+0x156>
			break;
			
		case FIXL2EXTRA:  //state 32
		
			u_outputByte1.bits_in_outputByte1.ptLower = 1;
     6d2:	80 91 42 09 	lds	r24, 0x0942
     6d6:	82 60       	ori	r24, 0x02	; 2
     6d8:	80 93 42 09 	sts	0x0942, r24
			*pfixtureMotor = 1;
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	91 83       	std	Z+1, r25	; 0x01
     6e2:	80 83       	st	Z, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     6e4:	80 91 45 09 	lds	r24, 0x0945
     6e8:	80 62       	ori	r24, 0x20	; 32
     6ea:	80 93 45 09 	sts	0x0945, r24
     6ee:	33 c0       	rjmp	.+102    	; 0x756 <dry_action+0x156>
			break;
			
		case RAISEL2:  //state 33   raise fixture lifts
		
			*pfixtureMotor = 0;
     6f0:	11 82       	std	Z+1, r1	; 0x01
     6f2:	10 82       	st	Z, r1
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;   //make sure pistons are free
     6f4:	80 91 44 09 	lds	r24, 0x0944
     6f8:	80 61       	ori	r24, 0x10	; 16
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;    // raise fixture
     6fa:	87 7f       	andi	r24, 0xF7	; 247
     6fc:	0f c0       	rjmp	.+30     	; 0x71c <dry_action+0x11c>

			break;
			
		case FIXH:   // state 34  home fixture
		
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     6fe:	80 91 45 09 	lds	r24, 0x0945
     702:	8f 7e       	andi	r24, 0xEF	; 239
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     704:	84 62       	ori	r24, 0x24	; 36
     706:	80 93 45 09 	sts	0x0945, r24
			*pfixtureMotor = 1; 
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	91 83       	std	Z+1, r25	; 0x01
     710:	80 83       	st	Z, r24
     712:	21 c0       	rjmp	.+66     	; 0x756 <dry_action+0x156>
			break;
			
		case LOWERL3:   // state 35
		
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1; // let pistons down again
     714:	80 91 44 09 	lds	r24, 0x0944
     718:	88 60       	ori	r24, 0x08	; 8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;   //drive pistons down
     71a:	8f 7e       	andi	r24, 0xEF	; 239
     71c:	80 93 44 09 	sts	0x0944, r24
     720:	1a c0       	rjmp	.+52     	; 0x756 <dry_action+0x156>
			
			break;
			
		case UNLOAD:     // state 36
		
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     722:	80 91 44 09 	lds	r24, 0x0944
     726:	88 60       	ori	r24, 0x08	; 8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     728:	8f 7e       	andi	r24, 0xEF	; 239
     72a:	80 93 44 09 	sts	0x0944, r24
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 0){
     72e:	80 91 40 09 	lds	r24, 0x0940
     732:	81 fd       	sbrc	r24, 1
     734:	07 c0       	rjmp	.+14     	; 0x744 <dry_action+0x144>
				u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     736:	80 91 45 09 	lds	r24, 0x0945
     73a:	8f 7d       	andi	r24, 0xDF	; 223
     73c:	80 93 45 09 	sts	0x0945, r24
				*pfixtureMotor = 0;
     740:	11 82       	std	Z+1, r1	; 0x01
     742:	10 82       	st	Z, r1
			}
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     744:	80 91 45 09 	lds	r24, 0x0945
     748:	8d 7f       	andi	r24, 0xFD	; 253
     74a:	80 93 45 09 	sts	0x0945, r24
			*pplateLoadMotor = 1;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	99 83       	std	Y+1, r25	; 0x01
     754:	88 83       	st	Y, r24
			break;
	}
}
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	08 95       	ret

00000760 <button_debounce>:

bool button_debounce(int counter, int *pstateButton)
{
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	8c 01       	movw	r16, r24
     76a:	eb 01       	movw	r28, r22
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && is_digital_input_high(IO_D0)){
     76c:	88 81       	ld	r24, Y
     76e:	99 81       	ldd	r25, Y+1	; 0x01
     770:	89 2b       	or	r24, r25
     772:	69 f4       	brne	.+26     	; 0x78e <button_debounce+0x2e>
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
     77a:	88 23       	and	r24, r24
     77c:	41 f0       	breq	.+16     	; 0x78e <button_debounce+0x2e>
		counterRefPush = counter;
     77e:	10 93 0b 09 	sts	0x090B, r17
     782:	00 93 0a 09 	sts	0x090A, r16
		*pstateButton = PRESSED;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	99 83       	std	Y+1, r25	; 0x01
     78c:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     78e:	88 81       	ld	r24, Y
     790:	99 81       	ldd	r25, Y+1	; 0x01
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	39 f5       	brne	.+78     	; 0x7e4 <button_debounce+0x84>
		if(counter - counterRefPush > 15*1000/delayTimeMicroSeconds){
     796:	80 91 0a 09 	lds	r24, 0x090A
     79a:	90 91 0b 09 	lds	r25, 0x090B
     79e:	98 01       	movw	r18, r16
     7a0:	28 1b       	sub	r18, r24
     7a2:	39 0b       	sbc	r19, r25
     7a4:	60 91 11 04 	lds	r22, 0x0411
     7a8:	70 91 12 04 	lds	r23, 0x0412
     7ac:	88 e9       	ldi	r24, 0x98	; 152
     7ae:	9a e3       	ldi	r25, 0x3A	; 58
     7b0:	0e 94 32 21 	call	0x4264	; 0x4264 <__divmodhi4>
     7b4:	62 17       	cp	r22, r18
     7b6:	73 07       	cpc	r23, r19
     7b8:	74 f4       	brge	.+28     	; 0x7d6 <button_debounce+0x76>
			if(!is_digital_input_high(IO_D0)){
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
     7c0:	88 23       	and	r24, r24
     7c2:	81 f4       	brne	.+32     	; 0x7e4 <button_debounce+0x84>
				counterRefRel = counter;
     7c4:	10 93 09 09 	sts	0x0909, r17
     7c8:	00 93 08 09 	sts	0x0908, r16
				*pstateButton = RELEASED;
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	99 83       	std	Y+1, r25	; 0x01
     7d2:	88 83       	st	Y, r24
     7d4:	07 c0       	rjmp	.+14     	; 0x7e4 <button_debounce+0x84>
			}
		}
		else if(!is_digital_input_high(IO_D0)){
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
     7dc:	88 23       	and	r24, r24
     7de:	11 f4       	brne	.+4      	; 0x7e4 <button_debounce+0x84>
			*pstateButton = NONE;
     7e0:	19 82       	std	Y+1, r1	; 0x01
     7e2:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     7e4:	88 81       	ld	r24, Y
     7e6:	99 81       	ldd	r25, Y+1	; 0x01
     7e8:	02 97       	sbiw	r24, 0x02	; 2
     7ea:	19 f5       	brne	.+70     	; 0x832 <button_debounce+0xd2>
		if(is_digital_input_high(IO_D0)){
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
     7f2:	88 23       	and	r24, r24
     7f4:	49 f0       	breq	.+18     	; 0x808 <button_debounce+0xa8>
			*pstateButton = PRESSED;
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	99 83       	std	Y+1, r25	; 0x01
     7fc:	88 83       	st	Y, r24
			counterRefPush = counter;
     7fe:	10 93 0b 09 	sts	0x090B, r17
     802:	00 93 0a 09 	sts	0x090A, r16
     806:	15 c0       	rjmp	.+42     	; 0x832 <button_debounce+0xd2>
		}
		else if(counter - counterRefRel > 15*1000/delayTimeMicroSeconds){
     808:	80 91 08 09 	lds	r24, 0x0908
     80c:	90 91 09 09 	lds	r25, 0x0909
     810:	08 1b       	sub	r16, r24
     812:	19 0b       	sbc	r17, r25
     814:	60 91 11 04 	lds	r22, 0x0411
     818:	70 91 12 04 	lds	r23, 0x0412
     81c:	88 e9       	ldi	r24, 0x98	; 152
     81e:	9a e3       	ldi	r25, 0x3A	; 58
     820:	0e 94 32 21 	call	0x4264	; 0x4264 <__divmodhi4>
     824:	60 17       	cp	r22, r16
     826:	71 07       	cpc	r23, r17
     828:	24 f4       	brge	.+8      	; 0x832 <button_debounce+0xd2>
			*pstateButton = NONE;
     82a:	19 82       	std	Y+1, r1	; 0x01
     82c:	18 82       	st	Y, r1
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	01 c0       	rjmp	.+2      	; 0x834 <button_debounce+0xd4>
			return true;
     832:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	08 95       	ret

0000083e <init_trans>:

bool init_trans(int state, bool buttonTriggered, int counter, int counterRef){
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	fc 01       	movw	r30, r24
     844:	86 2f       	mov	r24, r22
     846:	da 01       	movw	r26, r20
     848:	b9 01       	movw	r22, r18
	return((state == INIT && buttonTriggered)||
     84a:	30 97       	sbiw	r30, 0x00	; 0
     84c:	19 f4       	brne	.+6      	; 0x854 <init_trans+0x16>
     84e:	88 23       	and	r24, r24
     850:	81 f1       	breq	.+96     	; 0x8b2 <init_trans+0x74>
     852:	77 c0       	rjmp	.+238    	; 0x942 <init_trans+0x104>
     854:	e1 30       	cpi	r30, 0x01	; 1
     856:	f1 05       	cpc	r31, r1
     858:	29 f4       	brne	.+10     	; 0x864 <init_trans+0x26>
     85a:	80 91 40 09 	lds	r24, 0x0940
     85e:	80 fd       	sbrc	r24, 0
     860:	30 c0       	rjmp	.+96     	; 0x8c2 <init_trans+0x84>
     862:	6f c0       	rjmp	.+222    	; 0x942 <init_trans+0x104>
     864:	e2 30       	cpi	r30, 0x02	; 2
     866:	f1 05       	cpc	r31, r1
     868:	b1 f4       	brne	.+44     	; 0x896 <init_trans+0x58>
     86a:	42 1b       	sub	r20, r18
     86c:	53 0b       	sbc	r21, r19
     86e:	20 91 1d 04 	lds	r18, 0x041D
     872:	30 91 1e 04 	lds	r19, 0x041E
     876:	80 91 07 04 	lds	r24, 0x0407
     87a:	90 91 08 04 	lds	r25, 0x0408
     87e:	ec 01       	movw	r28, r24
     880:	2c 9f       	mul	r18, r28
     882:	c0 01       	movw	r24, r0
     884:	2d 9f       	mul	r18, r29
     886:	90 0d       	add	r25, r0
     888:	3c 9f       	mul	r19, r28
     88a:	90 0d       	add	r25, r0
     88c:	11 24       	eor	r1, r1
     88e:	84 17       	cp	r24, r20
     890:	95 07       	cpc	r25, r21
     892:	ac f5       	brge	.+106    	; 0x8fe <init_trans+0xc0>
     894:	56 c0       	rjmp	.+172    	; 0x942 <init_trans+0x104>
     896:	e3 30       	cpi	r30, 0x03	; 3
     898:	f1 05       	cpc	r31, r1
     89a:	59 f4       	brne	.+22     	; 0x8b2 <init_trans+0x74>
     89c:	9a 01       	movw	r18, r20
     89e:	26 1b       	sub	r18, r22
     8a0:	37 0b       	sbc	r19, r23
     8a2:	80 91 f7 03 	lds	r24, 0x03F7
     8a6:	90 91 f8 03 	lds	r25, 0x03F8
     8aa:	82 17       	cp	r24, r18
     8ac:	93 07       	cpc	r25, r19
     8ae:	ac f5       	brge	.+106    	; 0x91a <init_trans+0xdc>
     8b0:	48 c0       	rjmp	.+144    	; 0x942 <init_trans+0x104>
     8b2:	e4 30       	cpi	r30, 0x04	; 4
     8b4:	f1 05       	cpc	r31, r1
     8b6:	29 f4       	brne	.+10     	; 0x8c2 <init_trans+0x84>
     8b8:	80 91 40 09 	lds	r24, 0x0940
     8bc:	86 95       	lsr	r24
     8be:	86 95       	lsr	r24
     8c0:	26 c0       	rjmp	.+76     	; 0x90e <init_trans+0xd0>
     8c2:	e5 30       	cpi	r30, 0x05	; 5
     8c4:	f1 05       	cpc	r31, r1
     8c6:	d9 f4       	brne	.+54     	; 0x8fe <init_trans+0xc0>
     8c8:	40 e0       	ldi	r20, 0x00	; 0
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	a6 1b       	sub	r26, r22
     8ce:	b7 0b       	sbc	r27, r23
     8d0:	80 91 1f 04 	lds	r24, 0x041F
     8d4:	90 91 20 04 	lds	r25, 0x0420
     8d8:	20 91 09 04 	lds	r18, 0x0409
     8dc:	30 91 0a 04 	lds	r19, 0x040A
     8e0:	bc 01       	movw	r22, r24
     8e2:	62 9f       	mul	r22, r18
     8e4:	c0 01       	movw	r24, r0
     8e6:	63 9f       	mul	r22, r19
     8e8:	90 0d       	add	r25, r0
     8ea:	72 9f       	mul	r23, r18
     8ec:	90 0d       	add	r25, r0
     8ee:	11 24       	eor	r1, r1
     8f0:	8a 17       	cp	r24, r26
     8f2:	9b 07       	cpc	r25, r27
     8f4:	14 f4       	brge	.+4      	; 0x8fa <init_trans+0xbc>
     8f6:	41 e0       	ldi	r20, 0x01	; 1
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	ca 01       	movw	r24, r20
     8fc:	24 c0       	rjmp	.+72     	; 0x946 <init_trans+0x108>
     8fe:	e6 30       	cpi	r30, 0x06	; 6
     900:	f1 05       	cpc	r31, r1
     902:	59 f4       	brne	.+22     	; 0x91a <init_trans+0xdc>
     904:	80 91 40 09 	lds	r24, 0x0940
     908:	86 95       	lsr	r24
     90a:	86 95       	lsr	r24
     90c:	86 95       	lsr	r24
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	89 27       	eor	r24, r25
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	81 70       	andi	r24, 0x01	; 1
     916:	90 70       	andi	r25, 0x00	; 0
     918:	16 c0       	rjmp	.+44     	; 0x946 <init_trans+0x108>
     91a:	37 97       	sbiw	r30, 0x07	; 7
     91c:	19 f0       	breq	.+6      	; 0x924 <init_trans+0xe6>
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	11 c0       	rjmp	.+34     	; 0x946 <init_trans+0x108>
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	a6 1b       	sub	r26, r22
     92a:	b7 0b       	sbc	r27, r23
     92c:	80 91 f7 03 	lds	r24, 0x03F7
     930:	90 91 f8 03 	lds	r25, 0x03F8
     934:	8a 17       	cp	r24, r26
     936:	9b 07       	cpc	r25, r27
     938:	14 f4       	brge	.+4      	; 0x93e <init_trans+0x100>
     93a:	21 e0       	ldi	r18, 0x01	; 1
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	c9 01       	movw	r24, r18
     940:	02 c0       	rjmp	.+4      	; 0x946 <init_trans+0x108>
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	90 e0       	ldi	r25, 0x00	; 0
	(state == RAISEL1 && counter - counterRef > pWait)||
	(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == FIXLEXTRA && counter - counterRef > totalStepLength2*fixtureLiftExtra)||
	(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0)||
	(state == LOWERL2 && counter - counterRef > pWait));
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <firstB_trans>:

bool firstB_trans(int state, int counter, int counterRef){
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	fc 01       	movw	r30, r24
     952:	da 01       	movw	r26, r20
	//Had references to counterRef14...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVEC1 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush1Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0)||
     954:	88 30       	cpi	r24, 0x08	; 8
     956:	91 05       	cpc	r25, r1
     958:	29 f4       	brne	.+10     	; 0x964 <firstB_trans+0x18>
     95a:	80 91 40 09 	lds	r24, 0x0940
     95e:	84 fd       	sbrc	r24, 4
     960:	37 c0       	rjmp	.+110    	; 0x9d0 <firstB_trans+0x84>
     962:	8f c0       	rjmp	.+286    	; 0xa82 <firstB_trans+0x136>
     964:	89 30       	cpi	r24, 0x09	; 9
     966:	91 05       	cpc	r25, r1
     968:	59 f4       	brne	.+22     	; 0x980 <firstB_trans+0x34>
     96a:	9b 01       	movw	r18, r22
     96c:	24 1b       	sub	r18, r20
     96e:	35 0b       	sbc	r19, r21
     970:	80 91 f9 03 	lds	r24, 0x03F9
     974:	90 91 fa 03 	lds	r25, 0x03FA
     978:	82 17       	cp	r24, r18
     97a:	93 07       	cpc	r25, r19
     97c:	bc f5       	brge	.+110    	; 0x9ec <firstB_trans+0xa0>
     97e:	81 c0       	rjmp	.+258    	; 0xa82 <firstB_trans+0x136>
     980:	8a 30       	cpi	r24, 0x0A	; 10
     982:	91 05       	cpc	r25, r1
     984:	59 f4       	brne	.+22     	; 0x99c <firstB_trans+0x50>
     986:	9b 01       	movw	r18, r22
     988:	24 1b       	sub	r18, r20
     98a:	35 0b       	sbc	r19, r21
     98c:	80 91 f7 03 	lds	r24, 0x03F7
     990:	90 91 f8 03 	lds	r25, 0x03F8
     994:	82 17       	cp	r24, r18
     996:	93 07       	cpc	r25, r19
     998:	b4 f5       	brge	.+108    	; 0xa06 <firstB_trans+0xba>
     99a:	73 c0       	rjmp	.+230    	; 0xa82 <firstB_trans+0x136>
     99c:	8b 30       	cpi	r24, 0x0B	; 11
     99e:	91 05       	cpc	r25, r1
     9a0:	b9 f4       	brne	.+46     	; 0x9d0 <firstB_trans+0x84>
     9a2:	ab 01       	movw	r20, r22
     9a4:	4a 1b       	sub	r20, r26
     9a6:	5b 0b       	sbc	r21, r27
     9a8:	20 91 15 04 	lds	r18, 0x0415
     9ac:	30 91 16 04 	lds	r19, 0x0416
     9b0:	80 91 09 04 	lds	r24, 0x0409
     9b4:	90 91 0a 04 	lds	r25, 0x040A
     9b8:	ec 01       	movw	r28, r24
     9ba:	2c 9f       	mul	r18, r28
     9bc:	c0 01       	movw	r24, r0
     9be:	2d 9f       	mul	r18, r29
     9c0:	90 0d       	add	r25, r0
     9c2:	3c 9f       	mul	r19, r28
     9c4:	90 0d       	add	r25, r0
     9c6:	11 24       	eor	r1, r1
     9c8:	84 17       	cp	r24, r20
     9ca:	95 07       	cpc	r25, r21
     9cc:	44 f5       	brge	.+80     	; 0xa1e <firstB_trans+0xd2>
     9ce:	59 c0       	rjmp	.+178    	; 0xa82 <firstB_trans+0x136>
     9d0:	ec 30       	cpi	r30, 0x0C	; 12
     9d2:	f1 05       	cpc	r31, r1
     9d4:	59 f4       	brne	.+22     	; 0x9ec <firstB_trans+0xa0>
     9d6:	9b 01       	movw	r18, r22
     9d8:	2a 1b       	sub	r18, r26
     9da:	3b 0b       	sbc	r19, r27
     9dc:	80 91 f7 03 	lds	r24, 0x03F7
     9e0:	90 91 f8 03 	lds	r25, 0x03F8
     9e4:	82 17       	cp	r24, r18
     9e6:	93 07       	cpc	r25, r19
     9e8:	64 f5       	brge	.+88     	; 0xa42 <firstB_trans+0xf6>
     9ea:	4b c0       	rjmp	.+150    	; 0xa82 <firstB_trans+0x136>
     9ec:	ed 30       	cpi	r30, 0x0D	; 13
     9ee:	f1 05       	cpc	r31, r1
     9f0:	51 f4       	brne	.+20     	; 0xa06 <firstB_trans+0xba>
     9f2:	80 91 40 09 	lds	r24, 0x0940
     9f6:	82 95       	swap	r24
     9f8:	8f 70       	andi	r24, 0x0F	; 15
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	89 27       	eor	r24, r25
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	81 70       	andi	r24, 0x01	; 1
     a02:	90 70       	andi	r25, 0x00	; 0
     a04:	40 c0       	rjmp	.+128    	; 0xa86 <firstB_trans+0x13a>
     a06:	ee 30       	cpi	r30, 0x0E	; 14
     a08:	f1 05       	cpc	r31, r1
     a0a:	49 f4       	brne	.+18     	; 0xa1e <firstB_trans+0xd2>
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	6a 1b       	sub	r22, r26
     a12:	7b 0b       	sbc	r23, r27
     a14:	80 91 f9 03 	lds	r24, 0x03F9
     a18:	90 91 fa 03 	lds	r25, 0x03FA
     a1c:	0b c0       	rjmp	.+22     	; 0xa34 <firstB_trans+0xe8>
     a1e:	ef 30       	cpi	r30, 0x0F	; 15
     a20:	f1 05       	cpc	r31, r1
     a22:	79 f4       	brne	.+30     	; 0xa42 <firstB_trans+0xf6>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	6a 1b       	sub	r22, r26
     a2a:	7b 0b       	sbc	r23, r27
     a2c:	80 91 f7 03 	lds	r24, 0x03F7
     a30:	90 91 f8 03 	lds	r25, 0x03F8
     a34:	86 17       	cp	r24, r22
     a36:	97 07       	cpc	r25, r23
     a38:	14 f4       	brge	.+4      	; 0xa3e <firstB_trans+0xf2>
     a3a:	21 e0       	ldi	r18, 0x01	; 1
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	c9 01       	movw	r24, r18
     a40:	22 c0       	rjmp	.+68     	; 0xa86 <firstB_trans+0x13a>
     a42:	70 97       	sbiw	r30, 0x10	; 16
     a44:	19 f0       	breq	.+6      	; 0xa4c <firstB_trans+0x100>
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	1d c0       	rjmp	.+58     	; 0xa86 <firstB_trans+0x13a>
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	6a 1b       	sub	r22, r26
     a52:	7b 0b       	sbc	r23, r27
     a54:	80 91 17 04 	lds	r24, 0x0417
     a58:	90 91 18 04 	lds	r25, 0x0418
     a5c:	20 91 09 04 	lds	r18, 0x0409
     a60:	30 91 0a 04 	lds	r19, 0x040A
     a64:	fc 01       	movw	r30, r24
     a66:	e2 9f       	mul	r30, r18
     a68:	c0 01       	movw	r24, r0
     a6a:	e3 9f       	mul	r30, r19
     a6c:	90 0d       	add	r25, r0
     a6e:	f2 9f       	mul	r31, r18
     a70:	90 0d       	add	r25, r0
     a72:	11 24       	eor	r1, r1
     a74:	86 17       	cp	r24, r22
     a76:	97 07       	cpc	r25, r23
     a78:	14 f4       	brge	.+4      	; 0xa7e <firstB_trans+0x132>
     a7a:	41 e0       	ldi	r20, 0x01	; 1
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	ca 01       	movw	r24, r20
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <firstB_trans+0x13a>
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	90 e0       	ldi	r25, 0x00	; 0
	(state == B1STOP1 && counter - counterRef > pWait)||
	(state == CLEAN1_2 && /*counter - counterRef > totalStepLength2*fixtureMotorHalfPlate &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0)||
	(state == B1SET2 && counter - counterRef > mWait)||
	(state == B1START2 && counter - counterRef > pWait)||
	(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorBigHalfPlate));
}
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <secondB_trans>:

bool secondB_trans(int state, int counter, int counterRef){
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	fc 01       	movw	r30, r24
     a92:	da 01       	movw	r26, r20
	return((state == MOVEC2 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush2Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0)||
     a94:	82 31       	cpi	r24, 0x12	; 18
     a96:	91 05       	cpc	r25, r1
     a98:	29 f4       	brne	.+10     	; 0xaa4 <secondB_trans+0x18>
     a9a:	80 91 40 09 	lds	r24, 0x0940
     a9e:	85 fd       	sbrc	r24, 5
     aa0:	37 c0       	rjmp	.+110    	; 0xb10 <secondB_trans+0x84>
     aa2:	9d c0       	rjmp	.+314    	; 0xbde <secondB_trans+0x152>
     aa4:	83 31       	cpi	r24, 0x13	; 19
     aa6:	91 05       	cpc	r25, r1
     aa8:	59 f4       	brne	.+22     	; 0xac0 <secondB_trans+0x34>
     aaa:	9b 01       	movw	r18, r22
     aac:	24 1b       	sub	r18, r20
     aae:	35 0b       	sbc	r19, r21
     ab0:	80 91 f9 03 	lds	r24, 0x03F9
     ab4:	90 91 fa 03 	lds	r25, 0x03FA
     ab8:	82 17       	cp	r24, r18
     aba:	93 07       	cpc	r25, r19
     abc:	bc f5       	brge	.+110    	; 0xb2c <secondB_trans+0xa0>
     abe:	8f c0       	rjmp	.+286    	; 0xbde <secondB_trans+0x152>
     ac0:	84 31       	cpi	r24, 0x14	; 20
     ac2:	91 05       	cpc	r25, r1
     ac4:	59 f4       	brne	.+22     	; 0xadc <secondB_trans+0x50>
     ac6:	9b 01       	movw	r18, r22
     ac8:	24 1b       	sub	r18, r20
     aca:	35 0b       	sbc	r19, r21
     acc:	80 91 f7 03 	lds	r24, 0x03F7
     ad0:	90 91 f8 03 	lds	r25, 0x03F8
     ad4:	82 17       	cp	r24, r18
     ad6:	93 07       	cpc	r25, r19
     ad8:	8c f5       	brge	.+98     	; 0xb3c <secondB_trans+0xb0>
     ada:	81 c0       	rjmp	.+258    	; 0xbde <secondB_trans+0x152>
     adc:	85 31       	cpi	r24, 0x15	; 21
     ade:	91 05       	cpc	r25, r1
     ae0:	b9 f4       	brne	.+46     	; 0xb10 <secondB_trans+0x84>
     ae2:	ab 01       	movw	r20, r22
     ae4:	4a 1b       	sub	r20, r26
     ae6:	5b 0b       	sbc	r21, r27
     ae8:	20 91 17 04 	lds	r18, 0x0417
     aec:	30 91 18 04 	lds	r19, 0x0418
     af0:	80 91 09 04 	lds	r24, 0x0409
     af4:	90 91 0a 04 	lds	r25, 0x040A
     af8:	ec 01       	movw	r28, r24
     afa:	2c 9f       	mul	r18, r28
     afc:	c0 01       	movw	r24, r0
     afe:	2d 9f       	mul	r18, r29
     b00:	90 0d       	add	r25, r0
     b02:	3c 9f       	mul	r19, r28
     b04:	90 0d       	add	r25, r0
     b06:	11 24       	eor	r1, r1
     b08:	84 17       	cp	r24, r20
     b0a:	95 07       	cpc	r25, r21
     b0c:	24 f5       	brge	.+72     	; 0xb56 <secondB_trans+0xca>
     b0e:	67 c0       	rjmp	.+206    	; 0xbde <secondB_trans+0x152>
     b10:	e6 31       	cpi	r30, 0x16	; 22
     b12:	f1 05       	cpc	r31, r1
     b14:	59 f4       	brne	.+22     	; 0xb2c <secondB_trans+0xa0>
     b16:	9b 01       	movw	r18, r22
     b18:	2a 1b       	sub	r18, r26
     b1a:	3b 0b       	sbc	r19, r27
     b1c:	80 91 f7 03 	lds	r24, 0x03F7
     b20:	90 91 f8 03 	lds	r25, 0x03F8
     b24:	82 17       	cp	r24, r18
     b26:	93 07       	cpc	r25, r19
     b28:	cc f4       	brge	.+50     	; 0xb5c <secondB_trans+0xd0>
     b2a:	59 c0       	rjmp	.+178    	; 0xbde <secondB_trans+0x152>
     b2c:	e7 31       	cpi	r30, 0x17	; 23
     b2e:	f1 05       	cpc	r31, r1
     b30:	29 f4       	brne	.+10     	; 0xb3c <secondB_trans+0xb0>
     b32:	80 91 40 09 	lds	r24, 0x0940
     b36:	85 fd       	sbrc	r24, 5
     b38:	2f c0       	rjmp	.+94     	; 0xb98 <secondB_trans+0x10c>
     b3a:	51 c0       	rjmp	.+162    	; 0xbde <secondB_trans+0x152>
     b3c:	e8 31       	cpi	r30, 0x18	; 24
     b3e:	f1 05       	cpc	r31, r1
     b40:	51 f4       	brne	.+20     	; 0xb56 <secondB_trans+0xca>
     b42:	6a 1b       	sub	r22, r26
     b44:	7b 0b       	sbc	r23, r27
     b46:	80 91 f9 03 	lds	r24, 0x03F9
     b4a:	90 91 fa 03 	lds	r25, 0x03FA
     b4e:	86 17       	cp	r24, r22
     b50:	97 07       	cpc	r25, r23
     b52:	a4 f5       	brge	.+104    	; 0xbbc <secondB_trans+0x130>
     b54:	44 c0       	rjmp	.+136    	; 0xbde <secondB_trans+0x152>
     b56:	e9 31       	cpi	r30, 0x19	; 25
     b58:	f1 05       	cpc	r31, r1
     b5a:	09 f1       	breq	.+66     	; 0xb9e <secondB_trans+0x112>
     b5c:	ea 31       	cpi	r30, 0x1A	; 26
     b5e:	f1 05       	cpc	r31, r1
     b60:	d9 f4       	brne	.+54     	; 0xb98 <secondB_trans+0x10c>
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	6a 1b       	sub	r22, r26
     b68:	7b 0b       	sbc	r23, r27
     b6a:	80 91 15 04 	lds	r24, 0x0415
     b6e:	90 91 16 04 	lds	r25, 0x0416
     b72:	20 91 09 04 	lds	r18, 0x0409
     b76:	30 91 0a 04 	lds	r19, 0x040A
     b7a:	fc 01       	movw	r30, r24
     b7c:	e2 9f       	mul	r30, r18
     b7e:	c0 01       	movw	r24, r0
     b80:	e3 9f       	mul	r30, r19
     b82:	90 0d       	add	r25, r0
     b84:	f2 9f       	mul	r31, r18
     b86:	90 0d       	add	r25, r0
     b88:	11 24       	eor	r1, r1
     b8a:	86 17       	cp	r24, r22
     b8c:	97 07       	cpc	r25, r23
     b8e:	14 f4       	brge	.+4      	; 0xb94 <secondB_trans+0x108>
     b90:	41 e0       	ldi	r20, 0x01	; 1
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	ca 01       	movw	r24, r20
     b96:	25 c0       	rjmp	.+74     	; 0xbe2 <secondB_trans+0x156>
     b98:	eb 31       	cpi	r30, 0x1B	; 27
     b9a:	f1 05       	cpc	r31, r1
     b9c:	79 f4       	brne	.+30     	; 0xbbc <secondB_trans+0x130>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	6a 1b       	sub	r22, r26
     ba4:	7b 0b       	sbc	r23, r27
     ba6:	80 91 f7 03 	lds	r24, 0x03F7
     baa:	90 91 f8 03 	lds	r25, 0x03F8
     bae:	86 17       	cp	r24, r22
     bb0:	97 07       	cpc	r25, r23
     bb2:	14 f4       	brge	.+4      	; 0xbb8 <secondB_trans+0x12c>
     bb4:	21 e0       	ldi	r18, 0x01	; 1
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	c9 01       	movw	r24, r18
     bba:	13 c0       	rjmp	.+38     	; 0xbe2 <secondB_trans+0x156>
     bbc:	7c 97       	sbiw	r30, 0x1c	; 28
     bbe:	19 f0       	breq	.+6      	; 0xbc6 <secondB_trans+0x13a>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e c0       	rjmp	.+28     	; 0xbe2 <secondB_trans+0x156>
     bc6:	80 91 40 09 	lds	r24, 0x0940
     bca:	82 95       	swap	r24
     bcc:	86 95       	lsr	r24
     bce:	86 95       	lsr	r24
     bd0:	83 70       	andi	r24, 0x03	; 3
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	89 27       	eor	r24, r25
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	81 70       	andi	r24, 0x01	; 1
     bda:	90 70       	andi	r25, 0x00	; 0
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <secondB_trans+0x156>
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
	(state == B2SET2 && counter - counterRef > mWait)||
	(state == B2START2 && counter - counterRef > pWait)||
	(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorSmallHalfPlate)||
	(state == B2STOP2 && counter - counterRef > pWait)||
	(state == MOVED1 && /*counter - counterRef > totalStepLength2*fixtureMotorDry1Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0));
}
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	08 95       	ret

00000be8 <dry_trans>:

bool dry_trans(int state, int counter, int counterRef){
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	fc 01       	movw	r30, r24
     bee:	da 01       	movw	r26, r20
	//Had references to counterRef26, 30...not used in any transitions, though...unnecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVED1EXTRA && counter - counterRef > fixtureMotorDry1Extra)||
     bf0:	8d 31       	cpi	r24, 0x1D	; 29
     bf2:	91 05       	cpc	r25, r1
     bf4:	59 f4       	brne	.+22     	; 0xc0c <dry_trans+0x24>
     bf6:	9b 01       	movw	r18, r22
     bf8:	24 1b       	sub	r18, r20
     bfa:	35 0b       	sbc	r19, r21
     bfc:	80 91 21 04 	lds	r24, 0x0421
     c00:	90 91 22 04 	lds	r25, 0x0422
     c04:	82 17       	cp	r24, r18
     c06:	93 07       	cpc	r25, r19
     c08:	ec f5       	brge	.+122    	; 0xc84 <dry_trans+0x9c>
     c0a:	7f c0       	rjmp	.+254    	; 0xd0a <dry_trans+0x122>
     c0c:	8e 31       	cpi	r24, 0x1E	; 30
     c0e:	91 05       	cpc	r25, r1
     c10:	b9 f4       	brne	.+46     	; 0xc40 <dry_trans+0x58>
     c12:	ab 01       	movw	r20, r22
     c14:	4a 1b       	sub	r20, r26
     c16:	5b 0b       	sbc	r21, r27
     c18:	20 91 19 04 	lds	r18, 0x0419
     c1c:	30 91 1a 04 	lds	r19, 0x041A
     c20:	80 91 09 04 	lds	r24, 0x0409
     c24:	90 91 0a 04 	lds	r25, 0x040A
     c28:	ec 01       	movw	r28, r24
     c2a:	2c 9f       	mul	r18, r28
     c2c:	c0 01       	movw	r24, r0
     c2e:	2d 9f       	mul	r18, r29
     c30:	90 0d       	add	r25, r0
     c32:	3c 9f       	mul	r19, r28
     c34:	90 0d       	add	r25, r0
     c36:	11 24       	eor	r1, r1
     c38:	84 17       	cp	r24, r20
     c3a:	95 07       	cpc	r25, r21
     c3c:	84 f5       	brge	.+96     	; 0xc9e <dry_trans+0xb6>
     c3e:	65 c0       	rjmp	.+202    	; 0xd0a <dry_trans+0x122>
     c40:	8f 31       	cpi	r24, 0x1F	; 31
     c42:	91 05       	cpc	r25, r1
     c44:	29 f4       	brne	.+10     	; 0xc50 <dry_trans+0x68>
     c46:	80 91 40 09 	lds	r24, 0x0940
     c4a:	83 fd       	sbrc	r24, 3
     c4c:	33 c0       	rjmp	.+102    	; 0xcb4 <dry_trans+0xcc>
     c4e:	5d c0       	rjmp	.+186    	; 0xd0a <dry_trans+0x122>
     c50:	80 32       	cpi	r24, 0x20	; 32
     c52:	91 05       	cpc	r25, r1
     c54:	b9 f4       	brne	.+46     	; 0xc84 <dry_trans+0x9c>
     c56:	ab 01       	movw	r20, r22
     c58:	4a 1b       	sub	r20, r26
     c5a:	5b 0b       	sbc	r21, r27
     c5c:	20 91 25 04 	lds	r18, 0x0425
     c60:	30 91 26 04 	lds	r19, 0x0426
     c64:	80 91 09 04 	lds	r24, 0x0409
     c68:	90 91 0a 04 	lds	r25, 0x040A
     c6c:	ec 01       	movw	r28, r24
     c6e:	2c 9f       	mul	r18, r28
     c70:	c0 01       	movw	r24, r0
     c72:	2d 9f       	mul	r18, r29
     c74:	90 0d       	add	r25, r0
     c76:	3c 9f       	mul	r19, r28
     c78:	90 0d       	add	r25, r0
     c7a:	11 24       	eor	r1, r1
     c7c:	84 17       	cp	r24, r20
     c7e:	95 07       	cpc	r25, r21
     c80:	24 f5       	brge	.+72     	; 0xcca <dry_trans+0xe2>
     c82:	43 c0       	rjmp	.+134    	; 0xd0a <dry_trans+0x122>
     c84:	e1 32       	cpi	r30, 0x21	; 33
     c86:	f1 05       	cpc	r31, r1
     c88:	51 f4       	brne	.+20     	; 0xc9e <dry_trans+0xb6>
     c8a:	80 91 40 09 	lds	r24, 0x0940
     c8e:	86 95       	lsr	r24
     c90:	86 95       	lsr	r24
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	89 27       	eor	r24, r25
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	81 70       	andi	r24, 0x01	; 1
     c9a:	90 70       	andi	r25, 0x00	; 0
     c9c:	38 c0       	rjmp	.+112    	; 0xd0e <dry_trans+0x126>
     c9e:	e2 32       	cpi	r30, 0x22	; 34
     ca0:	f1 05       	cpc	r31, r1
     ca2:	41 f4       	brne	.+16     	; 0xcb4 <dry_trans+0xcc>
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	6a 1b       	sub	r22, r26
     caa:	7b 0b       	sbc	r23, r27
     cac:	69 3c       	cpi	r22, 0xC9	; 201
     cae:	71 05       	cpc	r23, r1
     cb0:	74 f1       	brlt	.+92     	; 0xd0e <dry_trans+0x126>
     cb2:	2b c0       	rjmp	.+86     	; 0xd0a <dry_trans+0x122>
     cb4:	e3 32       	cpi	r30, 0x23	; 35
     cb6:	f1 05       	cpc	r31, r1
     cb8:	41 f4       	brne	.+16     	; 0xcca <dry_trans+0xe2>
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	6a 1b       	sub	r22, r26
     cc0:	7b 0b       	sbc	r23, r27
     cc2:	65 58       	subi	r22, 0x85	; 133
     cc4:	73 40       	sbci	r23, 0x03	; 3
     cc6:	1c f1       	brlt	.+70     	; 0xd0e <dry_trans+0x126>
     cc8:	20 c0       	rjmp	.+64     	; 0xd0a <dry_trans+0x122>
     cca:	b4 97       	sbiw	r30, 0x24	; 36
     ccc:	19 f0       	breq	.+6      	; 0xcd4 <dry_trans+0xec>
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	1d c0       	rjmp	.+58     	; 0xd0e <dry_trans+0x126>
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	6a 1b       	sub	r22, r26
     cda:	7b 0b       	sbc	r23, r27
     cdc:	80 91 1b 04 	lds	r24, 0x041B
     ce0:	90 91 1c 04 	lds	r25, 0x041C
     ce4:	20 91 07 04 	lds	r18, 0x0407
     ce8:	30 91 08 04 	lds	r19, 0x0408
     cec:	ec 01       	movw	r28, r24
     cee:	c2 9f       	mul	r28, r18
     cf0:	c0 01       	movw	r24, r0
     cf2:	c3 9f       	mul	r28, r19
     cf4:	90 0d       	add	r25, r0
     cf6:	d2 9f       	mul	r29, r18
     cf8:	90 0d       	add	r25, r0
     cfa:	11 24       	eor	r1, r1
     cfc:	86 17       	cp	r24, r22
     cfe:	97 07       	cpc	r25, r23
     d00:	14 f4       	brge	.+4      	; 0xd06 <dry_trans+0x11e>
     d02:	41 e0       	ldi	r20, 0x01	; 1
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	ca 01       	movw	r24, r20
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <dry_trans+0x126>
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
	(state == FIXL2EXTRA && counter - counterRef > totalStepLength2*fixtureLift2Extra)||
	(state == RAISEL2 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == FIXH && counter - counterRef > 200)||
	(state == LOWERL3 && counter - counterRef > 900)||
	(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate));
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <motor_and_write>:
	serial_print_string(msg);
}


void motor_and_write(int counter, int counterRef, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor)
{
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	ea 01       	movw	r28, r20
     d2a:	59 01       	movw	r10, r18
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     d2c:	fc 01       	movw	r30, r24
     d2e:	e6 1b       	sub	r30, r22
     d30:	f7 0b       	sbc	r31, r23
     d32:	60 91 07 04 	lds	r22, 0x0407
     d36:	70 91 08 04 	lds	r23, 0x0408
     d3a:	cf 01       	movw	r24, r30
     d3c:	0e 94 32 21 	call	0x4264	; 0x4264 <__divmodhi4>
     d40:	20 91 fd 03 	lds	r18, 0x03FD
     d44:	30 91 fe 03 	lds	r19, 0x03FE
     d48:	82 17       	cp	r24, r18
     d4a:	93 07       	cpc	r25, r19
     d4c:	34 f4       	brge	.+12     	; 0xd5a <motor_and_write+0x46>
     d4e:	cd 2b       	or	r28, r29
     d50:	21 f0       	breq	.+8      	; 0xd5a <motor_and_write+0x46>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 1
     d52:	80 91 45 09 	lds	r24, 0x0945
     d56:	81 60       	ori	r24, 0x01	; 1
     d58:	03 c0       	rjmp	.+6      	; 0xd60 <motor_and_write+0x4c>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     d5a:	80 91 45 09 	lds	r24, 0x0945
     d5e:	8e 7f       	andi	r24, 0xFE	; 254
     d60:	80 93 45 09 	sts	0x0945, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     d64:	60 91 09 04 	lds	r22, 0x0409
     d68:	70 91 0a 04 	lds	r23, 0x040A
     d6c:	cf 01       	movw	r24, r30
     d6e:	0e 94 32 21 	call	0x4264	; 0x4264 <__divmodhi4>
     d72:	20 91 ff 03 	lds	r18, 0x03FF
     d76:	30 91 00 04 	lds	r19, 0x0400
     d7a:	82 17       	cp	r24, r18
     d7c:	93 07       	cpc	r25, r19
     d7e:	34 f4       	brge	.+12     	; 0xd8c <motor_and_write+0x78>
     d80:	ab 28       	or	r10, r11
     d82:	21 f0       	breq	.+8      	; 0xd8c <motor_and_write+0x78>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     d84:	80 91 45 09 	lds	r24, 0x0945
     d88:	88 60       	ori	r24, 0x08	; 8
     d8a:	03 c0       	rjmp	.+6      	; 0xd92 <motor_and_write+0x7e>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 0
     d8c:	80 91 45 09 	lds	r24, 0x0945
     d90:	87 7f       	andi	r24, 0xF7	; 247
     d92:	80 93 45 09 	sts	0x0945, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     d96:	60 91 0b 04 	lds	r22, 0x040B
     d9a:	70 91 0c 04 	lds	r23, 0x040C
     d9e:	cf 01       	movw	r24, r30
     da0:	0e 94 32 21 	call	0x4264	; 0x4264 <__divmodhi4>
     da4:	20 91 01 04 	lds	r18, 0x0401
     da8:	30 91 02 04 	lds	r19, 0x0402
     dac:	82 17       	cp	r24, r18
     dae:	93 07       	cpc	r25, r19
     db0:	34 f4       	brge	.+12     	; 0xdbe <motor_and_write+0xaa>
     db2:	01 2b       	or	r16, r17
     db4:	21 f0       	breq	.+8      	; 0xdbe <motor_and_write+0xaa>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     db6:	80 91 45 09 	lds	r24, 0x0945
     dba:	80 64       	ori	r24, 0x40	; 64
     dbc:	03 c0       	rjmp	.+6      	; 0xdc4 <motor_and_write+0xb0>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 0
     dbe:	80 91 45 09 	lds	r24, 0x0945
     dc2:	8f 7b       	andi	r24, 0xBF	; 191
     dc4:	80 93 45 09 	sts	0x0945, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     dc8:	60 91 0d 04 	lds	r22, 0x040D
     dcc:	70 91 0e 04 	lds	r23, 0x040E
     dd0:	cf 01       	movw	r24, r30
     dd2:	0e 94 32 21 	call	0x4264	; 0x4264 <__divmodhi4>
     dd6:	20 91 03 04 	lds	r18, 0x0403
     dda:	30 91 04 04 	lds	r19, 0x0404
     dde:	82 17       	cp	r24, r18
     de0:	93 07       	cpc	r25, r19
     de2:	34 f4       	brge	.+12     	; 0xdf0 <motor_and_write+0xdc>
     de4:	ef 28       	or	r14, r15
     de6:	21 f0       	breq	.+8      	; 0xdf0 <motor_and_write+0xdc>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     de8:	80 91 41 09 	lds	r24, 0x0941
     dec:	82 60       	ori	r24, 0x02	; 2
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <motor_and_write+0xe2>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 0
     df0:	80 91 41 09 	lds	r24, 0x0941
     df4:	8d 7f       	andi	r24, 0xFD	; 253
     df6:	80 93 41 09 	sts	0x0941, r24
	}

	if( ((counter - counterRef) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     dfa:	60 91 0f 04 	lds	r22, 0x040F
     dfe:	70 91 10 04 	lds	r23, 0x0410
     e02:	cf 01       	movw	r24, r30
     e04:	0e 94 32 21 	call	0x4264	; 0x4264 <__divmodhi4>
     e08:	20 91 05 04 	lds	r18, 0x0405
     e0c:	30 91 06 04 	lds	r19, 0x0406
     e10:	82 17       	cp	r24, r18
     e12:	93 07       	cpc	r25, r19
     e14:	34 f4       	brge	.+12     	; 0xe22 <motor_and_write+0x10e>
     e16:	cd 28       	or	r12, r13
     e18:	21 f0       	breq	.+8      	; 0xe22 <motor_and_write+0x10e>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     e1a:	80 91 41 09 	lds	r24, 0x0941
     e1e:	80 61       	ori	r24, 0x10	; 16
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <motor_and_write+0x114>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 0
     e22:	80 91 41 09 	lds	r24, 0x0941
     e26:	8f 7e       	andi	r24, 0xEF	; 239
     e28:	80 93 41 09 	sts	0x0941, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     e2c:	80 e4       	ldi	r24, 0x40	; 64
     e2e:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
	i2c_write(0x2);									// write command byte to motor chip
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     e38:	80 91 45 09 	lds	r24, 0x0945
     e3c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     e40:	80 91 41 09 	lds	r24, 0x0941
     e44:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_stop();                            // set stop condition = release bus
     e48:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

	i2c_start(I2C2+I2C_WRITE);                // write to output chip
     e4c:	82 e4       	ldi	r24, 0x42	; 66
     e4e:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
	i2c_write(0x2);
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_write(u_outputByte0.outputByte0);
     e58:	80 91 44 09 	lds	r24, 0x0944
     e5c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_write(u_outputByte1.outputByte1);
     e60:	80 91 42 09 	lds	r24, 0x0942
     e64:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_stop();
     e68:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
}
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	df 90       	pop	r13
     e7a:	cf 90       	pop	r12
     e7c:	bf 90       	pop	r11
     e7e:	af 90       	pop	r10
     e80:	08 95       	ret

00000e82 <serial_print_string_noCRLF>:
void serial_print_string(char msg[]){
	serial_send_blocking(USB_COMM, msg, strlen(msg));
	serial_send_blocking(USB_COMM, "\r\n", 2);
}

void serial_print_string_noCRLF(char msg[]){
     e82:	68 2f       	mov	r22, r24
	serial_send_blocking(USB_COMM, msg, strlen(msg));
     e84:	e8 2f       	mov	r30, r24
     e86:	f9 2f       	mov	r31, r25
     e88:	df 01       	movw	r26, r30
     e8a:	0d 90       	ld	r0, X+
     e8c:	00 20       	and	r0, r0
     e8e:	e9 f7       	brne	.-6      	; 0xe8a <serial_print_string_noCRLF+0x8>
     e90:	11 97       	sbiw	r26, 0x01	; 1
     e92:	ae 1b       	sub	r26, r30
     e94:	bf 0b       	sbc	r27, r31
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	79 2f       	mov	r23, r25
     e9a:	4a 2f       	mov	r20, r26
     e9c:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <serial_send_blocking>
}
     ea0:	08 95       	ret

00000ea2 <serial_print_string>:
	}
	serial_print_string("END");
	}
}

void serial_print_string(char msg[]){
     ea2:	68 2f       	mov	r22, r24
	serial_send_blocking(USB_COMM, msg, strlen(msg));
     ea4:	e8 2f       	mov	r30, r24
     ea6:	f9 2f       	mov	r31, r25
     ea8:	df 01       	movw	r26, r30
     eaa:	0d 90       	ld	r0, X+
     eac:	00 20       	and	r0, r0
     eae:	e9 f7       	brne	.-6      	; 0xeaa <serial_print_string+0x8>
     eb0:	11 97       	sbiw	r26, 0x01	; 1
     eb2:	ae 1b       	sub	r26, r30
     eb4:	bf 0b       	sbc	r27, r31
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	79 2f       	mov	r23, r25
     eba:	4a 2f       	mov	r20, r26
     ebc:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <serial_send_blocking>
	serial_send_blocking(USB_COMM, "\r\n", 2);
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	71 e0       	ldi	r23, 0x01	; 1
     ec6:	42 e0       	ldi	r20, 0x02	; 2
     ec8:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <serial_send_blocking>
}
     ecc:	08 95       	ret

00000ece <init_action>:
	i2c_write(u_outputByte0.outputByte0);
	i2c_write(u_outputByte1.outputByte1);
	i2c_stop();
}

void init_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor, bool *pprint0){
     ece:	af 92       	push	r10
     ed0:	bf 92       	push	r11
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	ea 01       	movw	r28, r20
     ed8:	f9 01       	movw	r30, r18
	switch(state){
     eda:	83 30       	cpi	r24, 0x03	; 3
     edc:	91 05       	cpc	r25, r1
     ede:	09 f4       	brne	.+2      	; 0xee2 <init_action+0x14>
     ee0:	64 c0       	rjmp	.+200    	; 0xfaa <init_action+0xdc>
     ee2:	84 30       	cpi	r24, 0x04	; 4
     ee4:	91 05       	cpc	r25, r1
     ee6:	54 f4       	brge	.+20     	; 0xefc <init_action+0x2e>
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	91 05       	cpc	r25, r1
     eec:	e1 f1       	breq	.+120    	; 0xf66 <init_action+0x98>
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	91 05       	cpc	r25, r1
     ef2:	0c f0       	brlt	.+2      	; 0xef6 <init_action+0x28>
     ef4:	4b c0       	rjmp	.+150    	; 0xf8c <init_action+0xbe>
     ef6:	89 2b       	or	r24, r25
     ef8:	89 f0       	breq	.+34     	; 0xf1c <init_action+0x4e>
     efa:	85 c0       	rjmp	.+266    	; 0x1006 <init_action+0x138>
     efc:	85 30       	cpi	r24, 0x05	; 5
     efe:	91 05       	cpc	r25, r1
     f00:	09 f4       	brne	.+2      	; 0xf04 <init_action+0x36>
     f02:	60 c0       	rjmp	.+192    	; 0xfc4 <init_action+0xf6>
     f04:	85 30       	cpi	r24, 0x05	; 5
     f06:	91 05       	cpc	r25, r1
     f08:	0c f4       	brge	.+2      	; 0xf0c <init_action+0x3e>
     f0a:	5c c0       	rjmp	.+184    	; 0xfc4 <init_action+0xf6>
     f0c:	86 30       	cpi	r24, 0x06	; 6
     f0e:	91 05       	cpc	r25, r1
     f10:	09 f4       	brne	.+2      	; 0xf14 <init_action+0x46>
     f12:	62 c0       	rjmp	.+196    	; 0xfd8 <init_action+0x10a>
     f14:	07 97       	sbiw	r24, 0x07	; 7
     f16:	09 f0       	breq	.+2      	; 0xf1a <init_action+0x4c>
     f18:	76 c0       	rjmp	.+236    	; 0x1006 <init_action+0x138>
     f1a:	6b c0       	rjmp	.+214    	; 0xff2 <init_action+0x124>
		
		case INIT:   // state 0
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
     f1c:	80 91 40 09 	lds	r24, 0x0940
     f20:	90 91 45 09 	lds	r25, 0x0945
     f24:	81 ff       	sbrs	r24, 1
     f26:	04 c0       	rjmp	.+8      	; 0xf30 <init_action+0x62>
				u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
     f28:	9f 7e       	andi	r25, 0xEF	; 239
     f2a:	90 93 45 09 	sts	0x0945, r25
     f2e:	6b c0       	rjmp	.+214    	; 0x1006 <init_action+0x138>
				//u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
			}
			else{
				u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     f30:	9f 7d       	andi	r25, 0xDF	; 223
     f32:	90 93 45 09 	sts	0x0945, r25
				*pfixtureMotor = 0;
     f36:	11 82       	std	Z+1, r1	; 0x01
     f38:	10 82       	st	Z, r1
				u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     f3a:	80 91 44 09 	lds	r24, 0x0944
     f3e:	8f 7e       	andi	r24, 0xEF	; 239
				u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     f40:	88 60       	ori	r24, 0x08	; 8
     f42:	80 93 44 09 	sts	0x0944, r24
				if(*pprint0 == 1){
     f46:	f5 01       	movw	r30, r10
     f48:	80 81       	ld	r24, Z
     f4a:	88 23       	and	r24, r24
     f4c:	09 f4       	brne	.+2      	; 0xf50 <init_action+0x82>
     f4e:	5b c0       	rjmp	.+182    	; 0x1006 <init_action+0x138>
					lcd_goto_xy(0,1);
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
					serial_print_string("PUSH TO START");
     f58:	83 e0       	ldi	r24, 0x03	; 3
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
					*pprint0 = 0;
     f60:	f5 01       	movw	r30, r10
     f62:	10 82       	st	Z, r1
     f64:	50 c0       	rjmp	.+160    	; 0x1006 <init_action+0x138>
				}
			}
			break;
			
		case LOAD:    //state 1
			u_outputByte0.bits_in_outputByte0.ACPower = 0;
     f66:	20 91 44 09 	lds	r18, 0x0944
     f6a:	32 2f       	mov	r19, r18
     f6c:	3e 7f       	andi	r19, 0xFE	; 254
			if((counter % 200) < 100){
     f6e:	cb 01       	movw	r24, r22
     f70:	68 ec       	ldi	r22, 0xC8	; 200
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	0e 94 32 21 	call	0x4264	; 0x4264 <__divmodhi4>
     f78:	84 36       	cpi	r24, 0x64	; 100
     f7a:	91 05       	cpc	r25, r1
     f7c:	24 f4       	brge	.+8      	; 0xf86 <init_action+0xb8>
				u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     f7e:	2c 7f       	andi	r18, 0xFC	; 252
     f80:	20 93 44 09 	sts	0x0944, r18
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <init_action+0xbe>
			}
			else{
				u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     f86:	32 60       	ori	r19, 0x02	; 2
     f88:	30 93 44 09 	sts	0x0944, r19
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
			break;
			
		case LOADEXTRA:  // state 2
			*pplateLoadMotor = 1;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	99 83       	std	Y+1, r25	; 0x01
     f92:	88 83       	st	Y, r24
			*pfixtureMotor = 0;
     f94:	11 82       	std	Z+1, r1	; 0x01
     f96:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
     f98:	80 91 45 09 	lds	r24, 0x0945
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     f9c:	86 60       	ori	r24, 0x06	; 6
     f9e:	80 93 45 09 	sts	0x0945, r24
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
     fa2:	80 91 44 09 	lds	r24, 0x0944
     fa6:	8b 7f       	andi	r24, 0xFB	; 251
     fa8:	21 c0       	rjmp	.+66     	; 0xfec <init_action+0x11e>
			break;
			
		case RAISEL1:    // state 3
			u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     faa:	80 91 44 09 	lds	r24, 0x0944
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     fae:	81 7e       	andi	r24, 0xE1	; 225
			u_outputByte0.bits_in_outputByte0.plateStop = 1;
     fb0:	86 61       	ori	r24, 0x16	; 22
     fb2:	80 93 44 09 	sts	0x0944, r24
			*pplateLoadMotor = 0;
     fb6:	19 82       	std	Y+1, r1	; 0x01
     fb8:	18 82       	st	Y, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     fba:	80 91 45 09 	lds	r24, 0x0945
     fbe:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
     fc0:	8b 7f       	andi	r24, 0xFB	; 251
     fc2:	1f c0       	rjmp	.+62     	; 0x1002 <init_action+0x134>
			*pfixtureMotor = 1; 
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
			
		case FIXLEXTRA:   // state 5
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
     fc4:	80 91 45 09 	lds	r24, 0x0945
     fc8:	80 61       	ori	r24, 0x10	; 16
     fca:	80 93 45 09 	sts	0x0945, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	80 83       	st	Z, r24
     fd6:	12 c0       	rjmp	.+36     	; 0xffc <init_action+0x12e>
			break;
			
		case LOWERL1:      // state 6
			*pfixtureMotor = 0;
     fd8:	11 82       	std	Z+1, r1	; 0x01
     fda:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     fdc:	80 91 45 09 	lds	r24, 0x0945
     fe0:	8f 7d       	andi	r24, 0xDF	; 223
     fe2:	80 93 45 09 	sts	0x0945, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;    // removes air to drop fixture
     fe6:	80 91 44 09 	lds	r24, 0x0944
     fea:	88 60       	ori	r24, 0x08	; 8
     fec:	80 93 44 09 	sts	0x0944, r24
     ff0:	0a c0       	rjmp	.+20     	; 0x1006 <init_action+0x138>
			break;
			
		case LOWERL2:     // state 7
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;    // drives lifts down
     ff2:	80 91 44 09 	lds	r24, 0x0944
     ff6:	8f 7e       	andi	r24, 0xEF	; 239
     ff8:	80 93 44 09 	sts	0x0944, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     ffc:	80 91 45 09 	lds	r24, 0x0945
    1000:	80 62       	ori	r24, 0x20	; 32
    1002:	80 93 45 09 	sts	0x0945, r24
			break;
		//*********************************************
	}
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	bf 90       	pop	r11
    100c:	af 90       	pop	r10
    100e:	08 95       	ret

00001010 <serial_print_int>:

void serial_print_string_noCRLF(char msg[]){
	serial_send_blocking(USB_COMM, msg, strlen(msg));
}

void serial_print_int(int a){
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <serial_print_int+0xa>
    101a:	00 d0       	rcall	.+0      	; 0x101c <serial_print_int+0xc>
    101c:	0f 92       	push	r0
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
	char msg[5];
	itoa(a, msg, 10);
    1022:	8e 01       	movw	r16, r28
    1024:	0f 5f       	subi	r16, 0xFF	; 255
    1026:	1f 4f       	sbci	r17, 0xFF	; 255
    1028:	b8 01       	movw	r22, r16
    102a:	4a e0       	ldi	r20, 0x0A	; 10
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	0e 94 b7 22 	call	0x456e	; 0x456e <itoa>
	serial_print_string(msg);
    1032:	c8 01       	movw	r24, r16
    1034:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
}
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	08 95       	ret

0000104c <main>:
void serial_print_int(int a);

void serial_print_string_noCRLF(char msg[]);

int main()   
{
    104c:	2f 92       	push	r2
    104e:	3f 92       	push	r3
    1050:	4f 92       	push	r4
    1052:	5f 92       	push	r5
    1054:	6f 92       	push	r6
    1056:	7f 92       	push	r7
    1058:	8f 92       	push	r8
    105a:	9f 92       	push	r9
    105c:	af 92       	push	r10
    105e:	bf 92       	push	r11
    1060:	cf 92       	push	r12
    1062:	df 92       	push	r13
    1064:	ef 92       	push	r14
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	62 97       	sbiw	r28, 0x12	; 18
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently

	bool buttonTriggered = false;	//buttonTriggered is false if it hasn't been triggered, true if it has;
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
	
	fixtureMotorSmallHalfPlate *= stepFactor;
    1080:	80 91 15 04 	lds	r24, 0x0415
    1084:	90 91 16 04 	lds	r25, 0x0416
    1088:	20 91 13 04 	lds	r18, 0x0413
    108c:	30 91 14 04 	lds	r19, 0x0414
    1090:	ac 01       	movw	r20, r24
    1092:	42 9f       	mul	r20, r18
    1094:	c0 01       	movw	r24, r0
    1096:	43 9f       	mul	r20, r19
    1098:	90 0d       	add	r25, r0
    109a:	52 9f       	mul	r21, r18
    109c:	90 0d       	add	r25, r0
    109e:	11 24       	eor	r1, r1
    10a0:	90 93 16 04 	sts	0x0416, r25
    10a4:	80 93 15 04 	sts	0x0415, r24
	fixtureMotorBigHalfPlate   *= stepFactor;
    10a8:	80 91 17 04 	lds	r24, 0x0417
    10ac:	90 91 18 04 	lds	r25, 0x0418
    10b0:	ac 01       	movw	r20, r24
    10b2:	42 9f       	mul	r20, r18
    10b4:	c0 01       	movw	r24, r0
    10b6:	43 9f       	mul	r20, r19
    10b8:	90 0d       	add	r25, r0
    10ba:	52 9f       	mul	r21, r18
    10bc:	90 0d       	add	r25, r0
    10be:	11 24       	eor	r1, r1
    10c0:	90 93 18 04 	sts	0x0418, r25
    10c4:	80 93 17 04 	sts	0x0417, r24
	fixtureMotorDry            *= stepFactor;
    10c8:	80 91 19 04 	lds	r24, 0x0419
    10cc:	90 91 1a 04 	lds	r25, 0x041A
    10d0:	ac 01       	movw	r20, r24
    10d2:	42 9f       	mul	r20, r18
    10d4:	c0 01       	movw	r24, r0
    10d6:	43 9f       	mul	r20, r19
    10d8:	90 0d       	add	r25, r0
    10da:	52 9f       	mul	r21, r18
    10dc:	90 0d       	add	r25, r0
    10de:	11 24       	eor	r1, r1
    10e0:	90 93 1a 04 	sts	0x041A, r25
    10e4:	80 93 19 04 	sts	0x0419, r24
	plateLoadMotorLoadPlate    *= stepFactor;
    10e8:	80 91 1b 04 	lds	r24, 0x041B
    10ec:	90 91 1c 04 	lds	r25, 0x041C
    10f0:	ac 01       	movw	r20, r24
    10f2:	42 9f       	mul	r20, r18
    10f4:	c0 01       	movw	r24, r0
    10f6:	43 9f       	mul	r20, r19
    10f8:	90 0d       	add	r25, r0
    10fa:	52 9f       	mul	r21, r18
    10fc:	90 0d       	add	r25, r0
    10fe:	11 24       	eor	r1, r1
    1100:	90 93 1c 04 	sts	0x041C, r25
    1104:	80 93 1b 04 	sts	0x041B, r24
	plateLoadExtra             *= stepFactor;
    1108:	80 91 1d 04 	lds	r24, 0x041D
    110c:	90 91 1e 04 	lds	r25, 0x041E
    1110:	ac 01       	movw	r20, r24
    1112:	42 9f       	mul	r20, r18
    1114:	c0 01       	movw	r24, r0
    1116:	43 9f       	mul	r20, r19
    1118:	90 0d       	add	r25, r0
    111a:	52 9f       	mul	r21, r18
    111c:	90 0d       	add	r25, r0
    111e:	11 24       	eor	r1, r1
    1120:	90 93 1e 04 	sts	0x041E, r25
    1124:	80 93 1d 04 	sts	0x041D, r24
	fixtureLiftExtra           *= stepFactor;
    1128:	80 91 1f 04 	lds	r24, 0x041F
    112c:	90 91 20 04 	lds	r25, 0x0420
    1130:	ac 01       	movw	r20, r24
    1132:	42 9f       	mul	r20, r18
    1134:	c0 01       	movw	r24, r0
    1136:	43 9f       	mul	r20, r19
    1138:	90 0d       	add	r25, r0
    113a:	52 9f       	mul	r21, r18
    113c:	90 0d       	add	r25, r0
    113e:	11 24       	eor	r1, r1
    1140:	90 93 20 04 	sts	0x0420, r25
    1144:	80 93 1f 04 	sts	0x041F, r24
	fixtureLift2Extra          *= stepFactor;
    1148:	80 91 25 04 	lds	r24, 0x0425
    114c:	90 91 26 04 	lds	r25, 0x0426
    1150:	ac 01       	movw	r20, r24
    1152:	42 9f       	mul	r20, r18
    1154:	c0 01       	movw	r24, r0
    1156:	43 9f       	mul	r20, r19
    1158:	90 0d       	add	r25, r0
    115a:	52 9f       	mul	r21, r18
    115c:	90 0d       	add	r25, r0
    115e:	11 24       	eor	r1, r1
    1160:	90 93 26 04 	sts	0x0426, r25
    1164:	80 93 25 04 	sts	0x0425, r24
	fixtureMotorDry1Extra      *= stepFactor;
    1168:	80 91 21 04 	lds	r24, 0x0421
    116c:	90 91 22 04 	lds	r25, 0x0422
    1170:	ac 01       	movw	r20, r24
    1172:	42 9f       	mul	r20, r18
    1174:	c0 01       	movw	r24, r0
    1176:	43 9f       	mul	r20, r19
    1178:	90 0d       	add	r25, r0
    117a:	52 9f       	mul	r21, r18
    117c:	90 0d       	add	r25, r0
    117e:	11 24       	eor	r1, r1
    1180:	90 93 22 04 	sts	0x0422, r25
    1184:	80 93 21 04 	sts	0x0421, r24
	fixtureMotorDry2Step       *= stepFactor;
    1188:	80 91 23 04 	lds	r24, 0x0423
    118c:	90 91 24 04 	lds	r25, 0x0424
    1190:	ac 01       	movw	r20, r24
    1192:	42 9f       	mul	r20, r18
    1194:	c0 01       	movw	r24, r0
    1196:	43 9f       	mul	r20, r19
    1198:	90 0d       	add	r25, r0
    119a:	52 9f       	mul	r21, r18
    119c:	90 0d       	add	r25, r0
    119e:	11 24       	eor	r1, r1
    11a0:	90 93 24 04 	sts	0x0424, r25
    11a4:	80 93 23 04 	sts	0x0423, r24
    11a8:	8f ef       	ldi	r24, 0xFF	; 255
    11aa:	9f ef       	ldi	r25, 0xFF	; 255
    11ac:	98 8b       	std	Y+16, r25	; 0x10
    11ae:	8f 87       	std	Y+15, r24	; 0x0f
    11b0:	1e 86       	std	Y+14, r1	; 0x0e
    
	while(1){		//Repeats the entire program indefinitely (runs maintenance or normal each time)

							//mx holds whether motor x should move: 0 = no, 1 = yes
	plateLoadMotor = 0;		//plate load motor
    11b2:	1b 82       	std	Y+3, r1	; 0x03
    11b4:	1a 82       	std	Y+2, r1	; 0x02
	fixtureMotor = 0;		//fixture motor
    11b6:	1d 82       	std	Y+5, r1	; 0x05
    11b8:	1c 82       	std	Y+4, r1	; 0x04
	brush1Motor = 0;		//brush 1 motor
    11ba:	1f 82       	std	Y+7, r1	; 0x07
    11bc:	1e 82       	std	Y+6, r1	; 0x06
	brush2Motor = 0;		//brush 2 motor
    11be:	19 86       	std	Y+9, r1	; 0x09
    11c0:	18 86       	std	Y+8, r1	; 0x08
	paperTowelMotor = 0; 	//paper towel roller motor
    11c2:	1b 86       	std	Y+11, r1	; 0x0b
    11c4:	1a 86       	std	Y+10, r1	; 0x0a
	//various reference points used by the program to tell how long since an event has occurred
	//the ones with numbers correspond to run mode states, and Five refers to motor 5 (paper towel roller)
	counterRef = 0;
	
	//hold whether or not statements have been printed yet (numbers refer to run mode states)
	print0 = true;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	89 83       	std	Y+1, r24	; 0x01
	print35 = true;
	
	//initialize button variables
	button = 1;						//button = 0 means it has been de-bounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;				//holds the state in the button subroutine where the program is currently
    11ca:	1d 86       	std	Y+13, r1	; 0x0d
    11cc:	1c 86       	std	Y+12, r1	; 0x0c

	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
    11ce:	10 92 45 09 	sts	0x0945, r1
	u_motorByte1.motorByte1 = 128;  // initialize motorByte1              **********1 or 128, depending on order**********
    11d2:	80 e8       	ldi	r24, 0x80	; 128
    11d4:	80 93 41 09 	sts	0x0941, r24
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
    11d8:	8f ef       	ldi	r24, 0xFF	; 255
    11da:	80 93 44 09 	sts	0x0944, r24
	u_outputByte1.outputByte1 = 15;  // initialize outputByte1
    11de:	8f e0       	ldi	r24, 0x0F	; 15
    11e0:	80 93 42 09 	sts	0x0942, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
    11e4:	10 92 40 09 	sts	0x0940, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
    11e8:	10 92 43 09 	sts	0x0943, r1
	
	//clear();
	serial_print_string(PROGRAM_NAME);
    11ec:	81 e1       	ldi	r24, 0x11	; 17
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
	lcd_goto_xy(0,1);
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	61 e0       	ldi	r22, 0x01	; 1
    11f8:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
	serial_print_string(REVISION_NUMBER);
    11fc:	82 e2       	ldi	r24, 0x22	; 34
    11fe:	91 e0       	ldi	r25, 0x01	; 1
    1200:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
	delay_ms(2000);
    1204:	80 ed       	ldi	r24, 0xD0	; 208
    1206:	97 e0       	ldi	r25, 0x07	; 7
    1208:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <delay_ms>
	
	//clear();
	serial_print_string("BEGIN ");
    120c:	89 e2       	ldi	r24, 0x29	; 41
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
	
	delay_ms(1000);
    1214:	88 ee       	ldi	r24, 0xE8	; 232
    1216:	93 e0       	ldi	r25, 0x03	; 3
    1218:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <delay_ms>

    i2c_init();                                // init I2C interface
    121c:	0e 94 97 00 	call	0x12e	; 0x12e <i2c_init>
	
    serial_print_string("INIT ");
    1220:	80 e3       	ldi	r24, 0x30	; 48
    1222:	91 e0       	ldi	r25, 0x01	; 1
    1224:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
    1228:	80 e4       	ldi	r24, 0x40	; 64
    122a:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
    122e:	f8 2e       	mov	r15, r24
	// OR
	//      ret1 = IC_START( IC22 ); 
	//		serial_print_string( "I2C2 ");
	//      serial_print_string( (ret1)? "DOWN":"UP" ); 
	//		i2c_stop();
	if (ret1) {
    1230:	88 23       	and	r24, r24
    1232:	19 f0       	breq	.+6      	; 0x123a <main+0x1ee>
		serial_print_string("I2C1 DOWN ");
    1234:	86 e3       	ldi	r24, 0x36	; 54
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	02 c0       	rjmp	.+4      	; 0x123e <main+0x1f2>
		}
	else {
		serial_print_string("I2C1 UP");
    123a:	81 e4       	ldi	r24, 0x41	; 65
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
		}	
	i2c_stop();	
    1242:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
	
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
    1246:	82 e4       	ldi	r24, 0x42	; 66
    1248:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
    124c:	18 2f       	mov	r17, r24
	
	if (ret2){
    124e:	88 23       	and	r24, r24
    1250:	19 f0       	breq	.+6      	; 0x1258 <main+0x20c>
		
		serial_print_string("I2C2 DOWN ");
    1252:	89 e4       	ldi	r24, 0x49	; 73
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	02 c0       	rjmp	.+4      	; 0x125c <main+0x210>
		}
	else{
		serial_print_string("I2C2 UP");
    1258:	84 e5       	ldi	r24, 0x54	; 84
    125a:	91 e0       	ldi	r25, 0x01	; 1
    125c:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
		}		
	i2c_stop();
    1260:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
    1264:	84 e4       	ldi	r24, 0x44	; 68
    1266:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
    126a:	08 2f       	mov	r16, r24
	if (ret3){
    126c:	88 23       	and	r24, r24
    126e:	19 f0       	breq	.+6      	; 0x1276 <main+0x22a>
		serial_print_string("I2C3 DOWN ");
    1270:	8c e5       	ldi	r24, 0x5C	; 92
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	02 c0       	rjmp	.+4      	; 0x127a <main+0x22e>
		}		
	else{
		serial_print_string("I2C3 UP");
    1276:	87 e6       	ldi	r24, 0x67	; 103
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
		}		
	i2c_stop();
    127e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
    
	//clear();
	serial_print_string("START ");
    1282:	8f e6       	ldi	r24, 0x6F	; 111
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
	
	if ( ret1 | ret2 | ret3 ) {			
    128a:	1f 29       	or	r17, r15
    128c:	10 2b       	or	r17, r16
    128e:	61 f0       	breq	.+24     	; 0x12a8 <main+0x25c>
		// Check if all three I2C devices responded properly
        /* failed to issue start condition(s), possibly no device found */
        
		serial_print_string("I2C BAD ");
    1290:	86 e7       	ldi	r24, 0x76	; 118
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
		i2c_stop();
    1298:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
		serial_print_string("STOP PROG ");
    129c:	8f e7       	ldi	r24, 0x7F	; 127
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
    12a4:	0c 94 92 14 	jmp	0x2924	; 0x2924 <main+0x18d8>
    }
	else {
		serial_print_string("I2C OK ");
    12a8:	8a e8       	ldi	r24, 0x8A	; 138
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
        /* issuing start conditions ok, devices accessible */
		serial_print_string("BINIT ");
    12b0:	82 e9       	ldi	r24, 0x92	; 146
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
    12b8:	80 e4       	ldi	r24, 0x40	; 64
    12ba:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
		i2c_write(0x6);
    12be:	86 e0       	ldi	r24, 0x06	; 6
    12c0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(0x0);
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(0x0);
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_stop();
    12d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

		i2c_start(I2C1+I2C_WRITE);
    12d4:	80 e4       	ldi	r24, 0x40	; 64
    12d6:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
		i2c_write(0x2);
    12da:	82 e0       	ldi	r24, 0x02	; 2
    12dc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    12e0:	80 91 45 09 	lds	r24, 0x0945
    12e4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    12e8:	80 91 41 09 	lds	r24, 0x0941
    12ec:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_stop();
    12f0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

        i2c_start(I2C2+I2C_WRITE);       //moved above to make sure right outputs are available
    12f4:	82 e4       	ldi	r24, 0x42	; 66
    12f6:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
        i2c_write(0x2);
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
        i2c_write(u_outputByte0.outputByte0);
    1300:	80 91 44 09 	lds	r24, 0x0944
    1304:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
        i2c_write(u_outputByte1.outputByte1);
    1308:	80 91 42 09 	lds	r24, 0x0942
    130c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
        i2c_stop();
    1310:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
    1314:	82 e4       	ldi	r24, 0x42	; 66
    1316:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
		i2c_write(0x6);
    131a:	86 e0       	ldi	r24, 0x06	; 6
    131c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(0x0);
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(0x0);
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_stop();
    132c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

		
		//Registers default to input, so I2C3 is fine already

		u_motorByte1.bits_in_motorByte1.enableAll = 0;	//Enables all motor drivers after startup
    1330:	80 91 41 09 	lds	r24, 0x0941
    1334:	8f 77       	andi	r24, 0x7F	; 127
    1336:	80 93 41 09 	sts	0x0941, r24
		i2c_start(I2C1+I2C_WRITE);
    133a:	80 e4       	ldi	r24, 0x40	; 64
    133c:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
		i2c_write(0x2);
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    1346:	80 91 45 09 	lds	r24, 0x0945
    134a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    134e:	80 91 41 09 	lds	r24, 0x0941
    1352:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_stop();
    1356:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>


		delay_ms(1000);
    135a:	88 ee       	ldi	r24, 0xE8	; 232
    135c:	93 e0       	ldi	r25, 0x03	; 3
    135e:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <delay_ms>
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
    1362:	89 e9       	ldi	r24, 0x99	; 153
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
		int selection = !is_digital_input_high(IO_D3);
    136a:	83 e0       	ldi	r24, 0x03	; 3
    136c:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1370:	00 e0       	ldi	r16, 0x00	; 0
    1372:	10 e0       	ldi	r17, 0x00	; 0
    1374:	88 23       	and	r24, r24
    1376:	11 f4       	brne	.+4      	; 0x137c <main+0x330>
    1378:	01 e0       	ldi	r16, 0x01	; 1
    137a:	10 e0       	ldi	r17, 0x00	; 0
    137c:	ee 24       	eor	r14, r14
    137e:	ff 24       	eor	r15, r15
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			if(selection != is_digital_input_high(IO_D3)){
    1380:	83 e0       	ldi	r24, 0x03	; 3
    1382:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	08 17       	cp	r16, r24
    138a:	19 07       	cpc	r17, r25
    138c:	49 f0       	breq	.+18     	; 0x13a0 <main+0x354>
				if(!selection){
    138e:	01 2b       	or	r16, r17
    1390:	19 f4       	brne	.+6      	; 0x1398 <main+0x34c>
					serial_print_string("DEBUG");
    1392:	89 ea       	ldi	r24, 0xA9	; 169
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	02 c0       	rjmp	.+4      	; 0x139c <main+0x350>
				}
				else{
					serial_print_string("RUN");
    1398:	8f ea       	ldi	r24, 0xAF	; 175
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
				}
			}
			selection = is_digital_input_high(IO_D3);
    13a0:	83 e0       	ldi	r24, 0x03	; 3
    13a2:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    13a6:	08 2f       	mov	r16, r24
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    13a8:	c7 01       	movw	r24, r14
    13aa:	be 01       	movw	r22, r28
    13ac:	64 5f       	subi	r22, 0xF4	; 244
    13ae:	7f 4f       	sbci	r23, 0xFF	; 255
    13b0:	0e 94 b0 03 	call	0x760	; 0x760 <button_debounce>
    13b4:	18 2f       	mov	r17, r24
			serial_check(); counter++;
    13b6:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <serial_check>
void time_reset(void);

// This is inline for efficiency:
static inline void delay_us(unsigned int microseconds)
{
  __asm__ volatile (
    13ba:	80 91 11 04 	lds	r24, 0x0411
    13be:	90 91 12 04 	lds	r25, 0x0412
    13c2:	6f 93       	push	r22
    13c4:	64 e0       	ldi	r22, 0x04	; 4
    13c6:	6a 95       	dec	r22
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <main+0x37a>
    13ca:	6f 91       	pop	r22
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	c9 f7       	brne	.-14     	; 0x13c2 <main+0x376>
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
		int selection = !is_digital_input_high(IO_D3);
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    13d0:	11 23       	and	r17, r17
    13d2:	29 f4       	brne	.+10     	; 0x13de <main+0x392>
				}
				else{
					serial_print_string("RUN");
				}
			}
			selection = is_digital_input_high(IO_D3);
    13d4:	10 e0       	ldi	r17, 0x00	; 0
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
			serial_check(); counter++;
    13d6:	08 94       	sec
    13d8:	e1 1c       	adc	r14, r1
    13da:	f1 1c       	adc	r15, r1
    13dc:	d1 cf       	rjmp	.-94     	; 0x1380 <main+0x334>
		buttonTriggered = false;
		counter = 0;
		//clear();


		if(is_digital_input_high(IO_D3))							//Tests if the switch is set to Maintenance Mode
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    13e4:	88 23       	and	r24, r24
    13e6:	09 f4       	brne	.+2      	; 0x13ea <main+0x39e>
    13e8:	52 c4       	rjmp	.+2212   	; 0x1c8e <main+0xc42>
		{
			serial_print_string("DEBUG");
    13ea:	89 ea       	ldi	r24, 0xA9	; 169
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
			delay_ms(1000);
    13f2:	88 ee       	ldi	r24, 0xE8	; 232
    13f4:	93 e0       	ldi	r25, 0x03	; 3
    13f6:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <delay_ms>
    13fa:	88 24       	eor	r8, r8
    13fc:	99 24       	eor	r9, r9
    13fe:	66 24       	eor	r6, r6
    1400:	77 24       	eor	r7, r7
    1402:	44 24       	eor	r4, r4
    1404:	55 24       	eor	r5, r5
    1406:	bb 24       	eor	r11, r11
    1408:	b3 94       	inc	r11
    140a:	22 24       	eor	r2, r2
    140c:	2a 94       	dec	r2
    140e:	32 2c       	mov	r3, r2
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1410:	84 e4       	ldi	r24, 0x44	; 68
    1412:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				i2c_write(0x0);								// write command byte
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    141c:	85 e4       	ldi	r24, 0x45	; 69
    141e:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1422:	0e 94 08 01 	call	0x210	; 0x210 <i2c_readAck>
    1426:	80 93 40 09 	sts	0x0940, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    142a:	0e 94 12 01 	call	0x224	; 0x224 <i2c_readNak>
    142e:	80 93 43 09 	sts	0x0943, r24
  	 	     	i2c_stop();								// set stop condition = release bus 		
    1432:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1436:	c3 01       	movw	r24, r6
    1438:	be 01       	movw	r22, r28
    143a:	64 5f       	subi	r22, 0xF4	; 244
    143c:	7f 4f       	sbci	r23, 0xFF	; 255
    143e:	0e 94 b0 03 	call	0x760	; 0x760 <button_debounce>
    1442:	18 2f       	mov	r17, r24
							Output 			--     starts testing each output individually and ends after testing all outputs
							Motor			--     starts testing each motor individually and ends after testing all motors
							Multi motor		--     starts testing each the fixture motor with each of the brush motors

				*/
				if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != INPUT){
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    144a:	88 23       	and	r24, r24
    144c:	c1 f4       	brne	.+48     	; 0x147e <main+0x432>
    144e:	82 e0       	ldi	r24, 0x02	; 2
    1450:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1454:	88 23       	and	r24, r24
    1456:	99 f4       	brne	.+38     	; 0x147e <main+0x432>
    1458:	21 14       	cp	r2, r1
    145a:	31 04       	cpc	r3, r1
    145c:	81 f0       	breq	.+32     	; 0x147e <main+0x432>
					state = S0;
					submode = INPUT;
					//clear();
					serial_print_string("INPUTS ");
    145e:	83 eb       	ldi	r24, 0xB3	; 179
    1460:	91 e0       	ldi	r25, 0x01	; 1
    1462:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
					lcd_goto_xy(0,1);
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
    146e:	88 24       	eor	r8, r8
    1470:	99 24       	eor	r9, r9
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	9e 87       	std	Y+14, r25	; 0x0e
    1476:	bb 24       	eor	r11, r11
    1478:	b3 94       	inc	r11
    147a:	22 24       	eor	r2, r2
    147c:	33 24       	eor	r3, r3
					printVar = true;
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != OUTPUT){
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1484:	88 23       	and	r24, r24
    1486:	d9 f0       	breq	.+54     	; 0x14be <main+0x472>
    1488:	82 e0       	ldi	r24, 0x02	; 2
    148a:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    148e:	88 23       	and	r24, r24
    1490:	b1 f4       	brne	.+44     	; 0x14be <main+0x472>
    1492:	21 e0       	ldi	r18, 0x01	; 1
    1494:	22 16       	cp	r2, r18
    1496:	31 04       	cpc	r3, r1
    1498:	91 f0       	breq	.+36     	; 0x14be <main+0x472>
					state = O0_ON;
					submode = OUTPUT;
					//clear();
					serial_print_string("OUTPUTS");
    149a:	8b eb       	ldi	r24, 0xBB	; 187
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
					lcd_goto_xy(0,1);
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	61 e0       	ldi	r22, 0x01	; 1
    14a6:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
    14aa:	b8 e0       	ldi	r27, 0x08	; 8
    14ac:	8b 2e       	mov	r8, r27
    14ae:	91 2c       	mov	r9, r1
    14b0:	31 e0       	ldi	r19, 0x01	; 1
    14b2:	3e 87       	std	Y+14, r19	; 0x0e
    14b4:	bb 24       	eor	r11, r11
    14b6:	b3 94       	inc	r11
    14b8:	a1 e0       	ldi	r26, 0x01	; 1
    14ba:	2a 2e       	mov	r2, r26
    14bc:	31 2c       	mov	r3, r1
					printVar = true;
					switched = true;
				}
				if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MOTOR){
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    14c4:	88 23       	and	r24, r24
    14c6:	01 f5       	brne	.+64     	; 0x1508 <main+0x4bc>
    14c8:	82 e0       	ldi	r24, 0x02	; 2
    14ca:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    14ce:	88 23       	and	r24, r24
    14d0:	d9 f0       	breq	.+54     	; 0x1508 <main+0x4bc>
    14d2:	42 e0       	ldi	r20, 0x02	; 2
    14d4:	24 16       	cp	r2, r20
    14d6:	31 04       	cpc	r3, r1
    14d8:	b9 f0       	breq	.+46     	; 0x1508 <main+0x4bc>
					state = M1_F;
					submode = MOTOR;
					//clear();
					serial_print_string("MOTORS ");
    14da:	83 ec       	ldi	r24, 0xC3	; 195
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
					lcd_goto_xy(0,1);
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    14ea:	80 91 45 09 	lds	r24, 0x0945
    14ee:	84 60       	ori	r24, 0x04	; 4
    14f0:	80 93 45 09 	sts	0x0945, r24
    14f4:	f4 e2       	ldi	r31, 0x24	; 36
    14f6:	8f 2e       	mov	r8, r31
    14f8:	91 2c       	mov	r9, r1
    14fa:	51 e0       	ldi	r21, 0x01	; 1
    14fc:	5e 87       	std	Y+14, r21	; 0x0e
    14fe:	bb 24       	eor	r11, r11
    1500:	b3 94       	inc	r11
    1502:	e2 e0       	ldi	r30, 0x02	; 2
    1504:	2e 2e       	mov	r2, r30
    1506:	31 2c       	mov	r3, r1
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MULTI){
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    150e:	88 23       	and	r24, r24
    1510:	21 f1       	breq	.+72     	; 0x155a <main+0x50e>
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1518:	88 23       	and	r24, r24
    151a:	f9 f0       	breq	.+62     	; 0x155a <main+0x50e>
    151c:	83 e0       	ldi	r24, 0x03	; 3
    151e:	28 16       	cp	r2, r24
    1520:	31 04       	cpc	r3, r1
    1522:	d9 f0       	breq	.+54     	; 0x155a <main+0x50e>
					state = M2_AND_M3;
					submode = MULTI;
					//clear();
					serial_print_string("MULTI MOTOR");
    1524:	8b ec       	ldi	r24, 0xCB	; 203
    1526:	91 e0       	ldi	r25, 0x01	; 1
    1528:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
					lcd_goto_xy(0,1);
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	61 e0       	ldi	r22, 0x01	; 1
    1530:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1534:	80 91 45 09 	lds	r24, 0x0945
    1538:	80 62       	ori	r24, 0x20	; 32
    153a:	80 93 45 09 	sts	0x0945, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    153e:	80 91 41 09 	lds	r24, 0x0941
    1542:	81 60       	ori	r24, 0x01	; 1
    1544:	80 93 41 09 	sts	0x0941, r24
    1548:	7e e2       	ldi	r23, 0x2E	; 46
    154a:	87 2e       	mov	r8, r23
    154c:	91 2c       	mov	r9, r1
    154e:	bb 24       	eor	r11, r11
    1550:	b3 94       	inc	r11
    1552:	63 e0       	ldi	r22, 0x03	; 3
    1554:	26 2e       	mov	r2, r22
    1556:	31 2c       	mov	r3, r1
    1558:	03 c0       	rjmp	.+6      	; 0x1560 <main+0x514>
					switched = true;
				}
				if(switched){
    155a:	9e 85       	ldd	r25, Y+14	; 0x0e
    155c:	99 23       	and	r25, r25
    155e:	c9 f0       	breq	.+50     	; 0x1592 <main+0x546>
					plateLoadMotor = 0;
    1560:	1b 82       	std	Y+3, r1	; 0x03
    1562:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    1564:	1d 82       	std	Y+5, r1	; 0x05
    1566:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    1568:	1f 82       	std	Y+7, r1	; 0x07
    156a:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    156c:	19 86       	std	Y+9, r1	; 0x09
    156e:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    1570:	1b 86       	std	Y+11, r1	; 0x0b
    1572:	1a 86       	std	Y+10, r1	; 0x0a
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
    1574:	8f ef       	ldi	r24, 0xFF	; 255
    1576:	80 93 44 09 	sts	0x0944, r24
					u_outputByte1.outputByte1 = 15;  // reset outputByte1
    157a:	8f e0       	ldi	r24, 0x0F	; 15
    157c:	80 93 42 09 	sts	0x0942, r24
					if(submode != MOTOR && submode != MULTI){
    1580:	c1 01       	movw	r24, r2
    1582:	02 97       	sbiw	r24, 0x02	; 2
    1584:	02 97       	sbiw	r24, 0x02	; 2
    1586:	20 f0       	brcs	.+8      	; 0x1590 <main+0x544>
						u_motorByte0.motorByte0 = 0;	  // reset motorByte0
    1588:	10 92 45 09 	sts	0x0945, r1
						u_motorByte1.motorByte1 = 0;	  // reset motorByte1
    158c:	10 92 41 09 	sts	0x0941, r1
    1590:	1e 86       	std	Y+14, r1	; 0x0e
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
    1592:	11 23       	and	r17, r17
    1594:	09 f4       	brne	.+2      	; 0x1598 <main+0x54c>
    1596:	c6 c0       	rjmp	.+396    	; 0x1724 <main+0x6d8>
					if(state <= S7){				//if it's doing the sensors
    1598:	28 e0       	ldi	r18, 0x08	; 8
    159a:	82 16       	cp	r8, r18
    159c:	91 04       	cpc	r9, r1
    159e:	74 f4       	brge	.+28     	; 0x15bc <main+0x570>
						lastVal = -1;
						lcd_goto_xy(0,1);
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	61 e0       	ldi	r22, 0x01	; 1
    15a4:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
						buttonTriggered = false;
						state ++;
    15a8:	08 94       	sec
    15aa:	81 1c       	adc	r8, r1
    15ac:	91 1c       	adc	r9, r1
						counterRef = counter;
						printVar = true;
						if(state == S7 + 1){		//accounts for end of maintenance mode after sensors
    15ae:	38 e0       	ldi	r19, 0x08	; 8
    15b0:	83 16       	cp	r8, r19
    15b2:	91 04       	cpc	r9, r1
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <main+0x56c>
    15b6:	ad c0       	rjmp	.+346    	; 0x1712 <main+0x6c6>
    15b8:	0c 94 98 14 	jmp	0x2930	; 0x2930 <main+0x18e4>
							//clear();
							state = DONEM;
						}
					}
					else if(state <= O13_OFF){		//if it's doing the outputs
    15bc:	44 e2       	ldi	r20, 0x24	; 36
    15be:	84 16       	cp	r8, r20
    15c0:	91 04       	cpc	r9, r1
    15c2:	cc f4       	brge	.+50     	; 0x15f6 <main+0x5aa>
						if(state % 2 == 0){			//current state is an 'on' state
    15c4:	80 fc       	sbrc	r8, 0
    15c6:	09 c0       	rjmp	.+18     	; 0x15da <main+0x58e>
							lcd_goto_xy(13,1);
    15c8:	8d e0       	ldi	r24, 0x0D	; 13
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
							serial_print_string("OFF");
    15d0:	87 ed       	ldi	r24, 0xD7	; 215
    15d2:	91 e0       	ldi	r25, 0x01	; 1
    15d4:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
    15d8:	04 c0       	rjmp	.+8      	; 0x15e2 <main+0x596>
						}
						else{						//current state is an 'off' state
							lcd_goto_xy(0,1);
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	61 e0       	ldi	r22, 0x01	; 1
    15de:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
						}
						buttonTriggered = false;
						state ++;
    15e2:	08 94       	sec
    15e4:	81 1c       	adc	r8, r1
    15e6:	91 1c       	adc	r9, r1
						counterRef = counter;
						printVar = true;
						if(state == O13_OFF + 1){	//accounts for end of maintenance mode after outputs
    15e8:	54 e2       	ldi	r21, 0x24	; 36
    15ea:	85 16       	cp	r8, r21
    15ec:	91 04       	cpc	r9, r1
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <main+0x5a6>
    15f0:	96 c0       	rjmp	.+300    	; 0x171e <main+0x6d2>
    15f2:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <main+0x18ec>
    15f6:	84 01       	movw	r16, r8
    15f8:	0f 5f       	subi	r16, 0xFF	; 255
    15fa:	1f 4f       	sbci	r17, 0xFF	; 255
							//clear();
							state = DONEM;
						}
					}
					else if(state <= M5_B){							//if it's doing the motors
    15fc:	8e e2       	ldi	r24, 0x2E	; 46
    15fe:	88 16       	cp	r8, r24
    1600:	91 04       	cpc	r9, r1
    1602:	0c f0       	brlt	.+2      	; 0x1606 <main+0x5ba>
    1604:	5d c0       	rjmp	.+186    	; 0x16c0 <main+0x674>
						buttonTriggered = false;
						state ++;
						counterRef = counter;
						printVar = true;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
    1606:	80 fc       	sbrc	r8, 0
    1608:	09 c0       	rjmp	.+18     	; 0x161c <main+0x5d0>
							lcd_goto_xy(11,1);
    160a:	8b e0       	ldi	r24, 0x0B	; 11
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
							serial_print_string("BACK ");
    1612:	8b ed       	ldi	r24, 0xDB	; 219
    1614:	91 e0       	ldi	r25, 0x01	; 1
    1616:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
    161a:	13 c0       	rjmp	.+38     	; 0x1642 <main+0x5f6>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
    161c:	0a 32       	cpi	r16, 0x2A	; 42
    161e:	11 05       	cpc	r17, r1
    1620:	71 f1       	breq	.+92     	; 0x167e <main+0x632>
    1622:	0b 32       	cpi	r16, 0x2B	; 43
    1624:	11 05       	cpc	r17, r1
    1626:	3c f4       	brge	.+14     	; 0x1636 <main+0x5ea>
    1628:	06 32       	cpi	r16, 0x26	; 38
    162a:	11 05       	cpc	r17, r1
    162c:	61 f0       	breq	.+24     	; 0x1646 <main+0x5fa>
    162e:	08 32       	cpi	r16, 0x28	; 40
    1630:	11 05       	cpc	r17, r1
    1632:	39 f4       	brne	.+14     	; 0x1642 <main+0x5f6>
    1634:	14 c0       	rjmp	.+40     	; 0x165e <main+0x612>
    1636:	0c 32       	cpi	r16, 0x2C	; 44
    1638:	11 05       	cpc	r17, r1
    163a:	69 f1       	breq	.+90     	; 0x1696 <main+0x64a>
    163c:	0e 32       	cpi	r16, 0x2E	; 46
    163e:	11 05       	cpc	r17, r1
    1640:	b1 f1       	breq	.+108    	; 0x16ae <main+0x662>
    1642:	48 01       	movw	r8, r16
    1644:	6c c0       	rjmp	.+216    	; 0x171e <main+0x6d2>
								case M1_B + 1:
									lcd_goto_xy(0,1);
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    164e:	80 91 45 09 	lds	r24, 0x0945
    1652:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1654:	80 62       	ori	r24, 0x20	; 32
    1656:	80 93 45 09 	sts	0x0945, r24
    165a:	23 01       	movw	r4, r6
    165c:	55 c2       	rjmp	.+1194   	; 0x1b08 <main+0xabc>
									break;
								case M2_B + 1:
									lcd_goto_xy(0,1);
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1666:	80 91 45 09 	lds	r24, 0x0945
    166a:	8f 7d       	andi	r24, 0xDF	; 223
    166c:	80 93 45 09 	sts	0x0945, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    1670:	80 91 41 09 	lds	r24, 0x0941
    1674:	81 60       	ori	r24, 0x01	; 1
    1676:	80 93 41 09 	sts	0x0941, r24
    167a:	23 01       	movw	r4, r6
    167c:	65 c2       	rjmp	.+1226   	; 0x1b48 <main+0xafc>
									break;
								case M3_B + 1:
									lcd_goto_xy(0,1);
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	61 e0       	ldi	r22, 0x01	; 1
    1682:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1686:	80 91 41 09 	lds	r24, 0x0941
    168a:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    168c:	88 60       	ori	r24, 0x08	; 8
    168e:	80 93 41 09 	sts	0x0941, r24
    1692:	23 01       	movw	r4, r6
    1694:	79 c2       	rjmp	.+1266   	; 0x1b88 <main+0xb3c>
									break;
								case M4_B + 1:
									lcd_goto_xy(0,1);
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    169e:	80 91 41 09 	lds	r24, 0x0941
    16a2:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    16a4:	80 64       	ori	r24, 0x40	; 64
    16a6:	80 93 41 09 	sts	0x0941, r24
    16aa:	23 01       	movw	r4, r6
    16ac:	8d c2       	rjmp	.+1306   	; 0x1bc8 <main+0xb7c>
									break;
								case M5_B + 1:
									//clear();
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    16ae:	80 91 41 09 	lds	r24, 0x0941
    16b2:	8f 7b       	andi	r24, 0xBF	; 191
    16b4:	80 93 41 09 	sts	0x0941, r24
									state = DONEM;
									paperTowelMotor = 0;
    16b8:	1b 86       	std	Y+11, r1	; 0x0b
    16ba:	1a 86       	std	Y+10, r1	; 0x0a
    16bc:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <main+0x18ec>
							}
						}
					}
					else{
						buttonTriggered = false;
						state ++;
    16c0:	48 01       	movw	r8, r16
						counterRef = counter;
						printVar = true;
						switch(state){
    16c2:	0f 32       	cpi	r16, 0x2F	; 47
    16c4:	11 05       	cpc	r17, r1
    16c6:	21 f0       	breq	.+8      	; 0x16d0 <main+0x684>
    16c8:	00 33       	cpi	r16, 0x30	; 48
    16ca:	11 05       	cpc	r17, r1
    16cc:	41 f5       	brne	.+80     	; 0x171e <main+0x6d2>
    16ce:	11 c0       	rjmp	.+34     	; 0x16f2 <main+0x6a6>
							case M2_AND_M3 + 1:
								lcd_goto_xy(0,1);
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
								u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    16d8:	90 91 41 09 	lds	r25, 0x0941
    16dc:	9e 7f       	andi	r25, 0xFE	; 254
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    16de:	80 91 45 09 	lds	r24, 0x0945
    16e2:	80 62       	ori	r24, 0x20	; 32
    16e4:	80 93 45 09 	sts	0x0945, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    16e8:	98 60       	ori	r25, 0x08	; 8
    16ea:	90 93 41 09 	sts	0x0941, r25
    16ee:	23 01       	movw	r4, r6
    16f0:	98 c2       	rjmp	.+1328   	; 0x1c22 <main+0xbd6>
								break;
							case M2_AND_M4 + 1:
								//clear();
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    16f2:	80 91 45 09 	lds	r24, 0x0945
    16f6:	8f 7d       	andi	r24, 0xDF	; 223
    16f8:	80 93 45 09 	sts	0x0945, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    16fc:	80 91 41 09 	lds	r24, 0x0941
    1700:	87 7f       	andi	r24, 0xF7	; 247
    1702:	80 93 41 09 	sts	0x0941, r24
								state = DONEM;
								fixtureMotor = 0;
    1706:	1d 82       	std	Y+5, r1	; 0x05
    1708:	1c 82       	std	Y+4, r1	; 0x04
								brush2Motor = 0;
    170a:	19 86       	std	Y+9, r1	; 0x09
    170c:	18 86       	std	Y+8, r1	; 0x08
    170e:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <main+0x18ec>
    1712:	23 01       	movw	r4, r6
    1714:	4f ef       	ldi	r20, 0xFF	; 255
    1716:	5f ef       	ldi	r21, 0xFF	; 255
    1718:	58 8b       	std	Y+16, r21	; 0x10
    171a:	4f 87       	std	Y+15, r20	; 0x0f
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <main+0x6d4>
    171e:	23 01       	movw	r4, r6
    1720:	bb 24       	eor	r11, r11
    1722:	b3 94       	inc	r11
						}
					}
				}

				//state actions
				switch (state) {
    1724:	f4 01       	movw	r30, r8
    1726:	e0 33       	cpi	r30, 0x30	; 48
    1728:	f1 05       	cpc	r31, r1
    172a:	08 f0       	brcs	.+2      	; 0x172e <main+0x6e2>
    172c:	8c c2       	rjmp	.+1304   	; 0x1c46 <main+0xbfa>
    172e:	ea 5b       	subi	r30, 0xBA	; 186
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	ee 0f       	add	r30, r30
    1734:	ff 1f       	adc	r31, r31
    1736:	05 90       	lpm	r0, Z+
    1738:	f4 91       	lpm	r31, Z+
    173a:	e0 2d       	mov	r30, r0
    173c:	09 94       	ijmp
					case S0:
						if(printVar){
    173e:	bb 20       	and	r11, r11
    1740:	21 f0       	breq	.+8      	; 0x174a <main+0x6fe>
							serial_print_string("SENSOR 1");
    1742:	81 ee       	ldi	r24, 0xE1	; 225
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    174a:	8f e0       	ldi	r24, 0x0F	; 15
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.plate){
    1752:	80 91 40 09 	lds	r24, 0x0940
    1756:	81 70       	andi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	2f 85       	ldd	r18, Y+15	; 0x0f
    175c:	38 89       	ldd	r19, Y+16	; 0x10
    175e:	28 17       	cp	r18, r24
    1760:	39 07       	cpc	r19, r25
    1762:	09 f4       	brne	.+2      	; 0x1766 <main+0x71a>
    1764:	6f c2       	rjmp	.+1246   	; 0x1c44 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.plate);
    1766:	0e 94 08 08 	call	0x1010	; 0x1010 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.plate;
    176a:	80 91 40 09 	lds	r24, 0x0940
    176e:	b0 c0       	rjmp	.+352    	; 0x18d0 <main+0x884>
						}							
						break;
					case S1:
						if(printVar){
    1770:	bb 20       	and	r11, r11
    1772:	21 f0       	breq	.+8      	; 0x177c <main+0x730>
							serial_print_string("SENSOR 2");
    1774:	8a ee       	ldi	r24, 0xEA	; 234
    1776:	91 e0       	ldi	r25, 0x01	; 1
    1778:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    177c:	8f e0       	ldi	r24, 0x0F	; 15
    177e:	61 e0       	ldi	r22, 0x01	; 1
    1780:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureHome){
    1784:	80 91 40 09 	lds	r24, 0x0940
    1788:	86 95       	lsr	r24
    178a:	81 70       	andi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1790:	38 89       	ldd	r19, Y+16	; 0x10
    1792:	28 17       	cp	r18, r24
    1794:	39 07       	cpc	r19, r25
    1796:	09 f4       	brne	.+2      	; 0x179a <main+0x74e>
    1798:	55 c2       	rjmp	.+1194   	; 0x1c44 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureHome);
    179a:	0e 94 08 08 	call	0x1010	; 0x1010 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureHome;
    179e:	80 91 40 09 	lds	r24, 0x0940
    17a2:	86 95       	lsr	r24
    17a4:	95 c0       	rjmp	.+298    	; 0x18d0 <main+0x884>
						}							
						break;
					case S2:
						if(printVar){
    17a6:	bb 20       	and	r11, r11
    17a8:	21 f0       	breq	.+8      	; 0x17b2 <main+0x766>
							serial_print_string("SENSOR 3");
    17aa:	83 ef       	ldi	r24, 0xF3	; 243
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    17b2:	8f e0       	ldi	r24, 0x0F	; 15
    17b4:	61 e0       	ldi	r22, 0x01	; 1
    17b6:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureLift){
    17ba:	80 91 40 09 	lds	r24, 0x0940
    17be:	86 95       	lsr	r24
    17c0:	86 95       	lsr	r24
    17c2:	81 70       	andi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	2f 85       	ldd	r18, Y+15	; 0x0f
    17c8:	38 89       	ldd	r19, Y+16	; 0x10
    17ca:	28 17       	cp	r18, r24
    17cc:	39 07       	cpc	r19, r25
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <main+0x786>
    17d0:	39 c2       	rjmp	.+1138   	; 0x1c44 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureLift);
    17d2:	0e 94 08 08 	call	0x1010	; 0x1010 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureLift;
    17d6:	80 91 40 09 	lds	r24, 0x0940
    17da:	86 95       	lsr	r24
    17dc:	86 95       	lsr	r24
    17de:	78 c0       	rjmp	.+240    	; 0x18d0 <main+0x884>
						}							
						break;
					case S3:
						if(printVar){
    17e0:	bb 20       	and	r11, r11
    17e2:	21 f0       	breq	.+8      	; 0x17ec <main+0x7a0>
							serial_print_string("SENSOR 4");
    17e4:	8c ef       	ldi	r24, 0xFC	; 252
    17e6:	91 e0       	ldi	r25, 0x01	; 1
    17e8:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    17ec:	8f e0       	ldi	r24, 0x0F	; 15
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixturePlate){
    17f4:	80 91 40 09 	lds	r24, 0x0940
    17f8:	86 95       	lsr	r24
    17fa:	86 95       	lsr	r24
    17fc:	86 95       	lsr	r24
    17fe:	81 70       	andi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	2f 85       	ldd	r18, Y+15	; 0x0f
    1804:	38 89       	ldd	r19, Y+16	; 0x10
    1806:	28 17       	cp	r18, r24
    1808:	39 07       	cpc	r19, r25
    180a:	09 f4       	brne	.+2      	; 0x180e <main+0x7c2>
    180c:	1b c2       	rjmp	.+1078   	; 0x1c44 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixturePlate);
    180e:	0e 94 08 08 	call	0x1010	; 0x1010 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixturePlate;
    1812:	80 91 40 09 	lds	r24, 0x0940
    1816:	86 95       	lsr	r24
    1818:	86 95       	lsr	r24
    181a:	86 95       	lsr	r24
    181c:	59 c0       	rjmp	.+178    	; 0x18d0 <main+0x884>
						}							
						break;
					case S4:
						if(printVar){
    181e:	bb 20       	and	r11, r11
    1820:	21 f0       	breq	.+8      	; 0x182a <main+0x7de>
							serial_print_string("SENSOR 5");
    1822:	85 e0       	ldi	r24, 0x05	; 5
    1824:	92 e0       	ldi	r25, 0x02	; 2
    1826:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    182a:	8f e0       	ldi	r24, 0x0F	; 15
    182c:	61 e0       	ldi	r22, 0x01	; 1
    182e:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush1){
    1832:	80 91 40 09 	lds	r24, 0x0940
    1836:	82 95       	swap	r24
    1838:	81 70       	andi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	2f 85       	ldd	r18, Y+15	; 0x0f
    183e:	38 89       	ldd	r19, Y+16	; 0x10
    1840:	28 17       	cp	r18, r24
    1842:	39 07       	cpc	r19, r25
    1844:	09 f4       	brne	.+2      	; 0x1848 <main+0x7fc>
    1846:	fe c1       	rjmp	.+1020   	; 0x1c44 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
    1848:	0e 94 08 08 	call	0x1010	; 0x1010 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush1;
    184c:	80 91 40 09 	lds	r24, 0x0940
    1850:	82 95       	swap	r24
    1852:	8f 70       	andi	r24, 0x0F	; 15
    1854:	3d c0       	rjmp	.+122    	; 0x18d0 <main+0x884>
						}							
						break;
					case S5:
						if(printVar){
    1856:	bb 20       	and	r11, r11
    1858:	21 f0       	breq	.+8      	; 0x1862 <main+0x816>
							serial_print_string("SENSOR 6");
    185a:	8e e0       	ldi	r24, 0x0E	; 14
    185c:	92 e0       	ldi	r25, 0x02	; 2
    185e:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1862:	8f e0       	ldi	r24, 0x0F	; 15
    1864:	61 e0       	ldi	r22, 0x01	; 1
    1866:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush2){
    186a:	80 91 40 09 	lds	r24, 0x0940
    186e:	82 95       	swap	r24
    1870:	86 95       	lsr	r24
    1872:	81 70       	andi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	2f 85       	ldd	r18, Y+15	; 0x0f
    1878:	38 89       	ldd	r19, Y+16	; 0x10
    187a:	28 17       	cp	r18, r24
    187c:	39 07       	cpc	r19, r25
    187e:	09 f4       	brne	.+2      	; 0x1882 <main+0x836>
    1880:	e1 c1       	rjmp	.+962    	; 0x1c44 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
    1882:	0e 94 08 08 	call	0x1010	; 0x1010 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush2;
    1886:	80 91 40 09 	lds	r24, 0x0940
    188a:	82 95       	swap	r24
    188c:	86 95       	lsr	r24
    188e:	87 70       	andi	r24, 0x07	; 7
    1890:	1f c0       	rjmp	.+62     	; 0x18d0 <main+0x884>
						}							
						break;
					case S6:
						if(printVar){
    1892:	bb 20       	and	r11, r11
    1894:	21 f0       	breq	.+8      	; 0x189e <main+0x852>
							serial_print_string("SENSOR 7");
    1896:	87 e1       	ldi	r24, 0x17	; 23
    1898:	92 e0       	ldi	r25, 0x02	; 2
    189a:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    189e:	8f e0       	ldi	r24, 0x0F	; 15
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry1){
    18a6:	80 91 40 09 	lds	r24, 0x0940
    18aa:	82 95       	swap	r24
    18ac:	86 95       	lsr	r24
    18ae:	86 95       	lsr	r24
    18b0:	81 70       	andi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	2f 85       	ldd	r18, Y+15	; 0x0f
    18b6:	38 89       	ldd	r19, Y+16	; 0x10
    18b8:	28 17       	cp	r18, r24
    18ba:	39 07       	cpc	r19, r25
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <main+0x874>
    18be:	c2 c1       	rjmp	.+900    	; 0x1c44 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry1);
    18c0:	0e 94 08 08 	call	0x1010	; 0x1010 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry1;
    18c4:	80 91 40 09 	lds	r24, 0x0940
    18c8:	82 95       	swap	r24
    18ca:	86 95       	lsr	r24
    18cc:	86 95       	lsr	r24
    18ce:	83 70       	andi	r24, 0x03	; 3
    18d0:	81 70       	andi	r24, 0x01	; 1
    18d2:	1d c0       	rjmp	.+58     	; 0x190e <main+0x8c2>
						}							
						break;
					case S7:
						if(printVar){
    18d4:	bb 20       	and	r11, r11
    18d6:	21 f0       	breq	.+8      	; 0x18e0 <main+0x894>
							serial_print_string("SENSOR 8");
    18d8:	80 e2       	ldi	r24, 0x20	; 32
    18da:	92 e0       	ldi	r25, 0x02	; 2
    18dc:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    18e0:	8f e0       	ldi	r24, 0x0F	; 15
    18e2:	61 e0       	ldi	r22, 0x01	; 1
    18e4:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry2){
    18e8:	80 91 40 09 	lds	r24, 0x0940
    18ec:	88 1f       	adc	r24, r24
    18ee:	88 27       	eor	r24, r24
    18f0:	88 1f       	adc	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	2f 85       	ldd	r18, Y+15	; 0x0f
    18f6:	38 89       	ldd	r19, Y+16	; 0x10
    18f8:	28 17       	cp	r18, r24
    18fa:	39 07       	cpc	r19, r25
    18fc:	09 f4       	brne	.+2      	; 0x1900 <main+0x8b4>
    18fe:	a2 c1       	rjmp	.+836    	; 0x1c44 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry2);
    1900:	0e 94 08 08 	call	0x1010	; 0x1010 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry2;
    1904:	80 91 40 09 	lds	r24, 0x0940
    1908:	88 1f       	adc	r24, r24
    190a:	88 27       	eor	r24, r24
    190c:	88 1f       	adc	r24, r24
    190e:	48 2f       	mov	r20, r24
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	58 8b       	std	Y+16, r21	; 0x10
    1914:	4f 87       	std	Y+15, r20	; 0x0f
    1916:	96 c1       	rjmp	.+812    	; 0x1c44 <main+0xbf8>
						}							
						break;
					case O0_ON:
						if(printVar){
    1918:	bb 20       	and	r11, r11
    191a:	21 f0       	breq	.+8      	; 0x1924 <main+0x8d8>
							serial_print_string("AC POWER     ON ");
    191c:	89 e2       	ldi	r24, 0x29	; 41
    191e:	92 e0       	ldi	r25, 0x02	; 2
    1920:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1924:	80 91 44 09 	lds	r24, 0x0944
    1928:	8e 7f       	andi	r24, 0xFE	; 254
    192a:	0d c0       	rjmp	.+26     	; 0x1946 <main+0x8fa>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
    192c:	80 91 44 09 	lds	r24, 0x0944
    1930:	81 60       	ori	r24, 0x01	; 1
    1932:	6c c0       	rjmp	.+216    	; 0x1a0c <main+0x9c0>
						break;
					case O1_ON:
						if(printVar){
    1934:	bb 20       	and	r11, r11
    1936:	21 f0       	breq	.+8      	; 0x1940 <main+0x8f4>
							serial_print_string("BLOWER       ON  ");
    1938:	8a e3       	ldi	r24, 0x3A	; 58
    193a:	92 e0       	ldi	r25, 0x02	; 2
    193c:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1940:	80 91 44 09 	lds	r24, 0x0944
    1944:	8d 7f       	andi	r24, 0xFD	; 253
    1946:	80 93 44 09 	sts	0x0944, r24
    194a:	7c c1       	rjmp	.+760    	; 0x1c44 <main+0xbf8>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    194c:	80 91 44 09 	lds	r24, 0x0944
    1950:	82 60       	ori	r24, 0x02	; 2
    1952:	5c c0       	rjmp	.+184    	; 0x1a0c <main+0x9c0>
						break;
					case O2_ON:
						if(printVar){
    1954:	bb 20       	and	r11, r11
    1956:	21 f0       	breq	.+8      	; 0x1960 <main+0x914>
							serial_print_string("PLATE STOP   ON ");
    1958:	8c e4       	ldi	r24, 0x4C	; 76
    195a:	92 e0       	ldi	r25, 0x02	; 2
    195c:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1960:	80 91 44 09 	lds	r24, 0x0944
    1964:	8b 7f       	andi	r24, 0xFB	; 251
    1966:	ef cf       	rjmp	.-34     	; 0x1946 <main+0x8fa>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1968:	80 91 44 09 	lds	r24, 0x0944
    196c:	84 60       	ori	r24, 0x04	; 4
    196e:	4e c0       	rjmp	.+156    	; 0x1a0c <main+0x9c0>
						break;
					case O3_ON:
						if(printVar){
    1970:	bb 20       	and	r11, r11
    1972:	21 f0       	breq	.+8      	; 0x197c <main+0x930>
							serial_print_string("PLATE RAISE  ON ");
    1974:	8d e5       	ldi	r24, 0x5D	; 93
    1976:	92 e0       	ldi	r25, 0x02	; 2
    1978:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    197c:	80 91 44 09 	lds	r24, 0x0944
    1980:	87 7f       	andi	r24, 0xF7	; 247
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1982:	80 61       	ori	r24, 0x10	; 16
    1984:	e0 cf       	rjmp	.-64     	; 0x1946 <main+0x8fa>
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1986:	80 91 44 09 	lds	r24, 0x0944
    198a:	88 60       	ori	r24, 0x08	; 8
    198c:	3f c0       	rjmp	.+126    	; 0x1a0c <main+0x9c0>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(printVar){
    198e:	bb 20       	and	r11, r11
    1990:	21 f0       	breq	.+8      	; 0x199a <main+0x94e>
							serial_print_string("PLATE LOWER  ON ");
    1992:	8e e6       	ldi	r24, 0x6E	; 110
    1994:	92 e0       	ldi	r25, 0x02	; 2
    1996:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    199a:	80 91 44 09 	lds	r24, 0x0944
    199e:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    19a0:	8f 7e       	andi	r24, 0xEF	; 239
    19a2:	d1 cf       	rjmp	.-94     	; 0x1946 <main+0x8fa>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    19a4:	80 91 44 09 	lds	r24, 0x0944
    19a8:	80 61       	ori	r24, 0x10	; 16
    19aa:	30 c0       	rjmp	.+96     	; 0x1a0c <main+0x9c0>
						break;
					case O5_ON:
						if(printVar){
    19ac:	bb 20       	and	r11, r11
    19ae:	21 f0       	breq	.+8      	; 0x19b8 <main+0x96c>
							serial_print_string("BRUSH1 RAISE ON ");
    19b0:	8f e7       	ldi	r24, 0x7F	; 127
    19b2:	92 e0       	ldi	r25, 0x02	; 2
    19b4:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    19b8:	80 91 44 09 	lds	r24, 0x0944
    19bc:	8f 7d       	andi	r24, 0xDF	; 223
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    19be:	80 64       	ori	r24, 0x40	; 64
    19c0:	c2 cf       	rjmp	.-124    	; 0x1946 <main+0x8fa>
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    19c2:	80 91 44 09 	lds	r24, 0x0944
    19c6:	80 62       	ori	r24, 0x20	; 32
    19c8:	21 c0       	rjmp	.+66     	; 0x1a0c <main+0x9c0>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(printVar){
    19ca:	bb 20       	and	r11, r11
    19cc:	21 f0       	breq	.+8      	; 0x19d6 <main+0x98a>
							serial_print_string("BRUSH1 LOWER ON ");
    19ce:	80 e9       	ldi	r24, 0x90	; 144
    19d0:	92 e0       	ldi	r25, 0x02	; 2
    19d2:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    19d6:	80 91 44 09 	lds	r24, 0x0944
    19da:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    19dc:	80 62       	ori	r24, 0x20	; 32
    19de:	b3 cf       	rjmp	.-154    	; 0x1946 <main+0x8fa>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    19e0:	80 91 44 09 	lds	r24, 0x0944
    19e4:	80 64       	ori	r24, 0x40	; 64
    19e6:	12 c0       	rjmp	.+36     	; 0x1a0c <main+0x9c0>
						break;
					case O7_ON:
						if(printVar){
    19e8:	bb 20       	and	r11, r11
    19ea:	21 f0       	breq	.+8      	; 0x19f4 <main+0x9a8>
							serial_print_string("BRUSH2 RAISE ON ");
    19ec:	81 ea       	ldi	r24, 0xA1	; 161
    19ee:	92 e0       	ldi	r25, 0x02	; 2
    19f0:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    19f4:	80 91 44 09 	lds	r24, 0x0944
    19f8:	8f 77       	andi	r24, 0x7F	; 127
    19fa:	80 93 44 09 	sts	0x0944, r24
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    19fe:	80 91 42 09 	lds	r24, 0x0942
    1a02:	81 60       	ori	r24, 0x01	; 1
    1a04:	5c c0       	rjmp	.+184    	; 0x1abe <main+0xa72>
						break;
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1a06:	80 91 44 09 	lds	r24, 0x0944
    1a0a:	80 68       	ori	r24, 0x80	; 128
    1a0c:	80 93 44 09 	sts	0x0944, r24
    1a10:	1a c1       	rjmp	.+564    	; 0x1c46 <main+0xbfa>
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(printVar){
    1a12:	bb 20       	and	r11, r11
    1a14:	21 f0       	breq	.+8      	; 0x1a1e <main+0x9d2>
							serial_print_string("BRUSH2 LOWER ON ");
    1a16:	82 eb       	ldi	r24, 0xB2	; 178
    1a18:	92 e0       	ldi	r25, 0x02	; 2
    1a1a:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1a1e:	80 91 42 09 	lds	r24, 0x0942
    1a22:	8e 7f       	andi	r24, 0xFE	; 254
    1a24:	80 93 42 09 	sts	0x0942, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1a28:	80 91 44 09 	lds	r24, 0x0944
    1a2c:	80 68       	ori	r24, 0x80	; 128
    1a2e:	8b cf       	rjmp	.-234    	; 0x1946 <main+0x8fa>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1a30:	80 91 42 09 	lds	r24, 0x0942
    1a34:	81 60       	ori	r24, 0x01	; 1
    1a36:	49 c0       	rjmp	.+146    	; 0x1aca <main+0xa7e>
						break;
					case O9_ON:
						if(printVar){
    1a38:	bb 20       	and	r11, r11
    1a3a:	21 f0       	breq	.+8      	; 0x1a44 <main+0x9f8>
							serial_print_string("PAPER RAISE  ON ");
    1a3c:	83 ec       	ldi	r24, 0xC3	; 195
    1a3e:	92 e0       	ldi	r25, 0x02	; 2
    1a40:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1a44:	80 91 42 09 	lds	r24, 0x0942
    1a48:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    1a4a:	82 60       	ori	r24, 0x02	; 2
    1a4c:	38 c0       	rjmp	.+112    	; 0x1abe <main+0xa72>
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1a4e:	80 91 42 09 	lds	r24, 0x0942
    1a52:	84 60       	ori	r24, 0x04	; 4
    1a54:	3a c0       	rjmp	.+116    	; 0x1aca <main+0xa7e>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(printVar){
    1a56:	bb 20       	and	r11, r11
    1a58:	21 f0       	breq	.+8      	; 0x1a62 <main+0xa16>
							serial_print_string("PAPER LOWER  ON ");
    1a5a:	84 ed       	ldi	r24, 0xD4	; 212
    1a5c:	92 e0       	ldi	r25, 0x02	; 2
    1a5e:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1a62:	80 91 42 09 	lds	r24, 0x0942
    1a66:	8d 7f       	andi	r24, 0xFD	; 253
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1a68:	84 60       	ori	r24, 0x04	; 4
    1a6a:	29 c0       	rjmp	.+82     	; 0x1abe <main+0xa72>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    1a6c:	80 91 42 09 	lds	r24, 0x0942
    1a70:	82 60       	ori	r24, 0x02	; 2
    1a72:	2b c0       	rjmp	.+86     	; 0x1aca <main+0xa7e>
						break;
					case O11_ON:
						if(printVar){
    1a74:	bb 20       	and	r11, r11
    1a76:	21 f0       	breq	.+8      	; 0x1a80 <main+0xa34>
							serial_print_string("AIR KNIFE    ON ");
    1a78:	85 ee       	ldi	r24, 0xE5	; 229
    1a7a:	92 e0       	ldi	r25, 0x02	; 2
    1a7c:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1a80:	80 91 42 09 	lds	r24, 0x0942
    1a84:	87 7f       	andi	r24, 0xF7	; 247
    1a86:	1b c0       	rjmp	.+54     	; 0x1abe <main+0xa72>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1a88:	80 91 42 09 	lds	r24, 0x0942
    1a8c:	88 60       	ori	r24, 0x08	; 8
    1a8e:	1d c0       	rjmp	.+58     	; 0x1aca <main+0xa7e>
						break;
					case O12_ON:
                        if(printVar){
    1a90:	bb 20       	and	r11, r11
    1a92:	21 f0       	breq	.+8      	; 0x1a9c <main+0xa50>
							serial_print_string("BRUSH1PUMP    ON ");
    1a94:	86 ef       	ldi	r24, 0xF6	; 246
    1a96:	92 e0       	ldi	r25, 0x02	; 2
    1a98:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;	
						}	
						u_outputByte1.bits_in_outputByte1.brush1Pump = 1;
    1a9c:	80 91 42 09 	lds	r24, 0x0942
    1aa0:	80 61       	ori	r24, 0x10	; 16
    1aa2:	0d c0       	rjmp	.+26     	; 0x1abe <main+0xa72>
					break;	
					case O12_OFF:
						u_outputByte1.bits_in_outputByte1.brush1Pump = 0;
    1aa4:	80 91 42 09 	lds	r24, 0x0942
    1aa8:	8f 7e       	andi	r24, 0xEF	; 239
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <main+0xa7e>
					break;						
					case O13_ON:
                        if(printVar){
    1aac:	bb 20       	and	r11, r11
    1aae:	21 f0       	breq	.+8      	; 0x1ab8 <main+0xa6c>
							serial_print_string("BRUSH2PUMP    ON ");
    1ab0:	88 e0       	ldi	r24, 0x08	; 8
    1ab2:	93 e0       	ldi	r25, 0x03	; 3
    1ab4:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;	
						}	
						u_outputByte1.bits_in_outputByte1.brush2Pump = 1;
    1ab8:	80 91 42 09 	lds	r24, 0x0942
    1abc:	80 62       	ori	r24, 0x20	; 32
    1abe:	80 93 42 09 	sts	0x0942, r24
    1ac2:	c0 c0       	rjmp	.+384    	; 0x1c44 <main+0xbf8>
					break;	
					case O13_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Pump = 0;
    1ac4:	80 91 42 09 	lds	r24, 0x0942
    1ac8:	8f 7d       	andi	r24, 0xDF	; 223
    1aca:	80 93 42 09 	sts	0x0942, r24
    1ace:	bb c0       	rjmp	.+374    	; 0x1c46 <main+0xbfa>
						break;								
					case M1_F:		// M1_F:    /* ALERT is there a case missing??? */
						if(printVar){
    1ad0:	bb 20       	and	r11, r11
    1ad2:	21 f0       	breq	.+8      	; 0x1adc <main+0xa90>
							serial_print_string("LOADING    FRONT");
    1ad4:	8a e1       	ldi	r24, 0x1A	; 26
    1ad6:	93 e0       	ldi	r25, 0x03	; 3
    1ad8:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  // dir needs reversing on other side
    1adc:	80 91 45 09 	lds	r24, 0x0945
    1ae0:	82 60       	ori	r24, 0x02	; 2
    1ae2:	80 93 45 09 	sts	0x0945, r24
						plateLoadMotor =  1;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9b 83       	std	Y+3, r25	; 0x03
    1aec:	8a 83       	std	Y+2, r24	; 0x02
    1aee:	aa c0       	rjmp	.+340    	; 0x1c44 <main+0xbf8>
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1af0:	80 91 45 09 	lds	r24, 0x0945
    1af4:	8d 7f       	andi	r24, 0xFD	; 253
    1af6:	80 93 45 09 	sts	0x0945, r24
						plateLoadMotor =  1;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9b 83       	std	Y+3, r25	; 0x03
    1b00:	8a 83       	std	Y+2, r24	; 0x02
    1b02:	a1 c0       	rjmp	.+322    	; 0x1c46 <main+0xbfa>
						break;
					case M2_F:
						if(printVar){
    1b04:	bb 20       	and	r11, r11
    1b06:	21 f0       	breq	.+8      	; 0x1b10 <main+0xac4>
							serial_print_string("DRIVE      FRONT");
    1b08:	8b e2       	ldi	r24, 0x2B	; 43
    1b0a:	93 e0       	ldi	r25, 0x03	; 3
    1b0c:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1b10:	80 91 45 09 	lds	r24, 0x0945
    1b14:	8f 7e       	andi	r24, 0xEF	; 239
    1b16:	80 93 45 09 	sts	0x0945, r24
						fixtureMotor =  1;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9d 83       	std	Y+5, r25	; 0x05
    1b20:	8c 83       	std	Y+4, r24	; 0x04
						plateLoadMotor = 0;
    1b22:	1b 82       	std	Y+3, r1	; 0x03
    1b24:	1a 82       	std	Y+2, r1	; 0x02
    1b26:	bb 24       	eor	r11, r11
    1b28:	56 e2       	ldi	r21, 0x26	; 38
    1b2a:	85 2e       	mov	r8, r21
    1b2c:	91 2c       	mov	r9, r1
    1b2e:	8b c0       	rjmp	.+278    	; 0x1c46 <main+0xbfa>
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
    1b30:	80 91 45 09 	lds	r24, 0x0945
    1b34:	80 61       	ori	r24, 0x10	; 16
    1b36:	80 93 45 09 	sts	0x0945, r24
						fixtureMotor =  1;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9d 83       	std	Y+5, r25	; 0x05
    1b40:	8c 83       	std	Y+4, r24	; 0x04
    1b42:	81 c0       	rjmp	.+258    	; 0x1c46 <main+0xbfa>
						break;
					case M3_F:
						if(printVar){
    1b44:	bb 20       	and	r11, r11
    1b46:	21 f0       	breq	.+8      	; 0x1b50 <main+0xb04>
							serial_print_string("BRUSH1     FRONT");
    1b48:	8c e3       	ldi	r24, 0x3C	; 60
    1b4a:	93 e0       	ldi	r25, 0x03	; 3
    1b4c:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
    1b50:	80 91 45 09 	lds	r24, 0x0945
    1b54:	8f 77       	andi	r24, 0x7F	; 127
    1b56:	80 93 45 09 	sts	0x0945, r24
						brush1Motor =  1;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9f 83       	std	Y+7, r25	; 0x07
    1b60:	8e 83       	std	Y+6, r24	; 0x06
						fixtureMotor = 0;
    1b62:	1d 82       	std	Y+5, r1	; 0x05
    1b64:	1c 82       	std	Y+4, r1	; 0x04
    1b66:	bb 24       	eor	r11, r11
    1b68:	48 e2       	ldi	r20, 0x28	; 40
    1b6a:	84 2e       	mov	r8, r20
    1b6c:	91 2c       	mov	r9, r1
    1b6e:	6b c0       	rjmp	.+214    	; 0x1c46 <main+0xbfa>
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
    1b70:	80 91 45 09 	lds	r24, 0x0945
    1b74:	80 68       	ori	r24, 0x80	; 128
    1b76:	80 93 45 09 	sts	0x0945, r24
						brush1Motor =  1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9f 83       	std	Y+7, r25	; 0x07
    1b80:	8e 83       	std	Y+6, r24	; 0x06
    1b82:	61 c0       	rjmp	.+194    	; 0x1c46 <main+0xbfa>
						break;
					case M4_F:
						if(printVar){
    1b84:	bb 20       	and	r11, r11
    1b86:	21 f0       	breq	.+8      	; 0x1b90 <main+0xb44>
							serial_print_string("BRUSH2     FRONT");
    1b88:	8d e4       	ldi	r24, 0x4D	; 77
    1b8a:	93 e0       	ldi	r25, 0x03	; 3
    1b8c:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
    1b90:	80 91 41 09 	lds	r24, 0x0941
    1b94:	8b 7f       	andi	r24, 0xFB	; 251
    1b96:	80 93 41 09 	sts	0x0941, r24
						brush2Motor =  1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	99 87       	std	Y+9, r25	; 0x09
    1ba0:	88 87       	std	Y+8, r24	; 0x08
						brush1Motor = 0;
    1ba2:	1f 82       	std	Y+7, r1	; 0x07
    1ba4:	1e 82       	std	Y+6, r1	; 0x06
    1ba6:	bb 24       	eor	r11, r11
    1ba8:	3a e2       	ldi	r19, 0x2A	; 42
    1baa:	83 2e       	mov	r8, r19
    1bac:	91 2c       	mov	r9, r1
    1bae:	4b c0       	rjmp	.+150    	; 0x1c46 <main+0xbfa>
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
    1bb0:	80 91 41 09 	lds	r24, 0x0941
    1bb4:	84 60       	ori	r24, 0x04	; 4
    1bb6:	80 93 41 09 	sts	0x0941, r24
						brush2Motor =  1;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	99 87       	std	Y+9, r25	; 0x09
    1bc0:	88 87       	std	Y+8, r24	; 0x08
    1bc2:	41 c0       	rjmp	.+130    	; 0x1c46 <main+0xbfa>
						break;
					case M5_F:
						if(printVar){
    1bc4:	bb 20       	and	r11, r11
    1bc6:	21 f0       	breq	.+8      	; 0x1bd0 <main+0xb84>
							serial_print_string("PAPER      FRONT");
    1bc8:	8e e5       	ldi	r24, 0x5E	; 94
    1bca:	93 e0       	ldi	r25, 0x03	; 3
    1bcc:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1bd0:	80 91 41 09 	lds	r24, 0x0941
    1bd4:	8f 7d       	andi	r24, 0xDF	; 223
    1bd6:	80 93 41 09 	sts	0x0941, r24
						paperTowelMotor =  1;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	9b 87       	std	Y+11, r25	; 0x0b
    1be0:	8a 87       	std	Y+10, r24	; 0x0a
						brush2Motor = 0;
    1be2:	19 86       	std	Y+9, r1	; 0x09
    1be4:	18 86       	std	Y+8, r1	; 0x08
    1be6:	bb 24       	eor	r11, r11
    1be8:	2c e2       	ldi	r18, 0x2C	; 44
    1bea:	82 2e       	mov	r8, r18
    1bec:	91 2c       	mov	r9, r1
    1bee:	2b c0       	rjmp	.+86     	; 0x1c46 <main+0xbfa>
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
    1bf0:	80 91 41 09 	lds	r24, 0x0941
    1bf4:	80 62       	ori	r24, 0x20	; 32
    1bf6:	80 93 41 09 	sts	0x0941, r24
						paperTowelMotor =  1;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	9b 87       	std	Y+11, r25	; 0x0b
    1c00:	8a 87       	std	Y+10, r24	; 0x0a
    1c02:	21 c0       	rjmp	.+66     	; 0x1c46 <main+0xbfa>
						break;
					case M2_AND_M3:
						if(printVar){
    1c04:	bb 20       	and	r11, r11
    1c06:	21 f0       	breq	.+8      	; 0x1c10 <main+0xbc4>
							serial_print_string("FIXTURE & BRUSH1");
    1c08:	8f e6       	ldi	r24, 0x6F	; 111
    1c0a:	93 e0       	ldi	r25, 0x03	; 3
    1c0c:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	9d 83       	std	Y+5, r25	; 0x05
    1c16:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 1;
    1c18:	9f 83       	std	Y+7, r25	; 0x07
    1c1a:	8e 83       	std	Y+6, r24	; 0x06
    1c1c:	13 c0       	rjmp	.+38     	; 0x1c44 <main+0xbf8>
						break;
					case M2_AND_M4:
						if(printVar){
    1c1e:	bb 20       	and	r11, r11
    1c20:	21 f0       	breq	.+8      	; 0x1c2a <main+0xbde>
							serial_print_string("FIXTURE & BRUSH2");
    1c22:	80 e8       	ldi	r24, 0x80	; 128
    1c24:	93 e0       	ldi	r25, 0x03	; 3
    1c26:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9d 83       	std	Y+5, r25	; 0x05
    1c30:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 0;
    1c32:	1f 82       	std	Y+7, r1	; 0x07
    1c34:	1e 82       	std	Y+6, r1	; 0x06
						brush2Motor = 1;
    1c36:	99 87       	std	Y+9, r25	; 0x09
    1c38:	88 87       	std	Y+8, r24	; 0x08
    1c3a:	bb 24       	eor	r11, r11
    1c3c:	9f e2       	ldi	r25, 0x2F	; 47
    1c3e:	89 2e       	mov	r8, r25
    1c40:	91 2c       	mov	r9, r1
    1c42:	01 c0       	rjmp	.+2      	; 0x1c46 <main+0xbfa>
    1c44:	bb 24       	eor	r11, r11
						break;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1c46:	4a 81       	ldd	r20, Y+2	; 0x02
    1c48:	5b 81       	ldd	r21, Y+3	; 0x03
    1c4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c4e:	0e 81       	ldd	r16, Y+6	; 0x06
    1c50:	1f 81       	ldd	r17, Y+7	; 0x07
    1c52:	e8 84       	ldd	r14, Y+8	; 0x08
    1c54:	f9 84       	ldd	r15, Y+9	; 0x09
    1c56:	ca 84       	ldd	r12, Y+10	; 0x0a
    1c58:	db 84       	ldd	r13, Y+11	; 0x0b
    1c5a:	c3 01       	movw	r24, r6
    1c5c:	b2 01       	movw	r22, r4
    1c5e:	0e 94 8a 06 	call	0xd14	; 0xd14 <motor_and_write>

				serial_check(); counter++;
    1c62:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <serial_check>
    1c66:	80 91 11 04 	lds	r24, 0x0411
    1c6a:	90 91 12 04 	lds	r25, 0x0412
    1c6e:	6f 93       	push	r22
    1c70:	64 e0       	ldi	r22, 0x04	; 4
    1c72:	6a 95       	dec	r22
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <main+0xc26>
    1c76:	6f 91       	pop	r22
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	c9 f7       	brne	.-14     	; 0x1c6e <main+0xc22>
			counter = 0;
			//clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
    1c7c:	50 e3       	ldi	r21, 0x30	; 48
    1c7e:	85 16       	cp	r8, r21
    1c80:	91 04       	cpc	r9, r1
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <main+0xc3a>
    1c84:	35 c6       	rjmp	.+3178   	; 0x28f0 <main+0x18a4>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1c86:	08 94       	sec
    1c88:	61 1c       	adc	r6, r1
    1c8a:	71 1c       	adc	r7, r1
    1c8c:	c1 cb       	rjmp	.-2174   	; 0x1410 <main+0x3c4>
		}
		else{										//If switch is set to Run Mode
		
		bool printVar = true;

		serial_print_string("NORMAL");
    1c8e:	81 e9       	ldi	r24, 0x91	; 145
    1c90:	93 e0       	ldi	r25, 0x03	; 3
    1c92:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
		delay_ms(1000);
    1c96:	88 ee       	ldi	r24, 0xE8	; 232
    1c98:	93 e0       	ldi	r25, 0x03	; 3
    1c9a:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <delay_ms>
		
		//clear();
		serial_print_string("SELECT CYCLE");
    1c9e:	88 e9       	ldi	r24, 0x98	; 152
    1ca0:	93 e0       	ldi	r25, 0x03	; 3
    1ca2:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
		delay_ms(1000);
    1ca6:	88 ee       	ldi	r24, 0xE8	; 232
    1ca8:	93 e0       	ldi	r25, 0x03	; 3
    1caa:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <delay_ms>
		int sel1 = !is_digital_input_high(IO_D1);
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1cb4:	ee 24       	eor	r14, r14
    1cb6:	ff 24       	eor	r15, r15
    1cb8:	88 23       	and	r24, r24
    1cba:	19 f4       	brne	.+6      	; 0x1cc2 <main+0xc76>
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	e8 2e       	mov	r14, r24
    1cc0:	f1 2c       	mov	r15, r1
		int sel2 = !is_digital_input_high(IO_D2);
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
    1cc4:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1cc8:	00 e0       	ldi	r16, 0x00	; 0
    1cca:	10 e0       	ldi	r17, 0x00	; 0
    1ccc:	88 23       	and	r24, r24
    1cce:	11 f4       	brne	.+4      	; 0x1cd4 <main+0xc88>
    1cd0:	01 e0       	ldi	r16, 0x01	; 1
    1cd2:	10 e0       	ldi	r17, 0x00	; 0
    1cd4:	cc 24       	eor	r12, r12
    1cd6:	dd 24       	eor	r13, r13
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			if(sel1 != is_digital_input_high(IO_D1) || sel2 != is_digital_input_high(IO_D2)){
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	e8 16       	cp	r14, r24
    1ce2:	f9 06       	cpc	r15, r25
    1ce4:	39 f4       	brne	.+14     	; 0x1cf4 <main+0xca8>
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	08 17       	cp	r16, r24
    1cf0:	19 07       	cpc	r17, r25
    1cf2:	59 f1       	breq	.+86     	; 0x1d4a <main+0xcfe>
				if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2))
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1cfa:	88 23       	and	r24, r24
    1cfc:	41 f4       	brne	.+16     	; 0x1d0e <main+0xcc2>
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1d04:	88 23       	and	r24, r24
    1d06:	19 f4       	brne	.+6      	; 0x1d0e <main+0xcc2>
					serial_print_string("FIRST B");
    1d08:	85 ea       	ldi	r24, 0xA5	; 165
    1d0a:	93 e0       	ldi	r25, 0x03	; 3
    1d0c:	1c c0       	rjmp	.+56     	; 0x1d46 <main+0xcfa>
				else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2))
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1d14:	88 23       	and	r24, r24
    1d16:	41 f0       	breq	.+16     	; 0x1d28 <main+0xcdc>
    1d18:	82 e0       	ldi	r24, 0x02	; 2
    1d1a:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1d1e:	88 23       	and	r24, r24
    1d20:	19 f4       	brne	.+6      	; 0x1d28 <main+0xcdc>
					serial_print_string("SECOND B");
    1d22:	8d ea       	ldi	r24, 0xAD	; 173
    1d24:	93 e0       	ldi	r25, 0x03	; 3
    1d26:	0f c0       	rjmp	.+30     	; 0x1d46 <main+0xcfa>
				else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2))
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1d2e:	88 23       	and	r24, r24
    1d30:	41 f4       	brne	.+16     	; 0x1d42 <main+0xcf6>
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1d38:	88 23       	and	r24, r24
    1d3a:	19 f0       	breq	.+6      	; 0x1d42 <main+0xcf6>
					serial_print_string("BOTH B");
    1d3c:	86 eb       	ldi	r24, 0xB6	; 182
    1d3e:	93 e0       	ldi	r25, 0x03	; 3
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <main+0xcfa>
				else
					serial_print_string("STEP");
    1d42:	8d eb       	ldi	r24, 0xBD	; 189
    1d44:	93 e0       	ldi	r25, 0x03	; 3
    1d46:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
					state = 0;          /* added to reset state counter to zero*/
			}
			sel1 = is_digital_input_high(IO_D1);
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1d50:	08 2f       	mov	r16, r24
			sel2 = is_digital_input_high(IO_D2);
    1d52:	82 e0       	ldi	r24, 0x02	; 2
    1d54:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1d58:	18 2f       	mov	r17, r24
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1d5a:	c6 01       	movw	r24, r12
    1d5c:	be 01       	movw	r22, r28
    1d5e:	64 5f       	subi	r22, 0xF4	; 244
    1d60:	7f 4f       	sbci	r23, 0xFF	; 255
    1d62:	0e 94 b0 03 	call	0x760	; 0x760 <button_debounce>
    1d66:	e0 91 11 04 	lds	r30, 0x0411
    1d6a:	f0 91 12 04 	lds	r31, 0x0412
    1d6e:	6f 93       	push	r22
    1d70:	64 e0       	ldi	r22, 0x04	; 4
    1d72:	6a 95       	dec	r22
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <main+0xd26>
    1d76:	6f 91       	pop	r22
    1d78:	31 97       	sbiw	r30, 0x01	; 1
    1d7a:	c9 f7       	brne	.-14     	; 0x1d6e <main+0xd22>
		serial_print_string("SELECT CYCLE");
		delay_ms(1000);
		int sel1 = !is_digital_input_high(IO_D1);
		int sel2 = !is_digital_input_high(IO_D2);
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1d7c:	88 23       	and	r24, r24
    1d7e:	41 f4       	brne	.+16     	; 0x1d90 <main+0xd44>
					serial_print_string("BOTH B");
				else
					serial_print_string("STEP");
					state = 0;          /* added to reset state counter to zero*/
			}
			sel1 = is_digital_input_high(IO_D1);
    1d80:	e0 2e       	mov	r14, r16
    1d82:	ff 24       	eor	r15, r15
			sel2 = is_digital_input_high(IO_D2);
    1d84:	01 2f       	mov	r16, r17
    1d86:	10 e0       	ldi	r17, 0x00	; 0
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
			counter++;
    1d88:	08 94       	sec
    1d8a:	c1 1c       	adc	r12, r1
    1d8c:	d1 1c       	adc	r13, r1
    1d8e:	a4 cf       	rjmp	.-184    	; 0x1cd8 <main+0xc8c>
			delay_us(delayTimeMicroSeconds);
		}
		buttonTriggered = false;
		counter = 0;
		//clear();
		serial_print_string("CYCLE:");
    1d90:	82 ec       	ldi	r24, 0xC2	; 194
    1d92:	93 e0       	ldi	r25, 0x03	; 3
    1d94:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>

		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d98:	80 91 45 09 	lds	r24, 0x0945
    1d9c:	80 62       	ori	r24, 0x20	; 32
    1d9e:	80 93 45 09 	sts	0x0945, r24

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1da8:	88 23       	and	r24, r24
    1daa:	09 f0       	breq	.+2      	; 0x1dae <main+0xd62>
    1dac:	75 c1       	rjmp	.+746    	; 0x2098 <main+0x104c>
    1dae:	82 e0       	ldi	r24, 0x02	; 2
    1db0:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1db4:	88 23       	and	r24, r24
    1db6:	09 f0       	breq	.+2      	; 0x1dba <main+0xd6e>
    1db8:	6f c1       	rjmp	.+734    	; 0x2098 <main+0x104c>
			lcd_goto_xy(7,0);
    1dba:	87 e0       	ldi	r24, 0x07	; 7
    1dbc:	60 e0       	ldi	r22, 0x00	; 0
    1dbe:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
			serial_print_string("FIRST B");    //start of first brush cycle
    1dc2:	85 ea       	ldi	r24, 0xA5	; 165
    1dc4:	93 e0       	ldi	r25, 0x03	; 3
    1dc6:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9d 83       	std	Y+5, r25	; 0x05
    1dd0:	8c 83       	std	Y+4, r24	; 0x04
    1dd2:	80 91 45 09 	lds	r24, 0x0945
    1dd6:	80 62       	ori	r24, 0x20	; 32
    1dd8:	80 93 45 09 	sts	0x0945, r24
    1ddc:	88 24       	eor	r8, r8
    1dde:	99 24       	eor	r9, r9
    1de0:	66 24       	eor	r6, r6
    1de2:	77 24       	eor	r7, r7
    1de4:	44 24       	eor	r4, r4
    1de6:	55 24       	eor	r5, r5
    1de8:	22 24       	eor	r2, r2
    1dea:	23 94       	inc	r2
    1dec:	33 24       	eor	r3, r3
    1dee:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1df0:	84 e4       	ldi	r24, 0x44	; 68
    1df2:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				i2c_write(0x0);								// write command byte
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1dfc:	85 e4       	ldi	r24, 0x45	; 69
    1dfe:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1e02:	0e 94 08 01 	call	0x210	; 0x210 <i2c_readAck>
    1e06:	80 93 40 09 	sts	0x0940, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1e0a:	0e 94 12 01 	call	0x224	; 0x224 <i2c_readNak>
    1e0e:	80 93 43 09 	sts	0x0943, r24
  	 	     	i2c_stop();								// set stop condition = release bus 		
    1e12:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
				
				if(state != INIT && printVar){
    1e16:	81 14       	cp	r8, r1
    1e18:	91 04       	cpc	r9, r1
    1e1a:	a9 f1       	breq	.+106    	; 0x1e86 <main+0xe3a>
    1e1c:	33 20       	and	r3, r3
    1e1e:	99 f1       	breq	.+102    	; 0x1e86 <main+0xe3a>
					lcd_goto_xy(6,1);
    1e20:	86 e0       	ldi	r24, 0x06	; 6
    1e22:	61 e0       	ldi	r22, 0x01	; 1
    1e24:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
					serial_print_string("     ");
    1e28:	89 ec       	ldi	r24, 0xC9	; 201
    1e2a:	93 e0       	ldi	r25, 0x03	; 3
    1e2c:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
					lcd_goto_xy(0,1);
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
					serial_print_string_noCRLF("STATE: ");
    1e38:	8f ec       	ldi	r24, 0xCF	; 207
    1e3a:	93 e0       	ldi	r25, 0x03	; 3
    1e3c:	0e 94 41 07 	call	0xe82	; 0xe82 <serial_print_string_noCRLF>
					serial_print_int(state);
    1e40:	c4 01       	movw	r24, r8
    1e42:	0e 94 08 08 	call	0x1010	; 0x1010 <serial_print_int>
					serial_print_string_noCRLF("=> ");
    1e46:	87 ed       	ldi	r24, 0xD7	; 215
    1e48:	93 e0       	ldi	r25, 0x03	; 3
    1e4a:	0e 94 41 07 	call	0xe82	; 0xe82 <serial_print_string_noCRLF>
					serial_print_string(run_states_msg_list[state]);
    1e4e:	f4 01       	movw	r30, r8
    1e50:	ee 0f       	add	r30, r30
    1e52:	ff 1f       	adc	r31, r31
    1e54:	e7 57       	subi	r30, 0x77	; 119
    1e56:	f7 4f       	sbci	r31, 0xF7	; 247
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
					serial_print_string(" ");
    1e60:	8b ed       	ldi	r24, 0xDB	; 219
    1e62:	93 e0       	ldi	r25, 0x03	; 3
    1e64:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
					serial_print_string_noCRLF("Counter:");
    1e68:	8d ed       	ldi	r24, 0xDD	; 221
    1e6a:	93 e0       	ldi	r25, 0x03	; 3
    1e6c:	0e 94 41 07 	call	0xe82	; 0xe82 <serial_print_string_noCRLF>
					serial_print_int(counter/stepFactor);      // want to print number of steps to reach here
    1e70:	60 91 13 04 	lds	r22, 0x0413
    1e74:	70 91 14 04 	lds	r23, 0x0414
    1e78:	c3 01       	movw	r24, r6
    1e7a:	0e 94 32 21 	call	0x4264	; 0x4264 <__divmodhi4>
    1e7e:	cb 01       	movw	r24, r22
    1e80:	0e 94 08 08 	call	0x1010	; 0x1010 <serial_print_int>
    1e84:	33 24       	eor	r3, r3
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1e86:	c3 01       	movw	r24, r6
    1e88:	be 01       	movw	r22, r28
    1e8a:	64 5f       	subi	r22, 0xF4	; 244
    1e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8e:	0e 94 b0 03 	call	0x760	; 0x760 <button_debounce>
    1e92:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1e94:	c4 01       	movw	r24, r8
    1e96:	a3 01       	movw	r20, r6
    1e98:	92 01       	movw	r18, r4
    1e9a:	0e 94 1f 04 	call	0x83e	; 0x83e <init_trans>
    1e9e:	88 23       	and	r24, r24
    1ea0:	31 f0       	breq	.+12     	; 0x1eae <main+0xe62>
					buttonTriggered = false;
					state ++;
    1ea2:	08 94       	sec
    1ea4:	81 1c       	adc	r8, r1
    1ea6:	91 1c       	adc	r9, r1
    1ea8:	23 01       	movw	r4, r6
    1eaa:	33 24       	eor	r3, r3
    1eac:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    1eae:	c4 01       	movw	r24, r8
    1eb0:	b3 01       	movw	r22, r6
    1eb2:	a2 01       	movw	r20, r4
    1eb4:	0e 94 a6 04 	call	0x94c	; 0x94c <firstB_trans>
    1eb8:	88 23       	and	r24, r24
    1eba:	71 f0       	breq	.+28     	; 0x1ed8 <main+0xe8c>
					//serial_print_string("firstB_trans: ");
					//serial_print_int(counter);      // want to print number of steps to reach here
					state ++;
    1ebc:	08 94       	sec
    1ebe:	81 1c       	adc	r8, r1
    1ec0:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    1ec2:	8c e0       	ldi	r24, 0x0C	; 12
    1ec4:	88 16       	cp	r8, r24
    1ec6:	91 04       	cpc	r9, r1
    1ec8:	51 f1       	breq	.+84     	; 0x1f1e <main+0xed2>
    1eca:	90 e1       	ldi	r25, 0x10	; 16
    1ecc:	89 16       	cp	r8, r25
    1ece:	91 04       	cpc	r9, r1
    1ed0:	31 f1       	breq	.+76     	; 0x1f1e <main+0xed2>
    1ed2:	23 01       	movw	r4, r6
    1ed4:	33 24       	eor	r3, r3
    1ed6:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}

				if(state == B1STOP2 && counter - counterRef > pWait){
    1ed8:	21 e1       	ldi	r18, 0x11	; 17
    1eda:	82 16       	cp	r8, r18
    1edc:	91 04       	cpc	r9, r1
    1ede:	71 f4       	brne	.+28     	; 0x1efc <main+0xeb0>
    1ee0:	93 01       	movw	r18, r6
    1ee2:	24 19       	sub	r18, r4
    1ee4:	35 09       	sbc	r19, r5
    1ee6:	80 91 f7 03 	lds	r24, 0x03F7
    1eea:	90 91 f8 03 	lds	r25, 0x03F8
    1eee:	82 17       	cp	r24, r18
    1ef0:	93 07       	cpc	r25, r19
    1ef2:	bc f4       	brge	.+46     	; 0x1f22 <main+0xed6>
    1ef4:	23 01       	movw	r4, r6
    1ef6:	33 24       	eor	r3, r3
    1ef8:	33 94       	inc	r3
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <main+0xeb8>
					state = MOVED1;
					counterRef = counter;
					printVar = true;
				}
				if(state == MOVED1 /*&& counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole*/ && u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0){
    1efc:	3c e1       	ldi	r19, 0x1C	; 28
    1efe:	83 16       	cp	r8, r19
    1f00:	91 04       	cpc	r9, r1
    1f02:	79 f4       	brne	.+30     	; 0x1f22 <main+0xed6>
    1f04:	80 91 40 09 	lds	r24, 0x0940
    1f08:	86 fd       	sbrc	r24, 6
    1f0a:	05 c0       	rjmp	.+10     	; 0x1f16 <main+0xeca>
    1f0c:	23 01       	movw	r4, r6
    1f0e:	1d e1       	ldi	r17, 0x1D	; 29
    1f10:	81 2e       	mov	r8, r17
    1f12:	91 2c       	mov	r9, r1
    1f14:	04 c0       	rjmp	.+8      	; 0x1f1e <main+0xed2>
    1f16:	bc e1       	ldi	r27, 0x1C	; 28
    1f18:	8b 2e       	mov	r8, r27
    1f1a:	91 2c       	mov	r9, r1
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <main+0xed6>
    1f1e:	33 24       	eor	r3, r3
    1f20:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef)){
    1f22:	c4 01       	movw	r24, r8
    1f24:	b3 01       	movw	r22, r6
    1f26:	a2 01       	movw	r20, r4
    1f28:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <dry_trans>
    1f2c:	88 23       	and	r24, r24
    1f2e:	31 f0       	breq	.+12     	; 0x1f3c <main+0xef0>
					state ++;
    1f30:	08 94       	sec
    1f32:	81 1c       	adc	r8, r1
    1f34:	91 1c       	adc	r9, r1
    1f36:	23 01       	movw	r4, r6
    1f38:	33 24       	eor	r3, r3
    1f3a:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    1f3c:	45 e2       	ldi	r20, 0x25	; 37
    1f3e:	84 16       	cp	r8, r20
    1f40:	91 04       	cpc	r9, r1
    1f42:	41 f4       	brne	.+16     	; 0x1f54 <main+0xf08>
    1f44:	c3 01       	movw	r24, r6
    1f46:	84 19       	sub	r24, r4
    1f48:	95 09       	sbc	r25, r5
    1f4a:	0b 97       	sbiw	r24, 0x0b	; 11
    1f4c:	1c f0       	brlt	.+6      	; 0x1f54 <main+0xf08>
    1f4e:	a6 e2       	ldi	r26, 0x26	; 38
    1f50:	8a 2e       	mov	r8, r26
    1f52:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1f54:	c4 01       	movw	r24, r8
    1f56:	b3 01       	movw	r22, r6
    1f58:	ae 01       	movw	r20, r28
    1f5a:	4e 5f       	subi	r20, 0xFE	; 254
    1f5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f5e:	9e 01       	movw	r18, r28
    1f60:	2c 5f       	subi	r18, 0xFC	; 252
    1f62:	3f 4f       	sbci	r19, 0xFF	; 255
    1f64:	8e 01       	movw	r16, r28
    1f66:	0a 5f       	subi	r16, 0xFA	; 250
    1f68:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6a:	f8 e0       	ldi	r31, 0x08	; 8
    1f6c:	ef 2e       	mov	r14, r31
    1f6e:	f1 2c       	mov	r15, r1
    1f70:	ec 0e       	add	r14, r28
    1f72:	fd 1e       	adc	r15, r29
    1f74:	ea e0       	ldi	r30, 0x0A	; 10
    1f76:	ce 2e       	mov	r12, r30
    1f78:	d1 2c       	mov	r13, r1
    1f7a:	cc 0e       	add	r12, r28
    1f7c:	dd 1e       	adc	r13, r29
    1f7e:	5e 01       	movw	r10, r28
    1f80:	08 94       	sec
    1f82:	a1 1c       	adc	r10, r1
    1f84:	b1 1c       	adc	r11, r1
    1f86:	0e 94 67 07 	call	0xece	; 0xece <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1f8a:	c4 01       	movw	r24, r8
    1f8c:	b3 01       	movw	r22, r6
    1f8e:	ae 01       	movw	r20, r28
    1f90:	4e 5f       	subi	r20, 0xFE	; 254
    1f92:	5f 4f       	sbci	r21, 0xFF	; 255
    1f94:	9e 01       	movw	r18, r28
    1f96:	2c 5f       	subi	r18, 0xFC	; 252
    1f98:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9a:	8e 01       	movw	r16, r28
    1f9c:	0a 5f       	subi	r16, 0xFA	; 250
    1f9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa0:	b8 e0       	ldi	r27, 0x08	; 8
    1fa2:	eb 2e       	mov	r14, r27
    1fa4:	f1 2c       	mov	r15, r1
    1fa6:	ec 0e       	add	r14, r28
    1fa8:	fd 1e       	adc	r15, r29
    1faa:	aa e0       	ldi	r26, 0x0A	; 10
    1fac:	ca 2e       	mov	r12, r26
    1fae:	d1 2c       	mov	r13, r1
    1fb0:	cc 0e       	add	r12, r28
    1fb2:	dd 1e       	adc	r13, r29
    1fb4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <brush1_action>
				if(state == B1STOP2){
    1fb8:	51 e1       	ldi	r21, 0x11	; 17
    1fba:	85 16       	cp	r8, r21
    1fbc:	91 04       	cpc	r9, r1
    1fbe:	59 f4       	brne	.+22     	; 0x1fd6 <main+0xf8a>
					brush1Motor = 0;
    1fc0:	1f 82       	std	Y+7, r1	; 0x07
    1fc2:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    1fc4:	1d 82       	std	Y+5, r1	; 0x05
    1fc6:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1fc8:	80 91 44 09 	lds	r24, 0x0944
    1fcc:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1fce:	80 62       	ori	r24, 0x20	; 32
    1fd0:	80 93 44 09 	sts	0x0944, r24
    1fd4:	12 c0       	rjmp	.+36     	; 0x1ffa <main+0xfae>
				}
				if(state == MOVED1){
    1fd6:	8c e1       	ldi	r24, 0x1C	; 28
    1fd8:	88 16       	cp	r8, r24
    1fda:	91 04       	cpc	r9, r1
    1fdc:	71 f4       	brne	.+28     	; 0x1ffa <main+0xfae>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1fde:	80 91 45 09 	lds	r24, 0x0945
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1fe2:	21 e0       	ldi	r18, 0x01	; 1
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	3d 83       	std	Y+5, r19	; 0x05
    1fe8:	2c 83       	std	Y+4, r18	; 0x04
    1fea:	80 63       	ori	r24, 0x30	; 48
    1fec:	80 93 45 09 	sts	0x0945, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1ff0:	80 91 41 09 	lds	r24, 0x0941
    1ff4:	8e 7f       	andi	r24, 0xFE	; 254
    1ff6:	80 93 41 09 	sts	0x0941, r24
				}
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1ffa:	c4 01       	movw	r24, r8
    1ffc:	b3 01       	movw	r22, r6
    1ffe:	ae 01       	movw	r20, r28
    2000:	4e 5f       	subi	r20, 0xFE	; 254
    2002:	5f 4f       	sbci	r21, 0xFF	; 255
    2004:	9e 01       	movw	r18, r28
    2006:	2c 5f       	subi	r18, 0xFC	; 252
    2008:	3f 4f       	sbci	r19, 0xFF	; 255
    200a:	8e 01       	movw	r16, r28
    200c:	0a 5f       	subi	r16, 0xFA	; 250
    200e:	1f 4f       	sbci	r17, 0xFF	; 255
    2010:	f8 e0       	ldi	r31, 0x08	; 8
    2012:	ef 2e       	mov	r14, r31
    2014:	f1 2c       	mov	r15, r1
    2016:	ec 0e       	add	r14, r28
    2018:	fd 1e       	adc	r15, r29
    201a:	ea e0       	ldi	r30, 0x0A	; 10
    201c:	ce 2e       	mov	r12, r30
    201e:	d1 2c       	mov	r13, r1
    2020:	cc 0e       	add	r12, r28
    2022:	dd 1e       	adc	r13, r29
    2024:	0e 94 00 03 	call	0x600	; 0x600 <dry_action>
				if(state == END){
    2028:	35 e2       	ldi	r19, 0x25	; 37
    202a:	83 16       	cp	r8, r19
    202c:	91 04       	cpc	r9, r1
    202e:	81 f4       	brne	.+32     	; 0x2050 <main+0x1004>
					plateLoadMotor = 1;      // may need reversing on other side?
    2030:	41 e0       	ldi	r20, 0x01	; 1
    2032:	50 e0       	ldi	r21, 0x00	; 0
    2034:	5b 83       	std	Y+3, r21	; 0x03
    2036:	4a 83       	std	Y+2, r20	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2038:	80 91 45 09 	lds	r24, 0x0945
    203c:	8b 7f       	andi	r24, 0xFB	; 251
    203e:	80 93 45 09 	sts	0x0945, r24
					if(print35 == 1){
    2042:	22 20       	and	r2, r2
    2044:	29 f0       	breq	.+10     	; 0x2050 <main+0x1004>
						//clear();
						serial_print_string("END OF CYCLE");
    2046:	86 ee       	ldi	r24, 0xE6	; 230
    2048:	93 e0       	ldi	r25, 0x03	; 3
    204a:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
    204e:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    2050:	4a 81       	ldd	r20, Y+2	; 0x02
    2052:	5b 81       	ldd	r21, Y+3	; 0x03
    2054:	2c 81       	ldd	r18, Y+4	; 0x04
    2056:	3d 81       	ldd	r19, Y+5	; 0x05
    2058:	0e 81       	ldd	r16, Y+6	; 0x06
    205a:	1f 81       	ldd	r17, Y+7	; 0x07
    205c:	e8 84       	ldd	r14, Y+8	; 0x08
    205e:	f9 84       	ldd	r15, Y+9	; 0x09
    2060:	ca 84       	ldd	r12, Y+10	; 0x0a
    2062:	db 84       	ldd	r13, Y+11	; 0x0b
    2064:	c3 01       	movw	r24, r6
    2066:	b2 01       	movw	r22, r4
    2068:	0e 94 8a 06 	call	0xd14	; 0xd14 <motor_and_write>

				serial_check(); counter++;
    206c:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <serial_check>
    2070:	80 91 11 04 	lds	r24, 0x0411
    2074:	90 91 12 04 	lds	r25, 0x0412
    2078:	6f 93       	push	r22
    207a:	64 e0       	ldi	r22, 0x04	; 4
    207c:	6a 95       	dec	r22
    207e:	f1 f7       	brne	.-4      	; 0x207c <main+0x1030>
    2080:	6f 91       	pop	r22
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	c9 f7       	brne	.-14     	; 0x2078 <main+0x102c>

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("FIRST B");    //start of first brush cycle
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    2086:	56 e2       	ldi	r21, 0x26	; 38
    2088:	85 16       	cp	r8, r21
    208a:	91 04       	cpc	r9, r1
    208c:	09 f4       	brne	.+2      	; 0x2090 <main+0x1044>
    208e:	30 c4       	rjmp	.+2144   	; 0x28f0 <main+0x18a4>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    2090:	08 94       	sec
    2092:	61 1c       	adc	r6, r1
    2094:	71 1c       	adc	r7, r1
    2096:	ac ce       	rjmp	.-680    	; 0x1df0 <main+0xda4>
				delay_us(delayTimeMicroSeconds);
   		 	}     // end of first brush while cycle
		}   


		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    209e:	88 23       	and	r24, r24
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <main+0x1058>
    20a2:	32 c1       	rjmp	.+612    	; 0x2308 <main+0x12bc>
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    20aa:	88 23       	and	r24, r24
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <main+0x1064>
    20ae:	2c c1       	rjmp	.+600    	; 0x2308 <main+0x12bc>
			lcd_goto_xy(7,0);
    20b0:	87 e0       	ldi	r24, 0x07	; 7
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
			serial_print_string("SECOND B");
    20b8:	8d ea       	ldi	r24, 0xAD	; 173
    20ba:	93 e0       	ldi	r25, 0x03	; 3
    20bc:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9d 83       	std	Y+5, r25	; 0x05
    20c6:	8c 83       	std	Y+4, r24	; 0x04
    20c8:	80 91 45 09 	lds	r24, 0x0945
    20cc:	80 62       	ori	r24, 0x20	; 32
    20ce:	80 93 45 09 	sts	0x0945, r24
    20d2:	88 24       	eor	r8, r8
    20d4:	99 24       	eor	r9, r9
    20d6:	66 24       	eor	r6, r6
    20d8:	77 24       	eor	r7, r7
    20da:	44 24       	eor	r4, r4
    20dc:	55 24       	eor	r5, r5
    20de:	22 24       	eor	r2, r2
    20e0:	23 94       	inc	r2
    20e2:	33 24       	eor	r3, r3
    20e4:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    20e6:	84 e4       	ldi	r24, 0x44	; 68
    20e8:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				i2c_write(0x0);								// write command byte
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    20f2:	85 e4       	ldi	r24, 0x45	; 69
    20f4:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    20f8:	0e 94 08 01 	call	0x210	; 0x210 <i2c_readAck>
    20fc:	80 93 40 09 	sts	0x0940, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2100:	0e 94 12 01 	call	0x224	; 0x224 <i2c_readNak>
    2104:	80 93 43 09 	sts	0x0943, r24
  	 	     	i2c_stop();								// set stop condition = release bus 		
    2108:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
				
				if(state != INIT && printVar){
    210c:	81 14       	cp	r8, r1
    210e:	91 04       	cpc	r9, r1
    2110:	39 f1       	breq	.+78     	; 0x2160 <main+0x1114>
    2112:	33 20       	and	r3, r3
    2114:	29 f1       	breq	.+74     	; 0x2160 <main+0x1114>
					lcd_goto_xy(6,1);
    2116:	86 e0       	ldi	r24, 0x06	; 6
    2118:	61 e0       	ldi	r22, 0x01	; 1
    211a:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
					serial_print_string("     ");
    211e:	89 ec       	ldi	r24, 0xC9	; 201
    2120:	93 e0       	ldi	r25, 0x03	; 3
    2122:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
					lcd_goto_xy(0,1);
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	61 e0       	ldi	r22, 0x01	; 1
    212a:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
					serial_print_string_noCRLF("STATE: ");
    212e:	8f ec       	ldi	r24, 0xCF	; 207
    2130:	93 e0       	ldi	r25, 0x03	; 3
    2132:	0e 94 41 07 	call	0xe82	; 0xe82 <serial_print_string_noCRLF>
					serial_print_int(state);
    2136:	c4 01       	movw	r24, r8
    2138:	0e 94 08 08 	call	0x1010	; 0x1010 <serial_print_int>
					serial_print_string_noCRLF("=> ");
    213c:	87 ed       	ldi	r24, 0xD7	; 215
    213e:	93 e0       	ldi	r25, 0x03	; 3
    2140:	0e 94 41 07 	call	0xe82	; 0xe82 <serial_print_string_noCRLF>
					serial_print_string(run_states_msg_list[state]);
    2144:	f4 01       	movw	r30, r8
    2146:	ee 0f       	add	r30, r30
    2148:	ff 1f       	adc	r31, r31
    214a:	e7 57       	subi	r30, 0x77	; 119
    214c:	f7 4f       	sbci	r31, 0xF7	; 247
    214e:	80 81       	ld	r24, Z
    2150:	91 81       	ldd	r25, Z+1	; 0x01
    2152:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
					serial_print_string(" ");
    2156:	8b ed       	ldi	r24, 0xDB	; 219
    2158:	93 e0       	ldi	r25, 0x03	; 3
    215a:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
    215e:	33 24       	eor	r3, r3

					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    2160:	c3 01       	movw	r24, r6
    2162:	be 01       	movw	r22, r28
    2164:	64 5f       	subi	r22, 0xF4	; 244
    2166:	7f 4f       	sbci	r23, 0xFF	; 255
    2168:	0e 94 b0 03 	call	0x760	; 0x760 <button_debounce>
    216c:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    216e:	c4 01       	movw	r24, r8
    2170:	a3 01       	movw	r20, r6
    2172:	92 01       	movw	r18, r4
    2174:	0e 94 1f 04 	call	0x83e	; 0x83e <init_trans>
    2178:	88 23       	and	r24, r24
    217a:	31 f0       	breq	.+12     	; 0x2188 <main+0x113c>
					buttonTriggered = false;
					state ++;
    217c:	08 94       	sec
    217e:	81 1c       	adc	r8, r1
    2180:	91 1c       	adc	r9, r1
    2182:	23 01       	movw	r4, r6
    2184:	33 24       	eor	r3, r3
    2186:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == MOVEC1 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0){
    2188:	88 e0       	ldi	r24, 0x08	; 8
    218a:	88 16       	cp	r8, r24
    218c:	91 04       	cpc	r9, r1
    218e:	51 f4       	brne	.+20     	; 0x21a4 <main+0x1158>
    2190:	80 91 40 09 	lds	r24, 0x0940
    2194:	85 fd       	sbrc	r24, 5
    2196:	06 c0       	rjmp	.+12     	; 0x21a4 <main+0x1158>
    2198:	23 01       	movw	r4, r6
    219a:	b3 e1       	ldi	r27, 0x13	; 19
    219c:	8b 2e       	mov	r8, r27
    219e:	91 2c       	mov	r9, r1
    21a0:	33 24       	eor	r3, r3
    21a2:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    21a4:	c4 01       	movw	r24, r8
    21a6:	b3 01       	movw	r22, r6
    21a8:	a2 01       	movw	r20, r4
    21aa:	0e 94 46 05 	call	0xa8c	; 0xa8c <secondB_trans>
    21ae:	88 23       	and	r24, r24
    21b0:	31 f0       	breq	.+12     	; 0x21be <main+0x1172>
					state ++;
    21b2:	08 94       	sec
    21b4:	81 1c       	adc	r8, r1
    21b6:	91 1c       	adc	r9, r1
    21b8:	23 01       	movw	r4, r6
    21ba:	33 24       	eor	r3, r3
    21bc:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef)){
    21be:	c4 01       	movw	r24, r8
    21c0:	b3 01       	movw	r22, r6
    21c2:	a2 01       	movw	r20, r4
    21c4:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <dry_trans>
    21c8:	88 23       	and	r24, r24
    21ca:	31 f0       	breq	.+12     	; 0x21d8 <main+0x118c>
					state ++;
    21cc:	08 94       	sec
    21ce:	81 1c       	adc	r8, r1
    21d0:	91 1c       	adc	r9, r1
    21d2:	23 01       	movw	r4, r6
    21d4:	33 24       	eor	r3, r3
    21d6:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    21d8:	95 e2       	ldi	r25, 0x25	; 37
    21da:	89 16       	cp	r8, r25
    21dc:	91 04       	cpc	r9, r1
    21de:	41 f4       	brne	.+16     	; 0x21f0 <main+0x11a4>
    21e0:	c3 01       	movw	r24, r6
    21e2:	84 19       	sub	r24, r4
    21e4:	95 09       	sbc	r25, r5
    21e6:	0b 97       	sbiw	r24, 0x0b	; 11
    21e8:	1c f0       	brlt	.+6      	; 0x21f0 <main+0x11a4>
    21ea:	a6 e2       	ldi	r26, 0x26	; 38
    21ec:	8a 2e       	mov	r8, r26
    21ee:	91 2c       	mov	r9, r1
				}


				//state actions
				
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    21f0:	c4 01       	movw	r24, r8
    21f2:	b3 01       	movw	r22, r6
    21f4:	ae 01       	movw	r20, r28
    21f6:	4e 5f       	subi	r20, 0xFE	; 254
    21f8:	5f 4f       	sbci	r21, 0xFF	; 255
    21fa:	9e 01       	movw	r18, r28
    21fc:	2c 5f       	subi	r18, 0xFC	; 252
    21fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2200:	8e 01       	movw	r16, r28
    2202:	0a 5f       	subi	r16, 0xFA	; 250
    2204:	1f 4f       	sbci	r17, 0xFF	; 255
    2206:	f8 e0       	ldi	r31, 0x08	; 8
    2208:	ef 2e       	mov	r14, r31
    220a:	f1 2c       	mov	r15, r1
    220c:	ec 0e       	add	r14, r28
    220e:	fd 1e       	adc	r15, r29
    2210:	ea e0       	ldi	r30, 0x0A	; 10
    2212:	ce 2e       	mov	r12, r30
    2214:	d1 2c       	mov	r13, r1
    2216:	cc 0e       	add	r12, r28
    2218:	dd 1e       	adc	r13, r29
    221a:	5e 01       	movw	r10, r28
    221c:	08 94       	sec
    221e:	a1 1c       	adc	r10, r1
    2220:	b1 1c       	adc	r11, r1
    2222:	0e 94 67 07 	call	0xece	; 0xece <init_action>
				if(state == MOVEC1){
    2226:	28 e0       	ldi	r18, 0x08	; 8
    2228:	82 16       	cp	r8, r18
    222a:	91 04       	cpc	r9, r1
    222c:	49 f4       	brne	.+18     	; 0x2240 <main+0x11f4>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    222e:	80 91 45 09 	lds	r24, 0x0945
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2232:	41 e0       	ldi	r20, 0x01	; 1
    2234:	50 e0       	ldi	r21, 0x00	; 0
    2236:	5d 83       	std	Y+5, r21	; 0x05
    2238:	4c 83       	std	Y+4, r20	; 0x04
    223a:	80 63       	ori	r24, 0x30	; 48
    223c:	80 93 45 09 	sts	0x0945, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2240:	c4 01       	movw	r24, r8
    2242:	b3 01       	movw	r22, r6
    2244:	ae 01       	movw	r20, r28
    2246:	4e 5f       	subi	r20, 0xFE	; 254
    2248:	5f 4f       	sbci	r21, 0xFF	; 255
    224a:	9e 01       	movw	r18, r28
    224c:	2c 5f       	subi	r18, 0xFC	; 252
    224e:	3f 4f       	sbci	r19, 0xFF	; 255
    2250:	8e 01       	movw	r16, r28
    2252:	0a 5f       	subi	r16, 0xFA	; 250
    2254:	1f 4f       	sbci	r17, 0xFF	; 255
    2256:	b8 e0       	ldi	r27, 0x08	; 8
    2258:	eb 2e       	mov	r14, r27
    225a:	f1 2c       	mov	r15, r1
    225c:	ec 0e       	add	r14, r28
    225e:	fd 1e       	adc	r15, r29
    2260:	aa e0       	ldi	r26, 0x0A	; 10
    2262:	ca 2e       	mov	r12, r26
    2264:	d1 2c       	mov	r13, r1
    2266:	cc 0e       	add	r12, r28
    2268:	dd 1e       	adc	r13, r29
    226a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    226e:	c4 01       	movw	r24, r8
    2270:	b3 01       	movw	r22, r6
    2272:	ae 01       	movw	r20, r28
    2274:	4e 5f       	subi	r20, 0xFE	; 254
    2276:	5f 4f       	sbci	r21, 0xFF	; 255
    2278:	9e 01       	movw	r18, r28
    227a:	2c 5f       	subi	r18, 0xFC	; 252
    227c:	3f 4f       	sbci	r19, 0xFF	; 255
    227e:	8e 01       	movw	r16, r28
    2280:	0a 5f       	subi	r16, 0xFA	; 250
    2282:	1f 4f       	sbci	r17, 0xFF	; 255
    2284:	f8 e0       	ldi	r31, 0x08	; 8
    2286:	ef 2e       	mov	r14, r31
    2288:	f1 2c       	mov	r15, r1
    228a:	ec 0e       	add	r14, r28
    228c:	fd 1e       	adc	r15, r29
    228e:	ea e0       	ldi	r30, 0x0A	; 10
    2290:	ce 2e       	mov	r12, r30
    2292:	d1 2c       	mov	r13, r1
    2294:	cc 0e       	add	r12, r28
    2296:	dd 1e       	adc	r13, r29
    2298:	0e 94 00 03 	call	0x600	; 0x600 <dry_action>
				if(state == END){
    229c:	55 e2       	ldi	r21, 0x25	; 37
    229e:	85 16       	cp	r8, r21
    22a0:	91 04       	cpc	r9, r1
    22a2:	71 f4       	brne	.+28     	; 0x22c0 <main+0x1274>
					plateLoadMotor = 0;
    22a4:	1b 82       	std	Y+3, r1	; 0x03
    22a6:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    22a8:	80 91 45 09 	lds	r24, 0x0945
    22ac:	8b 7f       	andi	r24, 0xFB	; 251
    22ae:	80 93 45 09 	sts	0x0945, r24
					if(print35 == 1){
    22b2:	22 20       	and	r2, r2
    22b4:	29 f0       	breq	.+10     	; 0x22c0 <main+0x1274>
						//clear();
						serial_print_string("END OF CYCLE");
    22b6:	86 ee       	ldi	r24, 0xE6	; 230
    22b8:	93 e0       	ldi	r25, 0x03	; 3
    22ba:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
    22be:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    22c0:	4a 81       	ldd	r20, Y+2	; 0x02
    22c2:	5b 81       	ldd	r21, Y+3	; 0x03
    22c4:	2c 81       	ldd	r18, Y+4	; 0x04
    22c6:	3d 81       	ldd	r19, Y+5	; 0x05
    22c8:	0e 81       	ldd	r16, Y+6	; 0x06
    22ca:	1f 81       	ldd	r17, Y+7	; 0x07
    22cc:	e8 84       	ldd	r14, Y+8	; 0x08
    22ce:	f9 84       	ldd	r15, Y+9	; 0x09
    22d0:	ca 84       	ldd	r12, Y+10	; 0x0a
    22d2:	db 84       	ldd	r13, Y+11	; 0x0b
    22d4:	c3 01       	movw	r24, r6
    22d6:	b2 01       	movw	r22, r4
    22d8:	0e 94 8a 06 	call	0xd14	; 0xd14 <motor_and_write>

				serial_check(); counter++;
    22dc:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <serial_check>
    22e0:	80 91 11 04 	lds	r24, 0x0411
    22e4:	90 91 12 04 	lds	r25, 0x0412
    22e8:	6f 93       	push	r22
    22ea:	64 e0       	ldi	r22, 0x04	; 4
    22ec:	6a 95       	dec	r22
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <main+0x12a0>
    22f0:	6f 91       	pop	r22
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	c9 f7       	brne	.-14     	; 0x22e8 <main+0x129c>

		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("SECOND B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    22f6:	86 e2       	ldi	r24, 0x26	; 38
    22f8:	88 16       	cp	r8, r24
    22fa:	91 04       	cpc	r9, r1
    22fc:	09 f4       	brne	.+2      	; 0x2300 <main+0x12b4>
    22fe:	f8 c2       	rjmp	.+1520   	; 0x28f0 <main+0x18a4>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    2300:	08 94       	sec
    2302:	61 1c       	adc	r6, r1
    2304:	71 1c       	adc	r7, r1
    2306:	ef ce       	rjmp	.-546    	; 0x20e6 <main+0x109a>
				delay_us(delayTimeMicroSeconds);
   		 	}
		}


		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    230e:	88 23       	and	r24, r24
    2310:	09 f0       	breq	.+2      	; 0x2314 <main+0x12c8>
    2312:	6a c1       	rjmp	.+724    	; 0x25e8 <main+0x159c>
    2314:	82 e0       	ldi	r24, 0x02	; 2
    2316:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    231a:	88 23       	and	r24, r24
    231c:	09 f4       	brne	.+2      	; 0x2320 <main+0x12d4>
    231e:	64 c1       	rjmp	.+712    	; 0x25e8 <main+0x159c>
			lcd_goto_xy(7,0);
    2320:	87 e0       	ldi	r24, 0x07	; 7
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
			serial_print_string("BOTH B");
    2328:	86 eb       	ldi	r24, 0xB6	; 182
    232a:	93 e0       	ldi	r25, 0x03	; 3
    232c:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9d 83       	std	Y+5, r25	; 0x05
    2336:	8c 83       	std	Y+4, r24	; 0x04
    2338:	80 91 45 09 	lds	r24, 0x0945
    233c:	80 62       	ori	r24, 0x20	; 32
    233e:	80 93 45 09 	sts	0x0945, r24
    2342:	88 24       	eor	r8, r8
    2344:	99 24       	eor	r9, r9
    2346:	66 24       	eor	r6, r6
    2348:	77 24       	eor	r7, r7
    234a:	44 24       	eor	r4, r4
    234c:	55 24       	eor	r5, r5
    234e:	22 24       	eor	r2, r2
    2350:	23 94       	inc	r2
    2352:	33 24       	eor	r3, r3
    2354:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    2356:	84 e4       	ldi	r24, 0x44	; 68
    2358:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				i2c_write(0x0);								// write command byte
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2362:	85 e4       	ldi	r24, 0x45	; 69
    2364:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    2368:	0e 94 08 01 	call	0x210	; 0x210 <i2c_readAck>
    236c:	80 93 40 09 	sts	0x0940, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2370:	0e 94 12 01 	call	0x224	; 0x224 <i2c_readNak>
    2374:	80 93 43 09 	sts	0x0943, r24
  	 	     	i2c_stop();								// set stop condition = release bus 		
    2378:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
				
				if(state != INIT && printVar){
    237c:	81 14       	cp	r8, r1
    237e:	91 04       	cpc	r9, r1
    2380:	39 f1       	breq	.+78     	; 0x23d0 <main+0x1384>
    2382:	33 20       	and	r3, r3
    2384:	29 f1       	breq	.+74     	; 0x23d0 <main+0x1384>
					lcd_goto_xy(6,1);
    2386:	86 e0       	ldi	r24, 0x06	; 6
    2388:	61 e0       	ldi	r22, 0x01	; 1
    238a:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
					serial_print_string("     ");
    238e:	89 ec       	ldi	r24, 0xC9	; 201
    2390:	93 e0       	ldi	r25, 0x03	; 3
    2392:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
					lcd_goto_xy(0,1);
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	61 e0       	ldi	r22, 0x01	; 1
    239a:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
					serial_print_string_noCRLF("STATE: ");
    239e:	8f ec       	ldi	r24, 0xCF	; 207
    23a0:	93 e0       	ldi	r25, 0x03	; 3
    23a2:	0e 94 41 07 	call	0xe82	; 0xe82 <serial_print_string_noCRLF>
					serial_print_int(state);
    23a6:	c4 01       	movw	r24, r8
    23a8:	0e 94 08 08 	call	0x1010	; 0x1010 <serial_print_int>
					serial_print_string_noCRLF("=> ");
    23ac:	87 ed       	ldi	r24, 0xD7	; 215
    23ae:	93 e0       	ldi	r25, 0x03	; 3
    23b0:	0e 94 41 07 	call	0xe82	; 0xe82 <serial_print_string_noCRLF>
					serial_print_string(run_states_msg_list[state]);
    23b4:	f4 01       	movw	r30, r8
    23b6:	ee 0f       	add	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	e7 57       	subi	r30, 0x77	; 119
    23bc:	f7 4f       	sbci	r31, 0xF7	; 247
    23be:	80 81       	ld	r24, Z
    23c0:	91 81       	ldd	r25, Z+1	; 0x01
    23c2:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
					serial_print_string(" ");
    23c6:	8b ed       	ldi	r24, 0xDB	; 219
    23c8:	93 e0       	ldi	r25, 0x03	; 3
    23ca:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
    23ce:	33 24       	eor	r3, r3

					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    23d0:	c3 01       	movw	r24, r6
    23d2:	be 01       	movw	r22, r28
    23d4:	64 5f       	subi	r22, 0xF4	; 244
    23d6:	7f 4f       	sbci	r23, 0xFF	; 255
    23d8:	0e 94 b0 03 	call	0x760	; 0x760 <button_debounce>
    23dc:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    23de:	c4 01       	movw	r24, r8
    23e0:	a3 01       	movw	r20, r6
    23e2:	92 01       	movw	r18, r4
    23e4:	0e 94 1f 04 	call	0x83e	; 0x83e <init_trans>
    23e8:	88 23       	and	r24, r24
    23ea:	31 f0       	breq	.+12     	; 0x23f8 <main+0x13ac>
					buttonTriggered = false;
					state ++;
    23ec:	08 94       	sec
    23ee:	81 1c       	adc	r8, r1
    23f0:	91 1c       	adc	r9, r1
    23f2:	23 01       	movw	r4, r6
    23f4:	33 24       	eor	r3, r3
    23f6:	33 94       	inc	r3
					printVar = true;
				}

				
				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    23f8:	c4 01       	movw	r24, r8
    23fa:	b3 01       	movw	r22, r6
    23fc:	a2 01       	movw	r20, r4
    23fe:	0e 94 a6 04 	call	0x94c	; 0x94c <firstB_trans>
    2402:	88 23       	and	r24, r24
    2404:	71 f0       	breq	.+28     	; 0x2422 <main+0x13d6>
					state ++;
    2406:	08 94       	sec
    2408:	81 1c       	adc	r8, r1
    240a:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    240c:	9c e0       	ldi	r25, 0x0C	; 12
    240e:	89 16       	cp	r8, r25
    2410:	91 04       	cpc	r9, r1
    2412:	c9 f0       	breq	.+50     	; 0x2446 <main+0x13fa>
    2414:	20 e1       	ldi	r18, 0x10	; 16
    2416:	82 16       	cp	r8, r18
    2418:	91 04       	cpc	r9, r1
    241a:	a9 f0       	breq	.+42     	; 0x2446 <main+0x13fa>
    241c:	23 01       	movw	r4, r6
    241e:	33 24       	eor	r3, r3
    2420:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    2422:	31 e1       	ldi	r19, 0x11	; 17
    2424:	83 16       	cp	r8, r19
    2426:	91 04       	cpc	r9, r1
    2428:	81 f4       	brne	.+32     	; 0x244a <main+0x13fe>
    242a:	93 01       	movw	r18, r6
    242c:	24 19       	sub	r18, r4
    242e:	35 09       	sbc	r19, r5
    2430:	80 91 f7 03 	lds	r24, 0x03F7
    2434:	90 91 f8 03 	lds	r25, 0x03F8
    2438:	82 17       	cp	r24, r18
    243a:	93 07       	cpc	r25, r19
    243c:	34 f4       	brge	.+12     	; 0x244a <main+0x13fe>
    243e:	23 01       	movw	r4, r6
    2440:	02 e1       	ldi	r16, 0x12	; 18
    2442:	80 2e       	mov	r8, r16
    2444:	91 2c       	mov	r9, r1
    2446:	33 24       	eor	r3, r3
    2448:	33 94       	inc	r3
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    244a:	c4 01       	movw	r24, r8
    244c:	b3 01       	movw	r22, r6
    244e:	a2 01       	movw	r20, r4
    2450:	0e 94 46 05 	call	0xa8c	; 0xa8c <secondB_trans>
    2454:	88 23       	and	r24, r24
    2456:	31 f0       	breq	.+12     	; 0x2464 <main+0x1418>
					state ++;
    2458:	08 94       	sec
    245a:	81 1c       	adc	r8, r1
    245c:	91 1c       	adc	r9, r1
    245e:	23 01       	movw	r4, r6
    2460:	33 24       	eor	r3, r3
    2462:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef)){
    2464:	c4 01       	movw	r24, r8
    2466:	b3 01       	movw	r22, r6
    2468:	a2 01       	movw	r20, r4
    246a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <dry_trans>
    246e:	88 23       	and	r24, r24
    2470:	31 f0       	breq	.+12     	; 0x247e <main+0x1432>
					state ++;
    2472:	08 94       	sec
    2474:	81 1c       	adc	r8, r1
    2476:	91 1c       	adc	r9, r1
    2478:	23 01       	movw	r4, r6
    247a:	33 24       	eor	r3, r3
    247c:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    247e:	45 e2       	ldi	r20, 0x25	; 37
    2480:	84 16       	cp	r8, r20
    2482:	91 04       	cpc	r9, r1
    2484:	41 f4       	brne	.+16     	; 0x2496 <main+0x144a>
    2486:	c3 01       	movw	r24, r6
    2488:	84 19       	sub	r24, r4
    248a:	95 09       	sbc	r25, r5
    248c:	0b 97       	sbiw	r24, 0x0b	; 11
    248e:	1c f0       	brlt	.+6      	; 0x2496 <main+0x144a>
    2490:	16 e2       	ldi	r17, 0x26	; 38
    2492:	81 2e       	mov	r8, r17
    2494:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    2496:	c4 01       	movw	r24, r8
    2498:	b3 01       	movw	r22, r6
    249a:	ae 01       	movw	r20, r28
    249c:	4e 5f       	subi	r20, 0xFE	; 254
    249e:	5f 4f       	sbci	r21, 0xFF	; 255
    24a0:	9e 01       	movw	r18, r28
    24a2:	2c 5f       	subi	r18, 0xFC	; 252
    24a4:	3f 4f       	sbci	r19, 0xFF	; 255
    24a6:	8e 01       	movw	r16, r28
    24a8:	0a 5f       	subi	r16, 0xFA	; 250
    24aa:	1f 4f       	sbci	r17, 0xFF	; 255
    24ac:	b8 e0       	ldi	r27, 0x08	; 8
    24ae:	eb 2e       	mov	r14, r27
    24b0:	f1 2c       	mov	r15, r1
    24b2:	ec 0e       	add	r14, r28
    24b4:	fd 1e       	adc	r15, r29
    24b6:	aa e0       	ldi	r26, 0x0A	; 10
    24b8:	ca 2e       	mov	r12, r26
    24ba:	d1 2c       	mov	r13, r1
    24bc:	cc 0e       	add	r12, r28
    24be:	dd 1e       	adc	r13, r29
    24c0:	5e 01       	movw	r10, r28
    24c2:	08 94       	sec
    24c4:	a1 1c       	adc	r10, r1
    24c6:	b1 1c       	adc	r11, r1
    24c8:	0e 94 67 07 	call	0xece	; 0xece <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    24cc:	c4 01       	movw	r24, r8
    24ce:	b3 01       	movw	r22, r6
    24d0:	ae 01       	movw	r20, r28
    24d2:	4e 5f       	subi	r20, 0xFE	; 254
    24d4:	5f 4f       	sbci	r21, 0xFF	; 255
    24d6:	9e 01       	movw	r18, r28
    24d8:	2c 5f       	subi	r18, 0xFC	; 252
    24da:	3f 4f       	sbci	r19, 0xFF	; 255
    24dc:	8e 01       	movw	r16, r28
    24de:	0a 5f       	subi	r16, 0xFA	; 250
    24e0:	1f 4f       	sbci	r17, 0xFF	; 255
    24e2:	f8 e0       	ldi	r31, 0x08	; 8
    24e4:	ef 2e       	mov	r14, r31
    24e6:	f1 2c       	mov	r15, r1
    24e8:	ec 0e       	add	r14, r28
    24ea:	fd 1e       	adc	r15, r29
    24ec:	ea e0       	ldi	r30, 0x0A	; 10
    24ee:	ce 2e       	mov	r12, r30
    24f0:	d1 2c       	mov	r13, r1
    24f2:	cc 0e       	add	r12, r28
    24f4:	dd 1e       	adc	r13, r29
    24f6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <brush1_action>
				if(state == B1STOP2){
    24fa:	51 e1       	ldi	r21, 0x11	; 17
    24fc:	85 16       	cp	r8, r21
    24fe:	91 04       	cpc	r9, r1
    2500:	79 f4       	brne	.+30     	; 0x2520 <main+0x14d4>
					brush1Motor = 0;
    2502:	1f 82       	std	Y+7, r1	; 0x07
    2504:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    2506:	1d 82       	std	Y+5, r1	; 0x05
    2508:	1c 82       	std	Y+4, r1	; 0x04
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    250a:	80 91 41 09 	lds	r24, 0x0941
    250e:	8e 7f       	andi	r24, 0xFE	; 254
    2510:	80 93 41 09 	sts	0x0941, r24
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2514:	80 91 44 09 	lds	r24, 0x0944
    2518:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    251a:	80 62       	ori	r24, 0x20	; 32
    251c:	80 93 44 09 	sts	0x0944, r24
				}
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2520:	c4 01       	movw	r24, r8
    2522:	b3 01       	movw	r22, r6
    2524:	ae 01       	movw	r20, r28
    2526:	4e 5f       	subi	r20, 0xFE	; 254
    2528:	5f 4f       	sbci	r21, 0xFF	; 255
    252a:	9e 01       	movw	r18, r28
    252c:	2c 5f       	subi	r18, 0xFC	; 252
    252e:	3f 4f       	sbci	r19, 0xFF	; 255
    2530:	8e 01       	movw	r16, r28
    2532:	0a 5f       	subi	r16, 0xFA	; 250
    2534:	1f 4f       	sbci	r17, 0xFF	; 255
    2536:	b8 e0       	ldi	r27, 0x08	; 8
    2538:	eb 2e       	mov	r14, r27
    253a:	f1 2c       	mov	r15, r1
    253c:	ec 0e       	add	r14, r28
    253e:	fd 1e       	adc	r15, r29
    2540:	aa e0       	ldi	r26, 0x0A	; 10
    2542:	ca 2e       	mov	r12, r26
    2544:	d1 2c       	mov	r13, r1
    2546:	cc 0e       	add	r12, r28
    2548:	dd 1e       	adc	r13, r29
    254a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    254e:	c4 01       	movw	r24, r8
    2550:	b3 01       	movw	r22, r6
    2552:	ae 01       	movw	r20, r28
    2554:	4e 5f       	subi	r20, 0xFE	; 254
    2556:	5f 4f       	sbci	r21, 0xFF	; 255
    2558:	9e 01       	movw	r18, r28
    255a:	2c 5f       	subi	r18, 0xFC	; 252
    255c:	3f 4f       	sbci	r19, 0xFF	; 255
    255e:	8e 01       	movw	r16, r28
    2560:	0a 5f       	subi	r16, 0xFA	; 250
    2562:	1f 4f       	sbci	r17, 0xFF	; 255
    2564:	f8 e0       	ldi	r31, 0x08	; 8
    2566:	ef 2e       	mov	r14, r31
    2568:	f1 2c       	mov	r15, r1
    256a:	ec 0e       	add	r14, r28
    256c:	fd 1e       	adc	r15, r29
    256e:	ea e0       	ldi	r30, 0x0A	; 10
    2570:	ce 2e       	mov	r12, r30
    2572:	d1 2c       	mov	r13, r1
    2574:	cc 0e       	add	r12, r28
    2576:	dd 1e       	adc	r13, r29
    2578:	0e 94 00 03 	call	0x600	; 0x600 <dry_action>
				if(state == END){
    257c:	85 e2       	ldi	r24, 0x25	; 37
    257e:	88 16       	cp	r8, r24
    2580:	91 04       	cpc	r9, r1
    2582:	71 f4       	brne	.+28     	; 0x25a0 <main+0x1554>
					plateLoadMotor = 0;
    2584:	1b 82       	std	Y+3, r1	; 0x03
    2586:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2588:	80 91 45 09 	lds	r24, 0x0945
    258c:	8b 7f       	andi	r24, 0xFB	; 251
    258e:	80 93 45 09 	sts	0x0945, r24
					if(print35 == 1){
    2592:	22 20       	and	r2, r2
    2594:	29 f0       	breq	.+10     	; 0x25a0 <main+0x1554>
						//clear();
						serial_print_string("END OF CYCLE");
    2596:	86 ee       	ldi	r24, 0xE6	; 230
    2598:	93 e0       	ldi	r25, 0x03	; 3
    259a:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
    259e:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    25a0:	4a 81       	ldd	r20, Y+2	; 0x02
    25a2:	5b 81       	ldd	r21, Y+3	; 0x03
    25a4:	2c 81       	ldd	r18, Y+4	; 0x04
    25a6:	3d 81       	ldd	r19, Y+5	; 0x05
    25a8:	0e 81       	ldd	r16, Y+6	; 0x06
    25aa:	1f 81       	ldd	r17, Y+7	; 0x07
    25ac:	e8 84       	ldd	r14, Y+8	; 0x08
    25ae:	f9 84       	ldd	r15, Y+9	; 0x09
    25b0:	ca 84       	ldd	r12, Y+10	; 0x0a
    25b2:	db 84       	ldd	r13, Y+11	; 0x0b
    25b4:	c3 01       	movw	r24, r6
    25b6:	b2 01       	movw	r22, r4
    25b8:	0e 94 8a 06 	call	0xd14	; 0xd14 <motor_and_write>

				serial_check(); counter++;
    25bc:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <serial_check>
    25c0:	80 91 11 04 	lds	r24, 0x0411
    25c4:	90 91 12 04 	lds	r25, 0x0412
    25c8:	6f 93       	push	r22
    25ca:	64 e0       	ldi	r22, 0x04	; 4
    25cc:	6a 95       	dec	r22
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <main+0x1580>
    25d0:	6f 91       	pop	r22
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	c9 f7       	brne	.-14     	; 0x25c8 <main+0x157c>

		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("BOTH B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    25d6:	96 e2       	ldi	r25, 0x26	; 38
    25d8:	89 16       	cp	r8, r25
    25da:	91 04       	cpc	r9, r1
    25dc:	09 f4       	brne	.+2      	; 0x25e0 <main+0x1594>
    25de:	88 c1       	rjmp	.+784    	; 0x28f0 <main+0x18a4>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    25e0:	08 94       	sec
    25e2:	61 1c       	adc	r6, r1
    25e4:	71 1c       	adc	r7, r1
    25e6:	b7 ce       	rjmp	.-658    	; 0x2356 <main+0x130a>
				delay_us(delayTimeMicroSeconds);
   		 	}
		}

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    25ee:	88 23       	and	r24, r24
    25f0:	09 f4       	brne	.+2      	; 0x25f4 <main+0x15a8>
    25f2:	7e c1       	rjmp	.+764    	; 0x28f0 <main+0x18a4>
    25f4:	82 e0       	ldi	r24, 0x02	; 2
    25f6:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    25fa:	88 23       	and	r24, r24
    25fc:	09 f4       	brne	.+2      	; 0x2600 <main+0x15b4>
    25fe:	78 c1       	rjmp	.+752    	; 0x28f0 <main+0x18a4>
			lcd_goto_xy(7,0);
    2600:	87 e0       	ldi	r24, 0x07	; 7
    2602:	60 e0       	ldi	r22, 0x00	; 0
    2604:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
			serial_print_string("STEP");
    2608:	8d eb       	ldi	r24, 0xBD	; 189
    260a:	93 e0       	ldi	r25, 0x03	; 3
    260c:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9d 83       	std	Y+5, r25	; 0x05
    2616:	8c 83       	std	Y+4, r24	; 0x04
    2618:	80 91 45 09 	lds	r24, 0x0945
    261c:	80 62       	ori	r24, 0x20	; 32
    261e:	80 93 45 09 	sts	0x0945, r24
    2622:	88 24       	eor	r8, r8
    2624:	99 24       	eor	r9, r9
    2626:	66 24       	eor	r6, r6
    2628:	77 24       	eor	r7, r7
    262a:	1a 8a       	std	Y+18, r1	; 0x12
    262c:	19 8a       	std	Y+17, r1	; 0x11
    262e:	44 24       	eor	r4, r4
    2630:	55 24       	eor	r5, r5
    2632:	22 24       	eor	r2, r2
    2634:	23 94       	inc	r2
    2636:	33 24       	eor	r3, r3
    2638:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    263a:	84 e4       	ldi	r24, 0x44	; 68
    263c:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				i2c_write(0x0);								// write command byte
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2646:	85 e4       	ldi	r24, 0x45	; 69
    2648:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    264c:	0e 94 08 01 	call	0x210	; 0x210 <i2c_readAck>
    2650:	80 93 40 09 	sts	0x0940, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2654:	0e 94 12 01 	call	0x224	; 0x224 <i2c_readNak>
    2658:	80 93 43 09 	sts	0x0943, r24
  	 	     	i2c_stop();								// set stop condition = release bus 		
    265c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
				
				if(state != INIT && printVar){
    2660:	81 14       	cp	r8, r1
    2662:	91 04       	cpc	r9, r1
    2664:	39 f1       	breq	.+78     	; 0x26b4 <main+0x1668>
    2666:	33 20       	and	r3, r3
    2668:	29 f1       	breq	.+74     	; 0x26b4 <main+0x1668>
					lcd_goto_xy(6,1);
    266a:	86 e0       	ldi	r24, 0x06	; 6
    266c:	61 e0       	ldi	r22, 0x01	; 1
    266e:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
					serial_print_string("     ");
    2672:	89 ec       	ldi	r24, 0xC9	; 201
    2674:	93 e0       	ldi	r25, 0x03	; 3
    2676:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
					lcd_goto_xy(0,1);
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	61 e0       	ldi	r22, 0x01	; 1
    267e:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <lcd_goto_xy>
					serial_print_string_noCRLF("STATE: ");
    2682:	8f ec       	ldi	r24, 0xCF	; 207
    2684:	93 e0       	ldi	r25, 0x03	; 3
    2686:	0e 94 41 07 	call	0xe82	; 0xe82 <serial_print_string_noCRLF>
					serial_print_int(state);
    268a:	c4 01       	movw	r24, r8
    268c:	0e 94 08 08 	call	0x1010	; 0x1010 <serial_print_int>
					serial_print_string_noCRLF("=> ");
    2690:	87 ed       	ldi	r24, 0xD7	; 215
    2692:	93 e0       	ldi	r25, 0x03	; 3
    2694:	0e 94 41 07 	call	0xe82	; 0xe82 <serial_print_string_noCRLF>
					serial_print_string(run_states_msg_list[state]);
    2698:	f4 01       	movw	r30, r8
    269a:	ee 0f       	add	r30, r30
    269c:	ff 1f       	adc	r31, r31
    269e:	e7 57       	subi	r30, 0x77	; 119
    26a0:	f7 4f       	sbci	r31, 0xF7	; 247
    26a2:	80 81       	ld	r24, Z
    26a4:	91 81       	ldd	r25, Z+1	; 0x01
    26a6:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
					serial_print_string(" ");
    26aa:	8b ed       	ldi	r24, 0xDB	; 219
    26ac:	93 e0       	ldi	r25, 0x03	; 3
    26ae:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
    26b2:	33 24       	eor	r3, r3

					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    26b4:	c3 01       	movw	r24, r6
    26b6:	be 01       	movw	r22, r28
    26b8:	64 5f       	subi	r22, 0xF4	; 244
    26ba:	7f 4f       	sbci	r23, 0xFF	; 255
    26bc:	0e 94 b0 03 	call	0x760	; 0x760 <button_debounce>
    26c0:	18 2f       	mov	r17, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    26c2:	c4 01       	movw	r24, r8
    26c4:	61 2f       	mov	r22, r17
    26c6:	a3 01       	movw	r20, r6
    26c8:	92 01       	movw	r18, r4
    26ca:	0e 94 1f 04 	call	0x83e	; 0x83e <init_trans>
    26ce:	88 23       	and	r24, r24
    26d0:	39 f0       	breq	.+14     	; 0x26e0 <main+0x1694>
    26d2:	23 01       	movw	r4, r6
    26d4:	37 e2       	ldi	r19, 0x27	; 39
    26d6:	83 2e       	mov	r8, r19
    26d8:	91 2c       	mov	r9, r1
    26da:	10 e0       	ldi	r17, 0x00	; 0
    26dc:	33 24       	eor	r3, r3
    26de:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    26e0:	c4 01       	movw	r24, r8
    26e2:	b3 01       	movw	r22, r6
    26e4:	a2 01       	movw	r20, r4
    26e6:	0e 94 a6 04 	call	0x94c	; 0x94c <firstB_trans>
    26ea:	88 23       	and	r24, r24
    26ec:	71 f4       	brne	.+28     	; 0x270a <main+0x16be>
					state = WAIT;
					if(state != B1STOP1 && state != CLEAN1_3)
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    26ee:	21 e1       	ldi	r18, 0x11	; 17
    26f0:	82 16       	cp	r8, r18
    26f2:	91 04       	cpc	r9, r1
    26f4:	81 f4       	brne	.+32     	; 0x2716 <main+0x16ca>
    26f6:	93 01       	movw	r18, r6
    26f8:	24 19       	sub	r18, r4
    26fa:	35 09       	sbc	r19, r5
    26fc:	80 91 f7 03 	lds	r24, 0x03F7
    2700:	90 91 f8 03 	lds	r25, 0x03F8
    2704:	82 17       	cp	r24, r18
    2706:	93 07       	cpc	r25, r19
    2708:	34 f4       	brge	.+12     	; 0x2716 <main+0x16ca>
    270a:	23 01       	movw	r4, r6
    270c:	27 e2       	ldi	r18, 0x27	; 39
    270e:	82 2e       	mov	r8, r18
    2710:	91 2c       	mov	r9, r1
    2712:	33 24       	eor	r3, r3
    2714:	33 94       	inc	r3
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    2716:	c4 01       	movw	r24, r8
    2718:	b3 01       	movw	r22, r6
    271a:	a2 01       	movw	r20, r4
    271c:	0e 94 46 05 	call	0xa8c	; 0xa8c <secondB_trans>
    2720:	88 23       	and	r24, r24
    2722:	31 f0       	breq	.+12     	; 0x2730 <main+0x16e4>
    2724:	23 01       	movw	r4, r6
    2726:	97 e2       	ldi	r25, 0x27	; 39
    2728:	89 2e       	mov	r8, r25
    272a:	91 2c       	mov	r9, r1
    272c:	33 24       	eor	r3, r3
    272e:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}
				
				//Dry
				if(dry_trans(state, counter, counterRef)){
    2730:	c4 01       	movw	r24, r8
    2732:	b3 01       	movw	r22, r6
    2734:	a2 01       	movw	r20, r4
    2736:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <dry_trans>
    273a:	88 23       	and	r24, r24
    273c:	21 f0       	breq	.+8      	; 0x2746 <main+0x16fa>
    273e:	23 01       	movw	r4, r6
    2740:	33 24       	eor	r3, r3
    2742:	33 94       	inc	r3
    2744:	11 c0       	rjmp	.+34     	; 0x2768 <main+0x171c>
					state = WAIT;
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    2746:	35 e2       	ldi	r19, 0x25	; 37
    2748:	83 16       	cp	r8, r19
    274a:	91 04       	cpc	r9, r1
    274c:	49 f4       	brne	.+18     	; 0x2760 <main+0x1714>
    274e:	c3 01       	movw	r24, r6
    2750:	84 19       	sub	r24, r4
    2752:	95 09       	sbc	r25, r5
    2754:	0b 97       	sbiw	r24, 0x0b	; 11
    2756:	4c f1       	brlt	.+82     	; 0x27aa <main+0x175e>
    2758:	86 e2       	ldi	r24, 0x26	; 38
    275a:	88 2e       	mov	r8, r24
    275c:	91 2c       	mov	r9, r1
    275e:	25 c0       	rjmp	.+74     	; 0x27aa <main+0x175e>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    2760:	47 e2       	ldi	r20, 0x27	; 39
    2762:	84 16       	cp	r8, r20
    2764:	91 04       	cpc	r9, r1
    2766:	09 f5       	brne	.+66     	; 0x27aa <main+0x175e>
    2768:	11 23       	and	r17, r17
    276a:	21 f4       	brne	.+8      	; 0x2774 <main+0x1728>
    276c:	07 e2       	ldi	r16, 0x27	; 39
    276e:	80 2e       	mov	r8, r16
    2770:	91 2c       	mov	r9, r1
    2772:	11 c0       	rjmp	.+34     	; 0x2796 <main+0x174a>
					state = ++last;
    2774:	89 89       	ldd	r24, Y+17	; 0x11
    2776:	9a 89       	ldd	r25, Y+18	; 0x12
    2778:	01 96       	adiw	r24, 0x01	; 1
    277a:	9a 8b       	std	Y+18, r25	; 0x12
    277c:	89 8b       	std	Y+17, r24	; 0x11
				}


				//state actions
						
				if(state == WAIT){
    277e:	87 32       	cpi	r24, 0x27	; 39
    2780:	91 05       	cpc	r25, r1
    2782:	21 f0       	breq	.+8      	; 0x278c <main+0x1740>
    2784:	4c 01       	movw	r8, r24
    2786:	33 24       	eor	r3, r3
    2788:	33 94       	inc	r3
    278a:	0f c0       	rjmp	.+30     	; 0x27aa <main+0x175e>
    278c:	17 e2       	ldi	r17, 0x27	; 39
    278e:	81 2e       	mov	r8, r17
    2790:	91 2c       	mov	r9, r1
    2792:	33 24       	eor	r3, r3
    2794:	33 94       	inc	r3
					plateLoadMotor = 0;
    2796:	1b 82       	std	Y+3, r1	; 0x03
    2798:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    279a:	1d 82       	std	Y+5, r1	; 0x05
    279c:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    279e:	1f 82       	std	Y+7, r1	; 0x07
    27a0:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    27a2:	19 86       	std	Y+9, r1	; 0x09
    27a4:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    27a6:	1b 86       	std	Y+11, r1	; 0x0b
    27a8:	1a 86       	std	Y+10, r1	; 0x0a
				}
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    27aa:	c4 01       	movw	r24, r8
    27ac:	b3 01       	movw	r22, r6
    27ae:	ae 01       	movw	r20, r28
    27b0:	4e 5f       	subi	r20, 0xFE	; 254
    27b2:	5f 4f       	sbci	r21, 0xFF	; 255
    27b4:	9e 01       	movw	r18, r28
    27b6:	2c 5f       	subi	r18, 0xFC	; 252
    27b8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ba:	8e 01       	movw	r16, r28
    27bc:	0a 5f       	subi	r16, 0xFA	; 250
    27be:	1f 4f       	sbci	r17, 0xFF	; 255
    27c0:	b8 e0       	ldi	r27, 0x08	; 8
    27c2:	eb 2e       	mov	r14, r27
    27c4:	f1 2c       	mov	r15, r1
    27c6:	ec 0e       	add	r14, r28
    27c8:	fd 1e       	adc	r15, r29
    27ca:	aa e0       	ldi	r26, 0x0A	; 10
    27cc:	ca 2e       	mov	r12, r26
    27ce:	d1 2c       	mov	r13, r1
    27d0:	cc 0e       	add	r12, r28
    27d2:	dd 1e       	adc	r13, r29
    27d4:	5e 01       	movw	r10, r28
    27d6:	08 94       	sec
    27d8:	a1 1c       	adc	r10, r1
    27da:	b1 1c       	adc	r11, r1
    27dc:	0e 94 67 07 	call	0xece	; 0xece <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    27e0:	c4 01       	movw	r24, r8
    27e2:	b3 01       	movw	r22, r6
    27e4:	ae 01       	movw	r20, r28
    27e6:	4e 5f       	subi	r20, 0xFE	; 254
    27e8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ea:	9e 01       	movw	r18, r28
    27ec:	2c 5f       	subi	r18, 0xFC	; 252
    27ee:	3f 4f       	sbci	r19, 0xFF	; 255
    27f0:	8e 01       	movw	r16, r28
    27f2:	0a 5f       	subi	r16, 0xFA	; 250
    27f4:	1f 4f       	sbci	r17, 0xFF	; 255
    27f6:	f8 e0       	ldi	r31, 0x08	; 8
    27f8:	ef 2e       	mov	r14, r31
    27fa:	f1 2c       	mov	r15, r1
    27fc:	ec 0e       	add	r14, r28
    27fe:	fd 1e       	adc	r15, r29
    2800:	ea e0       	ldi	r30, 0x0A	; 10
    2802:	ce 2e       	mov	r12, r30
    2804:	d1 2c       	mov	r13, r1
    2806:	cc 0e       	add	r12, r28
    2808:	dd 1e       	adc	r13, r29
    280a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <brush1_action>
				if(state == B1STOP2){
    280e:	91 e1       	ldi	r25, 0x11	; 17
    2810:	89 16       	cp	r8, r25
    2812:	91 04       	cpc	r9, r1
    2814:	51 f4       	brne	.+20     	; 0x282a <main+0x17de>
					brush1Motor = 0;
    2816:	1f 82       	std	Y+7, r1	; 0x07
    2818:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    281a:	1d 82       	std	Y+5, r1	; 0x05
    281c:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    281e:	80 91 44 09 	lds	r24, 0x0944
    2822:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2824:	80 62       	ori	r24, 0x20	; 32
    2826:	80 93 44 09 	sts	0x0944, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    282a:	c4 01       	movw	r24, r8
    282c:	b3 01       	movw	r22, r6
    282e:	ae 01       	movw	r20, r28
    2830:	4e 5f       	subi	r20, 0xFE	; 254
    2832:	5f 4f       	sbci	r21, 0xFF	; 255
    2834:	9e 01       	movw	r18, r28
    2836:	2c 5f       	subi	r18, 0xFC	; 252
    2838:	3f 4f       	sbci	r19, 0xFF	; 255
    283a:	8e 01       	movw	r16, r28
    283c:	0a 5f       	subi	r16, 0xFA	; 250
    283e:	1f 4f       	sbci	r17, 0xFF	; 255
    2840:	b8 e0       	ldi	r27, 0x08	; 8
    2842:	eb 2e       	mov	r14, r27
    2844:	f1 2c       	mov	r15, r1
    2846:	ec 0e       	add	r14, r28
    2848:	fd 1e       	adc	r15, r29
    284a:	aa e0       	ldi	r26, 0x0A	; 10
    284c:	ca 2e       	mov	r12, r26
    284e:	d1 2c       	mov	r13, r1
    2850:	cc 0e       	add	r12, r28
    2852:	dd 1e       	adc	r13, r29
    2854:	0e 94 58 02 	call	0x4b0	; 0x4b0 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2858:	c4 01       	movw	r24, r8
    285a:	b3 01       	movw	r22, r6
    285c:	ae 01       	movw	r20, r28
    285e:	4e 5f       	subi	r20, 0xFE	; 254
    2860:	5f 4f       	sbci	r21, 0xFF	; 255
    2862:	9e 01       	movw	r18, r28
    2864:	2c 5f       	subi	r18, 0xFC	; 252
    2866:	3f 4f       	sbci	r19, 0xFF	; 255
    2868:	8e 01       	movw	r16, r28
    286a:	0a 5f       	subi	r16, 0xFA	; 250
    286c:	1f 4f       	sbci	r17, 0xFF	; 255
    286e:	f8 e0       	ldi	r31, 0x08	; 8
    2870:	ef 2e       	mov	r14, r31
    2872:	f1 2c       	mov	r15, r1
    2874:	ec 0e       	add	r14, r28
    2876:	fd 1e       	adc	r15, r29
    2878:	ea e0       	ldi	r30, 0x0A	; 10
    287a:	ce 2e       	mov	r12, r30
    287c:	d1 2c       	mov	r13, r1
    287e:	cc 0e       	add	r12, r28
    2880:	dd 1e       	adc	r13, r29
    2882:	0e 94 00 03 	call	0x600	; 0x600 <dry_action>
				if(state == END){
    2886:	25 e2       	ldi	r18, 0x25	; 37
    2888:	82 16       	cp	r8, r18
    288a:	91 04       	cpc	r9, r1
    288c:	71 f4       	brne	.+28     	; 0x28aa <main+0x185e>
					plateLoadMotor = 0;
    288e:	1b 82       	std	Y+3, r1	; 0x03
    2890:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2892:	80 91 45 09 	lds	r24, 0x0945
    2896:	8b 7f       	andi	r24, 0xFB	; 251
    2898:	80 93 45 09 	sts	0x0945, r24
					if(print35 == 1){
    289c:	22 20       	and	r2, r2
    289e:	29 f0       	breq	.+10     	; 0x28aa <main+0x185e>
						//clear();
						serial_print_string("END OF CYCLE");
    28a0:	86 ee       	ldi	r24, 0xE6	; 230
    28a2:	93 e0       	ldi	r25, 0x03	; 3
    28a4:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
    28a8:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    28aa:	4a 81       	ldd	r20, Y+2	; 0x02
    28ac:	5b 81       	ldd	r21, Y+3	; 0x03
    28ae:	2c 81       	ldd	r18, Y+4	; 0x04
    28b0:	3d 81       	ldd	r19, Y+5	; 0x05
    28b2:	0e 81       	ldd	r16, Y+6	; 0x06
    28b4:	1f 81       	ldd	r17, Y+7	; 0x07
    28b6:	e8 84       	ldd	r14, Y+8	; 0x08
    28b8:	f9 84       	ldd	r15, Y+9	; 0x09
    28ba:	ca 84       	ldd	r12, Y+10	; 0x0a
    28bc:	db 84       	ldd	r13, Y+11	; 0x0b
    28be:	c3 01       	movw	r24, r6
    28c0:	b2 01       	movw	r22, r4
    28c2:	0e 94 8a 06 	call	0xd14	; 0xd14 <motor_and_write>

				serial_check(); counter++;
    28c6:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <serial_check>
    28ca:	80 91 11 04 	lds	r24, 0x0411
    28ce:	90 91 12 04 	lds	r25, 0x0412
    28d2:	6f 93       	push	r22
    28d4:	64 e0       	ldi	r22, 0x04	; 4
    28d6:	6a 95       	dec	r22
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <main+0x188a>
    28da:	6f 91       	pop	r22
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	c9 f7       	brne	.-14     	; 0x28d2 <main+0x1886>

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("STEP");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    28e0:	36 e2       	ldi	r19, 0x26	; 38
    28e2:	83 16       	cp	r8, r19
    28e4:	91 04       	cpc	r9, r1
    28e6:	21 f0       	breq	.+8      	; 0x28f0 <main+0x18a4>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    28e8:	08 94       	sec
    28ea:	61 1c       	adc	r6, r1
    28ec:	71 1c       	adc	r7, r1
    28ee:	a5 ce       	rjmp	.-694    	; 0x263a <main+0x15ee>
				delay_us(delayTimeMicroSeconds);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    28f0:	80 91 45 09 	lds	r24, 0x0945
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    28f4:	8b 7d       	andi	r24, 0xDB	; 219
    28f6:	80 93 45 09 	sts	0x0945, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    28fa:	80 91 41 09 	lds	r24, 0x0941
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    28fe:	86 7b       	andi	r24, 0xB6	; 182
    2900:	80 93 41 09 	sts	0x0941, r24
		
		i2c_start(I2C1+I2C_WRITE);
    2904:	80 e4       	ldi	r24, 0x40	; 64
    2906:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
		i2c_write(0x2);
    290a:	82 e0       	ldi	r24, 0x02	; 2
    290c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    2910:	80 91 45 09 	lds	r24, 0x0945
    2914:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    2918:	80 91 41 09 	lds	r24, 0x0941
    291c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_stop();
    2920:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
	}
	serial_print_string("END");
    2924:	83 ef       	ldi	r24, 0xF3	; 243
    2926:	93 e0       	ldi	r25, 0x03	; 3
    2928:	0e 94 51 07 	call	0xea2	; 0xea2 <serial_print_string>
    292c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <main+0x166>
	}
    2930:	4f ef       	ldi	r20, 0xFF	; 255
    2932:	5f ef       	ldi	r21, 0xFF	; 255
    2934:	58 8b       	std	Y+16, r21	; 0x10
    2936:	4f 87       	std	Y+15, r20	; 0x0f
    2938:	23 01       	movw	r4, r6
    293a:	bb 24       	eor	r11, r11
    293c:	b3 94       	inc	r11
    293e:	80 e3       	ldi	r24, 0x30	; 48
    2940:	88 2e       	mov	r8, r24
    2942:	91 2c       	mov	r9, r1
    2944:	80 c9       	rjmp	.-3328   	; 0x1c46 <main+0xbfa>

00002946 <_ZN12OrangutanLCDC2Ev>:
    2946:	08 95       	ret

00002948 <_ZN12OrangutanLCDC1Ev>:
    2948:	08 95       	ret

0000294a <void_getchar>:
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	08 95       	ret

00002950 <_ZN12OrangutanLCD8busyWaitEv>:
    2950:	ef 92       	push	r14
    2952:	ff 92       	push	r15
    2954:	0f 93       	push	r16
    2956:	1f 93       	push	r17
    2958:	67 b1       	in	r22, 0x07	; 7
    295a:	3d 98       	cbi	0x07, 5	; 7
    295c:	28 98       	cbi	0x05, 0	; 5
    295e:	29 9a       	sbi	0x05, 1	; 5
    2960:	e0 90 10 09 	lds	r14, 0x0910
    2964:	f0 90 11 09 	lds	r15, 0x0911
    2968:	00 91 12 09 	lds	r16, 0x0912
    296c:	10 91 13 09 	lds	r17, 0x0913
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	41 e0       	ldi	r20, 0x01	; 1
    2976:	50 e0       	ldi	r21, 0x00	; 0
    2978:	ca 01       	movw	r24, r20
    297a:	6f 93       	push	r22
    297c:	64 e0       	ldi	r22, 0x04	; 4
    297e:	6a 95       	dec	r22
    2980:	f1 f7       	brne	.-4      	; 0x297e <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    2982:	6f 91       	pop	r22
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	c9 f7       	brne	.-14     	; 0x297a <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    2988:	2a 9a       	sbi	0x05, 2	; 5
    298a:	ca 01       	movw	r24, r20
    298c:	6f 93       	push	r22
    298e:	64 e0       	ldi	r22, 0x04	; 4
    2990:	6a 95       	dec	r22
    2992:	f1 f7       	brne	.-4      	; 0x2990 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    2994:	6f 91       	pop	r22
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	c9 f7       	brne	.-14     	; 0x298c <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    299a:	86 b1       	in	r24, 0x06	; 6
    299c:	2a 98       	cbi	0x05, 2	; 5
    299e:	fa 01       	movw	r30, r20
    29a0:	6f 93       	push	r22
    29a2:	64 e0       	ldi	r22, 0x04	; 4
    29a4:	6a 95       	dec	r22
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    29a8:	6f 91       	pop	r22
    29aa:	31 97       	sbiw	r30, 0x01	; 1
    29ac:	c9 f7       	brne	.-14     	; 0x29a0 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    29ae:	2a 9a       	sbi	0x05, 2	; 5
    29b0:	fa 01       	movw	r30, r20
    29b2:	6f 93       	push	r22
    29b4:	64 e0       	ldi	r22, 0x04	; 4
    29b6:	6a 95       	dec	r22
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    29ba:	6f 91       	pop	r22
    29bc:	31 97       	sbiw	r30, 0x01	; 1
    29be:	c9 f7       	brne	.-14     	; 0x29b2 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    29c0:	2a 98       	cbi	0x05, 2	; 5
    29c2:	2c 5f       	subi	r18, 0xFC	; 252
    29c4:	3f 4f       	sbci	r19, 0xFF	; 255
    29c6:	85 ff       	sbrs	r24, 5
    29c8:	09 c0       	rjmp	.+18     	; 0x29dc <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    29ca:	c9 01       	movw	r24, r18
    29cc:	a0 e0       	ldi	r26, 0x00	; 0
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	8e 15       	cp	r24, r14
    29d2:	9f 05       	cpc	r25, r15
    29d4:	a0 07       	cpc	r26, r16
    29d6:	b1 07       	cpc	r27, r17
    29d8:	08 f4       	brcc	.+2      	; 0x29dc <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    29da:	ce cf       	rjmp	.-100    	; 0x2978 <_ZN12OrangutanLCD8busyWaitEv+0x28>
    29dc:	c9 01       	movw	r24, r18
    29de:	a0 e0       	ldi	r26, 0x00	; 0
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	8e 15       	cp	r24, r14
    29e4:	9f 05       	cpc	r25, r15
    29e6:	a0 07       	cpc	r26, r16
    29e8:	b1 07       	cpc	r27, r17
    29ea:	28 f0       	brcs	.+10     	; 0x29f6 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    29ec:	82 e3       	ldi	r24, 0x32	; 50
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	a0 e0       	ldi	r26, 0x00	; 0
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	04 c0       	rjmp	.+8      	; 0x29fe <_ZN12OrangutanLCD8busyWaitEv+0xae>
    29f6:	80 e3       	ldi	r24, 0x30	; 48
    29f8:	95 e7       	ldi	r25, 0x75	; 117
    29fa:	a0 e0       	ldi	r26, 0x00	; 0
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	80 93 10 09 	sts	0x0910, r24
    2a02:	90 93 11 09 	sts	0x0911, r25
    2a06:	a0 93 12 09 	sts	0x0912, r26
    2a0a:	b0 93 13 09 	sts	0x0913, r27
    2a0e:	67 b9       	out	0x07, r22	; 7
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	ff 90       	pop	r15
    2a16:	ef 90       	pop	r14
    2a18:	08 95       	ret

00002a1a <_ZN12OrangutanLCD8sendDataEh>:
    2a1a:	28 b1       	in	r18, 0x08	; 8
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	8f 70       	andi	r24, 0x0F	; 15
    2a20:	90 70       	andi	r25, 0x00	; 0
    2a22:	88 0f       	add	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	88 0f       	add	r24, r24
    2a28:	99 1f       	adc	r25, r25
    2a2a:	23 7c       	andi	r18, 0xC3	; 195
    2a2c:	28 2b       	or	r18, r24
    2a2e:	28 b9       	out	0x08, r18	; 8
    2a30:	2a 9a       	sbi	0x05, 2	; 5
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	fc 01       	movw	r30, r24
    2a38:	6f 93       	push	r22
    2a3a:	64 e0       	ldi	r22, 0x04	; 4
    2a3c:	6a 95       	dec	r22
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <_ZN12OrangutanLCD8sendDataEh+0x22>
    2a40:	6f 91       	pop	r22
    2a42:	31 97       	sbiw	r30, 0x01	; 1
    2a44:	c9 f7       	brne	.-14     	; 0x2a38 <_ZN12OrangutanLCD8sendDataEh+0x1e>
    2a46:	2a 98       	cbi	0x05, 2	; 5
    2a48:	6f 93       	push	r22
    2a4a:	64 e0       	ldi	r22, 0x04	; 4
    2a4c:	6a 95       	dec	r22
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <_ZN12OrangutanLCD8sendDataEh+0x32>
    2a50:	6f 91       	pop	r22
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	c9 f7       	brne	.-14     	; 0x2a48 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    2a56:	08 95       	ret

00002a58 <_ZN12OrangutanLCD10initPrintfEv>:
    2a58:	80 91 0c 09 	lds	r24, 0x090C
    2a5c:	90 91 0d 09 	lds	r25, 0x090D
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	11 f0       	breq	.+4      	; 0x2a68 <_ZN12OrangutanLCD10initPrintfEv+0x10>
    2a64:	0e 94 5f 22 	call	0x44be	; 0x44be <free>
    2a68:	80 91 d9 08 	lds	r24, 0x08D9
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	20 91 da 08 	lds	r18, 0x08DA
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	ac 01       	movw	r20, r24
    2a78:	42 9f       	mul	r20, r18
    2a7a:	c0 01       	movw	r24, r0
    2a7c:	43 9f       	mul	r20, r19
    2a7e:	90 0d       	add	r25, r0
    2a80:	52 9f       	mul	r21, r18
    2a82:	90 0d       	add	r25, r0
    2a84:	11 24       	eor	r1, r1
    2a86:	0e 94 b2 21 	call	0x4364	; 0x4364 <malloc>
    2a8a:	90 93 0d 09 	sts	0x090D, r25
    2a8e:	80 93 0c 09 	sts	0x090C, r24
    2a92:	00 97       	sbiw	r24, 0x00	; 0
    2a94:	29 f1       	breq	.+74     	; 0x2ae0 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    2a96:	60 e0       	ldi	r22, 0x00	; 0
    2a98:	70 e2       	ldi	r23, 0x20	; 32
    2a9a:	08 c0       	rjmp	.+16     	; 0x2aac <_ZN12OrangutanLCD10initPrintfEv+0x54>
    2a9c:	e0 91 0c 09 	lds	r30, 0x090C
    2aa0:	f0 91 0d 09 	lds	r31, 0x090D
    2aa4:	e4 0f       	add	r30, r20
    2aa6:	f5 1f       	adc	r31, r21
    2aa8:	70 83       	st	Z, r23
    2aaa:	6f 5f       	subi	r22, 0xFF	; 255
    2aac:	46 2f       	mov	r20, r22
    2aae:	50 e0       	ldi	r21, 0x00	; 0
    2ab0:	80 91 d9 08 	lds	r24, 0x08D9
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	20 91 da 08 	lds	r18, 0x08DA
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	fc 01       	movw	r30, r24
    2ac0:	e2 9f       	mul	r30, r18
    2ac2:	c0 01       	movw	r24, r0
    2ac4:	e3 9f       	mul	r30, r19
    2ac6:	90 0d       	add	r25, r0
    2ac8:	f2 9f       	mul	r31, r18
    2aca:	90 0d       	add	r25, r0
    2acc:	11 24       	eor	r1, r1
    2ace:	48 17       	cp	r20, r24
    2ad0:	59 07       	cpc	r21, r25
    2ad2:	24 f3       	brlt	.-56     	; 0x2a9c <_ZN12OrangutanLCD10initPrintfEv+0x44>
    2ad4:	84 e9       	ldi	r24, 0x94	; 148
    2ad6:	97 e1       	ldi	r25, 0x17	; 23
    2ad8:	65 ea       	ldi	r22, 0xA5	; 165
    2ada:	74 e1       	ldi	r23, 0x14	; 20
    2adc:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <fdevopen>
    2ae0:	08 95       	ret

00002ae2 <_ZN12OrangutanLCD10initPrintfEhh>:
    2ae2:	80 93 da 08 	sts	0x08DA, r24
    2ae6:	60 93 d9 08 	sts	0x08D9, r22
    2aea:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_ZN12OrangutanLCD10initPrintfEv>
    2aee:	08 95       	ret

00002af0 <lcd_init_printf_with_dimensions>:
    2af0:	80 93 da 08 	sts	0x08DA, r24
    2af4:	60 93 d9 08 	sts	0x08D9, r22
    2af8:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_ZN12OrangutanLCD10initPrintfEv>
    2afc:	08 95       	ret

00002afe <lcd_init_printf>:
    2afe:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_ZN12OrangutanLCD10initPrintfEv>
    2b02:	08 95       	ret

00002b04 <_ZN12OrangutanLCD5init2Ev>:
    2b04:	3d 98       	cbi	0x07, 5	; 7
    2b06:	45 9a       	sbi	0x08, 5	; 8
    2b08:	80 e3       	ldi	r24, 0x30	; 48
    2b0a:	95 e7       	ldi	r25, 0x75	; 117
    2b0c:	a0 e0       	ldi	r26, 0x00	; 0
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	80 93 10 09 	sts	0x0910, r24
    2b14:	90 93 11 09 	sts	0x0911, r25
    2b18:	a0 93 12 09 	sts	0x0912, r26
    2b1c:	b0 93 13 09 	sts	0x0913, r27
    2b20:	20 9a       	sbi	0x04, 0	; 4
    2b22:	21 9a       	sbi	0x04, 1	; 4
    2b24:	22 9a       	sbi	0x04, 2	; 4
    2b26:	8e e1       	ldi	r24, 0x1E	; 30
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <delay_ms>
    2b2e:	83 e0       	ldi	r24, 0x03	; 3
    2b30:	0e 94 da 18 	call	0x31b4	; 0x31b4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2b34:	86 e0       	ldi	r24, 0x06	; 6
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <delay_ms>
    2b3c:	83 e0       	ldi	r24, 0x03	; 3
    2b3e:	0e 94 da 18 	call	0x31b4	; 0x31b4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <delay_ms>
    2b4a:	83 e0       	ldi	r24, 0x03	; 3
    2b4c:	0e 94 da 18 	call	0x31b4	; 0x31b4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2b50:	82 e0       	ldi	r24, 0x02	; 2
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <delay_ms>
    2b58:	82 e0       	ldi	r24, 0x02	; 2
    2b5a:	0e 94 da 18 	call	0x31b4	; 0x31b4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2b5e:	82 e0       	ldi	r24, 0x02	; 2
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <delay_ms>
    2b66:	88 e2       	ldi	r24, 0x28	; 40
    2b68:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_ZN12OrangutanLCD8send_cmdEh>
    2b6c:	88 e0       	ldi	r24, 0x08	; 8
    2b6e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_ZN12OrangutanLCD8send_cmdEh>
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_ZN12OrangutanLCD8send_cmdEh>
    2b78:	86 e0       	ldi	r24, 0x06	; 6
    2b7a:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_ZN12OrangutanLCD8send_cmdEh>
    2b7e:	8c e0       	ldi	r24, 0x0C	; 12
    2b80:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_ZN12OrangutanLCD8send_cmdEh>
    2b84:	08 95       	ret

00002b86 <_ZN12OrangutanLCD4initEv>:
    2b86:	80 91 14 09 	lds	r24, 0x0914
    2b8a:	88 23       	and	r24, r24
    2b8c:	29 f4       	brne	.+10     	; 0x2b98 <_ZN12OrangutanLCD4initEv+0x12>
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	80 93 14 09 	sts	0x0914, r24
    2b94:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5init2Ev>
    2b98:	08 95       	ret

00002b9a <_ZN12OrangutanLCD4sendEhhh>:
    2b9a:	ff 92       	push	r15
    2b9c:	0f 93       	push	r16
    2b9e:	1f 93       	push	r17
    2ba0:	08 2f       	mov	r16, r24
    2ba2:	16 2f       	mov	r17, r22
    2ba4:	f4 2e       	mov	r15, r20
    2ba6:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <_ZN12OrangutanLCD4initEv>
    2baa:	0e 94 a8 14 	call	0x2950	; 0x2950 <_ZN12OrangutanLCD8busyWaitEv>
    2bae:	37 b1       	in	r19, 0x07	; 7
    2bb0:	28 b1       	in	r18, 0x08	; 8
    2bb2:	29 98       	cbi	0x05, 1	; 5
    2bb4:	11 23       	and	r17, r17
    2bb6:	11 f0       	breq	.+4      	; 0x2bbc <_ZN12OrangutanLCD4sendEhhh+0x22>
    2bb8:	28 9a       	sbi	0x05, 0	; 5
    2bba:	01 c0       	rjmp	.+2      	; 0x2bbe <_ZN12OrangutanLCD4sendEhhh+0x24>
    2bbc:	28 98       	cbi	0x05, 0	; 5
    2bbe:	87 b1       	in	r24, 0x07	; 7
    2bc0:	8c 63       	ori	r24, 0x3C	; 60
    2bc2:	87 b9       	out	0x07, r24	; 7
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	f8 16       	cp	r15, r24
    2bc8:	e1 f0       	breq	.+56     	; 0x2c02 <_ZN12OrangutanLCD4sendEhhh+0x68>
    2bca:	88 b1       	in	r24, 0x08	; 8
    2bcc:	90 2f       	mov	r25, r16
    2bce:	92 95       	swap	r25
    2bd0:	9f 70       	andi	r25, 0x0F	; 15
    2bd2:	99 0f       	add	r25, r25
    2bd4:	99 0f       	add	r25, r25
    2bd6:	83 7c       	andi	r24, 0xC3	; 195
    2bd8:	98 2b       	or	r25, r24
    2bda:	98 b9       	out	0x08, r25	; 8
    2bdc:	2a 9a       	sbi	0x05, 2	; 5
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	fc 01       	movw	r30, r24
    2be4:	6f 93       	push	r22
    2be6:	64 e0       	ldi	r22, 0x04	; 4
    2be8:	6a 95       	dec	r22
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <_ZN12OrangutanLCD4sendEhhh+0x4e>
    2bec:	6f 91       	pop	r22
    2bee:	31 97       	sbiw	r30, 0x01	; 1
    2bf0:	c9 f7       	brne	.-14     	; 0x2be4 <_ZN12OrangutanLCD4sendEhhh+0x4a>
    2bf2:	2a 98       	cbi	0x05, 2	; 5
    2bf4:	6f 93       	push	r22
    2bf6:	64 e0       	ldi	r22, 0x04	; 4
    2bf8:	6a 95       	dec	r22
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <_ZN12OrangutanLCD4sendEhhh+0x5e>
    2bfc:	6f 91       	pop	r22
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	c9 f7       	brne	.-14     	; 0x2bf4 <_ZN12OrangutanLCD4sendEhhh+0x5a>
    2c02:	88 b1       	in	r24, 0x08	; 8
    2c04:	0f 70       	andi	r16, 0x0F	; 15
    2c06:	00 0f       	add	r16, r16
    2c08:	00 0f       	add	r16, r16
    2c0a:	83 7c       	andi	r24, 0xC3	; 195
    2c0c:	80 2b       	or	r24, r16
    2c0e:	88 b9       	out	0x08, r24	; 8
    2c10:	2a 9a       	sbi	0x05, 2	; 5
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	fc 01       	movw	r30, r24
    2c18:	6f 93       	push	r22
    2c1a:	64 e0       	ldi	r22, 0x04	; 4
    2c1c:	6a 95       	dec	r22
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <_ZN12OrangutanLCD4sendEhhh+0x82>
    2c20:	6f 91       	pop	r22
    2c22:	31 97       	sbiw	r30, 0x01	; 1
    2c24:	c9 f7       	brne	.-14     	; 0x2c18 <_ZN12OrangutanLCD4sendEhhh+0x7e>
    2c26:	2a 98       	cbi	0x05, 2	; 5
    2c28:	6f 93       	push	r22
    2c2a:	64 e0       	ldi	r22, 0x04	; 4
    2c2c:	6a 95       	dec	r22
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <_ZN12OrangutanLCD4sendEhhh+0x92>
    2c30:	6f 91       	pop	r22
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	c9 f7       	brne	.-14     	; 0x2c28 <_ZN12OrangutanLCD4sendEhhh+0x8e>
    2c36:	37 b9       	out	0x07, r19	; 7
    2c38:	28 b9       	out	0x08, r18	; 8
    2c3a:	1f 91       	pop	r17
    2c3c:	0f 91       	pop	r16
    2c3e:	ff 90       	pop	r15
    2c40:	08 95       	ret

00002c42 <_ZN12OrangutanLCD8send_cmdEh>:
    2c42:	60 e0       	ldi	r22, 0x00	; 0
    2c44:	42 e0       	ldi	r20, 0x02	; 2
    2c46:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZN12OrangutanLCD4sendEhhh>
    2c4a:	08 95       	ret

00002c4c <_ZN12OrangutanLCD10moveCursorEhh>:
    2c4c:	0f 93       	push	r16
    2c4e:	1f 93       	push	r17
    2c50:	08 2f       	mov	r16, r24
    2c52:	16 2f       	mov	r17, r22
    2c54:	08 c0       	rjmp	.+16     	; 0x2c66 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    2c56:	00 23       	and	r16, r16
    2c58:	11 f4       	brne	.+4      	; 0x2c5e <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    2c5a:	80 e1       	ldi	r24, 0x10	; 16
    2c5c:	01 c0       	rjmp	.+2      	; 0x2c60 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    2c5e:	84 e1       	ldi	r24, 0x14	; 20
    2c60:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_ZN12OrangutanLCD8send_cmdEh>
    2c64:	11 50       	subi	r17, 0x01	; 1
    2c66:	11 23       	and	r17, r17
    2c68:	b1 f7       	brne	.-20     	; 0x2c56 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	08 95       	ret

00002c70 <lcd_move_cursor>:
    2c70:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <_ZN12OrangutanLCD10moveCursorEhh>
    2c74:	08 95       	ret

00002c76 <_ZN12OrangutanLCD10hideCursorEv>:
    2c76:	8c e0       	ldi	r24, 0x0C	; 12
    2c78:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_ZN12OrangutanLCD8send_cmdEh>
    2c7c:	08 95       	ret

00002c7e <lcd_hide_cursor>:
    2c7e:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <_ZN12OrangutanLCD10hideCursorEv>
    2c82:	08 95       	ret

00002c84 <_ZN12OrangutanLCD10showCursorEh>:
    2c84:	81 30       	cpi	r24, 0x01	; 1
    2c86:	11 f4       	brne	.+4      	; 0x2c8c <_ZN12OrangutanLCD10showCursorEh+0x8>
    2c88:	8f e0       	ldi	r24, 0x0F	; 15
    2c8a:	01 c0       	rjmp	.+2      	; 0x2c8e <_ZN12OrangutanLCD10showCursorEh+0xa>
    2c8c:	8e e0       	ldi	r24, 0x0E	; 14
    2c8e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_ZN12OrangutanLCD8send_cmdEh>
    2c92:	08 95       	ret

00002c94 <lcd_show_cursor>:
    2c94:	0e 94 42 16 	call	0x2c84	; 0x2c84 <_ZN12OrangutanLCD10showCursorEh>
    2c98:	08 95       	ret

00002c9a <_ZN12OrangutanLCD6gotoXYEhh>:
    2c9a:	a4 e0       	ldi	r26, 0x04	; 4
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	e3 e5       	ldi	r30, 0x53	; 83
    2ca0:	f6 e1       	ldi	r31, 0x16	; 22
    2ca2:	0c 94 75 21 	jmp	0x42ea	; 0x42ea <__prologue_saves__+0x1c>
    2ca6:	18 2f       	mov	r17, r24
    2ca8:	06 2f       	mov	r16, r22
    2caa:	80 e8       	ldi	r24, 0x80	; 128
    2cac:	89 83       	std	Y+1, r24	; 0x01
    2cae:	80 ec       	ldi	r24, 0xC0	; 192
    2cb0:	8a 83       	std	Y+2, r24	; 0x02
    2cb2:	84 e9       	ldi	r24, 0x94	; 148
    2cb4:	8b 83       	std	Y+3, r24	; 0x03
    2cb6:	84 ed       	ldi	r24, 0xD4	; 212
    2cb8:	8c 83       	std	Y+4, r24	; 0x04
    2cba:	fe 01       	movw	r30, r28
    2cbc:	e6 0f       	add	r30, r22
    2cbe:	f1 1d       	adc	r31, r1
    2cc0:	81 81       	ldd	r24, Z+1	; 0x01
    2cc2:	81 0f       	add	r24, r17
    2cc4:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_ZN12OrangutanLCD8send_cmdEh>
    2cc8:	10 93 0f 09 	sts	0x090F, r17
    2ccc:	00 93 0e 09 	sts	0x090E, r16
    2cd0:	24 96       	adiw	r28, 0x04	; 4
    2cd2:	e4 e0       	ldi	r30, 0x04	; 4
    2cd4:	0c 94 91 21 	jmp	0x4322	; 0x4322 <__epilogue_restores__+0x1c>

00002cd8 <lcd_goto_xy>:
    2cd8:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <_ZN12OrangutanLCD6gotoXYEhh>
    2cdc:	08 95       	ret

00002cde <_ZN12OrangutanLCD5clearEv>:
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_ZN12OrangutanLCD8send_cmdEh>
    2ce4:	80 91 0c 09 	lds	r24, 0x090C
    2ce8:	90 91 0d 09 	lds	r25, 0x090D
    2cec:	89 2b       	or	r24, r25
    2cee:	19 f1       	breq	.+70     	; 0x2d36 <_ZN12OrangutanLCD5clearEv+0x58>
    2cf0:	60 e0       	ldi	r22, 0x00	; 0
    2cf2:	70 e2       	ldi	r23, 0x20	; 32
    2cf4:	08 c0       	rjmp	.+16     	; 0x2d06 <_ZN12OrangutanLCD5clearEv+0x28>
    2cf6:	e0 91 0c 09 	lds	r30, 0x090C
    2cfa:	f0 91 0d 09 	lds	r31, 0x090D
    2cfe:	e4 0f       	add	r30, r20
    2d00:	f5 1f       	adc	r31, r21
    2d02:	70 83       	st	Z, r23
    2d04:	6f 5f       	subi	r22, 0xFF	; 255
    2d06:	46 2f       	mov	r20, r22
    2d08:	50 e0       	ldi	r21, 0x00	; 0
    2d0a:	80 91 d9 08 	lds	r24, 0x08D9
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	20 91 da 08 	lds	r18, 0x08DA
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	fc 01       	movw	r30, r24
    2d1a:	e2 9f       	mul	r30, r18
    2d1c:	c0 01       	movw	r24, r0
    2d1e:	e3 9f       	mul	r30, r19
    2d20:	90 0d       	add	r25, r0
    2d22:	f2 9f       	mul	r31, r18
    2d24:	90 0d       	add	r25, r0
    2d26:	11 24       	eor	r1, r1
    2d28:	48 17       	cp	r20, r24
    2d2a:	59 07       	cpc	r21, r25
    2d2c:	24 f3       	brlt	.-56     	; 0x2cf6 <_ZN12OrangutanLCD5clearEv+0x18>
    2d2e:	10 92 0f 09 	sts	0x090F, r1
    2d32:	10 92 0e 09 	sts	0x090E, r1
    2d36:	08 95       	ret

00002d38 <clear>:
    2d38:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN12OrangutanLCD5clearEv>
    2d3c:	08 95       	ret

00002d3e <_ZN12OrangutanLCD9send_dataEh>:
    2d3e:	61 e0       	ldi	r22, 0x01	; 1
    2d40:	42 e0       	ldi	r20, 0x02	; 2
    2d42:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZN12OrangutanLCD4sendEhhh>
    2d46:	08 95       	ret

00002d48 <_ZN12OrangutanLCD11printBinaryEh>:
    2d48:	0f 93       	push	r16
    2d4a:	1f 93       	push	r17
    2d4c:	cf 93       	push	r28
    2d4e:	df 93       	push	r29
    2d50:	00 e0       	ldi	r16, 0x00	; 0
    2d52:	10 e8       	ldi	r17, 0x80	; 128
    2d54:	c8 2f       	mov	r28, r24
    2d56:	d0 e0       	ldi	r29, 0x00	; 0
    2d58:	81 2f       	mov	r24, r17
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	8c 23       	and	r24, r28
    2d5e:	9d 23       	and	r25, r29
    2d60:	89 2b       	or	r24, r25
    2d62:	11 f0       	breq	.+4      	; 0x2d68 <_ZN12OrangutanLCD11printBinaryEh+0x20>
    2d64:	81 e3       	ldi	r24, 0x31	; 49
    2d66:	01 c0       	rjmp	.+2      	; 0x2d6a <_ZN12OrangutanLCD11printBinaryEh+0x22>
    2d68:	80 e3       	ldi	r24, 0x30	; 48
    2d6a:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_ZN12OrangutanLCD9send_dataEh>
    2d6e:	0f 5f       	subi	r16, 0xFF	; 255
    2d70:	08 30       	cpi	r16, 0x08	; 8
    2d72:	11 f0       	breq	.+4      	; 0x2d78 <_ZN12OrangutanLCD11printBinaryEh+0x30>
    2d74:	16 95       	lsr	r17
    2d76:	f0 cf       	rjmp	.-32     	; 0x2d58 <_ZN12OrangutanLCD11printBinaryEh+0x10>
    2d78:	df 91       	pop	r29
    2d7a:	cf 91       	pop	r28
    2d7c:	1f 91       	pop	r17
    2d7e:	0f 91       	pop	r16
    2d80:	08 95       	ret

00002d82 <print_binary>:
    2d82:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <_ZN12OrangutanLCD11printBinaryEh>
    2d86:	08 95       	ret

00002d88 <_ZN12OrangutanLCD14printHexNibbleEh>:
    2d88:	8a 30       	cpi	r24, 0x0A	; 10
    2d8a:	10 f4       	brcc	.+4      	; 0x2d90 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    2d8c:	80 5d       	subi	r24, 0xD0	; 208
    2d8e:	01 c0       	rjmp	.+2      	; 0x2d92 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    2d90:	89 5c       	subi	r24, 0xC9	; 201
    2d92:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_ZN12OrangutanLCD9send_dataEh>
    2d96:	08 95       	ret

00002d98 <_ZN12OrangutanLCD8printHexEh>:
    2d98:	1f 93       	push	r17
    2d9a:	18 2f       	mov	r17, r24
    2d9c:	82 95       	swap	r24
    2d9e:	8f 70       	andi	r24, 0x0F	; 15
    2da0:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <_ZN12OrangutanLCD14printHexNibbleEh>
    2da4:	81 2f       	mov	r24, r17
    2da6:	8f 70       	andi	r24, 0x0F	; 15
    2da8:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <_ZN12OrangutanLCD14printHexNibbleEh>
    2dac:	1f 91       	pop	r17
    2dae:	08 95       	ret

00002db0 <_ZN12OrangutanLCD8printHexEj>:
    2db0:	1f 93       	push	r17
    2db2:	18 2f       	mov	r17, r24
    2db4:	89 2f       	mov	r24, r25
    2db6:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_ZN12OrangutanLCD8printHexEh>
    2dba:	81 2f       	mov	r24, r17
    2dbc:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_ZN12OrangutanLCD8printHexEh>
    2dc0:	1f 91       	pop	r17
    2dc2:	08 95       	ret

00002dc4 <print_hex>:
    2dc4:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <_ZN12OrangutanLCD8printHexEj>
    2dc8:	08 95       	ret

00002dca <print_hex_byte>:
    2dca:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_ZN12OrangutanLCD8printHexEh>
    2dce:	08 95       	ret

00002dd0 <_ZN12OrangutanLCD5printEm>:
    2dd0:	6f 92       	push	r6
    2dd2:	7f 92       	push	r7
    2dd4:	8f 92       	push	r8
    2dd6:	9f 92       	push	r9
    2dd8:	af 92       	push	r10
    2dda:	bf 92       	push	r11
    2ddc:	cf 92       	push	r12
    2dde:	df 92       	push	r13
    2de0:	ff 92       	push	r15
    2de2:	0f 93       	push	r16
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	2a 97       	sbiw	r28, 0x0a	; 10
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	5b 01       	movw	r10, r22
    2dfa:	6c 01       	movw	r12, r24
    2dfc:	0a e0       	ldi	r16, 0x0A	; 10
    2dfe:	3e 01       	movw	r6, r28
    2e00:	08 94       	sec
    2e02:	61 1c       	adc	r6, r1
    2e04:	71 1c       	adc	r7, r1
    2e06:	fa 2c       	mov	r15, r10
    2e08:	c6 01       	movw	r24, r12
    2e0a:	b5 01       	movw	r22, r10
    2e0c:	2a e0       	ldi	r18, 0x0A	; 10
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e0       	ldi	r20, 0x00	; 0
    2e12:	50 e0       	ldi	r21, 0x00	; 0
    2e14:	0e 94 45 21 	call	0x428a	; 0x428a <__udivmodsi4>
    2e18:	c9 01       	movw	r24, r18
    2e1a:	da 01       	movw	r26, r20
    2e1c:	5c 01       	movw	r10, r24
    2e1e:	6d 01       	movw	r12, r26
    2e20:	01 50       	subi	r16, 0x01	; 1
    2e22:	43 01       	movw	r8, r6
    2e24:	80 0e       	add	r8, r16
    2e26:	91 1c       	adc	r9, r1
    2e28:	80 e3       	ldi	r24, 0x30	; 48
    2e2a:	f8 0e       	add	r15, r24
    2e2c:	c6 01       	movw	r24, r12
    2e2e:	b5 01       	movw	r22, r10
    2e30:	2a e0       	ldi	r18, 0x0A	; 10
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	40 e0       	ldi	r20, 0x00	; 0
    2e36:	50 e0       	ldi	r21, 0x00	; 0
    2e38:	0e 94 13 21 	call	0x4226	; 0x4226 <__mulsi3>
    2e3c:	f6 1a       	sub	r15, r22
    2e3e:	f4 01       	movw	r30, r8
    2e40:	f0 82       	st	Z, r15
    2e42:	a1 14       	cp	r10, r1
    2e44:	b1 04       	cpc	r11, r1
    2e46:	c1 04       	cpc	r12, r1
    2e48:	d1 04       	cpc	r13, r1
    2e4a:	e9 f6       	brne	.-70     	; 0x2e06 <_ZN12OrangutanLCD5printEm+0x36>
    2e4c:	08 c0       	rjmp	.+16     	; 0x2e5e <_ZN12OrangutanLCD5printEm+0x8e>
    2e4e:	f6 01       	movw	r30, r12
    2e50:	e0 0f       	add	r30, r16
    2e52:	f1 1d       	adc	r31, r1
    2e54:	80 81       	ld	r24, Z
    2e56:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_ZN12OrangutanLCD9send_dataEh>
    2e5a:	0f 5f       	subi	r16, 0xFF	; 255
    2e5c:	04 c0       	rjmp	.+8      	; 0x2e66 <_ZN12OrangutanLCD5printEm+0x96>
    2e5e:	6e 01       	movw	r12, r28
    2e60:	08 94       	sec
    2e62:	c1 1c       	adc	r12, r1
    2e64:	d1 1c       	adc	r13, r1
    2e66:	0a 30       	cpi	r16, 0x0A	; 10
    2e68:	90 f3       	brcs	.-28     	; 0x2e4e <_ZN12OrangutanLCD5printEm+0x7e>
    2e6a:	2a 96       	adiw	r28, 0x0a	; 10
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	f8 94       	cli
    2e70:	de bf       	out	0x3e, r29	; 62
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	cd bf       	out	0x3d, r28	; 61
    2e76:	cf 91       	pop	r28
    2e78:	df 91       	pop	r29
    2e7a:	0f 91       	pop	r16
    2e7c:	ff 90       	pop	r15
    2e7e:	df 90       	pop	r13
    2e80:	cf 90       	pop	r12
    2e82:	bf 90       	pop	r11
    2e84:	af 90       	pop	r10
    2e86:	9f 90       	pop	r9
    2e88:	8f 90       	pop	r8
    2e8a:	7f 90       	pop	r7
    2e8c:	6f 90       	pop	r6
    2e8e:	08 95       	ret

00002e90 <print_unsigned_long>:
    2e90:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <_ZN12OrangutanLCD5printEm>
    2e94:	08 95       	ret

00002e96 <_ZN12OrangutanLCD5printEl>:
    2e96:	ef 92       	push	r14
    2e98:	ff 92       	push	r15
    2e9a:	0f 93       	push	r16
    2e9c:	1f 93       	push	r17
    2e9e:	7b 01       	movw	r14, r22
    2ea0:	8c 01       	movw	r16, r24
    2ea2:	97 ff       	sbrs	r25, 7
    2ea4:	0b c0       	rjmp	.+22     	; 0x2ebc <_ZN12OrangutanLCD5printEl+0x26>
    2ea6:	10 95       	com	r17
    2ea8:	00 95       	com	r16
    2eaa:	f0 94       	com	r15
    2eac:	e0 94       	com	r14
    2eae:	e1 1c       	adc	r14, r1
    2eb0:	f1 1c       	adc	r15, r1
    2eb2:	01 1d       	adc	r16, r1
    2eb4:	11 1d       	adc	r17, r1
    2eb6:	8d e2       	ldi	r24, 0x2D	; 45
    2eb8:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_ZN12OrangutanLCD9send_dataEh>
    2ebc:	c8 01       	movw	r24, r16
    2ebe:	b7 01       	movw	r22, r14
    2ec0:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <_ZN12OrangutanLCD5printEm>
    2ec4:	1f 91       	pop	r17
    2ec6:	0f 91       	pop	r16
    2ec8:	ff 90       	pop	r15
    2eca:	ef 90       	pop	r14
    2ecc:	08 95       	ret

00002ece <print_long>:
    2ece:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <_ZN12OrangutanLCD5printEl>
    2ed2:	08 95       	ret

00002ed4 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    2ed4:	cf 93       	push	r28
    2ed6:	df 93       	push	r29
    2ed8:	ec 01       	movw	r28, r24
    2eda:	03 c0       	rjmp	.+6      	; 0x2ee2 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    2edc:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_ZN12OrangutanLCD9send_dataEh>
    2ee0:	21 96       	adiw	r28, 0x01	; 1
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	84 91       	lpm	r24, Z+
    2ee6:	88 23       	and	r24, r24
    2ee8:	c9 f7       	brne	.-14     	; 0x2edc <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    2eea:	df 91       	pop	r29
    2eec:	cf 91       	pop	r28
    2eee:	08 95       	ret

00002ef0 <print_from_program_space>:
    2ef0:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    2ef4:	08 95       	ret

00002ef6 <_ZN12OrangutanLCD5printEPKc>:
    2ef6:	cf 93       	push	r28
    2ef8:	df 93       	push	r29
    2efa:	ec 01       	movw	r28, r24
    2efc:	03 c0       	rjmp	.+6      	; 0x2f04 <_ZN12OrangutanLCD5printEPKc+0xe>
    2efe:	21 96       	adiw	r28, 0x01	; 1
    2f00:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_ZN12OrangutanLCD9send_dataEh>
    2f04:	88 81       	ld	r24, Y
    2f06:	88 23       	and	r24, r24
    2f08:	d1 f7       	brne	.-12     	; 0x2efe <_ZN12OrangutanLCD5printEPKc+0x8>
    2f0a:	df 91       	pop	r29
    2f0c:	cf 91       	pop	r28
    2f0e:	08 95       	ret

00002f10 <_ZN12OrangutanLCD7printInEPKc>:
    2f10:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <_ZN12OrangutanLCD5printEPKc>
    2f14:	08 95       	ret

00002f16 <print>:
    2f16:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <_ZN12OrangutanLCD5printEPKc>
    2f1a:	08 95       	ret

00002f1c <_ZN12OrangutanLCD5printEc>:
    2f1c:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_ZN12OrangutanLCD9send_dataEh>
    2f20:	08 95       	ret

00002f22 <print_character>:
    2f22:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_ZN12OrangutanLCD9send_dataEh>
    2f26:	08 95       	ret

00002f28 <lcd_putchar>:
    2f28:	a0 e0       	ldi	r26, 0x00	; 0
    2f2a:	b0 e0       	ldi	r27, 0x00	; 0
    2f2c:	ea e9       	ldi	r30, 0x9A	; 154
    2f2e:	f7 e1       	ldi	r31, 0x17	; 23
    2f30:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <__prologue_saves__+0x14>
    2f34:	e8 2e       	mov	r14, r24
    2f36:	80 91 0c 09 	lds	r24, 0x090C
    2f3a:	90 91 0d 09 	lds	r25, 0x090D
    2f3e:	89 2b       	or	r24, r25
    2f40:	09 f4       	brne	.+2      	; 0x2f44 <lcd_putchar+0x1c>
    2f42:	05 c1       	rjmp	.+522    	; 0x314e <lcd_putchar+0x226>
    2f44:	2a e0       	ldi	r18, 0x0A	; 10
    2f46:	e2 16       	cp	r14, r18
    2f48:	09 f4       	brne	.+2      	; 0x2f4c <lcd_putchar+0x24>
    2f4a:	46 c0       	rjmp	.+140    	; 0x2fd8 <lcd_putchar+0xb0>
    2f4c:	38 e0       	ldi	r19, 0x08	; 8
    2f4e:	e3 16       	cp	r14, r19
    2f50:	c9 f4       	brne	.+50     	; 0x2f84 <lcd_putchar+0x5c>
    2f52:	80 91 0f 09 	lds	r24, 0x090F
    2f56:	81 50       	subi	r24, 0x01	; 1
    2f58:	80 93 0f 09 	sts	0x090F, r24
    2f5c:	8f 3f       	cpi	r24, 0xFF	; 255
    2f5e:	51 f4       	brne	.+20     	; 0x2f74 <lcd_putchar+0x4c>
    2f60:	80 91 0e 09 	lds	r24, 0x090E
    2f64:	81 50       	subi	r24, 0x01	; 1
    2f66:	80 93 0e 09 	sts	0x090E, r24
    2f6a:	80 91 da 08 	lds	r24, 0x08DA
    2f6e:	81 50       	subi	r24, 0x01	; 1
    2f70:	80 93 0f 09 	sts	0x090F, r24
    2f74:	80 91 0e 09 	lds	r24, 0x090E
    2f78:	8f 3f       	cpi	r24, 0xFF	; 255
    2f7a:	09 f0       	breq	.+2      	; 0x2f7e <lcd_putchar+0x56>
    2f7c:	e2 c0       	rjmp	.+452    	; 0x3142 <lcd_putchar+0x21a>
    2f7e:	10 92 0e 09 	sts	0x090E, r1
    2f82:	dd c0       	rjmp	.+442    	; 0x313e <lcd_putchar+0x216>
    2f84:	8e 2d       	mov	r24, r14
    2f86:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_ZN12OrangutanLCD9send_dataEh>
    2f8a:	20 91 0e 09 	lds	r18, 0x090E
    2f8e:	22 23       	and	r18, r18
    2f90:	c9 f0       	breq	.+50     	; 0x2fc4 <lcd_putchar+0x9c>
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	21 50       	subi	r18, 0x01	; 1
    2f96:	30 40       	sbci	r19, 0x00	; 0
    2f98:	80 91 da 08 	lds	r24, 0x08DA
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	ac 01       	movw	r20, r24
    2fa0:	24 9f       	mul	r18, r20
    2fa2:	c0 01       	movw	r24, r0
    2fa4:	25 9f       	mul	r18, r21
    2fa6:	90 0d       	add	r25, r0
    2fa8:	34 9f       	mul	r19, r20
    2faa:	90 0d       	add	r25, r0
    2fac:	11 24       	eor	r1, r1
    2fae:	20 91 0f 09 	lds	r18, 0x090F
    2fb2:	e0 91 0c 09 	lds	r30, 0x090C
    2fb6:	f0 91 0d 09 	lds	r31, 0x090D
    2fba:	e8 0f       	add	r30, r24
    2fbc:	f9 1f       	adc	r31, r25
    2fbe:	e2 0f       	add	r30, r18
    2fc0:	f1 1d       	adc	r31, r1
    2fc2:	e0 82       	st	Z, r14
    2fc4:	80 91 0f 09 	lds	r24, 0x090F
    2fc8:	8f 5f       	subi	r24, 0xFF	; 255
    2fca:	80 93 0f 09 	sts	0x090F, r24
    2fce:	90 91 da 08 	lds	r25, 0x08DA
    2fd2:	89 17       	cp	r24, r25
    2fd4:	09 f0       	breq	.+2      	; 0x2fd8 <lcd_putchar+0xb0>
    2fd6:	bb c0       	rjmp	.+374    	; 0x314e <lcd_putchar+0x226>
    2fd8:	40 91 0e 09 	lds	r20, 0x090E
    2fdc:	24 2f       	mov	r18, r20
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	80 91 d9 08 	lds	r24, 0x08D9
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	28 17       	cp	r18, r24
    2fea:	39 07       	cpc	r19, r25
    2fec:	09 f0       	breq	.+2      	; 0x2ff0 <lcd_putchar+0xc8>
    2fee:	a4 c0       	rjmp	.+328    	; 0x3138 <lcd_putchar+0x210>
    2ff0:	c0 e0       	ldi	r28, 0x00	; 0
    2ff2:	d0 e0       	ldi	r29, 0x00	; 0
    2ff4:	44 c0       	rjmp	.+136    	; 0x307e <lcd_putchar+0x156>
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	6c 2f       	mov	r22, r28
    2ffa:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <_ZN12OrangutanLCD6gotoXYEhh>
    2ffe:	ff 24       	eor	r15, r15
    3000:	6e 01       	movw	r12, r28
    3002:	08 94       	sec
    3004:	c1 1c       	adc	r12, r1
    3006:	d1 1c       	adc	r13, r1
    3008:	35 c0       	rjmp	.+106    	; 0x3074 <lcd_putchar+0x14c>
    300a:	0f 2d       	mov	r16, r15
    300c:	10 e0       	ldi	r17, 0x00	; 0
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	9c 01       	movw	r18, r24
    3012:	c2 9f       	mul	r28, r18
    3014:	c0 01       	movw	r24, r0
    3016:	c3 9f       	mul	r28, r19
    3018:	90 0d       	add	r25, r0
    301a:	d2 9f       	mul	r29, r18
    301c:	90 0d       	add	r25, r0
    301e:	11 24       	eor	r1, r1
    3020:	e0 91 0c 09 	lds	r30, 0x090C
    3024:	f0 91 0d 09 	lds	r31, 0x090D
    3028:	e0 0f       	add	r30, r16
    302a:	f1 1f       	adc	r31, r17
    302c:	e8 0f       	add	r30, r24
    302e:	f9 1f       	adc	r31, r25
    3030:	80 81       	ld	r24, Z
    3032:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_ZN12OrangutanLCD9send_dataEh>
    3036:	e0 91 0c 09 	lds	r30, 0x090C
    303a:	f0 91 0d 09 	lds	r31, 0x090D
    303e:	80 91 da 08 	lds	r24, 0x08DA
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	c8 9f       	mul	r28, r24
    3046:	d0 01       	movw	r26, r0
    3048:	c9 9f       	mul	r28, r25
    304a:	b0 0d       	add	r27, r0
    304c:	d8 9f       	mul	r29, r24
    304e:	b0 0d       	add	r27, r0
    3050:	11 24       	eor	r1, r1
    3052:	e0 0f       	add	r30, r16
    3054:	f1 1f       	adc	r31, r17
    3056:	ae 0f       	add	r26, r30
    3058:	bf 1f       	adc	r27, r31
    305a:	ac 01       	movw	r20, r24
    305c:	c4 9e       	mul	r12, r20
    305e:	c0 01       	movw	r24, r0
    3060:	c5 9e       	mul	r12, r21
    3062:	90 0d       	add	r25, r0
    3064:	d4 9e       	mul	r13, r20
    3066:	90 0d       	add	r25, r0
    3068:	11 24       	eor	r1, r1
    306a:	e8 0f       	add	r30, r24
    306c:	f9 1f       	adc	r31, r25
    306e:	80 81       	ld	r24, Z
    3070:	8c 93       	st	X, r24
    3072:	f3 94       	inc	r15
    3074:	80 91 da 08 	lds	r24, 0x08DA
    3078:	f8 16       	cp	r15, r24
    307a:	38 f2       	brcs	.-114    	; 0x300a <lcd_putchar+0xe2>
    307c:	e6 01       	movw	r28, r12
    307e:	60 91 d9 08 	lds	r22, 0x08D9
    3082:	86 2f       	mov	r24, r22
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	02 97       	sbiw	r24, 0x02	; 2
    3088:	c8 17       	cp	r28, r24
    308a:	d9 07       	cpc	r29, r25
    308c:	0c f4       	brge	.+2      	; 0x3090 <lcd_putchar+0x168>
    308e:	b3 cf       	rjmp	.-154    	; 0x2ff6 <lcd_putchar+0xce>
    3090:	62 30       	cpi	r22, 0x02	; 2
    3092:	08 f4       	brcc	.+2      	; 0x3096 <lcd_putchar+0x16e>
    3094:	40 c0       	rjmp	.+128    	; 0x3116 <lcd_putchar+0x1ee>
    3096:	62 50       	subi	r22, 0x02	; 2
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <_ZN12OrangutanLCD6gotoXYEhh>
    309e:	ff 24       	eor	r15, r15
    30a0:	40 e2       	ldi	r20, 0x20	; 32
    30a2:	d4 2e       	mov	r13, r20
    30a4:	34 c0       	rjmp	.+104    	; 0x310e <lcd_putchar+0x1e6>
    30a6:	0f 2d       	mov	r16, r15
    30a8:	10 e0       	ldi	r17, 0x00	; 0
    30aa:	80 91 d9 08 	lds	r24, 0x08D9
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	02 97       	sbiw	r24, 0x02	; 2
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	ac 01       	movw	r20, r24
    30b6:	42 9f       	mul	r20, r18
    30b8:	c0 01       	movw	r24, r0
    30ba:	43 9f       	mul	r20, r19
    30bc:	90 0d       	add	r25, r0
    30be:	52 9f       	mul	r21, r18
    30c0:	90 0d       	add	r25, r0
    30c2:	11 24       	eor	r1, r1
    30c4:	e0 91 0c 09 	lds	r30, 0x090C
    30c8:	f0 91 0d 09 	lds	r31, 0x090D
    30cc:	e0 0f       	add	r30, r16
    30ce:	f1 1f       	adc	r31, r17
    30d0:	e8 0f       	add	r30, r24
    30d2:	f9 1f       	adc	r31, r25
    30d4:	80 81       	ld	r24, Z
    30d6:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_ZN12OrangutanLCD9send_dataEh>
    30da:	20 91 d9 08 	lds	r18, 0x08D9
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	22 50       	subi	r18, 0x02	; 2
    30e2:	30 40       	sbci	r19, 0x00	; 0
    30e4:	80 91 da 08 	lds	r24, 0x08DA
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	ac 01       	movw	r20, r24
    30ec:	24 9f       	mul	r18, r20
    30ee:	c0 01       	movw	r24, r0
    30f0:	25 9f       	mul	r18, r21
    30f2:	90 0d       	add	r25, r0
    30f4:	34 9f       	mul	r19, r20
    30f6:	90 0d       	add	r25, r0
    30f8:	11 24       	eor	r1, r1
    30fa:	e0 91 0c 09 	lds	r30, 0x090C
    30fe:	f0 91 0d 09 	lds	r31, 0x090D
    3102:	e0 0f       	add	r30, r16
    3104:	f1 1f       	adc	r31, r17
    3106:	e8 0f       	add	r30, r24
    3108:	f9 1f       	adc	r31, r25
    310a:	d0 82       	st	Z, r13
    310c:	f3 94       	inc	r15
    310e:	20 91 da 08 	lds	r18, 0x08DA
    3112:	f2 16       	cp	r15, r18
    3114:	40 f2       	brcs	.-112    	; 0x30a6 <lcd_putchar+0x17e>
    3116:	60 91 d9 08 	lds	r22, 0x08D9
    311a:	61 50       	subi	r22, 0x01	; 1
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <_ZN12OrangutanLCD6gotoXYEhh>
    3122:	00 e0       	ldi	r16, 0x00	; 0
    3124:	04 c0       	rjmp	.+8      	; 0x312e <lcd_putchar+0x206>
    3126:	80 e2       	ldi	r24, 0x20	; 32
    3128:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_ZN12OrangutanLCD9send_dataEh>
    312c:	0f 5f       	subi	r16, 0xFF	; 255
    312e:	80 91 da 08 	lds	r24, 0x08DA
    3132:	08 17       	cp	r16, r24
    3134:	c0 f3       	brcs	.-16     	; 0x3126 <lcd_putchar+0x1fe>
    3136:	03 c0       	rjmp	.+6      	; 0x313e <lcd_putchar+0x216>
    3138:	4f 5f       	subi	r20, 0xFF	; 255
    313a:	40 93 0e 09 	sts	0x090E, r20
    313e:	10 92 0f 09 	sts	0x090F, r1
    3142:	80 91 0f 09 	lds	r24, 0x090F
    3146:	60 91 0e 09 	lds	r22, 0x090E
    314a:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <_ZN12OrangutanLCD6gotoXYEhh>
    314e:	2e 2d       	mov	r18, r14
    3150:	33 27       	eor	r19, r19
    3152:	27 fd       	sbrc	r18, 7
    3154:	30 95       	com	r19
    3156:	c9 01       	movw	r24, r18
    3158:	cd b7       	in	r28, 0x3d	; 61
    315a:	de b7       	in	r29, 0x3e	; 62
    315c:	e8 e0       	ldi	r30, 0x08	; 8
    315e:	0c 94 8d 21 	jmp	0x431a	; 0x431a <__epilogue_restores__+0x14>

00003162 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    3162:	ef 92       	push	r14
    3164:	ff 92       	push	r15
    3166:	0f 93       	push	r16
    3168:	1f 93       	push	r17
    316a:	cf 93       	push	r28
    316c:	df 93       	push	r29
    316e:	7c 01       	movw	r14, r24
    3170:	06 2f       	mov	r16, r22
    3172:	10 e0       	ldi	r17, 0x00	; 0
    3174:	53 e0       	ldi	r21, 0x03	; 3
    3176:	00 0f       	add	r16, r16
    3178:	11 1f       	adc	r17, r17
    317a:	5a 95       	dec	r21
    317c:	e1 f7       	brne	.-8      	; 0x3176 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    317e:	c0 e0       	ldi	r28, 0x00	; 0
    3180:	d0 e0       	ldi	r29, 0x00	; 0
    3182:	9e 01       	movw	r18, r28
    3184:	20 0f       	add	r18, r16
    3186:	82 2f       	mov	r24, r18
    3188:	80 64       	ori	r24, 0x40	; 64
    318a:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_ZN12OrangutanLCD8send_cmdEh>
    318e:	f7 01       	movw	r30, r14
    3190:	ec 0f       	add	r30, r28
    3192:	fd 1f       	adc	r31, r29
    3194:	e4 91       	lpm	r30, Z+
    3196:	8e 2f       	mov	r24, r30
    3198:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_ZN12OrangutanLCD9send_dataEh>
    319c:	21 96       	adiw	r28, 0x01	; 1
    319e:	c8 30       	cpi	r28, 0x08	; 8
    31a0:	d1 05       	cpc	r29, r1
    31a2:	79 f7       	brne	.-34     	; 0x3182 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    31a4:	cd b7       	in	r28, 0x3d	; 61
    31a6:	de b7       	in	r29, 0x3e	; 62
    31a8:	e6 e0       	ldi	r30, 0x06	; 6
    31aa:	0c 94 8f 21 	jmp	0x431e	; 0x431e <__epilogue_restores__+0x18>

000031ae <lcd_load_custom_character>:
    31ae:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    31b2:	08 95       	ret

000031b4 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    31b4:	60 e0       	ldi	r22, 0x00	; 0
    31b6:	41 e0       	ldi	r20, 0x01	; 1
    31b8:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZN12OrangutanLCD4sendEhhh>
    31bc:	08 95       	ret

000031be <_ZN12OrangutanLCD6scrollEhhj>:
    31be:	0f 93       	push	r16
    31c0:	1f 93       	push	r17
    31c2:	cf 93       	push	r28
    31c4:	df 93       	push	r29
    31c6:	08 2f       	mov	r16, r24
    31c8:	16 2f       	mov	r17, r22
    31ca:	ea 01       	movw	r28, r20
    31cc:	0b c0       	rjmp	.+22     	; 0x31e4 <_ZN12OrangutanLCD6scrollEhhj+0x26>
    31ce:	00 23       	and	r16, r16
    31d0:	11 f4       	brne	.+4      	; 0x31d6 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    31d2:	88 e1       	ldi	r24, 0x18	; 24
    31d4:	01 c0       	rjmp	.+2      	; 0x31d8 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    31d6:	8c e1       	ldi	r24, 0x1C	; 28
    31d8:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_ZN12OrangutanLCD8send_cmdEh>
    31dc:	ce 01       	movw	r24, r28
    31de:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <delay_ms>
    31e2:	11 50       	subi	r17, 0x01	; 1
    31e4:	11 23       	and	r17, r17
    31e6:	99 f7       	brne	.-26     	; 0x31ce <_ZN12OrangutanLCD6scrollEhhj+0x10>
    31e8:	df 91       	pop	r29
    31ea:	cf 91       	pop	r28
    31ec:	1f 91       	pop	r17
    31ee:	0f 91       	pop	r16
    31f0:	08 95       	ret

000031f2 <lcd_scroll>:
    31f2:	0e 94 df 18 	call	0x31be	; 0x31be <_ZN12OrangutanLCD6scrollEhhj>
    31f6:	08 95       	ret

000031f8 <serial_get_mode>:
    31f8:	28 2f       	mov	r18, r24
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	f9 01       	movw	r30, r18
    31fe:	93 e0       	ldi	r25, 0x03	; 3
    3200:	ee 0f       	add	r30, r30
    3202:	ff 1f       	adc	r31, r31
    3204:	9a 95       	dec	r25
    3206:	e1 f7       	brne	.-8      	; 0x3200 <serial_get_mode+0x8>
    3208:	22 0f       	add	r18, r18
    320a:	33 1f       	adc	r19, r19
    320c:	e2 0f       	add	r30, r18
    320e:	f3 1f       	adc	r31, r19
    3210:	e5 52       	subi	r30, 0x25	; 37
    3212:	f7 4f       	sbci	r31, 0xF7	; 247
    3214:	80 81       	ld	r24, Z
    3216:	08 95       	ret

00003218 <serial_get_received_bytes>:
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	fc 01       	movw	r30, r24
    321c:	ee 0f       	add	r30, r30
    321e:	ff 1f       	adc	r31, r31
    3220:	ee 0f       	add	r30, r30
    3222:	ff 1f       	adc	r31, r31
    3224:	e8 0f       	add	r30, r24
    3226:	f9 1f       	adc	r31, r25
    3228:	ee 0f       	add	r30, r30
    322a:	ff 1f       	adc	r31, r31
    322c:	e3 52       	subi	r30, 0x23	; 35
    322e:	f7 4f       	sbci	r31, 0xF7	; 247
    3230:	80 81       	ld	r24, Z
    3232:	08 95       	ret

00003234 <serial_receive_buffer_full>:
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	fc 01       	movw	r30, r24
    3238:	ee 0f       	add	r30, r30
    323a:	ff 1f       	adc	r31, r31
    323c:	ee 0f       	add	r30, r30
    323e:	ff 1f       	adc	r31, r31
    3240:	e8 0f       	add	r30, r24
    3242:	f9 1f       	adc	r31, r25
    3244:	ee 0f       	add	r30, r30
    3246:	ff 1f       	adc	r31, r31
    3248:	e3 52       	subi	r30, 0x23	; 35
    324a:	f7 4f       	sbci	r31, 0xF7	; 247
    324c:	20 81       	ld	r18, Z
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	fc 01       	movw	r30, r24
    3252:	53 e0       	ldi	r21, 0x03	; 3
    3254:	ee 0f       	add	r30, r30
    3256:	ff 1f       	adc	r31, r31
    3258:	5a 95       	dec	r21
    325a:	e1 f7       	brne	.-8      	; 0x3254 <serial_receive_buffer_full+0x20>
    325c:	88 0f       	add	r24, r24
    325e:	99 1f       	adc	r25, r25
    3260:	e8 0f       	add	r30, r24
    3262:	f9 1f       	adc	r31, r25
    3264:	e5 52       	subi	r30, 0x25	; 37
    3266:	f7 4f       	sbci	r31, 0xF7	; 247
    3268:	84 81       	ldd	r24, Z+4	; 0x04
    326a:	28 17       	cp	r18, r24
    326c:	09 f4       	brne	.+2      	; 0x3270 <serial_receive_buffer_full+0x3c>
    326e:	31 e0       	ldi	r19, 0x01	; 1
    3270:	83 2f       	mov	r24, r19
    3272:	08 95       	ret

00003274 <serial_get_sent_bytes>:
    3274:	28 2f       	mov	r18, r24
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	f9 01       	movw	r30, r18
    327a:	b3 e0       	ldi	r27, 0x03	; 3
    327c:	ee 0f       	add	r30, r30
    327e:	ff 1f       	adc	r31, r31
    3280:	ba 95       	dec	r27
    3282:	e1 f7       	brne	.-8      	; 0x327c <serial_get_sent_bytes+0x8>
    3284:	22 0f       	add	r18, r18
    3286:	33 1f       	adc	r19, r19
    3288:	e2 0f       	add	r30, r18
    328a:	f3 1f       	adc	r31, r19
    328c:	e5 52       	subi	r30, 0x25	; 37
    328e:	f7 4f       	sbci	r31, 0xF7	; 247
    3290:	81 81       	ldd	r24, Z+1	; 0x01
    3292:	08 95       	ret

00003294 <serial_send_buffer_empty>:
    3294:	28 2f       	mov	r18, r24
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	f9 01       	movw	r30, r18
    329a:	73 e0       	ldi	r23, 0x03	; 3
    329c:	ee 0f       	add	r30, r30
    329e:	ff 1f       	adc	r31, r31
    32a0:	7a 95       	dec	r23
    32a2:	e1 f7       	brne	.-8      	; 0x329c <serial_send_buffer_empty+0x8>
    32a4:	22 0f       	add	r18, r18
    32a6:	33 1f       	adc	r19, r19
    32a8:	e2 0f       	add	r30, r18
    32aa:	f3 1f       	adc	r31, r19
    32ac:	e5 52       	subi	r30, 0x25	; 37
    32ae:	f7 4f       	sbci	r31, 0xF7	; 247
    32b0:	91 81       	ldd	r25, Z+1	; 0x01
    32b2:	40 e0       	ldi	r20, 0x00	; 0
    32b4:	28 2f       	mov	r18, r24
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	f9 01       	movw	r30, r18
    32ba:	53 e0       	ldi	r21, 0x03	; 3
    32bc:	ee 0f       	add	r30, r30
    32be:	ff 1f       	adc	r31, r31
    32c0:	5a 95       	dec	r21
    32c2:	e1 f7       	brne	.-8      	; 0x32bc <serial_send_buffer_empty+0x28>
    32c4:	22 0f       	add	r18, r18
    32c6:	33 1f       	adc	r19, r19
    32c8:	e2 0f       	add	r30, r18
    32ca:	f3 1f       	adc	r31, r19
    32cc:	e5 52       	subi	r30, 0x25	; 37
    32ce:	f7 4f       	sbci	r31, 0xF7	; 247
    32d0:	83 81       	ldd	r24, Z+3	; 0x03
    32d2:	98 17       	cp	r25, r24
    32d4:	09 f4       	brne	.+2      	; 0x32d8 <serial_send_buffer_empty+0x44>
    32d6:	41 e0       	ldi	r20, 0x01	; 1
    32d8:	84 2f       	mov	r24, r20
    32da:	08 95       	ret

000032dc <_ZN15OrangutanSerialC2Ev>:
    32dc:	08 95       	ret

000032de <_ZN15OrangutanSerialC1Ev>:
    32de:	08 95       	ret

000032e0 <_ZN15OrangutanSerial8initPortEh>:
    32e0:	88 23       	and	r24, r24
    32e2:	21 f0       	breq	.+8      	; 0x32ec <_ZN15OrangutanSerial8initPortEh+0xc>
    32e4:	81 30       	cpi	r24, 0x01	; 1
    32e6:	09 f0       	breq	.+2      	; 0x32ea <_ZN15OrangutanSerial8initPortEh+0xa>
    32e8:	44 c0       	rjmp	.+136    	; 0x3372 <_ZN15OrangutanSerial8initPortEh+0x92>
    32ea:	1d c0       	rjmp	.+58     	; 0x3326 <_ZN15OrangutanSerial8initPortEh+0x46>
    32ec:	20 91 db 08 	lds	r18, 0x08DB
    32f0:	22 23       	and	r18, r18
    32f2:	11 f4       	brne	.+4      	; 0x32f8 <_ZN15OrangutanSerial8initPortEh+0x18>
    32f4:	88 e9       	ldi	r24, 0x98	; 152
    32f6:	01 c0       	rjmp	.+2      	; 0x32fa <_ZN15OrangutanSerial8initPortEh+0x1a>
    32f8:	88 e1       	ldi	r24, 0x18	; 24
    32fa:	80 93 c1 00 	sts	0x00C1, r24
    32fe:	80 91 e1 08 	lds	r24, 0x08E1
    3302:	90 91 e2 08 	lds	r25, 0x08E2
    3306:	89 2b       	or	r24, r25
    3308:	61 f1       	breq	.+88     	; 0x3362 <_ZN15OrangutanSerial8initPortEh+0x82>
    330a:	90 91 dc 08 	lds	r25, 0x08DC
    330e:	80 91 de 08 	lds	r24, 0x08DE
    3312:	98 17       	cp	r25, r24
    3314:	30 f5       	brcc	.+76     	; 0x3362 <_ZN15OrangutanSerial8initPortEh+0x82>
    3316:	22 23       	and	r18, r18
    3318:	21 f5       	brne	.+72     	; 0x3362 <_ZN15OrangutanSerial8initPortEh+0x82>
    331a:	80 91 c1 00 	lds	r24, 0x00C1
    331e:	80 62       	ori	r24, 0x20	; 32
    3320:	80 93 c1 00 	sts	0x00C1, r24
    3324:	1c c0       	rjmp	.+56     	; 0x335e <_ZN15OrangutanSerial8initPortEh+0x7e>
    3326:	20 91 e5 08 	lds	r18, 0x08E5
    332a:	22 23       	and	r18, r18
    332c:	11 f4       	brne	.+4      	; 0x3332 <_ZN15OrangutanSerial8initPortEh+0x52>
    332e:	88 e9       	ldi	r24, 0x98	; 152
    3330:	01 c0       	rjmp	.+2      	; 0x3334 <_ZN15OrangutanSerial8initPortEh+0x54>
    3332:	88 e1       	ldi	r24, 0x18	; 24
    3334:	80 93 c9 00 	sts	0x00C9, r24
    3338:	80 91 eb 08 	lds	r24, 0x08EB
    333c:	90 91 ec 08 	lds	r25, 0x08EC
    3340:	89 2b       	or	r24, r25
    3342:	99 f0       	breq	.+38     	; 0x336a <_ZN15OrangutanSerial8initPortEh+0x8a>
    3344:	90 91 e6 08 	lds	r25, 0x08E6
    3348:	80 91 e8 08 	lds	r24, 0x08E8
    334c:	98 17       	cp	r25, r24
    334e:	68 f4       	brcc	.+26     	; 0x336a <_ZN15OrangutanSerial8initPortEh+0x8a>
    3350:	22 23       	and	r18, r18
    3352:	59 f4       	brne	.+22     	; 0x336a <_ZN15OrangutanSerial8initPortEh+0x8a>
    3354:	80 91 c9 00 	lds	r24, 0x00C9
    3358:	80 62       	ori	r24, 0x20	; 32
    335a:	80 93 c9 00 	sts	0x00C9, r24
    335e:	78 94       	sei
    3360:	08 95       	ret
    3362:	80 91 c1 00 	lds	r24, 0x00C1
    3366:	8f 7d       	andi	r24, 0xDF	; 223
    3368:	db cf       	rjmp	.-74     	; 0x3320 <_ZN15OrangutanSerial8initPortEh+0x40>
    336a:	80 91 c9 00 	lds	r24, 0x00C9
    336e:	8f 7d       	andi	r24, 0xDF	; 223
    3370:	f4 cf       	rjmp	.-24     	; 0x335a <_ZN15OrangutanSerial8initPortEh+0x7a>
    3372:	08 95       	ret

00003374 <serial_set_mode>:
    3374:	28 2f       	mov	r18, r24
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	f9 01       	movw	r30, r18
    337a:	b3 e0       	ldi	r27, 0x03	; 3
    337c:	ee 0f       	add	r30, r30
    337e:	ff 1f       	adc	r31, r31
    3380:	ba 95       	dec	r27
    3382:	e1 f7       	brne	.-8      	; 0x337c <serial_set_mode+0x8>
    3384:	22 0f       	add	r18, r18
    3386:	33 1f       	adc	r19, r19
    3388:	e2 0f       	add	r30, r18
    338a:	f3 1f       	adc	r31, r19
    338c:	e5 52       	subi	r30, 0x25	; 37
    338e:	f7 4f       	sbci	r31, 0xF7	; 247
    3390:	60 83       	st	Z, r22
    3392:	0e 94 70 19 	call	0x32e0	; 0x32e0 <_ZN15OrangutanSerial8initPortEh>
    3396:	08 95       	ret

00003398 <_ZN15OrangutanSerial11setBaudRateEhm>:
    3398:	a0 e0       	ldi	r26, 0x00	; 0
    339a:	b0 e0       	ldi	r27, 0x00	; 0
    339c:	e2 ed       	ldi	r30, 0xD2	; 210
    339e:	f9 e1       	ldi	r31, 0x19	; 25
    33a0:	0c 94 72 21 	jmp	0x42e4	; 0x42e4 <__prologue_saves__+0x16>
    33a4:	d8 2e       	mov	r13, r24
    33a6:	7a 01       	movw	r14, r20
    33a8:	8b 01       	movw	r16, r22
    33aa:	0e 94 70 19 	call	0x32e0	; 0x32e0 <_ZN15OrangutanSerial8initPortEh>
    33ae:	82 e0       	ldi	r24, 0x02	; 2
    33b0:	d8 16       	cp	r13, r24
    33b2:	19 f1       	breq	.+70     	; 0x33fa <_ZN15OrangutanSerial11setBaudRateEhm+0x62>
    33b4:	dd 20       	and	r13, r13
    33b6:	19 f0       	breq	.+6      	; 0x33be <_ZN15OrangutanSerial11setBaudRateEhm+0x26>
    33b8:	cc ec       	ldi	r28, 0xCC	; 204
    33ba:	d0 e0       	ldi	r29, 0x00	; 0
    33bc:	02 c0       	rjmp	.+4      	; 0x33c2 <_ZN15OrangutanSerial11setBaudRateEhm+0x2a>
    33be:	c4 ec       	ldi	r28, 0xC4	; 196
    33c0:	d0 e0       	ldi	r29, 0x00	; 0
    33c2:	60 ea       	ldi	r22, 0xA0	; 160
    33c4:	75 e2       	ldi	r23, 0x25	; 37
    33c6:	86 e2       	ldi	r24, 0x26	; 38
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	6e 19       	sub	r22, r14
    33cc:	7f 09       	sbc	r23, r15
    33ce:	80 0b       	sbc	r24, r16
    33d0:	91 0b       	sbc	r25, r17
    33d2:	33 e0       	ldi	r19, 0x03	; 3
    33d4:	66 0f       	add	r22, r22
    33d6:	77 1f       	adc	r23, r23
    33d8:	88 1f       	adc	r24, r24
    33da:	99 1f       	adc	r25, r25
    33dc:	3a 95       	dec	r19
    33de:	d1 f7       	brne	.-12     	; 0x33d4 <_ZN15OrangutanSerial11setBaudRateEhm+0x3c>
    33e0:	24 e0       	ldi	r18, 0x04	; 4
    33e2:	ee 0c       	add	r14, r14
    33e4:	ff 1c       	adc	r15, r15
    33e6:	00 1f       	adc	r16, r16
    33e8:	11 1f       	adc	r17, r17
    33ea:	2a 95       	dec	r18
    33ec:	d1 f7       	brne	.-12     	; 0x33e2 <_ZN15OrangutanSerial11setBaudRateEhm+0x4a>
    33ee:	a8 01       	movw	r20, r16
    33f0:	97 01       	movw	r18, r14
    33f2:	0e 94 45 21 	call	0x428a	; 0x428a <__udivmodsi4>
    33f6:	39 83       	std	Y+1, r19	; 0x01
    33f8:	28 83       	st	Y, r18
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    33fe:	e7 e0       	ldi	r30, 0x07	; 7
    3400:	0c 94 8e 21 	jmp	0x431c	; 0x431c <__epilogue_restores__+0x16>

00003404 <serial_set_baud_rate>:
    3404:	0e 94 cc 19 	call	0x3398	; 0x3398 <_ZN15OrangutanSerial11setBaudRateEhm>
    3408:	08 95       	ret

0000340a <_ZN15OrangutanSerial7setModeEhh>:
    340a:	28 2f       	mov	r18, r24
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	f9 01       	movw	r30, r18
    3410:	53 e0       	ldi	r21, 0x03	; 3
    3412:	ee 0f       	add	r30, r30
    3414:	ff 1f       	adc	r31, r31
    3416:	5a 95       	dec	r21
    3418:	e1 f7       	brne	.-8      	; 0x3412 <_ZN15OrangutanSerial7setModeEhh+0x8>
    341a:	22 0f       	add	r18, r18
    341c:	33 1f       	adc	r19, r19
    341e:	e2 0f       	add	r30, r18
    3420:	f3 1f       	adc	r31, r19
    3422:	e5 52       	subi	r30, 0x25	; 37
    3424:	f7 4f       	sbci	r31, 0xF7	; 247
    3426:	60 83       	st	Z, r22
    3428:	0e 94 70 19 	call	0x32e0	; 0x32e0 <_ZN15OrangutanSerial8initPortEh>
    342c:	08 95       	ret

0000342e <_ZN15OrangutanSerial7receiveEhPch>:
    342e:	58 2f       	mov	r21, r24
    3430:	82 30       	cpi	r24, 0x02	; 2
    3432:	51 f0       	breq	.+20     	; 0x3448 <_ZN15OrangutanSerial7receiveEhPch+0x1a>
    3434:	88 23       	and	r24, r24
    3436:	19 f0       	breq	.+6      	; 0x343e <_ZN15OrangutanSerial7receiveEhPch+0x10>
    3438:	e9 ec       	ldi	r30, 0xC9	; 201
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	02 c0       	rjmp	.+4      	; 0x3442 <_ZN15OrangutanSerial7receiveEhPch+0x14>
    343e:	e1 ec       	ldi	r30, 0xC1	; 193
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	80 81       	ld	r24, Z
    3444:	8f 77       	andi	r24, 0x7F	; 127
    3446:	80 83       	st	Z, r24
    3448:	25 2f       	mov	r18, r21
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	d9 01       	movw	r26, r18
    344e:	aa 0f       	add	r26, r26
    3450:	bb 1f       	adc	r27, r27
    3452:	c9 01       	movw	r24, r18
    3454:	e3 e0       	ldi	r30, 0x03	; 3
    3456:	88 0f       	add	r24, r24
    3458:	99 1f       	adc	r25, r25
    345a:	ea 95       	dec	r30
    345c:	e1 f7       	brne	.-8      	; 0x3456 <_ZN15OrangutanSerial7receiveEhPch+0x28>
    345e:	a8 0f       	add	r26, r24
    3460:	b9 1f       	adc	r27, r25
    3462:	a5 52       	subi	r26, 0x25	; 37
    3464:	b7 4f       	sbci	r27, 0xF7	; 247
    3466:	19 96       	adiw	r26, 0x09	; 9
    3468:	7c 93       	st	X, r23
    346a:	6e 93       	st	-X, r22
    346c:	18 97       	sbiw	r26, 0x08	; 8
    346e:	f9 01       	movw	r30, r18
    3470:	ee 0f       	add	r30, r30
    3472:	ff 1f       	adc	r31, r31
    3474:	ee 0f       	add	r30, r30
    3476:	ff 1f       	adc	r31, r31
    3478:	e2 0f       	add	r30, r18
    347a:	f3 1f       	adc	r31, r19
    347c:	ee 0f       	add	r30, r30
    347e:	ff 1f       	adc	r31, r31
    3480:	e3 52       	subi	r30, 0x23	; 35
    3482:	f7 4f       	sbci	r31, 0xF7	; 247
    3484:	10 82       	st	Z, r1
    3486:	14 96       	adiw	r26, 0x04	; 4
    3488:	4c 93       	st	X, r20
    348a:	14 97       	sbiw	r26, 0x04	; 4
    348c:	15 96       	adiw	r26, 0x05	; 5
    348e:	1c 92       	st	X, r1
    3490:	15 97       	sbiw	r26, 0x05	; 5
    3492:	52 30       	cpi	r21, 0x02	; 2
    3494:	69 f0       	breq	.+26     	; 0x34b0 <_ZN15OrangutanSerial7receiveEhPch+0x82>
    3496:	8c 91       	ld	r24, X
    3498:	88 23       	and	r24, r24
    349a:	51 f4       	brne	.+20     	; 0x34b0 <_ZN15OrangutanSerial7receiveEhPch+0x82>
    349c:	55 23       	and	r21, r21
    349e:	19 f0       	breq	.+6      	; 0x34a6 <_ZN15OrangutanSerial7receiveEhPch+0x78>
    34a0:	e9 ec       	ldi	r30, 0xC9	; 201
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	02 c0       	rjmp	.+4      	; 0x34aa <_ZN15OrangutanSerial7receiveEhPch+0x7c>
    34a6:	e1 ec       	ldi	r30, 0xC1	; 193
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	80 81       	ld	r24, Z
    34ac:	80 68       	ori	r24, 0x80	; 128
    34ae:	80 83       	st	Z, r24
    34b0:	08 95       	ret

000034b2 <serial_receive>:
    34b2:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN15OrangutanSerial7receiveEhPch>
    34b6:	08 95       	ret

000034b8 <_ZN15OrangutanSerial11receiveRingEhPch>:
    34b8:	58 2f       	mov	r21, r24
    34ba:	82 30       	cpi	r24, 0x02	; 2
    34bc:	51 f0       	breq	.+20     	; 0x34d2 <_ZN15OrangutanSerial11receiveRingEhPch+0x1a>
    34be:	88 23       	and	r24, r24
    34c0:	19 f0       	breq	.+6      	; 0x34c8 <_ZN15OrangutanSerial11receiveRingEhPch+0x10>
    34c2:	e9 ec       	ldi	r30, 0xC9	; 201
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	02 c0       	rjmp	.+4      	; 0x34cc <_ZN15OrangutanSerial11receiveRingEhPch+0x14>
    34c8:	e1 ec       	ldi	r30, 0xC1	; 193
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	80 81       	ld	r24, Z
    34ce:	8f 77       	andi	r24, 0x7F	; 127
    34d0:	80 83       	st	Z, r24
    34d2:	25 2f       	mov	r18, r21
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	d9 01       	movw	r26, r18
    34d8:	aa 0f       	add	r26, r26
    34da:	bb 1f       	adc	r27, r27
    34dc:	c9 01       	movw	r24, r18
    34de:	e3 e0       	ldi	r30, 0x03	; 3
    34e0:	88 0f       	add	r24, r24
    34e2:	99 1f       	adc	r25, r25
    34e4:	ea 95       	dec	r30
    34e6:	e1 f7       	brne	.-8      	; 0x34e0 <_ZN15OrangutanSerial11receiveRingEhPch+0x28>
    34e8:	a8 0f       	add	r26, r24
    34ea:	b9 1f       	adc	r27, r25
    34ec:	a5 52       	subi	r26, 0x25	; 37
    34ee:	b7 4f       	sbci	r27, 0xF7	; 247
    34f0:	19 96       	adiw	r26, 0x09	; 9
    34f2:	7c 93       	st	X, r23
    34f4:	6e 93       	st	-X, r22
    34f6:	18 97       	sbiw	r26, 0x08	; 8
    34f8:	f9 01       	movw	r30, r18
    34fa:	ee 0f       	add	r30, r30
    34fc:	ff 1f       	adc	r31, r31
    34fe:	ee 0f       	add	r30, r30
    3500:	ff 1f       	adc	r31, r31
    3502:	e2 0f       	add	r30, r18
    3504:	f3 1f       	adc	r31, r19
    3506:	ee 0f       	add	r30, r30
    3508:	ff 1f       	adc	r31, r31
    350a:	e3 52       	subi	r30, 0x23	; 35
    350c:	f7 4f       	sbci	r31, 0xF7	; 247
    350e:	10 82       	st	Z, r1
    3510:	14 96       	adiw	r26, 0x04	; 4
    3512:	4c 93       	st	X, r20
    3514:	14 97       	sbiw	r26, 0x04	; 4
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	15 96       	adiw	r26, 0x05	; 5
    351a:	8c 93       	st	X, r24
    351c:	15 97       	sbiw	r26, 0x05	; 5
    351e:	52 30       	cpi	r21, 0x02	; 2
    3520:	69 f0       	breq	.+26     	; 0x353c <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    3522:	8c 91       	ld	r24, X
    3524:	88 23       	and	r24, r24
    3526:	51 f4       	brne	.+20     	; 0x353c <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    3528:	55 23       	and	r21, r21
    352a:	19 f0       	breq	.+6      	; 0x3532 <_ZN15OrangutanSerial11receiveRingEhPch+0x7a>
    352c:	e9 ec       	ldi	r30, 0xC9	; 201
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	02 c0       	rjmp	.+4      	; 0x3536 <_ZN15OrangutanSerial11receiveRingEhPch+0x7e>
    3532:	e1 ec       	ldi	r30, 0xC1	; 193
    3534:	f0 e0       	ldi	r31, 0x00	; 0
    3536:	80 81       	ld	r24, Z
    3538:	80 68       	ori	r24, 0x80	; 128
    353a:	80 83       	st	Z, r24
    353c:	08 95       	ret

0000353e <serial_receive_ring>:
    353e:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <_ZN15OrangutanSerial11receiveRingEhPch>
    3542:	08 95       	ret

00003544 <_ZN15OrangutanSerial13cancelReceiveEh>:
    3544:	60 e0       	ldi	r22, 0x00	; 0
    3546:	70 e0       	ldi	r23, 0x00	; 0
    3548:	40 e0       	ldi	r20, 0x00	; 0
    354a:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN15OrangutanSerial7receiveEhPch>
    354e:	08 95       	ret

00003550 <serial_cancel_receive>:
    3550:	0e 94 a2 1a 	call	0x3544	; 0x3544 <_ZN15OrangutanSerial13cancelReceiveEh>
    3554:	08 95       	ret

00003556 <__vector_20>:
    3556:	1f 92       	push	r1
    3558:	0f 92       	push	r0
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	0f 92       	push	r0
    355e:	0b b6       	in	r0, 0x3b	; 59
    3560:	0f 92       	push	r0
    3562:	11 24       	eor	r1, r1
    3564:	2f 93       	push	r18
    3566:	8f 93       	push	r24
    3568:	9f 93       	push	r25
    356a:	ef 93       	push	r30
    356c:	ff 93       	push	r31
    356e:	20 91 c6 00 	lds	r18, 0x00C6
    3572:	e0 91 e3 08 	lds	r30, 0x08E3
    3576:	f0 91 e4 08 	lds	r31, 0x08E4
    357a:	30 97       	sbiw	r30, 0x00	; 0
    357c:	81 f0       	breq	.+32     	; 0x359e <__vector_20+0x48>
    357e:	90 91 dd 08 	lds	r25, 0x08DD
    3582:	80 91 df 08 	lds	r24, 0x08DF
    3586:	98 17       	cp	r25, r24
    3588:	50 f4       	brcc	.+20     	; 0x359e <__vector_20+0x48>
    358a:	80 91 dd 08 	lds	r24, 0x08DD
    358e:	e8 0f       	add	r30, r24
    3590:	f1 1d       	adc	r31, r1
    3592:	20 83       	st	Z, r18
    3594:	80 91 dd 08 	lds	r24, 0x08DD
    3598:	8f 5f       	subi	r24, 0xFF	; 255
    359a:	80 93 dd 08 	sts	0x08DD, r24
    359e:	90 91 dd 08 	lds	r25, 0x08DD
    35a2:	80 91 df 08 	lds	r24, 0x08DF
    35a6:	98 17       	cp	r25, r24
    35a8:	31 f4       	brne	.+12     	; 0x35b6 <__vector_20+0x60>
    35aa:	80 91 e0 08 	lds	r24, 0x08E0
    35ae:	88 23       	and	r24, r24
    35b0:	11 f0       	breq	.+4      	; 0x35b6 <__vector_20+0x60>
    35b2:	10 92 dd 08 	sts	0x08DD, r1
    35b6:	ff 91       	pop	r31
    35b8:	ef 91       	pop	r30
    35ba:	9f 91       	pop	r25
    35bc:	8f 91       	pop	r24
    35be:	2f 91       	pop	r18
    35c0:	0f 90       	pop	r0
    35c2:	0b be       	out	0x3b, r0	; 59
    35c4:	0f 90       	pop	r0
    35c6:	0f be       	out	0x3f, r0	; 63
    35c8:	0f 90       	pop	r0
    35ca:	1f 90       	pop	r1
    35cc:	18 95       	reti

000035ce <__vector_28>:
    35ce:	1f 92       	push	r1
    35d0:	0f 92       	push	r0
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	0f 92       	push	r0
    35d6:	0b b6       	in	r0, 0x3b	; 59
    35d8:	0f 92       	push	r0
    35da:	11 24       	eor	r1, r1
    35dc:	2f 93       	push	r18
    35de:	8f 93       	push	r24
    35e0:	9f 93       	push	r25
    35e2:	ef 93       	push	r30
    35e4:	ff 93       	push	r31
    35e6:	20 91 ce 00 	lds	r18, 0x00CE
    35ea:	e0 91 ed 08 	lds	r30, 0x08ED
    35ee:	f0 91 ee 08 	lds	r31, 0x08EE
    35f2:	30 97       	sbiw	r30, 0x00	; 0
    35f4:	81 f0       	breq	.+32     	; 0x3616 <__vector_28+0x48>
    35f6:	90 91 e7 08 	lds	r25, 0x08E7
    35fa:	80 91 e9 08 	lds	r24, 0x08E9
    35fe:	98 17       	cp	r25, r24
    3600:	50 f4       	brcc	.+20     	; 0x3616 <__vector_28+0x48>
    3602:	80 91 e7 08 	lds	r24, 0x08E7
    3606:	e8 0f       	add	r30, r24
    3608:	f1 1d       	adc	r31, r1
    360a:	20 83       	st	Z, r18
    360c:	80 91 e7 08 	lds	r24, 0x08E7
    3610:	8f 5f       	subi	r24, 0xFF	; 255
    3612:	80 93 e7 08 	sts	0x08E7, r24
    3616:	90 91 e7 08 	lds	r25, 0x08E7
    361a:	80 91 e9 08 	lds	r24, 0x08E9
    361e:	98 17       	cp	r25, r24
    3620:	31 f4       	brne	.+12     	; 0x362e <__vector_28+0x60>
    3622:	80 91 ea 08 	lds	r24, 0x08EA
    3626:	88 23       	and	r24, r24
    3628:	11 f0       	breq	.+4      	; 0x362e <__vector_28+0x60>
    362a:	10 92 e7 08 	sts	0x08E7, r1
    362e:	ff 91       	pop	r31
    3630:	ef 91       	pop	r30
    3632:	9f 91       	pop	r25
    3634:	8f 91       	pop	r24
    3636:	2f 91       	pop	r18
    3638:	0f 90       	pop	r0
    363a:	0b be       	out	0x3b, r0	; 59
    363c:	0f 90       	pop	r0
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	0f 90       	pop	r0
    3642:	1f 90       	pop	r1
    3644:	18 95       	reti

00003646 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    3646:	cf 93       	push	r28
    3648:	df 93       	push	r29
    364a:	38 2f       	mov	r19, r24
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	fc 01       	movw	r30, r24
    3650:	53 e0       	ldi	r21, 0x03	; 3
    3652:	ee 0f       	add	r30, r30
    3654:	ff 1f       	adc	r31, r31
    3656:	5a 95       	dec	r21
    3658:	e1 f7       	brne	.-8      	; 0x3652 <_ZN15OrangutanSerial11uart_tx_isrEh+0xc>
    365a:	88 0f       	add	r24, r24
    365c:	99 1f       	adc	r25, r25
    365e:	e8 0f       	add	r30, r24
    3660:	f9 1f       	adc	r31, r25
    3662:	e5 52       	subi	r30, 0x25	; 37
    3664:	f7 4f       	sbci	r31, 0xF7	; 247
    3666:	a6 81       	ldd	r26, Z+6	; 0x06
    3668:	b7 81       	ldd	r27, Z+7	; 0x07
    366a:	10 97       	sbiw	r26, 0x00	; 0
    366c:	09 f4       	brne	.+2      	; 0x3670 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2a>
    366e:	64 c0       	rjmp	.+200    	; 0x3738 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    3670:	83 2f       	mov	r24, r19
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	fc 01       	movw	r30, r24
    3676:	23 e0       	ldi	r18, 0x03	; 3
    3678:	ee 0f       	add	r30, r30
    367a:	ff 1f       	adc	r31, r31
    367c:	2a 95       	dec	r18
    367e:	e1 f7       	brne	.-8      	; 0x3678 <_ZN15OrangutanSerial11uart_tx_isrEh+0x32>
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	e8 0f       	add	r30, r24
    3686:	f9 1f       	adc	r31, r25
    3688:	e5 52       	subi	r30, 0x25	; 37
    368a:	f7 4f       	sbci	r31, 0xF7	; 247
    368c:	21 81       	ldd	r18, Z+1	; 0x01
    368e:	83 2f       	mov	r24, r19
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	fc 01       	movw	r30, r24
    3694:	63 e0       	ldi	r22, 0x03	; 3
    3696:	ee 0f       	add	r30, r30
    3698:	ff 1f       	adc	r31, r31
    369a:	6a 95       	dec	r22
    369c:	e1 f7       	brne	.-8      	; 0x3696 <_ZN15OrangutanSerial11uart_tx_isrEh+0x50>
    369e:	88 0f       	add	r24, r24
    36a0:	99 1f       	adc	r25, r25
    36a2:	e8 0f       	add	r30, r24
    36a4:	f9 1f       	adc	r31, r25
    36a6:	e5 52       	subi	r30, 0x25	; 37
    36a8:	f7 4f       	sbci	r31, 0xF7	; 247
    36aa:	83 81       	ldd	r24, Z+3	; 0x03
    36ac:	28 17       	cp	r18, r24
    36ae:	08 f0       	brcs	.+2      	; 0x36b2 <_ZN15OrangutanSerial11uart_tx_isrEh+0x6c>
    36b0:	43 c0       	rjmp	.+134    	; 0x3738 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    36b2:	33 23       	and	r19, r19
    36b4:	19 f0       	breq	.+6      	; 0x36bc <_ZN15OrangutanSerial11uart_tx_isrEh+0x76>
    36b6:	e8 ec       	ldi	r30, 0xC8	; 200
    36b8:	f0 e0       	ldi	r31, 0x00	; 0
    36ba:	02 c0       	rjmp	.+4      	; 0x36c0 <_ZN15OrangutanSerial11uart_tx_isrEh+0x7a>
    36bc:	e0 ec       	ldi	r30, 0xC0	; 192
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	80 81       	ld	r24, Z
    36c2:	85 ff       	sbrs	r24, 5
    36c4:	39 c0       	rjmp	.+114    	; 0x3738 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    36c6:	33 23       	and	r19, r19
    36c8:	19 f0       	breq	.+6      	; 0x36d0 <_ZN15OrangutanSerial11uart_tx_isrEh+0x8a>
    36ca:	ce ec       	ldi	r28, 0xCE	; 206
    36cc:	d0 e0       	ldi	r29, 0x00	; 0
    36ce:	02 c0       	rjmp	.+4      	; 0x36d4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x8e>
    36d0:	c6 ec       	ldi	r28, 0xC6	; 198
    36d2:	d0 e0       	ldi	r29, 0x00	; 0
    36d4:	83 2f       	mov	r24, r19
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	fc 01       	movw	r30, r24
    36da:	43 e0       	ldi	r20, 0x03	; 3
    36dc:	ee 0f       	add	r30, r30
    36de:	ff 1f       	adc	r31, r31
    36e0:	4a 95       	dec	r20
    36e2:	e1 f7       	brne	.-8      	; 0x36dc <_ZN15OrangutanSerial11uart_tx_isrEh+0x96>
    36e4:	88 0f       	add	r24, r24
    36e6:	99 1f       	adc	r25, r25
    36e8:	e8 0f       	add	r30, r24
    36ea:	f9 1f       	adc	r31, r25
    36ec:	e5 52       	subi	r30, 0x25	; 37
    36ee:	f7 4f       	sbci	r31, 0xF7	; 247
    36f0:	81 81       	ldd	r24, Z+1	; 0x01
    36f2:	a8 0f       	add	r26, r24
    36f4:	b1 1d       	adc	r27, r1
    36f6:	8c 91       	ld	r24, X
    36f8:	88 83       	st	Y, r24
    36fa:	83 2f       	mov	r24, r19
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	fc 01       	movw	r30, r24
    3700:	73 e0       	ldi	r23, 0x03	; 3
    3702:	ee 0f       	add	r30, r30
    3704:	ff 1f       	adc	r31, r31
    3706:	7a 95       	dec	r23
    3708:	e1 f7       	brne	.-8      	; 0x3702 <_ZN15OrangutanSerial11uart_tx_isrEh+0xbc>
    370a:	88 0f       	add	r24, r24
    370c:	99 1f       	adc	r25, r25
    370e:	e8 0f       	add	r30, r24
    3710:	f9 1f       	adc	r31, r25
    3712:	e5 52       	subi	r30, 0x25	; 37
    3714:	f7 4f       	sbci	r31, 0xF7	; 247
    3716:	21 81       	ldd	r18, Z+1	; 0x01
    3718:	2f 5f       	subi	r18, 0xFF	; 255
    371a:	83 2f       	mov	r24, r19
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	fc 01       	movw	r30, r24
    3720:	53 e0       	ldi	r21, 0x03	; 3
    3722:	ee 0f       	add	r30, r30
    3724:	ff 1f       	adc	r31, r31
    3726:	5a 95       	dec	r21
    3728:	e1 f7       	brne	.-8      	; 0x3722 <_ZN15OrangutanSerial11uart_tx_isrEh+0xdc>
    372a:	88 0f       	add	r24, r24
    372c:	99 1f       	adc	r25, r25
    372e:	e8 0f       	add	r30, r24
    3730:	f9 1f       	adc	r31, r25
    3732:	e5 52       	subi	r30, 0x25	; 37
    3734:	f7 4f       	sbci	r31, 0xF7	; 247
    3736:	21 83       	std	Z+1, r18	; 0x01
    3738:	83 2f       	mov	r24, r19
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	fc 01       	movw	r30, r24
    373e:	b3 e0       	ldi	r27, 0x03	; 3
    3740:	ee 0f       	add	r30, r30
    3742:	ff 1f       	adc	r31, r31
    3744:	ba 95       	dec	r27
    3746:	e1 f7       	brne	.-8      	; 0x3740 <_ZN15OrangutanSerial11uart_tx_isrEh+0xfa>
    3748:	88 0f       	add	r24, r24
    374a:	99 1f       	adc	r25, r25
    374c:	e8 0f       	add	r30, r24
    374e:	f9 1f       	adc	r31, r25
    3750:	e5 52       	subi	r30, 0x25	; 37
    3752:	f7 4f       	sbci	r31, 0xF7	; 247
    3754:	86 81       	ldd	r24, Z+6	; 0x06
    3756:	97 81       	ldd	r25, Z+7	; 0x07
    3758:	89 2b       	or	r24, r25
    375a:	09 f4       	brne	.+2      	; 0x375e <_ZN15OrangutanSerial11uart_tx_isrEh+0x118>
    375c:	43 c0       	rjmp	.+134    	; 0x37e4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    375e:	83 2f       	mov	r24, r19
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	fc 01       	movw	r30, r24
    3764:	73 e0       	ldi	r23, 0x03	; 3
    3766:	ee 0f       	add	r30, r30
    3768:	ff 1f       	adc	r31, r31
    376a:	7a 95       	dec	r23
    376c:	e1 f7       	brne	.-8      	; 0x3766 <_ZN15OrangutanSerial11uart_tx_isrEh+0x120>
    376e:	88 0f       	add	r24, r24
    3770:	99 1f       	adc	r25, r25
    3772:	e8 0f       	add	r30, r24
    3774:	f9 1f       	adc	r31, r25
    3776:	e5 52       	subi	r30, 0x25	; 37
    3778:	f7 4f       	sbci	r31, 0xF7	; 247
    377a:	21 81       	ldd	r18, Z+1	; 0x01
    377c:	83 2f       	mov	r24, r19
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	fc 01       	movw	r30, r24
    3782:	53 e0       	ldi	r21, 0x03	; 3
    3784:	ee 0f       	add	r30, r30
    3786:	ff 1f       	adc	r31, r31
    3788:	5a 95       	dec	r21
    378a:	e1 f7       	brne	.-8      	; 0x3784 <_ZN15OrangutanSerial11uart_tx_isrEh+0x13e>
    378c:	88 0f       	add	r24, r24
    378e:	99 1f       	adc	r25, r25
    3790:	e8 0f       	add	r30, r24
    3792:	f9 1f       	adc	r31, r25
    3794:	e5 52       	subi	r30, 0x25	; 37
    3796:	f7 4f       	sbci	r31, 0xF7	; 247
    3798:	83 81       	ldd	r24, Z+3	; 0x03
    379a:	28 17       	cp	r18, r24
    379c:	18 f5       	brcc	.+70     	; 0x37e4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    379e:	83 2f       	mov	r24, r19
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	fc 01       	movw	r30, r24
    37a4:	b3 e0       	ldi	r27, 0x03	; 3
    37a6:	ee 0f       	add	r30, r30
    37a8:	ff 1f       	adc	r31, r31
    37aa:	ba 95       	dec	r27
    37ac:	e1 f7       	brne	.-8      	; 0x37a6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x160>
    37ae:	88 0f       	add	r24, r24
    37b0:	99 1f       	adc	r25, r25
    37b2:	e8 0f       	add	r30, r24
    37b4:	f9 1f       	adc	r31, r25
    37b6:	e5 52       	subi	r30, 0x25	; 37
    37b8:	f7 4f       	sbci	r31, 0xF7	; 247
    37ba:	80 81       	ld	r24, Z
    37bc:	88 23       	and	r24, r24
    37be:	91 f4       	brne	.+36     	; 0x37e4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    37c0:	33 23       	and	r19, r19
    37c2:	19 f0       	breq	.+6      	; 0x37ca <_ZN15OrangutanSerial11uart_tx_isrEh+0x184>
    37c4:	e9 ec       	ldi	r30, 0xC9	; 201
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	02 c0       	rjmp	.+4      	; 0x37ce <_ZN15OrangutanSerial11uart_tx_isrEh+0x188>
    37ca:	e1 ec       	ldi	r30, 0xC1	; 193
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	80 81       	ld	r24, Z
    37d0:	80 62       	ori	r24, 0x20	; 32
    37d2:	04 c0       	rjmp	.+8      	; 0x37dc <_ZN15OrangutanSerial11uart_tx_isrEh+0x196>
    37d4:	e9 ec       	ldi	r30, 0xC9	; 201
    37d6:	f0 e0       	ldi	r31, 0x00	; 0
    37d8:	80 81       	ld	r24, Z
    37da:	8f 7d       	andi	r24, 0xDF	; 223
    37dc:	80 83       	st	Z, r24
    37de:	df 91       	pop	r29
    37e0:	cf 91       	pop	r28
    37e2:	08 95       	ret
    37e4:	33 23       	and	r19, r19
    37e6:	b1 f7       	brne	.-20     	; 0x37d4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x18e>
    37e8:	e1 ec       	ldi	r30, 0xC1	; 193
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	f5 cf       	rjmp	.-22     	; 0x37d8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x192>

000037ee <_ZN15OrangutanSerial4sendEhPch>:
    37ee:	28 2f       	mov	r18, r24
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	fc 01       	movw	r30, r24
    37f4:	53 e0       	ldi	r21, 0x03	; 3
    37f6:	ee 0f       	add	r30, r30
    37f8:	ff 1f       	adc	r31, r31
    37fa:	5a 95       	dec	r21
    37fc:	e1 f7       	brne	.-8      	; 0x37f6 <_ZN15OrangutanSerial4sendEhPch+0x8>
    37fe:	88 0f       	add	r24, r24
    3800:	99 1f       	adc	r25, r25
    3802:	e8 0f       	add	r30, r24
    3804:	f9 1f       	adc	r31, r25
    3806:	e5 52       	subi	r30, 0x25	; 37
    3808:	f7 4f       	sbci	r31, 0xF7	; 247
    380a:	77 83       	std	Z+7, r23	; 0x07
    380c:	66 83       	std	Z+6, r22	; 0x06
    380e:	82 2f       	mov	r24, r18
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	fc 01       	movw	r30, r24
    3814:	b3 e0       	ldi	r27, 0x03	; 3
    3816:	ee 0f       	add	r30, r30
    3818:	ff 1f       	adc	r31, r31
    381a:	ba 95       	dec	r27
    381c:	e1 f7       	brne	.-8      	; 0x3816 <_ZN15OrangutanSerial4sendEhPch+0x28>
    381e:	88 0f       	add	r24, r24
    3820:	99 1f       	adc	r25, r25
    3822:	e8 0f       	add	r30, r24
    3824:	f9 1f       	adc	r31, r25
    3826:	e5 52       	subi	r30, 0x25	; 37
    3828:	f7 4f       	sbci	r31, 0xF7	; 247
    382a:	11 82       	std	Z+1, r1	; 0x01
    382c:	82 2f       	mov	r24, r18
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	fc 01       	movw	r30, r24
    3832:	73 e0       	ldi	r23, 0x03	; 3
    3834:	ee 0f       	add	r30, r30
    3836:	ff 1f       	adc	r31, r31
    3838:	7a 95       	dec	r23
    383a:	e1 f7       	brne	.-8      	; 0x3834 <_ZN15OrangutanSerial4sendEhPch+0x46>
    383c:	88 0f       	add	r24, r24
    383e:	99 1f       	adc	r25, r25
    3840:	e8 0f       	add	r30, r24
    3842:	f9 1f       	adc	r31, r25
    3844:	e5 52       	subi	r30, 0x25	; 37
    3846:	f7 4f       	sbci	r31, 0xF7	; 247
    3848:	43 83       	std	Z+3, r20	; 0x03
    384a:	22 30       	cpi	r18, 0x02	; 2
    384c:	09 f4       	brne	.+2      	; 0x3850 <_ZN15OrangutanSerial4sendEhPch+0x62>
    384e:	49 c0       	rjmp	.+146    	; 0x38e2 <_ZN15OrangutanSerial4sendEhPch+0xf4>
    3850:	82 2f       	mov	r24, r18
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	fc 01       	movw	r30, r24
    3856:	53 e0       	ldi	r21, 0x03	; 3
    3858:	ee 0f       	add	r30, r30
    385a:	ff 1f       	adc	r31, r31
    385c:	5a 95       	dec	r21
    385e:	e1 f7       	brne	.-8      	; 0x3858 <_ZN15OrangutanSerial4sendEhPch+0x6a>
    3860:	88 0f       	add	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	e8 0f       	add	r30, r24
    3866:	f9 1f       	adc	r31, r25
    3868:	e5 52       	subi	r30, 0x25	; 37
    386a:	f7 4f       	sbci	r31, 0xF7	; 247
    386c:	86 81       	ldd	r24, Z+6	; 0x06
    386e:	97 81       	ldd	r25, Z+7	; 0x07
    3870:	89 2b       	or	r24, r25
    3872:	91 f1       	breq	.+100    	; 0x38d8 <_ZN15OrangutanSerial4sendEhPch+0xea>
    3874:	82 2f       	mov	r24, r18
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	fc 01       	movw	r30, r24
    387a:	b3 e0       	ldi	r27, 0x03	; 3
    387c:	ee 0f       	add	r30, r30
    387e:	ff 1f       	adc	r31, r31
    3880:	ba 95       	dec	r27
    3882:	e1 f7       	brne	.-8      	; 0x387c <_ZN15OrangutanSerial4sendEhPch+0x8e>
    3884:	88 0f       	add	r24, r24
    3886:	99 1f       	adc	r25, r25
    3888:	e8 0f       	add	r30, r24
    388a:	f9 1f       	adc	r31, r25
    388c:	e5 52       	subi	r30, 0x25	; 37
    388e:	f7 4f       	sbci	r31, 0xF7	; 247
    3890:	81 81       	ldd	r24, Z+1	; 0x01
    3892:	84 17       	cp	r24, r20
    3894:	08 f5       	brcc	.+66     	; 0x38d8 <_ZN15OrangutanSerial4sendEhPch+0xea>
    3896:	82 2f       	mov	r24, r18
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	fc 01       	movw	r30, r24
    389c:	73 e0       	ldi	r23, 0x03	; 3
    389e:	ee 0f       	add	r30, r30
    38a0:	ff 1f       	adc	r31, r31
    38a2:	7a 95       	dec	r23
    38a4:	e1 f7       	brne	.-8      	; 0x389e <_ZN15OrangutanSerial4sendEhPch+0xb0>
    38a6:	88 0f       	add	r24, r24
    38a8:	99 1f       	adc	r25, r25
    38aa:	e8 0f       	add	r30, r24
    38ac:	f9 1f       	adc	r31, r25
    38ae:	e5 52       	subi	r30, 0x25	; 37
    38b0:	f7 4f       	sbci	r31, 0xF7	; 247
    38b2:	80 81       	ld	r24, Z
    38b4:	88 23       	and	r24, r24
    38b6:	81 f4       	brne	.+32     	; 0x38d8 <_ZN15OrangutanSerial4sendEhPch+0xea>
    38b8:	22 23       	and	r18, r18
    38ba:	19 f0       	breq	.+6      	; 0x38c2 <_ZN15OrangutanSerial4sendEhPch+0xd4>
    38bc:	e9 ec       	ldi	r30, 0xC9	; 201
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	02 c0       	rjmp	.+4      	; 0x38c6 <_ZN15OrangutanSerial4sendEhPch+0xd8>
    38c2:	e1 ec       	ldi	r30, 0xC1	; 193
    38c4:	f0 e0       	ldi	r31, 0x00	; 0
    38c6:	80 81       	ld	r24, Z
    38c8:	80 62       	ori	r24, 0x20	; 32
    38ca:	04 c0       	rjmp	.+8      	; 0x38d4 <_ZN15OrangutanSerial4sendEhPch+0xe6>
    38cc:	e9 ec       	ldi	r30, 0xC9	; 201
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	80 81       	ld	r24, Z
    38d2:	8f 7d       	andi	r24, 0xDF	; 223
    38d4:	80 83       	st	Z, r24
    38d6:	08 95       	ret
    38d8:	22 23       	and	r18, r18
    38da:	c1 f7       	brne	.-16     	; 0x38cc <_ZN15OrangutanSerial4sendEhPch+0xde>
    38dc:	e1 ec       	ldi	r30, 0xC1	; 193
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	f7 cf       	rjmp	.-18     	; 0x38d0 <_ZN15OrangutanSerial4sendEhPch+0xe2>
    38e2:	08 95       	ret

000038e4 <serial_send>:
    38e4:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <_ZN15OrangutanSerial4sendEhPch>
    38e8:	08 95       	ret

000038ea <__vector_21>:
    38ea:	1f 92       	push	r1
    38ec:	0f 92       	push	r0
    38ee:	0f b6       	in	r0, 0x3f	; 63
    38f0:	0f 92       	push	r0
    38f2:	0b b6       	in	r0, 0x3b	; 59
    38f4:	0f 92       	push	r0
    38f6:	11 24       	eor	r1, r1
    38f8:	2f 93       	push	r18
    38fa:	3f 93       	push	r19
    38fc:	4f 93       	push	r20
    38fe:	5f 93       	push	r21
    3900:	6f 93       	push	r22
    3902:	7f 93       	push	r23
    3904:	8f 93       	push	r24
    3906:	9f 93       	push	r25
    3908:	af 93       	push	r26
    390a:	bf 93       	push	r27
    390c:	ef 93       	push	r30
    390e:	ff 93       	push	r31
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	0e 94 23 1b 	call	0x3646	; 0x3646 <_ZN15OrangutanSerial11uart_tx_isrEh>
    3916:	ff 91       	pop	r31
    3918:	ef 91       	pop	r30
    391a:	bf 91       	pop	r27
    391c:	af 91       	pop	r26
    391e:	9f 91       	pop	r25
    3920:	8f 91       	pop	r24
    3922:	7f 91       	pop	r23
    3924:	6f 91       	pop	r22
    3926:	5f 91       	pop	r21
    3928:	4f 91       	pop	r20
    392a:	3f 91       	pop	r19
    392c:	2f 91       	pop	r18
    392e:	0f 90       	pop	r0
    3930:	0b be       	out	0x3b, r0	; 59
    3932:	0f 90       	pop	r0
    3934:	0f be       	out	0x3f, r0	; 63
    3936:	0f 90       	pop	r0
    3938:	1f 90       	pop	r1
    393a:	18 95       	reti

0000393c <__vector_29>:
    393c:	1f 92       	push	r1
    393e:	0f 92       	push	r0
    3940:	0f b6       	in	r0, 0x3f	; 63
    3942:	0f 92       	push	r0
    3944:	0b b6       	in	r0, 0x3b	; 59
    3946:	0f 92       	push	r0
    3948:	11 24       	eor	r1, r1
    394a:	2f 93       	push	r18
    394c:	3f 93       	push	r19
    394e:	4f 93       	push	r20
    3950:	5f 93       	push	r21
    3952:	6f 93       	push	r22
    3954:	7f 93       	push	r23
    3956:	8f 93       	push	r24
    3958:	9f 93       	push	r25
    395a:	af 93       	push	r26
    395c:	bf 93       	push	r27
    395e:	ef 93       	push	r30
    3960:	ff 93       	push	r31
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	0e 94 23 1b 	call	0x3646	; 0x3646 <_ZN15OrangutanSerial11uart_tx_isrEh>
    3968:	ff 91       	pop	r31
    396a:	ef 91       	pop	r30
    396c:	bf 91       	pop	r27
    396e:	af 91       	pop	r26
    3970:	9f 91       	pop	r25
    3972:	8f 91       	pop	r24
    3974:	7f 91       	pop	r23
    3976:	6f 91       	pop	r22
    3978:	5f 91       	pop	r21
    397a:	4f 91       	pop	r20
    397c:	3f 91       	pop	r19
    397e:	2f 91       	pop	r18
    3980:	0f 90       	pop	r0
    3982:	0b be       	out	0x3b, r0	; 59
    3984:	0f 90       	pop	r0
    3986:	0f be       	out	0x3f, r0	; 63
    3988:	0f 90       	pop	r0
    398a:	1f 90       	pop	r1
    398c:	18 95       	reti

0000398e <_ZN15OrangutanSerial15serial_tx_checkEh>:
    398e:	98 2f       	mov	r25, r24
    3990:	82 30       	cpi	r24, 0x02	; 2
    3992:	71 f0       	breq	.+28     	; 0x39b0 <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    3994:	88 23       	and	r24, r24
    3996:	19 f0       	breq	.+6      	; 0x399e <_ZN15OrangutanSerial15serial_tx_checkEh+0x10>
    3998:	e9 ec       	ldi	r30, 0xC9	; 201
    399a:	f0 e0       	ldi	r31, 0x00	; 0
    399c:	02 c0       	rjmp	.+4      	; 0x39a2 <_ZN15OrangutanSerial15serial_tx_checkEh+0x14>
    399e:	e1 ec       	ldi	r30, 0xC1	; 193
    39a0:	f0 e0       	ldi	r31, 0x00	; 0
    39a2:	80 81       	ld	r24, Z
    39a4:	8f 7d       	andi	r24, 0xDF	; 223
    39a6:	80 83       	st	Z, r24
    39a8:	89 2f       	mov	r24, r25
    39aa:	0e 94 23 1b 	call	0x3646	; 0x3646 <_ZN15OrangutanSerial11uart_tx_isrEh>
    39ae:	08 95       	ret
    39b0:	e0 91 f5 08 	lds	r30, 0x08F5
    39b4:	f0 91 f6 08 	lds	r31, 0x08F6
    39b8:	30 97       	sbiw	r30, 0x00	; 0
    39ba:	b1 f0       	breq	.+44     	; 0x39e8 <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    39bc:	90 91 f0 08 	lds	r25, 0x08F0
    39c0:	80 91 f2 08 	lds	r24, 0x08F2
    39c4:	98 17       	cp	r25, r24
    39c6:	80 f4       	brcc	.+32     	; 0x39e8 <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    39c8:	06 c0       	rjmp	.+12     	; 0x39d6 <_ZN15OrangutanSerial15serial_tx_checkEh+0x48>
    39ca:	80 91 f0 08 	lds	r24, 0x08F0
    39ce:	8f 5f       	subi	r24, 0xFF	; 255
    39d0:	80 93 f0 08 	sts	0x08F0, r24
    39d4:	ed cf       	rjmp	.-38     	; 0x39b0 <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    39d6:	80 91 f0 08 	lds	r24, 0x08F0
    39da:	e8 0f       	add	r30, r24
    39dc:	f1 1d       	adc	r31, r1
    39de:	80 81       	ld	r24, Z
    39e0:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN12OrangutanSVP17serialSendIfReadyEc>
    39e4:	88 23       	and	r24, r24
    39e6:	89 f7       	brne	.-30     	; 0x39ca <_ZN15OrangutanSerial15serial_tx_checkEh+0x3c>
    39e8:	08 95       	ret

000039ea <_ZN15OrangutanSerial15serial_rx_checkEh>:
    39ea:	0f 93       	push	r16
    39ec:	1f 93       	push	r17
    39ee:	cf 93       	push	r28
    39f0:	df 93       	push	r29
    39f2:	68 2f       	mov	r22, r24
    39f4:	82 30       	cpi	r24, 0x02	; 2
    39f6:	09 f4       	brne	.+2      	; 0x39fa <_ZN15OrangutanSerial15serial_rx_checkEh+0x10>
    39f8:	9c c0       	rjmp	.+312    	; 0x3b32 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    39fa:	88 23       	and	r24, r24
    39fc:	19 f0       	breq	.+6      	; 0x3a04 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1a>
    39fe:	e9 ec       	ldi	r30, 0xC9	; 201
    3a00:	f0 e0       	ldi	r31, 0x00	; 0
    3a02:	02 c0       	rjmp	.+4      	; 0x3a08 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1e>
    3a04:	e1 ec       	ldi	r30, 0xC1	; 193
    3a06:	f0 e0       	ldi	r31, 0x00	; 0
    3a08:	80 81       	ld	r24, Z
    3a0a:	8f 77       	andi	r24, 0x7F	; 127
    3a0c:	80 83       	st	Z, r24
    3a0e:	46 2f       	mov	r20, r22
    3a10:	50 e0       	ldi	r21, 0x00	; 0
    3a12:	da 01       	movw	r26, r20
    3a14:	aa 0f       	add	r26, r26
    3a16:	bb 1f       	adc	r27, r27
    3a18:	ca 01       	movw	r24, r20
    3a1a:	23 e0       	ldi	r18, 0x03	; 3
    3a1c:	88 0f       	add	r24, r24
    3a1e:	99 1f       	adc	r25, r25
    3a20:	2a 95       	dec	r18
    3a22:	e1 f7       	brne	.-8      	; 0x3a1c <_ZN15OrangutanSerial15serial_rx_checkEh+0x32>
    3a24:	a8 0f       	add	r26, r24
    3a26:	b9 1f       	adc	r27, r25
    3a28:	a5 52       	subi	r26, 0x25	; 37
    3a2a:	b7 4f       	sbci	r27, 0xF7	; 247
    3a2c:	18 96       	adiw	r26, 0x08	; 8
    3a2e:	cd 91       	ld	r28, X+
    3a30:	dc 91       	ld	r29, X
    3a32:	19 97       	sbiw	r26, 0x09	; 9
    3a34:	20 97       	sbiw	r28, 0x00	; 0
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <_ZN15OrangutanSerial15serial_rx_checkEh+0x50>
    3a38:	5a c0       	rjmp	.+180    	; 0x3aee <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3a3a:	fa 01       	movw	r30, r20
    3a3c:	ee 0f       	add	r30, r30
    3a3e:	ff 1f       	adc	r31, r31
    3a40:	ee 0f       	add	r30, r30
    3a42:	ff 1f       	adc	r31, r31
    3a44:	e4 0f       	add	r30, r20
    3a46:	f5 1f       	adc	r31, r21
    3a48:	ee 0f       	add	r30, r30
    3a4a:	ff 1f       	adc	r31, r31
    3a4c:	e3 52       	subi	r30, 0x23	; 35
    3a4e:	f7 4f       	sbci	r31, 0xF7	; 247
    3a50:	80 81       	ld	r24, Z
    3a52:	14 96       	adiw	r26, 0x04	; 4
    3a54:	2c 91       	ld	r18, X
    3a56:	82 17       	cp	r24, r18
    3a58:	08 f0       	brcs	.+2      	; 0x3a5c <_ZN15OrangutanSerial15serial_rx_checkEh+0x72>
    3a5a:	49 c0       	rjmp	.+146    	; 0x3aee <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3a5c:	66 23       	and	r22, r22
    3a5e:	19 f0       	breq	.+6      	; 0x3a66 <_ZN15OrangutanSerial15serial_rx_checkEh+0x7c>
    3a60:	e8 ec       	ldi	r30, 0xC8	; 200
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	02 c0       	rjmp	.+4      	; 0x3a6a <_ZN15OrangutanSerial15serial_rx_checkEh+0x80>
    3a66:	e0 ec       	ldi	r30, 0xC0	; 192
    3a68:	f0 e0       	ldi	r31, 0x00	; 0
    3a6a:	80 81       	ld	r24, Z
    3a6c:	87 ff       	sbrs	r24, 7
    3a6e:	3f c0       	rjmp	.+126    	; 0x3aee <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3a70:	66 23       	and	r22, r22
    3a72:	19 f4       	brne	.+6      	; 0x3a7a <_ZN15OrangutanSerial15serial_rx_checkEh+0x90>
    3a74:	e6 ec       	ldi	r30, 0xC6	; 198
    3a76:	f0 e0       	ldi	r31, 0x00	; 0
    3a78:	02 c0       	rjmp	.+4      	; 0x3a7e <_ZN15OrangutanSerial15serial_rx_checkEh+0x94>
    3a7a:	ee ec       	ldi	r30, 0xCE	; 206
    3a7c:	f0 e0       	ldi	r31, 0x00	; 0
    3a7e:	90 81       	ld	r25, Z
    3a80:	fa 01       	movw	r30, r20
    3a82:	ee 0f       	add	r30, r30
    3a84:	ff 1f       	adc	r31, r31
    3a86:	ee 0f       	add	r30, r30
    3a88:	ff 1f       	adc	r31, r31
    3a8a:	e4 0f       	add	r30, r20
    3a8c:	f5 1f       	adc	r31, r21
    3a8e:	ee 0f       	add	r30, r30
    3a90:	ff 1f       	adc	r31, r31
    3a92:	e3 52       	subi	r30, 0x23	; 35
    3a94:	f7 4f       	sbci	r31, 0xF7	; 247
    3a96:	80 81       	ld	r24, Z
    3a98:	82 17       	cp	r24, r18
    3a9a:	38 f4       	brcc	.+14     	; 0x3aaa <_ZN15OrangutanSerial15serial_rx_checkEh+0xc0>
    3a9c:	80 81       	ld	r24, Z
    3a9e:	c8 0f       	add	r28, r24
    3aa0:	d1 1d       	adc	r29, r1
    3aa2:	98 83       	st	Y, r25
    3aa4:	80 81       	ld	r24, Z
    3aa6:	8f 5f       	subi	r24, 0xFF	; 255
    3aa8:	80 83       	st	Z, r24
    3aaa:	fa 01       	movw	r30, r20
    3aac:	ee 0f       	add	r30, r30
    3aae:	ff 1f       	adc	r31, r31
    3ab0:	ee 0f       	add	r30, r30
    3ab2:	ff 1f       	adc	r31, r31
    3ab4:	e4 0f       	add	r30, r20
    3ab6:	f5 1f       	adc	r31, r21
    3ab8:	ee 0f       	add	r30, r30
    3aba:	ff 1f       	adc	r31, r31
    3abc:	e3 52       	subi	r30, 0x23	; 35
    3abe:	f7 4f       	sbci	r31, 0xF7	; 247
    3ac0:	80 81       	ld	r24, Z
    3ac2:	da 01       	movw	r26, r20
    3ac4:	aa 0f       	add	r26, r26
    3ac6:	bb 1f       	adc	r27, r27
    3ac8:	9a 01       	movw	r18, r20
    3aca:	13 e0       	ldi	r17, 0x03	; 3
    3acc:	22 0f       	add	r18, r18
    3ace:	33 1f       	adc	r19, r19
    3ad0:	1a 95       	dec	r17
    3ad2:	e1 f7       	brne	.-8      	; 0x3acc <_ZN15OrangutanSerial15serial_rx_checkEh+0xe2>
    3ad4:	a2 0f       	add	r26, r18
    3ad6:	b3 1f       	adc	r27, r19
    3ad8:	a5 52       	subi	r26, 0x25	; 37
    3ada:	b7 4f       	sbci	r27, 0xF7	; 247
    3adc:	14 96       	adiw	r26, 0x04	; 4
    3ade:	9c 91       	ld	r25, X
    3ae0:	14 97       	sbiw	r26, 0x04	; 4
    3ae2:	89 17       	cp	r24, r25
    3ae4:	21 f4       	brne	.+8      	; 0x3aee <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3ae6:	15 96       	adiw	r26, 0x05	; 5
    3ae8:	8c 91       	ld	r24, X
    3aea:	81 11       	cpse	r24, r1
    3aec:	10 82       	st	Z, r1
    3aee:	fa 01       	movw	r30, r20
    3af0:	a3 e0       	ldi	r26, 0x03	; 3
    3af2:	ee 0f       	add	r30, r30
    3af4:	ff 1f       	adc	r31, r31
    3af6:	aa 95       	dec	r26
    3af8:	e1 f7       	brne	.-8      	; 0x3af2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x108>
    3afa:	44 0f       	add	r20, r20
    3afc:	55 1f       	adc	r21, r21
    3afe:	e4 0f       	add	r30, r20
    3b00:	f5 1f       	adc	r31, r21
    3b02:	e5 52       	subi	r30, 0x25	; 37
    3b04:	f7 4f       	sbci	r31, 0xF7	; 247
    3b06:	80 81       	ld	r24, Z
    3b08:	88 23       	and	r24, r24
    3b0a:	09 f0       	breq	.+2      	; 0x3b0e <_ZN15OrangutanSerial15serial_rx_checkEh+0x124>
    3b0c:	59 c0       	rjmp	.+178    	; 0x3bc0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3b0e:	66 23       	and	r22, r22
    3b10:	19 f0       	breq	.+6      	; 0x3b18 <_ZN15OrangutanSerial15serial_rx_checkEh+0x12e>
    3b12:	e9 ec       	ldi	r30, 0xC9	; 201
    3b14:	f0 e0       	ldi	r31, 0x00	; 0
    3b16:	02 c0       	rjmp	.+4      	; 0x3b1c <_ZN15OrangutanSerial15serial_rx_checkEh+0x132>
    3b18:	e1 ec       	ldi	r30, 0xC1	; 193
    3b1a:	f0 e0       	ldi	r31, 0x00	; 0
    3b1c:	80 81       	ld	r24, Z
    3b1e:	80 68       	ori	r24, 0x80	; 128
    3b20:	80 83       	st	Z, r24
    3b22:	4e c0       	rjmp	.+156    	; 0x3bc0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3b24:	80 91 f4 08 	lds	r24, 0x08F4
    3b28:	88 23       	and	r24, r24
    3b2a:	19 f0       	breq	.+6      	; 0x3b32 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    3b2c:	10 92 f1 08 	sts	0x08F1, r1
    3b30:	47 c0       	rjmp	.+142    	; 0x3bc0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3b32:	80 91 f7 08 	lds	r24, 0x08F7
    3b36:	90 91 f8 08 	lds	r25, 0x08F8
    3b3a:	89 2b       	or	r24, r25
    3b3c:	09 f4       	brne	.+2      	; 0x3b40 <_ZN15OrangutanSerial15serial_rx_checkEh+0x156>
    3b3e:	40 c0       	rjmp	.+128    	; 0x3bc0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3b40:	90 91 f1 08 	lds	r25, 0x08F1
    3b44:	80 91 f3 08 	lds	r24, 0x08F3
    3b48:	98 17       	cp	r25, r24
    3b4a:	d0 f5       	brcc	.+116    	; 0x3bc0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3b4c:	80 91 15 09 	lds	r24, 0x0915
    3b50:	88 23       	and	r24, r24
    3b52:	a9 f4       	brne	.+42     	; 0x3b7e <_ZN15OrangutanSerial15serial_rx_checkEh+0x194>
    3b54:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <_ZN12OrangutanSVP15serialReadStartEv>
    3b58:	80 93 15 09 	sts	0x0915, r24
    3b5c:	10 e0       	ldi	r17, 0x00	; 0
    3b5e:	0b c0       	rjmp	.+22     	; 0x3b76 <_ZN15OrangutanSerial15serial_rx_checkEh+0x18c>
    3b60:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN12OrangutanSVP11getNextByteEv>
    3b64:	e0 2f       	mov	r30, r16
    3b66:	f0 e0       	ldi	r31, 0x00	; 0
    3b68:	31 97       	sbiw	r30, 0x01	; 1
    3b6a:	e1 1b       	sub	r30, r17
    3b6c:	f1 09       	sbc	r31, r1
    3b6e:	ea 5e       	subi	r30, 0xEA	; 234
    3b70:	f6 4f       	sbci	r31, 0xF6	; 246
    3b72:	80 83       	st	Z, r24
    3b74:	1f 5f       	subi	r17, 0xFF	; 255
    3b76:	00 91 15 09 	lds	r16, 0x0915
    3b7a:	10 17       	cp	r17, r16
    3b7c:	88 f3       	brcs	.-30     	; 0x3b60 <_ZN15OrangutanSerial15serial_rx_checkEh+0x176>
    3b7e:	e0 91 15 09 	lds	r30, 0x0915
    3b82:	ee 23       	and	r30, r30
    3b84:	e9 f0       	breq	.+58     	; 0x3bc0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3b86:	80 91 f1 08 	lds	r24, 0x08F1
    3b8a:	a0 91 f7 08 	lds	r26, 0x08F7
    3b8e:	b0 91 f8 08 	lds	r27, 0x08F8
    3b92:	a8 0f       	add	r26, r24
    3b94:	b1 1d       	adc	r27, r1
    3b96:	e1 50       	subi	r30, 0x01	; 1
    3b98:	e0 93 15 09 	sts	0x0915, r30
    3b9c:	f0 e0       	ldi	r31, 0x00	; 0
    3b9e:	ea 5e       	subi	r30, 0xEA	; 234
    3ba0:	f6 4f       	sbci	r31, 0xF6	; 246
    3ba2:	80 81       	ld	r24, Z
    3ba4:	8c 93       	st	X, r24
    3ba6:	80 91 f1 08 	lds	r24, 0x08F1
    3baa:	8f 5f       	subi	r24, 0xFF	; 255
    3bac:	80 93 f1 08 	sts	0x08F1, r24
    3bb0:	90 91 f1 08 	lds	r25, 0x08F1
    3bb4:	80 91 f3 08 	lds	r24, 0x08F3
    3bb8:	98 17       	cp	r25, r24
    3bba:	09 f0       	breq	.+2      	; 0x3bbe <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d4>
    3bbc:	ba cf       	rjmp	.-140    	; 0x3b32 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    3bbe:	b2 cf       	rjmp	.-156    	; 0x3b24 <_ZN15OrangutanSerial15serial_rx_checkEh+0x13a>
    3bc0:	df 91       	pop	r29
    3bc2:	cf 91       	pop	r28
    3bc4:	1f 91       	pop	r17
    3bc6:	0f 91       	pop	r16
    3bc8:	08 95       	ret

00003bca <_ZN15OrangutanSerial5checkEv>:
    3bca:	80 e0       	ldi	r24, 0x00	; 0
    3bcc:	0e 94 c7 1c 	call	0x398e	; 0x398e <_ZN15OrangutanSerial15serial_tx_checkEh>
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	0e 94 c7 1c 	call	0x398e	; 0x398e <_ZN15OrangutanSerial15serial_tx_checkEh>
    3bd6:	82 e0       	ldi	r24, 0x02	; 2
    3bd8:	0e 94 c7 1c 	call	0x398e	; 0x398e <_ZN15OrangutanSerial15serial_tx_checkEh>
    3bdc:	80 e0       	ldi	r24, 0x00	; 0
    3bde:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <_ZN15OrangutanSerial15serial_rx_checkEh>
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <_ZN15OrangutanSerial15serial_rx_checkEh>
    3be8:	82 e0       	ldi	r24, 0x02	; 2
    3bea:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <_ZN15OrangutanSerial15serial_rx_checkEh>
    3bee:	08 95       	ret

00003bf0 <_ZN15OrangutanSerial12sendBlockingEhPch>:
    3bf0:	1f 93       	push	r17
    3bf2:	18 2f       	mov	r17, r24
    3bf4:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <_ZN15OrangutanSerial4sendEhPch>
    3bf8:	02 c0       	rjmp	.+4      	; 0x3bfe <_ZN15OrangutanSerial12sendBlockingEhPch+0xe>
    3bfa:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <_ZN15OrangutanSerial5checkEv>
    3bfe:	81 2f       	mov	r24, r17
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	fc 01       	movw	r30, r24
    3c04:	73 e0       	ldi	r23, 0x03	; 3
    3c06:	ee 0f       	add	r30, r30
    3c08:	ff 1f       	adc	r31, r31
    3c0a:	7a 95       	dec	r23
    3c0c:	e1 f7       	brne	.-8      	; 0x3c06 <_ZN15OrangutanSerial12sendBlockingEhPch+0x16>
    3c0e:	88 0f       	add	r24, r24
    3c10:	99 1f       	adc	r25, r25
    3c12:	e8 0f       	add	r30, r24
    3c14:	f9 1f       	adc	r31, r25
    3c16:	e5 52       	subi	r30, 0x25	; 37
    3c18:	f7 4f       	sbci	r31, 0xF7	; 247
    3c1a:	21 81       	ldd	r18, Z+1	; 0x01
    3c1c:	81 2f       	mov	r24, r17
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	fc 01       	movw	r30, r24
    3c22:	53 e0       	ldi	r21, 0x03	; 3
    3c24:	ee 0f       	add	r30, r30
    3c26:	ff 1f       	adc	r31, r31
    3c28:	5a 95       	dec	r21
    3c2a:	e1 f7       	brne	.-8      	; 0x3c24 <_ZN15OrangutanSerial12sendBlockingEhPch+0x34>
    3c2c:	88 0f       	add	r24, r24
    3c2e:	99 1f       	adc	r25, r25
    3c30:	e8 0f       	add	r30, r24
    3c32:	f9 1f       	adc	r31, r25
    3c34:	e5 52       	subi	r30, 0x25	; 37
    3c36:	f7 4f       	sbci	r31, 0xF7	; 247
    3c38:	83 81       	ldd	r24, Z+3	; 0x03
    3c3a:	28 17       	cp	r18, r24
    3c3c:	f1 f6       	brne	.-68     	; 0x3bfa <_ZN15OrangutanSerial12sendBlockingEhPch+0xa>
    3c3e:	1f 91       	pop	r17
    3c40:	08 95       	ret

00003c42 <serial_send_blocking>:
    3c42:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <_ZN15OrangutanSerial12sendBlockingEhPch>
    3c46:	08 95       	ret

00003c48 <_ZN15OrangutanSerial15receiveBlockingEhPchj>:
    3c48:	a0 e0       	ldi	r26, 0x00	; 0
    3c4a:	b0 e0       	ldi	r27, 0x00	; 0
    3c4c:	ea e2       	ldi	r30, 0x2A	; 42
    3c4e:	fe e1       	ldi	r31, 0x1E	; 30
    3c50:	0c 94 6d 21 	jmp	0x42da	; 0x42da <__prologue_saves__+0xc>
    3c54:	08 2f       	mov	r16, r24
    3c56:	79 01       	movw	r14, r18
    3c58:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN15OrangutanSerial7receiveEhPch>
    3c5c:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <get_ms>
    3c60:	4b 01       	movw	r8, r22
    3c62:	5c 01       	movw	r10, r24
    3c64:	10 e0       	ldi	r17, 0x00	; 0
    3c66:	e8 01       	movw	r28, r16
    3c68:	cc 0f       	add	r28, r28
    3c6a:	dd 1f       	adc	r29, r29
    3c6c:	cc 0f       	add	r28, r28
    3c6e:	dd 1f       	adc	r29, r29
    3c70:	c0 0f       	add	r28, r16
    3c72:	d1 1f       	adc	r29, r17
    3c74:	cc 0f       	add	r28, r28
    3c76:	dd 1f       	adc	r29, r29
    3c78:	c3 52       	subi	r28, 0x23	; 35
    3c7a:	d7 4f       	sbci	r29, 0xF7	; 247
    3c7c:	68 01       	movw	r12, r16
    3c7e:	f3 e0       	ldi	r31, 0x03	; 3
    3c80:	cc 0c       	add	r12, r12
    3c82:	dd 1c       	adc	r13, r13
    3c84:	fa 95       	dec	r31
    3c86:	e1 f7       	brne	.-8      	; 0x3c80 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x38>
    3c88:	00 0f       	add	r16, r16
    3c8a:	11 1f       	adc	r17, r17
    3c8c:	c0 0e       	add	r12, r16
    3c8e:	d1 1e       	adc	r13, r17
    3c90:	8f ed       	ldi	r24, 0xDF	; 223
    3c92:	98 e0       	ldi	r25, 0x08	; 8
    3c94:	c8 0e       	add	r12, r24
    3c96:	d9 1e       	adc	r13, r25
    3c98:	00 e0       	ldi	r16, 0x00	; 0
    3c9a:	10 e0       	ldi	r17, 0x00	; 0
    3c9c:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <_ZN15OrangutanSerial5checkEv>
    3ca0:	98 81       	ld	r25, Y
    3ca2:	f6 01       	movw	r30, r12
    3ca4:	80 81       	ld	r24, Z
    3ca6:	98 17       	cp	r25, r24
    3ca8:	11 f4       	brne	.+4      	; 0x3cae <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x66>
    3caa:	80 e0       	ldi	r24, 0x00	; 0
    3cac:	0c c0       	rjmp	.+24     	; 0x3cc6 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x7e>
    3cae:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <get_ms>
    3cb2:	68 19       	sub	r22, r8
    3cb4:	79 09       	sbc	r23, r9
    3cb6:	8a 09       	sbc	r24, r10
    3cb8:	9b 09       	sbc	r25, r11
    3cba:	6e 15       	cp	r22, r14
    3cbc:	7f 05       	cpc	r23, r15
    3cbe:	80 07       	cpc	r24, r16
    3cc0:	91 07       	cpc	r25, r17
    3cc2:	60 f3       	brcs	.-40     	; 0x3c9c <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x54>
    3cc4:	81 e0       	ldi	r24, 0x01	; 1
    3cc6:	cd b7       	in	r28, 0x3d	; 61
    3cc8:	de b7       	in	r29, 0x3e	; 62
    3cca:	ec e0       	ldi	r30, 0x0C	; 12
    3ccc:	0c 94 89 21 	jmp	0x4312	; 0x4312 <__epilogue_restores__+0xc>

00003cd0 <serial_receive_blocking>:
    3cd0:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <_ZN15OrangutanSerial15receiveBlockingEhPchj>
    3cd4:	08 95       	ret

00003cd6 <serial_check>:
    3cd6:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <_ZN15OrangutanSerial5checkEv>
    3cda:	08 95       	ret

00003cdc <__vector_11>:
    3cdc:	2f 92       	push	r2
    3cde:	8f 93       	push	r24
    3ce0:	9f 93       	push	r25
    3ce2:	2f b6       	in	r2, 0x3f	; 63
    3ce4:	80 91 1f 09 	lds	r24, 0x091F
    3ce8:	90 91 20 09 	lds	r25, 0x0920
    3cec:	01 96       	adiw	r24, 0x01	; 1
    3cee:	80 93 1f 09 	sts	0x091F, r24
    3cf2:	90 93 20 09 	sts	0x0920, r25
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	80 91 21 09 	lds	r24, 0x0921
    3cfc:	89 1f       	adc	r24, r25
    3cfe:	80 93 21 09 	sts	0x0921, r24
    3d02:	90 91 27 09 	lds	r25, 0x0927
    3d06:	9c 5f       	subi	r25, 0xFC	; 252
    3d08:	90 93 27 09 	sts	0x0927, r25
    3d0c:	80 91 26 09 	lds	r24, 0x0926
    3d10:	80 51       	subi	r24, 0x10	; 16
    3d12:	97 42       	sbci	r25, 0x27	; 39
    3d14:	c0 f0       	brcs	.+48     	; 0x3d46 <end>
    3d16:	90 93 27 09 	sts	0x0927, r25
    3d1a:	80 93 26 09 	sts	0x0926, r24
    3d1e:	80 91 22 09 	lds	r24, 0x0922
    3d22:	90 91 23 09 	lds	r25, 0x0923
    3d26:	01 96       	adiw	r24, 0x01	; 1
    3d28:	80 93 22 09 	sts	0x0922, r24
    3d2c:	90 93 23 09 	sts	0x0923, r25
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	80 91 24 09 	lds	r24, 0x0924
    3d36:	89 1f       	adc	r24, r25
    3d38:	80 93 24 09 	sts	0x0924, r24
    3d3c:	80 91 25 09 	lds	r24, 0x0925
    3d40:	89 1f       	adc	r24, r25
    3d42:	80 93 25 09 	sts	0x0925, r24

00003d46 <end>:
    3d46:	2f be       	out	0x3f, r2	; 63
    3d48:	9f 91       	pop	r25
    3d4a:	8f 91       	pop	r24
    3d4c:	2f 90       	pop	r2
    3d4e:	18 95       	reti

00003d50 <ticks_to_microseconds>:
    3d50:	6f 5f       	subi	r22, 0xFF	; 255
    3d52:	7f 4f       	sbci	r23, 0xFF	; 255
    3d54:	8f 4f       	sbci	r24, 0xFF	; 255
    3d56:	9f 4f       	sbci	r25, 0xFF	; 255
    3d58:	66 0f       	add	r22, r22
    3d5a:	77 1f       	adc	r23, r23
    3d5c:	88 1f       	adc	r24, r24
    3d5e:	99 1f       	adc	r25, r25
    3d60:	25 e0       	ldi	r18, 0x05	; 5
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	40 e0       	ldi	r20, 0x00	; 0
    3d66:	50 e0       	ldi	r21, 0x00	; 0
    3d68:	0e 94 45 21 	call	0x428a	; 0x428a <__udivmodsi4>
    3d6c:	ca 01       	movw	r24, r20
    3d6e:	b9 01       	movw	r22, r18
    3d70:	08 95       	ret

00003d72 <delay_ms>:
    3d72:	28 ee       	ldi	r18, 0xE8	; 232
    3d74:	33 e0       	ldi	r19, 0x03	; 3
    3d76:	09 c0       	rjmp	.+18     	; 0x3d8a <delay_ms+0x18>
    3d78:	f9 01       	movw	r30, r18
    3d7a:	6f 93       	push	r22
    3d7c:	64 e0       	ldi	r22, 0x04	; 4
    3d7e:	6a 95       	dec	r22
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <delay_ms+0xc>
    3d82:	6f 91       	pop	r22
    3d84:	31 97       	sbiw	r30, 0x01	; 1
    3d86:	c9 f7       	brne	.-14     	; 0x3d7a <delay_ms+0x8>
    3d88:	01 97       	sbiw	r24, 0x01	; 1
    3d8a:	00 97       	sbiw	r24, 0x00	; 0
    3d8c:	a9 f7       	brne	.-22     	; 0x3d78 <delay_ms+0x6>
    3d8e:	08 95       	ret

00003d90 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    3d90:	6f 5f       	subi	r22, 0xFF	; 255
    3d92:	7f 4f       	sbci	r23, 0xFF	; 255
    3d94:	8f 4f       	sbci	r24, 0xFF	; 255
    3d96:	9f 4f       	sbci	r25, 0xFF	; 255
    3d98:	66 0f       	add	r22, r22
    3d9a:	77 1f       	adc	r23, r23
    3d9c:	88 1f       	adc	r24, r24
    3d9e:	99 1f       	adc	r25, r25
    3da0:	25 e0       	ldi	r18, 0x05	; 5
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	40 e0       	ldi	r20, 0x00	; 0
    3da6:	50 e0       	ldi	r21, 0x00	; 0
    3da8:	0e 94 45 21 	call	0x428a	; 0x428a <__udivmodsi4>
    3dac:	ca 01       	movw	r24, r20
    3dae:	b9 01       	movw	r22, r18
    3db0:	08 95       	ret

00003db2 <_ZN13OrangutanTime17delayMillisecondsEj>:
    3db2:	28 ee       	ldi	r18, 0xE8	; 232
    3db4:	33 e0       	ldi	r19, 0x03	; 3
    3db6:	09 c0       	rjmp	.+18     	; 0x3dca <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3db8:	f9 01       	movw	r30, r18
    3dba:	6f 93       	push	r22
    3dbc:	64 e0       	ldi	r22, 0x04	; 4
    3dbe:	6a 95       	dec	r22
    3dc0:	f1 f7       	brne	.-4      	; 0x3dbe <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3dc2:	6f 91       	pop	r22
    3dc4:	31 97       	sbiw	r30, 0x01	; 1
    3dc6:	c9 f7       	brne	.-14     	; 0x3dba <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3dc8:	01 97       	sbiw	r24, 0x01	; 1
    3dca:	00 97       	sbiw	r24, 0x00	; 0
    3dcc:	a9 f7       	brne	.-22     	; 0x3db8 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    3dce:	08 95       	ret

00003dd0 <_ZN13OrangutanTime5init2Ev>:
    3dd0:	a0 e7       	ldi	r26, 0x70	; 112
    3dd2:	b0 e0       	ldi	r27, 0x00	; 0
    3dd4:	8c 91       	ld	r24, X
    3dd6:	8e 7f       	andi	r24, 0xFE	; 254
    3dd8:	8c 93       	st	X, r24
    3dda:	e0 eb       	ldi	r30, 0xB0	; 176
    3ddc:	f0 e0       	ldi	r31, 0x00	; 0
    3dde:	80 81       	ld	r24, Z
    3de0:	83 60       	ori	r24, 0x03	; 3
    3de2:	80 83       	st	Z, r24
    3de4:	e1 eb       	ldi	r30, 0xB1	; 177
    3de6:	f0 e0       	ldi	r31, 0x00	; 0
    3de8:	80 81       	ld	r24, Z
    3dea:	80 7f       	andi	r24, 0xF0	; 240
    3dec:	80 83       	st	Z, r24
    3dee:	80 81       	ld	r24, Z
    3df0:	82 60       	ori	r24, 0x02	; 2
    3df2:	80 83       	st	Z, r24
    3df4:	b8 9a       	sbi	0x17, 0	; 23
    3df6:	8c 91       	ld	r24, X
    3df8:	81 60       	ori	r24, 0x01	; 1
    3dfa:	8c 93       	st	X, r24
    3dfc:	78 94       	sei
    3dfe:	08 95       	ret

00003e00 <_ZN13OrangutanTime4initEv>:
    3e00:	80 91 28 09 	lds	r24, 0x0928
    3e04:	88 23       	and	r24, r24
    3e06:	29 f4       	brne	.+10     	; 0x3e12 <_ZN13OrangutanTime4initEv+0x12>
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	80 93 28 09 	sts	0x0928, r24
    3e0e:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <_ZN13OrangutanTime5init2Ev>
    3e12:	08 95       	ret

00003e14 <_ZN13OrangutanTime2msEv>:
    3e14:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN13OrangutanTime4initEv>
    3e18:	e0 e7       	ldi	r30, 0x70	; 112
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	80 81       	ld	r24, Z
    3e1e:	8e 7f       	andi	r24, 0xFE	; 254
    3e20:	80 83       	st	Z, r24
    3e22:	20 91 22 09 	lds	r18, 0x0922
    3e26:	30 91 23 09 	lds	r19, 0x0923
    3e2a:	40 91 24 09 	lds	r20, 0x0924
    3e2e:	50 91 25 09 	lds	r21, 0x0925
    3e32:	80 81       	ld	r24, Z
    3e34:	81 60       	ori	r24, 0x01	; 1
    3e36:	80 83       	st	Z, r24
    3e38:	b9 01       	movw	r22, r18
    3e3a:	ca 01       	movw	r24, r20
    3e3c:	08 95       	ret

00003e3e <get_ms>:
    3e3e:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <_ZN13OrangutanTime2msEv>
    3e42:	08 95       	ret

00003e44 <_ZN13OrangutanTime5ticksEv>:
    3e44:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN13OrangutanTime4initEv>
    3e48:	80 91 70 00 	lds	r24, 0x0070
    3e4c:	8e 7f       	andi	r24, 0xFE	; 254
    3e4e:	80 93 70 00 	sts	0x0070, r24
    3e52:	60 91 b2 00 	lds	r22, 0x00B2
    3e56:	80 91 1e 09 	lds	r24, 0x091E
    3e5a:	90 91 1f 09 	lds	r25, 0x091F
    3e5e:	a0 91 20 09 	lds	r26, 0x0920
    3e62:	b0 91 21 09 	lds	r27, 0x0921
    3e66:	b8 99       	sbic	0x17, 0	; 23
    3e68:	05 c0       	rjmp	.+10     	; 0x3e74 <_ZN13OrangutanTime5ticksEv+0x30>
    3e6a:	26 2f       	mov	r18, r22
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	40 e0       	ldi	r20, 0x00	; 0
    3e70:	50 e0       	ldi	r21, 0x00	; 0
    3e72:	11 c0       	rjmp	.+34     	; 0x3e96 <_ZN13OrangutanTime5ticksEv+0x52>
    3e74:	80 91 b2 00 	lds	r24, 0x00B2
    3e78:	20 91 1e 09 	lds	r18, 0x091E
    3e7c:	30 91 1f 09 	lds	r19, 0x091F
    3e80:	40 91 20 09 	lds	r20, 0x0920
    3e84:	50 91 21 09 	lds	r21, 0x0921
    3e88:	20 50       	subi	r18, 0x00	; 0
    3e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e8c:	4f 4f       	sbci	r20, 0xFF	; 255
    3e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	a0 e0       	ldi	r26, 0x00	; 0
    3e94:	b0 e0       	ldi	r27, 0x00	; 0
    3e96:	28 2b       	or	r18, r24
    3e98:	39 2b       	or	r19, r25
    3e9a:	4a 2b       	or	r20, r26
    3e9c:	5b 2b       	or	r21, r27
    3e9e:	80 91 70 00 	lds	r24, 0x0070
    3ea2:	81 60       	ori	r24, 0x01	; 1
    3ea4:	80 93 70 00 	sts	0x0070, r24
    3ea8:	b9 01       	movw	r22, r18
    3eaa:	ca 01       	movw	r24, r20
    3eac:	08 95       	ret

00003eae <get_ticks>:
    3eae:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <_ZN13OrangutanTime5ticksEv>
    3eb2:	08 95       	ret

00003eb4 <_ZN13OrangutanTime5resetEv>:
    3eb4:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_ZN13OrangutanTime4initEv>
    3eb8:	e0 e7       	ldi	r30, 0x70	; 112
    3eba:	f0 e0       	ldi	r31, 0x00	; 0
    3ebc:	80 81       	ld	r24, Z
    3ebe:	8e 7f       	andi	r24, 0xFE	; 254
    3ec0:	80 83       	st	Z, r24
    3ec2:	10 92 22 09 	sts	0x0922, r1
    3ec6:	10 92 23 09 	sts	0x0923, r1
    3eca:	10 92 24 09 	sts	0x0924, r1
    3ece:	10 92 25 09 	sts	0x0925, r1
    3ed2:	10 92 27 09 	sts	0x0927, r1
    3ed6:	10 92 26 09 	sts	0x0926, r1
    3eda:	80 81       	ld	r24, Z
    3edc:	81 60       	ori	r24, 0x01	; 1
    3ede:	80 83       	st	Z, r24
    3ee0:	08 95       	ret

00003ee2 <time_reset>:
    3ee2:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <_ZN13OrangutanTime5resetEv>
    3ee6:	08 95       	ret

00003ee8 <_ZN12OrangutanSVP7setModeEh>:
    3ee8:	98 2f       	mov	r25, r24
    3eea:	80 91 3f 09 	lds	r24, 0x093F
    3eee:	89 17       	cp	r24, r25
    3ef0:	39 f0       	breq	.+14     	; 0x3f00 <_ZN12OrangutanSVP7setModeEh+0x18>
    3ef2:	90 93 3f 09 	sts	0x093F, r25
    3ef6:	89 2f       	mov	r24, r25
    3ef8:	80 6c       	ori	r24, 0xC0	; 192
    3efa:	65 e0       	ldi	r22, 0x05	; 5
    3efc:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3f00:	08 95       	ret

00003f02 <svp_set_mode>:
    3f02:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <_ZN12OrangutanSVP7setModeEh>
    3f06:	08 95       	ret

00003f08 <_ZN12OrangutanSVP17serialSendIfReadyEc>:
    3f08:	1f 93       	push	r17
    3f0a:	18 2f       	mov	r17, r24
    3f0c:	88 1f       	adc	r24, r24
    3f0e:	88 27       	eor	r24, r24
    3f10:	88 1f       	adc	r24, r24
    3f12:	8c 57       	subi	r24, 0x7C	; 124
    3f14:	65 e0       	ldi	r22, 0x05	; 5
    3f16:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3f1a:	81 2f       	mov	r24, r17
    3f1c:	8f 77       	andi	r24, 0x7F	; 127
    3f1e:	65 e0       	ldi	r22, 0x05	; 5
    3f20:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3f24:	1f 91       	pop	r17
    3f26:	08 95       	ret

00003f28 <_ZN12OrangutanSVP11getNextByteEv>:
    3f28:	8f ef       	ldi	r24, 0xFF	; 255
    3f2a:	64 e0       	ldi	r22, 0x04	; 4
    3f2c:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3f30:	08 95       	ret

00003f32 <_ZL23updateVariablesIfNeededv>:
    3f32:	cf 93       	push	r28
    3f34:	df 93       	push	r29
    3f36:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <_ZN13OrangutanTime2msEv>
    3f3a:	20 91 fd 08 	lds	r18, 0x08FD
    3f3e:	30 91 fe 08 	lds	r19, 0x08FE
    3f42:	40 91 ff 08 	lds	r20, 0x08FF
    3f46:	50 91 00 09 	lds	r21, 0x0900
    3f4a:	62 17       	cp	r22, r18
    3f4c:	73 07       	cpc	r23, r19
    3f4e:	84 07       	cpc	r24, r20
    3f50:	95 07       	cpc	r25, r21
    3f52:	b9 f0       	breq	.+46     	; 0x3f82 <_ZL23updateVariablesIfNeededv+0x50>
    3f54:	81 e8       	ldi	r24, 0x81	; 129
    3f56:	67 e0       	ldi	r22, 0x07	; 7
    3f58:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3f5c:	c2 e3       	ldi	r28, 0x32	; 50
    3f5e:	d9 e0       	ldi	r29, 0x09	; 9
    3f60:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN12OrangutanSVP11getNextByteEv>
    3f64:	89 93       	st	Y+, r24
    3f66:	89 e0       	ldi	r24, 0x09	; 9
    3f68:	cf 33       	cpi	r28, 0x3F	; 63
    3f6a:	d8 07       	cpc	r29, r24
    3f6c:	c9 f7       	brne	.-14     	; 0x3f60 <_ZL23updateVariablesIfNeededv+0x2e>
    3f6e:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <_ZN13OrangutanTime2msEv>
    3f72:	60 93 fd 08 	sts	0x08FD, r22
    3f76:	70 93 fe 08 	sts	0x08FE, r23
    3f7a:	80 93 ff 08 	sts	0x08FF, r24
    3f7e:	90 93 00 09 	sts	0x0900, r25
    3f82:	df 91       	pop	r29
    3f84:	cf 91       	pop	r28
    3f86:	08 95       	ret

00003f88 <_ZN12OrangutanSVP9getStatusEv>:
    3f88:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZL23updateVariablesIfNeededv>
    3f8c:	80 91 32 09 	lds	r24, 0x0932
    3f90:	08 95       	ret

00003f92 <svp_get_status>:
    3f92:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <_ZN12OrangutanSVP9getStatusEv>
    3f96:	08 95       	ret

00003f98 <_ZN12OrangutanSVP21getChannelDMillivoltsEv>:
    3f98:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZL23updateVariablesIfNeededv>
    3f9c:	80 91 39 09 	lds	r24, 0x0939
    3fa0:	90 91 3a 09 	lds	r25, 0x093A
    3fa4:	08 95       	ret

00003fa6 <_ZN12OrangutanSVP21getChannelCMillivoltsEv>:
    3fa6:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZL23updateVariablesIfNeededv>
    3faa:	80 91 37 09 	lds	r24, 0x0937
    3fae:	90 91 38 09 	lds	r25, 0x0938
    3fb2:	08 95       	ret

00003fb4 <_ZN12OrangutanSVP21getChannelBMillivoltsEv>:
    3fb4:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZL23updateVariablesIfNeededv>
    3fb8:	80 91 35 09 	lds	r24, 0x0935
    3fbc:	90 91 36 09 	lds	r25, 0x0936
    3fc0:	08 95       	ret

00003fc2 <_ZN12OrangutanSVP21getChannelAMillivoltsEv>:
    3fc2:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZL23updateVariablesIfNeededv>
    3fc6:	80 91 33 09 	lds	r24, 0x0933
    3fca:	90 91 34 09 	lds	r25, 0x0934
    3fce:	08 95       	ret

00003fd0 <_ZN12OrangutanSVP20getBatteryMillivoltsEv>:
    3fd0:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZL23updateVariablesIfNeededv>
    3fd4:	80 91 3d 09 	lds	r24, 0x093D
    3fd8:	90 91 3e 09 	lds	r25, 0x093E
    3fdc:	08 95       	ret

00003fde <_ZN12OrangutanSVP20getTrimpotMillivoltsEv>:
    3fde:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <_ZL23updateVariablesIfNeededv>
    3fe2:	80 91 3b 09 	lds	r24, 0x093B
    3fe6:	90 91 3c 09 	lds	r25, 0x093C
    3fea:	08 95       	ret

00003fec <_ZN12OrangutanSVP15serialReadStartEv>:
    3fec:	83 e8       	ldi	r24, 0x83	; 131
    3fee:	67 e0       	ldi	r22, 0x07	; 7
    3ff0:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3ff4:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN12OrangutanSVP11getNextByteEv>
    3ff8:	08 95       	ret

00003ffa <_Z14updateEncodersv>:
    3ffa:	a5 e0       	ldi	r26, 0x05	; 5
    3ffc:	b0 e0       	ldi	r27, 0x00	; 0
    3ffe:	e3 e0       	ldi	r30, 0x03	; 3
    4000:	f0 e2       	ldi	r31, 0x20	; 32
    4002:	0c 94 76 21 	jmp	0x42ec	; 0x42ec <__prologue_saves__+0x1e>
    4006:	82 e8       	ldi	r24, 0x82	; 130
    4008:	66 e0       	ldi	r22, 0x06	; 6
    400a:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    400e:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN12OrangutanSVP11getNextByteEv>
    4012:	80 93 2d 09 	sts	0x092D, r24
    4016:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN12OrangutanSVP11getNextByteEv>
    401a:	80 93 2e 09 	sts	0x092E, r24
    401e:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN12OrangutanSVP11getNextByteEv>
    4022:	80 93 2f 09 	sts	0x092F, r24
    4026:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN12OrangutanSVP11getNextByteEv>
    402a:	80 93 30 09 	sts	0x0930, r24
    402e:	10 91 31 09 	lds	r17, 0x0931
    4032:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN12OrangutanSVP11getNextByteEv>
    4036:	18 2b       	or	r17, r24
    4038:	10 93 31 09 	sts	0x0931, r17
    403c:	de 01       	movw	r26, r28
    403e:	11 96       	adiw	r26, 0x01	; 1
    4040:	ed e2       	ldi	r30, 0x2D	; 45
    4042:	f9 e0       	ldi	r31, 0x09	; 9
    4044:	85 e0       	ldi	r24, 0x05	; 5
    4046:	01 90       	ld	r0, Z+
    4048:	0d 92       	st	X+, r0
    404a:	81 50       	subi	r24, 0x01	; 1
    404c:	e1 f7       	brne	.-8      	; 0x4046 <_Z14updateEncodersv+0x4c>
    404e:	29 81       	ldd	r18, Y+1	; 0x01
    4050:	3a 81       	ldd	r19, Y+2	; 0x02
    4052:	4b 81       	ldd	r20, Y+3	; 0x03
    4054:	5c 81       	ldd	r21, Y+4	; 0x04
    4056:	6d 81       	ldd	r22, Y+5	; 0x05
    4058:	70 e0       	ldi	r23, 0x00	; 0
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	25 96       	adiw	r28, 0x05	; 5
    405e:	e3 e0       	ldi	r30, 0x03	; 3
    4060:	0c 94 92 21 	jmp	0x4324	; 0x4324 <__epilogue_restores__+0x1e>

00004064 <_ZL22updateEncodersIfNeededv>:
    4064:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <_ZN13OrangutanTime2msEv>
    4068:	20 91 f9 08 	lds	r18, 0x08F9
    406c:	30 91 fa 08 	lds	r19, 0x08FA
    4070:	40 91 fb 08 	lds	r20, 0x08FB
    4074:	50 91 fc 08 	lds	r21, 0x08FC
    4078:	62 17       	cp	r22, r18
    407a:	73 07       	cpc	r23, r19
    407c:	84 07       	cpc	r24, r20
    407e:	95 07       	cpc	r25, r21
    4080:	61 f0       	breq	.+24     	; 0x409a <_ZL22updateEncodersIfNeededv+0x36>
    4082:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <_Z14updateEncodersv>
    4086:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <_ZN13OrangutanTime2msEv>
    408a:	60 93 f9 08 	sts	0x08F9, r22
    408e:	70 93 fa 08 	sts	0x08FA, r23
    4092:	80 93 fb 08 	sts	0x08FB, r24
    4096:	90 93 fc 08 	sts	0x08FC, r25
    409a:	08 95       	ret

0000409c <_ZN12OrangutanSVP12checkErrorCDEv>:
    409c:	0e 94 32 20 	call	0x4064	; 0x4064 <_ZL22updateEncodersIfNeededv>
    40a0:	80 91 31 09 	lds	r24, 0x0931
    40a4:	81 fd       	sbrc	r24, 1
    40a6:	02 c0       	rjmp	.+4      	; 0x40ac <_ZN12OrangutanSVP12checkErrorCDEv+0x10>
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	08 95       	ret
    40ac:	8d 7f       	andi	r24, 0xFD	; 253
    40ae:	80 93 31 09 	sts	0x0931, r24
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	08 95       	ret

000040b6 <svp_check_error_cd>:
    40b6:	0e 94 4e 20 	call	0x409c	; 0x409c <_ZN12OrangutanSVP12checkErrorCDEv>
    40ba:	08 95       	ret

000040bc <_ZN12OrangutanSVP12checkErrorABEv>:
    40bc:	0e 94 32 20 	call	0x4064	; 0x4064 <_ZL22updateEncodersIfNeededv>
    40c0:	80 91 31 09 	lds	r24, 0x0931
    40c4:	80 fd       	sbrc	r24, 0
    40c6:	02 c0       	rjmp	.+4      	; 0x40cc <_ZN12OrangutanSVP12checkErrorABEv+0x10>
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	08 95       	ret
    40cc:	8e 7f       	andi	r24, 0xFE	; 254
    40ce:	80 93 31 09 	sts	0x0931, r24
    40d2:	81 e0       	ldi	r24, 0x01	; 1
    40d4:	08 95       	ret

000040d6 <svp_check_error_ab>:
    40d6:	0e 94 5e 20 	call	0x40bc	; 0x40bc <_ZN12OrangutanSVP12checkErrorABEv>
    40da:	08 95       	ret

000040dc <_ZN12OrangutanSVP11getCountsCDEv>:
    40dc:	0e 94 32 20 	call	0x4064	; 0x4064 <_ZL22updateEncodersIfNeededv>
    40e0:	20 91 2f 09 	lds	r18, 0x092F
    40e4:	30 91 30 09 	lds	r19, 0x0930
    40e8:	80 91 2b 09 	lds	r24, 0x092B
    40ec:	90 91 2c 09 	lds	r25, 0x092C
    40f0:	28 1b       	sub	r18, r24
    40f2:	39 0b       	sbc	r19, r25
    40f4:	c9 01       	movw	r24, r18
    40f6:	08 95       	ret

000040f8 <_ZN12OrangutanSVP19getCountsAndResetCDEv>:
    40f8:	0e 94 6e 20 	call	0x40dc	; 0x40dc <_ZN12OrangutanSVP11getCountsCDEv>
    40fc:	20 91 2f 09 	lds	r18, 0x092F
    4100:	30 91 30 09 	lds	r19, 0x0930
    4104:	30 93 2c 09 	sts	0x092C, r19
    4108:	20 93 2b 09 	sts	0x092B, r18
    410c:	08 95       	ret

0000410e <svp_get_counts_and_reset_cd>:
    410e:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <_ZN12OrangutanSVP19getCountsAndResetCDEv>
    4112:	08 95       	ret

00004114 <svp_get_counts_cd>:
    4114:	0e 94 6e 20 	call	0x40dc	; 0x40dc <_ZN12OrangutanSVP11getCountsCDEv>
    4118:	08 95       	ret

0000411a <_ZN12OrangutanSVP11getCountsABEv>:
    411a:	0e 94 32 20 	call	0x4064	; 0x4064 <_ZL22updateEncodersIfNeededv>
    411e:	20 91 2d 09 	lds	r18, 0x092D
    4122:	30 91 2e 09 	lds	r19, 0x092E
    4126:	80 91 29 09 	lds	r24, 0x0929
    412a:	90 91 2a 09 	lds	r25, 0x092A
    412e:	28 1b       	sub	r18, r24
    4130:	39 0b       	sbc	r19, r25
    4132:	c9 01       	movw	r24, r18
    4134:	08 95       	ret

00004136 <_ZN12OrangutanSVP19getCountsAndResetABEv>:
    4136:	0e 94 8d 20 	call	0x411a	; 0x411a <_ZN12OrangutanSVP11getCountsABEv>
    413a:	20 91 2d 09 	lds	r18, 0x092D
    413e:	30 91 2e 09 	lds	r19, 0x092E
    4142:	30 93 2a 09 	sts	0x092A, r19
    4146:	20 93 29 09 	sts	0x0929, r18
    414a:	08 95       	ret

0000414c <svp_get_counts_and_reset_ab>:
    414c:	0e 94 9b 20 	call	0x4136	; 0x4136 <_ZN12OrangutanSVP19getCountsAndResetABEv>
    4150:	08 95       	ret

00004152 <svp_get_counts_ab>:
    4152:	0e 94 8d 20 	call	0x411a	; 0x411a <_ZN12OrangutanSVP11getCountsABEv>
    4156:	08 95       	ret

00004158 <_ZN12OrangutanSVP18getFirmwareVersionEv>:
    4158:	80 e8       	ldi	r24, 0x80	; 128
    415a:	65 e0       	ldi	r22, 0x05	; 5
    415c:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    4160:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN12OrangutanSVP11getNextByteEv>
    4164:	08 95       	ret

00004166 <svp_get_firmware_version>:
    4166:	0e 94 ac 20 	call	0x4158	; 0x4158 <_ZN12OrangutanSVP18getFirmwareVersionEv>
    416a:	08 95       	ret

0000416c <_ZN18OrangutanSPIMaster4initEhh>:
    416c:	98 2f       	mov	r25, r24
    416e:	24 99       	sbic	0x04, 4	; 4
    4170:	0c c0       	rjmp	.+24     	; 0x418a <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    4172:	2c 99       	sbic	0x05, 4	; 5
    4174:	0a c0       	rjmp	.+20     	; 0x418a <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    4176:	2c 9a       	sbi	0x05, 4	; 5
    4178:	ee e1       	ldi	r30, 0x1E	; 30
    417a:	f0 e0       	ldi	r31, 0x00	; 0
    417c:	6f 93       	push	r22
    417e:	64 e0       	ldi	r22, 0x04	; 4
    4180:	6a 95       	dec	r22
    4182:	f1 f7       	brne	.-4      	; 0x4180 <_ZN18OrangutanSPIMaster4initEhh+0x14>
    4184:	6f 91       	pop	r22
    4186:	31 97       	sbiw	r30, 0x01	; 1
    4188:	c9 f7       	brne	.-14     	; 0x417c <_ZN18OrangutanSPIMaster4initEhh+0x10>
    418a:	84 b1       	in	r24, 0x04	; 4
    418c:	80 6a       	ori	r24, 0xA0	; 160
    418e:	84 b9       	out	0x04, r24	; 4
    4190:	26 98       	cbi	0x04, 6	; 4
    4192:	89 2f       	mov	r24, r25
    4194:	83 70       	andi	r24, 0x03	; 3
    4196:	80 65       	ori	r24, 0x50	; 80
    4198:	6c 7a       	andi	r22, 0xAC	; 172
    419a:	86 2b       	or	r24, r22
    419c:	8c bd       	out	0x2c, r24	; 44
    419e:	89 2f       	mov	r24, r25
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	96 95       	lsr	r25
    41a4:	87 95       	ror	r24
    41a6:	96 95       	lsr	r25
    41a8:	87 95       	ror	r24
    41aa:	81 70       	andi	r24, 0x01	; 1
    41ac:	8d bd       	out	0x2d, r24	; 45
    41ae:	81 e0       	ldi	r24, 0x01	; 1
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <_ZN13OrangutanTime17delayMillisecondsEj>
    41b6:	08 95       	ret

000041b8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>:
    41b8:	0f 93       	push	r16
    41ba:	1f 93       	push	r17
    41bc:	08 2f       	mov	r16, r24
    41be:	16 2f       	mov	r17, r22
    41c0:	0c b4       	in	r0, 0x2c	; 44
    41c2:	06 fc       	sbrc	r0, 6
    41c4:	04 c0       	rjmp	.+8      	; 0x41ce <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x16>
    41c6:	80 e0       	ldi	r24, 0x00	; 0
    41c8:	64 e0       	ldi	r22, 0x04	; 4
    41ca:	0e 94 b6 20 	call	0x416c	; 0x416c <_ZN18OrangutanSPIMaster4initEhh>
    41ce:	0c b4       	in	r0, 0x2c	; 44
    41d0:	04 fc       	sbrc	r0, 4
    41d2:	03 c0       	rjmp	.+6      	; 0x41da <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x22>
    41d4:	8c b5       	in	r24, 0x2c	; 44
    41d6:	80 61       	ori	r24, 0x10	; 16
    41d8:	8c bd       	out	0x2c, r24	; 44
    41da:	0e bd       	out	0x2e, r16	; 46
    41dc:	05 c0       	rjmp	.+10     	; 0x41e8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    41de:	0c b4       	in	r0, 0x2c	; 44
    41e0:	04 fc       	sbrc	r0, 4
    41e2:	02 c0       	rjmp	.+4      	; 0x41e8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    41e4:	80 e0       	ldi	r24, 0x00	; 0
    41e6:	0f c0       	rjmp	.+30     	; 0x4206 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4e>
    41e8:	0d b4       	in	r0, 0x2d	; 45
    41ea:	07 fe       	sbrs	r0, 7
    41ec:	f8 cf       	rjmp	.-16     	; 0x41de <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x26>
    41ee:	11 23       	and	r17, r17
    41f0:	49 f0       	breq	.+18     	; 0x4204 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4c>
    41f2:	81 2f       	mov	r24, r17
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	6f 93       	push	r22
    41f8:	64 e0       	ldi	r22, 0x04	; 4
    41fa:	6a 95       	dec	r22
    41fc:	f1 f7       	brne	.-4      	; 0x41fa <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x42>
    41fe:	6f 91       	pop	r22
    4200:	01 97       	sbiw	r24, 0x01	; 1
    4202:	c9 f7       	brne	.-14     	; 0x41f6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x3e>
    4204:	8e b5       	in	r24, 0x2e	; 46
    4206:	1f 91       	pop	r17
    4208:	0f 91       	pop	r16
    420a:	08 95       	ret

0000420c <_ZN18OrangutanSPIMaster8transmitEh>:
    420c:	60 e0       	ldi	r22, 0x00	; 0
    420e:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    4212:	08 95       	ret

00004214 <spi_master_transmit>:
    4214:	0e 94 06 21 	call	0x420c	; 0x420c <_ZN18OrangutanSPIMaster8transmitEh>
    4218:	08 95       	ret

0000421a <spi_master_transmit_and_delay>:
    421a:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    421e:	08 95       	ret

00004220 <spi_master_init>:
    4220:	0e 94 b6 20 	call	0x416c	; 0x416c <_ZN18OrangutanSPIMaster4initEhh>
    4224:	08 95       	ret

00004226 <__mulsi3>:
    4226:	62 9f       	mul	r22, r18
    4228:	d0 01       	movw	r26, r0
    422a:	73 9f       	mul	r23, r19
    422c:	f0 01       	movw	r30, r0
    422e:	82 9f       	mul	r24, r18
    4230:	e0 0d       	add	r30, r0
    4232:	f1 1d       	adc	r31, r1
    4234:	64 9f       	mul	r22, r20
    4236:	e0 0d       	add	r30, r0
    4238:	f1 1d       	adc	r31, r1
    423a:	92 9f       	mul	r25, r18
    423c:	f0 0d       	add	r31, r0
    423e:	83 9f       	mul	r24, r19
    4240:	f0 0d       	add	r31, r0
    4242:	74 9f       	mul	r23, r20
    4244:	f0 0d       	add	r31, r0
    4246:	65 9f       	mul	r22, r21
    4248:	f0 0d       	add	r31, r0
    424a:	99 27       	eor	r25, r25
    424c:	72 9f       	mul	r23, r18
    424e:	b0 0d       	add	r27, r0
    4250:	e1 1d       	adc	r30, r1
    4252:	f9 1f       	adc	r31, r25
    4254:	63 9f       	mul	r22, r19
    4256:	b0 0d       	add	r27, r0
    4258:	e1 1d       	adc	r30, r1
    425a:	f9 1f       	adc	r31, r25
    425c:	bd 01       	movw	r22, r26
    425e:	cf 01       	movw	r24, r30
    4260:	11 24       	eor	r1, r1
    4262:	08 95       	ret

00004264 <__divmodhi4>:
    4264:	97 fb       	bst	r25, 7
    4266:	09 2e       	mov	r0, r25
    4268:	07 26       	eor	r0, r23
    426a:	0a d0       	rcall	.+20     	; 0x4280 <__divmodhi4_neg1>
    426c:	77 fd       	sbrc	r23, 7
    426e:	04 d0       	rcall	.+8      	; 0x4278 <__divmodhi4_neg2>
    4270:	65 d0       	rcall	.+202    	; 0x433c <__udivmodhi4>
    4272:	06 d0       	rcall	.+12     	; 0x4280 <__divmodhi4_neg1>
    4274:	00 20       	and	r0, r0
    4276:	1a f4       	brpl	.+6      	; 0x427e <__divmodhi4_exit>

00004278 <__divmodhi4_neg2>:
    4278:	70 95       	com	r23
    427a:	61 95       	neg	r22
    427c:	7f 4f       	sbci	r23, 0xFF	; 255

0000427e <__divmodhi4_exit>:
    427e:	08 95       	ret

00004280 <__divmodhi4_neg1>:
    4280:	f6 f7       	brtc	.-4      	; 0x427e <__divmodhi4_exit>
    4282:	90 95       	com	r25
    4284:	81 95       	neg	r24
    4286:	9f 4f       	sbci	r25, 0xFF	; 255
    4288:	08 95       	ret

0000428a <__udivmodsi4>:
    428a:	a1 e2       	ldi	r26, 0x21	; 33
    428c:	1a 2e       	mov	r1, r26
    428e:	aa 1b       	sub	r26, r26
    4290:	bb 1b       	sub	r27, r27
    4292:	fd 01       	movw	r30, r26
    4294:	0d c0       	rjmp	.+26     	; 0x42b0 <__udivmodsi4_ep>

00004296 <__udivmodsi4_loop>:
    4296:	aa 1f       	adc	r26, r26
    4298:	bb 1f       	adc	r27, r27
    429a:	ee 1f       	adc	r30, r30
    429c:	ff 1f       	adc	r31, r31
    429e:	a2 17       	cp	r26, r18
    42a0:	b3 07       	cpc	r27, r19
    42a2:	e4 07       	cpc	r30, r20
    42a4:	f5 07       	cpc	r31, r21
    42a6:	20 f0       	brcs	.+8      	; 0x42b0 <__udivmodsi4_ep>
    42a8:	a2 1b       	sub	r26, r18
    42aa:	b3 0b       	sbc	r27, r19
    42ac:	e4 0b       	sbc	r30, r20
    42ae:	f5 0b       	sbc	r31, r21

000042b0 <__udivmodsi4_ep>:
    42b0:	66 1f       	adc	r22, r22
    42b2:	77 1f       	adc	r23, r23
    42b4:	88 1f       	adc	r24, r24
    42b6:	99 1f       	adc	r25, r25
    42b8:	1a 94       	dec	r1
    42ba:	69 f7       	brne	.-38     	; 0x4296 <__udivmodsi4_loop>
    42bc:	60 95       	com	r22
    42be:	70 95       	com	r23
    42c0:	80 95       	com	r24
    42c2:	90 95       	com	r25
    42c4:	9b 01       	movw	r18, r22
    42c6:	ac 01       	movw	r20, r24
    42c8:	bd 01       	movw	r22, r26
    42ca:	cf 01       	movw	r24, r30
    42cc:	08 95       	ret

000042ce <__prologue_saves__>:
    42ce:	2f 92       	push	r2
    42d0:	3f 92       	push	r3
    42d2:	4f 92       	push	r4
    42d4:	5f 92       	push	r5
    42d6:	6f 92       	push	r6
    42d8:	7f 92       	push	r7
    42da:	8f 92       	push	r8
    42dc:	9f 92       	push	r9
    42de:	af 92       	push	r10
    42e0:	bf 92       	push	r11
    42e2:	cf 92       	push	r12
    42e4:	df 92       	push	r13
    42e6:	ef 92       	push	r14
    42e8:	ff 92       	push	r15
    42ea:	0f 93       	push	r16
    42ec:	1f 93       	push	r17
    42ee:	cf 93       	push	r28
    42f0:	df 93       	push	r29
    42f2:	cd b7       	in	r28, 0x3d	; 61
    42f4:	de b7       	in	r29, 0x3e	; 62
    42f6:	ca 1b       	sub	r28, r26
    42f8:	db 0b       	sbc	r29, r27
    42fa:	0f b6       	in	r0, 0x3f	; 63
    42fc:	f8 94       	cli
    42fe:	de bf       	out	0x3e, r29	; 62
    4300:	0f be       	out	0x3f, r0	; 63
    4302:	cd bf       	out	0x3d, r28	; 61
    4304:	09 94       	ijmp

00004306 <__epilogue_restores__>:
    4306:	2a 88       	ldd	r2, Y+18	; 0x12
    4308:	39 88       	ldd	r3, Y+17	; 0x11
    430a:	48 88       	ldd	r4, Y+16	; 0x10
    430c:	5f 84       	ldd	r5, Y+15	; 0x0f
    430e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4310:	7d 84       	ldd	r7, Y+13	; 0x0d
    4312:	8c 84       	ldd	r8, Y+12	; 0x0c
    4314:	9b 84       	ldd	r9, Y+11	; 0x0b
    4316:	aa 84       	ldd	r10, Y+10	; 0x0a
    4318:	b9 84       	ldd	r11, Y+9	; 0x09
    431a:	c8 84       	ldd	r12, Y+8	; 0x08
    431c:	df 80       	ldd	r13, Y+7	; 0x07
    431e:	ee 80       	ldd	r14, Y+6	; 0x06
    4320:	fd 80       	ldd	r15, Y+5	; 0x05
    4322:	0c 81       	ldd	r16, Y+4	; 0x04
    4324:	1b 81       	ldd	r17, Y+3	; 0x03
    4326:	aa 81       	ldd	r26, Y+2	; 0x02
    4328:	b9 81       	ldd	r27, Y+1	; 0x01
    432a:	ce 0f       	add	r28, r30
    432c:	d1 1d       	adc	r29, r1
    432e:	0f b6       	in	r0, 0x3f	; 63
    4330:	f8 94       	cli
    4332:	de bf       	out	0x3e, r29	; 62
    4334:	0f be       	out	0x3f, r0	; 63
    4336:	cd bf       	out	0x3d, r28	; 61
    4338:	ed 01       	movw	r28, r26
    433a:	08 95       	ret

0000433c <__udivmodhi4>:
    433c:	aa 1b       	sub	r26, r26
    433e:	bb 1b       	sub	r27, r27
    4340:	51 e1       	ldi	r21, 0x11	; 17
    4342:	07 c0       	rjmp	.+14     	; 0x4352 <__udivmodhi4_ep>

00004344 <__udivmodhi4_loop>:
    4344:	aa 1f       	adc	r26, r26
    4346:	bb 1f       	adc	r27, r27
    4348:	a6 17       	cp	r26, r22
    434a:	b7 07       	cpc	r27, r23
    434c:	10 f0       	brcs	.+4      	; 0x4352 <__udivmodhi4_ep>
    434e:	a6 1b       	sub	r26, r22
    4350:	b7 0b       	sbc	r27, r23

00004352 <__udivmodhi4_ep>:
    4352:	88 1f       	adc	r24, r24
    4354:	99 1f       	adc	r25, r25
    4356:	5a 95       	dec	r21
    4358:	a9 f7       	brne	.-22     	; 0x4344 <__udivmodhi4_loop>
    435a:	80 95       	com	r24
    435c:	90 95       	com	r25
    435e:	bc 01       	movw	r22, r24
    4360:	cd 01       	movw	r24, r26
    4362:	08 95       	ret

00004364 <malloc>:
    4364:	cf 93       	push	r28
    4366:	df 93       	push	r29
    4368:	bc 01       	movw	r22, r24
    436a:	82 30       	cpi	r24, 0x02	; 2
    436c:	91 05       	cpc	r25, r1
    436e:	10 f4       	brcc	.+4      	; 0x4374 <malloc+0x10>
    4370:	62 e0       	ldi	r22, 0x02	; 2
    4372:	70 e0       	ldi	r23, 0x00	; 0
    4374:	a0 91 48 09 	lds	r26, 0x0948
    4378:	b0 91 49 09 	lds	r27, 0x0949
    437c:	ed 01       	movw	r28, r26
    437e:	e0 e0       	ldi	r30, 0x00	; 0
    4380:	f0 e0       	ldi	r31, 0x00	; 0
    4382:	40 e0       	ldi	r20, 0x00	; 0
    4384:	50 e0       	ldi	r21, 0x00	; 0
    4386:	21 c0       	rjmp	.+66     	; 0x43ca <malloc+0x66>
    4388:	88 81       	ld	r24, Y
    438a:	99 81       	ldd	r25, Y+1	; 0x01
    438c:	86 17       	cp	r24, r22
    438e:	97 07       	cpc	r25, r23
    4390:	69 f4       	brne	.+26     	; 0x43ac <malloc+0x48>
    4392:	8a 81       	ldd	r24, Y+2	; 0x02
    4394:	9b 81       	ldd	r25, Y+3	; 0x03
    4396:	30 97       	sbiw	r30, 0x00	; 0
    4398:	19 f0       	breq	.+6      	; 0x43a0 <malloc+0x3c>
    439a:	93 83       	std	Z+3, r25	; 0x03
    439c:	82 83       	std	Z+2, r24	; 0x02
    439e:	04 c0       	rjmp	.+8      	; 0x43a8 <malloc+0x44>
    43a0:	90 93 49 09 	sts	0x0949, r25
    43a4:	80 93 48 09 	sts	0x0948, r24
    43a8:	fe 01       	movw	r30, r28
    43aa:	34 c0       	rjmp	.+104    	; 0x4414 <malloc+0xb0>
    43ac:	68 17       	cp	r22, r24
    43ae:	79 07       	cpc	r23, r25
    43b0:	38 f4       	brcc	.+14     	; 0x43c0 <malloc+0x5c>
    43b2:	41 15       	cp	r20, r1
    43b4:	51 05       	cpc	r21, r1
    43b6:	19 f0       	breq	.+6      	; 0x43be <malloc+0x5a>
    43b8:	84 17       	cp	r24, r20
    43ba:	95 07       	cpc	r25, r21
    43bc:	08 f4       	brcc	.+2      	; 0x43c0 <malloc+0x5c>
    43be:	ac 01       	movw	r20, r24
    43c0:	fe 01       	movw	r30, r28
    43c2:	8a 81       	ldd	r24, Y+2	; 0x02
    43c4:	9b 81       	ldd	r25, Y+3	; 0x03
    43c6:	9c 01       	movw	r18, r24
    43c8:	e9 01       	movw	r28, r18
    43ca:	20 97       	sbiw	r28, 0x00	; 0
    43cc:	e9 f6       	brne	.-70     	; 0x4388 <malloc+0x24>
    43ce:	41 15       	cp	r20, r1
    43d0:	51 05       	cpc	r21, r1
    43d2:	a9 f1       	breq	.+106    	; 0x443e <malloc+0xda>
    43d4:	ca 01       	movw	r24, r20
    43d6:	86 1b       	sub	r24, r22
    43d8:	97 0b       	sbc	r25, r23
    43da:	04 97       	sbiw	r24, 0x04	; 4
    43dc:	08 f4       	brcc	.+2      	; 0x43e0 <malloc+0x7c>
    43de:	ba 01       	movw	r22, r20
    43e0:	e0 e0       	ldi	r30, 0x00	; 0
    43e2:	f0 e0       	ldi	r31, 0x00	; 0
    43e4:	2a c0       	rjmp	.+84     	; 0x443a <malloc+0xd6>
    43e6:	8d 91       	ld	r24, X+
    43e8:	9c 91       	ld	r25, X
    43ea:	11 97       	sbiw	r26, 0x01	; 1
    43ec:	84 17       	cp	r24, r20
    43ee:	95 07       	cpc	r25, r21
    43f0:	f9 f4       	brne	.+62     	; 0x4430 <malloc+0xcc>
    43f2:	64 17       	cp	r22, r20
    43f4:	75 07       	cpc	r23, r21
    43f6:	81 f4       	brne	.+32     	; 0x4418 <malloc+0xb4>
    43f8:	12 96       	adiw	r26, 0x02	; 2
    43fa:	8d 91       	ld	r24, X+
    43fc:	9c 91       	ld	r25, X
    43fe:	13 97       	sbiw	r26, 0x03	; 3
    4400:	30 97       	sbiw	r30, 0x00	; 0
    4402:	19 f0       	breq	.+6      	; 0x440a <malloc+0xa6>
    4404:	93 83       	std	Z+3, r25	; 0x03
    4406:	82 83       	std	Z+2, r24	; 0x02
    4408:	04 c0       	rjmp	.+8      	; 0x4412 <malloc+0xae>
    440a:	90 93 49 09 	sts	0x0949, r25
    440e:	80 93 48 09 	sts	0x0948, r24
    4412:	fd 01       	movw	r30, r26
    4414:	32 96       	adiw	r30, 0x02	; 2
    4416:	4f c0       	rjmp	.+158    	; 0x44b6 <malloc+0x152>
    4418:	ca 01       	movw	r24, r20
    441a:	86 1b       	sub	r24, r22
    441c:	97 0b       	sbc	r25, r23
    441e:	fd 01       	movw	r30, r26
    4420:	e8 0f       	add	r30, r24
    4422:	f9 1f       	adc	r31, r25
    4424:	61 93       	st	Z+, r22
    4426:	71 93       	st	Z+, r23
    4428:	02 97       	sbiw	r24, 0x02	; 2
    442a:	8d 93       	st	X+, r24
    442c:	9c 93       	st	X, r25
    442e:	43 c0       	rjmp	.+134    	; 0x44b6 <malloc+0x152>
    4430:	fd 01       	movw	r30, r26
    4432:	82 81       	ldd	r24, Z+2	; 0x02
    4434:	93 81       	ldd	r25, Z+3	; 0x03
    4436:	9c 01       	movw	r18, r24
    4438:	d9 01       	movw	r26, r18
    443a:	10 97       	sbiw	r26, 0x00	; 0
    443c:	a1 f6       	brne	.-88     	; 0x43e6 <malloc+0x82>
    443e:	80 91 46 09 	lds	r24, 0x0946
    4442:	90 91 47 09 	lds	r25, 0x0947
    4446:	89 2b       	or	r24, r25
    4448:	41 f4       	brne	.+16     	; 0x445a <malloc+0xf6>
    444a:	80 91 03 09 	lds	r24, 0x0903
    444e:	90 91 04 09 	lds	r25, 0x0904
    4452:	90 93 47 09 	sts	0x0947, r25
    4456:	80 93 46 09 	sts	0x0946, r24
    445a:	40 91 05 09 	lds	r20, 0x0905
    445e:	50 91 06 09 	lds	r21, 0x0906
    4462:	41 15       	cp	r20, r1
    4464:	51 05       	cpc	r21, r1
    4466:	41 f4       	brne	.+16     	; 0x4478 <malloc+0x114>
    4468:	4d b7       	in	r20, 0x3d	; 61
    446a:	5e b7       	in	r21, 0x3e	; 62
    446c:	80 91 01 09 	lds	r24, 0x0901
    4470:	90 91 02 09 	lds	r25, 0x0902
    4474:	48 1b       	sub	r20, r24
    4476:	59 0b       	sbc	r21, r25
    4478:	20 91 46 09 	lds	r18, 0x0946
    447c:	30 91 47 09 	lds	r19, 0x0947
    4480:	24 17       	cp	r18, r20
    4482:	35 07       	cpc	r19, r21
    4484:	b0 f4       	brcc	.+44     	; 0x44b2 <malloc+0x14e>
    4486:	ca 01       	movw	r24, r20
    4488:	82 1b       	sub	r24, r18
    448a:	93 0b       	sbc	r25, r19
    448c:	86 17       	cp	r24, r22
    448e:	97 07       	cpc	r25, r23
    4490:	80 f0       	brcs	.+32     	; 0x44b2 <malloc+0x14e>
    4492:	ab 01       	movw	r20, r22
    4494:	4e 5f       	subi	r20, 0xFE	; 254
    4496:	5f 4f       	sbci	r21, 0xFF	; 255
    4498:	84 17       	cp	r24, r20
    449a:	95 07       	cpc	r25, r21
    449c:	50 f0       	brcs	.+20     	; 0x44b2 <malloc+0x14e>
    449e:	42 0f       	add	r20, r18
    44a0:	53 1f       	adc	r21, r19
    44a2:	50 93 47 09 	sts	0x0947, r21
    44a6:	40 93 46 09 	sts	0x0946, r20
    44aa:	f9 01       	movw	r30, r18
    44ac:	61 93       	st	Z+, r22
    44ae:	71 93       	st	Z+, r23
    44b0:	02 c0       	rjmp	.+4      	; 0x44b6 <malloc+0x152>
    44b2:	e0 e0       	ldi	r30, 0x00	; 0
    44b4:	f0 e0       	ldi	r31, 0x00	; 0
    44b6:	cf 01       	movw	r24, r30
    44b8:	df 91       	pop	r29
    44ba:	cf 91       	pop	r28
    44bc:	08 95       	ret

000044be <free>:
    44be:	cf 93       	push	r28
    44c0:	df 93       	push	r29
    44c2:	00 97       	sbiw	r24, 0x00	; 0
    44c4:	09 f4       	brne	.+2      	; 0x44c8 <free+0xa>
    44c6:	50 c0       	rjmp	.+160    	; 0x4568 <free+0xaa>
    44c8:	ec 01       	movw	r28, r24
    44ca:	22 97       	sbiw	r28, 0x02	; 2
    44cc:	1b 82       	std	Y+3, r1	; 0x03
    44ce:	1a 82       	std	Y+2, r1	; 0x02
    44d0:	a0 91 48 09 	lds	r26, 0x0948
    44d4:	b0 91 49 09 	lds	r27, 0x0949
    44d8:	10 97       	sbiw	r26, 0x00	; 0
    44da:	09 f1       	breq	.+66     	; 0x451e <free+0x60>
    44dc:	40 e0       	ldi	r20, 0x00	; 0
    44de:	50 e0       	ldi	r21, 0x00	; 0
    44e0:	ac 17       	cp	r26, r28
    44e2:	bd 07       	cpc	r27, r29
    44e4:	08 f1       	brcs	.+66     	; 0x4528 <free+0x6a>
    44e6:	bb 83       	std	Y+3, r27	; 0x03
    44e8:	aa 83       	std	Y+2, r26	; 0x02
    44ea:	fe 01       	movw	r30, r28
    44ec:	21 91       	ld	r18, Z+
    44ee:	31 91       	ld	r19, Z+
    44f0:	e2 0f       	add	r30, r18
    44f2:	f3 1f       	adc	r31, r19
    44f4:	ae 17       	cp	r26, r30
    44f6:	bf 07       	cpc	r27, r31
    44f8:	79 f4       	brne	.+30     	; 0x4518 <free+0x5a>
    44fa:	8d 91       	ld	r24, X+
    44fc:	9c 91       	ld	r25, X
    44fe:	11 97       	sbiw	r26, 0x01	; 1
    4500:	28 0f       	add	r18, r24
    4502:	39 1f       	adc	r19, r25
    4504:	2e 5f       	subi	r18, 0xFE	; 254
    4506:	3f 4f       	sbci	r19, 0xFF	; 255
    4508:	39 83       	std	Y+1, r19	; 0x01
    450a:	28 83       	st	Y, r18
    450c:	12 96       	adiw	r26, 0x02	; 2
    450e:	8d 91       	ld	r24, X+
    4510:	9c 91       	ld	r25, X
    4512:	13 97       	sbiw	r26, 0x03	; 3
    4514:	9b 83       	std	Y+3, r25	; 0x03
    4516:	8a 83       	std	Y+2, r24	; 0x02
    4518:	41 15       	cp	r20, r1
    451a:	51 05       	cpc	r21, r1
    451c:	71 f4       	brne	.+28     	; 0x453a <free+0x7c>
    451e:	d0 93 49 09 	sts	0x0949, r29
    4522:	c0 93 48 09 	sts	0x0948, r28
    4526:	20 c0       	rjmp	.+64     	; 0x4568 <free+0xaa>
    4528:	12 96       	adiw	r26, 0x02	; 2
    452a:	8d 91       	ld	r24, X+
    452c:	9c 91       	ld	r25, X
    452e:	13 97       	sbiw	r26, 0x03	; 3
    4530:	ad 01       	movw	r20, r26
    4532:	00 97       	sbiw	r24, 0x00	; 0
    4534:	11 f0       	breq	.+4      	; 0x453a <free+0x7c>
    4536:	dc 01       	movw	r26, r24
    4538:	d3 cf       	rjmp	.-90     	; 0x44e0 <free+0x22>
    453a:	fa 01       	movw	r30, r20
    453c:	d3 83       	std	Z+3, r29	; 0x03
    453e:	c2 83       	std	Z+2, r28	; 0x02
    4540:	21 91       	ld	r18, Z+
    4542:	31 91       	ld	r19, Z+
    4544:	e2 0f       	add	r30, r18
    4546:	f3 1f       	adc	r31, r19
    4548:	ce 17       	cp	r28, r30
    454a:	df 07       	cpc	r29, r31
    454c:	69 f4       	brne	.+26     	; 0x4568 <free+0xaa>
    454e:	88 81       	ld	r24, Y
    4550:	99 81       	ldd	r25, Y+1	; 0x01
    4552:	28 0f       	add	r18, r24
    4554:	39 1f       	adc	r19, r25
    4556:	2e 5f       	subi	r18, 0xFE	; 254
    4558:	3f 4f       	sbci	r19, 0xFF	; 255
    455a:	fa 01       	movw	r30, r20
    455c:	31 83       	std	Z+1, r19	; 0x01
    455e:	20 83       	st	Z, r18
    4560:	8a 81       	ldd	r24, Y+2	; 0x02
    4562:	9b 81       	ldd	r25, Y+3	; 0x03
    4564:	93 83       	std	Z+3, r25	; 0x03
    4566:	82 83       	std	Z+2, r24	; 0x02
    4568:	df 91       	pop	r29
    456a:	cf 91       	pop	r28
    456c:	08 95       	ret

0000456e <itoa>:
    456e:	fb 01       	movw	r30, r22
    4570:	9f 01       	movw	r18, r30
    4572:	e8 94       	clt
    4574:	42 30       	cpi	r20, 0x02	; 2
    4576:	c4 f0       	brlt	.+48     	; 0x45a8 <itoa+0x3a>
    4578:	45 32       	cpi	r20, 0x25	; 37
    457a:	b4 f4       	brge	.+44     	; 0x45a8 <itoa+0x3a>
    457c:	4a 30       	cpi	r20, 0x0A	; 10
    457e:	29 f4       	brne	.+10     	; 0x458a <itoa+0x1c>
    4580:	97 fb       	bst	r25, 7
    4582:	1e f4       	brtc	.+6      	; 0x458a <itoa+0x1c>
    4584:	90 95       	com	r25
    4586:	81 95       	neg	r24
    4588:	9f 4f       	sbci	r25, 0xFF	; 255
    458a:	64 2f       	mov	r22, r20
    458c:	77 27       	eor	r23, r23
    458e:	0e 94 9e 21 	call	0x433c	; 0x433c <__udivmodhi4>
    4592:	80 5d       	subi	r24, 0xD0	; 208
    4594:	8a 33       	cpi	r24, 0x3A	; 58
    4596:	0c f0       	brlt	.+2      	; 0x459a <itoa+0x2c>
    4598:	89 5d       	subi	r24, 0xD9	; 217
    459a:	81 93       	st	Z+, r24
    459c:	cb 01       	movw	r24, r22
    459e:	00 97       	sbiw	r24, 0x00	; 0
    45a0:	a1 f7       	brne	.-24     	; 0x458a <itoa+0x1c>
    45a2:	16 f4       	brtc	.+4      	; 0x45a8 <itoa+0x3a>
    45a4:	5d e2       	ldi	r21, 0x2D	; 45
    45a6:	51 93       	st	Z+, r21
    45a8:	10 82       	st	Z, r1
    45aa:	c9 01       	movw	r24, r18
    45ac:	0c 94 47 23 	jmp	0x468e	; 0x468e <strrev>

000045b0 <fdevopen>:
    45b0:	0f 93       	push	r16
    45b2:	1f 93       	push	r17
    45b4:	cf 93       	push	r28
    45b6:	df 93       	push	r29
    45b8:	8c 01       	movw	r16, r24
    45ba:	eb 01       	movw	r28, r22
    45bc:	00 97       	sbiw	r24, 0x00	; 0
    45be:	31 f4       	brne	.+12     	; 0x45cc <fdevopen+0x1c>
    45c0:	61 15       	cp	r22, r1
    45c2:	71 05       	cpc	r23, r1
    45c4:	19 f4       	brne	.+6      	; 0x45cc <fdevopen+0x1c>
    45c6:	20 e0       	ldi	r18, 0x00	; 0
    45c8:	30 e0       	ldi	r19, 0x00	; 0
    45ca:	38 c0       	rjmp	.+112    	; 0x463c <fdevopen+0x8c>
    45cc:	81 e0       	ldi	r24, 0x01	; 1
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	6e e0       	ldi	r22, 0x0E	; 14
    45d2:	70 e0       	ldi	r23, 0x00	; 0
    45d4:	0e 94 24 23 	call	0x4648	; 0x4648 <calloc>
    45d8:	fc 01       	movw	r30, r24
    45da:	9c 01       	movw	r18, r24
    45dc:	00 97       	sbiw	r24, 0x00	; 0
    45de:	71 f1       	breq	.+92     	; 0x463c <fdevopen+0x8c>
    45e0:	80 e8       	ldi	r24, 0x80	; 128
    45e2:	83 83       	std	Z+3, r24	; 0x03
    45e4:	20 97       	sbiw	r28, 0x00	; 0
    45e6:	71 f0       	breq	.+28     	; 0x4604 <fdevopen+0x54>
    45e8:	d3 87       	std	Z+11, r29	; 0x0b
    45ea:	c2 87       	std	Z+10, r28	; 0x0a
    45ec:	81 e8       	ldi	r24, 0x81	; 129
    45ee:	83 83       	std	Z+3, r24	; 0x03
    45f0:	80 91 4a 09 	lds	r24, 0x094A
    45f4:	90 91 4b 09 	lds	r25, 0x094B
    45f8:	89 2b       	or	r24, r25
    45fa:	21 f4       	brne	.+8      	; 0x4604 <fdevopen+0x54>
    45fc:	f0 93 4b 09 	sts	0x094B, r31
    4600:	e0 93 4a 09 	sts	0x094A, r30
    4604:	01 15       	cp	r16, r1
    4606:	11 05       	cpc	r17, r1
    4608:	c9 f0       	breq	.+50     	; 0x463c <fdevopen+0x8c>
    460a:	11 87       	std	Z+9, r17	; 0x09
    460c:	00 87       	std	Z+8, r16	; 0x08
    460e:	83 81       	ldd	r24, Z+3	; 0x03
    4610:	82 60       	ori	r24, 0x02	; 2
    4612:	83 83       	std	Z+3, r24	; 0x03
    4614:	80 91 4c 09 	lds	r24, 0x094C
    4618:	90 91 4d 09 	lds	r25, 0x094D
    461c:	89 2b       	or	r24, r25
    461e:	71 f4       	brne	.+28     	; 0x463c <fdevopen+0x8c>
    4620:	f0 93 4d 09 	sts	0x094D, r31
    4624:	e0 93 4c 09 	sts	0x094C, r30
    4628:	80 91 4e 09 	lds	r24, 0x094E
    462c:	90 91 4f 09 	lds	r25, 0x094F
    4630:	89 2b       	or	r24, r25
    4632:	21 f4       	brne	.+8      	; 0x463c <fdevopen+0x8c>
    4634:	f0 93 4f 09 	sts	0x094F, r31
    4638:	e0 93 4e 09 	sts	0x094E, r30
    463c:	c9 01       	movw	r24, r18
    463e:	df 91       	pop	r29
    4640:	cf 91       	pop	r28
    4642:	1f 91       	pop	r17
    4644:	0f 91       	pop	r16
    4646:	08 95       	ret

00004648 <calloc>:
    4648:	0f 93       	push	r16
    464a:	1f 93       	push	r17
    464c:	cf 93       	push	r28
    464e:	df 93       	push	r29
    4650:	68 9f       	mul	r22, r24
    4652:	80 01       	movw	r16, r0
    4654:	69 9f       	mul	r22, r25
    4656:	10 0d       	add	r17, r0
    4658:	78 9f       	mul	r23, r24
    465a:	10 0d       	add	r17, r0
    465c:	11 24       	eor	r1, r1
    465e:	c8 01       	movw	r24, r16
    4660:	0e 94 b2 21 	call	0x4364	; 0x4364 <malloc>
    4664:	ec 01       	movw	r28, r24
    4666:	00 97       	sbiw	r24, 0x00	; 0
    4668:	29 f0       	breq	.+10     	; 0x4674 <calloc+0x2c>
    466a:	60 e0       	ldi	r22, 0x00	; 0
    466c:	70 e0       	ldi	r23, 0x00	; 0
    466e:	a8 01       	movw	r20, r16
    4670:	0e 94 40 23 	call	0x4680	; 0x4680 <memset>
    4674:	ce 01       	movw	r24, r28
    4676:	df 91       	pop	r29
    4678:	cf 91       	pop	r28
    467a:	1f 91       	pop	r17
    467c:	0f 91       	pop	r16
    467e:	08 95       	ret

00004680 <memset>:
    4680:	dc 01       	movw	r26, r24
    4682:	01 c0       	rjmp	.+2      	; 0x4686 <memset+0x6>
    4684:	6d 93       	st	X+, r22
    4686:	41 50       	subi	r20, 0x01	; 1
    4688:	50 40       	sbci	r21, 0x00	; 0
    468a:	e0 f7       	brcc	.-8      	; 0x4684 <memset+0x4>
    468c:	08 95       	ret

0000468e <strrev>:
    468e:	dc 01       	movw	r26, r24
    4690:	fc 01       	movw	r30, r24
    4692:	67 2f       	mov	r22, r23
    4694:	71 91       	ld	r23, Z+
    4696:	77 23       	and	r23, r23
    4698:	e1 f7       	brne	.-8      	; 0x4692 <strrev+0x4>
    469a:	32 97       	sbiw	r30, 0x02	; 2
    469c:	04 c0       	rjmp	.+8      	; 0x46a6 <strrev+0x18>
    469e:	7c 91       	ld	r23, X
    46a0:	6d 93       	st	X+, r22
    46a2:	70 83       	st	Z, r23
    46a4:	62 91       	ld	r22, -Z
    46a6:	ae 17       	cp	r26, r30
    46a8:	bf 07       	cpc	r27, r31
    46aa:	c8 f3       	brcs	.-14     	; 0x469e <strrev+0x10>
    46ac:	08 95       	ret

000046ae <_exit>:
    46ae:	f8 94       	cli

000046b0 <__stop_program>:
    46b0:	ff cf       	rjmp	.-2      	; 0x46b0 <__stop_program>
