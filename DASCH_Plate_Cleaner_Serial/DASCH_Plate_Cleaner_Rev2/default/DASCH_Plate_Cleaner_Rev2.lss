
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ee  00800100  00004352  000043e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004352  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  008003ee  008003ee  000046d4  2**0
                  ALLOC
  3 .stab         00005274  00000000  00000000  000046d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000544b  00000000  00000000  00009948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000ed93  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003e7  00000000  00000000  0000edd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000126e  00000000  00000000  0000f1ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002fb  00000000  00000000  00010428  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000019b2  00000000  00000000  00010723  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000120d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b14  00000000  00000000  00012258  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000012c7  00000000  00000000  00012d6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__vector_11>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      50:	0c 94 fb 18 	jmp	0x31f6	; 0x31f6 <__vector_20>
      54:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__vector_21>
      58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      70:	0c 94 37 19 	jmp	0x326e	; 0x326e <__vector_28>
      74:	0c 94 ee 1a 	jmp	0x35dc	; 0x35dc <__vector_29>
      78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      8c:	8d 0a       	sbc	r8, r29
      8e:	a6 0a       	sbc	r10, r22
      90:	c1 0a       	sbc	r12, r17
      92:	de 0a       	sbc	r13, r30
      94:	fd 0a       	sbc	r15, r29
      96:	19 0b       	sbc	r17, r25
      98:	37 0b       	sbc	r19, r23
      9a:	58 0b       	sbc	r21, r24
      9c:	7a 0b       	sbc	r23, r26
      9e:	84 0b       	sbc	r24, r20
      a0:	88 0b       	sbc	r24, r24
      a2:	94 0b       	sbc	r25, r20
      a4:	98 0b       	sbc	r25, r24
      a6:	a2 0b       	sbc	r26, r18
      a8:	a6 0b       	sbc	r26, r22
      aa:	b1 0b       	sbc	r27, r17
      ac:	b5 0b       	sbc	r27, r21
      ae:	c0 0b       	sbc	r28, r16
      b0:	c4 0b       	sbc	r28, r20
      b2:	cf 0b       	sbc	r28, r31
      b4:	d3 0b       	sbc	r29, r19
      b6:	de 0b       	sbc	r29, r30
      b8:	e2 0b       	sbc	r30, r18
      ba:	f1 0b       	sbc	r31, r17
      bc:	f7 0b       	sbc	r31, r23
      be:	06 0c       	add	r0, r6
      c0:	0a 0c       	add	r0, r10
      c2:	15 0c       	add	r1, r5
      c4:	19 0c       	add	r1, r9
      c6:	24 0c       	add	r2, r4
      c8:	28 0c       	add	r2, r8
      ca:	34 0c       	add	r3, r4
      cc:	3a 0c       	add	r3, r10
      ce:	4a 0c       	add	r4, r10
      d0:	54 0c       	add	r5, r4
      d2:	6a 0c       	add	r6, r10
      d4:	74 0c       	add	r7, r4
      d6:	8a 0c       	add	r8, r10
      d8:	94 0c       	add	r9, r4
      da:	aa 0c       	add	r10, r10
      dc:	b4 0c       	add	r11, r4
      de:	ca 0c       	add	r12, r10
      e0:	d4 0c       	add	r13, r4
      e2:	e1 0c       	add	r14, r1

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d0 e4       	ldi	r29, 0x40	; 64
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	13 e0       	ldi	r17, 0x03	; 3
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b1 e0       	ldi	r27, 0x01	; 1
      f6:	e2 e5       	ldi	r30, 0x52	; 82
      f8:	f3 e4       	ldi	r31, 0x43	; 67
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	ae 3e       	cpi	r26, 0xEE	; 238
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	14 e0       	ldi	r17, 0x04	; 4
     10c:	ae ee       	ldi	r26, 0xEE	; 238
     10e:	b3 e0       	ldi	r27, 0x03	; 3
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	a6 33       	cpi	r26, 0x36	; 54
     116:	b1 07       	cpc	r27, r17
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 92 07 	call	0xf24	; 0xf24 <main>
     11e:	0c 94 a7 21 	jmp	0x434e	; 0x434e <_exit>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     126:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     12a:	8c e0       	ldi	r24, 0x0C	; 12
     12c:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
     130:	08 95       	ret

00000132 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
     132:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     134:	84 ea       	ldi	r24, 0xA4	; 164
     136:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     13a:	80 91 bc 00 	lds	r24, 0x00BC
     13e:	87 ff       	sbrs	r24, 7
     140:	fc cf       	rjmp	.-8      	; 0x13a <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     142:	80 91 b9 00 	lds	r24, 0x00B9
     146:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     148:	88 30       	cpi	r24, 0x08	; 8
     14a:	21 f0       	breq	.+8      	; 0x154 <i2c_start+0x22>
     14c:	80 31       	cpi	r24, 0x10	; 16
     14e:	11 f0       	breq	.+4      	; 0x154 <i2c_start+0x22>
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	08 95       	ret

	// send device address
	TWDR = address;
     154:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     158:	84 e8       	ldi	r24, 0x84	; 132
     15a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     15e:	80 91 bc 00 	lds	r24, 0x00BC
     162:	87 ff       	sbrs	r24, 7
     164:	fc cf       	rjmp	.-8      	; 0x15e <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     166:	90 91 b9 00 	lds	r25, 0x00B9
     16a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     16c:	98 31       	cpi	r25, 0x18	; 24
     16e:	11 f4       	brne	.+4      	; 0x174 <i2c_start+0x42>
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	08 95       	ret
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 34       	cpi	r25, 0x40	; 64
     178:	09 f0       	breq	.+2      	; 0x17c <i2c_start+0x4a>
     17a:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
     17c:	08 95       	ret

0000017e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     17e:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     180:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     182:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     184:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     186:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     18a:	80 91 bc 00 	lds	r24, 0x00BC
     18e:	87 ff       	sbrs	r24, 7
     190:	fc cf       	rjmp	.-8      	; 0x18a <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     192:	80 91 b9 00 	lds	r24, 0x00B9
     196:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     198:	88 30       	cpi	r24, 0x08	; 8
     19a:	11 f0       	breq	.+4      	; 0x1a0 <i2c_start_wait+0x22>
     19c:	80 31       	cpi	r24, 0x10	; 16
     19e:	99 f7       	brne	.-26     	; 0x186 <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
     1a0:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
     1a4:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     1a8:	80 91 bc 00 	lds	r24, 0x00BC
     1ac:	87 ff       	sbrs	r24, 7
     1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     1b0:	80 91 b9 00 	lds	r24, 0x00B9
     1b4:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     1b6:	80 32       	cpi	r24, 0x20	; 32
     1b8:	11 f0       	breq	.+4      	; 0x1be <i2c_start_wait+0x40>
     1ba:	88 35       	cpi	r24, 0x58	; 88
     1bc:	39 f4       	brne	.+14     	; 0x1cc <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1be:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     1c2:	80 91 bc 00 	lds	r24, 0x00BC
     1c6:	84 fd       	sbrc	r24, 4
     1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <i2c_start_wait+0x44>
     1ca:	dd cf       	rjmp	.-70     	; 0x186 <i2c_start_wait+0x8>
     1cc:	08 95       	ret

000001ce <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     1ce:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>

}/* i2c_rep_start */
     1d2:	08 95       	ret

000001d4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1d4:	84 e9       	ldi	r24, 0x94	; 148
     1d6:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     1da:	80 91 bc 00 	lds	r24, 0x00BC
     1de:	84 fd       	sbrc	r24, 4
     1e0:	fc cf       	rjmp	.-8      	; 0x1da <i2c_stop+0x6>

}/* i2c_stop */
     1e2:	08 95       	ret

000001e4 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     1e4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     1e8:	84 e8       	ldi	r24, 0x84	; 132
     1ea:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     1ee:	80 91 bc 00 	lds	r24, 0x00BC
     1f2:	87 ff       	sbrs	r24, 7
     1f4:	fc cf       	rjmp	.-8      	; 0x1ee <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     1f6:	80 91 b9 00 	lds	r24, 0x00B9
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	88 7f       	andi	r24, 0xF8	; 248
     1fe:	88 32       	cpi	r24, 0x28	; 40
     200:	09 f0       	breq	.+2      	; 0x204 <i2c_write+0x20>
     202:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     204:	89 2f       	mov	r24, r25
     206:	08 95       	ret

00000208 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     208:	84 ec       	ldi	r24, 0xC4	; 196
     20a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     20e:	80 91 bc 00 	lds	r24, 0x00BC
     212:	87 ff       	sbrs	r24, 7
     214:	fc cf       	rjmp	.-8      	; 0x20e <i2c_readAck+0x6>

    return TWDR;
     216:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
     21a:	08 95       	ret

0000021c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     21c:	84 e8       	ldi	r24, 0x84	; 132
     21e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     222:	80 91 bc 00 	lds	r24, 0x00BC
     226:	87 ff       	sbrs	r24, 7
     228:	fc cf       	rjmp	.-8      	; 0x222 <i2c_readNak+0x6>
	
    return TWDR;
     22a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     22e:	08 95       	ret

00000230 <is_digital_input_high>:

// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
// the pin.
static inline unsigned char is_digital_input_high(unsigned char pin)
{
     230:	48 2f       	mov	r20, r24
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     232:	88 30       	cpi	r24, 0x08	; 8
     234:	58 f4       	brcc	.+22     	; 0x24c <is_digital_input_high+0x1c>
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	02 c0       	rjmp	.+4      	; 0x240 <is_digital_input_high+0x10>
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	4a 95       	dec	r20
     242:	e2 f7       	brpl	.-8      	; 0x23c <is_digital_input_high+0xc>
     244:	98 2f       	mov	r25, r24
     246:	e9 e2       	ldi	r30, 0x29	; 41
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	36 c0       	rjmp	.+108    	; 0x2b8 <is_digital_input_high+0x88>
	}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     24c:	80 31       	cpi	r24, 0x10	; 16
     24e:	78 f4       	brcc	.+30     	; 0x26e <is_digital_input_high+0x3e>
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	28 50       	subi	r18, 0x08	; 8
     256:	30 40       	sbci	r19, 0x00	; 0
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	02 c0       	rjmp	.+4      	; 0x262 <is_digital_input_high+0x32>
     25e:	88 0f       	add	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	2a 95       	dec	r18
     264:	e2 f7       	brpl	.-8      	; 0x25e <is_digital_input_high+0x2e>
     266:	98 2f       	mov	r25, r24
     268:	e3 e2       	ldi	r30, 0x23	; 35
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	25 c0       	rjmp	.+74     	; 0x2b8 <is_digital_input_high+0x88>
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     26e:	88 31       	cpi	r24, 0x18	; 24
     270:	78 f4       	brcc	.+30     	; 0x290 <is_digital_input_high+0x60>
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
     272:	28 2f       	mov	r18, r24
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	20 51       	subi	r18, 0x10	; 16
     278:	30 40       	sbci	r19, 0x00	; 0
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	02 c0       	rjmp	.+4      	; 0x284 <is_digital_input_high+0x54>
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	2a 95       	dec	r18
     286:	e2 f7       	brpl	.-8      	; 0x280 <is_digital_input_high+0x50>
     288:	98 2f       	mov	r25, r24
     28a:	e6 e2       	ldi	r30, 0x26	; 38
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	14 c0       	rjmp	.+40     	; 0x2b8 <is_digital_input_high+0x88>
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     290:	80 32       	cpi	r24, 0x20	; 32
     292:	20 f0       	brcs	.+8      	; 0x29c <is_digital_input_high+0x6c>
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	e0 e0       	ldi	r30, 0x00	; 0
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	0e c0       	rjmp	.+28     	; 0x2b8 <is_digital_input_high+0x88>
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
		io->bitmask = 1 << (31 - pin);
     29c:	2f e1       	ldi	r18, 0x1F	; 31
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	28 1b       	sub	r18, r24
     2a2:	31 09       	sbc	r19, r1
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <is_digital_input_high+0x7e>
     2aa:	88 0f       	add	r24, r24
     2ac:	99 1f       	adc	r25, r25
     2ae:	2a 95       	dec	r18
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <is_digital_input_high+0x7a>
     2b2:	98 2f       	mov	r25, r24
     2b4:	e0 e2       	ldi	r30, 0x20	; 32
     2b6:	f0 e0       	ldi	r31, 0x00	; 0

// low-level method for reading the value of the PIN register for an pin or set of pins
// described by an IOStruct pointer.
static inline unsigned char get_digital_input_value(struct IOStruct* ioPin)
{
	return *(ioPin->pinRegister) & ioPin->bitmask;
     2b8:	80 81       	ld	r24, Z
static inline unsigned char is_digital_input_high(unsigned char pin)
{
	struct IOStruct registers;
	get_io_registers(&registers, pin);
	return get_digital_input_value(&registers);
}
     2ba:	89 23       	and	r24, r25
     2bc:	08 95       	ret

000002be <brush1_action>:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
	}
}

void brush1_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	f9 01       	movw	r30, r18
     2c4:	d8 01       	movw	r26, r16
	switch(state){
     2c6:	89 30       	cpi	r24, 0x09	; 9
     2c8:	91 05       	cpc	r25, r1
     2ca:	31 f1       	breq	.+76     	; 0x318 <brush1_action+0x5a>
     2cc:	8a 30       	cpi	r24, 0x0A	; 10
     2ce:	91 05       	cpc	r25, r1
     2d0:	5c f4       	brge	.+22     	; 0x2e8 <brush1_action+0x2a>
     2d2:	87 30       	cpi	r24, 0x07	; 7
     2d4:	91 05       	cpc	r25, r1
     2d6:	a9 f0       	breq	.+42     	; 0x302 <brush1_action+0x44>
     2d8:	88 30       	cpi	r24, 0x08	; 8
     2da:	91 05       	cpc	r25, r1
     2dc:	0c f0       	brlt	.+2      	; 0x2e0 <brush1_action+0x22>
     2de:	3f c0       	rjmp	.+126    	; 0x35e <brush1_action+0xa0>
     2e0:	06 97       	sbiw	r24, 0x06	; 6
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <brush1_action+0x28>
     2e4:	52 c0       	rjmp	.+164    	; 0x38a <brush1_action+0xcc>
     2e6:	2c c0       	rjmp	.+88     	; 0x340 <brush1_action+0x82>
     2e8:	8b 30       	cpi	r24, 0x0B	; 11
     2ea:	91 05       	cpc	r25, r1
     2ec:	49 f1       	breq	.+82     	; 0x340 <brush1_action+0x82>
     2ee:	8b 30       	cpi	r24, 0x0B	; 11
     2f0:	91 05       	cpc	r25, r1
     2f2:	ec f0       	brlt	.+58     	; 0x32e <brush1_action+0x70>
     2f4:	8c 30       	cpi	r24, 0x0C	; 12
     2f6:	91 05       	cpc	r25, r1
     2f8:	59 f1       	breq	.+86     	; 0x350 <brush1_action+0x92>
     2fa:	0d 97       	sbiw	r24, 0x0d	; 13
     2fc:	09 f0       	breq	.+2      	; 0x300 <brush1_action+0x42>
     2fe:	45 c0       	rjmp	.+138    	; 0x38a <brush1_action+0xcc>
     300:	39 c0       	rjmp	.+114    	; 0x374 <brush1_action+0xb6>
		case MOVEC1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B1SET:
			*pfixtureMotor = 0;
     302:	11 82       	std	Z+1, r1	; 0x01
     304:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     306:	80 91 27 04 	lds	r24, 0x0427
     30a:	81 60       	ori	r24, 0x01	; 1
     30c:	80 93 27 04 	sts	0x0427, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
     310:	80 91 2b 04 	lds	r24, 0x042B
     314:	8f 77       	andi	r24, 0x7F	; 127
     316:	37 c0       	rjmp	.+110    	; 0x386 <brush1_action+0xc8>
			*pbrush1Motor = 1;
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
			break;
		case CLEAN1_1:
			*pbrush1Motor = 1;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	8d 93       	st	X+, r24
     31e:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     320:	91 83       	std	Z+1, r25	; 0x01
     322:	80 83       	st	Z, r24
     324:	80 91 2b 04 	lds	r24, 0x042B
     328:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     32a:	8f 7e       	andi	r24, 0xEF	; 239
     32c:	2c c0       	rjmp	.+88     	; 0x386 <brush1_action+0xc8>
			break;
		case B1STOP1:
			*pfixtureMotor = 0;
     32e:	11 82       	std	Z+1, r1	; 0x01
     330:	10 82       	st	Z, r1
			*pbrush1Motor = 0;
     332:	1d 92       	st	X+, r1
     334:	1c 92       	st	X, r1
			u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     336:	80 91 2a 04 	lds	r24, 0x042A
     33a:	8f 7b       	andi	r24, 0xBF	; 191
			u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     33c:	80 62       	ori	r24, 0x20	; 32
     33e:	17 c0       	rjmp	.+46     	; 0x36e <brush1_action+0xb0>
			break;
		case CLEAN1_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     340:	80 91 2b 04 	lds	r24, 0x042B
     344:	80 61       	ori	r24, 0x10	; 16
     346:	80 93 2b 04 	sts	0x042B, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	16 c0       	rjmp	.+44     	; 0x37c <brush1_action+0xbe>
			break;
		case B1START2:
			*pfixtureMotor = 0;
     350:	11 82       	std	Z+1, r1	; 0x01
     352:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
     354:	80 91 2b 04 	lds	r24, 0x042B
     358:	8f 77       	andi	r24, 0x7F	; 127
     35a:	80 93 2b 04 	sts	0x042B, r24
			*pbrush1Motor = 1;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	8d 93       	st	X+, r24
     364:	9c 93       	st	X, r25
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     366:	80 91 2a 04 	lds	r24, 0x042A
     36a:	80 64       	ori	r24, 0x40	; 64
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     36c:	8f 7d       	andi	r24, 0xDF	; 223
     36e:	80 93 2a 04 	sts	0x042A, r24
     372:	0b c0       	rjmp	.+22     	; 0x38a <brush1_action+0xcc>
			break;
		case CLEAN1_3:
			*pbrush1Motor = 1;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	8d 93       	st	X+, r24
     37a:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     37c:	91 83       	std	Z+1, r25	; 0x01
     37e:	80 83       	st	Z, r24
     380:	80 91 2b 04 	lds	r24, 0x042B
     384:	80 62       	ori	r24, 0x20	; 32
     386:	80 93 2b 04 	sts	0x042B, r24
			break;
	}
}
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	08 95       	ret

00000390 <brush2_action>:

void brush2_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     390:	ef 92       	push	r14
     392:	ff 92       	push	r15
     394:	f9 01       	movw	r30, r18
     396:	d7 01       	movw	r26, r14
	switch(state){
     398:	83 31       	cpi	r24, 0x13	; 19
     39a:	91 05       	cpc	r25, r1
     39c:	b9 f1       	breq	.+110    	; 0x40c <brush2_action+0x7c>
     39e:	84 31       	cpi	r24, 0x14	; 20
     3a0:	91 05       	cpc	r25, r1
     3a2:	9c f4       	brge	.+38     	; 0x3ca <brush2_action+0x3a>
     3a4:	80 31       	cpi	r24, 0x10	; 16
     3a6:	91 05       	cpc	r25, r1
     3a8:	09 f4       	brne	.+2      	; 0x3ac <brush2_action+0x1c>
     3aa:	3d c0       	rjmp	.+122    	; 0x426 <brush2_action+0x96>
     3ac:	81 31       	cpi	r24, 0x11	; 17
     3ae:	91 05       	cpc	r25, r1
     3b0:	24 f4       	brge	.+8      	; 0x3ba <brush2_action+0x2a>
     3b2:	0f 97       	sbiw	r24, 0x0f	; 15
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <brush2_action+0x28>
     3b6:	68 c0       	rjmp	.+208    	; 0x488 <brush2_action+0xf8>
     3b8:	15 c0       	rjmp	.+42     	; 0x3e4 <brush2_action+0x54>
     3ba:	81 31       	cpi	r24, 0x11	; 17
     3bc:	91 05       	cpc	r25, r1
     3be:	09 f4       	brne	.+2      	; 0x3c2 <brush2_action+0x32>
     3c0:	41 c0       	rjmp	.+130    	; 0x444 <brush2_action+0xb4>
     3c2:	42 97       	sbiw	r24, 0x12	; 18
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <brush2_action+0x38>
     3c6:	60 c0       	rjmp	.+192    	; 0x488 <brush2_action+0xf8>
     3c8:	14 c0       	rjmp	.+40     	; 0x3f2 <brush2_action+0x62>
     3ca:	85 31       	cpi	r24, 0x15	; 21
     3cc:	91 05       	cpc	r25, r1
     3ce:	d1 f1       	breq	.+116    	; 0x444 <brush2_action+0xb4>
     3d0:	85 31       	cpi	r24, 0x15	; 21
     3d2:	91 05       	cpc	r25, r1
     3d4:	0c f1       	brlt	.+66     	; 0x418 <brush2_action+0x88>
     3d6:	86 31       	cpi	r24, 0x16	; 22
     3d8:	91 05       	cpc	r25, r1
     3da:	c9 f1       	breq	.+114    	; 0x44e <brush2_action+0xbe>
     3dc:	47 97       	sbiw	r24, 0x17	; 23
     3de:	09 f0       	breq	.+2      	; 0x3e2 <brush2_action+0x52>
     3e0:	53 c0       	rjmp	.+166    	; 0x488 <brush2_action+0xf8>
     3e2:	49 c0       	rjmp	.+146    	; 0x476 <brush2_action+0xe6>
		case B2SET:
			*pfixtureMotor = 0;
     3e4:	11 82       	std	Z+1, r1	; 0x01
     3e6:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     3e8:	80 91 27 04 	lds	r24, 0x0427
     3ec:	88 60       	ori	r24, 0x08	; 8
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     3ee:	8b 7f       	andi	r24, 0xFB	; 251
     3f0:	3f c0       	rjmp	.+126    	; 0x470 <brush2_action+0xe0>
		case CLEAN2_1:
			*pbrush2Motor = 1;
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP1:
			*pfixtureMotor = 0;
     3f2:	11 82       	std	Z+1, r1	; 0x01
     3f4:	10 82       	st	Z, r1
			*pbrush2Motor = 0;
     3f6:	1d 92       	st	X+, r1
     3f8:	1c 92       	st	X, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     3fa:	80 91 28 04 	lds	r24, 0x0428
     3fe:	8e 7f       	andi	r24, 0xFE	; 254
     400:	80 93 28 04 	sts	0x0428, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     404:	80 91 2a 04 	lds	r24, 0x042A
     408:	80 68       	ori	r24, 0x80	; 128
     40a:	19 c0       	rjmp	.+50     	; 0x43e <brush2_action+0xae>
			break;
		case CLEAN2_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     40c:	80 91 2b 04 	lds	r24, 0x042B
     410:	8f 7e       	andi	r24, 0xEF	; 239
     412:	80 93 2b 04 	sts	0x042B, r24
     416:	2f c0       	rjmp	.+94     	; 0x476 <brush2_action+0xe6>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2START2:
			*pfixtureMotor = 0;
     418:	11 82       	std	Z+1, r1	; 0x01
     41a:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     41c:	80 91 27 04 	lds	r24, 0x0427
     420:	8b 7f       	andi	r24, 0xFB	; 251
     422:	80 93 27 04 	sts	0x0427, r24
			*pbrush2Motor = 1;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	8d 93       	st	X+, r24
     42c:	9c 93       	st	X, r25
			u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     42e:	80 91 28 04 	lds	r24, 0x0428
     432:	81 60       	ori	r24, 0x01	; 1
     434:	80 93 28 04 	sts	0x0428, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     438:	80 91 2a 04 	lds	r24, 0x042A
     43c:	8f 77       	andi	r24, 0x7F	; 127
     43e:	80 93 2a 04 	sts	0x042A, r24
     442:	22 c0       	rjmp	.+68     	; 0x488 <brush2_action+0xf8>
			break;
		case CLEAN2_3:
			*pbrush2Motor = 1;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	8d 93       	st	X+, r24
     44a:	9c 93       	st	X, r25
     44c:	16 c0       	rjmp	.+44     	; 0x47a <brush2_action+0xea>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP2:
			*pbrush2Motor = 0;
     44e:	1d 92       	st	X+, r1
     450:	1c 92       	st	X, r1
			*pfixtureMotor = 0;
     452:	11 82       	std	Z+1, r1	; 0x01
     454:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     456:	80 91 28 04 	lds	r24, 0x0428
     45a:	8e 7f       	andi	r24, 0xFE	; 254
     45c:	80 93 28 04 	sts	0x0428, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     460:	80 91 2a 04 	lds	r24, 0x042A
     464:	80 68       	ori	r24, 0x80	; 128
     466:	80 93 2a 04 	sts	0x042A, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     46a:	80 91 27 04 	lds	r24, 0x0427
     46e:	87 7f       	andi	r24, 0xF7	; 247
     470:	80 93 27 04 	sts	0x0427, r24
     474:	09 c0       	rjmp	.+18     	; 0x488 <brush2_action+0xf8>
			break;
		//*************************************************
		case MOVED1:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	91 83       	std	Z+1, r25	; 0x01
     47c:	80 83       	st	Z, r24
     47e:	80 91 2b 04 	lds	r24, 0x042B
     482:	80 62       	ori	r24, 0x20	; 32
     484:	80 93 2b 04 	sts	0x042B, r24
			break;
	}
}
     488:	ff 90       	pop	r15
     48a:	ef 90       	pop	r14
     48c:	08 95       	ret

0000048e <dry_action>:

void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	ea 01       	movw	r28, r20
     498:	f9 01       	movw	r30, r18
     49a:	d6 01       	movw	r26, r12
	switch(state){
     49c:	8d 31       	cpi	r24, 0x1D	; 29
     49e:	91 05       	cpc	r25, r1
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <dry_action+0x16>
     4a2:	57 c0       	rjmp	.+174    	; 0x552 <dry_action+0xc4>
     4a4:	8e 31       	cpi	r24, 0x1E	; 30
     4a6:	91 05       	cpc	r25, r1
     4a8:	a4 f4       	brge	.+40     	; 0x4d2 <dry_action+0x44>
     4aa:	8a 31       	cpi	r24, 0x1A	; 26
     4ac:	91 05       	cpc	r25, r1
     4ae:	69 f1       	breq	.+90     	; 0x50a <dry_action+0x7c>
     4b0:	8b 31       	cpi	r24, 0x1B	; 27
     4b2:	91 05       	cpc	r25, r1
     4b4:	3c f4       	brge	.+14     	; 0x4c4 <dry_action+0x36>
     4b6:	88 31       	cpi	r24, 0x18	; 24
     4b8:	91 05       	cpc	r25, r1
     4ba:	09 f1       	breq	.+66     	; 0x4fe <dry_action+0x70>
     4bc:	49 97       	sbiw	r24, 0x19	; 25
     4be:	09 f0       	breq	.+2      	; 0x4c2 <dry_action+0x34>
     4c0:	90 c0       	rjmp	.+288    	; 0x5e2 <dry_action+0x154>
     4c2:	68 c0       	rjmp	.+208    	; 0x594 <dry_action+0x106>
     4c4:	8b 31       	cpi	r24, 0x1B	; 27
     4c6:	91 05       	cpc	r25, r1
     4c8:	79 f1       	breq	.+94     	; 0x528 <dry_action+0x9a>
     4ca:	4c 97       	sbiw	r24, 0x1c	; 28
     4cc:	09 f0       	breq	.+2      	; 0x4d0 <dry_action+0x42>
     4ce:	89 c0       	rjmp	.+274    	; 0x5e2 <dry_action+0x154>
     4d0:	38 c0       	rjmp	.+112    	; 0x542 <dry_action+0xb4>
     4d2:	80 32       	cpi	r24, 0x20	; 32
     4d4:	91 05       	cpc	r25, r1
     4d6:	09 f4       	brne	.+2      	; 0x4da <dry_action+0x4c>
     4d8:	5d c0       	rjmp	.+186    	; 0x594 <dry_action+0x106>
     4da:	81 32       	cpi	r24, 0x21	; 33
     4dc:	91 05       	cpc	r25, r1
     4de:	3c f4       	brge	.+14     	; 0x4ee <dry_action+0x60>
     4e0:	8e 31       	cpi	r24, 0x1E	; 30
     4e2:	91 05       	cpc	r25, r1
     4e4:	d9 f1       	breq	.+118    	; 0x55c <dry_action+0xce>
     4e6:	4f 97       	sbiw	r24, 0x1f	; 31
     4e8:	09 f0       	breq	.+2      	; 0x4ec <dry_action+0x5e>
     4ea:	7b c0       	rjmp	.+246    	; 0x5e2 <dry_action+0x154>
     4ec:	4c c0       	rjmp	.+152    	; 0x586 <dry_action+0xf8>
     4ee:	81 32       	cpi	r24, 0x21	; 33
     4f0:	91 05       	cpc	r25, r1
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <dry_action+0x68>
     4f4:	5e c0       	rjmp	.+188    	; 0x5b2 <dry_action+0x124>
     4f6:	82 97       	sbiw	r24, 0x22	; 34
     4f8:	09 f0       	breq	.+2      	; 0x4fc <dry_action+0x6e>
     4fa:	73 c0       	rjmp	.+230    	; 0x5e2 <dry_action+0x154>
     4fc:	69 c0       	rjmp	.+210    	; 0x5d0 <dry_action+0x142>
		case D1START:
			*pfixtureMotor = 0;
     4fe:	11 82       	std	Z+1, r1	; 0x01
     500:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.airKnife = 0;
     502:	80 91 28 04 	lds	r24, 0x0428
     506:	87 7f       	andi	r24, 0xF7	; 247
     508:	0c c0       	rjmp	.+24     	; 0x522 <dry_action+0x94>
		case DRY1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case D1STOP:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	91 83       	std	Z+1, r25	; 0x01
     510:	80 83       	st	Z, r24
     512:	80 91 2b 04 	lds	r24, 0x042B
     516:	80 62       	ori	r24, 0x20	; 32
     518:	80 93 2b 04 	sts	0x042B, r24
			u_outputByte1.bits_in_outputByte1.airKnife = 1;
     51c:	80 91 28 04 	lds	r24, 0x0428
     520:	88 60       	ori	r24, 0x08	; 8
     522:	80 93 28 04 	sts	0x0428, r24
     526:	5d c0       	rjmp	.+186    	; 0x5e2 <dry_action+0x154>
			break;
		case D2START:
			*pfixtureMotor = 0;
     528:	11 82       	std	Z+1, r1	; 0x01
     52a:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
     52c:	80 91 27 04 	lds	r24, 0x0427
     530:	80 64       	ori	r24, 0x40	; 64
			u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     532:	8f 7d       	andi	r24, 0xDF	; 223
     534:	80 93 27 04 	sts	0x0427, r24
			*ppaperTowelMotor = 1;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	8d 93       	st	X+, r24
     53e:	9c 93       	st	X, r25
     540:	50 c0       	rjmp	.+160    	; 0x5e2 <dry_action+0x154>
			break;
		case D2RAISE:
			*ppaperTowelMotor = 1;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	8d 93       	st	X+, r24
     548:	9c 93       	st	X, r25
			u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     54a:	80 91 28 04 	lds	r24, 0x0428
     54e:	8d 7f       	andi	r24, 0xFD	; 253
     550:	e8 cf       	rjmp	.-48     	; 0x522 <dry_action+0x94>
			break;
		case DRY2:
			*ppaperTowelMotor = 1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	8d 93       	st	X+, r24
     558:	9c 93       	st	X, r25
     55a:	23 c0       	rjmp	.+70     	; 0x5a2 <dry_action+0x114>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case D2STOP:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	91 83       	std	Z+1, r25	; 0x01
     562:	80 83       	st	Z, r24
     564:	80 91 2b 04 	lds	r24, 0x042B
     568:	80 62       	ori	r24, 0x20	; 32
     56a:	80 93 2b 04 	sts	0x042B, r24
			*ppaperTowelMotor = 0;
     56e:	1d 92       	st	X+, r1
     570:	1c 92       	st	X, r1
				u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
     572:	80 91 27 04 	lds	r24, 0x0427
     576:	8f 7b       	andi	r24, 0xBF	; 191
     578:	80 93 27 04 	sts	0x0427, r24
			u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     57c:	80 91 28 04 	lds	r24, 0x0428
     580:	82 60       	ori	r24, 0x02	; 2
			u_outputByte1.bits_in_outputByte1.ptLower = 0;
     582:	8b 7f       	andi	r24, 0xFB	; 251
     584:	ce cf       	rjmp	.-100    	; 0x522 <dry_action+0x94>
			break;
		case RAISEL2:
			*pfixtureMotor = 0;
     586:	11 82       	std	Z+1, r1	; 0x01
     588:	10 82       	st	Z, r1
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     58a:	80 91 2a 04 	lds	r24, 0x042A
     58e:	87 7f       	andi	r24, 0xF7	; 247
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     590:	80 61       	ori	r24, 0x10	; 16
     592:	1b c0       	rjmp	.+54     	; 0x5ca <dry_action+0x13c>
			break;
		case FIXH:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     594:	80 91 2b 04 	lds	r24, 0x042B
     598:	8f 7e       	andi	r24, 0xEF	; 239
     59a:	80 93 2b 04 	sts	0x042B, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	91 83       	std	Z+1, r25	; 0x01
     5a4:	80 83       	st	Z, r24
     5a6:	80 91 2b 04 	lds	r24, 0x042B
     5aa:	80 62       	ori	r24, 0x20	; 32
     5ac:	80 93 2b 04 	sts	0x042B, r24
     5b0:	18 c0       	rjmp	.+48     	; 0x5e2 <dry_action+0x154>
			break;
		case LOWERL3:
			*pfixtureMotor = 0;
     5b2:	11 82       	std	Z+1, r1	; 0x01
     5b4:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     5b6:	80 91 2b 04 	lds	r24, 0x042B
     5ba:	8f 7d       	andi	r24, 0xDF	; 223
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     5bc:	84 60       	ori	r24, 0x04	; 4
     5be:	80 93 2b 04 	sts	0x042B, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     5c2:	80 91 2a 04 	lds	r24, 0x042A
     5c6:	88 60       	ori	r24, 0x08	; 8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     5c8:	8f 7e       	andi	r24, 0xEF	; 239
     5ca:	80 93 2a 04 	sts	0x042A, r24
     5ce:	09 c0       	rjmp	.+18     	; 0x5e2 <dry_action+0x154>
			break;
		case UNLOAD:
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     5d0:	80 91 2b 04 	lds	r24, 0x042B
     5d4:	8d 7f       	andi	r24, 0xFD	; 253
     5d6:	80 93 2b 04 	sts	0x042B, r24
			*pplateLoadMotor = 1;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	99 83       	std	Y+1, r25	; 0x01
     5e0:	88 83       	st	Y, r24
			break;
	}
}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	df 90       	pop	r13
     5e8:	cf 90       	pop	r12
     5ea:	08 95       	ret

000005ec <button_debounce>:

bool button_debounce(int counter, int *pstateButton)
{
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	8c 01       	movw	r16, r24
     5f6:	eb 01       	movw	r28, r22
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && is_digital_input_high(IO_D0)){
     5f8:	88 81       	ld	r24, Y
     5fa:	99 81       	ldd	r25, Y+1	; 0x01
     5fc:	89 2b       	or	r24, r25
     5fe:	69 f4       	brne	.+26     	; 0x61a <button_debounce+0x2e>
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     606:	88 23       	and	r24, r24
     608:	41 f0       	breq	.+16     	; 0x61a <button_debounce+0x2e>
		counterRefPush = counter;
     60a:	10 93 f1 03 	sts	0x03F1, r17
     60e:	00 93 f0 03 	sts	0x03F0, r16
		*pstateButton = PRESSED;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	99 83       	std	Y+1, r25	; 0x01
     618:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     61a:	88 81       	ld	r24, Y
     61c:	99 81       	ldd	r25, Y+1	; 0x01
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	f9 f4       	brne	.+62     	; 0x660 <button_debounce+0x74>
		if(counter - counterRefPush > 15){
     622:	80 91 f0 03 	lds	r24, 0x03F0
     626:	90 91 f1 03 	lds	r25, 0x03F1
     62a:	98 01       	movw	r18, r16
     62c:	28 1b       	sub	r18, r24
     62e:	39 0b       	sbc	r19, r25
     630:	20 31       	cpi	r18, 0x10	; 16
     632:	31 05       	cpc	r19, r1
     634:	74 f0       	brlt	.+28     	; 0x652 <button_debounce+0x66>
			if(!is_digital_input_high(IO_D0)){
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     63c:	88 23       	and	r24, r24
     63e:	81 f4       	brne	.+32     	; 0x660 <button_debounce+0x74>
				counterRefRel = counter;
     640:	10 93 ef 03 	sts	0x03EF, r17
     644:	00 93 ee 03 	sts	0x03EE, r16
				*pstateButton = RELEASED;
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	99 83       	std	Y+1, r25	; 0x01
     64e:	88 83       	st	Y, r24
     650:	07 c0       	rjmp	.+14     	; 0x660 <button_debounce+0x74>
			}
		}
		else if(!is_digital_input_high(IO_D0)){
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     658:	88 23       	and	r24, r24
     65a:	11 f4       	brne	.+4      	; 0x660 <button_debounce+0x74>
			*pstateButton = NONE;
     65c:	19 82       	std	Y+1, r1	; 0x01
     65e:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     660:	88 81       	ld	r24, Y
     662:	99 81       	ldd	r25, Y+1	; 0x01
     664:	02 97       	sbiw	r24, 0x02	; 2
     666:	d9 f4       	brne	.+54     	; 0x69e <button_debounce+0xb2>
		if(is_digital_input_high(IO_D0)){
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     66e:	88 23       	and	r24, r24
     670:	49 f0       	breq	.+18     	; 0x684 <button_debounce+0x98>
			*pstateButton = PRESSED;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	99 83       	std	Y+1, r25	; 0x01
     678:	88 83       	st	Y, r24
			counterRefPush = counter;
     67a:	10 93 f1 03 	sts	0x03F1, r17
     67e:	00 93 f0 03 	sts	0x03F0, r16
     682:	0d c0       	rjmp	.+26     	; 0x69e <button_debounce+0xb2>
		}
		else if(counter - counterRefRel > 15){
     684:	80 91 ee 03 	lds	r24, 0x03EE
     688:	90 91 ef 03 	lds	r25, 0x03EF
     68c:	08 1b       	sub	r16, r24
     68e:	19 0b       	sbc	r17, r25
     690:	00 31       	cpi	r16, 0x10	; 16
     692:	11 05       	cpc	r17, r1
     694:	24 f0       	brlt	.+8      	; 0x69e <button_debounce+0xb2>
			*pstateButton = NONE;
     696:	19 82       	std	Y+1, r1	; 0x01
     698:	18 82       	st	Y, r1
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	01 c0       	rjmp	.+2      	; 0x6a0 <button_debounce+0xb4>
			return true;
     69e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	08 95       	ret

000006aa <init_trans>:

bool init_trans(int state, bool buttonTriggered, int counter, int counterRef){
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	dc 01       	movw	r26, r24
     6b0:	86 2f       	mov	r24, r22
     6b2:	fa 01       	movw	r30, r20
     6b4:	b9 01       	movw	r22, r18
	return((state == INIT && buttonTriggered)||
     6b6:	10 97       	sbiw	r26, 0x00	; 0
     6b8:	19 f4       	brne	.+6      	; 0x6c0 <init_trans+0x16>
     6ba:	88 23       	and	r24, r24
     6bc:	21 f1       	breq	.+72     	; 0x706 <init_trans+0x5c>
     6be:	45 c0       	rjmp	.+138    	; 0x74a <init_trans+0xa0>
     6c0:	a1 30       	cpi	r26, 0x01	; 1
     6c2:	b1 05       	cpc	r27, r1
     6c4:	b1 f4       	brne	.+44     	; 0x6f2 <init_trans+0x48>
     6c6:	42 1b       	sub	r20, r18
     6c8:	53 0b       	sbc	r21, r19
     6ca:	20 91 ae 03 	lds	r18, 0x03AE
     6ce:	30 91 af 03 	lds	r19, 0x03AF
     6d2:	80 91 a0 03 	lds	r24, 0x03A0
     6d6:	90 91 a1 03 	lds	r25, 0x03A1
     6da:	ec 01       	movw	r28, r24
     6dc:	2c 9f       	mul	r18, r28
     6de:	c0 01       	movw	r24, r0
     6e0:	2d 9f       	mul	r18, r29
     6e2:	90 0d       	add	r25, r0
     6e4:	3c 9f       	mul	r19, r28
     6e6:	90 0d       	add	r25, r0
     6e8:	11 24       	eor	r1, r1
     6ea:	84 17       	cp	r24, r20
     6ec:	95 07       	cpc	r25, r21
     6ee:	cc f4       	brge	.+50     	; 0x722 <init_trans+0x78>
     6f0:	2c c0       	rjmp	.+88     	; 0x74a <init_trans+0xa0>
     6f2:	a2 30       	cpi	r26, 0x02	; 2
     6f4:	b1 05       	cpc	r27, r1
     6f6:	d1 f0       	breq	.+52     	; 0x72c <init_trans+0x82>
     6f8:	a3 30       	cpi	r26, 0x03	; 3
     6fa:	b1 05       	cpc	r27, r1
     6fc:	21 f4       	brne	.+8      	; 0x706 <init_trans+0x5c>
     6fe:	80 91 26 04 	lds	r24, 0x0426
     702:	86 95       	lsr	r24
     704:	08 c0       	rjmp	.+16     	; 0x716 <init_trans+0x6c>
     706:	a4 30       	cpi	r26, 0x04	; 4
     708:	b1 05       	cpc	r27, r1
     70a:	59 f4       	brne	.+22     	; 0x722 <init_trans+0x78>
     70c:	80 91 26 04 	lds	r24, 0x0426
     710:	86 95       	lsr	r24
     712:	86 95       	lsr	r24
     714:	86 95       	lsr	r24
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	89 27       	eor	r24, r25
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	81 70       	andi	r24, 0x01	; 1
     71e:	90 70       	andi	r25, 0x00	; 0
     720:	16 c0       	rjmp	.+44     	; 0x74e <init_trans+0xa4>
     722:	15 97       	sbiw	r26, 0x05	; 5
     724:	19 f0       	breq	.+6      	; 0x72c <init_trans+0x82>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	11 c0       	rjmp	.+34     	; 0x74e <init_trans+0xa4>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	e6 1b       	sub	r30, r22
     732:	f7 0b       	sbc	r31, r23
     734:	80 91 90 03 	lds	r24, 0x0390
     738:	90 91 91 03 	lds	r25, 0x0391
     73c:	8e 17       	cp	r24, r30
     73e:	9f 07       	cpc	r25, r31
     740:	14 f4       	brge	.+4      	; 0x746 <init_trans+0x9c>
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	c9 01       	movw	r24, r18
     748:	02 c0       	rjmp	.+4      	; 0x74e <init_trans+0xa4>
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	90 e0       	ldi	r25, 0x00	; 0
	(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/)||
	(state == RAISEL1 && counter - counterRef > pWait)||
	(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0)||
	(state == LOWERL2 && counter - counterRef > pWait));
}
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <firstB_trans>:

bool firstB_trans(int state, int counter, int counterRef){
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	fc 01       	movw	r30, r24
     75a:	da 01       	movw	r26, r20
	//Had references to counterRef14...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/)||
     75c:	86 30       	cpi	r24, 0x06	; 6
     75e:	91 05       	cpc	r25, r1
     760:	b9 f4       	brne	.+46     	; 0x790 <firstB_trans+0x3c>
     762:	ab 01       	movw	r20, r22
     764:	4a 1b       	sub	r20, r26
     766:	5b 0b       	sbc	r21, r27
     768:	20 91 b2 03 	lds	r18, 0x03B2
     76c:	30 91 b3 03 	lds	r19, 0x03B3
     770:	80 91 a2 03 	lds	r24, 0x03A2
     774:	90 91 a3 03 	lds	r25, 0x03A3
     778:	ec 01       	movw	r28, r24
     77a:	2c 9f       	mul	r18, r28
     77c:	c0 01       	movw	r24, r0
     77e:	2d 9f       	mul	r18, r29
     780:	90 0d       	add	r25, r0
     782:	3c 9f       	mul	r19, r28
     784:	90 0d       	add	r25, r0
     786:	11 24       	eor	r1, r1
     788:	84 17       	cp	r24, r20
     78a:	95 07       	cpc	r25, r21
     78c:	bc f5       	brge	.+110    	; 0x7fc <firstB_trans+0xa8>
     78e:	83 c0       	rjmp	.+262    	; 0x896 <firstB_trans+0x142>
     790:	87 30       	cpi	r24, 0x07	; 7
     792:	91 05       	cpc	r25, r1
     794:	59 f4       	brne	.+22     	; 0x7ac <firstB_trans+0x58>
     796:	9b 01       	movw	r18, r22
     798:	24 1b       	sub	r18, r20
     79a:	35 0b       	sbc	r19, r21
     79c:	80 91 92 03 	lds	r24, 0x0392
     7a0:	90 91 93 03 	lds	r25, 0x0393
     7a4:	82 17       	cp	r24, r18
     7a6:	93 07       	cpc	r25, r19
     7a8:	64 f5       	brge	.+88     	; 0x802 <firstB_trans+0xae>
     7aa:	75 c0       	rjmp	.+234    	; 0x896 <firstB_trans+0x142>
     7ac:	88 30       	cpi	r24, 0x08	; 8
     7ae:	91 05       	cpc	r25, r1
     7b0:	59 f4       	brne	.+22     	; 0x7c8 <firstB_trans+0x74>
     7b2:	9b 01       	movw	r18, r22
     7b4:	24 1b       	sub	r18, r20
     7b6:	35 0b       	sbc	r19, r21
     7b8:	80 91 90 03 	lds	r24, 0x0390
     7bc:	90 91 91 03 	lds	r25, 0x0391
     7c0:	82 17       	cp	r24, r18
     7c2:	93 07       	cpc	r25, r19
     7c4:	b4 f5       	brge	.+108    	; 0x832 <firstB_trans+0xde>
     7c6:	67 c0       	rjmp	.+206    	; 0x896 <firstB_trans+0x142>
     7c8:	89 30       	cpi	r24, 0x09	; 9
     7ca:	91 05       	cpc	r25, r1
     7cc:	b9 f4       	brne	.+46     	; 0x7fc <firstB_trans+0xa8>
     7ce:	ab 01       	movw	r20, r22
     7d0:	4a 1b       	sub	r20, r26
     7d2:	5b 0b       	sbc	r21, r27
     7d4:	20 91 aa 03 	lds	r18, 0x03AA
     7d8:	30 91 ab 03 	lds	r19, 0x03AB
     7dc:	80 91 a2 03 	lds	r24, 0x03A2
     7e0:	90 91 a3 03 	lds	r25, 0x03A3
     7e4:	ec 01       	movw	r28, r24
     7e6:	2c 9f       	mul	r18, r28
     7e8:	c0 01       	movw	r24, r0
     7ea:	2d 9f       	mul	r18, r29
     7ec:	90 0d       	add	r25, r0
     7ee:	3c 9f       	mul	r19, r28
     7f0:	90 0d       	add	r25, r0
     7f2:	11 24       	eor	r1, r1
     7f4:	84 17       	cp	r24, r20
     7f6:	95 07       	cpc	r25, r21
     7f8:	74 f5       	brge	.+92     	; 0x856 <firstB_trans+0x102>
     7fa:	4d c0       	rjmp	.+154    	; 0x896 <firstB_trans+0x142>
     7fc:	ea 30       	cpi	r30, 0x0A	; 10
     7fe:	f1 05       	cpc	r31, r1
     800:	d9 f0       	breq	.+54     	; 0x838 <firstB_trans+0xe4>
     802:	eb 30       	cpi	r30, 0x0B	; 11
     804:	f1 05       	cpc	r31, r1
     806:	a9 f4       	brne	.+42     	; 0x832 <firstB_trans+0xde>
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	6a 1b       	sub	r22, r26
     80e:	7b 0b       	sbc	r23, r27
     810:	80 91 aa 03 	lds	r24, 0x03AA
     814:	90 91 ab 03 	lds	r25, 0x03AB
     818:	20 91 a2 03 	lds	r18, 0x03A2
     81c:	30 91 a3 03 	lds	r19, 0x03A3
     820:	fc 01       	movw	r30, r24
     822:	e2 9f       	mul	r30, r18
     824:	c0 01       	movw	r24, r0
     826:	e3 9f       	mul	r30, r19
     828:	90 0d       	add	r25, r0
     82a:	f2 9f       	mul	r31, r18
     82c:	90 0d       	add	r25, r0
     82e:	11 24       	eor	r1, r1
     830:	2b c0       	rjmp	.+86     	; 0x888 <firstB_trans+0x134>
     832:	ec 30       	cpi	r30, 0x0C	; 12
     834:	f1 05       	cpc	r31, r1
     836:	79 f4       	brne	.+30     	; 0x856 <firstB_trans+0x102>
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	6a 1b       	sub	r22, r26
     83e:	7b 0b       	sbc	r23, r27
     840:	80 91 90 03 	lds	r24, 0x0390
     844:	90 91 91 03 	lds	r25, 0x0391
     848:	86 17       	cp	r24, r22
     84a:	97 07       	cpc	r25, r23
     84c:	14 f4       	brge	.+4      	; 0x852 <firstB_trans+0xfe>
     84e:	21 e0       	ldi	r18, 0x01	; 1
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	c9 01       	movw	r24, r18
     854:	22 c0       	rjmp	.+68     	; 0x89a <firstB_trans+0x146>
     856:	3d 97       	sbiw	r30, 0x0d	; 13
     858:	19 f0       	breq	.+6      	; 0x860 <firstB_trans+0x10c>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	1d c0       	rjmp	.+58     	; 0x89a <firstB_trans+0x146>
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	6a 1b       	sub	r22, r26
     866:	7b 0b       	sbc	r23, r27
     868:	80 91 aa 03 	lds	r24, 0x03AA
     86c:	90 91 ab 03 	lds	r25, 0x03AB
     870:	20 91 a2 03 	lds	r18, 0x03A2
     874:	30 91 a3 03 	lds	r19, 0x03A3
     878:	ec 01       	movw	r28, r24
     87a:	c2 9f       	mul	r28, r18
     87c:	c0 01       	movw	r24, r0
     87e:	c3 9f       	mul	r28, r19
     880:	90 0d       	add	r25, r0
     882:	d2 9f       	mul	r29, r18
     884:	90 0d       	add	r25, r0
     886:	11 24       	eor	r1, r1
     888:	86 17       	cp	r24, r22
     88a:	97 07       	cpc	r25, r23
     88c:	14 f4       	brge	.+4      	; 0x892 <firstB_trans+0x13e>
     88e:	41 e0       	ldi	r20, 0x01	; 1
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	ca 01       	movw	r24, r20
     894:	02 c0       	rjmp	.+4      	; 0x89a <firstB_trans+0x146>
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
	(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||
	(state == B1STOP1 && counter - counterRef > pWait)||
	(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/)||
	(state == B1START2 && counter - counterRef > pWait)||
	(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate));
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <secondB_trans>:

bool secondB_trans(int state, int counter, int counterRef){
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	fc 01       	movw	r30, r24
     8a6:	da 01       	movw	r26, r20
	return((state == B2SET && counter - counterRef > mWait)||
     8a8:	8f 30       	cpi	r24, 0x0F	; 15
     8aa:	91 05       	cpc	r25, r1
     8ac:	59 f4       	brne	.+22     	; 0x8c4 <secondB_trans+0x24>
     8ae:	9b 01       	movw	r18, r22
     8b0:	24 1b       	sub	r18, r20
     8b2:	35 0b       	sbc	r19, r21
     8b4:	80 91 92 03 	lds	r24, 0x0392
     8b8:	90 91 93 03 	lds	r25, 0x0393
     8bc:	82 17       	cp	r24, r18
     8be:	93 07       	cpc	r25, r19
     8c0:	c4 f5       	brge	.+112    	; 0x932 <secondB_trans+0x92>
     8c2:	9e c0       	rjmp	.+316    	; 0xa00 <secondB_trans+0x160>
     8c4:	80 31       	cpi	r24, 0x10	; 16
     8c6:	91 05       	cpc	r25, r1
     8c8:	61 f4       	brne	.+24     	; 0x8e2 <secondB_trans+0x42>
     8ca:	9b 01       	movw	r18, r22
     8cc:	24 1b       	sub	r18, r20
     8ce:	35 0b       	sbc	r19, r21
     8d0:	80 91 90 03 	lds	r24, 0x0390
     8d4:	90 91 91 03 	lds	r25, 0x0391
     8d8:	82 17       	cp	r24, r18
     8da:	93 07       	cpc	r25, r19
     8dc:	0c f0       	brlt	.+2      	; 0x8e0 <secondB_trans+0x40>
     8de:	43 c0       	rjmp	.+134    	; 0x966 <secondB_trans+0xc6>
     8e0:	8f c0       	rjmp	.+286    	; 0xa00 <secondB_trans+0x160>
     8e2:	81 31       	cpi	r24, 0x11	; 17
     8e4:	91 05       	cpc	r25, r1
     8e6:	b9 f4       	brne	.+46     	; 0x916 <secondB_trans+0x76>
     8e8:	ab 01       	movw	r20, r22
     8ea:	4a 1b       	sub	r20, r26
     8ec:	5b 0b       	sbc	r21, r27
     8ee:	20 91 aa 03 	lds	r18, 0x03AA
     8f2:	30 91 ab 03 	lds	r19, 0x03AB
     8f6:	80 91 a2 03 	lds	r24, 0x03A2
     8fa:	90 91 a3 03 	lds	r25, 0x03A3
     8fe:	ec 01       	movw	r28, r24
     900:	2c 9f       	mul	r18, r28
     902:	c0 01       	movw	r24, r0
     904:	2d 9f       	mul	r18, r29
     906:	90 0d       	add	r25, r0
     908:	3c 9f       	mul	r19, r28
     90a:	90 0d       	add	r25, r0
     90c:	11 24       	eor	r1, r1
     90e:	84 17       	cp	r24, r20
     910:	95 07       	cpc	r25, r21
     912:	64 f5       	brge	.+88     	; 0x96c <secondB_trans+0xcc>
     914:	75 c0       	rjmp	.+234    	; 0xa00 <secondB_trans+0x160>
     916:	82 31       	cpi	r24, 0x12	; 18
     918:	91 05       	cpc	r25, r1
     91a:	59 f4       	brne	.+22     	; 0x932 <secondB_trans+0x92>
     91c:	9b 01       	movw	r18, r22
     91e:	24 1b       	sub	r18, r20
     920:	35 0b       	sbc	r19, r21
     922:	80 91 90 03 	lds	r24, 0x0390
     926:	90 91 91 03 	lds	r25, 0x0391
     92a:	82 17       	cp	r24, r18
     92c:	93 07       	cpc	r25, r19
     92e:	b4 f5       	brge	.+108    	; 0x99c <secondB_trans+0xfc>
     930:	67 c0       	rjmp	.+206    	; 0xa00 <secondB_trans+0x160>
     932:	e3 31       	cpi	r30, 0x13	; 19
     934:	f1 05       	cpc	r31, r1
     936:	b9 f4       	brne	.+46     	; 0x966 <secondB_trans+0xc6>
     938:	ab 01       	movw	r20, r22
     93a:	4a 1b       	sub	r20, r26
     93c:	5b 0b       	sbc	r21, r27
     93e:	20 91 aa 03 	lds	r18, 0x03AA
     942:	30 91 ab 03 	lds	r19, 0x03AB
     946:	80 91 a2 03 	lds	r24, 0x03A2
     94a:	90 91 a3 03 	lds	r25, 0x03A3
     94e:	ec 01       	movw	r28, r24
     950:	2c 9f       	mul	r18, r28
     952:	c0 01       	movw	r24, r0
     954:	2d 9f       	mul	r18, r29
     956:	90 0d       	add	r25, r0
     958:	3c 9f       	mul	r19, r28
     95a:	90 0d       	add	r25, r0
     95c:	11 24       	eor	r1, r1
     95e:	84 17       	cp	r24, r20
     960:	95 07       	cpc	r25, r21
     962:	74 f5       	brge	.+92     	; 0x9c0 <secondB_trans+0x120>
     964:	4d c0       	rjmp	.+154    	; 0xa00 <secondB_trans+0x160>
     966:	e4 31       	cpi	r30, 0x14	; 20
     968:	f1 05       	cpc	r31, r1
     96a:	d9 f0       	breq	.+54     	; 0x9a2 <secondB_trans+0x102>
     96c:	e5 31       	cpi	r30, 0x15	; 21
     96e:	f1 05       	cpc	r31, r1
     970:	a9 f4       	brne	.+42     	; 0x99c <secondB_trans+0xfc>
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	6a 1b       	sub	r22, r26
     978:	7b 0b       	sbc	r23, r27
     97a:	80 91 aa 03 	lds	r24, 0x03AA
     97e:	90 91 ab 03 	lds	r25, 0x03AB
     982:	20 91 a2 03 	lds	r18, 0x03A2
     986:	30 91 a3 03 	lds	r19, 0x03A3
     98a:	fc 01       	movw	r30, r24
     98c:	e2 9f       	mul	r30, r18
     98e:	c0 01       	movw	r24, r0
     990:	e3 9f       	mul	r30, r19
     992:	90 0d       	add	r25, r0
     994:	f2 9f       	mul	r31, r18
     996:	90 0d       	add	r25, r0
     998:	11 24       	eor	r1, r1
     99a:	2b c0       	rjmp	.+86     	; 0x9f2 <secondB_trans+0x152>
     99c:	e6 31       	cpi	r30, 0x16	; 22
     99e:	f1 05       	cpc	r31, r1
     9a0:	79 f4       	brne	.+30     	; 0x9c0 <secondB_trans+0x120>
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	6a 1b       	sub	r22, r26
     9a8:	7b 0b       	sbc	r23, r27
     9aa:	80 91 90 03 	lds	r24, 0x0390
     9ae:	90 91 91 03 	lds	r25, 0x0391
     9b2:	86 17       	cp	r24, r22
     9b4:	97 07       	cpc	r25, r23
     9b6:	14 f4       	brge	.+4      	; 0x9bc <secondB_trans+0x11c>
     9b8:	21 e0       	ldi	r18, 0x01	; 1
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	c9 01       	movw	r24, r18
     9be:	22 c0       	rjmp	.+68     	; 0xa04 <secondB_trans+0x164>
     9c0:	77 97       	sbiw	r30, 0x17	; 23
     9c2:	19 f0       	breq	.+6      	; 0x9ca <secondB_trans+0x12a>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	1d c0       	rjmp	.+58     	; 0xa04 <secondB_trans+0x164>
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	6a 1b       	sub	r22, r26
     9d0:	7b 0b       	sbc	r23, r27
     9d2:	80 91 b6 03 	lds	r24, 0x03B6
     9d6:	90 91 b7 03 	lds	r25, 0x03B7
     9da:	20 91 a2 03 	lds	r18, 0x03A2
     9de:	30 91 a3 03 	lds	r19, 0x03A3
     9e2:	ec 01       	movw	r28, r24
     9e4:	c2 9f       	mul	r28, r18
     9e6:	c0 01       	movw	r24, r0
     9e8:	c3 9f       	mul	r28, r19
     9ea:	90 0d       	add	r25, r0
     9ec:	d2 9f       	mul	r29, r18
     9ee:	90 0d       	add	r25, r0
     9f0:	11 24       	eor	r1, r1
     9f2:	86 17       	cp	r24, r22
     9f4:	97 07       	cpc	r25, r23
     9f6:	14 f4       	brge	.+4      	; 0x9fc <secondB_trans+0x15c>
     9f8:	41 e0       	ldi	r20, 0x01	; 1
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	ca 01       	movw	r24, r20
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <secondB_trans+0x164>
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	90 e0       	ldi	r25, 0x00	; 0
	(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/)||
	(state == B2START2 && counter - counterRef > pWait)||
	(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||
	(state == B2STOP2 && counter - counterRef > pWait)||
	(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/));
}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <dry_trans>:

bool dry_trans(int state, int counter, int counterRef, int counterRefFive){
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	fc 01       	movw	r30, r24
     a10:	da 01       	movw	r26, r20
	//Had references to counterRef26, 30...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == D1START && counter - counterRef > kWait)||
     a12:	88 31       	cpi	r24, 0x18	; 24
     a14:	91 05       	cpc	r25, r1
     a16:	61 f4       	brne	.+24     	; 0xa30 <dry_trans+0x26>
     a18:	9b 01       	movw	r18, r22
     a1a:	24 1b       	sub	r18, r20
     a1c:	35 0b       	sbc	r19, r21
     a1e:	80 91 94 03 	lds	r24, 0x0394
     a22:	90 91 95 03 	lds	r25, 0x0395
     a26:	82 17       	cp	r24, r18
     a28:	93 07       	cpc	r25, r19
     a2a:	0c f0       	brlt	.+2      	; 0xa2e <dry_trans+0x24>
     a2c:	45 c0       	rjmp	.+138    	; 0xab8 <dry_trans+0xae>
     a2e:	de c0       	rjmp	.+444    	; 0xbec <dry_trans+0x1e2>
     a30:	89 31       	cpi	r24, 0x19	; 25
     a32:	91 05       	cpc	r25, r1
     a34:	b9 f4       	brne	.+46     	; 0xa64 <dry_trans+0x5a>
     a36:	ab 01       	movw	r20, r22
     a38:	4a 1b       	sub	r20, r26
     a3a:	5b 0b       	sbc	r21, r27
     a3c:	20 91 ac 03 	lds	r18, 0x03AC
     a40:	30 91 ad 03 	lds	r19, 0x03AD
     a44:	80 91 a2 03 	lds	r24, 0x03A2
     a48:	90 91 a3 03 	lds	r25, 0x03A3
     a4c:	ec 01       	movw	r28, r24
     a4e:	2c 9f       	mul	r18, r28
     a50:	c0 01       	movw	r24, r0
     a52:	2d 9f       	mul	r18, r29
     a54:	90 0d       	add	r25, r0
     a56:	3c 9f       	mul	r19, r28
     a58:	90 0d       	add	r25, r0
     a5a:	11 24       	eor	r1, r1
     a5c:	84 17       	cp	r24, r20
     a5e:	95 07       	cpc	r25, r21
     a60:	d4 f5       	brge	.+116    	; 0xad6 <dry_trans+0xcc>
     a62:	c4 c0       	rjmp	.+392    	; 0xbec <dry_trans+0x1e2>
     a64:	8a 31       	cpi	r24, 0x1A	; 26
     a66:	91 05       	cpc	r25, r1
     a68:	b9 f4       	brne	.+46     	; 0xa98 <dry_trans+0x8e>
     a6a:	ab 01       	movw	r20, r22
     a6c:	4a 1b       	sub	r20, r26
     a6e:	5b 0b       	sbc	r21, r27
     a70:	20 91 b8 03 	lds	r18, 0x03B8
     a74:	30 91 b9 03 	lds	r19, 0x03B9
     a78:	80 91 a2 03 	lds	r24, 0x03A2
     a7c:	90 91 a3 03 	lds	r25, 0x03A3
     a80:	ec 01       	movw	r28, r24
     a82:	2c 9f       	mul	r18, r28
     a84:	c0 01       	movw	r24, r0
     a86:	2d 9f       	mul	r18, r29
     a88:	90 0d       	add	r25, r0
     a8a:	3c 9f       	mul	r19, r28
     a8c:	90 0d       	add	r25, r0
     a8e:	11 24       	eor	r1, r1
     a90:	84 17       	cp	r24, r20
     a92:	95 07       	cpc	r25, r21
     a94:	dc f5       	brge	.+118    	; 0xb0c <dry_trans+0x102>
     a96:	aa c0       	rjmp	.+340    	; 0xbec <dry_trans+0x1e2>
     a98:	8b 31       	cpi	r24, 0x1B	; 27
     a9a:	91 05       	cpc	r25, r1
     a9c:	69 f4       	brne	.+26     	; 0xab8 <dry_trans+0xae>
     a9e:	cb 01       	movw	r24, r22
     aa0:	82 1b       	sub	r24, r18
     aa2:	93 0b       	sbc	r25, r19
     aa4:	9c 01       	movw	r18, r24
     aa6:	80 91 92 03 	lds	r24, 0x0392
     aaa:	90 91 93 03 	lds	r25, 0x0393
     aae:	82 17       	cp	r24, r18
     ab0:	93 07       	cpc	r25, r19
     ab2:	0c f0       	brlt	.+2      	; 0xab6 <dry_trans+0xac>
     ab4:	45 c0       	rjmp	.+138    	; 0xb40 <dry_trans+0x136>
     ab6:	9a c0       	rjmp	.+308    	; 0xbec <dry_trans+0x1e2>
     ab8:	ec 31       	cpi	r30, 0x1C	; 28
     aba:	f1 05       	cpc	r31, r1
     abc:	61 f4       	brne	.+24     	; 0xad6 <dry_trans+0xcc>
     abe:	9b 01       	movw	r18, r22
     ac0:	2a 1b       	sub	r18, r26
     ac2:	3b 0b       	sbc	r19, r27
     ac4:	80 91 90 03 	lds	r24, 0x0390
     ac8:	90 91 91 03 	lds	r25, 0x0391
     acc:	82 17       	cp	r24, r18
     ace:	93 07       	cpc	r25, r19
     ad0:	0c f0       	brlt	.+2      	; 0xad4 <dry_trans+0xca>
     ad2:	42 c0       	rjmp	.+132    	; 0xb58 <dry_trans+0x14e>
     ad4:	8b c0       	rjmp	.+278    	; 0xbec <dry_trans+0x1e2>
     ad6:	ed 31       	cpi	r30, 0x1D	; 29
     ad8:	f1 05       	cpc	r31, r1
     ada:	c1 f4       	brne	.+48     	; 0xb0c <dry_trans+0x102>
     adc:	ab 01       	movw	r20, r22
     ade:	4a 1b       	sub	r20, r26
     ae0:	5b 0b       	sbc	r21, r27
     ae2:	20 91 ac 03 	lds	r18, 0x03AC
     ae6:	30 91 ad 03 	lds	r19, 0x03AD
     aea:	80 91 a2 03 	lds	r24, 0x03A2
     aee:	90 91 a3 03 	lds	r25, 0x03A3
     af2:	ec 01       	movw	r28, r24
     af4:	2c 9f       	mul	r18, r28
     af6:	c0 01       	movw	r24, r0
     af8:	2d 9f       	mul	r18, r29
     afa:	90 0d       	add	r25, r0
     afc:	3c 9f       	mul	r19, r28
     afe:	90 0d       	add	r25, r0
     b00:	11 24       	eor	r1, r1
     b02:	84 17       	cp	r24, r20
     b04:	95 07       	cpc	r25, r21
     b06:	0c f0       	brlt	.+2      	; 0xb0a <dry_trans+0x100>
     b08:	3f c0       	rjmp	.+126    	; 0xb88 <dry_trans+0x17e>
     b0a:	70 c0       	rjmp	.+224    	; 0xbec <dry_trans+0x1e2>
     b0c:	ee 31       	cpi	r30, 0x1E	; 30
     b0e:	f1 05       	cpc	r31, r1
     b10:	b9 f4       	brne	.+46     	; 0xb40 <dry_trans+0x136>
     b12:	ab 01       	movw	r20, r22
     b14:	4a 1b       	sub	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	20 91 ba 03 	lds	r18, 0x03BA
     b1c:	30 91 bb 03 	lds	r19, 0x03BB
     b20:	80 91 a2 03 	lds	r24, 0x03A2
     b24:	90 91 a3 03 	lds	r25, 0x03A3
     b28:	ec 01       	movw	r28, r24
     b2a:	2c 9f       	mul	r18, r28
     b2c:	c0 01       	movw	r24, r0
     b2e:	2d 9f       	mul	r18, r29
     b30:	90 0d       	add	r25, r0
     b32:	3c 9f       	mul	r19, r28
     b34:	90 0d       	add	r25, r0
     b36:	11 24       	eor	r1, r1
     b38:	84 17       	cp	r24, r20
     b3a:	95 07       	cpc	r25, r21
     b3c:	bc f5       	brge	.+110    	; 0xbac <dry_trans+0x1a2>
     b3e:	56 c0       	rjmp	.+172    	; 0xbec <dry_trans+0x1e2>
     b40:	ef 31       	cpi	r30, 0x1F	; 31
     b42:	f1 05       	cpc	r31, r1
     b44:	49 f4       	brne	.+18     	; 0xb58 <dry_trans+0x14e>
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	6a 1b       	sub	r22, r26
     b4c:	7b 0b       	sbc	r23, r27
     b4e:	69 5e       	subi	r22, 0xE9	; 233
     b50:	73 40       	sbci	r23, 0x03	; 3
     b52:	0c f4       	brge	.+2      	; 0xb56 <dry_trans+0x14c>
     b54:	4d c0       	rjmp	.+154    	; 0xbf0 <dry_trans+0x1e6>
     b56:	4a c0       	rjmp	.+148    	; 0xbec <dry_trans+0x1e2>
     b58:	e0 32       	cpi	r30, 0x20	; 32
     b5a:	f1 05       	cpc	r31, r1
     b5c:	a9 f4       	brne	.+42     	; 0xb88 <dry_trans+0x17e>
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	6a 1b       	sub	r22, r26
     b64:	7b 0b       	sbc	r23, r27
     b66:	80 91 b0 03 	lds	r24, 0x03B0
     b6a:	90 91 b1 03 	lds	r25, 0x03B1
     b6e:	20 91 a2 03 	lds	r18, 0x03A2
     b72:	30 91 a3 03 	lds	r19, 0x03A3
     b76:	ec 01       	movw	r28, r24
     b78:	c2 9f       	mul	r28, r18
     b7a:	c0 01       	movw	r24, r0
     b7c:	c3 9f       	mul	r28, r19
     b7e:	90 0d       	add	r25, r0
     b80:	d2 9f       	mul	r29, r18
     b82:	90 0d       	add	r25, r0
     b84:	11 24       	eor	r1, r1
     b86:	2b c0       	rjmp	.+86     	; 0xbde <dry_trans+0x1d4>
     b88:	e1 32       	cpi	r30, 0x21	; 33
     b8a:	f1 05       	cpc	r31, r1
     b8c:	79 f4       	brne	.+30     	; 0xbac <dry_trans+0x1a2>
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	6a 1b       	sub	r22, r26
     b94:	7b 0b       	sbc	r23, r27
     b96:	80 91 90 03 	lds	r24, 0x0390
     b9a:	90 91 91 03 	lds	r25, 0x0391
     b9e:	86 17       	cp	r24, r22
     ba0:	97 07       	cpc	r25, r23
     ba2:	14 f4       	brge	.+4      	; 0xba8 <dry_trans+0x19e>
     ba4:	21 e0       	ldi	r18, 0x01	; 1
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	c9 01       	movw	r24, r18
     baa:	22 c0       	rjmp	.+68     	; 0xbf0 <dry_trans+0x1e6>
     bac:	b2 97       	sbiw	r30, 0x22	; 34
     bae:	19 f0       	breq	.+6      	; 0xbb6 <dry_trans+0x1ac>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	1d c0       	rjmp	.+58     	; 0xbf0 <dry_trans+0x1e6>
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	6a 1b       	sub	r22, r26
     bbc:	7b 0b       	sbc	r23, r27
     bbe:	80 91 ae 03 	lds	r24, 0x03AE
     bc2:	90 91 af 03 	lds	r25, 0x03AF
     bc6:	20 91 a0 03 	lds	r18, 0x03A0
     bca:	30 91 a1 03 	lds	r19, 0x03A1
     bce:	fc 01       	movw	r30, r24
     bd0:	e2 9f       	mul	r30, r18
     bd2:	c0 01       	movw	r24, r0
     bd4:	e3 9f       	mul	r30, r19
     bd6:	90 0d       	add	r25, r0
     bd8:	f2 9f       	mul	r31, r18
     bda:	90 0d       	add	r25, r0
     bdc:	11 24       	eor	r1, r1
     bde:	86 17       	cp	r24, r22
     be0:	97 07       	cpc	r25, r23
     be2:	14 f4       	brge	.+4      	; 0xbe8 <dry_trans+0x1de>
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	ca 01       	movw	r24, r20
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <dry_trans+0x1e6>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
	(state == D2STOP && counter - counterRef > totalStepLength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/)||
	(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/)||
	(state == FIXH && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/)||
	(state == LOWERL3 && counter - counterRef > pWait)||
	(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate));
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	08 95       	ret

00000bf6 <motor_and_write>:
	serial_print_string(msg);
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor)
{
     bf6:	6f 92       	push	r6
     bf8:	7f 92       	push	r7
     bfa:	8f 92       	push	r8
     bfc:	9f 92       	push	r9
     bfe:	af 92       	push	r10
     c00:	bf 92       	push	r11
     c02:	cf 92       	push	r12
     c04:	df 92       	push	r13
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	4c 01       	movw	r8, r24
     c14:	3a 01       	movw	r6, r20
     c16:	e9 01       	movw	r28, r18
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     c18:	fc 01       	movw	r30, r24
     c1a:	e6 1b       	sub	r30, r22
     c1c:	f7 0b       	sbc	r31, r23
     c1e:	60 91 a0 03 	lds	r22, 0x03A0
     c22:	70 91 a1 03 	lds	r23, 0x03A1
     c26:	cf 01       	movw	r24, r30
     c28:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <__divmodhi4>
     c2c:	20 91 96 03 	lds	r18, 0x0396
     c30:	30 91 97 03 	lds	r19, 0x0397
     c34:	82 17       	cp	r24, r18
     c36:	93 07       	cpc	r25, r19
     c38:	34 f4       	brge	.+12     	; 0xc46 <motor_and_write+0x50>
     c3a:	cd 2b       	or	r28, r29
     c3c:	21 f0       	breq	.+8      	; 0xc46 <motor_and_write+0x50>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     c3e:	80 91 2b 04 	lds	r24, 0x042B
     c42:	81 60       	ori	r24, 0x01	; 1
     c44:	03 c0       	rjmp	.+6      	; 0xc4c <motor_and_write+0x56>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     c46:	80 91 2b 04 	lds	r24, 0x042B
     c4a:	8e 7f       	andi	r24, 0xFE	; 254
     c4c:	80 93 2b 04 	sts	0x042B, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     c50:	60 91 a2 03 	lds	r22, 0x03A2
     c54:	70 91 a3 03 	lds	r23, 0x03A3
     c58:	cf 01       	movw	r24, r30
     c5a:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <__divmodhi4>
     c5e:	20 91 98 03 	lds	r18, 0x0398
     c62:	30 91 99 03 	lds	r19, 0x0399
     c66:	82 17       	cp	r24, r18
     c68:	93 07       	cpc	r25, r19
     c6a:	34 f4       	brge	.+12     	; 0xc78 <motor_and_write+0x82>
     c6c:	01 2b       	or	r16, r17
     c6e:	21 f0       	breq	.+8      	; 0xc78 <motor_and_write+0x82>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     c70:	80 91 2b 04 	lds	r24, 0x042B
     c74:	88 60       	ori	r24, 0x08	; 8
     c76:	03 c0       	rjmp	.+6      	; 0xc7e <motor_and_write+0x88>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     c78:	80 91 2b 04 	lds	r24, 0x042B
     c7c:	87 7f       	andi	r24, 0xF7	; 247
     c7e:	80 93 2b 04 	sts	0x042B, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     c82:	60 91 a4 03 	lds	r22, 0x03A4
     c86:	70 91 a5 03 	lds	r23, 0x03A5
     c8a:	cf 01       	movw	r24, r30
     c8c:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <__divmodhi4>
     c90:	20 91 9a 03 	lds	r18, 0x039A
     c94:	30 91 9b 03 	lds	r19, 0x039B
     c98:	82 17       	cp	r24, r18
     c9a:	93 07       	cpc	r25, r19
     c9c:	34 f4       	brge	.+12     	; 0xcaa <motor_and_write+0xb4>
     c9e:	ef 28       	or	r14, r15
     ca0:	21 f0       	breq	.+8      	; 0xcaa <motor_and_write+0xb4>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     ca2:	80 91 2b 04 	lds	r24, 0x042B
     ca6:	80 64       	ori	r24, 0x40	; 64
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <motor_and_write+0xba>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     caa:	80 91 2b 04 	lds	r24, 0x042B
     cae:	8f 7b       	andi	r24, 0xBF	; 191
     cb0:	80 93 2b 04 	sts	0x042B, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     cb4:	60 91 a6 03 	lds	r22, 0x03A6
     cb8:	70 91 a7 03 	lds	r23, 0x03A7
     cbc:	cf 01       	movw	r24, r30
     cbe:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <__divmodhi4>
     cc2:	20 91 9c 03 	lds	r18, 0x039C
     cc6:	30 91 9d 03 	lds	r19, 0x039D
     cca:	82 17       	cp	r24, r18
     ccc:	93 07       	cpc	r25, r19
     cce:	34 f4       	brge	.+12     	; 0xcdc <motor_and_write+0xe6>
     cd0:	cd 28       	or	r12, r13
     cd2:	21 f0       	breq	.+8      	; 0xcdc <motor_and_write+0xe6>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     cd4:	80 91 27 04 	lds	r24, 0x0427
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	03 c0       	rjmp	.+6      	; 0xce2 <motor_and_write+0xec>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     cdc:	80 91 27 04 	lds	r24, 0x0427
     ce0:	8d 7f       	andi	r24, 0xFD	; 253
     ce2:	80 93 27 04 	sts	0x0427, r24
	}

	if( ((counter - counterRefFive) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     ce6:	60 91 a8 03 	lds	r22, 0x03A8
     cea:	70 91 a9 03 	lds	r23, 0x03A9
     cee:	c4 01       	movw	r24, r8
     cf0:	86 19       	sub	r24, r6
     cf2:	97 09       	sbc	r25, r7
     cf4:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <__divmodhi4>
     cf8:	20 91 9e 03 	lds	r18, 0x039E
     cfc:	30 91 9f 03 	lds	r19, 0x039F
     d00:	82 17       	cp	r24, r18
     d02:	93 07       	cpc	r25, r19
     d04:	34 f4       	brge	.+12     	; 0xd12 <motor_and_write+0x11c>
     d06:	ab 28       	or	r10, r11
     d08:	21 f0       	breq	.+8      	; 0xd12 <motor_and_write+0x11c>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     d0a:	80 91 27 04 	lds	r24, 0x0427
     d0e:	80 61       	ori	r24, 0x10	; 16
     d10:	03 c0       	rjmp	.+6      	; 0xd18 <motor_and_write+0x122>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     d12:	80 91 27 04 	lds	r24, 0x0427
     d16:	8f 7e       	andi	r24, 0xEF	; 239
     d18:	80 93 27 04 	sts	0x0427, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     d1c:	80 e4       	ldi	r24, 0x40	; 64
     d1e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
	i2c_write(0x2);									// write command byte
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     d28:	80 91 2b 04 	lds	r24, 0x042B
     d2c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     d30:	80 91 27 04 	lds	r24, 0x0427
     d34:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     d38:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

	i2c_start(I2C2+I2C_WRITE);
     d3c:	82 e4       	ldi	r24, 0x42	; 66
     d3e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
	i2c_write(0x2);
     d42:	82 e0       	ldi	r24, 0x02	; 2
     d44:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_outputByte0.outputByte0);
     d48:	80 91 2a 04 	lds	r24, 0x042A
     d4c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_outputByte1.outputByte1);
     d50:	80 91 28 04 	lds	r24, 0x0428
     d54:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_stop();
     d58:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
}
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	bf 90       	pop	r11
     d6e:	af 90       	pop	r10
     d70:	9f 90       	pop	r9
     d72:	8f 90       	pop	r8
     d74:	7f 90       	pop	r7
     d76:	6f 90       	pop	r6
     d78:	08 95       	ret

00000d7a <serial_print_string>:
	}
	serial_print_string("END");
	}
}

void serial_print_string(char msg[]){
     d7a:	68 2f       	mov	r22, r24
	serial_send_blocking(USB_COMM, msg, strlen(msg));
     d7c:	e8 2f       	mov	r30, r24
     d7e:	f9 2f       	mov	r31, r25
     d80:	df 01       	movw	r26, r30
     d82:	0d 90       	ld	r0, X+
     d84:	00 20       	and	r0, r0
     d86:	e9 f7       	brne	.-6      	; 0xd82 <serial_print_string+0x8>
     d88:	11 97       	sbiw	r26, 0x01	; 1
     d8a:	ae 1b       	sub	r26, r30
     d8c:	bf 0b       	sbc	r27, r31
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	79 2f       	mov	r23, r25
     d92:	4a 2f       	mov	r20, r26
     d94:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <serial_send_blocking>
	serial_send_blocking(USB_COMM, "\r\n", 2);
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	71 e0       	ldi	r23, 0x01	; 1
     d9e:	42 e0       	ldi	r20, 0x02	; 2
     da0:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <serial_send_blocking>
}
     da4:	08 95       	ret

00000da6 <init_action>:
	i2c_write(u_outputByte0.outputByte0);
	i2c_write(u_outputByte1.outputByte1);
	i2c_stop();
}

void init_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor, bool *pprint0){
     da6:	af 92       	push	r10
     da8:	bf 92       	push	r11
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	ea 01       	movw	r28, r20
     db0:	f9 01       	movw	r30, r18
	switch(state){
     db2:	83 30       	cpi	r24, 0x03	; 3
     db4:	91 05       	cpc	r25, r1
     db6:	09 f4       	brne	.+2      	; 0xdba <init_action+0x14>
     db8:	84 c0       	rjmp	.+264    	; 0xec2 <init_action+0x11c>
     dba:	84 30       	cpi	r24, 0x04	; 4
     dbc:	91 05       	cpc	r25, r1
     dbe:	54 f4       	brge	.+20     	; 0xdd4 <init_action+0x2e>
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	91 05       	cpc	r25, r1
     dc4:	d9 f1       	breq	.+118    	; 0xe3c <init_action+0x96>
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	91 05       	cpc	r25, r1
     dca:	0c f0       	brlt	.+2      	; 0xdce <init_action+0x28>
     dcc:	5a c0       	rjmp	.+180    	; 0xe82 <init_action+0xdc>
     dce:	89 2b       	or	r24, r25
     dd0:	69 f0       	breq	.+26     	; 0xdec <init_action+0x46>
     dd2:	85 c0       	rjmp	.+266    	; 0xede <init_action+0x138>
     dd4:	85 30       	cpi	r24, 0x05	; 5
     dd6:	91 05       	cpc	r25, r1
     dd8:	09 f4       	brne	.+2      	; 0xddc <init_action+0x36>
     dda:	6d c0       	rjmp	.+218    	; 0xeb6 <init_action+0x110>
     ddc:	85 30       	cpi	r24, 0x05	; 5
     dde:	91 05       	cpc	r25, r1
     de0:	0c f4       	brge	.+2      	; 0xde4 <init_action+0x3e>
     de2:	5c c0       	rjmp	.+184    	; 0xe9c <init_action+0xf6>
     de4:	06 97       	sbiw	r24, 0x06	; 6
     de6:	09 f0       	breq	.+2      	; 0xdea <init_action+0x44>
     de8:	7a c0       	rjmp	.+244    	; 0xede <init_action+0x138>
     dea:	6b c0       	rjmp	.+214    	; 0xec2 <init_action+0x11c>
		case INIT:
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
     dec:	80 91 26 04 	lds	r24, 0x0426
     df0:	90 91 2b 04 	lds	r25, 0x042B
     df4:	82 ff       	sbrs	r24, 2
     df6:	07 c0       	rjmp	.+14     	; 0xe06 <init_action+0x60>
				u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
     df8:	9f 7e       	andi	r25, 0xEF	; 239
     dfa:	90 93 2b 04 	sts	0x042B, r25
				u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     dfe:	80 91 2a 04 	lds	r24, 0x042A
     e02:	87 7f       	andi	r24, 0xF7	; 247
     e04:	55 c0       	rjmp	.+170    	; 0xeb0 <init_action+0x10a>
			}
			else{
				u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     e06:	9f 7d       	andi	r25, 0xDF	; 223
     e08:	90 93 2b 04 	sts	0x042B, r25
				*pfixtureMotor = 0;
     e0c:	11 82       	std	Z+1, r1	; 0x01
     e0e:	10 82       	st	Z, r1
				u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     e10:	80 91 2a 04 	lds	r24, 0x042A
     e14:	8f 7e       	andi	r24, 0xEF	; 239
				u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     e16:	88 60       	ori	r24, 0x08	; 8
     e18:	80 93 2a 04 	sts	0x042A, r24
				if(*pprint0 == 1){
     e1c:	f5 01       	movw	r30, r10
     e1e:	80 81       	ld	r24, Z
     e20:	88 23       	and	r24, r24
     e22:	09 f4       	brne	.+2      	; 0xe26 <init_action+0x80>
     e24:	5c c0       	rjmp	.+184    	; 0xede <init_action+0x138>
					lcd_goto_xy(0,1);
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
					serial_print_string("PUSH TO START");
     e2e:	83 e0       	ldi	r24, 0x03	; 3
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
					*pprint0 = 0;
     e36:	f5 01       	movw	r30, r10
     e38:	10 82       	st	Z, r1
     e3a:	51 c0       	rjmp	.+162    	; 0xede <init_action+0x138>
				}
			}
			break;
		case LOAD:
			u_outputByte0.bits_in_outputByte0.ACPower = 0;
     e3c:	20 91 2a 04 	lds	r18, 0x042A
     e40:	32 2f       	mov	r19, r18
     e42:	3e 7f       	andi	r19, 0xFE	; 254
			if((counter % 200) < 100){
     e44:	cb 01       	movw	r24, r22
     e46:	68 ec       	ldi	r22, 0xC8	; 200
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <__divmodhi4>
     e4e:	84 36       	cpi	r24, 0x64	; 100
     e50:	91 05       	cpc	r25, r1
     e52:	24 f4       	brge	.+8      	; 0xe5c <init_action+0xb6>
				u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     e54:	2c 7f       	andi	r18, 0xFC	; 252
     e56:	20 93 2a 04 	sts	0x042A, r18
     e5a:	03 c0       	rjmp	.+6      	; 0xe62 <init_action+0xbc>
			}
			else{
				u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     e5c:	32 60       	ori	r19, 0x02	; 2
     e5e:	30 93 2a 04 	sts	0x042A, r19
			}
			*pplateLoadMotor = 1;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	99 83       	std	Y+1, r25	; 0x01
     e68:	88 83       	st	Y, r24
			*pfixtureMotor = 0;
     e6a:	11 82       	std	Z+1, r1	; 0x01
     e6c:	10 82       	st	Z, r1
			
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
     e6e:	80 91 2b 04 	lds	r24, 0x042B
     e72:	8d 7f       	andi	r24, 0xFD	; 253
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     e74:	84 60       	ori	r24, 0x04	; 4
     e76:	80 93 2b 04 	sts	0x042B, r24
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
     e7a:	80 91 2a 04 	lds	r24, 0x042A
     e7e:	8b 7f       	andi	r24, 0xFB	; 251
     e80:	17 c0       	rjmp	.+46     	; 0xeb0 <init_action+0x10a>
			break;
		case RAISEL1:
			u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     e82:	80 91 2a 04 	lds	r24, 0x042A
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     e86:	81 7e       	andi	r24, 0xE1	; 225
			u_outputByte0.bits_in_outputByte0.plateStop = 1;
     e88:	86 61       	ori	r24, 0x16	; 22
     e8a:	80 93 2a 04 	sts	0x042A, r24
			*pplateLoadMotor = 0;
     e8e:	19 82       	std	Y+1, r1	; 0x01
     e90:	18 82       	st	Y, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     e92:	80 91 2b 04 	lds	r24, 0x042B
     e96:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
     e98:	8b 7f       	andi	r24, 0xFB	; 251
     e9a:	1f c0       	rjmp	.+62     	; 0xeda <init_action+0x134>
		case FIXL:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case LOWERL1:
			*pfixtureMotor = 0;
     e9c:	11 82       	std	Z+1, r1	; 0x01
     e9e:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     ea0:	80 91 2b 04 	lds	r24, 0x042B
     ea4:	8f 7d       	andi	r24, 0xDF	; 223
     ea6:	80 93 2b 04 	sts	0x042B, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     eaa:	80 91 2a 04 	lds	r24, 0x042A
     eae:	88 60       	ori	r24, 0x08	; 8
     eb0:	80 93 2a 04 	sts	0x042A, r24
     eb4:	14 c0       	rjmp	.+40     	; 0xede <init_action+0x138>
			break;
		case LOWERL2:
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     eb6:	80 91 2a 04 	lds	r24, 0x042A
     eba:	8f 7e       	andi	r24, 0xEF	; 239
     ebc:	80 93 2a 04 	sts	0x042A, r24
     ec0:	09 c0       	rjmp	.+18     	; 0xed4 <init_action+0x12e>
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		//*********************************************
		case MOVEC1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     ec2:	80 91 2b 04 	lds	r24, 0x042B
     ec6:	80 61       	ori	r24, 0x10	; 16
     ec8:	80 93 2b 04 	sts	0x042B, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	80 83       	st	Z, r24
     ed4:	80 91 2b 04 	lds	r24, 0x042B
     ed8:	80 62       	ori	r24, 0x20	; 32
     eda:	80 93 2b 04 	sts	0x042B, r24
			break;
	}
}
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	bf 90       	pop	r11
     ee4:	af 90       	pop	r10
     ee6:	08 95       	ret

00000ee8 <serial_print_int>:
void serial_print_string(char msg[]){
	serial_send_blocking(USB_COMM, msg, strlen(msg));
	serial_send_blocking(USB_COMM, "\r\n", 2);
}

void serial_print_int(int a){
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <serial_print_int+0xa>
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <serial_print_int+0xc>
     ef4:	0f 92       	push	r0
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
	char msg[5];
	itoa(a, msg, 10);
     efa:	8e 01       	movw	r16, r28
     efc:	0f 5f       	subi	r16, 0xFF	; 255
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
     f00:	b8 01       	movw	r22, r16
     f02:	4a e0       	ldi	r20, 0x0A	; 10
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	0e 94 07 21 	call	0x420e	; 0x420e <itoa>
	serial_print_string(msg);
     f0a:	c8 01       	movw	r24, r16
     f0c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
}
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	08 95       	ret

00000f24 <main>:
void serial_print_string(char msg[]);

void serial_print_int(int a);

int main()   
{
     f24:	2f 92       	push	r2
     f26:	3f 92       	push	r3
     f28:	4f 92       	push	r4
     f2a:	5f 92       	push	r5
     f2c:	6f 92       	push	r6
     f2e:	7f 92       	push	r7
     f30:	8f 92       	push	r8
     f32:	9f 92       	push	r9
     f34:	af 92       	push	r10
     f36:	bf 92       	push	r11
     f38:	cf 92       	push	r12
     f3a:	df 92       	push	r13
     f3c:	ef 92       	push	r14
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	6a 97       	sbiw	r28, 0x1a	; 26
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
	bool print0 = true;
	bool  print35 = true;
		
	//initialize button variables
	int button = 1;				
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently
     f58:	1c 8a       	std	Y+20, r1	; 0x14
     f5a:	2f ef       	ldi	r18, 0xFF	; 255
     f5c:	3f ef       	ldi	r19, 0xFF	; 255
     f5e:	38 8f       	std	Y+24, r19	; 0x18
     f60:	2f 8b       	std	Y+23, r18	; 0x17
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
    
	while(1){						//Repeats the entire program indefinitely (runs maintenance or normal each time)

							//mx holds whether motor x should move: 0 = no, 1 = yes
	plateLoadMotor = 0;		//plate load motor
     f62:	1b 82       	std	Y+3, r1	; 0x03
     f64:	1a 82       	std	Y+2, r1	; 0x02
	fixtureMotor = 0;		//fixture motor
     f66:	1d 82       	std	Y+5, r1	; 0x05
     f68:	1c 82       	std	Y+4, r1	; 0x04
	brush1Motor = 0;		//brush 1 motor
     f6a:	1f 82       	std	Y+7, r1	; 0x07
     f6c:	1e 82       	std	Y+6, r1	; 0x06
	brush2Motor = 0;		//brush 2 motor
     f6e:	19 86       	std	Y+9, r1	; 0x09
     f70:	18 86       	std	Y+8, r1	; 0x08
	paperTowelMotor = 0; 	//paper towel roller motor
     f72:	1b 86       	std	Y+11, r1	; 0x0b
     f74:	1a 86       	std	Y+10, r1	; 0x0a
	//the ones with numbers correspond to run mode states, and Five refers to motor 5 (paper towel roller)
	counterRef = 0;
	counterRefFive = 0;
		
	//holds wait times for various actions in ms
	pWait = 100;
     f76:	84 e6       	ldi	r24, 0x64	; 100
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	90 93 91 03 	sts	0x0391, r25
     f7e:	80 93 90 03 	sts	0x0390, r24
	mWait = 100;
     f82:	90 93 93 03 	sts	0x0393, r25
     f86:	80 93 92 03 	sts	0x0392, r24
	kWait = 100;
     f8a:	90 93 95 03 	sts	0x0395, r25
     f8e:	80 93 94 03 	sts	0x0394, r24

	//hold the length of the high and high-low periods for the various motors - this controls their speed
	highLength1 = 1;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	90 93 97 03 	sts	0x0397, r25
     f9a:	80 93 96 03 	sts	0x0396, r24
	highLength2 = 1;
     f9e:	90 93 99 03 	sts	0x0399, r25
     fa2:	80 93 98 03 	sts	0x0398, r24
	highLength3 = 1;
     fa6:	90 93 9b 03 	sts	0x039B, r25
     faa:	80 93 9a 03 	sts	0x039A, r24
	highLength4 = 1;
     fae:	90 93 9d 03 	sts	0x039D, r25
     fb2:	80 93 9c 03 	sts	0x039C, r24
	highLength5 = 1;
     fb6:	90 93 9f 03 	sts	0x039F, r25
     fba:	80 93 9e 03 	sts	0x039E, r24
	totalStepLength1 = 2;
     fbe:	82 e0       	ldi	r24, 0x02	; 2
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	90 93 a1 03 	sts	0x03A1, r25
     fc6:	80 93 a0 03 	sts	0x03A0, r24
	totalStepLength2 = 2;
     fca:	90 93 a3 03 	sts	0x03A3, r25
     fce:	80 93 a2 03 	sts	0x03A2, r24
	totalStepLength3 = 2;
     fd2:	90 93 a5 03 	sts	0x03A5, r25
     fd6:	80 93 a4 03 	sts	0x03A4, r24
	totalStepLength4 = 2;
     fda:	90 93 a7 03 	sts	0x03A7, r25
     fde:	80 93 a6 03 	sts	0x03A6, r24
	totalStepLength5 = 2;
     fe2:	90 93 a9 03 	sts	0x03A9, r25
     fe6:	80 93 a8 03 	sts	0x03A8, r24
	
	//hold whether or not statements have been printed yet (numbers refer to run mode states)
	print0 = true;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	89 83       	std	Y+1, r24	; 0x01
	print35 = true;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     fee:	1d 86       	std	Y+13, r1	; 0x0d
     ff0:	1c 86       	std	Y+12, r1	; 0x0c
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     ff2:	10 92 2b 04 	sts	0x042B, r1
	u_motorByte1.motorByte1 = 128;  // initialize motorByte1              **********1 or 128, depending on order**********
     ff6:	80 e8       	ldi	r24, 0x80	; 128
     ff8:	80 93 27 04 	sts	0x0427, r24
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	80 93 2a 04 	sts	0x042A, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
    1002:	80 93 28 04 	sts	0x0428, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
    1006:	10 92 26 04 	sts	0x0426, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
    100a:	10 92 29 04 	sts	0x0429, r1
	
	//clear();
	serial_print_string("DASCH CLEANER 2c");
    100e:	81 e1       	ldi	r24, 0x11	; 17
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
	lcd_goto_xy(0,1);
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
	serial_print_string("REV: 31");
    101e:	82 e2       	ldi	r24, 0x22	; 34
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
	delay_ms(2000);
    1026:	80 ed       	ldi	r24, 0xD0	; 208
    1028:	97 e0       	ldi	r25, 0x07	; 7
    102a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>
	
	//clear();
	serial_print_string("BEGIN ");
    102e:	8a e2       	ldi	r24, 0x2A	; 42
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
	
	delay_ms(1000);
    1036:	88 ee       	ldi	r24, 0xE8	; 232
    1038:	93 e0       	ldi	r25, 0x03	; 3
    103a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>

    i2c_init();                                // init I2C interface
    103e:	0e 94 93 00 	call	0x126	; 0x126 <i2c_init>
	
    serial_print_string("INIT ");
    1042:	81 e3       	ldi	r24, 0x31	; 49
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
    104a:	80 e4       	ldi	r24, 0x40	; 64
    104c:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    1050:	f8 2e       	mov	r15, r24
	i2c_stop();
    1052:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
    1056:	82 e4       	ldi	r24, 0x42	; 66
    1058:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    105c:	18 2f       	mov	r17, r24
	i2c_stop();
    105e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
    1062:	84 e4       	ldi	r24, 0x44	; 68
    1064:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    1068:	08 2f       	mov	r16, r24
	i2c_stop();
    106a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
    
	//clear();
	serial_print_string("START ");
    106e:	87 e3       	ldi	r24, 0x37	; 55
    1070:	91 e0       	ldi	r25, 0x01	; 1
    1072:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
    1076:	1f 29       	or	r17, r15
    1078:	10 2b       	or	r17, r16
    107a:	61 f0       	breq	.+24     	; 0x1094 <main+0x170>
        /* failed to issue start condition(s), possibly no device found */
        
		serial_print_string("I2C BAD ");
    107c:	8e e3       	ldi	r24, 0x3E	; 62
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
		i2c_stop();
    1084:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
		serial_print_string("STOP ");
    1088:	87 e4       	ldi	r24, 0x47	; 71
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
    1090:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <main+0x16a0>
    }
	else {
		serial_print_string("I2C OK ");
    1094:	8d e4       	ldi	r24, 0x4D	; 77
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
        /* issuing start conditions ok, devices accessible */
		serial_print_string("BINIT ");
    109c:	85 e5       	ldi	r24, 0x55	; 85
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
    10a4:	80 e4       	ldi	r24, 0x40	; 64
    10a6:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x6);
    10aa:	86 e0       	ldi	r24, 0x06	; 6
    10ac:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    10bc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C1+I2C_WRITE);
    10c0:	80 e4       	ldi	r24, 0x40	; 64
    10c2:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    10c6:	82 e0       	ldi	r24, 0x02	; 2
    10c8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    10cc:	80 91 2b 04 	lds	r24, 0x042B
    10d0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    10d4:	80 91 27 04 	lds	r24, 0x0427
    10d8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    10dc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
    10e0:	82 e4       	ldi	r24, 0x42	; 66
    10e2:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x6);
    10e6:	86 e0       	ldi	r24, 0x06	; 6
    10e8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    10f8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);
    10fc:	82 e4       	ldi	r24, 0x42	; 66
    10fe:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    1102:	82 e0       	ldi	r24, 0x02	; 2
    1104:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_outputByte0.outputByte0);
    1108:	80 91 2a 04 	lds	r24, 0x042A
    110c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_outputByte1.outputByte1);
    1110:	80 91 28 04 	lds	r24, 0x0428
    1114:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1118:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		//Registers default to input, so I2C3 is fine already

		u_motorByte1.bits_in_motorByte1.enableAll = 0;	//Enables all motor drivers after startup
    111c:	80 91 27 04 	lds	r24, 0x0427
    1120:	8f 77       	andi	r24, 0x7F	; 127
    1122:	80 93 27 04 	sts	0x0427, r24
		i2c_start(I2C1+I2C_WRITE);
    1126:	80 e4       	ldi	r24, 0x40	; 64
    1128:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    112c:	82 e0       	ldi	r24, 0x02	; 2
    112e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    1132:	80 91 2b 04 	lds	r24, 0x042B
    1136:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    113a:	80 91 27 04 	lds	r24, 0x0427
    113e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1142:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>


		delay_ms(1000);
    1146:	88 ee       	ldi	r24, 0xE8	; 232
    1148:	93 e0       	ldi	r25, 0x03	; 3
    114a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
    114e:	8c e5       	ldi	r24, 0x5C	; 92
    1150:	91 e0       	ldi	r25, 0x01	; 1
    1152:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
    1156:	ee 24       	eor	r14, r14
    1158:	ff 24       	eor	r15, r15
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    115a:	c7 01       	movw	r24, r14
    115c:	be 01       	movw	r22, r28
    115e:	64 5f       	subi	r22, 0xF4	; 244
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    1166:	18 2f       	mov	r17, r24
			serial_check(); counter++;
    1168:	0e 94 bb 1c 	call	0x3976	; 0x3976 <serial_check>
    116c:	08 94       	sec
    116e:	e1 1c       	adc	r14, r1
    1170:	f1 1c       	adc	r15, r1
			delay_ms(1);
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>
		delay_ms(1000);
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    117a:	11 23       	and	r17, r17
    117c:	71 f3       	breq	.-36     	; 0x115a <main+0x236>
		buttonTriggered = false;
		counter = 0;
		//clear();


		if(is_digital_input_high(IO_D3))							//Tests if the switch is set to Maintenance Mode
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1184:	88 23       	and	r24, r24
    1186:	09 f4       	brne	.+2      	; 0x118a <main+0x266>
    1188:	4f c4       	rjmp	.+2206   	; 0x1a28 <main+0xb04>
		{
			serial_print_string("DEBUG");
    118a:	8c e6       	ldi	r24, 0x6C	; 108
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
			delay_ms(1000);
    1192:	88 ee       	ldi	r24, 0xE8	; 232
    1194:	93 e0       	ldi	r25, 0x03	; 3
    1196:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>
			//initialize
			bool printVar = true;
			int submode = -1;

			//clear();
			serial_print_string("INPUT MODE");
    119a:	82 e7       	ldi	r24, 0x72	; 114
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
    11a2:	ee 24       	eor	r14, r14
    11a4:	ff 24       	eor	r15, r15
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    11a6:	c7 01       	movw	r24, r14
    11a8:	be 01       	movw	r22, r28
    11aa:	64 5f       	subi	r22, 0xF4	; 244
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    11b2:	18 2f       	mov	r17, r24
				counter++;
    11b4:	08 94       	sec
    11b6:	e1 1c       	adc	r14, r1
    11b8:	f1 1c       	adc	r15, r1
				delay_ms(1);
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>

			//clear();
			serial_print_string("INPUT MODE");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
    11c2:	11 23       	and	r17, r17
    11c4:	81 f3       	breq	.-32     	; 0x11a6 <main+0x282>
    11c6:	99 24       	eor	r9, r9
    11c8:	93 94       	inc	r9
    11ca:	6f ef       	ldi	r22, 0xFF	; 255
    11cc:	7f ef       	ldi	r23, 0xFF	; 255
    11ce:	7b 8b       	std	Y+19, r23	; 0x13
    11d0:	6a 8b       	std	Y+18, r22	; 0x12
    11d2:	66 24       	eor	r6, r6
    11d4:	77 24       	eor	r7, r7
    11d6:	44 24       	eor	r4, r4
    11d8:	55 24       	eor	r5, r5
    11da:	22 24       	eor	r2, r2
    11dc:	33 24       	eor	r3, r3
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    11de:	84 e4       	ldi	r24, 0x44	; 68
    11e0:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    11ea:	85 e4       	ldi	r24, 0x45	; 69
    11ec:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    11f0:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    11f4:	80 93 26 04 	sts	0x0426, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    11f8:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    11fc:	80 93 29 04 	sts	0x0429, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1200:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1204:	c2 01       	movw	r24, r4
    1206:	be 01       	movw	r22, r28
    1208:	64 5f       	subi	r22, 0xF4	; 244
    120a:	7f 4f       	sbci	r23, 0xFF	; 255
    120c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    1210:	18 2f       	mov	r17, r24
							Output 			--     starts testing each output individually and ends after testing all outputs
							Motor			--     starts testing each motor individually and ends after testing all motors
							Multi motor		--     starts testing each the fixture motor with each of the brush motors

				*/
				if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != INPUT){
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1218:	88 23       	and	r24, r24
    121a:	c9 f4       	brne	.+50     	; 0x124e <main+0x32a>
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1222:	88 23       	and	r24, r24
    1224:	a1 f4       	brne	.+40     	; 0x124e <main+0x32a>
    1226:	8a 89       	ldd	r24, Y+18	; 0x12
    1228:	9b 89       	ldd	r25, Y+19	; 0x13
    122a:	89 2b       	or	r24, r25
    122c:	81 f0       	breq	.+32     	; 0x124e <main+0x32a>
					state = S0;
					submode = INPUT;
					//clear();
					serial_print_string("INPUTS ");
    122e:	8d e7       	ldi	r24, 0x7D	; 125
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
					lcd_goto_xy(0,1);
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	61 e0       	ldi	r22, 0x01	; 1
    123a:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	9c 8b       	std	Y+20, r25	; 0x14
    1242:	99 24       	eor	r9, r9
    1244:	93 94       	inc	r9
    1246:	1b 8a       	std	Y+19, r1	; 0x13
    1248:	1a 8a       	std	Y+18, r1	; 0x12
    124a:	66 24       	eor	r6, r6
    124c:	77 24       	eor	r7, r7
					printVar = true;
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != OUTPUT){
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1254:	88 23       	and	r24, r24
    1256:	e9 f0       	breq	.+58     	; 0x1292 <main+0x36e>
    1258:	82 e0       	ldi	r24, 0x02	; 2
    125a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    125e:	88 23       	and	r24, r24
    1260:	c1 f4       	brne	.+48     	; 0x1292 <main+0x36e>
    1262:	2a 89       	ldd	r18, Y+18	; 0x12
    1264:	3b 89       	ldd	r19, Y+19	; 0x13
    1266:	21 30       	cpi	r18, 0x01	; 1
    1268:	31 05       	cpc	r19, r1
    126a:	99 f0       	breq	.+38     	; 0x1292 <main+0x36e>
					state = O0_ON;
					submode = OUTPUT;
					//clear();
					serial_print_string("OUTPUTS");
    126c:	85 e8       	ldi	r24, 0x85	; 133
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
					lcd_goto_xy(0,1);
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
    127c:	31 e0       	ldi	r19, 0x01	; 1
    127e:	3c 8b       	std	Y+20, r19	; 0x14
    1280:	99 24       	eor	r9, r9
    1282:	93 94       	inc	r9
    1284:	61 e0       	ldi	r22, 0x01	; 1
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	7b 8b       	std	Y+19, r23	; 0x13
    128a:	6a 8b       	std	Y+18, r22	; 0x12
    128c:	68 e0       	ldi	r22, 0x08	; 8
    128e:	66 2e       	mov	r6, r22
    1290:	71 2c       	mov	r7, r1
					printVar = true;
					switched = true;
				}
				if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MOTOR){
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1298:	88 23       	and	r24, r24
    129a:	09 f5       	brne	.+66     	; 0x12de <main+0x3ba>
    129c:	82 e0       	ldi	r24, 0x02	; 2
    129e:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    12a2:	88 23       	and	r24, r24
    12a4:	e1 f0       	breq	.+56     	; 0x12de <main+0x3ba>
    12a6:	8a 89       	ldd	r24, Y+18	; 0x12
    12a8:	9b 89       	ldd	r25, Y+19	; 0x13
    12aa:	02 97       	sbiw	r24, 0x02	; 2
    12ac:	c1 f0       	breq	.+48     	; 0x12de <main+0x3ba>
					state = M1_F;
					submode = MOTOR;
					//clear();
					serial_print_string("MOTORS ");
    12ae:	8d e8       	ldi	r24, 0x8D	; 141
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
					lcd_goto_xy(0,1);
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	61 e0       	ldi	r22, 0x01	; 1
    12ba:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    12be:	80 91 2b 04 	lds	r24, 0x042B
    12c2:	84 60       	ori	r24, 0x04	; 4
    12c4:	80 93 2b 04 	sts	0x042B, r24
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	9c 8b       	std	Y+20, r25	; 0x14
    12cc:	99 24       	eor	r9, r9
    12ce:	93 94       	inc	r9
    12d0:	22 e0       	ldi	r18, 0x02	; 2
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	3b 8b       	std	Y+19, r19	; 0x13
    12d6:	2a 8b       	std	Y+18, r18	; 0x12
    12d8:	50 e2       	ldi	r21, 0x20	; 32
    12da:	65 2e       	mov	r6, r21
    12dc:	71 2c       	mov	r7, r1
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MULTI){
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    12e4:	88 23       	and	r24, r24
    12e6:	31 f1       	breq	.+76     	; 0x1334 <main+0x410>
    12e8:	82 e0       	ldi	r24, 0x02	; 2
    12ea:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    12ee:	88 23       	and	r24, r24
    12f0:	09 f1       	breq	.+66     	; 0x1334 <main+0x410>
    12f2:	6a 89       	ldd	r22, Y+18	; 0x12
    12f4:	7b 89       	ldd	r23, Y+19	; 0x13
    12f6:	63 30       	cpi	r22, 0x03	; 3
    12f8:	71 05       	cpc	r23, r1
    12fa:	e1 f0       	breq	.+56     	; 0x1334 <main+0x410>
					state = M2_AND_M3;
					submode = MULTI;
					//clear();
					serial_print_string("MULTI MOTOR");
    12fc:	85 e9       	ldi	r24, 0x95	; 149
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
					lcd_goto_xy(0,1);
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    130c:	80 91 2b 04 	lds	r24, 0x042B
    1310:	80 62       	ori	r24, 0x20	; 32
    1312:	80 93 2b 04 	sts	0x042B, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    1316:	80 91 27 04 	lds	r24, 0x0427
    131a:	81 60       	ori	r24, 0x01	; 1
    131c:	80 93 27 04 	sts	0x0427, r24
    1320:	99 24       	eor	r9, r9
    1322:	93 94       	inc	r9
    1324:	83 e0       	ldi	r24, 0x03	; 3
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9b 8b       	std	Y+19, r25	; 0x13
    132a:	8a 8b       	std	Y+18, r24	; 0x12
    132c:	4a e2       	ldi	r20, 0x2A	; 42
    132e:	64 2e       	mov	r6, r20
    1330:	71 2c       	mov	r7, r1
    1332:	03 c0       	rjmp	.+6      	; 0x133a <main+0x416>
					switched = true;
				}
				if(switched){
    1334:	9c 89       	ldd	r25, Y+20	; 0x14
    1336:	99 23       	and	r25, r25
    1338:	c9 f0       	breq	.+50     	; 0x136c <main+0x448>
					plateLoadMotor = 0;
    133a:	1b 82       	std	Y+3, r1	; 0x03
    133c:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    133e:	1d 82       	std	Y+5, r1	; 0x05
    1340:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    1342:	1f 82       	std	Y+7, r1	; 0x07
    1344:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    1346:	19 86       	std	Y+9, r1	; 0x09
    1348:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    134a:	1b 86       	std	Y+11, r1	; 0x0b
    134c:	1a 86       	std	Y+10, r1	; 0x0a
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
    134e:	8f ef       	ldi	r24, 0xFF	; 255
    1350:	80 93 2a 04 	sts	0x042A, r24
					u_outputByte1.outputByte1 = 255;  // reset outputByte1
    1354:	80 93 28 04 	sts	0x0428, r24
					if(submode != MOTOR && submode != MULTI){
    1358:	8a 89       	ldd	r24, Y+18	; 0x12
    135a:	9b 89       	ldd	r25, Y+19	; 0x13
    135c:	02 97       	sbiw	r24, 0x02	; 2
    135e:	02 97       	sbiw	r24, 0x02	; 2
    1360:	20 f0       	brcs	.+8      	; 0x136a <main+0x446>
						u_motorByte0.motorByte0 = 0;	  // reset motorByte0
    1362:	10 92 2b 04 	sts	0x042B, r1
						u_motorByte1.motorByte1 = 0;	  // reset motorByte1
    1366:	10 92 27 04 	sts	0x0427, r1
    136a:	1c 8a       	std	Y+20, r1	; 0x14
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
    136c:	11 23       	and	r17, r17
    136e:	09 f4       	brne	.+2      	; 0x1372 <main+0x44e>
    1370:	c7 c0       	rjmp	.+398    	; 0x1500 <main+0x5dc>
					if(state <= S7){				//if it's doing the sensors
    1372:	28 e0       	ldi	r18, 0x08	; 8
    1374:	62 16       	cp	r6, r18
    1376:	71 04       	cpc	r7, r1
    1378:	ac f4       	brge	.+42     	; 0x13a4 <main+0x480>
						lastVal = -1;
						lcd_goto_xy(0,1);
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	61 e0       	ldi	r22, 0x01	; 1
    137e:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
						buttonTriggered = false;
						state ++;
    1382:	08 94       	sec
    1384:	61 1c       	adc	r6, r1
    1386:	71 1c       	adc	r7, r1
						counterRef = counter;
						printVar = true;
						if(state == S7 + 1){		//accounts for end of maintenance mode after sensors
    1388:	38 e0       	ldi	r19, 0x08	; 8
    138a:	63 16       	cp	r6, r19
    138c:	71 04       	cpc	r7, r1
    138e:	11 f4       	brne	.+4      	; 0x1394 <main+0x470>
    1390:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <main+0x16ac>
    1394:	12 01       	movw	r2, r4
    1396:	99 24       	eor	r9, r9
    1398:	93 94       	inc	r9
    139a:	6f ef       	ldi	r22, 0xFF	; 255
    139c:	7f ef       	ldi	r23, 0xFF	; 255
    139e:	78 8f       	std	Y+24, r23	; 0x18
    13a0:	6f 8b       	std	Y+23, r22	; 0x17
    13a2:	ae c0       	rjmp	.+348    	; 0x1500 <main+0x5dc>
							//clear();
							state = DONEM;
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
    13a4:	70 e2       	ldi	r23, 0x20	; 32
    13a6:	67 16       	cp	r6, r23
    13a8:	71 04       	cpc	r7, r1
    13aa:	cc f4       	brge	.+50     	; 0x13de <main+0x4ba>
						if(state % 2 == 0){			//current state is an 'on' state
    13ac:	60 fc       	sbrc	r6, 0
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <main+0x49e>
							lcd_goto_xy(13,1);
    13b0:	8d e0       	ldi	r24, 0x0D	; 13
    13b2:	61 e0       	ldi	r22, 0x01	; 1
    13b4:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
							serial_print_string("OFF");
    13b8:	81 ea       	ldi	r24, 0xA1	; 161
    13ba:	91 e0       	ldi	r25, 0x01	; 1
    13bc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <main+0x4a6>
						}
						else{						//current state is an 'off' state
							lcd_goto_xy(0,1);
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
						}
						buttonTriggered = false;
						state ++;
    13ca:	08 94       	sec
    13cc:	61 1c       	adc	r6, r1
    13ce:	71 1c       	adc	r7, r1
						counterRef = counter;
						printVar = true;
						if(state == O11_OFF + 1){	//accounts for end of maintenance mode after outputs
    13d0:	80 e2       	ldi	r24, 0x20	; 32
    13d2:	68 16       	cp	r6, r24
    13d4:	71 04       	cpc	r7, r1
    13d6:	09 f0       	breq	.+2      	; 0x13da <main+0x4b6>
    13d8:	90 c0       	rjmp	.+288    	; 0x14fa <main+0x5d6>
    13da:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <main+0x16b4>
    13de:	83 01       	movw	r16, r6
    13e0:	0f 5f       	subi	r16, 0xFF	; 255
    13e2:	1f 4f       	sbci	r17, 0xFF	; 255
							//clear();
							state = DONEM;
						}
					}
					else if(state <= M5_B){							//if it's doing the motors
    13e4:	9a e2       	ldi	r25, 0x2A	; 42
    13e6:	69 16       	cp	r6, r25
    13e8:	71 04       	cpc	r7, r1
    13ea:	0c f0       	brlt	.+2      	; 0x13ee <main+0x4ca>
    13ec:	5d c0       	rjmp	.+186    	; 0x14a8 <main+0x584>
						buttonTriggered = false;
						state ++;
						counterRef = counter;
						printVar = true;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
    13ee:	60 fc       	sbrc	r6, 0
    13f0:	09 c0       	rjmp	.+18     	; 0x1404 <main+0x4e0>
							lcd_goto_xy(11,1);
    13f2:	8b e0       	ldi	r24, 0x0B	; 11
    13f4:	61 e0       	ldi	r22, 0x01	; 1
    13f6:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
							serial_print_string("BACK ");
    13fa:	85 ea       	ldi	r24, 0xA5	; 165
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
    1402:	13 c0       	rjmp	.+38     	; 0x142a <main+0x506>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
    1404:	06 32       	cpi	r16, 0x26	; 38
    1406:	11 05       	cpc	r17, r1
    1408:	71 f1       	breq	.+92     	; 0x1466 <main+0x542>
    140a:	07 32       	cpi	r16, 0x27	; 39
    140c:	11 05       	cpc	r17, r1
    140e:	3c f4       	brge	.+14     	; 0x141e <main+0x4fa>
    1410:	02 32       	cpi	r16, 0x22	; 34
    1412:	11 05       	cpc	r17, r1
    1414:	61 f0       	breq	.+24     	; 0x142e <main+0x50a>
    1416:	04 32       	cpi	r16, 0x24	; 36
    1418:	11 05       	cpc	r17, r1
    141a:	39 f4       	brne	.+14     	; 0x142a <main+0x506>
    141c:	14 c0       	rjmp	.+40     	; 0x1446 <main+0x522>
    141e:	08 32       	cpi	r16, 0x28	; 40
    1420:	11 05       	cpc	r17, r1
    1422:	69 f1       	breq	.+90     	; 0x147e <main+0x55a>
    1424:	0a 32       	cpi	r16, 0x2A	; 42
    1426:	11 05       	cpc	r17, r1
    1428:	b1 f1       	breq	.+108    	; 0x1496 <main+0x572>
    142a:	38 01       	movw	r6, r16
    142c:	66 c0       	rjmp	.+204    	; 0x14fa <main+0x5d6>
								case M1_B + 1:
									lcd_goto_xy(0,1);
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	61 e0       	ldi	r22, 0x01	; 1
    1432:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1436:	80 91 2b 04 	lds	r24, 0x042B
    143a:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    143c:	80 62       	ori	r24, 0x20	; 32
    143e:	80 93 2b 04 	sts	0x042B, r24
    1442:	12 01       	movw	r2, r4
    1444:	33 c2       	rjmp	.+1126   	; 0x18ac <main+0x988>
									break;
								case M2_B + 1:
									lcd_goto_xy(0,1);
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	61 e0       	ldi	r22, 0x01	; 1
    144a:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    144e:	80 91 2b 04 	lds	r24, 0x042B
    1452:	8f 7d       	andi	r24, 0xDF	; 223
    1454:	80 93 2b 04 	sts	0x042B, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    1458:	80 91 27 04 	lds	r24, 0x0427
    145c:	81 60       	ori	r24, 0x01	; 1
    145e:	80 93 27 04 	sts	0x0427, r24
    1462:	12 01       	movw	r2, r4
    1464:	43 c2       	rjmp	.+1158   	; 0x18ec <main+0x9c8>
									break;
								case M3_B + 1:
									lcd_goto_xy(0,1);
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    146e:	80 91 27 04 	lds	r24, 0x0427
    1472:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    1474:	88 60       	ori	r24, 0x08	; 8
    1476:	80 93 27 04 	sts	0x0427, r24
    147a:	12 01       	movw	r2, r4
    147c:	57 c2       	rjmp	.+1198   	; 0x192c <main+0xa08>
									break;
								case M4_B + 1:
									lcd_goto_xy(0,1);
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	61 e0       	ldi	r22, 0x01	; 1
    1482:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    1486:	80 91 27 04 	lds	r24, 0x0427
    148a:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    148c:	80 64       	ori	r24, 0x40	; 64
    148e:	80 93 27 04 	sts	0x0427, r24
    1492:	12 01       	movw	r2, r4
    1494:	6b c2       	rjmp	.+1238   	; 0x196c <main+0xa48>
									break;
								case M5_B + 1:
									//clear();
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    1496:	80 91 27 04 	lds	r24, 0x0427
    149a:	8f 7b       	andi	r24, 0xBF	; 191
    149c:	80 93 27 04 	sts	0x0427, r24
									state = DONEM;
									paperTowelMotor = 0;
    14a0:	1b 86       	std	Y+11, r1	; 0x0b
    14a2:	1a 86       	std	Y+10, r1	; 0x0a
    14a4:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <main+0x16b4>
							}
						}
					}
					else{
						buttonTriggered = false;
						state ++;
    14a8:	38 01       	movw	r6, r16
						counterRef = counter;
						printVar = true;
						switch(state){
    14aa:	0b 32       	cpi	r16, 0x2B	; 43
    14ac:	11 05       	cpc	r17, r1
    14ae:	21 f0       	breq	.+8      	; 0x14b8 <main+0x594>
    14b0:	0c 32       	cpi	r16, 0x2C	; 44
    14b2:	11 05       	cpc	r17, r1
    14b4:	11 f5       	brne	.+68     	; 0x14fa <main+0x5d6>
    14b6:	11 c0       	rjmp	.+34     	; 0x14da <main+0x5b6>
							case M2_AND_M3 + 1:
								lcd_goto_xy(0,1);
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	61 e0       	ldi	r22, 0x01	; 1
    14bc:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
								u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    14c0:	90 91 27 04 	lds	r25, 0x0427
    14c4:	9e 7f       	andi	r25, 0xFE	; 254
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    14c6:	80 91 2b 04 	lds	r24, 0x042B
    14ca:	80 62       	ori	r24, 0x20	; 32
    14cc:	80 93 2b 04 	sts	0x042B, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    14d0:	98 60       	ori	r25, 0x08	; 8
    14d2:	90 93 27 04 	sts	0x0427, r25
    14d6:	12 01       	movw	r2, r4
    14d8:	76 c2       	rjmp	.+1260   	; 0x19c6 <main+0xaa2>
								break;
							case M2_AND_M4 + 1:
								//clear();
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    14da:	80 91 2b 04 	lds	r24, 0x042B
    14de:	8f 7d       	andi	r24, 0xDF	; 223
    14e0:	80 93 2b 04 	sts	0x042B, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    14e4:	80 91 27 04 	lds	r24, 0x0427
    14e8:	87 7f       	andi	r24, 0xF7	; 247
    14ea:	80 93 27 04 	sts	0x0427, r24
								state = DONEM;
								fixtureMotor = 0;
    14ee:	1d 82       	std	Y+5, r1	; 0x05
    14f0:	1c 82       	std	Y+4, r1	; 0x04
								brush2Motor = 0;
    14f2:	19 86       	std	Y+9, r1	; 0x09
    14f4:	18 86       	std	Y+8, r1	; 0x08
    14f6:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <main+0x16b4>
    14fa:	12 01       	movw	r2, r4
    14fc:	99 24       	eor	r9, r9
    14fe:	93 94       	inc	r9
						}
					}
				}

				//state actions
				switch (state) {
    1500:	f3 01       	movw	r30, r6
    1502:	ec 32       	cpi	r30, 0x2C	; 44
    1504:	f1 05       	cpc	r31, r1
    1506:	08 f0       	brcs	.+2      	; 0x150a <main+0x5e6>
    1508:	70 c2       	rjmp	.+1248   	; 0x19ea <main+0xac6>
    150a:	ea 5b       	subi	r30, 0xBA	; 186
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	ee 0f       	add	r30, r30
    1510:	ff 1f       	adc	r31, r31
    1512:	05 90       	lpm	r0, Z+
    1514:	f4 91       	lpm	r31, Z+
    1516:	e0 2d       	mov	r30, r0
    1518:	09 94       	ijmp
					case S0:
						if(printVar){
    151a:	99 20       	and	r9, r9
    151c:	21 f0       	breq	.+8      	; 0x1526 <main+0x602>
							serial_print_string("SENSOR 0");
    151e:	8b ea       	ldi	r24, 0xAB	; 171
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1526:	8f e0       	ldi	r24, 0x0F	; 15
    1528:	61 e0       	ldi	r22, 0x01	; 1
    152a:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.plate){
    152e:	80 91 26 04 	lds	r24, 0x0426
    1532:	81 70       	andi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	6f 89       	ldd	r22, Y+23	; 0x17
    1538:	78 8d       	ldd	r23, Y+24	; 0x18
    153a:	68 17       	cp	r22, r24
    153c:	79 07       	cpc	r23, r25
    153e:	09 f4       	brne	.+2      	; 0x1542 <main+0x61e>
    1540:	53 c2       	rjmp	.+1190   	; 0x19e8 <main+0xac4>
							serial_print_int(u_inputByte0.bits_in_inputByte0.plate);
    1542:	0e 94 74 07 	call	0xee8	; 0xee8 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.plate;
    1546:	80 91 26 04 	lds	r24, 0x0426
    154a:	b0 c0       	rjmp	.+352    	; 0x16ac <main+0x788>
						}							
						break;
					case S1:
						if(printVar){
    154c:	99 20       	and	r9, r9
    154e:	21 f0       	breq	.+8      	; 0x1558 <main+0x634>
							serial_print_string("SENSOR 1");
    1550:	84 eb       	ldi	r24, 0xB4	; 180
    1552:	91 e0       	ldi	r25, 0x01	; 1
    1554:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1558:	8f e0       	ldi	r24, 0x0F	; 15
    155a:	61 e0       	ldi	r22, 0x01	; 1
    155c:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureLift){
    1560:	80 91 26 04 	lds	r24, 0x0426
    1564:	86 95       	lsr	r24
    1566:	81 70       	andi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	6f 89       	ldd	r22, Y+23	; 0x17
    156c:	78 8d       	ldd	r23, Y+24	; 0x18
    156e:	68 17       	cp	r22, r24
    1570:	79 07       	cpc	r23, r25
    1572:	09 f4       	brne	.+2      	; 0x1576 <main+0x652>
    1574:	39 c2       	rjmp	.+1138   	; 0x19e8 <main+0xac4>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureLift);
    1576:	0e 94 74 07 	call	0xee8	; 0xee8 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureLift;
    157a:	80 91 26 04 	lds	r24, 0x0426
    157e:	86 95       	lsr	r24
    1580:	95 c0       	rjmp	.+298    	; 0x16ac <main+0x788>
						}							
						break;
					case S2:
						if(printVar){
    1582:	99 20       	and	r9, r9
    1584:	21 f0       	breq	.+8      	; 0x158e <main+0x66a>
							serial_print_string("SENSOR 2");
    1586:	8d eb       	ldi	r24, 0xBD	; 189
    1588:	91 e0       	ldi	r25, 0x01	; 1
    158a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    158e:	8f e0       	ldi	r24, 0x0F	; 15
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureHome){
    1596:	80 91 26 04 	lds	r24, 0x0426
    159a:	86 95       	lsr	r24
    159c:	86 95       	lsr	r24
    159e:	81 70       	andi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	6f 89       	ldd	r22, Y+23	; 0x17
    15a4:	78 8d       	ldd	r23, Y+24	; 0x18
    15a6:	68 17       	cp	r22, r24
    15a8:	79 07       	cpc	r23, r25
    15aa:	09 f4       	brne	.+2      	; 0x15ae <main+0x68a>
    15ac:	1d c2       	rjmp	.+1082   	; 0x19e8 <main+0xac4>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureHome);
    15ae:	0e 94 74 07 	call	0xee8	; 0xee8 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureHome;
    15b2:	80 91 26 04 	lds	r24, 0x0426
    15b6:	86 95       	lsr	r24
    15b8:	86 95       	lsr	r24
    15ba:	78 c0       	rjmp	.+240    	; 0x16ac <main+0x788>
						}							
						break;
					case S3:
						if(printVar){
    15bc:	99 20       	and	r9, r9
    15be:	21 f0       	breq	.+8      	; 0x15c8 <main+0x6a4>
							serial_print_string("SENSOR 3");
    15c0:	86 ec       	ldi	r24, 0xC6	; 198
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    15c8:	8f e0       	ldi	r24, 0x0F	; 15
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixturePlate){
    15d0:	80 91 26 04 	lds	r24, 0x0426
    15d4:	86 95       	lsr	r24
    15d6:	86 95       	lsr	r24
    15d8:	86 95       	lsr	r24
    15da:	81 70       	andi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	6f 89       	ldd	r22, Y+23	; 0x17
    15e0:	78 8d       	ldd	r23, Y+24	; 0x18
    15e2:	68 17       	cp	r22, r24
    15e4:	79 07       	cpc	r23, r25
    15e6:	09 f4       	brne	.+2      	; 0x15ea <main+0x6c6>
    15e8:	ff c1       	rjmp	.+1022   	; 0x19e8 <main+0xac4>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixturePlate);
    15ea:	0e 94 74 07 	call	0xee8	; 0xee8 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixturePlate;
    15ee:	80 91 26 04 	lds	r24, 0x0426
    15f2:	86 95       	lsr	r24
    15f4:	86 95       	lsr	r24
    15f6:	86 95       	lsr	r24
    15f8:	59 c0       	rjmp	.+178    	; 0x16ac <main+0x788>
						}							
						break;
					case S4:
						if(printVar){
    15fa:	99 20       	and	r9, r9
    15fc:	21 f0       	breq	.+8      	; 0x1606 <main+0x6e2>
							serial_print_string("SENSOR 4");
    15fe:	8f ec       	ldi	r24, 0xCF	; 207
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1606:	8f e0       	ldi	r24, 0x0F	; 15
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush1){
    160e:	80 91 26 04 	lds	r24, 0x0426
    1612:	82 95       	swap	r24
    1614:	81 70       	andi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	6f 89       	ldd	r22, Y+23	; 0x17
    161a:	78 8d       	ldd	r23, Y+24	; 0x18
    161c:	68 17       	cp	r22, r24
    161e:	79 07       	cpc	r23, r25
    1620:	09 f4       	brne	.+2      	; 0x1624 <main+0x700>
    1622:	e2 c1       	rjmp	.+964    	; 0x19e8 <main+0xac4>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
    1624:	0e 94 74 07 	call	0xee8	; 0xee8 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush1;
    1628:	80 91 26 04 	lds	r24, 0x0426
    162c:	82 95       	swap	r24
    162e:	8f 70       	andi	r24, 0x0F	; 15
    1630:	3d c0       	rjmp	.+122    	; 0x16ac <main+0x788>
						}							
						break;
					case S5:
						if(printVar){
    1632:	99 20       	and	r9, r9
    1634:	21 f0       	breq	.+8      	; 0x163e <main+0x71a>
							serial_print_string("SENSOR 5");
    1636:	88 ed       	ldi	r24, 0xD8	; 216
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    163e:	8f e0       	ldi	r24, 0x0F	; 15
    1640:	61 e0       	ldi	r22, 0x01	; 1
    1642:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush2){
    1646:	80 91 26 04 	lds	r24, 0x0426
    164a:	82 95       	swap	r24
    164c:	86 95       	lsr	r24
    164e:	81 70       	andi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	6f 89       	ldd	r22, Y+23	; 0x17
    1654:	78 8d       	ldd	r23, Y+24	; 0x18
    1656:	68 17       	cp	r22, r24
    1658:	79 07       	cpc	r23, r25
    165a:	09 f4       	brne	.+2      	; 0x165e <main+0x73a>
    165c:	c5 c1       	rjmp	.+906    	; 0x19e8 <main+0xac4>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
    165e:	0e 94 74 07 	call	0xee8	; 0xee8 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush2;
    1662:	80 91 26 04 	lds	r24, 0x0426
    1666:	82 95       	swap	r24
    1668:	86 95       	lsr	r24
    166a:	87 70       	andi	r24, 0x07	; 7
    166c:	1f c0       	rjmp	.+62     	; 0x16ac <main+0x788>
						}							
						break;
					case S6:
						if(printVar){
    166e:	99 20       	and	r9, r9
    1670:	21 f0       	breq	.+8      	; 0x167a <main+0x756>
							serial_print_string("SENSOR 6");
    1672:	81 ee       	ldi	r24, 0xE1	; 225
    1674:	91 e0       	ldi	r25, 0x01	; 1
    1676:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    167a:	8f e0       	ldi	r24, 0x0F	; 15
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry1){
    1682:	80 91 26 04 	lds	r24, 0x0426
    1686:	82 95       	swap	r24
    1688:	86 95       	lsr	r24
    168a:	86 95       	lsr	r24
    168c:	81 70       	andi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	6f 89       	ldd	r22, Y+23	; 0x17
    1692:	78 8d       	ldd	r23, Y+24	; 0x18
    1694:	68 17       	cp	r22, r24
    1696:	79 07       	cpc	r23, r25
    1698:	09 f4       	brne	.+2      	; 0x169c <main+0x778>
    169a:	a6 c1       	rjmp	.+844    	; 0x19e8 <main+0xac4>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry1);
    169c:	0e 94 74 07 	call	0xee8	; 0xee8 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry1;
    16a0:	80 91 26 04 	lds	r24, 0x0426
    16a4:	82 95       	swap	r24
    16a6:	86 95       	lsr	r24
    16a8:	86 95       	lsr	r24
    16aa:	83 70       	andi	r24, 0x03	; 3
    16ac:	81 70       	andi	r24, 0x01	; 1
    16ae:	1d c0       	rjmp	.+58     	; 0x16ea <main+0x7c6>
						}							
						break;
					case S7:
						if(printVar){
    16b0:	99 20       	and	r9, r9
    16b2:	21 f0       	breq	.+8      	; 0x16bc <main+0x798>
							serial_print_string("SENSOR 7");
    16b4:	8a ee       	ldi	r24, 0xEA	; 234
    16b6:	91 e0       	ldi	r25, 0x01	; 1
    16b8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    16bc:	8f e0       	ldi	r24, 0x0F	; 15
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry2){
    16c4:	80 91 26 04 	lds	r24, 0x0426
    16c8:	88 1f       	adc	r24, r24
    16ca:	88 27       	eor	r24, r24
    16cc:	88 1f       	adc	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	6f 89       	ldd	r22, Y+23	; 0x17
    16d2:	78 8d       	ldd	r23, Y+24	; 0x18
    16d4:	68 17       	cp	r22, r24
    16d6:	79 07       	cpc	r23, r25
    16d8:	09 f4       	brne	.+2      	; 0x16dc <main+0x7b8>
    16da:	86 c1       	rjmp	.+780    	; 0x19e8 <main+0xac4>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry2);
    16dc:	0e 94 74 07 	call	0xee8	; 0xee8 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry2;
    16e0:	80 91 26 04 	lds	r24, 0x0426
    16e4:	88 1f       	adc	r24, r24
    16e6:	88 27       	eor	r24, r24
    16e8:	88 1f       	adc	r24, r24
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	38 8f       	std	Y+24, r19	; 0x18
    16f0:	2f 8b       	std	Y+23, r18	; 0x17
    16f2:	7a c1       	rjmp	.+756    	; 0x19e8 <main+0xac4>
						}							
						break;
					case O0_ON:
						if(printVar){
    16f4:	99 20       	and	r9, r9
    16f6:	21 f0       	breq	.+8      	; 0x1700 <main+0x7dc>
							serial_print_string("AC POWER     ON ");
    16f8:	83 ef       	ldi	r24, 0xF3	; 243
    16fa:	91 e0       	ldi	r25, 0x01	; 1
    16fc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1700:	80 91 2a 04 	lds	r24, 0x042A
    1704:	8e 7f       	andi	r24, 0xFE	; 254
    1706:	0d c0       	rjmp	.+26     	; 0x1722 <main+0x7fe>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
    1708:	80 91 2a 04 	lds	r24, 0x042A
    170c:	81 60       	ori	r24, 0x01	; 1
    170e:	6c c0       	rjmp	.+216    	; 0x17e8 <main+0x8c4>
						break;
					case O1_ON:
						if(printVar){
    1710:	99 20       	and	r9, r9
    1712:	21 f0       	breq	.+8      	; 0x171c <main+0x7f8>
							serial_print_string("BLOWER       ON  ");
    1714:	84 e0       	ldi	r24, 0x04	; 4
    1716:	92 e0       	ldi	r25, 0x02	; 2
    1718:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    171c:	80 91 2a 04 	lds	r24, 0x042A
    1720:	8d 7f       	andi	r24, 0xFD	; 253
    1722:	80 93 2a 04 	sts	0x042A, r24
    1726:	60 c1       	rjmp	.+704    	; 0x19e8 <main+0xac4>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1728:	80 91 2a 04 	lds	r24, 0x042A
    172c:	82 60       	ori	r24, 0x02	; 2
    172e:	5c c0       	rjmp	.+184    	; 0x17e8 <main+0x8c4>
						break;
					case O2_ON:
						if(printVar){
    1730:	99 20       	and	r9, r9
    1732:	21 f0       	breq	.+8      	; 0x173c <main+0x818>
							serial_print_string("PLATE STOP   ON ");
    1734:	86 e1       	ldi	r24, 0x16	; 22
    1736:	92 e0       	ldi	r25, 0x02	; 2
    1738:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
    173c:	80 91 2a 04 	lds	r24, 0x042A
    1740:	8b 7f       	andi	r24, 0xFB	; 251
    1742:	ef cf       	rjmp	.-34     	; 0x1722 <main+0x7fe>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1744:	80 91 2a 04 	lds	r24, 0x042A
    1748:	84 60       	ori	r24, 0x04	; 4
    174a:	4e c0       	rjmp	.+156    	; 0x17e8 <main+0x8c4>
						break;
					case O3_ON:
						if(printVar){
    174c:	99 20       	and	r9, r9
    174e:	21 f0       	breq	.+8      	; 0x1758 <main+0x834>
							serial_print_string("PLATE RAISE  ON ");
    1750:	87 e2       	ldi	r24, 0x27	; 39
    1752:	92 e0       	ldi	r25, 0x02	; 2
    1754:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1758:	80 91 2a 04 	lds	r24, 0x042A
    175c:	87 7f       	andi	r24, 0xF7	; 247
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    175e:	80 61       	ori	r24, 0x10	; 16
    1760:	e0 cf       	rjmp	.-64     	; 0x1722 <main+0x7fe>
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1762:	80 91 2a 04 	lds	r24, 0x042A
    1766:	88 60       	ori	r24, 0x08	; 8
    1768:	3f c0       	rjmp	.+126    	; 0x17e8 <main+0x8c4>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(printVar){
    176a:	99 20       	and	r9, r9
    176c:	21 f0       	breq	.+8      	; 0x1776 <main+0x852>
							serial_print_string("PLATE LOWER  ON ");
    176e:	88 e3       	ldi	r24, 0x38	; 56
    1770:	92 e0       	ldi	r25, 0x02	; 2
    1772:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1776:	80 91 2a 04 	lds	r24, 0x042A
    177a:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    177c:	8f 7e       	andi	r24, 0xEF	; 239
    177e:	d1 cf       	rjmp	.-94     	; 0x1722 <main+0x7fe>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1780:	80 91 2a 04 	lds	r24, 0x042A
    1784:	80 61       	ori	r24, 0x10	; 16
    1786:	30 c0       	rjmp	.+96     	; 0x17e8 <main+0x8c4>
						break;
					case O5_ON:
						if(printVar){
    1788:	99 20       	and	r9, r9
    178a:	21 f0       	breq	.+8      	; 0x1794 <main+0x870>
							serial_print_string("BRUSH1 RAISE ON ");
    178c:	89 e4       	ldi	r24, 0x49	; 73
    178e:	92 e0       	ldi	r25, 0x02	; 2
    1790:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    1794:	80 91 2a 04 	lds	r24, 0x042A
    1798:	8f 7d       	andi	r24, 0xDF	; 223
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    179a:	80 64       	ori	r24, 0x40	; 64
    179c:	c2 cf       	rjmp	.-124    	; 0x1722 <main+0x7fe>
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    179e:	80 91 2a 04 	lds	r24, 0x042A
    17a2:	80 62       	ori	r24, 0x20	; 32
    17a4:	21 c0       	rjmp	.+66     	; 0x17e8 <main+0x8c4>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(printVar){
    17a6:	99 20       	and	r9, r9
    17a8:	21 f0       	breq	.+8      	; 0x17b2 <main+0x88e>
							serial_print_string("BRUSH1 LOWER ON ");
    17aa:	8a e5       	ldi	r24, 0x5A	; 90
    17ac:	92 e0       	ldi	r25, 0x02	; 2
    17ae:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    17b2:	80 91 2a 04 	lds	r24, 0x042A
    17b6:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    17b8:	80 62       	ori	r24, 0x20	; 32
    17ba:	b3 cf       	rjmp	.-154    	; 0x1722 <main+0x7fe>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    17bc:	80 91 2a 04 	lds	r24, 0x042A
    17c0:	80 64       	ori	r24, 0x40	; 64
    17c2:	12 c0       	rjmp	.+36     	; 0x17e8 <main+0x8c4>
						break;
					case O7_ON:
						if(printVar){
    17c4:	99 20       	and	r9, r9
    17c6:	21 f0       	breq	.+8      	; 0x17d0 <main+0x8ac>
							serial_print_string("BRUSH2 RAISE ON ");
    17c8:	8b e6       	ldi	r24, 0x6B	; 107
    17ca:	92 e0       	ldi	r25, 0x02	; 2
    17cc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    17d0:	80 91 2a 04 	lds	r24, 0x042A
    17d4:	8f 77       	andi	r24, 0x7F	; 127
    17d6:	80 93 2a 04 	sts	0x042A, r24
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    17da:	80 91 28 04 	lds	r24, 0x0428
    17de:	81 60       	ori	r24, 0x01	; 1
    17e0:	40 c0       	rjmp	.+128    	; 0x1862 <main+0x93e>
						break;
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    17e2:	80 91 2a 04 	lds	r24, 0x042A
    17e6:	80 68       	ori	r24, 0x80	; 128
    17e8:	80 93 2a 04 	sts	0x042A, r24
    17ec:	fe c0       	rjmp	.+508    	; 0x19ea <main+0xac6>
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(printVar){
    17ee:	99 20       	and	r9, r9
    17f0:	21 f0       	breq	.+8      	; 0x17fa <main+0x8d6>
							serial_print_string("BRUSH2 LOWER ON ");
    17f2:	8c e7       	ldi	r24, 0x7C	; 124
    17f4:	92 e0       	ldi	r25, 0x02	; 2
    17f6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    17fa:	80 91 28 04 	lds	r24, 0x0428
    17fe:	8e 7f       	andi	r24, 0xFE	; 254
    1800:	80 93 28 04 	sts	0x0428, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1804:	80 91 2a 04 	lds	r24, 0x042A
    1808:	80 68       	ori	r24, 0x80	; 128
    180a:	8b cf       	rjmp	.-234    	; 0x1722 <main+0x7fe>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    180c:	80 91 28 04 	lds	r24, 0x0428
    1810:	81 60       	ori	r24, 0x01	; 1
    1812:	2d c0       	rjmp	.+90     	; 0x186e <main+0x94a>
						break;
					case O9_ON:
						if(printVar){
    1814:	99 20       	and	r9, r9
    1816:	21 f0       	breq	.+8      	; 0x1820 <main+0x8fc>
							serial_print_string("PAPER RAISE  ON ");
    1818:	8d e8       	ldi	r24, 0x8D	; 141
    181a:	92 e0       	ldi	r25, 0x02	; 2
    181c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1820:	80 91 28 04 	lds	r24, 0x0428
    1824:	8d 7f       	andi	r24, 0xFD	; 253
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    1826:	84 60       	ori	r24, 0x04	; 4
    1828:	1c c0       	rjmp	.+56     	; 0x1862 <main+0x93e>
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    182a:	80 91 28 04 	lds	r24, 0x0428
    182e:	82 60       	ori	r24, 0x02	; 2
    1830:	1e c0       	rjmp	.+60     	; 0x186e <main+0x94a>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(printVar){
    1832:	99 20       	and	r9, r9
    1834:	21 f0       	breq	.+8      	; 0x183e <main+0x91a>
							serial_print_string("PAPER LOWER  ON ");
    1836:	8e e9       	ldi	r24, 0x9E	; 158
    1838:	92 e0       	ldi	r25, 0x02	; 2
    183a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
    183e:	80 91 28 04 	lds	r24, 0x0428
    1842:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1844:	82 60       	ori	r24, 0x02	; 2
    1846:	0d c0       	rjmp	.+26     	; 0x1862 <main+0x93e>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    1848:	80 91 28 04 	lds	r24, 0x0428
    184c:	84 60       	ori	r24, 0x04	; 4
    184e:	0f c0       	rjmp	.+30     	; 0x186e <main+0x94a>
						break;
					case O11_ON:
						if(printVar){
    1850:	99 20       	and	r9, r9
    1852:	21 f0       	breq	.+8      	; 0x185c <main+0x938>
							serial_print_string("AIR KNIFE    ON ");
    1854:	8f ea       	ldi	r24, 0xAF	; 175
    1856:	92 e0       	ldi	r25, 0x02	; 2
    1858:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
    185c:	80 91 28 04 	lds	r24, 0x0428
    1860:	87 7f       	andi	r24, 0xF7	; 247
    1862:	80 93 28 04 	sts	0x0428, r24
    1866:	c0 c0       	rjmp	.+384    	; 0x19e8 <main+0xac4>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1868:	80 91 28 04 	lds	r24, 0x0428
    186c:	88 60       	ori	r24, 0x08	; 8
    186e:	80 93 28 04 	sts	0x0428, r24
    1872:	bb c0       	rjmp	.+374    	; 0x19ea <main+0xac6>
						break;
					case M1_F:
						if(printVar){
    1874:	99 20       	and	r9, r9
    1876:	21 f0       	breq	.+8      	; 0x1880 <main+0x95c>
							serial_print_string("LOADING    FRONT");
    1878:	80 ec       	ldi	r24, 0xC0	; 192
    187a:	92 e0       	ldi	r25, 0x02	; 2
    187c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1880:	80 91 2b 04 	lds	r24, 0x042B
    1884:	8d 7f       	andi	r24, 0xFD	; 253
    1886:	80 93 2b 04 	sts	0x042B, r24
						plateLoadMotor =  1;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9b 83       	std	Y+3, r25	; 0x03
    1890:	8a 83       	std	Y+2, r24	; 0x02
    1892:	aa c0       	rjmp	.+340    	; 0x19e8 <main+0xac4>
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
    1894:	80 91 2b 04 	lds	r24, 0x042B
    1898:	82 60       	ori	r24, 0x02	; 2
    189a:	80 93 2b 04 	sts	0x042B, r24
						plateLoadMotor =  1;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	9b 83       	std	Y+3, r25	; 0x03
    18a4:	8a 83       	std	Y+2, r24	; 0x02
    18a6:	a1 c0       	rjmp	.+322    	; 0x19ea <main+0xac6>
						break;
					case M2_F:
						if(printVar){
    18a8:	99 20       	and	r9, r9
    18aa:	21 f0       	breq	.+8      	; 0x18b4 <main+0x990>
							serial_print_string("DRIVE      FRONT");
    18ac:	81 ed       	ldi	r24, 0xD1	; 209
    18ae:	92 e0       	ldi	r25, 0x02	; 2
    18b0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    18b4:	80 91 2b 04 	lds	r24, 0x042B
    18b8:	8f 7e       	andi	r24, 0xEF	; 239
    18ba:	80 93 2b 04 	sts	0x042B, r24
						fixtureMotor =  1;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	9d 83       	std	Y+5, r25	; 0x05
    18c4:	8c 83       	std	Y+4, r24	; 0x04
						plateLoadMotor = 0;
    18c6:	1b 82       	std	Y+3, r1	; 0x03
    18c8:	1a 82       	std	Y+2, r1	; 0x02
    18ca:	99 24       	eor	r9, r9
    18cc:	32 e2       	ldi	r19, 0x22	; 34
    18ce:	63 2e       	mov	r6, r19
    18d0:	71 2c       	mov	r7, r1
    18d2:	8b c0       	rjmp	.+278    	; 0x19ea <main+0xac6>
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
    18d4:	80 91 2b 04 	lds	r24, 0x042B
    18d8:	80 61       	ori	r24, 0x10	; 16
    18da:	80 93 2b 04 	sts	0x042B, r24
						fixtureMotor =  1;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	9d 83       	std	Y+5, r25	; 0x05
    18e4:	8c 83       	std	Y+4, r24	; 0x04
    18e6:	81 c0       	rjmp	.+258    	; 0x19ea <main+0xac6>
						break;
					case M3_F:
						if(printVar){
    18e8:	99 20       	and	r9, r9
    18ea:	21 f0       	breq	.+8      	; 0x18f4 <main+0x9d0>
							serial_print_string("BRUSH1     FRONT");
    18ec:	82 ee       	ldi	r24, 0xE2	; 226
    18ee:	92 e0       	ldi	r25, 0x02	; 2
    18f0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
    18f4:	80 91 2b 04 	lds	r24, 0x042B
    18f8:	8f 77       	andi	r24, 0x7F	; 127
    18fa:	80 93 2b 04 	sts	0x042B, r24
						brush1Motor =  1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	9f 83       	std	Y+7, r25	; 0x07
    1904:	8e 83       	std	Y+6, r24	; 0x06
						fixtureMotor = 0;
    1906:	1d 82       	std	Y+5, r1	; 0x05
    1908:	1c 82       	std	Y+4, r1	; 0x04
    190a:	99 24       	eor	r9, r9
    190c:	24 e2       	ldi	r18, 0x24	; 36
    190e:	62 2e       	mov	r6, r18
    1910:	71 2c       	mov	r7, r1
    1912:	6b c0       	rjmp	.+214    	; 0x19ea <main+0xac6>
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
    1914:	80 91 2b 04 	lds	r24, 0x042B
    1918:	80 68       	ori	r24, 0x80	; 128
    191a:	80 93 2b 04 	sts	0x042B, r24
						brush1Motor =  1;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	9f 83       	std	Y+7, r25	; 0x07
    1924:	8e 83       	std	Y+6, r24	; 0x06
    1926:	61 c0       	rjmp	.+194    	; 0x19ea <main+0xac6>
						break;
					case M4_F:
						if(printVar){
    1928:	99 20       	and	r9, r9
    192a:	21 f0       	breq	.+8      	; 0x1934 <main+0xa10>
							serial_print_string("BRUSH2     FRONT");
    192c:	83 ef       	ldi	r24, 0xF3	; 243
    192e:	92 e0       	ldi	r25, 0x02	; 2
    1930:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
    1934:	80 91 27 04 	lds	r24, 0x0427
    1938:	8b 7f       	andi	r24, 0xFB	; 251
    193a:	80 93 27 04 	sts	0x0427, r24
						brush2Motor =  1;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	99 87       	std	Y+9, r25	; 0x09
    1944:	88 87       	std	Y+8, r24	; 0x08
						brush1Motor = 0;
    1946:	1f 82       	std	Y+7, r1	; 0x07
    1948:	1e 82       	std	Y+6, r1	; 0x06
    194a:	99 24       	eor	r9, r9
    194c:	96 e2       	ldi	r25, 0x26	; 38
    194e:	69 2e       	mov	r6, r25
    1950:	71 2c       	mov	r7, r1
    1952:	4b c0       	rjmp	.+150    	; 0x19ea <main+0xac6>
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
    1954:	80 91 27 04 	lds	r24, 0x0427
    1958:	84 60       	ori	r24, 0x04	; 4
    195a:	80 93 27 04 	sts	0x0427, r24
						brush2Motor =  1;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	99 87       	std	Y+9, r25	; 0x09
    1964:	88 87       	std	Y+8, r24	; 0x08
    1966:	41 c0       	rjmp	.+130    	; 0x19ea <main+0xac6>
						break;
					case M5_F:
						if(printVar){
    1968:	99 20       	and	r9, r9
    196a:	21 f0       	breq	.+8      	; 0x1974 <main+0xa50>
							serial_print_string("PAPER      FRONT");
    196c:	84 e0       	ldi	r24, 0x04	; 4
    196e:	93 e0       	ldi	r25, 0x03	; 3
    1970:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1974:	80 91 27 04 	lds	r24, 0x0427
    1978:	8f 7d       	andi	r24, 0xDF	; 223
    197a:	80 93 27 04 	sts	0x0427, r24
						paperTowelMotor =  1;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9b 87       	std	Y+11, r25	; 0x0b
    1984:	8a 87       	std	Y+10, r24	; 0x0a
						brush2Motor = 0;
    1986:	19 86       	std	Y+9, r1	; 0x09
    1988:	18 86       	std	Y+8, r1	; 0x08
    198a:	99 24       	eor	r9, r9
    198c:	88 e2       	ldi	r24, 0x28	; 40
    198e:	68 2e       	mov	r6, r24
    1990:	71 2c       	mov	r7, r1
    1992:	2b c0       	rjmp	.+86     	; 0x19ea <main+0xac6>
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
    1994:	80 91 27 04 	lds	r24, 0x0427
    1998:	80 62       	ori	r24, 0x20	; 32
    199a:	80 93 27 04 	sts	0x0427, r24
						paperTowelMotor =  1;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	9b 87       	std	Y+11, r25	; 0x0b
    19a4:	8a 87       	std	Y+10, r24	; 0x0a
    19a6:	21 c0       	rjmp	.+66     	; 0x19ea <main+0xac6>
						break;
					case M2_AND_M3:
						if(printVar){
    19a8:	99 20       	and	r9, r9
    19aa:	21 f0       	breq	.+8      	; 0x19b4 <main+0xa90>
							serial_print_string("FIXTURE & BRUSH1");
    19ac:	85 e1       	ldi	r24, 0x15	; 21
    19ae:	93 e0       	ldi	r25, 0x03	; 3
    19b0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	9d 83       	std	Y+5, r25	; 0x05
    19ba:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 1;
    19bc:	9f 83       	std	Y+7, r25	; 0x07
    19be:	8e 83       	std	Y+6, r24	; 0x06
    19c0:	13 c0       	rjmp	.+38     	; 0x19e8 <main+0xac4>
						break;
					case M2_AND_M4:
						if(printVar){
    19c2:	99 20       	and	r9, r9
    19c4:	21 f0       	breq	.+8      	; 0x19ce <main+0xaaa>
							serial_print_string("FIXTURE & BRUSH2");
    19c6:	86 e2       	ldi	r24, 0x26	; 38
    19c8:	93 e0       	ldi	r25, 0x03	; 3
    19ca:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9d 83       	std	Y+5, r25	; 0x05
    19d4:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 0;
    19d6:	1f 82       	std	Y+7, r1	; 0x07
    19d8:	1e 82       	std	Y+6, r1	; 0x06
						brush2Motor = 1;
    19da:	99 87       	std	Y+9, r25	; 0x09
    19dc:	88 87       	std	Y+8, r24	; 0x08
    19de:	99 24       	eor	r9, r9
    19e0:	0b e2       	ldi	r16, 0x2B	; 43
    19e2:	60 2e       	mov	r6, r16
    19e4:	71 2c       	mov	r7, r1
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <main+0xac6>
    19e8:	99 24       	eor	r9, r9
						break;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    19ea:	2a 81       	ldd	r18, Y+2	; 0x02
    19ec:	3b 81       	ldd	r19, Y+3	; 0x03
    19ee:	0c 81       	ldd	r16, Y+4	; 0x04
    19f0:	1d 81       	ldd	r17, Y+5	; 0x05
    19f2:	ee 80       	ldd	r14, Y+6	; 0x06
    19f4:	ff 80       	ldd	r15, Y+7	; 0x07
    19f6:	c8 84       	ldd	r12, Y+8	; 0x08
    19f8:	d9 84       	ldd	r13, Y+9	; 0x09
    19fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    19fc:	bb 84       	ldd	r11, Y+11	; 0x0b
    19fe:	c2 01       	movw	r24, r4
    1a00:	b1 01       	movw	r22, r2
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	50 e0       	ldi	r21, 0x00	; 0
    1a06:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <motor_and_write>

				serial_check(); counter++;
    1a0a:	0e 94 bb 1c 	call	0x3976	; 0x3976 <serial_check>
				delay_ms(1);
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>
			counter = 0;
			//clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
    1a16:	3c e2       	ldi	r19, 0x2C	; 44
    1a18:	63 16       	cp	r6, r19
    1a1a:	71 04       	cpc	r7, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <main+0xafc>
    1a1e:	b8 c5       	rjmp	.+2928   	; 0x2590 <main+0x166c>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1a20:	08 94       	sec
    1a22:	41 1c       	adc	r4, r1
    1a24:	51 1c       	adc	r5, r1
    1a26:	db cb       	rjmp	.-2122   	; 0x11de <main+0x2ba>
		}
		else{										//If switch is set to Run Mode
		
		bool printVar = true;

		serial_print_string("NORMAL");
    1a28:	87 e3       	ldi	r24, 0x37	; 55
    1a2a:	93 e0       	ldi	r25, 0x03	; 3
    1a2c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
		delay_ms(1000);
    1a30:	88 ee       	ldi	r24, 0xE8	; 232
    1a32:	93 e0       	ldi	r25, 0x03	; 3
    1a34:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>
		
		//clear();
		serial_print_string("SELECT CYCLE");
    1a38:	8e e3       	ldi	r24, 0x3E	; 62
    1a3a:	93 e0       	ldi	r25, 0x03	; 3
    1a3c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
    1a40:	ee 24       	eor	r14, r14
    1a42:	ff 24       	eor	r15, r15
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1a44:	c7 01       	movw	r24, r14
    1a46:	be 01       	movw	r22, r28
    1a48:	64 5f       	subi	r22, 0xF4	; 244
    1a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    1a50:	18 2f       	mov	r17, r24
			counter++;
    1a52:	08 94       	sec
    1a54:	e1 1c       	adc	r14, r1
    1a56:	f1 1c       	adc	r15, r1
			delay_ms(1);
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>
		delay_ms(1000);
		
		//clear();
		serial_print_string("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1a60:	11 23       	and	r17, r17
    1a62:	81 f3       	breq	.-32     	; 0x1a44 <main+0xb20>
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		//clear();
		serial_print_string("CYCLE:");
    1a64:	8b e4       	ldi	r24, 0x4B	; 75
    1a66:	93 e0       	ldi	r25, 0x03	; 3
    1a68:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>

		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1a6c:	80 91 2b 04 	lds	r24, 0x042B
    1a70:	80 62       	ori	r24, 0x20	; 32
    1a72:	80 93 2b 04 	sts	0x042B, r24

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1a7c:	88 23       	and	r24, r24
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <main+0xb5e>
    1a80:	70 c1       	rjmp	.+736    	; 0x1d62 <main+0xe3e>
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1a88:	88 23       	and	r24, r24
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <main+0xb6a>
    1a8c:	6a c1       	rjmp	.+724    	; 0x1d62 <main+0xe3e>
			lcd_goto_xy(7,0);
    1a8e:	87 e0       	ldi	r24, 0x07	; 7
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
			serial_print_string("FIRST B");
    1a96:	82 e5       	ldi	r24, 0x52	; 82
    1a98:	93 e0       	ldi	r25, 0x03	; 3
    1a9a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9d 83       	std	Y+5, r25	; 0x05
    1aa4:	8c 83       	std	Y+4, r24	; 0x04
    1aa6:	80 91 2b 04 	lds	r24, 0x042B
    1aaa:	80 62       	ori	r24, 0x20	; 32
    1aac:	80 93 2b 04 	sts	0x042B, r24
    1ab0:	33 24       	eor	r3, r3
    1ab2:	33 94       	inc	r3
    1ab4:	88 24       	eor	r8, r8
    1ab6:	99 24       	eor	r9, r9
    1ab8:	66 24       	eor	r6, r6
    1aba:	77 24       	eor	r7, r7
    1abc:	44 24       	eor	r4, r4
    1abe:	55 24       	eor	r5, r5
    1ac0:	1e 8a       	std	Y+22, r1	; 0x16
    1ac2:	1d 8a       	std	Y+21, r1	; 0x15
    1ac4:	22 24       	eor	r2, r2
    1ac6:	23 94       	inc	r2
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1ac8:	84 e4       	ldi	r24, 0x44	; 68
    1aca:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1ad4:	85 e4       	ldi	r24, 0x45	; 69
    1ad6:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1ada:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1ade:	80 93 26 04 	sts	0x0426, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1ae2:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1ae6:	80 93 29 04 	sts	0x0429, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1aea:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    1aee:	81 14       	cp	r8, r1
    1af0:	91 04       	cpc	r9, r1
    1af2:	b1 f0       	breq	.+44     	; 0x1b20 <main+0xbfc>
    1af4:	33 20       	and	r3, r3
    1af6:	a1 f0       	breq	.+40     	; 0x1b20 <main+0xbfc>
					lcd_goto_xy(6,1);
    1af8:	86 e0       	ldi	r24, 0x06	; 6
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
					serial_print_string("     ");
    1b00:	8a e5       	ldi	r24, 0x5A	; 90
    1b02:	93 e0       	ldi	r25, 0x03	; 3
    1b04:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
					lcd_goto_xy(0,1);
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
					serial_print_string("STATE ");
    1b10:	80 e6       	ldi	r24, 0x60	; 96
    1b12:	93 e0       	ldi	r25, 0x03	; 3
    1b14:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
					serial_print_int(state);
    1b18:	c4 01       	movw	r24, r8
    1b1a:	0e 94 74 07 	call	0xee8	; 0xee8 <serial_print_int>
    1b1e:	33 24       	eor	r3, r3
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1b20:	c3 01       	movw	r24, r6
    1b22:	be 01       	movw	r22, r28
    1b24:	64 5f       	subi	r22, 0xF4	; 244
    1b26:	7f 4f       	sbci	r23, 0xFF	; 255
    1b28:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    1b2c:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1b2e:	c4 01       	movw	r24, r8
    1b30:	a3 01       	movw	r20, r6
    1b32:	92 01       	movw	r18, r4
    1b34:	0e 94 55 03 	call	0x6aa	; 0x6aa <init_trans>
    1b38:	88 23       	and	r24, r24
    1b3a:	31 f0       	breq	.+12     	; 0x1b48 <main+0xc24>
					buttonTriggered = false;
					state ++;
    1b3c:	08 94       	sec
    1b3e:	81 1c       	adc	r8, r1
    1b40:	91 1c       	adc	r9, r1
    1b42:	23 01       	movw	r4, r6
    1b44:	33 24       	eor	r3, r3
    1b46:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    1b48:	c4 01       	movw	r24, r8
    1b4a:	b3 01       	movw	r22, r6
    1b4c:	a2 01       	movw	r20, r4
    1b4e:	0e 94 aa 03 	call	0x754	; 0x754 <firstB_trans>
    1b52:	88 23       	and	r24, r24
    1b54:	71 f0       	breq	.+28     	; 0x1b72 <main+0xc4e>
					state ++;
    1b56:	08 94       	sec
    1b58:	81 1c       	adc	r8, r1
    1b5a:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    1b5c:	6a e0       	ldi	r22, 0x0A	; 10
    1b5e:	86 16       	cp	r8, r22
    1b60:	91 04       	cpc	r9, r1
    1b62:	f1 f1       	breq	.+124    	; 0x1be0 <main+0xcbc>
    1b64:	7d e0       	ldi	r23, 0x0D	; 13
    1b66:	87 16       	cp	r8, r23
    1b68:	91 04       	cpc	r9, r1
    1b6a:	d1 f1       	breq	.+116    	; 0x1be0 <main+0xcbc>
    1b6c:	23 01       	movw	r4, r6
    1b6e:	33 24       	eor	r3, r3
    1b70:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}

				if(state == B1STOP2 && counter - counterRef > pWait){
    1b72:	8e e0       	ldi	r24, 0x0E	; 14
    1b74:	88 16       	cp	r8, r24
    1b76:	91 04       	cpc	r9, r1
    1b78:	71 f4       	brne	.+28     	; 0x1b96 <main+0xc72>
    1b7a:	93 01       	movw	r18, r6
    1b7c:	24 19       	sub	r18, r4
    1b7e:	35 09       	sbc	r19, r5
    1b80:	80 91 90 03 	lds	r24, 0x0390
    1b84:	90 91 91 03 	lds	r25, 0x0391
    1b88:	82 17       	cp	r24, r18
    1b8a:	93 07       	cpc	r25, r19
    1b8c:	5c f5       	brge	.+86     	; 0x1be4 <main+0xcc0>
    1b8e:	23 01       	movw	r4, r6
    1b90:	33 24       	eor	r3, r3
    1b92:	33 94       	inc	r3
    1b94:	04 c0       	rjmp	.+8      	; 0x1b9e <main+0xc7a>
					state = MOVED1;
					counterRef = counter;
					printVar = true;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1b96:	97 e1       	ldi	r25, 0x17	; 23
    1b98:	89 16       	cp	r8, r25
    1b9a:	91 04       	cpc	r9, r1
    1b9c:	19 f5       	brne	.+70     	; 0x1be4 <main+0xcc0>
    1b9e:	a3 01       	movw	r20, r6
    1ba0:	44 19       	sub	r20, r4
    1ba2:	55 09       	sbc	r21, r5
    1ba4:	20 91 bc 03 	lds	r18, 0x03BC
    1ba8:	30 91 bd 03 	lds	r19, 0x03BD
    1bac:	80 91 a2 03 	lds	r24, 0x03A2
    1bb0:	90 91 a3 03 	lds	r25, 0x03A3
    1bb4:	bc 01       	movw	r22, r24
    1bb6:	26 9f       	mul	r18, r22
    1bb8:	c0 01       	movw	r24, r0
    1bba:	27 9f       	mul	r18, r23
    1bbc:	90 0d       	add	r25, r0
    1bbe:	36 9f       	mul	r19, r22
    1bc0:	90 0d       	add	r25, r0
    1bc2:	11 24       	eor	r1, r1
    1bc4:	84 17       	cp	r24, r20
    1bc6:	95 07       	cpc	r25, r21
    1bc8:	3c f4       	brge	.+14     	; 0x1bd8 <main+0xcb4>
    1bca:	23 01       	movw	r4, r6
    1bcc:	33 24       	eor	r3, r3
    1bce:	33 94       	inc	r3
    1bd0:	18 e1       	ldi	r17, 0x18	; 24
    1bd2:	81 2e       	mov	r8, r17
    1bd4:	91 2c       	mov	r9, r1
    1bd6:	06 c0       	rjmp	.+12     	; 0x1be4 <main+0xcc0>
    1bd8:	b7 e1       	ldi	r27, 0x17	; 23
    1bda:	8b 2e       	mov	r8, r27
    1bdc:	91 2c       	mov	r9, r1
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <main+0xcc0>
    1be0:	33 24       	eor	r3, r3
    1be2:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1be4:	c4 01       	movw	r24, r8
    1be6:	b3 01       	movw	r22, r6
    1be8:	a2 01       	movw	r20, r4
    1bea:	2d 89       	ldd	r18, Y+21	; 0x15
    1bec:	3e 89       	ldd	r19, Y+22	; 0x16
    1bee:	0e 94 05 05 	call	0xa0a	; 0xa0a <dry_trans>
    1bf2:	88 23       	and	r24, r24
    1bf4:	79 f0       	breq	.+30     	; 0x1c14 <main+0xcf0>
					state ++;
    1bf6:	08 94       	sec
    1bf8:	81 1c       	adc	r8, r1
    1bfa:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    1bfc:	7a e1       	ldi	r23, 0x1A	; 26
    1bfe:	87 16       	cp	r8, r23
    1c00:	91 04       	cpc	r9, r1
    1c02:	29 f4       	brne	.+10     	; 0x1c0e <main+0xcea>
    1c04:	7e 8a       	std	Y+22, r7	; 0x16
    1c06:	6d 8a       	std	Y+21, r6	; 0x15
    1c08:	33 24       	eor	r3, r3
    1c0a:	33 94       	inc	r3
    1c0c:	0f c0       	rjmp	.+30     	; 0x1c2c <main+0xd08>
    1c0e:	23 01       	movw	r4, r6
    1c10:	33 24       	eor	r3, r3
    1c12:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    1c14:	83 e2       	ldi	r24, 0x23	; 35
    1c16:	88 16       	cp	r8, r24
    1c18:	91 04       	cpc	r9, r1
    1c1a:	41 f4       	brne	.+16     	; 0x1c2c <main+0xd08>
    1c1c:	c3 01       	movw	r24, r6
    1c1e:	84 19       	sub	r24, r4
    1c20:	95 09       	sbc	r25, r5
    1c22:	0b 97       	sbiw	r24, 0x0b	; 11
    1c24:	1c f0       	brlt	.+6      	; 0x1c2c <main+0xd08>
    1c26:	a4 e2       	ldi	r26, 0x24	; 36
    1c28:	8a 2e       	mov	r8, r26
    1c2a:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1c2c:	c4 01       	movw	r24, r8
    1c2e:	b3 01       	movw	r22, r6
    1c30:	ae 01       	movw	r20, r28
    1c32:	4e 5f       	subi	r20, 0xFE	; 254
    1c34:	5f 4f       	sbci	r21, 0xFF	; 255
    1c36:	9e 01       	movw	r18, r28
    1c38:	2c 5f       	subi	r18, 0xFC	; 252
    1c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3c:	8e 01       	movw	r16, r28
    1c3e:	0a 5f       	subi	r16, 0xFA	; 250
    1c40:	1f 4f       	sbci	r17, 0xFF	; 255
    1c42:	f8 e0       	ldi	r31, 0x08	; 8
    1c44:	ef 2e       	mov	r14, r31
    1c46:	f1 2c       	mov	r15, r1
    1c48:	ec 0e       	add	r14, r28
    1c4a:	fd 1e       	adc	r15, r29
    1c4c:	ea e0       	ldi	r30, 0x0A	; 10
    1c4e:	ce 2e       	mov	r12, r30
    1c50:	d1 2c       	mov	r13, r1
    1c52:	cc 0e       	add	r12, r28
    1c54:	dd 1e       	adc	r13, r29
    1c56:	5e 01       	movw	r10, r28
    1c58:	08 94       	sec
    1c5a:	a1 1c       	adc	r10, r1
    1c5c:	b1 1c       	adc	r11, r1
    1c5e:	0e 94 d3 06 	call	0xda6	; 0xda6 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1c62:	c4 01       	movw	r24, r8
    1c64:	b3 01       	movw	r22, r6
    1c66:	ae 01       	movw	r20, r28
    1c68:	4e 5f       	subi	r20, 0xFE	; 254
    1c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6c:	9e 01       	movw	r18, r28
    1c6e:	2c 5f       	subi	r18, 0xFC	; 252
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	8e 01       	movw	r16, r28
    1c74:	0a 5f       	subi	r16, 0xFA	; 250
    1c76:	1f 4f       	sbci	r17, 0xFF	; 255
    1c78:	b8 e0       	ldi	r27, 0x08	; 8
    1c7a:	eb 2e       	mov	r14, r27
    1c7c:	f1 2c       	mov	r15, r1
    1c7e:	ec 0e       	add	r14, r28
    1c80:	fd 1e       	adc	r15, r29
    1c82:	aa e0       	ldi	r26, 0x0A	; 10
    1c84:	ca 2e       	mov	r12, r26
    1c86:	d1 2c       	mov	r13, r1
    1c88:	cc 0e       	add	r12, r28
    1c8a:	dd 1e       	adc	r13, r29
    1c8c:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    1c90:	9e e0       	ldi	r25, 0x0E	; 14
    1c92:	89 16       	cp	r8, r25
    1c94:	91 04       	cpc	r9, r1
    1c96:	59 f4       	brne	.+22     	; 0x1cae <main+0xd8a>
					brush1Motor = 0;
    1c98:	1f 82       	std	Y+7, r1	; 0x07
    1c9a:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    1c9c:	1d 82       	std	Y+5, r1	; 0x05
    1c9e:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1ca0:	80 91 2a 04 	lds	r24, 0x042A
    1ca4:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1ca6:	80 62       	ori	r24, 0x20	; 32
    1ca8:	80 93 2a 04 	sts	0x042A, r24
    1cac:	12 c0       	rjmp	.+36     	; 0x1cd2 <main+0xdae>
				}
				if(state == MOVED1){
    1cae:	27 e1       	ldi	r18, 0x17	; 23
    1cb0:	82 16       	cp	r8, r18
    1cb2:	91 04       	cpc	r9, r1
    1cb4:	71 f4       	brne	.+28     	; 0x1cd2 <main+0xdae>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1cb6:	80 91 2b 04 	lds	r24, 0x042B
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	70 e0       	ldi	r23, 0x00	; 0
    1cbe:	7d 83       	std	Y+5, r23	; 0x05
    1cc0:	6c 83       	std	Y+4, r22	; 0x04
    1cc2:	80 63       	ori	r24, 0x30	; 48
    1cc4:	80 93 2b 04 	sts	0x042B, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1cc8:	80 91 27 04 	lds	r24, 0x0427
    1ccc:	8e 7f       	andi	r24, 0xFE	; 254
    1cce:	80 93 27 04 	sts	0x0427, r24
				}
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1cd2:	c4 01       	movw	r24, r8
    1cd4:	b3 01       	movw	r22, r6
    1cd6:	ae 01       	movw	r20, r28
    1cd8:	4e 5f       	subi	r20, 0xFE	; 254
    1cda:	5f 4f       	sbci	r21, 0xFF	; 255
    1cdc:	9e 01       	movw	r18, r28
    1cde:	2c 5f       	subi	r18, 0xFC	; 252
    1ce0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce2:	8e 01       	movw	r16, r28
    1ce4:	0a 5f       	subi	r16, 0xFA	; 250
    1ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce8:	f8 e0       	ldi	r31, 0x08	; 8
    1cea:	ef 2e       	mov	r14, r31
    1cec:	f1 2c       	mov	r15, r1
    1cee:	ec 0e       	add	r14, r28
    1cf0:	fd 1e       	adc	r15, r29
    1cf2:	ea e0       	ldi	r30, 0x0A	; 10
    1cf4:	ce 2e       	mov	r12, r30
    1cf6:	d1 2c       	mov	r13, r1
    1cf8:	cc 0e       	add	r12, r28
    1cfa:	dd 1e       	adc	r13, r29
    1cfc:	0e 94 47 02 	call	0x48e	; 0x48e <dry_action>
				if(state == END){
    1d00:	73 e2       	ldi	r23, 0x23	; 35
    1d02:	87 16       	cp	r8, r23
    1d04:	91 04       	cpc	r9, r1
    1d06:	71 f4       	brne	.+28     	; 0x1d24 <main+0xe00>
					plateLoadMotor = 0;
    1d08:	1b 82       	std	Y+3, r1	; 0x03
    1d0a:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1d0c:	80 91 2b 04 	lds	r24, 0x042B
    1d10:	8b 7f       	andi	r24, 0xFB	; 251
    1d12:	80 93 2b 04 	sts	0x042B, r24
					if(print35 == 1){
    1d16:	22 20       	and	r2, r2
    1d18:	29 f0       	breq	.+10     	; 0x1d24 <main+0xe00>
						//clear();
						serial_print_string("END OF CYCLE");
    1d1a:	87 e6       	ldi	r24, 0x67	; 103
    1d1c:	93 e0       	ldi	r25, 0x03	; 3
    1d1e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
    1d22:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1d24:	2a 81       	ldd	r18, Y+2	; 0x02
    1d26:	3b 81       	ldd	r19, Y+3	; 0x03
    1d28:	0c 81       	ldd	r16, Y+4	; 0x04
    1d2a:	1d 81       	ldd	r17, Y+5	; 0x05
    1d2c:	ee 80       	ldd	r14, Y+6	; 0x06
    1d2e:	ff 80       	ldd	r15, Y+7	; 0x07
    1d30:	c8 84       	ldd	r12, Y+8	; 0x08
    1d32:	d9 84       	ldd	r13, Y+9	; 0x09
    1d34:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d36:	bb 84       	ldd	r11, Y+11	; 0x0b
    1d38:	c3 01       	movw	r24, r6
    1d3a:	b2 01       	movw	r22, r4
    1d3c:	4d 89       	ldd	r20, Y+21	; 0x15
    1d3e:	5e 89       	ldd	r21, Y+22	; 0x16
    1d40:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <motor_and_write>

				serial_check(); counter++;
    1d44:	0e 94 bb 1c 	call	0x3976	; 0x3976 <serial_check>
				delay_ms(1);
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("FIRST B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1d50:	84 e2       	ldi	r24, 0x24	; 36
    1d52:	88 16       	cp	r8, r24
    1d54:	91 04       	cpc	r9, r1
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <main+0xe36>
    1d58:	1b c4       	rjmp	.+2102   	; 0x2590 <main+0x166c>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1d5a:	08 94       	sec
    1d5c:	61 1c       	adc	r6, r1
    1d5e:	71 1c       	adc	r7, r1
    1d60:	b3 ce       	rjmp	.-666    	; 0x1ac8 <main+0xba4>
				delay_ms(1);
   		 	}
		}


		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1d68:	88 23       	and	r24, r24
    1d6a:	09 f4       	brne	.+2      	; 0x1d6e <main+0xe4a>
    1d6c:	3b c1       	rjmp	.+630    	; 0x1fe4 <main+0x10c0>
    1d6e:	82 e0       	ldi	r24, 0x02	; 2
    1d70:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1d74:	88 23       	and	r24, r24
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <main+0xe56>
    1d78:	35 c1       	rjmp	.+618    	; 0x1fe4 <main+0x10c0>
			lcd_goto_xy(7,0);
    1d7a:	87 e0       	ldi	r24, 0x07	; 7
    1d7c:	60 e0       	ldi	r22, 0x00	; 0
    1d7e:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
			serial_print_string("SECOND B");
    1d82:	84 e7       	ldi	r24, 0x74	; 116
    1d84:	93 e0       	ldi	r25, 0x03	; 3
    1d86:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9d 83       	std	Y+5, r25	; 0x05
    1d90:	8c 83       	std	Y+4, r24	; 0x04
    1d92:	80 91 2b 04 	lds	r24, 0x042B
    1d96:	80 62       	ori	r24, 0x20	; 32
    1d98:	80 93 2b 04 	sts	0x042B, r24
    1d9c:	33 24       	eor	r3, r3
    1d9e:	33 94       	inc	r3
    1da0:	88 24       	eor	r8, r8
    1da2:	99 24       	eor	r9, r9
    1da4:	66 24       	eor	r6, r6
    1da6:	77 24       	eor	r7, r7
    1da8:	44 24       	eor	r4, r4
    1daa:	55 24       	eor	r5, r5
    1dac:	19 8a       	std	Y+17, r1	; 0x11
    1dae:	18 8a       	std	Y+16, r1	; 0x10
    1db0:	22 24       	eor	r2, r2
    1db2:	23 94       	inc	r2
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1db4:	84 e4       	ldi	r24, 0x44	; 68
    1db6:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1dc0:	85 e4       	ldi	r24, 0x45	; 69
    1dc2:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1dc6:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1dca:	80 93 26 04 	sts	0x0426, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1dce:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1dd2:	80 93 29 04 	sts	0x0429, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1dd6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    1dda:	81 14       	cp	r8, r1
    1ddc:	91 04       	cpc	r9, r1
    1dde:	b1 f0       	breq	.+44     	; 0x1e0c <main+0xee8>
    1de0:	33 20       	and	r3, r3
    1de2:	a1 f0       	breq	.+40     	; 0x1e0c <main+0xee8>
					lcd_goto_xy(6,1);
    1de4:	86 e0       	ldi	r24, 0x06	; 6
    1de6:	61 e0       	ldi	r22, 0x01	; 1
    1de8:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
					serial_print_string("     ");
    1dec:	8a e5       	ldi	r24, 0x5A	; 90
    1dee:	93 e0       	ldi	r25, 0x03	; 3
    1df0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
					lcd_goto_xy(0,1);
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	61 e0       	ldi	r22, 0x01	; 1
    1df8:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
					serial_print_string("STATE ");
    1dfc:	80 e6       	ldi	r24, 0x60	; 96
    1dfe:	93 e0       	ldi	r25, 0x03	; 3
    1e00:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
					serial_print_int(state);
    1e04:	c4 01       	movw	r24, r8
    1e06:	0e 94 74 07 	call	0xee8	; 0xee8 <serial_print_int>
    1e0a:	33 24       	eor	r3, r3
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1e0c:	c3 01       	movw	r24, r6
    1e0e:	be 01       	movw	r22, r28
    1e10:	64 5f       	subi	r22, 0xF4	; 244
    1e12:	7f 4f       	sbci	r23, 0xFF	; 255
    1e14:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    1e18:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1e1a:	c4 01       	movw	r24, r8
    1e1c:	a3 01       	movw	r20, r6
    1e1e:	92 01       	movw	r18, r4
    1e20:	0e 94 55 03 	call	0x6aa	; 0x6aa <init_trans>
    1e24:	88 23       	and	r24, r24
    1e26:	31 f0       	breq	.+12     	; 0x1e34 <main+0xf10>
					buttonTriggered = false;
					state ++;
    1e28:	08 94       	sec
    1e2a:	81 1c       	adc	r8, r1
    1e2c:	91 1c       	adc	r9, r1
    1e2e:	23 01       	movw	r4, r6
    1e30:	33 24       	eor	r3, r3
    1e32:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1e34:	96 e0       	ldi	r25, 0x06	; 6
    1e36:	89 16       	cp	r8, r25
    1e38:	91 04       	cpc	r9, r1
    1e3a:	e1 f4       	brne	.+56     	; 0x1e74 <main+0xf50>
    1e3c:	a3 01       	movw	r20, r6
    1e3e:	44 19       	sub	r20, r4
    1e40:	55 09       	sbc	r21, r5
    1e42:	20 91 be 03 	lds	r18, 0x03BE
    1e46:	30 91 bf 03 	lds	r19, 0x03BF
    1e4a:	80 91 a2 03 	lds	r24, 0x03A2
    1e4e:	90 91 a3 03 	lds	r25, 0x03A3
    1e52:	bc 01       	movw	r22, r24
    1e54:	26 9f       	mul	r18, r22
    1e56:	c0 01       	movw	r24, r0
    1e58:	27 9f       	mul	r18, r23
    1e5a:	90 0d       	add	r25, r0
    1e5c:	36 9f       	mul	r19, r22
    1e5e:	90 0d       	add	r25, r0
    1e60:	11 24       	eor	r1, r1
    1e62:	84 17       	cp	r24, r20
    1e64:	95 07       	cpc	r25, r21
    1e66:	34 f4       	brge	.+12     	; 0x1e74 <main+0xf50>
    1e68:	23 01       	movw	r4, r6
    1e6a:	33 24       	eor	r3, r3
    1e6c:	33 94       	inc	r3
    1e6e:	bf e0       	ldi	r27, 0x0F	; 15
    1e70:	8b 2e       	mov	r8, r27
    1e72:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}

				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    1e74:	c4 01       	movw	r24, r8
    1e76:	b3 01       	movw	r22, r6
    1e78:	a2 01       	movw	r20, r4
    1e7a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <secondB_trans>
    1e7e:	88 23       	and	r24, r24
    1e80:	31 f0       	breq	.+12     	; 0x1e8e <main+0xf6a>
					state ++;
    1e82:	08 94       	sec
    1e84:	81 1c       	adc	r8, r1
    1e86:	91 1c       	adc	r9, r1
    1e88:	23 01       	movw	r4, r6
    1e8a:	33 24       	eor	r3, r3
    1e8c:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1e8e:	c4 01       	movw	r24, r8
    1e90:	b3 01       	movw	r22, r6
    1e92:	a2 01       	movw	r20, r4
    1e94:	28 89       	ldd	r18, Y+16	; 0x10
    1e96:	39 89       	ldd	r19, Y+17	; 0x11
    1e98:	0e 94 05 05 	call	0xa0a	; 0xa0a <dry_trans>
    1e9c:	88 23       	and	r24, r24
    1e9e:	79 f0       	breq	.+30     	; 0x1ebe <main+0xf9a>
					state ++;
    1ea0:	08 94       	sec
    1ea2:	81 1c       	adc	r8, r1
    1ea4:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    1ea6:	7a e1       	ldi	r23, 0x1A	; 26
    1ea8:	87 16       	cp	r8, r23
    1eaa:	91 04       	cpc	r9, r1
    1eac:	29 f4       	brne	.+10     	; 0x1eb8 <main+0xf94>
    1eae:	79 8a       	std	Y+17, r7	; 0x11
    1eb0:	68 8a       	std	Y+16, r6	; 0x10
    1eb2:	33 24       	eor	r3, r3
    1eb4:	33 94       	inc	r3
    1eb6:	0f c0       	rjmp	.+30     	; 0x1ed6 <main+0xfb2>
    1eb8:	23 01       	movw	r4, r6
    1eba:	33 24       	eor	r3, r3
    1ebc:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    1ebe:	83 e2       	ldi	r24, 0x23	; 35
    1ec0:	88 16       	cp	r8, r24
    1ec2:	91 04       	cpc	r9, r1
    1ec4:	41 f4       	brne	.+16     	; 0x1ed6 <main+0xfb2>
    1ec6:	c3 01       	movw	r24, r6
    1ec8:	84 19       	sub	r24, r4
    1eca:	95 09       	sbc	r25, r5
    1ecc:	0b 97       	sbiw	r24, 0x0b	; 11
    1ece:	1c f0       	brlt	.+6      	; 0x1ed6 <main+0xfb2>
    1ed0:	a4 e2       	ldi	r26, 0x24	; 36
    1ed2:	8a 2e       	mov	r8, r26
    1ed4:	91 2c       	mov	r9, r1
				}


				//state actions
				
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1ed6:	c4 01       	movw	r24, r8
    1ed8:	b3 01       	movw	r22, r6
    1eda:	ae 01       	movw	r20, r28
    1edc:	4e 5f       	subi	r20, 0xFE	; 254
    1ede:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee0:	9e 01       	movw	r18, r28
    1ee2:	2c 5f       	subi	r18, 0xFC	; 252
    1ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee6:	8e 01       	movw	r16, r28
    1ee8:	0a 5f       	subi	r16, 0xFA	; 250
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	f8 e0       	ldi	r31, 0x08	; 8
    1eee:	ef 2e       	mov	r14, r31
    1ef0:	f1 2c       	mov	r15, r1
    1ef2:	ec 0e       	add	r14, r28
    1ef4:	fd 1e       	adc	r15, r29
    1ef6:	ea e0       	ldi	r30, 0x0A	; 10
    1ef8:	ce 2e       	mov	r12, r30
    1efa:	d1 2c       	mov	r13, r1
    1efc:	cc 0e       	add	r12, r28
    1efe:	dd 1e       	adc	r13, r29
    1f00:	5e 01       	movw	r10, r28
    1f02:	08 94       	sec
    1f04:	a1 1c       	adc	r10, r1
    1f06:	b1 1c       	adc	r11, r1
    1f08:	0e 94 d3 06 	call	0xda6	; 0xda6 <init_action>
				if(state == MOVEC1){
    1f0c:	96 e0       	ldi	r25, 0x06	; 6
    1f0e:	89 16       	cp	r8, r25
    1f10:	91 04       	cpc	r9, r1
    1f12:	49 f4       	brne	.+18     	; 0x1f26 <main+0x1002>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1f14:	80 91 2b 04 	lds	r24, 0x042B
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1f18:	21 e0       	ldi	r18, 0x01	; 1
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	3d 83       	std	Y+5, r19	; 0x05
    1f1e:	2c 83       	std	Y+4, r18	; 0x04
    1f20:	80 63       	ori	r24, 0x30	; 48
    1f22:	80 93 2b 04 	sts	0x042B, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1f26:	c4 01       	movw	r24, r8
    1f28:	b3 01       	movw	r22, r6
    1f2a:	ae 01       	movw	r20, r28
    1f2c:	4e 5f       	subi	r20, 0xFE	; 254
    1f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f30:	9e 01       	movw	r18, r28
    1f32:	2c 5f       	subi	r18, 0xFC	; 252
    1f34:	3f 4f       	sbci	r19, 0xFF	; 255
    1f36:	8e 01       	movw	r16, r28
    1f38:	0a 5f       	subi	r16, 0xFA	; 250
    1f3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3c:	b8 e0       	ldi	r27, 0x08	; 8
    1f3e:	eb 2e       	mov	r14, r27
    1f40:	f1 2c       	mov	r15, r1
    1f42:	ec 0e       	add	r14, r28
    1f44:	fd 1e       	adc	r15, r29
    1f46:	aa e0       	ldi	r26, 0x0A	; 10
    1f48:	ca 2e       	mov	r12, r26
    1f4a:	d1 2c       	mov	r13, r1
    1f4c:	cc 0e       	add	r12, r28
    1f4e:	dd 1e       	adc	r13, r29
    1f50:	0e 94 c8 01 	call	0x390	; 0x390 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1f54:	c4 01       	movw	r24, r8
    1f56:	b3 01       	movw	r22, r6
    1f58:	ae 01       	movw	r20, r28
    1f5a:	4e 5f       	subi	r20, 0xFE	; 254
    1f5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f5e:	9e 01       	movw	r18, r28
    1f60:	2c 5f       	subi	r18, 0xFC	; 252
    1f62:	3f 4f       	sbci	r19, 0xFF	; 255
    1f64:	8e 01       	movw	r16, r28
    1f66:	0a 5f       	subi	r16, 0xFA	; 250
    1f68:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6a:	f8 e0       	ldi	r31, 0x08	; 8
    1f6c:	ef 2e       	mov	r14, r31
    1f6e:	f1 2c       	mov	r15, r1
    1f70:	ec 0e       	add	r14, r28
    1f72:	fd 1e       	adc	r15, r29
    1f74:	ea e0       	ldi	r30, 0x0A	; 10
    1f76:	ce 2e       	mov	r12, r30
    1f78:	d1 2c       	mov	r13, r1
    1f7a:	cc 0e       	add	r12, r28
    1f7c:	dd 1e       	adc	r13, r29
    1f7e:	0e 94 47 02 	call	0x48e	; 0x48e <dry_action>
				if(state == END){
    1f82:	33 e2       	ldi	r19, 0x23	; 35
    1f84:	83 16       	cp	r8, r19
    1f86:	91 04       	cpc	r9, r1
    1f88:	71 f4       	brne	.+28     	; 0x1fa6 <main+0x1082>
					plateLoadMotor = 0;
    1f8a:	1b 82       	std	Y+3, r1	; 0x03
    1f8c:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1f8e:	80 91 2b 04 	lds	r24, 0x042B
    1f92:	8b 7f       	andi	r24, 0xFB	; 251
    1f94:	80 93 2b 04 	sts	0x042B, r24
					if(print35 == 1){
    1f98:	22 20       	and	r2, r2
    1f9a:	29 f0       	breq	.+10     	; 0x1fa6 <main+0x1082>
						//clear();
						serial_print_string("END OF CYCLE");
    1f9c:	87 e6       	ldi	r24, 0x67	; 103
    1f9e:	93 e0       	ldi	r25, 0x03	; 3
    1fa0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
    1fa4:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1fa6:	2a 81       	ldd	r18, Y+2	; 0x02
    1fa8:	3b 81       	ldd	r19, Y+3	; 0x03
    1faa:	0c 81       	ldd	r16, Y+4	; 0x04
    1fac:	1d 81       	ldd	r17, Y+5	; 0x05
    1fae:	ee 80       	ldd	r14, Y+6	; 0x06
    1fb0:	ff 80       	ldd	r15, Y+7	; 0x07
    1fb2:	c8 84       	ldd	r12, Y+8	; 0x08
    1fb4:	d9 84       	ldd	r13, Y+9	; 0x09
    1fb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fb8:	bb 84       	ldd	r11, Y+11	; 0x0b
    1fba:	c3 01       	movw	r24, r6
    1fbc:	b2 01       	movw	r22, r4
    1fbe:	48 89       	ldd	r20, Y+16	; 0x10
    1fc0:	59 89       	ldd	r21, Y+17	; 0x11
    1fc2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <motor_and_write>

				serial_check(); counter++;
    1fc6:	0e 94 bb 1c 	call	0x3976	; 0x3976 <serial_check>
				delay_ms(1);
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>

		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("SECOND B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1fd2:	64 e2       	ldi	r22, 0x24	; 36
    1fd4:	86 16       	cp	r8, r22
    1fd6:	91 04       	cpc	r9, r1
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <main+0x10b8>
    1fda:	da c2       	rjmp	.+1460   	; 0x2590 <main+0x166c>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1fdc:	08 94       	sec
    1fde:	61 1c       	adc	r6, r1
    1fe0:	71 1c       	adc	r7, r1
    1fe2:	e8 ce       	rjmp	.-560    	; 0x1db4 <main+0xe90>
				delay_ms(1);
   		 	}
		}


		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1fea:	88 23       	and	r24, r24
    1fec:	09 f0       	breq	.+2      	; 0x1ff0 <main+0x10cc>
    1fee:	5f c1       	rjmp	.+702    	; 0x22ae <main+0x138a>
    1ff0:	82 e0       	ldi	r24, 0x02	; 2
    1ff2:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1ff6:	88 23       	and	r24, r24
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <main+0x10d8>
    1ffa:	59 c1       	rjmp	.+690    	; 0x22ae <main+0x138a>
			lcd_goto_xy(7,0);
    1ffc:	87 e0       	ldi	r24, 0x07	; 7
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
			serial_print_string("BOTH B");
    2004:	8d e7       	ldi	r24, 0x7D	; 125
    2006:	93 e0       	ldi	r25, 0x03	; 3
    2008:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9d 83       	std	Y+5, r25	; 0x05
    2012:	8c 83       	std	Y+4, r24	; 0x04
    2014:	80 91 2b 04 	lds	r24, 0x042B
    2018:	80 62       	ori	r24, 0x20	; 32
    201a:	80 93 2b 04 	sts	0x042B, r24
    201e:	33 24       	eor	r3, r3
    2020:	33 94       	inc	r3
    2022:	88 24       	eor	r8, r8
    2024:	99 24       	eor	r9, r9
    2026:	66 24       	eor	r6, r6
    2028:	77 24       	eor	r7, r7
    202a:	44 24       	eor	r4, r4
    202c:	55 24       	eor	r5, r5
    202e:	1f 86       	std	Y+15, r1	; 0x0f
    2030:	1e 86       	std	Y+14, r1	; 0x0e
    2032:	22 24       	eor	r2, r2
    2034:	23 94       	inc	r2
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    2036:	84 e4       	ldi	r24, 0x44	; 68
    2038:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2042:	85 e4       	ldi	r24, 0x45	; 69
    2044:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    2048:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    204c:	80 93 26 04 	sts	0x0426, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2050:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    2054:	80 93 29 04 	sts	0x0429, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    2058:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    205c:	81 14       	cp	r8, r1
    205e:	91 04       	cpc	r9, r1
    2060:	b1 f0       	breq	.+44     	; 0x208e <main+0x116a>
    2062:	33 20       	and	r3, r3
    2064:	a1 f0       	breq	.+40     	; 0x208e <main+0x116a>
					lcd_goto_xy(6,1);
    2066:	86 e0       	ldi	r24, 0x06	; 6
    2068:	61 e0       	ldi	r22, 0x01	; 1
    206a:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
					serial_print_string("       ");
    206e:	84 e8       	ldi	r24, 0x84	; 132
    2070:	93 e0       	ldi	r25, 0x03	; 3
    2072:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
					lcd_goto_xy(0,1);
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	61 e0       	ldi	r22, 0x01	; 1
    207a:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
					serial_print_string("STATE ");
    207e:	80 e6       	ldi	r24, 0x60	; 96
    2080:	93 e0       	ldi	r25, 0x03	; 3
    2082:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
					serial_print_int(state);
    2086:	c4 01       	movw	r24, r8
    2088:	0e 94 74 07 	call	0xee8	; 0xee8 <serial_print_int>
    208c:	33 24       	eor	r3, r3
					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    208e:	c3 01       	movw	r24, r6
    2090:	be 01       	movw	r22, r28
    2092:	64 5f       	subi	r22, 0xF4	; 244
    2094:	7f 4f       	sbci	r23, 0xFF	; 255
    2096:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    209a:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    209c:	c4 01       	movw	r24, r8
    209e:	a3 01       	movw	r20, r6
    20a0:	92 01       	movw	r18, r4
    20a2:	0e 94 55 03 	call	0x6aa	; 0x6aa <init_trans>
    20a6:	88 23       	and	r24, r24
    20a8:	31 f0       	breq	.+12     	; 0x20b6 <main+0x1192>
					buttonTriggered = false;
					state ++;
    20aa:	08 94       	sec
    20ac:	81 1c       	adc	r8, r1
    20ae:	91 1c       	adc	r9, r1
    20b0:	23 01       	movw	r4, r6
    20b2:	33 24       	eor	r3, r3
    20b4:	33 94       	inc	r3
					printVar = true;
				}

				
				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    20b6:	c4 01       	movw	r24, r8
    20b8:	b3 01       	movw	r22, r6
    20ba:	a2 01       	movw	r20, r4
    20bc:	0e 94 aa 03 	call	0x754	; 0x754 <firstB_trans>
    20c0:	88 23       	and	r24, r24
    20c2:	71 f0       	breq	.+28     	; 0x20e0 <main+0x11bc>
					state ++;
    20c4:	08 94       	sec
    20c6:	81 1c       	adc	r8, r1
    20c8:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    20ca:	7a e0       	ldi	r23, 0x0A	; 10
    20cc:	87 16       	cp	r8, r23
    20ce:	91 04       	cpc	r9, r1
    20d0:	e1 f0       	breq	.+56     	; 0x210a <main+0x11e6>
    20d2:	8d e0       	ldi	r24, 0x0D	; 13
    20d4:	88 16       	cp	r8, r24
    20d6:	91 04       	cpc	r9, r1
    20d8:	c1 f0       	breq	.+48     	; 0x210a <main+0x11e6>
    20da:	23 01       	movw	r4, r6
    20dc:	33 24       	eor	r3, r3
    20de:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    20e0:	9e e0       	ldi	r25, 0x0E	; 14
    20e2:	89 16       	cp	r8, r25
    20e4:	91 04       	cpc	r9, r1
    20e6:	99 f4       	brne	.+38     	; 0x210e <main+0x11ea>
    20e8:	93 01       	movw	r18, r6
    20ea:	24 19       	sub	r18, r4
    20ec:	35 09       	sbc	r19, r5
    20ee:	80 91 90 03 	lds	r24, 0x0390
    20f2:	90 91 91 03 	lds	r25, 0x0391
    20f6:	82 17       	cp	r24, r18
    20f8:	93 07       	cpc	r25, r19
    20fa:	4c f4       	brge	.+18     	; 0x210e <main+0x11ea>
    20fc:	23 01       	movw	r4, r6
    20fe:	33 24       	eor	r3, r3
    2100:	33 94       	inc	r3
    2102:	0f e0       	ldi	r16, 0x0F	; 15
    2104:	80 2e       	mov	r8, r16
    2106:	91 2c       	mov	r9, r1
    2108:	02 c0       	rjmp	.+4      	; 0x210e <main+0x11ea>
    210a:	33 24       	eor	r3, r3
    210c:	33 94       	inc	r3
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    210e:	c4 01       	movw	r24, r8
    2110:	b3 01       	movw	r22, r6
    2112:	a2 01       	movw	r20, r4
    2114:	0e 94 50 04 	call	0x8a0	; 0x8a0 <secondB_trans>
    2118:	88 23       	and	r24, r24
    211a:	31 f0       	breq	.+12     	; 0x2128 <main+0x1204>
					state ++;
    211c:	08 94       	sec
    211e:	81 1c       	adc	r8, r1
    2120:	91 1c       	adc	r9, r1
    2122:	23 01       	movw	r4, r6
    2124:	33 24       	eor	r3, r3
    2126:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    2128:	c4 01       	movw	r24, r8
    212a:	b3 01       	movw	r22, r6
    212c:	a2 01       	movw	r20, r4
    212e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2130:	3f 85       	ldd	r19, Y+15	; 0x0f
    2132:	0e 94 05 05 	call	0xa0a	; 0xa0a <dry_trans>
    2136:	88 23       	and	r24, r24
    2138:	79 f0       	breq	.+30     	; 0x2158 <main+0x1234>
					state ++;
    213a:	08 94       	sec
    213c:	81 1c       	adc	r8, r1
    213e:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    2140:	2a e1       	ldi	r18, 0x1A	; 26
    2142:	82 16       	cp	r8, r18
    2144:	91 04       	cpc	r9, r1
    2146:	29 f4       	brne	.+10     	; 0x2152 <main+0x122e>
    2148:	7f 86       	std	Y+15, r7	; 0x0f
    214a:	6e 86       	std	Y+14, r6	; 0x0e
    214c:	33 24       	eor	r3, r3
    214e:	33 94       	inc	r3
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <main+0x124c>
    2152:	23 01       	movw	r4, r6
    2154:	33 24       	eor	r3, r3
    2156:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    2158:	33 e2       	ldi	r19, 0x23	; 35
    215a:	83 16       	cp	r8, r19
    215c:	91 04       	cpc	r9, r1
    215e:	41 f4       	brne	.+16     	; 0x2170 <main+0x124c>
    2160:	c3 01       	movw	r24, r6
    2162:	84 19       	sub	r24, r4
    2164:	95 09       	sbc	r25, r5
    2166:	0b 97       	sbiw	r24, 0x0b	; 11
    2168:	1c f0       	brlt	.+6      	; 0x2170 <main+0x124c>
    216a:	14 e2       	ldi	r17, 0x24	; 36
    216c:	81 2e       	mov	r8, r17
    216e:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    2170:	c4 01       	movw	r24, r8
    2172:	b3 01       	movw	r22, r6
    2174:	ae 01       	movw	r20, r28
    2176:	4e 5f       	subi	r20, 0xFE	; 254
    2178:	5f 4f       	sbci	r21, 0xFF	; 255
    217a:	9e 01       	movw	r18, r28
    217c:	2c 5f       	subi	r18, 0xFC	; 252
    217e:	3f 4f       	sbci	r19, 0xFF	; 255
    2180:	8e 01       	movw	r16, r28
    2182:	0a 5f       	subi	r16, 0xFA	; 250
    2184:	1f 4f       	sbci	r17, 0xFF	; 255
    2186:	b8 e0       	ldi	r27, 0x08	; 8
    2188:	eb 2e       	mov	r14, r27
    218a:	f1 2c       	mov	r15, r1
    218c:	ec 0e       	add	r14, r28
    218e:	fd 1e       	adc	r15, r29
    2190:	aa e0       	ldi	r26, 0x0A	; 10
    2192:	ca 2e       	mov	r12, r26
    2194:	d1 2c       	mov	r13, r1
    2196:	cc 0e       	add	r12, r28
    2198:	dd 1e       	adc	r13, r29
    219a:	5e 01       	movw	r10, r28
    219c:	08 94       	sec
    219e:	a1 1c       	adc	r10, r1
    21a0:	b1 1c       	adc	r11, r1
    21a2:	0e 94 d3 06 	call	0xda6	; 0xda6 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    21a6:	c4 01       	movw	r24, r8
    21a8:	b3 01       	movw	r22, r6
    21aa:	ae 01       	movw	r20, r28
    21ac:	4e 5f       	subi	r20, 0xFE	; 254
    21ae:	5f 4f       	sbci	r21, 0xFF	; 255
    21b0:	9e 01       	movw	r18, r28
    21b2:	2c 5f       	subi	r18, 0xFC	; 252
    21b4:	3f 4f       	sbci	r19, 0xFF	; 255
    21b6:	8e 01       	movw	r16, r28
    21b8:	0a 5f       	subi	r16, 0xFA	; 250
    21ba:	1f 4f       	sbci	r17, 0xFF	; 255
    21bc:	f8 e0       	ldi	r31, 0x08	; 8
    21be:	ef 2e       	mov	r14, r31
    21c0:	f1 2c       	mov	r15, r1
    21c2:	ec 0e       	add	r14, r28
    21c4:	fd 1e       	adc	r15, r29
    21c6:	ea e0       	ldi	r30, 0x0A	; 10
    21c8:	ce 2e       	mov	r12, r30
    21ca:	d1 2c       	mov	r13, r1
    21cc:	cc 0e       	add	r12, r28
    21ce:	dd 1e       	adc	r13, r29
    21d0:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    21d4:	6e e0       	ldi	r22, 0x0E	; 14
    21d6:	86 16       	cp	r8, r22
    21d8:	91 04       	cpc	r9, r1
    21da:	51 f4       	brne	.+20     	; 0x21f0 <main+0x12cc>
					brush1Motor = 0;
    21dc:	1f 82       	std	Y+7, r1	; 0x07
    21de:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    21e0:	1d 82       	std	Y+5, r1	; 0x05
    21e2:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    21e4:	80 91 2a 04 	lds	r24, 0x042A
    21e8:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    21ea:	80 62       	ori	r24, 0x20	; 32
    21ec:	80 93 2a 04 	sts	0x042A, r24
				}
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    21f0:	c4 01       	movw	r24, r8
    21f2:	b3 01       	movw	r22, r6
    21f4:	ae 01       	movw	r20, r28
    21f6:	4e 5f       	subi	r20, 0xFE	; 254
    21f8:	5f 4f       	sbci	r21, 0xFF	; 255
    21fa:	9e 01       	movw	r18, r28
    21fc:	2c 5f       	subi	r18, 0xFC	; 252
    21fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2200:	8e 01       	movw	r16, r28
    2202:	0a 5f       	subi	r16, 0xFA	; 250
    2204:	1f 4f       	sbci	r17, 0xFF	; 255
    2206:	b8 e0       	ldi	r27, 0x08	; 8
    2208:	eb 2e       	mov	r14, r27
    220a:	f1 2c       	mov	r15, r1
    220c:	ec 0e       	add	r14, r28
    220e:	fd 1e       	adc	r15, r29
    2210:	aa e0       	ldi	r26, 0x0A	; 10
    2212:	ca 2e       	mov	r12, r26
    2214:	d1 2c       	mov	r13, r1
    2216:	cc 0e       	add	r12, r28
    2218:	dd 1e       	adc	r13, r29
    221a:	0e 94 c8 01 	call	0x390	; 0x390 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    221e:	c4 01       	movw	r24, r8
    2220:	b3 01       	movw	r22, r6
    2222:	ae 01       	movw	r20, r28
    2224:	4e 5f       	subi	r20, 0xFE	; 254
    2226:	5f 4f       	sbci	r21, 0xFF	; 255
    2228:	9e 01       	movw	r18, r28
    222a:	2c 5f       	subi	r18, 0xFC	; 252
    222c:	3f 4f       	sbci	r19, 0xFF	; 255
    222e:	8e 01       	movw	r16, r28
    2230:	0a 5f       	subi	r16, 0xFA	; 250
    2232:	1f 4f       	sbci	r17, 0xFF	; 255
    2234:	f8 e0       	ldi	r31, 0x08	; 8
    2236:	ef 2e       	mov	r14, r31
    2238:	f1 2c       	mov	r15, r1
    223a:	ec 0e       	add	r14, r28
    223c:	fd 1e       	adc	r15, r29
    223e:	ea e0       	ldi	r30, 0x0A	; 10
    2240:	ce 2e       	mov	r12, r30
    2242:	d1 2c       	mov	r13, r1
    2244:	cc 0e       	add	r12, r28
    2246:	dd 1e       	adc	r13, r29
    2248:	0e 94 47 02 	call	0x48e	; 0x48e <dry_action>
				if(state == END){
    224c:	73 e2       	ldi	r23, 0x23	; 35
    224e:	87 16       	cp	r8, r23
    2250:	91 04       	cpc	r9, r1
    2252:	71 f4       	brne	.+28     	; 0x2270 <main+0x134c>
					plateLoadMotor = 0;
    2254:	1b 82       	std	Y+3, r1	; 0x03
    2256:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2258:	80 91 2b 04 	lds	r24, 0x042B
    225c:	8b 7f       	andi	r24, 0xFB	; 251
    225e:	80 93 2b 04 	sts	0x042B, r24
					if(print35 == 1){
    2262:	22 20       	and	r2, r2
    2264:	29 f0       	breq	.+10     	; 0x2270 <main+0x134c>
						//clear();
						serial_print_string("END OF CYCLE");
    2266:	87 e6       	ldi	r24, 0x67	; 103
    2268:	93 e0       	ldi	r25, 0x03	; 3
    226a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
    226e:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    2270:	2a 81       	ldd	r18, Y+2	; 0x02
    2272:	3b 81       	ldd	r19, Y+3	; 0x03
    2274:	0c 81       	ldd	r16, Y+4	; 0x04
    2276:	1d 81       	ldd	r17, Y+5	; 0x05
    2278:	ee 80       	ldd	r14, Y+6	; 0x06
    227a:	ff 80       	ldd	r15, Y+7	; 0x07
    227c:	c8 84       	ldd	r12, Y+8	; 0x08
    227e:	d9 84       	ldd	r13, Y+9	; 0x09
    2280:	aa 84       	ldd	r10, Y+10	; 0x0a
    2282:	bb 84       	ldd	r11, Y+11	; 0x0b
    2284:	c3 01       	movw	r24, r6
    2286:	b2 01       	movw	r22, r4
    2288:	4e 85       	ldd	r20, Y+14	; 0x0e
    228a:	5f 85       	ldd	r21, Y+15	; 0x0f
    228c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <motor_and_write>

				serial_check(); counter++;
    2290:	0e 94 bb 1c 	call	0x3976	; 0x3976 <serial_check>
				delay_ms(1);
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>

		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("BOTH B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    229c:	84 e2       	ldi	r24, 0x24	; 36
    229e:	88 16       	cp	r8, r24
    22a0:	91 04       	cpc	r9, r1
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <main+0x1382>
    22a4:	75 c1       	rjmp	.+746    	; 0x2590 <main+0x166c>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    22a6:	08 94       	sec
    22a8:	61 1c       	adc	r6, r1
    22aa:	71 1c       	adc	r7, r1
    22ac:	c4 ce       	rjmp	.-632    	; 0x2036 <main+0x1112>
				delay_ms(1);
   		 	}
		}

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    22b4:	88 23       	and	r24, r24
    22b6:	09 f4       	brne	.+2      	; 0x22ba <main+0x1396>
    22b8:	6b c1       	rjmp	.+726    	; 0x2590 <main+0x166c>
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    22c0:	88 23       	and	r24, r24
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <main+0x13a2>
    22c4:	65 c1       	rjmp	.+714    	; 0x2590 <main+0x166c>
			lcd_goto_xy(7,0);
    22c6:	87 e0       	ldi	r24, 0x07	; 7
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
			serial_print_string("DEBUG");
    22ce:	8c e6       	ldi	r24, 0x6C	; 108
    22d0:	91 e0       	ldi	r25, 0x01	; 1
    22d2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9d 83       	std	Y+5, r25	; 0x05
    22dc:	8c 83       	std	Y+4, r24	; 0x04
    22de:	80 91 2b 04 	lds	r24, 0x042B
    22e2:	80 62       	ori	r24, 0x20	; 32
    22e4:	80 93 2b 04 	sts	0x042B, r24
    22e8:	33 24       	eor	r3, r3
    22ea:	33 94       	inc	r3
    22ec:	88 24       	eor	r8, r8
    22ee:	99 24       	eor	r9, r9
    22f0:	66 24       	eor	r6, r6
    22f2:	77 24       	eor	r7, r7
    22f4:	1a 8e       	std	Y+26, r1	; 0x1a
    22f6:	19 8e       	std	Y+25, r1	; 0x19
    22f8:	44 24       	eor	r4, r4
    22fa:	55 24       	eor	r5, r5
    22fc:	22 24       	eor	r2, r2
    22fe:	23 94       	inc	r2
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    2300:	84 e4       	ldi	r24, 0x44	; 68
    2302:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    230c:	85 e4       	ldi	r24, 0x45	; 69
    230e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    2312:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    2316:	80 93 26 04 	sts	0x0426, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    231a:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    231e:	80 93 29 04 	sts	0x0429, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    2322:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    2326:	81 14       	cp	r8, r1
    2328:	91 04       	cpc	r9, r1
    232a:	b1 f0       	breq	.+44     	; 0x2358 <main+0x1434>
    232c:	33 20       	and	r3, r3
    232e:	a1 f0       	breq	.+40     	; 0x2358 <main+0x1434>
					lcd_goto_xy(6,1);
    2330:	86 e0       	ldi	r24, 0x06	; 6
    2332:	61 e0       	ldi	r22, 0x01	; 1
    2334:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
					serial_print_string("     ");
    2338:	8a e5       	ldi	r24, 0x5A	; 90
    233a:	93 e0       	ldi	r25, 0x03	; 3
    233c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
					lcd_goto_xy(0,1);
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	61 e0       	ldi	r22, 0x01	; 1
    2344:	0e 94 bc 14 	call	0x2978	; 0x2978 <lcd_goto_xy>
					serial_print_string("STATE ");
    2348:	80 e6       	ldi	r24, 0x60	; 96
    234a:	93 e0       	ldi	r25, 0x03	; 3
    234c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
					serial_print_int(state);
    2350:	c4 01       	movw	r24, r8
    2352:	0e 94 74 07 	call	0xee8	; 0xee8 <serial_print_int>
    2356:	33 24       	eor	r3, r3
					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    2358:	c3 01       	movw	r24, r6
    235a:	be 01       	movw	r22, r28
    235c:	64 5f       	subi	r22, 0xF4	; 244
    235e:	7f 4f       	sbci	r23, 0xFF	; 255
    2360:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    2364:	18 2f       	mov	r17, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    2366:	c4 01       	movw	r24, r8
    2368:	61 2f       	mov	r22, r17
    236a:	a3 01       	movw	r20, r6
    236c:	92 01       	movw	r18, r4
    236e:	0e 94 55 03 	call	0x6aa	; 0x6aa <init_trans>
    2372:	88 23       	and	r24, r24
    2374:	39 f0       	breq	.+14     	; 0x2384 <main+0x1460>
    2376:	23 01       	movw	r4, r6
    2378:	10 e0       	ldi	r17, 0x00	; 0
    237a:	33 24       	eor	r3, r3
    237c:	33 94       	inc	r3
    237e:	35 e2       	ldi	r19, 0x25	; 37
    2380:	83 2e       	mov	r8, r19
    2382:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    2384:	c4 01       	movw	r24, r8
    2386:	b3 01       	movw	r22, r6
    2388:	a2 01       	movw	r20, r4
    238a:	0e 94 aa 03 	call	0x754	; 0x754 <firstB_trans>
    238e:	88 23       	and	r24, r24
    2390:	71 f4       	brne	.+28     	; 0x23ae <main+0x148a>
					state = WAIT;
					if(state != B1STOP1 && state != CLEAN1_3)
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    2392:	9e e0       	ldi	r25, 0x0E	; 14
    2394:	89 16       	cp	r8, r25
    2396:	91 04       	cpc	r9, r1
    2398:	81 f4       	brne	.+32     	; 0x23ba <main+0x1496>
    239a:	93 01       	movw	r18, r6
    239c:	24 19       	sub	r18, r4
    239e:	35 09       	sbc	r19, r5
    23a0:	80 91 90 03 	lds	r24, 0x0390
    23a4:	90 91 91 03 	lds	r25, 0x0391
    23a8:	82 17       	cp	r24, r18
    23aa:	93 07       	cpc	r25, r19
    23ac:	34 f4       	brge	.+12     	; 0x23ba <main+0x1496>
    23ae:	23 01       	movw	r4, r6
    23b0:	33 24       	eor	r3, r3
    23b2:	33 94       	inc	r3
    23b4:	25 e2       	ldi	r18, 0x25	; 37
    23b6:	82 2e       	mov	r8, r18
    23b8:	91 2c       	mov	r9, r1
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    23ba:	c4 01       	movw	r24, r8
    23bc:	b3 01       	movw	r22, r6
    23be:	a2 01       	movw	r20, r4
    23c0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <secondB_trans>
    23c4:	88 23       	and	r24, r24
    23c6:	31 f0       	breq	.+12     	; 0x23d4 <main+0x14b0>
    23c8:	23 01       	movw	r4, r6
    23ca:	33 24       	eor	r3, r3
    23cc:	33 94       	inc	r3
    23ce:	95 e2       	ldi	r25, 0x25	; 37
    23d0:	89 2e       	mov	r8, r25
    23d2:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}
				
				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    23d4:	c4 01       	movw	r24, r8
    23d6:	b3 01       	movw	r22, r6
    23d8:	a2 01       	movw	r20, r4
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	0e 94 05 05 	call	0xa0a	; 0xa0a <dry_trans>
    23e2:	88 23       	and	r24, r24
    23e4:	21 f0       	breq	.+8      	; 0x23ee <main+0x14ca>
    23e6:	23 01       	movw	r4, r6
    23e8:	33 24       	eor	r3, r3
    23ea:	33 94       	inc	r3
    23ec:	11 c0       	rjmp	.+34     	; 0x2410 <main+0x14ec>
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    23ee:	23 e2       	ldi	r18, 0x23	; 35
    23f0:	82 16       	cp	r8, r18
    23f2:	91 04       	cpc	r9, r1
    23f4:	49 f4       	brne	.+18     	; 0x2408 <main+0x14e4>
    23f6:	c3 01       	movw	r24, r6
    23f8:	84 19       	sub	r24, r4
    23fa:	95 09       	sbc	r25, r5
    23fc:	0b 97       	sbiw	r24, 0x0b	; 11
    23fe:	54 f1       	brlt	.+84     	; 0x2454 <main+0x1530>
    2400:	84 e2       	ldi	r24, 0x24	; 36
    2402:	88 2e       	mov	r8, r24
    2404:	91 2c       	mov	r9, r1
    2406:	26 c0       	rjmp	.+76     	; 0x2454 <main+0x1530>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    2408:	35 e2       	ldi	r19, 0x25	; 37
    240a:	83 16       	cp	r8, r19
    240c:	91 04       	cpc	r9, r1
    240e:	11 f5       	brne	.+68     	; 0x2454 <main+0x1530>
    2410:	11 23       	and	r17, r17
    2412:	21 f4       	brne	.+8      	; 0x241c <main+0x14f8>
    2414:	05 e2       	ldi	r16, 0x25	; 37
    2416:	80 2e       	mov	r8, r16
    2418:	91 2c       	mov	r9, r1
    241a:	12 c0       	rjmp	.+36     	; 0x2440 <main+0x151c>
					state = ++last;
    241c:	69 8d       	ldd	r22, Y+25	; 0x19
    241e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2420:	6f 5f       	subi	r22, 0xFF	; 255
    2422:	7f 4f       	sbci	r23, 0xFF	; 255
    2424:	7a 8f       	std	Y+26, r23	; 0x1a
    2426:	69 8f       	std	Y+25, r22	; 0x19
				}


				//state actions
						
				if(state == WAIT){
    2428:	65 32       	cpi	r22, 0x25	; 37
    242a:	71 05       	cpc	r23, r1
    242c:	21 f0       	breq	.+8      	; 0x2436 <main+0x1512>
    242e:	4b 01       	movw	r8, r22
    2430:	33 24       	eor	r3, r3
    2432:	33 94       	inc	r3
    2434:	0f c0       	rjmp	.+30     	; 0x2454 <main+0x1530>
    2436:	15 e2       	ldi	r17, 0x25	; 37
    2438:	81 2e       	mov	r8, r17
    243a:	91 2c       	mov	r9, r1
    243c:	33 24       	eor	r3, r3
    243e:	33 94       	inc	r3
					plateLoadMotor = 0;
    2440:	1b 82       	std	Y+3, r1	; 0x03
    2442:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    2444:	1d 82       	std	Y+5, r1	; 0x05
    2446:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    2448:	1f 82       	std	Y+7, r1	; 0x07
    244a:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    244c:	19 86       	std	Y+9, r1	; 0x09
    244e:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    2450:	1b 86       	std	Y+11, r1	; 0x0b
    2452:	1a 86       	std	Y+10, r1	; 0x0a
				}
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    2454:	c4 01       	movw	r24, r8
    2456:	b3 01       	movw	r22, r6
    2458:	ae 01       	movw	r20, r28
    245a:	4e 5f       	subi	r20, 0xFE	; 254
    245c:	5f 4f       	sbci	r21, 0xFF	; 255
    245e:	9e 01       	movw	r18, r28
    2460:	2c 5f       	subi	r18, 0xFC	; 252
    2462:	3f 4f       	sbci	r19, 0xFF	; 255
    2464:	8e 01       	movw	r16, r28
    2466:	0a 5f       	subi	r16, 0xFA	; 250
    2468:	1f 4f       	sbci	r17, 0xFF	; 255
    246a:	b8 e0       	ldi	r27, 0x08	; 8
    246c:	eb 2e       	mov	r14, r27
    246e:	f1 2c       	mov	r15, r1
    2470:	ec 0e       	add	r14, r28
    2472:	fd 1e       	adc	r15, r29
    2474:	aa e0       	ldi	r26, 0x0A	; 10
    2476:	ca 2e       	mov	r12, r26
    2478:	d1 2c       	mov	r13, r1
    247a:	cc 0e       	add	r12, r28
    247c:	dd 1e       	adc	r13, r29
    247e:	5e 01       	movw	r10, r28
    2480:	08 94       	sec
    2482:	a1 1c       	adc	r10, r1
    2484:	b1 1c       	adc	r11, r1
    2486:	0e 94 d3 06 	call	0xda6	; 0xda6 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    248a:	c4 01       	movw	r24, r8
    248c:	b3 01       	movw	r22, r6
    248e:	ae 01       	movw	r20, r28
    2490:	4e 5f       	subi	r20, 0xFE	; 254
    2492:	5f 4f       	sbci	r21, 0xFF	; 255
    2494:	9e 01       	movw	r18, r28
    2496:	2c 5f       	subi	r18, 0xFC	; 252
    2498:	3f 4f       	sbci	r19, 0xFF	; 255
    249a:	8e 01       	movw	r16, r28
    249c:	0a 5f       	subi	r16, 0xFA	; 250
    249e:	1f 4f       	sbci	r17, 0xFF	; 255
    24a0:	f8 e0       	ldi	r31, 0x08	; 8
    24a2:	ef 2e       	mov	r14, r31
    24a4:	f1 2c       	mov	r15, r1
    24a6:	ec 0e       	add	r14, r28
    24a8:	fd 1e       	adc	r15, r29
    24aa:	ea e0       	ldi	r30, 0x0A	; 10
    24ac:	ce 2e       	mov	r12, r30
    24ae:	d1 2c       	mov	r13, r1
    24b0:	cc 0e       	add	r12, r28
    24b2:	dd 1e       	adc	r13, r29
    24b4:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    24b8:	7e e0       	ldi	r23, 0x0E	; 14
    24ba:	87 16       	cp	r8, r23
    24bc:	91 04       	cpc	r9, r1
    24be:	51 f4       	brne	.+20     	; 0x24d4 <main+0x15b0>
					brush1Motor = 0;
    24c0:	1f 82       	std	Y+7, r1	; 0x07
    24c2:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    24c4:	1d 82       	std	Y+5, r1	; 0x05
    24c6:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    24c8:	80 91 2a 04 	lds	r24, 0x042A
    24cc:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    24ce:	80 62       	ori	r24, 0x20	; 32
    24d0:	80 93 2a 04 	sts	0x042A, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    24d4:	c4 01       	movw	r24, r8
    24d6:	b3 01       	movw	r22, r6
    24d8:	ae 01       	movw	r20, r28
    24da:	4e 5f       	subi	r20, 0xFE	; 254
    24dc:	5f 4f       	sbci	r21, 0xFF	; 255
    24de:	9e 01       	movw	r18, r28
    24e0:	2c 5f       	subi	r18, 0xFC	; 252
    24e2:	3f 4f       	sbci	r19, 0xFF	; 255
    24e4:	8e 01       	movw	r16, r28
    24e6:	0a 5f       	subi	r16, 0xFA	; 250
    24e8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ea:	b8 e0       	ldi	r27, 0x08	; 8
    24ec:	eb 2e       	mov	r14, r27
    24ee:	f1 2c       	mov	r15, r1
    24f0:	ec 0e       	add	r14, r28
    24f2:	fd 1e       	adc	r15, r29
    24f4:	aa e0       	ldi	r26, 0x0A	; 10
    24f6:	ca 2e       	mov	r12, r26
    24f8:	d1 2c       	mov	r13, r1
    24fa:	cc 0e       	add	r12, r28
    24fc:	dd 1e       	adc	r13, r29
    24fe:	0e 94 c8 01 	call	0x390	; 0x390 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2502:	c4 01       	movw	r24, r8
    2504:	b3 01       	movw	r22, r6
    2506:	ae 01       	movw	r20, r28
    2508:	4e 5f       	subi	r20, 0xFE	; 254
    250a:	5f 4f       	sbci	r21, 0xFF	; 255
    250c:	9e 01       	movw	r18, r28
    250e:	2c 5f       	subi	r18, 0xFC	; 252
    2510:	3f 4f       	sbci	r19, 0xFF	; 255
    2512:	8e 01       	movw	r16, r28
    2514:	0a 5f       	subi	r16, 0xFA	; 250
    2516:	1f 4f       	sbci	r17, 0xFF	; 255
    2518:	f8 e0       	ldi	r31, 0x08	; 8
    251a:	ef 2e       	mov	r14, r31
    251c:	f1 2c       	mov	r15, r1
    251e:	ec 0e       	add	r14, r28
    2520:	fd 1e       	adc	r15, r29
    2522:	ea e0       	ldi	r30, 0x0A	; 10
    2524:	ce 2e       	mov	r12, r30
    2526:	d1 2c       	mov	r13, r1
    2528:	cc 0e       	add	r12, r28
    252a:	dd 1e       	adc	r13, r29
    252c:	0e 94 47 02 	call	0x48e	; 0x48e <dry_action>
				if(state == END){
    2530:	83 e2       	ldi	r24, 0x23	; 35
    2532:	88 16       	cp	r8, r24
    2534:	91 04       	cpc	r9, r1
    2536:	71 f4       	brne	.+28     	; 0x2554 <main+0x1630>
					plateLoadMotor = 0;
    2538:	1b 82       	std	Y+3, r1	; 0x03
    253a:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    253c:	80 91 2b 04 	lds	r24, 0x042B
    2540:	8b 7f       	andi	r24, 0xFB	; 251
    2542:	80 93 2b 04 	sts	0x042B, r24
					if(print35 == 1){
    2546:	22 20       	and	r2, r2
    2548:	29 f0       	breq	.+10     	; 0x2554 <main+0x1630>
						//clear();
						serial_print_string("END OF CYCLE");
    254a:	87 e6       	ldi	r24, 0x67	; 103
    254c:	93 e0       	ldi	r25, 0x03	; 3
    254e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
    2552:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    2554:	2a 81       	ldd	r18, Y+2	; 0x02
    2556:	3b 81       	ldd	r19, Y+3	; 0x03
    2558:	0c 81       	ldd	r16, Y+4	; 0x04
    255a:	1d 81       	ldd	r17, Y+5	; 0x05
    255c:	ee 80       	ldd	r14, Y+6	; 0x06
    255e:	ff 80       	ldd	r15, Y+7	; 0x07
    2560:	c8 84       	ldd	r12, Y+8	; 0x08
    2562:	d9 84       	ldd	r13, Y+9	; 0x09
    2564:	aa 84       	ldd	r10, Y+10	; 0x0a
    2566:	bb 84       	ldd	r11, Y+11	; 0x0b
    2568:	c3 01       	movw	r24, r6
    256a:	b2 01       	movw	r22, r4
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	50 e0       	ldi	r21, 0x00	; 0
    2570:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <motor_and_write>

				serial_check(); counter++;
    2574:	0e 94 bb 1c 	call	0x3976	; 0x3976 <serial_check>
				delay_ms(1);
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    2580:	94 e2       	ldi	r25, 0x24	; 36
    2582:	89 16       	cp	r8, r25
    2584:	91 04       	cpc	r9, r1
    2586:	21 f0       	breq	.+8      	; 0x2590 <main+0x166c>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    2588:	08 94       	sec
    258a:	61 1c       	adc	r6, r1
    258c:	71 1c       	adc	r7, r1
    258e:	b8 ce       	rjmp	.-656    	; 0x2300 <main+0x13dc>
				delay_ms(1);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2590:	80 91 2b 04 	lds	r24, 0x042B
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2594:	8b 7d       	andi	r24, 0xDB	; 219
    2596:	80 93 2b 04 	sts	0x042B, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    259a:	80 91 27 04 	lds	r24, 0x0427
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    259e:	86 7b       	andi	r24, 0xB6	; 182
    25a0:	80 93 27 04 	sts	0x0427, r24
		
		i2c_start(I2C1+I2C_WRITE);
    25a4:	80 e4       	ldi	r24, 0x40	; 64
    25a6:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    25aa:	82 e0       	ldi	r24, 0x02	; 2
    25ac:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    25b0:	80 91 2b 04 	lds	r24, 0x042B
    25b4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    25b8:	80 91 27 04 	lds	r24, 0x0427
    25bc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    25c0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	}
	serial_print_string("END");
    25c4:	8c e8       	ldi	r24, 0x8C	; 140
    25c6:	93 e0       	ldi	r25, 0x03	; 3
    25c8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <serial_print_string>
    25cc:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <main+0x3e>
	}
    25d0:	2f ef       	ldi	r18, 0xFF	; 255
    25d2:	3f ef       	ldi	r19, 0xFF	; 255
    25d4:	38 8f       	std	Y+24, r19	; 0x18
    25d6:	2f 8b       	std	Y+23, r18	; 0x17
    25d8:	12 01       	movw	r2, r4
    25da:	99 24       	eor	r9, r9
    25dc:	93 94       	inc	r9
    25de:	8c e2       	ldi	r24, 0x2C	; 44
    25e0:	68 2e       	mov	r6, r24
    25e2:	71 2c       	mov	r7, r1
    25e4:	02 ca       	rjmp	.-3068   	; 0x19ea <main+0xac6>

000025e6 <_ZN12OrangutanLCDC2Ev>:
    25e6:	08 95       	ret

000025e8 <_ZN12OrangutanLCDC1Ev>:
    25e8:	08 95       	ret

000025ea <void_getchar>:
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	08 95       	ret

000025f0 <_ZN12OrangutanLCD8busyWaitEv>:
    25f0:	ef 92       	push	r14
    25f2:	ff 92       	push	r15
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	67 b1       	in	r22, 0x07	; 7
    25fa:	3d 98       	cbi	0x07, 5	; 7
    25fc:	28 98       	cbi	0x05, 0	; 5
    25fe:	29 9a       	sbi	0x05, 1	; 5
    2600:	e0 90 f6 03 	lds	r14, 0x03F6
    2604:	f0 90 f7 03 	lds	r15, 0x03F7
    2608:	00 91 f8 03 	lds	r16, 0x03F8
    260c:	10 91 f9 03 	lds	r17, 0x03F9
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	41 e0       	ldi	r20, 0x01	; 1
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	ca 01       	movw	r24, r20
    261a:	6f 93       	push	r22
    261c:	64 e0       	ldi	r22, 0x04	; 4
    261e:	6a 95       	dec	r22
    2620:	f1 f7       	brne	.-4      	; 0x261e <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    2622:	6f 91       	pop	r22
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	c9 f7       	brne	.-14     	; 0x261a <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    2628:	2a 9a       	sbi	0x05, 2	; 5
    262a:	ca 01       	movw	r24, r20
    262c:	6f 93       	push	r22
    262e:	64 e0       	ldi	r22, 0x04	; 4
    2630:	6a 95       	dec	r22
    2632:	f1 f7       	brne	.-4      	; 0x2630 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    2634:	6f 91       	pop	r22
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	c9 f7       	brne	.-14     	; 0x262c <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    263a:	86 b1       	in	r24, 0x06	; 6
    263c:	2a 98       	cbi	0x05, 2	; 5
    263e:	fa 01       	movw	r30, r20
    2640:	6f 93       	push	r22
    2642:	64 e0       	ldi	r22, 0x04	; 4
    2644:	6a 95       	dec	r22
    2646:	f1 f7       	brne	.-4      	; 0x2644 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    2648:	6f 91       	pop	r22
    264a:	31 97       	sbiw	r30, 0x01	; 1
    264c:	c9 f7       	brne	.-14     	; 0x2640 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    264e:	2a 9a       	sbi	0x05, 2	; 5
    2650:	fa 01       	movw	r30, r20
    2652:	6f 93       	push	r22
    2654:	64 e0       	ldi	r22, 0x04	; 4
    2656:	6a 95       	dec	r22
    2658:	f1 f7       	brne	.-4      	; 0x2656 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    265a:	6f 91       	pop	r22
    265c:	31 97       	sbiw	r30, 0x01	; 1
    265e:	c9 f7       	brne	.-14     	; 0x2652 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    2660:	2a 98       	cbi	0x05, 2	; 5
    2662:	2c 5f       	subi	r18, 0xFC	; 252
    2664:	3f 4f       	sbci	r19, 0xFF	; 255
    2666:	85 ff       	sbrs	r24, 5
    2668:	09 c0       	rjmp	.+18     	; 0x267c <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    266a:	c9 01       	movw	r24, r18
    266c:	a0 e0       	ldi	r26, 0x00	; 0
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	8e 15       	cp	r24, r14
    2672:	9f 05       	cpc	r25, r15
    2674:	a0 07       	cpc	r26, r16
    2676:	b1 07       	cpc	r27, r17
    2678:	08 f4       	brcc	.+2      	; 0x267c <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    267a:	ce cf       	rjmp	.-100    	; 0x2618 <_ZN12OrangutanLCD8busyWaitEv+0x28>
    267c:	c9 01       	movw	r24, r18
    267e:	a0 e0       	ldi	r26, 0x00	; 0
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	8e 15       	cp	r24, r14
    2684:	9f 05       	cpc	r25, r15
    2686:	a0 07       	cpc	r26, r16
    2688:	b1 07       	cpc	r27, r17
    268a:	28 f0       	brcs	.+10     	; 0x2696 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    268c:	82 e3       	ldi	r24, 0x32	; 50
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a0 e0       	ldi	r26, 0x00	; 0
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	04 c0       	rjmp	.+8      	; 0x269e <_ZN12OrangutanLCD8busyWaitEv+0xae>
    2696:	80 e3       	ldi	r24, 0x30	; 48
    2698:	95 e7       	ldi	r25, 0x75	; 117
    269a:	a0 e0       	ldi	r26, 0x00	; 0
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	80 93 f6 03 	sts	0x03F6, r24
    26a2:	90 93 f7 03 	sts	0x03F7, r25
    26a6:	a0 93 f8 03 	sts	0x03F8, r26
    26aa:	b0 93 f9 03 	sts	0x03F9, r27
    26ae:	67 b9       	out	0x07, r22	; 7
    26b0:	1f 91       	pop	r17
    26b2:	0f 91       	pop	r16
    26b4:	ff 90       	pop	r15
    26b6:	ef 90       	pop	r14
    26b8:	08 95       	ret

000026ba <_ZN12OrangutanLCD8sendDataEh>:
    26ba:	28 b1       	in	r18, 0x08	; 8
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	8f 70       	andi	r24, 0x0F	; 15
    26c0:	90 70       	andi	r25, 0x00	; 0
    26c2:	88 0f       	add	r24, r24
    26c4:	99 1f       	adc	r25, r25
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	23 7c       	andi	r18, 0xC3	; 195
    26cc:	28 2b       	or	r18, r24
    26ce:	28 b9       	out	0x08, r18	; 8
    26d0:	2a 9a       	sbi	0x05, 2	; 5
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	fc 01       	movw	r30, r24
    26d8:	6f 93       	push	r22
    26da:	64 e0       	ldi	r22, 0x04	; 4
    26dc:	6a 95       	dec	r22
    26de:	f1 f7       	brne	.-4      	; 0x26dc <_ZN12OrangutanLCD8sendDataEh+0x22>
    26e0:	6f 91       	pop	r22
    26e2:	31 97       	sbiw	r30, 0x01	; 1
    26e4:	c9 f7       	brne	.-14     	; 0x26d8 <_ZN12OrangutanLCD8sendDataEh+0x1e>
    26e6:	2a 98       	cbi	0x05, 2	; 5
    26e8:	6f 93       	push	r22
    26ea:	64 e0       	ldi	r22, 0x04	; 4
    26ec:	6a 95       	dec	r22
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <_ZN12OrangutanLCD8sendDataEh+0x32>
    26f0:	6f 91       	pop	r22
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	c9 f7       	brne	.-14     	; 0x26e8 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    26f6:	08 95       	ret

000026f8 <_ZN12OrangutanLCD10initPrintfEv>:
    26f8:	80 91 f2 03 	lds	r24, 0x03F2
    26fc:	90 91 f3 03 	lds	r25, 0x03F3
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	11 f0       	breq	.+4      	; 0x2708 <_ZN12OrangutanLCD10initPrintfEv+0x10>
    2704:	0e 94 af 20 	call	0x415e	; 0x415e <free>
    2708:	80 91 c0 03 	lds	r24, 0x03C0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	20 91 c1 03 	lds	r18, 0x03C1
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	ac 01       	movw	r20, r24
    2718:	42 9f       	mul	r20, r18
    271a:	c0 01       	movw	r24, r0
    271c:	43 9f       	mul	r20, r19
    271e:	90 0d       	add	r25, r0
    2720:	52 9f       	mul	r21, r18
    2722:	90 0d       	add	r25, r0
    2724:	11 24       	eor	r1, r1
    2726:	0e 94 02 20 	call	0x4004	; 0x4004 <malloc>
    272a:	90 93 f3 03 	sts	0x03F3, r25
    272e:	80 93 f2 03 	sts	0x03F2, r24
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	29 f1       	breq	.+74     	; 0x2780 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    2736:	60 e0       	ldi	r22, 0x00	; 0
    2738:	70 e2       	ldi	r23, 0x20	; 32
    273a:	08 c0       	rjmp	.+16     	; 0x274c <_ZN12OrangutanLCD10initPrintfEv+0x54>
    273c:	e0 91 f2 03 	lds	r30, 0x03F2
    2740:	f0 91 f3 03 	lds	r31, 0x03F3
    2744:	e4 0f       	add	r30, r20
    2746:	f5 1f       	adc	r31, r21
    2748:	70 83       	st	Z, r23
    274a:	6f 5f       	subi	r22, 0xFF	; 255
    274c:	46 2f       	mov	r20, r22
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	80 91 c0 03 	lds	r24, 0x03C0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	20 91 c1 03 	lds	r18, 0x03C1
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	fc 01       	movw	r30, r24
    2760:	e2 9f       	mul	r30, r18
    2762:	c0 01       	movw	r24, r0
    2764:	e3 9f       	mul	r30, r19
    2766:	90 0d       	add	r25, r0
    2768:	f2 9f       	mul	r31, r18
    276a:	90 0d       	add	r25, r0
    276c:	11 24       	eor	r1, r1
    276e:	48 17       	cp	r20, r24
    2770:	59 07       	cpc	r21, r25
    2772:	24 f3       	brlt	.-56     	; 0x273c <_ZN12OrangutanLCD10initPrintfEv+0x44>
    2774:	84 ee       	ldi	r24, 0xE4	; 228
    2776:	95 e1       	ldi	r25, 0x15	; 21
    2778:	65 ef       	ldi	r22, 0xF5	; 245
    277a:	72 e1       	ldi	r23, 0x12	; 18
    277c:	0e 94 28 21 	call	0x4250	; 0x4250 <fdevopen>
    2780:	08 95       	ret

00002782 <_ZN12OrangutanLCD10initPrintfEhh>:
    2782:	80 93 c1 03 	sts	0x03C1, r24
    2786:	60 93 c0 03 	sts	0x03C0, r22
    278a:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <_ZN12OrangutanLCD10initPrintfEv>
    278e:	08 95       	ret

00002790 <lcd_init_printf_with_dimensions>:
    2790:	80 93 c1 03 	sts	0x03C1, r24
    2794:	60 93 c0 03 	sts	0x03C0, r22
    2798:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <_ZN12OrangutanLCD10initPrintfEv>
    279c:	08 95       	ret

0000279e <lcd_init_printf>:
    279e:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <_ZN12OrangutanLCD10initPrintfEv>
    27a2:	08 95       	ret

000027a4 <_ZN12OrangutanLCD5init2Ev>:
    27a4:	3d 98       	cbi	0x07, 5	; 7
    27a6:	45 9a       	sbi	0x08, 5	; 8
    27a8:	80 e3       	ldi	r24, 0x30	; 48
    27aa:	95 e7       	ldi	r25, 0x75	; 117
    27ac:	a0 e0       	ldi	r26, 0x00	; 0
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	80 93 f6 03 	sts	0x03F6, r24
    27b4:	90 93 f7 03 	sts	0x03F7, r25
    27b8:	a0 93 f8 03 	sts	0x03F8, r26
    27bc:	b0 93 f9 03 	sts	0x03F9, r27
    27c0:	20 9a       	sbi	0x04, 0	; 4
    27c2:	21 9a       	sbi	0x04, 1	; 4
    27c4:	22 9a       	sbi	0x04, 2	; 4
    27c6:	8e e1       	ldi	r24, 0x1E	; 30
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>
    27ce:	83 e0       	ldi	r24, 0x03	; 3
    27d0:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    27d4:	86 e0       	ldi	r24, 0x06	; 6
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>
    27dc:	83 e0       	ldi	r24, 0x03	; 3
    27de:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    27e2:	82 e0       	ldi	r24, 0x02	; 2
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>
    27ea:	83 e0       	ldi	r24, 0x03	; 3
    27ec:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    27f0:	82 e0       	ldi	r24, 0x02	; 2
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>
    27f8:	82 e0       	ldi	r24, 0x02	; 2
    27fa:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    27fe:	82 e0       	ldi	r24, 0x02	; 2
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>
    2806:	88 e2       	ldi	r24, 0x28	; 40
    2808:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_ZN12OrangutanLCD8send_cmdEh>
    280c:	88 e0       	ldi	r24, 0x08	; 8
    280e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_ZN12OrangutanLCD8send_cmdEh>
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_ZN12OrangutanLCD8send_cmdEh>
    2818:	86 e0       	ldi	r24, 0x06	; 6
    281a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_ZN12OrangutanLCD8send_cmdEh>
    281e:	8c e0       	ldi	r24, 0x0C	; 12
    2820:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_ZN12OrangutanLCD8send_cmdEh>
    2824:	08 95       	ret

00002826 <_ZN12OrangutanLCD4initEv>:
    2826:	80 91 fa 03 	lds	r24, 0x03FA
    282a:	88 23       	and	r24, r24
    282c:	29 f4       	brne	.+10     	; 0x2838 <_ZN12OrangutanLCD4initEv+0x12>
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	80 93 fa 03 	sts	0x03FA, r24
    2834:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <_ZN12OrangutanLCD5init2Ev>
    2838:	08 95       	ret

0000283a <_ZN12OrangutanLCD4sendEhhh>:
    283a:	ff 92       	push	r15
    283c:	0f 93       	push	r16
    283e:	1f 93       	push	r17
    2840:	08 2f       	mov	r16, r24
    2842:	16 2f       	mov	r17, r22
    2844:	f4 2e       	mov	r15, r20
    2846:	0e 94 13 14 	call	0x2826	; 0x2826 <_ZN12OrangutanLCD4initEv>
    284a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN12OrangutanLCD8busyWaitEv>
    284e:	37 b1       	in	r19, 0x07	; 7
    2850:	28 b1       	in	r18, 0x08	; 8
    2852:	29 98       	cbi	0x05, 1	; 5
    2854:	11 23       	and	r17, r17
    2856:	11 f0       	breq	.+4      	; 0x285c <_ZN12OrangutanLCD4sendEhhh+0x22>
    2858:	28 9a       	sbi	0x05, 0	; 5
    285a:	01 c0       	rjmp	.+2      	; 0x285e <_ZN12OrangutanLCD4sendEhhh+0x24>
    285c:	28 98       	cbi	0x05, 0	; 5
    285e:	87 b1       	in	r24, 0x07	; 7
    2860:	8c 63       	ori	r24, 0x3C	; 60
    2862:	87 b9       	out	0x07, r24	; 7
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	f8 16       	cp	r15, r24
    2868:	e1 f0       	breq	.+56     	; 0x28a2 <_ZN12OrangutanLCD4sendEhhh+0x68>
    286a:	88 b1       	in	r24, 0x08	; 8
    286c:	90 2f       	mov	r25, r16
    286e:	92 95       	swap	r25
    2870:	9f 70       	andi	r25, 0x0F	; 15
    2872:	99 0f       	add	r25, r25
    2874:	99 0f       	add	r25, r25
    2876:	83 7c       	andi	r24, 0xC3	; 195
    2878:	98 2b       	or	r25, r24
    287a:	98 b9       	out	0x08, r25	; 8
    287c:	2a 9a       	sbi	0x05, 2	; 5
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	fc 01       	movw	r30, r24
    2884:	6f 93       	push	r22
    2886:	64 e0       	ldi	r22, 0x04	; 4
    2888:	6a 95       	dec	r22
    288a:	f1 f7       	brne	.-4      	; 0x2888 <_ZN12OrangutanLCD4sendEhhh+0x4e>
    288c:	6f 91       	pop	r22
    288e:	31 97       	sbiw	r30, 0x01	; 1
    2890:	c9 f7       	brne	.-14     	; 0x2884 <_ZN12OrangutanLCD4sendEhhh+0x4a>
    2892:	2a 98       	cbi	0x05, 2	; 5
    2894:	6f 93       	push	r22
    2896:	64 e0       	ldi	r22, 0x04	; 4
    2898:	6a 95       	dec	r22
    289a:	f1 f7       	brne	.-4      	; 0x2898 <_ZN12OrangutanLCD4sendEhhh+0x5e>
    289c:	6f 91       	pop	r22
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	c9 f7       	brne	.-14     	; 0x2894 <_ZN12OrangutanLCD4sendEhhh+0x5a>
    28a2:	88 b1       	in	r24, 0x08	; 8
    28a4:	0f 70       	andi	r16, 0x0F	; 15
    28a6:	00 0f       	add	r16, r16
    28a8:	00 0f       	add	r16, r16
    28aa:	83 7c       	andi	r24, 0xC3	; 195
    28ac:	80 2b       	or	r24, r16
    28ae:	88 b9       	out	0x08, r24	; 8
    28b0:	2a 9a       	sbi	0x05, 2	; 5
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	fc 01       	movw	r30, r24
    28b8:	6f 93       	push	r22
    28ba:	64 e0       	ldi	r22, 0x04	; 4
    28bc:	6a 95       	dec	r22
    28be:	f1 f7       	brne	.-4      	; 0x28bc <_ZN12OrangutanLCD4sendEhhh+0x82>
    28c0:	6f 91       	pop	r22
    28c2:	31 97       	sbiw	r30, 0x01	; 1
    28c4:	c9 f7       	brne	.-14     	; 0x28b8 <_ZN12OrangutanLCD4sendEhhh+0x7e>
    28c6:	2a 98       	cbi	0x05, 2	; 5
    28c8:	6f 93       	push	r22
    28ca:	64 e0       	ldi	r22, 0x04	; 4
    28cc:	6a 95       	dec	r22
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <_ZN12OrangutanLCD4sendEhhh+0x92>
    28d0:	6f 91       	pop	r22
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	c9 f7       	brne	.-14     	; 0x28c8 <_ZN12OrangutanLCD4sendEhhh+0x8e>
    28d6:	37 b9       	out	0x07, r19	; 7
    28d8:	28 b9       	out	0x08, r18	; 8
    28da:	1f 91       	pop	r17
    28dc:	0f 91       	pop	r16
    28de:	ff 90       	pop	r15
    28e0:	08 95       	ret

000028e2 <_ZN12OrangutanLCD8send_cmdEh>:
    28e2:	60 e0       	ldi	r22, 0x00	; 0
    28e4:	42 e0       	ldi	r20, 0x02	; 2
    28e6:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN12OrangutanLCD4sendEhhh>
    28ea:	08 95       	ret

000028ec <_ZN12OrangutanLCD10moveCursorEhh>:
    28ec:	0f 93       	push	r16
    28ee:	1f 93       	push	r17
    28f0:	08 2f       	mov	r16, r24
    28f2:	16 2f       	mov	r17, r22
    28f4:	08 c0       	rjmp	.+16     	; 0x2906 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    28f6:	00 23       	and	r16, r16
    28f8:	11 f4       	brne	.+4      	; 0x28fe <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    28fa:	80 e1       	ldi	r24, 0x10	; 16
    28fc:	01 c0       	rjmp	.+2      	; 0x2900 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    28fe:	84 e1       	ldi	r24, 0x14	; 20
    2900:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_ZN12OrangutanLCD8send_cmdEh>
    2904:	11 50       	subi	r17, 0x01	; 1
    2906:	11 23       	and	r17, r17
    2908:	b1 f7       	brne	.-20     	; 0x28f6 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    290a:	1f 91       	pop	r17
    290c:	0f 91       	pop	r16
    290e:	08 95       	ret

00002910 <lcd_move_cursor>:
    2910:	0e 94 76 14 	call	0x28ec	; 0x28ec <_ZN12OrangutanLCD10moveCursorEhh>
    2914:	08 95       	ret

00002916 <_ZN12OrangutanLCD10hideCursorEv>:
    2916:	8c e0       	ldi	r24, 0x0C	; 12
    2918:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_ZN12OrangutanLCD8send_cmdEh>
    291c:	08 95       	ret

0000291e <lcd_hide_cursor>:
    291e:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN12OrangutanLCD10hideCursorEv>
    2922:	08 95       	ret

00002924 <_ZN12OrangutanLCD10showCursorEh>:
    2924:	81 30       	cpi	r24, 0x01	; 1
    2926:	11 f4       	brne	.+4      	; 0x292c <_ZN12OrangutanLCD10showCursorEh+0x8>
    2928:	8f e0       	ldi	r24, 0x0F	; 15
    292a:	01 c0       	rjmp	.+2      	; 0x292e <_ZN12OrangutanLCD10showCursorEh+0xa>
    292c:	8e e0       	ldi	r24, 0x0E	; 14
    292e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_ZN12OrangutanLCD8send_cmdEh>
    2932:	08 95       	ret

00002934 <lcd_show_cursor>:
    2934:	0e 94 92 14 	call	0x2924	; 0x2924 <_ZN12OrangutanLCD10showCursorEh>
    2938:	08 95       	ret

0000293a <_ZN12OrangutanLCD6gotoXYEhh>:
    293a:	a4 e0       	ldi	r26, 0x04	; 4
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	e3 ea       	ldi	r30, 0xA3	; 163
    2940:	f4 e1       	ldi	r31, 0x14	; 20
    2942:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__prologue_saves__+0x1c>
    2946:	18 2f       	mov	r17, r24
    2948:	06 2f       	mov	r16, r22
    294a:	80 e8       	ldi	r24, 0x80	; 128
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	80 ec       	ldi	r24, 0xC0	; 192
    2950:	8a 83       	std	Y+2, r24	; 0x02
    2952:	84 e9       	ldi	r24, 0x94	; 148
    2954:	8b 83       	std	Y+3, r24	; 0x03
    2956:	84 ed       	ldi	r24, 0xD4	; 212
    2958:	8c 83       	std	Y+4, r24	; 0x04
    295a:	fe 01       	movw	r30, r28
    295c:	e6 0f       	add	r30, r22
    295e:	f1 1d       	adc	r31, r1
    2960:	81 81       	ldd	r24, Z+1	; 0x01
    2962:	81 0f       	add	r24, r17
    2964:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_ZN12OrangutanLCD8send_cmdEh>
    2968:	10 93 f5 03 	sts	0x03F5, r17
    296c:	00 93 f4 03 	sts	0x03F4, r16
    2970:	24 96       	adiw	r28, 0x04	; 4
    2972:	e4 e0       	ldi	r30, 0x04	; 4
    2974:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__epilogue_restores__+0x1c>

00002978 <lcd_goto_xy>:
    2978:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN12OrangutanLCD6gotoXYEhh>
    297c:	08 95       	ret

0000297e <_ZN12OrangutanLCD5clearEv>:
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_ZN12OrangutanLCD8send_cmdEh>
    2984:	80 91 f2 03 	lds	r24, 0x03F2
    2988:	90 91 f3 03 	lds	r25, 0x03F3
    298c:	89 2b       	or	r24, r25
    298e:	19 f1       	breq	.+70     	; 0x29d6 <_ZN12OrangutanLCD5clearEv+0x58>
    2990:	60 e0       	ldi	r22, 0x00	; 0
    2992:	70 e2       	ldi	r23, 0x20	; 32
    2994:	08 c0       	rjmp	.+16     	; 0x29a6 <_ZN12OrangutanLCD5clearEv+0x28>
    2996:	e0 91 f2 03 	lds	r30, 0x03F2
    299a:	f0 91 f3 03 	lds	r31, 0x03F3
    299e:	e4 0f       	add	r30, r20
    29a0:	f5 1f       	adc	r31, r21
    29a2:	70 83       	st	Z, r23
    29a4:	6f 5f       	subi	r22, 0xFF	; 255
    29a6:	46 2f       	mov	r20, r22
    29a8:	50 e0       	ldi	r21, 0x00	; 0
    29aa:	80 91 c0 03 	lds	r24, 0x03C0
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	20 91 c1 03 	lds	r18, 0x03C1
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	fc 01       	movw	r30, r24
    29ba:	e2 9f       	mul	r30, r18
    29bc:	c0 01       	movw	r24, r0
    29be:	e3 9f       	mul	r30, r19
    29c0:	90 0d       	add	r25, r0
    29c2:	f2 9f       	mul	r31, r18
    29c4:	90 0d       	add	r25, r0
    29c6:	11 24       	eor	r1, r1
    29c8:	48 17       	cp	r20, r24
    29ca:	59 07       	cpc	r21, r25
    29cc:	24 f3       	brlt	.-56     	; 0x2996 <_ZN12OrangutanLCD5clearEv+0x18>
    29ce:	10 92 f5 03 	sts	0x03F5, r1
    29d2:	10 92 f4 03 	sts	0x03F4, r1
    29d6:	08 95       	ret

000029d8 <clear>:
    29d8:	0e 94 bf 14 	call	0x297e	; 0x297e <_ZN12OrangutanLCD5clearEv>
    29dc:	08 95       	ret

000029de <_ZN12OrangutanLCD9send_dataEh>:
    29de:	61 e0       	ldi	r22, 0x01	; 1
    29e0:	42 e0       	ldi	r20, 0x02	; 2
    29e2:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN12OrangutanLCD4sendEhhh>
    29e6:	08 95       	ret

000029e8 <_ZN12OrangutanLCD11printBinaryEh>:
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
    29f0:	00 e0       	ldi	r16, 0x00	; 0
    29f2:	10 e8       	ldi	r17, 0x80	; 128
    29f4:	c8 2f       	mov	r28, r24
    29f6:	d0 e0       	ldi	r29, 0x00	; 0
    29f8:	81 2f       	mov	r24, r17
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	8c 23       	and	r24, r28
    29fe:	9d 23       	and	r25, r29
    2a00:	89 2b       	or	r24, r25
    2a02:	11 f0       	breq	.+4      	; 0x2a08 <_ZN12OrangutanLCD11printBinaryEh+0x20>
    2a04:	81 e3       	ldi	r24, 0x31	; 49
    2a06:	01 c0       	rjmp	.+2      	; 0x2a0a <_ZN12OrangutanLCD11printBinaryEh+0x22>
    2a08:	80 e3       	ldi	r24, 0x30	; 48
    2a0a:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN12OrangutanLCD9send_dataEh>
    2a0e:	0f 5f       	subi	r16, 0xFF	; 255
    2a10:	08 30       	cpi	r16, 0x08	; 8
    2a12:	11 f0       	breq	.+4      	; 0x2a18 <_ZN12OrangutanLCD11printBinaryEh+0x30>
    2a14:	16 95       	lsr	r17
    2a16:	f0 cf       	rjmp	.-32     	; 0x29f8 <_ZN12OrangutanLCD11printBinaryEh+0x10>
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	08 95       	ret

00002a22 <print_binary>:
    2a22:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <_ZN12OrangutanLCD11printBinaryEh>
    2a26:	08 95       	ret

00002a28 <_ZN12OrangutanLCD14printHexNibbleEh>:
    2a28:	8a 30       	cpi	r24, 0x0A	; 10
    2a2a:	10 f4       	brcc	.+4      	; 0x2a30 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    2a2c:	80 5d       	subi	r24, 0xD0	; 208
    2a2e:	01 c0       	rjmp	.+2      	; 0x2a32 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    2a30:	89 5c       	subi	r24, 0xC9	; 201
    2a32:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN12OrangutanLCD9send_dataEh>
    2a36:	08 95       	ret

00002a38 <_ZN12OrangutanLCD8printHexEh>:
    2a38:	1f 93       	push	r17
    2a3a:	18 2f       	mov	r17, r24
    2a3c:	82 95       	swap	r24
    2a3e:	8f 70       	andi	r24, 0x0F	; 15
    2a40:	0e 94 14 15 	call	0x2a28	; 0x2a28 <_ZN12OrangutanLCD14printHexNibbleEh>
    2a44:	81 2f       	mov	r24, r17
    2a46:	8f 70       	andi	r24, 0x0F	; 15
    2a48:	0e 94 14 15 	call	0x2a28	; 0x2a28 <_ZN12OrangutanLCD14printHexNibbleEh>
    2a4c:	1f 91       	pop	r17
    2a4e:	08 95       	ret

00002a50 <_ZN12OrangutanLCD8printHexEj>:
    2a50:	1f 93       	push	r17
    2a52:	18 2f       	mov	r17, r24
    2a54:	89 2f       	mov	r24, r25
    2a56:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD8printHexEh>
    2a5a:	81 2f       	mov	r24, r17
    2a5c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD8printHexEh>
    2a60:	1f 91       	pop	r17
    2a62:	08 95       	ret

00002a64 <print_hex>:
    2a64:	0e 94 28 15 	call	0x2a50	; 0x2a50 <_ZN12OrangutanLCD8printHexEj>
    2a68:	08 95       	ret

00002a6a <print_hex_byte>:
    2a6a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <_ZN12OrangutanLCD8printHexEh>
    2a6e:	08 95       	ret

00002a70 <_ZN12OrangutanLCD5printEm>:
    2a70:	6f 92       	push	r6
    2a72:	7f 92       	push	r7
    2a74:	8f 92       	push	r8
    2a76:	9f 92       	push	r9
    2a78:	af 92       	push	r10
    2a7a:	bf 92       	push	r11
    2a7c:	cf 92       	push	r12
    2a7e:	df 92       	push	r13
    2a80:	ff 92       	push	r15
    2a82:	0f 93       	push	r16
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
    2a8c:	2a 97       	sbiw	r28, 0x0a	; 10
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	5b 01       	movw	r10, r22
    2a9a:	6c 01       	movw	r12, r24
    2a9c:	0a e0       	ldi	r16, 0x0A	; 10
    2a9e:	3e 01       	movw	r6, r28
    2aa0:	08 94       	sec
    2aa2:	61 1c       	adc	r6, r1
    2aa4:	71 1c       	adc	r7, r1
    2aa6:	fa 2c       	mov	r15, r10
    2aa8:	c6 01       	movw	r24, r12
    2aaa:	b5 01       	movw	r22, r10
    2aac:	2a e0       	ldi	r18, 0x0A	; 10
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e0       	ldi	r20, 0x00	; 0
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__udivmodsi4>
    2ab8:	c9 01       	movw	r24, r18
    2aba:	da 01       	movw	r26, r20
    2abc:	5c 01       	movw	r10, r24
    2abe:	6d 01       	movw	r12, r26
    2ac0:	01 50       	subi	r16, 0x01	; 1
    2ac2:	43 01       	movw	r8, r6
    2ac4:	80 0e       	add	r8, r16
    2ac6:	91 1c       	adc	r9, r1
    2ac8:	80 e3       	ldi	r24, 0x30	; 48
    2aca:	f8 0e       	add	r15, r24
    2acc:	c6 01       	movw	r24, r12
    2ace:	b5 01       	movw	r22, r10
    2ad0:	2a e0       	ldi	r18, 0x0A	; 10
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e0       	ldi	r20, 0x00	; 0
    2ad6:	50 e0       	ldi	r21, 0x00	; 0
    2ad8:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__mulsi3>
    2adc:	f6 1a       	sub	r15, r22
    2ade:	f4 01       	movw	r30, r8
    2ae0:	f0 82       	st	Z, r15
    2ae2:	a1 14       	cp	r10, r1
    2ae4:	b1 04       	cpc	r11, r1
    2ae6:	c1 04       	cpc	r12, r1
    2ae8:	d1 04       	cpc	r13, r1
    2aea:	e9 f6       	brne	.-70     	; 0x2aa6 <_ZN12OrangutanLCD5printEm+0x36>
    2aec:	08 c0       	rjmp	.+16     	; 0x2afe <_ZN12OrangutanLCD5printEm+0x8e>
    2aee:	f6 01       	movw	r30, r12
    2af0:	e0 0f       	add	r30, r16
    2af2:	f1 1d       	adc	r31, r1
    2af4:	80 81       	ld	r24, Z
    2af6:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN12OrangutanLCD9send_dataEh>
    2afa:	0f 5f       	subi	r16, 0xFF	; 255
    2afc:	04 c0       	rjmp	.+8      	; 0x2b06 <_ZN12OrangutanLCD5printEm+0x96>
    2afe:	6e 01       	movw	r12, r28
    2b00:	08 94       	sec
    2b02:	c1 1c       	adc	r12, r1
    2b04:	d1 1c       	adc	r13, r1
    2b06:	0a 30       	cpi	r16, 0x0A	; 10
    2b08:	90 f3       	brcs	.-28     	; 0x2aee <_ZN12OrangutanLCD5printEm+0x7e>
    2b0a:	2a 96       	adiw	r28, 0x0a	; 10
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	cf 91       	pop	r28
    2b18:	df 91       	pop	r29
    2b1a:	0f 91       	pop	r16
    2b1c:	ff 90       	pop	r15
    2b1e:	df 90       	pop	r13
    2b20:	cf 90       	pop	r12
    2b22:	bf 90       	pop	r11
    2b24:	af 90       	pop	r10
    2b26:	9f 90       	pop	r9
    2b28:	8f 90       	pop	r8
    2b2a:	7f 90       	pop	r7
    2b2c:	6f 90       	pop	r6
    2b2e:	08 95       	ret

00002b30 <print_unsigned_long>:
    2b30:	0e 94 38 15 	call	0x2a70	; 0x2a70 <_ZN12OrangutanLCD5printEm>
    2b34:	08 95       	ret

00002b36 <_ZN12OrangutanLCD5printEl>:
    2b36:	ef 92       	push	r14
    2b38:	ff 92       	push	r15
    2b3a:	0f 93       	push	r16
    2b3c:	1f 93       	push	r17
    2b3e:	7b 01       	movw	r14, r22
    2b40:	8c 01       	movw	r16, r24
    2b42:	97 ff       	sbrs	r25, 7
    2b44:	0b c0       	rjmp	.+22     	; 0x2b5c <_ZN12OrangutanLCD5printEl+0x26>
    2b46:	10 95       	com	r17
    2b48:	00 95       	com	r16
    2b4a:	f0 94       	com	r15
    2b4c:	e0 94       	com	r14
    2b4e:	e1 1c       	adc	r14, r1
    2b50:	f1 1c       	adc	r15, r1
    2b52:	01 1d       	adc	r16, r1
    2b54:	11 1d       	adc	r17, r1
    2b56:	8d e2       	ldi	r24, 0x2D	; 45
    2b58:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN12OrangutanLCD9send_dataEh>
    2b5c:	c8 01       	movw	r24, r16
    2b5e:	b7 01       	movw	r22, r14
    2b60:	0e 94 38 15 	call	0x2a70	; 0x2a70 <_ZN12OrangutanLCD5printEm>
    2b64:	1f 91       	pop	r17
    2b66:	0f 91       	pop	r16
    2b68:	ff 90       	pop	r15
    2b6a:	ef 90       	pop	r14
    2b6c:	08 95       	ret

00002b6e <print_long>:
    2b6e:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <_ZN12OrangutanLCD5printEl>
    2b72:	08 95       	ret

00002b74 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    2b74:	cf 93       	push	r28
    2b76:	df 93       	push	r29
    2b78:	ec 01       	movw	r28, r24
    2b7a:	03 c0       	rjmp	.+6      	; 0x2b82 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    2b7c:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN12OrangutanLCD9send_dataEh>
    2b80:	21 96       	adiw	r28, 0x01	; 1
    2b82:	fe 01       	movw	r30, r28
    2b84:	84 91       	lpm	r24, Z+
    2b86:	88 23       	and	r24, r24
    2b88:	c9 f7       	brne	.-14     	; 0x2b7c <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    2b8a:	df 91       	pop	r29
    2b8c:	cf 91       	pop	r28
    2b8e:	08 95       	ret

00002b90 <print_from_program_space>:
    2b90:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    2b94:	08 95       	ret

00002b96 <_ZN12OrangutanLCD5printEPKc>:
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
    2b9a:	ec 01       	movw	r28, r24
    2b9c:	03 c0       	rjmp	.+6      	; 0x2ba4 <_ZN12OrangutanLCD5printEPKc+0xe>
    2b9e:	21 96       	adiw	r28, 0x01	; 1
    2ba0:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN12OrangutanLCD9send_dataEh>
    2ba4:	88 81       	ld	r24, Y
    2ba6:	88 23       	and	r24, r24
    2ba8:	d1 f7       	brne	.-12     	; 0x2b9e <_ZN12OrangutanLCD5printEPKc+0x8>
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	08 95       	ret

00002bb0 <_ZN12OrangutanLCD7printInEPKc>:
    2bb0:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZN12OrangutanLCD5printEPKc>
    2bb4:	08 95       	ret

00002bb6 <print>:
    2bb6:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZN12OrangutanLCD5printEPKc>
    2bba:	08 95       	ret

00002bbc <_ZN12OrangutanLCD5printEc>:
    2bbc:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN12OrangutanLCD9send_dataEh>
    2bc0:	08 95       	ret

00002bc2 <print_character>:
    2bc2:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN12OrangutanLCD9send_dataEh>
    2bc6:	08 95       	ret

00002bc8 <lcd_putchar>:
    2bc8:	a0 e0       	ldi	r26, 0x00	; 0
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	ea ee       	ldi	r30, 0xEA	; 234
    2bce:	f5 e1       	ldi	r31, 0x15	; 21
    2bd0:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <__prologue_saves__+0x14>
    2bd4:	e8 2e       	mov	r14, r24
    2bd6:	80 91 f2 03 	lds	r24, 0x03F2
    2bda:	90 91 f3 03 	lds	r25, 0x03F3
    2bde:	89 2b       	or	r24, r25
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <lcd_putchar+0x1c>
    2be2:	05 c1       	rjmp	.+522    	; 0x2dee <lcd_putchar+0x226>
    2be4:	2a e0       	ldi	r18, 0x0A	; 10
    2be6:	e2 16       	cp	r14, r18
    2be8:	09 f4       	brne	.+2      	; 0x2bec <lcd_putchar+0x24>
    2bea:	46 c0       	rjmp	.+140    	; 0x2c78 <lcd_putchar+0xb0>
    2bec:	38 e0       	ldi	r19, 0x08	; 8
    2bee:	e3 16       	cp	r14, r19
    2bf0:	c9 f4       	brne	.+50     	; 0x2c24 <lcd_putchar+0x5c>
    2bf2:	80 91 f5 03 	lds	r24, 0x03F5
    2bf6:	81 50       	subi	r24, 0x01	; 1
    2bf8:	80 93 f5 03 	sts	0x03F5, r24
    2bfc:	8f 3f       	cpi	r24, 0xFF	; 255
    2bfe:	51 f4       	brne	.+20     	; 0x2c14 <lcd_putchar+0x4c>
    2c00:	80 91 f4 03 	lds	r24, 0x03F4
    2c04:	81 50       	subi	r24, 0x01	; 1
    2c06:	80 93 f4 03 	sts	0x03F4, r24
    2c0a:	80 91 c1 03 	lds	r24, 0x03C1
    2c0e:	81 50       	subi	r24, 0x01	; 1
    2c10:	80 93 f5 03 	sts	0x03F5, r24
    2c14:	80 91 f4 03 	lds	r24, 0x03F4
    2c18:	8f 3f       	cpi	r24, 0xFF	; 255
    2c1a:	09 f0       	breq	.+2      	; 0x2c1e <lcd_putchar+0x56>
    2c1c:	e2 c0       	rjmp	.+452    	; 0x2de2 <lcd_putchar+0x21a>
    2c1e:	10 92 f4 03 	sts	0x03F4, r1
    2c22:	dd c0       	rjmp	.+442    	; 0x2dde <lcd_putchar+0x216>
    2c24:	8e 2d       	mov	r24, r14
    2c26:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN12OrangutanLCD9send_dataEh>
    2c2a:	20 91 f4 03 	lds	r18, 0x03F4
    2c2e:	22 23       	and	r18, r18
    2c30:	c9 f0       	breq	.+50     	; 0x2c64 <lcd_putchar+0x9c>
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	21 50       	subi	r18, 0x01	; 1
    2c36:	30 40       	sbci	r19, 0x00	; 0
    2c38:	80 91 c1 03 	lds	r24, 0x03C1
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	ac 01       	movw	r20, r24
    2c40:	24 9f       	mul	r18, r20
    2c42:	c0 01       	movw	r24, r0
    2c44:	25 9f       	mul	r18, r21
    2c46:	90 0d       	add	r25, r0
    2c48:	34 9f       	mul	r19, r20
    2c4a:	90 0d       	add	r25, r0
    2c4c:	11 24       	eor	r1, r1
    2c4e:	20 91 f5 03 	lds	r18, 0x03F5
    2c52:	e0 91 f2 03 	lds	r30, 0x03F2
    2c56:	f0 91 f3 03 	lds	r31, 0x03F3
    2c5a:	e8 0f       	add	r30, r24
    2c5c:	f9 1f       	adc	r31, r25
    2c5e:	e2 0f       	add	r30, r18
    2c60:	f1 1d       	adc	r31, r1
    2c62:	e0 82       	st	Z, r14
    2c64:	80 91 f5 03 	lds	r24, 0x03F5
    2c68:	8f 5f       	subi	r24, 0xFF	; 255
    2c6a:	80 93 f5 03 	sts	0x03F5, r24
    2c6e:	90 91 c1 03 	lds	r25, 0x03C1
    2c72:	89 17       	cp	r24, r25
    2c74:	09 f0       	breq	.+2      	; 0x2c78 <lcd_putchar+0xb0>
    2c76:	bb c0       	rjmp	.+374    	; 0x2dee <lcd_putchar+0x226>
    2c78:	40 91 f4 03 	lds	r20, 0x03F4
    2c7c:	24 2f       	mov	r18, r20
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	80 91 c0 03 	lds	r24, 0x03C0
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	28 17       	cp	r18, r24
    2c8a:	39 07       	cpc	r19, r25
    2c8c:	09 f0       	breq	.+2      	; 0x2c90 <lcd_putchar+0xc8>
    2c8e:	a4 c0       	rjmp	.+328    	; 0x2dd8 <lcd_putchar+0x210>
    2c90:	c0 e0       	ldi	r28, 0x00	; 0
    2c92:	d0 e0       	ldi	r29, 0x00	; 0
    2c94:	44 c0       	rjmp	.+136    	; 0x2d1e <lcd_putchar+0x156>
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	6c 2f       	mov	r22, r28
    2c9a:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN12OrangutanLCD6gotoXYEhh>
    2c9e:	ff 24       	eor	r15, r15
    2ca0:	6e 01       	movw	r12, r28
    2ca2:	08 94       	sec
    2ca4:	c1 1c       	adc	r12, r1
    2ca6:	d1 1c       	adc	r13, r1
    2ca8:	35 c0       	rjmp	.+106    	; 0x2d14 <lcd_putchar+0x14c>
    2caa:	0f 2d       	mov	r16, r15
    2cac:	10 e0       	ldi	r17, 0x00	; 0
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	9c 01       	movw	r18, r24
    2cb2:	c2 9f       	mul	r28, r18
    2cb4:	c0 01       	movw	r24, r0
    2cb6:	c3 9f       	mul	r28, r19
    2cb8:	90 0d       	add	r25, r0
    2cba:	d2 9f       	mul	r29, r18
    2cbc:	90 0d       	add	r25, r0
    2cbe:	11 24       	eor	r1, r1
    2cc0:	e0 91 f2 03 	lds	r30, 0x03F2
    2cc4:	f0 91 f3 03 	lds	r31, 0x03F3
    2cc8:	e0 0f       	add	r30, r16
    2cca:	f1 1f       	adc	r31, r17
    2ccc:	e8 0f       	add	r30, r24
    2cce:	f9 1f       	adc	r31, r25
    2cd0:	80 81       	ld	r24, Z
    2cd2:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN12OrangutanLCD9send_dataEh>
    2cd6:	e0 91 f2 03 	lds	r30, 0x03F2
    2cda:	f0 91 f3 03 	lds	r31, 0x03F3
    2cde:	80 91 c1 03 	lds	r24, 0x03C1
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	c8 9f       	mul	r28, r24
    2ce6:	d0 01       	movw	r26, r0
    2ce8:	c9 9f       	mul	r28, r25
    2cea:	b0 0d       	add	r27, r0
    2cec:	d8 9f       	mul	r29, r24
    2cee:	b0 0d       	add	r27, r0
    2cf0:	11 24       	eor	r1, r1
    2cf2:	e0 0f       	add	r30, r16
    2cf4:	f1 1f       	adc	r31, r17
    2cf6:	ae 0f       	add	r26, r30
    2cf8:	bf 1f       	adc	r27, r31
    2cfa:	ac 01       	movw	r20, r24
    2cfc:	c4 9e       	mul	r12, r20
    2cfe:	c0 01       	movw	r24, r0
    2d00:	c5 9e       	mul	r12, r21
    2d02:	90 0d       	add	r25, r0
    2d04:	d4 9e       	mul	r13, r20
    2d06:	90 0d       	add	r25, r0
    2d08:	11 24       	eor	r1, r1
    2d0a:	e8 0f       	add	r30, r24
    2d0c:	f9 1f       	adc	r31, r25
    2d0e:	80 81       	ld	r24, Z
    2d10:	8c 93       	st	X, r24
    2d12:	f3 94       	inc	r15
    2d14:	80 91 c1 03 	lds	r24, 0x03C1
    2d18:	f8 16       	cp	r15, r24
    2d1a:	38 f2       	brcs	.-114    	; 0x2caa <lcd_putchar+0xe2>
    2d1c:	e6 01       	movw	r28, r12
    2d1e:	60 91 c0 03 	lds	r22, 0x03C0
    2d22:	86 2f       	mov	r24, r22
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	02 97       	sbiw	r24, 0x02	; 2
    2d28:	c8 17       	cp	r28, r24
    2d2a:	d9 07       	cpc	r29, r25
    2d2c:	0c f4       	brge	.+2      	; 0x2d30 <lcd_putchar+0x168>
    2d2e:	b3 cf       	rjmp	.-154    	; 0x2c96 <lcd_putchar+0xce>
    2d30:	62 30       	cpi	r22, 0x02	; 2
    2d32:	08 f4       	brcc	.+2      	; 0x2d36 <lcd_putchar+0x16e>
    2d34:	40 c0       	rjmp	.+128    	; 0x2db6 <lcd_putchar+0x1ee>
    2d36:	62 50       	subi	r22, 0x02	; 2
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN12OrangutanLCD6gotoXYEhh>
    2d3e:	ff 24       	eor	r15, r15
    2d40:	40 e2       	ldi	r20, 0x20	; 32
    2d42:	d4 2e       	mov	r13, r20
    2d44:	34 c0       	rjmp	.+104    	; 0x2dae <lcd_putchar+0x1e6>
    2d46:	0f 2d       	mov	r16, r15
    2d48:	10 e0       	ldi	r17, 0x00	; 0
    2d4a:	80 91 c0 03 	lds	r24, 0x03C0
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	02 97       	sbiw	r24, 0x02	; 2
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	ac 01       	movw	r20, r24
    2d56:	42 9f       	mul	r20, r18
    2d58:	c0 01       	movw	r24, r0
    2d5a:	43 9f       	mul	r20, r19
    2d5c:	90 0d       	add	r25, r0
    2d5e:	52 9f       	mul	r21, r18
    2d60:	90 0d       	add	r25, r0
    2d62:	11 24       	eor	r1, r1
    2d64:	e0 91 f2 03 	lds	r30, 0x03F2
    2d68:	f0 91 f3 03 	lds	r31, 0x03F3
    2d6c:	e0 0f       	add	r30, r16
    2d6e:	f1 1f       	adc	r31, r17
    2d70:	e8 0f       	add	r30, r24
    2d72:	f9 1f       	adc	r31, r25
    2d74:	80 81       	ld	r24, Z
    2d76:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN12OrangutanLCD9send_dataEh>
    2d7a:	20 91 c0 03 	lds	r18, 0x03C0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	22 50       	subi	r18, 0x02	; 2
    2d82:	30 40       	sbci	r19, 0x00	; 0
    2d84:	80 91 c1 03 	lds	r24, 0x03C1
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	ac 01       	movw	r20, r24
    2d8c:	24 9f       	mul	r18, r20
    2d8e:	c0 01       	movw	r24, r0
    2d90:	25 9f       	mul	r18, r21
    2d92:	90 0d       	add	r25, r0
    2d94:	34 9f       	mul	r19, r20
    2d96:	90 0d       	add	r25, r0
    2d98:	11 24       	eor	r1, r1
    2d9a:	e0 91 f2 03 	lds	r30, 0x03F2
    2d9e:	f0 91 f3 03 	lds	r31, 0x03F3
    2da2:	e0 0f       	add	r30, r16
    2da4:	f1 1f       	adc	r31, r17
    2da6:	e8 0f       	add	r30, r24
    2da8:	f9 1f       	adc	r31, r25
    2daa:	d0 82       	st	Z, r13
    2dac:	f3 94       	inc	r15
    2dae:	20 91 c1 03 	lds	r18, 0x03C1
    2db2:	f2 16       	cp	r15, r18
    2db4:	40 f2       	brcs	.-112    	; 0x2d46 <lcd_putchar+0x17e>
    2db6:	60 91 c0 03 	lds	r22, 0x03C0
    2dba:	61 50       	subi	r22, 0x01	; 1
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN12OrangutanLCD6gotoXYEhh>
    2dc2:	00 e0       	ldi	r16, 0x00	; 0
    2dc4:	04 c0       	rjmp	.+8      	; 0x2dce <lcd_putchar+0x206>
    2dc6:	80 e2       	ldi	r24, 0x20	; 32
    2dc8:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN12OrangutanLCD9send_dataEh>
    2dcc:	0f 5f       	subi	r16, 0xFF	; 255
    2dce:	80 91 c1 03 	lds	r24, 0x03C1
    2dd2:	08 17       	cp	r16, r24
    2dd4:	c0 f3       	brcs	.-16     	; 0x2dc6 <lcd_putchar+0x1fe>
    2dd6:	03 c0       	rjmp	.+6      	; 0x2dde <lcd_putchar+0x216>
    2dd8:	4f 5f       	subi	r20, 0xFF	; 255
    2dda:	40 93 f4 03 	sts	0x03F4, r20
    2dde:	10 92 f5 03 	sts	0x03F5, r1
    2de2:	80 91 f5 03 	lds	r24, 0x03F5
    2de6:	60 91 f4 03 	lds	r22, 0x03F4
    2dea:	0e 94 9d 14 	call	0x293a	; 0x293a <_ZN12OrangutanLCD6gotoXYEhh>
    2dee:	2e 2d       	mov	r18, r14
    2df0:	33 27       	eor	r19, r19
    2df2:	27 fd       	sbrc	r18, 7
    2df4:	30 95       	com	r19
    2df6:	c9 01       	movw	r24, r18
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    2dfc:	e8 e0       	ldi	r30, 0x08	; 8
    2dfe:	0c 94 dd 1f 	jmp	0x3fba	; 0x3fba <__epilogue_restores__+0x14>

00002e02 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    2e02:	ef 92       	push	r14
    2e04:	ff 92       	push	r15
    2e06:	0f 93       	push	r16
    2e08:	1f 93       	push	r17
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	7c 01       	movw	r14, r24
    2e10:	06 2f       	mov	r16, r22
    2e12:	10 e0       	ldi	r17, 0x00	; 0
    2e14:	53 e0       	ldi	r21, 0x03	; 3
    2e16:	00 0f       	add	r16, r16
    2e18:	11 1f       	adc	r17, r17
    2e1a:	5a 95       	dec	r21
    2e1c:	e1 f7       	brne	.-8      	; 0x2e16 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    2e1e:	c0 e0       	ldi	r28, 0x00	; 0
    2e20:	d0 e0       	ldi	r29, 0x00	; 0
    2e22:	9e 01       	movw	r18, r28
    2e24:	20 0f       	add	r18, r16
    2e26:	82 2f       	mov	r24, r18
    2e28:	80 64       	ori	r24, 0x40	; 64
    2e2a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_ZN12OrangutanLCD8send_cmdEh>
    2e2e:	f7 01       	movw	r30, r14
    2e30:	ec 0f       	add	r30, r28
    2e32:	fd 1f       	adc	r31, r29
    2e34:	e4 91       	lpm	r30, Z+
    2e36:	8e 2f       	mov	r24, r30
    2e38:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN12OrangutanLCD9send_dataEh>
    2e3c:	21 96       	adiw	r28, 0x01	; 1
    2e3e:	c8 30       	cpi	r28, 0x08	; 8
    2e40:	d1 05       	cpc	r29, r1
    2e42:	79 f7       	brne	.-34     	; 0x2e22 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
    2e48:	e6 e0       	ldi	r30, 0x06	; 6
    2e4a:	0c 94 df 1f 	jmp	0x3fbe	; 0x3fbe <__epilogue_restores__+0x18>

00002e4e <lcd_load_custom_character>:
    2e4e:	0e 94 01 17 	call	0x2e02	; 0x2e02 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    2e52:	08 95       	ret

00002e54 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    2e54:	60 e0       	ldi	r22, 0x00	; 0
    2e56:	41 e0       	ldi	r20, 0x01	; 1
    2e58:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN12OrangutanLCD4sendEhhh>
    2e5c:	08 95       	ret

00002e5e <_ZN12OrangutanLCD6scrollEhhj>:
    2e5e:	0f 93       	push	r16
    2e60:	1f 93       	push	r17
    2e62:	cf 93       	push	r28
    2e64:	df 93       	push	r29
    2e66:	08 2f       	mov	r16, r24
    2e68:	16 2f       	mov	r17, r22
    2e6a:	ea 01       	movw	r28, r20
    2e6c:	0b c0       	rjmp	.+22     	; 0x2e84 <_ZN12OrangutanLCD6scrollEhhj+0x26>
    2e6e:	00 23       	and	r16, r16
    2e70:	11 f4       	brne	.+4      	; 0x2e76 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    2e72:	88 e1       	ldi	r24, 0x18	; 24
    2e74:	01 c0       	rjmp	.+2      	; 0x2e78 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    2e76:	8c e1       	ldi	r24, 0x1C	; 28
    2e78:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_ZN12OrangutanLCD8send_cmdEh>
    2e7c:	ce 01       	movw	r24, r28
    2e7e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <delay_ms>
    2e82:	11 50       	subi	r17, 0x01	; 1
    2e84:	11 23       	and	r17, r17
    2e86:	99 f7       	brne	.-26     	; 0x2e6e <_ZN12OrangutanLCD6scrollEhhj+0x10>
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	1f 91       	pop	r17
    2e8e:	0f 91       	pop	r16
    2e90:	08 95       	ret

00002e92 <lcd_scroll>:
    2e92:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <_ZN12OrangutanLCD6scrollEhhj>
    2e96:	08 95       	ret

00002e98 <serial_get_mode>:
    2e98:	28 2f       	mov	r18, r24
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	f9 01       	movw	r30, r18
    2e9e:	93 e0       	ldi	r25, 0x03	; 3
    2ea0:	ee 0f       	add	r30, r30
    2ea2:	ff 1f       	adc	r31, r31
    2ea4:	9a 95       	dec	r25
    2ea6:	e1 f7       	brne	.-8      	; 0x2ea0 <serial_get_mode+0x8>
    2ea8:	22 0f       	add	r18, r18
    2eaa:	33 1f       	adc	r19, r19
    2eac:	e2 0f       	add	r30, r18
    2eae:	f3 1f       	adc	r31, r19
    2eb0:	ee 53       	subi	r30, 0x3E	; 62
    2eb2:	fc 4f       	sbci	r31, 0xFC	; 252
    2eb4:	80 81       	ld	r24, Z
    2eb6:	08 95       	ret

00002eb8 <serial_get_received_bytes>:
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	fc 01       	movw	r30, r24
    2ebc:	ee 0f       	add	r30, r30
    2ebe:	ff 1f       	adc	r31, r31
    2ec0:	ee 0f       	add	r30, r30
    2ec2:	ff 1f       	adc	r31, r31
    2ec4:	e8 0f       	add	r30, r24
    2ec6:	f9 1f       	adc	r31, r25
    2ec8:	ee 0f       	add	r30, r30
    2eca:	ff 1f       	adc	r31, r31
    2ecc:	ec 53       	subi	r30, 0x3C	; 60
    2ece:	fc 4f       	sbci	r31, 0xFC	; 252
    2ed0:	80 81       	ld	r24, Z
    2ed2:	08 95       	ret

00002ed4 <serial_receive_buffer_full>:
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	ee 0f       	add	r30, r30
    2eda:	ff 1f       	adc	r31, r31
    2edc:	ee 0f       	add	r30, r30
    2ede:	ff 1f       	adc	r31, r31
    2ee0:	e8 0f       	add	r30, r24
    2ee2:	f9 1f       	adc	r31, r25
    2ee4:	ee 0f       	add	r30, r30
    2ee6:	ff 1f       	adc	r31, r31
    2ee8:	ec 53       	subi	r30, 0x3C	; 60
    2eea:	fc 4f       	sbci	r31, 0xFC	; 252
    2eec:	20 81       	ld	r18, Z
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	53 e0       	ldi	r21, 0x03	; 3
    2ef4:	ee 0f       	add	r30, r30
    2ef6:	ff 1f       	adc	r31, r31
    2ef8:	5a 95       	dec	r21
    2efa:	e1 f7       	brne	.-8      	; 0x2ef4 <serial_receive_buffer_full+0x20>
    2efc:	88 0f       	add	r24, r24
    2efe:	99 1f       	adc	r25, r25
    2f00:	e8 0f       	add	r30, r24
    2f02:	f9 1f       	adc	r31, r25
    2f04:	ee 53       	subi	r30, 0x3E	; 62
    2f06:	fc 4f       	sbci	r31, 0xFC	; 252
    2f08:	84 81       	ldd	r24, Z+4	; 0x04
    2f0a:	28 17       	cp	r18, r24
    2f0c:	09 f4       	brne	.+2      	; 0x2f10 <serial_receive_buffer_full+0x3c>
    2f0e:	31 e0       	ldi	r19, 0x01	; 1
    2f10:	83 2f       	mov	r24, r19
    2f12:	08 95       	ret

00002f14 <serial_get_sent_bytes>:
    2f14:	28 2f       	mov	r18, r24
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	f9 01       	movw	r30, r18
    2f1a:	b3 e0       	ldi	r27, 0x03	; 3
    2f1c:	ee 0f       	add	r30, r30
    2f1e:	ff 1f       	adc	r31, r31
    2f20:	ba 95       	dec	r27
    2f22:	e1 f7       	brne	.-8      	; 0x2f1c <serial_get_sent_bytes+0x8>
    2f24:	22 0f       	add	r18, r18
    2f26:	33 1f       	adc	r19, r19
    2f28:	e2 0f       	add	r30, r18
    2f2a:	f3 1f       	adc	r31, r19
    2f2c:	ee 53       	subi	r30, 0x3E	; 62
    2f2e:	fc 4f       	sbci	r31, 0xFC	; 252
    2f30:	81 81       	ldd	r24, Z+1	; 0x01
    2f32:	08 95       	ret

00002f34 <serial_send_buffer_empty>:
    2f34:	28 2f       	mov	r18, r24
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	f9 01       	movw	r30, r18
    2f3a:	73 e0       	ldi	r23, 0x03	; 3
    2f3c:	ee 0f       	add	r30, r30
    2f3e:	ff 1f       	adc	r31, r31
    2f40:	7a 95       	dec	r23
    2f42:	e1 f7       	brne	.-8      	; 0x2f3c <serial_send_buffer_empty+0x8>
    2f44:	22 0f       	add	r18, r18
    2f46:	33 1f       	adc	r19, r19
    2f48:	e2 0f       	add	r30, r18
    2f4a:	f3 1f       	adc	r31, r19
    2f4c:	ee 53       	subi	r30, 0x3E	; 62
    2f4e:	fc 4f       	sbci	r31, 0xFC	; 252
    2f50:	91 81       	ldd	r25, Z+1	; 0x01
    2f52:	40 e0       	ldi	r20, 0x00	; 0
    2f54:	28 2f       	mov	r18, r24
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	f9 01       	movw	r30, r18
    2f5a:	53 e0       	ldi	r21, 0x03	; 3
    2f5c:	ee 0f       	add	r30, r30
    2f5e:	ff 1f       	adc	r31, r31
    2f60:	5a 95       	dec	r21
    2f62:	e1 f7       	brne	.-8      	; 0x2f5c <serial_send_buffer_empty+0x28>
    2f64:	22 0f       	add	r18, r18
    2f66:	33 1f       	adc	r19, r19
    2f68:	e2 0f       	add	r30, r18
    2f6a:	f3 1f       	adc	r31, r19
    2f6c:	ee 53       	subi	r30, 0x3E	; 62
    2f6e:	fc 4f       	sbci	r31, 0xFC	; 252
    2f70:	83 81       	ldd	r24, Z+3	; 0x03
    2f72:	98 17       	cp	r25, r24
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <serial_send_buffer_empty+0x44>
    2f76:	41 e0       	ldi	r20, 0x01	; 1
    2f78:	84 2f       	mov	r24, r20
    2f7a:	08 95       	ret

00002f7c <_ZN15OrangutanSerialC2Ev>:
    2f7c:	08 95       	ret

00002f7e <_ZN15OrangutanSerialC1Ev>:
    2f7e:	08 95       	ret

00002f80 <_ZN15OrangutanSerial8initPortEh>:
    2f80:	88 23       	and	r24, r24
    2f82:	21 f0       	breq	.+8      	; 0x2f8c <_ZN15OrangutanSerial8initPortEh+0xc>
    2f84:	81 30       	cpi	r24, 0x01	; 1
    2f86:	09 f0       	breq	.+2      	; 0x2f8a <_ZN15OrangutanSerial8initPortEh+0xa>
    2f88:	44 c0       	rjmp	.+136    	; 0x3012 <_ZN15OrangutanSerial8initPortEh+0x92>
    2f8a:	1d c0       	rjmp	.+58     	; 0x2fc6 <_ZN15OrangutanSerial8initPortEh+0x46>
    2f8c:	20 91 c2 03 	lds	r18, 0x03C2
    2f90:	22 23       	and	r18, r18
    2f92:	11 f4       	brne	.+4      	; 0x2f98 <_ZN15OrangutanSerial8initPortEh+0x18>
    2f94:	88 e9       	ldi	r24, 0x98	; 152
    2f96:	01 c0       	rjmp	.+2      	; 0x2f9a <_ZN15OrangutanSerial8initPortEh+0x1a>
    2f98:	88 e1       	ldi	r24, 0x18	; 24
    2f9a:	80 93 c1 00 	sts	0x00C1, r24
    2f9e:	80 91 c8 03 	lds	r24, 0x03C8
    2fa2:	90 91 c9 03 	lds	r25, 0x03C9
    2fa6:	89 2b       	or	r24, r25
    2fa8:	61 f1       	breq	.+88     	; 0x3002 <_ZN15OrangutanSerial8initPortEh+0x82>
    2faa:	90 91 c3 03 	lds	r25, 0x03C3
    2fae:	80 91 c5 03 	lds	r24, 0x03C5
    2fb2:	98 17       	cp	r25, r24
    2fb4:	30 f5       	brcc	.+76     	; 0x3002 <_ZN15OrangutanSerial8initPortEh+0x82>
    2fb6:	22 23       	and	r18, r18
    2fb8:	21 f5       	brne	.+72     	; 0x3002 <_ZN15OrangutanSerial8initPortEh+0x82>
    2fba:	80 91 c1 00 	lds	r24, 0x00C1
    2fbe:	80 62       	ori	r24, 0x20	; 32
    2fc0:	80 93 c1 00 	sts	0x00C1, r24
    2fc4:	1c c0       	rjmp	.+56     	; 0x2ffe <_ZN15OrangutanSerial8initPortEh+0x7e>
    2fc6:	20 91 cc 03 	lds	r18, 0x03CC
    2fca:	22 23       	and	r18, r18
    2fcc:	11 f4       	brne	.+4      	; 0x2fd2 <_ZN15OrangutanSerial8initPortEh+0x52>
    2fce:	88 e9       	ldi	r24, 0x98	; 152
    2fd0:	01 c0       	rjmp	.+2      	; 0x2fd4 <_ZN15OrangutanSerial8initPortEh+0x54>
    2fd2:	88 e1       	ldi	r24, 0x18	; 24
    2fd4:	80 93 c9 00 	sts	0x00C9, r24
    2fd8:	80 91 d2 03 	lds	r24, 0x03D2
    2fdc:	90 91 d3 03 	lds	r25, 0x03D3
    2fe0:	89 2b       	or	r24, r25
    2fe2:	99 f0       	breq	.+38     	; 0x300a <_ZN15OrangutanSerial8initPortEh+0x8a>
    2fe4:	90 91 cd 03 	lds	r25, 0x03CD
    2fe8:	80 91 cf 03 	lds	r24, 0x03CF
    2fec:	98 17       	cp	r25, r24
    2fee:	68 f4       	brcc	.+26     	; 0x300a <_ZN15OrangutanSerial8initPortEh+0x8a>
    2ff0:	22 23       	and	r18, r18
    2ff2:	59 f4       	brne	.+22     	; 0x300a <_ZN15OrangutanSerial8initPortEh+0x8a>
    2ff4:	80 91 c9 00 	lds	r24, 0x00C9
    2ff8:	80 62       	ori	r24, 0x20	; 32
    2ffa:	80 93 c9 00 	sts	0x00C9, r24
    2ffe:	78 94       	sei
    3000:	08 95       	ret
    3002:	80 91 c1 00 	lds	r24, 0x00C1
    3006:	8f 7d       	andi	r24, 0xDF	; 223
    3008:	db cf       	rjmp	.-74     	; 0x2fc0 <_ZN15OrangutanSerial8initPortEh+0x40>
    300a:	80 91 c9 00 	lds	r24, 0x00C9
    300e:	8f 7d       	andi	r24, 0xDF	; 223
    3010:	f4 cf       	rjmp	.-24     	; 0x2ffa <_ZN15OrangutanSerial8initPortEh+0x7a>
    3012:	08 95       	ret

00003014 <serial_set_mode>:
    3014:	28 2f       	mov	r18, r24
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	f9 01       	movw	r30, r18
    301a:	b3 e0       	ldi	r27, 0x03	; 3
    301c:	ee 0f       	add	r30, r30
    301e:	ff 1f       	adc	r31, r31
    3020:	ba 95       	dec	r27
    3022:	e1 f7       	brne	.-8      	; 0x301c <serial_set_mode+0x8>
    3024:	22 0f       	add	r18, r18
    3026:	33 1f       	adc	r19, r19
    3028:	e2 0f       	add	r30, r18
    302a:	f3 1f       	adc	r31, r19
    302c:	ee 53       	subi	r30, 0x3E	; 62
    302e:	fc 4f       	sbci	r31, 0xFC	; 252
    3030:	60 83       	st	Z, r22
    3032:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <_ZN15OrangutanSerial8initPortEh>
    3036:	08 95       	ret

00003038 <_ZN15OrangutanSerial11setBaudRateEhm>:
    3038:	a0 e0       	ldi	r26, 0x00	; 0
    303a:	b0 e0       	ldi	r27, 0x00	; 0
    303c:	e2 e2       	ldi	r30, 0x22	; 34
    303e:	f8 e1       	ldi	r31, 0x18	; 24
    3040:	0c 94 c2 1f 	jmp	0x3f84	; 0x3f84 <__prologue_saves__+0x16>
    3044:	d8 2e       	mov	r13, r24
    3046:	7a 01       	movw	r14, r20
    3048:	8b 01       	movw	r16, r22
    304a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <_ZN15OrangutanSerial8initPortEh>
    304e:	82 e0       	ldi	r24, 0x02	; 2
    3050:	d8 16       	cp	r13, r24
    3052:	19 f1       	breq	.+70     	; 0x309a <_ZN15OrangutanSerial11setBaudRateEhm+0x62>
    3054:	dd 20       	and	r13, r13
    3056:	19 f0       	breq	.+6      	; 0x305e <_ZN15OrangutanSerial11setBaudRateEhm+0x26>
    3058:	cc ec       	ldi	r28, 0xCC	; 204
    305a:	d0 e0       	ldi	r29, 0x00	; 0
    305c:	02 c0       	rjmp	.+4      	; 0x3062 <_ZN15OrangutanSerial11setBaudRateEhm+0x2a>
    305e:	c4 ec       	ldi	r28, 0xC4	; 196
    3060:	d0 e0       	ldi	r29, 0x00	; 0
    3062:	60 ea       	ldi	r22, 0xA0	; 160
    3064:	75 e2       	ldi	r23, 0x25	; 37
    3066:	86 e2       	ldi	r24, 0x26	; 38
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	6e 19       	sub	r22, r14
    306c:	7f 09       	sbc	r23, r15
    306e:	80 0b       	sbc	r24, r16
    3070:	91 0b       	sbc	r25, r17
    3072:	33 e0       	ldi	r19, 0x03	; 3
    3074:	66 0f       	add	r22, r22
    3076:	77 1f       	adc	r23, r23
    3078:	88 1f       	adc	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	3a 95       	dec	r19
    307e:	d1 f7       	brne	.-12     	; 0x3074 <_ZN15OrangutanSerial11setBaudRateEhm+0x3c>
    3080:	24 e0       	ldi	r18, 0x04	; 4
    3082:	ee 0c       	add	r14, r14
    3084:	ff 1c       	adc	r15, r15
    3086:	00 1f       	adc	r16, r16
    3088:	11 1f       	adc	r17, r17
    308a:	2a 95       	dec	r18
    308c:	d1 f7       	brne	.-12     	; 0x3082 <_ZN15OrangutanSerial11setBaudRateEhm+0x4a>
    308e:	a8 01       	movw	r20, r16
    3090:	97 01       	movw	r18, r14
    3092:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__udivmodsi4>
    3096:	39 83       	std	Y+1, r19	; 0x01
    3098:	28 83       	st	Y, r18
    309a:	cd b7       	in	r28, 0x3d	; 61
    309c:	de b7       	in	r29, 0x3e	; 62
    309e:	e7 e0       	ldi	r30, 0x07	; 7
    30a0:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__epilogue_restores__+0x16>

000030a4 <serial_set_baud_rate>:
    30a4:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN15OrangutanSerial11setBaudRateEhm>
    30a8:	08 95       	ret

000030aa <_ZN15OrangutanSerial7setModeEhh>:
    30aa:	28 2f       	mov	r18, r24
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	f9 01       	movw	r30, r18
    30b0:	53 e0       	ldi	r21, 0x03	; 3
    30b2:	ee 0f       	add	r30, r30
    30b4:	ff 1f       	adc	r31, r31
    30b6:	5a 95       	dec	r21
    30b8:	e1 f7       	brne	.-8      	; 0x30b2 <_ZN15OrangutanSerial7setModeEhh+0x8>
    30ba:	22 0f       	add	r18, r18
    30bc:	33 1f       	adc	r19, r19
    30be:	e2 0f       	add	r30, r18
    30c0:	f3 1f       	adc	r31, r19
    30c2:	ee 53       	subi	r30, 0x3E	; 62
    30c4:	fc 4f       	sbci	r31, 0xFC	; 252
    30c6:	60 83       	st	Z, r22
    30c8:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <_ZN15OrangutanSerial8initPortEh>
    30cc:	08 95       	ret

000030ce <_ZN15OrangutanSerial7receiveEhPch>:
    30ce:	58 2f       	mov	r21, r24
    30d0:	82 30       	cpi	r24, 0x02	; 2
    30d2:	51 f0       	breq	.+20     	; 0x30e8 <_ZN15OrangutanSerial7receiveEhPch+0x1a>
    30d4:	88 23       	and	r24, r24
    30d6:	19 f0       	breq	.+6      	; 0x30de <_ZN15OrangutanSerial7receiveEhPch+0x10>
    30d8:	e9 ec       	ldi	r30, 0xC9	; 201
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	02 c0       	rjmp	.+4      	; 0x30e2 <_ZN15OrangutanSerial7receiveEhPch+0x14>
    30de:	e1 ec       	ldi	r30, 0xC1	; 193
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	80 81       	ld	r24, Z
    30e4:	8f 77       	andi	r24, 0x7F	; 127
    30e6:	80 83       	st	Z, r24
    30e8:	25 2f       	mov	r18, r21
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	d9 01       	movw	r26, r18
    30ee:	aa 0f       	add	r26, r26
    30f0:	bb 1f       	adc	r27, r27
    30f2:	c9 01       	movw	r24, r18
    30f4:	e3 e0       	ldi	r30, 0x03	; 3
    30f6:	88 0f       	add	r24, r24
    30f8:	99 1f       	adc	r25, r25
    30fa:	ea 95       	dec	r30
    30fc:	e1 f7       	brne	.-8      	; 0x30f6 <_ZN15OrangutanSerial7receiveEhPch+0x28>
    30fe:	a8 0f       	add	r26, r24
    3100:	b9 1f       	adc	r27, r25
    3102:	ae 53       	subi	r26, 0x3E	; 62
    3104:	bc 4f       	sbci	r27, 0xFC	; 252
    3106:	19 96       	adiw	r26, 0x09	; 9
    3108:	7c 93       	st	X, r23
    310a:	6e 93       	st	-X, r22
    310c:	18 97       	sbiw	r26, 0x08	; 8
    310e:	f9 01       	movw	r30, r18
    3110:	ee 0f       	add	r30, r30
    3112:	ff 1f       	adc	r31, r31
    3114:	ee 0f       	add	r30, r30
    3116:	ff 1f       	adc	r31, r31
    3118:	e2 0f       	add	r30, r18
    311a:	f3 1f       	adc	r31, r19
    311c:	ee 0f       	add	r30, r30
    311e:	ff 1f       	adc	r31, r31
    3120:	ec 53       	subi	r30, 0x3C	; 60
    3122:	fc 4f       	sbci	r31, 0xFC	; 252
    3124:	10 82       	st	Z, r1
    3126:	14 96       	adiw	r26, 0x04	; 4
    3128:	4c 93       	st	X, r20
    312a:	14 97       	sbiw	r26, 0x04	; 4
    312c:	15 96       	adiw	r26, 0x05	; 5
    312e:	1c 92       	st	X, r1
    3130:	15 97       	sbiw	r26, 0x05	; 5
    3132:	52 30       	cpi	r21, 0x02	; 2
    3134:	69 f0       	breq	.+26     	; 0x3150 <_ZN15OrangutanSerial7receiveEhPch+0x82>
    3136:	8c 91       	ld	r24, X
    3138:	88 23       	and	r24, r24
    313a:	51 f4       	brne	.+20     	; 0x3150 <_ZN15OrangutanSerial7receiveEhPch+0x82>
    313c:	55 23       	and	r21, r21
    313e:	19 f0       	breq	.+6      	; 0x3146 <_ZN15OrangutanSerial7receiveEhPch+0x78>
    3140:	e9 ec       	ldi	r30, 0xC9	; 201
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	02 c0       	rjmp	.+4      	; 0x314a <_ZN15OrangutanSerial7receiveEhPch+0x7c>
    3146:	e1 ec       	ldi	r30, 0xC1	; 193
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	80 68       	ori	r24, 0x80	; 128
    314e:	80 83       	st	Z, r24
    3150:	08 95       	ret

00003152 <serial_receive>:
    3152:	0e 94 67 18 	call	0x30ce	; 0x30ce <_ZN15OrangutanSerial7receiveEhPch>
    3156:	08 95       	ret

00003158 <_ZN15OrangutanSerial11receiveRingEhPch>:
    3158:	58 2f       	mov	r21, r24
    315a:	82 30       	cpi	r24, 0x02	; 2
    315c:	51 f0       	breq	.+20     	; 0x3172 <_ZN15OrangutanSerial11receiveRingEhPch+0x1a>
    315e:	88 23       	and	r24, r24
    3160:	19 f0       	breq	.+6      	; 0x3168 <_ZN15OrangutanSerial11receiveRingEhPch+0x10>
    3162:	e9 ec       	ldi	r30, 0xC9	; 201
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	02 c0       	rjmp	.+4      	; 0x316c <_ZN15OrangutanSerial11receiveRingEhPch+0x14>
    3168:	e1 ec       	ldi	r30, 0xC1	; 193
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	8f 77       	andi	r24, 0x7F	; 127
    3170:	80 83       	st	Z, r24
    3172:	25 2f       	mov	r18, r21
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	d9 01       	movw	r26, r18
    3178:	aa 0f       	add	r26, r26
    317a:	bb 1f       	adc	r27, r27
    317c:	c9 01       	movw	r24, r18
    317e:	e3 e0       	ldi	r30, 0x03	; 3
    3180:	88 0f       	add	r24, r24
    3182:	99 1f       	adc	r25, r25
    3184:	ea 95       	dec	r30
    3186:	e1 f7       	brne	.-8      	; 0x3180 <_ZN15OrangutanSerial11receiveRingEhPch+0x28>
    3188:	a8 0f       	add	r26, r24
    318a:	b9 1f       	adc	r27, r25
    318c:	ae 53       	subi	r26, 0x3E	; 62
    318e:	bc 4f       	sbci	r27, 0xFC	; 252
    3190:	19 96       	adiw	r26, 0x09	; 9
    3192:	7c 93       	st	X, r23
    3194:	6e 93       	st	-X, r22
    3196:	18 97       	sbiw	r26, 0x08	; 8
    3198:	f9 01       	movw	r30, r18
    319a:	ee 0f       	add	r30, r30
    319c:	ff 1f       	adc	r31, r31
    319e:	ee 0f       	add	r30, r30
    31a0:	ff 1f       	adc	r31, r31
    31a2:	e2 0f       	add	r30, r18
    31a4:	f3 1f       	adc	r31, r19
    31a6:	ee 0f       	add	r30, r30
    31a8:	ff 1f       	adc	r31, r31
    31aa:	ec 53       	subi	r30, 0x3C	; 60
    31ac:	fc 4f       	sbci	r31, 0xFC	; 252
    31ae:	10 82       	st	Z, r1
    31b0:	14 96       	adiw	r26, 0x04	; 4
    31b2:	4c 93       	st	X, r20
    31b4:	14 97       	sbiw	r26, 0x04	; 4
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	15 96       	adiw	r26, 0x05	; 5
    31ba:	8c 93       	st	X, r24
    31bc:	15 97       	sbiw	r26, 0x05	; 5
    31be:	52 30       	cpi	r21, 0x02	; 2
    31c0:	69 f0       	breq	.+26     	; 0x31dc <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    31c2:	8c 91       	ld	r24, X
    31c4:	88 23       	and	r24, r24
    31c6:	51 f4       	brne	.+20     	; 0x31dc <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    31c8:	55 23       	and	r21, r21
    31ca:	19 f0       	breq	.+6      	; 0x31d2 <_ZN15OrangutanSerial11receiveRingEhPch+0x7a>
    31cc:	e9 ec       	ldi	r30, 0xC9	; 201
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	02 c0       	rjmp	.+4      	; 0x31d6 <_ZN15OrangutanSerial11receiveRingEhPch+0x7e>
    31d2:	e1 ec       	ldi	r30, 0xC1	; 193
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	80 68       	ori	r24, 0x80	; 128
    31da:	80 83       	st	Z, r24
    31dc:	08 95       	ret

000031de <serial_receive_ring>:
    31de:	0e 94 ac 18 	call	0x3158	; 0x3158 <_ZN15OrangutanSerial11receiveRingEhPch>
    31e2:	08 95       	ret

000031e4 <_ZN15OrangutanSerial13cancelReceiveEh>:
    31e4:	60 e0       	ldi	r22, 0x00	; 0
    31e6:	70 e0       	ldi	r23, 0x00	; 0
    31e8:	40 e0       	ldi	r20, 0x00	; 0
    31ea:	0e 94 67 18 	call	0x30ce	; 0x30ce <_ZN15OrangutanSerial7receiveEhPch>
    31ee:	08 95       	ret

000031f0 <serial_cancel_receive>:
    31f0:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <_ZN15OrangutanSerial13cancelReceiveEh>
    31f4:	08 95       	ret

000031f6 <__vector_20>:
    31f6:	1f 92       	push	r1
    31f8:	0f 92       	push	r0
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	0f 92       	push	r0
    31fe:	0b b6       	in	r0, 0x3b	; 59
    3200:	0f 92       	push	r0
    3202:	11 24       	eor	r1, r1
    3204:	2f 93       	push	r18
    3206:	8f 93       	push	r24
    3208:	9f 93       	push	r25
    320a:	ef 93       	push	r30
    320c:	ff 93       	push	r31
    320e:	20 91 c6 00 	lds	r18, 0x00C6
    3212:	e0 91 ca 03 	lds	r30, 0x03CA
    3216:	f0 91 cb 03 	lds	r31, 0x03CB
    321a:	30 97       	sbiw	r30, 0x00	; 0
    321c:	81 f0       	breq	.+32     	; 0x323e <__vector_20+0x48>
    321e:	90 91 c4 03 	lds	r25, 0x03C4
    3222:	80 91 c6 03 	lds	r24, 0x03C6
    3226:	98 17       	cp	r25, r24
    3228:	50 f4       	brcc	.+20     	; 0x323e <__vector_20+0x48>
    322a:	80 91 c4 03 	lds	r24, 0x03C4
    322e:	e8 0f       	add	r30, r24
    3230:	f1 1d       	adc	r31, r1
    3232:	20 83       	st	Z, r18
    3234:	80 91 c4 03 	lds	r24, 0x03C4
    3238:	8f 5f       	subi	r24, 0xFF	; 255
    323a:	80 93 c4 03 	sts	0x03C4, r24
    323e:	90 91 c4 03 	lds	r25, 0x03C4
    3242:	80 91 c6 03 	lds	r24, 0x03C6
    3246:	98 17       	cp	r25, r24
    3248:	31 f4       	brne	.+12     	; 0x3256 <__vector_20+0x60>
    324a:	80 91 c7 03 	lds	r24, 0x03C7
    324e:	88 23       	and	r24, r24
    3250:	11 f0       	breq	.+4      	; 0x3256 <__vector_20+0x60>
    3252:	10 92 c4 03 	sts	0x03C4, r1
    3256:	ff 91       	pop	r31
    3258:	ef 91       	pop	r30
    325a:	9f 91       	pop	r25
    325c:	8f 91       	pop	r24
    325e:	2f 91       	pop	r18
    3260:	0f 90       	pop	r0
    3262:	0b be       	out	0x3b, r0	; 59
    3264:	0f 90       	pop	r0
    3266:	0f be       	out	0x3f, r0	; 63
    3268:	0f 90       	pop	r0
    326a:	1f 90       	pop	r1
    326c:	18 95       	reti

0000326e <__vector_28>:
    326e:	1f 92       	push	r1
    3270:	0f 92       	push	r0
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	0f 92       	push	r0
    3276:	0b b6       	in	r0, 0x3b	; 59
    3278:	0f 92       	push	r0
    327a:	11 24       	eor	r1, r1
    327c:	2f 93       	push	r18
    327e:	8f 93       	push	r24
    3280:	9f 93       	push	r25
    3282:	ef 93       	push	r30
    3284:	ff 93       	push	r31
    3286:	20 91 ce 00 	lds	r18, 0x00CE
    328a:	e0 91 d4 03 	lds	r30, 0x03D4
    328e:	f0 91 d5 03 	lds	r31, 0x03D5
    3292:	30 97       	sbiw	r30, 0x00	; 0
    3294:	81 f0       	breq	.+32     	; 0x32b6 <__vector_28+0x48>
    3296:	90 91 ce 03 	lds	r25, 0x03CE
    329a:	80 91 d0 03 	lds	r24, 0x03D0
    329e:	98 17       	cp	r25, r24
    32a0:	50 f4       	brcc	.+20     	; 0x32b6 <__vector_28+0x48>
    32a2:	80 91 ce 03 	lds	r24, 0x03CE
    32a6:	e8 0f       	add	r30, r24
    32a8:	f1 1d       	adc	r31, r1
    32aa:	20 83       	st	Z, r18
    32ac:	80 91 ce 03 	lds	r24, 0x03CE
    32b0:	8f 5f       	subi	r24, 0xFF	; 255
    32b2:	80 93 ce 03 	sts	0x03CE, r24
    32b6:	90 91 ce 03 	lds	r25, 0x03CE
    32ba:	80 91 d0 03 	lds	r24, 0x03D0
    32be:	98 17       	cp	r25, r24
    32c0:	31 f4       	brne	.+12     	; 0x32ce <__vector_28+0x60>
    32c2:	80 91 d1 03 	lds	r24, 0x03D1
    32c6:	88 23       	and	r24, r24
    32c8:	11 f0       	breq	.+4      	; 0x32ce <__vector_28+0x60>
    32ca:	10 92 ce 03 	sts	0x03CE, r1
    32ce:	ff 91       	pop	r31
    32d0:	ef 91       	pop	r30
    32d2:	9f 91       	pop	r25
    32d4:	8f 91       	pop	r24
    32d6:	2f 91       	pop	r18
    32d8:	0f 90       	pop	r0
    32da:	0b be       	out	0x3b, r0	; 59
    32dc:	0f 90       	pop	r0
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	0f 90       	pop	r0
    32e2:	1f 90       	pop	r1
    32e4:	18 95       	reti

000032e6 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    32e6:	cf 93       	push	r28
    32e8:	df 93       	push	r29
    32ea:	38 2f       	mov	r19, r24
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	fc 01       	movw	r30, r24
    32f0:	53 e0       	ldi	r21, 0x03	; 3
    32f2:	ee 0f       	add	r30, r30
    32f4:	ff 1f       	adc	r31, r31
    32f6:	5a 95       	dec	r21
    32f8:	e1 f7       	brne	.-8      	; 0x32f2 <_ZN15OrangutanSerial11uart_tx_isrEh+0xc>
    32fa:	88 0f       	add	r24, r24
    32fc:	99 1f       	adc	r25, r25
    32fe:	e8 0f       	add	r30, r24
    3300:	f9 1f       	adc	r31, r25
    3302:	ee 53       	subi	r30, 0x3E	; 62
    3304:	fc 4f       	sbci	r31, 0xFC	; 252
    3306:	a6 81       	ldd	r26, Z+6	; 0x06
    3308:	b7 81       	ldd	r27, Z+7	; 0x07
    330a:	10 97       	sbiw	r26, 0x00	; 0
    330c:	09 f4       	brne	.+2      	; 0x3310 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2a>
    330e:	64 c0       	rjmp	.+200    	; 0x33d8 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    3310:	83 2f       	mov	r24, r19
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	fc 01       	movw	r30, r24
    3316:	23 e0       	ldi	r18, 0x03	; 3
    3318:	ee 0f       	add	r30, r30
    331a:	ff 1f       	adc	r31, r31
    331c:	2a 95       	dec	r18
    331e:	e1 f7       	brne	.-8      	; 0x3318 <_ZN15OrangutanSerial11uart_tx_isrEh+0x32>
    3320:	88 0f       	add	r24, r24
    3322:	99 1f       	adc	r25, r25
    3324:	e8 0f       	add	r30, r24
    3326:	f9 1f       	adc	r31, r25
    3328:	ee 53       	subi	r30, 0x3E	; 62
    332a:	fc 4f       	sbci	r31, 0xFC	; 252
    332c:	21 81       	ldd	r18, Z+1	; 0x01
    332e:	83 2f       	mov	r24, r19
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	fc 01       	movw	r30, r24
    3334:	63 e0       	ldi	r22, 0x03	; 3
    3336:	ee 0f       	add	r30, r30
    3338:	ff 1f       	adc	r31, r31
    333a:	6a 95       	dec	r22
    333c:	e1 f7       	brne	.-8      	; 0x3336 <_ZN15OrangutanSerial11uart_tx_isrEh+0x50>
    333e:	88 0f       	add	r24, r24
    3340:	99 1f       	adc	r25, r25
    3342:	e8 0f       	add	r30, r24
    3344:	f9 1f       	adc	r31, r25
    3346:	ee 53       	subi	r30, 0x3E	; 62
    3348:	fc 4f       	sbci	r31, 0xFC	; 252
    334a:	83 81       	ldd	r24, Z+3	; 0x03
    334c:	28 17       	cp	r18, r24
    334e:	08 f0       	brcs	.+2      	; 0x3352 <_ZN15OrangutanSerial11uart_tx_isrEh+0x6c>
    3350:	43 c0       	rjmp	.+134    	; 0x33d8 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    3352:	33 23       	and	r19, r19
    3354:	19 f0       	breq	.+6      	; 0x335c <_ZN15OrangutanSerial11uart_tx_isrEh+0x76>
    3356:	e8 ec       	ldi	r30, 0xC8	; 200
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	02 c0       	rjmp	.+4      	; 0x3360 <_ZN15OrangutanSerial11uart_tx_isrEh+0x7a>
    335c:	e0 ec       	ldi	r30, 0xC0	; 192
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
    3362:	85 ff       	sbrs	r24, 5
    3364:	39 c0       	rjmp	.+114    	; 0x33d8 <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    3366:	33 23       	and	r19, r19
    3368:	19 f0       	breq	.+6      	; 0x3370 <_ZN15OrangutanSerial11uart_tx_isrEh+0x8a>
    336a:	ce ec       	ldi	r28, 0xCE	; 206
    336c:	d0 e0       	ldi	r29, 0x00	; 0
    336e:	02 c0       	rjmp	.+4      	; 0x3374 <_ZN15OrangutanSerial11uart_tx_isrEh+0x8e>
    3370:	c6 ec       	ldi	r28, 0xC6	; 198
    3372:	d0 e0       	ldi	r29, 0x00	; 0
    3374:	83 2f       	mov	r24, r19
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	fc 01       	movw	r30, r24
    337a:	43 e0       	ldi	r20, 0x03	; 3
    337c:	ee 0f       	add	r30, r30
    337e:	ff 1f       	adc	r31, r31
    3380:	4a 95       	dec	r20
    3382:	e1 f7       	brne	.-8      	; 0x337c <_ZN15OrangutanSerial11uart_tx_isrEh+0x96>
    3384:	88 0f       	add	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	e8 0f       	add	r30, r24
    338a:	f9 1f       	adc	r31, r25
    338c:	ee 53       	subi	r30, 0x3E	; 62
    338e:	fc 4f       	sbci	r31, 0xFC	; 252
    3390:	81 81       	ldd	r24, Z+1	; 0x01
    3392:	a8 0f       	add	r26, r24
    3394:	b1 1d       	adc	r27, r1
    3396:	8c 91       	ld	r24, X
    3398:	88 83       	st	Y, r24
    339a:	83 2f       	mov	r24, r19
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	fc 01       	movw	r30, r24
    33a0:	73 e0       	ldi	r23, 0x03	; 3
    33a2:	ee 0f       	add	r30, r30
    33a4:	ff 1f       	adc	r31, r31
    33a6:	7a 95       	dec	r23
    33a8:	e1 f7       	brne	.-8      	; 0x33a2 <_ZN15OrangutanSerial11uart_tx_isrEh+0xbc>
    33aa:	88 0f       	add	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	e8 0f       	add	r30, r24
    33b0:	f9 1f       	adc	r31, r25
    33b2:	ee 53       	subi	r30, 0x3E	; 62
    33b4:	fc 4f       	sbci	r31, 0xFC	; 252
    33b6:	21 81       	ldd	r18, Z+1	; 0x01
    33b8:	2f 5f       	subi	r18, 0xFF	; 255
    33ba:	83 2f       	mov	r24, r19
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	fc 01       	movw	r30, r24
    33c0:	53 e0       	ldi	r21, 0x03	; 3
    33c2:	ee 0f       	add	r30, r30
    33c4:	ff 1f       	adc	r31, r31
    33c6:	5a 95       	dec	r21
    33c8:	e1 f7       	brne	.-8      	; 0x33c2 <_ZN15OrangutanSerial11uart_tx_isrEh+0xdc>
    33ca:	88 0f       	add	r24, r24
    33cc:	99 1f       	adc	r25, r25
    33ce:	e8 0f       	add	r30, r24
    33d0:	f9 1f       	adc	r31, r25
    33d2:	ee 53       	subi	r30, 0x3E	; 62
    33d4:	fc 4f       	sbci	r31, 0xFC	; 252
    33d6:	21 83       	std	Z+1, r18	; 0x01
    33d8:	83 2f       	mov	r24, r19
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	fc 01       	movw	r30, r24
    33de:	b3 e0       	ldi	r27, 0x03	; 3
    33e0:	ee 0f       	add	r30, r30
    33e2:	ff 1f       	adc	r31, r31
    33e4:	ba 95       	dec	r27
    33e6:	e1 f7       	brne	.-8      	; 0x33e0 <_ZN15OrangutanSerial11uart_tx_isrEh+0xfa>
    33e8:	88 0f       	add	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	e8 0f       	add	r30, r24
    33ee:	f9 1f       	adc	r31, r25
    33f0:	ee 53       	subi	r30, 0x3E	; 62
    33f2:	fc 4f       	sbci	r31, 0xFC	; 252
    33f4:	86 81       	ldd	r24, Z+6	; 0x06
    33f6:	97 81       	ldd	r25, Z+7	; 0x07
    33f8:	89 2b       	or	r24, r25
    33fa:	09 f4       	brne	.+2      	; 0x33fe <_ZN15OrangutanSerial11uart_tx_isrEh+0x118>
    33fc:	43 c0       	rjmp	.+134    	; 0x3484 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    33fe:	83 2f       	mov	r24, r19
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	fc 01       	movw	r30, r24
    3404:	73 e0       	ldi	r23, 0x03	; 3
    3406:	ee 0f       	add	r30, r30
    3408:	ff 1f       	adc	r31, r31
    340a:	7a 95       	dec	r23
    340c:	e1 f7       	brne	.-8      	; 0x3406 <_ZN15OrangutanSerial11uart_tx_isrEh+0x120>
    340e:	88 0f       	add	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	e8 0f       	add	r30, r24
    3414:	f9 1f       	adc	r31, r25
    3416:	ee 53       	subi	r30, 0x3E	; 62
    3418:	fc 4f       	sbci	r31, 0xFC	; 252
    341a:	21 81       	ldd	r18, Z+1	; 0x01
    341c:	83 2f       	mov	r24, r19
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	fc 01       	movw	r30, r24
    3422:	53 e0       	ldi	r21, 0x03	; 3
    3424:	ee 0f       	add	r30, r30
    3426:	ff 1f       	adc	r31, r31
    3428:	5a 95       	dec	r21
    342a:	e1 f7       	brne	.-8      	; 0x3424 <_ZN15OrangutanSerial11uart_tx_isrEh+0x13e>
    342c:	88 0f       	add	r24, r24
    342e:	99 1f       	adc	r25, r25
    3430:	e8 0f       	add	r30, r24
    3432:	f9 1f       	adc	r31, r25
    3434:	ee 53       	subi	r30, 0x3E	; 62
    3436:	fc 4f       	sbci	r31, 0xFC	; 252
    3438:	83 81       	ldd	r24, Z+3	; 0x03
    343a:	28 17       	cp	r18, r24
    343c:	18 f5       	brcc	.+70     	; 0x3484 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    343e:	83 2f       	mov	r24, r19
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	fc 01       	movw	r30, r24
    3444:	b3 e0       	ldi	r27, 0x03	; 3
    3446:	ee 0f       	add	r30, r30
    3448:	ff 1f       	adc	r31, r31
    344a:	ba 95       	dec	r27
    344c:	e1 f7       	brne	.-8      	; 0x3446 <_ZN15OrangutanSerial11uart_tx_isrEh+0x160>
    344e:	88 0f       	add	r24, r24
    3450:	99 1f       	adc	r25, r25
    3452:	e8 0f       	add	r30, r24
    3454:	f9 1f       	adc	r31, r25
    3456:	ee 53       	subi	r30, 0x3E	; 62
    3458:	fc 4f       	sbci	r31, 0xFC	; 252
    345a:	80 81       	ld	r24, Z
    345c:	88 23       	and	r24, r24
    345e:	91 f4       	brne	.+36     	; 0x3484 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    3460:	33 23       	and	r19, r19
    3462:	19 f0       	breq	.+6      	; 0x346a <_ZN15OrangutanSerial11uart_tx_isrEh+0x184>
    3464:	e9 ec       	ldi	r30, 0xC9	; 201
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	02 c0       	rjmp	.+4      	; 0x346e <_ZN15OrangutanSerial11uart_tx_isrEh+0x188>
    346a:	e1 ec       	ldi	r30, 0xC1	; 193
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	80 81       	ld	r24, Z
    3470:	80 62       	ori	r24, 0x20	; 32
    3472:	04 c0       	rjmp	.+8      	; 0x347c <_ZN15OrangutanSerial11uart_tx_isrEh+0x196>
    3474:	e9 ec       	ldi	r30, 0xC9	; 201
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
    347a:	8f 7d       	andi	r24, 0xDF	; 223
    347c:	80 83       	st	Z, r24
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	08 95       	ret
    3484:	33 23       	and	r19, r19
    3486:	b1 f7       	brne	.-20     	; 0x3474 <_ZN15OrangutanSerial11uart_tx_isrEh+0x18e>
    3488:	e1 ec       	ldi	r30, 0xC1	; 193
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	f5 cf       	rjmp	.-22     	; 0x3478 <_ZN15OrangutanSerial11uart_tx_isrEh+0x192>

0000348e <_ZN15OrangutanSerial4sendEhPch>:
    348e:	28 2f       	mov	r18, r24
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	fc 01       	movw	r30, r24
    3494:	53 e0       	ldi	r21, 0x03	; 3
    3496:	ee 0f       	add	r30, r30
    3498:	ff 1f       	adc	r31, r31
    349a:	5a 95       	dec	r21
    349c:	e1 f7       	brne	.-8      	; 0x3496 <_ZN15OrangutanSerial4sendEhPch+0x8>
    349e:	88 0f       	add	r24, r24
    34a0:	99 1f       	adc	r25, r25
    34a2:	e8 0f       	add	r30, r24
    34a4:	f9 1f       	adc	r31, r25
    34a6:	ee 53       	subi	r30, 0x3E	; 62
    34a8:	fc 4f       	sbci	r31, 0xFC	; 252
    34aa:	77 83       	std	Z+7, r23	; 0x07
    34ac:	66 83       	std	Z+6, r22	; 0x06
    34ae:	82 2f       	mov	r24, r18
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	fc 01       	movw	r30, r24
    34b4:	b3 e0       	ldi	r27, 0x03	; 3
    34b6:	ee 0f       	add	r30, r30
    34b8:	ff 1f       	adc	r31, r31
    34ba:	ba 95       	dec	r27
    34bc:	e1 f7       	brne	.-8      	; 0x34b6 <_ZN15OrangutanSerial4sendEhPch+0x28>
    34be:	88 0f       	add	r24, r24
    34c0:	99 1f       	adc	r25, r25
    34c2:	e8 0f       	add	r30, r24
    34c4:	f9 1f       	adc	r31, r25
    34c6:	ee 53       	subi	r30, 0x3E	; 62
    34c8:	fc 4f       	sbci	r31, 0xFC	; 252
    34ca:	11 82       	std	Z+1, r1	; 0x01
    34cc:	82 2f       	mov	r24, r18
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	fc 01       	movw	r30, r24
    34d2:	73 e0       	ldi	r23, 0x03	; 3
    34d4:	ee 0f       	add	r30, r30
    34d6:	ff 1f       	adc	r31, r31
    34d8:	7a 95       	dec	r23
    34da:	e1 f7       	brne	.-8      	; 0x34d4 <_ZN15OrangutanSerial4sendEhPch+0x46>
    34dc:	88 0f       	add	r24, r24
    34de:	99 1f       	adc	r25, r25
    34e0:	e8 0f       	add	r30, r24
    34e2:	f9 1f       	adc	r31, r25
    34e4:	ee 53       	subi	r30, 0x3E	; 62
    34e6:	fc 4f       	sbci	r31, 0xFC	; 252
    34e8:	43 83       	std	Z+3, r20	; 0x03
    34ea:	22 30       	cpi	r18, 0x02	; 2
    34ec:	09 f4       	brne	.+2      	; 0x34f0 <_ZN15OrangutanSerial4sendEhPch+0x62>
    34ee:	49 c0       	rjmp	.+146    	; 0x3582 <_ZN15OrangutanSerial4sendEhPch+0xf4>
    34f0:	82 2f       	mov	r24, r18
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	fc 01       	movw	r30, r24
    34f6:	53 e0       	ldi	r21, 0x03	; 3
    34f8:	ee 0f       	add	r30, r30
    34fa:	ff 1f       	adc	r31, r31
    34fc:	5a 95       	dec	r21
    34fe:	e1 f7       	brne	.-8      	; 0x34f8 <_ZN15OrangutanSerial4sendEhPch+0x6a>
    3500:	88 0f       	add	r24, r24
    3502:	99 1f       	adc	r25, r25
    3504:	e8 0f       	add	r30, r24
    3506:	f9 1f       	adc	r31, r25
    3508:	ee 53       	subi	r30, 0x3E	; 62
    350a:	fc 4f       	sbci	r31, 0xFC	; 252
    350c:	86 81       	ldd	r24, Z+6	; 0x06
    350e:	97 81       	ldd	r25, Z+7	; 0x07
    3510:	89 2b       	or	r24, r25
    3512:	91 f1       	breq	.+100    	; 0x3578 <_ZN15OrangutanSerial4sendEhPch+0xea>
    3514:	82 2f       	mov	r24, r18
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	fc 01       	movw	r30, r24
    351a:	b3 e0       	ldi	r27, 0x03	; 3
    351c:	ee 0f       	add	r30, r30
    351e:	ff 1f       	adc	r31, r31
    3520:	ba 95       	dec	r27
    3522:	e1 f7       	brne	.-8      	; 0x351c <_ZN15OrangutanSerial4sendEhPch+0x8e>
    3524:	88 0f       	add	r24, r24
    3526:	99 1f       	adc	r25, r25
    3528:	e8 0f       	add	r30, r24
    352a:	f9 1f       	adc	r31, r25
    352c:	ee 53       	subi	r30, 0x3E	; 62
    352e:	fc 4f       	sbci	r31, 0xFC	; 252
    3530:	81 81       	ldd	r24, Z+1	; 0x01
    3532:	84 17       	cp	r24, r20
    3534:	08 f5       	brcc	.+66     	; 0x3578 <_ZN15OrangutanSerial4sendEhPch+0xea>
    3536:	82 2f       	mov	r24, r18
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	fc 01       	movw	r30, r24
    353c:	73 e0       	ldi	r23, 0x03	; 3
    353e:	ee 0f       	add	r30, r30
    3540:	ff 1f       	adc	r31, r31
    3542:	7a 95       	dec	r23
    3544:	e1 f7       	brne	.-8      	; 0x353e <_ZN15OrangutanSerial4sendEhPch+0xb0>
    3546:	88 0f       	add	r24, r24
    3548:	99 1f       	adc	r25, r25
    354a:	e8 0f       	add	r30, r24
    354c:	f9 1f       	adc	r31, r25
    354e:	ee 53       	subi	r30, 0x3E	; 62
    3550:	fc 4f       	sbci	r31, 0xFC	; 252
    3552:	80 81       	ld	r24, Z
    3554:	88 23       	and	r24, r24
    3556:	81 f4       	brne	.+32     	; 0x3578 <_ZN15OrangutanSerial4sendEhPch+0xea>
    3558:	22 23       	and	r18, r18
    355a:	19 f0       	breq	.+6      	; 0x3562 <_ZN15OrangutanSerial4sendEhPch+0xd4>
    355c:	e9 ec       	ldi	r30, 0xC9	; 201
    355e:	f0 e0       	ldi	r31, 0x00	; 0
    3560:	02 c0       	rjmp	.+4      	; 0x3566 <_ZN15OrangutanSerial4sendEhPch+0xd8>
    3562:	e1 ec       	ldi	r30, 0xC1	; 193
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	80 81       	ld	r24, Z
    3568:	80 62       	ori	r24, 0x20	; 32
    356a:	04 c0       	rjmp	.+8      	; 0x3574 <_ZN15OrangutanSerial4sendEhPch+0xe6>
    356c:	e9 ec       	ldi	r30, 0xC9	; 201
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	80 81       	ld	r24, Z
    3572:	8f 7d       	andi	r24, 0xDF	; 223
    3574:	80 83       	st	Z, r24
    3576:	08 95       	ret
    3578:	22 23       	and	r18, r18
    357a:	c1 f7       	brne	.-16     	; 0x356c <_ZN15OrangutanSerial4sendEhPch+0xde>
    357c:	e1 ec       	ldi	r30, 0xC1	; 193
    357e:	f0 e0       	ldi	r31, 0x00	; 0
    3580:	f7 cf       	rjmp	.-18     	; 0x3570 <_ZN15OrangutanSerial4sendEhPch+0xe2>
    3582:	08 95       	ret

00003584 <serial_send>:
    3584:	0e 94 47 1a 	call	0x348e	; 0x348e <_ZN15OrangutanSerial4sendEhPch>
    3588:	08 95       	ret

0000358a <__vector_21>:
    358a:	1f 92       	push	r1
    358c:	0f 92       	push	r0
    358e:	0f b6       	in	r0, 0x3f	; 63
    3590:	0f 92       	push	r0
    3592:	0b b6       	in	r0, 0x3b	; 59
    3594:	0f 92       	push	r0
    3596:	11 24       	eor	r1, r1
    3598:	2f 93       	push	r18
    359a:	3f 93       	push	r19
    359c:	4f 93       	push	r20
    359e:	5f 93       	push	r21
    35a0:	6f 93       	push	r22
    35a2:	7f 93       	push	r23
    35a4:	8f 93       	push	r24
    35a6:	9f 93       	push	r25
    35a8:	af 93       	push	r26
    35aa:	bf 93       	push	r27
    35ac:	ef 93       	push	r30
    35ae:	ff 93       	push	r31
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	0e 94 73 19 	call	0x32e6	; 0x32e6 <_ZN15OrangutanSerial11uart_tx_isrEh>
    35b6:	ff 91       	pop	r31
    35b8:	ef 91       	pop	r30
    35ba:	bf 91       	pop	r27
    35bc:	af 91       	pop	r26
    35be:	9f 91       	pop	r25
    35c0:	8f 91       	pop	r24
    35c2:	7f 91       	pop	r23
    35c4:	6f 91       	pop	r22
    35c6:	5f 91       	pop	r21
    35c8:	4f 91       	pop	r20
    35ca:	3f 91       	pop	r19
    35cc:	2f 91       	pop	r18
    35ce:	0f 90       	pop	r0
    35d0:	0b be       	out	0x3b, r0	; 59
    35d2:	0f 90       	pop	r0
    35d4:	0f be       	out	0x3f, r0	; 63
    35d6:	0f 90       	pop	r0
    35d8:	1f 90       	pop	r1
    35da:	18 95       	reti

000035dc <__vector_29>:
    35dc:	1f 92       	push	r1
    35de:	0f 92       	push	r0
    35e0:	0f b6       	in	r0, 0x3f	; 63
    35e2:	0f 92       	push	r0
    35e4:	0b b6       	in	r0, 0x3b	; 59
    35e6:	0f 92       	push	r0
    35e8:	11 24       	eor	r1, r1
    35ea:	2f 93       	push	r18
    35ec:	3f 93       	push	r19
    35ee:	4f 93       	push	r20
    35f0:	5f 93       	push	r21
    35f2:	6f 93       	push	r22
    35f4:	7f 93       	push	r23
    35f6:	8f 93       	push	r24
    35f8:	9f 93       	push	r25
    35fa:	af 93       	push	r26
    35fc:	bf 93       	push	r27
    35fe:	ef 93       	push	r30
    3600:	ff 93       	push	r31
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	0e 94 73 19 	call	0x32e6	; 0x32e6 <_ZN15OrangutanSerial11uart_tx_isrEh>
    3608:	ff 91       	pop	r31
    360a:	ef 91       	pop	r30
    360c:	bf 91       	pop	r27
    360e:	af 91       	pop	r26
    3610:	9f 91       	pop	r25
    3612:	8f 91       	pop	r24
    3614:	7f 91       	pop	r23
    3616:	6f 91       	pop	r22
    3618:	5f 91       	pop	r21
    361a:	4f 91       	pop	r20
    361c:	3f 91       	pop	r19
    361e:	2f 91       	pop	r18
    3620:	0f 90       	pop	r0
    3622:	0b be       	out	0x3b, r0	; 59
    3624:	0f 90       	pop	r0
    3626:	0f be       	out	0x3f, r0	; 63
    3628:	0f 90       	pop	r0
    362a:	1f 90       	pop	r1
    362c:	18 95       	reti

0000362e <_ZN15OrangutanSerial15serial_tx_checkEh>:
    362e:	98 2f       	mov	r25, r24
    3630:	82 30       	cpi	r24, 0x02	; 2
    3632:	71 f0       	breq	.+28     	; 0x3650 <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    3634:	88 23       	and	r24, r24
    3636:	19 f0       	breq	.+6      	; 0x363e <_ZN15OrangutanSerial15serial_tx_checkEh+0x10>
    3638:	e9 ec       	ldi	r30, 0xC9	; 201
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	02 c0       	rjmp	.+4      	; 0x3642 <_ZN15OrangutanSerial15serial_tx_checkEh+0x14>
    363e:	e1 ec       	ldi	r30, 0xC1	; 193
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	80 81       	ld	r24, Z
    3644:	8f 7d       	andi	r24, 0xDF	; 223
    3646:	80 83       	st	Z, r24
    3648:	89 2f       	mov	r24, r25
    364a:	0e 94 73 19 	call	0x32e6	; 0x32e6 <_ZN15OrangutanSerial11uart_tx_isrEh>
    364e:	08 95       	ret
    3650:	e0 91 dc 03 	lds	r30, 0x03DC
    3654:	f0 91 dd 03 	lds	r31, 0x03DD
    3658:	30 97       	sbiw	r30, 0x00	; 0
    365a:	b1 f0       	breq	.+44     	; 0x3688 <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    365c:	90 91 d7 03 	lds	r25, 0x03D7
    3660:	80 91 d9 03 	lds	r24, 0x03D9
    3664:	98 17       	cp	r25, r24
    3666:	80 f4       	brcc	.+32     	; 0x3688 <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    3668:	06 c0       	rjmp	.+12     	; 0x3676 <_ZN15OrangutanSerial15serial_tx_checkEh+0x48>
    366a:	80 91 d7 03 	lds	r24, 0x03D7
    366e:	8f 5f       	subi	r24, 0xFF	; 255
    3670:	80 93 d7 03 	sts	0x03D7, r24
    3674:	ed cf       	rjmp	.-38     	; 0x3650 <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    3676:	80 91 d7 03 	lds	r24, 0x03D7
    367a:	e8 0f       	add	r30, r24
    367c:	f1 1d       	adc	r31, r1
    367e:	80 81       	ld	r24, Z
    3680:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <_ZN12OrangutanSVP17serialSendIfReadyEc>
    3684:	88 23       	and	r24, r24
    3686:	89 f7       	brne	.-30     	; 0x366a <_ZN15OrangutanSerial15serial_tx_checkEh+0x3c>
    3688:	08 95       	ret

0000368a <_ZN15OrangutanSerial15serial_rx_checkEh>:
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    368e:	cf 93       	push	r28
    3690:	df 93       	push	r29
    3692:	68 2f       	mov	r22, r24
    3694:	82 30       	cpi	r24, 0x02	; 2
    3696:	09 f4       	brne	.+2      	; 0x369a <_ZN15OrangutanSerial15serial_rx_checkEh+0x10>
    3698:	9c c0       	rjmp	.+312    	; 0x37d2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    369a:	88 23       	and	r24, r24
    369c:	19 f0       	breq	.+6      	; 0x36a4 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1a>
    369e:	e9 ec       	ldi	r30, 0xC9	; 201
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	02 c0       	rjmp	.+4      	; 0x36a8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1e>
    36a4:	e1 ec       	ldi	r30, 0xC1	; 193
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	80 81       	ld	r24, Z
    36aa:	8f 77       	andi	r24, 0x7F	; 127
    36ac:	80 83       	st	Z, r24
    36ae:	46 2f       	mov	r20, r22
    36b0:	50 e0       	ldi	r21, 0x00	; 0
    36b2:	da 01       	movw	r26, r20
    36b4:	aa 0f       	add	r26, r26
    36b6:	bb 1f       	adc	r27, r27
    36b8:	ca 01       	movw	r24, r20
    36ba:	23 e0       	ldi	r18, 0x03	; 3
    36bc:	88 0f       	add	r24, r24
    36be:	99 1f       	adc	r25, r25
    36c0:	2a 95       	dec	r18
    36c2:	e1 f7       	brne	.-8      	; 0x36bc <_ZN15OrangutanSerial15serial_rx_checkEh+0x32>
    36c4:	a8 0f       	add	r26, r24
    36c6:	b9 1f       	adc	r27, r25
    36c8:	ae 53       	subi	r26, 0x3E	; 62
    36ca:	bc 4f       	sbci	r27, 0xFC	; 252
    36cc:	18 96       	adiw	r26, 0x08	; 8
    36ce:	cd 91       	ld	r28, X+
    36d0:	dc 91       	ld	r29, X
    36d2:	19 97       	sbiw	r26, 0x09	; 9
    36d4:	20 97       	sbiw	r28, 0x00	; 0
    36d6:	09 f4       	brne	.+2      	; 0x36da <_ZN15OrangutanSerial15serial_rx_checkEh+0x50>
    36d8:	5a c0       	rjmp	.+180    	; 0x378e <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    36da:	fa 01       	movw	r30, r20
    36dc:	ee 0f       	add	r30, r30
    36de:	ff 1f       	adc	r31, r31
    36e0:	ee 0f       	add	r30, r30
    36e2:	ff 1f       	adc	r31, r31
    36e4:	e4 0f       	add	r30, r20
    36e6:	f5 1f       	adc	r31, r21
    36e8:	ee 0f       	add	r30, r30
    36ea:	ff 1f       	adc	r31, r31
    36ec:	ec 53       	subi	r30, 0x3C	; 60
    36ee:	fc 4f       	sbci	r31, 0xFC	; 252
    36f0:	80 81       	ld	r24, Z
    36f2:	14 96       	adiw	r26, 0x04	; 4
    36f4:	2c 91       	ld	r18, X
    36f6:	82 17       	cp	r24, r18
    36f8:	08 f0       	brcs	.+2      	; 0x36fc <_ZN15OrangutanSerial15serial_rx_checkEh+0x72>
    36fa:	49 c0       	rjmp	.+146    	; 0x378e <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    36fc:	66 23       	and	r22, r22
    36fe:	19 f0       	breq	.+6      	; 0x3706 <_ZN15OrangutanSerial15serial_rx_checkEh+0x7c>
    3700:	e8 ec       	ldi	r30, 0xC8	; 200
    3702:	f0 e0       	ldi	r31, 0x00	; 0
    3704:	02 c0       	rjmp	.+4      	; 0x370a <_ZN15OrangutanSerial15serial_rx_checkEh+0x80>
    3706:	e0 ec       	ldi	r30, 0xC0	; 192
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	80 81       	ld	r24, Z
    370c:	87 ff       	sbrs	r24, 7
    370e:	3f c0       	rjmp	.+126    	; 0x378e <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3710:	66 23       	and	r22, r22
    3712:	19 f4       	brne	.+6      	; 0x371a <_ZN15OrangutanSerial15serial_rx_checkEh+0x90>
    3714:	e6 ec       	ldi	r30, 0xC6	; 198
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	02 c0       	rjmp	.+4      	; 0x371e <_ZN15OrangutanSerial15serial_rx_checkEh+0x94>
    371a:	ee ec       	ldi	r30, 0xCE	; 206
    371c:	f0 e0       	ldi	r31, 0x00	; 0
    371e:	90 81       	ld	r25, Z
    3720:	fa 01       	movw	r30, r20
    3722:	ee 0f       	add	r30, r30
    3724:	ff 1f       	adc	r31, r31
    3726:	ee 0f       	add	r30, r30
    3728:	ff 1f       	adc	r31, r31
    372a:	e4 0f       	add	r30, r20
    372c:	f5 1f       	adc	r31, r21
    372e:	ee 0f       	add	r30, r30
    3730:	ff 1f       	adc	r31, r31
    3732:	ec 53       	subi	r30, 0x3C	; 60
    3734:	fc 4f       	sbci	r31, 0xFC	; 252
    3736:	80 81       	ld	r24, Z
    3738:	82 17       	cp	r24, r18
    373a:	38 f4       	brcc	.+14     	; 0x374a <_ZN15OrangutanSerial15serial_rx_checkEh+0xc0>
    373c:	80 81       	ld	r24, Z
    373e:	c8 0f       	add	r28, r24
    3740:	d1 1d       	adc	r29, r1
    3742:	98 83       	st	Y, r25
    3744:	80 81       	ld	r24, Z
    3746:	8f 5f       	subi	r24, 0xFF	; 255
    3748:	80 83       	st	Z, r24
    374a:	fa 01       	movw	r30, r20
    374c:	ee 0f       	add	r30, r30
    374e:	ff 1f       	adc	r31, r31
    3750:	ee 0f       	add	r30, r30
    3752:	ff 1f       	adc	r31, r31
    3754:	e4 0f       	add	r30, r20
    3756:	f5 1f       	adc	r31, r21
    3758:	ee 0f       	add	r30, r30
    375a:	ff 1f       	adc	r31, r31
    375c:	ec 53       	subi	r30, 0x3C	; 60
    375e:	fc 4f       	sbci	r31, 0xFC	; 252
    3760:	80 81       	ld	r24, Z
    3762:	da 01       	movw	r26, r20
    3764:	aa 0f       	add	r26, r26
    3766:	bb 1f       	adc	r27, r27
    3768:	9a 01       	movw	r18, r20
    376a:	13 e0       	ldi	r17, 0x03	; 3
    376c:	22 0f       	add	r18, r18
    376e:	33 1f       	adc	r19, r19
    3770:	1a 95       	dec	r17
    3772:	e1 f7       	brne	.-8      	; 0x376c <_ZN15OrangutanSerial15serial_rx_checkEh+0xe2>
    3774:	a2 0f       	add	r26, r18
    3776:	b3 1f       	adc	r27, r19
    3778:	ae 53       	subi	r26, 0x3E	; 62
    377a:	bc 4f       	sbci	r27, 0xFC	; 252
    377c:	14 96       	adiw	r26, 0x04	; 4
    377e:	9c 91       	ld	r25, X
    3780:	14 97       	sbiw	r26, 0x04	; 4
    3782:	89 17       	cp	r24, r25
    3784:	21 f4       	brne	.+8      	; 0x378e <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3786:	15 96       	adiw	r26, 0x05	; 5
    3788:	8c 91       	ld	r24, X
    378a:	81 11       	cpse	r24, r1
    378c:	10 82       	st	Z, r1
    378e:	fa 01       	movw	r30, r20
    3790:	a3 e0       	ldi	r26, 0x03	; 3
    3792:	ee 0f       	add	r30, r30
    3794:	ff 1f       	adc	r31, r31
    3796:	aa 95       	dec	r26
    3798:	e1 f7       	brne	.-8      	; 0x3792 <_ZN15OrangutanSerial15serial_rx_checkEh+0x108>
    379a:	44 0f       	add	r20, r20
    379c:	55 1f       	adc	r21, r21
    379e:	e4 0f       	add	r30, r20
    37a0:	f5 1f       	adc	r31, r21
    37a2:	ee 53       	subi	r30, 0x3E	; 62
    37a4:	fc 4f       	sbci	r31, 0xFC	; 252
    37a6:	80 81       	ld	r24, Z
    37a8:	88 23       	and	r24, r24
    37aa:	09 f0       	breq	.+2      	; 0x37ae <_ZN15OrangutanSerial15serial_rx_checkEh+0x124>
    37ac:	59 c0       	rjmp	.+178    	; 0x3860 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    37ae:	66 23       	and	r22, r22
    37b0:	19 f0       	breq	.+6      	; 0x37b8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x12e>
    37b2:	e9 ec       	ldi	r30, 0xC9	; 201
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	02 c0       	rjmp	.+4      	; 0x37bc <_ZN15OrangutanSerial15serial_rx_checkEh+0x132>
    37b8:	e1 ec       	ldi	r30, 0xC1	; 193
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	80 81       	ld	r24, Z
    37be:	80 68       	ori	r24, 0x80	; 128
    37c0:	80 83       	st	Z, r24
    37c2:	4e c0       	rjmp	.+156    	; 0x3860 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    37c4:	80 91 db 03 	lds	r24, 0x03DB
    37c8:	88 23       	and	r24, r24
    37ca:	19 f0       	breq	.+6      	; 0x37d2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    37cc:	10 92 d8 03 	sts	0x03D8, r1
    37d0:	47 c0       	rjmp	.+142    	; 0x3860 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    37d2:	80 91 de 03 	lds	r24, 0x03DE
    37d6:	90 91 df 03 	lds	r25, 0x03DF
    37da:	89 2b       	or	r24, r25
    37dc:	09 f4       	brne	.+2      	; 0x37e0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x156>
    37de:	40 c0       	rjmp	.+128    	; 0x3860 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    37e0:	90 91 d8 03 	lds	r25, 0x03D8
    37e4:	80 91 da 03 	lds	r24, 0x03DA
    37e8:	98 17       	cp	r25, r24
    37ea:	d0 f5       	brcc	.+116    	; 0x3860 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    37ec:	80 91 fb 03 	lds	r24, 0x03FB
    37f0:	88 23       	and	r24, r24
    37f2:	a9 f4       	brne	.+42     	; 0x381e <_ZN15OrangutanSerial15serial_rx_checkEh+0x194>
    37f4:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_ZN12OrangutanSVP15serialReadStartEv>
    37f8:	80 93 fb 03 	sts	0x03FB, r24
    37fc:	10 e0       	ldi	r17, 0x00	; 0
    37fe:	0b c0       	rjmp	.+22     	; 0x3816 <_ZN15OrangutanSerial15serial_rx_checkEh+0x18c>
    3800:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <_ZN12OrangutanSVP11getNextByteEv>
    3804:	e0 2f       	mov	r30, r16
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	31 97       	sbiw	r30, 0x01	; 1
    380a:	e1 1b       	sub	r30, r17
    380c:	f1 09       	sbc	r31, r1
    380e:	e4 50       	subi	r30, 0x04	; 4
    3810:	fc 4f       	sbci	r31, 0xFC	; 252
    3812:	80 83       	st	Z, r24
    3814:	1f 5f       	subi	r17, 0xFF	; 255
    3816:	00 91 fb 03 	lds	r16, 0x03FB
    381a:	10 17       	cp	r17, r16
    381c:	88 f3       	brcs	.-30     	; 0x3800 <_ZN15OrangutanSerial15serial_rx_checkEh+0x176>
    381e:	e0 91 fb 03 	lds	r30, 0x03FB
    3822:	ee 23       	and	r30, r30
    3824:	e9 f0       	breq	.+58     	; 0x3860 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3826:	80 91 d8 03 	lds	r24, 0x03D8
    382a:	a0 91 de 03 	lds	r26, 0x03DE
    382e:	b0 91 df 03 	lds	r27, 0x03DF
    3832:	a8 0f       	add	r26, r24
    3834:	b1 1d       	adc	r27, r1
    3836:	e1 50       	subi	r30, 0x01	; 1
    3838:	e0 93 fb 03 	sts	0x03FB, r30
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	e4 50       	subi	r30, 0x04	; 4
    3840:	fc 4f       	sbci	r31, 0xFC	; 252
    3842:	80 81       	ld	r24, Z
    3844:	8c 93       	st	X, r24
    3846:	80 91 d8 03 	lds	r24, 0x03D8
    384a:	8f 5f       	subi	r24, 0xFF	; 255
    384c:	80 93 d8 03 	sts	0x03D8, r24
    3850:	90 91 d8 03 	lds	r25, 0x03D8
    3854:	80 91 da 03 	lds	r24, 0x03DA
    3858:	98 17       	cp	r25, r24
    385a:	09 f0       	breq	.+2      	; 0x385e <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d4>
    385c:	ba cf       	rjmp	.-140    	; 0x37d2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    385e:	b2 cf       	rjmp	.-156    	; 0x37c4 <_ZN15OrangutanSerial15serial_rx_checkEh+0x13a>
    3860:	df 91       	pop	r29
    3862:	cf 91       	pop	r28
    3864:	1f 91       	pop	r17
    3866:	0f 91       	pop	r16
    3868:	08 95       	ret

0000386a <_ZN15OrangutanSerial5checkEv>:
    386a:	80 e0       	ldi	r24, 0x00	; 0
    386c:	0e 94 17 1b 	call	0x362e	; 0x362e <_ZN15OrangutanSerial15serial_tx_checkEh>
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	0e 94 17 1b 	call	0x362e	; 0x362e <_ZN15OrangutanSerial15serial_tx_checkEh>
    3876:	82 e0       	ldi	r24, 0x02	; 2
    3878:	0e 94 17 1b 	call	0x362e	; 0x362e <_ZN15OrangutanSerial15serial_tx_checkEh>
    387c:	80 e0       	ldi	r24, 0x00	; 0
    387e:	0e 94 45 1b 	call	0x368a	; 0x368a <_ZN15OrangutanSerial15serial_rx_checkEh>
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	0e 94 45 1b 	call	0x368a	; 0x368a <_ZN15OrangutanSerial15serial_rx_checkEh>
    3888:	82 e0       	ldi	r24, 0x02	; 2
    388a:	0e 94 45 1b 	call	0x368a	; 0x368a <_ZN15OrangutanSerial15serial_rx_checkEh>
    388e:	08 95       	ret

00003890 <_ZN15OrangutanSerial12sendBlockingEhPch>:
    3890:	1f 93       	push	r17
    3892:	18 2f       	mov	r17, r24
    3894:	0e 94 47 1a 	call	0x348e	; 0x348e <_ZN15OrangutanSerial4sendEhPch>
    3898:	02 c0       	rjmp	.+4      	; 0x389e <_ZN15OrangutanSerial12sendBlockingEhPch+0xe>
    389a:	0e 94 35 1c 	call	0x386a	; 0x386a <_ZN15OrangutanSerial5checkEv>
    389e:	81 2f       	mov	r24, r17
    38a0:	90 e0       	ldi	r25, 0x00	; 0
    38a2:	fc 01       	movw	r30, r24
    38a4:	73 e0       	ldi	r23, 0x03	; 3
    38a6:	ee 0f       	add	r30, r30
    38a8:	ff 1f       	adc	r31, r31
    38aa:	7a 95       	dec	r23
    38ac:	e1 f7       	brne	.-8      	; 0x38a6 <_ZN15OrangutanSerial12sendBlockingEhPch+0x16>
    38ae:	88 0f       	add	r24, r24
    38b0:	99 1f       	adc	r25, r25
    38b2:	e8 0f       	add	r30, r24
    38b4:	f9 1f       	adc	r31, r25
    38b6:	ee 53       	subi	r30, 0x3E	; 62
    38b8:	fc 4f       	sbci	r31, 0xFC	; 252
    38ba:	21 81       	ldd	r18, Z+1	; 0x01
    38bc:	81 2f       	mov	r24, r17
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	fc 01       	movw	r30, r24
    38c2:	53 e0       	ldi	r21, 0x03	; 3
    38c4:	ee 0f       	add	r30, r30
    38c6:	ff 1f       	adc	r31, r31
    38c8:	5a 95       	dec	r21
    38ca:	e1 f7       	brne	.-8      	; 0x38c4 <_ZN15OrangutanSerial12sendBlockingEhPch+0x34>
    38cc:	88 0f       	add	r24, r24
    38ce:	99 1f       	adc	r25, r25
    38d0:	e8 0f       	add	r30, r24
    38d2:	f9 1f       	adc	r31, r25
    38d4:	ee 53       	subi	r30, 0x3E	; 62
    38d6:	fc 4f       	sbci	r31, 0xFC	; 252
    38d8:	83 81       	ldd	r24, Z+3	; 0x03
    38da:	28 17       	cp	r18, r24
    38dc:	f1 f6       	brne	.-68     	; 0x389a <_ZN15OrangutanSerial12sendBlockingEhPch+0xa>
    38de:	1f 91       	pop	r17
    38e0:	08 95       	ret

000038e2 <serial_send_blocking>:
    38e2:	0e 94 48 1c 	call	0x3890	; 0x3890 <_ZN15OrangutanSerial12sendBlockingEhPch>
    38e6:	08 95       	ret

000038e8 <_ZN15OrangutanSerial15receiveBlockingEhPchj>:
    38e8:	a0 e0       	ldi	r26, 0x00	; 0
    38ea:	b0 e0       	ldi	r27, 0x00	; 0
    38ec:	ea e7       	ldi	r30, 0x7A	; 122
    38ee:	fc e1       	ldi	r31, 0x1C	; 28
    38f0:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__prologue_saves__+0xc>
    38f4:	08 2f       	mov	r16, r24
    38f6:	79 01       	movw	r14, r18
    38f8:	0e 94 67 18 	call	0x30ce	; 0x30ce <_ZN15OrangutanSerial7receiveEhPch>
    38fc:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <get_ms>
    3900:	4b 01       	movw	r8, r22
    3902:	5c 01       	movw	r10, r24
    3904:	10 e0       	ldi	r17, 0x00	; 0
    3906:	e8 01       	movw	r28, r16
    3908:	cc 0f       	add	r28, r28
    390a:	dd 1f       	adc	r29, r29
    390c:	cc 0f       	add	r28, r28
    390e:	dd 1f       	adc	r29, r29
    3910:	c0 0f       	add	r28, r16
    3912:	d1 1f       	adc	r29, r17
    3914:	cc 0f       	add	r28, r28
    3916:	dd 1f       	adc	r29, r29
    3918:	cc 53       	subi	r28, 0x3C	; 60
    391a:	dc 4f       	sbci	r29, 0xFC	; 252
    391c:	68 01       	movw	r12, r16
    391e:	f3 e0       	ldi	r31, 0x03	; 3
    3920:	cc 0c       	add	r12, r12
    3922:	dd 1c       	adc	r13, r13
    3924:	fa 95       	dec	r31
    3926:	e1 f7       	brne	.-8      	; 0x3920 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x38>
    3928:	00 0f       	add	r16, r16
    392a:	11 1f       	adc	r17, r17
    392c:	c0 0e       	add	r12, r16
    392e:	d1 1e       	adc	r13, r17
    3930:	86 ec       	ldi	r24, 0xC6	; 198
    3932:	93 e0       	ldi	r25, 0x03	; 3
    3934:	c8 0e       	add	r12, r24
    3936:	d9 1e       	adc	r13, r25
    3938:	00 e0       	ldi	r16, 0x00	; 0
    393a:	10 e0       	ldi	r17, 0x00	; 0
    393c:	0e 94 35 1c 	call	0x386a	; 0x386a <_ZN15OrangutanSerial5checkEv>
    3940:	98 81       	ld	r25, Y
    3942:	f6 01       	movw	r30, r12
    3944:	80 81       	ld	r24, Z
    3946:	98 17       	cp	r25, r24
    3948:	11 f4       	brne	.+4      	; 0x394e <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x66>
    394a:	80 e0       	ldi	r24, 0x00	; 0
    394c:	0c c0       	rjmp	.+24     	; 0x3966 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x7e>
    394e:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <get_ms>
    3952:	68 19       	sub	r22, r8
    3954:	79 09       	sbc	r23, r9
    3956:	8a 09       	sbc	r24, r10
    3958:	9b 09       	sbc	r25, r11
    395a:	6e 15       	cp	r22, r14
    395c:	7f 05       	cpc	r23, r15
    395e:	80 07       	cpc	r24, r16
    3960:	91 07       	cpc	r25, r17
    3962:	60 f3       	brcs	.-40     	; 0x393c <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x54>
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    396a:	ec e0       	ldi	r30, 0x0C	; 12
    396c:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <__epilogue_restores__+0xc>

00003970 <serial_receive_blocking>:
    3970:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN15OrangutanSerial15receiveBlockingEhPchj>
    3974:	08 95       	ret

00003976 <serial_check>:
    3976:	0e 94 35 1c 	call	0x386a	; 0x386a <_ZN15OrangutanSerial5checkEv>
    397a:	08 95       	ret

0000397c <__vector_11>:
    397c:	2f 92       	push	r2
    397e:	8f 93       	push	r24
    3980:	9f 93       	push	r25
    3982:	2f b6       	in	r2, 0x3f	; 63
    3984:	80 91 05 04 	lds	r24, 0x0405
    3988:	90 91 06 04 	lds	r25, 0x0406
    398c:	01 96       	adiw	r24, 0x01	; 1
    398e:	80 93 05 04 	sts	0x0405, r24
    3992:	90 93 06 04 	sts	0x0406, r25
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	80 91 07 04 	lds	r24, 0x0407
    399c:	89 1f       	adc	r24, r25
    399e:	80 93 07 04 	sts	0x0407, r24
    39a2:	90 91 0d 04 	lds	r25, 0x040D
    39a6:	9c 5f       	subi	r25, 0xFC	; 252
    39a8:	90 93 0d 04 	sts	0x040D, r25
    39ac:	80 91 0c 04 	lds	r24, 0x040C
    39b0:	80 51       	subi	r24, 0x10	; 16
    39b2:	97 42       	sbci	r25, 0x27	; 39
    39b4:	c0 f0       	brcs	.+48     	; 0x39e6 <end>
    39b6:	90 93 0d 04 	sts	0x040D, r25
    39ba:	80 93 0c 04 	sts	0x040C, r24
    39be:	80 91 08 04 	lds	r24, 0x0408
    39c2:	90 91 09 04 	lds	r25, 0x0409
    39c6:	01 96       	adiw	r24, 0x01	; 1
    39c8:	80 93 08 04 	sts	0x0408, r24
    39cc:	90 93 09 04 	sts	0x0409, r25
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	80 91 0a 04 	lds	r24, 0x040A
    39d6:	89 1f       	adc	r24, r25
    39d8:	80 93 0a 04 	sts	0x040A, r24
    39dc:	80 91 0b 04 	lds	r24, 0x040B
    39e0:	89 1f       	adc	r24, r25
    39e2:	80 93 0b 04 	sts	0x040B, r24

000039e6 <end>:
    39e6:	2f be       	out	0x3f, r2	; 63
    39e8:	9f 91       	pop	r25
    39ea:	8f 91       	pop	r24
    39ec:	2f 90       	pop	r2
    39ee:	18 95       	reti

000039f0 <ticks_to_microseconds>:
    39f0:	6f 5f       	subi	r22, 0xFF	; 255
    39f2:	7f 4f       	sbci	r23, 0xFF	; 255
    39f4:	8f 4f       	sbci	r24, 0xFF	; 255
    39f6:	9f 4f       	sbci	r25, 0xFF	; 255
    39f8:	66 0f       	add	r22, r22
    39fa:	77 1f       	adc	r23, r23
    39fc:	88 1f       	adc	r24, r24
    39fe:	99 1f       	adc	r25, r25
    3a00:	25 e0       	ldi	r18, 0x05	; 5
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	40 e0       	ldi	r20, 0x00	; 0
    3a06:	50 e0       	ldi	r21, 0x00	; 0
    3a08:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__udivmodsi4>
    3a0c:	ca 01       	movw	r24, r20
    3a0e:	b9 01       	movw	r22, r18
    3a10:	08 95       	ret

00003a12 <delay_ms>:
    3a12:	28 ee       	ldi	r18, 0xE8	; 232
    3a14:	33 e0       	ldi	r19, 0x03	; 3
    3a16:	09 c0       	rjmp	.+18     	; 0x3a2a <delay_ms+0x18>
    3a18:	f9 01       	movw	r30, r18
    3a1a:	6f 93       	push	r22
    3a1c:	64 e0       	ldi	r22, 0x04	; 4
    3a1e:	6a 95       	dec	r22
    3a20:	f1 f7       	brne	.-4      	; 0x3a1e <delay_ms+0xc>
    3a22:	6f 91       	pop	r22
    3a24:	31 97       	sbiw	r30, 0x01	; 1
    3a26:	c9 f7       	brne	.-14     	; 0x3a1a <delay_ms+0x8>
    3a28:	01 97       	sbiw	r24, 0x01	; 1
    3a2a:	00 97       	sbiw	r24, 0x00	; 0
    3a2c:	a9 f7       	brne	.-22     	; 0x3a18 <delay_ms+0x6>
    3a2e:	08 95       	ret

00003a30 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    3a30:	6f 5f       	subi	r22, 0xFF	; 255
    3a32:	7f 4f       	sbci	r23, 0xFF	; 255
    3a34:	8f 4f       	sbci	r24, 0xFF	; 255
    3a36:	9f 4f       	sbci	r25, 0xFF	; 255
    3a38:	66 0f       	add	r22, r22
    3a3a:	77 1f       	adc	r23, r23
    3a3c:	88 1f       	adc	r24, r24
    3a3e:	99 1f       	adc	r25, r25
    3a40:	25 e0       	ldi	r18, 0x05	; 5
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	40 e0       	ldi	r20, 0x00	; 0
    3a46:	50 e0       	ldi	r21, 0x00	; 0
    3a48:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__udivmodsi4>
    3a4c:	ca 01       	movw	r24, r20
    3a4e:	b9 01       	movw	r22, r18
    3a50:	08 95       	ret

00003a52 <_ZN13OrangutanTime17delayMillisecondsEj>:
    3a52:	28 ee       	ldi	r18, 0xE8	; 232
    3a54:	33 e0       	ldi	r19, 0x03	; 3
    3a56:	09 c0       	rjmp	.+18     	; 0x3a6a <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3a58:	f9 01       	movw	r30, r18
    3a5a:	6f 93       	push	r22
    3a5c:	64 e0       	ldi	r22, 0x04	; 4
    3a5e:	6a 95       	dec	r22
    3a60:	f1 f7       	brne	.-4      	; 0x3a5e <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3a62:	6f 91       	pop	r22
    3a64:	31 97       	sbiw	r30, 0x01	; 1
    3a66:	c9 f7       	brne	.-14     	; 0x3a5a <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	00 97       	sbiw	r24, 0x00	; 0
    3a6c:	a9 f7       	brne	.-22     	; 0x3a58 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    3a6e:	08 95       	ret

00003a70 <_ZN13OrangutanTime5init2Ev>:
    3a70:	a0 e7       	ldi	r26, 0x70	; 112
    3a72:	b0 e0       	ldi	r27, 0x00	; 0
    3a74:	8c 91       	ld	r24, X
    3a76:	8e 7f       	andi	r24, 0xFE	; 254
    3a78:	8c 93       	st	X, r24
    3a7a:	e0 eb       	ldi	r30, 0xB0	; 176
    3a7c:	f0 e0       	ldi	r31, 0x00	; 0
    3a7e:	80 81       	ld	r24, Z
    3a80:	83 60       	ori	r24, 0x03	; 3
    3a82:	80 83       	st	Z, r24
    3a84:	e1 eb       	ldi	r30, 0xB1	; 177
    3a86:	f0 e0       	ldi	r31, 0x00	; 0
    3a88:	80 81       	ld	r24, Z
    3a8a:	80 7f       	andi	r24, 0xF0	; 240
    3a8c:	80 83       	st	Z, r24
    3a8e:	80 81       	ld	r24, Z
    3a90:	82 60       	ori	r24, 0x02	; 2
    3a92:	80 83       	st	Z, r24
    3a94:	b8 9a       	sbi	0x17, 0	; 23
    3a96:	8c 91       	ld	r24, X
    3a98:	81 60       	ori	r24, 0x01	; 1
    3a9a:	8c 93       	st	X, r24
    3a9c:	78 94       	sei
    3a9e:	08 95       	ret

00003aa0 <_ZN13OrangutanTime4initEv>:
    3aa0:	80 91 0e 04 	lds	r24, 0x040E
    3aa4:	88 23       	and	r24, r24
    3aa6:	29 f4       	brne	.+10     	; 0x3ab2 <_ZN13OrangutanTime4initEv+0x12>
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	80 93 0e 04 	sts	0x040E, r24
    3aae:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <_ZN13OrangutanTime5init2Ev>
    3ab2:	08 95       	ret

00003ab4 <_ZN13OrangutanTime2msEv>:
    3ab4:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN13OrangutanTime4initEv>
    3ab8:	e0 e7       	ldi	r30, 0x70	; 112
    3aba:	f0 e0       	ldi	r31, 0x00	; 0
    3abc:	80 81       	ld	r24, Z
    3abe:	8e 7f       	andi	r24, 0xFE	; 254
    3ac0:	80 83       	st	Z, r24
    3ac2:	20 91 08 04 	lds	r18, 0x0408
    3ac6:	30 91 09 04 	lds	r19, 0x0409
    3aca:	40 91 0a 04 	lds	r20, 0x040A
    3ace:	50 91 0b 04 	lds	r21, 0x040B
    3ad2:	80 81       	ld	r24, Z
    3ad4:	81 60       	ori	r24, 0x01	; 1
    3ad6:	80 83       	st	Z, r24
    3ad8:	b9 01       	movw	r22, r18
    3ada:	ca 01       	movw	r24, r20
    3adc:	08 95       	ret

00003ade <get_ms>:
    3ade:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime2msEv>
    3ae2:	08 95       	ret

00003ae4 <_ZN13OrangutanTime5ticksEv>:
    3ae4:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN13OrangutanTime4initEv>
    3ae8:	80 91 70 00 	lds	r24, 0x0070
    3aec:	8e 7f       	andi	r24, 0xFE	; 254
    3aee:	80 93 70 00 	sts	0x0070, r24
    3af2:	60 91 b2 00 	lds	r22, 0x00B2
    3af6:	80 91 04 04 	lds	r24, 0x0404
    3afa:	90 91 05 04 	lds	r25, 0x0405
    3afe:	a0 91 06 04 	lds	r26, 0x0406
    3b02:	b0 91 07 04 	lds	r27, 0x0407
    3b06:	b8 99       	sbic	0x17, 0	; 23
    3b08:	05 c0       	rjmp	.+10     	; 0x3b14 <_ZN13OrangutanTime5ticksEv+0x30>
    3b0a:	26 2f       	mov	r18, r22
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	40 e0       	ldi	r20, 0x00	; 0
    3b10:	50 e0       	ldi	r21, 0x00	; 0
    3b12:	11 c0       	rjmp	.+34     	; 0x3b36 <_ZN13OrangutanTime5ticksEv+0x52>
    3b14:	80 91 b2 00 	lds	r24, 0x00B2
    3b18:	20 91 04 04 	lds	r18, 0x0404
    3b1c:	30 91 05 04 	lds	r19, 0x0405
    3b20:	40 91 06 04 	lds	r20, 0x0406
    3b24:	50 91 07 04 	lds	r21, 0x0407
    3b28:	20 50       	subi	r18, 0x00	; 0
    3b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b2c:	4f 4f       	sbci	r20, 0xFF	; 255
    3b2e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	a0 e0       	ldi	r26, 0x00	; 0
    3b34:	b0 e0       	ldi	r27, 0x00	; 0
    3b36:	28 2b       	or	r18, r24
    3b38:	39 2b       	or	r19, r25
    3b3a:	4a 2b       	or	r20, r26
    3b3c:	5b 2b       	or	r21, r27
    3b3e:	80 91 70 00 	lds	r24, 0x0070
    3b42:	81 60       	ori	r24, 0x01	; 1
    3b44:	80 93 70 00 	sts	0x0070, r24
    3b48:	b9 01       	movw	r22, r18
    3b4a:	ca 01       	movw	r24, r20
    3b4c:	08 95       	ret

00003b4e <get_ticks>:
    3b4e:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <_ZN13OrangutanTime5ticksEv>
    3b52:	08 95       	ret

00003b54 <_ZN13OrangutanTime5resetEv>:
    3b54:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN13OrangutanTime4initEv>
    3b58:	e0 e7       	ldi	r30, 0x70	; 112
    3b5a:	f0 e0       	ldi	r31, 0x00	; 0
    3b5c:	80 81       	ld	r24, Z
    3b5e:	8e 7f       	andi	r24, 0xFE	; 254
    3b60:	80 83       	st	Z, r24
    3b62:	10 92 08 04 	sts	0x0408, r1
    3b66:	10 92 09 04 	sts	0x0409, r1
    3b6a:	10 92 0a 04 	sts	0x040A, r1
    3b6e:	10 92 0b 04 	sts	0x040B, r1
    3b72:	10 92 0d 04 	sts	0x040D, r1
    3b76:	10 92 0c 04 	sts	0x040C, r1
    3b7a:	80 81       	ld	r24, Z
    3b7c:	81 60       	ori	r24, 0x01	; 1
    3b7e:	80 83       	st	Z, r24
    3b80:	08 95       	ret

00003b82 <time_reset>:
    3b82:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <_ZN13OrangutanTime5resetEv>
    3b86:	08 95       	ret

00003b88 <_ZN12OrangutanSVP7setModeEh>:
    3b88:	98 2f       	mov	r25, r24
    3b8a:	80 91 25 04 	lds	r24, 0x0425
    3b8e:	89 17       	cp	r24, r25
    3b90:	39 f0       	breq	.+14     	; 0x3ba0 <_ZN12OrangutanSVP7setModeEh+0x18>
    3b92:	90 93 25 04 	sts	0x0425, r25
    3b96:	89 2f       	mov	r24, r25
    3b98:	80 6c       	ori	r24, 0xC0	; 192
    3b9a:	65 e0       	ldi	r22, 0x05	; 5
    3b9c:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3ba0:	08 95       	ret

00003ba2 <svp_set_mode>:
    3ba2:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <_ZN12OrangutanSVP7setModeEh>
    3ba6:	08 95       	ret

00003ba8 <_ZN12OrangutanSVP17serialSendIfReadyEc>:
    3ba8:	1f 93       	push	r17
    3baa:	18 2f       	mov	r17, r24
    3bac:	88 1f       	adc	r24, r24
    3bae:	88 27       	eor	r24, r24
    3bb0:	88 1f       	adc	r24, r24
    3bb2:	8c 57       	subi	r24, 0x7C	; 124
    3bb4:	65 e0       	ldi	r22, 0x05	; 5
    3bb6:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3bba:	81 2f       	mov	r24, r17
    3bbc:	8f 77       	andi	r24, 0x7F	; 127
    3bbe:	65 e0       	ldi	r22, 0x05	; 5
    3bc0:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3bc4:	1f 91       	pop	r17
    3bc6:	08 95       	ret

00003bc8 <_ZN12OrangutanSVP11getNextByteEv>:
    3bc8:	8f ef       	ldi	r24, 0xFF	; 255
    3bca:	64 e0       	ldi	r22, 0x04	; 4
    3bcc:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3bd0:	08 95       	ret

00003bd2 <_ZL23updateVariablesIfNeededv>:
    3bd2:	cf 93       	push	r28
    3bd4:	df 93       	push	r29
    3bd6:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime2msEv>
    3bda:	20 91 e4 03 	lds	r18, 0x03E4
    3bde:	30 91 e5 03 	lds	r19, 0x03E5
    3be2:	40 91 e6 03 	lds	r20, 0x03E6
    3be6:	50 91 e7 03 	lds	r21, 0x03E7
    3bea:	62 17       	cp	r22, r18
    3bec:	73 07       	cpc	r23, r19
    3bee:	84 07       	cpc	r24, r20
    3bf0:	95 07       	cpc	r25, r21
    3bf2:	b9 f0       	breq	.+46     	; 0x3c22 <_ZL23updateVariablesIfNeededv+0x50>
    3bf4:	81 e8       	ldi	r24, 0x81	; 129
    3bf6:	67 e0       	ldi	r22, 0x07	; 7
    3bf8:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3bfc:	c8 e1       	ldi	r28, 0x18	; 24
    3bfe:	d4 e0       	ldi	r29, 0x04	; 4
    3c00:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <_ZN12OrangutanSVP11getNextByteEv>
    3c04:	89 93       	st	Y+, r24
    3c06:	84 e0       	ldi	r24, 0x04	; 4
    3c08:	c5 32       	cpi	r28, 0x25	; 37
    3c0a:	d8 07       	cpc	r29, r24
    3c0c:	c9 f7       	brne	.-14     	; 0x3c00 <_ZL23updateVariablesIfNeededv+0x2e>
    3c0e:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime2msEv>
    3c12:	60 93 e4 03 	sts	0x03E4, r22
    3c16:	70 93 e5 03 	sts	0x03E5, r23
    3c1a:	80 93 e6 03 	sts	0x03E6, r24
    3c1e:	90 93 e7 03 	sts	0x03E7, r25
    3c22:	df 91       	pop	r29
    3c24:	cf 91       	pop	r28
    3c26:	08 95       	ret

00003c28 <_ZN12OrangutanSVP9getStatusEv>:
    3c28:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <_ZL23updateVariablesIfNeededv>
    3c2c:	80 91 18 04 	lds	r24, 0x0418
    3c30:	08 95       	ret

00003c32 <svp_get_status>:
    3c32:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <_ZN12OrangutanSVP9getStatusEv>
    3c36:	08 95       	ret

00003c38 <_ZN12OrangutanSVP21getChannelDMillivoltsEv>:
    3c38:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <_ZL23updateVariablesIfNeededv>
    3c3c:	80 91 1f 04 	lds	r24, 0x041F
    3c40:	90 91 20 04 	lds	r25, 0x0420
    3c44:	08 95       	ret

00003c46 <_ZN12OrangutanSVP21getChannelCMillivoltsEv>:
    3c46:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <_ZL23updateVariablesIfNeededv>
    3c4a:	80 91 1d 04 	lds	r24, 0x041D
    3c4e:	90 91 1e 04 	lds	r25, 0x041E
    3c52:	08 95       	ret

00003c54 <_ZN12OrangutanSVP21getChannelBMillivoltsEv>:
    3c54:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <_ZL23updateVariablesIfNeededv>
    3c58:	80 91 1b 04 	lds	r24, 0x041B
    3c5c:	90 91 1c 04 	lds	r25, 0x041C
    3c60:	08 95       	ret

00003c62 <_ZN12OrangutanSVP21getChannelAMillivoltsEv>:
    3c62:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <_ZL23updateVariablesIfNeededv>
    3c66:	80 91 19 04 	lds	r24, 0x0419
    3c6a:	90 91 1a 04 	lds	r25, 0x041A
    3c6e:	08 95       	ret

00003c70 <_ZN12OrangutanSVP20getBatteryMillivoltsEv>:
    3c70:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <_ZL23updateVariablesIfNeededv>
    3c74:	80 91 23 04 	lds	r24, 0x0423
    3c78:	90 91 24 04 	lds	r25, 0x0424
    3c7c:	08 95       	ret

00003c7e <_ZN12OrangutanSVP20getTrimpotMillivoltsEv>:
    3c7e:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <_ZL23updateVariablesIfNeededv>
    3c82:	80 91 21 04 	lds	r24, 0x0421
    3c86:	90 91 22 04 	lds	r25, 0x0422
    3c8a:	08 95       	ret

00003c8c <_ZN12OrangutanSVP15serialReadStartEv>:
    3c8c:	83 e8       	ldi	r24, 0x83	; 131
    3c8e:	67 e0       	ldi	r22, 0x07	; 7
    3c90:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3c94:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <_ZN12OrangutanSVP11getNextByteEv>
    3c98:	08 95       	ret

00003c9a <_Z14updateEncodersv>:
    3c9a:	a5 e0       	ldi	r26, 0x05	; 5
    3c9c:	b0 e0       	ldi	r27, 0x00	; 0
    3c9e:	e3 e5       	ldi	r30, 0x53	; 83
    3ca0:	fe e1       	ldi	r31, 0x1E	; 30
    3ca2:	0c 94 c6 1f 	jmp	0x3f8c	; 0x3f8c <__prologue_saves__+0x1e>
    3ca6:	82 e8       	ldi	r24, 0x82	; 130
    3ca8:	66 e0       	ldi	r22, 0x06	; 6
    3caa:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3cae:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <_ZN12OrangutanSVP11getNextByteEv>
    3cb2:	80 93 13 04 	sts	0x0413, r24
    3cb6:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <_ZN12OrangutanSVP11getNextByteEv>
    3cba:	80 93 14 04 	sts	0x0414, r24
    3cbe:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <_ZN12OrangutanSVP11getNextByteEv>
    3cc2:	80 93 15 04 	sts	0x0415, r24
    3cc6:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <_ZN12OrangutanSVP11getNextByteEv>
    3cca:	80 93 16 04 	sts	0x0416, r24
    3cce:	10 91 17 04 	lds	r17, 0x0417
    3cd2:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <_ZN12OrangutanSVP11getNextByteEv>
    3cd6:	18 2b       	or	r17, r24
    3cd8:	10 93 17 04 	sts	0x0417, r17
    3cdc:	de 01       	movw	r26, r28
    3cde:	11 96       	adiw	r26, 0x01	; 1
    3ce0:	e3 e1       	ldi	r30, 0x13	; 19
    3ce2:	f4 e0       	ldi	r31, 0x04	; 4
    3ce4:	85 e0       	ldi	r24, 0x05	; 5
    3ce6:	01 90       	ld	r0, Z+
    3ce8:	0d 92       	st	X+, r0
    3cea:	81 50       	subi	r24, 0x01	; 1
    3cec:	e1 f7       	brne	.-8      	; 0x3ce6 <_Z14updateEncodersv+0x4c>
    3cee:	29 81       	ldd	r18, Y+1	; 0x01
    3cf0:	3a 81       	ldd	r19, Y+2	; 0x02
    3cf2:	4b 81       	ldd	r20, Y+3	; 0x03
    3cf4:	5c 81       	ldd	r21, Y+4	; 0x04
    3cf6:	6d 81       	ldd	r22, Y+5	; 0x05
    3cf8:	70 e0       	ldi	r23, 0x00	; 0
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	25 96       	adiw	r28, 0x05	; 5
    3cfe:	e3 e0       	ldi	r30, 0x03	; 3
    3d00:	0c 94 e2 1f 	jmp	0x3fc4	; 0x3fc4 <__epilogue_restores__+0x1e>

00003d04 <_ZL22updateEncodersIfNeededv>:
    3d04:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime2msEv>
    3d08:	20 91 e0 03 	lds	r18, 0x03E0
    3d0c:	30 91 e1 03 	lds	r19, 0x03E1
    3d10:	40 91 e2 03 	lds	r20, 0x03E2
    3d14:	50 91 e3 03 	lds	r21, 0x03E3
    3d18:	62 17       	cp	r22, r18
    3d1a:	73 07       	cpc	r23, r19
    3d1c:	84 07       	cpc	r24, r20
    3d1e:	95 07       	cpc	r25, r21
    3d20:	61 f0       	breq	.+24     	; 0x3d3a <_ZL22updateEncodersIfNeededv+0x36>
    3d22:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <_Z14updateEncodersv>
    3d26:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime2msEv>
    3d2a:	60 93 e0 03 	sts	0x03E0, r22
    3d2e:	70 93 e1 03 	sts	0x03E1, r23
    3d32:	80 93 e2 03 	sts	0x03E2, r24
    3d36:	90 93 e3 03 	sts	0x03E3, r25
    3d3a:	08 95       	ret

00003d3c <_ZN12OrangutanSVP12checkErrorCDEv>:
    3d3c:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <_ZL22updateEncodersIfNeededv>
    3d40:	80 91 17 04 	lds	r24, 0x0417
    3d44:	81 fd       	sbrc	r24, 1
    3d46:	02 c0       	rjmp	.+4      	; 0x3d4c <_ZN12OrangutanSVP12checkErrorCDEv+0x10>
    3d48:	80 e0       	ldi	r24, 0x00	; 0
    3d4a:	08 95       	ret
    3d4c:	8d 7f       	andi	r24, 0xFD	; 253
    3d4e:	80 93 17 04 	sts	0x0417, r24
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	08 95       	ret

00003d56 <svp_check_error_cd>:
    3d56:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <_ZN12OrangutanSVP12checkErrorCDEv>
    3d5a:	08 95       	ret

00003d5c <_ZN12OrangutanSVP12checkErrorABEv>:
    3d5c:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <_ZL22updateEncodersIfNeededv>
    3d60:	80 91 17 04 	lds	r24, 0x0417
    3d64:	80 fd       	sbrc	r24, 0
    3d66:	02 c0       	rjmp	.+4      	; 0x3d6c <_ZN12OrangutanSVP12checkErrorABEv+0x10>
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	08 95       	ret
    3d6c:	8e 7f       	andi	r24, 0xFE	; 254
    3d6e:	80 93 17 04 	sts	0x0417, r24
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	08 95       	ret

00003d76 <svp_check_error_ab>:
    3d76:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN12OrangutanSVP12checkErrorABEv>
    3d7a:	08 95       	ret

00003d7c <_ZN12OrangutanSVP11getCountsCDEv>:
    3d7c:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <_ZL22updateEncodersIfNeededv>
    3d80:	20 91 15 04 	lds	r18, 0x0415
    3d84:	30 91 16 04 	lds	r19, 0x0416
    3d88:	80 91 11 04 	lds	r24, 0x0411
    3d8c:	90 91 12 04 	lds	r25, 0x0412
    3d90:	28 1b       	sub	r18, r24
    3d92:	39 0b       	sbc	r19, r25
    3d94:	c9 01       	movw	r24, r18
    3d96:	08 95       	ret

00003d98 <_ZN12OrangutanSVP19getCountsAndResetCDEv>:
    3d98:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <_ZN12OrangutanSVP11getCountsCDEv>
    3d9c:	20 91 15 04 	lds	r18, 0x0415
    3da0:	30 91 16 04 	lds	r19, 0x0416
    3da4:	30 93 12 04 	sts	0x0412, r19
    3da8:	20 93 11 04 	sts	0x0411, r18
    3dac:	08 95       	ret

00003dae <svp_get_counts_and_reset_cd>:
    3dae:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <_ZN12OrangutanSVP19getCountsAndResetCDEv>
    3db2:	08 95       	ret

00003db4 <svp_get_counts_cd>:
    3db4:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <_ZN12OrangutanSVP11getCountsCDEv>
    3db8:	08 95       	ret

00003dba <_ZN12OrangutanSVP11getCountsABEv>:
    3dba:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <_ZL22updateEncodersIfNeededv>
    3dbe:	20 91 13 04 	lds	r18, 0x0413
    3dc2:	30 91 14 04 	lds	r19, 0x0414
    3dc6:	80 91 0f 04 	lds	r24, 0x040F
    3dca:	90 91 10 04 	lds	r25, 0x0410
    3dce:	28 1b       	sub	r18, r24
    3dd0:	39 0b       	sbc	r19, r25
    3dd2:	c9 01       	movw	r24, r18
    3dd4:	08 95       	ret

00003dd6 <_ZN12OrangutanSVP19getCountsAndResetABEv>:
    3dd6:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <_ZN12OrangutanSVP11getCountsABEv>
    3dda:	20 91 13 04 	lds	r18, 0x0413
    3dde:	30 91 14 04 	lds	r19, 0x0414
    3de2:	30 93 10 04 	sts	0x0410, r19
    3de6:	20 93 0f 04 	sts	0x040F, r18
    3dea:	08 95       	ret

00003dec <svp_get_counts_and_reset_ab>:
    3dec:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <_ZN12OrangutanSVP19getCountsAndResetABEv>
    3df0:	08 95       	ret

00003df2 <svp_get_counts_ab>:
    3df2:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <_ZN12OrangutanSVP11getCountsABEv>
    3df6:	08 95       	ret

00003df8 <_ZN12OrangutanSVP18getFirmwareVersionEv>:
    3df8:	80 e8       	ldi	r24, 0x80	; 128
    3dfa:	65 e0       	ldi	r22, 0x05	; 5
    3dfc:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3e00:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <_ZN12OrangutanSVP11getNextByteEv>
    3e04:	08 95       	ret

00003e06 <svp_get_firmware_version>:
    3e06:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <_ZN12OrangutanSVP18getFirmwareVersionEv>
    3e0a:	08 95       	ret

00003e0c <_ZN18OrangutanSPIMaster4initEhh>:
    3e0c:	98 2f       	mov	r25, r24
    3e0e:	24 99       	sbic	0x04, 4	; 4
    3e10:	0c c0       	rjmp	.+24     	; 0x3e2a <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    3e12:	2c 99       	sbic	0x05, 4	; 5
    3e14:	0a c0       	rjmp	.+20     	; 0x3e2a <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    3e16:	2c 9a       	sbi	0x05, 4	; 5
    3e18:	ee e1       	ldi	r30, 0x1E	; 30
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	6f 93       	push	r22
    3e1e:	64 e0       	ldi	r22, 0x04	; 4
    3e20:	6a 95       	dec	r22
    3e22:	f1 f7       	brne	.-4      	; 0x3e20 <_ZN18OrangutanSPIMaster4initEhh+0x14>
    3e24:	6f 91       	pop	r22
    3e26:	31 97       	sbiw	r30, 0x01	; 1
    3e28:	c9 f7       	brne	.-14     	; 0x3e1c <_ZN18OrangutanSPIMaster4initEhh+0x10>
    3e2a:	84 b1       	in	r24, 0x04	; 4
    3e2c:	80 6a       	ori	r24, 0xA0	; 160
    3e2e:	84 b9       	out	0x04, r24	; 4
    3e30:	26 98       	cbi	0x04, 6	; 4
    3e32:	89 2f       	mov	r24, r25
    3e34:	83 70       	andi	r24, 0x03	; 3
    3e36:	80 65       	ori	r24, 0x50	; 80
    3e38:	6c 7a       	andi	r22, 0xAC	; 172
    3e3a:	86 2b       	or	r24, r22
    3e3c:	8c bd       	out	0x2c, r24	; 44
    3e3e:	89 2f       	mov	r24, r25
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	96 95       	lsr	r25
    3e44:	87 95       	ror	r24
    3e46:	96 95       	lsr	r25
    3e48:	87 95       	ror	r24
    3e4a:	81 70       	andi	r24, 0x01	; 1
    3e4c:	8d bd       	out	0x2d, r24	; 45
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <_ZN13OrangutanTime17delayMillisecondsEj>
    3e56:	08 95       	ret

00003e58 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>:
    3e58:	0f 93       	push	r16
    3e5a:	1f 93       	push	r17
    3e5c:	08 2f       	mov	r16, r24
    3e5e:	16 2f       	mov	r17, r22
    3e60:	0c b4       	in	r0, 0x2c	; 44
    3e62:	06 fc       	sbrc	r0, 6
    3e64:	04 c0       	rjmp	.+8      	; 0x3e6e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x16>
    3e66:	80 e0       	ldi	r24, 0x00	; 0
    3e68:	64 e0       	ldi	r22, 0x04	; 4
    3e6a:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <_ZN18OrangutanSPIMaster4initEhh>
    3e6e:	0c b4       	in	r0, 0x2c	; 44
    3e70:	04 fc       	sbrc	r0, 4
    3e72:	03 c0       	rjmp	.+6      	; 0x3e7a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x22>
    3e74:	8c b5       	in	r24, 0x2c	; 44
    3e76:	80 61       	ori	r24, 0x10	; 16
    3e78:	8c bd       	out	0x2c, r24	; 44
    3e7a:	0e bd       	out	0x2e, r16	; 46
    3e7c:	05 c0       	rjmp	.+10     	; 0x3e88 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    3e7e:	0c b4       	in	r0, 0x2c	; 44
    3e80:	04 fc       	sbrc	r0, 4
    3e82:	02 c0       	rjmp	.+4      	; 0x3e88 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    3e84:	80 e0       	ldi	r24, 0x00	; 0
    3e86:	0f c0       	rjmp	.+30     	; 0x3ea6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4e>
    3e88:	0d b4       	in	r0, 0x2d	; 45
    3e8a:	07 fe       	sbrs	r0, 7
    3e8c:	f8 cf       	rjmp	.-16     	; 0x3e7e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x26>
    3e8e:	11 23       	and	r17, r17
    3e90:	49 f0       	breq	.+18     	; 0x3ea4 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4c>
    3e92:	81 2f       	mov	r24, r17
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	6f 93       	push	r22
    3e98:	64 e0       	ldi	r22, 0x04	; 4
    3e9a:	6a 95       	dec	r22
    3e9c:	f1 f7       	brne	.-4      	; 0x3e9a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x42>
    3e9e:	6f 91       	pop	r22
    3ea0:	01 97       	sbiw	r24, 0x01	; 1
    3ea2:	c9 f7       	brne	.-14     	; 0x3e96 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x3e>
    3ea4:	8e b5       	in	r24, 0x2e	; 46
    3ea6:	1f 91       	pop	r17
    3ea8:	0f 91       	pop	r16
    3eaa:	08 95       	ret

00003eac <_ZN18OrangutanSPIMaster8transmitEh>:
    3eac:	60 e0       	ldi	r22, 0x00	; 0
    3eae:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3eb2:	08 95       	ret

00003eb4 <spi_master_transmit>:
    3eb4:	0e 94 56 1f 	call	0x3eac	; 0x3eac <_ZN18OrangutanSPIMaster8transmitEh>
    3eb8:	08 95       	ret

00003eba <spi_master_transmit_and_delay>:
    3eba:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3ebe:	08 95       	ret

00003ec0 <spi_master_init>:
    3ec0:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <_ZN18OrangutanSPIMaster4initEhh>
    3ec4:	08 95       	ret

00003ec6 <__mulsi3>:
    3ec6:	62 9f       	mul	r22, r18
    3ec8:	d0 01       	movw	r26, r0
    3eca:	73 9f       	mul	r23, r19
    3ecc:	f0 01       	movw	r30, r0
    3ece:	82 9f       	mul	r24, r18
    3ed0:	e0 0d       	add	r30, r0
    3ed2:	f1 1d       	adc	r31, r1
    3ed4:	64 9f       	mul	r22, r20
    3ed6:	e0 0d       	add	r30, r0
    3ed8:	f1 1d       	adc	r31, r1
    3eda:	92 9f       	mul	r25, r18
    3edc:	f0 0d       	add	r31, r0
    3ede:	83 9f       	mul	r24, r19
    3ee0:	f0 0d       	add	r31, r0
    3ee2:	74 9f       	mul	r23, r20
    3ee4:	f0 0d       	add	r31, r0
    3ee6:	65 9f       	mul	r22, r21
    3ee8:	f0 0d       	add	r31, r0
    3eea:	99 27       	eor	r25, r25
    3eec:	72 9f       	mul	r23, r18
    3eee:	b0 0d       	add	r27, r0
    3ef0:	e1 1d       	adc	r30, r1
    3ef2:	f9 1f       	adc	r31, r25
    3ef4:	63 9f       	mul	r22, r19
    3ef6:	b0 0d       	add	r27, r0
    3ef8:	e1 1d       	adc	r30, r1
    3efa:	f9 1f       	adc	r31, r25
    3efc:	bd 01       	movw	r22, r26
    3efe:	cf 01       	movw	r24, r30
    3f00:	11 24       	eor	r1, r1
    3f02:	08 95       	ret

00003f04 <__divmodhi4>:
    3f04:	97 fb       	bst	r25, 7
    3f06:	09 2e       	mov	r0, r25
    3f08:	07 26       	eor	r0, r23
    3f0a:	0a d0       	rcall	.+20     	; 0x3f20 <__divmodhi4_neg1>
    3f0c:	77 fd       	sbrc	r23, 7
    3f0e:	04 d0       	rcall	.+8      	; 0x3f18 <__divmodhi4_neg2>
    3f10:	65 d0       	rcall	.+202    	; 0x3fdc <__udivmodhi4>
    3f12:	06 d0       	rcall	.+12     	; 0x3f20 <__divmodhi4_neg1>
    3f14:	00 20       	and	r0, r0
    3f16:	1a f4       	brpl	.+6      	; 0x3f1e <__divmodhi4_exit>

00003f18 <__divmodhi4_neg2>:
    3f18:	70 95       	com	r23
    3f1a:	61 95       	neg	r22
    3f1c:	7f 4f       	sbci	r23, 0xFF	; 255

00003f1e <__divmodhi4_exit>:
    3f1e:	08 95       	ret

00003f20 <__divmodhi4_neg1>:
    3f20:	f6 f7       	brtc	.-4      	; 0x3f1e <__divmodhi4_exit>
    3f22:	90 95       	com	r25
    3f24:	81 95       	neg	r24
    3f26:	9f 4f       	sbci	r25, 0xFF	; 255
    3f28:	08 95       	ret

00003f2a <__udivmodsi4>:
    3f2a:	a1 e2       	ldi	r26, 0x21	; 33
    3f2c:	1a 2e       	mov	r1, r26
    3f2e:	aa 1b       	sub	r26, r26
    3f30:	bb 1b       	sub	r27, r27
    3f32:	fd 01       	movw	r30, r26
    3f34:	0d c0       	rjmp	.+26     	; 0x3f50 <__udivmodsi4_ep>

00003f36 <__udivmodsi4_loop>:
    3f36:	aa 1f       	adc	r26, r26
    3f38:	bb 1f       	adc	r27, r27
    3f3a:	ee 1f       	adc	r30, r30
    3f3c:	ff 1f       	adc	r31, r31
    3f3e:	a2 17       	cp	r26, r18
    3f40:	b3 07       	cpc	r27, r19
    3f42:	e4 07       	cpc	r30, r20
    3f44:	f5 07       	cpc	r31, r21
    3f46:	20 f0       	brcs	.+8      	; 0x3f50 <__udivmodsi4_ep>
    3f48:	a2 1b       	sub	r26, r18
    3f4a:	b3 0b       	sbc	r27, r19
    3f4c:	e4 0b       	sbc	r30, r20
    3f4e:	f5 0b       	sbc	r31, r21

00003f50 <__udivmodsi4_ep>:
    3f50:	66 1f       	adc	r22, r22
    3f52:	77 1f       	adc	r23, r23
    3f54:	88 1f       	adc	r24, r24
    3f56:	99 1f       	adc	r25, r25
    3f58:	1a 94       	dec	r1
    3f5a:	69 f7       	brne	.-38     	; 0x3f36 <__udivmodsi4_loop>
    3f5c:	60 95       	com	r22
    3f5e:	70 95       	com	r23
    3f60:	80 95       	com	r24
    3f62:	90 95       	com	r25
    3f64:	9b 01       	movw	r18, r22
    3f66:	ac 01       	movw	r20, r24
    3f68:	bd 01       	movw	r22, r26
    3f6a:	cf 01       	movw	r24, r30
    3f6c:	08 95       	ret

00003f6e <__prologue_saves__>:
    3f6e:	2f 92       	push	r2
    3f70:	3f 92       	push	r3
    3f72:	4f 92       	push	r4
    3f74:	5f 92       	push	r5
    3f76:	6f 92       	push	r6
    3f78:	7f 92       	push	r7
    3f7a:	8f 92       	push	r8
    3f7c:	9f 92       	push	r9
    3f7e:	af 92       	push	r10
    3f80:	bf 92       	push	r11
    3f82:	cf 92       	push	r12
    3f84:	df 92       	push	r13
    3f86:	ef 92       	push	r14
    3f88:	ff 92       	push	r15
    3f8a:	0f 93       	push	r16
    3f8c:	1f 93       	push	r17
    3f8e:	cf 93       	push	r28
    3f90:	df 93       	push	r29
    3f92:	cd b7       	in	r28, 0x3d	; 61
    3f94:	de b7       	in	r29, 0x3e	; 62
    3f96:	ca 1b       	sub	r28, r26
    3f98:	db 0b       	sbc	r29, r27
    3f9a:	0f b6       	in	r0, 0x3f	; 63
    3f9c:	f8 94       	cli
    3f9e:	de bf       	out	0x3e, r29	; 62
    3fa0:	0f be       	out	0x3f, r0	; 63
    3fa2:	cd bf       	out	0x3d, r28	; 61
    3fa4:	09 94       	ijmp

00003fa6 <__epilogue_restores__>:
    3fa6:	2a 88       	ldd	r2, Y+18	; 0x12
    3fa8:	39 88       	ldd	r3, Y+17	; 0x11
    3faa:	48 88       	ldd	r4, Y+16	; 0x10
    3fac:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fae:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fb8:	b9 84       	ldd	r11, Y+9	; 0x09
    3fba:	c8 84       	ldd	r12, Y+8	; 0x08
    3fbc:	df 80       	ldd	r13, Y+7	; 0x07
    3fbe:	ee 80       	ldd	r14, Y+6	; 0x06
    3fc0:	fd 80       	ldd	r15, Y+5	; 0x05
    3fc2:	0c 81       	ldd	r16, Y+4	; 0x04
    3fc4:	1b 81       	ldd	r17, Y+3	; 0x03
    3fc6:	aa 81       	ldd	r26, Y+2	; 0x02
    3fc8:	b9 81       	ldd	r27, Y+1	; 0x01
    3fca:	ce 0f       	add	r28, r30
    3fcc:	d1 1d       	adc	r29, r1
    3fce:	0f b6       	in	r0, 0x3f	; 63
    3fd0:	f8 94       	cli
    3fd2:	de bf       	out	0x3e, r29	; 62
    3fd4:	0f be       	out	0x3f, r0	; 63
    3fd6:	cd bf       	out	0x3d, r28	; 61
    3fd8:	ed 01       	movw	r28, r26
    3fda:	08 95       	ret

00003fdc <__udivmodhi4>:
    3fdc:	aa 1b       	sub	r26, r26
    3fde:	bb 1b       	sub	r27, r27
    3fe0:	51 e1       	ldi	r21, 0x11	; 17
    3fe2:	07 c0       	rjmp	.+14     	; 0x3ff2 <__udivmodhi4_ep>

00003fe4 <__udivmodhi4_loop>:
    3fe4:	aa 1f       	adc	r26, r26
    3fe6:	bb 1f       	adc	r27, r27
    3fe8:	a6 17       	cp	r26, r22
    3fea:	b7 07       	cpc	r27, r23
    3fec:	10 f0       	brcs	.+4      	; 0x3ff2 <__udivmodhi4_ep>
    3fee:	a6 1b       	sub	r26, r22
    3ff0:	b7 0b       	sbc	r27, r23

00003ff2 <__udivmodhi4_ep>:
    3ff2:	88 1f       	adc	r24, r24
    3ff4:	99 1f       	adc	r25, r25
    3ff6:	5a 95       	dec	r21
    3ff8:	a9 f7       	brne	.-22     	; 0x3fe4 <__udivmodhi4_loop>
    3ffa:	80 95       	com	r24
    3ffc:	90 95       	com	r25
    3ffe:	bc 01       	movw	r22, r24
    4000:	cd 01       	movw	r24, r26
    4002:	08 95       	ret

00004004 <malloc>:
    4004:	cf 93       	push	r28
    4006:	df 93       	push	r29
    4008:	bc 01       	movw	r22, r24
    400a:	82 30       	cpi	r24, 0x02	; 2
    400c:	91 05       	cpc	r25, r1
    400e:	10 f4       	brcc	.+4      	; 0x4014 <malloc+0x10>
    4010:	62 e0       	ldi	r22, 0x02	; 2
    4012:	70 e0       	ldi	r23, 0x00	; 0
    4014:	a0 91 2e 04 	lds	r26, 0x042E
    4018:	b0 91 2f 04 	lds	r27, 0x042F
    401c:	ed 01       	movw	r28, r26
    401e:	e0 e0       	ldi	r30, 0x00	; 0
    4020:	f0 e0       	ldi	r31, 0x00	; 0
    4022:	40 e0       	ldi	r20, 0x00	; 0
    4024:	50 e0       	ldi	r21, 0x00	; 0
    4026:	21 c0       	rjmp	.+66     	; 0x406a <malloc+0x66>
    4028:	88 81       	ld	r24, Y
    402a:	99 81       	ldd	r25, Y+1	; 0x01
    402c:	86 17       	cp	r24, r22
    402e:	97 07       	cpc	r25, r23
    4030:	69 f4       	brne	.+26     	; 0x404c <malloc+0x48>
    4032:	8a 81       	ldd	r24, Y+2	; 0x02
    4034:	9b 81       	ldd	r25, Y+3	; 0x03
    4036:	30 97       	sbiw	r30, 0x00	; 0
    4038:	19 f0       	breq	.+6      	; 0x4040 <malloc+0x3c>
    403a:	93 83       	std	Z+3, r25	; 0x03
    403c:	82 83       	std	Z+2, r24	; 0x02
    403e:	04 c0       	rjmp	.+8      	; 0x4048 <malloc+0x44>
    4040:	90 93 2f 04 	sts	0x042F, r25
    4044:	80 93 2e 04 	sts	0x042E, r24
    4048:	fe 01       	movw	r30, r28
    404a:	34 c0       	rjmp	.+104    	; 0x40b4 <malloc+0xb0>
    404c:	68 17       	cp	r22, r24
    404e:	79 07       	cpc	r23, r25
    4050:	38 f4       	brcc	.+14     	; 0x4060 <malloc+0x5c>
    4052:	41 15       	cp	r20, r1
    4054:	51 05       	cpc	r21, r1
    4056:	19 f0       	breq	.+6      	; 0x405e <malloc+0x5a>
    4058:	84 17       	cp	r24, r20
    405a:	95 07       	cpc	r25, r21
    405c:	08 f4       	brcc	.+2      	; 0x4060 <malloc+0x5c>
    405e:	ac 01       	movw	r20, r24
    4060:	fe 01       	movw	r30, r28
    4062:	8a 81       	ldd	r24, Y+2	; 0x02
    4064:	9b 81       	ldd	r25, Y+3	; 0x03
    4066:	9c 01       	movw	r18, r24
    4068:	e9 01       	movw	r28, r18
    406a:	20 97       	sbiw	r28, 0x00	; 0
    406c:	e9 f6       	brne	.-70     	; 0x4028 <malloc+0x24>
    406e:	41 15       	cp	r20, r1
    4070:	51 05       	cpc	r21, r1
    4072:	a9 f1       	breq	.+106    	; 0x40de <malloc+0xda>
    4074:	ca 01       	movw	r24, r20
    4076:	86 1b       	sub	r24, r22
    4078:	97 0b       	sbc	r25, r23
    407a:	04 97       	sbiw	r24, 0x04	; 4
    407c:	08 f4       	brcc	.+2      	; 0x4080 <malloc+0x7c>
    407e:	ba 01       	movw	r22, r20
    4080:	e0 e0       	ldi	r30, 0x00	; 0
    4082:	f0 e0       	ldi	r31, 0x00	; 0
    4084:	2a c0       	rjmp	.+84     	; 0x40da <malloc+0xd6>
    4086:	8d 91       	ld	r24, X+
    4088:	9c 91       	ld	r25, X
    408a:	11 97       	sbiw	r26, 0x01	; 1
    408c:	84 17       	cp	r24, r20
    408e:	95 07       	cpc	r25, r21
    4090:	f9 f4       	brne	.+62     	; 0x40d0 <malloc+0xcc>
    4092:	64 17       	cp	r22, r20
    4094:	75 07       	cpc	r23, r21
    4096:	81 f4       	brne	.+32     	; 0x40b8 <malloc+0xb4>
    4098:	12 96       	adiw	r26, 0x02	; 2
    409a:	8d 91       	ld	r24, X+
    409c:	9c 91       	ld	r25, X
    409e:	13 97       	sbiw	r26, 0x03	; 3
    40a0:	30 97       	sbiw	r30, 0x00	; 0
    40a2:	19 f0       	breq	.+6      	; 0x40aa <malloc+0xa6>
    40a4:	93 83       	std	Z+3, r25	; 0x03
    40a6:	82 83       	std	Z+2, r24	; 0x02
    40a8:	04 c0       	rjmp	.+8      	; 0x40b2 <malloc+0xae>
    40aa:	90 93 2f 04 	sts	0x042F, r25
    40ae:	80 93 2e 04 	sts	0x042E, r24
    40b2:	fd 01       	movw	r30, r26
    40b4:	32 96       	adiw	r30, 0x02	; 2
    40b6:	4f c0       	rjmp	.+158    	; 0x4156 <__stack+0x57>
    40b8:	ca 01       	movw	r24, r20
    40ba:	86 1b       	sub	r24, r22
    40bc:	97 0b       	sbc	r25, r23
    40be:	fd 01       	movw	r30, r26
    40c0:	e8 0f       	add	r30, r24
    40c2:	f9 1f       	adc	r31, r25
    40c4:	61 93       	st	Z+, r22
    40c6:	71 93       	st	Z+, r23
    40c8:	02 97       	sbiw	r24, 0x02	; 2
    40ca:	8d 93       	st	X+, r24
    40cc:	9c 93       	st	X, r25
    40ce:	43 c0       	rjmp	.+134    	; 0x4156 <__stack+0x57>
    40d0:	fd 01       	movw	r30, r26
    40d2:	82 81       	ldd	r24, Z+2	; 0x02
    40d4:	93 81       	ldd	r25, Z+3	; 0x03
    40d6:	9c 01       	movw	r18, r24
    40d8:	d9 01       	movw	r26, r18
    40da:	10 97       	sbiw	r26, 0x00	; 0
    40dc:	a1 f6       	brne	.-88     	; 0x4086 <malloc+0x82>
    40de:	80 91 2c 04 	lds	r24, 0x042C
    40e2:	90 91 2d 04 	lds	r25, 0x042D
    40e6:	89 2b       	or	r24, r25
    40e8:	41 f4       	brne	.+16     	; 0x40fa <malloc+0xf6>
    40ea:	80 91 ea 03 	lds	r24, 0x03EA
    40ee:	90 91 eb 03 	lds	r25, 0x03EB
    40f2:	90 93 2d 04 	sts	0x042D, r25
    40f6:	80 93 2c 04 	sts	0x042C, r24
    40fa:	40 91 ec 03 	lds	r20, 0x03EC
    40fe:	50 91 ed 03 	lds	r21, 0x03ED
    4102:	41 15       	cp	r20, r1
    4104:	51 05       	cpc	r21, r1
    4106:	41 f4       	brne	.+16     	; 0x4118 <__stack+0x19>
    4108:	4d b7       	in	r20, 0x3d	; 61
    410a:	5e b7       	in	r21, 0x3e	; 62
    410c:	80 91 e8 03 	lds	r24, 0x03E8
    4110:	90 91 e9 03 	lds	r25, 0x03E9
    4114:	48 1b       	sub	r20, r24
    4116:	59 0b       	sbc	r21, r25
    4118:	20 91 2c 04 	lds	r18, 0x042C
    411c:	30 91 2d 04 	lds	r19, 0x042D
    4120:	24 17       	cp	r18, r20
    4122:	35 07       	cpc	r19, r21
    4124:	b0 f4       	brcc	.+44     	; 0x4152 <__stack+0x53>
    4126:	ca 01       	movw	r24, r20
    4128:	82 1b       	sub	r24, r18
    412a:	93 0b       	sbc	r25, r19
    412c:	86 17       	cp	r24, r22
    412e:	97 07       	cpc	r25, r23
    4130:	80 f0       	brcs	.+32     	; 0x4152 <__stack+0x53>
    4132:	ab 01       	movw	r20, r22
    4134:	4e 5f       	subi	r20, 0xFE	; 254
    4136:	5f 4f       	sbci	r21, 0xFF	; 255
    4138:	84 17       	cp	r24, r20
    413a:	95 07       	cpc	r25, r21
    413c:	50 f0       	brcs	.+20     	; 0x4152 <__stack+0x53>
    413e:	42 0f       	add	r20, r18
    4140:	53 1f       	adc	r21, r19
    4142:	50 93 2d 04 	sts	0x042D, r21
    4146:	40 93 2c 04 	sts	0x042C, r20
    414a:	f9 01       	movw	r30, r18
    414c:	61 93       	st	Z+, r22
    414e:	71 93       	st	Z+, r23
    4150:	02 c0       	rjmp	.+4      	; 0x4156 <__stack+0x57>
    4152:	e0 e0       	ldi	r30, 0x00	; 0
    4154:	f0 e0       	ldi	r31, 0x00	; 0
    4156:	cf 01       	movw	r24, r30
    4158:	df 91       	pop	r29
    415a:	cf 91       	pop	r28
    415c:	08 95       	ret

0000415e <free>:
    415e:	cf 93       	push	r28
    4160:	df 93       	push	r29
    4162:	00 97       	sbiw	r24, 0x00	; 0
    4164:	09 f4       	brne	.+2      	; 0x4168 <free+0xa>
    4166:	50 c0       	rjmp	.+160    	; 0x4208 <free+0xaa>
    4168:	ec 01       	movw	r28, r24
    416a:	22 97       	sbiw	r28, 0x02	; 2
    416c:	1b 82       	std	Y+3, r1	; 0x03
    416e:	1a 82       	std	Y+2, r1	; 0x02
    4170:	a0 91 2e 04 	lds	r26, 0x042E
    4174:	b0 91 2f 04 	lds	r27, 0x042F
    4178:	10 97       	sbiw	r26, 0x00	; 0
    417a:	09 f1       	breq	.+66     	; 0x41be <free+0x60>
    417c:	40 e0       	ldi	r20, 0x00	; 0
    417e:	50 e0       	ldi	r21, 0x00	; 0
    4180:	ac 17       	cp	r26, r28
    4182:	bd 07       	cpc	r27, r29
    4184:	08 f1       	brcs	.+66     	; 0x41c8 <free+0x6a>
    4186:	bb 83       	std	Y+3, r27	; 0x03
    4188:	aa 83       	std	Y+2, r26	; 0x02
    418a:	fe 01       	movw	r30, r28
    418c:	21 91       	ld	r18, Z+
    418e:	31 91       	ld	r19, Z+
    4190:	e2 0f       	add	r30, r18
    4192:	f3 1f       	adc	r31, r19
    4194:	ae 17       	cp	r26, r30
    4196:	bf 07       	cpc	r27, r31
    4198:	79 f4       	brne	.+30     	; 0x41b8 <free+0x5a>
    419a:	8d 91       	ld	r24, X+
    419c:	9c 91       	ld	r25, X
    419e:	11 97       	sbiw	r26, 0x01	; 1
    41a0:	28 0f       	add	r18, r24
    41a2:	39 1f       	adc	r19, r25
    41a4:	2e 5f       	subi	r18, 0xFE	; 254
    41a6:	3f 4f       	sbci	r19, 0xFF	; 255
    41a8:	39 83       	std	Y+1, r19	; 0x01
    41aa:	28 83       	st	Y, r18
    41ac:	12 96       	adiw	r26, 0x02	; 2
    41ae:	8d 91       	ld	r24, X+
    41b0:	9c 91       	ld	r25, X
    41b2:	13 97       	sbiw	r26, 0x03	; 3
    41b4:	9b 83       	std	Y+3, r25	; 0x03
    41b6:	8a 83       	std	Y+2, r24	; 0x02
    41b8:	41 15       	cp	r20, r1
    41ba:	51 05       	cpc	r21, r1
    41bc:	71 f4       	brne	.+28     	; 0x41da <free+0x7c>
    41be:	d0 93 2f 04 	sts	0x042F, r29
    41c2:	c0 93 2e 04 	sts	0x042E, r28
    41c6:	20 c0       	rjmp	.+64     	; 0x4208 <free+0xaa>
    41c8:	12 96       	adiw	r26, 0x02	; 2
    41ca:	8d 91       	ld	r24, X+
    41cc:	9c 91       	ld	r25, X
    41ce:	13 97       	sbiw	r26, 0x03	; 3
    41d0:	ad 01       	movw	r20, r26
    41d2:	00 97       	sbiw	r24, 0x00	; 0
    41d4:	11 f0       	breq	.+4      	; 0x41da <free+0x7c>
    41d6:	dc 01       	movw	r26, r24
    41d8:	d3 cf       	rjmp	.-90     	; 0x4180 <free+0x22>
    41da:	fa 01       	movw	r30, r20
    41dc:	d3 83       	std	Z+3, r29	; 0x03
    41de:	c2 83       	std	Z+2, r28	; 0x02
    41e0:	21 91       	ld	r18, Z+
    41e2:	31 91       	ld	r19, Z+
    41e4:	e2 0f       	add	r30, r18
    41e6:	f3 1f       	adc	r31, r19
    41e8:	ce 17       	cp	r28, r30
    41ea:	df 07       	cpc	r29, r31
    41ec:	69 f4       	brne	.+26     	; 0x4208 <free+0xaa>
    41ee:	88 81       	ld	r24, Y
    41f0:	99 81       	ldd	r25, Y+1	; 0x01
    41f2:	28 0f       	add	r18, r24
    41f4:	39 1f       	adc	r19, r25
    41f6:	2e 5f       	subi	r18, 0xFE	; 254
    41f8:	3f 4f       	sbci	r19, 0xFF	; 255
    41fa:	fa 01       	movw	r30, r20
    41fc:	31 83       	std	Z+1, r19	; 0x01
    41fe:	20 83       	st	Z, r18
    4200:	8a 81       	ldd	r24, Y+2	; 0x02
    4202:	9b 81       	ldd	r25, Y+3	; 0x03
    4204:	93 83       	std	Z+3, r25	; 0x03
    4206:	82 83       	std	Z+2, r24	; 0x02
    4208:	df 91       	pop	r29
    420a:	cf 91       	pop	r28
    420c:	08 95       	ret

0000420e <itoa>:
    420e:	fb 01       	movw	r30, r22
    4210:	9f 01       	movw	r18, r30
    4212:	e8 94       	clt
    4214:	42 30       	cpi	r20, 0x02	; 2
    4216:	c4 f0       	brlt	.+48     	; 0x4248 <itoa+0x3a>
    4218:	45 32       	cpi	r20, 0x25	; 37
    421a:	b4 f4       	brge	.+44     	; 0x4248 <itoa+0x3a>
    421c:	4a 30       	cpi	r20, 0x0A	; 10
    421e:	29 f4       	brne	.+10     	; 0x422a <itoa+0x1c>
    4220:	97 fb       	bst	r25, 7
    4222:	1e f4       	brtc	.+6      	; 0x422a <itoa+0x1c>
    4224:	90 95       	com	r25
    4226:	81 95       	neg	r24
    4228:	9f 4f       	sbci	r25, 0xFF	; 255
    422a:	64 2f       	mov	r22, r20
    422c:	77 27       	eor	r23, r23
    422e:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__udivmodhi4>
    4232:	80 5d       	subi	r24, 0xD0	; 208
    4234:	8a 33       	cpi	r24, 0x3A	; 58
    4236:	0c f0       	brlt	.+2      	; 0x423a <itoa+0x2c>
    4238:	89 5d       	subi	r24, 0xD9	; 217
    423a:	81 93       	st	Z+, r24
    423c:	cb 01       	movw	r24, r22
    423e:	00 97       	sbiw	r24, 0x00	; 0
    4240:	a1 f7       	brne	.-24     	; 0x422a <itoa+0x1c>
    4242:	16 f4       	brtc	.+4      	; 0x4248 <itoa+0x3a>
    4244:	5d e2       	ldi	r21, 0x2D	; 45
    4246:	51 93       	st	Z+, r21
    4248:	10 82       	st	Z, r1
    424a:	c9 01       	movw	r24, r18
    424c:	0c 94 97 21 	jmp	0x432e	; 0x432e <strrev>

00004250 <fdevopen>:
    4250:	0f 93       	push	r16
    4252:	1f 93       	push	r17
    4254:	cf 93       	push	r28
    4256:	df 93       	push	r29
    4258:	8c 01       	movw	r16, r24
    425a:	eb 01       	movw	r28, r22
    425c:	00 97       	sbiw	r24, 0x00	; 0
    425e:	31 f4       	brne	.+12     	; 0x426c <fdevopen+0x1c>
    4260:	61 15       	cp	r22, r1
    4262:	71 05       	cpc	r23, r1
    4264:	19 f4       	brne	.+6      	; 0x426c <fdevopen+0x1c>
    4266:	20 e0       	ldi	r18, 0x00	; 0
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	38 c0       	rjmp	.+112    	; 0x42dc <fdevopen+0x8c>
    426c:	81 e0       	ldi	r24, 0x01	; 1
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	6e e0       	ldi	r22, 0x0E	; 14
    4272:	70 e0       	ldi	r23, 0x00	; 0
    4274:	0e 94 74 21 	call	0x42e8	; 0x42e8 <calloc>
    4278:	fc 01       	movw	r30, r24
    427a:	9c 01       	movw	r18, r24
    427c:	00 97       	sbiw	r24, 0x00	; 0
    427e:	71 f1       	breq	.+92     	; 0x42dc <fdevopen+0x8c>
    4280:	80 e8       	ldi	r24, 0x80	; 128
    4282:	83 83       	std	Z+3, r24	; 0x03
    4284:	20 97       	sbiw	r28, 0x00	; 0
    4286:	71 f0       	breq	.+28     	; 0x42a4 <fdevopen+0x54>
    4288:	d3 87       	std	Z+11, r29	; 0x0b
    428a:	c2 87       	std	Z+10, r28	; 0x0a
    428c:	81 e8       	ldi	r24, 0x81	; 129
    428e:	83 83       	std	Z+3, r24	; 0x03
    4290:	80 91 30 04 	lds	r24, 0x0430
    4294:	90 91 31 04 	lds	r25, 0x0431
    4298:	89 2b       	or	r24, r25
    429a:	21 f4       	brne	.+8      	; 0x42a4 <fdevopen+0x54>
    429c:	f0 93 31 04 	sts	0x0431, r31
    42a0:	e0 93 30 04 	sts	0x0430, r30
    42a4:	01 15       	cp	r16, r1
    42a6:	11 05       	cpc	r17, r1
    42a8:	c9 f0       	breq	.+50     	; 0x42dc <fdevopen+0x8c>
    42aa:	11 87       	std	Z+9, r17	; 0x09
    42ac:	00 87       	std	Z+8, r16	; 0x08
    42ae:	83 81       	ldd	r24, Z+3	; 0x03
    42b0:	82 60       	ori	r24, 0x02	; 2
    42b2:	83 83       	std	Z+3, r24	; 0x03
    42b4:	80 91 32 04 	lds	r24, 0x0432
    42b8:	90 91 33 04 	lds	r25, 0x0433
    42bc:	89 2b       	or	r24, r25
    42be:	71 f4       	brne	.+28     	; 0x42dc <fdevopen+0x8c>
    42c0:	f0 93 33 04 	sts	0x0433, r31
    42c4:	e0 93 32 04 	sts	0x0432, r30
    42c8:	80 91 34 04 	lds	r24, 0x0434
    42cc:	90 91 35 04 	lds	r25, 0x0435
    42d0:	89 2b       	or	r24, r25
    42d2:	21 f4       	brne	.+8      	; 0x42dc <fdevopen+0x8c>
    42d4:	f0 93 35 04 	sts	0x0435, r31
    42d8:	e0 93 34 04 	sts	0x0434, r30
    42dc:	c9 01       	movw	r24, r18
    42de:	df 91       	pop	r29
    42e0:	cf 91       	pop	r28
    42e2:	1f 91       	pop	r17
    42e4:	0f 91       	pop	r16
    42e6:	08 95       	ret

000042e8 <calloc>:
    42e8:	0f 93       	push	r16
    42ea:	1f 93       	push	r17
    42ec:	cf 93       	push	r28
    42ee:	df 93       	push	r29
    42f0:	68 9f       	mul	r22, r24
    42f2:	80 01       	movw	r16, r0
    42f4:	69 9f       	mul	r22, r25
    42f6:	10 0d       	add	r17, r0
    42f8:	78 9f       	mul	r23, r24
    42fa:	10 0d       	add	r17, r0
    42fc:	11 24       	eor	r1, r1
    42fe:	c8 01       	movw	r24, r16
    4300:	0e 94 02 20 	call	0x4004	; 0x4004 <malloc>
    4304:	ec 01       	movw	r28, r24
    4306:	00 97       	sbiw	r24, 0x00	; 0
    4308:	29 f0       	breq	.+10     	; 0x4314 <calloc+0x2c>
    430a:	60 e0       	ldi	r22, 0x00	; 0
    430c:	70 e0       	ldi	r23, 0x00	; 0
    430e:	a8 01       	movw	r20, r16
    4310:	0e 94 90 21 	call	0x4320	; 0x4320 <memset>
    4314:	ce 01       	movw	r24, r28
    4316:	df 91       	pop	r29
    4318:	cf 91       	pop	r28
    431a:	1f 91       	pop	r17
    431c:	0f 91       	pop	r16
    431e:	08 95       	ret

00004320 <memset>:
    4320:	dc 01       	movw	r26, r24
    4322:	01 c0       	rjmp	.+2      	; 0x4326 <memset+0x6>
    4324:	6d 93       	st	X+, r22
    4326:	41 50       	subi	r20, 0x01	; 1
    4328:	50 40       	sbci	r21, 0x00	; 0
    432a:	e0 f7       	brcc	.-8      	; 0x4324 <memset+0x4>
    432c:	08 95       	ret

0000432e <strrev>:
    432e:	dc 01       	movw	r26, r24
    4330:	fc 01       	movw	r30, r24
    4332:	67 2f       	mov	r22, r23
    4334:	71 91       	ld	r23, Z+
    4336:	77 23       	and	r23, r23
    4338:	e1 f7       	brne	.-8      	; 0x4332 <strrev+0x4>
    433a:	32 97       	sbiw	r30, 0x02	; 2
    433c:	04 c0       	rjmp	.+8      	; 0x4346 <strrev+0x18>
    433e:	7c 91       	ld	r23, X
    4340:	6d 93       	st	X+, r22
    4342:	70 83       	st	Z, r23
    4344:	62 91       	ld	r22, -Z
    4346:	ae 17       	cp	r26, r30
    4348:	bf 07       	cpc	r27, r31
    434a:	c8 f3       	brcs	.-14     	; 0x433e <strrev+0x10>
    434c:	08 95       	ret

0000434e <_exit>:
    434e:	f8 94       	cli

00004350 <__stop_program>:
    4350:	ff cf       	rjmp	.-2      	; 0x4350 <__stop_program>
