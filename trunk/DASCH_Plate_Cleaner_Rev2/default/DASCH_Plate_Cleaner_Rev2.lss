
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000029e  00800100  00004298  0000432c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080039e  0080039e  000045ca  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  000045cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002591  00000000  00000000  00006d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000931d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001dc  00000000  00000000  0000935d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001344  00000000  00000000  00009539  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003ec  00000000  00000000  0000a87d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000020d1  00000000  00000000  0000ac69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  0000cd3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d45  00000000  00000000  0000ce7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000010d3  00000000  00000000  0000dbc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  0000ec94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 01 	jmp	0x208	; 0x208 <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__vector_11>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      48:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      6c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	77 05       	cpc	r23, r7
      8e:	88 05       	cpc	r24, r8
      90:	a0 05       	cpc	r26, r0
      92:	b3 05       	cpc	r27, r3
      94:	c7 05       	cpc	r28, r7
      96:	da 05       	cpc	r29, r10
      98:	ee 05       	cpc	r30, r14
      9a:	03 06       	cpc	r0, r19
      9c:	17 06       	cpc	r1, r23
      9e:	25 06       	cpc	r2, r21
      a0:	2b 06       	cpc	r2, r27
      a2:	39 06       	cpc	r3, r25
      a4:	3d 06       	cpc	r3, r29
      a6:	4b 06       	cpc	r4, r27
      a8:	4f 06       	cpc	r4, r31
      aa:	5d 06       	cpc	r5, r29
      ac:	61 06       	cpc	r6, r17
      ae:	70 06       	cpc	r7, r16
      b0:	74 06       	cpc	r7, r20
      b2:	82 06       	cpc	r8, r18
      b4:	85 06       	cpc	r8, r21
      b6:	94 06       	cpc	r9, r20
      b8:	98 06       	cpc	r9, r24
      ba:	b7 06       	cpc	r11, r23
      bc:	a8 06       	cpc	r10, r24
      be:	bb 06       	cpc	r11, r27
      c0:	bf 06       	cpc	r11, r31
      c2:	cd 06       	cpc	r12, r29
      c4:	d0 06       	cpc	r13, r16
      c6:	df 06       	cpc	r13, r31
      c8:	e3 06       	cpc	r14, r19
      ca:	f1 06       	cpc	r15, r17
      cc:	f7 06       	cpc	r15, r23
      ce:	0d 07       	cpc	r16, r29
      d0:	19 07       	cpc	r17, r25
      d2:	36 07       	cpc	r19, r22
      d4:	42 07       	cpc	r20, r18
      d6:	5f 07       	cpc	r21, r31
      d8:	6b 07       	cpc	r22, r27
      da:	88 07       	cpc	r24, r24
      dc:	94 07       	cpc	r25, r20
      de:	b1 07       	cpc	r27, r17
      e0:	bd 07       	cpc	r27, r29
      e2:	dd 07       	cpc	r29, r29
      e4:	a7 0a       	sbc	r10, r23
      e6:	ce 0a       	sbc	r12, r30
      e8:	f1 0a       	sbc	r15, r17
      ea:	3d 0b       	sbc	r19, r29
      ec:	fe 0a       	sbc	r15, r30
      ee:	0b 0b       	sbc	r16, r27
      f0:	16 0b       	sbc	r17, r22
      f2:	20 0b       	sbc	r18, r16
      f4:	2b 0b       	sbc	r18, r27
      f6:	36 0b       	sbc	r19, r22
      f8:	53 0b       	sbc	r21, r19
      fa:	3d 0b       	sbc	r19, r29
      fc:	41 0b       	sbc	r20, r17
      fe:	95 0b       	sbc	r25, r21
     100:	53 0b       	sbc	r21, r19
     102:	fc 0b       	sbc	r31, r28
     104:	fc 0b       	sbc	r31, r28
     106:	fc 0b       	sbc	r31, r28
     108:	fc 0b       	sbc	r31, r28
     10a:	fc 0b       	sbc	r31, r28
     10c:	fc 0b       	sbc	r31, r28
     10e:	fc 0b       	sbc	r31, r28
     110:	fc 0b       	sbc	r31, r28
     112:	5e 0b       	sbc	r21, r30
     114:	6d 0b       	sbc	r22, r29
     116:	73 0b       	sbc	r23, r19
     118:	7e 0b       	sbc	r23, r30
     11a:	82 0b       	sbc	r24, r18
     11c:	8f 0b       	sbc	r24, r31
     11e:	95 0b       	sbc	r25, r21
     120:	9f 0b       	sbc	r25, r31
     122:	ad 0b       	sbc	r26, r29
     124:	b9 0b       	sbc	r27, r25
     126:	c7 0b       	sbc	r28, r23
     128:	dc 0b       	sbc	r29, r28
     12a:	e9 0b       	sbc	r30, r25
     12c:	49 0e       	add	r4, r25
     12e:	71 0e       	add	r7, r17
     130:	94 0e       	add	r9, r20
     132:	a1 0e       	add	r10, r17
     134:	a5 0e       	add	r10, r21
     136:	b2 0e       	add	r11, r18
     138:	bd 0e       	add	r11, r29
     13a:	a8 0f       	add	r26, r24
     13c:	a8 0f       	add	r26, r24
     13e:	a8 0f       	add	r26, r24
     140:	a8 0f       	add	r26, r24
     142:	a8 0f       	add	r26, r24
     144:	a8 0f       	add	r26, r24
     146:	a8 0f       	add	r26, r24
     148:	a8 0f       	add	r26, r24
     14a:	c7 0e       	add	r12, r23
     14c:	ce 0e       	add	r12, r30
     14e:	19 0f       	add	r17, r25
     150:	dd 0e       	add	r13, r29
     152:	e8 0e       	add	r14, r24
     154:	f3 0e       	add	r15, r19
     156:	40 0f       	add	r20, r16
     158:	07 0f       	add	r16, r23
     15a:	19 0f       	add	r17, r25
     15c:	23 0f       	add	r18, r19
     15e:	e8 0e       	add	r14, r24
     160:	29 0f       	add	r18, r25
     162:	2d 0f       	add	r18, r29
     164:	3a 0f       	add	r19, r26
     166:	40 0f       	add	r20, r16
     168:	4a 0f       	add	r20, r26
     16a:	58 0f       	add	r21, r24
     16c:	64 0f       	add	r22, r20
     16e:	72 0f       	add	r23, r18
     170:	87 0f       	add	r24, r23
     172:	94 0f       	add	r25, r20
     174:	7f 12       	cpse	r7, r31
     176:	a7 12       	cpse	r10, r23
     178:	ca 12       	cpse	r12, r26
     17a:	1a 13       	cpse	r17, r26
     17c:	d7 12       	cpse	r13, r23
     17e:	e4 12       	cpse	r14, r20
     180:	ef 12       	cpse	r14, r31
     182:	f3 12       	cpse	r15, r19
     184:	fe 12       	cpse	r15, r30
     186:	09 13       	cpse	r16, r25
     188:	3a 13       	cpse	r19, r26
     18a:	1a 13       	cpse	r17, r26
     18c:	1e 13       	cpse	r17, r30
     18e:	30 13       	cpse	r19, r16
     190:	3a 13       	cpse	r19, r26
     192:	45 13       	cpse	r20, r21
     194:	4c 13       	cpse	r20, r28
     196:	5b 13       	cpse	r21, r27
     198:	65 13       	cpse	r22, r21
     19a:	70 13       	cpse	r23, r16
     19c:	7b 13       	cpse	r23, r27
     19e:	8f 13       	cpse	r24, r31
     1a0:	99 13       	cpse	r25, r25
     1a2:	5b 13       	cpse	r21, r27
     1a4:	ab 13       	cpse	r26, r27
     1a6:	70 13       	cpse	r23, r16
     1a8:	b1 13       	cpse	r27, r17
     1aa:	b5 13       	cpse	r27, r21
     1ac:	c2 13       	cpse	r28, r18
     1ae:	8f 13       	cpse	r24, r31
     1b0:	c8 13       	cpse	r28, r24
     1b2:	d6 13       	cpse	r29, r22
     1b4:	e2 13       	cpse	r30, r18
     1b6:	f0 13       	cpse	r31, r16
     1b8:	05 14       	cp	r0, r5
     1ba:	12 14       	cp	r1, r2
     1bc:	fe 16       	cp	r15, r30
     1be:	24 17       	cp	r18, r20
     1c0:	47 17       	cp	r20, r23
     1c2:	9c 17       	cp	r25, r28
     1c4:	54 17       	cp	r21, r20
     1c6:	61 17       	cp	r22, r17
     1c8:	6c 17       	cp	r22, r28
     1ca:	70 17       	cp	r23, r16
     1cc:	7b 17       	cp	r23, r27
     1ce:	84 17       	cp	r24, r20
     1d0:	91 17       	cp	r25, r17
     1d2:	9c 17       	cp	r25, r28
     1d4:	a0 17       	cp	r26, r16
     1d6:	b2 17       	cp	r27, r18
     1d8:	91 17       	cp	r25, r17
     1da:	be 17       	cp	r27, r30
     1dc:	c5 17       	cp	r28, r21
     1de:	d4 17       	cp	r29, r20
     1e0:	e0 17       	cp	r30, r16
     1e2:	eb 17       	cp	r30, r27
     1e4:	f6 17       	cp	r31, r22
     1e6:	0a 18       	sub	r0, r10
     1e8:	14 18       	sub	r1, r4
     1ea:	26 18       	sub	r2, r6
     1ec:	2e 18       	sub	r2, r14
     1ee:	eb 17       	cp	r30, r27
     1f0:	34 18       	sub	r3, r4
     1f2:	43 18       	sub	r4, r3
     1f4:	50 18       	sub	r5, r0
     1f6:	5a 18       	sub	r5, r10
     1f8:	66 18       	sub	r6, r6
     1fa:	7d 18       	sub	r7, r13
     1fc:	82 18       	sub	r8, r2
     1fe:	8d 18       	sub	r8, r13
     200:	98 18       	sub	r9, r8
     202:	a2 18       	sub	r10, r2
     204:	b6 18       	sub	r11, r6
     206:	f5 16       	cp	r15, r21

00000208 <__ctors_end>:
     208:	11 24       	eor	r1, r1
     20a:	1f be       	out	0x3f, r1	; 63
     20c:	cf ef       	ldi	r28, 0xFF	; 255
     20e:	d0 e4       	ldi	r29, 0x40	; 64
     210:	de bf       	out	0x3e, r29	; 62
     212:	cd bf       	out	0x3d, r28	; 61

00000214 <__do_copy_data>:
     214:	13 e0       	ldi	r17, 0x03	; 3
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	e8 e9       	ldi	r30, 0x98	; 152
     21c:	f2 e4       	ldi	r31, 0x42	; 66
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ae 39       	cpi	r26, 0x9E	; 158
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>

0000022e <__do_clear_bss>:
     22e:	13 e0       	ldi	r17, 0x03	; 3
     230:	ae e9       	ldi	r26, 0x9E	; 158
     232:	b3 e0       	ldi	r27, 0x03	; 3
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	a6 3c       	cpi	r26, 0xC6	; 198
     23a:	b1 07       	cpc	r27, r17
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 92 02 	call	0x524	; 0x524 <main>
     242:	0c 94 4a 21 	jmp	0x4294	; 0x4294 <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <_ZN16OrangutanDigital11isInputHighEh>:


	// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
	// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
	// the pin.
	inline static unsigned char isInputHigh(unsigned char pin)
     24a:	48 2f       	mov	r20, r24
		io->pinRegister = 0;
		io->portRegister = 0;
		io->ddrRegister = 0;
		io->bitmask = 0;

		if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     24c:	88 30       	cpi	r24, 0x08	; 8
     24e:	58 f4       	brcc	.+22     	; 0x266 <_ZN16OrangutanDigital11isInputHighEh+0x1c>
		{
			io->pinRegister = (unsigned char*)&PIND;
			io->portRegister = (unsigned char*)&PORTD;
			io->ddrRegister = (unsigned char*)&DDRD;
			io->bitmask = 1 << pin;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	02 c0       	rjmp	.+4      	; 0x25a <_ZN16OrangutanDigital11isInputHighEh+0x10>
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	4a 95       	dec	r20
     25c:	e2 f7       	brpl	.-8      	; 0x256 <_ZN16OrangutanDigital11isInputHighEh+0xc>
     25e:	98 2f       	mov	r25, r24
     260:	e9 e2       	ldi	r30, 0x29	; 41
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	36 c0       	rjmp	.+108    	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)

		else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     266:	80 31       	cpi	r24, 0x10	; 16
     268:	78 f4       	brcc	.+30     	; 0x288 <_ZN16OrangutanDigital11isInputHighEh+0x3e>
		{
			io->pinRegister = (unsigned char*)&PINB;
			io->portRegister = (unsigned char*)&PORTB;
			io->ddrRegister = (unsigned char*)&DDRB;
			io->bitmask = 1 << (pin - 8);
     26a:	28 2f       	mov	r18, r24
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	28 50       	subi	r18, 0x08	; 8
     270:	30 40       	sbci	r19, 0x00	; 0
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	02 c0       	rjmp	.+4      	; 0x27c <_ZN16OrangutanDigital11isInputHighEh+0x32>
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	2a 95       	dec	r18
     27e:	e2 f7       	brpl	.-8      	; 0x278 <_ZN16OrangutanDigital11isInputHighEh+0x2e>
     280:	98 2f       	mov	r25, r24
     282:	e3 e2       	ldi	r30, 0x23	; 35
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	25 c0       	rjmp	.+74     	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     288:	88 31       	cpi	r24, 0x18	; 24
     28a:	78 f4       	brcc	.+30     	; 0x2aa <_ZN16OrangutanDigital11isInputHighEh+0x60>
		{
			io->pinRegister = (unsigned char*)&PINC;
			io->portRegister = (unsigned char*)&PORTC;
			io->ddrRegister = (unsigned char*)&DDRC;
			io->bitmask = 1 << (pin - 16);
     28c:	28 2f       	mov	r18, r24
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	20 51       	subi	r18, 0x10	; 16
     292:	30 40       	sbci	r19, 0x00	; 0
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	02 c0       	rjmp	.+4      	; 0x29e <_ZN16OrangutanDigital11isInputHighEh+0x54>
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	2a 95       	dec	r18
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <_ZN16OrangutanDigital11isInputHighEh+0x50>
     2a2:	98 2f       	mov	r25, r24
     2a4:	e6 e2       	ldi	r30, 0x26	; 38
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	14 c0       	rjmp	.+40     	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     2aa:	80 32       	cpi	r24, 0x20	; 32
     2ac:	20 f0       	brcs	.+8      	; 0x2b6 <_ZN16OrangutanDigital11isInputHighEh+0x6c>
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	e0 e0       	ldi	r30, 0x00	; 0
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	0e c0       	rjmp	.+28     	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		{
			io->pinRegister = (unsigned char*)&PINA;
			io->portRegister = (unsigned char*)&PORTA;
			io->ddrRegister = (unsigned char*)&DDRA;
			io->bitmask = 1 << (31 - pin);
     2b6:	2f e1       	ldi	r18, 0x1F	; 31
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	28 1b       	sub	r18, r24
     2bc:	31 09       	sbc	r19, r1
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <_ZN16OrangutanDigital11isInputHighEh+0x7e>
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	2a 95       	dec	r18
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <_ZN16OrangutanDigital11isInputHighEh+0x7a>
     2cc:	98 2f       	mov	r25, r24
     2ce:	e0 e2       	ldi	r30, 0x20	; 32
     2d0:	f0 e0       	ldi	r31, 0x00	; 0

	// low-level method for reading the value of the PIN register for an pin or set of pins
	// described by an IOStruct pointer.
	inline static unsigned char getInputValue(struct IOStruct* ioPin)
	{
		return *(ioPin->pinRegister) & ioPin->bitmask;
     2d2:	80 81       	ld	r24, Z
	inline static unsigned char isInputHigh(unsigned char pin)
	{
		struct IOStruct registers;
		getIORegisters(&registers, pin);
		return getInputValue(&registers);
	}
     2d4:	89 23       	and	r24, r25
     2d6:	08 95       	ret

000002d8 <__cxa_guard_acquire>:

extern "C" int __cxa_guard_acquire(__guard *); 
extern "C" void __cxa_guard_release (__guard *); 
extern "C" void __cxa_guard_abort (__guard *); 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);}; 
     2d8:	fc 01       	movw	r30, r24
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	88 23       	and	r24, r24
     2e2:	11 f4       	brne	.+4      	; 0x2e8 <__cxa_guard_acquire+0x10>
     2e4:	21 e0       	ldi	r18, 0x01	; 1
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	c9 01       	movw	r24, r18
     2ea:	08 95       	ret

000002ec <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;}; 
     2ec:	fc 01       	movw	r30, r24
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	80 83       	st	Z, r24
     2f2:	08 95       	ret

000002f4 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
     2f4:	08 95       	ret

000002f6 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void); 
void __cxa_pure_virtual(void) {}; 
     2f6:	08 95       	ret

000002f8 <_Z15button_debounceiPi>:
	i2c_write(u_outputByte0.outputByte0);
	i2c_write(u_outputByte1.outputByte1);
	i2c_stop();
}

bool button_debounce(int counter, int *pstateButton)
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	8c 01       	movw	r16, r24
     302:	eb 01       	movw	r28, r22
{
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && OrangutanDigital::isInputHigh(IO_D0)){
     304:	88 81       	ld	r24, Y
     306:	99 81       	ldd	r25, Y+1	; 0x01
     308:	89 2b       	or	r24, r25
     30a:	69 f4       	brne	.+26     	; 0x326 <_Z15button_debounceiPi+0x2e>
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     312:	88 23       	and	r24, r24
     314:	41 f0       	breq	.+16     	; 0x326 <_Z15button_debounceiPi+0x2e>
		counterRefPush = counter;
     316:	10 93 a7 03 	sts	0x03A7, r17
     31a:	00 93 a6 03 	sts	0x03A6, r16
		*pstateButton = PRESSED;
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	99 83       	std	Y+1, r25	; 0x01
     324:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     326:	88 81       	ld	r24, Y
     328:	99 81       	ldd	r25, Y+1	; 0x01
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f9 f4       	brne	.+62     	; 0x36c <_Z15button_debounceiPi+0x74>
		if(counter - counterRefPush > 15){
     32e:	80 91 a6 03 	lds	r24, 0x03A6
     332:	90 91 a7 03 	lds	r25, 0x03A7
     336:	98 01       	movw	r18, r16
     338:	28 1b       	sub	r18, r24
     33a:	39 0b       	sbc	r19, r25
     33c:	20 31       	cpi	r18, 0x10	; 16
     33e:	31 05       	cpc	r19, r1
     340:	74 f0       	brlt	.+28     	; 0x35e <_Z15button_debounceiPi+0x66>
			if(!OrangutanDigital::isInputHigh(IO_D0)){
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     348:	88 23       	and	r24, r24
     34a:	81 f4       	brne	.+32     	; 0x36c <_Z15button_debounceiPi+0x74>
				counterRefRel = counter;
     34c:	10 93 a5 03 	sts	0x03A5, r17
     350:	00 93 a4 03 	sts	0x03A4, r16
				*pstateButton = RELEASED;
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	99 83       	std	Y+1, r25	; 0x01
     35a:	88 83       	st	Y, r24
     35c:	07 c0       	rjmp	.+14     	; 0x36c <_Z15button_debounceiPi+0x74>
			}
		}
		else if(!OrangutanDigital::isInputHigh(IO_D0)){
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     364:	88 23       	and	r24, r24
     366:	11 f4       	brne	.+4      	; 0x36c <_Z15button_debounceiPi+0x74>
			*pstateButton = NONE;
     368:	19 82       	std	Y+1, r1	; 0x01
     36a:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     36c:	88 81       	ld	r24, Y
     36e:	99 81       	ldd	r25, Y+1	; 0x01
     370:	02 97       	sbiw	r24, 0x02	; 2
     372:	d9 f4       	brne	.+54     	; 0x3aa <_Z15button_debounceiPi+0xb2>
		if(OrangutanDigital::isInputHigh(IO_D0)){
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     37a:	88 23       	and	r24, r24
     37c:	49 f0       	breq	.+18     	; 0x390 <_Z15button_debounceiPi+0x98>
			*pstateButton = PRESSED;
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	99 83       	std	Y+1, r25	; 0x01
     384:	88 83       	st	Y, r24
			counterRefPush = counter;
     386:	10 93 a7 03 	sts	0x03A7, r17
     38a:	00 93 a6 03 	sts	0x03A6, r16
     38e:	0d c0       	rjmp	.+26     	; 0x3aa <_Z15button_debounceiPi+0xb2>
		}
		else if(counter - counterRefRel > 15){
     390:	80 91 a4 03 	lds	r24, 0x03A4
     394:	90 91 a5 03 	lds	r25, 0x03A5
     398:	08 1b       	sub	r16, r24
     39a:	19 0b       	sbc	r17, r25
     39c:	00 31       	cpi	r16, 0x10	; 16
     39e:	11 05       	cpc	r17, r1
     3a0:	24 f0       	brlt	.+8      	; 0x3aa <_Z15button_debounceiPi+0xb2>
			*pstateButton = NONE;
     3a2:	19 82       	std	Y+1, r1	; 0x01
     3a4:	18 82       	st	Y, r1
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <_Z15button_debounceiPi+0xb4>
			return true;
     3aa:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	08 95       	ret

000003b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>:
	OrangutanLCD::print("END");
	}
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor, int totalStepLength1, int totalStepLength2, int totalStepLength3, int totalStepLength4, int totalStepLength5, int highLength1, int highLength2, int highLength3, int highLength4, int highLength5)
     3b6:	2f 92       	push	r2
     3b8:	3f 92       	push	r3
     3ba:	4f 92       	push	r4
     3bc:	5f 92       	push	r5
     3be:	6f 92       	push	r6
     3c0:	7f 92       	push	r7
     3c2:	8f 92       	push	r8
     3c4:	9f 92       	push	r9
     3c6:	af 92       	push	r10
     3c8:	bf 92       	push	r11
     3ca:	cf 92       	push	r12
     3cc:	df 92       	push	r13
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	df 93       	push	r29
     3d8:	cf 93       	push	r28
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	2c 01       	movw	r4, r24
     3e0:	1a 01       	movw	r2, r20
     3e2:	39 01       	movw	r6, r18
{
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     3e4:	fc 01       	movw	r30, r24
     3e6:	e6 1b       	sub	r30, r22
     3e8:	f7 0b       	sbc	r31, r23
     3ea:	cf 01       	movw	r24, r30
     3ec:	b4 01       	movw	r22, r8
     3ee:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divmodhi4>
     3f2:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3f4:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3f6:	82 17       	cp	r24, r18
     3f8:	93 07       	cpc	r25, r19
     3fa:	34 f4       	brge	.+12     	; 0x408 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
     3fc:	67 28       	or	r6, r7
     3fe:	21 f0       	breq	.+8      	; 0x408 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     400:	80 91 9e 03 	lds	r24, 0x039E
     404:	81 60       	ori	r24, 0x01	; 1
     406:	03 c0       	rjmp	.+6      	; 0x40e <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x58>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     408:	80 91 9e 03 	lds	r24, 0x039E
     40c:	8e 7f       	andi	r24, 0xFE	; 254
     40e:	80 93 9e 03 	sts	0x039E, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     412:	cf 01       	movw	r24, r30
     414:	6d 89       	ldd	r22, Y+21	; 0x15
     416:	7e 89       	ldd	r23, Y+22	; 0x16
     418:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divmodhi4>
     41c:	2f 8d       	ldd	r18, Y+31	; 0x1f
     41e:	38 a1       	ldd	r19, Y+32	; 0x20
     420:	82 17       	cp	r24, r18
     422:	93 07       	cpc	r25, r19
     424:	34 f4       	brge	.+12     	; 0x432 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
     426:	01 2b       	or	r16, r17
     428:	21 f0       	breq	.+8      	; 0x432 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     42a:	80 91 9e 03 	lds	r24, 0x039E
     42e:	88 60       	ori	r24, 0x08	; 8
     430:	03 c0       	rjmp	.+6      	; 0x438 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x82>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     432:	80 91 9e 03 	lds	r24, 0x039E
     436:	87 7f       	andi	r24, 0xF7	; 247
     438:	80 93 9e 03 	sts	0x039E, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     43c:	cf 01       	movw	r24, r30
     43e:	6f 89       	ldd	r22, Y+23	; 0x17
     440:	78 8d       	ldd	r23, Y+24	; 0x18
     442:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divmodhi4>
     446:	29 a1       	ldd	r18, Y+33	; 0x21
     448:	3a a1       	ldd	r19, Y+34	; 0x22
     44a:	82 17       	cp	r24, r18
     44c:	93 07       	cpc	r25, r19
     44e:	34 f4       	brge	.+12     	; 0x45c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
     450:	ef 28       	or	r14, r15
     452:	21 f0       	breq	.+8      	; 0x45c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     454:	80 91 9e 03 	lds	r24, 0x039E
     458:	80 64       	ori	r24, 0x40	; 64
     45a:	03 c0       	rjmp	.+6      	; 0x462 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xac>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     45c:	80 91 9e 03 	lds	r24, 0x039E
     460:	8f 7b       	andi	r24, 0xBF	; 191
     462:	80 93 9e 03 	sts	0x039E, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     466:	cf 01       	movw	r24, r30
     468:	69 8d       	ldd	r22, Y+25	; 0x19
     46a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     46c:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divmodhi4>
     470:	2b a1       	ldd	r18, Y+35	; 0x23
     472:	3c a1       	ldd	r19, Y+36	; 0x24
     474:	82 17       	cp	r24, r18
     476:	93 07       	cpc	r25, r19
     478:	34 f4       	brge	.+12     	; 0x486 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
     47a:	cd 28       	or	r12, r13
     47c:	21 f0       	breq	.+8      	; 0x486 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     47e:	80 91 9f 03 	lds	r24, 0x039F
     482:	82 60       	ori	r24, 0x02	; 2
     484:	03 c0       	rjmp	.+6      	; 0x48c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd6>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     486:	80 91 9f 03 	lds	r24, 0x039F
     48a:	8d 7f       	andi	r24, 0xFD	; 253
     48c:	80 93 9f 03 	sts	0x039F, r24
	}

	if( ((counter - counterRefFive) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     490:	c2 01       	movw	r24, r4
     492:	82 19       	sub	r24, r2
     494:	93 09       	sbc	r25, r3
     496:	6b 8d       	ldd	r22, Y+27	; 0x1b
     498:	7c 8d       	ldd	r23, Y+28	; 0x1c
     49a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divmodhi4>
     49e:	2d a1       	ldd	r18, Y+37	; 0x25
     4a0:	3e a1       	ldd	r19, Y+38	; 0x26
     4a2:	82 17       	cp	r24, r18
     4a4:	93 07       	cpc	r25, r19
     4a6:	34 f4       	brge	.+12     	; 0x4b4 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
     4a8:	ab 28       	or	r10, r11
     4aa:	21 f0       	breq	.+8      	; 0x4b4 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     4ac:	80 91 9f 03 	lds	r24, 0x039F
     4b0:	80 61       	ori	r24, 0x10	; 16
     4b2:	03 c0       	rjmp	.+6      	; 0x4ba <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x104>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     4b4:	80 91 9f 03 	lds	r24, 0x039F
     4b8:	8f 7e       	andi	r24, 0xEF	; 239
     4ba:	80 93 9f 03 	sts	0x039F, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     4be:	80 e4       	ldi	r24, 0x40	; 64
     4c0:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
	i2c_write(0x2);									// write command byte
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     4ca:	80 91 9e 03 	lds	r24, 0x039E
     4ce:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     4d2:	80 91 9f 03 	lds	r24, 0x039F
     4d6:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
	i2c_stop();                            // set stop conditon = release bus
     4da:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>

	i2c_start(I2C2+I2C_WRITE);
     4de:	82 e4       	ldi	r24, 0x42	; 66
     4e0:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
	i2c_write(0x2);
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
	i2c_write(u_outputByte0.outputByte0);
     4ea:	80 91 a0 03 	lds	r24, 0x03A0
     4ee:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
	i2c_write(u_outputByte1.outputByte1);
     4f2:	80 91 a1 03 	lds	r24, 0x03A1
     4f6:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
	i2c_stop();
     4fa:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>
}
     4fe:	cf 91       	pop	r28
     500:	df 91       	pop	r29
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	df 90       	pop	r13
     50c:	cf 90       	pop	r12
     50e:	bf 90       	pop	r11
     510:	af 90       	pop	r10
     512:	9f 90       	pop	r9
     514:	8f 90       	pop	r8
     516:	7f 90       	pop	r7
     518:	6f 90       	pop	r6
     51a:	5f 90       	pop	r5
     51c:	4f 90       	pop	r4
     51e:	3f 90       	pop	r3
     520:	2f 90       	pop	r2
     522:	08 95       	ret

00000524 <main>:
//int button_debounce(int counter, int *pcounterRefPush, int *pcounterRefRel, int *pstateButton);

bool button_debounce(int counter, int *pstateButton);


int main()   
     524:	2f 92       	push	r2
     526:	3f 92       	push	r3
     528:	4f 92       	push	r4
     52a:	5f 92       	push	r5
     52c:	6f 92       	push	r6
     52e:	7f 92       	push	r7
     530:	8f 92       	push	r8
     532:	9f 92       	push	r9
     534:	af 92       	push	r10
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	df 93       	push	r29
     546:	cf 93       	push	r28
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	ce 54       	subi	r28, 0x4E	; 78
     54e:	d0 40       	sbci	r29, 0x00	; 0
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	print35 = 1;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     55a:	1a 82       	std	Y+2, r1	; 0x02
     55c:	19 82       	std	Y+1, r1	; 0x01
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     55e:	10 92 9e 03 	sts	0x039E, r1
	u_motorByte1.motorByte1 = 0;  // initialize motorByte1
     562:	10 92 9f 03 	sts	0x039F, r1
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	80 93 a0 03 	sts	0x03A0, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
     56c:	80 93 a1 03 	sts	0x03A1, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
     570:	10 92 a2 03 	sts	0x03A2, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
     574:	10 92 a3 03 	sts	0x03A3, r1
	
	OrangutanLCD::clear();
     578:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("DASCH CLEANER 2");
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
	OrangutanLCD::gotoXY(0,1);
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	61 e0       	ldi	r22, 0x01	; 1
     588:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
	OrangutanLCD::print("REV: 28");
     58c:	80 e1       	ldi	r24, 0x10	; 16
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
// another C++ file.
inline unsigned long get_ms() { return OrangutanTime::ms(); }
inline unsigned long millis() { return OrangutanTime::ms(); }

inline void delay(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
inline void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
     594:	80 ed       	ldi	r24, 0xD0	; 208
     596:	97 e0       	ldi	r25, 0x07	; 7
     598:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
	delay_ms(2000);
	
	OrangutanLCD::clear();
     59c:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("BEGIN ");
     5a0:	88 e1       	ldi	r24, 0x18	; 24
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     5a8:	88 ee       	ldi	r24, 0xE8	; 232
     5aa:	93 e0       	ldi	r25, 0x03	; 3
     5ac:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
	
	delay_ms(1000);

    i2c_init();                                // init I2C interface
     5b0:	0e 94 56 19 	call	0x32ac	; 0x32ac <_Z8i2c_initv>
	
    OrangutanLCD::print("INIT ");
     5b4:	8f e1       	ldi	r24, 0x1F	; 31
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
     5bc:	80 e4       	ldi	r24, 0x40	; 64
     5be:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
     5c2:	c8 2e       	mov	r12, r24
	i2c_stop();
     5c4:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
     5c8:	82 e4       	ldi	r24, 0x42	; 66
     5ca:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
     5ce:	08 2f       	mov	r16, r24
	i2c_stop();
     5d0:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
     5d4:	84 e4       	ldi	r24, 0x44	; 68
     5d6:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
     5da:	e8 2e       	mov	r14, r24
	i2c_stop();
     5dc:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>
    
	OrangutanLCD::clear();
     5e0:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("START ");
     5e4:	85 e2       	ldi	r24, 0x25	; 37
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
     5ec:	10 e0       	ldi	r17, 0x00	; 0
     5ee:	dd 24       	eor	r13, r13
     5f0:	0c 29       	or	r16, r12
     5f2:	1d 29       	or	r17, r13
     5f4:	ff 24       	eor	r15, r15
     5f6:	0e 29       	or	r16, r14
     5f8:	1f 29       	or	r17, r15
     5fa:	01 2b       	or	r16, r17
     5fc:	61 f0       	breq	.+24     	; 0x616 <main+0xf2>
        /* failed to issue start condition(s), possibly no device found */
        
		OrangutanLCD::print("NAK ");
     5fe:	8c e2       	ldi	r24, 0x2C	; 44
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
		i2c_stop();
     606:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>
		OrangutanLCD::print("STOP ");
     60a:	81 e3       	ldi	r24, 0x31	; 49
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     612:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <main+0x2d14>
    }
	else {
		OrangutanLCD::print("ACK ");
     616:	87 e3       	ldi	r24, 0x37	; 55
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
        /* issuing start conditions ok, devices accessible */
		OrangutanLCD::print("BINIT ");
     61e:	8c e3       	ldi	r24, 0x3C	; 60
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
     626:	80 e4       	ldi	r24, 0x40	; 64
     628:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
		i2c_write(0x6);
     62c:	86 e0       	ldi	r24, 0x06	; 6
     62e:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
		i2c_write(0x0);
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
		i2c_write(0x0);
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
		i2c_stop();
     63e:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>

		i2c_start(I2C1+I2C_WRITE);
     642:	80 e4       	ldi	r24, 0x40	; 64
     644:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
		i2c_write(0x2);
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
     64e:	80 91 9e 03 	lds	r24, 0x039E
     652:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
     656:	80 91 9f 03 	lds	r24, 0x039F
     65a:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
		i2c_stop();
     65e:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>

		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
     662:	82 e4       	ldi	r24, 0x42	; 66
     664:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
		i2c_write(0x6);
     668:	86 e0       	ldi	r24, 0x06	; 6
     66a:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
		i2c_write(0x0);
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
		i2c_write(0x0);
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
		i2c_stop();
     67a:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>

		u_motorByte1.bits_in_motorByte1.enableAll = 0;	//Enables all motor drivers after startup
     67e:	80 91 9f 03 	lds	r24, 0x039F
     682:	8f 77       	andi	r24, 0x7F	; 127
     684:	80 93 9f 03 	sts	0x039F, r24
		i2c_start(I2C2+I2C_WRITE);
     688:	82 e4       	ldi	r24, 0x42	; 66
     68a:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
		i2c_write(0x2);
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
		i2c_write(u_outputByte0.outputByte0);
     694:	80 91 a0 03 	lds	r24, 0x03A0
     698:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
		i2c_write(u_outputByte1.outputByte1);
     69c:	80 91 a1 03 	lds	r24, 0x03A1
     6a0:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
		i2c_stop();
     6a4:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>
     6a8:	88 ee       	ldi	r24, 0xE8	; 232
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
		
		//Registers default to input, so I2C3 is fine already


		delay_ms(1000);
		OrangutanLCD::clear();
     6b0:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("SELECT MODE");
     6b4:	83 e4       	ldi	r24, 0x43	; 67
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     6bc:	ee 24       	eor	r14, r14
     6be:	ff 24       	eor	r15, r15
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     6c0:	c7 01       	movw	r24, r14
     6c2:	be 01       	movw	r22, r28
     6c4:	6f 5f       	subi	r22, 0xFF	; 255
     6c6:	7f 4f       	sbci	r23, 0xFF	; 255
     6c8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>
     6cc:	18 2f       	mov	r17, r24
			counter++;
     6ce:	08 94       	sec
     6d0:	e1 1c       	adc	r14, r1
     6d2:	f1 1c       	adc	r15, r1
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		OrangutanLCD::clear();
		OrangutanLCD::print("SELECT MODE");
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
     6dc:	11 23       	and	r17, r17
     6de:	81 f3       	breq	.-32     	; 0x6c0 <main+0x19c>
			counter++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		OrangutanLCD::clear();
     6e0:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>


		if(OrangutanDigital::isInputHigh(IO_D3))							//Tests if the switch is set to Maintenance Mode
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     6ea:	88 23       	and	r24, r24
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <main+0x1cc>
     6ee:	ec c4       	rjmp	.+2520   	; 0x10c8 <main+0xba4>
		{
			OrangutanLCD::print("MAINTENANCE");
     6f0:	8f e4       	ldi	r24, 0x4F	; 79
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     6f8:	88 ee       	ldi	r24, 0xE8	; 232
     6fa:	93 e0       	ldi	r25, 0x03	; 3
     6fc:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
			
			//initialize
			int print = 0;
			int submode = -1;

			OrangutanLCD::clear();
     700:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
			OrangutanLCD::print("SELECT SUB");
     704:	8b e5       	ldi	r24, 0x5B	; 91
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     70c:	ee 24       	eor	r14, r14
     70e:	ff 24       	eor	r15, r15
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     710:	c7 01       	movw	r24, r14
     712:	be 01       	movw	r22, r28
     714:	6f 5f       	subi	r22, 0xFF	; 255
     716:	7f 4f       	sbci	r23, 0xFF	; 255
     718:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>
     71c:	18 2f       	mov	r17, r24
				counter++;
     71e:	08 94       	sec
     720:	e1 1c       	adc	r14, r1
     722:	f1 1c       	adc	r15, r1
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>

			OrangutanLCD::clear();
			OrangutanLCD::print("SELECT SUB");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
     72c:	11 23       	and	r17, r17
     72e:	81 f3       	breq	.-32     	; 0x710 <main+0x1ec>
				counter++;
				delay_ms(1);
			}
			buttonTriggered = false;
			counter = 0;
			OrangutanLCD::clear();
     730:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
     734:	29 96       	adiw	r28, 0x09	; 9
     736:	1f ae       	std	Y+63, r1	; 0x3f
     738:	1e ae       	std	Y+62, r1	; 0x3e
     73a:	29 97       	sbiw	r28, 0x09	; 9
     73c:	23 96       	adiw	r28, 0x03	; 3
     73e:	1f ae       	std	Y+63, r1	; 0x3f
     740:	1e ae       	std	Y+62, r1	; 0x3e
     742:	23 97       	sbiw	r28, 0x03	; 3
     744:	22 24       	eor	r2, r2
     746:	33 24       	eor	r3, r3
     748:	66 24       	eor	r6, r6
     74a:	77 24       	eor	r7, r7
     74c:	2f ef       	ldi	r18, 0xFF	; 255
     74e:	3f ef       	ldi	r19, 0xFF	; 255
     750:	3a af       	std	Y+58, r19	; 0x3a
     752:	29 af       	std	Y+57, r18	; 0x39
     754:	44 24       	eor	r4, r4
     756:	55 24       	eor	r5, r5
     758:	2d 96       	adiw	r28, 0x0d	; 13
     75a:	1f ae       	std	Y+63, r1	; 0x3f
     75c:	1e ae       	std	Y+62, r1	; 0x3e
     75e:	2d 97       	sbiw	r28, 0x0d	; 13
     760:	2f 96       	adiw	r28, 0x0f	; 15
     762:	1f ae       	std	Y+63, r1	; 0x3f
     764:	1e ae       	std	Y+62, r1	; 0x3e
     766:	2f 97       	sbiw	r28, 0x0f	; 15
     768:	27 96       	adiw	r28, 0x07	; 7
     76a:	1f ae       	std	Y+63, r1	; 0x3f
     76c:	1e ae       	std	Y+62, r1	; 0x3e
     76e:	27 97       	sbiw	r28, 0x07	; 7
     770:	2b 96       	adiw	r28, 0x0b	; 11
     772:	1f ae       	std	Y+63, r1	; 0x3f
     774:	1e ae       	std	Y+62, r1	; 0x3e
     776:	2b 97       	sbiw	r28, 0x0b	; 11
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     778:	84 e4       	ldi	r24, 0x44	; 68
     77a:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     784:	85 e4       	ldi	r24, 0x45	; 69
     786:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     78a:	0e 94 c7 19 	call	0x338e	; 0x338e <_Z11i2c_readAckv>
     78e:	80 93 a2 03 	sts	0x03A2, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     792:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <_Z11i2c_readNakv>
     796:	80 93 a3 03 	sts	0x03A3, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     79a:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     79e:	c1 01       	movw	r24, r2
     7a0:	be 01       	movw	r22, r28
     7a2:	6f 5f       	subi	r22, 0xFF	; 255
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>
     7aa:	08 2f       	mov	r16, r24
							Output 			--     starts testing each output individually and ends after testing all outputs
							Motor			--     starts testing each motor individually and ends after testing all motors
							Multi motor		--     starts testing each the fixture motor with each of the brush motors

				*/
				if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != INPUT){
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     7b2:	88 23       	and	r24, r24
     7b4:	11 f0       	breq	.+4      	; 0x7ba <main+0x296>
     7b6:	0c 94 22 19 	jmp	0x3244	; 0x3244 <main+0x2d20>
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     7c0:	88 23       	and	r24, r24
     7c2:	11 f0       	breq	.+4      	; 0x7c8 <main+0x2a4>
     7c4:	0c 94 22 19 	jmp	0x3244	; 0x3244 <main+0x2d20>
     7c8:	49 ad       	ldd	r20, Y+57	; 0x39
     7ca:	5a ad       	ldd	r21, Y+58	; 0x3a
     7cc:	45 2b       	or	r20, r21
     7ce:	11 f4       	brne	.+4      	; 0x7d4 <main+0x2b0>
     7d0:	0c 94 22 19 	jmp	0x3244	; 0x3244 <main+0x2d20>
					state = S0;
					submode = INPUT;
					OrangutanLCD::clear();
     7d4:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     7d8:	86 e6       	ldi	r24, 0x66	; 102
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	61 e0       	ldi	r22, 0x01	; 1
     7e4:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
     7e8:	11 e0       	ldi	r17, 0x01	; 1
     7ea:	66 24       	eor	r6, r6
     7ec:	77 24       	eor	r7, r7
     7ee:	1a ae       	std	Y+58, r1	; 0x3a
     7f0:	19 ae       	std	Y+57, r1	; 0x39
     7f2:	44 24       	eor	r4, r4
     7f4:	55 24       	eor	r5, r5
					print = 0;
					switched = true;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != OUTPUT){
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     7fc:	88 23       	and	r24, r24
     7fe:	e9 f0       	breq	.+58     	; 0x83a <main+0x316>
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     806:	88 23       	and	r24, r24
     808:	c1 f4       	brne	.+48     	; 0x83a <main+0x316>
     80a:	89 ad       	ldd	r24, Y+57	; 0x39
     80c:	9a ad       	ldd	r25, Y+58	; 0x3a
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	a1 f0       	breq	.+40     	; 0x83a <main+0x316>
					state = O0_ON;
					submode = OUTPUT;
					OrangutanLCD::clear();
     812:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("OUTPUTS");
     816:	8e e6       	ldi	r24, 0x6E	; 110
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
     826:	11 e0       	ldi	r17, 0x01	; 1
     828:	66 24       	eor	r6, r6
     82a:	77 24       	eor	r7, r7
     82c:	a1 e0       	ldi	r26, 0x01	; 1
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	ba af       	std	Y+58, r27	; 0x3a
     832:	a9 af       	std	Y+57, r26	; 0x39
     834:	38 e0       	ldi	r19, 0x08	; 8
     836:	43 2e       	mov	r4, r19
     838:	51 2c       	mov	r5, r1
					print = 0;
					switched = true;
				}
				if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != MOTOR){
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     840:	88 23       	and	r24, r24
     842:	19 f5       	brne	.+70     	; 0x88a <main+0x366>
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     84a:	88 23       	and	r24, r24
     84c:	f1 f0       	breq	.+60     	; 0x88a <main+0x366>
     84e:	29 ad       	ldd	r18, Y+57	; 0x39
     850:	3a ad       	ldd	r19, Y+58	; 0x3a
     852:	22 30       	cpi	r18, 0x02	; 2
     854:	31 05       	cpc	r19, r1
     856:	c9 f0       	breq	.+50     	; 0x88a <main+0x366>
					state = M1_F;
					submode = MOTOR;
					OrangutanLCD::clear();
     858:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MOTORS ");
     85c:	86 e7       	ldi	r24, 0x76	; 118
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
					print = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     86c:	80 91 9e 03 	lds	r24, 0x039E
     870:	84 60       	ori	r24, 0x04	; 4
     872:	80 93 9e 03 	sts	0x039E, r24
     876:	11 e0       	ldi	r17, 0x01	; 1
     878:	66 24       	eor	r6, r6
     87a:	77 24       	eor	r7, r7
     87c:	42 e0       	ldi	r20, 0x02	; 2
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	5a af       	std	Y+58, r21	; 0x3a
     882:	49 af       	std	Y+57, r20	; 0x39
     884:	20 e2       	ldi	r18, 0x20	; 32
     886:	42 2e       	mov	r4, r18
     888:	51 2c       	mov	r5, r1
					switched = true;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != MULTI){
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     890:	88 23       	and	r24, r24
     892:	11 f4       	brne	.+4      	; 0x898 <main+0x374>
     894:	0c 94 25 19 	jmp	0x324a	; 0x324a <main+0x2d26>
     898:	82 e0       	ldi	r24, 0x02	; 2
     89a:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     89e:	88 23       	and	r24, r24
     8a0:	11 f4       	brne	.+4      	; 0x8a6 <main+0x382>
     8a2:	0c 94 25 19 	jmp	0x324a	; 0x324a <main+0x2d26>
     8a6:	89 ad       	ldd	r24, Y+57	; 0x39
     8a8:	9a ad       	ldd	r25, Y+58	; 0x3a
     8aa:	03 97       	sbiw	r24, 0x03	; 3
     8ac:	11 f4       	brne	.+4      	; 0x8b2 <main+0x38e>
     8ae:	0c 94 25 19 	jmp	0x324a	; 0x324a <main+0x2d26>
					state = M2_AND_M3;
					submode = MULTI;
					OrangutanLCD::clear();
     8b2:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MULTI ");
     8b6:	8e e7       	ldi	r24, 0x7E	; 126
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
					print = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     8c6:	66 24       	eor	r6, r6
     8c8:	77 24       	eor	r7, r7
     8ca:	a3 e0       	ldi	r26, 0x03	; 3
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	ba af       	std	Y+58, r27	; 0x3a
     8d0:	a9 af       	std	Y+57, r26	; 0x39
     8d2:	9a e2       	ldi	r25, 0x2A	; 42
     8d4:	49 2e       	mov	r4, r25
     8d6:	51 2c       	mov	r5, r1
					plateLoadMotor = 0;
					fixtureMotor = 0;
					brush1Motor = 0;
					brush2Motor = 0;
					paperTowelMotor = 0;
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
     8d8:	8f ef       	ldi	r24, 0xFF	; 255
     8da:	80 93 a0 03 	sts	0x03A0, r24
					u_outputByte1.outputByte1 = 255;  // reset outputByte1
     8de:	80 93 a1 03 	sts	0x03A1, r24
					u_motorByte0.motorByte0 = 0;	  // reset motorByte0
     8e2:	10 92 9e 03 	sts	0x039E, r1
					u_motorByte1.motorByte1 = 0;	  // reset motorByte1
     8e6:	10 92 9f 03 	sts	0x039F, r1
     8ea:	29 96       	adiw	r28, 0x09	; 9
     8ec:	1f ae       	std	Y+63, r1	; 0x3f
     8ee:	1e ae       	std	Y+62, r1	; 0x3e
     8f0:	29 97       	sbiw	r28, 0x09	; 9
     8f2:	2d 96       	adiw	r28, 0x0d	; 13
     8f4:	1f ae       	std	Y+63, r1	; 0x3f
     8f6:	1e ae       	std	Y+62, r1	; 0x3e
     8f8:	2d 97       	sbiw	r28, 0x0d	; 13
     8fa:	2f 96       	adiw	r28, 0x0f	; 15
     8fc:	1f ae       	std	Y+63, r1	; 0x3f
     8fe:	1e ae       	std	Y+62, r1	; 0x3e
     900:	2f 97       	sbiw	r28, 0x0f	; 15
     902:	27 96       	adiw	r28, 0x07	; 7
     904:	1f ae       	std	Y+63, r1	; 0x3f
     906:	1e ae       	std	Y+62, r1	; 0x3e
     908:	27 97       	sbiw	r28, 0x07	; 7
     90a:	2b 96       	adiw	r28, 0x0b	; 11
     90c:	1f ae       	std	Y+63, r1	; 0x3f
     90e:	1e ae       	std	Y+62, r1	; 0x3e
     910:	2b 97       	sbiw	r28, 0x0b	; 11
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
     912:	00 23       	and	r16, r16
     914:	09 f4       	brne	.+2      	; 0x918 <main+0x3f4>
     916:	de c0       	rjmp	.+444    	; 0xad4 <main+0x5b0>
					if(state <= S7){				//if it's doing the sensors
     918:	b8 e0       	ldi	r27, 0x08	; 8
     91a:	4b 16       	cp	r4, r27
     91c:	51 04       	cpc	r5, r1
     91e:	6c f4       	brge	.+26     	; 0x93a <main+0x416>
						OrangutanLCD::gotoXY(0,1);
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
						buttonTriggered = false;
						state ++;
     928:	08 94       	sec
     92a:	41 1c       	adc	r4, r1
     92c:	51 1c       	adc	r5, r1
						counterRef = counter;
						print = 0;
						if(state == S7 + 1){		//accounts for end of maintenance mode after sensors
     92e:	28 e0       	ldi	r18, 0x08	; 8
     930:	42 16       	cp	r4, r18
     932:	51 04       	cpc	r5, r1
     934:	09 f0       	breq	.+2      	; 0x938 <main+0x414>
     936:	c8 c0       	rjmp	.+400    	; 0xac8 <main+0x5a4>
     938:	1b c0       	rjmp	.+54     	; 0x970 <main+0x44c>
							OrangutanLCD::clear();
							state = DONEM;
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
     93a:	30 e2       	ldi	r19, 0x20	; 32
     93c:	43 16       	cp	r4, r19
     93e:	51 04       	cpc	r5, r1
     940:	dc f4       	brge	.+54     	; 0x978 <main+0x454>
						if(state % 2 == 0){			//current state is an 'on' state
     942:	40 fc       	sbrc	r4, 0
     944:	09 c0       	rjmp	.+18     	; 0x958 <main+0x434>
							OrangutanLCD::gotoXY(13,1);
     946:	8d e0       	ldi	r24, 0x0D	; 13
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("OFF");
     94e:	85 e8       	ldi	r24, 0x85	; 133
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     956:	04 c0       	rjmp	.+8      	; 0x960 <main+0x43c>
						}
						else{						//current state is an 'off' state
							OrangutanLCD::gotoXY(0,1);
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
						}
						buttonTriggered = false;
						state ++;
     960:	08 94       	sec
     962:	41 1c       	adc	r4, r1
     964:	51 1c       	adc	r5, r1
						counterRef = counter;
						print = 0;
						if(state == O11_OFF + 1){	//accounts for end of maintenance mode after outputs
     966:	40 e2       	ldi	r20, 0x20	; 32
     968:	44 16       	cp	r4, r20
     96a:	51 04       	cpc	r5, r1
     96c:	09 f0       	breq	.+2      	; 0x970 <main+0x44c>
     96e:	ac c0       	rjmp	.+344    	; 0xac8 <main+0x5a4>
							OrangutanLCD::clear();
     970:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
     974:	0c 94 45 19 	jmp	0x328a	; 0x328a <main+0x2d66>
     978:	82 01       	movw	r16, r4
     97a:	0f 5f       	subi	r16, 0xFF	; 255
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
							state = DONEM;
						}
					}
					else if(state <= M5_B){							//if it's doing the motors
     97e:	5a e2       	ldi	r21, 0x2A	; 42
     980:	45 16       	cp	r4, r21
     982:	51 04       	cpc	r5, r1
     984:	0c f0       	brlt	.+2      	; 0x988 <main+0x464>
     986:	72 c0       	rjmp	.+228    	; 0xa6c <main+0x548>
						buttonTriggered = false;
						state ++;
						counterRef = counter;
						print = 0;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
     988:	40 fc       	sbrc	r4, 0
     98a:	09 c0       	rjmp	.+18     	; 0x99e <main+0x47a>
							OrangutanLCD::gotoXY(11,1);
     98c:	8b e0       	ldi	r24, 0x0B	; 11
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("BACK ");
     994:	89 e8       	ldi	r24, 0x89	; 137
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     99c:	14 c0       	rjmp	.+40     	; 0x9c6 <main+0x4a2>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
     99e:	06 32       	cpi	r16, 0x26	; 38
     9a0:	11 05       	cpc	r17, r1
     9a2:	c9 f1       	breq	.+114    	; 0xa16 <main+0x4f2>
     9a4:	07 32       	cpi	r16, 0x27	; 39
     9a6:	11 05       	cpc	r17, r1
     9a8:	3c f4       	brge	.+14     	; 0x9b8 <main+0x494>
     9aa:	02 32       	cpi	r16, 0x22	; 34
     9ac:	11 05       	cpc	r17, r1
     9ae:	89 f0       	breq	.+34     	; 0x9d2 <main+0x4ae>
     9b0:	04 32       	cpi	r16, 0x24	; 36
     9b2:	11 05       	cpc	r17, r1
     9b4:	41 f4       	brne	.+16     	; 0x9c6 <main+0x4a2>
     9b6:	1c c0       	rjmp	.+56     	; 0x9f0 <main+0x4cc>
     9b8:	08 32       	cpi	r16, 0x28	; 40
     9ba:	11 05       	cpc	r17, r1
     9bc:	d9 f1       	breq	.+118    	; 0xa34 <main+0x510>
     9be:	0a 32       	cpi	r16, 0x2A	; 42
     9c0:	11 05       	cpc	r17, r1
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <main+0x4a2>
     9c4:	46 c0       	rjmp	.+140    	; 0xa52 <main+0x52e>
     9c6:	23 96       	adiw	r28, 0x03	; 3
     9c8:	3f ae       	std	Y+63, r3	; 0x3f
     9ca:	2e ae       	std	Y+62, r2	; 0x3e
     9cc:	23 97       	sbiw	r28, 0x03	; 3
     9ce:	28 01       	movw	r4, r16
     9d0:	7f c0       	rjmp	.+254    	; 0xad0 <main+0x5ac>
								case M1_B + 1:
									OrangutanLCD::gotoXY(0,1);
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	61 e0       	ldi	r22, 0x01	; 1
     9d6:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
     9da:	80 91 9e 03 	lds	r24, 0x039E
     9de:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     9e0:	80 62       	ori	r24, 0x20	; 32
     9e2:	80 93 9e 03 	sts	0x039E, r24
     9e6:	23 96       	adiw	r28, 0x03	; 3
     9e8:	3f ae       	std	Y+63, r3	; 0x3f
     9ea:	2e ae       	std	Y+62, r2	; 0x3e
     9ec:	23 97       	sbiw	r28, 0x03	; 3
     9ee:	24 c2       	rjmp	.+1096   	; 0xe38 <main+0x914>
									break;
								case M2_B + 1:
									OrangutanLCD::gotoXY(0,1);
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     9f8:	80 91 9e 03 	lds	r24, 0x039E
     9fc:	8f 7d       	andi	r24, 0xDF	; 223
     9fe:	80 93 9e 03 	sts	0x039E, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     a02:	80 91 9f 03 	lds	r24, 0x039F
     a06:	81 60       	ori	r24, 0x01	; 1
     a08:	80 93 9f 03 	sts	0x039F, r24
     a0c:	23 96       	adiw	r28, 0x03	; 3
     a0e:	3f ae       	std	Y+63, r3	; 0x3f
     a10:	2e ae       	std	Y+62, r2	; 0x3e
     a12:	23 97       	sbiw	r28, 0x03	; 3
     a14:	3a c2       	rjmp	.+1140   	; 0xe8a <main+0x966>
									break;
								case M3_B + 1:
									OrangutanLCD::gotoXY(0,1);
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	61 e0       	ldi	r22, 0x01	; 1
     a1a:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
     a1e:	80 91 9f 03 	lds	r24, 0x039F
     a22:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     a24:	88 60       	ori	r24, 0x08	; 8
     a26:	80 93 9f 03 	sts	0x039F, r24
     a2a:	23 96       	adiw	r28, 0x03	; 3
     a2c:	3f ae       	std	Y+63, r3	; 0x3f
     a2e:	2e ae       	std	Y+62, r2	; 0x3e
     a30:	23 97       	sbiw	r28, 0x03	; 3
     a32:	54 c2       	rjmp	.+1192   	; 0xedc <main+0x9b8>
									break;
								case M4_B + 1:
									OrangutanLCD::gotoXY(0,1);
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	61 e0       	ldi	r22, 0x01	; 1
     a38:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     a3c:	80 91 9f 03 	lds	r24, 0x039F
     a40:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
     a42:	80 64       	ori	r24, 0x40	; 64
     a44:	80 93 9f 03 	sts	0x039F, r24
     a48:	23 96       	adiw	r28, 0x03	; 3
     a4a:	3f ae       	std	Y+63, r3	; 0x3f
     a4c:	2e ae       	std	Y+62, r2	; 0x3e
     a4e:	23 97       	sbiw	r28, 0x03	; 3
     a50:	6e c2       	rjmp	.+1244   	; 0xf2e <main+0xa0a>
									break;
								case M5_B + 1:
									OrangutanLCD::clear();
     a52:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
     a56:	80 91 9f 03 	lds	r24, 0x039F
     a5a:	8f 7b       	andi	r24, 0xBF	; 191
     a5c:	80 93 9f 03 	sts	0x039F, r24
     a60:	27 96       	adiw	r28, 0x07	; 7
     a62:	1f ae       	std	Y+63, r1	; 0x3f
     a64:	1e ae       	std	Y+62, r1	; 0x3e
     a66:	27 97       	sbiw	r28, 0x07	; 7
     a68:	0c 94 45 19 	jmp	0x328a	; 0x328a <main+0x2d66>
							}
						}
					}
					else{
						buttonTriggered = false;
						state ++;
     a6c:	28 01       	movw	r4, r16
						counterRef = counter;
						print = 0;
						switch(state){
     a6e:	0b 32       	cpi	r16, 0x2B	; 43
     a70:	11 05       	cpc	r17, r1
     a72:	21 f0       	breq	.+8      	; 0xa7c <main+0x558>
     a74:	0c 32       	cpi	r16, 0x2C	; 44
     a76:	11 05       	cpc	r17, r1
     a78:	39 f5       	brne	.+78     	; 0xac8 <main+0x5a4>
     a7a:	10 c0       	rjmp	.+32     	; 0xa9c <main+0x578>
							case M2_AND_M3 + 1:
								u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
     a7c:	90 91 9f 03 	lds	r25, 0x039F
     a80:	9e 7f       	andi	r25, 0xFE	; 254
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     a82:	80 91 9e 03 	lds	r24, 0x039E
     a86:	80 62       	ori	r24, 0x20	; 32
     a88:	80 93 9e 03 	sts	0x039E, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     a8c:	98 60       	ori	r25, 0x08	; 8
     a8e:	90 93 9f 03 	sts	0x039F, r25
     a92:	23 96       	adiw	r28, 0x03	; 3
     a94:	3f ae       	std	Y+63, r3	; 0x3f
     a96:	2e ae       	std	Y+62, r2	; 0x3e
     a98:	23 97       	sbiw	r28, 0x03	; 3
     a9a:	a1 c2       	rjmp	.+1346   	; 0xfde <main+0xaba>
								break;
							case M2_AND_M4 + 1:
								OrangutanLCD::clear();
     a9c:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     aa0:	80 91 9e 03 	lds	r24, 0x039E
     aa4:	8f 7d       	andi	r24, 0xDF	; 223
     aa6:	80 93 9e 03 	sts	0x039E, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     aaa:	80 91 9f 03 	lds	r24, 0x039F
     aae:	87 7f       	andi	r24, 0xF7	; 247
     ab0:	80 93 9f 03 	sts	0x039F, r24
     ab4:	29 96       	adiw	r28, 0x09	; 9
     ab6:	1f ae       	std	Y+63, r1	; 0x3f
     ab8:	1e ae       	std	Y+62, r1	; 0x3e
     aba:	29 97       	sbiw	r28, 0x09	; 9
     abc:	2d 96       	adiw	r28, 0x0d	; 13
     abe:	1f ae       	std	Y+63, r1	; 0x3f
     ac0:	1e ae       	std	Y+62, r1	; 0x3e
     ac2:	2d 97       	sbiw	r28, 0x0d	; 13
     ac4:	0c 94 45 19 	jmp	0x328a	; 0x328a <main+0x2d66>
     ac8:	23 96       	adiw	r28, 0x03	; 3
     aca:	3f ae       	std	Y+63, r3	; 0x3f
     acc:	2e ae       	std	Y+62, r2	; 0x3e
     ace:	23 97       	sbiw	r28, 0x03	; 3
     ad0:	66 24       	eor	r6, r6
     ad2:	77 24       	eor	r7, r7
						}
					}
				}

				//state actions
				switch (state) {
     ad4:	f2 01       	movw	r30, r4
     ad6:	ec 32       	cpi	r30, 0x2C	; 44
     ad8:	f1 05       	cpc	r31, r1
     ada:	08 f0       	brcs	.+2      	; 0xade <main+0x5ba>
     adc:	98 c2       	rjmp	.+1328   	; 0x100e <main+0xaea>
     ade:	ea 5b       	subi	r30, 0xBA	; 186
     ae0:	ff 4f       	sbci	r31, 0xFF	; 255
     ae2:	ee 0f       	add	r30, r30
     ae4:	ff 1f       	adc	r31, r31
     ae6:	05 90       	lpm	r0, Z+
     ae8:	f4 91       	lpm	r31, Z+
     aea:	e0 2d       	mov	r30, r0
     aec:	09 94       	ijmp
					case S0:
						if(print == 0){
     aee:	61 14       	cp	r6, r1
     af0:	71 04       	cpc	r7, r1
     af2:	39 f4       	brne	.+14     	; 0xb02 <main+0x5de>
							OrangutanLCD::print("SENSOR 0");
     af4:	8f e8       	ldi	r24, 0x8F	; 143
     af6:	91 e0       	ldi	r25, 0x01	; 1
     af8:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	68 2e       	mov	r6, r24
     b00:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b02:	8f e0       	ldi	r24, 0x0F	; 15
     b04:	61 e0       	ldi	r22, 0x01	; 1
     b06:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
	// position and will not span lines.
	static void print(unsigned long value);
	static void print(long value);
	static inline void print(unsigned int value)
	{
		print((unsigned long)value);
     b0a:	60 91 a2 03 	lds	r22, 0x03A2
     b0e:	11 c0       	rjmp	.+34     	; 0xb32 <main+0x60e>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.plate);
						break;
					case S1:
						if(print == 0){
     b10:	61 14       	cp	r6, r1
     b12:	71 04       	cpc	r7, r1
     b14:	39 f4       	brne	.+14     	; 0xb24 <main+0x600>
							OrangutanLCD::print("SENSOR 1");
     b16:	88 e9       	ldi	r24, 0x98	; 152
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     b1e:	01 e0       	ldi	r16, 0x01	; 1
     b20:	60 2e       	mov	r6, r16
     b22:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b24:	8f e0       	ldi	r24, 0x0F	; 15
     b26:	61 e0       	ldi	r22, 0x01	; 1
     b28:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
     b2c:	60 91 a2 03 	lds	r22, 0x03A2
     b30:	66 95       	lsr	r22
     b32:	61 70       	andi	r22, 0x01	; 1
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN12OrangutanLCD5printEm>
     b3e:	67 c2       	rjmp	.+1230   	; 0x100e <main+0xaea>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureLift);
						break;
					case S2:
						if(print == 0){
     b40:	61 14       	cp	r6, r1
     b42:	71 04       	cpc	r7, r1
     b44:	39 f4       	brne	.+14     	; 0xb54 <main+0x630>
							OrangutanLCD::print("SENSOR 2");
     b46:	81 ea       	ldi	r24, 0xA1	; 161
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     b4e:	11 e0       	ldi	r17, 0x01	; 1
     b50:	61 2e       	mov	r6, r17
     b52:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b54:	8f e0       	ldi	r24, 0x0F	; 15
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
     b5c:	60 91 a2 03 	lds	r22, 0x03A2
     b60:	66 95       	lsr	r22
     b62:	66 95       	lsr	r22
     b64:	e6 cf       	rjmp	.-52     	; 0xb32 <main+0x60e>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureHome);
						break;
					case S3:
						if(print == 0){
     b66:	61 14       	cp	r6, r1
     b68:	71 04       	cpc	r7, r1
     b6a:	39 f4       	brne	.+14     	; 0xb7a <main+0x656>
							OrangutanLCD::print("SENSOR 3");
     b6c:	8a ea       	ldi	r24, 0xAA	; 170
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     b74:	b1 e0       	ldi	r27, 0x01	; 1
     b76:	6b 2e       	mov	r6, r27
     b78:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b7a:	8f e0       	ldi	r24, 0x0F	; 15
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
     b82:	60 91 a2 03 	lds	r22, 0x03A2
     b86:	66 95       	lsr	r22
     b88:	66 95       	lsr	r22
     b8a:	66 95       	lsr	r22
     b8c:	d2 cf       	rjmp	.-92     	; 0xb32 <main+0x60e>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixturePlate);
						break;
					case S4:
						if(print == 0){
     b8e:	61 14       	cp	r6, r1
     b90:	71 04       	cpc	r7, r1
     b92:	39 f4       	brne	.+14     	; 0xba2 <main+0x67e>
							OrangutanLCD::print("SENSOR 4");
     b94:	83 eb       	ldi	r24, 0xB3	; 179
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     b9c:	a1 e0       	ldi	r26, 0x01	; 1
     b9e:	6a 2e       	mov	r6, r26
     ba0:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     ba2:	8f e0       	ldi	r24, 0x0F	; 15
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
     baa:	60 91 a2 03 	lds	r22, 0x03A2
     bae:	62 95       	swap	r22
     bb0:	6f 70       	andi	r22, 0x0F	; 15
     bb2:	bf cf       	rjmp	.-130    	; 0xb32 <main+0x60e>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
						break;
					case S5:
						if(print == 0){
     bb4:	61 14       	cp	r6, r1
     bb6:	71 04       	cpc	r7, r1
     bb8:	39 f4       	brne	.+14     	; 0xbc8 <main+0x6a4>
							OrangutanLCD::print("SENSOR 5");
     bba:	8c eb       	ldi	r24, 0xBC	; 188
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     bc2:	f1 e0       	ldi	r31, 0x01	; 1
     bc4:	6f 2e       	mov	r6, r31
     bc6:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     bc8:	8f e0       	ldi	r24, 0x0F	; 15
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
     bd0:	60 91 a2 03 	lds	r22, 0x03A2
     bd4:	62 95       	swap	r22
     bd6:	66 95       	lsr	r22
     bd8:	67 70       	andi	r22, 0x07	; 7
     bda:	ab cf       	rjmp	.-170    	; 0xb32 <main+0x60e>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
						break;
					case S6:
						if(print == 0){
     bdc:	61 14       	cp	r6, r1
     bde:	71 04       	cpc	r7, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <main+0x6cc>
							OrangutanLCD::print("SENSOR 6");
     be2:	85 ec       	ldi	r24, 0xC5	; 197
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     bea:	e1 e0       	ldi	r30, 0x01	; 1
     bec:	6e 2e       	mov	r6, r30
     bee:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     bf0:	8f e0       	ldi	r24, 0x0F	; 15
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
     bf8:	60 91 a2 03 	lds	r22, 0x03A2
     bfc:	62 95       	swap	r22
     bfe:	66 95       	lsr	r22
     c00:	66 95       	lsr	r22
     c02:	63 70       	andi	r22, 0x03	; 3
     c04:	96 cf       	rjmp	.-212    	; 0xb32 <main+0x60e>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry1);
						break;
					case S7:
						if(print == 0){
     c06:	61 14       	cp	r6, r1
     c08:	71 04       	cpc	r7, r1
     c0a:	39 f4       	brne	.+14     	; 0xc1a <main+0x6f6>
							OrangutanLCD::print("SENSOR 7");
     c0c:	8e ec       	ldi	r24, 0xCE	; 206
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     c14:	71 e0       	ldi	r23, 0x01	; 1
     c16:	67 2e       	mov	r6, r23
     c18:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     c1a:	8f e0       	ldi	r24, 0x0F	; 15
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
     c22:	60 91 a2 03 	lds	r22, 0x03A2
     c26:	66 1f       	adc	r22, r22
     c28:	66 27       	eor	r22, r22
     c2a:	66 1f       	adc	r22, r22
     c2c:	83 cf       	rjmp	.-250    	; 0xb34 <main+0x610>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry2);
						break;
					case O0_ON:
						if(print == 0){
     c2e:	61 14       	cp	r6, r1
     c30:	71 04       	cpc	r7, r1
     c32:	39 f4       	brne	.+14     	; 0xc42 <main+0x71e>
							OrangutanLCD::print("AC POWER     ON ");
     c34:	87 ed       	ldi	r24, 0xD7	; 215
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	66 2e       	mov	r6, r22
     c40:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
     c42:	80 91 a0 03 	lds	r24, 0x03A0
     c46:	8e 7f       	andi	r24, 0xFE	; 254
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <main+0x72c>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
     c4a:	80 91 a0 03 	lds	r24, 0x03A0
     c4e:	81 60       	ori	r24, 0x01	; 1
     c50:	80 93 a0 03 	sts	0x03A0, r24
     c54:	dc c1       	rjmp	.+952    	; 0x100e <main+0xaea>
						break;
					case O1_ON:
						if(print == 0){
     c56:	61 14       	cp	r6, r1
     c58:	71 04       	cpc	r7, r1
     c5a:	39 f4       	brne	.+14     	; 0xc6a <main+0x746>
							OrangutanLCD::print("BLOWER       ON  ");
     c5c:	88 ee       	ldi	r24, 0xE8	; 232
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     c64:	51 e0       	ldi	r21, 0x01	; 1
     c66:	65 2e       	mov	r6, r21
     c68:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     c6a:	80 91 a0 03 	lds	r24, 0x03A0
     c6e:	8d 7f       	andi	r24, 0xFD	; 253
     c70:	ef cf       	rjmp	.-34     	; 0xc50 <main+0x72c>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     c72:	80 91 a0 03 	lds	r24, 0x03A0
     c76:	82 60       	ori	r24, 0x02	; 2
     c78:	eb cf       	rjmp	.-42     	; 0xc50 <main+0x72c>
						break;
					case O2_ON:
						if(print == 0){
     c7a:	61 14       	cp	r6, r1
     c7c:	71 04       	cpc	r7, r1
     c7e:	39 f4       	brne	.+14     	; 0xc8e <main+0x76a>
							OrangutanLCD::print("PLATE STOP   ON ");
     c80:	8a ef       	ldi	r24, 0xFA	; 250
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     c88:	41 e0       	ldi	r20, 0x01	; 1
     c8a:	64 2e       	mov	r6, r20
     c8c:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
     c8e:	80 91 a0 03 	lds	r24, 0x03A0
     c92:	8b 7f       	andi	r24, 0xFB	; 251
     c94:	dd cf       	rjmp	.-70     	; 0xc50 <main+0x72c>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
     c96:	80 91 a0 03 	lds	r24, 0x03A0
     c9a:	84 60       	ori	r24, 0x04	; 4
     c9c:	d9 cf       	rjmp	.-78     	; 0xc50 <main+0x72c>
						break;
					case O3_ON:
						if(print == 0){
     c9e:	61 14       	cp	r6, r1
     ca0:	71 04       	cpc	r7, r1
     ca2:	39 f4       	brne	.+14     	; 0xcb2 <main+0x78e>
							OrangutanLCD::print("PLATE RAISE  ON ");
     ca4:	8b e0       	ldi	r24, 0x0B	; 11
     ca6:	92 e0       	ldi	r25, 0x02	; 2
     ca8:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     cac:	31 e0       	ldi	r19, 0x01	; 1
     cae:	63 2e       	mov	r6, r19
     cb0:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     cb2:	80 91 a0 03 	lds	r24, 0x03A0
     cb6:	87 7f       	andi	r24, 0xF7	; 247
     cb8:	15 c0       	rjmp	.+42     	; 0xce4 <main+0x7c0>
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     cba:	80 91 a0 03 	lds	r24, 0x03A0
     cbe:	88 60       	ori	r24, 0x08	; 8
     cc0:	c7 cf       	rjmp	.-114    	; 0xc50 <main+0x72c>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(print == 0){
     cc2:	61 14       	cp	r6, r1
     cc4:	71 04       	cpc	r7, r1
     cc6:	39 f4       	brne	.+14     	; 0xcd6 <main+0x7b2>
							OrangutanLCD::print("PLATE LOWER  ON ");
     cc8:	8c e1       	ldi	r24, 0x1C	; 28
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	62 2e       	mov	r6, r18
     cd4:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     cd6:	80 91 a0 03 	lds	r24, 0x03A0
     cda:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     cdc:	8f 7e       	andi	r24, 0xEF	; 239
     cde:	b8 cf       	rjmp	.-144    	; 0xc50 <main+0x72c>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     ce0:	80 91 a0 03 	lds	r24, 0x03A0
     ce4:	80 61       	ori	r24, 0x10	; 16
     ce6:	b4 cf       	rjmp	.-152    	; 0xc50 <main+0x72c>
						break;
					case O5_ON:
						if(print == 0){
     ce8:	61 14       	cp	r6, r1
     cea:	71 04       	cpc	r7, r1
     cec:	39 f4       	brne	.+14     	; 0xcfc <main+0x7d8>
							OrangutanLCD::print("BRUSH1 RAISE ON ");
     cee:	8d e2       	ldi	r24, 0x2D	; 45
     cf0:	92 e0       	ldi	r25, 0x02	; 2
     cf2:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	69 2e       	mov	r6, r25
     cfa:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     cfc:	80 91 a0 03 	lds	r24, 0x03A0
     d00:	8f 7d       	andi	r24, 0xDF	; 223
     d02:	14 c0       	rjmp	.+40     	; 0xd2c <main+0x808>
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     d04:	80 91 a0 03 	lds	r24, 0x03A0
     d08:	0d c0       	rjmp	.+26     	; 0xd24 <main+0x800>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(print == 0){
     d0a:	61 14       	cp	r6, r1
     d0c:	71 04       	cpc	r7, r1
     d0e:	39 f4       	brne	.+14     	; 0xd1e <main+0x7fa>
							OrangutanLCD::print("BRUSH1 LOWER ON ");
     d10:	8e e3       	ldi	r24, 0x3E	; 62
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	68 2e       	mov	r6, r24
     d1c:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     d1e:	80 91 a0 03 	lds	r24, 0x03A0
     d22:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     d24:	80 62       	ori	r24, 0x20	; 32
     d26:	94 cf       	rjmp	.-216    	; 0xc50 <main+0x72c>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     d28:	80 91 a0 03 	lds	r24, 0x03A0
     d2c:	80 64       	ori	r24, 0x40	; 64
     d2e:	90 cf       	rjmp	.-224    	; 0xc50 <main+0x72c>
						break;
					case O7_ON:
						if(print == 0){
     d30:	61 14       	cp	r6, r1
     d32:	71 04       	cpc	r7, r1
     d34:	39 f4       	brne	.+14     	; 0xd44 <main+0x820>
							OrangutanLCD::print("BRUSH2 RAISE ON ");
     d36:	8f e4       	ldi	r24, 0x4F	; 79
     d38:	92 e0       	ldi	r25, 0x02	; 2
     d3a:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     d3e:	01 e0       	ldi	r16, 0x01	; 1
     d40:	60 2e       	mov	r6, r16
     d42:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     d44:	80 91 a0 03 	lds	r24, 0x03A0
     d48:	8f 77       	andi	r24, 0x7F	; 127
     d4a:	80 93 a0 03 	sts	0x03A0, r24
     d4e:	13 c0       	rjmp	.+38     	; 0xd76 <main+0x852>
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(print == 0){
     d50:	61 14       	cp	r6, r1
     d52:	71 04       	cpc	r7, r1
     d54:	39 f4       	brne	.+14     	; 0xd64 <main+0x840>
							OrangutanLCD::print("BRUSH2 LOWER ON ");
     d56:	80 e6       	ldi	r24, 0x60	; 96
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     d5e:	11 e0       	ldi	r17, 0x01	; 1
     d60:	61 2e       	mov	r6, r17
     d62:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     d64:	80 91 a1 03 	lds	r24, 0x03A1
     d68:	8e 7f       	andi	r24, 0xFE	; 254
     d6a:	80 93 a1 03 	sts	0x03A1, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     d6e:	80 91 a0 03 	lds	r24, 0x03A0
     d72:	80 68       	ori	r24, 0x80	; 128
     d74:	6d cf       	rjmp	.-294    	; 0xc50 <main+0x72c>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     d76:	80 91 a1 03 	lds	r24, 0x03A1
     d7a:	81 60       	ori	r24, 0x01	; 1
     d7c:	35 c0       	rjmp	.+106    	; 0xde8 <main+0x8c4>
						break;
					case O9_ON:
						if(print == 0){
     d7e:	61 14       	cp	r6, r1
     d80:	71 04       	cpc	r7, r1
     d82:	39 f4       	brne	.+14     	; 0xd92 <main+0x86e>
							OrangutanLCD::print("PAPER RAISE  ON ");
     d84:	81 e7       	ldi	r24, 0x71	; 113
     d86:	92 e0       	ldi	r25, 0x02	; 2
     d88:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     d8c:	b1 e0       	ldi	r27, 0x01	; 1
     d8e:	6b 2e       	mov	r6, r27
     d90:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     d92:	80 91 a1 03 	lds	r24, 0x03A1
     d96:	8d 7f       	andi	r24, 0xFD	; 253
     d98:	14 c0       	rjmp	.+40     	; 0xdc2 <main+0x89e>
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     d9a:	80 91 a1 03 	lds	r24, 0x03A1
     d9e:	0d c0       	rjmp	.+26     	; 0xdba <main+0x896>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(print == 0){
     da0:	61 14       	cp	r6, r1
     da2:	71 04       	cpc	r7, r1
     da4:	39 f4       	brne	.+14     	; 0xdb4 <main+0x890>
							OrangutanLCD::print("PAPER LOWER  ON ");
     da6:	82 e8       	ldi	r24, 0x82	; 130
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     dae:	a1 e0       	ldi	r26, 0x01	; 1
     db0:	6a 2e       	mov	r6, r26
     db2:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
     db4:	80 91 a1 03 	lds	r24, 0x03A1
     db8:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     dba:	82 60       	ori	r24, 0x02	; 2
     dbc:	15 c0       	rjmp	.+42     	; 0xde8 <main+0x8c4>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
     dbe:	80 91 a1 03 	lds	r24, 0x03A1
     dc2:	84 60       	ori	r24, 0x04	; 4
     dc4:	11 c0       	rjmp	.+34     	; 0xde8 <main+0x8c4>
						break;
					case O11_ON:
						if(print == 0){
     dc6:	61 14       	cp	r6, r1
     dc8:	71 04       	cpc	r7, r1
     dca:	39 f4       	brne	.+14     	; 0xdda <main+0x8b6>
							OrangutanLCD::print("AIR KNIFE    ON ");
     dcc:	83 e9       	ldi	r24, 0x93	; 147
     dce:	92 e0       	ldi	r25, 0x02	; 2
     dd0:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     dd4:	f1 e0       	ldi	r31, 0x01	; 1
     dd6:	6f 2e       	mov	r6, r31
     dd8:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
     dda:	80 91 a1 03 	lds	r24, 0x03A1
     dde:	87 7f       	andi	r24, 0xF7	; 247
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <main+0x8c4>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
     de2:	80 91 a1 03 	lds	r24, 0x03A1
     de6:	88 60       	ori	r24, 0x08	; 8
     de8:	80 93 a1 03 	sts	0x03A1, r24
     dec:	10 c1       	rjmp	.+544    	; 0x100e <main+0xaea>
						break;
					case M1_F:
						if(print == 0){
     dee:	61 14       	cp	r6, r1
     df0:	71 04       	cpc	r7, r1
     df2:	39 f4       	brne	.+14     	; 0xe02 <main+0x8de>
							OrangutanLCD::print("LOADING    FRONT");
     df4:	84 ea       	ldi	r24, 0xA4	; 164
     df6:	92 e0       	ldi	r25, 0x02	; 2
     df8:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     dfc:	e1 e0       	ldi	r30, 0x01	; 1
     dfe:	6e 2e       	mov	r6, r30
     e00:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     e02:	80 91 9e 03 	lds	r24, 0x039E
     e06:	8d 7f       	andi	r24, 0xFD	; 253
     e08:	80 93 9e 03 	sts	0x039E, r24
     e0c:	a1 e0       	ldi	r26, 0x01	; 1
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	2f 96       	adiw	r28, 0x0f	; 15
     e12:	bf af       	std	Y+63, r27	; 0x3f
     e14:	ae af       	std	Y+62, r26	; 0x3e
     e16:	2f 97       	sbiw	r28, 0x0f	; 15
     e18:	fa c0       	rjmp	.+500    	; 0x100e <main+0xaea>
						plateLoadMotor =  1;
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
     e1a:	80 91 9e 03 	lds	r24, 0x039E
     e1e:	82 60       	ori	r24, 0x02	; 2
     e20:	80 93 9e 03 	sts	0x039E, r24
     e24:	21 e0       	ldi	r18, 0x01	; 1
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	2f 96       	adiw	r28, 0x0f	; 15
     e2a:	3f af       	std	Y+63, r19	; 0x3f
     e2c:	2e af       	std	Y+62, r18	; 0x3e
     e2e:	2f 97       	sbiw	r28, 0x0f	; 15
     e30:	ee c0       	rjmp	.+476    	; 0x100e <main+0xaea>
						plateLoadMotor =  1;
						break;
					case M2_F:
						if(print == 0){
     e32:	61 14       	cp	r6, r1
     e34:	71 04       	cpc	r7, r1
     e36:	39 f4       	brne	.+14     	; 0xe46 <main+0x922>
							OrangutanLCD::print("DRIVE      FRONT");
     e38:	85 eb       	ldi	r24, 0xB5	; 181
     e3a:	92 e0       	ldi	r25, 0x02	; 2
     e3c:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     e40:	71 e0       	ldi	r23, 0x01	; 1
     e42:	67 2e       	mov	r6, r23
     e44:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     e46:	80 91 9e 03 	lds	r24, 0x039E
     e4a:	8f 7e       	andi	r24, 0xEF	; 239
     e4c:	80 93 9e 03 	sts	0x039E, r24
     e50:	41 e0       	ldi	r20, 0x01	; 1
     e52:	50 e0       	ldi	r21, 0x00	; 0
     e54:	2d 96       	adiw	r28, 0x0d	; 13
     e56:	5f af       	std	Y+63, r21	; 0x3f
     e58:	4e af       	std	Y+62, r20	; 0x3e
     e5a:	2d 97       	sbiw	r28, 0x0d	; 13
     e5c:	2f 96       	adiw	r28, 0x0f	; 15
     e5e:	1f ae       	std	Y+63, r1	; 0x3f
     e60:	1e ae       	std	Y+62, r1	; 0x3e
     e62:	2f 97       	sbiw	r28, 0x0f	; 15
     e64:	62 e2       	ldi	r22, 0x22	; 34
     e66:	46 2e       	mov	r4, r22
     e68:	51 2c       	mov	r5, r1
     e6a:	d1 c0       	rjmp	.+418    	; 0x100e <main+0xaea>
						fixtureMotor =  1;
						plateLoadMotor = 0;
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     e6c:	80 91 9e 03 	lds	r24, 0x039E
     e70:	80 61       	ori	r24, 0x10	; 16
     e72:	80 93 9e 03 	sts	0x039E, r24
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	2d 96       	adiw	r28, 0x0d	; 13
     e7c:	9f af       	std	Y+63, r25	; 0x3f
     e7e:	8e af       	std	Y+62, r24	; 0x3e
     e80:	2d 97       	sbiw	r28, 0x0d	; 13
     e82:	c5 c0       	rjmp	.+394    	; 0x100e <main+0xaea>
						fixtureMotor =  1;
						break;
					case M3_F:
						if(print == 0){
     e84:	61 14       	cp	r6, r1
     e86:	71 04       	cpc	r7, r1
     e88:	39 f4       	brne	.+14     	; 0xe98 <main+0x974>
							OrangutanLCD::print("BRUSH1     FRONT");
     e8a:	86 ec       	ldi	r24, 0xC6	; 198
     e8c:	92 e0       	ldi	r25, 0x02	; 2
     e8e:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     e92:	51 e0       	ldi	r21, 0x01	; 1
     e94:	65 2e       	mov	r6, r21
     e96:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
     e98:	80 91 9e 03 	lds	r24, 0x039E
     e9c:	8f 77       	andi	r24, 0x7F	; 127
     e9e:	80 93 9e 03 	sts	0x039E, r24
     ea2:	2d 96       	adiw	r28, 0x0d	; 13
     ea4:	1f ae       	std	Y+63, r1	; 0x3f
     ea6:	1e ae       	std	Y+62, r1	; 0x3e
     ea8:	2d 97       	sbiw	r28, 0x0d	; 13
     eaa:	a1 e0       	ldi	r26, 0x01	; 1
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	2b 96       	adiw	r28, 0x0b	; 11
     eb0:	bf af       	std	Y+63, r27	; 0x3f
     eb2:	ae af       	std	Y+62, r26	; 0x3e
     eb4:	2b 97       	sbiw	r28, 0x0b	; 11
     eb6:	44 e2       	ldi	r20, 0x24	; 36
     eb8:	44 2e       	mov	r4, r20
     eba:	51 2c       	mov	r5, r1
     ebc:	a8 c0       	rjmp	.+336    	; 0x100e <main+0xaea>
						brush1Motor =  1;
						fixtureMotor = 0;
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
     ebe:	80 91 9e 03 	lds	r24, 0x039E
     ec2:	80 68       	ori	r24, 0x80	; 128
     ec4:	80 93 9e 03 	sts	0x039E, r24
     ec8:	21 e0       	ldi	r18, 0x01	; 1
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	2b 96       	adiw	r28, 0x0b	; 11
     ece:	3f af       	std	Y+63, r19	; 0x3f
     ed0:	2e af       	std	Y+62, r18	; 0x3e
     ed2:	2b 97       	sbiw	r28, 0x0b	; 11
     ed4:	9c c0       	rjmp	.+312    	; 0x100e <main+0xaea>
						brush1Motor =  1;
						break;
					case M4_F:
						if(print == 0){
     ed6:	61 14       	cp	r6, r1
     ed8:	71 04       	cpc	r7, r1
     eda:	39 f4       	brne	.+14     	; 0xeea <main+0x9c6>
							OrangutanLCD::print("BRUSH2     FRONT");
     edc:	87 ed       	ldi	r24, 0xD7	; 215
     ede:	92 e0       	ldi	r25, 0x02	; 2
     ee0:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     ee4:	31 e0       	ldi	r19, 0x01	; 1
     ee6:	63 2e       	mov	r6, r19
     ee8:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
     eea:	80 91 9f 03 	lds	r24, 0x039F
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	80 93 9f 03 	sts	0x039F, r24
     ef4:	41 e0       	ldi	r20, 0x01	; 1
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	29 96       	adiw	r28, 0x09	; 9
     efa:	5f af       	std	Y+63, r21	; 0x3f
     efc:	4e af       	std	Y+62, r20	; 0x3e
     efe:	29 97       	sbiw	r28, 0x09	; 9
     f00:	2b 96       	adiw	r28, 0x0b	; 11
     f02:	1f ae       	std	Y+63, r1	; 0x3f
     f04:	1e ae       	std	Y+62, r1	; 0x3e
     f06:	2b 97       	sbiw	r28, 0x0b	; 11
     f08:	26 e2       	ldi	r18, 0x26	; 38
     f0a:	42 2e       	mov	r4, r18
     f0c:	51 2c       	mov	r5, r1
     f0e:	7f c0       	rjmp	.+254    	; 0x100e <main+0xaea>
						brush2Motor =  1;
						brush1Motor = 0;
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
     f10:	80 91 9f 03 	lds	r24, 0x039F
     f14:	84 60       	ori	r24, 0x04	; 4
     f16:	80 93 9f 03 	sts	0x039F, r24
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	29 96       	adiw	r28, 0x09	; 9
     f20:	9f af       	std	Y+63, r25	; 0x3f
     f22:	8e af       	std	Y+62, r24	; 0x3e
     f24:	29 97       	sbiw	r28, 0x09	; 9
     f26:	73 c0       	rjmp	.+230    	; 0x100e <main+0xaea>
						brush2Motor =  1;
						break;
					case M5_F:
						if(print == 0){
     f28:	61 14       	cp	r6, r1
     f2a:	71 04       	cpc	r7, r1
     f2c:	39 f4       	brne	.+14     	; 0xf3c <main+0xa18>
							OrangutanLCD::print("PAPER      FRONT");
     f2e:	88 ee       	ldi	r24, 0xE8	; 232
     f30:	92 e0       	ldi	r25, 0x02	; 2
     f32:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	69 2e       	mov	r6, r25
     f3a:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     f3c:	80 91 9f 03 	lds	r24, 0x039F
     f40:	8f 7d       	andi	r24, 0xDF	; 223
     f42:	80 93 9f 03 	sts	0x039F, r24
     f46:	29 96       	adiw	r28, 0x09	; 9
     f48:	1f ae       	std	Y+63, r1	; 0x3f
     f4a:	1e ae       	std	Y+62, r1	; 0x3e
     f4c:	29 97       	sbiw	r28, 0x09	; 9
     f4e:	a1 e0       	ldi	r26, 0x01	; 1
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	27 96       	adiw	r28, 0x07	; 7
     f54:	bf af       	std	Y+63, r27	; 0x3f
     f56:	ae af       	std	Y+62, r26	; 0x3e
     f58:	27 97       	sbiw	r28, 0x07	; 7
     f5a:	88 e2       	ldi	r24, 0x28	; 40
     f5c:	48 2e       	mov	r4, r24
     f5e:	51 2c       	mov	r5, r1
     f60:	56 c0       	rjmp	.+172    	; 0x100e <main+0xaea>
						paperTowelMotor =  1;
						brush2Motor = 0;
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
     f62:	80 91 9f 03 	lds	r24, 0x039F
     f66:	80 62       	ori	r24, 0x20	; 32
     f68:	80 93 9f 03 	sts	0x039F, r24
     f6c:	21 e0       	ldi	r18, 0x01	; 1
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	27 96       	adiw	r28, 0x07	; 7
     f72:	3f af       	std	Y+63, r19	; 0x3f
     f74:	2e af       	std	Y+62, r18	; 0x3e
     f76:	27 97       	sbiw	r28, 0x07	; 7
     f78:	4a c0       	rjmp	.+148    	; 0x100e <main+0xaea>
						paperTowelMotor =  1;
						break;
					case M2_AND_M3:
						if(print == 0){
     f7a:	61 14       	cp	r6, r1
     f7c:	71 04       	cpc	r7, r1
     f7e:	59 f0       	breq	.+22     	; 0xf96 <main+0xa72>
     f80:	41 e0       	ldi	r20, 0x01	; 1
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	2d 96       	adiw	r28, 0x0d	; 13
     f86:	5f af       	std	Y+63, r21	; 0x3f
     f88:	4e af       	std	Y+62, r20	; 0x3e
     f8a:	2d 97       	sbiw	r28, 0x0d	; 13
     f8c:	2b 96       	adiw	r28, 0x0b	; 11
     f8e:	5f af       	std	Y+63, r21	; 0x3f
     f90:	4e af       	std	Y+62, r20	; 0x3e
     f92:	2b 97       	sbiw	r28, 0x0b	; 11
     f94:	3c c0       	rjmp	.+120    	; 0x100e <main+0xaea>
							OrangutanLCD::print("FIXTURE AND BRUSH1");
     f96:	89 ef       	ldi	r24, 0xF9	; 249
     f98:	92 e0       	ldi	r25, 0x02	; 2
     f9a:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     f9e:	01 e0       	ldi	r16, 0x01	; 1
     fa0:	60 2e       	mov	r6, r16
     fa2:	71 2c       	mov	r7, r1
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	2d 96       	adiw	r28, 0x0d	; 13
     faa:	9f af       	std	Y+63, r25	; 0x3f
     fac:	8e af       	std	Y+62, r24	; 0x3e
     fae:	2d 97       	sbiw	r28, 0x0d	; 13
     fb0:	2b 96       	adiw	r28, 0x0b	; 11
     fb2:	9f af       	std	Y+63, r25	; 0x3f
     fb4:	8e af       	std	Y+62, r24	; 0x3e
     fb6:	2b 97       	sbiw	r28, 0x0b	; 11
     fb8:	2a c0       	rjmp	.+84     	; 0x100e <main+0xaea>
						}
						fixtureMotor = 1;
						brush1Motor = 1;
						break;
					case M2_AND_M4:
						if(print == 0){
     fba:	61 14       	cp	r6, r1
     fbc:	71 04       	cpc	r7, r1
     fbe:	79 f0       	breq	.+30     	; 0xfde <main+0xaba>
     fc0:	a1 e0       	ldi	r26, 0x01	; 1
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	29 96       	adiw	r28, 0x09	; 9
     fc6:	bf af       	std	Y+63, r27	; 0x3f
     fc8:	ae af       	std	Y+62, r26	; 0x3e
     fca:	29 97       	sbiw	r28, 0x09	; 9
     fcc:	2d 96       	adiw	r28, 0x0d	; 13
     fce:	bf af       	std	Y+63, r27	; 0x3f
     fd0:	ae af       	std	Y+62, r26	; 0x3e
     fd2:	2d 97       	sbiw	r28, 0x0d	; 13
     fd4:	2b 96       	adiw	r28, 0x0b	; 11
     fd6:	1f ae       	std	Y+63, r1	; 0x3f
     fd8:	1e ae       	std	Y+62, r1	; 0x3e
     fda:	2b 97       	sbiw	r28, 0x0b	; 11
     fdc:	18 c0       	rjmp	.+48     	; 0x100e <main+0xaea>
							OrangutanLCD::print("FIXTURE AND BRUSH2");
     fde:	8c e0       	ldi	r24, 0x0C	; 12
     fe0:	93 e0       	ldi	r25, 0x03	; 3
     fe2:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
     fe6:	21 e0       	ldi	r18, 0x01	; 1
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	29 96       	adiw	r28, 0x09	; 9
     fec:	3f af       	std	Y+63, r19	; 0x3f
     fee:	2e af       	std	Y+62, r18	; 0x3e
     ff0:	29 97       	sbiw	r28, 0x09	; 9
     ff2:	11 e0       	ldi	r17, 0x01	; 1
     ff4:	61 2e       	mov	r6, r17
     ff6:	71 2c       	mov	r7, r1
     ff8:	2d 96       	adiw	r28, 0x0d	; 13
     ffa:	3f af       	std	Y+63, r19	; 0x3f
     ffc:	2e af       	std	Y+62, r18	; 0x3e
     ffe:	2d 97       	sbiw	r28, 0x0d	; 13
    1000:	2b 96       	adiw	r28, 0x0b	; 11
    1002:	1f ae       	std	Y+63, r1	; 0x3f
    1004:	1e ae       	std	Y+62, r1	; 0x3e
    1006:	2b 97       	sbiw	r28, 0x0b	; 11
    1008:	bb e2       	ldi	r27, 0x2B	; 43
    100a:	4b 2e       	mov	r4, r27
    100c:	51 2c       	mov	r5, r1
						brush1Motor = 0;
						brush2Motor = 1;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    100e:	4d b7       	in	r20, 0x3d	; 61
    1010:	5e b7       	in	r21, 0x3e	; 62
    1012:	42 51       	subi	r20, 0x12	; 18
    1014:	50 40       	sbci	r21, 0x00	; 0
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	5e bf       	out	0x3e, r21	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	4d bf       	out	0x3d, r20	; 61
    1020:	ed b7       	in	r30, 0x3d	; 61
    1022:	fe b7       	in	r31, 0x3e	; 62
    1024:	31 96       	adiw	r30, 0x01	; 1
    1026:	82 e0       	ldi	r24, 0x02	; 2
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	ad b7       	in	r26, 0x3d	; 61
    102c:	be b7       	in	r27, 0x3e	; 62
    102e:	12 96       	adiw	r26, 0x02	; 2
    1030:	9c 93       	st	X, r25
    1032:	8e 93       	st	-X, r24
    1034:	11 97       	sbiw	r26, 0x01	; 1
    1036:	93 83       	std	Z+3, r25	; 0x03
    1038:	82 83       	std	Z+2, r24	; 0x02
    103a:	95 83       	std	Z+5, r25	; 0x05
    103c:	84 83       	std	Z+4, r24	; 0x04
    103e:	97 83       	std	Z+7, r25	; 0x07
    1040:	86 83       	std	Z+6, r24	; 0x06
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	91 87       	std	Z+9, r25	; 0x09
    1048:	80 87       	std	Z+8, r24	; 0x08
    104a:	93 87       	std	Z+11, r25	; 0x0b
    104c:	82 87       	std	Z+10, r24	; 0x0a
    104e:	95 87       	std	Z+13, r25	; 0x0d
    1050:	84 87       	std	Z+12, r24	; 0x0c
    1052:	97 87       	std	Z+15, r25	; 0x0f
    1054:	86 87       	std	Z+14, r24	; 0x0e
    1056:	91 8b       	std	Z+17, r25	; 0x11
    1058:	80 8b       	std	Z+16, r24	; 0x10
    105a:	c1 01       	movw	r24, r2
    105c:	23 96       	adiw	r28, 0x03	; 3
    105e:	6e ad       	ldd	r22, Y+62	; 0x3e
    1060:	7f ad       	ldd	r23, Y+63	; 0x3f
    1062:	23 97       	sbiw	r28, 0x03	; 3
    1064:	40 e0       	ldi	r20, 0x00	; 0
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	2f 96       	adiw	r28, 0x0f	; 15
    106a:	2e ad       	ldd	r18, Y+62	; 0x3e
    106c:	3f ad       	ldd	r19, Y+63	; 0x3f
    106e:	2f 97       	sbiw	r28, 0x0f	; 15
    1070:	2d 96       	adiw	r28, 0x0d	; 13
    1072:	0e ad       	ldd	r16, Y+62	; 0x3e
    1074:	1f ad       	ldd	r17, Y+63	; 0x3f
    1076:	2d 97       	sbiw	r28, 0x0d	; 13
    1078:	2b 96       	adiw	r28, 0x0b	; 11
    107a:	ee ac       	ldd	r14, Y+62	; 0x3e
    107c:	ff ac       	ldd	r15, Y+63	; 0x3f
    107e:	2b 97       	sbiw	r28, 0x0b	; 11
    1080:	29 96       	adiw	r28, 0x09	; 9
    1082:	ce ac       	ldd	r12, Y+62	; 0x3e
    1084:	df ac       	ldd	r13, Y+63	; 0x3f
    1086:	29 97       	sbiw	r28, 0x09	; 9
    1088:	27 96       	adiw	r28, 0x07	; 7
    108a:	ae ac       	ldd	r10, Y+62	; 0x3e
    108c:	bf ac       	ldd	r11, Y+63	; 0x3f
    108e:	27 97       	sbiw	r28, 0x07	; 7
    1090:	a2 e0       	ldi	r26, 0x02	; 2
    1092:	8a 2e       	mov	r8, r26
    1094:	91 2c       	mov	r9, r1
    1096:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    109a:	2d b7       	in	r18, 0x3d	; 61
    109c:	3e b7       	in	r19, 0x3e	; 62
    109e:	2e 5e       	subi	r18, 0xEE	; 238
    10a0:	3f 4f       	sbci	r19, 0xFF	; 255
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	3e bf       	out	0x3e, r19	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	2d bf       	out	0x3d, r18	; 61
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
			counter = 0;
			OrangutanLCD::clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
    10b4:	3c e2       	ldi	r19, 0x2C	; 44
    10b6:	43 16       	cp	r4, r19
    10b8:	51 04       	cpc	r5, r1
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <main+0xb9c>
    10bc:	0c 94 02 19 	jmp	0x3204	; 0x3204 <main+0x2ce0>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    10c0:	08 94       	sec
    10c2:	21 1c       	adc	r2, r1
    10c4:	31 1c       	adc	r3, r1
    10c6:	58 cb       	rjmp	.-2384   	; 0x778 <main+0x254>
				delay_ms(1);
			}
		}
		else{										//If switch is set to Run Mode
		
		OrangutanLCD::print("NORMAL");
    10c8:	8f e1       	ldi	r24, 0x1F	; 31
    10ca:	93 e0       	ldi	r25, 0x03	; 3
    10cc:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
    10d0:	88 ee       	ldi	r24, 0xE8	; 232
    10d2:	93 e0       	ldi	r25, 0x03	; 3
    10d4:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
    10d8:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("SELECT CYCLE");
    10dc:	86 e2       	ldi	r24, 0x26	; 38
    10de:	93 e0       	ldi	r25, 0x03	; 3
    10e0:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
    10e4:	ee 24       	eor	r14, r14
    10e6:	ff 24       	eor	r15, r15
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    10e8:	c7 01       	movw	r24, r14
    10ea:	be 01       	movw	r22, r28
    10ec:	6f 5f       	subi	r22, 0xFF	; 255
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>
    10f4:	18 2f       	mov	r17, r24
			counter++;
    10f6:	08 94       	sec
    10f8:	e1 1c       	adc	r14, r1
    10fa:	f1 1c       	adc	r15, r1
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
		OrangutanLCD::print("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1104:	11 23       	and	r17, r17
    1106:	81 f3       	breq	.-32     	; 0x10e8 <main+0xbc4>
			counter++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		OrangutanLCD::clear();
    1108:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("CYCLE:");
    110c:	83 e3       	ldi	r24, 0x33	; 51
    110e:	93 e0       	ldi	r25, 0x03	; 3
    1110:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>

		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1114:	80 91 9e 03 	lds	r24, 0x039E
    1118:	80 62       	ori	r24, 0x20	; 32
    111a:	80 93 9e 03 	sts	0x039E, r24

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    1124:	88 23       	and	r24, r24
    1126:	11 f0       	breq	.+4      	; 0x112c <main+0xc08>
    1128:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <main+0x2d32>
    112c:	82 e0       	ldi	r24, 0x02	; 2
    112e:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    1132:	88 23       	and	r24, r24
    1134:	11 f0       	breq	.+4      	; 0x113a <main+0xc16>
    1136:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <main+0x2d32>
			OrangutanLCD::gotoXY(7,0);
    113a:	87 e0       	ldi	r24, 0x07	; 7
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("FIRST B");
    1142:	8a e3       	ldi	r24, 0x3A	; 58
    1144:	93 e0       	ldi	r25, 0x03	; 3
    1146:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
			OrangutanLCD::print("DEBUG");
    114a:	82 e4       	ldi	r24, 0x42	; 66
    114c:	93 e0       	ldi	r25, 0x03	; 3
    114e:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1152:	80 91 9e 03 	lds	r24, 0x039E
    1156:	80 62       	ori	r24, 0x20	; 32
    1158:	80 93 9e 03 	sts	0x039E, r24
    115c:	22 24       	eor	r2, r2
    115e:	33 24       	eor	r3, r3
    1160:	41 e0       	ldi	r20, 0x01	; 1
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	5c af       	std	Y+60, r21	; 0x3c
    1166:	4b af       	std	Y+59, r20	; 0x3b
    1168:	44 24       	eor	r4, r4
    116a:	55 24       	eor	r5, r5
    116c:	5e af       	std	Y+62, r21	; 0x3e
    116e:	4d af       	std	Y+61, r20	; 0x3d
    1170:	66 24       	eor	r6, r6
    1172:	77 24       	eor	r7, r7
    1174:	58 a3       	std	Y+32, r21	; 0x20
    1176:	4f 8f       	std	Y+31, r20	; 0x1f
    1178:	21 96       	adiw	r28, 0x01	; 1
    117a:	1f ae       	std	Y+63, r1	; 0x3f
    117c:	1e ae       	std	Y+62, r1	; 0x3e
    117e:	21 97       	sbiw	r28, 0x01	; 1
    1180:	18 8e       	std	Y+24, r1	; 0x18
    1182:	1f 8a       	std	Y+23, r1	; 0x17
    1184:	18 8a       	std	Y+16, r1	; 0x10
    1186:	1f 86       	std	Y+15, r1	; 0x0f
    1188:	18 86       	std	Y+8, r1	; 0x08
    118a:	1f 82       	std	Y+7, r1	; 0x07
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    118c:	84 e4       	ldi	r24, 0x44	; 68
    118e:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1198:	85 e4       	ldi	r24, 0x45	; 69
    119a:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    119e:	0e 94 c7 19 	call	0x338e	; 0x338e <_Z11i2c_readAckv>
    11a2:	80 93 a2 03 	sts	0x03A2, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    11a6:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <_Z11i2c_readNakv>
    11aa:	80 93 a3 03 	sts	0x03A3, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    11ae:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>
				
				if(state != INIT){
    11b2:	61 14       	cp	r6, r1
    11b4:	71 04       	cpc	r7, r1
    11b6:	79 f0       	breq	.+30     	; 0x11d6 <main+0xcb2>
					OrangutanLCD::gotoXY(0,1);
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    11c0:	88 e4       	ldi	r24, 0x48	; 72
    11c2:	93 e0       	ldi	r25, 0x03	; 3
    11c4:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
	};
	static inline void print(int value)
	{
		print((long)value);
    11c8:	b3 01       	movw	r22, r6
    11ca:	88 27       	eor	r24, r24
    11cc:	77 fd       	sbrc	r23, 7
    11ce:	80 95       	com	r24
    11d0:	98 2f       	mov	r25, r24
    11d2:	0e 94 83 1c 	call	0x3906	; 0x3906 <_ZN12OrangutanLCD5printEl>
					OrangutanLCD::print(state);
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    11d6:	c2 01       	movw	r24, r4
    11d8:	be 01       	movw	r22, r28
    11da:	6f 5f       	subi	r22, 0xFF	; 255
    11dc:	7f 4f       	sbci	r23, 0xFF	; 255
    11de:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    11e2:	61 14       	cp	r6, r1
    11e4:	71 04       	cpc	r7, r1
    11e6:	29 f4       	brne	.+10     	; 0x11f2 <main+0xcce>
    11e8:	88 23       	and	r24, r24
    11ea:	09 f4       	brne	.+2      	; 0x11ee <main+0xcca>
    11ec:	43 c0       	rjmp	.+134    	; 0x1274 <main+0xd50>
    11ee:	12 01       	movw	r2, r4
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <main+0xcd6>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    11f2:	51 e0       	ldi	r21, 0x01	; 1
    11f4:	65 16       	cp	r6, r21
    11f6:	71 04       	cpc	r7, r1
    11f8:	49 f4       	brne	.+18     	; 0x120c <main+0xce8>
    11fa:	c2 01       	movw	r24, r4
    11fc:	82 19       	sub	r24, r2
    11fe:	93 09       	sbc	r25, r3
    1200:	81 5a       	subi	r24, 0xA1	; 161
    1202:	9f 40       	sbci	r25, 0x0F	; 15
    1204:	0c f4       	brge	.+2      	; 0x1208 <main+0xce4>
    1206:	43 c0       	rjmp	.+134    	; 0x128e <main+0xd6a>
    1208:	12 01       	movw	r2, r4
    120a:	04 c0       	rjmp	.+8      	; 0x1214 <main+0xcf0>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    120c:	b2 e0       	ldi	r27, 0x02	; 2
    120e:	6b 16       	cp	r6, r27
    1210:	71 04       	cpc	r7, r1
    1212:	49 f4       	brne	.+18     	; 0x1226 <main+0xd02>
    1214:	c2 01       	movw	r24, r4
    1216:	82 19       	sub	r24, r2
    1218:	93 09       	sbc	r25, r3
    121a:	85 36       	cpi	r24, 0x65	; 101
    121c:	91 05       	cpc	r25, r1
    121e:	0c f4       	brge	.+2      	; 0x1222 <main+0xcfe>
    1220:	46 c0       	rjmp	.+140    	; 0x12ae <main+0xd8a>
    1222:	12 01       	movw	r2, r4
    1224:	04 c0       	rjmp	.+8      	; 0x122e <main+0xd0a>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1226:	23 e0       	ldi	r18, 0x03	; 3
    1228:	62 16       	cp	r6, r18
    122a:	71 04       	cpc	r7, r1
    122c:	49 f4       	brne	.+18     	; 0x1240 <main+0xd1c>
    122e:	c2 01       	movw	r24, r4
    1230:	82 19       	sub	r24, r2
    1232:	93 09       	sbc	r25, r3
    1234:	81 5a       	subi	r24, 0xA1	; 161
    1236:	9f 40       	sbci	r25, 0x0F	; 15
    1238:	0c f4       	brge	.+2      	; 0x123c <main+0xd18>
    123a:	49 c0       	rjmp	.+146    	; 0x12ce <main+0xdaa>
    123c:	12 01       	movw	r2, r4
    123e:	04 c0       	rjmp	.+8      	; 0x1248 <main+0xd24>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1240:	44 e0       	ldi	r20, 0x04	; 4
    1242:	64 16       	cp	r6, r20
    1244:	71 04       	cpc	r7, r1
    1246:	49 f4       	brne	.+18     	; 0x125a <main+0xd36>
    1248:	c2 01       	movw	r24, r4
    124a:	82 19       	sub	r24, r2
    124c:	93 09       	sbc	r25, r3
    124e:	89 5e       	subi	r24, 0xE9	; 233
    1250:	93 40       	sbci	r25, 0x03	; 3
    1252:	0c f4       	brge	.+2      	; 0x1256 <main+0xd32>
    1254:	4c c0       	rjmp	.+152    	; 0x12ee <main+0xdca>
    1256:	12 01       	movw	r2, r4
    1258:	04 c0       	rjmp	.+8      	; 0x1262 <main+0xd3e>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    125a:	85 e0       	ldi	r24, 0x05	; 5
    125c:	68 16       	cp	r6, r24
    125e:	71 04       	cpc	r7, r1
    1260:	49 f4       	brne	.+18     	; 0x1274 <main+0xd50>
    1262:	c2 01       	movw	r24, r4
    1264:	82 19       	sub	r24, r2
    1266:	93 09       	sbc	r25, r3
    1268:	85 36       	cpi	r24, 0x65	; 101
    126a:	91 05       	cpc	r25, r1
    126c:	0c f4       	brge	.+2      	; 0x1270 <main+0xd4c>
    126e:	4d c0       	rjmp	.+154    	; 0x130a <main+0xde6>
    1270:	12 01       	movw	r2, r4
    1272:	04 c0       	rjmp	.+8      	; 0x127c <main+0xd58>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1274:	96 e0       	ldi	r25, 0x06	; 6
    1276:	69 16       	cp	r6, r25
    1278:	71 04       	cpc	r7, r1
    127a:	61 f4       	brne	.+24     	; 0x1294 <main+0xd70>
    127c:	c2 01       	movw	r24, r4
    127e:	82 19       	sub	r24, r2
    1280:	93 09       	sbc	r25, r3
    1282:	81 5a       	subi	r24, 0xA1	; 161
    1284:	9f 40       	sbci	r25, 0x0F	; 15
    1286:	0c f4       	brge	.+2      	; 0x128a <main+0xd66>
    1288:	50 c0       	rjmp	.+160    	; 0x132a <main+0xe06>
    128a:	12 01       	movw	r2, r4
    128c:	07 c0       	rjmp	.+14     	; 0x129c <main+0xd78>
    128e:	f1 e0       	ldi	r31, 0x01	; 1
    1290:	6f 2e       	mov	r6, r31
    1292:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    1294:	b7 e0       	ldi	r27, 0x07	; 7
    1296:	6b 16       	cp	r6, r27
    1298:	71 04       	cpc	r7, r1
    129a:	61 f4       	brne	.+24     	; 0x12b4 <main+0xd90>
    129c:	c2 01       	movw	r24, r4
    129e:	82 19       	sub	r24, r2
    12a0:	93 09       	sbc	r25, r3
    12a2:	85 36       	cpi	r24, 0x65	; 101
    12a4:	91 05       	cpc	r25, r1
    12a6:	0c f4       	brge	.+2      	; 0x12aa <main+0xd86>
    12a8:	50 c0       	rjmp	.+160    	; 0x134a <main+0xe26>
    12aa:	12 01       	movw	r2, r4
    12ac:	07 c0       	rjmp	.+14     	; 0x12bc <main+0xd98>
    12ae:	e2 e0       	ldi	r30, 0x02	; 2
    12b0:	6e 2e       	mov	r6, r30
    12b2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    12b4:	28 e0       	ldi	r18, 0x08	; 8
    12b6:	62 16       	cp	r6, r18
    12b8:	71 04       	cpc	r7, r1
    12ba:	61 f4       	brne	.+24     	; 0x12d4 <main+0xdb0>
    12bc:	c2 01       	movw	r24, r4
    12be:	82 19       	sub	r24, r2
    12c0:	93 09       	sbc	r25, r3
    12c2:	85 36       	cpi	r24, 0x65	; 101
    12c4:	91 05       	cpc	r25, r1
    12c6:	0c f4       	brge	.+2      	; 0x12ca <main+0xda6>
    12c8:	4e c0       	rjmp	.+156    	; 0x1366 <main+0xe42>
    12ca:	12 01       	movw	r2, r4
    12cc:	07 c0       	rjmp	.+14     	; 0x12dc <main+0xdb8>
    12ce:	73 e0       	ldi	r23, 0x03	; 3
    12d0:	67 2e       	mov	r6, r23
    12d2:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    12d4:	39 e0       	ldi	r19, 0x09	; 9
    12d6:	63 16       	cp	r6, r19
    12d8:	71 04       	cpc	r7, r1
    12da:	61 f4       	brne	.+24     	; 0x12f4 <main+0xdd0>
    12dc:	c2 01       	movw	r24, r4
    12de:	82 19       	sub	r24, r2
    12e0:	93 09       	sbc	r25, r3
    12e2:	81 5d       	subi	r24, 0xD1	; 209
    12e4:	97 40       	sbci	r25, 0x07	; 7
    12e6:	0c f4       	brge	.+2      	; 0x12ea <main+0xdc6>
    12e8:	4e c0       	rjmp	.+156    	; 0x1386 <main+0xe62>
    12ea:	12 01       	movw	r2, r4
    12ec:	07 c0       	rjmp	.+14     	; 0x12fc <main+0xdd8>
    12ee:	64 e0       	ldi	r22, 0x04	; 4
    12f0:	66 2e       	mov	r6, r22
    12f2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    12f4:	5a e0       	ldi	r21, 0x0A	; 10
    12f6:	65 16       	cp	r6, r21
    12f8:	71 04       	cpc	r7, r1
    12fa:	51 f4       	brne	.+20     	; 0x1310 <main+0xdec>
    12fc:	c2 01       	movw	r24, r4
    12fe:	82 19       	sub	r24, r2
    1300:	93 09       	sbc	r25, r3
    1302:	85 36       	cpi	r24, 0x65	; 101
    1304:	91 05       	cpc	r25, r1
    1306:	44 f4       	brge	.+16     	; 0x1318 <main+0xdf4>
    1308:	4e c0       	rjmp	.+156    	; 0x13a6 <main+0xe82>
    130a:	55 e0       	ldi	r21, 0x05	; 5
    130c:	65 2e       	mov	r6, r21
    130e:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1310:	8b e0       	ldi	r24, 0x0B	; 11
    1312:	68 16       	cp	r6, r24
    1314:	71 04       	cpc	r7, r1
    1316:	61 f4       	brne	.+24     	; 0x1330 <main+0xe0c>
    1318:	c2 01       	movw	r24, r4
    131a:	82 19       	sub	r24, r2
    131c:	93 09       	sbc	r25, r3
    131e:	81 5d       	subi	r24, 0xD1	; 209
    1320:	97 40       	sbci	r25, 0x07	; 7
    1322:	0c f4       	brge	.+2      	; 0x1326 <main+0xe02>
    1324:	50 c0       	rjmp	.+160    	; 0x13c6 <main+0xea2>
    1326:	12 01       	movw	r2, r4
    1328:	07 c0       	rjmp	.+14     	; 0x1338 <main+0xe14>
    132a:	46 e0       	ldi	r20, 0x06	; 6
    132c:	64 2e       	mov	r6, r20
    132e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    1330:	bc e0       	ldi	r27, 0x0C	; 12
    1332:	6b 16       	cp	r6, r27
    1334:	71 04       	cpc	r7, r1
    1336:	61 f4       	brne	.+24     	; 0x1350 <main+0xe2c>
    1338:	c2 01       	movw	r24, r4
    133a:	82 19       	sub	r24, r2
    133c:	93 09       	sbc	r25, r3
    133e:	85 36       	cpi	r24, 0x65	; 101
    1340:	91 05       	cpc	r25, r1
    1342:	0c f4       	brge	.+2      	; 0x1346 <main+0xe22>
    1344:	4e c0       	rjmp	.+156    	; 0x13e2 <main+0xebe>
    1346:	12 01       	movw	r2, r4
    1348:	07 c0       	rjmp	.+14     	; 0x1358 <main+0xe34>
    134a:	37 e0       	ldi	r19, 0x07	; 7
    134c:	63 2e       	mov	r6, r19
    134e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    1350:	2d e0       	ldi	r18, 0x0D	; 13
    1352:	62 16       	cp	r6, r18
    1354:	71 04       	cpc	r7, r1
    1356:	51 f4       	brne	.+20     	; 0x136c <main+0xe48>
    1358:	c2 01       	movw	r24, r4
    135a:	82 19       	sub	r24, r2
    135c:	93 09       	sbc	r25, r3
    135e:	81 5d       	subi	r24, 0xD1	; 209
    1360:	97 40       	sbci	r25, 0x07	; 7
    1362:	44 f4       	brge	.+16     	; 0x1374 <main+0xe50>
    1364:	51 c0       	rjmp	.+162    	; 0x1408 <main+0xee4>
    1366:	28 e0       	ldi	r18, 0x08	; 8
    1368:	62 2e       	mov	r6, r18
    136a:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
					}
				if(state == B1STOP2 && counter - counterRef > pWait){
    136c:	4e e0       	ldi	r20, 0x0E	; 14
    136e:	64 16       	cp	r6, r20
    1370:	71 04       	cpc	r7, r1
    1372:	61 f4       	brne	.+24     	; 0x138c <main+0xe68>
    1374:	c2 01       	movw	r24, r4
    1376:	82 19       	sub	r24, r2
    1378:	93 09       	sbc	r25, r3
    137a:	85 36       	cpi	r24, 0x65	; 101
    137c:	91 05       	cpc	r25, r1
    137e:	0c f4       	brge	.+2      	; 0x1382 <main+0xe5e>
    1380:	57 c0       	rjmp	.+174    	; 0x1430 <main+0xf0c>
    1382:	12 01       	movw	r2, r4
    1384:	07 c0       	rjmp	.+14     	; 0x1394 <main+0xe70>
    1386:	99 e0       	ldi	r25, 0x09	; 9
    1388:	69 2e       	mov	r6, r25
    138a:	71 2c       	mov	r7, r1
					state = 23;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    138c:	57 e1       	ldi	r21, 0x17	; 23
    138e:	65 16       	cp	r6, r21
    1390:	71 04       	cpc	r7, r1
    1392:	61 f4       	brne	.+24     	; 0x13ac <main+0xe88>
    1394:	c2 01       	movw	r24, r4
    1396:	82 19       	sub	r24, r2
    1398:	93 09       	sbc	r25, r3
    139a:	81 5a       	subi	r24, 0xA1	; 161
    139c:	9f 40       	sbci	r25, 0x0F	; 15
    139e:	0c f4       	brge	.+2      	; 0x13a2 <main+0xe7e>
    13a0:	57 c0       	rjmp	.+174    	; 0x1450 <main+0xf2c>
    13a2:	12 01       	movw	r2, r4
    13a4:	07 c0       	rjmp	.+14     	; 0x13b4 <main+0xe90>
    13a6:	8a e0       	ldi	r24, 0x0A	; 10
    13a8:	68 2e       	mov	r6, r24
    13aa:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    13ac:	b8 e1       	ldi	r27, 0x18	; 24
    13ae:	6b 16       	cp	r6, r27
    13b0:	71 04       	cpc	r7, r1
    13b2:	61 f4       	brne	.+24     	; 0x13cc <main+0xea8>
    13b4:	c2 01       	movw	r24, r4
    13b6:	82 19       	sub	r24, r2
    13b8:	93 09       	sbc	r25, r3
    13ba:	85 36       	cpi	r24, 0x65	; 101
    13bc:	91 05       	cpc	r25, r1
    13be:	0c f4       	brge	.+2      	; 0x13c2 <main+0xe9e>
    13c0:	55 c0       	rjmp	.+170    	; 0x146c <main+0xf48>
    13c2:	12 01       	movw	r2, r4
    13c4:	07 c0       	rjmp	.+14     	; 0x13d4 <main+0xeb0>
    13c6:	0b e0       	ldi	r16, 0x0B	; 11
    13c8:	60 2e       	mov	r6, r16
    13ca:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    13cc:	29 e1       	ldi	r18, 0x19	; 25
    13ce:	62 16       	cp	r6, r18
    13d0:	71 04       	cpc	r7, r1
    13d2:	51 f4       	brne	.+20     	; 0x13e8 <main+0xec4>
    13d4:	c2 01       	movw	r24, r4
    13d6:	82 19       	sub	r24, r2
    13d8:	93 09       	sbc	r25, r3
    13da:	81 5a       	subi	r24, 0xA1	; 161
    13dc:	9f 40       	sbci	r25, 0x0F	; 15
    13de:	44 f4       	brge	.+16     	; 0x13f0 <main+0xecc>
    13e0:	55 c0       	rjmp	.+170    	; 0x148c <main+0xf68>
    13e2:	1c e0       	ldi	r17, 0x0C	; 12
    13e4:	61 2e       	mov	r6, r17
    13e6:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    13e8:	4a e1       	ldi	r20, 0x1A	; 26
    13ea:	64 16       	cp	r6, r20
    13ec:	71 04       	cpc	r7, r1
    13ee:	79 f4       	brne	.+30     	; 0x140e <main+0xeea>
    13f0:	c2 01       	movw	r24, r4
    13f2:	82 19       	sub	r24, r2
    13f4:	93 09       	sbc	r25, r3
    13f6:	81 5a       	subi	r24, 0xA1	; 161
    13f8:	9f 40       	sbci	r25, 0x0F	; 15
    13fa:	0c f4       	brge	.+2      	; 0x13fe <main+0xeda>
    13fc:	57 c0       	rjmp	.+174    	; 0x14ac <main+0xf88>
    13fe:	21 96       	adiw	r28, 0x01	; 1
    1400:	5f ae       	std	Y+63, r5	; 0x3f
    1402:	4e ae       	std	Y+62, r4	; 0x3e
    1404:	21 97       	sbiw	r28, 0x01	; 1
    1406:	07 c0       	rjmp	.+14     	; 0x1416 <main+0xef2>
    1408:	bd e0       	ldi	r27, 0x0D	; 13
    140a:	6b 2e       	mov	r6, r27
    140c:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    140e:	8b e1       	ldi	r24, 0x1B	; 27
    1410:	68 16       	cp	r6, r24
    1412:	71 04       	cpc	r7, r1
    1414:	81 f4       	brne	.+32     	; 0x1436 <main+0xf12>
    1416:	c2 01       	movw	r24, r4
    1418:	21 96       	adiw	r28, 0x01	; 1
    141a:	ae ad       	ldd	r26, Y+62	; 0x3e
    141c:	bf ad       	ldd	r27, Y+63	; 0x3f
    141e:	21 97       	sbiw	r28, 0x01	; 1
    1420:	8a 1b       	sub	r24, r26
    1422:	9b 0b       	sbc	r25, r27
    1424:	85 36       	cpi	r24, 0x65	; 101
    1426:	91 05       	cpc	r25, r1
    1428:	0c f4       	brge	.+2      	; 0x142c <main+0xf08>
    142a:	50 c0       	rjmp	.+160    	; 0x14cc <main+0xfa8>
    142c:	12 01       	movw	r2, r4
    142e:	07 c0       	rjmp	.+14     	; 0x143e <main+0xf1a>
    1430:	ae e0       	ldi	r26, 0x0E	; 14
    1432:	6a 2e       	mov	r6, r26
    1434:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    1436:	bc e1       	ldi	r27, 0x1C	; 28
    1438:	6b 16       	cp	r6, r27
    143a:	71 04       	cpc	r7, r1
    143c:	61 f4       	brne	.+24     	; 0x1456 <main+0xf32>
    143e:	c2 01       	movw	r24, r4
    1440:	82 19       	sub	r24, r2
    1442:	93 09       	sbc	r25, r3
    1444:	85 36       	cpi	r24, 0x65	; 101
    1446:	91 05       	cpc	r25, r1
    1448:	0c f4       	brge	.+2      	; 0x144c <main+0xf28>
    144a:	50 c0       	rjmp	.+160    	; 0x14ec <main+0xfc8>
    144c:	12 01       	movw	r2, r4
    144e:	07 c0       	rjmp	.+14     	; 0x145e <main+0xf3a>
    1450:	f7 e1       	ldi	r31, 0x17	; 23
    1452:	6f 2e       	mov	r6, r31
    1454:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    1456:	2d e1       	ldi	r18, 0x1D	; 29
    1458:	62 16       	cp	r6, r18
    145a:	71 04       	cpc	r7, r1
    145c:	51 f4       	brne	.+20     	; 0x1472 <main+0xf4e>
    145e:	c2 01       	movw	r24, r4
    1460:	82 19       	sub	r24, r2
    1462:	93 09       	sbc	r25, r3
    1464:	81 5a       	subi	r24, 0xA1	; 161
    1466:	9f 40       	sbci	r25, 0x0F	; 15
    1468:	44 f4       	brge	.+16     	; 0x147a <main+0xf56>
    146a:	50 c0       	rjmp	.+160    	; 0x150c <main+0xfe8>
    146c:	e8 e1       	ldi	r30, 0x18	; 24
    146e:	6e 2e       	mov	r6, r30
    1470:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totalStepLength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1472:	4e e1       	ldi	r20, 0x1E	; 30
    1474:	64 16       	cp	r6, r20
    1476:	71 04       	cpc	r7, r1
    1478:	61 f4       	brne	.+24     	; 0x1492 <main+0xf6e>
    147a:	c2 01       	movw	r24, r4
    147c:	82 19       	sub	r24, r2
    147e:	93 09       	sbc	r25, r3
    1480:	81 5a       	subi	r24, 0xA1	; 161
    1482:	9f 40       	sbci	r25, 0x0F	; 15
    1484:	0c f4       	brge	.+2      	; 0x1488 <main+0xf64>
    1486:	53 c0       	rjmp	.+166    	; 0x152e <main+0x100a>
    1488:	12 01       	movw	r2, r4
    148a:	07 c0       	rjmp	.+14     	; 0x149a <main+0xf76>
    148c:	79 e1       	ldi	r23, 0x19	; 25
    148e:	67 2e       	mov	r6, r23
    1490:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1492:	8f e1       	ldi	r24, 0x1F	; 31
    1494:	68 16       	cp	r6, r24
    1496:	71 04       	cpc	r7, r1
    1498:	61 f4       	brne	.+24     	; 0x14b2 <main+0xf8e>
    149a:	c2 01       	movw	r24, r4
    149c:	82 19       	sub	r24, r2
    149e:	93 09       	sbc	r25, r3
    14a0:	89 5e       	subi	r24, 0xE9	; 233
    14a2:	93 40       	sbci	r25, 0x03	; 3
    14a4:	0c f4       	brge	.+2      	; 0x14a8 <main+0xf84>
    14a6:	59 c1       	rjmp	.+690    	; 0x175a <main+0x1236>
    14a8:	12 01       	movw	r2, r4
    14aa:	07 c0       	rjmp	.+14     	; 0x14ba <main+0xf96>
    14ac:	6a e1       	ldi	r22, 0x1A	; 26
    14ae:	66 2e       	mov	r6, r22
    14b0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    14b2:	b0 e2       	ldi	r27, 0x20	; 32
    14b4:	6b 16       	cp	r6, r27
    14b6:	71 04       	cpc	r7, r1
    14b8:	61 f4       	brne	.+24     	; 0x14d2 <main+0xfae>
    14ba:	c2 01       	movw	r24, r4
    14bc:	82 19       	sub	r24, r2
    14be:	93 09       	sbc	r25, r3
    14c0:	81 5a       	subi	r24, 0xA1	; 161
    14c2:	9f 40       	sbci	r25, 0x0F	; 15
    14c4:	0c f4       	brge	.+2      	; 0x14c8 <main+0xfa4>
    14c6:	55 c1       	rjmp	.+682    	; 0x1772 <main+0x124e>
    14c8:	12 01       	movw	r2, r4
    14ca:	07 c0       	rjmp	.+14     	; 0x14da <main+0xfb6>
    14cc:	5b e1       	ldi	r21, 0x1B	; 27
    14ce:	65 2e       	mov	r6, r21
    14d0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    14d2:	31 e2       	ldi	r19, 0x21	; 33
    14d4:	63 16       	cp	r6, r19
    14d6:	71 04       	cpc	r7, r1
    14d8:	61 f4       	brne	.+24     	; 0x14f2 <main+0xfce>
    14da:	c2 01       	movw	r24, r4
    14dc:	82 19       	sub	r24, r2
    14de:	93 09       	sbc	r25, r3
    14e0:	85 36       	cpi	r24, 0x65	; 101
    14e2:	91 05       	cpc	r25, r1
    14e4:	0c f4       	brge	.+2      	; 0x14e8 <main+0xfc4>
    14e6:	53 c1       	rjmp	.+678    	; 0x178e <main+0x126a>
    14e8:	12 01       	movw	r2, r4
    14ea:	07 c0       	rjmp	.+14     	; 0x14fa <main+0xfd6>
    14ec:	4c e1       	ldi	r20, 0x1C	; 28
    14ee:	64 2e       	mov	r6, r20
    14f0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    14f2:	42 e2       	ldi	r20, 0x22	; 34
    14f4:	64 16       	cp	r6, r20
    14f6:	71 04       	cpc	r7, r1
    14f8:	61 f4       	brne	.+24     	; 0x1512 <main+0xfee>
    14fa:	c2 01       	movw	r24, r4
    14fc:	82 19       	sub	r24, r2
    14fe:	93 09       	sbc	r25, r3
    1500:	81 5a       	subi	r24, 0xA1	; 161
    1502:	9f 40       	sbci	r25, 0x0F	; 15
    1504:	0c f4       	brge	.+2      	; 0x1508 <main+0xfe4>
    1506:	55 c1       	rjmp	.+682    	; 0x17b2 <main+0x128e>
    1508:	12 01       	movw	r2, r4
    150a:	07 c0       	rjmp	.+14     	; 0x151a <main+0xff6>
    150c:	3d e1       	ldi	r19, 0x1D	; 29
    150e:	63 2e       	mov	r6, r19
    1510:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    1512:	83 e2       	ldi	r24, 0x23	; 35
    1514:	68 16       	cp	r6, r24
    1516:	71 04       	cpc	r7, r1
    1518:	69 f4       	brne	.+26     	; 0x1534 <main+0x1010>
    151a:	c2 01       	movw	r24, r4
    151c:	82 19       	sub	r24, r2
    151e:	93 09       	sbc	r25, r3
    1520:	0b 97       	sbiw	r24, 0x0b	; 11
    1522:	0c f4       	brge	.+2      	; 0x1526 <main+0x1002>
    1524:	53 c1       	rjmp	.+678    	; 0x17cc <main+0x12a8>
    1526:	24 e2       	ldi	r18, 0x24	; 36
    1528:	62 2e       	mov	r6, r18
    152a:	71 2c       	mov	r7, r1
    152c:	65 c1       	rjmp	.+714    	; 0x17f8 <main+0x12d4>
    152e:	9e e1       	ldi	r25, 0x1E	; 30
    1530:	69 2e       	mov	r6, r25
    1532:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    1534:	f3 01       	movw	r30, r6
    1536:	e4 32       	cpi	r30, 0x24	; 36
    1538:	f1 05       	cpc	r31, r1
    153a:	08 f0       	brcs	.+2      	; 0x153e <main+0x101a>
    153c:	5d c1       	rjmp	.+698    	; 0x17f8 <main+0x12d4>
    153e:	ee 58       	subi	r30, 0x8E	; 142
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	05 90       	lpm	r0, Z+
    1548:	f4 91       	lpm	r31, Z+
    154a:	e0 2d       	mov	r30, r0
    154c:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    154e:	80 91 a2 03 	lds	r24, 0x03A2
    1552:	90 91 9e 03 	lds	r25, 0x039E
    1556:	20 91 a0 03 	lds	r18, 0x03A0
    155a:	82 ff       	sbrs	r24, 2
    155c:	08 c0       	rjmp	.+16     	; 0x156e <main+0x104a>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    155e:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1560:	27 7f       	andi	r18, 0xF7	; 247
    1562:	20 93 a0 03 	sts	0x03A0, r18
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1566:	90 62       	ori	r25, 0x20	; 32
    1568:	90 93 9e 03 	sts	0x039E, r25
    156c:	45 c1       	rjmp	.+650    	; 0x17f8 <main+0x12d4>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    156e:	9f 7d       	andi	r25, 0xDF	; 223
    1570:	90 93 9e 03 	sts	0x039E, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1574:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1576:	28 60       	ori	r18, 0x08	; 8
    1578:	20 93 a0 03 	sts	0x03A0, r18
						if(print0 == 1){
    157c:	ad ad       	ldd	r26, Y+61	; 0x3d
    157e:	be ad       	ldd	r27, Y+62	; 0x3e
    1580:	11 97       	sbiw	r26, 0x01	; 1
    1582:	09 f0       	breq	.+2      	; 0x1586 <main+0x1062>
    1584:	45 c0       	rjmp	.+138    	; 0x1610 <main+0x10ec>
							OrangutanLCD::gotoXY(0,1);
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	61 e0       	ldi	r22, 0x01	; 1
    158a:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    158e:	8f e4       	ldi	r24, 0x4F	; 79
    1590:	93 e0       	ldi	r25, 0x03	; 3
    1592:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
    1596:	1e ae       	std	Y+62, r1	; 0x3e
    1598:	1d ae       	std	Y+61, r1	; 0x3d
    159a:	3a c0       	rjmp	.+116    	; 0x1610 <main+0x10ec>
							print0 = 0;
						}
					}
					break;
				case LOAD:
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    159c:	20 91 a0 03 	lds	r18, 0x03A0
    15a0:	32 2f       	mov	r19, r18
    15a2:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    15a4:	c2 01       	movw	r24, r4
    15a6:	68 ec       	ldi	r22, 0xC8	; 200
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divmodhi4>
    15ae:	84 36       	cpi	r24, 0x64	; 100
    15b0:	91 05       	cpc	r25, r1
    15b2:	24 f4       	brge	.+8      	; 0x15bc <main+0x1098>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    15b4:	2c 7f       	andi	r18, 0xFC	; 252
    15b6:	20 93 a0 03 	sts	0x03A0, r18
    15ba:	03 c0       	rjmp	.+6      	; 0x15c2 <main+0x109e>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    15bc:	32 60       	ori	r19, 0x02	; 2
    15be:	30 93 a0 03 	sts	0x03A0, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    15c2:	80 91 9e 03 	lds	r24, 0x039E
    15c6:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    15c8:	84 60       	ori	r24, 0x04	; 4
    15ca:	80 93 9e 03 	sts	0x039E, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    15ce:	80 91 a0 03 	lds	r24, 0x03A0
    15d2:	8b 7f       	andi	r24, 0xFB	; 251
    15d4:	80 93 a0 03 	sts	0x03A0, r24
    15d8:	21 e0       	ldi	r18, 0x01	; 1
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	38 8f       	std	Y+24, r19	; 0x18
    15de:	2f 8b       	std	Y+23, r18	; 0x17
    15e0:	0b c1       	rjmp	.+534    	; 0x17f8 <main+0x12d4>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    15e2:	80 91 a0 03 	lds	r24, 0x03A0
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    15e6:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    15e8:	86 61       	ori	r24, 0x16	; 22
    15ea:	80 93 a0 03 	sts	0x03A0, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    15ee:	80 91 9e 03 	lds	r24, 0x039E
    15f2:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    15f4:	8b 7f       	andi	r24, 0xFB	; 251
    15f6:	80 93 9e 03 	sts	0x039E, r24
    15fa:	fc c0       	rjmp	.+504    	; 0x17f4 <main+0x12d0>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    15fc:	80 91 9e 03 	lds	r24, 0x039E
    1600:	8f 7d       	andi	r24, 0xDF	; 223
    1602:	80 93 9e 03 	sts	0x039E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1606:	80 91 a0 03 	lds	r24, 0x03A0
    160a:	88 60       	ori	r24, 0x08	; 8
    160c:	80 93 a0 03 	sts	0x03A0, r24
    1610:	18 a2       	std	Y+32, r1	; 0x20
    1612:	1f 8e       	std	Y+31, r1	; 0x1f
    1614:	f1 c0       	rjmp	.+482    	; 0x17f8 <main+0x12d4>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1616:	80 91 a0 03 	lds	r24, 0x03A0
    161a:	8f 7e       	andi	r24, 0xEF	; 239
    161c:	80 93 a0 03 	sts	0x03A0, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1620:	80 91 9e 03 	lds	r24, 0x039E
    1624:	80 62       	ori	r24, 0x20	; 32
    1626:	80 93 9e 03 	sts	0x039E, r24
    162a:	e6 c0       	rjmp	.+460    	; 0x17f8 <main+0x12d4>
				//*********************************************
					break;
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    162c:	80 91 9e 03 	lds	r24, 0x039E
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1630:	80 63       	ori	r24, 0x30	; 48
    1632:	80 93 9e 03 	sts	0x039E, r24
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	98 a3       	std	Y+32, r25	; 0x20
    163c:	8f 8f       	std	Y+31, r24	; 0x1f
    163e:	dc c0       	rjmp	.+440    	; 0x17f8 <main+0x12d4>
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    1640:	80 91 9f 03 	lds	r24, 0x039F
    1644:	81 60       	ori	r24, 0x01	; 1
    1646:	80 93 9f 03 	sts	0x039F, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    164a:	80 91 9e 03 	lds	r24, 0x039E
    164e:	8f 77       	andi	r24, 0x7F	; 127
    1650:	80 93 9e 03 	sts	0x039E, r24
    1654:	dd cf       	rjmp	.-70     	; 0x1610 <main+0x10ec>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1656:	80 91 a0 03 	lds	r24, 0x03A0
    165a:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    165c:	8f 7d       	andi	r24, 0xDF	; 223
    165e:	80 93 a0 03 	sts	0x03A0, r24
    1662:	a1 e0       	ldi	r26, 0x01	; 1
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	b8 87       	std	Y+8, r27	; 0x08
    1668:	af 83       	std	Y+7, r26	; 0x07
    166a:	c6 c0       	rjmp	.+396    	; 0x17f8 <main+0x12d4>
					break;
				case CLEAN1_1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    166c:	80 91 9e 03 	lds	r24, 0x039E
    1670:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1672:	8f 7e       	andi	r24, 0xEF	; 239
    1674:	80 93 9e 03 	sts	0x039E, r24
    1678:	2b c0       	rjmp	.+86     	; 0x16d0 <main+0x11ac>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    167a:	80 91 9e 03 	lds	r24, 0x039E
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    167e:	80 63       	ori	r24, 0x30	; 48
    1680:	36 c0       	rjmp	.+108    	; 0x16ee <main+0x11ca>
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    1682:	80 91 9e 03 	lds	r24, 0x039E
    1686:	8f 77       	andi	r24, 0x7F	; 127
    1688:	80 93 9e 03 	sts	0x039E, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    168c:	80 91 a0 03 	lds	r24, 0x03A0
    1690:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    1692:	8f 7d       	andi	r24, 0xDF	; 223
    1694:	80 93 a0 03 	sts	0x03A0, r24
    1698:	18 a2       	std	Y+32, r1	; 0x20
    169a:	1f 8e       	std	Y+31, r1	; 0x1f
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	98 87       	std	Y+8, r25	; 0x08
    16a2:	8f 83       	std	Y+7, r24	; 0x07
    16a4:	a9 c0       	rjmp	.+338    	; 0x17f8 <main+0x12d4>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    16a6:	80 91 a0 03 	lds	r24, 0x03A0
    16aa:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    16ac:	80 62       	ori	r24, 0x20	; 32
    16ae:	80 93 a0 03 	sts	0x03A0, r24
    16b2:	18 a2       	std	Y+32, r1	; 0x20
    16b4:	1f 8e       	std	Y+31, r1	; 0x1f
    16b6:	18 86       	std	Y+8, r1	; 0x08
    16b8:	1f 82       	std	Y+7, r1	; 0x07
    16ba:	9e c0       	rjmp	.+316    	; 0x17f8 <main+0x12d4>
				
					break;
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    16bc:	80 91 9e 03 	lds	r24, 0x039E
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    16c0:	80 63       	ori	r24, 0x30	; 48
    16c2:	80 93 9e 03 	sts	0x039E, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    16c6:	80 91 9f 03 	lds	r24, 0x039F
    16ca:	8e 7f       	andi	r24, 0xFE	; 254
    16cc:	80 93 9f 03 	sts	0x039F, r24
    16d0:	21 e0       	ldi	r18, 0x01	; 1
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	38 a3       	std	Y+32, r19	; 0x20
    16d6:	2f 8f       	std	Y+31, r18	; 0x1f
    16d8:	8f c0       	rjmp	.+286    	; 0x17f8 <main+0x12d4>
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    16da:	80 91 a1 03 	lds	r24, 0x03A1
    16de:	87 7f       	andi	r24, 0xF7	; 247
    16e0:	80 93 a1 03 	sts	0x03A1, r24
    16e4:	95 cf       	rjmp	.-214    	; 0x1610 <main+0x10ec>
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    16e6:	80 91 9e 03 	lds	r24, 0x039E
    16ea:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    16ec:	80 62       	ori	r24, 0x20	; 32
    16ee:	80 93 9e 03 	sts	0x039E, r24
    16f2:	41 e0       	ldi	r20, 0x01	; 1
    16f4:	50 e0       	ldi	r21, 0x00	; 0
    16f6:	58 a3       	std	Y+32, r21	; 0x20
    16f8:	4f 8f       	std	Y+31, r20	; 0x1f
    16fa:	7e c0       	rjmp	.+252    	; 0x17f8 <main+0x12d4>
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    16fc:	80 91 a1 03 	lds	r24, 0x03A1
    1700:	88 60       	ori	r24, 0x08	; 8
    1702:	10 c0       	rjmp	.+32     	; 0x1724 <main+0x1200>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    1704:	80 91 9f 03 	lds	r24, 0x039F
    1708:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    170a:	8f 7d       	andi	r24, 0xDF	; 223
    170c:	80 93 9f 03 	sts	0x039F, r24
    1710:	18 a2       	std	Y+32, r1	; 0x20
    1712:	1f 8e       	std	Y+31, r1	; 0x1f
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	98 8b       	std	Y+16, r25	; 0x10
    171a:	8f 87       	std	Y+15, r24	; 0x0f
    171c:	6d c0       	rjmp	.+218    	; 0x17f8 <main+0x12d4>
					paperTowelMotor = 1;
					break;
				case D2RAISE:
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    171e:	80 91 a1 03 	lds	r24, 0x03A1
    1722:	8d 7f       	andi	r24, 0xFD	; 253
    1724:	80 93 a1 03 	sts	0x03A1, r24
    1728:	67 c0       	rjmp	.+206    	; 0x17f8 <main+0x12d4>
					break;
				case DRY2:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    172a:	80 91 9e 03 	lds	r24, 0x039E
    172e:	80 62       	ori	r24, 0x20	; 32
    1730:	80 93 9e 03 	sts	0x039E, r24
    1734:	a1 e0       	ldi	r26, 0x01	; 1
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	b8 a3       	std	Y+32, r27	; 0x20
    173a:	af 8f       	std	Y+31, r26	; 0x1f
    173c:	5d c0       	rjmp	.+186    	; 0x17f8 <main+0x12d4>
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    173e:	80 91 9f 03 	lds	r24, 0x039F
    1742:	8f 7b       	andi	r24, 0xBF	; 191
    1744:	80 93 9f 03 	sts	0x039F, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1748:	80 91 a1 03 	lds	r24, 0x03A1
    174c:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    174e:	8b 7f       	andi	r24, 0xFB	; 251
    1750:	80 93 a1 03 	sts	0x03A1, r24
    1754:	18 8a       	std	Y+16, r1	; 0x10
    1756:	1f 86       	std	Y+15, r1	; 0x0f
    1758:	4f c0       	rjmp	.+158    	; 0x17f8 <main+0x12d4>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    175a:	80 91 a0 03 	lds	r24, 0x03A0
    175e:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1760:	80 61       	ori	r24, 0x10	; 16
    1762:	80 93 a0 03 	sts	0x03A0, r24
    1766:	18 a2       	std	Y+32, r1	; 0x20
    1768:	1f 8e       	std	Y+31, r1	; 0x1f
    176a:	8f e1       	ldi	r24, 0x1F	; 31
    176c:	68 2e       	mov	r6, r24
    176e:	71 2c       	mov	r7, r1
    1770:	43 c0       	rjmp	.+134    	; 0x17f8 <main+0x12d4>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1772:	80 91 9e 03 	lds	r24, 0x039E
    1776:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1778:	80 62       	ori	r24, 0x20	; 32
    177a:	80 93 9e 03 	sts	0x039E, r24
    177e:	21 e0       	ldi	r18, 0x01	; 1
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	38 a3       	std	Y+32, r19	; 0x20
    1784:	2f 8f       	std	Y+31, r18	; 0x1f
    1786:	00 e2       	ldi	r16, 0x20	; 32
    1788:	60 2e       	mov	r6, r16
    178a:	71 2c       	mov	r7, r1
    178c:	35 c0       	rjmp	.+106    	; 0x17f8 <main+0x12d4>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    178e:	80 91 9e 03 	lds	r24, 0x039E
    1792:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1794:	84 60       	ori	r24, 0x04	; 4
    1796:	80 93 9e 03 	sts	0x039E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    179a:	80 91 a0 03 	lds	r24, 0x03A0
    179e:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    17a0:	8f 7e       	andi	r24, 0xEF	; 239
    17a2:	80 93 a0 03 	sts	0x03A0, r24
    17a6:	18 a2       	std	Y+32, r1	; 0x20
    17a8:	1f 8e       	std	Y+31, r1	; 0x1f
    17aa:	11 e2       	ldi	r17, 0x21	; 33
    17ac:	61 2e       	mov	r6, r17
    17ae:	71 2c       	mov	r7, r1
    17b0:	23 c0       	rjmp	.+70     	; 0x17f8 <main+0x12d4>
					break;
    17b2:	b2 e2       	ldi	r27, 0x22	; 34
    17b4:	6b 2e       	mov	r6, r27
    17b6:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    17b8:	80 91 9e 03 	lds	r24, 0x039E
    17bc:	8d 7f       	andi	r24, 0xFD	; 253
    17be:	80 93 9e 03 	sts	0x039E, r24
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	58 8f       	std	Y+24, r21	; 0x18
    17c8:	4f 8b       	std	Y+23, r20	; 0x17
    17ca:	16 c0       	rjmp	.+44     	; 0x17f8 <main+0x12d4>
					plateLoadMotor = 1;
					break;
    17cc:	a3 e2       	ldi	r26, 0x23	; 35
    17ce:	6a 2e       	mov	r6, r26
    17d0:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    17d2:	80 91 9e 03 	lds	r24, 0x039E
    17d6:	8b 7f       	andi	r24, 0xFB	; 251
    17d8:	80 93 9e 03 	sts	0x039E, r24
					if(print35 == 1){
    17dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    17de:	9c ad       	ldd	r25, Y+60	; 0x3c
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	41 f4       	brne	.+16     	; 0x17f4 <main+0x12d0>
						OrangutanLCD::clear();
    17e4:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    17e8:	8d e5       	ldi	r24, 0x5D	; 93
    17ea:	93 e0       	ldi	r25, 0x03	; 3
    17ec:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
    17f0:	1c ae       	std	Y+60, r1	; 0x3c
    17f2:	1b ae       	std	Y+59, r1	; 0x3b
    17f4:	18 8e       	std	Y+24, r1	; 0x18
    17f6:	1f 8a       	std	Y+23, r1	; 0x17
					}
					break;
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    17f8:	ad b7       	in	r26, 0x3d	; 61
    17fa:	be b7       	in	r27, 0x3e	; 62
    17fc:	52 97       	sbiw	r26, 0x12	; 18
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	be bf       	out	0x3e, r27	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	ad bf       	out	0x3d, r26	; 61
    1808:	ed b7       	in	r30, 0x3d	; 61
    180a:	fe b7       	in	r31, 0x3e	; 62
    180c:	31 96       	adiw	r30, 0x01	; 1
    180e:	82 e0       	ldi	r24, 0x02	; 2
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	12 96       	adiw	r26, 0x02	; 2
    1814:	9c 93       	st	X, r25
    1816:	8e 93       	st	-X, r24
    1818:	11 97       	sbiw	r26, 0x01	; 1
    181a:	93 83       	std	Z+3, r25	; 0x03
    181c:	82 83       	std	Z+2, r24	; 0x02
    181e:	95 83       	std	Z+5, r25	; 0x05
    1820:	84 83       	std	Z+4, r24	; 0x04
    1822:	97 83       	std	Z+7, r25	; 0x07
    1824:	86 83       	std	Z+6, r24	; 0x06
    1826:	21 e0       	ldi	r18, 0x01	; 1
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	31 87       	std	Z+9, r19	; 0x09
    182c:	20 87       	std	Z+8, r18	; 0x08
    182e:	33 87       	std	Z+11, r19	; 0x0b
    1830:	22 87       	std	Z+10, r18	; 0x0a
    1832:	35 87       	std	Z+13, r19	; 0x0d
    1834:	24 87       	std	Z+12, r18	; 0x0c
    1836:	37 87       	std	Z+15, r19	; 0x0f
    1838:	26 87       	std	Z+14, r18	; 0x0e
    183a:	31 8b       	std	Z+17, r19	; 0x11
    183c:	20 8b       	std	Z+16, r18	; 0x10
    183e:	c2 01       	movw	r24, r4
    1840:	b1 01       	movw	r22, r2
    1842:	21 96       	adiw	r28, 0x01	; 1
    1844:	4e ad       	ldd	r20, Y+62	; 0x3e
    1846:	5f ad       	ldd	r21, Y+63	; 0x3f
    1848:	21 97       	sbiw	r28, 0x01	; 1
    184a:	2f 89       	ldd	r18, Y+23	; 0x17
    184c:	38 8d       	ldd	r19, Y+24	; 0x18
    184e:	0f 8d       	ldd	r16, Y+31	; 0x1f
    1850:	18 a1       	ldd	r17, Y+32	; 0x20
    1852:	ef 80       	ldd	r14, Y+7	; 0x07
    1854:	f8 84       	ldd	r15, Y+8	; 0x08
    1856:	cc 24       	eor	r12, r12
    1858:	dd 24       	eor	r13, r13
    185a:	af 84       	ldd	r10, Y+15	; 0x0f
    185c:	b8 88       	ldd	r11, Y+16	; 0x10
    185e:	f2 e0       	ldi	r31, 0x02	; 2
    1860:	8f 2e       	mov	r8, r31
    1862:	91 2c       	mov	r9, r1
    1864:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    1868:	4d b7       	in	r20, 0x3d	; 61
    186a:	5e b7       	in	r21, 0x3e	; 62
    186c:	4e 5e       	subi	r20, 0xEE	; 238
    186e:	5f 4f       	sbci	r21, 0xFF	; 255
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	5e bf       	out	0x3e, r21	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	4d bf       	out	0x3d, r20	; 61
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("FIRST B");
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1882:	54 e2       	ldi	r21, 0x24	; 36
    1884:	65 16       	cp	r6, r21
    1886:	71 04       	cpc	r7, r1
    1888:	11 f4       	brne	.+4      	; 0x188e <main+0x136a>
    188a:	0c 94 02 19 	jmp	0x3204	; 0x3204 <main+0x2ce0>
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    188e:	08 94       	sec
    1890:	41 1c       	adc	r4, r1
    1892:	51 1c       	adc	r5, r1
    1894:	7b cc       	rjmp	.-1802   	; 0x118c <main+0xc68>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    1896:	82 e0       	ldi	r24, 0x02	; 2
    1898:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    189c:	88 23       	and	r24, r24
    189e:	11 f0       	breq	.+4      	; 0x18a4 <main+0x1380>
    18a0:	0c 94 32 19 	jmp	0x3264	; 0x3264 <main+0x2d40>
			OrangutanLCD::gotoXY(7,0);
    18a4:	87 e0       	ldi	r24, 0x07	; 7
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("SECOND B");
    18ac:	8a e6       	ldi	r24, 0x6A	; 106
    18ae:	93 e0       	ldi	r25, 0x03	; 3
    18b0:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
			OrangutanLCD::print("DEBUG");
    18b4:	82 e4       	ldi	r24, 0x42	; 66
    18b6:	93 e0       	ldi	r25, 0x03	; 3
    18b8:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    18bc:	80 91 9e 03 	lds	r24, 0x039E
    18c0:	80 62       	ori	r24, 0x20	; 32
    18c2:	80 93 9e 03 	sts	0x039E, r24
    18c6:	18 ae       	std	Y+56, r1	; 0x38
    18c8:	1f aa       	std	Y+55, r1	; 0x37
    18ca:	22 24       	eor	r2, r2
    18cc:	33 24       	eor	r3, r3
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9a ab       	std	Y+50, r25	; 0x32
    18d4:	89 ab       	std	Y+49, r24	; 0x31
    18d6:	44 24       	eor	r4, r4
    18d8:	55 24       	eor	r5, r5
    18da:	98 a7       	std	Y+40, r25	; 0x28
    18dc:	8f a3       	std	Y+39, r24	; 0x27
    18de:	66 24       	eor	r6, r6
    18e0:	77 24       	eor	r7, r7
    18e2:	9e 8f       	std	Y+30, r25	; 0x1e
    18e4:	8d 8f       	std	Y+29, r24	; 0x1d
    18e6:	1a a6       	std	Y+42, r1	; 0x2a
    18e8:	19 a6       	std	Y+41, r1	; 0x29
    18ea:	1e 8a       	std	Y+22, r1	; 0x16
    18ec:	1d 8a       	std	Y+21, r1	; 0x15
    18ee:	1e 86       	std	Y+14, r1	; 0x0e
    18f0:	1d 86       	std	Y+13, r1	; 0x0d
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    18f2:	84 e4       	ldi	r24, 0x44	; 68
    18f4:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    18fe:	85 e4       	ldi	r24, 0x45	; 69
    1900:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1904:	0e 94 c7 19 	call	0x338e	; 0x338e <_Z11i2c_readAckv>
    1908:	80 93 a2 03 	sts	0x03A2, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    190c:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <_Z11i2c_readNakv>
    1910:	80 93 a3 03 	sts	0x03A3, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1914:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>
				
				if(state != INIT){
    1918:	61 14       	cp	r6, r1
    191a:	71 04       	cpc	r7, r1
    191c:	79 f0       	breq	.+30     	; 0x193c <main+0x1418>
					OrangutanLCD::gotoXY(0,1);
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1926:	88 e4       	ldi	r24, 0x48	; 72
    1928:	93 e0       	ldi	r25, 0x03	; 3
    192a:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
    192e:	b3 01       	movw	r22, r6
    1930:	88 27       	eor	r24, r24
    1932:	77 fd       	sbrc	r23, 7
    1934:	80 95       	com	r24
    1936:	98 2f       	mov	r25, r24
    1938:	0e 94 83 1c 	call	0x3906	; 0x3906 <_ZN12OrangutanLCD5printEl>
					OrangutanLCD::print(state);
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    193c:	c2 01       	movw	r24, r4
    193e:	be 01       	movw	r22, r28
    1940:	6f 5f       	subi	r22, 0xFF	; 255
    1942:	7f 4f       	sbci	r23, 0xFF	; 255
    1944:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    1948:	61 14       	cp	r6, r1
    194a:	71 04       	cpc	r7, r1
    194c:	21 f4       	brne	.+8      	; 0x1956 <main+0x1432>
    194e:	88 23       	and	r24, r24
    1950:	e1 f1       	breq	.+120    	; 0x19ca <main+0x14a6>
    1952:	12 01       	movw	r2, r4
    1954:	04 c0       	rjmp	.+8      	; 0x195e <main+0x143a>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    1956:	91 e0       	ldi	r25, 0x01	; 1
    1958:	69 16       	cp	r6, r25
    195a:	71 04       	cpc	r7, r1
    195c:	41 f4       	brne	.+16     	; 0x196e <main+0x144a>
    195e:	c2 01       	movw	r24, r4
    1960:	82 19       	sub	r24, r2
    1962:	93 09       	sbc	r25, r3
    1964:	81 5a       	subi	r24, 0xA1	; 161
    1966:	9f 40       	sbci	r25, 0x0F	; 15
    1968:	ec f1       	brlt	.+122    	; 0x19e4 <main+0x14c0>
    196a:	12 01       	movw	r2, r4
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <main+0x1452>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    196e:	b2 e0       	ldi	r27, 0x02	; 2
    1970:	6b 16       	cp	r6, r27
    1972:	71 04       	cpc	r7, r1
    1974:	49 f4       	brne	.+18     	; 0x1988 <main+0x1464>
    1976:	c2 01       	movw	r24, r4
    1978:	82 19       	sub	r24, r2
    197a:	93 09       	sbc	r25, r3
    197c:	85 36       	cpi	r24, 0x65	; 101
    197e:	91 05       	cpc	r25, r1
    1980:	0c f4       	brge	.+2      	; 0x1984 <main+0x1460>
    1982:	40 c0       	rjmp	.+128    	; 0x1a04 <main+0x14e0>
    1984:	12 01       	movw	r2, r4
    1986:	04 c0       	rjmp	.+8      	; 0x1990 <main+0x146c>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    1988:	23 e0       	ldi	r18, 0x03	; 3
    198a:	62 16       	cp	r6, r18
    198c:	71 04       	cpc	r7, r1
    198e:	31 f4       	brne	.+12     	; 0x199c <main+0x1478>
    1990:	80 91 a2 03 	lds	r24, 0x03A2
    1994:	81 fd       	sbrc	r24, 1
    1996:	46 c0       	rjmp	.+140    	; 0x1a24 <main+0x1500>
    1998:	12 01       	movw	r2, r4
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <main+0x1480>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    199c:	34 e0       	ldi	r19, 0x04	; 4
    199e:	63 16       	cp	r6, r19
    19a0:	71 04       	cpc	r7, r1
    19a2:	31 f4       	brne	.+12     	; 0x19b0 <main+0x148c>
    19a4:	80 91 a2 03 	lds	r24, 0x03A2
    19a8:	83 fd       	sbrc	r24, 3
    19aa:	4c c0       	rjmp	.+152    	; 0x1a44 <main+0x1520>
    19ac:	12 01       	movw	r2, r4
    19ae:	04 c0       	rjmp	.+8      	; 0x19b8 <main+0x1494>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    19b0:	45 e0       	ldi	r20, 0x05	; 5
    19b2:	64 16       	cp	r6, r20
    19b4:	71 04       	cpc	r7, r1
    19b6:	49 f4       	brne	.+18     	; 0x19ca <main+0x14a6>
    19b8:	c2 01       	movw	r24, r4
    19ba:	82 19       	sub	r24, r2
    19bc:	93 09       	sbc	r25, r3
    19be:	85 36       	cpi	r24, 0x65	; 101
    19c0:	91 05       	cpc	r25, r1
    19c2:	0c f4       	brge	.+2      	; 0x19c6 <main+0x14a2>
    19c4:	4f c0       	rjmp	.+158    	; 0x1a64 <main+0x1540>
    19c6:	12 01       	movw	r2, r4
    19c8:	04 c0       	rjmp	.+8      	; 0x19d2 <main+0x14ae>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    19ca:	56 e0       	ldi	r21, 0x06	; 6
    19cc:	65 16       	cp	r6, r21
    19ce:	71 04       	cpc	r7, r1
    19d0:	61 f4       	brne	.+24     	; 0x19ea <main+0x14c6>
    19d2:	c2 01       	movw	r24, r4
    19d4:	82 19       	sub	r24, r2
    19d6:	93 09       	sbc	r25, r3
    19d8:	81 5a       	subi	r24, 0xA1	; 161
    19da:	9f 40       	sbci	r25, 0x0F	; 15
    19dc:	0c f4       	brge	.+2      	; 0x19e0 <main+0x14bc>
    19de:	52 c0       	rjmp	.+164    	; 0x1a84 <main+0x1560>
    19e0:	12 01       	movw	r2, r4
    19e2:	07 c0       	rjmp	.+14     	; 0x19f2 <main+0x14ce>
    19e4:	e1 e0       	ldi	r30, 0x01	; 1
    19e6:	6e 2e       	mov	r6, r30
    19e8:	71 2c       	mov	r7, r1
					state = B2SET;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    19ea:	bf e0       	ldi	r27, 0x0F	; 15
    19ec:	6b 16       	cp	r6, r27
    19ee:	71 04       	cpc	r7, r1
    19f0:	61 f4       	brne	.+24     	; 0x1a0a <main+0x14e6>
    19f2:	c2 01       	movw	r24, r4
    19f4:	82 19       	sub	r24, r2
    19f6:	93 09       	sbc	r25, r3
    19f8:	85 36       	cpi	r24, 0x65	; 101
    19fa:	91 05       	cpc	r25, r1
    19fc:	0c f4       	brge	.+2      	; 0x1a00 <main+0x14dc>
    19fe:	52 c0       	rjmp	.+164    	; 0x1aa4 <main+0x1580>
    1a00:	12 01       	movw	r2, r4
    1a02:	07 c0       	rjmp	.+14     	; 0x1a12 <main+0x14ee>
    1a04:	72 e0       	ldi	r23, 0x02	; 2
    1a06:	67 2e       	mov	r6, r23
    1a08:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    1a0a:	20 e1       	ldi	r18, 0x10	; 16
    1a0c:	62 16       	cp	r6, r18
    1a0e:	71 04       	cpc	r7, r1
    1a10:	61 f4       	brne	.+24     	; 0x1a2a <main+0x1506>
    1a12:	c2 01       	movw	r24, r4
    1a14:	82 19       	sub	r24, r2
    1a16:	93 09       	sbc	r25, r3
    1a18:	85 36       	cpi	r24, 0x65	; 101
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	0c f4       	brge	.+2      	; 0x1a20 <main+0x14fc>
    1a1e:	52 c0       	rjmp	.+164    	; 0x1ac4 <main+0x15a0>
    1a20:	12 01       	movw	r2, r4
    1a22:	07 c0       	rjmp	.+14     	; 0x1a32 <main+0x150e>
    1a24:	63 e0       	ldi	r22, 0x03	; 3
    1a26:	66 2e       	mov	r6, r22
    1a28:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    1a2a:	31 e1       	ldi	r19, 0x11	; 17
    1a2c:	63 16       	cp	r6, r19
    1a2e:	71 04       	cpc	r7, r1
    1a30:	61 f4       	brne	.+24     	; 0x1a4a <main+0x1526>
    1a32:	c2 01       	movw	r24, r4
    1a34:	82 19       	sub	r24, r2
    1a36:	93 09       	sbc	r25, r3
    1a38:	81 5d       	subi	r24, 0xD1	; 209
    1a3a:	97 40       	sbci	r25, 0x07	; 7
    1a3c:	0c f4       	brge	.+2      	; 0x1a40 <main+0x151c>
    1a3e:	52 c0       	rjmp	.+164    	; 0x1ae4 <main+0x15c0>
    1a40:	12 01       	movw	r2, r4
    1a42:	07 c0       	rjmp	.+14     	; 0x1a52 <main+0x152e>
    1a44:	54 e0       	ldi	r21, 0x04	; 4
    1a46:	65 2e       	mov	r6, r21
    1a48:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    1a4a:	52 e1       	ldi	r21, 0x12	; 18
    1a4c:	65 16       	cp	r6, r21
    1a4e:	71 04       	cpc	r7, r1
    1a50:	61 f4       	brne	.+24     	; 0x1a6a <main+0x1546>
    1a52:	c2 01       	movw	r24, r4
    1a54:	82 19       	sub	r24, r2
    1a56:	93 09       	sbc	r25, r3
    1a58:	85 36       	cpi	r24, 0x65	; 101
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	0c f4       	brge	.+2      	; 0x1a60 <main+0x153c>
    1a5e:	52 c0       	rjmp	.+164    	; 0x1b04 <main+0x15e0>
    1a60:	12 01       	movw	r2, r4
    1a62:	07 c0       	rjmp	.+14     	; 0x1a72 <main+0x154e>
    1a64:	45 e0       	ldi	r20, 0x05	; 5
    1a66:	64 2e       	mov	r6, r20
    1a68:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    1a6a:	83 e1       	ldi	r24, 0x13	; 19
    1a6c:	68 16       	cp	r6, r24
    1a6e:	71 04       	cpc	r7, r1
    1a70:	61 f4       	brne	.+24     	; 0x1a8a <main+0x1566>
    1a72:	c2 01       	movw	r24, r4
    1a74:	82 19       	sub	r24, r2
    1a76:	93 09       	sbc	r25, r3
    1a78:	81 5d       	subi	r24, 0xD1	; 209
    1a7a:	97 40       	sbci	r25, 0x07	; 7
    1a7c:	0c f4       	brge	.+2      	; 0x1a80 <main+0x155c>
    1a7e:	52 c0       	rjmp	.+164    	; 0x1b24 <main+0x1600>
    1a80:	12 01       	movw	r2, r4
    1a82:	07 c0       	rjmp	.+14     	; 0x1a92 <main+0x156e>
    1a84:	36 e0       	ldi	r19, 0x06	; 6
    1a86:	63 2e       	mov	r6, r19
    1a88:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    1a8a:	b4 e1       	ldi	r27, 0x14	; 20
    1a8c:	6b 16       	cp	r6, r27
    1a8e:	71 04       	cpc	r7, r1
    1a90:	61 f4       	brne	.+24     	; 0x1aaa <main+0x1586>
    1a92:	c2 01       	movw	r24, r4
    1a94:	82 19       	sub	r24, r2
    1a96:	93 09       	sbc	r25, r3
    1a98:	85 36       	cpi	r24, 0x65	; 101
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	0c f4       	brge	.+2      	; 0x1aa0 <main+0x157c>
    1a9e:	50 c0       	rjmp	.+160    	; 0x1b40 <main+0x161c>
    1aa0:	12 01       	movw	r2, r4
    1aa2:	07 c0       	rjmp	.+14     	; 0x1ab2 <main+0x158e>
    1aa4:	2f e0       	ldi	r18, 0x0F	; 15
    1aa6:	62 2e       	mov	r6, r18
    1aa8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    1aaa:	25 e1       	ldi	r18, 0x15	; 21
    1aac:	62 16       	cp	r6, r18
    1aae:	71 04       	cpc	r7, r1
    1ab0:	61 f4       	brne	.+24     	; 0x1aca <main+0x15a6>
    1ab2:	c2 01       	movw	r24, r4
    1ab4:	82 19       	sub	r24, r2
    1ab6:	93 09       	sbc	r25, r3
    1ab8:	81 5d       	subi	r24, 0xD1	; 209
    1aba:	97 40       	sbci	r25, 0x07	; 7
    1abc:	0c f4       	brge	.+2      	; 0x1ac0 <main+0x159c>
    1abe:	51 c0       	rjmp	.+162    	; 0x1b62 <main+0x163e>
    1ac0:	12 01       	movw	r2, r4
    1ac2:	07 c0       	rjmp	.+14     	; 0x1ad2 <main+0x15ae>
    1ac4:	90 e1       	ldi	r25, 0x10	; 16
    1ac6:	69 2e       	mov	r6, r25
    1ac8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    1aca:	46 e1       	ldi	r20, 0x16	; 22
    1acc:	64 16       	cp	r6, r20
    1ace:	71 04       	cpc	r7, r1
    1ad0:	61 f4       	brne	.+24     	; 0x1aea <main+0x15c6>
    1ad2:	c2 01       	movw	r24, r4
    1ad4:	82 19       	sub	r24, r2
    1ad6:	93 09       	sbc	r25, r3
    1ad8:	85 36       	cpi	r24, 0x65	; 101
    1ada:	91 05       	cpc	r25, r1
    1adc:	0c f4       	brge	.+2      	; 0x1ae0 <main+0x15bc>
    1ade:	53 c0       	rjmp	.+166    	; 0x1b86 <main+0x1662>
    1ae0:	12 01       	movw	r2, r4
    1ae2:	07 c0       	rjmp	.+14     	; 0x1af2 <main+0x15ce>
    1ae4:	81 e1       	ldi	r24, 0x11	; 17
    1ae6:	68 2e       	mov	r6, r24
    1ae8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1aea:	57 e1       	ldi	r21, 0x17	; 23
    1aec:	65 16       	cp	r6, r21
    1aee:	71 04       	cpc	r7, r1
    1af0:	61 f4       	brne	.+24     	; 0x1b0a <main+0x15e6>
    1af2:	c2 01       	movw	r24, r4
    1af4:	82 19       	sub	r24, r2
    1af6:	93 09       	sbc	r25, r3
    1af8:	81 5a       	subi	r24, 0xA1	; 161
    1afa:	9f 40       	sbci	r25, 0x0F	; 15
    1afc:	0c f4       	brge	.+2      	; 0x1b00 <main+0x15dc>
    1afe:	53 c0       	rjmp	.+166    	; 0x1ba6 <main+0x1682>
    1b00:	12 01       	movw	r2, r4
    1b02:	07 c0       	rjmp	.+14     	; 0x1b12 <main+0x15ee>
    1b04:	02 e1       	ldi	r16, 0x12	; 18
    1b06:	60 2e       	mov	r6, r16
    1b08:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    1b0a:	b8 e1       	ldi	r27, 0x18	; 24
    1b0c:	6b 16       	cp	r6, r27
    1b0e:	71 04       	cpc	r7, r1
    1b10:	61 f4       	brne	.+24     	; 0x1b2a <main+0x1606>
    1b12:	c2 01       	movw	r24, r4
    1b14:	82 19       	sub	r24, r2
    1b16:	93 09       	sbc	r25, r3
    1b18:	85 36       	cpi	r24, 0x65	; 101
    1b1a:	91 05       	cpc	r25, r1
    1b1c:	0c f4       	brge	.+2      	; 0x1b20 <main+0x15fc>
    1b1e:	51 c0       	rjmp	.+162    	; 0x1bc2 <main+0x169e>
    1b20:	12 01       	movw	r2, r4
    1b22:	07 c0       	rjmp	.+14     	; 0x1b32 <main+0x160e>
    1b24:	13 e1       	ldi	r17, 0x13	; 19
    1b26:	61 2e       	mov	r6, r17
    1b28:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    1b2a:	29 e1       	ldi	r18, 0x19	; 25
    1b2c:	62 16       	cp	r6, r18
    1b2e:	71 04       	cpc	r7, r1
    1b30:	51 f4       	brne	.+20     	; 0x1b46 <main+0x1622>
    1b32:	c2 01       	movw	r24, r4
    1b34:	82 19       	sub	r24, r2
    1b36:	93 09       	sbc	r25, r3
    1b38:	81 5a       	subi	r24, 0xA1	; 161
    1b3a:	9f 40       	sbci	r25, 0x0F	; 15
    1b3c:	44 f4       	brge	.+16     	; 0x1b4e <main+0x162a>
    1b3e:	4e c0       	rjmp	.+156    	; 0x1bdc <main+0x16b8>
    1b40:	b4 e1       	ldi	r27, 0x14	; 20
    1b42:	6b 2e       	mov	r6, r27
    1b44:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    1b46:	4a e1       	ldi	r20, 0x1A	; 26
    1b48:	64 16       	cp	r6, r20
    1b4a:	71 04       	cpc	r7, r1
    1b4c:	69 f4       	brne	.+26     	; 0x1b68 <main+0x1644>
    1b4e:	c2 01       	movw	r24, r4
    1b50:	82 19       	sub	r24, r2
    1b52:	93 09       	sbc	r25, r3
    1b54:	81 5a       	subi	r24, 0xA1	; 161
    1b56:	9f 40       	sbci	r25, 0x0F	; 15
    1b58:	0c f4       	brge	.+2      	; 0x1b5c <main+0x1638>
    1b5a:	4d c0       	rjmp	.+154    	; 0x1bf6 <main+0x16d2>
    1b5c:	5a a6       	std	Y+42, r5	; 0x2a
    1b5e:	49 a6       	std	Y+41, r4	; 0x29
    1b60:	07 c0       	rjmp	.+14     	; 0x1b70 <main+0x164c>
    1b62:	a5 e1       	ldi	r26, 0x15	; 21
    1b64:	6a 2e       	mov	r6, r26
    1b66:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    1b68:	8b e1       	ldi	r24, 0x1B	; 27
    1b6a:	68 16       	cp	r6, r24
    1b6c:	71 04       	cpc	r7, r1
    1b6e:	71 f4       	brne	.+28     	; 0x1b8c <main+0x1668>
    1b70:	c2 01       	movw	r24, r4
    1b72:	a9 a5       	ldd	r26, Y+41	; 0x29
    1b74:	ba a5       	ldd	r27, Y+42	; 0x2a
    1b76:	8a 1b       	sub	r24, r26
    1b78:	9b 0b       	sbc	r25, r27
    1b7a:	85 36       	cpi	r24, 0x65	; 101
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	0c f4       	brge	.+2      	; 0x1b82 <main+0x165e>
    1b80:	47 c0       	rjmp	.+142    	; 0x1c10 <main+0x16ec>
    1b82:	12 01       	movw	r2, r4
    1b84:	07 c0       	rjmp	.+14     	; 0x1b94 <main+0x1670>
    1b86:	f6 e1       	ldi	r31, 0x16	; 22
    1b88:	6f 2e       	mov	r6, r31
    1b8a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    1b8c:	bc e1       	ldi	r27, 0x1C	; 28
    1b8e:	6b 16       	cp	r6, r27
    1b90:	71 04       	cpc	r7, r1
    1b92:	61 f4       	brne	.+24     	; 0x1bac <main+0x1688>
    1b94:	c2 01       	movw	r24, r4
    1b96:	82 19       	sub	r24, r2
    1b98:	93 09       	sbc	r25, r3
    1b9a:	85 36       	cpi	r24, 0x65	; 101
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	0c f4       	brge	.+2      	; 0x1ba2 <main+0x167e>
    1ba0:	47 c0       	rjmp	.+142    	; 0x1c30 <main+0x170c>
    1ba2:	12 01       	movw	r2, r4
    1ba4:	07 c0       	rjmp	.+14     	; 0x1bb4 <main+0x1690>
    1ba6:	e7 e1       	ldi	r30, 0x17	; 23
    1ba8:	6e 2e       	mov	r6, r30
    1baa:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    1bac:	2d e1       	ldi	r18, 0x1D	; 29
    1bae:	62 16       	cp	r6, r18
    1bb0:	71 04       	cpc	r7, r1
    1bb2:	51 f4       	brne	.+20     	; 0x1bc8 <main+0x16a4>
    1bb4:	c2 01       	movw	r24, r4
    1bb6:	82 19       	sub	r24, r2
    1bb8:	93 09       	sbc	r25, r3
    1bba:	81 5a       	subi	r24, 0xA1	; 161
    1bbc:	9f 40       	sbci	r25, 0x0F	; 15
    1bbe:	44 f4       	brge	.+16     	; 0x1bd0 <main+0x16ac>
    1bc0:	47 c0       	rjmp	.+142    	; 0x1c50 <main+0x172c>
    1bc2:	78 e1       	ldi	r23, 0x18	; 24
    1bc4:	67 2e       	mov	r6, r23
    1bc6:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && /*counter - counterRef > totalStepLength2*fixtureMotorLoadBack &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    1bc8:	4e e1       	ldi	r20, 0x1E	; 30
    1bca:	64 16       	cp	r6, r20
    1bcc:	71 04       	cpc	r7, r1
    1bce:	49 f4       	brne	.+18     	; 0x1be2 <main+0x16be>
    1bd0:	80 91 a2 03 	lds	r24, 0x03A2
    1bd4:	83 fd       	sbrc	r24, 3
    1bd6:	4d c0       	rjmp	.+154    	; 0x1c72 <main+0x174e>
    1bd8:	12 01       	movw	r2, r4
    1bda:	07 c0       	rjmp	.+14     	; 0x1bea <main+0x16c6>
    1bdc:	69 e1       	ldi	r22, 0x19	; 25
    1bde:	66 2e       	mov	r6, r22
    1be0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    1be2:	5f e1       	ldi	r21, 0x1F	; 31
    1be4:	65 16       	cp	r6, r21
    1be6:	71 04       	cpc	r7, r1
    1be8:	49 f4       	brne	.+18     	; 0x1bfc <main+0x16d8>
    1bea:	80 91 a2 03 	lds	r24, 0x03A2
    1bee:	81 fd       	sbrc	r24, 1
    1bf0:	5f c1       	rjmp	.+702    	; 0x1eb0 <main+0x198c>
    1bf2:	12 01       	movw	r2, r4
    1bf4:	07 c0       	rjmp	.+14     	; 0x1c04 <main+0x16e0>
    1bf6:	5a e1       	ldi	r21, 0x1A	; 26
    1bf8:	65 2e       	mov	r6, r21
    1bfa:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureHome == 0){
    1bfc:	80 e2       	ldi	r24, 0x20	; 32
    1bfe:	68 16       	cp	r6, r24
    1c00:	71 04       	cpc	r7, r1
    1c02:	49 f4       	brne	.+18     	; 0x1c16 <main+0x16f2>
    1c04:	80 91 a2 03 	lds	r24, 0x03A2
    1c08:	82 fd       	sbrc	r24, 2
    1c0a:	5e c1       	rjmp	.+700    	; 0x1ec8 <main+0x19a4>
    1c0c:	12 01       	movw	r2, r4
    1c0e:	07 c0       	rjmp	.+14     	; 0x1c1e <main+0x16fa>
    1c10:	4b e1       	ldi	r20, 0x1B	; 27
    1c12:	64 2e       	mov	r6, r20
    1c14:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    1c16:	91 e2       	ldi	r25, 0x21	; 33
    1c18:	69 16       	cp	r6, r25
    1c1a:	71 04       	cpc	r7, r1
    1c1c:	61 f4       	brne	.+24     	; 0x1c36 <main+0x1712>
    1c1e:	c2 01       	movw	r24, r4
    1c20:	82 19       	sub	r24, r2
    1c22:	93 09       	sbc	r25, r3
    1c24:	85 36       	cpi	r24, 0x65	; 101
    1c26:	91 05       	cpc	r25, r1
    1c28:	0c f4       	brge	.+2      	; 0x1c2c <main+0x1708>
    1c2a:	5c c1       	rjmp	.+696    	; 0x1ee4 <main+0x19c0>
    1c2c:	12 01       	movw	r2, r4
    1c2e:	07 c0       	rjmp	.+14     	; 0x1c3e <main+0x171a>
    1c30:	3c e1       	ldi	r19, 0x1C	; 28
    1c32:	63 2e       	mov	r6, r19
    1c34:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    1c36:	a2 e2       	ldi	r26, 0x22	; 34
    1c38:	6a 16       	cp	r6, r26
    1c3a:	71 04       	cpc	r7, r1
    1c3c:	61 f4       	brne	.+24     	; 0x1c56 <main+0x1732>
    1c3e:	c2 01       	movw	r24, r4
    1c40:	82 19       	sub	r24, r2
    1c42:	93 09       	sbc	r25, r3
    1c44:	81 5a       	subi	r24, 0xA1	; 161
    1c46:	9f 40       	sbci	r25, 0x0F	; 15
    1c48:	0c f4       	brge	.+2      	; 0x1c4c <main+0x1728>
    1c4a:	5e c1       	rjmp	.+700    	; 0x1f08 <main+0x19e4>
    1c4c:	12 01       	movw	r2, r4
    1c4e:	07 c0       	rjmp	.+14     	; 0x1c5e <main+0x173a>
    1c50:	2d e1       	ldi	r18, 0x1D	; 29
    1c52:	62 2e       	mov	r6, r18
    1c54:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    1c56:	23 e2       	ldi	r18, 0x23	; 35
    1c58:	62 16       	cp	r6, r18
    1c5a:	71 04       	cpc	r7, r1
    1c5c:	69 f4       	brne	.+26     	; 0x1c78 <main+0x1754>
    1c5e:	c2 01       	movw	r24, r4
    1c60:	82 19       	sub	r24, r2
    1c62:	93 09       	sbc	r25, r3
    1c64:	0b 97       	sbiw	r24, 0x0b	; 11
    1c66:	0c f4       	brge	.+2      	; 0x1c6a <main+0x1746>
    1c68:	5c c1       	rjmp	.+696    	; 0x1f22 <main+0x19fe>
    1c6a:	94 e2       	ldi	r25, 0x24	; 36
    1c6c:	69 2e       	mov	r6, r25
    1c6e:	71 2c       	mov	r7, r1
    1c70:	6f c1       	rjmp	.+734    	; 0x1f50 <main+0x1a2c>
    1c72:	8e e1       	ldi	r24, 0x1E	; 30
    1c74:	68 2e       	mov	r6, r24
    1c76:	71 2c       	mov	r7, r1
				}


				//state actions
						
				switch (state){
    1c78:	f3 01       	movw	r30, r6
    1c7a:	e4 32       	cpi	r30, 0x24	; 36
    1c7c:	f1 05       	cpc	r31, r1
    1c7e:	08 f0       	brcs	.+2      	; 0x1c82 <main+0x175e>
    1c80:	67 c1       	rjmp	.+718    	; 0x1f50 <main+0x1a2c>
    1c82:	ea 56       	subi	r30, 0x6A	; 106
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	ee 0f       	add	r30, r30
    1c88:	ff 1f       	adc	r31, r31
    1c8a:	05 90       	lpm	r0, Z+
    1c8c:	f4 91       	lpm	r31, Z+
    1c8e:	e0 2d       	mov	r30, r0
    1c90:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    1c92:	80 91 a2 03 	lds	r24, 0x03A2
    1c96:	90 91 9e 03 	lds	r25, 0x039E
    1c9a:	20 91 a0 03 	lds	r18, 0x03A0
    1c9e:	82 ff       	sbrs	r24, 2
    1ca0:	08 c0       	rjmp	.+16     	; 0x1cb2 <main+0x178e>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    1ca2:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1ca4:	27 7f       	andi	r18, 0xF7	; 247
    1ca6:	20 93 a0 03 	sts	0x03A0, r18
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1caa:	90 62       	ori	r25, 0x20	; 32
    1cac:	90 93 9e 03 	sts	0x039E, r25
    1cb0:	4f c1       	rjmp	.+670    	; 0x1f50 <main+0x1a2c>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1cb2:	9f 7d       	andi	r25, 0xDF	; 223
    1cb4:	90 93 9e 03 	sts	0x039E, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1cb8:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1cba:	28 60       	ori	r18, 0x08	; 8
    1cbc:	20 93 a0 03 	sts	0x03A0, r18
						if(print0 == 1){
    1cc0:	4f a1       	ldd	r20, Y+39	; 0x27
    1cc2:	58 a5       	ldd	r21, Y+40	; 0x28
    1cc4:	41 30       	cpi	r20, 0x01	; 1
    1cc6:	51 05       	cpc	r21, r1
    1cc8:	09 f0       	breq	.+2      	; 0x1ccc <main+0x17a8>
    1cca:	49 c0       	rjmp	.+146    	; 0x1d5e <main+0x183a>
							OrangutanLCD::gotoXY(0,1);
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1cd4:	8f e4       	ldi	r24, 0x4F	; 79
    1cd6:	93 e0       	ldi	r25, 0x03	; 3
    1cd8:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
    1cdc:	18 a6       	std	Y+40, r1	; 0x28
    1cde:	1f a2       	std	Y+39, r1	; 0x27
    1ce0:	3e c0       	rjmp	.+124    	; 0x1d5e <main+0x183a>
							print0 = 0;
						}
					}
					break;
				case LOAD:
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1ce2:	20 91 a0 03 	lds	r18, 0x03A0
    1ce6:	32 2f       	mov	r19, r18
    1ce8:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    1cea:	c2 01       	movw	r24, r4
    1cec:	68 ec       	ldi	r22, 0xC8	; 200
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divmodhi4>
    1cf4:	84 36       	cpi	r24, 0x64	; 100
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	24 f4       	brge	.+8      	; 0x1d02 <main+0x17de>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1cfa:	2c 7f       	andi	r18, 0xFC	; 252
    1cfc:	20 93 a0 03 	sts	0x03A0, r18
    1d00:	03 c0       	rjmp	.+6      	; 0x1d08 <main+0x17e4>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1d02:	32 60       	ori	r19, 0x02	; 2
    1d04:	30 93 a0 03 	sts	0x03A0, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    1d08:	80 91 9e 03 	lds	r24, 0x039E
    1d0c:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1d0e:	84 60       	ori	r24, 0x04	; 4
    1d10:	80 93 9e 03 	sts	0x039E, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1d14:	80 91 a0 03 	lds	r24, 0x03A0
    1d18:	8b 7f       	andi	r24, 0xFB	; 251
    1d1a:	80 93 a0 03 	sts	0x03A0, r24
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9e 8b       	std	Y+22, r25	; 0x16
    1d24:	8d 8b       	std	Y+21, r24	; 0x15
    1d26:	14 c1       	rjmp	.+552    	; 0x1f50 <main+0x1a2c>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1d28:	80 91 a0 03 	lds	r24, 0x03A0
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1d2c:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1d2e:	86 61       	ori	r24, 0x16	; 22
    1d30:	80 93 a0 03 	sts	0x03A0, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d34:	80 91 9e 03 	lds	r24, 0x039E
    1d38:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1d3a:	8b 7f       	andi	r24, 0xFB	; 251
    1d3c:	80 93 9e 03 	sts	0x039E, r24
    1d40:	05 c1       	rjmp	.+522    	; 0x1f4c <main+0x1a28>
					break;
				case FIXL:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
    1d42:	80 91 9e 03 	lds	r24, 0x039E
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d46:	80 63       	ori	r24, 0x30	; 48
    1d48:	47 c0       	rjmp	.+142    	; 0x1dd8 <main+0x18b4>
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1d4a:	80 91 9e 03 	lds	r24, 0x039E
    1d4e:	8f 7d       	andi	r24, 0xDF	; 223
    1d50:	80 93 9e 03 	sts	0x039E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1d54:	80 91 a0 03 	lds	r24, 0x03A0
    1d58:	88 60       	ori	r24, 0x08	; 8
    1d5a:	80 93 a0 03 	sts	0x03A0, r24
    1d5e:	1e 8e       	std	Y+30, r1	; 0x1e
    1d60:	1d 8e       	std	Y+29, r1	; 0x1d
    1d62:	f6 c0       	rjmp	.+492    	; 0x1f50 <main+0x1a2c>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1d64:	80 91 a0 03 	lds	r24, 0x03A0
    1d68:	8f 7e       	andi	r24, 0xEF	; 239
    1d6a:	80 93 a0 03 	sts	0x03A0, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d6e:	80 91 9e 03 	lds	r24, 0x039E
    1d72:	80 62       	ori	r24, 0x20	; 32
    1d74:	80 93 9e 03 	sts	0x039E, r24
    1d78:	eb c0       	rjmp	.+470    	; 0x1f50 <main+0x1a2c>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1d7a:	80 91 9e 03 	lds	r24, 0x039E
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d7e:	80 63       	ori	r24, 0x30	; 48
    1d80:	80 93 9e 03 	sts	0x039E, r24
    1d84:	21 e0       	ldi	r18, 0x01	; 1
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	3e 8f       	std	Y+30, r19	; 0x1e
    1d8a:	2d 8f       	std	Y+29, r18	; 0x1d
    1d8c:	e1 c0       	rjmp	.+450    	; 0x1f50 <main+0x1a2c>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    1d8e:	80 91 9f 03 	lds	r24, 0x039F
    1d92:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1d94:	8b 7f       	andi	r24, 0xFB	; 251
    1d96:	80 93 9f 03 	sts	0x039F, r24
    1d9a:	e1 cf       	rjmp	.-62     	; 0x1d5e <main+0x183a>
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1d9c:	80 91 a1 03 	lds	r24, 0x03A1
    1da0:	81 60       	ori	r24, 0x01	; 1
    1da2:	80 93 a1 03 	sts	0x03A1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1da6:	80 91 a0 03 	lds	r24, 0x03A0
    1daa:	8f 77       	andi	r24, 0x7F	; 127
    1dac:	80 93 a0 03 	sts	0x03A0, r24
    1db0:	41 e0       	ldi	r20, 0x01	; 1
    1db2:	50 e0       	ldi	r21, 0x00	; 0
    1db4:	58 af       	std	Y+56, r21	; 0x38
    1db6:	4f ab       	std	Y+55, r20	; 0x37
    1db8:	cb c0       	rjmp	.+406    	; 0x1f50 <main+0x1a2c>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1dba:	80 91 a1 03 	lds	r24, 0x03A1
    1dbe:	8e 7f       	andi	r24, 0xFE	; 254
    1dc0:	80 93 a1 03 	sts	0x03A1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1dc4:	80 91 a0 03 	lds	r24, 0x03A0
    1dc8:	80 68       	ori	r24, 0x80	; 128
    1dca:	80 93 a0 03 	sts	0x03A0, r24
    1dce:	2e c0       	rjmp	.+92     	; 0x1e2c <main+0x1908>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1dd0:	80 91 9e 03 	lds	r24, 0x039E
    1dd4:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1dd6:	80 62       	ori	r24, 0x20	; 32
    1dd8:	80 93 9e 03 	sts	0x039E, r24
    1ddc:	a1 e0       	ldi	r26, 0x01	; 1
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	be 8f       	std	Y+30, r27	; 0x1e
    1de2:	ad 8f       	std	Y+29, r26	; 0x1d
    1de4:	b5 c0       	rjmp	.+362    	; 0x1f50 <main+0x1a2c>
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1de6:	80 91 9f 03 	lds	r24, 0x039F
    1dea:	8b 7f       	andi	r24, 0xFB	; 251
    1dec:	80 93 9f 03 	sts	0x039F, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1df0:	80 91 a1 03 	lds	r24, 0x03A1
    1df4:	81 60       	ori	r24, 0x01	; 1
    1df6:	80 93 a1 03 	sts	0x03A1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1dfa:	80 91 a0 03 	lds	r24, 0x03A0
    1dfe:	8f 77       	andi	r24, 0x7F	; 127
    1e00:	80 93 a0 03 	sts	0x03A0, r24
    1e04:	21 e0       	ldi	r18, 0x01	; 1
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	38 af       	std	Y+56, r19	; 0x38
    1e0a:	2f ab       	std	Y+55, r18	; 0x37
    1e0c:	a8 cf       	rjmp	.-176    	; 0x1d5e <main+0x183a>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1e0e:	80 91 a1 03 	lds	r24, 0x03A1
    1e12:	8e 7f       	andi	r24, 0xFE	; 254
    1e14:	80 93 a1 03 	sts	0x03A1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1e18:	80 91 a0 03 	lds	r24, 0x03A0
    1e1c:	80 68       	ori	r24, 0x80	; 128
    1e1e:	80 93 a0 03 	sts	0x03A0, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    1e22:	80 91 9f 03 	lds	r24, 0x039F
    1e26:	87 7f       	andi	r24, 0xF7	; 247
    1e28:	80 93 9f 03 	sts	0x039F, r24
    1e2c:	18 ae       	std	Y+56, r1	; 0x38
    1e2e:	1f aa       	std	Y+55, r1	; 0x37
    1e30:	96 cf       	rjmp	.-212    	; 0x1d5e <main+0x183a>
					break;
				//*************************************************
				case MOVED1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1e32:	80 91 9e 03 	lds	r24, 0x039E
    1e36:	80 62       	ori	r24, 0x20	; 32
    1e38:	80 93 9e 03 	sts	0x039E, r24
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9e 8f       	std	Y+30, r25	; 0x1e
    1e42:	8d 8f       	std	Y+29, r24	; 0x1d
    1e44:	85 c0       	rjmp	.+266    	; 0x1f50 <main+0x1a2c>
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1e46:	80 91 a1 03 	lds	r24, 0x03A1
    1e4a:	87 7f       	andi	r24, 0xF7	; 247
    1e4c:	80 93 a1 03 	sts	0x03A1, r24
    1e50:	86 cf       	rjmp	.-244    	; 0x1d5e <main+0x183a>
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1e52:	80 91 a1 03 	lds	r24, 0x03A1
    1e56:	88 60       	ori	r24, 0x08	; 8
    1e58:	10 c0       	rjmp	.+32     	; 0x1e7a <main+0x1956>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    1e5a:	80 91 9f 03 	lds	r24, 0x039F
    1e5e:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1e60:	8f 7d       	andi	r24, 0xDF	; 223
    1e62:	80 93 9f 03 	sts	0x039F, r24
    1e66:	1e 8e       	std	Y+30, r1	; 0x1e
    1e68:	1d 8e       	std	Y+29, r1	; 0x1d
    1e6a:	21 e0       	ldi	r18, 0x01	; 1
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	3e 87       	std	Y+14, r19	; 0x0e
    1e70:	2d 87       	std	Y+13, r18	; 0x0d
    1e72:	6e c0       	rjmp	.+220    	; 0x1f50 <main+0x1a2c>
					paperTowelMotor = 1;
					break;
				case D2RAISE:
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1e74:	80 91 a1 03 	lds	r24, 0x03A1
    1e78:	8d 7f       	andi	r24, 0xFD	; 253
    1e7a:	80 93 a1 03 	sts	0x03A1, r24
    1e7e:	68 c0       	rjmp	.+208    	; 0x1f50 <main+0x1a2c>
					break;
				case DRY2:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1e80:	80 91 9e 03 	lds	r24, 0x039E
    1e84:	80 62       	ori	r24, 0x20	; 32
    1e86:	80 93 9e 03 	sts	0x039E, r24
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	50 e0       	ldi	r21, 0x00	; 0
    1e8e:	5e 8f       	std	Y+30, r21	; 0x1e
    1e90:	4d 8f       	std	Y+29, r20	; 0x1d
    1e92:	5e c0       	rjmp	.+188    	; 0x1f50 <main+0x1a2c>
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    1e94:	80 91 9f 03 	lds	r24, 0x039F
    1e98:	8f 7b       	andi	r24, 0xBF	; 191
    1e9a:	80 93 9f 03 	sts	0x039F, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1e9e:	80 91 a1 03 	lds	r24, 0x03A1
    1ea2:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1ea4:	8b 7f       	andi	r24, 0xFB	; 251
    1ea6:	80 93 a1 03 	sts	0x03A1, r24
    1eaa:	1e 86       	std	Y+14, r1	; 0x0e
    1eac:	1d 86       	std	Y+13, r1	; 0x0d
    1eae:	50 c0       	rjmp	.+160    	; 0x1f50 <main+0x1a2c>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1eb0:	80 91 a0 03 	lds	r24, 0x03A0
    1eb4:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1eb6:	80 61       	ori	r24, 0x10	; 16
    1eb8:	80 93 a0 03 	sts	0x03A0, r24
    1ebc:	1e 8e       	std	Y+30, r1	; 0x1e
    1ebe:	1d 8e       	std	Y+29, r1	; 0x1d
    1ec0:	0f e1       	ldi	r16, 0x1F	; 31
    1ec2:	60 2e       	mov	r6, r16
    1ec4:	71 2c       	mov	r7, r1
    1ec6:	44 c0       	rjmp	.+136    	; 0x1f50 <main+0x1a2c>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1ec8:	80 91 9e 03 	lds	r24, 0x039E
    1ecc:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1ece:	80 62       	ori	r24, 0x20	; 32
    1ed0:	80 93 9e 03 	sts	0x039E, r24
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	9e 8f       	std	Y+30, r25	; 0x1e
    1eda:	8d 8f       	std	Y+29, r24	; 0x1d
    1edc:	10 e2       	ldi	r17, 0x20	; 32
    1ede:	61 2e       	mov	r6, r17
    1ee0:	71 2c       	mov	r7, r1
    1ee2:	36 c0       	rjmp	.+108    	; 0x1f50 <main+0x1a2c>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1ee4:	80 91 9e 03 	lds	r24, 0x039E
    1ee8:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1eea:	84 60       	ori	r24, 0x04	; 4
    1eec:	80 93 9e 03 	sts	0x039E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1ef0:	80 91 a0 03 	lds	r24, 0x03A0
    1ef4:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1ef6:	8f 7e       	andi	r24, 0xEF	; 239
    1ef8:	80 93 a0 03 	sts	0x03A0, r24
    1efc:	1e 8e       	std	Y+30, r1	; 0x1e
    1efe:	1d 8e       	std	Y+29, r1	; 0x1d
    1f00:	b1 e2       	ldi	r27, 0x21	; 33
    1f02:	6b 2e       	mov	r6, r27
    1f04:	71 2c       	mov	r7, r1
    1f06:	24 c0       	rjmp	.+72     	; 0x1f50 <main+0x1a2c>
					break;
    1f08:	a2 e2       	ldi	r26, 0x22	; 34
    1f0a:	6a 2e       	mov	r6, r26
    1f0c:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1f0e:	80 91 9e 03 	lds	r24, 0x039E
    1f12:	8d 7f       	andi	r24, 0xFD	; 253
    1f14:	80 93 9e 03 	sts	0x039E, r24
    1f18:	a1 e0       	ldi	r26, 0x01	; 1
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	be 8b       	std	Y+22, r27	; 0x16
    1f1e:	ad 8b       	std	Y+21, r26	; 0x15
    1f20:	17 c0       	rjmp	.+46     	; 0x1f50 <main+0x1a2c>
					plateLoadMotor = 1;
					break;
    1f22:	f3 e2       	ldi	r31, 0x23	; 35
    1f24:	6f 2e       	mov	r6, r31
    1f26:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1f28:	80 91 9e 03 	lds	r24, 0x039E
    1f2c:	8b 7f       	andi	r24, 0xFB	; 251
    1f2e:	80 93 9e 03 	sts	0x039E, r24
					if(print35 == 1){
    1f32:	29 a9       	ldd	r18, Y+49	; 0x31
    1f34:	3a a9       	ldd	r19, Y+50	; 0x32
    1f36:	21 30       	cpi	r18, 0x01	; 1
    1f38:	31 05       	cpc	r19, r1
    1f3a:	41 f4       	brne	.+16     	; 0x1f4c <main+0x1a28>
						OrangutanLCD::clear();
    1f3c:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1f40:	8d e5       	ldi	r24, 0x5D	; 93
    1f42:	93 e0       	ldi	r25, 0x03	; 3
    1f44:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
    1f48:	1a aa       	std	Y+50, r1	; 0x32
    1f4a:	19 aa       	std	Y+49, r1	; 0x31
    1f4c:	1e 8a       	std	Y+22, r1	; 0x16
    1f4e:	1d 8a       	std	Y+21, r1	; 0x15
					}
					break;
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    1f50:	4d b7       	in	r20, 0x3d	; 61
    1f52:	5e b7       	in	r21, 0x3e	; 62
    1f54:	42 51       	subi	r20, 0x12	; 18
    1f56:	50 40       	sbci	r21, 0x00	; 0
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	5e bf       	out	0x3e, r21	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	4d bf       	out	0x3d, r20	; 61
    1f62:	ed b7       	in	r30, 0x3d	; 61
    1f64:	fe b7       	in	r31, 0x3e	; 62
    1f66:	31 96       	adiw	r30, 0x01	; 1
    1f68:	82 e0       	ldi	r24, 0x02	; 2
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	ad b7       	in	r26, 0x3d	; 61
    1f6e:	be b7       	in	r27, 0x3e	; 62
    1f70:	12 96       	adiw	r26, 0x02	; 2
    1f72:	9c 93       	st	X, r25
    1f74:	8e 93       	st	-X, r24
    1f76:	11 97       	sbiw	r26, 0x01	; 1
    1f78:	93 83       	std	Z+3, r25	; 0x03
    1f7a:	82 83       	std	Z+2, r24	; 0x02
    1f7c:	95 83       	std	Z+5, r25	; 0x05
    1f7e:	84 83       	std	Z+4, r24	; 0x04
    1f80:	97 83       	std	Z+7, r25	; 0x07
    1f82:	86 83       	std	Z+6, r24	; 0x06
    1f84:	21 e0       	ldi	r18, 0x01	; 1
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	31 87       	std	Z+9, r19	; 0x09
    1f8a:	20 87       	std	Z+8, r18	; 0x08
    1f8c:	33 87       	std	Z+11, r19	; 0x0b
    1f8e:	22 87       	std	Z+10, r18	; 0x0a
    1f90:	35 87       	std	Z+13, r19	; 0x0d
    1f92:	24 87       	std	Z+12, r18	; 0x0c
    1f94:	37 87       	std	Z+15, r19	; 0x0f
    1f96:	26 87       	std	Z+14, r18	; 0x0e
    1f98:	31 8b       	std	Z+17, r19	; 0x11
    1f9a:	20 8b       	std	Z+16, r18	; 0x10
    1f9c:	c2 01       	movw	r24, r4
    1f9e:	b1 01       	movw	r22, r2
    1fa0:	49 a5       	ldd	r20, Y+41	; 0x29
    1fa2:	5a a5       	ldd	r21, Y+42	; 0x2a
    1fa4:	2d 89       	ldd	r18, Y+21	; 0x15
    1fa6:	3e 89       	ldd	r19, Y+22	; 0x16
    1fa8:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1faa:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1fac:	ee 24       	eor	r14, r14
    1fae:	ff 24       	eor	r15, r15
    1fb0:	cf a8       	ldd	r12, Y+55	; 0x37
    1fb2:	d8 ac       	ldd	r13, Y+56	; 0x38
    1fb4:	ad 84       	ldd	r10, Y+13	; 0x0d
    1fb6:	be 84       	ldd	r11, Y+14	; 0x0e
    1fb8:	e2 e0       	ldi	r30, 0x02	; 2
    1fba:	8e 2e       	mov	r8, r30
    1fbc:	91 2c       	mov	r9, r1
    1fbe:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    1fc2:	4d b7       	in	r20, 0x3d	; 61
    1fc4:	5e b7       	in	r21, 0x3e	; 62
    1fc6:	4e 5e       	subi	r20, 0xEE	; 238
    1fc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	5e bf       	out	0x3e, r21	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	4d bf       	out	0x3d, r20	; 61
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("SECOND B");
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1fdc:	54 e2       	ldi	r21, 0x24	; 36
    1fde:	65 16       	cp	r6, r21
    1fe0:	71 04       	cpc	r7, r1
    1fe2:	11 f4       	brne	.+4      	; 0x1fe8 <main+0x1ac4>
    1fe4:	0c 94 02 19 	jmp	0x3204	; 0x3204 <main+0x2ce0>
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    1fe8:	08 94       	sec
    1fea:	41 1c       	adc	r4, r1
    1fec:	51 1c       	adc	r5, r1
    1fee:	81 cc       	rjmp	.-1790   	; 0x18f2 <main+0x13ce>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    1ff0:	82 e0       	ldi	r24, 0x02	; 2
    1ff2:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    1ff6:	88 23       	and	r24, r24
    1ff8:	11 f4       	brne	.+4      	; 0x1ffe <main+0x1ada>
    1ffa:	0c 94 39 19 	jmp	0x3272	; 0x3272 <main+0x2d4e>
			OrangutanLCD::gotoXY(7,0);
    1ffe:	87 e0       	ldi	r24, 0x07	; 7
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("BOTH B");
    2006:	83 e7       	ldi	r24, 0x73	; 115
    2008:	93 e0       	ldi	r25, 0x03	; 3
    200a:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
			OrangutanLCD::print("DEBUG");
    200e:	82 e4       	ldi	r24, 0x42	; 66
    2010:	93 e0       	ldi	r25, 0x03	; 3
    2012:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2016:	80 91 9e 03 	lds	r24, 0x039E
    201a:	80 62       	ori	r24, 0x20	; 32
    201c:	80 93 9e 03 	sts	0x039E, r24
    2020:	1e aa       	std	Y+54, r1	; 0x36
    2022:	1d aa       	std	Y+53, r1	; 0x35
    2024:	22 24       	eor	r2, r2
    2026:	33 24       	eor	r3, r3
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	98 ab       	std	Y+48, r25	; 0x30
    202e:	8f a7       	std	Y+47, r24	; 0x2f
    2030:	44 24       	eor	r4, r4
    2032:	55 24       	eor	r5, r5
    2034:	9e a3       	std	Y+38, r25	; 0x26
    2036:	8d a3       	std	Y+37, r24	; 0x25
    2038:	66 24       	eor	r6, r6
    203a:	77 24       	eor	r7, r7
    203c:	9c 8f       	std	Y+28, r25	; 0x1c
    203e:	8b 8f       	std	Y+27, r24	; 0x1b
    2040:	1a a2       	std	Y+34, r1	; 0x22
    2042:	19 a2       	std	Y+33, r1	; 0x21
    2044:	1c 8a       	std	Y+20, r1	; 0x14
    2046:	1b 8a       	std	Y+19, r1	; 0x13
    2048:	1c 86       	std	Y+12, r1	; 0x0c
    204a:	1b 86       	std	Y+11, r1	; 0x0b
    204c:	1e 82       	std	Y+6, r1	; 0x06
    204e:	1d 82       	std	Y+5, r1	; 0x05
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    2050:	84 e4       	ldi	r24, 0x44	; 68
    2052:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    205c:	85 e4       	ldi	r24, 0x45	; 69
    205e:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    2062:	0e 94 c7 19 	call	0x338e	; 0x338e <_Z11i2c_readAckv>
    2066:	80 93 a2 03 	sts	0x03A2, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    206a:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <_Z11i2c_readNakv>
    206e:	80 93 a3 03 	sts	0x03A3, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    2072:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>
				
				if(state != INIT){
    2076:	61 14       	cp	r6, r1
    2078:	71 04       	cpc	r7, r1
    207a:	b9 f0       	breq	.+46     	; 0x20aa <main+0x1b86>
					OrangutanLCD::gotoXY(6,1);
    207c:	86 e0       	ldi	r24, 0x06	; 6
    207e:	61 e0       	ldi	r22, 0x01	; 1
    2080:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("       ");
    2084:	8a e7       	ldi	r24, 0x7A	; 122
    2086:	93 e0       	ldi	r25, 0x03	; 3
    2088:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	61 e0       	ldi	r22, 0x01	; 1
    2090:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    2094:	88 e4       	ldi	r24, 0x48	; 72
    2096:	93 e0       	ldi	r25, 0x03	; 3
    2098:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
    209c:	b3 01       	movw	r22, r6
    209e:	88 27       	eor	r24, r24
    20a0:	77 fd       	sbrc	r23, 7
    20a2:	80 95       	com	r24
    20a4:	98 2f       	mov	r25, r24
    20a6:	0e 94 83 1c 	call	0x3906	; 0x3906 <_ZN12OrangutanLCD5printEl>
					OrangutanLCD::print(state);
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    20aa:	c2 01       	movw	r24, r4
    20ac:	be 01       	movw	r22, r28
    20ae:	6f 5f       	subi	r22, 0xFF	; 255
    20b0:	7f 4f       	sbci	r23, 0xFF	; 255
    20b2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    20b6:	61 14       	cp	r6, r1
    20b8:	71 04       	cpc	r7, r1
    20ba:	21 f4       	brne	.+8      	; 0x20c4 <main+0x1ba0>
    20bc:	88 23       	and	r24, r24
    20be:	e1 f1       	breq	.+120    	; 0x2138 <main+0x1c14>
    20c0:	12 01       	movw	r2, r4
    20c2:	04 c0       	rjmp	.+8      	; 0x20cc <main+0x1ba8>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    20c4:	91 e0       	ldi	r25, 0x01	; 1
    20c6:	69 16       	cp	r6, r25
    20c8:	71 04       	cpc	r7, r1
    20ca:	41 f4       	brne	.+16     	; 0x20dc <main+0x1bb8>
    20cc:	c2 01       	movw	r24, r4
    20ce:	82 19       	sub	r24, r2
    20d0:	93 09       	sbc	r25, r3
    20d2:	81 5a       	subi	r24, 0xA1	; 161
    20d4:	9f 40       	sbci	r25, 0x0F	; 15
    20d6:	ec f1       	brlt	.+122    	; 0x2152 <main+0x1c2e>
    20d8:	12 01       	movw	r2, r4
    20da:	04 c0       	rjmp	.+8      	; 0x20e4 <main+0x1bc0>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    20dc:	b2 e0       	ldi	r27, 0x02	; 2
    20de:	6b 16       	cp	r6, r27
    20e0:	71 04       	cpc	r7, r1
    20e2:	49 f4       	brne	.+18     	; 0x20f6 <main+0x1bd2>
    20e4:	c2 01       	movw	r24, r4
    20e6:	82 19       	sub	r24, r2
    20e8:	93 09       	sbc	r25, r3
    20ea:	85 36       	cpi	r24, 0x65	; 101
    20ec:	91 05       	cpc	r25, r1
    20ee:	0c f4       	brge	.+2      	; 0x20f2 <main+0x1bce>
    20f0:	40 c0       	rjmp	.+128    	; 0x2172 <main+0x1c4e>
    20f2:	12 01       	movw	r2, r4
    20f4:	04 c0       	rjmp	.+8      	; 0x20fe <main+0x1bda>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    20f6:	23 e0       	ldi	r18, 0x03	; 3
    20f8:	62 16       	cp	r6, r18
    20fa:	71 04       	cpc	r7, r1
    20fc:	31 f4       	brne	.+12     	; 0x210a <main+0x1be6>
    20fe:	80 91 a2 03 	lds	r24, 0x03A2
    2102:	81 fd       	sbrc	r24, 1
    2104:	46 c0       	rjmp	.+140    	; 0x2192 <main+0x1c6e>
    2106:	12 01       	movw	r2, r4
    2108:	04 c0       	rjmp	.+8      	; 0x2112 <main+0x1bee>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    210a:	34 e0       	ldi	r19, 0x04	; 4
    210c:	63 16       	cp	r6, r19
    210e:	71 04       	cpc	r7, r1
    2110:	31 f4       	brne	.+12     	; 0x211e <main+0x1bfa>
    2112:	80 91 a2 03 	lds	r24, 0x03A2
    2116:	83 fd       	sbrc	r24, 3
    2118:	4c c0       	rjmp	.+152    	; 0x21b2 <main+0x1c8e>
    211a:	12 01       	movw	r2, r4
    211c:	04 c0       	rjmp	.+8      	; 0x2126 <main+0x1c02>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    211e:	45 e0       	ldi	r20, 0x05	; 5
    2120:	64 16       	cp	r6, r20
    2122:	71 04       	cpc	r7, r1
    2124:	49 f4       	brne	.+18     	; 0x2138 <main+0x1c14>
    2126:	c2 01       	movw	r24, r4
    2128:	82 19       	sub	r24, r2
    212a:	93 09       	sbc	r25, r3
    212c:	85 36       	cpi	r24, 0x65	; 101
    212e:	91 05       	cpc	r25, r1
    2130:	0c f4       	brge	.+2      	; 0x2134 <main+0x1c10>
    2132:	4d c0       	rjmp	.+154    	; 0x21ce <main+0x1caa>
    2134:	12 01       	movw	r2, r4
    2136:	04 c0       	rjmp	.+8      	; 0x2140 <main+0x1c1c>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    2138:	56 e0       	ldi	r21, 0x06	; 6
    213a:	65 16       	cp	r6, r21
    213c:	71 04       	cpc	r7, r1
    213e:	61 f4       	brne	.+24     	; 0x2158 <main+0x1c34>
    2140:	c2 01       	movw	r24, r4
    2142:	82 19       	sub	r24, r2
    2144:	93 09       	sbc	r25, r3
    2146:	81 5a       	subi	r24, 0xA1	; 161
    2148:	9f 40       	sbci	r25, 0x0F	; 15
    214a:	0c f4       	brge	.+2      	; 0x214e <main+0x1c2a>
    214c:	50 c0       	rjmp	.+160    	; 0x21ee <main+0x1cca>
    214e:	12 01       	movw	r2, r4
    2150:	07 c0       	rjmp	.+14     	; 0x2160 <main+0x1c3c>
    2152:	21 e0       	ldi	r18, 0x01	; 1
    2154:	62 2e       	mov	r6, r18
    2156:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    2158:	b7 e0       	ldi	r27, 0x07	; 7
    215a:	6b 16       	cp	r6, r27
    215c:	71 04       	cpc	r7, r1
    215e:	61 f4       	brne	.+24     	; 0x2178 <main+0x1c54>
    2160:	c2 01       	movw	r24, r4
    2162:	82 19       	sub	r24, r2
    2164:	93 09       	sbc	r25, r3
    2166:	85 36       	cpi	r24, 0x65	; 101
    2168:	91 05       	cpc	r25, r1
    216a:	0c f4       	brge	.+2      	; 0x216e <main+0x1c4a>
    216c:	50 c0       	rjmp	.+160    	; 0x220e <main+0x1cea>
    216e:	12 01       	movw	r2, r4
    2170:	07 c0       	rjmp	.+14     	; 0x2180 <main+0x1c5c>
    2172:	92 e0       	ldi	r25, 0x02	; 2
    2174:	69 2e       	mov	r6, r25
    2176:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    2178:	28 e0       	ldi	r18, 0x08	; 8
    217a:	62 16       	cp	r6, r18
    217c:	71 04       	cpc	r7, r1
    217e:	61 f4       	brne	.+24     	; 0x2198 <main+0x1c74>
    2180:	c2 01       	movw	r24, r4
    2182:	82 19       	sub	r24, r2
    2184:	93 09       	sbc	r25, r3
    2186:	85 36       	cpi	r24, 0x65	; 101
    2188:	91 05       	cpc	r25, r1
    218a:	0c f4       	brge	.+2      	; 0x218e <main+0x1c6a>
    218c:	4e c0       	rjmp	.+156    	; 0x222a <main+0x1d06>
    218e:	12 01       	movw	r2, r4
    2190:	07 c0       	rjmp	.+14     	; 0x21a0 <main+0x1c7c>
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	68 2e       	mov	r6, r24
    2196:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2198:	39 e0       	ldi	r19, 0x09	; 9
    219a:	63 16       	cp	r6, r19
    219c:	71 04       	cpc	r7, r1
    219e:	61 f4       	brne	.+24     	; 0x21b8 <main+0x1c94>
    21a0:	c2 01       	movw	r24, r4
    21a2:	82 19       	sub	r24, r2
    21a4:	93 09       	sbc	r25, r3
    21a6:	81 5d       	subi	r24, 0xD1	; 209
    21a8:	97 40       	sbci	r25, 0x07	; 7
    21aa:	0c f4       	brge	.+2      	; 0x21ae <main+0x1c8a>
    21ac:	4e c0       	rjmp	.+156    	; 0x224a <main+0x1d26>
    21ae:	12 01       	movw	r2, r4
    21b0:	07 c0       	rjmp	.+14     	; 0x21c0 <main+0x1c9c>
    21b2:	04 e0       	ldi	r16, 0x04	; 4
    21b4:	60 2e       	mov	r6, r16
    21b6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    21b8:	5a e0       	ldi	r21, 0x0A	; 10
    21ba:	65 16       	cp	r6, r21
    21bc:	71 04       	cpc	r7, r1
    21be:	51 f4       	brne	.+20     	; 0x21d4 <main+0x1cb0>
    21c0:	c2 01       	movw	r24, r4
    21c2:	82 19       	sub	r24, r2
    21c4:	93 09       	sbc	r25, r3
    21c6:	85 36       	cpi	r24, 0x65	; 101
    21c8:	91 05       	cpc	r25, r1
    21ca:	44 f4       	brge	.+16     	; 0x21dc <main+0x1cb8>
    21cc:	4e c0       	rjmp	.+156    	; 0x226a <main+0x1d46>
    21ce:	15 e0       	ldi	r17, 0x05	; 5
    21d0:	61 2e       	mov	r6, r17
    21d2:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    21d4:	8b e0       	ldi	r24, 0x0B	; 11
    21d6:	68 16       	cp	r6, r24
    21d8:	71 04       	cpc	r7, r1
    21da:	61 f4       	brne	.+24     	; 0x21f4 <main+0x1cd0>
    21dc:	c2 01       	movw	r24, r4
    21de:	82 19       	sub	r24, r2
    21e0:	93 09       	sbc	r25, r3
    21e2:	81 5d       	subi	r24, 0xD1	; 209
    21e4:	97 40       	sbci	r25, 0x07	; 7
    21e6:	0c f4       	brge	.+2      	; 0x21ea <main+0x1cc6>
    21e8:	50 c0       	rjmp	.+160    	; 0x228a <main+0x1d66>
    21ea:	12 01       	movw	r2, r4
    21ec:	07 c0       	rjmp	.+14     	; 0x21fc <main+0x1cd8>
    21ee:	b6 e0       	ldi	r27, 0x06	; 6
    21f0:	6b 2e       	mov	r6, r27
    21f2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    21f4:	bc e0       	ldi	r27, 0x0C	; 12
    21f6:	6b 16       	cp	r6, r27
    21f8:	71 04       	cpc	r7, r1
    21fa:	61 f4       	brne	.+24     	; 0x2214 <main+0x1cf0>
    21fc:	c2 01       	movw	r24, r4
    21fe:	82 19       	sub	r24, r2
    2200:	93 09       	sbc	r25, r3
    2202:	85 36       	cpi	r24, 0x65	; 101
    2204:	91 05       	cpc	r25, r1
    2206:	0c f4       	brge	.+2      	; 0x220a <main+0x1ce6>
    2208:	50 c0       	rjmp	.+160    	; 0x22aa <main+0x1d86>
    220a:	12 01       	movw	r2, r4
    220c:	07 c0       	rjmp	.+14     	; 0x221c <main+0x1cf8>
    220e:	a7 e0       	ldi	r26, 0x07	; 7
    2210:	6a 2e       	mov	r6, r26
    2212:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2214:	2d e0       	ldi	r18, 0x0D	; 13
    2216:	62 16       	cp	r6, r18
    2218:	71 04       	cpc	r7, r1
    221a:	51 f4       	brne	.+20     	; 0x2230 <main+0x1d0c>
    221c:	c2 01       	movw	r24, r4
    221e:	82 19       	sub	r24, r2
    2220:	93 09       	sbc	r25, r3
    2222:	81 5d       	subi	r24, 0xD1	; 209
    2224:	97 40       	sbci	r25, 0x07	; 7
    2226:	44 f4       	brge	.+16     	; 0x2238 <main+0x1d14>
    2228:	50 c0       	rjmp	.+160    	; 0x22ca <main+0x1da6>
    222a:	f8 e0       	ldi	r31, 0x08	; 8
    222c:	6f 2e       	mov	r6, r31
    222e:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
				}
				if(state == B1STOP2 && counter - counterRef > totalStepLength2*fixtureMotorBrush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    2230:	4e e0       	ldi	r20, 0x0E	; 14
    2232:	64 16       	cp	r6, r20
    2234:	71 04       	cpc	r7, r1
    2236:	61 f4       	brne	.+24     	; 0x2250 <main+0x1d2c>
    2238:	c2 01       	movw	r24, r4
    223a:	82 19       	sub	r24, r2
    223c:	93 09       	sbc	r25, r3
    223e:	81 5a       	subi	r24, 0xA1	; 161
    2240:	9f 40       	sbci	r25, 0x0F	; 15
    2242:	0c f4       	brge	.+2      	; 0x2246 <main+0x1d22>
    2244:	52 c0       	rjmp	.+164    	; 0x22ea <main+0x1dc6>
    2246:	12 01       	movw	r2, r4
    2248:	07 c0       	rjmp	.+14     	; 0x2258 <main+0x1d34>
    224a:	e9 e0       	ldi	r30, 0x09	; 9
    224c:	6e 2e       	mov	r6, r30
    224e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    2250:	8f e0       	ldi	r24, 0x0F	; 15
    2252:	68 16       	cp	r6, r24
    2254:	71 04       	cpc	r7, r1
    2256:	61 f4       	brne	.+24     	; 0x2270 <main+0x1d4c>
    2258:	c2 01       	movw	r24, r4
    225a:	82 19       	sub	r24, r2
    225c:	93 09       	sbc	r25, r3
    225e:	85 36       	cpi	r24, 0x65	; 101
    2260:	91 05       	cpc	r25, r1
    2262:	0c f4       	brge	.+2      	; 0x2266 <main+0x1d42>
    2264:	52 c0       	rjmp	.+164    	; 0x230a <main+0x1de6>
    2266:	12 01       	movw	r2, r4
    2268:	07 c0       	rjmp	.+14     	; 0x2278 <main+0x1d54>
    226a:	7a e0       	ldi	r23, 0x0A	; 10
    226c:	67 2e       	mov	r6, r23
    226e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    2270:	90 e1       	ldi	r25, 0x10	; 16
    2272:	69 16       	cp	r6, r25
    2274:	71 04       	cpc	r7, r1
    2276:	61 f4       	brne	.+24     	; 0x2290 <main+0x1d6c>
    2278:	c2 01       	movw	r24, r4
    227a:	82 19       	sub	r24, r2
    227c:	93 09       	sbc	r25, r3
    227e:	85 36       	cpi	r24, 0x65	; 101
    2280:	91 05       	cpc	r25, r1
    2282:	0c f4       	brge	.+2      	; 0x2286 <main+0x1d62>
    2284:	52 c0       	rjmp	.+164    	; 0x232a <main+0x1e06>
    2286:	12 01       	movw	r2, r4
    2288:	07 c0       	rjmp	.+14     	; 0x2298 <main+0x1d74>
    228a:	6b e0       	ldi	r22, 0x0B	; 11
    228c:	66 2e       	mov	r6, r22
    228e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2290:	a1 e1       	ldi	r26, 0x11	; 17
    2292:	6a 16       	cp	r6, r26
    2294:	71 04       	cpc	r7, r1
    2296:	61 f4       	brne	.+24     	; 0x22b0 <main+0x1d8c>
    2298:	c2 01       	movw	r24, r4
    229a:	82 19       	sub	r24, r2
    229c:	93 09       	sbc	r25, r3
    229e:	81 5d       	subi	r24, 0xD1	; 209
    22a0:	97 40       	sbci	r25, 0x07	; 7
    22a2:	0c f4       	brge	.+2      	; 0x22a6 <main+0x1d82>
    22a4:	52 c0       	rjmp	.+164    	; 0x234a <main+0x1e26>
    22a6:	12 01       	movw	r2, r4
    22a8:	07 c0       	rjmp	.+14     	; 0x22b8 <main+0x1d94>
    22aa:	5c e0       	ldi	r21, 0x0C	; 12
    22ac:	65 2e       	mov	r6, r21
    22ae:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    22b0:	22 e1       	ldi	r18, 0x12	; 18
    22b2:	62 16       	cp	r6, r18
    22b4:	71 04       	cpc	r7, r1
    22b6:	61 f4       	brne	.+24     	; 0x22d0 <main+0x1dac>
    22b8:	c2 01       	movw	r24, r4
    22ba:	82 19       	sub	r24, r2
    22bc:	93 09       	sbc	r25, r3
    22be:	85 36       	cpi	r24, 0x65	; 101
    22c0:	91 05       	cpc	r25, r1
    22c2:	0c f4       	brge	.+2      	; 0x22c6 <main+0x1da2>
    22c4:	52 c0       	rjmp	.+164    	; 0x236a <main+0x1e46>
    22c6:	12 01       	movw	r2, r4
    22c8:	07 c0       	rjmp	.+14     	; 0x22d8 <main+0x1db4>
    22ca:	4d e0       	ldi	r20, 0x0D	; 13
    22cc:	64 2e       	mov	r6, r20
    22ce:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    22d0:	33 e1       	ldi	r19, 0x13	; 19
    22d2:	63 16       	cp	r6, r19
    22d4:	71 04       	cpc	r7, r1
    22d6:	61 f4       	brne	.+24     	; 0x22f0 <main+0x1dcc>
    22d8:	c2 01       	movw	r24, r4
    22da:	82 19       	sub	r24, r2
    22dc:	93 09       	sbc	r25, r3
    22de:	81 5d       	subi	r24, 0xD1	; 209
    22e0:	97 40       	sbci	r25, 0x07	; 7
    22e2:	0c f4       	brge	.+2      	; 0x22e6 <main+0x1dc2>
    22e4:	52 c0       	rjmp	.+164    	; 0x238a <main+0x1e66>
    22e6:	12 01       	movw	r2, r4
    22e8:	07 c0       	rjmp	.+14     	; 0x22f8 <main+0x1dd4>
    22ea:	3e e0       	ldi	r19, 0x0E	; 14
    22ec:	63 2e       	mov	r6, r19
    22ee:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    22f0:	54 e1       	ldi	r21, 0x14	; 20
    22f2:	65 16       	cp	r6, r21
    22f4:	71 04       	cpc	r7, r1
    22f6:	61 f4       	brne	.+24     	; 0x2310 <main+0x1dec>
    22f8:	c2 01       	movw	r24, r4
    22fa:	82 19       	sub	r24, r2
    22fc:	93 09       	sbc	r25, r3
    22fe:	85 36       	cpi	r24, 0x65	; 101
    2300:	91 05       	cpc	r25, r1
    2302:	0c f4       	brge	.+2      	; 0x2306 <main+0x1de2>
    2304:	50 c0       	rjmp	.+160    	; 0x23a6 <main+0x1e82>
    2306:	12 01       	movw	r2, r4
    2308:	07 c0       	rjmp	.+14     	; 0x2318 <main+0x1df4>
    230a:	2f e0       	ldi	r18, 0x0F	; 15
    230c:	62 2e       	mov	r6, r18
    230e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2310:	85 e1       	ldi	r24, 0x15	; 21
    2312:	68 16       	cp	r6, r24
    2314:	71 04       	cpc	r7, r1
    2316:	61 f4       	brne	.+24     	; 0x2330 <main+0x1e0c>
    2318:	c2 01       	movw	r24, r4
    231a:	82 19       	sub	r24, r2
    231c:	93 09       	sbc	r25, r3
    231e:	81 5d       	subi	r24, 0xD1	; 209
    2320:	97 40       	sbci	r25, 0x07	; 7
    2322:	0c f4       	brge	.+2      	; 0x2326 <main+0x1e02>
    2324:	51 c0       	rjmp	.+162    	; 0x23c8 <main+0x1ea4>
    2326:	12 01       	movw	r2, r4
    2328:	07 c0       	rjmp	.+14     	; 0x2338 <main+0x1e14>
    232a:	90 e1       	ldi	r25, 0x10	; 16
    232c:	69 2e       	mov	r6, r25
    232e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    2330:	b6 e1       	ldi	r27, 0x16	; 22
    2332:	6b 16       	cp	r6, r27
    2334:	71 04       	cpc	r7, r1
    2336:	61 f4       	brne	.+24     	; 0x2350 <main+0x1e2c>
    2338:	c2 01       	movw	r24, r4
    233a:	82 19       	sub	r24, r2
    233c:	93 09       	sbc	r25, r3
    233e:	85 36       	cpi	r24, 0x65	; 101
    2340:	91 05       	cpc	r25, r1
    2342:	0c f4       	brge	.+2      	; 0x2346 <main+0x1e22>
    2344:	53 c0       	rjmp	.+166    	; 0x23ec <main+0x1ec8>
    2346:	12 01       	movw	r2, r4
    2348:	07 c0       	rjmp	.+14     	; 0x2358 <main+0x1e34>
    234a:	81 e1       	ldi	r24, 0x11	; 17
    234c:	68 2e       	mov	r6, r24
    234e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    2350:	27 e1       	ldi	r18, 0x17	; 23
    2352:	62 16       	cp	r6, r18
    2354:	71 04       	cpc	r7, r1
    2356:	61 f4       	brne	.+24     	; 0x2370 <main+0x1e4c>
    2358:	c2 01       	movw	r24, r4
    235a:	82 19       	sub	r24, r2
    235c:	93 09       	sbc	r25, r3
    235e:	81 5a       	subi	r24, 0xA1	; 161
    2360:	9f 40       	sbci	r25, 0x0F	; 15
    2362:	0c f4       	brge	.+2      	; 0x2366 <main+0x1e42>
    2364:	53 c0       	rjmp	.+166    	; 0x240c <main+0x1ee8>
    2366:	12 01       	movw	r2, r4
    2368:	07 c0       	rjmp	.+14     	; 0x2378 <main+0x1e54>
    236a:	02 e1       	ldi	r16, 0x12	; 18
    236c:	60 2e       	mov	r6, r16
    236e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    2370:	48 e1       	ldi	r20, 0x18	; 24
    2372:	64 16       	cp	r6, r20
    2374:	71 04       	cpc	r7, r1
    2376:	61 f4       	brne	.+24     	; 0x2390 <main+0x1e6c>
    2378:	c2 01       	movw	r24, r4
    237a:	82 19       	sub	r24, r2
    237c:	93 09       	sbc	r25, r3
    237e:	85 36       	cpi	r24, 0x65	; 101
    2380:	91 05       	cpc	r25, r1
    2382:	0c f4       	brge	.+2      	; 0x2386 <main+0x1e62>
    2384:	51 c0       	rjmp	.+162    	; 0x2428 <main+0x1f04>
    2386:	12 01       	movw	r2, r4
    2388:	07 c0       	rjmp	.+14     	; 0x2398 <main+0x1e74>
    238a:	13 e1       	ldi	r17, 0x13	; 19
    238c:	61 2e       	mov	r6, r17
    238e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2390:	59 e1       	ldi	r21, 0x19	; 25
    2392:	65 16       	cp	r6, r21
    2394:	71 04       	cpc	r7, r1
    2396:	51 f4       	brne	.+20     	; 0x23ac <main+0x1e88>
    2398:	c2 01       	movw	r24, r4
    239a:	82 19       	sub	r24, r2
    239c:	93 09       	sbc	r25, r3
    239e:	81 5a       	subi	r24, 0xA1	; 161
    23a0:	9f 40       	sbci	r25, 0x0F	; 15
    23a2:	44 f4       	brge	.+16     	; 0x23b4 <main+0x1e90>
    23a4:	4e c0       	rjmp	.+156    	; 0x2442 <main+0x1f1e>
    23a6:	b4 e1       	ldi	r27, 0x14	; 20
    23a8:	6b 2e       	mov	r6, r27
    23aa:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    23ac:	ba e1       	ldi	r27, 0x1A	; 26
    23ae:	6b 16       	cp	r6, r27
    23b0:	71 04       	cpc	r7, r1
    23b2:	69 f4       	brne	.+26     	; 0x23ce <main+0x1eaa>
    23b4:	c2 01       	movw	r24, r4
    23b6:	82 19       	sub	r24, r2
    23b8:	93 09       	sbc	r25, r3
    23ba:	81 5a       	subi	r24, 0xA1	; 161
    23bc:	9f 40       	sbci	r25, 0x0F	; 15
    23be:	0c f4       	brge	.+2      	; 0x23c2 <main+0x1e9e>
    23c0:	50 c0       	rjmp	.+160    	; 0x2462 <main+0x1f3e>
    23c2:	5a a2       	std	Y+34, r5	; 0x22
    23c4:	49 a2       	std	Y+33, r4	; 0x21
    23c6:	07 c0       	rjmp	.+14     	; 0x23d6 <main+0x1eb2>
    23c8:	a5 e1       	ldi	r26, 0x15	; 21
    23ca:	6a 2e       	mov	r6, r26
    23cc:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    23ce:	3b e1       	ldi	r19, 0x1B	; 27
    23d0:	63 16       	cp	r6, r19
    23d2:	71 04       	cpc	r7, r1
    23d4:	71 f4       	brne	.+28     	; 0x23f2 <main+0x1ece>
    23d6:	c2 01       	movw	r24, r4
    23d8:	49 a1       	ldd	r20, Y+33	; 0x21
    23da:	5a a1       	ldd	r21, Y+34	; 0x22
    23dc:	84 1b       	sub	r24, r20
    23de:	95 0b       	sbc	r25, r21
    23e0:	85 36       	cpi	r24, 0x65	; 101
    23e2:	91 05       	cpc	r25, r1
    23e4:	0c f4       	brge	.+2      	; 0x23e8 <main+0x1ec4>
    23e6:	4a c0       	rjmp	.+148    	; 0x247c <main+0x1f58>
    23e8:	12 01       	movw	r2, r4
    23ea:	07 c0       	rjmp	.+14     	; 0x23fa <main+0x1ed6>
    23ec:	f6 e1       	ldi	r31, 0x16	; 22
    23ee:	6f 2e       	mov	r6, r31
    23f0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    23f2:	5c e1       	ldi	r21, 0x1C	; 28
    23f4:	65 16       	cp	r6, r21
    23f6:	71 04       	cpc	r7, r1
    23f8:	61 f4       	brne	.+24     	; 0x2412 <main+0x1eee>
    23fa:	c2 01       	movw	r24, r4
    23fc:	82 19       	sub	r24, r2
    23fe:	93 09       	sbc	r25, r3
    2400:	85 36       	cpi	r24, 0x65	; 101
    2402:	91 05       	cpc	r25, r1
    2404:	0c f4       	brge	.+2      	; 0x2408 <main+0x1ee4>
    2406:	4a c0       	rjmp	.+148    	; 0x249c <main+0x1f78>
    2408:	12 01       	movw	r2, r4
    240a:	07 c0       	rjmp	.+14     	; 0x241a <main+0x1ef6>
    240c:	e7 e1       	ldi	r30, 0x17	; 23
    240e:	6e 2e       	mov	r6, r30
    2410:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2412:	8d e1       	ldi	r24, 0x1D	; 29
    2414:	68 16       	cp	r6, r24
    2416:	71 04       	cpc	r7, r1
    2418:	51 f4       	brne	.+20     	; 0x242e <main+0x1f0a>
    241a:	c2 01       	movw	r24, r4
    241c:	82 19       	sub	r24, r2
    241e:	93 09       	sbc	r25, r3
    2420:	81 5a       	subi	r24, 0xA1	; 161
    2422:	9f 40       	sbci	r25, 0x0F	; 15
    2424:	44 f4       	brge	.+16     	; 0x2436 <main+0x1f12>
    2426:	4a c0       	rjmp	.+148    	; 0x24bc <main+0x1f98>
    2428:	78 e1       	ldi	r23, 0x18	; 24
    242a:	67 2e       	mov	r6, r23
    242c:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && /*counter - counterRef > totalStepLength2*fixtureMotorLoadBack &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    242e:	be e1       	ldi	r27, 0x1E	; 30
    2430:	6b 16       	cp	r6, r27
    2432:	71 04       	cpc	r7, r1
    2434:	49 f4       	brne	.+18     	; 0x2448 <main+0x1f24>
    2436:	80 91 a2 03 	lds	r24, 0x03A2
    243a:	83 fd       	sbrc	r24, 3
    243c:	50 c0       	rjmp	.+160    	; 0x24de <main+0x1fba>
    243e:	12 01       	movw	r2, r4
    2440:	07 c0       	rjmp	.+14     	; 0x2450 <main+0x1f2c>
    2442:	69 e1       	ldi	r22, 0x19	; 25
    2444:	66 2e       	mov	r6, r22
    2446:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    2448:	2f e1       	ldi	r18, 0x1F	; 31
    244a:	62 16       	cp	r6, r18
    244c:	71 04       	cpc	r7, r1
    244e:	61 f4       	brne	.+24     	; 0x2468 <main+0x1f44>
    2450:	c2 01       	movw	r24, r4
    2452:	82 19       	sub	r24, r2
    2454:	93 09       	sbc	r25, r3
    2456:	89 5e       	subi	r24, 0xE9	; 233
    2458:	93 40       	sbci	r25, 0x03	; 3
    245a:	0c f4       	brge	.+2      	; 0x245e <main+0x1f3a>
    245c:	a7 c1       	rjmp	.+846    	; 0x27ac <main+0x2288>
    245e:	12 01       	movw	r2, r4
    2460:	07 c0       	rjmp	.+14     	; 0x2470 <main+0x1f4c>
    2462:	5a e1       	ldi	r21, 0x1A	; 26
    2464:	65 2e       	mov	r6, r21
    2466:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureHome == 0){
    2468:	40 e2       	ldi	r20, 0x20	; 32
    246a:	64 16       	cp	r6, r20
    246c:	71 04       	cpc	r7, r1
    246e:	49 f4       	brne	.+18     	; 0x2482 <main+0x1f5e>
    2470:	80 91 a2 03 	lds	r24, 0x03A2
    2474:	82 fd       	sbrc	r24, 2
    2476:	a6 c1       	rjmp	.+844    	; 0x27c4 <main+0x22a0>
    2478:	12 01       	movw	r2, r4
    247a:	07 c0       	rjmp	.+14     	; 0x248a <main+0x1f66>
    247c:	4b e1       	ldi	r20, 0x1B	; 27
    247e:	64 2e       	mov	r6, r20
    2480:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    2482:	51 e2       	ldi	r21, 0x21	; 33
    2484:	65 16       	cp	r6, r21
    2486:	71 04       	cpc	r7, r1
    2488:	61 f4       	brne	.+24     	; 0x24a2 <main+0x1f7e>
    248a:	c2 01       	movw	r24, r4
    248c:	82 19       	sub	r24, r2
    248e:	93 09       	sbc	r25, r3
    2490:	85 36       	cpi	r24, 0x65	; 101
    2492:	91 05       	cpc	r25, r1
    2494:	0c f4       	brge	.+2      	; 0x2498 <main+0x1f74>
    2496:	a4 c1       	rjmp	.+840    	; 0x27e0 <main+0x22bc>
    2498:	12 01       	movw	r2, r4
    249a:	07 c0       	rjmp	.+14     	; 0x24aa <main+0x1f86>
    249c:	3c e1       	ldi	r19, 0x1C	; 28
    249e:	63 2e       	mov	r6, r19
    24a0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    24a2:	82 e2       	ldi	r24, 0x22	; 34
    24a4:	68 16       	cp	r6, r24
    24a6:	71 04       	cpc	r7, r1
    24a8:	61 f4       	brne	.+24     	; 0x24c2 <main+0x1f9e>
    24aa:	c2 01       	movw	r24, r4
    24ac:	82 19       	sub	r24, r2
    24ae:	93 09       	sbc	r25, r3
    24b0:	81 5a       	subi	r24, 0xA1	; 161
    24b2:	9f 40       	sbci	r25, 0x0F	; 15
    24b4:	0c f4       	brge	.+2      	; 0x24b8 <main+0x1f94>
    24b6:	a6 c1       	rjmp	.+844    	; 0x2804 <main+0x22e0>
    24b8:	12 01       	movw	r2, r4
    24ba:	07 c0       	rjmp	.+14     	; 0x24ca <main+0x1fa6>
    24bc:	2d e1       	ldi	r18, 0x1D	; 29
    24be:	62 2e       	mov	r6, r18
    24c0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    24c2:	b3 e2       	ldi	r27, 0x23	; 35
    24c4:	6b 16       	cp	r6, r27
    24c6:	71 04       	cpc	r7, r1
    24c8:	69 f4       	brne	.+26     	; 0x24e4 <main+0x1fc0>
    24ca:	c2 01       	movw	r24, r4
    24cc:	82 19       	sub	r24, r2
    24ce:	93 09       	sbc	r25, r3
    24d0:	0b 97       	sbiw	r24, 0x0b	; 11
    24d2:	0c f4       	brge	.+2      	; 0x24d6 <main+0x1fb2>
    24d4:	a4 c1       	rjmp	.+840    	; 0x281e <main+0x22fa>
    24d6:	94 e2       	ldi	r25, 0x24	; 36
    24d8:	69 2e       	mov	r6, r25
    24da:	71 2c       	mov	r7, r1
    24dc:	b7 c1       	rjmp	.+878    	; 0x284c <main+0x2328>
    24de:	8e e1       	ldi	r24, 0x1E	; 30
    24e0:	68 2e       	mov	r6, r24
    24e2:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    24e4:	f3 01       	movw	r30, r6
    24e6:	e4 32       	cpi	r30, 0x24	; 36
    24e8:	f1 05       	cpc	r31, r1
    24ea:	08 f0       	brcs	.+2      	; 0x24ee <main+0x1fca>
    24ec:	af c1       	rjmp	.+862    	; 0x284c <main+0x2328>
    24ee:	e6 54       	subi	r30, 0x46	; 70
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	ee 0f       	add	r30, r30
    24f4:	ff 1f       	adc	r31, r31
    24f6:	05 90       	lpm	r0, Z+
    24f8:	f4 91       	lpm	r31, Z+
    24fa:	e0 2d       	mov	r30, r0
    24fc:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    24fe:	80 91 a2 03 	lds	r24, 0x03A2
    2502:	90 91 9e 03 	lds	r25, 0x039E
    2506:	20 91 a0 03 	lds	r18, 0x03A0
    250a:	82 ff       	sbrs	r24, 2
    250c:	08 c0       	rjmp	.+16     	; 0x251e <main+0x1ffa>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    250e:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2510:	27 7f       	andi	r18, 0xF7	; 247
    2512:	20 93 a0 03 	sts	0x03A0, r18
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2516:	90 62       	ori	r25, 0x20	; 32
    2518:	90 93 9e 03 	sts	0x039E, r25
    251c:	97 c1       	rjmp	.+814    	; 0x284c <main+0x2328>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    251e:	9f 7d       	andi	r25, 0xDF	; 223
    2520:	90 93 9e 03 	sts	0x039E, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2524:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2526:	28 60       	ori	r18, 0x08	; 8
    2528:	20 93 a0 03 	sts	0x03A0, r18
						if(print0 == 1){
    252c:	2d a1       	ldd	r18, Y+37	; 0x25
    252e:	3e a1       	ldd	r19, Y+38	; 0x26
    2530:	21 30       	cpi	r18, 0x01	; 1
    2532:	31 05       	cpc	r19, r1
    2534:	09 f0       	breq	.+2      	; 0x2538 <main+0x2014>
    2536:	45 c0       	rjmp	.+138    	; 0x25c2 <main+0x209e>
							OrangutanLCD::gotoXY(0,1);
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	61 e0       	ldi	r22, 0x01	; 1
    253c:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    2540:	8f e4       	ldi	r24, 0x4F	; 79
    2542:	93 e0       	ldi	r25, 0x03	; 3
    2544:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
    2548:	1e a2       	std	Y+38, r1	; 0x26
    254a:	1d a2       	std	Y+37, r1	; 0x25
    254c:	3a c0       	rjmp	.+116    	; 0x25c2 <main+0x209e>
							print0 = 0;
						}
					}
					break;
				case LOAD:
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    254e:	20 91 a0 03 	lds	r18, 0x03A0
    2552:	32 2f       	mov	r19, r18
    2554:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    2556:	c2 01       	movw	r24, r4
    2558:	68 ec       	ldi	r22, 0xC8	; 200
    255a:	70 e0       	ldi	r23, 0x00	; 0
    255c:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divmodhi4>
    2560:	84 36       	cpi	r24, 0x64	; 100
    2562:	91 05       	cpc	r25, r1
    2564:	24 f4       	brge	.+8      	; 0x256e <main+0x204a>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    2566:	2c 7f       	andi	r18, 0xFC	; 252
    2568:	20 93 a0 03 	sts	0x03A0, r18
    256c:	03 c0       	rjmp	.+6      	; 0x2574 <main+0x2050>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    256e:	32 60       	ori	r19, 0x02	; 2
    2570:	30 93 a0 03 	sts	0x03A0, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    2574:	80 91 9e 03 	lds	r24, 0x039E
    2578:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    257a:	84 60       	ori	r24, 0x04	; 4
    257c:	80 93 9e 03 	sts	0x039E, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    2580:	80 91 a0 03 	lds	r24, 0x03A0
    2584:	8b 7f       	andi	r24, 0xFB	; 251
    2586:	80 93 a0 03 	sts	0x03A0, r24
    258a:	41 e0       	ldi	r20, 0x01	; 1
    258c:	50 e0       	ldi	r21, 0x00	; 0
    258e:	5c 8b       	std	Y+20, r21	; 0x14
    2590:	4b 8b       	std	Y+19, r20	; 0x13
    2592:	5c c1       	rjmp	.+696    	; 0x284c <main+0x2328>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2594:	80 91 a0 03 	lds	r24, 0x03A0
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2598:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    259a:	86 61       	ori	r24, 0x16	; 22
    259c:	80 93 a0 03 	sts	0x03A0, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    25a0:	80 91 9e 03 	lds	r24, 0x039E
    25a4:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    25a6:	8b 7f       	andi	r24, 0xFB	; 251
    25a8:	80 93 9e 03 	sts	0x039E, r24
    25ac:	4d c1       	rjmp	.+666    	; 0x2848 <main+0x2324>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    25ae:	80 91 9e 03 	lds	r24, 0x039E
    25b2:	8f 7d       	andi	r24, 0xDF	; 223
    25b4:	80 93 9e 03 	sts	0x039E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    25b8:	80 91 a0 03 	lds	r24, 0x03A0
    25bc:	88 60       	ori	r24, 0x08	; 8
    25be:	80 93 a0 03 	sts	0x03A0, r24
    25c2:	1c 8e       	std	Y+28, r1	; 0x1c
    25c4:	1b 8e       	std	Y+27, r1	; 0x1b
    25c6:	42 c1       	rjmp	.+644    	; 0x284c <main+0x2328>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    25c8:	80 91 a0 03 	lds	r24, 0x03A0
    25cc:	8f 7e       	andi	r24, 0xEF	; 239
    25ce:	80 93 a0 03 	sts	0x03A0, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    25d2:	80 91 9e 03 	lds	r24, 0x039E
    25d6:	80 62       	ori	r24, 0x20	; 32
    25d8:	80 93 9e 03 	sts	0x039E, r24
    25dc:	37 c1       	rjmp	.+622    	; 0x284c <main+0x2328>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    25de:	80 91 9e 03 	lds	r24, 0x039E
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    25e2:	80 63       	ori	r24, 0x30	; 48
    25e4:	81 c0       	rjmp	.+258    	; 0x26e8 <main+0x21c4>
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    25e6:	80 91 9f 03 	lds	r24, 0x039F
    25ea:	81 60       	ori	r24, 0x01	; 1
    25ec:	80 93 9f 03 	sts	0x039F, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    25f0:	80 91 9e 03 	lds	r24, 0x039E
    25f4:	8f 77       	andi	r24, 0x7F	; 127
    25f6:	80 93 9e 03 	sts	0x039E, r24
    25fa:	e3 cf       	rjmp	.-58     	; 0x25c2 <main+0x209e>
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    25fc:	80 91 a0 03 	lds	r24, 0x03A0
    2600:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2602:	8f 7d       	andi	r24, 0xDF	; 223
    2604:	80 93 a0 03 	sts	0x03A0, r24
    2608:	21 e0       	ldi	r18, 0x01	; 1
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	3e 83       	std	Y+6, r19	; 0x06
    260e:	2d 83       	std	Y+5, r18	; 0x05
    2610:	1d c1       	rjmp	.+570    	; 0x284c <main+0x2328>
					break;
				case CLEAN1_1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2612:	80 91 9e 03 	lds	r24, 0x039E
    2616:	80 62       	ori	r24, 0x20	; 32
    2618:	80 93 9e 03 	sts	0x039E, r24
					OrangutanLCD::gotoXY(0,1);
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	61 e0       	ldi	r22, 0x01	; 1
    2620:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("SET MOTOR HIGH");
    2624:	82 e8       	ldi	r24, 0x82	; 130
    2626:	93 e0       	ldi	r25, 0x03	; 3
    2628:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    262c:	80 91 9e 03 	lds	r24, 0x039E
    2630:	8f 7e       	andi	r24, 0xEF	; 239
    2632:	78 c0       	rjmp	.+240    	; 0x2724 <main+0x2200>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2634:	80 91 9e 03 	lds	r24, 0x039E
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2638:	80 63       	ori	r24, 0x30	; 48
    263a:	40 c0       	rjmp	.+128    	; 0x26bc <main+0x2198>
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    263c:	80 91 9e 03 	lds	r24, 0x039E
    2640:	8f 77       	andi	r24, 0x7F	; 127
    2642:	80 93 9e 03 	sts	0x039E, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2646:	80 91 a0 03 	lds	r24, 0x03A0
    264a:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    264c:	8f 7d       	andi	r24, 0xDF	; 223
    264e:	80 93 a0 03 	sts	0x03A0, r24
    2652:	1c 8e       	std	Y+28, r1	; 0x1c
    2654:	1b 8e       	std	Y+27, r1	; 0x1b
    2656:	a1 e0       	ldi	r26, 0x01	; 1
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	be 83       	std	Y+6, r27	; 0x06
    265c:	ad 83       	std	Y+5, r26	; 0x05
    265e:	f6 c0       	rjmp	.+492    	; 0x284c <main+0x2328>
					break;
				case CLEAN1_3:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2660:	80 91 9e 03 	lds	r24, 0x039E
    2664:	80 62       	ori	r24, 0x20	; 32
    2666:	80 93 9e 03 	sts	0x039E, r24
    266a:	21 e0       	ldi	r18, 0x01	; 1
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	3c 8f       	std	Y+28, r19	; 0x1c
    2670:	2b 8f       	std	Y+27, r18	; 0x1b
    2672:	ec c0       	rjmp	.+472    	; 0x284c <main+0x2328>
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2674:	80 91 a0 03 	lds	r24, 0x03A0
    2678:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    267a:	80 62       	ori	r24, 0x20	; 32
    267c:	80 93 a0 03 	sts	0x03A0, r24
    2680:	1c 8e       	std	Y+28, r1	; 0x1c
    2682:	1b 8e       	std	Y+27, r1	; 0x1b
    2684:	1e 82       	std	Y+6, r1	; 0x06
    2686:	1d 82       	std	Y+5, r1	; 0x05
    2688:	e1 c0       	rjmp	.+450    	; 0x284c <main+0x2328>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    268a:	80 91 9f 03 	lds	r24, 0x039F
    268e:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2690:	8b 7f       	andi	r24, 0xFB	; 251
    2692:	80 93 9f 03 	sts	0x039F, r24
    2696:	95 cf       	rjmp	.-214    	; 0x25c2 <main+0x209e>
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2698:	80 91 a1 03 	lds	r24, 0x03A1
    269c:	81 60       	ori	r24, 0x01	; 1
    269e:	80 93 a1 03 	sts	0x03A1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    26a2:	80 91 a0 03 	lds	r24, 0x03A0
    26a6:	8f 77       	andi	r24, 0x7F	; 127
    26a8:	80 93 a0 03 	sts	0x03A0, r24
    26ac:	41 e0       	ldi	r20, 0x01	; 1
    26ae:	50 e0       	ldi	r21, 0x00	; 0
    26b0:	5e ab       	std	Y+54, r21	; 0x36
    26b2:	4d ab       	std	Y+53, r20	; 0x35
    26b4:	cb c0       	rjmp	.+406    	; 0x284c <main+0x2328>
					break;
				case CLEAN2_1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    26b6:	80 91 9e 03 	lds	r24, 0x039E
    26ba:	80 62       	ori	r24, 0x20	; 32
    26bc:	80 93 9e 03 	sts	0x039E, r24
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	9c 8f       	std	Y+28, r25	; 0x1c
    26c6:	8b 8f       	std	Y+27, r24	; 0x1b
    26c8:	c1 c0       	rjmp	.+386    	; 0x284c <main+0x2328>
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    26ca:	80 91 a1 03 	lds	r24, 0x03A1
    26ce:	8e 7f       	andi	r24, 0xFE	; 254
    26d0:	80 93 a1 03 	sts	0x03A1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    26d4:	80 91 a0 03 	lds	r24, 0x03A0
    26d8:	80 68       	ori	r24, 0x80	; 128
    26da:	80 93 a0 03 	sts	0x03A0, r24
    26de:	38 c0       	rjmp	.+112    	; 0x2750 <main+0x222c>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    26e0:	80 91 9e 03 	lds	r24, 0x039E
    26e4:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    26e6:	80 62       	ori	r24, 0x20	; 32
    26e8:	80 93 9e 03 	sts	0x039E, r24
    26ec:	a1 e0       	ldi	r26, 0x01	; 1
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	bc 8f       	std	Y+28, r27	; 0x1c
    26f2:	ab 8f       	std	Y+27, r26	; 0x1b
    26f4:	ab c0       	rjmp	.+342    	; 0x284c <main+0x2328>
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    26f6:	80 91 9f 03 	lds	r24, 0x039F
    26fa:	8b 7f       	andi	r24, 0xFB	; 251
    26fc:	80 93 9f 03 	sts	0x039F, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2700:	80 91 a1 03 	lds	r24, 0x03A1
    2704:	81 60       	ori	r24, 0x01	; 1
    2706:	80 93 a1 03 	sts	0x03A1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    270a:	80 91 a0 03 	lds	r24, 0x03A0
    270e:	8f 77       	andi	r24, 0x7F	; 127
    2710:	80 93 a0 03 	sts	0x03A0, r24
    2714:	21 e0       	ldi	r18, 0x01	; 1
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	3e ab       	std	Y+54, r19	; 0x36
    271a:	2d ab       	std	Y+53, r18	; 0x35
    271c:	52 cf       	rjmp	.-348    	; 0x25c2 <main+0x209e>
					break;
				case CLEAN2_3:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    271e:	80 91 9e 03 	lds	r24, 0x039E
    2722:	80 62       	ori	r24, 0x20	; 32
    2724:	80 93 9e 03 	sts	0x039E, r24
    2728:	41 e0       	ldi	r20, 0x01	; 1
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	5c 8f       	std	Y+28, r21	; 0x1c
    272e:	4b 8f       	std	Y+27, r20	; 0x1b
    2730:	8d c0       	rjmp	.+282    	; 0x284c <main+0x2328>
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2732:	80 91 a1 03 	lds	r24, 0x03A1
    2736:	8e 7f       	andi	r24, 0xFE	; 254
    2738:	80 93 a1 03 	sts	0x03A1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    273c:	80 91 a0 03 	lds	r24, 0x03A0
    2740:	80 68       	ori	r24, 0x80	; 128
    2742:	80 93 a0 03 	sts	0x03A0, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    2746:	80 91 9f 03 	lds	r24, 0x039F
    274a:	87 7f       	andi	r24, 0xF7	; 247
    274c:	80 93 9f 03 	sts	0x039F, r24
    2750:	1e aa       	std	Y+54, r1	; 0x36
    2752:	1d aa       	std	Y+53, r1	; 0x35
    2754:	36 cf       	rjmp	.-404    	; 0x25c2 <main+0x209e>
				case MOVED1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2756:	80 91 a1 03 	lds	r24, 0x03A1
    275a:	87 7f       	andi	r24, 0xF7	; 247
    275c:	80 93 a1 03 	sts	0x03A1, r24
    2760:	30 cf       	rjmp	.-416    	; 0x25c2 <main+0x209e>
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    2762:	80 91 a1 03 	lds	r24, 0x03A1
    2766:	88 60       	ori	r24, 0x08	; 8
    2768:	10 c0       	rjmp	.+32     	; 0x278a <main+0x2266>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    276a:	80 91 9f 03 	lds	r24, 0x039F
    276e:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    2770:	8f 7d       	andi	r24, 0xDF	; 223
    2772:	80 93 9f 03 	sts	0x039F, r24
    2776:	1c 8e       	std	Y+28, r1	; 0x1c
    2778:	1b 8e       	std	Y+27, r1	; 0x1b
    277a:	21 e0       	ldi	r18, 0x01	; 1
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	3c 87       	std	Y+12, r19	; 0x0c
    2780:	2b 87       	std	Y+11, r18	; 0x0b
    2782:	64 c0       	rjmp	.+200    	; 0x284c <main+0x2328>
					paperTowelMotor = 1;
					break;
				case D2RAISE:
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    2784:	80 91 a1 03 	lds	r24, 0x03A1
    2788:	8d 7f       	andi	r24, 0xFD	; 253
    278a:	80 93 a1 03 	sts	0x03A1, r24
    278e:	5e c0       	rjmp	.+188    	; 0x284c <main+0x2328>
				case DRY2:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    2790:	80 91 9f 03 	lds	r24, 0x039F
    2794:	8f 7b       	andi	r24, 0xBF	; 191
    2796:	80 93 9f 03 	sts	0x039F, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    279a:	80 91 a1 03 	lds	r24, 0x03A1
    279e:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    27a0:	8b 7f       	andi	r24, 0xFB	; 251
    27a2:	80 93 a1 03 	sts	0x03A1, r24
    27a6:	1c 86       	std	Y+12, r1	; 0x0c
    27a8:	1b 86       	std	Y+11, r1	; 0x0b
    27aa:	50 c0       	rjmp	.+160    	; 0x284c <main+0x2328>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    27ac:	80 91 a0 03 	lds	r24, 0x03A0
    27b0:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    27b2:	80 61       	ori	r24, 0x10	; 16
    27b4:	80 93 a0 03 	sts	0x03A0, r24
    27b8:	1c 8e       	std	Y+28, r1	; 0x1c
    27ba:	1b 8e       	std	Y+27, r1	; 0x1b
    27bc:	0f e1       	ldi	r16, 0x1F	; 31
    27be:	60 2e       	mov	r6, r16
    27c0:	71 2c       	mov	r7, r1
    27c2:	44 c0       	rjmp	.+136    	; 0x284c <main+0x2328>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    27c4:	80 91 9e 03 	lds	r24, 0x039E
    27c8:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    27ca:	80 62       	ori	r24, 0x20	; 32
    27cc:	80 93 9e 03 	sts	0x039E, r24
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9c 8f       	std	Y+28, r25	; 0x1c
    27d6:	8b 8f       	std	Y+27, r24	; 0x1b
    27d8:	10 e2       	ldi	r17, 0x20	; 32
    27da:	61 2e       	mov	r6, r17
    27dc:	71 2c       	mov	r7, r1
    27de:	36 c0       	rjmp	.+108    	; 0x284c <main+0x2328>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    27e0:	80 91 9e 03 	lds	r24, 0x039E
    27e4:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    27e6:	84 60       	ori	r24, 0x04	; 4
    27e8:	80 93 9e 03 	sts	0x039E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    27ec:	80 91 a0 03 	lds	r24, 0x03A0
    27f0:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    27f2:	8f 7e       	andi	r24, 0xEF	; 239
    27f4:	80 93 a0 03 	sts	0x03A0, r24
    27f8:	1c 8e       	std	Y+28, r1	; 0x1c
    27fa:	1b 8e       	std	Y+27, r1	; 0x1b
    27fc:	b1 e2       	ldi	r27, 0x21	; 33
    27fe:	6b 2e       	mov	r6, r27
    2800:	71 2c       	mov	r7, r1
    2802:	24 c0       	rjmp	.+72     	; 0x284c <main+0x2328>
					break;
    2804:	a2 e2       	ldi	r26, 0x22	; 34
    2806:	6a 2e       	mov	r6, r26
    2808:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    280a:	80 91 9e 03 	lds	r24, 0x039E
    280e:	8d 7f       	andi	r24, 0xFD	; 253
    2810:	80 93 9e 03 	sts	0x039E, r24
    2814:	a1 e0       	ldi	r26, 0x01	; 1
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	bc 8b       	std	Y+20, r27	; 0x14
    281a:	ab 8b       	std	Y+19, r26	; 0x13
    281c:	17 c0       	rjmp	.+46     	; 0x284c <main+0x2328>
					plateLoadMotor = 1;
					break;
    281e:	f3 e2       	ldi	r31, 0x23	; 35
    2820:	6f 2e       	mov	r6, r31
    2822:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2824:	80 91 9e 03 	lds	r24, 0x039E
    2828:	8b 7f       	andi	r24, 0xFB	; 251
    282a:	80 93 9e 03 	sts	0x039E, r24
					if(print35 == 1){
    282e:	2f a5       	ldd	r18, Y+47	; 0x2f
    2830:	38 a9       	ldd	r19, Y+48	; 0x30
    2832:	21 30       	cpi	r18, 0x01	; 1
    2834:	31 05       	cpc	r19, r1
    2836:	41 f4       	brne	.+16     	; 0x2848 <main+0x2324>
						OrangutanLCD::clear();
    2838:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    283c:	8d e5       	ldi	r24, 0x5D	; 93
    283e:	93 e0       	ldi	r25, 0x03	; 3
    2840:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
    2844:	18 aa       	std	Y+48, r1	; 0x30
    2846:	1f a6       	std	Y+47, r1	; 0x2f
    2848:	1c 8a       	std	Y+20, r1	; 0x14
    284a:	1b 8a       	std	Y+19, r1	; 0x13
					}
					break;
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    284c:	4d b7       	in	r20, 0x3d	; 61
    284e:	5e b7       	in	r21, 0x3e	; 62
    2850:	42 51       	subi	r20, 0x12	; 18
    2852:	50 40       	sbci	r21, 0x00	; 0
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	5e bf       	out	0x3e, r21	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	4d bf       	out	0x3d, r20	; 61
    285e:	ed b7       	in	r30, 0x3d	; 61
    2860:	fe b7       	in	r31, 0x3e	; 62
    2862:	31 96       	adiw	r30, 0x01	; 1
    2864:	82 e0       	ldi	r24, 0x02	; 2
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	ad b7       	in	r26, 0x3d	; 61
    286a:	be b7       	in	r27, 0x3e	; 62
    286c:	12 96       	adiw	r26, 0x02	; 2
    286e:	9c 93       	st	X, r25
    2870:	8e 93       	st	-X, r24
    2872:	11 97       	sbiw	r26, 0x01	; 1
    2874:	93 83       	std	Z+3, r25	; 0x03
    2876:	82 83       	std	Z+2, r24	; 0x02
    2878:	95 83       	std	Z+5, r25	; 0x05
    287a:	84 83       	std	Z+4, r24	; 0x04
    287c:	97 83       	std	Z+7, r25	; 0x07
    287e:	86 83       	std	Z+6, r24	; 0x06
    2880:	21 e0       	ldi	r18, 0x01	; 1
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	31 87       	std	Z+9, r19	; 0x09
    2886:	20 87       	std	Z+8, r18	; 0x08
    2888:	33 87       	std	Z+11, r19	; 0x0b
    288a:	22 87       	std	Z+10, r18	; 0x0a
    288c:	35 87       	std	Z+13, r19	; 0x0d
    288e:	24 87       	std	Z+12, r18	; 0x0c
    2890:	37 87       	std	Z+15, r19	; 0x0f
    2892:	26 87       	std	Z+14, r18	; 0x0e
    2894:	31 8b       	std	Z+17, r19	; 0x11
    2896:	20 8b       	std	Z+16, r18	; 0x10
    2898:	c2 01       	movw	r24, r4
    289a:	b1 01       	movw	r22, r2
    289c:	49 a1       	ldd	r20, Y+33	; 0x21
    289e:	5a a1       	ldd	r21, Y+34	; 0x22
    28a0:	2b 89       	ldd	r18, Y+19	; 0x13
    28a2:	3c 89       	ldd	r19, Y+20	; 0x14
    28a4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    28a6:	1c 8d       	ldd	r17, Y+28	; 0x1c
    28a8:	ed 80       	ldd	r14, Y+5	; 0x05
    28aa:	fe 80       	ldd	r15, Y+6	; 0x06
    28ac:	cd a8       	ldd	r12, Y+53	; 0x35
    28ae:	de a8       	ldd	r13, Y+54	; 0x36
    28b0:	ab 84       	ldd	r10, Y+11	; 0x0b
    28b2:	bc 84       	ldd	r11, Y+12	; 0x0c
    28b4:	e2 e0       	ldi	r30, 0x02	; 2
    28b6:	8e 2e       	mov	r8, r30
    28b8:	91 2c       	mov	r9, r1
    28ba:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    28be:	4d b7       	in	r20, 0x3d	; 61
    28c0:	5e b7       	in	r21, 0x3e	; 62
    28c2:	4e 5e       	subi	r20, 0xEE	; 238
    28c4:	5f 4f       	sbci	r21, 0xFF	; 255
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	f8 94       	cli
    28ca:	5e bf       	out	0x3e, r21	; 62
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	4d bf       	out	0x3d, r20	; 61
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("BOTH B");
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    28d8:	54 e2       	ldi	r21, 0x24	; 36
    28da:	65 16       	cp	r6, r21
    28dc:	71 04       	cpc	r7, r1
    28de:	09 f4       	brne	.+2      	; 0x28e2 <main+0x23be>
    28e0:	91 c4       	rjmp	.+2338   	; 0x3204 <main+0x2ce0>
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    28e2:	08 94       	sec
    28e4:	41 1c       	adc	r4, r1
    28e6:	51 1c       	adc	r5, r1
    28e8:	b3 cb       	rjmp	.-2202   	; 0x2050 <main+0x1b2c>
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    28ea:	82 e0       	ldi	r24, 0x02	; 2
    28ec:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    28f0:	88 23       	and	r24, r24
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <main+0x23d2>
    28f4:	87 c4       	rjmp	.+2318   	; 0x3204 <main+0x2ce0>
			OrangutanLCD::gotoXY(7,0);
    28f6:	87 e0       	ldi	r24, 0x07	; 7
    28f8:	60 e0       	ldi	r22, 0x00	; 0
    28fa:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("DEBUG");
    28fe:	82 e4       	ldi	r24, 0x42	; 66
    2900:	93 e0       	ldi	r25, 0x03	; 3
    2902:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2906:	80 91 9e 03 	lds	r24, 0x039E
    290a:	80 62       	ori	r24, 0x20	; 32
    290c:	80 93 9e 03 	sts	0x039E, r24
    2910:	1c aa       	std	Y+52, r1	; 0x34
    2912:	1b aa       	std	Y+51, r1	; 0x33
    2914:	22 24       	eor	r2, r2
    2916:	33 24       	eor	r3, r3
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	9e a7       	std	Y+46, r25	; 0x2e
    291e:	8d a7       	std	Y+45, r24	; 0x2d
    2920:	44 24       	eor	r4, r4
    2922:	55 24       	eor	r5, r5
    2924:	9c a3       	std	Y+36, r25	; 0x24
    2926:	8b a3       	std	Y+35, r24	; 0x23
    2928:	66 24       	eor	r6, r6
    292a:	77 24       	eor	r7, r7
    292c:	25 96       	adiw	r28, 0x05	; 5
    292e:	1f ae       	std	Y+63, r1	; 0x3f
    2930:	1e ae       	std	Y+62, r1	; 0x3e
    2932:	25 97       	sbiw	r28, 0x05	; 5
    2934:	9a 8f       	std	Y+26, r25	; 0x1a
    2936:	89 8f       	std	Y+25, r24	; 0x19
    2938:	1c a6       	std	Y+44, r1	; 0x2c
    293a:	1b a6       	std	Y+43, r1	; 0x2b
    293c:	1a 8a       	std	Y+18, r1	; 0x12
    293e:	19 8a       	std	Y+17, r1	; 0x11
    2940:	1a 86       	std	Y+10, r1	; 0x0a
    2942:	19 86       	std	Y+9, r1	; 0x09
    2944:	1c 82       	std	Y+4, r1	; 0x04
    2946:	1b 82       	std	Y+3, r1	; 0x03
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    2948:	84 e4       	ldi	r24, 0x44	; 68
    294a:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2954:	85 e4       	ldi	r24, 0x45	; 69
    2956:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    295a:	0e 94 c7 19 	call	0x338e	; 0x338e <_Z11i2c_readAckv>
    295e:	80 93 a2 03 	sts	0x03A2, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2962:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <_Z11i2c_readNakv>
    2966:	80 93 a3 03 	sts	0x03A3, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    296a:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>
				
				if(state != INIT){
    296e:	61 14       	cp	r6, r1
    2970:	71 04       	cpc	r7, r1
    2972:	79 f0       	breq	.+30     	; 0x2992 <main+0x246e>
					OrangutanLCD::gotoXY(0,1);
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	61 e0       	ldi	r22, 0x01	; 1
    2978:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    297c:	88 e4       	ldi	r24, 0x48	; 72
    297e:	93 e0       	ldi	r25, 0x03	; 3
    2980:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
    2984:	b3 01       	movw	r22, r6
    2986:	88 27       	eor	r24, r24
    2988:	77 fd       	sbrc	r23, 7
    298a:	80 95       	com	r24
    298c:	98 2f       	mov	r25, r24
    298e:	0e 94 83 1c 	call	0x3906	; 0x3906 <_ZN12OrangutanLCD5printEl>
					OrangutanLCD::print(state);
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    2992:	c2 01       	movw	r24, r4
    2994:	be 01       	movw	r22, r28
    2996:	6f 5f       	subi	r22, 0xFF	; 255
    2998:	7f 4f       	sbci	r23, 0xFF	; 255
    299a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>
    299e:	28 2f       	mov	r18, r24

				//state transitions
	
				if(state == INIT && buttonTriggered){
    29a0:	61 14       	cp	r6, r1
    29a2:	71 04       	cpc	r7, r1
    29a4:	21 f4       	brne	.+8      	; 0x29ae <main+0x248a>
    29a6:	88 23       	and	r24, r24
    29a8:	09 f0       	breq	.+2      	; 0x29ac <main+0x2488>
    29aa:	69 c4       	rjmp	.+2258   	; 0x327e <main+0x2d5a>
    29ac:	6c c4       	rjmp	.+2264   	; 0x3286 <main+0x2d62>
					buttonTriggered = false;
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    29ae:	91 e0       	ldi	r25, 0x01	; 1
    29b0:	69 16       	cp	r6, r25
    29b2:	71 04       	cpc	r7, r1
    29b4:	59 f4       	brne	.+22     	; 0x29cc <main+0x24a8>
    29b6:	c2 01       	movw	r24, r4
    29b8:	82 19       	sub	r24, r2
    29ba:	93 09       	sbc	r25, r3
    29bc:	81 5a       	subi	r24, 0xA1	; 161
    29be:	9f 40       	sbci	r25, 0x0F	; 15
    29c0:	a4 f0       	brlt	.+40     	; 0x29ea <main+0x24c6>
    29c2:	12 01       	movw	r2, r4
    29c4:	45 e2       	ldi	r20, 0x25	; 37
    29c6:	64 2e       	mov	r6, r20
    29c8:	71 2c       	mov	r7, r1
    29ca:	0f c0       	rjmp	.+30     	; 0x29ea <main+0x24c6>
					state = WAIT;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    29cc:	b2 e0       	ldi	r27, 0x02	; 2
    29ce:	6b 16       	cp	r6, r27
    29d0:	71 04       	cpc	r7, r1
    29d2:	59 f4       	brne	.+22     	; 0x29ea <main+0x24c6>
    29d4:	c2 01       	movw	r24, r4
    29d6:	82 19       	sub	r24, r2
    29d8:	93 09       	sbc	r25, r3
    29da:	85 36       	cpi	r24, 0x65	; 101
    29dc:	91 05       	cpc	r25, r1
    29de:	94 f0       	brlt	.+36     	; 0x2a04 <main+0x24e0>
    29e0:	12 01       	movw	r2, r4
    29e2:	35 e2       	ldi	r19, 0x25	; 37
    29e4:	63 2e       	mov	r6, r19
    29e6:	71 2c       	mov	r7, r1
    29e8:	0d c0       	rjmp	.+26     	; 0x2a04 <main+0x24e0>
					state = WAIT;
					counterRef = counter;
				}
				if(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    29ea:	33 e0       	ldi	r19, 0x03	; 3
    29ec:	63 16       	cp	r6, r19
    29ee:	71 04       	cpc	r7, r1
    29f0:	49 f4       	brne	.+18     	; 0x2a04 <main+0x24e0>
    29f2:	80 91 a2 03 	lds	r24, 0x03A2
    29f6:	81 fd       	sbrc	r24, 1
    29f8:	12 c0       	rjmp	.+36     	; 0x2a1e <main+0x24fa>
    29fa:	12 01       	movw	r2, r4
    29fc:	95 e2       	ldi	r25, 0x25	; 37
    29fe:	69 2e       	mov	r6, r25
    2a00:	71 2c       	mov	r7, r1
    2a02:	0d c0       	rjmp	.+26     	; 0x2a1e <main+0x24fa>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    2a04:	44 e0       	ldi	r20, 0x04	; 4
    2a06:	64 16       	cp	r6, r20
    2a08:	71 04       	cpc	r7, r1
    2a0a:	49 f4       	brne	.+18     	; 0x2a1e <main+0x24fa>
    2a0c:	80 91 a2 03 	lds	r24, 0x03A2
    2a10:	83 fd       	sbrc	r24, 3
    2a12:	14 c0       	rjmp	.+40     	; 0x2a3c <main+0x2518>
    2a14:	12 01       	movw	r2, r4
    2a16:	85 e2       	ldi	r24, 0x25	; 37
    2a18:	68 2e       	mov	r6, r24
    2a1a:	71 2c       	mov	r7, r1
    2a1c:	0f c0       	rjmp	.+30     	; 0x2a3c <main+0x2518>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    2a1e:	55 e0       	ldi	r21, 0x05	; 5
    2a20:	65 16       	cp	r6, r21
    2a22:	71 04       	cpc	r7, r1
    2a24:	59 f4       	brne	.+22     	; 0x2a3c <main+0x2518>
    2a26:	c2 01       	movw	r24, r4
    2a28:	82 19       	sub	r24, r2
    2a2a:	93 09       	sbc	r25, r3
    2a2c:	85 36       	cpi	r24, 0x65	; 101
    2a2e:	91 05       	cpc	r25, r1
    2a30:	a4 f0       	brlt	.+40     	; 0x2a5a <main+0x2536>
    2a32:	12 01       	movw	r2, r4
    2a34:	05 e2       	ldi	r16, 0x25	; 37
    2a36:	60 2e       	mov	r6, r16
    2a38:	71 2c       	mov	r7, r1
    2a3a:	0f c0       	rjmp	.+30     	; 0x2a5a <main+0x2536>
					state = WAIT;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    2a3c:	86 e0       	ldi	r24, 0x06	; 6
    2a3e:	68 16       	cp	r6, r24
    2a40:	71 04       	cpc	r7, r1
    2a42:	59 f4       	brne	.+22     	; 0x2a5a <main+0x2536>
    2a44:	c2 01       	movw	r24, r4
    2a46:	82 19       	sub	r24, r2
    2a48:	93 09       	sbc	r25, r3
    2a4a:	81 5a       	subi	r24, 0xA1	; 161
    2a4c:	9f 40       	sbci	r25, 0x0F	; 15
    2a4e:	a4 f0       	brlt	.+40     	; 0x2a78 <main+0x2554>
    2a50:	12 01       	movw	r2, r4
    2a52:	15 e2       	ldi	r17, 0x25	; 37
    2a54:	61 2e       	mov	r6, r17
    2a56:	71 2c       	mov	r7, r1
    2a58:	0f c0       	rjmp	.+30     	; 0x2a78 <main+0x2554>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    2a5a:	b7 e0       	ldi	r27, 0x07	; 7
    2a5c:	6b 16       	cp	r6, r27
    2a5e:	71 04       	cpc	r7, r1
    2a60:	59 f4       	brne	.+22     	; 0x2a78 <main+0x2554>
    2a62:	c2 01       	movw	r24, r4
    2a64:	82 19       	sub	r24, r2
    2a66:	93 09       	sbc	r25, r3
    2a68:	85 36       	cpi	r24, 0x65	; 101
    2a6a:	91 05       	cpc	r25, r1
    2a6c:	a4 f0       	brlt	.+40     	; 0x2a96 <main+0x2572>
    2a6e:	12 01       	movw	r2, r4
    2a70:	b5 e2       	ldi	r27, 0x25	; 37
    2a72:	6b 2e       	mov	r6, r27
    2a74:	71 2c       	mov	r7, r1
    2a76:	0f c0       	rjmp	.+30     	; 0x2a96 <main+0x2572>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    2a78:	38 e0       	ldi	r19, 0x08	; 8
    2a7a:	63 16       	cp	r6, r19
    2a7c:	71 04       	cpc	r7, r1
    2a7e:	59 f4       	brne	.+22     	; 0x2a96 <main+0x2572>
    2a80:	c2 01       	movw	r24, r4
    2a82:	82 19       	sub	r24, r2
    2a84:	93 09       	sbc	r25, r3
    2a86:	85 36       	cpi	r24, 0x65	; 101
    2a88:	91 05       	cpc	r25, r1
    2a8a:	a4 f0       	brlt	.+40     	; 0x2ab4 <main+0x2590>
    2a8c:	12 01       	movw	r2, r4
    2a8e:	a5 e2       	ldi	r26, 0x25	; 37
    2a90:	6a 2e       	mov	r6, r26
    2a92:	71 2c       	mov	r7, r1
    2a94:	0f c0       	rjmp	.+30     	; 0x2ab4 <main+0x2590>
					state = WAIT;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2a96:	49 e0       	ldi	r20, 0x09	; 9
    2a98:	64 16       	cp	r6, r20
    2a9a:	71 04       	cpc	r7, r1
    2a9c:	59 f4       	brne	.+22     	; 0x2ab4 <main+0x2590>
    2a9e:	c2 01       	movw	r24, r4
    2aa0:	82 19       	sub	r24, r2
    2aa2:	93 09       	sbc	r25, r3
    2aa4:	81 5d       	subi	r24, 0xD1	; 209
    2aa6:	97 40       	sbci	r25, 0x07	; 7
    2aa8:	9c f0       	brlt	.+38     	; 0x2ad0 <main+0x25ac>
    2aaa:	12 01       	movw	r2, r4
    2aac:	f5 e2       	ldi	r31, 0x25	; 37
    2aae:	6f 2e       	mov	r6, r31
    2ab0:	71 2c       	mov	r7, r1
    2ab2:	0e c0       	rjmp	.+28     	; 0x2ad0 <main+0x25ac>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    2ab4:	8a e0       	ldi	r24, 0x0A	; 10
    2ab6:	68 16       	cp	r6, r24
    2ab8:	71 04       	cpc	r7, r1
    2aba:	51 f4       	brne	.+20     	; 0x2ad0 <main+0x25ac>
    2abc:	c2 01       	movw	r24, r4
    2abe:	82 19       	sub	r24, r2
    2ac0:	93 09       	sbc	r25, r3
    2ac2:	85 36       	cpi	r24, 0x65	; 101
    2ac4:	91 05       	cpc	r25, r1
    2ac6:	9c f0       	brlt	.+38     	; 0x2aee <main+0x25ca>
    2ac8:	e5 e2       	ldi	r30, 0x25	; 37
    2aca:	6e 2e       	mov	r6, r30
    2acc:	71 2c       	mov	r7, r1
    2ace:	0f c0       	rjmp	.+30     	; 0x2aee <main+0x25ca>
					state = WAIT;
				}
				if(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    2ad0:	9b e0       	ldi	r25, 0x0B	; 11
    2ad2:	69 16       	cp	r6, r25
    2ad4:	71 04       	cpc	r7, r1
    2ad6:	59 f4       	brne	.+22     	; 0x2aee <main+0x25ca>
    2ad8:	c2 01       	movw	r24, r4
    2ada:	82 19       	sub	r24, r2
    2adc:	93 09       	sbc	r25, r3
    2ade:	81 5d       	subi	r24, 0xD1	; 209
    2ae0:	97 40       	sbci	r25, 0x07	; 7
    2ae2:	a4 f0       	brlt	.+40     	; 0x2b0c <main+0x25e8>
    2ae4:	12 01       	movw	r2, r4
    2ae6:	75 e2       	ldi	r23, 0x25	; 37
    2ae8:	67 2e       	mov	r6, r23
    2aea:	71 2c       	mov	r7, r1
    2aec:	0f c0       	rjmp	.+30     	; 0x2b0c <main+0x25e8>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    2aee:	bc e0       	ldi	r27, 0x0C	; 12
    2af0:	6b 16       	cp	r6, r27
    2af2:	71 04       	cpc	r7, r1
    2af4:	59 f4       	brne	.+22     	; 0x2b0c <main+0x25e8>
    2af6:	c2 01       	movw	r24, r4
    2af8:	82 19       	sub	r24, r2
    2afa:	93 09       	sbc	r25, r3
    2afc:	85 36       	cpi	r24, 0x65	; 101
    2afe:	91 05       	cpc	r25, r1
    2b00:	9c f0       	brlt	.+38     	; 0x2b28 <main+0x2604>
    2b02:	12 01       	movw	r2, r4
    2b04:	65 e2       	ldi	r22, 0x25	; 37
    2b06:	66 2e       	mov	r6, r22
    2b08:	71 2c       	mov	r7, r1
    2b0a:	0e c0       	rjmp	.+28     	; 0x2b28 <main+0x2604>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2b0c:	3d e0       	ldi	r19, 0x0D	; 13
    2b0e:	63 16       	cp	r6, r19
    2b10:	71 04       	cpc	r7, r1
    2b12:	51 f4       	brne	.+20     	; 0x2b28 <main+0x2604>
    2b14:	c2 01       	movw	r24, r4
    2b16:	82 19       	sub	r24, r2
    2b18:	93 09       	sbc	r25, r3
    2b1a:	81 5d       	subi	r24, 0xD1	; 209
    2b1c:	97 40       	sbci	r25, 0x07	; 7
    2b1e:	9c f0       	brlt	.+38     	; 0x2b46 <main+0x2622>
    2b20:	55 e2       	ldi	r21, 0x25	; 37
    2b22:	65 2e       	mov	r6, r21
    2b24:	71 2c       	mov	r7, r1
    2b26:	0f c0       	rjmp	.+30     	; 0x2b46 <main+0x2622>
					state = WAIT;
					counterRef14 = counter;
				}
				if(state == B1STOP2 && counter - counterRef > totalStepLength2*fixtureMotorBrush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    2b28:	5e e0       	ldi	r21, 0x0E	; 14
    2b2a:	65 16       	cp	r6, r21
    2b2c:	71 04       	cpc	r7, r1
    2b2e:	59 f4       	brne	.+22     	; 0x2b46 <main+0x2622>
    2b30:	c2 01       	movw	r24, r4
    2b32:	82 19       	sub	r24, r2
    2b34:	93 09       	sbc	r25, r3
    2b36:	81 5a       	subi	r24, 0xA1	; 161
    2b38:	9f 40       	sbci	r25, 0x0F	; 15
    2b3a:	a4 f0       	brlt	.+40     	; 0x2b64 <main+0x2640>
    2b3c:	12 01       	movw	r2, r4
    2b3e:	45 e2       	ldi	r20, 0x25	; 37
    2b40:	64 2e       	mov	r6, r20
    2b42:	71 2c       	mov	r7, r1
    2b44:	0f c0       	rjmp	.+30     	; 0x2b64 <main+0x2640>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    2b46:	bf e0       	ldi	r27, 0x0F	; 15
    2b48:	6b 16       	cp	r6, r27
    2b4a:	71 04       	cpc	r7, r1
    2b4c:	59 f4       	brne	.+22     	; 0x2b64 <main+0x2640>
    2b4e:	c2 01       	movw	r24, r4
    2b50:	82 19       	sub	r24, r2
    2b52:	93 09       	sbc	r25, r3
    2b54:	85 36       	cpi	r24, 0x65	; 101
    2b56:	91 05       	cpc	r25, r1
    2b58:	a4 f0       	brlt	.+40     	; 0x2b82 <main+0x265e>
    2b5a:	12 01       	movw	r2, r4
    2b5c:	35 e2       	ldi	r19, 0x25	; 37
    2b5e:	63 2e       	mov	r6, r19
    2b60:	71 2c       	mov	r7, r1
    2b62:	0f c0       	rjmp	.+30     	; 0x2b82 <main+0x265e>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    2b64:	30 e1       	ldi	r19, 0x10	; 16
    2b66:	63 16       	cp	r6, r19
    2b68:	71 04       	cpc	r7, r1
    2b6a:	59 f4       	brne	.+22     	; 0x2b82 <main+0x265e>
    2b6c:	c2 01       	movw	r24, r4
    2b6e:	82 19       	sub	r24, r2
    2b70:	93 09       	sbc	r25, r3
    2b72:	85 36       	cpi	r24, 0x65	; 101
    2b74:	91 05       	cpc	r25, r1
    2b76:	a4 f0       	brlt	.+40     	; 0x2ba0 <main+0x267c>
    2b78:	12 01       	movw	r2, r4
    2b7a:	95 e2       	ldi	r25, 0x25	; 37
    2b7c:	69 2e       	mov	r6, r25
    2b7e:	71 2c       	mov	r7, r1
    2b80:	0f c0       	rjmp	.+30     	; 0x2ba0 <main+0x267c>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2b82:	41 e1       	ldi	r20, 0x11	; 17
    2b84:	64 16       	cp	r6, r20
    2b86:	71 04       	cpc	r7, r1
    2b88:	59 f4       	brne	.+22     	; 0x2ba0 <main+0x267c>
    2b8a:	c2 01       	movw	r24, r4
    2b8c:	82 19       	sub	r24, r2
    2b8e:	93 09       	sbc	r25, r3
    2b90:	81 5d       	subi	r24, 0xD1	; 209
    2b92:	97 40       	sbci	r25, 0x07	; 7
    2b94:	a4 f0       	brlt	.+40     	; 0x2bbe <main+0x269a>
    2b96:	12 01       	movw	r2, r4
    2b98:	85 e2       	ldi	r24, 0x25	; 37
    2b9a:	68 2e       	mov	r6, r24
    2b9c:	71 2c       	mov	r7, r1
    2b9e:	0f c0       	rjmp	.+30     	; 0x2bbe <main+0x269a>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    2ba0:	82 e1       	ldi	r24, 0x12	; 18
    2ba2:	68 16       	cp	r6, r24
    2ba4:	71 04       	cpc	r7, r1
    2ba6:	59 f4       	brne	.+22     	; 0x2bbe <main+0x269a>
    2ba8:	c2 01       	movw	r24, r4
    2baa:	82 19       	sub	r24, r2
    2bac:	93 09       	sbc	r25, r3
    2bae:	85 36       	cpi	r24, 0x65	; 101
    2bb0:	91 05       	cpc	r25, r1
    2bb2:	a4 f0       	brlt	.+40     	; 0x2bdc <main+0x26b8>
    2bb4:	12 01       	movw	r2, r4
    2bb6:	05 e2       	ldi	r16, 0x25	; 37
    2bb8:	60 2e       	mov	r6, r16
    2bba:	71 2c       	mov	r7, r1
    2bbc:	0f c0       	rjmp	.+30     	; 0x2bdc <main+0x26b8>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    2bbe:	93 e1       	ldi	r25, 0x13	; 19
    2bc0:	69 16       	cp	r6, r25
    2bc2:	71 04       	cpc	r7, r1
    2bc4:	59 f4       	brne	.+22     	; 0x2bdc <main+0x26b8>
    2bc6:	c2 01       	movw	r24, r4
    2bc8:	82 19       	sub	r24, r2
    2bca:	93 09       	sbc	r25, r3
    2bcc:	81 5d       	subi	r24, 0xD1	; 209
    2bce:	97 40       	sbci	r25, 0x07	; 7
    2bd0:	a4 f0       	brlt	.+40     	; 0x2bfa <main+0x26d6>
    2bd2:	12 01       	movw	r2, r4
    2bd4:	15 e2       	ldi	r17, 0x25	; 37
    2bd6:	61 2e       	mov	r6, r17
    2bd8:	71 2c       	mov	r7, r1
    2bda:	0f c0       	rjmp	.+30     	; 0x2bfa <main+0x26d6>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    2bdc:	b4 e1       	ldi	r27, 0x14	; 20
    2bde:	6b 16       	cp	r6, r27
    2be0:	71 04       	cpc	r7, r1
    2be2:	59 f4       	brne	.+22     	; 0x2bfa <main+0x26d6>
    2be4:	c2 01       	movw	r24, r4
    2be6:	82 19       	sub	r24, r2
    2be8:	93 09       	sbc	r25, r3
    2bea:	85 36       	cpi	r24, 0x65	; 101
    2bec:	91 05       	cpc	r25, r1
    2bee:	a4 f0       	brlt	.+40     	; 0x2c18 <main+0x26f4>
    2bf0:	12 01       	movw	r2, r4
    2bf2:	b5 e2       	ldi	r27, 0x25	; 37
    2bf4:	6b 2e       	mov	r6, r27
    2bf6:	71 2c       	mov	r7, r1
    2bf8:	0f c0       	rjmp	.+30     	; 0x2c18 <main+0x26f4>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2bfa:	35 e1       	ldi	r19, 0x15	; 21
    2bfc:	63 16       	cp	r6, r19
    2bfe:	71 04       	cpc	r7, r1
    2c00:	59 f4       	brne	.+22     	; 0x2c18 <main+0x26f4>
    2c02:	c2 01       	movw	r24, r4
    2c04:	82 19       	sub	r24, r2
    2c06:	93 09       	sbc	r25, r3
    2c08:	81 5d       	subi	r24, 0xD1	; 209
    2c0a:	97 40       	sbci	r25, 0x07	; 7
    2c0c:	a4 f0       	brlt	.+40     	; 0x2c36 <main+0x2712>
    2c0e:	12 01       	movw	r2, r4
    2c10:	a5 e2       	ldi	r26, 0x25	; 37
    2c12:	6a 2e       	mov	r6, r26
    2c14:	71 2c       	mov	r7, r1
    2c16:	0f c0       	rjmp	.+30     	; 0x2c36 <main+0x2712>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    2c18:	56 e1       	ldi	r21, 0x16	; 22
    2c1a:	65 16       	cp	r6, r21
    2c1c:	71 04       	cpc	r7, r1
    2c1e:	59 f4       	brne	.+22     	; 0x2c36 <main+0x2712>
    2c20:	c2 01       	movw	r24, r4
    2c22:	82 19       	sub	r24, r2
    2c24:	93 09       	sbc	r25, r3
    2c26:	85 36       	cpi	r24, 0x65	; 101
    2c28:	91 05       	cpc	r25, r1
    2c2a:	a4 f0       	brlt	.+40     	; 0x2c54 <main+0x2730>
    2c2c:	12 01       	movw	r2, r4
    2c2e:	f5 e2       	ldi	r31, 0x25	; 37
    2c30:	6f 2e       	mov	r6, r31
    2c32:	71 2c       	mov	r7, r1
    2c34:	0f c0       	rjmp	.+30     	; 0x2c54 <main+0x2730>
					state = WAIT;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    2c36:	87 e1       	ldi	r24, 0x17	; 23
    2c38:	68 16       	cp	r6, r24
    2c3a:	71 04       	cpc	r7, r1
    2c3c:	59 f4       	brne	.+22     	; 0x2c54 <main+0x2730>
    2c3e:	c2 01       	movw	r24, r4
    2c40:	82 19       	sub	r24, r2
    2c42:	93 09       	sbc	r25, r3
    2c44:	81 5a       	subi	r24, 0xA1	; 161
    2c46:	9f 40       	sbci	r25, 0x0F	; 15
    2c48:	a4 f0       	brlt	.+40     	; 0x2c72 <main+0x274e>
    2c4a:	12 01       	movw	r2, r4
    2c4c:	e5 e2       	ldi	r30, 0x25	; 37
    2c4e:	6e 2e       	mov	r6, r30
    2c50:	71 2c       	mov	r7, r1
    2c52:	0f c0       	rjmp	.+30     	; 0x2c72 <main+0x274e>
					state = WAIT;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    2c54:	b8 e1       	ldi	r27, 0x18	; 24
    2c56:	6b 16       	cp	r6, r27
    2c58:	71 04       	cpc	r7, r1
    2c5a:	59 f4       	brne	.+22     	; 0x2c72 <main+0x274e>
    2c5c:	c2 01       	movw	r24, r4
    2c5e:	82 19       	sub	r24, r2
    2c60:	93 09       	sbc	r25, r3
    2c62:	85 36       	cpi	r24, 0x65	; 101
    2c64:	91 05       	cpc	r25, r1
    2c66:	9c f0       	brlt	.+38     	; 0x2c8e <main+0x276a>
    2c68:	12 01       	movw	r2, r4
    2c6a:	75 e2       	ldi	r23, 0x25	; 37
    2c6c:	67 2e       	mov	r6, r23
    2c6e:	71 2c       	mov	r7, r1
    2c70:	0e c0       	rjmp	.+28     	; 0x2c8e <main+0x276a>
					state = WAIT;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2c72:	39 e1       	ldi	r19, 0x19	; 25
    2c74:	63 16       	cp	r6, r19
    2c76:	71 04       	cpc	r7, r1
    2c78:	51 f4       	brne	.+20     	; 0x2c8e <main+0x276a>
    2c7a:	c2 01       	movw	r24, r4
    2c7c:	82 19       	sub	r24, r2
    2c7e:	93 09       	sbc	r25, r3
    2c80:	81 5a       	subi	r24, 0xA1	; 161
    2c82:	9f 40       	sbci	r25, 0x0F	; 15
    2c84:	a4 f0       	brlt	.+40     	; 0x2cae <main+0x278a>
    2c86:	65 e2       	ldi	r22, 0x25	; 37
    2c88:	66 2e       	mov	r6, r22
    2c8a:	71 2c       	mov	r7, r1
    2c8c:	10 c0       	rjmp	.+32     	; 0x2cae <main+0x278a>
					state = WAIT;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    2c8e:	5a e1       	ldi	r21, 0x1A	; 26
    2c90:	65 16       	cp	r6, r21
    2c92:	71 04       	cpc	r7, r1
    2c94:	61 f4       	brne	.+24     	; 0x2cae <main+0x278a>
    2c96:	c2 01       	movw	r24, r4
    2c98:	82 19       	sub	r24, r2
    2c9a:	93 09       	sbc	r25, r3
    2c9c:	81 5a       	subi	r24, 0xA1	; 161
    2c9e:	9f 40       	sbci	r25, 0x0F	; 15
    2ca0:	bc f0       	brlt	.+46     	; 0x2cd0 <main+0x27ac>
    2ca2:	5c a6       	std	Y+44, r5	; 0x2c
    2ca4:	4b a6       	std	Y+43, r4	; 0x2b
    2ca6:	55 e2       	ldi	r21, 0x25	; 37
    2ca8:	65 2e       	mov	r6, r21
    2caa:	71 2c       	mov	r7, r1
    2cac:	11 c0       	rjmp	.+34     	; 0x2cd0 <main+0x27ac>
					state = WAIT;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    2cae:	bb e1       	ldi	r27, 0x1B	; 27
    2cb0:	6b 16       	cp	r6, r27
    2cb2:	71 04       	cpc	r7, r1
    2cb4:	69 f4       	brne	.+26     	; 0x2cd0 <main+0x27ac>
    2cb6:	c2 01       	movw	r24, r4
    2cb8:	4b a5       	ldd	r20, Y+43	; 0x2b
    2cba:	5c a5       	ldd	r21, Y+44	; 0x2c
    2cbc:	84 1b       	sub	r24, r20
    2cbe:	95 0b       	sbc	r25, r21
    2cc0:	85 36       	cpi	r24, 0x65	; 101
    2cc2:	91 05       	cpc	r25, r1
    2cc4:	a4 f0       	brlt	.+40     	; 0x2cee <main+0x27ca>
    2cc6:	12 01       	movw	r2, r4
    2cc8:	45 e2       	ldi	r20, 0x25	; 37
    2cca:	64 2e       	mov	r6, r20
    2ccc:	71 2c       	mov	r7, r1
    2cce:	0f c0       	rjmp	.+30     	; 0x2cee <main+0x27ca>
					state = WAIT;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    2cd0:	5c e1       	ldi	r21, 0x1C	; 28
    2cd2:	65 16       	cp	r6, r21
    2cd4:	71 04       	cpc	r7, r1
    2cd6:	59 f4       	brne	.+22     	; 0x2cee <main+0x27ca>
    2cd8:	c2 01       	movw	r24, r4
    2cda:	82 19       	sub	r24, r2
    2cdc:	93 09       	sbc	r25, r3
    2cde:	85 36       	cpi	r24, 0x65	; 101
    2ce0:	91 05       	cpc	r25, r1
    2ce2:	9c f0       	brlt	.+38     	; 0x2d0a <main+0x27e6>
    2ce4:	12 01       	movw	r2, r4
    2ce6:	35 e2       	ldi	r19, 0x25	; 37
    2ce8:	63 2e       	mov	r6, r19
    2cea:	71 2c       	mov	r7, r1
    2cec:	0e c0       	rjmp	.+28     	; 0x2d0a <main+0x27e6>
					state = WAIT;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2cee:	8d e1       	ldi	r24, 0x1D	; 29
    2cf0:	68 16       	cp	r6, r24
    2cf2:	71 04       	cpc	r7, r1
    2cf4:	51 f4       	brne	.+20     	; 0x2d0a <main+0x27e6>
    2cf6:	c2 01       	movw	r24, r4
    2cf8:	82 19       	sub	r24, r2
    2cfa:	93 09       	sbc	r25, r3
    2cfc:	81 5a       	subi	r24, 0xA1	; 161
    2cfe:	9f 40       	sbci	r25, 0x0F	; 15
    2d00:	8c f0       	brlt	.+34     	; 0x2d24 <main+0x2800>
    2d02:	95 e2       	ldi	r25, 0x25	; 37
    2d04:	69 2e       	mov	r6, r25
    2d06:	71 2c       	mov	r7, r1
    2d08:	0d c0       	rjmp	.+26     	; 0x2d24 <main+0x2800>
					state = WAIT;
					counterRef30 = counter;
				}
				if(state == D2STOP && /*counter - counterRef > totalStepLength2*fixtureMotorLoadBack &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    2d0a:	be e1       	ldi	r27, 0x1E	; 30
    2d0c:	6b 16       	cp	r6, r27
    2d0e:	71 04       	cpc	r7, r1
    2d10:	49 f4       	brne	.+18     	; 0x2d24 <main+0x2800>
    2d12:	80 91 a2 03 	lds	r24, 0x03A2
    2d16:	83 fd       	sbrc	r24, 3
    2d18:	12 c0       	rjmp	.+36     	; 0x2d3e <main+0x281a>
    2d1a:	12 01       	movw	r2, r4
    2d1c:	85 e2       	ldi	r24, 0x25	; 37
    2d1e:	68 2e       	mov	r6, r24
    2d20:	71 2c       	mov	r7, r1
    2d22:	0d c0       	rjmp	.+26     	; 0x2d3e <main+0x281a>
					state = WAIT;
					counterRef = counter;
				}
				if(state == RAISEL2 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    2d24:	3f e1       	ldi	r19, 0x1F	; 31
    2d26:	63 16       	cp	r6, r19
    2d28:	71 04       	cpc	r7, r1
    2d2a:	49 f4       	brne	.+18     	; 0x2d3e <main+0x281a>
    2d2c:	80 91 a2 03 	lds	r24, 0x03A2
    2d30:	81 fd       	sbrc	r24, 1
    2d32:	12 c0       	rjmp	.+36     	; 0x2d58 <main+0x2834>
    2d34:	12 01       	movw	r2, r4
    2d36:	05 e2       	ldi	r16, 0x25	; 37
    2d38:	60 2e       	mov	r6, r16
    2d3a:	71 2c       	mov	r7, r1
    2d3c:	0d c0       	rjmp	.+26     	; 0x2d58 <main+0x2834>
					state = WAIT;
					counterRef = counter;
				}
				if(state == FIXH && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureHome == 0){
    2d3e:	40 e2       	ldi	r20, 0x20	; 32
    2d40:	64 16       	cp	r6, r20
    2d42:	71 04       	cpc	r7, r1
    2d44:	49 f4       	brne	.+18     	; 0x2d58 <main+0x2834>
    2d46:	80 91 a2 03 	lds	r24, 0x03A2
    2d4a:	82 fd       	sbrc	r24, 2
    2d4c:	14 c0       	rjmp	.+40     	; 0x2d76 <main+0x2852>
    2d4e:	12 01       	movw	r2, r4
    2d50:	15 e2       	ldi	r17, 0x25	; 37
    2d52:	61 2e       	mov	r6, r17
    2d54:	71 2c       	mov	r7, r1
    2d56:	0f c0       	rjmp	.+30     	; 0x2d76 <main+0x2852>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    2d58:	51 e2       	ldi	r21, 0x21	; 33
    2d5a:	65 16       	cp	r6, r21
    2d5c:	71 04       	cpc	r7, r1
    2d5e:	59 f4       	brne	.+22     	; 0x2d76 <main+0x2852>
    2d60:	c2 01       	movw	r24, r4
    2d62:	82 19       	sub	r24, r2
    2d64:	93 09       	sbc	r25, r3
    2d66:	85 36       	cpi	r24, 0x65	; 101
    2d68:	91 05       	cpc	r25, r1
    2d6a:	a4 f0       	brlt	.+40     	; 0x2d94 <main+0x2870>
    2d6c:	12 01       	movw	r2, r4
    2d6e:	b5 e2       	ldi	r27, 0x25	; 37
    2d70:	6b 2e       	mov	r6, r27
    2d72:	71 2c       	mov	r7, r1
    2d74:	0f c0       	rjmp	.+30     	; 0x2d94 <main+0x2870>
					state = WAIT;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    2d76:	82 e2       	ldi	r24, 0x22	; 34
    2d78:	68 16       	cp	r6, r24
    2d7a:	71 04       	cpc	r7, r1
    2d7c:	59 f4       	brne	.+22     	; 0x2d94 <main+0x2870>
    2d7e:	c2 01       	movw	r24, r4
    2d80:	82 19       	sub	r24, r2
    2d82:	93 09       	sbc	r25, r3
    2d84:	81 5a       	subi	r24, 0xA1	; 161
    2d86:	9f 40       	sbci	r25, 0x0F	; 15
    2d88:	94 f0       	brlt	.+36     	; 0x2dae <main+0x288a>
    2d8a:	12 01       	movw	r2, r4
    2d8c:	a5 e2       	ldi	r26, 0x25	; 37
    2d8e:	6a 2e       	mov	r6, r26
    2d90:	71 2c       	mov	r7, r1
    2d92:	0d c0       	rjmp	.+26     	; 0x2dae <main+0x288a>
					state = WAIT;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    2d94:	b3 e2       	ldi	r27, 0x23	; 35
    2d96:	6b 16       	cp	r6, r27
    2d98:	71 04       	cpc	r7, r1
    2d9a:	49 f4       	brne	.+18     	; 0x2dae <main+0x288a>
    2d9c:	c2 01       	movw	r24, r4
    2d9e:	82 19       	sub	r24, r2
    2da0:	93 09       	sbc	r25, r3
    2da2:	0b 97       	sbiw	r24, 0x0b	; 11
    2da4:	ac f0       	brlt	.+42     	; 0x2dd0 <main+0x28ac>
    2da6:	f4 e2       	ldi	r31, 0x24	; 36
    2da8:	6f 2e       	mov	r6, r31
    2daa:	71 2c       	mov	r7, r1
    2dac:	11 c0       	rjmp	.+34     	; 0x2dd0 <main+0x28ac>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    2dae:	35 e2       	ldi	r19, 0x25	; 37
    2db0:	63 16       	cp	r6, r19
    2db2:	71 04       	cpc	r7, r1
    2db4:	69 f4       	brne	.+26     	; 0x2dd0 <main+0x28ac>
    2db6:	22 23       	and	r18, r18
    2db8:	c1 f0       	breq	.+48     	; 0x2dea <main+0x28c6>
					state = ++last;
    2dba:	25 96       	adiw	r28, 0x05	; 5
    2dbc:	4e ad       	ldd	r20, Y+62	; 0x3e
    2dbe:	5f ad       	ldd	r21, Y+63	; 0x3f
    2dc0:	25 97       	sbiw	r28, 0x05	; 5
    2dc2:	4f 5f       	subi	r20, 0xFF	; 255
    2dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc6:	25 96       	adiw	r28, 0x05	; 5
    2dc8:	5f af       	std	Y+63, r21	; 0x3f
    2dca:	4e af       	std	Y+62, r20	; 0x3e
    2dcc:	25 97       	sbiw	r28, 0x05	; 5
    2dce:	3a 01       	movw	r6, r20
				}


				//state actions
						
			switch (state){
    2dd0:	f3 01       	movw	r30, r6
    2dd2:	e6 32       	cpi	r30, 0x26	; 38
    2dd4:	f1 05       	cpc	r31, r1
    2dd6:	08 f0       	brcs	.+2      	; 0x2dda <main+0x28b6>
    2dd8:	c9 c1       	rjmp	.+914    	; 0x316c <main+0x2c48>
    2dda:	e2 52       	subi	r30, 0x22	; 34
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	ee 0f       	add	r30, r30
    2de0:	ff 1f       	adc	r31, r31
    2de2:	05 90       	lpm	r0, Z+
    2de4:	f4 91       	lpm	r31, Z+
    2de6:	e0 2d       	mov	r30, r0
    2de8:	09 94       	ijmp
    2dea:	1c aa       	std	Y+52, r1	; 0x34
    2dec:	1b aa       	std	Y+51, r1	; 0x33
    2dee:	1a 8e       	std	Y+26, r1	; 0x1a
    2df0:	19 8e       	std	Y+25, r1	; 0x19
    2df2:	1a 8a       	std	Y+18, r1	; 0x12
    2df4:	19 8a       	std	Y+17, r1	; 0x11
    2df6:	1a 86       	std	Y+10, r1	; 0x0a
    2df8:	19 86       	std	Y+9, r1	; 0x09
    2dfa:	9b c0       	rjmp	.+310    	; 0x2f32 <main+0x2a0e>
					brush1Motor = 0;
					brush2Motor = 0;
					paperTowelMotor = 0;
					break;
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    2dfc:	80 91 a2 03 	lds	r24, 0x03A2
    2e00:	90 91 9e 03 	lds	r25, 0x039E
    2e04:	20 91 a0 03 	lds	r18, 0x03A0
    2e08:	82 ff       	sbrs	r24, 2
    2e0a:	07 c0       	rjmp	.+14     	; 0x2e1a <main+0x28f6>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    2e0c:	9f 7e       	andi	r25, 0xEF	; 239
    2e0e:	90 93 9e 03 	sts	0x039E, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2e12:	27 7f       	andi	r18, 0xF7	; 247
    2e14:	20 93 a0 03 	sts	0x03A0, r18
    2e18:	a9 c1       	rjmp	.+850    	; 0x316c <main+0x2c48>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2e1a:	9f 7d       	andi	r25, 0xDF	; 223
    2e1c:	90 93 9e 03 	sts	0x039E, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2e20:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2e22:	28 60       	ori	r18, 0x08	; 8
    2e24:	20 93 a0 03 	sts	0x03A0, r18
						if(print0 == 1){
    2e28:	8b a1       	ldd	r24, Y+35	; 0x23
    2e2a:	9c a1       	ldd	r25, Y+36	; 0x24
    2e2c:	01 97       	sbiw	r24, 0x01	; 1
    2e2e:	09 f0       	breq	.+2      	; 0x2e32 <main+0x290e>
    2e30:	45 c0       	rjmp	.+138    	; 0x2ebc <main+0x2998>
							OrangutanLCD::gotoXY(0,1);
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	61 e0       	ldi	r22, 0x01	; 1
    2e36:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    2e3a:	8f e4       	ldi	r24, 0x4F	; 79
    2e3c:	93 e0       	ldi	r25, 0x03	; 3
    2e3e:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
    2e42:	1c a2       	std	Y+36, r1	; 0x24
    2e44:	1b a2       	std	Y+35, r1	; 0x23
    2e46:	3a c0       	rjmp	.+116    	; 0x2ebc <main+0x2998>
							print0 = 0;
						}
					}
					break;
				case LOAD:
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    2e48:	20 91 a0 03 	lds	r18, 0x03A0
    2e4c:	32 2f       	mov	r19, r18
    2e4e:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    2e50:	c2 01       	movw	r24, r4
    2e52:	68 ec       	ldi	r22, 0xC8	; 200
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divmodhi4>
    2e5a:	84 36       	cpi	r24, 0x64	; 100
    2e5c:	91 05       	cpc	r25, r1
    2e5e:	24 f4       	brge	.+8      	; 0x2e68 <main+0x2944>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    2e60:	2c 7f       	andi	r18, 0xFC	; 252
    2e62:	20 93 a0 03 	sts	0x03A0, r18
    2e66:	03 c0       	rjmp	.+6      	; 0x2e6e <main+0x294a>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2e68:	32 60       	ori	r19, 0x02	; 2
    2e6a:	30 93 a0 03 	sts	0x03A0, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    2e6e:	80 91 9e 03 	lds	r24, 0x039E
    2e72:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    2e74:	84 60       	ori	r24, 0x04	; 4
    2e76:	80 93 9e 03 	sts	0x039E, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    2e7a:	80 91 a0 03 	lds	r24, 0x03A0
    2e7e:	8b 7f       	andi	r24, 0xFB	; 251
    2e80:	80 93 a0 03 	sts	0x03A0, r24
    2e84:	a1 e0       	ldi	r26, 0x01	; 1
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	ba 8b       	std	Y+18, r27	; 0x12
    2e8a:	a9 8b       	std	Y+17, r26	; 0x11
    2e8c:	6f c1       	rjmp	.+734    	; 0x316c <main+0x2c48>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2e8e:	80 91 a0 03 	lds	r24, 0x03A0
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2e92:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    2e94:	86 61       	ori	r24, 0x16	; 22
    2e96:	80 93 a0 03 	sts	0x03A0, r24
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2e9a:	80 91 9e 03 	lds	r24, 0x039E
    2e9e:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2ea0:	8b 7f       	andi	r24, 0xFB	; 251
    2ea2:	80 93 9e 03 	sts	0x039E, r24
    2ea6:	60 c1       	rjmp	.+704    	; 0x3168 <main+0x2c44>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2ea8:	80 91 9e 03 	lds	r24, 0x039E
    2eac:	8f 7d       	andi	r24, 0xDF	; 223
    2eae:	80 93 9e 03 	sts	0x039E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2eb2:	80 91 a0 03 	lds	r24, 0x03A0
    2eb6:	88 60       	ori	r24, 0x08	; 8
    2eb8:	80 93 a0 03 	sts	0x03A0, r24
    2ebc:	1a 8e       	std	Y+26, r1	; 0x1a
    2ebe:	19 8e       	std	Y+25, r1	; 0x19
    2ec0:	55 c1       	rjmp	.+682    	; 0x316c <main+0x2c48>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2ec2:	80 91 a0 03 	lds	r24, 0x03A0
    2ec6:	8f 7e       	andi	r24, 0xEF	; 239
    2ec8:	80 93 a0 03 	sts	0x03A0, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2ecc:	80 91 9e 03 	lds	r24, 0x039E
    2ed0:	80 62       	ori	r24, 0x20	; 32
    2ed2:	80 93 9e 03 	sts	0x039E, r24
    2ed6:	4a c1       	rjmp	.+660    	; 0x316c <main+0x2c48>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2ed8:	80 91 9e 03 	lds	r24, 0x039E
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2edc:	80 63       	ori	r24, 0x30	; 48
    2ede:	7f c0       	rjmp	.+254    	; 0x2fde <main+0x2aba>
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    2ee0:	80 91 9f 03 	lds	r24, 0x039F
    2ee4:	81 60       	ori	r24, 0x01	; 1
    2ee6:	80 93 9f 03 	sts	0x039F, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2eea:	80 91 9e 03 	lds	r24, 0x039E
    2eee:	8f 77       	andi	r24, 0x7F	; 127
    2ef0:	80 93 9e 03 	sts	0x039E, r24
    2ef4:	e3 cf       	rjmp	.-58     	; 0x2ebc <main+0x2998>
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2ef6:	80 91 a0 03 	lds	r24, 0x03A0
    2efa:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2efc:	8f 7d       	andi	r24, 0xDF	; 223
    2efe:	80 93 a0 03 	sts	0x03A0, r24
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	37 c0       	rjmp	.+110    	; 0x2f76 <main+0x2a52>
					break;
				case CLEAN1_1:
					brush1Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2f08:	80 91 9e 03 	lds	r24, 0x039E
    2f0c:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2f0e:	8f 7e       	andi	r24, 0xEF	; 239
    2f10:	80 93 9e 03 	sts	0x039E, r24
    2f14:	a1 e0       	ldi	r26, 0x01	; 1
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	ba 8f       	std	Y+26, r27	; 0x1a
    2f1a:	a9 8f       	std	Y+25, r26	; 0x19
    2f1c:	bc 83       	std	Y+4, r27	; 0x04
    2f1e:	ab 83       	std	Y+3, r26	; 0x03
    2f20:	25 c1       	rjmp	.+586    	; 0x316c <main+0x2c48>
					break;
				case B1STOP1:
					fixtureMotor = 0;
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2f22:	80 91 a0 03 	lds	r24, 0x03A0
    2f26:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2f28:	80 62       	ori	r24, 0x20	; 32
    2f2a:	80 93 a0 03 	sts	0x03A0, r24
    2f2e:	1a 8e       	std	Y+26, r1	; 0x1a
    2f30:	19 8e       	std	Y+25, r1	; 0x19
    2f32:	1c 82       	std	Y+4, r1	; 0x04
    2f34:	1b 82       	std	Y+3, r1	; 0x03
    2f36:	1a c1       	rjmp	.+564    	; 0x316c <main+0x2c48>
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2f38:	80 91 9e 03 	lds	r24, 0x039E
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2f3c:	80 63       	ori	r24, 0x30	; 48
    2f3e:	89 c0       	rjmp	.+274    	; 0x3052 <main+0x2b2e>
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2f40:	80 91 9e 03 	lds	r24, 0x039E
    2f44:	8f 77       	andi	r24, 0x7F	; 127
    2f46:	80 93 9e 03 	sts	0x039E, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2f4a:	80 91 a0 03 	lds	r24, 0x03A0
    2f4e:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2f50:	8f 7d       	andi	r24, 0xDF	; 223
    2f52:	80 93 a0 03 	sts	0x03A0, r24
    2f56:	1a 8e       	std	Y+26, r1	; 0x1a
    2f58:	19 8e       	std	Y+25, r1	; 0x19
    2f5a:	41 e0       	ldi	r20, 0x01	; 1
    2f5c:	50 e0       	ldi	r21, 0x00	; 0
    2f5e:	5c 83       	std	Y+4, r21	; 0x04
    2f60:	4b 83       	std	Y+3, r20	; 0x03
    2f62:	04 c1       	rjmp	.+520    	; 0x316c <main+0x2c48>
					break;
				case CLEAN1_3:
					brush1Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2f64:	80 91 9e 03 	lds	r24, 0x039E
    2f68:	80 62       	ori	r24, 0x20	; 32
    2f6a:	80 93 9e 03 	sts	0x039E, r24
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	9a 8f       	std	Y+26, r25	; 0x1a
    2f74:	89 8f       	std	Y+25, r24	; 0x19
    2f76:	9c 83       	std	Y+4, r25	; 0x04
    2f78:	8b 83       	std	Y+3, r24	; 0x03
    2f7a:	f8 c0       	rjmp	.+496    	; 0x316c <main+0x2c48>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    2f7c:	80 91 9f 03 	lds	r24, 0x039F
    2f80:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2f82:	8b 7f       	andi	r24, 0xFB	; 251
    2f84:	80 93 9f 03 	sts	0x039F, r24
    2f88:	99 cf       	rjmp	.-206    	; 0x2ebc <main+0x2998>
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2f8a:	80 91 a1 03 	lds	r24, 0x03A1
    2f8e:	81 60       	ori	r24, 0x01	; 1
    2f90:	80 93 a1 03 	sts	0x03A1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2f94:	80 91 a0 03 	lds	r24, 0x03A0
    2f98:	8f 77       	andi	r24, 0x7F	; 127
    2f9a:	80 93 a0 03 	sts	0x03A0, r24
    2f9e:	a1 e0       	ldi	r26, 0x01	; 1
    2fa0:	b0 e0       	ldi	r27, 0x00	; 0
    2fa2:	bc ab       	std	Y+52, r27	; 0x34
    2fa4:	ab ab       	std	Y+51, r26	; 0x33
    2fa6:	e2 c0       	rjmp	.+452    	; 0x316c <main+0x2c48>
					break;
				case CLEAN2_1:
					brush2Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2fa8:	80 91 9e 03 	lds	r24, 0x039E
    2fac:	80 62       	ori	r24, 0x20	; 32
    2fae:	80 93 9e 03 	sts	0x039E, r24
    2fb2:	21 e0       	ldi	r18, 0x01	; 1
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	3c ab       	std	Y+52, r19	; 0x34
    2fb8:	2b ab       	std	Y+51, r18	; 0x33
    2fba:	3a 8f       	std	Y+26, r19	; 0x1a
    2fbc:	29 8f       	std	Y+25, r18	; 0x19
    2fbe:	d6 c0       	rjmp	.+428    	; 0x316c <main+0x2c48>
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2fc0:	80 91 a1 03 	lds	r24, 0x03A1
    2fc4:	8e 7f       	andi	r24, 0xFE	; 254
    2fc6:	80 93 a1 03 	sts	0x03A1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2fca:	80 91 a0 03 	lds	r24, 0x03A0
    2fce:	80 68       	ori	r24, 0x80	; 128
    2fd0:	80 93 a0 03 	sts	0x03A0, r24
    2fd4:	38 c0       	rjmp	.+112    	; 0x3046 <main+0x2b22>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2fd6:	80 91 9e 03 	lds	r24, 0x039E
    2fda:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2fdc:	80 62       	ori	r24, 0x20	; 32
    2fde:	80 93 9e 03 	sts	0x039E, r24
    2fe2:	41 e0       	ldi	r20, 0x01	; 1
    2fe4:	50 e0       	ldi	r21, 0x00	; 0
    2fe6:	5a 8f       	std	Y+26, r21	; 0x1a
    2fe8:	49 8f       	std	Y+25, r20	; 0x19
    2fea:	c0 c0       	rjmp	.+384    	; 0x316c <main+0x2c48>
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2fec:	80 91 9f 03 	lds	r24, 0x039F
    2ff0:	8b 7f       	andi	r24, 0xFB	; 251
    2ff2:	80 93 9f 03 	sts	0x039F, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2ff6:	80 91 a1 03 	lds	r24, 0x03A1
    2ffa:	81 60       	ori	r24, 0x01	; 1
    2ffc:	80 93 a1 03 	sts	0x03A1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    3000:	80 91 a0 03 	lds	r24, 0x03A0
    3004:	8f 77       	andi	r24, 0x7F	; 127
    3006:	80 93 a0 03 	sts	0x03A0, r24
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	9c ab       	std	Y+52, r25	; 0x34
    3010:	8b ab       	std	Y+51, r24	; 0x33
    3012:	54 cf       	rjmp	.-344    	; 0x2ebc <main+0x2998>
					break;
				case CLEAN2_3:
					brush2Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    3014:	80 91 9e 03 	lds	r24, 0x039E
    3018:	80 62       	ori	r24, 0x20	; 32
    301a:	80 93 9e 03 	sts	0x039E, r24
    301e:	a1 e0       	ldi	r26, 0x01	; 1
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	bc ab       	std	Y+52, r27	; 0x34
    3024:	ab ab       	std	Y+51, r26	; 0x33
    3026:	76 c0       	rjmp	.+236    	; 0x3114 <main+0x2bf0>
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    3028:	80 91 a1 03 	lds	r24, 0x03A1
    302c:	8e 7f       	andi	r24, 0xFE	; 254
    302e:	80 93 a1 03 	sts	0x03A1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    3032:	80 91 a0 03 	lds	r24, 0x03A0
    3036:	80 68       	ori	r24, 0x80	; 128
    3038:	80 93 a0 03 	sts	0x03A0, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    303c:	80 91 9f 03 	lds	r24, 0x039F
    3040:	87 7f       	andi	r24, 0xF7	; 247
    3042:	80 93 9f 03 	sts	0x039F, r24
    3046:	1c aa       	std	Y+52, r1	; 0x34
    3048:	1b aa       	std	Y+51, r1	; 0x33
    304a:	38 cf       	rjmp	.-400    	; 0x2ebc <main+0x2998>
					break;
				//*************************************************
				case MOVED1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    304c:	80 91 9e 03 	lds	r24, 0x039E
    3050:	80 62       	ori	r24, 0x20	; 32
    3052:	80 93 9e 03 	sts	0x039E, r24
    3056:	21 e0       	ldi	r18, 0x01	; 1
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	af cf       	rjmp	.-162    	; 0x2fba <main+0x2a96>
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    305c:	80 91 a1 03 	lds	r24, 0x03A1
    3060:	87 7f       	andi	r24, 0xF7	; 247
    3062:	80 93 a1 03 	sts	0x03A1, r24
    3066:	2a cf       	rjmp	.-428    	; 0x2ebc <main+0x2998>
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1STOP:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    3068:	80 91 9e 03 	lds	r24, 0x039E
    306c:	80 62       	ori	r24, 0x20	; 32
    306e:	80 93 9e 03 	sts	0x039E, r24
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    3072:	80 91 a1 03 	lds	r24, 0x03A1
    3076:	88 60       	ori	r24, 0x08	; 8
    3078:	80 93 a1 03 	sts	0x03A1, r24
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	9a 8f       	std	Y+26, r25	; 0x1a
    3082:	89 8f       	std	Y+25, r24	; 0x19
    3084:	73 c0       	rjmp	.+230    	; 0x316c <main+0x2c48>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    3086:	80 91 9f 03 	lds	r24, 0x039F
    308a:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    308c:	8f 7d       	andi	r24, 0xDF	; 223
    308e:	80 93 9f 03 	sts	0x039F, r24
    3092:	1a 8e       	std	Y+26, r1	; 0x1a
    3094:	19 8e       	std	Y+25, r1	; 0x19
    3096:	a1 e0       	ldi	r26, 0x01	; 1
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	ba 87       	std	Y+10, r27	; 0x0a
    309c:	a9 87       	std	Y+9, r26	; 0x09
    309e:	66 c0       	rjmp	.+204    	; 0x316c <main+0x2c48>
					paperTowelMotor = 1;
					break;
				case D2RAISE:
					paperTowelMotor = 1;
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    30a0:	80 91 a1 03 	lds	r24, 0x03A1
    30a4:	8d 7f       	andi	r24, 0xFD	; 253
    30a6:	80 93 a1 03 	sts	0x03A1, r24
    30aa:	21 e0       	ldi	r18, 0x01	; 1
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	3a 87       	std	Y+10, r19	; 0x0a
    30b0:	29 87       	std	Y+9, r18	; 0x09
    30b2:	5c c0       	rjmp	.+184    	; 0x316c <main+0x2c48>
					break;
				case DRY2:
					paperTowelMotor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    30b4:	80 91 9e 03 	lds	r24, 0x039E
    30b8:	80 62       	ori	r24, 0x20	; 32
    30ba:	80 93 9e 03 	sts	0x039E, r24
    30be:	41 e0       	ldi	r20, 0x01	; 1
    30c0:	50 e0       	ldi	r21, 0x00	; 0
    30c2:	5a 8f       	std	Y+26, r21	; 0x1a
    30c4:	49 8f       	std	Y+25, r20	; 0x19
    30c6:	5a 87       	std	Y+10, r21	; 0x0a
    30c8:	49 87       	std	Y+9, r20	; 0x09
    30ca:	50 c0       	rjmp	.+160    	; 0x316c <main+0x2c48>
					break;
				case D2STOP:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    30cc:	80 91 9e 03 	lds	r24, 0x039E
    30d0:	80 62       	ori	r24, 0x20	; 32
    30d2:	80 93 9e 03 	sts	0x039E, r24
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    30d6:	80 91 9f 03 	lds	r24, 0x039F
    30da:	8f 7b       	andi	r24, 0xBF	; 191
    30dc:	80 93 9f 03 	sts	0x039F, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    30e0:	80 91 a1 03 	lds	r24, 0x03A1
    30e4:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    30e6:	8b 7f       	andi	r24, 0xFB	; 251
    30e8:	80 93 a1 03 	sts	0x03A1, r24
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	9a 8f       	std	Y+26, r25	; 0x1a
    30f2:	89 8f       	std	Y+25, r24	; 0x19
    30f4:	1a 86       	std	Y+10, r1	; 0x0a
    30f6:	19 86       	std	Y+9, r1	; 0x09
    30f8:	39 c0       	rjmp	.+114    	; 0x316c <main+0x2c48>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    30fa:	80 91 a0 03 	lds	r24, 0x03A0
    30fe:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    3100:	80 61       	ori	r24, 0x10	; 16
    3102:	da ce       	rjmp	.-588    	; 0x2eb8 <main+0x2994>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    3104:	80 91 9e 03 	lds	r24, 0x039E
    3108:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    310a:	80 62       	ori	r24, 0x20	; 32
    310c:	80 93 9e 03 	sts	0x039E, r24
    3110:	a1 e0       	ldi	r26, 0x01	; 1
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	ba 8f       	std	Y+26, r27	; 0x1a
    3116:	a9 8f       	std	Y+25, r26	; 0x19
    3118:	29 c0       	rjmp	.+82     	; 0x316c <main+0x2c48>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    311a:	80 91 9e 03 	lds	r24, 0x039E
    311e:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    3120:	84 60       	ori	r24, 0x04	; 4
    3122:	80 93 9e 03 	sts	0x039E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    3126:	80 91 a0 03 	lds	r24, 0x03A0
    312a:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    312c:	8f 7e       	andi	r24, 0xEF	; 239
    312e:	c4 ce       	rjmp	.-632    	; 0x2eb8 <main+0x2994>
					break;
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    3130:	80 91 9e 03 	lds	r24, 0x039E
    3134:	8d 7f       	andi	r24, 0xFD	; 253
    3136:	80 93 9e 03 	sts	0x039E, r24
    313a:	21 e0       	ldi	r18, 0x01	; 1
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	3a 8b       	std	Y+18, r19	; 0x12
    3140:	29 8b       	std	Y+17, r18	; 0x11
    3142:	14 c0       	rjmp	.+40     	; 0x316c <main+0x2c48>
					plateLoadMotor = 1;
					break;
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    3144:	80 91 9e 03 	lds	r24, 0x039E
    3148:	8b 7f       	andi	r24, 0xFB	; 251
    314a:	80 93 9e 03 	sts	0x039E, r24
					if(print35 == 1){
    314e:	4d a5       	ldd	r20, Y+45	; 0x2d
    3150:	5e a5       	ldd	r21, Y+46	; 0x2e
    3152:	41 30       	cpi	r20, 0x01	; 1
    3154:	51 05       	cpc	r21, r1
    3156:	41 f4       	brne	.+16     	; 0x3168 <main+0x2c44>
						OrangutanLCD::clear();
    3158:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    315c:	8d e5       	ldi	r24, 0x5D	; 93
    315e:	93 e0       	ldi	r25, 0x03	; 3
    3160:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
    3164:	1e a6       	std	Y+46, r1	; 0x2e
    3166:	1d a6       	std	Y+45, r1	; 0x2d
    3168:	1a 8a       	std	Y+18, r1	; 0x12
    316a:	19 8a       	std	Y+17, r1	; 0x11
					}
					break;
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    316c:	8d b7       	in	r24, 0x3d	; 61
    316e:	9e b7       	in	r25, 0x3e	; 62
    3170:	42 97       	sbiw	r24, 0x12	; 18
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	9e bf       	out	0x3e, r25	; 62
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	8d bf       	out	0x3d, r24	; 61
    317c:	ed b7       	in	r30, 0x3d	; 61
    317e:	fe b7       	in	r31, 0x3e	; 62
    3180:	31 96       	adiw	r30, 0x01	; 1
    3182:	22 e0       	ldi	r18, 0x02	; 2
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	ad b7       	in	r26, 0x3d	; 61
    3188:	be b7       	in	r27, 0x3e	; 62
    318a:	12 96       	adiw	r26, 0x02	; 2
    318c:	3c 93       	st	X, r19
    318e:	2e 93       	st	-X, r18
    3190:	11 97       	sbiw	r26, 0x01	; 1
    3192:	33 83       	std	Z+3, r19	; 0x03
    3194:	22 83       	std	Z+2, r18	; 0x02
    3196:	35 83       	std	Z+5, r19	; 0x05
    3198:	24 83       	std	Z+4, r18	; 0x04
    319a:	37 83       	std	Z+7, r19	; 0x07
    319c:	26 83       	std	Z+6, r18	; 0x06
    319e:	41 e0       	ldi	r20, 0x01	; 1
    31a0:	50 e0       	ldi	r21, 0x00	; 0
    31a2:	51 87       	std	Z+9, r21	; 0x09
    31a4:	40 87       	std	Z+8, r20	; 0x08
    31a6:	53 87       	std	Z+11, r21	; 0x0b
    31a8:	42 87       	std	Z+10, r20	; 0x0a
    31aa:	55 87       	std	Z+13, r21	; 0x0d
    31ac:	44 87       	std	Z+12, r20	; 0x0c
    31ae:	57 87       	std	Z+15, r21	; 0x0f
    31b0:	46 87       	std	Z+14, r20	; 0x0e
    31b2:	51 8b       	std	Z+17, r21	; 0x11
    31b4:	40 8b       	std	Z+16, r20	; 0x10
    31b6:	c2 01       	movw	r24, r4
    31b8:	b1 01       	movw	r22, r2
    31ba:	4b a5       	ldd	r20, Y+43	; 0x2b
    31bc:	5c a5       	ldd	r21, Y+44	; 0x2c
    31be:	29 89       	ldd	r18, Y+17	; 0x11
    31c0:	3a 89       	ldd	r19, Y+18	; 0x12
    31c2:	09 8d       	ldd	r16, Y+25	; 0x19
    31c4:	1a 8d       	ldd	r17, Y+26	; 0x1a
    31c6:	eb 80       	ldd	r14, Y+3	; 0x03
    31c8:	fc 80       	ldd	r15, Y+4	; 0x04
    31ca:	cb a8       	ldd	r12, Y+51	; 0x33
    31cc:	dc a8       	ldd	r13, Y+52	; 0x34
    31ce:	a9 84       	ldd	r10, Y+9	; 0x09
    31d0:	ba 84       	ldd	r11, Y+10	; 0x0a
    31d2:	e2 e0       	ldi	r30, 0x02	; 2
    31d4:	8e 2e       	mov	r8, r30
    31d6:	91 2c       	mov	r9, r1
    31d8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    31dc:	8d b7       	in	r24, 0x3d	; 61
    31de:	9e b7       	in	r25, 0x3e	; 62
    31e0:	42 96       	adiw	r24, 0x12	; 18
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	9e bf       	out	0x3e, r25	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	8d bf       	out	0x3d, r24	; 61
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    31f4:	94 e2       	ldi	r25, 0x24	; 36
    31f6:	69 16       	cp	r6, r25
    31f8:	71 04       	cpc	r7, r1
    31fa:	21 f0       	breq	.+8      	; 0x3204 <main+0x2ce0>
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    31fc:	08 94       	sec
    31fe:	41 1c       	adc	r4, r1
    3200:	51 1c       	adc	r5, r1
    3202:	a2 cb       	rjmp	.-2236   	; 0x2948 <main+0x2424>
				delay_ms(1);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    3204:	80 91 9e 03 	lds	r24, 0x039E
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    3208:	8b 7d       	andi	r24, 0xDB	; 219
    320a:	80 93 9e 03 	sts	0x039E, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    320e:	80 91 9f 03 	lds	r24, 0x039F
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    3212:	86 7b       	andi	r24, 0xB6	; 182
    3214:	80 93 9f 03 	sts	0x039F, r24
		
		i2c_start(I2C1+I2C_WRITE);
    3218:	80 e4       	ldi	r24, 0x40	; 64
    321a:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>
		i2c_write(0x2);
    321e:	82 e0       	ldi	r24, 0x02	; 2
    3220:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
    3224:	80 91 9e 03 	lds	r24, 0x039E
    3228:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
    322c:	80 91 9f 03 	lds	r24, 0x039F
    3230:	0e 94 b5 19 	call	0x336a	; 0x336a <_Z9i2c_writeh>
		i2c_stop();
    3234:	0e 94 ad 19 	call	0x335a	; 0x335a <_Z8i2c_stopv>
	}
	OrangutanLCD::print("END");
    3238:	81 e9       	ldi	r24, 0x91	; 145
    323a:	93 e0       	ldi	r25, 0x03	; 3
    323c:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
    3240:	0c 94 ad 02 	jmp	0x55a	; 0x55a <main+0x36>
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently

	bool buttonTriggered = false;	//buttonTriggered is false if it hasn't been triggered, true if it has;
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
    
	while(1){						//Repeats the entire program indefinitely (runs maintenance or normal each time)
    3244:	10 e0       	ldi	r17, 0x00	; 0
    3246:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <main+0x2d2>
					print = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
					switched = true;
				}
				if(switched){
    324a:	11 23       	and	r17, r17
    324c:	11 f4       	brne	.+4      	; 0x3252 <main+0x2d2e>
    324e:	0c 94 89 04 	jmp	0x912	; 0x912 <main+0x3ee>
    3252:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <main+0x3b4>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    325c:	88 23       	and	r24, r24
    325e:	11 f0       	breq	.+4      	; 0x3264 <main+0x2d40>
    3260:	0c 94 4b 0c 	jmp	0x1896	; 0x1896 <main+0x1372>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    326a:	88 23       	and	r24, r24
    326c:	11 f4       	brne	.+4      	; 0x3272 <main+0x2d4e>
    326e:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <main+0x1acc>
				counter ++;
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    3278:	88 23       	and	r24, r24
    327a:	21 f2       	breq	.-120    	; 0x3204 <main+0x2ce0>
    327c:	36 cb       	rjmp	.-2452   	; 0x28ea <main+0x23c6>
    327e:	12 01       	movw	r2, r4
    3280:	95 e2       	ldi	r25, 0x25	; 37
    3282:	69 2e       	mov	r6, r25
    3284:	71 2c       	mov	r7, r1
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	a1 cb       	rjmp	.-2238   	; 0x29cc <main+0x24a8>
    328a:	23 96       	adiw	r28, 0x03	; 3
    328c:	3f ae       	std	Y+63, r3	; 0x3f
    328e:	2e ae       	std	Y+62, r2	; 0x3e
    3290:	23 97       	sbiw	r28, 0x03	; 3
    3292:	66 24       	eor	r6, r6
    3294:	77 24       	eor	r7, r7
    3296:	8c e2       	ldi	r24, 0x2C	; 44
    3298:	48 2e       	mov	r4, r24
    329a:	51 2c       	mov	r5, r1
    329c:	0c 94 07 08 	jmp	0x100e	; 0x100e <main+0xaea>

000032a0 <_ZdlPv>:
  return malloc(size); 
} 

void operator delete(void * ptr) 
{ 
  free(ptr); 
    32a0:	0e 94 83 20 	call	0x4106	; 0x4106 <free>
} 
    32a4:	08 95       	ret

000032a6 <_Znwj>:
void * operator new(size_t size); 
void operator delete(void * ptr); 

void * operator new(size_t size) 
{ 
  return malloc(size); 
    32a6:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <malloc>
} 
    32aa:	08 95       	ret

000032ac <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    32ac:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    32b0:	8c e0       	ldi	r24, 0x0C	; 12
    32b2:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    32b6:	08 95       	ret

000032b8 <_Z9i2c_starth>:

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    32b8:	98 2f       	mov	r25, r24
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    32ba:	84 ea       	ldi	r24, 0xA4	; 164
    32bc:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    32c0:	80 91 bc 00 	lds	r24, 0x00BC
    32c4:	87 ff       	sbrs	r24, 7
    32c6:	fc cf       	rjmp	.-8      	; 0x32c0 <_Z9i2c_starth+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    32c8:	80 91 b9 00 	lds	r24, 0x00B9
    32cc:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    32ce:	88 30       	cpi	r24, 0x08	; 8
    32d0:	21 f0       	breq	.+8      	; 0x32da <_Z9i2c_starth+0x22>
    32d2:	80 31       	cpi	r24, 0x10	; 16
    32d4:	11 f0       	breq	.+4      	; 0x32da <_Z9i2c_starth+0x22>
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	08 95       	ret

	// send device address
	TWDR = address;
    32da:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    32de:	84 e8       	ldi	r24, 0x84	; 132
    32e0:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    32e4:	80 91 bc 00 	lds	r24, 0x00BC
    32e8:	87 ff       	sbrs	r24, 7
    32ea:	fc cf       	rjmp	.-8      	; 0x32e4 <_Z9i2c_starth+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    32ec:	90 91 b9 00 	lds	r25, 0x00B9
    32f0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    32f2:	98 31       	cpi	r25, 0x18	; 24
    32f4:	11 f4       	brne	.+4      	; 0x32fa <_Z9i2c_starth+0x42>
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	08 95       	ret
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	90 34       	cpi	r25, 0x40	; 64
    32fe:	09 f0       	breq	.+2      	; 0x3302 <_Z9i2c_starth+0x4a>
    3300:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    3302:	08 95       	ret

00003304 <_Z14i2c_start_waith>:
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
    3304:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3306:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3308:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    330a:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    330c:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3310:	80 91 bc 00 	lds	r24, 0x00BC
    3314:	87 ff       	sbrs	r24, 7
    3316:	fc cf       	rjmp	.-8      	; 0x3310 <_Z14i2c_start_waith+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3318:	80 91 b9 00 	lds	r24, 0x00B9
    331c:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    331e:	88 30       	cpi	r24, 0x08	; 8
    3320:	11 f0       	breq	.+4      	; 0x3326 <_Z14i2c_start_waith+0x22>
    3322:	80 31       	cpi	r24, 0x10	; 16
    3324:	99 f7       	brne	.-26     	; 0x330c <_Z14i2c_start_waith+0x8>
    
    	// send device address
    	TWDR = address;
    3326:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    332a:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    332e:	80 91 bc 00 	lds	r24, 0x00BC
    3332:	87 ff       	sbrs	r24, 7
    3334:	fc cf       	rjmp	.-8      	; 0x332e <_Z14i2c_start_waith+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3336:	80 91 b9 00 	lds	r24, 0x00B9
    333a:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    333c:	80 32       	cpi	r24, 0x20	; 32
    333e:	11 f0       	breq	.+4      	; 0x3344 <_Z14i2c_start_waith+0x40>
    3340:	88 35       	cpi	r24, 0x58	; 88
    3342:	39 f4       	brne	.+14     	; 0x3352 <_Z14i2c_start_waith+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3344:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    3348:	80 91 bc 00 	lds	r24, 0x00BC
    334c:	84 fd       	sbrc	r24, 4
    334e:	fc cf       	rjmp	.-8      	; 0x3348 <_Z14i2c_start_waith+0x44>
    3350:	dd cf       	rjmp	.-70     	; 0x330c <_Z14i2c_start_waith+0x8>
    3352:	08 95       	ret

00003354 <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    3354:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <_Z9i2c_starth>

}/* i2c_rep_start */
    3358:	08 95       	ret

0000335a <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    335a:	84 e9       	ldi	r24, 0x94	; 148
    335c:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3360:	80 91 bc 00 	lds	r24, 0x00BC
    3364:	84 fd       	sbrc	r24, 4
    3366:	fc cf       	rjmp	.-8      	; 0x3360 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    3368:	08 95       	ret

0000336a <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    336a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    336e:	84 e8       	ldi	r24, 0x84	; 132
    3370:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3374:	80 91 bc 00 	lds	r24, 0x00BC
    3378:	87 ff       	sbrs	r24, 7
    337a:	fc cf       	rjmp	.-8      	; 0x3374 <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    337c:	80 91 b9 00 	lds	r24, 0x00B9
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	88 7f       	andi	r24, 0xF8	; 248
    3384:	88 32       	cpi	r24, 0x28	; 40
    3386:	09 f0       	breq	.+2      	; 0x338a <_Z9i2c_writeh+0x20>
    3388:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    338a:	89 2f       	mov	r24, r25
    338c:	08 95       	ret

0000338e <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    338e:	84 ec       	ldi	r24, 0xC4	; 196
    3390:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    3394:	80 91 bc 00 	lds	r24, 0x00BC
    3398:	87 ff       	sbrs	r24, 7
    339a:	fc cf       	rjmp	.-8      	; 0x3394 <_Z11i2c_readAckv+0x6>

    return TWDR;
    339c:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    33a0:	08 95       	ret

000033a2 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    33a2:	84 e8       	ldi	r24, 0x84	; 132
    33a4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    33a8:	80 91 bc 00 	lds	r24, 0x00BC
    33ac:	87 ff       	sbrs	r24, 7
    33ae:	fc cf       	rjmp	.-8      	; 0x33a8 <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    33b0:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    33b4:	08 95       	ret

000033b6 <_ZN12OrangutanLCDC2Ev>:
    33b6:	08 95       	ret

000033b8 <_ZN12OrangutanLCDC1Ev>:
    33b8:	08 95       	ret

000033ba <void_getchar>:
    33ba:	80 e0       	ldi	r24, 0x00	; 0
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	08 95       	ret

000033c0 <_ZN12OrangutanLCD8busyWaitEv>:
    33c0:	ef 92       	push	r14
    33c2:	ff 92       	push	r15
    33c4:	0f 93       	push	r16
    33c6:	1f 93       	push	r17
    33c8:	67 b1       	in	r22, 0x07	; 7
    33ca:	3d 98       	cbi	0x07, 5	; 7
    33cc:	28 98       	cbi	0x05, 0	; 5
    33ce:	29 9a       	sbi	0x05, 1	; 5
    33d0:	e0 90 ac 03 	lds	r14, 0x03AC
    33d4:	f0 90 ad 03 	lds	r15, 0x03AD
    33d8:	00 91 ae 03 	lds	r16, 0x03AE
    33dc:	10 91 af 03 	lds	r17, 0x03AF
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	41 e0       	ldi	r20, 0x01	; 1
    33e6:	50 e0       	ldi	r21, 0x00	; 0
    33e8:	ca 01       	movw	r24, r20
    33ea:	6f 93       	push	r22
    33ec:	64 e0       	ldi	r22, 0x04	; 4
    33ee:	6a 95       	dec	r22
    33f0:	f1 f7       	brne	.-4      	; 0x33ee <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    33f2:	6f 91       	pop	r22
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	c9 f7       	brne	.-14     	; 0x33ea <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    33f8:	2a 9a       	sbi	0x05, 2	; 5
    33fa:	ca 01       	movw	r24, r20
    33fc:	6f 93       	push	r22
    33fe:	64 e0       	ldi	r22, 0x04	; 4
    3400:	6a 95       	dec	r22
    3402:	f1 f7       	brne	.-4      	; 0x3400 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    3404:	6f 91       	pop	r22
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	c9 f7       	brne	.-14     	; 0x33fc <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    340a:	86 b1       	in	r24, 0x06	; 6
    340c:	2a 98       	cbi	0x05, 2	; 5
    340e:	fa 01       	movw	r30, r20
    3410:	6f 93       	push	r22
    3412:	64 e0       	ldi	r22, 0x04	; 4
    3414:	6a 95       	dec	r22
    3416:	f1 f7       	brne	.-4      	; 0x3414 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    3418:	6f 91       	pop	r22
    341a:	31 97       	sbiw	r30, 0x01	; 1
    341c:	c9 f7       	brne	.-14     	; 0x3410 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    341e:	2a 9a       	sbi	0x05, 2	; 5
    3420:	fa 01       	movw	r30, r20
    3422:	6f 93       	push	r22
    3424:	64 e0       	ldi	r22, 0x04	; 4
    3426:	6a 95       	dec	r22
    3428:	f1 f7       	brne	.-4      	; 0x3426 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    342a:	6f 91       	pop	r22
    342c:	31 97       	sbiw	r30, 0x01	; 1
    342e:	c9 f7       	brne	.-14     	; 0x3422 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    3430:	2a 98       	cbi	0x05, 2	; 5
    3432:	2c 5f       	subi	r18, 0xFC	; 252
    3434:	3f 4f       	sbci	r19, 0xFF	; 255
    3436:	85 ff       	sbrs	r24, 5
    3438:	09 c0       	rjmp	.+18     	; 0x344c <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    343a:	c9 01       	movw	r24, r18
    343c:	a0 e0       	ldi	r26, 0x00	; 0
    343e:	b0 e0       	ldi	r27, 0x00	; 0
    3440:	8e 15       	cp	r24, r14
    3442:	9f 05       	cpc	r25, r15
    3444:	a0 07       	cpc	r26, r16
    3446:	b1 07       	cpc	r27, r17
    3448:	08 f4       	brcc	.+2      	; 0x344c <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    344a:	ce cf       	rjmp	.-100    	; 0x33e8 <_ZN12OrangutanLCD8busyWaitEv+0x28>
    344c:	c9 01       	movw	r24, r18
    344e:	a0 e0       	ldi	r26, 0x00	; 0
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	8e 15       	cp	r24, r14
    3454:	9f 05       	cpc	r25, r15
    3456:	a0 07       	cpc	r26, r16
    3458:	b1 07       	cpc	r27, r17
    345a:	28 f0       	brcs	.+10     	; 0x3466 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    345c:	82 e3       	ldi	r24, 0x32	; 50
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	a0 e0       	ldi	r26, 0x00	; 0
    3462:	b0 e0       	ldi	r27, 0x00	; 0
    3464:	04 c0       	rjmp	.+8      	; 0x346e <_ZN12OrangutanLCD8busyWaitEv+0xae>
    3466:	80 e3       	ldi	r24, 0x30	; 48
    3468:	95 e7       	ldi	r25, 0x75	; 117
    346a:	a0 e0       	ldi	r26, 0x00	; 0
    346c:	b0 e0       	ldi	r27, 0x00	; 0
    346e:	80 93 ac 03 	sts	0x03AC, r24
    3472:	90 93 ad 03 	sts	0x03AD, r25
    3476:	a0 93 ae 03 	sts	0x03AE, r26
    347a:	b0 93 af 03 	sts	0x03AF, r27
    347e:	67 b9       	out	0x07, r22	; 7
    3480:	1f 91       	pop	r17
    3482:	0f 91       	pop	r16
    3484:	ff 90       	pop	r15
    3486:	ef 90       	pop	r14
    3488:	08 95       	ret

0000348a <_ZN12OrangutanLCD8sendDataEh>:
    348a:	28 b1       	in	r18, 0x08	; 8
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	8f 70       	andi	r24, 0x0F	; 15
    3490:	90 70       	andi	r25, 0x00	; 0
    3492:	88 0f       	add	r24, r24
    3494:	99 1f       	adc	r25, r25
    3496:	88 0f       	add	r24, r24
    3498:	99 1f       	adc	r25, r25
    349a:	23 7c       	andi	r18, 0xC3	; 195
    349c:	28 2b       	or	r18, r24
    349e:	28 b9       	out	0x08, r18	; 8
    34a0:	2a 9a       	sbi	0x05, 2	; 5
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	fc 01       	movw	r30, r24
    34a8:	6f 93       	push	r22
    34aa:	64 e0       	ldi	r22, 0x04	; 4
    34ac:	6a 95       	dec	r22
    34ae:	f1 f7       	brne	.-4      	; 0x34ac <_ZN12OrangutanLCD8sendDataEh+0x22>
    34b0:	6f 91       	pop	r22
    34b2:	31 97       	sbiw	r30, 0x01	; 1
    34b4:	c9 f7       	brne	.-14     	; 0x34a8 <_ZN12OrangutanLCD8sendDataEh+0x1e>
    34b6:	2a 98       	cbi	0x05, 2	; 5
    34b8:	6f 93       	push	r22
    34ba:	64 e0       	ldi	r22, 0x04	; 4
    34bc:	6a 95       	dec	r22
    34be:	f1 f7       	brne	.-4      	; 0x34bc <_ZN12OrangutanLCD8sendDataEh+0x32>
    34c0:	6f 91       	pop	r22
    34c2:	01 97       	sbiw	r24, 0x01	; 1
    34c4:	c9 f7       	brne	.-14     	; 0x34b8 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    34c6:	08 95       	ret

000034c8 <_ZN12OrangutanLCD10initPrintfEv>:
    34c8:	80 91 a8 03 	lds	r24, 0x03A8
    34cc:	90 91 a9 03 	lds	r25, 0x03A9
    34d0:	00 97       	sbiw	r24, 0x00	; 0
    34d2:	11 f0       	breq	.+4      	; 0x34d8 <_ZN12OrangutanLCD10initPrintfEv+0x10>
    34d4:	0e 94 83 20 	call	0x4106	; 0x4106 <free>
    34d8:	80 91 95 03 	lds	r24, 0x0395
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	01 97       	sbiw	r24, 0x01	; 1
    34e0:	20 91 96 03 	lds	r18, 0x0396
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	ac 01       	movw	r20, r24
    34e8:	42 9f       	mul	r20, r18
    34ea:	c0 01       	movw	r24, r0
    34ec:	43 9f       	mul	r20, r19
    34ee:	90 0d       	add	r25, r0
    34f0:	52 9f       	mul	r21, r18
    34f2:	90 0d       	add	r25, r0
    34f4:	11 24       	eor	r1, r1
    34f6:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <malloc>
    34fa:	90 93 a9 03 	sts	0x03A9, r25
    34fe:	80 93 a8 03 	sts	0x03A8, r24
    3502:	00 97       	sbiw	r24, 0x00	; 0
    3504:	29 f1       	breq	.+74     	; 0x3550 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    3506:	60 e0       	ldi	r22, 0x00	; 0
    3508:	70 e2       	ldi	r23, 0x20	; 32
    350a:	08 c0       	rjmp	.+16     	; 0x351c <_ZN12OrangutanLCD10initPrintfEv+0x54>
    350c:	e0 91 a8 03 	lds	r30, 0x03A8
    3510:	f0 91 a9 03 	lds	r31, 0x03A9
    3514:	e4 0f       	add	r30, r20
    3516:	f5 1f       	adc	r31, r21
    3518:	70 83       	st	Z, r23
    351a:	6f 5f       	subi	r22, 0xFF	; 255
    351c:	46 2f       	mov	r20, r22
    351e:	50 e0       	ldi	r21, 0x00	; 0
    3520:	80 91 95 03 	lds	r24, 0x0395
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	01 97       	sbiw	r24, 0x01	; 1
    3528:	20 91 96 03 	lds	r18, 0x0396
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	fc 01       	movw	r30, r24
    3530:	e2 9f       	mul	r30, r18
    3532:	c0 01       	movw	r24, r0
    3534:	e3 9f       	mul	r30, r19
    3536:	90 0d       	add	r25, r0
    3538:	f2 9f       	mul	r31, r18
    353a:	90 0d       	add	r25, r0
    353c:	11 24       	eor	r1, r1
    353e:	48 17       	cp	r20, r24
    3540:	59 07       	cpc	r21, r25
    3542:	24 f3       	brlt	.-56     	; 0x350c <_ZN12OrangutanLCD10initPrintfEv+0x44>
    3544:	89 ec       	ldi	r24, 0xC9	; 201
    3546:	9c e1       	ldi	r25, 0x1C	; 28
    3548:	6d ed       	ldi	r22, 0xDD	; 221
    354a:	79 e1       	ldi	r23, 0x19	; 25
    354c:	0e 94 db 20 	call	0x41b6	; 0x41b6 <fdevopen>
    3550:	08 95       	ret

00003552 <_ZN12OrangutanLCD10initPrintfEhh>:
    3552:	80 93 96 03 	sts	0x0396, r24
    3556:	60 93 95 03 	sts	0x0395, r22
    355a:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <_ZN12OrangutanLCD10initPrintfEv>
    355e:	08 95       	ret

00003560 <lcd_init_printf_with_dimensions>:
    3560:	80 93 96 03 	sts	0x0396, r24
    3564:	60 93 95 03 	sts	0x0395, r22
    3568:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <_ZN12OrangutanLCD10initPrintfEv>
    356c:	08 95       	ret

0000356e <lcd_init_printf>:
    356e:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <_ZN12OrangutanLCD10initPrintfEv>
    3572:	08 95       	ret

00003574 <_ZN12OrangutanLCD5init2Ev>:
    3574:	3d 98       	cbi	0x07, 5	; 7
    3576:	45 9a       	sbi	0x08, 5	; 8
    3578:	80 e3       	ldi	r24, 0x30	; 48
    357a:	95 e7       	ldi	r25, 0x75	; 117
    357c:	a0 e0       	ldi	r26, 0x00	; 0
    357e:	b0 e0       	ldi	r27, 0x00	; 0
    3580:	80 93 ac 03 	sts	0x03AC, r24
    3584:	90 93 ad 03 	sts	0x03AD, r25
    3588:	a0 93 ae 03 	sts	0x03AE, r26
    358c:	b0 93 af 03 	sts	0x03AF, r27
    3590:	20 9a       	sbi	0x04, 0	; 4
    3592:	21 9a       	sbi	0x04, 1	; 4
    3594:	22 9a       	sbi	0x04, 2	; 4
    3596:	8e e1       	ldi	r24, 0x1E	; 30
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
    359e:	83 e0       	ldi	r24, 0x03	; 3
    35a0:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    35a4:	86 e0       	ldi	r24, 0x06	; 6
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
    35ac:	83 e0       	ldi	r24, 0x03	; 3
    35ae:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    35b2:	82 e0       	ldi	r24, 0x02	; 2
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
    35ba:	83 e0       	ldi	r24, 0x03	; 3
    35bc:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    35c0:	82 e0       	ldi	r24, 0x02	; 2
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
    35c8:	82 e0       	ldi	r24, 0x02	; 2
    35ca:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    35ce:	82 e0       	ldi	r24, 0x02	; 2
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
    35d6:	88 e2       	ldi	r24, 0x28	; 40
    35d8:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <_ZN12OrangutanLCD8send_cmdEh>
    35dc:	88 e0       	ldi	r24, 0x08	; 8
    35de:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <_ZN12OrangutanLCD8send_cmdEh>
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <_ZN12OrangutanLCD8send_cmdEh>
    35e8:	86 e0       	ldi	r24, 0x06	; 6
    35ea:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <_ZN12OrangutanLCD8send_cmdEh>
    35ee:	8c e0       	ldi	r24, 0x0C	; 12
    35f0:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <_ZN12OrangutanLCD8send_cmdEh>
    35f4:	08 95       	ret

000035f6 <_ZN12OrangutanLCD4initEv>:
    35f6:	80 91 b0 03 	lds	r24, 0x03B0
    35fa:	88 23       	and	r24, r24
    35fc:	29 f4       	brne	.+10     	; 0x3608 <_ZN12OrangutanLCD4initEv+0x12>
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	80 93 b0 03 	sts	0x03B0, r24
    3604:	0e 94 ba 1a 	call	0x3574	; 0x3574 <_ZN12OrangutanLCD5init2Ev>
    3608:	08 95       	ret

0000360a <_ZN12OrangutanLCD4sendEhhh>:
    360a:	ff 92       	push	r15
    360c:	0f 93       	push	r16
    360e:	1f 93       	push	r17
    3610:	08 2f       	mov	r16, r24
    3612:	16 2f       	mov	r17, r22
    3614:	f4 2e       	mov	r15, r20
    3616:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <_ZN12OrangutanLCD4initEv>
    361a:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZN12OrangutanLCD8busyWaitEv>
    361e:	37 b1       	in	r19, 0x07	; 7
    3620:	28 b1       	in	r18, 0x08	; 8
    3622:	29 98       	cbi	0x05, 1	; 5
    3624:	11 23       	and	r17, r17
    3626:	11 f0       	breq	.+4      	; 0x362c <_ZN12OrangutanLCD4sendEhhh+0x22>
    3628:	28 9a       	sbi	0x05, 0	; 5
    362a:	01 c0       	rjmp	.+2      	; 0x362e <_ZN12OrangutanLCD4sendEhhh+0x24>
    362c:	28 98       	cbi	0x05, 0	; 5
    362e:	87 b1       	in	r24, 0x07	; 7
    3630:	8c 63       	ori	r24, 0x3C	; 60
    3632:	87 b9       	out	0x07, r24	; 7
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	f8 16       	cp	r15, r24
    3638:	e1 f0       	breq	.+56     	; 0x3672 <_ZN12OrangutanLCD4sendEhhh+0x68>
    363a:	88 b1       	in	r24, 0x08	; 8
    363c:	90 2f       	mov	r25, r16
    363e:	92 95       	swap	r25
    3640:	9f 70       	andi	r25, 0x0F	; 15
    3642:	99 0f       	add	r25, r25
    3644:	99 0f       	add	r25, r25
    3646:	83 7c       	andi	r24, 0xC3	; 195
    3648:	98 2b       	or	r25, r24
    364a:	98 b9       	out	0x08, r25	; 8
    364c:	2a 9a       	sbi	0x05, 2	; 5
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	fc 01       	movw	r30, r24
    3654:	6f 93       	push	r22
    3656:	64 e0       	ldi	r22, 0x04	; 4
    3658:	6a 95       	dec	r22
    365a:	f1 f7       	brne	.-4      	; 0x3658 <_ZN12OrangutanLCD4sendEhhh+0x4e>
    365c:	6f 91       	pop	r22
    365e:	31 97       	sbiw	r30, 0x01	; 1
    3660:	c9 f7       	brne	.-14     	; 0x3654 <_ZN12OrangutanLCD4sendEhhh+0x4a>
    3662:	2a 98       	cbi	0x05, 2	; 5
    3664:	6f 93       	push	r22
    3666:	64 e0       	ldi	r22, 0x04	; 4
    3668:	6a 95       	dec	r22
    366a:	f1 f7       	brne	.-4      	; 0x3668 <_ZN12OrangutanLCD4sendEhhh+0x5e>
    366c:	6f 91       	pop	r22
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	c9 f7       	brne	.-14     	; 0x3664 <_ZN12OrangutanLCD4sendEhhh+0x5a>
    3672:	88 b1       	in	r24, 0x08	; 8
    3674:	0f 70       	andi	r16, 0x0F	; 15
    3676:	00 0f       	add	r16, r16
    3678:	00 0f       	add	r16, r16
    367a:	83 7c       	andi	r24, 0xC3	; 195
    367c:	80 2b       	or	r24, r16
    367e:	88 b9       	out	0x08, r24	; 8
    3680:	2a 9a       	sbi	0x05, 2	; 5
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	fc 01       	movw	r30, r24
    3688:	6f 93       	push	r22
    368a:	64 e0       	ldi	r22, 0x04	; 4
    368c:	6a 95       	dec	r22
    368e:	f1 f7       	brne	.-4      	; 0x368c <_ZN12OrangutanLCD4sendEhhh+0x82>
    3690:	6f 91       	pop	r22
    3692:	31 97       	sbiw	r30, 0x01	; 1
    3694:	c9 f7       	brne	.-14     	; 0x3688 <_ZN12OrangutanLCD4sendEhhh+0x7e>
    3696:	2a 98       	cbi	0x05, 2	; 5
    3698:	6f 93       	push	r22
    369a:	64 e0       	ldi	r22, 0x04	; 4
    369c:	6a 95       	dec	r22
    369e:	f1 f7       	brne	.-4      	; 0x369c <_ZN12OrangutanLCD4sendEhhh+0x92>
    36a0:	6f 91       	pop	r22
    36a2:	01 97       	sbiw	r24, 0x01	; 1
    36a4:	c9 f7       	brne	.-14     	; 0x3698 <_ZN12OrangutanLCD4sendEhhh+0x8e>
    36a6:	37 b9       	out	0x07, r19	; 7
    36a8:	28 b9       	out	0x08, r18	; 8
    36aa:	1f 91       	pop	r17
    36ac:	0f 91       	pop	r16
    36ae:	ff 90       	pop	r15
    36b0:	08 95       	ret

000036b2 <_ZN12OrangutanLCD8send_cmdEh>:
    36b2:	60 e0       	ldi	r22, 0x00	; 0
    36b4:	42 e0       	ldi	r20, 0x02	; 2
    36b6:	0e 94 05 1b 	call	0x360a	; 0x360a <_ZN12OrangutanLCD4sendEhhh>
    36ba:	08 95       	ret

000036bc <_ZN12OrangutanLCD10moveCursorEhh>:
    36bc:	0f 93       	push	r16
    36be:	1f 93       	push	r17
    36c0:	08 2f       	mov	r16, r24
    36c2:	16 2f       	mov	r17, r22
    36c4:	08 c0       	rjmp	.+16     	; 0x36d6 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    36c6:	00 23       	and	r16, r16
    36c8:	11 f4       	brne	.+4      	; 0x36ce <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    36ca:	80 e1       	ldi	r24, 0x10	; 16
    36cc:	01 c0       	rjmp	.+2      	; 0x36d0 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    36ce:	84 e1       	ldi	r24, 0x14	; 20
    36d0:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <_ZN12OrangutanLCD8send_cmdEh>
    36d4:	11 50       	subi	r17, 0x01	; 1
    36d6:	11 23       	and	r17, r17
    36d8:	b1 f7       	brne	.-20     	; 0x36c6 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    36da:	1f 91       	pop	r17
    36dc:	0f 91       	pop	r16
    36de:	08 95       	ret

000036e0 <lcd_move_cursor>:
    36e0:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <_ZN12OrangutanLCD10moveCursorEhh>
    36e4:	08 95       	ret

000036e6 <_ZN12OrangutanLCD10hideCursorEv>:
    36e6:	8c e0       	ldi	r24, 0x0C	; 12
    36e8:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <_ZN12OrangutanLCD8send_cmdEh>
    36ec:	08 95       	ret

000036ee <lcd_hide_cursor>:
    36ee:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_ZN12OrangutanLCD10hideCursorEv>
    36f2:	08 95       	ret

000036f4 <_ZN12OrangutanLCD10showCursorEh>:
    36f4:	81 30       	cpi	r24, 0x01	; 1
    36f6:	11 f4       	brne	.+4      	; 0x36fc <_ZN12OrangutanLCD10showCursorEh+0x8>
    36f8:	8f e0       	ldi	r24, 0x0F	; 15
    36fa:	01 c0       	rjmp	.+2      	; 0x36fe <_ZN12OrangutanLCD10showCursorEh+0xa>
    36fc:	8e e0       	ldi	r24, 0x0E	; 14
    36fe:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <_ZN12OrangutanLCD8send_cmdEh>
    3702:	08 95       	ret

00003704 <lcd_show_cursor>:
    3704:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD10showCursorEh>
    3708:	08 95       	ret

0000370a <_ZN12OrangutanLCD6gotoXYEhh>:
    370a:	a4 e0       	ldi	r26, 0x04	; 4
    370c:	b0 e0       	ldi	r27, 0x00	; 0
    370e:	eb e8       	ldi	r30, 0x8B	; 139
    3710:	fb e1       	ldi	r31, 0x1B	; 27
    3712:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__prologue_saves__+0x1c>
    3716:	18 2f       	mov	r17, r24
    3718:	06 2f       	mov	r16, r22
    371a:	80 e8       	ldi	r24, 0x80	; 128
    371c:	89 83       	std	Y+1, r24	; 0x01
    371e:	80 ec       	ldi	r24, 0xC0	; 192
    3720:	8a 83       	std	Y+2, r24	; 0x02
    3722:	84 e9       	ldi	r24, 0x94	; 148
    3724:	8b 83       	std	Y+3, r24	; 0x03
    3726:	84 ed       	ldi	r24, 0xD4	; 212
    3728:	8c 83       	std	Y+4, r24	; 0x04
    372a:	fe 01       	movw	r30, r28
    372c:	e6 0f       	add	r30, r22
    372e:	f1 1d       	adc	r31, r1
    3730:	81 81       	ldd	r24, Z+1	; 0x01
    3732:	81 0f       	add	r24, r17
    3734:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <_ZN12OrangutanLCD8send_cmdEh>
    3738:	10 93 ab 03 	sts	0x03AB, r17
    373c:	00 93 aa 03 	sts	0x03AA, r16
    3740:	24 96       	adiw	r28, 0x04	; 4
    3742:	e4 e0       	ldi	r30, 0x04	; 4
    3744:	0c 94 b5 1f 	jmp	0x3f6a	; 0x3f6a <__epilogue_restores__+0x1c>

00003748 <lcd_goto_xy>:
    3748:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
    374c:	08 95       	ret

0000374e <_ZN12OrangutanLCD5clearEv>:
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <_ZN12OrangutanLCD8send_cmdEh>
    3754:	80 91 a8 03 	lds	r24, 0x03A8
    3758:	90 91 a9 03 	lds	r25, 0x03A9
    375c:	89 2b       	or	r24, r25
    375e:	19 f1       	breq	.+70     	; 0x37a6 <_ZN12OrangutanLCD5clearEv+0x58>
    3760:	60 e0       	ldi	r22, 0x00	; 0
    3762:	70 e2       	ldi	r23, 0x20	; 32
    3764:	08 c0       	rjmp	.+16     	; 0x3776 <_ZN12OrangutanLCD5clearEv+0x28>
    3766:	e0 91 a8 03 	lds	r30, 0x03A8
    376a:	f0 91 a9 03 	lds	r31, 0x03A9
    376e:	e4 0f       	add	r30, r20
    3770:	f5 1f       	adc	r31, r21
    3772:	70 83       	st	Z, r23
    3774:	6f 5f       	subi	r22, 0xFF	; 255
    3776:	46 2f       	mov	r20, r22
    3778:	50 e0       	ldi	r21, 0x00	; 0
    377a:	80 91 95 03 	lds	r24, 0x0395
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	20 91 96 03 	lds	r18, 0x0396
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	fc 01       	movw	r30, r24
    378a:	e2 9f       	mul	r30, r18
    378c:	c0 01       	movw	r24, r0
    378e:	e3 9f       	mul	r30, r19
    3790:	90 0d       	add	r25, r0
    3792:	f2 9f       	mul	r31, r18
    3794:	90 0d       	add	r25, r0
    3796:	11 24       	eor	r1, r1
    3798:	48 17       	cp	r20, r24
    379a:	59 07       	cpc	r21, r25
    379c:	24 f3       	brlt	.-56     	; 0x3766 <_ZN12OrangutanLCD5clearEv+0x18>
    379e:	10 92 ab 03 	sts	0x03AB, r1
    37a2:	10 92 aa 03 	sts	0x03AA, r1
    37a6:	08 95       	ret

000037a8 <clear>:
    37a8:	0e 94 a7 1b 	call	0x374e	; 0x374e <_ZN12OrangutanLCD5clearEv>
    37ac:	08 95       	ret

000037ae <_ZN12OrangutanLCD9send_dataEh>:
    37ae:	61 e0       	ldi	r22, 0x01	; 1
    37b0:	42 e0       	ldi	r20, 0x02	; 2
    37b2:	0e 94 05 1b 	call	0x360a	; 0x360a <_ZN12OrangutanLCD4sendEhhh>
    37b6:	08 95       	ret

000037b8 <_ZN12OrangutanLCD11printBinaryEh>:
    37b8:	0f 93       	push	r16
    37ba:	1f 93       	push	r17
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
    37c0:	00 e0       	ldi	r16, 0x00	; 0
    37c2:	10 e8       	ldi	r17, 0x80	; 128
    37c4:	c8 2f       	mov	r28, r24
    37c6:	d0 e0       	ldi	r29, 0x00	; 0
    37c8:	81 2f       	mov	r24, r17
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	8c 23       	and	r24, r28
    37ce:	9d 23       	and	r25, r29
    37d0:	89 2b       	or	r24, r25
    37d2:	11 f0       	breq	.+4      	; 0x37d8 <_ZN12OrangutanLCD11printBinaryEh+0x20>
    37d4:	81 e3       	ldi	r24, 0x31	; 49
    37d6:	01 c0       	rjmp	.+2      	; 0x37da <_ZN12OrangutanLCD11printBinaryEh+0x22>
    37d8:	80 e3       	ldi	r24, 0x30	; 48
    37da:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD9send_dataEh>
    37de:	0f 5f       	subi	r16, 0xFF	; 255
    37e0:	08 30       	cpi	r16, 0x08	; 8
    37e2:	11 f0       	breq	.+4      	; 0x37e8 <_ZN12OrangutanLCD11printBinaryEh+0x30>
    37e4:	16 95       	lsr	r17
    37e6:	f0 cf       	rjmp	.-32     	; 0x37c8 <_ZN12OrangutanLCD11printBinaryEh+0x10>
    37e8:	df 91       	pop	r29
    37ea:	cf 91       	pop	r28
    37ec:	1f 91       	pop	r17
    37ee:	0f 91       	pop	r16
    37f0:	08 95       	ret

000037f2 <print_binary>:
    37f2:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <_ZN12OrangutanLCD11printBinaryEh>
    37f6:	08 95       	ret

000037f8 <_ZN12OrangutanLCD14printHexNibbleEh>:
    37f8:	8a 30       	cpi	r24, 0x0A	; 10
    37fa:	10 f4       	brcc	.+4      	; 0x3800 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    37fc:	80 5d       	subi	r24, 0xD0	; 208
    37fe:	01 c0       	rjmp	.+2      	; 0x3802 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    3800:	89 5c       	subi	r24, 0xC9	; 201
    3802:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD9send_dataEh>
    3806:	08 95       	ret

00003808 <_ZN12OrangutanLCD8printHexEh>:
    3808:	1f 93       	push	r17
    380a:	18 2f       	mov	r17, r24
    380c:	82 95       	swap	r24
    380e:	8f 70       	andi	r24, 0x0F	; 15
    3810:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <_ZN12OrangutanLCD14printHexNibbleEh>
    3814:	81 2f       	mov	r24, r17
    3816:	8f 70       	andi	r24, 0x0F	; 15
    3818:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <_ZN12OrangutanLCD14printHexNibbleEh>
    381c:	1f 91       	pop	r17
    381e:	08 95       	ret

00003820 <_ZN12OrangutanLCD8printHexEj>:
    3820:	1f 93       	push	r17
    3822:	18 2f       	mov	r17, r24
    3824:	89 2f       	mov	r24, r25
    3826:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN12OrangutanLCD8printHexEh>
    382a:	81 2f       	mov	r24, r17
    382c:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN12OrangutanLCD8printHexEh>
    3830:	1f 91       	pop	r17
    3832:	08 95       	ret

00003834 <print_hex>:
    3834:	0e 94 10 1c 	call	0x3820	; 0x3820 <_ZN12OrangutanLCD8printHexEj>
    3838:	08 95       	ret

0000383a <print_hex_byte>:
    383a:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN12OrangutanLCD8printHexEh>
    383e:	08 95       	ret

00003840 <_ZN12OrangutanLCD5printEm>:
    3840:	6f 92       	push	r6
    3842:	7f 92       	push	r7
    3844:	8f 92       	push	r8
    3846:	9f 92       	push	r9
    3848:	af 92       	push	r10
    384a:	bf 92       	push	r11
    384c:	cf 92       	push	r12
    384e:	df 92       	push	r13
    3850:	ff 92       	push	r15
    3852:	0f 93       	push	r16
    3854:	df 93       	push	r29
    3856:	cf 93       	push	r28
    3858:	cd b7       	in	r28, 0x3d	; 61
    385a:	de b7       	in	r29, 0x3e	; 62
    385c:	2a 97       	sbiw	r28, 0x0a	; 10
    385e:	0f b6       	in	r0, 0x3f	; 63
    3860:	f8 94       	cli
    3862:	de bf       	out	0x3e, r29	; 62
    3864:	0f be       	out	0x3f, r0	; 63
    3866:	cd bf       	out	0x3d, r28	; 61
    3868:	5b 01       	movw	r10, r22
    386a:	6c 01       	movw	r12, r24
    386c:	0a e0       	ldi	r16, 0x0A	; 10
    386e:	3e 01       	movw	r6, r28
    3870:	08 94       	sec
    3872:	61 1c       	adc	r6, r1
    3874:	71 1c       	adc	r7, r1
    3876:	fa 2c       	mov	r15, r10
    3878:	c6 01       	movw	r24, r12
    387a:	b5 01       	movw	r22, r10
    387c:	2a e0       	ldi	r18, 0x0A	; 10
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	40 e0       	ldi	r20, 0x00	; 0
    3882:	50 e0       	ldi	r21, 0x00	; 0
    3884:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <__udivmodsi4>
    3888:	c9 01       	movw	r24, r18
    388a:	da 01       	movw	r26, r20
    388c:	5c 01       	movw	r10, r24
    388e:	6d 01       	movw	r12, r26
    3890:	01 50       	subi	r16, 0x01	; 1
    3892:	43 01       	movw	r8, r6
    3894:	80 0e       	add	r8, r16
    3896:	91 1c       	adc	r9, r1
    3898:	80 e3       	ldi	r24, 0x30	; 48
    389a:	f8 0e       	add	r15, r24
    389c:	c6 01       	movw	r24, r12
    389e:	b5 01       	movw	r22, r10
    38a0:	2a e0       	ldi	r18, 0x0A	; 10
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	40 e0       	ldi	r20, 0x00	; 0
    38a6:	50 e0       	ldi	r21, 0x00	; 0
    38a8:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <__mulsi3>
    38ac:	f6 1a       	sub	r15, r22
    38ae:	f4 01       	movw	r30, r8
    38b0:	f0 82       	st	Z, r15
    38b2:	a1 14       	cp	r10, r1
    38b4:	b1 04       	cpc	r11, r1
    38b6:	c1 04       	cpc	r12, r1
    38b8:	d1 04       	cpc	r13, r1
    38ba:	e9 f6       	brne	.-70     	; 0x3876 <_ZN12OrangutanLCD5printEm+0x36>
    38bc:	08 c0       	rjmp	.+16     	; 0x38ce <_ZN12OrangutanLCD5printEm+0x8e>
    38be:	f6 01       	movw	r30, r12
    38c0:	e0 0f       	add	r30, r16
    38c2:	f1 1d       	adc	r31, r1
    38c4:	80 81       	ld	r24, Z
    38c6:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD9send_dataEh>
    38ca:	0f 5f       	subi	r16, 0xFF	; 255
    38cc:	04 c0       	rjmp	.+8      	; 0x38d6 <_ZN12OrangutanLCD5printEm+0x96>
    38ce:	6e 01       	movw	r12, r28
    38d0:	08 94       	sec
    38d2:	c1 1c       	adc	r12, r1
    38d4:	d1 1c       	adc	r13, r1
    38d6:	0a 30       	cpi	r16, 0x0A	; 10
    38d8:	90 f3       	brcs	.-28     	; 0x38be <_ZN12OrangutanLCD5printEm+0x7e>
    38da:	2a 96       	adiw	r28, 0x0a	; 10
    38dc:	0f b6       	in	r0, 0x3f	; 63
    38de:	f8 94       	cli
    38e0:	de bf       	out	0x3e, r29	; 62
    38e2:	0f be       	out	0x3f, r0	; 63
    38e4:	cd bf       	out	0x3d, r28	; 61
    38e6:	cf 91       	pop	r28
    38e8:	df 91       	pop	r29
    38ea:	0f 91       	pop	r16
    38ec:	ff 90       	pop	r15
    38ee:	df 90       	pop	r13
    38f0:	cf 90       	pop	r12
    38f2:	bf 90       	pop	r11
    38f4:	af 90       	pop	r10
    38f6:	9f 90       	pop	r9
    38f8:	8f 90       	pop	r8
    38fa:	7f 90       	pop	r7
    38fc:	6f 90       	pop	r6
    38fe:	08 95       	ret

00003900 <print_unsigned_long>:
    3900:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN12OrangutanLCD5printEm>
    3904:	08 95       	ret

00003906 <_ZN12OrangutanLCD5printEl>:
    3906:	ef 92       	push	r14
    3908:	ff 92       	push	r15
    390a:	0f 93       	push	r16
    390c:	1f 93       	push	r17
    390e:	7b 01       	movw	r14, r22
    3910:	8c 01       	movw	r16, r24
    3912:	97 ff       	sbrs	r25, 7
    3914:	0b c0       	rjmp	.+22     	; 0x392c <_ZN12OrangutanLCD5printEl+0x26>
    3916:	10 95       	com	r17
    3918:	00 95       	com	r16
    391a:	f0 94       	com	r15
    391c:	e0 94       	com	r14
    391e:	e1 1c       	adc	r14, r1
    3920:	f1 1c       	adc	r15, r1
    3922:	01 1d       	adc	r16, r1
    3924:	11 1d       	adc	r17, r1
    3926:	8d e2       	ldi	r24, 0x2D	; 45
    3928:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD9send_dataEh>
    392c:	c8 01       	movw	r24, r16
    392e:	b7 01       	movw	r22, r14
    3930:	0e 94 20 1c 	call	0x3840	; 0x3840 <_ZN12OrangutanLCD5printEm>
    3934:	1f 91       	pop	r17
    3936:	0f 91       	pop	r16
    3938:	ff 90       	pop	r15
    393a:	ef 90       	pop	r14
    393c:	08 95       	ret

0000393e <print_long>:
    393e:	0e 94 83 1c 	call	0x3906	; 0x3906 <_ZN12OrangutanLCD5printEl>
    3942:	08 95       	ret

00003944 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    3944:	cf 93       	push	r28
    3946:	df 93       	push	r29
    3948:	ec 01       	movw	r28, r24
    394a:	03 c0       	rjmp	.+6      	; 0x3952 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    394c:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD9send_dataEh>
    3950:	21 96       	adiw	r28, 0x01	; 1
    3952:	fe 01       	movw	r30, r28
    3954:	84 91       	lpm	r24, Z+
    3956:	88 23       	and	r24, r24
    3958:	c9 f7       	brne	.-14     	; 0x394c <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    395a:	df 91       	pop	r29
    395c:	cf 91       	pop	r28
    395e:	08 95       	ret

00003960 <print_from_program_space>:
    3960:	0e 94 a2 1c 	call	0x3944	; 0x3944 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    3964:	08 95       	ret

00003966 <_ZN12OrangutanLCD5printEPKc>:
    3966:	cf 93       	push	r28
    3968:	df 93       	push	r29
    396a:	ec 01       	movw	r28, r24
    396c:	03 c0       	rjmp	.+6      	; 0x3974 <_ZN12OrangutanLCD5printEPKc+0xe>
    396e:	21 96       	adiw	r28, 0x01	; 1
    3970:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD9send_dataEh>
    3974:	88 81       	ld	r24, Y
    3976:	88 23       	and	r24, r24
    3978:	d1 f7       	brne	.-12     	; 0x396e <_ZN12OrangutanLCD5printEPKc+0x8>
    397a:	df 91       	pop	r29
    397c:	cf 91       	pop	r28
    397e:	08 95       	ret

00003980 <print>:
    3980:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN12OrangutanLCD5printEPKc>
    3984:	08 95       	ret

00003986 <_ZN12OrangutanLCD5printEc>:
    3986:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD9send_dataEh>
    398a:	08 95       	ret

0000398c <print_character>:
    398c:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD9send_dataEh>
    3990:	08 95       	ret

00003992 <lcd_putchar>:
    3992:	a0 e0       	ldi	r26, 0x00	; 0
    3994:	b0 e0       	ldi	r27, 0x00	; 0
    3996:	ef ec       	ldi	r30, 0xCF	; 207
    3998:	fc e1       	ldi	r31, 0x1C	; 28
    399a:	0c 94 95 1f 	jmp	0x3f2a	; 0x3f2a <__prologue_saves__+0x14>
    399e:	e8 2e       	mov	r14, r24
    39a0:	80 91 a8 03 	lds	r24, 0x03A8
    39a4:	90 91 a9 03 	lds	r25, 0x03A9
    39a8:	89 2b       	or	r24, r25
    39aa:	09 f4       	brne	.+2      	; 0x39ae <lcd_putchar+0x1c>
    39ac:	05 c1       	rjmp	.+522    	; 0x3bb8 <lcd_putchar+0x226>
    39ae:	2a e0       	ldi	r18, 0x0A	; 10
    39b0:	e2 16       	cp	r14, r18
    39b2:	09 f4       	brne	.+2      	; 0x39b6 <lcd_putchar+0x24>
    39b4:	46 c0       	rjmp	.+140    	; 0x3a42 <lcd_putchar+0xb0>
    39b6:	38 e0       	ldi	r19, 0x08	; 8
    39b8:	e3 16       	cp	r14, r19
    39ba:	c9 f4       	brne	.+50     	; 0x39ee <lcd_putchar+0x5c>
    39bc:	80 91 ab 03 	lds	r24, 0x03AB
    39c0:	81 50       	subi	r24, 0x01	; 1
    39c2:	80 93 ab 03 	sts	0x03AB, r24
    39c6:	8f 3f       	cpi	r24, 0xFF	; 255
    39c8:	51 f4       	brne	.+20     	; 0x39de <lcd_putchar+0x4c>
    39ca:	80 91 aa 03 	lds	r24, 0x03AA
    39ce:	81 50       	subi	r24, 0x01	; 1
    39d0:	80 93 aa 03 	sts	0x03AA, r24
    39d4:	80 91 96 03 	lds	r24, 0x0396
    39d8:	81 50       	subi	r24, 0x01	; 1
    39da:	80 93 ab 03 	sts	0x03AB, r24
    39de:	80 91 aa 03 	lds	r24, 0x03AA
    39e2:	8f 3f       	cpi	r24, 0xFF	; 255
    39e4:	09 f0       	breq	.+2      	; 0x39e8 <lcd_putchar+0x56>
    39e6:	e2 c0       	rjmp	.+452    	; 0x3bac <lcd_putchar+0x21a>
    39e8:	10 92 aa 03 	sts	0x03AA, r1
    39ec:	dd c0       	rjmp	.+442    	; 0x3ba8 <lcd_putchar+0x216>
    39ee:	8e 2d       	mov	r24, r14
    39f0:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD9send_dataEh>
    39f4:	20 91 aa 03 	lds	r18, 0x03AA
    39f8:	22 23       	and	r18, r18
    39fa:	c9 f0       	breq	.+50     	; 0x3a2e <lcd_putchar+0x9c>
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	21 50       	subi	r18, 0x01	; 1
    3a00:	30 40       	sbci	r19, 0x00	; 0
    3a02:	80 91 96 03 	lds	r24, 0x0396
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	ac 01       	movw	r20, r24
    3a0a:	24 9f       	mul	r18, r20
    3a0c:	c0 01       	movw	r24, r0
    3a0e:	25 9f       	mul	r18, r21
    3a10:	90 0d       	add	r25, r0
    3a12:	34 9f       	mul	r19, r20
    3a14:	90 0d       	add	r25, r0
    3a16:	11 24       	eor	r1, r1
    3a18:	20 91 ab 03 	lds	r18, 0x03AB
    3a1c:	e0 91 a8 03 	lds	r30, 0x03A8
    3a20:	f0 91 a9 03 	lds	r31, 0x03A9
    3a24:	e8 0f       	add	r30, r24
    3a26:	f9 1f       	adc	r31, r25
    3a28:	e2 0f       	add	r30, r18
    3a2a:	f1 1d       	adc	r31, r1
    3a2c:	e0 82       	st	Z, r14
    3a2e:	80 91 ab 03 	lds	r24, 0x03AB
    3a32:	8f 5f       	subi	r24, 0xFF	; 255
    3a34:	80 93 ab 03 	sts	0x03AB, r24
    3a38:	90 91 96 03 	lds	r25, 0x0396
    3a3c:	89 17       	cp	r24, r25
    3a3e:	09 f0       	breq	.+2      	; 0x3a42 <lcd_putchar+0xb0>
    3a40:	bb c0       	rjmp	.+374    	; 0x3bb8 <lcd_putchar+0x226>
    3a42:	40 91 aa 03 	lds	r20, 0x03AA
    3a46:	24 2f       	mov	r18, r20
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	80 91 95 03 	lds	r24, 0x0395
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	01 97       	sbiw	r24, 0x01	; 1
    3a52:	28 17       	cp	r18, r24
    3a54:	39 07       	cpc	r19, r25
    3a56:	09 f0       	breq	.+2      	; 0x3a5a <lcd_putchar+0xc8>
    3a58:	a4 c0       	rjmp	.+328    	; 0x3ba2 <lcd_putchar+0x210>
    3a5a:	c0 e0       	ldi	r28, 0x00	; 0
    3a5c:	d0 e0       	ldi	r29, 0x00	; 0
    3a5e:	44 c0       	rjmp	.+136    	; 0x3ae8 <lcd_putchar+0x156>
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	6c 2f       	mov	r22, r28
    3a64:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
    3a68:	ff 24       	eor	r15, r15
    3a6a:	6e 01       	movw	r12, r28
    3a6c:	08 94       	sec
    3a6e:	c1 1c       	adc	r12, r1
    3a70:	d1 1c       	adc	r13, r1
    3a72:	35 c0       	rjmp	.+106    	; 0x3ade <lcd_putchar+0x14c>
    3a74:	0f 2d       	mov	r16, r15
    3a76:	10 e0       	ldi	r17, 0x00	; 0
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	9c 01       	movw	r18, r24
    3a7c:	c2 9f       	mul	r28, r18
    3a7e:	c0 01       	movw	r24, r0
    3a80:	c3 9f       	mul	r28, r19
    3a82:	90 0d       	add	r25, r0
    3a84:	d2 9f       	mul	r29, r18
    3a86:	90 0d       	add	r25, r0
    3a88:	11 24       	eor	r1, r1
    3a8a:	e0 91 a8 03 	lds	r30, 0x03A8
    3a8e:	f0 91 a9 03 	lds	r31, 0x03A9
    3a92:	e0 0f       	add	r30, r16
    3a94:	f1 1f       	adc	r31, r17
    3a96:	e8 0f       	add	r30, r24
    3a98:	f9 1f       	adc	r31, r25
    3a9a:	80 81       	ld	r24, Z
    3a9c:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD9send_dataEh>
    3aa0:	e0 91 a8 03 	lds	r30, 0x03A8
    3aa4:	f0 91 a9 03 	lds	r31, 0x03A9
    3aa8:	80 91 96 03 	lds	r24, 0x0396
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	c8 9f       	mul	r28, r24
    3ab0:	d0 01       	movw	r26, r0
    3ab2:	c9 9f       	mul	r28, r25
    3ab4:	b0 0d       	add	r27, r0
    3ab6:	d8 9f       	mul	r29, r24
    3ab8:	b0 0d       	add	r27, r0
    3aba:	11 24       	eor	r1, r1
    3abc:	e0 0f       	add	r30, r16
    3abe:	f1 1f       	adc	r31, r17
    3ac0:	ae 0f       	add	r26, r30
    3ac2:	bf 1f       	adc	r27, r31
    3ac4:	ac 01       	movw	r20, r24
    3ac6:	c4 9e       	mul	r12, r20
    3ac8:	c0 01       	movw	r24, r0
    3aca:	c5 9e       	mul	r12, r21
    3acc:	90 0d       	add	r25, r0
    3ace:	d4 9e       	mul	r13, r20
    3ad0:	90 0d       	add	r25, r0
    3ad2:	11 24       	eor	r1, r1
    3ad4:	e8 0f       	add	r30, r24
    3ad6:	f9 1f       	adc	r31, r25
    3ad8:	80 81       	ld	r24, Z
    3ada:	8c 93       	st	X, r24
    3adc:	f3 94       	inc	r15
    3ade:	80 91 96 03 	lds	r24, 0x0396
    3ae2:	f8 16       	cp	r15, r24
    3ae4:	38 f2       	brcs	.-114    	; 0x3a74 <lcd_putchar+0xe2>
    3ae6:	e6 01       	movw	r28, r12
    3ae8:	60 91 95 03 	lds	r22, 0x0395
    3aec:	86 2f       	mov	r24, r22
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	02 97       	sbiw	r24, 0x02	; 2
    3af2:	c8 17       	cp	r28, r24
    3af4:	d9 07       	cpc	r29, r25
    3af6:	0c f4       	brge	.+2      	; 0x3afa <lcd_putchar+0x168>
    3af8:	b3 cf       	rjmp	.-154    	; 0x3a60 <lcd_putchar+0xce>
    3afa:	62 30       	cpi	r22, 0x02	; 2
    3afc:	08 f4       	brcc	.+2      	; 0x3b00 <lcd_putchar+0x16e>
    3afe:	40 c0       	rjmp	.+128    	; 0x3b80 <lcd_putchar+0x1ee>
    3b00:	62 50       	subi	r22, 0x02	; 2
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
    3b08:	ff 24       	eor	r15, r15
    3b0a:	40 e2       	ldi	r20, 0x20	; 32
    3b0c:	d4 2e       	mov	r13, r20
    3b0e:	34 c0       	rjmp	.+104    	; 0x3b78 <lcd_putchar+0x1e6>
    3b10:	0f 2d       	mov	r16, r15
    3b12:	10 e0       	ldi	r17, 0x00	; 0
    3b14:	80 91 95 03 	lds	r24, 0x0395
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	02 97       	sbiw	r24, 0x02	; 2
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	ac 01       	movw	r20, r24
    3b20:	42 9f       	mul	r20, r18
    3b22:	c0 01       	movw	r24, r0
    3b24:	43 9f       	mul	r20, r19
    3b26:	90 0d       	add	r25, r0
    3b28:	52 9f       	mul	r21, r18
    3b2a:	90 0d       	add	r25, r0
    3b2c:	11 24       	eor	r1, r1
    3b2e:	e0 91 a8 03 	lds	r30, 0x03A8
    3b32:	f0 91 a9 03 	lds	r31, 0x03A9
    3b36:	e0 0f       	add	r30, r16
    3b38:	f1 1f       	adc	r31, r17
    3b3a:	e8 0f       	add	r30, r24
    3b3c:	f9 1f       	adc	r31, r25
    3b3e:	80 81       	ld	r24, Z
    3b40:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD9send_dataEh>
    3b44:	20 91 95 03 	lds	r18, 0x0395
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	22 50       	subi	r18, 0x02	; 2
    3b4c:	30 40       	sbci	r19, 0x00	; 0
    3b4e:	80 91 96 03 	lds	r24, 0x0396
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	ac 01       	movw	r20, r24
    3b56:	24 9f       	mul	r18, r20
    3b58:	c0 01       	movw	r24, r0
    3b5a:	25 9f       	mul	r18, r21
    3b5c:	90 0d       	add	r25, r0
    3b5e:	34 9f       	mul	r19, r20
    3b60:	90 0d       	add	r25, r0
    3b62:	11 24       	eor	r1, r1
    3b64:	e0 91 a8 03 	lds	r30, 0x03A8
    3b68:	f0 91 a9 03 	lds	r31, 0x03A9
    3b6c:	e0 0f       	add	r30, r16
    3b6e:	f1 1f       	adc	r31, r17
    3b70:	e8 0f       	add	r30, r24
    3b72:	f9 1f       	adc	r31, r25
    3b74:	d0 82       	st	Z, r13
    3b76:	f3 94       	inc	r15
    3b78:	20 91 96 03 	lds	r18, 0x0396
    3b7c:	f2 16       	cp	r15, r18
    3b7e:	40 f2       	brcs	.-112    	; 0x3b10 <lcd_putchar+0x17e>
    3b80:	60 91 95 03 	lds	r22, 0x0395
    3b84:	61 50       	subi	r22, 0x01	; 1
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
    3b8c:	00 e0       	ldi	r16, 0x00	; 0
    3b8e:	04 c0       	rjmp	.+8      	; 0x3b98 <lcd_putchar+0x206>
    3b90:	80 e2       	ldi	r24, 0x20	; 32
    3b92:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD9send_dataEh>
    3b96:	0f 5f       	subi	r16, 0xFF	; 255
    3b98:	80 91 96 03 	lds	r24, 0x0396
    3b9c:	08 17       	cp	r16, r24
    3b9e:	c0 f3       	brcs	.-16     	; 0x3b90 <lcd_putchar+0x1fe>
    3ba0:	03 c0       	rjmp	.+6      	; 0x3ba8 <lcd_putchar+0x216>
    3ba2:	4f 5f       	subi	r20, 0xFF	; 255
    3ba4:	40 93 aa 03 	sts	0x03AA, r20
    3ba8:	10 92 ab 03 	sts	0x03AB, r1
    3bac:	80 91 ab 03 	lds	r24, 0x03AB
    3bb0:	60 91 aa 03 	lds	r22, 0x03AA
    3bb4:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN12OrangutanLCD6gotoXYEhh>
    3bb8:	2e 2d       	mov	r18, r14
    3bba:	33 27       	eor	r19, r19
    3bbc:	27 fd       	sbrc	r18, 7
    3bbe:	30 95       	com	r19
    3bc0:	c9 01       	movw	r24, r18
    3bc2:	cd b7       	in	r28, 0x3d	; 61
    3bc4:	de b7       	in	r29, 0x3e	; 62
    3bc6:	e8 e0       	ldi	r30, 0x08	; 8
    3bc8:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <__epilogue_restores__+0x14>

00003bcc <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    3bcc:	ef 92       	push	r14
    3bce:	ff 92       	push	r15
    3bd0:	0f 93       	push	r16
    3bd2:	1f 93       	push	r17
    3bd4:	cf 93       	push	r28
    3bd6:	df 93       	push	r29
    3bd8:	7c 01       	movw	r14, r24
    3bda:	06 2f       	mov	r16, r22
    3bdc:	10 e0       	ldi	r17, 0x00	; 0
    3bde:	53 e0       	ldi	r21, 0x03	; 3
    3be0:	00 0f       	add	r16, r16
    3be2:	11 1f       	adc	r17, r17
    3be4:	5a 95       	dec	r21
    3be6:	e1 f7       	brne	.-8      	; 0x3be0 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    3be8:	c0 e0       	ldi	r28, 0x00	; 0
    3bea:	d0 e0       	ldi	r29, 0x00	; 0
    3bec:	9e 01       	movw	r18, r28
    3bee:	20 0f       	add	r18, r16
    3bf0:	82 2f       	mov	r24, r18
    3bf2:	80 64       	ori	r24, 0x40	; 64
    3bf4:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <_ZN12OrangutanLCD8send_cmdEh>
    3bf8:	f7 01       	movw	r30, r14
    3bfa:	ec 0f       	add	r30, r28
    3bfc:	fd 1f       	adc	r31, r29
    3bfe:	e4 91       	lpm	r30, Z+
    3c00:	8e 2f       	mov	r24, r30
    3c02:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD9send_dataEh>
    3c06:	21 96       	adiw	r28, 0x01	; 1
    3c08:	c8 30       	cpi	r28, 0x08	; 8
    3c0a:	d1 05       	cpc	r29, r1
    3c0c:	79 f7       	brne	.-34     	; 0x3bec <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
    3c12:	e6 e0       	ldi	r30, 0x06	; 6
    3c14:	0c 94 b3 1f 	jmp	0x3f66	; 0x3f66 <__epilogue_restores__+0x18>

00003c18 <lcd_load_custom_character>:
    3c18:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    3c1c:	08 95       	ret

00003c1e <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    3c1e:	60 e0       	ldi	r22, 0x00	; 0
    3c20:	41 e0       	ldi	r20, 0x01	; 1
    3c22:	0e 94 05 1b 	call	0x360a	; 0x360a <_ZN12OrangutanLCD4sendEhhh>
    3c26:	08 95       	ret

00003c28 <_ZN12OrangutanLCD6scrollEhhj>:
    3c28:	0f 93       	push	r16
    3c2a:	1f 93       	push	r17
    3c2c:	cf 93       	push	r28
    3c2e:	df 93       	push	r29
    3c30:	08 2f       	mov	r16, r24
    3c32:	16 2f       	mov	r17, r22
    3c34:	ea 01       	movw	r28, r20
    3c36:	0b c0       	rjmp	.+22     	; 0x3c4e <_ZN12OrangutanLCD6scrollEhhj+0x26>
    3c38:	00 23       	and	r16, r16
    3c3a:	11 f4       	brne	.+4      	; 0x3c40 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    3c3c:	88 e1       	ldi	r24, 0x18	; 24
    3c3e:	01 c0       	rjmp	.+2      	; 0x3c42 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    3c40:	8c e1       	ldi	r24, 0x1C	; 28
    3c42:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <_ZN12OrangutanLCD8send_cmdEh>
    3c46:	ce 01       	movw	r24, r28
    3c48:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <_ZN13OrangutanTime17delayMillisecondsEj>
    3c4c:	11 50       	subi	r17, 0x01	; 1
    3c4e:	11 23       	and	r17, r17
    3c50:	99 f7       	brne	.-26     	; 0x3c38 <_ZN12OrangutanLCD6scrollEhhj+0x10>
    3c52:	df 91       	pop	r29
    3c54:	cf 91       	pop	r28
    3c56:	1f 91       	pop	r17
    3c58:	0f 91       	pop	r16
    3c5a:	08 95       	ret

00003c5c <lcd_scroll>:
    3c5c:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <_ZN12OrangutanLCD6scrollEhhj>
    3c60:	08 95       	ret

00003c62 <__vector_11>:
    3c62:	2f 92       	push	r2
    3c64:	8f 93       	push	r24
    3c66:	9f 93       	push	r25
    3c68:	2f b6       	in	r2, 0x3f	; 63
    3c6a:	80 91 b2 03 	lds	r24, 0x03B2
    3c6e:	90 91 b3 03 	lds	r25, 0x03B3
    3c72:	01 96       	adiw	r24, 0x01	; 1
    3c74:	80 93 b2 03 	sts	0x03B2, r24
    3c78:	90 93 b3 03 	sts	0x03B3, r25
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	80 91 b4 03 	lds	r24, 0x03B4
    3c82:	89 1f       	adc	r24, r25
    3c84:	80 93 b4 03 	sts	0x03B4, r24
    3c88:	90 91 ba 03 	lds	r25, 0x03BA
    3c8c:	9c 5f       	subi	r25, 0xFC	; 252
    3c8e:	90 93 ba 03 	sts	0x03BA, r25
    3c92:	80 91 b9 03 	lds	r24, 0x03B9
    3c96:	80 51       	subi	r24, 0x10	; 16
    3c98:	97 42       	sbci	r25, 0x27	; 39
    3c9a:	c0 f0       	brcs	.+48     	; 0x3ccc <end>
    3c9c:	90 93 ba 03 	sts	0x03BA, r25
    3ca0:	80 93 b9 03 	sts	0x03B9, r24
    3ca4:	80 91 b5 03 	lds	r24, 0x03B5
    3ca8:	90 91 b6 03 	lds	r25, 0x03B6
    3cac:	01 96       	adiw	r24, 0x01	; 1
    3cae:	80 93 b5 03 	sts	0x03B5, r24
    3cb2:	90 93 b6 03 	sts	0x03B6, r25
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	80 91 b7 03 	lds	r24, 0x03B7
    3cbc:	89 1f       	adc	r24, r25
    3cbe:	80 93 b7 03 	sts	0x03B7, r24
    3cc2:	80 91 b8 03 	lds	r24, 0x03B8
    3cc6:	89 1f       	adc	r24, r25
    3cc8:	80 93 b8 03 	sts	0x03B8, r24

00003ccc <end>:
    3ccc:	2f be       	out	0x3f, r2	; 63
    3cce:	9f 91       	pop	r25
    3cd0:	8f 91       	pop	r24
    3cd2:	2f 90       	pop	r2
    3cd4:	18 95       	reti

00003cd6 <ticks_to_microseconds>:
    3cd6:	6f 5f       	subi	r22, 0xFF	; 255
    3cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cda:	8f 4f       	sbci	r24, 0xFF	; 255
    3cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    3cde:	66 0f       	add	r22, r22
    3ce0:	77 1f       	adc	r23, r23
    3ce2:	88 1f       	adc	r24, r24
    3ce4:	99 1f       	adc	r25, r25
    3ce6:	25 e0       	ldi	r18, 0x05	; 5
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	40 e0       	ldi	r20, 0x00	; 0
    3cec:	50 e0       	ldi	r21, 0x00	; 0
    3cee:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <__udivmodsi4>
    3cf2:	ca 01       	movw	r24, r20
    3cf4:	b9 01       	movw	r22, r18
    3cf6:	08 95       	ret

00003cf8 <delay_ms>:
    3cf8:	28 ee       	ldi	r18, 0xE8	; 232
    3cfa:	33 e0       	ldi	r19, 0x03	; 3
    3cfc:	09 c0       	rjmp	.+18     	; 0x3d10 <delay_ms+0x18>
    3cfe:	f9 01       	movw	r30, r18
    3d00:	6f 93       	push	r22
    3d02:	64 e0       	ldi	r22, 0x04	; 4
    3d04:	6a 95       	dec	r22
    3d06:	f1 f7       	brne	.-4      	; 0x3d04 <delay_ms+0xc>
    3d08:	6f 91       	pop	r22
    3d0a:	31 97       	sbiw	r30, 0x01	; 1
    3d0c:	c9 f7       	brne	.-14     	; 0x3d00 <delay_ms+0x8>
    3d0e:	01 97       	sbiw	r24, 0x01	; 1
    3d10:	00 97       	sbiw	r24, 0x00	; 0
    3d12:	a9 f7       	brne	.-22     	; 0x3cfe <delay_ms+0x6>
    3d14:	08 95       	ret

00003d16 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    3d16:	6f 5f       	subi	r22, 0xFF	; 255
    3d18:	7f 4f       	sbci	r23, 0xFF	; 255
    3d1a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d1e:	66 0f       	add	r22, r22
    3d20:	77 1f       	adc	r23, r23
    3d22:	88 1f       	adc	r24, r24
    3d24:	99 1f       	adc	r25, r25
    3d26:	25 e0       	ldi	r18, 0x05	; 5
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	40 e0       	ldi	r20, 0x00	; 0
    3d2c:	50 e0       	ldi	r21, 0x00	; 0
    3d2e:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <__udivmodsi4>
    3d32:	ca 01       	movw	r24, r20
    3d34:	b9 01       	movw	r22, r18
    3d36:	08 95       	ret

00003d38 <_ZN13OrangutanTime17delayMillisecondsEj>:
    3d38:	28 ee       	ldi	r18, 0xE8	; 232
    3d3a:	33 e0       	ldi	r19, 0x03	; 3
    3d3c:	09 c0       	rjmp	.+18     	; 0x3d50 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3d3e:	f9 01       	movw	r30, r18
    3d40:	6f 93       	push	r22
    3d42:	64 e0       	ldi	r22, 0x04	; 4
    3d44:	6a 95       	dec	r22
    3d46:	f1 f7       	brne	.-4      	; 0x3d44 <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3d48:	6f 91       	pop	r22
    3d4a:	31 97       	sbiw	r30, 0x01	; 1
    3d4c:	c9 f7       	brne	.-14     	; 0x3d40 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3d4e:	01 97       	sbiw	r24, 0x01	; 1
    3d50:	00 97       	sbiw	r24, 0x00	; 0
    3d52:	a9 f7       	brne	.-22     	; 0x3d3e <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    3d54:	08 95       	ret

00003d56 <_ZN13OrangutanTime5init2Ev>:
    3d56:	a0 e7       	ldi	r26, 0x70	; 112
    3d58:	b0 e0       	ldi	r27, 0x00	; 0
    3d5a:	8c 91       	ld	r24, X
    3d5c:	8e 7f       	andi	r24, 0xFE	; 254
    3d5e:	8c 93       	st	X, r24
    3d60:	e0 eb       	ldi	r30, 0xB0	; 176
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	80 81       	ld	r24, Z
    3d66:	83 60       	ori	r24, 0x03	; 3
    3d68:	80 83       	st	Z, r24
    3d6a:	e1 eb       	ldi	r30, 0xB1	; 177
    3d6c:	f0 e0       	ldi	r31, 0x00	; 0
    3d6e:	80 81       	ld	r24, Z
    3d70:	80 7f       	andi	r24, 0xF0	; 240
    3d72:	80 83       	st	Z, r24
    3d74:	80 81       	ld	r24, Z
    3d76:	82 60       	ori	r24, 0x02	; 2
    3d78:	80 83       	st	Z, r24
    3d7a:	b8 9a       	sbi	0x17, 0	; 23
    3d7c:	8c 91       	ld	r24, X
    3d7e:	81 60       	ori	r24, 0x01	; 1
    3d80:	8c 93       	st	X, r24
    3d82:	78 94       	sei
    3d84:	08 95       	ret

00003d86 <_ZN13OrangutanTime4initEv>:
    3d86:	80 91 bb 03 	lds	r24, 0x03BB
    3d8a:	88 23       	and	r24, r24
    3d8c:	29 f4       	brne	.+10     	; 0x3d98 <_ZN13OrangutanTime4initEv+0x12>
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	80 93 bb 03 	sts	0x03BB, r24
    3d94:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <_ZN13OrangutanTime5init2Ev>
    3d98:	08 95       	ret

00003d9a <_ZN13OrangutanTime2msEv>:
    3d9a:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <_ZN13OrangutanTime4initEv>
    3d9e:	e0 e7       	ldi	r30, 0x70	; 112
    3da0:	f0 e0       	ldi	r31, 0x00	; 0
    3da2:	80 81       	ld	r24, Z
    3da4:	8e 7f       	andi	r24, 0xFE	; 254
    3da6:	80 83       	st	Z, r24
    3da8:	20 91 b5 03 	lds	r18, 0x03B5
    3dac:	30 91 b6 03 	lds	r19, 0x03B6
    3db0:	40 91 b7 03 	lds	r20, 0x03B7
    3db4:	50 91 b8 03 	lds	r21, 0x03B8
    3db8:	80 81       	ld	r24, Z
    3dba:	81 60       	ori	r24, 0x01	; 1
    3dbc:	80 83       	st	Z, r24
    3dbe:	b9 01       	movw	r22, r18
    3dc0:	ca 01       	movw	r24, r20
    3dc2:	08 95       	ret

00003dc4 <get_ms>:
    3dc4:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <_ZN13OrangutanTime2msEv>
    3dc8:	08 95       	ret

00003dca <_ZN13OrangutanTime5ticksEv>:
    3dca:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <_ZN13OrangutanTime4initEv>
    3dce:	80 91 70 00 	lds	r24, 0x0070
    3dd2:	8e 7f       	andi	r24, 0xFE	; 254
    3dd4:	80 93 70 00 	sts	0x0070, r24
    3dd8:	60 91 b2 00 	lds	r22, 0x00B2
    3ddc:	80 91 b1 03 	lds	r24, 0x03B1
    3de0:	90 91 b2 03 	lds	r25, 0x03B2
    3de4:	a0 91 b3 03 	lds	r26, 0x03B3
    3de8:	b0 91 b4 03 	lds	r27, 0x03B4
    3dec:	b8 99       	sbic	0x17, 0	; 23
    3dee:	05 c0       	rjmp	.+10     	; 0x3dfa <_ZN13OrangutanTime5ticksEv+0x30>
    3df0:	26 2f       	mov	r18, r22
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	40 e0       	ldi	r20, 0x00	; 0
    3df6:	50 e0       	ldi	r21, 0x00	; 0
    3df8:	11 c0       	rjmp	.+34     	; 0x3e1c <_ZN13OrangutanTime5ticksEv+0x52>
    3dfa:	80 91 b2 00 	lds	r24, 0x00B2
    3dfe:	20 91 b1 03 	lds	r18, 0x03B1
    3e02:	30 91 b2 03 	lds	r19, 0x03B2
    3e06:	40 91 b3 03 	lds	r20, 0x03B3
    3e0a:	50 91 b4 03 	lds	r21, 0x03B4
    3e0e:	20 50       	subi	r18, 0x00	; 0
    3e10:	3f 4f       	sbci	r19, 0xFF	; 255
    3e12:	4f 4f       	sbci	r20, 0xFF	; 255
    3e14:	5f 4f       	sbci	r21, 0xFF	; 255
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	a0 e0       	ldi	r26, 0x00	; 0
    3e1a:	b0 e0       	ldi	r27, 0x00	; 0
    3e1c:	28 2b       	or	r18, r24
    3e1e:	39 2b       	or	r19, r25
    3e20:	4a 2b       	or	r20, r26
    3e22:	5b 2b       	or	r21, r27
    3e24:	80 91 70 00 	lds	r24, 0x0070
    3e28:	81 60       	ori	r24, 0x01	; 1
    3e2a:	80 93 70 00 	sts	0x0070, r24
    3e2e:	b9 01       	movw	r22, r18
    3e30:	ca 01       	movw	r24, r20
    3e32:	08 95       	ret

00003e34 <get_ticks>:
    3e34:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <_ZN13OrangutanTime5ticksEv>
    3e38:	08 95       	ret

00003e3a <_ZN13OrangutanTime5resetEv>:
    3e3a:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <_ZN13OrangutanTime4initEv>
    3e3e:	e0 e7       	ldi	r30, 0x70	; 112
    3e40:	f0 e0       	ldi	r31, 0x00	; 0
    3e42:	80 81       	ld	r24, Z
    3e44:	8e 7f       	andi	r24, 0xFE	; 254
    3e46:	80 83       	st	Z, r24
    3e48:	10 92 b5 03 	sts	0x03B5, r1
    3e4c:	10 92 b6 03 	sts	0x03B6, r1
    3e50:	10 92 b7 03 	sts	0x03B7, r1
    3e54:	10 92 b8 03 	sts	0x03B8, r1
    3e58:	10 92 ba 03 	sts	0x03BA, r1
    3e5c:	10 92 b9 03 	sts	0x03B9, r1
    3e60:	80 81       	ld	r24, Z
    3e62:	81 60       	ori	r24, 0x01	; 1
    3e64:	80 83       	st	Z, r24
    3e66:	08 95       	ret

00003e68 <time_reset>:
    3e68:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <_ZN13OrangutanTime5resetEv>
    3e6c:	08 95       	ret

00003e6e <__mulsi3>:
    3e6e:	62 9f       	mul	r22, r18
    3e70:	d0 01       	movw	r26, r0
    3e72:	73 9f       	mul	r23, r19
    3e74:	f0 01       	movw	r30, r0
    3e76:	82 9f       	mul	r24, r18
    3e78:	e0 0d       	add	r30, r0
    3e7a:	f1 1d       	adc	r31, r1
    3e7c:	64 9f       	mul	r22, r20
    3e7e:	e0 0d       	add	r30, r0
    3e80:	f1 1d       	adc	r31, r1
    3e82:	92 9f       	mul	r25, r18
    3e84:	f0 0d       	add	r31, r0
    3e86:	83 9f       	mul	r24, r19
    3e88:	f0 0d       	add	r31, r0
    3e8a:	74 9f       	mul	r23, r20
    3e8c:	f0 0d       	add	r31, r0
    3e8e:	65 9f       	mul	r22, r21
    3e90:	f0 0d       	add	r31, r0
    3e92:	99 27       	eor	r25, r25
    3e94:	72 9f       	mul	r23, r18
    3e96:	b0 0d       	add	r27, r0
    3e98:	e1 1d       	adc	r30, r1
    3e9a:	f9 1f       	adc	r31, r25
    3e9c:	63 9f       	mul	r22, r19
    3e9e:	b0 0d       	add	r27, r0
    3ea0:	e1 1d       	adc	r30, r1
    3ea2:	f9 1f       	adc	r31, r25
    3ea4:	bd 01       	movw	r22, r26
    3ea6:	cf 01       	movw	r24, r30
    3ea8:	11 24       	eor	r1, r1
    3eaa:	08 95       	ret

00003eac <__divmodhi4>:
    3eac:	97 fb       	bst	r25, 7
    3eae:	09 2e       	mov	r0, r25
    3eb0:	07 26       	eor	r0, r23
    3eb2:	0a d0       	rcall	.+20     	; 0x3ec8 <__divmodhi4_neg1>
    3eb4:	77 fd       	sbrc	r23, 7
    3eb6:	04 d0       	rcall	.+8      	; 0x3ec0 <__divmodhi4_neg2>
    3eb8:	65 d0       	rcall	.+202    	; 0x3f84 <__udivmodhi4>
    3eba:	06 d0       	rcall	.+12     	; 0x3ec8 <__divmodhi4_neg1>
    3ebc:	00 20       	and	r0, r0
    3ebe:	1a f4       	brpl	.+6      	; 0x3ec6 <__divmodhi4_exit>

00003ec0 <__divmodhi4_neg2>:
    3ec0:	70 95       	com	r23
    3ec2:	61 95       	neg	r22
    3ec4:	7f 4f       	sbci	r23, 0xFF	; 255

00003ec6 <__divmodhi4_exit>:
    3ec6:	08 95       	ret

00003ec8 <__divmodhi4_neg1>:
    3ec8:	f6 f7       	brtc	.-4      	; 0x3ec6 <__divmodhi4_exit>
    3eca:	90 95       	com	r25
    3ecc:	81 95       	neg	r24
    3ece:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed0:	08 95       	ret

00003ed2 <__udivmodsi4>:
    3ed2:	a1 e2       	ldi	r26, 0x21	; 33
    3ed4:	1a 2e       	mov	r1, r26
    3ed6:	aa 1b       	sub	r26, r26
    3ed8:	bb 1b       	sub	r27, r27
    3eda:	fd 01       	movw	r30, r26
    3edc:	0d c0       	rjmp	.+26     	; 0x3ef8 <__udivmodsi4_ep>

00003ede <__udivmodsi4_loop>:
    3ede:	aa 1f       	adc	r26, r26
    3ee0:	bb 1f       	adc	r27, r27
    3ee2:	ee 1f       	adc	r30, r30
    3ee4:	ff 1f       	adc	r31, r31
    3ee6:	a2 17       	cp	r26, r18
    3ee8:	b3 07       	cpc	r27, r19
    3eea:	e4 07       	cpc	r30, r20
    3eec:	f5 07       	cpc	r31, r21
    3eee:	20 f0       	brcs	.+8      	; 0x3ef8 <__udivmodsi4_ep>
    3ef0:	a2 1b       	sub	r26, r18
    3ef2:	b3 0b       	sbc	r27, r19
    3ef4:	e4 0b       	sbc	r30, r20
    3ef6:	f5 0b       	sbc	r31, r21

00003ef8 <__udivmodsi4_ep>:
    3ef8:	66 1f       	adc	r22, r22
    3efa:	77 1f       	adc	r23, r23
    3efc:	88 1f       	adc	r24, r24
    3efe:	99 1f       	adc	r25, r25
    3f00:	1a 94       	dec	r1
    3f02:	69 f7       	brne	.-38     	; 0x3ede <__udivmodsi4_loop>
    3f04:	60 95       	com	r22
    3f06:	70 95       	com	r23
    3f08:	80 95       	com	r24
    3f0a:	90 95       	com	r25
    3f0c:	9b 01       	movw	r18, r22
    3f0e:	ac 01       	movw	r20, r24
    3f10:	bd 01       	movw	r22, r26
    3f12:	cf 01       	movw	r24, r30
    3f14:	08 95       	ret

00003f16 <__prologue_saves__>:
    3f16:	2f 92       	push	r2
    3f18:	3f 92       	push	r3
    3f1a:	4f 92       	push	r4
    3f1c:	5f 92       	push	r5
    3f1e:	6f 92       	push	r6
    3f20:	7f 92       	push	r7
    3f22:	8f 92       	push	r8
    3f24:	9f 92       	push	r9
    3f26:	af 92       	push	r10
    3f28:	bf 92       	push	r11
    3f2a:	cf 92       	push	r12
    3f2c:	df 92       	push	r13
    3f2e:	ef 92       	push	r14
    3f30:	ff 92       	push	r15
    3f32:	0f 93       	push	r16
    3f34:	1f 93       	push	r17
    3f36:	cf 93       	push	r28
    3f38:	df 93       	push	r29
    3f3a:	cd b7       	in	r28, 0x3d	; 61
    3f3c:	de b7       	in	r29, 0x3e	; 62
    3f3e:	ca 1b       	sub	r28, r26
    3f40:	db 0b       	sbc	r29, r27
    3f42:	0f b6       	in	r0, 0x3f	; 63
    3f44:	f8 94       	cli
    3f46:	de bf       	out	0x3e, r29	; 62
    3f48:	0f be       	out	0x3f, r0	; 63
    3f4a:	cd bf       	out	0x3d, r28	; 61
    3f4c:	09 94       	ijmp

00003f4e <__epilogue_restores__>:
    3f4e:	2a 88       	ldd	r2, Y+18	; 0x12
    3f50:	39 88       	ldd	r3, Y+17	; 0x11
    3f52:	48 88       	ldd	r4, Y+16	; 0x10
    3f54:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f56:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f58:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f60:	b9 84       	ldd	r11, Y+9	; 0x09
    3f62:	c8 84       	ldd	r12, Y+8	; 0x08
    3f64:	df 80       	ldd	r13, Y+7	; 0x07
    3f66:	ee 80       	ldd	r14, Y+6	; 0x06
    3f68:	fd 80       	ldd	r15, Y+5	; 0x05
    3f6a:	0c 81       	ldd	r16, Y+4	; 0x04
    3f6c:	1b 81       	ldd	r17, Y+3	; 0x03
    3f6e:	aa 81       	ldd	r26, Y+2	; 0x02
    3f70:	b9 81       	ldd	r27, Y+1	; 0x01
    3f72:	ce 0f       	add	r28, r30
    3f74:	d1 1d       	adc	r29, r1
    3f76:	0f b6       	in	r0, 0x3f	; 63
    3f78:	f8 94       	cli
    3f7a:	de bf       	out	0x3e, r29	; 62
    3f7c:	0f be       	out	0x3f, r0	; 63
    3f7e:	cd bf       	out	0x3d, r28	; 61
    3f80:	ed 01       	movw	r28, r26
    3f82:	08 95       	ret

00003f84 <__udivmodhi4>:
    3f84:	aa 1b       	sub	r26, r26
    3f86:	bb 1b       	sub	r27, r27
    3f88:	51 e1       	ldi	r21, 0x11	; 17
    3f8a:	07 c0       	rjmp	.+14     	; 0x3f9a <__udivmodhi4_ep>

00003f8c <__udivmodhi4_loop>:
    3f8c:	aa 1f       	adc	r26, r26
    3f8e:	bb 1f       	adc	r27, r27
    3f90:	a6 17       	cp	r26, r22
    3f92:	b7 07       	cpc	r27, r23
    3f94:	10 f0       	brcs	.+4      	; 0x3f9a <__udivmodhi4_ep>
    3f96:	a6 1b       	sub	r26, r22
    3f98:	b7 0b       	sbc	r27, r23

00003f9a <__udivmodhi4_ep>:
    3f9a:	88 1f       	adc	r24, r24
    3f9c:	99 1f       	adc	r25, r25
    3f9e:	5a 95       	dec	r21
    3fa0:	a9 f7       	brne	.-22     	; 0x3f8c <__udivmodhi4_loop>
    3fa2:	80 95       	com	r24
    3fa4:	90 95       	com	r25
    3fa6:	bc 01       	movw	r22, r24
    3fa8:	cd 01       	movw	r24, r26
    3faa:	08 95       	ret

00003fac <malloc>:
    3fac:	cf 93       	push	r28
    3fae:	df 93       	push	r29
    3fb0:	bc 01       	movw	r22, r24
    3fb2:	82 30       	cpi	r24, 0x02	; 2
    3fb4:	91 05       	cpc	r25, r1
    3fb6:	10 f4       	brcc	.+4      	; 0x3fbc <malloc+0x10>
    3fb8:	62 e0       	ldi	r22, 0x02	; 2
    3fba:	70 e0       	ldi	r23, 0x00	; 0
    3fbc:	a0 91 be 03 	lds	r26, 0x03BE
    3fc0:	b0 91 bf 03 	lds	r27, 0x03BF
    3fc4:	ed 01       	movw	r28, r26
    3fc6:	e0 e0       	ldi	r30, 0x00	; 0
    3fc8:	f0 e0       	ldi	r31, 0x00	; 0
    3fca:	40 e0       	ldi	r20, 0x00	; 0
    3fcc:	50 e0       	ldi	r21, 0x00	; 0
    3fce:	21 c0       	rjmp	.+66     	; 0x4012 <malloc+0x66>
    3fd0:	88 81       	ld	r24, Y
    3fd2:	99 81       	ldd	r25, Y+1	; 0x01
    3fd4:	86 17       	cp	r24, r22
    3fd6:	97 07       	cpc	r25, r23
    3fd8:	69 f4       	brne	.+26     	; 0x3ff4 <malloc+0x48>
    3fda:	8a 81       	ldd	r24, Y+2	; 0x02
    3fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    3fde:	30 97       	sbiw	r30, 0x00	; 0
    3fe0:	19 f0       	breq	.+6      	; 0x3fe8 <malloc+0x3c>
    3fe2:	93 83       	std	Z+3, r25	; 0x03
    3fe4:	82 83       	std	Z+2, r24	; 0x02
    3fe6:	04 c0       	rjmp	.+8      	; 0x3ff0 <malloc+0x44>
    3fe8:	90 93 bf 03 	sts	0x03BF, r25
    3fec:	80 93 be 03 	sts	0x03BE, r24
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	34 c0       	rjmp	.+104    	; 0x405c <malloc+0xb0>
    3ff4:	68 17       	cp	r22, r24
    3ff6:	79 07       	cpc	r23, r25
    3ff8:	38 f4       	brcc	.+14     	; 0x4008 <malloc+0x5c>
    3ffa:	41 15       	cp	r20, r1
    3ffc:	51 05       	cpc	r21, r1
    3ffe:	19 f0       	breq	.+6      	; 0x4006 <malloc+0x5a>
    4000:	84 17       	cp	r24, r20
    4002:	95 07       	cpc	r25, r21
    4004:	08 f4       	brcc	.+2      	; 0x4008 <malloc+0x5c>
    4006:	ac 01       	movw	r20, r24
    4008:	fe 01       	movw	r30, r28
    400a:	8a 81       	ldd	r24, Y+2	; 0x02
    400c:	9b 81       	ldd	r25, Y+3	; 0x03
    400e:	9c 01       	movw	r18, r24
    4010:	e9 01       	movw	r28, r18
    4012:	20 97       	sbiw	r28, 0x00	; 0
    4014:	e9 f6       	brne	.-70     	; 0x3fd0 <malloc+0x24>
    4016:	41 15       	cp	r20, r1
    4018:	51 05       	cpc	r21, r1
    401a:	a9 f1       	breq	.+106    	; 0x4086 <malloc+0xda>
    401c:	ca 01       	movw	r24, r20
    401e:	86 1b       	sub	r24, r22
    4020:	97 0b       	sbc	r25, r23
    4022:	04 97       	sbiw	r24, 0x04	; 4
    4024:	08 f4       	brcc	.+2      	; 0x4028 <malloc+0x7c>
    4026:	ba 01       	movw	r22, r20
    4028:	e0 e0       	ldi	r30, 0x00	; 0
    402a:	f0 e0       	ldi	r31, 0x00	; 0
    402c:	2a c0       	rjmp	.+84     	; 0x4082 <malloc+0xd6>
    402e:	8d 91       	ld	r24, X+
    4030:	9c 91       	ld	r25, X
    4032:	11 97       	sbiw	r26, 0x01	; 1
    4034:	84 17       	cp	r24, r20
    4036:	95 07       	cpc	r25, r21
    4038:	f9 f4       	brne	.+62     	; 0x4078 <malloc+0xcc>
    403a:	64 17       	cp	r22, r20
    403c:	75 07       	cpc	r23, r21
    403e:	81 f4       	brne	.+32     	; 0x4060 <malloc+0xb4>
    4040:	12 96       	adiw	r26, 0x02	; 2
    4042:	8d 91       	ld	r24, X+
    4044:	9c 91       	ld	r25, X
    4046:	13 97       	sbiw	r26, 0x03	; 3
    4048:	30 97       	sbiw	r30, 0x00	; 0
    404a:	19 f0       	breq	.+6      	; 0x4052 <malloc+0xa6>
    404c:	93 83       	std	Z+3, r25	; 0x03
    404e:	82 83       	std	Z+2, r24	; 0x02
    4050:	04 c0       	rjmp	.+8      	; 0x405a <malloc+0xae>
    4052:	90 93 bf 03 	sts	0x03BF, r25
    4056:	80 93 be 03 	sts	0x03BE, r24
    405a:	fd 01       	movw	r30, r26
    405c:	32 96       	adiw	r30, 0x02	; 2
    405e:	4f c0       	rjmp	.+158    	; 0x40fe <malloc+0x152>
    4060:	ca 01       	movw	r24, r20
    4062:	86 1b       	sub	r24, r22
    4064:	97 0b       	sbc	r25, r23
    4066:	fd 01       	movw	r30, r26
    4068:	e8 0f       	add	r30, r24
    406a:	f9 1f       	adc	r31, r25
    406c:	61 93       	st	Z+, r22
    406e:	71 93       	st	Z+, r23
    4070:	02 97       	sbiw	r24, 0x02	; 2
    4072:	8d 93       	st	X+, r24
    4074:	9c 93       	st	X, r25
    4076:	43 c0       	rjmp	.+134    	; 0x40fe <malloc+0x152>
    4078:	fd 01       	movw	r30, r26
    407a:	82 81       	ldd	r24, Z+2	; 0x02
    407c:	93 81       	ldd	r25, Z+3	; 0x03
    407e:	9c 01       	movw	r18, r24
    4080:	d9 01       	movw	r26, r18
    4082:	10 97       	sbiw	r26, 0x00	; 0
    4084:	a1 f6       	brne	.-88     	; 0x402e <malloc+0x82>
    4086:	80 91 bc 03 	lds	r24, 0x03BC
    408a:	90 91 bd 03 	lds	r25, 0x03BD
    408e:	89 2b       	or	r24, r25
    4090:	41 f4       	brne	.+16     	; 0x40a2 <malloc+0xf6>
    4092:	80 91 99 03 	lds	r24, 0x0399
    4096:	90 91 9a 03 	lds	r25, 0x039A
    409a:	90 93 bd 03 	sts	0x03BD, r25
    409e:	80 93 bc 03 	sts	0x03BC, r24
    40a2:	40 91 9b 03 	lds	r20, 0x039B
    40a6:	50 91 9c 03 	lds	r21, 0x039C
    40aa:	41 15       	cp	r20, r1
    40ac:	51 05       	cpc	r21, r1
    40ae:	41 f4       	brne	.+16     	; 0x40c0 <malloc+0x114>
    40b0:	4d b7       	in	r20, 0x3d	; 61
    40b2:	5e b7       	in	r21, 0x3e	; 62
    40b4:	80 91 97 03 	lds	r24, 0x0397
    40b8:	90 91 98 03 	lds	r25, 0x0398
    40bc:	48 1b       	sub	r20, r24
    40be:	59 0b       	sbc	r21, r25
    40c0:	20 91 bc 03 	lds	r18, 0x03BC
    40c4:	30 91 bd 03 	lds	r19, 0x03BD
    40c8:	24 17       	cp	r18, r20
    40ca:	35 07       	cpc	r19, r21
    40cc:	b0 f4       	brcc	.+44     	; 0x40fa <malloc+0x14e>
    40ce:	ca 01       	movw	r24, r20
    40d0:	82 1b       	sub	r24, r18
    40d2:	93 0b       	sbc	r25, r19
    40d4:	86 17       	cp	r24, r22
    40d6:	97 07       	cpc	r25, r23
    40d8:	80 f0       	brcs	.+32     	; 0x40fa <malloc+0x14e>
    40da:	ab 01       	movw	r20, r22
    40dc:	4e 5f       	subi	r20, 0xFE	; 254
    40de:	5f 4f       	sbci	r21, 0xFF	; 255
    40e0:	84 17       	cp	r24, r20
    40e2:	95 07       	cpc	r25, r21
    40e4:	50 f0       	brcs	.+20     	; 0x40fa <malloc+0x14e>
    40e6:	42 0f       	add	r20, r18
    40e8:	53 1f       	adc	r21, r19
    40ea:	50 93 bd 03 	sts	0x03BD, r21
    40ee:	40 93 bc 03 	sts	0x03BC, r20
    40f2:	f9 01       	movw	r30, r18
    40f4:	61 93       	st	Z+, r22
    40f6:	71 93       	st	Z+, r23
    40f8:	02 c0       	rjmp	.+4      	; 0x40fe <malloc+0x152>
    40fa:	e0 e0       	ldi	r30, 0x00	; 0
    40fc:	f0 e0       	ldi	r31, 0x00	; 0
    40fe:	cf 01       	movw	r24, r30
    4100:	df 91       	pop	r29
    4102:	cf 91       	pop	r28
    4104:	08 95       	ret

00004106 <free>:
    4106:	cf 93       	push	r28
    4108:	df 93       	push	r29
    410a:	00 97       	sbiw	r24, 0x00	; 0
    410c:	09 f4       	brne	.+2      	; 0x4110 <free+0xa>
    410e:	50 c0       	rjmp	.+160    	; 0x41b0 <free+0xaa>
    4110:	ec 01       	movw	r28, r24
    4112:	22 97       	sbiw	r28, 0x02	; 2
    4114:	1b 82       	std	Y+3, r1	; 0x03
    4116:	1a 82       	std	Y+2, r1	; 0x02
    4118:	a0 91 be 03 	lds	r26, 0x03BE
    411c:	b0 91 bf 03 	lds	r27, 0x03BF
    4120:	10 97       	sbiw	r26, 0x00	; 0
    4122:	09 f1       	breq	.+66     	; 0x4166 <free+0x60>
    4124:	40 e0       	ldi	r20, 0x00	; 0
    4126:	50 e0       	ldi	r21, 0x00	; 0
    4128:	ac 17       	cp	r26, r28
    412a:	bd 07       	cpc	r27, r29
    412c:	08 f1       	brcs	.+66     	; 0x4170 <free+0x6a>
    412e:	bb 83       	std	Y+3, r27	; 0x03
    4130:	aa 83       	std	Y+2, r26	; 0x02
    4132:	fe 01       	movw	r30, r28
    4134:	21 91       	ld	r18, Z+
    4136:	31 91       	ld	r19, Z+
    4138:	e2 0f       	add	r30, r18
    413a:	f3 1f       	adc	r31, r19
    413c:	ae 17       	cp	r26, r30
    413e:	bf 07       	cpc	r27, r31
    4140:	79 f4       	brne	.+30     	; 0x4160 <free+0x5a>
    4142:	8d 91       	ld	r24, X+
    4144:	9c 91       	ld	r25, X
    4146:	11 97       	sbiw	r26, 0x01	; 1
    4148:	28 0f       	add	r18, r24
    414a:	39 1f       	adc	r19, r25
    414c:	2e 5f       	subi	r18, 0xFE	; 254
    414e:	3f 4f       	sbci	r19, 0xFF	; 255
    4150:	39 83       	std	Y+1, r19	; 0x01
    4152:	28 83       	st	Y, r18
    4154:	12 96       	adiw	r26, 0x02	; 2
    4156:	8d 91       	ld	r24, X+
    4158:	9c 91       	ld	r25, X
    415a:	13 97       	sbiw	r26, 0x03	; 3
    415c:	9b 83       	std	Y+3, r25	; 0x03
    415e:	8a 83       	std	Y+2, r24	; 0x02
    4160:	41 15       	cp	r20, r1
    4162:	51 05       	cpc	r21, r1
    4164:	71 f4       	brne	.+28     	; 0x4182 <free+0x7c>
    4166:	d0 93 bf 03 	sts	0x03BF, r29
    416a:	c0 93 be 03 	sts	0x03BE, r28
    416e:	20 c0       	rjmp	.+64     	; 0x41b0 <free+0xaa>
    4170:	12 96       	adiw	r26, 0x02	; 2
    4172:	8d 91       	ld	r24, X+
    4174:	9c 91       	ld	r25, X
    4176:	13 97       	sbiw	r26, 0x03	; 3
    4178:	ad 01       	movw	r20, r26
    417a:	00 97       	sbiw	r24, 0x00	; 0
    417c:	11 f0       	breq	.+4      	; 0x4182 <free+0x7c>
    417e:	dc 01       	movw	r26, r24
    4180:	d3 cf       	rjmp	.-90     	; 0x4128 <free+0x22>
    4182:	fa 01       	movw	r30, r20
    4184:	d3 83       	std	Z+3, r29	; 0x03
    4186:	c2 83       	std	Z+2, r28	; 0x02
    4188:	21 91       	ld	r18, Z+
    418a:	31 91       	ld	r19, Z+
    418c:	e2 0f       	add	r30, r18
    418e:	f3 1f       	adc	r31, r19
    4190:	ce 17       	cp	r28, r30
    4192:	df 07       	cpc	r29, r31
    4194:	69 f4       	brne	.+26     	; 0x41b0 <free+0xaa>
    4196:	88 81       	ld	r24, Y
    4198:	99 81       	ldd	r25, Y+1	; 0x01
    419a:	28 0f       	add	r18, r24
    419c:	39 1f       	adc	r19, r25
    419e:	2e 5f       	subi	r18, 0xFE	; 254
    41a0:	3f 4f       	sbci	r19, 0xFF	; 255
    41a2:	fa 01       	movw	r30, r20
    41a4:	31 83       	std	Z+1, r19	; 0x01
    41a6:	20 83       	st	Z, r18
    41a8:	8a 81       	ldd	r24, Y+2	; 0x02
    41aa:	9b 81       	ldd	r25, Y+3	; 0x03
    41ac:	93 83       	std	Z+3, r25	; 0x03
    41ae:	82 83       	std	Z+2, r24	; 0x02
    41b0:	df 91       	pop	r29
    41b2:	cf 91       	pop	r28
    41b4:	08 95       	ret

000041b6 <fdevopen>:
    41b6:	0f 93       	push	r16
    41b8:	1f 93       	push	r17
    41ba:	cf 93       	push	r28
    41bc:	df 93       	push	r29
    41be:	8c 01       	movw	r16, r24
    41c0:	eb 01       	movw	r28, r22
    41c2:	00 97       	sbiw	r24, 0x00	; 0
    41c4:	31 f4       	brne	.+12     	; 0x41d2 <fdevopen+0x1c>
    41c6:	61 15       	cp	r22, r1
    41c8:	71 05       	cpc	r23, r1
    41ca:	19 f4       	brne	.+6      	; 0x41d2 <fdevopen+0x1c>
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	38 c0       	rjmp	.+112    	; 0x4242 <fdevopen+0x8c>
    41d2:	81 e0       	ldi	r24, 0x01	; 1
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	6e e0       	ldi	r22, 0x0E	; 14
    41d8:	70 e0       	ldi	r23, 0x00	; 0
    41da:	0e 94 27 21 	call	0x424e	; 0x424e <calloc>
    41de:	fc 01       	movw	r30, r24
    41e0:	9c 01       	movw	r18, r24
    41e2:	00 97       	sbiw	r24, 0x00	; 0
    41e4:	71 f1       	breq	.+92     	; 0x4242 <fdevopen+0x8c>
    41e6:	80 e8       	ldi	r24, 0x80	; 128
    41e8:	83 83       	std	Z+3, r24	; 0x03
    41ea:	20 97       	sbiw	r28, 0x00	; 0
    41ec:	71 f0       	breq	.+28     	; 0x420a <fdevopen+0x54>
    41ee:	d3 87       	std	Z+11, r29	; 0x0b
    41f0:	c2 87       	std	Z+10, r28	; 0x0a
    41f2:	81 e8       	ldi	r24, 0x81	; 129
    41f4:	83 83       	std	Z+3, r24	; 0x03
    41f6:	80 91 c0 03 	lds	r24, 0x03C0
    41fa:	90 91 c1 03 	lds	r25, 0x03C1
    41fe:	89 2b       	or	r24, r25
    4200:	21 f4       	brne	.+8      	; 0x420a <fdevopen+0x54>
    4202:	f0 93 c1 03 	sts	0x03C1, r31
    4206:	e0 93 c0 03 	sts	0x03C0, r30
    420a:	01 15       	cp	r16, r1
    420c:	11 05       	cpc	r17, r1
    420e:	c9 f0       	breq	.+50     	; 0x4242 <fdevopen+0x8c>
    4210:	11 87       	std	Z+9, r17	; 0x09
    4212:	00 87       	std	Z+8, r16	; 0x08
    4214:	83 81       	ldd	r24, Z+3	; 0x03
    4216:	82 60       	ori	r24, 0x02	; 2
    4218:	83 83       	std	Z+3, r24	; 0x03
    421a:	80 91 c2 03 	lds	r24, 0x03C2
    421e:	90 91 c3 03 	lds	r25, 0x03C3
    4222:	89 2b       	or	r24, r25
    4224:	71 f4       	brne	.+28     	; 0x4242 <fdevopen+0x8c>
    4226:	f0 93 c3 03 	sts	0x03C3, r31
    422a:	e0 93 c2 03 	sts	0x03C2, r30
    422e:	80 91 c4 03 	lds	r24, 0x03C4
    4232:	90 91 c5 03 	lds	r25, 0x03C5
    4236:	89 2b       	or	r24, r25
    4238:	21 f4       	brne	.+8      	; 0x4242 <fdevopen+0x8c>
    423a:	f0 93 c5 03 	sts	0x03C5, r31
    423e:	e0 93 c4 03 	sts	0x03C4, r30
    4242:	c9 01       	movw	r24, r18
    4244:	df 91       	pop	r29
    4246:	cf 91       	pop	r28
    4248:	1f 91       	pop	r17
    424a:	0f 91       	pop	r16
    424c:	08 95       	ret

0000424e <calloc>:
    424e:	0f 93       	push	r16
    4250:	1f 93       	push	r17
    4252:	cf 93       	push	r28
    4254:	df 93       	push	r29
    4256:	68 9f       	mul	r22, r24
    4258:	80 01       	movw	r16, r0
    425a:	69 9f       	mul	r22, r25
    425c:	10 0d       	add	r17, r0
    425e:	78 9f       	mul	r23, r24
    4260:	10 0d       	add	r17, r0
    4262:	11 24       	eor	r1, r1
    4264:	c8 01       	movw	r24, r16
    4266:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <malloc>
    426a:	ec 01       	movw	r28, r24
    426c:	00 97       	sbiw	r24, 0x00	; 0
    426e:	29 f0       	breq	.+10     	; 0x427a <calloc+0x2c>
    4270:	60 e0       	ldi	r22, 0x00	; 0
    4272:	70 e0       	ldi	r23, 0x00	; 0
    4274:	a8 01       	movw	r20, r16
    4276:	0e 94 43 21 	call	0x4286	; 0x4286 <memset>
    427a:	ce 01       	movw	r24, r28
    427c:	df 91       	pop	r29
    427e:	cf 91       	pop	r28
    4280:	1f 91       	pop	r17
    4282:	0f 91       	pop	r16
    4284:	08 95       	ret

00004286 <memset>:
    4286:	dc 01       	movw	r26, r24
    4288:	01 c0       	rjmp	.+2      	; 0x428c <memset+0x6>
    428a:	6d 93       	st	X+, r22
    428c:	41 50       	subi	r20, 0x01	; 1
    428e:	50 40       	sbci	r21, 0x00	; 0
    4290:	e0 f7       	brcc	.-8      	; 0x428a <memset+0x4>
    4292:	08 95       	ret

00004294 <_exit>:
    4294:	f8 94       	cli

00004296 <__stop_program>:
    4296:	ff cf       	rjmp	.-2      	; 0x4296 <__stop_program>
