
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000256  00800100  00004014  000040a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004014  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800356  00800356  000042fe  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  00004300  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002591  00000000  00000000  00006ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00009051  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001dc  00000000  00000000  00009091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000131c  00000000  00000000  0000926d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003ec  00000000  00000000  0000a589  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e83  00000000  00000000  0000a975  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  0000c7f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d10  00000000  00000000  0000c938  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000010bb  00000000  00000000  0000d648  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  0000e703  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__vector_11>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      8c:	0f 05       	cpc	r16, r15
      8e:	20 05       	cpc	r18, r0
      90:	38 05       	cpc	r19, r8
      92:	4b 05       	cpc	r20, r11
      94:	5f 05       	cpc	r21, r15
      96:	72 05       	cpc	r23, r2
      98:	86 05       	cpc	r24, r6
      9a:	9b 05       	cpc	r25, r11
      9c:	af 05       	cpc	r26, r15
      9e:	c2 05       	cpc	r28, r2
      a0:	c6 05       	cpc	r28, r6
      a2:	d6 05       	cpc	r29, r6
      a4:	da 05       	cpc	r29, r10
      a6:	e8 05       	cpc	r30, r8
      a8:	ec 05       	cpc	r30, r12
      aa:	fa 05       	cpc	r31, r10
      ac:	fe 05       	cpc	r31, r14
      ae:	0d 06       	cpc	r0, r29
      b0:	11 06       	cpc	r1, r17
      b2:	1f 06       	cpc	r1, r31
      b4:	22 06       	cpc	r2, r18
      b6:	31 06       	cpc	r3, r17
      b8:	35 06       	cpc	r3, r21
      ba:	54 06       	cpc	r5, r20
      bc:	45 06       	cpc	r4, r21
      be:	58 06       	cpc	r5, r24
      c0:	5c 06       	cpc	r5, r28
      c2:	6a 06       	cpc	r6, r26
      c4:	6d 06       	cpc	r6, r29
      c6:	7c 06       	cpc	r7, r28
      c8:	80 06       	cpc	r8, r16
      ca:	8e 06       	cpc	r8, r30
      cc:	94 06       	cpc	r9, r20
      ce:	ad 06       	cpc	r10, r29
      d0:	b9 06       	cpc	r11, r25
      d2:	d6 06       	cpc	r13, r22
      d4:	e2 06       	cpc	r14, r18
      d6:	ff 06       	cpc	r15, r31
      d8:	0b 07       	cpc	r16, r27
      da:	28 07       	cpc	r18, r24
      dc:	34 07       	cpc	r19, r20
      de:	51 07       	cpc	r21, r17
      e0:	e9 09       	sbc	r30, r9
      e2:	13 0a       	sbc	r1, r19
      e4:	35 0a       	sbc	r3, r21
      e6:	78 0a       	sbc	r7, r24
      e8:	42 0a       	sbc	r4, r18
      ea:	4d 0a       	sbc	r4, r29
      ec:	58 0a       	sbc	r5, r24
      ee:	62 0a       	sbc	r6, r18
      f0:	6d 0a       	sbc	r6, r29
      f2:	b2 0a       	sbc	r11, r18
      f4:	90 0a       	sbc	r9, r16
      f6:	78 0a       	sbc	r7, r24
      f8:	7e 0a       	sbc	r7, r30
      fa:	31 0b       	sbc	r19, r17
      fc:	90 0a       	sbc	r9, r16
      fe:	35 0b       	sbc	r19, r21
     100:	35 0b       	sbc	r19, r21
     102:	35 0b       	sbc	r19, r21
     104:	35 0b       	sbc	r19, r21
     106:	35 0b       	sbc	r19, r21
     108:	35 0b       	sbc	r19, r21
     10a:	35 0b       	sbc	r19, r21
     10c:	35 0b       	sbc	r19, r21
     10e:	9b 0a       	sbc	r9, r27
     110:	aa 0a       	sbc	r10, r26
     112:	b2 0a       	sbc	r11, r18
     114:	bc 0a       	sbc	r11, r28
     116:	c0 0a       	sbc	r12, r16
     118:	cd 0a       	sbc	r12, r29
     11a:	31 0b       	sbc	r19, r17
     11c:	d3 0a       	sbc	r13, r19
     11e:	e1 0a       	sbc	r14, r17
     120:	ed 0a       	sbc	r14, r29
     122:	fa 0a       	sbc	r15, r26
     124:	0f 0b       	sbc	r16, r31
     126:	1c 0b       	sbc	r17, r28
     128:	87 0d       	add	r24, r7
     12a:	ae 0d       	add	r26, r14
     12c:	d0 0d       	add	r29, r0
     12e:	dd 0d       	add	r29, r13
     130:	e7 0d       	add	r30, r7
     132:	f2 0d       	add	r31, r2
     134:	fd 0d       	add	r31, r13
     136:	dc 0e       	add	r13, r28
     138:	dc 0e       	add	r13, r28
     13a:	dc 0e       	add	r13, r28
     13c:	dc 0e       	add	r13, r28
     13e:	dc 0e       	add	r13, r28
     140:	dc 0e       	add	r13, r28
     142:	dc 0e       	add	r13, r28
     144:	dc 0e       	add	r13, r28
     146:	01 0e       	add	r0, r17
     148:	08 0e       	add	r0, r24
     14a:	d8 0e       	add	r13, r24
     14c:	17 0e       	add	r1, r23
     14e:	22 0e       	add	r2, r18
     150:	2c 0e       	add	r2, r28
     152:	d8 0e       	add	r13, r24
     154:	40 0e       	add	r4, r16
     156:	d8 0e       	add	r13, r24
     158:	52 0e       	add	r5, r18
     15a:	5a 0e       	add	r5, r26
     15c:	64 0e       	add	r6, r20
     15e:	68 0e       	add	r6, r24
     160:	75 0e       	add	r7, r21
     162:	d8 0e       	add	r13, r24
     164:	7b 0e       	add	r7, r27
     166:	89 0e       	add	r8, r25
     168:	95 0e       	add	r9, r21
     16a:	a2 0e       	add	r10, r18
     16c:	b7 0e       	add	r11, r23
     16e:	c4 0e       	add	r12, r20
     170:	b3 11       	cpse	r27, r3
     172:	d9 11       	cpse	r29, r9
     174:	fb 11       	cpse	r31, r11
     176:	38 12       	cpse	r3, r24
     178:	08 12       	cpse	r0, r24
     17a:	13 12       	cpse	r1, r19
     17c:	1e 12       	cpse	r1, r30
     17e:	22 12       	cpse	r2, r18
     180:	2d 12       	cpse	r2, r29
     182:	80 12       	cpse	r8, r16
     184:	54 12       	cpse	r5, r20
     186:	38 12       	cpse	r3, r24
     188:	42 12       	cpse	r4, r18
     18a:	36 13       	cpse	r19, r22
     18c:	54 12       	cpse	r5, r20
     18e:	5f 12       	cpse	r5, r31
     190:	66 12       	cpse	r6, r22
     192:	36 13       	cpse	r19, r22
     194:	75 12       	cpse	r7, r21
     196:	80 12       	cpse	r8, r16
     198:	8a 12       	cpse	r8, r26
     19a:	36 13       	cpse	r19, r22
     19c:	9e 12       	cpse	r9, r30
     19e:	36 13       	cpse	r19, r22
     1a0:	b0 12       	cpse	r11, r16
     1a2:	b8 12       	cpse	r11, r24
     1a4:	c2 12       	cpse	r12, r18
     1a6:	c6 12       	cpse	r12, r22
     1a8:	d3 12       	cpse	r13, r19
     1aa:	36 13       	cpse	r19, r22
     1ac:	d9 12       	cpse	r13, r25
     1ae:	e7 12       	cpse	r14, r23
     1b0:	f3 12       	cpse	r15, r19
     1b2:	00 13       	cpse	r16, r16
     1b4:	15 13       	cpse	r17, r21
     1b6:	22 13       	cpse	r18, r18
     1b8:	0e 16       	cp	r0, r30
     1ba:	35 16       	cp	r3, r21
     1bc:	57 16       	cp	r5, r23
     1be:	92 16       	cp	r9, r18
     1c0:	64 16       	cp	r6, r20
     1c2:	6d 16       	cp	r6, r29
     1c4:	78 16       	cp	r7, r24
     1c6:	7c 16       	cp	r7, r28
     1c8:	87 16       	cp	r8, r23
     1ca:	3a 17       	cp	r19, r26
     1cc:	ae 16       	cp	r10, r30
     1ce:	92 16       	cp	r9, r18
     1d0:	9c 16       	cp	r9, r28
     1d2:	72 17       	cp	r23, r18
     1d4:	ae 16       	cp	r10, r30
     1d6:	b9 16       	cp	r11, r25
     1d8:	c0 16       	cp	r12, r16
     1da:	72 17       	cp	r23, r18
     1dc:	cf 16       	cp	r12, r31
     1de:	3a 17       	cp	r19, r26
     1e0:	da 16       	cp	r13, r26
     1e2:	72 17       	cp	r23, r18
     1e4:	ee 16       	cp	r14, r30
     1e6:	72 17       	cp	r23, r18
     1e8:	00 17       	cp	r16, r16
     1ea:	06 17       	cp	r16, r22
     1ec:	10 17       	cp	r17, r16
     1ee:	14 17       	cp	r17, r20
     1f0:	21 17       	cp	r18, r17
     1f2:	72 17       	cp	r23, r18
     1f4:	27 17       	cp	r18, r23
     1f6:	35 17       	cp	r19, r21
     1f8:	3a 17       	cp	r19, r26
     1fa:	44 17       	cp	r20, r20
     1fc:	53 17       	cp	r21, r19
     1fe:	5d 17       	cp	r21, r29

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	d0 e4       	ldi	r29, 0x40	; 64
     208:	de bf       	out	0x3e, r29	; 62
     20a:	cd bf       	out	0x3d, r28	; 61

0000020c <__do_copy_data>:
     20c:	13 e0       	ldi	r17, 0x03	; 3
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	e4 e1       	ldi	r30, 0x14	; 20
     214:	f0 e4       	ldi	r31, 0x40	; 64
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a6 35       	cpi	r26, 0x56	; 86
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	13 e0       	ldi	r17, 0x03	; 3
     228:	a6 e5       	ldi	r26, 0x56	; 86
     22a:	b3 e0       	ldi	r27, 0x03	; 3
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	ae 37       	cpi	r26, 0x7E	; 126
     232:	b1 07       	cpc	r27, r17
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 8c 02 	call	0x518	; 0x518 <main>
     23a:	0c 94 08 20 	jmp	0x4010	; 0x4010 <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <_ZN16OrangutanDigital11isInputHighEh>:


	// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
	// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
	// the pin.
	inline static unsigned char isInputHigh(unsigned char pin)
     242:	48 2f       	mov	r20, r24
		io->pinRegister = 0;
		io->portRegister = 0;
		io->ddrRegister = 0;
		io->bitmask = 0;

		if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     244:	88 30       	cpi	r24, 0x08	; 8
     246:	58 f4       	brcc	.+22     	; 0x25e <_ZN16OrangutanDigital11isInputHighEh+0x1c>
		{
			io->pinRegister = (unsigned char*)&PIND;
			io->portRegister = (unsigned char*)&PORTD;
			io->ddrRegister = (unsigned char*)&DDRD;
			io->bitmask = 1 << pin;
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <_ZN16OrangutanDigital11isInputHighEh+0x10>
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	4a 95       	dec	r20
     254:	e2 f7       	brpl	.-8      	; 0x24e <_ZN16OrangutanDigital11isInputHighEh+0xc>
     256:	98 2f       	mov	r25, r24
     258:	e9 e2       	ldi	r30, 0x29	; 41
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	36 c0       	rjmp	.+108    	; 0x2ca <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)

		else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     25e:	80 31       	cpi	r24, 0x10	; 16
     260:	78 f4       	brcc	.+30     	; 0x280 <_ZN16OrangutanDigital11isInputHighEh+0x3e>
		{
			io->pinRegister = (unsigned char*)&PINB;
			io->portRegister = (unsigned char*)&PORTB;
			io->ddrRegister = (unsigned char*)&DDRB;
			io->bitmask = 1 << (pin - 8);
     262:	28 2f       	mov	r18, r24
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	28 50       	subi	r18, 0x08	; 8
     268:	30 40       	sbci	r19, 0x00	; 0
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	02 c0       	rjmp	.+4      	; 0x274 <_ZN16OrangutanDigital11isInputHighEh+0x32>
     270:	88 0f       	add	r24, r24
     272:	99 1f       	adc	r25, r25
     274:	2a 95       	dec	r18
     276:	e2 f7       	brpl	.-8      	; 0x270 <_ZN16OrangutanDigital11isInputHighEh+0x2e>
     278:	98 2f       	mov	r25, r24
     27a:	e3 e2       	ldi	r30, 0x23	; 35
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	25 c0       	rjmp	.+74     	; 0x2ca <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     280:	88 31       	cpi	r24, 0x18	; 24
     282:	78 f4       	brcc	.+30     	; 0x2a2 <_ZN16OrangutanDigital11isInputHighEh+0x60>
		{
			io->pinRegister = (unsigned char*)&PINC;
			io->portRegister = (unsigned char*)&PORTC;
			io->ddrRegister = (unsigned char*)&DDRC;
			io->bitmask = 1 << (pin - 16);
     284:	28 2f       	mov	r18, r24
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	20 51       	subi	r18, 0x10	; 16
     28a:	30 40       	sbci	r19, 0x00	; 0
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	02 c0       	rjmp	.+4      	; 0x296 <_ZN16OrangutanDigital11isInputHighEh+0x54>
     292:	88 0f       	add	r24, r24
     294:	99 1f       	adc	r25, r25
     296:	2a 95       	dec	r18
     298:	e2 f7       	brpl	.-8      	; 0x292 <_ZN16OrangutanDigital11isInputHighEh+0x50>
     29a:	98 2f       	mov	r25, r24
     29c:	e6 e2       	ldi	r30, 0x26	; 38
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	14 c0       	rjmp	.+40     	; 0x2ca <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     2a2:	80 32       	cpi	r24, 0x20	; 32
     2a4:	20 f0       	brcs	.+8      	; 0x2ae <_ZN16OrangutanDigital11isInputHighEh+0x6c>
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	e0 e0       	ldi	r30, 0x00	; 0
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	0e c0       	rjmp	.+28     	; 0x2ca <_ZN16OrangutanDigital11isInputHighEh+0x88>
		{
			io->pinRegister = (unsigned char*)&PINA;
			io->portRegister = (unsigned char*)&PORTA;
			io->ddrRegister = (unsigned char*)&DDRA;
			io->bitmask = 1 << (31 - pin);
     2ae:	2f e1       	ldi	r18, 0x1F	; 31
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	28 1b       	sub	r18, r24
     2b4:	31 09       	sbc	r19, r1
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <_ZN16OrangutanDigital11isInputHighEh+0x7e>
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	2a 95       	dec	r18
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <_ZN16OrangutanDigital11isInputHighEh+0x7a>
     2c4:	98 2f       	mov	r25, r24
     2c6:	e0 e2       	ldi	r30, 0x20	; 32
     2c8:	f0 e0       	ldi	r31, 0x00	; 0

	// low-level method for reading the value of the PIN register for an pin or set of pins
	// described by an IOStruct pointer.
	inline static unsigned char getInputValue(struct IOStruct* ioPin)
	{
		return *(ioPin->pinRegister) & ioPin->bitmask;
     2ca:	80 81       	ld	r24, Z
	inline static unsigned char isInputHigh(unsigned char pin)
	{
		struct IOStruct registers;
		getIORegisters(&registers, pin);
		return getInputValue(&registers);
	}
     2cc:	89 23       	and	r24, r25
     2ce:	08 95       	ret

000002d0 <__cxa_guard_acquire>:

extern "C" int __cxa_guard_acquire(__guard *); 
extern "C" void __cxa_guard_release (__guard *); 
extern "C" void __cxa_guard_abort (__guard *); 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);}; 
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 e0       	ldi	r18, 0x00	; 0
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	88 23       	and	r24, r24
     2da:	11 f4       	brne	.+4      	; 0x2e0 <__cxa_guard_acquire+0x10>
     2dc:	21 e0       	ldi	r18, 0x01	; 1
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	c9 01       	movw	r24, r18
     2e2:	08 95       	ret

000002e4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;}; 
     2e4:	fc 01       	movw	r30, r24
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	80 83       	st	Z, r24
     2ea:	08 95       	ret

000002ec <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
     2ec:	08 95       	ret

000002ee <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void); 
void __cxa_pure_virtual(void) {}; 
     2ee:	08 95       	ret

000002f0 <_Z15button_debounceiPi>:
	}
	return 1;
}*/


bool button_debounce(int counter, int *pstateButton)
     2f0:	0f 93       	push	r16
     2f2:	1f 93       	push	r17
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	8c 01       	movw	r16, r24
     2fa:	eb 01       	movw	r28, r22
{
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && OrangutanDigital::isInputHigh(IO_D0)){
     2fc:	88 81       	ld	r24, Y
     2fe:	99 81       	ldd	r25, Y+1	; 0x01
     300:	89 2b       	or	r24, r25
     302:	69 f4       	brne	.+26     	; 0x31e <_Z15button_debounceiPi+0x2e>
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     30a:	88 23       	and	r24, r24
     30c:	41 f0       	breq	.+16     	; 0x31e <_Z15button_debounceiPi+0x2e>
		counterRefPush = counter;
     30e:	10 93 5f 03 	sts	0x035F, r17
     312:	00 93 5e 03 	sts	0x035E, r16
		*pstateButton = PRESSED;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	99 83       	std	Y+1, r25	; 0x01
     31c:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     31e:	88 81       	ld	r24, Y
     320:	99 81       	ldd	r25, Y+1	; 0x01
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f9 f4       	brne	.+62     	; 0x364 <_Z15button_debounceiPi+0x74>
		if(counter - counterRefPush > 15){
     326:	80 91 5e 03 	lds	r24, 0x035E
     32a:	90 91 5f 03 	lds	r25, 0x035F
     32e:	98 01       	movw	r18, r16
     330:	28 1b       	sub	r18, r24
     332:	39 0b       	sbc	r19, r25
     334:	20 31       	cpi	r18, 0x10	; 16
     336:	31 05       	cpc	r19, r1
     338:	74 f0       	brlt	.+28     	; 0x356 <_Z15button_debounceiPi+0x66>
			if(!OrangutanDigital::isInputHigh(IO_D0)){
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     340:	88 23       	and	r24, r24
     342:	81 f4       	brne	.+32     	; 0x364 <_Z15button_debounceiPi+0x74>
				counterRefRel = counter;
     344:	10 93 5d 03 	sts	0x035D, r17
     348:	00 93 5c 03 	sts	0x035C, r16
				*pstateButton = RELEASED;
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	99 83       	std	Y+1, r25	; 0x01
     352:	88 83       	st	Y, r24
     354:	07 c0       	rjmp	.+14     	; 0x364 <_Z15button_debounceiPi+0x74>
			}
		}
		else if(!OrangutanDigital::isInputHigh(IO_D0)){
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     35c:	88 23       	and	r24, r24
     35e:	11 f4       	brne	.+4      	; 0x364 <_Z15button_debounceiPi+0x74>
			*pstateButton = NONE;
     360:	19 82       	std	Y+1, r1	; 0x01
     362:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     364:	88 81       	ld	r24, Y
     366:	99 81       	ldd	r25, Y+1	; 0x01
     368:	02 97       	sbiw	r24, 0x02	; 2
     36a:	d9 f4       	brne	.+54     	; 0x3a2 <_Z15button_debounceiPi+0xb2>
		if(OrangutanDigital::isInputHigh(IO_D0)){
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     372:	88 23       	and	r24, r24
     374:	49 f0       	breq	.+18     	; 0x388 <_Z15button_debounceiPi+0x98>
			*pstateButton = PRESSED;
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	99 83       	std	Y+1, r25	; 0x01
     37c:	88 83       	st	Y, r24
			counterRefPush = counter;
     37e:	10 93 5f 03 	sts	0x035F, r17
     382:	00 93 5e 03 	sts	0x035E, r16
     386:	0d c0       	rjmp	.+26     	; 0x3a2 <_Z15button_debounceiPi+0xb2>
		}
		else if(counter - counterRefRel > 15){
     388:	80 91 5c 03 	lds	r24, 0x035C
     38c:	90 91 5d 03 	lds	r25, 0x035D
     390:	08 1b       	sub	r16, r24
     392:	19 0b       	sbc	r17, r25
     394:	00 31       	cpi	r16, 0x10	; 16
     396:	11 05       	cpc	r17, r1
     398:	24 f0       	brlt	.+8      	; 0x3a2 <_Z15button_debounceiPi+0xb2>
			*pstateButton = NONE;
     39a:	19 82       	std	Y+1, r1	; 0x01
     39c:	18 82       	st	Y, r1
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <_Z15button_debounceiPi+0xb4>
			return true;
     3a2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	08 95       	ret

000003ae <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>:
	OrangutanLCD::print("END");
	}
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor, int totalStepLength1, int totalStepLength2, int totalStepLength3, int totalStepLength4, int totalStepLength5, int highLength1, int highLength2, int highLength3, int highLength4, int highLength5)
     3ae:	2f 92       	push	r2
     3b0:	3f 92       	push	r3
     3b2:	4f 92       	push	r4
     3b4:	5f 92       	push	r5
     3b6:	6f 92       	push	r6
     3b8:	7f 92       	push	r7
     3ba:	8f 92       	push	r8
     3bc:	9f 92       	push	r9
     3be:	af 92       	push	r10
     3c0:	bf 92       	push	r11
     3c2:	cf 92       	push	r12
     3c4:	df 92       	push	r13
     3c6:	ef 92       	push	r14
     3c8:	ff 92       	push	r15
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	df 93       	push	r29
     3d0:	cf 93       	push	r28
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
     3d6:	2c 01       	movw	r4, r24
     3d8:	1a 01       	movw	r2, r20
     3da:	39 01       	movw	r6, r18
{
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     3dc:	fc 01       	movw	r30, r24
     3de:	e6 1b       	sub	r30, r22
     3e0:	f7 0b       	sbc	r31, r23
     3e2:	cf 01       	movw	r24, r30
     3e4:	b4 01       	movw	r22, r8
     3e6:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__divmodhi4>
     3ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3ec:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3ee:	82 17       	cp	r24, r18
     3f0:	93 07       	cpc	r25, r19
     3f2:	34 f4       	brge	.+12     	; 0x400 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
     3f4:	67 28       	or	r6, r7
     3f6:	21 f0       	breq	.+8      	; 0x400 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     3f8:	80 91 56 03 	lds	r24, 0x0356
     3fc:	81 60       	ori	r24, 0x01	; 1
     3fe:	03 c0       	rjmp	.+6      	; 0x406 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x58>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     400:	80 91 56 03 	lds	r24, 0x0356
     404:	8e 7f       	andi	r24, 0xFE	; 254
     406:	80 93 56 03 	sts	0x0356, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     40a:	cf 01       	movw	r24, r30
     40c:	6d 89       	ldd	r22, Y+21	; 0x15
     40e:	7e 89       	ldd	r23, Y+22	; 0x16
     410:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__divmodhi4>
     414:	2f 8d       	ldd	r18, Y+31	; 0x1f
     416:	38 a1       	ldd	r19, Y+32	; 0x20
     418:	82 17       	cp	r24, r18
     41a:	93 07       	cpc	r25, r19
     41c:	34 f4       	brge	.+12     	; 0x42a <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
     41e:	01 2b       	or	r16, r17
     420:	21 f0       	breq	.+8      	; 0x42a <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     422:	80 91 56 03 	lds	r24, 0x0356
     426:	88 60       	ori	r24, 0x08	; 8
     428:	03 c0       	rjmp	.+6      	; 0x430 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x82>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     42a:	80 91 56 03 	lds	r24, 0x0356
     42e:	87 7f       	andi	r24, 0xF7	; 247
     430:	80 93 56 03 	sts	0x0356, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     434:	cf 01       	movw	r24, r30
     436:	6f 89       	ldd	r22, Y+23	; 0x17
     438:	78 8d       	ldd	r23, Y+24	; 0x18
     43a:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__divmodhi4>
     43e:	29 a1       	ldd	r18, Y+33	; 0x21
     440:	3a a1       	ldd	r19, Y+34	; 0x22
     442:	82 17       	cp	r24, r18
     444:	93 07       	cpc	r25, r19
     446:	34 f4       	brge	.+12     	; 0x454 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
     448:	ef 28       	or	r14, r15
     44a:	21 f0       	breq	.+8      	; 0x454 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     44c:	80 91 56 03 	lds	r24, 0x0356
     450:	80 64       	ori	r24, 0x40	; 64
     452:	03 c0       	rjmp	.+6      	; 0x45a <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xac>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     454:	80 91 56 03 	lds	r24, 0x0356
     458:	8f 7b       	andi	r24, 0xBF	; 191
     45a:	80 93 56 03 	sts	0x0356, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     45e:	cf 01       	movw	r24, r30
     460:	69 8d       	ldd	r22, Y+25	; 0x19
     462:	7a 8d       	ldd	r23, Y+26	; 0x1a
     464:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__divmodhi4>
     468:	2b a1       	ldd	r18, Y+35	; 0x23
     46a:	3c a1       	ldd	r19, Y+36	; 0x24
     46c:	82 17       	cp	r24, r18
     46e:	93 07       	cpc	r25, r19
     470:	34 f4       	brge	.+12     	; 0x47e <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
     472:	cd 28       	or	r12, r13
     474:	21 f0       	breq	.+8      	; 0x47e <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     476:	80 91 57 03 	lds	r24, 0x0357
     47a:	82 60       	ori	r24, 0x02	; 2
     47c:	03 c0       	rjmp	.+6      	; 0x484 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd6>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     47e:	80 91 57 03 	lds	r24, 0x0357
     482:	8d 7f       	andi	r24, 0xFD	; 253
     484:	80 93 57 03 	sts	0x0357, r24
	}

	if( ((counter - counterRefFive) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     488:	c2 01       	movw	r24, r4
     48a:	82 19       	sub	r24, r2
     48c:	93 09       	sbc	r25, r3
     48e:	6b 8d       	ldd	r22, Y+27	; 0x1b
     490:	7c 8d       	ldd	r23, Y+28	; 0x1c
     492:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__divmodhi4>
     496:	2d a1       	ldd	r18, Y+37	; 0x25
     498:	3e a1       	ldd	r19, Y+38	; 0x26
     49a:	82 17       	cp	r24, r18
     49c:	93 07       	cpc	r25, r19
     49e:	34 f4       	brge	.+12     	; 0x4ac <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
     4a0:	ab 28       	or	r10, r11
     4a2:	21 f0       	breq	.+8      	; 0x4ac <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     4a4:	80 91 57 03 	lds	r24, 0x0357
     4a8:	80 61       	ori	r24, 0x10	; 16
     4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x104>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     4ac:	80 91 57 03 	lds	r24, 0x0357
     4b0:	8f 7e       	andi	r24, 0xEF	; 239
     4b2:	80 93 57 03 	sts	0x0357, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     4b6:	80 e4       	ldi	r24, 0x40	; 64
     4b8:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
	i2c_write(0x2);									// write command byte
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     4c2:	80 91 56 03 	lds	r24, 0x0356
     4c6:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     4ca:	80 91 57 03 	lds	r24, 0x0357
     4ce:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
	i2c_stop();                            // set stop conditon = release bus
     4d2:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <_Z8i2c_stopv>

	i2c_start(I2C2+I2C_WRITE);
     4d6:	82 e4       	ldi	r24, 0x42	; 66
     4d8:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
	i2c_write(0x2);
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
	i2c_write(u_outputByte0.outputByte0);
     4e2:	80 91 58 03 	lds	r24, 0x0358
     4e6:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
	i2c_write(u_outputByte1.outputByte1);
     4ea:	80 91 59 03 	lds	r24, 0x0359
     4ee:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
}
     4f2:	cf 91       	pop	r28
     4f4:	df 91       	pop	r29
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	df 90       	pop	r13
     500:	cf 90       	pop	r12
     502:	bf 90       	pop	r11
     504:	af 90       	pop	r10
     506:	9f 90       	pop	r9
     508:	8f 90       	pop	r8
     50a:	7f 90       	pop	r7
     50c:	6f 90       	pop	r6
     50e:	5f 90       	pop	r5
     510:	4f 90       	pop	r4
     512:	3f 90       	pop	r3
     514:	2f 90       	pop	r2
     516:	08 95       	ret

00000518 <main>:
//int button_debounce(int counter, int *pcounterRefPush, int *pcounterRefRel, int *pstateButton);

bool button_debounce(int counter, int *pstateButton);


int main()   
     518:	2f 92       	push	r2
     51a:	3f 92       	push	r3
     51c:	4f 92       	push	r4
     51e:	5f 92       	push	r5
     520:	6f 92       	push	r6
     522:	7f 92       	push	r7
     524:	8f 92       	push	r8
     526:	9f 92       	push	r9
     528:	af 92       	push	r10
     52a:	bf 92       	push	r11
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	df 93       	push	r29
     53a:	cf 93       	push	r28
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	ce 54       	subi	r28, 0x4E	; 78
     542:	d0 40       	sbci	r29, 0x00	; 0
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
	print35 = 1;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     54e:	1a 82       	std	Y+2, r1	; 0x02
     550:	19 82       	std	Y+1, r1	; 0x01
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     552:	10 92 56 03 	sts	0x0356, r1
	u_motorByte1.motorByte1 = 0;  // initialize motorByte1
     556:	10 92 57 03 	sts	0x0357, r1
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     55a:	8f ef       	ldi	r24, 0xFF	; 255
     55c:	80 93 58 03 	sts	0x0358, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
     560:	80 93 59 03 	sts	0x0359, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
     564:	10 92 5a 03 	sts	0x035A, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
     568:	10 92 5b 03 	sts	0x035B, r1
	
	OrangutanLCD::clear();
     56c:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("DASCH CLEANER 2");
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
	OrangutanLCD::gotoXY(0,1);
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	61 e0       	ldi	r22, 0x01	; 1
     57c:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
	OrangutanLCD::print("REV: 25");
     580:	80 e1       	ldi	r24, 0x10	; 16
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
// another C++ file.
inline unsigned long get_ms() { return OrangutanTime::ms(); }
inline unsigned long millis() { return OrangutanTime::ms(); }

inline void delay(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
inline void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
     588:	80 ed       	ldi	r24, 0xD0	; 208
     58a:	97 e0       	ldi	r25, 0x07	; 7
     58c:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>
	delay_ms(2000);
	
	OrangutanLCD::clear();
     590:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("BEGIN ");
     594:	88 e1       	ldi	r24, 0x18	; 24
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     59c:	88 ee       	ldi	r24, 0xE8	; 232
     59e:	93 e0       	ldi	r25, 0x03	; 3
     5a0:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>
	
	delay_ms(1000);

    i2c_init();                                // init I2C interface
     5a4:	0e 94 14 18 	call	0x3028	; 0x3028 <_Z8i2c_initv>
	
    OrangutanLCD::print("INIT ");
     5a8:	8f e1       	ldi	r24, 0x1F	; 31
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
     5b0:	80 e4       	ldi	r24, 0x40	; 64
     5b2:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
     5b6:	c8 2e       	mov	r12, r24
	i2c_stop();
     5b8:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <_Z8i2c_stopv>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
     5bc:	82 e4       	ldi	r24, 0x42	; 66
     5be:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
     5c2:	08 2f       	mov	r16, r24
	i2c_stop();
     5c4:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <_Z8i2c_stopv>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
     5c8:	84 e4       	ldi	r24, 0x44	; 68
     5ca:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
     5ce:	e8 2e       	mov	r14, r24
	i2c_stop();
     5d0:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <_Z8i2c_stopv>
    
	OrangutanLCD::clear();
     5d4:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("START ");
     5d8:	85 e2       	ldi	r24, 0x25	; 37
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
     5e0:	10 e0       	ldi	r17, 0x00	; 0
     5e2:	dd 24       	eor	r13, r13
     5e4:	0c 29       	or	r16, r12
     5e6:	1d 29       	or	r17, r13
     5e8:	ff 24       	eor	r15, r15
     5ea:	0e 29       	or	r16, r14
     5ec:	1f 29       	or	r17, r15
     5ee:	01 2b       	or	r16, r17
     5f0:	61 f0       	breq	.+24     	; 0x60a <main+0xf2>
        /* failed to issue start condition(s), possibly no device found */
        
		OrangutanLCD::print("NAK ");
     5f2:	8c e2       	ldi	r24, 0x2C	; 44
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
		i2c_stop();
     5fa:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <_Z8i2c_stopv>
		OrangutanLCD::print("STOP ");
     5fe:	81 e3       	ldi	r24, 0x31	; 49
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     606:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <main+0x2aa0>
    }
	else {
		OrangutanLCD::print("ACK ");
     60a:	87 e3       	ldi	r24, 0x37	; 55
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
        /* issuing start conditions ok, devices accessible */
		OrangutanLCD::print("BINIT ");
     612:	8c e3       	ldi	r24, 0x3C	; 60
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
     61a:	80 e4       	ldi	r24, 0x40	; 64
     61c:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
		i2c_write(0x6);
     620:	86 e0       	ldi	r24, 0x06	; 6
     622:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
		i2c_write(0x0);
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
		i2c_write(0x0);
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
		i2c_stop();
     632:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <_Z8i2c_stopv>
		
		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
     636:	82 e4       	ldi	r24, 0x42	; 66
     638:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
		i2c_write(0x6);
     63c:	86 e0       	ldi	r24, 0x06	; 6
     63e:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
		i2c_write(0x0);
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
		i2c_write(0x0);
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
		i2c_stop();
     64e:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <_Z8i2c_stopv>
     652:	88 ee       	ldi	r24, 0xE8	; 232
     654:	93 e0       	ldi	r25, 0x03	; 3
     656:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>
										//Registers default to input, so I2C3 is fine already


		delay_ms(1000);
		OrangutanLCD::clear();
     65a:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>


		if(OrangutanDigital::isInputHigh(IO_D3))							//Tests if the switch is set to Maintenance Mode
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     664:	88 23       	and	r24, r24
     666:	09 f4       	brne	.+2      	; 0x66a <main+0x152>
     668:	81 c4       	rjmp	.+2306   	; 0xf6c <main+0xa54>
		{
			OrangutanLCD::print("MAINTENANCE");
     66a:	83 e4       	ldi	r24, 0x43	; 67
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     672:	88 ee       	ldi	r24, 0xE8	; 232
     674:	93 e0       	ldi	r25, 0x03	; 3
     676:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>
			
			//initialize
			int print = 0;
			int submode = -1;

			OrangutanLCD::clear();
     67a:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
			OrangutanLCD::print("SELECT MODE");
     67e:	8f e4       	ldi	r24, 0x4F	; 79
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     686:	ee 24       	eor	r14, r14
     688:	ff 24       	eor	r15, r15
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = NONE;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     68a:	c7 01       	movw	r24, r14
     68c:	be 01       	movw	r22, r28
     68e:	6f 5f       	subi	r22, 0xFF	; 255
     690:	7f 4f       	sbci	r23, 0xFF	; 255
     692:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z15button_debounceiPi>
     696:	18 2f       	mov	r17, r24
				counter++;
     698:	08 94       	sec
     69a:	e1 1c       	adc	r14, r1
     69c:	f1 1c       	adc	r15, r1
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>

			OrangutanLCD::clear();
			OrangutanLCD::print("SELECT MODE");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
     6a6:	11 23       	and	r17, r17
     6a8:	81 f3       	breq	.-32     	; 0x68a <main+0x172>
				counter++;
				delay_ms(1);
			}
			buttonTriggered = false;
			counter = 0;
			OrangutanLCD::clear();
     6aa:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
     6ae:	44 24       	eor	r4, r4
     6b0:	55 24       	eor	r5, r5
     6b2:	2f ef       	ldi	r18, 0xFF	; 255
     6b4:	3f ef       	ldi	r19, 0xFF	; 255
     6b6:	3c af       	std	Y+60, r19	; 0x3c
     6b8:	2b af       	std	Y+59, r18	; 0x3b
     6ba:	66 24       	eor	r6, r6
     6bc:	77 24       	eor	r7, r7
     6be:	29 96       	adiw	r28, 0x09	; 9
     6c0:	1f ae       	std	Y+63, r1	; 0x3f
     6c2:	1e ae       	std	Y+62, r1	; 0x3e
     6c4:	29 97       	sbiw	r28, 0x09	; 9
     6c6:	2f 96       	adiw	r28, 0x0f	; 15
     6c8:	1f ae       	std	Y+63, r1	; 0x3f
     6ca:	1e ae       	std	Y+62, r1	; 0x3e
     6cc:	2f 97       	sbiw	r28, 0x0f	; 15
     6ce:	2d 96       	adiw	r28, 0x0d	; 13
     6d0:	1f ae       	std	Y+63, r1	; 0x3f
     6d2:	1e ae       	std	Y+62, r1	; 0x3e
     6d4:	2d 97       	sbiw	r28, 0x0d	; 13
     6d6:	27 96       	adiw	r28, 0x07	; 7
     6d8:	1f ae       	std	Y+63, r1	; 0x3f
     6da:	1e ae       	std	Y+62, r1	; 0x3e
     6dc:	27 97       	sbiw	r28, 0x07	; 7
     6de:	2b 96       	adiw	r28, 0x0b	; 11
     6e0:	1f ae       	std	Y+63, r1	; 0x3f
     6e2:	1e ae       	std	Y+62, r1	; 0x3e
     6e4:	2b 97       	sbiw	r28, 0x0b	; 11
     6e6:	22 24       	eor	r2, r2
     6e8:	33 24       	eor	r3, r3
     6ea:	18 8a       	std	Y+16, r1	; 0x10
     6ec:	1f 86       	std	Y+15, r1	; 0x0f
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     6ee:	84 e4       	ldi	r24, 0x44	; 68
     6f0:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     6fa:	85 e4       	ldi	r24, 0x45	; 69
     6fc:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     700:	0e 94 85 18 	call	0x310a	; 0x310a <_Z11i2c_readAckv>
     704:	80 93 5a 03 	sts	0x035A, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     708:	0e 94 8f 18 	call	0x311e	; 0x311e <_Z11i2c_readNakv>
     70c:	80 93 5b 03 	sts	0x035B, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     710:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <_Z8i2c_stopv>
						stateButton = 0;
					}
				}*/

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     714:	c1 01       	movw	r24, r2
     716:	be 01       	movw	r22, r28
     718:	6f 5f       	subi	r22, 0xFF	; 255
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z15button_debounceiPi>
     720:	08 2f       	mov	r16, r24
							Output only 	--     starts testing each output individually and ends after testing all outputs
							Motor only		--     starts testing each motor individually and ends after testing all motors
							All				--     starts testing each input, then output, then motor, and ends after testing each

				*/
				if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != 0){
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     728:	88 23       	and	r24, r24
     72a:	11 f0       	breq	.+4      	; 0x730 <main+0x218>
     72c:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <main+0x2aac>
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     736:	88 23       	and	r24, r24
     738:	11 f0       	breq	.+4      	; 0x73e <main+0x226>
     73a:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <main+0x2aac>
     73e:	4b ad       	ldd	r20, Y+59	; 0x3b
     740:	5c ad       	ldd	r21, Y+60	; 0x3c
     742:	45 2b       	or	r20, r21
     744:	11 f4       	brne	.+4      	; 0x74a <main+0x232>
     746:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <main+0x2aac>
					state = S0;
					submode = INPUT;
					OrangutanLCD::clear();
     74a:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     74e:	8b e5       	ldi	r24, 0x5B	; 91
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
     75e:	44 24       	eor	r4, r4
     760:	55 24       	eor	r5, r5
     762:	11 e0       	ldi	r17, 0x01	; 1
     764:	1c ae       	std	Y+60, r1	; 0x3c
     766:	1b ae       	std	Y+59, r1	; 0x3b
     768:	66 24       	eor	r6, r6
     76a:	77 24       	eor	r7, r7
					print = 0;
					switched = true;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != 1){
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     772:	88 23       	and	r24, r24
     774:	e9 f0       	breq	.+58     	; 0x7b0 <main+0x298>
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     77c:	88 23       	and	r24, r24
     77e:	c1 f4       	brne	.+48     	; 0x7b0 <main+0x298>
     780:	8b ad       	ldd	r24, Y+59	; 0x3b
     782:	9c ad       	ldd	r25, Y+60	; 0x3c
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	a1 f0       	breq	.+40     	; 0x7b0 <main+0x298>
					state = O0_ON;
					submode = OUTPUT;
					OrangutanLCD::clear();
     788:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("OUTPUTS");
     78c:	83 e6       	ldi	r24, 0x63	; 99
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
     79c:	98 e0       	ldi	r25, 0x08	; 8
     79e:	49 2e       	mov	r4, r25
     7a0:	51 2c       	mov	r5, r1
     7a2:	11 e0       	ldi	r17, 0x01	; 1
     7a4:	a1 e0       	ldi	r26, 0x01	; 1
     7a6:	b0 e0       	ldi	r27, 0x00	; 0
     7a8:	bc af       	std	Y+60, r27	; 0x3c
     7aa:	ab af       	std	Y+59, r26	; 0x3b
     7ac:	66 24       	eor	r6, r6
     7ae:	77 24       	eor	r7, r7
					print = 0;
					switched = true;
				}
				if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != 2){
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     7b6:	88 23       	and	r24, r24
     7b8:	f1 f4       	brne	.+60     	; 0x7f6 <main+0x2de>
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     7c0:	88 23       	and	r24, r24
     7c2:	c9 f0       	breq	.+50     	; 0x7f6 <main+0x2de>
     7c4:	2b ad       	ldd	r18, Y+59	; 0x3b
     7c6:	3c ad       	ldd	r19, Y+60	; 0x3c
     7c8:	22 30       	cpi	r18, 0x02	; 2
     7ca:	31 05       	cpc	r19, r1
     7cc:	a1 f0       	breq	.+40     	; 0x7f6 <main+0x2de>
					state = M1_F;
					submode = MOTOR;
					OrangutanLCD::clear();
     7ce:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MOTORS ");
     7d2:	8b e6       	ldi	r24, 0x6B	; 107
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
     7e2:	80 e2       	ldi	r24, 0x20	; 32
     7e4:	48 2e       	mov	r4, r24
     7e6:	51 2c       	mov	r5, r1
     7e8:	11 e0       	ldi	r17, 0x01	; 1
     7ea:	42 e0       	ldi	r20, 0x02	; 2
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	5c af       	std	Y+60, r21	; 0x3c
     7f0:	4b af       	std	Y+59, r20	; 0x3b
     7f2:	66 24       	eor	r6, r6
     7f4:	77 24       	eor	r7, r7
					print = 0;
					switched = true;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != 3){
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     7fc:	88 23       	and	r24, r24
     7fe:	11 f4       	brne	.+4      	; 0x804 <main+0x2ec>
     800:	0c 94 e5 17 	jmp	0x2fca	; 0x2fca <main+0x2ab2>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     80a:	88 23       	and	r24, r24
     80c:	11 f4       	brne	.+4      	; 0x812 <main+0x2fa>
     80e:	0c 94 e5 17 	jmp	0x2fca	; 0x2fca <main+0x2ab2>
     812:	8b ad       	ldd	r24, Y+59	; 0x3b
     814:	9c ad       	ldd	r25, Y+60	; 0x3c
     816:	03 97       	sbiw	r24, 0x03	; 3
     818:	11 f4       	brne	.+4      	; 0x81e <main+0x306>
     81a:	0c 94 e5 17 	jmp	0x2fca	; 0x2fca <main+0x2ab2>
					state = S0;
					submode = ALL;
					OrangutanLCD::clear();
     81e:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     822:	8b e5       	ldi	r24, 0x5B	; 91
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	61 e0       	ldi	r22, 0x01	; 1
     82e:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
     832:	44 24       	eor	r4, r4
     834:	55 24       	eor	r5, r5
     836:	a3 e0       	ldi	r26, 0x03	; 3
     838:	b0 e0       	ldi	r27, 0x00	; 0
     83a:	bc af       	std	Y+60, r27	; 0x3c
     83c:	ab af       	std	Y+59, r26	; 0x3b
     83e:	66 24       	eor	r6, r6
     840:	77 24       	eor	r7, r7
					plateLoadMotor = 0;
					fixtureMotor = 0;
					brush1Motor = 0;
					brush2Motor = 0;
					paperTowelMotor = 0;
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	80 93 58 03 	sts	0x0358, r24
					u_outputByte1.outputByte1 = 255;  // reset outputByte1
     848:	80 93 59 03 	sts	0x0359, r24
     84c:	29 96       	adiw	r28, 0x09	; 9
     84e:	1f ae       	std	Y+63, r1	; 0x3f
     850:	1e ae       	std	Y+62, r1	; 0x3e
     852:	29 97       	sbiw	r28, 0x09	; 9
     854:	2f 96       	adiw	r28, 0x0f	; 15
     856:	1f ae       	std	Y+63, r1	; 0x3f
     858:	1e ae       	std	Y+62, r1	; 0x3e
     85a:	2f 97       	sbiw	r28, 0x0f	; 15
     85c:	2d 96       	adiw	r28, 0x0d	; 13
     85e:	1f ae       	std	Y+63, r1	; 0x3f
     860:	1e ae       	std	Y+62, r1	; 0x3e
     862:	2d 97       	sbiw	r28, 0x0d	; 13
     864:	27 96       	adiw	r28, 0x07	; 7
     866:	1f ae       	std	Y+63, r1	; 0x3f
     868:	1e ae       	std	Y+62, r1	; 0x3e
     86a:	27 97       	sbiw	r28, 0x07	; 7
     86c:	2b 96       	adiw	r28, 0x0b	; 11
     86e:	1f ae       	std	Y+63, r1	; 0x3f
     870:	1e ae       	std	Y+62, r1	; 0x3e
     872:	2b 97       	sbiw	r28, 0x0b	; 11
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
     874:	00 23       	and	r16, r16
     876:	09 f4       	brne	.+2      	; 0x87a <main+0x362>
     878:	c5 c0       	rjmp	.+394    	; 0xa04 <main+0x4ec>
					if(state <= S7){				//if it's doing the sensors
     87a:	b8 e0       	ldi	r27, 0x08	; 8
     87c:	4b 16       	cp	r4, r27
     87e:	51 04       	cpc	r5, r1
     880:	fc f4       	brge	.+62     	; 0x8c0 <main+0x3a8>
						OrangutanLCD::gotoXY(0,1);
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	61 e0       	ldi	r22, 0x01	; 1
     886:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
						buttonTriggered = false;
						state ++;
     88a:	08 94       	sec
     88c:	41 1c       	adc	r4, r1
     88e:	51 1c       	adc	r5, r1
						counterRef = counter;
						print = 0;
						if(state == S7 + 1){		//accounts for possible end of maintenance mode after sensors
     890:	28 e0       	ldi	r18, 0x08	; 8
     892:	42 16       	cp	r4, r18
     894:	51 04       	cpc	r5, r1
     896:	09 f0       	breq	.+2      	; 0x89a <main+0x382>
     898:	b1 c0       	rjmp	.+354    	; 0x9fc <main+0x4e4>
							OrangutanLCD::clear();
     89a:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
							if(submode == 0){
     89e:	4b ad       	ldd	r20, Y+59	; 0x3b
     8a0:	5c ad       	ldd	r21, Y+60	; 0x3c
     8a2:	45 2b       	or	r20, r21
     8a4:	11 f4       	brne	.+4      	; 0x8aa <main+0x392>
     8a6:	0c 94 05 18 	jmp	0x300a	; 0x300a <main+0x2af2>
								state = DONEM;
							}
							else{
								OrangutanLCD::print("OUTPUTS");
     8aa:	83 e6       	ldi	r24, 0x63	; 99
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
								OrangutanLCD::gotoXY(0,1);
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	61 e0       	ldi	r22, 0x01	; 1
     8b6:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
     8ba:	38 8a       	std	Y+16, r3	; 0x10
     8bc:	2f 86       	std	Y+15, r2	; 0x0f
     8be:	52 c1       	rjmp	.+676    	; 0xb64 <main+0x64c>
     8c0:	c2 01       	movw	r24, r4
     8c2:	81 70       	andi	r24, 0x01	; 1
     8c4:	90 70       	andi	r25, 0x00	; 0
							}
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
     8c6:	50 e2       	ldi	r21, 0x20	; 32
     8c8:	45 16       	cp	r4, r21
     8ca:	51 04       	cpc	r5, r1
     8cc:	7c f5       	brge	.+94     	; 0x92c <main+0x414>
						if(state % 2 == 0){			//current state is an 'on' state
     8ce:	89 2b       	or	r24, r25
     8d0:	49 f4       	brne	.+18     	; 0x8e4 <main+0x3cc>
							OrangutanLCD::gotoXY(13,1);
     8d2:	8d e0       	ldi	r24, 0x0D	; 13
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("OFF");
     8da:	83 e7       	ldi	r24, 0x73	; 115
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     8e2:	04 c0       	rjmp	.+8      	; 0x8ec <main+0x3d4>
						}
						else{						//current state is an 'off' state
							OrangutanLCD::gotoXY(0,1);
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	61 e0       	ldi	r22, 0x01	; 1
     8e8:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
						}
						buttonTriggered = false;
						state ++;
     8ec:	08 94       	sec
     8ee:	41 1c       	adc	r4, r1
     8f0:	51 1c       	adc	r5, r1
						counterRef = counter;
						print = 0;
						if(state == O11_OFF + 1){	//accounts for possible end of maintenance mode after outputs
     8f2:	80 e2       	ldi	r24, 0x20	; 32
     8f4:	48 16       	cp	r4, r24
     8f6:	51 04       	cpc	r5, r1
     8f8:	09 f0       	breq	.+2      	; 0x8fc <main+0x3e4>
     8fa:	80 c0       	rjmp	.+256    	; 0x9fc <main+0x4e4>
							OrangutanLCD::clear();
     8fc:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
							if(submode == 1){
     900:	ab ad       	ldd	r26, Y+59	; 0x3b
     902:	bc ad       	ldd	r27, Y+60	; 0x3c
     904:	11 97       	sbiw	r26, 0x01	; 1
     906:	11 f4       	brne	.+4      	; 0x90c <main+0x3f4>
     908:	0c 94 05 18 	jmp	0x300a	; 0x300a <main+0x2af2>
								state = DONEM;
							}
							else{
								u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
     90c:	80 91 56 03 	lds	r24, 0x0356
     910:	84 60       	ori	r24, 0x04	; 4
     912:	80 93 56 03 	sts	0x0356, r24
								OrangutanLCD::print("MOTORS");
     916:	87 e7       	ldi	r24, 0x77	; 119
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
								OrangutanLCD::gotoXY(0,1);
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
     926:	38 8a       	std	Y+16, r3	; 0x10
     928:	2f 86       	std	Y+15, r2	; 0x0f
     92a:	01 c2       	rjmp	.+1026   	; 0xd2e <main+0x816>
							}
						}
					}
					else{							//if it's doing the motors
						buttonTriggered = false;
						state ++;
     92c:	82 01       	movw	r16, r4
     92e:	0f 5f       	subi	r16, 0xFF	; 255
     930:	1f 4f       	sbci	r17, 0xFF	; 255
						counterRef = counter;
						print = 0;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
     932:	89 2b       	or	r24, r25
     934:	49 f4       	brne	.+18     	; 0x948 <main+0x430>
							OrangutanLCD::gotoXY(11,1);
     936:	8b e0       	ldi	r24, 0x0B	; 11
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("BACK ");
     93e:	8e e7       	ldi	r24, 0x7E	; 126
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     946:	13 c0       	rjmp	.+38     	; 0x96e <main+0x456>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
     948:	06 32       	cpi	r16, 0x26	; 38
     94a:	11 05       	cpc	r17, r1
     94c:	81 f1       	breq	.+96     	; 0x9ae <main+0x496>
     94e:	07 32       	cpi	r16, 0x27	; 39
     950:	11 05       	cpc	r17, r1
     952:	3c f4       	brge	.+14     	; 0x962 <main+0x44a>
     954:	02 32       	cpi	r16, 0x22	; 34
     956:	11 05       	cpc	r17, r1
     958:	61 f0       	breq	.+24     	; 0x972 <main+0x45a>
     95a:	04 32       	cpi	r16, 0x24	; 36
     95c:	11 05       	cpc	r17, r1
     95e:	39 f4       	brne	.+14     	; 0x96e <main+0x456>
     960:	15 c0       	rjmp	.+42     	; 0x98c <main+0x474>
     962:	08 32       	cpi	r16, 0x28	; 40
     964:	11 05       	cpc	r17, r1
     966:	81 f1       	breq	.+96     	; 0x9c8 <main+0x4b0>
     968:	0a 32       	cpi	r16, 0x2A	; 42
     96a:	11 05       	cpc	r17, r1
     96c:	d1 f1       	breq	.+116    	; 0x9e2 <main+0x4ca>
     96e:	28 01       	movw	r4, r16
     970:	45 c0       	rjmp	.+138    	; 0x9fc <main+0x4e4>
								case M1_B + 1:
									OrangutanLCD::gotoXY(0,1);
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
     97a:	80 91 56 03 	lds	r24, 0x0356
     97e:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
     980:	80 62       	ori	r24, 0x20	; 32
     982:	80 93 56 03 	sts	0x0356, r24
     986:	38 8a       	std	Y+16, r3	; 0x10
     988:	2f 86       	std	Y+15, r2	; 0x0f
     98a:	f6 c1       	rjmp	.+1004   	; 0xd78 <main+0x860>
									break;
								case M2_B + 1:
									OrangutanLCD::gotoXY(0,1);
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
     994:	80 91 56 03 	lds	r24, 0x0356
     998:	8f 7d       	andi	r24, 0xDF	; 223
     99a:	80 93 56 03 	sts	0x0356, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
     99e:	80 91 57 03 	lds	r24, 0x0357
     9a2:	81 60       	ori	r24, 0x01	; 1
     9a4:	80 93 57 03 	sts	0x0357, r24
     9a8:	38 8a       	std	Y+16, r3	; 0x10
     9aa:	2f 86       	std	Y+15, r2	; 0x0f
     9ac:	0e c2       	rjmp	.+1052   	; 0xdca <main+0x8b2>
									break;
								case M3_B + 1:
									OrangutanLCD::gotoXY(0,1);
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
     9b6:	80 91 57 03 	lds	r24, 0x0357
     9ba:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
     9bc:	88 60       	ori	r24, 0x08	; 8
     9be:	80 93 57 03 	sts	0x0357, r24
     9c2:	38 8a       	std	Y+16, r3	; 0x10
     9c4:	2f 86       	std	Y+15, r2	; 0x0f
     9c6:	2a c2       	rjmp	.+1108   	; 0xe1c <main+0x904>
									break;
								case M4_B + 1:
									OrangutanLCD::gotoXY(0,1);
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	61 e0       	ldi	r22, 0x01	; 1
     9cc:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
     9d0:	80 91 57 03 	lds	r24, 0x0357
     9d4:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
     9d6:	80 64       	ori	r24, 0x40	; 64
     9d8:	80 93 57 03 	sts	0x0357, r24
     9dc:	38 8a       	std	Y+16, r3	; 0x10
     9de:	2f 86       	std	Y+15, r2	; 0x0f
     9e0:	46 c2       	rjmp	.+1164   	; 0xe6e <main+0x956>
									break;
								case M5_B + 1:
									OrangutanLCD::clear();
     9e2:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
									u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
     9e6:	80 91 57 03 	lds	r24, 0x0357
     9ea:	8f 7b       	andi	r24, 0xBF	; 191
     9ec:	80 93 57 03 	sts	0x0357, r24
     9f0:	27 96       	adiw	r28, 0x07	; 7
     9f2:	1f ae       	std	Y+63, r1	; 0x3f
     9f4:	1e ae       	std	Y+62, r1	; 0x3e
     9f6:	27 97       	sbiw	r28, 0x07	; 7
     9f8:	0c 94 05 18 	jmp	0x300a	; 0x300a <main+0x2af2>
     9fc:	38 8a       	std	Y+16, r3	; 0x10
     9fe:	2f 86       	std	Y+15, r2	; 0x0f
     a00:	66 24       	eor	r6, r6
     a02:	77 24       	eor	r7, r7
					print = 0;
					paperTowelMotor = 0;
				}*/

				//state actions
				switch (state) {
     a04:	f2 01       	movw	r30, r4
     a06:	ea 32       	cpi	r30, 0x2A	; 42
     a08:	f1 05       	cpc	r31, r1
     a0a:	08 f0       	brcs	.+2      	; 0xa0e <main+0x4f6>
     a0c:	55 c2       	rjmp	.+1194   	; 0xeb8 <main+0x9a0>
     a0e:	ea 5b       	subi	r30, 0xBA	; 186
     a10:	ff 4f       	sbci	r31, 0xFF	; 255
     a12:	ee 0f       	add	r30, r30
     a14:	ff 1f       	adc	r31, r31
     a16:	05 90       	lpm	r0, Z+
     a18:	f4 91       	lpm	r31, Z+
     a1a:	e0 2d       	mov	r30, r0
     a1c:	09 94       	ijmp
					case S0:
						if(print == 0){
     a1e:	61 14       	cp	r6, r1
     a20:	71 04       	cpc	r7, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <main+0x51a>
							OrangutanLCD::print("SENSOR 0");
     a24:	84 e8       	ldi	r24, 0x84	; 132
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     a2c:	01 e0       	ldi	r16, 0x01	; 1
     a2e:	60 2e       	mov	r6, r16
     a30:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a32:	8f e0       	ldi	r24, 0x0F	; 15
     a34:	61 e0       	ldi	r22, 0x01	; 1
     a36:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
	// position and will not span lines.
	static void print(unsigned long value);
	static void print(long value);
	static inline void print(unsigned int value)
	{
		print((unsigned long)value);
     a3a:	60 91 5a 03 	lds	r22, 0x035A
     a3e:	11 c0       	rjmp	.+34     	; 0xa62 <main+0x54a>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.plate);
						break;
					case S1:
						if(print == 0){
     a40:	61 14       	cp	r6, r1
     a42:	71 04       	cpc	r7, r1
     a44:	39 f4       	brne	.+14     	; 0xa54 <main+0x53c>
							OrangutanLCD::print("SENSOR 1");
     a46:	8d e8       	ldi	r24, 0x8D	; 141
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     a4e:	11 e0       	ldi	r17, 0x01	; 1
     a50:	61 2e       	mov	r6, r17
     a52:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a54:	8f e0       	ldi	r24, 0x0F	; 15
     a56:	61 e0       	ldi	r22, 0x01	; 1
     a58:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
     a5c:	60 91 5a 03 	lds	r22, 0x035A
     a60:	66 95       	lsr	r22
     a62:	61 70       	andi	r22, 0x01	; 1
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN12OrangutanLCD5printEm>
     a6e:	24 c2       	rjmp	.+1096   	; 0xeb8 <main+0x9a0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureLift);
						break;
					case S2:
						if(print == 0){
     a70:	61 14       	cp	r6, r1
     a72:	71 04       	cpc	r7, r1
     a74:	39 f4       	brne	.+14     	; 0xa84 <main+0x56c>
							OrangutanLCD::print("SENSOR 2");
     a76:	86 e9       	ldi	r24, 0x96	; 150
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     a7e:	b1 e0       	ldi	r27, 0x01	; 1
     a80:	6b 2e       	mov	r6, r27
     a82:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a84:	8f e0       	ldi	r24, 0x0F	; 15
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
     a8c:	60 91 5a 03 	lds	r22, 0x035A
     a90:	66 95       	lsr	r22
     a92:	66 95       	lsr	r22
     a94:	e6 cf       	rjmp	.-52     	; 0xa62 <main+0x54a>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureHome);
						break;
					case S3:
						if(print == 0){
     a96:	61 14       	cp	r6, r1
     a98:	71 04       	cpc	r7, r1
     a9a:	39 f4       	brne	.+14     	; 0xaaa <main+0x592>
							OrangutanLCD::print("SENSOR 3");
     a9c:	8f e9       	ldi	r24, 0x9F	; 159
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     aa4:	a1 e0       	ldi	r26, 0x01	; 1
     aa6:	6a 2e       	mov	r6, r26
     aa8:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     aaa:	8f e0       	ldi	r24, 0x0F	; 15
     aac:	61 e0       	ldi	r22, 0x01	; 1
     aae:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
     ab2:	60 91 5a 03 	lds	r22, 0x035A
     ab6:	66 95       	lsr	r22
     ab8:	66 95       	lsr	r22
     aba:	66 95       	lsr	r22
     abc:	d2 cf       	rjmp	.-92     	; 0xa62 <main+0x54a>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixturePlate);
						break;
					case S4:
						if(print == 0){
     abe:	61 14       	cp	r6, r1
     ac0:	71 04       	cpc	r7, r1
     ac2:	39 f4       	brne	.+14     	; 0xad2 <main+0x5ba>
							OrangutanLCD::print("SENSOR 4");
     ac4:	88 ea       	ldi	r24, 0xA8	; 168
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     acc:	f1 e0       	ldi	r31, 0x01	; 1
     ace:	6f 2e       	mov	r6, r31
     ad0:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     ad2:	8f e0       	ldi	r24, 0x0F	; 15
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
     ada:	60 91 5a 03 	lds	r22, 0x035A
     ade:	62 95       	swap	r22
     ae0:	6f 70       	andi	r22, 0x0F	; 15
     ae2:	bf cf       	rjmp	.-130    	; 0xa62 <main+0x54a>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
						break;
					case S5:
						if(print == 0){
     ae4:	61 14       	cp	r6, r1
     ae6:	71 04       	cpc	r7, r1
     ae8:	39 f4       	brne	.+14     	; 0xaf8 <main+0x5e0>
							OrangutanLCD::print("SENSOR 5");
     aea:	81 eb       	ldi	r24, 0xB1	; 177
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     af2:	e1 e0       	ldi	r30, 0x01	; 1
     af4:	6e 2e       	mov	r6, r30
     af6:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     af8:	8f e0       	ldi	r24, 0x0F	; 15
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
     b00:	60 91 5a 03 	lds	r22, 0x035A
     b04:	62 95       	swap	r22
     b06:	66 95       	lsr	r22
     b08:	67 70       	andi	r22, 0x07	; 7
     b0a:	ab cf       	rjmp	.-170    	; 0xa62 <main+0x54a>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
						break;
					case S6:
						if(print == 0){
     b0c:	61 14       	cp	r6, r1
     b0e:	71 04       	cpc	r7, r1
     b10:	39 f4       	brne	.+14     	; 0xb20 <main+0x608>
							OrangutanLCD::print("SENSOR 6");
     b12:	8a eb       	ldi	r24, 0xBA	; 186
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     b1a:	71 e0       	ldi	r23, 0x01	; 1
     b1c:	67 2e       	mov	r6, r23
     b1e:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b20:	8f e0       	ldi	r24, 0x0F	; 15
     b22:	61 e0       	ldi	r22, 0x01	; 1
     b24:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
     b28:	60 91 5a 03 	lds	r22, 0x035A
     b2c:	62 95       	swap	r22
     b2e:	66 95       	lsr	r22
     b30:	66 95       	lsr	r22
     b32:	63 70       	andi	r22, 0x03	; 3
     b34:	96 cf       	rjmp	.-212    	; 0xa62 <main+0x54a>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry1);
						break;
					case S7:
						if(print == 0){
     b36:	61 14       	cp	r6, r1
     b38:	71 04       	cpc	r7, r1
     b3a:	39 f4       	brne	.+14     	; 0xb4a <main+0x632>
							OrangutanLCD::print("SENSOR 7");
     b3c:	83 ec       	ldi	r24, 0xC3	; 195
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	66 2e       	mov	r6, r22
     b48:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b4a:	8f e0       	ldi	r24, 0x0F	; 15
     b4c:	61 e0       	ldi	r22, 0x01	; 1
     b4e:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
     b52:	60 91 5a 03 	lds	r22, 0x035A
     b56:	66 1f       	adc	r22, r22
     b58:	66 27       	eor	r22, r22
     b5a:	66 1f       	adc	r22, r22
     b5c:	83 cf       	rjmp	.-250    	; 0xa64 <main+0x54c>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry2);
						break;
					case O0_ON:
						if(print == 0){
     b5e:	61 14       	cp	r6, r1
     b60:	71 04       	cpc	r7, r1
     b62:	39 f4       	brne	.+14     	; 0xb72 <main+0x65a>
							OrangutanLCD::print("AC POWER     ON ");
     b64:	8c ec       	ldi	r24, 0xCC	; 204
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     b6c:	51 e0       	ldi	r21, 0x01	; 1
     b6e:	65 2e       	mov	r6, r21
     b70:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
     b72:	80 91 58 03 	lds	r24, 0x0358
     b76:	8e 7f       	andi	r24, 0xFE	; 254
     b78:	80 93 58 03 	sts	0x0358, r24
     b7c:	48 e0       	ldi	r20, 0x08	; 8
     b7e:	44 2e       	mov	r4, r20
     b80:	51 2c       	mov	r5, r1
     b82:	9a c1       	rjmp	.+820    	; 0xeb8 <main+0x9a0>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
     b84:	80 91 58 03 	lds	r24, 0x0358
     b88:	81 60       	ori	r24, 0x01	; 1
     b8a:	0d c0       	rjmp	.+26     	; 0xba6 <main+0x68e>
						break;
					case O1_ON:
						if(print == 0){
     b8c:	61 14       	cp	r6, r1
     b8e:	71 04       	cpc	r7, r1
     b90:	39 f4       	brne	.+14     	; 0xba0 <main+0x688>
							OrangutanLCD::print("BLOWER       ON  ");
     b92:	8d ed       	ldi	r24, 0xDD	; 221
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     b9a:	31 e0       	ldi	r19, 0x01	; 1
     b9c:	63 2e       	mov	r6, r19
     b9e:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     ba0:	80 91 58 03 	lds	r24, 0x0358
     ba4:	8d 7f       	andi	r24, 0xFD	; 253
     ba6:	80 93 58 03 	sts	0x0358, r24
     baa:	86 c1       	rjmp	.+780    	; 0xeb8 <main+0x9a0>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     bac:	80 91 58 03 	lds	r24, 0x0358
     bb0:	82 60       	ori	r24, 0x02	; 2
     bb2:	f9 cf       	rjmp	.-14     	; 0xba6 <main+0x68e>
						break;
					case O2_ON:
						if(print == 0){
     bb4:	61 14       	cp	r6, r1
     bb6:	71 04       	cpc	r7, r1
     bb8:	39 f4       	brne	.+14     	; 0xbc8 <main+0x6b0>
							OrangutanLCD::print("PLATE STOP   ON ");
     bba:	8f ee       	ldi	r24, 0xEF	; 239
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     bc2:	21 e0       	ldi	r18, 0x01	; 1
     bc4:	62 2e       	mov	r6, r18
     bc6:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
     bc8:	80 91 58 03 	lds	r24, 0x0358
     bcc:	8b 7f       	andi	r24, 0xFB	; 251
     bce:	eb cf       	rjmp	.-42     	; 0xba6 <main+0x68e>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
     bd0:	80 91 58 03 	lds	r24, 0x0358
     bd4:	84 60       	ori	r24, 0x04	; 4
     bd6:	e7 cf       	rjmp	.-50     	; 0xba6 <main+0x68e>
						break;
					case O3_ON:
						if(print == 0){
     bd8:	61 14       	cp	r6, r1
     bda:	71 04       	cpc	r7, r1
     bdc:	39 f4       	brne	.+14     	; 0xbec <main+0x6d4>
							OrangutanLCD::print("PLATE RAISE  ON ");
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	92 e0       	ldi	r25, 0x02	; 2
     be2:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	69 2e       	mov	r6, r25
     bea:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     bec:	80 91 58 03 	lds	r24, 0x0358
     bf0:	87 7f       	andi	r24, 0xF7	; 247
     bf2:	15 c0       	rjmp	.+42     	; 0xc1e <main+0x706>
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     bf4:	80 91 58 03 	lds	r24, 0x0358
     bf8:	88 60       	ori	r24, 0x08	; 8
     bfa:	d5 cf       	rjmp	.-86     	; 0xba6 <main+0x68e>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(print == 0){
     bfc:	61 14       	cp	r6, r1
     bfe:	71 04       	cpc	r7, r1
     c00:	39 f4       	brne	.+14     	; 0xc10 <main+0x6f8>
							OrangutanLCD::print("PLATE LOWER  ON ");
     c02:	81 e1       	ldi	r24, 0x11	; 17
     c04:	92 e0       	ldi	r25, 0x02	; 2
     c06:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	68 2e       	mov	r6, r24
     c0e:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     c10:	80 91 58 03 	lds	r24, 0x0358
     c14:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     c16:	8f 7e       	andi	r24, 0xEF	; 239
     c18:	c6 cf       	rjmp	.-116    	; 0xba6 <main+0x68e>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     c1a:	80 91 58 03 	lds	r24, 0x0358
     c1e:	80 61       	ori	r24, 0x10	; 16
     c20:	c2 cf       	rjmp	.-124    	; 0xba6 <main+0x68e>
						break;
					case O5_ON:
						if(print == 0){
     c22:	61 14       	cp	r6, r1
     c24:	71 04       	cpc	r7, r1
     c26:	39 f4       	brne	.+14     	; 0xc36 <main+0x71e>
							OrangutanLCD::print("BRUSH1 RAISE ON ");
     c28:	82 e2       	ldi	r24, 0x22	; 34
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     c30:	01 e0       	ldi	r16, 0x01	; 1
     c32:	60 2e       	mov	r6, r16
     c34:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     c36:	80 91 58 03 	lds	r24, 0x0358
     c3a:	8f 7d       	andi	r24, 0xDF	; 223
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <main+0x74e>
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     c3e:	80 91 58 03 	lds	r24, 0x0358
     c42:	0d c0       	rjmp	.+26     	; 0xc5e <main+0x746>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(print == 0){
     c44:	61 14       	cp	r6, r1
     c46:	71 04       	cpc	r7, r1
     c48:	39 f4       	brne	.+14     	; 0xc58 <main+0x740>
							OrangutanLCD::print("BRUSH1 LOWER ON ");
     c4a:	83 e3       	ldi	r24, 0x33	; 51
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     c52:	11 e0       	ldi	r17, 0x01	; 1
     c54:	61 2e       	mov	r6, r17
     c56:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     c58:	80 91 58 03 	lds	r24, 0x0358
     c5c:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     c5e:	80 62       	ori	r24, 0x20	; 32
     c60:	a2 cf       	rjmp	.-188    	; 0xba6 <main+0x68e>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     c62:	80 91 58 03 	lds	r24, 0x0358
     c66:	80 64       	ori	r24, 0x40	; 64
     c68:	9e cf       	rjmp	.-196    	; 0xba6 <main+0x68e>
						break;
					case O7_ON:
						if(print == 0){
     c6a:	61 14       	cp	r6, r1
     c6c:	71 04       	cpc	r7, r1
     c6e:	39 f4       	brne	.+14     	; 0xc7e <main+0x766>
							OrangutanLCD::print("BRUSH2 RAISE ON ");
     c70:	84 e4       	ldi	r24, 0x44	; 68
     c72:	92 e0       	ldi	r25, 0x02	; 2
     c74:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     c78:	b1 e0       	ldi	r27, 0x01	; 1
     c7a:	6b 2e       	mov	r6, r27
     c7c:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     c7e:	80 91 58 03 	lds	r24, 0x0358
     c82:	8f 77       	andi	r24, 0x7F	; 127
     c84:	80 93 58 03 	sts	0x0358, r24
     c88:	13 c0       	rjmp	.+38     	; 0xcb0 <main+0x798>
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(print == 0){
     c8a:	61 14       	cp	r6, r1
     c8c:	71 04       	cpc	r7, r1
     c8e:	39 f4       	brne	.+14     	; 0xc9e <main+0x786>
							OrangutanLCD::print("BRUSH2 LOWER ON ");
     c90:	85 e5       	ldi	r24, 0x55	; 85
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     c98:	a1 e0       	ldi	r26, 0x01	; 1
     c9a:	6a 2e       	mov	r6, r26
     c9c:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     c9e:	80 91 59 03 	lds	r24, 0x0359
     ca2:	8e 7f       	andi	r24, 0xFE	; 254
     ca4:	80 93 59 03 	sts	0x0359, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     ca8:	80 91 58 03 	lds	r24, 0x0358
     cac:	80 68       	ori	r24, 0x80	; 128
     cae:	7b cf       	rjmp	.-266    	; 0xba6 <main+0x68e>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     cb0:	80 91 59 03 	lds	r24, 0x0359
     cb4:	81 60       	ori	r24, 0x01	; 1
     cb6:	35 c0       	rjmp	.+106    	; 0xd22 <main+0x80a>
						break;
					case O9_ON:
						if(print == 0){
     cb8:	61 14       	cp	r6, r1
     cba:	71 04       	cpc	r7, r1
     cbc:	39 f4       	brne	.+14     	; 0xccc <main+0x7b4>
							OrangutanLCD::print("PAPER RAISE  ON ");
     cbe:	86 e6       	ldi	r24, 0x66	; 102
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
     cc8:	6f 2e       	mov	r6, r31
     cca:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     ccc:	80 91 59 03 	lds	r24, 0x0359
     cd0:	8d 7f       	andi	r24, 0xFD	; 253
     cd2:	14 c0       	rjmp	.+40     	; 0xcfc <main+0x7e4>
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     cd4:	80 91 59 03 	lds	r24, 0x0359
     cd8:	0d c0       	rjmp	.+26     	; 0xcf4 <main+0x7dc>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(print == 0){
     cda:	61 14       	cp	r6, r1
     cdc:	71 04       	cpc	r7, r1
     cde:	39 f4       	brne	.+14     	; 0xcee <main+0x7d6>
							OrangutanLCD::print("PAPER LOWER  ON ");
     ce0:	87 e7       	ldi	r24, 0x77	; 119
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     ce8:	e1 e0       	ldi	r30, 0x01	; 1
     cea:	6e 2e       	mov	r6, r30
     cec:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
     cee:	80 91 59 03 	lds	r24, 0x0359
     cf2:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     cf4:	82 60       	ori	r24, 0x02	; 2
     cf6:	15 c0       	rjmp	.+42     	; 0xd22 <main+0x80a>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
     cf8:	80 91 59 03 	lds	r24, 0x0359
     cfc:	84 60       	ori	r24, 0x04	; 4
     cfe:	11 c0       	rjmp	.+34     	; 0xd22 <main+0x80a>
						break;
					case O11_ON:
						if(print == 0){
     d00:	61 14       	cp	r6, r1
     d02:	71 04       	cpc	r7, r1
     d04:	39 f4       	brne	.+14     	; 0xd14 <main+0x7fc>
							OrangutanLCD::print("AIR KNIFE    ON ");
     d06:	88 e8       	ldi	r24, 0x88	; 136
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     d0e:	71 e0       	ldi	r23, 0x01	; 1
     d10:	67 2e       	mov	r6, r23
     d12:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
     d14:	80 91 59 03 	lds	r24, 0x0359
     d18:	87 7f       	andi	r24, 0xF7	; 247
     d1a:	03 c0       	rjmp	.+6      	; 0xd22 <main+0x80a>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
     d1c:	80 91 59 03 	lds	r24, 0x0359
     d20:	88 60       	ori	r24, 0x08	; 8
     d22:	80 93 59 03 	sts	0x0359, r24
     d26:	c8 c0       	rjmp	.+400    	; 0xeb8 <main+0x9a0>
						break;
					case M1_F:
						if(print == 0){
     d28:	61 14       	cp	r6, r1
     d2a:	71 04       	cpc	r7, r1
     d2c:	39 f4       	brne	.+14     	; 0xd3c <main+0x824>
							OrangutanLCD::print("LOADING    FRONT");
     d2e:	89 e9       	ldi	r24, 0x99	; 153
     d30:	92 e0       	ldi	r25, 0x02	; 2
     d32:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     d36:	61 e0       	ldi	r22, 0x01	; 1
     d38:	66 2e       	mov	r6, r22
     d3a:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     d3c:	80 91 56 03 	lds	r24, 0x0356
     d40:	8d 7f       	andi	r24, 0xFD	; 253
     d42:	80 93 56 03 	sts	0x0356, r24
     d46:	21 e0       	ldi	r18, 0x01	; 1
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	2f 96       	adiw	r28, 0x0f	; 15
     d4c:	3f af       	std	Y+63, r19	; 0x3f
     d4e:	2e af       	std	Y+62, r18	; 0x3e
     d50:	2f 97       	sbiw	r28, 0x0f	; 15
     d52:	50 e2       	ldi	r21, 0x20	; 32
     d54:	45 2e       	mov	r4, r21
     d56:	51 2c       	mov	r5, r1
     d58:	af c0       	rjmp	.+350    	; 0xeb8 <main+0x9a0>
						plateLoadMotor =  1;
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
     d5a:	80 91 56 03 	lds	r24, 0x0356
     d5e:	82 60       	ori	r24, 0x02	; 2
     d60:	80 93 56 03 	sts	0x0356, r24
     d64:	41 e0       	ldi	r20, 0x01	; 1
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	2f 96       	adiw	r28, 0x0f	; 15
     d6a:	5f af       	std	Y+63, r21	; 0x3f
     d6c:	4e af       	std	Y+62, r20	; 0x3e
     d6e:	2f 97       	sbiw	r28, 0x0f	; 15
     d70:	a3 c0       	rjmp	.+326    	; 0xeb8 <main+0x9a0>
						plateLoadMotor =  1;
						break;
					case M2_F:
						if(print == 0){
     d72:	61 14       	cp	r6, r1
     d74:	71 04       	cpc	r7, r1
     d76:	39 f4       	brne	.+14     	; 0xd86 <main+0x86e>
							OrangutanLCD::print("DRIVE      FRONT");
     d78:	8a ea       	ldi	r24, 0xAA	; 170
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     d80:	41 e0       	ldi	r20, 0x01	; 1
     d82:	64 2e       	mov	r6, r20
     d84:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     d86:	80 91 56 03 	lds	r24, 0x0356
     d8a:	8f 7e       	andi	r24, 0xEF	; 239
     d8c:	80 93 56 03 	sts	0x0356, r24
     d90:	2f 96       	adiw	r28, 0x0f	; 15
     d92:	1f ae       	std	Y+63, r1	; 0x3f
     d94:	1e ae       	std	Y+62, r1	; 0x3e
     d96:	2f 97       	sbiw	r28, 0x0f	; 15
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	2d 96       	adiw	r28, 0x0d	; 13
     d9e:	9f af       	std	Y+63, r25	; 0x3f
     da0:	8e af       	std	Y+62, r24	; 0x3e
     da2:	2d 97       	sbiw	r28, 0x0d	; 13
     da4:	32 e2       	ldi	r19, 0x22	; 34
     da6:	43 2e       	mov	r4, r19
     da8:	51 2c       	mov	r5, r1
     daa:	86 c0       	rjmp	.+268    	; 0xeb8 <main+0x9a0>
						fixtureMotor =  1;
						plateLoadMotor = 0;
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     dac:	80 91 56 03 	lds	r24, 0x0356
     db0:	80 61       	ori	r24, 0x10	; 16
     db2:	80 93 56 03 	sts	0x0356, r24
     db6:	a1 e0       	ldi	r26, 0x01	; 1
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	2d 96       	adiw	r28, 0x0d	; 13
     dbc:	bf af       	std	Y+63, r27	; 0x3f
     dbe:	ae af       	std	Y+62, r26	; 0x3e
     dc0:	2d 97       	sbiw	r28, 0x0d	; 13
     dc2:	7a c0       	rjmp	.+244    	; 0xeb8 <main+0x9a0>
						fixtureMotor =  1;
						break;
					case M3_F:
						if(print == 0){
     dc4:	61 14       	cp	r6, r1
     dc6:	71 04       	cpc	r7, r1
     dc8:	39 f4       	brne	.+14     	; 0xdd8 <main+0x8c0>
							OrangutanLCD::print("BRUSH1     FRONT");
     dca:	8b eb       	ldi	r24, 0xBB	; 187
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     dd2:	21 e0       	ldi	r18, 0x01	; 1
     dd4:	62 2e       	mov	r6, r18
     dd6:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
     dd8:	80 91 56 03 	lds	r24, 0x0356
     ddc:	8f 77       	andi	r24, 0x7F	; 127
     dde:	80 93 56 03 	sts	0x0356, r24
     de2:	2d 96       	adiw	r28, 0x0d	; 13
     de4:	1f ae       	std	Y+63, r1	; 0x3f
     de6:	1e ae       	std	Y+62, r1	; 0x3e
     de8:	2d 97       	sbiw	r28, 0x0d	; 13
     dea:	21 e0       	ldi	r18, 0x01	; 1
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	2b 96       	adiw	r28, 0x0b	; 11
     df0:	3f af       	std	Y+63, r19	; 0x3f
     df2:	2e af       	std	Y+62, r18	; 0x3e
     df4:	2b 97       	sbiw	r28, 0x0b	; 11
     df6:	94 e2       	ldi	r25, 0x24	; 36
     df8:	49 2e       	mov	r4, r25
     dfa:	51 2c       	mov	r5, r1
     dfc:	5d c0       	rjmp	.+186    	; 0xeb8 <main+0x9a0>
						brush1Motor =  1;
						fixtureMotor = 0;
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
     dfe:	80 91 56 03 	lds	r24, 0x0356
     e02:	80 68       	ori	r24, 0x80	; 128
     e04:	80 93 56 03 	sts	0x0356, r24
     e08:	41 e0       	ldi	r20, 0x01	; 1
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	2b 96       	adiw	r28, 0x0b	; 11
     e0e:	5f af       	std	Y+63, r21	; 0x3f
     e10:	4e af       	std	Y+62, r20	; 0x3e
     e12:	2b 97       	sbiw	r28, 0x0b	; 11
     e14:	51 c0       	rjmp	.+162    	; 0xeb8 <main+0x9a0>
						brush1Motor =  1;
						break;
					case M4_F:
						if(print == 0){
     e16:	61 14       	cp	r6, r1
     e18:	71 04       	cpc	r7, r1
     e1a:	39 f4       	brne	.+14     	; 0xe2a <main+0x912>
							OrangutanLCD::print("BRUSH2     FRONT");
     e1c:	8c ec       	ldi	r24, 0xCC	; 204
     e1e:	92 e0       	ldi	r25, 0x02	; 2
     e20:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	68 2e       	mov	r6, r24
     e28:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
     e2a:	80 91 57 03 	lds	r24, 0x0357
     e2e:	8b 7f       	andi	r24, 0xFB	; 251
     e30:	80 93 57 03 	sts	0x0357, r24
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	29 96       	adiw	r28, 0x09	; 9
     e3a:	9f af       	std	Y+63, r25	; 0x3f
     e3c:	8e af       	std	Y+62, r24	; 0x3e
     e3e:	29 97       	sbiw	r28, 0x09	; 9
     e40:	2b 96       	adiw	r28, 0x0b	; 11
     e42:	1f ae       	std	Y+63, r1	; 0x3f
     e44:	1e ae       	std	Y+62, r1	; 0x3e
     e46:	2b 97       	sbiw	r28, 0x0b	; 11
     e48:	06 e2       	ldi	r16, 0x26	; 38
     e4a:	40 2e       	mov	r4, r16
     e4c:	51 2c       	mov	r5, r1
     e4e:	34 c0       	rjmp	.+104    	; 0xeb8 <main+0x9a0>
						brush2Motor =  1;
						brush1Motor = 0;
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
     e50:	80 91 57 03 	lds	r24, 0x0357
     e54:	84 60       	ori	r24, 0x04	; 4
     e56:	80 93 57 03 	sts	0x0357, r24
     e5a:	a1 e0       	ldi	r26, 0x01	; 1
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	29 96       	adiw	r28, 0x09	; 9
     e60:	bf af       	std	Y+63, r27	; 0x3f
     e62:	ae af       	std	Y+62, r26	; 0x3e
     e64:	29 97       	sbiw	r28, 0x09	; 9
     e66:	28 c0       	rjmp	.+80     	; 0xeb8 <main+0x9a0>
						brush2Motor =  1;
						break;
					case M5_F:
						if(print == 0){
     e68:	61 14       	cp	r6, r1
     e6a:	71 04       	cpc	r7, r1
     e6c:	39 f4       	brne	.+14     	; 0xe7c <main+0x964>
							OrangutanLCD::print("PAPER      FRONT");
     e6e:	8d ed       	ldi	r24, 0xDD	; 221
     e70:	92 e0       	ldi	r25, 0x02	; 2
     e72:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     e76:	11 e0       	ldi	r17, 0x01	; 1
     e78:	61 2e       	mov	r6, r17
     e7a:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     e7c:	80 91 57 03 	lds	r24, 0x0357
     e80:	8f 7d       	andi	r24, 0xDF	; 223
     e82:	80 93 57 03 	sts	0x0357, r24
     e86:	29 96       	adiw	r28, 0x09	; 9
     e88:	1f ae       	std	Y+63, r1	; 0x3f
     e8a:	1e ae       	std	Y+62, r1	; 0x3e
     e8c:	29 97       	sbiw	r28, 0x09	; 9
     e8e:	21 e0       	ldi	r18, 0x01	; 1
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	27 96       	adiw	r28, 0x07	; 7
     e94:	3f af       	std	Y+63, r19	; 0x3f
     e96:	2e af       	std	Y+62, r18	; 0x3e
     e98:	27 97       	sbiw	r28, 0x07	; 7
     e9a:	b8 e2       	ldi	r27, 0x28	; 40
     e9c:	4b 2e       	mov	r4, r27
     e9e:	51 2c       	mov	r5, r1
     ea0:	0b c0       	rjmp	.+22     	; 0xeb8 <main+0x9a0>
						paperTowelMotor =  1;
						brush2Motor = 0;
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
     ea2:	80 91 57 03 	lds	r24, 0x0357
     ea6:	80 62       	ori	r24, 0x20	; 32
     ea8:	80 93 57 03 	sts	0x0357, r24
     eac:	41 e0       	ldi	r20, 0x01	; 1
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	27 96       	adiw	r28, 0x07	; 7
     eb2:	5f af       	std	Y+63, r21	; 0x3f
     eb4:	4e af       	std	Y+62, r20	; 0x3e
     eb6:	27 97       	sbiw	r28, 0x07	; 7
						paperTowelMotor =  1;
						break;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
     eb8:	8d b7       	in	r24, 0x3d	; 61
     eba:	9e b7       	in	r25, 0x3e	; 62
     ebc:	42 97       	sbiw	r24, 0x12	; 18
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	9e bf       	out	0x3e, r25	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	8d bf       	out	0x3d, r24	; 61
     ec8:	ed b7       	in	r30, 0x3d	; 61
     eca:	fe b7       	in	r31, 0x3e	; 62
     ecc:	31 96       	adiw	r30, 0x01	; 1
     ece:	82 e0       	ldi	r24, 0x02	; 2
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	ad b7       	in	r26, 0x3d	; 61
     ed4:	be b7       	in	r27, 0x3e	; 62
     ed6:	12 96       	adiw	r26, 0x02	; 2
     ed8:	9c 93       	st	X, r25
     eda:	8e 93       	st	-X, r24
     edc:	11 97       	sbiw	r26, 0x01	; 1
     ede:	93 83       	std	Z+3, r25	; 0x03
     ee0:	82 83       	std	Z+2, r24	; 0x02
     ee2:	95 83       	std	Z+5, r25	; 0x05
     ee4:	84 83       	std	Z+4, r24	; 0x04
     ee6:	97 83       	std	Z+7, r25	; 0x07
     ee8:	86 83       	std	Z+6, r24	; 0x06
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	91 87       	std	Z+9, r25	; 0x09
     ef0:	80 87       	std	Z+8, r24	; 0x08
     ef2:	93 87       	std	Z+11, r25	; 0x0b
     ef4:	82 87       	std	Z+10, r24	; 0x0a
     ef6:	95 87       	std	Z+13, r25	; 0x0d
     ef8:	84 87       	std	Z+12, r24	; 0x0c
     efa:	97 87       	std	Z+15, r25	; 0x0f
     efc:	86 87       	std	Z+14, r24	; 0x0e
     efe:	91 8b       	std	Z+17, r25	; 0x11
     f00:	80 8b       	std	Z+16, r24	; 0x10
     f02:	c1 01       	movw	r24, r2
     f04:	6f 85       	ldd	r22, Y+15	; 0x0f
     f06:	78 89       	ldd	r23, Y+16	; 0x10
     f08:	40 e0       	ldi	r20, 0x00	; 0
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	2f 96       	adiw	r28, 0x0f	; 15
     f0e:	2e ad       	ldd	r18, Y+62	; 0x3e
     f10:	3f ad       	ldd	r19, Y+63	; 0x3f
     f12:	2f 97       	sbiw	r28, 0x0f	; 15
     f14:	2d 96       	adiw	r28, 0x0d	; 13
     f16:	0e ad       	ldd	r16, Y+62	; 0x3e
     f18:	1f ad       	ldd	r17, Y+63	; 0x3f
     f1a:	2d 97       	sbiw	r28, 0x0d	; 13
     f1c:	2b 96       	adiw	r28, 0x0b	; 11
     f1e:	ee ac       	ldd	r14, Y+62	; 0x3e
     f20:	ff ac       	ldd	r15, Y+63	; 0x3f
     f22:	2b 97       	sbiw	r28, 0x0b	; 11
     f24:	29 96       	adiw	r28, 0x09	; 9
     f26:	ce ac       	ldd	r12, Y+62	; 0x3e
     f28:	df ac       	ldd	r13, Y+63	; 0x3f
     f2a:	29 97       	sbiw	r28, 0x09	; 9
     f2c:	27 96       	adiw	r28, 0x07	; 7
     f2e:	ae ac       	ldd	r10, Y+62	; 0x3e
     f30:	bf ac       	ldd	r11, Y+63	; 0x3f
     f32:	27 97       	sbiw	r28, 0x07	; 7
     f34:	a2 e0       	ldi	r26, 0x02	; 2
     f36:	8a 2e       	mov	r8, r26
     f38:	91 2c       	mov	r9, r1
     f3a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
     f3e:	2d b7       	in	r18, 0x3d	; 61
     f40:	3e b7       	in	r19, 0x3e	; 62
     f42:	2e 5e       	subi	r18, 0xEE	; 238
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	3e bf       	out	0x3e, r19	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	2d bf       	out	0x3d, r18	; 61
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>
			counter = 0;
			OrangutanLCD::clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
     f58:	3a e2       	ldi	r19, 0x2A	; 42
     f5a:	43 16       	cp	r4, r19
     f5c:	51 04       	cpc	r5, r1
     f5e:	11 f4       	brne	.+4      	; 0xf64 <main+0xa4c>
     f60:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <main+0x2a6c>
				i2c_start(I2C2+I2C_WRITE);
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				counter ++;
     f64:	08 94       	sec
     f66:	21 1c       	adc	r2, r1
     f68:	31 1c       	adc	r3, r1
     f6a:	c1 cb       	rjmp	.-2174   	; 0x6ee <main+0x1d6>
				delay_ms(1);
			}
		}
		else{										//If switch is set to Run Mode
		
		OrangutanLCD::print("NORMAL");
     f6c:	8e ee       	ldi	r24, 0xEE	; 238
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     f74:	88 ee       	ldi	r24, 0xE8	; 232
     f76:	93 e0       	ldi	r25, 0x03	; 3
     f78:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
     f7c:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("SELECT CYCLE");
     f80:	85 ef       	ldi	r24, 0xF5	; 245
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     f88:	ee 24       	eor	r14, r14
     f8a:	ff 24       	eor	r15, r15
				else if(counter - counterRefRel > 15){
					button = 0;
					stateButton = NONE;
				}
			}*/
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     f8c:	c7 01       	movw	r24, r14
     f8e:	be 01       	movw	r22, r28
     f90:	6f 5f       	subi	r22, 0xFF	; 255
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z15button_debounceiPi>
     f98:	18 2f       	mov	r17, r24
			counter++;
     f9a:	08 94       	sec
     f9c:	e1 1c       	adc	r14, r1
     f9e:	f1 1c       	adc	r15, r1
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
		OrangutanLCD::print("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
     fa8:	11 23       	and	r17, r17
     faa:	81 f3       	breq	.-32     	; 0xf8c <main+0xa74>
			counter++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		OrangutanLCD::clear();
     fac:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("CYCLE:");
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	93 e0       	ldi	r25, 0x03	; 3
     fb4:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>

		//u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
		u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
     fb8:	80 91 56 03 	lds	r24, 0x0356
     fbc:	80 62       	ori	r24, 0x20	; 32
     fbe:	80 93 56 03 	sts	0x0356, r24
		/*u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
		u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;*/

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     fc8:	88 23       	and	r24, r24
     fca:	11 f0       	breq	.+4      	; 0xfd0 <main+0xab8>
     fcc:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <main+0x2abe>
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     fd6:	88 23       	and	r24, r24
     fd8:	11 f0       	breq	.+4      	; 0xfde <main+0xac6>
     fda:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <main+0x2abe>
			OrangutanLCD::gotoXY(7,0);
     fde:	87 e0       	ldi	r24, 0x07	; 7
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("FIRST B");
     fe6:	89 e0       	ldi	r24, 0x09	; 9
     fe8:	93 e0       	ldi	r25, 0x03	; 3
     fea:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
     fee:	66 24       	eor	r6, r6
     ff0:	77 24       	eor	r7, r7
     ff2:	18 86       	std	Y+8, r1	; 0x08
     ff4:	1f 82       	std	Y+7, r1	; 0x07
     ff6:	41 e0       	ldi	r20, 0x01	; 1
     ff8:	50 e0       	ldi	r21, 0x00	; 0
     ffa:	5e af       	std	Y+62, r21	; 0x3e
     ffc:	4d af       	std	Y+61, r20	; 0x3d
     ffe:	21 96       	adiw	r28, 0x01	; 1
    1000:	5f af       	std	Y+63, r21	; 0x3f
    1002:	4e af       	std	Y+62, r20	; 0x3e
    1004:	21 97       	sbiw	r28, 0x01	; 1
    1006:	18 a6       	std	Y+40, r1	; 0x28
    1008:	1f a2       	std	Y+39, r1	; 0x27
    100a:	18 a2       	std	Y+32, r1	; 0x20
    100c:	1f 8e       	std	Y+31, r1	; 0x1f
    100e:	18 8e       	std	Y+24, r1	; 0x18
    1010:	1f 8a       	std	Y+23, r1	; 0x17
    1012:	1e 86       	std	Y+14, r1	; 0x0e
    1014:	1d 86       	std	Y+13, r1	; 0x0d
    1016:	44 24       	eor	r4, r4
    1018:	55 24       	eor	r5, r5
    101a:	22 24       	eor	r2, r2
    101c:	33 24       	eor	r3, r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    101e:	84 e4       	ldi	r24, 0x44	; 68
    1020:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    102a:	85 e4       	ldi	r24, 0x45	; 69
    102c:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1030:	0e 94 85 18 	call	0x310a	; 0x310a <_Z11i2c_readAckv>
    1034:	80 93 5a 03 	sts	0x035A, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1038:	0e 94 8f 18 	call	0x311e	; 0x311e <_Z11i2c_readNakv>
    103c:	80 93 5b 03 	sts	0x035B, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1040:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <_Z8i2c_stopv>
				
				if(state != INIT){
    1044:	61 14       	cp	r6, r1
    1046:	71 04       	cpc	r7, r1
    1048:	79 f0       	breq	.+30     	; 0x1068 <main+0xb50>
					OrangutanLCD::gotoXY(0,1);
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1052:	81 e1       	ldi	r24, 0x11	; 17
    1054:	93 e0       	ldi	r25, 0x03	; 3
    1056:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
	};
	static inline void print(int value)
	{
		print((long)value);
    105a:	b3 01       	movw	r22, r6
    105c:	88 27       	eor	r24, r24
    105e:	77 fd       	sbrc	r23, 7
    1060:	80 95       	com	r24
    1062:	98 2f       	mov	r25, r24
    1064:	0e 94 41 1b 	call	0x3682	; 0x3682 <_ZN12OrangutanLCD5printEl>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1068:	c2 01       	movw	r24, r4
    106a:	be 01       	movw	r22, r28
    106c:	6f 5f       	subi	r22, 0xFF	; 255
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
    1070:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    1074:	61 14       	cp	r6, r1
    1076:	71 04       	cpc	r7, r1
    1078:	29 f4       	brne	.+10     	; 0x1084 <main+0xb6c>
    107a:	88 23       	and	r24, r24
    107c:	09 f4       	brne	.+2      	; 0x1080 <main+0xb68>
    107e:	40 c0       	rjmp	.+128    	; 0x1100 <main+0xbe8>
    1080:	12 01       	movw	r2, r4
    1082:	04 c0       	rjmp	.+8      	; 0x108c <main+0xb74>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && /*counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate&&*/ u_inputByte0.bits_in_inputByte0.plate == 0){
    1084:	51 e0       	ldi	r21, 0x01	; 1
    1086:	65 16       	cp	r6, r21
    1088:	71 04       	cpc	r7, r1
    108a:	31 f4       	brne	.+12     	; 0x1098 <main+0xb80>
    108c:	80 91 5a 03 	lds	r24, 0x035A
    1090:	80 fd       	sbrc	r24, 0
    1092:	43 c0       	rjmp	.+134    	; 0x111a <main+0xc02>
    1094:	12 01       	movw	r2, r4
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <main+0xb88>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    1098:	82 e0       	ldi	r24, 0x02	; 2
    109a:	68 16       	cp	r6, r24
    109c:	71 04       	cpc	r7, r1
    109e:	49 f4       	brne	.+18     	; 0x10b2 <main+0xb9a>
    10a0:	c2 01       	movw	r24, r4
    10a2:	82 19       	sub	r24, r2
    10a4:	93 09       	sbc	r25, r3
    10a6:	85 36       	cpi	r24, 0x65	; 101
    10a8:	91 05       	cpc	r25, r1
    10aa:	0c f4       	brge	.+2      	; 0x10ae <main+0xb96>
    10ac:	46 c0       	rjmp	.+140    	; 0x113a <main+0xc22>
    10ae:	12 01       	movw	r2, r4
    10b0:	04 c0       	rjmp	.+8      	; 0x10ba <main+0xba2>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    10b2:	93 e0       	ldi	r25, 0x03	; 3
    10b4:	69 16       	cp	r6, r25
    10b6:	71 04       	cpc	r7, r1
    10b8:	49 f4       	brne	.+18     	; 0x10cc <main+0xbb4>
    10ba:	c2 01       	movw	r24, r4
    10bc:	82 19       	sub	r24, r2
    10be:	93 09       	sbc	r25, r3
    10c0:	81 5a       	subi	r24, 0xA1	; 161
    10c2:	9f 40       	sbci	r25, 0x0F	; 15
    10c4:	0c f4       	brge	.+2      	; 0x10c8 <main+0xbb0>
    10c6:	49 c0       	rjmp	.+146    	; 0x115a <main+0xc42>
    10c8:	12 01       	movw	r2, r4
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <main+0xbbc>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    10cc:	b4 e0       	ldi	r27, 0x04	; 4
    10ce:	6b 16       	cp	r6, r27
    10d0:	71 04       	cpc	r7, r1
    10d2:	49 f4       	brne	.+18     	; 0x10e6 <main+0xbce>
    10d4:	c2 01       	movw	r24, r4
    10d6:	82 19       	sub	r24, r2
    10d8:	93 09       	sbc	r25, r3
    10da:	89 5e       	subi	r24, 0xE9	; 233
    10dc:	93 40       	sbci	r25, 0x03	; 3
    10de:	0c f4       	brge	.+2      	; 0x10e2 <main+0xbca>
    10e0:	4c c0       	rjmp	.+152    	; 0x117a <main+0xc62>
    10e2:	12 01       	movw	r2, r4
    10e4:	04 c0       	rjmp	.+8      	; 0x10ee <main+0xbd6>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    10e6:	35 e0       	ldi	r19, 0x05	; 5
    10e8:	63 16       	cp	r6, r19
    10ea:	71 04       	cpc	r7, r1
    10ec:	49 f4       	brne	.+18     	; 0x1100 <main+0xbe8>
    10ee:	c2 01       	movw	r24, r4
    10f0:	82 19       	sub	r24, r2
    10f2:	93 09       	sbc	r25, r3
    10f4:	85 36       	cpi	r24, 0x65	; 101
    10f6:	91 05       	cpc	r25, r1
    10f8:	0c f4       	brge	.+2      	; 0x10fc <main+0xbe4>
    10fa:	4d c0       	rjmp	.+154    	; 0x1196 <main+0xc7e>
    10fc:	12 01       	movw	r2, r4
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <main+0xbf0>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1100:	46 e0       	ldi	r20, 0x06	; 6
    1102:	64 16       	cp	r6, r20
    1104:	71 04       	cpc	r7, r1
    1106:	61 f4       	brne	.+24     	; 0x1120 <main+0xc08>
    1108:	c2 01       	movw	r24, r4
    110a:	82 19       	sub	r24, r2
    110c:	93 09       	sbc	r25, r3
    110e:	81 5a       	subi	r24, 0xA1	; 161
    1110:	9f 40       	sbci	r25, 0x0F	; 15
    1112:	0c f4       	brge	.+2      	; 0x1116 <main+0xbfe>
    1114:	50 c0       	rjmp	.+160    	; 0x11b6 <main+0xc9e>
    1116:	12 01       	movw	r2, r4
    1118:	07 c0       	rjmp	.+14     	; 0x1128 <main+0xc10>
    111a:	f1 e0       	ldi	r31, 0x01	; 1
    111c:	6f 2e       	mov	r6, r31
    111e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    1120:	87 e0       	ldi	r24, 0x07	; 7
    1122:	68 16       	cp	r6, r24
    1124:	71 04       	cpc	r7, r1
    1126:	61 f4       	brne	.+24     	; 0x1140 <main+0xc28>
    1128:	c2 01       	movw	r24, r4
    112a:	82 19       	sub	r24, r2
    112c:	93 09       	sbc	r25, r3
    112e:	85 36       	cpi	r24, 0x65	; 101
    1130:	91 05       	cpc	r25, r1
    1132:	0c f4       	brge	.+2      	; 0x1136 <main+0xc1e>
    1134:	50 c0       	rjmp	.+160    	; 0x11d6 <main+0xcbe>
    1136:	12 01       	movw	r2, r4
    1138:	07 c0       	rjmp	.+14     	; 0x1148 <main+0xc30>
    113a:	e2 e0       	ldi	r30, 0x02	; 2
    113c:	6e 2e       	mov	r6, r30
    113e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    1140:	98 e0       	ldi	r25, 0x08	; 8
    1142:	69 16       	cp	r6, r25
    1144:	71 04       	cpc	r7, r1
    1146:	61 f4       	brne	.+24     	; 0x1160 <main+0xc48>
    1148:	c2 01       	movw	r24, r4
    114a:	82 19       	sub	r24, r2
    114c:	93 09       	sbc	r25, r3
    114e:	85 36       	cpi	r24, 0x65	; 101
    1150:	91 05       	cpc	r25, r1
    1152:	0c f4       	brge	.+2      	; 0x1156 <main+0xc3e>
    1154:	4e c0       	rjmp	.+156    	; 0x11f2 <main+0xcda>
    1156:	12 01       	movw	r2, r4
    1158:	07 c0       	rjmp	.+14     	; 0x1168 <main+0xc50>
    115a:	73 e0       	ldi	r23, 0x03	; 3
    115c:	67 2e       	mov	r6, r23
    115e:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    1160:	a9 e0       	ldi	r26, 0x09	; 9
    1162:	6a 16       	cp	r6, r26
    1164:	71 04       	cpc	r7, r1
    1166:	61 f4       	brne	.+24     	; 0x1180 <main+0xc68>
    1168:	c2 01       	movw	r24, r4
    116a:	82 19       	sub	r24, r2
    116c:	93 09       	sbc	r25, r3
    116e:	81 5d       	subi	r24, 0xD1	; 209
    1170:	97 40       	sbci	r25, 0x07	; 7
    1172:	0c f4       	brge	.+2      	; 0x1176 <main+0xc5e>
    1174:	4e c0       	rjmp	.+156    	; 0x1212 <main+0xcfa>
    1176:	12 01       	movw	r2, r4
    1178:	07 c0       	rjmp	.+14     	; 0x1188 <main+0xc70>
    117a:	64 e0       	ldi	r22, 0x04	; 4
    117c:	66 2e       	mov	r6, r22
    117e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    1180:	2a e0       	ldi	r18, 0x0A	; 10
    1182:	62 16       	cp	r6, r18
    1184:	71 04       	cpc	r7, r1
    1186:	51 f4       	brne	.+20     	; 0x119c <main+0xc84>
    1188:	c2 01       	movw	r24, r4
    118a:	82 19       	sub	r24, r2
    118c:	93 09       	sbc	r25, r3
    118e:	85 36       	cpi	r24, 0x65	; 101
    1190:	91 05       	cpc	r25, r1
    1192:	44 f4       	brge	.+16     	; 0x11a4 <main+0xc8c>
    1194:	4e c0       	rjmp	.+156    	; 0x1232 <main+0xd1a>
    1196:	55 e0       	ldi	r21, 0x05	; 5
    1198:	65 2e       	mov	r6, r21
    119a:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    119c:	3b e0       	ldi	r19, 0x0B	; 11
    119e:	63 16       	cp	r6, r19
    11a0:	71 04       	cpc	r7, r1
    11a2:	61 f4       	brne	.+24     	; 0x11bc <main+0xca4>
    11a4:	c2 01       	movw	r24, r4
    11a6:	82 19       	sub	r24, r2
    11a8:	93 09       	sbc	r25, r3
    11aa:	81 5d       	subi	r24, 0xD1	; 209
    11ac:	97 40       	sbci	r25, 0x07	; 7
    11ae:	0c f4       	brge	.+2      	; 0x11b2 <main+0xc9a>
    11b0:	50 c0       	rjmp	.+160    	; 0x1252 <main+0xd3a>
    11b2:	12 01       	movw	r2, r4
    11b4:	07 c0       	rjmp	.+14     	; 0x11c4 <main+0xcac>
    11b6:	46 e0       	ldi	r20, 0x06	; 6
    11b8:	64 2e       	mov	r6, r20
    11ba:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    11bc:	5c e0       	ldi	r21, 0x0C	; 12
    11be:	65 16       	cp	r6, r21
    11c0:	71 04       	cpc	r7, r1
    11c2:	61 f4       	brne	.+24     	; 0x11dc <main+0xcc4>
    11c4:	c2 01       	movw	r24, r4
    11c6:	82 19       	sub	r24, r2
    11c8:	93 09       	sbc	r25, r3
    11ca:	85 36       	cpi	r24, 0x65	; 101
    11cc:	91 05       	cpc	r25, r1
    11ce:	0c f4       	brge	.+2      	; 0x11d2 <main+0xcba>
    11d0:	4e c0       	rjmp	.+156    	; 0x126e <main+0xd56>
    11d2:	12 01       	movw	r2, r4
    11d4:	07 c0       	rjmp	.+14     	; 0x11e4 <main+0xccc>
    11d6:	37 e0       	ldi	r19, 0x07	; 7
    11d8:	63 2e       	mov	r6, r19
    11da:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    11dc:	8d e0       	ldi	r24, 0x0D	; 13
    11de:	68 16       	cp	r6, r24
    11e0:	71 04       	cpc	r7, r1
    11e2:	51 f4       	brne	.+20     	; 0x11f8 <main+0xce0>
    11e4:	c2 01       	movw	r24, r4
    11e6:	82 19       	sub	r24, r2
    11e8:	93 09       	sbc	r25, r3
    11ea:	81 5d       	subi	r24, 0xD1	; 209
    11ec:	97 40       	sbci	r25, 0x07	; 7
    11ee:	44 f4       	brge	.+16     	; 0x1200 <main+0xce8>
    11f0:	4f c0       	rjmp	.+158    	; 0x1290 <main+0xd78>
    11f2:	28 e0       	ldi	r18, 0x08	; 8
    11f4:	62 2e       	mov	r6, r18
    11f6:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
					}
				if(state == B1STOP2 && counter - counterRef > pWait){
    11f8:	be e0       	ldi	r27, 0x0E	; 14
    11fa:	6b 16       	cp	r6, r27
    11fc:	71 04       	cpc	r7, r1
    11fe:	61 f4       	brne	.+24     	; 0x1218 <main+0xd00>
    1200:	c2 01       	movw	r24, r4
    1202:	82 19       	sub	r24, r2
    1204:	93 09       	sbc	r25, r3
    1206:	85 36       	cpi	r24, 0x65	; 101
    1208:	91 05       	cpc	r25, r1
    120a:	0c f4       	brge	.+2      	; 0x120e <main+0xcf6>
    120c:	53 c0       	rjmp	.+166    	; 0x12b4 <main+0xd9c>
    120e:	12 01       	movw	r2, r4
    1210:	07 c0       	rjmp	.+14     	; 0x1220 <main+0xd08>
    1212:	99 e0       	ldi	r25, 0x09	; 9
    1214:	69 2e       	mov	r6, r25
    1216:	71 2c       	mov	r7, r1
					state = 23;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1218:	27 e1       	ldi	r18, 0x17	; 23
    121a:	62 16       	cp	r6, r18
    121c:	71 04       	cpc	r7, r1
    121e:	61 f4       	brne	.+24     	; 0x1238 <main+0xd20>
    1220:	c2 01       	movw	r24, r4
    1222:	82 19       	sub	r24, r2
    1224:	93 09       	sbc	r25, r3
    1226:	81 5a       	subi	r24, 0xA1	; 161
    1228:	9f 40       	sbci	r25, 0x0F	; 15
    122a:	0c f4       	brge	.+2      	; 0x122e <main+0xd16>
    122c:	53 c0       	rjmp	.+166    	; 0x12d4 <main+0xdbc>
    122e:	12 01       	movw	r2, r4
    1230:	07 c0       	rjmp	.+14     	; 0x1240 <main+0xd28>
    1232:	8a e0       	ldi	r24, 0x0A	; 10
    1234:	68 2e       	mov	r6, r24
    1236:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    1238:	48 e1       	ldi	r20, 0x18	; 24
    123a:	64 16       	cp	r6, r20
    123c:	71 04       	cpc	r7, r1
    123e:	61 f4       	brne	.+24     	; 0x1258 <main+0xd40>
    1240:	c2 01       	movw	r24, r4
    1242:	82 19       	sub	r24, r2
    1244:	93 09       	sbc	r25, r3
    1246:	85 36       	cpi	r24, 0x65	; 101
    1248:	91 05       	cpc	r25, r1
    124a:	0c f4       	brge	.+2      	; 0x124e <main+0xd36>
    124c:	51 c0       	rjmp	.+162    	; 0x12f0 <main+0xdd8>
    124e:	12 01       	movw	r2, r4
    1250:	07 c0       	rjmp	.+14     	; 0x1260 <main+0xd48>
    1252:	0b e0       	ldi	r16, 0x0B	; 11
    1254:	60 2e       	mov	r6, r16
    1256:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    1258:	59 e1       	ldi	r21, 0x19	; 25
    125a:	65 16       	cp	r6, r21
    125c:	71 04       	cpc	r7, r1
    125e:	51 f4       	brne	.+20     	; 0x1274 <main+0xd5c>
    1260:	c2 01       	movw	r24, r4
    1262:	82 19       	sub	r24, r2
    1264:	93 09       	sbc	r25, r3
    1266:	81 5a       	subi	r24, 0xA1	; 161
    1268:	9f 40       	sbci	r25, 0x0F	; 15
    126a:	44 f4       	brge	.+16     	; 0x127c <main+0xd64>
    126c:	51 c0       	rjmp	.+162    	; 0x1310 <main+0xdf8>
    126e:	1c e0       	ldi	r17, 0x0C	; 12
    1270:	61 2e       	mov	r6, r17
    1272:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    1274:	ba e1       	ldi	r27, 0x1A	; 26
    1276:	6b 16       	cp	r6, r27
    1278:	71 04       	cpc	r7, r1
    127a:	69 f4       	brne	.+26     	; 0x1296 <main+0xd7e>
    127c:	c2 01       	movw	r24, r4
    127e:	82 19       	sub	r24, r2
    1280:	93 09       	sbc	r25, r3
    1282:	81 5a       	subi	r24, 0xA1	; 161
    1284:	9f 40       	sbci	r25, 0x0F	; 15
    1286:	0c f4       	brge	.+2      	; 0x128a <main+0xd72>
    1288:	53 c0       	rjmp	.+166    	; 0x1330 <main+0xe18>
    128a:	58 86       	std	Y+8, r5	; 0x08
    128c:	4f 82       	std	Y+7, r4	; 0x07
    128e:	07 c0       	rjmp	.+14     	; 0x129e <main+0xd86>
    1290:	bd e0       	ldi	r27, 0x0D	; 13
    1292:	6b 2e       	mov	r6, r27
    1294:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    1296:	3b e1       	ldi	r19, 0x1B	; 27
    1298:	63 16       	cp	r6, r19
    129a:	71 04       	cpc	r7, r1
    129c:	71 f4       	brne	.+28     	; 0x12ba <main+0xda2>
    129e:	c2 01       	movw	r24, r4
    12a0:	4f 81       	ldd	r20, Y+7	; 0x07
    12a2:	58 85       	ldd	r21, Y+8	; 0x08
    12a4:	84 1b       	sub	r24, r20
    12a6:	95 0b       	sbc	r25, r21
    12a8:	85 36       	cpi	r24, 0x65	; 101
    12aa:	91 05       	cpc	r25, r1
    12ac:	0c f4       	brge	.+2      	; 0x12b0 <main+0xd98>
    12ae:	50 c0       	rjmp	.+160    	; 0x1350 <main+0xe38>
    12b0:	12 01       	movw	r2, r4
    12b2:	07 c0       	rjmp	.+14     	; 0x12c2 <main+0xdaa>
    12b4:	ae e0       	ldi	r26, 0x0E	; 14
    12b6:	6a 2e       	mov	r6, r26
    12b8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    12ba:	5c e1       	ldi	r21, 0x1C	; 28
    12bc:	65 16       	cp	r6, r21
    12be:	71 04       	cpc	r7, r1
    12c0:	61 f4       	brne	.+24     	; 0x12da <main+0xdc2>
    12c2:	c2 01       	movw	r24, r4
    12c4:	82 19       	sub	r24, r2
    12c6:	93 09       	sbc	r25, r3
    12c8:	85 36       	cpi	r24, 0x65	; 101
    12ca:	91 05       	cpc	r25, r1
    12cc:	0c f4       	brge	.+2      	; 0x12d0 <main+0xdb8>
    12ce:	50 c0       	rjmp	.+160    	; 0x1370 <main+0xe58>
    12d0:	12 01       	movw	r2, r4
    12d2:	07 c0       	rjmp	.+14     	; 0x12e2 <main+0xdca>
    12d4:	f7 e1       	ldi	r31, 0x17	; 23
    12d6:	6f 2e       	mov	r6, r31
    12d8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    12da:	8d e1       	ldi	r24, 0x1D	; 29
    12dc:	68 16       	cp	r6, r24
    12de:	71 04       	cpc	r7, r1
    12e0:	51 f4       	brne	.+20     	; 0x12f6 <main+0xdde>
    12e2:	c2 01       	movw	r24, r4
    12e4:	82 19       	sub	r24, r2
    12e6:	93 09       	sbc	r25, r3
    12e8:	81 5a       	subi	r24, 0xA1	; 161
    12ea:	9f 40       	sbci	r25, 0x0F	; 15
    12ec:	44 f4       	brge	.+16     	; 0x12fe <main+0xde6>
    12ee:	50 c0       	rjmp	.+160    	; 0x1390 <main+0xe78>
    12f0:	e8 e1       	ldi	r30, 0x18	; 24
    12f2:	6e 2e       	mov	r6, r30
    12f4:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totalStepLength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    12f6:	be e1       	ldi	r27, 0x1E	; 30
    12f8:	6b 16       	cp	r6, r27
    12fa:	71 04       	cpc	r7, r1
    12fc:	61 f4       	brne	.+24     	; 0x1316 <main+0xdfe>
    12fe:	c2 01       	movw	r24, r4
    1300:	82 19       	sub	r24, r2
    1302:	93 09       	sbc	r25, r3
    1304:	81 5a       	subi	r24, 0xA1	; 161
    1306:	9f 40       	sbci	r25, 0x0F	; 15
    1308:	0c f4       	brge	.+2      	; 0x130c <main+0xdf4>
    130a:	53 c0       	rjmp	.+166    	; 0x13b2 <main+0xe9a>
    130c:	12 01       	movw	r2, r4
    130e:	07 c0       	rjmp	.+14     	; 0x131e <main+0xe06>
    1310:	79 e1       	ldi	r23, 0x19	; 25
    1312:	67 2e       	mov	r6, r23
    1314:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1316:	3f e1       	ldi	r19, 0x1F	; 31
    1318:	63 16       	cp	r6, r19
    131a:	71 04       	cpc	r7, r1
    131c:	61 f4       	brne	.+24     	; 0x1336 <main+0xe1e>
    131e:	c2 01       	movw	r24, r4
    1320:	82 19       	sub	r24, r2
    1322:	93 09       	sbc	r25, r3
    1324:	89 5e       	subi	r24, 0xE9	; 233
    1326:	93 40       	sbci	r25, 0x03	; 3
    1328:	0c f4       	brge	.+2      	; 0x132c <main+0xe14>
    132a:	4b c1       	rjmp	.+662    	; 0x15c2 <main+0x10aa>
    132c:	12 01       	movw	r2, r4
    132e:	07 c0       	rjmp	.+14     	; 0x133e <main+0xe26>
    1330:	6a e1       	ldi	r22, 0x1A	; 26
    1332:	66 2e       	mov	r6, r22
    1334:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    1336:	50 e2       	ldi	r21, 0x20	; 32
    1338:	65 16       	cp	r6, r21
    133a:	71 04       	cpc	r7, r1
    133c:	61 f4       	brne	.+24     	; 0x1356 <main+0xe3e>
    133e:	c2 01       	movw	r24, r4
    1340:	82 19       	sub	r24, r2
    1342:	93 09       	sbc	r25, r3
    1344:	81 5a       	subi	r24, 0xA1	; 161
    1346:	9f 40       	sbci	r25, 0x0F	; 15
    1348:	0c f4       	brge	.+2      	; 0x134c <main+0xe34>
    134a:	47 c1       	rjmp	.+654    	; 0x15da <main+0x10c2>
    134c:	12 01       	movw	r2, r4
    134e:	07 c0       	rjmp	.+14     	; 0x135e <main+0xe46>
    1350:	5b e1       	ldi	r21, 0x1B	; 27
    1352:	65 2e       	mov	r6, r21
    1354:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    1356:	b1 e2       	ldi	r27, 0x21	; 33
    1358:	6b 16       	cp	r6, r27
    135a:	71 04       	cpc	r7, r1
    135c:	61 f4       	brne	.+24     	; 0x1376 <main+0xe5e>
    135e:	c2 01       	movw	r24, r4
    1360:	82 19       	sub	r24, r2
    1362:	93 09       	sbc	r25, r3
    1364:	85 36       	cpi	r24, 0x65	; 101
    1366:	91 05       	cpc	r25, r1
    1368:	0c f4       	brge	.+2      	; 0x136c <main+0xe54>
    136a:	44 c1       	rjmp	.+648    	; 0x15f4 <main+0x10dc>
    136c:	12 01       	movw	r2, r4
    136e:	07 c0       	rjmp	.+14     	; 0x137e <main+0xe66>
    1370:	4c e1       	ldi	r20, 0x1C	; 28
    1372:	64 2e       	mov	r6, r20
    1374:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    1376:	22 e2       	ldi	r18, 0x22	; 34
    1378:	62 16       	cp	r6, r18
    137a:	71 04       	cpc	r7, r1
    137c:	61 f4       	brne	.+24     	; 0x1396 <main+0xe7e>
    137e:	c2 01       	movw	r24, r4
    1380:	82 19       	sub	r24, r2
    1382:	93 09       	sbc	r25, r3
    1384:	81 5a       	subi	r24, 0xA1	; 161
    1386:	9f 40       	sbci	r25, 0x0F	; 15
    1388:	0c f4       	brge	.+2      	; 0x138c <main+0xe74>
    138a:	46 c1       	rjmp	.+652    	; 0x1618 <main+0x1100>
    138c:	12 01       	movw	r2, r4
    138e:	07 c0       	rjmp	.+14     	; 0x139e <main+0xe86>
    1390:	3d e1       	ldi	r19, 0x1D	; 29
    1392:	63 2e       	mov	r6, r19
    1394:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    1396:	43 e2       	ldi	r20, 0x23	; 35
    1398:	64 16       	cp	r6, r20
    139a:	71 04       	cpc	r7, r1
    139c:	69 f4       	brne	.+26     	; 0x13b8 <main+0xea0>
    139e:	c2 01       	movw	r24, r4
    13a0:	82 19       	sub	r24, r2
    13a2:	93 09       	sbc	r25, r3
    13a4:	0b 97       	sbiw	r24, 0x0b	; 11
    13a6:	0c f4       	brge	.+2      	; 0x13aa <main+0xe92>
    13a8:	44 c1       	rjmp	.+648    	; 0x1632 <main+0x111a>
    13aa:	24 e2       	ldi	r18, 0x24	; 36
    13ac:	62 2e       	mov	r6, r18
    13ae:	71 2c       	mov	r7, r1
    13b0:	5c c1       	rjmp	.+696    	; 0x166a <main+0x1152>
    13b2:	9e e1       	ldi	r25, 0x1E	; 30
    13b4:	69 2e       	mov	r6, r25
    13b6:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    13b8:	f3 01       	movw	r30, r6
    13ba:	e4 32       	cpi	r30, 0x24	; 36
    13bc:	f1 05       	cpc	r31, r1
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <main+0xeaa>
    13c0:	54 c1       	rjmp	.+680    	; 0x166a <main+0x1152>
    13c2:	e0 59       	subi	r30, 0x90	; 144
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	05 90       	lpm	r0, Z+
    13cc:	f4 91       	lpm	r31, Z+
    13ce:	e0 2d       	mov	r30, r0
    13d0:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    13d2:	80 91 5a 03 	lds	r24, 0x035A
    13d6:	20 91 56 03 	lds	r18, 0x0356
    13da:	90 91 58 03 	lds	r25, 0x0358
    13de:	82 ff       	sbrs	r24, 2
    13e0:	07 c0       	rjmp	.+14     	; 0x13f0 <main+0xed8>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    13e2:	2f 7e       	andi	r18, 0xEF	; 239
    13e4:	20 93 56 03 	sts	0x0356, r18
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    13e8:	97 7f       	andi	r25, 0xF7	; 247
    13ea:	90 93 58 03 	sts	0x0358, r25
    13ee:	65 c0       	rjmp	.+202    	; 0x14ba <main+0xfa2>
						fixtureMotor = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    13f0:	2f 7d       	andi	r18, 0xDF	; 223
    13f2:	20 93 56 03 	sts	0x0356, r18
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    13f6:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    13f8:	98 60       	ori	r25, 0x08	; 8
    13fa:	90 93 58 03 	sts	0x0358, r25
						if(print0 == 1){
    13fe:	21 96       	adiw	r28, 0x01	; 1
    1400:	ae ad       	ldd	r26, Y+62	; 0x3e
    1402:	bf ad       	ldd	r27, Y+63	; 0x3f
    1404:	21 97       	sbiw	r28, 0x01	; 1
    1406:	11 97       	sbiw	r26, 0x01	; 1
    1408:	09 f0       	breq	.+2      	; 0x140c <main+0xef4>
    140a:	a9 c0       	rjmp	.+338    	; 0x155e <main+0x1046>
							OrangutanLCD::gotoXY(0,1);
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	61 e0       	ldi	r22, 0x01	; 1
    1410:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1414:	88 e1       	ldi	r24, 0x18	; 24
    1416:	93 e0       	ldi	r25, 0x03	; 3
    1418:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    141c:	21 96       	adiw	r28, 0x01	; 1
    141e:	1f ae       	std	Y+63, r1	; 0x3f
    1420:	1e ae       	std	Y+62, r1	; 0x3e
    1422:	21 97       	sbiw	r28, 0x01	; 1
    1424:	9c c0       	rjmp	.+312    	; 0x155e <main+0x1046>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1426:	20 91 58 03 	lds	r18, 0x0358
    142a:	32 2f       	mov	r19, r18
    142c:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    142e:	c2 01       	movw	r24, r4
    1430:	68 ec       	ldi	r22, 0xC8	; 200
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__divmodhi4>
    1438:	84 36       	cpi	r24, 0x64	; 100
    143a:	91 05       	cpc	r25, r1
    143c:	24 f4       	brge	.+8      	; 0x1446 <main+0xf2e>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    143e:	2c 7f       	andi	r18, 0xFC	; 252
    1440:	20 93 58 03 	sts	0x0358, r18
    1444:	03 c0       	rjmp	.+6      	; 0x144c <main+0xf34>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1446:	32 60       	ori	r19, 0x02	; 2
    1448:	30 93 58 03 	sts	0x0358, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
    144c:	80 91 56 03 	lds	r24, 0x0356
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    1450:	86 60       	ori	r24, 0x06	; 6
    1452:	80 93 56 03 	sts	0x0356, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1456:	80 91 58 03 	lds	r24, 0x0358
    145a:	8b 7f       	andi	r24, 0xFB	; 251
    145c:	80 93 58 03 	sts	0x0358, r24
    1460:	21 e0       	ldi	r18, 0x01	; 1
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	38 a7       	std	Y+40, r19	; 0x28
    1466:	2f a3       	std	Y+39, r18	; 0x27
    1468:	00 c1       	rjmp	.+512    	; 0x166a <main+0x1152>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    146a:	80 91 58 03 	lds	r24, 0x0358
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    146e:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1470:	86 61       	ori	r24, 0x16	; 22
    1472:	80 93 58 03 	sts	0x0358, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    1476:	80 91 56 03 	lds	r24, 0x0356
    147a:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    147c:	8b 7f       	andi	r24, 0xFB	; 251
    147e:	80 93 56 03 	sts	0x0356, r24
    1482:	ec c0       	rjmp	.+472    	; 0x165c <main+0x1144>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1484:	80 91 56 03 	lds	r24, 0x0356
    1488:	8f 7d       	andi	r24, 0xDF	; 223
    148a:	80 93 56 03 	sts	0x0356, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    148e:	80 91 58 03 	lds	r24, 0x0358
    1492:	88 60       	ori	r24, 0x08	; 8
    1494:	80 93 58 03 	sts	0x0358, r24
    1498:	62 c0       	rjmp	.+196    	; 0x155e <main+0x1046>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    149a:	80 91 58 03 	lds	r24, 0x0358
    149e:	8f 7e       	andi	r24, 0xEF	; 239
    14a0:	80 93 58 03 	sts	0x0358, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    14a4:	80 91 56 03 	lds	r24, 0x0356
    14a8:	80 62       	ori	r24, 0x20	; 32
    14aa:	80 93 56 03 	sts	0x0356, r24
    14ae:	dd c0       	rjmp	.+442    	; 0x166a <main+0x1152>
				//*********************************************
					break;
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    14b0:	80 91 56 03 	lds	r24, 0x0356
    14b4:	80 61       	ori	r24, 0x10	; 16
    14b6:	80 93 56 03 	sts	0x0356, r24
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	98 a3       	std	Y+32, r25	; 0x20
    14c0:	8f 8f       	std	Y+31, r24	; 0x1f
    14c2:	d3 c0       	rjmp	.+422    	; 0x166a <main+0x1152>
					fixtureMotor = 1;
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
    14c4:	80 91 57 03 	lds	r24, 0x0357
    14c8:	81 60       	ori	r24, 0x01	; 1
    14ca:	80 93 57 03 	sts	0x0357, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    14ce:	80 91 56 03 	lds	r24, 0x0356
    14d2:	8f 77       	andi	r24, 0x7F	; 127
    14d4:	80 93 56 03 	sts	0x0356, r24
    14d8:	42 c0       	rjmp	.+132    	; 0x155e <main+0x1046>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    14da:	80 91 58 03 	lds	r24, 0x0358
    14de:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    14e0:	8f 7d       	andi	r24, 0xDF	; 223
    14e2:	80 93 58 03 	sts	0x0358, r24
    14e6:	a1 e0       	ldi	r26, 0x01	; 1
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	be 87       	std	Y+14, r27	; 0x0e
    14ec:	ad 87       	std	Y+13, r26	; 0x0d
    14ee:	bd c0       	rjmp	.+378    	; 0x166a <main+0x1152>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    14f0:	80 91 56 03 	lds	r24, 0x0356
    14f4:	80 61       	ori	r24, 0x10	; 16
    14f6:	80 93 56 03 	sts	0x0356, r24
    14fa:	b3 c0       	rjmp	.+358    	; 0x1662 <main+0x114a>
					fixtureMotor = 1;
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    14fc:	80 91 56 03 	lds	r24, 0x0356
    1500:	8f 77       	andi	r24, 0x7F	; 127
    1502:	80 93 56 03 	sts	0x0356, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1506:	80 91 58 03 	lds	r24, 0x0358
    150a:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    150c:	8f 7d       	andi	r24, 0xDF	; 223
    150e:	80 93 58 03 	sts	0x0358, r24
    1512:	18 a2       	std	Y+32, r1	; 0x20
    1514:	1f 8e       	std	Y+31, r1	; 0x1f
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9e 87       	std	Y+14, r25	; 0x0e
    151c:	8d 87       	std	Y+13, r24	; 0x0d
    151e:	a5 c0       	rjmp	.+330    	; 0x166a <main+0x1152>
					fixtureMotor = 1;
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1520:	80 91 58 03 	lds	r24, 0x0358
    1524:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1526:	80 62       	ori	r24, 0x20	; 32
    1528:	80 93 58 03 	sts	0x0358, r24
    152c:	18 a2       	std	Y+32, r1	; 0x20
    152e:	1f 8e       	std	Y+31, r1	; 0x1f
    1530:	1e 86       	std	Y+14, r1	; 0x0e
    1532:	1d 86       	std	Y+13, r1	; 0x0d
    1534:	9a c0       	rjmp	.+308    	; 0x166a <main+0x1152>
				
					break;
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1536:	80 91 56 03 	lds	r24, 0x0356
    153a:	80 61       	ori	r24, 0x10	; 16
    153c:	80 93 56 03 	sts	0x0356, r24
					fixtureMotor = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
    1540:	80 91 57 03 	lds	r24, 0x0357
    1544:	8e 7f       	andi	r24, 0xFE	; 254
    1546:	80 93 57 03 	sts	0x0357, r24
    154a:	a1 e0       	ldi	r26, 0x01	; 1
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	b8 a3       	std	Y+32, r27	; 0x20
    1550:	af 8f       	std	Y+31, r26	; 0x1f
    1552:	8b c0       	rjmp	.+278    	; 0x166a <main+0x1152>
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1554:	80 91 59 03 	lds	r24, 0x0359
    1558:	87 7f       	andi	r24, 0xF7	; 247
    155a:	80 93 59 03 	sts	0x0359, r24
    155e:	18 a2       	std	Y+32, r1	; 0x20
    1560:	1f 8e       	std	Y+31, r1	; 0x1f
    1562:	83 c0       	rjmp	.+262    	; 0x166a <main+0x1152>
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1564:	80 91 56 03 	lds	r24, 0x0356
    1568:	8f 7e       	andi	r24, 0xEF	; 239
    156a:	80 93 56 03 	sts	0x0356, r24
    156e:	21 e0       	ldi	r18, 0x01	; 1
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	38 a3       	std	Y+32, r19	; 0x20
    1574:	2f 8f       	std	Y+31, r18	; 0x1f
    1576:	79 c0       	rjmp	.+242    	; 0x166a <main+0x1152>
					fixtureMotor = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1578:	80 91 59 03 	lds	r24, 0x0359
    157c:	88 60       	ori	r24, 0x08	; 8
    157e:	10 c0       	rjmp	.+32     	; 0x15a0 <main+0x1088>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
    1580:	80 91 57 03 	lds	r24, 0x0357
    1584:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1586:	8f 7d       	andi	r24, 0xDF	; 223
    1588:	80 93 57 03 	sts	0x0357, r24
    158c:	18 a2       	std	Y+32, r1	; 0x20
    158e:	1f 8e       	std	Y+31, r1	; 0x1f
    1590:	41 e0       	ldi	r20, 0x01	; 1
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	58 8f       	std	Y+24, r21	; 0x18
    1596:	4f 8b       	std	Y+23, r20	; 0x17
    1598:	68 c0       	rjmp	.+208    	; 0x166a <main+0x1152>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    159a:	80 91 59 03 	lds	r24, 0x0359
    159e:	8d 7f       	andi	r24, 0xFD	; 253
    15a0:	80 93 59 03 	sts	0x0359, r24
    15a4:	62 c0       	rjmp	.+196    	; 0x166a <main+0x1152>
				case DRY2:
					fixtureMotor = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    15a6:	80 91 57 03 	lds	r24, 0x0357
    15aa:	8f 7b       	andi	r24, 0xBF	; 191
    15ac:	80 93 57 03 	sts	0x0357, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    15b0:	80 91 59 03 	lds	r24, 0x0359
    15b4:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    15b6:	8b 7f       	andi	r24, 0xFB	; 251
    15b8:	80 93 59 03 	sts	0x0359, r24
    15bc:	18 8e       	std	Y+24, r1	; 0x18
    15be:	1f 8a       	std	Y+23, r1	; 0x17
    15c0:	54 c0       	rjmp	.+168    	; 0x166a <main+0x1152>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    15c2:	80 91 58 03 	lds	r24, 0x0358
    15c6:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    15c8:	80 61       	ori	r24, 0x10	; 16
    15ca:	80 93 58 03 	sts	0x0358, r24
    15ce:	18 a2       	std	Y+32, r1	; 0x20
    15d0:	1f 8e       	std	Y+31, r1	; 0x1f
    15d2:	8f e1       	ldi	r24, 0x1F	; 31
    15d4:	68 2e       	mov	r6, r24
    15d6:	71 2c       	mov	r7, r1
    15d8:	48 c0       	rjmp	.+144    	; 0x166a <main+0x1152>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    15da:	80 91 56 03 	lds	r24, 0x0356
    15de:	8f 7e       	andi	r24, 0xEF	; 239
    15e0:	80 93 56 03 	sts	0x0356, r24
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	98 a3       	std	Y+32, r25	; 0x20
    15ea:	8f 8f       	std	Y+31, r24	; 0x1f
    15ec:	00 e2       	ldi	r16, 0x20	; 32
    15ee:	60 2e       	mov	r6, r16
    15f0:	71 2c       	mov	r7, r1
    15f2:	3b c0       	rjmp	.+118    	; 0x166a <main+0x1152>
					fixtureMotor = 1;
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    15f4:	80 91 56 03 	lds	r24, 0x0356
    15f8:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    15fa:	84 60       	ori	r24, 0x04	; 4
    15fc:	80 93 56 03 	sts	0x0356, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1600:	80 91 58 03 	lds	r24, 0x0358
    1604:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1606:	8f 7e       	andi	r24, 0xEF	; 239
    1608:	80 93 58 03 	sts	0x0358, r24
    160c:	18 a2       	std	Y+32, r1	; 0x20
    160e:	1f 8e       	std	Y+31, r1	; 0x1f
    1610:	11 e2       	ldi	r17, 0x21	; 33
    1612:	61 2e       	mov	r6, r17
    1614:	71 2c       	mov	r7, r1
    1616:	29 c0       	rjmp	.+82     	; 0x166a <main+0x1152>
					break;
    1618:	b2 e2       	ldi	r27, 0x22	; 34
    161a:	6b 2e       	mov	r6, r27
    161c:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    161e:	80 91 56 03 	lds	r24, 0x0356
    1622:	8d 7f       	andi	r24, 0xFD	; 253
    1624:	80 93 56 03 	sts	0x0356, r24
    1628:	a1 e0       	ldi	r26, 0x01	; 1
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	b8 a7       	std	Y+40, r27	; 0x28
    162e:	af a3       	std	Y+39, r26	; 0x27
    1630:	1c c0       	rjmp	.+56     	; 0x166a <main+0x1152>
					plateLoadMotor = 1;
					break;
    1632:	a3 e2       	ldi	r26, 0x23	; 35
    1634:	6a 2e       	mov	r6, r26
    1636:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    1638:	80 91 56 03 	lds	r24, 0x0356
    163c:	8b 7f       	andi	r24, 0xFB	; 251
    163e:	80 93 56 03 	sts	0x0356, r24
					if(print35 == 1){
    1642:	2d ad       	ldd	r18, Y+61	; 0x3d
    1644:	3e ad       	ldd	r19, Y+62	; 0x3e
    1646:	21 30       	cpi	r18, 0x01	; 1
    1648:	31 05       	cpc	r19, r1
    164a:	41 f4       	brne	.+16     	; 0x165c <main+0x1144>
						OrangutanLCD::clear();
    164c:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1650:	86 e2       	ldi	r24, 0x26	; 38
    1652:	93 e0       	ldi	r25, 0x03	; 3
    1654:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    1658:	1e ae       	std	Y+62, r1	; 0x3e
    165a:	1d ae       	std	Y+61, r1	; 0x3d
    165c:	18 a6       	std	Y+40, r1	; 0x28
    165e:	1f a2       	std	Y+39, r1	; 0x27
    1660:	04 c0       	rjmp	.+8      	; 0x166a <main+0x1152>
    1662:	41 e0       	ldi	r20, 0x01	; 1
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	58 a3       	std	Y+32, r21	; 0x20
    1668:	4f 8f       	std	Y+31, r20	; 0x1f
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    166a:	8d b7       	in	r24, 0x3d	; 61
    166c:	9e b7       	in	r25, 0x3e	; 62
    166e:	42 97       	sbiw	r24, 0x12	; 18
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	9e bf       	out	0x3e, r25	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	8d bf       	out	0x3d, r24	; 61
    167a:	ed b7       	in	r30, 0x3d	; 61
    167c:	fe b7       	in	r31, 0x3e	; 62
    167e:	31 96       	adiw	r30, 0x01	; 1
    1680:	82 e0       	ldi	r24, 0x02	; 2
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	ad b7       	in	r26, 0x3d	; 61
    1686:	be b7       	in	r27, 0x3e	; 62
    1688:	12 96       	adiw	r26, 0x02	; 2
    168a:	9c 93       	st	X, r25
    168c:	8e 93       	st	-X, r24
    168e:	11 97       	sbiw	r26, 0x01	; 1
    1690:	93 83       	std	Z+3, r25	; 0x03
    1692:	82 83       	std	Z+2, r24	; 0x02
    1694:	95 83       	std	Z+5, r25	; 0x05
    1696:	84 83       	std	Z+4, r24	; 0x04
    1698:	97 83       	std	Z+7, r25	; 0x07
    169a:	86 83       	std	Z+6, r24	; 0x06
    169c:	21 e0       	ldi	r18, 0x01	; 1
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	31 87       	std	Z+9, r19	; 0x09
    16a2:	20 87       	std	Z+8, r18	; 0x08
    16a4:	33 87       	std	Z+11, r19	; 0x0b
    16a6:	22 87       	std	Z+10, r18	; 0x0a
    16a8:	35 87       	std	Z+13, r19	; 0x0d
    16aa:	24 87       	std	Z+12, r18	; 0x0c
    16ac:	37 87       	std	Z+15, r19	; 0x0f
    16ae:	26 87       	std	Z+14, r18	; 0x0e
    16b0:	31 8b       	std	Z+17, r19	; 0x11
    16b2:	20 8b       	std	Z+16, r18	; 0x10
    16b4:	c2 01       	movw	r24, r4
    16b6:	b1 01       	movw	r22, r2
    16b8:	4f 81       	ldd	r20, Y+7	; 0x07
    16ba:	58 85       	ldd	r21, Y+8	; 0x08
    16bc:	2f a1       	ldd	r18, Y+39	; 0x27
    16be:	38 a5       	ldd	r19, Y+40	; 0x28
    16c0:	0f 8d       	ldd	r16, Y+31	; 0x1f
    16c2:	18 a1       	ldd	r17, Y+32	; 0x20
    16c4:	ed 84       	ldd	r14, Y+13	; 0x0d
    16c6:	fe 84       	ldd	r15, Y+14	; 0x0e
    16c8:	cc 24       	eor	r12, r12
    16ca:	dd 24       	eor	r13, r13
    16cc:	af 88       	ldd	r10, Y+23	; 0x17
    16ce:	b8 8c       	ldd	r11, Y+24	; 0x18
    16d0:	f2 e0       	ldi	r31, 0x02	; 2
    16d2:	8f 2e       	mov	r8, r31
    16d4:	91 2c       	mov	r9, r1
    16d6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    16da:	4d b7       	in	r20, 0x3d	; 61
    16dc:	5e b7       	in	r21, 0x3e	; 62
    16de:	4e 5e       	subi	r20, 0xEE	; 238
    16e0:	5f 4f       	sbci	r21, 0xFF	; 255
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	5e bf       	out	0x3e, r21	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	4d bf       	out	0x3d, r20	; 61
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>
		u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;*/

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("FIRST B");
			while(state != DONER)
    16f4:	54 e2       	ldi	r21, 0x24	; 36
    16f6:	65 16       	cp	r6, r21
    16f8:	71 04       	cpc	r7, r1
    16fa:	11 f4       	brne	.+4      	; 0x1700 <main+0x11e8>
    16fc:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <main+0x2a6c>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    1700:	08 94       	sec
    1702:	41 1c       	adc	r4, r1
    1704:	51 1c       	adc	r5, r1
    1706:	8b cc       	rjmp	.-1770   	; 0x101e <main+0xb06>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    1708:	82 e0       	ldi	r24, 0x02	; 2
    170a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
    170e:	88 23       	and	r24, r24
    1710:	11 f0       	breq	.+4      	; 0x1716 <main+0x11fe>
    1712:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <main+0x2acc>
			OrangutanLCD::gotoXY(7,0);
    1716:	87 e0       	ldi	r24, 0x07	; 7
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("SECOND B");
    171e:	83 e3       	ldi	r24, 0x33	; 51
    1720:	93 e0       	ldi	r25, 0x03	; 3
    1722:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    1726:	66 24       	eor	r6, r6
    1728:	77 24       	eor	r7, r7
    172a:	1c 82       	std	Y+4, r1	; 0x04
    172c:	1b 82       	std	Y+3, r1	; 0x03
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9a af       	std	Y+58, r25	; 0x3a
    1734:	89 af       	std	Y+57, r24	; 0x39
    1736:	9c ab       	std	Y+52, r25	; 0x34
    1738:	8b ab       	std	Y+51, r24	; 0x33
    173a:	1e a6       	std	Y+46, r1	; 0x2e
    173c:	1d a6       	std	Y+45, r1	; 0x2d
    173e:	1e a2       	std	Y+38, r1	; 0x26
    1740:	1d a2       	std	Y+37, r1	; 0x25
    1742:	1e 8e       	std	Y+30, r1	; 0x1e
    1744:	1d 8e       	std	Y+29, r1	; 0x1d
    1746:	1e 8a       	std	Y+22, r1	; 0x16
    1748:	1d 8a       	std	Y+21, r1	; 0x15
    174a:	44 24       	eor	r4, r4
    174c:	55 24       	eor	r5, r5
    174e:	22 24       	eor	r2, r2
    1750:	33 24       	eor	r3, r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1752:	84 e4       	ldi	r24, 0x44	; 68
    1754:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    175e:	85 e4       	ldi	r24, 0x45	; 69
    1760:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1764:	0e 94 85 18 	call	0x310a	; 0x310a <_Z11i2c_readAckv>
    1768:	80 93 5a 03 	sts	0x035A, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    176c:	0e 94 8f 18 	call	0x311e	; 0x311e <_Z11i2c_readNakv>
    1770:	80 93 5b 03 	sts	0x035B, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1774:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <_Z8i2c_stopv>
				
				if(state != INIT){
    1778:	61 14       	cp	r6, r1
    177a:	71 04       	cpc	r7, r1
    177c:	79 f0       	breq	.+30     	; 0x179c <main+0x1284>
					OrangutanLCD::gotoXY(0,1);
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1786:	81 e1       	ldi	r24, 0x11	; 17
    1788:	93 e0       	ldi	r25, 0x03	; 3
    178a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    178e:	b3 01       	movw	r22, r6
    1790:	88 27       	eor	r24, r24
    1792:	77 fd       	sbrc	r23, 7
    1794:	80 95       	com	r24
    1796:	98 2f       	mov	r25, r24
    1798:	0e 94 41 1b 	call	0x3682	; 0x3682 <_ZN12OrangutanLCD5printEl>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    179c:	c2 01       	movw	r24, r4
    179e:	be 01       	movw	r22, r28
    17a0:	6f 5f       	subi	r22, 0xFF	; 255
    17a2:	7f 4f       	sbci	r23, 0xFF	; 255
    17a4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    17a8:	61 14       	cp	r6, r1
    17aa:	71 04       	cpc	r7, r1
    17ac:	29 f4       	brne	.+10     	; 0x17b8 <main+0x12a0>
    17ae:	88 23       	and	r24, r24
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <main+0x129c>
    17b2:	40 c0       	rjmp	.+128    	; 0x1834 <main+0x131c>
    17b4:	12 01       	movw	r2, r4
    17b6:	04 c0       	rjmp	.+8      	; 0x17c0 <main+0x12a8>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && /*counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate&&*/ u_inputByte0.bits_in_inputByte0.plate == 0){
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	69 16       	cp	r6, r25
    17bc:	71 04       	cpc	r7, r1
    17be:	31 f4       	brne	.+12     	; 0x17cc <main+0x12b4>
    17c0:	80 91 5a 03 	lds	r24, 0x035A
    17c4:	80 fd       	sbrc	r24, 0
    17c6:	43 c0       	rjmp	.+134    	; 0x184e <main+0x1336>
    17c8:	12 01       	movw	r2, r4
    17ca:	04 c0       	rjmp	.+8      	; 0x17d4 <main+0x12bc>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    17cc:	a2 e0       	ldi	r26, 0x02	; 2
    17ce:	6a 16       	cp	r6, r26
    17d0:	71 04       	cpc	r7, r1
    17d2:	49 f4       	brne	.+18     	; 0x17e6 <main+0x12ce>
    17d4:	c2 01       	movw	r24, r4
    17d6:	82 19       	sub	r24, r2
    17d8:	93 09       	sbc	r25, r3
    17da:	85 36       	cpi	r24, 0x65	; 101
    17dc:	91 05       	cpc	r25, r1
    17de:	0c f4       	brge	.+2      	; 0x17e2 <main+0x12ca>
    17e0:	46 c0       	rjmp	.+140    	; 0x186e <main+0x1356>
    17e2:	12 01       	movw	r2, r4
    17e4:	04 c0       	rjmp	.+8      	; 0x17ee <main+0x12d6>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    17e6:	b3 e0       	ldi	r27, 0x03	; 3
    17e8:	6b 16       	cp	r6, r27
    17ea:	71 04       	cpc	r7, r1
    17ec:	49 f4       	brne	.+18     	; 0x1800 <main+0x12e8>
    17ee:	c2 01       	movw	r24, r4
    17f0:	82 19       	sub	r24, r2
    17f2:	93 09       	sbc	r25, r3
    17f4:	81 5a       	subi	r24, 0xA1	; 161
    17f6:	9f 40       	sbci	r25, 0x0F	; 15
    17f8:	0c f4       	brge	.+2      	; 0x17fc <main+0x12e4>
    17fa:	49 c0       	rjmp	.+146    	; 0x188e <main+0x1376>
    17fc:	12 01       	movw	r2, r4
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <main+0x12f0>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1800:	34 e0       	ldi	r19, 0x04	; 4
    1802:	63 16       	cp	r6, r19
    1804:	71 04       	cpc	r7, r1
    1806:	49 f4       	brne	.+18     	; 0x181a <main+0x1302>
    1808:	c2 01       	movw	r24, r4
    180a:	82 19       	sub	r24, r2
    180c:	93 09       	sbc	r25, r3
    180e:	89 5e       	subi	r24, 0xE9	; 233
    1810:	93 40       	sbci	r25, 0x03	; 3
    1812:	0c f4       	brge	.+2      	; 0x1816 <main+0x12fe>
    1814:	4c c0       	rjmp	.+152    	; 0x18ae <main+0x1396>
    1816:	12 01       	movw	r2, r4
    1818:	04 c0       	rjmp	.+8      	; 0x1822 <main+0x130a>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    181a:	55 e0       	ldi	r21, 0x05	; 5
    181c:	65 16       	cp	r6, r21
    181e:	71 04       	cpc	r7, r1
    1820:	49 f4       	brne	.+18     	; 0x1834 <main+0x131c>
    1822:	c2 01       	movw	r24, r4
    1824:	82 19       	sub	r24, r2
    1826:	93 09       	sbc	r25, r3
    1828:	85 36       	cpi	r24, 0x65	; 101
    182a:	91 05       	cpc	r25, r1
    182c:	0c f4       	brge	.+2      	; 0x1830 <main+0x1318>
    182e:	4f c0       	rjmp	.+158    	; 0x18ce <main+0x13b6>
    1830:	12 01       	movw	r2, r4
    1832:	04 c0       	rjmp	.+8      	; 0x183c <main+0x1324>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1834:	86 e0       	ldi	r24, 0x06	; 6
    1836:	68 16       	cp	r6, r24
    1838:	71 04       	cpc	r7, r1
    183a:	61 f4       	brne	.+24     	; 0x1854 <main+0x133c>
    183c:	c2 01       	movw	r24, r4
    183e:	82 19       	sub	r24, r2
    1840:	93 09       	sbc	r25, r3
    1842:	81 5a       	subi	r24, 0xA1	; 161
    1844:	9f 40       	sbci	r25, 0x0F	; 15
    1846:	0c f4       	brge	.+2      	; 0x184a <main+0x1332>
    1848:	52 c0       	rjmp	.+164    	; 0x18ee <main+0x13d6>
    184a:	12 01       	movw	r2, r4
    184c:	07 c0       	rjmp	.+14     	; 0x185c <main+0x1344>
    184e:	e1 e0       	ldi	r30, 0x01	; 1
    1850:	6e 2e       	mov	r6, r30
    1852:	71 2c       	mov	r7, r1
					state = B2SET;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    1854:	bf e0       	ldi	r27, 0x0F	; 15
    1856:	6b 16       	cp	r6, r27
    1858:	71 04       	cpc	r7, r1
    185a:	61 f4       	brne	.+24     	; 0x1874 <main+0x135c>
    185c:	c2 01       	movw	r24, r4
    185e:	82 19       	sub	r24, r2
    1860:	93 09       	sbc	r25, r3
    1862:	85 36       	cpi	r24, 0x65	; 101
    1864:	91 05       	cpc	r25, r1
    1866:	0c f4       	brge	.+2      	; 0x186a <main+0x1352>
    1868:	52 c0       	rjmp	.+164    	; 0x190e <main+0x13f6>
    186a:	12 01       	movw	r2, r4
    186c:	07 c0       	rjmp	.+14     	; 0x187c <main+0x1364>
    186e:	72 e0       	ldi	r23, 0x02	; 2
    1870:	67 2e       	mov	r6, r23
    1872:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    1874:	20 e1       	ldi	r18, 0x10	; 16
    1876:	62 16       	cp	r6, r18
    1878:	71 04       	cpc	r7, r1
    187a:	61 f4       	brne	.+24     	; 0x1894 <main+0x137c>
    187c:	c2 01       	movw	r24, r4
    187e:	82 19       	sub	r24, r2
    1880:	93 09       	sbc	r25, r3
    1882:	85 36       	cpi	r24, 0x65	; 101
    1884:	91 05       	cpc	r25, r1
    1886:	0c f4       	brge	.+2      	; 0x188a <main+0x1372>
    1888:	52 c0       	rjmp	.+164    	; 0x192e <main+0x1416>
    188a:	12 01       	movw	r2, r4
    188c:	07 c0       	rjmp	.+14     	; 0x189c <main+0x1384>
    188e:	63 e0       	ldi	r22, 0x03	; 3
    1890:	66 2e       	mov	r6, r22
    1892:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    1894:	31 e1       	ldi	r19, 0x11	; 17
    1896:	63 16       	cp	r6, r19
    1898:	71 04       	cpc	r7, r1
    189a:	61 f4       	brne	.+24     	; 0x18b4 <main+0x139c>
    189c:	c2 01       	movw	r24, r4
    189e:	82 19       	sub	r24, r2
    18a0:	93 09       	sbc	r25, r3
    18a2:	81 5d       	subi	r24, 0xD1	; 209
    18a4:	97 40       	sbci	r25, 0x07	; 7
    18a6:	0c f4       	brge	.+2      	; 0x18aa <main+0x1392>
    18a8:	52 c0       	rjmp	.+164    	; 0x194e <main+0x1436>
    18aa:	12 01       	movw	r2, r4
    18ac:	07 c0       	rjmp	.+14     	; 0x18bc <main+0x13a4>
    18ae:	54 e0       	ldi	r21, 0x04	; 4
    18b0:	65 2e       	mov	r6, r21
    18b2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    18b4:	52 e1       	ldi	r21, 0x12	; 18
    18b6:	65 16       	cp	r6, r21
    18b8:	71 04       	cpc	r7, r1
    18ba:	61 f4       	brne	.+24     	; 0x18d4 <main+0x13bc>
    18bc:	c2 01       	movw	r24, r4
    18be:	82 19       	sub	r24, r2
    18c0:	93 09       	sbc	r25, r3
    18c2:	85 36       	cpi	r24, 0x65	; 101
    18c4:	91 05       	cpc	r25, r1
    18c6:	0c f4       	brge	.+2      	; 0x18ca <main+0x13b2>
    18c8:	52 c0       	rjmp	.+164    	; 0x196e <main+0x1456>
    18ca:	12 01       	movw	r2, r4
    18cc:	07 c0       	rjmp	.+14     	; 0x18dc <main+0x13c4>
    18ce:	45 e0       	ldi	r20, 0x05	; 5
    18d0:	64 2e       	mov	r6, r20
    18d2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    18d4:	83 e1       	ldi	r24, 0x13	; 19
    18d6:	68 16       	cp	r6, r24
    18d8:	71 04       	cpc	r7, r1
    18da:	61 f4       	brne	.+24     	; 0x18f4 <main+0x13dc>
    18dc:	c2 01       	movw	r24, r4
    18de:	82 19       	sub	r24, r2
    18e0:	93 09       	sbc	r25, r3
    18e2:	81 5d       	subi	r24, 0xD1	; 209
    18e4:	97 40       	sbci	r25, 0x07	; 7
    18e6:	0c f4       	brge	.+2      	; 0x18ea <main+0x13d2>
    18e8:	52 c0       	rjmp	.+164    	; 0x198e <main+0x1476>
    18ea:	12 01       	movw	r2, r4
    18ec:	07 c0       	rjmp	.+14     	; 0x18fc <main+0x13e4>
    18ee:	36 e0       	ldi	r19, 0x06	; 6
    18f0:	63 2e       	mov	r6, r19
    18f2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    18f4:	b4 e1       	ldi	r27, 0x14	; 20
    18f6:	6b 16       	cp	r6, r27
    18f8:	71 04       	cpc	r7, r1
    18fa:	61 f4       	brne	.+24     	; 0x1914 <main+0x13fc>
    18fc:	c2 01       	movw	r24, r4
    18fe:	82 19       	sub	r24, r2
    1900:	93 09       	sbc	r25, r3
    1902:	85 36       	cpi	r24, 0x65	; 101
    1904:	91 05       	cpc	r25, r1
    1906:	0c f4       	brge	.+2      	; 0x190a <main+0x13f2>
    1908:	50 c0       	rjmp	.+160    	; 0x19aa <main+0x1492>
    190a:	12 01       	movw	r2, r4
    190c:	07 c0       	rjmp	.+14     	; 0x191c <main+0x1404>
    190e:	2f e0       	ldi	r18, 0x0F	; 15
    1910:	62 2e       	mov	r6, r18
    1912:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    1914:	25 e1       	ldi	r18, 0x15	; 21
    1916:	62 16       	cp	r6, r18
    1918:	71 04       	cpc	r7, r1
    191a:	61 f4       	brne	.+24     	; 0x1934 <main+0x141c>
    191c:	c2 01       	movw	r24, r4
    191e:	82 19       	sub	r24, r2
    1920:	93 09       	sbc	r25, r3
    1922:	81 5d       	subi	r24, 0xD1	; 209
    1924:	97 40       	sbci	r25, 0x07	; 7
    1926:	0c f4       	brge	.+2      	; 0x192a <main+0x1412>
    1928:	51 c0       	rjmp	.+162    	; 0x19cc <main+0x14b4>
    192a:	12 01       	movw	r2, r4
    192c:	07 c0       	rjmp	.+14     	; 0x193c <main+0x1424>
    192e:	90 e1       	ldi	r25, 0x10	; 16
    1930:	69 2e       	mov	r6, r25
    1932:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    1934:	46 e1       	ldi	r20, 0x16	; 22
    1936:	64 16       	cp	r6, r20
    1938:	71 04       	cpc	r7, r1
    193a:	61 f4       	brne	.+24     	; 0x1954 <main+0x143c>
    193c:	c2 01       	movw	r24, r4
    193e:	82 19       	sub	r24, r2
    1940:	93 09       	sbc	r25, r3
    1942:	85 36       	cpi	r24, 0x65	; 101
    1944:	91 05       	cpc	r25, r1
    1946:	0c f4       	brge	.+2      	; 0x194a <main+0x1432>
    1948:	53 c0       	rjmp	.+166    	; 0x19f0 <main+0x14d8>
    194a:	12 01       	movw	r2, r4
    194c:	07 c0       	rjmp	.+14     	; 0x195c <main+0x1444>
    194e:	81 e1       	ldi	r24, 0x11	; 17
    1950:	68 2e       	mov	r6, r24
    1952:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1954:	57 e1       	ldi	r21, 0x17	; 23
    1956:	65 16       	cp	r6, r21
    1958:	71 04       	cpc	r7, r1
    195a:	61 f4       	brne	.+24     	; 0x1974 <main+0x145c>
    195c:	c2 01       	movw	r24, r4
    195e:	82 19       	sub	r24, r2
    1960:	93 09       	sbc	r25, r3
    1962:	81 5a       	subi	r24, 0xA1	; 161
    1964:	9f 40       	sbci	r25, 0x0F	; 15
    1966:	0c f4       	brge	.+2      	; 0x196a <main+0x1452>
    1968:	53 c0       	rjmp	.+166    	; 0x1a10 <main+0x14f8>
    196a:	12 01       	movw	r2, r4
    196c:	07 c0       	rjmp	.+14     	; 0x197c <main+0x1464>
    196e:	02 e1       	ldi	r16, 0x12	; 18
    1970:	60 2e       	mov	r6, r16
    1972:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    1974:	b8 e1       	ldi	r27, 0x18	; 24
    1976:	6b 16       	cp	r6, r27
    1978:	71 04       	cpc	r7, r1
    197a:	61 f4       	brne	.+24     	; 0x1994 <main+0x147c>
    197c:	c2 01       	movw	r24, r4
    197e:	82 19       	sub	r24, r2
    1980:	93 09       	sbc	r25, r3
    1982:	85 36       	cpi	r24, 0x65	; 101
    1984:	91 05       	cpc	r25, r1
    1986:	0c f4       	brge	.+2      	; 0x198a <main+0x1472>
    1988:	51 c0       	rjmp	.+162    	; 0x1a2c <main+0x1514>
    198a:	12 01       	movw	r2, r4
    198c:	07 c0       	rjmp	.+14     	; 0x199c <main+0x1484>
    198e:	13 e1       	ldi	r17, 0x13	; 19
    1990:	61 2e       	mov	r6, r17
    1992:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    1994:	29 e1       	ldi	r18, 0x19	; 25
    1996:	62 16       	cp	r6, r18
    1998:	71 04       	cpc	r7, r1
    199a:	51 f4       	brne	.+20     	; 0x19b0 <main+0x1498>
    199c:	c2 01       	movw	r24, r4
    199e:	82 19       	sub	r24, r2
    19a0:	93 09       	sbc	r25, r3
    19a2:	81 5a       	subi	r24, 0xA1	; 161
    19a4:	9f 40       	sbci	r25, 0x0F	; 15
    19a6:	44 f4       	brge	.+16     	; 0x19b8 <main+0x14a0>
    19a8:	51 c0       	rjmp	.+162    	; 0x1a4c <main+0x1534>
    19aa:	b4 e1       	ldi	r27, 0x14	; 20
    19ac:	6b 2e       	mov	r6, r27
    19ae:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    19b0:	4a e1       	ldi	r20, 0x1A	; 26
    19b2:	64 16       	cp	r6, r20
    19b4:	71 04       	cpc	r7, r1
    19b6:	69 f4       	brne	.+26     	; 0x19d2 <main+0x14ba>
    19b8:	c2 01       	movw	r24, r4
    19ba:	82 19       	sub	r24, r2
    19bc:	93 09       	sbc	r25, r3
    19be:	81 5a       	subi	r24, 0xA1	; 161
    19c0:	9f 40       	sbci	r25, 0x0F	; 15
    19c2:	0c f4       	brge	.+2      	; 0x19c6 <main+0x14ae>
    19c4:	53 c0       	rjmp	.+166    	; 0x1a6c <main+0x1554>
    19c6:	5c 82       	std	Y+4, r5	; 0x04
    19c8:	4b 82       	std	Y+3, r4	; 0x03
    19ca:	07 c0       	rjmp	.+14     	; 0x19da <main+0x14c2>
    19cc:	a5 e1       	ldi	r26, 0x15	; 21
    19ce:	6a 2e       	mov	r6, r26
    19d0:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    19d2:	8b e1       	ldi	r24, 0x1B	; 27
    19d4:	68 16       	cp	r6, r24
    19d6:	71 04       	cpc	r7, r1
    19d8:	71 f4       	brne	.+28     	; 0x19f6 <main+0x14de>
    19da:	c2 01       	movw	r24, r4
    19dc:	ab 81       	ldd	r26, Y+3	; 0x03
    19de:	bc 81       	ldd	r27, Y+4	; 0x04
    19e0:	8a 1b       	sub	r24, r26
    19e2:	9b 0b       	sbc	r25, r27
    19e4:	85 36       	cpi	r24, 0x65	; 101
    19e6:	91 05       	cpc	r25, r1
    19e8:	0c f4       	brge	.+2      	; 0x19ec <main+0x14d4>
    19ea:	50 c0       	rjmp	.+160    	; 0x1a8c <main+0x1574>
    19ec:	12 01       	movw	r2, r4
    19ee:	07 c0       	rjmp	.+14     	; 0x19fe <main+0x14e6>
    19f0:	f6 e1       	ldi	r31, 0x16	; 22
    19f2:	6f 2e       	mov	r6, r31
    19f4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    19f6:	bc e1       	ldi	r27, 0x1C	; 28
    19f8:	6b 16       	cp	r6, r27
    19fa:	71 04       	cpc	r7, r1
    19fc:	61 f4       	brne	.+24     	; 0x1a16 <main+0x14fe>
    19fe:	c2 01       	movw	r24, r4
    1a00:	82 19       	sub	r24, r2
    1a02:	93 09       	sbc	r25, r3
    1a04:	85 36       	cpi	r24, 0x65	; 101
    1a06:	91 05       	cpc	r25, r1
    1a08:	0c f4       	brge	.+2      	; 0x1a0c <main+0x14f4>
    1a0a:	50 c0       	rjmp	.+160    	; 0x1aac <main+0x1594>
    1a0c:	12 01       	movw	r2, r4
    1a0e:	07 c0       	rjmp	.+14     	; 0x1a1e <main+0x1506>
    1a10:	e7 e1       	ldi	r30, 0x17	; 23
    1a12:	6e 2e       	mov	r6, r30
    1a14:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    1a16:	2d e1       	ldi	r18, 0x1D	; 29
    1a18:	62 16       	cp	r6, r18
    1a1a:	71 04       	cpc	r7, r1
    1a1c:	51 f4       	brne	.+20     	; 0x1a32 <main+0x151a>
    1a1e:	c2 01       	movw	r24, r4
    1a20:	82 19       	sub	r24, r2
    1a22:	93 09       	sbc	r25, r3
    1a24:	81 5a       	subi	r24, 0xA1	; 161
    1a26:	9f 40       	sbci	r25, 0x0F	; 15
    1a28:	44 f4       	brge	.+16     	; 0x1a3a <main+0x1522>
    1a2a:	50 c0       	rjmp	.+160    	; 0x1acc <main+0x15b4>
    1a2c:	78 e1       	ldi	r23, 0x18	; 24
    1a2e:	67 2e       	mov	r6, r23
    1a30:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totalStepLength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1a32:	4e e1       	ldi	r20, 0x1E	; 30
    1a34:	64 16       	cp	r6, r20
    1a36:	71 04       	cpc	r7, r1
    1a38:	61 f4       	brne	.+24     	; 0x1a52 <main+0x153a>
    1a3a:	c2 01       	movw	r24, r4
    1a3c:	82 19       	sub	r24, r2
    1a3e:	93 09       	sbc	r25, r3
    1a40:	81 5a       	subi	r24, 0xA1	; 161
    1a42:	9f 40       	sbci	r25, 0x0F	; 15
    1a44:	0c f4       	brge	.+2      	; 0x1a48 <main+0x1530>
    1a46:	53 c0       	rjmp	.+166    	; 0x1aee <main+0x15d6>
    1a48:	12 01       	movw	r2, r4
    1a4a:	07 c0       	rjmp	.+14     	; 0x1a5a <main+0x1542>
    1a4c:	69 e1       	ldi	r22, 0x19	; 25
    1a4e:	66 2e       	mov	r6, r22
    1a50:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1a52:	8f e1       	ldi	r24, 0x1F	; 31
    1a54:	68 16       	cp	r6, r24
    1a56:	71 04       	cpc	r7, r1
    1a58:	61 f4       	brne	.+24     	; 0x1a72 <main+0x155a>
    1a5a:	c2 01       	movw	r24, r4
    1a5c:	82 19       	sub	r24, r2
    1a5e:	93 09       	sbc	r25, r3
    1a60:	89 5e       	subi	r24, 0xE9	; 233
    1a62:	93 40       	sbci	r25, 0x03	; 3
    1a64:	0c f4       	brge	.+2      	; 0x1a68 <main+0x1550>
    1a66:	55 c1       	rjmp	.+682    	; 0x1d12 <main+0x17fa>
    1a68:	12 01       	movw	r2, r4
    1a6a:	07 c0       	rjmp	.+14     	; 0x1a7a <main+0x1562>
    1a6c:	5a e1       	ldi	r21, 0x1A	; 26
    1a6e:	65 2e       	mov	r6, r21
    1a70:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    1a72:	b0 e2       	ldi	r27, 0x20	; 32
    1a74:	6b 16       	cp	r6, r27
    1a76:	71 04       	cpc	r7, r1
    1a78:	61 f4       	brne	.+24     	; 0x1a92 <main+0x157a>
    1a7a:	c2 01       	movw	r24, r4
    1a7c:	82 19       	sub	r24, r2
    1a7e:	93 09       	sbc	r25, r3
    1a80:	81 5a       	subi	r24, 0xA1	; 161
    1a82:	9f 40       	sbci	r25, 0x0F	; 15
    1a84:	0c f4       	brge	.+2      	; 0x1a88 <main+0x1570>
    1a86:	51 c1       	rjmp	.+674    	; 0x1d2a <main+0x1812>
    1a88:	12 01       	movw	r2, r4
    1a8a:	07 c0       	rjmp	.+14     	; 0x1a9a <main+0x1582>
    1a8c:	4b e1       	ldi	r20, 0x1B	; 27
    1a8e:	64 2e       	mov	r6, r20
    1a90:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    1a92:	31 e2       	ldi	r19, 0x21	; 33
    1a94:	63 16       	cp	r6, r19
    1a96:	71 04       	cpc	r7, r1
    1a98:	61 f4       	brne	.+24     	; 0x1ab2 <main+0x159a>
    1a9a:	c2 01       	movw	r24, r4
    1a9c:	82 19       	sub	r24, r2
    1a9e:	93 09       	sbc	r25, r3
    1aa0:	85 36       	cpi	r24, 0x65	; 101
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	0c f4       	brge	.+2      	; 0x1aa8 <main+0x1590>
    1aa6:	4e c1       	rjmp	.+668    	; 0x1d44 <main+0x182c>
    1aa8:	12 01       	movw	r2, r4
    1aaa:	07 c0       	rjmp	.+14     	; 0x1aba <main+0x15a2>
    1aac:	3c e1       	ldi	r19, 0x1C	; 28
    1aae:	63 2e       	mov	r6, r19
    1ab0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    1ab2:	42 e2       	ldi	r20, 0x22	; 34
    1ab4:	64 16       	cp	r6, r20
    1ab6:	71 04       	cpc	r7, r1
    1ab8:	61 f4       	brne	.+24     	; 0x1ad2 <main+0x15ba>
    1aba:	c2 01       	movw	r24, r4
    1abc:	82 19       	sub	r24, r2
    1abe:	93 09       	sbc	r25, r3
    1ac0:	81 5a       	subi	r24, 0xA1	; 161
    1ac2:	9f 40       	sbci	r25, 0x0F	; 15
    1ac4:	0c f4       	brge	.+2      	; 0x1ac8 <main+0x15b0>
    1ac6:	50 c1       	rjmp	.+672    	; 0x1d68 <main+0x1850>
    1ac8:	12 01       	movw	r2, r4
    1aca:	07 c0       	rjmp	.+14     	; 0x1ada <main+0x15c2>
    1acc:	2d e1       	ldi	r18, 0x1D	; 29
    1ace:	62 2e       	mov	r6, r18
    1ad0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    1ad2:	83 e2       	ldi	r24, 0x23	; 35
    1ad4:	68 16       	cp	r6, r24
    1ad6:	71 04       	cpc	r7, r1
    1ad8:	69 f4       	brne	.+26     	; 0x1af4 <main+0x15dc>
    1ada:	c2 01       	movw	r24, r4
    1adc:	82 19       	sub	r24, r2
    1ade:	93 09       	sbc	r25, r3
    1ae0:	0b 97       	sbiw	r24, 0x0b	; 11
    1ae2:	0c f4       	brge	.+2      	; 0x1ae6 <main+0x15ce>
    1ae4:	4e c1       	rjmp	.+668    	; 0x1d82 <main+0x186a>
    1ae6:	94 e2       	ldi	r25, 0x24	; 36
    1ae8:	69 2e       	mov	r6, r25
    1aea:	71 2c       	mov	r7, r1
    1aec:	65 c1       	rjmp	.+714    	; 0x1db8 <main+0x18a0>
    1aee:	8e e1       	ldi	r24, 0x1E	; 30
    1af0:	68 2e       	mov	r6, r24
    1af2:	71 2c       	mov	r7, r1
				}


				//state actions
						
				switch (state){
    1af4:	f3 01       	movw	r30, r6
    1af6:	e4 32       	cpi	r30, 0x24	; 36
    1af8:	f1 05       	cpc	r31, r1
    1afa:	08 f0       	brcs	.+2      	; 0x1afe <main+0x15e6>
    1afc:	5d c1       	rjmp	.+698    	; 0x1db8 <main+0x18a0>
    1afe:	ec 56       	subi	r30, 0x6C	; 108
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	ee 0f       	add	r30, r30
    1b04:	ff 1f       	adc	r31, r31
    1b06:	05 90       	lpm	r0, Z+
    1b08:	f4 91       	lpm	r31, Z+
    1b0a:	e0 2d       	mov	r30, r0
    1b0c:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    1b0e:	80 91 5a 03 	lds	r24, 0x035A
    1b12:	20 91 56 03 	lds	r18, 0x0356
    1b16:	90 91 58 03 	lds	r25, 0x0358
    1b1a:	82 ff       	sbrs	r24, 2
    1b1c:	07 c0       	rjmp	.+14     	; 0x1b2c <main+0x1614>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    1b1e:	2f 7e       	andi	r18, 0xEF	; 239
    1b20:	20 93 56 03 	sts	0x0356, r18
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1b24:	97 7f       	andi	r25, 0xF7	; 247
    1b26:	90 93 58 03 	sts	0x0358, r25
    1b2a:	c9 c0       	rjmp	.+402    	; 0x1cbe <main+0x17a6>
						fixtureMotor = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1b2c:	2f 7d       	andi	r18, 0xDF	; 223
    1b2e:	20 93 56 03 	sts	0x0356, r18
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1b32:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1b34:	98 60       	ori	r25, 0x08	; 8
    1b36:	90 93 58 03 	sts	0x0358, r25
						if(print0 == 1){
    1b3a:	2b a9       	ldd	r18, Y+51	; 0x33
    1b3c:	3c a9       	ldd	r19, Y+52	; 0x34
    1b3e:	21 30       	cpi	r18, 0x01	; 1
    1b40:	31 05       	cpc	r19, r1
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <main+0x162e>
    1b44:	b4 c0       	rjmp	.+360    	; 0x1cae <main+0x1796>
							OrangutanLCD::gotoXY(0,1);
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	61 e0       	ldi	r22, 0x01	; 1
    1b4a:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1b4e:	88 e1       	ldi	r24, 0x18	; 24
    1b50:	93 e0       	ldi	r25, 0x03	; 3
    1b52:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    1b56:	1c aa       	std	Y+52, r1	; 0x34
    1b58:	1b aa       	std	Y+51, r1	; 0x33
    1b5a:	a9 c0       	rjmp	.+338    	; 0x1cae <main+0x1796>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1b5c:	20 91 58 03 	lds	r18, 0x0358
    1b60:	32 2f       	mov	r19, r18
    1b62:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    1b64:	c2 01       	movw	r24, r4
    1b66:	68 ec       	ldi	r22, 0xC8	; 200
    1b68:	70 e0       	ldi	r23, 0x00	; 0
    1b6a:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__divmodhi4>
    1b6e:	84 36       	cpi	r24, 0x64	; 100
    1b70:	91 05       	cpc	r25, r1
    1b72:	24 f4       	brge	.+8      	; 0x1b7c <main+0x1664>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1b74:	2c 7f       	andi	r18, 0xFC	; 252
    1b76:	20 93 58 03 	sts	0x0358, r18
    1b7a:	03 c0       	rjmp	.+6      	; 0x1b82 <main+0x166a>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1b7c:	32 60       	ori	r19, 0x02	; 2
    1b7e:	30 93 58 03 	sts	0x0358, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
    1b82:	80 91 56 03 	lds	r24, 0x0356
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    1b86:	86 60       	ori	r24, 0x06	; 6
    1b88:	80 93 56 03 	sts	0x0356, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1b8c:	80 91 58 03 	lds	r24, 0x0358
    1b90:	8b 7f       	andi	r24, 0xFB	; 251
    1b92:	80 93 58 03 	sts	0x0358, r24
    1b96:	41 e0       	ldi	r20, 0x01	; 1
    1b98:	50 e0       	ldi	r21, 0x00	; 0
    1b9a:	5e a3       	std	Y+38, r21	; 0x26
    1b9c:	4d a3       	std	Y+37, r20	; 0x25
    1b9e:	0c c1       	rjmp	.+536    	; 0x1db8 <main+0x18a0>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1ba0:	80 91 58 03 	lds	r24, 0x0358
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1ba4:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1ba6:	86 61       	ori	r24, 0x16	; 22
    1ba8:	80 93 58 03 	sts	0x0358, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    1bac:	80 91 56 03 	lds	r24, 0x0356
    1bb0:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    1bb2:	8b 7f       	andi	r24, 0xFB	; 251
    1bb4:	80 93 56 03 	sts	0x0356, r24
    1bb8:	f8 c0       	rjmp	.+496    	; 0x1daa <main+0x1892>
					break;
				case FIXL:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
    1bba:	80 91 56 03 	lds	r24, 0x0356
    1bbe:	80 61       	ori	r24, 0x10	; 16
    1bc0:	80 93 56 03 	sts	0x0356, r24
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9e 8f       	std	Y+30, r25	; 0x1e
    1bca:	8d 8f       	std	Y+29, r24	; 0x1d
    1bcc:	f5 c0       	rjmp	.+490    	; 0x1db8 <main+0x18a0>
					fixtureMotor = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1bce:	80 91 56 03 	lds	r24, 0x0356
    1bd2:	8f 7d       	andi	r24, 0xDF	; 223
    1bd4:	80 93 56 03 	sts	0x0356, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1bd8:	80 91 58 03 	lds	r24, 0x0358
    1bdc:	88 60       	ori	r24, 0x08	; 8
    1bde:	80 93 58 03 	sts	0x0358, r24
    1be2:	65 c0       	rjmp	.+202    	; 0x1cae <main+0x1796>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1be4:	80 91 58 03 	lds	r24, 0x0358
    1be8:	8f 7e       	andi	r24, 0xEF	; 239
    1bea:	80 93 58 03 	sts	0x0358, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    1bee:	80 91 56 03 	lds	r24, 0x0356
    1bf2:	80 62       	ori	r24, 0x20	; 32
    1bf4:	80 93 56 03 	sts	0x0356, r24
    1bf8:	df c0       	rjmp	.+446    	; 0x1db8 <main+0x18a0>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1bfa:	80 91 56 03 	lds	r24, 0x0356
    1bfe:	80 61       	ori	r24, 0x10	; 16
    1c00:	5c c0       	rjmp	.+184    	; 0x1cba <main+0x17a2>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
    1c02:	80 91 57 03 	lds	r24, 0x0357
    1c06:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1c08:	8b 7f       	andi	r24, 0xFB	; 251
    1c0a:	80 93 57 03 	sts	0x0357, r24
    1c0e:	4f c0       	rjmp	.+158    	; 0x1cae <main+0x1796>
						print15 = 0;
					}*/
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1c10:	80 91 59 03 	lds	r24, 0x0359
    1c14:	81 60       	ori	r24, 0x01	; 1
    1c16:	80 93 59 03 	sts	0x0359, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1c1a:	80 91 58 03 	lds	r24, 0x0358
    1c1e:	8f 77       	andi	r24, 0x7F	; 127
    1c20:	80 93 58 03 	sts	0x0358, r24
    1c24:	21 e0       	ldi	r18, 0x01	; 1
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	3e a7       	std	Y+46, r19	; 0x2e
    1c2a:	2d a7       	std	Y+45, r18	; 0x2d
    1c2c:	c5 c0       	rjmp	.+394    	; 0x1db8 <main+0x18a0>
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1c2e:	80 91 59 03 	lds	r24, 0x0359
    1c32:	8e 7f       	andi	r24, 0xFE	; 254
    1c34:	80 93 59 03 	sts	0x0359, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1c38:	80 91 58 03 	lds	r24, 0x0358
    1c3c:	80 68       	ori	r24, 0x80	; 128
    1c3e:	80 93 58 03 	sts	0x0358, r24
    1c42:	2d c0       	rjmp	.+90     	; 0x1c9e <main+0x1786>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1c44:	80 91 56 03 	lds	r24, 0x0356
    1c48:	8f 7e       	andi	r24, 0xEF	; 239
    1c4a:	80 93 56 03 	sts	0x0356, r24
    1c4e:	41 e0       	ldi	r20, 0x01	; 1
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	5e 8f       	std	Y+30, r21	; 0x1e
    1c54:	4d 8f       	std	Y+29, r20	; 0x1d
    1c56:	b0 c0       	rjmp	.+352    	; 0x1db8 <main+0x18a0>
					fixtureMotor = 1;
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1c58:	80 91 57 03 	lds	r24, 0x0357
    1c5c:	8b 7f       	andi	r24, 0xFB	; 251
    1c5e:	80 93 57 03 	sts	0x0357, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1c62:	80 91 59 03 	lds	r24, 0x0359
    1c66:	81 60       	ori	r24, 0x01	; 1
    1c68:	80 93 59 03 	sts	0x0359, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1c6c:	80 91 58 03 	lds	r24, 0x0358
    1c70:	8f 77       	andi	r24, 0x7F	; 127
    1c72:	80 93 58 03 	sts	0x0358, r24
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	9e a7       	std	Y+46, r25	; 0x2e
    1c7c:	8d a7       	std	Y+45, r24	; 0x2d
    1c7e:	17 c0       	rjmp	.+46     	; 0x1cae <main+0x1796>
					fixtureMotor = 1;
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1c80:	80 91 59 03 	lds	r24, 0x0359
    1c84:	8e 7f       	andi	r24, 0xFE	; 254
    1c86:	80 93 59 03 	sts	0x0359, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1c8a:	80 91 58 03 	lds	r24, 0x0358
    1c8e:	80 68       	ori	r24, 0x80	; 128
    1c90:	80 93 58 03 	sts	0x0358, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
    1c94:	80 91 57 03 	lds	r24, 0x0357
    1c98:	87 7f       	andi	r24, 0xF7	; 247
    1c9a:	80 93 57 03 	sts	0x0357, r24
    1c9e:	1e a6       	std	Y+46, r1	; 0x2e
    1ca0:	1d a6       	std	Y+45, r1	; 0x2d
    1ca2:	05 c0       	rjmp	.+10     	; 0x1cae <main+0x1796>
					fixtureMotor = 1;
					//u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1ca4:	80 91 59 03 	lds	r24, 0x0359
    1ca8:	87 7f       	andi	r24, 0xF7	; 247
    1caa:	80 93 59 03 	sts	0x0359, r24
    1cae:	1e 8e       	std	Y+30, r1	; 0x1e
    1cb0:	1d 8e       	std	Y+29, r1	; 0x1d
    1cb2:	82 c0       	rjmp	.+260    	; 0x1db8 <main+0x18a0>
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1cb4:	80 91 56 03 	lds	r24, 0x0356
    1cb8:	8f 7e       	andi	r24, 0xEF	; 239
    1cba:	80 93 56 03 	sts	0x0356, r24
    1cbe:	a1 e0       	ldi	r26, 0x01	; 1
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	be 8f       	std	Y+30, r27	; 0x1e
    1cc4:	ad 8f       	std	Y+29, r26	; 0x1d
    1cc6:	78 c0       	rjmp	.+240    	; 0x1db8 <main+0x18a0>
					fixtureMotor = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1cc8:	80 91 59 03 	lds	r24, 0x0359
    1ccc:	88 60       	ori	r24, 0x08	; 8
    1cce:	10 c0       	rjmp	.+32     	; 0x1cf0 <main+0x17d8>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
    1cd0:	80 91 57 03 	lds	r24, 0x0357
    1cd4:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1cd6:	8f 7d       	andi	r24, 0xDF	; 223
    1cd8:	80 93 57 03 	sts	0x0357, r24
    1cdc:	1e 8e       	std	Y+30, r1	; 0x1e
    1cde:	1d 8e       	std	Y+29, r1	; 0x1d
    1ce0:	21 e0       	ldi	r18, 0x01	; 1
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	3e 8b       	std	Y+22, r19	; 0x16
    1ce6:	2d 8b       	std	Y+21, r18	; 0x15
    1ce8:	67 c0       	rjmp	.+206    	; 0x1db8 <main+0x18a0>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1cea:	80 91 59 03 	lds	r24, 0x0359
    1cee:	8d 7f       	andi	r24, 0xFD	; 253
    1cf0:	80 93 59 03 	sts	0x0359, r24
    1cf4:	61 c0       	rjmp	.+194    	; 0x1db8 <main+0x18a0>
				case DRY2:
					fixtureMotor = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    1cf6:	80 91 57 03 	lds	r24, 0x0357
    1cfa:	8f 7b       	andi	r24, 0xBF	; 191
    1cfc:	80 93 57 03 	sts	0x0357, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1d00:	80 91 59 03 	lds	r24, 0x0359
    1d04:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1d06:	8b 7f       	andi	r24, 0xFB	; 251
    1d08:	80 93 59 03 	sts	0x0359, r24
    1d0c:	1e 8a       	std	Y+22, r1	; 0x16
    1d0e:	1d 8a       	std	Y+21, r1	; 0x15
    1d10:	53 c0       	rjmp	.+166    	; 0x1db8 <main+0x18a0>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1d12:	80 91 58 03 	lds	r24, 0x0358
    1d16:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1d18:	80 61       	ori	r24, 0x10	; 16
    1d1a:	80 93 58 03 	sts	0x0358, r24
    1d1e:	1e 8e       	std	Y+30, r1	; 0x1e
    1d20:	1d 8e       	std	Y+29, r1	; 0x1d
    1d22:	0f e1       	ldi	r16, 0x1F	; 31
    1d24:	60 2e       	mov	r6, r16
    1d26:	71 2c       	mov	r7, r1
    1d28:	47 c0       	rjmp	.+142    	; 0x1db8 <main+0x18a0>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1d2a:	80 91 56 03 	lds	r24, 0x0356
    1d2e:	8f 7e       	andi	r24, 0xEF	; 239
    1d30:	80 93 56 03 	sts	0x0356, r24
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	5e 8f       	std	Y+30, r21	; 0x1e
    1d3a:	4d 8f       	std	Y+29, r20	; 0x1d
    1d3c:	10 e2       	ldi	r17, 0x20	; 32
    1d3e:	61 2e       	mov	r6, r17
    1d40:	71 2c       	mov	r7, r1
    1d42:	3a c0       	rjmp	.+116    	; 0x1db8 <main+0x18a0>
					fixtureMotor = 1;
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1d44:	80 91 56 03 	lds	r24, 0x0356
    1d48:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    1d4a:	84 60       	ori	r24, 0x04	; 4
    1d4c:	80 93 56 03 	sts	0x0356, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1d50:	80 91 58 03 	lds	r24, 0x0358
    1d54:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1d56:	8f 7e       	andi	r24, 0xEF	; 239
    1d58:	80 93 58 03 	sts	0x0358, r24
    1d5c:	1e 8e       	std	Y+30, r1	; 0x1e
    1d5e:	1d 8e       	std	Y+29, r1	; 0x1d
    1d60:	b1 e2       	ldi	r27, 0x21	; 33
    1d62:	6b 2e       	mov	r6, r27
    1d64:	71 2c       	mov	r7, r1
    1d66:	28 c0       	rjmp	.+80     	; 0x1db8 <main+0x18a0>
					break;
    1d68:	a2 e2       	ldi	r26, 0x22	; 34
    1d6a:	6a 2e       	mov	r6, r26
    1d6c:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1d6e:	80 91 56 03 	lds	r24, 0x0356
    1d72:	8d 7f       	andi	r24, 0xFD	; 253
    1d74:	80 93 56 03 	sts	0x0356, r24
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9e a3       	std	Y+38, r25	; 0x26
    1d7e:	8d a3       	std	Y+37, r24	; 0x25
    1d80:	1b c0       	rjmp	.+54     	; 0x1db8 <main+0x18a0>
					plateLoadMotor = 1;
					break;
    1d82:	f3 e2       	ldi	r31, 0x23	; 35
    1d84:	6f 2e       	mov	r6, r31
    1d86:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    1d88:	80 91 56 03 	lds	r24, 0x0356
    1d8c:	8b 7f       	andi	r24, 0xFB	; 251
    1d8e:	80 93 56 03 	sts	0x0356, r24
					if(print35 == 1){
    1d92:	a9 ad       	ldd	r26, Y+57	; 0x39
    1d94:	ba ad       	ldd	r27, Y+58	; 0x3a
    1d96:	11 97       	sbiw	r26, 0x01	; 1
    1d98:	41 f4       	brne	.+16     	; 0x1daa <main+0x1892>
						OrangutanLCD::clear();
    1d9a:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1d9e:	86 e2       	ldi	r24, 0x26	; 38
    1da0:	93 e0       	ldi	r25, 0x03	; 3
    1da2:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    1da6:	1a ae       	std	Y+58, r1	; 0x3a
    1da8:	19 ae       	std	Y+57, r1	; 0x39
    1daa:	1e a2       	std	Y+38, r1	; 0x26
    1dac:	1d a2       	std	Y+37, r1	; 0x25
    1dae:	04 c0       	rjmp	.+8      	; 0x1db8 <main+0x18a0>
    1db0:	21 e0       	ldi	r18, 0x01	; 1
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	3e 8f       	std	Y+30, r19	; 0x1e
    1db6:	2d 8f       	std	Y+29, r18	; 0x1d
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    1db8:	4d b7       	in	r20, 0x3d	; 61
    1dba:	5e b7       	in	r21, 0x3e	; 62
    1dbc:	42 51       	subi	r20, 0x12	; 18
    1dbe:	50 40       	sbci	r21, 0x00	; 0
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	5e bf       	out	0x3e, r21	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	4d bf       	out	0x3d, r20	; 61
    1dca:	ed b7       	in	r30, 0x3d	; 61
    1dcc:	fe b7       	in	r31, 0x3e	; 62
    1dce:	31 96       	adiw	r30, 0x01	; 1
    1dd0:	82 e0       	ldi	r24, 0x02	; 2
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	ad b7       	in	r26, 0x3d	; 61
    1dd6:	be b7       	in	r27, 0x3e	; 62
    1dd8:	12 96       	adiw	r26, 0x02	; 2
    1dda:	9c 93       	st	X, r25
    1ddc:	8e 93       	st	-X, r24
    1dde:	11 97       	sbiw	r26, 0x01	; 1
    1de0:	93 83       	std	Z+3, r25	; 0x03
    1de2:	82 83       	std	Z+2, r24	; 0x02
    1de4:	95 83       	std	Z+5, r25	; 0x05
    1de6:	84 83       	std	Z+4, r24	; 0x04
    1de8:	97 83       	std	Z+7, r25	; 0x07
    1dea:	86 83       	std	Z+6, r24	; 0x06
    1dec:	21 e0       	ldi	r18, 0x01	; 1
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	31 87       	std	Z+9, r19	; 0x09
    1df2:	20 87       	std	Z+8, r18	; 0x08
    1df4:	33 87       	std	Z+11, r19	; 0x0b
    1df6:	22 87       	std	Z+10, r18	; 0x0a
    1df8:	35 87       	std	Z+13, r19	; 0x0d
    1dfa:	24 87       	std	Z+12, r18	; 0x0c
    1dfc:	37 87       	std	Z+15, r19	; 0x0f
    1dfe:	26 87       	std	Z+14, r18	; 0x0e
    1e00:	31 8b       	std	Z+17, r19	; 0x11
    1e02:	20 8b       	std	Z+16, r18	; 0x10
    1e04:	c2 01       	movw	r24, r4
    1e06:	b1 01       	movw	r22, r2
    1e08:	4b 81       	ldd	r20, Y+3	; 0x03
    1e0a:	5c 81       	ldd	r21, Y+4	; 0x04
    1e0c:	2d a1       	ldd	r18, Y+37	; 0x25
    1e0e:	3e a1       	ldd	r19, Y+38	; 0x26
    1e10:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1e12:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1e14:	ee 24       	eor	r14, r14
    1e16:	ff 24       	eor	r15, r15
    1e18:	cd a4       	ldd	r12, Y+45	; 0x2d
    1e1a:	de a4       	ldd	r13, Y+46	; 0x2e
    1e1c:	ad 88       	ldd	r10, Y+21	; 0x15
    1e1e:	be 88       	ldd	r11, Y+22	; 0x16
    1e20:	e2 e0       	ldi	r30, 0x02	; 2
    1e22:	8e 2e       	mov	r8, r30
    1e24:	91 2c       	mov	r9, r1
    1e26:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    1e2a:	4d b7       	in	r20, 0x3d	; 61
    1e2c:	5e b7       	in	r21, 0x3e	; 62
    1e2e:	4e 5e       	subi	r20, 0xEE	; 238
    1e30:	5f 4f       	sbci	r21, 0xFF	; 255
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	5e bf       	out	0x3e, r21	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	4d bf       	out	0x3d, r20	; 61
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("SECOND B");
			while(state != DONER)
    1e44:	54 e2       	ldi	r21, 0x24	; 36
    1e46:	65 16       	cp	r6, r21
    1e48:	71 04       	cpc	r7, r1
    1e4a:	11 f4       	brne	.+4      	; 0x1e50 <main+0x1938>
    1e4c:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <main+0x2a6c>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    1e50:	08 94       	sec
    1e52:	41 1c       	adc	r4, r1
    1e54:	51 1c       	adc	r5, r1
    1e56:	7d cc       	rjmp	.-1798   	; 0x1752 <main+0x123a>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    1e58:	82 e0       	ldi	r24, 0x02	; 2
    1e5a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
    1e5e:	88 23       	and	r24, r24
    1e60:	11 f4       	brne	.+4      	; 0x1e66 <main+0x194e>
    1e62:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <main+0x2ada>
			OrangutanLCD::gotoXY(7,0);
    1e66:	87 e0       	ldi	r24, 0x07	; 7
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("BOTH B");
    1e6e:	8c e3       	ldi	r24, 0x3C	; 60
    1e70:	93 e0       	ldi	r25, 0x03	; 3
    1e72:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    1e76:	66 24       	eor	r6, r6
    1e78:	77 24       	eor	r7, r7
    1e7a:	23 96       	adiw	r28, 0x03	; 3
    1e7c:	1f ae       	std	Y+63, r1	; 0x3f
    1e7e:	1e ae       	std	Y+62, r1	; 0x3e
    1e80:	23 97       	sbiw	r28, 0x03	; 3
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	98 af       	std	Y+56, r25	; 0x38
    1e88:	8f ab       	std	Y+55, r24	; 0x37
    1e8a:	9a ab       	std	Y+50, r25	; 0x32
    1e8c:	89 ab       	std	Y+49, r24	; 0x31
    1e8e:	1c a6       	std	Y+44, r1	; 0x2c
    1e90:	1b a6       	std	Y+43, r1	; 0x2b
    1e92:	1c a2       	std	Y+36, r1	; 0x24
    1e94:	1b a2       	std	Y+35, r1	; 0x23
    1e96:	1c 8e       	std	Y+28, r1	; 0x1c
    1e98:	1b 8e       	std	Y+27, r1	; 0x1b
    1e9a:	1c 8a       	std	Y+20, r1	; 0x14
    1e9c:	1b 8a       	std	Y+19, r1	; 0x13
    1e9e:	1c 86       	std	Y+12, r1	; 0x0c
    1ea0:	1b 86       	std	Y+11, r1	; 0x0b
    1ea2:	44 24       	eor	r4, r4
    1ea4:	55 24       	eor	r5, r5
    1ea6:	22 24       	eor	r2, r2
    1ea8:	33 24       	eor	r3, r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1eaa:	84 e4       	ldi	r24, 0x44	; 68
    1eac:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1eb6:	85 e4       	ldi	r24, 0x45	; 69
    1eb8:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1ebc:	0e 94 85 18 	call	0x310a	; 0x310a <_Z11i2c_readAckv>
    1ec0:	80 93 5a 03 	sts	0x035A, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1ec4:	0e 94 8f 18 	call	0x311e	; 0x311e <_Z11i2c_readNakv>
    1ec8:	80 93 5b 03 	sts	0x035B, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1ecc:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <_Z8i2c_stopv>
				
				if(state != INIT){
    1ed0:	61 14       	cp	r6, r1
    1ed2:	71 04       	cpc	r7, r1
    1ed4:	79 f0       	breq	.+30     	; 0x1ef4 <main+0x19dc>
					OrangutanLCD::gotoXY(0,1);
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1ede:	81 e1       	ldi	r24, 0x11	; 17
    1ee0:	93 e0       	ldi	r25, 0x03	; 3
    1ee2:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    1ee6:	b3 01       	movw	r22, r6
    1ee8:	88 27       	eor	r24, r24
    1eea:	77 fd       	sbrc	r23, 7
    1eec:	80 95       	com	r24
    1eee:	98 2f       	mov	r25, r24
    1ef0:	0e 94 41 1b 	call	0x3682	; 0x3682 <_ZN12OrangutanLCD5printEl>
						button = 0;
						stateButton = 0;
					}
				}*/

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1ef4:	c2 01       	movw	r24, r4
    1ef6:	be 01       	movw	r22, r28
    1ef8:	6f 5f       	subi	r22, 0xFF	; 255
    1efa:	7f 4f       	sbci	r23, 0xFF	; 255
    1efc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    1f00:	61 14       	cp	r6, r1
    1f02:	71 04       	cpc	r7, r1
    1f04:	29 f4       	brne	.+10     	; 0x1f10 <main+0x19f8>
    1f06:	88 23       	and	r24, r24
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <main+0x19f4>
    1f0a:	40 c0       	rjmp	.+128    	; 0x1f8c <main+0x1a74>
    1f0c:	12 01       	movw	r2, r4
    1f0e:	04 c0       	rjmp	.+8      	; 0x1f18 <main+0x1a00>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && /*counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate&&*/ u_inputByte0.bits_in_inputByte0.plate == 0){
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	69 16       	cp	r6, r25
    1f14:	71 04       	cpc	r7, r1
    1f16:	31 f4       	brne	.+12     	; 0x1f24 <main+0x1a0c>
    1f18:	80 91 5a 03 	lds	r24, 0x035A
    1f1c:	80 fd       	sbrc	r24, 0
    1f1e:	43 c0       	rjmp	.+134    	; 0x1fa6 <main+0x1a8e>
    1f20:	12 01       	movw	r2, r4
    1f22:	04 c0       	rjmp	.+8      	; 0x1f2c <main+0x1a14>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    1f24:	a2 e0       	ldi	r26, 0x02	; 2
    1f26:	6a 16       	cp	r6, r26
    1f28:	71 04       	cpc	r7, r1
    1f2a:	49 f4       	brne	.+18     	; 0x1f3e <main+0x1a26>
    1f2c:	c2 01       	movw	r24, r4
    1f2e:	82 19       	sub	r24, r2
    1f30:	93 09       	sbc	r25, r3
    1f32:	85 36       	cpi	r24, 0x65	; 101
    1f34:	91 05       	cpc	r25, r1
    1f36:	0c f4       	brge	.+2      	; 0x1f3a <main+0x1a22>
    1f38:	46 c0       	rjmp	.+140    	; 0x1fc6 <main+0x1aae>
    1f3a:	12 01       	movw	r2, r4
    1f3c:	04 c0       	rjmp	.+8      	; 0x1f46 <main+0x1a2e>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1f3e:	b3 e0       	ldi	r27, 0x03	; 3
    1f40:	6b 16       	cp	r6, r27
    1f42:	71 04       	cpc	r7, r1
    1f44:	49 f4       	brne	.+18     	; 0x1f58 <main+0x1a40>
    1f46:	c2 01       	movw	r24, r4
    1f48:	82 19       	sub	r24, r2
    1f4a:	93 09       	sbc	r25, r3
    1f4c:	81 5a       	subi	r24, 0xA1	; 161
    1f4e:	9f 40       	sbci	r25, 0x0F	; 15
    1f50:	0c f4       	brge	.+2      	; 0x1f54 <main+0x1a3c>
    1f52:	49 c0       	rjmp	.+146    	; 0x1fe6 <main+0x1ace>
    1f54:	12 01       	movw	r2, r4
    1f56:	04 c0       	rjmp	.+8      	; 0x1f60 <main+0x1a48>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1f58:	34 e0       	ldi	r19, 0x04	; 4
    1f5a:	63 16       	cp	r6, r19
    1f5c:	71 04       	cpc	r7, r1
    1f5e:	49 f4       	brne	.+18     	; 0x1f72 <main+0x1a5a>
    1f60:	c2 01       	movw	r24, r4
    1f62:	82 19       	sub	r24, r2
    1f64:	93 09       	sbc	r25, r3
    1f66:	89 5e       	subi	r24, 0xE9	; 233
    1f68:	93 40       	sbci	r25, 0x03	; 3
    1f6a:	0c f4       	brge	.+2      	; 0x1f6e <main+0x1a56>
    1f6c:	4c c0       	rjmp	.+152    	; 0x2006 <main+0x1aee>
    1f6e:	12 01       	movw	r2, r4
    1f70:	04 c0       	rjmp	.+8      	; 0x1f7a <main+0x1a62>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    1f72:	55 e0       	ldi	r21, 0x05	; 5
    1f74:	65 16       	cp	r6, r21
    1f76:	71 04       	cpc	r7, r1
    1f78:	49 f4       	brne	.+18     	; 0x1f8c <main+0x1a74>
    1f7a:	c2 01       	movw	r24, r4
    1f7c:	82 19       	sub	r24, r2
    1f7e:	93 09       	sbc	r25, r3
    1f80:	85 36       	cpi	r24, 0x65	; 101
    1f82:	91 05       	cpc	r25, r1
    1f84:	0c f4       	brge	.+2      	; 0x1f88 <main+0x1a70>
    1f86:	4d c0       	rjmp	.+154    	; 0x2022 <main+0x1b0a>
    1f88:	12 01       	movw	r2, r4
    1f8a:	04 c0       	rjmp	.+8      	; 0x1f94 <main+0x1a7c>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1f8c:	86 e0       	ldi	r24, 0x06	; 6
    1f8e:	68 16       	cp	r6, r24
    1f90:	71 04       	cpc	r7, r1
    1f92:	61 f4       	brne	.+24     	; 0x1fac <main+0x1a94>
    1f94:	c2 01       	movw	r24, r4
    1f96:	82 19       	sub	r24, r2
    1f98:	93 09       	sbc	r25, r3
    1f9a:	81 5a       	subi	r24, 0xA1	; 161
    1f9c:	9f 40       	sbci	r25, 0x0F	; 15
    1f9e:	0c f4       	brge	.+2      	; 0x1fa2 <main+0x1a8a>
    1fa0:	50 c0       	rjmp	.+160    	; 0x2042 <main+0x1b2a>
    1fa2:	12 01       	movw	r2, r4
    1fa4:	07 c0       	rjmp	.+14     	; 0x1fb4 <main+0x1a9c>
    1fa6:	21 e0       	ldi	r18, 0x01	; 1
    1fa8:	62 2e       	mov	r6, r18
    1faa:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    1fac:	b7 e0       	ldi	r27, 0x07	; 7
    1fae:	6b 16       	cp	r6, r27
    1fb0:	71 04       	cpc	r7, r1
    1fb2:	61 f4       	brne	.+24     	; 0x1fcc <main+0x1ab4>
    1fb4:	c2 01       	movw	r24, r4
    1fb6:	82 19       	sub	r24, r2
    1fb8:	93 09       	sbc	r25, r3
    1fba:	85 36       	cpi	r24, 0x65	; 101
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	0c f4       	brge	.+2      	; 0x1fc2 <main+0x1aaa>
    1fc0:	50 c0       	rjmp	.+160    	; 0x2062 <main+0x1b4a>
    1fc2:	12 01       	movw	r2, r4
    1fc4:	07 c0       	rjmp	.+14     	; 0x1fd4 <main+0x1abc>
    1fc6:	92 e0       	ldi	r25, 0x02	; 2
    1fc8:	69 2e       	mov	r6, r25
    1fca:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    1fcc:	28 e0       	ldi	r18, 0x08	; 8
    1fce:	62 16       	cp	r6, r18
    1fd0:	71 04       	cpc	r7, r1
    1fd2:	61 f4       	brne	.+24     	; 0x1fec <main+0x1ad4>
    1fd4:	c2 01       	movw	r24, r4
    1fd6:	82 19       	sub	r24, r2
    1fd8:	93 09       	sbc	r25, r3
    1fda:	85 36       	cpi	r24, 0x65	; 101
    1fdc:	91 05       	cpc	r25, r1
    1fde:	0c f4       	brge	.+2      	; 0x1fe2 <main+0x1aca>
    1fe0:	4e c0       	rjmp	.+156    	; 0x207e <main+0x1b66>
    1fe2:	12 01       	movw	r2, r4
    1fe4:	07 c0       	rjmp	.+14     	; 0x1ff4 <main+0x1adc>
    1fe6:	83 e0       	ldi	r24, 0x03	; 3
    1fe8:	68 2e       	mov	r6, r24
    1fea:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    1fec:	39 e0       	ldi	r19, 0x09	; 9
    1fee:	63 16       	cp	r6, r19
    1ff0:	71 04       	cpc	r7, r1
    1ff2:	61 f4       	brne	.+24     	; 0x200c <main+0x1af4>
    1ff4:	c2 01       	movw	r24, r4
    1ff6:	82 19       	sub	r24, r2
    1ff8:	93 09       	sbc	r25, r3
    1ffa:	81 5d       	subi	r24, 0xD1	; 209
    1ffc:	97 40       	sbci	r25, 0x07	; 7
    1ffe:	0c f4       	brge	.+2      	; 0x2002 <main+0x1aea>
    2000:	4e c0       	rjmp	.+156    	; 0x209e <main+0x1b86>
    2002:	12 01       	movw	r2, r4
    2004:	07 c0       	rjmp	.+14     	; 0x2014 <main+0x1afc>
    2006:	04 e0       	ldi	r16, 0x04	; 4
    2008:	60 2e       	mov	r6, r16
    200a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    200c:	5a e0       	ldi	r21, 0x0A	; 10
    200e:	65 16       	cp	r6, r21
    2010:	71 04       	cpc	r7, r1
    2012:	51 f4       	brne	.+20     	; 0x2028 <main+0x1b10>
    2014:	c2 01       	movw	r24, r4
    2016:	82 19       	sub	r24, r2
    2018:	93 09       	sbc	r25, r3
    201a:	85 36       	cpi	r24, 0x65	; 101
    201c:	91 05       	cpc	r25, r1
    201e:	44 f4       	brge	.+16     	; 0x2030 <main+0x1b18>
    2020:	4e c0       	rjmp	.+156    	; 0x20be <main+0x1ba6>
    2022:	15 e0       	ldi	r17, 0x05	; 5
    2024:	61 2e       	mov	r6, r17
    2026:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    2028:	8b e0       	ldi	r24, 0x0B	; 11
    202a:	68 16       	cp	r6, r24
    202c:	71 04       	cpc	r7, r1
    202e:	61 f4       	brne	.+24     	; 0x2048 <main+0x1b30>
    2030:	c2 01       	movw	r24, r4
    2032:	82 19       	sub	r24, r2
    2034:	93 09       	sbc	r25, r3
    2036:	81 5d       	subi	r24, 0xD1	; 209
    2038:	97 40       	sbci	r25, 0x07	; 7
    203a:	0c f4       	brge	.+2      	; 0x203e <main+0x1b26>
    203c:	50 c0       	rjmp	.+160    	; 0x20de <main+0x1bc6>
    203e:	12 01       	movw	r2, r4
    2040:	07 c0       	rjmp	.+14     	; 0x2050 <main+0x1b38>
    2042:	b6 e0       	ldi	r27, 0x06	; 6
    2044:	6b 2e       	mov	r6, r27
    2046:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    2048:	bc e0       	ldi	r27, 0x0C	; 12
    204a:	6b 16       	cp	r6, r27
    204c:	71 04       	cpc	r7, r1
    204e:	61 f4       	brne	.+24     	; 0x2068 <main+0x1b50>
    2050:	c2 01       	movw	r24, r4
    2052:	82 19       	sub	r24, r2
    2054:	93 09       	sbc	r25, r3
    2056:	85 36       	cpi	r24, 0x65	; 101
    2058:	91 05       	cpc	r25, r1
    205a:	0c f4       	brge	.+2      	; 0x205e <main+0x1b46>
    205c:	50 c0       	rjmp	.+160    	; 0x20fe <main+0x1be6>
    205e:	12 01       	movw	r2, r4
    2060:	07 c0       	rjmp	.+14     	; 0x2070 <main+0x1b58>
    2062:	a7 e0       	ldi	r26, 0x07	; 7
    2064:	6a 2e       	mov	r6, r26
    2066:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2068:	2d e0       	ldi	r18, 0x0D	; 13
    206a:	62 16       	cp	r6, r18
    206c:	71 04       	cpc	r7, r1
    206e:	51 f4       	brne	.+20     	; 0x2084 <main+0x1b6c>
    2070:	c2 01       	movw	r24, r4
    2072:	82 19       	sub	r24, r2
    2074:	93 09       	sbc	r25, r3
    2076:	81 5d       	subi	r24, 0xD1	; 209
    2078:	97 40       	sbci	r25, 0x07	; 7
    207a:	44 f4       	brge	.+16     	; 0x208c <main+0x1b74>
    207c:	50 c0       	rjmp	.+160    	; 0x211e <main+0x1c06>
    207e:	f8 e0       	ldi	r31, 0x08	; 8
    2080:	6f 2e       	mov	r6, r31
    2082:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
				}
				if(state == B1STOP2 && counter - counterRef > totalStepLength2*fixtureMotorBrush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    2084:	4e e0       	ldi	r20, 0x0E	; 14
    2086:	64 16       	cp	r6, r20
    2088:	71 04       	cpc	r7, r1
    208a:	61 f4       	brne	.+24     	; 0x20a4 <main+0x1b8c>
    208c:	c2 01       	movw	r24, r4
    208e:	82 19       	sub	r24, r2
    2090:	93 09       	sbc	r25, r3
    2092:	81 5a       	subi	r24, 0xA1	; 161
    2094:	9f 40       	sbci	r25, 0x0F	; 15
    2096:	0c f4       	brge	.+2      	; 0x209a <main+0x1b82>
    2098:	52 c0       	rjmp	.+164    	; 0x213e <main+0x1c26>
    209a:	12 01       	movw	r2, r4
    209c:	07 c0       	rjmp	.+14     	; 0x20ac <main+0x1b94>
    209e:	e9 e0       	ldi	r30, 0x09	; 9
    20a0:	6e 2e       	mov	r6, r30
    20a2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    20a4:	8f e0       	ldi	r24, 0x0F	; 15
    20a6:	68 16       	cp	r6, r24
    20a8:	71 04       	cpc	r7, r1
    20aa:	61 f4       	brne	.+24     	; 0x20c4 <main+0x1bac>
    20ac:	c2 01       	movw	r24, r4
    20ae:	82 19       	sub	r24, r2
    20b0:	93 09       	sbc	r25, r3
    20b2:	85 36       	cpi	r24, 0x65	; 101
    20b4:	91 05       	cpc	r25, r1
    20b6:	0c f4       	brge	.+2      	; 0x20ba <main+0x1ba2>
    20b8:	52 c0       	rjmp	.+164    	; 0x215e <main+0x1c46>
    20ba:	12 01       	movw	r2, r4
    20bc:	07 c0       	rjmp	.+14     	; 0x20cc <main+0x1bb4>
    20be:	7a e0       	ldi	r23, 0x0A	; 10
    20c0:	67 2e       	mov	r6, r23
    20c2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    20c4:	90 e1       	ldi	r25, 0x10	; 16
    20c6:	69 16       	cp	r6, r25
    20c8:	71 04       	cpc	r7, r1
    20ca:	61 f4       	brne	.+24     	; 0x20e4 <main+0x1bcc>
    20cc:	c2 01       	movw	r24, r4
    20ce:	82 19       	sub	r24, r2
    20d0:	93 09       	sbc	r25, r3
    20d2:	85 36       	cpi	r24, 0x65	; 101
    20d4:	91 05       	cpc	r25, r1
    20d6:	0c f4       	brge	.+2      	; 0x20da <main+0x1bc2>
    20d8:	52 c0       	rjmp	.+164    	; 0x217e <main+0x1c66>
    20da:	12 01       	movw	r2, r4
    20dc:	07 c0       	rjmp	.+14     	; 0x20ec <main+0x1bd4>
    20de:	6b e0       	ldi	r22, 0x0B	; 11
    20e0:	66 2e       	mov	r6, r22
    20e2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    20e4:	a1 e1       	ldi	r26, 0x11	; 17
    20e6:	6a 16       	cp	r6, r26
    20e8:	71 04       	cpc	r7, r1
    20ea:	61 f4       	brne	.+24     	; 0x2104 <main+0x1bec>
    20ec:	c2 01       	movw	r24, r4
    20ee:	82 19       	sub	r24, r2
    20f0:	93 09       	sbc	r25, r3
    20f2:	81 5d       	subi	r24, 0xD1	; 209
    20f4:	97 40       	sbci	r25, 0x07	; 7
    20f6:	0c f4       	brge	.+2      	; 0x20fa <main+0x1be2>
    20f8:	52 c0       	rjmp	.+164    	; 0x219e <main+0x1c86>
    20fa:	12 01       	movw	r2, r4
    20fc:	07 c0       	rjmp	.+14     	; 0x210c <main+0x1bf4>
    20fe:	5c e0       	ldi	r21, 0x0C	; 12
    2100:	65 2e       	mov	r6, r21
    2102:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    2104:	22 e1       	ldi	r18, 0x12	; 18
    2106:	62 16       	cp	r6, r18
    2108:	71 04       	cpc	r7, r1
    210a:	61 f4       	brne	.+24     	; 0x2124 <main+0x1c0c>
    210c:	c2 01       	movw	r24, r4
    210e:	82 19       	sub	r24, r2
    2110:	93 09       	sbc	r25, r3
    2112:	85 36       	cpi	r24, 0x65	; 101
    2114:	91 05       	cpc	r25, r1
    2116:	0c f4       	brge	.+2      	; 0x211a <main+0x1c02>
    2118:	52 c0       	rjmp	.+164    	; 0x21be <main+0x1ca6>
    211a:	12 01       	movw	r2, r4
    211c:	07 c0       	rjmp	.+14     	; 0x212c <main+0x1c14>
    211e:	4d e0       	ldi	r20, 0x0D	; 13
    2120:	64 2e       	mov	r6, r20
    2122:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    2124:	33 e1       	ldi	r19, 0x13	; 19
    2126:	63 16       	cp	r6, r19
    2128:	71 04       	cpc	r7, r1
    212a:	61 f4       	brne	.+24     	; 0x2144 <main+0x1c2c>
    212c:	c2 01       	movw	r24, r4
    212e:	82 19       	sub	r24, r2
    2130:	93 09       	sbc	r25, r3
    2132:	81 5d       	subi	r24, 0xD1	; 209
    2134:	97 40       	sbci	r25, 0x07	; 7
    2136:	0c f4       	brge	.+2      	; 0x213a <main+0x1c22>
    2138:	52 c0       	rjmp	.+164    	; 0x21de <main+0x1cc6>
    213a:	12 01       	movw	r2, r4
    213c:	07 c0       	rjmp	.+14     	; 0x214c <main+0x1c34>
    213e:	3e e0       	ldi	r19, 0x0E	; 14
    2140:	63 2e       	mov	r6, r19
    2142:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    2144:	54 e1       	ldi	r21, 0x14	; 20
    2146:	65 16       	cp	r6, r21
    2148:	71 04       	cpc	r7, r1
    214a:	61 f4       	brne	.+24     	; 0x2164 <main+0x1c4c>
    214c:	c2 01       	movw	r24, r4
    214e:	82 19       	sub	r24, r2
    2150:	93 09       	sbc	r25, r3
    2152:	85 36       	cpi	r24, 0x65	; 101
    2154:	91 05       	cpc	r25, r1
    2156:	0c f4       	brge	.+2      	; 0x215a <main+0x1c42>
    2158:	50 c0       	rjmp	.+160    	; 0x21fa <main+0x1ce2>
    215a:	12 01       	movw	r2, r4
    215c:	07 c0       	rjmp	.+14     	; 0x216c <main+0x1c54>
    215e:	2f e0       	ldi	r18, 0x0F	; 15
    2160:	62 2e       	mov	r6, r18
    2162:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2164:	85 e1       	ldi	r24, 0x15	; 21
    2166:	68 16       	cp	r6, r24
    2168:	71 04       	cpc	r7, r1
    216a:	61 f4       	brne	.+24     	; 0x2184 <main+0x1c6c>
    216c:	c2 01       	movw	r24, r4
    216e:	82 19       	sub	r24, r2
    2170:	93 09       	sbc	r25, r3
    2172:	81 5d       	subi	r24, 0xD1	; 209
    2174:	97 40       	sbci	r25, 0x07	; 7
    2176:	0c f4       	brge	.+2      	; 0x217a <main+0x1c62>
    2178:	53 c0       	rjmp	.+166    	; 0x2220 <main+0x1d08>
    217a:	12 01       	movw	r2, r4
    217c:	07 c0       	rjmp	.+14     	; 0x218c <main+0x1c74>
    217e:	90 e1       	ldi	r25, 0x10	; 16
    2180:	69 2e       	mov	r6, r25
    2182:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    2184:	b6 e1       	ldi	r27, 0x16	; 22
    2186:	6b 16       	cp	r6, r27
    2188:	71 04       	cpc	r7, r1
    218a:	61 f4       	brne	.+24     	; 0x21a4 <main+0x1c8c>
    218c:	c2 01       	movw	r24, r4
    218e:	82 19       	sub	r24, r2
    2190:	93 09       	sbc	r25, r3
    2192:	85 36       	cpi	r24, 0x65	; 101
    2194:	91 05       	cpc	r25, r1
    2196:	0c f4       	brge	.+2      	; 0x219a <main+0x1c82>
    2198:	57 c0       	rjmp	.+174    	; 0x2248 <main+0x1d30>
    219a:	12 01       	movw	r2, r4
    219c:	07 c0       	rjmp	.+14     	; 0x21ac <main+0x1c94>
    219e:	81 e1       	ldi	r24, 0x11	; 17
    21a0:	68 2e       	mov	r6, r24
    21a2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    21a4:	27 e1       	ldi	r18, 0x17	; 23
    21a6:	62 16       	cp	r6, r18
    21a8:	71 04       	cpc	r7, r1
    21aa:	61 f4       	brne	.+24     	; 0x21c4 <main+0x1cac>
    21ac:	c2 01       	movw	r24, r4
    21ae:	82 19       	sub	r24, r2
    21b0:	93 09       	sbc	r25, r3
    21b2:	81 5a       	subi	r24, 0xA1	; 161
    21b4:	9f 40       	sbci	r25, 0x0F	; 15
    21b6:	0c f4       	brge	.+2      	; 0x21ba <main+0x1ca2>
    21b8:	57 c0       	rjmp	.+174    	; 0x2268 <main+0x1d50>
    21ba:	12 01       	movw	r2, r4
    21bc:	07 c0       	rjmp	.+14     	; 0x21cc <main+0x1cb4>
    21be:	02 e1       	ldi	r16, 0x12	; 18
    21c0:	60 2e       	mov	r6, r16
    21c2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    21c4:	48 e1       	ldi	r20, 0x18	; 24
    21c6:	64 16       	cp	r6, r20
    21c8:	71 04       	cpc	r7, r1
    21ca:	61 f4       	brne	.+24     	; 0x21e4 <main+0x1ccc>
    21cc:	c2 01       	movw	r24, r4
    21ce:	82 19       	sub	r24, r2
    21d0:	93 09       	sbc	r25, r3
    21d2:	85 36       	cpi	r24, 0x65	; 101
    21d4:	91 05       	cpc	r25, r1
    21d6:	0c f4       	brge	.+2      	; 0x21da <main+0x1cc2>
    21d8:	55 c0       	rjmp	.+170    	; 0x2284 <main+0x1d6c>
    21da:	12 01       	movw	r2, r4
    21dc:	07 c0       	rjmp	.+14     	; 0x21ec <main+0x1cd4>
    21de:	13 e1       	ldi	r17, 0x13	; 19
    21e0:	61 2e       	mov	r6, r17
    21e2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    21e4:	59 e1       	ldi	r21, 0x19	; 25
    21e6:	65 16       	cp	r6, r21
    21e8:	71 04       	cpc	r7, r1
    21ea:	51 f4       	brne	.+20     	; 0x2200 <main+0x1ce8>
    21ec:	c2 01       	movw	r24, r4
    21ee:	82 19       	sub	r24, r2
    21f0:	93 09       	sbc	r25, r3
    21f2:	81 5a       	subi	r24, 0xA1	; 161
    21f4:	9f 40       	sbci	r25, 0x0F	; 15
    21f6:	44 f4       	brge	.+16     	; 0x2208 <main+0x1cf0>
    21f8:	55 c0       	rjmp	.+170    	; 0x22a4 <main+0x1d8c>
    21fa:	b4 e1       	ldi	r27, 0x14	; 20
    21fc:	6b 2e       	mov	r6, r27
    21fe:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    2200:	ba e1       	ldi	r27, 0x1A	; 26
    2202:	6b 16       	cp	r6, r27
    2204:	71 04       	cpc	r7, r1
    2206:	79 f4       	brne	.+30     	; 0x2226 <main+0x1d0e>
    2208:	c2 01       	movw	r24, r4
    220a:	82 19       	sub	r24, r2
    220c:	93 09       	sbc	r25, r3
    220e:	81 5a       	subi	r24, 0xA1	; 161
    2210:	9f 40       	sbci	r25, 0x0F	; 15
    2212:	0c f4       	brge	.+2      	; 0x2216 <main+0x1cfe>
    2214:	57 c0       	rjmp	.+174    	; 0x22c4 <main+0x1dac>
    2216:	23 96       	adiw	r28, 0x03	; 3
    2218:	5f ae       	std	Y+63, r5	; 0x3f
    221a:	4e ae       	std	Y+62, r4	; 0x3e
    221c:	23 97       	sbiw	r28, 0x03	; 3
    221e:	07 c0       	rjmp	.+14     	; 0x222e <main+0x1d16>
    2220:	a5 e1       	ldi	r26, 0x15	; 21
    2222:	6a 2e       	mov	r6, r26
    2224:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    2226:	3b e1       	ldi	r19, 0x1B	; 27
    2228:	63 16       	cp	r6, r19
    222a:	71 04       	cpc	r7, r1
    222c:	81 f4       	brne	.+32     	; 0x224e <main+0x1d36>
    222e:	c2 01       	movw	r24, r4
    2230:	23 96       	adiw	r28, 0x03	; 3
    2232:	4e ad       	ldd	r20, Y+62	; 0x3e
    2234:	5f ad       	ldd	r21, Y+63	; 0x3f
    2236:	23 97       	sbiw	r28, 0x03	; 3
    2238:	84 1b       	sub	r24, r20
    223a:	95 0b       	sbc	r25, r21
    223c:	85 36       	cpi	r24, 0x65	; 101
    223e:	91 05       	cpc	r25, r1
    2240:	0c f4       	brge	.+2      	; 0x2244 <main+0x1d2c>
    2242:	50 c0       	rjmp	.+160    	; 0x22e4 <main+0x1dcc>
    2244:	12 01       	movw	r2, r4
    2246:	07 c0       	rjmp	.+14     	; 0x2256 <main+0x1d3e>
    2248:	f6 e1       	ldi	r31, 0x16	; 22
    224a:	6f 2e       	mov	r6, r31
    224c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    224e:	5c e1       	ldi	r21, 0x1C	; 28
    2250:	65 16       	cp	r6, r21
    2252:	71 04       	cpc	r7, r1
    2254:	61 f4       	brne	.+24     	; 0x226e <main+0x1d56>
    2256:	c2 01       	movw	r24, r4
    2258:	82 19       	sub	r24, r2
    225a:	93 09       	sbc	r25, r3
    225c:	85 36       	cpi	r24, 0x65	; 101
    225e:	91 05       	cpc	r25, r1
    2260:	0c f4       	brge	.+2      	; 0x2264 <main+0x1d4c>
    2262:	50 c0       	rjmp	.+160    	; 0x2304 <main+0x1dec>
    2264:	12 01       	movw	r2, r4
    2266:	07 c0       	rjmp	.+14     	; 0x2276 <main+0x1d5e>
    2268:	e7 e1       	ldi	r30, 0x17	; 23
    226a:	6e 2e       	mov	r6, r30
    226c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    226e:	8d e1       	ldi	r24, 0x1D	; 29
    2270:	68 16       	cp	r6, r24
    2272:	71 04       	cpc	r7, r1
    2274:	51 f4       	brne	.+20     	; 0x228a <main+0x1d72>
    2276:	c2 01       	movw	r24, r4
    2278:	82 19       	sub	r24, r2
    227a:	93 09       	sbc	r25, r3
    227c:	81 5a       	subi	r24, 0xA1	; 161
    227e:	9f 40       	sbci	r25, 0x0F	; 15
    2280:	44 f4       	brge	.+16     	; 0x2292 <main+0x1d7a>
    2282:	50 c0       	rjmp	.+160    	; 0x2324 <main+0x1e0c>
    2284:	78 e1       	ldi	r23, 0x18	; 24
    2286:	67 2e       	mov	r6, r23
    2288:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totalStepLength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    228a:	be e1       	ldi	r27, 0x1E	; 30
    228c:	6b 16       	cp	r6, r27
    228e:	71 04       	cpc	r7, r1
    2290:	61 f4       	brne	.+24     	; 0x22aa <main+0x1d92>
    2292:	c2 01       	movw	r24, r4
    2294:	82 19       	sub	r24, r2
    2296:	93 09       	sbc	r25, r3
    2298:	81 5a       	subi	r24, 0xA1	; 161
    229a:	9f 40       	sbci	r25, 0x0F	; 15
    229c:	0c f4       	brge	.+2      	; 0x22a0 <main+0x1d88>
    229e:	53 c0       	rjmp	.+166    	; 0x2346 <main+0x1e2e>
    22a0:	12 01       	movw	r2, r4
    22a2:	07 c0       	rjmp	.+14     	; 0x22b2 <main+0x1d9a>
    22a4:	69 e1       	ldi	r22, 0x19	; 25
    22a6:	66 2e       	mov	r6, r22
    22a8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    22aa:	3f e1       	ldi	r19, 0x1F	; 31
    22ac:	63 16       	cp	r6, r19
    22ae:	71 04       	cpc	r7, r1
    22b0:	61 f4       	brne	.+24     	; 0x22ca <main+0x1db2>
    22b2:	c2 01       	movw	r24, r4
    22b4:	82 19       	sub	r24, r2
    22b6:	93 09       	sbc	r25, r3
    22b8:	89 5e       	subi	r24, 0xE9	; 233
    22ba:	93 40       	sbci	r25, 0x03	; 3
    22bc:	0c f4       	brge	.+2      	; 0x22c0 <main+0x1da8>
    22be:	87 c1       	rjmp	.+782    	; 0x25ce <main+0x20b6>
    22c0:	12 01       	movw	r2, r4
    22c2:	07 c0       	rjmp	.+14     	; 0x22d2 <main+0x1dba>
    22c4:	5a e1       	ldi	r21, 0x1A	; 26
    22c6:	65 2e       	mov	r6, r21
    22c8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    22ca:	50 e2       	ldi	r21, 0x20	; 32
    22cc:	65 16       	cp	r6, r21
    22ce:	71 04       	cpc	r7, r1
    22d0:	61 f4       	brne	.+24     	; 0x22ea <main+0x1dd2>
    22d2:	c2 01       	movw	r24, r4
    22d4:	82 19       	sub	r24, r2
    22d6:	93 09       	sbc	r25, r3
    22d8:	81 5a       	subi	r24, 0xA1	; 161
    22da:	9f 40       	sbci	r25, 0x0F	; 15
    22dc:	0c f4       	brge	.+2      	; 0x22e0 <main+0x1dc8>
    22de:	83 c1       	rjmp	.+774    	; 0x25e6 <main+0x20ce>
    22e0:	12 01       	movw	r2, r4
    22e2:	07 c0       	rjmp	.+14     	; 0x22f2 <main+0x1dda>
    22e4:	4b e1       	ldi	r20, 0x1B	; 27
    22e6:	64 2e       	mov	r6, r20
    22e8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    22ea:	b1 e2       	ldi	r27, 0x21	; 33
    22ec:	6b 16       	cp	r6, r27
    22ee:	71 04       	cpc	r7, r1
    22f0:	61 f4       	brne	.+24     	; 0x230a <main+0x1df2>
    22f2:	c2 01       	movw	r24, r4
    22f4:	82 19       	sub	r24, r2
    22f6:	93 09       	sbc	r25, r3
    22f8:	85 36       	cpi	r24, 0x65	; 101
    22fa:	91 05       	cpc	r25, r1
    22fc:	0c f4       	brge	.+2      	; 0x2300 <main+0x1de8>
    22fe:	80 c1       	rjmp	.+768    	; 0x2600 <main+0x20e8>
    2300:	12 01       	movw	r2, r4
    2302:	07 c0       	rjmp	.+14     	; 0x2312 <main+0x1dfa>
    2304:	3c e1       	ldi	r19, 0x1C	; 28
    2306:	63 2e       	mov	r6, r19
    2308:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    230a:	22 e2       	ldi	r18, 0x22	; 34
    230c:	62 16       	cp	r6, r18
    230e:	71 04       	cpc	r7, r1
    2310:	61 f4       	brne	.+24     	; 0x232a <main+0x1e12>
    2312:	c2 01       	movw	r24, r4
    2314:	82 19       	sub	r24, r2
    2316:	93 09       	sbc	r25, r3
    2318:	81 5a       	subi	r24, 0xA1	; 161
    231a:	9f 40       	sbci	r25, 0x0F	; 15
    231c:	0c f4       	brge	.+2      	; 0x2320 <main+0x1e08>
    231e:	82 c1       	rjmp	.+772    	; 0x2624 <main+0x210c>
    2320:	12 01       	movw	r2, r4
    2322:	07 c0       	rjmp	.+14     	; 0x2332 <main+0x1e1a>
    2324:	2d e1       	ldi	r18, 0x1D	; 29
    2326:	62 2e       	mov	r6, r18
    2328:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    232a:	43 e2       	ldi	r20, 0x23	; 35
    232c:	64 16       	cp	r6, r20
    232e:	71 04       	cpc	r7, r1
    2330:	69 f4       	brne	.+26     	; 0x234c <main+0x1e34>
    2332:	c2 01       	movw	r24, r4
    2334:	82 19       	sub	r24, r2
    2336:	93 09       	sbc	r25, r3
    2338:	0b 97       	sbiw	r24, 0x0b	; 11
    233a:	0c f4       	brge	.+2      	; 0x233e <main+0x1e26>
    233c:	80 c1       	rjmp	.+768    	; 0x263e <main+0x2126>
    233e:	94 e2       	ldi	r25, 0x24	; 36
    2340:	69 2e       	mov	r6, r25
    2342:	71 2c       	mov	r7, r1
    2344:	97 c1       	rjmp	.+814    	; 0x2674 <main+0x215c>
    2346:	8e e1       	ldi	r24, 0x1E	; 30
    2348:	68 2e       	mov	r6, r24
    234a:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    234c:	f3 01       	movw	r30, r6
    234e:	e4 32       	cpi	r30, 0x24	; 36
    2350:	f1 05       	cpc	r31, r1
    2352:	08 f0       	brcs	.+2      	; 0x2356 <main+0x1e3e>
    2354:	8f c1       	rjmp	.+798    	; 0x2674 <main+0x215c>
    2356:	e8 54       	subi	r30, 0x48	; 72
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	ee 0f       	add	r30, r30
    235c:	ff 1f       	adc	r31, r31
    235e:	05 90       	lpm	r0, Z+
    2360:	f4 91       	lpm	r31, Z+
    2362:	e0 2d       	mov	r30, r0
    2364:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    2366:	80 91 5a 03 	lds	r24, 0x035A
    236a:	20 91 56 03 	lds	r18, 0x0356
    236e:	90 91 58 03 	lds	r25, 0x0358
    2372:	82 ff       	sbrs	r24, 2
    2374:	07 c0       	rjmp	.+14     	; 0x2384 <main+0x1e6c>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    2376:	2f 7e       	andi	r18, 0xEF	; 239
    2378:	20 93 56 03 	sts	0x0356, r18
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    237c:	97 7f       	andi	r25, 0xF7	; 247
    237e:	90 93 58 03 	sts	0x0358, r25
    2382:	fb c0       	rjmp	.+502    	; 0x257a <main+0x2062>
						fixtureMotor = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    2384:	2f 7d       	andi	r18, 0xDF	; 223
    2386:	20 93 56 03 	sts	0x0356, r18
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    238a:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    238c:	98 60       	ori	r25, 0x08	; 8
    238e:	90 93 58 03 	sts	0x0358, r25
						if(print0 == 1){
    2392:	a9 a9       	ldd	r26, Y+49	; 0x31
    2394:	ba a9       	ldd	r27, Y+50	; 0x32
    2396:	11 97       	sbiw	r26, 0x01	; 1
    2398:	09 f0       	breq	.+2      	; 0x239c <main+0x1e84>
    239a:	e7 c0       	rjmp	.+462    	; 0x256a <main+0x2052>
							OrangutanLCD::gotoXY(0,1);
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	61 e0       	ldi	r22, 0x01	; 1
    23a0:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    23a4:	88 e1       	ldi	r24, 0x18	; 24
    23a6:	93 e0       	ldi	r25, 0x03	; 3
    23a8:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    23ac:	1a aa       	std	Y+50, r1	; 0x32
    23ae:	19 aa       	std	Y+49, r1	; 0x31
    23b0:	dc c0       	rjmp	.+440    	; 0x256a <main+0x2052>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    23b2:	20 91 58 03 	lds	r18, 0x0358
    23b6:	32 2f       	mov	r19, r18
    23b8:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    23ba:	c2 01       	movw	r24, r4
    23bc:	68 ec       	ldi	r22, 0xC8	; 200
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__divmodhi4>
    23c4:	84 36       	cpi	r24, 0x64	; 100
    23c6:	91 05       	cpc	r25, r1
    23c8:	24 f4       	brge	.+8      	; 0x23d2 <main+0x1eba>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    23ca:	2c 7f       	andi	r18, 0xFC	; 252
    23cc:	20 93 58 03 	sts	0x0358, r18
    23d0:	03 c0       	rjmp	.+6      	; 0x23d8 <main+0x1ec0>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    23d2:	32 60       	ori	r19, 0x02	; 2
    23d4:	30 93 58 03 	sts	0x0358, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
    23d8:	80 91 56 03 	lds	r24, 0x0356
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    23dc:	86 60       	ori	r24, 0x06	; 6
    23de:	80 93 56 03 	sts	0x0356, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    23e2:	80 91 58 03 	lds	r24, 0x0358
    23e6:	8b 7f       	andi	r24, 0xFB	; 251
    23e8:	80 93 58 03 	sts	0x0358, r24
    23ec:	21 e0       	ldi	r18, 0x01	; 1
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	3c a3       	std	Y+36, r19	; 0x24
    23f2:	2b a3       	std	Y+35, r18	; 0x23
    23f4:	3f c1       	rjmp	.+638    	; 0x2674 <main+0x215c>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    23f6:	80 91 58 03 	lds	r24, 0x0358
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    23fa:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    23fc:	86 61       	ori	r24, 0x16	; 22
    23fe:	80 93 58 03 	sts	0x0358, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    2402:	80 91 56 03 	lds	r24, 0x0356
    2406:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    2408:	8b 7f       	andi	r24, 0xFB	; 251
    240a:	80 93 56 03 	sts	0x0356, r24
    240e:	2b c1       	rjmp	.+598    	; 0x2666 <main+0x214e>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    2410:	80 91 56 03 	lds	r24, 0x0356
    2414:	8f 7d       	andi	r24, 0xDF	; 223
    2416:	80 93 56 03 	sts	0x0356, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    241a:	80 91 58 03 	lds	r24, 0x0358
    241e:	88 60       	ori	r24, 0x08	; 8
    2420:	80 93 58 03 	sts	0x0358, r24
    2424:	a2 c0       	rjmp	.+324    	; 0x256a <main+0x2052>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2426:	80 91 58 03 	lds	r24, 0x0358
    242a:	8f 7e       	andi	r24, 0xEF	; 239
    242c:	80 93 58 03 	sts	0x0358, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    2430:	80 91 56 03 	lds	r24, 0x0356
    2434:	80 62       	ori	r24, 0x20	; 32
    2436:	80 93 56 03 	sts	0x0356, r24
    243a:	1c c1       	rjmp	.+568    	; 0x2674 <main+0x215c>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    243c:	80 91 56 03 	lds	r24, 0x0356
    2440:	80 61       	ori	r24, 0x10	; 16
    2442:	99 c0       	rjmp	.+306    	; 0x2576 <main+0x205e>
					fixtureMotor = 1;
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
    2444:	80 91 57 03 	lds	r24, 0x0357
    2448:	81 60       	ori	r24, 0x01	; 1
    244a:	80 93 57 03 	sts	0x0357, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    244e:	80 91 56 03 	lds	r24, 0x0356
    2452:	8f 77       	andi	r24, 0x7F	; 127
    2454:	80 93 56 03 	sts	0x0356, r24
    2458:	88 c0       	rjmp	.+272    	; 0x256a <main+0x2052>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    245a:	80 91 58 03 	lds	r24, 0x0358
    245e:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2460:	8f 7d       	andi	r24, 0xDF	; 223
    2462:	80 93 58 03 	sts	0x0358, r24
    2466:	a1 e0       	ldi	r26, 0x01	; 1
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	bc 87       	std	Y+12, r27	; 0x0c
    246c:	ab 87       	std	Y+11, r26	; 0x0b
    246e:	02 c1       	rjmp	.+516    	; 0x2674 <main+0x215c>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2470:	80 91 56 03 	lds	r24, 0x0356
    2474:	80 61       	ori	r24, 0x10	; 16
    2476:	80 93 56 03 	sts	0x0356, r24
    247a:	41 e0       	ldi	r20, 0x01	; 1
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	5c 8f       	std	Y+28, r21	; 0x1c
    2480:	4b 8f       	std	Y+27, r20	; 0x1b
    2482:	f8 c0       	rjmp	.+496    	; 0x2674 <main+0x215c>
					fixtureMotor = 1;
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2484:	80 91 56 03 	lds	r24, 0x0356
    2488:	8f 77       	andi	r24, 0x7F	; 127
    248a:	80 93 56 03 	sts	0x0356, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    248e:	80 91 58 03 	lds	r24, 0x0358
    2492:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2494:	8f 7d       	andi	r24, 0xDF	; 223
    2496:	80 93 58 03 	sts	0x0358, r24
    249a:	1c 8e       	std	Y+28, r1	; 0x1c
    249c:	1b 8e       	std	Y+27, r1	; 0x1b
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	9c 87       	std	Y+12, r25	; 0x0c
    24a4:	8b 87       	std	Y+11, r24	; 0x0b
    24a6:	e6 c0       	rjmp	.+460    	; 0x2674 <main+0x215c>
					fixtureMotor = 1;
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    24a8:	80 91 58 03 	lds	r24, 0x0358
    24ac:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    24ae:	80 62       	ori	r24, 0x20	; 32
    24b0:	80 93 58 03 	sts	0x0358, r24
    24b4:	1c 8e       	std	Y+28, r1	; 0x1c
    24b6:	1b 8e       	std	Y+27, r1	; 0x1b
    24b8:	1c 86       	std	Y+12, r1	; 0x0c
    24ba:	1b 86       	std	Y+11, r1	; 0x0b
    24bc:	db c0       	rjmp	.+438    	; 0x2674 <main+0x215c>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
    24be:	80 91 57 03 	lds	r24, 0x0357
    24c2:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    24c4:	8b 7f       	andi	r24, 0xFB	; 251
    24c6:	80 93 57 03 	sts	0x0357, r24
    24ca:	4f c0       	rjmp	.+158    	; 0x256a <main+0x2052>
						print15 = 0;
					}*/
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    24cc:	80 91 59 03 	lds	r24, 0x0359
    24d0:	81 60       	ori	r24, 0x01	; 1
    24d2:	80 93 59 03 	sts	0x0359, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    24d6:	80 91 58 03 	lds	r24, 0x0358
    24da:	8f 77       	andi	r24, 0x7F	; 127
    24dc:	80 93 58 03 	sts	0x0358, r24
    24e0:	a1 e0       	ldi	r26, 0x01	; 1
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	bc a7       	std	Y+44, r27	; 0x2c
    24e6:	ab a7       	std	Y+43, r26	; 0x2b
    24e8:	c5 c0       	rjmp	.+394    	; 0x2674 <main+0x215c>
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    24ea:	80 91 59 03 	lds	r24, 0x0359
    24ee:	8e 7f       	andi	r24, 0xFE	; 254
    24f0:	80 93 59 03 	sts	0x0359, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    24f4:	80 91 58 03 	lds	r24, 0x0358
    24f8:	80 68       	ori	r24, 0x80	; 128
    24fa:	80 93 58 03 	sts	0x0358, r24
    24fe:	2d c0       	rjmp	.+90     	; 0x255a <main+0x2042>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2500:	80 91 56 03 	lds	r24, 0x0356
    2504:	8f 7e       	andi	r24, 0xEF	; 239
    2506:	80 93 56 03 	sts	0x0356, r24
    250a:	21 e0       	ldi	r18, 0x01	; 1
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	3c 8f       	std	Y+28, r19	; 0x1c
    2510:	2b 8f       	std	Y+27, r18	; 0x1b
    2512:	b0 c0       	rjmp	.+352    	; 0x2674 <main+0x215c>
					fixtureMotor = 1;
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2514:	80 91 57 03 	lds	r24, 0x0357
    2518:	8b 7f       	andi	r24, 0xFB	; 251
    251a:	80 93 57 03 	sts	0x0357, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    251e:	80 91 59 03 	lds	r24, 0x0359
    2522:	81 60       	ori	r24, 0x01	; 1
    2524:	80 93 59 03 	sts	0x0359, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2528:	80 91 58 03 	lds	r24, 0x0358
    252c:	8f 77       	andi	r24, 0x7F	; 127
    252e:	80 93 58 03 	sts	0x0358, r24
    2532:	41 e0       	ldi	r20, 0x01	; 1
    2534:	50 e0       	ldi	r21, 0x00	; 0
    2536:	5c a7       	std	Y+44, r21	; 0x2c
    2538:	4b a7       	std	Y+43, r20	; 0x2b
    253a:	17 c0       	rjmp	.+46     	; 0x256a <main+0x2052>
					fixtureMotor = 1;
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    253c:	80 91 59 03 	lds	r24, 0x0359
    2540:	8e 7f       	andi	r24, 0xFE	; 254
    2542:	80 93 59 03 	sts	0x0359, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2546:	80 91 58 03 	lds	r24, 0x0358
    254a:	80 68       	ori	r24, 0x80	; 128
    254c:	80 93 58 03 	sts	0x0358, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
    2550:	80 91 57 03 	lds	r24, 0x0357
    2554:	87 7f       	andi	r24, 0xF7	; 247
    2556:	80 93 57 03 	sts	0x0357, r24
    255a:	1c a6       	std	Y+44, r1	; 0x2c
    255c:	1b a6       	std	Y+43, r1	; 0x2b
    255e:	05 c0       	rjmp	.+10     	; 0x256a <main+0x2052>
					fixtureMotor = 1;
					//u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2560:	80 91 59 03 	lds	r24, 0x0359
    2564:	87 7f       	andi	r24, 0xF7	; 247
    2566:	80 93 59 03 	sts	0x0359, r24
    256a:	1c 8e       	std	Y+28, r1	; 0x1c
    256c:	1b 8e       	std	Y+27, r1	; 0x1b
    256e:	82 c0       	rjmp	.+260    	; 0x2674 <main+0x215c>
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2570:	80 91 56 03 	lds	r24, 0x0356
    2574:	8f 7e       	andi	r24, 0xEF	; 239
    2576:	80 93 56 03 	sts	0x0356, r24
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	9c 8f       	std	Y+28, r25	; 0x1c
    2580:	8b 8f       	std	Y+27, r24	; 0x1b
    2582:	78 c0       	rjmp	.+240    	; 0x2674 <main+0x215c>
					fixtureMotor = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    2584:	80 91 59 03 	lds	r24, 0x0359
    2588:	88 60       	ori	r24, 0x08	; 8
    258a:	10 c0       	rjmp	.+32     	; 0x25ac <main+0x2094>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
    258c:	80 91 57 03 	lds	r24, 0x0357
    2590:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    2592:	8f 7d       	andi	r24, 0xDF	; 223
    2594:	80 93 57 03 	sts	0x0357, r24
    2598:	1c 8e       	std	Y+28, r1	; 0x1c
    259a:	1b 8e       	std	Y+27, r1	; 0x1b
    259c:	a1 e0       	ldi	r26, 0x01	; 1
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	bc 8b       	std	Y+20, r27	; 0x14
    25a2:	ab 8b       	std	Y+19, r26	; 0x13
    25a4:	67 c0       	rjmp	.+206    	; 0x2674 <main+0x215c>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    25a6:	80 91 59 03 	lds	r24, 0x0359
    25aa:	8d 7f       	andi	r24, 0xFD	; 253
    25ac:	80 93 59 03 	sts	0x0359, r24
    25b0:	61 c0       	rjmp	.+194    	; 0x2674 <main+0x215c>
				case DRY2:
					fixtureMotor = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    25b2:	80 91 57 03 	lds	r24, 0x0357
    25b6:	8f 7b       	andi	r24, 0xBF	; 191
    25b8:	80 93 57 03 	sts	0x0357, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    25bc:	80 91 59 03 	lds	r24, 0x0359
    25c0:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    25c2:	8b 7f       	andi	r24, 0xFB	; 251
    25c4:	80 93 59 03 	sts	0x0359, r24
    25c8:	1c 8a       	std	Y+20, r1	; 0x14
    25ca:	1b 8a       	std	Y+19, r1	; 0x13
    25cc:	53 c0       	rjmp	.+166    	; 0x2674 <main+0x215c>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    25ce:	80 91 58 03 	lds	r24, 0x0358
    25d2:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    25d4:	80 61       	ori	r24, 0x10	; 16
    25d6:	80 93 58 03 	sts	0x0358, r24
    25da:	1c 8e       	std	Y+28, r1	; 0x1c
    25dc:	1b 8e       	std	Y+27, r1	; 0x1b
    25de:	0f e1       	ldi	r16, 0x1F	; 31
    25e0:	60 2e       	mov	r6, r16
    25e2:	71 2c       	mov	r7, r1
    25e4:	47 c0       	rjmp	.+142    	; 0x2674 <main+0x215c>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    25e6:	80 91 56 03 	lds	r24, 0x0356
    25ea:	8f 7e       	andi	r24, 0xEF	; 239
    25ec:	80 93 56 03 	sts	0x0356, r24
    25f0:	21 e0       	ldi	r18, 0x01	; 1
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	3c 8f       	std	Y+28, r19	; 0x1c
    25f6:	2b 8f       	std	Y+27, r18	; 0x1b
    25f8:	10 e2       	ldi	r17, 0x20	; 32
    25fa:	61 2e       	mov	r6, r17
    25fc:	71 2c       	mov	r7, r1
    25fe:	3a c0       	rjmp	.+116    	; 0x2674 <main+0x215c>
					fixtureMotor = 1;
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    2600:	80 91 56 03 	lds	r24, 0x0356
    2604:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    2606:	84 60       	ori	r24, 0x04	; 4
    2608:	80 93 56 03 	sts	0x0356, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    260c:	80 91 58 03 	lds	r24, 0x0358
    2610:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2612:	8f 7e       	andi	r24, 0xEF	; 239
    2614:	80 93 58 03 	sts	0x0358, r24
    2618:	1c 8e       	std	Y+28, r1	; 0x1c
    261a:	1b 8e       	std	Y+27, r1	; 0x1b
    261c:	b1 e2       	ldi	r27, 0x21	; 33
    261e:	6b 2e       	mov	r6, r27
    2620:	71 2c       	mov	r7, r1
    2622:	28 c0       	rjmp	.+80     	; 0x2674 <main+0x215c>
					break;
    2624:	a2 e2       	ldi	r26, 0x22	; 34
    2626:	6a 2e       	mov	r6, r26
    2628:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    262a:	80 91 56 03 	lds	r24, 0x0356
    262e:	8d 7f       	andi	r24, 0xFD	; 253
    2630:	80 93 56 03 	sts	0x0356, r24
    2634:	41 e0       	ldi	r20, 0x01	; 1
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	5c a3       	std	Y+36, r21	; 0x24
    263a:	4b a3       	std	Y+35, r20	; 0x23
    263c:	1b c0       	rjmp	.+54     	; 0x2674 <main+0x215c>
					plateLoadMotor = 1;
					break;
    263e:	f3 e2       	ldi	r31, 0x23	; 35
    2640:	6f 2e       	mov	r6, r31
    2642:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    2644:	80 91 56 03 	lds	r24, 0x0356
    2648:	8b 7f       	andi	r24, 0xFB	; 251
    264a:	80 93 56 03 	sts	0x0356, r24
					if(print35 == 1){
    264e:	8f a9       	ldd	r24, Y+55	; 0x37
    2650:	98 ad       	ldd	r25, Y+56	; 0x38
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	41 f4       	brne	.+16     	; 0x2666 <main+0x214e>
						OrangutanLCD::clear();
    2656:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    265a:	86 e2       	ldi	r24, 0x26	; 38
    265c:	93 e0       	ldi	r25, 0x03	; 3
    265e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    2662:	18 ae       	std	Y+56, r1	; 0x38
    2664:	1f aa       	std	Y+55, r1	; 0x37
    2666:	1c a2       	std	Y+36, r1	; 0x24
    2668:	1b a2       	std	Y+35, r1	; 0x23
    266a:	04 c0       	rjmp	.+8      	; 0x2674 <main+0x215c>
    266c:	a1 e0       	ldi	r26, 0x01	; 1
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	bc 8f       	std	Y+28, r27	; 0x1c
    2672:	ab 8f       	std	Y+27, r26	; 0x1b
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    2674:	2d b7       	in	r18, 0x3d	; 61
    2676:	3e b7       	in	r19, 0x3e	; 62
    2678:	22 51       	subi	r18, 0x12	; 18
    267a:	30 40       	sbci	r19, 0x00	; 0
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	3e bf       	out	0x3e, r19	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	2d bf       	out	0x3d, r18	; 61
    2686:	ed b7       	in	r30, 0x3d	; 61
    2688:	fe b7       	in	r31, 0x3e	; 62
    268a:	31 96       	adiw	r30, 0x01	; 1
    268c:	82 e0       	ldi	r24, 0x02	; 2
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	ad b7       	in	r26, 0x3d	; 61
    2692:	be b7       	in	r27, 0x3e	; 62
    2694:	12 96       	adiw	r26, 0x02	; 2
    2696:	9c 93       	st	X, r25
    2698:	8e 93       	st	-X, r24
    269a:	11 97       	sbiw	r26, 0x01	; 1
    269c:	93 83       	std	Z+3, r25	; 0x03
    269e:	82 83       	std	Z+2, r24	; 0x02
    26a0:	95 83       	std	Z+5, r25	; 0x05
    26a2:	84 83       	std	Z+4, r24	; 0x04
    26a4:	97 83       	std	Z+7, r25	; 0x07
    26a6:	86 83       	std	Z+6, r24	; 0x06
    26a8:	21 e0       	ldi	r18, 0x01	; 1
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	31 87       	std	Z+9, r19	; 0x09
    26ae:	20 87       	std	Z+8, r18	; 0x08
    26b0:	33 87       	std	Z+11, r19	; 0x0b
    26b2:	22 87       	std	Z+10, r18	; 0x0a
    26b4:	35 87       	std	Z+13, r19	; 0x0d
    26b6:	24 87       	std	Z+12, r18	; 0x0c
    26b8:	37 87       	std	Z+15, r19	; 0x0f
    26ba:	26 87       	std	Z+14, r18	; 0x0e
    26bc:	31 8b       	std	Z+17, r19	; 0x11
    26be:	20 8b       	std	Z+16, r18	; 0x10
    26c0:	c2 01       	movw	r24, r4
    26c2:	b1 01       	movw	r22, r2
    26c4:	23 96       	adiw	r28, 0x03	; 3
    26c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    26c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    26ca:	23 97       	sbiw	r28, 0x03	; 3
    26cc:	2b a1       	ldd	r18, Y+35	; 0x23
    26ce:	3c a1       	ldd	r19, Y+36	; 0x24
    26d0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    26d2:	1c 8d       	ldd	r17, Y+28	; 0x1c
    26d4:	eb 84       	ldd	r14, Y+11	; 0x0b
    26d6:	fc 84       	ldd	r15, Y+12	; 0x0c
    26d8:	cb a4       	ldd	r12, Y+43	; 0x2b
    26da:	dc a4       	ldd	r13, Y+44	; 0x2c
    26dc:	ab 88       	ldd	r10, Y+19	; 0x13
    26de:	bc 88       	ldd	r11, Y+20	; 0x14
    26e0:	e2 e0       	ldi	r30, 0x02	; 2
    26e2:	8e 2e       	mov	r8, r30
    26e4:	91 2c       	mov	r9, r1
    26e6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    26ea:	4d b7       	in	r20, 0x3d	; 61
    26ec:	5e b7       	in	r21, 0x3e	; 62
    26ee:	4e 5e       	subi	r20, 0xEE	; 238
    26f0:	5f 4f       	sbci	r21, 0xFF	; 255
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	5e bf       	out	0x3e, r21	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	4d bf       	out	0x3d, r20	; 61
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("BOTH B");
			while(state != DONER)
    2704:	54 e2       	ldi	r21, 0x24	; 36
    2706:	65 16       	cp	r6, r21
    2708:	71 04       	cpc	r7, r1
    270a:	09 f4       	brne	.+2      	; 0x270e <main+0x21f6>
    270c:	3b c4       	rjmp	.+2166   	; 0x2f84 <main+0x2a6c>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    270e:	08 94       	sec
    2710:	41 1c       	adc	r4, r1
    2712:	51 1c       	adc	r5, r1
    2714:	ca cb       	rjmp	.-2156   	; 0x1eaa <main+0x1992>
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    2716:	82 e0       	ldi	r24, 0x02	; 2
    2718:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
    271c:	88 23       	and	r24, r24
    271e:	09 f4       	brne	.+2      	; 0x2722 <main+0x220a>
    2720:	31 c4       	rjmp	.+2146   	; 0x2f84 <main+0x2a6c>
			OrangutanLCD::gotoXY(7,0);
    2722:	87 e0       	ldi	r24, 0x07	; 7
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("DEBUG");
    272a:	83 e4       	ldi	r24, 0x43	; 67
    272c:	93 e0       	ldi	r25, 0x03	; 3
    272e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    2732:	66 24       	eor	r6, r6
    2734:	77 24       	eor	r7, r7
    2736:	1e 82       	std	Y+6, r1	; 0x06
    2738:	1d 82       	std	Y+5, r1	; 0x05
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	9e ab       	std	Y+54, r25	; 0x36
    2740:	8d ab       	std	Y+53, r24	; 0x35
    2742:	98 ab       	std	Y+48, r25	; 0x30
    2744:	8f a7       	std	Y+47, r24	; 0x2f
    2746:	1a a6       	std	Y+42, r1	; 0x2a
    2748:	19 a6       	std	Y+41, r1	; 0x29
    274a:	1a a2       	std	Y+34, r1	; 0x22
    274c:	19 a2       	std	Y+33, r1	; 0x21
    274e:	1a 8e       	std	Y+26, r1	; 0x1a
    2750:	19 8e       	std	Y+25, r1	; 0x19
    2752:	1a 8a       	std	Y+18, r1	; 0x12
    2754:	19 8a       	std	Y+17, r1	; 0x11
    2756:	1a 86       	std	Y+10, r1	; 0x0a
    2758:	19 86       	std	Y+9, r1	; 0x09
    275a:	44 24       	eor	r4, r4
    275c:	55 24       	eor	r5, r5
    275e:	25 96       	adiw	r28, 0x05	; 5
    2760:	1f ae       	std	Y+63, r1	; 0x3f
    2762:	1e ae       	std	Y+62, r1	; 0x3e
    2764:	25 97       	sbiw	r28, 0x05	; 5
    2766:	22 24       	eor	r2, r2
    2768:	33 24       	eor	r3, r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    276a:	84 e4       	ldi	r24, 0x44	; 68
    276c:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2776:	85 e4       	ldi	r24, 0x45	; 69
    2778:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    277c:	0e 94 85 18 	call	0x310a	; 0x310a <_Z11i2c_readAckv>
    2780:	80 93 5a 03 	sts	0x035A, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2784:	0e 94 8f 18 	call	0x311e	; 0x311e <_Z11i2c_readNakv>
    2788:	80 93 5b 03 	sts	0x035B, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    278c:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <_Z8i2c_stopv>
				
				if(state != INIT){
    2790:	61 14       	cp	r6, r1
    2792:	71 04       	cpc	r7, r1
    2794:	79 f0       	breq	.+30     	; 0x27b4 <main+0x229c>
					OrangutanLCD::gotoXY(0,1);
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	61 e0       	ldi	r22, 0x01	; 1
    279a:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    279e:	81 e1       	ldi	r24, 0x11	; 17
    27a0:	93 e0       	ldi	r25, 0x03	; 3
    27a2:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    27a6:	b3 01       	movw	r22, r6
    27a8:	88 27       	eor	r24, r24
    27aa:	77 fd       	sbrc	r23, 7
    27ac:	80 95       	com	r24
    27ae:	98 2f       	mov	r25, r24
    27b0:	0e 94 41 1b 	call	0x3682	; 0x3682 <_ZN12OrangutanLCD5printEl>
						button = 0;
						stateButton = 0;
					}
				}*/

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    27b4:	c2 01       	movw	r24, r4
    27b6:	be 01       	movw	r22, r28
    27b8:	6f 5f       	subi	r22, 0xFF	; 255
    27ba:	7f 4f       	sbci	r23, 0xFF	; 255
    27bc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z15button_debounceiPi>
    27c0:	28 2f       	mov	r18, r24

				//state transitions
	
				if(state == INIT && buttonTriggered){
    27c2:	61 14       	cp	r6, r1
    27c4:	71 04       	cpc	r7, r1
    27c6:	21 f4       	brne	.+8      	; 0x27d0 <main+0x22b8>
    27c8:	88 23       	and	r24, r24
    27ca:	09 f0       	breq	.+2      	; 0x27ce <main+0x22b6>
    27cc:	18 c4       	rjmp	.+2096   	; 0x2ffe <main+0x2ae6>
    27ce:	1b c4       	rjmp	.+2102   	; 0x3006 <main+0x2aee>
					buttonTriggered = false;
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOAD && /*counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate&&*/ u_inputByte0.bits_in_inputByte0.plate == 0){
    27d0:	91 e0       	ldi	r25, 0x01	; 1
    27d2:	69 16       	cp	r6, r25
    27d4:	71 04       	cpc	r7, r1
    27d6:	49 f4       	brne	.+18     	; 0x27ea <main+0x22d2>
    27d8:	80 91 5a 03 	lds	r24, 0x035A
    27dc:	80 fd       	sbrc	r24, 0
    27de:	14 c0       	rjmp	.+40     	; 0x2808 <main+0x22f0>
    27e0:	12 01       	movw	r2, r4
    27e2:	45 e2       	ldi	r20, 0x25	; 37
    27e4:	64 2e       	mov	r6, r20
    27e6:	71 2c       	mov	r7, r1
    27e8:	0f c0       	rjmp	.+30     	; 0x2808 <main+0x22f0>
					state = WAIT;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    27ea:	a2 e0       	ldi	r26, 0x02	; 2
    27ec:	6a 16       	cp	r6, r26
    27ee:	71 04       	cpc	r7, r1
    27f0:	59 f4       	brne	.+22     	; 0x2808 <main+0x22f0>
    27f2:	c2 01       	movw	r24, r4
    27f4:	82 19       	sub	r24, r2
    27f6:	93 09       	sbc	r25, r3
    27f8:	85 36       	cpi	r24, 0x65	; 101
    27fa:	91 05       	cpc	r25, r1
    27fc:	a4 f0       	brlt	.+40     	; 0x2826 <main+0x230e>
    27fe:	12 01       	movw	r2, r4
    2800:	35 e2       	ldi	r19, 0x25	; 37
    2802:	63 2e       	mov	r6, r19
    2804:	71 2c       	mov	r7, r1
    2806:	0f c0       	rjmp	.+30     	; 0x2826 <main+0x230e>
					state = WAIT;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    2808:	b3 e0       	ldi	r27, 0x03	; 3
    280a:	6b 16       	cp	r6, r27
    280c:	71 04       	cpc	r7, r1
    280e:	59 f4       	brne	.+22     	; 0x2826 <main+0x230e>
    2810:	c2 01       	movw	r24, r4
    2812:	82 19       	sub	r24, r2
    2814:	93 09       	sbc	r25, r3
    2816:	81 5a       	subi	r24, 0xA1	; 161
    2818:	9f 40       	sbci	r25, 0x0F	; 15
    281a:	a4 f0       	brlt	.+40     	; 0x2844 <main+0x232c>
    281c:	12 01       	movw	r2, r4
    281e:	95 e2       	ldi	r25, 0x25	; 37
    2820:	69 2e       	mov	r6, r25
    2822:	71 2c       	mov	r7, r1
    2824:	0f c0       	rjmp	.+30     	; 0x2844 <main+0x232c>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    2826:	44 e0       	ldi	r20, 0x04	; 4
    2828:	64 16       	cp	r6, r20
    282a:	71 04       	cpc	r7, r1
    282c:	59 f4       	brne	.+22     	; 0x2844 <main+0x232c>
    282e:	c2 01       	movw	r24, r4
    2830:	82 19       	sub	r24, r2
    2832:	93 09       	sbc	r25, r3
    2834:	89 5e       	subi	r24, 0xE9	; 233
    2836:	93 40       	sbci	r25, 0x03	; 3
    2838:	a4 f0       	brlt	.+40     	; 0x2862 <main+0x234a>
    283a:	12 01       	movw	r2, r4
    283c:	85 e2       	ldi	r24, 0x25	; 37
    283e:	68 2e       	mov	r6, r24
    2840:	71 2c       	mov	r7, r1
    2842:	0f c0       	rjmp	.+30     	; 0x2862 <main+0x234a>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    2844:	85 e0       	ldi	r24, 0x05	; 5
    2846:	68 16       	cp	r6, r24
    2848:	71 04       	cpc	r7, r1
    284a:	59 f4       	brne	.+22     	; 0x2862 <main+0x234a>
    284c:	c2 01       	movw	r24, r4
    284e:	82 19       	sub	r24, r2
    2850:	93 09       	sbc	r25, r3
    2852:	85 36       	cpi	r24, 0x65	; 101
    2854:	91 05       	cpc	r25, r1
    2856:	a4 f0       	brlt	.+40     	; 0x2880 <main+0x2368>
    2858:	12 01       	movw	r2, r4
    285a:	05 e2       	ldi	r16, 0x25	; 37
    285c:	60 2e       	mov	r6, r16
    285e:	71 2c       	mov	r7, r1
    2860:	0f c0       	rjmp	.+30     	; 0x2880 <main+0x2368>
					state = WAIT;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    2862:	96 e0       	ldi	r25, 0x06	; 6
    2864:	69 16       	cp	r6, r25
    2866:	71 04       	cpc	r7, r1
    2868:	59 f4       	brne	.+22     	; 0x2880 <main+0x2368>
    286a:	c2 01       	movw	r24, r4
    286c:	82 19       	sub	r24, r2
    286e:	93 09       	sbc	r25, r3
    2870:	81 5a       	subi	r24, 0xA1	; 161
    2872:	9f 40       	sbci	r25, 0x0F	; 15
    2874:	a4 f0       	brlt	.+40     	; 0x289e <main+0x2386>
    2876:	12 01       	movw	r2, r4
    2878:	15 e2       	ldi	r17, 0x25	; 37
    287a:	61 2e       	mov	r6, r17
    287c:	71 2c       	mov	r7, r1
    287e:	0f c0       	rjmp	.+30     	; 0x289e <main+0x2386>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    2880:	b7 e0       	ldi	r27, 0x07	; 7
    2882:	6b 16       	cp	r6, r27
    2884:	71 04       	cpc	r7, r1
    2886:	59 f4       	brne	.+22     	; 0x289e <main+0x2386>
    2888:	c2 01       	movw	r24, r4
    288a:	82 19       	sub	r24, r2
    288c:	93 09       	sbc	r25, r3
    288e:	85 36       	cpi	r24, 0x65	; 101
    2890:	91 05       	cpc	r25, r1
    2892:	a4 f0       	brlt	.+40     	; 0x28bc <main+0x23a4>
    2894:	12 01       	movw	r2, r4
    2896:	b5 e2       	ldi	r27, 0x25	; 37
    2898:	6b 2e       	mov	r6, r27
    289a:	71 2c       	mov	r7, r1
    289c:	0f c0       	rjmp	.+30     	; 0x28bc <main+0x23a4>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    289e:	38 e0       	ldi	r19, 0x08	; 8
    28a0:	63 16       	cp	r6, r19
    28a2:	71 04       	cpc	r7, r1
    28a4:	59 f4       	brne	.+22     	; 0x28bc <main+0x23a4>
    28a6:	c2 01       	movw	r24, r4
    28a8:	82 19       	sub	r24, r2
    28aa:	93 09       	sbc	r25, r3
    28ac:	85 36       	cpi	r24, 0x65	; 101
    28ae:	91 05       	cpc	r25, r1
    28b0:	a4 f0       	brlt	.+40     	; 0x28da <main+0x23c2>
    28b2:	12 01       	movw	r2, r4
    28b4:	a5 e2       	ldi	r26, 0x25	; 37
    28b6:	6a 2e       	mov	r6, r26
    28b8:	71 2c       	mov	r7, r1
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <main+0x23c2>
					state = WAIT;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    28bc:	49 e0       	ldi	r20, 0x09	; 9
    28be:	64 16       	cp	r6, r20
    28c0:	71 04       	cpc	r7, r1
    28c2:	59 f4       	brne	.+22     	; 0x28da <main+0x23c2>
    28c4:	c2 01       	movw	r24, r4
    28c6:	82 19       	sub	r24, r2
    28c8:	93 09       	sbc	r25, r3
    28ca:	81 5d       	subi	r24, 0xD1	; 209
    28cc:	97 40       	sbci	r25, 0x07	; 7
    28ce:	9c f0       	brlt	.+38     	; 0x28f6 <main+0x23de>
    28d0:	12 01       	movw	r2, r4
    28d2:	f5 e2       	ldi	r31, 0x25	; 37
    28d4:	6f 2e       	mov	r6, r31
    28d6:	71 2c       	mov	r7, r1
    28d8:	0e c0       	rjmp	.+28     	; 0x28f6 <main+0x23de>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    28da:	8a e0       	ldi	r24, 0x0A	; 10
    28dc:	68 16       	cp	r6, r24
    28de:	71 04       	cpc	r7, r1
    28e0:	51 f4       	brne	.+20     	; 0x28f6 <main+0x23de>
    28e2:	c2 01       	movw	r24, r4
    28e4:	82 19       	sub	r24, r2
    28e6:	93 09       	sbc	r25, r3
    28e8:	85 36       	cpi	r24, 0x65	; 101
    28ea:	91 05       	cpc	r25, r1
    28ec:	9c f0       	brlt	.+38     	; 0x2914 <main+0x23fc>
    28ee:	e5 e2       	ldi	r30, 0x25	; 37
    28f0:	6e 2e       	mov	r6, r30
    28f2:	71 2c       	mov	r7, r1
    28f4:	0f c0       	rjmp	.+30     	; 0x2914 <main+0x23fc>
					state = WAIT;
				}
				if(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    28f6:	9b e0       	ldi	r25, 0x0B	; 11
    28f8:	69 16       	cp	r6, r25
    28fa:	71 04       	cpc	r7, r1
    28fc:	59 f4       	brne	.+22     	; 0x2914 <main+0x23fc>
    28fe:	c2 01       	movw	r24, r4
    2900:	82 19       	sub	r24, r2
    2902:	93 09       	sbc	r25, r3
    2904:	81 5d       	subi	r24, 0xD1	; 209
    2906:	97 40       	sbci	r25, 0x07	; 7
    2908:	a4 f0       	brlt	.+40     	; 0x2932 <main+0x241a>
    290a:	12 01       	movw	r2, r4
    290c:	75 e2       	ldi	r23, 0x25	; 37
    290e:	67 2e       	mov	r6, r23
    2910:	71 2c       	mov	r7, r1
    2912:	0f c0       	rjmp	.+30     	; 0x2932 <main+0x241a>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    2914:	bc e0       	ldi	r27, 0x0C	; 12
    2916:	6b 16       	cp	r6, r27
    2918:	71 04       	cpc	r7, r1
    291a:	59 f4       	brne	.+22     	; 0x2932 <main+0x241a>
    291c:	c2 01       	movw	r24, r4
    291e:	82 19       	sub	r24, r2
    2920:	93 09       	sbc	r25, r3
    2922:	85 36       	cpi	r24, 0x65	; 101
    2924:	91 05       	cpc	r25, r1
    2926:	9c f0       	brlt	.+38     	; 0x294e <main+0x2436>
    2928:	12 01       	movw	r2, r4
    292a:	65 e2       	ldi	r22, 0x25	; 37
    292c:	66 2e       	mov	r6, r22
    292e:	71 2c       	mov	r7, r1
    2930:	0e c0       	rjmp	.+28     	; 0x294e <main+0x2436>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2932:	3d e0       	ldi	r19, 0x0D	; 13
    2934:	63 16       	cp	r6, r19
    2936:	71 04       	cpc	r7, r1
    2938:	51 f4       	brne	.+20     	; 0x294e <main+0x2436>
    293a:	c2 01       	movw	r24, r4
    293c:	82 19       	sub	r24, r2
    293e:	93 09       	sbc	r25, r3
    2940:	81 5d       	subi	r24, 0xD1	; 209
    2942:	97 40       	sbci	r25, 0x07	; 7
    2944:	9c f0       	brlt	.+38     	; 0x296c <main+0x2454>
    2946:	55 e2       	ldi	r21, 0x25	; 37
    2948:	65 2e       	mov	r6, r21
    294a:	71 2c       	mov	r7, r1
    294c:	0f c0       	rjmp	.+30     	; 0x296c <main+0x2454>
					state = WAIT;
					counterRef14 = counter;
				}
				if(state == B1STOP2 && counter - counterRef > totalStepLength2*fixtureMotorBrush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    294e:	5e e0       	ldi	r21, 0x0E	; 14
    2950:	65 16       	cp	r6, r21
    2952:	71 04       	cpc	r7, r1
    2954:	59 f4       	brne	.+22     	; 0x296c <main+0x2454>
    2956:	c2 01       	movw	r24, r4
    2958:	82 19       	sub	r24, r2
    295a:	93 09       	sbc	r25, r3
    295c:	81 5a       	subi	r24, 0xA1	; 161
    295e:	9f 40       	sbci	r25, 0x0F	; 15
    2960:	a4 f0       	brlt	.+40     	; 0x298a <main+0x2472>
    2962:	12 01       	movw	r2, r4
    2964:	45 e2       	ldi	r20, 0x25	; 37
    2966:	64 2e       	mov	r6, r20
    2968:	71 2c       	mov	r7, r1
    296a:	0f c0       	rjmp	.+30     	; 0x298a <main+0x2472>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    296c:	bf e0       	ldi	r27, 0x0F	; 15
    296e:	6b 16       	cp	r6, r27
    2970:	71 04       	cpc	r7, r1
    2972:	59 f4       	brne	.+22     	; 0x298a <main+0x2472>
    2974:	c2 01       	movw	r24, r4
    2976:	82 19       	sub	r24, r2
    2978:	93 09       	sbc	r25, r3
    297a:	85 36       	cpi	r24, 0x65	; 101
    297c:	91 05       	cpc	r25, r1
    297e:	a4 f0       	brlt	.+40     	; 0x29a8 <main+0x2490>
    2980:	12 01       	movw	r2, r4
    2982:	35 e2       	ldi	r19, 0x25	; 37
    2984:	63 2e       	mov	r6, r19
    2986:	71 2c       	mov	r7, r1
    2988:	0f c0       	rjmp	.+30     	; 0x29a8 <main+0x2490>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    298a:	30 e1       	ldi	r19, 0x10	; 16
    298c:	63 16       	cp	r6, r19
    298e:	71 04       	cpc	r7, r1
    2990:	59 f4       	brne	.+22     	; 0x29a8 <main+0x2490>
    2992:	c2 01       	movw	r24, r4
    2994:	82 19       	sub	r24, r2
    2996:	93 09       	sbc	r25, r3
    2998:	85 36       	cpi	r24, 0x65	; 101
    299a:	91 05       	cpc	r25, r1
    299c:	a4 f0       	brlt	.+40     	; 0x29c6 <main+0x24ae>
    299e:	12 01       	movw	r2, r4
    29a0:	95 e2       	ldi	r25, 0x25	; 37
    29a2:	69 2e       	mov	r6, r25
    29a4:	71 2c       	mov	r7, r1
    29a6:	0f c0       	rjmp	.+30     	; 0x29c6 <main+0x24ae>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    29a8:	41 e1       	ldi	r20, 0x11	; 17
    29aa:	64 16       	cp	r6, r20
    29ac:	71 04       	cpc	r7, r1
    29ae:	59 f4       	brne	.+22     	; 0x29c6 <main+0x24ae>
    29b0:	c2 01       	movw	r24, r4
    29b2:	82 19       	sub	r24, r2
    29b4:	93 09       	sbc	r25, r3
    29b6:	81 5d       	subi	r24, 0xD1	; 209
    29b8:	97 40       	sbci	r25, 0x07	; 7
    29ba:	a4 f0       	brlt	.+40     	; 0x29e4 <main+0x24cc>
    29bc:	12 01       	movw	r2, r4
    29be:	85 e2       	ldi	r24, 0x25	; 37
    29c0:	68 2e       	mov	r6, r24
    29c2:	71 2c       	mov	r7, r1
    29c4:	0f c0       	rjmp	.+30     	; 0x29e4 <main+0x24cc>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    29c6:	82 e1       	ldi	r24, 0x12	; 18
    29c8:	68 16       	cp	r6, r24
    29ca:	71 04       	cpc	r7, r1
    29cc:	59 f4       	brne	.+22     	; 0x29e4 <main+0x24cc>
    29ce:	c2 01       	movw	r24, r4
    29d0:	82 19       	sub	r24, r2
    29d2:	93 09       	sbc	r25, r3
    29d4:	85 36       	cpi	r24, 0x65	; 101
    29d6:	91 05       	cpc	r25, r1
    29d8:	a4 f0       	brlt	.+40     	; 0x2a02 <main+0x24ea>
    29da:	12 01       	movw	r2, r4
    29dc:	05 e2       	ldi	r16, 0x25	; 37
    29de:	60 2e       	mov	r6, r16
    29e0:	71 2c       	mov	r7, r1
    29e2:	0f c0       	rjmp	.+30     	; 0x2a02 <main+0x24ea>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    29e4:	93 e1       	ldi	r25, 0x13	; 19
    29e6:	69 16       	cp	r6, r25
    29e8:	71 04       	cpc	r7, r1
    29ea:	59 f4       	brne	.+22     	; 0x2a02 <main+0x24ea>
    29ec:	c2 01       	movw	r24, r4
    29ee:	82 19       	sub	r24, r2
    29f0:	93 09       	sbc	r25, r3
    29f2:	81 5d       	subi	r24, 0xD1	; 209
    29f4:	97 40       	sbci	r25, 0x07	; 7
    29f6:	a4 f0       	brlt	.+40     	; 0x2a20 <main+0x2508>
    29f8:	12 01       	movw	r2, r4
    29fa:	15 e2       	ldi	r17, 0x25	; 37
    29fc:	61 2e       	mov	r6, r17
    29fe:	71 2c       	mov	r7, r1
    2a00:	0f c0       	rjmp	.+30     	; 0x2a20 <main+0x2508>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    2a02:	b4 e1       	ldi	r27, 0x14	; 20
    2a04:	6b 16       	cp	r6, r27
    2a06:	71 04       	cpc	r7, r1
    2a08:	59 f4       	brne	.+22     	; 0x2a20 <main+0x2508>
    2a0a:	c2 01       	movw	r24, r4
    2a0c:	82 19       	sub	r24, r2
    2a0e:	93 09       	sbc	r25, r3
    2a10:	85 36       	cpi	r24, 0x65	; 101
    2a12:	91 05       	cpc	r25, r1
    2a14:	a4 f0       	brlt	.+40     	; 0x2a3e <main+0x2526>
    2a16:	12 01       	movw	r2, r4
    2a18:	b5 e2       	ldi	r27, 0x25	; 37
    2a1a:	6b 2e       	mov	r6, r27
    2a1c:	71 2c       	mov	r7, r1
    2a1e:	0f c0       	rjmp	.+30     	; 0x2a3e <main+0x2526>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2a20:	35 e1       	ldi	r19, 0x15	; 21
    2a22:	63 16       	cp	r6, r19
    2a24:	71 04       	cpc	r7, r1
    2a26:	59 f4       	brne	.+22     	; 0x2a3e <main+0x2526>
    2a28:	c2 01       	movw	r24, r4
    2a2a:	82 19       	sub	r24, r2
    2a2c:	93 09       	sbc	r25, r3
    2a2e:	81 5d       	subi	r24, 0xD1	; 209
    2a30:	97 40       	sbci	r25, 0x07	; 7
    2a32:	a4 f0       	brlt	.+40     	; 0x2a5c <main+0x2544>
    2a34:	12 01       	movw	r2, r4
    2a36:	a5 e2       	ldi	r26, 0x25	; 37
    2a38:	6a 2e       	mov	r6, r26
    2a3a:	71 2c       	mov	r7, r1
    2a3c:	0f c0       	rjmp	.+30     	; 0x2a5c <main+0x2544>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    2a3e:	56 e1       	ldi	r21, 0x16	; 22
    2a40:	65 16       	cp	r6, r21
    2a42:	71 04       	cpc	r7, r1
    2a44:	59 f4       	brne	.+22     	; 0x2a5c <main+0x2544>
    2a46:	c2 01       	movw	r24, r4
    2a48:	82 19       	sub	r24, r2
    2a4a:	93 09       	sbc	r25, r3
    2a4c:	85 36       	cpi	r24, 0x65	; 101
    2a4e:	91 05       	cpc	r25, r1
    2a50:	a4 f0       	brlt	.+40     	; 0x2a7a <main+0x2562>
    2a52:	12 01       	movw	r2, r4
    2a54:	f5 e2       	ldi	r31, 0x25	; 37
    2a56:	6f 2e       	mov	r6, r31
    2a58:	71 2c       	mov	r7, r1
    2a5a:	0f c0       	rjmp	.+30     	; 0x2a7a <main+0x2562>
					state = WAIT;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    2a5c:	87 e1       	ldi	r24, 0x17	; 23
    2a5e:	68 16       	cp	r6, r24
    2a60:	71 04       	cpc	r7, r1
    2a62:	59 f4       	brne	.+22     	; 0x2a7a <main+0x2562>
    2a64:	c2 01       	movw	r24, r4
    2a66:	82 19       	sub	r24, r2
    2a68:	93 09       	sbc	r25, r3
    2a6a:	81 5a       	subi	r24, 0xA1	; 161
    2a6c:	9f 40       	sbci	r25, 0x0F	; 15
    2a6e:	a4 f0       	brlt	.+40     	; 0x2a98 <main+0x2580>
    2a70:	12 01       	movw	r2, r4
    2a72:	e5 e2       	ldi	r30, 0x25	; 37
    2a74:	6e 2e       	mov	r6, r30
    2a76:	71 2c       	mov	r7, r1
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <main+0x2580>
					state = WAIT;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    2a7a:	b8 e1       	ldi	r27, 0x18	; 24
    2a7c:	6b 16       	cp	r6, r27
    2a7e:	71 04       	cpc	r7, r1
    2a80:	59 f4       	brne	.+22     	; 0x2a98 <main+0x2580>
    2a82:	c2 01       	movw	r24, r4
    2a84:	82 19       	sub	r24, r2
    2a86:	93 09       	sbc	r25, r3
    2a88:	85 36       	cpi	r24, 0x65	; 101
    2a8a:	91 05       	cpc	r25, r1
    2a8c:	9c f0       	brlt	.+38     	; 0x2ab4 <main+0x259c>
    2a8e:	12 01       	movw	r2, r4
    2a90:	75 e2       	ldi	r23, 0x25	; 37
    2a92:	67 2e       	mov	r6, r23
    2a94:	71 2c       	mov	r7, r1
    2a96:	0e c0       	rjmp	.+28     	; 0x2ab4 <main+0x259c>
					state = WAIT;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2a98:	39 e1       	ldi	r19, 0x19	; 25
    2a9a:	63 16       	cp	r6, r19
    2a9c:	71 04       	cpc	r7, r1
    2a9e:	51 f4       	brne	.+20     	; 0x2ab4 <main+0x259c>
    2aa0:	c2 01       	movw	r24, r4
    2aa2:	82 19       	sub	r24, r2
    2aa4:	93 09       	sbc	r25, r3
    2aa6:	81 5a       	subi	r24, 0xA1	; 161
    2aa8:	9f 40       	sbci	r25, 0x0F	; 15
    2aaa:	a4 f0       	brlt	.+40     	; 0x2ad4 <main+0x25bc>
    2aac:	65 e2       	ldi	r22, 0x25	; 37
    2aae:	66 2e       	mov	r6, r22
    2ab0:	71 2c       	mov	r7, r1
    2ab2:	10 c0       	rjmp	.+32     	; 0x2ad4 <main+0x25bc>
					state = WAIT;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    2ab4:	5a e1       	ldi	r21, 0x1A	; 26
    2ab6:	65 16       	cp	r6, r21
    2ab8:	71 04       	cpc	r7, r1
    2aba:	61 f4       	brne	.+24     	; 0x2ad4 <main+0x25bc>
    2abc:	c2 01       	movw	r24, r4
    2abe:	82 19       	sub	r24, r2
    2ac0:	93 09       	sbc	r25, r3
    2ac2:	81 5a       	subi	r24, 0xA1	; 161
    2ac4:	9f 40       	sbci	r25, 0x0F	; 15
    2ac6:	bc f0       	brlt	.+46     	; 0x2af6 <main+0x25de>
    2ac8:	5e 82       	std	Y+6, r5	; 0x06
    2aca:	4d 82       	std	Y+5, r4	; 0x05
    2acc:	55 e2       	ldi	r21, 0x25	; 37
    2ace:	65 2e       	mov	r6, r21
    2ad0:	71 2c       	mov	r7, r1
    2ad2:	11 c0       	rjmp	.+34     	; 0x2af6 <main+0x25de>
					state = WAIT;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    2ad4:	bb e1       	ldi	r27, 0x1B	; 27
    2ad6:	6b 16       	cp	r6, r27
    2ad8:	71 04       	cpc	r7, r1
    2ada:	69 f4       	brne	.+26     	; 0x2af6 <main+0x25de>
    2adc:	c2 01       	movw	r24, r4
    2ade:	4d 81       	ldd	r20, Y+5	; 0x05
    2ae0:	5e 81       	ldd	r21, Y+6	; 0x06
    2ae2:	84 1b       	sub	r24, r20
    2ae4:	95 0b       	sbc	r25, r21
    2ae6:	85 36       	cpi	r24, 0x65	; 101
    2ae8:	91 05       	cpc	r25, r1
    2aea:	a4 f0       	brlt	.+40     	; 0x2b14 <main+0x25fc>
    2aec:	12 01       	movw	r2, r4
    2aee:	45 e2       	ldi	r20, 0x25	; 37
    2af0:	64 2e       	mov	r6, r20
    2af2:	71 2c       	mov	r7, r1
    2af4:	0f c0       	rjmp	.+30     	; 0x2b14 <main+0x25fc>
					state = WAIT;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    2af6:	5c e1       	ldi	r21, 0x1C	; 28
    2af8:	65 16       	cp	r6, r21
    2afa:	71 04       	cpc	r7, r1
    2afc:	59 f4       	brne	.+22     	; 0x2b14 <main+0x25fc>
    2afe:	c2 01       	movw	r24, r4
    2b00:	82 19       	sub	r24, r2
    2b02:	93 09       	sbc	r25, r3
    2b04:	85 36       	cpi	r24, 0x65	; 101
    2b06:	91 05       	cpc	r25, r1
    2b08:	9c f0       	brlt	.+38     	; 0x2b30 <main+0x2618>
    2b0a:	12 01       	movw	r2, r4
    2b0c:	35 e2       	ldi	r19, 0x25	; 37
    2b0e:	63 2e       	mov	r6, r19
    2b10:	71 2c       	mov	r7, r1
    2b12:	0e c0       	rjmp	.+28     	; 0x2b30 <main+0x2618>
					state = WAIT;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2b14:	8d e1       	ldi	r24, 0x1D	; 29
    2b16:	68 16       	cp	r6, r24
    2b18:	71 04       	cpc	r7, r1
    2b1a:	51 f4       	brne	.+20     	; 0x2b30 <main+0x2618>
    2b1c:	c2 01       	movw	r24, r4
    2b1e:	82 19       	sub	r24, r2
    2b20:	93 09       	sbc	r25, r3
    2b22:	81 5a       	subi	r24, 0xA1	; 161
    2b24:	9f 40       	sbci	r25, 0x0F	; 15
    2b26:	9c f0       	brlt	.+38     	; 0x2b4e <main+0x2636>
    2b28:	95 e2       	ldi	r25, 0x25	; 37
    2b2a:	69 2e       	mov	r6, r25
    2b2c:	71 2c       	mov	r7, r1
    2b2e:	0f c0       	rjmp	.+30     	; 0x2b4e <main+0x2636>
					state = WAIT;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totalStepLength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    2b30:	be e1       	ldi	r27, 0x1E	; 30
    2b32:	6b 16       	cp	r6, r27
    2b34:	71 04       	cpc	r7, r1
    2b36:	59 f4       	brne	.+22     	; 0x2b4e <main+0x2636>
    2b38:	c2 01       	movw	r24, r4
    2b3a:	82 19       	sub	r24, r2
    2b3c:	93 09       	sbc	r25, r3
    2b3e:	81 5a       	subi	r24, 0xA1	; 161
    2b40:	9f 40       	sbci	r25, 0x0F	; 15
    2b42:	a4 f0       	brlt	.+40     	; 0x2b6c <main+0x2654>
    2b44:	12 01       	movw	r2, r4
    2b46:	85 e2       	ldi	r24, 0x25	; 37
    2b48:	68 2e       	mov	r6, r24
    2b4a:	71 2c       	mov	r7, r1
    2b4c:	0f c0       	rjmp	.+30     	; 0x2b6c <main+0x2654>
					state = WAIT;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    2b4e:	4f e1       	ldi	r20, 0x1F	; 31
    2b50:	64 16       	cp	r6, r20
    2b52:	71 04       	cpc	r7, r1
    2b54:	59 f4       	brne	.+22     	; 0x2b6c <main+0x2654>
    2b56:	c2 01       	movw	r24, r4
    2b58:	82 19       	sub	r24, r2
    2b5a:	93 09       	sbc	r25, r3
    2b5c:	89 5e       	subi	r24, 0xE9	; 233
    2b5e:	93 40       	sbci	r25, 0x03	; 3
    2b60:	a4 f0       	brlt	.+40     	; 0x2b8a <main+0x2672>
    2b62:	12 01       	movw	r2, r4
    2b64:	05 e2       	ldi	r16, 0x25	; 37
    2b66:	60 2e       	mov	r6, r16
    2b68:	71 2c       	mov	r7, r1
    2b6a:	0f c0       	rjmp	.+30     	; 0x2b8a <main+0x2672>
					state = WAIT;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    2b6c:	80 e2       	ldi	r24, 0x20	; 32
    2b6e:	68 16       	cp	r6, r24
    2b70:	71 04       	cpc	r7, r1
    2b72:	59 f4       	brne	.+22     	; 0x2b8a <main+0x2672>
    2b74:	c2 01       	movw	r24, r4
    2b76:	82 19       	sub	r24, r2
    2b78:	93 09       	sbc	r25, r3
    2b7a:	81 5a       	subi	r24, 0xA1	; 161
    2b7c:	9f 40       	sbci	r25, 0x0F	; 15
    2b7e:	a4 f0       	brlt	.+40     	; 0x2ba8 <main+0x2690>
    2b80:	12 01       	movw	r2, r4
    2b82:	15 e2       	ldi	r17, 0x25	; 37
    2b84:	61 2e       	mov	r6, r17
    2b86:	71 2c       	mov	r7, r1
    2b88:	0f c0       	rjmp	.+30     	; 0x2ba8 <main+0x2690>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    2b8a:	b1 e2       	ldi	r27, 0x21	; 33
    2b8c:	6b 16       	cp	r6, r27
    2b8e:	71 04       	cpc	r7, r1
    2b90:	59 f4       	brne	.+22     	; 0x2ba8 <main+0x2690>
    2b92:	c2 01       	movw	r24, r4
    2b94:	82 19       	sub	r24, r2
    2b96:	93 09       	sbc	r25, r3
    2b98:	85 36       	cpi	r24, 0x65	; 101
    2b9a:	91 05       	cpc	r25, r1
    2b9c:	a4 f0       	brlt	.+40     	; 0x2bc6 <main+0x26ae>
    2b9e:	12 01       	movw	r2, r4
    2ba0:	b5 e2       	ldi	r27, 0x25	; 37
    2ba2:	6b 2e       	mov	r6, r27
    2ba4:	71 2c       	mov	r7, r1
    2ba6:	0f c0       	rjmp	.+30     	; 0x2bc6 <main+0x26ae>
					state = WAIT;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    2ba8:	32 e2       	ldi	r19, 0x22	; 34
    2baa:	63 16       	cp	r6, r19
    2bac:	71 04       	cpc	r7, r1
    2bae:	59 f4       	brne	.+22     	; 0x2bc6 <main+0x26ae>
    2bb0:	c2 01       	movw	r24, r4
    2bb2:	82 19       	sub	r24, r2
    2bb4:	93 09       	sbc	r25, r3
    2bb6:	81 5a       	subi	r24, 0xA1	; 161
    2bb8:	9f 40       	sbci	r25, 0x0F	; 15
    2bba:	94 f0       	brlt	.+36     	; 0x2be0 <main+0x26c8>
    2bbc:	12 01       	movw	r2, r4
    2bbe:	a5 e2       	ldi	r26, 0x25	; 37
    2bc0:	6a 2e       	mov	r6, r26
    2bc2:	71 2c       	mov	r7, r1
    2bc4:	0d c0       	rjmp	.+26     	; 0x2be0 <main+0x26c8>
					state = WAIT;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    2bc6:	53 e2       	ldi	r21, 0x23	; 35
    2bc8:	65 16       	cp	r6, r21
    2bca:	71 04       	cpc	r7, r1
    2bcc:	49 f4       	brne	.+18     	; 0x2be0 <main+0x26c8>
    2bce:	c2 01       	movw	r24, r4
    2bd0:	82 19       	sub	r24, r2
    2bd2:	93 09       	sbc	r25, r3
    2bd4:	0b 97       	sbiw	r24, 0x0b	; 11
    2bd6:	ac f0       	brlt	.+42     	; 0x2c02 <main+0x26ea>
    2bd8:	f4 e2       	ldi	r31, 0x24	; 36
    2bda:	6f 2e       	mov	r6, r31
    2bdc:	71 2c       	mov	r7, r1
    2bde:	11 c0       	rjmp	.+34     	; 0x2c02 <main+0x26ea>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    2be0:	85 e2       	ldi	r24, 0x25	; 37
    2be2:	68 16       	cp	r6, r24
    2be4:	71 04       	cpc	r7, r1
    2be6:	69 f4       	brne	.+26     	; 0x2c02 <main+0x26ea>
    2be8:	22 23       	and	r18, r18
    2bea:	09 f4       	brne	.+2      	; 0x2bee <main+0x26d6>
    2bec:	7f c1       	rjmp	.+766    	; 0x2eec <main+0x29d4>
					state = ++last;
    2bee:	25 96       	adiw	r28, 0x05	; 5
    2bf0:	ae ad       	ldd	r26, Y+62	; 0x3e
    2bf2:	bf ad       	ldd	r27, Y+63	; 0x3f
    2bf4:	25 97       	sbiw	r28, 0x05	; 5
    2bf6:	11 96       	adiw	r26, 0x01	; 1
    2bf8:	25 96       	adiw	r28, 0x05	; 5
    2bfa:	bf af       	std	Y+63, r27	; 0x3f
    2bfc:	ae af       	std	Y+62, r26	; 0x3e
    2bfe:	25 97       	sbiw	r28, 0x05	; 5
    2c00:	3d 01       	movw	r6, r26
				}


				//state actions
						
			switch (state){
    2c02:	f3 01       	movw	r30, r6
    2c04:	e4 32       	cpi	r30, 0x24	; 36
    2c06:	f1 05       	cpc	r31, r1
    2c08:	08 f0       	brcs	.+2      	; 0x2c0c <main+0x26f4>
    2c0a:	70 c1       	rjmp	.+736    	; 0x2eec <main+0x29d4>
    2c0c:	e4 52       	subi	r30, 0x24	; 36
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	ee 0f       	add	r30, r30
    2c12:	ff 1f       	adc	r31, r31
    2c14:	05 90       	lpm	r0, Z+
    2c16:	f4 91       	lpm	r31, Z+
    2c18:	e0 2d       	mov	r30, r0
    2c1a:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    2c1c:	80 91 5a 03 	lds	r24, 0x035A
    2c20:	20 91 56 03 	lds	r18, 0x0356
    2c24:	90 91 58 03 	lds	r25, 0x0358
    2c28:	82 ff       	sbrs	r24, 2
    2c2a:	07 c0       	rjmp	.+14     	; 0x2c3a <main+0x2722>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    2c2c:	2f 7e       	andi	r18, 0xEF	; 239
    2c2e:	20 93 56 03 	sts	0x0356, r18
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2c32:	97 7f       	andi	r25, 0xF7	; 247
    2c34:	90 93 58 03 	sts	0x0358, r25
    2c38:	ee c0       	rjmp	.+476    	; 0x2e16 <main+0x28fe>
						fixtureMotor = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    2c3a:	2f 7d       	andi	r18, 0xDF	; 223
    2c3c:	20 93 56 03 	sts	0x0356, r18
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2c40:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2c42:	98 60       	ori	r25, 0x08	; 8
    2c44:	90 93 58 03 	sts	0x0358, r25
						if(print0 == 1){
    2c48:	4f a5       	ldd	r20, Y+47	; 0x2f
    2c4a:	58 a9       	ldd	r21, Y+48	; 0x30
    2c4c:	41 30       	cpi	r20, 0x01	; 1
    2c4e:	51 05       	cpc	r21, r1
    2c50:	09 f0       	breq	.+2      	; 0x2c54 <main+0x273c>
    2c52:	26 c1       	rjmp	.+588    	; 0x2ea0 <main+0x2988>
							OrangutanLCD::gotoXY(0,1);
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	61 e0       	ldi	r22, 0x01	; 1
    2c58:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    2c5c:	88 e1       	ldi	r24, 0x18	; 24
    2c5e:	93 e0       	ldi	r25, 0x03	; 3
    2c60:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    2c64:	18 aa       	std	Y+48, r1	; 0x30
    2c66:	1f a6       	std	Y+47, r1	; 0x2f
    2c68:	1b c1       	rjmp	.+566    	; 0x2ea0 <main+0x2988>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    2c6a:	20 91 58 03 	lds	r18, 0x0358
    2c6e:	32 2f       	mov	r19, r18
    2c70:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    2c72:	c2 01       	movw	r24, r4
    2c74:	68 ec       	ldi	r22, 0xC8	; 200
    2c76:	70 e0       	ldi	r23, 0x00	; 0
    2c78:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__divmodhi4>
    2c7c:	84 36       	cpi	r24, 0x64	; 100
    2c7e:	91 05       	cpc	r25, r1
    2c80:	24 f4       	brge	.+8      	; 0x2c8a <main+0x2772>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    2c82:	2c 7f       	andi	r18, 0xFC	; 252
    2c84:	20 93 58 03 	sts	0x0358, r18
    2c88:	03 c0       	rjmp	.+6      	; 0x2c90 <main+0x2778>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2c8a:	32 60       	ori	r19, 0x02	; 2
    2c8c:	30 93 58 03 	sts	0x0358, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
    2c90:	80 91 56 03 	lds	r24, 0x0356
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    2c94:	86 60       	ori	r24, 0x06	; 6
    2c96:	80 93 56 03 	sts	0x0356, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    2c9a:	80 91 58 03 	lds	r24, 0x0358
    2c9e:	8b 7f       	andi	r24, 0xFB	; 251
    2ca0:	80 93 58 03 	sts	0x0358, r24
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	9a a3       	std	Y+34, r25	; 0x22
    2caa:	89 a3       	std	Y+33, r24	; 0x21
    2cac:	1f c1       	rjmp	.+574    	; 0x2eec <main+0x29d4>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2cae:	80 91 58 03 	lds	r24, 0x0358
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2cb2:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    2cb4:	86 61       	ori	r24, 0x16	; 22
    2cb6:	80 93 58 03 	sts	0x0358, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    2cba:	80 91 56 03 	lds	r24, 0x0356
    2cbe:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    2cc0:	8b 7f       	andi	r24, 0xFB	; 251
    2cc2:	80 93 56 03 	sts	0x0356, r24
    2cc6:	0b c1       	rjmp	.+534    	; 0x2ede <main+0x29c6>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    2cc8:	80 91 56 03 	lds	r24, 0x0356
    2ccc:	8f 7d       	andi	r24, 0xDF	; 223
    2cce:	80 93 56 03 	sts	0x0356, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2cd2:	80 91 58 03 	lds	r24, 0x0358
    2cd6:	88 60       	ori	r24, 0x08	; 8
    2cd8:	e1 c0       	rjmp	.+450    	; 0x2e9c <main+0x2984>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2cda:	80 91 58 03 	lds	r24, 0x0358
    2cde:	8f 7e       	andi	r24, 0xEF	; 239
    2ce0:	80 93 58 03 	sts	0x0358, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    2ce4:	80 91 56 03 	lds	r24, 0x0356
    2ce8:	80 62       	ori	r24, 0x20	; 32
    2cea:	80 93 56 03 	sts	0x0356, r24
    2cee:	fe c0       	rjmp	.+508    	; 0x2eec <main+0x29d4>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2cf0:	80 91 56 03 	lds	r24, 0x0356
    2cf4:	80 61       	ori	r24, 0x10	; 16
    2cf6:	8d c0       	rjmp	.+282    	; 0x2e12 <main+0x28fa>
					fixtureMotor = 1;
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
    2cf8:	80 91 57 03 	lds	r24, 0x0357
    2cfc:	81 60       	ori	r24, 0x01	; 1
    2cfe:	80 93 57 03 	sts	0x0357, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2d02:	80 91 56 03 	lds	r24, 0x0356
    2d06:	8f 77       	andi	r24, 0x7F	; 127
    2d08:	80 93 56 03 	sts	0x0356, r24
    2d0c:	c9 c0       	rjmp	.+402    	; 0x2ea0 <main+0x2988>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2d0e:	80 91 58 03 	lds	r24, 0x0358
    2d12:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2d14:	8f 7d       	andi	r24, 0xDF	; 223
    2d16:	80 93 58 03 	sts	0x0358, r24
    2d1a:	41 e0       	ldi	r20, 0x01	; 1
    2d1c:	50 e0       	ldi	r21, 0x00	; 0
    2d1e:	5a 87       	std	Y+10, r21	; 0x0a
    2d20:	49 87       	std	Y+9, r20	; 0x09
    2d22:	e4 c0       	rjmp	.+456    	; 0x2eec <main+0x29d4>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2d24:	80 91 56 03 	lds	r24, 0x0356
    2d28:	80 61       	ori	r24, 0x10	; 16
    2d2a:	80 93 56 03 	sts	0x0356, r24
    2d2e:	a1 e0       	ldi	r26, 0x01	; 1
    2d30:	b0 e0       	ldi	r27, 0x00	; 0
    2d32:	ba 8f       	std	Y+26, r27	; 0x1a
    2d34:	a9 8f       	std	Y+25, r26	; 0x19
    2d36:	da c0       	rjmp	.+436    	; 0x2eec <main+0x29d4>
					fixtureMotor = 1;
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2d38:	80 91 56 03 	lds	r24, 0x0356
    2d3c:	8f 77       	andi	r24, 0x7F	; 127
    2d3e:	80 93 56 03 	sts	0x0356, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2d42:	80 91 58 03 	lds	r24, 0x0358
    2d46:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2d48:	8f 7d       	andi	r24, 0xDF	; 223
    2d4a:	80 93 58 03 	sts	0x0358, r24
    2d4e:	1a 8e       	std	Y+26, r1	; 0x1a
    2d50:	19 8e       	std	Y+25, r1	; 0x19
    2d52:	21 e0       	ldi	r18, 0x01	; 1
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	3a 87       	std	Y+10, r19	; 0x0a
    2d58:	29 87       	std	Y+9, r18	; 0x09
    2d5a:	c8 c0       	rjmp	.+400    	; 0x2eec <main+0x29d4>
					fixtureMotor = 1;
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2d5c:	80 91 58 03 	lds	r24, 0x0358
    2d60:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2d62:	80 62       	ori	r24, 0x20	; 32
    2d64:	80 93 58 03 	sts	0x0358, r24
    2d68:	1a 8e       	std	Y+26, r1	; 0x1a
    2d6a:	19 8e       	std	Y+25, r1	; 0x19
    2d6c:	1a 86       	std	Y+10, r1	; 0x0a
    2d6e:	19 86       	std	Y+9, r1	; 0x09
    2d70:	bd c0       	rjmp	.+378    	; 0x2eec <main+0x29d4>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
    2d72:	80 91 57 03 	lds	r24, 0x0357
    2d76:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2d78:	8b 7f       	andi	r24, 0xFB	; 251
    2d7a:	80 93 57 03 	sts	0x0357, r24
    2d7e:	90 c0       	rjmp	.+288    	; 0x2ea0 <main+0x2988>
						print15 = 0;
					}*/
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2d80:	80 91 59 03 	lds	r24, 0x0359
    2d84:	81 60       	ori	r24, 0x01	; 1
    2d86:	80 93 59 03 	sts	0x0359, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2d8a:	80 91 58 03 	lds	r24, 0x0358
    2d8e:	8f 77       	andi	r24, 0x7F	; 127
    2d90:	80 93 58 03 	sts	0x0358, r24
    2d94:	41 e0       	ldi	r20, 0x01	; 1
    2d96:	50 e0       	ldi	r21, 0x00	; 0
    2d98:	5a a7       	std	Y+42, r21	; 0x2a
    2d9a:	49 a7       	std	Y+41, r20	; 0x29
    2d9c:	a7 c0       	rjmp	.+334    	; 0x2eec <main+0x29d4>
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2d9e:	80 91 59 03 	lds	r24, 0x0359
    2da2:	8e 7f       	andi	r24, 0xFE	; 254
    2da4:	80 93 59 03 	sts	0x0359, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2da8:	80 91 58 03 	lds	r24, 0x0358
    2dac:	80 68       	ori	r24, 0x80	; 128
    2dae:	80 93 58 03 	sts	0x0358, r24
    2db2:	23 c0       	rjmp	.+70     	; 0x2dfa <main+0x28e2>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1;
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2db4:	80 91 57 03 	lds	r24, 0x0357
    2db8:	8b 7f       	andi	r24, 0xFB	; 251
    2dba:	80 93 57 03 	sts	0x0357, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2dbe:	80 91 59 03 	lds	r24, 0x0359
    2dc2:	81 60       	ori	r24, 0x01	; 1
    2dc4:	80 93 59 03 	sts	0x0359, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2dc8:	80 91 58 03 	lds	r24, 0x0358
    2dcc:	8f 77       	andi	r24, 0x7F	; 127
    2dce:	80 93 58 03 	sts	0x0358, r24
    2dd2:	a1 e0       	ldi	r26, 0x01	; 1
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	ba a7       	std	Y+42, r27	; 0x2a
    2dd8:	a9 a7       	std	Y+41, r26	; 0x29
    2dda:	62 c0       	rjmp	.+196    	; 0x2ea0 <main+0x2988>
					fixtureMotor = 1;
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2ddc:	80 91 59 03 	lds	r24, 0x0359
    2de0:	8e 7f       	andi	r24, 0xFE	; 254
    2de2:	80 93 59 03 	sts	0x0359, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2de6:	80 91 58 03 	lds	r24, 0x0358
    2dea:	80 68       	ori	r24, 0x80	; 128
    2dec:	80 93 58 03 	sts	0x0358, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
    2df0:	80 91 57 03 	lds	r24, 0x0357
    2df4:	87 7f       	andi	r24, 0xF7	; 247
    2df6:	80 93 57 03 	sts	0x0357, r24
    2dfa:	1a a6       	std	Y+42, r1	; 0x2a
    2dfc:	19 a6       	std	Y+41, r1	; 0x29
    2dfe:	50 c0       	rjmp	.+160    	; 0x2ea0 <main+0x2988>
					fixtureMotor = 1;
					//u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2e00:	80 91 59 03 	lds	r24, 0x0359
    2e04:	87 7f       	andi	r24, 0xF7	; 247
    2e06:	80 93 59 03 	sts	0x0359, r24
    2e0a:	4a c0       	rjmp	.+148    	; 0x2ea0 <main+0x2988>
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2e0c:	80 91 56 03 	lds	r24, 0x0356
    2e10:	8f 7e       	andi	r24, 0xEF	; 239
    2e12:	80 93 56 03 	sts	0x0356, r24
    2e16:	21 e0       	ldi	r18, 0x01	; 1
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	3a 8f       	std	Y+26, r19	; 0x1a
    2e1c:	29 8f       	std	Y+25, r18	; 0x19
    2e1e:	66 c0       	rjmp	.+204    	; 0x2eec <main+0x29d4>
					fixtureMotor = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    2e20:	80 91 59 03 	lds	r24, 0x0359
    2e24:	88 60       	ori	r24, 0x08	; 8
    2e26:	10 c0       	rjmp	.+32     	; 0x2e48 <main+0x2930>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
    2e28:	80 91 57 03 	lds	r24, 0x0357
    2e2c:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    2e2e:	8f 7d       	andi	r24, 0xDF	; 223
    2e30:	80 93 57 03 	sts	0x0357, r24
    2e34:	1a 8e       	std	Y+26, r1	; 0x1a
    2e36:	19 8e       	std	Y+25, r1	; 0x19
    2e38:	41 e0       	ldi	r20, 0x01	; 1
    2e3a:	50 e0       	ldi	r21, 0x00	; 0
    2e3c:	5a 8b       	std	Y+18, r21	; 0x12
    2e3e:	49 8b       	std	Y+17, r20	; 0x11
    2e40:	55 c0       	rjmp	.+170    	; 0x2eec <main+0x29d4>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    2e42:	80 91 59 03 	lds	r24, 0x0359
    2e46:	8d 7f       	andi	r24, 0xFD	; 253
    2e48:	80 93 59 03 	sts	0x0359, r24
    2e4c:	4f c0       	rjmp	.+158    	; 0x2eec <main+0x29d4>
				case DRY2:
					fixtureMotor = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    2e4e:	80 91 57 03 	lds	r24, 0x0357
    2e52:	8f 7b       	andi	r24, 0xBF	; 191
    2e54:	80 93 57 03 	sts	0x0357, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    2e58:	80 91 59 03 	lds	r24, 0x0359
    2e5c:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    2e5e:	8b 7f       	andi	r24, 0xFB	; 251
    2e60:	80 93 59 03 	sts	0x0359, r24
    2e64:	1a 8a       	std	Y+18, r1	; 0x12
    2e66:	19 8a       	std	Y+17, r1	; 0x11
    2e68:	41 c0       	rjmp	.+130    	; 0x2eec <main+0x29d4>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2e6a:	80 91 58 03 	lds	r24, 0x0358
    2e6e:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    2e70:	80 61       	ori	r24, 0x10	; 16
    2e72:	14 c0       	rjmp	.+40     	; 0x2e9c <main+0x2984>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    2e74:	80 91 56 03 	lds	r24, 0x0356
    2e78:	8f 7e       	andi	r24, 0xEF	; 239
    2e7a:	80 93 56 03 	sts	0x0356, r24
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	9a 8f       	std	Y+26, r25	; 0x1a
    2e84:	89 8f       	std	Y+25, r24	; 0x19
    2e86:	32 c0       	rjmp	.+100    	; 0x2eec <main+0x29d4>
					fixtureMotor = 1;
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    2e88:	80 91 56 03 	lds	r24, 0x0356
    2e8c:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    2e8e:	84 60       	ori	r24, 0x04	; 4
    2e90:	80 93 56 03 	sts	0x0356, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2e94:	80 91 58 03 	lds	r24, 0x0358
    2e98:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2e9a:	8f 7e       	andi	r24, 0xEF	; 239
    2e9c:	80 93 58 03 	sts	0x0358, r24
    2ea0:	1a 8e       	std	Y+26, r1	; 0x1a
    2ea2:	19 8e       	std	Y+25, r1	; 0x19
    2ea4:	23 c0       	rjmp	.+70     	; 0x2eec <main+0x29d4>
					break;
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    2ea6:	80 91 56 03 	lds	r24, 0x0356
    2eaa:	8d 7f       	andi	r24, 0xFD	; 253
    2eac:	80 93 56 03 	sts	0x0356, r24
    2eb0:	a1 e0       	ldi	r26, 0x01	; 1
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	ba a3       	std	Y+34, r27	; 0x22
    2eb6:	a9 a3       	std	Y+33, r26	; 0x21
    2eb8:	19 c0       	rjmp	.+50     	; 0x2eec <main+0x29d4>
					plateLoadMotor = 1;
					break;
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    2eba:	80 91 56 03 	lds	r24, 0x0356
    2ebe:	8b 7f       	andi	r24, 0xFB	; 251
    2ec0:	80 93 56 03 	sts	0x0356, r24
					if(print35 == 1){
    2ec4:	2d a9       	ldd	r18, Y+53	; 0x35
    2ec6:	3e a9       	ldd	r19, Y+54	; 0x36
    2ec8:	21 30       	cpi	r18, 0x01	; 1
    2eca:	31 05       	cpc	r19, r1
    2ecc:	41 f4       	brne	.+16     	; 0x2ede <main+0x29c6>
						OrangutanLCD::clear();
    2ece:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    2ed2:	86 e2       	ldi	r24, 0x26	; 38
    2ed4:	93 e0       	ldi	r25, 0x03	; 3
    2ed6:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    2eda:	1e aa       	std	Y+54, r1	; 0x36
    2edc:	1d aa       	std	Y+53, r1	; 0x35
    2ede:	1a a2       	std	Y+34, r1	; 0x22
    2ee0:	19 a2       	std	Y+33, r1	; 0x21
    2ee2:	04 c0       	rjmp	.+8      	; 0x2eec <main+0x29d4>
    2ee4:	41 e0       	ldi	r20, 0x01	; 1
    2ee6:	50 e0       	ldi	r21, 0x00	; 0
    2ee8:	5a 8f       	std	Y+26, r21	; 0x1a
    2eea:	49 8f       	std	Y+25, r20	; 0x19
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    2eec:	8d b7       	in	r24, 0x3d	; 61
    2eee:	9e b7       	in	r25, 0x3e	; 62
    2ef0:	42 97       	sbiw	r24, 0x12	; 18
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	9e bf       	out	0x3e, r25	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	8d bf       	out	0x3d, r24	; 61
    2efc:	ed b7       	in	r30, 0x3d	; 61
    2efe:	fe b7       	in	r31, 0x3e	; 62
    2f00:	31 96       	adiw	r30, 0x01	; 1
    2f02:	22 e0       	ldi	r18, 0x02	; 2
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	ad b7       	in	r26, 0x3d	; 61
    2f08:	be b7       	in	r27, 0x3e	; 62
    2f0a:	12 96       	adiw	r26, 0x02	; 2
    2f0c:	3c 93       	st	X, r19
    2f0e:	2e 93       	st	-X, r18
    2f10:	11 97       	sbiw	r26, 0x01	; 1
    2f12:	33 83       	std	Z+3, r19	; 0x03
    2f14:	22 83       	std	Z+2, r18	; 0x02
    2f16:	35 83       	std	Z+5, r19	; 0x05
    2f18:	24 83       	std	Z+4, r18	; 0x04
    2f1a:	37 83       	std	Z+7, r19	; 0x07
    2f1c:	26 83       	std	Z+6, r18	; 0x06
    2f1e:	41 e0       	ldi	r20, 0x01	; 1
    2f20:	50 e0       	ldi	r21, 0x00	; 0
    2f22:	51 87       	std	Z+9, r21	; 0x09
    2f24:	40 87       	std	Z+8, r20	; 0x08
    2f26:	53 87       	std	Z+11, r21	; 0x0b
    2f28:	42 87       	std	Z+10, r20	; 0x0a
    2f2a:	55 87       	std	Z+13, r21	; 0x0d
    2f2c:	44 87       	std	Z+12, r20	; 0x0c
    2f2e:	57 87       	std	Z+15, r21	; 0x0f
    2f30:	46 87       	std	Z+14, r20	; 0x0e
    2f32:	51 8b       	std	Z+17, r21	; 0x11
    2f34:	40 8b       	std	Z+16, r20	; 0x10
    2f36:	c2 01       	movw	r24, r4
    2f38:	b1 01       	movw	r22, r2
    2f3a:	4d 81       	ldd	r20, Y+5	; 0x05
    2f3c:	5e 81       	ldd	r21, Y+6	; 0x06
    2f3e:	29 a1       	ldd	r18, Y+33	; 0x21
    2f40:	3a a1       	ldd	r19, Y+34	; 0x22
    2f42:	09 8d       	ldd	r16, Y+25	; 0x19
    2f44:	1a 8d       	ldd	r17, Y+26	; 0x1a
    2f46:	e9 84       	ldd	r14, Y+9	; 0x09
    2f48:	fa 84       	ldd	r15, Y+10	; 0x0a
    2f4a:	c9 a4       	ldd	r12, Y+41	; 0x29
    2f4c:	da a4       	ldd	r13, Y+42	; 0x2a
    2f4e:	a9 88       	ldd	r10, Y+17	; 0x11
    2f50:	ba 88       	ldd	r11, Y+18	; 0x12
    2f52:	e2 e0       	ldi	r30, 0x02	; 2
    2f54:	8e 2e       	mov	r8, r30
    2f56:	91 2c       	mov	r9, r1
    2f58:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    2f5c:	8d b7       	in	r24, 0x3d	; 61
    2f5e:	9e b7       	in	r25, 0x3e	; 62
    2f60:	42 96       	adiw	r24, 0x12	; 18
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	f8 94       	cli
    2f66:	9e bf       	out	0x3e, r25	; 62
    2f68:	0f be       	out	0x3f, r0	; 63
    2f6a:	8d bf       	out	0x3d, r24	; 61
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("DEBUG");
			while(state != DONER)
    2f74:	94 e2       	ldi	r25, 0x24	; 36
    2f76:	69 16       	cp	r6, r25
    2f78:	71 04       	cpc	r7, r1
    2f7a:	21 f0       	breq	.+8      	; 0x2f84 <main+0x2a6c>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    2f7c:	08 94       	sec
    2f7e:	41 1c       	adc	r4, r1
    2f80:	51 1c       	adc	r5, r1
    2f82:	f3 cb       	rjmp	.-2074   	; 0x276a <main+0x2252>
				delay_ms(1);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    2f84:	80 91 56 03 	lds	r24, 0x0356
		u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    2f88:	8b 7d       	andi	r24, 0xDB	; 219
    2f8a:	80 93 56 03 	sts	0x0356, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
    2f8e:	80 91 57 03 	lds	r24, 0x0357
		u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    2f92:	86 7b       	andi	r24, 0xB6	; 182
    2f94:	80 93 57 03 	sts	0x0357, r24
		
		i2c_start(I2C1+I2C_WRITE);
    2f98:	80 e4       	ldi	r24, 0x40	; 64
    2f9a:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>
		i2c_write(0x2);
    2f9e:	82 e0       	ldi	r24, 0x02	; 2
    2fa0:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
    2fa4:	80 91 56 03 	lds	r24, 0x0356
    2fa8:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
    2fac:	80 91 57 03 	lds	r24, 0x0357
    2fb0:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_Z9i2c_writeh>
		i2c_stop();
    2fb4:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <_Z8i2c_stopv>
	}
	OrangutanLCD::print("END");
    2fb8:	89 e4       	ldi	r24, 0x49	; 73
    2fba:	93 e0       	ldi	r25, 0x03	; 3
    2fbc:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    2fc0:	0c 94 a7 02 	jmp	0x54e	; 0x54e <main+0x36>
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently

	bool buttonTriggered = false;	//buttonTriggered is false if it hasn't been triggered, true if it has;
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
    
	while(1){						//Repeats the entire program indefinitely (runs maintenance or normal each time)
    2fc4:	10 e0       	ldi	r17, 0x00	; 0
    2fc6:	0c 94 b6 03 	jmp	0x76c	; 0x76c <main+0x254>
					OrangutanLCD::print("INPUTS ");
					OrangutanLCD::gotoXY(0,1);
					print = 0;
					switched = true;
				}
				if(switched){
    2fca:	11 23       	and	r17, r17
    2fcc:	11 f4       	brne	.+4      	; 0x2fd2 <main+0x2aba>
    2fce:	0c 94 3a 04 	jmp	0x874	; 0x874 <main+0x35c>
    2fd2:	0c 94 21 04 	jmp	0x842	; 0x842 <main+0x32a>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
    2fdc:	88 23       	and	r24, r24
    2fde:	11 f0       	breq	.+4      	; 0x2fe4 <main+0x2acc>
    2fe0:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <main+0x11f0>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
    2fea:	88 23       	and	r24, r24
    2fec:	11 f4       	brne	.+4      	; 0x2ff2 <main+0x2ada>
    2fee:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <main+0x1940>
				counter ++;
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
    2ff8:	88 23       	and	r24, r24
    2ffa:	21 f2       	breq	.-120    	; 0x2f84 <main+0x2a6c>
    2ffc:	8c cb       	rjmp	.-2280   	; 0x2716 <main+0x21fe>
    2ffe:	12 01       	movw	r2, r4
    3000:	95 e2       	ldi	r25, 0x25	; 37
    3002:	69 2e       	mov	r6, r25
    3004:	71 2c       	mov	r7, r1
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	f0 cb       	rjmp	.-2080   	; 0x27ea <main+0x22d2>
    300a:	38 8a       	std	Y+16, r3	; 0x10
    300c:	2f 86       	std	Y+15, r2	; 0x0f
    300e:	66 24       	eor	r6, r6
    3010:	77 24       	eor	r7, r7
    3012:	8a e2       	ldi	r24, 0x2A	; 42
    3014:	48 2e       	mov	r4, r24
    3016:	51 2c       	mov	r5, r1
    3018:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <main+0x9a0>

0000301c <_ZdlPv>:
  return malloc(size); 
} 

void operator delete(void * ptr) 
{ 
  free(ptr); 
    301c:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <free>
} 
    3020:	08 95       	ret

00003022 <_Znwj>:
void * operator new(size_t size); 
void operator delete(void * ptr); 

void * operator new(size_t size) 
{ 
  return malloc(size); 
    3022:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <malloc>
} 
    3026:	08 95       	ret

00003028 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    3028:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    302c:	8c e0       	ldi	r24, 0x0C	; 12
    302e:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    3032:	08 95       	ret

00003034 <_Z9i2c_starth>:

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3034:	98 2f       	mov	r25, r24
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3036:	84 ea       	ldi	r24, 0xA4	; 164
    3038:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    303c:	80 91 bc 00 	lds	r24, 0x00BC
    3040:	87 ff       	sbrs	r24, 7
    3042:	fc cf       	rjmp	.-8      	; 0x303c <_Z9i2c_starth+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3044:	80 91 b9 00 	lds	r24, 0x00B9
    3048:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    304a:	88 30       	cpi	r24, 0x08	; 8
    304c:	21 f0       	breq	.+8      	; 0x3056 <_Z9i2c_starth+0x22>
    304e:	80 31       	cpi	r24, 0x10	; 16
    3050:	11 f0       	breq	.+4      	; 0x3056 <_Z9i2c_starth+0x22>
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	08 95       	ret

	// send device address
	TWDR = address;
    3056:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    305a:	84 e8       	ldi	r24, 0x84	; 132
    305c:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3060:	80 91 bc 00 	lds	r24, 0x00BC
    3064:	87 ff       	sbrs	r24, 7
    3066:	fc cf       	rjmp	.-8      	; 0x3060 <_Z9i2c_starth+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3068:	90 91 b9 00 	lds	r25, 0x00B9
    306c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    306e:	98 31       	cpi	r25, 0x18	; 24
    3070:	11 f4       	brne	.+4      	; 0x3076 <_Z9i2c_starth+0x42>
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	08 95       	ret
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	90 34       	cpi	r25, 0x40	; 64
    307a:	09 f0       	breq	.+2      	; 0x307e <_Z9i2c_starth+0x4a>
    307c:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    307e:	08 95       	ret

00003080 <_Z14i2c_start_waith>:
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
    3080:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3082:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3084:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3086:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3088:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    308c:	80 91 bc 00 	lds	r24, 0x00BC
    3090:	87 ff       	sbrs	r24, 7
    3092:	fc cf       	rjmp	.-8      	; 0x308c <_Z14i2c_start_waith+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3094:	80 91 b9 00 	lds	r24, 0x00B9
    3098:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    309a:	88 30       	cpi	r24, 0x08	; 8
    309c:	11 f0       	breq	.+4      	; 0x30a2 <_Z14i2c_start_waith+0x22>
    309e:	80 31       	cpi	r24, 0x10	; 16
    30a0:	99 f7       	brne	.-26     	; 0x3088 <_Z14i2c_start_waith+0x8>
    
    	// send device address
    	TWDR = address;
    30a2:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    30a6:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    30aa:	80 91 bc 00 	lds	r24, 0x00BC
    30ae:	87 ff       	sbrs	r24, 7
    30b0:	fc cf       	rjmp	.-8      	; 0x30aa <_Z14i2c_start_waith+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    30b2:	80 91 b9 00 	lds	r24, 0x00B9
    30b6:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    30b8:	80 32       	cpi	r24, 0x20	; 32
    30ba:	11 f0       	breq	.+4      	; 0x30c0 <_Z14i2c_start_waith+0x40>
    30bc:	88 35       	cpi	r24, 0x58	; 88
    30be:	39 f4       	brne	.+14     	; 0x30ce <_Z14i2c_start_waith+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    30c0:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    30c4:	80 91 bc 00 	lds	r24, 0x00BC
    30c8:	84 fd       	sbrc	r24, 4
    30ca:	fc cf       	rjmp	.-8      	; 0x30c4 <_Z14i2c_start_waith+0x44>
    30cc:	dd cf       	rjmp	.-70     	; 0x3088 <_Z14i2c_start_waith+0x8>
    30ce:	08 95       	ret

000030d0 <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    30d0:	0e 94 1a 18 	call	0x3034	; 0x3034 <_Z9i2c_starth>

}/* i2c_rep_start */
    30d4:	08 95       	ret

000030d6 <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    30d6:	84 e9       	ldi	r24, 0x94	; 148
    30d8:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    30dc:	80 91 bc 00 	lds	r24, 0x00BC
    30e0:	84 fd       	sbrc	r24, 4
    30e2:	fc cf       	rjmp	.-8      	; 0x30dc <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    30e4:	08 95       	ret

000030e6 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    30e6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    30ea:	84 e8       	ldi	r24, 0x84	; 132
    30ec:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    30f0:	80 91 bc 00 	lds	r24, 0x00BC
    30f4:	87 ff       	sbrs	r24, 7
    30f6:	fc cf       	rjmp	.-8      	; 0x30f0 <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    30f8:	80 91 b9 00 	lds	r24, 0x00B9
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	88 7f       	andi	r24, 0xF8	; 248
    3100:	88 32       	cpi	r24, 0x28	; 40
    3102:	09 f0       	breq	.+2      	; 0x3106 <_Z9i2c_writeh+0x20>
    3104:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    3106:	89 2f       	mov	r24, r25
    3108:	08 95       	ret

0000310a <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    310a:	84 ec       	ldi	r24, 0xC4	; 196
    310c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    3110:	80 91 bc 00 	lds	r24, 0x00BC
    3114:	87 ff       	sbrs	r24, 7
    3116:	fc cf       	rjmp	.-8      	; 0x3110 <_Z11i2c_readAckv+0x6>

    return TWDR;
    3118:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    311c:	08 95       	ret

0000311e <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    311e:	84 e8       	ldi	r24, 0x84	; 132
    3120:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3124:	80 91 bc 00 	lds	r24, 0x00BC
    3128:	87 ff       	sbrs	r24, 7
    312a:	fc cf       	rjmp	.-8      	; 0x3124 <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    312c:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    3130:	08 95       	ret

00003132 <_ZN12OrangutanLCDC2Ev>:
    3132:	08 95       	ret

00003134 <_ZN12OrangutanLCDC1Ev>:
    3134:	08 95       	ret

00003136 <void_getchar>:
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	08 95       	ret

0000313c <_ZN12OrangutanLCD8busyWaitEv>:
    313c:	ef 92       	push	r14
    313e:	ff 92       	push	r15
    3140:	0f 93       	push	r16
    3142:	1f 93       	push	r17
    3144:	67 b1       	in	r22, 0x07	; 7
    3146:	3d 98       	cbi	0x07, 5	; 7
    3148:	28 98       	cbi	0x05, 0	; 5
    314a:	29 9a       	sbi	0x05, 1	; 5
    314c:	e0 90 64 03 	lds	r14, 0x0364
    3150:	f0 90 65 03 	lds	r15, 0x0365
    3154:	00 91 66 03 	lds	r16, 0x0366
    3158:	10 91 67 03 	lds	r17, 0x0367
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	41 e0       	ldi	r20, 0x01	; 1
    3162:	50 e0       	ldi	r21, 0x00	; 0
    3164:	ca 01       	movw	r24, r20
    3166:	6f 93       	push	r22
    3168:	64 e0       	ldi	r22, 0x04	; 4
    316a:	6a 95       	dec	r22
    316c:	f1 f7       	brne	.-4      	; 0x316a <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    316e:	6f 91       	pop	r22
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	c9 f7       	brne	.-14     	; 0x3166 <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    3174:	2a 9a       	sbi	0x05, 2	; 5
    3176:	ca 01       	movw	r24, r20
    3178:	6f 93       	push	r22
    317a:	64 e0       	ldi	r22, 0x04	; 4
    317c:	6a 95       	dec	r22
    317e:	f1 f7       	brne	.-4      	; 0x317c <_ZN12OrangutanLCD8busyWaitEv+0x40>
    3180:	6f 91       	pop	r22
    3182:	01 97       	sbiw	r24, 0x01	; 1
    3184:	c9 f7       	brne	.-14     	; 0x3178 <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    3186:	86 b1       	in	r24, 0x06	; 6
    3188:	2a 98       	cbi	0x05, 2	; 5
    318a:	fa 01       	movw	r30, r20
    318c:	6f 93       	push	r22
    318e:	64 e0       	ldi	r22, 0x04	; 4
    3190:	6a 95       	dec	r22
    3192:	f1 f7       	brne	.-4      	; 0x3190 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    3194:	6f 91       	pop	r22
    3196:	31 97       	sbiw	r30, 0x01	; 1
    3198:	c9 f7       	brne	.-14     	; 0x318c <_ZN12OrangutanLCD8busyWaitEv+0x50>
    319a:	2a 9a       	sbi	0x05, 2	; 5
    319c:	fa 01       	movw	r30, r20
    319e:	6f 93       	push	r22
    31a0:	64 e0       	ldi	r22, 0x04	; 4
    31a2:	6a 95       	dec	r22
    31a4:	f1 f7       	brne	.-4      	; 0x31a2 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    31a6:	6f 91       	pop	r22
    31a8:	31 97       	sbiw	r30, 0x01	; 1
    31aa:	c9 f7       	brne	.-14     	; 0x319e <_ZN12OrangutanLCD8busyWaitEv+0x62>
    31ac:	2a 98       	cbi	0x05, 2	; 5
    31ae:	2c 5f       	subi	r18, 0xFC	; 252
    31b0:	3f 4f       	sbci	r19, 0xFF	; 255
    31b2:	85 ff       	sbrs	r24, 5
    31b4:	09 c0       	rjmp	.+18     	; 0x31c8 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    31b6:	c9 01       	movw	r24, r18
    31b8:	a0 e0       	ldi	r26, 0x00	; 0
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	8e 15       	cp	r24, r14
    31be:	9f 05       	cpc	r25, r15
    31c0:	a0 07       	cpc	r26, r16
    31c2:	b1 07       	cpc	r27, r17
    31c4:	08 f4       	brcc	.+2      	; 0x31c8 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    31c6:	ce cf       	rjmp	.-100    	; 0x3164 <_ZN12OrangutanLCD8busyWaitEv+0x28>
    31c8:	c9 01       	movw	r24, r18
    31ca:	a0 e0       	ldi	r26, 0x00	; 0
    31cc:	b0 e0       	ldi	r27, 0x00	; 0
    31ce:	8e 15       	cp	r24, r14
    31d0:	9f 05       	cpc	r25, r15
    31d2:	a0 07       	cpc	r26, r16
    31d4:	b1 07       	cpc	r27, r17
    31d6:	28 f0       	brcs	.+10     	; 0x31e2 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    31d8:	82 e3       	ldi	r24, 0x32	; 50
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	a0 e0       	ldi	r26, 0x00	; 0
    31de:	b0 e0       	ldi	r27, 0x00	; 0
    31e0:	04 c0       	rjmp	.+8      	; 0x31ea <_ZN12OrangutanLCD8busyWaitEv+0xae>
    31e2:	80 e3       	ldi	r24, 0x30	; 48
    31e4:	95 e7       	ldi	r25, 0x75	; 117
    31e6:	a0 e0       	ldi	r26, 0x00	; 0
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	80 93 64 03 	sts	0x0364, r24
    31ee:	90 93 65 03 	sts	0x0365, r25
    31f2:	a0 93 66 03 	sts	0x0366, r26
    31f6:	b0 93 67 03 	sts	0x0367, r27
    31fa:	67 b9       	out	0x07, r22	; 7
    31fc:	1f 91       	pop	r17
    31fe:	0f 91       	pop	r16
    3200:	ff 90       	pop	r15
    3202:	ef 90       	pop	r14
    3204:	08 95       	ret

00003206 <_ZN12OrangutanLCD8sendDataEh>:
    3206:	28 b1       	in	r18, 0x08	; 8
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	8f 70       	andi	r24, 0x0F	; 15
    320c:	90 70       	andi	r25, 0x00	; 0
    320e:	88 0f       	add	r24, r24
    3210:	99 1f       	adc	r25, r25
    3212:	88 0f       	add	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	23 7c       	andi	r18, 0xC3	; 195
    3218:	28 2b       	or	r18, r24
    321a:	28 b9       	out	0x08, r18	; 8
    321c:	2a 9a       	sbi	0x05, 2	; 5
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	fc 01       	movw	r30, r24
    3224:	6f 93       	push	r22
    3226:	64 e0       	ldi	r22, 0x04	; 4
    3228:	6a 95       	dec	r22
    322a:	f1 f7       	brne	.-4      	; 0x3228 <_ZN12OrangutanLCD8sendDataEh+0x22>
    322c:	6f 91       	pop	r22
    322e:	31 97       	sbiw	r30, 0x01	; 1
    3230:	c9 f7       	brne	.-14     	; 0x3224 <_ZN12OrangutanLCD8sendDataEh+0x1e>
    3232:	2a 98       	cbi	0x05, 2	; 5
    3234:	6f 93       	push	r22
    3236:	64 e0       	ldi	r22, 0x04	; 4
    3238:	6a 95       	dec	r22
    323a:	f1 f7       	brne	.-4      	; 0x3238 <_ZN12OrangutanLCD8sendDataEh+0x32>
    323c:	6f 91       	pop	r22
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	c9 f7       	brne	.-14     	; 0x3234 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    3242:	08 95       	ret

00003244 <_ZN12OrangutanLCD10initPrintfEv>:
    3244:	80 91 60 03 	lds	r24, 0x0360
    3248:	90 91 61 03 	lds	r25, 0x0361
    324c:	00 97       	sbiw	r24, 0x00	; 0
    324e:	11 f0       	breq	.+4      	; 0x3254 <_ZN12OrangutanLCD10initPrintfEv+0x10>
    3250:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <free>
    3254:	80 91 4d 03 	lds	r24, 0x034D
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	20 91 4e 03 	lds	r18, 0x034E
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	ac 01       	movw	r20, r24
    3264:	42 9f       	mul	r20, r18
    3266:	c0 01       	movw	r24, r0
    3268:	43 9f       	mul	r20, r19
    326a:	90 0d       	add	r25, r0
    326c:	52 9f       	mul	r21, r18
    326e:	90 0d       	add	r25, r0
    3270:	11 24       	eor	r1, r1
    3272:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <malloc>
    3276:	90 93 61 03 	sts	0x0361, r25
    327a:	80 93 60 03 	sts	0x0360, r24
    327e:	00 97       	sbiw	r24, 0x00	; 0
    3280:	29 f1       	breq	.+74     	; 0x32cc <_ZN12OrangutanLCD10initPrintfEv+0x88>
    3282:	60 e0       	ldi	r22, 0x00	; 0
    3284:	70 e2       	ldi	r23, 0x20	; 32
    3286:	08 c0       	rjmp	.+16     	; 0x3298 <_ZN12OrangutanLCD10initPrintfEv+0x54>
    3288:	e0 91 60 03 	lds	r30, 0x0360
    328c:	f0 91 61 03 	lds	r31, 0x0361
    3290:	e4 0f       	add	r30, r20
    3292:	f5 1f       	adc	r31, r21
    3294:	70 83       	st	Z, r23
    3296:	6f 5f       	subi	r22, 0xFF	; 255
    3298:	46 2f       	mov	r20, r22
    329a:	50 e0       	ldi	r21, 0x00	; 0
    329c:	80 91 4d 03 	lds	r24, 0x034D
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	20 91 4e 03 	lds	r18, 0x034E
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	fc 01       	movw	r30, r24
    32ac:	e2 9f       	mul	r30, r18
    32ae:	c0 01       	movw	r24, r0
    32b0:	e3 9f       	mul	r30, r19
    32b2:	90 0d       	add	r25, r0
    32b4:	f2 9f       	mul	r31, r18
    32b6:	90 0d       	add	r25, r0
    32b8:	11 24       	eor	r1, r1
    32ba:	48 17       	cp	r20, r24
    32bc:	59 07       	cpc	r21, r25
    32be:	24 f3       	brlt	.-56     	; 0x3288 <_ZN12OrangutanLCD10initPrintfEv+0x44>
    32c0:	87 e8       	ldi	r24, 0x87	; 135
    32c2:	9b e1       	ldi	r25, 0x1B	; 27
    32c4:	6b e9       	ldi	r22, 0x9B	; 155
    32c6:	78 e1       	ldi	r23, 0x18	; 24
    32c8:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <fdevopen>
    32cc:	08 95       	ret

000032ce <_ZN12OrangutanLCD10initPrintfEhh>:
    32ce:	80 93 4e 03 	sts	0x034E, r24
    32d2:	60 93 4d 03 	sts	0x034D, r22
    32d6:	0e 94 22 19 	call	0x3244	; 0x3244 <_ZN12OrangutanLCD10initPrintfEv>
    32da:	08 95       	ret

000032dc <lcd_init_printf_with_dimensions>:
    32dc:	80 93 4e 03 	sts	0x034E, r24
    32e0:	60 93 4d 03 	sts	0x034D, r22
    32e4:	0e 94 22 19 	call	0x3244	; 0x3244 <_ZN12OrangutanLCD10initPrintfEv>
    32e8:	08 95       	ret

000032ea <lcd_init_printf>:
    32ea:	0e 94 22 19 	call	0x3244	; 0x3244 <_ZN12OrangutanLCD10initPrintfEv>
    32ee:	08 95       	ret

000032f0 <_ZN12OrangutanLCD5init2Ev>:
    32f0:	3d 98       	cbi	0x07, 5	; 7
    32f2:	45 9a       	sbi	0x08, 5	; 8
    32f4:	80 e3       	ldi	r24, 0x30	; 48
    32f6:	95 e7       	ldi	r25, 0x75	; 117
    32f8:	a0 e0       	ldi	r26, 0x00	; 0
    32fa:	b0 e0       	ldi	r27, 0x00	; 0
    32fc:	80 93 64 03 	sts	0x0364, r24
    3300:	90 93 65 03 	sts	0x0365, r25
    3304:	a0 93 66 03 	sts	0x0366, r26
    3308:	b0 93 67 03 	sts	0x0367, r27
    330c:	20 9a       	sbi	0x04, 0	; 4
    330e:	21 9a       	sbi	0x04, 1	; 4
    3310:	22 9a       	sbi	0x04, 2	; 4
    3312:	8e e1       	ldi	r24, 0x1E	; 30
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>
    331a:	83 e0       	ldi	r24, 0x03	; 3
    331c:	0e 94 cd 1c 	call	0x399a	; 0x399a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    3320:	86 e0       	ldi	r24, 0x06	; 6
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>
    3328:	83 e0       	ldi	r24, 0x03	; 3
    332a:	0e 94 cd 1c 	call	0x399a	; 0x399a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    332e:	82 e0       	ldi	r24, 0x02	; 2
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>
    3336:	83 e0       	ldi	r24, 0x03	; 3
    3338:	0e 94 cd 1c 	call	0x399a	; 0x399a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    333c:	82 e0       	ldi	r24, 0x02	; 2
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>
    3344:	82 e0       	ldi	r24, 0x02	; 2
    3346:	0e 94 cd 1c 	call	0x399a	; 0x399a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    334a:	82 e0       	ldi	r24, 0x02	; 2
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>
    3352:	88 e2       	ldi	r24, 0x28	; 40
    3354:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN12OrangutanLCD8send_cmdEh>
    3358:	88 e0       	ldi	r24, 0x08	; 8
    335a:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN12OrangutanLCD8send_cmdEh>
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN12OrangutanLCD8send_cmdEh>
    3364:	86 e0       	ldi	r24, 0x06	; 6
    3366:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN12OrangutanLCD8send_cmdEh>
    336a:	8c e0       	ldi	r24, 0x0C	; 12
    336c:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN12OrangutanLCD8send_cmdEh>
    3370:	08 95       	ret

00003372 <_ZN12OrangutanLCD4initEv>:
    3372:	80 91 68 03 	lds	r24, 0x0368
    3376:	88 23       	and	r24, r24
    3378:	29 f4       	brne	.+10     	; 0x3384 <_ZN12OrangutanLCD4initEv+0x12>
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	80 93 68 03 	sts	0x0368, r24
    3380:	0e 94 78 19 	call	0x32f0	; 0x32f0 <_ZN12OrangutanLCD5init2Ev>
    3384:	08 95       	ret

00003386 <_ZN12OrangutanLCD4sendEhhh>:
    3386:	ff 92       	push	r15
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
    338c:	08 2f       	mov	r16, r24
    338e:	16 2f       	mov	r17, r22
    3390:	f4 2e       	mov	r15, r20
    3392:	0e 94 b9 19 	call	0x3372	; 0x3372 <_ZN12OrangutanLCD4initEv>
    3396:	0e 94 9e 18 	call	0x313c	; 0x313c <_ZN12OrangutanLCD8busyWaitEv>
    339a:	37 b1       	in	r19, 0x07	; 7
    339c:	28 b1       	in	r18, 0x08	; 8
    339e:	29 98       	cbi	0x05, 1	; 5
    33a0:	11 23       	and	r17, r17
    33a2:	11 f0       	breq	.+4      	; 0x33a8 <_ZN12OrangutanLCD4sendEhhh+0x22>
    33a4:	28 9a       	sbi	0x05, 0	; 5
    33a6:	01 c0       	rjmp	.+2      	; 0x33aa <_ZN12OrangutanLCD4sendEhhh+0x24>
    33a8:	28 98       	cbi	0x05, 0	; 5
    33aa:	87 b1       	in	r24, 0x07	; 7
    33ac:	8c 63       	ori	r24, 0x3C	; 60
    33ae:	87 b9       	out	0x07, r24	; 7
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	f8 16       	cp	r15, r24
    33b4:	e1 f0       	breq	.+56     	; 0x33ee <_ZN12OrangutanLCD4sendEhhh+0x68>
    33b6:	88 b1       	in	r24, 0x08	; 8
    33b8:	90 2f       	mov	r25, r16
    33ba:	92 95       	swap	r25
    33bc:	9f 70       	andi	r25, 0x0F	; 15
    33be:	99 0f       	add	r25, r25
    33c0:	99 0f       	add	r25, r25
    33c2:	83 7c       	andi	r24, 0xC3	; 195
    33c4:	98 2b       	or	r25, r24
    33c6:	98 b9       	out	0x08, r25	; 8
    33c8:	2a 9a       	sbi	0x05, 2	; 5
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	fc 01       	movw	r30, r24
    33d0:	6f 93       	push	r22
    33d2:	64 e0       	ldi	r22, 0x04	; 4
    33d4:	6a 95       	dec	r22
    33d6:	f1 f7       	brne	.-4      	; 0x33d4 <_ZN12OrangutanLCD4sendEhhh+0x4e>
    33d8:	6f 91       	pop	r22
    33da:	31 97       	sbiw	r30, 0x01	; 1
    33dc:	c9 f7       	brne	.-14     	; 0x33d0 <_ZN12OrangutanLCD4sendEhhh+0x4a>
    33de:	2a 98       	cbi	0x05, 2	; 5
    33e0:	6f 93       	push	r22
    33e2:	64 e0       	ldi	r22, 0x04	; 4
    33e4:	6a 95       	dec	r22
    33e6:	f1 f7       	brne	.-4      	; 0x33e4 <_ZN12OrangutanLCD4sendEhhh+0x5e>
    33e8:	6f 91       	pop	r22
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	c9 f7       	brne	.-14     	; 0x33e0 <_ZN12OrangutanLCD4sendEhhh+0x5a>
    33ee:	88 b1       	in	r24, 0x08	; 8
    33f0:	0f 70       	andi	r16, 0x0F	; 15
    33f2:	00 0f       	add	r16, r16
    33f4:	00 0f       	add	r16, r16
    33f6:	83 7c       	andi	r24, 0xC3	; 195
    33f8:	80 2b       	or	r24, r16
    33fa:	88 b9       	out	0x08, r24	; 8
    33fc:	2a 9a       	sbi	0x05, 2	; 5
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	fc 01       	movw	r30, r24
    3404:	6f 93       	push	r22
    3406:	64 e0       	ldi	r22, 0x04	; 4
    3408:	6a 95       	dec	r22
    340a:	f1 f7       	brne	.-4      	; 0x3408 <_ZN12OrangutanLCD4sendEhhh+0x82>
    340c:	6f 91       	pop	r22
    340e:	31 97       	sbiw	r30, 0x01	; 1
    3410:	c9 f7       	brne	.-14     	; 0x3404 <_ZN12OrangutanLCD4sendEhhh+0x7e>
    3412:	2a 98       	cbi	0x05, 2	; 5
    3414:	6f 93       	push	r22
    3416:	64 e0       	ldi	r22, 0x04	; 4
    3418:	6a 95       	dec	r22
    341a:	f1 f7       	brne	.-4      	; 0x3418 <_ZN12OrangutanLCD4sendEhhh+0x92>
    341c:	6f 91       	pop	r22
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	c9 f7       	brne	.-14     	; 0x3414 <_ZN12OrangutanLCD4sendEhhh+0x8e>
    3422:	37 b9       	out	0x07, r19	; 7
    3424:	28 b9       	out	0x08, r18	; 8
    3426:	1f 91       	pop	r17
    3428:	0f 91       	pop	r16
    342a:	ff 90       	pop	r15
    342c:	08 95       	ret

0000342e <_ZN12OrangutanLCD8send_cmdEh>:
    342e:	60 e0       	ldi	r22, 0x00	; 0
    3430:	42 e0       	ldi	r20, 0x02	; 2
    3432:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN12OrangutanLCD4sendEhhh>
    3436:	08 95       	ret

00003438 <_ZN12OrangutanLCD10moveCursorEhh>:
    3438:	0f 93       	push	r16
    343a:	1f 93       	push	r17
    343c:	08 2f       	mov	r16, r24
    343e:	16 2f       	mov	r17, r22
    3440:	08 c0       	rjmp	.+16     	; 0x3452 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    3442:	00 23       	and	r16, r16
    3444:	11 f4       	brne	.+4      	; 0x344a <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    3446:	80 e1       	ldi	r24, 0x10	; 16
    3448:	01 c0       	rjmp	.+2      	; 0x344c <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    344a:	84 e1       	ldi	r24, 0x14	; 20
    344c:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN12OrangutanLCD8send_cmdEh>
    3450:	11 50       	subi	r17, 0x01	; 1
    3452:	11 23       	and	r17, r17
    3454:	b1 f7       	brne	.-20     	; 0x3442 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    3456:	1f 91       	pop	r17
    3458:	0f 91       	pop	r16
    345a:	08 95       	ret

0000345c <lcd_move_cursor>:
    345c:	0e 94 1c 1a 	call	0x3438	; 0x3438 <_ZN12OrangutanLCD10moveCursorEhh>
    3460:	08 95       	ret

00003462 <_ZN12OrangutanLCD10hideCursorEv>:
    3462:	8c e0       	ldi	r24, 0x0C	; 12
    3464:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN12OrangutanLCD8send_cmdEh>
    3468:	08 95       	ret

0000346a <lcd_hide_cursor>:
    346a:	0e 94 31 1a 	call	0x3462	; 0x3462 <_ZN12OrangutanLCD10hideCursorEv>
    346e:	08 95       	ret

00003470 <_ZN12OrangutanLCD10showCursorEh>:
    3470:	81 30       	cpi	r24, 0x01	; 1
    3472:	11 f4       	brne	.+4      	; 0x3478 <_ZN12OrangutanLCD10showCursorEh+0x8>
    3474:	8f e0       	ldi	r24, 0x0F	; 15
    3476:	01 c0       	rjmp	.+2      	; 0x347a <_ZN12OrangutanLCD10showCursorEh+0xa>
    3478:	8e e0       	ldi	r24, 0x0E	; 14
    347a:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN12OrangutanLCD8send_cmdEh>
    347e:	08 95       	ret

00003480 <lcd_show_cursor>:
    3480:	0e 94 38 1a 	call	0x3470	; 0x3470 <_ZN12OrangutanLCD10showCursorEh>
    3484:	08 95       	ret

00003486 <_ZN12OrangutanLCD6gotoXYEhh>:
    3486:	a4 e0       	ldi	r26, 0x04	; 4
    3488:	b0 e0       	ldi	r27, 0x00	; 0
    348a:	e9 e4       	ldi	r30, 0x49	; 73
    348c:	fa e1       	ldi	r31, 0x1A	; 26
    348e:	0c 94 57 1e 	jmp	0x3cae	; 0x3cae <__prologue_saves__+0x1c>
    3492:	18 2f       	mov	r17, r24
    3494:	06 2f       	mov	r16, r22
    3496:	80 e8       	ldi	r24, 0x80	; 128
    3498:	89 83       	std	Y+1, r24	; 0x01
    349a:	80 ec       	ldi	r24, 0xC0	; 192
    349c:	8a 83       	std	Y+2, r24	; 0x02
    349e:	84 e9       	ldi	r24, 0x94	; 148
    34a0:	8b 83       	std	Y+3, r24	; 0x03
    34a2:	84 ed       	ldi	r24, 0xD4	; 212
    34a4:	8c 83       	std	Y+4, r24	; 0x04
    34a6:	fe 01       	movw	r30, r28
    34a8:	e6 0f       	add	r30, r22
    34aa:	f1 1d       	adc	r31, r1
    34ac:	81 81       	ldd	r24, Z+1	; 0x01
    34ae:	81 0f       	add	r24, r17
    34b0:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN12OrangutanLCD8send_cmdEh>
    34b4:	10 93 63 03 	sts	0x0363, r17
    34b8:	00 93 62 03 	sts	0x0362, r16
    34bc:	24 96       	adiw	r28, 0x04	; 4
    34be:	e4 e0       	ldi	r30, 0x04	; 4
    34c0:	0c 94 73 1e 	jmp	0x3ce6	; 0x3ce6 <__epilogue_restores__+0x1c>

000034c4 <lcd_goto_xy>:
    34c4:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
    34c8:	08 95       	ret

000034ca <_ZN12OrangutanLCD5clearEv>:
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN12OrangutanLCD8send_cmdEh>
    34d0:	80 91 60 03 	lds	r24, 0x0360
    34d4:	90 91 61 03 	lds	r25, 0x0361
    34d8:	89 2b       	or	r24, r25
    34da:	19 f1       	breq	.+70     	; 0x3522 <_ZN12OrangutanLCD5clearEv+0x58>
    34dc:	60 e0       	ldi	r22, 0x00	; 0
    34de:	70 e2       	ldi	r23, 0x20	; 32
    34e0:	08 c0       	rjmp	.+16     	; 0x34f2 <_ZN12OrangutanLCD5clearEv+0x28>
    34e2:	e0 91 60 03 	lds	r30, 0x0360
    34e6:	f0 91 61 03 	lds	r31, 0x0361
    34ea:	e4 0f       	add	r30, r20
    34ec:	f5 1f       	adc	r31, r21
    34ee:	70 83       	st	Z, r23
    34f0:	6f 5f       	subi	r22, 0xFF	; 255
    34f2:	46 2f       	mov	r20, r22
    34f4:	50 e0       	ldi	r21, 0x00	; 0
    34f6:	80 91 4d 03 	lds	r24, 0x034D
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	01 97       	sbiw	r24, 0x01	; 1
    34fe:	20 91 4e 03 	lds	r18, 0x034E
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	fc 01       	movw	r30, r24
    3506:	e2 9f       	mul	r30, r18
    3508:	c0 01       	movw	r24, r0
    350a:	e3 9f       	mul	r30, r19
    350c:	90 0d       	add	r25, r0
    350e:	f2 9f       	mul	r31, r18
    3510:	90 0d       	add	r25, r0
    3512:	11 24       	eor	r1, r1
    3514:	48 17       	cp	r20, r24
    3516:	59 07       	cpc	r21, r25
    3518:	24 f3       	brlt	.-56     	; 0x34e2 <_ZN12OrangutanLCD5clearEv+0x18>
    351a:	10 92 63 03 	sts	0x0363, r1
    351e:	10 92 62 03 	sts	0x0362, r1
    3522:	08 95       	ret

00003524 <clear>:
    3524:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN12OrangutanLCD5clearEv>
    3528:	08 95       	ret

0000352a <_ZN12OrangutanLCD9send_dataEh>:
    352a:	61 e0       	ldi	r22, 0x01	; 1
    352c:	42 e0       	ldi	r20, 0x02	; 2
    352e:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN12OrangutanLCD4sendEhhh>
    3532:	08 95       	ret

00003534 <_ZN12OrangutanLCD11printBinaryEh>:
    3534:	0f 93       	push	r16
    3536:	1f 93       	push	r17
    3538:	cf 93       	push	r28
    353a:	df 93       	push	r29
    353c:	00 e0       	ldi	r16, 0x00	; 0
    353e:	10 e8       	ldi	r17, 0x80	; 128
    3540:	c8 2f       	mov	r28, r24
    3542:	d0 e0       	ldi	r29, 0x00	; 0
    3544:	81 2f       	mov	r24, r17
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	8c 23       	and	r24, r28
    354a:	9d 23       	and	r25, r29
    354c:	89 2b       	or	r24, r25
    354e:	11 f0       	breq	.+4      	; 0x3554 <_ZN12OrangutanLCD11printBinaryEh+0x20>
    3550:	81 e3       	ldi	r24, 0x31	; 49
    3552:	01 c0       	rjmp	.+2      	; 0x3556 <_ZN12OrangutanLCD11printBinaryEh+0x22>
    3554:	80 e3       	ldi	r24, 0x30	; 48
    3556:	0e 94 95 1a 	call	0x352a	; 0x352a <_ZN12OrangutanLCD9send_dataEh>
    355a:	0f 5f       	subi	r16, 0xFF	; 255
    355c:	08 30       	cpi	r16, 0x08	; 8
    355e:	11 f0       	breq	.+4      	; 0x3564 <_ZN12OrangutanLCD11printBinaryEh+0x30>
    3560:	16 95       	lsr	r17
    3562:	f0 cf       	rjmp	.-32     	; 0x3544 <_ZN12OrangutanLCD11printBinaryEh+0x10>
    3564:	df 91       	pop	r29
    3566:	cf 91       	pop	r28
    3568:	1f 91       	pop	r17
    356a:	0f 91       	pop	r16
    356c:	08 95       	ret

0000356e <print_binary>:
    356e:	0e 94 9a 1a 	call	0x3534	; 0x3534 <_ZN12OrangutanLCD11printBinaryEh>
    3572:	08 95       	ret

00003574 <_ZN12OrangutanLCD14printHexNibbleEh>:
    3574:	8a 30       	cpi	r24, 0x0A	; 10
    3576:	10 f4       	brcc	.+4      	; 0x357c <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    3578:	80 5d       	subi	r24, 0xD0	; 208
    357a:	01 c0       	rjmp	.+2      	; 0x357e <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    357c:	89 5c       	subi	r24, 0xC9	; 201
    357e:	0e 94 95 1a 	call	0x352a	; 0x352a <_ZN12OrangutanLCD9send_dataEh>
    3582:	08 95       	ret

00003584 <_ZN12OrangutanLCD8printHexEh>:
    3584:	1f 93       	push	r17
    3586:	18 2f       	mov	r17, r24
    3588:	82 95       	swap	r24
    358a:	8f 70       	andi	r24, 0x0F	; 15
    358c:	0e 94 ba 1a 	call	0x3574	; 0x3574 <_ZN12OrangutanLCD14printHexNibbleEh>
    3590:	81 2f       	mov	r24, r17
    3592:	8f 70       	andi	r24, 0x0F	; 15
    3594:	0e 94 ba 1a 	call	0x3574	; 0x3574 <_ZN12OrangutanLCD14printHexNibbleEh>
    3598:	1f 91       	pop	r17
    359a:	08 95       	ret

0000359c <_ZN12OrangutanLCD8printHexEj>:
    359c:	1f 93       	push	r17
    359e:	18 2f       	mov	r17, r24
    35a0:	89 2f       	mov	r24, r25
    35a2:	0e 94 c2 1a 	call	0x3584	; 0x3584 <_ZN12OrangutanLCD8printHexEh>
    35a6:	81 2f       	mov	r24, r17
    35a8:	0e 94 c2 1a 	call	0x3584	; 0x3584 <_ZN12OrangutanLCD8printHexEh>
    35ac:	1f 91       	pop	r17
    35ae:	08 95       	ret

000035b0 <print_hex>:
    35b0:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN12OrangutanLCD8printHexEj>
    35b4:	08 95       	ret

000035b6 <print_hex_byte>:
    35b6:	0e 94 c2 1a 	call	0x3584	; 0x3584 <_ZN12OrangutanLCD8printHexEh>
    35ba:	08 95       	ret

000035bc <_ZN12OrangutanLCD5printEm>:
    35bc:	6f 92       	push	r6
    35be:	7f 92       	push	r7
    35c0:	8f 92       	push	r8
    35c2:	9f 92       	push	r9
    35c4:	af 92       	push	r10
    35c6:	bf 92       	push	r11
    35c8:	cf 92       	push	r12
    35ca:	df 92       	push	r13
    35cc:	ff 92       	push	r15
    35ce:	0f 93       	push	r16
    35d0:	df 93       	push	r29
    35d2:	cf 93       	push	r28
    35d4:	cd b7       	in	r28, 0x3d	; 61
    35d6:	de b7       	in	r29, 0x3e	; 62
    35d8:	2a 97       	sbiw	r28, 0x0a	; 10
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	cd bf       	out	0x3d, r28	; 61
    35e4:	5b 01       	movw	r10, r22
    35e6:	6c 01       	movw	r12, r24
    35e8:	0a e0       	ldi	r16, 0x0A	; 10
    35ea:	3e 01       	movw	r6, r28
    35ec:	08 94       	sec
    35ee:	61 1c       	adc	r6, r1
    35f0:	71 1c       	adc	r7, r1
    35f2:	fa 2c       	mov	r15, r10
    35f4:	c6 01       	movw	r24, r12
    35f6:	b5 01       	movw	r22, r10
    35f8:	2a e0       	ldi	r18, 0x0A	; 10
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e0       	ldi	r20, 0x00	; 0
    35fe:	50 e0       	ldi	r21, 0x00	; 0
    3600:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <__udivmodsi4>
    3604:	c9 01       	movw	r24, r18
    3606:	da 01       	movw	r26, r20
    3608:	5c 01       	movw	r10, r24
    360a:	6d 01       	movw	r12, r26
    360c:	01 50       	subi	r16, 0x01	; 1
    360e:	43 01       	movw	r8, r6
    3610:	80 0e       	add	r8, r16
    3612:	91 1c       	adc	r9, r1
    3614:	80 e3       	ldi	r24, 0x30	; 48
    3616:	f8 0e       	add	r15, r24
    3618:	c6 01       	movw	r24, r12
    361a:	b5 01       	movw	r22, r10
    361c:	2a e0       	ldi	r18, 0x0A	; 10
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e0       	ldi	r20, 0x00	; 0
    3622:	50 e0       	ldi	r21, 0x00	; 0
    3624:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <__mulsi3>
    3628:	f6 1a       	sub	r15, r22
    362a:	f4 01       	movw	r30, r8
    362c:	f0 82       	st	Z, r15
    362e:	a1 14       	cp	r10, r1
    3630:	b1 04       	cpc	r11, r1
    3632:	c1 04       	cpc	r12, r1
    3634:	d1 04       	cpc	r13, r1
    3636:	e9 f6       	brne	.-70     	; 0x35f2 <_ZN12OrangutanLCD5printEm+0x36>
    3638:	08 c0       	rjmp	.+16     	; 0x364a <_ZN12OrangutanLCD5printEm+0x8e>
    363a:	f6 01       	movw	r30, r12
    363c:	e0 0f       	add	r30, r16
    363e:	f1 1d       	adc	r31, r1
    3640:	80 81       	ld	r24, Z
    3642:	0e 94 95 1a 	call	0x352a	; 0x352a <_ZN12OrangutanLCD9send_dataEh>
    3646:	0f 5f       	subi	r16, 0xFF	; 255
    3648:	04 c0       	rjmp	.+8      	; 0x3652 <_ZN12OrangutanLCD5printEm+0x96>
    364a:	6e 01       	movw	r12, r28
    364c:	08 94       	sec
    364e:	c1 1c       	adc	r12, r1
    3650:	d1 1c       	adc	r13, r1
    3652:	0a 30       	cpi	r16, 0x0A	; 10
    3654:	90 f3       	brcs	.-28     	; 0x363a <_ZN12OrangutanLCD5printEm+0x7e>
    3656:	2a 96       	adiw	r28, 0x0a	; 10
    3658:	0f b6       	in	r0, 0x3f	; 63
    365a:	f8 94       	cli
    365c:	de bf       	out	0x3e, r29	; 62
    365e:	0f be       	out	0x3f, r0	; 63
    3660:	cd bf       	out	0x3d, r28	; 61
    3662:	cf 91       	pop	r28
    3664:	df 91       	pop	r29
    3666:	0f 91       	pop	r16
    3668:	ff 90       	pop	r15
    366a:	df 90       	pop	r13
    366c:	cf 90       	pop	r12
    366e:	bf 90       	pop	r11
    3670:	af 90       	pop	r10
    3672:	9f 90       	pop	r9
    3674:	8f 90       	pop	r8
    3676:	7f 90       	pop	r7
    3678:	6f 90       	pop	r6
    367a:	08 95       	ret

0000367c <print_unsigned_long>:
    367c:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN12OrangutanLCD5printEm>
    3680:	08 95       	ret

00003682 <_ZN12OrangutanLCD5printEl>:
    3682:	ef 92       	push	r14
    3684:	ff 92       	push	r15
    3686:	0f 93       	push	r16
    3688:	1f 93       	push	r17
    368a:	7b 01       	movw	r14, r22
    368c:	8c 01       	movw	r16, r24
    368e:	97 ff       	sbrs	r25, 7
    3690:	0b c0       	rjmp	.+22     	; 0x36a8 <_ZN12OrangutanLCD5printEl+0x26>
    3692:	10 95       	com	r17
    3694:	00 95       	com	r16
    3696:	f0 94       	com	r15
    3698:	e0 94       	com	r14
    369a:	e1 1c       	adc	r14, r1
    369c:	f1 1c       	adc	r15, r1
    369e:	01 1d       	adc	r16, r1
    36a0:	11 1d       	adc	r17, r1
    36a2:	8d e2       	ldi	r24, 0x2D	; 45
    36a4:	0e 94 95 1a 	call	0x352a	; 0x352a <_ZN12OrangutanLCD9send_dataEh>
    36a8:	c8 01       	movw	r24, r16
    36aa:	b7 01       	movw	r22, r14
    36ac:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN12OrangutanLCD5printEm>
    36b0:	1f 91       	pop	r17
    36b2:	0f 91       	pop	r16
    36b4:	ff 90       	pop	r15
    36b6:	ef 90       	pop	r14
    36b8:	08 95       	ret

000036ba <print_long>:
    36ba:	0e 94 41 1b 	call	0x3682	; 0x3682 <_ZN12OrangutanLCD5printEl>
    36be:	08 95       	ret

000036c0 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    36c0:	cf 93       	push	r28
    36c2:	df 93       	push	r29
    36c4:	ec 01       	movw	r28, r24
    36c6:	03 c0       	rjmp	.+6      	; 0x36ce <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    36c8:	0e 94 95 1a 	call	0x352a	; 0x352a <_ZN12OrangutanLCD9send_dataEh>
    36cc:	21 96       	adiw	r28, 0x01	; 1
    36ce:	fe 01       	movw	r30, r28
    36d0:	84 91       	lpm	r24, Z+
    36d2:	88 23       	and	r24, r24
    36d4:	c9 f7       	brne	.-14     	; 0x36c8 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    36d6:	df 91       	pop	r29
    36d8:	cf 91       	pop	r28
    36da:	08 95       	ret

000036dc <print_from_program_space>:
    36dc:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    36e0:	08 95       	ret

000036e2 <_ZN12OrangutanLCD5printEPKc>:
    36e2:	cf 93       	push	r28
    36e4:	df 93       	push	r29
    36e6:	ec 01       	movw	r28, r24
    36e8:	03 c0       	rjmp	.+6      	; 0x36f0 <_ZN12OrangutanLCD5printEPKc+0xe>
    36ea:	21 96       	adiw	r28, 0x01	; 1
    36ec:	0e 94 95 1a 	call	0x352a	; 0x352a <_ZN12OrangutanLCD9send_dataEh>
    36f0:	88 81       	ld	r24, Y
    36f2:	88 23       	and	r24, r24
    36f4:	d1 f7       	brne	.-12     	; 0x36ea <_ZN12OrangutanLCD5printEPKc+0x8>
    36f6:	df 91       	pop	r29
    36f8:	cf 91       	pop	r28
    36fa:	08 95       	ret

000036fc <print>:
    36fc:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <_ZN12OrangutanLCD5printEPKc>
    3700:	08 95       	ret

00003702 <_ZN12OrangutanLCD5printEc>:
    3702:	0e 94 95 1a 	call	0x352a	; 0x352a <_ZN12OrangutanLCD9send_dataEh>
    3706:	08 95       	ret

00003708 <print_character>:
    3708:	0e 94 95 1a 	call	0x352a	; 0x352a <_ZN12OrangutanLCD9send_dataEh>
    370c:	08 95       	ret

0000370e <lcd_putchar>:
    370e:	a0 e0       	ldi	r26, 0x00	; 0
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	ed e8       	ldi	r30, 0x8D	; 141
    3714:	fb e1       	ldi	r31, 0x1B	; 27
    3716:	0c 94 53 1e 	jmp	0x3ca6	; 0x3ca6 <__prologue_saves__+0x14>
    371a:	e8 2e       	mov	r14, r24
    371c:	80 91 60 03 	lds	r24, 0x0360
    3720:	90 91 61 03 	lds	r25, 0x0361
    3724:	89 2b       	or	r24, r25
    3726:	09 f4       	brne	.+2      	; 0x372a <lcd_putchar+0x1c>
    3728:	05 c1       	rjmp	.+522    	; 0x3934 <lcd_putchar+0x226>
    372a:	2a e0       	ldi	r18, 0x0A	; 10
    372c:	e2 16       	cp	r14, r18
    372e:	09 f4       	brne	.+2      	; 0x3732 <lcd_putchar+0x24>
    3730:	46 c0       	rjmp	.+140    	; 0x37be <lcd_putchar+0xb0>
    3732:	38 e0       	ldi	r19, 0x08	; 8
    3734:	e3 16       	cp	r14, r19
    3736:	c9 f4       	brne	.+50     	; 0x376a <lcd_putchar+0x5c>
    3738:	80 91 63 03 	lds	r24, 0x0363
    373c:	81 50       	subi	r24, 0x01	; 1
    373e:	80 93 63 03 	sts	0x0363, r24
    3742:	8f 3f       	cpi	r24, 0xFF	; 255
    3744:	51 f4       	brne	.+20     	; 0x375a <lcd_putchar+0x4c>
    3746:	80 91 62 03 	lds	r24, 0x0362
    374a:	81 50       	subi	r24, 0x01	; 1
    374c:	80 93 62 03 	sts	0x0362, r24
    3750:	80 91 4e 03 	lds	r24, 0x034E
    3754:	81 50       	subi	r24, 0x01	; 1
    3756:	80 93 63 03 	sts	0x0363, r24
    375a:	80 91 62 03 	lds	r24, 0x0362
    375e:	8f 3f       	cpi	r24, 0xFF	; 255
    3760:	09 f0       	breq	.+2      	; 0x3764 <lcd_putchar+0x56>
    3762:	e2 c0       	rjmp	.+452    	; 0x3928 <lcd_putchar+0x21a>
    3764:	10 92 62 03 	sts	0x0362, r1
    3768:	dd c0       	rjmp	.+442    	; 0x3924 <lcd_putchar+0x216>
    376a:	8e 2d       	mov	r24, r14
    376c:	0e 94 95 1a 	call	0x352a	; 0x352a <_ZN12OrangutanLCD9send_dataEh>
    3770:	20 91 62 03 	lds	r18, 0x0362
    3774:	22 23       	and	r18, r18
    3776:	c9 f0       	breq	.+50     	; 0x37aa <lcd_putchar+0x9c>
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	21 50       	subi	r18, 0x01	; 1
    377c:	30 40       	sbci	r19, 0x00	; 0
    377e:	80 91 4e 03 	lds	r24, 0x034E
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	ac 01       	movw	r20, r24
    3786:	24 9f       	mul	r18, r20
    3788:	c0 01       	movw	r24, r0
    378a:	25 9f       	mul	r18, r21
    378c:	90 0d       	add	r25, r0
    378e:	34 9f       	mul	r19, r20
    3790:	90 0d       	add	r25, r0
    3792:	11 24       	eor	r1, r1
    3794:	20 91 63 03 	lds	r18, 0x0363
    3798:	e0 91 60 03 	lds	r30, 0x0360
    379c:	f0 91 61 03 	lds	r31, 0x0361
    37a0:	e8 0f       	add	r30, r24
    37a2:	f9 1f       	adc	r31, r25
    37a4:	e2 0f       	add	r30, r18
    37a6:	f1 1d       	adc	r31, r1
    37a8:	e0 82       	st	Z, r14
    37aa:	80 91 63 03 	lds	r24, 0x0363
    37ae:	8f 5f       	subi	r24, 0xFF	; 255
    37b0:	80 93 63 03 	sts	0x0363, r24
    37b4:	90 91 4e 03 	lds	r25, 0x034E
    37b8:	89 17       	cp	r24, r25
    37ba:	09 f0       	breq	.+2      	; 0x37be <lcd_putchar+0xb0>
    37bc:	bb c0       	rjmp	.+374    	; 0x3934 <lcd_putchar+0x226>
    37be:	40 91 62 03 	lds	r20, 0x0362
    37c2:	24 2f       	mov	r18, r20
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	80 91 4d 03 	lds	r24, 0x034D
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	28 17       	cp	r18, r24
    37d0:	39 07       	cpc	r19, r25
    37d2:	09 f0       	breq	.+2      	; 0x37d6 <lcd_putchar+0xc8>
    37d4:	a4 c0       	rjmp	.+328    	; 0x391e <lcd_putchar+0x210>
    37d6:	c0 e0       	ldi	r28, 0x00	; 0
    37d8:	d0 e0       	ldi	r29, 0x00	; 0
    37da:	44 c0       	rjmp	.+136    	; 0x3864 <lcd_putchar+0x156>
    37dc:	80 e0       	ldi	r24, 0x00	; 0
    37de:	6c 2f       	mov	r22, r28
    37e0:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
    37e4:	ff 24       	eor	r15, r15
    37e6:	6e 01       	movw	r12, r28
    37e8:	08 94       	sec
    37ea:	c1 1c       	adc	r12, r1
    37ec:	d1 1c       	adc	r13, r1
    37ee:	35 c0       	rjmp	.+106    	; 0x385a <lcd_putchar+0x14c>
    37f0:	0f 2d       	mov	r16, r15
    37f2:	10 e0       	ldi	r17, 0x00	; 0
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	9c 01       	movw	r18, r24
    37f8:	c2 9f       	mul	r28, r18
    37fa:	c0 01       	movw	r24, r0
    37fc:	c3 9f       	mul	r28, r19
    37fe:	90 0d       	add	r25, r0
    3800:	d2 9f       	mul	r29, r18
    3802:	90 0d       	add	r25, r0
    3804:	11 24       	eor	r1, r1
    3806:	e0 91 60 03 	lds	r30, 0x0360
    380a:	f0 91 61 03 	lds	r31, 0x0361
    380e:	e0 0f       	add	r30, r16
    3810:	f1 1f       	adc	r31, r17
    3812:	e8 0f       	add	r30, r24
    3814:	f9 1f       	adc	r31, r25
    3816:	80 81       	ld	r24, Z
    3818:	0e 94 95 1a 	call	0x352a	; 0x352a <_ZN12OrangutanLCD9send_dataEh>
    381c:	e0 91 60 03 	lds	r30, 0x0360
    3820:	f0 91 61 03 	lds	r31, 0x0361
    3824:	80 91 4e 03 	lds	r24, 0x034E
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	c8 9f       	mul	r28, r24
    382c:	d0 01       	movw	r26, r0
    382e:	c9 9f       	mul	r28, r25
    3830:	b0 0d       	add	r27, r0
    3832:	d8 9f       	mul	r29, r24
    3834:	b0 0d       	add	r27, r0
    3836:	11 24       	eor	r1, r1
    3838:	e0 0f       	add	r30, r16
    383a:	f1 1f       	adc	r31, r17
    383c:	ae 0f       	add	r26, r30
    383e:	bf 1f       	adc	r27, r31
    3840:	ac 01       	movw	r20, r24
    3842:	c4 9e       	mul	r12, r20
    3844:	c0 01       	movw	r24, r0
    3846:	c5 9e       	mul	r12, r21
    3848:	90 0d       	add	r25, r0
    384a:	d4 9e       	mul	r13, r20
    384c:	90 0d       	add	r25, r0
    384e:	11 24       	eor	r1, r1
    3850:	e8 0f       	add	r30, r24
    3852:	f9 1f       	adc	r31, r25
    3854:	80 81       	ld	r24, Z
    3856:	8c 93       	st	X, r24
    3858:	f3 94       	inc	r15
    385a:	80 91 4e 03 	lds	r24, 0x034E
    385e:	f8 16       	cp	r15, r24
    3860:	38 f2       	brcs	.-114    	; 0x37f0 <lcd_putchar+0xe2>
    3862:	e6 01       	movw	r28, r12
    3864:	60 91 4d 03 	lds	r22, 0x034D
    3868:	86 2f       	mov	r24, r22
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	02 97       	sbiw	r24, 0x02	; 2
    386e:	c8 17       	cp	r28, r24
    3870:	d9 07       	cpc	r29, r25
    3872:	0c f4       	brge	.+2      	; 0x3876 <lcd_putchar+0x168>
    3874:	b3 cf       	rjmp	.-154    	; 0x37dc <lcd_putchar+0xce>
    3876:	62 30       	cpi	r22, 0x02	; 2
    3878:	08 f4       	brcc	.+2      	; 0x387c <lcd_putchar+0x16e>
    387a:	40 c0       	rjmp	.+128    	; 0x38fc <lcd_putchar+0x1ee>
    387c:	62 50       	subi	r22, 0x02	; 2
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
    3884:	ff 24       	eor	r15, r15
    3886:	40 e2       	ldi	r20, 0x20	; 32
    3888:	d4 2e       	mov	r13, r20
    388a:	34 c0       	rjmp	.+104    	; 0x38f4 <lcd_putchar+0x1e6>
    388c:	0f 2d       	mov	r16, r15
    388e:	10 e0       	ldi	r17, 0x00	; 0
    3890:	80 91 4d 03 	lds	r24, 0x034D
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	02 97       	sbiw	r24, 0x02	; 2
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	ac 01       	movw	r20, r24
    389c:	42 9f       	mul	r20, r18
    389e:	c0 01       	movw	r24, r0
    38a0:	43 9f       	mul	r20, r19
    38a2:	90 0d       	add	r25, r0
    38a4:	52 9f       	mul	r21, r18
    38a6:	90 0d       	add	r25, r0
    38a8:	11 24       	eor	r1, r1
    38aa:	e0 91 60 03 	lds	r30, 0x0360
    38ae:	f0 91 61 03 	lds	r31, 0x0361
    38b2:	e0 0f       	add	r30, r16
    38b4:	f1 1f       	adc	r31, r17
    38b6:	e8 0f       	add	r30, r24
    38b8:	f9 1f       	adc	r31, r25
    38ba:	80 81       	ld	r24, Z
    38bc:	0e 94 95 1a 	call	0x352a	; 0x352a <_ZN12OrangutanLCD9send_dataEh>
    38c0:	20 91 4d 03 	lds	r18, 0x034D
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	22 50       	subi	r18, 0x02	; 2
    38c8:	30 40       	sbci	r19, 0x00	; 0
    38ca:	80 91 4e 03 	lds	r24, 0x034E
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	ac 01       	movw	r20, r24
    38d2:	24 9f       	mul	r18, r20
    38d4:	c0 01       	movw	r24, r0
    38d6:	25 9f       	mul	r18, r21
    38d8:	90 0d       	add	r25, r0
    38da:	34 9f       	mul	r19, r20
    38dc:	90 0d       	add	r25, r0
    38de:	11 24       	eor	r1, r1
    38e0:	e0 91 60 03 	lds	r30, 0x0360
    38e4:	f0 91 61 03 	lds	r31, 0x0361
    38e8:	e0 0f       	add	r30, r16
    38ea:	f1 1f       	adc	r31, r17
    38ec:	e8 0f       	add	r30, r24
    38ee:	f9 1f       	adc	r31, r25
    38f0:	d0 82       	st	Z, r13
    38f2:	f3 94       	inc	r15
    38f4:	20 91 4e 03 	lds	r18, 0x034E
    38f8:	f2 16       	cp	r15, r18
    38fa:	40 f2       	brcs	.-112    	; 0x388c <lcd_putchar+0x17e>
    38fc:	60 91 4d 03 	lds	r22, 0x034D
    3900:	61 50       	subi	r22, 0x01	; 1
    3902:	80 e0       	ldi	r24, 0x00	; 0
    3904:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
    3908:	00 e0       	ldi	r16, 0x00	; 0
    390a:	04 c0       	rjmp	.+8      	; 0x3914 <lcd_putchar+0x206>
    390c:	80 e2       	ldi	r24, 0x20	; 32
    390e:	0e 94 95 1a 	call	0x352a	; 0x352a <_ZN12OrangutanLCD9send_dataEh>
    3912:	0f 5f       	subi	r16, 0xFF	; 255
    3914:	80 91 4e 03 	lds	r24, 0x034E
    3918:	08 17       	cp	r16, r24
    391a:	c0 f3       	brcs	.-16     	; 0x390c <lcd_putchar+0x1fe>
    391c:	03 c0       	rjmp	.+6      	; 0x3924 <lcd_putchar+0x216>
    391e:	4f 5f       	subi	r20, 0xFF	; 255
    3920:	40 93 62 03 	sts	0x0362, r20
    3924:	10 92 63 03 	sts	0x0363, r1
    3928:	80 91 63 03 	lds	r24, 0x0363
    392c:	60 91 62 03 	lds	r22, 0x0362
    3930:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN12OrangutanLCD6gotoXYEhh>
    3934:	2e 2d       	mov	r18, r14
    3936:	33 27       	eor	r19, r19
    3938:	27 fd       	sbrc	r18, 7
    393a:	30 95       	com	r19
    393c:	c9 01       	movw	r24, r18
    393e:	cd b7       	in	r28, 0x3d	; 61
    3940:	de b7       	in	r29, 0x3e	; 62
    3942:	e8 e0       	ldi	r30, 0x08	; 8
    3944:	0c 94 6f 1e 	jmp	0x3cde	; 0x3cde <__epilogue_restores__+0x14>

00003948 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    3948:	ef 92       	push	r14
    394a:	ff 92       	push	r15
    394c:	0f 93       	push	r16
    394e:	1f 93       	push	r17
    3950:	cf 93       	push	r28
    3952:	df 93       	push	r29
    3954:	7c 01       	movw	r14, r24
    3956:	06 2f       	mov	r16, r22
    3958:	10 e0       	ldi	r17, 0x00	; 0
    395a:	53 e0       	ldi	r21, 0x03	; 3
    395c:	00 0f       	add	r16, r16
    395e:	11 1f       	adc	r17, r17
    3960:	5a 95       	dec	r21
    3962:	e1 f7       	brne	.-8      	; 0x395c <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    3964:	c0 e0       	ldi	r28, 0x00	; 0
    3966:	d0 e0       	ldi	r29, 0x00	; 0
    3968:	9e 01       	movw	r18, r28
    396a:	20 0f       	add	r18, r16
    396c:	82 2f       	mov	r24, r18
    396e:	80 64       	ori	r24, 0x40	; 64
    3970:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN12OrangutanLCD8send_cmdEh>
    3974:	f7 01       	movw	r30, r14
    3976:	ec 0f       	add	r30, r28
    3978:	fd 1f       	adc	r31, r29
    397a:	e4 91       	lpm	r30, Z+
    397c:	8e 2f       	mov	r24, r30
    397e:	0e 94 95 1a 	call	0x352a	; 0x352a <_ZN12OrangutanLCD9send_dataEh>
    3982:	21 96       	adiw	r28, 0x01	; 1
    3984:	c8 30       	cpi	r28, 0x08	; 8
    3986:	d1 05       	cpc	r29, r1
    3988:	79 f7       	brne	.-34     	; 0x3968 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
    398e:	e6 e0       	ldi	r30, 0x06	; 6
    3990:	0c 94 71 1e 	jmp	0x3ce2	; 0x3ce2 <__epilogue_restores__+0x18>

00003994 <lcd_load_custom_character>:
    3994:	0e 94 a4 1c 	call	0x3948	; 0x3948 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    3998:	08 95       	ret

0000399a <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    399a:	60 e0       	ldi	r22, 0x00	; 0
    399c:	41 e0       	ldi	r20, 0x01	; 1
    399e:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN12OrangutanLCD4sendEhhh>
    39a2:	08 95       	ret

000039a4 <_ZN12OrangutanLCD6scrollEhhj>:
    39a4:	0f 93       	push	r16
    39a6:	1f 93       	push	r17
    39a8:	cf 93       	push	r28
    39aa:	df 93       	push	r29
    39ac:	08 2f       	mov	r16, r24
    39ae:	16 2f       	mov	r17, r22
    39b0:	ea 01       	movw	r28, r20
    39b2:	0b c0       	rjmp	.+22     	; 0x39ca <_ZN12OrangutanLCD6scrollEhhj+0x26>
    39b4:	00 23       	and	r16, r16
    39b6:	11 f4       	brne	.+4      	; 0x39bc <_ZN12OrangutanLCD6scrollEhhj+0x18>
    39b8:	88 e1       	ldi	r24, 0x18	; 24
    39ba:	01 c0       	rjmp	.+2      	; 0x39be <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    39bc:	8c e1       	ldi	r24, 0x1C	; 28
    39be:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN12OrangutanLCD8send_cmdEh>
    39c2:	ce 01       	movw	r24, r28
    39c4:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN13OrangutanTime17delayMillisecondsEj>
    39c8:	11 50       	subi	r17, 0x01	; 1
    39ca:	11 23       	and	r17, r17
    39cc:	99 f7       	brne	.-26     	; 0x39b4 <_ZN12OrangutanLCD6scrollEhhj+0x10>
    39ce:	df 91       	pop	r29
    39d0:	cf 91       	pop	r28
    39d2:	1f 91       	pop	r17
    39d4:	0f 91       	pop	r16
    39d6:	08 95       	ret

000039d8 <lcd_scroll>:
    39d8:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <_ZN12OrangutanLCD6scrollEhhj>
    39dc:	08 95       	ret

000039de <__vector_11>:
    39de:	2f 92       	push	r2
    39e0:	8f 93       	push	r24
    39e2:	9f 93       	push	r25
    39e4:	2f b6       	in	r2, 0x3f	; 63
    39e6:	80 91 6a 03 	lds	r24, 0x036A
    39ea:	90 91 6b 03 	lds	r25, 0x036B
    39ee:	01 96       	adiw	r24, 0x01	; 1
    39f0:	80 93 6a 03 	sts	0x036A, r24
    39f4:	90 93 6b 03 	sts	0x036B, r25
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	80 91 6c 03 	lds	r24, 0x036C
    39fe:	89 1f       	adc	r24, r25
    3a00:	80 93 6c 03 	sts	0x036C, r24
    3a04:	90 91 72 03 	lds	r25, 0x0372
    3a08:	9c 5f       	subi	r25, 0xFC	; 252
    3a0a:	90 93 72 03 	sts	0x0372, r25
    3a0e:	80 91 71 03 	lds	r24, 0x0371
    3a12:	80 51       	subi	r24, 0x10	; 16
    3a14:	97 42       	sbci	r25, 0x27	; 39
    3a16:	c0 f0       	brcs	.+48     	; 0x3a48 <end>
    3a18:	90 93 72 03 	sts	0x0372, r25
    3a1c:	80 93 71 03 	sts	0x0371, r24
    3a20:	80 91 6d 03 	lds	r24, 0x036D
    3a24:	90 91 6e 03 	lds	r25, 0x036E
    3a28:	01 96       	adiw	r24, 0x01	; 1
    3a2a:	80 93 6d 03 	sts	0x036D, r24
    3a2e:	90 93 6e 03 	sts	0x036E, r25
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	80 91 6f 03 	lds	r24, 0x036F
    3a38:	89 1f       	adc	r24, r25
    3a3a:	80 93 6f 03 	sts	0x036F, r24
    3a3e:	80 91 70 03 	lds	r24, 0x0370
    3a42:	89 1f       	adc	r24, r25
    3a44:	80 93 70 03 	sts	0x0370, r24

00003a48 <end>:
    3a48:	2f be       	out	0x3f, r2	; 63
    3a4a:	9f 91       	pop	r25
    3a4c:	8f 91       	pop	r24
    3a4e:	2f 90       	pop	r2
    3a50:	18 95       	reti

00003a52 <ticks_to_microseconds>:
    3a52:	6f 5f       	subi	r22, 0xFF	; 255
    3a54:	7f 4f       	sbci	r23, 0xFF	; 255
    3a56:	8f 4f       	sbci	r24, 0xFF	; 255
    3a58:	9f 4f       	sbci	r25, 0xFF	; 255
    3a5a:	66 0f       	add	r22, r22
    3a5c:	77 1f       	adc	r23, r23
    3a5e:	88 1f       	adc	r24, r24
    3a60:	99 1f       	adc	r25, r25
    3a62:	25 e0       	ldi	r18, 0x05	; 5
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	40 e0       	ldi	r20, 0x00	; 0
    3a68:	50 e0       	ldi	r21, 0x00	; 0
    3a6a:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <__udivmodsi4>
    3a6e:	ca 01       	movw	r24, r20
    3a70:	b9 01       	movw	r22, r18
    3a72:	08 95       	ret

00003a74 <delay_ms>:
    3a74:	28 ee       	ldi	r18, 0xE8	; 232
    3a76:	33 e0       	ldi	r19, 0x03	; 3
    3a78:	09 c0       	rjmp	.+18     	; 0x3a8c <delay_ms+0x18>
    3a7a:	f9 01       	movw	r30, r18
    3a7c:	6f 93       	push	r22
    3a7e:	64 e0       	ldi	r22, 0x04	; 4
    3a80:	6a 95       	dec	r22
    3a82:	f1 f7       	brne	.-4      	; 0x3a80 <delay_ms+0xc>
    3a84:	6f 91       	pop	r22
    3a86:	31 97       	sbiw	r30, 0x01	; 1
    3a88:	c9 f7       	brne	.-14     	; 0x3a7c <delay_ms+0x8>
    3a8a:	01 97       	sbiw	r24, 0x01	; 1
    3a8c:	00 97       	sbiw	r24, 0x00	; 0
    3a8e:	a9 f7       	brne	.-22     	; 0x3a7a <delay_ms+0x6>
    3a90:	08 95       	ret

00003a92 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    3a92:	6f 5f       	subi	r22, 0xFF	; 255
    3a94:	7f 4f       	sbci	r23, 0xFF	; 255
    3a96:	8f 4f       	sbci	r24, 0xFF	; 255
    3a98:	9f 4f       	sbci	r25, 0xFF	; 255
    3a9a:	66 0f       	add	r22, r22
    3a9c:	77 1f       	adc	r23, r23
    3a9e:	88 1f       	adc	r24, r24
    3aa0:	99 1f       	adc	r25, r25
    3aa2:	25 e0       	ldi	r18, 0x05	; 5
    3aa4:	30 e0       	ldi	r19, 0x00	; 0
    3aa6:	40 e0       	ldi	r20, 0x00	; 0
    3aa8:	50 e0       	ldi	r21, 0x00	; 0
    3aaa:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <__udivmodsi4>
    3aae:	ca 01       	movw	r24, r20
    3ab0:	b9 01       	movw	r22, r18
    3ab2:	08 95       	ret

00003ab4 <_ZN13OrangutanTime17delayMillisecondsEj>:
    3ab4:	28 ee       	ldi	r18, 0xE8	; 232
    3ab6:	33 e0       	ldi	r19, 0x03	; 3
    3ab8:	09 c0       	rjmp	.+18     	; 0x3acc <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3aba:	f9 01       	movw	r30, r18
    3abc:	6f 93       	push	r22
    3abe:	64 e0       	ldi	r22, 0x04	; 4
    3ac0:	6a 95       	dec	r22
    3ac2:	f1 f7       	brne	.-4      	; 0x3ac0 <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3ac4:	6f 91       	pop	r22
    3ac6:	31 97       	sbiw	r30, 0x01	; 1
    3ac8:	c9 f7       	brne	.-14     	; 0x3abc <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3aca:	01 97       	sbiw	r24, 0x01	; 1
    3acc:	00 97       	sbiw	r24, 0x00	; 0
    3ace:	a9 f7       	brne	.-22     	; 0x3aba <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    3ad0:	08 95       	ret

00003ad2 <_ZN13OrangutanTime5init2Ev>:
    3ad2:	a0 e7       	ldi	r26, 0x70	; 112
    3ad4:	b0 e0       	ldi	r27, 0x00	; 0
    3ad6:	8c 91       	ld	r24, X
    3ad8:	8e 7f       	andi	r24, 0xFE	; 254
    3ada:	8c 93       	st	X, r24
    3adc:	e0 eb       	ldi	r30, 0xB0	; 176
    3ade:	f0 e0       	ldi	r31, 0x00	; 0
    3ae0:	80 81       	ld	r24, Z
    3ae2:	83 60       	ori	r24, 0x03	; 3
    3ae4:	80 83       	st	Z, r24
    3ae6:	e1 eb       	ldi	r30, 0xB1	; 177
    3ae8:	f0 e0       	ldi	r31, 0x00	; 0
    3aea:	80 81       	ld	r24, Z
    3aec:	80 7f       	andi	r24, 0xF0	; 240
    3aee:	80 83       	st	Z, r24
    3af0:	80 81       	ld	r24, Z
    3af2:	82 60       	ori	r24, 0x02	; 2
    3af4:	80 83       	st	Z, r24
    3af6:	b8 9a       	sbi	0x17, 0	; 23
    3af8:	8c 91       	ld	r24, X
    3afa:	81 60       	ori	r24, 0x01	; 1
    3afc:	8c 93       	st	X, r24
    3afe:	78 94       	sei
    3b00:	08 95       	ret

00003b02 <_ZN13OrangutanTime4initEv>:
    3b02:	80 91 73 03 	lds	r24, 0x0373
    3b06:	88 23       	and	r24, r24
    3b08:	29 f4       	brne	.+10     	; 0x3b14 <_ZN13OrangutanTime4initEv+0x12>
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	80 93 73 03 	sts	0x0373, r24
    3b10:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <_ZN13OrangutanTime5init2Ev>
    3b14:	08 95       	ret

00003b16 <_ZN13OrangutanTime2msEv>:
    3b16:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <_ZN13OrangutanTime4initEv>
    3b1a:	e0 e7       	ldi	r30, 0x70	; 112
    3b1c:	f0 e0       	ldi	r31, 0x00	; 0
    3b1e:	80 81       	ld	r24, Z
    3b20:	8e 7f       	andi	r24, 0xFE	; 254
    3b22:	80 83       	st	Z, r24
    3b24:	20 91 6d 03 	lds	r18, 0x036D
    3b28:	30 91 6e 03 	lds	r19, 0x036E
    3b2c:	40 91 6f 03 	lds	r20, 0x036F
    3b30:	50 91 70 03 	lds	r21, 0x0370
    3b34:	80 81       	ld	r24, Z
    3b36:	81 60       	ori	r24, 0x01	; 1
    3b38:	80 83       	st	Z, r24
    3b3a:	b9 01       	movw	r22, r18
    3b3c:	ca 01       	movw	r24, r20
    3b3e:	08 95       	ret

00003b40 <get_ms>:
    3b40:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <_ZN13OrangutanTime2msEv>
    3b44:	08 95       	ret

00003b46 <_ZN13OrangutanTime5ticksEv>:
    3b46:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <_ZN13OrangutanTime4initEv>
    3b4a:	80 91 70 00 	lds	r24, 0x0070
    3b4e:	8e 7f       	andi	r24, 0xFE	; 254
    3b50:	80 93 70 00 	sts	0x0070, r24
    3b54:	60 91 b2 00 	lds	r22, 0x00B2
    3b58:	80 91 69 03 	lds	r24, 0x0369
    3b5c:	90 91 6a 03 	lds	r25, 0x036A
    3b60:	a0 91 6b 03 	lds	r26, 0x036B
    3b64:	b0 91 6c 03 	lds	r27, 0x036C
    3b68:	b8 99       	sbic	0x17, 0	; 23
    3b6a:	05 c0       	rjmp	.+10     	; 0x3b76 <_ZN13OrangutanTime5ticksEv+0x30>
    3b6c:	26 2f       	mov	r18, r22
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	40 e0       	ldi	r20, 0x00	; 0
    3b72:	50 e0       	ldi	r21, 0x00	; 0
    3b74:	11 c0       	rjmp	.+34     	; 0x3b98 <_ZN13OrangutanTime5ticksEv+0x52>
    3b76:	80 91 b2 00 	lds	r24, 0x00B2
    3b7a:	20 91 69 03 	lds	r18, 0x0369
    3b7e:	30 91 6a 03 	lds	r19, 0x036A
    3b82:	40 91 6b 03 	lds	r20, 0x036B
    3b86:	50 91 6c 03 	lds	r21, 0x036C
    3b8a:	20 50       	subi	r18, 0x00	; 0
    3b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b8e:	4f 4f       	sbci	r20, 0xFF	; 255
    3b90:	5f 4f       	sbci	r21, 0xFF	; 255
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	a0 e0       	ldi	r26, 0x00	; 0
    3b96:	b0 e0       	ldi	r27, 0x00	; 0
    3b98:	28 2b       	or	r18, r24
    3b9a:	39 2b       	or	r19, r25
    3b9c:	4a 2b       	or	r20, r26
    3b9e:	5b 2b       	or	r21, r27
    3ba0:	80 91 70 00 	lds	r24, 0x0070
    3ba4:	81 60       	ori	r24, 0x01	; 1
    3ba6:	80 93 70 00 	sts	0x0070, r24
    3baa:	b9 01       	movw	r22, r18
    3bac:	ca 01       	movw	r24, r20
    3bae:	08 95       	ret

00003bb0 <get_ticks>:
    3bb0:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <_ZN13OrangutanTime5ticksEv>
    3bb4:	08 95       	ret

00003bb6 <_ZN13OrangutanTime5resetEv>:
    3bb6:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <_ZN13OrangutanTime4initEv>
    3bba:	e0 e7       	ldi	r30, 0x70	; 112
    3bbc:	f0 e0       	ldi	r31, 0x00	; 0
    3bbe:	80 81       	ld	r24, Z
    3bc0:	8e 7f       	andi	r24, 0xFE	; 254
    3bc2:	80 83       	st	Z, r24
    3bc4:	10 92 6d 03 	sts	0x036D, r1
    3bc8:	10 92 6e 03 	sts	0x036E, r1
    3bcc:	10 92 6f 03 	sts	0x036F, r1
    3bd0:	10 92 70 03 	sts	0x0370, r1
    3bd4:	10 92 72 03 	sts	0x0372, r1
    3bd8:	10 92 71 03 	sts	0x0371, r1
    3bdc:	80 81       	ld	r24, Z
    3bde:	81 60       	ori	r24, 0x01	; 1
    3be0:	80 83       	st	Z, r24
    3be2:	08 95       	ret

00003be4 <time_reset>:
    3be4:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <_ZN13OrangutanTime5resetEv>
    3be8:	08 95       	ret

00003bea <__mulsi3>:
    3bea:	62 9f       	mul	r22, r18
    3bec:	d0 01       	movw	r26, r0
    3bee:	73 9f       	mul	r23, r19
    3bf0:	f0 01       	movw	r30, r0
    3bf2:	82 9f       	mul	r24, r18
    3bf4:	e0 0d       	add	r30, r0
    3bf6:	f1 1d       	adc	r31, r1
    3bf8:	64 9f       	mul	r22, r20
    3bfa:	e0 0d       	add	r30, r0
    3bfc:	f1 1d       	adc	r31, r1
    3bfe:	92 9f       	mul	r25, r18
    3c00:	f0 0d       	add	r31, r0
    3c02:	83 9f       	mul	r24, r19
    3c04:	f0 0d       	add	r31, r0
    3c06:	74 9f       	mul	r23, r20
    3c08:	f0 0d       	add	r31, r0
    3c0a:	65 9f       	mul	r22, r21
    3c0c:	f0 0d       	add	r31, r0
    3c0e:	99 27       	eor	r25, r25
    3c10:	72 9f       	mul	r23, r18
    3c12:	b0 0d       	add	r27, r0
    3c14:	e1 1d       	adc	r30, r1
    3c16:	f9 1f       	adc	r31, r25
    3c18:	63 9f       	mul	r22, r19
    3c1a:	b0 0d       	add	r27, r0
    3c1c:	e1 1d       	adc	r30, r1
    3c1e:	f9 1f       	adc	r31, r25
    3c20:	bd 01       	movw	r22, r26
    3c22:	cf 01       	movw	r24, r30
    3c24:	11 24       	eor	r1, r1
    3c26:	08 95       	ret

00003c28 <__divmodhi4>:
    3c28:	97 fb       	bst	r25, 7
    3c2a:	09 2e       	mov	r0, r25
    3c2c:	07 26       	eor	r0, r23
    3c2e:	0a d0       	rcall	.+20     	; 0x3c44 <__divmodhi4_neg1>
    3c30:	77 fd       	sbrc	r23, 7
    3c32:	04 d0       	rcall	.+8      	; 0x3c3c <__divmodhi4_neg2>
    3c34:	65 d0       	rcall	.+202    	; 0x3d00 <__udivmodhi4>
    3c36:	06 d0       	rcall	.+12     	; 0x3c44 <__divmodhi4_neg1>
    3c38:	00 20       	and	r0, r0
    3c3a:	1a f4       	brpl	.+6      	; 0x3c42 <__divmodhi4_exit>

00003c3c <__divmodhi4_neg2>:
    3c3c:	70 95       	com	r23
    3c3e:	61 95       	neg	r22
    3c40:	7f 4f       	sbci	r23, 0xFF	; 255

00003c42 <__divmodhi4_exit>:
    3c42:	08 95       	ret

00003c44 <__divmodhi4_neg1>:
    3c44:	f6 f7       	brtc	.-4      	; 0x3c42 <__divmodhi4_exit>
    3c46:	90 95       	com	r25
    3c48:	81 95       	neg	r24
    3c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4c:	08 95       	ret

00003c4e <__udivmodsi4>:
    3c4e:	a1 e2       	ldi	r26, 0x21	; 33
    3c50:	1a 2e       	mov	r1, r26
    3c52:	aa 1b       	sub	r26, r26
    3c54:	bb 1b       	sub	r27, r27
    3c56:	fd 01       	movw	r30, r26
    3c58:	0d c0       	rjmp	.+26     	; 0x3c74 <__udivmodsi4_ep>

00003c5a <__udivmodsi4_loop>:
    3c5a:	aa 1f       	adc	r26, r26
    3c5c:	bb 1f       	adc	r27, r27
    3c5e:	ee 1f       	adc	r30, r30
    3c60:	ff 1f       	adc	r31, r31
    3c62:	a2 17       	cp	r26, r18
    3c64:	b3 07       	cpc	r27, r19
    3c66:	e4 07       	cpc	r30, r20
    3c68:	f5 07       	cpc	r31, r21
    3c6a:	20 f0       	brcs	.+8      	; 0x3c74 <__udivmodsi4_ep>
    3c6c:	a2 1b       	sub	r26, r18
    3c6e:	b3 0b       	sbc	r27, r19
    3c70:	e4 0b       	sbc	r30, r20
    3c72:	f5 0b       	sbc	r31, r21

00003c74 <__udivmodsi4_ep>:
    3c74:	66 1f       	adc	r22, r22
    3c76:	77 1f       	adc	r23, r23
    3c78:	88 1f       	adc	r24, r24
    3c7a:	99 1f       	adc	r25, r25
    3c7c:	1a 94       	dec	r1
    3c7e:	69 f7       	brne	.-38     	; 0x3c5a <__udivmodsi4_loop>
    3c80:	60 95       	com	r22
    3c82:	70 95       	com	r23
    3c84:	80 95       	com	r24
    3c86:	90 95       	com	r25
    3c88:	9b 01       	movw	r18, r22
    3c8a:	ac 01       	movw	r20, r24
    3c8c:	bd 01       	movw	r22, r26
    3c8e:	cf 01       	movw	r24, r30
    3c90:	08 95       	ret

00003c92 <__prologue_saves__>:
    3c92:	2f 92       	push	r2
    3c94:	3f 92       	push	r3
    3c96:	4f 92       	push	r4
    3c98:	5f 92       	push	r5
    3c9a:	6f 92       	push	r6
    3c9c:	7f 92       	push	r7
    3c9e:	8f 92       	push	r8
    3ca0:	9f 92       	push	r9
    3ca2:	af 92       	push	r10
    3ca4:	bf 92       	push	r11
    3ca6:	cf 92       	push	r12
    3ca8:	df 92       	push	r13
    3caa:	ef 92       	push	r14
    3cac:	ff 92       	push	r15
    3cae:	0f 93       	push	r16
    3cb0:	1f 93       	push	r17
    3cb2:	cf 93       	push	r28
    3cb4:	df 93       	push	r29
    3cb6:	cd b7       	in	r28, 0x3d	; 61
    3cb8:	de b7       	in	r29, 0x3e	; 62
    3cba:	ca 1b       	sub	r28, r26
    3cbc:	db 0b       	sbc	r29, r27
    3cbe:	0f b6       	in	r0, 0x3f	; 63
    3cc0:	f8 94       	cli
    3cc2:	de bf       	out	0x3e, r29	; 62
    3cc4:	0f be       	out	0x3f, r0	; 63
    3cc6:	cd bf       	out	0x3d, r28	; 61
    3cc8:	09 94       	ijmp

00003cca <__epilogue_restores__>:
    3cca:	2a 88       	ldd	r2, Y+18	; 0x12
    3ccc:	39 88       	ldd	r3, Y+17	; 0x11
    3cce:	48 88       	ldd	r4, Y+16	; 0x10
    3cd0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cd2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cd4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cd6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cd8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cda:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cdc:	b9 84       	ldd	r11, Y+9	; 0x09
    3cde:	c8 84       	ldd	r12, Y+8	; 0x08
    3ce0:	df 80       	ldd	r13, Y+7	; 0x07
    3ce2:	ee 80       	ldd	r14, Y+6	; 0x06
    3ce4:	fd 80       	ldd	r15, Y+5	; 0x05
    3ce6:	0c 81       	ldd	r16, Y+4	; 0x04
    3ce8:	1b 81       	ldd	r17, Y+3	; 0x03
    3cea:	aa 81       	ldd	r26, Y+2	; 0x02
    3cec:	b9 81       	ldd	r27, Y+1	; 0x01
    3cee:	ce 0f       	add	r28, r30
    3cf0:	d1 1d       	adc	r29, r1
    3cf2:	0f b6       	in	r0, 0x3f	; 63
    3cf4:	f8 94       	cli
    3cf6:	de bf       	out	0x3e, r29	; 62
    3cf8:	0f be       	out	0x3f, r0	; 63
    3cfa:	cd bf       	out	0x3d, r28	; 61
    3cfc:	ed 01       	movw	r28, r26
    3cfe:	08 95       	ret

00003d00 <__udivmodhi4>:
    3d00:	aa 1b       	sub	r26, r26
    3d02:	bb 1b       	sub	r27, r27
    3d04:	51 e1       	ldi	r21, 0x11	; 17
    3d06:	07 c0       	rjmp	.+14     	; 0x3d16 <__udivmodhi4_ep>

00003d08 <__udivmodhi4_loop>:
    3d08:	aa 1f       	adc	r26, r26
    3d0a:	bb 1f       	adc	r27, r27
    3d0c:	a6 17       	cp	r26, r22
    3d0e:	b7 07       	cpc	r27, r23
    3d10:	10 f0       	brcs	.+4      	; 0x3d16 <__udivmodhi4_ep>
    3d12:	a6 1b       	sub	r26, r22
    3d14:	b7 0b       	sbc	r27, r23

00003d16 <__udivmodhi4_ep>:
    3d16:	88 1f       	adc	r24, r24
    3d18:	99 1f       	adc	r25, r25
    3d1a:	5a 95       	dec	r21
    3d1c:	a9 f7       	brne	.-22     	; 0x3d08 <__udivmodhi4_loop>
    3d1e:	80 95       	com	r24
    3d20:	90 95       	com	r25
    3d22:	bc 01       	movw	r22, r24
    3d24:	cd 01       	movw	r24, r26
    3d26:	08 95       	ret

00003d28 <malloc>:
    3d28:	cf 93       	push	r28
    3d2a:	df 93       	push	r29
    3d2c:	bc 01       	movw	r22, r24
    3d2e:	82 30       	cpi	r24, 0x02	; 2
    3d30:	91 05       	cpc	r25, r1
    3d32:	10 f4       	brcc	.+4      	; 0x3d38 <malloc+0x10>
    3d34:	62 e0       	ldi	r22, 0x02	; 2
    3d36:	70 e0       	ldi	r23, 0x00	; 0
    3d38:	a0 91 76 03 	lds	r26, 0x0376
    3d3c:	b0 91 77 03 	lds	r27, 0x0377
    3d40:	ed 01       	movw	r28, r26
    3d42:	e0 e0       	ldi	r30, 0x00	; 0
    3d44:	f0 e0       	ldi	r31, 0x00	; 0
    3d46:	40 e0       	ldi	r20, 0x00	; 0
    3d48:	50 e0       	ldi	r21, 0x00	; 0
    3d4a:	21 c0       	rjmp	.+66     	; 0x3d8e <malloc+0x66>
    3d4c:	88 81       	ld	r24, Y
    3d4e:	99 81       	ldd	r25, Y+1	; 0x01
    3d50:	86 17       	cp	r24, r22
    3d52:	97 07       	cpc	r25, r23
    3d54:	69 f4       	brne	.+26     	; 0x3d70 <malloc+0x48>
    3d56:	8a 81       	ldd	r24, Y+2	; 0x02
    3d58:	9b 81       	ldd	r25, Y+3	; 0x03
    3d5a:	30 97       	sbiw	r30, 0x00	; 0
    3d5c:	19 f0       	breq	.+6      	; 0x3d64 <malloc+0x3c>
    3d5e:	93 83       	std	Z+3, r25	; 0x03
    3d60:	82 83       	std	Z+2, r24	; 0x02
    3d62:	04 c0       	rjmp	.+8      	; 0x3d6c <malloc+0x44>
    3d64:	90 93 77 03 	sts	0x0377, r25
    3d68:	80 93 76 03 	sts	0x0376, r24
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	34 c0       	rjmp	.+104    	; 0x3dd8 <malloc+0xb0>
    3d70:	68 17       	cp	r22, r24
    3d72:	79 07       	cpc	r23, r25
    3d74:	38 f4       	brcc	.+14     	; 0x3d84 <malloc+0x5c>
    3d76:	41 15       	cp	r20, r1
    3d78:	51 05       	cpc	r21, r1
    3d7a:	19 f0       	breq	.+6      	; 0x3d82 <malloc+0x5a>
    3d7c:	84 17       	cp	r24, r20
    3d7e:	95 07       	cpc	r25, r21
    3d80:	08 f4       	brcc	.+2      	; 0x3d84 <malloc+0x5c>
    3d82:	ac 01       	movw	r20, r24
    3d84:	fe 01       	movw	r30, r28
    3d86:	8a 81       	ldd	r24, Y+2	; 0x02
    3d88:	9b 81       	ldd	r25, Y+3	; 0x03
    3d8a:	9c 01       	movw	r18, r24
    3d8c:	e9 01       	movw	r28, r18
    3d8e:	20 97       	sbiw	r28, 0x00	; 0
    3d90:	e9 f6       	brne	.-70     	; 0x3d4c <malloc+0x24>
    3d92:	41 15       	cp	r20, r1
    3d94:	51 05       	cpc	r21, r1
    3d96:	a9 f1       	breq	.+106    	; 0x3e02 <malloc+0xda>
    3d98:	ca 01       	movw	r24, r20
    3d9a:	86 1b       	sub	r24, r22
    3d9c:	97 0b       	sbc	r25, r23
    3d9e:	04 97       	sbiw	r24, 0x04	; 4
    3da0:	08 f4       	brcc	.+2      	; 0x3da4 <malloc+0x7c>
    3da2:	ba 01       	movw	r22, r20
    3da4:	e0 e0       	ldi	r30, 0x00	; 0
    3da6:	f0 e0       	ldi	r31, 0x00	; 0
    3da8:	2a c0       	rjmp	.+84     	; 0x3dfe <malloc+0xd6>
    3daa:	8d 91       	ld	r24, X+
    3dac:	9c 91       	ld	r25, X
    3dae:	11 97       	sbiw	r26, 0x01	; 1
    3db0:	84 17       	cp	r24, r20
    3db2:	95 07       	cpc	r25, r21
    3db4:	f9 f4       	brne	.+62     	; 0x3df4 <malloc+0xcc>
    3db6:	64 17       	cp	r22, r20
    3db8:	75 07       	cpc	r23, r21
    3dba:	81 f4       	brne	.+32     	; 0x3ddc <malloc+0xb4>
    3dbc:	12 96       	adiw	r26, 0x02	; 2
    3dbe:	8d 91       	ld	r24, X+
    3dc0:	9c 91       	ld	r25, X
    3dc2:	13 97       	sbiw	r26, 0x03	; 3
    3dc4:	30 97       	sbiw	r30, 0x00	; 0
    3dc6:	19 f0       	breq	.+6      	; 0x3dce <malloc+0xa6>
    3dc8:	93 83       	std	Z+3, r25	; 0x03
    3dca:	82 83       	std	Z+2, r24	; 0x02
    3dcc:	04 c0       	rjmp	.+8      	; 0x3dd6 <malloc+0xae>
    3dce:	90 93 77 03 	sts	0x0377, r25
    3dd2:	80 93 76 03 	sts	0x0376, r24
    3dd6:	fd 01       	movw	r30, r26
    3dd8:	32 96       	adiw	r30, 0x02	; 2
    3dda:	4f c0       	rjmp	.+158    	; 0x3e7a <malloc+0x152>
    3ddc:	ca 01       	movw	r24, r20
    3dde:	86 1b       	sub	r24, r22
    3de0:	97 0b       	sbc	r25, r23
    3de2:	fd 01       	movw	r30, r26
    3de4:	e8 0f       	add	r30, r24
    3de6:	f9 1f       	adc	r31, r25
    3de8:	61 93       	st	Z+, r22
    3dea:	71 93       	st	Z+, r23
    3dec:	02 97       	sbiw	r24, 0x02	; 2
    3dee:	8d 93       	st	X+, r24
    3df0:	9c 93       	st	X, r25
    3df2:	43 c0       	rjmp	.+134    	; 0x3e7a <malloc+0x152>
    3df4:	fd 01       	movw	r30, r26
    3df6:	82 81       	ldd	r24, Z+2	; 0x02
    3df8:	93 81       	ldd	r25, Z+3	; 0x03
    3dfa:	9c 01       	movw	r18, r24
    3dfc:	d9 01       	movw	r26, r18
    3dfe:	10 97       	sbiw	r26, 0x00	; 0
    3e00:	a1 f6       	brne	.-88     	; 0x3daa <malloc+0x82>
    3e02:	80 91 74 03 	lds	r24, 0x0374
    3e06:	90 91 75 03 	lds	r25, 0x0375
    3e0a:	89 2b       	or	r24, r25
    3e0c:	41 f4       	brne	.+16     	; 0x3e1e <malloc+0xf6>
    3e0e:	80 91 51 03 	lds	r24, 0x0351
    3e12:	90 91 52 03 	lds	r25, 0x0352
    3e16:	90 93 75 03 	sts	0x0375, r25
    3e1a:	80 93 74 03 	sts	0x0374, r24
    3e1e:	40 91 53 03 	lds	r20, 0x0353
    3e22:	50 91 54 03 	lds	r21, 0x0354
    3e26:	41 15       	cp	r20, r1
    3e28:	51 05       	cpc	r21, r1
    3e2a:	41 f4       	brne	.+16     	; 0x3e3c <malloc+0x114>
    3e2c:	4d b7       	in	r20, 0x3d	; 61
    3e2e:	5e b7       	in	r21, 0x3e	; 62
    3e30:	80 91 4f 03 	lds	r24, 0x034F
    3e34:	90 91 50 03 	lds	r25, 0x0350
    3e38:	48 1b       	sub	r20, r24
    3e3a:	59 0b       	sbc	r21, r25
    3e3c:	20 91 74 03 	lds	r18, 0x0374
    3e40:	30 91 75 03 	lds	r19, 0x0375
    3e44:	24 17       	cp	r18, r20
    3e46:	35 07       	cpc	r19, r21
    3e48:	b0 f4       	brcc	.+44     	; 0x3e76 <malloc+0x14e>
    3e4a:	ca 01       	movw	r24, r20
    3e4c:	82 1b       	sub	r24, r18
    3e4e:	93 0b       	sbc	r25, r19
    3e50:	86 17       	cp	r24, r22
    3e52:	97 07       	cpc	r25, r23
    3e54:	80 f0       	brcs	.+32     	; 0x3e76 <malloc+0x14e>
    3e56:	ab 01       	movw	r20, r22
    3e58:	4e 5f       	subi	r20, 0xFE	; 254
    3e5a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e5c:	84 17       	cp	r24, r20
    3e5e:	95 07       	cpc	r25, r21
    3e60:	50 f0       	brcs	.+20     	; 0x3e76 <malloc+0x14e>
    3e62:	42 0f       	add	r20, r18
    3e64:	53 1f       	adc	r21, r19
    3e66:	50 93 75 03 	sts	0x0375, r21
    3e6a:	40 93 74 03 	sts	0x0374, r20
    3e6e:	f9 01       	movw	r30, r18
    3e70:	61 93       	st	Z+, r22
    3e72:	71 93       	st	Z+, r23
    3e74:	02 c0       	rjmp	.+4      	; 0x3e7a <malloc+0x152>
    3e76:	e0 e0       	ldi	r30, 0x00	; 0
    3e78:	f0 e0       	ldi	r31, 0x00	; 0
    3e7a:	cf 01       	movw	r24, r30
    3e7c:	df 91       	pop	r29
    3e7e:	cf 91       	pop	r28
    3e80:	08 95       	ret

00003e82 <free>:
    3e82:	cf 93       	push	r28
    3e84:	df 93       	push	r29
    3e86:	00 97       	sbiw	r24, 0x00	; 0
    3e88:	09 f4       	brne	.+2      	; 0x3e8c <free+0xa>
    3e8a:	50 c0       	rjmp	.+160    	; 0x3f2c <free+0xaa>
    3e8c:	ec 01       	movw	r28, r24
    3e8e:	22 97       	sbiw	r28, 0x02	; 2
    3e90:	1b 82       	std	Y+3, r1	; 0x03
    3e92:	1a 82       	std	Y+2, r1	; 0x02
    3e94:	a0 91 76 03 	lds	r26, 0x0376
    3e98:	b0 91 77 03 	lds	r27, 0x0377
    3e9c:	10 97       	sbiw	r26, 0x00	; 0
    3e9e:	09 f1       	breq	.+66     	; 0x3ee2 <free+0x60>
    3ea0:	40 e0       	ldi	r20, 0x00	; 0
    3ea2:	50 e0       	ldi	r21, 0x00	; 0
    3ea4:	ac 17       	cp	r26, r28
    3ea6:	bd 07       	cpc	r27, r29
    3ea8:	08 f1       	brcs	.+66     	; 0x3eec <free+0x6a>
    3eaa:	bb 83       	std	Y+3, r27	; 0x03
    3eac:	aa 83       	std	Y+2, r26	; 0x02
    3eae:	fe 01       	movw	r30, r28
    3eb0:	21 91       	ld	r18, Z+
    3eb2:	31 91       	ld	r19, Z+
    3eb4:	e2 0f       	add	r30, r18
    3eb6:	f3 1f       	adc	r31, r19
    3eb8:	ae 17       	cp	r26, r30
    3eba:	bf 07       	cpc	r27, r31
    3ebc:	79 f4       	brne	.+30     	; 0x3edc <free+0x5a>
    3ebe:	8d 91       	ld	r24, X+
    3ec0:	9c 91       	ld	r25, X
    3ec2:	11 97       	sbiw	r26, 0x01	; 1
    3ec4:	28 0f       	add	r18, r24
    3ec6:	39 1f       	adc	r19, r25
    3ec8:	2e 5f       	subi	r18, 0xFE	; 254
    3eca:	3f 4f       	sbci	r19, 0xFF	; 255
    3ecc:	39 83       	std	Y+1, r19	; 0x01
    3ece:	28 83       	st	Y, r18
    3ed0:	12 96       	adiw	r26, 0x02	; 2
    3ed2:	8d 91       	ld	r24, X+
    3ed4:	9c 91       	ld	r25, X
    3ed6:	13 97       	sbiw	r26, 0x03	; 3
    3ed8:	9b 83       	std	Y+3, r25	; 0x03
    3eda:	8a 83       	std	Y+2, r24	; 0x02
    3edc:	41 15       	cp	r20, r1
    3ede:	51 05       	cpc	r21, r1
    3ee0:	71 f4       	brne	.+28     	; 0x3efe <free+0x7c>
    3ee2:	d0 93 77 03 	sts	0x0377, r29
    3ee6:	c0 93 76 03 	sts	0x0376, r28
    3eea:	20 c0       	rjmp	.+64     	; 0x3f2c <free+0xaa>
    3eec:	12 96       	adiw	r26, 0x02	; 2
    3eee:	8d 91       	ld	r24, X+
    3ef0:	9c 91       	ld	r25, X
    3ef2:	13 97       	sbiw	r26, 0x03	; 3
    3ef4:	ad 01       	movw	r20, r26
    3ef6:	00 97       	sbiw	r24, 0x00	; 0
    3ef8:	11 f0       	breq	.+4      	; 0x3efe <free+0x7c>
    3efa:	dc 01       	movw	r26, r24
    3efc:	d3 cf       	rjmp	.-90     	; 0x3ea4 <free+0x22>
    3efe:	fa 01       	movw	r30, r20
    3f00:	d3 83       	std	Z+3, r29	; 0x03
    3f02:	c2 83       	std	Z+2, r28	; 0x02
    3f04:	21 91       	ld	r18, Z+
    3f06:	31 91       	ld	r19, Z+
    3f08:	e2 0f       	add	r30, r18
    3f0a:	f3 1f       	adc	r31, r19
    3f0c:	ce 17       	cp	r28, r30
    3f0e:	df 07       	cpc	r29, r31
    3f10:	69 f4       	brne	.+26     	; 0x3f2c <free+0xaa>
    3f12:	88 81       	ld	r24, Y
    3f14:	99 81       	ldd	r25, Y+1	; 0x01
    3f16:	28 0f       	add	r18, r24
    3f18:	39 1f       	adc	r19, r25
    3f1a:	2e 5f       	subi	r18, 0xFE	; 254
    3f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1e:	fa 01       	movw	r30, r20
    3f20:	31 83       	std	Z+1, r19	; 0x01
    3f22:	20 83       	st	Z, r18
    3f24:	8a 81       	ldd	r24, Y+2	; 0x02
    3f26:	9b 81       	ldd	r25, Y+3	; 0x03
    3f28:	93 83       	std	Z+3, r25	; 0x03
    3f2a:	82 83       	std	Z+2, r24	; 0x02
    3f2c:	df 91       	pop	r29
    3f2e:	cf 91       	pop	r28
    3f30:	08 95       	ret

00003f32 <fdevopen>:
    3f32:	0f 93       	push	r16
    3f34:	1f 93       	push	r17
    3f36:	cf 93       	push	r28
    3f38:	df 93       	push	r29
    3f3a:	8c 01       	movw	r16, r24
    3f3c:	eb 01       	movw	r28, r22
    3f3e:	00 97       	sbiw	r24, 0x00	; 0
    3f40:	31 f4       	brne	.+12     	; 0x3f4e <fdevopen+0x1c>
    3f42:	61 15       	cp	r22, r1
    3f44:	71 05       	cpc	r23, r1
    3f46:	19 f4       	brne	.+6      	; 0x3f4e <fdevopen+0x1c>
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	38 c0       	rjmp	.+112    	; 0x3fbe <fdevopen+0x8c>
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	6e e0       	ldi	r22, 0x0E	; 14
    3f54:	70 e0       	ldi	r23, 0x00	; 0
    3f56:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <calloc>
    3f5a:	fc 01       	movw	r30, r24
    3f5c:	9c 01       	movw	r18, r24
    3f5e:	00 97       	sbiw	r24, 0x00	; 0
    3f60:	71 f1       	breq	.+92     	; 0x3fbe <fdevopen+0x8c>
    3f62:	80 e8       	ldi	r24, 0x80	; 128
    3f64:	83 83       	std	Z+3, r24	; 0x03
    3f66:	20 97       	sbiw	r28, 0x00	; 0
    3f68:	71 f0       	breq	.+28     	; 0x3f86 <fdevopen+0x54>
    3f6a:	d3 87       	std	Z+11, r29	; 0x0b
    3f6c:	c2 87       	std	Z+10, r28	; 0x0a
    3f6e:	81 e8       	ldi	r24, 0x81	; 129
    3f70:	83 83       	std	Z+3, r24	; 0x03
    3f72:	80 91 78 03 	lds	r24, 0x0378
    3f76:	90 91 79 03 	lds	r25, 0x0379
    3f7a:	89 2b       	or	r24, r25
    3f7c:	21 f4       	brne	.+8      	; 0x3f86 <fdevopen+0x54>
    3f7e:	f0 93 79 03 	sts	0x0379, r31
    3f82:	e0 93 78 03 	sts	0x0378, r30
    3f86:	01 15       	cp	r16, r1
    3f88:	11 05       	cpc	r17, r1
    3f8a:	c9 f0       	breq	.+50     	; 0x3fbe <fdevopen+0x8c>
    3f8c:	11 87       	std	Z+9, r17	; 0x09
    3f8e:	00 87       	std	Z+8, r16	; 0x08
    3f90:	83 81       	ldd	r24, Z+3	; 0x03
    3f92:	82 60       	ori	r24, 0x02	; 2
    3f94:	83 83       	std	Z+3, r24	; 0x03
    3f96:	80 91 7a 03 	lds	r24, 0x037A
    3f9a:	90 91 7b 03 	lds	r25, 0x037B
    3f9e:	89 2b       	or	r24, r25
    3fa0:	71 f4       	brne	.+28     	; 0x3fbe <fdevopen+0x8c>
    3fa2:	f0 93 7b 03 	sts	0x037B, r31
    3fa6:	e0 93 7a 03 	sts	0x037A, r30
    3faa:	80 91 7c 03 	lds	r24, 0x037C
    3fae:	90 91 7d 03 	lds	r25, 0x037D
    3fb2:	89 2b       	or	r24, r25
    3fb4:	21 f4       	brne	.+8      	; 0x3fbe <fdevopen+0x8c>
    3fb6:	f0 93 7d 03 	sts	0x037D, r31
    3fba:	e0 93 7c 03 	sts	0x037C, r30
    3fbe:	c9 01       	movw	r24, r18
    3fc0:	df 91       	pop	r29
    3fc2:	cf 91       	pop	r28
    3fc4:	1f 91       	pop	r17
    3fc6:	0f 91       	pop	r16
    3fc8:	08 95       	ret

00003fca <calloc>:
    3fca:	0f 93       	push	r16
    3fcc:	1f 93       	push	r17
    3fce:	cf 93       	push	r28
    3fd0:	df 93       	push	r29
    3fd2:	68 9f       	mul	r22, r24
    3fd4:	80 01       	movw	r16, r0
    3fd6:	69 9f       	mul	r22, r25
    3fd8:	10 0d       	add	r17, r0
    3fda:	78 9f       	mul	r23, r24
    3fdc:	10 0d       	add	r17, r0
    3fde:	11 24       	eor	r1, r1
    3fe0:	c8 01       	movw	r24, r16
    3fe2:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <malloc>
    3fe6:	ec 01       	movw	r28, r24
    3fe8:	00 97       	sbiw	r24, 0x00	; 0
    3fea:	29 f0       	breq	.+10     	; 0x3ff6 <calloc+0x2c>
    3fec:	60 e0       	ldi	r22, 0x00	; 0
    3fee:	70 e0       	ldi	r23, 0x00	; 0
    3ff0:	a8 01       	movw	r20, r16
    3ff2:	0e 94 01 20 	call	0x4002	; 0x4002 <memset>
    3ff6:	ce 01       	movw	r24, r28
    3ff8:	df 91       	pop	r29
    3ffa:	cf 91       	pop	r28
    3ffc:	1f 91       	pop	r17
    3ffe:	0f 91       	pop	r16
    4000:	08 95       	ret

00004002 <memset>:
    4002:	dc 01       	movw	r26, r24
    4004:	01 c0       	rjmp	.+2      	; 0x4008 <memset+0x6>
    4006:	6d 93       	st	X+, r22
    4008:	41 50       	subi	r20, 0x01	; 1
    400a:	50 40       	sbci	r21, 0x00	; 0
    400c:	e0 f7       	brcc	.-8      	; 0x4006 <memset+0x4>
    400e:	08 95       	ret

00004010 <_exit>:
    4010:	f8 94       	cli

00004012 <__stop_program>:
    4012:	ff cf       	rjmp	.-2      	; 0x4012 <__stop_program>
