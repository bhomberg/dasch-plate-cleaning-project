
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023e  00800100  00003fa8  0000403c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003fa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080033e  0080033e  0000427a  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  0000427c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002591  00000000  00000000  00006a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00008fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001dc  00000000  00000000  0000900d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000012f8  00000000  00000000  000091e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003df  00000000  00000000  0000a4e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e2e  00000000  00000000  0000a8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  0000c6f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000cf3  00000000  00000000  0000c830  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001016  00000000  00000000  0000d523  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__vector_11>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      8c:	e2 04       	cpc	r14, r2
      8e:	f3 04       	cpc	r15, r3
      90:	0b 05       	cpc	r16, r11
      92:	1e 05       	cpc	r17, r14
      94:	32 05       	cpc	r19, r2
      96:	45 05       	cpc	r20, r5
      98:	59 05       	cpc	r21, r9
      9a:	6e 05       	cpc	r22, r14
      9c:	82 05       	cpc	r24, r2
      9e:	95 05       	cpc	r25, r5
      a0:	99 05       	cpc	r25, r9
      a2:	a9 05       	cpc	r26, r9
      a4:	ad 05       	cpc	r26, r13
      a6:	bb 05       	cpc	r27, r11
      a8:	bf 05       	cpc	r27, r15
      aa:	cd 05       	cpc	r28, r13
      ac:	d1 05       	cpc	r29, r1
      ae:	e0 05       	cpc	r30, r0
      b0:	e4 05       	cpc	r30, r4
      b2:	f2 05       	cpc	r31, r2
      b4:	f5 05       	cpc	r31, r5
      b6:	04 06       	cpc	r0, r20
      b8:	08 06       	cpc	r0, r24
      ba:	27 06       	cpc	r2, r23
      bc:	18 06       	cpc	r1, r24
      be:	2b 06       	cpc	r2, r27
      c0:	2f 06       	cpc	r2, r31
      c2:	3d 06       	cpc	r3, r29
      c4:	40 06       	cpc	r4, r16
      c6:	4f 06       	cpc	r4, r31
      c8:	53 06       	cpc	r5, r19
      ca:	61 06       	cpc	r6, r17
      cc:	67 06       	cpc	r6, r23
      ce:	80 06       	cpc	r8, r16
      d0:	8c 06       	cpc	r8, r28
      d2:	a9 06       	cpc	r10, r25
      d4:	b5 06       	cpc	r11, r21
      d6:	d2 06       	cpc	r13, r18
      d8:	de 06       	cpc	r13, r30
      da:	fb 06       	cpc	r15, r27
      dc:	07 07       	cpc	r16, r23
      de:	22 07       	cpc	r18, r18
      e0:	b8 09       	sbc	r27, r8
      e2:	de 09       	sbc	r29, r14
      e4:	00 0a       	sbc	r0, r16
      e6:	43 0a       	sbc	r4, r19
      e8:	0d 0a       	sbc	r0, r29
      ea:	18 0a       	sbc	r1, r24
      ec:	23 0a       	sbc	r2, r19
      ee:	2d 0a       	sbc	r2, r29
      f0:	38 0a       	sbc	r3, r24
      f2:	7d 0a       	sbc	r7, r29
      f4:	5b 0a       	sbc	r5, r27
      f6:	43 0a       	sbc	r4, r19
      f8:	49 0a       	sbc	r4, r25
      fa:	00 0b       	sbc	r16, r16
      fc:	5b 0a       	sbc	r5, r27
      fe:	04 0b       	sbc	r16, r20
     100:	04 0b       	sbc	r16, r20
     102:	04 0b       	sbc	r16, r20
     104:	04 0b       	sbc	r16, r20
     106:	04 0b       	sbc	r16, r20
     108:	04 0b       	sbc	r16, r20
     10a:	04 0b       	sbc	r16, r20
     10c:	04 0b       	sbc	r16, r20
     10e:	66 0a       	sbc	r6, r22
     110:	75 0a       	sbc	r7, r21
     112:	7d 0a       	sbc	r7, r29
     114:	87 0a       	sbc	r8, r23
     116:	8b 0a       	sbc	r8, r27
     118:	9a 0a       	sbc	r9, r26
     11a:	00 0b       	sbc	r16, r16
     11c:	a0 0a       	sbc	r10, r16
     11e:	b0 0a       	sbc	r11, r16
     120:	bc 0a       	sbc	r11, r28
     122:	c9 0a       	sbc	r12, r25
     124:	de 0a       	sbc	r13, r30
     126:	eb 0a       	sbc	r14, r27
     128:	58 0d       	add	r21, r8
     12a:	7f 0d       	add	r23, r15
     12c:	a1 0d       	add	r26, r1
     12e:	ae 0d       	add	r26, r14
     130:	b8 0d       	add	r27, r8
     132:	c3 0d       	add	r28, r3
     134:	ce 0d       	add	r28, r14
     136:	ad 0e       	add	r10, r29
     138:	ad 0e       	add	r10, r29
     13a:	ad 0e       	add	r10, r29
     13c:	ad 0e       	add	r10, r29
     13e:	ad 0e       	add	r10, r29
     140:	ad 0e       	add	r10, r29
     142:	ad 0e       	add	r10, r29
     144:	ad 0e       	add	r10, r29
     146:	d2 0d       	add	r29, r2
     148:	d9 0d       	add	r29, r9
     14a:	a9 0e       	add	r10, r25
     14c:	e8 0d       	add	r30, r8
     14e:	f3 0d       	add	r31, r3
     150:	fd 0d       	add	r31, r13
     152:	a9 0e       	add	r10, r25
     154:	11 0e       	add	r1, r17
     156:	a9 0e       	add	r10, r25
     158:	23 0e       	add	r2, r19
     15a:	2b 0e       	add	r2, r27
     15c:	35 0e       	add	r3, r21
     15e:	39 0e       	add	r3, r25
     160:	46 0e       	add	r4, r22
     162:	a9 0e       	add	r10, r25
     164:	4c 0e       	add	r4, r28
     166:	5a 0e       	add	r5, r26
     168:	66 0e       	add	r6, r22
     16a:	73 0e       	add	r7, r19
     16c:	88 0e       	add	r8, r24
     16e:	95 0e       	add	r9, r21
     170:	84 11       	cpse	r24, r4
     172:	aa 11       	cpse	r26, r10
     174:	cc 11       	cpse	r28, r12
     176:	09 12       	cpse	r0, r25
     178:	d9 11       	cpse	r29, r9
     17a:	e4 11       	cpse	r30, r4
     17c:	ef 11       	cpse	r30, r15
     17e:	f3 11       	cpse	r31, r3
     180:	fe 11       	cpse	r31, r14
     182:	51 12       	cpse	r5, r17
     184:	25 12       	cpse	r2, r21
     186:	09 12       	cpse	r0, r25
     188:	13 12       	cpse	r1, r19
     18a:	07 13       	cpse	r16, r23
     18c:	25 12       	cpse	r2, r21
     18e:	30 12       	cpse	r3, r16
     190:	37 12       	cpse	r3, r23
     192:	07 13       	cpse	r16, r23
     194:	46 12       	cpse	r4, r22
     196:	51 12       	cpse	r5, r17
     198:	5b 12       	cpse	r5, r27
     19a:	07 13       	cpse	r16, r23
     19c:	6f 12       	cpse	r6, r31
     19e:	07 13       	cpse	r16, r23
     1a0:	81 12       	cpse	r8, r17
     1a2:	89 12       	cpse	r8, r25
     1a4:	93 12       	cpse	r9, r19
     1a6:	97 12       	cpse	r9, r23
     1a8:	a4 12       	cpse	r10, r20
     1aa:	07 13       	cpse	r16, r23
     1ac:	aa 12       	cpse	r10, r26
     1ae:	b8 12       	cpse	r11, r24
     1b0:	c4 12       	cpse	r12, r20
     1b2:	d1 12       	cpse	r13, r17
     1b4:	e6 12       	cpse	r14, r22
     1b6:	f3 12       	cpse	r15, r19
     1b8:	df 15       	cp	r29, r15
     1ba:	06 16       	cp	r0, r22
     1bc:	28 16       	cp	r2, r24
     1be:	63 16       	cp	r6, r19
     1c0:	35 16       	cp	r3, r21
     1c2:	3e 16       	cp	r3, r30
     1c4:	49 16       	cp	r4, r25
     1c6:	4d 16       	cp	r4, r29
     1c8:	58 16       	cp	r5, r24
     1ca:	0b 17       	cp	r16, r27
     1cc:	7f 16       	cp	r7, r31
     1ce:	63 16       	cp	r6, r19
     1d0:	6d 16       	cp	r6, r29
     1d2:	43 17       	cp	r20, r19
     1d4:	7f 16       	cp	r7, r31
     1d6:	8a 16       	cp	r8, r26
     1d8:	91 16       	cp	r9, r17
     1da:	43 17       	cp	r20, r19
     1dc:	a0 16       	cp	r10, r16
     1de:	0b 17       	cp	r16, r27
     1e0:	ab 16       	cp	r10, r27
     1e2:	43 17       	cp	r20, r19
     1e4:	bf 16       	cp	r11, r31
     1e6:	43 17       	cp	r20, r19
     1e8:	d1 16       	cp	r13, r17
     1ea:	d7 16       	cp	r13, r23
     1ec:	e1 16       	cp	r14, r17
     1ee:	e5 16       	cp	r14, r21
     1f0:	f2 16       	cp	r15, r18
     1f2:	43 17       	cp	r20, r19
     1f4:	f8 16       	cp	r15, r24
     1f6:	06 17       	cp	r16, r22
     1f8:	0b 17       	cp	r16, r27
     1fa:	15 17       	cp	r17, r21
     1fc:	24 17       	cp	r18, r20
     1fe:	2e 17       	cp	r18, r30

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	d0 e4       	ldi	r29, 0x40	; 64
     208:	de bf       	out	0x3e, r29	; 62
     20a:	cd bf       	out	0x3d, r28	; 61

0000020c <__do_copy_data>:
     20c:	13 e0       	ldi	r17, 0x03	; 3
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	e8 ea       	ldi	r30, 0xA8	; 168
     214:	ff e3       	ldi	r31, 0x3F	; 63
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	ae 33       	cpi	r26, 0x3E	; 62
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	13 e0       	ldi	r17, 0x03	; 3
     228:	ae e3       	ldi	r26, 0x3E	; 62
     22a:	b3 e0       	ldi	r27, 0x03	; 3
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a6 36       	cpi	r26, 0x66	; 102
     232:	b1 07       	cpc	r27, r17
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 8c 02 	call	0x518	; 0x518 <main>
     23a:	0c 94 d2 1f 	jmp	0x3fa4	; 0x3fa4 <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <_ZN16OrangutanDigital11isInputHighEh>:


	// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
	// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
	// the pin.
	inline static unsigned char isInputHigh(unsigned char pin)
     242:	48 2f       	mov	r20, r24
		io->pinRegister = 0;
		io->portRegister = 0;
		io->ddrRegister = 0;
		io->bitmask = 0;

		if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     244:	88 30       	cpi	r24, 0x08	; 8
     246:	58 f4       	brcc	.+22     	; 0x25e <_ZN16OrangutanDigital11isInputHighEh+0x1c>
		{
			io->pinRegister = (unsigned char*)&PIND;
			io->portRegister = (unsigned char*)&PORTD;
			io->ddrRegister = (unsigned char*)&DDRD;
			io->bitmask = 1 << pin;
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <_ZN16OrangutanDigital11isInputHighEh+0x10>
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	4a 95       	dec	r20
     254:	e2 f7       	brpl	.-8      	; 0x24e <_ZN16OrangutanDigital11isInputHighEh+0xc>
     256:	98 2f       	mov	r25, r24
     258:	e9 e2       	ldi	r30, 0x29	; 41
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	36 c0       	rjmp	.+108    	; 0x2ca <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)

		else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     25e:	80 31       	cpi	r24, 0x10	; 16
     260:	78 f4       	brcc	.+30     	; 0x280 <_ZN16OrangutanDigital11isInputHighEh+0x3e>
		{
			io->pinRegister = (unsigned char*)&PINB;
			io->portRegister = (unsigned char*)&PORTB;
			io->ddrRegister = (unsigned char*)&DDRB;
			io->bitmask = 1 << (pin - 8);
     262:	28 2f       	mov	r18, r24
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	28 50       	subi	r18, 0x08	; 8
     268:	30 40       	sbci	r19, 0x00	; 0
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	02 c0       	rjmp	.+4      	; 0x274 <_ZN16OrangutanDigital11isInputHighEh+0x32>
     270:	88 0f       	add	r24, r24
     272:	99 1f       	adc	r25, r25
     274:	2a 95       	dec	r18
     276:	e2 f7       	brpl	.-8      	; 0x270 <_ZN16OrangutanDigital11isInputHighEh+0x2e>
     278:	98 2f       	mov	r25, r24
     27a:	e3 e2       	ldi	r30, 0x23	; 35
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	25 c0       	rjmp	.+74     	; 0x2ca <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     280:	88 31       	cpi	r24, 0x18	; 24
     282:	78 f4       	brcc	.+30     	; 0x2a2 <_ZN16OrangutanDigital11isInputHighEh+0x60>
		{
			io->pinRegister = (unsigned char*)&PINC;
			io->portRegister = (unsigned char*)&PORTC;
			io->ddrRegister = (unsigned char*)&DDRC;
			io->bitmask = 1 << (pin - 16);
     284:	28 2f       	mov	r18, r24
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	20 51       	subi	r18, 0x10	; 16
     28a:	30 40       	sbci	r19, 0x00	; 0
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	02 c0       	rjmp	.+4      	; 0x296 <_ZN16OrangutanDigital11isInputHighEh+0x54>
     292:	88 0f       	add	r24, r24
     294:	99 1f       	adc	r25, r25
     296:	2a 95       	dec	r18
     298:	e2 f7       	brpl	.-8      	; 0x292 <_ZN16OrangutanDigital11isInputHighEh+0x50>
     29a:	98 2f       	mov	r25, r24
     29c:	e6 e2       	ldi	r30, 0x26	; 38
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	14 c0       	rjmp	.+40     	; 0x2ca <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     2a2:	80 32       	cpi	r24, 0x20	; 32
     2a4:	20 f0       	brcs	.+8      	; 0x2ae <_ZN16OrangutanDigital11isInputHighEh+0x6c>
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	e0 e0       	ldi	r30, 0x00	; 0
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	0e c0       	rjmp	.+28     	; 0x2ca <_ZN16OrangutanDigital11isInputHighEh+0x88>
		{
			io->pinRegister = (unsigned char*)&PINA;
			io->portRegister = (unsigned char*)&PORTA;
			io->ddrRegister = (unsigned char*)&DDRA;
			io->bitmask = 1 << (31 - pin);
     2ae:	2f e1       	ldi	r18, 0x1F	; 31
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	28 1b       	sub	r18, r24
     2b4:	31 09       	sbc	r19, r1
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <_ZN16OrangutanDigital11isInputHighEh+0x7e>
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	2a 95       	dec	r18
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <_ZN16OrangutanDigital11isInputHighEh+0x7a>
     2c4:	98 2f       	mov	r25, r24
     2c6:	e0 e2       	ldi	r30, 0x20	; 32
     2c8:	f0 e0       	ldi	r31, 0x00	; 0

	// low-level method for reading the value of the PIN register for an pin or set of pins
	// described by an IOStruct pointer.
	inline static unsigned char getInputValue(struct IOStruct* ioPin)
	{
		return *(ioPin->pinRegister) & ioPin->bitmask;
     2ca:	80 81       	ld	r24, Z
	inline static unsigned char isInputHigh(unsigned char pin)
	{
		struct IOStruct registers;
		getIORegisters(&registers, pin);
		return getInputValue(&registers);
	}
     2cc:	89 23       	and	r24, r25
     2ce:	08 95       	ret

000002d0 <__cxa_guard_acquire>:

extern "C" int __cxa_guard_acquire(__guard *); 
extern "C" void __cxa_guard_release (__guard *); 
extern "C" void __cxa_guard_abort (__guard *); 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);}; 
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 e0       	ldi	r18, 0x00	; 0
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	88 23       	and	r24, r24
     2da:	11 f4       	brne	.+4      	; 0x2e0 <__cxa_guard_acquire+0x10>
     2dc:	21 e0       	ldi	r18, 0x01	; 1
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	c9 01       	movw	r24, r18
     2e2:	08 95       	ret

000002e4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;}; 
     2e4:	fc 01       	movw	r30, r24
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	80 83       	st	Z, r24
     2ea:	08 95       	ret

000002ec <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
     2ec:	08 95       	ret

000002ee <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void); 
void __cxa_pure_virtual(void) {}; 
     2ee:	08 95       	ret

000002f0 <_Z15button_debounceiPi>:
	}
	return 1;
}*/


bool button_debounce(int counter, int *pstateButton)
     2f0:	0f 93       	push	r16
     2f2:	1f 93       	push	r17
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	8c 01       	movw	r16, r24
     2fa:	eb 01       	movw	r28, r22
{
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && OrangutanDigital::isInputHigh(IO_D0)){
     2fc:	88 81       	ld	r24, Y
     2fe:	99 81       	ldd	r25, Y+1	; 0x01
     300:	89 2b       	or	r24, r25
     302:	69 f4       	brne	.+26     	; 0x31e <_Z15button_debounceiPi+0x2e>
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     30a:	88 23       	and	r24, r24
     30c:	41 f0       	breq	.+16     	; 0x31e <_Z15button_debounceiPi+0x2e>
		counterRefPush = counter;
     30e:	10 93 47 03 	sts	0x0347, r17
     312:	00 93 46 03 	sts	0x0346, r16
		*pstateButton = PRESSED;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	99 83       	std	Y+1, r25	; 0x01
     31c:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     31e:	88 81       	ld	r24, Y
     320:	99 81       	ldd	r25, Y+1	; 0x01
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f9 f4       	brne	.+62     	; 0x364 <_Z15button_debounceiPi+0x74>
		if(counter - counterRefPush > 15){
     326:	80 91 46 03 	lds	r24, 0x0346
     32a:	90 91 47 03 	lds	r25, 0x0347
     32e:	98 01       	movw	r18, r16
     330:	28 1b       	sub	r18, r24
     332:	39 0b       	sbc	r19, r25
     334:	20 31       	cpi	r18, 0x10	; 16
     336:	31 05       	cpc	r19, r1
     338:	74 f0       	brlt	.+28     	; 0x356 <_Z15button_debounceiPi+0x66>
			if(!OrangutanDigital::isInputHigh(IO_D0)){
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     340:	88 23       	and	r24, r24
     342:	81 f4       	brne	.+32     	; 0x364 <_Z15button_debounceiPi+0x74>
				counterRefRel = counter;
     344:	10 93 45 03 	sts	0x0345, r17
     348:	00 93 44 03 	sts	0x0344, r16
				*pstateButton = RELEASED;
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	99 83       	std	Y+1, r25	; 0x01
     352:	88 83       	st	Y, r24
     354:	07 c0       	rjmp	.+14     	; 0x364 <_Z15button_debounceiPi+0x74>
			}
		}
		else if(!OrangutanDigital::isInputHigh(IO_D0)){
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     35c:	88 23       	and	r24, r24
     35e:	11 f4       	brne	.+4      	; 0x364 <_Z15button_debounceiPi+0x74>
			*pstateButton = NONE;
     360:	19 82       	std	Y+1, r1	; 0x01
     362:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     364:	88 81       	ld	r24, Y
     366:	99 81       	ldd	r25, Y+1	; 0x01
     368:	02 97       	sbiw	r24, 0x02	; 2
     36a:	d9 f4       	brne	.+54     	; 0x3a2 <_Z15button_debounceiPi+0xb2>
		if(OrangutanDigital::isInputHigh(IO_D0)){
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     372:	88 23       	and	r24, r24
     374:	49 f0       	breq	.+18     	; 0x388 <_Z15button_debounceiPi+0x98>
			*pstateButton = PRESSED;
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	99 83       	std	Y+1, r25	; 0x01
     37c:	88 83       	st	Y, r24
			counterRefPush = counter;
     37e:	10 93 47 03 	sts	0x0347, r17
     382:	00 93 46 03 	sts	0x0346, r16
     386:	0d c0       	rjmp	.+26     	; 0x3a2 <_Z15button_debounceiPi+0xb2>
		}
		else if(counter - counterRefRel > 15){
     388:	80 91 44 03 	lds	r24, 0x0344
     38c:	90 91 45 03 	lds	r25, 0x0345
     390:	08 1b       	sub	r16, r24
     392:	19 0b       	sbc	r17, r25
     394:	00 31       	cpi	r16, 0x10	; 16
     396:	11 05       	cpc	r17, r1
     398:	24 f0       	brlt	.+8      	; 0x3a2 <_Z15button_debounceiPi+0xb2>
			*pstateButton = NONE;
     39a:	19 82       	std	Y+1, r1	; 0x01
     39c:	18 82       	st	Y, r1
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <_Z15button_debounceiPi+0xb4>
			return true;
     3a2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	08 95       	ret

000003ae <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>:
	OrangutanLCD::print("END");
	}
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor, int totallength1, int totallength2, int totallength3, int totallength4, int totallength5, int steplength1, int steplength2, int steplength3, int steplength4, int steplength5)
     3ae:	2f 92       	push	r2
     3b0:	3f 92       	push	r3
     3b2:	4f 92       	push	r4
     3b4:	5f 92       	push	r5
     3b6:	6f 92       	push	r6
     3b8:	7f 92       	push	r7
     3ba:	8f 92       	push	r8
     3bc:	9f 92       	push	r9
     3be:	af 92       	push	r10
     3c0:	bf 92       	push	r11
     3c2:	cf 92       	push	r12
     3c4:	df 92       	push	r13
     3c6:	ef 92       	push	r14
     3c8:	ff 92       	push	r15
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	df 93       	push	r29
     3d0:	cf 93       	push	r28
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
     3d6:	2c 01       	movw	r4, r24
     3d8:	1a 01       	movw	r2, r20
     3da:	39 01       	movw	r6, r18
{
//motor and write
	if( ((counter - counterRef) % (totallength1) ) < (steplength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     3dc:	fc 01       	movw	r30, r24
     3de:	e6 1b       	sub	r30, r22
     3e0:	f7 0b       	sbc	r31, r23
     3e2:	cf 01       	movw	r24, r30
     3e4:	b4 01       	movw	r22, r8
     3e6:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__divmodhi4>
     3ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3ec:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3ee:	82 17       	cp	r24, r18
     3f0:	93 07       	cpc	r25, r19
     3f2:	34 f4       	brge	.+12     	; 0x400 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
     3f4:	67 28       	or	r6, r7
     3f6:	21 f0       	breq	.+8      	; 0x400 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     3f8:	80 91 3e 03 	lds	r24, 0x033E
     3fc:	81 60       	ori	r24, 0x01	; 1
     3fe:	03 c0       	rjmp	.+6      	; 0x406 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x58>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     400:	80 91 3e 03 	lds	r24, 0x033E
     404:	8e 7f       	andi	r24, 0xFE	; 254
     406:	80 93 3e 03 	sts	0x033E, r24
	}
		if( ((counter - counterRef) % (totallength2) ) < (steplength2) && fixtureMotor)
     40a:	cf 01       	movw	r24, r30
     40c:	6d 89       	ldd	r22, Y+21	; 0x15
     40e:	7e 89       	ldd	r23, Y+22	; 0x16
     410:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__divmodhi4>
     414:	2f 8d       	ldd	r18, Y+31	; 0x1f
     416:	38 a1       	ldd	r19, Y+32	; 0x20
     418:	82 17       	cp	r24, r18
     41a:	93 07       	cpc	r25, r19
     41c:	34 f4       	brge	.+12     	; 0x42a <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
     41e:	01 2b       	or	r16, r17
     420:	21 f0       	breq	.+8      	; 0x42a <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     422:	80 91 3e 03 	lds	r24, 0x033E
     426:	88 60       	ori	r24, 0x08	; 8
     428:	03 c0       	rjmp	.+6      	; 0x430 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x82>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     42a:	80 91 3e 03 	lds	r24, 0x033E
     42e:	87 7f       	andi	r24, 0xF7	; 247
     430:	80 93 3e 03 	sts	0x033E, r24
	}
	if( ((counter - counterRef) % (totallength3) ) < (steplength3) && brush1Motor)
     434:	cf 01       	movw	r24, r30
     436:	6f 89       	ldd	r22, Y+23	; 0x17
     438:	78 8d       	ldd	r23, Y+24	; 0x18
     43a:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__divmodhi4>
     43e:	29 a1       	ldd	r18, Y+33	; 0x21
     440:	3a a1       	ldd	r19, Y+34	; 0x22
     442:	82 17       	cp	r24, r18
     444:	93 07       	cpc	r25, r19
     446:	34 f4       	brge	.+12     	; 0x454 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
     448:	ef 28       	or	r14, r15
     44a:	21 f0       	breq	.+8      	; 0x454 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     44c:	80 91 3e 03 	lds	r24, 0x033E
     450:	80 64       	ori	r24, 0x40	; 64
     452:	03 c0       	rjmp	.+6      	; 0x45a <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xac>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     454:	80 91 3e 03 	lds	r24, 0x033E
     458:	8f 7b       	andi	r24, 0xBF	; 191
     45a:	80 93 3e 03 	sts	0x033E, r24
	}

	if( ((counter - counterRef) % (totallength4) ) < (steplength4) && brush2Motor)
     45e:	cf 01       	movw	r24, r30
     460:	69 8d       	ldd	r22, Y+25	; 0x19
     462:	7a 8d       	ldd	r23, Y+26	; 0x1a
     464:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__divmodhi4>
     468:	2b a1       	ldd	r18, Y+35	; 0x23
     46a:	3c a1       	ldd	r19, Y+36	; 0x24
     46c:	82 17       	cp	r24, r18
     46e:	93 07       	cpc	r25, r19
     470:	34 f4       	brge	.+12     	; 0x47e <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
     472:	cd 28       	or	r12, r13
     474:	21 f0       	breq	.+8      	; 0x47e <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     476:	80 91 3f 03 	lds	r24, 0x033F
     47a:	82 60       	ori	r24, 0x02	; 2
     47c:	03 c0       	rjmp	.+6      	; 0x484 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd6>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     47e:	80 91 3f 03 	lds	r24, 0x033F
     482:	8d 7f       	andi	r24, 0xFD	; 253
     484:	80 93 3f 03 	sts	0x033F, r24
	}

	if( ((counter - counterRefFive) % (totallength5) ) < (steplength5) && paperTowelMotor)
     488:	c2 01       	movw	r24, r4
     48a:	82 19       	sub	r24, r2
     48c:	93 09       	sbc	r25, r3
     48e:	6b 8d       	ldd	r22, Y+27	; 0x1b
     490:	7c 8d       	ldd	r23, Y+28	; 0x1c
     492:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__divmodhi4>
     496:	2d a1       	ldd	r18, Y+37	; 0x25
     498:	3e a1       	ldd	r19, Y+38	; 0x26
     49a:	82 17       	cp	r24, r18
     49c:	93 07       	cpc	r25, r19
     49e:	34 f4       	brge	.+12     	; 0x4ac <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
     4a0:	ab 28       	or	r10, r11
     4a2:	21 f0       	breq	.+8      	; 0x4ac <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     4a4:	80 91 3f 03 	lds	r24, 0x033F
     4a8:	80 61       	ori	r24, 0x10	; 16
     4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x104>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     4ac:	80 91 3f 03 	lds	r24, 0x033F
     4b0:	8f 7e       	andi	r24, 0xEF	; 239
     4b2:	80 93 3f 03 	sts	0x033F, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     4b6:	80 e4       	ldi	r24, 0x40	; 64
     4b8:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
	i2c_write(0x2);									// write command byte
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     4c2:	80 91 3e 03 	lds	r24, 0x033E
     4c6:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     4ca:	80 91 3f 03 	lds	r24, 0x033F
     4ce:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
	i2c_stop();                            // set stop conditon = release bus
     4d2:	0e 94 35 18 	call	0x306a	; 0x306a <_Z8i2c_stopv>

	i2c_start(I2C2+I2C_WRITE);
     4d6:	82 e4       	ldi	r24, 0x42	; 66
     4d8:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
	i2c_write(0x2);
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
	i2c_write(u_outputByte0.outputByte0);
     4e2:	80 91 40 03 	lds	r24, 0x0340
     4e6:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
	i2c_write(u_outputByte1.outputByte1);
     4ea:	80 91 41 03 	lds	r24, 0x0341
     4ee:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
}
     4f2:	cf 91       	pop	r28
     4f4:	df 91       	pop	r29
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	df 90       	pop	r13
     500:	cf 90       	pop	r12
     502:	bf 90       	pop	r11
     504:	af 90       	pop	r10
     506:	9f 90       	pop	r9
     508:	8f 90       	pop	r8
     50a:	7f 90       	pop	r7
     50c:	6f 90       	pop	r6
     50e:	5f 90       	pop	r5
     510:	4f 90       	pop	r4
     512:	3f 90       	pop	r3
     514:	2f 90       	pop	r2
     516:	08 95       	ret

00000518 <main>:
//int button_debounce(int counter, int *pcounterRefPush, int *pcounterRefRel, int *pstateButton);

bool button_debounce(int counter, int *pstateButton);


int main()   
     518:	2f 92       	push	r2
     51a:	3f 92       	push	r3
     51c:	4f 92       	push	r4
     51e:	5f 92       	push	r5
     520:	6f 92       	push	r6
     522:	7f 92       	push	r7
     524:	8f 92       	push	r8
     526:	9f 92       	push	r9
     528:	af 92       	push	r10
     52a:	bf 92       	push	r11
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	df 93       	push	r29
     53a:	cf 93       	push	r28
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	ce 54       	subi	r28, 0x4E	; 78
     542:	d0 40       	sbci	r29, 0x00	; 0
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
	print35 = 1;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     54e:	1a 82       	std	Y+2, r1	; 0x02
     550:	19 82       	std	Y+1, r1	; 0x01
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     552:	10 92 3e 03 	sts	0x033E, r1
	u_motorByte1.motorByte1 = 0;  // initialize motorByte1
     556:	10 92 3f 03 	sts	0x033F, r1
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     55a:	8f ef       	ldi	r24, 0xFF	; 255
     55c:	80 93 40 03 	sts	0x0340, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
     560:	80 93 41 03 	sts	0x0341, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
     564:	10 92 42 03 	sts	0x0342, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
     568:	10 92 43 03 	sts	0x0343, r1
	
	OrangutanLCD::clear();
     56c:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("BEGIN ");
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
// another C++ file.
inline unsigned long get_ms() { return OrangutanTime::ms(); }
inline unsigned long millis() { return OrangutanTime::ms(); }

inline void delay(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
inline void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
     578:	88 ee       	ldi	r24, 0xE8	; 232
     57a:	93 e0       	ldi	r25, 0x03	; 3
     57c:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>
	
	delay_ms(1000);

    i2c_init();                                // init I2C interface
     580:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <_Z8i2c_initv>
	
    OrangutanLCD::print("INIT ");
     584:	87 e0       	ldi	r24, 0x07	; 7
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
     58c:	80 e4       	ldi	r24, 0x40	; 64
     58e:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
     592:	c8 2e       	mov	r12, r24
	i2c_stop();
     594:	0e 94 35 18 	call	0x306a	; 0x306a <_Z8i2c_stopv>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
     598:	82 e4       	ldi	r24, 0x42	; 66
     59a:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
     59e:	08 2f       	mov	r16, r24
	i2c_stop();
     5a0:	0e 94 35 18 	call	0x306a	; 0x306a <_Z8i2c_stopv>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
     5a4:	84 e4       	ldi	r24, 0x44	; 68
     5a6:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
     5aa:	e8 2e       	mov	r14, r24
	i2c_stop();
     5ac:	0e 94 35 18 	call	0x306a	; 0x306a <_Z8i2c_stopv>
    
	OrangutanLCD::clear();
     5b0:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("START ");
     5b4:	8d e0       	ldi	r24, 0x0D	; 13
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
     5bc:	10 e0       	ldi	r17, 0x00	; 0
     5be:	dd 24       	eor	r13, r13
     5c0:	0c 29       	or	r16, r12
     5c2:	1d 29       	or	r17, r13
     5c4:	ff 24       	eor	r15, r15
     5c6:	0e 29       	or	r16, r14
     5c8:	1f 29       	or	r17, r15
     5ca:	01 2b       	or	r16, r17
     5cc:	61 f0       	breq	.+24     	; 0x5e6 <main+0xce>
        /* failed to issue start condition(s), possibly no device found */
        
		OrangutanLCD::print("NAK ");
     5ce:	84 e1       	ldi	r24, 0x14	; 20
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
		i2c_stop();
     5d6:	0e 94 35 18 	call	0x306a	; 0x306a <_Z8i2c_stopv>
		OrangutanLCD::print("STOP ");
     5da:	89 e1       	ldi	r24, 0x19	; 25
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     5e2:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <main+0x2a42>
    }
	else {
		OrangutanLCD::print("ACK ");
     5e6:	8f e1       	ldi	r24, 0x1F	; 31
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
        /* issuing start conditions ok, devices accessible */
		OrangutanLCD::print("BINIT ");
     5ee:	84 e2       	ldi	r24, 0x24	; 36
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
     5f6:	80 e4       	ldi	r24, 0x40	; 64
     5f8:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
		i2c_write(0x6);
     5fc:	86 e0       	ldi	r24, 0x06	; 6
     5fe:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
		i2c_write(0x0);
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
		i2c_write(0x0);
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
		i2c_stop();
     60e:	0e 94 35 18 	call	0x306a	; 0x306a <_Z8i2c_stopv>
		
		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
     612:	82 e4       	ldi	r24, 0x42	; 66
     614:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
		i2c_write(0x6);
     618:	86 e0       	ldi	r24, 0x06	; 6
     61a:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
		i2c_write(0x0);
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
		i2c_write(0x0);
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
		i2c_stop();
     62a:	0e 94 35 18 	call	0x306a	; 0x306a <_Z8i2c_stopv>
     62e:	88 ee       	ldi	r24, 0xE8	; 232
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>
										//Registers default to input, so I2C3 is fine already


		delay_ms(1000);
		OrangutanLCD::clear();
     636:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>


		if(OrangutanDigital::isInputHigh(IO_D3))							//Tests if the switch is set to Maintenance Mode
     63a:	83 e0       	ldi	r24, 0x03	; 3
     63c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     640:	88 23       	and	r24, r24
     642:	09 f4       	brne	.+2      	; 0x646 <main+0x12e>
     644:	62 c4       	rjmp	.+2244   	; 0xf0a <main+0x9f2>
		{
			OrangutanLCD::print("MAINTENANCE");
     646:	8b e2       	ldi	r24, 0x2B	; 43
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     64e:	88 ee       	ldi	r24, 0xE8	; 232
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>
			
			//initialize
			int print = 0;
			int submode = -1;

			OrangutanLCD::clear();
     656:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
			OrangutanLCD::print("SELECT MODE");
     65a:	87 e3       	ldi	r24, 0x37	; 55
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     662:	ee 24       	eor	r14, r14
     664:	ff 24       	eor	r15, r15
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = NONE;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     666:	c7 01       	movw	r24, r14
     668:	be 01       	movw	r22, r28
     66a:	6f 5f       	subi	r22, 0xFF	; 255
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z15button_debounceiPi>
     672:	18 2f       	mov	r17, r24
				counter++;
     674:	08 94       	sec
     676:	e1 1c       	adc	r14, r1
     678:	f1 1c       	adc	r15, r1
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>

			OrangutanLCD::clear();
			OrangutanLCD::print("SELECT MODE");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
     682:	11 23       	and	r17, r17
     684:	81 f3       	breq	.-32     	; 0x666 <main+0x14e>
				counter++;
				delay_ms(1);
			}
			buttonTriggered = false;
			counter = 0;
			OrangutanLCD::clear();
     686:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
     68a:	44 24       	eor	r4, r4
     68c:	55 24       	eor	r5, r5
     68e:	66 24       	eor	r6, r6
     690:	77 24       	eor	r7, r7
     692:	23 96       	adiw	r28, 0x03	; 3
     694:	1f ae       	std	Y+63, r1	; 0x3f
     696:	1e ae       	std	Y+62, r1	; 0x3e
     698:	23 97       	sbiw	r28, 0x03	; 3
     69a:	2f ef       	ldi	r18, 0xFF	; 255
     69c:	3f ef       	ldi	r19, 0xFF	; 255
     69e:	3a af       	std	Y+58, r19	; 0x3a
     6a0:	29 af       	std	Y+57, r18	; 0x39
     6a2:	29 96       	adiw	r28, 0x09	; 9
     6a4:	1f ae       	std	Y+63, r1	; 0x3f
     6a6:	1e ae       	std	Y+62, r1	; 0x3e
     6a8:	29 97       	sbiw	r28, 0x09	; 9
     6aa:	2d 96       	adiw	r28, 0x0d	; 13
     6ac:	1f ae       	std	Y+63, r1	; 0x3f
     6ae:	1e ae       	std	Y+62, r1	; 0x3e
     6b0:	2d 97       	sbiw	r28, 0x0d	; 13
     6b2:	2f 96       	adiw	r28, 0x0f	; 15
     6b4:	1f ae       	std	Y+63, r1	; 0x3f
     6b6:	1e ae       	std	Y+62, r1	; 0x3e
     6b8:	2f 97       	sbiw	r28, 0x0f	; 15
     6ba:	2b 96       	adiw	r28, 0x0b	; 11
     6bc:	1f ae       	std	Y+63, r1	; 0x3f
     6be:	1e ae       	std	Y+62, r1	; 0x3e
     6c0:	2b 97       	sbiw	r28, 0x0b	; 11
     6c2:	22 24       	eor	r2, r2
     6c4:	33 24       	eor	r3, r3
     6c6:	1c 82       	std	Y+4, r1	; 0x04
     6c8:	1b 82       	std	Y+3, r1	; 0x03
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     6ca:	84 e4       	ldi	r24, 0x44	; 68
     6cc:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     6d6:	85 e4       	ldi	r24, 0x45	; 69
     6d8:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     6dc:	0e 94 4f 18 	call	0x309e	; 0x309e <_Z11i2c_readAckv>
     6e0:	80 93 42 03 	sts	0x0342, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     6e4:	0e 94 59 18 	call	0x30b2	; 0x30b2 <_Z11i2c_readNakv>
     6e8:	80 93 43 03 	sts	0x0343, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     6ec:	0e 94 35 18 	call	0x306a	; 0x306a <_Z8i2c_stopv>
						stateButton = 0;
					}
				}*/

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     6f0:	c1 01       	movw	r24, r2
     6f2:	be 01       	movw	r22, r28
     6f4:	6f 5f       	subi	r22, 0xFF	; 255
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z15button_debounceiPi>
     6fc:	18 2f       	mov	r17, r24
							Output only 	--     starts testing each output individually and ends after testing all outputs
							Motor only		--     starts testing each motor individually and ends after testing all motors
							All				--     starts testing each input, then output, then motor, and ends after testing each

				*/
				if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != 0){
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     704:	88 23       	and	r24, r24
     706:	c9 f4       	brne	.+50     	; 0x73a <main+0x222>
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     70e:	88 23       	and	r24, r24
     710:	a1 f4       	brne	.+40     	; 0x73a <main+0x222>
     712:	49 ad       	ldd	r20, Y+57	; 0x39
     714:	5a ad       	ldd	r21, Y+58	; 0x3a
     716:	45 2b       	or	r20, r21
     718:	81 f0       	breq	.+32     	; 0x73a <main+0x222>
					state = S0;
					submode = INPUT;
					OrangutanLCD::clear();
     71a:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     71e:	83 e4       	ldi	r24, 0x43	; 67
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
     72e:	44 24       	eor	r4, r4
     730:	55 24       	eor	r5, r5
     732:	66 24       	eor	r6, r6
     734:	77 24       	eor	r7, r7
     736:	1a ae       	std	Y+58, r1	; 0x3a
     738:	19 ae       	std	Y+57, r1	; 0x39
					print = 0;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != 1){
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     740:	88 23       	and	r24, r24
     742:	e1 f0       	breq	.+56     	; 0x77c <main+0x264>
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     74a:	88 23       	and	r24, r24
     74c:	b9 f4       	brne	.+46     	; 0x77c <main+0x264>
     74e:	89 ad       	ldd	r24, Y+57	; 0x39
     750:	9a ad       	ldd	r25, Y+58	; 0x3a
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	99 f0       	breq	.+38     	; 0x77c <main+0x264>
					state = O0_ON;
					submode = OUTPUT;
					OrangutanLCD::clear();
     756:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("OUTPUTS");
     75a:	8b e4       	ldi	r24, 0x4B	; 75
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
     76a:	98 e0       	ldi	r25, 0x08	; 8
     76c:	49 2e       	mov	r4, r25
     76e:	51 2c       	mov	r5, r1
     770:	66 24       	eor	r6, r6
     772:	77 24       	eor	r7, r7
     774:	a1 e0       	ldi	r26, 0x01	; 1
     776:	b0 e0       	ldi	r27, 0x00	; 0
     778:	ba af       	std	Y+58, r27	; 0x3a
     77a:	a9 af       	std	Y+57, r26	; 0x39
					print = 0;
				}
				if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != 2){
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     782:	88 23       	and	r24, r24
     784:	e9 f4       	brne	.+58     	; 0x7c0 <main+0x2a8>
     786:	82 e0       	ldi	r24, 0x02	; 2
     788:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     78c:	88 23       	and	r24, r24
     78e:	c1 f0       	breq	.+48     	; 0x7c0 <main+0x2a8>
     790:	29 ad       	ldd	r18, Y+57	; 0x39
     792:	3a ad       	ldd	r19, Y+58	; 0x3a
     794:	22 30       	cpi	r18, 0x02	; 2
     796:	31 05       	cpc	r19, r1
     798:	99 f0       	breq	.+38     	; 0x7c0 <main+0x2a8>
					state = M1_F;
					submode = MOTOR;
					OrangutanLCD::clear();
     79a:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MOTORS ");
     79e:	83 e5       	ldi	r24, 0x53	; 83
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
     7ae:	80 e2       	ldi	r24, 0x20	; 32
     7b0:	48 2e       	mov	r4, r24
     7b2:	51 2c       	mov	r5, r1
     7b4:	66 24       	eor	r6, r6
     7b6:	77 24       	eor	r7, r7
     7b8:	42 e0       	ldi	r20, 0x02	; 2
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	5a af       	std	Y+58, r21	; 0x3a
     7be:	49 af       	std	Y+57, r20	; 0x39
					print = 0;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != 3){
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     7c6:	88 23       	and	r24, r24
     7c8:	d9 f0       	breq	.+54     	; 0x800 <main+0x2e8>
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     7d0:	88 23       	and	r24, r24
     7d2:	b1 f0       	breq	.+44     	; 0x800 <main+0x2e8>
     7d4:	89 ad       	ldd	r24, Y+57	; 0x39
     7d6:	9a ad       	ldd	r25, Y+58	; 0x3a
     7d8:	03 97       	sbiw	r24, 0x03	; 3
     7da:	91 f0       	breq	.+36     	; 0x800 <main+0x2e8>
					state = S0;
					submode = ALL;
					OrangutanLCD::clear();
     7dc:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     7e0:	83 e4       	ldi	r24, 0x43	; 67
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
     7f0:	44 24       	eor	r4, r4
     7f2:	55 24       	eor	r5, r5
     7f4:	66 24       	eor	r6, r6
     7f6:	77 24       	eor	r7, r7
     7f8:	a3 e0       	ldi	r26, 0x03	; 3
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	ba af       	std	Y+58, r27	; 0x3a
     7fe:	a9 af       	std	Y+57, r26	; 0x39
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
     800:	11 23       	and	r17, r17
     802:	09 f4       	brne	.+2      	; 0x806 <main+0x2ee>
     804:	d2 c0       	rjmp	.+420    	; 0x9aa <main+0x492>
					if(state <= S7){				//if it's doing the sensors
     806:	b8 e0       	ldi	r27, 0x08	; 8
     808:	4b 16       	cp	r4, r27
     80a:	51 04       	cpc	r5, r1
     80c:	0c f5       	brge	.+66     	; 0x850 <main+0x338>
						OrangutanLCD::gotoXY(0,1);
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
						buttonTriggered = false;
						state ++;
     816:	08 94       	sec
     818:	41 1c       	adc	r4, r1
     81a:	51 1c       	adc	r5, r1
						counterRef = counter;
						print = 0;
						if(state == S7 + 1){		//accounts for possible end of maintenance mode after sensors
     81c:	28 e0       	ldi	r18, 0x08	; 8
     81e:	42 16       	cp	r4, r18
     820:	51 04       	cpc	r5, r1
     822:	09 f0       	breq	.+2      	; 0x826 <main+0x30e>
     824:	bc c0       	rjmp	.+376    	; 0x99e <main+0x486>
							OrangutanLCD::clear();
     826:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
							if(submode == 0){
     82a:	49 ad       	ldd	r20, Y+57	; 0x39
     82c:	5a ad       	ldd	r21, Y+58	; 0x3a
     82e:	45 2b       	or	r20, r21
     830:	11 f4       	brne	.+4      	; 0x836 <main+0x31e>
     832:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <main+0x2a82>
								state = DONEM;
							}
							else{
								OrangutanLCD::print("OUTPUTS");
     836:	8b e4       	ldi	r24, 0x4B	; 75
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
								OrangutanLCD::gotoXY(0,1);
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
     846:	23 96       	adiw	r28, 0x03	; 3
     848:	3f ae       	std	Y+63, r3	; 0x3f
     84a:	2e ae       	std	Y+62, r2	; 0x3e
     84c:	23 97       	sbiw	r28, 0x03	; 3
     84e:	5d c1       	rjmp	.+698    	; 0xb0a <main+0x5f2>
     850:	c2 01       	movw	r24, r4
     852:	81 70       	andi	r24, 0x01	; 1
     854:	90 70       	andi	r25, 0x00	; 0
							}
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
     856:	50 e2       	ldi	r21, 0x20	; 32
     858:	45 16       	cp	r4, r21
     85a:	51 04       	cpc	r5, r1
     85c:	8c f5       	brge	.+98     	; 0x8c0 <main+0x3a8>
						if(state % 2 == 0){			//current state is an 'on' state
     85e:	89 2b       	or	r24, r25
     860:	49 f4       	brne	.+18     	; 0x874 <main+0x35c>
							OrangutanLCD::gotoXY(13,1);
     862:	8d e0       	ldi	r24, 0x0D	; 13
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("OFF");
     86a:	8b e5       	ldi	r24, 0x5B	; 91
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     872:	04 c0       	rjmp	.+8      	; 0x87c <main+0x364>
						}
						else{						//current state is an 'off' state
							OrangutanLCD::gotoXY(0,1);
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
						}
						buttonTriggered = false;
						state ++;
     87c:	08 94       	sec
     87e:	41 1c       	adc	r4, r1
     880:	51 1c       	adc	r5, r1
						counterRef = counter;
						print = 0;
						if(state == O11_OFF + 1){	//accounts for possible end of maintenance mode after outputs
     882:	80 e2       	ldi	r24, 0x20	; 32
     884:	48 16       	cp	r4, r24
     886:	51 04       	cpc	r5, r1
     888:	09 f0       	breq	.+2      	; 0x88c <main+0x374>
     88a:	89 c0       	rjmp	.+274    	; 0x99e <main+0x486>
							OrangutanLCD::clear();
     88c:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
							if(submode == 1){
     890:	a9 ad       	ldd	r26, Y+57	; 0x39
     892:	ba ad       	ldd	r27, Y+58	; 0x3a
     894:	11 97       	sbiw	r26, 0x01	; 1
     896:	11 f4       	brne	.+4      	; 0x89c <main+0x384>
     898:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <main+0x2a82>
								state = DONEM;
							}
							else{
								u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
     89c:	80 91 3e 03 	lds	r24, 0x033E
     8a0:	84 60       	ori	r24, 0x04	; 4
     8a2:	80 93 3e 03 	sts	0x033E, r24
								OrangutanLCD::print("MOTORS");
     8a6:	8f e5       	ldi	r24, 0x5F	; 95
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
								OrangutanLCD::gotoXY(0,1);
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	61 e0       	ldi	r22, 0x01	; 1
     8b2:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
     8b6:	23 96       	adiw	r28, 0x03	; 3
     8b8:	3f ae       	std	Y+63, r3	; 0x3f
     8ba:	2e ae       	std	Y+62, r2	; 0x3e
     8bc:	23 97       	sbiw	r28, 0x03	; 3
     8be:	0a c2       	rjmp	.+1044   	; 0xcd4 <main+0x7bc>
							}
						}
					}
					else{							//if it's doing the motors
						buttonTriggered = false;
						state ++;
     8c0:	82 01       	movw	r16, r4
     8c2:	0f 5f       	subi	r16, 0xFF	; 255
     8c4:	1f 4f       	sbci	r17, 0xFF	; 255
						counterRef = counter;
						print = 0;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
     8c6:	89 2b       	or	r24, r25
     8c8:	49 f4       	brne	.+18     	; 0x8dc <main+0x3c4>
							OrangutanLCD::gotoXY(11,1);
     8ca:	8b e0       	ldi	r24, 0x0B	; 11
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("BACK ");
     8d2:	86 e6       	ldi	r24, 0x66	; 102
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     8da:	14 c0       	rjmp	.+40     	; 0x904 <main+0x3ec>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
     8dc:	06 32       	cpi	r16, 0x26	; 38
     8de:	11 05       	cpc	r17, r1
     8e0:	a9 f1       	breq	.+106    	; 0x94c <main+0x434>
     8e2:	07 32       	cpi	r16, 0x27	; 39
     8e4:	11 05       	cpc	r17, r1
     8e6:	3c f4       	brge	.+14     	; 0x8f6 <main+0x3de>
     8e8:	02 32       	cpi	r16, 0x22	; 34
     8ea:	11 05       	cpc	r17, r1
     8ec:	69 f0       	breq	.+26     	; 0x908 <main+0x3f0>
     8ee:	04 32       	cpi	r16, 0x24	; 36
     8f0:	11 05       	cpc	r17, r1
     8f2:	41 f4       	brne	.+16     	; 0x904 <main+0x3ec>
     8f4:	18 c0       	rjmp	.+48     	; 0x926 <main+0x40e>
     8f6:	08 32       	cpi	r16, 0x28	; 40
     8f8:	11 05       	cpc	r17, r1
     8fa:	b9 f1       	breq	.+110    	; 0x96a <main+0x452>
     8fc:	0a 32       	cpi	r16, 0x2A	; 42
     8fe:	11 05       	cpc	r17, r1
     900:	09 f4       	brne	.+2      	; 0x904 <main+0x3ec>
     902:	42 c0       	rjmp	.+132    	; 0x988 <main+0x470>
     904:	28 01       	movw	r4, r16
     906:	4b c0       	rjmp	.+150    	; 0x99e <main+0x486>
								case M1_B + 1:
									OrangutanLCD::gotoXY(0,1);
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
     910:	80 91 3e 03 	lds	r24, 0x033E
     914:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
     916:	80 62       	ori	r24, 0x20	; 32
     918:	80 93 3e 03 	sts	0x033E, r24
     91c:	23 96       	adiw	r28, 0x03	; 3
     91e:	3f ae       	std	Y+63, r3	; 0x3f
     920:	2e ae       	std	Y+62, r2	; 0x3e
     922:	23 97       	sbiw	r28, 0x03	; 3
     924:	fc c1       	rjmp	.+1016   	; 0xd1e <main+0x806>
									break;
								case M2_B + 1:
									OrangutanLCD::gotoXY(0,1);
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
     92e:	80 91 3e 03 	lds	r24, 0x033E
     932:	8f 7d       	andi	r24, 0xDF	; 223
     934:	80 93 3e 03 	sts	0x033E, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
     938:	80 91 3f 03 	lds	r24, 0x033F
     93c:	81 60       	ori	r24, 0x01	; 1
     93e:	80 93 3f 03 	sts	0x033F, r24
     942:	23 96       	adiw	r28, 0x03	; 3
     944:	3f ae       	std	Y+63, r3	; 0x3f
     946:	2e ae       	std	Y+62, r2	; 0x3e
     948:	23 97       	sbiw	r28, 0x03	; 3
     94a:	12 c2       	rjmp	.+1060   	; 0xd70 <main+0x858>
									break;
								case M3_B + 1:
									OrangutanLCD::gotoXY(0,1);
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
     954:	80 91 3f 03 	lds	r24, 0x033F
     958:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
     95a:	88 60       	ori	r24, 0x08	; 8
     95c:	80 93 3f 03 	sts	0x033F, r24
     960:	23 96       	adiw	r28, 0x03	; 3
     962:	3f ae       	std	Y+63, r3	; 0x3f
     964:	2e ae       	std	Y+62, r2	; 0x3e
     966:	23 97       	sbiw	r28, 0x03	; 3
     968:	2c c2       	rjmp	.+1112   	; 0xdc2 <main+0x8aa>
									break;
								case M4_B + 1:
									OrangutanLCD::gotoXY(0,1);
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
     972:	80 91 3f 03 	lds	r24, 0x033F
     976:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
     978:	80 64       	ori	r24, 0x40	; 64
     97a:	80 93 3f 03 	sts	0x033F, r24
     97e:	23 96       	adiw	r28, 0x03	; 3
     980:	3f ae       	std	Y+63, r3	; 0x3f
     982:	2e ae       	std	Y+62, r2	; 0x3e
     984:	23 97       	sbiw	r28, 0x03	; 3
     986:	46 c2       	rjmp	.+1164   	; 0xe14 <main+0x8fc>
									break;
								case M5_B + 1:
									OrangutanLCD::clear();
     988:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
									u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
     98c:	80 91 3f 03 	lds	r24, 0x033F
     990:	8f 7b       	andi	r24, 0xBF	; 191
     992:	80 93 3f 03 	sts	0x033F, r24
     996:	1c 82       	std	Y+4, r1	; 0x04
     998:	1b 82       	std	Y+3, r1	; 0x03
     99a:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <main+0x2a82>
     99e:	23 96       	adiw	r28, 0x03	; 3
     9a0:	3f ae       	std	Y+63, r3	; 0x3f
     9a2:	2e ae       	std	Y+62, r2	; 0x3e
     9a4:	23 97       	sbiw	r28, 0x03	; 3
     9a6:	66 24       	eor	r6, r6
     9a8:	77 24       	eor	r7, r7
					print = 0;
					paperTowelMotor = 0;
				}*/

				//state actions
				switch (state) {
     9aa:	f2 01       	movw	r30, r4
     9ac:	ea 32       	cpi	r30, 0x2A	; 42
     9ae:	f1 05       	cpc	r31, r1
     9b0:	08 f0       	brcs	.+2      	; 0x9b4 <main+0x49c>
     9b2:	51 c2       	rjmp	.+1186   	; 0xe56 <main+0x93e>
     9b4:	ea 5b       	subi	r30, 0xBA	; 186
     9b6:	ff 4f       	sbci	r31, 0xFF	; 255
     9b8:	ee 0f       	add	r30, r30
     9ba:	ff 1f       	adc	r31, r31
     9bc:	05 90       	lpm	r0, Z+
     9be:	f4 91       	lpm	r31, Z+
     9c0:	e0 2d       	mov	r30, r0
     9c2:	09 94       	ijmp
					case S0:
						if(print == 0){
     9c4:	61 14       	cp	r6, r1
     9c6:	71 04       	cpc	r7, r1
     9c8:	39 f4       	brne	.+14     	; 0x9d8 <main+0x4c0>
							OrangutanLCD::print("SENSOR 0");
     9ca:	8c e6       	ldi	r24, 0x6C	; 108
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     9d2:	01 e0       	ldi	r16, 0x01	; 1
     9d4:	60 2e       	mov	r6, r16
     9d6:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     9d8:	8f e0       	ldi	r24, 0x0F	; 15
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
	// position and will not span lines.
	static void print(unsigned long value);
	static void print(long value);
	static inline void print(unsigned int value)
	{
		print((unsigned long)value);
     9e0:	60 91 42 03 	lds	r22, 0x0342
     9e4:	11 c0       	rjmp	.+34     	; 0xa08 <main+0x4f0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.plate);
						break;
					case S1:
						if(print == 0){
     9e6:	61 14       	cp	r6, r1
     9e8:	71 04       	cpc	r7, r1
     9ea:	39 f4       	brne	.+14     	; 0x9fa <main+0x4e2>
							OrangutanLCD::print("SENSOR 1");
     9ec:	85 e7       	ldi	r24, 0x75	; 117
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     9f4:	11 e0       	ldi	r17, 0x01	; 1
     9f6:	61 2e       	mov	r6, r17
     9f8:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     9fa:	8f e0       	ldi	r24, 0x0F	; 15
     9fc:	61 e0       	ldi	r22, 0x01	; 1
     9fe:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
     a02:	60 91 42 03 	lds	r22, 0x0342
     a06:	66 95       	lsr	r22
     a08:	61 70       	andi	r22, 0x01	; 1
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN12OrangutanLCD5printEm>
     a14:	20 c2       	rjmp	.+1088   	; 0xe56 <main+0x93e>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureLift);
						break;
					case S2:
						if(print == 0){
     a16:	61 14       	cp	r6, r1
     a18:	71 04       	cpc	r7, r1
     a1a:	39 f4       	brne	.+14     	; 0xa2a <main+0x512>
							OrangutanLCD::print("SENSOR 2");
     a1c:	8e e7       	ldi	r24, 0x7E	; 126
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     a24:	b1 e0       	ldi	r27, 0x01	; 1
     a26:	6b 2e       	mov	r6, r27
     a28:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a2a:	8f e0       	ldi	r24, 0x0F	; 15
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
     a32:	60 91 42 03 	lds	r22, 0x0342
     a36:	66 95       	lsr	r22
     a38:	66 95       	lsr	r22
     a3a:	e6 cf       	rjmp	.-52     	; 0xa08 <main+0x4f0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureHome);
						break;
					case S3:
						if(print == 0){
     a3c:	61 14       	cp	r6, r1
     a3e:	71 04       	cpc	r7, r1
     a40:	39 f4       	brne	.+14     	; 0xa50 <main+0x538>
							OrangutanLCD::print("SENSOR 3");
     a42:	87 e8       	ldi	r24, 0x87	; 135
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     a4a:	a1 e0       	ldi	r26, 0x01	; 1
     a4c:	6a 2e       	mov	r6, r26
     a4e:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a50:	8f e0       	ldi	r24, 0x0F	; 15
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
     a58:	60 91 42 03 	lds	r22, 0x0342
     a5c:	66 95       	lsr	r22
     a5e:	66 95       	lsr	r22
     a60:	66 95       	lsr	r22
     a62:	d2 cf       	rjmp	.-92     	; 0xa08 <main+0x4f0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixturePlate);
						break;
					case S4:
						if(print == 0){
     a64:	61 14       	cp	r6, r1
     a66:	71 04       	cpc	r7, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <main+0x560>
							OrangutanLCD::print("SENSOR 4");
     a6a:	80 e9       	ldi	r24, 0x90	; 144
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     a72:	f1 e0       	ldi	r31, 0x01	; 1
     a74:	6f 2e       	mov	r6, r31
     a76:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a78:	8f e0       	ldi	r24, 0x0F	; 15
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
     a80:	60 91 42 03 	lds	r22, 0x0342
     a84:	62 95       	swap	r22
     a86:	6f 70       	andi	r22, 0x0F	; 15
     a88:	bf cf       	rjmp	.-130    	; 0xa08 <main+0x4f0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
						break;
					case S5:
						if(print == 0){
     a8a:	61 14       	cp	r6, r1
     a8c:	71 04       	cpc	r7, r1
     a8e:	39 f4       	brne	.+14     	; 0xa9e <main+0x586>
							OrangutanLCD::print("SENSOR 5");
     a90:	89 e9       	ldi	r24, 0x99	; 153
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     a98:	e1 e0       	ldi	r30, 0x01	; 1
     a9a:	6e 2e       	mov	r6, r30
     a9c:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a9e:	8f e0       	ldi	r24, 0x0F	; 15
     aa0:	61 e0       	ldi	r22, 0x01	; 1
     aa2:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
     aa6:	60 91 42 03 	lds	r22, 0x0342
     aaa:	62 95       	swap	r22
     aac:	66 95       	lsr	r22
     aae:	67 70       	andi	r22, 0x07	; 7
     ab0:	ab cf       	rjmp	.-170    	; 0xa08 <main+0x4f0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
						break;
					case S6:
						if(print == 0){
     ab2:	61 14       	cp	r6, r1
     ab4:	71 04       	cpc	r7, r1
     ab6:	39 f4       	brne	.+14     	; 0xac6 <main+0x5ae>
							OrangutanLCD::print("SENSOR 6");
     ab8:	82 ea       	ldi	r24, 0xA2	; 162
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     ac0:	71 e0       	ldi	r23, 0x01	; 1
     ac2:	67 2e       	mov	r6, r23
     ac4:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     ac6:	8f e0       	ldi	r24, 0x0F	; 15
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
     ace:	60 91 42 03 	lds	r22, 0x0342
     ad2:	62 95       	swap	r22
     ad4:	66 95       	lsr	r22
     ad6:	66 95       	lsr	r22
     ad8:	63 70       	andi	r22, 0x03	; 3
     ada:	96 cf       	rjmp	.-212    	; 0xa08 <main+0x4f0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry1);
						break;
					case S7:
						if(print == 0){
     adc:	61 14       	cp	r6, r1
     ade:	71 04       	cpc	r7, r1
     ae0:	39 f4       	brne	.+14     	; 0xaf0 <main+0x5d8>
							OrangutanLCD::print("SENSOR 7");
     ae2:	8b ea       	ldi	r24, 0xAB	; 171
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	66 2e       	mov	r6, r22
     aee:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     af0:	8f e0       	ldi	r24, 0x0F	; 15
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
     af8:	60 91 42 03 	lds	r22, 0x0342
     afc:	66 1f       	adc	r22, r22
     afe:	66 27       	eor	r22, r22
     b00:	66 1f       	adc	r22, r22
     b02:	83 cf       	rjmp	.-250    	; 0xa0a <main+0x4f2>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry2);
						break;
					case O0_ON:
						if(print == 0){
     b04:	61 14       	cp	r6, r1
     b06:	71 04       	cpc	r7, r1
     b08:	39 f4       	brne	.+14     	; 0xb18 <main+0x600>
							OrangutanLCD::print("AC POWER     ON ");
     b0a:	84 eb       	ldi	r24, 0xB4	; 180
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     b12:	51 e0       	ldi	r21, 0x01	; 1
     b14:	65 2e       	mov	r6, r21
     b16:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
     b18:	80 91 40 03 	lds	r24, 0x0340
     b1c:	8e 7f       	andi	r24, 0xFE	; 254
     b1e:	80 93 40 03 	sts	0x0340, r24
     b22:	48 e0       	ldi	r20, 0x08	; 8
     b24:	44 2e       	mov	r4, r20
     b26:	51 2c       	mov	r5, r1
     b28:	96 c1       	rjmp	.+812    	; 0xe56 <main+0x93e>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
     b2a:	80 91 40 03 	lds	r24, 0x0340
     b2e:	81 60       	ori	r24, 0x01	; 1
     b30:	0d c0       	rjmp	.+26     	; 0xb4c <main+0x634>
						break;
					case O1_ON:
						if(print == 0){
     b32:	61 14       	cp	r6, r1
     b34:	71 04       	cpc	r7, r1
     b36:	39 f4       	brne	.+14     	; 0xb46 <main+0x62e>
							OrangutanLCD::print("BLOWER       ON  ");
     b38:	85 ec       	ldi	r24, 0xC5	; 197
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     b40:	31 e0       	ldi	r19, 0x01	; 1
     b42:	63 2e       	mov	r6, r19
     b44:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     b46:	80 91 40 03 	lds	r24, 0x0340
     b4a:	8d 7f       	andi	r24, 0xFD	; 253
     b4c:	80 93 40 03 	sts	0x0340, r24
     b50:	82 c1       	rjmp	.+772    	; 0xe56 <main+0x93e>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     b52:	80 91 40 03 	lds	r24, 0x0340
     b56:	82 60       	ori	r24, 0x02	; 2
     b58:	f9 cf       	rjmp	.-14     	; 0xb4c <main+0x634>
						break;
					case O2_ON:
						if(print == 0){
     b5a:	61 14       	cp	r6, r1
     b5c:	71 04       	cpc	r7, r1
     b5e:	39 f4       	brne	.+14     	; 0xb6e <main+0x656>
							OrangutanLCD::print("PLATE STOP   ON ");
     b60:	87 ed       	ldi	r24, 0xD7	; 215
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     b68:	21 e0       	ldi	r18, 0x01	; 1
     b6a:	62 2e       	mov	r6, r18
     b6c:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
     b6e:	80 91 40 03 	lds	r24, 0x0340
     b72:	8b 7f       	andi	r24, 0xFB	; 251
     b74:	eb cf       	rjmp	.-42     	; 0xb4c <main+0x634>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
     b76:	80 91 40 03 	lds	r24, 0x0340
     b7a:	84 60       	ori	r24, 0x04	; 4
     b7c:	e7 cf       	rjmp	.-50     	; 0xb4c <main+0x634>
						break;
					case O3_ON:
						if(print == 0){
     b7e:	61 14       	cp	r6, r1
     b80:	71 04       	cpc	r7, r1
     b82:	39 f4       	brne	.+14     	; 0xb92 <main+0x67a>
							OrangutanLCD::print("PLATE RAISE  ON ");
     b84:	88 ee       	ldi	r24, 0xE8	; 232
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	69 2e       	mov	r6, r25
     b90:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     b92:	80 91 40 03 	lds	r24, 0x0340
     b96:	87 7f       	andi	r24, 0xF7	; 247
     b98:	15 c0       	rjmp	.+42     	; 0xbc4 <main+0x6ac>
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     b9a:	80 91 40 03 	lds	r24, 0x0340
     b9e:	88 60       	ori	r24, 0x08	; 8
     ba0:	d5 cf       	rjmp	.-86     	; 0xb4c <main+0x634>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(print == 0){
     ba2:	61 14       	cp	r6, r1
     ba4:	71 04       	cpc	r7, r1
     ba6:	39 f4       	brne	.+14     	; 0xbb6 <main+0x69e>
							OrangutanLCD::print("PLATE LOWER  ON ");
     ba8:	89 ef       	ldi	r24, 0xF9	; 249
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	68 2e       	mov	r6, r24
     bb4:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     bb6:	80 91 40 03 	lds	r24, 0x0340
     bba:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     bbc:	8f 7e       	andi	r24, 0xEF	; 239
     bbe:	c6 cf       	rjmp	.-116    	; 0xb4c <main+0x634>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     bc0:	80 91 40 03 	lds	r24, 0x0340
     bc4:	80 61       	ori	r24, 0x10	; 16
     bc6:	c2 cf       	rjmp	.-124    	; 0xb4c <main+0x634>
						break;
					case O5_ON:
						if(print == 0){
     bc8:	61 14       	cp	r6, r1
     bca:	71 04       	cpc	r7, r1
     bcc:	39 f4       	brne	.+14     	; 0xbdc <main+0x6c4>
							OrangutanLCD::print("BRUSH1 RAISE ON ");
     bce:	8a e0       	ldi	r24, 0x0A	; 10
     bd0:	92 e0       	ldi	r25, 0x02	; 2
     bd2:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     bd6:	01 e0       	ldi	r16, 0x01	; 1
     bd8:	60 2e       	mov	r6, r16
     bda:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     bdc:	80 91 40 03 	lds	r24, 0x0340
     be0:	8f 7d       	andi	r24, 0xDF	; 223
     be2:	14 c0       	rjmp	.+40     	; 0xc0c <main+0x6f4>
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     be4:	80 91 40 03 	lds	r24, 0x0340
     be8:	0d c0       	rjmp	.+26     	; 0xc04 <main+0x6ec>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(print == 0){
     bea:	61 14       	cp	r6, r1
     bec:	71 04       	cpc	r7, r1
     bee:	39 f4       	brne	.+14     	; 0xbfe <main+0x6e6>
							OrangutanLCD::print("BRUSH1 LOWER ON ");
     bf0:	8b e1       	ldi	r24, 0x1B	; 27
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     bf8:	11 e0       	ldi	r17, 0x01	; 1
     bfa:	61 2e       	mov	r6, r17
     bfc:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     bfe:	80 91 40 03 	lds	r24, 0x0340
     c02:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     c04:	80 62       	ori	r24, 0x20	; 32
     c06:	a2 cf       	rjmp	.-188    	; 0xb4c <main+0x634>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     c08:	80 91 40 03 	lds	r24, 0x0340
     c0c:	80 64       	ori	r24, 0x40	; 64
     c0e:	9e cf       	rjmp	.-196    	; 0xb4c <main+0x634>
						break;
					case O7_ON:
						if(print == 0){
     c10:	61 14       	cp	r6, r1
     c12:	71 04       	cpc	r7, r1
     c14:	39 f4       	brne	.+14     	; 0xc24 <main+0x70c>
							OrangutanLCD::print("BRUSH2 RAISE ON ");
     c16:	8c e2       	ldi	r24, 0x2C	; 44
     c18:	92 e0       	ldi	r25, 0x02	; 2
     c1a:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     c1e:	b1 e0       	ldi	r27, 0x01	; 1
     c20:	6b 2e       	mov	r6, r27
     c22:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     c24:	80 91 40 03 	lds	r24, 0x0340
     c28:	8f 77       	andi	r24, 0x7F	; 127
     c2a:	80 93 40 03 	sts	0x0340, r24
     c2e:	13 c0       	rjmp	.+38     	; 0xc56 <main+0x73e>
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(print == 0){
     c30:	61 14       	cp	r6, r1
     c32:	71 04       	cpc	r7, r1
     c34:	39 f4       	brne	.+14     	; 0xc44 <main+0x72c>
							OrangutanLCD::print("BRUSH2 LOWER ON ");
     c36:	8d e3       	ldi	r24, 0x3D	; 61
     c38:	92 e0       	ldi	r25, 0x02	; 2
     c3a:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     c3e:	a1 e0       	ldi	r26, 0x01	; 1
     c40:	6a 2e       	mov	r6, r26
     c42:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     c44:	80 91 41 03 	lds	r24, 0x0341
     c48:	8e 7f       	andi	r24, 0xFE	; 254
     c4a:	80 93 41 03 	sts	0x0341, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     c4e:	80 91 40 03 	lds	r24, 0x0340
     c52:	80 68       	ori	r24, 0x80	; 128
     c54:	7b cf       	rjmp	.-266    	; 0xb4c <main+0x634>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     c56:	80 91 41 03 	lds	r24, 0x0341
     c5a:	81 60       	ori	r24, 0x01	; 1
     c5c:	35 c0       	rjmp	.+106    	; 0xcc8 <main+0x7b0>
						break;
					case O9_ON:
						if(print == 0){
     c5e:	61 14       	cp	r6, r1
     c60:	71 04       	cpc	r7, r1
     c62:	39 f4       	brne	.+14     	; 0xc72 <main+0x75a>
							OrangutanLCD::print("PAPER RAISE  ON ");
     c64:	8e e4       	ldi	r24, 0x4E	; 78
     c66:	92 e0       	ldi	r25, 0x02	; 2
     c68:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     c6c:	f1 e0       	ldi	r31, 0x01	; 1
     c6e:	6f 2e       	mov	r6, r31
     c70:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     c72:	80 91 41 03 	lds	r24, 0x0341
     c76:	8d 7f       	andi	r24, 0xFD	; 253
     c78:	14 c0       	rjmp	.+40     	; 0xca2 <main+0x78a>
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     c7a:	80 91 41 03 	lds	r24, 0x0341
     c7e:	0d c0       	rjmp	.+26     	; 0xc9a <main+0x782>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(print == 0){
     c80:	61 14       	cp	r6, r1
     c82:	71 04       	cpc	r7, r1
     c84:	39 f4       	brne	.+14     	; 0xc94 <main+0x77c>
							OrangutanLCD::print("PAPER LOWER  ON ");
     c86:	8f e5       	ldi	r24, 0x5F	; 95
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     c8e:	e1 e0       	ldi	r30, 0x01	; 1
     c90:	6e 2e       	mov	r6, r30
     c92:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
     c94:	80 91 41 03 	lds	r24, 0x0341
     c98:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     c9a:	82 60       	ori	r24, 0x02	; 2
     c9c:	15 c0       	rjmp	.+42     	; 0xcc8 <main+0x7b0>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
     c9e:	80 91 41 03 	lds	r24, 0x0341
     ca2:	84 60       	ori	r24, 0x04	; 4
     ca4:	11 c0       	rjmp	.+34     	; 0xcc8 <main+0x7b0>
						break;
					case O11_ON:
						if(print == 0){
     ca6:	61 14       	cp	r6, r1
     ca8:	71 04       	cpc	r7, r1
     caa:	39 f4       	brne	.+14     	; 0xcba <main+0x7a2>
							OrangutanLCD::print("AIR KNIFE    ON ");
     cac:	80 e7       	ldi	r24, 0x70	; 112
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     cb4:	71 e0       	ldi	r23, 0x01	; 1
     cb6:	67 2e       	mov	r6, r23
     cb8:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
     cba:	80 91 41 03 	lds	r24, 0x0341
     cbe:	87 7f       	andi	r24, 0xF7	; 247
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <main+0x7b0>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
     cc2:	80 91 41 03 	lds	r24, 0x0341
     cc6:	88 60       	ori	r24, 0x08	; 8
     cc8:	80 93 41 03 	sts	0x0341, r24
     ccc:	c4 c0       	rjmp	.+392    	; 0xe56 <main+0x93e>
						break;
					case M1_F:
						if(print == 0){
     cce:	61 14       	cp	r6, r1
     cd0:	71 04       	cpc	r7, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <main+0x7ca>
							OrangutanLCD::print("LOADING    FRONT");
     cd4:	81 e8       	ldi	r24, 0x81	; 129
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	66 2e       	mov	r6, r22
     ce0:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     ce2:	80 91 3e 03 	lds	r24, 0x033E
     ce6:	8d 7f       	andi	r24, 0xFD	; 253
     ce8:	80 93 3e 03 	sts	0x033E, r24
     cec:	21 e0       	ldi	r18, 0x01	; 1
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	2f 96       	adiw	r28, 0x0f	; 15
     cf2:	3f af       	std	Y+63, r19	; 0x3f
     cf4:	2e af       	std	Y+62, r18	; 0x3e
     cf6:	2f 97       	sbiw	r28, 0x0f	; 15
     cf8:	50 e2       	ldi	r21, 0x20	; 32
     cfa:	45 2e       	mov	r4, r21
     cfc:	51 2c       	mov	r5, r1
     cfe:	ab c0       	rjmp	.+342    	; 0xe56 <main+0x93e>
						plateLoadMotor =  1;
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
     d00:	80 91 3e 03 	lds	r24, 0x033E
     d04:	82 60       	ori	r24, 0x02	; 2
     d06:	80 93 3e 03 	sts	0x033E, r24
     d0a:	41 e0       	ldi	r20, 0x01	; 1
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	2f 96       	adiw	r28, 0x0f	; 15
     d10:	5f af       	std	Y+63, r21	; 0x3f
     d12:	4e af       	std	Y+62, r20	; 0x3e
     d14:	2f 97       	sbiw	r28, 0x0f	; 15
     d16:	9f c0       	rjmp	.+318    	; 0xe56 <main+0x93e>
						plateLoadMotor =  1;
						break;
					case M2_F:
						if(print == 0){
     d18:	61 14       	cp	r6, r1
     d1a:	71 04       	cpc	r7, r1
     d1c:	39 f4       	brne	.+14     	; 0xd2c <main+0x814>
							OrangutanLCD::print("DRIVE      FRONT");
     d1e:	82 e9       	ldi	r24, 0x92	; 146
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     d26:	41 e0       	ldi	r20, 0x01	; 1
     d28:	64 2e       	mov	r6, r20
     d2a:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     d2c:	80 91 3e 03 	lds	r24, 0x033E
     d30:	8f 7e       	andi	r24, 0xEF	; 239
     d32:	80 93 3e 03 	sts	0x033E, r24
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	2d 96       	adiw	r28, 0x0d	; 13
     d3c:	9f af       	std	Y+63, r25	; 0x3f
     d3e:	8e af       	std	Y+62, r24	; 0x3e
     d40:	2d 97       	sbiw	r28, 0x0d	; 13
     d42:	2f 96       	adiw	r28, 0x0f	; 15
     d44:	1f ae       	std	Y+63, r1	; 0x3f
     d46:	1e ae       	std	Y+62, r1	; 0x3e
     d48:	2f 97       	sbiw	r28, 0x0f	; 15
     d4a:	32 e2       	ldi	r19, 0x22	; 34
     d4c:	43 2e       	mov	r4, r19
     d4e:	51 2c       	mov	r5, r1
     d50:	82 c0       	rjmp	.+260    	; 0xe56 <main+0x93e>
						fixtureMotor =  1;
						plateLoadMotor = 0;
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     d52:	80 91 3e 03 	lds	r24, 0x033E
     d56:	80 61       	ori	r24, 0x10	; 16
     d58:	80 93 3e 03 	sts	0x033E, r24
     d5c:	a1 e0       	ldi	r26, 0x01	; 1
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	2d 96       	adiw	r28, 0x0d	; 13
     d62:	bf af       	std	Y+63, r27	; 0x3f
     d64:	ae af       	std	Y+62, r26	; 0x3e
     d66:	2d 97       	sbiw	r28, 0x0d	; 13
     d68:	76 c0       	rjmp	.+236    	; 0xe56 <main+0x93e>
						fixtureMotor =  1;
						break;
					case M3_F:
						if(print == 0){
     d6a:	61 14       	cp	r6, r1
     d6c:	71 04       	cpc	r7, r1
     d6e:	39 f4       	brne	.+14     	; 0xd7e <main+0x866>
							OrangutanLCD::print("BRUSH1     FRONT");
     d70:	83 ea       	ldi	r24, 0xA3	; 163
     d72:	92 e0       	ldi	r25, 0x02	; 2
     d74:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     d78:	21 e0       	ldi	r18, 0x01	; 1
     d7a:	62 2e       	mov	r6, r18
     d7c:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
     d7e:	80 91 3e 03 	lds	r24, 0x033E
     d82:	8f 77       	andi	r24, 0x7F	; 127
     d84:	80 93 3e 03 	sts	0x033E, r24
     d88:	2d 96       	adiw	r28, 0x0d	; 13
     d8a:	1f ae       	std	Y+63, r1	; 0x3f
     d8c:	1e ae       	std	Y+62, r1	; 0x3e
     d8e:	2d 97       	sbiw	r28, 0x0d	; 13
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	2b 96       	adiw	r28, 0x0b	; 11
     d96:	3f af       	std	Y+63, r19	; 0x3f
     d98:	2e af       	std	Y+62, r18	; 0x3e
     d9a:	2b 97       	sbiw	r28, 0x0b	; 11
     d9c:	94 e2       	ldi	r25, 0x24	; 36
     d9e:	49 2e       	mov	r4, r25
     da0:	51 2c       	mov	r5, r1
     da2:	59 c0       	rjmp	.+178    	; 0xe56 <main+0x93e>
						brush1Motor =  1;
						fixtureMotor = 0;
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
     da4:	80 91 3e 03 	lds	r24, 0x033E
     da8:	80 68       	ori	r24, 0x80	; 128
     daa:	80 93 3e 03 	sts	0x033E, r24
     dae:	41 e0       	ldi	r20, 0x01	; 1
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	2b 96       	adiw	r28, 0x0b	; 11
     db4:	5f af       	std	Y+63, r21	; 0x3f
     db6:	4e af       	std	Y+62, r20	; 0x3e
     db8:	2b 97       	sbiw	r28, 0x0b	; 11
     dba:	4d c0       	rjmp	.+154    	; 0xe56 <main+0x93e>
						brush1Motor =  1;
						break;
					case M4_F:
						if(print == 0){
     dbc:	61 14       	cp	r6, r1
     dbe:	71 04       	cpc	r7, r1
     dc0:	39 f4       	brne	.+14     	; 0xdd0 <main+0x8b8>
							OrangutanLCD::print("BRUSH2     FRONT");
     dc2:	84 eb       	ldi	r24, 0xB4	; 180
     dc4:	92 e0       	ldi	r25, 0x02	; 2
     dc6:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	68 2e       	mov	r6, r24
     dce:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
     dd0:	80 91 3f 03 	lds	r24, 0x033F
     dd4:	8b 7f       	andi	r24, 0xFB	; 251
     dd6:	80 93 3f 03 	sts	0x033F, r24
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	29 96       	adiw	r28, 0x09	; 9
     de0:	9f af       	std	Y+63, r25	; 0x3f
     de2:	8e af       	std	Y+62, r24	; 0x3e
     de4:	29 97       	sbiw	r28, 0x09	; 9
     de6:	2b 96       	adiw	r28, 0x0b	; 11
     de8:	1f ae       	std	Y+63, r1	; 0x3f
     dea:	1e ae       	std	Y+62, r1	; 0x3e
     dec:	2b 97       	sbiw	r28, 0x0b	; 11
     dee:	06 e2       	ldi	r16, 0x26	; 38
     df0:	40 2e       	mov	r4, r16
     df2:	51 2c       	mov	r5, r1
     df4:	30 c0       	rjmp	.+96     	; 0xe56 <main+0x93e>
						brush2Motor =  1;
						brush1Motor = 0;
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
     df6:	80 91 3f 03 	lds	r24, 0x033F
     dfa:	84 60       	ori	r24, 0x04	; 4
     dfc:	80 93 3f 03 	sts	0x033F, r24
     e00:	a1 e0       	ldi	r26, 0x01	; 1
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	29 96       	adiw	r28, 0x09	; 9
     e06:	bf af       	std	Y+63, r27	; 0x3f
     e08:	ae af       	std	Y+62, r26	; 0x3e
     e0a:	29 97       	sbiw	r28, 0x09	; 9
     e0c:	24 c0       	rjmp	.+72     	; 0xe56 <main+0x93e>
						brush2Motor =  1;
						break;
					case M5_F:
						if(print == 0){
     e0e:	61 14       	cp	r6, r1
     e10:	71 04       	cpc	r7, r1
     e12:	39 f4       	brne	.+14     	; 0xe22 <main+0x90a>
							OrangutanLCD::print("PAPER      FRONT");
     e14:	85 ec       	ldi	r24, 0xC5	; 197
     e16:	92 e0       	ldi	r25, 0x02	; 2
     e18:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     e1c:	11 e0       	ldi	r17, 0x01	; 1
     e1e:	61 2e       	mov	r6, r17
     e20:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     e22:	80 91 3f 03 	lds	r24, 0x033F
     e26:	8f 7d       	andi	r24, 0xDF	; 223
     e28:	80 93 3f 03 	sts	0x033F, r24
     e2c:	29 96       	adiw	r28, 0x09	; 9
     e2e:	1f ae       	std	Y+63, r1	; 0x3f
     e30:	1e ae       	std	Y+62, r1	; 0x3e
     e32:	29 97       	sbiw	r28, 0x09	; 9
     e34:	21 e0       	ldi	r18, 0x01	; 1
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	3c 83       	std	Y+4, r19	; 0x04
     e3a:	2b 83       	std	Y+3, r18	; 0x03
     e3c:	b8 e2       	ldi	r27, 0x28	; 40
     e3e:	4b 2e       	mov	r4, r27
     e40:	51 2c       	mov	r5, r1
     e42:	09 c0       	rjmp	.+18     	; 0xe56 <main+0x93e>
						paperTowelMotor =  1;
						brush2Motor = 0;
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
     e44:	80 91 3f 03 	lds	r24, 0x033F
     e48:	80 62       	ori	r24, 0x20	; 32
     e4a:	80 93 3f 03 	sts	0x033F, r24
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	5c 83       	std	Y+4, r21	; 0x04
     e54:	4b 83       	std	Y+3, r20	; 0x03
						paperTowelMotor =  1;
						break;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
     e56:	8d b7       	in	r24, 0x3d	; 61
     e58:	9e b7       	in	r25, 0x3e	; 62
     e5a:	42 97       	sbiw	r24, 0x12	; 18
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	9e bf       	out	0x3e, r25	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	8d bf       	out	0x3d, r24	; 61
     e66:	ed b7       	in	r30, 0x3d	; 61
     e68:	fe b7       	in	r31, 0x3e	; 62
     e6a:	31 96       	adiw	r30, 0x01	; 1
     e6c:	82 e0       	ldi	r24, 0x02	; 2
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	ad b7       	in	r26, 0x3d	; 61
     e72:	be b7       	in	r27, 0x3e	; 62
     e74:	12 96       	adiw	r26, 0x02	; 2
     e76:	9c 93       	st	X, r25
     e78:	8e 93       	st	-X, r24
     e7a:	11 97       	sbiw	r26, 0x01	; 1
     e7c:	93 83       	std	Z+3, r25	; 0x03
     e7e:	82 83       	std	Z+2, r24	; 0x02
     e80:	95 83       	std	Z+5, r25	; 0x05
     e82:	84 83       	std	Z+4, r24	; 0x04
     e84:	97 83       	std	Z+7, r25	; 0x07
     e86:	86 83       	std	Z+6, r24	; 0x06
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	91 87       	std	Z+9, r25	; 0x09
     e8e:	80 87       	std	Z+8, r24	; 0x08
     e90:	93 87       	std	Z+11, r25	; 0x0b
     e92:	82 87       	std	Z+10, r24	; 0x0a
     e94:	95 87       	std	Z+13, r25	; 0x0d
     e96:	84 87       	std	Z+12, r24	; 0x0c
     e98:	97 87       	std	Z+15, r25	; 0x0f
     e9a:	86 87       	std	Z+14, r24	; 0x0e
     e9c:	91 8b       	std	Z+17, r25	; 0x11
     e9e:	80 8b       	std	Z+16, r24	; 0x10
     ea0:	c1 01       	movw	r24, r2
     ea2:	23 96       	adiw	r28, 0x03	; 3
     ea4:	6e ad       	ldd	r22, Y+62	; 0x3e
     ea6:	7f ad       	ldd	r23, Y+63	; 0x3f
     ea8:	23 97       	sbiw	r28, 0x03	; 3
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	2f 96       	adiw	r28, 0x0f	; 15
     eb0:	2e ad       	ldd	r18, Y+62	; 0x3e
     eb2:	3f ad       	ldd	r19, Y+63	; 0x3f
     eb4:	2f 97       	sbiw	r28, 0x0f	; 15
     eb6:	2d 96       	adiw	r28, 0x0d	; 13
     eb8:	0e ad       	ldd	r16, Y+62	; 0x3e
     eba:	1f ad       	ldd	r17, Y+63	; 0x3f
     ebc:	2d 97       	sbiw	r28, 0x0d	; 13
     ebe:	2b 96       	adiw	r28, 0x0b	; 11
     ec0:	ee ac       	ldd	r14, Y+62	; 0x3e
     ec2:	ff ac       	ldd	r15, Y+63	; 0x3f
     ec4:	2b 97       	sbiw	r28, 0x0b	; 11
     ec6:	29 96       	adiw	r28, 0x09	; 9
     ec8:	ce ac       	ldd	r12, Y+62	; 0x3e
     eca:	df ac       	ldd	r13, Y+63	; 0x3f
     ecc:	29 97       	sbiw	r28, 0x09	; 9
     ece:	ab 80       	ldd	r10, Y+3	; 0x03
     ed0:	bc 80       	ldd	r11, Y+4	; 0x04
     ed2:	a2 e0       	ldi	r26, 0x02	; 2
     ed4:	8a 2e       	mov	r8, r26
     ed6:	91 2c       	mov	r9, r1
     ed8:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
     edc:	2d b7       	in	r18, 0x3d	; 61
     ede:	3e b7       	in	r19, 0x3e	; 62
     ee0:	2e 5e       	subi	r18, 0xEE	; 238
     ee2:	3f 4f       	sbci	r19, 0xFF	; 255
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	3e bf       	out	0x3e, r19	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	2d bf       	out	0x3d, r18	; 61
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>
			counter = 0;
			OrangutanLCD::clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
     ef6:	3a e2       	ldi	r19, 0x2A	; 42
     ef8:	43 16       	cp	r4, r19
     efa:	51 04       	cpc	r5, r1
     efc:	11 f4       	brne	.+4      	; 0xf02 <main+0x9ea>
     efe:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <main+0x2a0e>
				i2c_start(I2C2+I2C_WRITE);
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				counter ++;
     f02:	08 94       	sec
     f04:	21 1c       	adc	r2, r1
     f06:	31 1c       	adc	r3, r1
     f08:	e0 cb       	rjmp	.-2112   	; 0x6ca <main+0x1b2>
				delay_ms(1);
			}
		}
		else{										//If switch is set to Run Mode
		
		OrangutanLCD::print("NORMAL");
     f0a:	86 ed       	ldi	r24, 0xD6	; 214
     f0c:	92 e0       	ldi	r25, 0x02	; 2
     f0e:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     f12:	88 ee       	ldi	r24, 0xE8	; 232
     f14:	93 e0       	ldi	r25, 0x03	; 3
     f16:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
     f1a:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("SELECT CYCLE");
     f1e:	8d ed       	ldi	r24, 0xDD	; 221
     f20:	92 e0       	ldi	r25, 0x02	; 2
     f22:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     f26:	ee 24       	eor	r14, r14
     f28:	ff 24       	eor	r15, r15
				else if(counter - counterRefRel > 15){
					button = 0;
					stateButton = NONE;
				}
			}*/
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     f2a:	c7 01       	movw	r24, r14
     f2c:	be 01       	movw	r22, r28
     f2e:	6f 5f       	subi	r22, 0xFF	; 255
     f30:	7f 4f       	sbci	r23, 0xFF	; 255
     f32:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z15button_debounceiPi>
     f36:	18 2f       	mov	r17, r24
			counter++;
     f38:	08 94       	sec
     f3a:	e1 1c       	adc	r14, r1
     f3c:	f1 1c       	adc	r15, r1
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
		OrangutanLCD::print("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
     f46:	11 23       	and	r17, r17
     f48:	81 f3       	breq	.-32     	; 0xf2a <main+0xa12>
			counter++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		OrangutanLCD::clear();
     f4a:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("CYCLE:");
     f4e:	8a ee       	ldi	r24, 0xEA	; 234
     f50:	92 e0       	ldi	r25, 0x02	; 2
     f52:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>

		//u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
		u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
     f56:	80 91 3e 03 	lds	r24, 0x033E
     f5a:	80 62       	ori	r24, 0x20	; 32
     f5c:	80 93 3e 03 	sts	0x033E, r24
		/*u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
		u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;*/

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     f66:	88 23       	and	r24, r24
     f68:	11 f0       	breq	.+4      	; 0xf6e <main+0xa56>
     f6a:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <main+0x2a4e>
     f6e:	82 e0       	ldi	r24, 0x02	; 2
     f70:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
     f74:	88 23       	and	r24, r24
     f76:	11 f0       	breq	.+4      	; 0xf7c <main+0xa64>
     f78:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <main+0x2a4e>
			OrangutanLCD::gotoXY(7,0);
     f7c:	87 e0       	ldi	r24, 0x07	; 7
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("FIRST B");
     f84:	81 ef       	ldi	r24, 0xF1	; 241
     f86:	92 e0       	ldi	r25, 0x02	; 2
     f88:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
     f8c:	66 24       	eor	r6, r6
     f8e:	77 24       	eor	r7, r7
     f90:	18 86       	std	Y+8, r1	; 0x08
     f92:	1f 82       	std	Y+7, r1	; 0x07
     f94:	41 e0       	ldi	r20, 0x01	; 1
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	5c af       	std	Y+60, r21	; 0x3c
     f9a:	4b af       	std	Y+59, r20	; 0x3b
     f9c:	22 24       	eor	r2, r2
     f9e:	33 24       	eor	r3, r3
     fa0:	5e af       	std	Y+62, r21	; 0x3e
     fa2:	4d af       	std	Y+61, r20	; 0x3d
     fa4:	1c a2       	std	Y+36, r1	; 0x24
     fa6:	1b a2       	std	Y+35, r1	; 0x23
     fa8:	1c 8e       	std	Y+28, r1	; 0x1c
     faa:	1b 8e       	std	Y+27, r1	; 0x1b
     fac:	1c 8a       	std	Y+20, r1	; 0x14
     fae:	1b 8a       	std	Y+19, r1	; 0x13
     fb0:	44 24       	eor	r4, r4
     fb2:	55 24       	eor	r5, r5
     fb4:	27 96       	adiw	r28, 0x07	; 7
     fb6:	1f ae       	std	Y+63, r1	; 0x3f
     fb8:	1e ae       	std	Y+62, r1	; 0x3e
     fba:	27 97       	sbiw	r28, 0x07	; 7
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     fbc:	84 e4       	ldi	r24, 0x44	; 68
     fbe:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     fc8:	85 e4       	ldi	r24, 0x45	; 69
     fca:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     fce:	0e 94 4f 18 	call	0x309e	; 0x309e <_Z11i2c_readAckv>
     fd2:	80 93 42 03 	sts	0x0342, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     fd6:	0e 94 59 18 	call	0x30b2	; 0x30b2 <_Z11i2c_readNakv>
     fda:	80 93 43 03 	sts	0x0343, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     fde:	0e 94 35 18 	call	0x306a	; 0x306a <_Z8i2c_stopv>
				
				if(state != INIT){
     fe2:	61 14       	cp	r6, r1
     fe4:	71 04       	cpc	r7, r1
     fe6:	79 f0       	breq	.+30     	; 0x1006 <main+0xaee>
					OrangutanLCD::gotoXY(0,1);
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	61 e0       	ldi	r22, 0x01	; 1
     fec:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
     ff0:	89 ef       	ldi	r24, 0xF9	; 249
     ff2:	92 e0       	ldi	r25, 0x02	; 2
     ff4:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
	};
	static inline void print(int value)
	{
		print((long)value);
     ff8:	b3 01       	movw	r22, r6
     ffa:	88 27       	eor	r24, r24
     ffc:	77 fd       	sbrc	r23, 7
     ffe:	80 95       	com	r24
    1000:	98 2f       	mov	r25, r24
    1002:	0e 94 0b 1b 	call	0x3616	; 0x3616 <_ZN12OrangutanLCD5printEl>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1006:	c2 01       	movw	r24, r4
    1008:	be 01       	movw	r22, r28
    100a:	6f 5f       	subi	r22, 0xFF	; 255
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    1012:	61 14       	cp	r6, r1
    1014:	71 04       	cpc	r7, r1
    1016:	29 f4       	brne	.+10     	; 0x1022 <main+0xb0a>
    1018:	88 23       	and	r24, r24
    101a:	09 f4       	brne	.+2      	; 0x101e <main+0xb06>
    101c:	40 c0       	rjmp	.+128    	; 0x109e <main+0xb86>
    101e:	12 01       	movw	r2, r4
    1020:	04 c0       	rjmp	.+8      	; 0x102a <main+0xb12>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && /*counter - counterRef > totallength1*plateLoadMotorLoadPlate&&*/ u_inputByte0.bits_in_inputByte0.plate == 0){
    1022:	51 e0       	ldi	r21, 0x01	; 1
    1024:	65 16       	cp	r6, r21
    1026:	71 04       	cpc	r7, r1
    1028:	31 f4       	brne	.+12     	; 0x1036 <main+0xb1e>
    102a:	80 91 42 03 	lds	r24, 0x0342
    102e:	80 fd       	sbrc	r24, 0
    1030:	43 c0       	rjmp	.+134    	; 0x10b8 <main+0xba0>
    1032:	12 01       	movw	r2, r4
    1034:	04 c0       	rjmp	.+8      	; 0x103e <main+0xb26>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	68 16       	cp	r6, r24
    103a:	71 04       	cpc	r7, r1
    103c:	49 f4       	brne	.+18     	; 0x1050 <main+0xb38>
    103e:	c2 01       	movw	r24, r4
    1040:	82 19       	sub	r24, r2
    1042:	93 09       	sbc	r25, r3
    1044:	85 36       	cpi	r24, 0x65	; 101
    1046:	91 05       	cpc	r25, r1
    1048:	0c f4       	brge	.+2      	; 0x104c <main+0xb34>
    104a:	46 c0       	rjmp	.+140    	; 0x10d8 <main+0xbc0>
    104c:	12 01       	movw	r2, r4
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <main+0xb40>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1050:	93 e0       	ldi	r25, 0x03	; 3
    1052:	69 16       	cp	r6, r25
    1054:	71 04       	cpc	r7, r1
    1056:	49 f4       	brne	.+18     	; 0x106a <main+0xb52>
    1058:	c2 01       	movw	r24, r4
    105a:	82 19       	sub	r24, r2
    105c:	93 09       	sbc	r25, r3
    105e:	81 5a       	subi	r24, 0xA1	; 161
    1060:	9f 40       	sbci	r25, 0x0F	; 15
    1062:	0c f4       	brge	.+2      	; 0x1066 <main+0xb4e>
    1064:	49 c0       	rjmp	.+146    	; 0x10f8 <main+0xbe0>
    1066:	12 01       	movw	r2, r4
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <main+0xb5a>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    106a:	b4 e0       	ldi	r27, 0x04	; 4
    106c:	6b 16       	cp	r6, r27
    106e:	71 04       	cpc	r7, r1
    1070:	49 f4       	brne	.+18     	; 0x1084 <main+0xb6c>
    1072:	c2 01       	movw	r24, r4
    1074:	82 19       	sub	r24, r2
    1076:	93 09       	sbc	r25, r3
    1078:	89 5e       	subi	r24, 0xE9	; 233
    107a:	93 40       	sbci	r25, 0x03	; 3
    107c:	0c f4       	brge	.+2      	; 0x1080 <main+0xb68>
    107e:	4c c0       	rjmp	.+152    	; 0x1118 <main+0xc00>
    1080:	12 01       	movw	r2, r4
    1082:	04 c0       	rjmp	.+8      	; 0x108c <main+0xb74>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    1084:	35 e0       	ldi	r19, 0x05	; 5
    1086:	63 16       	cp	r6, r19
    1088:	71 04       	cpc	r7, r1
    108a:	49 f4       	brne	.+18     	; 0x109e <main+0xb86>
    108c:	c2 01       	movw	r24, r4
    108e:	82 19       	sub	r24, r2
    1090:	93 09       	sbc	r25, r3
    1092:	85 36       	cpi	r24, 0x65	; 101
    1094:	91 05       	cpc	r25, r1
    1096:	0c f4       	brge	.+2      	; 0x109a <main+0xb82>
    1098:	4d c0       	rjmp	.+154    	; 0x1134 <main+0xc1c>
    109a:	12 01       	movw	r2, r4
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <main+0xb8e>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totallength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    109e:	46 e0       	ldi	r20, 0x06	; 6
    10a0:	64 16       	cp	r6, r20
    10a2:	71 04       	cpc	r7, r1
    10a4:	61 f4       	brne	.+24     	; 0x10be <main+0xba6>
    10a6:	c2 01       	movw	r24, r4
    10a8:	82 19       	sub	r24, r2
    10aa:	93 09       	sbc	r25, r3
    10ac:	81 5a       	subi	r24, 0xA1	; 161
    10ae:	9f 40       	sbci	r25, 0x0F	; 15
    10b0:	0c f4       	brge	.+2      	; 0x10b4 <main+0xb9c>
    10b2:	50 c0       	rjmp	.+160    	; 0x1154 <main+0xc3c>
    10b4:	12 01       	movw	r2, r4
    10b6:	07 c0       	rjmp	.+14     	; 0x10c6 <main+0xbae>
    10b8:	f1 e0       	ldi	r31, 0x01	; 1
    10ba:	6f 2e       	mov	r6, r31
    10bc:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    10be:	87 e0       	ldi	r24, 0x07	; 7
    10c0:	68 16       	cp	r6, r24
    10c2:	71 04       	cpc	r7, r1
    10c4:	61 f4       	brne	.+24     	; 0x10de <main+0xbc6>
    10c6:	c2 01       	movw	r24, r4
    10c8:	82 19       	sub	r24, r2
    10ca:	93 09       	sbc	r25, r3
    10cc:	85 36       	cpi	r24, 0x65	; 101
    10ce:	91 05       	cpc	r25, r1
    10d0:	0c f4       	brge	.+2      	; 0x10d4 <main+0xbbc>
    10d2:	50 c0       	rjmp	.+160    	; 0x1174 <main+0xc5c>
    10d4:	12 01       	movw	r2, r4
    10d6:	07 c0       	rjmp	.+14     	; 0x10e6 <main+0xbce>
    10d8:	e2 e0       	ldi	r30, 0x02	; 2
    10da:	6e 2e       	mov	r6, r30
    10dc:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    10de:	98 e0       	ldi	r25, 0x08	; 8
    10e0:	69 16       	cp	r6, r25
    10e2:	71 04       	cpc	r7, r1
    10e4:	61 f4       	brne	.+24     	; 0x10fe <main+0xbe6>
    10e6:	c2 01       	movw	r24, r4
    10e8:	82 19       	sub	r24, r2
    10ea:	93 09       	sbc	r25, r3
    10ec:	85 36       	cpi	r24, 0x65	; 101
    10ee:	91 05       	cpc	r25, r1
    10f0:	0c f4       	brge	.+2      	; 0x10f4 <main+0xbdc>
    10f2:	4e c0       	rjmp	.+156    	; 0x1190 <main+0xc78>
    10f4:	12 01       	movw	r2, r4
    10f6:	07 c0       	rjmp	.+14     	; 0x1106 <main+0xbee>
    10f8:	73 e0       	ldi	r23, 0x03	; 3
    10fa:	67 2e       	mov	r6, r23
    10fc:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    10fe:	a9 e0       	ldi	r26, 0x09	; 9
    1100:	6a 16       	cp	r6, r26
    1102:	71 04       	cpc	r7, r1
    1104:	61 f4       	brne	.+24     	; 0x111e <main+0xc06>
    1106:	c2 01       	movw	r24, r4
    1108:	82 19       	sub	r24, r2
    110a:	93 09       	sbc	r25, r3
    110c:	81 5d       	subi	r24, 0xD1	; 209
    110e:	97 40       	sbci	r25, 0x07	; 7
    1110:	0c f4       	brge	.+2      	; 0x1114 <main+0xbfc>
    1112:	4e c0       	rjmp	.+156    	; 0x11b0 <main+0xc98>
    1114:	12 01       	movw	r2, r4
    1116:	07 c0       	rjmp	.+14     	; 0x1126 <main+0xc0e>
    1118:	64 e0       	ldi	r22, 0x04	; 4
    111a:	66 2e       	mov	r6, r22
    111c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    111e:	2a e0       	ldi	r18, 0x0A	; 10
    1120:	62 16       	cp	r6, r18
    1122:	71 04       	cpc	r7, r1
    1124:	51 f4       	brne	.+20     	; 0x113a <main+0xc22>
    1126:	c2 01       	movw	r24, r4
    1128:	82 19       	sub	r24, r2
    112a:	93 09       	sbc	r25, r3
    112c:	85 36       	cpi	r24, 0x65	; 101
    112e:	91 05       	cpc	r25, r1
    1130:	44 f4       	brge	.+16     	; 0x1142 <main+0xc2a>
    1132:	4e c0       	rjmp	.+156    	; 0x11d0 <main+0xcb8>
    1134:	55 e0       	ldi	r21, 0x05	; 5
    1136:	65 2e       	mov	r6, r21
    1138:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totallength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    113a:	3b e0       	ldi	r19, 0x0B	; 11
    113c:	63 16       	cp	r6, r19
    113e:	71 04       	cpc	r7, r1
    1140:	61 f4       	brne	.+24     	; 0x115a <main+0xc42>
    1142:	c2 01       	movw	r24, r4
    1144:	82 19       	sub	r24, r2
    1146:	93 09       	sbc	r25, r3
    1148:	81 5d       	subi	r24, 0xD1	; 209
    114a:	97 40       	sbci	r25, 0x07	; 7
    114c:	0c f4       	brge	.+2      	; 0x1150 <main+0xc38>
    114e:	50 c0       	rjmp	.+160    	; 0x11f0 <main+0xcd8>
    1150:	12 01       	movw	r2, r4
    1152:	07 c0       	rjmp	.+14     	; 0x1162 <main+0xc4a>
    1154:	46 e0       	ldi	r20, 0x06	; 6
    1156:	64 2e       	mov	r6, r20
    1158:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    115a:	5c e0       	ldi	r21, 0x0C	; 12
    115c:	65 16       	cp	r6, r21
    115e:	71 04       	cpc	r7, r1
    1160:	61 f4       	brne	.+24     	; 0x117a <main+0xc62>
    1162:	c2 01       	movw	r24, r4
    1164:	82 19       	sub	r24, r2
    1166:	93 09       	sbc	r25, r3
    1168:	85 36       	cpi	r24, 0x65	; 101
    116a:	91 05       	cpc	r25, r1
    116c:	0c f4       	brge	.+2      	; 0x1170 <main+0xc58>
    116e:	4e c0       	rjmp	.+156    	; 0x120c <main+0xcf4>
    1170:	12 01       	movw	r2, r4
    1172:	07 c0       	rjmp	.+14     	; 0x1182 <main+0xc6a>
    1174:	37 e0       	ldi	r19, 0x07	; 7
    1176:	63 2e       	mov	r6, r19
    1178:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    117a:	8d e0       	ldi	r24, 0x0D	; 13
    117c:	68 16       	cp	r6, r24
    117e:	71 04       	cpc	r7, r1
    1180:	51 f4       	brne	.+20     	; 0x1196 <main+0xc7e>
    1182:	c2 01       	movw	r24, r4
    1184:	82 19       	sub	r24, r2
    1186:	93 09       	sbc	r25, r3
    1188:	81 5d       	subi	r24, 0xD1	; 209
    118a:	97 40       	sbci	r25, 0x07	; 7
    118c:	44 f4       	brge	.+16     	; 0x119e <main+0xc86>
    118e:	4f c0       	rjmp	.+158    	; 0x122e <main+0xd16>
    1190:	28 e0       	ldi	r18, 0x08	; 8
    1192:	62 2e       	mov	r6, r18
    1194:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
					}
				if(state == B1STOP2 && counter - counterRef > pWait){
    1196:	be e0       	ldi	r27, 0x0E	; 14
    1198:	6b 16       	cp	r6, r27
    119a:	71 04       	cpc	r7, r1
    119c:	61 f4       	brne	.+24     	; 0x11b6 <main+0xc9e>
    119e:	c2 01       	movw	r24, r4
    11a0:	82 19       	sub	r24, r2
    11a2:	93 09       	sbc	r25, r3
    11a4:	85 36       	cpi	r24, 0x65	; 101
    11a6:	91 05       	cpc	r25, r1
    11a8:	0c f4       	brge	.+2      	; 0x11ac <main+0xc94>
    11aa:	53 c0       	rjmp	.+166    	; 0x1252 <main+0xd3a>
    11ac:	12 01       	movw	r2, r4
    11ae:	07 c0       	rjmp	.+14     	; 0x11be <main+0xca6>
    11b0:	99 e0       	ldi	r25, 0x09	; 9
    11b2:	69 2e       	mov	r6, r25
    11b4:	71 2c       	mov	r7, r1
					state = 23;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totallength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    11b6:	27 e1       	ldi	r18, 0x17	; 23
    11b8:	62 16       	cp	r6, r18
    11ba:	71 04       	cpc	r7, r1
    11bc:	61 f4       	brne	.+24     	; 0x11d6 <main+0xcbe>
    11be:	c2 01       	movw	r24, r4
    11c0:	82 19       	sub	r24, r2
    11c2:	93 09       	sbc	r25, r3
    11c4:	81 5a       	subi	r24, 0xA1	; 161
    11c6:	9f 40       	sbci	r25, 0x0F	; 15
    11c8:	0c f4       	brge	.+2      	; 0x11cc <main+0xcb4>
    11ca:	53 c0       	rjmp	.+166    	; 0x1272 <main+0xd5a>
    11cc:	12 01       	movw	r2, r4
    11ce:	07 c0       	rjmp	.+14     	; 0x11de <main+0xcc6>
    11d0:	8a e0       	ldi	r24, 0x0A	; 10
    11d2:	68 2e       	mov	r6, r24
    11d4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    11d6:	48 e1       	ldi	r20, 0x18	; 24
    11d8:	64 16       	cp	r6, r20
    11da:	71 04       	cpc	r7, r1
    11dc:	61 f4       	brne	.+24     	; 0x11f6 <main+0xcde>
    11de:	c2 01       	movw	r24, r4
    11e0:	82 19       	sub	r24, r2
    11e2:	93 09       	sbc	r25, r3
    11e4:	85 36       	cpi	r24, 0x65	; 101
    11e6:	91 05       	cpc	r25, r1
    11e8:	0c f4       	brge	.+2      	; 0x11ec <main+0xcd4>
    11ea:	51 c0       	rjmp	.+162    	; 0x128e <main+0xd76>
    11ec:	12 01       	movw	r2, r4
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <main+0xce6>
    11f0:	0b e0       	ldi	r16, 0x0B	; 11
    11f2:	60 2e       	mov	r6, r16
    11f4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    11f6:	59 e1       	ldi	r21, 0x19	; 25
    11f8:	65 16       	cp	r6, r21
    11fa:	71 04       	cpc	r7, r1
    11fc:	51 f4       	brne	.+20     	; 0x1212 <main+0xcfa>
    11fe:	c2 01       	movw	r24, r4
    1200:	82 19       	sub	r24, r2
    1202:	93 09       	sbc	r25, r3
    1204:	81 5a       	subi	r24, 0xA1	; 161
    1206:	9f 40       	sbci	r25, 0x0F	; 15
    1208:	44 f4       	brge	.+16     	; 0x121a <main+0xd02>
    120a:	51 c0       	rjmp	.+162    	; 0x12ae <main+0xd96>
    120c:	1c e0       	ldi	r17, 0x0C	; 12
    120e:	61 2e       	mov	r6, r17
    1210:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totallength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    1212:	ba e1       	ldi	r27, 0x1A	; 26
    1214:	6b 16       	cp	r6, r27
    1216:	71 04       	cpc	r7, r1
    1218:	69 f4       	brne	.+26     	; 0x1234 <main+0xd1c>
    121a:	c2 01       	movw	r24, r4
    121c:	82 19       	sub	r24, r2
    121e:	93 09       	sbc	r25, r3
    1220:	81 5a       	subi	r24, 0xA1	; 161
    1222:	9f 40       	sbci	r25, 0x0F	; 15
    1224:	0c f4       	brge	.+2      	; 0x1228 <main+0xd10>
    1226:	53 c0       	rjmp	.+166    	; 0x12ce <main+0xdb6>
    1228:	58 86       	std	Y+8, r5	; 0x08
    122a:	4f 82       	std	Y+7, r4	; 0x07
    122c:	07 c0       	rjmp	.+14     	; 0x123c <main+0xd24>
    122e:	bd e0       	ldi	r27, 0x0D	; 13
    1230:	6b 2e       	mov	r6, r27
    1232:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    1234:	3b e1       	ldi	r19, 0x1B	; 27
    1236:	63 16       	cp	r6, r19
    1238:	71 04       	cpc	r7, r1
    123a:	71 f4       	brne	.+28     	; 0x1258 <main+0xd40>
    123c:	c2 01       	movw	r24, r4
    123e:	4f 81       	ldd	r20, Y+7	; 0x07
    1240:	58 85       	ldd	r21, Y+8	; 0x08
    1242:	84 1b       	sub	r24, r20
    1244:	95 0b       	sbc	r25, r21
    1246:	85 36       	cpi	r24, 0x65	; 101
    1248:	91 05       	cpc	r25, r1
    124a:	0c f4       	brge	.+2      	; 0x124e <main+0xd36>
    124c:	50 c0       	rjmp	.+160    	; 0x12ee <main+0xdd6>
    124e:	12 01       	movw	r2, r4
    1250:	07 c0       	rjmp	.+14     	; 0x1260 <main+0xd48>
    1252:	ae e0       	ldi	r26, 0x0E	; 14
    1254:	6a 2e       	mov	r6, r26
    1256:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    1258:	5c e1       	ldi	r21, 0x1C	; 28
    125a:	65 16       	cp	r6, r21
    125c:	71 04       	cpc	r7, r1
    125e:	61 f4       	brne	.+24     	; 0x1278 <main+0xd60>
    1260:	c2 01       	movw	r24, r4
    1262:	82 19       	sub	r24, r2
    1264:	93 09       	sbc	r25, r3
    1266:	85 36       	cpi	r24, 0x65	; 101
    1268:	91 05       	cpc	r25, r1
    126a:	0c f4       	brge	.+2      	; 0x126e <main+0xd56>
    126c:	50 c0       	rjmp	.+160    	; 0x130e <main+0xdf6>
    126e:	12 01       	movw	r2, r4
    1270:	07 c0       	rjmp	.+14     	; 0x1280 <main+0xd68>
    1272:	f7 e1       	ldi	r31, 0x17	; 23
    1274:	6f 2e       	mov	r6, r31
    1276:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    1278:	8d e1       	ldi	r24, 0x1D	; 29
    127a:	68 16       	cp	r6, r24
    127c:	71 04       	cpc	r7, r1
    127e:	51 f4       	brne	.+20     	; 0x1294 <main+0xd7c>
    1280:	c2 01       	movw	r24, r4
    1282:	82 19       	sub	r24, r2
    1284:	93 09       	sbc	r25, r3
    1286:	81 5a       	subi	r24, 0xA1	; 161
    1288:	9f 40       	sbci	r25, 0x0F	; 15
    128a:	44 f4       	brge	.+16     	; 0x129c <main+0xd84>
    128c:	50 c0       	rjmp	.+160    	; 0x132e <main+0xe16>
    128e:	e8 e1       	ldi	r30, 0x18	; 24
    1290:	6e 2e       	mov	r6, r30
    1292:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totallength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1294:	be e1       	ldi	r27, 0x1E	; 30
    1296:	6b 16       	cp	r6, r27
    1298:	71 04       	cpc	r7, r1
    129a:	61 f4       	brne	.+24     	; 0x12b4 <main+0xd9c>
    129c:	c2 01       	movw	r24, r4
    129e:	82 19       	sub	r24, r2
    12a0:	93 09       	sbc	r25, r3
    12a2:	81 5a       	subi	r24, 0xA1	; 161
    12a4:	9f 40       	sbci	r25, 0x0F	; 15
    12a6:	0c f4       	brge	.+2      	; 0x12aa <main+0xd92>
    12a8:	53 c0       	rjmp	.+166    	; 0x1350 <main+0xe38>
    12aa:	12 01       	movw	r2, r4
    12ac:	07 c0       	rjmp	.+14     	; 0x12bc <main+0xda4>
    12ae:	79 e1       	ldi	r23, 0x19	; 25
    12b0:	67 2e       	mov	r6, r23
    12b2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    12b4:	3f e1       	ldi	r19, 0x1F	; 31
    12b6:	63 16       	cp	r6, r19
    12b8:	71 04       	cpc	r7, r1
    12ba:	61 f4       	brne	.+24     	; 0x12d4 <main+0xdbc>
    12bc:	c2 01       	movw	r24, r4
    12be:	82 19       	sub	r24, r2
    12c0:	93 09       	sbc	r25, r3
    12c2:	89 5e       	subi	r24, 0xE9	; 233
    12c4:	93 40       	sbci	r25, 0x03	; 3
    12c6:	0c f4       	brge	.+2      	; 0x12ca <main+0xdb2>
    12c8:	4b c1       	rjmp	.+662    	; 0x1560 <main+0x1048>
    12ca:	12 01       	movw	r2, r4
    12cc:	07 c0       	rjmp	.+14     	; 0x12dc <main+0xdc4>
    12ce:	6a e1       	ldi	r22, 0x1A	; 26
    12d0:	66 2e       	mov	r6, r22
    12d2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    12d4:	50 e2       	ldi	r21, 0x20	; 32
    12d6:	65 16       	cp	r6, r21
    12d8:	71 04       	cpc	r7, r1
    12da:	61 f4       	brne	.+24     	; 0x12f4 <main+0xddc>
    12dc:	c2 01       	movw	r24, r4
    12de:	82 19       	sub	r24, r2
    12e0:	93 09       	sbc	r25, r3
    12e2:	81 5a       	subi	r24, 0xA1	; 161
    12e4:	9f 40       	sbci	r25, 0x0F	; 15
    12e6:	0c f4       	brge	.+2      	; 0x12ea <main+0xdd2>
    12e8:	47 c1       	rjmp	.+654    	; 0x1578 <main+0x1060>
    12ea:	12 01       	movw	r2, r4
    12ec:	07 c0       	rjmp	.+14     	; 0x12fc <main+0xde4>
    12ee:	5b e1       	ldi	r21, 0x1B	; 27
    12f0:	65 2e       	mov	r6, r21
    12f2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    12f4:	b1 e2       	ldi	r27, 0x21	; 33
    12f6:	6b 16       	cp	r6, r27
    12f8:	71 04       	cpc	r7, r1
    12fa:	61 f4       	brne	.+24     	; 0x1314 <main+0xdfc>
    12fc:	c2 01       	movw	r24, r4
    12fe:	82 19       	sub	r24, r2
    1300:	93 09       	sbc	r25, r3
    1302:	85 36       	cpi	r24, 0x65	; 101
    1304:	91 05       	cpc	r25, r1
    1306:	0c f4       	brge	.+2      	; 0x130a <main+0xdf2>
    1308:	44 c1       	rjmp	.+648    	; 0x1592 <main+0x107a>
    130a:	12 01       	movw	r2, r4
    130c:	07 c0       	rjmp	.+14     	; 0x131c <main+0xe04>
    130e:	4c e1       	ldi	r20, 0x1C	; 28
    1310:	64 2e       	mov	r6, r20
    1312:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate){
    1314:	22 e2       	ldi	r18, 0x22	; 34
    1316:	62 16       	cp	r6, r18
    1318:	71 04       	cpc	r7, r1
    131a:	61 f4       	brne	.+24     	; 0x1334 <main+0xe1c>
    131c:	c2 01       	movw	r24, r4
    131e:	82 19       	sub	r24, r2
    1320:	93 09       	sbc	r25, r3
    1322:	81 5a       	subi	r24, 0xA1	; 161
    1324:	9f 40       	sbci	r25, 0x0F	; 15
    1326:	0c f4       	brge	.+2      	; 0x132a <main+0xe12>
    1328:	46 c1       	rjmp	.+652    	; 0x15b6 <main+0x109e>
    132a:	12 01       	movw	r2, r4
    132c:	07 c0       	rjmp	.+14     	; 0x133c <main+0xe24>
    132e:	3d e1       	ldi	r19, 0x1D	; 29
    1330:	63 2e       	mov	r6, r19
    1332:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    1334:	43 e2       	ldi	r20, 0x23	; 35
    1336:	64 16       	cp	r6, r20
    1338:	71 04       	cpc	r7, r1
    133a:	69 f4       	brne	.+26     	; 0x1356 <main+0xe3e>
    133c:	c2 01       	movw	r24, r4
    133e:	82 19       	sub	r24, r2
    1340:	93 09       	sbc	r25, r3
    1342:	0b 97       	sbiw	r24, 0x0b	; 11
    1344:	0c f4       	brge	.+2      	; 0x1348 <main+0xe30>
    1346:	44 c1       	rjmp	.+648    	; 0x15d0 <main+0x10b8>
    1348:	24 e2       	ldi	r18, 0x24	; 36
    134a:	62 2e       	mov	r6, r18
    134c:	71 2c       	mov	r7, r1
    134e:	5c c1       	rjmp	.+696    	; 0x1608 <main+0x10f0>
    1350:	9e e1       	ldi	r25, 0x1E	; 30
    1352:	69 2e       	mov	r6, r25
    1354:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    1356:	f3 01       	movw	r30, r6
    1358:	e4 32       	cpi	r30, 0x24	; 36
    135a:	f1 05       	cpc	r31, r1
    135c:	08 f0       	brcs	.+2      	; 0x1360 <main+0xe48>
    135e:	54 c1       	rjmp	.+680    	; 0x1608 <main+0x10f0>
    1360:	e0 59       	subi	r30, 0x90	; 144
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	ee 0f       	add	r30, r30
    1366:	ff 1f       	adc	r31, r31
    1368:	05 90       	lpm	r0, Z+
    136a:	f4 91       	lpm	r31, Z+
    136c:	e0 2d       	mov	r30, r0
    136e:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    1370:	80 91 42 03 	lds	r24, 0x0342
    1374:	20 91 3e 03 	lds	r18, 0x033E
    1378:	90 91 40 03 	lds	r25, 0x0340
    137c:	82 ff       	sbrs	r24, 2
    137e:	07 c0       	rjmp	.+14     	; 0x138e <main+0xe76>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    1380:	2f 7e       	andi	r18, 0xEF	; 239
    1382:	20 93 3e 03 	sts	0x033E, r18
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1386:	97 7f       	andi	r25, 0xF7	; 247
    1388:	90 93 40 03 	sts	0x0340, r25
    138c:	61 c0       	rjmp	.+194    	; 0x1450 <main+0xf38>
						fixtureMotor = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    138e:	2f 7d       	andi	r18, 0xDF	; 223
    1390:	20 93 3e 03 	sts	0x033E, r18
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1394:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1396:	98 60       	ori	r25, 0x08	; 8
    1398:	90 93 40 03 	sts	0x0340, r25
						if(print0 == 1){
    139c:	ad ad       	ldd	r26, Y+61	; 0x3d
    139e:	be ad       	ldd	r27, Y+62	; 0x3e
    13a0:	11 97       	sbiw	r26, 0x01	; 1
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <main+0xe8e>
    13a4:	a7 c0       	rjmp	.+334    	; 0x14f4 <main+0xfdc>
							OrangutanLCD::gotoXY(0,1);
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	61 e0       	ldi	r22, 0x01	; 1
    13aa:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	93 e0       	ldi	r25, 0x03	; 3
    13b2:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    13b6:	1e ae       	std	Y+62, r1	; 0x3e
    13b8:	1d ae       	std	Y+61, r1	; 0x3d
    13ba:	9c c0       	rjmp	.+312    	; 0x14f4 <main+0xfdc>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    13bc:	20 91 40 03 	lds	r18, 0x0340
    13c0:	32 2f       	mov	r19, r18
    13c2:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    13c4:	c2 01       	movw	r24, r4
    13c6:	68 ec       	ldi	r22, 0xC8	; 200
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__divmodhi4>
    13ce:	84 36       	cpi	r24, 0x64	; 100
    13d0:	91 05       	cpc	r25, r1
    13d2:	24 f4       	brge	.+8      	; 0x13dc <main+0xec4>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    13d4:	2c 7f       	andi	r18, 0xFC	; 252
    13d6:	20 93 40 03 	sts	0x0340, r18
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <main+0xeca>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    13dc:	32 60       	ori	r19, 0x02	; 2
    13de:	30 93 40 03 	sts	0x0340, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
    13e2:	80 91 3e 03 	lds	r24, 0x033E
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    13e6:	86 60       	ori	r24, 0x06	; 6
    13e8:	80 93 3e 03 	sts	0x033E, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    13ec:	80 91 40 03 	lds	r24, 0x0340
    13f0:	8b 7f       	andi	r24, 0xFB	; 251
    13f2:	80 93 40 03 	sts	0x0340, r24
    13f6:	21 e0       	ldi	r18, 0x01	; 1
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	3c 8f       	std	Y+28, r19	; 0x1c
    13fc:	2b 8f       	std	Y+27, r18	; 0x1b
    13fe:	04 c1       	rjmp	.+520    	; 0x1608 <main+0x10f0>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1400:	80 91 40 03 	lds	r24, 0x0340
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1404:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1406:	86 61       	ori	r24, 0x16	; 22
    1408:	80 93 40 03 	sts	0x0340, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    140c:	80 91 3e 03 	lds	r24, 0x033E
    1410:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    1412:	8b 7f       	andi	r24, 0xFB	; 251
    1414:	80 93 3e 03 	sts	0x033E, r24
    1418:	f0 c0       	rjmp	.+480    	; 0x15fa <main+0x10e2>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    141a:	80 91 3e 03 	lds	r24, 0x033E
    141e:	8f 7d       	andi	r24, 0xDF	; 223
    1420:	80 93 3e 03 	sts	0x033E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1424:	80 91 40 03 	lds	r24, 0x0340
    1428:	88 60       	ori	r24, 0x08	; 8
    142a:	80 93 40 03 	sts	0x0340, r24
    142e:	62 c0       	rjmp	.+196    	; 0x14f4 <main+0xfdc>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1430:	80 91 40 03 	lds	r24, 0x0340
    1434:	8f 7e       	andi	r24, 0xEF	; 239
    1436:	80 93 40 03 	sts	0x0340, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    143a:	80 91 3e 03 	lds	r24, 0x033E
    143e:	80 62       	ori	r24, 0x20	; 32
    1440:	80 93 3e 03 	sts	0x033E, r24
    1444:	e1 c0       	rjmp	.+450    	; 0x1608 <main+0x10f0>
				//*********************************************
					break;
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1446:	80 91 3e 03 	lds	r24, 0x033E
    144a:	80 61       	ori	r24, 0x10	; 16
    144c:	80 93 3e 03 	sts	0x033E, r24
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	9c a3       	std	Y+36, r25	; 0x24
    1456:	8b a3       	std	Y+35, r24	; 0x23
    1458:	d7 c0       	rjmp	.+430    	; 0x1608 <main+0x10f0>
					fixtureMotor = 1;
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
    145a:	80 91 3f 03 	lds	r24, 0x033F
    145e:	81 60       	ori	r24, 0x01	; 1
    1460:	80 93 3f 03 	sts	0x033F, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    1464:	80 91 3e 03 	lds	r24, 0x033E
    1468:	8f 77       	andi	r24, 0x7F	; 127
    146a:	80 93 3e 03 	sts	0x033E, r24
    146e:	42 c0       	rjmp	.+132    	; 0x14f4 <main+0xfdc>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1470:	80 91 40 03 	lds	r24, 0x0340
    1474:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    1476:	8f 7d       	andi	r24, 0xDF	; 223
    1478:	80 93 40 03 	sts	0x0340, r24
    147c:	a1 e0       	ldi	r26, 0x01	; 1
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	bc 8b       	std	Y+20, r27	; 0x14
    1482:	ab 8b       	std	Y+19, r26	; 0x13
    1484:	c1 c0       	rjmp	.+386    	; 0x1608 <main+0x10f0>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1486:	80 91 3e 03 	lds	r24, 0x033E
    148a:	80 61       	ori	r24, 0x10	; 16
    148c:	80 93 3e 03 	sts	0x033E, r24
    1490:	b7 c0       	rjmp	.+366    	; 0x1600 <main+0x10e8>
					fixtureMotor = 1;
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    1492:	80 91 3e 03 	lds	r24, 0x033E
    1496:	8f 77       	andi	r24, 0x7F	; 127
    1498:	80 93 3e 03 	sts	0x033E, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    149c:	80 91 40 03 	lds	r24, 0x0340
    14a0:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    14a2:	8f 7d       	andi	r24, 0xDF	; 223
    14a4:	80 93 40 03 	sts	0x0340, r24
    14a8:	1c a2       	std	Y+36, r1	; 0x24
    14aa:	1b a2       	std	Y+35, r1	; 0x23
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9c 8b       	std	Y+20, r25	; 0x14
    14b2:	8b 8b       	std	Y+19, r24	; 0x13
    14b4:	a9 c0       	rjmp	.+338    	; 0x1608 <main+0x10f0>
					fixtureMotor = 1;
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    14b6:	80 91 40 03 	lds	r24, 0x0340
    14ba:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    14bc:	80 62       	ori	r24, 0x20	; 32
    14be:	80 93 40 03 	sts	0x0340, r24
    14c2:	1c a2       	std	Y+36, r1	; 0x24
    14c4:	1b a2       	std	Y+35, r1	; 0x23
    14c6:	1c 8a       	std	Y+20, r1	; 0x14
    14c8:	1b 8a       	std	Y+19, r1	; 0x13
    14ca:	9e c0       	rjmp	.+316    	; 0x1608 <main+0x10f0>
				
					break;
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    14cc:	80 91 3e 03 	lds	r24, 0x033E
    14d0:	80 61       	ori	r24, 0x10	; 16
    14d2:	80 93 3e 03 	sts	0x033E, r24
					fixtureMotor = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
    14d6:	80 91 3f 03 	lds	r24, 0x033F
    14da:	8e 7f       	andi	r24, 0xFE	; 254
    14dc:	80 93 3f 03 	sts	0x033F, r24
    14e0:	a1 e0       	ldi	r26, 0x01	; 1
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	bc a3       	std	Y+36, r27	; 0x24
    14e6:	ab a3       	std	Y+35, r26	; 0x23
    14e8:	8f c0       	rjmp	.+286    	; 0x1608 <main+0x10f0>
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    14ea:	80 91 41 03 	lds	r24, 0x0341
    14ee:	87 7f       	andi	r24, 0xF7	; 247
    14f0:	80 93 41 03 	sts	0x0341, r24
    14f4:	1c a2       	std	Y+36, r1	; 0x24
    14f6:	1b a2       	std	Y+35, r1	; 0x23
    14f8:	87 c0       	rjmp	.+270    	; 0x1608 <main+0x10f0>
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    14fa:	80 91 3e 03 	lds	r24, 0x033E
    14fe:	8f 7e       	andi	r24, 0xEF	; 239
    1500:	80 93 3e 03 	sts	0x033E, r24
    1504:	21 e0       	ldi	r18, 0x01	; 1
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3c a3       	std	Y+36, r19	; 0x24
    150a:	2b a3       	std	Y+35, r18	; 0x23
    150c:	7d c0       	rjmp	.+250    	; 0x1608 <main+0x10f0>
					fixtureMotor = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    150e:	80 91 41 03 	lds	r24, 0x0341
    1512:	88 60       	ori	r24, 0x08	; 8
    1514:	12 c0       	rjmp	.+36     	; 0x153a <main+0x1022>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
    1516:	80 91 3f 03 	lds	r24, 0x033F
    151a:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    151c:	8f 7d       	andi	r24, 0xDF	; 223
    151e:	80 93 3f 03 	sts	0x033F, r24
    1522:	1c a2       	std	Y+36, r1	; 0x24
    1524:	1b a2       	std	Y+35, r1	; 0x23
    1526:	41 e0       	ldi	r20, 0x01	; 1
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	27 96       	adiw	r28, 0x07	; 7
    152c:	5f af       	std	Y+63, r21	; 0x3f
    152e:	4e af       	std	Y+62, r20	; 0x3e
    1530:	27 97       	sbiw	r28, 0x07	; 7
    1532:	6a c0       	rjmp	.+212    	; 0x1608 <main+0x10f0>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1534:	80 91 41 03 	lds	r24, 0x0341
    1538:	8d 7f       	andi	r24, 0xFD	; 253
    153a:	80 93 41 03 	sts	0x0341, r24
    153e:	64 c0       	rjmp	.+200    	; 0x1608 <main+0x10f0>
				case DRY2:
					fixtureMotor = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    1540:	80 91 3f 03 	lds	r24, 0x033F
    1544:	8f 7b       	andi	r24, 0xBF	; 191
    1546:	80 93 3f 03 	sts	0x033F, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    154a:	80 91 41 03 	lds	r24, 0x0341
    154e:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1550:	8b 7f       	andi	r24, 0xFB	; 251
    1552:	80 93 41 03 	sts	0x0341, r24
    1556:	27 96       	adiw	r28, 0x07	; 7
    1558:	1f ae       	std	Y+63, r1	; 0x3f
    155a:	1e ae       	std	Y+62, r1	; 0x3e
    155c:	27 97       	sbiw	r28, 0x07	; 7
    155e:	54 c0       	rjmp	.+168    	; 0x1608 <main+0x10f0>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1560:	80 91 40 03 	lds	r24, 0x0340
    1564:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1566:	80 61       	ori	r24, 0x10	; 16
    1568:	80 93 40 03 	sts	0x0340, r24
    156c:	1c a2       	std	Y+36, r1	; 0x24
    156e:	1b a2       	std	Y+35, r1	; 0x23
    1570:	8f e1       	ldi	r24, 0x1F	; 31
    1572:	68 2e       	mov	r6, r24
    1574:	71 2c       	mov	r7, r1
    1576:	48 c0       	rjmp	.+144    	; 0x1608 <main+0x10f0>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1578:	80 91 3e 03 	lds	r24, 0x033E
    157c:	8f 7e       	andi	r24, 0xEF	; 239
    157e:	80 93 3e 03 	sts	0x033E, r24
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	9c a3       	std	Y+36, r25	; 0x24
    1588:	8b a3       	std	Y+35, r24	; 0x23
    158a:	00 e2       	ldi	r16, 0x20	; 32
    158c:	60 2e       	mov	r6, r16
    158e:	71 2c       	mov	r7, r1
    1590:	3b c0       	rjmp	.+118    	; 0x1608 <main+0x10f0>
					fixtureMotor = 1;
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1592:	80 91 3e 03 	lds	r24, 0x033E
    1596:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    1598:	84 60       	ori	r24, 0x04	; 4
    159a:	80 93 3e 03 	sts	0x033E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    159e:	80 91 40 03 	lds	r24, 0x0340
    15a2:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    15a4:	8f 7e       	andi	r24, 0xEF	; 239
    15a6:	80 93 40 03 	sts	0x0340, r24
    15aa:	1c a2       	std	Y+36, r1	; 0x24
    15ac:	1b a2       	std	Y+35, r1	; 0x23
    15ae:	11 e2       	ldi	r17, 0x21	; 33
    15b0:	61 2e       	mov	r6, r17
    15b2:	71 2c       	mov	r7, r1
    15b4:	29 c0       	rjmp	.+82     	; 0x1608 <main+0x10f0>
					break;
    15b6:	b2 e2       	ldi	r27, 0x22	; 34
    15b8:	6b 2e       	mov	r6, r27
    15ba:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    15bc:	80 91 3e 03 	lds	r24, 0x033E
    15c0:	8d 7f       	andi	r24, 0xFD	; 253
    15c2:	80 93 3e 03 	sts	0x033E, r24
    15c6:	a1 e0       	ldi	r26, 0x01	; 1
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	bc 8f       	std	Y+28, r27	; 0x1c
    15cc:	ab 8f       	std	Y+27, r26	; 0x1b
    15ce:	1c c0       	rjmp	.+56     	; 0x1608 <main+0x10f0>
					plateLoadMotor = 1;
					break;
    15d0:	a3 e2       	ldi	r26, 0x23	; 35
    15d2:	6a 2e       	mov	r6, r26
    15d4:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    15d6:	80 91 3e 03 	lds	r24, 0x033E
    15da:	8b 7f       	andi	r24, 0xFB	; 251
    15dc:	80 93 3e 03 	sts	0x033E, r24
					if(print35 == 1){
    15e0:	2b ad       	ldd	r18, Y+59	; 0x3b
    15e2:	3c ad       	ldd	r19, Y+60	; 0x3c
    15e4:	21 30       	cpi	r18, 0x01	; 1
    15e6:	31 05       	cpc	r19, r1
    15e8:	41 f4       	brne	.+16     	; 0x15fa <main+0x10e2>
						OrangutanLCD::clear();
    15ea:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    15ee:	8e e0       	ldi	r24, 0x0E	; 14
    15f0:	93 e0       	ldi	r25, 0x03	; 3
    15f2:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    15f6:	1c ae       	std	Y+60, r1	; 0x3c
    15f8:	1b ae       	std	Y+59, r1	; 0x3b
    15fa:	1c 8e       	std	Y+28, r1	; 0x1c
    15fc:	1b 8e       	std	Y+27, r1	; 0x1b
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <main+0x10f0>
    1600:	41 e0       	ldi	r20, 0x01	; 1
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	5c a3       	std	Y+36, r21	; 0x24
    1606:	4b a3       	std	Y+35, r20	; 0x23
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
    1608:	8d b7       	in	r24, 0x3d	; 61
    160a:	9e b7       	in	r25, 0x3e	; 62
    160c:	42 97       	sbiw	r24, 0x12	; 18
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	9e bf       	out	0x3e, r25	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	8d bf       	out	0x3d, r24	; 61
    1618:	ed b7       	in	r30, 0x3d	; 61
    161a:	fe b7       	in	r31, 0x3e	; 62
    161c:	31 96       	adiw	r30, 0x01	; 1
    161e:	82 e0       	ldi	r24, 0x02	; 2
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	ad b7       	in	r26, 0x3d	; 61
    1624:	be b7       	in	r27, 0x3e	; 62
    1626:	12 96       	adiw	r26, 0x02	; 2
    1628:	9c 93       	st	X, r25
    162a:	8e 93       	st	-X, r24
    162c:	11 97       	sbiw	r26, 0x01	; 1
    162e:	93 83       	std	Z+3, r25	; 0x03
    1630:	82 83       	std	Z+2, r24	; 0x02
    1632:	95 83       	std	Z+5, r25	; 0x05
    1634:	84 83       	std	Z+4, r24	; 0x04
    1636:	97 83       	std	Z+7, r25	; 0x07
    1638:	86 83       	std	Z+6, r24	; 0x06
    163a:	21 e0       	ldi	r18, 0x01	; 1
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	31 87       	std	Z+9, r19	; 0x09
    1640:	20 87       	std	Z+8, r18	; 0x08
    1642:	33 87       	std	Z+11, r19	; 0x0b
    1644:	22 87       	std	Z+10, r18	; 0x0a
    1646:	35 87       	std	Z+13, r19	; 0x0d
    1648:	24 87       	std	Z+12, r18	; 0x0c
    164a:	37 87       	std	Z+15, r19	; 0x0f
    164c:	26 87       	std	Z+14, r18	; 0x0e
    164e:	31 8b       	std	Z+17, r19	; 0x11
    1650:	20 8b       	std	Z+16, r18	; 0x10
    1652:	c2 01       	movw	r24, r4
    1654:	b1 01       	movw	r22, r2
    1656:	4f 81       	ldd	r20, Y+7	; 0x07
    1658:	58 85       	ldd	r21, Y+8	; 0x08
    165a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    165c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    165e:	0b a1       	ldd	r16, Y+35	; 0x23
    1660:	1c a1       	ldd	r17, Y+36	; 0x24
    1662:	eb 88       	ldd	r14, Y+19	; 0x13
    1664:	fc 88       	ldd	r15, Y+20	; 0x14
    1666:	cc 24       	eor	r12, r12
    1668:	dd 24       	eor	r13, r13
    166a:	27 96       	adiw	r28, 0x07	; 7
    166c:	ae ac       	ldd	r10, Y+62	; 0x3e
    166e:	bf ac       	ldd	r11, Y+63	; 0x3f
    1670:	27 97       	sbiw	r28, 0x07	; 7
    1672:	f2 e0       	ldi	r31, 0x02	; 2
    1674:	8f 2e       	mov	r8, r31
    1676:	91 2c       	mov	r9, r1
    1678:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    167c:	4d b7       	in	r20, 0x3d	; 61
    167e:	5e b7       	in	r21, 0x3e	; 62
    1680:	4e 5e       	subi	r20, 0xEE	; 238
    1682:	5f 4f       	sbci	r21, 0xFF	; 255
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	5e bf       	out	0x3e, r21	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	4d bf       	out	0x3d, r20	; 61
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>
		u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;*/

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("FIRST B");
			while(state != DONER)
    1696:	54 e2       	ldi	r21, 0x24	; 36
    1698:	65 16       	cp	r6, r21
    169a:	71 04       	cpc	r7, r1
    169c:	11 f4       	brne	.+4      	; 0x16a2 <main+0x118a>
    169e:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <main+0x2a0e>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);

				counter ++;
    16a2:	08 94       	sec
    16a4:	41 1c       	adc	r4, r1
    16a6:	51 1c       	adc	r5, r1
    16a8:	89 cc       	rjmp	.-1774   	; 0xfbc <main+0xaa4>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    16aa:	82 e0       	ldi	r24, 0x02	; 2
    16ac:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
    16b0:	88 23       	and	r24, r24
    16b2:	11 f0       	breq	.+4      	; 0x16b8 <main+0x11a0>
    16b4:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <main+0x2a5c>
			OrangutanLCD::gotoXY(7,0);
    16b8:	87 e0       	ldi	r24, 0x07	; 7
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("SECOND B");
    16c0:	8b e1       	ldi	r24, 0x1B	; 27
    16c2:	93 e0       	ldi	r25, 0x03	; 3
    16c4:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    16c8:	66 24       	eor	r6, r6
    16ca:	77 24       	eor	r7, r7
    16cc:	1e 82       	std	Y+6, r1	; 0x06
    16ce:	1d 82       	std	Y+5, r1	; 0x05
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	98 af       	std	Y+56, r25	; 0x38
    16d6:	8f ab       	std	Y+55, r24	; 0x37
    16d8:	22 24       	eor	r2, r2
    16da:	33 24       	eor	r3, r3
    16dc:	9a ab       	std	Y+50, r25	; 0x32
    16de:	89 ab       	std	Y+49, r24	; 0x31
    16e0:	1a a6       	std	Y+42, r1	; 0x2a
    16e2:	19 a6       	std	Y+41, r1	; 0x29
    16e4:	1a a2       	std	Y+34, r1	; 0x22
    16e6:	19 a2       	std	Y+33, r1	; 0x21
    16e8:	1a 8e       	std	Y+26, r1	; 0x1a
    16ea:	19 8e       	std	Y+25, r1	; 0x19
    16ec:	44 24       	eor	r4, r4
    16ee:	55 24       	eor	r5, r5
    16f0:	1e 86       	std	Y+14, r1	; 0x0e
    16f2:	1d 86       	std	Y+13, r1	; 0x0d
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    16f4:	84 e4       	ldi	r24, 0x44	; 68
    16f6:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1700:	85 e4       	ldi	r24, 0x45	; 69
    1702:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1706:	0e 94 4f 18 	call	0x309e	; 0x309e <_Z11i2c_readAckv>
    170a:	80 93 42 03 	sts	0x0342, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    170e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <_Z11i2c_readNakv>
    1712:	80 93 43 03 	sts	0x0343, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1716:	0e 94 35 18 	call	0x306a	; 0x306a <_Z8i2c_stopv>
				
				if(state != INIT){
    171a:	61 14       	cp	r6, r1
    171c:	71 04       	cpc	r7, r1
    171e:	79 f0       	breq	.+30     	; 0x173e <main+0x1226>
					OrangutanLCD::gotoXY(0,1);
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	61 e0       	ldi	r22, 0x01	; 1
    1724:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1728:	89 ef       	ldi	r24, 0xF9	; 249
    172a:	92 e0       	ldi	r25, 0x02	; 2
    172c:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    1730:	b3 01       	movw	r22, r6
    1732:	88 27       	eor	r24, r24
    1734:	77 fd       	sbrc	r23, 7
    1736:	80 95       	com	r24
    1738:	98 2f       	mov	r25, r24
    173a:	0e 94 0b 1b 	call	0x3616	; 0x3616 <_ZN12OrangutanLCD5printEl>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    173e:	c2 01       	movw	r24, r4
    1740:	be 01       	movw	r22, r28
    1742:	6f 5f       	subi	r22, 0xFF	; 255
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
    1746:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    174a:	61 14       	cp	r6, r1
    174c:	71 04       	cpc	r7, r1
    174e:	29 f4       	brne	.+10     	; 0x175a <main+0x1242>
    1750:	88 23       	and	r24, r24
    1752:	09 f4       	brne	.+2      	; 0x1756 <main+0x123e>
    1754:	40 c0       	rjmp	.+128    	; 0x17d6 <main+0x12be>
    1756:	12 01       	movw	r2, r4
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <main+0x124a>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && /*counter - counterRef > totallength1*plateLoadMotorLoadPlate&&*/ u_inputByte0.bits_in_inputByte0.plate == 0){
    175a:	91 e0       	ldi	r25, 0x01	; 1
    175c:	69 16       	cp	r6, r25
    175e:	71 04       	cpc	r7, r1
    1760:	31 f4       	brne	.+12     	; 0x176e <main+0x1256>
    1762:	80 91 42 03 	lds	r24, 0x0342
    1766:	80 fd       	sbrc	r24, 0
    1768:	43 c0       	rjmp	.+134    	; 0x17f0 <main+0x12d8>
    176a:	12 01       	movw	r2, r4
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <main+0x125e>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    176e:	a2 e0       	ldi	r26, 0x02	; 2
    1770:	6a 16       	cp	r6, r26
    1772:	71 04       	cpc	r7, r1
    1774:	49 f4       	brne	.+18     	; 0x1788 <main+0x1270>
    1776:	c2 01       	movw	r24, r4
    1778:	82 19       	sub	r24, r2
    177a:	93 09       	sbc	r25, r3
    177c:	85 36       	cpi	r24, 0x65	; 101
    177e:	91 05       	cpc	r25, r1
    1780:	0c f4       	brge	.+2      	; 0x1784 <main+0x126c>
    1782:	46 c0       	rjmp	.+140    	; 0x1810 <main+0x12f8>
    1784:	12 01       	movw	r2, r4
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <main+0x1278>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1788:	b3 e0       	ldi	r27, 0x03	; 3
    178a:	6b 16       	cp	r6, r27
    178c:	71 04       	cpc	r7, r1
    178e:	49 f4       	brne	.+18     	; 0x17a2 <main+0x128a>
    1790:	c2 01       	movw	r24, r4
    1792:	82 19       	sub	r24, r2
    1794:	93 09       	sbc	r25, r3
    1796:	81 5a       	subi	r24, 0xA1	; 161
    1798:	9f 40       	sbci	r25, 0x0F	; 15
    179a:	0c f4       	brge	.+2      	; 0x179e <main+0x1286>
    179c:	49 c0       	rjmp	.+146    	; 0x1830 <main+0x1318>
    179e:	12 01       	movw	r2, r4
    17a0:	04 c0       	rjmp	.+8      	; 0x17aa <main+0x1292>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    17a2:	34 e0       	ldi	r19, 0x04	; 4
    17a4:	63 16       	cp	r6, r19
    17a6:	71 04       	cpc	r7, r1
    17a8:	49 f4       	brne	.+18     	; 0x17bc <main+0x12a4>
    17aa:	c2 01       	movw	r24, r4
    17ac:	82 19       	sub	r24, r2
    17ae:	93 09       	sbc	r25, r3
    17b0:	89 5e       	subi	r24, 0xE9	; 233
    17b2:	93 40       	sbci	r25, 0x03	; 3
    17b4:	0c f4       	brge	.+2      	; 0x17b8 <main+0x12a0>
    17b6:	4c c0       	rjmp	.+152    	; 0x1850 <main+0x1338>
    17b8:	12 01       	movw	r2, r4
    17ba:	04 c0       	rjmp	.+8      	; 0x17c4 <main+0x12ac>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    17bc:	55 e0       	ldi	r21, 0x05	; 5
    17be:	65 16       	cp	r6, r21
    17c0:	71 04       	cpc	r7, r1
    17c2:	49 f4       	brne	.+18     	; 0x17d6 <main+0x12be>
    17c4:	c2 01       	movw	r24, r4
    17c6:	82 19       	sub	r24, r2
    17c8:	93 09       	sbc	r25, r3
    17ca:	85 36       	cpi	r24, 0x65	; 101
    17cc:	91 05       	cpc	r25, r1
    17ce:	0c f4       	brge	.+2      	; 0x17d2 <main+0x12ba>
    17d0:	4f c0       	rjmp	.+158    	; 0x1870 <main+0x1358>
    17d2:	12 01       	movw	r2, r4
    17d4:	04 c0       	rjmp	.+8      	; 0x17de <main+0x12c6>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totallength2*fixtureMotorBrush2StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    17d6:	86 e0       	ldi	r24, 0x06	; 6
    17d8:	68 16       	cp	r6, r24
    17da:	71 04       	cpc	r7, r1
    17dc:	61 f4       	brne	.+24     	; 0x17f6 <main+0x12de>
    17de:	c2 01       	movw	r24, r4
    17e0:	82 19       	sub	r24, r2
    17e2:	93 09       	sbc	r25, r3
    17e4:	81 5a       	subi	r24, 0xA1	; 161
    17e6:	9f 40       	sbci	r25, 0x0F	; 15
    17e8:	0c f4       	brge	.+2      	; 0x17ec <main+0x12d4>
    17ea:	52 c0       	rjmp	.+164    	; 0x1890 <main+0x1378>
    17ec:	12 01       	movw	r2, r4
    17ee:	07 c0       	rjmp	.+14     	; 0x17fe <main+0x12e6>
    17f0:	e1 e0       	ldi	r30, 0x01	; 1
    17f2:	6e 2e       	mov	r6, r30
    17f4:	71 2c       	mov	r7, r1
					state = B2SET;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    17f6:	bf e0       	ldi	r27, 0x0F	; 15
    17f8:	6b 16       	cp	r6, r27
    17fa:	71 04       	cpc	r7, r1
    17fc:	61 f4       	brne	.+24     	; 0x1816 <main+0x12fe>
    17fe:	c2 01       	movw	r24, r4
    1800:	82 19       	sub	r24, r2
    1802:	93 09       	sbc	r25, r3
    1804:	85 36       	cpi	r24, 0x65	; 101
    1806:	91 05       	cpc	r25, r1
    1808:	0c f4       	brge	.+2      	; 0x180c <main+0x12f4>
    180a:	52 c0       	rjmp	.+164    	; 0x18b0 <main+0x1398>
    180c:	12 01       	movw	r2, r4
    180e:	07 c0       	rjmp	.+14     	; 0x181e <main+0x1306>
    1810:	72 e0       	ldi	r23, 0x02	; 2
    1812:	67 2e       	mov	r6, r23
    1814:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    1816:	20 e1       	ldi	r18, 0x10	; 16
    1818:	62 16       	cp	r6, r18
    181a:	71 04       	cpc	r7, r1
    181c:	61 f4       	brne	.+24     	; 0x1836 <main+0x131e>
    181e:	c2 01       	movw	r24, r4
    1820:	82 19       	sub	r24, r2
    1822:	93 09       	sbc	r25, r3
    1824:	85 36       	cpi	r24, 0x65	; 101
    1826:	91 05       	cpc	r25, r1
    1828:	0c f4       	brge	.+2      	; 0x182c <main+0x1314>
    182a:	52 c0       	rjmp	.+164    	; 0x18d0 <main+0x13b8>
    182c:	12 01       	movw	r2, r4
    182e:	07 c0       	rjmp	.+14     	; 0x183e <main+0x1326>
    1830:	63 e0       	ldi	r22, 0x03	; 3
    1832:	66 2e       	mov	r6, r22
    1834:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    1836:	31 e1       	ldi	r19, 0x11	; 17
    1838:	63 16       	cp	r6, r19
    183a:	71 04       	cpc	r7, r1
    183c:	61 f4       	brne	.+24     	; 0x1856 <main+0x133e>
    183e:	c2 01       	movw	r24, r4
    1840:	82 19       	sub	r24, r2
    1842:	93 09       	sbc	r25, r3
    1844:	81 5d       	subi	r24, 0xD1	; 209
    1846:	97 40       	sbci	r25, 0x07	; 7
    1848:	0c f4       	brge	.+2      	; 0x184c <main+0x1334>
    184a:	52 c0       	rjmp	.+164    	; 0x18f0 <main+0x13d8>
    184c:	12 01       	movw	r2, r4
    184e:	07 c0       	rjmp	.+14     	; 0x185e <main+0x1346>
    1850:	54 e0       	ldi	r21, 0x04	; 4
    1852:	65 2e       	mov	r6, r21
    1854:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    1856:	52 e1       	ldi	r21, 0x12	; 18
    1858:	65 16       	cp	r6, r21
    185a:	71 04       	cpc	r7, r1
    185c:	61 f4       	brne	.+24     	; 0x1876 <main+0x135e>
    185e:	c2 01       	movw	r24, r4
    1860:	82 19       	sub	r24, r2
    1862:	93 09       	sbc	r25, r3
    1864:	85 36       	cpi	r24, 0x65	; 101
    1866:	91 05       	cpc	r25, r1
    1868:	0c f4       	brge	.+2      	; 0x186c <main+0x1354>
    186a:	52 c0       	rjmp	.+164    	; 0x1910 <main+0x13f8>
    186c:	12 01       	movw	r2, r4
    186e:	07 c0       	rjmp	.+14     	; 0x187e <main+0x1366>
    1870:	45 e0       	ldi	r20, 0x05	; 5
    1872:	64 2e       	mov	r6, r20
    1874:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totallength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    1876:	83 e1       	ldi	r24, 0x13	; 19
    1878:	68 16       	cp	r6, r24
    187a:	71 04       	cpc	r7, r1
    187c:	61 f4       	brne	.+24     	; 0x1896 <main+0x137e>
    187e:	c2 01       	movw	r24, r4
    1880:	82 19       	sub	r24, r2
    1882:	93 09       	sbc	r25, r3
    1884:	81 5d       	subi	r24, 0xD1	; 209
    1886:	97 40       	sbci	r25, 0x07	; 7
    1888:	0c f4       	brge	.+2      	; 0x188c <main+0x1374>
    188a:	52 c0       	rjmp	.+164    	; 0x1930 <main+0x1418>
    188c:	12 01       	movw	r2, r4
    188e:	07 c0       	rjmp	.+14     	; 0x189e <main+0x1386>
    1890:	36 e0       	ldi	r19, 0x06	; 6
    1892:	63 2e       	mov	r6, r19
    1894:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    1896:	b4 e1       	ldi	r27, 0x14	; 20
    1898:	6b 16       	cp	r6, r27
    189a:	71 04       	cpc	r7, r1
    189c:	61 f4       	brne	.+24     	; 0x18b6 <main+0x139e>
    189e:	c2 01       	movw	r24, r4
    18a0:	82 19       	sub	r24, r2
    18a2:	93 09       	sbc	r25, r3
    18a4:	85 36       	cpi	r24, 0x65	; 101
    18a6:	91 05       	cpc	r25, r1
    18a8:	0c f4       	brge	.+2      	; 0x18ac <main+0x1394>
    18aa:	50 c0       	rjmp	.+160    	; 0x194c <main+0x1434>
    18ac:	12 01       	movw	r2, r4
    18ae:	07 c0       	rjmp	.+14     	; 0x18be <main+0x13a6>
    18b0:	2f e0       	ldi	r18, 0x0F	; 15
    18b2:	62 2e       	mov	r6, r18
    18b4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    18b6:	25 e1       	ldi	r18, 0x15	; 21
    18b8:	62 16       	cp	r6, r18
    18ba:	71 04       	cpc	r7, r1
    18bc:	61 f4       	brne	.+24     	; 0x18d6 <main+0x13be>
    18be:	c2 01       	movw	r24, r4
    18c0:	82 19       	sub	r24, r2
    18c2:	93 09       	sbc	r25, r3
    18c4:	81 5d       	subi	r24, 0xD1	; 209
    18c6:	97 40       	sbci	r25, 0x07	; 7
    18c8:	0c f4       	brge	.+2      	; 0x18cc <main+0x13b4>
    18ca:	51 c0       	rjmp	.+162    	; 0x196e <main+0x1456>
    18cc:	12 01       	movw	r2, r4
    18ce:	07 c0       	rjmp	.+14     	; 0x18de <main+0x13c6>
    18d0:	90 e1       	ldi	r25, 0x10	; 16
    18d2:	69 2e       	mov	r6, r25
    18d4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    18d6:	46 e1       	ldi	r20, 0x16	; 22
    18d8:	64 16       	cp	r6, r20
    18da:	71 04       	cpc	r7, r1
    18dc:	61 f4       	brne	.+24     	; 0x18f6 <main+0x13de>
    18de:	c2 01       	movw	r24, r4
    18e0:	82 19       	sub	r24, r2
    18e2:	93 09       	sbc	r25, r3
    18e4:	85 36       	cpi	r24, 0x65	; 101
    18e6:	91 05       	cpc	r25, r1
    18e8:	0c f4       	brge	.+2      	; 0x18ec <main+0x13d4>
    18ea:	53 c0       	rjmp	.+166    	; 0x1992 <main+0x147a>
    18ec:	12 01       	movw	r2, r4
    18ee:	07 c0       	rjmp	.+14     	; 0x18fe <main+0x13e6>
    18f0:	81 e1       	ldi	r24, 0x11	; 17
    18f2:	68 2e       	mov	r6, r24
    18f4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totallength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    18f6:	57 e1       	ldi	r21, 0x17	; 23
    18f8:	65 16       	cp	r6, r21
    18fa:	71 04       	cpc	r7, r1
    18fc:	61 f4       	brne	.+24     	; 0x1916 <main+0x13fe>
    18fe:	c2 01       	movw	r24, r4
    1900:	82 19       	sub	r24, r2
    1902:	93 09       	sbc	r25, r3
    1904:	81 5a       	subi	r24, 0xA1	; 161
    1906:	9f 40       	sbci	r25, 0x0F	; 15
    1908:	0c f4       	brge	.+2      	; 0x190c <main+0x13f4>
    190a:	53 c0       	rjmp	.+166    	; 0x19b2 <main+0x149a>
    190c:	12 01       	movw	r2, r4
    190e:	07 c0       	rjmp	.+14     	; 0x191e <main+0x1406>
    1910:	02 e1       	ldi	r16, 0x12	; 18
    1912:	60 2e       	mov	r6, r16
    1914:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    1916:	b8 e1       	ldi	r27, 0x18	; 24
    1918:	6b 16       	cp	r6, r27
    191a:	71 04       	cpc	r7, r1
    191c:	61 f4       	brne	.+24     	; 0x1936 <main+0x141e>
    191e:	c2 01       	movw	r24, r4
    1920:	82 19       	sub	r24, r2
    1922:	93 09       	sbc	r25, r3
    1924:	85 36       	cpi	r24, 0x65	; 101
    1926:	91 05       	cpc	r25, r1
    1928:	0c f4       	brge	.+2      	; 0x192c <main+0x1414>
    192a:	51 c0       	rjmp	.+162    	; 0x19ce <main+0x14b6>
    192c:	12 01       	movw	r2, r4
    192e:	07 c0       	rjmp	.+14     	; 0x193e <main+0x1426>
    1930:	13 e1       	ldi	r17, 0x13	; 19
    1932:	61 2e       	mov	r6, r17
    1934:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    1936:	29 e1       	ldi	r18, 0x19	; 25
    1938:	62 16       	cp	r6, r18
    193a:	71 04       	cpc	r7, r1
    193c:	51 f4       	brne	.+20     	; 0x1952 <main+0x143a>
    193e:	c2 01       	movw	r24, r4
    1940:	82 19       	sub	r24, r2
    1942:	93 09       	sbc	r25, r3
    1944:	81 5a       	subi	r24, 0xA1	; 161
    1946:	9f 40       	sbci	r25, 0x0F	; 15
    1948:	44 f4       	brge	.+16     	; 0x195a <main+0x1442>
    194a:	51 c0       	rjmp	.+162    	; 0x19ee <main+0x14d6>
    194c:	b4 e1       	ldi	r27, 0x14	; 20
    194e:	6b 2e       	mov	r6, r27
    1950:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totallength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    1952:	4a e1       	ldi	r20, 0x1A	; 26
    1954:	64 16       	cp	r6, r20
    1956:	71 04       	cpc	r7, r1
    1958:	69 f4       	brne	.+26     	; 0x1974 <main+0x145c>
    195a:	c2 01       	movw	r24, r4
    195c:	82 19       	sub	r24, r2
    195e:	93 09       	sbc	r25, r3
    1960:	81 5a       	subi	r24, 0xA1	; 161
    1962:	9f 40       	sbci	r25, 0x0F	; 15
    1964:	0c f4       	brge	.+2      	; 0x1968 <main+0x1450>
    1966:	53 c0       	rjmp	.+166    	; 0x1a0e <main+0x14f6>
    1968:	5e 82       	std	Y+6, r5	; 0x06
    196a:	4d 82       	std	Y+5, r4	; 0x05
    196c:	07 c0       	rjmp	.+14     	; 0x197c <main+0x1464>
    196e:	a5 e1       	ldi	r26, 0x15	; 21
    1970:	6a 2e       	mov	r6, r26
    1972:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    1974:	8b e1       	ldi	r24, 0x1B	; 27
    1976:	68 16       	cp	r6, r24
    1978:	71 04       	cpc	r7, r1
    197a:	71 f4       	brne	.+28     	; 0x1998 <main+0x1480>
    197c:	c2 01       	movw	r24, r4
    197e:	ad 81       	ldd	r26, Y+5	; 0x05
    1980:	be 81       	ldd	r27, Y+6	; 0x06
    1982:	8a 1b       	sub	r24, r26
    1984:	9b 0b       	sbc	r25, r27
    1986:	85 36       	cpi	r24, 0x65	; 101
    1988:	91 05       	cpc	r25, r1
    198a:	0c f4       	brge	.+2      	; 0x198e <main+0x1476>
    198c:	50 c0       	rjmp	.+160    	; 0x1a2e <main+0x1516>
    198e:	12 01       	movw	r2, r4
    1990:	07 c0       	rjmp	.+14     	; 0x19a0 <main+0x1488>
    1992:	f6 e1       	ldi	r31, 0x16	; 22
    1994:	6f 2e       	mov	r6, r31
    1996:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    1998:	bc e1       	ldi	r27, 0x1C	; 28
    199a:	6b 16       	cp	r6, r27
    199c:	71 04       	cpc	r7, r1
    199e:	61 f4       	brne	.+24     	; 0x19b8 <main+0x14a0>
    19a0:	c2 01       	movw	r24, r4
    19a2:	82 19       	sub	r24, r2
    19a4:	93 09       	sbc	r25, r3
    19a6:	85 36       	cpi	r24, 0x65	; 101
    19a8:	91 05       	cpc	r25, r1
    19aa:	0c f4       	brge	.+2      	; 0x19ae <main+0x1496>
    19ac:	50 c0       	rjmp	.+160    	; 0x1a4e <main+0x1536>
    19ae:	12 01       	movw	r2, r4
    19b0:	07 c0       	rjmp	.+14     	; 0x19c0 <main+0x14a8>
    19b2:	e7 e1       	ldi	r30, 0x17	; 23
    19b4:	6e 2e       	mov	r6, r30
    19b6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    19b8:	2d e1       	ldi	r18, 0x1D	; 29
    19ba:	62 16       	cp	r6, r18
    19bc:	71 04       	cpc	r7, r1
    19be:	51 f4       	brne	.+20     	; 0x19d4 <main+0x14bc>
    19c0:	c2 01       	movw	r24, r4
    19c2:	82 19       	sub	r24, r2
    19c4:	93 09       	sbc	r25, r3
    19c6:	81 5a       	subi	r24, 0xA1	; 161
    19c8:	9f 40       	sbci	r25, 0x0F	; 15
    19ca:	44 f4       	brge	.+16     	; 0x19dc <main+0x14c4>
    19cc:	50 c0       	rjmp	.+160    	; 0x1a6e <main+0x1556>
    19ce:	78 e1       	ldi	r23, 0x18	; 24
    19d0:	67 2e       	mov	r6, r23
    19d2:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totallength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    19d4:	4e e1       	ldi	r20, 0x1E	; 30
    19d6:	64 16       	cp	r6, r20
    19d8:	71 04       	cpc	r7, r1
    19da:	61 f4       	brne	.+24     	; 0x19f4 <main+0x14dc>
    19dc:	c2 01       	movw	r24, r4
    19de:	82 19       	sub	r24, r2
    19e0:	93 09       	sbc	r25, r3
    19e2:	81 5a       	subi	r24, 0xA1	; 161
    19e4:	9f 40       	sbci	r25, 0x0F	; 15
    19e6:	0c f4       	brge	.+2      	; 0x19ea <main+0x14d2>
    19e8:	53 c0       	rjmp	.+166    	; 0x1a90 <main+0x1578>
    19ea:	12 01       	movw	r2, r4
    19ec:	07 c0       	rjmp	.+14     	; 0x19fc <main+0x14e4>
    19ee:	69 e1       	ldi	r22, 0x19	; 25
    19f0:	66 2e       	mov	r6, r22
    19f2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    19f4:	8f e1       	ldi	r24, 0x1F	; 31
    19f6:	68 16       	cp	r6, r24
    19f8:	71 04       	cpc	r7, r1
    19fa:	61 f4       	brne	.+24     	; 0x1a14 <main+0x14fc>
    19fc:	c2 01       	movw	r24, r4
    19fe:	82 19       	sub	r24, r2
    1a00:	93 09       	sbc	r25, r3
    1a02:	89 5e       	subi	r24, 0xE9	; 233
    1a04:	93 40       	sbci	r25, 0x03	; 3
    1a06:	0c f4       	brge	.+2      	; 0x1a0a <main+0x14f2>
    1a08:	55 c1       	rjmp	.+682    	; 0x1cb4 <main+0x179c>
    1a0a:	12 01       	movw	r2, r4
    1a0c:	07 c0       	rjmp	.+14     	; 0x1a1c <main+0x1504>
    1a0e:	5a e1       	ldi	r21, 0x1A	; 26
    1a10:	65 2e       	mov	r6, r21
    1a12:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    1a14:	b0 e2       	ldi	r27, 0x20	; 32
    1a16:	6b 16       	cp	r6, r27
    1a18:	71 04       	cpc	r7, r1
    1a1a:	61 f4       	brne	.+24     	; 0x1a34 <main+0x151c>
    1a1c:	c2 01       	movw	r24, r4
    1a1e:	82 19       	sub	r24, r2
    1a20:	93 09       	sbc	r25, r3
    1a22:	81 5a       	subi	r24, 0xA1	; 161
    1a24:	9f 40       	sbci	r25, 0x0F	; 15
    1a26:	0c f4       	brge	.+2      	; 0x1a2a <main+0x1512>
    1a28:	51 c1       	rjmp	.+674    	; 0x1ccc <main+0x17b4>
    1a2a:	12 01       	movw	r2, r4
    1a2c:	07 c0       	rjmp	.+14     	; 0x1a3c <main+0x1524>
    1a2e:	4b e1       	ldi	r20, 0x1B	; 27
    1a30:	64 2e       	mov	r6, r20
    1a32:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    1a34:	31 e2       	ldi	r19, 0x21	; 33
    1a36:	63 16       	cp	r6, r19
    1a38:	71 04       	cpc	r7, r1
    1a3a:	61 f4       	brne	.+24     	; 0x1a54 <main+0x153c>
    1a3c:	c2 01       	movw	r24, r4
    1a3e:	82 19       	sub	r24, r2
    1a40:	93 09       	sbc	r25, r3
    1a42:	85 36       	cpi	r24, 0x65	; 101
    1a44:	91 05       	cpc	r25, r1
    1a46:	0c f4       	brge	.+2      	; 0x1a4a <main+0x1532>
    1a48:	4e c1       	rjmp	.+668    	; 0x1ce6 <main+0x17ce>
    1a4a:	12 01       	movw	r2, r4
    1a4c:	07 c0       	rjmp	.+14     	; 0x1a5c <main+0x1544>
    1a4e:	3c e1       	ldi	r19, 0x1C	; 28
    1a50:	63 2e       	mov	r6, r19
    1a52:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate){
    1a54:	42 e2       	ldi	r20, 0x22	; 34
    1a56:	64 16       	cp	r6, r20
    1a58:	71 04       	cpc	r7, r1
    1a5a:	61 f4       	brne	.+24     	; 0x1a74 <main+0x155c>
    1a5c:	c2 01       	movw	r24, r4
    1a5e:	82 19       	sub	r24, r2
    1a60:	93 09       	sbc	r25, r3
    1a62:	81 5a       	subi	r24, 0xA1	; 161
    1a64:	9f 40       	sbci	r25, 0x0F	; 15
    1a66:	0c f4       	brge	.+2      	; 0x1a6a <main+0x1552>
    1a68:	50 c1       	rjmp	.+672    	; 0x1d0a <main+0x17f2>
    1a6a:	12 01       	movw	r2, r4
    1a6c:	07 c0       	rjmp	.+14     	; 0x1a7c <main+0x1564>
    1a6e:	2d e1       	ldi	r18, 0x1D	; 29
    1a70:	62 2e       	mov	r6, r18
    1a72:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    1a74:	83 e2       	ldi	r24, 0x23	; 35
    1a76:	68 16       	cp	r6, r24
    1a78:	71 04       	cpc	r7, r1
    1a7a:	69 f4       	brne	.+26     	; 0x1a96 <main+0x157e>
    1a7c:	c2 01       	movw	r24, r4
    1a7e:	82 19       	sub	r24, r2
    1a80:	93 09       	sbc	r25, r3
    1a82:	0b 97       	sbiw	r24, 0x0b	; 11
    1a84:	0c f4       	brge	.+2      	; 0x1a88 <main+0x1570>
    1a86:	4e c1       	rjmp	.+668    	; 0x1d24 <main+0x180c>
    1a88:	94 e2       	ldi	r25, 0x24	; 36
    1a8a:	69 2e       	mov	r6, r25
    1a8c:	71 2c       	mov	r7, r1
    1a8e:	65 c1       	rjmp	.+714    	; 0x1d5a <main+0x1842>
    1a90:	8e e1       	ldi	r24, 0x1E	; 30
    1a92:	68 2e       	mov	r6, r24
    1a94:	71 2c       	mov	r7, r1
				}


				//state actions
						
				switch (state){
    1a96:	f3 01       	movw	r30, r6
    1a98:	e4 32       	cpi	r30, 0x24	; 36
    1a9a:	f1 05       	cpc	r31, r1
    1a9c:	08 f0       	brcs	.+2      	; 0x1aa0 <main+0x1588>
    1a9e:	5d c1       	rjmp	.+698    	; 0x1d5a <main+0x1842>
    1aa0:	ec 56       	subi	r30, 0x6C	; 108
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	ee 0f       	add	r30, r30
    1aa6:	ff 1f       	adc	r31, r31
    1aa8:	05 90       	lpm	r0, Z+
    1aaa:	f4 91       	lpm	r31, Z+
    1aac:	e0 2d       	mov	r30, r0
    1aae:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    1ab0:	80 91 42 03 	lds	r24, 0x0342
    1ab4:	20 91 3e 03 	lds	r18, 0x033E
    1ab8:	90 91 40 03 	lds	r25, 0x0340
    1abc:	82 ff       	sbrs	r24, 2
    1abe:	07 c0       	rjmp	.+14     	; 0x1ace <main+0x15b6>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    1ac0:	2f 7e       	andi	r18, 0xEF	; 239
    1ac2:	20 93 3e 03 	sts	0x033E, r18
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1ac6:	97 7f       	andi	r25, 0xF7	; 247
    1ac8:	90 93 40 03 	sts	0x0340, r25
    1acc:	c9 c0       	rjmp	.+402    	; 0x1c60 <main+0x1748>
						fixtureMotor = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1ace:	2f 7d       	andi	r18, 0xDF	; 223
    1ad0:	20 93 3e 03 	sts	0x033E, r18
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1ad4:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1ad6:	98 60       	ori	r25, 0x08	; 8
    1ad8:	90 93 40 03 	sts	0x0340, r25
						if(print0 == 1){
    1adc:	29 a9       	ldd	r18, Y+49	; 0x31
    1ade:	3a a9       	ldd	r19, Y+50	; 0x32
    1ae0:	21 30       	cpi	r18, 0x01	; 1
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <main+0x15d0>
    1ae6:	b4 c0       	rjmp	.+360    	; 0x1c50 <main+0x1738>
							OrangutanLCD::gotoXY(0,1);
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	93 e0       	ldi	r25, 0x03	; 3
    1af4:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    1af8:	1a aa       	std	Y+50, r1	; 0x32
    1afa:	19 aa       	std	Y+49, r1	; 0x31
    1afc:	a9 c0       	rjmp	.+338    	; 0x1c50 <main+0x1738>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1afe:	20 91 40 03 	lds	r18, 0x0340
    1b02:	32 2f       	mov	r19, r18
    1b04:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    1b06:	c2 01       	movw	r24, r4
    1b08:	68 ec       	ldi	r22, 0xC8	; 200
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__divmodhi4>
    1b10:	84 36       	cpi	r24, 0x64	; 100
    1b12:	91 05       	cpc	r25, r1
    1b14:	24 f4       	brge	.+8      	; 0x1b1e <main+0x1606>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1b16:	2c 7f       	andi	r18, 0xFC	; 252
    1b18:	20 93 40 03 	sts	0x0340, r18
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <main+0x160c>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1b1e:	32 60       	ori	r19, 0x02	; 2
    1b20:	30 93 40 03 	sts	0x0340, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
    1b24:	80 91 3e 03 	lds	r24, 0x033E
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    1b28:	86 60       	ori	r24, 0x06	; 6
    1b2a:	80 93 3e 03 	sts	0x033E, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1b2e:	80 91 40 03 	lds	r24, 0x0340
    1b32:	8b 7f       	andi	r24, 0xFB	; 251
    1b34:	80 93 40 03 	sts	0x0340, r24
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	5a 8f       	std	Y+26, r21	; 0x1a
    1b3e:	49 8f       	std	Y+25, r20	; 0x19
    1b40:	0c c1       	rjmp	.+536    	; 0x1d5a <main+0x1842>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1b42:	80 91 40 03 	lds	r24, 0x0340
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1b46:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1b48:	86 61       	ori	r24, 0x16	; 22
    1b4a:	80 93 40 03 	sts	0x0340, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    1b4e:	80 91 3e 03 	lds	r24, 0x033E
    1b52:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    1b54:	8b 7f       	andi	r24, 0xFB	; 251
    1b56:	80 93 3e 03 	sts	0x033E, r24
    1b5a:	f8 c0       	rjmp	.+496    	; 0x1d4c <main+0x1834>
					break;
				case FIXL:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
    1b5c:	80 91 3e 03 	lds	r24, 0x033E
    1b60:	80 61       	ori	r24, 0x10	; 16
    1b62:	80 93 3e 03 	sts	0x033E, r24
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	9a a3       	std	Y+34, r25	; 0x22
    1b6c:	89 a3       	std	Y+33, r24	; 0x21
    1b6e:	f5 c0       	rjmp	.+490    	; 0x1d5a <main+0x1842>
					fixtureMotor = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1b70:	80 91 3e 03 	lds	r24, 0x033E
    1b74:	8f 7d       	andi	r24, 0xDF	; 223
    1b76:	80 93 3e 03 	sts	0x033E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1b7a:	80 91 40 03 	lds	r24, 0x0340
    1b7e:	88 60       	ori	r24, 0x08	; 8
    1b80:	80 93 40 03 	sts	0x0340, r24
    1b84:	65 c0       	rjmp	.+202    	; 0x1c50 <main+0x1738>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1b86:	80 91 40 03 	lds	r24, 0x0340
    1b8a:	8f 7e       	andi	r24, 0xEF	; 239
    1b8c:	80 93 40 03 	sts	0x0340, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    1b90:	80 91 3e 03 	lds	r24, 0x033E
    1b94:	80 62       	ori	r24, 0x20	; 32
    1b96:	80 93 3e 03 	sts	0x033E, r24
    1b9a:	df c0       	rjmp	.+446    	; 0x1d5a <main+0x1842>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1b9c:	80 91 3e 03 	lds	r24, 0x033E
    1ba0:	80 61       	ori	r24, 0x10	; 16
    1ba2:	5c c0       	rjmp	.+184    	; 0x1c5c <main+0x1744>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
    1ba4:	80 91 3f 03 	lds	r24, 0x033F
    1ba8:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1baa:	8b 7f       	andi	r24, 0xFB	; 251
    1bac:	80 93 3f 03 	sts	0x033F, r24
    1bb0:	4f c0       	rjmp	.+158    	; 0x1c50 <main+0x1738>
						print15 = 0;
					}*/
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1bb2:	80 91 41 03 	lds	r24, 0x0341
    1bb6:	81 60       	ori	r24, 0x01	; 1
    1bb8:	80 93 41 03 	sts	0x0341, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1bbc:	80 91 40 03 	lds	r24, 0x0340
    1bc0:	8f 77       	andi	r24, 0x7F	; 127
    1bc2:	80 93 40 03 	sts	0x0340, r24
    1bc6:	21 e0       	ldi	r18, 0x01	; 1
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	3a a7       	std	Y+42, r19	; 0x2a
    1bcc:	29 a7       	std	Y+41, r18	; 0x29
    1bce:	c5 c0       	rjmp	.+394    	; 0x1d5a <main+0x1842>
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1bd0:	80 91 41 03 	lds	r24, 0x0341
    1bd4:	8e 7f       	andi	r24, 0xFE	; 254
    1bd6:	80 93 41 03 	sts	0x0341, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1bda:	80 91 40 03 	lds	r24, 0x0340
    1bde:	80 68       	ori	r24, 0x80	; 128
    1be0:	80 93 40 03 	sts	0x0340, r24
    1be4:	2d c0       	rjmp	.+90     	; 0x1c40 <main+0x1728>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1be6:	80 91 3e 03 	lds	r24, 0x033E
    1bea:	8f 7e       	andi	r24, 0xEF	; 239
    1bec:	80 93 3e 03 	sts	0x033E, r24
    1bf0:	41 e0       	ldi	r20, 0x01	; 1
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	5a a3       	std	Y+34, r21	; 0x22
    1bf6:	49 a3       	std	Y+33, r20	; 0x21
    1bf8:	b0 c0       	rjmp	.+352    	; 0x1d5a <main+0x1842>
					fixtureMotor = 1;
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1bfa:	80 91 3f 03 	lds	r24, 0x033F
    1bfe:	8b 7f       	andi	r24, 0xFB	; 251
    1c00:	80 93 3f 03 	sts	0x033F, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1c04:	80 91 41 03 	lds	r24, 0x0341
    1c08:	81 60       	ori	r24, 0x01	; 1
    1c0a:	80 93 41 03 	sts	0x0341, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1c0e:	80 91 40 03 	lds	r24, 0x0340
    1c12:	8f 77       	andi	r24, 0x7F	; 127
    1c14:	80 93 40 03 	sts	0x0340, r24
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9a a7       	std	Y+42, r25	; 0x2a
    1c1e:	89 a7       	std	Y+41, r24	; 0x29
    1c20:	17 c0       	rjmp	.+46     	; 0x1c50 <main+0x1738>
					fixtureMotor = 1;
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1c22:	80 91 41 03 	lds	r24, 0x0341
    1c26:	8e 7f       	andi	r24, 0xFE	; 254
    1c28:	80 93 41 03 	sts	0x0341, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1c2c:	80 91 40 03 	lds	r24, 0x0340
    1c30:	80 68       	ori	r24, 0x80	; 128
    1c32:	80 93 40 03 	sts	0x0340, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
    1c36:	80 91 3f 03 	lds	r24, 0x033F
    1c3a:	87 7f       	andi	r24, 0xF7	; 247
    1c3c:	80 93 3f 03 	sts	0x033F, r24
    1c40:	1a a6       	std	Y+42, r1	; 0x2a
    1c42:	19 a6       	std	Y+41, r1	; 0x29
    1c44:	05 c0       	rjmp	.+10     	; 0x1c50 <main+0x1738>
					fixtureMotor = 1;
					//u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1c46:	80 91 41 03 	lds	r24, 0x0341
    1c4a:	87 7f       	andi	r24, 0xF7	; 247
    1c4c:	80 93 41 03 	sts	0x0341, r24
    1c50:	1a a2       	std	Y+34, r1	; 0x22
    1c52:	19 a2       	std	Y+33, r1	; 0x21
    1c54:	82 c0       	rjmp	.+260    	; 0x1d5a <main+0x1842>
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1c56:	80 91 3e 03 	lds	r24, 0x033E
    1c5a:	8f 7e       	andi	r24, 0xEF	; 239
    1c5c:	80 93 3e 03 	sts	0x033E, r24
    1c60:	a1 e0       	ldi	r26, 0x01	; 1
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	ba a3       	std	Y+34, r27	; 0x22
    1c66:	a9 a3       	std	Y+33, r26	; 0x21
    1c68:	78 c0       	rjmp	.+240    	; 0x1d5a <main+0x1842>
					fixtureMotor = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1c6a:	80 91 41 03 	lds	r24, 0x0341
    1c6e:	88 60       	ori	r24, 0x08	; 8
    1c70:	10 c0       	rjmp	.+32     	; 0x1c92 <main+0x177a>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
    1c72:	80 91 3f 03 	lds	r24, 0x033F
    1c76:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1c78:	8f 7d       	andi	r24, 0xDF	; 223
    1c7a:	80 93 3f 03 	sts	0x033F, r24
    1c7e:	1a a2       	std	Y+34, r1	; 0x22
    1c80:	19 a2       	std	Y+33, r1	; 0x21
    1c82:	21 e0       	ldi	r18, 0x01	; 1
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	3e 87       	std	Y+14, r19	; 0x0e
    1c88:	2d 87       	std	Y+13, r18	; 0x0d
    1c8a:	67 c0       	rjmp	.+206    	; 0x1d5a <main+0x1842>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1c8c:	80 91 41 03 	lds	r24, 0x0341
    1c90:	8d 7f       	andi	r24, 0xFD	; 253
    1c92:	80 93 41 03 	sts	0x0341, r24
    1c96:	61 c0       	rjmp	.+194    	; 0x1d5a <main+0x1842>
				case DRY2:
					fixtureMotor = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    1c98:	80 91 3f 03 	lds	r24, 0x033F
    1c9c:	8f 7b       	andi	r24, 0xBF	; 191
    1c9e:	80 93 3f 03 	sts	0x033F, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1ca2:	80 91 41 03 	lds	r24, 0x0341
    1ca6:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1ca8:	8b 7f       	andi	r24, 0xFB	; 251
    1caa:	80 93 41 03 	sts	0x0341, r24
    1cae:	1e 86       	std	Y+14, r1	; 0x0e
    1cb0:	1d 86       	std	Y+13, r1	; 0x0d
    1cb2:	53 c0       	rjmp	.+166    	; 0x1d5a <main+0x1842>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1cb4:	80 91 40 03 	lds	r24, 0x0340
    1cb8:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1cba:	80 61       	ori	r24, 0x10	; 16
    1cbc:	80 93 40 03 	sts	0x0340, r24
    1cc0:	1a a2       	std	Y+34, r1	; 0x22
    1cc2:	19 a2       	std	Y+33, r1	; 0x21
    1cc4:	0f e1       	ldi	r16, 0x1F	; 31
    1cc6:	60 2e       	mov	r6, r16
    1cc8:	71 2c       	mov	r7, r1
    1cca:	47 c0       	rjmp	.+142    	; 0x1d5a <main+0x1842>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1ccc:	80 91 3e 03 	lds	r24, 0x033E
    1cd0:	8f 7e       	andi	r24, 0xEF	; 239
    1cd2:	80 93 3e 03 	sts	0x033E, r24
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	50 e0       	ldi	r21, 0x00	; 0
    1cda:	5a a3       	std	Y+34, r21	; 0x22
    1cdc:	49 a3       	std	Y+33, r20	; 0x21
    1cde:	10 e2       	ldi	r17, 0x20	; 32
    1ce0:	61 2e       	mov	r6, r17
    1ce2:	71 2c       	mov	r7, r1
    1ce4:	3a c0       	rjmp	.+116    	; 0x1d5a <main+0x1842>
					fixtureMotor = 1;
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1ce6:	80 91 3e 03 	lds	r24, 0x033E
    1cea:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    1cec:	84 60       	ori	r24, 0x04	; 4
    1cee:	80 93 3e 03 	sts	0x033E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1cf2:	80 91 40 03 	lds	r24, 0x0340
    1cf6:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1cf8:	8f 7e       	andi	r24, 0xEF	; 239
    1cfa:	80 93 40 03 	sts	0x0340, r24
    1cfe:	1a a2       	std	Y+34, r1	; 0x22
    1d00:	19 a2       	std	Y+33, r1	; 0x21
    1d02:	b1 e2       	ldi	r27, 0x21	; 33
    1d04:	6b 2e       	mov	r6, r27
    1d06:	71 2c       	mov	r7, r1
    1d08:	28 c0       	rjmp	.+80     	; 0x1d5a <main+0x1842>
					break;
    1d0a:	a2 e2       	ldi	r26, 0x22	; 34
    1d0c:	6a 2e       	mov	r6, r26
    1d0e:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1d10:	80 91 3e 03 	lds	r24, 0x033E
    1d14:	8d 7f       	andi	r24, 0xFD	; 253
    1d16:	80 93 3e 03 	sts	0x033E, r24
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d20:	89 8f       	std	Y+25, r24	; 0x19
    1d22:	1b c0       	rjmp	.+54     	; 0x1d5a <main+0x1842>
					plateLoadMotor = 1;
					break;
    1d24:	f3 e2       	ldi	r31, 0x23	; 35
    1d26:	6f 2e       	mov	r6, r31
    1d28:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    1d2a:	80 91 3e 03 	lds	r24, 0x033E
    1d2e:	8b 7f       	andi	r24, 0xFB	; 251
    1d30:	80 93 3e 03 	sts	0x033E, r24
					if(print35 == 1){
    1d34:	af a9       	ldd	r26, Y+55	; 0x37
    1d36:	b8 ad       	ldd	r27, Y+56	; 0x38
    1d38:	11 97       	sbiw	r26, 0x01	; 1
    1d3a:	41 f4       	brne	.+16     	; 0x1d4c <main+0x1834>
						OrangutanLCD::clear();
    1d3c:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1d40:	8e e0       	ldi	r24, 0x0E	; 14
    1d42:	93 e0       	ldi	r25, 0x03	; 3
    1d44:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    1d48:	18 ae       	std	Y+56, r1	; 0x38
    1d4a:	1f aa       	std	Y+55, r1	; 0x37
    1d4c:	1a 8e       	std	Y+26, r1	; 0x1a
    1d4e:	19 8e       	std	Y+25, r1	; 0x19
    1d50:	04 c0       	rjmp	.+8      	; 0x1d5a <main+0x1842>
    1d52:	21 e0       	ldi	r18, 0x01	; 1
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	3a a3       	std	Y+34, r19	; 0x22
    1d58:	29 a3       	std	Y+33, r18	; 0x21
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
    1d5a:	4d b7       	in	r20, 0x3d	; 61
    1d5c:	5e b7       	in	r21, 0x3e	; 62
    1d5e:	42 51       	subi	r20, 0x12	; 18
    1d60:	50 40       	sbci	r21, 0x00	; 0
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	5e bf       	out	0x3e, r21	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	4d bf       	out	0x3d, r20	; 61
    1d6c:	ed b7       	in	r30, 0x3d	; 61
    1d6e:	fe b7       	in	r31, 0x3e	; 62
    1d70:	31 96       	adiw	r30, 0x01	; 1
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	ad b7       	in	r26, 0x3d	; 61
    1d78:	be b7       	in	r27, 0x3e	; 62
    1d7a:	12 96       	adiw	r26, 0x02	; 2
    1d7c:	9c 93       	st	X, r25
    1d7e:	8e 93       	st	-X, r24
    1d80:	11 97       	sbiw	r26, 0x01	; 1
    1d82:	93 83       	std	Z+3, r25	; 0x03
    1d84:	82 83       	std	Z+2, r24	; 0x02
    1d86:	95 83       	std	Z+5, r25	; 0x05
    1d88:	84 83       	std	Z+4, r24	; 0x04
    1d8a:	97 83       	std	Z+7, r25	; 0x07
    1d8c:	86 83       	std	Z+6, r24	; 0x06
    1d8e:	21 e0       	ldi	r18, 0x01	; 1
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	31 87       	std	Z+9, r19	; 0x09
    1d94:	20 87       	std	Z+8, r18	; 0x08
    1d96:	33 87       	std	Z+11, r19	; 0x0b
    1d98:	22 87       	std	Z+10, r18	; 0x0a
    1d9a:	35 87       	std	Z+13, r19	; 0x0d
    1d9c:	24 87       	std	Z+12, r18	; 0x0c
    1d9e:	37 87       	std	Z+15, r19	; 0x0f
    1da0:	26 87       	std	Z+14, r18	; 0x0e
    1da2:	31 8b       	std	Z+17, r19	; 0x11
    1da4:	20 8b       	std	Z+16, r18	; 0x10
    1da6:	c2 01       	movw	r24, r4
    1da8:	b1 01       	movw	r22, r2
    1daa:	4d 81       	ldd	r20, Y+5	; 0x05
    1dac:	5e 81       	ldd	r21, Y+6	; 0x06
    1dae:	29 8d       	ldd	r18, Y+25	; 0x19
    1db0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1db2:	09 a1       	ldd	r16, Y+33	; 0x21
    1db4:	1a a1       	ldd	r17, Y+34	; 0x22
    1db6:	ee 24       	eor	r14, r14
    1db8:	ff 24       	eor	r15, r15
    1dba:	c9 a4       	ldd	r12, Y+41	; 0x29
    1dbc:	da a4       	ldd	r13, Y+42	; 0x2a
    1dbe:	ad 84       	ldd	r10, Y+13	; 0x0d
    1dc0:	be 84       	ldd	r11, Y+14	; 0x0e
    1dc2:	e2 e0       	ldi	r30, 0x02	; 2
    1dc4:	8e 2e       	mov	r8, r30
    1dc6:	91 2c       	mov	r9, r1
    1dc8:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    1dcc:	4d b7       	in	r20, 0x3d	; 61
    1dce:	5e b7       	in	r21, 0x3e	; 62
    1dd0:	4e 5e       	subi	r20, 0xEE	; 238
    1dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	5e bf       	out	0x3e, r21	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	4d bf       	out	0x3d, r20	; 61
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("SECOND B");
			while(state != DONER)
    1de6:	54 e2       	ldi	r21, 0x24	; 36
    1de8:	65 16       	cp	r6, r21
    1dea:	71 04       	cpc	r7, r1
    1dec:	11 f4       	brne	.+4      	; 0x1df2 <main+0x18da>
    1dee:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <main+0x2a0e>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);

				counter ++;
    1df2:	08 94       	sec
    1df4:	41 1c       	adc	r4, r1
    1df6:	51 1c       	adc	r5, r1
    1df8:	7d cc       	rjmp	.-1798   	; 0x16f4 <main+0x11dc>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
    1e00:	88 23       	and	r24, r24
    1e02:	11 f4       	brne	.+4      	; 0x1e08 <main+0x18f0>
    1e04:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <main+0x2a6a>
			OrangutanLCD::gotoXY(7,0);
    1e08:	87 e0       	ldi	r24, 0x07	; 7
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("BOTH B");
    1e10:	84 e2       	ldi	r24, 0x24	; 36
    1e12:	93 e0       	ldi	r25, 0x03	; 3
    1e14:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    1e18:	66 24       	eor	r6, r6
    1e1a:	77 24       	eor	r7, r7
    1e1c:	21 96       	adiw	r28, 0x01	; 1
    1e1e:	1f ae       	std	Y+63, r1	; 0x3f
    1e20:	1e ae       	std	Y+62, r1	; 0x3e
    1e22:	21 97       	sbiw	r28, 0x01	; 1
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	9e ab       	std	Y+54, r25	; 0x36
    1e2a:	8d ab       	std	Y+53, r24	; 0x35
    1e2c:	22 24       	eor	r2, r2
    1e2e:	33 24       	eor	r3, r3
    1e30:	98 ab       	std	Y+48, r25	; 0x30
    1e32:	8f a7       	std	Y+47, r24	; 0x2f
    1e34:	18 a6       	std	Y+40, r1	; 0x28
    1e36:	1f a2       	std	Y+39, r1	; 0x27
    1e38:	18 a2       	std	Y+32, r1	; 0x20
    1e3a:	1f 8e       	std	Y+31, r1	; 0x1f
    1e3c:	18 8e       	std	Y+24, r1	; 0x18
    1e3e:	1f 8a       	std	Y+23, r1	; 0x17
    1e40:	1a 8a       	std	Y+18, r1	; 0x12
    1e42:	19 8a       	std	Y+17, r1	; 0x11
    1e44:	44 24       	eor	r4, r4
    1e46:	55 24       	eor	r5, r5
    1e48:	1c 86       	std	Y+12, r1	; 0x0c
    1e4a:	1b 86       	std	Y+11, r1	; 0x0b
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1e4c:	84 e4       	ldi	r24, 0x44	; 68
    1e4e:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1e58:	85 e4       	ldi	r24, 0x45	; 69
    1e5a:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1e5e:	0e 94 4f 18 	call	0x309e	; 0x309e <_Z11i2c_readAckv>
    1e62:	80 93 42 03 	sts	0x0342, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1e66:	0e 94 59 18 	call	0x30b2	; 0x30b2 <_Z11i2c_readNakv>
    1e6a:	80 93 43 03 	sts	0x0343, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1e6e:	0e 94 35 18 	call	0x306a	; 0x306a <_Z8i2c_stopv>
				
				if(state != INIT){
    1e72:	61 14       	cp	r6, r1
    1e74:	71 04       	cpc	r7, r1
    1e76:	79 f0       	breq	.+30     	; 0x1e96 <main+0x197e>
					OrangutanLCD::gotoXY(0,1);
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	61 e0       	ldi	r22, 0x01	; 1
    1e7c:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1e80:	89 ef       	ldi	r24, 0xF9	; 249
    1e82:	92 e0       	ldi	r25, 0x02	; 2
    1e84:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    1e88:	b3 01       	movw	r22, r6
    1e8a:	88 27       	eor	r24, r24
    1e8c:	77 fd       	sbrc	r23, 7
    1e8e:	80 95       	com	r24
    1e90:	98 2f       	mov	r25, r24
    1e92:	0e 94 0b 1b 	call	0x3616	; 0x3616 <_ZN12OrangutanLCD5printEl>
						button = 0;
						stateButton = 0;
					}
				}*/

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1e96:	c2 01       	movw	r24, r4
    1e98:	be 01       	movw	r22, r28
    1e9a:	6f 5f       	subi	r22, 0xFF	; 255
    1e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    1ea2:	61 14       	cp	r6, r1
    1ea4:	71 04       	cpc	r7, r1
    1ea6:	29 f4       	brne	.+10     	; 0x1eb2 <main+0x199a>
    1ea8:	88 23       	and	r24, r24
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <main+0x1996>
    1eac:	40 c0       	rjmp	.+128    	; 0x1f2e <main+0x1a16>
    1eae:	12 01       	movw	r2, r4
    1eb0:	04 c0       	rjmp	.+8      	; 0x1eba <main+0x19a2>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && /*counter - counterRef > totallength1*plateLoadMotorLoadPlate&&*/ u_inputByte0.bits_in_inputByte0.plate == 0){
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	69 16       	cp	r6, r25
    1eb6:	71 04       	cpc	r7, r1
    1eb8:	31 f4       	brne	.+12     	; 0x1ec6 <main+0x19ae>
    1eba:	80 91 42 03 	lds	r24, 0x0342
    1ebe:	80 fd       	sbrc	r24, 0
    1ec0:	43 c0       	rjmp	.+134    	; 0x1f48 <main+0x1a30>
    1ec2:	12 01       	movw	r2, r4
    1ec4:	04 c0       	rjmp	.+8      	; 0x1ece <main+0x19b6>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    1ec6:	a2 e0       	ldi	r26, 0x02	; 2
    1ec8:	6a 16       	cp	r6, r26
    1eca:	71 04       	cpc	r7, r1
    1ecc:	49 f4       	brne	.+18     	; 0x1ee0 <main+0x19c8>
    1ece:	c2 01       	movw	r24, r4
    1ed0:	82 19       	sub	r24, r2
    1ed2:	93 09       	sbc	r25, r3
    1ed4:	85 36       	cpi	r24, 0x65	; 101
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	0c f4       	brge	.+2      	; 0x1edc <main+0x19c4>
    1eda:	46 c0       	rjmp	.+140    	; 0x1f68 <main+0x1a50>
    1edc:	12 01       	movw	r2, r4
    1ede:	04 c0       	rjmp	.+8      	; 0x1ee8 <main+0x19d0>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1ee0:	b3 e0       	ldi	r27, 0x03	; 3
    1ee2:	6b 16       	cp	r6, r27
    1ee4:	71 04       	cpc	r7, r1
    1ee6:	49 f4       	brne	.+18     	; 0x1efa <main+0x19e2>
    1ee8:	c2 01       	movw	r24, r4
    1eea:	82 19       	sub	r24, r2
    1eec:	93 09       	sbc	r25, r3
    1eee:	81 5a       	subi	r24, 0xA1	; 161
    1ef0:	9f 40       	sbci	r25, 0x0F	; 15
    1ef2:	0c f4       	brge	.+2      	; 0x1ef6 <main+0x19de>
    1ef4:	49 c0       	rjmp	.+146    	; 0x1f88 <main+0x1a70>
    1ef6:	12 01       	movw	r2, r4
    1ef8:	04 c0       	rjmp	.+8      	; 0x1f02 <main+0x19ea>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1efa:	34 e0       	ldi	r19, 0x04	; 4
    1efc:	63 16       	cp	r6, r19
    1efe:	71 04       	cpc	r7, r1
    1f00:	49 f4       	brne	.+18     	; 0x1f14 <main+0x19fc>
    1f02:	c2 01       	movw	r24, r4
    1f04:	82 19       	sub	r24, r2
    1f06:	93 09       	sbc	r25, r3
    1f08:	89 5e       	subi	r24, 0xE9	; 233
    1f0a:	93 40       	sbci	r25, 0x03	; 3
    1f0c:	0c f4       	brge	.+2      	; 0x1f10 <main+0x19f8>
    1f0e:	4c c0       	rjmp	.+152    	; 0x1fa8 <main+0x1a90>
    1f10:	12 01       	movw	r2, r4
    1f12:	04 c0       	rjmp	.+8      	; 0x1f1c <main+0x1a04>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    1f14:	55 e0       	ldi	r21, 0x05	; 5
    1f16:	65 16       	cp	r6, r21
    1f18:	71 04       	cpc	r7, r1
    1f1a:	49 f4       	brne	.+18     	; 0x1f2e <main+0x1a16>
    1f1c:	c2 01       	movw	r24, r4
    1f1e:	82 19       	sub	r24, r2
    1f20:	93 09       	sbc	r25, r3
    1f22:	85 36       	cpi	r24, 0x65	; 101
    1f24:	91 05       	cpc	r25, r1
    1f26:	0c f4       	brge	.+2      	; 0x1f2a <main+0x1a12>
    1f28:	4d c0       	rjmp	.+154    	; 0x1fc4 <main+0x1aac>
    1f2a:	12 01       	movw	r2, r4
    1f2c:	04 c0       	rjmp	.+8      	; 0x1f36 <main+0x1a1e>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totallength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1f2e:	86 e0       	ldi	r24, 0x06	; 6
    1f30:	68 16       	cp	r6, r24
    1f32:	71 04       	cpc	r7, r1
    1f34:	61 f4       	brne	.+24     	; 0x1f4e <main+0x1a36>
    1f36:	c2 01       	movw	r24, r4
    1f38:	82 19       	sub	r24, r2
    1f3a:	93 09       	sbc	r25, r3
    1f3c:	81 5a       	subi	r24, 0xA1	; 161
    1f3e:	9f 40       	sbci	r25, 0x0F	; 15
    1f40:	0c f4       	brge	.+2      	; 0x1f44 <main+0x1a2c>
    1f42:	50 c0       	rjmp	.+160    	; 0x1fe4 <main+0x1acc>
    1f44:	12 01       	movw	r2, r4
    1f46:	07 c0       	rjmp	.+14     	; 0x1f56 <main+0x1a3e>
    1f48:	21 e0       	ldi	r18, 0x01	; 1
    1f4a:	62 2e       	mov	r6, r18
    1f4c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    1f4e:	b7 e0       	ldi	r27, 0x07	; 7
    1f50:	6b 16       	cp	r6, r27
    1f52:	71 04       	cpc	r7, r1
    1f54:	61 f4       	brne	.+24     	; 0x1f6e <main+0x1a56>
    1f56:	c2 01       	movw	r24, r4
    1f58:	82 19       	sub	r24, r2
    1f5a:	93 09       	sbc	r25, r3
    1f5c:	85 36       	cpi	r24, 0x65	; 101
    1f5e:	91 05       	cpc	r25, r1
    1f60:	0c f4       	brge	.+2      	; 0x1f64 <main+0x1a4c>
    1f62:	50 c0       	rjmp	.+160    	; 0x2004 <main+0x1aec>
    1f64:	12 01       	movw	r2, r4
    1f66:	07 c0       	rjmp	.+14     	; 0x1f76 <main+0x1a5e>
    1f68:	92 e0       	ldi	r25, 0x02	; 2
    1f6a:	69 2e       	mov	r6, r25
    1f6c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    1f6e:	28 e0       	ldi	r18, 0x08	; 8
    1f70:	62 16       	cp	r6, r18
    1f72:	71 04       	cpc	r7, r1
    1f74:	61 f4       	brne	.+24     	; 0x1f8e <main+0x1a76>
    1f76:	c2 01       	movw	r24, r4
    1f78:	82 19       	sub	r24, r2
    1f7a:	93 09       	sbc	r25, r3
    1f7c:	85 36       	cpi	r24, 0x65	; 101
    1f7e:	91 05       	cpc	r25, r1
    1f80:	0c f4       	brge	.+2      	; 0x1f84 <main+0x1a6c>
    1f82:	4e c0       	rjmp	.+156    	; 0x2020 <main+0x1b08>
    1f84:	12 01       	movw	r2, r4
    1f86:	07 c0       	rjmp	.+14     	; 0x1f96 <main+0x1a7e>
    1f88:	83 e0       	ldi	r24, 0x03	; 3
    1f8a:	68 2e       	mov	r6, r24
    1f8c:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    1f8e:	39 e0       	ldi	r19, 0x09	; 9
    1f90:	63 16       	cp	r6, r19
    1f92:	71 04       	cpc	r7, r1
    1f94:	61 f4       	brne	.+24     	; 0x1fae <main+0x1a96>
    1f96:	c2 01       	movw	r24, r4
    1f98:	82 19       	sub	r24, r2
    1f9a:	93 09       	sbc	r25, r3
    1f9c:	81 5d       	subi	r24, 0xD1	; 209
    1f9e:	97 40       	sbci	r25, 0x07	; 7
    1fa0:	0c f4       	brge	.+2      	; 0x1fa4 <main+0x1a8c>
    1fa2:	4e c0       	rjmp	.+156    	; 0x2040 <main+0x1b28>
    1fa4:	12 01       	movw	r2, r4
    1fa6:	07 c0       	rjmp	.+14     	; 0x1fb6 <main+0x1a9e>
    1fa8:	04 e0       	ldi	r16, 0x04	; 4
    1faa:	60 2e       	mov	r6, r16
    1fac:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    1fae:	5a e0       	ldi	r21, 0x0A	; 10
    1fb0:	65 16       	cp	r6, r21
    1fb2:	71 04       	cpc	r7, r1
    1fb4:	51 f4       	brne	.+20     	; 0x1fca <main+0x1ab2>
    1fb6:	c2 01       	movw	r24, r4
    1fb8:	82 19       	sub	r24, r2
    1fba:	93 09       	sbc	r25, r3
    1fbc:	85 36       	cpi	r24, 0x65	; 101
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	44 f4       	brge	.+16     	; 0x1fd2 <main+0x1aba>
    1fc2:	4e c0       	rjmp	.+156    	; 0x2060 <main+0x1b48>
    1fc4:	15 e0       	ldi	r17, 0x05	; 5
    1fc6:	61 2e       	mov	r6, r17
    1fc8:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totallength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1fca:	8b e0       	ldi	r24, 0x0B	; 11
    1fcc:	68 16       	cp	r6, r24
    1fce:	71 04       	cpc	r7, r1
    1fd0:	61 f4       	brne	.+24     	; 0x1fea <main+0x1ad2>
    1fd2:	c2 01       	movw	r24, r4
    1fd4:	82 19       	sub	r24, r2
    1fd6:	93 09       	sbc	r25, r3
    1fd8:	81 5d       	subi	r24, 0xD1	; 209
    1fda:	97 40       	sbci	r25, 0x07	; 7
    1fdc:	0c f4       	brge	.+2      	; 0x1fe0 <main+0x1ac8>
    1fde:	50 c0       	rjmp	.+160    	; 0x2080 <main+0x1b68>
    1fe0:	12 01       	movw	r2, r4
    1fe2:	07 c0       	rjmp	.+14     	; 0x1ff2 <main+0x1ada>
    1fe4:	b6 e0       	ldi	r27, 0x06	; 6
    1fe6:	6b 2e       	mov	r6, r27
    1fe8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    1fea:	bc e0       	ldi	r27, 0x0C	; 12
    1fec:	6b 16       	cp	r6, r27
    1fee:	71 04       	cpc	r7, r1
    1ff0:	61 f4       	brne	.+24     	; 0x200a <main+0x1af2>
    1ff2:	c2 01       	movw	r24, r4
    1ff4:	82 19       	sub	r24, r2
    1ff6:	93 09       	sbc	r25, r3
    1ff8:	85 36       	cpi	r24, 0x65	; 101
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	0c f4       	brge	.+2      	; 0x2000 <main+0x1ae8>
    1ffe:	50 c0       	rjmp	.+160    	; 0x20a0 <main+0x1b88>
    2000:	12 01       	movw	r2, r4
    2002:	07 c0       	rjmp	.+14     	; 0x2012 <main+0x1afa>
    2004:	a7 e0       	ldi	r26, 0x07	; 7
    2006:	6a 2e       	mov	r6, r26
    2008:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    200a:	2d e0       	ldi	r18, 0x0D	; 13
    200c:	62 16       	cp	r6, r18
    200e:	71 04       	cpc	r7, r1
    2010:	51 f4       	brne	.+20     	; 0x2026 <main+0x1b0e>
    2012:	c2 01       	movw	r24, r4
    2014:	82 19       	sub	r24, r2
    2016:	93 09       	sbc	r25, r3
    2018:	81 5d       	subi	r24, 0xD1	; 209
    201a:	97 40       	sbci	r25, 0x07	; 7
    201c:	44 f4       	brge	.+16     	; 0x202e <main+0x1b16>
    201e:	50 c0       	rjmp	.+160    	; 0x20c0 <main+0x1ba8>
    2020:	f8 e0       	ldi	r31, 0x08	; 8
    2022:	6f 2e       	mov	r6, r31
    2024:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
				}
				if(state == B1STOP2 && counter - counterRef > totallength2*fixtureMotorBrush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    2026:	4e e0       	ldi	r20, 0x0E	; 14
    2028:	64 16       	cp	r6, r20
    202a:	71 04       	cpc	r7, r1
    202c:	61 f4       	brne	.+24     	; 0x2046 <main+0x1b2e>
    202e:	c2 01       	movw	r24, r4
    2030:	82 19       	sub	r24, r2
    2032:	93 09       	sbc	r25, r3
    2034:	81 5a       	subi	r24, 0xA1	; 161
    2036:	9f 40       	sbci	r25, 0x0F	; 15
    2038:	0c f4       	brge	.+2      	; 0x203c <main+0x1b24>
    203a:	52 c0       	rjmp	.+164    	; 0x20e0 <main+0x1bc8>
    203c:	12 01       	movw	r2, r4
    203e:	07 c0       	rjmp	.+14     	; 0x204e <main+0x1b36>
    2040:	e9 e0       	ldi	r30, 0x09	; 9
    2042:	6e 2e       	mov	r6, r30
    2044:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    2046:	8f e0       	ldi	r24, 0x0F	; 15
    2048:	68 16       	cp	r6, r24
    204a:	71 04       	cpc	r7, r1
    204c:	61 f4       	brne	.+24     	; 0x2066 <main+0x1b4e>
    204e:	c2 01       	movw	r24, r4
    2050:	82 19       	sub	r24, r2
    2052:	93 09       	sbc	r25, r3
    2054:	85 36       	cpi	r24, 0x65	; 101
    2056:	91 05       	cpc	r25, r1
    2058:	0c f4       	brge	.+2      	; 0x205c <main+0x1b44>
    205a:	52 c0       	rjmp	.+164    	; 0x2100 <main+0x1be8>
    205c:	12 01       	movw	r2, r4
    205e:	07 c0       	rjmp	.+14     	; 0x206e <main+0x1b56>
    2060:	7a e0       	ldi	r23, 0x0A	; 10
    2062:	67 2e       	mov	r6, r23
    2064:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    2066:	90 e1       	ldi	r25, 0x10	; 16
    2068:	69 16       	cp	r6, r25
    206a:	71 04       	cpc	r7, r1
    206c:	61 f4       	brne	.+24     	; 0x2086 <main+0x1b6e>
    206e:	c2 01       	movw	r24, r4
    2070:	82 19       	sub	r24, r2
    2072:	93 09       	sbc	r25, r3
    2074:	85 36       	cpi	r24, 0x65	; 101
    2076:	91 05       	cpc	r25, r1
    2078:	0c f4       	brge	.+2      	; 0x207c <main+0x1b64>
    207a:	52 c0       	rjmp	.+164    	; 0x2120 <main+0x1c08>
    207c:	12 01       	movw	r2, r4
    207e:	07 c0       	rjmp	.+14     	; 0x208e <main+0x1b76>
    2080:	6b e0       	ldi	r22, 0x0B	; 11
    2082:	66 2e       	mov	r6, r22
    2084:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    2086:	a1 e1       	ldi	r26, 0x11	; 17
    2088:	6a 16       	cp	r6, r26
    208a:	71 04       	cpc	r7, r1
    208c:	61 f4       	brne	.+24     	; 0x20a6 <main+0x1b8e>
    208e:	c2 01       	movw	r24, r4
    2090:	82 19       	sub	r24, r2
    2092:	93 09       	sbc	r25, r3
    2094:	81 5d       	subi	r24, 0xD1	; 209
    2096:	97 40       	sbci	r25, 0x07	; 7
    2098:	0c f4       	brge	.+2      	; 0x209c <main+0x1b84>
    209a:	52 c0       	rjmp	.+164    	; 0x2140 <main+0x1c28>
    209c:	12 01       	movw	r2, r4
    209e:	07 c0       	rjmp	.+14     	; 0x20ae <main+0x1b96>
    20a0:	5c e0       	ldi	r21, 0x0C	; 12
    20a2:	65 2e       	mov	r6, r21
    20a4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    20a6:	22 e1       	ldi	r18, 0x12	; 18
    20a8:	62 16       	cp	r6, r18
    20aa:	71 04       	cpc	r7, r1
    20ac:	61 f4       	brne	.+24     	; 0x20c6 <main+0x1bae>
    20ae:	c2 01       	movw	r24, r4
    20b0:	82 19       	sub	r24, r2
    20b2:	93 09       	sbc	r25, r3
    20b4:	85 36       	cpi	r24, 0x65	; 101
    20b6:	91 05       	cpc	r25, r1
    20b8:	0c f4       	brge	.+2      	; 0x20bc <main+0x1ba4>
    20ba:	52 c0       	rjmp	.+164    	; 0x2160 <main+0x1c48>
    20bc:	12 01       	movw	r2, r4
    20be:	07 c0       	rjmp	.+14     	; 0x20ce <main+0x1bb6>
    20c0:	4d e0       	ldi	r20, 0x0D	; 13
    20c2:	64 2e       	mov	r6, r20
    20c4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totallength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    20c6:	33 e1       	ldi	r19, 0x13	; 19
    20c8:	63 16       	cp	r6, r19
    20ca:	71 04       	cpc	r7, r1
    20cc:	61 f4       	brne	.+24     	; 0x20e6 <main+0x1bce>
    20ce:	c2 01       	movw	r24, r4
    20d0:	82 19       	sub	r24, r2
    20d2:	93 09       	sbc	r25, r3
    20d4:	81 5d       	subi	r24, 0xD1	; 209
    20d6:	97 40       	sbci	r25, 0x07	; 7
    20d8:	0c f4       	brge	.+2      	; 0x20dc <main+0x1bc4>
    20da:	52 c0       	rjmp	.+164    	; 0x2180 <main+0x1c68>
    20dc:	12 01       	movw	r2, r4
    20de:	07 c0       	rjmp	.+14     	; 0x20ee <main+0x1bd6>
    20e0:	3e e0       	ldi	r19, 0x0E	; 14
    20e2:	63 2e       	mov	r6, r19
    20e4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    20e6:	54 e1       	ldi	r21, 0x14	; 20
    20e8:	65 16       	cp	r6, r21
    20ea:	71 04       	cpc	r7, r1
    20ec:	61 f4       	brne	.+24     	; 0x2106 <main+0x1bee>
    20ee:	c2 01       	movw	r24, r4
    20f0:	82 19       	sub	r24, r2
    20f2:	93 09       	sbc	r25, r3
    20f4:	85 36       	cpi	r24, 0x65	; 101
    20f6:	91 05       	cpc	r25, r1
    20f8:	0c f4       	brge	.+2      	; 0x20fc <main+0x1be4>
    20fa:	50 c0       	rjmp	.+160    	; 0x219c <main+0x1c84>
    20fc:	12 01       	movw	r2, r4
    20fe:	07 c0       	rjmp	.+14     	; 0x210e <main+0x1bf6>
    2100:	2f e0       	ldi	r18, 0x0F	; 15
    2102:	62 2e       	mov	r6, r18
    2104:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    2106:	85 e1       	ldi	r24, 0x15	; 21
    2108:	68 16       	cp	r6, r24
    210a:	71 04       	cpc	r7, r1
    210c:	61 f4       	brne	.+24     	; 0x2126 <main+0x1c0e>
    210e:	c2 01       	movw	r24, r4
    2110:	82 19       	sub	r24, r2
    2112:	93 09       	sbc	r25, r3
    2114:	81 5d       	subi	r24, 0xD1	; 209
    2116:	97 40       	sbci	r25, 0x07	; 7
    2118:	0c f4       	brge	.+2      	; 0x211c <main+0x1c04>
    211a:	53 c0       	rjmp	.+166    	; 0x21c2 <main+0x1caa>
    211c:	12 01       	movw	r2, r4
    211e:	07 c0       	rjmp	.+14     	; 0x212e <main+0x1c16>
    2120:	90 e1       	ldi	r25, 0x10	; 16
    2122:	69 2e       	mov	r6, r25
    2124:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    2126:	b6 e1       	ldi	r27, 0x16	; 22
    2128:	6b 16       	cp	r6, r27
    212a:	71 04       	cpc	r7, r1
    212c:	61 f4       	brne	.+24     	; 0x2146 <main+0x1c2e>
    212e:	c2 01       	movw	r24, r4
    2130:	82 19       	sub	r24, r2
    2132:	93 09       	sbc	r25, r3
    2134:	85 36       	cpi	r24, 0x65	; 101
    2136:	91 05       	cpc	r25, r1
    2138:	0c f4       	brge	.+2      	; 0x213c <main+0x1c24>
    213a:	57 c0       	rjmp	.+174    	; 0x21ea <main+0x1cd2>
    213c:	12 01       	movw	r2, r4
    213e:	07 c0       	rjmp	.+14     	; 0x214e <main+0x1c36>
    2140:	81 e1       	ldi	r24, 0x11	; 17
    2142:	68 2e       	mov	r6, r24
    2144:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totallength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    2146:	27 e1       	ldi	r18, 0x17	; 23
    2148:	62 16       	cp	r6, r18
    214a:	71 04       	cpc	r7, r1
    214c:	61 f4       	brne	.+24     	; 0x2166 <main+0x1c4e>
    214e:	c2 01       	movw	r24, r4
    2150:	82 19       	sub	r24, r2
    2152:	93 09       	sbc	r25, r3
    2154:	81 5a       	subi	r24, 0xA1	; 161
    2156:	9f 40       	sbci	r25, 0x0F	; 15
    2158:	0c f4       	brge	.+2      	; 0x215c <main+0x1c44>
    215a:	57 c0       	rjmp	.+174    	; 0x220a <main+0x1cf2>
    215c:	12 01       	movw	r2, r4
    215e:	07 c0       	rjmp	.+14     	; 0x216e <main+0x1c56>
    2160:	02 e1       	ldi	r16, 0x12	; 18
    2162:	60 2e       	mov	r6, r16
    2164:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    2166:	48 e1       	ldi	r20, 0x18	; 24
    2168:	64 16       	cp	r6, r20
    216a:	71 04       	cpc	r7, r1
    216c:	61 f4       	brne	.+24     	; 0x2186 <main+0x1c6e>
    216e:	c2 01       	movw	r24, r4
    2170:	82 19       	sub	r24, r2
    2172:	93 09       	sbc	r25, r3
    2174:	85 36       	cpi	r24, 0x65	; 101
    2176:	91 05       	cpc	r25, r1
    2178:	0c f4       	brge	.+2      	; 0x217c <main+0x1c64>
    217a:	55 c0       	rjmp	.+170    	; 0x2226 <main+0x1d0e>
    217c:	12 01       	movw	r2, r4
    217e:	07 c0       	rjmp	.+14     	; 0x218e <main+0x1c76>
    2180:	13 e1       	ldi	r17, 0x13	; 19
    2182:	61 2e       	mov	r6, r17
    2184:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    2186:	59 e1       	ldi	r21, 0x19	; 25
    2188:	65 16       	cp	r6, r21
    218a:	71 04       	cpc	r7, r1
    218c:	51 f4       	brne	.+20     	; 0x21a2 <main+0x1c8a>
    218e:	c2 01       	movw	r24, r4
    2190:	82 19       	sub	r24, r2
    2192:	93 09       	sbc	r25, r3
    2194:	81 5a       	subi	r24, 0xA1	; 161
    2196:	9f 40       	sbci	r25, 0x0F	; 15
    2198:	44 f4       	brge	.+16     	; 0x21aa <main+0x1c92>
    219a:	55 c0       	rjmp	.+170    	; 0x2246 <main+0x1d2e>
    219c:	b4 e1       	ldi	r27, 0x14	; 20
    219e:	6b 2e       	mov	r6, r27
    21a0:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totallength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    21a2:	ba e1       	ldi	r27, 0x1A	; 26
    21a4:	6b 16       	cp	r6, r27
    21a6:	71 04       	cpc	r7, r1
    21a8:	79 f4       	brne	.+30     	; 0x21c8 <main+0x1cb0>
    21aa:	c2 01       	movw	r24, r4
    21ac:	82 19       	sub	r24, r2
    21ae:	93 09       	sbc	r25, r3
    21b0:	81 5a       	subi	r24, 0xA1	; 161
    21b2:	9f 40       	sbci	r25, 0x0F	; 15
    21b4:	0c f4       	brge	.+2      	; 0x21b8 <main+0x1ca0>
    21b6:	57 c0       	rjmp	.+174    	; 0x2266 <main+0x1d4e>
    21b8:	21 96       	adiw	r28, 0x01	; 1
    21ba:	5f ae       	std	Y+63, r5	; 0x3f
    21bc:	4e ae       	std	Y+62, r4	; 0x3e
    21be:	21 97       	sbiw	r28, 0x01	; 1
    21c0:	07 c0       	rjmp	.+14     	; 0x21d0 <main+0x1cb8>
    21c2:	a5 e1       	ldi	r26, 0x15	; 21
    21c4:	6a 2e       	mov	r6, r26
    21c6:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    21c8:	3b e1       	ldi	r19, 0x1B	; 27
    21ca:	63 16       	cp	r6, r19
    21cc:	71 04       	cpc	r7, r1
    21ce:	81 f4       	brne	.+32     	; 0x21f0 <main+0x1cd8>
    21d0:	c2 01       	movw	r24, r4
    21d2:	21 96       	adiw	r28, 0x01	; 1
    21d4:	4e ad       	ldd	r20, Y+62	; 0x3e
    21d6:	5f ad       	ldd	r21, Y+63	; 0x3f
    21d8:	21 97       	sbiw	r28, 0x01	; 1
    21da:	84 1b       	sub	r24, r20
    21dc:	95 0b       	sbc	r25, r21
    21de:	85 36       	cpi	r24, 0x65	; 101
    21e0:	91 05       	cpc	r25, r1
    21e2:	0c f4       	brge	.+2      	; 0x21e6 <main+0x1cce>
    21e4:	50 c0       	rjmp	.+160    	; 0x2286 <main+0x1d6e>
    21e6:	12 01       	movw	r2, r4
    21e8:	07 c0       	rjmp	.+14     	; 0x21f8 <main+0x1ce0>
    21ea:	f6 e1       	ldi	r31, 0x16	; 22
    21ec:	6f 2e       	mov	r6, r31
    21ee:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    21f0:	5c e1       	ldi	r21, 0x1C	; 28
    21f2:	65 16       	cp	r6, r21
    21f4:	71 04       	cpc	r7, r1
    21f6:	61 f4       	brne	.+24     	; 0x2210 <main+0x1cf8>
    21f8:	c2 01       	movw	r24, r4
    21fa:	82 19       	sub	r24, r2
    21fc:	93 09       	sbc	r25, r3
    21fe:	85 36       	cpi	r24, 0x65	; 101
    2200:	91 05       	cpc	r25, r1
    2202:	0c f4       	brge	.+2      	; 0x2206 <main+0x1cee>
    2204:	50 c0       	rjmp	.+160    	; 0x22a6 <main+0x1d8e>
    2206:	12 01       	movw	r2, r4
    2208:	07 c0       	rjmp	.+14     	; 0x2218 <main+0x1d00>
    220a:	e7 e1       	ldi	r30, 0x17	; 23
    220c:	6e 2e       	mov	r6, r30
    220e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    2210:	8d e1       	ldi	r24, 0x1D	; 29
    2212:	68 16       	cp	r6, r24
    2214:	71 04       	cpc	r7, r1
    2216:	51 f4       	brne	.+20     	; 0x222c <main+0x1d14>
    2218:	c2 01       	movw	r24, r4
    221a:	82 19       	sub	r24, r2
    221c:	93 09       	sbc	r25, r3
    221e:	81 5a       	subi	r24, 0xA1	; 161
    2220:	9f 40       	sbci	r25, 0x0F	; 15
    2222:	44 f4       	brge	.+16     	; 0x2234 <main+0x1d1c>
    2224:	50 c0       	rjmp	.+160    	; 0x22c6 <main+0x1dae>
    2226:	78 e1       	ldi	r23, 0x18	; 24
    2228:	67 2e       	mov	r6, r23
    222a:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totallength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    222c:	be e1       	ldi	r27, 0x1E	; 30
    222e:	6b 16       	cp	r6, r27
    2230:	71 04       	cpc	r7, r1
    2232:	61 f4       	brne	.+24     	; 0x224c <main+0x1d34>
    2234:	c2 01       	movw	r24, r4
    2236:	82 19       	sub	r24, r2
    2238:	93 09       	sbc	r25, r3
    223a:	81 5a       	subi	r24, 0xA1	; 161
    223c:	9f 40       	sbci	r25, 0x0F	; 15
    223e:	0c f4       	brge	.+2      	; 0x2242 <main+0x1d2a>
    2240:	53 c0       	rjmp	.+166    	; 0x22e8 <main+0x1dd0>
    2242:	12 01       	movw	r2, r4
    2244:	07 c0       	rjmp	.+14     	; 0x2254 <main+0x1d3c>
    2246:	69 e1       	ldi	r22, 0x19	; 25
    2248:	66 2e       	mov	r6, r22
    224a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    224c:	3f e1       	ldi	r19, 0x1F	; 31
    224e:	63 16       	cp	r6, r19
    2250:	71 04       	cpc	r7, r1
    2252:	61 f4       	brne	.+24     	; 0x226c <main+0x1d54>
    2254:	c2 01       	movw	r24, r4
    2256:	82 19       	sub	r24, r2
    2258:	93 09       	sbc	r25, r3
    225a:	89 5e       	subi	r24, 0xE9	; 233
    225c:	93 40       	sbci	r25, 0x03	; 3
    225e:	0c f4       	brge	.+2      	; 0x2262 <main+0x1d4a>
    2260:	87 c1       	rjmp	.+782    	; 0x2570 <main+0x2058>
    2262:	12 01       	movw	r2, r4
    2264:	07 c0       	rjmp	.+14     	; 0x2274 <main+0x1d5c>
    2266:	5a e1       	ldi	r21, 0x1A	; 26
    2268:	65 2e       	mov	r6, r21
    226a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    226c:	50 e2       	ldi	r21, 0x20	; 32
    226e:	65 16       	cp	r6, r21
    2270:	71 04       	cpc	r7, r1
    2272:	61 f4       	brne	.+24     	; 0x228c <main+0x1d74>
    2274:	c2 01       	movw	r24, r4
    2276:	82 19       	sub	r24, r2
    2278:	93 09       	sbc	r25, r3
    227a:	81 5a       	subi	r24, 0xA1	; 161
    227c:	9f 40       	sbci	r25, 0x0F	; 15
    227e:	0c f4       	brge	.+2      	; 0x2282 <main+0x1d6a>
    2280:	83 c1       	rjmp	.+774    	; 0x2588 <main+0x2070>
    2282:	12 01       	movw	r2, r4
    2284:	07 c0       	rjmp	.+14     	; 0x2294 <main+0x1d7c>
    2286:	4b e1       	ldi	r20, 0x1B	; 27
    2288:	64 2e       	mov	r6, r20
    228a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    228c:	b1 e2       	ldi	r27, 0x21	; 33
    228e:	6b 16       	cp	r6, r27
    2290:	71 04       	cpc	r7, r1
    2292:	61 f4       	brne	.+24     	; 0x22ac <main+0x1d94>
    2294:	c2 01       	movw	r24, r4
    2296:	82 19       	sub	r24, r2
    2298:	93 09       	sbc	r25, r3
    229a:	85 36       	cpi	r24, 0x65	; 101
    229c:	91 05       	cpc	r25, r1
    229e:	0c f4       	brge	.+2      	; 0x22a2 <main+0x1d8a>
    22a0:	80 c1       	rjmp	.+768    	; 0x25a2 <main+0x208a>
    22a2:	12 01       	movw	r2, r4
    22a4:	07 c0       	rjmp	.+14     	; 0x22b4 <main+0x1d9c>
    22a6:	3c e1       	ldi	r19, 0x1C	; 28
    22a8:	63 2e       	mov	r6, r19
    22aa:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate){
    22ac:	22 e2       	ldi	r18, 0x22	; 34
    22ae:	62 16       	cp	r6, r18
    22b0:	71 04       	cpc	r7, r1
    22b2:	61 f4       	brne	.+24     	; 0x22cc <main+0x1db4>
    22b4:	c2 01       	movw	r24, r4
    22b6:	82 19       	sub	r24, r2
    22b8:	93 09       	sbc	r25, r3
    22ba:	81 5a       	subi	r24, 0xA1	; 161
    22bc:	9f 40       	sbci	r25, 0x0F	; 15
    22be:	0c f4       	brge	.+2      	; 0x22c2 <main+0x1daa>
    22c0:	82 c1       	rjmp	.+772    	; 0x25c6 <main+0x20ae>
    22c2:	12 01       	movw	r2, r4
    22c4:	07 c0       	rjmp	.+14     	; 0x22d4 <main+0x1dbc>
    22c6:	2d e1       	ldi	r18, 0x1D	; 29
    22c8:	62 2e       	mov	r6, r18
    22ca:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    22cc:	43 e2       	ldi	r20, 0x23	; 35
    22ce:	64 16       	cp	r6, r20
    22d0:	71 04       	cpc	r7, r1
    22d2:	69 f4       	brne	.+26     	; 0x22ee <main+0x1dd6>
    22d4:	c2 01       	movw	r24, r4
    22d6:	82 19       	sub	r24, r2
    22d8:	93 09       	sbc	r25, r3
    22da:	0b 97       	sbiw	r24, 0x0b	; 11
    22dc:	0c f4       	brge	.+2      	; 0x22e0 <main+0x1dc8>
    22de:	80 c1       	rjmp	.+768    	; 0x25e0 <main+0x20c8>
    22e0:	94 e2       	ldi	r25, 0x24	; 36
    22e2:	69 2e       	mov	r6, r25
    22e4:	71 2c       	mov	r7, r1
    22e6:	97 c1       	rjmp	.+814    	; 0x2616 <main+0x20fe>
    22e8:	8e e1       	ldi	r24, 0x1E	; 30
    22ea:	68 2e       	mov	r6, r24
    22ec:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    22ee:	f3 01       	movw	r30, r6
    22f0:	e4 32       	cpi	r30, 0x24	; 36
    22f2:	f1 05       	cpc	r31, r1
    22f4:	08 f0       	brcs	.+2      	; 0x22f8 <main+0x1de0>
    22f6:	8f c1       	rjmp	.+798    	; 0x2616 <main+0x20fe>
    22f8:	e8 54       	subi	r30, 0x48	; 72
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	ee 0f       	add	r30, r30
    22fe:	ff 1f       	adc	r31, r31
    2300:	05 90       	lpm	r0, Z+
    2302:	f4 91       	lpm	r31, Z+
    2304:	e0 2d       	mov	r30, r0
    2306:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    2308:	80 91 42 03 	lds	r24, 0x0342
    230c:	20 91 3e 03 	lds	r18, 0x033E
    2310:	90 91 40 03 	lds	r25, 0x0340
    2314:	82 ff       	sbrs	r24, 2
    2316:	07 c0       	rjmp	.+14     	; 0x2326 <main+0x1e0e>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    2318:	2f 7e       	andi	r18, 0xEF	; 239
    231a:	20 93 3e 03 	sts	0x033E, r18
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    231e:	97 7f       	andi	r25, 0xF7	; 247
    2320:	90 93 40 03 	sts	0x0340, r25
    2324:	fb c0       	rjmp	.+502    	; 0x251c <main+0x2004>
						fixtureMotor = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    2326:	2f 7d       	andi	r18, 0xDF	; 223
    2328:	20 93 3e 03 	sts	0x033E, r18
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    232c:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    232e:	98 60       	ori	r25, 0x08	; 8
    2330:	90 93 40 03 	sts	0x0340, r25
						if(print0 == 1){
    2334:	af a5       	ldd	r26, Y+47	; 0x2f
    2336:	b8 a9       	ldd	r27, Y+48	; 0x30
    2338:	11 97       	sbiw	r26, 0x01	; 1
    233a:	09 f0       	breq	.+2      	; 0x233e <main+0x1e26>
    233c:	e7 c0       	rjmp	.+462    	; 0x250c <main+0x1ff4>
							OrangutanLCD::gotoXY(0,1);
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	61 e0       	ldi	r22, 0x01	; 1
    2342:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	93 e0       	ldi	r25, 0x03	; 3
    234a:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    234e:	18 aa       	std	Y+48, r1	; 0x30
    2350:	1f a6       	std	Y+47, r1	; 0x2f
    2352:	dc c0       	rjmp	.+440    	; 0x250c <main+0x1ff4>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    2354:	20 91 40 03 	lds	r18, 0x0340
    2358:	32 2f       	mov	r19, r18
    235a:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    235c:	c2 01       	movw	r24, r4
    235e:	68 ec       	ldi	r22, 0xC8	; 200
    2360:	70 e0       	ldi	r23, 0x00	; 0
    2362:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__divmodhi4>
    2366:	84 36       	cpi	r24, 0x64	; 100
    2368:	91 05       	cpc	r25, r1
    236a:	24 f4       	brge	.+8      	; 0x2374 <main+0x1e5c>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    236c:	2c 7f       	andi	r18, 0xFC	; 252
    236e:	20 93 40 03 	sts	0x0340, r18
    2372:	03 c0       	rjmp	.+6      	; 0x237a <main+0x1e62>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2374:	32 60       	ori	r19, 0x02	; 2
    2376:	30 93 40 03 	sts	0x0340, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
    237a:	80 91 3e 03 	lds	r24, 0x033E
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    237e:	86 60       	ori	r24, 0x06	; 6
    2380:	80 93 3e 03 	sts	0x033E, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    2384:	80 91 40 03 	lds	r24, 0x0340
    2388:	8b 7f       	andi	r24, 0xFB	; 251
    238a:	80 93 40 03 	sts	0x0340, r24
    238e:	21 e0       	ldi	r18, 0x01	; 1
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	38 8f       	std	Y+24, r19	; 0x18
    2394:	2f 8b       	std	Y+23, r18	; 0x17
    2396:	3f c1       	rjmp	.+638    	; 0x2616 <main+0x20fe>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2398:	80 91 40 03 	lds	r24, 0x0340
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    239c:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    239e:	86 61       	ori	r24, 0x16	; 22
    23a0:	80 93 40 03 	sts	0x0340, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    23a4:	80 91 3e 03 	lds	r24, 0x033E
    23a8:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    23aa:	8b 7f       	andi	r24, 0xFB	; 251
    23ac:	80 93 3e 03 	sts	0x033E, r24
    23b0:	2b c1       	rjmp	.+598    	; 0x2608 <main+0x20f0>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    23b2:	80 91 3e 03 	lds	r24, 0x033E
    23b6:	8f 7d       	andi	r24, 0xDF	; 223
    23b8:	80 93 3e 03 	sts	0x033E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    23bc:	80 91 40 03 	lds	r24, 0x0340
    23c0:	88 60       	ori	r24, 0x08	; 8
    23c2:	80 93 40 03 	sts	0x0340, r24
    23c6:	a2 c0       	rjmp	.+324    	; 0x250c <main+0x1ff4>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    23c8:	80 91 40 03 	lds	r24, 0x0340
    23cc:	8f 7e       	andi	r24, 0xEF	; 239
    23ce:	80 93 40 03 	sts	0x0340, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    23d2:	80 91 3e 03 	lds	r24, 0x033E
    23d6:	80 62       	ori	r24, 0x20	; 32
    23d8:	80 93 3e 03 	sts	0x033E, r24
    23dc:	1c c1       	rjmp	.+568    	; 0x2616 <main+0x20fe>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    23de:	80 91 3e 03 	lds	r24, 0x033E
    23e2:	80 61       	ori	r24, 0x10	; 16
    23e4:	99 c0       	rjmp	.+306    	; 0x2518 <main+0x2000>
					fixtureMotor = 1;
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
    23e6:	80 91 3f 03 	lds	r24, 0x033F
    23ea:	81 60       	ori	r24, 0x01	; 1
    23ec:	80 93 3f 03 	sts	0x033F, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    23f0:	80 91 3e 03 	lds	r24, 0x033E
    23f4:	8f 77       	andi	r24, 0x7F	; 127
    23f6:	80 93 3e 03 	sts	0x033E, r24
    23fa:	88 c0       	rjmp	.+272    	; 0x250c <main+0x1ff4>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    23fc:	80 91 40 03 	lds	r24, 0x0340
    2400:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2402:	8f 7d       	andi	r24, 0xDF	; 223
    2404:	80 93 40 03 	sts	0x0340, r24
    2408:	a1 e0       	ldi	r26, 0x01	; 1
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	ba 8b       	std	Y+18, r27	; 0x12
    240e:	a9 8b       	std	Y+17, r26	; 0x11
    2410:	02 c1       	rjmp	.+516    	; 0x2616 <main+0x20fe>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2412:	80 91 3e 03 	lds	r24, 0x033E
    2416:	80 61       	ori	r24, 0x10	; 16
    2418:	80 93 3e 03 	sts	0x033E, r24
    241c:	41 e0       	ldi	r20, 0x01	; 1
    241e:	50 e0       	ldi	r21, 0x00	; 0
    2420:	58 a3       	std	Y+32, r21	; 0x20
    2422:	4f 8f       	std	Y+31, r20	; 0x1f
    2424:	f8 c0       	rjmp	.+496    	; 0x2616 <main+0x20fe>
					fixtureMotor = 1;
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2426:	80 91 3e 03 	lds	r24, 0x033E
    242a:	8f 77       	andi	r24, 0x7F	; 127
    242c:	80 93 3e 03 	sts	0x033E, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2430:	80 91 40 03 	lds	r24, 0x0340
    2434:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2436:	8f 7d       	andi	r24, 0xDF	; 223
    2438:	80 93 40 03 	sts	0x0340, r24
    243c:	18 a2       	std	Y+32, r1	; 0x20
    243e:	1f 8e       	std	Y+31, r1	; 0x1f
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	9a 8b       	std	Y+18, r25	; 0x12
    2446:	89 8b       	std	Y+17, r24	; 0x11
    2448:	e6 c0       	rjmp	.+460    	; 0x2616 <main+0x20fe>
					fixtureMotor = 1;
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    244a:	80 91 40 03 	lds	r24, 0x0340
    244e:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2450:	80 62       	ori	r24, 0x20	; 32
    2452:	80 93 40 03 	sts	0x0340, r24
    2456:	18 a2       	std	Y+32, r1	; 0x20
    2458:	1f 8e       	std	Y+31, r1	; 0x1f
    245a:	1a 8a       	std	Y+18, r1	; 0x12
    245c:	19 8a       	std	Y+17, r1	; 0x11
    245e:	db c0       	rjmp	.+438    	; 0x2616 <main+0x20fe>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
    2460:	80 91 3f 03 	lds	r24, 0x033F
    2464:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2466:	8b 7f       	andi	r24, 0xFB	; 251
    2468:	80 93 3f 03 	sts	0x033F, r24
    246c:	4f c0       	rjmp	.+158    	; 0x250c <main+0x1ff4>
						print15 = 0;
					}*/
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    246e:	80 91 41 03 	lds	r24, 0x0341
    2472:	81 60       	ori	r24, 0x01	; 1
    2474:	80 93 41 03 	sts	0x0341, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2478:	80 91 40 03 	lds	r24, 0x0340
    247c:	8f 77       	andi	r24, 0x7F	; 127
    247e:	80 93 40 03 	sts	0x0340, r24
    2482:	a1 e0       	ldi	r26, 0x01	; 1
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	b8 a7       	std	Y+40, r27	; 0x28
    2488:	af a3       	std	Y+39, r26	; 0x27
    248a:	c5 c0       	rjmp	.+394    	; 0x2616 <main+0x20fe>
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    248c:	80 91 41 03 	lds	r24, 0x0341
    2490:	8e 7f       	andi	r24, 0xFE	; 254
    2492:	80 93 41 03 	sts	0x0341, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2496:	80 91 40 03 	lds	r24, 0x0340
    249a:	80 68       	ori	r24, 0x80	; 128
    249c:	80 93 40 03 	sts	0x0340, r24
    24a0:	2d c0       	rjmp	.+90     	; 0x24fc <main+0x1fe4>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    24a2:	80 91 3e 03 	lds	r24, 0x033E
    24a6:	8f 7e       	andi	r24, 0xEF	; 239
    24a8:	80 93 3e 03 	sts	0x033E, r24
    24ac:	21 e0       	ldi	r18, 0x01	; 1
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	38 a3       	std	Y+32, r19	; 0x20
    24b2:	2f 8f       	std	Y+31, r18	; 0x1f
    24b4:	b0 c0       	rjmp	.+352    	; 0x2616 <main+0x20fe>
					fixtureMotor = 1;
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    24b6:	80 91 3f 03 	lds	r24, 0x033F
    24ba:	8b 7f       	andi	r24, 0xFB	; 251
    24bc:	80 93 3f 03 	sts	0x033F, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    24c0:	80 91 41 03 	lds	r24, 0x0341
    24c4:	81 60       	ori	r24, 0x01	; 1
    24c6:	80 93 41 03 	sts	0x0341, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    24ca:	80 91 40 03 	lds	r24, 0x0340
    24ce:	8f 77       	andi	r24, 0x7F	; 127
    24d0:	80 93 40 03 	sts	0x0340, r24
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	50 e0       	ldi	r21, 0x00	; 0
    24d8:	58 a7       	std	Y+40, r21	; 0x28
    24da:	4f a3       	std	Y+39, r20	; 0x27
    24dc:	17 c0       	rjmp	.+46     	; 0x250c <main+0x1ff4>
					fixtureMotor = 1;
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    24de:	80 91 41 03 	lds	r24, 0x0341
    24e2:	8e 7f       	andi	r24, 0xFE	; 254
    24e4:	80 93 41 03 	sts	0x0341, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    24e8:	80 91 40 03 	lds	r24, 0x0340
    24ec:	80 68       	ori	r24, 0x80	; 128
    24ee:	80 93 40 03 	sts	0x0340, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
    24f2:	80 91 3f 03 	lds	r24, 0x033F
    24f6:	87 7f       	andi	r24, 0xF7	; 247
    24f8:	80 93 3f 03 	sts	0x033F, r24
    24fc:	18 a6       	std	Y+40, r1	; 0x28
    24fe:	1f a2       	std	Y+39, r1	; 0x27
    2500:	05 c0       	rjmp	.+10     	; 0x250c <main+0x1ff4>
					fixtureMotor = 1;
					//u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2502:	80 91 41 03 	lds	r24, 0x0341
    2506:	87 7f       	andi	r24, 0xF7	; 247
    2508:	80 93 41 03 	sts	0x0341, r24
    250c:	18 a2       	std	Y+32, r1	; 0x20
    250e:	1f 8e       	std	Y+31, r1	; 0x1f
    2510:	82 c0       	rjmp	.+260    	; 0x2616 <main+0x20fe>
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2512:	80 91 3e 03 	lds	r24, 0x033E
    2516:	8f 7e       	andi	r24, 0xEF	; 239
    2518:	80 93 3e 03 	sts	0x033E, r24
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	98 a3       	std	Y+32, r25	; 0x20
    2522:	8f 8f       	std	Y+31, r24	; 0x1f
    2524:	78 c0       	rjmp	.+240    	; 0x2616 <main+0x20fe>
					fixtureMotor = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    2526:	80 91 41 03 	lds	r24, 0x0341
    252a:	88 60       	ori	r24, 0x08	; 8
    252c:	10 c0       	rjmp	.+32     	; 0x254e <main+0x2036>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
    252e:	80 91 3f 03 	lds	r24, 0x033F
    2532:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    2534:	8f 7d       	andi	r24, 0xDF	; 223
    2536:	80 93 3f 03 	sts	0x033F, r24
    253a:	18 a2       	std	Y+32, r1	; 0x20
    253c:	1f 8e       	std	Y+31, r1	; 0x1f
    253e:	a1 e0       	ldi	r26, 0x01	; 1
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	bc 87       	std	Y+12, r27	; 0x0c
    2544:	ab 87       	std	Y+11, r26	; 0x0b
    2546:	67 c0       	rjmp	.+206    	; 0x2616 <main+0x20fe>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    2548:	80 91 41 03 	lds	r24, 0x0341
    254c:	8d 7f       	andi	r24, 0xFD	; 253
    254e:	80 93 41 03 	sts	0x0341, r24
    2552:	61 c0       	rjmp	.+194    	; 0x2616 <main+0x20fe>
				case DRY2:
					fixtureMotor = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    2554:	80 91 3f 03 	lds	r24, 0x033F
    2558:	8f 7b       	andi	r24, 0xBF	; 191
    255a:	80 93 3f 03 	sts	0x033F, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    255e:	80 91 41 03 	lds	r24, 0x0341
    2562:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    2564:	8b 7f       	andi	r24, 0xFB	; 251
    2566:	80 93 41 03 	sts	0x0341, r24
    256a:	1c 86       	std	Y+12, r1	; 0x0c
    256c:	1b 86       	std	Y+11, r1	; 0x0b
    256e:	53 c0       	rjmp	.+166    	; 0x2616 <main+0x20fe>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2570:	80 91 40 03 	lds	r24, 0x0340
    2574:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    2576:	80 61       	ori	r24, 0x10	; 16
    2578:	80 93 40 03 	sts	0x0340, r24
    257c:	18 a2       	std	Y+32, r1	; 0x20
    257e:	1f 8e       	std	Y+31, r1	; 0x1f
    2580:	0f e1       	ldi	r16, 0x1F	; 31
    2582:	60 2e       	mov	r6, r16
    2584:	71 2c       	mov	r7, r1
    2586:	47 c0       	rjmp	.+142    	; 0x2616 <main+0x20fe>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    2588:	80 91 3e 03 	lds	r24, 0x033E
    258c:	8f 7e       	andi	r24, 0xEF	; 239
    258e:	80 93 3e 03 	sts	0x033E, r24
    2592:	21 e0       	ldi	r18, 0x01	; 1
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	38 a3       	std	Y+32, r19	; 0x20
    2598:	2f 8f       	std	Y+31, r18	; 0x1f
    259a:	10 e2       	ldi	r17, 0x20	; 32
    259c:	61 2e       	mov	r6, r17
    259e:	71 2c       	mov	r7, r1
    25a0:	3a c0       	rjmp	.+116    	; 0x2616 <main+0x20fe>
					fixtureMotor = 1;
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    25a2:	80 91 3e 03 	lds	r24, 0x033E
    25a6:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    25a8:	84 60       	ori	r24, 0x04	; 4
    25aa:	80 93 3e 03 	sts	0x033E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    25ae:	80 91 40 03 	lds	r24, 0x0340
    25b2:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    25b4:	8f 7e       	andi	r24, 0xEF	; 239
    25b6:	80 93 40 03 	sts	0x0340, r24
    25ba:	18 a2       	std	Y+32, r1	; 0x20
    25bc:	1f 8e       	std	Y+31, r1	; 0x1f
    25be:	b1 e2       	ldi	r27, 0x21	; 33
    25c0:	6b 2e       	mov	r6, r27
    25c2:	71 2c       	mov	r7, r1
    25c4:	28 c0       	rjmp	.+80     	; 0x2616 <main+0x20fe>
					break;
    25c6:	a2 e2       	ldi	r26, 0x22	; 34
    25c8:	6a 2e       	mov	r6, r26
    25ca:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    25cc:	80 91 3e 03 	lds	r24, 0x033E
    25d0:	8d 7f       	andi	r24, 0xFD	; 253
    25d2:	80 93 3e 03 	sts	0x033E, r24
    25d6:	41 e0       	ldi	r20, 0x01	; 1
    25d8:	50 e0       	ldi	r21, 0x00	; 0
    25da:	58 8f       	std	Y+24, r21	; 0x18
    25dc:	4f 8b       	std	Y+23, r20	; 0x17
    25de:	1b c0       	rjmp	.+54     	; 0x2616 <main+0x20fe>
					plateLoadMotor = 1;
					break;
    25e0:	f3 e2       	ldi	r31, 0x23	; 35
    25e2:	6f 2e       	mov	r6, r31
    25e4:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    25e6:	80 91 3e 03 	lds	r24, 0x033E
    25ea:	8b 7f       	andi	r24, 0xFB	; 251
    25ec:	80 93 3e 03 	sts	0x033E, r24
					if(print35 == 1){
    25f0:	8d a9       	ldd	r24, Y+53	; 0x35
    25f2:	9e a9       	ldd	r25, Y+54	; 0x36
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	41 f4       	brne	.+16     	; 0x2608 <main+0x20f0>
						OrangutanLCD::clear();
    25f8:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    25fc:	8e e0       	ldi	r24, 0x0E	; 14
    25fe:	93 e0       	ldi	r25, 0x03	; 3
    2600:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    2604:	1e aa       	std	Y+54, r1	; 0x36
    2606:	1d aa       	std	Y+53, r1	; 0x35
    2608:	18 8e       	std	Y+24, r1	; 0x18
    260a:	1f 8a       	std	Y+23, r1	; 0x17
    260c:	04 c0       	rjmp	.+8      	; 0x2616 <main+0x20fe>
    260e:	a1 e0       	ldi	r26, 0x01	; 1
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	b8 a3       	std	Y+32, r27	; 0x20
    2614:	af 8f       	std	Y+31, r26	; 0x1f
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
    2616:	2d b7       	in	r18, 0x3d	; 61
    2618:	3e b7       	in	r19, 0x3e	; 62
    261a:	22 51       	subi	r18, 0x12	; 18
    261c:	30 40       	sbci	r19, 0x00	; 0
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	3e bf       	out	0x3e, r19	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	2d bf       	out	0x3d, r18	; 61
    2628:	ed b7       	in	r30, 0x3d	; 61
    262a:	fe b7       	in	r31, 0x3e	; 62
    262c:	31 96       	adiw	r30, 0x01	; 1
    262e:	82 e0       	ldi	r24, 0x02	; 2
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	ad b7       	in	r26, 0x3d	; 61
    2634:	be b7       	in	r27, 0x3e	; 62
    2636:	12 96       	adiw	r26, 0x02	; 2
    2638:	9c 93       	st	X, r25
    263a:	8e 93       	st	-X, r24
    263c:	11 97       	sbiw	r26, 0x01	; 1
    263e:	93 83       	std	Z+3, r25	; 0x03
    2640:	82 83       	std	Z+2, r24	; 0x02
    2642:	95 83       	std	Z+5, r25	; 0x05
    2644:	84 83       	std	Z+4, r24	; 0x04
    2646:	97 83       	std	Z+7, r25	; 0x07
    2648:	86 83       	std	Z+6, r24	; 0x06
    264a:	21 e0       	ldi	r18, 0x01	; 1
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	31 87       	std	Z+9, r19	; 0x09
    2650:	20 87       	std	Z+8, r18	; 0x08
    2652:	33 87       	std	Z+11, r19	; 0x0b
    2654:	22 87       	std	Z+10, r18	; 0x0a
    2656:	35 87       	std	Z+13, r19	; 0x0d
    2658:	24 87       	std	Z+12, r18	; 0x0c
    265a:	37 87       	std	Z+15, r19	; 0x0f
    265c:	26 87       	std	Z+14, r18	; 0x0e
    265e:	31 8b       	std	Z+17, r19	; 0x11
    2660:	20 8b       	std	Z+16, r18	; 0x10
    2662:	c2 01       	movw	r24, r4
    2664:	b1 01       	movw	r22, r2
    2666:	21 96       	adiw	r28, 0x01	; 1
    2668:	4e ad       	ldd	r20, Y+62	; 0x3e
    266a:	5f ad       	ldd	r21, Y+63	; 0x3f
    266c:	21 97       	sbiw	r28, 0x01	; 1
    266e:	2f 89       	ldd	r18, Y+23	; 0x17
    2670:	38 8d       	ldd	r19, Y+24	; 0x18
    2672:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2674:	18 a1       	ldd	r17, Y+32	; 0x20
    2676:	e9 88       	ldd	r14, Y+17	; 0x11
    2678:	fa 88       	ldd	r15, Y+18	; 0x12
    267a:	cf a0       	ldd	r12, Y+39	; 0x27
    267c:	d8 a4       	ldd	r13, Y+40	; 0x28
    267e:	ab 84       	ldd	r10, Y+11	; 0x0b
    2680:	bc 84       	ldd	r11, Y+12	; 0x0c
    2682:	e2 e0       	ldi	r30, 0x02	; 2
    2684:	8e 2e       	mov	r8, r30
    2686:	91 2c       	mov	r9, r1
    2688:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    268c:	4d b7       	in	r20, 0x3d	; 61
    268e:	5e b7       	in	r21, 0x3e	; 62
    2690:	4e 5e       	subi	r20, 0xEE	; 238
    2692:	5f 4f       	sbci	r21, 0xFF	; 255
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	5e bf       	out	0x3e, r21	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	4d bf       	out	0x3d, r20	; 61
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("BOTH B");
			while(state != DONER)
    26a6:	54 e2       	ldi	r21, 0x24	; 36
    26a8:	65 16       	cp	r6, r21
    26aa:	71 04       	cpc	r7, r1
    26ac:	09 f4       	brne	.+2      	; 0x26b0 <main+0x2198>
    26ae:	3b c4       	rjmp	.+2166   	; 0x2f26 <main+0x2a0e>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);

				counter ++;
    26b0:	08 94       	sec
    26b2:	41 1c       	adc	r4, r1
    26b4:	51 1c       	adc	r5, r1
    26b6:	ca cb       	rjmp	.-2156   	; 0x1e4c <main+0x1934>
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    26b8:	82 e0       	ldi	r24, 0x02	; 2
    26ba:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
    26be:	88 23       	and	r24, r24
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <main+0x21ac>
    26c2:	31 c4       	rjmp	.+2146   	; 0x2f26 <main+0x2a0e>
			OrangutanLCD::gotoXY(7,0);
    26c4:	87 e0       	ldi	r24, 0x07	; 7
    26c6:	60 e0       	ldi	r22, 0x00	; 0
    26c8:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("DEBUG");
    26cc:	8b e2       	ldi	r24, 0x2B	; 43
    26ce:	93 e0       	ldi	r25, 0x03	; 3
    26d0:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    26d4:	66 24       	eor	r6, r6
    26d6:	77 24       	eor	r7, r7
    26d8:	1c a6       	std	Y+44, r1	; 0x2c
    26da:	1b a6       	std	Y+43, r1	; 0x2b
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	9c ab       	std	Y+52, r25	; 0x34
    26e2:	8b ab       	std	Y+51, r24	; 0x33
    26e4:	22 24       	eor	r2, r2
    26e6:	33 24       	eor	r3, r3
    26e8:	9e a7       	std	Y+46, r25	; 0x2e
    26ea:	8d a7       	std	Y+45, r24	; 0x2d
    26ec:	1e a2       	std	Y+38, r1	; 0x26
    26ee:	1d a2       	std	Y+37, r1	; 0x25
    26f0:	1e 8e       	std	Y+30, r1	; 0x1e
    26f2:	1d 8e       	std	Y+29, r1	; 0x1d
    26f4:	1e 8a       	std	Y+22, r1	; 0x16
    26f6:	1d 8a       	std	Y+21, r1	; 0x15
    26f8:	18 8a       	std	Y+16, r1	; 0x10
    26fa:	1f 86       	std	Y+15, r1	; 0x0f
    26fc:	44 24       	eor	r4, r4
    26fe:	55 24       	eor	r5, r5
    2700:	25 96       	adiw	r28, 0x05	; 5
    2702:	1f ae       	std	Y+63, r1	; 0x3f
    2704:	1e ae       	std	Y+62, r1	; 0x3e
    2706:	25 97       	sbiw	r28, 0x05	; 5
    2708:	1a 86       	std	Y+10, r1	; 0x0a
    270a:	19 86       	std	Y+9, r1	; 0x09
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    270c:	84 e4       	ldi	r24, 0x44	; 68
    270e:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2718:	85 e4       	ldi	r24, 0x45	; 69
    271a:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    271e:	0e 94 4f 18 	call	0x309e	; 0x309e <_Z11i2c_readAckv>
    2722:	80 93 42 03 	sts	0x0342, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2726:	0e 94 59 18 	call	0x30b2	; 0x30b2 <_Z11i2c_readNakv>
    272a:	80 93 43 03 	sts	0x0343, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    272e:	0e 94 35 18 	call	0x306a	; 0x306a <_Z8i2c_stopv>
				
				if(state != INIT){
    2732:	61 14       	cp	r6, r1
    2734:	71 04       	cpc	r7, r1
    2736:	79 f0       	breq	.+30     	; 0x2756 <main+0x223e>
					OrangutanLCD::gotoXY(0,1);
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	61 e0       	ldi	r22, 0x01	; 1
    273c:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    2740:	89 ef       	ldi	r24, 0xF9	; 249
    2742:	92 e0       	ldi	r25, 0x02	; 2
    2744:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    2748:	b3 01       	movw	r22, r6
    274a:	88 27       	eor	r24, r24
    274c:	77 fd       	sbrc	r23, 7
    274e:	80 95       	com	r24
    2750:	98 2f       	mov	r25, r24
    2752:	0e 94 0b 1b 	call	0x3616	; 0x3616 <_ZN12OrangutanLCD5printEl>
						button = 0;
						stateButton = 0;
					}
				}*/

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    2756:	c2 01       	movw	r24, r4
    2758:	be 01       	movw	r22, r28
    275a:	6f 5f       	subi	r22, 0xFF	; 255
    275c:	7f 4f       	sbci	r23, 0xFF	; 255
    275e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z15button_debounceiPi>
    2762:	28 2f       	mov	r18, r24

				//state transitions
	
				if(state == INIT && buttonTriggered){
    2764:	61 14       	cp	r6, r1
    2766:	71 04       	cpc	r7, r1
    2768:	21 f4       	brne	.+8      	; 0x2772 <main+0x225a>
    276a:	88 23       	and	r24, r24
    276c:	09 f0       	breq	.+2      	; 0x2770 <main+0x2258>
    276e:	0f c4       	rjmp	.+2078   	; 0x2f8e <main+0x2a76>
    2770:	12 c4       	rjmp	.+2084   	; 0x2f96 <main+0x2a7e>
					buttonTriggered = false;
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOAD && /*counter - counterRef > totallength1*plateLoadMotorLoadPlate&&*/ u_inputByte0.bits_in_inputByte0.plate == 0){
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	69 16       	cp	r6, r25
    2776:	71 04       	cpc	r7, r1
    2778:	49 f4       	brne	.+18     	; 0x278c <main+0x2274>
    277a:	80 91 42 03 	lds	r24, 0x0342
    277e:	80 fd       	sbrc	r24, 0
    2780:	14 c0       	rjmp	.+40     	; 0x27aa <main+0x2292>
    2782:	12 01       	movw	r2, r4
    2784:	45 e2       	ldi	r20, 0x25	; 37
    2786:	64 2e       	mov	r6, r20
    2788:	71 2c       	mov	r7, r1
    278a:	0f c0       	rjmp	.+30     	; 0x27aa <main+0x2292>
					state = WAIT;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    278c:	a2 e0       	ldi	r26, 0x02	; 2
    278e:	6a 16       	cp	r6, r26
    2790:	71 04       	cpc	r7, r1
    2792:	59 f4       	brne	.+22     	; 0x27aa <main+0x2292>
    2794:	c2 01       	movw	r24, r4
    2796:	82 19       	sub	r24, r2
    2798:	93 09       	sbc	r25, r3
    279a:	85 36       	cpi	r24, 0x65	; 101
    279c:	91 05       	cpc	r25, r1
    279e:	a4 f0       	brlt	.+40     	; 0x27c8 <main+0x22b0>
    27a0:	12 01       	movw	r2, r4
    27a2:	35 e2       	ldi	r19, 0x25	; 37
    27a4:	63 2e       	mov	r6, r19
    27a6:	71 2c       	mov	r7, r1
    27a8:	0f c0       	rjmp	.+30     	; 0x27c8 <main+0x22b0>
					state = WAIT;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    27aa:	b3 e0       	ldi	r27, 0x03	; 3
    27ac:	6b 16       	cp	r6, r27
    27ae:	71 04       	cpc	r7, r1
    27b0:	59 f4       	brne	.+22     	; 0x27c8 <main+0x22b0>
    27b2:	c2 01       	movw	r24, r4
    27b4:	82 19       	sub	r24, r2
    27b6:	93 09       	sbc	r25, r3
    27b8:	81 5a       	subi	r24, 0xA1	; 161
    27ba:	9f 40       	sbci	r25, 0x0F	; 15
    27bc:	a4 f0       	brlt	.+40     	; 0x27e6 <main+0x22ce>
    27be:	12 01       	movw	r2, r4
    27c0:	95 e2       	ldi	r25, 0x25	; 37
    27c2:	69 2e       	mov	r6, r25
    27c4:	71 2c       	mov	r7, r1
    27c6:	0f c0       	rjmp	.+30     	; 0x27e6 <main+0x22ce>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    27c8:	44 e0       	ldi	r20, 0x04	; 4
    27ca:	64 16       	cp	r6, r20
    27cc:	71 04       	cpc	r7, r1
    27ce:	59 f4       	brne	.+22     	; 0x27e6 <main+0x22ce>
    27d0:	c2 01       	movw	r24, r4
    27d2:	82 19       	sub	r24, r2
    27d4:	93 09       	sbc	r25, r3
    27d6:	89 5e       	subi	r24, 0xE9	; 233
    27d8:	93 40       	sbci	r25, 0x03	; 3
    27da:	a4 f0       	brlt	.+40     	; 0x2804 <main+0x22ec>
    27dc:	12 01       	movw	r2, r4
    27de:	85 e2       	ldi	r24, 0x25	; 37
    27e0:	68 2e       	mov	r6, r24
    27e2:	71 2c       	mov	r7, r1
    27e4:	0f c0       	rjmp	.+30     	; 0x2804 <main+0x22ec>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    27e6:	85 e0       	ldi	r24, 0x05	; 5
    27e8:	68 16       	cp	r6, r24
    27ea:	71 04       	cpc	r7, r1
    27ec:	59 f4       	brne	.+22     	; 0x2804 <main+0x22ec>
    27ee:	c2 01       	movw	r24, r4
    27f0:	82 19       	sub	r24, r2
    27f2:	93 09       	sbc	r25, r3
    27f4:	85 36       	cpi	r24, 0x65	; 101
    27f6:	91 05       	cpc	r25, r1
    27f8:	a4 f0       	brlt	.+40     	; 0x2822 <main+0x230a>
    27fa:	12 01       	movw	r2, r4
    27fc:	05 e2       	ldi	r16, 0x25	; 37
    27fe:	60 2e       	mov	r6, r16
    2800:	71 2c       	mov	r7, r1
    2802:	0f c0       	rjmp	.+30     	; 0x2822 <main+0x230a>
					state = WAIT;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totallength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    2804:	96 e0       	ldi	r25, 0x06	; 6
    2806:	69 16       	cp	r6, r25
    2808:	71 04       	cpc	r7, r1
    280a:	59 f4       	brne	.+22     	; 0x2822 <main+0x230a>
    280c:	c2 01       	movw	r24, r4
    280e:	82 19       	sub	r24, r2
    2810:	93 09       	sbc	r25, r3
    2812:	81 5a       	subi	r24, 0xA1	; 161
    2814:	9f 40       	sbci	r25, 0x0F	; 15
    2816:	a4 f0       	brlt	.+40     	; 0x2840 <main+0x2328>
    2818:	12 01       	movw	r2, r4
    281a:	15 e2       	ldi	r17, 0x25	; 37
    281c:	61 2e       	mov	r6, r17
    281e:	71 2c       	mov	r7, r1
    2820:	0f c0       	rjmp	.+30     	; 0x2840 <main+0x2328>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    2822:	b7 e0       	ldi	r27, 0x07	; 7
    2824:	6b 16       	cp	r6, r27
    2826:	71 04       	cpc	r7, r1
    2828:	59 f4       	brne	.+22     	; 0x2840 <main+0x2328>
    282a:	c2 01       	movw	r24, r4
    282c:	82 19       	sub	r24, r2
    282e:	93 09       	sbc	r25, r3
    2830:	85 36       	cpi	r24, 0x65	; 101
    2832:	91 05       	cpc	r25, r1
    2834:	a4 f0       	brlt	.+40     	; 0x285e <main+0x2346>
    2836:	12 01       	movw	r2, r4
    2838:	b5 e2       	ldi	r27, 0x25	; 37
    283a:	6b 2e       	mov	r6, r27
    283c:	71 2c       	mov	r7, r1
    283e:	0f c0       	rjmp	.+30     	; 0x285e <main+0x2346>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    2840:	38 e0       	ldi	r19, 0x08	; 8
    2842:	63 16       	cp	r6, r19
    2844:	71 04       	cpc	r7, r1
    2846:	59 f4       	brne	.+22     	; 0x285e <main+0x2346>
    2848:	c2 01       	movw	r24, r4
    284a:	82 19       	sub	r24, r2
    284c:	93 09       	sbc	r25, r3
    284e:	85 36       	cpi	r24, 0x65	; 101
    2850:	91 05       	cpc	r25, r1
    2852:	a4 f0       	brlt	.+40     	; 0x287c <main+0x2364>
    2854:	12 01       	movw	r2, r4
    2856:	a5 e2       	ldi	r26, 0x25	; 37
    2858:	6a 2e       	mov	r6, r26
    285a:	71 2c       	mov	r7, r1
    285c:	0f c0       	rjmp	.+30     	; 0x287c <main+0x2364>
					state = WAIT;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    285e:	49 e0       	ldi	r20, 0x09	; 9
    2860:	64 16       	cp	r6, r20
    2862:	71 04       	cpc	r7, r1
    2864:	59 f4       	brne	.+22     	; 0x287c <main+0x2364>
    2866:	c2 01       	movw	r24, r4
    2868:	82 19       	sub	r24, r2
    286a:	93 09       	sbc	r25, r3
    286c:	81 5d       	subi	r24, 0xD1	; 209
    286e:	97 40       	sbci	r25, 0x07	; 7
    2870:	9c f0       	brlt	.+38     	; 0x2898 <main+0x2380>
    2872:	12 01       	movw	r2, r4
    2874:	f5 e2       	ldi	r31, 0x25	; 37
    2876:	6f 2e       	mov	r6, r31
    2878:	71 2c       	mov	r7, r1
    287a:	0e c0       	rjmp	.+28     	; 0x2898 <main+0x2380>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    287c:	8a e0       	ldi	r24, 0x0A	; 10
    287e:	68 16       	cp	r6, r24
    2880:	71 04       	cpc	r7, r1
    2882:	51 f4       	brne	.+20     	; 0x2898 <main+0x2380>
    2884:	c2 01       	movw	r24, r4
    2886:	82 19       	sub	r24, r2
    2888:	93 09       	sbc	r25, r3
    288a:	85 36       	cpi	r24, 0x65	; 101
    288c:	91 05       	cpc	r25, r1
    288e:	9c f0       	brlt	.+38     	; 0x28b6 <main+0x239e>
    2890:	e5 e2       	ldi	r30, 0x25	; 37
    2892:	6e 2e       	mov	r6, r30
    2894:	71 2c       	mov	r7, r1
    2896:	0f c0       	rjmp	.+30     	; 0x28b6 <main+0x239e>
					state = WAIT;
				}
				if(state == CLEAN1_2 && counter - counterRef > totallength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    2898:	9b e0       	ldi	r25, 0x0B	; 11
    289a:	69 16       	cp	r6, r25
    289c:	71 04       	cpc	r7, r1
    289e:	59 f4       	brne	.+22     	; 0x28b6 <main+0x239e>
    28a0:	c2 01       	movw	r24, r4
    28a2:	82 19       	sub	r24, r2
    28a4:	93 09       	sbc	r25, r3
    28a6:	81 5d       	subi	r24, 0xD1	; 209
    28a8:	97 40       	sbci	r25, 0x07	; 7
    28aa:	a4 f0       	brlt	.+40     	; 0x28d4 <main+0x23bc>
    28ac:	12 01       	movw	r2, r4
    28ae:	75 e2       	ldi	r23, 0x25	; 37
    28b0:	67 2e       	mov	r6, r23
    28b2:	71 2c       	mov	r7, r1
    28b4:	0f c0       	rjmp	.+30     	; 0x28d4 <main+0x23bc>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    28b6:	bc e0       	ldi	r27, 0x0C	; 12
    28b8:	6b 16       	cp	r6, r27
    28ba:	71 04       	cpc	r7, r1
    28bc:	59 f4       	brne	.+22     	; 0x28d4 <main+0x23bc>
    28be:	c2 01       	movw	r24, r4
    28c0:	82 19       	sub	r24, r2
    28c2:	93 09       	sbc	r25, r3
    28c4:	85 36       	cpi	r24, 0x65	; 101
    28c6:	91 05       	cpc	r25, r1
    28c8:	9c f0       	brlt	.+38     	; 0x28f0 <main+0x23d8>
    28ca:	12 01       	movw	r2, r4
    28cc:	65 e2       	ldi	r22, 0x25	; 37
    28ce:	66 2e       	mov	r6, r22
    28d0:	71 2c       	mov	r7, r1
    28d2:	0e c0       	rjmp	.+28     	; 0x28f0 <main+0x23d8>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    28d4:	3d e0       	ldi	r19, 0x0D	; 13
    28d6:	63 16       	cp	r6, r19
    28d8:	71 04       	cpc	r7, r1
    28da:	51 f4       	brne	.+20     	; 0x28f0 <main+0x23d8>
    28dc:	c2 01       	movw	r24, r4
    28de:	82 19       	sub	r24, r2
    28e0:	93 09       	sbc	r25, r3
    28e2:	81 5d       	subi	r24, 0xD1	; 209
    28e4:	97 40       	sbci	r25, 0x07	; 7
    28e6:	9c f0       	brlt	.+38     	; 0x290e <main+0x23f6>
    28e8:	55 e2       	ldi	r21, 0x25	; 37
    28ea:	65 2e       	mov	r6, r21
    28ec:	71 2c       	mov	r7, r1
    28ee:	0f c0       	rjmp	.+30     	; 0x290e <main+0x23f6>
					state = WAIT;
					counterRef14 = counter;
				}
				if(state == B1STOP2 && counter - counterRef > totallength2*fixtureMotorBrush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    28f0:	5e e0       	ldi	r21, 0x0E	; 14
    28f2:	65 16       	cp	r6, r21
    28f4:	71 04       	cpc	r7, r1
    28f6:	59 f4       	brne	.+22     	; 0x290e <main+0x23f6>
    28f8:	c2 01       	movw	r24, r4
    28fa:	82 19       	sub	r24, r2
    28fc:	93 09       	sbc	r25, r3
    28fe:	81 5a       	subi	r24, 0xA1	; 161
    2900:	9f 40       	sbci	r25, 0x0F	; 15
    2902:	a4 f0       	brlt	.+40     	; 0x292c <main+0x2414>
    2904:	12 01       	movw	r2, r4
    2906:	45 e2       	ldi	r20, 0x25	; 37
    2908:	64 2e       	mov	r6, r20
    290a:	71 2c       	mov	r7, r1
    290c:	0f c0       	rjmp	.+30     	; 0x292c <main+0x2414>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    290e:	bf e0       	ldi	r27, 0x0F	; 15
    2910:	6b 16       	cp	r6, r27
    2912:	71 04       	cpc	r7, r1
    2914:	59 f4       	brne	.+22     	; 0x292c <main+0x2414>
    2916:	c2 01       	movw	r24, r4
    2918:	82 19       	sub	r24, r2
    291a:	93 09       	sbc	r25, r3
    291c:	85 36       	cpi	r24, 0x65	; 101
    291e:	91 05       	cpc	r25, r1
    2920:	a4 f0       	brlt	.+40     	; 0x294a <main+0x2432>
    2922:	12 01       	movw	r2, r4
    2924:	35 e2       	ldi	r19, 0x25	; 37
    2926:	63 2e       	mov	r6, r19
    2928:	71 2c       	mov	r7, r1
    292a:	0f c0       	rjmp	.+30     	; 0x294a <main+0x2432>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    292c:	30 e1       	ldi	r19, 0x10	; 16
    292e:	63 16       	cp	r6, r19
    2930:	71 04       	cpc	r7, r1
    2932:	59 f4       	brne	.+22     	; 0x294a <main+0x2432>
    2934:	c2 01       	movw	r24, r4
    2936:	82 19       	sub	r24, r2
    2938:	93 09       	sbc	r25, r3
    293a:	85 36       	cpi	r24, 0x65	; 101
    293c:	91 05       	cpc	r25, r1
    293e:	a4 f0       	brlt	.+40     	; 0x2968 <main+0x2450>
    2940:	12 01       	movw	r2, r4
    2942:	95 e2       	ldi	r25, 0x25	; 37
    2944:	69 2e       	mov	r6, r25
    2946:	71 2c       	mov	r7, r1
    2948:	0f c0       	rjmp	.+30     	; 0x2968 <main+0x2450>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    294a:	41 e1       	ldi	r20, 0x11	; 17
    294c:	64 16       	cp	r6, r20
    294e:	71 04       	cpc	r7, r1
    2950:	59 f4       	brne	.+22     	; 0x2968 <main+0x2450>
    2952:	c2 01       	movw	r24, r4
    2954:	82 19       	sub	r24, r2
    2956:	93 09       	sbc	r25, r3
    2958:	81 5d       	subi	r24, 0xD1	; 209
    295a:	97 40       	sbci	r25, 0x07	; 7
    295c:	a4 f0       	brlt	.+40     	; 0x2986 <main+0x246e>
    295e:	12 01       	movw	r2, r4
    2960:	85 e2       	ldi	r24, 0x25	; 37
    2962:	68 2e       	mov	r6, r24
    2964:	71 2c       	mov	r7, r1
    2966:	0f c0       	rjmp	.+30     	; 0x2986 <main+0x246e>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    2968:	82 e1       	ldi	r24, 0x12	; 18
    296a:	68 16       	cp	r6, r24
    296c:	71 04       	cpc	r7, r1
    296e:	59 f4       	brne	.+22     	; 0x2986 <main+0x246e>
    2970:	c2 01       	movw	r24, r4
    2972:	82 19       	sub	r24, r2
    2974:	93 09       	sbc	r25, r3
    2976:	85 36       	cpi	r24, 0x65	; 101
    2978:	91 05       	cpc	r25, r1
    297a:	a4 f0       	brlt	.+40     	; 0x29a4 <main+0x248c>
    297c:	12 01       	movw	r2, r4
    297e:	05 e2       	ldi	r16, 0x25	; 37
    2980:	60 2e       	mov	r6, r16
    2982:	71 2c       	mov	r7, r1
    2984:	0f c0       	rjmp	.+30     	; 0x29a4 <main+0x248c>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totallength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    2986:	93 e1       	ldi	r25, 0x13	; 19
    2988:	69 16       	cp	r6, r25
    298a:	71 04       	cpc	r7, r1
    298c:	59 f4       	brne	.+22     	; 0x29a4 <main+0x248c>
    298e:	c2 01       	movw	r24, r4
    2990:	82 19       	sub	r24, r2
    2992:	93 09       	sbc	r25, r3
    2994:	81 5d       	subi	r24, 0xD1	; 209
    2996:	97 40       	sbci	r25, 0x07	; 7
    2998:	a4 f0       	brlt	.+40     	; 0x29c2 <main+0x24aa>
    299a:	12 01       	movw	r2, r4
    299c:	15 e2       	ldi	r17, 0x25	; 37
    299e:	61 2e       	mov	r6, r17
    29a0:	71 2c       	mov	r7, r1
    29a2:	0f c0       	rjmp	.+30     	; 0x29c2 <main+0x24aa>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    29a4:	b4 e1       	ldi	r27, 0x14	; 20
    29a6:	6b 16       	cp	r6, r27
    29a8:	71 04       	cpc	r7, r1
    29aa:	59 f4       	brne	.+22     	; 0x29c2 <main+0x24aa>
    29ac:	c2 01       	movw	r24, r4
    29ae:	82 19       	sub	r24, r2
    29b0:	93 09       	sbc	r25, r3
    29b2:	85 36       	cpi	r24, 0x65	; 101
    29b4:	91 05       	cpc	r25, r1
    29b6:	a4 f0       	brlt	.+40     	; 0x29e0 <main+0x24c8>
    29b8:	12 01       	movw	r2, r4
    29ba:	b5 e2       	ldi	r27, 0x25	; 37
    29bc:	6b 2e       	mov	r6, r27
    29be:	71 2c       	mov	r7, r1
    29c0:	0f c0       	rjmp	.+30     	; 0x29e0 <main+0x24c8>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    29c2:	35 e1       	ldi	r19, 0x15	; 21
    29c4:	63 16       	cp	r6, r19
    29c6:	71 04       	cpc	r7, r1
    29c8:	59 f4       	brne	.+22     	; 0x29e0 <main+0x24c8>
    29ca:	c2 01       	movw	r24, r4
    29cc:	82 19       	sub	r24, r2
    29ce:	93 09       	sbc	r25, r3
    29d0:	81 5d       	subi	r24, 0xD1	; 209
    29d2:	97 40       	sbci	r25, 0x07	; 7
    29d4:	a4 f0       	brlt	.+40     	; 0x29fe <main+0x24e6>
    29d6:	12 01       	movw	r2, r4
    29d8:	a5 e2       	ldi	r26, 0x25	; 37
    29da:	6a 2e       	mov	r6, r26
    29dc:	71 2c       	mov	r7, r1
    29de:	0f c0       	rjmp	.+30     	; 0x29fe <main+0x24e6>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    29e0:	56 e1       	ldi	r21, 0x16	; 22
    29e2:	65 16       	cp	r6, r21
    29e4:	71 04       	cpc	r7, r1
    29e6:	59 f4       	brne	.+22     	; 0x29fe <main+0x24e6>
    29e8:	c2 01       	movw	r24, r4
    29ea:	82 19       	sub	r24, r2
    29ec:	93 09       	sbc	r25, r3
    29ee:	85 36       	cpi	r24, 0x65	; 101
    29f0:	91 05       	cpc	r25, r1
    29f2:	a4 f0       	brlt	.+40     	; 0x2a1c <main+0x2504>
    29f4:	12 01       	movw	r2, r4
    29f6:	f5 e2       	ldi	r31, 0x25	; 37
    29f8:	6f 2e       	mov	r6, r31
    29fa:	71 2c       	mov	r7, r1
    29fc:	0f c0       	rjmp	.+30     	; 0x2a1c <main+0x2504>
					state = WAIT;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totallength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    29fe:	87 e1       	ldi	r24, 0x17	; 23
    2a00:	68 16       	cp	r6, r24
    2a02:	71 04       	cpc	r7, r1
    2a04:	59 f4       	brne	.+22     	; 0x2a1c <main+0x2504>
    2a06:	c2 01       	movw	r24, r4
    2a08:	82 19       	sub	r24, r2
    2a0a:	93 09       	sbc	r25, r3
    2a0c:	81 5a       	subi	r24, 0xA1	; 161
    2a0e:	9f 40       	sbci	r25, 0x0F	; 15
    2a10:	a4 f0       	brlt	.+40     	; 0x2a3a <main+0x2522>
    2a12:	12 01       	movw	r2, r4
    2a14:	e5 e2       	ldi	r30, 0x25	; 37
    2a16:	6e 2e       	mov	r6, r30
    2a18:	71 2c       	mov	r7, r1
    2a1a:	0f c0       	rjmp	.+30     	; 0x2a3a <main+0x2522>
					state = WAIT;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    2a1c:	b8 e1       	ldi	r27, 0x18	; 24
    2a1e:	6b 16       	cp	r6, r27
    2a20:	71 04       	cpc	r7, r1
    2a22:	59 f4       	brne	.+22     	; 0x2a3a <main+0x2522>
    2a24:	c2 01       	movw	r24, r4
    2a26:	82 19       	sub	r24, r2
    2a28:	93 09       	sbc	r25, r3
    2a2a:	85 36       	cpi	r24, 0x65	; 101
    2a2c:	91 05       	cpc	r25, r1
    2a2e:	9c f0       	brlt	.+38     	; 0x2a56 <main+0x253e>
    2a30:	12 01       	movw	r2, r4
    2a32:	75 e2       	ldi	r23, 0x25	; 37
    2a34:	67 2e       	mov	r6, r23
    2a36:	71 2c       	mov	r7, r1
    2a38:	0e c0       	rjmp	.+28     	; 0x2a56 <main+0x253e>
					state = WAIT;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    2a3a:	39 e1       	ldi	r19, 0x19	; 25
    2a3c:	63 16       	cp	r6, r19
    2a3e:	71 04       	cpc	r7, r1
    2a40:	51 f4       	brne	.+20     	; 0x2a56 <main+0x253e>
    2a42:	c2 01       	movw	r24, r4
    2a44:	82 19       	sub	r24, r2
    2a46:	93 09       	sbc	r25, r3
    2a48:	81 5a       	subi	r24, 0xA1	; 161
    2a4a:	9f 40       	sbci	r25, 0x0F	; 15
    2a4c:	a4 f0       	brlt	.+40     	; 0x2a76 <main+0x255e>
    2a4e:	65 e2       	ldi	r22, 0x25	; 37
    2a50:	66 2e       	mov	r6, r22
    2a52:	71 2c       	mov	r7, r1
    2a54:	10 c0       	rjmp	.+32     	; 0x2a76 <main+0x255e>
					state = WAIT;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totallength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    2a56:	5a e1       	ldi	r21, 0x1A	; 26
    2a58:	65 16       	cp	r6, r21
    2a5a:	71 04       	cpc	r7, r1
    2a5c:	61 f4       	brne	.+24     	; 0x2a76 <main+0x255e>
    2a5e:	c2 01       	movw	r24, r4
    2a60:	82 19       	sub	r24, r2
    2a62:	93 09       	sbc	r25, r3
    2a64:	81 5a       	subi	r24, 0xA1	; 161
    2a66:	9f 40       	sbci	r25, 0x0F	; 15
    2a68:	bc f0       	brlt	.+46     	; 0x2a98 <main+0x2580>
    2a6a:	5c a6       	std	Y+44, r5	; 0x2c
    2a6c:	4b a6       	std	Y+43, r4	; 0x2b
    2a6e:	55 e2       	ldi	r21, 0x25	; 37
    2a70:	65 2e       	mov	r6, r21
    2a72:	71 2c       	mov	r7, r1
    2a74:	11 c0       	rjmp	.+34     	; 0x2a98 <main+0x2580>
					state = WAIT;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    2a76:	bb e1       	ldi	r27, 0x1B	; 27
    2a78:	6b 16       	cp	r6, r27
    2a7a:	71 04       	cpc	r7, r1
    2a7c:	69 f4       	brne	.+26     	; 0x2a98 <main+0x2580>
    2a7e:	c2 01       	movw	r24, r4
    2a80:	4b a5       	ldd	r20, Y+43	; 0x2b
    2a82:	5c a5       	ldd	r21, Y+44	; 0x2c
    2a84:	84 1b       	sub	r24, r20
    2a86:	95 0b       	sbc	r25, r21
    2a88:	85 36       	cpi	r24, 0x65	; 101
    2a8a:	91 05       	cpc	r25, r1
    2a8c:	a4 f0       	brlt	.+40     	; 0x2ab6 <main+0x259e>
    2a8e:	12 01       	movw	r2, r4
    2a90:	45 e2       	ldi	r20, 0x25	; 37
    2a92:	64 2e       	mov	r6, r20
    2a94:	71 2c       	mov	r7, r1
    2a96:	0f c0       	rjmp	.+30     	; 0x2ab6 <main+0x259e>
					state = WAIT;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    2a98:	5c e1       	ldi	r21, 0x1C	; 28
    2a9a:	65 16       	cp	r6, r21
    2a9c:	71 04       	cpc	r7, r1
    2a9e:	59 f4       	brne	.+22     	; 0x2ab6 <main+0x259e>
    2aa0:	c2 01       	movw	r24, r4
    2aa2:	82 19       	sub	r24, r2
    2aa4:	93 09       	sbc	r25, r3
    2aa6:	85 36       	cpi	r24, 0x65	; 101
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	9c f0       	brlt	.+38     	; 0x2ad2 <main+0x25ba>
    2aac:	12 01       	movw	r2, r4
    2aae:	35 e2       	ldi	r19, 0x25	; 37
    2ab0:	63 2e       	mov	r6, r19
    2ab2:	71 2c       	mov	r7, r1
    2ab4:	0e c0       	rjmp	.+28     	; 0x2ad2 <main+0x25ba>
					state = WAIT;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    2ab6:	8d e1       	ldi	r24, 0x1D	; 29
    2ab8:	68 16       	cp	r6, r24
    2aba:	71 04       	cpc	r7, r1
    2abc:	51 f4       	brne	.+20     	; 0x2ad2 <main+0x25ba>
    2abe:	c2 01       	movw	r24, r4
    2ac0:	82 19       	sub	r24, r2
    2ac2:	93 09       	sbc	r25, r3
    2ac4:	81 5a       	subi	r24, 0xA1	; 161
    2ac6:	9f 40       	sbci	r25, 0x0F	; 15
    2ac8:	9c f0       	brlt	.+38     	; 0x2af0 <main+0x25d8>
    2aca:	95 e2       	ldi	r25, 0x25	; 37
    2acc:	69 2e       	mov	r6, r25
    2ace:	71 2c       	mov	r7, r1
    2ad0:	0f c0       	rjmp	.+30     	; 0x2af0 <main+0x25d8>
					state = WAIT;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totallength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    2ad2:	be e1       	ldi	r27, 0x1E	; 30
    2ad4:	6b 16       	cp	r6, r27
    2ad6:	71 04       	cpc	r7, r1
    2ad8:	59 f4       	brne	.+22     	; 0x2af0 <main+0x25d8>
    2ada:	c2 01       	movw	r24, r4
    2adc:	82 19       	sub	r24, r2
    2ade:	93 09       	sbc	r25, r3
    2ae0:	81 5a       	subi	r24, 0xA1	; 161
    2ae2:	9f 40       	sbci	r25, 0x0F	; 15
    2ae4:	a4 f0       	brlt	.+40     	; 0x2b0e <main+0x25f6>
    2ae6:	12 01       	movw	r2, r4
    2ae8:	85 e2       	ldi	r24, 0x25	; 37
    2aea:	68 2e       	mov	r6, r24
    2aec:	71 2c       	mov	r7, r1
    2aee:	0f c0       	rjmp	.+30     	; 0x2b0e <main+0x25f6>
					state = WAIT;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    2af0:	4f e1       	ldi	r20, 0x1F	; 31
    2af2:	64 16       	cp	r6, r20
    2af4:	71 04       	cpc	r7, r1
    2af6:	59 f4       	brne	.+22     	; 0x2b0e <main+0x25f6>
    2af8:	c2 01       	movw	r24, r4
    2afa:	82 19       	sub	r24, r2
    2afc:	93 09       	sbc	r25, r3
    2afe:	89 5e       	subi	r24, 0xE9	; 233
    2b00:	93 40       	sbci	r25, 0x03	; 3
    2b02:	a4 f0       	brlt	.+40     	; 0x2b2c <main+0x2614>
    2b04:	12 01       	movw	r2, r4
    2b06:	05 e2       	ldi	r16, 0x25	; 37
    2b08:	60 2e       	mov	r6, r16
    2b0a:	71 2c       	mov	r7, r1
    2b0c:	0f c0       	rjmp	.+30     	; 0x2b2c <main+0x2614>
					state = WAIT;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    2b0e:	80 e2       	ldi	r24, 0x20	; 32
    2b10:	68 16       	cp	r6, r24
    2b12:	71 04       	cpc	r7, r1
    2b14:	59 f4       	brne	.+22     	; 0x2b2c <main+0x2614>
    2b16:	c2 01       	movw	r24, r4
    2b18:	82 19       	sub	r24, r2
    2b1a:	93 09       	sbc	r25, r3
    2b1c:	81 5a       	subi	r24, 0xA1	; 161
    2b1e:	9f 40       	sbci	r25, 0x0F	; 15
    2b20:	a4 f0       	brlt	.+40     	; 0x2b4a <main+0x2632>
    2b22:	12 01       	movw	r2, r4
    2b24:	15 e2       	ldi	r17, 0x25	; 37
    2b26:	61 2e       	mov	r6, r17
    2b28:	71 2c       	mov	r7, r1
    2b2a:	0f c0       	rjmp	.+30     	; 0x2b4a <main+0x2632>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    2b2c:	b1 e2       	ldi	r27, 0x21	; 33
    2b2e:	6b 16       	cp	r6, r27
    2b30:	71 04       	cpc	r7, r1
    2b32:	59 f4       	brne	.+22     	; 0x2b4a <main+0x2632>
    2b34:	c2 01       	movw	r24, r4
    2b36:	82 19       	sub	r24, r2
    2b38:	93 09       	sbc	r25, r3
    2b3a:	85 36       	cpi	r24, 0x65	; 101
    2b3c:	91 05       	cpc	r25, r1
    2b3e:	a4 f0       	brlt	.+40     	; 0x2b68 <main+0x2650>
    2b40:	12 01       	movw	r2, r4
    2b42:	b5 e2       	ldi	r27, 0x25	; 37
    2b44:	6b 2e       	mov	r6, r27
    2b46:	71 2c       	mov	r7, r1
    2b48:	0f c0       	rjmp	.+30     	; 0x2b68 <main+0x2650>
					state = WAIT;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate){
    2b4a:	32 e2       	ldi	r19, 0x22	; 34
    2b4c:	63 16       	cp	r6, r19
    2b4e:	71 04       	cpc	r7, r1
    2b50:	59 f4       	brne	.+22     	; 0x2b68 <main+0x2650>
    2b52:	c2 01       	movw	r24, r4
    2b54:	82 19       	sub	r24, r2
    2b56:	93 09       	sbc	r25, r3
    2b58:	81 5a       	subi	r24, 0xA1	; 161
    2b5a:	9f 40       	sbci	r25, 0x0F	; 15
    2b5c:	94 f0       	brlt	.+36     	; 0x2b82 <main+0x266a>
    2b5e:	12 01       	movw	r2, r4
    2b60:	a5 e2       	ldi	r26, 0x25	; 37
    2b62:	6a 2e       	mov	r6, r26
    2b64:	71 2c       	mov	r7, r1
    2b66:	0d c0       	rjmp	.+26     	; 0x2b82 <main+0x266a>
					state = WAIT;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    2b68:	53 e2       	ldi	r21, 0x23	; 35
    2b6a:	65 16       	cp	r6, r21
    2b6c:	71 04       	cpc	r7, r1
    2b6e:	49 f4       	brne	.+18     	; 0x2b82 <main+0x266a>
    2b70:	c2 01       	movw	r24, r4
    2b72:	82 19       	sub	r24, r2
    2b74:	93 09       	sbc	r25, r3
    2b76:	0b 97       	sbiw	r24, 0x0b	; 11
    2b78:	ac f0       	brlt	.+42     	; 0x2ba4 <main+0x268c>
    2b7a:	f4 e2       	ldi	r31, 0x24	; 36
    2b7c:	6f 2e       	mov	r6, r31
    2b7e:	71 2c       	mov	r7, r1
    2b80:	11 c0       	rjmp	.+34     	; 0x2ba4 <main+0x268c>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    2b82:	85 e2       	ldi	r24, 0x25	; 37
    2b84:	68 16       	cp	r6, r24
    2b86:	71 04       	cpc	r7, r1
    2b88:	69 f4       	brne	.+26     	; 0x2ba4 <main+0x268c>
    2b8a:	22 23       	and	r18, r18
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <main+0x2678>
    2b8e:	7f c1       	rjmp	.+766    	; 0x2e8e <main+0x2976>
					state = ++last;
    2b90:	25 96       	adiw	r28, 0x05	; 5
    2b92:	ae ad       	ldd	r26, Y+62	; 0x3e
    2b94:	bf ad       	ldd	r27, Y+63	; 0x3f
    2b96:	25 97       	sbiw	r28, 0x05	; 5
    2b98:	11 96       	adiw	r26, 0x01	; 1
    2b9a:	25 96       	adiw	r28, 0x05	; 5
    2b9c:	bf af       	std	Y+63, r27	; 0x3f
    2b9e:	ae af       	std	Y+62, r26	; 0x3e
    2ba0:	25 97       	sbiw	r28, 0x05	; 5
    2ba2:	3d 01       	movw	r6, r26
				}


				//state actions
						
			switch (state){
    2ba4:	f3 01       	movw	r30, r6
    2ba6:	e4 32       	cpi	r30, 0x24	; 36
    2ba8:	f1 05       	cpc	r31, r1
    2baa:	08 f0       	brcs	.+2      	; 0x2bae <main+0x2696>
    2bac:	70 c1       	rjmp	.+736    	; 0x2e8e <main+0x2976>
    2bae:	e4 52       	subi	r30, 0x24	; 36
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	ee 0f       	add	r30, r30
    2bb4:	ff 1f       	adc	r31, r31
    2bb6:	05 90       	lpm	r0, Z+
    2bb8:	f4 91       	lpm	r31, Z+
    2bba:	e0 2d       	mov	r30, r0
    2bbc:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    2bbe:	80 91 42 03 	lds	r24, 0x0342
    2bc2:	20 91 3e 03 	lds	r18, 0x033E
    2bc6:	90 91 40 03 	lds	r25, 0x0340
    2bca:	82 ff       	sbrs	r24, 2
    2bcc:	07 c0       	rjmp	.+14     	; 0x2bdc <main+0x26c4>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    2bce:	2f 7e       	andi	r18, 0xEF	; 239
    2bd0:	20 93 3e 03 	sts	0x033E, r18
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2bd4:	97 7f       	andi	r25, 0xF7	; 247
    2bd6:	90 93 40 03 	sts	0x0340, r25
    2bda:	ee c0       	rjmp	.+476    	; 0x2db8 <main+0x28a0>
						fixtureMotor = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    2bdc:	2f 7d       	andi	r18, 0xDF	; 223
    2bde:	20 93 3e 03 	sts	0x033E, r18
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2be2:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2be4:	98 60       	ori	r25, 0x08	; 8
    2be6:	90 93 40 03 	sts	0x0340, r25
						if(print0 == 1){
    2bea:	4d a5       	ldd	r20, Y+45	; 0x2d
    2bec:	5e a5       	ldd	r21, Y+46	; 0x2e
    2bee:	41 30       	cpi	r20, 0x01	; 1
    2bf0:	51 05       	cpc	r21, r1
    2bf2:	09 f0       	breq	.+2      	; 0x2bf6 <main+0x26de>
    2bf4:	26 c1       	rjmp	.+588    	; 0x2e42 <main+0x292a>
							OrangutanLCD::gotoXY(0,1);
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	61 e0       	ldi	r22, 0x01	; 1
    2bfa:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	93 e0       	ldi	r25, 0x03	; 3
    2c02:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    2c06:	1e a6       	std	Y+46, r1	; 0x2e
    2c08:	1d a6       	std	Y+45, r1	; 0x2d
    2c0a:	1b c1       	rjmp	.+566    	; 0x2e42 <main+0x292a>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    2c0c:	20 91 40 03 	lds	r18, 0x0340
    2c10:	32 2f       	mov	r19, r18
    2c12:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    2c14:	c2 01       	movw	r24, r4
    2c16:	68 ec       	ldi	r22, 0xC8	; 200
    2c18:	70 e0       	ldi	r23, 0x00	; 0
    2c1a:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <__divmodhi4>
    2c1e:	84 36       	cpi	r24, 0x64	; 100
    2c20:	91 05       	cpc	r25, r1
    2c22:	24 f4       	brge	.+8      	; 0x2c2c <main+0x2714>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    2c24:	2c 7f       	andi	r18, 0xFC	; 252
    2c26:	20 93 40 03 	sts	0x0340, r18
    2c2a:	03 c0       	rjmp	.+6      	; 0x2c32 <main+0x271a>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2c2c:	32 60       	ori	r19, 0x02	; 2
    2c2e:	30 93 40 03 	sts	0x0340, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
    2c32:	80 91 3e 03 	lds	r24, 0x033E
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    2c36:	86 60       	ori	r24, 0x06	; 6
    2c38:	80 93 3e 03 	sts	0x033E, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    2c3c:	80 91 40 03 	lds	r24, 0x0340
    2c40:	8b 7f       	andi	r24, 0xFB	; 251
    2c42:	80 93 40 03 	sts	0x0340, r24
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	9e 8b       	std	Y+22, r25	; 0x16
    2c4c:	8d 8b       	std	Y+21, r24	; 0x15
    2c4e:	1f c1       	rjmp	.+574    	; 0x2e8e <main+0x2976>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2c50:	80 91 40 03 	lds	r24, 0x0340
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2c54:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    2c56:	86 61       	ori	r24, 0x16	; 22
    2c58:	80 93 40 03 	sts	0x0340, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    2c5c:	80 91 3e 03 	lds	r24, 0x033E
    2c60:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    2c62:	8b 7f       	andi	r24, 0xFB	; 251
    2c64:	80 93 3e 03 	sts	0x033E, r24
    2c68:	0b c1       	rjmp	.+534    	; 0x2e80 <main+0x2968>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    2c6a:	80 91 3e 03 	lds	r24, 0x033E
    2c6e:	8f 7d       	andi	r24, 0xDF	; 223
    2c70:	80 93 3e 03 	sts	0x033E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2c74:	80 91 40 03 	lds	r24, 0x0340
    2c78:	88 60       	ori	r24, 0x08	; 8
    2c7a:	e1 c0       	rjmp	.+450    	; 0x2e3e <main+0x2926>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2c7c:	80 91 40 03 	lds	r24, 0x0340
    2c80:	8f 7e       	andi	r24, 0xEF	; 239
    2c82:	80 93 40 03 	sts	0x0340, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    2c86:	80 91 3e 03 	lds	r24, 0x033E
    2c8a:	80 62       	ori	r24, 0x20	; 32
    2c8c:	80 93 3e 03 	sts	0x033E, r24
    2c90:	fe c0       	rjmp	.+508    	; 0x2e8e <main+0x2976>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2c92:	80 91 3e 03 	lds	r24, 0x033E
    2c96:	80 61       	ori	r24, 0x10	; 16
    2c98:	8d c0       	rjmp	.+282    	; 0x2db4 <main+0x289c>
					fixtureMotor = 1;
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
    2c9a:	80 91 3f 03 	lds	r24, 0x033F
    2c9e:	81 60       	ori	r24, 0x01	; 1
    2ca0:	80 93 3f 03 	sts	0x033F, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2ca4:	80 91 3e 03 	lds	r24, 0x033E
    2ca8:	8f 77       	andi	r24, 0x7F	; 127
    2caa:	80 93 3e 03 	sts	0x033E, r24
    2cae:	c9 c0       	rjmp	.+402    	; 0x2e42 <main+0x292a>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2cb0:	80 91 40 03 	lds	r24, 0x0340
    2cb4:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2cb6:	8f 7d       	andi	r24, 0xDF	; 223
    2cb8:	80 93 40 03 	sts	0x0340, r24
    2cbc:	41 e0       	ldi	r20, 0x01	; 1
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	58 8b       	std	Y+16, r21	; 0x10
    2cc2:	4f 87       	std	Y+15, r20	; 0x0f
    2cc4:	e4 c0       	rjmp	.+456    	; 0x2e8e <main+0x2976>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2cc6:	80 91 3e 03 	lds	r24, 0x033E
    2cca:	80 61       	ori	r24, 0x10	; 16
    2ccc:	80 93 3e 03 	sts	0x033E, r24
    2cd0:	a1 e0       	ldi	r26, 0x01	; 1
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	be 8f       	std	Y+30, r27	; 0x1e
    2cd6:	ad 8f       	std	Y+29, r26	; 0x1d
    2cd8:	da c0       	rjmp	.+436    	; 0x2e8e <main+0x2976>
					fixtureMotor = 1;
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2cda:	80 91 3e 03 	lds	r24, 0x033E
    2cde:	8f 77       	andi	r24, 0x7F	; 127
    2ce0:	80 93 3e 03 	sts	0x033E, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2ce4:	80 91 40 03 	lds	r24, 0x0340
    2ce8:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2cea:	8f 7d       	andi	r24, 0xDF	; 223
    2cec:	80 93 40 03 	sts	0x0340, r24
    2cf0:	1e 8e       	std	Y+30, r1	; 0x1e
    2cf2:	1d 8e       	std	Y+29, r1	; 0x1d
    2cf4:	21 e0       	ldi	r18, 0x01	; 1
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	38 8b       	std	Y+16, r19	; 0x10
    2cfa:	2f 87       	std	Y+15, r18	; 0x0f
    2cfc:	c8 c0       	rjmp	.+400    	; 0x2e8e <main+0x2976>
					fixtureMotor = 1;
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2cfe:	80 91 40 03 	lds	r24, 0x0340
    2d02:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2d04:	80 62       	ori	r24, 0x20	; 32
    2d06:	80 93 40 03 	sts	0x0340, r24
    2d0a:	1e 8e       	std	Y+30, r1	; 0x1e
    2d0c:	1d 8e       	std	Y+29, r1	; 0x1d
    2d0e:	18 8a       	std	Y+16, r1	; 0x10
    2d10:	1f 86       	std	Y+15, r1	; 0x0f
    2d12:	bd c0       	rjmp	.+378    	; 0x2e8e <main+0x2976>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
    2d14:	80 91 3f 03 	lds	r24, 0x033F
    2d18:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2d1a:	8b 7f       	andi	r24, 0xFB	; 251
    2d1c:	80 93 3f 03 	sts	0x033F, r24
    2d20:	90 c0       	rjmp	.+288    	; 0x2e42 <main+0x292a>
						print15 = 0;
					}*/
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2d22:	80 91 41 03 	lds	r24, 0x0341
    2d26:	81 60       	ori	r24, 0x01	; 1
    2d28:	80 93 41 03 	sts	0x0341, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2d2c:	80 91 40 03 	lds	r24, 0x0340
    2d30:	8f 77       	andi	r24, 0x7F	; 127
    2d32:	80 93 40 03 	sts	0x0340, r24
    2d36:	41 e0       	ldi	r20, 0x01	; 1
    2d38:	50 e0       	ldi	r21, 0x00	; 0
    2d3a:	5e a3       	std	Y+38, r21	; 0x26
    2d3c:	4d a3       	std	Y+37, r20	; 0x25
    2d3e:	a7 c0       	rjmp	.+334    	; 0x2e8e <main+0x2976>
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2d40:	80 91 41 03 	lds	r24, 0x0341
    2d44:	8e 7f       	andi	r24, 0xFE	; 254
    2d46:	80 93 41 03 	sts	0x0341, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2d4a:	80 91 40 03 	lds	r24, 0x0340
    2d4e:	80 68       	ori	r24, 0x80	; 128
    2d50:	80 93 40 03 	sts	0x0340, r24
    2d54:	23 c0       	rjmp	.+70     	; 0x2d9c <main+0x2884>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1;
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2d56:	80 91 3f 03 	lds	r24, 0x033F
    2d5a:	8b 7f       	andi	r24, 0xFB	; 251
    2d5c:	80 93 3f 03 	sts	0x033F, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2d60:	80 91 41 03 	lds	r24, 0x0341
    2d64:	81 60       	ori	r24, 0x01	; 1
    2d66:	80 93 41 03 	sts	0x0341, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2d6a:	80 91 40 03 	lds	r24, 0x0340
    2d6e:	8f 77       	andi	r24, 0x7F	; 127
    2d70:	80 93 40 03 	sts	0x0340, r24
    2d74:	a1 e0       	ldi	r26, 0x01	; 1
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	be a3       	std	Y+38, r27	; 0x26
    2d7a:	ad a3       	std	Y+37, r26	; 0x25
    2d7c:	62 c0       	rjmp	.+196    	; 0x2e42 <main+0x292a>
					fixtureMotor = 1;
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2d7e:	80 91 41 03 	lds	r24, 0x0341
    2d82:	8e 7f       	andi	r24, 0xFE	; 254
    2d84:	80 93 41 03 	sts	0x0341, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2d88:	80 91 40 03 	lds	r24, 0x0340
    2d8c:	80 68       	ori	r24, 0x80	; 128
    2d8e:	80 93 40 03 	sts	0x0340, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
    2d92:	80 91 3f 03 	lds	r24, 0x033F
    2d96:	87 7f       	andi	r24, 0xF7	; 247
    2d98:	80 93 3f 03 	sts	0x033F, r24
    2d9c:	1e a2       	std	Y+38, r1	; 0x26
    2d9e:	1d a2       	std	Y+37, r1	; 0x25
    2da0:	50 c0       	rjmp	.+160    	; 0x2e42 <main+0x292a>
					fixtureMotor = 1;
					//u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2da2:	80 91 41 03 	lds	r24, 0x0341
    2da6:	87 7f       	andi	r24, 0xF7	; 247
    2da8:	80 93 41 03 	sts	0x0341, r24
    2dac:	4a c0       	rjmp	.+148    	; 0x2e42 <main+0x292a>
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2dae:	80 91 3e 03 	lds	r24, 0x033E
    2db2:	8f 7e       	andi	r24, 0xEF	; 239
    2db4:	80 93 3e 03 	sts	0x033E, r24
    2db8:	21 e0       	ldi	r18, 0x01	; 1
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	3e 8f       	std	Y+30, r19	; 0x1e
    2dbe:	2d 8f       	std	Y+29, r18	; 0x1d
    2dc0:	66 c0       	rjmp	.+204    	; 0x2e8e <main+0x2976>
					fixtureMotor = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    2dc2:	80 91 41 03 	lds	r24, 0x0341
    2dc6:	88 60       	ori	r24, 0x08	; 8
    2dc8:	10 c0       	rjmp	.+32     	; 0x2dea <main+0x28d2>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
    2dca:	80 91 3f 03 	lds	r24, 0x033F
    2dce:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    2dd0:	8f 7d       	andi	r24, 0xDF	; 223
    2dd2:	80 93 3f 03 	sts	0x033F, r24
    2dd6:	1e 8e       	std	Y+30, r1	; 0x1e
    2dd8:	1d 8e       	std	Y+29, r1	; 0x1d
    2dda:	41 e0       	ldi	r20, 0x01	; 1
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	5a 87       	std	Y+10, r21	; 0x0a
    2de0:	49 87       	std	Y+9, r20	; 0x09
    2de2:	55 c0       	rjmp	.+170    	; 0x2e8e <main+0x2976>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    2de4:	80 91 41 03 	lds	r24, 0x0341
    2de8:	8d 7f       	andi	r24, 0xFD	; 253
    2dea:	80 93 41 03 	sts	0x0341, r24
    2dee:	4f c0       	rjmp	.+158    	; 0x2e8e <main+0x2976>
				case DRY2:
					fixtureMotor = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    2df0:	80 91 3f 03 	lds	r24, 0x033F
    2df4:	8f 7b       	andi	r24, 0xBF	; 191
    2df6:	80 93 3f 03 	sts	0x033F, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    2dfa:	80 91 41 03 	lds	r24, 0x0341
    2dfe:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    2e00:	8b 7f       	andi	r24, 0xFB	; 251
    2e02:	80 93 41 03 	sts	0x0341, r24
    2e06:	1a 86       	std	Y+10, r1	; 0x0a
    2e08:	19 86       	std	Y+9, r1	; 0x09
    2e0a:	41 c0       	rjmp	.+130    	; 0x2e8e <main+0x2976>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2e0c:	80 91 40 03 	lds	r24, 0x0340
    2e10:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    2e12:	80 61       	ori	r24, 0x10	; 16
    2e14:	14 c0       	rjmp	.+40     	; 0x2e3e <main+0x2926>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    2e16:	80 91 3e 03 	lds	r24, 0x033E
    2e1a:	8f 7e       	andi	r24, 0xEF	; 239
    2e1c:	80 93 3e 03 	sts	0x033E, r24
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	9e 8f       	std	Y+30, r25	; 0x1e
    2e26:	8d 8f       	std	Y+29, r24	; 0x1d
    2e28:	32 c0       	rjmp	.+100    	; 0x2e8e <main+0x2976>
					fixtureMotor = 1;
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    2e2a:	80 91 3e 03 	lds	r24, 0x033E
    2e2e:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    2e30:	84 60       	ori	r24, 0x04	; 4
    2e32:	80 93 3e 03 	sts	0x033E, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2e36:	80 91 40 03 	lds	r24, 0x0340
    2e3a:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2e3c:	8f 7e       	andi	r24, 0xEF	; 239
    2e3e:	80 93 40 03 	sts	0x0340, r24
    2e42:	1e 8e       	std	Y+30, r1	; 0x1e
    2e44:	1d 8e       	std	Y+29, r1	; 0x1d
    2e46:	23 c0       	rjmp	.+70     	; 0x2e8e <main+0x2976>
					break;
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    2e48:	80 91 3e 03 	lds	r24, 0x033E
    2e4c:	8d 7f       	andi	r24, 0xFD	; 253
    2e4e:	80 93 3e 03 	sts	0x033E, r24
    2e52:	a1 e0       	ldi	r26, 0x01	; 1
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	be 8b       	std	Y+22, r27	; 0x16
    2e58:	ad 8b       	std	Y+21, r26	; 0x15
    2e5a:	19 c0       	rjmp	.+50     	; 0x2e8e <main+0x2976>
					plateLoadMotor = 1;
					break;
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    2e5c:	80 91 3e 03 	lds	r24, 0x033E
    2e60:	8b 7f       	andi	r24, 0xFB	; 251
    2e62:	80 93 3e 03 	sts	0x033E, r24
					if(print35 == 1){
    2e66:	2b a9       	ldd	r18, Y+51	; 0x33
    2e68:	3c a9       	ldd	r19, Y+52	; 0x34
    2e6a:	21 30       	cpi	r18, 0x01	; 1
    2e6c:	31 05       	cpc	r19, r1
    2e6e:	41 f4       	brne	.+16     	; 0x2e80 <main+0x2968>
						OrangutanLCD::clear();
    2e70:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    2e74:	8e e0       	ldi	r24, 0x0E	; 14
    2e76:	93 e0       	ldi	r25, 0x03	; 3
    2e78:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    2e7c:	1c aa       	std	Y+52, r1	; 0x34
    2e7e:	1b aa       	std	Y+51, r1	; 0x33
    2e80:	1e 8a       	std	Y+22, r1	; 0x16
    2e82:	1d 8a       	std	Y+21, r1	; 0x15
    2e84:	04 c0       	rjmp	.+8      	; 0x2e8e <main+0x2976>
    2e86:	41 e0       	ldi	r20, 0x01	; 1
    2e88:	50 e0       	ldi	r21, 0x00	; 0
    2e8a:	5e 8f       	std	Y+30, r21	; 0x1e
    2e8c:	4d 8f       	std	Y+29, r20	; 0x1d
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
    2e8e:	8d b7       	in	r24, 0x3d	; 61
    2e90:	9e b7       	in	r25, 0x3e	; 62
    2e92:	42 97       	sbiw	r24, 0x12	; 18
    2e94:	0f b6       	in	r0, 0x3f	; 63
    2e96:	f8 94       	cli
    2e98:	9e bf       	out	0x3e, r25	; 62
    2e9a:	0f be       	out	0x3f, r0	; 63
    2e9c:	8d bf       	out	0x3d, r24	; 61
    2e9e:	ed b7       	in	r30, 0x3d	; 61
    2ea0:	fe b7       	in	r31, 0x3e	; 62
    2ea2:	31 96       	adiw	r30, 0x01	; 1
    2ea4:	22 e0       	ldi	r18, 0x02	; 2
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	ad b7       	in	r26, 0x3d	; 61
    2eaa:	be b7       	in	r27, 0x3e	; 62
    2eac:	12 96       	adiw	r26, 0x02	; 2
    2eae:	3c 93       	st	X, r19
    2eb0:	2e 93       	st	-X, r18
    2eb2:	11 97       	sbiw	r26, 0x01	; 1
    2eb4:	33 83       	std	Z+3, r19	; 0x03
    2eb6:	22 83       	std	Z+2, r18	; 0x02
    2eb8:	35 83       	std	Z+5, r19	; 0x05
    2eba:	24 83       	std	Z+4, r18	; 0x04
    2ebc:	37 83       	std	Z+7, r19	; 0x07
    2ebe:	26 83       	std	Z+6, r18	; 0x06
    2ec0:	41 e0       	ldi	r20, 0x01	; 1
    2ec2:	50 e0       	ldi	r21, 0x00	; 0
    2ec4:	51 87       	std	Z+9, r21	; 0x09
    2ec6:	40 87       	std	Z+8, r20	; 0x08
    2ec8:	53 87       	std	Z+11, r21	; 0x0b
    2eca:	42 87       	std	Z+10, r20	; 0x0a
    2ecc:	55 87       	std	Z+13, r21	; 0x0d
    2ece:	44 87       	std	Z+12, r20	; 0x0c
    2ed0:	57 87       	std	Z+15, r21	; 0x0f
    2ed2:	46 87       	std	Z+14, r20	; 0x0e
    2ed4:	51 8b       	std	Z+17, r21	; 0x11
    2ed6:	40 8b       	std	Z+16, r20	; 0x10
    2ed8:	c2 01       	movw	r24, r4
    2eda:	b1 01       	movw	r22, r2
    2edc:	4b a5       	ldd	r20, Y+43	; 0x2b
    2ede:	5c a5       	ldd	r21, Y+44	; 0x2c
    2ee0:	2d 89       	ldd	r18, Y+21	; 0x15
    2ee2:	3e 89       	ldd	r19, Y+22	; 0x16
    2ee4:	0d 8d       	ldd	r16, Y+29	; 0x1d
    2ee6:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2ee8:	ef 84       	ldd	r14, Y+15	; 0x0f
    2eea:	f8 88       	ldd	r15, Y+16	; 0x10
    2eec:	cd a0       	ldd	r12, Y+37	; 0x25
    2eee:	de a0       	ldd	r13, Y+38	; 0x26
    2ef0:	a9 84       	ldd	r10, Y+9	; 0x09
    2ef2:	ba 84       	ldd	r11, Y+10	; 0x0a
    2ef4:	e2 e0       	ldi	r30, 0x02	; 2
    2ef6:	8e 2e       	mov	r8, r30
    2ef8:	91 2c       	mov	r9, r1
    2efa:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    2efe:	8d b7       	in	r24, 0x3d	; 61
    2f00:	9e b7       	in	r25, 0x3e	; 62
    2f02:	42 96       	adiw	r24, 0x12	; 18
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	9e bf       	out	0x3e, r25	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	8d bf       	out	0x3d, r24	; 61
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("DEBUG");
			while(state != DONER)
    2f16:	94 e2       	ldi	r25, 0x24	; 36
    2f18:	69 16       	cp	r6, r25
    2f1a:	71 04       	cpc	r7, r1
    2f1c:	21 f0       	breq	.+8      	; 0x2f26 <main+0x2a0e>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);

				counter ++;
    2f1e:	08 94       	sec
    2f20:	41 1c       	adc	r4, r1
    2f22:	51 1c       	adc	r5, r1
    2f24:	f3 cb       	rjmp	.-2074   	; 0x270c <main+0x21f4>
				delay_ms(1);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    2f26:	80 91 3e 03 	lds	r24, 0x033E
		u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    2f2a:	8b 7d       	andi	r24, 0xDB	; 219
    2f2c:	80 93 3e 03 	sts	0x033E, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
    2f30:	80 91 3f 03 	lds	r24, 0x033F
		u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    2f34:	86 7b       	andi	r24, 0xB6	; 182
    2f36:	80 93 3f 03 	sts	0x033F, r24
		
		i2c_start(I2C1+I2C_WRITE);
    2f3a:	80 e4       	ldi	r24, 0x40	; 64
    2f3c:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>
		i2c_write(0x2);
    2f40:	82 e0       	ldi	r24, 0x02	; 2
    2f42:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
    2f46:	80 91 3e 03 	lds	r24, 0x033E
    2f4a:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
    2f4e:	80 91 3f 03 	lds	r24, 0x033F
    2f52:	0e 94 3d 18 	call	0x307a	; 0x307a <_Z9i2c_writeh>
		i2c_stop();
    2f56:	0e 94 35 18 	call	0x306a	; 0x306a <_Z8i2c_stopv>
	}
	OrangutanLCD::print("END");
    2f5a:	81 e3       	ldi	r24, 0x31	; 49
    2f5c:	93 e0       	ldi	r25, 0x03	; 3
    2f5e:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    2f62:	0c 94 a7 02 	jmp	0x54e	; 0x54e <main+0x36>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
    2f6c:	88 23       	and	r24, r24
    2f6e:	11 f0       	breq	.+4      	; 0x2f74 <main+0x2a5c>
    2f70:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <main+0x1192>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
    2f7a:	88 23       	and	r24, r24
    2f7c:	11 f4       	brne	.+4      	; 0x2f82 <main+0x2a6a>
    2f7e:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <main+0x18e2>
				counter ++;
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	0e 94 21 01 	call	0x242	; 0x242 <_ZN16OrangutanDigital11isInputHighEh>
    2f88:	88 23       	and	r24, r24
    2f8a:	69 f2       	breq	.-102    	; 0x2f26 <main+0x2a0e>
    2f8c:	95 cb       	rjmp	.-2262   	; 0x26b8 <main+0x21a0>
    2f8e:	12 01       	movw	r2, r4
    2f90:	95 e2       	ldi	r25, 0x25	; 37
    2f92:	69 2e       	mov	r6, r25
    2f94:	71 2c       	mov	r7, r1
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	f9 cb       	rjmp	.-2062   	; 0x278c <main+0x2274>
    2f9a:	23 96       	adiw	r28, 0x03	; 3
    2f9c:	3f ae       	std	Y+63, r3	; 0x3f
    2f9e:	2e ae       	std	Y+62, r2	; 0x3e
    2fa0:	23 97       	sbiw	r28, 0x03	; 3
    2fa2:	66 24       	eor	r6, r6
    2fa4:	77 24       	eor	r7, r7
    2fa6:	8a e2       	ldi	r24, 0x2A	; 42
    2fa8:	48 2e       	mov	r4, r24
    2faa:	51 2c       	mov	r5, r1
    2fac:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <main+0x93e>

00002fb0 <_ZdlPv>:
  return malloc(size); 
} 

void operator delete(void * ptr) 
{ 
  free(ptr); 
    2fb0:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <free>
} 
    2fb4:	08 95       	ret

00002fb6 <_Znwj>:
void * operator new(size_t size); 
void operator delete(void * ptr); 

void * operator new(size_t size) 
{ 
  return malloc(size); 
    2fb6:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <malloc>
} 
    2fba:	08 95       	ret

00002fbc <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    2fbc:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2fc0:	8c e0       	ldi	r24, 0x0C	; 12
    2fc2:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    2fc6:	08 95       	ret

00002fc8 <_Z9i2c_starth>:

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2fc8:	98 2f       	mov	r25, r24
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2fca:	84 ea       	ldi	r24, 0xA4	; 164
    2fcc:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2fd0:	80 91 bc 00 	lds	r24, 0x00BC
    2fd4:	87 ff       	sbrs	r24, 7
    2fd6:	fc cf       	rjmp	.-8      	; 0x2fd0 <_Z9i2c_starth+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2fd8:	80 91 b9 00 	lds	r24, 0x00B9
    2fdc:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    2fde:	88 30       	cpi	r24, 0x08	; 8
    2fe0:	21 f0       	breq	.+8      	; 0x2fea <_Z9i2c_starth+0x22>
    2fe2:	80 31       	cpi	r24, 0x10	; 16
    2fe4:	11 f0       	breq	.+4      	; 0x2fea <_Z9i2c_starth+0x22>
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	08 95       	ret

	// send device address
	TWDR = address;
    2fea:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2fee:	84 e8       	ldi	r24, 0x84	; 132
    2ff0:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2ff4:	80 91 bc 00 	lds	r24, 0x00BC
    2ff8:	87 ff       	sbrs	r24, 7
    2ffa:	fc cf       	rjmp	.-8      	; 0x2ff4 <_Z9i2c_starth+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2ffc:	90 91 b9 00 	lds	r25, 0x00B9
    3000:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    3002:	98 31       	cpi	r25, 0x18	; 24
    3004:	11 f4       	brne	.+4      	; 0x300a <_Z9i2c_starth+0x42>
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	08 95       	ret
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 34       	cpi	r25, 0x40	; 64
    300e:	09 f0       	breq	.+2      	; 0x3012 <_Z9i2c_starth+0x4a>
    3010:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    3012:	08 95       	ret

00003014 <_Z14i2c_start_waith>:
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
    3014:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3016:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    3018:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    301a:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    301c:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3020:	80 91 bc 00 	lds	r24, 0x00BC
    3024:	87 ff       	sbrs	r24, 7
    3026:	fc cf       	rjmp	.-8      	; 0x3020 <_Z14i2c_start_waith+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3028:	80 91 b9 00 	lds	r24, 0x00B9
    302c:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    302e:	88 30       	cpi	r24, 0x08	; 8
    3030:	11 f0       	breq	.+4      	; 0x3036 <_Z14i2c_start_waith+0x22>
    3032:	80 31       	cpi	r24, 0x10	; 16
    3034:	99 f7       	brne	.-26     	; 0x301c <_Z14i2c_start_waith+0x8>
    
    	// send device address
    	TWDR = address;
    3036:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    303a:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    303e:	80 91 bc 00 	lds	r24, 0x00BC
    3042:	87 ff       	sbrs	r24, 7
    3044:	fc cf       	rjmp	.-8      	; 0x303e <_Z14i2c_start_waith+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    3046:	80 91 b9 00 	lds	r24, 0x00B9
    304a:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    304c:	80 32       	cpi	r24, 0x20	; 32
    304e:	11 f0       	breq	.+4      	; 0x3054 <_Z14i2c_start_waith+0x40>
    3050:	88 35       	cpi	r24, 0x58	; 88
    3052:	39 f4       	brne	.+14     	; 0x3062 <_Z14i2c_start_waith+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3054:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    3058:	80 91 bc 00 	lds	r24, 0x00BC
    305c:	84 fd       	sbrc	r24, 4
    305e:	fc cf       	rjmp	.-8      	; 0x3058 <_Z14i2c_start_waith+0x44>
    3060:	dd cf       	rjmp	.-70     	; 0x301c <_Z14i2c_start_waith+0x8>
    3062:	08 95       	ret

00003064 <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    3064:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_Z9i2c_starth>

}/* i2c_rep_start */
    3068:	08 95       	ret

0000306a <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    306a:	84 e9       	ldi	r24, 0x94	; 148
    306c:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3070:	80 91 bc 00 	lds	r24, 0x00BC
    3074:	84 fd       	sbrc	r24, 4
    3076:	fc cf       	rjmp	.-8      	; 0x3070 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    3078:	08 95       	ret

0000307a <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    307a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    307e:	84 e8       	ldi	r24, 0x84	; 132
    3080:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3084:	80 91 bc 00 	lds	r24, 0x00BC
    3088:	87 ff       	sbrs	r24, 7
    308a:	fc cf       	rjmp	.-8      	; 0x3084 <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    308c:	80 91 b9 00 	lds	r24, 0x00B9
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	88 7f       	andi	r24, 0xF8	; 248
    3094:	88 32       	cpi	r24, 0x28	; 40
    3096:	09 f0       	breq	.+2      	; 0x309a <_Z9i2c_writeh+0x20>
    3098:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    309a:	89 2f       	mov	r24, r25
    309c:	08 95       	ret

0000309e <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    309e:	84 ec       	ldi	r24, 0xC4	; 196
    30a0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    30a4:	80 91 bc 00 	lds	r24, 0x00BC
    30a8:	87 ff       	sbrs	r24, 7
    30aa:	fc cf       	rjmp	.-8      	; 0x30a4 <_Z11i2c_readAckv+0x6>

    return TWDR;
    30ac:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    30b0:	08 95       	ret

000030b2 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    30b2:	84 e8       	ldi	r24, 0x84	; 132
    30b4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    30b8:	80 91 bc 00 	lds	r24, 0x00BC
    30bc:	87 ff       	sbrs	r24, 7
    30be:	fc cf       	rjmp	.-8      	; 0x30b8 <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    30c0:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    30c4:	08 95       	ret

000030c6 <_ZN12OrangutanLCDC2Ev>:
    30c6:	08 95       	ret

000030c8 <_ZN12OrangutanLCDC1Ev>:
    30c8:	08 95       	ret

000030ca <void_getchar>:
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	08 95       	ret

000030d0 <_ZN12OrangutanLCD8busyWaitEv>:
    30d0:	ef 92       	push	r14
    30d2:	ff 92       	push	r15
    30d4:	0f 93       	push	r16
    30d6:	1f 93       	push	r17
    30d8:	67 b1       	in	r22, 0x07	; 7
    30da:	3d 98       	cbi	0x07, 5	; 7
    30dc:	28 98       	cbi	0x05, 0	; 5
    30de:	29 9a       	sbi	0x05, 1	; 5
    30e0:	e0 90 4c 03 	lds	r14, 0x034C
    30e4:	f0 90 4d 03 	lds	r15, 0x034D
    30e8:	00 91 4e 03 	lds	r16, 0x034E
    30ec:	10 91 4f 03 	lds	r17, 0x034F
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	41 e0       	ldi	r20, 0x01	; 1
    30f6:	50 e0       	ldi	r21, 0x00	; 0
    30f8:	ca 01       	movw	r24, r20
    30fa:	6f 93       	push	r22
    30fc:	64 e0       	ldi	r22, 0x04	; 4
    30fe:	6a 95       	dec	r22
    3100:	f1 f7       	brne	.-4      	; 0x30fe <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    3102:	6f 91       	pop	r22
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	c9 f7       	brne	.-14     	; 0x30fa <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    3108:	2a 9a       	sbi	0x05, 2	; 5
    310a:	ca 01       	movw	r24, r20
    310c:	6f 93       	push	r22
    310e:	64 e0       	ldi	r22, 0x04	; 4
    3110:	6a 95       	dec	r22
    3112:	f1 f7       	brne	.-4      	; 0x3110 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    3114:	6f 91       	pop	r22
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	c9 f7       	brne	.-14     	; 0x310c <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    311a:	86 b1       	in	r24, 0x06	; 6
    311c:	2a 98       	cbi	0x05, 2	; 5
    311e:	fa 01       	movw	r30, r20
    3120:	6f 93       	push	r22
    3122:	64 e0       	ldi	r22, 0x04	; 4
    3124:	6a 95       	dec	r22
    3126:	f1 f7       	brne	.-4      	; 0x3124 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    3128:	6f 91       	pop	r22
    312a:	31 97       	sbiw	r30, 0x01	; 1
    312c:	c9 f7       	brne	.-14     	; 0x3120 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    312e:	2a 9a       	sbi	0x05, 2	; 5
    3130:	fa 01       	movw	r30, r20
    3132:	6f 93       	push	r22
    3134:	64 e0       	ldi	r22, 0x04	; 4
    3136:	6a 95       	dec	r22
    3138:	f1 f7       	brne	.-4      	; 0x3136 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    313a:	6f 91       	pop	r22
    313c:	31 97       	sbiw	r30, 0x01	; 1
    313e:	c9 f7       	brne	.-14     	; 0x3132 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    3140:	2a 98       	cbi	0x05, 2	; 5
    3142:	2c 5f       	subi	r18, 0xFC	; 252
    3144:	3f 4f       	sbci	r19, 0xFF	; 255
    3146:	85 ff       	sbrs	r24, 5
    3148:	09 c0       	rjmp	.+18     	; 0x315c <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    314a:	c9 01       	movw	r24, r18
    314c:	a0 e0       	ldi	r26, 0x00	; 0
    314e:	b0 e0       	ldi	r27, 0x00	; 0
    3150:	8e 15       	cp	r24, r14
    3152:	9f 05       	cpc	r25, r15
    3154:	a0 07       	cpc	r26, r16
    3156:	b1 07       	cpc	r27, r17
    3158:	08 f4       	brcc	.+2      	; 0x315c <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    315a:	ce cf       	rjmp	.-100    	; 0x30f8 <_ZN12OrangutanLCD8busyWaitEv+0x28>
    315c:	c9 01       	movw	r24, r18
    315e:	a0 e0       	ldi	r26, 0x00	; 0
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	8e 15       	cp	r24, r14
    3164:	9f 05       	cpc	r25, r15
    3166:	a0 07       	cpc	r26, r16
    3168:	b1 07       	cpc	r27, r17
    316a:	28 f0       	brcs	.+10     	; 0x3176 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    316c:	82 e3       	ldi	r24, 0x32	; 50
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	a0 e0       	ldi	r26, 0x00	; 0
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	04 c0       	rjmp	.+8      	; 0x317e <_ZN12OrangutanLCD8busyWaitEv+0xae>
    3176:	80 e3       	ldi	r24, 0x30	; 48
    3178:	95 e7       	ldi	r25, 0x75	; 117
    317a:	a0 e0       	ldi	r26, 0x00	; 0
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	80 93 4c 03 	sts	0x034C, r24
    3182:	90 93 4d 03 	sts	0x034D, r25
    3186:	a0 93 4e 03 	sts	0x034E, r26
    318a:	b0 93 4f 03 	sts	0x034F, r27
    318e:	67 b9       	out	0x07, r22	; 7
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	ff 90       	pop	r15
    3196:	ef 90       	pop	r14
    3198:	08 95       	ret

0000319a <_ZN12OrangutanLCD8sendDataEh>:
    319a:	28 b1       	in	r18, 0x08	; 8
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	8f 70       	andi	r24, 0x0F	; 15
    31a0:	90 70       	andi	r25, 0x00	; 0
    31a2:	88 0f       	add	r24, r24
    31a4:	99 1f       	adc	r25, r25
    31a6:	88 0f       	add	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	23 7c       	andi	r18, 0xC3	; 195
    31ac:	28 2b       	or	r18, r24
    31ae:	28 b9       	out	0x08, r18	; 8
    31b0:	2a 9a       	sbi	0x05, 2	; 5
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	fc 01       	movw	r30, r24
    31b8:	6f 93       	push	r22
    31ba:	64 e0       	ldi	r22, 0x04	; 4
    31bc:	6a 95       	dec	r22
    31be:	f1 f7       	brne	.-4      	; 0x31bc <_ZN12OrangutanLCD8sendDataEh+0x22>
    31c0:	6f 91       	pop	r22
    31c2:	31 97       	sbiw	r30, 0x01	; 1
    31c4:	c9 f7       	brne	.-14     	; 0x31b8 <_ZN12OrangutanLCD8sendDataEh+0x1e>
    31c6:	2a 98       	cbi	0x05, 2	; 5
    31c8:	6f 93       	push	r22
    31ca:	64 e0       	ldi	r22, 0x04	; 4
    31cc:	6a 95       	dec	r22
    31ce:	f1 f7       	brne	.-4      	; 0x31cc <_ZN12OrangutanLCD8sendDataEh+0x32>
    31d0:	6f 91       	pop	r22
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	c9 f7       	brne	.-14     	; 0x31c8 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    31d6:	08 95       	ret

000031d8 <_ZN12OrangutanLCD10initPrintfEv>:
    31d8:	80 91 48 03 	lds	r24, 0x0348
    31dc:	90 91 49 03 	lds	r25, 0x0349
    31e0:	00 97       	sbiw	r24, 0x00	; 0
    31e2:	11 f0       	breq	.+4      	; 0x31e8 <_ZN12OrangutanLCD10initPrintfEv+0x10>
    31e4:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <free>
    31e8:	80 91 35 03 	lds	r24, 0x0335
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	20 91 36 03 	lds	r18, 0x0336
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	ac 01       	movw	r20, r24
    31f8:	42 9f       	mul	r20, r18
    31fa:	c0 01       	movw	r24, r0
    31fc:	43 9f       	mul	r20, r19
    31fe:	90 0d       	add	r25, r0
    3200:	52 9f       	mul	r21, r18
    3202:	90 0d       	add	r25, r0
    3204:	11 24       	eor	r1, r1
    3206:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <malloc>
    320a:	90 93 49 03 	sts	0x0349, r25
    320e:	80 93 48 03 	sts	0x0348, r24
    3212:	00 97       	sbiw	r24, 0x00	; 0
    3214:	29 f1       	breq	.+74     	; 0x3260 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    3216:	60 e0       	ldi	r22, 0x00	; 0
    3218:	70 e2       	ldi	r23, 0x20	; 32
    321a:	08 c0       	rjmp	.+16     	; 0x322c <_ZN12OrangutanLCD10initPrintfEv+0x54>
    321c:	e0 91 48 03 	lds	r30, 0x0348
    3220:	f0 91 49 03 	lds	r31, 0x0349
    3224:	e4 0f       	add	r30, r20
    3226:	f5 1f       	adc	r31, r21
    3228:	70 83       	st	Z, r23
    322a:	6f 5f       	subi	r22, 0xFF	; 255
    322c:	46 2f       	mov	r20, r22
    322e:	50 e0       	ldi	r21, 0x00	; 0
    3230:	80 91 35 03 	lds	r24, 0x0335
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	01 97       	sbiw	r24, 0x01	; 1
    3238:	20 91 36 03 	lds	r18, 0x0336
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	fc 01       	movw	r30, r24
    3240:	e2 9f       	mul	r30, r18
    3242:	c0 01       	movw	r24, r0
    3244:	e3 9f       	mul	r30, r19
    3246:	90 0d       	add	r25, r0
    3248:	f2 9f       	mul	r31, r18
    324a:	90 0d       	add	r25, r0
    324c:	11 24       	eor	r1, r1
    324e:	48 17       	cp	r20, r24
    3250:	59 07       	cpc	r21, r25
    3252:	24 f3       	brlt	.-56     	; 0x321c <_ZN12OrangutanLCD10initPrintfEv+0x44>
    3254:	81 e5       	ldi	r24, 0x51	; 81
    3256:	9b e1       	ldi	r25, 0x1B	; 27
    3258:	65 e6       	ldi	r22, 0x65	; 101
    325a:	78 e1       	ldi	r23, 0x18	; 24
    325c:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <fdevopen>
    3260:	08 95       	ret

00003262 <_ZN12OrangutanLCD10initPrintfEhh>:
    3262:	80 93 36 03 	sts	0x0336, r24
    3266:	60 93 35 03 	sts	0x0335, r22
    326a:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <_ZN12OrangutanLCD10initPrintfEv>
    326e:	08 95       	ret

00003270 <lcd_init_printf_with_dimensions>:
    3270:	80 93 36 03 	sts	0x0336, r24
    3274:	60 93 35 03 	sts	0x0335, r22
    3278:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <_ZN12OrangutanLCD10initPrintfEv>
    327c:	08 95       	ret

0000327e <lcd_init_printf>:
    327e:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <_ZN12OrangutanLCD10initPrintfEv>
    3282:	08 95       	ret

00003284 <_ZN12OrangutanLCD5init2Ev>:
    3284:	3d 98       	cbi	0x07, 5	; 7
    3286:	45 9a       	sbi	0x08, 5	; 8
    3288:	80 e3       	ldi	r24, 0x30	; 48
    328a:	95 e7       	ldi	r25, 0x75	; 117
    328c:	a0 e0       	ldi	r26, 0x00	; 0
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	80 93 4c 03 	sts	0x034C, r24
    3294:	90 93 4d 03 	sts	0x034D, r25
    3298:	a0 93 4e 03 	sts	0x034E, r26
    329c:	b0 93 4f 03 	sts	0x034F, r27
    32a0:	20 9a       	sbi	0x04, 0	; 4
    32a2:	21 9a       	sbi	0x04, 1	; 4
    32a4:	22 9a       	sbi	0x04, 2	; 4
    32a6:	8e e1       	ldi	r24, 0x1E	; 30
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>
    32ae:	83 e0       	ldi	r24, 0x03	; 3
    32b0:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    32b4:	86 e0       	ldi	r24, 0x06	; 6
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>
    32bc:	83 e0       	ldi	r24, 0x03	; 3
    32be:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    32c2:	82 e0       	ldi	r24, 0x02	; 2
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>
    32ca:	83 e0       	ldi	r24, 0x03	; 3
    32cc:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    32d0:	82 e0       	ldi	r24, 0x02	; 2
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>
    32d8:	82 e0       	ldi	r24, 0x02	; 2
    32da:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    32de:	82 e0       	ldi	r24, 0x02	; 2
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>
    32e6:	88 e2       	ldi	r24, 0x28	; 40
    32e8:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN12OrangutanLCD8send_cmdEh>
    32ec:	88 e0       	ldi	r24, 0x08	; 8
    32ee:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN12OrangutanLCD8send_cmdEh>
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN12OrangutanLCD8send_cmdEh>
    32f8:	86 e0       	ldi	r24, 0x06	; 6
    32fa:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN12OrangutanLCD8send_cmdEh>
    32fe:	8c e0       	ldi	r24, 0x0C	; 12
    3300:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN12OrangutanLCD8send_cmdEh>
    3304:	08 95       	ret

00003306 <_ZN12OrangutanLCD4initEv>:
    3306:	80 91 50 03 	lds	r24, 0x0350
    330a:	88 23       	and	r24, r24
    330c:	29 f4       	brne	.+10     	; 0x3318 <_ZN12OrangutanLCD4initEv+0x12>
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	80 93 50 03 	sts	0x0350, r24
    3314:	0e 94 42 19 	call	0x3284	; 0x3284 <_ZN12OrangutanLCD5init2Ev>
    3318:	08 95       	ret

0000331a <_ZN12OrangutanLCD4sendEhhh>:
    331a:	ff 92       	push	r15
    331c:	0f 93       	push	r16
    331e:	1f 93       	push	r17
    3320:	08 2f       	mov	r16, r24
    3322:	16 2f       	mov	r17, r22
    3324:	f4 2e       	mov	r15, r20
    3326:	0e 94 83 19 	call	0x3306	; 0x3306 <_ZN12OrangutanLCD4initEv>
    332a:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN12OrangutanLCD8busyWaitEv>
    332e:	37 b1       	in	r19, 0x07	; 7
    3330:	28 b1       	in	r18, 0x08	; 8
    3332:	29 98       	cbi	0x05, 1	; 5
    3334:	11 23       	and	r17, r17
    3336:	11 f0       	breq	.+4      	; 0x333c <_ZN12OrangutanLCD4sendEhhh+0x22>
    3338:	28 9a       	sbi	0x05, 0	; 5
    333a:	01 c0       	rjmp	.+2      	; 0x333e <_ZN12OrangutanLCD4sendEhhh+0x24>
    333c:	28 98       	cbi	0x05, 0	; 5
    333e:	87 b1       	in	r24, 0x07	; 7
    3340:	8c 63       	ori	r24, 0x3C	; 60
    3342:	87 b9       	out	0x07, r24	; 7
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	f8 16       	cp	r15, r24
    3348:	e1 f0       	breq	.+56     	; 0x3382 <_ZN12OrangutanLCD4sendEhhh+0x68>
    334a:	88 b1       	in	r24, 0x08	; 8
    334c:	90 2f       	mov	r25, r16
    334e:	92 95       	swap	r25
    3350:	9f 70       	andi	r25, 0x0F	; 15
    3352:	99 0f       	add	r25, r25
    3354:	99 0f       	add	r25, r25
    3356:	83 7c       	andi	r24, 0xC3	; 195
    3358:	98 2b       	or	r25, r24
    335a:	98 b9       	out	0x08, r25	; 8
    335c:	2a 9a       	sbi	0x05, 2	; 5
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	fc 01       	movw	r30, r24
    3364:	6f 93       	push	r22
    3366:	64 e0       	ldi	r22, 0x04	; 4
    3368:	6a 95       	dec	r22
    336a:	f1 f7       	brne	.-4      	; 0x3368 <_ZN12OrangutanLCD4sendEhhh+0x4e>
    336c:	6f 91       	pop	r22
    336e:	31 97       	sbiw	r30, 0x01	; 1
    3370:	c9 f7       	brne	.-14     	; 0x3364 <_ZN12OrangutanLCD4sendEhhh+0x4a>
    3372:	2a 98       	cbi	0x05, 2	; 5
    3374:	6f 93       	push	r22
    3376:	64 e0       	ldi	r22, 0x04	; 4
    3378:	6a 95       	dec	r22
    337a:	f1 f7       	brne	.-4      	; 0x3378 <_ZN12OrangutanLCD4sendEhhh+0x5e>
    337c:	6f 91       	pop	r22
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	c9 f7       	brne	.-14     	; 0x3374 <_ZN12OrangutanLCD4sendEhhh+0x5a>
    3382:	88 b1       	in	r24, 0x08	; 8
    3384:	0f 70       	andi	r16, 0x0F	; 15
    3386:	00 0f       	add	r16, r16
    3388:	00 0f       	add	r16, r16
    338a:	83 7c       	andi	r24, 0xC3	; 195
    338c:	80 2b       	or	r24, r16
    338e:	88 b9       	out	0x08, r24	; 8
    3390:	2a 9a       	sbi	0x05, 2	; 5
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	fc 01       	movw	r30, r24
    3398:	6f 93       	push	r22
    339a:	64 e0       	ldi	r22, 0x04	; 4
    339c:	6a 95       	dec	r22
    339e:	f1 f7       	brne	.-4      	; 0x339c <_ZN12OrangutanLCD4sendEhhh+0x82>
    33a0:	6f 91       	pop	r22
    33a2:	31 97       	sbiw	r30, 0x01	; 1
    33a4:	c9 f7       	brne	.-14     	; 0x3398 <_ZN12OrangutanLCD4sendEhhh+0x7e>
    33a6:	2a 98       	cbi	0x05, 2	; 5
    33a8:	6f 93       	push	r22
    33aa:	64 e0       	ldi	r22, 0x04	; 4
    33ac:	6a 95       	dec	r22
    33ae:	f1 f7       	brne	.-4      	; 0x33ac <_ZN12OrangutanLCD4sendEhhh+0x92>
    33b0:	6f 91       	pop	r22
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	c9 f7       	brne	.-14     	; 0x33a8 <_ZN12OrangutanLCD4sendEhhh+0x8e>
    33b6:	37 b9       	out	0x07, r19	; 7
    33b8:	28 b9       	out	0x08, r18	; 8
    33ba:	1f 91       	pop	r17
    33bc:	0f 91       	pop	r16
    33be:	ff 90       	pop	r15
    33c0:	08 95       	ret

000033c2 <_ZN12OrangutanLCD8send_cmdEh>:
    33c2:	60 e0       	ldi	r22, 0x00	; 0
    33c4:	42 e0       	ldi	r20, 0x02	; 2
    33c6:	0e 94 8d 19 	call	0x331a	; 0x331a <_ZN12OrangutanLCD4sendEhhh>
    33ca:	08 95       	ret

000033cc <_ZN12OrangutanLCD10moveCursorEhh>:
    33cc:	0f 93       	push	r16
    33ce:	1f 93       	push	r17
    33d0:	08 2f       	mov	r16, r24
    33d2:	16 2f       	mov	r17, r22
    33d4:	08 c0       	rjmp	.+16     	; 0x33e6 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    33d6:	00 23       	and	r16, r16
    33d8:	11 f4       	brne	.+4      	; 0x33de <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    33da:	80 e1       	ldi	r24, 0x10	; 16
    33dc:	01 c0       	rjmp	.+2      	; 0x33e0 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    33de:	84 e1       	ldi	r24, 0x14	; 20
    33e0:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN12OrangutanLCD8send_cmdEh>
    33e4:	11 50       	subi	r17, 0x01	; 1
    33e6:	11 23       	and	r17, r17
    33e8:	b1 f7       	brne	.-20     	; 0x33d6 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    33ea:	1f 91       	pop	r17
    33ec:	0f 91       	pop	r16
    33ee:	08 95       	ret

000033f0 <lcd_move_cursor>:
    33f0:	0e 94 e6 19 	call	0x33cc	; 0x33cc <_ZN12OrangutanLCD10moveCursorEhh>
    33f4:	08 95       	ret

000033f6 <_ZN12OrangutanLCD10hideCursorEv>:
    33f6:	8c e0       	ldi	r24, 0x0C	; 12
    33f8:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN12OrangutanLCD8send_cmdEh>
    33fc:	08 95       	ret

000033fe <lcd_hide_cursor>:
    33fe:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <_ZN12OrangutanLCD10hideCursorEv>
    3402:	08 95       	ret

00003404 <_ZN12OrangutanLCD10showCursorEh>:
    3404:	81 30       	cpi	r24, 0x01	; 1
    3406:	11 f4       	brne	.+4      	; 0x340c <_ZN12OrangutanLCD10showCursorEh+0x8>
    3408:	8f e0       	ldi	r24, 0x0F	; 15
    340a:	01 c0       	rjmp	.+2      	; 0x340e <_ZN12OrangutanLCD10showCursorEh+0xa>
    340c:	8e e0       	ldi	r24, 0x0E	; 14
    340e:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN12OrangutanLCD8send_cmdEh>
    3412:	08 95       	ret

00003414 <lcd_show_cursor>:
    3414:	0e 94 02 1a 	call	0x3404	; 0x3404 <_ZN12OrangutanLCD10showCursorEh>
    3418:	08 95       	ret

0000341a <_ZN12OrangutanLCD6gotoXYEhh>:
    341a:	a4 e0       	ldi	r26, 0x04	; 4
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	e3 e1       	ldi	r30, 0x13	; 19
    3420:	fa e1       	ldi	r31, 0x1A	; 26
    3422:	0c 94 21 1e 	jmp	0x3c42	; 0x3c42 <__prologue_saves__+0x1c>
    3426:	18 2f       	mov	r17, r24
    3428:	06 2f       	mov	r16, r22
    342a:	80 e8       	ldi	r24, 0x80	; 128
    342c:	89 83       	std	Y+1, r24	; 0x01
    342e:	80 ec       	ldi	r24, 0xC0	; 192
    3430:	8a 83       	std	Y+2, r24	; 0x02
    3432:	84 e9       	ldi	r24, 0x94	; 148
    3434:	8b 83       	std	Y+3, r24	; 0x03
    3436:	84 ed       	ldi	r24, 0xD4	; 212
    3438:	8c 83       	std	Y+4, r24	; 0x04
    343a:	fe 01       	movw	r30, r28
    343c:	e6 0f       	add	r30, r22
    343e:	f1 1d       	adc	r31, r1
    3440:	81 81       	ldd	r24, Z+1	; 0x01
    3442:	81 0f       	add	r24, r17
    3444:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN12OrangutanLCD8send_cmdEh>
    3448:	10 93 4b 03 	sts	0x034B, r17
    344c:	00 93 4a 03 	sts	0x034A, r16
    3450:	24 96       	adiw	r28, 0x04	; 4
    3452:	e4 e0       	ldi	r30, 0x04	; 4
    3454:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__epilogue_restores__+0x1c>

00003458 <lcd_goto_xy>:
    3458:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
    345c:	08 95       	ret

0000345e <_ZN12OrangutanLCD5clearEv>:
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN12OrangutanLCD8send_cmdEh>
    3464:	80 91 48 03 	lds	r24, 0x0348
    3468:	90 91 49 03 	lds	r25, 0x0349
    346c:	89 2b       	or	r24, r25
    346e:	19 f1       	breq	.+70     	; 0x34b6 <_ZN12OrangutanLCD5clearEv+0x58>
    3470:	60 e0       	ldi	r22, 0x00	; 0
    3472:	70 e2       	ldi	r23, 0x20	; 32
    3474:	08 c0       	rjmp	.+16     	; 0x3486 <_ZN12OrangutanLCD5clearEv+0x28>
    3476:	e0 91 48 03 	lds	r30, 0x0348
    347a:	f0 91 49 03 	lds	r31, 0x0349
    347e:	e4 0f       	add	r30, r20
    3480:	f5 1f       	adc	r31, r21
    3482:	70 83       	st	Z, r23
    3484:	6f 5f       	subi	r22, 0xFF	; 255
    3486:	46 2f       	mov	r20, r22
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	80 91 35 03 	lds	r24, 0x0335
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	01 97       	sbiw	r24, 0x01	; 1
    3492:	20 91 36 03 	lds	r18, 0x0336
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	fc 01       	movw	r30, r24
    349a:	e2 9f       	mul	r30, r18
    349c:	c0 01       	movw	r24, r0
    349e:	e3 9f       	mul	r30, r19
    34a0:	90 0d       	add	r25, r0
    34a2:	f2 9f       	mul	r31, r18
    34a4:	90 0d       	add	r25, r0
    34a6:	11 24       	eor	r1, r1
    34a8:	48 17       	cp	r20, r24
    34aa:	59 07       	cpc	r21, r25
    34ac:	24 f3       	brlt	.-56     	; 0x3476 <_ZN12OrangutanLCD5clearEv+0x18>
    34ae:	10 92 4b 03 	sts	0x034B, r1
    34b2:	10 92 4a 03 	sts	0x034A, r1
    34b6:	08 95       	ret

000034b8 <clear>:
    34b8:	0e 94 2f 1a 	call	0x345e	; 0x345e <_ZN12OrangutanLCD5clearEv>
    34bc:	08 95       	ret

000034be <_ZN12OrangutanLCD9send_dataEh>:
    34be:	61 e0       	ldi	r22, 0x01	; 1
    34c0:	42 e0       	ldi	r20, 0x02	; 2
    34c2:	0e 94 8d 19 	call	0x331a	; 0x331a <_ZN12OrangutanLCD4sendEhhh>
    34c6:	08 95       	ret

000034c8 <_ZN12OrangutanLCD11printBinaryEh>:
    34c8:	0f 93       	push	r16
    34ca:	1f 93       	push	r17
    34cc:	cf 93       	push	r28
    34ce:	df 93       	push	r29
    34d0:	00 e0       	ldi	r16, 0x00	; 0
    34d2:	10 e8       	ldi	r17, 0x80	; 128
    34d4:	c8 2f       	mov	r28, r24
    34d6:	d0 e0       	ldi	r29, 0x00	; 0
    34d8:	81 2f       	mov	r24, r17
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	8c 23       	and	r24, r28
    34de:	9d 23       	and	r25, r29
    34e0:	89 2b       	or	r24, r25
    34e2:	11 f0       	breq	.+4      	; 0x34e8 <_ZN12OrangutanLCD11printBinaryEh+0x20>
    34e4:	81 e3       	ldi	r24, 0x31	; 49
    34e6:	01 c0       	rjmp	.+2      	; 0x34ea <_ZN12OrangutanLCD11printBinaryEh+0x22>
    34e8:	80 e3       	ldi	r24, 0x30	; 48
    34ea:	0e 94 5f 1a 	call	0x34be	; 0x34be <_ZN12OrangutanLCD9send_dataEh>
    34ee:	0f 5f       	subi	r16, 0xFF	; 255
    34f0:	08 30       	cpi	r16, 0x08	; 8
    34f2:	11 f0       	breq	.+4      	; 0x34f8 <_ZN12OrangutanLCD11printBinaryEh+0x30>
    34f4:	16 95       	lsr	r17
    34f6:	f0 cf       	rjmp	.-32     	; 0x34d8 <_ZN12OrangutanLCD11printBinaryEh+0x10>
    34f8:	df 91       	pop	r29
    34fa:	cf 91       	pop	r28
    34fc:	1f 91       	pop	r17
    34fe:	0f 91       	pop	r16
    3500:	08 95       	ret

00003502 <print_binary>:
    3502:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <_ZN12OrangutanLCD11printBinaryEh>
    3506:	08 95       	ret

00003508 <_ZN12OrangutanLCD14printHexNibbleEh>:
    3508:	8a 30       	cpi	r24, 0x0A	; 10
    350a:	10 f4       	brcc	.+4      	; 0x3510 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    350c:	80 5d       	subi	r24, 0xD0	; 208
    350e:	01 c0       	rjmp	.+2      	; 0x3512 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    3510:	89 5c       	subi	r24, 0xC9	; 201
    3512:	0e 94 5f 1a 	call	0x34be	; 0x34be <_ZN12OrangutanLCD9send_dataEh>
    3516:	08 95       	ret

00003518 <_ZN12OrangutanLCD8printHexEh>:
    3518:	1f 93       	push	r17
    351a:	18 2f       	mov	r17, r24
    351c:	82 95       	swap	r24
    351e:	8f 70       	andi	r24, 0x0F	; 15
    3520:	0e 94 84 1a 	call	0x3508	; 0x3508 <_ZN12OrangutanLCD14printHexNibbleEh>
    3524:	81 2f       	mov	r24, r17
    3526:	8f 70       	andi	r24, 0x0F	; 15
    3528:	0e 94 84 1a 	call	0x3508	; 0x3508 <_ZN12OrangutanLCD14printHexNibbleEh>
    352c:	1f 91       	pop	r17
    352e:	08 95       	ret

00003530 <_ZN12OrangutanLCD8printHexEj>:
    3530:	1f 93       	push	r17
    3532:	18 2f       	mov	r17, r24
    3534:	89 2f       	mov	r24, r25
    3536:	0e 94 8c 1a 	call	0x3518	; 0x3518 <_ZN12OrangutanLCD8printHexEh>
    353a:	81 2f       	mov	r24, r17
    353c:	0e 94 8c 1a 	call	0x3518	; 0x3518 <_ZN12OrangutanLCD8printHexEh>
    3540:	1f 91       	pop	r17
    3542:	08 95       	ret

00003544 <print_hex>:
    3544:	0e 94 98 1a 	call	0x3530	; 0x3530 <_ZN12OrangutanLCD8printHexEj>
    3548:	08 95       	ret

0000354a <print_hex_byte>:
    354a:	0e 94 8c 1a 	call	0x3518	; 0x3518 <_ZN12OrangutanLCD8printHexEh>
    354e:	08 95       	ret

00003550 <_ZN12OrangutanLCD5printEm>:
    3550:	6f 92       	push	r6
    3552:	7f 92       	push	r7
    3554:	8f 92       	push	r8
    3556:	9f 92       	push	r9
    3558:	af 92       	push	r10
    355a:	bf 92       	push	r11
    355c:	cf 92       	push	r12
    355e:	df 92       	push	r13
    3560:	ff 92       	push	r15
    3562:	0f 93       	push	r16
    3564:	df 93       	push	r29
    3566:	cf 93       	push	r28
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
    356c:	2a 97       	sbiw	r28, 0x0a	; 10
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	de bf       	out	0x3e, r29	; 62
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	cd bf       	out	0x3d, r28	; 61
    3578:	5b 01       	movw	r10, r22
    357a:	6c 01       	movw	r12, r24
    357c:	0a e0       	ldi	r16, 0x0A	; 10
    357e:	3e 01       	movw	r6, r28
    3580:	08 94       	sec
    3582:	61 1c       	adc	r6, r1
    3584:	71 1c       	adc	r7, r1
    3586:	fa 2c       	mov	r15, r10
    3588:	c6 01       	movw	r24, r12
    358a:	b5 01       	movw	r22, r10
    358c:	2a e0       	ldi	r18, 0x0A	; 10
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	40 e0       	ldi	r20, 0x00	; 0
    3592:	50 e0       	ldi	r21, 0x00	; 0
    3594:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <__udivmodsi4>
    3598:	c9 01       	movw	r24, r18
    359a:	da 01       	movw	r26, r20
    359c:	5c 01       	movw	r10, r24
    359e:	6d 01       	movw	r12, r26
    35a0:	01 50       	subi	r16, 0x01	; 1
    35a2:	43 01       	movw	r8, r6
    35a4:	80 0e       	add	r8, r16
    35a6:	91 1c       	adc	r9, r1
    35a8:	80 e3       	ldi	r24, 0x30	; 48
    35aa:	f8 0e       	add	r15, r24
    35ac:	c6 01       	movw	r24, r12
    35ae:	b5 01       	movw	r22, r10
    35b0:	2a e0       	ldi	r18, 0x0A	; 10
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	40 e0       	ldi	r20, 0x00	; 0
    35b6:	50 e0       	ldi	r21, 0x00	; 0
    35b8:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__mulsi3>
    35bc:	f6 1a       	sub	r15, r22
    35be:	f4 01       	movw	r30, r8
    35c0:	f0 82       	st	Z, r15
    35c2:	a1 14       	cp	r10, r1
    35c4:	b1 04       	cpc	r11, r1
    35c6:	c1 04       	cpc	r12, r1
    35c8:	d1 04       	cpc	r13, r1
    35ca:	e9 f6       	brne	.-70     	; 0x3586 <_ZN12OrangutanLCD5printEm+0x36>
    35cc:	08 c0       	rjmp	.+16     	; 0x35de <_ZN12OrangutanLCD5printEm+0x8e>
    35ce:	f6 01       	movw	r30, r12
    35d0:	e0 0f       	add	r30, r16
    35d2:	f1 1d       	adc	r31, r1
    35d4:	80 81       	ld	r24, Z
    35d6:	0e 94 5f 1a 	call	0x34be	; 0x34be <_ZN12OrangutanLCD9send_dataEh>
    35da:	0f 5f       	subi	r16, 0xFF	; 255
    35dc:	04 c0       	rjmp	.+8      	; 0x35e6 <_ZN12OrangutanLCD5printEm+0x96>
    35de:	6e 01       	movw	r12, r28
    35e0:	08 94       	sec
    35e2:	c1 1c       	adc	r12, r1
    35e4:	d1 1c       	adc	r13, r1
    35e6:	0a 30       	cpi	r16, 0x0A	; 10
    35e8:	90 f3       	brcs	.-28     	; 0x35ce <_ZN12OrangutanLCD5printEm+0x7e>
    35ea:	2a 96       	adiw	r28, 0x0a	; 10
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	f8 94       	cli
    35f0:	de bf       	out	0x3e, r29	; 62
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	cd bf       	out	0x3d, r28	; 61
    35f6:	cf 91       	pop	r28
    35f8:	df 91       	pop	r29
    35fa:	0f 91       	pop	r16
    35fc:	ff 90       	pop	r15
    35fe:	df 90       	pop	r13
    3600:	cf 90       	pop	r12
    3602:	bf 90       	pop	r11
    3604:	af 90       	pop	r10
    3606:	9f 90       	pop	r9
    3608:	8f 90       	pop	r8
    360a:	7f 90       	pop	r7
    360c:	6f 90       	pop	r6
    360e:	08 95       	ret

00003610 <print_unsigned_long>:
    3610:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN12OrangutanLCD5printEm>
    3614:	08 95       	ret

00003616 <_ZN12OrangutanLCD5printEl>:
    3616:	ef 92       	push	r14
    3618:	ff 92       	push	r15
    361a:	0f 93       	push	r16
    361c:	1f 93       	push	r17
    361e:	7b 01       	movw	r14, r22
    3620:	8c 01       	movw	r16, r24
    3622:	97 ff       	sbrs	r25, 7
    3624:	0b c0       	rjmp	.+22     	; 0x363c <_ZN12OrangutanLCD5printEl+0x26>
    3626:	10 95       	com	r17
    3628:	00 95       	com	r16
    362a:	f0 94       	com	r15
    362c:	e0 94       	com	r14
    362e:	e1 1c       	adc	r14, r1
    3630:	f1 1c       	adc	r15, r1
    3632:	01 1d       	adc	r16, r1
    3634:	11 1d       	adc	r17, r1
    3636:	8d e2       	ldi	r24, 0x2D	; 45
    3638:	0e 94 5f 1a 	call	0x34be	; 0x34be <_ZN12OrangutanLCD9send_dataEh>
    363c:	c8 01       	movw	r24, r16
    363e:	b7 01       	movw	r22, r14
    3640:	0e 94 a8 1a 	call	0x3550	; 0x3550 <_ZN12OrangutanLCD5printEm>
    3644:	1f 91       	pop	r17
    3646:	0f 91       	pop	r16
    3648:	ff 90       	pop	r15
    364a:	ef 90       	pop	r14
    364c:	08 95       	ret

0000364e <print_long>:
    364e:	0e 94 0b 1b 	call	0x3616	; 0x3616 <_ZN12OrangutanLCD5printEl>
    3652:	08 95       	ret

00003654 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    3654:	cf 93       	push	r28
    3656:	df 93       	push	r29
    3658:	ec 01       	movw	r28, r24
    365a:	03 c0       	rjmp	.+6      	; 0x3662 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    365c:	0e 94 5f 1a 	call	0x34be	; 0x34be <_ZN12OrangutanLCD9send_dataEh>
    3660:	21 96       	adiw	r28, 0x01	; 1
    3662:	fe 01       	movw	r30, r28
    3664:	84 91       	lpm	r24, Z+
    3666:	88 23       	and	r24, r24
    3668:	c9 f7       	brne	.-14     	; 0x365c <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    366a:	df 91       	pop	r29
    366c:	cf 91       	pop	r28
    366e:	08 95       	ret

00003670 <print_from_program_space>:
    3670:	0e 94 2a 1b 	call	0x3654	; 0x3654 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    3674:	08 95       	ret

00003676 <_ZN12OrangutanLCD5printEPKc>:
    3676:	cf 93       	push	r28
    3678:	df 93       	push	r29
    367a:	ec 01       	movw	r28, r24
    367c:	03 c0       	rjmp	.+6      	; 0x3684 <_ZN12OrangutanLCD5printEPKc+0xe>
    367e:	21 96       	adiw	r28, 0x01	; 1
    3680:	0e 94 5f 1a 	call	0x34be	; 0x34be <_ZN12OrangutanLCD9send_dataEh>
    3684:	88 81       	ld	r24, Y
    3686:	88 23       	and	r24, r24
    3688:	d1 f7       	brne	.-12     	; 0x367e <_ZN12OrangutanLCD5printEPKc+0x8>
    368a:	df 91       	pop	r29
    368c:	cf 91       	pop	r28
    368e:	08 95       	ret

00003690 <print>:
    3690:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD5printEPKc>
    3694:	08 95       	ret

00003696 <_ZN12OrangutanLCD5printEc>:
    3696:	0e 94 5f 1a 	call	0x34be	; 0x34be <_ZN12OrangutanLCD9send_dataEh>
    369a:	08 95       	ret

0000369c <print_character>:
    369c:	0e 94 5f 1a 	call	0x34be	; 0x34be <_ZN12OrangutanLCD9send_dataEh>
    36a0:	08 95       	ret

000036a2 <lcd_putchar>:
    36a2:	a0 e0       	ldi	r26, 0x00	; 0
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	e7 e5       	ldi	r30, 0x57	; 87
    36a8:	fb e1       	ldi	r31, 0x1B	; 27
    36aa:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <__prologue_saves__+0x14>
    36ae:	e8 2e       	mov	r14, r24
    36b0:	80 91 48 03 	lds	r24, 0x0348
    36b4:	90 91 49 03 	lds	r25, 0x0349
    36b8:	89 2b       	or	r24, r25
    36ba:	09 f4       	brne	.+2      	; 0x36be <lcd_putchar+0x1c>
    36bc:	05 c1       	rjmp	.+522    	; 0x38c8 <lcd_putchar+0x226>
    36be:	2a e0       	ldi	r18, 0x0A	; 10
    36c0:	e2 16       	cp	r14, r18
    36c2:	09 f4       	brne	.+2      	; 0x36c6 <lcd_putchar+0x24>
    36c4:	46 c0       	rjmp	.+140    	; 0x3752 <lcd_putchar+0xb0>
    36c6:	38 e0       	ldi	r19, 0x08	; 8
    36c8:	e3 16       	cp	r14, r19
    36ca:	c9 f4       	brne	.+50     	; 0x36fe <lcd_putchar+0x5c>
    36cc:	80 91 4b 03 	lds	r24, 0x034B
    36d0:	81 50       	subi	r24, 0x01	; 1
    36d2:	80 93 4b 03 	sts	0x034B, r24
    36d6:	8f 3f       	cpi	r24, 0xFF	; 255
    36d8:	51 f4       	brne	.+20     	; 0x36ee <lcd_putchar+0x4c>
    36da:	80 91 4a 03 	lds	r24, 0x034A
    36de:	81 50       	subi	r24, 0x01	; 1
    36e0:	80 93 4a 03 	sts	0x034A, r24
    36e4:	80 91 36 03 	lds	r24, 0x0336
    36e8:	81 50       	subi	r24, 0x01	; 1
    36ea:	80 93 4b 03 	sts	0x034B, r24
    36ee:	80 91 4a 03 	lds	r24, 0x034A
    36f2:	8f 3f       	cpi	r24, 0xFF	; 255
    36f4:	09 f0       	breq	.+2      	; 0x36f8 <lcd_putchar+0x56>
    36f6:	e2 c0       	rjmp	.+452    	; 0x38bc <lcd_putchar+0x21a>
    36f8:	10 92 4a 03 	sts	0x034A, r1
    36fc:	dd c0       	rjmp	.+442    	; 0x38b8 <lcd_putchar+0x216>
    36fe:	8e 2d       	mov	r24, r14
    3700:	0e 94 5f 1a 	call	0x34be	; 0x34be <_ZN12OrangutanLCD9send_dataEh>
    3704:	20 91 4a 03 	lds	r18, 0x034A
    3708:	22 23       	and	r18, r18
    370a:	c9 f0       	breq	.+50     	; 0x373e <lcd_putchar+0x9c>
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	21 50       	subi	r18, 0x01	; 1
    3710:	30 40       	sbci	r19, 0x00	; 0
    3712:	80 91 36 03 	lds	r24, 0x0336
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	ac 01       	movw	r20, r24
    371a:	24 9f       	mul	r18, r20
    371c:	c0 01       	movw	r24, r0
    371e:	25 9f       	mul	r18, r21
    3720:	90 0d       	add	r25, r0
    3722:	34 9f       	mul	r19, r20
    3724:	90 0d       	add	r25, r0
    3726:	11 24       	eor	r1, r1
    3728:	20 91 4b 03 	lds	r18, 0x034B
    372c:	e0 91 48 03 	lds	r30, 0x0348
    3730:	f0 91 49 03 	lds	r31, 0x0349
    3734:	e8 0f       	add	r30, r24
    3736:	f9 1f       	adc	r31, r25
    3738:	e2 0f       	add	r30, r18
    373a:	f1 1d       	adc	r31, r1
    373c:	e0 82       	st	Z, r14
    373e:	80 91 4b 03 	lds	r24, 0x034B
    3742:	8f 5f       	subi	r24, 0xFF	; 255
    3744:	80 93 4b 03 	sts	0x034B, r24
    3748:	90 91 36 03 	lds	r25, 0x0336
    374c:	89 17       	cp	r24, r25
    374e:	09 f0       	breq	.+2      	; 0x3752 <lcd_putchar+0xb0>
    3750:	bb c0       	rjmp	.+374    	; 0x38c8 <lcd_putchar+0x226>
    3752:	40 91 4a 03 	lds	r20, 0x034A
    3756:	24 2f       	mov	r18, r20
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	80 91 35 03 	lds	r24, 0x0335
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	28 17       	cp	r18, r24
    3764:	39 07       	cpc	r19, r25
    3766:	09 f0       	breq	.+2      	; 0x376a <lcd_putchar+0xc8>
    3768:	a4 c0       	rjmp	.+328    	; 0x38b2 <lcd_putchar+0x210>
    376a:	c0 e0       	ldi	r28, 0x00	; 0
    376c:	d0 e0       	ldi	r29, 0x00	; 0
    376e:	44 c0       	rjmp	.+136    	; 0x37f8 <lcd_putchar+0x156>
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	6c 2f       	mov	r22, r28
    3774:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
    3778:	ff 24       	eor	r15, r15
    377a:	6e 01       	movw	r12, r28
    377c:	08 94       	sec
    377e:	c1 1c       	adc	r12, r1
    3780:	d1 1c       	adc	r13, r1
    3782:	35 c0       	rjmp	.+106    	; 0x37ee <lcd_putchar+0x14c>
    3784:	0f 2d       	mov	r16, r15
    3786:	10 e0       	ldi	r17, 0x00	; 0
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	9c 01       	movw	r18, r24
    378c:	c2 9f       	mul	r28, r18
    378e:	c0 01       	movw	r24, r0
    3790:	c3 9f       	mul	r28, r19
    3792:	90 0d       	add	r25, r0
    3794:	d2 9f       	mul	r29, r18
    3796:	90 0d       	add	r25, r0
    3798:	11 24       	eor	r1, r1
    379a:	e0 91 48 03 	lds	r30, 0x0348
    379e:	f0 91 49 03 	lds	r31, 0x0349
    37a2:	e0 0f       	add	r30, r16
    37a4:	f1 1f       	adc	r31, r17
    37a6:	e8 0f       	add	r30, r24
    37a8:	f9 1f       	adc	r31, r25
    37aa:	80 81       	ld	r24, Z
    37ac:	0e 94 5f 1a 	call	0x34be	; 0x34be <_ZN12OrangutanLCD9send_dataEh>
    37b0:	e0 91 48 03 	lds	r30, 0x0348
    37b4:	f0 91 49 03 	lds	r31, 0x0349
    37b8:	80 91 36 03 	lds	r24, 0x0336
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	c8 9f       	mul	r28, r24
    37c0:	d0 01       	movw	r26, r0
    37c2:	c9 9f       	mul	r28, r25
    37c4:	b0 0d       	add	r27, r0
    37c6:	d8 9f       	mul	r29, r24
    37c8:	b0 0d       	add	r27, r0
    37ca:	11 24       	eor	r1, r1
    37cc:	e0 0f       	add	r30, r16
    37ce:	f1 1f       	adc	r31, r17
    37d0:	ae 0f       	add	r26, r30
    37d2:	bf 1f       	adc	r27, r31
    37d4:	ac 01       	movw	r20, r24
    37d6:	c4 9e       	mul	r12, r20
    37d8:	c0 01       	movw	r24, r0
    37da:	c5 9e       	mul	r12, r21
    37dc:	90 0d       	add	r25, r0
    37de:	d4 9e       	mul	r13, r20
    37e0:	90 0d       	add	r25, r0
    37e2:	11 24       	eor	r1, r1
    37e4:	e8 0f       	add	r30, r24
    37e6:	f9 1f       	adc	r31, r25
    37e8:	80 81       	ld	r24, Z
    37ea:	8c 93       	st	X, r24
    37ec:	f3 94       	inc	r15
    37ee:	80 91 36 03 	lds	r24, 0x0336
    37f2:	f8 16       	cp	r15, r24
    37f4:	38 f2       	brcs	.-114    	; 0x3784 <lcd_putchar+0xe2>
    37f6:	e6 01       	movw	r28, r12
    37f8:	60 91 35 03 	lds	r22, 0x0335
    37fc:	86 2f       	mov	r24, r22
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	02 97       	sbiw	r24, 0x02	; 2
    3802:	c8 17       	cp	r28, r24
    3804:	d9 07       	cpc	r29, r25
    3806:	0c f4       	brge	.+2      	; 0x380a <lcd_putchar+0x168>
    3808:	b3 cf       	rjmp	.-154    	; 0x3770 <lcd_putchar+0xce>
    380a:	62 30       	cpi	r22, 0x02	; 2
    380c:	08 f4       	brcc	.+2      	; 0x3810 <lcd_putchar+0x16e>
    380e:	40 c0       	rjmp	.+128    	; 0x3890 <lcd_putchar+0x1ee>
    3810:	62 50       	subi	r22, 0x02	; 2
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
    3818:	ff 24       	eor	r15, r15
    381a:	40 e2       	ldi	r20, 0x20	; 32
    381c:	d4 2e       	mov	r13, r20
    381e:	34 c0       	rjmp	.+104    	; 0x3888 <lcd_putchar+0x1e6>
    3820:	0f 2d       	mov	r16, r15
    3822:	10 e0       	ldi	r17, 0x00	; 0
    3824:	80 91 35 03 	lds	r24, 0x0335
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	02 97       	sbiw	r24, 0x02	; 2
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	ac 01       	movw	r20, r24
    3830:	42 9f       	mul	r20, r18
    3832:	c0 01       	movw	r24, r0
    3834:	43 9f       	mul	r20, r19
    3836:	90 0d       	add	r25, r0
    3838:	52 9f       	mul	r21, r18
    383a:	90 0d       	add	r25, r0
    383c:	11 24       	eor	r1, r1
    383e:	e0 91 48 03 	lds	r30, 0x0348
    3842:	f0 91 49 03 	lds	r31, 0x0349
    3846:	e0 0f       	add	r30, r16
    3848:	f1 1f       	adc	r31, r17
    384a:	e8 0f       	add	r30, r24
    384c:	f9 1f       	adc	r31, r25
    384e:	80 81       	ld	r24, Z
    3850:	0e 94 5f 1a 	call	0x34be	; 0x34be <_ZN12OrangutanLCD9send_dataEh>
    3854:	20 91 35 03 	lds	r18, 0x0335
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	22 50       	subi	r18, 0x02	; 2
    385c:	30 40       	sbci	r19, 0x00	; 0
    385e:	80 91 36 03 	lds	r24, 0x0336
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	ac 01       	movw	r20, r24
    3866:	24 9f       	mul	r18, r20
    3868:	c0 01       	movw	r24, r0
    386a:	25 9f       	mul	r18, r21
    386c:	90 0d       	add	r25, r0
    386e:	34 9f       	mul	r19, r20
    3870:	90 0d       	add	r25, r0
    3872:	11 24       	eor	r1, r1
    3874:	e0 91 48 03 	lds	r30, 0x0348
    3878:	f0 91 49 03 	lds	r31, 0x0349
    387c:	e0 0f       	add	r30, r16
    387e:	f1 1f       	adc	r31, r17
    3880:	e8 0f       	add	r30, r24
    3882:	f9 1f       	adc	r31, r25
    3884:	d0 82       	st	Z, r13
    3886:	f3 94       	inc	r15
    3888:	20 91 36 03 	lds	r18, 0x0336
    388c:	f2 16       	cp	r15, r18
    388e:	40 f2       	brcs	.-112    	; 0x3820 <lcd_putchar+0x17e>
    3890:	60 91 35 03 	lds	r22, 0x0335
    3894:	61 50       	subi	r22, 0x01	; 1
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
    389c:	00 e0       	ldi	r16, 0x00	; 0
    389e:	04 c0       	rjmp	.+8      	; 0x38a8 <lcd_putchar+0x206>
    38a0:	80 e2       	ldi	r24, 0x20	; 32
    38a2:	0e 94 5f 1a 	call	0x34be	; 0x34be <_ZN12OrangutanLCD9send_dataEh>
    38a6:	0f 5f       	subi	r16, 0xFF	; 255
    38a8:	80 91 36 03 	lds	r24, 0x0336
    38ac:	08 17       	cp	r16, r24
    38ae:	c0 f3       	brcs	.-16     	; 0x38a0 <lcd_putchar+0x1fe>
    38b0:	03 c0       	rjmp	.+6      	; 0x38b8 <lcd_putchar+0x216>
    38b2:	4f 5f       	subi	r20, 0xFF	; 255
    38b4:	40 93 4a 03 	sts	0x034A, r20
    38b8:	10 92 4b 03 	sts	0x034B, r1
    38bc:	80 91 4b 03 	lds	r24, 0x034B
    38c0:	60 91 4a 03 	lds	r22, 0x034A
    38c4:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN12OrangutanLCD6gotoXYEhh>
    38c8:	2e 2d       	mov	r18, r14
    38ca:	33 27       	eor	r19, r19
    38cc:	27 fd       	sbrc	r18, 7
    38ce:	30 95       	com	r19
    38d0:	c9 01       	movw	r24, r18
    38d2:	cd b7       	in	r28, 0x3d	; 61
    38d4:	de b7       	in	r29, 0x3e	; 62
    38d6:	e8 e0       	ldi	r30, 0x08	; 8
    38d8:	0c 94 39 1e 	jmp	0x3c72	; 0x3c72 <__epilogue_restores__+0x14>

000038dc <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    38dc:	ef 92       	push	r14
    38de:	ff 92       	push	r15
    38e0:	0f 93       	push	r16
    38e2:	1f 93       	push	r17
    38e4:	cf 93       	push	r28
    38e6:	df 93       	push	r29
    38e8:	7c 01       	movw	r14, r24
    38ea:	06 2f       	mov	r16, r22
    38ec:	10 e0       	ldi	r17, 0x00	; 0
    38ee:	53 e0       	ldi	r21, 0x03	; 3
    38f0:	00 0f       	add	r16, r16
    38f2:	11 1f       	adc	r17, r17
    38f4:	5a 95       	dec	r21
    38f6:	e1 f7       	brne	.-8      	; 0x38f0 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    38f8:	c0 e0       	ldi	r28, 0x00	; 0
    38fa:	d0 e0       	ldi	r29, 0x00	; 0
    38fc:	9e 01       	movw	r18, r28
    38fe:	20 0f       	add	r18, r16
    3900:	82 2f       	mov	r24, r18
    3902:	80 64       	ori	r24, 0x40	; 64
    3904:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN12OrangutanLCD8send_cmdEh>
    3908:	f7 01       	movw	r30, r14
    390a:	ec 0f       	add	r30, r28
    390c:	fd 1f       	adc	r31, r29
    390e:	e4 91       	lpm	r30, Z+
    3910:	8e 2f       	mov	r24, r30
    3912:	0e 94 5f 1a 	call	0x34be	; 0x34be <_ZN12OrangutanLCD9send_dataEh>
    3916:	21 96       	adiw	r28, 0x01	; 1
    3918:	c8 30       	cpi	r28, 0x08	; 8
    391a:	d1 05       	cpc	r29, r1
    391c:	79 f7       	brne	.-34     	; 0x38fc <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    391e:	cd b7       	in	r28, 0x3d	; 61
    3920:	de b7       	in	r29, 0x3e	; 62
    3922:	e6 e0       	ldi	r30, 0x06	; 6
    3924:	0c 94 3b 1e 	jmp	0x3c76	; 0x3c76 <__epilogue_restores__+0x18>

00003928 <lcd_load_custom_character>:
    3928:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    392c:	08 95       	ret

0000392e <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    392e:	60 e0       	ldi	r22, 0x00	; 0
    3930:	41 e0       	ldi	r20, 0x01	; 1
    3932:	0e 94 8d 19 	call	0x331a	; 0x331a <_ZN12OrangutanLCD4sendEhhh>
    3936:	08 95       	ret

00003938 <_ZN12OrangutanLCD6scrollEhhj>:
    3938:	0f 93       	push	r16
    393a:	1f 93       	push	r17
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
    3940:	08 2f       	mov	r16, r24
    3942:	16 2f       	mov	r17, r22
    3944:	ea 01       	movw	r28, r20
    3946:	0b c0       	rjmp	.+22     	; 0x395e <_ZN12OrangutanLCD6scrollEhhj+0x26>
    3948:	00 23       	and	r16, r16
    394a:	11 f4       	brne	.+4      	; 0x3950 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    394c:	88 e1       	ldi	r24, 0x18	; 24
    394e:	01 c0       	rjmp	.+2      	; 0x3952 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    3950:	8c e1       	ldi	r24, 0x1C	; 28
    3952:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <_ZN12OrangutanLCD8send_cmdEh>
    3956:	ce 01       	movw	r24, r28
    3958:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <_ZN13OrangutanTime17delayMillisecondsEj>
    395c:	11 50       	subi	r17, 0x01	; 1
    395e:	11 23       	and	r17, r17
    3960:	99 f7       	brne	.-26     	; 0x3948 <_ZN12OrangutanLCD6scrollEhhj+0x10>
    3962:	df 91       	pop	r29
    3964:	cf 91       	pop	r28
    3966:	1f 91       	pop	r17
    3968:	0f 91       	pop	r16
    396a:	08 95       	ret

0000396c <lcd_scroll>:
    396c:	0e 94 9c 1c 	call	0x3938	; 0x3938 <_ZN12OrangutanLCD6scrollEhhj>
    3970:	08 95       	ret

00003972 <__vector_11>:
    3972:	2f 92       	push	r2
    3974:	8f 93       	push	r24
    3976:	9f 93       	push	r25
    3978:	2f b6       	in	r2, 0x3f	; 63
    397a:	80 91 52 03 	lds	r24, 0x0352
    397e:	90 91 53 03 	lds	r25, 0x0353
    3982:	01 96       	adiw	r24, 0x01	; 1
    3984:	80 93 52 03 	sts	0x0352, r24
    3988:	90 93 53 03 	sts	0x0353, r25
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	80 91 54 03 	lds	r24, 0x0354
    3992:	89 1f       	adc	r24, r25
    3994:	80 93 54 03 	sts	0x0354, r24
    3998:	90 91 5a 03 	lds	r25, 0x035A
    399c:	9c 5f       	subi	r25, 0xFC	; 252
    399e:	90 93 5a 03 	sts	0x035A, r25
    39a2:	80 91 59 03 	lds	r24, 0x0359
    39a6:	80 51       	subi	r24, 0x10	; 16
    39a8:	97 42       	sbci	r25, 0x27	; 39
    39aa:	c0 f0       	brcs	.+48     	; 0x39dc <end>
    39ac:	90 93 5a 03 	sts	0x035A, r25
    39b0:	80 93 59 03 	sts	0x0359, r24
    39b4:	80 91 55 03 	lds	r24, 0x0355
    39b8:	90 91 56 03 	lds	r25, 0x0356
    39bc:	01 96       	adiw	r24, 0x01	; 1
    39be:	80 93 55 03 	sts	0x0355, r24
    39c2:	90 93 56 03 	sts	0x0356, r25
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	80 91 57 03 	lds	r24, 0x0357
    39cc:	89 1f       	adc	r24, r25
    39ce:	80 93 57 03 	sts	0x0357, r24
    39d2:	80 91 58 03 	lds	r24, 0x0358
    39d6:	89 1f       	adc	r24, r25
    39d8:	80 93 58 03 	sts	0x0358, r24

000039dc <end>:
    39dc:	2f be       	out	0x3f, r2	; 63
    39de:	9f 91       	pop	r25
    39e0:	8f 91       	pop	r24
    39e2:	2f 90       	pop	r2
    39e4:	18 95       	reti

000039e6 <ticks_to_microseconds>:
    39e6:	6f 5f       	subi	r22, 0xFF	; 255
    39e8:	7f 4f       	sbci	r23, 0xFF	; 255
    39ea:	8f 4f       	sbci	r24, 0xFF	; 255
    39ec:	9f 4f       	sbci	r25, 0xFF	; 255
    39ee:	66 0f       	add	r22, r22
    39f0:	77 1f       	adc	r23, r23
    39f2:	88 1f       	adc	r24, r24
    39f4:	99 1f       	adc	r25, r25
    39f6:	25 e0       	ldi	r18, 0x05	; 5
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	40 e0       	ldi	r20, 0x00	; 0
    39fc:	50 e0       	ldi	r21, 0x00	; 0
    39fe:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <__udivmodsi4>
    3a02:	ca 01       	movw	r24, r20
    3a04:	b9 01       	movw	r22, r18
    3a06:	08 95       	ret

00003a08 <delay_ms>:
    3a08:	28 ee       	ldi	r18, 0xE8	; 232
    3a0a:	33 e0       	ldi	r19, 0x03	; 3
    3a0c:	09 c0       	rjmp	.+18     	; 0x3a20 <delay_ms+0x18>
    3a0e:	f9 01       	movw	r30, r18
    3a10:	6f 93       	push	r22
    3a12:	64 e0       	ldi	r22, 0x04	; 4
    3a14:	6a 95       	dec	r22
    3a16:	f1 f7       	brne	.-4      	; 0x3a14 <delay_ms+0xc>
    3a18:	6f 91       	pop	r22
    3a1a:	31 97       	sbiw	r30, 0x01	; 1
    3a1c:	c9 f7       	brne	.-14     	; 0x3a10 <delay_ms+0x8>
    3a1e:	01 97       	sbiw	r24, 0x01	; 1
    3a20:	00 97       	sbiw	r24, 0x00	; 0
    3a22:	a9 f7       	brne	.-22     	; 0x3a0e <delay_ms+0x6>
    3a24:	08 95       	ret

00003a26 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    3a26:	6f 5f       	subi	r22, 0xFF	; 255
    3a28:	7f 4f       	sbci	r23, 0xFF	; 255
    3a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    3a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a2e:	66 0f       	add	r22, r22
    3a30:	77 1f       	adc	r23, r23
    3a32:	88 1f       	adc	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	25 e0       	ldi	r18, 0x05	; 5
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e0       	ldi	r20, 0x00	; 0
    3a3c:	50 e0       	ldi	r21, 0x00	; 0
    3a3e:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <__udivmodsi4>
    3a42:	ca 01       	movw	r24, r20
    3a44:	b9 01       	movw	r22, r18
    3a46:	08 95       	ret

00003a48 <_ZN13OrangutanTime17delayMillisecondsEj>:
    3a48:	28 ee       	ldi	r18, 0xE8	; 232
    3a4a:	33 e0       	ldi	r19, 0x03	; 3
    3a4c:	09 c0       	rjmp	.+18     	; 0x3a60 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3a4e:	f9 01       	movw	r30, r18
    3a50:	6f 93       	push	r22
    3a52:	64 e0       	ldi	r22, 0x04	; 4
    3a54:	6a 95       	dec	r22
    3a56:	f1 f7       	brne	.-4      	; 0x3a54 <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3a58:	6f 91       	pop	r22
    3a5a:	31 97       	sbiw	r30, 0x01	; 1
    3a5c:	c9 f7       	brne	.-14     	; 0x3a50 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	00 97       	sbiw	r24, 0x00	; 0
    3a62:	a9 f7       	brne	.-22     	; 0x3a4e <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    3a64:	08 95       	ret

00003a66 <_ZN13OrangutanTime5init2Ev>:
    3a66:	a0 e7       	ldi	r26, 0x70	; 112
    3a68:	b0 e0       	ldi	r27, 0x00	; 0
    3a6a:	8c 91       	ld	r24, X
    3a6c:	8e 7f       	andi	r24, 0xFE	; 254
    3a6e:	8c 93       	st	X, r24
    3a70:	e0 eb       	ldi	r30, 0xB0	; 176
    3a72:	f0 e0       	ldi	r31, 0x00	; 0
    3a74:	80 81       	ld	r24, Z
    3a76:	83 60       	ori	r24, 0x03	; 3
    3a78:	80 83       	st	Z, r24
    3a7a:	e1 eb       	ldi	r30, 0xB1	; 177
    3a7c:	f0 e0       	ldi	r31, 0x00	; 0
    3a7e:	80 81       	ld	r24, Z
    3a80:	80 7f       	andi	r24, 0xF0	; 240
    3a82:	80 83       	st	Z, r24
    3a84:	80 81       	ld	r24, Z
    3a86:	82 60       	ori	r24, 0x02	; 2
    3a88:	80 83       	st	Z, r24
    3a8a:	b8 9a       	sbi	0x17, 0	; 23
    3a8c:	8c 91       	ld	r24, X
    3a8e:	81 60       	ori	r24, 0x01	; 1
    3a90:	8c 93       	st	X, r24
    3a92:	78 94       	sei
    3a94:	08 95       	ret

00003a96 <_ZN13OrangutanTime4initEv>:
    3a96:	80 91 5b 03 	lds	r24, 0x035B
    3a9a:	88 23       	and	r24, r24
    3a9c:	29 f4       	brne	.+10     	; 0x3aa8 <_ZN13OrangutanTime4initEv+0x12>
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	80 93 5b 03 	sts	0x035B, r24
    3aa4:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <_ZN13OrangutanTime5init2Ev>
    3aa8:	08 95       	ret

00003aaa <_ZN13OrangutanTime2msEv>:
    3aaa:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <_ZN13OrangutanTime4initEv>
    3aae:	e0 e7       	ldi	r30, 0x70	; 112
    3ab0:	f0 e0       	ldi	r31, 0x00	; 0
    3ab2:	80 81       	ld	r24, Z
    3ab4:	8e 7f       	andi	r24, 0xFE	; 254
    3ab6:	80 83       	st	Z, r24
    3ab8:	20 91 55 03 	lds	r18, 0x0355
    3abc:	30 91 56 03 	lds	r19, 0x0356
    3ac0:	40 91 57 03 	lds	r20, 0x0357
    3ac4:	50 91 58 03 	lds	r21, 0x0358
    3ac8:	80 81       	ld	r24, Z
    3aca:	81 60       	ori	r24, 0x01	; 1
    3acc:	80 83       	st	Z, r24
    3ace:	b9 01       	movw	r22, r18
    3ad0:	ca 01       	movw	r24, r20
    3ad2:	08 95       	ret

00003ad4 <get_ms>:
    3ad4:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <_ZN13OrangutanTime2msEv>
    3ad8:	08 95       	ret

00003ada <_ZN13OrangutanTime5ticksEv>:
    3ada:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <_ZN13OrangutanTime4initEv>
    3ade:	80 91 70 00 	lds	r24, 0x0070
    3ae2:	8e 7f       	andi	r24, 0xFE	; 254
    3ae4:	80 93 70 00 	sts	0x0070, r24
    3ae8:	60 91 b2 00 	lds	r22, 0x00B2
    3aec:	80 91 51 03 	lds	r24, 0x0351
    3af0:	90 91 52 03 	lds	r25, 0x0352
    3af4:	a0 91 53 03 	lds	r26, 0x0353
    3af8:	b0 91 54 03 	lds	r27, 0x0354
    3afc:	b8 99       	sbic	0x17, 0	; 23
    3afe:	05 c0       	rjmp	.+10     	; 0x3b0a <_ZN13OrangutanTime5ticksEv+0x30>
    3b00:	26 2f       	mov	r18, r22
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	40 e0       	ldi	r20, 0x00	; 0
    3b06:	50 e0       	ldi	r21, 0x00	; 0
    3b08:	11 c0       	rjmp	.+34     	; 0x3b2c <_ZN13OrangutanTime5ticksEv+0x52>
    3b0a:	80 91 b2 00 	lds	r24, 0x00B2
    3b0e:	20 91 51 03 	lds	r18, 0x0351
    3b12:	30 91 52 03 	lds	r19, 0x0352
    3b16:	40 91 53 03 	lds	r20, 0x0353
    3b1a:	50 91 54 03 	lds	r21, 0x0354
    3b1e:	20 50       	subi	r18, 0x00	; 0
    3b20:	3f 4f       	sbci	r19, 0xFF	; 255
    3b22:	4f 4f       	sbci	r20, 0xFF	; 255
    3b24:	5f 4f       	sbci	r21, 0xFF	; 255
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	a0 e0       	ldi	r26, 0x00	; 0
    3b2a:	b0 e0       	ldi	r27, 0x00	; 0
    3b2c:	28 2b       	or	r18, r24
    3b2e:	39 2b       	or	r19, r25
    3b30:	4a 2b       	or	r20, r26
    3b32:	5b 2b       	or	r21, r27
    3b34:	80 91 70 00 	lds	r24, 0x0070
    3b38:	81 60       	ori	r24, 0x01	; 1
    3b3a:	80 93 70 00 	sts	0x0070, r24
    3b3e:	b9 01       	movw	r22, r18
    3b40:	ca 01       	movw	r24, r20
    3b42:	08 95       	ret

00003b44 <get_ticks>:
    3b44:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <_ZN13OrangutanTime5ticksEv>
    3b48:	08 95       	ret

00003b4a <_ZN13OrangutanTime5resetEv>:
    3b4a:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <_ZN13OrangutanTime4initEv>
    3b4e:	e0 e7       	ldi	r30, 0x70	; 112
    3b50:	f0 e0       	ldi	r31, 0x00	; 0
    3b52:	80 81       	ld	r24, Z
    3b54:	8e 7f       	andi	r24, 0xFE	; 254
    3b56:	80 83       	st	Z, r24
    3b58:	10 92 55 03 	sts	0x0355, r1
    3b5c:	10 92 56 03 	sts	0x0356, r1
    3b60:	10 92 57 03 	sts	0x0357, r1
    3b64:	10 92 58 03 	sts	0x0358, r1
    3b68:	10 92 5a 03 	sts	0x035A, r1
    3b6c:	10 92 59 03 	sts	0x0359, r1
    3b70:	80 81       	ld	r24, Z
    3b72:	81 60       	ori	r24, 0x01	; 1
    3b74:	80 83       	st	Z, r24
    3b76:	08 95       	ret

00003b78 <time_reset>:
    3b78:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <_ZN13OrangutanTime5resetEv>
    3b7c:	08 95       	ret

00003b7e <__mulsi3>:
    3b7e:	62 9f       	mul	r22, r18
    3b80:	d0 01       	movw	r26, r0
    3b82:	73 9f       	mul	r23, r19
    3b84:	f0 01       	movw	r30, r0
    3b86:	82 9f       	mul	r24, r18
    3b88:	e0 0d       	add	r30, r0
    3b8a:	f1 1d       	adc	r31, r1
    3b8c:	64 9f       	mul	r22, r20
    3b8e:	e0 0d       	add	r30, r0
    3b90:	f1 1d       	adc	r31, r1
    3b92:	92 9f       	mul	r25, r18
    3b94:	f0 0d       	add	r31, r0
    3b96:	83 9f       	mul	r24, r19
    3b98:	f0 0d       	add	r31, r0
    3b9a:	74 9f       	mul	r23, r20
    3b9c:	f0 0d       	add	r31, r0
    3b9e:	65 9f       	mul	r22, r21
    3ba0:	f0 0d       	add	r31, r0
    3ba2:	99 27       	eor	r25, r25
    3ba4:	72 9f       	mul	r23, r18
    3ba6:	b0 0d       	add	r27, r0
    3ba8:	e1 1d       	adc	r30, r1
    3baa:	f9 1f       	adc	r31, r25
    3bac:	63 9f       	mul	r22, r19
    3bae:	b0 0d       	add	r27, r0
    3bb0:	e1 1d       	adc	r30, r1
    3bb2:	f9 1f       	adc	r31, r25
    3bb4:	bd 01       	movw	r22, r26
    3bb6:	cf 01       	movw	r24, r30
    3bb8:	11 24       	eor	r1, r1
    3bba:	08 95       	ret

00003bbc <__divmodhi4>:
    3bbc:	97 fb       	bst	r25, 7
    3bbe:	09 2e       	mov	r0, r25
    3bc0:	07 26       	eor	r0, r23
    3bc2:	0a d0       	rcall	.+20     	; 0x3bd8 <__divmodhi4_neg1>
    3bc4:	77 fd       	sbrc	r23, 7
    3bc6:	04 d0       	rcall	.+8      	; 0x3bd0 <__divmodhi4_neg2>
    3bc8:	65 d0       	rcall	.+202    	; 0x3c94 <__udivmodhi4>
    3bca:	06 d0       	rcall	.+12     	; 0x3bd8 <__divmodhi4_neg1>
    3bcc:	00 20       	and	r0, r0
    3bce:	1a f4       	brpl	.+6      	; 0x3bd6 <__divmodhi4_exit>

00003bd0 <__divmodhi4_neg2>:
    3bd0:	70 95       	com	r23
    3bd2:	61 95       	neg	r22
    3bd4:	7f 4f       	sbci	r23, 0xFF	; 255

00003bd6 <__divmodhi4_exit>:
    3bd6:	08 95       	ret

00003bd8 <__divmodhi4_neg1>:
    3bd8:	f6 f7       	brtc	.-4      	; 0x3bd6 <__divmodhi4_exit>
    3bda:	90 95       	com	r25
    3bdc:	81 95       	neg	r24
    3bde:	9f 4f       	sbci	r25, 0xFF	; 255
    3be0:	08 95       	ret

00003be2 <__udivmodsi4>:
    3be2:	a1 e2       	ldi	r26, 0x21	; 33
    3be4:	1a 2e       	mov	r1, r26
    3be6:	aa 1b       	sub	r26, r26
    3be8:	bb 1b       	sub	r27, r27
    3bea:	fd 01       	movw	r30, r26
    3bec:	0d c0       	rjmp	.+26     	; 0x3c08 <__udivmodsi4_ep>

00003bee <__udivmodsi4_loop>:
    3bee:	aa 1f       	adc	r26, r26
    3bf0:	bb 1f       	adc	r27, r27
    3bf2:	ee 1f       	adc	r30, r30
    3bf4:	ff 1f       	adc	r31, r31
    3bf6:	a2 17       	cp	r26, r18
    3bf8:	b3 07       	cpc	r27, r19
    3bfa:	e4 07       	cpc	r30, r20
    3bfc:	f5 07       	cpc	r31, r21
    3bfe:	20 f0       	brcs	.+8      	; 0x3c08 <__udivmodsi4_ep>
    3c00:	a2 1b       	sub	r26, r18
    3c02:	b3 0b       	sbc	r27, r19
    3c04:	e4 0b       	sbc	r30, r20
    3c06:	f5 0b       	sbc	r31, r21

00003c08 <__udivmodsi4_ep>:
    3c08:	66 1f       	adc	r22, r22
    3c0a:	77 1f       	adc	r23, r23
    3c0c:	88 1f       	adc	r24, r24
    3c0e:	99 1f       	adc	r25, r25
    3c10:	1a 94       	dec	r1
    3c12:	69 f7       	brne	.-38     	; 0x3bee <__udivmodsi4_loop>
    3c14:	60 95       	com	r22
    3c16:	70 95       	com	r23
    3c18:	80 95       	com	r24
    3c1a:	90 95       	com	r25
    3c1c:	9b 01       	movw	r18, r22
    3c1e:	ac 01       	movw	r20, r24
    3c20:	bd 01       	movw	r22, r26
    3c22:	cf 01       	movw	r24, r30
    3c24:	08 95       	ret

00003c26 <__prologue_saves__>:
    3c26:	2f 92       	push	r2
    3c28:	3f 92       	push	r3
    3c2a:	4f 92       	push	r4
    3c2c:	5f 92       	push	r5
    3c2e:	6f 92       	push	r6
    3c30:	7f 92       	push	r7
    3c32:	8f 92       	push	r8
    3c34:	9f 92       	push	r9
    3c36:	af 92       	push	r10
    3c38:	bf 92       	push	r11
    3c3a:	cf 92       	push	r12
    3c3c:	df 92       	push	r13
    3c3e:	ef 92       	push	r14
    3c40:	ff 92       	push	r15
    3c42:	0f 93       	push	r16
    3c44:	1f 93       	push	r17
    3c46:	cf 93       	push	r28
    3c48:	df 93       	push	r29
    3c4a:	cd b7       	in	r28, 0x3d	; 61
    3c4c:	de b7       	in	r29, 0x3e	; 62
    3c4e:	ca 1b       	sub	r28, r26
    3c50:	db 0b       	sbc	r29, r27
    3c52:	0f b6       	in	r0, 0x3f	; 63
    3c54:	f8 94       	cli
    3c56:	de bf       	out	0x3e, r29	; 62
    3c58:	0f be       	out	0x3f, r0	; 63
    3c5a:	cd bf       	out	0x3d, r28	; 61
    3c5c:	09 94       	ijmp

00003c5e <__epilogue_restores__>:
    3c5e:	2a 88       	ldd	r2, Y+18	; 0x12
    3c60:	39 88       	ldd	r3, Y+17	; 0x11
    3c62:	48 88       	ldd	r4, Y+16	; 0x10
    3c64:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c66:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c68:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c70:	b9 84       	ldd	r11, Y+9	; 0x09
    3c72:	c8 84       	ldd	r12, Y+8	; 0x08
    3c74:	df 80       	ldd	r13, Y+7	; 0x07
    3c76:	ee 80       	ldd	r14, Y+6	; 0x06
    3c78:	fd 80       	ldd	r15, Y+5	; 0x05
    3c7a:	0c 81       	ldd	r16, Y+4	; 0x04
    3c7c:	1b 81       	ldd	r17, Y+3	; 0x03
    3c7e:	aa 81       	ldd	r26, Y+2	; 0x02
    3c80:	b9 81       	ldd	r27, Y+1	; 0x01
    3c82:	ce 0f       	add	r28, r30
    3c84:	d1 1d       	adc	r29, r1
    3c86:	0f b6       	in	r0, 0x3f	; 63
    3c88:	f8 94       	cli
    3c8a:	de bf       	out	0x3e, r29	; 62
    3c8c:	0f be       	out	0x3f, r0	; 63
    3c8e:	cd bf       	out	0x3d, r28	; 61
    3c90:	ed 01       	movw	r28, r26
    3c92:	08 95       	ret

00003c94 <__udivmodhi4>:
    3c94:	aa 1b       	sub	r26, r26
    3c96:	bb 1b       	sub	r27, r27
    3c98:	51 e1       	ldi	r21, 0x11	; 17
    3c9a:	07 c0       	rjmp	.+14     	; 0x3caa <__udivmodhi4_ep>

00003c9c <__udivmodhi4_loop>:
    3c9c:	aa 1f       	adc	r26, r26
    3c9e:	bb 1f       	adc	r27, r27
    3ca0:	a6 17       	cp	r26, r22
    3ca2:	b7 07       	cpc	r27, r23
    3ca4:	10 f0       	brcs	.+4      	; 0x3caa <__udivmodhi4_ep>
    3ca6:	a6 1b       	sub	r26, r22
    3ca8:	b7 0b       	sbc	r27, r23

00003caa <__udivmodhi4_ep>:
    3caa:	88 1f       	adc	r24, r24
    3cac:	99 1f       	adc	r25, r25
    3cae:	5a 95       	dec	r21
    3cb0:	a9 f7       	brne	.-22     	; 0x3c9c <__udivmodhi4_loop>
    3cb2:	80 95       	com	r24
    3cb4:	90 95       	com	r25
    3cb6:	bc 01       	movw	r22, r24
    3cb8:	cd 01       	movw	r24, r26
    3cba:	08 95       	ret

00003cbc <malloc>:
    3cbc:	cf 93       	push	r28
    3cbe:	df 93       	push	r29
    3cc0:	bc 01       	movw	r22, r24
    3cc2:	82 30       	cpi	r24, 0x02	; 2
    3cc4:	91 05       	cpc	r25, r1
    3cc6:	10 f4       	brcc	.+4      	; 0x3ccc <malloc+0x10>
    3cc8:	62 e0       	ldi	r22, 0x02	; 2
    3cca:	70 e0       	ldi	r23, 0x00	; 0
    3ccc:	a0 91 5e 03 	lds	r26, 0x035E
    3cd0:	b0 91 5f 03 	lds	r27, 0x035F
    3cd4:	ed 01       	movw	r28, r26
    3cd6:	e0 e0       	ldi	r30, 0x00	; 0
    3cd8:	f0 e0       	ldi	r31, 0x00	; 0
    3cda:	40 e0       	ldi	r20, 0x00	; 0
    3cdc:	50 e0       	ldi	r21, 0x00	; 0
    3cde:	21 c0       	rjmp	.+66     	; 0x3d22 <malloc+0x66>
    3ce0:	88 81       	ld	r24, Y
    3ce2:	99 81       	ldd	r25, Y+1	; 0x01
    3ce4:	86 17       	cp	r24, r22
    3ce6:	97 07       	cpc	r25, r23
    3ce8:	69 f4       	brne	.+26     	; 0x3d04 <malloc+0x48>
    3cea:	8a 81       	ldd	r24, Y+2	; 0x02
    3cec:	9b 81       	ldd	r25, Y+3	; 0x03
    3cee:	30 97       	sbiw	r30, 0x00	; 0
    3cf0:	19 f0       	breq	.+6      	; 0x3cf8 <malloc+0x3c>
    3cf2:	93 83       	std	Z+3, r25	; 0x03
    3cf4:	82 83       	std	Z+2, r24	; 0x02
    3cf6:	04 c0       	rjmp	.+8      	; 0x3d00 <malloc+0x44>
    3cf8:	90 93 5f 03 	sts	0x035F, r25
    3cfc:	80 93 5e 03 	sts	0x035E, r24
    3d00:	fe 01       	movw	r30, r28
    3d02:	34 c0       	rjmp	.+104    	; 0x3d6c <malloc+0xb0>
    3d04:	68 17       	cp	r22, r24
    3d06:	79 07       	cpc	r23, r25
    3d08:	38 f4       	brcc	.+14     	; 0x3d18 <malloc+0x5c>
    3d0a:	41 15       	cp	r20, r1
    3d0c:	51 05       	cpc	r21, r1
    3d0e:	19 f0       	breq	.+6      	; 0x3d16 <malloc+0x5a>
    3d10:	84 17       	cp	r24, r20
    3d12:	95 07       	cpc	r25, r21
    3d14:	08 f4       	brcc	.+2      	; 0x3d18 <malloc+0x5c>
    3d16:	ac 01       	movw	r20, r24
    3d18:	fe 01       	movw	r30, r28
    3d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d1e:	9c 01       	movw	r18, r24
    3d20:	e9 01       	movw	r28, r18
    3d22:	20 97       	sbiw	r28, 0x00	; 0
    3d24:	e9 f6       	brne	.-70     	; 0x3ce0 <malloc+0x24>
    3d26:	41 15       	cp	r20, r1
    3d28:	51 05       	cpc	r21, r1
    3d2a:	a9 f1       	breq	.+106    	; 0x3d96 <malloc+0xda>
    3d2c:	ca 01       	movw	r24, r20
    3d2e:	86 1b       	sub	r24, r22
    3d30:	97 0b       	sbc	r25, r23
    3d32:	04 97       	sbiw	r24, 0x04	; 4
    3d34:	08 f4       	brcc	.+2      	; 0x3d38 <malloc+0x7c>
    3d36:	ba 01       	movw	r22, r20
    3d38:	e0 e0       	ldi	r30, 0x00	; 0
    3d3a:	f0 e0       	ldi	r31, 0x00	; 0
    3d3c:	2a c0       	rjmp	.+84     	; 0x3d92 <malloc+0xd6>
    3d3e:	8d 91       	ld	r24, X+
    3d40:	9c 91       	ld	r25, X
    3d42:	11 97       	sbiw	r26, 0x01	; 1
    3d44:	84 17       	cp	r24, r20
    3d46:	95 07       	cpc	r25, r21
    3d48:	f9 f4       	brne	.+62     	; 0x3d88 <malloc+0xcc>
    3d4a:	64 17       	cp	r22, r20
    3d4c:	75 07       	cpc	r23, r21
    3d4e:	81 f4       	brne	.+32     	; 0x3d70 <malloc+0xb4>
    3d50:	12 96       	adiw	r26, 0x02	; 2
    3d52:	8d 91       	ld	r24, X+
    3d54:	9c 91       	ld	r25, X
    3d56:	13 97       	sbiw	r26, 0x03	; 3
    3d58:	30 97       	sbiw	r30, 0x00	; 0
    3d5a:	19 f0       	breq	.+6      	; 0x3d62 <malloc+0xa6>
    3d5c:	93 83       	std	Z+3, r25	; 0x03
    3d5e:	82 83       	std	Z+2, r24	; 0x02
    3d60:	04 c0       	rjmp	.+8      	; 0x3d6a <malloc+0xae>
    3d62:	90 93 5f 03 	sts	0x035F, r25
    3d66:	80 93 5e 03 	sts	0x035E, r24
    3d6a:	fd 01       	movw	r30, r26
    3d6c:	32 96       	adiw	r30, 0x02	; 2
    3d6e:	4f c0       	rjmp	.+158    	; 0x3e0e <malloc+0x152>
    3d70:	ca 01       	movw	r24, r20
    3d72:	86 1b       	sub	r24, r22
    3d74:	97 0b       	sbc	r25, r23
    3d76:	fd 01       	movw	r30, r26
    3d78:	e8 0f       	add	r30, r24
    3d7a:	f9 1f       	adc	r31, r25
    3d7c:	61 93       	st	Z+, r22
    3d7e:	71 93       	st	Z+, r23
    3d80:	02 97       	sbiw	r24, 0x02	; 2
    3d82:	8d 93       	st	X+, r24
    3d84:	9c 93       	st	X, r25
    3d86:	43 c0       	rjmp	.+134    	; 0x3e0e <malloc+0x152>
    3d88:	fd 01       	movw	r30, r26
    3d8a:	82 81       	ldd	r24, Z+2	; 0x02
    3d8c:	93 81       	ldd	r25, Z+3	; 0x03
    3d8e:	9c 01       	movw	r18, r24
    3d90:	d9 01       	movw	r26, r18
    3d92:	10 97       	sbiw	r26, 0x00	; 0
    3d94:	a1 f6       	brne	.-88     	; 0x3d3e <malloc+0x82>
    3d96:	80 91 5c 03 	lds	r24, 0x035C
    3d9a:	90 91 5d 03 	lds	r25, 0x035D
    3d9e:	89 2b       	or	r24, r25
    3da0:	41 f4       	brne	.+16     	; 0x3db2 <malloc+0xf6>
    3da2:	80 91 39 03 	lds	r24, 0x0339
    3da6:	90 91 3a 03 	lds	r25, 0x033A
    3daa:	90 93 5d 03 	sts	0x035D, r25
    3dae:	80 93 5c 03 	sts	0x035C, r24
    3db2:	40 91 3b 03 	lds	r20, 0x033B
    3db6:	50 91 3c 03 	lds	r21, 0x033C
    3dba:	41 15       	cp	r20, r1
    3dbc:	51 05       	cpc	r21, r1
    3dbe:	41 f4       	brne	.+16     	; 0x3dd0 <malloc+0x114>
    3dc0:	4d b7       	in	r20, 0x3d	; 61
    3dc2:	5e b7       	in	r21, 0x3e	; 62
    3dc4:	80 91 37 03 	lds	r24, 0x0337
    3dc8:	90 91 38 03 	lds	r25, 0x0338
    3dcc:	48 1b       	sub	r20, r24
    3dce:	59 0b       	sbc	r21, r25
    3dd0:	20 91 5c 03 	lds	r18, 0x035C
    3dd4:	30 91 5d 03 	lds	r19, 0x035D
    3dd8:	24 17       	cp	r18, r20
    3dda:	35 07       	cpc	r19, r21
    3ddc:	b0 f4       	brcc	.+44     	; 0x3e0a <malloc+0x14e>
    3dde:	ca 01       	movw	r24, r20
    3de0:	82 1b       	sub	r24, r18
    3de2:	93 0b       	sbc	r25, r19
    3de4:	86 17       	cp	r24, r22
    3de6:	97 07       	cpc	r25, r23
    3de8:	80 f0       	brcs	.+32     	; 0x3e0a <malloc+0x14e>
    3dea:	ab 01       	movw	r20, r22
    3dec:	4e 5f       	subi	r20, 0xFE	; 254
    3dee:	5f 4f       	sbci	r21, 0xFF	; 255
    3df0:	84 17       	cp	r24, r20
    3df2:	95 07       	cpc	r25, r21
    3df4:	50 f0       	brcs	.+20     	; 0x3e0a <malloc+0x14e>
    3df6:	42 0f       	add	r20, r18
    3df8:	53 1f       	adc	r21, r19
    3dfa:	50 93 5d 03 	sts	0x035D, r21
    3dfe:	40 93 5c 03 	sts	0x035C, r20
    3e02:	f9 01       	movw	r30, r18
    3e04:	61 93       	st	Z+, r22
    3e06:	71 93       	st	Z+, r23
    3e08:	02 c0       	rjmp	.+4      	; 0x3e0e <malloc+0x152>
    3e0a:	e0 e0       	ldi	r30, 0x00	; 0
    3e0c:	f0 e0       	ldi	r31, 0x00	; 0
    3e0e:	cf 01       	movw	r24, r30
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	08 95       	ret

00003e16 <free>:
    3e16:	cf 93       	push	r28
    3e18:	df 93       	push	r29
    3e1a:	00 97       	sbiw	r24, 0x00	; 0
    3e1c:	09 f4       	brne	.+2      	; 0x3e20 <free+0xa>
    3e1e:	50 c0       	rjmp	.+160    	; 0x3ec0 <free+0xaa>
    3e20:	ec 01       	movw	r28, r24
    3e22:	22 97       	sbiw	r28, 0x02	; 2
    3e24:	1b 82       	std	Y+3, r1	; 0x03
    3e26:	1a 82       	std	Y+2, r1	; 0x02
    3e28:	a0 91 5e 03 	lds	r26, 0x035E
    3e2c:	b0 91 5f 03 	lds	r27, 0x035F
    3e30:	10 97       	sbiw	r26, 0x00	; 0
    3e32:	09 f1       	breq	.+66     	; 0x3e76 <free+0x60>
    3e34:	40 e0       	ldi	r20, 0x00	; 0
    3e36:	50 e0       	ldi	r21, 0x00	; 0
    3e38:	ac 17       	cp	r26, r28
    3e3a:	bd 07       	cpc	r27, r29
    3e3c:	08 f1       	brcs	.+66     	; 0x3e80 <free+0x6a>
    3e3e:	bb 83       	std	Y+3, r27	; 0x03
    3e40:	aa 83       	std	Y+2, r26	; 0x02
    3e42:	fe 01       	movw	r30, r28
    3e44:	21 91       	ld	r18, Z+
    3e46:	31 91       	ld	r19, Z+
    3e48:	e2 0f       	add	r30, r18
    3e4a:	f3 1f       	adc	r31, r19
    3e4c:	ae 17       	cp	r26, r30
    3e4e:	bf 07       	cpc	r27, r31
    3e50:	79 f4       	brne	.+30     	; 0x3e70 <free+0x5a>
    3e52:	8d 91       	ld	r24, X+
    3e54:	9c 91       	ld	r25, X
    3e56:	11 97       	sbiw	r26, 0x01	; 1
    3e58:	28 0f       	add	r18, r24
    3e5a:	39 1f       	adc	r19, r25
    3e5c:	2e 5f       	subi	r18, 0xFE	; 254
    3e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e60:	39 83       	std	Y+1, r19	; 0x01
    3e62:	28 83       	st	Y, r18
    3e64:	12 96       	adiw	r26, 0x02	; 2
    3e66:	8d 91       	ld	r24, X+
    3e68:	9c 91       	ld	r25, X
    3e6a:	13 97       	sbiw	r26, 0x03	; 3
    3e6c:	9b 83       	std	Y+3, r25	; 0x03
    3e6e:	8a 83       	std	Y+2, r24	; 0x02
    3e70:	41 15       	cp	r20, r1
    3e72:	51 05       	cpc	r21, r1
    3e74:	71 f4       	brne	.+28     	; 0x3e92 <free+0x7c>
    3e76:	d0 93 5f 03 	sts	0x035F, r29
    3e7a:	c0 93 5e 03 	sts	0x035E, r28
    3e7e:	20 c0       	rjmp	.+64     	; 0x3ec0 <free+0xaa>
    3e80:	12 96       	adiw	r26, 0x02	; 2
    3e82:	8d 91       	ld	r24, X+
    3e84:	9c 91       	ld	r25, X
    3e86:	13 97       	sbiw	r26, 0x03	; 3
    3e88:	ad 01       	movw	r20, r26
    3e8a:	00 97       	sbiw	r24, 0x00	; 0
    3e8c:	11 f0       	breq	.+4      	; 0x3e92 <free+0x7c>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	d3 cf       	rjmp	.-90     	; 0x3e38 <free+0x22>
    3e92:	fa 01       	movw	r30, r20
    3e94:	d3 83       	std	Z+3, r29	; 0x03
    3e96:	c2 83       	std	Z+2, r28	; 0x02
    3e98:	21 91       	ld	r18, Z+
    3e9a:	31 91       	ld	r19, Z+
    3e9c:	e2 0f       	add	r30, r18
    3e9e:	f3 1f       	adc	r31, r19
    3ea0:	ce 17       	cp	r28, r30
    3ea2:	df 07       	cpc	r29, r31
    3ea4:	69 f4       	brne	.+26     	; 0x3ec0 <free+0xaa>
    3ea6:	88 81       	ld	r24, Y
    3ea8:	99 81       	ldd	r25, Y+1	; 0x01
    3eaa:	28 0f       	add	r18, r24
    3eac:	39 1f       	adc	r19, r25
    3eae:	2e 5f       	subi	r18, 0xFE	; 254
    3eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb2:	fa 01       	movw	r30, r20
    3eb4:	31 83       	std	Z+1, r19	; 0x01
    3eb6:	20 83       	st	Z, r18
    3eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eba:	9b 81       	ldd	r25, Y+3	; 0x03
    3ebc:	93 83       	std	Z+3, r25	; 0x03
    3ebe:	82 83       	std	Z+2, r24	; 0x02
    3ec0:	df 91       	pop	r29
    3ec2:	cf 91       	pop	r28
    3ec4:	08 95       	ret

00003ec6 <fdevopen>:
    3ec6:	0f 93       	push	r16
    3ec8:	1f 93       	push	r17
    3eca:	cf 93       	push	r28
    3ecc:	df 93       	push	r29
    3ece:	8c 01       	movw	r16, r24
    3ed0:	eb 01       	movw	r28, r22
    3ed2:	00 97       	sbiw	r24, 0x00	; 0
    3ed4:	31 f4       	brne	.+12     	; 0x3ee2 <fdevopen+0x1c>
    3ed6:	61 15       	cp	r22, r1
    3ed8:	71 05       	cpc	r23, r1
    3eda:	19 f4       	brne	.+6      	; 0x3ee2 <fdevopen+0x1c>
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	38 c0       	rjmp	.+112    	; 0x3f52 <fdevopen+0x8c>
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	6e e0       	ldi	r22, 0x0E	; 14
    3ee8:	70 e0       	ldi	r23, 0x00	; 0
    3eea:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <calloc>
    3eee:	fc 01       	movw	r30, r24
    3ef0:	9c 01       	movw	r18, r24
    3ef2:	00 97       	sbiw	r24, 0x00	; 0
    3ef4:	71 f1       	breq	.+92     	; 0x3f52 <fdevopen+0x8c>
    3ef6:	80 e8       	ldi	r24, 0x80	; 128
    3ef8:	83 83       	std	Z+3, r24	; 0x03
    3efa:	20 97       	sbiw	r28, 0x00	; 0
    3efc:	71 f0       	breq	.+28     	; 0x3f1a <fdevopen+0x54>
    3efe:	d3 87       	std	Z+11, r29	; 0x0b
    3f00:	c2 87       	std	Z+10, r28	; 0x0a
    3f02:	81 e8       	ldi	r24, 0x81	; 129
    3f04:	83 83       	std	Z+3, r24	; 0x03
    3f06:	80 91 60 03 	lds	r24, 0x0360
    3f0a:	90 91 61 03 	lds	r25, 0x0361
    3f0e:	89 2b       	or	r24, r25
    3f10:	21 f4       	brne	.+8      	; 0x3f1a <fdevopen+0x54>
    3f12:	f0 93 61 03 	sts	0x0361, r31
    3f16:	e0 93 60 03 	sts	0x0360, r30
    3f1a:	01 15       	cp	r16, r1
    3f1c:	11 05       	cpc	r17, r1
    3f1e:	c9 f0       	breq	.+50     	; 0x3f52 <fdevopen+0x8c>
    3f20:	11 87       	std	Z+9, r17	; 0x09
    3f22:	00 87       	std	Z+8, r16	; 0x08
    3f24:	83 81       	ldd	r24, Z+3	; 0x03
    3f26:	82 60       	ori	r24, 0x02	; 2
    3f28:	83 83       	std	Z+3, r24	; 0x03
    3f2a:	80 91 62 03 	lds	r24, 0x0362
    3f2e:	90 91 63 03 	lds	r25, 0x0363
    3f32:	89 2b       	or	r24, r25
    3f34:	71 f4       	brne	.+28     	; 0x3f52 <fdevopen+0x8c>
    3f36:	f0 93 63 03 	sts	0x0363, r31
    3f3a:	e0 93 62 03 	sts	0x0362, r30
    3f3e:	80 91 64 03 	lds	r24, 0x0364
    3f42:	90 91 65 03 	lds	r25, 0x0365
    3f46:	89 2b       	or	r24, r25
    3f48:	21 f4       	brne	.+8      	; 0x3f52 <fdevopen+0x8c>
    3f4a:	f0 93 65 03 	sts	0x0365, r31
    3f4e:	e0 93 64 03 	sts	0x0364, r30
    3f52:	c9 01       	movw	r24, r18
    3f54:	df 91       	pop	r29
    3f56:	cf 91       	pop	r28
    3f58:	1f 91       	pop	r17
    3f5a:	0f 91       	pop	r16
    3f5c:	08 95       	ret

00003f5e <calloc>:
    3f5e:	0f 93       	push	r16
    3f60:	1f 93       	push	r17
    3f62:	cf 93       	push	r28
    3f64:	df 93       	push	r29
    3f66:	68 9f       	mul	r22, r24
    3f68:	80 01       	movw	r16, r0
    3f6a:	69 9f       	mul	r22, r25
    3f6c:	10 0d       	add	r17, r0
    3f6e:	78 9f       	mul	r23, r24
    3f70:	10 0d       	add	r17, r0
    3f72:	11 24       	eor	r1, r1
    3f74:	c8 01       	movw	r24, r16
    3f76:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <malloc>
    3f7a:	ec 01       	movw	r28, r24
    3f7c:	00 97       	sbiw	r24, 0x00	; 0
    3f7e:	29 f0       	breq	.+10     	; 0x3f8a <calloc+0x2c>
    3f80:	60 e0       	ldi	r22, 0x00	; 0
    3f82:	70 e0       	ldi	r23, 0x00	; 0
    3f84:	a8 01       	movw	r20, r16
    3f86:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <memset>
    3f8a:	ce 01       	movw	r24, r28
    3f8c:	df 91       	pop	r29
    3f8e:	cf 91       	pop	r28
    3f90:	1f 91       	pop	r17
    3f92:	0f 91       	pop	r16
    3f94:	08 95       	ret

00003f96 <memset>:
    3f96:	dc 01       	movw	r26, r24
    3f98:	01 c0       	rjmp	.+2      	; 0x3f9c <memset+0x6>
    3f9a:	6d 93       	st	X+, r22
    3f9c:	41 50       	subi	r20, 0x01	; 1
    3f9e:	50 40       	sbci	r21, 0x00	; 0
    3fa0:	e0 f7       	brcc	.-8      	; 0x3f9a <memset+0x4>
    3fa2:	08 95       	ret

00003fa4 <_exit>:
    3fa4:	f8 94       	cli

00003fa6 <__stop_program>:
    3fa6:	ff cf       	rjmp	.-2      	; 0x3fa6 <__stop_program>
