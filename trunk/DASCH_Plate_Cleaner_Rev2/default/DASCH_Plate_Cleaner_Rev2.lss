
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000226  00800100  000032c8  0000335c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800326  00800326  00003582  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  00003584  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002591  00000000  00000000  00005d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  000082d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001dc  00000000  00000000  00008315  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000012ac  00000000  00000000  000084f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003ec  00000000  00000000  0000979d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001917  00000000  00000000  00009b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  0000b4a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ce9  00000000  00000000  0000b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b23  00000000  00000000  0000c2c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  0000cdec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__vector_11>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      6c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      70:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      7c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      80:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      84:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      88:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      8c:	7a 08       	sbc	r7, r10
      8e:	9e 08       	sbc	r9, r14
      90:	bb 08       	sbc	r11, r11
      92:	c7 08       	sbc	r12, r7
      94:	cc 08       	sbc	r12, r12
      96:	d6 08       	sbc	r13, r6
      98:	e0 08       	sbc	r14, r0
      9a:	e5 08       	sbc	r14, r5
      9c:	ef 08       	sbc	r14, r15
      9e:	f5 08       	sbc	r15, r5
      a0:	fa 08       	sbc	r15, r10
      a2:	00 09       	sbc	r16, r0
      a4:	05 09       	sbc	r16, r5
      a6:	10 09       	sbc	r17, r0
      a8:	10 09       	sbc	r17, r0
      aa:	73 09       	sbc	r23, r3
      ac:	73 09       	sbc	r23, r3
      ae:	73 09       	sbc	r23, r3
      b0:	73 09       	sbc	r23, r3
      b2:	73 09       	sbc	r23, r3
      b4:	73 09       	sbc	r23, r3
      b6:	73 09       	sbc	r23, r3
      b8:	73 09       	sbc	r23, r3
      ba:	16 09       	sbc	r17, r6
      bc:	20 09       	sbc	r18, r0
      be:	25 09       	sbc	r18, r5
      c0:	2a 09       	sbc	r18, r10
      c2:	2f 09       	sbc	r18, r15
      c4:	35 09       	sbc	r19, r5
      c6:	3a 09       	sbc	r19, r10
      c8:	3a 09       	sbc	r19, r10
      ca:	45 09       	sbc	r20, r5
      cc:	4b 09       	sbc	r20, r11
      ce:	50 09       	sbc	r21, r0
      d0:	5c 09       	sbc	r21, r12
      d2:	61 09       	sbc	r22, r1
      d4:	cd 0b       	sbc	r28, r29
      d6:	f2 0b       	sbc	r31, r18
      d8:	0f 0c       	add	r0, r15
      da:	1b 0c       	add	r1, r11
      dc:	20 0c       	add	r2, r0
      de:	2a 0c       	add	r2, r10
      e0:	34 0c       	add	r3, r4
      e2:	d7 0c       	add	r13, r7
      e4:	d7 0c       	add	r13, r7
      e6:	d7 0c       	add	r13, r7
      e8:	d7 0c       	add	r13, r7
      ea:	d7 0c       	add	r13, r7
      ec:	d7 0c       	add	r13, r7
      ee:	d7 0c       	add	r13, r7
      f0:	d7 0c       	add	r13, r7
      f2:	39 0c       	add	r3, r9
      f4:	3f 0c       	add	r3, r15
      f6:	49 0c       	add	r4, r9
      f8:	4e 0c       	add	r4, r14
      fa:	58 0c       	add	r5, r8
      fc:	5d 0c       	add	r5, r13
      fe:	6c 0c       	add	r6, r12
     100:	6c 0c       	add	r6, r12
     102:	7b 0c       	add	r7, r11
     104:	85 0c       	add	r8, r5
     106:	8a 0c       	add	r8, r10
     108:	8f 0c       	add	r8, r15
     10a:	94 0c       	add	r9, r4
     10c:	9a 0c       	add	r9, r10
     10e:	9f 0c       	add	r9, r15
     110:	9f 0c       	add	r9, r15
     112:	aa 0c       	add	r10, r10
     114:	b0 0c       	add	r11, r0
     116:	b5 0c       	add	r11, r5
     118:	c1 0c       	add	r12, r1
     11a:	c6 0c       	add	r12, r6
     11c:	ab 0f       	add	r26, r27
     11e:	cf 0f       	add	r28, r31
     120:	ec 0f       	add	r30, r28
     122:	f8 0f       	add	r31, r24
     124:	fd 0f       	add	r31, r29
     126:	07 10       	cpse	r0, r7
     128:	11 10       	cpse	r1, r1
     12a:	16 10       	cpse	r1, r6
     12c:	20 10       	cpse	r2, r0
     12e:	26 10       	cpse	r2, r6
     130:	2b 10       	cpse	r2, r11
     132:	31 10       	cpse	r3, r1
     134:	36 10       	cpse	r3, r6
     136:	41 10       	cpse	r4, r1
     138:	41 10       	cpse	r4, r1
     13a:	47 10       	cpse	r4, r7
     13c:	4d 10       	cpse	r4, r13
     13e:	57 10       	cpse	r5, r7
     140:	5c 10       	cpse	r5, r12
     142:	66 10       	cpse	r6, r6
     144:	6b 10       	cpse	r6, r11
     146:	7a 10       	cpse	r7, r10
     148:	7a 10       	cpse	r7, r10
     14a:	89 10       	cpse	r8, r9
     14c:	93 10       	cpse	r9, r3
     14e:	98 10       	cpse	r9, r8
     150:	9d 10       	cpse	r9, r13
     152:	a2 10       	cpse	r10, r2
     154:	a8 10       	cpse	r10, r8
     156:	ad 10       	cpse	r10, r13
     158:	ad 10       	cpse	r10, r13
     15a:	b8 10       	cpse	r11, r8
     15c:	be 10       	cpse	r11, r14
     15e:	c3 10       	cpse	r12, r3
     160:	cf 10       	cpse	r12, r15
     162:	d4 10       	cpse	r13, r4
     164:	cc 03       	fmulsu	r20, r20
     166:	e5 03       	fmuls	r22, r21
     168:	f7 03       	fmuls	r23, r23
     16a:	10 04       	cpc	r1, r0
     16c:	24 04       	cpc	r2, r4
     16e:	37 04       	cpc	r3, r7
     170:	4b 04       	cpc	r4, r11
     172:	60 04       	cpc	r6, r0
     174:	74 04       	cpc	r7, r4
     176:	82 04       	cpc	r8, r2
     178:	88 04       	cpc	r8, r8
     17a:	96 04       	cpc	r9, r6
     17c:	9a 04       	cpc	r9, r10
     17e:	a8 04       	cpc	r10, r8
     180:	ac 04       	cpc	r10, r12
     182:	ba 04       	cpc	r11, r10
     184:	be 04       	cpc	r11, r14
     186:	cd 04       	cpc	r12, r13
     188:	d1 04       	cpc	r13, r1
     18a:	df 04       	cpc	r13, r15
     18c:	e2 04       	cpc	r14, r2
     18e:	f1 04       	cpc	r15, r1
     190:	f5 04       	cpc	r15, r5
     192:	14 05       	cpc	r17, r4
     194:	05 05       	cpc	r16, r5
     196:	18 05       	cpc	r17, r8
     198:	1c 05       	cpc	r17, r12
     19a:	2a 05       	cpc	r18, r10
     19c:	2d 05       	cpc	r18, r13
     19e:	3c 05       	cpc	r19, r12
     1a0:	40 05       	cpc	r20, r0
     1a2:	4e 05       	cpc	r20, r14
     1a4:	54 05       	cpc	r21, r4
     1a6:	68 05       	cpc	r22, r8
     1a8:	72 05       	cpc	r23, r2
     1aa:	88 05       	cpc	r24, r8
     1ac:	92 05       	cpc	r25, r2
     1ae:	a8 05       	cpc	r26, r8
     1b0:	b2 05       	cpc	r27, r2
     1b2:	c8 05       	cpc	r28, r8
     1b4:	d2 05       	cpc	r29, r2
     1b6:	e8 05       	cpc	r30, r8

000001b8 <__ctors_end>:
     1b8:	11 24       	eor	r1, r1
     1ba:	1f be       	out	0x3f, r1	; 63
     1bc:	cf ef       	ldi	r28, 0xFF	; 255
     1be:	d0 e4       	ldi	r29, 0x40	; 64
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	cd bf       	out	0x3d, r28	; 61

000001c4 <__do_copy_data>:
     1c4:	13 e0       	ldi	r17, 0x03	; 3
     1c6:	a0 e0       	ldi	r26, 0x00	; 0
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	e8 ec       	ldi	r30, 0xC8	; 200
     1cc:	f2 e3       	ldi	r31, 0x32	; 50
     1ce:	00 e0       	ldi	r16, 0x00	; 0
     1d0:	0b bf       	out	0x3b, r16	; 59
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x14>
     1d4:	07 90       	elpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	a6 32       	cpi	r26, 0x26	; 38
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0x10>

000001de <__do_clear_bss>:
     1de:	13 e0       	ldi	r17, 0x03	; 3
     1e0:	a6 e2       	ldi	r26, 0x26	; 38
     1e2:	b3 e0       	ldi	r27, 0x03	; 3
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	ae 34       	cpi	r26, 0x4E	; 78
     1ea:	b1 07       	cpc	r27, r17
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	0e 94 68 02 	call	0x4d0	; 0x4d0 <main>
     1f2:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <_ZN16OrangutanDigital11isInputHighEh>:


	// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
	// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
	// the pin.
	inline static unsigned char isInputHigh(unsigned char pin)
     1fa:	48 2f       	mov	r20, r24
		io->pinRegister = 0;
		io->portRegister = 0;
		io->ddrRegister = 0;
		io->bitmask = 0;

		if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     1fc:	88 30       	cpi	r24, 0x08	; 8
     1fe:	58 f4       	brcc	.+22     	; 0x216 <_ZN16OrangutanDigital11isInputHighEh+0x1c>
		{
			io->pinRegister = (unsigned char*)&PIND;
			io->portRegister = (unsigned char*)&PORTD;
			io->ddrRegister = (unsigned char*)&DDRD;
			io->bitmask = 1 << pin;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	02 c0       	rjmp	.+4      	; 0x20a <_ZN16OrangutanDigital11isInputHighEh+0x10>
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	4a 95       	dec	r20
     20c:	e2 f7       	brpl	.-8      	; 0x206 <_ZN16OrangutanDigital11isInputHighEh+0xc>
     20e:	98 2f       	mov	r25, r24
     210:	e9 e2       	ldi	r30, 0x29	; 41
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	36 c0       	rjmp	.+108    	; 0x282 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)

		else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     216:	80 31       	cpi	r24, 0x10	; 16
     218:	78 f4       	brcc	.+30     	; 0x238 <_ZN16OrangutanDigital11isInputHighEh+0x3e>
		{
			io->pinRegister = (unsigned char*)&PINB;
			io->portRegister = (unsigned char*)&PORTB;
			io->ddrRegister = (unsigned char*)&DDRB;
			io->bitmask = 1 << (pin - 8);
     21a:	28 2f       	mov	r18, r24
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	28 50       	subi	r18, 0x08	; 8
     220:	30 40       	sbci	r19, 0x00	; 0
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	02 c0       	rjmp	.+4      	; 0x22c <_ZN16OrangutanDigital11isInputHighEh+0x32>
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	2a 95       	dec	r18
     22e:	e2 f7       	brpl	.-8      	; 0x228 <_ZN16OrangutanDigital11isInputHighEh+0x2e>
     230:	98 2f       	mov	r25, r24
     232:	e3 e2       	ldi	r30, 0x23	; 35
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	25 c0       	rjmp	.+74     	; 0x282 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     238:	88 31       	cpi	r24, 0x18	; 24
     23a:	78 f4       	brcc	.+30     	; 0x25a <_ZN16OrangutanDigital11isInputHighEh+0x60>
		{
			io->pinRegister = (unsigned char*)&PINC;
			io->portRegister = (unsigned char*)&PORTC;
			io->ddrRegister = (unsigned char*)&DDRC;
			io->bitmask = 1 << (pin - 16);
     23c:	28 2f       	mov	r18, r24
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	20 51       	subi	r18, 0x10	; 16
     242:	30 40       	sbci	r19, 0x00	; 0
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	02 c0       	rjmp	.+4      	; 0x24e <_ZN16OrangutanDigital11isInputHighEh+0x54>
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	2a 95       	dec	r18
     250:	e2 f7       	brpl	.-8      	; 0x24a <_ZN16OrangutanDigital11isInputHighEh+0x50>
     252:	98 2f       	mov	r25, r24
     254:	e6 e2       	ldi	r30, 0x26	; 38
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	14 c0       	rjmp	.+40     	; 0x282 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     25a:	80 32       	cpi	r24, 0x20	; 32
     25c:	20 f0       	brcs	.+8      	; 0x266 <_ZN16OrangutanDigital11isInputHighEh+0x6c>
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	e0 e0       	ldi	r30, 0x00	; 0
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	0e c0       	rjmp	.+28     	; 0x282 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		{
			io->pinRegister = (unsigned char*)&PINA;
			io->portRegister = (unsigned char*)&PORTA;
			io->ddrRegister = (unsigned char*)&DDRA;
			io->bitmask = 1 << (31 - pin);
     266:	2f e1       	ldi	r18, 0x1F	; 31
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	28 1b       	sub	r18, r24
     26c:	31 09       	sbc	r19, r1
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	02 c0       	rjmp	.+4      	; 0x278 <_ZN16OrangutanDigital11isInputHighEh+0x7e>
     274:	88 0f       	add	r24, r24
     276:	99 1f       	adc	r25, r25
     278:	2a 95       	dec	r18
     27a:	e2 f7       	brpl	.-8      	; 0x274 <_ZN16OrangutanDigital11isInputHighEh+0x7a>
     27c:	98 2f       	mov	r25, r24
     27e:	e0 e2       	ldi	r30, 0x20	; 32
     280:	f0 e0       	ldi	r31, 0x00	; 0

	// low-level method for reading the value of the PIN register for an pin or set of pins
	// described by an IOStruct pointer.
	inline static unsigned char getInputValue(struct IOStruct* ioPin)
	{
		return *(ioPin->pinRegister) & ioPin->bitmask;
     282:	80 81       	ld	r24, Z
	inline static unsigned char isInputHigh(unsigned char pin)
	{
		struct IOStruct registers;
		getIORegisters(&registers, pin);
		return getInputValue(&registers);
	}
     284:	89 23       	and	r24, r25
     286:	08 95       	ret

00000288 <__cxa_guard_acquire>:

extern "C" int __cxa_guard_acquire(__guard *); 
extern "C" void __cxa_guard_release (__guard *); 
extern "C" void __cxa_guard_abort (__guard *); 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);}; 
     288:	fc 01       	movw	r30, r24
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	88 23       	and	r24, r24
     292:	11 f4       	brne	.+4      	; 0x298 <__cxa_guard_acquire+0x10>
     294:	21 e0       	ldi	r18, 0x01	; 1
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	c9 01       	movw	r24, r18
     29a:	08 95       	ret

0000029c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;}; 
     29c:	fc 01       	movw	r30, r24
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	80 83       	st	Z, r24
     2a2:	08 95       	ret

000002a4 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
     2a4:	08 95       	ret

000002a6 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void); 
void __cxa_pure_virtual(void) {}; 
     2a6:	08 95       	ret

000002a8 <_Z15button_debounceiPi>:
	}
	return 1;
}*/


bool button_debounce(int counter, int *pstateButton)
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	8c 01       	movw	r16, r24
     2b2:	eb 01       	movw	r28, r22
{
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && OrangutanDigital::isInputHigh(IO_D0)){
     2b4:	88 81       	ld	r24, Y
     2b6:	99 81       	ldd	r25, Y+1	; 0x01
     2b8:	89 2b       	or	r24, r25
     2ba:	69 f4       	brne	.+26     	; 0x2d6 <_Z15button_debounceiPi+0x2e>
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     2c2:	88 23       	and	r24, r24
     2c4:	41 f0       	breq	.+16     	; 0x2d6 <_Z15button_debounceiPi+0x2e>
		counterRefPush = counter;
     2c6:	10 93 2f 03 	sts	0x032F, r17
     2ca:	00 93 2e 03 	sts	0x032E, r16
		*pstateButton = PRESSED;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	99 83       	std	Y+1, r25	; 0x01
     2d4:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     2d6:	88 81       	ld	r24, Y
     2d8:	99 81       	ldd	r25, Y+1	; 0x01
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f9 f4       	brne	.+62     	; 0x31c <_Z15button_debounceiPi+0x74>
		if(counter - counterRefPush > 15){
     2de:	80 91 2e 03 	lds	r24, 0x032E
     2e2:	90 91 2f 03 	lds	r25, 0x032F
     2e6:	98 01       	movw	r18, r16
     2e8:	28 1b       	sub	r18, r24
     2ea:	39 0b       	sbc	r19, r25
     2ec:	20 31       	cpi	r18, 0x10	; 16
     2ee:	31 05       	cpc	r19, r1
     2f0:	74 f0       	brlt	.+28     	; 0x30e <_Z15button_debounceiPi+0x66>
			if(!OrangutanDigital::isInputHigh(IO_D0)){
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     2f8:	88 23       	and	r24, r24
     2fa:	81 f4       	brne	.+32     	; 0x31c <_Z15button_debounceiPi+0x74>
				counterRefRel = counter;
     2fc:	10 93 2d 03 	sts	0x032D, r17
     300:	00 93 2c 03 	sts	0x032C, r16
				*pstateButton = RELEASED;
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	99 83       	std	Y+1, r25	; 0x01
     30a:	88 83       	st	Y, r24
     30c:	07 c0       	rjmp	.+14     	; 0x31c <_Z15button_debounceiPi+0x74>
			}
		}
		else if(!OrangutanDigital::isInputHigh(IO_D0)){
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     314:	88 23       	and	r24, r24
     316:	11 f4       	brne	.+4      	; 0x31c <_Z15button_debounceiPi+0x74>
			*pstateButton = NONE;
     318:	19 82       	std	Y+1, r1	; 0x01
     31a:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     31c:	88 81       	ld	r24, Y
     31e:	99 81       	ldd	r25, Y+1	; 0x01
     320:	02 97       	sbiw	r24, 0x02	; 2
     322:	d9 f4       	brne	.+54     	; 0x35a <_Z15button_debounceiPi+0xb2>
		if(OrangutanDigital::isInputHigh(IO_D0)){
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     32a:	88 23       	and	r24, r24
     32c:	49 f0       	breq	.+18     	; 0x340 <_Z15button_debounceiPi+0x98>
			*pstateButton = PRESSED;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	99 83       	std	Y+1, r25	; 0x01
     334:	88 83       	st	Y, r24
			counterRefPush = counter;
     336:	10 93 2f 03 	sts	0x032F, r17
     33a:	00 93 2e 03 	sts	0x032E, r16
     33e:	0d c0       	rjmp	.+26     	; 0x35a <_Z15button_debounceiPi+0xb2>
		}
		else if(counter - counterRefRel > 15){
     340:	80 91 2c 03 	lds	r24, 0x032C
     344:	90 91 2d 03 	lds	r25, 0x032D
     348:	08 1b       	sub	r16, r24
     34a:	19 0b       	sbc	r17, r25
     34c:	00 31       	cpi	r16, 0x10	; 16
     34e:	11 05       	cpc	r17, r1
     350:	24 f0       	brlt	.+8      	; 0x35a <_Z15button_debounceiPi+0xb2>
			*pstateButton = NONE;
     352:	19 82       	std	Y+1, r1	; 0x01
     354:	18 82       	st	Y, r1
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	01 c0       	rjmp	.+2      	; 0x35c <_Z15button_debounceiPi+0xb4>
			return true;
     35a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	08 95       	ret

00000366 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>:
	OrangutanLCD::print("END");
	}
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor, int totallength1, int totallength2, int totallength3, int totallength4, int totallength5, int steplength1, int steplength2, int steplength3, int steplength4, int steplength5)
     366:	2f 92       	push	r2
     368:	3f 92       	push	r3
     36a:	4f 92       	push	r4
     36c:	5f 92       	push	r5
     36e:	6f 92       	push	r6
     370:	7f 92       	push	r7
     372:	8f 92       	push	r8
     374:	9f 92       	push	r9
     376:	af 92       	push	r10
     378:	bf 92       	push	r11
     37a:	cf 92       	push	r12
     37c:	df 92       	push	r13
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	df 93       	push	r29
     388:	cf 93       	push	r28
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	2c 01       	movw	r4, r24
     390:	1a 01       	movw	r2, r20
     392:	39 01       	movw	r6, r18
{
//motor and write
	if( ((counter - counterRef) % (totallength1) ) < (steplength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     394:	fc 01       	movw	r30, r24
     396:	e6 1b       	sub	r30, r22
     398:	f7 0b       	sbc	r31, r23
     39a:	cf 01       	movw	r24, r30
     39c:	b4 01       	movw	r22, r8
     39e:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__divmodhi4>
     3a2:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3a4:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3a6:	82 17       	cp	r24, r18
     3a8:	93 07       	cpc	r25, r19
     3aa:	34 f4       	brge	.+12     	; 0x3b8 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
     3ac:	67 28       	or	r6, r7
     3ae:	21 f0       	breq	.+8      	; 0x3b8 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     3b0:	80 91 26 03 	lds	r24, 0x0326
     3b4:	81 60       	ori	r24, 0x01	; 1
     3b6:	03 c0       	rjmp	.+6      	; 0x3be <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x58>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     3b8:	80 91 26 03 	lds	r24, 0x0326
     3bc:	8e 7f       	andi	r24, 0xFE	; 254
     3be:	80 93 26 03 	sts	0x0326, r24
	}
		if( ((counter - counterRef) % (totallength2) ) < (steplength2) && fixtureMotor)
     3c2:	cf 01       	movw	r24, r30
     3c4:	6d 89       	ldd	r22, Y+21	; 0x15
     3c6:	7e 89       	ldd	r23, Y+22	; 0x16
     3c8:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__divmodhi4>
     3cc:	2f 8d       	ldd	r18, Y+31	; 0x1f
     3ce:	38 a1       	ldd	r19, Y+32	; 0x20
     3d0:	82 17       	cp	r24, r18
     3d2:	93 07       	cpc	r25, r19
     3d4:	34 f4       	brge	.+12     	; 0x3e2 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
     3d6:	01 2b       	or	r16, r17
     3d8:	21 f0       	breq	.+8      	; 0x3e2 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     3da:	80 91 26 03 	lds	r24, 0x0326
     3de:	88 60       	ori	r24, 0x08	; 8
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x82>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     3e2:	80 91 26 03 	lds	r24, 0x0326
     3e6:	87 7f       	andi	r24, 0xF7	; 247
     3e8:	80 93 26 03 	sts	0x0326, r24
	}
	if( ((counter - counterRef) % (totallength3) ) < (steplength3) && brush1Motor)
     3ec:	cf 01       	movw	r24, r30
     3ee:	6f 89       	ldd	r22, Y+23	; 0x17
     3f0:	78 8d       	ldd	r23, Y+24	; 0x18
     3f2:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__divmodhi4>
     3f6:	29 a1       	ldd	r18, Y+33	; 0x21
     3f8:	3a a1       	ldd	r19, Y+34	; 0x22
     3fa:	82 17       	cp	r24, r18
     3fc:	93 07       	cpc	r25, r19
     3fe:	34 f4       	brge	.+12     	; 0x40c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
     400:	ef 28       	or	r14, r15
     402:	21 f0       	breq	.+8      	; 0x40c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     404:	80 91 26 03 	lds	r24, 0x0326
     408:	80 64       	ori	r24, 0x40	; 64
     40a:	03 c0       	rjmp	.+6      	; 0x412 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xac>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     40c:	80 91 26 03 	lds	r24, 0x0326
     410:	8f 7b       	andi	r24, 0xBF	; 191
     412:	80 93 26 03 	sts	0x0326, r24
	}

	if( ((counter - counterRef) % (totallength4) ) < (steplength4) && brush2Motor)
     416:	cf 01       	movw	r24, r30
     418:	69 8d       	ldd	r22, Y+25	; 0x19
     41a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     41c:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__divmodhi4>
     420:	2b a1       	ldd	r18, Y+35	; 0x23
     422:	3c a1       	ldd	r19, Y+36	; 0x24
     424:	82 17       	cp	r24, r18
     426:	93 07       	cpc	r25, r19
     428:	34 f4       	brge	.+12     	; 0x436 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
     42a:	cd 28       	or	r12, r13
     42c:	21 f0       	breq	.+8      	; 0x436 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     42e:	80 91 27 03 	lds	r24, 0x0327
     432:	82 60       	ori	r24, 0x02	; 2
     434:	03 c0       	rjmp	.+6      	; 0x43c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd6>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     436:	80 91 27 03 	lds	r24, 0x0327
     43a:	8d 7f       	andi	r24, 0xFD	; 253
     43c:	80 93 27 03 	sts	0x0327, r24
	}

	if( ((counter - counterRefFive) % (totallength5) ) < (steplength5) && paperTowelMotor)
     440:	c2 01       	movw	r24, r4
     442:	82 19       	sub	r24, r2
     444:	93 09       	sbc	r25, r3
     446:	6b 8d       	ldd	r22, Y+27	; 0x1b
     448:	7c 8d       	ldd	r23, Y+28	; 0x1c
     44a:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__divmodhi4>
     44e:	2d a1       	ldd	r18, Y+37	; 0x25
     450:	3e a1       	ldd	r19, Y+38	; 0x26
     452:	82 17       	cp	r24, r18
     454:	93 07       	cpc	r25, r19
     456:	34 f4       	brge	.+12     	; 0x464 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
     458:	ab 28       	or	r10, r11
     45a:	21 f0       	breq	.+8      	; 0x464 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     45c:	80 91 27 03 	lds	r24, 0x0327
     460:	80 61       	ori	r24, 0x10	; 16
     462:	03 c0       	rjmp	.+6      	; 0x46a <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x104>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     464:	80 91 27 03 	lds	r24, 0x0327
     468:	8f 7e       	andi	r24, 0xEF	; 239
     46a:	80 93 27 03 	sts	0x0327, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     46e:	80 e4       	ldi	r24, 0x40	; 64
     470:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
	i2c_write(0x2);									// write command byte
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     47a:	80 91 26 03 	lds	r24, 0x0326
     47e:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     482:	80 91 27 03 	lds	r24, 0x0327
     486:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
	i2c_stop();                            // set stop conditon = release bus
     48a:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z8i2c_stopv>

	i2c_start(I2C2+I2C_WRITE);
     48e:	82 e4       	ldi	r24, 0x42	; 66
     490:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
	i2c_write(0x2);
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
	i2c_write(u_outputByte0.outputByte0);
     49a:	80 91 28 03 	lds	r24, 0x0328
     49e:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
	i2c_write(u_outputByte1.outputByte1);
     4a2:	80 91 29 03 	lds	r24, 0x0329
     4a6:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
}
     4aa:	cf 91       	pop	r28
     4ac:	df 91       	pop	r29
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	df 90       	pop	r13
     4b8:	cf 90       	pop	r12
     4ba:	bf 90       	pop	r11
     4bc:	af 90       	pop	r10
     4be:	9f 90       	pop	r9
     4c0:	8f 90       	pop	r8
     4c2:	7f 90       	pop	r7
     4c4:	6f 90       	pop	r6
     4c6:	5f 90       	pop	r5
     4c8:	4f 90       	pop	r4
     4ca:	3f 90       	pop	r3
     4cc:	2f 90       	pop	r2
     4ce:	08 95       	ret

000004d0 <main>:
//int button_debounce(int counter, int *pcounterRefPush, int *pcounterRefRel, int *pstateButton);

bool button_debounce(int counter, int *pstateButton);


int main()   
     4d0:	2f 92       	push	r2
     4d2:	3f 92       	push	r3
     4d4:	4f 92       	push	r4
     4d6:	5f 92       	push	r5
     4d8:	6f 92       	push	r6
     4da:	7f 92       	push	r7
     4dc:	8f 92       	push	r8
     4de:	9f 92       	push	r9
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	df 93       	push	r29
     4f2:	cf 93       	push	r28
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	a0 97       	sbiw	r28, 0x20	; 32
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
	print35 = 1;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     504:	1a 82       	std	Y+2, r1	; 0x02
     506:	19 82       	std	Y+1, r1	; 0x01
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     508:	10 92 26 03 	sts	0x0326, r1
	u_motorByte1.motorByte1 = 0;  // initialize motorByte1
     50c:	10 92 27 03 	sts	0x0327, r1
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     510:	8f ef       	ldi	r24, 0xFF	; 255
     512:	80 93 28 03 	sts	0x0328, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
     516:	80 93 29 03 	sts	0x0329, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
     51a:	10 92 2a 03 	sts	0x032A, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
     51e:	10 92 2b 03 	sts	0x032B, r1
	
	OrangutanLCD::clear();
     522:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("BEGIN ");
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
// another C++ file.
inline unsigned long get_ms() { return OrangutanTime::ms(); }
inline unsigned long millis() { return OrangutanTime::ms(); }

inline void delay(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
inline void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
     52e:	88 ee       	ldi	r24, 0xE8	; 232
     530:	93 e0       	ldi	r25, 0x03	; 3
     532:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>
	
	delay_ms(1000);

    i2c_init();                                // init I2C interface
     536:	0e 94 6e 11 	call	0x22dc	; 0x22dc <_Z8i2c_initv>
	
    OrangutanLCD::print("INIT ");
     53a:	87 e0       	ldi	r24, 0x07	; 7
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
     542:	80 e4       	ldi	r24, 0x40	; 64
     544:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
     548:	c8 2e       	mov	r12, r24
	i2c_stop();
     54a:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z8i2c_stopv>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
     54e:	82 e4       	ldi	r24, 0x42	; 66
     550:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
     554:	08 2f       	mov	r16, r24
	i2c_stop();
     556:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z8i2c_stopv>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
     55a:	84 e4       	ldi	r24, 0x44	; 68
     55c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
     560:	e8 2e       	mov	r14, r24
	i2c_stop();
     562:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z8i2c_stopv>
    
	OrangutanLCD::clear();
     566:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("START ");
     56a:	8d e0       	ldi	r24, 0x0D	; 13
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
     572:	10 e0       	ldi	r17, 0x00	; 0
     574:	dd 24       	eor	r13, r13
     576:	0c 29       	or	r16, r12
     578:	1d 29       	or	r17, r13
     57a:	ff 24       	eor	r15, r15
     57c:	0e 29       	or	r16, r14
     57e:	1f 29       	or	r17, r15
     580:	01 2b       	or	r16, r17
     582:	61 f0       	breq	.+24     	; 0x59c <main+0xcc>
        /* failed to issue start condition(s), possibly no device found */
        
		OrangutanLCD::print("NAK ");
     584:	84 e1       	ldi	r24, 0x14	; 20
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
		i2c_stop();
     58c:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z8i2c_stopv>
		OrangutanLCD::print("STOP ");
     590:	89 e1       	ldi	r24, 0x19	; 25
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     598:	0c 94 4d 11 	jmp	0x229a	; 0x229a <main+0x1dca>
    }
	else {
		OrangutanLCD::print("ACK ");
     59c:	8f e1       	ldi	r24, 0x1F	; 31
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
        /* issuing start conditions ok, devices accessible */
		OrangutanLCD::print("BINIT ");
     5a4:	84 e2       	ldi	r24, 0x24	; 36
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
     5ac:	80 e4       	ldi	r24, 0x40	; 64
     5ae:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
		i2c_write(0x6);
     5b2:	86 e0       	ldi	r24, 0x06	; 6
     5b4:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
		i2c_write(0x0);
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
		i2c_write(0x0);
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
		i2c_stop();
     5c4:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z8i2c_stopv>
		
		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
     5c8:	82 e4       	ldi	r24, 0x42	; 66
     5ca:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
		i2c_write(0x6);
     5ce:	86 e0       	ldi	r24, 0x06	; 6
     5d0:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
		i2c_write(0x0);
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
		i2c_write(0x0);
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
		i2c_stop();
     5e0:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z8i2c_stopv>
     5e4:	88 ee       	ldi	r24, 0xE8	; 232
     5e6:	93 e0       	ldi	r25, 0x03	; 3
     5e8:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>
										//Registers default to input, so I2C3 is fine already


		delay_ms(1000);
		OrangutanLCD::clear();
     5ec:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN12OrangutanLCD5clearEv>


		if(OrangutanDigital::isInputHigh(IO_D3))							//Tests if the switch is set to Maintenance Mode
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     5f6:	88 23       	and	r24, r24
     5f8:	09 f4       	brne	.+2      	; 0x5fc <main+0x12c>
     5fa:	41 c3       	rjmp	.+1666   	; 0xc7e <main+0x7ae>
		{
			OrangutanLCD::print("MAINTENANCE");
     5fc:	8b e2       	ldi	r24, 0x2B	; 43
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     604:	88 ee       	ldi	r24, 0xE8	; 232
     606:	93 e0       	ldi	r25, 0x03	; 3
     608:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>
			
			//initialize
			int print = 0;
			int submode = -1;

			OrangutanLCD::clear();
     60c:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN12OrangutanLCD5clearEv>
			OrangutanLCD::print("SELECT MODE");
     610:	87 e3       	ldi	r24, 0x37	; 55
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     618:	ee 24       	eor	r14, r14
     61a:	ff 24       	eor	r15, r15
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = NONE;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     61c:	c7 01       	movw	r24, r14
     61e:	be 01       	movw	r22, r28
     620:	6f 5f       	subi	r22, 0xFF	; 255
     622:	7f 4f       	sbci	r23, 0xFF	; 255
     624:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPi>
     628:	18 2f       	mov	r17, r24
				counter++;
     62a:	08 94       	sec
     62c:	e1 1c       	adc	r14, r1
     62e:	f1 1c       	adc	r15, r1
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>

			OrangutanLCD::clear();
			OrangutanLCD::print("SELECT MODE");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
     638:	11 23       	and	r17, r17
     63a:	81 f3       	breq	.-32     	; 0x61c <main+0x14c>
				counter++;
				delay_ms(1);
			}
			buttonTriggered = false;
			counter = 0;
			OrangutanLCD::clear();
     63c:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN12OrangutanLCD5clearEv>
     640:	66 24       	eor	r6, r6
     642:	77 24       	eor	r7, r7
     644:	44 24       	eor	r4, r4
     646:	4a 94       	dec	r4
     648:	54 2c       	mov	r5, r4
     64a:	18 a2       	std	Y+32, r1	; 0x20
     64c:	1f 8e       	std	Y+31, r1	; 0x1f
     64e:	1e 8e       	std	Y+30, r1	; 0x1e
     650:	1d 8e       	std	Y+29, r1	; 0x1d
     652:	1c 8e       	std	Y+28, r1	; 0x1c
     654:	1b 8e       	std	Y+27, r1	; 0x1b
     656:	1a 8e       	std	Y+26, r1	; 0x1a
     658:	19 8e       	std	Y+25, r1	; 0x19
     65a:	18 8e       	std	Y+24, r1	; 0x18
     65c:	1f 8a       	std	Y+23, r1	; 0x17
     65e:	22 24       	eor	r2, r2
     660:	33 24       	eor	r3, r3
     662:	1c 82       	std	Y+4, r1	; 0x04
     664:	1b 82       	std	Y+3, r1	; 0x03
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     666:	84 e4       	ldi	r24, 0x44	; 68
     668:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     672:	85 e4       	ldi	r24, 0x45	; 69
     674:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     678:	0e 94 df 11 	call	0x23be	; 0x23be <_Z11i2c_readAckv>
     67c:	80 93 2a 03 	sts	0x032A, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     680:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_Z11i2c_readNakv>
     684:	80 93 2b 03 	sts	0x032B, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     688:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z8i2c_stopv>
						stateButton = 0;
					}
				}*/

				//User presses button for each state transition
				button = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     68c:	8b 81       	ldd	r24, Y+3	; 0x03
     68e:	9c 81       	ldd	r25, Y+4	; 0x04
     690:	be 01       	movw	r22, r28
     692:	6f 5f       	subi	r22, 0xFF	; 255
     694:	7f 4f       	sbci	r23, 0xFF	; 255
     696:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPi>
							Output only 	--     starts testing each output individually and ends after testing all outputs
							Motor only		--     starts testing each motor individually and ends after testing all motors
							All				--     starts testing each input, then output, then motor, and ends after testing each

				*/
				if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != 0){
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     6a0:	88 23       	and	r24, r24
     6a2:	c1 f4       	brne	.+48     	; 0x6d4 <main+0x204>
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     6aa:	88 23       	and	r24, r24
     6ac:	99 f4       	brne	.+38     	; 0x6d4 <main+0x204>
     6ae:	41 14       	cp	r4, r1
     6b0:	51 04       	cpc	r5, r1
     6b2:	81 f0       	breq	.+32     	; 0x6d4 <main+0x204>
					state = S0;
					submode = INPUT;
					OrangutanLCD::clear();
     6b4:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     6b8:	83 e4       	ldi	r24, 0x43	; 67
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	61 e0       	ldi	r22, 0x01	; 1
     6c4:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
     6c8:	66 24       	eor	r6, r6
     6ca:	77 24       	eor	r7, r7
     6cc:	44 24       	eor	r4, r4
     6ce:	55 24       	eor	r5, r5
     6d0:	22 24       	eor	r2, r2
     6d2:	33 24       	eor	r3, r3
					print = 0;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != 1){
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     6da:	88 23       	and	r24, r24
     6dc:	d9 f0       	breq	.+54     	; 0x714 <main+0x244>
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     6e4:	88 23       	and	r24, r24
     6e6:	b1 f4       	brne	.+44     	; 0x714 <main+0x244>
     6e8:	21 e0       	ldi	r18, 0x01	; 1
     6ea:	42 16       	cp	r4, r18
     6ec:	51 04       	cpc	r5, r1
     6ee:	91 f0       	breq	.+36     	; 0x714 <main+0x244>
					state = O0_ON;
					submode = OUTPUT;
					OrangutanLCD::clear();
     6f0:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("OUTPUTS");
     6f4:	8b e4       	ldi	r24, 0x4B	; 75
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	61 e0       	ldi	r22, 0x01	; 1
     700:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
     704:	66 24       	eor	r6, r6
     706:	77 24       	eor	r7, r7
     708:	11 e0       	ldi	r17, 0x01	; 1
     70a:	41 2e       	mov	r4, r17
     70c:	51 2c       	mov	r5, r1
     70e:	b8 e0       	ldi	r27, 0x08	; 8
     710:	2b 2e       	mov	r2, r27
     712:	31 2c       	mov	r3, r1
					print = 0;
				}
				if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != 2){
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     71a:	88 23       	and	r24, r24
     71c:	d9 f4       	brne	.+54     	; 0x754 <main+0x284>
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     724:	88 23       	and	r24, r24
     726:	b1 f0       	breq	.+44     	; 0x754 <main+0x284>
     728:	32 e0       	ldi	r19, 0x02	; 2
     72a:	43 16       	cp	r4, r19
     72c:	51 04       	cpc	r5, r1
     72e:	91 f0       	breq	.+36     	; 0x754 <main+0x284>
					state = M1_F;
					submode = MOTOR;
					OrangutanLCD::clear();
     730:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MOTORS ");
     734:	83 e5       	ldi	r24, 0x53	; 83
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	61 e0       	ldi	r22, 0x01	; 1
     740:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
     744:	66 24       	eor	r6, r6
     746:	77 24       	eor	r7, r7
     748:	a2 e0       	ldi	r26, 0x02	; 2
     74a:	4a 2e       	mov	r4, r26
     74c:	51 2c       	mov	r5, r1
     74e:	f0 e2       	ldi	r31, 0x20	; 32
     750:	2f 2e       	mov	r2, r31
     752:	31 2c       	mov	r3, r1
					print = 0;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != 3){
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     75a:	88 23       	and	r24, r24
     75c:	11 f4       	brne	.+4      	; 0x762 <main+0x292>
     75e:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <main+0x1dd6>
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     768:	88 23       	and	r24, r24
     76a:	11 f4       	brne	.+4      	; 0x770 <main+0x2a0>
     76c:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <main+0x1dd6>
     770:	83 e0       	ldi	r24, 0x03	; 3
     772:	48 16       	cp	r4, r24
     774:	51 04       	cpc	r5, r1
     776:	11 f4       	brne	.+4      	; 0x77c <main+0x2ac>
     778:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <main+0x1dd6>
					state = S0;
					submode = ALL;
					OrangutanLCD::clear();
     77c:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     780:	83 e4       	ldi	r24, 0x43	; 67
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
     790:	e3 e0       	ldi	r30, 0x03	; 3
     792:	4e 2e       	mov	r4, r30
     794:	51 2c       	mov	r5, r1
     796:	03 c0       	rjmp	.+6      	; 0x79e <main+0x2ce>
				}*/

				//state actions
				switch (state) {
					case S0:
						if(print == 0){
     798:	61 14       	cp	r6, r1
     79a:	71 04       	cpc	r7, r1
     79c:	39 f4       	brne	.+14     	; 0x7ac <main+0x2dc>
							OrangutanLCD::print("SENSOR 0");
     79e:	8b e5       	ldi	r24, 0x5B	; 91
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     7a6:	71 e0       	ldi	r23, 0x01	; 1
     7a8:	67 2e       	mov	r6, r23
     7aa:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     7ac:	8f e0       	ldi	r24, 0x0F	; 15
     7ae:	61 e0       	ldi	r22, 0x01	; 1
     7b0:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
	// position and will not span lines.
	static void print(unsigned long value);
	static void print(long value);
	static inline void print(unsigned int value)
	{
		print((unsigned long)value);
     7b4:	60 91 2a 03 	lds	r22, 0x032A
     7b8:	61 70       	andi	r22, 0x01	; 1
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN12OrangutanLCD5printEm>
     7c4:	22 24       	eor	r2, r2
     7c6:	33 24       	eor	r3, r3
     7c8:	0c c2       	rjmp	.+1048   	; 0xbe2 <main+0x712>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.plate);
						break;
					case S1:
						if(print == 0){
     7ca:	61 14       	cp	r6, r1
     7cc:	71 04       	cpc	r7, r1
     7ce:	39 f4       	brne	.+14     	; 0x7de <main+0x30e>
							OrangutanLCD::print("SENSOR 1");
     7d0:	84 e6       	ldi	r24, 0x64	; 100
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     7d8:	61 e0       	ldi	r22, 0x01	; 1
     7da:	66 2e       	mov	r6, r22
     7dc:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     7de:	8f e0       	ldi	r24, 0x0F	; 15
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
     7e6:	60 91 2a 03 	lds	r22, 0x032A
     7ea:	66 95       	lsr	r22
     7ec:	12 c0       	rjmp	.+36     	; 0x812 <main+0x342>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureLift);
						break;
					case S2:
						if(print == 0){
     7ee:	61 14       	cp	r6, r1
     7f0:	71 04       	cpc	r7, r1
     7f2:	39 f4       	brne	.+14     	; 0x802 <main+0x332>
							OrangutanLCD::print("SENSOR 2");
     7f4:	8d e6       	ldi	r24, 0x6D	; 109
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     7fc:	51 e0       	ldi	r21, 0x01	; 1
     7fe:	65 2e       	mov	r6, r21
     800:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     802:	8f e0       	ldi	r24, 0x0F	; 15
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
     80a:	60 91 2a 03 	lds	r22, 0x032A
     80e:	66 95       	lsr	r22
     810:	66 95       	lsr	r22
     812:	61 70       	andi	r22, 0x01	; 1
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN12OrangutanLCD5printEm>
     81e:	e1 c1       	rjmp	.+962    	; 0xbe2 <main+0x712>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureHome);
						break;
					case S3:
						if(print == 0){
     820:	61 14       	cp	r6, r1
     822:	71 04       	cpc	r7, r1
     824:	39 f4       	brne	.+14     	; 0x834 <main+0x364>
							OrangutanLCD::print("SENSOR 3");
     826:	86 e7       	ldi	r24, 0x76	; 118
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     82e:	41 e0       	ldi	r20, 0x01	; 1
     830:	64 2e       	mov	r6, r20
     832:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     834:	8f e0       	ldi	r24, 0x0F	; 15
     836:	61 e0       	ldi	r22, 0x01	; 1
     838:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
     83c:	60 91 2a 03 	lds	r22, 0x032A
     840:	66 95       	lsr	r22
     842:	66 95       	lsr	r22
     844:	66 95       	lsr	r22
     846:	e5 cf       	rjmp	.-54     	; 0x812 <main+0x342>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixturePlate);
						break;
					case S4:
						if(print == 0){
     848:	61 14       	cp	r6, r1
     84a:	71 04       	cpc	r7, r1
     84c:	39 f4       	brne	.+14     	; 0x85c <main+0x38c>
							OrangutanLCD::print("SENSOR 4");
     84e:	8f e7       	ldi	r24, 0x7F	; 127
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     856:	31 e0       	ldi	r19, 0x01	; 1
     858:	63 2e       	mov	r6, r19
     85a:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     85c:	8f e0       	ldi	r24, 0x0F	; 15
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
     864:	60 91 2a 03 	lds	r22, 0x032A
     868:	62 95       	swap	r22
     86a:	6f 70       	andi	r22, 0x0F	; 15
     86c:	d2 cf       	rjmp	.-92     	; 0x812 <main+0x342>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
						break;
					case S5:
						if(print == 0){
     86e:	61 14       	cp	r6, r1
     870:	71 04       	cpc	r7, r1
     872:	39 f4       	brne	.+14     	; 0x882 <main+0x3b2>
							OrangutanLCD::print("SENSOR 5");
     874:	88 e8       	ldi	r24, 0x88	; 136
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     87c:	21 e0       	ldi	r18, 0x01	; 1
     87e:	62 2e       	mov	r6, r18
     880:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     882:	8f e0       	ldi	r24, 0x0F	; 15
     884:	61 e0       	ldi	r22, 0x01	; 1
     886:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
     88a:	60 91 2a 03 	lds	r22, 0x032A
     88e:	62 95       	swap	r22
     890:	66 95       	lsr	r22
     892:	67 70       	andi	r22, 0x07	; 7
     894:	be cf       	rjmp	.-132    	; 0x812 <main+0x342>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
						break;
					case S6:
						if(print == 0){
     896:	61 14       	cp	r6, r1
     898:	71 04       	cpc	r7, r1
     89a:	39 f4       	brne	.+14     	; 0x8aa <main+0x3da>
							OrangutanLCD::print("SENSOR 6");
     89c:	81 e9       	ldi	r24, 0x91	; 145
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	69 2e       	mov	r6, r25
     8a8:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     8aa:	8f e0       	ldi	r24, 0x0F	; 15
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
     8b2:	60 91 2a 03 	lds	r22, 0x032A
     8b6:	62 95       	swap	r22
     8b8:	66 95       	lsr	r22
     8ba:	66 95       	lsr	r22
     8bc:	63 70       	andi	r22, 0x03	; 3
     8be:	a9 cf       	rjmp	.-174    	; 0x812 <main+0x342>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry1);
						break;
					case S7:
						if(print == 0){
     8c0:	61 14       	cp	r6, r1
     8c2:	71 04       	cpc	r7, r1
     8c4:	39 f4       	brne	.+14     	; 0x8d4 <main+0x404>
							OrangutanLCD::print("SENSOR 7");
     8c6:	8a e9       	ldi	r24, 0x9A	; 154
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	68 2e       	mov	r6, r24
     8d2:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     8d4:	8f e0       	ldi	r24, 0x0F	; 15
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
     8dc:	60 91 2a 03 	lds	r22, 0x032A
     8e0:	66 1f       	adc	r22, r22
     8e2:	66 27       	eor	r22, r22
     8e4:	66 1f       	adc	r22, r22
     8e6:	96 cf       	rjmp	.-212    	; 0x814 <main+0x344>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry2);
						break;
					case O0_ON:
						if(print == 0){
     8e8:	61 14       	cp	r6, r1
     8ea:	71 04       	cpc	r7, r1
     8ec:	39 f4       	brne	.+14     	; 0x8fc <main+0x42c>
							OrangutanLCD::print("AC POWER     ON ");
     8ee:	83 ea       	ldi	r24, 0xA3	; 163
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     8f6:	01 e0       	ldi	r16, 0x01	; 1
     8f8:	60 2e       	mov	r6, r16
     8fa:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
     8fc:	80 91 28 03 	lds	r24, 0x0328
     900:	8e 7f       	andi	r24, 0xFE	; 254
     902:	03 c0       	rjmp	.+6      	; 0x90a <main+0x43a>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
     904:	80 91 28 03 	lds	r24, 0x0328
     908:	81 60       	ori	r24, 0x01	; 1
     90a:	80 93 28 03 	sts	0x0328, r24
     90e:	69 c1       	rjmp	.+722    	; 0xbe2 <main+0x712>
						break;
					case O1_ON:
						if(print == 0){
     910:	61 14       	cp	r6, r1
     912:	71 04       	cpc	r7, r1
     914:	39 f4       	brne	.+14     	; 0x924 <main+0x454>
							OrangutanLCD::print("BLOWER       ON  ");
     916:	84 eb       	ldi	r24, 0xB4	; 180
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     91e:	11 e0       	ldi	r17, 0x01	; 1
     920:	61 2e       	mov	r6, r17
     922:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     924:	80 91 28 03 	lds	r24, 0x0328
     928:	8d 7f       	andi	r24, 0xFD	; 253
     92a:	ef cf       	rjmp	.-34     	; 0x90a <main+0x43a>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     92c:	80 91 28 03 	lds	r24, 0x0328
     930:	82 60       	ori	r24, 0x02	; 2
     932:	eb cf       	rjmp	.-42     	; 0x90a <main+0x43a>
						break;
					case O2_ON:
						if(print == 0){
     934:	61 14       	cp	r6, r1
     936:	71 04       	cpc	r7, r1
     938:	39 f4       	brne	.+14     	; 0x948 <main+0x478>
							OrangutanLCD::print("PLATE STOP   ON ");
     93a:	86 ec       	ldi	r24, 0xC6	; 198
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     942:	b1 e0       	ldi	r27, 0x01	; 1
     944:	6b 2e       	mov	r6, r27
     946:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
     948:	80 91 28 03 	lds	r24, 0x0328
     94c:	8b 7f       	andi	r24, 0xFB	; 251
     94e:	dd cf       	rjmp	.-70     	; 0x90a <main+0x43a>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
     950:	80 91 28 03 	lds	r24, 0x0328
     954:	84 60       	ori	r24, 0x04	; 4
     956:	d9 cf       	rjmp	.-78     	; 0x90a <main+0x43a>
						break;
					case O3_ON:
						if(print == 0){
     958:	61 14       	cp	r6, r1
     95a:	71 04       	cpc	r7, r1
     95c:	39 f4       	brne	.+14     	; 0x96c <main+0x49c>
							OrangutanLCD::print("PLATE RAISE  ON ");
     95e:	87 ed       	ldi	r24, 0xD7	; 215
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     966:	a1 e0       	ldi	r26, 0x01	; 1
     968:	6a 2e       	mov	r6, r26
     96a:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     96c:	80 91 28 03 	lds	r24, 0x0328
     970:	87 7f       	andi	r24, 0xF7	; 247
     972:	15 c0       	rjmp	.+42     	; 0x99e <main+0x4ce>
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     974:	80 91 28 03 	lds	r24, 0x0328
     978:	88 60       	ori	r24, 0x08	; 8
     97a:	c7 cf       	rjmp	.-114    	; 0x90a <main+0x43a>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(print == 0){
     97c:	61 14       	cp	r6, r1
     97e:	71 04       	cpc	r7, r1
     980:	39 f4       	brne	.+14     	; 0x990 <main+0x4c0>
							OrangutanLCD::print("PLATE LOWER  ON ");
     982:	88 ee       	ldi	r24, 0xE8	; 232
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     98a:	f1 e0       	ldi	r31, 0x01	; 1
     98c:	6f 2e       	mov	r6, r31
     98e:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     990:	80 91 28 03 	lds	r24, 0x0328
     994:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     996:	8f 7e       	andi	r24, 0xEF	; 239
     998:	b8 cf       	rjmp	.-144    	; 0x90a <main+0x43a>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     99a:	80 91 28 03 	lds	r24, 0x0328
     99e:	80 61       	ori	r24, 0x10	; 16
     9a0:	b4 cf       	rjmp	.-152    	; 0x90a <main+0x43a>
						break;
					case O5_ON:
						if(print == 0){
     9a2:	61 14       	cp	r6, r1
     9a4:	71 04       	cpc	r7, r1
     9a6:	39 f4       	brne	.+14     	; 0x9b6 <main+0x4e6>
							OrangutanLCD::print("BRUSH1 RAISE ON ");
     9a8:	89 ef       	ldi	r24, 0xF9	; 249
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     9b0:	e1 e0       	ldi	r30, 0x01	; 1
     9b2:	6e 2e       	mov	r6, r30
     9b4:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     9b6:	80 91 28 03 	lds	r24, 0x0328
     9ba:	8f 7d       	andi	r24, 0xDF	; 223
     9bc:	14 c0       	rjmp	.+40     	; 0x9e6 <main+0x516>
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     9be:	80 91 28 03 	lds	r24, 0x0328
     9c2:	0d c0       	rjmp	.+26     	; 0x9de <main+0x50e>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(print == 0){
     9c4:	61 14       	cp	r6, r1
     9c6:	71 04       	cpc	r7, r1
     9c8:	39 f4       	brne	.+14     	; 0x9d8 <main+0x508>
							OrangutanLCD::print("BRUSH1 LOWER ON ");
     9ca:	8a e0       	ldi	r24, 0x0A	; 10
     9cc:	92 e0       	ldi	r25, 0x02	; 2
     9ce:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     9d2:	71 e0       	ldi	r23, 0x01	; 1
     9d4:	67 2e       	mov	r6, r23
     9d6:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     9d8:	80 91 28 03 	lds	r24, 0x0328
     9dc:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     9de:	80 62       	ori	r24, 0x20	; 32
     9e0:	94 cf       	rjmp	.-216    	; 0x90a <main+0x43a>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     9e2:	80 91 28 03 	lds	r24, 0x0328
     9e6:	80 64       	ori	r24, 0x40	; 64
     9e8:	90 cf       	rjmp	.-224    	; 0x90a <main+0x43a>
						break;
					case O7_ON:
						if(print == 0){
     9ea:	61 14       	cp	r6, r1
     9ec:	71 04       	cpc	r7, r1
     9ee:	39 f4       	brne	.+14     	; 0x9fe <main+0x52e>
							OrangutanLCD::print("BRUSH2 RAISE ON ");
     9f0:	8b e1       	ldi	r24, 0x1B	; 27
     9f2:	92 e0       	ldi	r25, 0x02	; 2
     9f4:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	66 2e       	mov	r6, r22
     9fc:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     9fe:	80 91 28 03 	lds	r24, 0x0328
     a02:	8f 77       	andi	r24, 0x7F	; 127
     a04:	80 93 28 03 	sts	0x0328, r24
     a08:	13 c0       	rjmp	.+38     	; 0xa30 <main+0x560>
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(print == 0){
     a0a:	61 14       	cp	r6, r1
     a0c:	71 04       	cpc	r7, r1
     a0e:	39 f4       	brne	.+14     	; 0xa1e <main+0x54e>
							OrangutanLCD::print("BRUSH2 LOWER ON ");
     a10:	8c e2       	ldi	r24, 0x2C	; 44
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     a18:	51 e0       	ldi	r21, 0x01	; 1
     a1a:	65 2e       	mov	r6, r21
     a1c:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     a1e:	80 91 29 03 	lds	r24, 0x0329
     a22:	8e 7f       	andi	r24, 0xFE	; 254
     a24:	80 93 29 03 	sts	0x0329, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     a28:	80 91 28 03 	lds	r24, 0x0328
     a2c:	80 68       	ori	r24, 0x80	; 128
     a2e:	6d cf       	rjmp	.-294    	; 0x90a <main+0x43a>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     a30:	80 91 29 03 	lds	r24, 0x0329
     a34:	81 60       	ori	r24, 0x01	; 1
     a36:	35 c0       	rjmp	.+106    	; 0xaa2 <main+0x5d2>
						break;
					case O9_ON:
						if(print == 0){
     a38:	61 14       	cp	r6, r1
     a3a:	71 04       	cpc	r7, r1
     a3c:	39 f4       	brne	.+14     	; 0xa4c <main+0x57c>
							OrangutanLCD::print("PAPER RAISE  ON ");
     a3e:	8d e3       	ldi	r24, 0x3D	; 61
     a40:	92 e0       	ldi	r25, 0x02	; 2
     a42:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     a46:	41 e0       	ldi	r20, 0x01	; 1
     a48:	64 2e       	mov	r6, r20
     a4a:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     a4c:	80 91 29 03 	lds	r24, 0x0329
     a50:	8d 7f       	andi	r24, 0xFD	; 253
     a52:	14 c0       	rjmp	.+40     	; 0xa7c <main+0x5ac>
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     a54:	80 91 29 03 	lds	r24, 0x0329
     a58:	0d c0       	rjmp	.+26     	; 0xa74 <main+0x5a4>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(print == 0){
     a5a:	61 14       	cp	r6, r1
     a5c:	71 04       	cpc	r7, r1
     a5e:	39 f4       	brne	.+14     	; 0xa6e <main+0x59e>
							OrangutanLCD::print("PAPER LOWER  ON ");
     a60:	8e e4       	ldi	r24, 0x4E	; 78
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     a68:	31 e0       	ldi	r19, 0x01	; 1
     a6a:	63 2e       	mov	r6, r19
     a6c:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
     a6e:	80 91 29 03 	lds	r24, 0x0329
     a72:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     a74:	82 60       	ori	r24, 0x02	; 2
     a76:	15 c0       	rjmp	.+42     	; 0xaa2 <main+0x5d2>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
     a78:	80 91 29 03 	lds	r24, 0x0329
     a7c:	84 60       	ori	r24, 0x04	; 4
     a7e:	11 c0       	rjmp	.+34     	; 0xaa2 <main+0x5d2>
						break;
					case O11_ON:
						if(print == 0){
     a80:	61 14       	cp	r6, r1
     a82:	71 04       	cpc	r7, r1
     a84:	39 f4       	brne	.+14     	; 0xa94 <main+0x5c4>
							OrangutanLCD::print("AIR KNIFE    ON ");
     a86:	8f e5       	ldi	r24, 0x5F	; 95
     a88:	92 e0       	ldi	r25, 0x02	; 2
     a8a:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     a8e:	21 e0       	ldi	r18, 0x01	; 1
     a90:	62 2e       	mov	r6, r18
     a92:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
     a94:	80 91 29 03 	lds	r24, 0x0329
     a98:	87 7f       	andi	r24, 0xF7	; 247
     a9a:	03 c0       	rjmp	.+6      	; 0xaa2 <main+0x5d2>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
     a9c:	80 91 29 03 	lds	r24, 0x0329
     aa0:	88 60       	ori	r24, 0x08	; 8
     aa2:	80 93 29 03 	sts	0x0329, r24
     aa6:	9d c0       	rjmp	.+314    	; 0xbe2 <main+0x712>
						break;
					case M1_F:
						if(print == 0){
     aa8:	61 14       	cp	r6, r1
     aaa:	71 04       	cpc	r7, r1
     aac:	39 f4       	brne	.+14     	; 0xabc <main+0x5ec>
							OrangutanLCD::print("LOADING    FRONT");
     aae:	80 e7       	ldi	r24, 0x70	; 112
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	69 2e       	mov	r6, r25
     aba:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     abc:	80 91 26 03 	lds	r24, 0x0326
     ac0:	8d 7f       	andi	r24, 0xFD	; 253
     ac2:	80 93 26 03 	sts	0x0326, r24
     ac6:	a1 e0       	ldi	r26, 0x01	; 1
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	b8 a3       	std	Y+32, r27	; 0x20
     acc:	af 8f       	std	Y+31, r26	; 0x1f
     ace:	89 c0       	rjmp	.+274    	; 0xbe2 <main+0x712>
						plateLoadMotor =  1;
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
     ad0:	80 91 26 03 	lds	r24, 0x0326
     ad4:	82 60       	ori	r24, 0x02	; 2
     ad6:	80 93 26 03 	sts	0x0326, r24
     ada:	21 e0       	ldi	r18, 0x01	; 1
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	38 a3       	std	Y+32, r19	; 0x20
     ae0:	2f 8f       	std	Y+31, r18	; 0x1f
     ae2:	7f c0       	rjmp	.+254    	; 0xbe2 <main+0x712>
						plateLoadMotor =  1;
						break;
					case M2_F:
						if(print == 0){
     ae4:	61 14       	cp	r6, r1
     ae6:	71 04       	cpc	r7, r1
     ae8:	39 f4       	brne	.+14     	; 0xaf8 <main+0x628>
							OrangutanLCD::print("DRIVE      FRONT");
     aea:	81 e8       	ldi	r24, 0x81	; 129
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	68 2e       	mov	r6, r24
     af6:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     af8:	80 91 26 03 	lds	r24, 0x0326
     afc:	8f 7e       	andi	r24, 0xEF	; 239
     afe:	80 93 26 03 	sts	0x0326, r24
     b02:	18 a2       	std	Y+32, r1	; 0x20
     b04:	1f 8e       	std	Y+31, r1	; 0x1f
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	9e 8f       	std	Y+30, r25	; 0x1e
     b0c:	8d 8f       	std	Y+29, r24	; 0x1d
     b0e:	69 c0       	rjmp	.+210    	; 0xbe2 <main+0x712>
						fixtureMotor =  1;
						plateLoadMotor = 0;
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     b10:	80 91 26 03 	lds	r24, 0x0326
     b14:	80 61       	ori	r24, 0x10	; 16
     b16:	80 93 26 03 	sts	0x0326, r24
     b1a:	a1 e0       	ldi	r26, 0x01	; 1
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	be 8f       	std	Y+30, r27	; 0x1e
     b20:	ad 8f       	std	Y+29, r26	; 0x1d
     b22:	5f c0       	rjmp	.+190    	; 0xbe2 <main+0x712>
						fixtureMotor =  1;
						break;
					case M3_F:
						if(print == 0){
     b24:	61 14       	cp	r6, r1
     b26:	71 04       	cpc	r7, r1
     b28:	39 f4       	brne	.+14     	; 0xb38 <main+0x668>
							OrangutanLCD::print("BRUSH1     FRONT");
     b2a:	82 e9       	ldi	r24, 0x92	; 146
     b2c:	92 e0       	ldi	r25, 0x02	; 2
     b2e:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     b32:	01 e0       	ldi	r16, 0x01	; 1
     b34:	60 2e       	mov	r6, r16
     b36:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
     b38:	80 91 26 03 	lds	r24, 0x0326
     b3c:	8f 77       	andi	r24, 0x7F	; 127
     b3e:	80 93 26 03 	sts	0x0326, r24
     b42:	1e 8e       	std	Y+30, r1	; 0x1e
     b44:	1d 8e       	std	Y+29, r1	; 0x1d
     b46:	21 e0       	ldi	r18, 0x01	; 1
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	3c 8f       	std	Y+28, r19	; 0x1c
     b4c:	2b 8f       	std	Y+27, r18	; 0x1b
     b4e:	49 c0       	rjmp	.+146    	; 0xbe2 <main+0x712>
						brush1Motor =  1;
						fixtureMotor = 0;
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
     b50:	80 91 26 03 	lds	r24, 0x0326
     b54:	80 68       	ori	r24, 0x80	; 128
     b56:	80 93 26 03 	sts	0x0326, r24
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	9c 8f       	std	Y+28, r25	; 0x1c
     b60:	8b 8f       	std	Y+27, r24	; 0x1b
     b62:	3f c0       	rjmp	.+126    	; 0xbe2 <main+0x712>
						brush1Motor =  1;
						break;
					case M4_F:
						if(print == 0){
     b64:	61 14       	cp	r6, r1
     b66:	71 04       	cpc	r7, r1
     b68:	39 f4       	brne	.+14     	; 0xb78 <main+0x6a8>
							OrangutanLCD::print("BRUSH2     FRONT");
     b6a:	83 ea       	ldi	r24, 0xA3	; 163
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     b72:	11 e0       	ldi	r17, 0x01	; 1
     b74:	61 2e       	mov	r6, r17
     b76:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
     b78:	80 91 27 03 	lds	r24, 0x0327
     b7c:	8b 7f       	andi	r24, 0xFB	; 251
     b7e:	80 93 27 03 	sts	0x0327, r24
     b82:	1c 8e       	std	Y+28, r1	; 0x1c
     b84:	1b 8e       	std	Y+27, r1	; 0x1b
     b86:	a1 e0       	ldi	r26, 0x01	; 1
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	ba 8f       	std	Y+26, r27	; 0x1a
     b8c:	a9 8f       	std	Y+25, r26	; 0x19
     b8e:	29 c0       	rjmp	.+82     	; 0xbe2 <main+0x712>
						brush2Motor =  1;
						brush1Motor = 0;
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
     b90:	80 91 27 03 	lds	r24, 0x0327
     b94:	84 60       	ori	r24, 0x04	; 4
     b96:	80 93 27 03 	sts	0x0327, r24
     b9a:	21 e0       	ldi	r18, 0x01	; 1
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	3a 8f       	std	Y+26, r19	; 0x1a
     ba0:	29 8f       	std	Y+25, r18	; 0x19
     ba2:	1f c0       	rjmp	.+62     	; 0xbe2 <main+0x712>
						brush2Motor =  1;
						break;
					case M5_F:
						if(print == 0){
     ba4:	61 14       	cp	r6, r1
     ba6:	71 04       	cpc	r7, r1
     ba8:	39 f4       	brne	.+14     	; 0xbb8 <main+0x6e8>
							OrangutanLCD::print("PAPER      FRONT");
     baa:	84 eb       	ldi	r24, 0xB4	; 180
     bac:	92 e0       	ldi	r25, 0x02	; 2
     bae:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     bb2:	b1 e0       	ldi	r27, 0x01	; 1
     bb4:	6b 2e       	mov	r6, r27
     bb6:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     bb8:	80 91 27 03 	lds	r24, 0x0327
     bbc:	8f 7d       	andi	r24, 0xDF	; 223
     bbe:	80 93 27 03 	sts	0x0327, r24
     bc2:	1a 8e       	std	Y+26, r1	; 0x1a
     bc4:	19 8e       	std	Y+25, r1	; 0x19
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	98 8f       	std	Y+24, r25	; 0x18
     bcc:	8f 8b       	std	Y+23, r24	; 0x17
     bce:	09 c0       	rjmp	.+18     	; 0xbe2 <main+0x712>
						paperTowelMotor =  1;
						brush2Motor = 0;
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
     bd0:	80 91 27 03 	lds	r24, 0x0327
     bd4:	80 62       	ori	r24, 0x20	; 32
     bd6:	80 93 27 03 	sts	0x0327, r24
     bda:	a1 e0       	ldi	r26, 0x01	; 1
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	b8 8f       	std	Y+24, r27	; 0x18
     be0:	af 8b       	std	Y+23, r26	; 0x17
						paperTowelMotor =  1;
						break;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
     be2:	2d b7       	in	r18, 0x3d	; 61
     be4:	3e b7       	in	r19, 0x3e	; 62
     be6:	22 51       	subi	r18, 0x12	; 18
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	3e bf       	out	0x3e, r19	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	2d bf       	out	0x3d, r18	; 61
     bf4:	ed b7       	in	r30, 0x3d	; 61
     bf6:	fe b7       	in	r31, 0x3e	; 62
     bf8:	31 96       	adiw	r30, 0x01	; 1
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	ad b7       	in	r26, 0x3d	; 61
     c00:	be b7       	in	r27, 0x3e	; 62
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	9c 93       	st	X, r25
     c06:	8e 93       	st	-X, r24
     c08:	11 97       	sbiw	r26, 0x01	; 1
     c0a:	93 83       	std	Z+3, r25	; 0x03
     c0c:	82 83       	std	Z+2, r24	; 0x02
     c0e:	95 83       	std	Z+5, r25	; 0x05
     c10:	84 83       	std	Z+4, r24	; 0x04
     c12:	97 83       	std	Z+7, r25	; 0x07
     c14:	86 83       	std	Z+6, r24	; 0x06
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	91 87       	std	Z+9, r25	; 0x09
     c1c:	80 87       	std	Z+8, r24	; 0x08
     c1e:	93 87       	std	Z+11, r25	; 0x0b
     c20:	82 87       	std	Z+10, r24	; 0x0a
     c22:	95 87       	std	Z+13, r25	; 0x0d
     c24:	84 87       	std	Z+12, r24	; 0x0c
     c26:	97 87       	std	Z+15, r25	; 0x0f
     c28:	86 87       	std	Z+14, r24	; 0x0e
     c2a:	91 8b       	std	Z+17, r25	; 0x11
     c2c:	80 8b       	std	Z+16, r24	; 0x10
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	9c 81       	ldd	r25, Y+4	; 0x04
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	2f 8d       	ldd	r18, Y+31	; 0x1f
     c3c:	38 a1       	ldd	r19, Y+32	; 0x20
     c3e:	0d 8d       	ldd	r16, Y+29	; 0x1d
     c40:	1e 8d       	ldd	r17, Y+30	; 0x1e
     c42:	eb 8c       	ldd	r14, Y+27	; 0x1b
     c44:	fc 8c       	ldd	r15, Y+28	; 0x1c
     c46:	c9 8c       	ldd	r12, Y+25	; 0x19
     c48:	da 8c       	ldd	r13, Y+26	; 0x1a
     c4a:	af 88       	ldd	r10, Y+23	; 0x17
     c4c:	b8 8c       	ldd	r11, Y+24	; 0x18
     c4e:	a2 e0       	ldi	r26, 0x02	; 2
     c50:	8a 2e       	mov	r8, r26
     c52:	91 2c       	mov	r9, r1
     c54:	0e 94 b3 01 	call	0x366	; 0x366 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
     c58:	2d b7       	in	r18, 0x3d	; 61
     c5a:	3e b7       	in	r19, 0x3e	; 62
     c5c:	2e 5e       	subi	r18, 0xEE	; 238
     c5e:	3f 4f       	sbci	r19, 0xFF	; 255
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	3e bf       	out	0x3e, r19	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	2d bf       	out	0x3d, r18	; 61
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>
				i2c_start(I2C2+I2C_WRITE);
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				counter ++;
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	9c 81       	ldd	r25, Y+4	; 0x04
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	9c 83       	std	Y+4, r25	; 0x04
     c7a:	8b 83       	std	Y+3, r24	; 0x03
     c7c:	f4 cc       	rjmp	.-1560   	; 0x666 <main+0x196>
				delay_ms(1);
			}
		}
		else{										//If switch is set to Run Mode
		
		OrangutanLCD::print("NORMAL");
     c7e:	85 ec       	ldi	r24, 0xC5	; 197
     c80:	92 e0       	ldi	r25, 0x02	; 2
     c82:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     c86:	88 ee       	ldi	r24, 0xE8	; 232
     c88:	93 e0       	ldi	r25, 0x03	; 3
     c8a:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
     c8e:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("SELECT CYCLE");
     c92:	8c ec       	ldi	r24, 0xCC	; 204
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     c9a:	ee 24       	eor	r14, r14
     c9c:	ff 24       	eor	r15, r15
				else if(counter - counterRefRel > 15){
					button = 0;
					stateButton = NONE;
				}
			}*/
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     c9e:	c7 01       	movw	r24, r14
     ca0:	be 01       	movw	r22, r28
     ca2:	6f 5f       	subi	r22, 0xFF	; 255
     ca4:	7f 4f       	sbci	r23, 0xFF	; 255
     ca6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPi>
     caa:	18 2f       	mov	r17, r24
			counter++;
     cac:	08 94       	sec
     cae:	e1 1c       	adc	r14, r1
     cb0:	f1 1c       	adc	r15, r1
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
		OrangutanLCD::print("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
     cba:	11 23       	and	r17, r17
     cbc:	81 f3       	breq	.-32     	; 0xc9e <main+0x7ce>
			counter++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		OrangutanLCD::clear();
     cbe:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("CYCLE:");
     cc2:	89 ed       	ldi	r24, 0xD9	; 217
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>

		//u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
		u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
     cca:	80 91 26 03 	lds	r24, 0x0326
     cce:	80 62       	ori	r24, 0x20	; 32
     cd0:	80 93 26 03 	sts	0x0326, r24
		/*u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
		u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;*/

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     cda:	88 23       	and	r24, r24
     cdc:	11 f0       	breq	.+4      	; 0xce2 <main+0x812>
     cde:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <main+0x1de8>
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     ce8:	88 23       	and	r24, r24
     cea:	11 f0       	breq	.+4      	; 0xcf0 <main+0x820>
     cec:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <main+0x1de8>
			OrangutanLCD::gotoXY(7,0);
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("FIRST B");
     cf8:	80 ee       	ldi	r24, 0xE0	; 224
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
     d00:	a1 e0       	ldi	r26, 0x01	; 1
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	bc 8b       	std	Y+20, r27	; 0x14
     d06:	ab 8b       	std	Y+19, r26	; 0x13
     d08:	ba 8b       	std	Y+18, r27	; 0x12
     d0a:	a9 8b       	std	Y+17, r26	; 0x11
     d0c:	66 24       	eor	r6, r6
     d0e:	77 24       	eor	r7, r7
     d10:	44 24       	eor	r4, r4
     d12:	55 24       	eor	r5, r5
     d14:	22 24       	eor	r2, r2
     d16:	33 24       	eor	r3, r3
     d18:	1e 82       	std	Y+6, r1	; 0x06
     d1a:	1d 82       	std	Y+5, r1	; 0x05
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     d1c:	84 e4       	ldi	r24, 0x44	; 68
     d1e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     d28:	85 e4       	ldi	r24, 0x45	; 69
     d2a:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     d2e:	0e 94 df 11 	call	0x23be	; 0x23be <_Z11i2c_readAckv>
     d32:	80 93 2a 03 	sts	0x032A, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     d36:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_Z11i2c_readNakv>
     d3a:	80 93 2b 03 	sts	0x032B, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     d3e:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z8i2c_stopv>
				
				if(state != INIT){
     d42:	61 14       	cp	r6, r1
     d44:	71 04       	cpc	r7, r1
     d46:	79 f0       	breq	.+30     	; 0xd66 <main+0x896>
					OrangutanLCD::gotoXY(0,1);
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
     d50:	88 ee       	ldi	r24, 0xE8	; 232
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
	};
	static inline void print(int value)
	{
		print((long)value);
     d58:	b3 01       	movw	r22, r6
     d5a:	88 27       	eor	r24, r24
     d5c:	77 fd       	sbrc	r23, 7
     d5e:	80 95       	com	r24
     d60:	98 2f       	mov	r25, r24
     d62:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN12OrangutanLCD5printEl>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     d66:	c2 01       	movw	r24, r4
     d68:	be 01       	movw	r22, r28
     d6a:	6f 5f       	subi	r22, 0xFF	; 255
     d6c:	7f 4f       	sbci	r23, 0xFF	; 255
     d6e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
     d72:	61 14       	cp	r6, r1
     d74:	71 04       	cpc	r7, r1
     d76:	29 f4       	brne	.+10     	; 0xd82 <main+0x8b2>
     d78:	88 23       	and	r24, r24
     d7a:	09 f4       	brne	.+2      	; 0xd7e <main+0x8ae>
     d7c:	43 c0       	rjmp	.+134    	; 0xe04 <main+0x934>
     d7e:	12 01       	movw	r2, r4
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <main+0x8ba>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
     d82:	b1 e0       	ldi	r27, 0x01	; 1
     d84:	6b 16       	cp	r6, r27
     d86:	71 04       	cpc	r7, r1
     d88:	49 f4       	brne	.+18     	; 0xd9c <main+0x8cc>
     d8a:	c2 01       	movw	r24, r4
     d8c:	82 19       	sub	r24, r2
     d8e:	93 09       	sbc	r25, r3
     d90:	81 5a       	subi	r24, 0xA1	; 161
     d92:	9f 40       	sbci	r25, 0x0F	; 15
     d94:	0c f4       	brge	.+2      	; 0xd98 <main+0x8c8>
     d96:	43 c0       	rjmp	.+134    	; 0xe1e <main+0x94e>
     d98:	12 01       	movw	r2, r4
     d9a:	04 c0       	rjmp	.+8      	; 0xda4 <main+0x8d4>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
     d9c:	32 e0       	ldi	r19, 0x02	; 2
     d9e:	63 16       	cp	r6, r19
     da0:	71 04       	cpc	r7, r1
     da2:	49 f4       	brne	.+18     	; 0xdb6 <main+0x8e6>
     da4:	c2 01       	movw	r24, r4
     da6:	82 19       	sub	r24, r2
     da8:	93 09       	sbc	r25, r3
     daa:	85 36       	cpi	r24, 0x65	; 101
     dac:	91 05       	cpc	r25, r1
     dae:	0c f4       	brge	.+2      	; 0xdb2 <main+0x8e2>
     db0:	46 c0       	rjmp	.+140    	; 0xe3e <main+0x96e>
     db2:	12 01       	movw	r2, r4
     db4:	04 c0       	rjmp	.+8      	; 0xdbe <main+0x8ee>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	68 16       	cp	r6, r24
     dba:	71 04       	cpc	r7, r1
     dbc:	49 f4       	brne	.+18     	; 0xdd0 <main+0x900>
     dbe:	c2 01       	movw	r24, r4
     dc0:	82 19       	sub	r24, r2
     dc2:	93 09       	sbc	r25, r3
     dc4:	81 5a       	subi	r24, 0xA1	; 161
     dc6:	9f 40       	sbci	r25, 0x0F	; 15
     dc8:	0c f4       	brge	.+2      	; 0xdcc <main+0x8fc>
     dca:	49 c0       	rjmp	.+146    	; 0xe5e <main+0x98e>
     dcc:	12 01       	movw	r2, r4
     dce:	04 c0       	rjmp	.+8      	; 0xdd8 <main+0x908>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
     dd0:	b4 e0       	ldi	r27, 0x04	; 4
     dd2:	6b 16       	cp	r6, r27
     dd4:	71 04       	cpc	r7, r1
     dd6:	49 f4       	brne	.+18     	; 0xdea <main+0x91a>
     dd8:	c2 01       	movw	r24, r4
     dda:	82 19       	sub	r24, r2
     ddc:	93 09       	sbc	r25, r3
     dde:	89 5e       	subi	r24, 0xE9	; 233
     de0:	93 40       	sbci	r25, 0x03	; 3
     de2:	0c f4       	brge	.+2      	; 0xde6 <main+0x916>
     de4:	4c c0       	rjmp	.+152    	; 0xe7e <main+0x9ae>
     de6:	12 01       	movw	r2, r4
     de8:	04 c0       	rjmp	.+8      	; 0xdf2 <main+0x922>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
     dea:	35 e0       	ldi	r19, 0x05	; 5
     dec:	63 16       	cp	r6, r19
     dee:	71 04       	cpc	r7, r1
     df0:	49 f4       	brne	.+18     	; 0xe04 <main+0x934>
     df2:	c2 01       	movw	r24, r4
     df4:	82 19       	sub	r24, r2
     df6:	93 09       	sbc	r25, r3
     df8:	85 36       	cpi	r24, 0x65	; 101
     dfa:	91 05       	cpc	r25, r1
     dfc:	0c f4       	brge	.+2      	; 0xe00 <main+0x930>
     dfe:	4d c0       	rjmp	.+154    	; 0xe9a <main+0x9ca>
     e00:	12 01       	movw	r2, r4
     e02:	04 c0       	rjmp	.+8      	; 0xe0c <main+0x93c>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totallength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
     e04:	86 e0       	ldi	r24, 0x06	; 6
     e06:	68 16       	cp	r6, r24
     e08:	71 04       	cpc	r7, r1
     e0a:	61 f4       	brne	.+24     	; 0xe24 <main+0x954>
     e0c:	c2 01       	movw	r24, r4
     e0e:	82 19       	sub	r24, r2
     e10:	93 09       	sbc	r25, r3
     e12:	81 5a       	subi	r24, 0xA1	; 161
     e14:	9f 40       	sbci	r25, 0x0F	; 15
     e16:	0c f4       	brge	.+2      	; 0xe1a <main+0x94a>
     e18:	50 c0       	rjmp	.+160    	; 0xeba <main+0x9ea>
     e1a:	12 01       	movw	r2, r4
     e1c:	07 c0       	rjmp	.+14     	; 0xe2c <main+0x95c>
     e1e:	f1 e0       	ldi	r31, 0x01	; 1
     e20:	6f 2e       	mov	r6, r31
     e22:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
     e24:	b7 e0       	ldi	r27, 0x07	; 7
     e26:	6b 16       	cp	r6, r27
     e28:	71 04       	cpc	r7, r1
     e2a:	61 f4       	brne	.+24     	; 0xe44 <main+0x974>
     e2c:	c2 01       	movw	r24, r4
     e2e:	82 19       	sub	r24, r2
     e30:	93 09       	sbc	r25, r3
     e32:	85 36       	cpi	r24, 0x65	; 101
     e34:	91 05       	cpc	r25, r1
     e36:	0c f4       	brge	.+2      	; 0xe3a <main+0x96a>
     e38:	50 c0       	rjmp	.+160    	; 0xeda <main+0xa0a>
     e3a:	12 01       	movw	r2, r4
     e3c:	07 c0       	rjmp	.+14     	; 0xe4c <main+0x97c>
     e3e:	e2 e0       	ldi	r30, 0x02	; 2
     e40:	6e 2e       	mov	r6, r30
     e42:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
     e44:	28 e0       	ldi	r18, 0x08	; 8
     e46:	62 16       	cp	r6, r18
     e48:	71 04       	cpc	r7, r1
     e4a:	61 f4       	brne	.+24     	; 0xe64 <main+0x994>
     e4c:	c2 01       	movw	r24, r4
     e4e:	82 19       	sub	r24, r2
     e50:	93 09       	sbc	r25, r3
     e52:	85 36       	cpi	r24, 0x65	; 101
     e54:	91 05       	cpc	r25, r1
     e56:	0c f4       	brge	.+2      	; 0xe5a <main+0x98a>
     e58:	4e c0       	rjmp	.+156    	; 0xef6 <main+0xa26>
     e5a:	12 01       	movw	r2, r4
     e5c:	07 c0       	rjmp	.+14     	; 0xe6c <main+0x99c>
     e5e:	73 e0       	ldi	r23, 0x03	; 3
     e60:	67 2e       	mov	r6, r23
     e62:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
     e64:	39 e0       	ldi	r19, 0x09	; 9
     e66:	63 16       	cp	r6, r19
     e68:	71 04       	cpc	r7, r1
     e6a:	61 f4       	brne	.+24     	; 0xe84 <main+0x9b4>
     e6c:	c2 01       	movw	r24, r4
     e6e:	82 19       	sub	r24, r2
     e70:	93 09       	sbc	r25, r3
     e72:	81 5a       	subi	r24, 0xA1	; 161
     e74:	9f 40       	sbci	r25, 0x0F	; 15
     e76:	0c f4       	brge	.+2      	; 0xe7a <main+0x9aa>
     e78:	4e c0       	rjmp	.+156    	; 0xf16 <main+0xa46>
     e7a:	12 01       	movw	r2, r4
     e7c:	07 c0       	rjmp	.+14     	; 0xe8c <main+0x9bc>
     e7e:	64 e0       	ldi	r22, 0x04	; 4
     e80:	66 2e       	mov	r6, r22
     e82:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
     e84:	ba e0       	ldi	r27, 0x0A	; 10
     e86:	6b 16       	cp	r6, r27
     e88:	71 04       	cpc	r7, r1
     e8a:	51 f4       	brne	.+20     	; 0xea0 <main+0x9d0>
     e8c:	c2 01       	movw	r24, r4
     e8e:	82 19       	sub	r24, r2
     e90:	93 09       	sbc	r25, r3
     e92:	85 36       	cpi	r24, 0x65	; 101
     e94:	91 05       	cpc	r25, r1
     e96:	44 f4       	brge	.+16     	; 0xea8 <main+0x9d8>
     e98:	4e c0       	rjmp	.+156    	; 0xf36 <main+0xa66>
     e9a:	55 e0       	ldi	r21, 0x05	; 5
     e9c:	65 2e       	mov	r6, r21
     e9e:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totallength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
     ea0:	2b e0       	ldi	r18, 0x0B	; 11
     ea2:	62 16       	cp	r6, r18
     ea4:	71 04       	cpc	r7, r1
     ea6:	61 f4       	brne	.+24     	; 0xec0 <main+0x9f0>
     ea8:	c2 01       	movw	r24, r4
     eaa:	82 19       	sub	r24, r2
     eac:	93 09       	sbc	r25, r3
     eae:	81 5a       	subi	r24, 0xA1	; 161
     eb0:	9f 40       	sbci	r25, 0x0F	; 15
     eb2:	0c f4       	brge	.+2      	; 0xeb6 <main+0x9e6>
     eb4:	50 c0       	rjmp	.+160    	; 0xf56 <main+0xa86>
     eb6:	12 01       	movw	r2, r4
     eb8:	07 c0       	rjmp	.+14     	; 0xec8 <main+0x9f8>
     eba:	46 e0       	ldi	r20, 0x06	; 6
     ebc:	64 2e       	mov	r6, r20
     ebe:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
     ec0:	8c e0       	ldi	r24, 0x0C	; 12
     ec2:	68 16       	cp	r6, r24
     ec4:	71 04       	cpc	r7, r1
     ec6:	61 f4       	brne	.+24     	; 0xee0 <main+0xa10>
     ec8:	c2 01       	movw	r24, r4
     eca:	82 19       	sub	r24, r2
     ecc:	93 09       	sbc	r25, r3
     ece:	85 36       	cpi	r24, 0x65	; 101
     ed0:	91 05       	cpc	r25, r1
     ed2:	0c f4       	brge	.+2      	; 0xed6 <main+0xa06>
     ed4:	4e c0       	rjmp	.+156    	; 0xf72 <main+0xaa2>
     ed6:	12 01       	movw	r2, r4
     ed8:	07 c0       	rjmp	.+14     	; 0xee8 <main+0xa18>
     eda:	37 e0       	ldi	r19, 0x07	; 7
     edc:	63 2e       	mov	r6, r19
     ede:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
     ee0:	9d e0       	ldi	r25, 0x0D	; 13
     ee2:	69 16       	cp	r6, r25
     ee4:	71 04       	cpc	r7, r1
     ee6:	51 f4       	brne	.+20     	; 0xefc <main+0xa2c>
     ee8:	c2 01       	movw	r24, r4
     eea:	82 19       	sub	r24, r2
     eec:	93 09       	sbc	r25, r3
     eee:	81 5a       	subi	r24, 0xA1	; 161
     ef0:	9f 40       	sbci	r25, 0x0F	; 15
     ef2:	44 f4       	brge	.+16     	; 0xf04 <main+0xa34>
     ef4:	4f c0       	rjmp	.+158    	; 0xf94 <main+0xac4>
     ef6:	28 e0       	ldi	r18, 0x08	; 8
     ef8:	62 2e       	mov	r6, r18
     efa:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
					}
				if(state == B1STOP2 && counter - counterRef > pWait){
     efc:	be e0       	ldi	r27, 0x0E	; 14
     efe:	6b 16       	cp	r6, r27
     f00:	71 04       	cpc	r7, r1
     f02:	61 f4       	brne	.+24     	; 0xf1c <main+0xa4c>
     f04:	c2 01       	movw	r24, r4
     f06:	82 19       	sub	r24, r2
     f08:	93 09       	sbc	r25, r3
     f0a:	85 36       	cpi	r24, 0x65	; 101
     f0c:	91 05       	cpc	r25, r1
     f0e:	0c f4       	brge	.+2      	; 0xf12 <main+0xa42>
     f10:	53 c0       	rjmp	.+166    	; 0xfb8 <main+0xae8>
     f12:	12 01       	movw	r2, r4
     f14:	07 c0       	rjmp	.+14     	; 0xf24 <main+0xa54>
     f16:	99 e0       	ldi	r25, 0x09	; 9
     f18:	69 2e       	mov	r6, r25
     f1a:	71 2c       	mov	r7, r1
					state = 23;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totallength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
     f1c:	27 e1       	ldi	r18, 0x17	; 23
     f1e:	62 16       	cp	r6, r18
     f20:	71 04       	cpc	r7, r1
     f22:	61 f4       	brne	.+24     	; 0xf3c <main+0xa6c>
     f24:	c2 01       	movw	r24, r4
     f26:	82 19       	sub	r24, r2
     f28:	93 09       	sbc	r25, r3
     f2a:	81 5a       	subi	r24, 0xA1	; 161
     f2c:	9f 40       	sbci	r25, 0x0F	; 15
     f2e:	0c f4       	brge	.+2      	; 0xf32 <main+0xa62>
     f30:	53 c0       	rjmp	.+166    	; 0xfd8 <main+0xb08>
     f32:	12 01       	movw	r2, r4
     f34:	07 c0       	rjmp	.+14     	; 0xf44 <main+0xa74>
     f36:	8a e0       	ldi	r24, 0x0A	; 10
     f38:	68 2e       	mov	r6, r24
     f3a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
     f3c:	88 e1       	ldi	r24, 0x18	; 24
     f3e:	68 16       	cp	r6, r24
     f40:	71 04       	cpc	r7, r1
     f42:	61 f4       	brne	.+24     	; 0xf5c <main+0xa8c>
     f44:	c2 01       	movw	r24, r4
     f46:	82 19       	sub	r24, r2
     f48:	93 09       	sbc	r25, r3
     f4a:	85 36       	cpi	r24, 0x65	; 101
     f4c:	91 05       	cpc	r25, r1
     f4e:	0c f4       	brge	.+2      	; 0xf52 <main+0xa82>
     f50:	51 c0       	rjmp	.+162    	; 0xff4 <main+0xb24>
     f52:	12 01       	movw	r2, r4
     f54:	07 c0       	rjmp	.+14     	; 0xf64 <main+0xa94>
     f56:	0b e0       	ldi	r16, 0x0B	; 11
     f58:	60 2e       	mov	r6, r16
     f5a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totallength2*fixtureMotorWholePlate){
     f5c:	99 e1       	ldi	r25, 0x19	; 25
     f5e:	69 16       	cp	r6, r25
     f60:	71 04       	cpc	r7, r1
     f62:	51 f4       	brne	.+20     	; 0xf78 <main+0xaa8>
     f64:	c2 01       	movw	r24, r4
     f66:	82 19       	sub	r24, r2
     f68:	93 09       	sbc	r25, r3
     f6a:	81 5a       	subi	r24, 0xA1	; 161
     f6c:	9f 40       	sbci	r25, 0x0F	; 15
     f6e:	44 f4       	brge	.+16     	; 0xf80 <main+0xab0>
     f70:	51 c0       	rjmp	.+162    	; 0x1014 <main+0xb44>
     f72:	1c e0       	ldi	r17, 0x0C	; 12
     f74:	61 2e       	mov	r6, r17
     f76:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totallength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
     f78:	ba e1       	ldi	r27, 0x1A	; 26
     f7a:	6b 16       	cp	r6, r27
     f7c:	71 04       	cpc	r7, r1
     f7e:	69 f4       	brne	.+26     	; 0xf9a <main+0xaca>
     f80:	c2 01       	movw	r24, r4
     f82:	82 19       	sub	r24, r2
     f84:	93 09       	sbc	r25, r3
     f86:	81 5a       	subi	r24, 0xA1	; 161
     f88:	9f 40       	sbci	r25, 0x0F	; 15
     f8a:	0c f4       	brge	.+2      	; 0xf8e <main+0xabe>
     f8c:	56 c0       	rjmp	.+172    	; 0x103a <main+0xb6a>
     f8e:	5e 82       	std	Y+6, r5	; 0x06
     f90:	4d 82       	std	Y+5, r4	; 0x05
     f92:	07 c0       	rjmp	.+14     	; 0xfa2 <main+0xad2>
     f94:	bd e0       	ldi	r27, 0x0D	; 13
     f96:	6b 2e       	mov	r6, r27
     f98:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
     f9a:	3b e1       	ldi	r19, 0x1B	; 27
     f9c:	63 16       	cp	r6, r19
     f9e:	71 04       	cpc	r7, r1
     fa0:	71 f4       	brne	.+28     	; 0xfbe <main+0xaee>
     fa2:	c2 01       	movw	r24, r4
     fa4:	ad 81       	ldd	r26, Y+5	; 0x05
     fa6:	be 81       	ldd	r27, Y+6	; 0x06
     fa8:	8a 1b       	sub	r24, r26
     faa:	9b 0b       	sbc	r25, r27
     fac:	85 36       	cpi	r24, 0x65	; 101
     fae:	91 05       	cpc	r25, r1
     fb0:	0c f4       	brge	.+2      	; 0xfb4 <main+0xae4>
     fb2:	56 c0       	rjmp	.+172    	; 0x1060 <main+0xb90>
     fb4:	12 01       	movw	r2, r4
     fb6:	07 c0       	rjmp	.+14     	; 0xfc6 <main+0xaf6>
     fb8:	ae e0       	ldi	r26, 0x0E	; 14
     fba:	6a 2e       	mov	r6, r26
     fbc:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
     fbe:	bc e1       	ldi	r27, 0x1C	; 28
     fc0:	6b 16       	cp	r6, r27
     fc2:	71 04       	cpc	r7, r1
     fc4:	61 f4       	brne	.+24     	; 0xfde <main+0xb0e>
     fc6:	c2 01       	movw	r24, r4
     fc8:	82 19       	sub	r24, r2
     fca:	93 09       	sbc	r25, r3
     fcc:	85 36       	cpi	r24, 0x65	; 101
     fce:	91 05       	cpc	r25, r1
     fd0:	0c f4       	brge	.+2      	; 0xfd4 <main+0xb04>
     fd2:	59 c0       	rjmp	.+178    	; 0x1086 <main+0xbb6>
     fd4:	12 01       	movw	r2, r4
     fd6:	07 c0       	rjmp	.+14     	; 0xfe6 <main+0xb16>
     fd8:	f7 e1       	ldi	r31, 0x17	; 23
     fda:	6f 2e       	mov	r6, r31
     fdc:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totallength2*fixtureMotorWholePlate){
     fde:	2d e1       	ldi	r18, 0x1D	; 29
     fe0:	62 16       	cp	r6, r18
     fe2:	71 04       	cpc	r7, r1
     fe4:	51 f4       	brne	.+20     	; 0xffa <main+0xb2a>
     fe6:	c2 01       	movw	r24, r4
     fe8:	82 19       	sub	r24, r2
     fea:	93 09       	sbc	r25, r3
     fec:	81 5a       	subi	r24, 0xA1	; 161
     fee:	9f 40       	sbci	r25, 0x0F	; 15
     ff0:	44 f4       	brge	.+16     	; 0x1002 <main+0xb32>
     ff2:	5c c0       	rjmp	.+184    	; 0x10ac <main+0xbdc>
     ff4:	e8 e1       	ldi	r30, 0x18	; 24
     ff6:	6e 2e       	mov	r6, r30
     ff8:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totallength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
     ffa:	8e e1       	ldi	r24, 0x1E	; 30
     ffc:	68 16       	cp	r6, r24
     ffe:	71 04       	cpc	r7, r1
    1000:	61 f4       	brne	.+24     	; 0x101a <main+0xb4a>
    1002:	c2 01       	movw	r24, r4
    1004:	82 19       	sub	r24, r2
    1006:	93 09       	sbc	r25, r3
    1008:	81 5a       	subi	r24, 0xA1	; 161
    100a:	9f 40       	sbci	r25, 0x0F	; 15
    100c:	0c f4       	brge	.+2      	; 0x1010 <main+0xb40>
    100e:	62 c0       	rjmp	.+196    	; 0x10d4 <main+0xc04>
    1010:	12 01       	movw	r2, r4
    1012:	07 c0       	rjmp	.+14     	; 0x1022 <main+0xb52>
    1014:	79 e1       	ldi	r23, 0x19	; 25
    1016:	67 2e       	mov	r6, r23
    1018:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    101a:	bf e1       	ldi	r27, 0x1F	; 31
    101c:	6b 16       	cp	r6, r27
    101e:	71 04       	cpc	r7, r1
    1020:	79 f4       	brne	.+30     	; 0x1040 <main+0xb70>
    1022:	c2 01       	movw	r24, r4
    1024:	82 19       	sub	r24, r2
    1026:	93 09       	sbc	r25, r3
    1028:	89 5e       	subi	r24, 0xE9	; 233
    102a:	93 40       	sbci	r25, 0x03	; 3
    102c:	24 f4       	brge	.+8      	; 0x1036 <main+0xb66>
    102e:	6f e1       	ldi	r22, 0x1F	; 31
    1030:	66 2e       	mov	r6, r22
    1032:	71 2c       	mov	r7, r1
    1034:	2a c1       	rjmp	.+596    	; 0x128a <main+0xdba>
    1036:	12 01       	movw	r2, r4
    1038:	07 c0       	rjmp	.+14     	; 0x1048 <main+0xb78>
    103a:	5a e1       	ldi	r21, 0x1A	; 26
    103c:	65 2e       	mov	r6, r21
    103e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    1040:	30 e2       	ldi	r19, 0x20	; 32
    1042:	63 16       	cp	r6, r19
    1044:	71 04       	cpc	r7, r1
    1046:	79 f4       	brne	.+30     	; 0x1066 <main+0xb96>
    1048:	c2 01       	movw	r24, r4
    104a:	82 19       	sub	r24, r2
    104c:	93 09       	sbc	r25, r3
    104e:	81 5a       	subi	r24, 0xA1	; 161
    1050:	9f 40       	sbci	r25, 0x0F	; 15
    1052:	24 f4       	brge	.+8      	; 0x105c <main+0xb8c>
    1054:	40 e2       	ldi	r20, 0x20	; 32
    1056:	64 2e       	mov	r6, r20
    1058:	71 2c       	mov	r7, r1
    105a:	1d c1       	rjmp	.+570    	; 0x1296 <main+0xdc6>
    105c:	12 01       	movw	r2, r4
    105e:	07 c0       	rjmp	.+14     	; 0x106e <main+0xb9e>
    1060:	3b e1       	ldi	r19, 0x1B	; 27
    1062:	63 2e       	mov	r6, r19
    1064:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    1066:	b1 e2       	ldi	r27, 0x21	; 33
    1068:	6b 16       	cp	r6, r27
    106a:	71 04       	cpc	r7, r1
    106c:	79 f4       	brne	.+30     	; 0x108c <main+0xbbc>
    106e:	c2 01       	movw	r24, r4
    1070:	82 19       	sub	r24, r2
    1072:	93 09       	sbc	r25, r3
    1074:	85 36       	cpi	r24, 0x65	; 101
    1076:	91 05       	cpc	r25, r1
    1078:	24 f4       	brge	.+8      	; 0x1082 <main+0xbb2>
    107a:	21 e2       	ldi	r18, 0x21	; 33
    107c:	62 2e       	mov	r6, r18
    107e:	71 2c       	mov	r7, r1
    1080:	0f c1       	rjmp	.+542    	; 0x12a0 <main+0xdd0>
    1082:	12 01       	movw	r2, r4
    1084:	07 c0       	rjmp	.+14     	; 0x1094 <main+0xbc4>
    1086:	9c e1       	ldi	r25, 0x1C	; 28
    1088:	69 2e       	mov	r6, r25
    108a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate){
    108c:	22 e2       	ldi	r18, 0x22	; 34
    108e:	62 16       	cp	r6, r18
    1090:	71 04       	cpc	r7, r1
    1092:	79 f4       	brne	.+30     	; 0x10b2 <main+0xbe2>
    1094:	c2 01       	movw	r24, r4
    1096:	82 19       	sub	r24, r2
    1098:	93 09       	sbc	r25, r3
    109a:	81 5a       	subi	r24, 0xA1	; 161
    109c:	9f 40       	sbci	r25, 0x0F	; 15
    109e:	24 f4       	brge	.+8      	; 0x10a8 <main+0xbd8>
    10a0:	82 e2       	ldi	r24, 0x22	; 34
    10a2:	68 2e       	mov	r6, r24
    10a4:	71 2c       	mov	r7, r1
    10a6:	08 c1       	rjmp	.+528    	; 0x12b8 <main+0xde8>
    10a8:	12 01       	movw	r2, r4
    10aa:	07 c0       	rjmp	.+14     	; 0x10ba <main+0xbea>
    10ac:	0d e1       	ldi	r16, 0x1D	; 29
    10ae:	60 2e       	mov	r6, r16
    10b0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    10b2:	83 e2       	ldi	r24, 0x23	; 35
    10b4:	68 16       	cp	r6, r24
    10b6:	71 04       	cpc	r7, r1
    10b8:	81 f4       	brne	.+32     	; 0x10da <main+0xc0a>
    10ba:	c2 01       	movw	r24, r4
    10bc:	82 19       	sub	r24, r2
    10be:	93 09       	sbc	r25, r3
    10c0:	0b 97       	sbiw	r24, 0x0b	; 11
    10c2:	24 f0       	brlt	.+8      	; 0x10cc <main+0xbfc>
    10c4:	14 e2       	ldi	r17, 0x24	; 36
    10c6:	61 2e       	mov	r6, r17
    10c8:	71 2c       	mov	r7, r1
    10ca:	0d c1       	rjmp	.+538    	; 0x12e6 <main+0xe16>
    10cc:	b3 e2       	ldi	r27, 0x23	; 35
    10ce:	6b 2e       	mov	r6, r27
    10d0:	71 2c       	mov	r7, r1
    10d2:	f7 c0       	rjmp	.+494    	; 0x12c2 <main+0xdf2>
    10d4:	ae e1       	ldi	r26, 0x1E	; 30
    10d6:	6a 2e       	mov	r6, r26
    10d8:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    10da:	f3 01       	movw	r30, r6
    10dc:	e4 32       	cpi	r30, 0x24	; 36
    10de:	f1 05       	cpc	r31, r1
    10e0:	08 f0       	brcs	.+2      	; 0x10e4 <main+0xc14>
    10e2:	01 c1       	rjmp	.+514    	; 0x12e6 <main+0xe16>
    10e4:	ea 5b       	subi	r30, 0xBA	; 186
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	05 90       	lpm	r0, Z+
    10ee:	f4 91       	lpm	r31, Z+
    10f0:	e0 2d       	mov	r30, r0
    10f2:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    10f4:	80 91 2a 03 	lds	r24, 0x032A
    10f8:	20 91 28 03 	lds	r18, 0x0328
    10fc:	90 91 26 03 	lds	r25, 0x0326
    1100:	82 ff       	sbrs	r24, 2
    1102:	07 c0       	rjmp	.+14     	; 0x1112 <main+0xc42>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    1104:	9f 7e       	andi	r25, 0xEF	; 239
    1106:	90 93 26 03 	sts	0x0326, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    110a:	27 7f       	andi	r18, 0xF7	; 247
    110c:	20 93 28 03 	sts	0x0328, r18
    1110:	15 c0       	rjmp	.+42     	; 0x113c <main+0xc6c>
						fixtureMotor = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1112:	9f 7d       	andi	r25, 0xDF	; 223
    1114:	90 93 26 03 	sts	0x0326, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1118:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    111a:	28 60       	ori	r18, 0x08	; 8
    111c:	20 93 28 03 	sts	0x0328, r18
						if(print0 == 1){
    1120:	ab 89       	ldd	r26, Y+19	; 0x13
    1122:	bc 89       	ldd	r27, Y+20	; 0x14
    1124:	11 97       	sbiw	r26, 0x01	; 1
    1126:	51 f4       	brne	.+20     	; 0x113c <main+0xc6c>
							OrangutanLCD::gotoXY(0,1);
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	61 e0       	ldi	r22, 0x01	; 1
    112c:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1130:	8f ee       	ldi	r24, 0xEF	; 239
    1132:	92 e0       	ldi	r25, 0x02	; 2
    1134:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
    1138:	1c 8a       	std	Y+20, r1	; 0x14
    113a:	1b 8a       	std	Y+19, r1	; 0x13
							print0 = 0;
						}
					}
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    113c:	20 91 28 03 	lds	r18, 0x0328
    1140:	32 2f       	mov	r19, r18
    1142:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    1144:	c2 01       	movw	r24, r4
    1146:	68 ec       	ldi	r22, 0xC8	; 200
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__divmodhi4>
    114e:	84 36       	cpi	r24, 0x64	; 100
    1150:	91 05       	cpc	r25, r1
    1152:	24 f4       	brge	.+8      	; 0x115c <main+0xc8c>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1154:	2c 7f       	andi	r18, 0xFC	; 252
    1156:	20 93 28 03 	sts	0x0328, r18
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <main+0xc92>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    115c:	32 60       	ori	r19, 0x02	; 2
    115e:	30 93 28 03 	sts	0x0328, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
    1162:	80 91 26 03 	lds	r24, 0x0326
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    1166:	86 60       	ori	r24, 0x06	; 6
    1168:	80 93 26 03 	sts	0x0326, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    116c:	80 91 28 03 	lds	r24, 0x0328
    1170:	8b 7f       	andi	r24, 0xFB	; 251
    1172:	80 93 28 03 	sts	0x0328, r24
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1176:	80 91 28 03 	lds	r24, 0x0328
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    117a:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    117c:	86 61       	ori	r24, 0x16	; 22
    117e:	80 93 28 03 	sts	0x0328, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    1182:	80 91 26 03 	lds	r24, 0x0326
    1186:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    1188:	8b 7f       	andi	r24, 0xFB	; 251
    118a:	80 93 26 03 	sts	0x0326, r24
				case FIXL:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
    118e:	80 91 26 03 	lds	r24, 0x0326
    1192:	80 61       	ori	r24, 0x10	; 16
    1194:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1198:	80 91 26 03 	lds	r24, 0x0326
    119c:	8f 7d       	andi	r24, 0xDF	; 223
    119e:	80 93 26 03 	sts	0x0326, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    11a2:	80 91 28 03 	lds	r24, 0x0328
    11a6:	88 60       	ori	r24, 0x08	; 8
    11a8:	80 93 28 03 	sts	0x0328, r24
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    11ac:	80 91 28 03 	lds	r24, 0x0328
    11b0:	8f 7e       	andi	r24, 0xEF	; 239
    11b2:	80 93 28 03 	sts	0x0328, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    11b6:	80 91 26 03 	lds	r24, 0x0326
    11ba:	80 62       	ori	r24, 0x20	; 32
    11bc:	80 93 26 03 	sts	0x0326, r24
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    11c0:	80 91 26 03 	lds	r24, 0x0326
    11c4:	80 61       	ori	r24, 0x10	; 16
    11c6:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
    11ca:	80 91 27 03 	lds	r24, 0x0327
    11ce:	81 60       	ori	r24, 0x01	; 1
    11d0:	80 93 27 03 	sts	0x0327, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    11d4:	80 91 26 03 	lds	r24, 0x0326
    11d8:	8f 77       	andi	r24, 0x7F	; 127
    11da:	80 93 26 03 	sts	0x0326, r24
						OrangutanLCD::print("Clean 1");
						print6 = 0;
					}*/
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    11de:	80 91 28 03 	lds	r24, 0x0328
    11e2:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    11e4:	8f 7d       	andi	r24, 0xDF	; 223
    11e6:	80 93 28 03 	sts	0x0328, r24
				case CLEAN1_1:
					fixtureMotor = 1;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    11ea:	80 91 26 03 	lds	r24, 0x0326
    11ee:	8f 7e       	andi	r24, 0xEF	; 239
    11f0:	80 93 26 03 	sts	0x0326, r24
				case B1STOP1:
					fixtureMotor = 0;
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    11f4:	80 91 28 03 	lds	r24, 0x0328
    11f8:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    11fa:	80 62       	ori	r24, 0x20	; 32
    11fc:	80 93 28 03 	sts	0x0328, r24
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1200:	80 91 26 03 	lds	r24, 0x0326
    1204:	80 61       	ori	r24, 0x10	; 16
    1206:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    120a:	80 91 26 03 	lds	r24, 0x0326
    120e:	8f 77       	andi	r24, 0x7F	; 127
    1210:	80 93 26 03 	sts	0x0326, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1214:	80 91 28 03 	lds	r24, 0x0328
    1218:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    121a:	8f 7d       	andi	r24, 0xDF	; 223
    121c:	80 93 28 03 	sts	0x0328, r24
				case CLEAN1_3:
					fixtureMotor = 1;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1220:	80 91 28 03 	lds	r24, 0x0328
    1224:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1226:	80 62       	ori	r24, 0x20	; 32
    1228:	80 93 28 03 	sts	0x0328, r24
				
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    122c:	80 91 26 03 	lds	r24, 0x0326
    1230:	80 61       	ori	r24, 0x10	; 16
    1232:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
    1236:	80 91 27 03 	lds	r24, 0x0327
    123a:	8e 7f       	andi	r24, 0xFE	; 254
    123c:	80 93 27 03 	sts	0x0327, r24
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1240:	80 91 29 03 	lds	r24, 0x0329
    1244:	87 7f       	andi	r24, 0xF7	; 247
    1246:	80 93 29 03 	sts	0x0329, r24
						OrangutanLCD::clear();
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    124a:	80 91 26 03 	lds	r24, 0x0326
    124e:	8f 7e       	andi	r24, 0xEF	; 239
    1250:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1254:	80 91 29 03 	lds	r24, 0x0329
    1258:	88 60       	ori	r24, 0x08	; 8
    125a:	80 93 29 03 	sts	0x0329, r24
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
    125e:	80 91 27 03 	lds	r24, 0x0327
    1262:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1264:	8f 7d       	andi	r24, 0xDF	; 223
    1266:	80 93 27 03 	sts	0x0327, r24
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    126a:	80 91 29 03 	lds	r24, 0x0329
    126e:	8d 7f       	andi	r24, 0xFD	; 253
    1270:	80 93 29 03 	sts	0x0329, r24
				case DRY2:
					fixtureMotor = 1;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    1274:	80 91 27 03 	lds	r24, 0x0327
    1278:	8f 7b       	andi	r24, 0xBF	; 191
    127a:	80 93 27 03 	sts	0x0327, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    127e:	80 91 29 03 	lds	r24, 0x0329
    1282:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1284:	8b 7f       	andi	r24, 0xFB	; 251
    1286:	80 93 29 03 	sts	0x0329, r24
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    128a:	80 91 28 03 	lds	r24, 0x0328
    128e:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1290:	80 61       	ori	r24, 0x10	; 16
    1292:	80 93 28 03 	sts	0x0328, r24
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1296:	80 91 26 03 	lds	r24, 0x0326
    129a:	8f 7e       	andi	r24, 0xEF	; 239
    129c:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    12a0:	80 91 26 03 	lds	r24, 0x0326
    12a4:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    12a6:	84 60       	ori	r24, 0x04	; 4
    12a8:	80 93 26 03 	sts	0x0326, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    12ac:	80 91 28 03 	lds	r24, 0x0328
    12b0:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    12b2:	8f 7e       	andi	r24, 0xEF	; 239
    12b4:	80 93 28 03 	sts	0x0328, r24
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    12b8:	80 91 26 03 	lds	r24, 0x0326
    12bc:	8d 7f       	andi	r24, 0xFD	; 253
    12be:	80 93 26 03 	sts	0x0326, r24
					plateLoadMotor = 1;
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    12c2:	80 91 26 03 	lds	r24, 0x0326
    12c6:	8b 7f       	andi	r24, 0xFB	; 251
    12c8:	80 93 26 03 	sts	0x0326, r24
					if(print35 == 1){
    12cc:	29 89       	ldd	r18, Y+17	; 0x11
    12ce:	3a 89       	ldd	r19, Y+18	; 0x12
    12d0:	21 30       	cpi	r18, 0x01	; 1
    12d2:	31 05       	cpc	r19, r1
    12d4:	31 f4       	brne	.+12     	; 0x12e2 <main+0xe12>
						OrangutanLCD::clear();
    12d6:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    12da:	8d ef       	ldi	r24, 0xFD	; 253
    12dc:	92 e0       	ldi	r25, 0x02	; 2
    12de:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
    12e2:	1a 8a       	std	Y+18, r1	; 0x12
    12e4:	19 8a       	std	Y+17, r1	; 0x11
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
    12e6:	8d b7       	in	r24, 0x3d	; 61
    12e8:	9e b7       	in	r25, 0x3e	; 62
    12ea:	42 97       	sbiw	r24, 0x12	; 18
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	9e bf       	out	0x3e, r25	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	8d bf       	out	0x3d, r24	; 61
    12f6:	ed b7       	in	r30, 0x3d	; 61
    12f8:	fe b7       	in	r31, 0x3e	; 62
    12fa:	31 96       	adiw	r30, 0x01	; 1
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	ad b7       	in	r26, 0x3d	; 61
    1302:	be b7       	in	r27, 0x3e	; 62
    1304:	12 96       	adiw	r26, 0x02	; 2
    1306:	9c 93       	st	X, r25
    1308:	8e 93       	st	-X, r24
    130a:	11 97       	sbiw	r26, 0x01	; 1
    130c:	93 83       	std	Z+3, r25	; 0x03
    130e:	82 83       	std	Z+2, r24	; 0x02
    1310:	95 83       	std	Z+5, r25	; 0x05
    1312:	84 83       	std	Z+4, r24	; 0x04
    1314:	97 83       	std	Z+7, r25	; 0x07
    1316:	86 83       	std	Z+6, r24	; 0x06
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	91 87       	std	Z+9, r25	; 0x09
    131e:	80 87       	std	Z+8, r24	; 0x08
    1320:	93 87       	std	Z+11, r25	; 0x0b
    1322:	82 87       	std	Z+10, r24	; 0x0a
    1324:	95 87       	std	Z+13, r25	; 0x0d
    1326:	84 87       	std	Z+12, r24	; 0x0c
    1328:	97 87       	std	Z+15, r25	; 0x0f
    132a:	86 87       	std	Z+14, r24	; 0x0e
    132c:	91 8b       	std	Z+17, r25	; 0x11
    132e:	80 8b       	std	Z+16, r24	; 0x10
    1330:	c2 01       	movw	r24, r4
    1332:	b1 01       	movw	r22, r2
    1334:	4d 81       	ldd	r20, Y+5	; 0x05
    1336:	5e 81       	ldd	r21, Y+6	; 0x06
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	00 e0       	ldi	r16, 0x00	; 0
    133e:	10 e0       	ldi	r17, 0x00	; 0
    1340:	ee 24       	eor	r14, r14
    1342:	ff 24       	eor	r15, r15
    1344:	cc 24       	eor	r12, r12
    1346:	dd 24       	eor	r13, r13
    1348:	aa 24       	eor	r10, r10
    134a:	bb 24       	eor	r11, r11
    134c:	f2 e0       	ldi	r31, 0x02	; 2
    134e:	8f 2e       	mov	r8, r31
    1350:	91 2c       	mov	r9, r1
    1352:	0e 94 b3 01 	call	0x366	; 0x366 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    1356:	2d b7       	in	r18, 0x3d	; 61
    1358:	3e b7       	in	r19, 0x3e	; 62
    135a:	2e 5e       	subi	r18, 0xEE	; 238
    135c:	3f 4f       	sbci	r19, 0xFF	; 255
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	3e bf       	out	0x3e, r19	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	2d bf       	out	0x3d, r18	; 61
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>
		u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;*/

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("FIRST B");
			while(state != DONER)
    1370:	34 e2       	ldi	r19, 0x24	; 36
    1372:	63 16       	cp	r6, r19
    1374:	71 04       	cpc	r7, r1
    1376:	09 f4       	brne	.+2      	; 0x137a <main+0xeaa>
    1378:	76 c7       	rjmp	.+3820   	; 0x2266 <main+0x1d96>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);

				counter ++;
    137a:	08 94       	sec
    137c:	41 1c       	adc	r4, r1
    137e:	51 1c       	adc	r5, r1
    1380:	cd cc       	rjmp	.-1638   	; 0xd1c <main+0x84c>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
    1388:	88 23       	and	r24, r24
    138a:	09 f0       	breq	.+2      	; 0x138e <main+0xebe>
    138c:	9b c7       	rjmp	.+3894   	; 0x22c4 <main+0x1df4>
			OrangutanLCD::gotoXY(7,0);
    138e:	87 e0       	ldi	r24, 0x07	; 7
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("SECOND B");
    1396:	8a e0       	ldi	r24, 0x0A	; 10
    1398:	93 e0       	ldi	r25, 0x03	; 3
    139a:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	98 8b       	std	Y+16, r25	; 0x10
    13a4:	8f 87       	std	Y+15, r24	; 0x0f
    13a6:	9c 87       	std	Y+12, r25	; 0x0c
    13a8:	8b 87       	std	Y+11, r24	; 0x0b
    13aa:	66 24       	eor	r6, r6
    13ac:	77 24       	eor	r7, r7
    13ae:	44 24       	eor	r4, r4
    13b0:	55 24       	eor	r5, r5
    13b2:	22 24       	eor	r2, r2
    13b4:	33 24       	eor	r3, r3
    13b6:	1e 8a       	std	Y+22, r1	; 0x16
    13b8:	1d 8a       	std	Y+21, r1	; 0x15
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    13ba:	84 e4       	ldi	r24, 0x44	; 68
    13bc:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    13c6:	85 e4       	ldi	r24, 0x45	; 69
    13c8:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    13cc:	0e 94 df 11 	call	0x23be	; 0x23be <_Z11i2c_readAckv>
    13d0:	80 93 2a 03 	sts	0x032A, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    13d4:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_Z11i2c_readNakv>
    13d8:	80 93 2b 03 	sts	0x032B, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    13dc:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z8i2c_stopv>
				
				if(state != INIT){
    13e0:	61 14       	cp	r6, r1
    13e2:	71 04       	cpc	r7, r1
    13e4:	79 f0       	breq	.+30     	; 0x1404 <main+0xf34>
					OrangutanLCD::gotoXY(0,1);
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	61 e0       	ldi	r22, 0x01	; 1
    13ea:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    13ee:	88 ee       	ldi	r24, 0xE8	; 232
    13f0:	92 e0       	ldi	r25, 0x02	; 2
    13f2:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
    13f6:	b3 01       	movw	r22, r6
    13f8:	88 27       	eor	r24, r24
    13fa:	77 fd       	sbrc	r23, 7
    13fc:	80 95       	com	r24
    13fe:	98 2f       	mov	r25, r24
    1400:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN12OrangutanLCD5printEl>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1404:	c2 01       	movw	r24, r4
    1406:	be 01       	movw	r22, r28
    1408:	6f 5f       	subi	r22, 0xFF	; 255
    140a:	7f 4f       	sbci	r23, 0xFF	; 255
    140c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    1410:	61 14       	cp	r6, r1
    1412:	71 04       	cpc	r7, r1
    1414:	29 f4       	brne	.+10     	; 0x1420 <main+0xf50>
    1416:	88 23       	and	r24, r24
    1418:	09 f4       	brne	.+2      	; 0x141c <main+0xf4c>
    141a:	43 c0       	rjmp	.+134    	; 0x14a2 <main+0xfd2>
    141c:	12 01       	movw	r2, r4
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <main+0xf58>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	69 16       	cp	r6, r25
    1424:	71 04       	cpc	r7, r1
    1426:	49 f4       	brne	.+18     	; 0x143a <main+0xf6a>
    1428:	c2 01       	movw	r24, r4
    142a:	82 19       	sub	r24, r2
    142c:	93 09       	sbc	r25, r3
    142e:	81 5a       	subi	r24, 0xA1	; 161
    1430:	9f 40       	sbci	r25, 0x0F	; 15
    1432:	0c f4       	brge	.+2      	; 0x1436 <main+0xf66>
    1434:	43 c0       	rjmp	.+134    	; 0x14bc <main+0xfec>
    1436:	12 01       	movw	r2, r4
    1438:	04 c0       	rjmp	.+8      	; 0x1442 <main+0xf72>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    143a:	b2 e0       	ldi	r27, 0x02	; 2
    143c:	6b 16       	cp	r6, r27
    143e:	71 04       	cpc	r7, r1
    1440:	49 f4       	brne	.+18     	; 0x1454 <main+0xf84>
    1442:	c2 01       	movw	r24, r4
    1444:	82 19       	sub	r24, r2
    1446:	93 09       	sbc	r25, r3
    1448:	85 36       	cpi	r24, 0x65	; 101
    144a:	91 05       	cpc	r25, r1
    144c:	0c f4       	brge	.+2      	; 0x1450 <main+0xf80>
    144e:	46 c0       	rjmp	.+140    	; 0x14dc <main+0x100c>
    1450:	12 01       	movw	r2, r4
    1452:	04 c0       	rjmp	.+8      	; 0x145c <main+0xf8c>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1454:	23 e0       	ldi	r18, 0x03	; 3
    1456:	62 16       	cp	r6, r18
    1458:	71 04       	cpc	r7, r1
    145a:	49 f4       	brne	.+18     	; 0x146e <main+0xf9e>
    145c:	c2 01       	movw	r24, r4
    145e:	82 19       	sub	r24, r2
    1460:	93 09       	sbc	r25, r3
    1462:	81 5a       	subi	r24, 0xA1	; 161
    1464:	9f 40       	sbci	r25, 0x0F	; 15
    1466:	0c f4       	brge	.+2      	; 0x146a <main+0xf9a>
    1468:	49 c0       	rjmp	.+146    	; 0x14fc <main+0x102c>
    146a:	12 01       	movw	r2, r4
    146c:	04 c0       	rjmp	.+8      	; 0x1476 <main+0xfa6>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    146e:	84 e0       	ldi	r24, 0x04	; 4
    1470:	68 16       	cp	r6, r24
    1472:	71 04       	cpc	r7, r1
    1474:	49 f4       	brne	.+18     	; 0x1488 <main+0xfb8>
    1476:	c2 01       	movw	r24, r4
    1478:	82 19       	sub	r24, r2
    147a:	93 09       	sbc	r25, r3
    147c:	89 5e       	subi	r24, 0xE9	; 233
    147e:	93 40       	sbci	r25, 0x03	; 3
    1480:	0c f4       	brge	.+2      	; 0x1484 <main+0xfb4>
    1482:	4c c0       	rjmp	.+152    	; 0x151c <main+0x104c>
    1484:	12 01       	movw	r2, r4
    1486:	04 c0       	rjmp	.+8      	; 0x1490 <main+0xfc0>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    1488:	b5 e0       	ldi	r27, 0x05	; 5
    148a:	6b 16       	cp	r6, r27
    148c:	71 04       	cpc	r7, r1
    148e:	49 f4       	brne	.+18     	; 0x14a2 <main+0xfd2>
    1490:	c2 01       	movw	r24, r4
    1492:	82 19       	sub	r24, r2
    1494:	93 09       	sbc	r25, r3
    1496:	85 36       	cpi	r24, 0x65	; 101
    1498:	91 05       	cpc	r25, r1
    149a:	0c f4       	brge	.+2      	; 0x149e <main+0xfce>
    149c:	4f c0       	rjmp	.+158    	; 0x153c <main+0x106c>
    149e:	12 01       	movw	r2, r4
    14a0:	04 c0       	rjmp	.+8      	; 0x14aa <main+0xfda>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totallength2*fixtureMotorBrush2StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    14a2:	26 e0       	ldi	r18, 0x06	; 6
    14a4:	62 16       	cp	r6, r18
    14a6:	71 04       	cpc	r7, r1
    14a8:	61 f4       	brne	.+24     	; 0x14c2 <main+0xff2>
    14aa:	c2 01       	movw	r24, r4
    14ac:	82 19       	sub	r24, r2
    14ae:	93 09       	sbc	r25, r3
    14b0:	81 5a       	subi	r24, 0xA1	; 161
    14b2:	9f 40       	sbci	r25, 0x0F	; 15
    14b4:	0c f4       	brge	.+2      	; 0x14b8 <main+0xfe8>
    14b6:	52 c0       	rjmp	.+164    	; 0x155c <main+0x108c>
    14b8:	12 01       	movw	r2, r4
    14ba:	07 c0       	rjmp	.+14     	; 0x14ca <main+0xffa>
    14bc:	e1 e0       	ldi	r30, 0x01	; 1
    14be:	6e 2e       	mov	r6, r30
    14c0:	71 2c       	mov	r7, r1
					state = B2SET;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    14c2:	8f e0       	ldi	r24, 0x0F	; 15
    14c4:	68 16       	cp	r6, r24
    14c6:	71 04       	cpc	r7, r1
    14c8:	61 f4       	brne	.+24     	; 0x14e2 <main+0x1012>
    14ca:	c2 01       	movw	r24, r4
    14cc:	82 19       	sub	r24, r2
    14ce:	93 09       	sbc	r25, r3
    14d0:	85 36       	cpi	r24, 0x65	; 101
    14d2:	91 05       	cpc	r25, r1
    14d4:	0c f4       	brge	.+2      	; 0x14d8 <main+0x1008>
    14d6:	52 c0       	rjmp	.+164    	; 0x157c <main+0x10ac>
    14d8:	12 01       	movw	r2, r4
    14da:	07 c0       	rjmp	.+14     	; 0x14ea <main+0x101a>
    14dc:	72 e0       	ldi	r23, 0x02	; 2
    14de:	67 2e       	mov	r6, r23
    14e0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    14e2:	90 e1       	ldi	r25, 0x10	; 16
    14e4:	69 16       	cp	r6, r25
    14e6:	71 04       	cpc	r7, r1
    14e8:	61 f4       	brne	.+24     	; 0x1502 <main+0x1032>
    14ea:	c2 01       	movw	r24, r4
    14ec:	82 19       	sub	r24, r2
    14ee:	93 09       	sbc	r25, r3
    14f0:	85 36       	cpi	r24, 0x65	; 101
    14f2:	91 05       	cpc	r25, r1
    14f4:	0c f4       	brge	.+2      	; 0x14f8 <main+0x1028>
    14f6:	52 c0       	rjmp	.+164    	; 0x159c <main+0x10cc>
    14f8:	12 01       	movw	r2, r4
    14fa:	07 c0       	rjmp	.+14     	; 0x150a <main+0x103a>
    14fc:	63 e0       	ldi	r22, 0x03	; 3
    14fe:	66 2e       	mov	r6, r22
    1500:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    1502:	a1 e1       	ldi	r26, 0x11	; 17
    1504:	6a 16       	cp	r6, r26
    1506:	71 04       	cpc	r7, r1
    1508:	61 f4       	brne	.+24     	; 0x1522 <main+0x1052>
    150a:	c2 01       	movw	r24, r4
    150c:	82 19       	sub	r24, r2
    150e:	93 09       	sbc	r25, r3
    1510:	81 5a       	subi	r24, 0xA1	; 161
    1512:	9f 40       	sbci	r25, 0x0F	; 15
    1514:	0c f4       	brge	.+2      	; 0x1518 <main+0x1048>
    1516:	52 c0       	rjmp	.+164    	; 0x15bc <main+0x10ec>
    1518:	12 01       	movw	r2, r4
    151a:	07 c0       	rjmp	.+14     	; 0x152a <main+0x105a>
    151c:	54 e0       	ldi	r21, 0x04	; 4
    151e:	65 2e       	mov	r6, r21
    1520:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    1522:	22 e1       	ldi	r18, 0x12	; 18
    1524:	62 16       	cp	r6, r18
    1526:	71 04       	cpc	r7, r1
    1528:	61 f4       	brne	.+24     	; 0x1542 <main+0x1072>
    152a:	c2 01       	movw	r24, r4
    152c:	82 19       	sub	r24, r2
    152e:	93 09       	sbc	r25, r3
    1530:	85 36       	cpi	r24, 0x65	; 101
    1532:	91 05       	cpc	r25, r1
    1534:	0c f4       	brge	.+2      	; 0x1538 <main+0x1068>
    1536:	52 c0       	rjmp	.+164    	; 0x15dc <main+0x110c>
    1538:	12 01       	movw	r2, r4
    153a:	07 c0       	rjmp	.+14     	; 0x154a <main+0x107a>
    153c:	45 e0       	ldi	r20, 0x05	; 5
    153e:	64 2e       	mov	r6, r20
    1540:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totallength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    1542:	33 e1       	ldi	r19, 0x13	; 19
    1544:	63 16       	cp	r6, r19
    1546:	71 04       	cpc	r7, r1
    1548:	61 f4       	brne	.+24     	; 0x1562 <main+0x1092>
    154a:	c2 01       	movw	r24, r4
    154c:	82 19       	sub	r24, r2
    154e:	93 09       	sbc	r25, r3
    1550:	81 5a       	subi	r24, 0xA1	; 161
    1552:	9f 40       	sbci	r25, 0x0F	; 15
    1554:	0c f4       	brge	.+2      	; 0x1558 <main+0x1088>
    1556:	52 c0       	rjmp	.+164    	; 0x15fc <main+0x112c>
    1558:	12 01       	movw	r2, r4
    155a:	07 c0       	rjmp	.+14     	; 0x156a <main+0x109a>
    155c:	36 e0       	ldi	r19, 0x06	; 6
    155e:	63 2e       	mov	r6, r19
    1560:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    1562:	b4 e1       	ldi	r27, 0x14	; 20
    1564:	6b 16       	cp	r6, r27
    1566:	71 04       	cpc	r7, r1
    1568:	61 f4       	brne	.+24     	; 0x1582 <main+0x10b2>
    156a:	c2 01       	movw	r24, r4
    156c:	82 19       	sub	r24, r2
    156e:	93 09       	sbc	r25, r3
    1570:	85 36       	cpi	r24, 0x65	; 101
    1572:	91 05       	cpc	r25, r1
    1574:	0c f4       	brge	.+2      	; 0x1578 <main+0x10a8>
    1576:	50 c0       	rjmp	.+160    	; 0x1618 <main+0x1148>
    1578:	12 01       	movw	r2, r4
    157a:	07 c0       	rjmp	.+14     	; 0x158a <main+0x10ba>
    157c:	2f e0       	ldi	r18, 0x0F	; 15
    157e:	62 2e       	mov	r6, r18
    1580:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    1582:	25 e1       	ldi	r18, 0x15	; 21
    1584:	62 16       	cp	r6, r18
    1586:	71 04       	cpc	r7, r1
    1588:	61 f4       	brne	.+24     	; 0x15a2 <main+0x10d2>
    158a:	c2 01       	movw	r24, r4
    158c:	82 19       	sub	r24, r2
    158e:	93 09       	sbc	r25, r3
    1590:	81 5a       	subi	r24, 0xA1	; 161
    1592:	9f 40       	sbci	r25, 0x0F	; 15
    1594:	0c f4       	brge	.+2      	; 0x1598 <main+0x10c8>
    1596:	51 c0       	rjmp	.+162    	; 0x163a <main+0x116a>
    1598:	12 01       	movw	r2, r4
    159a:	07 c0       	rjmp	.+14     	; 0x15aa <main+0x10da>
    159c:	90 e1       	ldi	r25, 0x10	; 16
    159e:	69 2e       	mov	r6, r25
    15a0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    15a2:	86 e1       	ldi	r24, 0x16	; 22
    15a4:	68 16       	cp	r6, r24
    15a6:	71 04       	cpc	r7, r1
    15a8:	61 f4       	brne	.+24     	; 0x15c2 <main+0x10f2>
    15aa:	c2 01       	movw	r24, r4
    15ac:	82 19       	sub	r24, r2
    15ae:	93 09       	sbc	r25, r3
    15b0:	85 36       	cpi	r24, 0x65	; 101
    15b2:	91 05       	cpc	r25, r1
    15b4:	0c f4       	brge	.+2      	; 0x15b8 <main+0x10e8>
    15b6:	53 c0       	rjmp	.+166    	; 0x165e <main+0x118e>
    15b8:	12 01       	movw	r2, r4
    15ba:	07 c0       	rjmp	.+14     	; 0x15ca <main+0x10fa>
    15bc:	81 e1       	ldi	r24, 0x11	; 17
    15be:	68 2e       	mov	r6, r24
    15c0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totallength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    15c2:	97 e1       	ldi	r25, 0x17	; 23
    15c4:	69 16       	cp	r6, r25
    15c6:	71 04       	cpc	r7, r1
    15c8:	61 f4       	brne	.+24     	; 0x15e2 <main+0x1112>
    15ca:	c2 01       	movw	r24, r4
    15cc:	82 19       	sub	r24, r2
    15ce:	93 09       	sbc	r25, r3
    15d0:	81 5a       	subi	r24, 0xA1	; 161
    15d2:	9f 40       	sbci	r25, 0x0F	; 15
    15d4:	0c f4       	brge	.+2      	; 0x15d8 <main+0x1108>
    15d6:	53 c0       	rjmp	.+166    	; 0x167e <main+0x11ae>
    15d8:	12 01       	movw	r2, r4
    15da:	07 c0       	rjmp	.+14     	; 0x15ea <main+0x111a>
    15dc:	02 e1       	ldi	r16, 0x12	; 18
    15de:	60 2e       	mov	r6, r16
    15e0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    15e2:	b8 e1       	ldi	r27, 0x18	; 24
    15e4:	6b 16       	cp	r6, r27
    15e6:	71 04       	cpc	r7, r1
    15e8:	61 f4       	brne	.+24     	; 0x1602 <main+0x1132>
    15ea:	c2 01       	movw	r24, r4
    15ec:	82 19       	sub	r24, r2
    15ee:	93 09       	sbc	r25, r3
    15f0:	85 36       	cpi	r24, 0x65	; 101
    15f2:	91 05       	cpc	r25, r1
    15f4:	0c f4       	brge	.+2      	; 0x15f8 <main+0x1128>
    15f6:	51 c0       	rjmp	.+162    	; 0x169a <main+0x11ca>
    15f8:	12 01       	movw	r2, r4
    15fa:	07 c0       	rjmp	.+14     	; 0x160a <main+0x113a>
    15fc:	13 e1       	ldi	r17, 0x13	; 19
    15fe:	61 2e       	mov	r6, r17
    1600:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    1602:	29 e1       	ldi	r18, 0x19	; 25
    1604:	62 16       	cp	r6, r18
    1606:	71 04       	cpc	r7, r1
    1608:	51 f4       	brne	.+20     	; 0x161e <main+0x114e>
    160a:	c2 01       	movw	r24, r4
    160c:	82 19       	sub	r24, r2
    160e:	93 09       	sbc	r25, r3
    1610:	81 5a       	subi	r24, 0xA1	; 161
    1612:	9f 40       	sbci	r25, 0x0F	; 15
    1614:	44 f4       	brge	.+16     	; 0x1626 <main+0x1156>
    1616:	51 c0       	rjmp	.+162    	; 0x16ba <main+0x11ea>
    1618:	b4 e1       	ldi	r27, 0x14	; 20
    161a:	6b 2e       	mov	r6, r27
    161c:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totallength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    161e:	8a e1       	ldi	r24, 0x1A	; 26
    1620:	68 16       	cp	r6, r24
    1622:	71 04       	cpc	r7, r1
    1624:	69 f4       	brne	.+26     	; 0x1640 <main+0x1170>
    1626:	c2 01       	movw	r24, r4
    1628:	82 19       	sub	r24, r2
    162a:	93 09       	sbc	r25, r3
    162c:	81 5a       	subi	r24, 0xA1	; 161
    162e:	9f 40       	sbci	r25, 0x0F	; 15
    1630:	0c f4       	brge	.+2      	; 0x1634 <main+0x1164>
    1632:	56 c0       	rjmp	.+172    	; 0x16e0 <main+0x1210>
    1634:	5e 8a       	std	Y+22, r5	; 0x16
    1636:	4d 8a       	std	Y+21, r4	; 0x15
    1638:	07 c0       	rjmp	.+14     	; 0x1648 <main+0x1178>
    163a:	a5 e1       	ldi	r26, 0x15	; 21
    163c:	6a 2e       	mov	r6, r26
    163e:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    1640:	bb e1       	ldi	r27, 0x1B	; 27
    1642:	6b 16       	cp	r6, r27
    1644:	71 04       	cpc	r7, r1
    1646:	71 f4       	brne	.+28     	; 0x1664 <main+0x1194>
    1648:	c2 01       	movw	r24, r4
    164a:	2d 89       	ldd	r18, Y+21	; 0x15
    164c:	3e 89       	ldd	r19, Y+22	; 0x16
    164e:	82 1b       	sub	r24, r18
    1650:	93 0b       	sbc	r25, r19
    1652:	85 36       	cpi	r24, 0x65	; 101
    1654:	91 05       	cpc	r25, r1
    1656:	0c f4       	brge	.+2      	; 0x165a <main+0x118a>
    1658:	56 c0       	rjmp	.+172    	; 0x1706 <main+0x1236>
    165a:	12 01       	movw	r2, r4
    165c:	07 c0       	rjmp	.+14     	; 0x166c <main+0x119c>
    165e:	f6 e1       	ldi	r31, 0x16	; 22
    1660:	6f 2e       	mov	r6, r31
    1662:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    1664:	3c e1       	ldi	r19, 0x1C	; 28
    1666:	63 16       	cp	r6, r19
    1668:	71 04       	cpc	r7, r1
    166a:	61 f4       	brne	.+24     	; 0x1684 <main+0x11b4>
    166c:	c2 01       	movw	r24, r4
    166e:	82 19       	sub	r24, r2
    1670:	93 09       	sbc	r25, r3
    1672:	85 36       	cpi	r24, 0x65	; 101
    1674:	91 05       	cpc	r25, r1
    1676:	0c f4       	brge	.+2      	; 0x167a <main+0x11aa>
    1678:	59 c0       	rjmp	.+178    	; 0x172c <main+0x125c>
    167a:	12 01       	movw	r2, r4
    167c:	07 c0       	rjmp	.+14     	; 0x168c <main+0x11bc>
    167e:	e7 e1       	ldi	r30, 0x17	; 23
    1680:	6e 2e       	mov	r6, r30
    1682:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    1684:	8d e1       	ldi	r24, 0x1D	; 29
    1686:	68 16       	cp	r6, r24
    1688:	71 04       	cpc	r7, r1
    168a:	51 f4       	brne	.+20     	; 0x16a0 <main+0x11d0>
    168c:	c2 01       	movw	r24, r4
    168e:	82 19       	sub	r24, r2
    1690:	93 09       	sbc	r25, r3
    1692:	81 5a       	subi	r24, 0xA1	; 161
    1694:	9f 40       	sbci	r25, 0x0F	; 15
    1696:	44 f4       	brge	.+16     	; 0x16a8 <main+0x11d8>
    1698:	5c c0       	rjmp	.+184    	; 0x1752 <main+0x1282>
    169a:	78 e1       	ldi	r23, 0x18	; 24
    169c:	67 2e       	mov	r6, r23
    169e:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totallength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    16a0:	be e1       	ldi	r27, 0x1E	; 30
    16a2:	6b 16       	cp	r6, r27
    16a4:	71 04       	cpc	r7, r1
    16a6:	61 f4       	brne	.+24     	; 0x16c0 <main+0x11f0>
    16a8:	c2 01       	movw	r24, r4
    16aa:	82 19       	sub	r24, r2
    16ac:	93 09       	sbc	r25, r3
    16ae:	81 5a       	subi	r24, 0xA1	; 161
    16b0:	9f 40       	sbci	r25, 0x0F	; 15
    16b2:	0c f4       	brge	.+2      	; 0x16b6 <main+0x11e6>
    16b4:	62 c0       	rjmp	.+196    	; 0x177a <main+0x12aa>
    16b6:	12 01       	movw	r2, r4
    16b8:	07 c0       	rjmp	.+14     	; 0x16c8 <main+0x11f8>
    16ba:	69 e1       	ldi	r22, 0x19	; 25
    16bc:	66 2e       	mov	r6, r22
    16be:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    16c0:	3f e1       	ldi	r19, 0x1F	; 31
    16c2:	63 16       	cp	r6, r19
    16c4:	71 04       	cpc	r7, r1
    16c6:	79 f4       	brne	.+30     	; 0x16e6 <main+0x1216>
    16c8:	c2 01       	movw	r24, r4
    16ca:	82 19       	sub	r24, r2
    16cc:	93 09       	sbc	r25, r3
    16ce:	89 5e       	subi	r24, 0xE9	; 233
    16d0:	93 40       	sbci	r25, 0x03	; 3
    16d2:	24 f4       	brge	.+8      	; 0x16dc <main+0x120c>
    16d4:	5f e1       	ldi	r21, 0x1F	; 31
    16d6:	65 2e       	mov	r6, r21
    16d8:	71 2c       	mov	r7, r1
    16da:	3c c1       	rjmp	.+632    	; 0x1954 <main+0x1484>
    16dc:	12 01       	movw	r2, r4
    16de:	07 c0       	rjmp	.+14     	; 0x16ee <main+0x121e>
    16e0:	4a e1       	ldi	r20, 0x1A	; 26
    16e2:	64 2e       	mov	r6, r20
    16e4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    16e6:	b0 e2       	ldi	r27, 0x20	; 32
    16e8:	6b 16       	cp	r6, r27
    16ea:	71 04       	cpc	r7, r1
    16ec:	79 f4       	brne	.+30     	; 0x170c <main+0x123c>
    16ee:	c2 01       	movw	r24, r4
    16f0:	82 19       	sub	r24, r2
    16f2:	93 09       	sbc	r25, r3
    16f4:	81 5a       	subi	r24, 0xA1	; 161
    16f6:	9f 40       	sbci	r25, 0x0F	; 15
    16f8:	24 f4       	brge	.+8      	; 0x1702 <main+0x1232>
    16fa:	30 e2       	ldi	r19, 0x20	; 32
    16fc:	63 2e       	mov	r6, r19
    16fe:	71 2c       	mov	r7, r1
    1700:	2f c1       	rjmp	.+606    	; 0x1960 <main+0x1490>
    1702:	12 01       	movw	r2, r4
    1704:	07 c0       	rjmp	.+14     	; 0x1714 <main+0x1244>
    1706:	2b e1       	ldi	r18, 0x1B	; 27
    1708:	62 2e       	mov	r6, r18
    170a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    170c:	31 e2       	ldi	r19, 0x21	; 33
    170e:	63 16       	cp	r6, r19
    1710:	71 04       	cpc	r7, r1
    1712:	79 f4       	brne	.+30     	; 0x1732 <main+0x1262>
    1714:	c2 01       	movw	r24, r4
    1716:	82 19       	sub	r24, r2
    1718:	93 09       	sbc	r25, r3
    171a:	85 36       	cpi	r24, 0x65	; 101
    171c:	91 05       	cpc	r25, r1
    171e:	24 f4       	brge	.+8      	; 0x1728 <main+0x1258>
    1720:	91 e2       	ldi	r25, 0x21	; 33
    1722:	69 2e       	mov	r6, r25
    1724:	71 2c       	mov	r7, r1
    1726:	21 c1       	rjmp	.+578    	; 0x196a <main+0x149a>
    1728:	12 01       	movw	r2, r4
    172a:	07 c0       	rjmp	.+14     	; 0x173a <main+0x126a>
    172c:	8c e1       	ldi	r24, 0x1C	; 28
    172e:	68 2e       	mov	r6, r24
    1730:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate){
    1732:	82 e2       	ldi	r24, 0x22	; 34
    1734:	68 16       	cp	r6, r24
    1736:	71 04       	cpc	r7, r1
    1738:	79 f4       	brne	.+30     	; 0x1758 <main+0x1288>
    173a:	c2 01       	movw	r24, r4
    173c:	82 19       	sub	r24, r2
    173e:	93 09       	sbc	r25, r3
    1740:	81 5a       	subi	r24, 0xA1	; 161
    1742:	9f 40       	sbci	r25, 0x0F	; 15
    1744:	24 f4       	brge	.+8      	; 0x174e <main+0x127e>
    1746:	02 e2       	ldi	r16, 0x22	; 34
    1748:	60 2e       	mov	r6, r16
    174a:	71 2c       	mov	r7, r1
    174c:	1a c1       	rjmp	.+564    	; 0x1982 <main+0x14b2>
    174e:	12 01       	movw	r2, r4
    1750:	07 c0       	rjmp	.+14     	; 0x1760 <main+0x1290>
    1752:	1d e1       	ldi	r17, 0x1D	; 29
    1754:	61 2e       	mov	r6, r17
    1756:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    1758:	b3 e2       	ldi	r27, 0x23	; 35
    175a:	6b 16       	cp	r6, r27
    175c:	71 04       	cpc	r7, r1
    175e:	81 f4       	brne	.+32     	; 0x1780 <main+0x12b0>
    1760:	c2 01       	movw	r24, r4
    1762:	82 19       	sub	r24, r2
    1764:	93 09       	sbc	r25, r3
    1766:	0b 97       	sbiw	r24, 0x0b	; 11
    1768:	24 f0       	brlt	.+8      	; 0x1772 <main+0x12a2>
    176a:	b4 e2       	ldi	r27, 0x24	; 36
    176c:	6b 2e       	mov	r6, r27
    176e:	71 2c       	mov	r7, r1
    1770:	1e c1       	rjmp	.+572    	; 0x19ae <main+0x14de>
    1772:	a3 e2       	ldi	r26, 0x23	; 35
    1774:	6a 2e       	mov	r6, r26
    1776:	71 2c       	mov	r7, r1
    1778:	09 c1       	rjmp	.+530    	; 0x198c <main+0x14bc>
    177a:	fe e1       	ldi	r31, 0x1E	; 30
    177c:	6f 2e       	mov	r6, r31
    177e:	71 2c       	mov	r7, r1
				}


				//state actions
						
				switch (state){
    1780:	f3 01       	movw	r30, r6
    1782:	e4 32       	cpi	r30, 0x24	; 36
    1784:	f1 05       	cpc	r31, r1
    1786:	08 f0       	brcs	.+2      	; 0x178a <main+0x12ba>
    1788:	12 c1       	rjmp	.+548    	; 0x19ae <main+0x14de>
    178a:	e6 59       	subi	r30, 0x96	; 150
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	ee 0f       	add	r30, r30
    1790:	ff 1f       	adc	r31, r31
    1792:	05 90       	lpm	r0, Z+
    1794:	f4 91       	lpm	r31, Z+
    1796:	e0 2d       	mov	r30, r0
    1798:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    179a:	80 91 2a 03 	lds	r24, 0x032A
    179e:	20 91 28 03 	lds	r18, 0x0328
    17a2:	90 91 26 03 	lds	r25, 0x0326
    17a6:	82 ff       	sbrs	r24, 2
    17a8:	07 c0       	rjmp	.+14     	; 0x17b8 <main+0x12e8>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    17aa:	9f 7e       	andi	r25, 0xEF	; 239
    17ac:	90 93 26 03 	sts	0x0326, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    17b0:	27 7f       	andi	r18, 0xF7	; 247
    17b2:	20 93 28 03 	sts	0x0328, r18
    17b6:	16 c0       	rjmp	.+44     	; 0x17e4 <main+0x1314>
						fixtureMotor = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    17b8:	9f 7d       	andi	r25, 0xDF	; 223
    17ba:	90 93 26 03 	sts	0x0326, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    17be:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    17c0:	28 60       	ori	r18, 0x08	; 8
    17c2:	20 93 28 03 	sts	0x0328, r18
						if(print0 == 1){
    17c6:	2f 85       	ldd	r18, Y+15	; 0x0f
    17c8:	38 89       	ldd	r19, Y+16	; 0x10
    17ca:	21 30       	cpi	r18, 0x01	; 1
    17cc:	31 05       	cpc	r19, r1
    17ce:	51 f4       	brne	.+20     	; 0x17e4 <main+0x1314>
							OrangutanLCD::gotoXY(0,1);
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	61 e0       	ldi	r22, 0x01	; 1
    17d4:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    17d8:	8f ee       	ldi	r24, 0xEF	; 239
    17da:	92 e0       	ldi	r25, 0x02	; 2
    17dc:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
    17e0:	18 8a       	std	Y+16, r1	; 0x10
    17e2:	1f 86       	std	Y+15, r1	; 0x0f
							print0 = 0;
						}
					}
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    17e4:	20 91 28 03 	lds	r18, 0x0328
    17e8:	32 2f       	mov	r19, r18
    17ea:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    17ec:	c2 01       	movw	r24, r4
    17ee:	68 ec       	ldi	r22, 0xC8	; 200
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__divmodhi4>
    17f6:	84 36       	cpi	r24, 0x64	; 100
    17f8:	91 05       	cpc	r25, r1
    17fa:	24 f4       	brge	.+8      	; 0x1804 <main+0x1334>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    17fc:	2c 7f       	andi	r18, 0xFC	; 252
    17fe:	20 93 28 03 	sts	0x0328, r18
    1802:	03 c0       	rjmp	.+6      	; 0x180a <main+0x133a>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1804:	32 60       	ori	r19, 0x02	; 2
    1806:	30 93 28 03 	sts	0x0328, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
    180a:	80 91 26 03 	lds	r24, 0x0326
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    180e:	86 60       	ori	r24, 0x06	; 6
    1810:	80 93 26 03 	sts	0x0326, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1814:	80 91 28 03 	lds	r24, 0x0328
    1818:	8b 7f       	andi	r24, 0xFB	; 251
    181a:	80 93 28 03 	sts	0x0328, r24
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    181e:	80 91 28 03 	lds	r24, 0x0328
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1822:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1824:	86 61       	ori	r24, 0x16	; 22
    1826:	80 93 28 03 	sts	0x0328, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    182a:	80 91 26 03 	lds	r24, 0x0326
    182e:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    1830:	8b 7f       	andi	r24, 0xFB	; 251
    1832:	80 93 26 03 	sts	0x0326, r24
				case FIXL:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
    1836:	80 91 26 03 	lds	r24, 0x0326
    183a:	80 61       	ori	r24, 0x10	; 16
    183c:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1840:	80 91 26 03 	lds	r24, 0x0326
    1844:	8f 7d       	andi	r24, 0xDF	; 223
    1846:	80 93 26 03 	sts	0x0326, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    184a:	80 91 28 03 	lds	r24, 0x0328
    184e:	88 60       	ori	r24, 0x08	; 8
    1850:	80 93 28 03 	sts	0x0328, r24
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1854:	80 91 28 03 	lds	r24, 0x0328
    1858:	8f 7e       	andi	r24, 0xEF	; 239
    185a:	80 93 28 03 	sts	0x0328, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    185e:	80 91 26 03 	lds	r24, 0x0326
    1862:	80 62       	ori	r24, 0x20	; 32
    1864:	80 93 26 03 	sts	0x0326, r24
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1868:	80 91 26 03 	lds	r24, 0x0326
    186c:	80 61       	ori	r24, 0x10	; 16
    186e:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
    1872:	80 91 27 03 	lds	r24, 0x0327
    1876:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1878:	8b 7f       	andi	r24, 0xFB	; 251
    187a:	80 93 27 03 	sts	0x0327, r24
						OrangutanLCD::print("Clean 2");
						print15 = 0;
					}*/
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    187e:	80 91 29 03 	lds	r24, 0x0329
    1882:	81 60       	ori	r24, 0x01	; 1
    1884:	80 93 29 03 	sts	0x0329, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1888:	80 91 28 03 	lds	r24, 0x0328
    188c:	8f 77       	andi	r24, 0x7F	; 127
    188e:	80 93 28 03 	sts	0x0328, r24
				case CLEAN2_1:
					fixtureMotor = 1;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1892:	80 91 26 03 	lds	r24, 0x0326
    1896:	8f 7e       	andi	r24, 0xEF	; 239
    1898:	80 93 26 03 	sts	0x0326, r24
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    189c:	80 91 29 03 	lds	r24, 0x0329
    18a0:	8e 7f       	andi	r24, 0xFE	; 254
    18a2:	80 93 29 03 	sts	0x0329, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    18a6:	80 91 28 03 	lds	r24, 0x0328
    18aa:	80 68       	ori	r24, 0x80	; 128
    18ac:	80 93 28 03 	sts	0x0328, r24
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    18b0:	80 91 26 03 	lds	r24, 0x0326
    18b4:	80 61       	ori	r24, 0x10	; 16
    18b6:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    18ba:	80 91 27 03 	lds	r24, 0x0327
    18be:	8b 7f       	andi	r24, 0xFB	; 251
    18c0:	80 93 27 03 	sts	0x0327, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    18c4:	80 91 29 03 	lds	r24, 0x0329
    18c8:	81 60       	ori	r24, 0x01	; 1
    18ca:	80 93 29 03 	sts	0x0329, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    18ce:	80 91 28 03 	lds	r24, 0x0328
    18d2:	8f 77       	andi	r24, 0x7F	; 127
    18d4:	80 93 28 03 	sts	0x0328, r24
				case CLEAN2_3:
					fixtureMotor = 1;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    18d8:	80 91 29 03 	lds	r24, 0x0329
    18dc:	8e 7f       	andi	r24, 0xFE	; 254
    18de:	80 93 29 03 	sts	0x0329, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    18e2:	80 91 28 03 	lds	r24, 0x0328
    18e6:	80 68       	ori	r24, 0x80	; 128
    18e8:	80 93 28 03 	sts	0x0328, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
    18ec:	80 91 27 03 	lds	r24, 0x0327
    18f0:	87 7f       	andi	r24, 0xF7	; 247
    18f2:	80 93 27 03 	sts	0x0327, r24
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    18f6:	80 91 26 03 	lds	r24, 0x0326
    18fa:	80 61       	ori	r24, 0x10	; 16
    18fc:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
    1900:	80 91 27 03 	lds	r24, 0x0327
    1904:	8e 7f       	andi	r24, 0xFE	; 254
    1906:	80 93 27 03 	sts	0x0327, r24
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    190a:	80 91 29 03 	lds	r24, 0x0329
    190e:	87 7f       	andi	r24, 0xF7	; 247
    1910:	80 93 29 03 	sts	0x0329, r24
						OrangutanLCD::clear();
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1914:	80 91 26 03 	lds	r24, 0x0326
    1918:	8f 7e       	andi	r24, 0xEF	; 239
    191a:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    191e:	80 91 29 03 	lds	r24, 0x0329
    1922:	88 60       	ori	r24, 0x08	; 8
    1924:	80 93 29 03 	sts	0x0329, r24
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
    1928:	80 91 27 03 	lds	r24, 0x0327
    192c:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    192e:	8f 7d       	andi	r24, 0xDF	; 223
    1930:	80 93 27 03 	sts	0x0327, r24
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1934:	80 91 29 03 	lds	r24, 0x0329
    1938:	8d 7f       	andi	r24, 0xFD	; 253
    193a:	80 93 29 03 	sts	0x0329, r24
				case DRY2:
					fixtureMotor = 1;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    193e:	80 91 27 03 	lds	r24, 0x0327
    1942:	8f 7b       	andi	r24, 0xBF	; 191
    1944:	80 93 27 03 	sts	0x0327, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1948:	80 91 29 03 	lds	r24, 0x0329
    194c:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    194e:	8b 7f       	andi	r24, 0xFB	; 251
    1950:	80 93 29 03 	sts	0x0329, r24
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1954:	80 91 28 03 	lds	r24, 0x0328
    1958:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    195a:	80 61       	ori	r24, 0x10	; 16
    195c:	80 93 28 03 	sts	0x0328, r24
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1960:	80 91 26 03 	lds	r24, 0x0326
    1964:	8f 7e       	andi	r24, 0xEF	; 239
    1966:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    196a:	80 91 26 03 	lds	r24, 0x0326
    196e:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    1970:	84 60       	ori	r24, 0x04	; 4
    1972:	80 93 26 03 	sts	0x0326, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1976:	80 91 28 03 	lds	r24, 0x0328
    197a:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    197c:	8f 7e       	andi	r24, 0xEF	; 239
    197e:	80 93 28 03 	sts	0x0328, r24
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1982:	80 91 26 03 	lds	r24, 0x0326
    1986:	8d 7f       	andi	r24, 0xFD	; 253
    1988:	80 93 26 03 	sts	0x0326, r24
					plateLoadMotor = 1;
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    198c:	80 91 26 03 	lds	r24, 0x0326
    1990:	8b 7f       	andi	r24, 0xFB	; 251
    1992:	80 93 26 03 	sts	0x0326, r24
					if(print35 == 1){
    1996:	8b 85       	ldd	r24, Y+11	; 0x0b
    1998:	9c 85       	ldd	r25, Y+12	; 0x0c
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	31 f4       	brne	.+12     	; 0x19aa <main+0x14da>
						OrangutanLCD::clear();
    199e:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    19a2:	8d ef       	ldi	r24, 0xFD	; 253
    19a4:	92 e0       	ldi	r25, 0x02	; 2
    19a6:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
    19aa:	1c 86       	std	Y+12, r1	; 0x0c
    19ac:	1b 86       	std	Y+11, r1	; 0x0b
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
    19ae:	ad b7       	in	r26, 0x3d	; 61
    19b0:	be b7       	in	r27, 0x3e	; 62
    19b2:	52 97       	sbiw	r26, 0x12	; 18
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	be bf       	out	0x3e, r27	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	ad bf       	out	0x3d, r26	; 61
    19be:	ed b7       	in	r30, 0x3d	; 61
    19c0:	fe b7       	in	r31, 0x3e	; 62
    19c2:	31 96       	adiw	r30, 0x01	; 1
    19c4:	82 e0       	ldi	r24, 0x02	; 2
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	12 96       	adiw	r26, 0x02	; 2
    19ca:	9c 93       	st	X, r25
    19cc:	8e 93       	st	-X, r24
    19ce:	11 97       	sbiw	r26, 0x01	; 1
    19d0:	93 83       	std	Z+3, r25	; 0x03
    19d2:	82 83       	std	Z+2, r24	; 0x02
    19d4:	95 83       	std	Z+5, r25	; 0x05
    19d6:	84 83       	std	Z+4, r24	; 0x04
    19d8:	97 83       	std	Z+7, r25	; 0x07
    19da:	86 83       	std	Z+6, r24	; 0x06
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	91 87       	std	Z+9, r25	; 0x09
    19e2:	80 87       	std	Z+8, r24	; 0x08
    19e4:	93 87       	std	Z+11, r25	; 0x0b
    19e6:	82 87       	std	Z+10, r24	; 0x0a
    19e8:	95 87       	std	Z+13, r25	; 0x0d
    19ea:	84 87       	std	Z+12, r24	; 0x0c
    19ec:	97 87       	std	Z+15, r25	; 0x0f
    19ee:	86 87       	std	Z+14, r24	; 0x0e
    19f0:	91 8b       	std	Z+17, r25	; 0x11
    19f2:	80 8b       	std	Z+16, r24	; 0x10
    19f4:	c2 01       	movw	r24, r4
    19f6:	b1 01       	movw	r22, r2
    19f8:	4d 89       	ldd	r20, Y+21	; 0x15
    19fa:	5e 89       	ldd	r21, Y+22	; 0x16
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	00 e0       	ldi	r16, 0x00	; 0
    1a02:	10 e0       	ldi	r17, 0x00	; 0
    1a04:	ee 24       	eor	r14, r14
    1a06:	ff 24       	eor	r15, r15
    1a08:	cc 24       	eor	r12, r12
    1a0a:	dd 24       	eor	r13, r13
    1a0c:	aa 24       	eor	r10, r10
    1a0e:	bb 24       	eor	r11, r11
    1a10:	e2 e0       	ldi	r30, 0x02	; 2
    1a12:	8e 2e       	mov	r8, r30
    1a14:	91 2c       	mov	r9, r1
    1a16:	0e 94 b3 01 	call	0x366	; 0x366 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    1a1a:	2d b7       	in	r18, 0x3d	; 61
    1a1c:	3e b7       	in	r19, 0x3e	; 62
    1a1e:	2e 5e       	subi	r18, 0xEE	; 238
    1a20:	3f 4f       	sbci	r19, 0xFF	; 255
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	3e bf       	out	0x3e, r19	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	2d bf       	out	0x3d, r18	; 61
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("SECOND B");
			while(state != DONER)
    1a34:	34 e2       	ldi	r19, 0x24	; 36
    1a36:	63 16       	cp	r6, r19
    1a38:	71 04       	cpc	r7, r1
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <main+0x156e>
    1a3c:	14 c4       	rjmp	.+2088   	; 0x2266 <main+0x1d96>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);

				counter ++;
    1a3e:	08 94       	sec
    1a40:	41 1c       	adc	r4, r1
    1a42:	51 1c       	adc	r5, r1
    1a44:	ba cc       	rjmp	.-1676   	; 0x13ba <main+0xeea>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    1a46:	82 e0       	ldi	r24, 0x02	; 2
    1a48:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
    1a4c:	88 23       	and	r24, r24
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <main+0x1582>
    1a50:	0a c4       	rjmp	.+2068   	; 0x2266 <main+0x1d96>
			OrangutanLCD::gotoXY(7,0);
    1a52:	87 e0       	ldi	r24, 0x07	; 7
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("BOTH B");
    1a5a:	83 e1       	ldi	r24, 0x13	; 19
    1a5c:	93 e0       	ldi	r25, 0x03	; 3
    1a5e:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9e 87       	std	Y+14, r25	; 0x0e
    1a68:	8d 87       	std	Y+13, r24	; 0x0d
    1a6a:	9a 87       	std	Y+10, r25	; 0x0a
    1a6c:	89 87       	std	Y+9, r24	; 0x09
    1a6e:	66 24       	eor	r6, r6
    1a70:	77 24       	eor	r7, r7
    1a72:	44 24       	eor	r4, r4
    1a74:	55 24       	eor	r5, r5
    1a76:	22 24       	eor	r2, r2
    1a78:	33 24       	eor	r3, r3
    1a7a:	18 86       	std	Y+8, r1	; 0x08
    1a7c:	1f 82       	std	Y+7, r1	; 0x07
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1a7e:	84 e4       	ldi	r24, 0x44	; 68
    1a80:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1a8a:	85 e4       	ldi	r24, 0x45	; 69
    1a8c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1a90:	0e 94 df 11 	call	0x23be	; 0x23be <_Z11i2c_readAckv>
    1a94:	80 93 2a 03 	sts	0x032A, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1a98:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_Z11i2c_readNakv>
    1a9c:	80 93 2b 03 	sts	0x032B, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1aa0:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z8i2c_stopv>
				
				if(state != INIT){
    1aa4:	61 14       	cp	r6, r1
    1aa6:	71 04       	cpc	r7, r1
    1aa8:	79 f0       	breq	.+30     	; 0x1ac8 <main+0x15f8>
					OrangutanLCD::gotoXY(0,1);
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1ab2:	88 ee       	ldi	r24, 0xE8	; 232
    1ab4:	92 e0       	ldi	r25, 0x02	; 2
    1ab6:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
    1aba:	b3 01       	movw	r22, r6
    1abc:	88 27       	eor	r24, r24
    1abe:	77 fd       	sbrc	r23, 7
    1ac0:	80 95       	com	r24
    1ac2:	98 2f       	mov	r25, r24
    1ac4:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN12OrangutanLCD5printEl>
						button = 0;
						stateButton = 0;
					}
				}*/

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1ac8:	c2 01       	movw	r24, r4
    1aca:	be 01       	movw	r22, r28
    1acc:	6f 5f       	subi	r22, 0xFF	; 255
    1ace:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    1ad4:	61 14       	cp	r6, r1
    1ad6:	71 04       	cpc	r7, r1
    1ad8:	29 f4       	brne	.+10     	; 0x1ae4 <main+0x1614>
    1ada:	88 23       	and	r24, r24
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <main+0x1610>
    1ade:	43 c0       	rjmp	.+134    	; 0x1b66 <main+0x1696>
    1ae0:	12 01       	movw	r2, r4
    1ae2:	04 c0       	rjmp	.+8      	; 0x1aec <main+0x161c>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    1ae4:	91 e0       	ldi	r25, 0x01	; 1
    1ae6:	69 16       	cp	r6, r25
    1ae8:	71 04       	cpc	r7, r1
    1aea:	49 f4       	brne	.+18     	; 0x1afe <main+0x162e>
    1aec:	c2 01       	movw	r24, r4
    1aee:	82 19       	sub	r24, r2
    1af0:	93 09       	sbc	r25, r3
    1af2:	81 5a       	subi	r24, 0xA1	; 161
    1af4:	9f 40       	sbci	r25, 0x0F	; 15
    1af6:	0c f4       	brge	.+2      	; 0x1afa <main+0x162a>
    1af8:	43 c0       	rjmp	.+134    	; 0x1b80 <main+0x16b0>
    1afa:	12 01       	movw	r2, r4
    1afc:	04 c0       	rjmp	.+8      	; 0x1b06 <main+0x1636>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    1afe:	b2 e0       	ldi	r27, 0x02	; 2
    1b00:	6b 16       	cp	r6, r27
    1b02:	71 04       	cpc	r7, r1
    1b04:	49 f4       	brne	.+18     	; 0x1b18 <main+0x1648>
    1b06:	c2 01       	movw	r24, r4
    1b08:	82 19       	sub	r24, r2
    1b0a:	93 09       	sbc	r25, r3
    1b0c:	85 36       	cpi	r24, 0x65	; 101
    1b0e:	91 05       	cpc	r25, r1
    1b10:	0c f4       	brge	.+2      	; 0x1b14 <main+0x1644>
    1b12:	46 c0       	rjmp	.+140    	; 0x1ba0 <main+0x16d0>
    1b14:	12 01       	movw	r2, r4
    1b16:	04 c0       	rjmp	.+8      	; 0x1b20 <main+0x1650>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1b18:	23 e0       	ldi	r18, 0x03	; 3
    1b1a:	62 16       	cp	r6, r18
    1b1c:	71 04       	cpc	r7, r1
    1b1e:	49 f4       	brne	.+18     	; 0x1b32 <main+0x1662>
    1b20:	c2 01       	movw	r24, r4
    1b22:	82 19       	sub	r24, r2
    1b24:	93 09       	sbc	r25, r3
    1b26:	81 5a       	subi	r24, 0xA1	; 161
    1b28:	9f 40       	sbci	r25, 0x0F	; 15
    1b2a:	0c f4       	brge	.+2      	; 0x1b2e <main+0x165e>
    1b2c:	49 c0       	rjmp	.+146    	; 0x1bc0 <main+0x16f0>
    1b2e:	12 01       	movw	r2, r4
    1b30:	04 c0       	rjmp	.+8      	; 0x1b3a <main+0x166a>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1b32:	84 e0       	ldi	r24, 0x04	; 4
    1b34:	68 16       	cp	r6, r24
    1b36:	71 04       	cpc	r7, r1
    1b38:	49 f4       	brne	.+18     	; 0x1b4c <main+0x167c>
    1b3a:	c2 01       	movw	r24, r4
    1b3c:	82 19       	sub	r24, r2
    1b3e:	93 09       	sbc	r25, r3
    1b40:	89 5e       	subi	r24, 0xE9	; 233
    1b42:	93 40       	sbci	r25, 0x03	; 3
    1b44:	0c f4       	brge	.+2      	; 0x1b48 <main+0x1678>
    1b46:	4c c0       	rjmp	.+152    	; 0x1be0 <main+0x1710>
    1b48:	12 01       	movw	r2, r4
    1b4a:	04 c0       	rjmp	.+8      	; 0x1b54 <main+0x1684>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    1b4c:	b5 e0       	ldi	r27, 0x05	; 5
    1b4e:	6b 16       	cp	r6, r27
    1b50:	71 04       	cpc	r7, r1
    1b52:	49 f4       	brne	.+18     	; 0x1b66 <main+0x1696>
    1b54:	c2 01       	movw	r24, r4
    1b56:	82 19       	sub	r24, r2
    1b58:	93 09       	sbc	r25, r3
    1b5a:	85 36       	cpi	r24, 0x65	; 101
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	0c f4       	brge	.+2      	; 0x1b62 <main+0x1692>
    1b60:	4d c0       	rjmp	.+154    	; 0x1bfc <main+0x172c>
    1b62:	12 01       	movw	r2, r4
    1b64:	04 c0       	rjmp	.+8      	; 0x1b6e <main+0x169e>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totallength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1b66:	26 e0       	ldi	r18, 0x06	; 6
    1b68:	62 16       	cp	r6, r18
    1b6a:	71 04       	cpc	r7, r1
    1b6c:	61 f4       	brne	.+24     	; 0x1b86 <main+0x16b6>
    1b6e:	c2 01       	movw	r24, r4
    1b70:	82 19       	sub	r24, r2
    1b72:	93 09       	sbc	r25, r3
    1b74:	81 5a       	subi	r24, 0xA1	; 161
    1b76:	9f 40       	sbci	r25, 0x0F	; 15
    1b78:	0c f4       	brge	.+2      	; 0x1b7c <main+0x16ac>
    1b7a:	50 c0       	rjmp	.+160    	; 0x1c1c <main+0x174c>
    1b7c:	12 01       	movw	r2, r4
    1b7e:	07 c0       	rjmp	.+14     	; 0x1b8e <main+0x16be>
    1b80:	21 e0       	ldi	r18, 0x01	; 1
    1b82:	62 2e       	mov	r6, r18
    1b84:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    1b86:	87 e0       	ldi	r24, 0x07	; 7
    1b88:	68 16       	cp	r6, r24
    1b8a:	71 04       	cpc	r7, r1
    1b8c:	61 f4       	brne	.+24     	; 0x1ba6 <main+0x16d6>
    1b8e:	c2 01       	movw	r24, r4
    1b90:	82 19       	sub	r24, r2
    1b92:	93 09       	sbc	r25, r3
    1b94:	85 36       	cpi	r24, 0x65	; 101
    1b96:	91 05       	cpc	r25, r1
    1b98:	0c f4       	brge	.+2      	; 0x1b9c <main+0x16cc>
    1b9a:	50 c0       	rjmp	.+160    	; 0x1c3c <main+0x176c>
    1b9c:	12 01       	movw	r2, r4
    1b9e:	07 c0       	rjmp	.+14     	; 0x1bae <main+0x16de>
    1ba0:	92 e0       	ldi	r25, 0x02	; 2
    1ba2:	69 2e       	mov	r6, r25
    1ba4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    1ba6:	98 e0       	ldi	r25, 0x08	; 8
    1ba8:	69 16       	cp	r6, r25
    1baa:	71 04       	cpc	r7, r1
    1bac:	61 f4       	brne	.+24     	; 0x1bc6 <main+0x16f6>
    1bae:	c2 01       	movw	r24, r4
    1bb0:	82 19       	sub	r24, r2
    1bb2:	93 09       	sbc	r25, r3
    1bb4:	85 36       	cpi	r24, 0x65	; 101
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	0c f4       	brge	.+2      	; 0x1bbc <main+0x16ec>
    1bba:	4e c0       	rjmp	.+156    	; 0x1c58 <main+0x1788>
    1bbc:	12 01       	movw	r2, r4
    1bbe:	07 c0       	rjmp	.+14     	; 0x1bce <main+0x16fe>
    1bc0:	83 e0       	ldi	r24, 0x03	; 3
    1bc2:	68 2e       	mov	r6, r24
    1bc4:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    1bc6:	a9 e0       	ldi	r26, 0x09	; 9
    1bc8:	6a 16       	cp	r6, r26
    1bca:	71 04       	cpc	r7, r1
    1bcc:	61 f4       	brne	.+24     	; 0x1be6 <main+0x1716>
    1bce:	c2 01       	movw	r24, r4
    1bd0:	82 19       	sub	r24, r2
    1bd2:	93 09       	sbc	r25, r3
    1bd4:	81 5a       	subi	r24, 0xA1	; 161
    1bd6:	9f 40       	sbci	r25, 0x0F	; 15
    1bd8:	0c f4       	brge	.+2      	; 0x1bdc <main+0x170c>
    1bda:	4e c0       	rjmp	.+156    	; 0x1c78 <main+0x17a8>
    1bdc:	12 01       	movw	r2, r4
    1bde:	07 c0       	rjmp	.+14     	; 0x1bee <main+0x171e>
    1be0:	04 e0       	ldi	r16, 0x04	; 4
    1be2:	60 2e       	mov	r6, r16
    1be4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    1be6:	2a e0       	ldi	r18, 0x0A	; 10
    1be8:	62 16       	cp	r6, r18
    1bea:	71 04       	cpc	r7, r1
    1bec:	51 f4       	brne	.+20     	; 0x1c02 <main+0x1732>
    1bee:	c2 01       	movw	r24, r4
    1bf0:	82 19       	sub	r24, r2
    1bf2:	93 09       	sbc	r25, r3
    1bf4:	85 36       	cpi	r24, 0x65	; 101
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	44 f4       	brge	.+16     	; 0x1c0a <main+0x173a>
    1bfa:	4e c0       	rjmp	.+156    	; 0x1c98 <main+0x17c8>
    1bfc:	15 e0       	ldi	r17, 0x05	; 5
    1bfe:	61 2e       	mov	r6, r17
    1c00:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totallength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1c02:	3b e0       	ldi	r19, 0x0B	; 11
    1c04:	63 16       	cp	r6, r19
    1c06:	71 04       	cpc	r7, r1
    1c08:	61 f4       	brne	.+24     	; 0x1c22 <main+0x1752>
    1c0a:	c2 01       	movw	r24, r4
    1c0c:	82 19       	sub	r24, r2
    1c0e:	93 09       	sbc	r25, r3
    1c10:	81 5a       	subi	r24, 0xA1	; 161
    1c12:	9f 40       	sbci	r25, 0x0F	; 15
    1c14:	0c f4       	brge	.+2      	; 0x1c18 <main+0x1748>
    1c16:	50 c0       	rjmp	.+160    	; 0x1cb8 <main+0x17e8>
    1c18:	12 01       	movw	r2, r4
    1c1a:	07 c0       	rjmp	.+14     	; 0x1c2a <main+0x175a>
    1c1c:	b6 e0       	ldi	r27, 0x06	; 6
    1c1e:	6b 2e       	mov	r6, r27
    1c20:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    1c22:	bc e0       	ldi	r27, 0x0C	; 12
    1c24:	6b 16       	cp	r6, r27
    1c26:	71 04       	cpc	r7, r1
    1c28:	61 f4       	brne	.+24     	; 0x1c42 <main+0x1772>
    1c2a:	c2 01       	movw	r24, r4
    1c2c:	82 19       	sub	r24, r2
    1c2e:	93 09       	sbc	r25, r3
    1c30:	85 36       	cpi	r24, 0x65	; 101
    1c32:	91 05       	cpc	r25, r1
    1c34:	0c f4       	brge	.+2      	; 0x1c38 <main+0x1768>
    1c36:	50 c0       	rjmp	.+160    	; 0x1cd8 <main+0x1808>
    1c38:	12 01       	movw	r2, r4
    1c3a:	07 c0       	rjmp	.+14     	; 0x1c4a <main+0x177a>
    1c3c:	a7 e0       	ldi	r26, 0x07	; 7
    1c3e:	6a 2e       	mov	r6, r26
    1c40:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    1c42:	2d e0       	ldi	r18, 0x0D	; 13
    1c44:	62 16       	cp	r6, r18
    1c46:	71 04       	cpc	r7, r1
    1c48:	51 f4       	brne	.+20     	; 0x1c5e <main+0x178e>
    1c4a:	c2 01       	movw	r24, r4
    1c4c:	82 19       	sub	r24, r2
    1c4e:	93 09       	sbc	r25, r3
    1c50:	81 5a       	subi	r24, 0xA1	; 161
    1c52:	9f 40       	sbci	r25, 0x0F	; 15
    1c54:	44 f4       	brge	.+16     	; 0x1c66 <main+0x1796>
    1c56:	50 c0       	rjmp	.+160    	; 0x1cf8 <main+0x1828>
    1c58:	f8 e0       	ldi	r31, 0x08	; 8
    1c5a:	6f 2e       	mov	r6, r31
    1c5c:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
				}
				if(state == B1STOP2 && counter - counterRef > totallength2*fixtureMotorBrush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    1c5e:	8e e0       	ldi	r24, 0x0E	; 14
    1c60:	68 16       	cp	r6, r24
    1c62:	71 04       	cpc	r7, r1
    1c64:	61 f4       	brne	.+24     	; 0x1c7e <main+0x17ae>
    1c66:	c2 01       	movw	r24, r4
    1c68:	82 19       	sub	r24, r2
    1c6a:	93 09       	sbc	r25, r3
    1c6c:	81 5a       	subi	r24, 0xA1	; 161
    1c6e:	9f 40       	sbci	r25, 0x0F	; 15
    1c70:	0c f4       	brge	.+2      	; 0x1c74 <main+0x17a4>
    1c72:	52 c0       	rjmp	.+164    	; 0x1d18 <main+0x1848>
    1c74:	12 01       	movw	r2, r4
    1c76:	07 c0       	rjmp	.+14     	; 0x1c86 <main+0x17b6>
    1c78:	e9 e0       	ldi	r30, 0x09	; 9
    1c7a:	6e 2e       	mov	r6, r30
    1c7c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    1c7e:	bf e0       	ldi	r27, 0x0F	; 15
    1c80:	6b 16       	cp	r6, r27
    1c82:	71 04       	cpc	r7, r1
    1c84:	61 f4       	brne	.+24     	; 0x1c9e <main+0x17ce>
    1c86:	c2 01       	movw	r24, r4
    1c88:	82 19       	sub	r24, r2
    1c8a:	93 09       	sbc	r25, r3
    1c8c:	85 36       	cpi	r24, 0x65	; 101
    1c8e:	91 05       	cpc	r25, r1
    1c90:	0c f4       	brge	.+2      	; 0x1c94 <main+0x17c4>
    1c92:	52 c0       	rjmp	.+164    	; 0x1d38 <main+0x1868>
    1c94:	12 01       	movw	r2, r4
    1c96:	07 c0       	rjmp	.+14     	; 0x1ca6 <main+0x17d6>
    1c98:	7a e0       	ldi	r23, 0x0A	; 10
    1c9a:	67 2e       	mov	r6, r23
    1c9c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    1c9e:	20 e1       	ldi	r18, 0x10	; 16
    1ca0:	62 16       	cp	r6, r18
    1ca2:	71 04       	cpc	r7, r1
    1ca4:	61 f4       	brne	.+24     	; 0x1cbe <main+0x17ee>
    1ca6:	c2 01       	movw	r24, r4
    1ca8:	82 19       	sub	r24, r2
    1caa:	93 09       	sbc	r25, r3
    1cac:	85 36       	cpi	r24, 0x65	; 101
    1cae:	91 05       	cpc	r25, r1
    1cb0:	0c f4       	brge	.+2      	; 0x1cb4 <main+0x17e4>
    1cb2:	52 c0       	rjmp	.+164    	; 0x1d58 <main+0x1888>
    1cb4:	12 01       	movw	r2, r4
    1cb6:	07 c0       	rjmp	.+14     	; 0x1cc6 <main+0x17f6>
    1cb8:	6b e0       	ldi	r22, 0x0B	; 11
    1cba:	66 2e       	mov	r6, r22
    1cbc:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    1cbe:	31 e1       	ldi	r19, 0x11	; 17
    1cc0:	63 16       	cp	r6, r19
    1cc2:	71 04       	cpc	r7, r1
    1cc4:	61 f4       	brne	.+24     	; 0x1cde <main+0x180e>
    1cc6:	c2 01       	movw	r24, r4
    1cc8:	82 19       	sub	r24, r2
    1cca:	93 09       	sbc	r25, r3
    1ccc:	81 5a       	subi	r24, 0xA1	; 161
    1cce:	9f 40       	sbci	r25, 0x0F	; 15
    1cd0:	0c f4       	brge	.+2      	; 0x1cd4 <main+0x1804>
    1cd2:	52 c0       	rjmp	.+164    	; 0x1d78 <main+0x18a8>
    1cd4:	12 01       	movw	r2, r4
    1cd6:	07 c0       	rjmp	.+14     	; 0x1ce6 <main+0x1816>
    1cd8:	5c e0       	ldi	r21, 0x0C	; 12
    1cda:	65 2e       	mov	r6, r21
    1cdc:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    1cde:	b2 e1       	ldi	r27, 0x12	; 18
    1ce0:	6b 16       	cp	r6, r27
    1ce2:	71 04       	cpc	r7, r1
    1ce4:	61 f4       	brne	.+24     	; 0x1cfe <main+0x182e>
    1ce6:	c2 01       	movw	r24, r4
    1ce8:	82 19       	sub	r24, r2
    1cea:	93 09       	sbc	r25, r3
    1cec:	85 36       	cpi	r24, 0x65	; 101
    1cee:	91 05       	cpc	r25, r1
    1cf0:	0c f4       	brge	.+2      	; 0x1cf4 <main+0x1824>
    1cf2:	52 c0       	rjmp	.+164    	; 0x1d98 <main+0x18c8>
    1cf4:	12 01       	movw	r2, r4
    1cf6:	07 c0       	rjmp	.+14     	; 0x1d06 <main+0x1836>
    1cf8:	4d e0       	ldi	r20, 0x0D	; 13
    1cfa:	64 2e       	mov	r6, r20
    1cfc:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totallength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    1cfe:	23 e1       	ldi	r18, 0x13	; 19
    1d00:	62 16       	cp	r6, r18
    1d02:	71 04       	cpc	r7, r1
    1d04:	61 f4       	brne	.+24     	; 0x1d1e <main+0x184e>
    1d06:	c2 01       	movw	r24, r4
    1d08:	82 19       	sub	r24, r2
    1d0a:	93 09       	sbc	r25, r3
    1d0c:	81 5a       	subi	r24, 0xA1	; 161
    1d0e:	9f 40       	sbci	r25, 0x0F	; 15
    1d10:	0c f4       	brge	.+2      	; 0x1d14 <main+0x1844>
    1d12:	52 c0       	rjmp	.+164    	; 0x1db8 <main+0x18e8>
    1d14:	12 01       	movw	r2, r4
    1d16:	07 c0       	rjmp	.+14     	; 0x1d26 <main+0x1856>
    1d18:	3e e0       	ldi	r19, 0x0E	; 14
    1d1a:	63 2e       	mov	r6, r19
    1d1c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    1d1e:	84 e1       	ldi	r24, 0x14	; 20
    1d20:	68 16       	cp	r6, r24
    1d22:	71 04       	cpc	r7, r1
    1d24:	61 f4       	brne	.+24     	; 0x1d3e <main+0x186e>
    1d26:	c2 01       	movw	r24, r4
    1d28:	82 19       	sub	r24, r2
    1d2a:	93 09       	sbc	r25, r3
    1d2c:	85 36       	cpi	r24, 0x65	; 101
    1d2e:	91 05       	cpc	r25, r1
    1d30:	0c f4       	brge	.+2      	; 0x1d34 <main+0x1864>
    1d32:	50 c0       	rjmp	.+160    	; 0x1dd4 <main+0x1904>
    1d34:	12 01       	movw	r2, r4
    1d36:	07 c0       	rjmp	.+14     	; 0x1d46 <main+0x1876>
    1d38:	2f e0       	ldi	r18, 0x0F	; 15
    1d3a:	62 2e       	mov	r6, r18
    1d3c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    1d3e:	95 e1       	ldi	r25, 0x15	; 21
    1d40:	69 16       	cp	r6, r25
    1d42:	71 04       	cpc	r7, r1
    1d44:	61 f4       	brne	.+24     	; 0x1d5e <main+0x188e>
    1d46:	c2 01       	movw	r24, r4
    1d48:	82 19       	sub	r24, r2
    1d4a:	93 09       	sbc	r25, r3
    1d4c:	81 5a       	subi	r24, 0xA1	; 161
    1d4e:	9f 40       	sbci	r25, 0x0F	; 15
    1d50:	0c f4       	brge	.+2      	; 0x1d54 <main+0x1884>
    1d52:	51 c0       	rjmp	.+162    	; 0x1df6 <main+0x1926>
    1d54:	12 01       	movw	r2, r4
    1d56:	07 c0       	rjmp	.+14     	; 0x1d66 <main+0x1896>
    1d58:	90 e1       	ldi	r25, 0x10	; 16
    1d5a:	69 2e       	mov	r6, r25
    1d5c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    1d5e:	b6 e1       	ldi	r27, 0x16	; 22
    1d60:	6b 16       	cp	r6, r27
    1d62:	71 04       	cpc	r7, r1
    1d64:	61 f4       	brne	.+24     	; 0x1d7e <main+0x18ae>
    1d66:	c2 01       	movw	r24, r4
    1d68:	82 19       	sub	r24, r2
    1d6a:	93 09       	sbc	r25, r3
    1d6c:	85 36       	cpi	r24, 0x65	; 101
    1d6e:	91 05       	cpc	r25, r1
    1d70:	0c f4       	brge	.+2      	; 0x1d74 <main+0x18a4>
    1d72:	53 c0       	rjmp	.+166    	; 0x1e1a <main+0x194a>
    1d74:	12 01       	movw	r2, r4
    1d76:	07 c0       	rjmp	.+14     	; 0x1d86 <main+0x18b6>
    1d78:	81 e1       	ldi	r24, 0x11	; 17
    1d7a:	68 2e       	mov	r6, r24
    1d7c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totallength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1d7e:	27 e1       	ldi	r18, 0x17	; 23
    1d80:	62 16       	cp	r6, r18
    1d82:	71 04       	cpc	r7, r1
    1d84:	61 f4       	brne	.+24     	; 0x1d9e <main+0x18ce>
    1d86:	c2 01       	movw	r24, r4
    1d88:	82 19       	sub	r24, r2
    1d8a:	93 09       	sbc	r25, r3
    1d8c:	81 5a       	subi	r24, 0xA1	; 161
    1d8e:	9f 40       	sbci	r25, 0x0F	; 15
    1d90:	0c f4       	brge	.+2      	; 0x1d94 <main+0x18c4>
    1d92:	53 c0       	rjmp	.+166    	; 0x1e3a <main+0x196a>
    1d94:	12 01       	movw	r2, r4
    1d96:	07 c0       	rjmp	.+14     	; 0x1da6 <main+0x18d6>
    1d98:	02 e1       	ldi	r16, 0x12	; 18
    1d9a:	60 2e       	mov	r6, r16
    1d9c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    1d9e:	88 e1       	ldi	r24, 0x18	; 24
    1da0:	68 16       	cp	r6, r24
    1da2:	71 04       	cpc	r7, r1
    1da4:	61 f4       	brne	.+24     	; 0x1dbe <main+0x18ee>
    1da6:	c2 01       	movw	r24, r4
    1da8:	82 19       	sub	r24, r2
    1daa:	93 09       	sbc	r25, r3
    1dac:	85 36       	cpi	r24, 0x65	; 101
    1dae:	91 05       	cpc	r25, r1
    1db0:	0c f4       	brge	.+2      	; 0x1db4 <main+0x18e4>
    1db2:	51 c0       	rjmp	.+162    	; 0x1e56 <main+0x1986>
    1db4:	12 01       	movw	r2, r4
    1db6:	07 c0       	rjmp	.+14     	; 0x1dc6 <main+0x18f6>
    1db8:	13 e1       	ldi	r17, 0x13	; 19
    1dba:	61 2e       	mov	r6, r17
    1dbc:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    1dbe:	99 e1       	ldi	r25, 0x19	; 25
    1dc0:	69 16       	cp	r6, r25
    1dc2:	71 04       	cpc	r7, r1
    1dc4:	51 f4       	brne	.+20     	; 0x1dda <main+0x190a>
    1dc6:	c2 01       	movw	r24, r4
    1dc8:	82 19       	sub	r24, r2
    1dca:	93 09       	sbc	r25, r3
    1dcc:	81 5a       	subi	r24, 0xA1	; 161
    1dce:	9f 40       	sbci	r25, 0x0F	; 15
    1dd0:	44 f4       	brge	.+16     	; 0x1de2 <main+0x1912>
    1dd2:	51 c0       	rjmp	.+162    	; 0x1e76 <main+0x19a6>
    1dd4:	b4 e1       	ldi	r27, 0x14	; 20
    1dd6:	6b 2e       	mov	r6, r27
    1dd8:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totallength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    1dda:	ba e1       	ldi	r27, 0x1A	; 26
    1ddc:	6b 16       	cp	r6, r27
    1dde:	71 04       	cpc	r7, r1
    1de0:	69 f4       	brne	.+26     	; 0x1dfc <main+0x192c>
    1de2:	c2 01       	movw	r24, r4
    1de4:	82 19       	sub	r24, r2
    1de6:	93 09       	sbc	r25, r3
    1de8:	81 5a       	subi	r24, 0xA1	; 161
    1dea:	9f 40       	sbci	r25, 0x0F	; 15
    1dec:	0c f4       	brge	.+2      	; 0x1df0 <main+0x1920>
    1dee:	56 c0       	rjmp	.+172    	; 0x1e9c <main+0x19cc>
    1df0:	58 86       	std	Y+8, r5	; 0x08
    1df2:	4f 82       	std	Y+7, r4	; 0x07
    1df4:	07 c0       	rjmp	.+14     	; 0x1e04 <main+0x1934>
    1df6:	a5 e1       	ldi	r26, 0x15	; 21
    1df8:	6a 2e       	mov	r6, r26
    1dfa:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    1dfc:	3b e1       	ldi	r19, 0x1B	; 27
    1dfe:	63 16       	cp	r6, r19
    1e00:	71 04       	cpc	r7, r1
    1e02:	71 f4       	brne	.+28     	; 0x1e20 <main+0x1950>
    1e04:	c2 01       	movw	r24, r4
    1e06:	af 81       	ldd	r26, Y+7	; 0x07
    1e08:	b8 85       	ldd	r27, Y+8	; 0x08
    1e0a:	8a 1b       	sub	r24, r26
    1e0c:	9b 0b       	sbc	r25, r27
    1e0e:	85 36       	cpi	r24, 0x65	; 101
    1e10:	91 05       	cpc	r25, r1
    1e12:	0c f4       	brge	.+2      	; 0x1e16 <main+0x1946>
    1e14:	56 c0       	rjmp	.+172    	; 0x1ec2 <main+0x19f2>
    1e16:	12 01       	movw	r2, r4
    1e18:	07 c0       	rjmp	.+14     	; 0x1e28 <main+0x1958>
    1e1a:	f6 e1       	ldi	r31, 0x16	; 22
    1e1c:	6f 2e       	mov	r6, r31
    1e1e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    1e20:	bc e1       	ldi	r27, 0x1C	; 28
    1e22:	6b 16       	cp	r6, r27
    1e24:	71 04       	cpc	r7, r1
    1e26:	61 f4       	brne	.+24     	; 0x1e40 <main+0x1970>
    1e28:	c2 01       	movw	r24, r4
    1e2a:	82 19       	sub	r24, r2
    1e2c:	93 09       	sbc	r25, r3
    1e2e:	85 36       	cpi	r24, 0x65	; 101
    1e30:	91 05       	cpc	r25, r1
    1e32:	0c f4       	brge	.+2      	; 0x1e36 <main+0x1966>
    1e34:	59 c0       	rjmp	.+178    	; 0x1ee8 <main+0x1a18>
    1e36:	12 01       	movw	r2, r4
    1e38:	07 c0       	rjmp	.+14     	; 0x1e48 <main+0x1978>
    1e3a:	e7 e1       	ldi	r30, 0x17	; 23
    1e3c:	6e 2e       	mov	r6, r30
    1e3e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    1e40:	2d e1       	ldi	r18, 0x1D	; 29
    1e42:	62 16       	cp	r6, r18
    1e44:	71 04       	cpc	r7, r1
    1e46:	51 f4       	brne	.+20     	; 0x1e5c <main+0x198c>
    1e48:	c2 01       	movw	r24, r4
    1e4a:	82 19       	sub	r24, r2
    1e4c:	93 09       	sbc	r25, r3
    1e4e:	81 5a       	subi	r24, 0xA1	; 161
    1e50:	9f 40       	sbci	r25, 0x0F	; 15
    1e52:	44 f4       	brge	.+16     	; 0x1e64 <main+0x1994>
    1e54:	5c c0       	rjmp	.+184    	; 0x1f0e <main+0x1a3e>
    1e56:	78 e1       	ldi	r23, 0x18	; 24
    1e58:	67 2e       	mov	r6, r23
    1e5a:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totallength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1e5c:	8e e1       	ldi	r24, 0x1E	; 30
    1e5e:	68 16       	cp	r6, r24
    1e60:	71 04       	cpc	r7, r1
    1e62:	61 f4       	brne	.+24     	; 0x1e7c <main+0x19ac>
    1e64:	c2 01       	movw	r24, r4
    1e66:	82 19       	sub	r24, r2
    1e68:	93 09       	sbc	r25, r3
    1e6a:	81 5a       	subi	r24, 0xA1	; 161
    1e6c:	9f 40       	sbci	r25, 0x0F	; 15
    1e6e:	0c f4       	brge	.+2      	; 0x1e72 <main+0x19a2>
    1e70:	62 c0       	rjmp	.+196    	; 0x1f36 <main+0x1a66>
    1e72:	12 01       	movw	r2, r4
    1e74:	07 c0       	rjmp	.+14     	; 0x1e84 <main+0x19b4>
    1e76:	69 e1       	ldi	r22, 0x19	; 25
    1e78:	66 2e       	mov	r6, r22
    1e7a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1e7c:	bf e1       	ldi	r27, 0x1F	; 31
    1e7e:	6b 16       	cp	r6, r27
    1e80:	71 04       	cpc	r7, r1
    1e82:	79 f4       	brne	.+30     	; 0x1ea2 <main+0x19d2>
    1e84:	c2 01       	movw	r24, r4
    1e86:	82 19       	sub	r24, r2
    1e88:	93 09       	sbc	r25, r3
    1e8a:	89 5e       	subi	r24, 0xE9	; 233
    1e8c:	93 40       	sbci	r25, 0x03	; 3
    1e8e:	24 f4       	brge	.+8      	; 0x1e98 <main+0x19c8>
    1e90:	5f e1       	ldi	r21, 0x1F	; 31
    1e92:	65 2e       	mov	r6, r21
    1e94:	71 2c       	mov	r7, r1
    1e96:	6c c1       	rjmp	.+728    	; 0x2170 <main+0x1ca0>
    1e98:	12 01       	movw	r2, r4
    1e9a:	07 c0       	rjmp	.+14     	; 0x1eaa <main+0x19da>
    1e9c:	4a e1       	ldi	r20, 0x1A	; 26
    1e9e:	64 2e       	mov	r6, r20
    1ea0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    1ea2:	30 e2       	ldi	r19, 0x20	; 32
    1ea4:	63 16       	cp	r6, r19
    1ea6:	71 04       	cpc	r7, r1
    1ea8:	79 f4       	brne	.+30     	; 0x1ec8 <main+0x19f8>
    1eaa:	c2 01       	movw	r24, r4
    1eac:	82 19       	sub	r24, r2
    1eae:	93 09       	sbc	r25, r3
    1eb0:	81 5a       	subi	r24, 0xA1	; 161
    1eb2:	9f 40       	sbci	r25, 0x0F	; 15
    1eb4:	24 f4       	brge	.+8      	; 0x1ebe <main+0x19ee>
    1eb6:	30 e2       	ldi	r19, 0x20	; 32
    1eb8:	63 2e       	mov	r6, r19
    1eba:	71 2c       	mov	r7, r1
    1ebc:	5f c1       	rjmp	.+702    	; 0x217c <main+0x1cac>
    1ebe:	12 01       	movw	r2, r4
    1ec0:	07 c0       	rjmp	.+14     	; 0x1ed0 <main+0x1a00>
    1ec2:	2b e1       	ldi	r18, 0x1B	; 27
    1ec4:	62 2e       	mov	r6, r18
    1ec6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    1ec8:	b1 e2       	ldi	r27, 0x21	; 33
    1eca:	6b 16       	cp	r6, r27
    1ecc:	71 04       	cpc	r7, r1
    1ece:	79 f4       	brne	.+30     	; 0x1eee <main+0x1a1e>
    1ed0:	c2 01       	movw	r24, r4
    1ed2:	82 19       	sub	r24, r2
    1ed4:	93 09       	sbc	r25, r3
    1ed6:	85 36       	cpi	r24, 0x65	; 101
    1ed8:	91 05       	cpc	r25, r1
    1eda:	24 f4       	brge	.+8      	; 0x1ee4 <main+0x1a14>
    1edc:	91 e2       	ldi	r25, 0x21	; 33
    1ede:	69 2e       	mov	r6, r25
    1ee0:	71 2c       	mov	r7, r1
    1ee2:	51 c1       	rjmp	.+674    	; 0x2186 <main+0x1cb6>
    1ee4:	12 01       	movw	r2, r4
    1ee6:	07 c0       	rjmp	.+14     	; 0x1ef6 <main+0x1a26>
    1ee8:	8c e1       	ldi	r24, 0x1C	; 28
    1eea:	68 2e       	mov	r6, r24
    1eec:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate){
    1eee:	22 e2       	ldi	r18, 0x22	; 34
    1ef0:	62 16       	cp	r6, r18
    1ef2:	71 04       	cpc	r7, r1
    1ef4:	79 f4       	brne	.+30     	; 0x1f14 <main+0x1a44>
    1ef6:	c2 01       	movw	r24, r4
    1ef8:	82 19       	sub	r24, r2
    1efa:	93 09       	sbc	r25, r3
    1efc:	81 5a       	subi	r24, 0xA1	; 161
    1efe:	9f 40       	sbci	r25, 0x0F	; 15
    1f00:	24 f4       	brge	.+8      	; 0x1f0a <main+0x1a3a>
    1f02:	02 e2       	ldi	r16, 0x22	; 34
    1f04:	60 2e       	mov	r6, r16
    1f06:	71 2c       	mov	r7, r1
    1f08:	4a c1       	rjmp	.+660    	; 0x219e <main+0x1cce>
    1f0a:	12 01       	movw	r2, r4
    1f0c:	07 c0       	rjmp	.+14     	; 0x1f1c <main+0x1a4c>
    1f0e:	1d e1       	ldi	r17, 0x1D	; 29
    1f10:	61 2e       	mov	r6, r17
    1f12:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    1f14:	83 e2       	ldi	r24, 0x23	; 35
    1f16:	68 16       	cp	r6, r24
    1f18:	71 04       	cpc	r7, r1
    1f1a:	81 f4       	brne	.+32     	; 0x1f3c <main+0x1a6c>
    1f1c:	c2 01       	movw	r24, r4
    1f1e:	82 19       	sub	r24, r2
    1f20:	93 09       	sbc	r25, r3
    1f22:	0b 97       	sbiw	r24, 0x0b	; 11
    1f24:	24 f0       	brlt	.+8      	; 0x1f2e <main+0x1a5e>
    1f26:	b4 e2       	ldi	r27, 0x24	; 36
    1f28:	6b 2e       	mov	r6, r27
    1f2a:	71 2c       	mov	r7, r1
    1f2c:	4f c1       	rjmp	.+670    	; 0x21cc <main+0x1cfc>
    1f2e:	a3 e2       	ldi	r26, 0x23	; 35
    1f30:	6a 2e       	mov	r6, r26
    1f32:	71 2c       	mov	r7, r1
    1f34:	39 c1       	rjmp	.+626    	; 0x21a8 <main+0x1cd8>
    1f36:	fe e1       	ldi	r31, 0x1E	; 30
    1f38:	6f 2e       	mov	r6, r31
    1f3a:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    1f3c:	f3 01       	movw	r30, r6
    1f3e:	e4 32       	cpi	r30, 0x24	; 36
    1f40:	f1 05       	cpc	r31, r1
    1f42:	08 f0       	brcs	.+2      	; 0x1f46 <main+0x1a76>
    1f44:	43 c1       	rjmp	.+646    	; 0x21cc <main+0x1cfc>
    1f46:	e2 57       	subi	r30, 0x72	; 114
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	ee 0f       	add	r30, r30
    1f4c:	ff 1f       	adc	r31, r31
    1f4e:	05 90       	lpm	r0, Z+
    1f50:	f4 91       	lpm	r31, Z+
    1f52:	e0 2d       	mov	r30, r0
    1f54:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    1f56:	80 91 2a 03 	lds	r24, 0x032A
    1f5a:	20 91 28 03 	lds	r18, 0x0328
    1f5e:	90 91 26 03 	lds	r25, 0x0326
    1f62:	82 ff       	sbrs	r24, 2
    1f64:	07 c0       	rjmp	.+14     	; 0x1f74 <main+0x1aa4>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    1f66:	9f 7e       	andi	r25, 0xEF	; 239
    1f68:	90 93 26 03 	sts	0x0326, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1f6c:	27 7f       	andi	r18, 0xF7	; 247
    1f6e:	20 93 28 03 	sts	0x0328, r18
    1f72:	15 c0       	rjmp	.+42     	; 0x1f9e <main+0x1ace>
						fixtureMotor = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1f74:	9f 7d       	andi	r25, 0xDF	; 223
    1f76:	90 93 26 03 	sts	0x0326, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1f7a:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1f7c:	28 60       	ori	r18, 0x08	; 8
    1f7e:	20 93 28 03 	sts	0x0328, r18
						if(print0 == 1){
    1f82:	ad 85       	ldd	r26, Y+13	; 0x0d
    1f84:	be 85       	ldd	r27, Y+14	; 0x0e
    1f86:	11 97       	sbiw	r26, 0x01	; 1
    1f88:	51 f4       	brne	.+20     	; 0x1f9e <main+0x1ace>
							OrangutanLCD::gotoXY(0,1);
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	61 e0       	ldi	r22, 0x01	; 1
    1f8e:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1f92:	8f ee       	ldi	r24, 0xEF	; 239
    1f94:	92 e0       	ldi	r25, 0x02	; 2
    1f96:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
    1f9a:	1e 86       	std	Y+14, r1	; 0x0e
    1f9c:	1d 86       	std	Y+13, r1	; 0x0d
							print0 = 0;
						}
					}
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1f9e:	20 91 28 03 	lds	r18, 0x0328
    1fa2:	32 2f       	mov	r19, r18
    1fa4:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    1fa6:	c2 01       	movw	r24, r4
    1fa8:	68 ec       	ldi	r22, 0xC8	; 200
    1faa:	70 e0       	ldi	r23, 0x00	; 0
    1fac:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__divmodhi4>
    1fb0:	84 36       	cpi	r24, 0x64	; 100
    1fb2:	91 05       	cpc	r25, r1
    1fb4:	24 f4       	brge	.+8      	; 0x1fbe <main+0x1aee>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1fb6:	2c 7f       	andi	r18, 0xFC	; 252
    1fb8:	20 93 28 03 	sts	0x0328, r18
    1fbc:	03 c0       	rjmp	.+6      	; 0x1fc4 <main+0x1af4>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1fbe:	32 60       	ori	r19, 0x02	; 2
    1fc0:	30 93 28 03 	sts	0x0328, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
    1fc4:	80 91 26 03 	lds	r24, 0x0326
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    1fc8:	86 60       	ori	r24, 0x06	; 6
    1fca:	80 93 26 03 	sts	0x0326, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1fce:	80 91 28 03 	lds	r24, 0x0328
    1fd2:	8b 7f       	andi	r24, 0xFB	; 251
    1fd4:	80 93 28 03 	sts	0x0328, r24
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1fd8:	80 91 28 03 	lds	r24, 0x0328
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1fdc:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1fde:	86 61       	ori	r24, 0x16	; 22
    1fe0:	80 93 28 03 	sts	0x0328, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    1fe4:	80 91 26 03 	lds	r24, 0x0326
    1fe8:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    1fea:	8b 7f       	andi	r24, 0xFB	; 251
    1fec:	80 93 26 03 	sts	0x0326, r24
				case FIXL:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
    1ff0:	80 91 26 03 	lds	r24, 0x0326
    1ff4:	80 61       	ori	r24, 0x10	; 16
    1ff6:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1ffa:	80 91 26 03 	lds	r24, 0x0326
    1ffe:	8f 7d       	andi	r24, 0xDF	; 223
    2000:	80 93 26 03 	sts	0x0326, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2004:	80 91 28 03 	lds	r24, 0x0328
    2008:	88 60       	ori	r24, 0x08	; 8
    200a:	80 93 28 03 	sts	0x0328, r24
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    200e:	80 91 28 03 	lds	r24, 0x0328
    2012:	8f 7e       	andi	r24, 0xEF	; 239
    2014:	80 93 28 03 	sts	0x0328, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    2018:	80 91 26 03 	lds	r24, 0x0326
    201c:	80 62       	ori	r24, 0x20	; 32
    201e:	80 93 26 03 	sts	0x0326, r24
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2022:	80 91 26 03 	lds	r24, 0x0326
    2026:	80 61       	ori	r24, 0x10	; 16
    2028:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
    202c:	80 91 27 03 	lds	r24, 0x0327
    2030:	81 60       	ori	r24, 0x01	; 1
    2032:	80 93 27 03 	sts	0x0327, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2036:	80 91 26 03 	lds	r24, 0x0326
    203a:	8f 77       	andi	r24, 0x7F	; 127
    203c:	80 93 26 03 	sts	0x0326, r24
						OrangutanLCD::print("Clean 1");
						print6 = 0;
					}*/
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2040:	80 91 28 03 	lds	r24, 0x0328
    2044:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2046:	8f 7d       	andi	r24, 0xDF	; 223
    2048:	80 93 28 03 	sts	0x0328, r24
				case CLEAN1_1:
					fixtureMotor = 1;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    204c:	80 91 26 03 	lds	r24, 0x0326
    2050:	8f 7e       	andi	r24, 0xEF	; 239
    2052:	80 93 26 03 	sts	0x0326, r24
				case B1STOP1:
					fixtureMotor = 0;
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2056:	80 91 28 03 	lds	r24, 0x0328
    205a:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    205c:	80 62       	ori	r24, 0x20	; 32
    205e:	80 93 28 03 	sts	0x0328, r24
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2062:	80 91 26 03 	lds	r24, 0x0326
    2066:	80 61       	ori	r24, 0x10	; 16
    2068:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    206c:	80 91 26 03 	lds	r24, 0x0326
    2070:	8f 77       	andi	r24, 0x7F	; 127
    2072:	80 93 26 03 	sts	0x0326, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2076:	80 91 28 03 	lds	r24, 0x0328
    207a:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    207c:	8f 7d       	andi	r24, 0xDF	; 223
    207e:	80 93 28 03 	sts	0x0328, r24
				case CLEAN1_3:
					fixtureMotor = 1;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2082:	80 91 28 03 	lds	r24, 0x0328
    2086:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2088:	80 62       	ori	r24, 0x20	; 32
    208a:	80 93 28 03 	sts	0x0328, r24
				
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
    208e:	80 91 27 03 	lds	r24, 0x0327
    2092:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2094:	8b 7f       	andi	r24, 0xFB	; 251
    2096:	80 93 27 03 	sts	0x0327, r24
						OrangutanLCD::print("Clean 2");
						print15 = 0;
					}*/
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    209a:	80 91 29 03 	lds	r24, 0x0329
    209e:	81 60       	ori	r24, 0x01	; 1
    20a0:	80 93 29 03 	sts	0x0329, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    20a4:	80 91 28 03 	lds	r24, 0x0328
    20a8:	8f 77       	andi	r24, 0x7F	; 127
    20aa:	80 93 28 03 	sts	0x0328, r24
				case CLEAN2_1:
					fixtureMotor = 1;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    20ae:	80 91 26 03 	lds	r24, 0x0326
    20b2:	8f 7e       	andi	r24, 0xEF	; 239
    20b4:	80 93 26 03 	sts	0x0326, r24
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    20b8:	80 91 29 03 	lds	r24, 0x0329
    20bc:	8e 7f       	andi	r24, 0xFE	; 254
    20be:	80 93 29 03 	sts	0x0329, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    20c2:	80 91 28 03 	lds	r24, 0x0328
    20c6:	80 68       	ori	r24, 0x80	; 128
    20c8:	80 93 28 03 	sts	0x0328, r24
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    20cc:	80 91 26 03 	lds	r24, 0x0326
    20d0:	80 61       	ori	r24, 0x10	; 16
    20d2:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    20d6:	80 91 27 03 	lds	r24, 0x0327
    20da:	8b 7f       	andi	r24, 0xFB	; 251
    20dc:	80 93 27 03 	sts	0x0327, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    20e0:	80 91 29 03 	lds	r24, 0x0329
    20e4:	81 60       	ori	r24, 0x01	; 1
    20e6:	80 93 29 03 	sts	0x0329, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    20ea:	80 91 28 03 	lds	r24, 0x0328
    20ee:	8f 77       	andi	r24, 0x7F	; 127
    20f0:	80 93 28 03 	sts	0x0328, r24
				case CLEAN2_3:
					fixtureMotor = 1;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    20f4:	80 91 29 03 	lds	r24, 0x0329
    20f8:	8e 7f       	andi	r24, 0xFE	; 254
    20fa:	80 93 29 03 	sts	0x0329, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    20fe:	80 91 28 03 	lds	r24, 0x0328
    2102:	80 68       	ori	r24, 0x80	; 128
    2104:	80 93 28 03 	sts	0x0328, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
    2108:	80 91 27 03 	lds	r24, 0x0327
    210c:	87 7f       	andi	r24, 0xF7	; 247
    210e:	80 93 27 03 	sts	0x0327, r24
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2112:	80 91 26 03 	lds	r24, 0x0326
    2116:	80 61       	ori	r24, 0x10	; 16
    2118:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
    211c:	80 91 27 03 	lds	r24, 0x0327
    2120:	8e 7f       	andi	r24, 0xFE	; 254
    2122:	80 93 27 03 	sts	0x0327, r24
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2126:	80 91 29 03 	lds	r24, 0x0329
    212a:	87 7f       	andi	r24, 0xF7	; 247
    212c:	80 93 29 03 	sts	0x0329, r24
						OrangutanLCD::clear();
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2130:	80 91 26 03 	lds	r24, 0x0326
    2134:	8f 7e       	andi	r24, 0xEF	; 239
    2136:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    213a:	80 91 29 03 	lds	r24, 0x0329
    213e:	88 60       	ori	r24, 0x08	; 8
    2140:	80 93 29 03 	sts	0x0329, r24
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
    2144:	80 91 27 03 	lds	r24, 0x0327
    2148:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    214a:	8f 7d       	andi	r24, 0xDF	; 223
    214c:	80 93 27 03 	sts	0x0327, r24
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    2150:	80 91 29 03 	lds	r24, 0x0329
    2154:	8d 7f       	andi	r24, 0xFD	; 253
    2156:	80 93 29 03 	sts	0x0329, r24
				case DRY2:
					fixtureMotor = 1;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    215a:	80 91 27 03 	lds	r24, 0x0327
    215e:	8f 7b       	andi	r24, 0xBF	; 191
    2160:	80 93 27 03 	sts	0x0327, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    2164:	80 91 29 03 	lds	r24, 0x0329
    2168:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    216a:	8b 7f       	andi	r24, 0xFB	; 251
    216c:	80 93 29 03 	sts	0x0329, r24
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2170:	80 91 28 03 	lds	r24, 0x0328
    2174:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    2176:	80 61       	ori	r24, 0x10	; 16
    2178:	80 93 28 03 	sts	0x0328, r24
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    217c:	80 91 26 03 	lds	r24, 0x0326
    2180:	8f 7e       	andi	r24, 0xEF	; 239
    2182:	80 93 26 03 	sts	0x0326, r24
					fixtureMotor = 1;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    2186:	80 91 26 03 	lds	r24, 0x0326
    218a:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    218c:	84 60       	ori	r24, 0x04	; 4
    218e:	80 93 26 03 	sts	0x0326, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2192:	80 91 28 03 	lds	r24, 0x0328
    2196:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2198:	8f 7e       	andi	r24, 0xEF	; 239
    219a:	80 93 28 03 	sts	0x0328, r24
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    219e:	80 91 26 03 	lds	r24, 0x0326
    21a2:	8d 7f       	andi	r24, 0xFD	; 253
    21a4:	80 93 26 03 	sts	0x0326, r24
					plateLoadMotor = 1;
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    21a8:	80 91 26 03 	lds	r24, 0x0326
    21ac:	8b 7f       	andi	r24, 0xFB	; 251
    21ae:	80 93 26 03 	sts	0x0326, r24
					if(print35 == 1){
    21b2:	29 85       	ldd	r18, Y+9	; 0x09
    21b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    21b6:	21 30       	cpi	r18, 0x01	; 1
    21b8:	31 05       	cpc	r19, r1
    21ba:	31 f4       	brne	.+12     	; 0x21c8 <main+0x1cf8>
						OrangutanLCD::clear();
    21bc:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    21c0:	8d ef       	ldi	r24, 0xFD	; 253
    21c2:	92 e0       	ldi	r25, 0x02	; 2
    21c4:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
    21c8:	1a 86       	std	Y+10, r1	; 0x0a
    21ca:	19 86       	std	Y+9, r1	; 0x09
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
    21cc:	8d b7       	in	r24, 0x3d	; 61
    21ce:	9e b7       	in	r25, 0x3e	; 62
    21d0:	42 97       	sbiw	r24, 0x12	; 18
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	9e bf       	out	0x3e, r25	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	8d bf       	out	0x3d, r24	; 61
    21dc:	ed b7       	in	r30, 0x3d	; 61
    21de:	fe b7       	in	r31, 0x3e	; 62
    21e0:	31 96       	adiw	r30, 0x01	; 1
    21e2:	82 e0       	ldi	r24, 0x02	; 2
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	ad b7       	in	r26, 0x3d	; 61
    21e8:	be b7       	in	r27, 0x3e	; 62
    21ea:	12 96       	adiw	r26, 0x02	; 2
    21ec:	9c 93       	st	X, r25
    21ee:	8e 93       	st	-X, r24
    21f0:	11 97       	sbiw	r26, 0x01	; 1
    21f2:	93 83       	std	Z+3, r25	; 0x03
    21f4:	82 83       	std	Z+2, r24	; 0x02
    21f6:	95 83       	std	Z+5, r25	; 0x05
    21f8:	84 83       	std	Z+4, r24	; 0x04
    21fa:	97 83       	std	Z+7, r25	; 0x07
    21fc:	86 83       	std	Z+6, r24	; 0x06
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	91 87       	std	Z+9, r25	; 0x09
    2204:	80 87       	std	Z+8, r24	; 0x08
    2206:	93 87       	std	Z+11, r25	; 0x0b
    2208:	82 87       	std	Z+10, r24	; 0x0a
    220a:	95 87       	std	Z+13, r25	; 0x0d
    220c:	84 87       	std	Z+12, r24	; 0x0c
    220e:	97 87       	std	Z+15, r25	; 0x0f
    2210:	86 87       	std	Z+14, r24	; 0x0e
    2212:	91 8b       	std	Z+17, r25	; 0x11
    2214:	80 8b       	std	Z+16, r24	; 0x10
    2216:	c2 01       	movw	r24, r4
    2218:	b1 01       	movw	r22, r2
    221a:	4f 81       	ldd	r20, Y+7	; 0x07
    221c:	58 85       	ldd	r21, Y+8	; 0x08
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	00 e0       	ldi	r16, 0x00	; 0
    2224:	10 e0       	ldi	r17, 0x00	; 0
    2226:	ee 24       	eor	r14, r14
    2228:	ff 24       	eor	r15, r15
    222a:	cc 24       	eor	r12, r12
    222c:	dd 24       	eor	r13, r13
    222e:	aa 24       	eor	r10, r10
    2230:	bb 24       	eor	r11, r11
    2232:	e2 e0       	ldi	r30, 0x02	; 2
    2234:	8e 2e       	mov	r8, r30
    2236:	91 2c       	mov	r9, r1
    2238:	0e 94 b3 01 	call	0x366	; 0x366 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    223c:	2d b7       	in	r18, 0x3d	; 61
    223e:	3e b7       	in	r19, 0x3e	; 62
    2240:	2e 5e       	subi	r18, 0xEE	; 238
    2242:	3f 4f       	sbci	r19, 0xFF	; 255
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	3e bf       	out	0x3e, r19	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	2d bf       	out	0x3d, r18	; 61
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("BOTH B");
			while(state != DONER)
    2256:	34 e2       	ldi	r19, 0x24	; 36
    2258:	63 16       	cp	r6, r19
    225a:	71 04       	cpc	r7, r1
    225c:	21 f0       	breq	.+8      	; 0x2266 <main+0x1d96>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);

				counter ++;
    225e:	08 94       	sec
    2260:	41 1c       	adc	r4, r1
    2262:	51 1c       	adc	r5, r1
    2264:	0c cc       	rjmp	.-2024   	; 0x1a7e <main+0x15ae>
				delay_ms(1);
   		 	}
		}
		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    2266:	80 91 26 03 	lds	r24, 0x0326
		u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    226a:	8b 7d       	andi	r24, 0xDB	; 219
    226c:	80 93 26 03 	sts	0x0326, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
    2270:	80 91 27 03 	lds	r24, 0x0327
		u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    2274:	86 7b       	andi	r24, 0xB6	; 182
    2276:	80 93 27 03 	sts	0x0327, r24
		
		i2c_start(I2C1+I2C_WRITE);
    227a:	80 e4       	ldi	r24, 0x40	; 64
    227c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>
		i2c_write(0x2);
    2280:	82 e0       	ldi	r24, 0x02	; 2
    2282:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
    2286:	80 91 26 03 	lds	r24, 0x0326
    228a:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
    228e:	80 91 27 03 	lds	r24, 0x0327
    2292:	0e 94 cd 11 	call	0x239a	; 0x239a <_Z9i2c_writeh>
		i2c_stop();
    2296:	0e 94 c5 11 	call	0x238a	; 0x238a <_Z8i2c_stopv>
	}
	OrangutanLCD::print("END");
    229a:	8a e1       	ldi	r24, 0x1A	; 26
    229c:	93 e0       	ldi	r25, 0x03	; 3
    229e:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
    22a2:	0c 94 82 02 	jmp	0x504	; 0x504 <main+0x34>
					print = 0;
					paperTowelMotor = 0;
				}*/

				//state actions
				switch (state) {
    22a6:	f1 01       	movw	r30, r2
    22a8:	ee 54       	subi	r30, 0x4E	; 78
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	ee 0f       	add	r30, r30
    22ae:	ff 1f       	adc	r31, r31
    22b0:	05 90       	lpm	r0, Z+
    22b2:	f4 91       	lpm	r31, Z+
    22b4:	e0 2d       	mov	r30, r0
    22b6:	09 94       	ijmp
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
    22be:	88 23       	and	r24, r24
    22c0:	09 f0       	breq	.+2      	; 0x22c4 <main+0x1df4>
    22c2:	5f c8       	rjmp	.-3906   	; 0x1382 <main+0xeb2>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
    22ca:	88 23       	and	r24, r24
    22cc:	61 f6       	brne	.-104    	; 0x2266 <main+0x1d96>
    22ce:	bb cb       	rjmp	.-2186   	; 0x1a46 <main+0x1576>

000022d0 <_ZdlPv>:
  return malloc(size); 
} 

void operator delete(void * ptr) 
{ 
  free(ptr); 
    22d0:	0e 94 9b 18 	call	0x3136	; 0x3136 <free>
} 
    22d4:	08 95       	ret

000022d6 <_Znwj>:
void * operator new(size_t size); 
void operator delete(void * ptr); 

void * operator new(size_t size) 
{ 
  return malloc(size); 
    22d6:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <malloc>
} 
    22da:	08 95       	ret

000022dc <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    22dc:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    22e0:	8c e0       	ldi	r24, 0x0C	; 12
    22e2:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    22e6:	08 95       	ret

000022e8 <_Z9i2c_starth>:

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    22e8:	98 2f       	mov	r25, r24
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    22ea:	84 ea       	ldi	r24, 0xA4	; 164
    22ec:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    22f0:	80 91 bc 00 	lds	r24, 0x00BC
    22f4:	87 ff       	sbrs	r24, 7
    22f6:	fc cf       	rjmp	.-8      	; 0x22f0 <_Z9i2c_starth+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    22f8:	80 91 b9 00 	lds	r24, 0x00B9
    22fc:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    22fe:	88 30       	cpi	r24, 0x08	; 8
    2300:	21 f0       	breq	.+8      	; 0x230a <_Z9i2c_starth+0x22>
    2302:	80 31       	cpi	r24, 0x10	; 16
    2304:	11 f0       	breq	.+4      	; 0x230a <_Z9i2c_starth+0x22>
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	08 95       	ret

	// send device address
	TWDR = address;
    230a:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    230e:	84 e8       	ldi	r24, 0x84	; 132
    2310:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2314:	80 91 bc 00 	lds	r24, 0x00BC
    2318:	87 ff       	sbrs	r24, 7
    231a:	fc cf       	rjmp	.-8      	; 0x2314 <_Z9i2c_starth+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    231c:	90 91 b9 00 	lds	r25, 0x00B9
    2320:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    2322:	98 31       	cpi	r25, 0x18	; 24
    2324:	11 f4       	brne	.+4      	; 0x232a <_Z9i2c_starth+0x42>
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	08 95       	ret
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	90 34       	cpi	r25, 0x40	; 64
    232e:	09 f0       	breq	.+2      	; 0x2332 <_Z9i2c_starth+0x4a>
    2330:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    2332:	08 95       	ret

00002334 <_Z14i2c_start_waith>:
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
    2334:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2336:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2338:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    233a:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    233c:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2340:	80 91 bc 00 	lds	r24, 0x00BC
    2344:	87 ff       	sbrs	r24, 7
    2346:	fc cf       	rjmp	.-8      	; 0x2340 <_Z14i2c_start_waith+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2348:	80 91 b9 00 	lds	r24, 0x00B9
    234c:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    234e:	88 30       	cpi	r24, 0x08	; 8
    2350:	11 f0       	breq	.+4      	; 0x2356 <_Z14i2c_start_waith+0x22>
    2352:	80 31       	cpi	r24, 0x10	; 16
    2354:	99 f7       	brne	.-26     	; 0x233c <_Z14i2c_start_waith+0x8>
    
    	// send device address
    	TWDR = address;
    2356:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    235a:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    235e:	80 91 bc 00 	lds	r24, 0x00BC
    2362:	87 ff       	sbrs	r24, 7
    2364:	fc cf       	rjmp	.-8      	; 0x235e <_Z14i2c_start_waith+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2366:	80 91 b9 00 	lds	r24, 0x00B9
    236a:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    236c:	80 32       	cpi	r24, 0x20	; 32
    236e:	11 f0       	breq	.+4      	; 0x2374 <_Z14i2c_start_waith+0x40>
    2370:	88 35       	cpi	r24, 0x58	; 88
    2372:	39 f4       	brne	.+14     	; 0x2382 <_Z14i2c_start_waith+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2374:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    2378:	80 91 bc 00 	lds	r24, 0x00BC
    237c:	84 fd       	sbrc	r24, 4
    237e:	fc cf       	rjmp	.-8      	; 0x2378 <_Z14i2c_start_waith+0x44>
    2380:	dd cf       	rjmp	.-70     	; 0x233c <_Z14i2c_start_waith+0x8>
    2382:	08 95       	ret

00002384 <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    2384:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_Z9i2c_starth>

}/* i2c_rep_start */
    2388:	08 95       	ret

0000238a <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    238a:	84 e9       	ldi	r24, 0x94	; 148
    238c:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2390:	80 91 bc 00 	lds	r24, 0x00BC
    2394:	84 fd       	sbrc	r24, 4
    2396:	fc cf       	rjmp	.-8      	; 0x2390 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    2398:	08 95       	ret

0000239a <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    239a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    239e:	84 e8       	ldi	r24, 0x84	; 132
    23a0:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    23a4:	80 91 bc 00 	lds	r24, 0x00BC
    23a8:	87 ff       	sbrs	r24, 7
    23aa:	fc cf       	rjmp	.-8      	; 0x23a4 <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    23ac:	80 91 b9 00 	lds	r24, 0x00B9
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	88 7f       	andi	r24, 0xF8	; 248
    23b4:	88 32       	cpi	r24, 0x28	; 40
    23b6:	09 f0       	breq	.+2      	; 0x23ba <_Z9i2c_writeh+0x20>
    23b8:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    23ba:	89 2f       	mov	r24, r25
    23bc:	08 95       	ret

000023be <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    23be:	84 ec       	ldi	r24, 0xC4	; 196
    23c0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    23c4:	80 91 bc 00 	lds	r24, 0x00BC
    23c8:	87 ff       	sbrs	r24, 7
    23ca:	fc cf       	rjmp	.-8      	; 0x23c4 <_Z11i2c_readAckv+0x6>

    return TWDR;
    23cc:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    23d0:	08 95       	ret

000023d2 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    23d2:	84 e8       	ldi	r24, 0x84	; 132
    23d4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    23d8:	80 91 bc 00 	lds	r24, 0x00BC
    23dc:	87 ff       	sbrs	r24, 7
    23de:	fc cf       	rjmp	.-8      	; 0x23d8 <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    23e0:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    23e4:	08 95       	ret

000023e6 <_ZN12OrangutanLCDC2Ev>:
    23e6:	08 95       	ret

000023e8 <_ZN12OrangutanLCDC1Ev>:
    23e8:	08 95       	ret

000023ea <void_getchar>:
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	08 95       	ret

000023f0 <_ZN12OrangutanLCD8busyWaitEv>:
    23f0:	ef 92       	push	r14
    23f2:	ff 92       	push	r15
    23f4:	0f 93       	push	r16
    23f6:	1f 93       	push	r17
    23f8:	67 b1       	in	r22, 0x07	; 7
    23fa:	3d 98       	cbi	0x07, 5	; 7
    23fc:	28 98       	cbi	0x05, 0	; 5
    23fe:	29 9a       	sbi	0x05, 1	; 5
    2400:	e0 90 34 03 	lds	r14, 0x0334
    2404:	f0 90 35 03 	lds	r15, 0x0335
    2408:	00 91 36 03 	lds	r16, 0x0336
    240c:	10 91 37 03 	lds	r17, 0x0337
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	41 e0       	ldi	r20, 0x01	; 1
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	ca 01       	movw	r24, r20
    241a:	6f 93       	push	r22
    241c:	64 e0       	ldi	r22, 0x04	; 4
    241e:	6a 95       	dec	r22
    2420:	f1 f7       	brne	.-4      	; 0x241e <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    2422:	6f 91       	pop	r22
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	c9 f7       	brne	.-14     	; 0x241a <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    2428:	2a 9a       	sbi	0x05, 2	; 5
    242a:	ca 01       	movw	r24, r20
    242c:	6f 93       	push	r22
    242e:	64 e0       	ldi	r22, 0x04	; 4
    2430:	6a 95       	dec	r22
    2432:	f1 f7       	brne	.-4      	; 0x2430 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    2434:	6f 91       	pop	r22
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	c9 f7       	brne	.-14     	; 0x242c <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    243a:	86 b1       	in	r24, 0x06	; 6
    243c:	2a 98       	cbi	0x05, 2	; 5
    243e:	fa 01       	movw	r30, r20
    2440:	6f 93       	push	r22
    2442:	64 e0       	ldi	r22, 0x04	; 4
    2444:	6a 95       	dec	r22
    2446:	f1 f7       	brne	.-4      	; 0x2444 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    2448:	6f 91       	pop	r22
    244a:	31 97       	sbiw	r30, 0x01	; 1
    244c:	c9 f7       	brne	.-14     	; 0x2440 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    244e:	2a 9a       	sbi	0x05, 2	; 5
    2450:	fa 01       	movw	r30, r20
    2452:	6f 93       	push	r22
    2454:	64 e0       	ldi	r22, 0x04	; 4
    2456:	6a 95       	dec	r22
    2458:	f1 f7       	brne	.-4      	; 0x2456 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    245a:	6f 91       	pop	r22
    245c:	31 97       	sbiw	r30, 0x01	; 1
    245e:	c9 f7       	brne	.-14     	; 0x2452 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    2460:	2a 98       	cbi	0x05, 2	; 5
    2462:	2c 5f       	subi	r18, 0xFC	; 252
    2464:	3f 4f       	sbci	r19, 0xFF	; 255
    2466:	85 ff       	sbrs	r24, 5
    2468:	09 c0       	rjmp	.+18     	; 0x247c <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    246a:	c9 01       	movw	r24, r18
    246c:	a0 e0       	ldi	r26, 0x00	; 0
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	8e 15       	cp	r24, r14
    2472:	9f 05       	cpc	r25, r15
    2474:	a0 07       	cpc	r26, r16
    2476:	b1 07       	cpc	r27, r17
    2478:	08 f4       	brcc	.+2      	; 0x247c <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    247a:	ce cf       	rjmp	.-100    	; 0x2418 <_ZN12OrangutanLCD8busyWaitEv+0x28>
    247c:	c9 01       	movw	r24, r18
    247e:	a0 e0       	ldi	r26, 0x00	; 0
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	8e 15       	cp	r24, r14
    2484:	9f 05       	cpc	r25, r15
    2486:	a0 07       	cpc	r26, r16
    2488:	b1 07       	cpc	r27, r17
    248a:	28 f0       	brcs	.+10     	; 0x2496 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    248c:	82 e3       	ldi	r24, 0x32	; 50
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a0 e0       	ldi	r26, 0x00	; 0
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	04 c0       	rjmp	.+8      	; 0x249e <_ZN12OrangutanLCD8busyWaitEv+0xae>
    2496:	80 e3       	ldi	r24, 0x30	; 48
    2498:	95 e7       	ldi	r25, 0x75	; 117
    249a:	a0 e0       	ldi	r26, 0x00	; 0
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	80 93 34 03 	sts	0x0334, r24
    24a2:	90 93 35 03 	sts	0x0335, r25
    24a6:	a0 93 36 03 	sts	0x0336, r26
    24aa:	b0 93 37 03 	sts	0x0337, r27
    24ae:	67 b9       	out	0x07, r22	; 7
    24b0:	1f 91       	pop	r17
    24b2:	0f 91       	pop	r16
    24b4:	ff 90       	pop	r15
    24b6:	ef 90       	pop	r14
    24b8:	08 95       	ret

000024ba <_ZN12OrangutanLCD8sendDataEh>:
    24ba:	28 b1       	in	r18, 0x08	; 8
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	8f 70       	andi	r24, 0x0F	; 15
    24c0:	90 70       	andi	r25, 0x00	; 0
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	23 7c       	andi	r18, 0xC3	; 195
    24cc:	28 2b       	or	r18, r24
    24ce:	28 b9       	out	0x08, r18	; 8
    24d0:	2a 9a       	sbi	0x05, 2	; 5
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	fc 01       	movw	r30, r24
    24d8:	6f 93       	push	r22
    24da:	64 e0       	ldi	r22, 0x04	; 4
    24dc:	6a 95       	dec	r22
    24de:	f1 f7       	brne	.-4      	; 0x24dc <_ZN12OrangutanLCD8sendDataEh+0x22>
    24e0:	6f 91       	pop	r22
    24e2:	31 97       	sbiw	r30, 0x01	; 1
    24e4:	c9 f7       	brne	.-14     	; 0x24d8 <_ZN12OrangutanLCD8sendDataEh+0x1e>
    24e6:	2a 98       	cbi	0x05, 2	; 5
    24e8:	6f 93       	push	r22
    24ea:	64 e0       	ldi	r22, 0x04	; 4
    24ec:	6a 95       	dec	r22
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <_ZN12OrangutanLCD8sendDataEh+0x32>
    24f0:	6f 91       	pop	r22
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	c9 f7       	brne	.-14     	; 0x24e8 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    24f6:	08 95       	ret

000024f8 <_ZN12OrangutanLCD10initPrintfEv>:
    24f8:	80 91 30 03 	lds	r24, 0x0330
    24fc:	90 91 31 03 	lds	r25, 0x0331
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	11 f0       	breq	.+4      	; 0x2508 <_ZN12OrangutanLCD10initPrintfEv+0x10>
    2504:	0e 94 9b 18 	call	0x3136	; 0x3136 <free>
    2508:	80 91 1e 03 	lds	r24, 0x031E
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	20 91 1f 03 	lds	r18, 0x031F
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	ac 01       	movw	r20, r24
    2518:	42 9f       	mul	r20, r18
    251a:	c0 01       	movw	r24, r0
    251c:	43 9f       	mul	r20, r19
    251e:	90 0d       	add	r25, r0
    2520:	52 9f       	mul	r21, r18
    2522:	90 0d       	add	r25, r0
    2524:	11 24       	eor	r1, r1
    2526:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <malloc>
    252a:	90 93 31 03 	sts	0x0331, r25
    252e:	80 93 30 03 	sts	0x0330, r24
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	29 f1       	breq	.+74     	; 0x2580 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    2536:	60 e0       	ldi	r22, 0x00	; 0
    2538:	70 e2       	ldi	r23, 0x20	; 32
    253a:	08 c0       	rjmp	.+16     	; 0x254c <_ZN12OrangutanLCD10initPrintfEv+0x54>
    253c:	e0 91 30 03 	lds	r30, 0x0330
    2540:	f0 91 31 03 	lds	r31, 0x0331
    2544:	e4 0f       	add	r30, r20
    2546:	f5 1f       	adc	r31, r21
    2548:	70 83       	st	Z, r23
    254a:	6f 5f       	subi	r22, 0xFF	; 255
    254c:	46 2f       	mov	r20, r22
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	80 91 1e 03 	lds	r24, 0x031E
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	20 91 1f 03 	lds	r18, 0x031F
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	fc 01       	movw	r30, r24
    2560:	e2 9f       	mul	r30, r18
    2562:	c0 01       	movw	r24, r0
    2564:	e3 9f       	mul	r30, r19
    2566:	90 0d       	add	r25, r0
    2568:	f2 9f       	mul	r31, r18
    256a:	90 0d       	add	r25, r0
    256c:	11 24       	eor	r1, r1
    256e:	48 17       	cp	r20, r24
    2570:	59 07       	cpc	r21, r25
    2572:	24 f3       	brlt	.-56     	; 0x253c <_ZN12OrangutanLCD10initPrintfEv+0x44>
    2574:	81 ee       	ldi	r24, 0xE1	; 225
    2576:	94 e1       	ldi	r25, 0x14	; 20
    2578:	65 ef       	ldi	r22, 0xF5	; 245
    257a:	71 e1       	ldi	r23, 0x11	; 17
    257c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <fdevopen>
    2580:	08 95       	ret

00002582 <_ZN12OrangutanLCD10initPrintfEhh>:
    2582:	80 93 1f 03 	sts	0x031F, r24
    2586:	60 93 1e 03 	sts	0x031E, r22
    258a:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <_ZN12OrangutanLCD10initPrintfEv>
    258e:	08 95       	ret

00002590 <lcd_init_printf_with_dimensions>:
    2590:	80 93 1f 03 	sts	0x031F, r24
    2594:	60 93 1e 03 	sts	0x031E, r22
    2598:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <_ZN12OrangutanLCD10initPrintfEv>
    259c:	08 95       	ret

0000259e <lcd_init_printf>:
    259e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <_ZN12OrangutanLCD10initPrintfEv>
    25a2:	08 95       	ret

000025a4 <_ZN12OrangutanLCD5init2Ev>:
    25a4:	3d 98       	cbi	0x07, 5	; 7
    25a6:	45 9a       	sbi	0x08, 5	; 8
    25a8:	80 e3       	ldi	r24, 0x30	; 48
    25aa:	95 e7       	ldi	r25, 0x75	; 117
    25ac:	a0 e0       	ldi	r26, 0x00	; 0
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	80 93 34 03 	sts	0x0334, r24
    25b4:	90 93 35 03 	sts	0x0335, r25
    25b8:	a0 93 36 03 	sts	0x0336, r26
    25bc:	b0 93 37 03 	sts	0x0337, r27
    25c0:	20 9a       	sbi	0x04, 0	; 4
    25c2:	21 9a       	sbi	0x04, 1	; 4
    25c4:	22 9a       	sbi	0x04, 2	; 4
    25c6:	8e e1       	ldi	r24, 0x1E	; 30
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>
    25ce:	83 e0       	ldi	r24, 0x03	; 3
    25d0:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    25d4:	86 e0       	ldi	r24, 0x06	; 6
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>
    25dc:	83 e0       	ldi	r24, 0x03	; 3
    25de:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    25e2:	82 e0       	ldi	r24, 0x02	; 2
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>
    25ea:	83 e0       	ldi	r24, 0x03	; 3
    25ec:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    25f0:	82 e0       	ldi	r24, 0x02	; 2
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>
    25f8:	82 e0       	ldi	r24, 0x02	; 2
    25fa:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    25fe:	82 e0       	ldi	r24, 0x02	; 2
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>
    2606:	88 e2       	ldi	r24, 0x28	; 40
    2608:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN12OrangutanLCD8send_cmdEh>
    260c:	88 e0       	ldi	r24, 0x08	; 8
    260e:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN12OrangutanLCD8send_cmdEh>
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN12OrangutanLCD8send_cmdEh>
    2618:	86 e0       	ldi	r24, 0x06	; 6
    261a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN12OrangutanLCD8send_cmdEh>
    261e:	8c e0       	ldi	r24, 0x0C	; 12
    2620:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN12OrangutanLCD8send_cmdEh>
    2624:	08 95       	ret

00002626 <_ZN12OrangutanLCD4initEv>:
    2626:	80 91 38 03 	lds	r24, 0x0338
    262a:	88 23       	and	r24, r24
    262c:	29 f4       	brne	.+10     	; 0x2638 <_ZN12OrangutanLCD4initEv+0x12>
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	80 93 38 03 	sts	0x0338, r24
    2634:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <_ZN12OrangutanLCD5init2Ev>
    2638:	08 95       	ret

0000263a <_ZN12OrangutanLCD4sendEhhh>:
    263a:	ff 92       	push	r15
    263c:	0f 93       	push	r16
    263e:	1f 93       	push	r17
    2640:	08 2f       	mov	r16, r24
    2642:	16 2f       	mov	r17, r22
    2644:	f4 2e       	mov	r15, r20
    2646:	0e 94 13 13 	call	0x2626	; 0x2626 <_ZN12OrangutanLCD4initEv>
    264a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <_ZN12OrangutanLCD8busyWaitEv>
    264e:	37 b1       	in	r19, 0x07	; 7
    2650:	28 b1       	in	r18, 0x08	; 8
    2652:	29 98       	cbi	0x05, 1	; 5
    2654:	11 23       	and	r17, r17
    2656:	11 f0       	breq	.+4      	; 0x265c <_ZN12OrangutanLCD4sendEhhh+0x22>
    2658:	28 9a       	sbi	0x05, 0	; 5
    265a:	01 c0       	rjmp	.+2      	; 0x265e <_ZN12OrangutanLCD4sendEhhh+0x24>
    265c:	28 98       	cbi	0x05, 0	; 5
    265e:	87 b1       	in	r24, 0x07	; 7
    2660:	8c 63       	ori	r24, 0x3C	; 60
    2662:	87 b9       	out	0x07, r24	; 7
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	f8 16       	cp	r15, r24
    2668:	e1 f0       	breq	.+56     	; 0x26a2 <_ZN12OrangutanLCD4sendEhhh+0x68>
    266a:	88 b1       	in	r24, 0x08	; 8
    266c:	90 2f       	mov	r25, r16
    266e:	92 95       	swap	r25
    2670:	9f 70       	andi	r25, 0x0F	; 15
    2672:	99 0f       	add	r25, r25
    2674:	99 0f       	add	r25, r25
    2676:	83 7c       	andi	r24, 0xC3	; 195
    2678:	98 2b       	or	r25, r24
    267a:	98 b9       	out	0x08, r25	; 8
    267c:	2a 9a       	sbi	0x05, 2	; 5
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	fc 01       	movw	r30, r24
    2684:	6f 93       	push	r22
    2686:	64 e0       	ldi	r22, 0x04	; 4
    2688:	6a 95       	dec	r22
    268a:	f1 f7       	brne	.-4      	; 0x2688 <_ZN12OrangutanLCD4sendEhhh+0x4e>
    268c:	6f 91       	pop	r22
    268e:	31 97       	sbiw	r30, 0x01	; 1
    2690:	c9 f7       	brne	.-14     	; 0x2684 <_ZN12OrangutanLCD4sendEhhh+0x4a>
    2692:	2a 98       	cbi	0x05, 2	; 5
    2694:	6f 93       	push	r22
    2696:	64 e0       	ldi	r22, 0x04	; 4
    2698:	6a 95       	dec	r22
    269a:	f1 f7       	brne	.-4      	; 0x2698 <_ZN12OrangutanLCD4sendEhhh+0x5e>
    269c:	6f 91       	pop	r22
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	c9 f7       	brne	.-14     	; 0x2694 <_ZN12OrangutanLCD4sendEhhh+0x5a>
    26a2:	88 b1       	in	r24, 0x08	; 8
    26a4:	0f 70       	andi	r16, 0x0F	; 15
    26a6:	00 0f       	add	r16, r16
    26a8:	00 0f       	add	r16, r16
    26aa:	83 7c       	andi	r24, 0xC3	; 195
    26ac:	80 2b       	or	r24, r16
    26ae:	88 b9       	out	0x08, r24	; 8
    26b0:	2a 9a       	sbi	0x05, 2	; 5
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	fc 01       	movw	r30, r24
    26b8:	6f 93       	push	r22
    26ba:	64 e0       	ldi	r22, 0x04	; 4
    26bc:	6a 95       	dec	r22
    26be:	f1 f7       	brne	.-4      	; 0x26bc <_ZN12OrangutanLCD4sendEhhh+0x82>
    26c0:	6f 91       	pop	r22
    26c2:	31 97       	sbiw	r30, 0x01	; 1
    26c4:	c9 f7       	brne	.-14     	; 0x26b8 <_ZN12OrangutanLCD4sendEhhh+0x7e>
    26c6:	2a 98       	cbi	0x05, 2	; 5
    26c8:	6f 93       	push	r22
    26ca:	64 e0       	ldi	r22, 0x04	; 4
    26cc:	6a 95       	dec	r22
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <_ZN12OrangutanLCD4sendEhhh+0x92>
    26d0:	6f 91       	pop	r22
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	c9 f7       	brne	.-14     	; 0x26c8 <_ZN12OrangutanLCD4sendEhhh+0x8e>
    26d6:	37 b9       	out	0x07, r19	; 7
    26d8:	28 b9       	out	0x08, r18	; 8
    26da:	1f 91       	pop	r17
    26dc:	0f 91       	pop	r16
    26de:	ff 90       	pop	r15
    26e0:	08 95       	ret

000026e2 <_ZN12OrangutanLCD8send_cmdEh>:
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	42 e0       	ldi	r20, 0x02	; 2
    26e6:	0e 94 1d 13 	call	0x263a	; 0x263a <_ZN12OrangutanLCD4sendEhhh>
    26ea:	08 95       	ret

000026ec <_ZN12OrangutanLCD10moveCursorEhh>:
    26ec:	0f 93       	push	r16
    26ee:	1f 93       	push	r17
    26f0:	08 2f       	mov	r16, r24
    26f2:	16 2f       	mov	r17, r22
    26f4:	08 c0       	rjmp	.+16     	; 0x2706 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    26f6:	00 23       	and	r16, r16
    26f8:	11 f4       	brne	.+4      	; 0x26fe <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    26fa:	80 e1       	ldi	r24, 0x10	; 16
    26fc:	01 c0       	rjmp	.+2      	; 0x2700 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    26fe:	84 e1       	ldi	r24, 0x14	; 20
    2700:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN12OrangutanLCD8send_cmdEh>
    2704:	11 50       	subi	r17, 0x01	; 1
    2706:	11 23       	and	r17, r17
    2708:	b1 f7       	brne	.-20     	; 0x26f6 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    270a:	1f 91       	pop	r17
    270c:	0f 91       	pop	r16
    270e:	08 95       	ret

00002710 <lcd_move_cursor>:
    2710:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN12OrangutanLCD10moveCursorEhh>
    2714:	08 95       	ret

00002716 <_ZN12OrangutanLCD10hideCursorEv>:
    2716:	8c e0       	ldi	r24, 0x0C	; 12
    2718:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN12OrangutanLCD8send_cmdEh>
    271c:	08 95       	ret

0000271e <lcd_hide_cursor>:
    271e:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZN12OrangutanLCD10hideCursorEv>
    2722:	08 95       	ret

00002724 <_ZN12OrangutanLCD10showCursorEh>:
    2724:	81 30       	cpi	r24, 0x01	; 1
    2726:	11 f4       	brne	.+4      	; 0x272c <_ZN12OrangutanLCD10showCursorEh+0x8>
    2728:	8f e0       	ldi	r24, 0x0F	; 15
    272a:	01 c0       	rjmp	.+2      	; 0x272e <_ZN12OrangutanLCD10showCursorEh+0xa>
    272c:	8e e0       	ldi	r24, 0x0E	; 14
    272e:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN12OrangutanLCD8send_cmdEh>
    2732:	08 95       	ret

00002734 <lcd_show_cursor>:
    2734:	0e 94 92 13 	call	0x2724	; 0x2724 <_ZN12OrangutanLCD10showCursorEh>
    2738:	08 95       	ret

0000273a <_ZN12OrangutanLCD6gotoXYEhh>:
    273a:	a4 e0       	ldi	r26, 0x04	; 4
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e3 ea       	ldi	r30, 0xA3	; 163
    2740:	f3 e1       	ldi	r31, 0x13	; 19
    2742:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__prologue_saves__+0x1c>
    2746:	18 2f       	mov	r17, r24
    2748:	06 2f       	mov	r16, r22
    274a:	80 e8       	ldi	r24, 0x80	; 128
    274c:	89 83       	std	Y+1, r24	; 0x01
    274e:	80 ec       	ldi	r24, 0xC0	; 192
    2750:	8a 83       	std	Y+2, r24	; 0x02
    2752:	84 e9       	ldi	r24, 0x94	; 148
    2754:	8b 83       	std	Y+3, r24	; 0x03
    2756:	84 ed       	ldi	r24, 0xD4	; 212
    2758:	8c 83       	std	Y+4, r24	; 0x04
    275a:	fe 01       	movw	r30, r28
    275c:	e6 0f       	add	r30, r22
    275e:	f1 1d       	adc	r31, r1
    2760:	81 81       	ldd	r24, Z+1	; 0x01
    2762:	81 0f       	add	r24, r17
    2764:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN12OrangutanLCD8send_cmdEh>
    2768:	10 93 33 03 	sts	0x0333, r17
    276c:	00 93 32 03 	sts	0x0332, r16
    2770:	24 96       	adiw	r28, 0x04	; 4
    2772:	e4 e0       	ldi	r30, 0x04	; 4
    2774:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__epilogue_restores__+0x1c>

00002778 <lcd_goto_xy>:
    2778:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
    277c:	08 95       	ret

0000277e <_ZN12OrangutanLCD5clearEv>:
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN12OrangutanLCD8send_cmdEh>
    2784:	80 91 30 03 	lds	r24, 0x0330
    2788:	90 91 31 03 	lds	r25, 0x0331
    278c:	89 2b       	or	r24, r25
    278e:	19 f1       	breq	.+70     	; 0x27d6 <_ZN12OrangutanLCD5clearEv+0x58>
    2790:	60 e0       	ldi	r22, 0x00	; 0
    2792:	70 e2       	ldi	r23, 0x20	; 32
    2794:	08 c0       	rjmp	.+16     	; 0x27a6 <_ZN12OrangutanLCD5clearEv+0x28>
    2796:	e0 91 30 03 	lds	r30, 0x0330
    279a:	f0 91 31 03 	lds	r31, 0x0331
    279e:	e4 0f       	add	r30, r20
    27a0:	f5 1f       	adc	r31, r21
    27a2:	70 83       	st	Z, r23
    27a4:	6f 5f       	subi	r22, 0xFF	; 255
    27a6:	46 2f       	mov	r20, r22
    27a8:	50 e0       	ldi	r21, 0x00	; 0
    27aa:	80 91 1e 03 	lds	r24, 0x031E
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	20 91 1f 03 	lds	r18, 0x031F
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	fc 01       	movw	r30, r24
    27ba:	e2 9f       	mul	r30, r18
    27bc:	c0 01       	movw	r24, r0
    27be:	e3 9f       	mul	r30, r19
    27c0:	90 0d       	add	r25, r0
    27c2:	f2 9f       	mul	r31, r18
    27c4:	90 0d       	add	r25, r0
    27c6:	11 24       	eor	r1, r1
    27c8:	48 17       	cp	r20, r24
    27ca:	59 07       	cpc	r21, r25
    27cc:	24 f3       	brlt	.-56     	; 0x2796 <_ZN12OrangutanLCD5clearEv+0x18>
    27ce:	10 92 33 03 	sts	0x0333, r1
    27d2:	10 92 32 03 	sts	0x0332, r1
    27d6:	08 95       	ret

000027d8 <clear>:
    27d8:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN12OrangutanLCD5clearEv>
    27dc:	08 95       	ret

000027de <_ZN12OrangutanLCD9send_dataEh>:
    27de:	61 e0       	ldi	r22, 0x01	; 1
    27e0:	42 e0       	ldi	r20, 0x02	; 2
    27e2:	0e 94 1d 13 	call	0x263a	; 0x263a <_ZN12OrangutanLCD4sendEhhh>
    27e6:	08 95       	ret

000027e8 <_ZN12OrangutanLCD11printBinaryEh>:
    27e8:	0f 93       	push	r16
    27ea:	1f 93       	push	r17
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	00 e0       	ldi	r16, 0x00	; 0
    27f2:	10 e8       	ldi	r17, 0x80	; 128
    27f4:	c8 2f       	mov	r28, r24
    27f6:	d0 e0       	ldi	r29, 0x00	; 0
    27f8:	81 2f       	mov	r24, r17
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	8c 23       	and	r24, r28
    27fe:	9d 23       	and	r25, r29
    2800:	89 2b       	or	r24, r25
    2802:	11 f0       	breq	.+4      	; 0x2808 <_ZN12OrangutanLCD11printBinaryEh+0x20>
    2804:	81 e3       	ldi	r24, 0x31	; 49
    2806:	01 c0       	rjmp	.+2      	; 0x280a <_ZN12OrangutanLCD11printBinaryEh+0x22>
    2808:	80 e3       	ldi	r24, 0x30	; 48
    280a:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZN12OrangutanLCD9send_dataEh>
    280e:	0f 5f       	subi	r16, 0xFF	; 255
    2810:	08 30       	cpi	r16, 0x08	; 8
    2812:	11 f0       	breq	.+4      	; 0x2818 <_ZN12OrangutanLCD11printBinaryEh+0x30>
    2814:	16 95       	lsr	r17
    2816:	f0 cf       	rjmp	.-32     	; 0x27f8 <_ZN12OrangutanLCD11printBinaryEh+0x10>
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
    2820:	08 95       	ret

00002822 <print_binary>:
    2822:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <_ZN12OrangutanLCD11printBinaryEh>
    2826:	08 95       	ret

00002828 <_ZN12OrangutanLCD14printHexNibbleEh>:
    2828:	8a 30       	cpi	r24, 0x0A	; 10
    282a:	10 f4       	brcc	.+4      	; 0x2830 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    282c:	80 5d       	subi	r24, 0xD0	; 208
    282e:	01 c0       	rjmp	.+2      	; 0x2832 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    2830:	89 5c       	subi	r24, 0xC9	; 201
    2832:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZN12OrangutanLCD9send_dataEh>
    2836:	08 95       	ret

00002838 <_ZN12OrangutanLCD8printHexEh>:
    2838:	1f 93       	push	r17
    283a:	18 2f       	mov	r17, r24
    283c:	82 95       	swap	r24
    283e:	8f 70       	andi	r24, 0x0F	; 15
    2840:	0e 94 14 14 	call	0x2828	; 0x2828 <_ZN12OrangutanLCD14printHexNibbleEh>
    2844:	81 2f       	mov	r24, r17
    2846:	8f 70       	andi	r24, 0x0F	; 15
    2848:	0e 94 14 14 	call	0x2828	; 0x2828 <_ZN12OrangutanLCD14printHexNibbleEh>
    284c:	1f 91       	pop	r17
    284e:	08 95       	ret

00002850 <_ZN12OrangutanLCD8printHexEj>:
    2850:	1f 93       	push	r17
    2852:	18 2f       	mov	r17, r24
    2854:	89 2f       	mov	r24, r25
    2856:	0e 94 1c 14 	call	0x2838	; 0x2838 <_ZN12OrangutanLCD8printHexEh>
    285a:	81 2f       	mov	r24, r17
    285c:	0e 94 1c 14 	call	0x2838	; 0x2838 <_ZN12OrangutanLCD8printHexEh>
    2860:	1f 91       	pop	r17
    2862:	08 95       	ret

00002864 <print_hex>:
    2864:	0e 94 28 14 	call	0x2850	; 0x2850 <_ZN12OrangutanLCD8printHexEj>
    2868:	08 95       	ret

0000286a <print_hex_byte>:
    286a:	0e 94 1c 14 	call	0x2838	; 0x2838 <_ZN12OrangutanLCD8printHexEh>
    286e:	08 95       	ret

00002870 <_ZN12OrangutanLCD5printEm>:
    2870:	6f 92       	push	r6
    2872:	7f 92       	push	r7
    2874:	8f 92       	push	r8
    2876:	9f 92       	push	r9
    2878:	af 92       	push	r10
    287a:	bf 92       	push	r11
    287c:	cf 92       	push	r12
    287e:	df 92       	push	r13
    2880:	ff 92       	push	r15
    2882:	0f 93       	push	r16
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	2a 97       	sbiw	r28, 0x0a	; 10
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	5b 01       	movw	r10, r22
    289a:	6c 01       	movw	r12, r24
    289c:	0a e0       	ldi	r16, 0x0A	; 10
    289e:	3e 01       	movw	r6, r28
    28a0:	08 94       	sec
    28a2:	61 1c       	adc	r6, r1
    28a4:	71 1c       	adc	r7, r1
    28a6:	fa 2c       	mov	r15, r10
    28a8:	c6 01       	movw	r24, r12
    28aa:	b5 01       	movw	r22, r10
    28ac:	2a e0       	ldi	r18, 0x0A	; 10
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	0e 94 81 17 	call	0x2f02	; 0x2f02 <__udivmodsi4>
    28b8:	c9 01       	movw	r24, r18
    28ba:	da 01       	movw	r26, r20
    28bc:	5c 01       	movw	r10, r24
    28be:	6d 01       	movw	r12, r26
    28c0:	01 50       	subi	r16, 0x01	; 1
    28c2:	43 01       	movw	r8, r6
    28c4:	80 0e       	add	r8, r16
    28c6:	91 1c       	adc	r9, r1
    28c8:	80 e3       	ldi	r24, 0x30	; 48
    28ca:	f8 0e       	add	r15, r24
    28cc:	c6 01       	movw	r24, r12
    28ce:	b5 01       	movw	r22, r10
    28d0:	2a e0       	ldi	r18, 0x0A	; 10
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	40 e0       	ldi	r20, 0x00	; 0
    28d6:	50 e0       	ldi	r21, 0x00	; 0
    28d8:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <__mulsi3>
    28dc:	f6 1a       	sub	r15, r22
    28de:	f4 01       	movw	r30, r8
    28e0:	f0 82       	st	Z, r15
    28e2:	a1 14       	cp	r10, r1
    28e4:	b1 04       	cpc	r11, r1
    28e6:	c1 04       	cpc	r12, r1
    28e8:	d1 04       	cpc	r13, r1
    28ea:	e9 f6       	brne	.-70     	; 0x28a6 <_ZN12OrangutanLCD5printEm+0x36>
    28ec:	08 c0       	rjmp	.+16     	; 0x28fe <_ZN12OrangutanLCD5printEm+0x8e>
    28ee:	f6 01       	movw	r30, r12
    28f0:	e0 0f       	add	r30, r16
    28f2:	f1 1d       	adc	r31, r1
    28f4:	80 81       	ld	r24, Z
    28f6:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZN12OrangutanLCD9send_dataEh>
    28fa:	0f 5f       	subi	r16, 0xFF	; 255
    28fc:	04 c0       	rjmp	.+8      	; 0x2906 <_ZN12OrangutanLCD5printEm+0x96>
    28fe:	6e 01       	movw	r12, r28
    2900:	08 94       	sec
    2902:	c1 1c       	adc	r12, r1
    2904:	d1 1c       	adc	r13, r1
    2906:	0a 30       	cpi	r16, 0x0A	; 10
    2908:	90 f3       	brcs	.-28     	; 0x28ee <_ZN12OrangutanLCD5printEm+0x7e>
    290a:	2a 96       	adiw	r28, 0x0a	; 10
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	cd bf       	out	0x3d, r28	; 61
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	0f 91       	pop	r16
    291c:	ff 90       	pop	r15
    291e:	df 90       	pop	r13
    2920:	cf 90       	pop	r12
    2922:	bf 90       	pop	r11
    2924:	af 90       	pop	r10
    2926:	9f 90       	pop	r9
    2928:	8f 90       	pop	r8
    292a:	7f 90       	pop	r7
    292c:	6f 90       	pop	r6
    292e:	08 95       	ret

00002930 <print_unsigned_long>:
    2930:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN12OrangutanLCD5printEm>
    2934:	08 95       	ret

00002936 <_ZN12OrangutanLCD5printEl>:
    2936:	ef 92       	push	r14
    2938:	ff 92       	push	r15
    293a:	0f 93       	push	r16
    293c:	1f 93       	push	r17
    293e:	7b 01       	movw	r14, r22
    2940:	8c 01       	movw	r16, r24
    2942:	97 ff       	sbrs	r25, 7
    2944:	0b c0       	rjmp	.+22     	; 0x295c <_ZN12OrangutanLCD5printEl+0x26>
    2946:	10 95       	com	r17
    2948:	00 95       	com	r16
    294a:	f0 94       	com	r15
    294c:	e0 94       	com	r14
    294e:	e1 1c       	adc	r14, r1
    2950:	f1 1c       	adc	r15, r1
    2952:	01 1d       	adc	r16, r1
    2954:	11 1d       	adc	r17, r1
    2956:	8d e2       	ldi	r24, 0x2D	; 45
    2958:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZN12OrangutanLCD9send_dataEh>
    295c:	c8 01       	movw	r24, r16
    295e:	b7 01       	movw	r22, r14
    2960:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN12OrangutanLCD5printEm>
    2964:	1f 91       	pop	r17
    2966:	0f 91       	pop	r16
    2968:	ff 90       	pop	r15
    296a:	ef 90       	pop	r14
    296c:	08 95       	ret

0000296e <print_long>:
    296e:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN12OrangutanLCD5printEl>
    2972:	08 95       	ret

00002974 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    2974:	cf 93       	push	r28
    2976:	df 93       	push	r29
    2978:	ec 01       	movw	r28, r24
    297a:	03 c0       	rjmp	.+6      	; 0x2982 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    297c:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZN12OrangutanLCD9send_dataEh>
    2980:	21 96       	adiw	r28, 0x01	; 1
    2982:	fe 01       	movw	r30, r28
    2984:	84 91       	lpm	r24, Z+
    2986:	88 23       	and	r24, r24
    2988:	c9 f7       	brne	.-14     	; 0x297c <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    298a:	df 91       	pop	r29
    298c:	cf 91       	pop	r28
    298e:	08 95       	ret

00002990 <print_from_program_space>:
    2990:	0e 94 ba 14 	call	0x2974	; 0x2974 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    2994:	08 95       	ret

00002996 <_ZN12OrangutanLCD5printEPKc>:
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	ec 01       	movw	r28, r24
    299c:	03 c0       	rjmp	.+6      	; 0x29a4 <_ZN12OrangutanLCD5printEPKc+0xe>
    299e:	21 96       	adiw	r28, 0x01	; 1
    29a0:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZN12OrangutanLCD9send_dataEh>
    29a4:	88 81       	ld	r24, Y
    29a6:	88 23       	and	r24, r24
    29a8:	d1 f7       	brne	.-12     	; 0x299e <_ZN12OrangutanLCD5printEPKc+0x8>
    29aa:	df 91       	pop	r29
    29ac:	cf 91       	pop	r28
    29ae:	08 95       	ret

000029b0 <print>:
    29b0:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN12OrangutanLCD5printEPKc>
    29b4:	08 95       	ret

000029b6 <_ZN12OrangutanLCD5printEc>:
    29b6:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZN12OrangutanLCD9send_dataEh>
    29ba:	08 95       	ret

000029bc <print_character>:
    29bc:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZN12OrangutanLCD9send_dataEh>
    29c0:	08 95       	ret

000029c2 <lcd_putchar>:
    29c2:	a0 e0       	ldi	r26, 0x00	; 0
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e7 ee       	ldi	r30, 0xE7	; 231
    29c8:	f4 e1       	ldi	r31, 0x14	; 20
    29ca:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__prologue_saves__+0x14>
    29ce:	e8 2e       	mov	r14, r24
    29d0:	80 91 30 03 	lds	r24, 0x0330
    29d4:	90 91 31 03 	lds	r25, 0x0331
    29d8:	89 2b       	or	r24, r25
    29da:	09 f4       	brne	.+2      	; 0x29de <lcd_putchar+0x1c>
    29dc:	05 c1       	rjmp	.+522    	; 0x2be8 <lcd_putchar+0x226>
    29de:	2a e0       	ldi	r18, 0x0A	; 10
    29e0:	e2 16       	cp	r14, r18
    29e2:	09 f4       	brne	.+2      	; 0x29e6 <lcd_putchar+0x24>
    29e4:	46 c0       	rjmp	.+140    	; 0x2a72 <lcd_putchar+0xb0>
    29e6:	38 e0       	ldi	r19, 0x08	; 8
    29e8:	e3 16       	cp	r14, r19
    29ea:	c9 f4       	brne	.+50     	; 0x2a1e <lcd_putchar+0x5c>
    29ec:	80 91 33 03 	lds	r24, 0x0333
    29f0:	81 50       	subi	r24, 0x01	; 1
    29f2:	80 93 33 03 	sts	0x0333, r24
    29f6:	8f 3f       	cpi	r24, 0xFF	; 255
    29f8:	51 f4       	brne	.+20     	; 0x2a0e <lcd_putchar+0x4c>
    29fa:	80 91 32 03 	lds	r24, 0x0332
    29fe:	81 50       	subi	r24, 0x01	; 1
    2a00:	80 93 32 03 	sts	0x0332, r24
    2a04:	80 91 1f 03 	lds	r24, 0x031F
    2a08:	81 50       	subi	r24, 0x01	; 1
    2a0a:	80 93 33 03 	sts	0x0333, r24
    2a0e:	80 91 32 03 	lds	r24, 0x0332
    2a12:	8f 3f       	cpi	r24, 0xFF	; 255
    2a14:	09 f0       	breq	.+2      	; 0x2a18 <lcd_putchar+0x56>
    2a16:	e2 c0       	rjmp	.+452    	; 0x2bdc <lcd_putchar+0x21a>
    2a18:	10 92 32 03 	sts	0x0332, r1
    2a1c:	dd c0       	rjmp	.+442    	; 0x2bd8 <lcd_putchar+0x216>
    2a1e:	8e 2d       	mov	r24, r14
    2a20:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZN12OrangutanLCD9send_dataEh>
    2a24:	20 91 32 03 	lds	r18, 0x0332
    2a28:	22 23       	and	r18, r18
    2a2a:	c9 f0       	breq	.+50     	; 0x2a5e <lcd_putchar+0x9c>
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	21 50       	subi	r18, 0x01	; 1
    2a30:	30 40       	sbci	r19, 0x00	; 0
    2a32:	80 91 1f 03 	lds	r24, 0x031F
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	ac 01       	movw	r20, r24
    2a3a:	24 9f       	mul	r18, r20
    2a3c:	c0 01       	movw	r24, r0
    2a3e:	25 9f       	mul	r18, r21
    2a40:	90 0d       	add	r25, r0
    2a42:	34 9f       	mul	r19, r20
    2a44:	90 0d       	add	r25, r0
    2a46:	11 24       	eor	r1, r1
    2a48:	20 91 33 03 	lds	r18, 0x0333
    2a4c:	e0 91 30 03 	lds	r30, 0x0330
    2a50:	f0 91 31 03 	lds	r31, 0x0331
    2a54:	e8 0f       	add	r30, r24
    2a56:	f9 1f       	adc	r31, r25
    2a58:	e2 0f       	add	r30, r18
    2a5a:	f1 1d       	adc	r31, r1
    2a5c:	e0 82       	st	Z, r14
    2a5e:	80 91 33 03 	lds	r24, 0x0333
    2a62:	8f 5f       	subi	r24, 0xFF	; 255
    2a64:	80 93 33 03 	sts	0x0333, r24
    2a68:	90 91 1f 03 	lds	r25, 0x031F
    2a6c:	89 17       	cp	r24, r25
    2a6e:	09 f0       	breq	.+2      	; 0x2a72 <lcd_putchar+0xb0>
    2a70:	bb c0       	rjmp	.+374    	; 0x2be8 <lcd_putchar+0x226>
    2a72:	40 91 32 03 	lds	r20, 0x0332
    2a76:	24 2f       	mov	r18, r20
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	80 91 1e 03 	lds	r24, 0x031E
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	28 17       	cp	r18, r24
    2a84:	39 07       	cpc	r19, r25
    2a86:	09 f0       	breq	.+2      	; 0x2a8a <lcd_putchar+0xc8>
    2a88:	a4 c0       	rjmp	.+328    	; 0x2bd2 <lcd_putchar+0x210>
    2a8a:	c0 e0       	ldi	r28, 0x00	; 0
    2a8c:	d0 e0       	ldi	r29, 0x00	; 0
    2a8e:	44 c0       	rjmp	.+136    	; 0x2b18 <lcd_putchar+0x156>
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	6c 2f       	mov	r22, r28
    2a94:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
    2a98:	ff 24       	eor	r15, r15
    2a9a:	6e 01       	movw	r12, r28
    2a9c:	08 94       	sec
    2a9e:	c1 1c       	adc	r12, r1
    2aa0:	d1 1c       	adc	r13, r1
    2aa2:	35 c0       	rjmp	.+106    	; 0x2b0e <lcd_putchar+0x14c>
    2aa4:	0f 2d       	mov	r16, r15
    2aa6:	10 e0       	ldi	r17, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	9c 01       	movw	r18, r24
    2aac:	c2 9f       	mul	r28, r18
    2aae:	c0 01       	movw	r24, r0
    2ab0:	c3 9f       	mul	r28, r19
    2ab2:	90 0d       	add	r25, r0
    2ab4:	d2 9f       	mul	r29, r18
    2ab6:	90 0d       	add	r25, r0
    2ab8:	11 24       	eor	r1, r1
    2aba:	e0 91 30 03 	lds	r30, 0x0330
    2abe:	f0 91 31 03 	lds	r31, 0x0331
    2ac2:	e0 0f       	add	r30, r16
    2ac4:	f1 1f       	adc	r31, r17
    2ac6:	e8 0f       	add	r30, r24
    2ac8:	f9 1f       	adc	r31, r25
    2aca:	80 81       	ld	r24, Z
    2acc:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZN12OrangutanLCD9send_dataEh>
    2ad0:	e0 91 30 03 	lds	r30, 0x0330
    2ad4:	f0 91 31 03 	lds	r31, 0x0331
    2ad8:	80 91 1f 03 	lds	r24, 0x031F
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	c8 9f       	mul	r28, r24
    2ae0:	d0 01       	movw	r26, r0
    2ae2:	c9 9f       	mul	r28, r25
    2ae4:	b0 0d       	add	r27, r0
    2ae6:	d8 9f       	mul	r29, r24
    2ae8:	b0 0d       	add	r27, r0
    2aea:	11 24       	eor	r1, r1
    2aec:	e0 0f       	add	r30, r16
    2aee:	f1 1f       	adc	r31, r17
    2af0:	ae 0f       	add	r26, r30
    2af2:	bf 1f       	adc	r27, r31
    2af4:	ac 01       	movw	r20, r24
    2af6:	c4 9e       	mul	r12, r20
    2af8:	c0 01       	movw	r24, r0
    2afa:	c5 9e       	mul	r12, r21
    2afc:	90 0d       	add	r25, r0
    2afe:	d4 9e       	mul	r13, r20
    2b00:	90 0d       	add	r25, r0
    2b02:	11 24       	eor	r1, r1
    2b04:	e8 0f       	add	r30, r24
    2b06:	f9 1f       	adc	r31, r25
    2b08:	80 81       	ld	r24, Z
    2b0a:	8c 93       	st	X, r24
    2b0c:	f3 94       	inc	r15
    2b0e:	80 91 1f 03 	lds	r24, 0x031F
    2b12:	f8 16       	cp	r15, r24
    2b14:	38 f2       	brcs	.-114    	; 0x2aa4 <lcd_putchar+0xe2>
    2b16:	e6 01       	movw	r28, r12
    2b18:	60 91 1e 03 	lds	r22, 0x031E
    2b1c:	86 2f       	mov	r24, r22
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	02 97       	sbiw	r24, 0x02	; 2
    2b22:	c8 17       	cp	r28, r24
    2b24:	d9 07       	cpc	r29, r25
    2b26:	0c f4       	brge	.+2      	; 0x2b2a <lcd_putchar+0x168>
    2b28:	b3 cf       	rjmp	.-154    	; 0x2a90 <lcd_putchar+0xce>
    2b2a:	62 30       	cpi	r22, 0x02	; 2
    2b2c:	08 f4       	brcc	.+2      	; 0x2b30 <lcd_putchar+0x16e>
    2b2e:	40 c0       	rjmp	.+128    	; 0x2bb0 <lcd_putchar+0x1ee>
    2b30:	62 50       	subi	r22, 0x02	; 2
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
    2b38:	ff 24       	eor	r15, r15
    2b3a:	40 e2       	ldi	r20, 0x20	; 32
    2b3c:	d4 2e       	mov	r13, r20
    2b3e:	34 c0       	rjmp	.+104    	; 0x2ba8 <lcd_putchar+0x1e6>
    2b40:	0f 2d       	mov	r16, r15
    2b42:	10 e0       	ldi	r17, 0x00	; 0
    2b44:	80 91 1e 03 	lds	r24, 0x031E
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	02 97       	sbiw	r24, 0x02	; 2
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	ac 01       	movw	r20, r24
    2b50:	42 9f       	mul	r20, r18
    2b52:	c0 01       	movw	r24, r0
    2b54:	43 9f       	mul	r20, r19
    2b56:	90 0d       	add	r25, r0
    2b58:	52 9f       	mul	r21, r18
    2b5a:	90 0d       	add	r25, r0
    2b5c:	11 24       	eor	r1, r1
    2b5e:	e0 91 30 03 	lds	r30, 0x0330
    2b62:	f0 91 31 03 	lds	r31, 0x0331
    2b66:	e0 0f       	add	r30, r16
    2b68:	f1 1f       	adc	r31, r17
    2b6a:	e8 0f       	add	r30, r24
    2b6c:	f9 1f       	adc	r31, r25
    2b6e:	80 81       	ld	r24, Z
    2b70:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZN12OrangutanLCD9send_dataEh>
    2b74:	20 91 1e 03 	lds	r18, 0x031E
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	22 50       	subi	r18, 0x02	; 2
    2b7c:	30 40       	sbci	r19, 0x00	; 0
    2b7e:	80 91 1f 03 	lds	r24, 0x031F
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	ac 01       	movw	r20, r24
    2b86:	24 9f       	mul	r18, r20
    2b88:	c0 01       	movw	r24, r0
    2b8a:	25 9f       	mul	r18, r21
    2b8c:	90 0d       	add	r25, r0
    2b8e:	34 9f       	mul	r19, r20
    2b90:	90 0d       	add	r25, r0
    2b92:	11 24       	eor	r1, r1
    2b94:	e0 91 30 03 	lds	r30, 0x0330
    2b98:	f0 91 31 03 	lds	r31, 0x0331
    2b9c:	e0 0f       	add	r30, r16
    2b9e:	f1 1f       	adc	r31, r17
    2ba0:	e8 0f       	add	r30, r24
    2ba2:	f9 1f       	adc	r31, r25
    2ba4:	d0 82       	st	Z, r13
    2ba6:	f3 94       	inc	r15
    2ba8:	20 91 1f 03 	lds	r18, 0x031F
    2bac:	f2 16       	cp	r15, r18
    2bae:	40 f2       	brcs	.-112    	; 0x2b40 <lcd_putchar+0x17e>
    2bb0:	60 91 1e 03 	lds	r22, 0x031E
    2bb4:	61 50       	subi	r22, 0x01	; 1
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
    2bbc:	00 e0       	ldi	r16, 0x00	; 0
    2bbe:	04 c0       	rjmp	.+8      	; 0x2bc8 <lcd_putchar+0x206>
    2bc0:	80 e2       	ldi	r24, 0x20	; 32
    2bc2:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZN12OrangutanLCD9send_dataEh>
    2bc6:	0f 5f       	subi	r16, 0xFF	; 255
    2bc8:	80 91 1f 03 	lds	r24, 0x031F
    2bcc:	08 17       	cp	r16, r24
    2bce:	c0 f3       	brcs	.-16     	; 0x2bc0 <lcd_putchar+0x1fe>
    2bd0:	03 c0       	rjmp	.+6      	; 0x2bd8 <lcd_putchar+0x216>
    2bd2:	4f 5f       	subi	r20, 0xFF	; 255
    2bd4:	40 93 32 03 	sts	0x0332, r20
    2bd8:	10 92 33 03 	sts	0x0333, r1
    2bdc:	80 91 33 03 	lds	r24, 0x0333
    2be0:	60 91 32 03 	lds	r22, 0x0332
    2be4:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN12OrangutanLCD6gotoXYEhh>
    2be8:	2e 2d       	mov	r18, r14
    2bea:	33 27       	eor	r19, r19
    2bec:	27 fd       	sbrc	r18, 7
    2bee:	30 95       	com	r19
    2bf0:	c9 01       	movw	r24, r18
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	e8 e0       	ldi	r30, 0x08	; 8
    2bf8:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__epilogue_restores__+0x14>

00002bfc <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    2bfc:	ef 92       	push	r14
    2bfe:	ff 92       	push	r15
    2c00:	0f 93       	push	r16
    2c02:	1f 93       	push	r17
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	7c 01       	movw	r14, r24
    2c0a:	06 2f       	mov	r16, r22
    2c0c:	10 e0       	ldi	r17, 0x00	; 0
    2c0e:	53 e0       	ldi	r21, 0x03	; 3
    2c10:	00 0f       	add	r16, r16
    2c12:	11 1f       	adc	r17, r17
    2c14:	5a 95       	dec	r21
    2c16:	e1 f7       	brne	.-8      	; 0x2c10 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    2c18:	c0 e0       	ldi	r28, 0x00	; 0
    2c1a:	d0 e0       	ldi	r29, 0x00	; 0
    2c1c:	9e 01       	movw	r18, r28
    2c1e:	20 0f       	add	r18, r16
    2c20:	82 2f       	mov	r24, r18
    2c22:	80 64       	ori	r24, 0x40	; 64
    2c24:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN12OrangutanLCD8send_cmdEh>
    2c28:	f7 01       	movw	r30, r14
    2c2a:	ec 0f       	add	r30, r28
    2c2c:	fd 1f       	adc	r31, r29
    2c2e:	e4 91       	lpm	r30, Z+
    2c30:	8e 2f       	mov	r24, r30
    2c32:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZN12OrangutanLCD9send_dataEh>
    2c36:	21 96       	adiw	r28, 0x01	; 1
    2c38:	c8 30       	cpi	r28, 0x08	; 8
    2c3a:	d1 05       	cpc	r29, r1
    2c3c:	79 f7       	brne	.-34     	; 0x2c1c <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    2c3e:	cd b7       	in	r28, 0x3d	; 61
    2c40:	de b7       	in	r29, 0x3e	; 62
    2c42:	e6 e0       	ldi	r30, 0x06	; 6
    2c44:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__epilogue_restores__+0x18>

00002c48 <lcd_load_custom_character>:
    2c48:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    2c4c:	08 95       	ret

00002c4e <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    2c4e:	60 e0       	ldi	r22, 0x00	; 0
    2c50:	41 e0       	ldi	r20, 0x01	; 1
    2c52:	0e 94 1d 13 	call	0x263a	; 0x263a <_ZN12OrangutanLCD4sendEhhh>
    2c56:	08 95       	ret

00002c58 <_ZN12OrangutanLCD6scrollEhhj>:
    2c58:	0f 93       	push	r16
    2c5a:	1f 93       	push	r17
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	08 2f       	mov	r16, r24
    2c62:	16 2f       	mov	r17, r22
    2c64:	ea 01       	movw	r28, r20
    2c66:	0b c0       	rjmp	.+22     	; 0x2c7e <_ZN12OrangutanLCD6scrollEhhj+0x26>
    2c68:	00 23       	and	r16, r16
    2c6a:	11 f4       	brne	.+4      	; 0x2c70 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    2c6c:	88 e1       	ldi	r24, 0x18	; 24
    2c6e:	01 c0       	rjmp	.+2      	; 0x2c72 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    2c70:	8c e1       	ldi	r24, 0x1C	; 28
    2c72:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN12OrangutanLCD8send_cmdEh>
    2c76:	ce 01       	movw	r24, r28
    2c78:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN13OrangutanTime17delayMillisecondsEj>
    2c7c:	11 50       	subi	r17, 0x01	; 1
    2c7e:	11 23       	and	r17, r17
    2c80:	99 f7       	brne	.-26     	; 0x2c68 <_ZN12OrangutanLCD6scrollEhhj+0x10>
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	1f 91       	pop	r17
    2c88:	0f 91       	pop	r16
    2c8a:	08 95       	ret

00002c8c <lcd_scroll>:
    2c8c:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN12OrangutanLCD6scrollEhhj>
    2c90:	08 95       	ret

00002c92 <__vector_11>:
    2c92:	2f 92       	push	r2
    2c94:	8f 93       	push	r24
    2c96:	9f 93       	push	r25
    2c98:	2f b6       	in	r2, 0x3f	; 63
    2c9a:	80 91 3a 03 	lds	r24, 0x033A
    2c9e:	90 91 3b 03 	lds	r25, 0x033B
    2ca2:	01 96       	adiw	r24, 0x01	; 1
    2ca4:	80 93 3a 03 	sts	0x033A, r24
    2ca8:	90 93 3b 03 	sts	0x033B, r25
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	80 91 3c 03 	lds	r24, 0x033C
    2cb2:	89 1f       	adc	r24, r25
    2cb4:	80 93 3c 03 	sts	0x033C, r24
    2cb8:	90 91 42 03 	lds	r25, 0x0342
    2cbc:	9c 5f       	subi	r25, 0xFC	; 252
    2cbe:	90 93 42 03 	sts	0x0342, r25
    2cc2:	80 91 41 03 	lds	r24, 0x0341
    2cc6:	80 51       	subi	r24, 0x10	; 16
    2cc8:	97 42       	sbci	r25, 0x27	; 39
    2cca:	c0 f0       	brcs	.+48     	; 0x2cfc <end>
    2ccc:	90 93 42 03 	sts	0x0342, r25
    2cd0:	80 93 41 03 	sts	0x0341, r24
    2cd4:	80 91 3d 03 	lds	r24, 0x033D
    2cd8:	90 91 3e 03 	lds	r25, 0x033E
    2cdc:	01 96       	adiw	r24, 0x01	; 1
    2cde:	80 93 3d 03 	sts	0x033D, r24
    2ce2:	90 93 3e 03 	sts	0x033E, r25
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	80 91 3f 03 	lds	r24, 0x033F
    2cec:	89 1f       	adc	r24, r25
    2cee:	80 93 3f 03 	sts	0x033F, r24
    2cf2:	80 91 40 03 	lds	r24, 0x0340
    2cf6:	89 1f       	adc	r24, r25
    2cf8:	80 93 40 03 	sts	0x0340, r24

00002cfc <end>:
    2cfc:	2f be       	out	0x3f, r2	; 63
    2cfe:	9f 91       	pop	r25
    2d00:	8f 91       	pop	r24
    2d02:	2f 90       	pop	r2
    2d04:	18 95       	reti

00002d06 <ticks_to_microseconds>:
    2d06:	6f 5f       	subi	r22, 0xFF	; 255
    2d08:	7f 4f       	sbci	r23, 0xFF	; 255
    2d0a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0e:	66 0f       	add	r22, r22
    2d10:	77 1f       	adc	r23, r23
    2d12:	88 1f       	adc	r24, r24
    2d14:	99 1f       	adc	r25, r25
    2d16:	25 e0       	ldi	r18, 0x05	; 5
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e0       	ldi	r20, 0x00	; 0
    2d1c:	50 e0       	ldi	r21, 0x00	; 0
    2d1e:	0e 94 81 17 	call	0x2f02	; 0x2f02 <__udivmodsi4>
    2d22:	ca 01       	movw	r24, r20
    2d24:	b9 01       	movw	r22, r18
    2d26:	08 95       	ret

00002d28 <delay_ms>:
    2d28:	28 ee       	ldi	r18, 0xE8	; 232
    2d2a:	33 e0       	ldi	r19, 0x03	; 3
    2d2c:	09 c0       	rjmp	.+18     	; 0x2d40 <delay_ms+0x18>
    2d2e:	f9 01       	movw	r30, r18
    2d30:	6f 93       	push	r22
    2d32:	64 e0       	ldi	r22, 0x04	; 4
    2d34:	6a 95       	dec	r22
    2d36:	f1 f7       	brne	.-4      	; 0x2d34 <delay_ms+0xc>
    2d38:	6f 91       	pop	r22
    2d3a:	31 97       	sbiw	r30, 0x01	; 1
    2d3c:	c9 f7       	brne	.-14     	; 0x2d30 <delay_ms+0x8>
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	00 97       	sbiw	r24, 0x00	; 0
    2d42:	a9 f7       	brne	.-22     	; 0x2d2e <delay_ms+0x6>
    2d44:	08 95       	ret

00002d46 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    2d46:	6f 5f       	subi	r22, 0xFF	; 255
    2d48:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4e:	66 0f       	add	r22, r22
    2d50:	77 1f       	adc	r23, r23
    2d52:	88 1f       	adc	r24, r24
    2d54:	99 1f       	adc	r25, r25
    2d56:	25 e0       	ldi	r18, 0x05	; 5
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e0       	ldi	r20, 0x00	; 0
    2d5c:	50 e0       	ldi	r21, 0x00	; 0
    2d5e:	0e 94 81 17 	call	0x2f02	; 0x2f02 <__udivmodsi4>
    2d62:	ca 01       	movw	r24, r20
    2d64:	b9 01       	movw	r22, r18
    2d66:	08 95       	ret

00002d68 <_ZN13OrangutanTime17delayMillisecondsEj>:
    2d68:	28 ee       	ldi	r18, 0xE8	; 232
    2d6a:	33 e0       	ldi	r19, 0x03	; 3
    2d6c:	09 c0       	rjmp	.+18     	; 0x2d80 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    2d6e:	f9 01       	movw	r30, r18
    2d70:	6f 93       	push	r22
    2d72:	64 e0       	ldi	r22, 0x04	; 4
    2d74:	6a 95       	dec	r22
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    2d78:	6f 91       	pop	r22
    2d7a:	31 97       	sbiw	r30, 0x01	; 1
    2d7c:	c9 f7       	brne	.-14     	; 0x2d70 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	00 97       	sbiw	r24, 0x00	; 0
    2d82:	a9 f7       	brne	.-22     	; 0x2d6e <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    2d84:	08 95       	ret

00002d86 <_ZN13OrangutanTime5init2Ev>:
    2d86:	a0 e7       	ldi	r26, 0x70	; 112
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	8c 91       	ld	r24, X
    2d8c:	8e 7f       	andi	r24, 0xFE	; 254
    2d8e:	8c 93       	st	X, r24
    2d90:	e0 eb       	ldi	r30, 0xB0	; 176
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	83 60       	ori	r24, 0x03	; 3
    2d98:	80 83       	st	Z, r24
    2d9a:	e1 eb       	ldi	r30, 0xB1	; 177
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	80 7f       	andi	r24, 0xF0	; 240
    2da2:	80 83       	st	Z, r24
    2da4:	80 81       	ld	r24, Z
    2da6:	82 60       	ori	r24, 0x02	; 2
    2da8:	80 83       	st	Z, r24
    2daa:	b8 9a       	sbi	0x17, 0	; 23
    2dac:	8c 91       	ld	r24, X
    2dae:	81 60       	ori	r24, 0x01	; 1
    2db0:	8c 93       	st	X, r24
    2db2:	78 94       	sei
    2db4:	08 95       	ret

00002db6 <_ZN13OrangutanTime4initEv>:
    2db6:	80 91 43 03 	lds	r24, 0x0343
    2dba:	88 23       	and	r24, r24
    2dbc:	29 f4       	brne	.+10     	; 0x2dc8 <_ZN13OrangutanTime4initEv+0x12>
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	80 93 43 03 	sts	0x0343, r24
    2dc4:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <_ZN13OrangutanTime5init2Ev>
    2dc8:	08 95       	ret

00002dca <_ZN13OrangutanTime2msEv>:
    2dca:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN13OrangutanTime4initEv>
    2dce:	e0 e7       	ldi	r30, 0x70	; 112
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	80 81       	ld	r24, Z
    2dd4:	8e 7f       	andi	r24, 0xFE	; 254
    2dd6:	80 83       	st	Z, r24
    2dd8:	20 91 3d 03 	lds	r18, 0x033D
    2ddc:	30 91 3e 03 	lds	r19, 0x033E
    2de0:	40 91 3f 03 	lds	r20, 0x033F
    2de4:	50 91 40 03 	lds	r21, 0x0340
    2de8:	80 81       	ld	r24, Z
    2dea:	81 60       	ori	r24, 0x01	; 1
    2dec:	80 83       	st	Z, r24
    2dee:	b9 01       	movw	r22, r18
    2df0:	ca 01       	movw	r24, r20
    2df2:	08 95       	ret

00002df4 <get_ms>:
    2df4:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZN13OrangutanTime2msEv>
    2df8:	08 95       	ret

00002dfa <_ZN13OrangutanTime5ticksEv>:
    2dfa:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN13OrangutanTime4initEv>
    2dfe:	80 91 70 00 	lds	r24, 0x0070
    2e02:	8e 7f       	andi	r24, 0xFE	; 254
    2e04:	80 93 70 00 	sts	0x0070, r24
    2e08:	60 91 b2 00 	lds	r22, 0x00B2
    2e0c:	80 91 39 03 	lds	r24, 0x0339
    2e10:	90 91 3a 03 	lds	r25, 0x033A
    2e14:	a0 91 3b 03 	lds	r26, 0x033B
    2e18:	b0 91 3c 03 	lds	r27, 0x033C
    2e1c:	b8 99       	sbic	0x17, 0	; 23
    2e1e:	05 c0       	rjmp	.+10     	; 0x2e2a <_ZN13OrangutanTime5ticksEv+0x30>
    2e20:	26 2f       	mov	r18, r22
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e0       	ldi	r20, 0x00	; 0
    2e26:	50 e0       	ldi	r21, 0x00	; 0
    2e28:	11 c0       	rjmp	.+34     	; 0x2e4c <_ZN13OrangutanTime5ticksEv+0x52>
    2e2a:	80 91 b2 00 	lds	r24, 0x00B2
    2e2e:	20 91 39 03 	lds	r18, 0x0339
    2e32:	30 91 3a 03 	lds	r19, 0x033A
    2e36:	40 91 3b 03 	lds	r20, 0x033B
    2e3a:	50 91 3c 03 	lds	r21, 0x033C
    2e3e:	20 50       	subi	r18, 0x00	; 0
    2e40:	3f 4f       	sbci	r19, 0xFF	; 255
    2e42:	4f 4f       	sbci	r20, 0xFF	; 255
    2e44:	5f 4f       	sbci	r21, 0xFF	; 255
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	a0 e0       	ldi	r26, 0x00	; 0
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	28 2b       	or	r18, r24
    2e4e:	39 2b       	or	r19, r25
    2e50:	4a 2b       	or	r20, r26
    2e52:	5b 2b       	or	r21, r27
    2e54:	80 91 70 00 	lds	r24, 0x0070
    2e58:	81 60       	ori	r24, 0x01	; 1
    2e5a:	80 93 70 00 	sts	0x0070, r24
    2e5e:	b9 01       	movw	r22, r18
    2e60:	ca 01       	movw	r24, r20
    2e62:	08 95       	ret

00002e64 <get_ticks>:
    2e64:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_ZN13OrangutanTime5ticksEv>
    2e68:	08 95       	ret

00002e6a <_ZN13OrangutanTime5resetEv>:
    2e6a:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN13OrangutanTime4initEv>
    2e6e:	e0 e7       	ldi	r30, 0x70	; 112
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	80 81       	ld	r24, Z
    2e74:	8e 7f       	andi	r24, 0xFE	; 254
    2e76:	80 83       	st	Z, r24
    2e78:	10 92 3d 03 	sts	0x033D, r1
    2e7c:	10 92 3e 03 	sts	0x033E, r1
    2e80:	10 92 3f 03 	sts	0x033F, r1
    2e84:	10 92 40 03 	sts	0x0340, r1
    2e88:	10 92 42 03 	sts	0x0342, r1
    2e8c:	10 92 41 03 	sts	0x0341, r1
    2e90:	80 81       	ld	r24, Z
    2e92:	81 60       	ori	r24, 0x01	; 1
    2e94:	80 83       	st	Z, r24
    2e96:	08 95       	ret

00002e98 <time_reset>:
    2e98:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN13OrangutanTime5resetEv>
    2e9c:	08 95       	ret

00002e9e <__mulsi3>:
    2e9e:	62 9f       	mul	r22, r18
    2ea0:	d0 01       	movw	r26, r0
    2ea2:	73 9f       	mul	r23, r19
    2ea4:	f0 01       	movw	r30, r0
    2ea6:	82 9f       	mul	r24, r18
    2ea8:	e0 0d       	add	r30, r0
    2eaa:	f1 1d       	adc	r31, r1
    2eac:	64 9f       	mul	r22, r20
    2eae:	e0 0d       	add	r30, r0
    2eb0:	f1 1d       	adc	r31, r1
    2eb2:	92 9f       	mul	r25, r18
    2eb4:	f0 0d       	add	r31, r0
    2eb6:	83 9f       	mul	r24, r19
    2eb8:	f0 0d       	add	r31, r0
    2eba:	74 9f       	mul	r23, r20
    2ebc:	f0 0d       	add	r31, r0
    2ebe:	65 9f       	mul	r22, r21
    2ec0:	f0 0d       	add	r31, r0
    2ec2:	99 27       	eor	r25, r25
    2ec4:	72 9f       	mul	r23, r18
    2ec6:	b0 0d       	add	r27, r0
    2ec8:	e1 1d       	adc	r30, r1
    2eca:	f9 1f       	adc	r31, r25
    2ecc:	63 9f       	mul	r22, r19
    2ece:	b0 0d       	add	r27, r0
    2ed0:	e1 1d       	adc	r30, r1
    2ed2:	f9 1f       	adc	r31, r25
    2ed4:	bd 01       	movw	r22, r26
    2ed6:	cf 01       	movw	r24, r30
    2ed8:	11 24       	eor	r1, r1
    2eda:	08 95       	ret

00002edc <__divmodhi4>:
    2edc:	97 fb       	bst	r25, 7
    2ede:	09 2e       	mov	r0, r25
    2ee0:	07 26       	eor	r0, r23
    2ee2:	0a d0       	rcall	.+20     	; 0x2ef8 <__divmodhi4_neg1>
    2ee4:	77 fd       	sbrc	r23, 7
    2ee6:	04 d0       	rcall	.+8      	; 0x2ef0 <__divmodhi4_neg2>
    2ee8:	65 d0       	rcall	.+202    	; 0x2fb4 <__udivmodhi4>
    2eea:	06 d0       	rcall	.+12     	; 0x2ef8 <__divmodhi4_neg1>
    2eec:	00 20       	and	r0, r0
    2eee:	1a f4       	brpl	.+6      	; 0x2ef6 <__divmodhi4_exit>

00002ef0 <__divmodhi4_neg2>:
    2ef0:	70 95       	com	r23
    2ef2:	61 95       	neg	r22
    2ef4:	7f 4f       	sbci	r23, 0xFF	; 255

00002ef6 <__divmodhi4_exit>:
    2ef6:	08 95       	ret

00002ef8 <__divmodhi4_neg1>:
    2ef8:	f6 f7       	brtc	.-4      	; 0x2ef6 <__divmodhi4_exit>
    2efa:	90 95       	com	r25
    2efc:	81 95       	neg	r24
    2efe:	9f 4f       	sbci	r25, 0xFF	; 255
    2f00:	08 95       	ret

00002f02 <__udivmodsi4>:
    2f02:	a1 e2       	ldi	r26, 0x21	; 33
    2f04:	1a 2e       	mov	r1, r26
    2f06:	aa 1b       	sub	r26, r26
    2f08:	bb 1b       	sub	r27, r27
    2f0a:	fd 01       	movw	r30, r26
    2f0c:	0d c0       	rjmp	.+26     	; 0x2f28 <__udivmodsi4_ep>

00002f0e <__udivmodsi4_loop>:
    2f0e:	aa 1f       	adc	r26, r26
    2f10:	bb 1f       	adc	r27, r27
    2f12:	ee 1f       	adc	r30, r30
    2f14:	ff 1f       	adc	r31, r31
    2f16:	a2 17       	cp	r26, r18
    2f18:	b3 07       	cpc	r27, r19
    2f1a:	e4 07       	cpc	r30, r20
    2f1c:	f5 07       	cpc	r31, r21
    2f1e:	20 f0       	brcs	.+8      	; 0x2f28 <__udivmodsi4_ep>
    2f20:	a2 1b       	sub	r26, r18
    2f22:	b3 0b       	sbc	r27, r19
    2f24:	e4 0b       	sbc	r30, r20
    2f26:	f5 0b       	sbc	r31, r21

00002f28 <__udivmodsi4_ep>:
    2f28:	66 1f       	adc	r22, r22
    2f2a:	77 1f       	adc	r23, r23
    2f2c:	88 1f       	adc	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	1a 94       	dec	r1
    2f32:	69 f7       	brne	.-38     	; 0x2f0e <__udivmodsi4_loop>
    2f34:	60 95       	com	r22
    2f36:	70 95       	com	r23
    2f38:	80 95       	com	r24
    2f3a:	90 95       	com	r25
    2f3c:	9b 01       	movw	r18, r22
    2f3e:	ac 01       	movw	r20, r24
    2f40:	bd 01       	movw	r22, r26
    2f42:	cf 01       	movw	r24, r30
    2f44:	08 95       	ret

00002f46 <__prologue_saves__>:
    2f46:	2f 92       	push	r2
    2f48:	3f 92       	push	r3
    2f4a:	4f 92       	push	r4
    2f4c:	5f 92       	push	r5
    2f4e:	6f 92       	push	r6
    2f50:	7f 92       	push	r7
    2f52:	8f 92       	push	r8
    2f54:	9f 92       	push	r9
    2f56:	af 92       	push	r10
    2f58:	bf 92       	push	r11
    2f5a:	cf 92       	push	r12
    2f5c:	df 92       	push	r13
    2f5e:	ef 92       	push	r14
    2f60:	ff 92       	push	r15
    2f62:	0f 93       	push	r16
    2f64:	1f 93       	push	r17
    2f66:	cf 93       	push	r28
    2f68:	df 93       	push	r29
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	ca 1b       	sub	r28, r26
    2f70:	db 0b       	sbc	r29, r27
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	f8 94       	cli
    2f76:	de bf       	out	0x3e, r29	; 62
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	cd bf       	out	0x3d, r28	; 61
    2f7c:	09 94       	ijmp

00002f7e <__epilogue_restores__>:
    2f7e:	2a 88       	ldd	r2, Y+18	; 0x12
    2f80:	39 88       	ldd	r3, Y+17	; 0x11
    2f82:	48 88       	ldd	r4, Y+16	; 0x10
    2f84:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f86:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f88:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f90:	b9 84       	ldd	r11, Y+9	; 0x09
    2f92:	c8 84       	ldd	r12, Y+8	; 0x08
    2f94:	df 80       	ldd	r13, Y+7	; 0x07
    2f96:	ee 80       	ldd	r14, Y+6	; 0x06
    2f98:	fd 80       	ldd	r15, Y+5	; 0x05
    2f9a:	0c 81       	ldd	r16, Y+4	; 0x04
    2f9c:	1b 81       	ldd	r17, Y+3	; 0x03
    2f9e:	aa 81       	ldd	r26, Y+2	; 0x02
    2fa0:	b9 81       	ldd	r27, Y+1	; 0x01
    2fa2:	ce 0f       	add	r28, r30
    2fa4:	d1 1d       	adc	r29, r1
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	f8 94       	cli
    2faa:	de bf       	out	0x3e, r29	; 62
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	cd bf       	out	0x3d, r28	; 61
    2fb0:	ed 01       	movw	r28, r26
    2fb2:	08 95       	ret

00002fb4 <__udivmodhi4>:
    2fb4:	aa 1b       	sub	r26, r26
    2fb6:	bb 1b       	sub	r27, r27
    2fb8:	51 e1       	ldi	r21, 0x11	; 17
    2fba:	07 c0       	rjmp	.+14     	; 0x2fca <__udivmodhi4_ep>

00002fbc <__udivmodhi4_loop>:
    2fbc:	aa 1f       	adc	r26, r26
    2fbe:	bb 1f       	adc	r27, r27
    2fc0:	a6 17       	cp	r26, r22
    2fc2:	b7 07       	cpc	r27, r23
    2fc4:	10 f0       	brcs	.+4      	; 0x2fca <__udivmodhi4_ep>
    2fc6:	a6 1b       	sub	r26, r22
    2fc8:	b7 0b       	sbc	r27, r23

00002fca <__udivmodhi4_ep>:
    2fca:	88 1f       	adc	r24, r24
    2fcc:	99 1f       	adc	r25, r25
    2fce:	5a 95       	dec	r21
    2fd0:	a9 f7       	brne	.-22     	; 0x2fbc <__udivmodhi4_loop>
    2fd2:	80 95       	com	r24
    2fd4:	90 95       	com	r25
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	08 95       	ret

00002fdc <malloc>:
    2fdc:	cf 93       	push	r28
    2fde:	df 93       	push	r29
    2fe0:	bc 01       	movw	r22, r24
    2fe2:	82 30       	cpi	r24, 0x02	; 2
    2fe4:	91 05       	cpc	r25, r1
    2fe6:	10 f4       	brcc	.+4      	; 0x2fec <malloc+0x10>
    2fe8:	62 e0       	ldi	r22, 0x02	; 2
    2fea:	70 e0       	ldi	r23, 0x00	; 0
    2fec:	a0 91 46 03 	lds	r26, 0x0346
    2ff0:	b0 91 47 03 	lds	r27, 0x0347
    2ff4:	ed 01       	movw	r28, r26
    2ff6:	e0 e0       	ldi	r30, 0x00	; 0
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	50 e0       	ldi	r21, 0x00	; 0
    2ffe:	21 c0       	rjmp	.+66     	; 0x3042 <malloc+0x66>
    3000:	88 81       	ld	r24, Y
    3002:	99 81       	ldd	r25, Y+1	; 0x01
    3004:	86 17       	cp	r24, r22
    3006:	97 07       	cpc	r25, r23
    3008:	69 f4       	brne	.+26     	; 0x3024 <malloc+0x48>
    300a:	8a 81       	ldd	r24, Y+2	; 0x02
    300c:	9b 81       	ldd	r25, Y+3	; 0x03
    300e:	30 97       	sbiw	r30, 0x00	; 0
    3010:	19 f0       	breq	.+6      	; 0x3018 <malloc+0x3c>
    3012:	93 83       	std	Z+3, r25	; 0x03
    3014:	82 83       	std	Z+2, r24	; 0x02
    3016:	04 c0       	rjmp	.+8      	; 0x3020 <malloc+0x44>
    3018:	90 93 47 03 	sts	0x0347, r25
    301c:	80 93 46 03 	sts	0x0346, r24
    3020:	fe 01       	movw	r30, r28
    3022:	34 c0       	rjmp	.+104    	; 0x308c <malloc+0xb0>
    3024:	68 17       	cp	r22, r24
    3026:	79 07       	cpc	r23, r25
    3028:	38 f4       	brcc	.+14     	; 0x3038 <malloc+0x5c>
    302a:	41 15       	cp	r20, r1
    302c:	51 05       	cpc	r21, r1
    302e:	19 f0       	breq	.+6      	; 0x3036 <malloc+0x5a>
    3030:	84 17       	cp	r24, r20
    3032:	95 07       	cpc	r25, r21
    3034:	08 f4       	brcc	.+2      	; 0x3038 <malloc+0x5c>
    3036:	ac 01       	movw	r20, r24
    3038:	fe 01       	movw	r30, r28
    303a:	8a 81       	ldd	r24, Y+2	; 0x02
    303c:	9b 81       	ldd	r25, Y+3	; 0x03
    303e:	9c 01       	movw	r18, r24
    3040:	e9 01       	movw	r28, r18
    3042:	20 97       	sbiw	r28, 0x00	; 0
    3044:	e9 f6       	brne	.-70     	; 0x3000 <malloc+0x24>
    3046:	41 15       	cp	r20, r1
    3048:	51 05       	cpc	r21, r1
    304a:	a9 f1       	breq	.+106    	; 0x30b6 <malloc+0xda>
    304c:	ca 01       	movw	r24, r20
    304e:	86 1b       	sub	r24, r22
    3050:	97 0b       	sbc	r25, r23
    3052:	04 97       	sbiw	r24, 0x04	; 4
    3054:	08 f4       	brcc	.+2      	; 0x3058 <malloc+0x7c>
    3056:	ba 01       	movw	r22, r20
    3058:	e0 e0       	ldi	r30, 0x00	; 0
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	2a c0       	rjmp	.+84     	; 0x30b2 <malloc+0xd6>
    305e:	8d 91       	ld	r24, X+
    3060:	9c 91       	ld	r25, X
    3062:	11 97       	sbiw	r26, 0x01	; 1
    3064:	84 17       	cp	r24, r20
    3066:	95 07       	cpc	r25, r21
    3068:	f9 f4       	brne	.+62     	; 0x30a8 <malloc+0xcc>
    306a:	64 17       	cp	r22, r20
    306c:	75 07       	cpc	r23, r21
    306e:	81 f4       	brne	.+32     	; 0x3090 <malloc+0xb4>
    3070:	12 96       	adiw	r26, 0x02	; 2
    3072:	8d 91       	ld	r24, X+
    3074:	9c 91       	ld	r25, X
    3076:	13 97       	sbiw	r26, 0x03	; 3
    3078:	30 97       	sbiw	r30, 0x00	; 0
    307a:	19 f0       	breq	.+6      	; 0x3082 <malloc+0xa6>
    307c:	93 83       	std	Z+3, r25	; 0x03
    307e:	82 83       	std	Z+2, r24	; 0x02
    3080:	04 c0       	rjmp	.+8      	; 0x308a <malloc+0xae>
    3082:	90 93 47 03 	sts	0x0347, r25
    3086:	80 93 46 03 	sts	0x0346, r24
    308a:	fd 01       	movw	r30, r26
    308c:	32 96       	adiw	r30, 0x02	; 2
    308e:	4f c0       	rjmp	.+158    	; 0x312e <malloc+0x152>
    3090:	ca 01       	movw	r24, r20
    3092:	86 1b       	sub	r24, r22
    3094:	97 0b       	sbc	r25, r23
    3096:	fd 01       	movw	r30, r26
    3098:	e8 0f       	add	r30, r24
    309a:	f9 1f       	adc	r31, r25
    309c:	61 93       	st	Z+, r22
    309e:	71 93       	st	Z+, r23
    30a0:	02 97       	sbiw	r24, 0x02	; 2
    30a2:	8d 93       	st	X+, r24
    30a4:	9c 93       	st	X, r25
    30a6:	43 c0       	rjmp	.+134    	; 0x312e <malloc+0x152>
    30a8:	fd 01       	movw	r30, r26
    30aa:	82 81       	ldd	r24, Z+2	; 0x02
    30ac:	93 81       	ldd	r25, Z+3	; 0x03
    30ae:	9c 01       	movw	r18, r24
    30b0:	d9 01       	movw	r26, r18
    30b2:	10 97       	sbiw	r26, 0x00	; 0
    30b4:	a1 f6       	brne	.-88     	; 0x305e <malloc+0x82>
    30b6:	80 91 44 03 	lds	r24, 0x0344
    30ba:	90 91 45 03 	lds	r25, 0x0345
    30be:	89 2b       	or	r24, r25
    30c0:	41 f4       	brne	.+16     	; 0x30d2 <malloc+0xf6>
    30c2:	80 91 22 03 	lds	r24, 0x0322
    30c6:	90 91 23 03 	lds	r25, 0x0323
    30ca:	90 93 45 03 	sts	0x0345, r25
    30ce:	80 93 44 03 	sts	0x0344, r24
    30d2:	40 91 24 03 	lds	r20, 0x0324
    30d6:	50 91 25 03 	lds	r21, 0x0325
    30da:	41 15       	cp	r20, r1
    30dc:	51 05       	cpc	r21, r1
    30de:	41 f4       	brne	.+16     	; 0x30f0 <malloc+0x114>
    30e0:	4d b7       	in	r20, 0x3d	; 61
    30e2:	5e b7       	in	r21, 0x3e	; 62
    30e4:	80 91 20 03 	lds	r24, 0x0320
    30e8:	90 91 21 03 	lds	r25, 0x0321
    30ec:	48 1b       	sub	r20, r24
    30ee:	59 0b       	sbc	r21, r25
    30f0:	20 91 44 03 	lds	r18, 0x0344
    30f4:	30 91 45 03 	lds	r19, 0x0345
    30f8:	24 17       	cp	r18, r20
    30fa:	35 07       	cpc	r19, r21
    30fc:	b0 f4       	brcc	.+44     	; 0x312a <malloc+0x14e>
    30fe:	ca 01       	movw	r24, r20
    3100:	82 1b       	sub	r24, r18
    3102:	93 0b       	sbc	r25, r19
    3104:	86 17       	cp	r24, r22
    3106:	97 07       	cpc	r25, r23
    3108:	80 f0       	brcs	.+32     	; 0x312a <malloc+0x14e>
    310a:	ab 01       	movw	r20, r22
    310c:	4e 5f       	subi	r20, 0xFE	; 254
    310e:	5f 4f       	sbci	r21, 0xFF	; 255
    3110:	84 17       	cp	r24, r20
    3112:	95 07       	cpc	r25, r21
    3114:	50 f0       	brcs	.+20     	; 0x312a <malloc+0x14e>
    3116:	42 0f       	add	r20, r18
    3118:	53 1f       	adc	r21, r19
    311a:	50 93 45 03 	sts	0x0345, r21
    311e:	40 93 44 03 	sts	0x0344, r20
    3122:	f9 01       	movw	r30, r18
    3124:	61 93       	st	Z+, r22
    3126:	71 93       	st	Z+, r23
    3128:	02 c0       	rjmp	.+4      	; 0x312e <malloc+0x152>
    312a:	e0 e0       	ldi	r30, 0x00	; 0
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	cf 01       	movw	r24, r30
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	08 95       	ret

00003136 <free>:
    3136:	cf 93       	push	r28
    3138:	df 93       	push	r29
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	09 f4       	brne	.+2      	; 0x3140 <free+0xa>
    313e:	50 c0       	rjmp	.+160    	; 0x31e0 <free+0xaa>
    3140:	ec 01       	movw	r28, r24
    3142:	22 97       	sbiw	r28, 0x02	; 2
    3144:	1b 82       	std	Y+3, r1	; 0x03
    3146:	1a 82       	std	Y+2, r1	; 0x02
    3148:	a0 91 46 03 	lds	r26, 0x0346
    314c:	b0 91 47 03 	lds	r27, 0x0347
    3150:	10 97       	sbiw	r26, 0x00	; 0
    3152:	09 f1       	breq	.+66     	; 0x3196 <free+0x60>
    3154:	40 e0       	ldi	r20, 0x00	; 0
    3156:	50 e0       	ldi	r21, 0x00	; 0
    3158:	ac 17       	cp	r26, r28
    315a:	bd 07       	cpc	r27, r29
    315c:	08 f1       	brcs	.+66     	; 0x31a0 <free+0x6a>
    315e:	bb 83       	std	Y+3, r27	; 0x03
    3160:	aa 83       	std	Y+2, r26	; 0x02
    3162:	fe 01       	movw	r30, r28
    3164:	21 91       	ld	r18, Z+
    3166:	31 91       	ld	r19, Z+
    3168:	e2 0f       	add	r30, r18
    316a:	f3 1f       	adc	r31, r19
    316c:	ae 17       	cp	r26, r30
    316e:	bf 07       	cpc	r27, r31
    3170:	79 f4       	brne	.+30     	; 0x3190 <free+0x5a>
    3172:	8d 91       	ld	r24, X+
    3174:	9c 91       	ld	r25, X
    3176:	11 97       	sbiw	r26, 0x01	; 1
    3178:	28 0f       	add	r18, r24
    317a:	39 1f       	adc	r19, r25
    317c:	2e 5f       	subi	r18, 0xFE	; 254
    317e:	3f 4f       	sbci	r19, 0xFF	; 255
    3180:	39 83       	std	Y+1, r19	; 0x01
    3182:	28 83       	st	Y, r18
    3184:	12 96       	adiw	r26, 0x02	; 2
    3186:	8d 91       	ld	r24, X+
    3188:	9c 91       	ld	r25, X
    318a:	13 97       	sbiw	r26, 0x03	; 3
    318c:	9b 83       	std	Y+3, r25	; 0x03
    318e:	8a 83       	std	Y+2, r24	; 0x02
    3190:	41 15       	cp	r20, r1
    3192:	51 05       	cpc	r21, r1
    3194:	71 f4       	brne	.+28     	; 0x31b2 <free+0x7c>
    3196:	d0 93 47 03 	sts	0x0347, r29
    319a:	c0 93 46 03 	sts	0x0346, r28
    319e:	20 c0       	rjmp	.+64     	; 0x31e0 <free+0xaa>
    31a0:	12 96       	adiw	r26, 0x02	; 2
    31a2:	8d 91       	ld	r24, X+
    31a4:	9c 91       	ld	r25, X
    31a6:	13 97       	sbiw	r26, 0x03	; 3
    31a8:	ad 01       	movw	r20, r26
    31aa:	00 97       	sbiw	r24, 0x00	; 0
    31ac:	11 f0       	breq	.+4      	; 0x31b2 <free+0x7c>
    31ae:	dc 01       	movw	r26, r24
    31b0:	d3 cf       	rjmp	.-90     	; 0x3158 <free+0x22>
    31b2:	fa 01       	movw	r30, r20
    31b4:	d3 83       	std	Z+3, r29	; 0x03
    31b6:	c2 83       	std	Z+2, r28	; 0x02
    31b8:	21 91       	ld	r18, Z+
    31ba:	31 91       	ld	r19, Z+
    31bc:	e2 0f       	add	r30, r18
    31be:	f3 1f       	adc	r31, r19
    31c0:	ce 17       	cp	r28, r30
    31c2:	df 07       	cpc	r29, r31
    31c4:	69 f4       	brne	.+26     	; 0x31e0 <free+0xaa>
    31c6:	88 81       	ld	r24, Y
    31c8:	99 81       	ldd	r25, Y+1	; 0x01
    31ca:	28 0f       	add	r18, r24
    31cc:	39 1f       	adc	r19, r25
    31ce:	2e 5f       	subi	r18, 0xFE	; 254
    31d0:	3f 4f       	sbci	r19, 0xFF	; 255
    31d2:	fa 01       	movw	r30, r20
    31d4:	31 83       	std	Z+1, r19	; 0x01
    31d6:	20 83       	st	Z, r18
    31d8:	8a 81       	ldd	r24, Y+2	; 0x02
    31da:	9b 81       	ldd	r25, Y+3	; 0x03
    31dc:	93 83       	std	Z+3, r25	; 0x03
    31de:	82 83       	std	Z+2, r24	; 0x02
    31e0:	df 91       	pop	r29
    31e2:	cf 91       	pop	r28
    31e4:	08 95       	ret

000031e6 <fdevopen>:
    31e6:	0f 93       	push	r16
    31e8:	1f 93       	push	r17
    31ea:	cf 93       	push	r28
    31ec:	df 93       	push	r29
    31ee:	8c 01       	movw	r16, r24
    31f0:	eb 01       	movw	r28, r22
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	31 f4       	brne	.+12     	; 0x3202 <fdevopen+0x1c>
    31f6:	61 15       	cp	r22, r1
    31f8:	71 05       	cpc	r23, r1
    31fa:	19 f4       	brne	.+6      	; 0x3202 <fdevopen+0x1c>
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	38 c0       	rjmp	.+112    	; 0x3272 <fdevopen+0x8c>
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	6e e0       	ldi	r22, 0x0E	; 14
    3208:	70 e0       	ldi	r23, 0x00	; 0
    320a:	0e 94 3f 19 	call	0x327e	; 0x327e <calloc>
    320e:	fc 01       	movw	r30, r24
    3210:	9c 01       	movw	r18, r24
    3212:	00 97       	sbiw	r24, 0x00	; 0
    3214:	71 f1       	breq	.+92     	; 0x3272 <fdevopen+0x8c>
    3216:	80 e8       	ldi	r24, 0x80	; 128
    3218:	83 83       	std	Z+3, r24	; 0x03
    321a:	20 97       	sbiw	r28, 0x00	; 0
    321c:	71 f0       	breq	.+28     	; 0x323a <fdevopen+0x54>
    321e:	d3 87       	std	Z+11, r29	; 0x0b
    3220:	c2 87       	std	Z+10, r28	; 0x0a
    3222:	81 e8       	ldi	r24, 0x81	; 129
    3224:	83 83       	std	Z+3, r24	; 0x03
    3226:	80 91 48 03 	lds	r24, 0x0348
    322a:	90 91 49 03 	lds	r25, 0x0349
    322e:	89 2b       	or	r24, r25
    3230:	21 f4       	brne	.+8      	; 0x323a <fdevopen+0x54>
    3232:	f0 93 49 03 	sts	0x0349, r31
    3236:	e0 93 48 03 	sts	0x0348, r30
    323a:	01 15       	cp	r16, r1
    323c:	11 05       	cpc	r17, r1
    323e:	c9 f0       	breq	.+50     	; 0x3272 <fdevopen+0x8c>
    3240:	11 87       	std	Z+9, r17	; 0x09
    3242:	00 87       	std	Z+8, r16	; 0x08
    3244:	83 81       	ldd	r24, Z+3	; 0x03
    3246:	82 60       	ori	r24, 0x02	; 2
    3248:	83 83       	std	Z+3, r24	; 0x03
    324a:	80 91 4a 03 	lds	r24, 0x034A
    324e:	90 91 4b 03 	lds	r25, 0x034B
    3252:	89 2b       	or	r24, r25
    3254:	71 f4       	brne	.+28     	; 0x3272 <fdevopen+0x8c>
    3256:	f0 93 4b 03 	sts	0x034B, r31
    325a:	e0 93 4a 03 	sts	0x034A, r30
    325e:	80 91 4c 03 	lds	r24, 0x034C
    3262:	90 91 4d 03 	lds	r25, 0x034D
    3266:	89 2b       	or	r24, r25
    3268:	21 f4       	brne	.+8      	; 0x3272 <fdevopen+0x8c>
    326a:	f0 93 4d 03 	sts	0x034D, r31
    326e:	e0 93 4c 03 	sts	0x034C, r30
    3272:	c9 01       	movw	r24, r18
    3274:	df 91       	pop	r29
    3276:	cf 91       	pop	r28
    3278:	1f 91       	pop	r17
    327a:	0f 91       	pop	r16
    327c:	08 95       	ret

0000327e <calloc>:
    327e:	0f 93       	push	r16
    3280:	1f 93       	push	r17
    3282:	cf 93       	push	r28
    3284:	df 93       	push	r29
    3286:	68 9f       	mul	r22, r24
    3288:	80 01       	movw	r16, r0
    328a:	69 9f       	mul	r22, r25
    328c:	10 0d       	add	r17, r0
    328e:	78 9f       	mul	r23, r24
    3290:	10 0d       	add	r17, r0
    3292:	11 24       	eor	r1, r1
    3294:	c8 01       	movw	r24, r16
    3296:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <malloc>
    329a:	ec 01       	movw	r28, r24
    329c:	00 97       	sbiw	r24, 0x00	; 0
    329e:	29 f0       	breq	.+10     	; 0x32aa <calloc+0x2c>
    32a0:	60 e0       	ldi	r22, 0x00	; 0
    32a2:	70 e0       	ldi	r23, 0x00	; 0
    32a4:	a8 01       	movw	r20, r16
    32a6:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <memset>
    32aa:	ce 01       	movw	r24, r28
    32ac:	df 91       	pop	r29
    32ae:	cf 91       	pop	r28
    32b0:	1f 91       	pop	r17
    32b2:	0f 91       	pop	r16
    32b4:	08 95       	ret

000032b6 <memset>:
    32b6:	dc 01       	movw	r26, r24
    32b8:	01 c0       	rjmp	.+2      	; 0x32bc <memset+0x6>
    32ba:	6d 93       	st	X+, r22
    32bc:	41 50       	subi	r20, 0x01	; 1
    32be:	50 40       	sbci	r21, 0x00	; 0
    32c0:	e0 f7       	brcc	.-8      	; 0x32ba <memset+0x4>
    32c2:	08 95       	ret

000032c4 <_exit>:
    32c4:	f8 94       	cli

000032c6 <__stop_program>:
    32c6:	ff cf       	rjmp	.-2      	; 0x32c6 <__stop_program>
