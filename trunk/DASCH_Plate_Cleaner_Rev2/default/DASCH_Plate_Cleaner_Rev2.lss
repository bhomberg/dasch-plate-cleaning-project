
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000026c  00800100  00004148  000041dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080036c  0080036c  00004448  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  00004448  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002591  00000000  00000000  00006c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00009199  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001dc  00000000  00000000  000091d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000131c  00000000  00000000  000093b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003ec  00000000  00000000  0000a6d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002003  00000000  00000000  0000aabd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  0000cac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d29  00000000  00000000  0000cc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000010c1  00000000  00000000  0000d929  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  0000e9ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
       4:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
       8:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
       c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      10:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      14:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      18:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      1c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      20:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      24:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      28:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      2c:	0c 94 89 1d 	jmp	0x3b12	; 0x3b12 <__vector_11>
      30:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      34:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      38:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      3c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      40:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      44:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      48:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      4c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      50:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      54:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      58:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      5c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      60:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      64:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      68:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      6c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      70:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      74:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      78:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      7c:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      80:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      84:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      88:	0c 94 21 01 	jmp	0x242	; 0x242 <__bad_interrupt>
      8c:	11 05       	cpc	r17, r1
      8e:	22 05       	cpc	r18, r2
      90:	3a 05       	cpc	r19, r10
      92:	4d 05       	cpc	r20, r13
      94:	61 05       	cpc	r22, r1
      96:	74 05       	cpc	r23, r4
      98:	88 05       	cpc	r24, r8
      9a:	9d 05       	cpc	r25, r13
      9c:	b1 05       	cpc	r27, r1
      9e:	c4 05       	cpc	r28, r4
      a0:	c8 05       	cpc	r28, r8
      a2:	d8 05       	cpc	r29, r8
      a4:	dc 05       	cpc	r29, r12
      a6:	ea 05       	cpc	r30, r10
      a8:	ee 05       	cpc	r30, r14
      aa:	fc 05       	cpc	r31, r12
      ac:	00 06       	cpc	r0, r16
      ae:	0f 06       	cpc	r0, r31
      b0:	13 06       	cpc	r1, r19
      b2:	21 06       	cpc	r2, r17
      b4:	24 06       	cpc	r2, r20
      b6:	33 06       	cpc	r3, r19
      b8:	37 06       	cpc	r3, r23
      ba:	56 06       	cpc	r5, r22
      bc:	47 06       	cpc	r4, r23
      be:	5a 06       	cpc	r5, r26
      c0:	5e 06       	cpc	r5, r30
      c2:	6c 06       	cpc	r6, r28
      c4:	6f 06       	cpc	r6, r31
      c6:	7e 06       	cpc	r7, r30
      c8:	82 06       	cpc	r8, r18
      ca:	90 06       	cpc	r9, r16
      cc:	96 06       	cpc	r9, r22
      ce:	af 06       	cpc	r10, r31
      d0:	bb 06       	cpc	r11, r27
      d2:	d8 06       	cpc	r13, r24
      d4:	e4 06       	cpc	r14, r20
      d6:	01 07       	cpc	r16, r17
      d8:	0d 07       	cpc	r16, r29
      da:	2a 07       	cpc	r18, r26
      dc:	36 07       	cpc	r19, r22
      de:	53 07       	cpc	r21, r19
      e0:	f7 09       	sbc	r31, r7
      e2:	22 0a       	sbc	r2, r18
      e4:	45 0a       	sbc	r4, r21
      e6:	91 0a       	sbc	r9, r17
      e8:	52 0a       	sbc	r5, r18
      ea:	5f 0a       	sbc	r5, r31
      ec:	6a 0a       	sbc	r6, r26
      ee:	74 0a       	sbc	r7, r20
      f0:	7f 0a       	sbc	r7, r31
      f2:	8a 0a       	sbc	r8, r26
      f4:	a7 0a       	sbc	r10, r23
      f6:	91 0a       	sbc	r9, r17
      f8:	95 0a       	sbc	r9, r21
      fa:	e9 0a       	sbc	r14, r25
      fc:	a7 0a       	sbc	r10, r23
      fe:	50 0b       	sbc	r21, r16
     100:	50 0b       	sbc	r21, r16
     102:	50 0b       	sbc	r21, r16
     104:	50 0b       	sbc	r21, r16
     106:	50 0b       	sbc	r21, r16
     108:	50 0b       	sbc	r21, r16
     10a:	50 0b       	sbc	r21, r16
     10c:	50 0b       	sbc	r21, r16
     10e:	b2 0a       	sbc	r11, r18
     110:	c1 0a       	sbc	r12, r17
     112:	c7 0a       	sbc	r12, r23
     114:	d2 0a       	sbc	r13, r18
     116:	d6 0a       	sbc	r13, r22
     118:	e3 0a       	sbc	r14, r19
     11a:	e9 0a       	sbc	r14, r25
     11c:	f3 0a       	sbc	r15, r19
     11e:	01 0b       	sbc	r16, r17
     120:	0d 0b       	sbc	r16, r29
     122:	1b 0b       	sbc	r17, r27
     124:	30 0b       	sbc	r19, r16
     126:	3d 0b       	sbc	r19, r29
     128:	9b 0d       	add	r25, r11
     12a:	c3 0d       	add	r28, r3
     12c:	e6 0d       	add	r30, r6
     12e:	f3 0d       	add	r31, r3
     130:	f7 0d       	add	r31, r7
     132:	04 0e       	add	r0, r20
     134:	0f 0e       	add	r0, r31
     136:	fa 0e       	add	r15, r26
     138:	fa 0e       	add	r15, r26
     13a:	fa 0e       	add	r15, r26
     13c:	fa 0e       	add	r15, r26
     13e:	fa 0e       	add	r15, r26
     140:	fa 0e       	add	r15, r26
     142:	fa 0e       	add	r15, r26
     144:	fa 0e       	add	r15, r26
     146:	19 0e       	add	r1, r25
     148:	20 0e       	add	r2, r16
     14a:	6b 0e       	add	r6, r27
     14c:	2f 0e       	add	r2, r31
     14e:	3a 0e       	add	r3, r26
     150:	45 0e       	add	r4, r21
     152:	92 0e       	add	r9, r18
     154:	59 0e       	add	r5, r25
     156:	6b 0e       	add	r6, r27
     158:	75 0e       	add	r7, r21
     15a:	3a 0e       	add	r3, r26
     15c:	7b 0e       	add	r7, r27
     15e:	7f 0e       	add	r7, r31
     160:	8c 0e       	add	r8, r28
     162:	92 0e       	add	r9, r18
     164:	9c 0e       	add	r9, r28
     166:	aa 0e       	add	r10, r26
     168:	b6 0e       	add	r11, r22
     16a:	c4 0e       	add	r12, r20
     16c:	d9 0e       	add	r13, r25
     16e:	e6 0e       	add	r14, r22
     170:	d7 11       	cpse	r29, r7
     172:	ff 11       	cpse	r31, r15
     174:	22 12       	cpse	r2, r18
     176:	72 12       	cpse	r7, r18
     178:	2f 12       	cpse	r2, r31
     17a:	3c 12       	cpse	r3, r28
     17c:	47 12       	cpse	r4, r23
     17e:	4b 12       	cpse	r4, r27
     180:	56 12       	cpse	r5, r22
     182:	61 12       	cpse	r6, r17
     184:	92 12       	cpse	r9, r18
     186:	72 12       	cpse	r7, r18
     188:	76 12       	cpse	r7, r22
     18a:	88 12       	cpse	r8, r24
     18c:	92 12       	cpse	r9, r18
     18e:	9d 12       	cpse	r9, r29
     190:	a4 12       	cpse	r10, r20
     192:	b3 12       	cpse	r11, r19
     194:	bd 12       	cpse	r11, r29
     196:	c8 12       	cpse	r12, r24
     198:	d3 12       	cpse	r13, r19
     19a:	e7 12       	cpse	r14, r23
     19c:	f1 12       	cpse	r15, r17
     19e:	b3 12       	cpse	r11, r19
     1a0:	03 13       	cpse	r16, r19
     1a2:	c8 12       	cpse	r12, r24
     1a4:	09 13       	cpse	r16, r25
     1a6:	0d 13       	cpse	r16, r29
     1a8:	1a 13       	cpse	r17, r26
     1aa:	e7 12       	cpse	r14, r23
     1ac:	20 13       	cpse	r18, r16
     1ae:	2e 13       	cpse	r18, r30
     1b0:	3a 13       	cpse	r19, r26
     1b2:	48 13       	cpse	r20, r24
     1b4:	5d 13       	cpse	r21, r29
     1b6:	6a 13       	cpse	r22, r26
     1b8:	58 16       	cp	r5, r24
     1ba:	7e 16       	cp	r7, r30
     1bc:	a1 16       	cp	r10, r17
     1be:	f6 16       	cp	r15, r22
     1c0:	ae 16       	cp	r10, r30
     1c2:	bb 16       	cp	r11, r27
     1c4:	c6 16       	cp	r12, r22
     1c6:	ca 16       	cp	r12, r26
     1c8:	d5 16       	cp	r13, r21
     1ca:	de 16       	cp	r13, r30
     1cc:	eb 16       	cp	r14, r27
     1ce:	f6 16       	cp	r15, r22
     1d0:	fa 16       	cp	r15, r26
     1d2:	0c 17       	cp	r16, r28
     1d4:	eb 16       	cp	r14, r27
     1d6:	18 17       	cp	r17, r24
     1d8:	1f 17       	cp	r17, r31
     1da:	2e 17       	cp	r18, r30
     1dc:	3a 17       	cp	r19, r26
     1de:	45 17       	cp	r20, r21
     1e0:	50 17       	cp	r21, r16
     1e2:	64 17       	cp	r22, r20
     1e4:	6e 17       	cp	r22, r30
     1e6:	80 17       	cp	r24, r16
     1e8:	88 17       	cp	r24, r24
     1ea:	45 17       	cp	r20, r21
     1ec:	8e 17       	cp	r24, r30
     1ee:	9d 17       	cp	r25, r29
     1f0:	aa 17       	cp	r26, r26
     1f2:	b4 17       	cp	r27, r20
     1f4:	c0 17       	cp	r28, r16
     1f6:	d7 17       	cp	r29, r23
     1f8:	dc 17       	cp	r29, r28
     1fa:	e7 17       	cp	r30, r23
     1fc:	f2 17       	cp	r31, r18
     1fe:	fc 17       	cp	r31, r28
     200:	10 18       	sub	r1, r0
     202:	4f 16       	cp	r4, r31

00000204 <__ctors_end>:
     204:	11 24       	eor	r1, r1
     206:	1f be       	out	0x3f, r1	; 63
     208:	cf ef       	ldi	r28, 0xFF	; 255
     20a:	d0 e4       	ldi	r29, 0x40	; 64
     20c:	de bf       	out	0x3e, r29	; 62
     20e:	cd bf       	out	0x3d, r28	; 61

00000210 <__do_copy_data>:
     210:	13 e0       	ldi	r17, 0x03	; 3
     212:	a0 e0       	ldi	r26, 0x00	; 0
     214:	b1 e0       	ldi	r27, 0x01	; 1
     216:	e8 e4       	ldi	r30, 0x48	; 72
     218:	f1 e4       	ldi	r31, 0x41	; 65
     21a:	00 e0       	ldi	r16, 0x00	; 0
     21c:	0b bf       	out	0x3b, r16	; 59
     21e:	02 c0       	rjmp	.+4      	; 0x224 <__do_copy_data+0x14>
     220:	07 90       	elpm	r0, Z+
     222:	0d 92       	st	X+, r0
     224:	ac 36       	cpi	r26, 0x6C	; 108
     226:	b1 07       	cpc	r27, r17
     228:	d9 f7       	brne	.-10     	; 0x220 <__do_copy_data+0x10>

0000022a <__do_clear_bss>:
     22a:	13 e0       	ldi	r17, 0x03	; 3
     22c:	ac e6       	ldi	r26, 0x6C	; 108
     22e:	b3 e0       	ldi	r27, 0x03	; 3
     230:	01 c0       	rjmp	.+2      	; 0x234 <.do_clear_bss_start>

00000232 <.do_clear_bss_loop>:
     232:	1d 92       	st	X+, r1

00000234 <.do_clear_bss_start>:
     234:	a4 39       	cpi	r26, 0x94	; 148
     236:	b1 07       	cpc	r27, r17
     238:	e1 f7       	brne	.-8      	; 0x232 <.do_clear_bss_loop>
     23a:	0e 94 8e 02 	call	0x51c	; 0x51c <main>
     23e:	0c 94 a2 20 	jmp	0x4144	; 0x4144 <_exit>

00000242 <__bad_interrupt>:
     242:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000246 <_ZN16OrangutanDigital11isInputHighEh>:


	// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
	// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
	// the pin.
	inline static unsigned char isInputHigh(unsigned char pin)
     246:	48 2f       	mov	r20, r24
		io->pinRegister = 0;
		io->portRegister = 0;
		io->ddrRegister = 0;
		io->bitmask = 0;

		if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     248:	88 30       	cpi	r24, 0x08	; 8
     24a:	58 f4       	brcc	.+22     	; 0x262 <_ZN16OrangutanDigital11isInputHighEh+0x1c>
		{
			io->pinRegister = (unsigned char*)&PIND;
			io->portRegister = (unsigned char*)&PORTD;
			io->ddrRegister = (unsigned char*)&DDRD;
			io->bitmask = 1 << pin;
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	02 c0       	rjmp	.+4      	; 0x256 <_ZN16OrangutanDigital11isInputHighEh+0x10>
     252:	88 0f       	add	r24, r24
     254:	99 1f       	adc	r25, r25
     256:	4a 95       	dec	r20
     258:	e2 f7       	brpl	.-8      	; 0x252 <_ZN16OrangutanDigital11isInputHighEh+0xc>
     25a:	98 2f       	mov	r25, r24
     25c:	e9 e2       	ldi	r30, 0x29	; 41
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	36 c0       	rjmp	.+108    	; 0x2ce <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)

		else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     262:	80 31       	cpi	r24, 0x10	; 16
     264:	78 f4       	brcc	.+30     	; 0x284 <_ZN16OrangutanDigital11isInputHighEh+0x3e>
		{
			io->pinRegister = (unsigned char*)&PINB;
			io->portRegister = (unsigned char*)&PORTB;
			io->ddrRegister = (unsigned char*)&DDRB;
			io->bitmask = 1 << (pin - 8);
     266:	28 2f       	mov	r18, r24
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	28 50       	subi	r18, 0x08	; 8
     26c:	30 40       	sbci	r19, 0x00	; 0
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	02 c0       	rjmp	.+4      	; 0x278 <_ZN16OrangutanDigital11isInputHighEh+0x32>
     274:	88 0f       	add	r24, r24
     276:	99 1f       	adc	r25, r25
     278:	2a 95       	dec	r18
     27a:	e2 f7       	brpl	.-8      	; 0x274 <_ZN16OrangutanDigital11isInputHighEh+0x2e>
     27c:	98 2f       	mov	r25, r24
     27e:	e3 e2       	ldi	r30, 0x23	; 35
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	25 c0       	rjmp	.+74     	; 0x2ce <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     284:	88 31       	cpi	r24, 0x18	; 24
     286:	78 f4       	brcc	.+30     	; 0x2a6 <_ZN16OrangutanDigital11isInputHighEh+0x60>
		{
			io->pinRegister = (unsigned char*)&PINC;
			io->portRegister = (unsigned char*)&PORTC;
			io->ddrRegister = (unsigned char*)&DDRC;
			io->bitmask = 1 << (pin - 16);
     288:	28 2f       	mov	r18, r24
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	20 51       	subi	r18, 0x10	; 16
     28e:	30 40       	sbci	r19, 0x00	; 0
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	02 c0       	rjmp	.+4      	; 0x29a <_ZN16OrangutanDigital11isInputHighEh+0x54>
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	2a 95       	dec	r18
     29c:	e2 f7       	brpl	.-8      	; 0x296 <_ZN16OrangutanDigital11isInputHighEh+0x50>
     29e:	98 2f       	mov	r25, r24
     2a0:	e6 e2       	ldi	r30, 0x26	; 38
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	14 c0       	rjmp	.+40     	; 0x2ce <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     2a6:	80 32       	cpi	r24, 0x20	; 32
     2a8:	20 f0       	brcs	.+8      	; 0x2b2 <_ZN16OrangutanDigital11isInputHighEh+0x6c>
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	e0 e0       	ldi	r30, 0x00	; 0
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	0e c0       	rjmp	.+28     	; 0x2ce <_ZN16OrangutanDigital11isInputHighEh+0x88>
		{
			io->pinRegister = (unsigned char*)&PINA;
			io->portRegister = (unsigned char*)&PORTA;
			io->ddrRegister = (unsigned char*)&DDRA;
			io->bitmask = 1 << (31 - pin);
     2b2:	2f e1       	ldi	r18, 0x1F	; 31
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	28 1b       	sub	r18, r24
     2b8:	31 09       	sbc	r19, r1
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <_ZN16OrangutanDigital11isInputHighEh+0x7e>
     2c0:	88 0f       	add	r24, r24
     2c2:	99 1f       	adc	r25, r25
     2c4:	2a 95       	dec	r18
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <_ZN16OrangutanDigital11isInputHighEh+0x7a>
     2c8:	98 2f       	mov	r25, r24
     2ca:	e0 e2       	ldi	r30, 0x20	; 32
     2cc:	f0 e0       	ldi	r31, 0x00	; 0

	// low-level method for reading the value of the PIN register for an pin or set of pins
	// described by an IOStruct pointer.
	inline static unsigned char getInputValue(struct IOStruct* ioPin)
	{
		return *(ioPin->pinRegister) & ioPin->bitmask;
     2ce:	80 81       	ld	r24, Z
	inline static unsigned char isInputHigh(unsigned char pin)
	{
		struct IOStruct registers;
		getIORegisters(&registers, pin);
		return getInputValue(&registers);
	}
     2d0:	89 23       	and	r24, r25
     2d2:	08 95       	ret

000002d4 <__cxa_guard_acquire>:

extern "C" int __cxa_guard_acquire(__guard *); 
extern "C" void __cxa_guard_release (__guard *); 
extern "C" void __cxa_guard_abort (__guard *); 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);}; 
     2d4:	fc 01       	movw	r30, r24
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	88 23       	and	r24, r24
     2de:	11 f4       	brne	.+4      	; 0x2e4 <__cxa_guard_acquire+0x10>
     2e0:	21 e0       	ldi	r18, 0x01	; 1
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	c9 01       	movw	r24, r18
     2e6:	08 95       	ret

000002e8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;}; 
     2e8:	fc 01       	movw	r30, r24
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	80 83       	st	Z, r24
     2ee:	08 95       	ret

000002f0 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
     2f0:	08 95       	ret

000002f2 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void); 
void __cxa_pure_virtual(void) {}; 
     2f2:	08 95       	ret

000002f4 <_Z15button_debounceiPi>:
	}
	return 1;
}*/


bool button_debounce(int counter, int *pstateButton)
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	8c 01       	movw	r16, r24
     2fe:	eb 01       	movw	r28, r22
{
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && OrangutanDigital::isInputHigh(IO_D0)){
     300:	88 81       	ld	r24, Y
     302:	99 81       	ldd	r25, Y+1	; 0x01
     304:	89 2b       	or	r24, r25
     306:	69 f4       	brne	.+26     	; 0x322 <_Z15button_debounceiPi+0x2e>
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
     30e:	88 23       	and	r24, r24
     310:	41 f0       	breq	.+16     	; 0x322 <_Z15button_debounceiPi+0x2e>
		counterRefPush = counter;
     312:	10 93 75 03 	sts	0x0375, r17
     316:	00 93 74 03 	sts	0x0374, r16
		*pstateButton = PRESSED;
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	99 83       	std	Y+1, r25	; 0x01
     320:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     322:	88 81       	ld	r24, Y
     324:	99 81       	ldd	r25, Y+1	; 0x01
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	f9 f4       	brne	.+62     	; 0x368 <_Z15button_debounceiPi+0x74>
		if(counter - counterRefPush > 15){
     32a:	80 91 74 03 	lds	r24, 0x0374
     32e:	90 91 75 03 	lds	r25, 0x0375
     332:	98 01       	movw	r18, r16
     334:	28 1b       	sub	r18, r24
     336:	39 0b       	sbc	r19, r25
     338:	20 31       	cpi	r18, 0x10	; 16
     33a:	31 05       	cpc	r19, r1
     33c:	74 f0       	brlt	.+28     	; 0x35a <_Z15button_debounceiPi+0x66>
			if(!OrangutanDigital::isInputHigh(IO_D0)){
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
     344:	88 23       	and	r24, r24
     346:	81 f4       	brne	.+32     	; 0x368 <_Z15button_debounceiPi+0x74>
				counterRefRel = counter;
     348:	10 93 73 03 	sts	0x0373, r17
     34c:	00 93 72 03 	sts	0x0372, r16
				*pstateButton = RELEASED;
     350:	82 e0       	ldi	r24, 0x02	; 2
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	99 83       	std	Y+1, r25	; 0x01
     356:	88 83       	st	Y, r24
     358:	07 c0       	rjmp	.+14     	; 0x368 <_Z15button_debounceiPi+0x74>
			}
		}
		else if(!OrangutanDigital::isInputHigh(IO_D0)){
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
     360:	88 23       	and	r24, r24
     362:	11 f4       	brne	.+4      	; 0x368 <_Z15button_debounceiPi+0x74>
			*pstateButton = NONE;
     364:	19 82       	std	Y+1, r1	; 0x01
     366:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     368:	88 81       	ld	r24, Y
     36a:	99 81       	ldd	r25, Y+1	; 0x01
     36c:	02 97       	sbiw	r24, 0x02	; 2
     36e:	d9 f4       	brne	.+54     	; 0x3a6 <_Z15button_debounceiPi+0xb2>
		if(OrangutanDigital::isInputHigh(IO_D0)){
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
     376:	88 23       	and	r24, r24
     378:	49 f0       	breq	.+18     	; 0x38c <_Z15button_debounceiPi+0x98>
			*pstateButton = PRESSED;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	99 83       	std	Y+1, r25	; 0x01
     380:	88 83       	st	Y, r24
			counterRefPush = counter;
     382:	10 93 75 03 	sts	0x0375, r17
     386:	00 93 74 03 	sts	0x0374, r16
     38a:	0d c0       	rjmp	.+26     	; 0x3a6 <_Z15button_debounceiPi+0xb2>
		}
		else if(counter - counterRefRel > 15){
     38c:	80 91 72 03 	lds	r24, 0x0372
     390:	90 91 73 03 	lds	r25, 0x0373
     394:	08 1b       	sub	r16, r24
     396:	19 0b       	sbc	r17, r25
     398:	00 31       	cpi	r16, 0x10	; 16
     39a:	11 05       	cpc	r17, r1
     39c:	24 f0       	brlt	.+8      	; 0x3a6 <_Z15button_debounceiPi+0xb2>
			*pstateButton = NONE;
     39e:	19 82       	std	Y+1, r1	; 0x01
     3a0:	18 82       	st	Y, r1
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <_Z15button_debounceiPi+0xb4>
			return true;
     3a6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	08 95       	ret

000003b2 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>:
	OrangutanLCD::print("END");
	}
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor, int totalStepLength1, int totalStepLength2, int totalStepLength3, int totalStepLength4, int totalStepLength5, int highLength1, int highLength2, int highLength3, int highLength4, int highLength5)
     3b2:	2f 92       	push	r2
     3b4:	3f 92       	push	r3
     3b6:	4f 92       	push	r4
     3b8:	5f 92       	push	r5
     3ba:	6f 92       	push	r6
     3bc:	7f 92       	push	r7
     3be:	8f 92       	push	r8
     3c0:	9f 92       	push	r9
     3c2:	af 92       	push	r10
     3c4:	bf 92       	push	r11
     3c6:	cf 92       	push	r12
     3c8:	df 92       	push	r13
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	df 93       	push	r29
     3d4:	cf 93       	push	r28
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	2c 01       	movw	r4, r24
     3dc:	1a 01       	movw	r2, r20
     3de:	39 01       	movw	r6, r18
{
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     3e0:	fc 01       	movw	r30, r24
     3e2:	e6 1b       	sub	r30, r22
     3e4:	f7 0b       	sbc	r31, r23
     3e6:	cf 01       	movw	r24, r30
     3e8:	b4 01       	movw	r22, r8
     3ea:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__divmodhi4>
     3ee:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3f0:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3f2:	82 17       	cp	r24, r18
     3f4:	93 07       	cpc	r25, r19
     3f6:	34 f4       	brge	.+12     	; 0x404 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
     3f8:	67 28       	or	r6, r7
     3fa:	21 f0       	breq	.+8      	; 0x404 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     3fc:	80 91 6c 03 	lds	r24, 0x036C
     400:	81 60       	ori	r24, 0x01	; 1
     402:	03 c0       	rjmp	.+6      	; 0x40a <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x58>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     404:	80 91 6c 03 	lds	r24, 0x036C
     408:	8e 7f       	andi	r24, 0xFE	; 254
     40a:	80 93 6c 03 	sts	0x036C, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     40e:	cf 01       	movw	r24, r30
     410:	6d 89       	ldd	r22, Y+21	; 0x15
     412:	7e 89       	ldd	r23, Y+22	; 0x16
     414:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__divmodhi4>
     418:	2f 8d       	ldd	r18, Y+31	; 0x1f
     41a:	38 a1       	ldd	r19, Y+32	; 0x20
     41c:	82 17       	cp	r24, r18
     41e:	93 07       	cpc	r25, r19
     420:	34 f4       	brge	.+12     	; 0x42e <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
     422:	01 2b       	or	r16, r17
     424:	21 f0       	breq	.+8      	; 0x42e <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     426:	80 91 6c 03 	lds	r24, 0x036C
     42a:	88 60       	ori	r24, 0x08	; 8
     42c:	03 c0       	rjmp	.+6      	; 0x434 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x82>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     42e:	80 91 6c 03 	lds	r24, 0x036C
     432:	87 7f       	andi	r24, 0xF7	; 247
     434:	80 93 6c 03 	sts	0x036C, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     438:	cf 01       	movw	r24, r30
     43a:	6f 89       	ldd	r22, Y+23	; 0x17
     43c:	78 8d       	ldd	r23, Y+24	; 0x18
     43e:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__divmodhi4>
     442:	29 a1       	ldd	r18, Y+33	; 0x21
     444:	3a a1       	ldd	r19, Y+34	; 0x22
     446:	82 17       	cp	r24, r18
     448:	93 07       	cpc	r25, r19
     44a:	34 f4       	brge	.+12     	; 0x458 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
     44c:	ef 28       	or	r14, r15
     44e:	21 f0       	breq	.+8      	; 0x458 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     450:	80 91 6c 03 	lds	r24, 0x036C
     454:	80 64       	ori	r24, 0x40	; 64
     456:	03 c0       	rjmp	.+6      	; 0x45e <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xac>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     458:	80 91 6c 03 	lds	r24, 0x036C
     45c:	8f 7b       	andi	r24, 0xBF	; 191
     45e:	80 93 6c 03 	sts	0x036C, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     462:	cf 01       	movw	r24, r30
     464:	69 8d       	ldd	r22, Y+25	; 0x19
     466:	7a 8d       	ldd	r23, Y+26	; 0x1a
     468:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__divmodhi4>
     46c:	2b a1       	ldd	r18, Y+35	; 0x23
     46e:	3c a1       	ldd	r19, Y+36	; 0x24
     470:	82 17       	cp	r24, r18
     472:	93 07       	cpc	r25, r19
     474:	34 f4       	brge	.+12     	; 0x482 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
     476:	cd 28       	or	r12, r13
     478:	21 f0       	breq	.+8      	; 0x482 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     47a:	80 91 6d 03 	lds	r24, 0x036D
     47e:	82 60       	ori	r24, 0x02	; 2
     480:	03 c0       	rjmp	.+6      	; 0x488 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd6>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     482:	80 91 6d 03 	lds	r24, 0x036D
     486:	8d 7f       	andi	r24, 0xFD	; 253
     488:	80 93 6d 03 	sts	0x036D, r24
	}

	if( ((counter - counterRefFive) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     48c:	c2 01       	movw	r24, r4
     48e:	82 19       	sub	r24, r2
     490:	93 09       	sbc	r25, r3
     492:	6b 8d       	ldd	r22, Y+27	; 0x1b
     494:	7c 8d       	ldd	r23, Y+28	; 0x1c
     496:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__divmodhi4>
     49a:	2d a1       	ldd	r18, Y+37	; 0x25
     49c:	3e a1       	ldd	r19, Y+38	; 0x26
     49e:	82 17       	cp	r24, r18
     4a0:	93 07       	cpc	r25, r19
     4a2:	34 f4       	brge	.+12     	; 0x4b0 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
     4a4:	ab 28       	or	r10, r11
     4a6:	21 f0       	breq	.+8      	; 0x4b0 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     4a8:	80 91 6d 03 	lds	r24, 0x036D
     4ac:	80 61       	ori	r24, 0x10	; 16
     4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x104>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     4b0:	80 91 6d 03 	lds	r24, 0x036D
     4b4:	8f 7e       	andi	r24, 0xEF	; 239
     4b6:	80 93 6d 03 	sts	0x036D, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     4ba:	80 e4       	ldi	r24, 0x40	; 64
     4bc:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
	i2c_write(0x2);									// write command byte
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     4c6:	80 91 6c 03 	lds	r24, 0x036C
     4ca:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     4ce:	80 91 6d 03 	lds	r24, 0x036D
     4d2:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
	i2c_stop();                            // set stop conditon = release bus
     4d6:	0e 94 05 19 	call	0x320a	; 0x320a <_Z8i2c_stopv>

	i2c_start(I2C2+I2C_WRITE);
     4da:	82 e4       	ldi	r24, 0x42	; 66
     4dc:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
	i2c_write(0x2);
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
	i2c_write(u_outputByte0.outputByte0);
     4e6:	80 91 6e 03 	lds	r24, 0x036E
     4ea:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
	i2c_write(u_outputByte1.outputByte1);
     4ee:	80 91 6f 03 	lds	r24, 0x036F
     4f2:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
}
     4f6:	cf 91       	pop	r28
     4f8:	df 91       	pop	r29
     4fa:	1f 91       	pop	r17
     4fc:	0f 91       	pop	r16
     4fe:	ff 90       	pop	r15
     500:	ef 90       	pop	r14
     502:	df 90       	pop	r13
     504:	cf 90       	pop	r12
     506:	bf 90       	pop	r11
     508:	af 90       	pop	r10
     50a:	9f 90       	pop	r9
     50c:	8f 90       	pop	r8
     50e:	7f 90       	pop	r7
     510:	6f 90       	pop	r6
     512:	5f 90       	pop	r5
     514:	4f 90       	pop	r4
     516:	3f 90       	pop	r3
     518:	2f 90       	pop	r2
     51a:	08 95       	ret

0000051c <main>:
//int button_debounce(int counter, int *pcounterRefPush, int *pcounterRefRel, int *pstateButton);

bool button_debounce(int counter, int *pstateButton);


int main()   
     51c:	2f 92       	push	r2
     51e:	3f 92       	push	r3
     520:	4f 92       	push	r4
     522:	5f 92       	push	r5
     524:	6f 92       	push	r6
     526:	7f 92       	push	r7
     528:	8f 92       	push	r8
     52a:	9f 92       	push	r9
     52c:	af 92       	push	r10
     52e:	bf 92       	push	r11
     530:	cf 92       	push	r12
     532:	df 92       	push	r13
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	df 93       	push	r29
     53e:	cf 93       	push	r28
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	ce 54       	subi	r28, 0x4E	; 78
     546:	d0 40       	sbci	r29, 0x00	; 0
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
	print35 = 1;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     552:	1a 82       	std	Y+2, r1	; 0x02
     554:	19 82       	std	Y+1, r1	; 0x01
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     556:	10 92 6c 03 	sts	0x036C, r1
	u_motorByte1.motorByte1 = 0;  // initialize motorByte1
     55a:	10 92 6d 03 	sts	0x036D, r1
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     55e:	8f ef       	ldi	r24, 0xFF	; 255
     560:	80 93 6e 03 	sts	0x036E, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
     564:	80 93 6f 03 	sts	0x036F, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
     568:	10 92 70 03 	sts	0x0370, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
     56c:	10 92 71 03 	sts	0x0371, r1
	
	OrangutanLCD::clear();
     570:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("DASCH CLEANER 2");
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
	OrangutanLCD::gotoXY(0,1);
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
	OrangutanLCD::print("REV: 25");
     584:	80 e1       	ldi	r24, 0x10	; 16
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
// another C++ file.
inline unsigned long get_ms() { return OrangutanTime::ms(); }
inline unsigned long millis() { return OrangutanTime::ms(); }

inline void delay(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
inline void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
     58c:	80 ed       	ldi	r24, 0xD0	; 208
     58e:	97 e0       	ldi	r25, 0x07	; 7
     590:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
	delay_ms(2000);
	
	OrangutanLCD::clear();
     594:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("BEGIN ");
     598:	88 e1       	ldi	r24, 0x18	; 24
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     5a0:	88 ee       	ldi	r24, 0xE8	; 232
     5a2:	93 e0       	ldi	r25, 0x03	; 3
     5a4:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
	
	delay_ms(1000);

    i2c_init();                                // init I2C interface
     5a8:	0e 94 ae 18 	call	0x315c	; 0x315c <_Z8i2c_initv>
	
    OrangutanLCD::print("INIT ");
     5ac:	8f e1       	ldi	r24, 0x1F	; 31
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
     5b4:	80 e4       	ldi	r24, 0x40	; 64
     5b6:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
     5ba:	c8 2e       	mov	r12, r24
	i2c_stop();
     5bc:	0e 94 05 19 	call	0x320a	; 0x320a <_Z8i2c_stopv>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
     5c0:	82 e4       	ldi	r24, 0x42	; 66
     5c2:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
     5c6:	08 2f       	mov	r16, r24
	i2c_stop();
     5c8:	0e 94 05 19 	call	0x320a	; 0x320a <_Z8i2c_stopv>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
     5cc:	84 e4       	ldi	r24, 0x44	; 68
     5ce:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
     5d2:	e8 2e       	mov	r14, r24
	i2c_stop();
     5d4:	0e 94 05 19 	call	0x320a	; 0x320a <_Z8i2c_stopv>
    
	OrangutanLCD::clear();
     5d8:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("START ");
     5dc:	85 e2       	ldi	r24, 0x25	; 37
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
     5e4:	10 e0       	ldi	r17, 0x00	; 0
     5e6:	dd 24       	eor	r13, r13
     5e8:	0c 29       	or	r16, r12
     5ea:	1d 29       	or	r17, r13
     5ec:	ff 24       	eor	r15, r15
     5ee:	0e 29       	or	r16, r14
     5f0:	1f 29       	or	r17, r15
     5f2:	01 2b       	or	r16, r17
     5f4:	61 f0       	breq	.+24     	; 0x60e <main+0xf2>
        /* failed to issue start condition(s), possibly no device found */
        
		OrangutanLCD::print("NAK ");
     5f6:	8c e2       	ldi	r24, 0x2C	; 44
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
		i2c_stop();
     5fe:	0e 94 05 19 	call	0x320a	; 0x320a <_Z8i2c_stopv>
		OrangutanLCD::print("STOP ");
     602:	81 e3       	ldi	r24, 0x31	; 49
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     60a:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <main+0x2bd0>
    }
	else {
		OrangutanLCD::print("ACK ");
     60e:	87 e3       	ldi	r24, 0x37	; 55
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
        /* issuing start conditions ok, devices accessible */
		OrangutanLCD::print("BINIT ");
     616:	8c e3       	ldi	r24, 0x3C	; 60
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
     61e:	80 e4       	ldi	r24, 0x40	; 64
     620:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
		i2c_write(0x6);
     624:	86 e0       	ldi	r24, 0x06	; 6
     626:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
		i2c_write(0x0);
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
		i2c_write(0x0);
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
		i2c_stop();
     636:	0e 94 05 19 	call	0x320a	; 0x320a <_Z8i2c_stopv>
		
		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
     63a:	82 e4       	ldi	r24, 0x42	; 66
     63c:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
		i2c_write(0x6);
     640:	86 e0       	ldi	r24, 0x06	; 6
     642:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
		i2c_write(0x0);
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
		i2c_write(0x0);
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
		i2c_stop();
     652:	0e 94 05 19 	call	0x320a	; 0x320a <_Z8i2c_stopv>
     656:	88 ee       	ldi	r24, 0xE8	; 232
     658:	93 e0       	ldi	r25, 0x03	; 3
     65a:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
										//Registers default to input, so I2C3 is fine already


		delay_ms(1000);
		OrangutanLCD::clear();
     65e:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>


		if(OrangutanDigital::isInputHigh(IO_D3))							//Tests if the switch is set to Maintenance Mode
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
     668:	88 23       	and	r24, r24
     66a:	09 f4       	brne	.+2      	; 0x66e <main+0x152>
     66c:	81 c4       	rjmp	.+2306   	; 0xf70 <main+0xa54>
		{
			OrangutanLCD::print("MAINTENANCE");
     66e:	83 e4       	ldi	r24, 0x43	; 67
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     676:	88 ee       	ldi	r24, 0xE8	; 232
     678:	93 e0       	ldi	r25, 0x03	; 3
     67a:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
			
			//initialize
			int print = 0;
			int submode = -1;

			OrangutanLCD::clear();
     67e:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
			OrangutanLCD::print("SELECT MODE");
     682:	8f e4       	ldi	r24, 0x4F	; 79
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     68a:	ee 24       	eor	r14, r14
     68c:	ff 24       	eor	r15, r15
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = NONE;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     68e:	c7 01       	movw	r24, r14
     690:	be 01       	movw	r22, r28
     692:	6f 5f       	subi	r22, 0xFF	; 255
     694:	7f 4f       	sbci	r23, 0xFF	; 255
     696:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z15button_debounceiPi>
     69a:	18 2f       	mov	r17, r24
				counter++;
     69c:	08 94       	sec
     69e:	e1 1c       	adc	r14, r1
     6a0:	f1 1c       	adc	r15, r1
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>

			OrangutanLCD::clear();
			OrangutanLCD::print("SELECT MODE");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
     6aa:	11 23       	and	r17, r17
     6ac:	81 f3       	breq	.-32     	; 0x68e <main+0x172>
				counter++;
				delay_ms(1);
			}
			buttonTriggered = false;
			counter = 0;
			OrangutanLCD::clear();
     6ae:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
     6b2:	2f ef       	ldi	r18, 0xFF	; 255
     6b4:	3f ef       	ldi	r19, 0xFF	; 255
     6b6:	3c af       	std	Y+60, r19	; 0x3c
     6b8:	2b af       	std	Y+59, r18	; 0x3b
     6ba:	66 24       	eor	r6, r6
     6bc:	77 24       	eor	r7, r7
     6be:	44 24       	eor	r4, r4
     6c0:	55 24       	eor	r5, r5
     6c2:	2f 96       	adiw	r28, 0x0f	; 15
     6c4:	1f ae       	std	Y+63, r1	; 0x3f
     6c6:	1e ae       	std	Y+62, r1	; 0x3e
     6c8:	2f 97       	sbiw	r28, 0x0f	; 15
     6ca:	29 96       	adiw	r28, 0x09	; 9
     6cc:	1f ae       	std	Y+63, r1	; 0x3f
     6ce:	1e ae       	std	Y+62, r1	; 0x3e
     6d0:	29 97       	sbiw	r28, 0x09	; 9
     6d2:	2d 96       	adiw	r28, 0x0d	; 13
     6d4:	1f ae       	std	Y+63, r1	; 0x3f
     6d6:	1e ae       	std	Y+62, r1	; 0x3e
     6d8:	2d 97       	sbiw	r28, 0x0d	; 13
     6da:	27 96       	adiw	r28, 0x07	; 7
     6dc:	1f ae       	std	Y+63, r1	; 0x3f
     6de:	1e ae       	std	Y+62, r1	; 0x3e
     6e0:	27 97       	sbiw	r28, 0x07	; 7
     6e2:	2b 96       	adiw	r28, 0x0b	; 11
     6e4:	1f ae       	std	Y+63, r1	; 0x3f
     6e6:	1e ae       	std	Y+62, r1	; 0x3e
     6e8:	2b 97       	sbiw	r28, 0x0b	; 11
     6ea:	22 24       	eor	r2, r2
     6ec:	33 24       	eor	r3, r3
     6ee:	1a 86       	std	Y+10, r1	; 0x0a
     6f0:	19 86       	std	Y+9, r1	; 0x09
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     6f2:	84 e4       	ldi	r24, 0x44	; 68
     6f4:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     6fe:	85 e4       	ldi	r24, 0x45	; 69
     700:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     704:	0e 94 1f 19 	call	0x323e	; 0x323e <_Z11i2c_readAckv>
     708:	80 93 70 03 	sts	0x0370, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     70c:	0e 94 29 19 	call	0x3252	; 0x3252 <_Z11i2c_readNakv>
     710:	80 93 71 03 	sts	0x0371, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     714:	0e 94 05 19 	call	0x320a	; 0x320a <_Z8i2c_stopv>
						stateButton = 0;
					}
				}*/

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     718:	c1 01       	movw	r24, r2
     71a:	be 01       	movw	r22, r28
     71c:	6f 5f       	subi	r22, 0xFF	; 255
     71e:	7f 4f       	sbci	r23, 0xFF	; 255
     720:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z15button_debounceiPi>
     724:	08 2f       	mov	r16, r24
							Output only 	--     starts testing each output individually and ends after testing all outputs
							Motor only		--     starts testing each motor individually and ends after testing all motors
							All				--     starts testing each input, then output, then motor, and ends after testing each

				*/
				if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != 0){
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
     72c:	88 23       	and	r24, r24
     72e:	11 f0       	breq	.+4      	; 0x734 <main+0x218>
     730:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <main+0x2bdc>
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
     73a:	88 23       	and	r24, r24
     73c:	11 f0       	breq	.+4      	; 0x742 <main+0x226>
     73e:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <main+0x2bdc>
     742:	4b ad       	ldd	r20, Y+59	; 0x3b
     744:	5c ad       	ldd	r21, Y+60	; 0x3c
     746:	45 2b       	or	r20, r21
     748:	11 f4       	brne	.+4      	; 0x74e <main+0x232>
     74a:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <main+0x2bdc>
					state = S0;
					submode = INPUT;
					OrangutanLCD::clear();
     74e:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     752:	8b e5       	ldi	r24, 0x5B	; 91
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
     762:	11 e0       	ldi	r17, 0x01	; 1
     764:	1c ae       	std	Y+60, r1	; 0x3c
     766:	1b ae       	std	Y+59, r1	; 0x3b
     768:	66 24       	eor	r6, r6
     76a:	77 24       	eor	r7, r7
     76c:	44 24       	eor	r4, r4
     76e:	55 24       	eor	r5, r5
					print = 0;
					switched = true;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != 1){
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
     776:	88 23       	and	r24, r24
     778:	e9 f0       	breq	.+58     	; 0x7b4 <main+0x298>
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
     780:	88 23       	and	r24, r24
     782:	c1 f4       	brne	.+48     	; 0x7b4 <main+0x298>
     784:	8b ad       	ldd	r24, Y+59	; 0x3b
     786:	9c ad       	ldd	r25, Y+60	; 0x3c
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	a1 f0       	breq	.+40     	; 0x7b4 <main+0x298>
					state = O0_ON;
					submode = OUTPUT;
					OrangutanLCD::clear();
     78c:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("OUTPUTS");
     790:	83 e6       	ldi	r24, 0x63	; 99
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	61 e0       	ldi	r22, 0x01	; 1
     79c:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
     7a0:	11 e0       	ldi	r17, 0x01	; 1
     7a2:	a1 e0       	ldi	r26, 0x01	; 1
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	bc af       	std	Y+60, r27	; 0x3c
     7a8:	ab af       	std	Y+59, r26	; 0x3b
     7aa:	66 24       	eor	r6, r6
     7ac:	77 24       	eor	r7, r7
     7ae:	98 e0       	ldi	r25, 0x08	; 8
     7b0:	49 2e       	mov	r4, r25
     7b2:	51 2c       	mov	r5, r1
					print = 0;
					switched = true;
				}
				if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != 2){
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
     7ba:	88 23       	and	r24, r24
     7bc:	f1 f4       	brne	.+60     	; 0x7fa <main+0x2de>
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
     7c4:	88 23       	and	r24, r24
     7c6:	c9 f0       	breq	.+50     	; 0x7fa <main+0x2de>
     7c8:	2b ad       	ldd	r18, Y+59	; 0x3b
     7ca:	3c ad       	ldd	r19, Y+60	; 0x3c
     7cc:	22 30       	cpi	r18, 0x02	; 2
     7ce:	31 05       	cpc	r19, r1
     7d0:	a1 f0       	breq	.+40     	; 0x7fa <main+0x2de>
					state = M1_F;
					submode = MOTOR;
					OrangutanLCD::clear();
     7d2:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MOTORS ");
     7d6:	8b e6       	ldi	r24, 0x6B	; 107
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
     7e6:	11 e0       	ldi	r17, 0x01	; 1
     7e8:	42 e0       	ldi	r20, 0x02	; 2
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	5c af       	std	Y+60, r21	; 0x3c
     7ee:	4b af       	std	Y+59, r20	; 0x3b
     7f0:	66 24       	eor	r6, r6
     7f2:	77 24       	eor	r7, r7
     7f4:	80 e2       	ldi	r24, 0x20	; 32
     7f6:	48 2e       	mov	r4, r24
     7f8:	51 2c       	mov	r5, r1
					print = 0;
					switched = true;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != 3){
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
     800:	88 23       	and	r24, r24
     802:	11 f4       	brne	.+4      	; 0x808 <main+0x2ec>
     804:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <main+0x2be2>
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
     80e:	88 23       	and	r24, r24
     810:	11 f4       	brne	.+4      	; 0x816 <main+0x2fa>
     812:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <main+0x2be2>
     816:	8b ad       	ldd	r24, Y+59	; 0x3b
     818:	9c ad       	ldd	r25, Y+60	; 0x3c
     81a:	03 97       	sbiw	r24, 0x03	; 3
     81c:	11 f4       	brne	.+4      	; 0x822 <main+0x306>
     81e:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <main+0x2be2>
					state = S0;
					submode = ALL;
					OrangutanLCD::clear();
     822:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     826:	8b e5       	ldi	r24, 0x5B	; 91
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
     836:	a3 e0       	ldi	r26, 0x03	; 3
     838:	b0 e0       	ldi	r27, 0x00	; 0
     83a:	bc af       	std	Y+60, r27	; 0x3c
     83c:	ab af       	std	Y+59, r26	; 0x3b
     83e:	66 24       	eor	r6, r6
     840:	77 24       	eor	r7, r7
     842:	44 24       	eor	r4, r4
     844:	55 24       	eor	r5, r5
					plateLoadMotor = 0;
					fixtureMotor = 0;
					brush1Motor = 0;
					brush2Motor = 0;
					paperTowelMotor = 0;
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	80 93 6e 03 	sts	0x036E, r24
					u_outputByte1.outputByte1 = 255;  // reset outputByte1
     84c:	80 93 6f 03 	sts	0x036F, r24
     850:	2f 96       	adiw	r28, 0x0f	; 15
     852:	1f ae       	std	Y+63, r1	; 0x3f
     854:	1e ae       	std	Y+62, r1	; 0x3e
     856:	2f 97       	sbiw	r28, 0x0f	; 15
     858:	29 96       	adiw	r28, 0x09	; 9
     85a:	1f ae       	std	Y+63, r1	; 0x3f
     85c:	1e ae       	std	Y+62, r1	; 0x3e
     85e:	29 97       	sbiw	r28, 0x09	; 9
     860:	2d 96       	adiw	r28, 0x0d	; 13
     862:	1f ae       	std	Y+63, r1	; 0x3f
     864:	1e ae       	std	Y+62, r1	; 0x3e
     866:	2d 97       	sbiw	r28, 0x0d	; 13
     868:	27 96       	adiw	r28, 0x07	; 7
     86a:	1f ae       	std	Y+63, r1	; 0x3f
     86c:	1e ae       	std	Y+62, r1	; 0x3e
     86e:	27 97       	sbiw	r28, 0x07	; 7
     870:	2b 96       	adiw	r28, 0x0b	; 11
     872:	1f ae       	std	Y+63, r1	; 0x3f
     874:	1e ae       	std	Y+62, r1	; 0x3e
     876:	2b 97       	sbiw	r28, 0x0b	; 11
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
     878:	00 23       	and	r16, r16
     87a:	09 f4       	brne	.+2      	; 0x87e <main+0x362>
     87c:	c5 c0       	rjmp	.+394    	; 0xa08 <main+0x4ec>
					if(state <= S7){				//if it's doing the sensors
     87e:	b8 e0       	ldi	r27, 0x08	; 8
     880:	4b 16       	cp	r4, r27
     882:	51 04       	cpc	r5, r1
     884:	fc f4       	brge	.+62     	; 0x8c4 <main+0x3a8>
						OrangutanLCD::gotoXY(0,1);
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
						buttonTriggered = false;
						state ++;
     88e:	08 94       	sec
     890:	41 1c       	adc	r4, r1
     892:	51 1c       	adc	r5, r1
						counterRef = counter;
						print = 0;
						if(state == S7 + 1){		//accounts for possible end of maintenance mode after sensors
     894:	28 e0       	ldi	r18, 0x08	; 8
     896:	42 16       	cp	r4, r18
     898:	51 04       	cpc	r5, r1
     89a:	09 f0       	breq	.+2      	; 0x89e <main+0x382>
     89c:	b1 c0       	rjmp	.+354    	; 0xa00 <main+0x4e4>
							OrangutanLCD::clear();
     89e:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
							if(submode == 0){
     8a2:	4b ad       	ldd	r20, Y+59	; 0x3b
     8a4:	5c ad       	ldd	r21, Y+60	; 0x3c
     8a6:	45 2b       	or	r20, r21
     8a8:	11 f4       	brne	.+4      	; 0x8ae <main+0x392>
     8aa:	0c 94 9f 18 	jmp	0x313e	; 0x313e <main+0x2c22>
								state = DONEM;
							}
							else{
								OrangutanLCD::print("OUTPUTS");
     8ae:	83 e6       	ldi	r24, 0x63	; 99
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
								OrangutanLCD::gotoXY(0,1);
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
     8be:	3a 86       	std	Y+10, r3	; 0x0a
     8c0:	29 86       	std	Y+9, r2	; 0x09
     8c2:	52 c1       	rjmp	.+676    	; 0xb68 <main+0x64c>
     8c4:	c2 01       	movw	r24, r4
     8c6:	81 70       	andi	r24, 0x01	; 1
     8c8:	90 70       	andi	r25, 0x00	; 0
							}
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
     8ca:	50 e2       	ldi	r21, 0x20	; 32
     8cc:	45 16       	cp	r4, r21
     8ce:	51 04       	cpc	r5, r1
     8d0:	7c f5       	brge	.+94     	; 0x930 <main+0x414>
						if(state % 2 == 0){			//current state is an 'on' state
     8d2:	89 2b       	or	r24, r25
     8d4:	49 f4       	brne	.+18     	; 0x8e8 <main+0x3cc>
							OrangutanLCD::gotoXY(13,1);
     8d6:	8d e0       	ldi	r24, 0x0D	; 13
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("OFF");
     8de:	83 e7       	ldi	r24, 0x73	; 115
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <main+0x3d4>
						}
						else{						//current state is an 'off' state
							OrangutanLCD::gotoXY(0,1);
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
						}
						buttonTriggered = false;
						state ++;
     8f0:	08 94       	sec
     8f2:	41 1c       	adc	r4, r1
     8f4:	51 1c       	adc	r5, r1
						counterRef = counter;
						print = 0;
						if(state == O11_OFF + 1){	//accounts for possible end of maintenance mode after outputs
     8f6:	80 e2       	ldi	r24, 0x20	; 32
     8f8:	48 16       	cp	r4, r24
     8fa:	51 04       	cpc	r5, r1
     8fc:	09 f0       	breq	.+2      	; 0x900 <main+0x3e4>
     8fe:	80 c0       	rjmp	.+256    	; 0xa00 <main+0x4e4>
							OrangutanLCD::clear();
     900:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
							if(submode == 1){
     904:	ab ad       	ldd	r26, Y+59	; 0x3b
     906:	bc ad       	ldd	r27, Y+60	; 0x3c
     908:	11 97       	sbiw	r26, 0x01	; 1
     90a:	11 f4       	brne	.+4      	; 0x910 <main+0x3f4>
     90c:	0c 94 9f 18 	jmp	0x313e	; 0x313e <main+0x2c22>
								state = DONEM;
							}
							else{
								u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     910:	80 91 6c 03 	lds	r24, 0x036C
     914:	84 60       	ori	r24, 0x04	; 4
     916:	80 93 6c 03 	sts	0x036C, r24
								OrangutanLCD::print("MOTORS");
     91a:	87 e7       	ldi	r24, 0x77	; 119
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
								OrangutanLCD::gotoXY(0,1);
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
     92a:	3a 86       	std	Y+10, r3	; 0x0a
     92c:	29 86       	std	Y+9, r2	; 0x09
     92e:	01 c2       	rjmp	.+1026   	; 0xd32 <main+0x816>
							}
						}
					}
					else{							//if it's doing the motors
						buttonTriggered = false;
						state ++;
     930:	82 01       	movw	r16, r4
     932:	0f 5f       	subi	r16, 0xFF	; 255
     934:	1f 4f       	sbci	r17, 0xFF	; 255
						counterRef = counter;
						print = 0;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
     936:	89 2b       	or	r24, r25
     938:	49 f4       	brne	.+18     	; 0x94c <main+0x430>
							OrangutanLCD::gotoXY(11,1);
     93a:	8b e0       	ldi	r24, 0x0B	; 11
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("BACK ");
     942:	8e e7       	ldi	r24, 0x7E	; 126
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     94a:	13 c0       	rjmp	.+38     	; 0x972 <main+0x456>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
     94c:	06 32       	cpi	r16, 0x26	; 38
     94e:	11 05       	cpc	r17, r1
     950:	81 f1       	breq	.+96     	; 0x9b2 <main+0x496>
     952:	07 32       	cpi	r16, 0x27	; 39
     954:	11 05       	cpc	r17, r1
     956:	3c f4       	brge	.+14     	; 0x966 <main+0x44a>
     958:	02 32       	cpi	r16, 0x22	; 34
     95a:	11 05       	cpc	r17, r1
     95c:	61 f0       	breq	.+24     	; 0x976 <main+0x45a>
     95e:	04 32       	cpi	r16, 0x24	; 36
     960:	11 05       	cpc	r17, r1
     962:	39 f4       	brne	.+14     	; 0x972 <main+0x456>
     964:	15 c0       	rjmp	.+42     	; 0x990 <main+0x474>
     966:	08 32       	cpi	r16, 0x28	; 40
     968:	11 05       	cpc	r17, r1
     96a:	81 f1       	breq	.+96     	; 0x9cc <main+0x4b0>
     96c:	0a 32       	cpi	r16, 0x2A	; 42
     96e:	11 05       	cpc	r17, r1
     970:	d1 f1       	breq	.+116    	; 0x9e6 <main+0x4ca>
     972:	28 01       	movw	r4, r16
     974:	45 c0       	rjmp	.+138    	; 0xa00 <main+0x4e4>
								case M1_B + 1:
									OrangutanLCD::gotoXY(0,1);
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	61 e0       	ldi	r22, 0x01	; 1
     97a:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
     97e:	80 91 6c 03 	lds	r24, 0x036C
     982:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     984:	80 62       	ori	r24, 0x20	; 32
     986:	80 93 6c 03 	sts	0x036C, r24
     98a:	3a 86       	std	Y+10, r3	; 0x0a
     98c:	29 86       	std	Y+9, r2	; 0x09
     98e:	f6 c1       	rjmp	.+1004   	; 0xd7c <main+0x860>
									break;
								case M2_B + 1:
									OrangutanLCD::gotoXY(0,1);
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     998:	80 91 6c 03 	lds	r24, 0x036C
     99c:	8f 7d       	andi	r24, 0xDF	; 223
     99e:	80 93 6c 03 	sts	0x036C, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     9a2:	80 91 6d 03 	lds	r24, 0x036D
     9a6:	81 60       	ori	r24, 0x01	; 1
     9a8:	80 93 6d 03 	sts	0x036D, r24
     9ac:	3a 86       	std	Y+10, r3	; 0x0a
     9ae:	29 86       	std	Y+9, r2	; 0x09
     9b0:	0e c2       	rjmp	.+1052   	; 0xdce <main+0x8b2>
									break;
								case M3_B + 1:
									OrangutanLCD::gotoXY(0,1);
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
     9ba:	80 91 6d 03 	lds	r24, 0x036D
     9be:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     9c0:	88 60       	ori	r24, 0x08	; 8
     9c2:	80 93 6d 03 	sts	0x036D, r24
     9c6:	3a 86       	std	Y+10, r3	; 0x0a
     9c8:	29 86       	std	Y+9, r2	; 0x09
     9ca:	2a c2       	rjmp	.+1108   	; 0xe20 <main+0x904>
									break;
								case M4_B + 1:
									OrangutanLCD::gotoXY(0,1);
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	61 e0       	ldi	r22, 0x01	; 1
     9d0:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     9d4:	80 91 6d 03 	lds	r24, 0x036D
     9d8:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
     9da:	80 64       	ori	r24, 0x40	; 64
     9dc:	80 93 6d 03 	sts	0x036D, r24
     9e0:	3a 86       	std	Y+10, r3	; 0x0a
     9e2:	29 86       	std	Y+9, r2	; 0x09
     9e4:	46 c2       	rjmp	.+1164   	; 0xe72 <main+0x956>
									break;
								case M5_B + 1:
									OrangutanLCD::clear();
     9e6:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
     9ea:	80 91 6d 03 	lds	r24, 0x036D
     9ee:	8f 7b       	andi	r24, 0xBF	; 191
     9f0:	80 93 6d 03 	sts	0x036D, r24
     9f4:	27 96       	adiw	r28, 0x07	; 7
     9f6:	1f ae       	std	Y+63, r1	; 0x3f
     9f8:	1e ae       	std	Y+62, r1	; 0x3e
     9fa:	27 97       	sbiw	r28, 0x07	; 7
     9fc:	0c 94 9f 18 	jmp	0x313e	; 0x313e <main+0x2c22>
     a00:	3a 86       	std	Y+10, r3	; 0x0a
     a02:	29 86       	std	Y+9, r2	; 0x09
     a04:	66 24       	eor	r6, r6
     a06:	77 24       	eor	r7, r7
					print = 0;
					paperTowelMotor = 0;
				}*/

				//state actions
				switch (state) {
     a08:	f2 01       	movw	r30, r4
     a0a:	ea 32       	cpi	r30, 0x2A	; 42
     a0c:	f1 05       	cpc	r31, r1
     a0e:	08 f0       	brcs	.+2      	; 0xa12 <main+0x4f6>
     a10:	55 c2       	rjmp	.+1194   	; 0xebc <main+0x9a0>
     a12:	ea 5b       	subi	r30, 0xBA	; 186
     a14:	ff 4f       	sbci	r31, 0xFF	; 255
     a16:	ee 0f       	add	r30, r30
     a18:	ff 1f       	adc	r31, r31
     a1a:	05 90       	lpm	r0, Z+
     a1c:	f4 91       	lpm	r31, Z+
     a1e:	e0 2d       	mov	r30, r0
     a20:	09 94       	ijmp
					case S0:
						if(print == 0){
     a22:	61 14       	cp	r6, r1
     a24:	71 04       	cpc	r7, r1
     a26:	39 f4       	brne	.+14     	; 0xa36 <main+0x51a>
							OrangutanLCD::print("SENSOR 0");
     a28:	84 e8       	ldi	r24, 0x84	; 132
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     a30:	01 e0       	ldi	r16, 0x01	; 1
     a32:	60 2e       	mov	r6, r16
     a34:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a36:	8f e0       	ldi	r24, 0x0F	; 15
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
	// position and will not span lines.
	static void print(unsigned long value);
	static void print(long value);
	static inline void print(unsigned int value)
	{
		print((unsigned long)value);
     a3e:	60 91 70 03 	lds	r22, 0x0370
     a42:	11 c0       	rjmp	.+34     	; 0xa66 <main+0x54a>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.plate);
						break;
					case S1:
						if(print == 0){
     a44:	61 14       	cp	r6, r1
     a46:	71 04       	cpc	r7, r1
     a48:	39 f4       	brne	.+14     	; 0xa58 <main+0x53c>
							OrangutanLCD::print("SENSOR 1");
     a4a:	8d e8       	ldi	r24, 0x8D	; 141
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     a52:	11 e0       	ldi	r17, 0x01	; 1
     a54:	61 2e       	mov	r6, r17
     a56:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a58:	8f e0       	ldi	r24, 0x0F	; 15
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
     a60:	60 91 70 03 	lds	r22, 0x0370
     a64:	66 95       	lsr	r22
     a66:	61 70       	andi	r22, 0x01	; 1
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <_ZN12OrangutanLCD5printEm>
     a72:	24 c2       	rjmp	.+1096   	; 0xebc <main+0x9a0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureLift);
						break;
					case S2:
						if(print == 0){
     a74:	61 14       	cp	r6, r1
     a76:	71 04       	cpc	r7, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <main+0x56c>
							OrangutanLCD::print("SENSOR 2");
     a7a:	86 e9       	ldi	r24, 0x96	; 150
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     a82:	b1 e0       	ldi	r27, 0x01	; 1
     a84:	6b 2e       	mov	r6, r27
     a86:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a88:	8f e0       	ldi	r24, 0x0F	; 15
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
     a90:	60 91 70 03 	lds	r22, 0x0370
     a94:	66 95       	lsr	r22
     a96:	66 95       	lsr	r22
     a98:	e6 cf       	rjmp	.-52     	; 0xa66 <main+0x54a>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureHome);
						break;
					case S3:
						if(print == 0){
     a9a:	61 14       	cp	r6, r1
     a9c:	71 04       	cpc	r7, r1
     a9e:	39 f4       	brne	.+14     	; 0xaae <main+0x592>
							OrangutanLCD::print("SENSOR 3");
     aa0:	8f e9       	ldi	r24, 0x9F	; 159
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     aa8:	a1 e0       	ldi	r26, 0x01	; 1
     aaa:	6a 2e       	mov	r6, r26
     aac:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     aae:	8f e0       	ldi	r24, 0x0F	; 15
     ab0:	61 e0       	ldi	r22, 0x01	; 1
     ab2:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
     ab6:	60 91 70 03 	lds	r22, 0x0370
     aba:	66 95       	lsr	r22
     abc:	66 95       	lsr	r22
     abe:	66 95       	lsr	r22
     ac0:	d2 cf       	rjmp	.-92     	; 0xa66 <main+0x54a>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixturePlate);
						break;
					case S4:
						if(print == 0){
     ac2:	61 14       	cp	r6, r1
     ac4:	71 04       	cpc	r7, r1
     ac6:	39 f4       	brne	.+14     	; 0xad6 <main+0x5ba>
							OrangutanLCD::print("SENSOR 4");
     ac8:	88 ea       	ldi	r24, 0xA8	; 168
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     ad0:	f1 e0       	ldi	r31, 0x01	; 1
     ad2:	6f 2e       	mov	r6, r31
     ad4:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     ad6:	8f e0       	ldi	r24, 0x0F	; 15
     ad8:	61 e0       	ldi	r22, 0x01	; 1
     ada:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
     ade:	60 91 70 03 	lds	r22, 0x0370
     ae2:	62 95       	swap	r22
     ae4:	6f 70       	andi	r22, 0x0F	; 15
     ae6:	bf cf       	rjmp	.-130    	; 0xa66 <main+0x54a>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
						break;
					case S5:
						if(print == 0){
     ae8:	61 14       	cp	r6, r1
     aea:	71 04       	cpc	r7, r1
     aec:	39 f4       	brne	.+14     	; 0xafc <main+0x5e0>
							OrangutanLCD::print("SENSOR 5");
     aee:	81 eb       	ldi	r24, 0xB1	; 177
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     af6:	e1 e0       	ldi	r30, 0x01	; 1
     af8:	6e 2e       	mov	r6, r30
     afa:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     afc:	8f e0       	ldi	r24, 0x0F	; 15
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
     b04:	60 91 70 03 	lds	r22, 0x0370
     b08:	62 95       	swap	r22
     b0a:	66 95       	lsr	r22
     b0c:	67 70       	andi	r22, 0x07	; 7
     b0e:	ab cf       	rjmp	.-170    	; 0xa66 <main+0x54a>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
						break;
					case S6:
						if(print == 0){
     b10:	61 14       	cp	r6, r1
     b12:	71 04       	cpc	r7, r1
     b14:	39 f4       	brne	.+14     	; 0xb24 <main+0x608>
							OrangutanLCD::print("SENSOR 6");
     b16:	8a eb       	ldi	r24, 0xBA	; 186
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     b1e:	71 e0       	ldi	r23, 0x01	; 1
     b20:	67 2e       	mov	r6, r23
     b22:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b24:	8f e0       	ldi	r24, 0x0F	; 15
     b26:	61 e0       	ldi	r22, 0x01	; 1
     b28:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
     b2c:	60 91 70 03 	lds	r22, 0x0370
     b30:	62 95       	swap	r22
     b32:	66 95       	lsr	r22
     b34:	66 95       	lsr	r22
     b36:	63 70       	andi	r22, 0x03	; 3
     b38:	96 cf       	rjmp	.-212    	; 0xa66 <main+0x54a>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry1);
						break;
					case S7:
						if(print == 0){
     b3a:	61 14       	cp	r6, r1
     b3c:	71 04       	cpc	r7, r1
     b3e:	39 f4       	brne	.+14     	; 0xb4e <main+0x632>
							OrangutanLCD::print("SENSOR 7");
     b40:	83 ec       	ldi	r24, 0xC3	; 195
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	66 2e       	mov	r6, r22
     b4c:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b4e:	8f e0       	ldi	r24, 0x0F	; 15
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
     b56:	60 91 70 03 	lds	r22, 0x0370
     b5a:	66 1f       	adc	r22, r22
     b5c:	66 27       	eor	r22, r22
     b5e:	66 1f       	adc	r22, r22
     b60:	83 cf       	rjmp	.-250    	; 0xa68 <main+0x54c>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry2);
						break;
					case O0_ON:
						if(print == 0){
     b62:	61 14       	cp	r6, r1
     b64:	71 04       	cpc	r7, r1
     b66:	39 f4       	brne	.+14     	; 0xb76 <main+0x65a>
							OrangutanLCD::print("AC POWER     ON ");
     b68:	8c ec       	ldi	r24, 0xCC	; 204
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     b70:	51 e0       	ldi	r21, 0x01	; 1
     b72:	65 2e       	mov	r6, r21
     b74:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
     b76:	80 91 6e 03 	lds	r24, 0x036E
     b7a:	8e 7f       	andi	r24, 0xFE	; 254
     b7c:	80 93 6e 03 	sts	0x036E, r24
     b80:	48 e0       	ldi	r20, 0x08	; 8
     b82:	44 2e       	mov	r4, r20
     b84:	51 2c       	mov	r5, r1
     b86:	9a c1       	rjmp	.+820    	; 0xebc <main+0x9a0>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
     b88:	80 91 6e 03 	lds	r24, 0x036E
     b8c:	81 60       	ori	r24, 0x01	; 1
     b8e:	0d c0       	rjmp	.+26     	; 0xbaa <main+0x68e>
						break;
					case O1_ON:
						if(print == 0){
     b90:	61 14       	cp	r6, r1
     b92:	71 04       	cpc	r7, r1
     b94:	39 f4       	brne	.+14     	; 0xba4 <main+0x688>
							OrangutanLCD::print("BLOWER       ON  ");
     b96:	8d ed       	ldi	r24, 0xDD	; 221
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     b9e:	31 e0       	ldi	r19, 0x01	; 1
     ba0:	63 2e       	mov	r6, r19
     ba2:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     ba4:	80 91 6e 03 	lds	r24, 0x036E
     ba8:	8d 7f       	andi	r24, 0xFD	; 253
     baa:	80 93 6e 03 	sts	0x036E, r24
     bae:	86 c1       	rjmp	.+780    	; 0xebc <main+0x9a0>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     bb0:	80 91 6e 03 	lds	r24, 0x036E
     bb4:	82 60       	ori	r24, 0x02	; 2
     bb6:	f9 cf       	rjmp	.-14     	; 0xbaa <main+0x68e>
						break;
					case O2_ON:
						if(print == 0){
     bb8:	61 14       	cp	r6, r1
     bba:	71 04       	cpc	r7, r1
     bbc:	39 f4       	brne	.+14     	; 0xbcc <main+0x6b0>
							OrangutanLCD::print("PLATE STOP   ON ");
     bbe:	8f ee       	ldi	r24, 0xEF	; 239
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     bc6:	21 e0       	ldi	r18, 0x01	; 1
     bc8:	62 2e       	mov	r6, r18
     bca:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
     bcc:	80 91 6e 03 	lds	r24, 0x036E
     bd0:	8b 7f       	andi	r24, 0xFB	; 251
     bd2:	eb cf       	rjmp	.-42     	; 0xbaa <main+0x68e>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
     bd4:	80 91 6e 03 	lds	r24, 0x036E
     bd8:	84 60       	ori	r24, 0x04	; 4
     bda:	e7 cf       	rjmp	.-50     	; 0xbaa <main+0x68e>
						break;
					case O3_ON:
						if(print == 0){
     bdc:	61 14       	cp	r6, r1
     bde:	71 04       	cpc	r7, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <main+0x6d4>
							OrangutanLCD::print("PLATE RAISE  ON ");
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	69 2e       	mov	r6, r25
     bee:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     bf0:	80 91 6e 03 	lds	r24, 0x036E
     bf4:	87 7f       	andi	r24, 0xF7	; 247
     bf6:	15 c0       	rjmp	.+42     	; 0xc22 <main+0x706>
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     bf8:	80 91 6e 03 	lds	r24, 0x036E
     bfc:	88 60       	ori	r24, 0x08	; 8
     bfe:	d5 cf       	rjmp	.-86     	; 0xbaa <main+0x68e>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(print == 0){
     c00:	61 14       	cp	r6, r1
     c02:	71 04       	cpc	r7, r1
     c04:	39 f4       	brne	.+14     	; 0xc14 <main+0x6f8>
							OrangutanLCD::print("PLATE LOWER  ON ");
     c06:	81 e1       	ldi	r24, 0x11	; 17
     c08:	92 e0       	ldi	r25, 0x02	; 2
     c0a:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	68 2e       	mov	r6, r24
     c12:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     c14:	80 91 6e 03 	lds	r24, 0x036E
     c18:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     c1a:	8f 7e       	andi	r24, 0xEF	; 239
     c1c:	c6 cf       	rjmp	.-116    	; 0xbaa <main+0x68e>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     c1e:	80 91 6e 03 	lds	r24, 0x036E
     c22:	80 61       	ori	r24, 0x10	; 16
     c24:	c2 cf       	rjmp	.-124    	; 0xbaa <main+0x68e>
						break;
					case O5_ON:
						if(print == 0){
     c26:	61 14       	cp	r6, r1
     c28:	71 04       	cpc	r7, r1
     c2a:	39 f4       	brne	.+14     	; 0xc3a <main+0x71e>
							OrangutanLCD::print("BRUSH1 RAISE ON ");
     c2c:	82 e2       	ldi	r24, 0x22	; 34
     c2e:	92 e0       	ldi	r25, 0x02	; 2
     c30:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     c34:	01 e0       	ldi	r16, 0x01	; 1
     c36:	60 2e       	mov	r6, r16
     c38:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     c3a:	80 91 6e 03 	lds	r24, 0x036E
     c3e:	8f 7d       	andi	r24, 0xDF	; 223
     c40:	14 c0       	rjmp	.+40     	; 0xc6a <main+0x74e>
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     c42:	80 91 6e 03 	lds	r24, 0x036E
     c46:	0d c0       	rjmp	.+26     	; 0xc62 <main+0x746>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(print == 0){
     c48:	61 14       	cp	r6, r1
     c4a:	71 04       	cpc	r7, r1
     c4c:	39 f4       	brne	.+14     	; 0xc5c <main+0x740>
							OrangutanLCD::print("BRUSH1 LOWER ON ");
     c4e:	83 e3       	ldi	r24, 0x33	; 51
     c50:	92 e0       	ldi	r25, 0x02	; 2
     c52:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     c56:	11 e0       	ldi	r17, 0x01	; 1
     c58:	61 2e       	mov	r6, r17
     c5a:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     c5c:	80 91 6e 03 	lds	r24, 0x036E
     c60:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     c62:	80 62       	ori	r24, 0x20	; 32
     c64:	a2 cf       	rjmp	.-188    	; 0xbaa <main+0x68e>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     c66:	80 91 6e 03 	lds	r24, 0x036E
     c6a:	80 64       	ori	r24, 0x40	; 64
     c6c:	9e cf       	rjmp	.-196    	; 0xbaa <main+0x68e>
						break;
					case O7_ON:
						if(print == 0){
     c6e:	61 14       	cp	r6, r1
     c70:	71 04       	cpc	r7, r1
     c72:	39 f4       	brne	.+14     	; 0xc82 <main+0x766>
							OrangutanLCD::print("BRUSH2 RAISE ON ");
     c74:	84 e4       	ldi	r24, 0x44	; 68
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     c7c:	b1 e0       	ldi	r27, 0x01	; 1
     c7e:	6b 2e       	mov	r6, r27
     c80:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     c82:	80 91 6e 03 	lds	r24, 0x036E
     c86:	8f 77       	andi	r24, 0x7F	; 127
     c88:	80 93 6e 03 	sts	0x036E, r24
     c8c:	13 c0       	rjmp	.+38     	; 0xcb4 <main+0x798>
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(print == 0){
     c8e:	61 14       	cp	r6, r1
     c90:	71 04       	cpc	r7, r1
     c92:	39 f4       	brne	.+14     	; 0xca2 <main+0x786>
							OrangutanLCD::print("BRUSH2 LOWER ON ");
     c94:	85 e5       	ldi	r24, 0x55	; 85
     c96:	92 e0       	ldi	r25, 0x02	; 2
     c98:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     c9c:	a1 e0       	ldi	r26, 0x01	; 1
     c9e:	6a 2e       	mov	r6, r26
     ca0:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     ca2:	80 91 6f 03 	lds	r24, 0x036F
     ca6:	8e 7f       	andi	r24, 0xFE	; 254
     ca8:	80 93 6f 03 	sts	0x036F, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     cac:	80 91 6e 03 	lds	r24, 0x036E
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	7b cf       	rjmp	.-266    	; 0xbaa <main+0x68e>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     cb4:	80 91 6f 03 	lds	r24, 0x036F
     cb8:	81 60       	ori	r24, 0x01	; 1
     cba:	35 c0       	rjmp	.+106    	; 0xd26 <main+0x80a>
						break;
					case O9_ON:
						if(print == 0){
     cbc:	61 14       	cp	r6, r1
     cbe:	71 04       	cpc	r7, r1
     cc0:	39 f4       	brne	.+14     	; 0xcd0 <main+0x7b4>
							OrangutanLCD::print("PAPER RAISE  ON ");
     cc2:	86 e6       	ldi	r24, 0x66	; 102
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     cca:	f1 e0       	ldi	r31, 0x01	; 1
     ccc:	6f 2e       	mov	r6, r31
     cce:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     cd0:	80 91 6f 03 	lds	r24, 0x036F
     cd4:	8d 7f       	andi	r24, 0xFD	; 253
     cd6:	14 c0       	rjmp	.+40     	; 0xd00 <main+0x7e4>
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     cd8:	80 91 6f 03 	lds	r24, 0x036F
     cdc:	0d c0       	rjmp	.+26     	; 0xcf8 <main+0x7dc>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(print == 0){
     cde:	61 14       	cp	r6, r1
     ce0:	71 04       	cpc	r7, r1
     ce2:	39 f4       	brne	.+14     	; 0xcf2 <main+0x7d6>
							OrangutanLCD::print("PAPER LOWER  ON ");
     ce4:	87 e7       	ldi	r24, 0x77	; 119
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     cec:	e1 e0       	ldi	r30, 0x01	; 1
     cee:	6e 2e       	mov	r6, r30
     cf0:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
     cf2:	80 91 6f 03 	lds	r24, 0x036F
     cf6:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     cf8:	82 60       	ori	r24, 0x02	; 2
     cfa:	15 c0       	rjmp	.+42     	; 0xd26 <main+0x80a>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
     cfc:	80 91 6f 03 	lds	r24, 0x036F
     d00:	84 60       	ori	r24, 0x04	; 4
     d02:	11 c0       	rjmp	.+34     	; 0xd26 <main+0x80a>
						break;
					case O11_ON:
						if(print == 0){
     d04:	61 14       	cp	r6, r1
     d06:	71 04       	cpc	r7, r1
     d08:	39 f4       	brne	.+14     	; 0xd18 <main+0x7fc>
							OrangutanLCD::print("AIR KNIFE    ON ");
     d0a:	88 e8       	ldi	r24, 0x88	; 136
     d0c:	92 e0       	ldi	r25, 0x02	; 2
     d0e:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     d12:	71 e0       	ldi	r23, 0x01	; 1
     d14:	67 2e       	mov	r6, r23
     d16:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
     d18:	80 91 6f 03 	lds	r24, 0x036F
     d1c:	87 7f       	andi	r24, 0xF7	; 247
     d1e:	03 c0       	rjmp	.+6      	; 0xd26 <main+0x80a>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
     d20:	80 91 6f 03 	lds	r24, 0x036F
     d24:	88 60       	ori	r24, 0x08	; 8
     d26:	80 93 6f 03 	sts	0x036F, r24
     d2a:	c8 c0       	rjmp	.+400    	; 0xebc <main+0x9a0>
						break;
					case M1_F:
						if(print == 0){
     d2c:	61 14       	cp	r6, r1
     d2e:	71 04       	cpc	r7, r1
     d30:	39 f4       	brne	.+14     	; 0xd40 <main+0x824>
							OrangutanLCD::print("LOADING    FRONT");
     d32:	89 e9       	ldi	r24, 0x99	; 153
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	66 2e       	mov	r6, r22
     d3e:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     d40:	80 91 6c 03 	lds	r24, 0x036C
     d44:	8d 7f       	andi	r24, 0xFD	; 253
     d46:	80 93 6c 03 	sts	0x036C, r24
     d4a:	21 e0       	ldi	r18, 0x01	; 1
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	2f 96       	adiw	r28, 0x0f	; 15
     d50:	3f af       	std	Y+63, r19	; 0x3f
     d52:	2e af       	std	Y+62, r18	; 0x3e
     d54:	2f 97       	sbiw	r28, 0x0f	; 15
     d56:	50 e2       	ldi	r21, 0x20	; 32
     d58:	45 2e       	mov	r4, r21
     d5a:	51 2c       	mov	r5, r1
     d5c:	af c0       	rjmp	.+350    	; 0xebc <main+0x9a0>
						plateLoadMotor =  1;
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
     d5e:	80 91 6c 03 	lds	r24, 0x036C
     d62:	82 60       	ori	r24, 0x02	; 2
     d64:	80 93 6c 03 	sts	0x036C, r24
     d68:	41 e0       	ldi	r20, 0x01	; 1
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	2f 96       	adiw	r28, 0x0f	; 15
     d6e:	5f af       	std	Y+63, r21	; 0x3f
     d70:	4e af       	std	Y+62, r20	; 0x3e
     d72:	2f 97       	sbiw	r28, 0x0f	; 15
     d74:	a3 c0       	rjmp	.+326    	; 0xebc <main+0x9a0>
						plateLoadMotor =  1;
						break;
					case M2_F:
						if(print == 0){
     d76:	61 14       	cp	r6, r1
     d78:	71 04       	cpc	r7, r1
     d7a:	39 f4       	brne	.+14     	; 0xd8a <main+0x86e>
							OrangutanLCD::print("DRIVE      FRONT");
     d7c:	8a ea       	ldi	r24, 0xAA	; 170
     d7e:	92 e0       	ldi	r25, 0x02	; 2
     d80:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     d84:	41 e0       	ldi	r20, 0x01	; 1
     d86:	64 2e       	mov	r6, r20
     d88:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     d8a:	80 91 6c 03 	lds	r24, 0x036C
     d8e:	8f 7e       	andi	r24, 0xEF	; 239
     d90:	80 93 6c 03 	sts	0x036C, r24
     d94:	2f 96       	adiw	r28, 0x0f	; 15
     d96:	1f ae       	std	Y+63, r1	; 0x3f
     d98:	1e ae       	std	Y+62, r1	; 0x3e
     d9a:	2f 97       	sbiw	r28, 0x0f	; 15
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	2d 96       	adiw	r28, 0x0d	; 13
     da2:	9f af       	std	Y+63, r25	; 0x3f
     da4:	8e af       	std	Y+62, r24	; 0x3e
     da6:	2d 97       	sbiw	r28, 0x0d	; 13
     da8:	32 e2       	ldi	r19, 0x22	; 34
     daa:	43 2e       	mov	r4, r19
     dac:	51 2c       	mov	r5, r1
     dae:	86 c0       	rjmp	.+268    	; 0xebc <main+0x9a0>
						fixtureMotor =  1;
						plateLoadMotor = 0;
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     db0:	80 91 6c 03 	lds	r24, 0x036C
     db4:	80 61       	ori	r24, 0x10	; 16
     db6:	80 93 6c 03 	sts	0x036C, r24
     dba:	a1 e0       	ldi	r26, 0x01	; 1
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	2d 96       	adiw	r28, 0x0d	; 13
     dc0:	bf af       	std	Y+63, r27	; 0x3f
     dc2:	ae af       	std	Y+62, r26	; 0x3e
     dc4:	2d 97       	sbiw	r28, 0x0d	; 13
     dc6:	7a c0       	rjmp	.+244    	; 0xebc <main+0x9a0>
						fixtureMotor =  1;
						break;
					case M3_F:
						if(print == 0){
     dc8:	61 14       	cp	r6, r1
     dca:	71 04       	cpc	r7, r1
     dcc:	39 f4       	brne	.+14     	; 0xddc <main+0x8c0>
							OrangutanLCD::print("BRUSH1     FRONT");
     dce:	8b eb       	ldi	r24, 0xBB	; 187
     dd0:	92 e0       	ldi	r25, 0x02	; 2
     dd2:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     dd6:	21 e0       	ldi	r18, 0x01	; 1
     dd8:	62 2e       	mov	r6, r18
     dda:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
     ddc:	80 91 6c 03 	lds	r24, 0x036C
     de0:	8f 77       	andi	r24, 0x7F	; 127
     de2:	80 93 6c 03 	sts	0x036C, r24
     de6:	2d 96       	adiw	r28, 0x0d	; 13
     de8:	1f ae       	std	Y+63, r1	; 0x3f
     dea:	1e ae       	std	Y+62, r1	; 0x3e
     dec:	2d 97       	sbiw	r28, 0x0d	; 13
     dee:	21 e0       	ldi	r18, 0x01	; 1
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	2b 96       	adiw	r28, 0x0b	; 11
     df4:	3f af       	std	Y+63, r19	; 0x3f
     df6:	2e af       	std	Y+62, r18	; 0x3e
     df8:	2b 97       	sbiw	r28, 0x0b	; 11
     dfa:	94 e2       	ldi	r25, 0x24	; 36
     dfc:	49 2e       	mov	r4, r25
     dfe:	51 2c       	mov	r5, r1
     e00:	5d c0       	rjmp	.+186    	; 0xebc <main+0x9a0>
						brush1Motor =  1;
						fixtureMotor = 0;
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
     e02:	80 91 6c 03 	lds	r24, 0x036C
     e06:	80 68       	ori	r24, 0x80	; 128
     e08:	80 93 6c 03 	sts	0x036C, r24
     e0c:	41 e0       	ldi	r20, 0x01	; 1
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	2b 96       	adiw	r28, 0x0b	; 11
     e12:	5f af       	std	Y+63, r21	; 0x3f
     e14:	4e af       	std	Y+62, r20	; 0x3e
     e16:	2b 97       	sbiw	r28, 0x0b	; 11
     e18:	51 c0       	rjmp	.+162    	; 0xebc <main+0x9a0>
						brush1Motor =  1;
						break;
					case M4_F:
						if(print == 0){
     e1a:	61 14       	cp	r6, r1
     e1c:	71 04       	cpc	r7, r1
     e1e:	39 f4       	brne	.+14     	; 0xe2e <main+0x912>
							OrangutanLCD::print("BRUSH2     FRONT");
     e20:	8c ec       	ldi	r24, 0xCC	; 204
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	68 2e       	mov	r6, r24
     e2c:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
     e2e:	80 91 6d 03 	lds	r24, 0x036D
     e32:	8b 7f       	andi	r24, 0xFB	; 251
     e34:	80 93 6d 03 	sts	0x036D, r24
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	29 96       	adiw	r28, 0x09	; 9
     e3e:	9f af       	std	Y+63, r25	; 0x3f
     e40:	8e af       	std	Y+62, r24	; 0x3e
     e42:	29 97       	sbiw	r28, 0x09	; 9
     e44:	2b 96       	adiw	r28, 0x0b	; 11
     e46:	1f ae       	std	Y+63, r1	; 0x3f
     e48:	1e ae       	std	Y+62, r1	; 0x3e
     e4a:	2b 97       	sbiw	r28, 0x0b	; 11
     e4c:	06 e2       	ldi	r16, 0x26	; 38
     e4e:	40 2e       	mov	r4, r16
     e50:	51 2c       	mov	r5, r1
     e52:	34 c0       	rjmp	.+104    	; 0xebc <main+0x9a0>
						brush2Motor =  1;
						brush1Motor = 0;
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
     e54:	80 91 6d 03 	lds	r24, 0x036D
     e58:	84 60       	ori	r24, 0x04	; 4
     e5a:	80 93 6d 03 	sts	0x036D, r24
     e5e:	a1 e0       	ldi	r26, 0x01	; 1
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	29 96       	adiw	r28, 0x09	; 9
     e64:	bf af       	std	Y+63, r27	; 0x3f
     e66:	ae af       	std	Y+62, r26	; 0x3e
     e68:	29 97       	sbiw	r28, 0x09	; 9
     e6a:	28 c0       	rjmp	.+80     	; 0xebc <main+0x9a0>
						brush2Motor =  1;
						break;
					case M5_F:
						if(print == 0){
     e6c:	61 14       	cp	r6, r1
     e6e:	71 04       	cpc	r7, r1
     e70:	39 f4       	brne	.+14     	; 0xe80 <main+0x964>
							OrangutanLCD::print("PAPER      FRONT");
     e72:	8d ed       	ldi	r24, 0xDD	; 221
     e74:	92 e0       	ldi	r25, 0x02	; 2
     e76:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     e7a:	11 e0       	ldi	r17, 0x01	; 1
     e7c:	61 2e       	mov	r6, r17
     e7e:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     e80:	80 91 6d 03 	lds	r24, 0x036D
     e84:	8f 7d       	andi	r24, 0xDF	; 223
     e86:	80 93 6d 03 	sts	0x036D, r24
     e8a:	29 96       	adiw	r28, 0x09	; 9
     e8c:	1f ae       	std	Y+63, r1	; 0x3f
     e8e:	1e ae       	std	Y+62, r1	; 0x3e
     e90:	29 97       	sbiw	r28, 0x09	; 9
     e92:	21 e0       	ldi	r18, 0x01	; 1
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	27 96       	adiw	r28, 0x07	; 7
     e98:	3f af       	std	Y+63, r19	; 0x3f
     e9a:	2e af       	std	Y+62, r18	; 0x3e
     e9c:	27 97       	sbiw	r28, 0x07	; 7
     e9e:	b8 e2       	ldi	r27, 0x28	; 40
     ea0:	4b 2e       	mov	r4, r27
     ea2:	51 2c       	mov	r5, r1
     ea4:	0b c0       	rjmp	.+22     	; 0xebc <main+0x9a0>
						paperTowelMotor =  1;
						brush2Motor = 0;
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
     ea6:	80 91 6d 03 	lds	r24, 0x036D
     eaa:	80 62       	ori	r24, 0x20	; 32
     eac:	80 93 6d 03 	sts	0x036D, r24
     eb0:	41 e0       	ldi	r20, 0x01	; 1
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	27 96       	adiw	r28, 0x07	; 7
     eb6:	5f af       	std	Y+63, r21	; 0x3f
     eb8:	4e af       	std	Y+62, r20	; 0x3e
     eba:	27 97       	sbiw	r28, 0x07	; 7
						paperTowelMotor =  1;
						break;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
     ebc:	8d b7       	in	r24, 0x3d	; 61
     ebe:	9e b7       	in	r25, 0x3e	; 62
     ec0:	42 97       	sbiw	r24, 0x12	; 18
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	9e bf       	out	0x3e, r25	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	8d bf       	out	0x3d, r24	; 61
     ecc:	ed b7       	in	r30, 0x3d	; 61
     ece:	fe b7       	in	r31, 0x3e	; 62
     ed0:	31 96       	adiw	r30, 0x01	; 1
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	ad b7       	in	r26, 0x3d	; 61
     ed8:	be b7       	in	r27, 0x3e	; 62
     eda:	12 96       	adiw	r26, 0x02	; 2
     edc:	9c 93       	st	X, r25
     ede:	8e 93       	st	-X, r24
     ee0:	11 97       	sbiw	r26, 0x01	; 1
     ee2:	93 83       	std	Z+3, r25	; 0x03
     ee4:	82 83       	std	Z+2, r24	; 0x02
     ee6:	95 83       	std	Z+5, r25	; 0x05
     ee8:	84 83       	std	Z+4, r24	; 0x04
     eea:	97 83       	std	Z+7, r25	; 0x07
     eec:	86 83       	std	Z+6, r24	; 0x06
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	91 87       	std	Z+9, r25	; 0x09
     ef4:	80 87       	std	Z+8, r24	; 0x08
     ef6:	93 87       	std	Z+11, r25	; 0x0b
     ef8:	82 87       	std	Z+10, r24	; 0x0a
     efa:	95 87       	std	Z+13, r25	; 0x0d
     efc:	84 87       	std	Z+12, r24	; 0x0c
     efe:	97 87       	std	Z+15, r25	; 0x0f
     f00:	86 87       	std	Z+14, r24	; 0x0e
     f02:	91 8b       	std	Z+17, r25	; 0x11
     f04:	80 8b       	std	Z+16, r24	; 0x10
     f06:	c1 01       	movw	r24, r2
     f08:	69 85       	ldd	r22, Y+9	; 0x09
     f0a:	7a 85       	ldd	r23, Y+10	; 0x0a
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	2f 96       	adiw	r28, 0x0f	; 15
     f12:	2e ad       	ldd	r18, Y+62	; 0x3e
     f14:	3f ad       	ldd	r19, Y+63	; 0x3f
     f16:	2f 97       	sbiw	r28, 0x0f	; 15
     f18:	2d 96       	adiw	r28, 0x0d	; 13
     f1a:	0e ad       	ldd	r16, Y+62	; 0x3e
     f1c:	1f ad       	ldd	r17, Y+63	; 0x3f
     f1e:	2d 97       	sbiw	r28, 0x0d	; 13
     f20:	2b 96       	adiw	r28, 0x0b	; 11
     f22:	ee ac       	ldd	r14, Y+62	; 0x3e
     f24:	ff ac       	ldd	r15, Y+63	; 0x3f
     f26:	2b 97       	sbiw	r28, 0x0b	; 11
     f28:	29 96       	adiw	r28, 0x09	; 9
     f2a:	ce ac       	ldd	r12, Y+62	; 0x3e
     f2c:	df ac       	ldd	r13, Y+63	; 0x3f
     f2e:	29 97       	sbiw	r28, 0x09	; 9
     f30:	27 96       	adiw	r28, 0x07	; 7
     f32:	ae ac       	ldd	r10, Y+62	; 0x3e
     f34:	bf ac       	ldd	r11, Y+63	; 0x3f
     f36:	27 97       	sbiw	r28, 0x07	; 7
     f38:	a2 e0       	ldi	r26, 0x02	; 2
     f3a:	8a 2e       	mov	r8, r26
     f3c:	91 2c       	mov	r9, r1
     f3e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
     f42:	2d b7       	in	r18, 0x3d	; 61
     f44:	3e b7       	in	r19, 0x3e	; 62
     f46:	2e 5e       	subi	r18, 0xEE	; 238
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	3e bf       	out	0x3e, r19	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	2d bf       	out	0x3d, r18	; 61
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
			counter = 0;
			OrangutanLCD::clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
     f5c:	3a e2       	ldi	r19, 0x2A	; 42
     f5e:	43 16       	cp	r4, r19
     f60:	51 04       	cpc	r5, r1
     f62:	11 f4       	brne	.+4      	; 0xf68 <main+0xa4c>
     f64:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <main+0x2b9c>
				i2c_start(I2C2+I2C_WRITE);
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				counter ++;
     f68:	08 94       	sec
     f6a:	21 1c       	adc	r2, r1
     f6c:	31 1c       	adc	r3, r1
     f6e:	c1 cb       	rjmp	.-2174   	; 0x6f2 <main+0x1d6>
				delay_ms(1);
			}
		}
		else{										//If switch is set to Run Mode
		
		OrangutanLCD::print("NORMAL");
     f70:	8e ee       	ldi	r24, 0xEE	; 238
     f72:	92 e0       	ldi	r25, 0x02	; 2
     f74:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     f78:	88 ee       	ldi	r24, 0xE8	; 232
     f7a:	93 e0       	ldi	r25, 0x03	; 3
     f7c:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
     f80:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("SELECT CYCLE");
     f84:	85 ef       	ldi	r24, 0xF5	; 245
     f86:	92 e0       	ldi	r25, 0x02	; 2
     f88:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
     f8c:	ee 24       	eor	r14, r14
     f8e:	ff 24       	eor	r15, r15
				else if(counter - counterRefRel > 15){
					button = 0;
					stateButton = NONE;
				}
			}*/
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     f90:	c7 01       	movw	r24, r14
     f92:	be 01       	movw	r22, r28
     f94:	6f 5f       	subi	r22, 0xFF	; 255
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z15button_debounceiPi>
     f9c:	18 2f       	mov	r17, r24
			counter++;
     f9e:	08 94       	sec
     fa0:	e1 1c       	adc	r14, r1
     fa2:	f1 1c       	adc	r15, r1
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
		OrangutanLCD::print("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
     fac:	11 23       	and	r17, r17
     fae:	81 f3       	breq	.-32     	; 0xf90 <main+0xa74>
			counter++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		OrangutanLCD::clear();
     fb0:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("CYCLE:");
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	93 e0       	ldi	r25, 0x03	; 3
     fb8:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>

		//u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     fbc:	80 91 6c 03 	lds	r24, 0x036C
     fc0:	80 62       	ori	r24, 0x20	; 32
     fc2:	80 93 6c 03 	sts	0x036C, r24
		/*u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;*/

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
     fcc:	88 23       	and	r24, r24
     fce:	11 f0       	breq	.+4      	; 0xfd4 <main+0xab8>
     fd0:	0c 94 85 18 	jmp	0x310a	; 0x310a <main+0x2bee>
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
     fda:	88 23       	and	r24, r24
     fdc:	11 f0       	breq	.+4      	; 0xfe2 <main+0xac6>
     fde:	0c 94 85 18 	jmp	0x310a	; 0x310a <main+0x2bee>
			OrangutanLCD::gotoXY(7,0);
     fe2:	87 e0       	ldi	r24, 0x07	; 7
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("FIRST B");
     fea:	89 e0       	ldi	r24, 0x09	; 9
     fec:	93 e0       	ldi	r25, 0x03	; 3
     fee:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
			OrangutanLCD::print("DEBUG");
     ff2:	81 e1       	ldi	r24, 0x11	; 17
     ff4:	93 e0       	ldi	r25, 0x03	; 3
     ff6:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     ffa:	80 91 6c 03 	lds	r24, 0x036C
     ffe:	80 62       	ori	r24, 0x20	; 32
    1000:	80 93 6c 03 	sts	0x036C, r24
    1004:	18 86       	std	Y+8, r1	; 0x08
    1006:	1f 82       	std	Y+7, r1	; 0x07
    1008:	41 e0       	ldi	r20, 0x01	; 1
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	5e af       	std	Y+62, r21	; 0x3e
    100e:	4d af       	std	Y+61, r20	; 0x3d
    1010:	21 96       	adiw	r28, 0x01	; 1
    1012:	5f af       	std	Y+63, r21	; 0x3f
    1014:	4e af       	std	Y+62, r20	; 0x3e
    1016:	21 97       	sbiw	r28, 0x01	; 1
    1018:	66 24       	eor	r6, r6
    101a:	77 24       	eor	r7, r7
    101c:	1e a6       	std	Y+46, r1	; 0x2e
    101e:	1d a6       	std	Y+45, r1	; 0x2d
    1020:	58 a3       	std	Y+32, r21	; 0x20
    1022:	4f 8f       	std	Y+31, r20	; 0x1f
    1024:	18 8e       	std	Y+24, r1	; 0x18
    1026:	1f 8a       	std	Y+23, r1	; 0x17
    1028:	18 8a       	std	Y+16, r1	; 0x10
    102a:	1f 86       	std	Y+15, r1	; 0x0f
    102c:	44 24       	eor	r4, r4
    102e:	55 24       	eor	r5, r5
    1030:	22 24       	eor	r2, r2
    1032:	33 24       	eor	r3, r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1034:	84 e4       	ldi	r24, 0x44	; 68
    1036:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1040:	85 e4       	ldi	r24, 0x45	; 69
    1042:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1046:	0e 94 1f 19 	call	0x323e	; 0x323e <_Z11i2c_readAckv>
    104a:	80 93 70 03 	sts	0x0370, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    104e:	0e 94 29 19 	call	0x3252	; 0x3252 <_Z11i2c_readNakv>
    1052:	80 93 71 03 	sts	0x0371, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1056:	0e 94 05 19 	call	0x320a	; 0x320a <_Z8i2c_stopv>
				
				if(state != INIT){
    105a:	61 14       	cp	r6, r1
    105c:	71 04       	cpc	r7, r1
    105e:	79 f0       	breq	.+30     	; 0x107e <main+0xb62>
					OrangutanLCD::gotoXY(0,1);
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1068:	87 e1       	ldi	r24, 0x17	; 23
    106a:	93 e0       	ldi	r25, 0x03	; 3
    106c:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
	};
	static inline void print(int value)
	{
		print((long)value);
    1070:	b3 01       	movw	r22, r6
    1072:	88 27       	eor	r24, r24
    1074:	77 fd       	sbrc	r23, 7
    1076:	80 95       	com	r24
    1078:	98 2f       	mov	r25, r24
    107a:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_ZN12OrangutanLCD5printEl>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    107e:	c2 01       	movw	r24, r4
    1080:	be 01       	movw	r22, r28
    1082:	6f 5f       	subi	r22, 0xFF	; 255
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    108a:	61 14       	cp	r6, r1
    108c:	71 04       	cpc	r7, r1
    108e:	29 f4       	brne	.+10     	; 0x109a <main+0xb7e>
    1090:	88 23       	and	r24, r24
    1092:	09 f4       	brne	.+2      	; 0x1096 <main+0xb7a>
    1094:	43 c0       	rjmp	.+134    	; 0x111c <main+0xc00>
    1096:	12 01       	movw	r2, r4
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <main+0xb86>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    109a:	51 e0       	ldi	r21, 0x01	; 1
    109c:	65 16       	cp	r6, r21
    109e:	71 04       	cpc	r7, r1
    10a0:	49 f4       	brne	.+18     	; 0x10b4 <main+0xb98>
    10a2:	c2 01       	movw	r24, r4
    10a4:	82 19       	sub	r24, r2
    10a6:	93 09       	sbc	r25, r3
    10a8:	81 5a       	subi	r24, 0xA1	; 161
    10aa:	9f 40       	sbci	r25, 0x0F	; 15
    10ac:	0c f4       	brge	.+2      	; 0x10b0 <main+0xb94>
    10ae:	43 c0       	rjmp	.+134    	; 0x1136 <main+0xc1a>
    10b0:	12 01       	movw	r2, r4
    10b2:	04 c0       	rjmp	.+8      	; 0x10bc <main+0xba0>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    10b4:	b2 e0       	ldi	r27, 0x02	; 2
    10b6:	6b 16       	cp	r6, r27
    10b8:	71 04       	cpc	r7, r1
    10ba:	49 f4       	brne	.+18     	; 0x10ce <main+0xbb2>
    10bc:	c2 01       	movw	r24, r4
    10be:	82 19       	sub	r24, r2
    10c0:	93 09       	sbc	r25, r3
    10c2:	85 36       	cpi	r24, 0x65	; 101
    10c4:	91 05       	cpc	r25, r1
    10c6:	0c f4       	brge	.+2      	; 0x10ca <main+0xbae>
    10c8:	46 c0       	rjmp	.+140    	; 0x1156 <main+0xc3a>
    10ca:	12 01       	movw	r2, r4
    10cc:	04 c0       	rjmp	.+8      	; 0x10d6 <main+0xbba>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    10ce:	23 e0       	ldi	r18, 0x03	; 3
    10d0:	62 16       	cp	r6, r18
    10d2:	71 04       	cpc	r7, r1
    10d4:	49 f4       	brne	.+18     	; 0x10e8 <main+0xbcc>
    10d6:	c2 01       	movw	r24, r4
    10d8:	82 19       	sub	r24, r2
    10da:	93 09       	sbc	r25, r3
    10dc:	81 5a       	subi	r24, 0xA1	; 161
    10de:	9f 40       	sbci	r25, 0x0F	; 15
    10e0:	0c f4       	brge	.+2      	; 0x10e4 <main+0xbc8>
    10e2:	49 c0       	rjmp	.+146    	; 0x1176 <main+0xc5a>
    10e4:	12 01       	movw	r2, r4
    10e6:	04 c0       	rjmp	.+8      	; 0x10f0 <main+0xbd4>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    10e8:	44 e0       	ldi	r20, 0x04	; 4
    10ea:	64 16       	cp	r6, r20
    10ec:	71 04       	cpc	r7, r1
    10ee:	49 f4       	brne	.+18     	; 0x1102 <main+0xbe6>
    10f0:	c2 01       	movw	r24, r4
    10f2:	82 19       	sub	r24, r2
    10f4:	93 09       	sbc	r25, r3
    10f6:	89 5e       	subi	r24, 0xE9	; 233
    10f8:	93 40       	sbci	r25, 0x03	; 3
    10fa:	0c f4       	brge	.+2      	; 0x10fe <main+0xbe2>
    10fc:	4c c0       	rjmp	.+152    	; 0x1196 <main+0xc7a>
    10fe:	12 01       	movw	r2, r4
    1100:	04 c0       	rjmp	.+8      	; 0x110a <main+0xbee>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    1102:	85 e0       	ldi	r24, 0x05	; 5
    1104:	68 16       	cp	r6, r24
    1106:	71 04       	cpc	r7, r1
    1108:	49 f4       	brne	.+18     	; 0x111c <main+0xc00>
    110a:	c2 01       	movw	r24, r4
    110c:	82 19       	sub	r24, r2
    110e:	93 09       	sbc	r25, r3
    1110:	85 36       	cpi	r24, 0x65	; 101
    1112:	91 05       	cpc	r25, r1
    1114:	0c f4       	brge	.+2      	; 0x1118 <main+0xbfc>
    1116:	4d c0       	rjmp	.+154    	; 0x11b2 <main+0xc96>
    1118:	12 01       	movw	r2, r4
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <main+0xc08>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    111c:	96 e0       	ldi	r25, 0x06	; 6
    111e:	69 16       	cp	r6, r25
    1120:	71 04       	cpc	r7, r1
    1122:	61 f4       	brne	.+24     	; 0x113c <main+0xc20>
    1124:	c2 01       	movw	r24, r4
    1126:	82 19       	sub	r24, r2
    1128:	93 09       	sbc	r25, r3
    112a:	81 5a       	subi	r24, 0xA1	; 161
    112c:	9f 40       	sbci	r25, 0x0F	; 15
    112e:	0c f4       	brge	.+2      	; 0x1132 <main+0xc16>
    1130:	50 c0       	rjmp	.+160    	; 0x11d2 <main+0xcb6>
    1132:	12 01       	movw	r2, r4
    1134:	07 c0       	rjmp	.+14     	; 0x1144 <main+0xc28>
    1136:	f1 e0       	ldi	r31, 0x01	; 1
    1138:	6f 2e       	mov	r6, r31
    113a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    113c:	b7 e0       	ldi	r27, 0x07	; 7
    113e:	6b 16       	cp	r6, r27
    1140:	71 04       	cpc	r7, r1
    1142:	61 f4       	brne	.+24     	; 0x115c <main+0xc40>
    1144:	c2 01       	movw	r24, r4
    1146:	82 19       	sub	r24, r2
    1148:	93 09       	sbc	r25, r3
    114a:	85 36       	cpi	r24, 0x65	; 101
    114c:	91 05       	cpc	r25, r1
    114e:	0c f4       	brge	.+2      	; 0x1152 <main+0xc36>
    1150:	50 c0       	rjmp	.+160    	; 0x11f2 <main+0xcd6>
    1152:	12 01       	movw	r2, r4
    1154:	07 c0       	rjmp	.+14     	; 0x1164 <main+0xc48>
    1156:	e2 e0       	ldi	r30, 0x02	; 2
    1158:	6e 2e       	mov	r6, r30
    115a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    115c:	28 e0       	ldi	r18, 0x08	; 8
    115e:	62 16       	cp	r6, r18
    1160:	71 04       	cpc	r7, r1
    1162:	61 f4       	brne	.+24     	; 0x117c <main+0xc60>
    1164:	c2 01       	movw	r24, r4
    1166:	82 19       	sub	r24, r2
    1168:	93 09       	sbc	r25, r3
    116a:	85 36       	cpi	r24, 0x65	; 101
    116c:	91 05       	cpc	r25, r1
    116e:	0c f4       	brge	.+2      	; 0x1172 <main+0xc56>
    1170:	4e c0       	rjmp	.+156    	; 0x120e <main+0xcf2>
    1172:	12 01       	movw	r2, r4
    1174:	07 c0       	rjmp	.+14     	; 0x1184 <main+0xc68>
    1176:	73 e0       	ldi	r23, 0x03	; 3
    1178:	67 2e       	mov	r6, r23
    117a:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    117c:	39 e0       	ldi	r19, 0x09	; 9
    117e:	63 16       	cp	r6, r19
    1180:	71 04       	cpc	r7, r1
    1182:	61 f4       	brne	.+24     	; 0x119c <main+0xc80>
    1184:	c2 01       	movw	r24, r4
    1186:	82 19       	sub	r24, r2
    1188:	93 09       	sbc	r25, r3
    118a:	81 5d       	subi	r24, 0xD1	; 209
    118c:	97 40       	sbci	r25, 0x07	; 7
    118e:	0c f4       	brge	.+2      	; 0x1192 <main+0xc76>
    1190:	4e c0       	rjmp	.+156    	; 0x122e <main+0xd12>
    1192:	12 01       	movw	r2, r4
    1194:	07 c0       	rjmp	.+14     	; 0x11a4 <main+0xc88>
    1196:	64 e0       	ldi	r22, 0x04	; 4
    1198:	66 2e       	mov	r6, r22
    119a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    119c:	5a e0       	ldi	r21, 0x0A	; 10
    119e:	65 16       	cp	r6, r21
    11a0:	71 04       	cpc	r7, r1
    11a2:	51 f4       	brne	.+20     	; 0x11b8 <main+0xc9c>
    11a4:	c2 01       	movw	r24, r4
    11a6:	82 19       	sub	r24, r2
    11a8:	93 09       	sbc	r25, r3
    11aa:	85 36       	cpi	r24, 0x65	; 101
    11ac:	91 05       	cpc	r25, r1
    11ae:	44 f4       	brge	.+16     	; 0x11c0 <main+0xca4>
    11b0:	4e c0       	rjmp	.+156    	; 0x124e <main+0xd32>
    11b2:	55 e0       	ldi	r21, 0x05	; 5
    11b4:	65 2e       	mov	r6, r21
    11b6:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    11b8:	8b e0       	ldi	r24, 0x0B	; 11
    11ba:	68 16       	cp	r6, r24
    11bc:	71 04       	cpc	r7, r1
    11be:	61 f4       	brne	.+24     	; 0x11d8 <main+0xcbc>
    11c0:	c2 01       	movw	r24, r4
    11c2:	82 19       	sub	r24, r2
    11c4:	93 09       	sbc	r25, r3
    11c6:	81 5d       	subi	r24, 0xD1	; 209
    11c8:	97 40       	sbci	r25, 0x07	; 7
    11ca:	0c f4       	brge	.+2      	; 0x11ce <main+0xcb2>
    11cc:	50 c0       	rjmp	.+160    	; 0x126e <main+0xd52>
    11ce:	12 01       	movw	r2, r4
    11d0:	07 c0       	rjmp	.+14     	; 0x11e0 <main+0xcc4>
    11d2:	46 e0       	ldi	r20, 0x06	; 6
    11d4:	64 2e       	mov	r6, r20
    11d6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    11d8:	bc e0       	ldi	r27, 0x0C	; 12
    11da:	6b 16       	cp	r6, r27
    11dc:	71 04       	cpc	r7, r1
    11de:	61 f4       	brne	.+24     	; 0x11f8 <main+0xcdc>
    11e0:	c2 01       	movw	r24, r4
    11e2:	82 19       	sub	r24, r2
    11e4:	93 09       	sbc	r25, r3
    11e6:	85 36       	cpi	r24, 0x65	; 101
    11e8:	91 05       	cpc	r25, r1
    11ea:	0c f4       	brge	.+2      	; 0x11ee <main+0xcd2>
    11ec:	4e c0       	rjmp	.+156    	; 0x128a <main+0xd6e>
    11ee:	12 01       	movw	r2, r4
    11f0:	07 c0       	rjmp	.+14     	; 0x1200 <main+0xce4>
    11f2:	37 e0       	ldi	r19, 0x07	; 7
    11f4:	63 2e       	mov	r6, r19
    11f6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    11f8:	2d e0       	ldi	r18, 0x0D	; 13
    11fa:	62 16       	cp	r6, r18
    11fc:	71 04       	cpc	r7, r1
    11fe:	51 f4       	brne	.+20     	; 0x1214 <main+0xcf8>
    1200:	c2 01       	movw	r24, r4
    1202:	82 19       	sub	r24, r2
    1204:	93 09       	sbc	r25, r3
    1206:	81 5d       	subi	r24, 0xD1	; 209
    1208:	97 40       	sbci	r25, 0x07	; 7
    120a:	44 f4       	brge	.+16     	; 0x121c <main+0xd00>
    120c:	4f c0       	rjmp	.+158    	; 0x12ac <main+0xd90>
    120e:	28 e0       	ldi	r18, 0x08	; 8
    1210:	62 2e       	mov	r6, r18
    1212:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
					}
				if(state == B1STOP2 && counter - counterRef > pWait){
    1214:	4e e0       	ldi	r20, 0x0E	; 14
    1216:	64 16       	cp	r6, r20
    1218:	71 04       	cpc	r7, r1
    121a:	61 f4       	brne	.+24     	; 0x1234 <main+0xd18>
    121c:	c2 01       	movw	r24, r4
    121e:	82 19       	sub	r24, r2
    1220:	93 09       	sbc	r25, r3
    1222:	85 36       	cpi	r24, 0x65	; 101
    1224:	91 05       	cpc	r25, r1
    1226:	0c f4       	brge	.+2      	; 0x122a <main+0xd0e>
    1228:	53 c0       	rjmp	.+166    	; 0x12d0 <main+0xdb4>
    122a:	12 01       	movw	r2, r4
    122c:	07 c0       	rjmp	.+14     	; 0x123c <main+0xd20>
    122e:	99 e0       	ldi	r25, 0x09	; 9
    1230:	69 2e       	mov	r6, r25
    1232:	71 2c       	mov	r7, r1
					state = 23;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1234:	57 e1       	ldi	r21, 0x17	; 23
    1236:	65 16       	cp	r6, r21
    1238:	71 04       	cpc	r7, r1
    123a:	61 f4       	brne	.+24     	; 0x1254 <main+0xd38>
    123c:	c2 01       	movw	r24, r4
    123e:	82 19       	sub	r24, r2
    1240:	93 09       	sbc	r25, r3
    1242:	81 5a       	subi	r24, 0xA1	; 161
    1244:	9f 40       	sbci	r25, 0x0F	; 15
    1246:	0c f4       	brge	.+2      	; 0x124a <main+0xd2e>
    1248:	53 c0       	rjmp	.+166    	; 0x12f0 <main+0xdd4>
    124a:	12 01       	movw	r2, r4
    124c:	07 c0       	rjmp	.+14     	; 0x125c <main+0xd40>
    124e:	8a e0       	ldi	r24, 0x0A	; 10
    1250:	68 2e       	mov	r6, r24
    1252:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    1254:	b8 e1       	ldi	r27, 0x18	; 24
    1256:	6b 16       	cp	r6, r27
    1258:	71 04       	cpc	r7, r1
    125a:	61 f4       	brne	.+24     	; 0x1274 <main+0xd58>
    125c:	c2 01       	movw	r24, r4
    125e:	82 19       	sub	r24, r2
    1260:	93 09       	sbc	r25, r3
    1262:	85 36       	cpi	r24, 0x65	; 101
    1264:	91 05       	cpc	r25, r1
    1266:	0c f4       	brge	.+2      	; 0x126a <main+0xd4e>
    1268:	51 c0       	rjmp	.+162    	; 0x130c <main+0xdf0>
    126a:	12 01       	movw	r2, r4
    126c:	07 c0       	rjmp	.+14     	; 0x127c <main+0xd60>
    126e:	0b e0       	ldi	r16, 0x0B	; 11
    1270:	60 2e       	mov	r6, r16
    1272:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    1274:	29 e1       	ldi	r18, 0x19	; 25
    1276:	62 16       	cp	r6, r18
    1278:	71 04       	cpc	r7, r1
    127a:	51 f4       	brne	.+20     	; 0x1290 <main+0xd74>
    127c:	c2 01       	movw	r24, r4
    127e:	82 19       	sub	r24, r2
    1280:	93 09       	sbc	r25, r3
    1282:	81 5a       	subi	r24, 0xA1	; 161
    1284:	9f 40       	sbci	r25, 0x0F	; 15
    1286:	44 f4       	brge	.+16     	; 0x1298 <main+0xd7c>
    1288:	51 c0       	rjmp	.+162    	; 0x132c <main+0xe10>
    128a:	1c e0       	ldi	r17, 0x0C	; 12
    128c:	61 2e       	mov	r6, r17
    128e:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    1290:	4a e1       	ldi	r20, 0x1A	; 26
    1292:	64 16       	cp	r6, r20
    1294:	71 04       	cpc	r7, r1
    1296:	69 f4       	brne	.+26     	; 0x12b2 <main+0xd96>
    1298:	c2 01       	movw	r24, r4
    129a:	82 19       	sub	r24, r2
    129c:	93 09       	sbc	r25, r3
    129e:	81 5a       	subi	r24, 0xA1	; 161
    12a0:	9f 40       	sbci	r25, 0x0F	; 15
    12a2:	0c f4       	brge	.+2      	; 0x12a6 <main+0xd8a>
    12a4:	53 c0       	rjmp	.+166    	; 0x134c <main+0xe30>
    12a6:	58 86       	std	Y+8, r5	; 0x08
    12a8:	4f 82       	std	Y+7, r4	; 0x07
    12aa:	07 c0       	rjmp	.+14     	; 0x12ba <main+0xd9e>
    12ac:	bd e0       	ldi	r27, 0x0D	; 13
    12ae:	6b 2e       	mov	r6, r27
    12b0:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    12b2:	8b e1       	ldi	r24, 0x1B	; 27
    12b4:	68 16       	cp	r6, r24
    12b6:	71 04       	cpc	r7, r1
    12b8:	71 f4       	brne	.+28     	; 0x12d6 <main+0xdba>
    12ba:	c2 01       	movw	r24, r4
    12bc:	af 81       	ldd	r26, Y+7	; 0x07
    12be:	b8 85       	ldd	r27, Y+8	; 0x08
    12c0:	8a 1b       	sub	r24, r26
    12c2:	9b 0b       	sbc	r25, r27
    12c4:	85 36       	cpi	r24, 0x65	; 101
    12c6:	91 05       	cpc	r25, r1
    12c8:	0c f4       	brge	.+2      	; 0x12cc <main+0xdb0>
    12ca:	50 c0       	rjmp	.+160    	; 0x136c <main+0xe50>
    12cc:	12 01       	movw	r2, r4
    12ce:	07 c0       	rjmp	.+14     	; 0x12de <main+0xdc2>
    12d0:	ae e0       	ldi	r26, 0x0E	; 14
    12d2:	6a 2e       	mov	r6, r26
    12d4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    12d6:	bc e1       	ldi	r27, 0x1C	; 28
    12d8:	6b 16       	cp	r6, r27
    12da:	71 04       	cpc	r7, r1
    12dc:	61 f4       	brne	.+24     	; 0x12f6 <main+0xdda>
    12de:	c2 01       	movw	r24, r4
    12e0:	82 19       	sub	r24, r2
    12e2:	93 09       	sbc	r25, r3
    12e4:	85 36       	cpi	r24, 0x65	; 101
    12e6:	91 05       	cpc	r25, r1
    12e8:	0c f4       	brge	.+2      	; 0x12ec <main+0xdd0>
    12ea:	50 c0       	rjmp	.+160    	; 0x138c <main+0xe70>
    12ec:	12 01       	movw	r2, r4
    12ee:	07 c0       	rjmp	.+14     	; 0x12fe <main+0xde2>
    12f0:	f7 e1       	ldi	r31, 0x17	; 23
    12f2:	6f 2e       	mov	r6, r31
    12f4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    12f6:	2d e1       	ldi	r18, 0x1D	; 29
    12f8:	62 16       	cp	r6, r18
    12fa:	71 04       	cpc	r7, r1
    12fc:	51 f4       	brne	.+20     	; 0x1312 <main+0xdf6>
    12fe:	c2 01       	movw	r24, r4
    1300:	82 19       	sub	r24, r2
    1302:	93 09       	sbc	r25, r3
    1304:	81 5a       	subi	r24, 0xA1	; 161
    1306:	9f 40       	sbci	r25, 0x0F	; 15
    1308:	44 f4       	brge	.+16     	; 0x131a <main+0xdfe>
    130a:	50 c0       	rjmp	.+160    	; 0x13ac <main+0xe90>
    130c:	e8 e1       	ldi	r30, 0x18	; 24
    130e:	6e 2e       	mov	r6, r30
    1310:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totalStepLength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1312:	4e e1       	ldi	r20, 0x1E	; 30
    1314:	64 16       	cp	r6, r20
    1316:	71 04       	cpc	r7, r1
    1318:	61 f4       	brne	.+24     	; 0x1332 <main+0xe16>
    131a:	c2 01       	movw	r24, r4
    131c:	82 19       	sub	r24, r2
    131e:	93 09       	sbc	r25, r3
    1320:	81 5a       	subi	r24, 0xA1	; 161
    1322:	9f 40       	sbci	r25, 0x0F	; 15
    1324:	0c f4       	brge	.+2      	; 0x1328 <main+0xe0c>
    1326:	53 c0       	rjmp	.+166    	; 0x13ce <main+0xeb2>
    1328:	12 01       	movw	r2, r4
    132a:	07 c0       	rjmp	.+14     	; 0x133a <main+0xe1e>
    132c:	79 e1       	ldi	r23, 0x19	; 25
    132e:	67 2e       	mov	r6, r23
    1330:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1332:	8f e1       	ldi	r24, 0x1F	; 31
    1334:	68 16       	cp	r6, r24
    1336:	71 04       	cpc	r7, r1
    1338:	61 f4       	brne	.+24     	; 0x1352 <main+0xe36>
    133a:	c2 01       	movw	r24, r4
    133c:	82 19       	sub	r24, r2
    133e:	93 09       	sbc	r25, r3
    1340:	89 5e       	subi	r24, 0xE9	; 233
    1342:	93 40       	sbci	r25, 0x03	; 3
    1344:	0c f4       	brge	.+2      	; 0x1348 <main+0xe2c>
    1346:	5d c1       	rjmp	.+698    	; 0x1602 <main+0x10e6>
    1348:	12 01       	movw	r2, r4
    134a:	07 c0       	rjmp	.+14     	; 0x135a <main+0xe3e>
    134c:	6a e1       	ldi	r22, 0x1A	; 26
    134e:	66 2e       	mov	r6, r22
    1350:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    1352:	b0 e2       	ldi	r27, 0x20	; 32
    1354:	6b 16       	cp	r6, r27
    1356:	71 04       	cpc	r7, r1
    1358:	61 f4       	brne	.+24     	; 0x1372 <main+0xe56>
    135a:	c2 01       	movw	r24, r4
    135c:	82 19       	sub	r24, r2
    135e:	93 09       	sbc	r25, r3
    1360:	81 5a       	subi	r24, 0xA1	; 161
    1362:	9f 40       	sbci	r25, 0x0F	; 15
    1364:	0c f4       	brge	.+2      	; 0x1368 <main+0xe4c>
    1366:	59 c1       	rjmp	.+690    	; 0x161a <main+0x10fe>
    1368:	12 01       	movw	r2, r4
    136a:	07 c0       	rjmp	.+14     	; 0x137a <main+0xe5e>
    136c:	5b e1       	ldi	r21, 0x1B	; 27
    136e:	65 2e       	mov	r6, r21
    1370:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    1372:	31 e2       	ldi	r19, 0x21	; 33
    1374:	63 16       	cp	r6, r19
    1376:	71 04       	cpc	r7, r1
    1378:	61 f4       	brne	.+24     	; 0x1392 <main+0xe76>
    137a:	c2 01       	movw	r24, r4
    137c:	82 19       	sub	r24, r2
    137e:	93 09       	sbc	r25, r3
    1380:	85 36       	cpi	r24, 0x65	; 101
    1382:	91 05       	cpc	r25, r1
    1384:	0c f4       	brge	.+2      	; 0x1388 <main+0xe6c>
    1386:	57 c1       	rjmp	.+686    	; 0x1636 <main+0x111a>
    1388:	12 01       	movw	r2, r4
    138a:	07 c0       	rjmp	.+14     	; 0x139a <main+0xe7e>
    138c:	4c e1       	ldi	r20, 0x1C	; 28
    138e:	64 2e       	mov	r6, r20
    1390:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    1392:	42 e2       	ldi	r20, 0x22	; 34
    1394:	64 16       	cp	r6, r20
    1396:	71 04       	cpc	r7, r1
    1398:	61 f4       	brne	.+24     	; 0x13b2 <main+0xe96>
    139a:	c2 01       	movw	r24, r4
    139c:	82 19       	sub	r24, r2
    139e:	93 09       	sbc	r25, r3
    13a0:	81 5a       	subi	r24, 0xA1	; 161
    13a2:	9f 40       	sbci	r25, 0x0F	; 15
    13a4:	0c f4       	brge	.+2      	; 0x13a8 <main+0xe8c>
    13a6:	59 c1       	rjmp	.+690    	; 0x165a <main+0x113e>
    13a8:	12 01       	movw	r2, r4
    13aa:	07 c0       	rjmp	.+14     	; 0x13ba <main+0xe9e>
    13ac:	3d e1       	ldi	r19, 0x1D	; 29
    13ae:	63 2e       	mov	r6, r19
    13b0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    13b2:	83 e2       	ldi	r24, 0x23	; 35
    13b4:	68 16       	cp	r6, r24
    13b6:	71 04       	cpc	r7, r1
    13b8:	69 f4       	brne	.+26     	; 0x13d4 <main+0xeb8>
    13ba:	c2 01       	movw	r24, r4
    13bc:	82 19       	sub	r24, r2
    13be:	93 09       	sbc	r25, r3
    13c0:	0b 97       	sbiw	r24, 0x0b	; 11
    13c2:	0c f4       	brge	.+2      	; 0x13c6 <main+0xeaa>
    13c4:	57 c1       	rjmp	.+686    	; 0x1674 <main+0x1158>
    13c6:	24 e2       	ldi	r18, 0x24	; 36
    13c8:	62 2e       	mov	r6, r18
    13ca:	71 2c       	mov	r7, r1
    13cc:	69 c1       	rjmp	.+722    	; 0x16a0 <main+0x1184>
    13ce:	9e e1       	ldi	r25, 0x1E	; 30
    13d0:	69 2e       	mov	r6, r25
    13d2:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    13d4:	f3 01       	movw	r30, r6
    13d6:	e4 32       	cpi	r30, 0x24	; 36
    13d8:	f1 05       	cpc	r31, r1
    13da:	08 f0       	brcs	.+2      	; 0x13de <main+0xec2>
    13dc:	61 c1       	rjmp	.+706    	; 0x16a0 <main+0x1184>
    13de:	e0 59       	subi	r30, 0x90	; 144
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	ee 0f       	add	r30, r30
    13e4:	ff 1f       	adc	r31, r31
    13e6:	05 90       	lpm	r0, Z+
    13e8:	f4 91       	lpm	r31, Z+
    13ea:	e0 2d       	mov	r30, r0
    13ec:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    13ee:	80 91 70 03 	lds	r24, 0x0370
    13f2:	90 91 6c 03 	lds	r25, 0x036C
    13f6:	20 91 6e 03 	lds	r18, 0x036E
    13fa:	82 ff       	sbrs	r24, 2
    13fc:	08 c0       	rjmp	.+16     	; 0x140e <main+0xef2>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    13fe:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1400:	27 7f       	andi	r18, 0xF7	; 247
    1402:	20 93 6e 03 	sts	0x036E, r18
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1406:	90 62       	ori	r25, 0x20	; 32
    1408:	90 93 6c 03 	sts	0x036C, r25
    140c:	49 c1       	rjmp	.+658    	; 0x16a0 <main+0x1184>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    140e:	9f 7d       	andi	r25, 0xDF	; 223
    1410:	90 93 6c 03 	sts	0x036C, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1414:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1416:	28 60       	ori	r18, 0x08	; 8
    1418:	20 93 6e 03 	sts	0x036E, r18
						if(print0 == 1){
    141c:	21 96       	adiw	r28, 0x01	; 1
    141e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1420:	bf ad       	ldd	r27, Y+63	; 0x3f
    1422:	21 97       	sbiw	r28, 0x01	; 1
    1424:	11 97       	sbiw	r26, 0x01	; 1
    1426:	09 f0       	breq	.+2      	; 0x142a <main+0xf0e>
    1428:	47 c0       	rjmp	.+142    	; 0x14b8 <main+0xf9c>
							OrangutanLCD::gotoXY(0,1);
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	61 e0       	ldi	r22, 0x01	; 1
    142e:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1432:	8e e1       	ldi	r24, 0x1E	; 30
    1434:	93 e0       	ldi	r25, 0x03	; 3
    1436:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
    143a:	21 96       	adiw	r28, 0x01	; 1
    143c:	1f ae       	std	Y+63, r1	; 0x3f
    143e:	1e ae       	std	Y+62, r1	; 0x3e
    1440:	21 97       	sbiw	r28, 0x01	; 1
    1442:	3a c0       	rjmp	.+116    	; 0x14b8 <main+0xf9c>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1444:	20 91 6e 03 	lds	r18, 0x036E
    1448:	32 2f       	mov	r19, r18
    144a:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    144c:	c2 01       	movw	r24, r4
    144e:	68 ec       	ldi	r22, 0xC8	; 200
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__divmodhi4>
    1456:	84 36       	cpi	r24, 0x64	; 100
    1458:	91 05       	cpc	r25, r1
    145a:	24 f4       	brge	.+8      	; 0x1464 <main+0xf48>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    145c:	2c 7f       	andi	r18, 0xFC	; 252
    145e:	20 93 6e 03 	sts	0x036E, r18
    1462:	03 c0       	rjmp	.+6      	; 0x146a <main+0xf4e>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1464:	32 60       	ori	r19, 0x02	; 2
    1466:	30 93 6e 03 	sts	0x036E, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    146a:	80 91 6c 03 	lds	r24, 0x036C
    146e:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1470:	84 60       	ori	r24, 0x04	; 4
    1472:	80 93 6c 03 	sts	0x036C, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1476:	80 91 6e 03 	lds	r24, 0x036E
    147a:	8b 7f       	andi	r24, 0xFB	; 251
    147c:	80 93 6e 03 	sts	0x036E, r24
    1480:	21 e0       	ldi	r18, 0x01	; 1
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	3e a7       	std	Y+46, r19	; 0x2e
    1486:	2d a7       	std	Y+45, r18	; 0x2d
    1488:	0b c1       	rjmp	.+534    	; 0x16a0 <main+0x1184>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    148a:	80 91 6e 03 	lds	r24, 0x036E
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    148e:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1490:	86 61       	ori	r24, 0x16	; 22
    1492:	80 93 6e 03 	sts	0x036E, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1496:	80 91 6c 03 	lds	r24, 0x036C
    149a:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    149c:	8b 7f       	andi	r24, 0xFB	; 251
    149e:	80 93 6c 03 	sts	0x036C, r24
    14a2:	fc c0       	rjmp	.+504    	; 0x169c <main+0x1180>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    14a4:	80 91 6c 03 	lds	r24, 0x036C
    14a8:	8f 7d       	andi	r24, 0xDF	; 223
    14aa:	80 93 6c 03 	sts	0x036C, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    14ae:	80 91 6e 03 	lds	r24, 0x036E
    14b2:	88 60       	ori	r24, 0x08	; 8
    14b4:	80 93 6e 03 	sts	0x036E, r24
    14b8:	18 a2       	std	Y+32, r1	; 0x20
    14ba:	1f 8e       	std	Y+31, r1	; 0x1f
    14bc:	f1 c0       	rjmp	.+482    	; 0x16a0 <main+0x1184>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    14be:	80 91 6e 03 	lds	r24, 0x036E
    14c2:	8f 7e       	andi	r24, 0xEF	; 239
    14c4:	80 93 6e 03 	sts	0x036E, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    14c8:	80 91 6c 03 	lds	r24, 0x036C
    14cc:	80 62       	ori	r24, 0x20	; 32
    14ce:	80 93 6c 03 	sts	0x036C, r24
    14d2:	e6 c0       	rjmp	.+460    	; 0x16a0 <main+0x1184>
				//*********************************************
					break;
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    14d4:	80 91 6c 03 	lds	r24, 0x036C
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    14d8:	80 63       	ori	r24, 0x30	; 48
    14da:	80 93 6c 03 	sts	0x036C, r24
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	98 a3       	std	Y+32, r25	; 0x20
    14e4:	8f 8f       	std	Y+31, r24	; 0x1f
    14e6:	dc c0       	rjmp	.+440    	; 0x16a0 <main+0x1184>
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    14e8:	80 91 6d 03 	lds	r24, 0x036D
    14ec:	81 60       	ori	r24, 0x01	; 1
    14ee:	80 93 6d 03 	sts	0x036D, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    14f2:	80 91 6c 03 	lds	r24, 0x036C
    14f6:	8f 77       	andi	r24, 0x7F	; 127
    14f8:	80 93 6c 03 	sts	0x036C, r24
    14fc:	dd cf       	rjmp	.-70     	; 0x14b8 <main+0xf9c>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    14fe:	80 91 6e 03 	lds	r24, 0x036E
    1502:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    1504:	8f 7d       	andi	r24, 0xDF	; 223
    1506:	80 93 6e 03 	sts	0x036E, r24
    150a:	a1 e0       	ldi	r26, 0x01	; 1
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	b8 8b       	std	Y+16, r27	; 0x10
    1510:	af 87       	std	Y+15, r26	; 0x0f
    1512:	c6 c0       	rjmp	.+396    	; 0x16a0 <main+0x1184>
					break;
				case CLEAN1_1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1514:	80 91 6c 03 	lds	r24, 0x036C
    1518:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    151a:	8f 7e       	andi	r24, 0xEF	; 239
    151c:	80 93 6c 03 	sts	0x036C, r24
    1520:	2b c0       	rjmp	.+86     	; 0x1578 <main+0x105c>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1522:	80 91 6c 03 	lds	r24, 0x036C
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1526:	80 63       	ori	r24, 0x30	; 48
    1528:	36 c0       	rjmp	.+108    	; 0x1596 <main+0x107a>
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    152a:	80 91 6c 03 	lds	r24, 0x036C
    152e:	8f 77       	andi	r24, 0x7F	; 127
    1530:	80 93 6c 03 	sts	0x036C, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1534:	80 91 6e 03 	lds	r24, 0x036E
    1538:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    153a:	8f 7d       	andi	r24, 0xDF	; 223
    153c:	80 93 6e 03 	sts	0x036E, r24
    1540:	18 a2       	std	Y+32, r1	; 0x20
    1542:	1f 8e       	std	Y+31, r1	; 0x1f
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	98 8b       	std	Y+16, r25	; 0x10
    154a:	8f 87       	std	Y+15, r24	; 0x0f
    154c:	a9 c0       	rjmp	.+338    	; 0x16a0 <main+0x1184>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    154e:	80 91 6e 03 	lds	r24, 0x036E
    1552:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1554:	80 62       	ori	r24, 0x20	; 32
    1556:	80 93 6e 03 	sts	0x036E, r24
    155a:	18 a2       	std	Y+32, r1	; 0x20
    155c:	1f 8e       	std	Y+31, r1	; 0x1f
    155e:	18 8a       	std	Y+16, r1	; 0x10
    1560:	1f 86       	std	Y+15, r1	; 0x0f
    1562:	9e c0       	rjmp	.+316    	; 0x16a0 <main+0x1184>
				
					break;
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1564:	80 91 6c 03 	lds	r24, 0x036C
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1568:	80 63       	ori	r24, 0x30	; 48
    156a:	80 93 6c 03 	sts	0x036C, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    156e:	80 91 6d 03 	lds	r24, 0x036D
    1572:	8e 7f       	andi	r24, 0xFE	; 254
    1574:	80 93 6d 03 	sts	0x036D, r24
    1578:	21 e0       	ldi	r18, 0x01	; 1
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	38 a3       	std	Y+32, r19	; 0x20
    157e:	2f 8f       	std	Y+31, r18	; 0x1f
    1580:	8f c0       	rjmp	.+286    	; 0x16a0 <main+0x1184>
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1582:	80 91 6f 03 	lds	r24, 0x036F
    1586:	87 7f       	andi	r24, 0xF7	; 247
    1588:	80 93 6f 03 	sts	0x036F, r24
    158c:	95 cf       	rjmp	.-214    	; 0x14b8 <main+0xf9c>
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    158e:	80 91 6c 03 	lds	r24, 0x036C
    1592:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1594:	80 62       	ori	r24, 0x20	; 32
    1596:	80 93 6c 03 	sts	0x036C, r24
    159a:	41 e0       	ldi	r20, 0x01	; 1
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	58 a3       	std	Y+32, r21	; 0x20
    15a0:	4f 8f       	std	Y+31, r20	; 0x1f
    15a2:	7e c0       	rjmp	.+252    	; 0x16a0 <main+0x1184>
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    15a4:	80 91 6f 03 	lds	r24, 0x036F
    15a8:	88 60       	ori	r24, 0x08	; 8
    15aa:	10 c0       	rjmp	.+32     	; 0x15cc <main+0x10b0>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    15ac:	80 91 6d 03 	lds	r24, 0x036D
    15b0:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    15b2:	8f 7d       	andi	r24, 0xDF	; 223
    15b4:	80 93 6d 03 	sts	0x036D, r24
    15b8:	18 a2       	std	Y+32, r1	; 0x20
    15ba:	1f 8e       	std	Y+31, r1	; 0x1f
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	98 8f       	std	Y+24, r25	; 0x18
    15c2:	8f 8b       	std	Y+23, r24	; 0x17
    15c4:	6d c0       	rjmp	.+218    	; 0x16a0 <main+0x1184>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    15c6:	80 91 6f 03 	lds	r24, 0x036F
    15ca:	8d 7f       	andi	r24, 0xFD	; 253
    15cc:	80 93 6f 03 	sts	0x036F, r24
    15d0:	67 c0       	rjmp	.+206    	; 0x16a0 <main+0x1184>
					break;
				case DRY2:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    15d2:	80 91 6c 03 	lds	r24, 0x036C
    15d6:	80 62       	ori	r24, 0x20	; 32
    15d8:	80 93 6c 03 	sts	0x036C, r24
    15dc:	a1 e0       	ldi	r26, 0x01	; 1
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	b8 a3       	std	Y+32, r27	; 0x20
    15e2:	af 8f       	std	Y+31, r26	; 0x1f
    15e4:	5d c0       	rjmp	.+186    	; 0x16a0 <main+0x1184>
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    15e6:	80 91 6d 03 	lds	r24, 0x036D
    15ea:	8f 7b       	andi	r24, 0xBF	; 191
    15ec:	80 93 6d 03 	sts	0x036D, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    15f0:	80 91 6f 03 	lds	r24, 0x036F
    15f4:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    15f6:	8b 7f       	andi	r24, 0xFB	; 251
    15f8:	80 93 6f 03 	sts	0x036F, r24
    15fc:	18 8e       	std	Y+24, r1	; 0x18
    15fe:	1f 8a       	std	Y+23, r1	; 0x17
    1600:	4f c0       	rjmp	.+158    	; 0x16a0 <main+0x1184>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1602:	80 91 6e 03 	lds	r24, 0x036E
    1606:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1608:	80 61       	ori	r24, 0x10	; 16
    160a:	80 93 6e 03 	sts	0x036E, r24
    160e:	18 a2       	std	Y+32, r1	; 0x20
    1610:	1f 8e       	std	Y+31, r1	; 0x1f
    1612:	8f e1       	ldi	r24, 0x1F	; 31
    1614:	68 2e       	mov	r6, r24
    1616:	71 2c       	mov	r7, r1
    1618:	43 c0       	rjmp	.+134    	; 0x16a0 <main+0x1184>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    161a:	80 91 6c 03 	lds	r24, 0x036C
    161e:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1620:	80 62       	ori	r24, 0x20	; 32
    1622:	80 93 6c 03 	sts	0x036C, r24
    1626:	21 e0       	ldi	r18, 0x01	; 1
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	38 a3       	std	Y+32, r19	; 0x20
    162c:	2f 8f       	std	Y+31, r18	; 0x1f
    162e:	00 e2       	ldi	r16, 0x20	; 32
    1630:	60 2e       	mov	r6, r16
    1632:	71 2c       	mov	r7, r1
    1634:	35 c0       	rjmp	.+106    	; 0x16a0 <main+0x1184>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1636:	80 91 6c 03 	lds	r24, 0x036C
    163a:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    163c:	84 60       	ori	r24, 0x04	; 4
    163e:	80 93 6c 03 	sts	0x036C, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1642:	80 91 6e 03 	lds	r24, 0x036E
    1646:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1648:	8f 7e       	andi	r24, 0xEF	; 239
    164a:	80 93 6e 03 	sts	0x036E, r24
    164e:	18 a2       	std	Y+32, r1	; 0x20
    1650:	1f 8e       	std	Y+31, r1	; 0x1f
    1652:	11 e2       	ldi	r17, 0x21	; 33
    1654:	61 2e       	mov	r6, r17
    1656:	71 2c       	mov	r7, r1
    1658:	23 c0       	rjmp	.+70     	; 0x16a0 <main+0x1184>
					break;
    165a:	b2 e2       	ldi	r27, 0x22	; 34
    165c:	6b 2e       	mov	r6, r27
    165e:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1660:	80 91 6c 03 	lds	r24, 0x036C
    1664:	8d 7f       	andi	r24, 0xFD	; 253
    1666:	80 93 6c 03 	sts	0x036C, r24
    166a:	41 e0       	ldi	r20, 0x01	; 1
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	5e a7       	std	Y+46, r21	; 0x2e
    1670:	4d a7       	std	Y+45, r20	; 0x2d
    1672:	16 c0       	rjmp	.+44     	; 0x16a0 <main+0x1184>
					plateLoadMotor = 1;
					break;
    1674:	a3 e2       	ldi	r26, 0x23	; 35
    1676:	6a 2e       	mov	r6, r26
    1678:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    167a:	80 91 6c 03 	lds	r24, 0x036C
    167e:	8b 7f       	andi	r24, 0xFB	; 251
    1680:	80 93 6c 03 	sts	0x036C, r24
					if(print35 == 1){
    1684:	8d ad       	ldd	r24, Y+61	; 0x3d
    1686:	9e ad       	ldd	r25, Y+62	; 0x3e
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	41 f4       	brne	.+16     	; 0x169c <main+0x1180>
						OrangutanLCD::clear();
    168c:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1690:	8c e2       	ldi	r24, 0x2C	; 44
    1692:	93 e0       	ldi	r25, 0x03	; 3
    1694:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
    1698:	1e ae       	std	Y+62, r1	; 0x3e
    169a:	1d ae       	std	Y+61, r1	; 0x3d
    169c:	1e a6       	std	Y+46, r1	; 0x2e
    169e:	1d a6       	std	Y+45, r1	; 0x2d
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    16a0:	ad b7       	in	r26, 0x3d	; 61
    16a2:	be b7       	in	r27, 0x3e	; 62
    16a4:	52 97       	sbiw	r26, 0x12	; 18
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	be bf       	out	0x3e, r27	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	ad bf       	out	0x3d, r26	; 61
    16b0:	ed b7       	in	r30, 0x3d	; 61
    16b2:	fe b7       	in	r31, 0x3e	; 62
    16b4:	31 96       	adiw	r30, 0x01	; 1
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	12 96       	adiw	r26, 0x02	; 2
    16bc:	9c 93       	st	X, r25
    16be:	8e 93       	st	-X, r24
    16c0:	11 97       	sbiw	r26, 0x01	; 1
    16c2:	93 83       	std	Z+3, r25	; 0x03
    16c4:	82 83       	std	Z+2, r24	; 0x02
    16c6:	95 83       	std	Z+5, r25	; 0x05
    16c8:	84 83       	std	Z+4, r24	; 0x04
    16ca:	97 83       	std	Z+7, r25	; 0x07
    16cc:	86 83       	std	Z+6, r24	; 0x06
    16ce:	21 e0       	ldi	r18, 0x01	; 1
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	31 87       	std	Z+9, r19	; 0x09
    16d4:	20 87       	std	Z+8, r18	; 0x08
    16d6:	33 87       	std	Z+11, r19	; 0x0b
    16d8:	22 87       	std	Z+10, r18	; 0x0a
    16da:	35 87       	std	Z+13, r19	; 0x0d
    16dc:	24 87       	std	Z+12, r18	; 0x0c
    16de:	37 87       	std	Z+15, r19	; 0x0f
    16e0:	26 87       	std	Z+14, r18	; 0x0e
    16e2:	31 8b       	std	Z+17, r19	; 0x11
    16e4:	20 8b       	std	Z+16, r18	; 0x10
    16e6:	c2 01       	movw	r24, r4
    16e8:	b1 01       	movw	r22, r2
    16ea:	4f 81       	ldd	r20, Y+7	; 0x07
    16ec:	58 85       	ldd	r21, Y+8	; 0x08
    16ee:	2d a5       	ldd	r18, Y+45	; 0x2d
    16f0:	3e a5       	ldd	r19, Y+46	; 0x2e
    16f2:	0f 8d       	ldd	r16, Y+31	; 0x1f
    16f4:	18 a1       	ldd	r17, Y+32	; 0x20
    16f6:	ef 84       	ldd	r14, Y+15	; 0x0f
    16f8:	f8 88       	ldd	r15, Y+16	; 0x10
    16fa:	cc 24       	eor	r12, r12
    16fc:	dd 24       	eor	r13, r13
    16fe:	af 88       	ldd	r10, Y+23	; 0x17
    1700:	b8 8c       	ldd	r11, Y+24	; 0x18
    1702:	f2 e0       	ldi	r31, 0x02	; 2
    1704:	8f 2e       	mov	r8, r31
    1706:	91 2c       	mov	r9, r1
    1708:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    170c:	4d b7       	in	r20, 0x3d	; 61
    170e:	5e b7       	in	r21, 0x3e	; 62
    1710:	4e 5e       	subi	r20, 0xEE	; 238
    1712:	5f 4f       	sbci	r21, 0xFF	; 255
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	5e bf       	out	0x3e, r21	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	4d bf       	out	0x3d, r20	; 61
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("FIRST B");
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1726:	54 e2       	ldi	r21, 0x24	; 36
    1728:	65 16       	cp	r6, r21
    172a:	71 04       	cpc	r7, r1
    172c:	11 f4       	brne	.+4      	; 0x1732 <main+0x1216>
    172e:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <main+0x2b9c>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    1732:	08 94       	sec
    1734:	41 1c       	adc	r4, r1
    1736:	51 1c       	adc	r5, r1
    1738:	7d cc       	rjmp	.-1798   	; 0x1034 <main+0xb18>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
    1740:	88 23       	and	r24, r24
    1742:	11 f0       	breq	.+4      	; 0x1748 <main+0x122c>
    1744:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <main+0x2bfc>
			OrangutanLCD::gotoXY(7,0);
    1748:	87 e0       	ldi	r24, 0x07	; 7
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("SECOND B");
    1750:	89 e3       	ldi	r24, 0x39	; 57
    1752:	93 e0       	ldi	r25, 0x03	; 3
    1754:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
			OrangutanLCD::print("DEBUG");
    1758:	81 e1       	ldi	r24, 0x11	; 17
    175a:	93 e0       	ldi	r25, 0x03	; 3
    175c:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1760:	80 91 6c 03 	lds	r24, 0x036C
    1764:	80 62       	ori	r24, 0x20	; 32
    1766:	80 93 6c 03 	sts	0x036C, r24
    176a:	1e 82       	std	Y+6, r1	; 0x06
    176c:	1d 82       	std	Y+5, r1	; 0x05
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9a af       	std	Y+58, r25	; 0x3a
    1774:	89 af       	std	Y+57, r24	; 0x39
    1776:	9c ab       	std	Y+52, r25	; 0x34
    1778:	8b ab       	std	Y+51, r24	; 0x33
    177a:	66 24       	eor	r6, r6
    177c:	77 24       	eor	r7, r7
    177e:	1c a6       	std	Y+44, r1	; 0x2c
    1780:	1b a6       	std	Y+43, r1	; 0x2b
    1782:	1e a2       	std	Y+38, r1	; 0x26
    1784:	1d a2       	std	Y+37, r1	; 0x25
    1786:	9e 8f       	std	Y+30, r25	; 0x1e
    1788:	8d 8f       	std	Y+29, r24	; 0x1d
    178a:	1e 8a       	std	Y+22, r1	; 0x16
    178c:	1d 8a       	std	Y+21, r1	; 0x15
    178e:	44 24       	eor	r4, r4
    1790:	55 24       	eor	r5, r5
    1792:	22 24       	eor	r2, r2
    1794:	33 24       	eor	r3, r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1796:	84 e4       	ldi	r24, 0x44	; 68
    1798:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    17a2:	85 e4       	ldi	r24, 0x45	; 69
    17a4:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    17a8:	0e 94 1f 19 	call	0x323e	; 0x323e <_Z11i2c_readAckv>
    17ac:	80 93 70 03 	sts	0x0370, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    17b0:	0e 94 29 19 	call	0x3252	; 0x3252 <_Z11i2c_readNakv>
    17b4:	80 93 71 03 	sts	0x0371, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    17b8:	0e 94 05 19 	call	0x320a	; 0x320a <_Z8i2c_stopv>
				
				if(state != INIT){
    17bc:	61 14       	cp	r6, r1
    17be:	71 04       	cpc	r7, r1
    17c0:	79 f0       	breq	.+30     	; 0x17e0 <main+0x12c4>
					OrangutanLCD::gotoXY(0,1);
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    17ca:	87 e1       	ldi	r24, 0x17	; 23
    17cc:	93 e0       	ldi	r25, 0x03	; 3
    17ce:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
    17d2:	b3 01       	movw	r22, r6
    17d4:	88 27       	eor	r24, r24
    17d6:	77 fd       	sbrc	r23, 7
    17d8:	80 95       	com	r24
    17da:	98 2f       	mov	r25, r24
    17dc:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_ZN12OrangutanLCD5printEl>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    17e0:	c2 01       	movw	r24, r4
    17e2:	be 01       	movw	r22, r28
    17e4:	6f 5f       	subi	r22, 0xFF	; 255
    17e6:	7f 4f       	sbci	r23, 0xFF	; 255
    17e8:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    17ec:	61 14       	cp	r6, r1
    17ee:	71 04       	cpc	r7, r1
    17f0:	21 f4       	brne	.+8      	; 0x17fa <main+0x12de>
    17f2:	88 23       	and	r24, r24
    17f4:	e1 f1       	breq	.+120    	; 0x186e <main+0x1352>
    17f6:	12 01       	movw	r2, r4
    17f8:	04 c0       	rjmp	.+8      	; 0x1802 <main+0x12e6>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    17fa:	91 e0       	ldi	r25, 0x01	; 1
    17fc:	69 16       	cp	r6, r25
    17fe:	71 04       	cpc	r7, r1
    1800:	41 f4       	brne	.+16     	; 0x1812 <main+0x12f6>
    1802:	c2 01       	movw	r24, r4
    1804:	82 19       	sub	r24, r2
    1806:	93 09       	sbc	r25, r3
    1808:	81 5a       	subi	r24, 0xA1	; 161
    180a:	9f 40       	sbci	r25, 0x0F	; 15
    180c:	ec f1       	brlt	.+122    	; 0x1888 <main+0x136c>
    180e:	12 01       	movw	r2, r4
    1810:	04 c0       	rjmp	.+8      	; 0x181a <main+0x12fe>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    1812:	b2 e0       	ldi	r27, 0x02	; 2
    1814:	6b 16       	cp	r6, r27
    1816:	71 04       	cpc	r7, r1
    1818:	49 f4       	brne	.+18     	; 0x182c <main+0x1310>
    181a:	c2 01       	movw	r24, r4
    181c:	82 19       	sub	r24, r2
    181e:	93 09       	sbc	r25, r3
    1820:	85 36       	cpi	r24, 0x65	; 101
    1822:	91 05       	cpc	r25, r1
    1824:	0c f4       	brge	.+2      	; 0x1828 <main+0x130c>
    1826:	40 c0       	rjmp	.+128    	; 0x18a8 <main+0x138c>
    1828:	12 01       	movw	r2, r4
    182a:	04 c0       	rjmp	.+8      	; 0x1834 <main+0x1318>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    182c:	23 e0       	ldi	r18, 0x03	; 3
    182e:	62 16       	cp	r6, r18
    1830:	71 04       	cpc	r7, r1
    1832:	31 f4       	brne	.+12     	; 0x1840 <main+0x1324>
    1834:	80 91 70 03 	lds	r24, 0x0370
    1838:	81 fd       	sbrc	r24, 1
    183a:	46 c0       	rjmp	.+140    	; 0x18c8 <main+0x13ac>
    183c:	12 01       	movw	r2, r4
    183e:	04 c0       	rjmp	.+8      	; 0x1848 <main+0x132c>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    1840:	34 e0       	ldi	r19, 0x04	; 4
    1842:	63 16       	cp	r6, r19
    1844:	71 04       	cpc	r7, r1
    1846:	31 f4       	brne	.+12     	; 0x1854 <main+0x1338>
    1848:	80 91 70 03 	lds	r24, 0x0370
    184c:	83 fd       	sbrc	r24, 3
    184e:	4c c0       	rjmp	.+152    	; 0x18e8 <main+0x13cc>
    1850:	12 01       	movw	r2, r4
    1852:	04 c0       	rjmp	.+8      	; 0x185c <main+0x1340>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    1854:	45 e0       	ldi	r20, 0x05	; 5
    1856:	64 16       	cp	r6, r20
    1858:	71 04       	cpc	r7, r1
    185a:	49 f4       	brne	.+18     	; 0x186e <main+0x1352>
    185c:	c2 01       	movw	r24, r4
    185e:	82 19       	sub	r24, r2
    1860:	93 09       	sbc	r25, r3
    1862:	85 36       	cpi	r24, 0x65	; 101
    1864:	91 05       	cpc	r25, r1
    1866:	0c f4       	brge	.+2      	; 0x186a <main+0x134e>
    1868:	4f c0       	rjmp	.+158    	; 0x1908 <main+0x13ec>
    186a:	12 01       	movw	r2, r4
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <main+0x135a>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    186e:	56 e0       	ldi	r21, 0x06	; 6
    1870:	65 16       	cp	r6, r21
    1872:	71 04       	cpc	r7, r1
    1874:	61 f4       	brne	.+24     	; 0x188e <main+0x1372>
    1876:	c2 01       	movw	r24, r4
    1878:	82 19       	sub	r24, r2
    187a:	93 09       	sbc	r25, r3
    187c:	81 5a       	subi	r24, 0xA1	; 161
    187e:	9f 40       	sbci	r25, 0x0F	; 15
    1880:	0c f4       	brge	.+2      	; 0x1884 <main+0x1368>
    1882:	52 c0       	rjmp	.+164    	; 0x1928 <main+0x140c>
    1884:	12 01       	movw	r2, r4
    1886:	07 c0       	rjmp	.+14     	; 0x1896 <main+0x137a>
    1888:	e1 e0       	ldi	r30, 0x01	; 1
    188a:	6e 2e       	mov	r6, r30
    188c:	71 2c       	mov	r7, r1
					state = B2SET;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    188e:	bf e0       	ldi	r27, 0x0F	; 15
    1890:	6b 16       	cp	r6, r27
    1892:	71 04       	cpc	r7, r1
    1894:	61 f4       	brne	.+24     	; 0x18ae <main+0x1392>
    1896:	c2 01       	movw	r24, r4
    1898:	82 19       	sub	r24, r2
    189a:	93 09       	sbc	r25, r3
    189c:	85 36       	cpi	r24, 0x65	; 101
    189e:	91 05       	cpc	r25, r1
    18a0:	0c f4       	brge	.+2      	; 0x18a4 <main+0x1388>
    18a2:	52 c0       	rjmp	.+164    	; 0x1948 <main+0x142c>
    18a4:	12 01       	movw	r2, r4
    18a6:	07 c0       	rjmp	.+14     	; 0x18b6 <main+0x139a>
    18a8:	72 e0       	ldi	r23, 0x02	; 2
    18aa:	67 2e       	mov	r6, r23
    18ac:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    18ae:	20 e1       	ldi	r18, 0x10	; 16
    18b0:	62 16       	cp	r6, r18
    18b2:	71 04       	cpc	r7, r1
    18b4:	61 f4       	brne	.+24     	; 0x18ce <main+0x13b2>
    18b6:	c2 01       	movw	r24, r4
    18b8:	82 19       	sub	r24, r2
    18ba:	93 09       	sbc	r25, r3
    18bc:	85 36       	cpi	r24, 0x65	; 101
    18be:	91 05       	cpc	r25, r1
    18c0:	0c f4       	brge	.+2      	; 0x18c4 <main+0x13a8>
    18c2:	52 c0       	rjmp	.+164    	; 0x1968 <main+0x144c>
    18c4:	12 01       	movw	r2, r4
    18c6:	07 c0       	rjmp	.+14     	; 0x18d6 <main+0x13ba>
    18c8:	63 e0       	ldi	r22, 0x03	; 3
    18ca:	66 2e       	mov	r6, r22
    18cc:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    18ce:	31 e1       	ldi	r19, 0x11	; 17
    18d0:	63 16       	cp	r6, r19
    18d2:	71 04       	cpc	r7, r1
    18d4:	61 f4       	brne	.+24     	; 0x18ee <main+0x13d2>
    18d6:	c2 01       	movw	r24, r4
    18d8:	82 19       	sub	r24, r2
    18da:	93 09       	sbc	r25, r3
    18dc:	81 5d       	subi	r24, 0xD1	; 209
    18de:	97 40       	sbci	r25, 0x07	; 7
    18e0:	0c f4       	brge	.+2      	; 0x18e4 <main+0x13c8>
    18e2:	52 c0       	rjmp	.+164    	; 0x1988 <main+0x146c>
    18e4:	12 01       	movw	r2, r4
    18e6:	07 c0       	rjmp	.+14     	; 0x18f6 <main+0x13da>
    18e8:	54 e0       	ldi	r21, 0x04	; 4
    18ea:	65 2e       	mov	r6, r21
    18ec:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    18ee:	52 e1       	ldi	r21, 0x12	; 18
    18f0:	65 16       	cp	r6, r21
    18f2:	71 04       	cpc	r7, r1
    18f4:	61 f4       	brne	.+24     	; 0x190e <main+0x13f2>
    18f6:	c2 01       	movw	r24, r4
    18f8:	82 19       	sub	r24, r2
    18fa:	93 09       	sbc	r25, r3
    18fc:	85 36       	cpi	r24, 0x65	; 101
    18fe:	91 05       	cpc	r25, r1
    1900:	0c f4       	brge	.+2      	; 0x1904 <main+0x13e8>
    1902:	52 c0       	rjmp	.+164    	; 0x19a8 <main+0x148c>
    1904:	12 01       	movw	r2, r4
    1906:	07 c0       	rjmp	.+14     	; 0x1916 <main+0x13fa>
    1908:	45 e0       	ldi	r20, 0x05	; 5
    190a:	64 2e       	mov	r6, r20
    190c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    190e:	83 e1       	ldi	r24, 0x13	; 19
    1910:	68 16       	cp	r6, r24
    1912:	71 04       	cpc	r7, r1
    1914:	61 f4       	brne	.+24     	; 0x192e <main+0x1412>
    1916:	c2 01       	movw	r24, r4
    1918:	82 19       	sub	r24, r2
    191a:	93 09       	sbc	r25, r3
    191c:	81 5d       	subi	r24, 0xD1	; 209
    191e:	97 40       	sbci	r25, 0x07	; 7
    1920:	0c f4       	brge	.+2      	; 0x1924 <main+0x1408>
    1922:	52 c0       	rjmp	.+164    	; 0x19c8 <main+0x14ac>
    1924:	12 01       	movw	r2, r4
    1926:	07 c0       	rjmp	.+14     	; 0x1936 <main+0x141a>
    1928:	36 e0       	ldi	r19, 0x06	; 6
    192a:	63 2e       	mov	r6, r19
    192c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    192e:	b4 e1       	ldi	r27, 0x14	; 20
    1930:	6b 16       	cp	r6, r27
    1932:	71 04       	cpc	r7, r1
    1934:	61 f4       	brne	.+24     	; 0x194e <main+0x1432>
    1936:	c2 01       	movw	r24, r4
    1938:	82 19       	sub	r24, r2
    193a:	93 09       	sbc	r25, r3
    193c:	85 36       	cpi	r24, 0x65	; 101
    193e:	91 05       	cpc	r25, r1
    1940:	0c f4       	brge	.+2      	; 0x1944 <main+0x1428>
    1942:	50 c0       	rjmp	.+160    	; 0x19e4 <main+0x14c8>
    1944:	12 01       	movw	r2, r4
    1946:	07 c0       	rjmp	.+14     	; 0x1956 <main+0x143a>
    1948:	2f e0       	ldi	r18, 0x0F	; 15
    194a:	62 2e       	mov	r6, r18
    194c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    194e:	25 e1       	ldi	r18, 0x15	; 21
    1950:	62 16       	cp	r6, r18
    1952:	71 04       	cpc	r7, r1
    1954:	61 f4       	brne	.+24     	; 0x196e <main+0x1452>
    1956:	c2 01       	movw	r24, r4
    1958:	82 19       	sub	r24, r2
    195a:	93 09       	sbc	r25, r3
    195c:	81 5d       	subi	r24, 0xD1	; 209
    195e:	97 40       	sbci	r25, 0x07	; 7
    1960:	0c f4       	brge	.+2      	; 0x1964 <main+0x1448>
    1962:	51 c0       	rjmp	.+162    	; 0x1a06 <main+0x14ea>
    1964:	12 01       	movw	r2, r4
    1966:	07 c0       	rjmp	.+14     	; 0x1976 <main+0x145a>
    1968:	90 e1       	ldi	r25, 0x10	; 16
    196a:	69 2e       	mov	r6, r25
    196c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    196e:	46 e1       	ldi	r20, 0x16	; 22
    1970:	64 16       	cp	r6, r20
    1972:	71 04       	cpc	r7, r1
    1974:	61 f4       	brne	.+24     	; 0x198e <main+0x1472>
    1976:	c2 01       	movw	r24, r4
    1978:	82 19       	sub	r24, r2
    197a:	93 09       	sbc	r25, r3
    197c:	85 36       	cpi	r24, 0x65	; 101
    197e:	91 05       	cpc	r25, r1
    1980:	0c f4       	brge	.+2      	; 0x1984 <main+0x1468>
    1982:	53 c0       	rjmp	.+166    	; 0x1a2a <main+0x150e>
    1984:	12 01       	movw	r2, r4
    1986:	07 c0       	rjmp	.+14     	; 0x1996 <main+0x147a>
    1988:	81 e1       	ldi	r24, 0x11	; 17
    198a:	68 2e       	mov	r6, r24
    198c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    198e:	57 e1       	ldi	r21, 0x17	; 23
    1990:	65 16       	cp	r6, r21
    1992:	71 04       	cpc	r7, r1
    1994:	61 f4       	brne	.+24     	; 0x19ae <main+0x1492>
    1996:	c2 01       	movw	r24, r4
    1998:	82 19       	sub	r24, r2
    199a:	93 09       	sbc	r25, r3
    199c:	81 5a       	subi	r24, 0xA1	; 161
    199e:	9f 40       	sbci	r25, 0x0F	; 15
    19a0:	0c f4       	brge	.+2      	; 0x19a4 <main+0x1488>
    19a2:	53 c0       	rjmp	.+166    	; 0x1a4a <main+0x152e>
    19a4:	12 01       	movw	r2, r4
    19a6:	07 c0       	rjmp	.+14     	; 0x19b6 <main+0x149a>
    19a8:	02 e1       	ldi	r16, 0x12	; 18
    19aa:	60 2e       	mov	r6, r16
    19ac:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    19ae:	b8 e1       	ldi	r27, 0x18	; 24
    19b0:	6b 16       	cp	r6, r27
    19b2:	71 04       	cpc	r7, r1
    19b4:	61 f4       	brne	.+24     	; 0x19ce <main+0x14b2>
    19b6:	c2 01       	movw	r24, r4
    19b8:	82 19       	sub	r24, r2
    19ba:	93 09       	sbc	r25, r3
    19bc:	85 36       	cpi	r24, 0x65	; 101
    19be:	91 05       	cpc	r25, r1
    19c0:	0c f4       	brge	.+2      	; 0x19c4 <main+0x14a8>
    19c2:	51 c0       	rjmp	.+162    	; 0x1a66 <main+0x154a>
    19c4:	12 01       	movw	r2, r4
    19c6:	07 c0       	rjmp	.+14     	; 0x19d6 <main+0x14ba>
    19c8:	13 e1       	ldi	r17, 0x13	; 19
    19ca:	61 2e       	mov	r6, r17
    19cc:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    19ce:	29 e1       	ldi	r18, 0x19	; 25
    19d0:	62 16       	cp	r6, r18
    19d2:	71 04       	cpc	r7, r1
    19d4:	51 f4       	brne	.+20     	; 0x19ea <main+0x14ce>
    19d6:	c2 01       	movw	r24, r4
    19d8:	82 19       	sub	r24, r2
    19da:	93 09       	sbc	r25, r3
    19dc:	81 5a       	subi	r24, 0xA1	; 161
    19de:	9f 40       	sbci	r25, 0x0F	; 15
    19e0:	44 f4       	brge	.+16     	; 0x19f2 <main+0x14d6>
    19e2:	4e c0       	rjmp	.+156    	; 0x1a80 <main+0x1564>
    19e4:	b4 e1       	ldi	r27, 0x14	; 20
    19e6:	6b 2e       	mov	r6, r27
    19e8:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    19ea:	4a e1       	ldi	r20, 0x1A	; 26
    19ec:	64 16       	cp	r6, r20
    19ee:	71 04       	cpc	r7, r1
    19f0:	69 f4       	brne	.+26     	; 0x1a0c <main+0x14f0>
    19f2:	c2 01       	movw	r24, r4
    19f4:	82 19       	sub	r24, r2
    19f6:	93 09       	sbc	r25, r3
    19f8:	81 5a       	subi	r24, 0xA1	; 161
    19fa:	9f 40       	sbci	r25, 0x0F	; 15
    19fc:	0c f4       	brge	.+2      	; 0x1a00 <main+0x14e4>
    19fe:	4d c0       	rjmp	.+154    	; 0x1a9a <main+0x157e>
    1a00:	5e 82       	std	Y+6, r5	; 0x06
    1a02:	4d 82       	std	Y+5, r4	; 0x05
    1a04:	07 c0       	rjmp	.+14     	; 0x1a14 <main+0x14f8>
    1a06:	a5 e1       	ldi	r26, 0x15	; 21
    1a08:	6a 2e       	mov	r6, r26
    1a0a:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    1a0c:	8b e1       	ldi	r24, 0x1B	; 27
    1a0e:	68 16       	cp	r6, r24
    1a10:	71 04       	cpc	r7, r1
    1a12:	71 f4       	brne	.+28     	; 0x1a30 <main+0x1514>
    1a14:	c2 01       	movw	r24, r4
    1a16:	ad 81       	ldd	r26, Y+5	; 0x05
    1a18:	be 81       	ldd	r27, Y+6	; 0x06
    1a1a:	8a 1b       	sub	r24, r26
    1a1c:	9b 0b       	sbc	r25, r27
    1a1e:	85 36       	cpi	r24, 0x65	; 101
    1a20:	91 05       	cpc	r25, r1
    1a22:	0c f4       	brge	.+2      	; 0x1a26 <main+0x150a>
    1a24:	47 c0       	rjmp	.+142    	; 0x1ab4 <main+0x1598>
    1a26:	12 01       	movw	r2, r4
    1a28:	07 c0       	rjmp	.+14     	; 0x1a38 <main+0x151c>
    1a2a:	f6 e1       	ldi	r31, 0x16	; 22
    1a2c:	6f 2e       	mov	r6, r31
    1a2e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    1a30:	bc e1       	ldi	r27, 0x1C	; 28
    1a32:	6b 16       	cp	r6, r27
    1a34:	71 04       	cpc	r7, r1
    1a36:	61 f4       	brne	.+24     	; 0x1a50 <main+0x1534>
    1a38:	c2 01       	movw	r24, r4
    1a3a:	82 19       	sub	r24, r2
    1a3c:	93 09       	sbc	r25, r3
    1a3e:	85 36       	cpi	r24, 0x65	; 101
    1a40:	91 05       	cpc	r25, r1
    1a42:	0c f4       	brge	.+2      	; 0x1a46 <main+0x152a>
    1a44:	47 c0       	rjmp	.+142    	; 0x1ad4 <main+0x15b8>
    1a46:	12 01       	movw	r2, r4
    1a48:	07 c0       	rjmp	.+14     	; 0x1a58 <main+0x153c>
    1a4a:	e7 e1       	ldi	r30, 0x17	; 23
    1a4c:	6e 2e       	mov	r6, r30
    1a4e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    1a50:	2d e1       	ldi	r18, 0x1D	; 29
    1a52:	62 16       	cp	r6, r18
    1a54:	71 04       	cpc	r7, r1
    1a56:	51 f4       	brne	.+20     	; 0x1a6c <main+0x1550>
    1a58:	c2 01       	movw	r24, r4
    1a5a:	82 19       	sub	r24, r2
    1a5c:	93 09       	sbc	r25, r3
    1a5e:	81 5a       	subi	r24, 0xA1	; 161
    1a60:	9f 40       	sbci	r25, 0x0F	; 15
    1a62:	44 f4       	brge	.+16     	; 0x1a74 <main+0x1558>
    1a64:	47 c0       	rjmp	.+142    	; 0x1af4 <main+0x15d8>
    1a66:	78 e1       	ldi	r23, 0x18	; 24
    1a68:	67 2e       	mov	r6, r23
    1a6a:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && /*counter - counterRef > totalStepLength2*fixtureMotorLoadBack &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    1a6c:	4e e1       	ldi	r20, 0x1E	; 30
    1a6e:	64 16       	cp	r6, r20
    1a70:	71 04       	cpc	r7, r1
    1a72:	49 f4       	brne	.+18     	; 0x1a86 <main+0x156a>
    1a74:	80 91 70 03 	lds	r24, 0x0370
    1a78:	83 fd       	sbrc	r24, 3
    1a7a:	4d c0       	rjmp	.+154    	; 0x1b16 <main+0x15fa>
    1a7c:	12 01       	movw	r2, r4
    1a7e:	07 c0       	rjmp	.+14     	; 0x1a8e <main+0x1572>
    1a80:	69 e1       	ldi	r22, 0x19	; 25
    1a82:	66 2e       	mov	r6, r22
    1a84:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    1a86:	5f e1       	ldi	r21, 0x1F	; 31
    1a88:	65 16       	cp	r6, r21
    1a8a:	71 04       	cpc	r7, r1
    1a8c:	49 f4       	brne	.+18     	; 0x1aa0 <main+0x1584>
    1a8e:	80 91 70 03 	lds	r24, 0x0370
    1a92:	81 fd       	sbrc	r24, 1
    1a94:	5f c1       	rjmp	.+702    	; 0x1d54 <main+0x1838>
    1a96:	12 01       	movw	r2, r4
    1a98:	07 c0       	rjmp	.+14     	; 0x1aa8 <main+0x158c>
    1a9a:	5a e1       	ldi	r21, 0x1A	; 26
    1a9c:	65 2e       	mov	r6, r21
    1a9e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureHome == 0){
    1aa0:	80 e2       	ldi	r24, 0x20	; 32
    1aa2:	68 16       	cp	r6, r24
    1aa4:	71 04       	cpc	r7, r1
    1aa6:	49 f4       	brne	.+18     	; 0x1aba <main+0x159e>
    1aa8:	80 91 70 03 	lds	r24, 0x0370
    1aac:	82 fd       	sbrc	r24, 2
    1aae:	5e c1       	rjmp	.+700    	; 0x1d6c <main+0x1850>
    1ab0:	12 01       	movw	r2, r4
    1ab2:	07 c0       	rjmp	.+14     	; 0x1ac2 <main+0x15a6>
    1ab4:	4b e1       	ldi	r20, 0x1B	; 27
    1ab6:	64 2e       	mov	r6, r20
    1ab8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    1aba:	91 e2       	ldi	r25, 0x21	; 33
    1abc:	69 16       	cp	r6, r25
    1abe:	71 04       	cpc	r7, r1
    1ac0:	61 f4       	brne	.+24     	; 0x1ada <main+0x15be>
    1ac2:	c2 01       	movw	r24, r4
    1ac4:	82 19       	sub	r24, r2
    1ac6:	93 09       	sbc	r25, r3
    1ac8:	85 36       	cpi	r24, 0x65	; 101
    1aca:	91 05       	cpc	r25, r1
    1acc:	0c f4       	brge	.+2      	; 0x1ad0 <main+0x15b4>
    1ace:	5c c1       	rjmp	.+696    	; 0x1d88 <main+0x186c>
    1ad0:	12 01       	movw	r2, r4
    1ad2:	07 c0       	rjmp	.+14     	; 0x1ae2 <main+0x15c6>
    1ad4:	3c e1       	ldi	r19, 0x1C	; 28
    1ad6:	63 2e       	mov	r6, r19
    1ad8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    1ada:	a2 e2       	ldi	r26, 0x22	; 34
    1adc:	6a 16       	cp	r6, r26
    1ade:	71 04       	cpc	r7, r1
    1ae0:	61 f4       	brne	.+24     	; 0x1afa <main+0x15de>
    1ae2:	c2 01       	movw	r24, r4
    1ae4:	82 19       	sub	r24, r2
    1ae6:	93 09       	sbc	r25, r3
    1ae8:	81 5a       	subi	r24, 0xA1	; 161
    1aea:	9f 40       	sbci	r25, 0x0F	; 15
    1aec:	0c f4       	brge	.+2      	; 0x1af0 <main+0x15d4>
    1aee:	5e c1       	rjmp	.+700    	; 0x1dac <main+0x1890>
    1af0:	12 01       	movw	r2, r4
    1af2:	07 c0       	rjmp	.+14     	; 0x1b02 <main+0x15e6>
    1af4:	2d e1       	ldi	r18, 0x1D	; 29
    1af6:	62 2e       	mov	r6, r18
    1af8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    1afa:	23 e2       	ldi	r18, 0x23	; 35
    1afc:	62 16       	cp	r6, r18
    1afe:	71 04       	cpc	r7, r1
    1b00:	69 f4       	brne	.+26     	; 0x1b1c <main+0x1600>
    1b02:	c2 01       	movw	r24, r4
    1b04:	82 19       	sub	r24, r2
    1b06:	93 09       	sbc	r25, r3
    1b08:	0b 97       	sbiw	r24, 0x0b	; 11
    1b0a:	0c f4       	brge	.+2      	; 0x1b0e <main+0x15f2>
    1b0c:	5c c1       	rjmp	.+696    	; 0x1dc6 <main+0x18aa>
    1b0e:	94 e2       	ldi	r25, 0x24	; 36
    1b10:	69 2e       	mov	r6, r25
    1b12:	71 2c       	mov	r7, r1
    1b14:	6f c1       	rjmp	.+734    	; 0x1df4 <main+0x18d8>
    1b16:	8e e1       	ldi	r24, 0x1E	; 30
    1b18:	68 2e       	mov	r6, r24
    1b1a:	71 2c       	mov	r7, r1
				}


				//state actions
						
				switch (state){
    1b1c:	f3 01       	movw	r30, r6
    1b1e:	e4 32       	cpi	r30, 0x24	; 36
    1b20:	f1 05       	cpc	r31, r1
    1b22:	08 f0       	brcs	.+2      	; 0x1b26 <main+0x160a>
    1b24:	67 c1       	rjmp	.+718    	; 0x1df4 <main+0x18d8>
    1b26:	ec 56       	subi	r30, 0x6C	; 108
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	ee 0f       	add	r30, r30
    1b2c:	ff 1f       	adc	r31, r31
    1b2e:	05 90       	lpm	r0, Z+
    1b30:	f4 91       	lpm	r31, Z+
    1b32:	e0 2d       	mov	r30, r0
    1b34:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    1b36:	80 91 70 03 	lds	r24, 0x0370
    1b3a:	90 91 6c 03 	lds	r25, 0x036C
    1b3e:	20 91 6e 03 	lds	r18, 0x036E
    1b42:	82 ff       	sbrs	r24, 2
    1b44:	08 c0       	rjmp	.+16     	; 0x1b56 <main+0x163a>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    1b46:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1b48:	27 7f       	andi	r18, 0xF7	; 247
    1b4a:	20 93 6e 03 	sts	0x036E, r18
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1b4e:	90 62       	ori	r25, 0x20	; 32
    1b50:	90 93 6c 03 	sts	0x036C, r25
    1b54:	4f c1       	rjmp	.+670    	; 0x1df4 <main+0x18d8>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1b56:	9f 7d       	andi	r25, 0xDF	; 223
    1b58:	90 93 6c 03 	sts	0x036C, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1b5c:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1b5e:	28 60       	ori	r18, 0x08	; 8
    1b60:	20 93 6e 03 	sts	0x036E, r18
						if(print0 == 1){
    1b64:	4b a9       	ldd	r20, Y+51	; 0x33
    1b66:	5c a9       	ldd	r21, Y+52	; 0x34
    1b68:	41 30       	cpi	r20, 0x01	; 1
    1b6a:	51 05       	cpc	r21, r1
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <main+0x1654>
    1b6e:	49 c0       	rjmp	.+146    	; 0x1c02 <main+0x16e6>
							OrangutanLCD::gotoXY(0,1);
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	61 e0       	ldi	r22, 0x01	; 1
    1b74:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1b78:	8e e1       	ldi	r24, 0x1E	; 30
    1b7a:	93 e0       	ldi	r25, 0x03	; 3
    1b7c:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
    1b80:	1c aa       	std	Y+52, r1	; 0x34
    1b82:	1b aa       	std	Y+51, r1	; 0x33
    1b84:	3e c0       	rjmp	.+124    	; 0x1c02 <main+0x16e6>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1b86:	20 91 6e 03 	lds	r18, 0x036E
    1b8a:	32 2f       	mov	r19, r18
    1b8c:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    1b8e:	c2 01       	movw	r24, r4
    1b90:	68 ec       	ldi	r22, 0xC8	; 200
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__divmodhi4>
    1b98:	84 36       	cpi	r24, 0x64	; 100
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	24 f4       	brge	.+8      	; 0x1ba6 <main+0x168a>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1b9e:	2c 7f       	andi	r18, 0xFC	; 252
    1ba0:	20 93 6e 03 	sts	0x036E, r18
    1ba4:	03 c0       	rjmp	.+6      	; 0x1bac <main+0x1690>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1ba6:	32 60       	ori	r19, 0x02	; 2
    1ba8:	30 93 6e 03 	sts	0x036E, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    1bac:	80 91 6c 03 	lds	r24, 0x036C
    1bb0:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1bb2:	84 60       	ori	r24, 0x04	; 4
    1bb4:	80 93 6c 03 	sts	0x036C, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1bb8:	80 91 6e 03 	lds	r24, 0x036E
    1bbc:	8b 7f       	andi	r24, 0xFB	; 251
    1bbe:	80 93 6e 03 	sts	0x036E, r24
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	9c a7       	std	Y+44, r25	; 0x2c
    1bc8:	8b a7       	std	Y+43, r24	; 0x2b
    1bca:	14 c1       	rjmp	.+552    	; 0x1df4 <main+0x18d8>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1bcc:	80 91 6e 03 	lds	r24, 0x036E
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1bd0:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1bd2:	86 61       	ori	r24, 0x16	; 22
    1bd4:	80 93 6e 03 	sts	0x036E, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1bd8:	80 91 6c 03 	lds	r24, 0x036C
    1bdc:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1bde:	8b 7f       	andi	r24, 0xFB	; 251
    1be0:	80 93 6c 03 	sts	0x036C, r24
    1be4:	05 c1       	rjmp	.+522    	; 0x1df0 <main+0x18d4>
					break;
				case FIXL:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
    1be6:	80 91 6c 03 	lds	r24, 0x036C
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1bea:	80 63       	ori	r24, 0x30	; 48
    1bec:	47 c0       	rjmp	.+142    	; 0x1c7c <main+0x1760>
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1bee:	80 91 6c 03 	lds	r24, 0x036C
    1bf2:	8f 7d       	andi	r24, 0xDF	; 223
    1bf4:	80 93 6c 03 	sts	0x036C, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1bf8:	80 91 6e 03 	lds	r24, 0x036E
    1bfc:	88 60       	ori	r24, 0x08	; 8
    1bfe:	80 93 6e 03 	sts	0x036E, r24
    1c02:	1e 8e       	std	Y+30, r1	; 0x1e
    1c04:	1d 8e       	std	Y+29, r1	; 0x1d
    1c06:	f6 c0       	rjmp	.+492    	; 0x1df4 <main+0x18d8>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1c08:	80 91 6e 03 	lds	r24, 0x036E
    1c0c:	8f 7e       	andi	r24, 0xEF	; 239
    1c0e:	80 93 6e 03 	sts	0x036E, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1c12:	80 91 6c 03 	lds	r24, 0x036C
    1c16:	80 62       	ori	r24, 0x20	; 32
    1c18:	80 93 6c 03 	sts	0x036C, r24
    1c1c:	eb c0       	rjmp	.+470    	; 0x1df4 <main+0x18d8>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1c1e:	80 91 6c 03 	lds	r24, 0x036C
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1c22:	80 63       	ori	r24, 0x30	; 48
    1c24:	80 93 6c 03 	sts	0x036C, r24
    1c28:	21 e0       	ldi	r18, 0x01	; 1
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	3e 8f       	std	Y+30, r19	; 0x1e
    1c2e:	2d 8f       	std	Y+29, r18	; 0x1d
    1c30:	e1 c0       	rjmp	.+450    	; 0x1df4 <main+0x18d8>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    1c32:	80 91 6d 03 	lds	r24, 0x036D
    1c36:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1c38:	8b 7f       	andi	r24, 0xFB	; 251
    1c3a:	80 93 6d 03 	sts	0x036D, r24
    1c3e:	e1 cf       	rjmp	.-62     	; 0x1c02 <main+0x16e6>
						print15 = 0;
					}*/
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1c40:	80 91 6f 03 	lds	r24, 0x036F
    1c44:	81 60       	ori	r24, 0x01	; 1
    1c46:	80 93 6f 03 	sts	0x036F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1c4a:	80 91 6e 03 	lds	r24, 0x036E
    1c4e:	8f 77       	andi	r24, 0x7F	; 127
    1c50:	80 93 6e 03 	sts	0x036E, r24
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	50 e0       	ldi	r21, 0x00	; 0
    1c58:	5e a3       	std	Y+38, r21	; 0x26
    1c5a:	4d a3       	std	Y+37, r20	; 0x25
    1c5c:	cb c0       	rjmp	.+406    	; 0x1df4 <main+0x18d8>
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1c5e:	80 91 6f 03 	lds	r24, 0x036F
    1c62:	8e 7f       	andi	r24, 0xFE	; 254
    1c64:	80 93 6f 03 	sts	0x036F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1c68:	80 91 6e 03 	lds	r24, 0x036E
    1c6c:	80 68       	ori	r24, 0x80	; 128
    1c6e:	80 93 6e 03 	sts	0x036E, r24
    1c72:	2e c0       	rjmp	.+92     	; 0x1cd0 <main+0x17b4>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1c74:	80 91 6c 03 	lds	r24, 0x036C
    1c78:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1c7a:	80 62       	ori	r24, 0x20	; 32
    1c7c:	80 93 6c 03 	sts	0x036C, r24
    1c80:	a1 e0       	ldi	r26, 0x01	; 1
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	be 8f       	std	Y+30, r27	; 0x1e
    1c86:	ad 8f       	std	Y+29, r26	; 0x1d
    1c88:	b5 c0       	rjmp	.+362    	; 0x1df4 <main+0x18d8>
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1c8a:	80 91 6d 03 	lds	r24, 0x036D
    1c8e:	8b 7f       	andi	r24, 0xFB	; 251
    1c90:	80 93 6d 03 	sts	0x036D, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1c94:	80 91 6f 03 	lds	r24, 0x036F
    1c98:	81 60       	ori	r24, 0x01	; 1
    1c9a:	80 93 6f 03 	sts	0x036F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1c9e:	80 91 6e 03 	lds	r24, 0x036E
    1ca2:	8f 77       	andi	r24, 0x7F	; 127
    1ca4:	80 93 6e 03 	sts	0x036E, r24
    1ca8:	21 e0       	ldi	r18, 0x01	; 1
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	3e a3       	std	Y+38, r19	; 0x26
    1cae:	2d a3       	std	Y+37, r18	; 0x25
    1cb0:	a8 cf       	rjmp	.-176    	; 0x1c02 <main+0x16e6>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1cb2:	80 91 6f 03 	lds	r24, 0x036F
    1cb6:	8e 7f       	andi	r24, 0xFE	; 254
    1cb8:	80 93 6f 03 	sts	0x036F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1cbc:	80 91 6e 03 	lds	r24, 0x036E
    1cc0:	80 68       	ori	r24, 0x80	; 128
    1cc2:	80 93 6e 03 	sts	0x036E, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    1cc6:	80 91 6d 03 	lds	r24, 0x036D
    1cca:	87 7f       	andi	r24, 0xF7	; 247
    1ccc:	80 93 6d 03 	sts	0x036D, r24
    1cd0:	1e a2       	std	Y+38, r1	; 0x26
    1cd2:	1d a2       	std	Y+37, r1	; 0x25
    1cd4:	96 cf       	rjmp	.-212    	; 0x1c02 <main+0x16e6>
					break;
				//*************************************************
				case MOVED1:
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1cd6:	80 91 6c 03 	lds	r24, 0x036C
    1cda:	80 62       	ori	r24, 0x20	; 32
    1cdc:	80 93 6c 03 	sts	0x036C, r24
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ce6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ce8:	85 c0       	rjmp	.+266    	; 0x1df4 <main+0x18d8>
					//u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1cea:	80 91 6f 03 	lds	r24, 0x036F
    1cee:	87 7f       	andi	r24, 0xF7	; 247
    1cf0:	80 93 6f 03 	sts	0x036F, r24
    1cf4:	86 cf       	rjmp	.-244    	; 0x1c02 <main+0x16e6>
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1cf6:	80 91 6f 03 	lds	r24, 0x036F
    1cfa:	88 60       	ori	r24, 0x08	; 8
    1cfc:	10 c0       	rjmp	.+32     	; 0x1d1e <main+0x1802>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    1cfe:	80 91 6d 03 	lds	r24, 0x036D
    1d02:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1d04:	8f 7d       	andi	r24, 0xDF	; 223
    1d06:	80 93 6d 03 	sts	0x036D, r24
    1d0a:	1e 8e       	std	Y+30, r1	; 0x1e
    1d0c:	1d 8e       	std	Y+29, r1	; 0x1d
    1d0e:	21 e0       	ldi	r18, 0x01	; 1
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	3e 8b       	std	Y+22, r19	; 0x16
    1d14:	2d 8b       	std	Y+21, r18	; 0x15
    1d16:	6e c0       	rjmp	.+220    	; 0x1df4 <main+0x18d8>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1d18:	80 91 6f 03 	lds	r24, 0x036F
    1d1c:	8d 7f       	andi	r24, 0xFD	; 253
    1d1e:	80 93 6f 03 	sts	0x036F, r24
    1d22:	68 c0       	rjmp	.+208    	; 0x1df4 <main+0x18d8>
					break;
				case DRY2:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d24:	80 91 6c 03 	lds	r24, 0x036C
    1d28:	80 62       	ori	r24, 0x20	; 32
    1d2a:	80 93 6c 03 	sts	0x036C, r24
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	5e 8f       	std	Y+30, r21	; 0x1e
    1d34:	4d 8f       	std	Y+29, r20	; 0x1d
    1d36:	5e c0       	rjmp	.+188    	; 0x1df4 <main+0x18d8>
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    1d38:	80 91 6d 03 	lds	r24, 0x036D
    1d3c:	8f 7b       	andi	r24, 0xBF	; 191
    1d3e:	80 93 6d 03 	sts	0x036D, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1d42:	80 91 6f 03 	lds	r24, 0x036F
    1d46:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1d48:	8b 7f       	andi	r24, 0xFB	; 251
    1d4a:	80 93 6f 03 	sts	0x036F, r24
    1d4e:	1e 8a       	std	Y+22, r1	; 0x16
    1d50:	1d 8a       	std	Y+21, r1	; 0x15
    1d52:	50 c0       	rjmp	.+160    	; 0x1df4 <main+0x18d8>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1d54:	80 91 6e 03 	lds	r24, 0x036E
    1d58:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1d5a:	80 61       	ori	r24, 0x10	; 16
    1d5c:	80 93 6e 03 	sts	0x036E, r24
    1d60:	1e 8e       	std	Y+30, r1	; 0x1e
    1d62:	1d 8e       	std	Y+29, r1	; 0x1d
    1d64:	0f e1       	ldi	r16, 0x1F	; 31
    1d66:	60 2e       	mov	r6, r16
    1d68:	71 2c       	mov	r7, r1
    1d6a:	44 c0       	rjmp	.+136    	; 0x1df4 <main+0x18d8>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1d6c:	80 91 6c 03 	lds	r24, 0x036C
    1d70:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d72:	80 62       	ori	r24, 0x20	; 32
    1d74:	80 93 6c 03 	sts	0x036C, r24
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d7e:	8d 8f       	std	Y+29, r24	; 0x1d
    1d80:	10 e2       	ldi	r17, 0x20	; 32
    1d82:	61 2e       	mov	r6, r17
    1d84:	71 2c       	mov	r7, r1
    1d86:	36 c0       	rjmp	.+108    	; 0x1df4 <main+0x18d8>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1d88:	80 91 6c 03 	lds	r24, 0x036C
    1d8c:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1d8e:	84 60       	ori	r24, 0x04	; 4
    1d90:	80 93 6c 03 	sts	0x036C, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1d94:	80 91 6e 03 	lds	r24, 0x036E
    1d98:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1d9a:	8f 7e       	andi	r24, 0xEF	; 239
    1d9c:	80 93 6e 03 	sts	0x036E, r24
    1da0:	1e 8e       	std	Y+30, r1	; 0x1e
    1da2:	1d 8e       	std	Y+29, r1	; 0x1d
    1da4:	b1 e2       	ldi	r27, 0x21	; 33
    1da6:	6b 2e       	mov	r6, r27
    1da8:	71 2c       	mov	r7, r1
    1daa:	24 c0       	rjmp	.+72     	; 0x1df4 <main+0x18d8>
					break;
    1dac:	a2 e2       	ldi	r26, 0x22	; 34
    1dae:	6a 2e       	mov	r6, r26
    1db0:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1db2:	80 91 6c 03 	lds	r24, 0x036C
    1db6:	8d 7f       	andi	r24, 0xFD	; 253
    1db8:	80 93 6c 03 	sts	0x036C, r24
    1dbc:	a1 e0       	ldi	r26, 0x01	; 1
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	bc a7       	std	Y+44, r27	; 0x2c
    1dc2:	ab a7       	std	Y+43, r26	; 0x2b
    1dc4:	17 c0       	rjmp	.+46     	; 0x1df4 <main+0x18d8>
					plateLoadMotor = 1;
					break;
    1dc6:	f3 e2       	ldi	r31, 0x23	; 35
    1dc8:	6f 2e       	mov	r6, r31
    1dca:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1dcc:	80 91 6c 03 	lds	r24, 0x036C
    1dd0:	8b 7f       	andi	r24, 0xFB	; 251
    1dd2:	80 93 6c 03 	sts	0x036C, r24
					if(print35 == 1){
    1dd6:	29 ad       	ldd	r18, Y+57	; 0x39
    1dd8:	3a ad       	ldd	r19, Y+58	; 0x3a
    1dda:	21 30       	cpi	r18, 0x01	; 1
    1ddc:	31 05       	cpc	r19, r1
    1dde:	41 f4       	brne	.+16     	; 0x1df0 <main+0x18d4>
						OrangutanLCD::clear();
    1de0:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1de4:	8c e2       	ldi	r24, 0x2C	; 44
    1de6:	93 e0       	ldi	r25, 0x03	; 3
    1de8:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
    1dec:	1a ae       	std	Y+58, r1	; 0x3a
    1dee:	19 ae       	std	Y+57, r1	; 0x39
    1df0:	1c a6       	std	Y+44, r1	; 0x2c
    1df2:	1b a6       	std	Y+43, r1	; 0x2b
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    1df4:	4d b7       	in	r20, 0x3d	; 61
    1df6:	5e b7       	in	r21, 0x3e	; 62
    1df8:	42 51       	subi	r20, 0x12	; 18
    1dfa:	50 40       	sbci	r21, 0x00	; 0
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	5e bf       	out	0x3e, r21	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	4d bf       	out	0x3d, r20	; 61
    1e06:	ed b7       	in	r30, 0x3d	; 61
    1e08:	fe b7       	in	r31, 0x3e	; 62
    1e0a:	31 96       	adiw	r30, 0x01	; 1
    1e0c:	82 e0       	ldi	r24, 0x02	; 2
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	ad b7       	in	r26, 0x3d	; 61
    1e12:	be b7       	in	r27, 0x3e	; 62
    1e14:	12 96       	adiw	r26, 0x02	; 2
    1e16:	9c 93       	st	X, r25
    1e18:	8e 93       	st	-X, r24
    1e1a:	11 97       	sbiw	r26, 0x01	; 1
    1e1c:	93 83       	std	Z+3, r25	; 0x03
    1e1e:	82 83       	std	Z+2, r24	; 0x02
    1e20:	95 83       	std	Z+5, r25	; 0x05
    1e22:	84 83       	std	Z+4, r24	; 0x04
    1e24:	97 83       	std	Z+7, r25	; 0x07
    1e26:	86 83       	std	Z+6, r24	; 0x06
    1e28:	21 e0       	ldi	r18, 0x01	; 1
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	31 87       	std	Z+9, r19	; 0x09
    1e2e:	20 87       	std	Z+8, r18	; 0x08
    1e30:	33 87       	std	Z+11, r19	; 0x0b
    1e32:	22 87       	std	Z+10, r18	; 0x0a
    1e34:	35 87       	std	Z+13, r19	; 0x0d
    1e36:	24 87       	std	Z+12, r18	; 0x0c
    1e38:	37 87       	std	Z+15, r19	; 0x0f
    1e3a:	26 87       	std	Z+14, r18	; 0x0e
    1e3c:	31 8b       	std	Z+17, r19	; 0x11
    1e3e:	20 8b       	std	Z+16, r18	; 0x10
    1e40:	c2 01       	movw	r24, r4
    1e42:	b1 01       	movw	r22, r2
    1e44:	4d 81       	ldd	r20, Y+5	; 0x05
    1e46:	5e 81       	ldd	r21, Y+6	; 0x06
    1e48:	2b a5       	ldd	r18, Y+43	; 0x2b
    1e4a:	3c a5       	ldd	r19, Y+44	; 0x2c
    1e4c:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1e4e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1e50:	ee 24       	eor	r14, r14
    1e52:	ff 24       	eor	r15, r15
    1e54:	cd a0       	ldd	r12, Y+37	; 0x25
    1e56:	de a0       	ldd	r13, Y+38	; 0x26
    1e58:	ad 88       	ldd	r10, Y+21	; 0x15
    1e5a:	be 88       	ldd	r11, Y+22	; 0x16
    1e5c:	e2 e0       	ldi	r30, 0x02	; 2
    1e5e:	8e 2e       	mov	r8, r30
    1e60:	91 2c       	mov	r9, r1
    1e62:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    1e66:	4d b7       	in	r20, 0x3d	; 61
    1e68:	5e b7       	in	r21, 0x3e	; 62
    1e6a:	4e 5e       	subi	r20, 0xEE	; 238
    1e6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	5e bf       	out	0x3e, r21	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	4d bf       	out	0x3d, r20	; 61
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("SECOND B");
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1e80:	54 e2       	ldi	r21, 0x24	; 36
    1e82:	65 16       	cp	r6, r21
    1e84:	71 04       	cpc	r7, r1
    1e86:	11 f4       	brne	.+4      	; 0x1e8c <main+0x1970>
    1e88:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <main+0x2b9c>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    1e8c:	08 94       	sec
    1e8e:	41 1c       	adc	r4, r1
    1e90:	51 1c       	adc	r5, r1
    1e92:	81 cc       	rjmp	.-1790   	; 0x1796 <main+0x127a>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
    1e9a:	88 23       	and	r24, r24
    1e9c:	11 f4       	brne	.+4      	; 0x1ea2 <main+0x1986>
    1e9e:	0c 94 93 18 	jmp	0x3126	; 0x3126 <main+0x2c0a>
			OrangutanLCD::gotoXY(7,0);
    1ea2:	87 e0       	ldi	r24, 0x07	; 7
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
    1ea6:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("BOTH B");
    1eaa:	82 e4       	ldi	r24, 0x42	; 66
    1eac:	93 e0       	ldi	r25, 0x03	; 3
    1eae:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
			OrangutanLCD::print("DEBUG");
    1eb2:	81 e1       	ldi	r24, 0x11	; 17
    1eb4:	93 e0       	ldi	r25, 0x03	; 3
    1eb6:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1eba:	80 91 6c 03 	lds	r24, 0x036C
    1ebe:	80 62       	ori	r24, 0x20	; 32
    1ec0:	80 93 6c 03 	sts	0x036C, r24
    1ec4:	23 96       	adiw	r28, 0x03	; 3
    1ec6:	1f ae       	std	Y+63, r1	; 0x3f
    1ec8:	1e ae       	std	Y+62, r1	; 0x3e
    1eca:	23 97       	sbiw	r28, 0x03	; 3
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	98 af       	std	Y+56, r25	; 0x38
    1ed2:	8f ab       	std	Y+55, r24	; 0x37
    1ed4:	9a ab       	std	Y+50, r25	; 0x32
    1ed6:	89 ab       	std	Y+49, r24	; 0x31
    1ed8:	66 24       	eor	r6, r6
    1eda:	77 24       	eor	r7, r7
    1edc:	1a a6       	std	Y+42, r1	; 0x2a
    1ede:	19 a6       	std	Y+41, r1	; 0x29
    1ee0:	1c a2       	std	Y+36, r1	; 0x24
    1ee2:	1b a2       	std	Y+35, r1	; 0x23
    1ee4:	9c 8f       	std	Y+28, r25	; 0x1c
    1ee6:	8b 8f       	std	Y+27, r24	; 0x1b
    1ee8:	1c 8a       	std	Y+20, r1	; 0x14
    1eea:	1b 8a       	std	Y+19, r1	; 0x13
    1eec:	1e 86       	std	Y+14, r1	; 0x0e
    1eee:	1d 86       	std	Y+13, r1	; 0x0d
    1ef0:	44 24       	eor	r4, r4
    1ef2:	55 24       	eor	r5, r5
    1ef4:	22 24       	eor	r2, r2
    1ef6:	33 24       	eor	r3, r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1ef8:	84 e4       	ldi	r24, 0x44	; 68
    1efa:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1f04:	85 e4       	ldi	r24, 0x45	; 69
    1f06:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1f0a:	0e 94 1f 19 	call	0x323e	; 0x323e <_Z11i2c_readAckv>
    1f0e:	80 93 70 03 	sts	0x0370, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1f12:	0e 94 29 19 	call	0x3252	; 0x3252 <_Z11i2c_readNakv>
    1f16:	80 93 71 03 	sts	0x0371, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1f1a:	0e 94 05 19 	call	0x320a	; 0x320a <_Z8i2c_stopv>
				
				if(state != INIT){
    1f1e:	61 14       	cp	r6, r1
    1f20:	71 04       	cpc	r7, r1
    1f22:	b9 f0       	breq	.+46     	; 0x1f52 <main+0x1a36>
					OrangutanLCD::gotoXY(6,1);
    1f24:	86 e0       	ldi	r24, 0x06	; 6
    1f26:	61 e0       	ldi	r22, 0x01	; 1
    1f28:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("       ");
    1f2c:	89 e4       	ldi	r24, 0x49	; 73
    1f2e:	93 e0       	ldi	r25, 0x03	; 3
    1f30:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	61 e0       	ldi	r22, 0x01	; 1
    1f38:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1f3c:	87 e1       	ldi	r24, 0x17	; 23
    1f3e:	93 e0       	ldi	r25, 0x03	; 3
    1f40:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
    1f44:	b3 01       	movw	r22, r6
    1f46:	88 27       	eor	r24, r24
    1f48:	77 fd       	sbrc	r23, 7
    1f4a:	80 95       	com	r24
    1f4c:	98 2f       	mov	r25, r24
    1f4e:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_ZN12OrangutanLCD5printEl>
						button = 0;
						stateButton = 0;
					}
				}*/

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1f52:	c2 01       	movw	r24, r4
    1f54:	be 01       	movw	r22, r28
    1f56:	6f 5f       	subi	r22, 0xFF	; 255
    1f58:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    1f5e:	61 14       	cp	r6, r1
    1f60:	71 04       	cpc	r7, r1
    1f62:	21 f4       	brne	.+8      	; 0x1f6c <main+0x1a50>
    1f64:	88 23       	and	r24, r24
    1f66:	e1 f1       	breq	.+120    	; 0x1fe0 <main+0x1ac4>
    1f68:	12 01       	movw	r2, r4
    1f6a:	04 c0       	rjmp	.+8      	; 0x1f74 <main+0x1a58>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    1f6c:	91 e0       	ldi	r25, 0x01	; 1
    1f6e:	69 16       	cp	r6, r25
    1f70:	71 04       	cpc	r7, r1
    1f72:	41 f4       	brne	.+16     	; 0x1f84 <main+0x1a68>
    1f74:	c2 01       	movw	r24, r4
    1f76:	82 19       	sub	r24, r2
    1f78:	93 09       	sbc	r25, r3
    1f7a:	81 5a       	subi	r24, 0xA1	; 161
    1f7c:	9f 40       	sbci	r25, 0x0F	; 15
    1f7e:	ec f1       	brlt	.+122    	; 0x1ffa <main+0x1ade>
    1f80:	12 01       	movw	r2, r4
    1f82:	04 c0       	rjmp	.+8      	; 0x1f8c <main+0x1a70>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    1f84:	b2 e0       	ldi	r27, 0x02	; 2
    1f86:	6b 16       	cp	r6, r27
    1f88:	71 04       	cpc	r7, r1
    1f8a:	49 f4       	brne	.+18     	; 0x1f9e <main+0x1a82>
    1f8c:	c2 01       	movw	r24, r4
    1f8e:	82 19       	sub	r24, r2
    1f90:	93 09       	sbc	r25, r3
    1f92:	85 36       	cpi	r24, 0x65	; 101
    1f94:	91 05       	cpc	r25, r1
    1f96:	0c f4       	brge	.+2      	; 0x1f9a <main+0x1a7e>
    1f98:	40 c0       	rjmp	.+128    	; 0x201a <main+0x1afe>
    1f9a:	12 01       	movw	r2, r4
    1f9c:	04 c0       	rjmp	.+8      	; 0x1fa6 <main+0x1a8a>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    1f9e:	23 e0       	ldi	r18, 0x03	; 3
    1fa0:	62 16       	cp	r6, r18
    1fa2:	71 04       	cpc	r7, r1
    1fa4:	31 f4       	brne	.+12     	; 0x1fb2 <main+0x1a96>
    1fa6:	80 91 70 03 	lds	r24, 0x0370
    1faa:	81 fd       	sbrc	r24, 1
    1fac:	46 c0       	rjmp	.+140    	; 0x203a <main+0x1b1e>
    1fae:	12 01       	movw	r2, r4
    1fb0:	04 c0       	rjmp	.+8      	; 0x1fba <main+0x1a9e>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    1fb2:	34 e0       	ldi	r19, 0x04	; 4
    1fb4:	63 16       	cp	r6, r19
    1fb6:	71 04       	cpc	r7, r1
    1fb8:	31 f4       	brne	.+12     	; 0x1fc6 <main+0x1aaa>
    1fba:	80 91 70 03 	lds	r24, 0x0370
    1fbe:	83 fd       	sbrc	r24, 3
    1fc0:	4c c0       	rjmp	.+152    	; 0x205a <main+0x1b3e>
    1fc2:	12 01       	movw	r2, r4
    1fc4:	04 c0       	rjmp	.+8      	; 0x1fce <main+0x1ab2>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    1fc6:	45 e0       	ldi	r20, 0x05	; 5
    1fc8:	64 16       	cp	r6, r20
    1fca:	71 04       	cpc	r7, r1
    1fcc:	49 f4       	brne	.+18     	; 0x1fe0 <main+0x1ac4>
    1fce:	c2 01       	movw	r24, r4
    1fd0:	82 19       	sub	r24, r2
    1fd2:	93 09       	sbc	r25, r3
    1fd4:	85 36       	cpi	r24, 0x65	; 101
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	0c f4       	brge	.+2      	; 0x1fdc <main+0x1ac0>
    1fda:	4d c0       	rjmp	.+154    	; 0x2076 <main+0x1b5a>
    1fdc:	12 01       	movw	r2, r4
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <main+0x1acc>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1fe0:	56 e0       	ldi	r21, 0x06	; 6
    1fe2:	65 16       	cp	r6, r21
    1fe4:	71 04       	cpc	r7, r1
    1fe6:	61 f4       	brne	.+24     	; 0x2000 <main+0x1ae4>
    1fe8:	c2 01       	movw	r24, r4
    1fea:	82 19       	sub	r24, r2
    1fec:	93 09       	sbc	r25, r3
    1fee:	81 5a       	subi	r24, 0xA1	; 161
    1ff0:	9f 40       	sbci	r25, 0x0F	; 15
    1ff2:	0c f4       	brge	.+2      	; 0x1ff6 <main+0x1ada>
    1ff4:	50 c0       	rjmp	.+160    	; 0x2096 <main+0x1b7a>
    1ff6:	12 01       	movw	r2, r4
    1ff8:	07 c0       	rjmp	.+14     	; 0x2008 <main+0x1aec>
    1ffa:	21 e0       	ldi	r18, 0x01	; 1
    1ffc:	62 2e       	mov	r6, r18
    1ffe:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    2000:	b7 e0       	ldi	r27, 0x07	; 7
    2002:	6b 16       	cp	r6, r27
    2004:	71 04       	cpc	r7, r1
    2006:	61 f4       	brne	.+24     	; 0x2020 <main+0x1b04>
    2008:	c2 01       	movw	r24, r4
    200a:	82 19       	sub	r24, r2
    200c:	93 09       	sbc	r25, r3
    200e:	85 36       	cpi	r24, 0x65	; 101
    2010:	91 05       	cpc	r25, r1
    2012:	0c f4       	brge	.+2      	; 0x2016 <main+0x1afa>
    2014:	50 c0       	rjmp	.+160    	; 0x20b6 <main+0x1b9a>
    2016:	12 01       	movw	r2, r4
    2018:	07 c0       	rjmp	.+14     	; 0x2028 <main+0x1b0c>
    201a:	92 e0       	ldi	r25, 0x02	; 2
    201c:	69 2e       	mov	r6, r25
    201e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    2020:	28 e0       	ldi	r18, 0x08	; 8
    2022:	62 16       	cp	r6, r18
    2024:	71 04       	cpc	r7, r1
    2026:	61 f4       	brne	.+24     	; 0x2040 <main+0x1b24>
    2028:	c2 01       	movw	r24, r4
    202a:	82 19       	sub	r24, r2
    202c:	93 09       	sbc	r25, r3
    202e:	85 36       	cpi	r24, 0x65	; 101
    2030:	91 05       	cpc	r25, r1
    2032:	0c f4       	brge	.+2      	; 0x2036 <main+0x1b1a>
    2034:	4e c0       	rjmp	.+156    	; 0x20d2 <main+0x1bb6>
    2036:	12 01       	movw	r2, r4
    2038:	07 c0       	rjmp	.+14     	; 0x2048 <main+0x1b2c>
    203a:	83 e0       	ldi	r24, 0x03	; 3
    203c:	68 2e       	mov	r6, r24
    203e:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2040:	39 e0       	ldi	r19, 0x09	; 9
    2042:	63 16       	cp	r6, r19
    2044:	71 04       	cpc	r7, r1
    2046:	61 f4       	brne	.+24     	; 0x2060 <main+0x1b44>
    2048:	c2 01       	movw	r24, r4
    204a:	82 19       	sub	r24, r2
    204c:	93 09       	sbc	r25, r3
    204e:	81 5d       	subi	r24, 0xD1	; 209
    2050:	97 40       	sbci	r25, 0x07	; 7
    2052:	0c f4       	brge	.+2      	; 0x2056 <main+0x1b3a>
    2054:	4e c0       	rjmp	.+156    	; 0x20f2 <main+0x1bd6>
    2056:	12 01       	movw	r2, r4
    2058:	07 c0       	rjmp	.+14     	; 0x2068 <main+0x1b4c>
    205a:	04 e0       	ldi	r16, 0x04	; 4
    205c:	60 2e       	mov	r6, r16
    205e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    2060:	5a e0       	ldi	r21, 0x0A	; 10
    2062:	65 16       	cp	r6, r21
    2064:	71 04       	cpc	r7, r1
    2066:	51 f4       	brne	.+20     	; 0x207c <main+0x1b60>
    2068:	c2 01       	movw	r24, r4
    206a:	82 19       	sub	r24, r2
    206c:	93 09       	sbc	r25, r3
    206e:	85 36       	cpi	r24, 0x65	; 101
    2070:	91 05       	cpc	r25, r1
    2072:	44 f4       	brge	.+16     	; 0x2084 <main+0x1b68>
    2074:	4e c0       	rjmp	.+156    	; 0x2112 <main+0x1bf6>
    2076:	15 e0       	ldi	r17, 0x05	; 5
    2078:	61 2e       	mov	r6, r17
    207a:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    207c:	8b e0       	ldi	r24, 0x0B	; 11
    207e:	68 16       	cp	r6, r24
    2080:	71 04       	cpc	r7, r1
    2082:	61 f4       	brne	.+24     	; 0x209c <main+0x1b80>
    2084:	c2 01       	movw	r24, r4
    2086:	82 19       	sub	r24, r2
    2088:	93 09       	sbc	r25, r3
    208a:	81 5d       	subi	r24, 0xD1	; 209
    208c:	97 40       	sbci	r25, 0x07	; 7
    208e:	0c f4       	brge	.+2      	; 0x2092 <main+0x1b76>
    2090:	50 c0       	rjmp	.+160    	; 0x2132 <main+0x1c16>
    2092:	12 01       	movw	r2, r4
    2094:	07 c0       	rjmp	.+14     	; 0x20a4 <main+0x1b88>
    2096:	b6 e0       	ldi	r27, 0x06	; 6
    2098:	6b 2e       	mov	r6, r27
    209a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    209c:	bc e0       	ldi	r27, 0x0C	; 12
    209e:	6b 16       	cp	r6, r27
    20a0:	71 04       	cpc	r7, r1
    20a2:	61 f4       	brne	.+24     	; 0x20bc <main+0x1ba0>
    20a4:	c2 01       	movw	r24, r4
    20a6:	82 19       	sub	r24, r2
    20a8:	93 09       	sbc	r25, r3
    20aa:	85 36       	cpi	r24, 0x65	; 101
    20ac:	91 05       	cpc	r25, r1
    20ae:	0c f4       	brge	.+2      	; 0x20b2 <main+0x1b96>
    20b0:	50 c0       	rjmp	.+160    	; 0x2152 <main+0x1c36>
    20b2:	12 01       	movw	r2, r4
    20b4:	07 c0       	rjmp	.+14     	; 0x20c4 <main+0x1ba8>
    20b6:	a7 e0       	ldi	r26, 0x07	; 7
    20b8:	6a 2e       	mov	r6, r26
    20ba:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    20bc:	2d e0       	ldi	r18, 0x0D	; 13
    20be:	62 16       	cp	r6, r18
    20c0:	71 04       	cpc	r7, r1
    20c2:	51 f4       	brne	.+20     	; 0x20d8 <main+0x1bbc>
    20c4:	c2 01       	movw	r24, r4
    20c6:	82 19       	sub	r24, r2
    20c8:	93 09       	sbc	r25, r3
    20ca:	81 5d       	subi	r24, 0xD1	; 209
    20cc:	97 40       	sbci	r25, 0x07	; 7
    20ce:	44 f4       	brge	.+16     	; 0x20e0 <main+0x1bc4>
    20d0:	50 c0       	rjmp	.+160    	; 0x2172 <main+0x1c56>
    20d2:	f8 e0       	ldi	r31, 0x08	; 8
    20d4:	6f 2e       	mov	r6, r31
    20d6:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
				}
				if(state == B1STOP2 && counter - counterRef > totalStepLength2*fixtureMotorBrush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    20d8:	4e e0       	ldi	r20, 0x0E	; 14
    20da:	64 16       	cp	r6, r20
    20dc:	71 04       	cpc	r7, r1
    20de:	61 f4       	brne	.+24     	; 0x20f8 <main+0x1bdc>
    20e0:	c2 01       	movw	r24, r4
    20e2:	82 19       	sub	r24, r2
    20e4:	93 09       	sbc	r25, r3
    20e6:	81 5a       	subi	r24, 0xA1	; 161
    20e8:	9f 40       	sbci	r25, 0x0F	; 15
    20ea:	0c f4       	brge	.+2      	; 0x20ee <main+0x1bd2>
    20ec:	52 c0       	rjmp	.+164    	; 0x2192 <main+0x1c76>
    20ee:	12 01       	movw	r2, r4
    20f0:	07 c0       	rjmp	.+14     	; 0x2100 <main+0x1be4>
    20f2:	e9 e0       	ldi	r30, 0x09	; 9
    20f4:	6e 2e       	mov	r6, r30
    20f6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    20f8:	8f e0       	ldi	r24, 0x0F	; 15
    20fa:	68 16       	cp	r6, r24
    20fc:	71 04       	cpc	r7, r1
    20fe:	61 f4       	brne	.+24     	; 0x2118 <main+0x1bfc>
    2100:	c2 01       	movw	r24, r4
    2102:	82 19       	sub	r24, r2
    2104:	93 09       	sbc	r25, r3
    2106:	85 36       	cpi	r24, 0x65	; 101
    2108:	91 05       	cpc	r25, r1
    210a:	0c f4       	brge	.+2      	; 0x210e <main+0x1bf2>
    210c:	52 c0       	rjmp	.+164    	; 0x21b2 <main+0x1c96>
    210e:	12 01       	movw	r2, r4
    2110:	07 c0       	rjmp	.+14     	; 0x2120 <main+0x1c04>
    2112:	7a e0       	ldi	r23, 0x0A	; 10
    2114:	67 2e       	mov	r6, r23
    2116:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    2118:	90 e1       	ldi	r25, 0x10	; 16
    211a:	69 16       	cp	r6, r25
    211c:	71 04       	cpc	r7, r1
    211e:	61 f4       	brne	.+24     	; 0x2138 <main+0x1c1c>
    2120:	c2 01       	movw	r24, r4
    2122:	82 19       	sub	r24, r2
    2124:	93 09       	sbc	r25, r3
    2126:	85 36       	cpi	r24, 0x65	; 101
    2128:	91 05       	cpc	r25, r1
    212a:	0c f4       	brge	.+2      	; 0x212e <main+0x1c12>
    212c:	52 c0       	rjmp	.+164    	; 0x21d2 <main+0x1cb6>
    212e:	12 01       	movw	r2, r4
    2130:	07 c0       	rjmp	.+14     	; 0x2140 <main+0x1c24>
    2132:	6b e0       	ldi	r22, 0x0B	; 11
    2134:	66 2e       	mov	r6, r22
    2136:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2138:	a1 e1       	ldi	r26, 0x11	; 17
    213a:	6a 16       	cp	r6, r26
    213c:	71 04       	cpc	r7, r1
    213e:	61 f4       	brne	.+24     	; 0x2158 <main+0x1c3c>
    2140:	c2 01       	movw	r24, r4
    2142:	82 19       	sub	r24, r2
    2144:	93 09       	sbc	r25, r3
    2146:	81 5d       	subi	r24, 0xD1	; 209
    2148:	97 40       	sbci	r25, 0x07	; 7
    214a:	0c f4       	brge	.+2      	; 0x214e <main+0x1c32>
    214c:	52 c0       	rjmp	.+164    	; 0x21f2 <main+0x1cd6>
    214e:	12 01       	movw	r2, r4
    2150:	07 c0       	rjmp	.+14     	; 0x2160 <main+0x1c44>
    2152:	5c e0       	ldi	r21, 0x0C	; 12
    2154:	65 2e       	mov	r6, r21
    2156:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    2158:	22 e1       	ldi	r18, 0x12	; 18
    215a:	62 16       	cp	r6, r18
    215c:	71 04       	cpc	r7, r1
    215e:	61 f4       	brne	.+24     	; 0x2178 <main+0x1c5c>
    2160:	c2 01       	movw	r24, r4
    2162:	82 19       	sub	r24, r2
    2164:	93 09       	sbc	r25, r3
    2166:	85 36       	cpi	r24, 0x65	; 101
    2168:	91 05       	cpc	r25, r1
    216a:	0c f4       	brge	.+2      	; 0x216e <main+0x1c52>
    216c:	52 c0       	rjmp	.+164    	; 0x2212 <main+0x1cf6>
    216e:	12 01       	movw	r2, r4
    2170:	07 c0       	rjmp	.+14     	; 0x2180 <main+0x1c64>
    2172:	4d e0       	ldi	r20, 0x0D	; 13
    2174:	64 2e       	mov	r6, r20
    2176:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    2178:	33 e1       	ldi	r19, 0x13	; 19
    217a:	63 16       	cp	r6, r19
    217c:	71 04       	cpc	r7, r1
    217e:	61 f4       	brne	.+24     	; 0x2198 <main+0x1c7c>
    2180:	c2 01       	movw	r24, r4
    2182:	82 19       	sub	r24, r2
    2184:	93 09       	sbc	r25, r3
    2186:	81 5d       	subi	r24, 0xD1	; 209
    2188:	97 40       	sbci	r25, 0x07	; 7
    218a:	0c f4       	brge	.+2      	; 0x218e <main+0x1c72>
    218c:	52 c0       	rjmp	.+164    	; 0x2232 <main+0x1d16>
    218e:	12 01       	movw	r2, r4
    2190:	07 c0       	rjmp	.+14     	; 0x21a0 <main+0x1c84>
    2192:	3e e0       	ldi	r19, 0x0E	; 14
    2194:	63 2e       	mov	r6, r19
    2196:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    2198:	54 e1       	ldi	r21, 0x14	; 20
    219a:	65 16       	cp	r6, r21
    219c:	71 04       	cpc	r7, r1
    219e:	61 f4       	brne	.+24     	; 0x21b8 <main+0x1c9c>
    21a0:	c2 01       	movw	r24, r4
    21a2:	82 19       	sub	r24, r2
    21a4:	93 09       	sbc	r25, r3
    21a6:	85 36       	cpi	r24, 0x65	; 101
    21a8:	91 05       	cpc	r25, r1
    21aa:	0c f4       	brge	.+2      	; 0x21ae <main+0x1c92>
    21ac:	50 c0       	rjmp	.+160    	; 0x224e <main+0x1d32>
    21ae:	12 01       	movw	r2, r4
    21b0:	07 c0       	rjmp	.+14     	; 0x21c0 <main+0x1ca4>
    21b2:	2f e0       	ldi	r18, 0x0F	; 15
    21b4:	62 2e       	mov	r6, r18
    21b6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    21b8:	85 e1       	ldi	r24, 0x15	; 21
    21ba:	68 16       	cp	r6, r24
    21bc:	71 04       	cpc	r7, r1
    21be:	61 f4       	brne	.+24     	; 0x21d8 <main+0x1cbc>
    21c0:	c2 01       	movw	r24, r4
    21c2:	82 19       	sub	r24, r2
    21c4:	93 09       	sbc	r25, r3
    21c6:	81 5d       	subi	r24, 0xD1	; 209
    21c8:	97 40       	sbci	r25, 0x07	; 7
    21ca:	0c f4       	brge	.+2      	; 0x21ce <main+0x1cb2>
    21cc:	53 c0       	rjmp	.+166    	; 0x2274 <main+0x1d58>
    21ce:	12 01       	movw	r2, r4
    21d0:	07 c0       	rjmp	.+14     	; 0x21e0 <main+0x1cc4>
    21d2:	90 e1       	ldi	r25, 0x10	; 16
    21d4:	69 2e       	mov	r6, r25
    21d6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    21d8:	b6 e1       	ldi	r27, 0x16	; 22
    21da:	6b 16       	cp	r6, r27
    21dc:	71 04       	cpc	r7, r1
    21de:	61 f4       	brne	.+24     	; 0x21f8 <main+0x1cdc>
    21e0:	c2 01       	movw	r24, r4
    21e2:	82 19       	sub	r24, r2
    21e4:	93 09       	sbc	r25, r3
    21e6:	85 36       	cpi	r24, 0x65	; 101
    21e8:	91 05       	cpc	r25, r1
    21ea:	0c f4       	brge	.+2      	; 0x21ee <main+0x1cd2>
    21ec:	57 c0       	rjmp	.+174    	; 0x229c <main+0x1d80>
    21ee:	12 01       	movw	r2, r4
    21f0:	07 c0       	rjmp	.+14     	; 0x2200 <main+0x1ce4>
    21f2:	81 e1       	ldi	r24, 0x11	; 17
    21f4:	68 2e       	mov	r6, r24
    21f6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    21f8:	27 e1       	ldi	r18, 0x17	; 23
    21fa:	62 16       	cp	r6, r18
    21fc:	71 04       	cpc	r7, r1
    21fe:	61 f4       	brne	.+24     	; 0x2218 <main+0x1cfc>
    2200:	c2 01       	movw	r24, r4
    2202:	82 19       	sub	r24, r2
    2204:	93 09       	sbc	r25, r3
    2206:	81 5a       	subi	r24, 0xA1	; 161
    2208:	9f 40       	sbci	r25, 0x0F	; 15
    220a:	0c f4       	brge	.+2      	; 0x220e <main+0x1cf2>
    220c:	57 c0       	rjmp	.+174    	; 0x22bc <main+0x1da0>
    220e:	12 01       	movw	r2, r4
    2210:	07 c0       	rjmp	.+14     	; 0x2220 <main+0x1d04>
    2212:	02 e1       	ldi	r16, 0x12	; 18
    2214:	60 2e       	mov	r6, r16
    2216:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    2218:	48 e1       	ldi	r20, 0x18	; 24
    221a:	64 16       	cp	r6, r20
    221c:	71 04       	cpc	r7, r1
    221e:	61 f4       	brne	.+24     	; 0x2238 <main+0x1d1c>
    2220:	c2 01       	movw	r24, r4
    2222:	82 19       	sub	r24, r2
    2224:	93 09       	sbc	r25, r3
    2226:	85 36       	cpi	r24, 0x65	; 101
    2228:	91 05       	cpc	r25, r1
    222a:	0c f4       	brge	.+2      	; 0x222e <main+0x1d12>
    222c:	55 c0       	rjmp	.+170    	; 0x22d8 <main+0x1dbc>
    222e:	12 01       	movw	r2, r4
    2230:	07 c0       	rjmp	.+14     	; 0x2240 <main+0x1d24>
    2232:	13 e1       	ldi	r17, 0x13	; 19
    2234:	61 2e       	mov	r6, r17
    2236:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2238:	59 e1       	ldi	r21, 0x19	; 25
    223a:	65 16       	cp	r6, r21
    223c:	71 04       	cpc	r7, r1
    223e:	51 f4       	brne	.+20     	; 0x2254 <main+0x1d38>
    2240:	c2 01       	movw	r24, r4
    2242:	82 19       	sub	r24, r2
    2244:	93 09       	sbc	r25, r3
    2246:	81 5a       	subi	r24, 0xA1	; 161
    2248:	9f 40       	sbci	r25, 0x0F	; 15
    224a:	44 f4       	brge	.+16     	; 0x225c <main+0x1d40>
    224c:	52 c0       	rjmp	.+164    	; 0x22f2 <main+0x1dd6>
    224e:	b4 e1       	ldi	r27, 0x14	; 20
    2250:	6b 2e       	mov	r6, r27
    2252:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    2254:	ba e1       	ldi	r27, 0x1A	; 26
    2256:	6b 16       	cp	r6, r27
    2258:	71 04       	cpc	r7, r1
    225a:	79 f4       	brne	.+30     	; 0x227a <main+0x1d5e>
    225c:	c2 01       	movw	r24, r4
    225e:	82 19       	sub	r24, r2
    2260:	93 09       	sbc	r25, r3
    2262:	81 5a       	subi	r24, 0xA1	; 161
    2264:	9f 40       	sbci	r25, 0x0F	; 15
    2266:	0c f4       	brge	.+2      	; 0x226a <main+0x1d4e>
    2268:	54 c0       	rjmp	.+168    	; 0x2312 <main+0x1df6>
    226a:	23 96       	adiw	r28, 0x03	; 3
    226c:	5f ae       	std	Y+63, r5	; 0x3f
    226e:	4e ae       	std	Y+62, r4	; 0x3e
    2270:	23 97       	sbiw	r28, 0x03	; 3
    2272:	07 c0       	rjmp	.+14     	; 0x2282 <main+0x1d66>
    2274:	a5 e1       	ldi	r26, 0x15	; 21
    2276:	6a 2e       	mov	r6, r26
    2278:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    227a:	3b e1       	ldi	r19, 0x1B	; 27
    227c:	63 16       	cp	r6, r19
    227e:	71 04       	cpc	r7, r1
    2280:	81 f4       	brne	.+32     	; 0x22a2 <main+0x1d86>
    2282:	c2 01       	movw	r24, r4
    2284:	23 96       	adiw	r28, 0x03	; 3
    2286:	4e ad       	ldd	r20, Y+62	; 0x3e
    2288:	5f ad       	ldd	r21, Y+63	; 0x3f
    228a:	23 97       	sbiw	r28, 0x03	; 3
    228c:	84 1b       	sub	r24, r20
    228e:	95 0b       	sbc	r25, r21
    2290:	85 36       	cpi	r24, 0x65	; 101
    2292:	91 05       	cpc	r25, r1
    2294:	0c f4       	brge	.+2      	; 0x2298 <main+0x1d7c>
    2296:	4a c0       	rjmp	.+148    	; 0x232c <main+0x1e10>
    2298:	12 01       	movw	r2, r4
    229a:	07 c0       	rjmp	.+14     	; 0x22aa <main+0x1d8e>
    229c:	f6 e1       	ldi	r31, 0x16	; 22
    229e:	6f 2e       	mov	r6, r31
    22a0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    22a2:	5c e1       	ldi	r21, 0x1C	; 28
    22a4:	65 16       	cp	r6, r21
    22a6:	71 04       	cpc	r7, r1
    22a8:	61 f4       	brne	.+24     	; 0x22c2 <main+0x1da6>
    22aa:	c2 01       	movw	r24, r4
    22ac:	82 19       	sub	r24, r2
    22ae:	93 09       	sbc	r25, r3
    22b0:	85 36       	cpi	r24, 0x65	; 101
    22b2:	91 05       	cpc	r25, r1
    22b4:	0c f4       	brge	.+2      	; 0x22b8 <main+0x1d9c>
    22b6:	4a c0       	rjmp	.+148    	; 0x234c <main+0x1e30>
    22b8:	12 01       	movw	r2, r4
    22ba:	07 c0       	rjmp	.+14     	; 0x22ca <main+0x1dae>
    22bc:	e7 e1       	ldi	r30, 0x17	; 23
    22be:	6e 2e       	mov	r6, r30
    22c0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    22c2:	8d e1       	ldi	r24, 0x1D	; 29
    22c4:	68 16       	cp	r6, r24
    22c6:	71 04       	cpc	r7, r1
    22c8:	51 f4       	brne	.+20     	; 0x22de <main+0x1dc2>
    22ca:	c2 01       	movw	r24, r4
    22cc:	82 19       	sub	r24, r2
    22ce:	93 09       	sbc	r25, r3
    22d0:	81 5a       	subi	r24, 0xA1	; 161
    22d2:	9f 40       	sbci	r25, 0x0F	; 15
    22d4:	44 f4       	brge	.+16     	; 0x22e6 <main+0x1dca>
    22d6:	4a c0       	rjmp	.+148    	; 0x236c <main+0x1e50>
    22d8:	78 e1       	ldi	r23, 0x18	; 24
    22da:	67 2e       	mov	r6, r23
    22dc:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && /*counter - counterRef > totalStepLength2*fixtureMotorLoadBack &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    22de:	be e1       	ldi	r27, 0x1E	; 30
    22e0:	6b 16       	cp	r6, r27
    22e2:	71 04       	cpc	r7, r1
    22e4:	49 f4       	brne	.+18     	; 0x22f8 <main+0x1ddc>
    22e6:	80 91 70 03 	lds	r24, 0x0370
    22ea:	83 fd       	sbrc	r24, 3
    22ec:	50 c0       	rjmp	.+160    	; 0x238e <main+0x1e72>
    22ee:	12 01       	movw	r2, r4
    22f0:	07 c0       	rjmp	.+14     	; 0x2300 <main+0x1de4>
    22f2:	69 e1       	ldi	r22, 0x19	; 25
    22f4:	66 2e       	mov	r6, r22
    22f6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    22f8:	2f e1       	ldi	r18, 0x1F	; 31
    22fa:	62 16       	cp	r6, r18
    22fc:	71 04       	cpc	r7, r1
    22fe:	61 f4       	brne	.+24     	; 0x2318 <main+0x1dfc>
    2300:	c2 01       	movw	r24, r4
    2302:	82 19       	sub	r24, r2
    2304:	93 09       	sbc	r25, r3
    2306:	89 5e       	subi	r24, 0xE9	; 233
    2308:	93 40       	sbci	r25, 0x03	; 3
    230a:	0c f4       	brge	.+2      	; 0x230e <main+0x1df2>
    230c:	a7 c1       	rjmp	.+846    	; 0x265c <main+0x2140>
    230e:	12 01       	movw	r2, r4
    2310:	07 c0       	rjmp	.+14     	; 0x2320 <main+0x1e04>
    2312:	5a e1       	ldi	r21, 0x1A	; 26
    2314:	65 2e       	mov	r6, r21
    2316:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureHome == 0){
    2318:	40 e2       	ldi	r20, 0x20	; 32
    231a:	64 16       	cp	r6, r20
    231c:	71 04       	cpc	r7, r1
    231e:	49 f4       	brne	.+18     	; 0x2332 <main+0x1e16>
    2320:	80 91 70 03 	lds	r24, 0x0370
    2324:	82 fd       	sbrc	r24, 2
    2326:	a6 c1       	rjmp	.+844    	; 0x2674 <main+0x2158>
    2328:	12 01       	movw	r2, r4
    232a:	07 c0       	rjmp	.+14     	; 0x233a <main+0x1e1e>
    232c:	4b e1       	ldi	r20, 0x1B	; 27
    232e:	64 2e       	mov	r6, r20
    2330:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    2332:	51 e2       	ldi	r21, 0x21	; 33
    2334:	65 16       	cp	r6, r21
    2336:	71 04       	cpc	r7, r1
    2338:	61 f4       	brne	.+24     	; 0x2352 <main+0x1e36>
    233a:	c2 01       	movw	r24, r4
    233c:	82 19       	sub	r24, r2
    233e:	93 09       	sbc	r25, r3
    2340:	85 36       	cpi	r24, 0x65	; 101
    2342:	91 05       	cpc	r25, r1
    2344:	0c f4       	brge	.+2      	; 0x2348 <main+0x1e2c>
    2346:	a4 c1       	rjmp	.+840    	; 0x2690 <main+0x2174>
    2348:	12 01       	movw	r2, r4
    234a:	07 c0       	rjmp	.+14     	; 0x235a <main+0x1e3e>
    234c:	3c e1       	ldi	r19, 0x1C	; 28
    234e:	63 2e       	mov	r6, r19
    2350:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    2352:	82 e2       	ldi	r24, 0x22	; 34
    2354:	68 16       	cp	r6, r24
    2356:	71 04       	cpc	r7, r1
    2358:	61 f4       	brne	.+24     	; 0x2372 <main+0x1e56>
    235a:	c2 01       	movw	r24, r4
    235c:	82 19       	sub	r24, r2
    235e:	93 09       	sbc	r25, r3
    2360:	81 5a       	subi	r24, 0xA1	; 161
    2362:	9f 40       	sbci	r25, 0x0F	; 15
    2364:	0c f4       	brge	.+2      	; 0x2368 <main+0x1e4c>
    2366:	a6 c1       	rjmp	.+844    	; 0x26b4 <main+0x2198>
    2368:	12 01       	movw	r2, r4
    236a:	07 c0       	rjmp	.+14     	; 0x237a <main+0x1e5e>
    236c:	2d e1       	ldi	r18, 0x1D	; 29
    236e:	62 2e       	mov	r6, r18
    2370:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    2372:	b3 e2       	ldi	r27, 0x23	; 35
    2374:	6b 16       	cp	r6, r27
    2376:	71 04       	cpc	r7, r1
    2378:	69 f4       	brne	.+26     	; 0x2394 <main+0x1e78>
    237a:	c2 01       	movw	r24, r4
    237c:	82 19       	sub	r24, r2
    237e:	93 09       	sbc	r25, r3
    2380:	0b 97       	sbiw	r24, 0x0b	; 11
    2382:	0c f4       	brge	.+2      	; 0x2386 <main+0x1e6a>
    2384:	a4 c1       	rjmp	.+840    	; 0x26ce <main+0x21b2>
    2386:	94 e2       	ldi	r25, 0x24	; 36
    2388:	69 2e       	mov	r6, r25
    238a:	71 2c       	mov	r7, r1
    238c:	b7 c1       	rjmp	.+878    	; 0x26fc <main+0x21e0>
    238e:	8e e1       	ldi	r24, 0x1E	; 30
    2390:	68 2e       	mov	r6, r24
    2392:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    2394:	f3 01       	movw	r30, r6
    2396:	e4 32       	cpi	r30, 0x24	; 36
    2398:	f1 05       	cpc	r31, r1
    239a:	08 f0       	brcs	.+2      	; 0x239e <main+0x1e82>
    239c:	af c1       	rjmp	.+862    	; 0x26fc <main+0x21e0>
    239e:	e8 54       	subi	r30, 0x48	; 72
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	ee 0f       	add	r30, r30
    23a4:	ff 1f       	adc	r31, r31
    23a6:	05 90       	lpm	r0, Z+
    23a8:	f4 91       	lpm	r31, Z+
    23aa:	e0 2d       	mov	r30, r0
    23ac:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    23ae:	80 91 70 03 	lds	r24, 0x0370
    23b2:	90 91 6c 03 	lds	r25, 0x036C
    23b6:	20 91 6e 03 	lds	r18, 0x036E
    23ba:	82 ff       	sbrs	r24, 2
    23bc:	08 c0       	rjmp	.+16     	; 0x23ce <main+0x1eb2>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    23be:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    23c0:	27 7f       	andi	r18, 0xF7	; 247
    23c2:	20 93 6e 03 	sts	0x036E, r18
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    23c6:	90 62       	ori	r25, 0x20	; 32
    23c8:	90 93 6c 03 	sts	0x036C, r25
    23cc:	97 c1       	rjmp	.+814    	; 0x26fc <main+0x21e0>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    23ce:	9f 7d       	andi	r25, 0xDF	; 223
    23d0:	90 93 6c 03 	sts	0x036C, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    23d4:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    23d6:	28 60       	ori	r18, 0x08	; 8
    23d8:	20 93 6e 03 	sts	0x036E, r18
						if(print0 == 1){
    23dc:	29 a9       	ldd	r18, Y+49	; 0x31
    23de:	3a a9       	ldd	r19, Y+50	; 0x32
    23e0:	21 30       	cpi	r18, 0x01	; 1
    23e2:	31 05       	cpc	r19, r1
    23e4:	09 f0       	breq	.+2      	; 0x23e8 <main+0x1ecc>
    23e6:	45 c0       	rjmp	.+138    	; 0x2472 <main+0x1f56>
							OrangutanLCD::gotoXY(0,1);
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	61 e0       	ldi	r22, 0x01	; 1
    23ec:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    23f0:	8e e1       	ldi	r24, 0x1E	; 30
    23f2:	93 e0       	ldi	r25, 0x03	; 3
    23f4:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
    23f8:	1a aa       	std	Y+50, r1	; 0x32
    23fa:	19 aa       	std	Y+49, r1	; 0x31
    23fc:	3a c0       	rjmp	.+116    	; 0x2472 <main+0x1f56>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    23fe:	20 91 6e 03 	lds	r18, 0x036E
    2402:	32 2f       	mov	r19, r18
    2404:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    2406:	c2 01       	movw	r24, r4
    2408:	68 ec       	ldi	r22, 0xC8	; 200
    240a:	70 e0       	ldi	r23, 0x00	; 0
    240c:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__divmodhi4>
    2410:	84 36       	cpi	r24, 0x64	; 100
    2412:	91 05       	cpc	r25, r1
    2414:	24 f4       	brge	.+8      	; 0x241e <main+0x1f02>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    2416:	2c 7f       	andi	r18, 0xFC	; 252
    2418:	20 93 6e 03 	sts	0x036E, r18
    241c:	03 c0       	rjmp	.+6      	; 0x2424 <main+0x1f08>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    241e:	32 60       	ori	r19, 0x02	; 2
    2420:	30 93 6e 03 	sts	0x036E, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    2424:	80 91 6c 03 	lds	r24, 0x036C
    2428:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    242a:	84 60       	ori	r24, 0x04	; 4
    242c:	80 93 6c 03 	sts	0x036C, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    2430:	80 91 6e 03 	lds	r24, 0x036E
    2434:	8b 7f       	andi	r24, 0xFB	; 251
    2436:	80 93 6e 03 	sts	0x036E, r24
    243a:	41 e0       	ldi	r20, 0x01	; 1
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	5a a7       	std	Y+42, r21	; 0x2a
    2440:	49 a7       	std	Y+41, r20	; 0x29
    2442:	5c c1       	rjmp	.+696    	; 0x26fc <main+0x21e0>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2444:	80 91 6e 03 	lds	r24, 0x036E
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2448:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    244a:	86 61       	ori	r24, 0x16	; 22
    244c:	80 93 6e 03 	sts	0x036E, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2450:	80 91 6c 03 	lds	r24, 0x036C
    2454:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2456:	8b 7f       	andi	r24, 0xFB	; 251
    2458:	80 93 6c 03 	sts	0x036C, r24
    245c:	4d c1       	rjmp	.+666    	; 0x26f8 <main+0x21dc>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    245e:	80 91 6c 03 	lds	r24, 0x036C
    2462:	8f 7d       	andi	r24, 0xDF	; 223
    2464:	80 93 6c 03 	sts	0x036C, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2468:	80 91 6e 03 	lds	r24, 0x036E
    246c:	88 60       	ori	r24, 0x08	; 8
    246e:	80 93 6e 03 	sts	0x036E, r24
    2472:	1c 8e       	std	Y+28, r1	; 0x1c
    2474:	1b 8e       	std	Y+27, r1	; 0x1b
    2476:	42 c1       	rjmp	.+644    	; 0x26fc <main+0x21e0>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2478:	80 91 6e 03 	lds	r24, 0x036E
    247c:	8f 7e       	andi	r24, 0xEF	; 239
    247e:	80 93 6e 03 	sts	0x036E, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2482:	80 91 6c 03 	lds	r24, 0x036C
    2486:	80 62       	ori	r24, 0x20	; 32
    2488:	80 93 6c 03 	sts	0x036C, r24
    248c:	37 c1       	rjmp	.+622    	; 0x26fc <main+0x21e0>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    248e:	80 91 6c 03 	lds	r24, 0x036C
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2492:	80 63       	ori	r24, 0x30	; 48
    2494:	81 c0       	rjmp	.+258    	; 0x2598 <main+0x207c>
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    2496:	80 91 6d 03 	lds	r24, 0x036D
    249a:	81 60       	ori	r24, 0x01	; 1
    249c:	80 93 6d 03 	sts	0x036D, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    24a0:	80 91 6c 03 	lds	r24, 0x036C
    24a4:	8f 77       	andi	r24, 0x7F	; 127
    24a6:	80 93 6c 03 	sts	0x036C, r24
    24aa:	e3 cf       	rjmp	.-58     	; 0x2472 <main+0x1f56>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    24ac:	80 91 6e 03 	lds	r24, 0x036E
    24b0:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    24b2:	8f 7d       	andi	r24, 0xDF	; 223
    24b4:	80 93 6e 03 	sts	0x036E, r24
    24b8:	21 e0       	ldi	r18, 0x01	; 1
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	3e 87       	std	Y+14, r19	; 0x0e
    24be:	2d 87       	std	Y+13, r18	; 0x0d
    24c0:	1d c1       	rjmp	.+570    	; 0x26fc <main+0x21e0>
					break;
				case CLEAN1_1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    24c2:	80 91 6c 03 	lds	r24, 0x036C
    24c6:	80 62       	ori	r24, 0x20	; 32
    24c8:	80 93 6c 03 	sts	0x036C, r24
					OrangutanLCD::gotoXY(0,1);
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	61 e0       	ldi	r22, 0x01	; 1
    24d0:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("SET MOTOR HIGH");
    24d4:	81 e5       	ldi	r24, 0x51	; 81
    24d6:	93 e0       	ldi	r25, 0x03	; 3
    24d8:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    24dc:	80 91 6c 03 	lds	r24, 0x036C
    24e0:	8f 7e       	andi	r24, 0xEF	; 239
    24e2:	78 c0       	rjmp	.+240    	; 0x25d4 <main+0x20b8>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    24e4:	80 91 6c 03 	lds	r24, 0x036C
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    24e8:	80 63       	ori	r24, 0x30	; 48
    24ea:	40 c0       	rjmp	.+128    	; 0x256c <main+0x2050>
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    24ec:	80 91 6c 03 	lds	r24, 0x036C
    24f0:	8f 77       	andi	r24, 0x7F	; 127
    24f2:	80 93 6c 03 	sts	0x036C, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    24f6:	80 91 6e 03 	lds	r24, 0x036E
    24fa:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    24fc:	8f 7d       	andi	r24, 0xDF	; 223
    24fe:	80 93 6e 03 	sts	0x036E, r24
    2502:	1c 8e       	std	Y+28, r1	; 0x1c
    2504:	1b 8e       	std	Y+27, r1	; 0x1b
    2506:	a1 e0       	ldi	r26, 0x01	; 1
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	be 87       	std	Y+14, r27	; 0x0e
    250c:	ad 87       	std	Y+13, r26	; 0x0d
    250e:	f6 c0       	rjmp	.+492    	; 0x26fc <main+0x21e0>
					break;
				case CLEAN1_3:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2510:	80 91 6c 03 	lds	r24, 0x036C
    2514:	80 62       	ori	r24, 0x20	; 32
    2516:	80 93 6c 03 	sts	0x036C, r24
    251a:	21 e0       	ldi	r18, 0x01	; 1
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	3c 8f       	std	Y+28, r19	; 0x1c
    2520:	2b 8f       	std	Y+27, r18	; 0x1b
    2522:	ec c0       	rjmp	.+472    	; 0x26fc <main+0x21e0>
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2524:	80 91 6e 03 	lds	r24, 0x036E
    2528:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    252a:	80 62       	ori	r24, 0x20	; 32
    252c:	80 93 6e 03 	sts	0x036E, r24
    2530:	1c 8e       	std	Y+28, r1	; 0x1c
    2532:	1b 8e       	std	Y+27, r1	; 0x1b
    2534:	1e 86       	std	Y+14, r1	; 0x0e
    2536:	1d 86       	std	Y+13, r1	; 0x0d
    2538:	e1 c0       	rjmp	.+450    	; 0x26fc <main+0x21e0>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    253a:	80 91 6d 03 	lds	r24, 0x036D
    253e:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2540:	8b 7f       	andi	r24, 0xFB	; 251
    2542:	80 93 6d 03 	sts	0x036D, r24
    2546:	95 cf       	rjmp	.-214    	; 0x2472 <main+0x1f56>
						print15 = 0;
					}*/
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2548:	80 91 6f 03 	lds	r24, 0x036F
    254c:	81 60       	ori	r24, 0x01	; 1
    254e:	80 93 6f 03 	sts	0x036F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2552:	80 91 6e 03 	lds	r24, 0x036E
    2556:	8f 77       	andi	r24, 0x7F	; 127
    2558:	80 93 6e 03 	sts	0x036E, r24
    255c:	41 e0       	ldi	r20, 0x01	; 1
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	5c a3       	std	Y+36, r21	; 0x24
    2562:	4b a3       	std	Y+35, r20	; 0x23
    2564:	cb c0       	rjmp	.+406    	; 0x26fc <main+0x21e0>
					break;
				case CLEAN2_1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2566:	80 91 6c 03 	lds	r24, 0x036C
    256a:	80 62       	ori	r24, 0x20	; 32
    256c:	80 93 6c 03 	sts	0x036C, r24
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9c 8f       	std	Y+28, r25	; 0x1c
    2576:	8b 8f       	std	Y+27, r24	; 0x1b
    2578:	c1 c0       	rjmp	.+386    	; 0x26fc <main+0x21e0>
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    257a:	80 91 6f 03 	lds	r24, 0x036F
    257e:	8e 7f       	andi	r24, 0xFE	; 254
    2580:	80 93 6f 03 	sts	0x036F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2584:	80 91 6e 03 	lds	r24, 0x036E
    2588:	80 68       	ori	r24, 0x80	; 128
    258a:	80 93 6e 03 	sts	0x036E, r24
    258e:	38 c0       	rjmp	.+112    	; 0x2600 <main+0x20e4>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2590:	80 91 6c 03 	lds	r24, 0x036C
    2594:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2596:	80 62       	ori	r24, 0x20	; 32
    2598:	80 93 6c 03 	sts	0x036C, r24
    259c:	a1 e0       	ldi	r26, 0x01	; 1
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	bc 8f       	std	Y+28, r27	; 0x1c
    25a2:	ab 8f       	std	Y+27, r26	; 0x1b
    25a4:	ab c0       	rjmp	.+342    	; 0x26fc <main+0x21e0>
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    25a6:	80 91 6d 03 	lds	r24, 0x036D
    25aa:	8b 7f       	andi	r24, 0xFB	; 251
    25ac:	80 93 6d 03 	sts	0x036D, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    25b0:	80 91 6f 03 	lds	r24, 0x036F
    25b4:	81 60       	ori	r24, 0x01	; 1
    25b6:	80 93 6f 03 	sts	0x036F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    25ba:	80 91 6e 03 	lds	r24, 0x036E
    25be:	8f 77       	andi	r24, 0x7F	; 127
    25c0:	80 93 6e 03 	sts	0x036E, r24
    25c4:	21 e0       	ldi	r18, 0x01	; 1
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	3c a3       	std	Y+36, r19	; 0x24
    25ca:	2b a3       	std	Y+35, r18	; 0x23
    25cc:	52 cf       	rjmp	.-348    	; 0x2472 <main+0x1f56>
					break;
				case CLEAN2_3:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    25ce:	80 91 6c 03 	lds	r24, 0x036C
    25d2:	80 62       	ori	r24, 0x20	; 32
    25d4:	80 93 6c 03 	sts	0x036C, r24
    25d8:	41 e0       	ldi	r20, 0x01	; 1
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	5c 8f       	std	Y+28, r21	; 0x1c
    25de:	4b 8f       	std	Y+27, r20	; 0x1b
    25e0:	8d c0       	rjmp	.+282    	; 0x26fc <main+0x21e0>
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    25e2:	80 91 6f 03 	lds	r24, 0x036F
    25e6:	8e 7f       	andi	r24, 0xFE	; 254
    25e8:	80 93 6f 03 	sts	0x036F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    25ec:	80 91 6e 03 	lds	r24, 0x036E
    25f0:	80 68       	ori	r24, 0x80	; 128
    25f2:	80 93 6e 03 	sts	0x036E, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    25f6:	80 91 6d 03 	lds	r24, 0x036D
    25fa:	87 7f       	andi	r24, 0xF7	; 247
    25fc:	80 93 6d 03 	sts	0x036D, r24
    2600:	1c a2       	std	Y+36, r1	; 0x24
    2602:	1b a2       	std	Y+35, r1	; 0x23
    2604:	36 cf       	rjmp	.-404    	; 0x2472 <main+0x1f56>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					//u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2606:	80 91 6f 03 	lds	r24, 0x036F
    260a:	87 7f       	andi	r24, 0xF7	; 247
    260c:	80 93 6f 03 	sts	0x036F, r24
    2610:	30 cf       	rjmp	.-416    	; 0x2472 <main+0x1f56>
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    2612:	80 91 6f 03 	lds	r24, 0x036F
    2616:	88 60       	ori	r24, 0x08	; 8
    2618:	10 c0       	rjmp	.+32     	; 0x263a <main+0x211e>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    261a:	80 91 6d 03 	lds	r24, 0x036D
    261e:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    2620:	8f 7d       	andi	r24, 0xDF	; 223
    2622:	80 93 6d 03 	sts	0x036D, r24
    2626:	1c 8e       	std	Y+28, r1	; 0x1c
    2628:	1b 8e       	std	Y+27, r1	; 0x1b
    262a:	21 e0       	ldi	r18, 0x01	; 1
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	3c 8b       	std	Y+20, r19	; 0x14
    2630:	2b 8b       	std	Y+19, r18	; 0x13
    2632:	64 c0       	rjmp	.+200    	; 0x26fc <main+0x21e0>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    2634:	80 91 6f 03 	lds	r24, 0x036F
    2638:	8d 7f       	andi	r24, 0xFD	; 253
    263a:	80 93 6f 03 	sts	0x036F, r24
    263e:	5e c0       	rjmp	.+188    	; 0x26fc <main+0x21e0>
				case DRY2:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    2640:	80 91 6d 03 	lds	r24, 0x036D
    2644:	8f 7b       	andi	r24, 0xBF	; 191
    2646:	80 93 6d 03 	sts	0x036D, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    264a:	80 91 6f 03 	lds	r24, 0x036F
    264e:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    2650:	8b 7f       	andi	r24, 0xFB	; 251
    2652:	80 93 6f 03 	sts	0x036F, r24
    2656:	1c 8a       	std	Y+20, r1	; 0x14
    2658:	1b 8a       	std	Y+19, r1	; 0x13
    265a:	50 c0       	rjmp	.+160    	; 0x26fc <main+0x21e0>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    265c:	80 91 6e 03 	lds	r24, 0x036E
    2660:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    2662:	80 61       	ori	r24, 0x10	; 16
    2664:	80 93 6e 03 	sts	0x036E, r24
    2668:	1c 8e       	std	Y+28, r1	; 0x1c
    266a:	1b 8e       	std	Y+27, r1	; 0x1b
    266c:	0f e1       	ldi	r16, 0x1F	; 31
    266e:	60 2e       	mov	r6, r16
    2670:	71 2c       	mov	r7, r1
    2672:	44 c0       	rjmp	.+136    	; 0x26fc <main+0x21e0>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    2674:	80 91 6c 03 	lds	r24, 0x036C
    2678:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    267a:	80 62       	ori	r24, 0x20	; 32
    267c:	80 93 6c 03 	sts	0x036C, r24
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	9c 8f       	std	Y+28, r25	; 0x1c
    2686:	8b 8f       	std	Y+27, r24	; 0x1b
    2688:	10 e2       	ldi	r17, 0x20	; 32
    268a:	61 2e       	mov	r6, r17
    268c:	71 2c       	mov	r7, r1
    268e:	36 c0       	rjmp	.+108    	; 0x26fc <main+0x21e0>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2690:	80 91 6c 03 	lds	r24, 0x036C
    2694:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    2696:	84 60       	ori	r24, 0x04	; 4
    2698:	80 93 6c 03 	sts	0x036C, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    269c:	80 91 6e 03 	lds	r24, 0x036E
    26a0:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    26a2:	8f 7e       	andi	r24, 0xEF	; 239
    26a4:	80 93 6e 03 	sts	0x036E, r24
    26a8:	1c 8e       	std	Y+28, r1	; 0x1c
    26aa:	1b 8e       	std	Y+27, r1	; 0x1b
    26ac:	b1 e2       	ldi	r27, 0x21	; 33
    26ae:	6b 2e       	mov	r6, r27
    26b0:	71 2c       	mov	r7, r1
    26b2:	24 c0       	rjmp	.+72     	; 0x26fc <main+0x21e0>
					break;
    26b4:	a2 e2       	ldi	r26, 0x22	; 34
    26b6:	6a 2e       	mov	r6, r26
    26b8:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    26ba:	80 91 6c 03 	lds	r24, 0x036C
    26be:	8d 7f       	andi	r24, 0xFD	; 253
    26c0:	80 93 6c 03 	sts	0x036C, r24
    26c4:	a1 e0       	ldi	r26, 0x01	; 1
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	ba a7       	std	Y+42, r27	; 0x2a
    26ca:	a9 a7       	std	Y+41, r26	; 0x29
    26cc:	17 c0       	rjmp	.+46     	; 0x26fc <main+0x21e0>
					plateLoadMotor = 1;
					break;
    26ce:	f3 e2       	ldi	r31, 0x23	; 35
    26d0:	6f 2e       	mov	r6, r31
    26d2:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    26d4:	80 91 6c 03 	lds	r24, 0x036C
    26d8:	8b 7f       	andi	r24, 0xFB	; 251
    26da:	80 93 6c 03 	sts	0x036C, r24
					if(print35 == 1){
    26de:	2f a9       	ldd	r18, Y+55	; 0x37
    26e0:	38 ad       	ldd	r19, Y+56	; 0x38
    26e2:	21 30       	cpi	r18, 0x01	; 1
    26e4:	31 05       	cpc	r19, r1
    26e6:	41 f4       	brne	.+16     	; 0x26f8 <main+0x21dc>
						OrangutanLCD::clear();
    26e8:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    26ec:	8c e2       	ldi	r24, 0x2C	; 44
    26ee:	93 e0       	ldi	r25, 0x03	; 3
    26f0:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
    26f4:	18 ae       	std	Y+56, r1	; 0x38
    26f6:	1f aa       	std	Y+55, r1	; 0x37
    26f8:	1a a6       	std	Y+42, r1	; 0x2a
    26fa:	19 a6       	std	Y+41, r1	; 0x29
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    26fc:	4d b7       	in	r20, 0x3d	; 61
    26fe:	5e b7       	in	r21, 0x3e	; 62
    2700:	42 51       	subi	r20, 0x12	; 18
    2702:	50 40       	sbci	r21, 0x00	; 0
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	5e bf       	out	0x3e, r21	; 62
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	4d bf       	out	0x3d, r20	; 61
    270e:	ed b7       	in	r30, 0x3d	; 61
    2710:	fe b7       	in	r31, 0x3e	; 62
    2712:	31 96       	adiw	r30, 0x01	; 1
    2714:	82 e0       	ldi	r24, 0x02	; 2
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	ad b7       	in	r26, 0x3d	; 61
    271a:	be b7       	in	r27, 0x3e	; 62
    271c:	12 96       	adiw	r26, 0x02	; 2
    271e:	9c 93       	st	X, r25
    2720:	8e 93       	st	-X, r24
    2722:	11 97       	sbiw	r26, 0x01	; 1
    2724:	93 83       	std	Z+3, r25	; 0x03
    2726:	82 83       	std	Z+2, r24	; 0x02
    2728:	95 83       	std	Z+5, r25	; 0x05
    272a:	84 83       	std	Z+4, r24	; 0x04
    272c:	97 83       	std	Z+7, r25	; 0x07
    272e:	86 83       	std	Z+6, r24	; 0x06
    2730:	21 e0       	ldi	r18, 0x01	; 1
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	31 87       	std	Z+9, r19	; 0x09
    2736:	20 87       	std	Z+8, r18	; 0x08
    2738:	33 87       	std	Z+11, r19	; 0x0b
    273a:	22 87       	std	Z+10, r18	; 0x0a
    273c:	35 87       	std	Z+13, r19	; 0x0d
    273e:	24 87       	std	Z+12, r18	; 0x0c
    2740:	37 87       	std	Z+15, r19	; 0x0f
    2742:	26 87       	std	Z+14, r18	; 0x0e
    2744:	31 8b       	std	Z+17, r19	; 0x11
    2746:	20 8b       	std	Z+16, r18	; 0x10
    2748:	c2 01       	movw	r24, r4
    274a:	b1 01       	movw	r22, r2
    274c:	23 96       	adiw	r28, 0x03	; 3
    274e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2750:	5f ad       	ldd	r21, Y+63	; 0x3f
    2752:	23 97       	sbiw	r28, 0x03	; 3
    2754:	29 a5       	ldd	r18, Y+41	; 0x29
    2756:	3a a5       	ldd	r19, Y+42	; 0x2a
    2758:	0b 8d       	ldd	r16, Y+27	; 0x1b
    275a:	1c 8d       	ldd	r17, Y+28	; 0x1c
    275c:	ed 84       	ldd	r14, Y+13	; 0x0d
    275e:	fe 84       	ldd	r15, Y+14	; 0x0e
    2760:	cb a0       	ldd	r12, Y+35	; 0x23
    2762:	dc a0       	ldd	r13, Y+36	; 0x24
    2764:	ab 88       	ldd	r10, Y+19	; 0x13
    2766:	bc 88       	ldd	r11, Y+20	; 0x14
    2768:	e2 e0       	ldi	r30, 0x02	; 2
    276a:	8e 2e       	mov	r8, r30
    276c:	91 2c       	mov	r9, r1
    276e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    2772:	4d b7       	in	r20, 0x3d	; 61
    2774:	5e b7       	in	r21, 0x3e	; 62
    2776:	4e 5e       	subi	r20, 0xEE	; 238
    2778:	5f 4f       	sbci	r21, 0xFF	; 255
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	5e bf       	out	0x3e, r21	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	4d bf       	out	0x3d, r20	; 61
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("BOTH B");
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    278c:	54 e2       	ldi	r21, 0x24	; 36
    278e:	65 16       	cp	r6, r21
    2790:	71 04       	cpc	r7, r1
    2792:	09 f4       	brne	.+2      	; 0x2796 <main+0x227a>
    2794:	91 c4       	rjmp	.+2338   	; 0x30b8 <main+0x2b9c>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    2796:	08 94       	sec
    2798:	41 1c       	adc	r4, r1
    279a:	51 1c       	adc	r5, r1
    279c:	ad cb       	rjmp	.-2214   	; 0x1ef8 <main+0x19dc>
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    279e:	82 e0       	ldi	r24, 0x02	; 2
    27a0:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
    27a4:	88 23       	and	r24, r24
    27a6:	09 f4       	brne	.+2      	; 0x27aa <main+0x228e>
    27a8:	87 c4       	rjmp	.+2318   	; 0x30b8 <main+0x2b9c>
			OrangutanLCD::gotoXY(7,0);
    27aa:	87 e0       	ldi	r24, 0x07	; 7
    27ac:	60 e0       	ldi	r22, 0x00	; 0
    27ae:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("DEBUG");
    27b2:	81 e1       	ldi	r24, 0x11	; 17
    27b4:	93 e0       	ldi	r25, 0x03	; 3
    27b6:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    27ba:	80 91 6c 03 	lds	r24, 0x036C
    27be:	80 62       	ori	r24, 0x20	; 32
    27c0:	80 93 6c 03 	sts	0x036C, r24
    27c4:	1c 82       	std	Y+4, r1	; 0x04
    27c6:	1b 82       	std	Y+3, r1	; 0x03
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	9e ab       	std	Y+54, r25	; 0x36
    27ce:	8d ab       	std	Y+53, r24	; 0x35
    27d0:	98 ab       	std	Y+48, r25	; 0x30
    27d2:	8f a7       	std	Y+47, r24	; 0x2f
    27d4:	66 24       	eor	r6, r6
    27d6:	77 24       	eor	r7, r7
    27d8:	18 a6       	std	Y+40, r1	; 0x28
    27da:	1f a2       	std	Y+39, r1	; 0x27
    27dc:	1a a2       	std	Y+34, r1	; 0x22
    27de:	19 a2       	std	Y+33, r1	; 0x21
    27e0:	9a 8f       	std	Y+26, r25	; 0x1a
    27e2:	89 8f       	std	Y+25, r24	; 0x19
    27e4:	1a 8a       	std	Y+18, r1	; 0x12
    27e6:	19 8a       	std	Y+17, r1	; 0x11
    27e8:	1c 86       	std	Y+12, r1	; 0x0c
    27ea:	1b 86       	std	Y+11, r1	; 0x0b
    27ec:	44 24       	eor	r4, r4
    27ee:	55 24       	eor	r5, r5
    27f0:	25 96       	adiw	r28, 0x05	; 5
    27f2:	1f ae       	std	Y+63, r1	; 0x3f
    27f4:	1e ae       	std	Y+62, r1	; 0x3e
    27f6:	25 97       	sbiw	r28, 0x05	; 5
    27f8:	22 24       	eor	r2, r2
    27fa:	33 24       	eor	r3, r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    27fc:	84 e4       	ldi	r24, 0x44	; 68
    27fe:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2808:	85 e4       	ldi	r24, 0x45	; 69
    280a:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    280e:	0e 94 1f 19 	call	0x323e	; 0x323e <_Z11i2c_readAckv>
    2812:	80 93 70 03 	sts	0x0370, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2816:	0e 94 29 19 	call	0x3252	; 0x3252 <_Z11i2c_readNakv>
    281a:	80 93 71 03 	sts	0x0371, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    281e:	0e 94 05 19 	call	0x320a	; 0x320a <_Z8i2c_stopv>
				
				if(state != INIT){
    2822:	61 14       	cp	r6, r1
    2824:	71 04       	cpc	r7, r1
    2826:	79 f0       	breq	.+30     	; 0x2846 <main+0x232a>
					OrangutanLCD::gotoXY(0,1);
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	61 e0       	ldi	r22, 0x01	; 1
    282c:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    2830:	87 e1       	ldi	r24, 0x17	; 23
    2832:	93 e0       	ldi	r25, 0x03	; 3
    2834:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
    2838:	b3 01       	movw	r22, r6
    283a:	88 27       	eor	r24, r24
    283c:	77 fd       	sbrc	r23, 7
    283e:	80 95       	com	r24
    2840:	98 2f       	mov	r25, r24
    2842:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_ZN12OrangutanLCD5printEl>
						button = 0;
						stateButton = 0;
					}
				}*/

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    2846:	c2 01       	movw	r24, r4
    2848:	be 01       	movw	r22, r28
    284a:	6f 5f       	subi	r22, 0xFF	; 255
    284c:	7f 4f       	sbci	r23, 0xFF	; 255
    284e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z15button_debounceiPi>
    2852:	28 2f       	mov	r18, r24

				//state transitions
	
				if(state == INIT && buttonTriggered){
    2854:	61 14       	cp	r6, r1
    2856:	71 04       	cpc	r7, r1
    2858:	21 f4       	brne	.+8      	; 0x2862 <main+0x2346>
    285a:	88 23       	and	r24, r24
    285c:	09 f0       	breq	.+2      	; 0x2860 <main+0x2344>
    285e:	69 c4       	rjmp	.+2258   	; 0x3132 <main+0x2c16>
    2860:	6c c4       	rjmp	.+2264   	; 0x313a <main+0x2c1e>
					buttonTriggered = false;
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    2862:	91 e0       	ldi	r25, 0x01	; 1
    2864:	69 16       	cp	r6, r25
    2866:	71 04       	cpc	r7, r1
    2868:	59 f4       	brne	.+22     	; 0x2880 <main+0x2364>
    286a:	c2 01       	movw	r24, r4
    286c:	82 19       	sub	r24, r2
    286e:	93 09       	sbc	r25, r3
    2870:	81 5a       	subi	r24, 0xA1	; 161
    2872:	9f 40       	sbci	r25, 0x0F	; 15
    2874:	a4 f0       	brlt	.+40     	; 0x289e <main+0x2382>
    2876:	12 01       	movw	r2, r4
    2878:	45 e2       	ldi	r20, 0x25	; 37
    287a:	64 2e       	mov	r6, r20
    287c:	71 2c       	mov	r7, r1
    287e:	0f c0       	rjmp	.+30     	; 0x289e <main+0x2382>
					state = WAIT;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    2880:	b2 e0       	ldi	r27, 0x02	; 2
    2882:	6b 16       	cp	r6, r27
    2884:	71 04       	cpc	r7, r1
    2886:	59 f4       	brne	.+22     	; 0x289e <main+0x2382>
    2888:	c2 01       	movw	r24, r4
    288a:	82 19       	sub	r24, r2
    288c:	93 09       	sbc	r25, r3
    288e:	85 36       	cpi	r24, 0x65	; 101
    2890:	91 05       	cpc	r25, r1
    2892:	94 f0       	brlt	.+36     	; 0x28b8 <main+0x239c>
    2894:	12 01       	movw	r2, r4
    2896:	35 e2       	ldi	r19, 0x25	; 37
    2898:	63 2e       	mov	r6, r19
    289a:	71 2c       	mov	r7, r1
    289c:	0d c0       	rjmp	.+26     	; 0x28b8 <main+0x239c>
					state = WAIT;
					counterRef = counter;
				}
				if(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    289e:	33 e0       	ldi	r19, 0x03	; 3
    28a0:	63 16       	cp	r6, r19
    28a2:	71 04       	cpc	r7, r1
    28a4:	49 f4       	brne	.+18     	; 0x28b8 <main+0x239c>
    28a6:	80 91 70 03 	lds	r24, 0x0370
    28aa:	81 fd       	sbrc	r24, 1
    28ac:	12 c0       	rjmp	.+36     	; 0x28d2 <main+0x23b6>
    28ae:	12 01       	movw	r2, r4
    28b0:	95 e2       	ldi	r25, 0x25	; 37
    28b2:	69 2e       	mov	r6, r25
    28b4:	71 2c       	mov	r7, r1
    28b6:	0d c0       	rjmp	.+26     	; 0x28d2 <main+0x23b6>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    28b8:	44 e0       	ldi	r20, 0x04	; 4
    28ba:	64 16       	cp	r6, r20
    28bc:	71 04       	cpc	r7, r1
    28be:	49 f4       	brne	.+18     	; 0x28d2 <main+0x23b6>
    28c0:	80 91 70 03 	lds	r24, 0x0370
    28c4:	83 fd       	sbrc	r24, 3
    28c6:	14 c0       	rjmp	.+40     	; 0x28f0 <main+0x23d4>
    28c8:	12 01       	movw	r2, r4
    28ca:	85 e2       	ldi	r24, 0x25	; 37
    28cc:	68 2e       	mov	r6, r24
    28ce:	71 2c       	mov	r7, r1
    28d0:	0f c0       	rjmp	.+30     	; 0x28f0 <main+0x23d4>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    28d2:	55 e0       	ldi	r21, 0x05	; 5
    28d4:	65 16       	cp	r6, r21
    28d6:	71 04       	cpc	r7, r1
    28d8:	59 f4       	brne	.+22     	; 0x28f0 <main+0x23d4>
    28da:	c2 01       	movw	r24, r4
    28dc:	82 19       	sub	r24, r2
    28de:	93 09       	sbc	r25, r3
    28e0:	85 36       	cpi	r24, 0x65	; 101
    28e2:	91 05       	cpc	r25, r1
    28e4:	a4 f0       	brlt	.+40     	; 0x290e <main+0x23f2>
    28e6:	12 01       	movw	r2, r4
    28e8:	05 e2       	ldi	r16, 0x25	; 37
    28ea:	60 2e       	mov	r6, r16
    28ec:	71 2c       	mov	r7, r1
    28ee:	0f c0       	rjmp	.+30     	; 0x290e <main+0x23f2>
					state = WAIT;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    28f0:	86 e0       	ldi	r24, 0x06	; 6
    28f2:	68 16       	cp	r6, r24
    28f4:	71 04       	cpc	r7, r1
    28f6:	59 f4       	brne	.+22     	; 0x290e <main+0x23f2>
    28f8:	c2 01       	movw	r24, r4
    28fa:	82 19       	sub	r24, r2
    28fc:	93 09       	sbc	r25, r3
    28fe:	81 5a       	subi	r24, 0xA1	; 161
    2900:	9f 40       	sbci	r25, 0x0F	; 15
    2902:	a4 f0       	brlt	.+40     	; 0x292c <main+0x2410>
    2904:	12 01       	movw	r2, r4
    2906:	15 e2       	ldi	r17, 0x25	; 37
    2908:	61 2e       	mov	r6, r17
    290a:	71 2c       	mov	r7, r1
    290c:	0f c0       	rjmp	.+30     	; 0x292c <main+0x2410>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    290e:	b7 e0       	ldi	r27, 0x07	; 7
    2910:	6b 16       	cp	r6, r27
    2912:	71 04       	cpc	r7, r1
    2914:	59 f4       	brne	.+22     	; 0x292c <main+0x2410>
    2916:	c2 01       	movw	r24, r4
    2918:	82 19       	sub	r24, r2
    291a:	93 09       	sbc	r25, r3
    291c:	85 36       	cpi	r24, 0x65	; 101
    291e:	91 05       	cpc	r25, r1
    2920:	a4 f0       	brlt	.+40     	; 0x294a <main+0x242e>
    2922:	12 01       	movw	r2, r4
    2924:	b5 e2       	ldi	r27, 0x25	; 37
    2926:	6b 2e       	mov	r6, r27
    2928:	71 2c       	mov	r7, r1
    292a:	0f c0       	rjmp	.+30     	; 0x294a <main+0x242e>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    292c:	38 e0       	ldi	r19, 0x08	; 8
    292e:	63 16       	cp	r6, r19
    2930:	71 04       	cpc	r7, r1
    2932:	59 f4       	brne	.+22     	; 0x294a <main+0x242e>
    2934:	c2 01       	movw	r24, r4
    2936:	82 19       	sub	r24, r2
    2938:	93 09       	sbc	r25, r3
    293a:	85 36       	cpi	r24, 0x65	; 101
    293c:	91 05       	cpc	r25, r1
    293e:	a4 f0       	brlt	.+40     	; 0x2968 <main+0x244c>
    2940:	12 01       	movw	r2, r4
    2942:	a5 e2       	ldi	r26, 0x25	; 37
    2944:	6a 2e       	mov	r6, r26
    2946:	71 2c       	mov	r7, r1
    2948:	0f c0       	rjmp	.+30     	; 0x2968 <main+0x244c>
					state = WAIT;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    294a:	49 e0       	ldi	r20, 0x09	; 9
    294c:	64 16       	cp	r6, r20
    294e:	71 04       	cpc	r7, r1
    2950:	59 f4       	brne	.+22     	; 0x2968 <main+0x244c>
    2952:	c2 01       	movw	r24, r4
    2954:	82 19       	sub	r24, r2
    2956:	93 09       	sbc	r25, r3
    2958:	81 5d       	subi	r24, 0xD1	; 209
    295a:	97 40       	sbci	r25, 0x07	; 7
    295c:	9c f0       	brlt	.+38     	; 0x2984 <main+0x2468>
    295e:	12 01       	movw	r2, r4
    2960:	f5 e2       	ldi	r31, 0x25	; 37
    2962:	6f 2e       	mov	r6, r31
    2964:	71 2c       	mov	r7, r1
    2966:	0e c0       	rjmp	.+28     	; 0x2984 <main+0x2468>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    2968:	8a e0       	ldi	r24, 0x0A	; 10
    296a:	68 16       	cp	r6, r24
    296c:	71 04       	cpc	r7, r1
    296e:	51 f4       	brne	.+20     	; 0x2984 <main+0x2468>
    2970:	c2 01       	movw	r24, r4
    2972:	82 19       	sub	r24, r2
    2974:	93 09       	sbc	r25, r3
    2976:	85 36       	cpi	r24, 0x65	; 101
    2978:	91 05       	cpc	r25, r1
    297a:	9c f0       	brlt	.+38     	; 0x29a2 <main+0x2486>
    297c:	e5 e2       	ldi	r30, 0x25	; 37
    297e:	6e 2e       	mov	r6, r30
    2980:	71 2c       	mov	r7, r1
    2982:	0f c0       	rjmp	.+30     	; 0x29a2 <main+0x2486>
					state = WAIT;
				}
				if(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    2984:	9b e0       	ldi	r25, 0x0B	; 11
    2986:	69 16       	cp	r6, r25
    2988:	71 04       	cpc	r7, r1
    298a:	59 f4       	brne	.+22     	; 0x29a2 <main+0x2486>
    298c:	c2 01       	movw	r24, r4
    298e:	82 19       	sub	r24, r2
    2990:	93 09       	sbc	r25, r3
    2992:	81 5d       	subi	r24, 0xD1	; 209
    2994:	97 40       	sbci	r25, 0x07	; 7
    2996:	a4 f0       	brlt	.+40     	; 0x29c0 <main+0x24a4>
    2998:	12 01       	movw	r2, r4
    299a:	75 e2       	ldi	r23, 0x25	; 37
    299c:	67 2e       	mov	r6, r23
    299e:	71 2c       	mov	r7, r1
    29a0:	0f c0       	rjmp	.+30     	; 0x29c0 <main+0x24a4>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    29a2:	bc e0       	ldi	r27, 0x0C	; 12
    29a4:	6b 16       	cp	r6, r27
    29a6:	71 04       	cpc	r7, r1
    29a8:	59 f4       	brne	.+22     	; 0x29c0 <main+0x24a4>
    29aa:	c2 01       	movw	r24, r4
    29ac:	82 19       	sub	r24, r2
    29ae:	93 09       	sbc	r25, r3
    29b0:	85 36       	cpi	r24, 0x65	; 101
    29b2:	91 05       	cpc	r25, r1
    29b4:	9c f0       	brlt	.+38     	; 0x29dc <main+0x24c0>
    29b6:	12 01       	movw	r2, r4
    29b8:	65 e2       	ldi	r22, 0x25	; 37
    29ba:	66 2e       	mov	r6, r22
    29bc:	71 2c       	mov	r7, r1
    29be:	0e c0       	rjmp	.+28     	; 0x29dc <main+0x24c0>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    29c0:	3d e0       	ldi	r19, 0x0D	; 13
    29c2:	63 16       	cp	r6, r19
    29c4:	71 04       	cpc	r7, r1
    29c6:	51 f4       	brne	.+20     	; 0x29dc <main+0x24c0>
    29c8:	c2 01       	movw	r24, r4
    29ca:	82 19       	sub	r24, r2
    29cc:	93 09       	sbc	r25, r3
    29ce:	81 5d       	subi	r24, 0xD1	; 209
    29d0:	97 40       	sbci	r25, 0x07	; 7
    29d2:	9c f0       	brlt	.+38     	; 0x29fa <main+0x24de>
    29d4:	55 e2       	ldi	r21, 0x25	; 37
    29d6:	65 2e       	mov	r6, r21
    29d8:	71 2c       	mov	r7, r1
    29da:	0f c0       	rjmp	.+30     	; 0x29fa <main+0x24de>
					state = WAIT;
					counterRef14 = counter;
				}
				if(state == B1STOP2 && counter - counterRef > totalStepLength2*fixtureMotorBrush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    29dc:	5e e0       	ldi	r21, 0x0E	; 14
    29de:	65 16       	cp	r6, r21
    29e0:	71 04       	cpc	r7, r1
    29e2:	59 f4       	brne	.+22     	; 0x29fa <main+0x24de>
    29e4:	c2 01       	movw	r24, r4
    29e6:	82 19       	sub	r24, r2
    29e8:	93 09       	sbc	r25, r3
    29ea:	81 5a       	subi	r24, 0xA1	; 161
    29ec:	9f 40       	sbci	r25, 0x0F	; 15
    29ee:	a4 f0       	brlt	.+40     	; 0x2a18 <main+0x24fc>
    29f0:	12 01       	movw	r2, r4
    29f2:	45 e2       	ldi	r20, 0x25	; 37
    29f4:	64 2e       	mov	r6, r20
    29f6:	71 2c       	mov	r7, r1
    29f8:	0f c0       	rjmp	.+30     	; 0x2a18 <main+0x24fc>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    29fa:	bf e0       	ldi	r27, 0x0F	; 15
    29fc:	6b 16       	cp	r6, r27
    29fe:	71 04       	cpc	r7, r1
    2a00:	59 f4       	brne	.+22     	; 0x2a18 <main+0x24fc>
    2a02:	c2 01       	movw	r24, r4
    2a04:	82 19       	sub	r24, r2
    2a06:	93 09       	sbc	r25, r3
    2a08:	85 36       	cpi	r24, 0x65	; 101
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	a4 f0       	brlt	.+40     	; 0x2a36 <main+0x251a>
    2a0e:	12 01       	movw	r2, r4
    2a10:	35 e2       	ldi	r19, 0x25	; 37
    2a12:	63 2e       	mov	r6, r19
    2a14:	71 2c       	mov	r7, r1
    2a16:	0f c0       	rjmp	.+30     	; 0x2a36 <main+0x251a>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    2a18:	30 e1       	ldi	r19, 0x10	; 16
    2a1a:	63 16       	cp	r6, r19
    2a1c:	71 04       	cpc	r7, r1
    2a1e:	59 f4       	brne	.+22     	; 0x2a36 <main+0x251a>
    2a20:	c2 01       	movw	r24, r4
    2a22:	82 19       	sub	r24, r2
    2a24:	93 09       	sbc	r25, r3
    2a26:	85 36       	cpi	r24, 0x65	; 101
    2a28:	91 05       	cpc	r25, r1
    2a2a:	a4 f0       	brlt	.+40     	; 0x2a54 <main+0x2538>
    2a2c:	12 01       	movw	r2, r4
    2a2e:	95 e2       	ldi	r25, 0x25	; 37
    2a30:	69 2e       	mov	r6, r25
    2a32:	71 2c       	mov	r7, r1
    2a34:	0f c0       	rjmp	.+30     	; 0x2a54 <main+0x2538>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2a36:	41 e1       	ldi	r20, 0x11	; 17
    2a38:	64 16       	cp	r6, r20
    2a3a:	71 04       	cpc	r7, r1
    2a3c:	59 f4       	brne	.+22     	; 0x2a54 <main+0x2538>
    2a3e:	c2 01       	movw	r24, r4
    2a40:	82 19       	sub	r24, r2
    2a42:	93 09       	sbc	r25, r3
    2a44:	81 5d       	subi	r24, 0xD1	; 209
    2a46:	97 40       	sbci	r25, 0x07	; 7
    2a48:	a4 f0       	brlt	.+40     	; 0x2a72 <main+0x2556>
    2a4a:	12 01       	movw	r2, r4
    2a4c:	85 e2       	ldi	r24, 0x25	; 37
    2a4e:	68 2e       	mov	r6, r24
    2a50:	71 2c       	mov	r7, r1
    2a52:	0f c0       	rjmp	.+30     	; 0x2a72 <main+0x2556>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    2a54:	82 e1       	ldi	r24, 0x12	; 18
    2a56:	68 16       	cp	r6, r24
    2a58:	71 04       	cpc	r7, r1
    2a5a:	59 f4       	brne	.+22     	; 0x2a72 <main+0x2556>
    2a5c:	c2 01       	movw	r24, r4
    2a5e:	82 19       	sub	r24, r2
    2a60:	93 09       	sbc	r25, r3
    2a62:	85 36       	cpi	r24, 0x65	; 101
    2a64:	91 05       	cpc	r25, r1
    2a66:	a4 f0       	brlt	.+40     	; 0x2a90 <main+0x2574>
    2a68:	12 01       	movw	r2, r4
    2a6a:	05 e2       	ldi	r16, 0x25	; 37
    2a6c:	60 2e       	mov	r6, r16
    2a6e:	71 2c       	mov	r7, r1
    2a70:	0f c0       	rjmp	.+30     	; 0x2a90 <main+0x2574>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    2a72:	93 e1       	ldi	r25, 0x13	; 19
    2a74:	69 16       	cp	r6, r25
    2a76:	71 04       	cpc	r7, r1
    2a78:	59 f4       	brne	.+22     	; 0x2a90 <main+0x2574>
    2a7a:	c2 01       	movw	r24, r4
    2a7c:	82 19       	sub	r24, r2
    2a7e:	93 09       	sbc	r25, r3
    2a80:	81 5d       	subi	r24, 0xD1	; 209
    2a82:	97 40       	sbci	r25, 0x07	; 7
    2a84:	a4 f0       	brlt	.+40     	; 0x2aae <main+0x2592>
    2a86:	12 01       	movw	r2, r4
    2a88:	15 e2       	ldi	r17, 0x25	; 37
    2a8a:	61 2e       	mov	r6, r17
    2a8c:	71 2c       	mov	r7, r1
    2a8e:	0f c0       	rjmp	.+30     	; 0x2aae <main+0x2592>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    2a90:	b4 e1       	ldi	r27, 0x14	; 20
    2a92:	6b 16       	cp	r6, r27
    2a94:	71 04       	cpc	r7, r1
    2a96:	59 f4       	brne	.+22     	; 0x2aae <main+0x2592>
    2a98:	c2 01       	movw	r24, r4
    2a9a:	82 19       	sub	r24, r2
    2a9c:	93 09       	sbc	r25, r3
    2a9e:	85 36       	cpi	r24, 0x65	; 101
    2aa0:	91 05       	cpc	r25, r1
    2aa2:	a4 f0       	brlt	.+40     	; 0x2acc <main+0x25b0>
    2aa4:	12 01       	movw	r2, r4
    2aa6:	b5 e2       	ldi	r27, 0x25	; 37
    2aa8:	6b 2e       	mov	r6, r27
    2aaa:	71 2c       	mov	r7, r1
    2aac:	0f c0       	rjmp	.+30     	; 0x2acc <main+0x25b0>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2aae:	35 e1       	ldi	r19, 0x15	; 21
    2ab0:	63 16       	cp	r6, r19
    2ab2:	71 04       	cpc	r7, r1
    2ab4:	59 f4       	brne	.+22     	; 0x2acc <main+0x25b0>
    2ab6:	c2 01       	movw	r24, r4
    2ab8:	82 19       	sub	r24, r2
    2aba:	93 09       	sbc	r25, r3
    2abc:	81 5d       	subi	r24, 0xD1	; 209
    2abe:	97 40       	sbci	r25, 0x07	; 7
    2ac0:	a4 f0       	brlt	.+40     	; 0x2aea <main+0x25ce>
    2ac2:	12 01       	movw	r2, r4
    2ac4:	a5 e2       	ldi	r26, 0x25	; 37
    2ac6:	6a 2e       	mov	r6, r26
    2ac8:	71 2c       	mov	r7, r1
    2aca:	0f c0       	rjmp	.+30     	; 0x2aea <main+0x25ce>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    2acc:	56 e1       	ldi	r21, 0x16	; 22
    2ace:	65 16       	cp	r6, r21
    2ad0:	71 04       	cpc	r7, r1
    2ad2:	59 f4       	brne	.+22     	; 0x2aea <main+0x25ce>
    2ad4:	c2 01       	movw	r24, r4
    2ad6:	82 19       	sub	r24, r2
    2ad8:	93 09       	sbc	r25, r3
    2ada:	85 36       	cpi	r24, 0x65	; 101
    2adc:	91 05       	cpc	r25, r1
    2ade:	a4 f0       	brlt	.+40     	; 0x2b08 <main+0x25ec>
    2ae0:	12 01       	movw	r2, r4
    2ae2:	f5 e2       	ldi	r31, 0x25	; 37
    2ae4:	6f 2e       	mov	r6, r31
    2ae6:	71 2c       	mov	r7, r1
    2ae8:	0f c0       	rjmp	.+30     	; 0x2b08 <main+0x25ec>
					state = WAIT;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    2aea:	87 e1       	ldi	r24, 0x17	; 23
    2aec:	68 16       	cp	r6, r24
    2aee:	71 04       	cpc	r7, r1
    2af0:	59 f4       	brne	.+22     	; 0x2b08 <main+0x25ec>
    2af2:	c2 01       	movw	r24, r4
    2af4:	82 19       	sub	r24, r2
    2af6:	93 09       	sbc	r25, r3
    2af8:	81 5a       	subi	r24, 0xA1	; 161
    2afa:	9f 40       	sbci	r25, 0x0F	; 15
    2afc:	a4 f0       	brlt	.+40     	; 0x2b26 <main+0x260a>
    2afe:	12 01       	movw	r2, r4
    2b00:	e5 e2       	ldi	r30, 0x25	; 37
    2b02:	6e 2e       	mov	r6, r30
    2b04:	71 2c       	mov	r7, r1
    2b06:	0f c0       	rjmp	.+30     	; 0x2b26 <main+0x260a>
					state = WAIT;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    2b08:	b8 e1       	ldi	r27, 0x18	; 24
    2b0a:	6b 16       	cp	r6, r27
    2b0c:	71 04       	cpc	r7, r1
    2b0e:	59 f4       	brne	.+22     	; 0x2b26 <main+0x260a>
    2b10:	c2 01       	movw	r24, r4
    2b12:	82 19       	sub	r24, r2
    2b14:	93 09       	sbc	r25, r3
    2b16:	85 36       	cpi	r24, 0x65	; 101
    2b18:	91 05       	cpc	r25, r1
    2b1a:	9c f0       	brlt	.+38     	; 0x2b42 <main+0x2626>
    2b1c:	12 01       	movw	r2, r4
    2b1e:	75 e2       	ldi	r23, 0x25	; 37
    2b20:	67 2e       	mov	r6, r23
    2b22:	71 2c       	mov	r7, r1
    2b24:	0e c0       	rjmp	.+28     	; 0x2b42 <main+0x2626>
					state = WAIT;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2b26:	39 e1       	ldi	r19, 0x19	; 25
    2b28:	63 16       	cp	r6, r19
    2b2a:	71 04       	cpc	r7, r1
    2b2c:	51 f4       	brne	.+20     	; 0x2b42 <main+0x2626>
    2b2e:	c2 01       	movw	r24, r4
    2b30:	82 19       	sub	r24, r2
    2b32:	93 09       	sbc	r25, r3
    2b34:	81 5a       	subi	r24, 0xA1	; 161
    2b36:	9f 40       	sbci	r25, 0x0F	; 15
    2b38:	a4 f0       	brlt	.+40     	; 0x2b62 <main+0x2646>
    2b3a:	65 e2       	ldi	r22, 0x25	; 37
    2b3c:	66 2e       	mov	r6, r22
    2b3e:	71 2c       	mov	r7, r1
    2b40:	10 c0       	rjmp	.+32     	; 0x2b62 <main+0x2646>
					state = WAIT;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    2b42:	5a e1       	ldi	r21, 0x1A	; 26
    2b44:	65 16       	cp	r6, r21
    2b46:	71 04       	cpc	r7, r1
    2b48:	61 f4       	brne	.+24     	; 0x2b62 <main+0x2646>
    2b4a:	c2 01       	movw	r24, r4
    2b4c:	82 19       	sub	r24, r2
    2b4e:	93 09       	sbc	r25, r3
    2b50:	81 5a       	subi	r24, 0xA1	; 161
    2b52:	9f 40       	sbci	r25, 0x0F	; 15
    2b54:	bc f0       	brlt	.+46     	; 0x2b84 <main+0x2668>
    2b56:	5c 82       	std	Y+4, r5	; 0x04
    2b58:	4b 82       	std	Y+3, r4	; 0x03
    2b5a:	55 e2       	ldi	r21, 0x25	; 37
    2b5c:	65 2e       	mov	r6, r21
    2b5e:	71 2c       	mov	r7, r1
    2b60:	11 c0       	rjmp	.+34     	; 0x2b84 <main+0x2668>
					state = WAIT;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    2b62:	bb e1       	ldi	r27, 0x1B	; 27
    2b64:	6b 16       	cp	r6, r27
    2b66:	71 04       	cpc	r7, r1
    2b68:	69 f4       	brne	.+26     	; 0x2b84 <main+0x2668>
    2b6a:	c2 01       	movw	r24, r4
    2b6c:	4b 81       	ldd	r20, Y+3	; 0x03
    2b6e:	5c 81       	ldd	r21, Y+4	; 0x04
    2b70:	84 1b       	sub	r24, r20
    2b72:	95 0b       	sbc	r25, r21
    2b74:	85 36       	cpi	r24, 0x65	; 101
    2b76:	91 05       	cpc	r25, r1
    2b78:	a4 f0       	brlt	.+40     	; 0x2ba2 <main+0x2686>
    2b7a:	12 01       	movw	r2, r4
    2b7c:	45 e2       	ldi	r20, 0x25	; 37
    2b7e:	64 2e       	mov	r6, r20
    2b80:	71 2c       	mov	r7, r1
    2b82:	0f c0       	rjmp	.+30     	; 0x2ba2 <main+0x2686>
					state = WAIT;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    2b84:	5c e1       	ldi	r21, 0x1C	; 28
    2b86:	65 16       	cp	r6, r21
    2b88:	71 04       	cpc	r7, r1
    2b8a:	59 f4       	brne	.+22     	; 0x2ba2 <main+0x2686>
    2b8c:	c2 01       	movw	r24, r4
    2b8e:	82 19       	sub	r24, r2
    2b90:	93 09       	sbc	r25, r3
    2b92:	85 36       	cpi	r24, 0x65	; 101
    2b94:	91 05       	cpc	r25, r1
    2b96:	9c f0       	brlt	.+38     	; 0x2bbe <main+0x26a2>
    2b98:	12 01       	movw	r2, r4
    2b9a:	35 e2       	ldi	r19, 0x25	; 37
    2b9c:	63 2e       	mov	r6, r19
    2b9e:	71 2c       	mov	r7, r1
    2ba0:	0e c0       	rjmp	.+28     	; 0x2bbe <main+0x26a2>
					state = WAIT;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2ba2:	8d e1       	ldi	r24, 0x1D	; 29
    2ba4:	68 16       	cp	r6, r24
    2ba6:	71 04       	cpc	r7, r1
    2ba8:	51 f4       	brne	.+20     	; 0x2bbe <main+0x26a2>
    2baa:	c2 01       	movw	r24, r4
    2bac:	82 19       	sub	r24, r2
    2bae:	93 09       	sbc	r25, r3
    2bb0:	81 5a       	subi	r24, 0xA1	; 161
    2bb2:	9f 40       	sbci	r25, 0x0F	; 15
    2bb4:	8c f0       	brlt	.+34     	; 0x2bd8 <main+0x26bc>
    2bb6:	95 e2       	ldi	r25, 0x25	; 37
    2bb8:	69 2e       	mov	r6, r25
    2bba:	71 2c       	mov	r7, r1
    2bbc:	0d c0       	rjmp	.+26     	; 0x2bd8 <main+0x26bc>
					state = WAIT;
					counterRef30 = counter;
				}
				if(state == D2STOP && /*counter - counterRef > totalStepLength2*fixtureMotorLoadBack &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    2bbe:	be e1       	ldi	r27, 0x1E	; 30
    2bc0:	6b 16       	cp	r6, r27
    2bc2:	71 04       	cpc	r7, r1
    2bc4:	49 f4       	brne	.+18     	; 0x2bd8 <main+0x26bc>
    2bc6:	80 91 70 03 	lds	r24, 0x0370
    2bca:	83 fd       	sbrc	r24, 3
    2bcc:	12 c0       	rjmp	.+36     	; 0x2bf2 <main+0x26d6>
    2bce:	12 01       	movw	r2, r4
    2bd0:	85 e2       	ldi	r24, 0x25	; 37
    2bd2:	68 2e       	mov	r6, r24
    2bd4:	71 2c       	mov	r7, r1
    2bd6:	0d c0       	rjmp	.+26     	; 0x2bf2 <main+0x26d6>
					state = WAIT;
					counterRef = counter;
				}
				if(state == RAISEL2 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    2bd8:	3f e1       	ldi	r19, 0x1F	; 31
    2bda:	63 16       	cp	r6, r19
    2bdc:	71 04       	cpc	r7, r1
    2bde:	49 f4       	brne	.+18     	; 0x2bf2 <main+0x26d6>
    2be0:	80 91 70 03 	lds	r24, 0x0370
    2be4:	81 fd       	sbrc	r24, 1
    2be6:	12 c0       	rjmp	.+36     	; 0x2c0c <main+0x26f0>
    2be8:	12 01       	movw	r2, r4
    2bea:	05 e2       	ldi	r16, 0x25	; 37
    2bec:	60 2e       	mov	r6, r16
    2bee:	71 2c       	mov	r7, r1
    2bf0:	0d c0       	rjmp	.+26     	; 0x2c0c <main+0x26f0>
					state = WAIT;
					counterRef = counter;
				}
				if(state == FIXH && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureHome == 0){
    2bf2:	40 e2       	ldi	r20, 0x20	; 32
    2bf4:	64 16       	cp	r6, r20
    2bf6:	71 04       	cpc	r7, r1
    2bf8:	49 f4       	brne	.+18     	; 0x2c0c <main+0x26f0>
    2bfa:	80 91 70 03 	lds	r24, 0x0370
    2bfe:	82 fd       	sbrc	r24, 2
    2c00:	14 c0       	rjmp	.+40     	; 0x2c2a <main+0x270e>
    2c02:	12 01       	movw	r2, r4
    2c04:	15 e2       	ldi	r17, 0x25	; 37
    2c06:	61 2e       	mov	r6, r17
    2c08:	71 2c       	mov	r7, r1
    2c0a:	0f c0       	rjmp	.+30     	; 0x2c2a <main+0x270e>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    2c0c:	51 e2       	ldi	r21, 0x21	; 33
    2c0e:	65 16       	cp	r6, r21
    2c10:	71 04       	cpc	r7, r1
    2c12:	59 f4       	brne	.+22     	; 0x2c2a <main+0x270e>
    2c14:	c2 01       	movw	r24, r4
    2c16:	82 19       	sub	r24, r2
    2c18:	93 09       	sbc	r25, r3
    2c1a:	85 36       	cpi	r24, 0x65	; 101
    2c1c:	91 05       	cpc	r25, r1
    2c1e:	a4 f0       	brlt	.+40     	; 0x2c48 <main+0x272c>
    2c20:	12 01       	movw	r2, r4
    2c22:	b5 e2       	ldi	r27, 0x25	; 37
    2c24:	6b 2e       	mov	r6, r27
    2c26:	71 2c       	mov	r7, r1
    2c28:	0f c0       	rjmp	.+30     	; 0x2c48 <main+0x272c>
					state = WAIT;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    2c2a:	82 e2       	ldi	r24, 0x22	; 34
    2c2c:	68 16       	cp	r6, r24
    2c2e:	71 04       	cpc	r7, r1
    2c30:	59 f4       	brne	.+22     	; 0x2c48 <main+0x272c>
    2c32:	c2 01       	movw	r24, r4
    2c34:	82 19       	sub	r24, r2
    2c36:	93 09       	sbc	r25, r3
    2c38:	81 5a       	subi	r24, 0xA1	; 161
    2c3a:	9f 40       	sbci	r25, 0x0F	; 15
    2c3c:	94 f0       	brlt	.+36     	; 0x2c62 <main+0x2746>
    2c3e:	12 01       	movw	r2, r4
    2c40:	a5 e2       	ldi	r26, 0x25	; 37
    2c42:	6a 2e       	mov	r6, r26
    2c44:	71 2c       	mov	r7, r1
    2c46:	0d c0       	rjmp	.+26     	; 0x2c62 <main+0x2746>
					state = WAIT;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    2c48:	b3 e2       	ldi	r27, 0x23	; 35
    2c4a:	6b 16       	cp	r6, r27
    2c4c:	71 04       	cpc	r7, r1
    2c4e:	49 f4       	brne	.+18     	; 0x2c62 <main+0x2746>
    2c50:	c2 01       	movw	r24, r4
    2c52:	82 19       	sub	r24, r2
    2c54:	93 09       	sbc	r25, r3
    2c56:	0b 97       	sbiw	r24, 0x0b	; 11
    2c58:	ac f0       	brlt	.+42     	; 0x2c84 <main+0x2768>
    2c5a:	f4 e2       	ldi	r31, 0x24	; 36
    2c5c:	6f 2e       	mov	r6, r31
    2c5e:	71 2c       	mov	r7, r1
    2c60:	11 c0       	rjmp	.+34     	; 0x2c84 <main+0x2768>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    2c62:	35 e2       	ldi	r19, 0x25	; 37
    2c64:	63 16       	cp	r6, r19
    2c66:	71 04       	cpc	r7, r1
    2c68:	69 f4       	brne	.+26     	; 0x2c84 <main+0x2768>
    2c6a:	22 23       	and	r18, r18
    2c6c:	c1 f0       	breq	.+48     	; 0x2c9e <main+0x2782>
					state = ++last;
    2c6e:	25 96       	adiw	r28, 0x05	; 5
    2c70:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c72:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c74:	25 97       	sbiw	r28, 0x05	; 5
    2c76:	4f 5f       	subi	r20, 0xFF	; 255
    2c78:	5f 4f       	sbci	r21, 0xFF	; 255
    2c7a:	25 96       	adiw	r28, 0x05	; 5
    2c7c:	5f af       	std	Y+63, r21	; 0x3f
    2c7e:	4e af       	std	Y+62, r20	; 0x3e
    2c80:	25 97       	sbiw	r28, 0x05	; 5
    2c82:	3a 01       	movw	r6, r20
				}


				//state actions
						
			switch (state){
    2c84:	f3 01       	movw	r30, r6
    2c86:	e6 32       	cpi	r30, 0x26	; 38
    2c88:	f1 05       	cpc	r31, r1
    2c8a:	08 f0       	brcs	.+2      	; 0x2c8e <main+0x2772>
    2c8c:	c9 c1       	rjmp	.+914    	; 0x3020 <main+0x2b04>
    2c8e:	e4 52       	subi	r30, 0x24	; 36
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	ee 0f       	add	r30, r30
    2c94:	ff 1f       	adc	r31, r31
    2c96:	05 90       	lpm	r0, Z+
    2c98:	f4 91       	lpm	r31, Z+
    2c9a:	e0 2d       	mov	r30, r0
    2c9c:	09 94       	ijmp
    2c9e:	18 a6       	std	Y+40, r1	; 0x28
    2ca0:	1f a2       	std	Y+39, r1	; 0x27
    2ca2:	1a a2       	std	Y+34, r1	; 0x22
    2ca4:	19 a2       	std	Y+33, r1	; 0x21
    2ca6:	1a 8e       	std	Y+26, r1	; 0x1a
    2ca8:	19 8e       	std	Y+25, r1	; 0x19
    2caa:	1a 8a       	std	Y+18, r1	; 0x12
    2cac:	19 8a       	std	Y+17, r1	; 0x11
    2cae:	9b c0       	rjmp	.+310    	; 0x2de6 <main+0x28ca>
					brush1Motor = 0;
					brush2Motor = 0;
					paperTowelMotor = 0;
					break;
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    2cb0:	80 91 70 03 	lds	r24, 0x0370
    2cb4:	90 91 6c 03 	lds	r25, 0x036C
    2cb8:	20 91 6e 03 	lds	r18, 0x036E
    2cbc:	82 ff       	sbrs	r24, 2
    2cbe:	07 c0       	rjmp	.+14     	; 0x2cce <main+0x27b2>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    2cc0:	9f 7e       	andi	r25, 0xEF	; 239
    2cc2:	90 93 6c 03 	sts	0x036C, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2cc6:	27 7f       	andi	r18, 0xF7	; 247
    2cc8:	20 93 6e 03 	sts	0x036E, r18
    2ccc:	a9 c1       	rjmp	.+850    	; 0x3020 <main+0x2b04>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2cce:	9f 7d       	andi	r25, 0xDF	; 223
    2cd0:	90 93 6c 03 	sts	0x036C, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2cd4:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2cd6:	28 60       	ori	r18, 0x08	; 8
    2cd8:	20 93 6e 03 	sts	0x036E, r18
						if(print0 == 1){
    2cdc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cde:	98 a9       	ldd	r25, Y+48	; 0x30
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	09 f0       	breq	.+2      	; 0x2ce6 <main+0x27ca>
    2ce4:	45 c0       	rjmp	.+138    	; 0x2d70 <main+0x2854>
							OrangutanLCD::gotoXY(0,1);
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	61 e0       	ldi	r22, 0x01	; 1
    2cea:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    2cee:	8e e1       	ldi	r24, 0x1E	; 30
    2cf0:	93 e0       	ldi	r25, 0x03	; 3
    2cf2:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
    2cf6:	18 aa       	std	Y+48, r1	; 0x30
    2cf8:	1f a6       	std	Y+47, r1	; 0x2f
    2cfa:	3a c0       	rjmp	.+116    	; 0x2d70 <main+0x2854>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    2cfc:	20 91 6e 03 	lds	r18, 0x036E
    2d00:	32 2f       	mov	r19, r18
    2d02:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    2d04:	c2 01       	movw	r24, r4
    2d06:	68 ec       	ldi	r22, 0xC8	; 200
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__divmodhi4>
    2d0e:	84 36       	cpi	r24, 0x64	; 100
    2d10:	91 05       	cpc	r25, r1
    2d12:	24 f4       	brge	.+8      	; 0x2d1c <main+0x2800>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    2d14:	2c 7f       	andi	r18, 0xFC	; 252
    2d16:	20 93 6e 03 	sts	0x036E, r18
    2d1a:	03 c0       	rjmp	.+6      	; 0x2d22 <main+0x2806>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2d1c:	32 60       	ori	r19, 0x02	; 2
    2d1e:	30 93 6e 03 	sts	0x036E, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    2d22:	80 91 6c 03 	lds	r24, 0x036C
    2d26:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    2d28:	84 60       	ori	r24, 0x04	; 4
    2d2a:	80 93 6c 03 	sts	0x036C, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    2d2e:	80 91 6e 03 	lds	r24, 0x036E
    2d32:	8b 7f       	andi	r24, 0xFB	; 251
    2d34:	80 93 6e 03 	sts	0x036E, r24
    2d38:	a1 e0       	ldi	r26, 0x01	; 1
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	b8 a7       	std	Y+40, r27	; 0x28
    2d3e:	af a3       	std	Y+39, r26	; 0x27
    2d40:	6f c1       	rjmp	.+734    	; 0x3020 <main+0x2b04>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2d42:	80 91 6e 03 	lds	r24, 0x036E
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2d46:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    2d48:	86 61       	ori	r24, 0x16	; 22
    2d4a:	80 93 6e 03 	sts	0x036E, r24
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2d4e:	80 91 6c 03 	lds	r24, 0x036C
    2d52:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2d54:	8b 7f       	andi	r24, 0xFB	; 251
    2d56:	80 93 6c 03 	sts	0x036C, r24
    2d5a:	60 c1       	rjmp	.+704    	; 0x301c <main+0x2b00>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2d5c:	80 91 6c 03 	lds	r24, 0x036C
    2d60:	8f 7d       	andi	r24, 0xDF	; 223
    2d62:	80 93 6c 03 	sts	0x036C, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2d66:	80 91 6e 03 	lds	r24, 0x036E
    2d6a:	88 60       	ori	r24, 0x08	; 8
    2d6c:	80 93 6e 03 	sts	0x036E, r24
    2d70:	1a 8e       	std	Y+26, r1	; 0x1a
    2d72:	19 8e       	std	Y+25, r1	; 0x19
    2d74:	55 c1       	rjmp	.+682    	; 0x3020 <main+0x2b04>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2d76:	80 91 6e 03 	lds	r24, 0x036E
    2d7a:	8f 7e       	andi	r24, 0xEF	; 239
    2d7c:	80 93 6e 03 	sts	0x036E, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2d80:	80 91 6c 03 	lds	r24, 0x036C
    2d84:	80 62       	ori	r24, 0x20	; 32
    2d86:	80 93 6c 03 	sts	0x036C, r24
    2d8a:	4a c1       	rjmp	.+660    	; 0x3020 <main+0x2b04>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2d8c:	80 91 6c 03 	lds	r24, 0x036C
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2d90:	80 63       	ori	r24, 0x30	; 48
    2d92:	7f c0       	rjmp	.+254    	; 0x2e92 <main+0x2976>
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    2d94:	80 91 6d 03 	lds	r24, 0x036D
    2d98:	81 60       	ori	r24, 0x01	; 1
    2d9a:	80 93 6d 03 	sts	0x036D, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2d9e:	80 91 6c 03 	lds	r24, 0x036C
    2da2:	8f 77       	andi	r24, 0x7F	; 127
    2da4:	80 93 6c 03 	sts	0x036C, r24
    2da8:	e3 cf       	rjmp	.-58     	; 0x2d70 <main+0x2854>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2daa:	80 91 6e 03 	lds	r24, 0x036E
    2dae:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2db0:	8f 7d       	andi	r24, 0xDF	; 223
    2db2:	80 93 6e 03 	sts	0x036E, r24
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	37 c0       	rjmp	.+110    	; 0x2e2a <main+0x290e>
					break;
				case CLEAN1_1:
					brush1Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2dbc:	80 91 6c 03 	lds	r24, 0x036C
    2dc0:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2dc2:	8f 7e       	andi	r24, 0xEF	; 239
    2dc4:	80 93 6c 03 	sts	0x036C, r24
    2dc8:	a1 e0       	ldi	r26, 0x01	; 1
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	ba 8f       	std	Y+26, r27	; 0x1a
    2dce:	a9 8f       	std	Y+25, r26	; 0x19
    2dd0:	bc 87       	std	Y+12, r27	; 0x0c
    2dd2:	ab 87       	std	Y+11, r26	; 0x0b
    2dd4:	25 c1       	rjmp	.+586    	; 0x3020 <main+0x2b04>
					break;
				case B1STOP1:
					fixtureMotor = 0;
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2dd6:	80 91 6e 03 	lds	r24, 0x036E
    2dda:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2ddc:	80 62       	ori	r24, 0x20	; 32
    2dde:	80 93 6e 03 	sts	0x036E, r24
    2de2:	1a 8e       	std	Y+26, r1	; 0x1a
    2de4:	19 8e       	std	Y+25, r1	; 0x19
    2de6:	1c 86       	std	Y+12, r1	; 0x0c
    2de8:	1b 86       	std	Y+11, r1	; 0x0b
    2dea:	1a c1       	rjmp	.+564    	; 0x3020 <main+0x2b04>
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2dec:	80 91 6c 03 	lds	r24, 0x036C
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2df0:	80 63       	ori	r24, 0x30	; 48
    2df2:	89 c0       	rjmp	.+274    	; 0x2f06 <main+0x29ea>
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2df4:	80 91 6c 03 	lds	r24, 0x036C
    2df8:	8f 77       	andi	r24, 0x7F	; 127
    2dfa:	80 93 6c 03 	sts	0x036C, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2dfe:	80 91 6e 03 	lds	r24, 0x036E
    2e02:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2e04:	8f 7d       	andi	r24, 0xDF	; 223
    2e06:	80 93 6e 03 	sts	0x036E, r24
    2e0a:	1a 8e       	std	Y+26, r1	; 0x1a
    2e0c:	19 8e       	std	Y+25, r1	; 0x19
    2e0e:	41 e0       	ldi	r20, 0x01	; 1
    2e10:	50 e0       	ldi	r21, 0x00	; 0
    2e12:	5c 87       	std	Y+12, r21	; 0x0c
    2e14:	4b 87       	std	Y+11, r20	; 0x0b
    2e16:	04 c1       	rjmp	.+520    	; 0x3020 <main+0x2b04>
					break;
				case CLEAN1_3:
					brush1Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2e18:	80 91 6c 03 	lds	r24, 0x036C
    2e1c:	80 62       	ori	r24, 0x20	; 32
    2e1e:	80 93 6c 03 	sts	0x036C, r24
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	9a 8f       	std	Y+26, r25	; 0x1a
    2e28:	89 8f       	std	Y+25, r24	; 0x19
    2e2a:	9c 87       	std	Y+12, r25	; 0x0c
    2e2c:	8b 87       	std	Y+11, r24	; 0x0b
    2e2e:	f8 c0       	rjmp	.+496    	; 0x3020 <main+0x2b04>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    2e30:	80 91 6d 03 	lds	r24, 0x036D
    2e34:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2e36:	8b 7f       	andi	r24, 0xFB	; 251
    2e38:	80 93 6d 03 	sts	0x036D, r24
    2e3c:	99 cf       	rjmp	.-206    	; 0x2d70 <main+0x2854>
						print15 = 0;
					}*/
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2e3e:	80 91 6f 03 	lds	r24, 0x036F
    2e42:	81 60       	ori	r24, 0x01	; 1
    2e44:	80 93 6f 03 	sts	0x036F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2e48:	80 91 6e 03 	lds	r24, 0x036E
    2e4c:	8f 77       	andi	r24, 0x7F	; 127
    2e4e:	80 93 6e 03 	sts	0x036E, r24
    2e52:	a1 e0       	ldi	r26, 0x01	; 1
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	ba a3       	std	Y+34, r27	; 0x22
    2e58:	a9 a3       	std	Y+33, r26	; 0x21
    2e5a:	e2 c0       	rjmp	.+452    	; 0x3020 <main+0x2b04>
					break;
				case CLEAN2_1:
					brush2Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2e5c:	80 91 6c 03 	lds	r24, 0x036C
    2e60:	80 62       	ori	r24, 0x20	; 32
    2e62:	80 93 6c 03 	sts	0x036C, r24
    2e66:	21 e0       	ldi	r18, 0x01	; 1
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	3a a3       	std	Y+34, r19	; 0x22
    2e6c:	29 a3       	std	Y+33, r18	; 0x21
    2e6e:	3a 8f       	std	Y+26, r19	; 0x1a
    2e70:	29 8f       	std	Y+25, r18	; 0x19
    2e72:	d6 c0       	rjmp	.+428    	; 0x3020 <main+0x2b04>
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2e74:	80 91 6f 03 	lds	r24, 0x036F
    2e78:	8e 7f       	andi	r24, 0xFE	; 254
    2e7a:	80 93 6f 03 	sts	0x036F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2e7e:	80 91 6e 03 	lds	r24, 0x036E
    2e82:	80 68       	ori	r24, 0x80	; 128
    2e84:	80 93 6e 03 	sts	0x036E, r24
    2e88:	38 c0       	rjmp	.+112    	; 0x2efa <main+0x29de>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2e8a:	80 91 6c 03 	lds	r24, 0x036C
    2e8e:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2e90:	80 62       	ori	r24, 0x20	; 32
    2e92:	80 93 6c 03 	sts	0x036C, r24
    2e96:	41 e0       	ldi	r20, 0x01	; 1
    2e98:	50 e0       	ldi	r21, 0x00	; 0
    2e9a:	5a 8f       	std	Y+26, r21	; 0x1a
    2e9c:	49 8f       	std	Y+25, r20	; 0x19
    2e9e:	c0 c0       	rjmp	.+384    	; 0x3020 <main+0x2b04>
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2ea0:	80 91 6d 03 	lds	r24, 0x036D
    2ea4:	8b 7f       	andi	r24, 0xFB	; 251
    2ea6:	80 93 6d 03 	sts	0x036D, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2eaa:	80 91 6f 03 	lds	r24, 0x036F
    2eae:	81 60       	ori	r24, 0x01	; 1
    2eb0:	80 93 6f 03 	sts	0x036F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2eb4:	80 91 6e 03 	lds	r24, 0x036E
    2eb8:	8f 77       	andi	r24, 0x7F	; 127
    2eba:	80 93 6e 03 	sts	0x036E, r24
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	9a a3       	std	Y+34, r25	; 0x22
    2ec4:	89 a3       	std	Y+33, r24	; 0x21
    2ec6:	54 cf       	rjmp	.-344    	; 0x2d70 <main+0x2854>
					break;
				case CLEAN2_3:
					brush2Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2ec8:	80 91 6c 03 	lds	r24, 0x036C
    2ecc:	80 62       	ori	r24, 0x20	; 32
    2ece:	80 93 6c 03 	sts	0x036C, r24
    2ed2:	a1 e0       	ldi	r26, 0x01	; 1
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	ba a3       	std	Y+34, r27	; 0x22
    2ed8:	a9 a3       	std	Y+33, r26	; 0x21
    2eda:	76 c0       	rjmp	.+236    	; 0x2fc8 <main+0x2aac>
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2edc:	80 91 6f 03 	lds	r24, 0x036F
    2ee0:	8e 7f       	andi	r24, 0xFE	; 254
    2ee2:	80 93 6f 03 	sts	0x036F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2ee6:	80 91 6e 03 	lds	r24, 0x036E
    2eea:	80 68       	ori	r24, 0x80	; 128
    2eec:	80 93 6e 03 	sts	0x036E, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    2ef0:	80 91 6d 03 	lds	r24, 0x036D
    2ef4:	87 7f       	andi	r24, 0xF7	; 247
    2ef6:	80 93 6d 03 	sts	0x036D, r24
    2efa:	1a a2       	std	Y+34, r1	; 0x22
    2efc:	19 a2       	std	Y+33, r1	; 0x21
    2efe:	38 cf       	rjmp	.-400    	; 0x2d70 <main+0x2854>
					break;
				//*************************************************
				case MOVED1:
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2f00:	80 91 6c 03 	lds	r24, 0x036C
    2f04:	80 62       	ori	r24, 0x20	; 32
    2f06:	80 93 6c 03 	sts	0x036C, r24
    2f0a:	21 e0       	ldi	r18, 0x01	; 1
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	af cf       	rjmp	.-162    	; 0x2e6e <main+0x2952>
					//u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2f10:	80 91 6f 03 	lds	r24, 0x036F
    2f14:	87 7f       	andi	r24, 0xF7	; 247
    2f16:	80 93 6f 03 	sts	0x036F, r24
    2f1a:	2a cf       	rjmp	.-428    	; 0x2d70 <main+0x2854>
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1STOP:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2f1c:	80 91 6c 03 	lds	r24, 0x036C
    2f20:	80 62       	ori	r24, 0x20	; 32
    2f22:	80 93 6c 03 	sts	0x036C, r24
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    2f26:	80 91 6f 03 	lds	r24, 0x036F
    2f2a:	88 60       	ori	r24, 0x08	; 8
    2f2c:	80 93 6f 03 	sts	0x036F, r24
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	9a 8f       	std	Y+26, r25	; 0x1a
    2f36:	89 8f       	std	Y+25, r24	; 0x19
    2f38:	73 c0       	rjmp	.+230    	; 0x3020 <main+0x2b04>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    2f3a:	80 91 6d 03 	lds	r24, 0x036D
    2f3e:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    2f40:	8f 7d       	andi	r24, 0xDF	; 223
    2f42:	80 93 6d 03 	sts	0x036D, r24
    2f46:	1a 8e       	std	Y+26, r1	; 0x1a
    2f48:	19 8e       	std	Y+25, r1	; 0x19
    2f4a:	a1 e0       	ldi	r26, 0x01	; 1
    2f4c:	b0 e0       	ldi	r27, 0x00	; 0
    2f4e:	ba 8b       	std	Y+18, r27	; 0x12
    2f50:	a9 8b       	std	Y+17, r26	; 0x11
    2f52:	66 c0       	rjmp	.+204    	; 0x3020 <main+0x2b04>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    2f54:	80 91 6f 03 	lds	r24, 0x036F
    2f58:	8d 7f       	andi	r24, 0xFD	; 253
    2f5a:	80 93 6f 03 	sts	0x036F, r24
    2f5e:	21 e0       	ldi	r18, 0x01	; 1
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	3a 8b       	std	Y+18, r19	; 0x12
    2f64:	29 8b       	std	Y+17, r18	; 0x11
    2f66:	5c c0       	rjmp	.+184    	; 0x3020 <main+0x2b04>
					break;
				case DRY2:
					paperTowelMotor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2f68:	80 91 6c 03 	lds	r24, 0x036C
    2f6c:	80 62       	ori	r24, 0x20	; 32
    2f6e:	80 93 6c 03 	sts	0x036C, r24
    2f72:	41 e0       	ldi	r20, 0x01	; 1
    2f74:	50 e0       	ldi	r21, 0x00	; 0
    2f76:	5a 8f       	std	Y+26, r21	; 0x1a
    2f78:	49 8f       	std	Y+25, r20	; 0x19
    2f7a:	5a 8b       	std	Y+18, r21	; 0x12
    2f7c:	49 8b       	std	Y+17, r20	; 0x11
    2f7e:	50 c0       	rjmp	.+160    	; 0x3020 <main+0x2b04>
					break;
				case D2STOP:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2f80:	80 91 6c 03 	lds	r24, 0x036C
    2f84:	80 62       	ori	r24, 0x20	; 32
    2f86:	80 93 6c 03 	sts	0x036C, r24
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    2f8a:	80 91 6d 03 	lds	r24, 0x036D
    2f8e:	8f 7b       	andi	r24, 0xBF	; 191
    2f90:	80 93 6d 03 	sts	0x036D, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    2f94:	80 91 6f 03 	lds	r24, 0x036F
    2f98:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    2f9a:	8b 7f       	andi	r24, 0xFB	; 251
    2f9c:	80 93 6f 03 	sts	0x036F, r24
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	9a 8f       	std	Y+26, r25	; 0x1a
    2fa6:	89 8f       	std	Y+25, r24	; 0x19
    2fa8:	1a 8a       	std	Y+18, r1	; 0x12
    2faa:	19 8a       	std	Y+17, r1	; 0x11
    2fac:	39 c0       	rjmp	.+114    	; 0x3020 <main+0x2b04>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2fae:	80 91 6e 03 	lds	r24, 0x036E
    2fb2:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    2fb4:	80 61       	ori	r24, 0x10	; 16
    2fb6:	da ce       	rjmp	.-588    	; 0x2d6c <main+0x2850>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    2fb8:	80 91 6c 03 	lds	r24, 0x036C
    2fbc:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2fbe:	80 62       	ori	r24, 0x20	; 32
    2fc0:	80 93 6c 03 	sts	0x036C, r24
    2fc4:	a1 e0       	ldi	r26, 0x01	; 1
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	ba 8f       	std	Y+26, r27	; 0x1a
    2fca:	a9 8f       	std	Y+25, r26	; 0x19
    2fcc:	29 c0       	rjmp	.+82     	; 0x3020 <main+0x2b04>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2fce:	80 91 6c 03 	lds	r24, 0x036C
    2fd2:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    2fd4:	84 60       	ori	r24, 0x04	; 4
    2fd6:	80 93 6c 03 	sts	0x036C, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2fda:	80 91 6e 03 	lds	r24, 0x036E
    2fde:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2fe0:	8f 7e       	andi	r24, 0xEF	; 239
    2fe2:	c4 ce       	rjmp	.-632    	; 0x2d6c <main+0x2850>
					break;
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    2fe4:	80 91 6c 03 	lds	r24, 0x036C
    2fe8:	8d 7f       	andi	r24, 0xFD	; 253
    2fea:	80 93 6c 03 	sts	0x036C, r24
    2fee:	21 e0       	ldi	r18, 0x01	; 1
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	38 a7       	std	Y+40, r19	; 0x28
    2ff4:	2f a3       	std	Y+39, r18	; 0x27
    2ff6:	14 c0       	rjmp	.+40     	; 0x3020 <main+0x2b04>
					plateLoadMotor = 1;
					break;
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2ff8:	80 91 6c 03 	lds	r24, 0x036C
    2ffc:	8b 7f       	andi	r24, 0xFB	; 251
    2ffe:	80 93 6c 03 	sts	0x036C, r24
					if(print35 == 1){
    3002:	4d a9       	ldd	r20, Y+53	; 0x35
    3004:	5e a9       	ldd	r21, Y+54	; 0x36
    3006:	41 30       	cpi	r20, 0x01	; 1
    3008:	51 05       	cpc	r21, r1
    300a:	41 f4       	brne	.+16     	; 0x301c <main+0x2b00>
						OrangutanLCD::clear();
    300c:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    3010:	8c e2       	ldi	r24, 0x2C	; 44
    3012:	93 e0       	ldi	r25, 0x03	; 3
    3014:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
    3018:	1e aa       	std	Y+54, r1	; 0x36
    301a:	1d aa       	std	Y+53, r1	; 0x35
    301c:	18 a6       	std	Y+40, r1	; 0x28
    301e:	1f a2       	std	Y+39, r1	; 0x27
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    3020:	8d b7       	in	r24, 0x3d	; 61
    3022:	9e b7       	in	r25, 0x3e	; 62
    3024:	42 97       	sbiw	r24, 0x12	; 18
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	f8 94       	cli
    302a:	9e bf       	out	0x3e, r25	; 62
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	8d bf       	out	0x3d, r24	; 61
    3030:	ed b7       	in	r30, 0x3d	; 61
    3032:	fe b7       	in	r31, 0x3e	; 62
    3034:	31 96       	adiw	r30, 0x01	; 1
    3036:	22 e0       	ldi	r18, 0x02	; 2
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	ad b7       	in	r26, 0x3d	; 61
    303c:	be b7       	in	r27, 0x3e	; 62
    303e:	12 96       	adiw	r26, 0x02	; 2
    3040:	3c 93       	st	X, r19
    3042:	2e 93       	st	-X, r18
    3044:	11 97       	sbiw	r26, 0x01	; 1
    3046:	33 83       	std	Z+3, r19	; 0x03
    3048:	22 83       	std	Z+2, r18	; 0x02
    304a:	35 83       	std	Z+5, r19	; 0x05
    304c:	24 83       	std	Z+4, r18	; 0x04
    304e:	37 83       	std	Z+7, r19	; 0x07
    3050:	26 83       	std	Z+6, r18	; 0x06
    3052:	41 e0       	ldi	r20, 0x01	; 1
    3054:	50 e0       	ldi	r21, 0x00	; 0
    3056:	51 87       	std	Z+9, r21	; 0x09
    3058:	40 87       	std	Z+8, r20	; 0x08
    305a:	53 87       	std	Z+11, r21	; 0x0b
    305c:	42 87       	std	Z+10, r20	; 0x0a
    305e:	55 87       	std	Z+13, r21	; 0x0d
    3060:	44 87       	std	Z+12, r20	; 0x0c
    3062:	57 87       	std	Z+15, r21	; 0x0f
    3064:	46 87       	std	Z+14, r20	; 0x0e
    3066:	51 8b       	std	Z+17, r21	; 0x11
    3068:	40 8b       	std	Z+16, r20	; 0x10
    306a:	c2 01       	movw	r24, r4
    306c:	b1 01       	movw	r22, r2
    306e:	4b 81       	ldd	r20, Y+3	; 0x03
    3070:	5c 81       	ldd	r21, Y+4	; 0x04
    3072:	2f a1       	ldd	r18, Y+39	; 0x27
    3074:	38 a5       	ldd	r19, Y+40	; 0x28
    3076:	09 8d       	ldd	r16, Y+25	; 0x19
    3078:	1a 8d       	ldd	r17, Y+26	; 0x1a
    307a:	eb 84       	ldd	r14, Y+11	; 0x0b
    307c:	fc 84       	ldd	r15, Y+12	; 0x0c
    307e:	c9 a0       	ldd	r12, Y+33	; 0x21
    3080:	da a0       	ldd	r13, Y+34	; 0x22
    3082:	a9 88       	ldd	r10, Y+17	; 0x11
    3084:	ba 88       	ldd	r11, Y+18	; 0x12
    3086:	e2 e0       	ldi	r30, 0x02	; 2
    3088:	8e 2e       	mov	r8, r30
    308a:	91 2c       	mov	r9, r1
    308c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    3090:	8d b7       	in	r24, 0x3d	; 61
    3092:	9e b7       	in	r25, 0x3e	; 62
    3094:	42 96       	adiw	r24, 0x12	; 18
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	9e bf       	out	0x3e, r25	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	8d bf       	out	0x3d, r24	; 61
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    30a8:	94 e2       	ldi	r25, 0x24	; 36
    30aa:	69 16       	cp	r6, r25
    30ac:	71 04       	cpc	r7, r1
    30ae:	21 f0       	breq	.+8      	; 0x30b8 <main+0x2b9c>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    30b0:	08 94       	sec
    30b2:	41 1c       	adc	r4, r1
    30b4:	51 1c       	adc	r5, r1
    30b6:	a2 cb       	rjmp	.-2236   	; 0x27fc <main+0x22e0>
				delay_ms(1);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    30b8:	80 91 6c 03 	lds	r24, 0x036C
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    30bc:	8b 7d       	andi	r24, 0xDB	; 219
    30be:	80 93 6c 03 	sts	0x036C, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    30c2:	80 91 6d 03 	lds	r24, 0x036D
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    30c6:	86 7b       	andi	r24, 0xB6	; 182
    30c8:	80 93 6d 03 	sts	0x036D, r24
		
		i2c_start(I2C1+I2C_WRITE);
    30cc:	80 e4       	ldi	r24, 0x40	; 64
    30ce:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>
		i2c_write(0x2);
    30d2:	82 e0       	ldi	r24, 0x02	; 2
    30d4:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
    30d8:	80 91 6c 03 	lds	r24, 0x036C
    30dc:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
    30e0:	80 91 6d 03 	lds	r24, 0x036D
    30e4:	0e 94 0d 19 	call	0x321a	; 0x321a <_Z9i2c_writeh>
		i2c_stop();
    30e8:	0e 94 05 19 	call	0x320a	; 0x320a <_Z8i2c_stopv>
	}
	OrangutanLCD::print("END");
    30ec:	80 e6       	ldi	r24, 0x60	; 96
    30ee:	93 e0       	ldi	r25, 0x03	; 3
    30f0:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
    30f4:	0c 94 a9 02 	jmp	0x552	; 0x552 <main+0x36>
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently

	bool buttonTriggered = false;	//buttonTriggered is false if it hasn't been triggered, true if it has;
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
    
	while(1){						//Repeats the entire program indefinitely (runs maintenance or normal each time)
    30f8:	10 e0       	ldi	r17, 0x00	; 0
    30fa:	0c 94 b8 03 	jmp	0x770	; 0x770 <main+0x254>
					OrangutanLCD::print("INPUTS ");
					OrangutanLCD::gotoXY(0,1);
					print = 0;
					switched = true;
				}
				if(switched){
    30fe:	11 23       	and	r17, r17
    3100:	11 f4       	brne	.+4      	; 0x3106 <main+0x2bea>
    3102:	0c 94 3c 04 	jmp	0x878	; 0x878 <main+0x35c>
    3106:	0c 94 23 04 	jmp	0x846	; 0x846 <main+0x32a>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
    3110:	88 23       	and	r24, r24
    3112:	11 f0       	breq	.+4      	; 0x3118 <main+0x2bfc>
    3114:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <main+0x121e>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
    311e:	88 23       	and	r24, r24
    3120:	11 f4       	brne	.+4      	; 0x3126 <main+0x2c0a>
    3122:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <main+0x1978>
				counter ++;
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	0e 94 23 01 	call	0x246	; 0x246 <_ZN16OrangutanDigital11isInputHighEh>
    312c:	88 23       	and	r24, r24
    312e:	21 f2       	breq	.-120    	; 0x30b8 <main+0x2b9c>
    3130:	36 cb       	rjmp	.-2452   	; 0x279e <main+0x2282>
    3132:	12 01       	movw	r2, r4
    3134:	95 e2       	ldi	r25, 0x25	; 37
    3136:	69 2e       	mov	r6, r25
    3138:	71 2c       	mov	r7, r1
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	a1 cb       	rjmp	.-2238   	; 0x2880 <main+0x2364>
    313e:	3a 86       	std	Y+10, r3	; 0x0a
    3140:	29 86       	std	Y+9, r2	; 0x09
    3142:	66 24       	eor	r6, r6
    3144:	77 24       	eor	r7, r7
    3146:	8a e2       	ldi	r24, 0x2A	; 42
    3148:	48 2e       	mov	r4, r24
    314a:	51 2c       	mov	r5, r1
    314c:	0c 94 5e 07 	jmp	0xebc	; 0xebc <main+0x9a0>

00003150 <_ZdlPv>:
  return malloc(size); 
} 

void operator delete(void * ptr) 
{ 
  free(ptr); 
    3150:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <free>
} 
    3154:	08 95       	ret

00003156 <_Znwj>:
void * operator new(size_t size); 
void operator delete(void * ptr); 

void * operator new(size_t size) 
{ 
  return malloc(size); 
    3156:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <malloc>
} 
    315a:	08 95       	ret

0000315c <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    315c:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3160:	8c e0       	ldi	r24, 0x0C	; 12
    3162:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    3166:	08 95       	ret

00003168 <_Z9i2c_starth>:

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    3168:	98 2f       	mov	r25, r24
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    316a:	84 ea       	ldi	r24, 0xA4	; 164
    316c:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3170:	80 91 bc 00 	lds	r24, 0x00BC
    3174:	87 ff       	sbrs	r24, 7
    3176:	fc cf       	rjmp	.-8      	; 0x3170 <_Z9i2c_starth+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3178:	80 91 b9 00 	lds	r24, 0x00B9
    317c:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    317e:	88 30       	cpi	r24, 0x08	; 8
    3180:	21 f0       	breq	.+8      	; 0x318a <_Z9i2c_starth+0x22>
    3182:	80 31       	cpi	r24, 0x10	; 16
    3184:	11 f0       	breq	.+4      	; 0x318a <_Z9i2c_starth+0x22>
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	08 95       	ret

	// send device address
	TWDR = address;
    318a:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    318e:	84 e8       	ldi	r24, 0x84	; 132
    3190:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3194:	80 91 bc 00 	lds	r24, 0x00BC
    3198:	87 ff       	sbrs	r24, 7
    319a:	fc cf       	rjmp	.-8      	; 0x3194 <_Z9i2c_starth+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    319c:	90 91 b9 00 	lds	r25, 0x00B9
    31a0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    31a2:	98 31       	cpi	r25, 0x18	; 24
    31a4:	11 f4       	brne	.+4      	; 0x31aa <_Z9i2c_starth+0x42>
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	08 95       	ret
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	90 34       	cpi	r25, 0x40	; 64
    31ae:	09 f0       	breq	.+2      	; 0x31b2 <_Z9i2c_starth+0x4a>
    31b0:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    31b2:	08 95       	ret

000031b4 <_Z14i2c_start_waith>:
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
    31b4:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    31b6:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    31b8:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    31ba:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    31bc:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    31c0:	80 91 bc 00 	lds	r24, 0x00BC
    31c4:	87 ff       	sbrs	r24, 7
    31c6:	fc cf       	rjmp	.-8      	; 0x31c0 <_Z14i2c_start_waith+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    31c8:	80 91 b9 00 	lds	r24, 0x00B9
    31cc:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    31ce:	88 30       	cpi	r24, 0x08	; 8
    31d0:	11 f0       	breq	.+4      	; 0x31d6 <_Z14i2c_start_waith+0x22>
    31d2:	80 31       	cpi	r24, 0x10	; 16
    31d4:	99 f7       	brne	.-26     	; 0x31bc <_Z14i2c_start_waith+0x8>
    
    	// send device address
    	TWDR = address;
    31d6:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    31da:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    31de:	80 91 bc 00 	lds	r24, 0x00BC
    31e2:	87 ff       	sbrs	r24, 7
    31e4:	fc cf       	rjmp	.-8      	; 0x31de <_Z14i2c_start_waith+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    31e6:	80 91 b9 00 	lds	r24, 0x00B9
    31ea:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    31ec:	80 32       	cpi	r24, 0x20	; 32
    31ee:	11 f0       	breq	.+4      	; 0x31f4 <_Z14i2c_start_waith+0x40>
    31f0:	88 35       	cpi	r24, 0x58	; 88
    31f2:	39 f4       	brne	.+14     	; 0x3202 <_Z14i2c_start_waith+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    31f4:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    31f8:	80 91 bc 00 	lds	r24, 0x00BC
    31fc:	84 fd       	sbrc	r24, 4
    31fe:	fc cf       	rjmp	.-8      	; 0x31f8 <_Z14i2c_start_waith+0x44>
    3200:	dd cf       	rjmp	.-70     	; 0x31bc <_Z14i2c_start_waith+0x8>
    3202:	08 95       	ret

00003204 <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    3204:	0e 94 b4 18 	call	0x3168	; 0x3168 <_Z9i2c_starth>

}/* i2c_rep_start */
    3208:	08 95       	ret

0000320a <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    320a:	84 e9       	ldi	r24, 0x94	; 148
    320c:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3210:	80 91 bc 00 	lds	r24, 0x00BC
    3214:	84 fd       	sbrc	r24, 4
    3216:	fc cf       	rjmp	.-8      	; 0x3210 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    3218:	08 95       	ret

0000321a <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    321a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    321e:	84 e8       	ldi	r24, 0x84	; 132
    3220:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3224:	80 91 bc 00 	lds	r24, 0x00BC
    3228:	87 ff       	sbrs	r24, 7
    322a:	fc cf       	rjmp	.-8      	; 0x3224 <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    322c:	80 91 b9 00 	lds	r24, 0x00B9
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	88 7f       	andi	r24, 0xF8	; 248
    3234:	88 32       	cpi	r24, 0x28	; 40
    3236:	09 f0       	breq	.+2      	; 0x323a <_Z9i2c_writeh+0x20>
    3238:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    323a:	89 2f       	mov	r24, r25
    323c:	08 95       	ret

0000323e <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    323e:	84 ec       	ldi	r24, 0xC4	; 196
    3240:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    3244:	80 91 bc 00 	lds	r24, 0x00BC
    3248:	87 ff       	sbrs	r24, 7
    324a:	fc cf       	rjmp	.-8      	; 0x3244 <_Z11i2c_readAckv+0x6>

    return TWDR;
    324c:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    3250:	08 95       	ret

00003252 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3252:	84 e8       	ldi	r24, 0x84	; 132
    3254:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    3258:	80 91 bc 00 	lds	r24, 0x00BC
    325c:	87 ff       	sbrs	r24, 7
    325e:	fc cf       	rjmp	.-8      	; 0x3258 <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    3260:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    3264:	08 95       	ret

00003266 <_ZN12OrangutanLCDC2Ev>:
    3266:	08 95       	ret

00003268 <_ZN12OrangutanLCDC1Ev>:
    3268:	08 95       	ret

0000326a <void_getchar>:
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	08 95       	ret

00003270 <_ZN12OrangutanLCD8busyWaitEv>:
    3270:	ef 92       	push	r14
    3272:	ff 92       	push	r15
    3274:	0f 93       	push	r16
    3276:	1f 93       	push	r17
    3278:	67 b1       	in	r22, 0x07	; 7
    327a:	3d 98       	cbi	0x07, 5	; 7
    327c:	28 98       	cbi	0x05, 0	; 5
    327e:	29 9a       	sbi	0x05, 1	; 5
    3280:	e0 90 7a 03 	lds	r14, 0x037A
    3284:	f0 90 7b 03 	lds	r15, 0x037B
    3288:	00 91 7c 03 	lds	r16, 0x037C
    328c:	10 91 7d 03 	lds	r17, 0x037D
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	41 e0       	ldi	r20, 0x01	; 1
    3296:	50 e0       	ldi	r21, 0x00	; 0
    3298:	ca 01       	movw	r24, r20
    329a:	6f 93       	push	r22
    329c:	64 e0       	ldi	r22, 0x04	; 4
    329e:	6a 95       	dec	r22
    32a0:	f1 f7       	brne	.-4      	; 0x329e <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    32a2:	6f 91       	pop	r22
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	c9 f7       	brne	.-14     	; 0x329a <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    32a8:	2a 9a       	sbi	0x05, 2	; 5
    32aa:	ca 01       	movw	r24, r20
    32ac:	6f 93       	push	r22
    32ae:	64 e0       	ldi	r22, 0x04	; 4
    32b0:	6a 95       	dec	r22
    32b2:	f1 f7       	brne	.-4      	; 0x32b0 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    32b4:	6f 91       	pop	r22
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	c9 f7       	brne	.-14     	; 0x32ac <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    32ba:	86 b1       	in	r24, 0x06	; 6
    32bc:	2a 98       	cbi	0x05, 2	; 5
    32be:	fa 01       	movw	r30, r20
    32c0:	6f 93       	push	r22
    32c2:	64 e0       	ldi	r22, 0x04	; 4
    32c4:	6a 95       	dec	r22
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    32c8:	6f 91       	pop	r22
    32ca:	31 97       	sbiw	r30, 0x01	; 1
    32cc:	c9 f7       	brne	.-14     	; 0x32c0 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    32ce:	2a 9a       	sbi	0x05, 2	; 5
    32d0:	fa 01       	movw	r30, r20
    32d2:	6f 93       	push	r22
    32d4:	64 e0       	ldi	r22, 0x04	; 4
    32d6:	6a 95       	dec	r22
    32d8:	f1 f7       	brne	.-4      	; 0x32d6 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    32da:	6f 91       	pop	r22
    32dc:	31 97       	sbiw	r30, 0x01	; 1
    32de:	c9 f7       	brne	.-14     	; 0x32d2 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    32e0:	2a 98       	cbi	0x05, 2	; 5
    32e2:	2c 5f       	subi	r18, 0xFC	; 252
    32e4:	3f 4f       	sbci	r19, 0xFF	; 255
    32e6:	85 ff       	sbrs	r24, 5
    32e8:	09 c0       	rjmp	.+18     	; 0x32fc <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    32ea:	c9 01       	movw	r24, r18
    32ec:	a0 e0       	ldi	r26, 0x00	; 0
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	8e 15       	cp	r24, r14
    32f2:	9f 05       	cpc	r25, r15
    32f4:	a0 07       	cpc	r26, r16
    32f6:	b1 07       	cpc	r27, r17
    32f8:	08 f4       	brcc	.+2      	; 0x32fc <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    32fa:	ce cf       	rjmp	.-100    	; 0x3298 <_ZN12OrangutanLCD8busyWaitEv+0x28>
    32fc:	c9 01       	movw	r24, r18
    32fe:	a0 e0       	ldi	r26, 0x00	; 0
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	8e 15       	cp	r24, r14
    3304:	9f 05       	cpc	r25, r15
    3306:	a0 07       	cpc	r26, r16
    3308:	b1 07       	cpc	r27, r17
    330a:	28 f0       	brcs	.+10     	; 0x3316 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    330c:	82 e3       	ldi	r24, 0x32	; 50
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	a0 e0       	ldi	r26, 0x00	; 0
    3312:	b0 e0       	ldi	r27, 0x00	; 0
    3314:	04 c0       	rjmp	.+8      	; 0x331e <_ZN12OrangutanLCD8busyWaitEv+0xae>
    3316:	80 e3       	ldi	r24, 0x30	; 48
    3318:	95 e7       	ldi	r25, 0x75	; 117
    331a:	a0 e0       	ldi	r26, 0x00	; 0
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	80 93 7a 03 	sts	0x037A, r24
    3322:	90 93 7b 03 	sts	0x037B, r25
    3326:	a0 93 7c 03 	sts	0x037C, r26
    332a:	b0 93 7d 03 	sts	0x037D, r27
    332e:	67 b9       	out	0x07, r22	; 7
    3330:	1f 91       	pop	r17
    3332:	0f 91       	pop	r16
    3334:	ff 90       	pop	r15
    3336:	ef 90       	pop	r14
    3338:	08 95       	ret

0000333a <_ZN12OrangutanLCD8sendDataEh>:
    333a:	28 b1       	in	r18, 0x08	; 8
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	8f 70       	andi	r24, 0x0F	; 15
    3340:	90 70       	andi	r25, 0x00	; 0
    3342:	88 0f       	add	r24, r24
    3344:	99 1f       	adc	r25, r25
    3346:	88 0f       	add	r24, r24
    3348:	99 1f       	adc	r25, r25
    334a:	23 7c       	andi	r18, 0xC3	; 195
    334c:	28 2b       	or	r18, r24
    334e:	28 b9       	out	0x08, r18	; 8
    3350:	2a 9a       	sbi	0x05, 2	; 5
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	fc 01       	movw	r30, r24
    3358:	6f 93       	push	r22
    335a:	64 e0       	ldi	r22, 0x04	; 4
    335c:	6a 95       	dec	r22
    335e:	f1 f7       	brne	.-4      	; 0x335c <_ZN12OrangutanLCD8sendDataEh+0x22>
    3360:	6f 91       	pop	r22
    3362:	31 97       	sbiw	r30, 0x01	; 1
    3364:	c9 f7       	brne	.-14     	; 0x3358 <_ZN12OrangutanLCD8sendDataEh+0x1e>
    3366:	2a 98       	cbi	0x05, 2	; 5
    3368:	6f 93       	push	r22
    336a:	64 e0       	ldi	r22, 0x04	; 4
    336c:	6a 95       	dec	r22
    336e:	f1 f7       	brne	.-4      	; 0x336c <_ZN12OrangutanLCD8sendDataEh+0x32>
    3370:	6f 91       	pop	r22
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	c9 f7       	brne	.-14     	; 0x3368 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    3376:	08 95       	ret

00003378 <_ZN12OrangutanLCD10initPrintfEv>:
    3378:	80 91 76 03 	lds	r24, 0x0376
    337c:	90 91 77 03 	lds	r25, 0x0377
    3380:	00 97       	sbiw	r24, 0x00	; 0
    3382:	11 f0       	breq	.+4      	; 0x3388 <_ZN12OrangutanLCD10initPrintfEv+0x10>
    3384:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <free>
    3388:	80 91 64 03 	lds	r24, 0x0364
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	01 97       	sbiw	r24, 0x01	; 1
    3390:	20 91 65 03 	lds	r18, 0x0365
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	ac 01       	movw	r20, r24
    3398:	42 9f       	mul	r20, r18
    339a:	c0 01       	movw	r24, r0
    339c:	43 9f       	mul	r20, r19
    339e:	90 0d       	add	r25, r0
    33a0:	52 9f       	mul	r21, r18
    33a2:	90 0d       	add	r25, r0
    33a4:	11 24       	eor	r1, r1
    33a6:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <malloc>
    33aa:	90 93 77 03 	sts	0x0377, r25
    33ae:	80 93 76 03 	sts	0x0376, r24
    33b2:	00 97       	sbiw	r24, 0x00	; 0
    33b4:	29 f1       	breq	.+74     	; 0x3400 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	70 e2       	ldi	r23, 0x20	; 32
    33ba:	08 c0       	rjmp	.+16     	; 0x33cc <_ZN12OrangutanLCD10initPrintfEv+0x54>
    33bc:	e0 91 76 03 	lds	r30, 0x0376
    33c0:	f0 91 77 03 	lds	r31, 0x0377
    33c4:	e4 0f       	add	r30, r20
    33c6:	f5 1f       	adc	r31, r21
    33c8:	70 83       	st	Z, r23
    33ca:	6f 5f       	subi	r22, 0xFF	; 255
    33cc:	46 2f       	mov	r20, r22
    33ce:	50 e0       	ldi	r21, 0x00	; 0
    33d0:	80 91 64 03 	lds	r24, 0x0364
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	20 91 65 03 	lds	r18, 0x0365
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	fc 01       	movw	r30, r24
    33e0:	e2 9f       	mul	r30, r18
    33e2:	c0 01       	movw	r24, r0
    33e4:	e3 9f       	mul	r30, r19
    33e6:	90 0d       	add	r25, r0
    33e8:	f2 9f       	mul	r31, r18
    33ea:	90 0d       	add	r25, r0
    33ec:	11 24       	eor	r1, r1
    33ee:	48 17       	cp	r20, r24
    33f0:	59 07       	cpc	r21, r25
    33f2:	24 f3       	brlt	.-56     	; 0x33bc <_ZN12OrangutanLCD10initPrintfEv+0x44>
    33f4:	81 e2       	ldi	r24, 0x21	; 33
    33f6:	9c e1       	ldi	r25, 0x1C	; 28
    33f8:	65 e3       	ldi	r22, 0x35	; 53
    33fa:	79 e1       	ldi	r23, 0x19	; 25
    33fc:	0e 94 33 20 	call	0x4066	; 0x4066 <fdevopen>
    3400:	08 95       	ret

00003402 <_ZN12OrangutanLCD10initPrintfEhh>:
    3402:	80 93 65 03 	sts	0x0365, r24
    3406:	60 93 64 03 	sts	0x0364, r22
    340a:	0e 94 bc 19 	call	0x3378	; 0x3378 <_ZN12OrangutanLCD10initPrintfEv>
    340e:	08 95       	ret

00003410 <lcd_init_printf_with_dimensions>:
    3410:	80 93 65 03 	sts	0x0365, r24
    3414:	60 93 64 03 	sts	0x0364, r22
    3418:	0e 94 bc 19 	call	0x3378	; 0x3378 <_ZN12OrangutanLCD10initPrintfEv>
    341c:	08 95       	ret

0000341e <lcd_init_printf>:
    341e:	0e 94 bc 19 	call	0x3378	; 0x3378 <_ZN12OrangutanLCD10initPrintfEv>
    3422:	08 95       	ret

00003424 <_ZN12OrangutanLCD5init2Ev>:
    3424:	3d 98       	cbi	0x07, 5	; 7
    3426:	45 9a       	sbi	0x08, 5	; 8
    3428:	80 e3       	ldi	r24, 0x30	; 48
    342a:	95 e7       	ldi	r25, 0x75	; 117
    342c:	a0 e0       	ldi	r26, 0x00	; 0
    342e:	b0 e0       	ldi	r27, 0x00	; 0
    3430:	80 93 7a 03 	sts	0x037A, r24
    3434:	90 93 7b 03 	sts	0x037B, r25
    3438:	a0 93 7c 03 	sts	0x037C, r26
    343c:	b0 93 7d 03 	sts	0x037D, r27
    3440:	20 9a       	sbi	0x04, 0	; 4
    3442:	21 9a       	sbi	0x04, 1	; 4
    3444:	22 9a       	sbi	0x04, 2	; 4
    3446:	8e e1       	ldi	r24, 0x1E	; 30
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
    344e:	83 e0       	ldi	r24, 0x03	; 3
    3450:	0e 94 67 1d 	call	0x3ace	; 0x3ace <_ZN12OrangutanLCD13send_4bit_cmdEh>
    3454:	86 e0       	ldi	r24, 0x06	; 6
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
    345c:	83 e0       	ldi	r24, 0x03	; 3
    345e:	0e 94 67 1d 	call	0x3ace	; 0x3ace <_ZN12OrangutanLCD13send_4bit_cmdEh>
    3462:	82 e0       	ldi	r24, 0x02	; 2
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
    346a:	83 e0       	ldi	r24, 0x03	; 3
    346c:	0e 94 67 1d 	call	0x3ace	; 0x3ace <_ZN12OrangutanLCD13send_4bit_cmdEh>
    3470:	82 e0       	ldi	r24, 0x02	; 2
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
    3478:	82 e0       	ldi	r24, 0x02	; 2
    347a:	0e 94 67 1d 	call	0x3ace	; 0x3ace <_ZN12OrangutanLCD13send_4bit_cmdEh>
    347e:	82 e0       	ldi	r24, 0x02	; 2
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
    3486:	88 e2       	ldi	r24, 0x28	; 40
    3488:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN12OrangutanLCD8send_cmdEh>
    348c:	88 e0       	ldi	r24, 0x08	; 8
    348e:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN12OrangutanLCD8send_cmdEh>
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN12OrangutanLCD8send_cmdEh>
    3498:	86 e0       	ldi	r24, 0x06	; 6
    349a:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN12OrangutanLCD8send_cmdEh>
    349e:	8c e0       	ldi	r24, 0x0C	; 12
    34a0:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN12OrangutanLCD8send_cmdEh>
    34a4:	08 95       	ret

000034a6 <_ZN12OrangutanLCD4initEv>:
    34a6:	80 91 7e 03 	lds	r24, 0x037E
    34aa:	88 23       	and	r24, r24
    34ac:	29 f4       	brne	.+10     	; 0x34b8 <_ZN12OrangutanLCD4initEv+0x12>
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	80 93 7e 03 	sts	0x037E, r24
    34b4:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN12OrangutanLCD5init2Ev>
    34b8:	08 95       	ret

000034ba <_ZN12OrangutanLCD4sendEhhh>:
    34ba:	ff 92       	push	r15
    34bc:	0f 93       	push	r16
    34be:	1f 93       	push	r17
    34c0:	08 2f       	mov	r16, r24
    34c2:	16 2f       	mov	r17, r22
    34c4:	f4 2e       	mov	r15, r20
    34c6:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <_ZN12OrangutanLCD4initEv>
    34ca:	0e 94 38 19 	call	0x3270	; 0x3270 <_ZN12OrangutanLCD8busyWaitEv>
    34ce:	37 b1       	in	r19, 0x07	; 7
    34d0:	28 b1       	in	r18, 0x08	; 8
    34d2:	29 98       	cbi	0x05, 1	; 5
    34d4:	11 23       	and	r17, r17
    34d6:	11 f0       	breq	.+4      	; 0x34dc <_ZN12OrangutanLCD4sendEhhh+0x22>
    34d8:	28 9a       	sbi	0x05, 0	; 5
    34da:	01 c0       	rjmp	.+2      	; 0x34de <_ZN12OrangutanLCD4sendEhhh+0x24>
    34dc:	28 98       	cbi	0x05, 0	; 5
    34de:	87 b1       	in	r24, 0x07	; 7
    34e0:	8c 63       	ori	r24, 0x3C	; 60
    34e2:	87 b9       	out	0x07, r24	; 7
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	f8 16       	cp	r15, r24
    34e8:	e1 f0       	breq	.+56     	; 0x3522 <_ZN12OrangutanLCD4sendEhhh+0x68>
    34ea:	88 b1       	in	r24, 0x08	; 8
    34ec:	90 2f       	mov	r25, r16
    34ee:	92 95       	swap	r25
    34f0:	9f 70       	andi	r25, 0x0F	; 15
    34f2:	99 0f       	add	r25, r25
    34f4:	99 0f       	add	r25, r25
    34f6:	83 7c       	andi	r24, 0xC3	; 195
    34f8:	98 2b       	or	r25, r24
    34fa:	98 b9       	out	0x08, r25	; 8
    34fc:	2a 9a       	sbi	0x05, 2	; 5
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	fc 01       	movw	r30, r24
    3504:	6f 93       	push	r22
    3506:	64 e0       	ldi	r22, 0x04	; 4
    3508:	6a 95       	dec	r22
    350a:	f1 f7       	brne	.-4      	; 0x3508 <_ZN12OrangutanLCD4sendEhhh+0x4e>
    350c:	6f 91       	pop	r22
    350e:	31 97       	sbiw	r30, 0x01	; 1
    3510:	c9 f7       	brne	.-14     	; 0x3504 <_ZN12OrangutanLCD4sendEhhh+0x4a>
    3512:	2a 98       	cbi	0x05, 2	; 5
    3514:	6f 93       	push	r22
    3516:	64 e0       	ldi	r22, 0x04	; 4
    3518:	6a 95       	dec	r22
    351a:	f1 f7       	brne	.-4      	; 0x3518 <_ZN12OrangutanLCD4sendEhhh+0x5e>
    351c:	6f 91       	pop	r22
    351e:	01 97       	sbiw	r24, 0x01	; 1
    3520:	c9 f7       	brne	.-14     	; 0x3514 <_ZN12OrangutanLCD4sendEhhh+0x5a>
    3522:	88 b1       	in	r24, 0x08	; 8
    3524:	0f 70       	andi	r16, 0x0F	; 15
    3526:	00 0f       	add	r16, r16
    3528:	00 0f       	add	r16, r16
    352a:	83 7c       	andi	r24, 0xC3	; 195
    352c:	80 2b       	or	r24, r16
    352e:	88 b9       	out	0x08, r24	; 8
    3530:	2a 9a       	sbi	0x05, 2	; 5
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	fc 01       	movw	r30, r24
    3538:	6f 93       	push	r22
    353a:	64 e0       	ldi	r22, 0x04	; 4
    353c:	6a 95       	dec	r22
    353e:	f1 f7       	brne	.-4      	; 0x353c <_ZN12OrangutanLCD4sendEhhh+0x82>
    3540:	6f 91       	pop	r22
    3542:	31 97       	sbiw	r30, 0x01	; 1
    3544:	c9 f7       	brne	.-14     	; 0x3538 <_ZN12OrangutanLCD4sendEhhh+0x7e>
    3546:	2a 98       	cbi	0x05, 2	; 5
    3548:	6f 93       	push	r22
    354a:	64 e0       	ldi	r22, 0x04	; 4
    354c:	6a 95       	dec	r22
    354e:	f1 f7       	brne	.-4      	; 0x354c <_ZN12OrangutanLCD4sendEhhh+0x92>
    3550:	6f 91       	pop	r22
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	c9 f7       	brne	.-14     	; 0x3548 <_ZN12OrangutanLCD4sendEhhh+0x8e>
    3556:	37 b9       	out	0x07, r19	; 7
    3558:	28 b9       	out	0x08, r18	; 8
    355a:	1f 91       	pop	r17
    355c:	0f 91       	pop	r16
    355e:	ff 90       	pop	r15
    3560:	08 95       	ret

00003562 <_ZN12OrangutanLCD8send_cmdEh>:
    3562:	60 e0       	ldi	r22, 0x00	; 0
    3564:	42 e0       	ldi	r20, 0x02	; 2
    3566:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <_ZN12OrangutanLCD4sendEhhh>
    356a:	08 95       	ret

0000356c <_ZN12OrangutanLCD10moveCursorEhh>:
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	08 2f       	mov	r16, r24
    3572:	16 2f       	mov	r17, r22
    3574:	08 c0       	rjmp	.+16     	; 0x3586 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    3576:	00 23       	and	r16, r16
    3578:	11 f4       	brne	.+4      	; 0x357e <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    357a:	80 e1       	ldi	r24, 0x10	; 16
    357c:	01 c0       	rjmp	.+2      	; 0x3580 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    357e:	84 e1       	ldi	r24, 0x14	; 20
    3580:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN12OrangutanLCD8send_cmdEh>
    3584:	11 50       	subi	r17, 0x01	; 1
    3586:	11 23       	and	r17, r17
    3588:	b1 f7       	brne	.-20     	; 0x3576 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    358a:	1f 91       	pop	r17
    358c:	0f 91       	pop	r16
    358e:	08 95       	ret

00003590 <lcd_move_cursor>:
    3590:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN12OrangutanLCD10moveCursorEhh>
    3594:	08 95       	ret

00003596 <_ZN12OrangutanLCD10hideCursorEv>:
    3596:	8c e0       	ldi	r24, 0x0C	; 12
    3598:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN12OrangutanLCD8send_cmdEh>
    359c:	08 95       	ret

0000359e <lcd_hide_cursor>:
    359e:	0e 94 cb 1a 	call	0x3596	; 0x3596 <_ZN12OrangutanLCD10hideCursorEv>
    35a2:	08 95       	ret

000035a4 <_ZN12OrangutanLCD10showCursorEh>:
    35a4:	81 30       	cpi	r24, 0x01	; 1
    35a6:	11 f4       	brne	.+4      	; 0x35ac <_ZN12OrangutanLCD10showCursorEh+0x8>
    35a8:	8f e0       	ldi	r24, 0x0F	; 15
    35aa:	01 c0       	rjmp	.+2      	; 0x35ae <_ZN12OrangutanLCD10showCursorEh+0xa>
    35ac:	8e e0       	ldi	r24, 0x0E	; 14
    35ae:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN12OrangutanLCD8send_cmdEh>
    35b2:	08 95       	ret

000035b4 <lcd_show_cursor>:
    35b4:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <_ZN12OrangutanLCD10showCursorEh>
    35b8:	08 95       	ret

000035ba <_ZN12OrangutanLCD6gotoXYEhh>:
    35ba:	a4 e0       	ldi	r26, 0x04	; 4
    35bc:	b0 e0       	ldi	r27, 0x00	; 0
    35be:	e3 ee       	ldi	r30, 0xE3	; 227
    35c0:	fa e1       	ldi	r31, 0x1A	; 26
    35c2:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__prologue_saves__+0x1c>
    35c6:	18 2f       	mov	r17, r24
    35c8:	06 2f       	mov	r16, r22
    35ca:	80 e8       	ldi	r24, 0x80	; 128
    35cc:	89 83       	std	Y+1, r24	; 0x01
    35ce:	80 ec       	ldi	r24, 0xC0	; 192
    35d0:	8a 83       	std	Y+2, r24	; 0x02
    35d2:	84 e9       	ldi	r24, 0x94	; 148
    35d4:	8b 83       	std	Y+3, r24	; 0x03
    35d6:	84 ed       	ldi	r24, 0xD4	; 212
    35d8:	8c 83       	std	Y+4, r24	; 0x04
    35da:	fe 01       	movw	r30, r28
    35dc:	e6 0f       	add	r30, r22
    35de:	f1 1d       	adc	r31, r1
    35e0:	81 81       	ldd	r24, Z+1	; 0x01
    35e2:	81 0f       	add	r24, r17
    35e4:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN12OrangutanLCD8send_cmdEh>
    35e8:	10 93 79 03 	sts	0x0379, r17
    35ec:	00 93 78 03 	sts	0x0378, r16
    35f0:	24 96       	adiw	r28, 0x04	; 4
    35f2:	e4 e0       	ldi	r30, 0x04	; 4
    35f4:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <__epilogue_restores__+0x1c>

000035f8 <lcd_goto_xy>:
    35f8:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
    35fc:	08 95       	ret

000035fe <_ZN12OrangutanLCD5clearEv>:
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN12OrangutanLCD8send_cmdEh>
    3604:	80 91 76 03 	lds	r24, 0x0376
    3608:	90 91 77 03 	lds	r25, 0x0377
    360c:	89 2b       	or	r24, r25
    360e:	19 f1       	breq	.+70     	; 0x3656 <_ZN12OrangutanLCD5clearEv+0x58>
    3610:	60 e0       	ldi	r22, 0x00	; 0
    3612:	70 e2       	ldi	r23, 0x20	; 32
    3614:	08 c0       	rjmp	.+16     	; 0x3626 <_ZN12OrangutanLCD5clearEv+0x28>
    3616:	e0 91 76 03 	lds	r30, 0x0376
    361a:	f0 91 77 03 	lds	r31, 0x0377
    361e:	e4 0f       	add	r30, r20
    3620:	f5 1f       	adc	r31, r21
    3622:	70 83       	st	Z, r23
    3624:	6f 5f       	subi	r22, 0xFF	; 255
    3626:	46 2f       	mov	r20, r22
    3628:	50 e0       	ldi	r21, 0x00	; 0
    362a:	80 91 64 03 	lds	r24, 0x0364
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	20 91 65 03 	lds	r18, 0x0365
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	fc 01       	movw	r30, r24
    363a:	e2 9f       	mul	r30, r18
    363c:	c0 01       	movw	r24, r0
    363e:	e3 9f       	mul	r30, r19
    3640:	90 0d       	add	r25, r0
    3642:	f2 9f       	mul	r31, r18
    3644:	90 0d       	add	r25, r0
    3646:	11 24       	eor	r1, r1
    3648:	48 17       	cp	r20, r24
    364a:	59 07       	cpc	r21, r25
    364c:	24 f3       	brlt	.-56     	; 0x3616 <_ZN12OrangutanLCD5clearEv+0x18>
    364e:	10 92 79 03 	sts	0x0379, r1
    3652:	10 92 78 03 	sts	0x0378, r1
    3656:	08 95       	ret

00003658 <clear>:
    3658:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN12OrangutanLCD5clearEv>
    365c:	08 95       	ret

0000365e <_ZN12OrangutanLCD9send_dataEh>:
    365e:	61 e0       	ldi	r22, 0x01	; 1
    3660:	42 e0       	ldi	r20, 0x02	; 2
    3662:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <_ZN12OrangutanLCD4sendEhhh>
    3666:	08 95       	ret

00003668 <_ZN12OrangutanLCD11printBinaryEh>:
    3668:	0f 93       	push	r16
    366a:	1f 93       	push	r17
    366c:	cf 93       	push	r28
    366e:	df 93       	push	r29
    3670:	00 e0       	ldi	r16, 0x00	; 0
    3672:	10 e8       	ldi	r17, 0x80	; 128
    3674:	c8 2f       	mov	r28, r24
    3676:	d0 e0       	ldi	r29, 0x00	; 0
    3678:	81 2f       	mov	r24, r17
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	8c 23       	and	r24, r28
    367e:	9d 23       	and	r25, r29
    3680:	89 2b       	or	r24, r25
    3682:	11 f0       	breq	.+4      	; 0x3688 <_ZN12OrangutanLCD11printBinaryEh+0x20>
    3684:	81 e3       	ldi	r24, 0x31	; 49
    3686:	01 c0       	rjmp	.+2      	; 0x368a <_ZN12OrangutanLCD11printBinaryEh+0x22>
    3688:	80 e3       	ldi	r24, 0x30	; 48
    368a:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN12OrangutanLCD9send_dataEh>
    368e:	0f 5f       	subi	r16, 0xFF	; 255
    3690:	08 30       	cpi	r16, 0x08	; 8
    3692:	11 f0       	breq	.+4      	; 0x3698 <_ZN12OrangutanLCD11printBinaryEh+0x30>
    3694:	16 95       	lsr	r17
    3696:	f0 cf       	rjmp	.-32     	; 0x3678 <_ZN12OrangutanLCD11printBinaryEh+0x10>
    3698:	df 91       	pop	r29
    369a:	cf 91       	pop	r28
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	08 95       	ret

000036a2 <print_binary>:
    36a2:	0e 94 34 1b 	call	0x3668	; 0x3668 <_ZN12OrangutanLCD11printBinaryEh>
    36a6:	08 95       	ret

000036a8 <_ZN12OrangutanLCD14printHexNibbleEh>:
    36a8:	8a 30       	cpi	r24, 0x0A	; 10
    36aa:	10 f4       	brcc	.+4      	; 0x36b0 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    36ac:	80 5d       	subi	r24, 0xD0	; 208
    36ae:	01 c0       	rjmp	.+2      	; 0x36b2 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    36b0:	89 5c       	subi	r24, 0xC9	; 201
    36b2:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN12OrangutanLCD9send_dataEh>
    36b6:	08 95       	ret

000036b8 <_ZN12OrangutanLCD8printHexEh>:
    36b8:	1f 93       	push	r17
    36ba:	18 2f       	mov	r17, r24
    36bc:	82 95       	swap	r24
    36be:	8f 70       	andi	r24, 0x0F	; 15
    36c0:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <_ZN12OrangutanLCD14printHexNibbleEh>
    36c4:	81 2f       	mov	r24, r17
    36c6:	8f 70       	andi	r24, 0x0F	; 15
    36c8:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <_ZN12OrangutanLCD14printHexNibbleEh>
    36cc:	1f 91       	pop	r17
    36ce:	08 95       	ret

000036d0 <_ZN12OrangutanLCD8printHexEj>:
    36d0:	1f 93       	push	r17
    36d2:	18 2f       	mov	r17, r24
    36d4:	89 2f       	mov	r24, r25
    36d6:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <_ZN12OrangutanLCD8printHexEh>
    36da:	81 2f       	mov	r24, r17
    36dc:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <_ZN12OrangutanLCD8printHexEh>
    36e0:	1f 91       	pop	r17
    36e2:	08 95       	ret

000036e4 <print_hex>:
    36e4:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD8printHexEj>
    36e8:	08 95       	ret

000036ea <print_hex_byte>:
    36ea:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <_ZN12OrangutanLCD8printHexEh>
    36ee:	08 95       	ret

000036f0 <_ZN12OrangutanLCD5printEm>:
    36f0:	6f 92       	push	r6
    36f2:	7f 92       	push	r7
    36f4:	8f 92       	push	r8
    36f6:	9f 92       	push	r9
    36f8:	af 92       	push	r10
    36fa:	bf 92       	push	r11
    36fc:	cf 92       	push	r12
    36fe:	df 92       	push	r13
    3700:	ff 92       	push	r15
    3702:	0f 93       	push	r16
    3704:	df 93       	push	r29
    3706:	cf 93       	push	r28
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
    370c:	2a 97       	sbiw	r28, 0x0a	; 10
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	de bf       	out	0x3e, r29	; 62
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	cd bf       	out	0x3d, r28	; 61
    3718:	5b 01       	movw	r10, r22
    371a:	6c 01       	movw	r12, r24
    371c:	0a e0       	ldi	r16, 0x0A	; 10
    371e:	3e 01       	movw	r6, r28
    3720:	08 94       	sec
    3722:	61 1c       	adc	r6, r1
    3724:	71 1c       	adc	r7, r1
    3726:	fa 2c       	mov	r15, r10
    3728:	c6 01       	movw	r24, r12
    372a:	b5 01       	movw	r22, r10
    372c:	2a e0       	ldi	r18, 0x0A	; 10
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	40 e0       	ldi	r20, 0x00	; 0
    3732:	50 e0       	ldi	r21, 0x00	; 0
    3734:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <__udivmodsi4>
    3738:	c9 01       	movw	r24, r18
    373a:	da 01       	movw	r26, r20
    373c:	5c 01       	movw	r10, r24
    373e:	6d 01       	movw	r12, r26
    3740:	01 50       	subi	r16, 0x01	; 1
    3742:	43 01       	movw	r8, r6
    3744:	80 0e       	add	r8, r16
    3746:	91 1c       	adc	r9, r1
    3748:	80 e3       	ldi	r24, 0x30	; 48
    374a:	f8 0e       	add	r15, r24
    374c:	c6 01       	movw	r24, r12
    374e:	b5 01       	movw	r22, r10
    3750:	2a e0       	ldi	r18, 0x0A	; 10
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	40 e0       	ldi	r20, 0x00	; 0
    3756:	50 e0       	ldi	r21, 0x00	; 0
    3758:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__mulsi3>
    375c:	f6 1a       	sub	r15, r22
    375e:	f4 01       	movw	r30, r8
    3760:	f0 82       	st	Z, r15
    3762:	a1 14       	cp	r10, r1
    3764:	b1 04       	cpc	r11, r1
    3766:	c1 04       	cpc	r12, r1
    3768:	d1 04       	cpc	r13, r1
    376a:	e9 f6       	brne	.-70     	; 0x3726 <_ZN12OrangutanLCD5printEm+0x36>
    376c:	08 c0       	rjmp	.+16     	; 0x377e <_ZN12OrangutanLCD5printEm+0x8e>
    376e:	f6 01       	movw	r30, r12
    3770:	e0 0f       	add	r30, r16
    3772:	f1 1d       	adc	r31, r1
    3774:	80 81       	ld	r24, Z
    3776:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN12OrangutanLCD9send_dataEh>
    377a:	0f 5f       	subi	r16, 0xFF	; 255
    377c:	04 c0       	rjmp	.+8      	; 0x3786 <_ZN12OrangutanLCD5printEm+0x96>
    377e:	6e 01       	movw	r12, r28
    3780:	08 94       	sec
    3782:	c1 1c       	adc	r12, r1
    3784:	d1 1c       	adc	r13, r1
    3786:	0a 30       	cpi	r16, 0x0A	; 10
    3788:	90 f3       	brcs	.-28     	; 0x376e <_ZN12OrangutanLCD5printEm+0x7e>
    378a:	2a 96       	adiw	r28, 0x0a	; 10
    378c:	0f b6       	in	r0, 0x3f	; 63
    378e:	f8 94       	cli
    3790:	de bf       	out	0x3e, r29	; 62
    3792:	0f be       	out	0x3f, r0	; 63
    3794:	cd bf       	out	0x3d, r28	; 61
    3796:	cf 91       	pop	r28
    3798:	df 91       	pop	r29
    379a:	0f 91       	pop	r16
    379c:	ff 90       	pop	r15
    379e:	df 90       	pop	r13
    37a0:	cf 90       	pop	r12
    37a2:	bf 90       	pop	r11
    37a4:	af 90       	pop	r10
    37a6:	9f 90       	pop	r9
    37a8:	8f 90       	pop	r8
    37aa:	7f 90       	pop	r7
    37ac:	6f 90       	pop	r6
    37ae:	08 95       	ret

000037b0 <print_unsigned_long>:
    37b0:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <_ZN12OrangutanLCD5printEm>
    37b4:	08 95       	ret

000037b6 <_ZN12OrangutanLCD5printEl>:
    37b6:	ef 92       	push	r14
    37b8:	ff 92       	push	r15
    37ba:	0f 93       	push	r16
    37bc:	1f 93       	push	r17
    37be:	7b 01       	movw	r14, r22
    37c0:	8c 01       	movw	r16, r24
    37c2:	97 ff       	sbrs	r25, 7
    37c4:	0b c0       	rjmp	.+22     	; 0x37dc <_ZN12OrangutanLCD5printEl+0x26>
    37c6:	10 95       	com	r17
    37c8:	00 95       	com	r16
    37ca:	f0 94       	com	r15
    37cc:	e0 94       	com	r14
    37ce:	e1 1c       	adc	r14, r1
    37d0:	f1 1c       	adc	r15, r1
    37d2:	01 1d       	adc	r16, r1
    37d4:	11 1d       	adc	r17, r1
    37d6:	8d e2       	ldi	r24, 0x2D	; 45
    37d8:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN12OrangutanLCD9send_dataEh>
    37dc:	c8 01       	movw	r24, r16
    37de:	b7 01       	movw	r22, r14
    37e0:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <_ZN12OrangutanLCD5printEm>
    37e4:	1f 91       	pop	r17
    37e6:	0f 91       	pop	r16
    37e8:	ff 90       	pop	r15
    37ea:	ef 90       	pop	r14
    37ec:	08 95       	ret

000037ee <print_long>:
    37ee:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_ZN12OrangutanLCD5printEl>
    37f2:	08 95       	ret

000037f4 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    37f4:	cf 93       	push	r28
    37f6:	df 93       	push	r29
    37f8:	ec 01       	movw	r28, r24
    37fa:	03 c0       	rjmp	.+6      	; 0x3802 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    37fc:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN12OrangutanLCD9send_dataEh>
    3800:	21 96       	adiw	r28, 0x01	; 1
    3802:	fe 01       	movw	r30, r28
    3804:	84 91       	lpm	r24, Z+
    3806:	88 23       	and	r24, r24
    3808:	c9 f7       	brne	.-14     	; 0x37fc <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    380a:	df 91       	pop	r29
    380c:	cf 91       	pop	r28
    380e:	08 95       	ret

00003810 <print_from_program_space>:
    3810:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    3814:	08 95       	ret

00003816 <_ZN12OrangutanLCD5printEPKc>:
    3816:	cf 93       	push	r28
    3818:	df 93       	push	r29
    381a:	ec 01       	movw	r28, r24
    381c:	03 c0       	rjmp	.+6      	; 0x3824 <_ZN12OrangutanLCD5printEPKc+0xe>
    381e:	21 96       	adiw	r28, 0x01	; 1
    3820:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN12OrangutanLCD9send_dataEh>
    3824:	88 81       	ld	r24, Y
    3826:	88 23       	and	r24, r24
    3828:	d1 f7       	brne	.-12     	; 0x381e <_ZN12OrangutanLCD5printEPKc+0x8>
    382a:	df 91       	pop	r29
    382c:	cf 91       	pop	r28
    382e:	08 95       	ret

00003830 <print>:
    3830:	0e 94 0b 1c 	call	0x3816	; 0x3816 <_ZN12OrangutanLCD5printEPKc>
    3834:	08 95       	ret

00003836 <_ZN12OrangutanLCD5printEc>:
    3836:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN12OrangutanLCD9send_dataEh>
    383a:	08 95       	ret

0000383c <print_character>:
    383c:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN12OrangutanLCD9send_dataEh>
    3840:	08 95       	ret

00003842 <lcd_putchar>:
    3842:	a0 e0       	ldi	r26, 0x00	; 0
    3844:	b0 e0       	ldi	r27, 0x00	; 0
    3846:	e7 e2       	ldi	r30, 0x27	; 39
    3848:	fc e1       	ldi	r31, 0x1C	; 28
    384a:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <__prologue_saves__+0x14>
    384e:	e8 2e       	mov	r14, r24
    3850:	80 91 76 03 	lds	r24, 0x0376
    3854:	90 91 77 03 	lds	r25, 0x0377
    3858:	89 2b       	or	r24, r25
    385a:	09 f4       	brne	.+2      	; 0x385e <lcd_putchar+0x1c>
    385c:	05 c1       	rjmp	.+522    	; 0x3a68 <lcd_putchar+0x226>
    385e:	2a e0       	ldi	r18, 0x0A	; 10
    3860:	e2 16       	cp	r14, r18
    3862:	09 f4       	brne	.+2      	; 0x3866 <lcd_putchar+0x24>
    3864:	46 c0       	rjmp	.+140    	; 0x38f2 <lcd_putchar+0xb0>
    3866:	38 e0       	ldi	r19, 0x08	; 8
    3868:	e3 16       	cp	r14, r19
    386a:	c9 f4       	brne	.+50     	; 0x389e <lcd_putchar+0x5c>
    386c:	80 91 79 03 	lds	r24, 0x0379
    3870:	81 50       	subi	r24, 0x01	; 1
    3872:	80 93 79 03 	sts	0x0379, r24
    3876:	8f 3f       	cpi	r24, 0xFF	; 255
    3878:	51 f4       	brne	.+20     	; 0x388e <lcd_putchar+0x4c>
    387a:	80 91 78 03 	lds	r24, 0x0378
    387e:	81 50       	subi	r24, 0x01	; 1
    3880:	80 93 78 03 	sts	0x0378, r24
    3884:	80 91 65 03 	lds	r24, 0x0365
    3888:	81 50       	subi	r24, 0x01	; 1
    388a:	80 93 79 03 	sts	0x0379, r24
    388e:	80 91 78 03 	lds	r24, 0x0378
    3892:	8f 3f       	cpi	r24, 0xFF	; 255
    3894:	09 f0       	breq	.+2      	; 0x3898 <lcd_putchar+0x56>
    3896:	e2 c0       	rjmp	.+452    	; 0x3a5c <lcd_putchar+0x21a>
    3898:	10 92 78 03 	sts	0x0378, r1
    389c:	dd c0       	rjmp	.+442    	; 0x3a58 <lcd_putchar+0x216>
    389e:	8e 2d       	mov	r24, r14
    38a0:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN12OrangutanLCD9send_dataEh>
    38a4:	20 91 78 03 	lds	r18, 0x0378
    38a8:	22 23       	and	r18, r18
    38aa:	c9 f0       	breq	.+50     	; 0x38de <lcd_putchar+0x9c>
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	21 50       	subi	r18, 0x01	; 1
    38b0:	30 40       	sbci	r19, 0x00	; 0
    38b2:	80 91 65 03 	lds	r24, 0x0365
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	ac 01       	movw	r20, r24
    38ba:	24 9f       	mul	r18, r20
    38bc:	c0 01       	movw	r24, r0
    38be:	25 9f       	mul	r18, r21
    38c0:	90 0d       	add	r25, r0
    38c2:	34 9f       	mul	r19, r20
    38c4:	90 0d       	add	r25, r0
    38c6:	11 24       	eor	r1, r1
    38c8:	20 91 79 03 	lds	r18, 0x0379
    38cc:	e0 91 76 03 	lds	r30, 0x0376
    38d0:	f0 91 77 03 	lds	r31, 0x0377
    38d4:	e8 0f       	add	r30, r24
    38d6:	f9 1f       	adc	r31, r25
    38d8:	e2 0f       	add	r30, r18
    38da:	f1 1d       	adc	r31, r1
    38dc:	e0 82       	st	Z, r14
    38de:	80 91 79 03 	lds	r24, 0x0379
    38e2:	8f 5f       	subi	r24, 0xFF	; 255
    38e4:	80 93 79 03 	sts	0x0379, r24
    38e8:	90 91 65 03 	lds	r25, 0x0365
    38ec:	89 17       	cp	r24, r25
    38ee:	09 f0       	breq	.+2      	; 0x38f2 <lcd_putchar+0xb0>
    38f0:	bb c0       	rjmp	.+374    	; 0x3a68 <lcd_putchar+0x226>
    38f2:	40 91 78 03 	lds	r20, 0x0378
    38f6:	24 2f       	mov	r18, r20
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	80 91 64 03 	lds	r24, 0x0364
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	28 17       	cp	r18, r24
    3904:	39 07       	cpc	r19, r25
    3906:	09 f0       	breq	.+2      	; 0x390a <lcd_putchar+0xc8>
    3908:	a4 c0       	rjmp	.+328    	; 0x3a52 <lcd_putchar+0x210>
    390a:	c0 e0       	ldi	r28, 0x00	; 0
    390c:	d0 e0       	ldi	r29, 0x00	; 0
    390e:	44 c0       	rjmp	.+136    	; 0x3998 <lcd_putchar+0x156>
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	6c 2f       	mov	r22, r28
    3914:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
    3918:	ff 24       	eor	r15, r15
    391a:	6e 01       	movw	r12, r28
    391c:	08 94       	sec
    391e:	c1 1c       	adc	r12, r1
    3920:	d1 1c       	adc	r13, r1
    3922:	35 c0       	rjmp	.+106    	; 0x398e <lcd_putchar+0x14c>
    3924:	0f 2d       	mov	r16, r15
    3926:	10 e0       	ldi	r17, 0x00	; 0
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	9c 01       	movw	r18, r24
    392c:	c2 9f       	mul	r28, r18
    392e:	c0 01       	movw	r24, r0
    3930:	c3 9f       	mul	r28, r19
    3932:	90 0d       	add	r25, r0
    3934:	d2 9f       	mul	r29, r18
    3936:	90 0d       	add	r25, r0
    3938:	11 24       	eor	r1, r1
    393a:	e0 91 76 03 	lds	r30, 0x0376
    393e:	f0 91 77 03 	lds	r31, 0x0377
    3942:	e0 0f       	add	r30, r16
    3944:	f1 1f       	adc	r31, r17
    3946:	e8 0f       	add	r30, r24
    3948:	f9 1f       	adc	r31, r25
    394a:	80 81       	ld	r24, Z
    394c:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN12OrangutanLCD9send_dataEh>
    3950:	e0 91 76 03 	lds	r30, 0x0376
    3954:	f0 91 77 03 	lds	r31, 0x0377
    3958:	80 91 65 03 	lds	r24, 0x0365
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	c8 9f       	mul	r28, r24
    3960:	d0 01       	movw	r26, r0
    3962:	c9 9f       	mul	r28, r25
    3964:	b0 0d       	add	r27, r0
    3966:	d8 9f       	mul	r29, r24
    3968:	b0 0d       	add	r27, r0
    396a:	11 24       	eor	r1, r1
    396c:	e0 0f       	add	r30, r16
    396e:	f1 1f       	adc	r31, r17
    3970:	ae 0f       	add	r26, r30
    3972:	bf 1f       	adc	r27, r31
    3974:	ac 01       	movw	r20, r24
    3976:	c4 9e       	mul	r12, r20
    3978:	c0 01       	movw	r24, r0
    397a:	c5 9e       	mul	r12, r21
    397c:	90 0d       	add	r25, r0
    397e:	d4 9e       	mul	r13, r20
    3980:	90 0d       	add	r25, r0
    3982:	11 24       	eor	r1, r1
    3984:	e8 0f       	add	r30, r24
    3986:	f9 1f       	adc	r31, r25
    3988:	80 81       	ld	r24, Z
    398a:	8c 93       	st	X, r24
    398c:	f3 94       	inc	r15
    398e:	80 91 65 03 	lds	r24, 0x0365
    3992:	f8 16       	cp	r15, r24
    3994:	38 f2       	brcs	.-114    	; 0x3924 <lcd_putchar+0xe2>
    3996:	e6 01       	movw	r28, r12
    3998:	60 91 64 03 	lds	r22, 0x0364
    399c:	86 2f       	mov	r24, r22
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	02 97       	sbiw	r24, 0x02	; 2
    39a2:	c8 17       	cp	r28, r24
    39a4:	d9 07       	cpc	r29, r25
    39a6:	0c f4       	brge	.+2      	; 0x39aa <lcd_putchar+0x168>
    39a8:	b3 cf       	rjmp	.-154    	; 0x3910 <lcd_putchar+0xce>
    39aa:	62 30       	cpi	r22, 0x02	; 2
    39ac:	08 f4       	brcc	.+2      	; 0x39b0 <lcd_putchar+0x16e>
    39ae:	40 c0       	rjmp	.+128    	; 0x3a30 <lcd_putchar+0x1ee>
    39b0:	62 50       	subi	r22, 0x02	; 2
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
    39b8:	ff 24       	eor	r15, r15
    39ba:	40 e2       	ldi	r20, 0x20	; 32
    39bc:	d4 2e       	mov	r13, r20
    39be:	34 c0       	rjmp	.+104    	; 0x3a28 <lcd_putchar+0x1e6>
    39c0:	0f 2d       	mov	r16, r15
    39c2:	10 e0       	ldi	r17, 0x00	; 0
    39c4:	80 91 64 03 	lds	r24, 0x0364
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	02 97       	sbiw	r24, 0x02	; 2
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	ac 01       	movw	r20, r24
    39d0:	42 9f       	mul	r20, r18
    39d2:	c0 01       	movw	r24, r0
    39d4:	43 9f       	mul	r20, r19
    39d6:	90 0d       	add	r25, r0
    39d8:	52 9f       	mul	r21, r18
    39da:	90 0d       	add	r25, r0
    39dc:	11 24       	eor	r1, r1
    39de:	e0 91 76 03 	lds	r30, 0x0376
    39e2:	f0 91 77 03 	lds	r31, 0x0377
    39e6:	e0 0f       	add	r30, r16
    39e8:	f1 1f       	adc	r31, r17
    39ea:	e8 0f       	add	r30, r24
    39ec:	f9 1f       	adc	r31, r25
    39ee:	80 81       	ld	r24, Z
    39f0:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN12OrangutanLCD9send_dataEh>
    39f4:	20 91 64 03 	lds	r18, 0x0364
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	22 50       	subi	r18, 0x02	; 2
    39fc:	30 40       	sbci	r19, 0x00	; 0
    39fe:	80 91 65 03 	lds	r24, 0x0365
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	ac 01       	movw	r20, r24
    3a06:	24 9f       	mul	r18, r20
    3a08:	c0 01       	movw	r24, r0
    3a0a:	25 9f       	mul	r18, r21
    3a0c:	90 0d       	add	r25, r0
    3a0e:	34 9f       	mul	r19, r20
    3a10:	90 0d       	add	r25, r0
    3a12:	11 24       	eor	r1, r1
    3a14:	e0 91 76 03 	lds	r30, 0x0376
    3a18:	f0 91 77 03 	lds	r31, 0x0377
    3a1c:	e0 0f       	add	r30, r16
    3a1e:	f1 1f       	adc	r31, r17
    3a20:	e8 0f       	add	r30, r24
    3a22:	f9 1f       	adc	r31, r25
    3a24:	d0 82       	st	Z, r13
    3a26:	f3 94       	inc	r15
    3a28:	20 91 65 03 	lds	r18, 0x0365
    3a2c:	f2 16       	cp	r15, r18
    3a2e:	40 f2       	brcs	.-112    	; 0x39c0 <lcd_putchar+0x17e>
    3a30:	60 91 64 03 	lds	r22, 0x0364
    3a34:	61 50       	subi	r22, 0x01	; 1
    3a36:	80 e0       	ldi	r24, 0x00	; 0
    3a38:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
    3a3c:	00 e0       	ldi	r16, 0x00	; 0
    3a3e:	04 c0       	rjmp	.+8      	; 0x3a48 <lcd_putchar+0x206>
    3a40:	80 e2       	ldi	r24, 0x20	; 32
    3a42:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN12OrangutanLCD9send_dataEh>
    3a46:	0f 5f       	subi	r16, 0xFF	; 255
    3a48:	80 91 65 03 	lds	r24, 0x0365
    3a4c:	08 17       	cp	r16, r24
    3a4e:	c0 f3       	brcs	.-16     	; 0x3a40 <lcd_putchar+0x1fe>
    3a50:	03 c0       	rjmp	.+6      	; 0x3a58 <lcd_putchar+0x216>
    3a52:	4f 5f       	subi	r20, 0xFF	; 255
    3a54:	40 93 78 03 	sts	0x0378, r20
    3a58:	10 92 79 03 	sts	0x0379, r1
    3a5c:	80 91 79 03 	lds	r24, 0x0379
    3a60:	60 91 78 03 	lds	r22, 0x0378
    3a64:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <_ZN12OrangutanLCD6gotoXYEhh>
    3a68:	2e 2d       	mov	r18, r14
    3a6a:	33 27       	eor	r19, r19
    3a6c:	27 fd       	sbrc	r18, 7
    3a6e:	30 95       	com	r19
    3a70:	c9 01       	movw	r24, r18
    3a72:	cd b7       	in	r28, 0x3d	; 61
    3a74:	de b7       	in	r29, 0x3e	; 62
    3a76:	e8 e0       	ldi	r30, 0x08	; 8
    3a78:	0c 94 09 1f 	jmp	0x3e12	; 0x3e12 <__epilogue_restores__+0x14>

00003a7c <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    3a7c:	ef 92       	push	r14
    3a7e:	ff 92       	push	r15
    3a80:	0f 93       	push	r16
    3a82:	1f 93       	push	r17
    3a84:	cf 93       	push	r28
    3a86:	df 93       	push	r29
    3a88:	7c 01       	movw	r14, r24
    3a8a:	06 2f       	mov	r16, r22
    3a8c:	10 e0       	ldi	r17, 0x00	; 0
    3a8e:	53 e0       	ldi	r21, 0x03	; 3
    3a90:	00 0f       	add	r16, r16
    3a92:	11 1f       	adc	r17, r17
    3a94:	5a 95       	dec	r21
    3a96:	e1 f7       	brne	.-8      	; 0x3a90 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    3a98:	c0 e0       	ldi	r28, 0x00	; 0
    3a9a:	d0 e0       	ldi	r29, 0x00	; 0
    3a9c:	9e 01       	movw	r18, r28
    3a9e:	20 0f       	add	r18, r16
    3aa0:	82 2f       	mov	r24, r18
    3aa2:	80 64       	ori	r24, 0x40	; 64
    3aa4:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN12OrangutanLCD8send_cmdEh>
    3aa8:	f7 01       	movw	r30, r14
    3aaa:	ec 0f       	add	r30, r28
    3aac:	fd 1f       	adc	r31, r29
    3aae:	e4 91       	lpm	r30, Z+
    3ab0:	8e 2f       	mov	r24, r30
    3ab2:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN12OrangutanLCD9send_dataEh>
    3ab6:	21 96       	adiw	r28, 0x01	; 1
    3ab8:	c8 30       	cpi	r28, 0x08	; 8
    3aba:	d1 05       	cpc	r29, r1
    3abc:	79 f7       	brne	.-34     	; 0x3a9c <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    3abe:	cd b7       	in	r28, 0x3d	; 61
    3ac0:	de b7       	in	r29, 0x3e	; 62
    3ac2:	e6 e0       	ldi	r30, 0x06	; 6
    3ac4:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <__epilogue_restores__+0x18>

00003ac8 <lcd_load_custom_character>:
    3ac8:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    3acc:	08 95       	ret

00003ace <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    3ace:	60 e0       	ldi	r22, 0x00	; 0
    3ad0:	41 e0       	ldi	r20, 0x01	; 1
    3ad2:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <_ZN12OrangutanLCD4sendEhhh>
    3ad6:	08 95       	ret

00003ad8 <_ZN12OrangutanLCD6scrollEhhj>:
    3ad8:	0f 93       	push	r16
    3ada:	1f 93       	push	r17
    3adc:	cf 93       	push	r28
    3ade:	df 93       	push	r29
    3ae0:	08 2f       	mov	r16, r24
    3ae2:	16 2f       	mov	r17, r22
    3ae4:	ea 01       	movw	r28, r20
    3ae6:	0b c0       	rjmp	.+22     	; 0x3afe <_ZN12OrangutanLCD6scrollEhhj+0x26>
    3ae8:	00 23       	and	r16, r16
    3aea:	11 f4       	brne	.+4      	; 0x3af0 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    3aec:	88 e1       	ldi	r24, 0x18	; 24
    3aee:	01 c0       	rjmp	.+2      	; 0x3af2 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    3af0:	8c e1       	ldi	r24, 0x1C	; 28
    3af2:	0e 94 b1 1a 	call	0x3562	; 0x3562 <_ZN12OrangutanLCD8send_cmdEh>
    3af6:	ce 01       	movw	r24, r28
    3af8:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN13OrangutanTime17delayMillisecondsEj>
    3afc:	11 50       	subi	r17, 0x01	; 1
    3afe:	11 23       	and	r17, r17
    3b00:	99 f7       	brne	.-26     	; 0x3ae8 <_ZN12OrangutanLCD6scrollEhhj+0x10>
    3b02:	df 91       	pop	r29
    3b04:	cf 91       	pop	r28
    3b06:	1f 91       	pop	r17
    3b08:	0f 91       	pop	r16
    3b0a:	08 95       	ret

00003b0c <lcd_scroll>:
    3b0c:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <_ZN12OrangutanLCD6scrollEhhj>
    3b10:	08 95       	ret

00003b12 <__vector_11>:
    3b12:	2f 92       	push	r2
    3b14:	8f 93       	push	r24
    3b16:	9f 93       	push	r25
    3b18:	2f b6       	in	r2, 0x3f	; 63
    3b1a:	80 91 80 03 	lds	r24, 0x0380
    3b1e:	90 91 81 03 	lds	r25, 0x0381
    3b22:	01 96       	adiw	r24, 0x01	; 1
    3b24:	80 93 80 03 	sts	0x0380, r24
    3b28:	90 93 81 03 	sts	0x0381, r25
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	80 91 82 03 	lds	r24, 0x0382
    3b32:	89 1f       	adc	r24, r25
    3b34:	80 93 82 03 	sts	0x0382, r24
    3b38:	90 91 88 03 	lds	r25, 0x0388
    3b3c:	9c 5f       	subi	r25, 0xFC	; 252
    3b3e:	90 93 88 03 	sts	0x0388, r25
    3b42:	80 91 87 03 	lds	r24, 0x0387
    3b46:	80 51       	subi	r24, 0x10	; 16
    3b48:	97 42       	sbci	r25, 0x27	; 39
    3b4a:	c0 f0       	brcs	.+48     	; 0x3b7c <end>
    3b4c:	90 93 88 03 	sts	0x0388, r25
    3b50:	80 93 87 03 	sts	0x0387, r24
    3b54:	80 91 83 03 	lds	r24, 0x0383
    3b58:	90 91 84 03 	lds	r25, 0x0384
    3b5c:	01 96       	adiw	r24, 0x01	; 1
    3b5e:	80 93 83 03 	sts	0x0383, r24
    3b62:	90 93 84 03 	sts	0x0384, r25
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	80 91 85 03 	lds	r24, 0x0385
    3b6c:	89 1f       	adc	r24, r25
    3b6e:	80 93 85 03 	sts	0x0385, r24
    3b72:	80 91 86 03 	lds	r24, 0x0386
    3b76:	89 1f       	adc	r24, r25
    3b78:	80 93 86 03 	sts	0x0386, r24

00003b7c <end>:
    3b7c:	2f be       	out	0x3f, r2	; 63
    3b7e:	9f 91       	pop	r25
    3b80:	8f 91       	pop	r24
    3b82:	2f 90       	pop	r2
    3b84:	18 95       	reti

00003b86 <ticks_to_microseconds>:
    3b86:	6f 5f       	subi	r22, 0xFF	; 255
    3b88:	7f 4f       	sbci	r23, 0xFF	; 255
    3b8a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b8e:	66 0f       	add	r22, r22
    3b90:	77 1f       	adc	r23, r23
    3b92:	88 1f       	adc	r24, r24
    3b94:	99 1f       	adc	r25, r25
    3b96:	25 e0       	ldi	r18, 0x05	; 5
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	40 e0       	ldi	r20, 0x00	; 0
    3b9c:	50 e0       	ldi	r21, 0x00	; 0
    3b9e:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <__udivmodsi4>
    3ba2:	ca 01       	movw	r24, r20
    3ba4:	b9 01       	movw	r22, r18
    3ba6:	08 95       	ret

00003ba8 <delay_ms>:
    3ba8:	28 ee       	ldi	r18, 0xE8	; 232
    3baa:	33 e0       	ldi	r19, 0x03	; 3
    3bac:	09 c0       	rjmp	.+18     	; 0x3bc0 <delay_ms+0x18>
    3bae:	f9 01       	movw	r30, r18
    3bb0:	6f 93       	push	r22
    3bb2:	64 e0       	ldi	r22, 0x04	; 4
    3bb4:	6a 95       	dec	r22
    3bb6:	f1 f7       	brne	.-4      	; 0x3bb4 <delay_ms+0xc>
    3bb8:	6f 91       	pop	r22
    3bba:	31 97       	sbiw	r30, 0x01	; 1
    3bbc:	c9 f7       	brne	.-14     	; 0x3bb0 <delay_ms+0x8>
    3bbe:	01 97       	sbiw	r24, 0x01	; 1
    3bc0:	00 97       	sbiw	r24, 0x00	; 0
    3bc2:	a9 f7       	brne	.-22     	; 0x3bae <delay_ms+0x6>
    3bc4:	08 95       	ret

00003bc6 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    3bc6:	6f 5f       	subi	r22, 0xFF	; 255
    3bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bca:	8f 4f       	sbci	r24, 0xFF	; 255
    3bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    3bce:	66 0f       	add	r22, r22
    3bd0:	77 1f       	adc	r23, r23
    3bd2:	88 1f       	adc	r24, r24
    3bd4:	99 1f       	adc	r25, r25
    3bd6:	25 e0       	ldi	r18, 0x05	; 5
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	40 e0       	ldi	r20, 0x00	; 0
    3bdc:	50 e0       	ldi	r21, 0x00	; 0
    3bde:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <__udivmodsi4>
    3be2:	ca 01       	movw	r24, r20
    3be4:	b9 01       	movw	r22, r18
    3be6:	08 95       	ret

00003be8 <_ZN13OrangutanTime17delayMillisecondsEj>:
    3be8:	28 ee       	ldi	r18, 0xE8	; 232
    3bea:	33 e0       	ldi	r19, 0x03	; 3
    3bec:	09 c0       	rjmp	.+18     	; 0x3c00 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3bee:	f9 01       	movw	r30, r18
    3bf0:	6f 93       	push	r22
    3bf2:	64 e0       	ldi	r22, 0x04	; 4
    3bf4:	6a 95       	dec	r22
    3bf6:	f1 f7       	brne	.-4      	; 0x3bf4 <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3bf8:	6f 91       	pop	r22
    3bfa:	31 97       	sbiw	r30, 0x01	; 1
    3bfc:	c9 f7       	brne	.-14     	; 0x3bf0 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3bfe:	01 97       	sbiw	r24, 0x01	; 1
    3c00:	00 97       	sbiw	r24, 0x00	; 0
    3c02:	a9 f7       	brne	.-22     	; 0x3bee <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    3c04:	08 95       	ret

00003c06 <_ZN13OrangutanTime5init2Ev>:
    3c06:	a0 e7       	ldi	r26, 0x70	; 112
    3c08:	b0 e0       	ldi	r27, 0x00	; 0
    3c0a:	8c 91       	ld	r24, X
    3c0c:	8e 7f       	andi	r24, 0xFE	; 254
    3c0e:	8c 93       	st	X, r24
    3c10:	e0 eb       	ldi	r30, 0xB0	; 176
    3c12:	f0 e0       	ldi	r31, 0x00	; 0
    3c14:	80 81       	ld	r24, Z
    3c16:	83 60       	ori	r24, 0x03	; 3
    3c18:	80 83       	st	Z, r24
    3c1a:	e1 eb       	ldi	r30, 0xB1	; 177
    3c1c:	f0 e0       	ldi	r31, 0x00	; 0
    3c1e:	80 81       	ld	r24, Z
    3c20:	80 7f       	andi	r24, 0xF0	; 240
    3c22:	80 83       	st	Z, r24
    3c24:	80 81       	ld	r24, Z
    3c26:	82 60       	ori	r24, 0x02	; 2
    3c28:	80 83       	st	Z, r24
    3c2a:	b8 9a       	sbi	0x17, 0	; 23
    3c2c:	8c 91       	ld	r24, X
    3c2e:	81 60       	ori	r24, 0x01	; 1
    3c30:	8c 93       	st	X, r24
    3c32:	78 94       	sei
    3c34:	08 95       	ret

00003c36 <_ZN13OrangutanTime4initEv>:
    3c36:	80 91 89 03 	lds	r24, 0x0389
    3c3a:	88 23       	and	r24, r24
    3c3c:	29 f4       	brne	.+10     	; 0x3c48 <_ZN13OrangutanTime4initEv+0x12>
    3c3e:	81 e0       	ldi	r24, 0x01	; 1
    3c40:	80 93 89 03 	sts	0x0389, r24
    3c44:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <_ZN13OrangutanTime5init2Ev>
    3c48:	08 95       	ret

00003c4a <_ZN13OrangutanTime2msEv>:
    3c4a:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <_ZN13OrangutanTime4initEv>
    3c4e:	e0 e7       	ldi	r30, 0x70	; 112
    3c50:	f0 e0       	ldi	r31, 0x00	; 0
    3c52:	80 81       	ld	r24, Z
    3c54:	8e 7f       	andi	r24, 0xFE	; 254
    3c56:	80 83       	st	Z, r24
    3c58:	20 91 83 03 	lds	r18, 0x0383
    3c5c:	30 91 84 03 	lds	r19, 0x0384
    3c60:	40 91 85 03 	lds	r20, 0x0385
    3c64:	50 91 86 03 	lds	r21, 0x0386
    3c68:	80 81       	ld	r24, Z
    3c6a:	81 60       	ori	r24, 0x01	; 1
    3c6c:	80 83       	st	Z, r24
    3c6e:	b9 01       	movw	r22, r18
    3c70:	ca 01       	movw	r24, r20
    3c72:	08 95       	ret

00003c74 <get_ms>:
    3c74:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <_ZN13OrangutanTime2msEv>
    3c78:	08 95       	ret

00003c7a <_ZN13OrangutanTime5ticksEv>:
    3c7a:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <_ZN13OrangutanTime4initEv>
    3c7e:	80 91 70 00 	lds	r24, 0x0070
    3c82:	8e 7f       	andi	r24, 0xFE	; 254
    3c84:	80 93 70 00 	sts	0x0070, r24
    3c88:	60 91 b2 00 	lds	r22, 0x00B2
    3c8c:	80 91 7f 03 	lds	r24, 0x037F
    3c90:	90 91 80 03 	lds	r25, 0x0380
    3c94:	a0 91 81 03 	lds	r26, 0x0381
    3c98:	b0 91 82 03 	lds	r27, 0x0382
    3c9c:	b8 99       	sbic	0x17, 0	; 23
    3c9e:	05 c0       	rjmp	.+10     	; 0x3caa <_ZN13OrangutanTime5ticksEv+0x30>
    3ca0:	26 2f       	mov	r18, r22
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	40 e0       	ldi	r20, 0x00	; 0
    3ca6:	50 e0       	ldi	r21, 0x00	; 0
    3ca8:	11 c0       	rjmp	.+34     	; 0x3ccc <_ZN13OrangutanTime5ticksEv+0x52>
    3caa:	80 91 b2 00 	lds	r24, 0x00B2
    3cae:	20 91 7f 03 	lds	r18, 0x037F
    3cb2:	30 91 80 03 	lds	r19, 0x0380
    3cb6:	40 91 81 03 	lds	r20, 0x0381
    3cba:	50 91 82 03 	lds	r21, 0x0382
    3cbe:	20 50       	subi	r18, 0x00	; 0
    3cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc2:	4f 4f       	sbci	r20, 0xFF	; 255
    3cc4:	5f 4f       	sbci	r21, 0xFF	; 255
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	a0 e0       	ldi	r26, 0x00	; 0
    3cca:	b0 e0       	ldi	r27, 0x00	; 0
    3ccc:	28 2b       	or	r18, r24
    3cce:	39 2b       	or	r19, r25
    3cd0:	4a 2b       	or	r20, r26
    3cd2:	5b 2b       	or	r21, r27
    3cd4:	80 91 70 00 	lds	r24, 0x0070
    3cd8:	81 60       	ori	r24, 0x01	; 1
    3cda:	80 93 70 00 	sts	0x0070, r24
    3cde:	b9 01       	movw	r22, r18
    3ce0:	ca 01       	movw	r24, r20
    3ce2:	08 95       	ret

00003ce4 <get_ticks>:
    3ce4:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <_ZN13OrangutanTime5ticksEv>
    3ce8:	08 95       	ret

00003cea <_ZN13OrangutanTime5resetEv>:
    3cea:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <_ZN13OrangutanTime4initEv>
    3cee:	e0 e7       	ldi	r30, 0x70	; 112
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	80 81       	ld	r24, Z
    3cf4:	8e 7f       	andi	r24, 0xFE	; 254
    3cf6:	80 83       	st	Z, r24
    3cf8:	10 92 83 03 	sts	0x0383, r1
    3cfc:	10 92 84 03 	sts	0x0384, r1
    3d00:	10 92 85 03 	sts	0x0385, r1
    3d04:	10 92 86 03 	sts	0x0386, r1
    3d08:	10 92 88 03 	sts	0x0388, r1
    3d0c:	10 92 87 03 	sts	0x0387, r1
    3d10:	80 81       	ld	r24, Z
    3d12:	81 60       	ori	r24, 0x01	; 1
    3d14:	80 83       	st	Z, r24
    3d16:	08 95       	ret

00003d18 <time_reset>:
    3d18:	0e 94 75 1e 	call	0x3cea	; 0x3cea <_ZN13OrangutanTime5resetEv>
    3d1c:	08 95       	ret

00003d1e <__mulsi3>:
    3d1e:	62 9f       	mul	r22, r18
    3d20:	d0 01       	movw	r26, r0
    3d22:	73 9f       	mul	r23, r19
    3d24:	f0 01       	movw	r30, r0
    3d26:	82 9f       	mul	r24, r18
    3d28:	e0 0d       	add	r30, r0
    3d2a:	f1 1d       	adc	r31, r1
    3d2c:	64 9f       	mul	r22, r20
    3d2e:	e0 0d       	add	r30, r0
    3d30:	f1 1d       	adc	r31, r1
    3d32:	92 9f       	mul	r25, r18
    3d34:	f0 0d       	add	r31, r0
    3d36:	83 9f       	mul	r24, r19
    3d38:	f0 0d       	add	r31, r0
    3d3a:	74 9f       	mul	r23, r20
    3d3c:	f0 0d       	add	r31, r0
    3d3e:	65 9f       	mul	r22, r21
    3d40:	f0 0d       	add	r31, r0
    3d42:	99 27       	eor	r25, r25
    3d44:	72 9f       	mul	r23, r18
    3d46:	b0 0d       	add	r27, r0
    3d48:	e1 1d       	adc	r30, r1
    3d4a:	f9 1f       	adc	r31, r25
    3d4c:	63 9f       	mul	r22, r19
    3d4e:	b0 0d       	add	r27, r0
    3d50:	e1 1d       	adc	r30, r1
    3d52:	f9 1f       	adc	r31, r25
    3d54:	bd 01       	movw	r22, r26
    3d56:	cf 01       	movw	r24, r30
    3d58:	11 24       	eor	r1, r1
    3d5a:	08 95       	ret

00003d5c <__divmodhi4>:
    3d5c:	97 fb       	bst	r25, 7
    3d5e:	09 2e       	mov	r0, r25
    3d60:	07 26       	eor	r0, r23
    3d62:	0a d0       	rcall	.+20     	; 0x3d78 <__divmodhi4_neg1>
    3d64:	77 fd       	sbrc	r23, 7
    3d66:	04 d0       	rcall	.+8      	; 0x3d70 <__divmodhi4_neg2>
    3d68:	65 d0       	rcall	.+202    	; 0x3e34 <__udivmodhi4>
    3d6a:	06 d0       	rcall	.+12     	; 0x3d78 <__divmodhi4_neg1>
    3d6c:	00 20       	and	r0, r0
    3d6e:	1a f4       	brpl	.+6      	; 0x3d76 <__divmodhi4_exit>

00003d70 <__divmodhi4_neg2>:
    3d70:	70 95       	com	r23
    3d72:	61 95       	neg	r22
    3d74:	7f 4f       	sbci	r23, 0xFF	; 255

00003d76 <__divmodhi4_exit>:
    3d76:	08 95       	ret

00003d78 <__divmodhi4_neg1>:
    3d78:	f6 f7       	brtc	.-4      	; 0x3d76 <__divmodhi4_exit>
    3d7a:	90 95       	com	r25
    3d7c:	81 95       	neg	r24
    3d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d80:	08 95       	ret

00003d82 <__udivmodsi4>:
    3d82:	a1 e2       	ldi	r26, 0x21	; 33
    3d84:	1a 2e       	mov	r1, r26
    3d86:	aa 1b       	sub	r26, r26
    3d88:	bb 1b       	sub	r27, r27
    3d8a:	fd 01       	movw	r30, r26
    3d8c:	0d c0       	rjmp	.+26     	; 0x3da8 <__udivmodsi4_ep>

00003d8e <__udivmodsi4_loop>:
    3d8e:	aa 1f       	adc	r26, r26
    3d90:	bb 1f       	adc	r27, r27
    3d92:	ee 1f       	adc	r30, r30
    3d94:	ff 1f       	adc	r31, r31
    3d96:	a2 17       	cp	r26, r18
    3d98:	b3 07       	cpc	r27, r19
    3d9a:	e4 07       	cpc	r30, r20
    3d9c:	f5 07       	cpc	r31, r21
    3d9e:	20 f0       	brcs	.+8      	; 0x3da8 <__udivmodsi4_ep>
    3da0:	a2 1b       	sub	r26, r18
    3da2:	b3 0b       	sbc	r27, r19
    3da4:	e4 0b       	sbc	r30, r20
    3da6:	f5 0b       	sbc	r31, r21

00003da8 <__udivmodsi4_ep>:
    3da8:	66 1f       	adc	r22, r22
    3daa:	77 1f       	adc	r23, r23
    3dac:	88 1f       	adc	r24, r24
    3dae:	99 1f       	adc	r25, r25
    3db0:	1a 94       	dec	r1
    3db2:	69 f7       	brne	.-38     	; 0x3d8e <__udivmodsi4_loop>
    3db4:	60 95       	com	r22
    3db6:	70 95       	com	r23
    3db8:	80 95       	com	r24
    3dba:	90 95       	com	r25
    3dbc:	9b 01       	movw	r18, r22
    3dbe:	ac 01       	movw	r20, r24
    3dc0:	bd 01       	movw	r22, r26
    3dc2:	cf 01       	movw	r24, r30
    3dc4:	08 95       	ret

00003dc6 <__prologue_saves__>:
    3dc6:	2f 92       	push	r2
    3dc8:	3f 92       	push	r3
    3dca:	4f 92       	push	r4
    3dcc:	5f 92       	push	r5
    3dce:	6f 92       	push	r6
    3dd0:	7f 92       	push	r7
    3dd2:	8f 92       	push	r8
    3dd4:	9f 92       	push	r9
    3dd6:	af 92       	push	r10
    3dd8:	bf 92       	push	r11
    3dda:	cf 92       	push	r12
    3ddc:	df 92       	push	r13
    3dde:	ef 92       	push	r14
    3de0:	ff 92       	push	r15
    3de2:	0f 93       	push	r16
    3de4:	1f 93       	push	r17
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	cd b7       	in	r28, 0x3d	; 61
    3dec:	de b7       	in	r29, 0x3e	; 62
    3dee:	ca 1b       	sub	r28, r26
    3df0:	db 0b       	sbc	r29, r27
    3df2:	0f b6       	in	r0, 0x3f	; 63
    3df4:	f8 94       	cli
    3df6:	de bf       	out	0x3e, r29	; 62
    3df8:	0f be       	out	0x3f, r0	; 63
    3dfa:	cd bf       	out	0x3d, r28	; 61
    3dfc:	09 94       	ijmp

00003dfe <__epilogue_restores__>:
    3dfe:	2a 88       	ldd	r2, Y+18	; 0x12
    3e00:	39 88       	ldd	r3, Y+17	; 0x11
    3e02:	48 88       	ldd	r4, Y+16	; 0x10
    3e04:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e06:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e08:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e10:	b9 84       	ldd	r11, Y+9	; 0x09
    3e12:	c8 84       	ldd	r12, Y+8	; 0x08
    3e14:	df 80       	ldd	r13, Y+7	; 0x07
    3e16:	ee 80       	ldd	r14, Y+6	; 0x06
    3e18:	fd 80       	ldd	r15, Y+5	; 0x05
    3e1a:	0c 81       	ldd	r16, Y+4	; 0x04
    3e1c:	1b 81       	ldd	r17, Y+3	; 0x03
    3e1e:	aa 81       	ldd	r26, Y+2	; 0x02
    3e20:	b9 81       	ldd	r27, Y+1	; 0x01
    3e22:	ce 0f       	add	r28, r30
    3e24:	d1 1d       	adc	r29, r1
    3e26:	0f b6       	in	r0, 0x3f	; 63
    3e28:	f8 94       	cli
    3e2a:	de bf       	out	0x3e, r29	; 62
    3e2c:	0f be       	out	0x3f, r0	; 63
    3e2e:	cd bf       	out	0x3d, r28	; 61
    3e30:	ed 01       	movw	r28, r26
    3e32:	08 95       	ret

00003e34 <__udivmodhi4>:
    3e34:	aa 1b       	sub	r26, r26
    3e36:	bb 1b       	sub	r27, r27
    3e38:	51 e1       	ldi	r21, 0x11	; 17
    3e3a:	07 c0       	rjmp	.+14     	; 0x3e4a <__udivmodhi4_ep>

00003e3c <__udivmodhi4_loop>:
    3e3c:	aa 1f       	adc	r26, r26
    3e3e:	bb 1f       	adc	r27, r27
    3e40:	a6 17       	cp	r26, r22
    3e42:	b7 07       	cpc	r27, r23
    3e44:	10 f0       	brcs	.+4      	; 0x3e4a <__udivmodhi4_ep>
    3e46:	a6 1b       	sub	r26, r22
    3e48:	b7 0b       	sbc	r27, r23

00003e4a <__udivmodhi4_ep>:
    3e4a:	88 1f       	adc	r24, r24
    3e4c:	99 1f       	adc	r25, r25
    3e4e:	5a 95       	dec	r21
    3e50:	a9 f7       	brne	.-22     	; 0x3e3c <__udivmodhi4_loop>
    3e52:	80 95       	com	r24
    3e54:	90 95       	com	r25
    3e56:	bc 01       	movw	r22, r24
    3e58:	cd 01       	movw	r24, r26
    3e5a:	08 95       	ret

00003e5c <malloc>:
    3e5c:	cf 93       	push	r28
    3e5e:	df 93       	push	r29
    3e60:	bc 01       	movw	r22, r24
    3e62:	82 30       	cpi	r24, 0x02	; 2
    3e64:	91 05       	cpc	r25, r1
    3e66:	10 f4       	brcc	.+4      	; 0x3e6c <malloc+0x10>
    3e68:	62 e0       	ldi	r22, 0x02	; 2
    3e6a:	70 e0       	ldi	r23, 0x00	; 0
    3e6c:	a0 91 8c 03 	lds	r26, 0x038C
    3e70:	b0 91 8d 03 	lds	r27, 0x038D
    3e74:	ed 01       	movw	r28, r26
    3e76:	e0 e0       	ldi	r30, 0x00	; 0
    3e78:	f0 e0       	ldi	r31, 0x00	; 0
    3e7a:	40 e0       	ldi	r20, 0x00	; 0
    3e7c:	50 e0       	ldi	r21, 0x00	; 0
    3e7e:	21 c0       	rjmp	.+66     	; 0x3ec2 <malloc+0x66>
    3e80:	88 81       	ld	r24, Y
    3e82:	99 81       	ldd	r25, Y+1	; 0x01
    3e84:	86 17       	cp	r24, r22
    3e86:	97 07       	cpc	r25, r23
    3e88:	69 f4       	brne	.+26     	; 0x3ea4 <malloc+0x48>
    3e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e8e:	30 97       	sbiw	r30, 0x00	; 0
    3e90:	19 f0       	breq	.+6      	; 0x3e98 <malloc+0x3c>
    3e92:	93 83       	std	Z+3, r25	; 0x03
    3e94:	82 83       	std	Z+2, r24	; 0x02
    3e96:	04 c0       	rjmp	.+8      	; 0x3ea0 <malloc+0x44>
    3e98:	90 93 8d 03 	sts	0x038D, r25
    3e9c:	80 93 8c 03 	sts	0x038C, r24
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	34 c0       	rjmp	.+104    	; 0x3f0c <malloc+0xb0>
    3ea4:	68 17       	cp	r22, r24
    3ea6:	79 07       	cpc	r23, r25
    3ea8:	38 f4       	brcc	.+14     	; 0x3eb8 <malloc+0x5c>
    3eaa:	41 15       	cp	r20, r1
    3eac:	51 05       	cpc	r21, r1
    3eae:	19 f0       	breq	.+6      	; 0x3eb6 <malloc+0x5a>
    3eb0:	84 17       	cp	r24, r20
    3eb2:	95 07       	cpc	r25, r21
    3eb4:	08 f4       	brcc	.+2      	; 0x3eb8 <malloc+0x5c>
    3eb6:	ac 01       	movw	r20, r24
    3eb8:	fe 01       	movw	r30, r28
    3eba:	8a 81       	ldd	r24, Y+2	; 0x02
    3ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    3ebe:	9c 01       	movw	r18, r24
    3ec0:	e9 01       	movw	r28, r18
    3ec2:	20 97       	sbiw	r28, 0x00	; 0
    3ec4:	e9 f6       	brne	.-70     	; 0x3e80 <malloc+0x24>
    3ec6:	41 15       	cp	r20, r1
    3ec8:	51 05       	cpc	r21, r1
    3eca:	a9 f1       	breq	.+106    	; 0x3f36 <malloc+0xda>
    3ecc:	ca 01       	movw	r24, r20
    3ece:	86 1b       	sub	r24, r22
    3ed0:	97 0b       	sbc	r25, r23
    3ed2:	04 97       	sbiw	r24, 0x04	; 4
    3ed4:	08 f4       	brcc	.+2      	; 0x3ed8 <malloc+0x7c>
    3ed6:	ba 01       	movw	r22, r20
    3ed8:	e0 e0       	ldi	r30, 0x00	; 0
    3eda:	f0 e0       	ldi	r31, 0x00	; 0
    3edc:	2a c0       	rjmp	.+84     	; 0x3f32 <malloc+0xd6>
    3ede:	8d 91       	ld	r24, X+
    3ee0:	9c 91       	ld	r25, X
    3ee2:	11 97       	sbiw	r26, 0x01	; 1
    3ee4:	84 17       	cp	r24, r20
    3ee6:	95 07       	cpc	r25, r21
    3ee8:	f9 f4       	brne	.+62     	; 0x3f28 <malloc+0xcc>
    3eea:	64 17       	cp	r22, r20
    3eec:	75 07       	cpc	r23, r21
    3eee:	81 f4       	brne	.+32     	; 0x3f10 <malloc+0xb4>
    3ef0:	12 96       	adiw	r26, 0x02	; 2
    3ef2:	8d 91       	ld	r24, X+
    3ef4:	9c 91       	ld	r25, X
    3ef6:	13 97       	sbiw	r26, 0x03	; 3
    3ef8:	30 97       	sbiw	r30, 0x00	; 0
    3efa:	19 f0       	breq	.+6      	; 0x3f02 <malloc+0xa6>
    3efc:	93 83       	std	Z+3, r25	; 0x03
    3efe:	82 83       	std	Z+2, r24	; 0x02
    3f00:	04 c0       	rjmp	.+8      	; 0x3f0a <malloc+0xae>
    3f02:	90 93 8d 03 	sts	0x038D, r25
    3f06:	80 93 8c 03 	sts	0x038C, r24
    3f0a:	fd 01       	movw	r30, r26
    3f0c:	32 96       	adiw	r30, 0x02	; 2
    3f0e:	4f c0       	rjmp	.+158    	; 0x3fae <malloc+0x152>
    3f10:	ca 01       	movw	r24, r20
    3f12:	86 1b       	sub	r24, r22
    3f14:	97 0b       	sbc	r25, r23
    3f16:	fd 01       	movw	r30, r26
    3f18:	e8 0f       	add	r30, r24
    3f1a:	f9 1f       	adc	r31, r25
    3f1c:	61 93       	st	Z+, r22
    3f1e:	71 93       	st	Z+, r23
    3f20:	02 97       	sbiw	r24, 0x02	; 2
    3f22:	8d 93       	st	X+, r24
    3f24:	9c 93       	st	X, r25
    3f26:	43 c0       	rjmp	.+134    	; 0x3fae <malloc+0x152>
    3f28:	fd 01       	movw	r30, r26
    3f2a:	82 81       	ldd	r24, Z+2	; 0x02
    3f2c:	93 81       	ldd	r25, Z+3	; 0x03
    3f2e:	9c 01       	movw	r18, r24
    3f30:	d9 01       	movw	r26, r18
    3f32:	10 97       	sbiw	r26, 0x00	; 0
    3f34:	a1 f6       	brne	.-88     	; 0x3ede <malloc+0x82>
    3f36:	80 91 8a 03 	lds	r24, 0x038A
    3f3a:	90 91 8b 03 	lds	r25, 0x038B
    3f3e:	89 2b       	or	r24, r25
    3f40:	41 f4       	brne	.+16     	; 0x3f52 <malloc+0xf6>
    3f42:	80 91 68 03 	lds	r24, 0x0368
    3f46:	90 91 69 03 	lds	r25, 0x0369
    3f4a:	90 93 8b 03 	sts	0x038B, r25
    3f4e:	80 93 8a 03 	sts	0x038A, r24
    3f52:	40 91 6a 03 	lds	r20, 0x036A
    3f56:	50 91 6b 03 	lds	r21, 0x036B
    3f5a:	41 15       	cp	r20, r1
    3f5c:	51 05       	cpc	r21, r1
    3f5e:	41 f4       	brne	.+16     	; 0x3f70 <malloc+0x114>
    3f60:	4d b7       	in	r20, 0x3d	; 61
    3f62:	5e b7       	in	r21, 0x3e	; 62
    3f64:	80 91 66 03 	lds	r24, 0x0366
    3f68:	90 91 67 03 	lds	r25, 0x0367
    3f6c:	48 1b       	sub	r20, r24
    3f6e:	59 0b       	sbc	r21, r25
    3f70:	20 91 8a 03 	lds	r18, 0x038A
    3f74:	30 91 8b 03 	lds	r19, 0x038B
    3f78:	24 17       	cp	r18, r20
    3f7a:	35 07       	cpc	r19, r21
    3f7c:	b0 f4       	brcc	.+44     	; 0x3faa <malloc+0x14e>
    3f7e:	ca 01       	movw	r24, r20
    3f80:	82 1b       	sub	r24, r18
    3f82:	93 0b       	sbc	r25, r19
    3f84:	86 17       	cp	r24, r22
    3f86:	97 07       	cpc	r25, r23
    3f88:	80 f0       	brcs	.+32     	; 0x3faa <malloc+0x14e>
    3f8a:	ab 01       	movw	r20, r22
    3f8c:	4e 5f       	subi	r20, 0xFE	; 254
    3f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f90:	84 17       	cp	r24, r20
    3f92:	95 07       	cpc	r25, r21
    3f94:	50 f0       	brcs	.+20     	; 0x3faa <malloc+0x14e>
    3f96:	42 0f       	add	r20, r18
    3f98:	53 1f       	adc	r21, r19
    3f9a:	50 93 8b 03 	sts	0x038B, r21
    3f9e:	40 93 8a 03 	sts	0x038A, r20
    3fa2:	f9 01       	movw	r30, r18
    3fa4:	61 93       	st	Z+, r22
    3fa6:	71 93       	st	Z+, r23
    3fa8:	02 c0       	rjmp	.+4      	; 0x3fae <malloc+0x152>
    3faa:	e0 e0       	ldi	r30, 0x00	; 0
    3fac:	f0 e0       	ldi	r31, 0x00	; 0
    3fae:	cf 01       	movw	r24, r30
    3fb0:	df 91       	pop	r29
    3fb2:	cf 91       	pop	r28
    3fb4:	08 95       	ret

00003fb6 <free>:
    3fb6:	cf 93       	push	r28
    3fb8:	df 93       	push	r29
    3fba:	00 97       	sbiw	r24, 0x00	; 0
    3fbc:	09 f4       	brne	.+2      	; 0x3fc0 <free+0xa>
    3fbe:	50 c0       	rjmp	.+160    	; 0x4060 <free+0xaa>
    3fc0:	ec 01       	movw	r28, r24
    3fc2:	22 97       	sbiw	r28, 0x02	; 2
    3fc4:	1b 82       	std	Y+3, r1	; 0x03
    3fc6:	1a 82       	std	Y+2, r1	; 0x02
    3fc8:	a0 91 8c 03 	lds	r26, 0x038C
    3fcc:	b0 91 8d 03 	lds	r27, 0x038D
    3fd0:	10 97       	sbiw	r26, 0x00	; 0
    3fd2:	09 f1       	breq	.+66     	; 0x4016 <free+0x60>
    3fd4:	40 e0       	ldi	r20, 0x00	; 0
    3fd6:	50 e0       	ldi	r21, 0x00	; 0
    3fd8:	ac 17       	cp	r26, r28
    3fda:	bd 07       	cpc	r27, r29
    3fdc:	08 f1       	brcs	.+66     	; 0x4020 <free+0x6a>
    3fde:	bb 83       	std	Y+3, r27	; 0x03
    3fe0:	aa 83       	std	Y+2, r26	; 0x02
    3fe2:	fe 01       	movw	r30, r28
    3fe4:	21 91       	ld	r18, Z+
    3fe6:	31 91       	ld	r19, Z+
    3fe8:	e2 0f       	add	r30, r18
    3fea:	f3 1f       	adc	r31, r19
    3fec:	ae 17       	cp	r26, r30
    3fee:	bf 07       	cpc	r27, r31
    3ff0:	79 f4       	brne	.+30     	; 0x4010 <free+0x5a>
    3ff2:	8d 91       	ld	r24, X+
    3ff4:	9c 91       	ld	r25, X
    3ff6:	11 97       	sbiw	r26, 0x01	; 1
    3ff8:	28 0f       	add	r18, r24
    3ffa:	39 1f       	adc	r19, r25
    3ffc:	2e 5f       	subi	r18, 0xFE	; 254
    3ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    4000:	39 83       	std	Y+1, r19	; 0x01
    4002:	28 83       	st	Y, r18
    4004:	12 96       	adiw	r26, 0x02	; 2
    4006:	8d 91       	ld	r24, X+
    4008:	9c 91       	ld	r25, X
    400a:	13 97       	sbiw	r26, 0x03	; 3
    400c:	9b 83       	std	Y+3, r25	; 0x03
    400e:	8a 83       	std	Y+2, r24	; 0x02
    4010:	41 15       	cp	r20, r1
    4012:	51 05       	cpc	r21, r1
    4014:	71 f4       	brne	.+28     	; 0x4032 <free+0x7c>
    4016:	d0 93 8d 03 	sts	0x038D, r29
    401a:	c0 93 8c 03 	sts	0x038C, r28
    401e:	20 c0       	rjmp	.+64     	; 0x4060 <free+0xaa>
    4020:	12 96       	adiw	r26, 0x02	; 2
    4022:	8d 91       	ld	r24, X+
    4024:	9c 91       	ld	r25, X
    4026:	13 97       	sbiw	r26, 0x03	; 3
    4028:	ad 01       	movw	r20, r26
    402a:	00 97       	sbiw	r24, 0x00	; 0
    402c:	11 f0       	breq	.+4      	; 0x4032 <free+0x7c>
    402e:	dc 01       	movw	r26, r24
    4030:	d3 cf       	rjmp	.-90     	; 0x3fd8 <free+0x22>
    4032:	fa 01       	movw	r30, r20
    4034:	d3 83       	std	Z+3, r29	; 0x03
    4036:	c2 83       	std	Z+2, r28	; 0x02
    4038:	21 91       	ld	r18, Z+
    403a:	31 91       	ld	r19, Z+
    403c:	e2 0f       	add	r30, r18
    403e:	f3 1f       	adc	r31, r19
    4040:	ce 17       	cp	r28, r30
    4042:	df 07       	cpc	r29, r31
    4044:	69 f4       	brne	.+26     	; 0x4060 <free+0xaa>
    4046:	88 81       	ld	r24, Y
    4048:	99 81       	ldd	r25, Y+1	; 0x01
    404a:	28 0f       	add	r18, r24
    404c:	39 1f       	adc	r19, r25
    404e:	2e 5f       	subi	r18, 0xFE	; 254
    4050:	3f 4f       	sbci	r19, 0xFF	; 255
    4052:	fa 01       	movw	r30, r20
    4054:	31 83       	std	Z+1, r19	; 0x01
    4056:	20 83       	st	Z, r18
    4058:	8a 81       	ldd	r24, Y+2	; 0x02
    405a:	9b 81       	ldd	r25, Y+3	; 0x03
    405c:	93 83       	std	Z+3, r25	; 0x03
    405e:	82 83       	std	Z+2, r24	; 0x02
    4060:	df 91       	pop	r29
    4062:	cf 91       	pop	r28
    4064:	08 95       	ret

00004066 <fdevopen>:
    4066:	0f 93       	push	r16
    4068:	1f 93       	push	r17
    406a:	cf 93       	push	r28
    406c:	df 93       	push	r29
    406e:	8c 01       	movw	r16, r24
    4070:	eb 01       	movw	r28, r22
    4072:	00 97       	sbiw	r24, 0x00	; 0
    4074:	31 f4       	brne	.+12     	; 0x4082 <fdevopen+0x1c>
    4076:	61 15       	cp	r22, r1
    4078:	71 05       	cpc	r23, r1
    407a:	19 f4       	brne	.+6      	; 0x4082 <fdevopen+0x1c>
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	38 c0       	rjmp	.+112    	; 0x40f2 <fdevopen+0x8c>
    4082:	81 e0       	ldi	r24, 0x01	; 1
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	6e e0       	ldi	r22, 0x0E	; 14
    4088:	70 e0       	ldi	r23, 0x00	; 0
    408a:	0e 94 7f 20 	call	0x40fe	; 0x40fe <calloc>
    408e:	fc 01       	movw	r30, r24
    4090:	9c 01       	movw	r18, r24
    4092:	00 97       	sbiw	r24, 0x00	; 0
    4094:	71 f1       	breq	.+92     	; 0x40f2 <fdevopen+0x8c>
    4096:	80 e8       	ldi	r24, 0x80	; 128
    4098:	83 83       	std	Z+3, r24	; 0x03
    409a:	20 97       	sbiw	r28, 0x00	; 0
    409c:	71 f0       	breq	.+28     	; 0x40ba <fdevopen+0x54>
    409e:	d3 87       	std	Z+11, r29	; 0x0b
    40a0:	c2 87       	std	Z+10, r28	; 0x0a
    40a2:	81 e8       	ldi	r24, 0x81	; 129
    40a4:	83 83       	std	Z+3, r24	; 0x03
    40a6:	80 91 8e 03 	lds	r24, 0x038E
    40aa:	90 91 8f 03 	lds	r25, 0x038F
    40ae:	89 2b       	or	r24, r25
    40b0:	21 f4       	brne	.+8      	; 0x40ba <fdevopen+0x54>
    40b2:	f0 93 8f 03 	sts	0x038F, r31
    40b6:	e0 93 8e 03 	sts	0x038E, r30
    40ba:	01 15       	cp	r16, r1
    40bc:	11 05       	cpc	r17, r1
    40be:	c9 f0       	breq	.+50     	; 0x40f2 <fdevopen+0x8c>
    40c0:	11 87       	std	Z+9, r17	; 0x09
    40c2:	00 87       	std	Z+8, r16	; 0x08
    40c4:	83 81       	ldd	r24, Z+3	; 0x03
    40c6:	82 60       	ori	r24, 0x02	; 2
    40c8:	83 83       	std	Z+3, r24	; 0x03
    40ca:	80 91 90 03 	lds	r24, 0x0390
    40ce:	90 91 91 03 	lds	r25, 0x0391
    40d2:	89 2b       	or	r24, r25
    40d4:	71 f4       	brne	.+28     	; 0x40f2 <fdevopen+0x8c>
    40d6:	f0 93 91 03 	sts	0x0391, r31
    40da:	e0 93 90 03 	sts	0x0390, r30
    40de:	80 91 92 03 	lds	r24, 0x0392
    40e2:	90 91 93 03 	lds	r25, 0x0393
    40e6:	89 2b       	or	r24, r25
    40e8:	21 f4       	brne	.+8      	; 0x40f2 <fdevopen+0x8c>
    40ea:	f0 93 93 03 	sts	0x0393, r31
    40ee:	e0 93 92 03 	sts	0x0392, r30
    40f2:	c9 01       	movw	r24, r18
    40f4:	df 91       	pop	r29
    40f6:	cf 91       	pop	r28
    40f8:	1f 91       	pop	r17
    40fa:	0f 91       	pop	r16
    40fc:	08 95       	ret

000040fe <calloc>:
    40fe:	0f 93       	push	r16
    4100:	1f 93       	push	r17
    4102:	cf 93       	push	r28
    4104:	df 93       	push	r29
    4106:	68 9f       	mul	r22, r24
    4108:	80 01       	movw	r16, r0
    410a:	69 9f       	mul	r22, r25
    410c:	10 0d       	add	r17, r0
    410e:	78 9f       	mul	r23, r24
    4110:	10 0d       	add	r17, r0
    4112:	11 24       	eor	r1, r1
    4114:	c8 01       	movw	r24, r16
    4116:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <malloc>
    411a:	ec 01       	movw	r28, r24
    411c:	00 97       	sbiw	r24, 0x00	; 0
    411e:	29 f0       	breq	.+10     	; 0x412a <__stack+0x2b>
    4120:	60 e0       	ldi	r22, 0x00	; 0
    4122:	70 e0       	ldi	r23, 0x00	; 0
    4124:	a8 01       	movw	r20, r16
    4126:	0e 94 9b 20 	call	0x4136	; 0x4136 <memset>
    412a:	ce 01       	movw	r24, r28
    412c:	df 91       	pop	r29
    412e:	cf 91       	pop	r28
    4130:	1f 91       	pop	r17
    4132:	0f 91       	pop	r16
    4134:	08 95       	ret

00004136 <memset>:
    4136:	dc 01       	movw	r26, r24
    4138:	01 c0       	rjmp	.+2      	; 0x413c <memset+0x6>
    413a:	6d 93       	st	X+, r22
    413c:	41 50       	subi	r20, 0x01	; 1
    413e:	50 40       	sbci	r21, 0x00	; 0
    4140:	e0 f7       	brcc	.-8      	; 0x413a <memset+0x4>
    4142:	08 95       	ret

00004144 <_exit>:
    4144:	f8 94       	cli

00004146 <__stop_program>:
    4146:	ff cf       	rjmp	.-2      	; 0x4146 <__stop_program>
