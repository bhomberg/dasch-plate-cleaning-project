
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000292  00800100  0000421a  000042ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000421a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800392  00800392  00004540  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  00004540  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002591  00000000  00000000  00006d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00009291  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001dc  00000000  00000000  000092d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001328  00000000  00000000  000094ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003ec  00000000  00000000  0000a7d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002043  00000000  00000000  0000abc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  0000cc04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d43  00000000  00000000  0000cd44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001103  00000000  00000000  0000da87  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  0000eb8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 01 	jmp	0x208	; 0x208 <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__vector_11>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      48:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      6c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	38 05       	cpc	r19, r8
      8e:	49 05       	cpc	r20, r9
      90:	61 05       	cpc	r22, r1
      92:	74 05       	cpc	r23, r4
      94:	88 05       	cpc	r24, r8
      96:	9b 05       	cpc	r25, r11
      98:	af 05       	cpc	r26, r15
      9a:	c4 05       	cpc	r28, r4
      9c:	d8 05       	cpc	r29, r8
      9e:	e6 05       	cpc	r30, r6
      a0:	ec 05       	cpc	r30, r12
      a2:	fa 05       	cpc	r31, r10
      a4:	fe 05       	cpc	r31, r14
      a6:	0c 06       	cpc	r0, r28
      a8:	10 06       	cpc	r1, r16
      aa:	1e 06       	cpc	r1, r30
      ac:	22 06       	cpc	r2, r18
      ae:	31 06       	cpc	r3, r17
      b0:	35 06       	cpc	r3, r21
      b2:	43 06       	cpc	r4, r19
      b4:	46 06       	cpc	r4, r22
      b6:	55 06       	cpc	r5, r21
      b8:	59 06       	cpc	r5, r25
      ba:	78 06       	cpc	r7, r24
      bc:	69 06       	cpc	r6, r25
      be:	7c 06       	cpc	r7, r28
      c0:	80 06       	cpc	r8, r16
      c2:	8e 06       	cpc	r8, r30
      c4:	91 06       	cpc	r9, r17
      c6:	a0 06       	cpc	r10, r16
      c8:	a4 06       	cpc	r10, r20
      ca:	b2 06       	cpc	r11, r18
      cc:	b8 06       	cpc	r11, r24
      ce:	ce 06       	cpc	r12, r30
      d0:	da 06       	cpc	r13, r26
      d2:	f7 06       	cpc	r15, r23
      d4:	03 07       	cpc	r16, r19
      d6:	20 07       	cpc	r18, r16
      d8:	2c 07       	cpc	r18, r28
      da:	49 07       	cpc	r20, r25
      dc:	55 07       	cpc	r21, r21
      de:	72 07       	cpc	r23, r18
      e0:	7e 07       	cpc	r23, r30
      e2:	9e 07       	cpc	r25, r30
      e4:	68 0a       	sbc	r6, r24
      e6:	8f 0a       	sbc	r8, r31
      e8:	b2 0a       	sbc	r11, r18
      ea:	fe 0a       	sbc	r15, r30
      ec:	bf 0a       	sbc	r11, r31
      ee:	cc 0a       	sbc	r12, r28
      f0:	d7 0a       	sbc	r13, r23
      f2:	e1 0a       	sbc	r14, r17
      f4:	ec 0a       	sbc	r14, r28
      f6:	f7 0a       	sbc	r15, r23
      f8:	14 0b       	sbc	r17, r20
      fa:	fe 0a       	sbc	r15, r30
      fc:	02 0b       	sbc	r16, r18
      fe:	56 0b       	sbc	r21, r22
     100:	14 0b       	sbc	r17, r20
     102:	bd 0b       	sbc	r27, r29
     104:	bd 0b       	sbc	r27, r29
     106:	bd 0b       	sbc	r27, r29
     108:	bd 0b       	sbc	r27, r29
     10a:	bd 0b       	sbc	r27, r29
     10c:	bd 0b       	sbc	r27, r29
     10e:	bd 0b       	sbc	r27, r29
     110:	bd 0b       	sbc	r27, r29
     112:	1f 0b       	sbc	r17, r31
     114:	2e 0b       	sbc	r18, r30
     116:	34 0b       	sbc	r19, r20
     118:	3f 0b       	sbc	r19, r31
     11a:	43 0b       	sbc	r20, r19
     11c:	50 0b       	sbc	r21, r16
     11e:	56 0b       	sbc	r21, r22
     120:	60 0b       	sbc	r22, r16
     122:	6e 0b       	sbc	r22, r30
     124:	7a 0b       	sbc	r23, r26
     126:	88 0b       	sbc	r24, r24
     128:	9d 0b       	sbc	r25, r29
     12a:	aa 0b       	sbc	r26, r26
     12c:	0a 0e       	add	r0, r26
     12e:	32 0e       	add	r3, r18
     130:	55 0e       	add	r5, r21
     132:	62 0e       	add	r6, r18
     134:	66 0e       	add	r6, r22
     136:	73 0e       	add	r7, r19
     138:	7e 0e       	add	r7, r30
     13a:	69 0f       	add	r22, r25
     13c:	69 0f       	add	r22, r25
     13e:	69 0f       	add	r22, r25
     140:	69 0f       	add	r22, r25
     142:	69 0f       	add	r22, r25
     144:	69 0f       	add	r22, r25
     146:	69 0f       	add	r22, r25
     148:	69 0f       	add	r22, r25
     14a:	88 0e       	add	r8, r24
     14c:	8f 0e       	add	r8, r31
     14e:	da 0e       	add	r13, r26
     150:	9e 0e       	add	r9, r30
     152:	a9 0e       	add	r10, r25
     154:	b4 0e       	add	r11, r20
     156:	01 0f       	add	r16, r17
     158:	c8 0e       	add	r12, r24
     15a:	da 0e       	add	r13, r26
     15c:	e4 0e       	add	r14, r20
     15e:	a9 0e       	add	r10, r25
     160:	ea 0e       	add	r14, r26
     162:	ee 0e       	add	r14, r30
     164:	fb 0e       	add	r15, r27
     166:	01 0f       	add	r16, r17
     168:	0b 0f       	add	r16, r27
     16a:	19 0f       	add	r17, r25
     16c:	25 0f       	add	r18, r21
     16e:	33 0f       	add	r19, r19
     170:	48 0f       	add	r20, r24
     172:	55 0f       	add	r21, r21
     174:	40 12       	cpse	r4, r16
     176:	68 12       	cpse	r6, r24
     178:	8b 12       	cpse	r8, r27
     17a:	db 12       	cpse	r13, r27
     17c:	98 12       	cpse	r9, r24
     17e:	a5 12       	cpse	r10, r21
     180:	b0 12       	cpse	r11, r16
     182:	b4 12       	cpse	r11, r20
     184:	bf 12       	cpse	r11, r31
     186:	ca 12       	cpse	r12, r26
     188:	fb 12       	cpse	r15, r27
     18a:	db 12       	cpse	r13, r27
     18c:	df 12       	cpse	r13, r31
     18e:	f1 12       	cpse	r15, r17
     190:	fb 12       	cpse	r15, r27
     192:	06 13       	cpse	r16, r22
     194:	0d 13       	cpse	r16, r29
     196:	1c 13       	cpse	r17, r28
     198:	26 13       	cpse	r18, r22
     19a:	31 13       	cpse	r19, r17
     19c:	3c 13       	cpse	r19, r28
     19e:	50 13       	cpse	r21, r16
     1a0:	5a 13       	cpse	r21, r26
     1a2:	1c 13       	cpse	r17, r28
     1a4:	6c 13       	cpse	r22, r28
     1a6:	31 13       	cpse	r19, r17
     1a8:	72 13       	cpse	r23, r18
     1aa:	76 13       	cpse	r23, r22
     1ac:	83 13       	cpse	r24, r19
     1ae:	50 13       	cpse	r21, r16
     1b0:	89 13       	cpse	r24, r25
     1b2:	97 13       	cpse	r25, r23
     1b4:	a3 13       	cpse	r26, r19
     1b6:	b1 13       	cpse	r27, r17
     1b8:	c6 13       	cpse	r28, r22
     1ba:	d3 13       	cpse	r29, r19
     1bc:	bf 16       	cp	r11, r31
     1be:	e5 16       	cp	r14, r21
     1c0:	08 17       	cp	r16, r24
     1c2:	52 17       	cp	r21, r18
     1c4:	15 17       	cp	r17, r21
     1c6:	22 17       	cp	r18, r18
     1c8:	2d 17       	cp	r18, r29
     1ca:	31 17       	cp	r19, r17
     1cc:	3c 17       	cp	r19, r28
     1ce:	45 17       	cp	r20, r21
     1d0:	74 17       	cp	r23, r20
     1d2:	52 17       	cp	r21, r18
     1d4:	56 17       	cp	r21, r22
     1d6:	68 17       	cp	r22, r24
     1d8:	74 17       	cp	r23, r20
     1da:	7f 17       	cp	r23, r31
     1dc:	86 17       	cp	r24, r22
     1de:	95 17       	cp	r25, r21
     1e0:	a1 17       	cp	r26, r17
     1e2:	ac 17       	cp	r26, r28
     1e4:	b7 17       	cp	r27, r23
     1e6:	cb 17       	cp	r28, r27
     1e8:	d5 17       	cp	r29, r21
     1ea:	e7 17       	cp	r30, r23
     1ec:	ef 17       	cp	r30, r31
     1ee:	ac 17       	cp	r26, r28
     1f0:	f5 17       	cp	r31, r21
     1f2:	04 18       	sub	r0, r4
     1f4:	11 18       	sub	r1, r1
     1f6:	1b 18       	sub	r1, r11
     1f8:	27 18       	sub	r2, r7
     1fa:	3e 18       	sub	r3, r14
     1fc:	43 18       	sub	r4, r3
     1fe:	4e 18       	sub	r4, r14
     200:	59 18       	sub	r5, r9
     202:	63 18       	sub	r6, r3
     204:	77 18       	sub	r7, r7
     206:	b6 16       	cp	r11, r22

00000208 <__ctors_end>:
     208:	11 24       	eor	r1, r1
     20a:	1f be       	out	0x3f, r1	; 63
     20c:	cf ef       	ldi	r28, 0xFF	; 255
     20e:	d0 e4       	ldi	r29, 0x40	; 64
     210:	de bf       	out	0x3e, r29	; 62
     212:	cd bf       	out	0x3d, r28	; 61

00000214 <__do_copy_data>:
     214:	13 e0       	ldi	r17, 0x03	; 3
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	ea e1       	ldi	r30, 0x1A	; 26
     21c:	f2 e4       	ldi	r31, 0x42	; 66
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a2 39       	cpi	r26, 0x92	; 146
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>

0000022e <__do_clear_bss>:
     22e:	13 e0       	ldi	r17, 0x03	; 3
     230:	a2 e9       	ldi	r26, 0x92	; 146
     232:	b3 e0       	ldi	r27, 0x03	; 3
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	aa 3b       	cpi	r26, 0xBA	; 186
     23a:	b1 07       	cpc	r27, r17
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 90 02 	call	0x520	; 0x520 <main>
     242:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <_ZN16OrangutanDigital11isInputHighEh>:


	// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
	// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
	// the pin.
	inline static unsigned char isInputHigh(unsigned char pin)
     24a:	48 2f       	mov	r20, r24
		io->pinRegister = 0;
		io->portRegister = 0;
		io->ddrRegister = 0;
		io->bitmask = 0;

		if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     24c:	88 30       	cpi	r24, 0x08	; 8
     24e:	58 f4       	brcc	.+22     	; 0x266 <_ZN16OrangutanDigital11isInputHighEh+0x1c>
		{
			io->pinRegister = (unsigned char*)&PIND;
			io->portRegister = (unsigned char*)&PORTD;
			io->ddrRegister = (unsigned char*)&DDRD;
			io->bitmask = 1 << pin;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	02 c0       	rjmp	.+4      	; 0x25a <_ZN16OrangutanDigital11isInputHighEh+0x10>
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	4a 95       	dec	r20
     25c:	e2 f7       	brpl	.-8      	; 0x256 <_ZN16OrangutanDigital11isInputHighEh+0xc>
     25e:	98 2f       	mov	r25, r24
     260:	e9 e2       	ldi	r30, 0x29	; 41
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	36 c0       	rjmp	.+108    	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)

		else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     266:	80 31       	cpi	r24, 0x10	; 16
     268:	78 f4       	brcc	.+30     	; 0x288 <_ZN16OrangutanDigital11isInputHighEh+0x3e>
		{
			io->pinRegister = (unsigned char*)&PINB;
			io->portRegister = (unsigned char*)&PORTB;
			io->ddrRegister = (unsigned char*)&DDRB;
			io->bitmask = 1 << (pin - 8);
     26a:	28 2f       	mov	r18, r24
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	28 50       	subi	r18, 0x08	; 8
     270:	30 40       	sbci	r19, 0x00	; 0
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	02 c0       	rjmp	.+4      	; 0x27c <_ZN16OrangutanDigital11isInputHighEh+0x32>
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	2a 95       	dec	r18
     27e:	e2 f7       	brpl	.-8      	; 0x278 <_ZN16OrangutanDigital11isInputHighEh+0x2e>
     280:	98 2f       	mov	r25, r24
     282:	e3 e2       	ldi	r30, 0x23	; 35
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	25 c0       	rjmp	.+74     	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     288:	88 31       	cpi	r24, 0x18	; 24
     28a:	78 f4       	brcc	.+30     	; 0x2aa <_ZN16OrangutanDigital11isInputHighEh+0x60>
		{
			io->pinRegister = (unsigned char*)&PINC;
			io->portRegister = (unsigned char*)&PORTC;
			io->ddrRegister = (unsigned char*)&DDRC;
			io->bitmask = 1 << (pin - 16);
     28c:	28 2f       	mov	r18, r24
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	20 51       	subi	r18, 0x10	; 16
     292:	30 40       	sbci	r19, 0x00	; 0
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	02 c0       	rjmp	.+4      	; 0x29e <_ZN16OrangutanDigital11isInputHighEh+0x54>
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	2a 95       	dec	r18
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <_ZN16OrangutanDigital11isInputHighEh+0x50>
     2a2:	98 2f       	mov	r25, r24
     2a4:	e6 e2       	ldi	r30, 0x26	; 38
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	14 c0       	rjmp	.+40     	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     2aa:	80 32       	cpi	r24, 0x20	; 32
     2ac:	20 f0       	brcs	.+8      	; 0x2b6 <_ZN16OrangutanDigital11isInputHighEh+0x6c>
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	e0 e0       	ldi	r30, 0x00	; 0
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	0e c0       	rjmp	.+28     	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		{
			io->pinRegister = (unsigned char*)&PINA;
			io->portRegister = (unsigned char*)&PORTA;
			io->ddrRegister = (unsigned char*)&DDRA;
			io->bitmask = 1 << (31 - pin);
     2b6:	2f e1       	ldi	r18, 0x1F	; 31
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	28 1b       	sub	r18, r24
     2bc:	31 09       	sbc	r19, r1
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <_ZN16OrangutanDigital11isInputHighEh+0x7e>
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	2a 95       	dec	r18
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <_ZN16OrangutanDigital11isInputHighEh+0x7a>
     2cc:	98 2f       	mov	r25, r24
     2ce:	e0 e2       	ldi	r30, 0x20	; 32
     2d0:	f0 e0       	ldi	r31, 0x00	; 0

	// low-level method for reading the value of the PIN register for an pin or set of pins
	// described by an IOStruct pointer.
	inline static unsigned char getInputValue(struct IOStruct* ioPin)
	{
		return *(ioPin->pinRegister) & ioPin->bitmask;
     2d2:	80 81       	ld	r24, Z
	inline static unsigned char isInputHigh(unsigned char pin)
	{
		struct IOStruct registers;
		getIORegisters(&registers, pin);
		return getInputValue(&registers);
	}
     2d4:	89 23       	and	r24, r25
     2d6:	08 95       	ret

000002d8 <__cxa_guard_acquire>:

extern "C" int __cxa_guard_acquire(__guard *); 
extern "C" void __cxa_guard_release (__guard *); 
extern "C" void __cxa_guard_abort (__guard *); 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);}; 
     2d8:	fc 01       	movw	r30, r24
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	88 23       	and	r24, r24
     2e2:	11 f4       	brne	.+4      	; 0x2e8 <__cxa_guard_acquire+0x10>
     2e4:	21 e0       	ldi	r18, 0x01	; 1
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	c9 01       	movw	r24, r18
     2ea:	08 95       	ret

000002ec <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;}; 
     2ec:	fc 01       	movw	r30, r24
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	80 83       	st	Z, r24
     2f2:	08 95       	ret

000002f4 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
     2f4:	08 95       	ret

000002f6 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void); 
void __cxa_pure_virtual(void) {}; 
     2f6:	08 95       	ret

000002f8 <_Z15button_debounceiPi>:
	}
	return 1;
}*/


bool button_debounce(int counter, int *pstateButton)
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	8c 01       	movw	r16, r24
     302:	eb 01       	movw	r28, r22
{
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && OrangutanDigital::isInputHigh(IO_D0)){
     304:	88 81       	ld	r24, Y
     306:	99 81       	ldd	r25, Y+1	; 0x01
     308:	89 2b       	or	r24, r25
     30a:	69 f4       	brne	.+26     	; 0x326 <_Z15button_debounceiPi+0x2e>
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     312:	88 23       	and	r24, r24
     314:	41 f0       	breq	.+16     	; 0x326 <_Z15button_debounceiPi+0x2e>
		counterRefPush = counter;
     316:	10 93 9b 03 	sts	0x039B, r17
     31a:	00 93 9a 03 	sts	0x039A, r16
		*pstateButton = PRESSED;
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	99 83       	std	Y+1, r25	; 0x01
     324:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     326:	88 81       	ld	r24, Y
     328:	99 81       	ldd	r25, Y+1	; 0x01
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f9 f4       	brne	.+62     	; 0x36c <_Z15button_debounceiPi+0x74>
		if(counter - counterRefPush > 15){
     32e:	80 91 9a 03 	lds	r24, 0x039A
     332:	90 91 9b 03 	lds	r25, 0x039B
     336:	98 01       	movw	r18, r16
     338:	28 1b       	sub	r18, r24
     33a:	39 0b       	sbc	r19, r25
     33c:	20 31       	cpi	r18, 0x10	; 16
     33e:	31 05       	cpc	r19, r1
     340:	74 f0       	brlt	.+28     	; 0x35e <_Z15button_debounceiPi+0x66>
			if(!OrangutanDigital::isInputHigh(IO_D0)){
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     348:	88 23       	and	r24, r24
     34a:	81 f4       	brne	.+32     	; 0x36c <_Z15button_debounceiPi+0x74>
				counterRefRel = counter;
     34c:	10 93 99 03 	sts	0x0399, r17
     350:	00 93 98 03 	sts	0x0398, r16
				*pstateButton = RELEASED;
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	99 83       	std	Y+1, r25	; 0x01
     35a:	88 83       	st	Y, r24
     35c:	07 c0       	rjmp	.+14     	; 0x36c <_Z15button_debounceiPi+0x74>
			}
		}
		else if(!OrangutanDigital::isInputHigh(IO_D0)){
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     364:	88 23       	and	r24, r24
     366:	11 f4       	brne	.+4      	; 0x36c <_Z15button_debounceiPi+0x74>
			*pstateButton = NONE;
     368:	19 82       	std	Y+1, r1	; 0x01
     36a:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     36c:	88 81       	ld	r24, Y
     36e:	99 81       	ldd	r25, Y+1	; 0x01
     370:	02 97       	sbiw	r24, 0x02	; 2
     372:	d9 f4       	brne	.+54     	; 0x3aa <_Z15button_debounceiPi+0xb2>
		if(OrangutanDigital::isInputHigh(IO_D0)){
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     37a:	88 23       	and	r24, r24
     37c:	49 f0       	breq	.+18     	; 0x390 <_Z15button_debounceiPi+0x98>
			*pstateButton = PRESSED;
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	99 83       	std	Y+1, r25	; 0x01
     384:	88 83       	st	Y, r24
			counterRefPush = counter;
     386:	10 93 9b 03 	sts	0x039B, r17
     38a:	00 93 9a 03 	sts	0x039A, r16
     38e:	0d c0       	rjmp	.+26     	; 0x3aa <_Z15button_debounceiPi+0xb2>
		}
		else if(counter - counterRefRel > 15){
     390:	80 91 98 03 	lds	r24, 0x0398
     394:	90 91 99 03 	lds	r25, 0x0399
     398:	08 1b       	sub	r16, r24
     39a:	19 0b       	sbc	r17, r25
     39c:	00 31       	cpi	r16, 0x10	; 16
     39e:	11 05       	cpc	r17, r1
     3a0:	24 f0       	brlt	.+8      	; 0x3aa <_Z15button_debounceiPi+0xb2>
			*pstateButton = NONE;
     3a2:	19 82       	std	Y+1, r1	; 0x01
     3a4:	18 82       	st	Y, r1
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <_Z15button_debounceiPi+0xb4>
			return true;
     3aa:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	08 95       	ret

000003b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>:
	OrangutanLCD::print("END");
	}
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor, int totalStepLength1, int totalStepLength2, int totalStepLength3, int totalStepLength4, int totalStepLength5, int highLength1, int highLength2, int highLength3, int highLength4, int highLength5)
     3b6:	2f 92       	push	r2
     3b8:	3f 92       	push	r3
     3ba:	4f 92       	push	r4
     3bc:	5f 92       	push	r5
     3be:	6f 92       	push	r6
     3c0:	7f 92       	push	r7
     3c2:	8f 92       	push	r8
     3c4:	9f 92       	push	r9
     3c6:	af 92       	push	r10
     3c8:	bf 92       	push	r11
     3ca:	cf 92       	push	r12
     3cc:	df 92       	push	r13
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	df 93       	push	r29
     3d8:	cf 93       	push	r28
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	2c 01       	movw	r4, r24
     3e0:	1a 01       	movw	r2, r20
     3e2:	39 01       	movw	r6, r18
{
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     3e4:	fc 01       	movw	r30, r24
     3e6:	e6 1b       	sub	r30, r22
     3e8:	f7 0b       	sbc	r31, r23
     3ea:	cf 01       	movw	r24, r30
     3ec:	b4 01       	movw	r22, r8
     3ee:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__divmodhi4>
     3f2:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3f4:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3f6:	82 17       	cp	r24, r18
     3f8:	93 07       	cpc	r25, r19
     3fa:	34 f4       	brge	.+12     	; 0x408 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
     3fc:	67 28       	or	r6, r7
     3fe:	21 f0       	breq	.+8      	; 0x408 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     400:	80 91 92 03 	lds	r24, 0x0392
     404:	81 60       	ori	r24, 0x01	; 1
     406:	03 c0       	rjmp	.+6      	; 0x40e <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x58>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     408:	80 91 92 03 	lds	r24, 0x0392
     40c:	8e 7f       	andi	r24, 0xFE	; 254
     40e:	80 93 92 03 	sts	0x0392, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     412:	cf 01       	movw	r24, r30
     414:	6d 89       	ldd	r22, Y+21	; 0x15
     416:	7e 89       	ldd	r23, Y+22	; 0x16
     418:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__divmodhi4>
     41c:	2f 8d       	ldd	r18, Y+31	; 0x1f
     41e:	38 a1       	ldd	r19, Y+32	; 0x20
     420:	82 17       	cp	r24, r18
     422:	93 07       	cpc	r25, r19
     424:	34 f4       	brge	.+12     	; 0x432 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
     426:	01 2b       	or	r16, r17
     428:	21 f0       	breq	.+8      	; 0x432 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     42a:	80 91 92 03 	lds	r24, 0x0392
     42e:	88 60       	ori	r24, 0x08	; 8
     430:	03 c0       	rjmp	.+6      	; 0x438 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x82>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     432:	80 91 92 03 	lds	r24, 0x0392
     436:	87 7f       	andi	r24, 0xF7	; 247
     438:	80 93 92 03 	sts	0x0392, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     43c:	cf 01       	movw	r24, r30
     43e:	6f 89       	ldd	r22, Y+23	; 0x17
     440:	78 8d       	ldd	r23, Y+24	; 0x18
     442:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__divmodhi4>
     446:	29 a1       	ldd	r18, Y+33	; 0x21
     448:	3a a1       	ldd	r19, Y+34	; 0x22
     44a:	82 17       	cp	r24, r18
     44c:	93 07       	cpc	r25, r19
     44e:	34 f4       	brge	.+12     	; 0x45c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
     450:	ef 28       	or	r14, r15
     452:	21 f0       	breq	.+8      	; 0x45c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     454:	80 91 92 03 	lds	r24, 0x0392
     458:	80 64       	ori	r24, 0x40	; 64
     45a:	03 c0       	rjmp	.+6      	; 0x462 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xac>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     45c:	80 91 92 03 	lds	r24, 0x0392
     460:	8f 7b       	andi	r24, 0xBF	; 191
     462:	80 93 92 03 	sts	0x0392, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     466:	cf 01       	movw	r24, r30
     468:	69 8d       	ldd	r22, Y+25	; 0x19
     46a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     46c:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__divmodhi4>
     470:	2b a1       	ldd	r18, Y+35	; 0x23
     472:	3c a1       	ldd	r19, Y+36	; 0x24
     474:	82 17       	cp	r24, r18
     476:	93 07       	cpc	r25, r19
     478:	34 f4       	brge	.+12     	; 0x486 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
     47a:	cd 28       	or	r12, r13
     47c:	21 f0       	breq	.+8      	; 0x486 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     47e:	80 91 93 03 	lds	r24, 0x0393
     482:	82 60       	ori	r24, 0x02	; 2
     484:	03 c0       	rjmp	.+6      	; 0x48c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd6>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     486:	80 91 93 03 	lds	r24, 0x0393
     48a:	8d 7f       	andi	r24, 0xFD	; 253
     48c:	80 93 93 03 	sts	0x0393, r24
	}

	if( ((counter - counterRefFive) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     490:	c2 01       	movw	r24, r4
     492:	82 19       	sub	r24, r2
     494:	93 09       	sbc	r25, r3
     496:	6b 8d       	ldd	r22, Y+27	; 0x1b
     498:	7c 8d       	ldd	r23, Y+28	; 0x1c
     49a:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__divmodhi4>
     49e:	2d a1       	ldd	r18, Y+37	; 0x25
     4a0:	3e a1       	ldd	r19, Y+38	; 0x26
     4a2:	82 17       	cp	r24, r18
     4a4:	93 07       	cpc	r25, r19
     4a6:	34 f4       	brge	.+12     	; 0x4b4 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
     4a8:	ab 28       	or	r10, r11
     4aa:	21 f0       	breq	.+8      	; 0x4b4 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     4ac:	80 91 93 03 	lds	r24, 0x0393
     4b0:	80 61       	ori	r24, 0x10	; 16
     4b2:	03 c0       	rjmp	.+6      	; 0x4ba <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x104>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     4b4:	80 91 93 03 	lds	r24, 0x0393
     4b8:	8f 7e       	andi	r24, 0xEF	; 239
     4ba:	80 93 93 03 	sts	0x0393, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     4be:	80 e4       	ldi	r24, 0x40	; 64
     4c0:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
	i2c_write(0x2);									// write command byte
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     4ca:	80 91 92 03 	lds	r24, 0x0392
     4ce:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     4d2:	80 91 93 03 	lds	r24, 0x0393
     4d6:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
	i2c_stop();                            // set stop conditon = release bus
     4da:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Z8i2c_stopv>

	i2c_start(I2C2+I2C_WRITE);
     4de:	82 e4       	ldi	r24, 0x42	; 66
     4e0:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
	i2c_write(0x2);
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
	i2c_write(u_outputByte0.outputByte0);
     4ea:	80 91 94 03 	lds	r24, 0x0394
     4ee:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
	i2c_write(u_outputByte1.outputByte1);
     4f2:	80 91 95 03 	lds	r24, 0x0395
     4f6:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
}
     4fa:	cf 91       	pop	r28
     4fc:	df 91       	pop	r29
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	ff 90       	pop	r15
     504:	ef 90       	pop	r14
     506:	df 90       	pop	r13
     508:	cf 90       	pop	r12
     50a:	bf 90       	pop	r11
     50c:	af 90       	pop	r10
     50e:	9f 90       	pop	r9
     510:	8f 90       	pop	r8
     512:	7f 90       	pop	r7
     514:	6f 90       	pop	r6
     516:	5f 90       	pop	r5
     518:	4f 90       	pop	r4
     51a:	3f 90       	pop	r3
     51c:	2f 90       	pop	r2
     51e:	08 95       	ret

00000520 <main>:
//int button_debounce(int counter, int *pcounterRefPush, int *pcounterRefRel, int *pstateButton);

bool button_debounce(int counter, int *pstateButton);


int main()   
     520:	2f 92       	push	r2
     522:	3f 92       	push	r3
     524:	4f 92       	push	r4
     526:	5f 92       	push	r5
     528:	6f 92       	push	r6
     52a:	7f 92       	push	r7
     52c:	8f 92       	push	r8
     52e:	9f 92       	push	r9
     530:	af 92       	push	r10
     532:	bf 92       	push	r11
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	df 93       	push	r29
     542:	cf 93       	push	r28
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
     548:	ce 54       	subi	r28, 0x4E	; 78
     54a:	d0 40       	sbci	r29, 0x00	; 0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
	print35 = 1;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     556:	1a 82       	std	Y+2, r1	; 0x02
     558:	19 82       	std	Y+1, r1	; 0x01
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     55a:	10 92 92 03 	sts	0x0392, r1
	u_motorByte1.motorByte1 = 0;  // initialize motorByte1
     55e:	10 92 93 03 	sts	0x0393, r1
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     562:	8f ef       	ldi	r24, 0xFF	; 255
     564:	80 93 94 03 	sts	0x0394, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
     568:	80 93 95 03 	sts	0x0395, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
     56c:	10 92 96 03 	sts	0x0396, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
     570:	10 92 97 03 	sts	0x0397, r1
	
	OrangutanLCD::clear();
     574:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("DASCH CLEANER 2");
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
	OrangutanLCD::gotoXY(0,1);
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	61 e0       	ldi	r22, 0x01	; 1
     584:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
	OrangutanLCD::print("REV: 26");
     588:	80 e1       	ldi	r24, 0x10	; 16
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
// another C++ file.
inline unsigned long get_ms() { return OrangutanTime::ms(); }
inline unsigned long millis() { return OrangutanTime::ms(); }

inline void delay(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
inline void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
     590:	80 ed       	ldi	r24, 0xD0	; 208
     592:	97 e0       	ldi	r25, 0x07	; 7
     594:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
	delay_ms(2000);
	
	OrangutanLCD::clear();
     598:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("BEGIN ");
     59c:	88 e1       	ldi	r24, 0x18	; 24
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     5a4:	88 ee       	ldi	r24, 0xE8	; 232
     5a6:	93 e0       	ldi	r25, 0x03	; 3
     5a8:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
	
	delay_ms(1000);

    i2c_init();                                // init I2C interface
     5ac:	0e 94 17 19 	call	0x322e	; 0x322e <_Z8i2c_initv>
	
    OrangutanLCD::print("INIT ");
     5b0:	8f e1       	ldi	r24, 0x1F	; 31
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
     5b8:	80 e4       	ldi	r24, 0x40	; 64
     5ba:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
     5be:	c8 2e       	mov	r12, r24
	i2c_stop();
     5c0:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Z8i2c_stopv>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
     5c4:	82 e4       	ldi	r24, 0x42	; 66
     5c6:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
     5ca:	08 2f       	mov	r16, r24
	i2c_stop();
     5cc:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Z8i2c_stopv>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
     5d0:	84 e4       	ldi	r24, 0x44	; 68
     5d2:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
     5d6:	e8 2e       	mov	r14, r24
	i2c_stop();
     5d8:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Z8i2c_stopv>
    
	OrangutanLCD::clear();
     5dc:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("START ");
     5e0:	85 e2       	ldi	r24, 0x25	; 37
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
     5e8:	10 e0       	ldi	r17, 0x00	; 0
     5ea:	dd 24       	eor	r13, r13
     5ec:	0c 29       	or	r16, r12
     5ee:	1d 29       	or	r17, r13
     5f0:	ff 24       	eor	r15, r15
     5f2:	0e 29       	or	r16, r14
     5f4:	1f 29       	or	r17, r15
     5f6:	01 2b       	or	r16, r17
     5f8:	61 f0       	breq	.+24     	; 0x612 <main+0xf2>
        /* failed to issue start condition(s), possibly no device found */
        
		OrangutanLCD::print("NAK ");
     5fa:	8c e2       	ldi	r24, 0x2C	; 44
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
		i2c_stop();
     602:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Z8i2c_stopv>
		OrangutanLCD::print("STOP ");
     606:	81 e3       	ldi	r24, 0x31	; 49
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     60e:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <main+0x2c9a>
    }
	else {
		OrangutanLCD::print("ACK ");
     612:	87 e3       	ldi	r24, 0x37	; 55
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
        /* issuing start conditions ok, devices accessible */
		OrangutanLCD::print("BINIT ");
     61a:	8c e3       	ldi	r24, 0x3C	; 60
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
     622:	80 e4       	ldi	r24, 0x40	; 64
     624:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
		i2c_write(0x6);
     628:	86 e0       	ldi	r24, 0x06	; 6
     62a:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
		i2c_write(0x0);
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
		i2c_write(0x0);
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
		i2c_stop();
     63a:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Z8i2c_stopv>
		
		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
     63e:	82 e4       	ldi	r24, 0x42	; 66
     640:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
		i2c_write(0x6);
     644:	86 e0       	ldi	r24, 0x06	; 6
     646:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
		i2c_write(0x0);
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
		i2c_write(0x0);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
		i2c_stop();
     656:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Z8i2c_stopv>
     65a:	88 ee       	ldi	r24, 0xE8	; 232
     65c:	93 e0       	ldi	r25, 0x03	; 3
     65e:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
										//Registers default to input, so I2C3 is fine already


		delay_ms(1000);
		OrangutanLCD::clear();
     662:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>


		if(OrangutanDigital::isInputHigh(IO_D3))							//Tests if the switch is set to Maintenance Mode
     666:	83 e0       	ldi	r24, 0x03	; 3
     668:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     66c:	88 23       	and	r24, r24
     66e:	09 f4       	brne	.+2      	; 0x672 <main+0x152>
     670:	ec c4       	rjmp	.+2520   	; 0x104a <main+0xb2a>
		{
			OrangutanLCD::print("MAINTENANCE");
     672:	83 e4       	ldi	r24, 0x43	; 67
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     67a:	88 ee       	ldi	r24, 0xE8	; 232
     67c:	93 e0       	ldi	r25, 0x03	; 3
     67e:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
			
			//initialize
			int print = 0;
			int submode = -1;

			OrangutanLCD::clear();
     682:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
			OrangutanLCD::print("SELECT MODE");
     686:	8f e4       	ldi	r24, 0x4F	; 79
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     68e:	ee 24       	eor	r14, r14
     690:	ff 24       	eor	r15, r15
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = NONE;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     692:	c7 01       	movw	r24, r14
     694:	be 01       	movw	r22, r28
     696:	6f 5f       	subi	r22, 0xFF	; 255
     698:	7f 4f       	sbci	r23, 0xFF	; 255
     69a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>
     69e:	18 2f       	mov	r17, r24
				counter++;
     6a0:	08 94       	sec
     6a2:	e1 1c       	adc	r14, r1
     6a4:	f1 1c       	adc	r15, r1
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>

			OrangutanLCD::clear();
			OrangutanLCD::print("SELECT MODE");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
     6ae:	11 23       	and	r17, r17
     6b0:	81 f3       	breq	.-32     	; 0x692 <main+0x172>
				counter++;
				delay_ms(1);
			}
			buttonTriggered = false;
			counter = 0;
			OrangutanLCD::clear();
     6b2:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
     6b6:	23 96       	adiw	r28, 0x03	; 3
     6b8:	1f ae       	std	Y+63, r1	; 0x3f
     6ba:	1e ae       	std	Y+62, r1	; 0x3e
     6bc:	23 97       	sbiw	r28, 0x03	; 3
     6be:	66 24       	eor	r6, r6
     6c0:	77 24       	eor	r7, r7
     6c2:	2f ef       	ldi	r18, 0xFF	; 255
     6c4:	3f ef       	ldi	r19, 0xFF	; 255
     6c6:	3a af       	std	Y+58, r19	; 0x3a
     6c8:	29 af       	std	Y+57, r18	; 0x39
     6ca:	29 96       	adiw	r28, 0x09	; 9
     6cc:	1f ae       	std	Y+63, r1	; 0x3f
     6ce:	1e ae       	std	Y+62, r1	; 0x3e
     6d0:	29 97       	sbiw	r28, 0x09	; 9
     6d2:	2d 96       	adiw	r28, 0x0d	; 13
     6d4:	1f ae       	std	Y+63, r1	; 0x3f
     6d6:	1e ae       	std	Y+62, r1	; 0x3e
     6d8:	2d 97       	sbiw	r28, 0x0d	; 13
     6da:	2b 96       	adiw	r28, 0x0b	; 11
     6dc:	1f ae       	std	Y+63, r1	; 0x3f
     6de:	1e ae       	std	Y+62, r1	; 0x3e
     6e0:	2b 97       	sbiw	r28, 0x0b	; 11
     6e2:	2f 96       	adiw	r28, 0x0f	; 15
     6e4:	1f ae       	std	Y+63, r1	; 0x3f
     6e6:	1e ae       	std	Y+62, r1	; 0x3e
     6e8:	2f 97       	sbiw	r28, 0x0f	; 15
     6ea:	27 96       	adiw	r28, 0x07	; 7
     6ec:	1f ae       	std	Y+63, r1	; 0x3f
     6ee:	1e ae       	std	Y+62, r1	; 0x3e
     6f0:	27 97       	sbiw	r28, 0x07	; 7
     6f2:	44 24       	eor	r4, r4
     6f4:	55 24       	eor	r5, r5
     6f6:	22 24       	eor	r2, r2
     6f8:	33 24       	eor	r3, r3
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     6fa:	84 e4       	ldi	r24, 0x44	; 68
     6fc:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     706:	85 e4       	ldi	r24, 0x45	; 69
     708:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     70c:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z11i2c_readAckv>
     710:	80 93 96 03 	sts	0x0396, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     714:	0e 94 92 19 	call	0x3324	; 0x3324 <_Z11i2c_readNakv>
     718:	80 93 97 03 	sts	0x0397, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     71c:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Z8i2c_stopv>
						stateButton = 0;
					}
				}*/

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     720:	c1 01       	movw	r24, r2
     722:	be 01       	movw	r22, r28
     724:	6f 5f       	subi	r22, 0xFF	; 255
     726:	7f 4f       	sbci	r23, 0xFF	; 255
     728:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>
     72c:	08 2f       	mov	r16, r24
							Output 			--     starts testing each output individually and ends after testing all outputs
							Motor			--     starts testing each motor individually and ends after testing all motors
							Multi motor		--     starts testing each the fixture motor with each of the brush motors

				*/
				if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != 0){
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     734:	88 23       	and	r24, r24
     736:	11 f0       	breq	.+4      	; 0x73c <main+0x21c>
     738:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <main+0x2ca6>
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     742:	88 23       	and	r24, r24
     744:	11 f0       	breq	.+4      	; 0x74a <main+0x22a>
     746:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <main+0x2ca6>
     74a:	49 ad       	ldd	r20, Y+57	; 0x39
     74c:	5a ad       	ldd	r21, Y+58	; 0x3a
     74e:	45 2b       	or	r20, r21
     750:	11 f4       	brne	.+4      	; 0x756 <main+0x236>
     752:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <main+0x2ca6>
					state = S0;
					submode = INPUT;
					OrangutanLCD::clear();
     756:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     75a:	8b e5       	ldi	r24, 0x5B	; 91
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
     76a:	11 e0       	ldi	r17, 0x01	; 1
     76c:	66 24       	eor	r6, r6
     76e:	77 24       	eor	r7, r7
     770:	1a ae       	std	Y+58, r1	; 0x3a
     772:	19 ae       	std	Y+57, r1	; 0x39
     774:	44 24       	eor	r4, r4
     776:	55 24       	eor	r5, r5
					print = 0;
					switched = true;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != 1){
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     77e:	88 23       	and	r24, r24
     780:	e9 f0       	breq	.+58     	; 0x7bc <main+0x29c>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     788:	88 23       	and	r24, r24
     78a:	c1 f4       	brne	.+48     	; 0x7bc <main+0x29c>
     78c:	89 ad       	ldd	r24, Y+57	; 0x39
     78e:	9a ad       	ldd	r25, Y+58	; 0x3a
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	a1 f0       	breq	.+40     	; 0x7bc <main+0x29c>
					state = O0_ON;
					submode = OUTPUT;
					OrangutanLCD::clear();
     794:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("OUTPUTS");
     798:	83 e6       	ldi	r24, 0x63	; 99
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
     7a8:	11 e0       	ldi	r17, 0x01	; 1
     7aa:	66 24       	eor	r6, r6
     7ac:	77 24       	eor	r7, r7
     7ae:	a1 e0       	ldi	r26, 0x01	; 1
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	ba af       	std	Y+58, r27	; 0x3a
     7b4:	a9 af       	std	Y+57, r26	; 0x39
     7b6:	38 e0       	ldi	r19, 0x08	; 8
     7b8:	43 2e       	mov	r4, r19
     7ba:	51 2c       	mov	r5, r1
					print = 0;
					switched = true;
				}
				if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != 2){
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     7c2:	88 23       	and	r24, r24
     7c4:	19 f5       	brne	.+70     	; 0x80c <main+0x2ec>
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     7cc:	88 23       	and	r24, r24
     7ce:	f1 f0       	breq	.+60     	; 0x80c <main+0x2ec>
     7d0:	29 ad       	ldd	r18, Y+57	; 0x39
     7d2:	3a ad       	ldd	r19, Y+58	; 0x3a
     7d4:	22 30       	cpi	r18, 0x02	; 2
     7d6:	31 05       	cpc	r19, r1
     7d8:	c9 f0       	breq	.+50     	; 0x80c <main+0x2ec>
					state = M1_F;
					submode = MOTOR;
					OrangutanLCD::clear();
     7da:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MOTORS ");
     7de:	8b e6       	ldi	r24, 0x6B	; 107
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
					print = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     7ee:	80 91 92 03 	lds	r24, 0x0392
     7f2:	84 60       	ori	r24, 0x04	; 4
     7f4:	80 93 92 03 	sts	0x0392, r24
     7f8:	11 e0       	ldi	r17, 0x01	; 1
     7fa:	66 24       	eor	r6, r6
     7fc:	77 24       	eor	r7, r7
     7fe:	42 e0       	ldi	r20, 0x02	; 2
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	5a af       	std	Y+58, r21	; 0x3a
     804:	49 af       	std	Y+57, r20	; 0x39
     806:	20 e2       	ldi	r18, 0x20	; 32
     808:	42 2e       	mov	r4, r18
     80a:	51 2c       	mov	r5, r1
					switched = true;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != 3){
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     812:	88 23       	and	r24, r24
     814:	11 f4       	brne	.+4      	; 0x81a <main+0x2fa>
     816:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <main+0x2cac>
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     820:	88 23       	and	r24, r24
     822:	11 f4       	brne	.+4      	; 0x828 <main+0x308>
     824:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <main+0x2cac>
     828:	89 ad       	ldd	r24, Y+57	; 0x39
     82a:	9a ad       	ldd	r25, Y+58	; 0x3a
     82c:	03 97       	sbiw	r24, 0x03	; 3
     82e:	11 f4       	brne	.+4      	; 0x834 <main+0x314>
     830:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <main+0x2cac>
					state = M2_AND_M3;
					submode = MULTI;
					OrangutanLCD::clear();
     834:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MULTI ");
     838:	83 e7       	ldi	r24, 0x73	; 115
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
					print = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     848:	66 24       	eor	r6, r6
     84a:	77 24       	eor	r7, r7
     84c:	a3 e0       	ldi	r26, 0x03	; 3
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	ba af       	std	Y+58, r27	; 0x3a
     852:	a9 af       	std	Y+57, r26	; 0x39
     854:	9a e2       	ldi	r25, 0x2A	; 42
     856:	49 2e       	mov	r4, r25
     858:	51 2c       	mov	r5, r1
					plateLoadMotor = 0;
					fixtureMotor = 0;
					brush1Motor = 0;
					brush2Motor = 0;
					paperTowelMotor = 0;
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	80 93 94 03 	sts	0x0394, r24
					u_outputByte1.outputByte1 = 255;  // reset outputByte1
     860:	80 93 95 03 	sts	0x0395, r24
					u_motorByte0.motorByte0 = 0;	  // reset motorByte0
     864:	10 92 92 03 	sts	0x0392, r1
					u_motorByte1.motorByte1 = 0;	  // reset motorByte1
     868:	10 92 93 03 	sts	0x0393, r1
     86c:	29 96       	adiw	r28, 0x09	; 9
     86e:	1f ae       	std	Y+63, r1	; 0x3f
     870:	1e ae       	std	Y+62, r1	; 0x3e
     872:	29 97       	sbiw	r28, 0x09	; 9
     874:	2d 96       	adiw	r28, 0x0d	; 13
     876:	1f ae       	std	Y+63, r1	; 0x3f
     878:	1e ae       	std	Y+62, r1	; 0x3e
     87a:	2d 97       	sbiw	r28, 0x0d	; 13
     87c:	2b 96       	adiw	r28, 0x0b	; 11
     87e:	1f ae       	std	Y+63, r1	; 0x3f
     880:	1e ae       	std	Y+62, r1	; 0x3e
     882:	2b 97       	sbiw	r28, 0x0b	; 11
     884:	2f 96       	adiw	r28, 0x0f	; 15
     886:	1f ae       	std	Y+63, r1	; 0x3f
     888:	1e ae       	std	Y+62, r1	; 0x3e
     88a:	2f 97       	sbiw	r28, 0x0f	; 15
     88c:	27 96       	adiw	r28, 0x07	; 7
     88e:	1f ae       	std	Y+63, r1	; 0x3f
     890:	1e ae       	std	Y+62, r1	; 0x3e
     892:	27 97       	sbiw	r28, 0x07	; 7
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
     894:	00 23       	and	r16, r16
     896:	09 f4       	brne	.+2      	; 0x89a <main+0x37a>
     898:	de c0       	rjmp	.+444    	; 0xa56 <main+0x536>
					if(state <= S7){				//if it's doing the sensors
     89a:	b8 e0       	ldi	r27, 0x08	; 8
     89c:	4b 16       	cp	r4, r27
     89e:	51 04       	cpc	r5, r1
     8a0:	6c f4       	brge	.+26     	; 0x8bc <main+0x39c>
						OrangutanLCD::gotoXY(0,1);
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
						buttonTriggered = false;
						state ++;
     8aa:	08 94       	sec
     8ac:	41 1c       	adc	r4, r1
     8ae:	51 1c       	adc	r5, r1
						counterRef = counter;
						print = 0;
						if(state == S7 + 1){		//accounts for end of maintenance mode after sensors
     8b0:	28 e0       	ldi	r18, 0x08	; 8
     8b2:	42 16       	cp	r4, r18
     8b4:	51 04       	cpc	r5, r1
     8b6:	09 f0       	breq	.+2      	; 0x8ba <main+0x39a>
     8b8:	c8 c0       	rjmp	.+400    	; 0xa4a <main+0x52a>
     8ba:	1b c0       	rjmp	.+54     	; 0x8f2 <main+0x3d2>
							OrangutanLCD::clear();
							state = DONEM;
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
     8bc:	30 e2       	ldi	r19, 0x20	; 32
     8be:	43 16       	cp	r4, r19
     8c0:	51 04       	cpc	r5, r1
     8c2:	dc f4       	brge	.+54     	; 0x8fa <main+0x3da>
						if(state % 2 == 0){			//current state is an 'on' state
     8c4:	40 fc       	sbrc	r4, 0
     8c6:	09 c0       	rjmp	.+18     	; 0x8da <main+0x3ba>
							OrangutanLCD::gotoXY(13,1);
     8c8:	8d e0       	ldi	r24, 0x0D	; 13
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("OFF");
     8d0:	8a e7       	ldi	r24, 0x7A	; 122
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <main+0x3c2>
						}
						else{						//current state is an 'off' state
							OrangutanLCD::gotoXY(0,1);
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
						}
						buttonTriggered = false;
						state ++;
     8e2:	08 94       	sec
     8e4:	41 1c       	adc	r4, r1
     8e6:	51 1c       	adc	r5, r1
						counterRef = counter;
						print = 0;
						if(state == O11_OFF + 1){	//accounts for end of maintenance mode after outputs
     8e8:	40 e2       	ldi	r20, 0x20	; 32
     8ea:	44 16       	cp	r4, r20
     8ec:	51 04       	cpc	r5, r1
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <main+0x3d2>
     8f0:	ac c0       	rjmp	.+344    	; 0xa4a <main+0x52a>
							OrangutanLCD::clear();
     8f2:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
     8f6:	0c 94 06 19 	jmp	0x320c	; 0x320c <main+0x2cec>
     8fa:	82 01       	movw	r16, r4
     8fc:	0f 5f       	subi	r16, 0xFF	; 255
     8fe:	1f 4f       	sbci	r17, 0xFF	; 255
							state = DONEM;
						}
					}
					else if(state <= M5_B){							//if it's doing the motors
     900:	5a e2       	ldi	r21, 0x2A	; 42
     902:	45 16       	cp	r4, r21
     904:	51 04       	cpc	r5, r1
     906:	0c f0       	brlt	.+2      	; 0x90a <main+0x3ea>
     908:	72 c0       	rjmp	.+228    	; 0x9ee <main+0x4ce>
						buttonTriggered = false;
						state ++;
						counterRef = counter;
						print = 0;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
     90a:	40 fc       	sbrc	r4, 0
     90c:	09 c0       	rjmp	.+18     	; 0x920 <main+0x400>
							OrangutanLCD::gotoXY(11,1);
     90e:	8b e0       	ldi	r24, 0x0B	; 11
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("BACK ");
     916:	8e e7       	ldi	r24, 0x7E	; 126
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     91e:	14 c0       	rjmp	.+40     	; 0x948 <main+0x428>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
     920:	06 32       	cpi	r16, 0x26	; 38
     922:	11 05       	cpc	r17, r1
     924:	c9 f1       	breq	.+114    	; 0x998 <main+0x478>
     926:	07 32       	cpi	r16, 0x27	; 39
     928:	11 05       	cpc	r17, r1
     92a:	3c f4       	brge	.+14     	; 0x93a <main+0x41a>
     92c:	02 32       	cpi	r16, 0x22	; 34
     92e:	11 05       	cpc	r17, r1
     930:	89 f0       	breq	.+34     	; 0x954 <main+0x434>
     932:	04 32       	cpi	r16, 0x24	; 36
     934:	11 05       	cpc	r17, r1
     936:	41 f4       	brne	.+16     	; 0x948 <main+0x428>
     938:	1c c0       	rjmp	.+56     	; 0x972 <main+0x452>
     93a:	08 32       	cpi	r16, 0x28	; 40
     93c:	11 05       	cpc	r17, r1
     93e:	d9 f1       	breq	.+118    	; 0x9b6 <main+0x496>
     940:	0a 32       	cpi	r16, 0x2A	; 42
     942:	11 05       	cpc	r17, r1
     944:	09 f4       	brne	.+2      	; 0x948 <main+0x428>
     946:	46 c0       	rjmp	.+140    	; 0x9d4 <main+0x4b4>
     948:	23 96       	adiw	r28, 0x03	; 3
     94a:	3f ae       	std	Y+63, r3	; 0x3f
     94c:	2e ae       	std	Y+62, r2	; 0x3e
     94e:	23 97       	sbiw	r28, 0x03	; 3
     950:	28 01       	movw	r4, r16
     952:	7f c0       	rjmp	.+254    	; 0xa52 <main+0x532>
								case M1_B + 1:
									OrangutanLCD::gotoXY(0,1);
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
     95c:	80 91 92 03 	lds	r24, 0x0392
     960:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     962:	80 62       	ori	r24, 0x20	; 32
     964:	80 93 92 03 	sts	0x0392, r24
     968:	23 96       	adiw	r28, 0x03	; 3
     96a:	3f ae       	std	Y+63, r3	; 0x3f
     96c:	2e ae       	std	Y+62, r2	; 0x3e
     96e:	23 97       	sbiw	r28, 0x03	; 3
     970:	24 c2       	rjmp	.+1096   	; 0xdba <main+0x89a>
									break;
								case M2_B + 1:
									OrangutanLCD::gotoXY(0,1);
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     97a:	80 91 92 03 	lds	r24, 0x0392
     97e:	8f 7d       	andi	r24, 0xDF	; 223
     980:	80 93 92 03 	sts	0x0392, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     984:	80 91 93 03 	lds	r24, 0x0393
     988:	81 60       	ori	r24, 0x01	; 1
     98a:	80 93 93 03 	sts	0x0393, r24
     98e:	23 96       	adiw	r28, 0x03	; 3
     990:	3f ae       	std	Y+63, r3	; 0x3f
     992:	2e ae       	std	Y+62, r2	; 0x3e
     994:	23 97       	sbiw	r28, 0x03	; 3
     996:	3a c2       	rjmp	.+1140   	; 0xe0c <main+0x8ec>
									break;
								case M3_B + 1:
									OrangutanLCD::gotoXY(0,1);
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
     9a0:	80 91 93 03 	lds	r24, 0x0393
     9a4:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     9a6:	88 60       	ori	r24, 0x08	; 8
     9a8:	80 93 93 03 	sts	0x0393, r24
     9ac:	23 96       	adiw	r28, 0x03	; 3
     9ae:	3f ae       	std	Y+63, r3	; 0x3f
     9b0:	2e ae       	std	Y+62, r2	; 0x3e
     9b2:	23 97       	sbiw	r28, 0x03	; 3
     9b4:	54 c2       	rjmp	.+1192   	; 0xe5e <main+0x93e>
									break;
								case M4_B + 1:
									OrangutanLCD::gotoXY(0,1);
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     9be:	80 91 93 03 	lds	r24, 0x0393
     9c2:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
     9c4:	80 64       	ori	r24, 0x40	; 64
     9c6:	80 93 93 03 	sts	0x0393, r24
     9ca:	23 96       	adiw	r28, 0x03	; 3
     9cc:	3f ae       	std	Y+63, r3	; 0x3f
     9ce:	2e ae       	std	Y+62, r2	; 0x3e
     9d0:	23 97       	sbiw	r28, 0x03	; 3
     9d2:	6e c2       	rjmp	.+1244   	; 0xeb0 <main+0x990>
									break;
								case M5_B + 1:
									OrangutanLCD::clear();
     9d4:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
     9d8:	80 91 93 03 	lds	r24, 0x0393
     9dc:	8f 7b       	andi	r24, 0xBF	; 191
     9de:	80 93 93 03 	sts	0x0393, r24
     9e2:	27 96       	adiw	r28, 0x07	; 7
     9e4:	1f ae       	std	Y+63, r1	; 0x3f
     9e6:	1e ae       	std	Y+62, r1	; 0x3e
     9e8:	27 97       	sbiw	r28, 0x07	; 7
     9ea:	0c 94 06 19 	jmp	0x320c	; 0x320c <main+0x2cec>
							}
						}
					}
					else{
						buttonTriggered = false;
						state ++;
     9ee:	28 01       	movw	r4, r16
						counterRef = counter;
						print = 0;
						switch(state){
     9f0:	0b 32       	cpi	r16, 0x2B	; 43
     9f2:	11 05       	cpc	r17, r1
     9f4:	21 f0       	breq	.+8      	; 0x9fe <main+0x4de>
     9f6:	0c 32       	cpi	r16, 0x2C	; 44
     9f8:	11 05       	cpc	r17, r1
     9fa:	39 f5       	brne	.+78     	; 0xa4a <main+0x52a>
     9fc:	10 c0       	rjmp	.+32     	; 0xa1e <main+0x4fe>
							case M2_AND_M3 + 1:
								u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
     9fe:	90 91 93 03 	lds	r25, 0x0393
     a02:	9e 7f       	andi	r25, 0xFE	; 254
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     a04:	80 91 92 03 	lds	r24, 0x0392
     a08:	80 62       	ori	r24, 0x20	; 32
     a0a:	80 93 92 03 	sts	0x0392, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     a0e:	98 60       	ori	r25, 0x08	; 8
     a10:	90 93 93 03 	sts	0x0393, r25
     a14:	23 96       	adiw	r28, 0x03	; 3
     a16:	3f ae       	std	Y+63, r3	; 0x3f
     a18:	2e ae       	std	Y+62, r2	; 0x3e
     a1a:	23 97       	sbiw	r28, 0x03	; 3
     a1c:	a1 c2       	rjmp	.+1346   	; 0xf60 <main+0xa40>
								break;
							case M2_AND_M4 + 1:
								OrangutanLCD::clear();
     a1e:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     a22:	80 91 92 03 	lds	r24, 0x0392
     a26:	8f 7d       	andi	r24, 0xDF	; 223
     a28:	80 93 92 03 	sts	0x0392, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     a2c:	80 91 93 03 	lds	r24, 0x0393
     a30:	87 7f       	andi	r24, 0xF7	; 247
     a32:	80 93 93 03 	sts	0x0393, r24
     a36:	29 96       	adiw	r28, 0x09	; 9
     a38:	1f ae       	std	Y+63, r1	; 0x3f
     a3a:	1e ae       	std	Y+62, r1	; 0x3e
     a3c:	29 97       	sbiw	r28, 0x09	; 9
     a3e:	2d 96       	adiw	r28, 0x0d	; 13
     a40:	1f ae       	std	Y+63, r1	; 0x3f
     a42:	1e ae       	std	Y+62, r1	; 0x3e
     a44:	2d 97       	sbiw	r28, 0x0d	; 13
     a46:	0c 94 06 19 	jmp	0x320c	; 0x320c <main+0x2cec>
     a4a:	23 96       	adiw	r28, 0x03	; 3
     a4c:	3f ae       	std	Y+63, r3	; 0x3f
     a4e:	2e ae       	std	Y+62, r2	; 0x3e
     a50:	23 97       	sbiw	r28, 0x03	; 3
     a52:	66 24       	eor	r6, r6
     a54:	77 24       	eor	r7, r7
					print = 0;
					paperTowelMotor = 0;
				}*/

				//state actions
				switch (state) {
     a56:	f2 01       	movw	r30, r4
     a58:	ec 32       	cpi	r30, 0x2C	; 44
     a5a:	f1 05       	cpc	r31, r1
     a5c:	08 f0       	brcs	.+2      	; 0xa60 <main+0x540>
     a5e:	98 c2       	rjmp	.+1328   	; 0xf90 <main+0xa70>
     a60:	ea 5b       	subi	r30, 0xBA	; 186
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	ee 0f       	add	r30, r30
     a66:	ff 1f       	adc	r31, r31
     a68:	05 90       	lpm	r0, Z+
     a6a:	f4 91       	lpm	r31, Z+
     a6c:	e0 2d       	mov	r30, r0
     a6e:	09 94       	ijmp
					case S0:
						if(print == 0){
     a70:	61 14       	cp	r6, r1
     a72:	71 04       	cpc	r7, r1
     a74:	39 f4       	brne	.+14     	; 0xa84 <main+0x564>
							OrangutanLCD::print("SENSOR 0");
     a76:	84 e8       	ldi	r24, 0x84	; 132
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	68 2e       	mov	r6, r24
     a82:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a84:	8f e0       	ldi	r24, 0x0F	; 15
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
	// position and will not span lines.
	static void print(unsigned long value);
	static void print(long value);
	static inline void print(unsigned int value)
	{
		print((unsigned long)value);
     a8c:	60 91 96 03 	lds	r22, 0x0396
     a90:	11 c0       	rjmp	.+34     	; 0xab4 <main+0x594>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.plate);
						break;
					case S1:
						if(print == 0){
     a92:	61 14       	cp	r6, r1
     a94:	71 04       	cpc	r7, r1
     a96:	39 f4       	brne	.+14     	; 0xaa6 <main+0x586>
							OrangutanLCD::print("SENSOR 1");
     a98:	8d e8       	ldi	r24, 0x8D	; 141
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     aa0:	01 e0       	ldi	r16, 0x01	; 1
     aa2:	60 2e       	mov	r6, r16
     aa4:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     aa6:	8f e0       	ldi	r24, 0x0F	; 15
     aa8:	61 e0       	ldi	r22, 0x01	; 1
     aaa:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
     aae:	60 91 96 03 	lds	r22, 0x0396
     ab2:	66 95       	lsr	r22
     ab4:	61 70       	andi	r22, 0x01	; 1
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <_ZN12OrangutanLCD5printEm>
     ac0:	67 c2       	rjmp	.+1230   	; 0xf90 <main+0xa70>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureLift);
						break;
					case S2:
						if(print == 0){
     ac2:	61 14       	cp	r6, r1
     ac4:	71 04       	cpc	r7, r1
     ac6:	39 f4       	brne	.+14     	; 0xad6 <main+0x5b6>
							OrangutanLCD::print("SENSOR 2");
     ac8:	86 e9       	ldi	r24, 0x96	; 150
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     ad0:	11 e0       	ldi	r17, 0x01	; 1
     ad2:	61 2e       	mov	r6, r17
     ad4:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     ad6:	8f e0       	ldi	r24, 0x0F	; 15
     ad8:	61 e0       	ldi	r22, 0x01	; 1
     ada:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
     ade:	60 91 96 03 	lds	r22, 0x0396
     ae2:	66 95       	lsr	r22
     ae4:	66 95       	lsr	r22
     ae6:	e6 cf       	rjmp	.-52     	; 0xab4 <main+0x594>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureHome);
						break;
					case S3:
						if(print == 0){
     ae8:	61 14       	cp	r6, r1
     aea:	71 04       	cpc	r7, r1
     aec:	39 f4       	brne	.+14     	; 0xafc <main+0x5dc>
							OrangutanLCD::print("SENSOR 3");
     aee:	8f e9       	ldi	r24, 0x9F	; 159
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     af6:	b1 e0       	ldi	r27, 0x01	; 1
     af8:	6b 2e       	mov	r6, r27
     afa:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     afc:	8f e0       	ldi	r24, 0x0F	; 15
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
     b04:	60 91 96 03 	lds	r22, 0x0396
     b08:	66 95       	lsr	r22
     b0a:	66 95       	lsr	r22
     b0c:	66 95       	lsr	r22
     b0e:	d2 cf       	rjmp	.-92     	; 0xab4 <main+0x594>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixturePlate);
						break;
					case S4:
						if(print == 0){
     b10:	61 14       	cp	r6, r1
     b12:	71 04       	cpc	r7, r1
     b14:	39 f4       	brne	.+14     	; 0xb24 <main+0x604>
							OrangutanLCD::print("SENSOR 4");
     b16:	88 ea       	ldi	r24, 0xA8	; 168
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     b1e:	a1 e0       	ldi	r26, 0x01	; 1
     b20:	6a 2e       	mov	r6, r26
     b22:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b24:	8f e0       	ldi	r24, 0x0F	; 15
     b26:	61 e0       	ldi	r22, 0x01	; 1
     b28:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
     b2c:	60 91 96 03 	lds	r22, 0x0396
     b30:	62 95       	swap	r22
     b32:	6f 70       	andi	r22, 0x0F	; 15
     b34:	bf cf       	rjmp	.-130    	; 0xab4 <main+0x594>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
						break;
					case S5:
						if(print == 0){
     b36:	61 14       	cp	r6, r1
     b38:	71 04       	cpc	r7, r1
     b3a:	39 f4       	brne	.+14     	; 0xb4a <main+0x62a>
							OrangutanLCD::print("SENSOR 5");
     b3c:	81 eb       	ldi	r24, 0xB1	; 177
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     b44:	f1 e0       	ldi	r31, 0x01	; 1
     b46:	6f 2e       	mov	r6, r31
     b48:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b4a:	8f e0       	ldi	r24, 0x0F	; 15
     b4c:	61 e0       	ldi	r22, 0x01	; 1
     b4e:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
     b52:	60 91 96 03 	lds	r22, 0x0396
     b56:	62 95       	swap	r22
     b58:	66 95       	lsr	r22
     b5a:	67 70       	andi	r22, 0x07	; 7
     b5c:	ab cf       	rjmp	.-170    	; 0xab4 <main+0x594>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
						break;
					case S6:
						if(print == 0){
     b5e:	61 14       	cp	r6, r1
     b60:	71 04       	cpc	r7, r1
     b62:	39 f4       	brne	.+14     	; 0xb72 <main+0x652>
							OrangutanLCD::print("SENSOR 6");
     b64:	8a eb       	ldi	r24, 0xBA	; 186
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     b6c:	e1 e0       	ldi	r30, 0x01	; 1
     b6e:	6e 2e       	mov	r6, r30
     b70:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b72:	8f e0       	ldi	r24, 0x0F	; 15
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
     b7a:	60 91 96 03 	lds	r22, 0x0396
     b7e:	62 95       	swap	r22
     b80:	66 95       	lsr	r22
     b82:	66 95       	lsr	r22
     b84:	63 70       	andi	r22, 0x03	; 3
     b86:	96 cf       	rjmp	.-212    	; 0xab4 <main+0x594>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry1);
						break;
					case S7:
						if(print == 0){
     b88:	61 14       	cp	r6, r1
     b8a:	71 04       	cpc	r7, r1
     b8c:	39 f4       	brne	.+14     	; 0xb9c <main+0x67c>
							OrangutanLCD::print("SENSOR 7");
     b8e:	83 ec       	ldi	r24, 0xC3	; 195
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     b96:	71 e0       	ldi	r23, 0x01	; 1
     b98:	67 2e       	mov	r6, r23
     b9a:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b9c:	8f e0       	ldi	r24, 0x0F	; 15
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
     ba4:	60 91 96 03 	lds	r22, 0x0396
     ba8:	66 1f       	adc	r22, r22
     baa:	66 27       	eor	r22, r22
     bac:	66 1f       	adc	r22, r22
     bae:	83 cf       	rjmp	.-250    	; 0xab6 <main+0x596>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry2);
						break;
					case O0_ON:
						if(print == 0){
     bb0:	61 14       	cp	r6, r1
     bb2:	71 04       	cpc	r7, r1
     bb4:	39 f4       	brne	.+14     	; 0xbc4 <main+0x6a4>
							OrangutanLCD::print("AC POWER     ON ");
     bb6:	8c ec       	ldi	r24, 0xCC	; 204
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     bbe:	61 e0       	ldi	r22, 0x01	; 1
     bc0:	66 2e       	mov	r6, r22
     bc2:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
     bc4:	80 91 94 03 	lds	r24, 0x0394
     bc8:	8e 7f       	andi	r24, 0xFE	; 254
     bca:	03 c0       	rjmp	.+6      	; 0xbd2 <main+0x6b2>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
     bcc:	80 91 94 03 	lds	r24, 0x0394
     bd0:	81 60       	ori	r24, 0x01	; 1
     bd2:	80 93 94 03 	sts	0x0394, r24
     bd6:	dc c1       	rjmp	.+952    	; 0xf90 <main+0xa70>
						break;
					case O1_ON:
						if(print == 0){
     bd8:	61 14       	cp	r6, r1
     bda:	71 04       	cpc	r7, r1
     bdc:	39 f4       	brne	.+14     	; 0xbec <main+0x6cc>
							OrangutanLCD::print("BLOWER       ON  ");
     bde:	8d ed       	ldi	r24, 0xDD	; 221
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     be6:	51 e0       	ldi	r21, 0x01	; 1
     be8:	65 2e       	mov	r6, r21
     bea:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     bec:	80 91 94 03 	lds	r24, 0x0394
     bf0:	8d 7f       	andi	r24, 0xFD	; 253
     bf2:	ef cf       	rjmp	.-34     	; 0xbd2 <main+0x6b2>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     bf4:	80 91 94 03 	lds	r24, 0x0394
     bf8:	82 60       	ori	r24, 0x02	; 2
     bfa:	eb cf       	rjmp	.-42     	; 0xbd2 <main+0x6b2>
						break;
					case O2_ON:
						if(print == 0){
     bfc:	61 14       	cp	r6, r1
     bfe:	71 04       	cpc	r7, r1
     c00:	39 f4       	brne	.+14     	; 0xc10 <main+0x6f0>
							OrangutanLCD::print("PLATE STOP   ON ");
     c02:	8f ee       	ldi	r24, 0xEF	; 239
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     c0a:	41 e0       	ldi	r20, 0x01	; 1
     c0c:	64 2e       	mov	r6, r20
     c0e:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
     c10:	80 91 94 03 	lds	r24, 0x0394
     c14:	8b 7f       	andi	r24, 0xFB	; 251
     c16:	dd cf       	rjmp	.-70     	; 0xbd2 <main+0x6b2>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
     c18:	80 91 94 03 	lds	r24, 0x0394
     c1c:	84 60       	ori	r24, 0x04	; 4
     c1e:	d9 cf       	rjmp	.-78     	; 0xbd2 <main+0x6b2>
						break;
					case O3_ON:
						if(print == 0){
     c20:	61 14       	cp	r6, r1
     c22:	71 04       	cpc	r7, r1
     c24:	39 f4       	brne	.+14     	; 0xc34 <main+0x714>
							OrangutanLCD::print("PLATE RAISE  ON ");
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     c2e:	31 e0       	ldi	r19, 0x01	; 1
     c30:	63 2e       	mov	r6, r19
     c32:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     c34:	80 91 94 03 	lds	r24, 0x0394
     c38:	87 7f       	andi	r24, 0xF7	; 247
     c3a:	15 c0       	rjmp	.+42     	; 0xc66 <main+0x746>
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     c3c:	80 91 94 03 	lds	r24, 0x0394
     c40:	88 60       	ori	r24, 0x08	; 8
     c42:	c7 cf       	rjmp	.-114    	; 0xbd2 <main+0x6b2>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(print == 0){
     c44:	61 14       	cp	r6, r1
     c46:	71 04       	cpc	r7, r1
     c48:	39 f4       	brne	.+14     	; 0xc58 <main+0x738>
							OrangutanLCD::print("PLATE LOWER  ON ");
     c4a:	81 e1       	ldi	r24, 0x11	; 17
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     c52:	21 e0       	ldi	r18, 0x01	; 1
     c54:	62 2e       	mov	r6, r18
     c56:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     c58:	80 91 94 03 	lds	r24, 0x0394
     c5c:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     c5e:	8f 7e       	andi	r24, 0xEF	; 239
     c60:	b8 cf       	rjmp	.-144    	; 0xbd2 <main+0x6b2>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     c62:	80 91 94 03 	lds	r24, 0x0394
     c66:	80 61       	ori	r24, 0x10	; 16
     c68:	b4 cf       	rjmp	.-152    	; 0xbd2 <main+0x6b2>
						break;
					case O5_ON:
						if(print == 0){
     c6a:	61 14       	cp	r6, r1
     c6c:	71 04       	cpc	r7, r1
     c6e:	39 f4       	brne	.+14     	; 0xc7e <main+0x75e>
							OrangutanLCD::print("BRUSH1 RAISE ON ");
     c70:	82 e2       	ldi	r24, 0x22	; 34
     c72:	92 e0       	ldi	r25, 0x02	; 2
     c74:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	69 2e       	mov	r6, r25
     c7c:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     c7e:	80 91 94 03 	lds	r24, 0x0394
     c82:	8f 7d       	andi	r24, 0xDF	; 223
     c84:	14 c0       	rjmp	.+40     	; 0xcae <main+0x78e>
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     c86:	80 91 94 03 	lds	r24, 0x0394
     c8a:	0d c0       	rjmp	.+26     	; 0xca6 <main+0x786>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(print == 0){
     c8c:	61 14       	cp	r6, r1
     c8e:	71 04       	cpc	r7, r1
     c90:	39 f4       	brne	.+14     	; 0xca0 <main+0x780>
							OrangutanLCD::print("BRUSH1 LOWER ON ");
     c92:	83 e3       	ldi	r24, 0x33	; 51
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	68 2e       	mov	r6, r24
     c9e:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     ca0:	80 91 94 03 	lds	r24, 0x0394
     ca4:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     ca6:	80 62       	ori	r24, 0x20	; 32
     ca8:	94 cf       	rjmp	.-216    	; 0xbd2 <main+0x6b2>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     caa:	80 91 94 03 	lds	r24, 0x0394
     cae:	80 64       	ori	r24, 0x40	; 64
     cb0:	90 cf       	rjmp	.-224    	; 0xbd2 <main+0x6b2>
						break;
					case O7_ON:
						if(print == 0){
     cb2:	61 14       	cp	r6, r1
     cb4:	71 04       	cpc	r7, r1
     cb6:	39 f4       	brne	.+14     	; 0xcc6 <main+0x7a6>
							OrangutanLCD::print("BRUSH2 RAISE ON ");
     cb8:	84 e4       	ldi	r24, 0x44	; 68
     cba:	92 e0       	ldi	r25, 0x02	; 2
     cbc:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     cc0:	01 e0       	ldi	r16, 0x01	; 1
     cc2:	60 2e       	mov	r6, r16
     cc4:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     cc6:	80 91 94 03 	lds	r24, 0x0394
     cca:	8f 77       	andi	r24, 0x7F	; 127
     ccc:	80 93 94 03 	sts	0x0394, r24
     cd0:	13 c0       	rjmp	.+38     	; 0xcf8 <main+0x7d8>
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(print == 0){
     cd2:	61 14       	cp	r6, r1
     cd4:	71 04       	cpc	r7, r1
     cd6:	39 f4       	brne	.+14     	; 0xce6 <main+0x7c6>
							OrangutanLCD::print("BRUSH2 LOWER ON ");
     cd8:	85 e5       	ldi	r24, 0x55	; 85
     cda:	92 e0       	ldi	r25, 0x02	; 2
     cdc:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     ce0:	11 e0       	ldi	r17, 0x01	; 1
     ce2:	61 2e       	mov	r6, r17
     ce4:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     ce6:	80 91 95 03 	lds	r24, 0x0395
     cea:	8e 7f       	andi	r24, 0xFE	; 254
     cec:	80 93 95 03 	sts	0x0395, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     cf0:	80 91 94 03 	lds	r24, 0x0394
     cf4:	80 68       	ori	r24, 0x80	; 128
     cf6:	6d cf       	rjmp	.-294    	; 0xbd2 <main+0x6b2>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     cf8:	80 91 95 03 	lds	r24, 0x0395
     cfc:	81 60       	ori	r24, 0x01	; 1
     cfe:	35 c0       	rjmp	.+106    	; 0xd6a <main+0x84a>
						break;
					case O9_ON:
						if(print == 0){
     d00:	61 14       	cp	r6, r1
     d02:	71 04       	cpc	r7, r1
     d04:	39 f4       	brne	.+14     	; 0xd14 <main+0x7f4>
							OrangutanLCD::print("PAPER RAISE  ON ");
     d06:	86 e6       	ldi	r24, 0x66	; 102
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     d0e:	b1 e0       	ldi	r27, 0x01	; 1
     d10:	6b 2e       	mov	r6, r27
     d12:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     d14:	80 91 95 03 	lds	r24, 0x0395
     d18:	8d 7f       	andi	r24, 0xFD	; 253
     d1a:	14 c0       	rjmp	.+40     	; 0xd44 <main+0x824>
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     d1c:	80 91 95 03 	lds	r24, 0x0395
     d20:	0d c0       	rjmp	.+26     	; 0xd3c <main+0x81c>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(print == 0){
     d22:	61 14       	cp	r6, r1
     d24:	71 04       	cpc	r7, r1
     d26:	39 f4       	brne	.+14     	; 0xd36 <main+0x816>
							OrangutanLCD::print("PAPER LOWER  ON ");
     d28:	87 e7       	ldi	r24, 0x77	; 119
     d2a:	92 e0       	ldi	r25, 0x02	; 2
     d2c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     d30:	a1 e0       	ldi	r26, 0x01	; 1
     d32:	6a 2e       	mov	r6, r26
     d34:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
     d36:	80 91 95 03 	lds	r24, 0x0395
     d3a:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     d3c:	82 60       	ori	r24, 0x02	; 2
     d3e:	15 c0       	rjmp	.+42     	; 0xd6a <main+0x84a>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
     d40:	80 91 95 03 	lds	r24, 0x0395
     d44:	84 60       	ori	r24, 0x04	; 4
     d46:	11 c0       	rjmp	.+34     	; 0xd6a <main+0x84a>
						break;
					case O11_ON:
						if(print == 0){
     d48:	61 14       	cp	r6, r1
     d4a:	71 04       	cpc	r7, r1
     d4c:	39 f4       	brne	.+14     	; 0xd5c <main+0x83c>
							OrangutanLCD::print("AIR KNIFE    ON ");
     d4e:	88 e8       	ldi	r24, 0x88	; 136
     d50:	92 e0       	ldi	r25, 0x02	; 2
     d52:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     d56:	f1 e0       	ldi	r31, 0x01	; 1
     d58:	6f 2e       	mov	r6, r31
     d5a:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
     d5c:	80 91 95 03 	lds	r24, 0x0395
     d60:	87 7f       	andi	r24, 0xF7	; 247
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <main+0x84a>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
     d64:	80 91 95 03 	lds	r24, 0x0395
     d68:	88 60       	ori	r24, 0x08	; 8
     d6a:	80 93 95 03 	sts	0x0395, r24
     d6e:	10 c1       	rjmp	.+544    	; 0xf90 <main+0xa70>
						break;
					case M1_F:
						if(print == 0){
     d70:	61 14       	cp	r6, r1
     d72:	71 04       	cpc	r7, r1
     d74:	39 f4       	brne	.+14     	; 0xd84 <main+0x864>
							OrangutanLCD::print("LOADING    FRONT");
     d76:	89 e9       	ldi	r24, 0x99	; 153
     d78:	92 e0       	ldi	r25, 0x02	; 2
     d7a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     d7e:	e1 e0       	ldi	r30, 0x01	; 1
     d80:	6e 2e       	mov	r6, r30
     d82:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     d84:	80 91 92 03 	lds	r24, 0x0392
     d88:	8d 7f       	andi	r24, 0xFD	; 253
     d8a:	80 93 92 03 	sts	0x0392, r24
     d8e:	a1 e0       	ldi	r26, 0x01	; 1
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	2f 96       	adiw	r28, 0x0f	; 15
     d94:	bf af       	std	Y+63, r27	; 0x3f
     d96:	ae af       	std	Y+62, r26	; 0x3e
     d98:	2f 97       	sbiw	r28, 0x0f	; 15
     d9a:	fa c0       	rjmp	.+500    	; 0xf90 <main+0xa70>
						plateLoadMotor =  1;
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
     d9c:	80 91 92 03 	lds	r24, 0x0392
     da0:	82 60       	ori	r24, 0x02	; 2
     da2:	80 93 92 03 	sts	0x0392, r24
     da6:	21 e0       	ldi	r18, 0x01	; 1
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	2f 96       	adiw	r28, 0x0f	; 15
     dac:	3f af       	std	Y+63, r19	; 0x3f
     dae:	2e af       	std	Y+62, r18	; 0x3e
     db0:	2f 97       	sbiw	r28, 0x0f	; 15
     db2:	ee c0       	rjmp	.+476    	; 0xf90 <main+0xa70>
						plateLoadMotor =  1;
						break;
					case M2_F:
						if(print == 0){
     db4:	61 14       	cp	r6, r1
     db6:	71 04       	cpc	r7, r1
     db8:	39 f4       	brne	.+14     	; 0xdc8 <main+0x8a8>
							OrangutanLCD::print("DRIVE      FRONT");
     dba:	8a ea       	ldi	r24, 0xAA	; 170
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     dc2:	71 e0       	ldi	r23, 0x01	; 1
     dc4:	67 2e       	mov	r6, r23
     dc6:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     dc8:	80 91 92 03 	lds	r24, 0x0392
     dcc:	8f 7e       	andi	r24, 0xEF	; 239
     dce:	80 93 92 03 	sts	0x0392, r24
     dd2:	41 e0       	ldi	r20, 0x01	; 1
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	2d 96       	adiw	r28, 0x0d	; 13
     dd8:	5f af       	std	Y+63, r21	; 0x3f
     dda:	4e af       	std	Y+62, r20	; 0x3e
     ddc:	2d 97       	sbiw	r28, 0x0d	; 13
     dde:	2f 96       	adiw	r28, 0x0f	; 15
     de0:	1f ae       	std	Y+63, r1	; 0x3f
     de2:	1e ae       	std	Y+62, r1	; 0x3e
     de4:	2f 97       	sbiw	r28, 0x0f	; 15
     de6:	62 e2       	ldi	r22, 0x22	; 34
     de8:	46 2e       	mov	r4, r22
     dea:	51 2c       	mov	r5, r1
     dec:	d1 c0       	rjmp	.+418    	; 0xf90 <main+0xa70>
						fixtureMotor =  1;
						plateLoadMotor = 0;
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     dee:	80 91 92 03 	lds	r24, 0x0392
     df2:	80 61       	ori	r24, 0x10	; 16
     df4:	80 93 92 03 	sts	0x0392, r24
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	2d 96       	adiw	r28, 0x0d	; 13
     dfe:	9f af       	std	Y+63, r25	; 0x3f
     e00:	8e af       	std	Y+62, r24	; 0x3e
     e02:	2d 97       	sbiw	r28, 0x0d	; 13
     e04:	c5 c0       	rjmp	.+394    	; 0xf90 <main+0xa70>
						fixtureMotor =  1;
						break;
					case M3_F:
						if(print == 0){
     e06:	61 14       	cp	r6, r1
     e08:	71 04       	cpc	r7, r1
     e0a:	39 f4       	brne	.+14     	; 0xe1a <main+0x8fa>
							OrangutanLCD::print("BRUSH1     FRONT");
     e0c:	8b eb       	ldi	r24, 0xBB	; 187
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     e14:	51 e0       	ldi	r21, 0x01	; 1
     e16:	65 2e       	mov	r6, r21
     e18:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
     e1a:	80 91 92 03 	lds	r24, 0x0392
     e1e:	8f 77       	andi	r24, 0x7F	; 127
     e20:	80 93 92 03 	sts	0x0392, r24
     e24:	2d 96       	adiw	r28, 0x0d	; 13
     e26:	1f ae       	std	Y+63, r1	; 0x3f
     e28:	1e ae       	std	Y+62, r1	; 0x3e
     e2a:	2d 97       	sbiw	r28, 0x0d	; 13
     e2c:	a1 e0       	ldi	r26, 0x01	; 1
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	2b 96       	adiw	r28, 0x0b	; 11
     e32:	bf af       	std	Y+63, r27	; 0x3f
     e34:	ae af       	std	Y+62, r26	; 0x3e
     e36:	2b 97       	sbiw	r28, 0x0b	; 11
     e38:	44 e2       	ldi	r20, 0x24	; 36
     e3a:	44 2e       	mov	r4, r20
     e3c:	51 2c       	mov	r5, r1
     e3e:	a8 c0       	rjmp	.+336    	; 0xf90 <main+0xa70>
						brush1Motor =  1;
						fixtureMotor = 0;
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
     e40:	80 91 92 03 	lds	r24, 0x0392
     e44:	80 68       	ori	r24, 0x80	; 128
     e46:	80 93 92 03 	sts	0x0392, r24
     e4a:	21 e0       	ldi	r18, 0x01	; 1
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	2b 96       	adiw	r28, 0x0b	; 11
     e50:	3f af       	std	Y+63, r19	; 0x3f
     e52:	2e af       	std	Y+62, r18	; 0x3e
     e54:	2b 97       	sbiw	r28, 0x0b	; 11
     e56:	9c c0       	rjmp	.+312    	; 0xf90 <main+0xa70>
						brush1Motor =  1;
						break;
					case M4_F:
						if(print == 0){
     e58:	61 14       	cp	r6, r1
     e5a:	71 04       	cpc	r7, r1
     e5c:	39 f4       	brne	.+14     	; 0xe6c <main+0x94c>
							OrangutanLCD::print("BRUSH2     FRONT");
     e5e:	8c ec       	ldi	r24, 0xCC	; 204
     e60:	92 e0       	ldi	r25, 0x02	; 2
     e62:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     e66:	31 e0       	ldi	r19, 0x01	; 1
     e68:	63 2e       	mov	r6, r19
     e6a:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
     e6c:	80 91 93 03 	lds	r24, 0x0393
     e70:	8b 7f       	andi	r24, 0xFB	; 251
     e72:	80 93 93 03 	sts	0x0393, r24
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	29 96       	adiw	r28, 0x09	; 9
     e7c:	5f af       	std	Y+63, r21	; 0x3f
     e7e:	4e af       	std	Y+62, r20	; 0x3e
     e80:	29 97       	sbiw	r28, 0x09	; 9
     e82:	2b 96       	adiw	r28, 0x0b	; 11
     e84:	1f ae       	std	Y+63, r1	; 0x3f
     e86:	1e ae       	std	Y+62, r1	; 0x3e
     e88:	2b 97       	sbiw	r28, 0x0b	; 11
     e8a:	26 e2       	ldi	r18, 0x26	; 38
     e8c:	42 2e       	mov	r4, r18
     e8e:	51 2c       	mov	r5, r1
     e90:	7f c0       	rjmp	.+254    	; 0xf90 <main+0xa70>
						brush2Motor =  1;
						brush1Motor = 0;
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
     e92:	80 91 93 03 	lds	r24, 0x0393
     e96:	84 60       	ori	r24, 0x04	; 4
     e98:	80 93 93 03 	sts	0x0393, r24
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	29 96       	adiw	r28, 0x09	; 9
     ea2:	9f af       	std	Y+63, r25	; 0x3f
     ea4:	8e af       	std	Y+62, r24	; 0x3e
     ea6:	29 97       	sbiw	r28, 0x09	; 9
     ea8:	73 c0       	rjmp	.+230    	; 0xf90 <main+0xa70>
						brush2Motor =  1;
						break;
					case M5_F:
						if(print == 0){
     eaa:	61 14       	cp	r6, r1
     eac:	71 04       	cpc	r7, r1
     eae:	39 f4       	brne	.+14     	; 0xebe <main+0x99e>
							OrangutanLCD::print("PAPER      FRONT");
     eb0:	8d ed       	ldi	r24, 0xDD	; 221
     eb2:	92 e0       	ldi	r25, 0x02	; 2
     eb4:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	69 2e       	mov	r6, r25
     ebc:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     ebe:	80 91 93 03 	lds	r24, 0x0393
     ec2:	8f 7d       	andi	r24, 0xDF	; 223
     ec4:	80 93 93 03 	sts	0x0393, r24
     ec8:	29 96       	adiw	r28, 0x09	; 9
     eca:	1f ae       	std	Y+63, r1	; 0x3f
     ecc:	1e ae       	std	Y+62, r1	; 0x3e
     ece:	29 97       	sbiw	r28, 0x09	; 9
     ed0:	a1 e0       	ldi	r26, 0x01	; 1
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	27 96       	adiw	r28, 0x07	; 7
     ed6:	bf af       	std	Y+63, r27	; 0x3f
     ed8:	ae af       	std	Y+62, r26	; 0x3e
     eda:	27 97       	sbiw	r28, 0x07	; 7
     edc:	88 e2       	ldi	r24, 0x28	; 40
     ede:	48 2e       	mov	r4, r24
     ee0:	51 2c       	mov	r5, r1
     ee2:	56 c0       	rjmp	.+172    	; 0xf90 <main+0xa70>
						paperTowelMotor =  1;
						brush2Motor = 0;
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
     ee4:	80 91 93 03 	lds	r24, 0x0393
     ee8:	80 62       	ori	r24, 0x20	; 32
     eea:	80 93 93 03 	sts	0x0393, r24
     eee:	21 e0       	ldi	r18, 0x01	; 1
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	27 96       	adiw	r28, 0x07	; 7
     ef4:	3f af       	std	Y+63, r19	; 0x3f
     ef6:	2e af       	std	Y+62, r18	; 0x3e
     ef8:	27 97       	sbiw	r28, 0x07	; 7
     efa:	4a c0       	rjmp	.+148    	; 0xf90 <main+0xa70>
						paperTowelMotor =  1;
						break;
					case M2_AND_M3:
						if(print == 0){
     efc:	61 14       	cp	r6, r1
     efe:	71 04       	cpc	r7, r1
     f00:	59 f0       	breq	.+22     	; 0xf18 <main+0x9f8>
     f02:	41 e0       	ldi	r20, 0x01	; 1
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	2d 96       	adiw	r28, 0x0d	; 13
     f08:	5f af       	std	Y+63, r21	; 0x3f
     f0a:	4e af       	std	Y+62, r20	; 0x3e
     f0c:	2d 97       	sbiw	r28, 0x0d	; 13
     f0e:	2b 96       	adiw	r28, 0x0b	; 11
     f10:	5f af       	std	Y+63, r21	; 0x3f
     f12:	4e af       	std	Y+62, r20	; 0x3e
     f14:	2b 97       	sbiw	r28, 0x0b	; 11
     f16:	3c c0       	rjmp	.+120    	; 0xf90 <main+0xa70>
							OrangutanLCD::print("FIXTURE AND BRUSH1");
     f18:	8e ee       	ldi	r24, 0xEE	; 238
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     f20:	01 e0       	ldi	r16, 0x01	; 1
     f22:	60 2e       	mov	r6, r16
     f24:	71 2c       	mov	r7, r1
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	2d 96       	adiw	r28, 0x0d	; 13
     f2c:	9f af       	std	Y+63, r25	; 0x3f
     f2e:	8e af       	std	Y+62, r24	; 0x3e
     f30:	2d 97       	sbiw	r28, 0x0d	; 13
     f32:	2b 96       	adiw	r28, 0x0b	; 11
     f34:	9f af       	std	Y+63, r25	; 0x3f
     f36:	8e af       	std	Y+62, r24	; 0x3e
     f38:	2b 97       	sbiw	r28, 0x0b	; 11
     f3a:	2a c0       	rjmp	.+84     	; 0xf90 <main+0xa70>
						}
						fixtureMotor = 1;
						brush1Motor = 1;
						break;
					case M2_AND_M4:
						if(print == 0){
     f3c:	61 14       	cp	r6, r1
     f3e:	71 04       	cpc	r7, r1
     f40:	79 f0       	breq	.+30     	; 0xf60 <main+0xa40>
     f42:	a1 e0       	ldi	r26, 0x01	; 1
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	29 96       	adiw	r28, 0x09	; 9
     f48:	bf af       	std	Y+63, r27	; 0x3f
     f4a:	ae af       	std	Y+62, r26	; 0x3e
     f4c:	29 97       	sbiw	r28, 0x09	; 9
     f4e:	2d 96       	adiw	r28, 0x0d	; 13
     f50:	bf af       	std	Y+63, r27	; 0x3f
     f52:	ae af       	std	Y+62, r26	; 0x3e
     f54:	2d 97       	sbiw	r28, 0x0d	; 13
     f56:	2b 96       	adiw	r28, 0x0b	; 11
     f58:	1f ae       	std	Y+63, r1	; 0x3f
     f5a:	1e ae       	std	Y+62, r1	; 0x3e
     f5c:	2b 97       	sbiw	r28, 0x0b	; 11
     f5e:	18 c0       	rjmp	.+48     	; 0xf90 <main+0xa70>
							OrangutanLCD::print("FIXTURE AND BRUSH2");
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	93 e0       	ldi	r25, 0x03	; 3
     f64:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
     f68:	11 e0       	ldi	r17, 0x01	; 1
     f6a:	61 2e       	mov	r6, r17
     f6c:	71 2c       	mov	r7, r1
     f6e:	21 e0       	ldi	r18, 0x01	; 1
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	29 96       	adiw	r28, 0x09	; 9
     f74:	3f af       	std	Y+63, r19	; 0x3f
     f76:	2e af       	std	Y+62, r18	; 0x3e
     f78:	29 97       	sbiw	r28, 0x09	; 9
     f7a:	2d 96       	adiw	r28, 0x0d	; 13
     f7c:	3f af       	std	Y+63, r19	; 0x3f
     f7e:	2e af       	std	Y+62, r18	; 0x3e
     f80:	2d 97       	sbiw	r28, 0x0d	; 13
     f82:	2b 96       	adiw	r28, 0x0b	; 11
     f84:	1f ae       	std	Y+63, r1	; 0x3f
     f86:	1e ae       	std	Y+62, r1	; 0x3e
     f88:	2b 97       	sbiw	r28, 0x0b	; 11
     f8a:	bb e2       	ldi	r27, 0x2B	; 43
     f8c:	4b 2e       	mov	r4, r27
     f8e:	51 2c       	mov	r5, r1
						brush1Motor = 0;
						brush2Motor = 1;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
     f90:	4d b7       	in	r20, 0x3d	; 61
     f92:	5e b7       	in	r21, 0x3e	; 62
     f94:	42 51       	subi	r20, 0x12	; 18
     f96:	50 40       	sbci	r21, 0x00	; 0
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	5e bf       	out	0x3e, r21	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	4d bf       	out	0x3d, r20	; 61
     fa2:	ed b7       	in	r30, 0x3d	; 61
     fa4:	fe b7       	in	r31, 0x3e	; 62
     fa6:	31 96       	adiw	r30, 0x01	; 1
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	ad b7       	in	r26, 0x3d	; 61
     fae:	be b7       	in	r27, 0x3e	; 62
     fb0:	12 96       	adiw	r26, 0x02	; 2
     fb2:	9c 93       	st	X, r25
     fb4:	8e 93       	st	-X, r24
     fb6:	11 97       	sbiw	r26, 0x01	; 1
     fb8:	93 83       	std	Z+3, r25	; 0x03
     fba:	82 83       	std	Z+2, r24	; 0x02
     fbc:	95 83       	std	Z+5, r25	; 0x05
     fbe:	84 83       	std	Z+4, r24	; 0x04
     fc0:	97 83       	std	Z+7, r25	; 0x07
     fc2:	86 83       	std	Z+6, r24	; 0x06
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	91 87       	std	Z+9, r25	; 0x09
     fca:	80 87       	std	Z+8, r24	; 0x08
     fcc:	93 87       	std	Z+11, r25	; 0x0b
     fce:	82 87       	std	Z+10, r24	; 0x0a
     fd0:	95 87       	std	Z+13, r25	; 0x0d
     fd2:	84 87       	std	Z+12, r24	; 0x0c
     fd4:	97 87       	std	Z+15, r25	; 0x0f
     fd6:	86 87       	std	Z+14, r24	; 0x0e
     fd8:	91 8b       	std	Z+17, r25	; 0x11
     fda:	80 8b       	std	Z+16, r24	; 0x10
     fdc:	c1 01       	movw	r24, r2
     fde:	23 96       	adiw	r28, 0x03	; 3
     fe0:	6e ad       	ldd	r22, Y+62	; 0x3e
     fe2:	7f ad       	ldd	r23, Y+63	; 0x3f
     fe4:	23 97       	sbiw	r28, 0x03	; 3
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	2f 96       	adiw	r28, 0x0f	; 15
     fec:	2e ad       	ldd	r18, Y+62	; 0x3e
     fee:	3f ad       	ldd	r19, Y+63	; 0x3f
     ff0:	2f 97       	sbiw	r28, 0x0f	; 15
     ff2:	2d 96       	adiw	r28, 0x0d	; 13
     ff4:	0e ad       	ldd	r16, Y+62	; 0x3e
     ff6:	1f ad       	ldd	r17, Y+63	; 0x3f
     ff8:	2d 97       	sbiw	r28, 0x0d	; 13
     ffa:	2b 96       	adiw	r28, 0x0b	; 11
     ffc:	ee ac       	ldd	r14, Y+62	; 0x3e
     ffe:	ff ac       	ldd	r15, Y+63	; 0x3f
    1000:	2b 97       	sbiw	r28, 0x0b	; 11
    1002:	29 96       	adiw	r28, 0x09	; 9
    1004:	ce ac       	ldd	r12, Y+62	; 0x3e
    1006:	df ac       	ldd	r13, Y+63	; 0x3f
    1008:	29 97       	sbiw	r28, 0x09	; 9
    100a:	27 96       	adiw	r28, 0x07	; 7
    100c:	ae ac       	ldd	r10, Y+62	; 0x3e
    100e:	bf ac       	ldd	r11, Y+63	; 0x3f
    1010:	27 97       	sbiw	r28, 0x07	; 7
    1012:	a2 e0       	ldi	r26, 0x02	; 2
    1014:	8a 2e       	mov	r8, r26
    1016:	91 2c       	mov	r9, r1
    1018:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    101c:	2d b7       	in	r18, 0x3d	; 61
    101e:	3e b7       	in	r19, 0x3e	; 62
    1020:	2e 5e       	subi	r18, 0xEE	; 238
    1022:	3f 4f       	sbci	r19, 0xFF	; 255
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	3e bf       	out	0x3e, r19	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	2d bf       	out	0x3d, r18	; 61
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
			counter = 0;
			OrangutanLCD::clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
    1036:	3c e2       	ldi	r19, 0x2C	; 44
    1038:	43 16       	cp	r4, r19
    103a:	51 04       	cpc	r5, r1
    103c:	11 f4       	brne	.+4      	; 0x1042 <main+0xb22>
    103e:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <main+0x2c66>
				i2c_start(I2C2+I2C_WRITE);
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				counter ++;
    1042:	08 94       	sec
    1044:	21 1c       	adc	r2, r1
    1046:	31 1c       	adc	r3, r1
    1048:	58 cb       	rjmp	.-2384   	; 0x6fa <main+0x1da>
				delay_ms(1);
			}
		}
		else{										//If switch is set to Run Mode
		
		OrangutanLCD::print("NORMAL");
    104a:	84 e1       	ldi	r24, 0x14	; 20
    104c:	93 e0       	ldi	r25, 0x03	; 3
    104e:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
    1052:	88 ee       	ldi	r24, 0xE8	; 232
    1054:	93 e0       	ldi	r25, 0x03	; 3
    1056:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
    105a:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("SELECT CYCLE");
    105e:	8b e1       	ldi	r24, 0x1B	; 27
    1060:	93 e0       	ldi	r25, 0x03	; 3
    1062:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
    1066:	ee 24       	eor	r14, r14
    1068:	ff 24       	eor	r15, r15
				else if(counter - counterRefRel > 15){
					button = 0;
					stateButton = NONE;
				}
			}*/
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    106a:	c7 01       	movw	r24, r14
    106c:	be 01       	movw	r22, r28
    106e:	6f 5f       	subi	r22, 0xFF	; 255
    1070:	7f 4f       	sbci	r23, 0xFF	; 255
    1072:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>
    1076:	18 2f       	mov	r17, r24
			counter++;
    1078:	08 94       	sec
    107a:	e1 1c       	adc	r14, r1
    107c:	f1 1c       	adc	r15, r1
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
		OrangutanLCD::print("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1086:	11 23       	and	r17, r17
    1088:	81 f3       	breq	.-32     	; 0x106a <main+0xb4a>
			counter++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		OrangutanLCD::clear();
    108a:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("CYCLE:");
    108e:	88 e2       	ldi	r24, 0x28	; 40
    1090:	93 e0       	ldi	r25, 0x03	; 3
    1092:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>

		//u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1096:	80 91 92 03 	lds	r24, 0x0392
    109a:	80 62       	ori	r24, 0x20	; 32
    109c:	80 93 92 03 	sts	0x0392, r24
		/*u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;*/

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    10a6:	88 23       	and	r24, r24
    10a8:	11 f0       	breq	.+4      	; 0x10ae <main+0xb8e>
    10aa:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <main+0x2cb8>
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    10b4:	88 23       	and	r24, r24
    10b6:	11 f0       	breq	.+4      	; 0x10bc <main+0xb9c>
    10b8:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <main+0x2cb8>
			OrangutanLCD::gotoXY(7,0);
    10bc:	87 e0       	ldi	r24, 0x07	; 7
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("FIRST B");
    10c4:	8f e2       	ldi	r24, 0x2F	; 47
    10c6:	93 e0       	ldi	r25, 0x03	; 3
    10c8:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
			OrangutanLCD::print("DEBUG");
    10cc:	87 e3       	ldi	r24, 0x37	; 55
    10ce:	93 e0       	ldi	r25, 0x03	; 3
    10d0:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    10d4:	80 91 92 03 	lds	r24, 0x0392
    10d8:	80 62       	ori	r24, 0x20	; 32
    10da:	80 93 92 03 	sts	0x0392, r24
    10de:	22 24       	eor	r2, r2
    10e0:	33 24       	eor	r3, r3
    10e2:	41 e0       	ldi	r20, 0x01	; 1
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	5c af       	std	Y+60, r21	; 0x3c
    10e8:	4b af       	std	Y+59, r20	; 0x3b
    10ea:	5e af       	std	Y+62, r21	; 0x3e
    10ec:	4d af       	std	Y+61, r20	; 0x3d
    10ee:	58 a3       	std	Y+32, r21	; 0x20
    10f0:	4f 8f       	std	Y+31, r20	; 0x1f
    10f2:	18 8e       	std	Y+24, r1	; 0x18
    10f4:	1f 8a       	std	Y+23, r1	; 0x17
    10f6:	21 96       	adiw	r28, 0x01	; 1
    10f8:	1f ae       	std	Y+63, r1	; 0x3f
    10fa:	1e ae       	std	Y+62, r1	; 0x3e
    10fc:	21 97       	sbiw	r28, 0x01	; 1
    10fe:	1a 8a       	std	Y+18, r1	; 0x12
    1100:	19 8a       	std	Y+17, r1	; 0x11
    1102:	1a 86       	std	Y+10, r1	; 0x0a
    1104:	19 86       	std	Y+9, r1	; 0x09
    1106:	66 24       	eor	r6, r6
    1108:	77 24       	eor	r7, r7
    110a:	44 24       	eor	r4, r4
    110c:	55 24       	eor	r5, r5
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    110e:	84 e4       	ldi	r24, 0x44	; 68
    1110:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    111a:	85 e4       	ldi	r24, 0x45	; 69
    111c:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1120:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z11i2c_readAckv>
    1124:	80 93 96 03 	sts	0x0396, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1128:	0e 94 92 19 	call	0x3324	; 0x3324 <_Z11i2c_readNakv>
    112c:	80 93 97 03 	sts	0x0397, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1130:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Z8i2c_stopv>
				
				if(state != INIT){
    1134:	61 14       	cp	r6, r1
    1136:	71 04       	cpc	r7, r1
    1138:	79 f0       	breq	.+30     	; 0x1158 <main+0xc38>
					OrangutanLCD::gotoXY(0,1);
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1142:	8d e3       	ldi	r24, 0x3D	; 61
    1144:	93 e0       	ldi	r25, 0x03	; 3
    1146:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
	};
	static inline void print(int value)
	{
		print((long)value);
    114a:	b3 01       	movw	r22, r6
    114c:	88 27       	eor	r24, r24
    114e:	77 fd       	sbrc	r23, 7
    1150:	80 95       	com	r24
    1152:	98 2f       	mov	r25, r24
    1154:	0e 94 44 1c 	call	0x3888	; 0x3888 <_ZN12OrangutanLCD5printEl>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1158:	c2 01       	movw	r24, r4
    115a:	be 01       	movw	r22, r28
    115c:	6f 5f       	subi	r22, 0xFF	; 255
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    1164:	61 14       	cp	r6, r1
    1166:	71 04       	cpc	r7, r1
    1168:	29 f4       	brne	.+10     	; 0x1174 <main+0xc54>
    116a:	88 23       	and	r24, r24
    116c:	09 f4       	brne	.+2      	; 0x1170 <main+0xc50>
    116e:	43 c0       	rjmp	.+134    	; 0x11f6 <main+0xcd6>
    1170:	12 01       	movw	r2, r4
    1172:	04 c0       	rjmp	.+8      	; 0x117c <main+0xc5c>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    1174:	51 e0       	ldi	r21, 0x01	; 1
    1176:	65 16       	cp	r6, r21
    1178:	71 04       	cpc	r7, r1
    117a:	49 f4       	brne	.+18     	; 0x118e <main+0xc6e>
    117c:	c2 01       	movw	r24, r4
    117e:	82 19       	sub	r24, r2
    1180:	93 09       	sbc	r25, r3
    1182:	81 5a       	subi	r24, 0xA1	; 161
    1184:	9f 40       	sbci	r25, 0x0F	; 15
    1186:	0c f4       	brge	.+2      	; 0x118a <main+0xc6a>
    1188:	43 c0       	rjmp	.+134    	; 0x1210 <main+0xcf0>
    118a:	12 01       	movw	r2, r4
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <main+0xc76>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    118e:	b2 e0       	ldi	r27, 0x02	; 2
    1190:	6b 16       	cp	r6, r27
    1192:	71 04       	cpc	r7, r1
    1194:	49 f4       	brne	.+18     	; 0x11a8 <main+0xc88>
    1196:	c2 01       	movw	r24, r4
    1198:	82 19       	sub	r24, r2
    119a:	93 09       	sbc	r25, r3
    119c:	85 36       	cpi	r24, 0x65	; 101
    119e:	91 05       	cpc	r25, r1
    11a0:	0c f4       	brge	.+2      	; 0x11a4 <main+0xc84>
    11a2:	46 c0       	rjmp	.+140    	; 0x1230 <main+0xd10>
    11a4:	12 01       	movw	r2, r4
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <main+0xc90>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    11a8:	23 e0       	ldi	r18, 0x03	; 3
    11aa:	62 16       	cp	r6, r18
    11ac:	71 04       	cpc	r7, r1
    11ae:	49 f4       	brne	.+18     	; 0x11c2 <main+0xca2>
    11b0:	c2 01       	movw	r24, r4
    11b2:	82 19       	sub	r24, r2
    11b4:	93 09       	sbc	r25, r3
    11b6:	81 5a       	subi	r24, 0xA1	; 161
    11b8:	9f 40       	sbci	r25, 0x0F	; 15
    11ba:	0c f4       	brge	.+2      	; 0x11be <main+0xc9e>
    11bc:	49 c0       	rjmp	.+146    	; 0x1250 <main+0xd30>
    11be:	12 01       	movw	r2, r4
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <main+0xcaa>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    11c2:	44 e0       	ldi	r20, 0x04	; 4
    11c4:	64 16       	cp	r6, r20
    11c6:	71 04       	cpc	r7, r1
    11c8:	49 f4       	brne	.+18     	; 0x11dc <main+0xcbc>
    11ca:	c2 01       	movw	r24, r4
    11cc:	82 19       	sub	r24, r2
    11ce:	93 09       	sbc	r25, r3
    11d0:	89 5e       	subi	r24, 0xE9	; 233
    11d2:	93 40       	sbci	r25, 0x03	; 3
    11d4:	0c f4       	brge	.+2      	; 0x11d8 <main+0xcb8>
    11d6:	4c c0       	rjmp	.+152    	; 0x1270 <main+0xd50>
    11d8:	12 01       	movw	r2, r4
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <main+0xcc4>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    11dc:	85 e0       	ldi	r24, 0x05	; 5
    11de:	68 16       	cp	r6, r24
    11e0:	71 04       	cpc	r7, r1
    11e2:	49 f4       	brne	.+18     	; 0x11f6 <main+0xcd6>
    11e4:	c2 01       	movw	r24, r4
    11e6:	82 19       	sub	r24, r2
    11e8:	93 09       	sbc	r25, r3
    11ea:	85 36       	cpi	r24, 0x65	; 101
    11ec:	91 05       	cpc	r25, r1
    11ee:	0c f4       	brge	.+2      	; 0x11f2 <main+0xcd2>
    11f0:	4d c0       	rjmp	.+154    	; 0x128c <main+0xd6c>
    11f2:	12 01       	movw	r2, r4
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <main+0xcde>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    11f6:	96 e0       	ldi	r25, 0x06	; 6
    11f8:	69 16       	cp	r6, r25
    11fa:	71 04       	cpc	r7, r1
    11fc:	61 f4       	brne	.+24     	; 0x1216 <main+0xcf6>
    11fe:	c2 01       	movw	r24, r4
    1200:	82 19       	sub	r24, r2
    1202:	93 09       	sbc	r25, r3
    1204:	81 5a       	subi	r24, 0xA1	; 161
    1206:	9f 40       	sbci	r25, 0x0F	; 15
    1208:	0c f4       	brge	.+2      	; 0x120c <main+0xcec>
    120a:	50 c0       	rjmp	.+160    	; 0x12ac <main+0xd8c>
    120c:	12 01       	movw	r2, r4
    120e:	07 c0       	rjmp	.+14     	; 0x121e <main+0xcfe>
    1210:	f1 e0       	ldi	r31, 0x01	; 1
    1212:	6f 2e       	mov	r6, r31
    1214:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    1216:	b7 e0       	ldi	r27, 0x07	; 7
    1218:	6b 16       	cp	r6, r27
    121a:	71 04       	cpc	r7, r1
    121c:	61 f4       	brne	.+24     	; 0x1236 <main+0xd16>
    121e:	c2 01       	movw	r24, r4
    1220:	82 19       	sub	r24, r2
    1222:	93 09       	sbc	r25, r3
    1224:	85 36       	cpi	r24, 0x65	; 101
    1226:	91 05       	cpc	r25, r1
    1228:	0c f4       	brge	.+2      	; 0x122c <main+0xd0c>
    122a:	50 c0       	rjmp	.+160    	; 0x12cc <main+0xdac>
    122c:	12 01       	movw	r2, r4
    122e:	07 c0       	rjmp	.+14     	; 0x123e <main+0xd1e>
    1230:	e2 e0       	ldi	r30, 0x02	; 2
    1232:	6e 2e       	mov	r6, r30
    1234:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    1236:	28 e0       	ldi	r18, 0x08	; 8
    1238:	62 16       	cp	r6, r18
    123a:	71 04       	cpc	r7, r1
    123c:	61 f4       	brne	.+24     	; 0x1256 <main+0xd36>
    123e:	c2 01       	movw	r24, r4
    1240:	82 19       	sub	r24, r2
    1242:	93 09       	sbc	r25, r3
    1244:	85 36       	cpi	r24, 0x65	; 101
    1246:	91 05       	cpc	r25, r1
    1248:	0c f4       	brge	.+2      	; 0x124c <main+0xd2c>
    124a:	4e c0       	rjmp	.+156    	; 0x12e8 <main+0xdc8>
    124c:	12 01       	movw	r2, r4
    124e:	07 c0       	rjmp	.+14     	; 0x125e <main+0xd3e>
    1250:	73 e0       	ldi	r23, 0x03	; 3
    1252:	67 2e       	mov	r6, r23
    1254:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    1256:	39 e0       	ldi	r19, 0x09	; 9
    1258:	63 16       	cp	r6, r19
    125a:	71 04       	cpc	r7, r1
    125c:	61 f4       	brne	.+24     	; 0x1276 <main+0xd56>
    125e:	c2 01       	movw	r24, r4
    1260:	82 19       	sub	r24, r2
    1262:	93 09       	sbc	r25, r3
    1264:	81 5d       	subi	r24, 0xD1	; 209
    1266:	97 40       	sbci	r25, 0x07	; 7
    1268:	0c f4       	brge	.+2      	; 0x126c <main+0xd4c>
    126a:	4e c0       	rjmp	.+156    	; 0x1308 <main+0xde8>
    126c:	12 01       	movw	r2, r4
    126e:	07 c0       	rjmp	.+14     	; 0x127e <main+0xd5e>
    1270:	64 e0       	ldi	r22, 0x04	; 4
    1272:	66 2e       	mov	r6, r22
    1274:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    1276:	5a e0       	ldi	r21, 0x0A	; 10
    1278:	65 16       	cp	r6, r21
    127a:	71 04       	cpc	r7, r1
    127c:	51 f4       	brne	.+20     	; 0x1292 <main+0xd72>
    127e:	c2 01       	movw	r24, r4
    1280:	82 19       	sub	r24, r2
    1282:	93 09       	sbc	r25, r3
    1284:	85 36       	cpi	r24, 0x65	; 101
    1286:	91 05       	cpc	r25, r1
    1288:	44 f4       	brge	.+16     	; 0x129a <main+0xd7a>
    128a:	4e c0       	rjmp	.+156    	; 0x1328 <main+0xe08>
    128c:	55 e0       	ldi	r21, 0x05	; 5
    128e:	65 2e       	mov	r6, r21
    1290:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1292:	8b e0       	ldi	r24, 0x0B	; 11
    1294:	68 16       	cp	r6, r24
    1296:	71 04       	cpc	r7, r1
    1298:	61 f4       	brne	.+24     	; 0x12b2 <main+0xd92>
    129a:	c2 01       	movw	r24, r4
    129c:	82 19       	sub	r24, r2
    129e:	93 09       	sbc	r25, r3
    12a0:	81 5d       	subi	r24, 0xD1	; 209
    12a2:	97 40       	sbci	r25, 0x07	; 7
    12a4:	0c f4       	brge	.+2      	; 0x12a8 <main+0xd88>
    12a6:	50 c0       	rjmp	.+160    	; 0x1348 <main+0xe28>
    12a8:	12 01       	movw	r2, r4
    12aa:	07 c0       	rjmp	.+14     	; 0x12ba <main+0xd9a>
    12ac:	46 e0       	ldi	r20, 0x06	; 6
    12ae:	64 2e       	mov	r6, r20
    12b0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    12b2:	bc e0       	ldi	r27, 0x0C	; 12
    12b4:	6b 16       	cp	r6, r27
    12b6:	71 04       	cpc	r7, r1
    12b8:	61 f4       	brne	.+24     	; 0x12d2 <main+0xdb2>
    12ba:	c2 01       	movw	r24, r4
    12bc:	82 19       	sub	r24, r2
    12be:	93 09       	sbc	r25, r3
    12c0:	85 36       	cpi	r24, 0x65	; 101
    12c2:	91 05       	cpc	r25, r1
    12c4:	0c f4       	brge	.+2      	; 0x12c8 <main+0xda8>
    12c6:	4e c0       	rjmp	.+156    	; 0x1364 <main+0xe44>
    12c8:	12 01       	movw	r2, r4
    12ca:	07 c0       	rjmp	.+14     	; 0x12da <main+0xdba>
    12cc:	37 e0       	ldi	r19, 0x07	; 7
    12ce:	63 2e       	mov	r6, r19
    12d0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    12d2:	2d e0       	ldi	r18, 0x0D	; 13
    12d4:	62 16       	cp	r6, r18
    12d6:	71 04       	cpc	r7, r1
    12d8:	51 f4       	brne	.+20     	; 0x12ee <main+0xdce>
    12da:	c2 01       	movw	r24, r4
    12dc:	82 19       	sub	r24, r2
    12de:	93 09       	sbc	r25, r3
    12e0:	81 5d       	subi	r24, 0xD1	; 209
    12e2:	97 40       	sbci	r25, 0x07	; 7
    12e4:	44 f4       	brge	.+16     	; 0x12f6 <main+0xdd6>
    12e6:	51 c0       	rjmp	.+162    	; 0x138a <main+0xe6a>
    12e8:	28 e0       	ldi	r18, 0x08	; 8
    12ea:	62 2e       	mov	r6, r18
    12ec:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
					}
				if(state == B1STOP2 && counter - counterRef > pWait){
    12ee:	4e e0       	ldi	r20, 0x0E	; 14
    12f0:	64 16       	cp	r6, r20
    12f2:	71 04       	cpc	r7, r1
    12f4:	61 f4       	brne	.+24     	; 0x130e <main+0xdee>
    12f6:	c2 01       	movw	r24, r4
    12f8:	82 19       	sub	r24, r2
    12fa:	93 09       	sbc	r25, r3
    12fc:	85 36       	cpi	r24, 0x65	; 101
    12fe:	91 05       	cpc	r25, r1
    1300:	0c f4       	brge	.+2      	; 0x1304 <main+0xde4>
    1302:	57 c0       	rjmp	.+174    	; 0x13b2 <main+0xe92>
    1304:	12 01       	movw	r2, r4
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <main+0xdf6>
    1308:	99 e0       	ldi	r25, 0x09	; 9
    130a:	69 2e       	mov	r6, r25
    130c:	71 2c       	mov	r7, r1
					state = 23;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    130e:	57 e1       	ldi	r21, 0x17	; 23
    1310:	65 16       	cp	r6, r21
    1312:	71 04       	cpc	r7, r1
    1314:	61 f4       	brne	.+24     	; 0x132e <main+0xe0e>
    1316:	c2 01       	movw	r24, r4
    1318:	82 19       	sub	r24, r2
    131a:	93 09       	sbc	r25, r3
    131c:	81 5a       	subi	r24, 0xA1	; 161
    131e:	9f 40       	sbci	r25, 0x0F	; 15
    1320:	0c f4       	brge	.+2      	; 0x1324 <main+0xe04>
    1322:	57 c0       	rjmp	.+174    	; 0x13d2 <main+0xeb2>
    1324:	12 01       	movw	r2, r4
    1326:	07 c0       	rjmp	.+14     	; 0x1336 <main+0xe16>
    1328:	8a e0       	ldi	r24, 0x0A	; 10
    132a:	68 2e       	mov	r6, r24
    132c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    132e:	b8 e1       	ldi	r27, 0x18	; 24
    1330:	6b 16       	cp	r6, r27
    1332:	71 04       	cpc	r7, r1
    1334:	61 f4       	brne	.+24     	; 0x134e <main+0xe2e>
    1336:	c2 01       	movw	r24, r4
    1338:	82 19       	sub	r24, r2
    133a:	93 09       	sbc	r25, r3
    133c:	85 36       	cpi	r24, 0x65	; 101
    133e:	91 05       	cpc	r25, r1
    1340:	0c f4       	brge	.+2      	; 0x1344 <main+0xe24>
    1342:	55 c0       	rjmp	.+170    	; 0x13ee <main+0xece>
    1344:	12 01       	movw	r2, r4
    1346:	07 c0       	rjmp	.+14     	; 0x1356 <main+0xe36>
    1348:	0b e0       	ldi	r16, 0x0B	; 11
    134a:	60 2e       	mov	r6, r16
    134c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    134e:	29 e1       	ldi	r18, 0x19	; 25
    1350:	62 16       	cp	r6, r18
    1352:	71 04       	cpc	r7, r1
    1354:	51 f4       	brne	.+20     	; 0x136a <main+0xe4a>
    1356:	c2 01       	movw	r24, r4
    1358:	82 19       	sub	r24, r2
    135a:	93 09       	sbc	r25, r3
    135c:	81 5a       	subi	r24, 0xA1	; 161
    135e:	9f 40       	sbci	r25, 0x0F	; 15
    1360:	44 f4       	brge	.+16     	; 0x1372 <main+0xe52>
    1362:	55 c0       	rjmp	.+170    	; 0x140e <main+0xeee>
    1364:	1c e0       	ldi	r17, 0x0C	; 12
    1366:	61 2e       	mov	r6, r17
    1368:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    136a:	4a e1       	ldi	r20, 0x1A	; 26
    136c:	64 16       	cp	r6, r20
    136e:	71 04       	cpc	r7, r1
    1370:	79 f4       	brne	.+30     	; 0x1390 <main+0xe70>
    1372:	c2 01       	movw	r24, r4
    1374:	82 19       	sub	r24, r2
    1376:	93 09       	sbc	r25, r3
    1378:	81 5a       	subi	r24, 0xA1	; 161
    137a:	9f 40       	sbci	r25, 0x0F	; 15
    137c:	0c f4       	brge	.+2      	; 0x1380 <main+0xe60>
    137e:	57 c0       	rjmp	.+174    	; 0x142e <main+0xf0e>
    1380:	21 96       	adiw	r28, 0x01	; 1
    1382:	5f ae       	std	Y+63, r5	; 0x3f
    1384:	4e ae       	std	Y+62, r4	; 0x3e
    1386:	21 97       	sbiw	r28, 0x01	; 1
    1388:	07 c0       	rjmp	.+14     	; 0x1398 <main+0xe78>
    138a:	bd e0       	ldi	r27, 0x0D	; 13
    138c:	6b 2e       	mov	r6, r27
    138e:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    1390:	8b e1       	ldi	r24, 0x1B	; 27
    1392:	68 16       	cp	r6, r24
    1394:	71 04       	cpc	r7, r1
    1396:	81 f4       	brne	.+32     	; 0x13b8 <main+0xe98>
    1398:	c2 01       	movw	r24, r4
    139a:	21 96       	adiw	r28, 0x01	; 1
    139c:	ae ad       	ldd	r26, Y+62	; 0x3e
    139e:	bf ad       	ldd	r27, Y+63	; 0x3f
    13a0:	21 97       	sbiw	r28, 0x01	; 1
    13a2:	8a 1b       	sub	r24, r26
    13a4:	9b 0b       	sbc	r25, r27
    13a6:	85 36       	cpi	r24, 0x65	; 101
    13a8:	91 05       	cpc	r25, r1
    13aa:	0c f4       	brge	.+2      	; 0x13ae <main+0xe8e>
    13ac:	50 c0       	rjmp	.+160    	; 0x144e <main+0xf2e>
    13ae:	12 01       	movw	r2, r4
    13b0:	07 c0       	rjmp	.+14     	; 0x13c0 <main+0xea0>
    13b2:	ae e0       	ldi	r26, 0x0E	; 14
    13b4:	6a 2e       	mov	r6, r26
    13b6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    13b8:	bc e1       	ldi	r27, 0x1C	; 28
    13ba:	6b 16       	cp	r6, r27
    13bc:	71 04       	cpc	r7, r1
    13be:	61 f4       	brne	.+24     	; 0x13d8 <main+0xeb8>
    13c0:	c2 01       	movw	r24, r4
    13c2:	82 19       	sub	r24, r2
    13c4:	93 09       	sbc	r25, r3
    13c6:	85 36       	cpi	r24, 0x65	; 101
    13c8:	91 05       	cpc	r25, r1
    13ca:	0c f4       	brge	.+2      	; 0x13ce <main+0xeae>
    13cc:	50 c0       	rjmp	.+160    	; 0x146e <main+0xf4e>
    13ce:	12 01       	movw	r2, r4
    13d0:	07 c0       	rjmp	.+14     	; 0x13e0 <main+0xec0>
    13d2:	f7 e1       	ldi	r31, 0x17	; 23
    13d4:	6f 2e       	mov	r6, r31
    13d6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    13d8:	2d e1       	ldi	r18, 0x1D	; 29
    13da:	62 16       	cp	r6, r18
    13dc:	71 04       	cpc	r7, r1
    13de:	51 f4       	brne	.+20     	; 0x13f4 <main+0xed4>
    13e0:	c2 01       	movw	r24, r4
    13e2:	82 19       	sub	r24, r2
    13e4:	93 09       	sbc	r25, r3
    13e6:	81 5a       	subi	r24, 0xA1	; 161
    13e8:	9f 40       	sbci	r25, 0x0F	; 15
    13ea:	44 f4       	brge	.+16     	; 0x13fc <main+0xedc>
    13ec:	50 c0       	rjmp	.+160    	; 0x148e <main+0xf6e>
    13ee:	e8 e1       	ldi	r30, 0x18	; 24
    13f0:	6e 2e       	mov	r6, r30
    13f2:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totalStepLength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    13f4:	4e e1       	ldi	r20, 0x1E	; 30
    13f6:	64 16       	cp	r6, r20
    13f8:	71 04       	cpc	r7, r1
    13fa:	61 f4       	brne	.+24     	; 0x1414 <main+0xef4>
    13fc:	c2 01       	movw	r24, r4
    13fe:	82 19       	sub	r24, r2
    1400:	93 09       	sbc	r25, r3
    1402:	81 5a       	subi	r24, 0xA1	; 161
    1404:	9f 40       	sbci	r25, 0x0F	; 15
    1406:	0c f4       	brge	.+2      	; 0x140a <main+0xeea>
    1408:	53 c0       	rjmp	.+166    	; 0x14b0 <main+0xf90>
    140a:	12 01       	movw	r2, r4
    140c:	07 c0       	rjmp	.+14     	; 0x141c <main+0xefc>
    140e:	79 e1       	ldi	r23, 0x19	; 25
    1410:	67 2e       	mov	r6, r23
    1412:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1414:	8f e1       	ldi	r24, 0x1F	; 31
    1416:	68 16       	cp	r6, r24
    1418:	71 04       	cpc	r7, r1
    141a:	61 f4       	brne	.+24     	; 0x1434 <main+0xf14>
    141c:	c2 01       	movw	r24, r4
    141e:	82 19       	sub	r24, r2
    1420:	93 09       	sbc	r25, r3
    1422:	89 5e       	subi	r24, 0xE9	; 233
    1424:	93 40       	sbci	r25, 0x03	; 3
    1426:	0c f4       	brge	.+2      	; 0x142a <main+0xf0a>
    1428:	59 c1       	rjmp	.+690    	; 0x16dc <main+0x11bc>
    142a:	12 01       	movw	r2, r4
    142c:	07 c0       	rjmp	.+14     	; 0x143c <main+0xf1c>
    142e:	6a e1       	ldi	r22, 0x1A	; 26
    1430:	66 2e       	mov	r6, r22
    1432:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    1434:	b0 e2       	ldi	r27, 0x20	; 32
    1436:	6b 16       	cp	r6, r27
    1438:	71 04       	cpc	r7, r1
    143a:	61 f4       	brne	.+24     	; 0x1454 <main+0xf34>
    143c:	c2 01       	movw	r24, r4
    143e:	82 19       	sub	r24, r2
    1440:	93 09       	sbc	r25, r3
    1442:	81 5a       	subi	r24, 0xA1	; 161
    1444:	9f 40       	sbci	r25, 0x0F	; 15
    1446:	0c f4       	brge	.+2      	; 0x144a <main+0xf2a>
    1448:	55 c1       	rjmp	.+682    	; 0x16f4 <main+0x11d4>
    144a:	12 01       	movw	r2, r4
    144c:	07 c0       	rjmp	.+14     	; 0x145c <main+0xf3c>
    144e:	5b e1       	ldi	r21, 0x1B	; 27
    1450:	65 2e       	mov	r6, r21
    1452:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    1454:	31 e2       	ldi	r19, 0x21	; 33
    1456:	63 16       	cp	r6, r19
    1458:	71 04       	cpc	r7, r1
    145a:	61 f4       	brne	.+24     	; 0x1474 <main+0xf54>
    145c:	c2 01       	movw	r24, r4
    145e:	82 19       	sub	r24, r2
    1460:	93 09       	sbc	r25, r3
    1462:	85 36       	cpi	r24, 0x65	; 101
    1464:	91 05       	cpc	r25, r1
    1466:	0c f4       	brge	.+2      	; 0x146a <main+0xf4a>
    1468:	53 c1       	rjmp	.+678    	; 0x1710 <main+0x11f0>
    146a:	12 01       	movw	r2, r4
    146c:	07 c0       	rjmp	.+14     	; 0x147c <main+0xf5c>
    146e:	4c e1       	ldi	r20, 0x1C	; 28
    1470:	64 2e       	mov	r6, r20
    1472:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    1474:	42 e2       	ldi	r20, 0x22	; 34
    1476:	64 16       	cp	r6, r20
    1478:	71 04       	cpc	r7, r1
    147a:	61 f4       	brne	.+24     	; 0x1494 <main+0xf74>
    147c:	c2 01       	movw	r24, r4
    147e:	82 19       	sub	r24, r2
    1480:	93 09       	sbc	r25, r3
    1482:	81 5a       	subi	r24, 0xA1	; 161
    1484:	9f 40       	sbci	r25, 0x0F	; 15
    1486:	0c f4       	brge	.+2      	; 0x148a <main+0xf6a>
    1488:	55 c1       	rjmp	.+682    	; 0x1734 <main+0x1214>
    148a:	12 01       	movw	r2, r4
    148c:	07 c0       	rjmp	.+14     	; 0x149c <main+0xf7c>
    148e:	3d e1       	ldi	r19, 0x1D	; 29
    1490:	63 2e       	mov	r6, r19
    1492:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    1494:	83 e2       	ldi	r24, 0x23	; 35
    1496:	68 16       	cp	r6, r24
    1498:	71 04       	cpc	r7, r1
    149a:	69 f4       	brne	.+26     	; 0x14b6 <main+0xf96>
    149c:	c2 01       	movw	r24, r4
    149e:	82 19       	sub	r24, r2
    14a0:	93 09       	sbc	r25, r3
    14a2:	0b 97       	sbiw	r24, 0x0b	; 11
    14a4:	0c f4       	brge	.+2      	; 0x14a8 <main+0xf88>
    14a6:	53 c1       	rjmp	.+678    	; 0x174e <main+0x122e>
    14a8:	24 e2       	ldi	r18, 0x24	; 36
    14aa:	62 2e       	mov	r6, r18
    14ac:	71 2c       	mov	r7, r1
    14ae:	65 c1       	rjmp	.+714    	; 0x177a <main+0x125a>
    14b0:	9e e1       	ldi	r25, 0x1E	; 30
    14b2:	69 2e       	mov	r6, r25
    14b4:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    14b6:	f3 01       	movw	r30, r6
    14b8:	e4 32       	cpi	r30, 0x24	; 36
    14ba:	f1 05       	cpc	r31, r1
    14bc:	08 f0       	brcs	.+2      	; 0x14c0 <main+0xfa0>
    14be:	5d c1       	rjmp	.+698    	; 0x177a <main+0x125a>
    14c0:	ee 58       	subi	r30, 0x8E	; 142
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	ee 0f       	add	r30, r30
    14c6:	ff 1f       	adc	r31, r31
    14c8:	05 90       	lpm	r0, Z+
    14ca:	f4 91       	lpm	r31, Z+
    14cc:	e0 2d       	mov	r30, r0
    14ce:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    14d0:	80 91 96 03 	lds	r24, 0x0396
    14d4:	90 91 92 03 	lds	r25, 0x0392
    14d8:	20 91 94 03 	lds	r18, 0x0394
    14dc:	82 ff       	sbrs	r24, 2
    14de:	08 c0       	rjmp	.+16     	; 0x14f0 <main+0xfd0>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    14e0:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    14e2:	27 7f       	andi	r18, 0xF7	; 247
    14e4:	20 93 94 03 	sts	0x0394, r18
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    14e8:	90 62       	ori	r25, 0x20	; 32
    14ea:	90 93 92 03 	sts	0x0392, r25
    14ee:	45 c1       	rjmp	.+650    	; 0x177a <main+0x125a>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    14f0:	9f 7d       	andi	r25, 0xDF	; 223
    14f2:	90 93 92 03 	sts	0x0392, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    14f6:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    14f8:	28 60       	ori	r18, 0x08	; 8
    14fa:	20 93 94 03 	sts	0x0394, r18
						if(print0 == 1){
    14fe:	ad ad       	ldd	r26, Y+61	; 0x3d
    1500:	be ad       	ldd	r27, Y+62	; 0x3e
    1502:	11 97       	sbiw	r26, 0x01	; 1
    1504:	09 f0       	breq	.+2      	; 0x1508 <main+0xfe8>
    1506:	45 c0       	rjmp	.+138    	; 0x1592 <main+0x1072>
							OrangutanLCD::gotoXY(0,1);
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1510:	84 e4       	ldi	r24, 0x44	; 68
    1512:	93 e0       	ldi	r25, 0x03	; 3
    1514:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
    1518:	1e ae       	std	Y+62, r1	; 0x3e
    151a:	1d ae       	std	Y+61, r1	; 0x3d
    151c:	3a c0       	rjmp	.+116    	; 0x1592 <main+0x1072>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    151e:	20 91 94 03 	lds	r18, 0x0394
    1522:	32 2f       	mov	r19, r18
    1524:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    1526:	c2 01       	movw	r24, r4
    1528:	68 ec       	ldi	r22, 0xC8	; 200
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__divmodhi4>
    1530:	84 36       	cpi	r24, 0x64	; 100
    1532:	91 05       	cpc	r25, r1
    1534:	24 f4       	brge	.+8      	; 0x153e <main+0x101e>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1536:	2c 7f       	andi	r18, 0xFC	; 252
    1538:	20 93 94 03 	sts	0x0394, r18
    153c:	03 c0       	rjmp	.+6      	; 0x1544 <main+0x1024>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    153e:	32 60       	ori	r19, 0x02	; 2
    1540:	30 93 94 03 	sts	0x0394, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    1544:	80 91 92 03 	lds	r24, 0x0392
    1548:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    154a:	84 60       	ori	r24, 0x04	; 4
    154c:	80 93 92 03 	sts	0x0392, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1550:	80 91 94 03 	lds	r24, 0x0394
    1554:	8b 7f       	andi	r24, 0xFB	; 251
    1556:	80 93 94 03 	sts	0x0394, r24
    155a:	21 e0       	ldi	r18, 0x01	; 1
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	3a 8b       	std	Y+18, r19	; 0x12
    1560:	29 8b       	std	Y+17, r18	; 0x11
    1562:	0b c1       	rjmp	.+534    	; 0x177a <main+0x125a>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1564:	80 91 94 03 	lds	r24, 0x0394
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1568:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    156a:	86 61       	ori	r24, 0x16	; 22
    156c:	80 93 94 03 	sts	0x0394, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1570:	80 91 92 03 	lds	r24, 0x0392
    1574:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1576:	8b 7f       	andi	r24, 0xFB	; 251
    1578:	80 93 92 03 	sts	0x0392, r24
    157c:	fc c0       	rjmp	.+504    	; 0x1776 <main+0x1256>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    157e:	80 91 92 03 	lds	r24, 0x0392
    1582:	8f 7d       	andi	r24, 0xDF	; 223
    1584:	80 93 92 03 	sts	0x0392, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1588:	80 91 94 03 	lds	r24, 0x0394
    158c:	88 60       	ori	r24, 0x08	; 8
    158e:	80 93 94 03 	sts	0x0394, r24
    1592:	18 a2       	std	Y+32, r1	; 0x20
    1594:	1f 8e       	std	Y+31, r1	; 0x1f
    1596:	f1 c0       	rjmp	.+482    	; 0x177a <main+0x125a>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1598:	80 91 94 03 	lds	r24, 0x0394
    159c:	8f 7e       	andi	r24, 0xEF	; 239
    159e:	80 93 94 03 	sts	0x0394, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    15a2:	80 91 92 03 	lds	r24, 0x0392
    15a6:	80 62       	ori	r24, 0x20	; 32
    15a8:	80 93 92 03 	sts	0x0392, r24
    15ac:	e6 c0       	rjmp	.+460    	; 0x177a <main+0x125a>
				//*********************************************
					break;
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    15ae:	80 91 92 03 	lds	r24, 0x0392
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    15b2:	80 63       	ori	r24, 0x30	; 48
    15b4:	80 93 92 03 	sts	0x0392, r24
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	98 a3       	std	Y+32, r25	; 0x20
    15be:	8f 8f       	std	Y+31, r24	; 0x1f
    15c0:	dc c0       	rjmp	.+440    	; 0x177a <main+0x125a>
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    15c2:	80 91 93 03 	lds	r24, 0x0393
    15c6:	81 60       	ori	r24, 0x01	; 1
    15c8:	80 93 93 03 	sts	0x0393, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    15cc:	80 91 92 03 	lds	r24, 0x0392
    15d0:	8f 77       	andi	r24, 0x7F	; 127
    15d2:	80 93 92 03 	sts	0x0392, r24
    15d6:	dd cf       	rjmp	.-70     	; 0x1592 <main+0x1072>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    15d8:	80 91 94 03 	lds	r24, 0x0394
    15dc:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    15de:	8f 7d       	andi	r24, 0xDF	; 223
    15e0:	80 93 94 03 	sts	0x0394, r24
    15e4:	a1 e0       	ldi	r26, 0x01	; 1
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	b8 8f       	std	Y+24, r27	; 0x18
    15ea:	af 8b       	std	Y+23, r26	; 0x17
    15ec:	c6 c0       	rjmp	.+396    	; 0x177a <main+0x125a>
					break;
				case CLEAN1_1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    15ee:	80 91 92 03 	lds	r24, 0x0392
    15f2:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    15f4:	8f 7e       	andi	r24, 0xEF	; 239
    15f6:	80 93 92 03 	sts	0x0392, r24
    15fa:	2b c0       	rjmp	.+86     	; 0x1652 <main+0x1132>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    15fc:	80 91 92 03 	lds	r24, 0x0392
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1600:	80 63       	ori	r24, 0x30	; 48
    1602:	36 c0       	rjmp	.+108    	; 0x1670 <main+0x1150>
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    1604:	80 91 92 03 	lds	r24, 0x0392
    1608:	8f 77       	andi	r24, 0x7F	; 127
    160a:	80 93 92 03 	sts	0x0392, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    160e:	80 91 94 03 	lds	r24, 0x0394
    1612:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    1614:	8f 7d       	andi	r24, 0xDF	; 223
    1616:	80 93 94 03 	sts	0x0394, r24
    161a:	18 a2       	std	Y+32, r1	; 0x20
    161c:	1f 8e       	std	Y+31, r1	; 0x1f
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	98 8f       	std	Y+24, r25	; 0x18
    1624:	8f 8b       	std	Y+23, r24	; 0x17
    1626:	a9 c0       	rjmp	.+338    	; 0x177a <main+0x125a>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1628:	80 91 94 03 	lds	r24, 0x0394
    162c:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    162e:	80 62       	ori	r24, 0x20	; 32
    1630:	80 93 94 03 	sts	0x0394, r24
    1634:	18 a2       	std	Y+32, r1	; 0x20
    1636:	1f 8e       	std	Y+31, r1	; 0x1f
    1638:	18 8e       	std	Y+24, r1	; 0x18
    163a:	1f 8a       	std	Y+23, r1	; 0x17
    163c:	9e c0       	rjmp	.+316    	; 0x177a <main+0x125a>
				
					break;
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    163e:	80 91 92 03 	lds	r24, 0x0392
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1642:	80 63       	ori	r24, 0x30	; 48
    1644:	80 93 92 03 	sts	0x0392, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1648:	80 91 93 03 	lds	r24, 0x0393
    164c:	8e 7f       	andi	r24, 0xFE	; 254
    164e:	80 93 93 03 	sts	0x0393, r24
    1652:	21 e0       	ldi	r18, 0x01	; 1
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	38 a3       	std	Y+32, r19	; 0x20
    1658:	2f 8f       	std	Y+31, r18	; 0x1f
    165a:	8f c0       	rjmp	.+286    	; 0x177a <main+0x125a>
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    165c:	80 91 95 03 	lds	r24, 0x0395
    1660:	87 7f       	andi	r24, 0xF7	; 247
    1662:	80 93 95 03 	sts	0x0395, r24
    1666:	95 cf       	rjmp	.-214    	; 0x1592 <main+0x1072>
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1668:	80 91 92 03 	lds	r24, 0x0392
    166c:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    166e:	80 62       	ori	r24, 0x20	; 32
    1670:	80 93 92 03 	sts	0x0392, r24
    1674:	41 e0       	ldi	r20, 0x01	; 1
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	58 a3       	std	Y+32, r21	; 0x20
    167a:	4f 8f       	std	Y+31, r20	; 0x1f
    167c:	7e c0       	rjmp	.+252    	; 0x177a <main+0x125a>
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    167e:	80 91 95 03 	lds	r24, 0x0395
    1682:	88 60       	ori	r24, 0x08	; 8
    1684:	10 c0       	rjmp	.+32     	; 0x16a6 <main+0x1186>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    1686:	80 91 93 03 	lds	r24, 0x0393
    168a:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    168c:	8f 7d       	andi	r24, 0xDF	; 223
    168e:	80 93 93 03 	sts	0x0393, r24
    1692:	18 a2       	std	Y+32, r1	; 0x20
    1694:	1f 8e       	std	Y+31, r1	; 0x1f
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	9a 87       	std	Y+10, r25	; 0x0a
    169c:	89 87       	std	Y+9, r24	; 0x09
    169e:	6d c0       	rjmp	.+218    	; 0x177a <main+0x125a>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    16a0:	80 91 95 03 	lds	r24, 0x0395
    16a4:	8d 7f       	andi	r24, 0xFD	; 253
    16a6:	80 93 95 03 	sts	0x0395, r24
    16aa:	67 c0       	rjmp	.+206    	; 0x177a <main+0x125a>
					break;
				case DRY2:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    16ac:	80 91 92 03 	lds	r24, 0x0392
    16b0:	80 62       	ori	r24, 0x20	; 32
    16b2:	80 93 92 03 	sts	0x0392, r24
    16b6:	a1 e0       	ldi	r26, 0x01	; 1
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	b8 a3       	std	Y+32, r27	; 0x20
    16bc:	af 8f       	std	Y+31, r26	; 0x1f
    16be:	5d c0       	rjmp	.+186    	; 0x177a <main+0x125a>
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    16c0:	80 91 93 03 	lds	r24, 0x0393
    16c4:	8f 7b       	andi	r24, 0xBF	; 191
    16c6:	80 93 93 03 	sts	0x0393, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    16ca:	80 91 95 03 	lds	r24, 0x0395
    16ce:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    16d0:	8b 7f       	andi	r24, 0xFB	; 251
    16d2:	80 93 95 03 	sts	0x0395, r24
    16d6:	1a 86       	std	Y+10, r1	; 0x0a
    16d8:	19 86       	std	Y+9, r1	; 0x09
    16da:	4f c0       	rjmp	.+158    	; 0x177a <main+0x125a>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    16dc:	80 91 94 03 	lds	r24, 0x0394
    16e0:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    16e2:	80 61       	ori	r24, 0x10	; 16
    16e4:	80 93 94 03 	sts	0x0394, r24
    16e8:	18 a2       	std	Y+32, r1	; 0x20
    16ea:	1f 8e       	std	Y+31, r1	; 0x1f
    16ec:	8f e1       	ldi	r24, 0x1F	; 31
    16ee:	68 2e       	mov	r6, r24
    16f0:	71 2c       	mov	r7, r1
    16f2:	43 c0       	rjmp	.+134    	; 0x177a <main+0x125a>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    16f4:	80 91 92 03 	lds	r24, 0x0392
    16f8:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    16fa:	80 62       	ori	r24, 0x20	; 32
    16fc:	80 93 92 03 	sts	0x0392, r24
    1700:	21 e0       	ldi	r18, 0x01	; 1
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	38 a3       	std	Y+32, r19	; 0x20
    1706:	2f 8f       	std	Y+31, r18	; 0x1f
    1708:	00 e2       	ldi	r16, 0x20	; 32
    170a:	60 2e       	mov	r6, r16
    170c:	71 2c       	mov	r7, r1
    170e:	35 c0       	rjmp	.+106    	; 0x177a <main+0x125a>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1710:	80 91 92 03 	lds	r24, 0x0392
    1714:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1716:	84 60       	ori	r24, 0x04	; 4
    1718:	80 93 92 03 	sts	0x0392, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    171c:	80 91 94 03 	lds	r24, 0x0394
    1720:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1722:	8f 7e       	andi	r24, 0xEF	; 239
    1724:	80 93 94 03 	sts	0x0394, r24
    1728:	18 a2       	std	Y+32, r1	; 0x20
    172a:	1f 8e       	std	Y+31, r1	; 0x1f
    172c:	11 e2       	ldi	r17, 0x21	; 33
    172e:	61 2e       	mov	r6, r17
    1730:	71 2c       	mov	r7, r1
    1732:	23 c0       	rjmp	.+70     	; 0x177a <main+0x125a>
					break;
    1734:	b2 e2       	ldi	r27, 0x22	; 34
    1736:	6b 2e       	mov	r6, r27
    1738:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    173a:	80 91 92 03 	lds	r24, 0x0392
    173e:	8d 7f       	andi	r24, 0xFD	; 253
    1740:	80 93 92 03 	sts	0x0392, r24
    1744:	41 e0       	ldi	r20, 0x01	; 1
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	5a 8b       	std	Y+18, r21	; 0x12
    174a:	49 8b       	std	Y+17, r20	; 0x11
    174c:	16 c0       	rjmp	.+44     	; 0x177a <main+0x125a>
					plateLoadMotor = 1;
					break;
    174e:	a3 e2       	ldi	r26, 0x23	; 35
    1750:	6a 2e       	mov	r6, r26
    1752:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1754:	80 91 92 03 	lds	r24, 0x0392
    1758:	8b 7f       	andi	r24, 0xFB	; 251
    175a:	80 93 92 03 	sts	0x0392, r24
					if(print35 == 1){
    175e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1760:	9c ad       	ldd	r25, Y+60	; 0x3c
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	41 f4       	brne	.+16     	; 0x1776 <main+0x1256>
						OrangutanLCD::clear();
    1766:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    176a:	82 e5       	ldi	r24, 0x52	; 82
    176c:	93 e0       	ldi	r25, 0x03	; 3
    176e:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
    1772:	1c ae       	std	Y+60, r1	; 0x3c
    1774:	1b ae       	std	Y+59, r1	; 0x3b
    1776:	1a 8a       	std	Y+18, r1	; 0x12
    1778:	19 8a       	std	Y+17, r1	; 0x11
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    177a:	ad b7       	in	r26, 0x3d	; 61
    177c:	be b7       	in	r27, 0x3e	; 62
    177e:	52 97       	sbiw	r26, 0x12	; 18
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	be bf       	out	0x3e, r27	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	ad bf       	out	0x3d, r26	; 61
    178a:	ed b7       	in	r30, 0x3d	; 61
    178c:	fe b7       	in	r31, 0x3e	; 62
    178e:	31 96       	adiw	r30, 0x01	; 1
    1790:	82 e0       	ldi	r24, 0x02	; 2
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	12 96       	adiw	r26, 0x02	; 2
    1796:	9c 93       	st	X, r25
    1798:	8e 93       	st	-X, r24
    179a:	11 97       	sbiw	r26, 0x01	; 1
    179c:	93 83       	std	Z+3, r25	; 0x03
    179e:	82 83       	std	Z+2, r24	; 0x02
    17a0:	95 83       	std	Z+5, r25	; 0x05
    17a2:	84 83       	std	Z+4, r24	; 0x04
    17a4:	97 83       	std	Z+7, r25	; 0x07
    17a6:	86 83       	std	Z+6, r24	; 0x06
    17a8:	21 e0       	ldi	r18, 0x01	; 1
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	31 87       	std	Z+9, r19	; 0x09
    17ae:	20 87       	std	Z+8, r18	; 0x08
    17b0:	33 87       	std	Z+11, r19	; 0x0b
    17b2:	22 87       	std	Z+10, r18	; 0x0a
    17b4:	35 87       	std	Z+13, r19	; 0x0d
    17b6:	24 87       	std	Z+12, r18	; 0x0c
    17b8:	37 87       	std	Z+15, r19	; 0x0f
    17ba:	26 87       	std	Z+14, r18	; 0x0e
    17bc:	31 8b       	std	Z+17, r19	; 0x11
    17be:	20 8b       	std	Z+16, r18	; 0x10
    17c0:	c2 01       	movw	r24, r4
    17c2:	b1 01       	movw	r22, r2
    17c4:	21 96       	adiw	r28, 0x01	; 1
    17c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    17c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    17ca:	21 97       	sbiw	r28, 0x01	; 1
    17cc:	29 89       	ldd	r18, Y+17	; 0x11
    17ce:	3a 89       	ldd	r19, Y+18	; 0x12
    17d0:	0f 8d       	ldd	r16, Y+31	; 0x1f
    17d2:	18 a1       	ldd	r17, Y+32	; 0x20
    17d4:	ef 88       	ldd	r14, Y+23	; 0x17
    17d6:	f8 8c       	ldd	r15, Y+24	; 0x18
    17d8:	cc 24       	eor	r12, r12
    17da:	dd 24       	eor	r13, r13
    17dc:	a9 84       	ldd	r10, Y+9	; 0x09
    17de:	ba 84       	ldd	r11, Y+10	; 0x0a
    17e0:	f2 e0       	ldi	r31, 0x02	; 2
    17e2:	8f 2e       	mov	r8, r31
    17e4:	91 2c       	mov	r9, r1
    17e6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    17ea:	4d b7       	in	r20, 0x3d	; 61
    17ec:	5e b7       	in	r21, 0x3e	; 62
    17ee:	4e 5e       	subi	r20, 0xEE	; 238
    17f0:	5f 4f       	sbci	r21, 0xFF	; 255
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	5e bf       	out	0x3e, r21	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	4d bf       	out	0x3d, r20	; 61
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("FIRST B");
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1804:	54 e2       	ldi	r21, 0x24	; 36
    1806:	65 16       	cp	r6, r21
    1808:	71 04       	cpc	r7, r1
    180a:	11 f4       	brne	.+4      	; 0x1810 <main+0x12f0>
    180c:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <main+0x2c66>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    1810:	08 94       	sec
    1812:	41 1c       	adc	r4, r1
    1814:	51 1c       	adc	r5, r1
    1816:	7b cc       	rjmp	.-1802   	; 0x110e <main+0xbee>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    181e:	88 23       	and	r24, r24
    1820:	11 f0       	breq	.+4      	; 0x1826 <main+0x1306>
    1822:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <main+0x2cc6>
			OrangutanLCD::gotoXY(7,0);
    1826:	87 e0       	ldi	r24, 0x07	; 7
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("SECOND B");
    182e:	8f e5       	ldi	r24, 0x5F	; 95
    1830:	93 e0       	ldi	r25, 0x03	; 3
    1832:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
			OrangutanLCD::print("DEBUG");
    1836:	87 e3       	ldi	r24, 0x37	; 55
    1838:	93 e0       	ldi	r25, 0x03	; 3
    183a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    183e:	80 91 92 03 	lds	r24, 0x0392
    1842:	80 62       	ori	r24, 0x20	; 32
    1844:	80 93 92 03 	sts	0x0392, r24
    1848:	22 24       	eor	r2, r2
    184a:	33 24       	eor	r3, r3
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	98 af       	std	Y+56, r25	; 0x38
    1852:	8f ab       	std	Y+55, r24	; 0x37
    1854:	9e a7       	std	Y+46, r25	; 0x2e
    1856:	8d a7       	std	Y+45, r24	; 0x2d
    1858:	1e a2       	std	Y+38, r1	; 0x26
    185a:	1d a2       	std	Y+37, r1	; 0x25
    185c:	9e 8f       	std	Y+30, r25	; 0x1e
    185e:	8d 8f       	std	Y+29, r24	; 0x1d
    1860:	18 aa       	std	Y+48, r1	; 0x30
    1862:	1f a6       	std	Y+47, r1	; 0x2f
    1864:	18 8a       	std	Y+16, r1	; 0x10
    1866:	1f 86       	std	Y+15, r1	; 0x0f
    1868:	18 86       	std	Y+8, r1	; 0x08
    186a:	1f 82       	std	Y+7, r1	; 0x07
    186c:	66 24       	eor	r6, r6
    186e:	77 24       	eor	r7, r7
    1870:	44 24       	eor	r4, r4
    1872:	55 24       	eor	r5, r5
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1874:	84 e4       	ldi	r24, 0x44	; 68
    1876:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1880:	85 e4       	ldi	r24, 0x45	; 69
    1882:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1886:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z11i2c_readAckv>
    188a:	80 93 96 03 	sts	0x0396, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    188e:	0e 94 92 19 	call	0x3324	; 0x3324 <_Z11i2c_readNakv>
    1892:	80 93 97 03 	sts	0x0397, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1896:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Z8i2c_stopv>
				
				if(state != INIT){
    189a:	61 14       	cp	r6, r1
    189c:	71 04       	cpc	r7, r1
    189e:	79 f0       	breq	.+30     	; 0x18be <main+0x139e>
					OrangutanLCD::gotoXY(0,1);
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    18a8:	8d e3       	ldi	r24, 0x3D	; 61
    18aa:	93 e0       	ldi	r25, 0x03	; 3
    18ac:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
    18b0:	b3 01       	movw	r22, r6
    18b2:	88 27       	eor	r24, r24
    18b4:	77 fd       	sbrc	r23, 7
    18b6:	80 95       	com	r24
    18b8:	98 2f       	mov	r25, r24
    18ba:	0e 94 44 1c 	call	0x3888	; 0x3888 <_ZN12OrangutanLCD5printEl>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    18be:	c2 01       	movw	r24, r4
    18c0:	be 01       	movw	r22, r28
    18c2:	6f 5f       	subi	r22, 0xFF	; 255
    18c4:	7f 4f       	sbci	r23, 0xFF	; 255
    18c6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    18ca:	61 14       	cp	r6, r1
    18cc:	71 04       	cpc	r7, r1
    18ce:	21 f4       	brne	.+8      	; 0x18d8 <main+0x13b8>
    18d0:	88 23       	and	r24, r24
    18d2:	e1 f1       	breq	.+120    	; 0x194c <main+0x142c>
    18d4:	12 01       	movw	r2, r4
    18d6:	04 c0       	rjmp	.+8      	; 0x18e0 <main+0x13c0>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    18d8:	91 e0       	ldi	r25, 0x01	; 1
    18da:	69 16       	cp	r6, r25
    18dc:	71 04       	cpc	r7, r1
    18de:	41 f4       	brne	.+16     	; 0x18f0 <main+0x13d0>
    18e0:	c2 01       	movw	r24, r4
    18e2:	82 19       	sub	r24, r2
    18e4:	93 09       	sbc	r25, r3
    18e6:	81 5a       	subi	r24, 0xA1	; 161
    18e8:	9f 40       	sbci	r25, 0x0F	; 15
    18ea:	ec f1       	brlt	.+122    	; 0x1966 <main+0x1446>
    18ec:	12 01       	movw	r2, r4
    18ee:	04 c0       	rjmp	.+8      	; 0x18f8 <main+0x13d8>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    18f0:	b2 e0       	ldi	r27, 0x02	; 2
    18f2:	6b 16       	cp	r6, r27
    18f4:	71 04       	cpc	r7, r1
    18f6:	49 f4       	brne	.+18     	; 0x190a <main+0x13ea>
    18f8:	c2 01       	movw	r24, r4
    18fa:	82 19       	sub	r24, r2
    18fc:	93 09       	sbc	r25, r3
    18fe:	85 36       	cpi	r24, 0x65	; 101
    1900:	91 05       	cpc	r25, r1
    1902:	0c f4       	brge	.+2      	; 0x1906 <main+0x13e6>
    1904:	40 c0       	rjmp	.+128    	; 0x1986 <main+0x1466>
    1906:	12 01       	movw	r2, r4
    1908:	04 c0       	rjmp	.+8      	; 0x1912 <main+0x13f2>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    190a:	23 e0       	ldi	r18, 0x03	; 3
    190c:	62 16       	cp	r6, r18
    190e:	71 04       	cpc	r7, r1
    1910:	31 f4       	brne	.+12     	; 0x191e <main+0x13fe>
    1912:	80 91 96 03 	lds	r24, 0x0396
    1916:	81 fd       	sbrc	r24, 1
    1918:	46 c0       	rjmp	.+140    	; 0x19a6 <main+0x1486>
    191a:	12 01       	movw	r2, r4
    191c:	04 c0       	rjmp	.+8      	; 0x1926 <main+0x1406>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    191e:	34 e0       	ldi	r19, 0x04	; 4
    1920:	63 16       	cp	r6, r19
    1922:	71 04       	cpc	r7, r1
    1924:	31 f4       	brne	.+12     	; 0x1932 <main+0x1412>
    1926:	80 91 96 03 	lds	r24, 0x0396
    192a:	83 fd       	sbrc	r24, 3
    192c:	4c c0       	rjmp	.+152    	; 0x19c6 <main+0x14a6>
    192e:	12 01       	movw	r2, r4
    1930:	04 c0       	rjmp	.+8      	; 0x193a <main+0x141a>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    1932:	45 e0       	ldi	r20, 0x05	; 5
    1934:	64 16       	cp	r6, r20
    1936:	71 04       	cpc	r7, r1
    1938:	49 f4       	brne	.+18     	; 0x194c <main+0x142c>
    193a:	c2 01       	movw	r24, r4
    193c:	82 19       	sub	r24, r2
    193e:	93 09       	sbc	r25, r3
    1940:	85 36       	cpi	r24, 0x65	; 101
    1942:	91 05       	cpc	r25, r1
    1944:	0c f4       	brge	.+2      	; 0x1948 <main+0x1428>
    1946:	4f c0       	rjmp	.+158    	; 0x19e6 <main+0x14c6>
    1948:	12 01       	movw	r2, r4
    194a:	04 c0       	rjmp	.+8      	; 0x1954 <main+0x1434>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    194c:	56 e0       	ldi	r21, 0x06	; 6
    194e:	65 16       	cp	r6, r21
    1950:	71 04       	cpc	r7, r1
    1952:	61 f4       	brne	.+24     	; 0x196c <main+0x144c>
    1954:	c2 01       	movw	r24, r4
    1956:	82 19       	sub	r24, r2
    1958:	93 09       	sbc	r25, r3
    195a:	81 5a       	subi	r24, 0xA1	; 161
    195c:	9f 40       	sbci	r25, 0x0F	; 15
    195e:	0c f4       	brge	.+2      	; 0x1962 <main+0x1442>
    1960:	52 c0       	rjmp	.+164    	; 0x1a06 <main+0x14e6>
    1962:	12 01       	movw	r2, r4
    1964:	07 c0       	rjmp	.+14     	; 0x1974 <main+0x1454>
    1966:	e1 e0       	ldi	r30, 0x01	; 1
    1968:	6e 2e       	mov	r6, r30
    196a:	71 2c       	mov	r7, r1
					state = B2SET;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    196c:	bf e0       	ldi	r27, 0x0F	; 15
    196e:	6b 16       	cp	r6, r27
    1970:	71 04       	cpc	r7, r1
    1972:	61 f4       	brne	.+24     	; 0x198c <main+0x146c>
    1974:	c2 01       	movw	r24, r4
    1976:	82 19       	sub	r24, r2
    1978:	93 09       	sbc	r25, r3
    197a:	85 36       	cpi	r24, 0x65	; 101
    197c:	91 05       	cpc	r25, r1
    197e:	0c f4       	brge	.+2      	; 0x1982 <main+0x1462>
    1980:	52 c0       	rjmp	.+164    	; 0x1a26 <main+0x1506>
    1982:	12 01       	movw	r2, r4
    1984:	07 c0       	rjmp	.+14     	; 0x1994 <main+0x1474>
    1986:	72 e0       	ldi	r23, 0x02	; 2
    1988:	67 2e       	mov	r6, r23
    198a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    198c:	20 e1       	ldi	r18, 0x10	; 16
    198e:	62 16       	cp	r6, r18
    1990:	71 04       	cpc	r7, r1
    1992:	61 f4       	brne	.+24     	; 0x19ac <main+0x148c>
    1994:	c2 01       	movw	r24, r4
    1996:	82 19       	sub	r24, r2
    1998:	93 09       	sbc	r25, r3
    199a:	85 36       	cpi	r24, 0x65	; 101
    199c:	91 05       	cpc	r25, r1
    199e:	0c f4       	brge	.+2      	; 0x19a2 <main+0x1482>
    19a0:	52 c0       	rjmp	.+164    	; 0x1a46 <main+0x1526>
    19a2:	12 01       	movw	r2, r4
    19a4:	07 c0       	rjmp	.+14     	; 0x19b4 <main+0x1494>
    19a6:	63 e0       	ldi	r22, 0x03	; 3
    19a8:	66 2e       	mov	r6, r22
    19aa:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    19ac:	31 e1       	ldi	r19, 0x11	; 17
    19ae:	63 16       	cp	r6, r19
    19b0:	71 04       	cpc	r7, r1
    19b2:	61 f4       	brne	.+24     	; 0x19cc <main+0x14ac>
    19b4:	c2 01       	movw	r24, r4
    19b6:	82 19       	sub	r24, r2
    19b8:	93 09       	sbc	r25, r3
    19ba:	81 5d       	subi	r24, 0xD1	; 209
    19bc:	97 40       	sbci	r25, 0x07	; 7
    19be:	0c f4       	brge	.+2      	; 0x19c2 <main+0x14a2>
    19c0:	52 c0       	rjmp	.+164    	; 0x1a66 <main+0x1546>
    19c2:	12 01       	movw	r2, r4
    19c4:	07 c0       	rjmp	.+14     	; 0x19d4 <main+0x14b4>
    19c6:	54 e0       	ldi	r21, 0x04	; 4
    19c8:	65 2e       	mov	r6, r21
    19ca:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    19cc:	52 e1       	ldi	r21, 0x12	; 18
    19ce:	65 16       	cp	r6, r21
    19d0:	71 04       	cpc	r7, r1
    19d2:	61 f4       	brne	.+24     	; 0x19ec <main+0x14cc>
    19d4:	c2 01       	movw	r24, r4
    19d6:	82 19       	sub	r24, r2
    19d8:	93 09       	sbc	r25, r3
    19da:	85 36       	cpi	r24, 0x65	; 101
    19dc:	91 05       	cpc	r25, r1
    19de:	0c f4       	brge	.+2      	; 0x19e2 <main+0x14c2>
    19e0:	52 c0       	rjmp	.+164    	; 0x1a86 <main+0x1566>
    19e2:	12 01       	movw	r2, r4
    19e4:	07 c0       	rjmp	.+14     	; 0x19f4 <main+0x14d4>
    19e6:	45 e0       	ldi	r20, 0x05	; 5
    19e8:	64 2e       	mov	r6, r20
    19ea:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    19ec:	83 e1       	ldi	r24, 0x13	; 19
    19ee:	68 16       	cp	r6, r24
    19f0:	71 04       	cpc	r7, r1
    19f2:	61 f4       	brne	.+24     	; 0x1a0c <main+0x14ec>
    19f4:	c2 01       	movw	r24, r4
    19f6:	82 19       	sub	r24, r2
    19f8:	93 09       	sbc	r25, r3
    19fa:	81 5d       	subi	r24, 0xD1	; 209
    19fc:	97 40       	sbci	r25, 0x07	; 7
    19fe:	0c f4       	brge	.+2      	; 0x1a02 <main+0x14e2>
    1a00:	52 c0       	rjmp	.+164    	; 0x1aa6 <main+0x1586>
    1a02:	12 01       	movw	r2, r4
    1a04:	07 c0       	rjmp	.+14     	; 0x1a14 <main+0x14f4>
    1a06:	36 e0       	ldi	r19, 0x06	; 6
    1a08:	63 2e       	mov	r6, r19
    1a0a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    1a0c:	b4 e1       	ldi	r27, 0x14	; 20
    1a0e:	6b 16       	cp	r6, r27
    1a10:	71 04       	cpc	r7, r1
    1a12:	61 f4       	brne	.+24     	; 0x1a2c <main+0x150c>
    1a14:	c2 01       	movw	r24, r4
    1a16:	82 19       	sub	r24, r2
    1a18:	93 09       	sbc	r25, r3
    1a1a:	85 36       	cpi	r24, 0x65	; 101
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	0c f4       	brge	.+2      	; 0x1a22 <main+0x1502>
    1a20:	50 c0       	rjmp	.+160    	; 0x1ac2 <main+0x15a2>
    1a22:	12 01       	movw	r2, r4
    1a24:	07 c0       	rjmp	.+14     	; 0x1a34 <main+0x1514>
    1a26:	2f e0       	ldi	r18, 0x0F	; 15
    1a28:	62 2e       	mov	r6, r18
    1a2a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    1a2c:	25 e1       	ldi	r18, 0x15	; 21
    1a2e:	62 16       	cp	r6, r18
    1a30:	71 04       	cpc	r7, r1
    1a32:	61 f4       	brne	.+24     	; 0x1a4c <main+0x152c>
    1a34:	c2 01       	movw	r24, r4
    1a36:	82 19       	sub	r24, r2
    1a38:	93 09       	sbc	r25, r3
    1a3a:	81 5d       	subi	r24, 0xD1	; 209
    1a3c:	97 40       	sbci	r25, 0x07	; 7
    1a3e:	0c f4       	brge	.+2      	; 0x1a42 <main+0x1522>
    1a40:	51 c0       	rjmp	.+162    	; 0x1ae4 <main+0x15c4>
    1a42:	12 01       	movw	r2, r4
    1a44:	07 c0       	rjmp	.+14     	; 0x1a54 <main+0x1534>
    1a46:	90 e1       	ldi	r25, 0x10	; 16
    1a48:	69 2e       	mov	r6, r25
    1a4a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    1a4c:	46 e1       	ldi	r20, 0x16	; 22
    1a4e:	64 16       	cp	r6, r20
    1a50:	71 04       	cpc	r7, r1
    1a52:	61 f4       	brne	.+24     	; 0x1a6c <main+0x154c>
    1a54:	c2 01       	movw	r24, r4
    1a56:	82 19       	sub	r24, r2
    1a58:	93 09       	sbc	r25, r3
    1a5a:	85 36       	cpi	r24, 0x65	; 101
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	0c f4       	brge	.+2      	; 0x1a62 <main+0x1542>
    1a60:	53 c0       	rjmp	.+166    	; 0x1b08 <main+0x15e8>
    1a62:	12 01       	movw	r2, r4
    1a64:	07 c0       	rjmp	.+14     	; 0x1a74 <main+0x1554>
    1a66:	81 e1       	ldi	r24, 0x11	; 17
    1a68:	68 2e       	mov	r6, r24
    1a6a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1a6c:	57 e1       	ldi	r21, 0x17	; 23
    1a6e:	65 16       	cp	r6, r21
    1a70:	71 04       	cpc	r7, r1
    1a72:	61 f4       	brne	.+24     	; 0x1a8c <main+0x156c>
    1a74:	c2 01       	movw	r24, r4
    1a76:	82 19       	sub	r24, r2
    1a78:	93 09       	sbc	r25, r3
    1a7a:	81 5a       	subi	r24, 0xA1	; 161
    1a7c:	9f 40       	sbci	r25, 0x0F	; 15
    1a7e:	0c f4       	brge	.+2      	; 0x1a82 <main+0x1562>
    1a80:	53 c0       	rjmp	.+166    	; 0x1b28 <main+0x1608>
    1a82:	12 01       	movw	r2, r4
    1a84:	07 c0       	rjmp	.+14     	; 0x1a94 <main+0x1574>
    1a86:	02 e1       	ldi	r16, 0x12	; 18
    1a88:	60 2e       	mov	r6, r16
    1a8a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    1a8c:	b8 e1       	ldi	r27, 0x18	; 24
    1a8e:	6b 16       	cp	r6, r27
    1a90:	71 04       	cpc	r7, r1
    1a92:	61 f4       	brne	.+24     	; 0x1aac <main+0x158c>
    1a94:	c2 01       	movw	r24, r4
    1a96:	82 19       	sub	r24, r2
    1a98:	93 09       	sbc	r25, r3
    1a9a:	85 36       	cpi	r24, 0x65	; 101
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	0c f4       	brge	.+2      	; 0x1aa2 <main+0x1582>
    1aa0:	51 c0       	rjmp	.+162    	; 0x1b44 <main+0x1624>
    1aa2:	12 01       	movw	r2, r4
    1aa4:	07 c0       	rjmp	.+14     	; 0x1ab4 <main+0x1594>
    1aa6:	13 e1       	ldi	r17, 0x13	; 19
    1aa8:	61 2e       	mov	r6, r17
    1aaa:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    1aac:	29 e1       	ldi	r18, 0x19	; 25
    1aae:	62 16       	cp	r6, r18
    1ab0:	71 04       	cpc	r7, r1
    1ab2:	51 f4       	brne	.+20     	; 0x1ac8 <main+0x15a8>
    1ab4:	c2 01       	movw	r24, r4
    1ab6:	82 19       	sub	r24, r2
    1ab8:	93 09       	sbc	r25, r3
    1aba:	81 5a       	subi	r24, 0xA1	; 161
    1abc:	9f 40       	sbci	r25, 0x0F	; 15
    1abe:	44 f4       	brge	.+16     	; 0x1ad0 <main+0x15b0>
    1ac0:	4e c0       	rjmp	.+156    	; 0x1b5e <main+0x163e>
    1ac2:	b4 e1       	ldi	r27, 0x14	; 20
    1ac4:	6b 2e       	mov	r6, r27
    1ac6:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    1ac8:	4a e1       	ldi	r20, 0x1A	; 26
    1aca:	64 16       	cp	r6, r20
    1acc:	71 04       	cpc	r7, r1
    1ace:	69 f4       	brne	.+26     	; 0x1aea <main+0x15ca>
    1ad0:	c2 01       	movw	r24, r4
    1ad2:	82 19       	sub	r24, r2
    1ad4:	93 09       	sbc	r25, r3
    1ad6:	81 5a       	subi	r24, 0xA1	; 161
    1ad8:	9f 40       	sbci	r25, 0x0F	; 15
    1ada:	0c f4       	brge	.+2      	; 0x1ade <main+0x15be>
    1adc:	4d c0       	rjmp	.+154    	; 0x1b78 <main+0x1658>
    1ade:	58 aa       	std	Y+48, r5	; 0x30
    1ae0:	4f a6       	std	Y+47, r4	; 0x2f
    1ae2:	07 c0       	rjmp	.+14     	; 0x1af2 <main+0x15d2>
    1ae4:	a5 e1       	ldi	r26, 0x15	; 21
    1ae6:	6a 2e       	mov	r6, r26
    1ae8:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    1aea:	8b e1       	ldi	r24, 0x1B	; 27
    1aec:	68 16       	cp	r6, r24
    1aee:	71 04       	cpc	r7, r1
    1af0:	71 f4       	brne	.+28     	; 0x1b0e <main+0x15ee>
    1af2:	c2 01       	movw	r24, r4
    1af4:	af a5       	ldd	r26, Y+47	; 0x2f
    1af6:	b8 a9       	ldd	r27, Y+48	; 0x30
    1af8:	8a 1b       	sub	r24, r26
    1afa:	9b 0b       	sbc	r25, r27
    1afc:	85 36       	cpi	r24, 0x65	; 101
    1afe:	91 05       	cpc	r25, r1
    1b00:	0c f4       	brge	.+2      	; 0x1b04 <main+0x15e4>
    1b02:	47 c0       	rjmp	.+142    	; 0x1b92 <main+0x1672>
    1b04:	12 01       	movw	r2, r4
    1b06:	07 c0       	rjmp	.+14     	; 0x1b16 <main+0x15f6>
    1b08:	f6 e1       	ldi	r31, 0x16	; 22
    1b0a:	6f 2e       	mov	r6, r31
    1b0c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    1b0e:	bc e1       	ldi	r27, 0x1C	; 28
    1b10:	6b 16       	cp	r6, r27
    1b12:	71 04       	cpc	r7, r1
    1b14:	61 f4       	brne	.+24     	; 0x1b2e <main+0x160e>
    1b16:	c2 01       	movw	r24, r4
    1b18:	82 19       	sub	r24, r2
    1b1a:	93 09       	sbc	r25, r3
    1b1c:	85 36       	cpi	r24, 0x65	; 101
    1b1e:	91 05       	cpc	r25, r1
    1b20:	0c f4       	brge	.+2      	; 0x1b24 <main+0x1604>
    1b22:	47 c0       	rjmp	.+142    	; 0x1bb2 <main+0x1692>
    1b24:	12 01       	movw	r2, r4
    1b26:	07 c0       	rjmp	.+14     	; 0x1b36 <main+0x1616>
    1b28:	e7 e1       	ldi	r30, 0x17	; 23
    1b2a:	6e 2e       	mov	r6, r30
    1b2c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    1b2e:	2d e1       	ldi	r18, 0x1D	; 29
    1b30:	62 16       	cp	r6, r18
    1b32:	71 04       	cpc	r7, r1
    1b34:	51 f4       	brne	.+20     	; 0x1b4a <main+0x162a>
    1b36:	c2 01       	movw	r24, r4
    1b38:	82 19       	sub	r24, r2
    1b3a:	93 09       	sbc	r25, r3
    1b3c:	81 5a       	subi	r24, 0xA1	; 161
    1b3e:	9f 40       	sbci	r25, 0x0F	; 15
    1b40:	44 f4       	brge	.+16     	; 0x1b52 <main+0x1632>
    1b42:	47 c0       	rjmp	.+142    	; 0x1bd2 <main+0x16b2>
    1b44:	78 e1       	ldi	r23, 0x18	; 24
    1b46:	67 2e       	mov	r6, r23
    1b48:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && /*counter - counterRef > totalStepLength2*fixtureMotorLoadBack &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    1b4a:	4e e1       	ldi	r20, 0x1E	; 30
    1b4c:	64 16       	cp	r6, r20
    1b4e:	71 04       	cpc	r7, r1
    1b50:	49 f4       	brne	.+18     	; 0x1b64 <main+0x1644>
    1b52:	80 91 96 03 	lds	r24, 0x0396
    1b56:	83 fd       	sbrc	r24, 3
    1b58:	4d c0       	rjmp	.+154    	; 0x1bf4 <main+0x16d4>
    1b5a:	12 01       	movw	r2, r4
    1b5c:	07 c0       	rjmp	.+14     	; 0x1b6c <main+0x164c>
    1b5e:	69 e1       	ldi	r22, 0x19	; 25
    1b60:	66 2e       	mov	r6, r22
    1b62:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    1b64:	5f e1       	ldi	r21, 0x1F	; 31
    1b66:	65 16       	cp	r6, r21
    1b68:	71 04       	cpc	r7, r1
    1b6a:	49 f4       	brne	.+18     	; 0x1b7e <main+0x165e>
    1b6c:	80 91 96 03 	lds	r24, 0x0396
    1b70:	81 fd       	sbrc	r24, 1
    1b72:	5f c1       	rjmp	.+702    	; 0x1e32 <main+0x1912>
    1b74:	12 01       	movw	r2, r4
    1b76:	07 c0       	rjmp	.+14     	; 0x1b86 <main+0x1666>
    1b78:	5a e1       	ldi	r21, 0x1A	; 26
    1b7a:	65 2e       	mov	r6, r21
    1b7c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureHome == 0){
    1b7e:	80 e2       	ldi	r24, 0x20	; 32
    1b80:	68 16       	cp	r6, r24
    1b82:	71 04       	cpc	r7, r1
    1b84:	49 f4       	brne	.+18     	; 0x1b98 <main+0x1678>
    1b86:	80 91 96 03 	lds	r24, 0x0396
    1b8a:	82 fd       	sbrc	r24, 2
    1b8c:	5e c1       	rjmp	.+700    	; 0x1e4a <main+0x192a>
    1b8e:	12 01       	movw	r2, r4
    1b90:	07 c0       	rjmp	.+14     	; 0x1ba0 <main+0x1680>
    1b92:	4b e1       	ldi	r20, 0x1B	; 27
    1b94:	64 2e       	mov	r6, r20
    1b96:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    1b98:	91 e2       	ldi	r25, 0x21	; 33
    1b9a:	69 16       	cp	r6, r25
    1b9c:	71 04       	cpc	r7, r1
    1b9e:	61 f4       	brne	.+24     	; 0x1bb8 <main+0x1698>
    1ba0:	c2 01       	movw	r24, r4
    1ba2:	82 19       	sub	r24, r2
    1ba4:	93 09       	sbc	r25, r3
    1ba6:	85 36       	cpi	r24, 0x65	; 101
    1ba8:	91 05       	cpc	r25, r1
    1baa:	0c f4       	brge	.+2      	; 0x1bae <main+0x168e>
    1bac:	5c c1       	rjmp	.+696    	; 0x1e66 <main+0x1946>
    1bae:	12 01       	movw	r2, r4
    1bb0:	07 c0       	rjmp	.+14     	; 0x1bc0 <main+0x16a0>
    1bb2:	3c e1       	ldi	r19, 0x1C	; 28
    1bb4:	63 2e       	mov	r6, r19
    1bb6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    1bb8:	a2 e2       	ldi	r26, 0x22	; 34
    1bba:	6a 16       	cp	r6, r26
    1bbc:	71 04       	cpc	r7, r1
    1bbe:	61 f4       	brne	.+24     	; 0x1bd8 <main+0x16b8>
    1bc0:	c2 01       	movw	r24, r4
    1bc2:	82 19       	sub	r24, r2
    1bc4:	93 09       	sbc	r25, r3
    1bc6:	81 5a       	subi	r24, 0xA1	; 161
    1bc8:	9f 40       	sbci	r25, 0x0F	; 15
    1bca:	0c f4       	brge	.+2      	; 0x1bce <main+0x16ae>
    1bcc:	5e c1       	rjmp	.+700    	; 0x1e8a <main+0x196a>
    1bce:	12 01       	movw	r2, r4
    1bd0:	07 c0       	rjmp	.+14     	; 0x1be0 <main+0x16c0>
    1bd2:	2d e1       	ldi	r18, 0x1D	; 29
    1bd4:	62 2e       	mov	r6, r18
    1bd6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    1bd8:	23 e2       	ldi	r18, 0x23	; 35
    1bda:	62 16       	cp	r6, r18
    1bdc:	71 04       	cpc	r7, r1
    1bde:	69 f4       	brne	.+26     	; 0x1bfa <main+0x16da>
    1be0:	c2 01       	movw	r24, r4
    1be2:	82 19       	sub	r24, r2
    1be4:	93 09       	sbc	r25, r3
    1be6:	0b 97       	sbiw	r24, 0x0b	; 11
    1be8:	0c f4       	brge	.+2      	; 0x1bec <main+0x16cc>
    1bea:	5c c1       	rjmp	.+696    	; 0x1ea4 <main+0x1984>
    1bec:	94 e2       	ldi	r25, 0x24	; 36
    1bee:	69 2e       	mov	r6, r25
    1bf0:	71 2c       	mov	r7, r1
    1bf2:	6f c1       	rjmp	.+734    	; 0x1ed2 <main+0x19b2>
    1bf4:	8e e1       	ldi	r24, 0x1E	; 30
    1bf6:	68 2e       	mov	r6, r24
    1bf8:	71 2c       	mov	r7, r1
				}


				//state actions
						
				switch (state){
    1bfa:	f3 01       	movw	r30, r6
    1bfc:	e4 32       	cpi	r30, 0x24	; 36
    1bfe:	f1 05       	cpc	r31, r1
    1c00:	08 f0       	brcs	.+2      	; 0x1c04 <main+0x16e4>
    1c02:	67 c1       	rjmp	.+718    	; 0x1ed2 <main+0x19b2>
    1c04:	ea 56       	subi	r30, 0x6A	; 106
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	ee 0f       	add	r30, r30
    1c0a:	ff 1f       	adc	r31, r31
    1c0c:	05 90       	lpm	r0, Z+
    1c0e:	f4 91       	lpm	r31, Z+
    1c10:	e0 2d       	mov	r30, r0
    1c12:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    1c14:	80 91 96 03 	lds	r24, 0x0396
    1c18:	90 91 92 03 	lds	r25, 0x0392
    1c1c:	20 91 94 03 	lds	r18, 0x0394
    1c20:	82 ff       	sbrs	r24, 2
    1c22:	08 c0       	rjmp	.+16     	; 0x1c34 <main+0x1714>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    1c24:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1c26:	27 7f       	andi	r18, 0xF7	; 247
    1c28:	20 93 94 03 	sts	0x0394, r18
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1c2c:	90 62       	ori	r25, 0x20	; 32
    1c2e:	90 93 92 03 	sts	0x0392, r25
    1c32:	4f c1       	rjmp	.+670    	; 0x1ed2 <main+0x19b2>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1c34:	9f 7d       	andi	r25, 0xDF	; 223
    1c36:	90 93 92 03 	sts	0x0392, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1c3a:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1c3c:	28 60       	ori	r18, 0x08	; 8
    1c3e:	20 93 94 03 	sts	0x0394, r18
						if(print0 == 1){
    1c42:	4d a5       	ldd	r20, Y+45	; 0x2d
    1c44:	5e a5       	ldd	r21, Y+46	; 0x2e
    1c46:	41 30       	cpi	r20, 0x01	; 1
    1c48:	51 05       	cpc	r21, r1
    1c4a:	09 f0       	breq	.+2      	; 0x1c4e <main+0x172e>
    1c4c:	49 c0       	rjmp	.+146    	; 0x1ce0 <main+0x17c0>
							OrangutanLCD::gotoXY(0,1);
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	61 e0       	ldi	r22, 0x01	; 1
    1c52:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1c56:	84 e4       	ldi	r24, 0x44	; 68
    1c58:	93 e0       	ldi	r25, 0x03	; 3
    1c5a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
    1c5e:	1e a6       	std	Y+46, r1	; 0x2e
    1c60:	1d a6       	std	Y+45, r1	; 0x2d
    1c62:	3e c0       	rjmp	.+124    	; 0x1ce0 <main+0x17c0>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1c64:	20 91 94 03 	lds	r18, 0x0394
    1c68:	32 2f       	mov	r19, r18
    1c6a:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    1c6c:	c2 01       	movw	r24, r4
    1c6e:	68 ec       	ldi	r22, 0xC8	; 200
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__divmodhi4>
    1c76:	84 36       	cpi	r24, 0x64	; 100
    1c78:	91 05       	cpc	r25, r1
    1c7a:	24 f4       	brge	.+8      	; 0x1c84 <main+0x1764>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1c7c:	2c 7f       	andi	r18, 0xFC	; 252
    1c7e:	20 93 94 03 	sts	0x0394, r18
    1c82:	03 c0       	rjmp	.+6      	; 0x1c8a <main+0x176a>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1c84:	32 60       	ori	r19, 0x02	; 2
    1c86:	30 93 94 03 	sts	0x0394, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    1c8a:	80 91 92 03 	lds	r24, 0x0392
    1c8e:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1c90:	84 60       	ori	r24, 0x04	; 4
    1c92:	80 93 92 03 	sts	0x0392, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1c96:	80 91 94 03 	lds	r24, 0x0394
    1c9a:	8b 7f       	andi	r24, 0xFB	; 251
    1c9c:	80 93 94 03 	sts	0x0394, r24
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	98 8b       	std	Y+16, r25	; 0x10
    1ca6:	8f 87       	std	Y+15, r24	; 0x0f
    1ca8:	14 c1       	rjmp	.+552    	; 0x1ed2 <main+0x19b2>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1caa:	80 91 94 03 	lds	r24, 0x0394
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1cae:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1cb0:	86 61       	ori	r24, 0x16	; 22
    1cb2:	80 93 94 03 	sts	0x0394, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1cb6:	80 91 92 03 	lds	r24, 0x0392
    1cba:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1cbc:	8b 7f       	andi	r24, 0xFB	; 251
    1cbe:	80 93 92 03 	sts	0x0392, r24
    1cc2:	05 c1       	rjmp	.+522    	; 0x1ece <main+0x19ae>
					break;
				case FIXL:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
    1cc4:	80 91 92 03 	lds	r24, 0x0392
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1cc8:	80 63       	ori	r24, 0x30	; 48
    1cca:	47 c0       	rjmp	.+142    	; 0x1d5a <main+0x183a>
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1ccc:	80 91 92 03 	lds	r24, 0x0392
    1cd0:	8f 7d       	andi	r24, 0xDF	; 223
    1cd2:	80 93 92 03 	sts	0x0392, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1cd6:	80 91 94 03 	lds	r24, 0x0394
    1cda:	88 60       	ori	r24, 0x08	; 8
    1cdc:	80 93 94 03 	sts	0x0394, r24
    1ce0:	1e 8e       	std	Y+30, r1	; 0x1e
    1ce2:	1d 8e       	std	Y+29, r1	; 0x1d
    1ce4:	f6 c0       	rjmp	.+492    	; 0x1ed2 <main+0x19b2>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1ce6:	80 91 94 03 	lds	r24, 0x0394
    1cea:	8f 7e       	andi	r24, 0xEF	; 239
    1cec:	80 93 94 03 	sts	0x0394, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1cf0:	80 91 92 03 	lds	r24, 0x0392
    1cf4:	80 62       	ori	r24, 0x20	; 32
    1cf6:	80 93 92 03 	sts	0x0392, r24
    1cfa:	eb c0       	rjmp	.+470    	; 0x1ed2 <main+0x19b2>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1cfc:	80 91 92 03 	lds	r24, 0x0392
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d00:	80 63       	ori	r24, 0x30	; 48
    1d02:	80 93 92 03 	sts	0x0392, r24
    1d06:	21 e0       	ldi	r18, 0x01	; 1
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	3e 8f       	std	Y+30, r19	; 0x1e
    1d0c:	2d 8f       	std	Y+29, r18	; 0x1d
    1d0e:	e1 c0       	rjmp	.+450    	; 0x1ed2 <main+0x19b2>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    1d10:	80 91 93 03 	lds	r24, 0x0393
    1d14:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1d16:	8b 7f       	andi	r24, 0xFB	; 251
    1d18:	80 93 93 03 	sts	0x0393, r24
    1d1c:	e1 cf       	rjmp	.-62     	; 0x1ce0 <main+0x17c0>
						print15 = 0;
					}*/
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1d1e:	80 91 95 03 	lds	r24, 0x0395
    1d22:	81 60       	ori	r24, 0x01	; 1
    1d24:	80 93 95 03 	sts	0x0395, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1d28:	80 91 94 03 	lds	r24, 0x0394
    1d2c:	8f 77       	andi	r24, 0x7F	; 127
    1d2e:	80 93 94 03 	sts	0x0394, r24
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	5e a3       	std	Y+38, r21	; 0x26
    1d38:	4d a3       	std	Y+37, r20	; 0x25
    1d3a:	cb c0       	rjmp	.+406    	; 0x1ed2 <main+0x19b2>
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1d3c:	80 91 95 03 	lds	r24, 0x0395
    1d40:	8e 7f       	andi	r24, 0xFE	; 254
    1d42:	80 93 95 03 	sts	0x0395, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1d46:	80 91 94 03 	lds	r24, 0x0394
    1d4a:	80 68       	ori	r24, 0x80	; 128
    1d4c:	80 93 94 03 	sts	0x0394, r24
    1d50:	2e c0       	rjmp	.+92     	; 0x1dae <main+0x188e>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1d52:	80 91 92 03 	lds	r24, 0x0392
    1d56:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d58:	80 62       	ori	r24, 0x20	; 32
    1d5a:	80 93 92 03 	sts	0x0392, r24
    1d5e:	a1 e0       	ldi	r26, 0x01	; 1
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	be 8f       	std	Y+30, r27	; 0x1e
    1d64:	ad 8f       	std	Y+29, r26	; 0x1d
    1d66:	b5 c0       	rjmp	.+362    	; 0x1ed2 <main+0x19b2>
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1d68:	80 91 93 03 	lds	r24, 0x0393
    1d6c:	8b 7f       	andi	r24, 0xFB	; 251
    1d6e:	80 93 93 03 	sts	0x0393, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1d72:	80 91 95 03 	lds	r24, 0x0395
    1d76:	81 60       	ori	r24, 0x01	; 1
    1d78:	80 93 95 03 	sts	0x0395, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1d7c:	80 91 94 03 	lds	r24, 0x0394
    1d80:	8f 77       	andi	r24, 0x7F	; 127
    1d82:	80 93 94 03 	sts	0x0394, r24
    1d86:	21 e0       	ldi	r18, 0x01	; 1
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	3e a3       	std	Y+38, r19	; 0x26
    1d8c:	2d a3       	std	Y+37, r18	; 0x25
    1d8e:	a8 cf       	rjmp	.-176    	; 0x1ce0 <main+0x17c0>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1d90:	80 91 95 03 	lds	r24, 0x0395
    1d94:	8e 7f       	andi	r24, 0xFE	; 254
    1d96:	80 93 95 03 	sts	0x0395, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1d9a:	80 91 94 03 	lds	r24, 0x0394
    1d9e:	80 68       	ori	r24, 0x80	; 128
    1da0:	80 93 94 03 	sts	0x0394, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    1da4:	80 91 93 03 	lds	r24, 0x0393
    1da8:	87 7f       	andi	r24, 0xF7	; 247
    1daa:	80 93 93 03 	sts	0x0393, r24
    1dae:	1e a2       	std	Y+38, r1	; 0x26
    1db0:	1d a2       	std	Y+37, r1	; 0x25
    1db2:	96 cf       	rjmp	.-212    	; 0x1ce0 <main+0x17c0>
					break;
				//*************************************************
				case MOVED1:
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1db4:	80 91 92 03 	lds	r24, 0x0392
    1db8:	80 62       	ori	r24, 0x20	; 32
    1dba:	80 93 92 03 	sts	0x0392, r24
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	9e 8f       	std	Y+30, r25	; 0x1e
    1dc4:	8d 8f       	std	Y+29, r24	; 0x1d
    1dc6:	85 c0       	rjmp	.+266    	; 0x1ed2 <main+0x19b2>
					//u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1dc8:	80 91 95 03 	lds	r24, 0x0395
    1dcc:	87 7f       	andi	r24, 0xF7	; 247
    1dce:	80 93 95 03 	sts	0x0395, r24
    1dd2:	86 cf       	rjmp	.-244    	; 0x1ce0 <main+0x17c0>
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1dd4:	80 91 95 03 	lds	r24, 0x0395
    1dd8:	88 60       	ori	r24, 0x08	; 8
    1dda:	10 c0       	rjmp	.+32     	; 0x1dfc <main+0x18dc>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    1ddc:	80 91 93 03 	lds	r24, 0x0393
    1de0:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1de2:	8f 7d       	andi	r24, 0xDF	; 223
    1de4:	80 93 93 03 	sts	0x0393, r24
    1de8:	1e 8e       	std	Y+30, r1	; 0x1e
    1dea:	1d 8e       	std	Y+29, r1	; 0x1d
    1dec:	21 e0       	ldi	r18, 0x01	; 1
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	38 87       	std	Y+8, r19	; 0x08
    1df2:	2f 83       	std	Y+7, r18	; 0x07
    1df4:	6e c0       	rjmp	.+220    	; 0x1ed2 <main+0x19b2>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1df6:	80 91 95 03 	lds	r24, 0x0395
    1dfa:	8d 7f       	andi	r24, 0xFD	; 253
    1dfc:	80 93 95 03 	sts	0x0395, r24
    1e00:	68 c0       	rjmp	.+208    	; 0x1ed2 <main+0x19b2>
					break;
				case DRY2:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1e02:	80 91 92 03 	lds	r24, 0x0392
    1e06:	80 62       	ori	r24, 0x20	; 32
    1e08:	80 93 92 03 	sts	0x0392, r24
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
    1e10:	5e 8f       	std	Y+30, r21	; 0x1e
    1e12:	4d 8f       	std	Y+29, r20	; 0x1d
    1e14:	5e c0       	rjmp	.+188    	; 0x1ed2 <main+0x19b2>
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    1e16:	80 91 93 03 	lds	r24, 0x0393
    1e1a:	8f 7b       	andi	r24, 0xBF	; 191
    1e1c:	80 93 93 03 	sts	0x0393, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1e20:	80 91 95 03 	lds	r24, 0x0395
    1e24:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1e26:	8b 7f       	andi	r24, 0xFB	; 251
    1e28:	80 93 95 03 	sts	0x0395, r24
    1e2c:	18 86       	std	Y+8, r1	; 0x08
    1e2e:	1f 82       	std	Y+7, r1	; 0x07
    1e30:	50 c0       	rjmp	.+160    	; 0x1ed2 <main+0x19b2>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1e32:	80 91 94 03 	lds	r24, 0x0394
    1e36:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1e38:	80 61       	ori	r24, 0x10	; 16
    1e3a:	80 93 94 03 	sts	0x0394, r24
    1e3e:	1e 8e       	std	Y+30, r1	; 0x1e
    1e40:	1d 8e       	std	Y+29, r1	; 0x1d
    1e42:	0f e1       	ldi	r16, 0x1F	; 31
    1e44:	60 2e       	mov	r6, r16
    1e46:	71 2c       	mov	r7, r1
    1e48:	44 c0       	rjmp	.+136    	; 0x1ed2 <main+0x19b2>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1e4a:	80 91 92 03 	lds	r24, 0x0392
    1e4e:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1e50:	80 62       	ori	r24, 0x20	; 32
    1e52:	80 93 92 03 	sts	0x0392, r24
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e5c:	8d 8f       	std	Y+29, r24	; 0x1d
    1e5e:	10 e2       	ldi	r17, 0x20	; 32
    1e60:	61 2e       	mov	r6, r17
    1e62:	71 2c       	mov	r7, r1
    1e64:	36 c0       	rjmp	.+108    	; 0x1ed2 <main+0x19b2>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1e66:	80 91 92 03 	lds	r24, 0x0392
    1e6a:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1e6c:	84 60       	ori	r24, 0x04	; 4
    1e6e:	80 93 92 03 	sts	0x0392, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1e72:	80 91 94 03 	lds	r24, 0x0394
    1e76:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1e78:	8f 7e       	andi	r24, 0xEF	; 239
    1e7a:	80 93 94 03 	sts	0x0394, r24
    1e7e:	1e 8e       	std	Y+30, r1	; 0x1e
    1e80:	1d 8e       	std	Y+29, r1	; 0x1d
    1e82:	b1 e2       	ldi	r27, 0x21	; 33
    1e84:	6b 2e       	mov	r6, r27
    1e86:	71 2c       	mov	r7, r1
    1e88:	24 c0       	rjmp	.+72     	; 0x1ed2 <main+0x19b2>
					break;
    1e8a:	a2 e2       	ldi	r26, 0x22	; 34
    1e8c:	6a 2e       	mov	r6, r26
    1e8e:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1e90:	80 91 92 03 	lds	r24, 0x0392
    1e94:	8d 7f       	andi	r24, 0xFD	; 253
    1e96:	80 93 92 03 	sts	0x0392, r24
    1e9a:	a1 e0       	ldi	r26, 0x01	; 1
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	b8 8b       	std	Y+16, r27	; 0x10
    1ea0:	af 87       	std	Y+15, r26	; 0x0f
    1ea2:	17 c0       	rjmp	.+46     	; 0x1ed2 <main+0x19b2>
					plateLoadMotor = 1;
					break;
    1ea4:	f3 e2       	ldi	r31, 0x23	; 35
    1ea6:	6f 2e       	mov	r6, r31
    1ea8:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1eaa:	80 91 92 03 	lds	r24, 0x0392
    1eae:	8b 7f       	andi	r24, 0xFB	; 251
    1eb0:	80 93 92 03 	sts	0x0392, r24
					if(print35 == 1){
    1eb4:	2f a9       	ldd	r18, Y+55	; 0x37
    1eb6:	38 ad       	ldd	r19, Y+56	; 0x38
    1eb8:	21 30       	cpi	r18, 0x01	; 1
    1eba:	31 05       	cpc	r19, r1
    1ebc:	41 f4       	brne	.+16     	; 0x1ece <main+0x19ae>
						OrangutanLCD::clear();
    1ebe:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1ec2:	82 e5       	ldi	r24, 0x52	; 82
    1ec4:	93 e0       	ldi	r25, 0x03	; 3
    1ec6:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
    1eca:	18 ae       	std	Y+56, r1	; 0x38
    1ecc:	1f aa       	std	Y+55, r1	; 0x37
    1ece:	18 8a       	std	Y+16, r1	; 0x10
    1ed0:	1f 86       	std	Y+15, r1	; 0x0f
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    1ed2:	4d b7       	in	r20, 0x3d	; 61
    1ed4:	5e b7       	in	r21, 0x3e	; 62
    1ed6:	42 51       	subi	r20, 0x12	; 18
    1ed8:	50 40       	sbci	r21, 0x00	; 0
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	5e bf       	out	0x3e, r21	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	4d bf       	out	0x3d, r20	; 61
    1ee4:	ed b7       	in	r30, 0x3d	; 61
    1ee6:	fe b7       	in	r31, 0x3e	; 62
    1ee8:	31 96       	adiw	r30, 0x01	; 1
    1eea:	82 e0       	ldi	r24, 0x02	; 2
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	ad b7       	in	r26, 0x3d	; 61
    1ef0:	be b7       	in	r27, 0x3e	; 62
    1ef2:	12 96       	adiw	r26, 0x02	; 2
    1ef4:	9c 93       	st	X, r25
    1ef6:	8e 93       	st	-X, r24
    1ef8:	11 97       	sbiw	r26, 0x01	; 1
    1efa:	93 83       	std	Z+3, r25	; 0x03
    1efc:	82 83       	std	Z+2, r24	; 0x02
    1efe:	95 83       	std	Z+5, r25	; 0x05
    1f00:	84 83       	std	Z+4, r24	; 0x04
    1f02:	97 83       	std	Z+7, r25	; 0x07
    1f04:	86 83       	std	Z+6, r24	; 0x06
    1f06:	21 e0       	ldi	r18, 0x01	; 1
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	31 87       	std	Z+9, r19	; 0x09
    1f0c:	20 87       	std	Z+8, r18	; 0x08
    1f0e:	33 87       	std	Z+11, r19	; 0x0b
    1f10:	22 87       	std	Z+10, r18	; 0x0a
    1f12:	35 87       	std	Z+13, r19	; 0x0d
    1f14:	24 87       	std	Z+12, r18	; 0x0c
    1f16:	37 87       	std	Z+15, r19	; 0x0f
    1f18:	26 87       	std	Z+14, r18	; 0x0e
    1f1a:	31 8b       	std	Z+17, r19	; 0x11
    1f1c:	20 8b       	std	Z+16, r18	; 0x10
    1f1e:	c2 01       	movw	r24, r4
    1f20:	b1 01       	movw	r22, r2
    1f22:	4f a5       	ldd	r20, Y+47	; 0x2f
    1f24:	58 a9       	ldd	r21, Y+48	; 0x30
    1f26:	2f 85       	ldd	r18, Y+15	; 0x0f
    1f28:	38 89       	ldd	r19, Y+16	; 0x10
    1f2a:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1f2c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1f2e:	ee 24       	eor	r14, r14
    1f30:	ff 24       	eor	r15, r15
    1f32:	cd a0       	ldd	r12, Y+37	; 0x25
    1f34:	de a0       	ldd	r13, Y+38	; 0x26
    1f36:	af 80       	ldd	r10, Y+7	; 0x07
    1f38:	b8 84       	ldd	r11, Y+8	; 0x08
    1f3a:	e2 e0       	ldi	r30, 0x02	; 2
    1f3c:	8e 2e       	mov	r8, r30
    1f3e:	91 2c       	mov	r9, r1
    1f40:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    1f44:	4d b7       	in	r20, 0x3d	; 61
    1f46:	5e b7       	in	r21, 0x3e	; 62
    1f48:	4e 5e       	subi	r20, 0xEE	; 238
    1f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	5e bf       	out	0x3e, r21	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	4d bf       	out	0x3d, r20	; 61
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("SECOND B");
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1f5e:	54 e2       	ldi	r21, 0x24	; 36
    1f60:	65 16       	cp	r6, r21
    1f62:	71 04       	cpc	r7, r1
    1f64:	11 f4       	brne	.+4      	; 0x1f6a <main+0x1a4a>
    1f66:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <main+0x2c66>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    1f6a:	08 94       	sec
    1f6c:	41 1c       	adc	r4, r1
    1f6e:	51 1c       	adc	r5, r1
    1f70:	81 cc       	rjmp	.-1790   	; 0x1874 <main+0x1354>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    1f78:	88 23       	and	r24, r24
    1f7a:	11 f4       	brne	.+4      	; 0x1f80 <main+0x1a60>
    1f7c:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <main+0x2cd4>
			OrangutanLCD::gotoXY(7,0);
    1f80:	87 e0       	ldi	r24, 0x07	; 7
    1f82:	60 e0       	ldi	r22, 0x00	; 0
    1f84:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("BOTH B");
    1f88:	88 e6       	ldi	r24, 0x68	; 104
    1f8a:	93 e0       	ldi	r25, 0x03	; 3
    1f8c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
			OrangutanLCD::print("DEBUG");
    1f90:	87 e3       	ldi	r24, 0x37	; 55
    1f92:	93 e0       	ldi	r25, 0x03	; 3
    1f94:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1f98:	80 91 92 03 	lds	r24, 0x0392
    1f9c:	80 62       	ori	r24, 0x20	; 32
    1f9e:	80 93 92 03 	sts	0x0392, r24
    1fa2:	22 24       	eor	r2, r2
    1fa4:	33 24       	eor	r3, r3
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	9e ab       	std	Y+54, r25	; 0x36
    1fac:	8d ab       	std	Y+53, r24	; 0x35
    1fae:	9c a7       	std	Y+44, r25	; 0x2c
    1fb0:	8b a7       	std	Y+43, r24	; 0x2b
    1fb2:	1c a2       	std	Y+36, r1	; 0x24
    1fb4:	1b a2       	std	Y+35, r1	; 0x23
    1fb6:	9c 8f       	std	Y+28, r25	; 0x1c
    1fb8:	8b 8f       	std	Y+27, r24	; 0x1b
    1fba:	1e 8a       	std	Y+22, r1	; 0x16
    1fbc:	1d 8a       	std	Y+21, r1	; 0x15
    1fbe:	18 a6       	std	Y+40, r1	; 0x28
    1fc0:	1f a2       	std	Y+39, r1	; 0x27
    1fc2:	1e 86       	std	Y+14, r1	; 0x0e
    1fc4:	1d 86       	std	Y+13, r1	; 0x0d
    1fc6:	1e 82       	std	Y+6, r1	; 0x06
    1fc8:	1d 82       	std	Y+5, r1	; 0x05
    1fca:	66 24       	eor	r6, r6
    1fcc:	77 24       	eor	r7, r7
    1fce:	44 24       	eor	r4, r4
    1fd0:	55 24       	eor	r5, r5
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1fd2:	84 e4       	ldi	r24, 0x44	; 68
    1fd4:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1fde:	85 e4       	ldi	r24, 0x45	; 69
    1fe0:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1fe4:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z11i2c_readAckv>
    1fe8:	80 93 96 03 	sts	0x0396, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1fec:	0e 94 92 19 	call	0x3324	; 0x3324 <_Z11i2c_readNakv>
    1ff0:	80 93 97 03 	sts	0x0397, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1ff4:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Z8i2c_stopv>
				
				if(state != INIT){
    1ff8:	61 14       	cp	r6, r1
    1ffa:	71 04       	cpc	r7, r1
    1ffc:	b9 f0       	breq	.+46     	; 0x202c <main+0x1b0c>
					OrangutanLCD::gotoXY(6,1);
    1ffe:	86 e0       	ldi	r24, 0x06	; 6
    2000:	61 e0       	ldi	r22, 0x01	; 1
    2002:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("       ");
    2006:	8f e6       	ldi	r24, 0x6F	; 111
    2008:	93 e0       	ldi	r25, 0x03	; 3
    200a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	61 e0       	ldi	r22, 0x01	; 1
    2012:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    2016:	8d e3       	ldi	r24, 0x3D	; 61
    2018:	93 e0       	ldi	r25, 0x03	; 3
    201a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
    201e:	b3 01       	movw	r22, r6
    2020:	88 27       	eor	r24, r24
    2022:	77 fd       	sbrc	r23, 7
    2024:	80 95       	com	r24
    2026:	98 2f       	mov	r25, r24
    2028:	0e 94 44 1c 	call	0x3888	; 0x3888 <_ZN12OrangutanLCD5printEl>
						button = 0;
						stateButton = 0;
					}
				}*/

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    202c:	c2 01       	movw	r24, r4
    202e:	be 01       	movw	r22, r28
    2030:	6f 5f       	subi	r22, 0xFF	; 255
    2032:	7f 4f       	sbci	r23, 0xFF	; 255
    2034:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    2038:	61 14       	cp	r6, r1
    203a:	71 04       	cpc	r7, r1
    203c:	21 f4       	brne	.+8      	; 0x2046 <main+0x1b26>
    203e:	88 23       	and	r24, r24
    2040:	e1 f1       	breq	.+120    	; 0x20ba <main+0x1b9a>
    2042:	12 01       	movw	r2, r4
    2044:	04 c0       	rjmp	.+8      	; 0x204e <main+0x1b2e>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    2046:	91 e0       	ldi	r25, 0x01	; 1
    2048:	69 16       	cp	r6, r25
    204a:	71 04       	cpc	r7, r1
    204c:	41 f4       	brne	.+16     	; 0x205e <main+0x1b3e>
    204e:	c2 01       	movw	r24, r4
    2050:	82 19       	sub	r24, r2
    2052:	93 09       	sbc	r25, r3
    2054:	81 5a       	subi	r24, 0xA1	; 161
    2056:	9f 40       	sbci	r25, 0x0F	; 15
    2058:	ec f1       	brlt	.+122    	; 0x20d4 <main+0x1bb4>
    205a:	12 01       	movw	r2, r4
    205c:	04 c0       	rjmp	.+8      	; 0x2066 <main+0x1b46>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    205e:	b2 e0       	ldi	r27, 0x02	; 2
    2060:	6b 16       	cp	r6, r27
    2062:	71 04       	cpc	r7, r1
    2064:	49 f4       	brne	.+18     	; 0x2078 <main+0x1b58>
    2066:	c2 01       	movw	r24, r4
    2068:	82 19       	sub	r24, r2
    206a:	93 09       	sbc	r25, r3
    206c:	85 36       	cpi	r24, 0x65	; 101
    206e:	91 05       	cpc	r25, r1
    2070:	0c f4       	brge	.+2      	; 0x2074 <main+0x1b54>
    2072:	40 c0       	rjmp	.+128    	; 0x20f4 <main+0x1bd4>
    2074:	12 01       	movw	r2, r4
    2076:	04 c0       	rjmp	.+8      	; 0x2080 <main+0x1b60>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    2078:	23 e0       	ldi	r18, 0x03	; 3
    207a:	62 16       	cp	r6, r18
    207c:	71 04       	cpc	r7, r1
    207e:	31 f4       	brne	.+12     	; 0x208c <main+0x1b6c>
    2080:	80 91 96 03 	lds	r24, 0x0396
    2084:	81 fd       	sbrc	r24, 1
    2086:	46 c0       	rjmp	.+140    	; 0x2114 <main+0x1bf4>
    2088:	12 01       	movw	r2, r4
    208a:	04 c0       	rjmp	.+8      	; 0x2094 <main+0x1b74>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    208c:	34 e0       	ldi	r19, 0x04	; 4
    208e:	63 16       	cp	r6, r19
    2090:	71 04       	cpc	r7, r1
    2092:	31 f4       	brne	.+12     	; 0x20a0 <main+0x1b80>
    2094:	80 91 96 03 	lds	r24, 0x0396
    2098:	83 fd       	sbrc	r24, 3
    209a:	4c c0       	rjmp	.+152    	; 0x2134 <main+0x1c14>
    209c:	12 01       	movw	r2, r4
    209e:	04 c0       	rjmp	.+8      	; 0x20a8 <main+0x1b88>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    20a0:	45 e0       	ldi	r20, 0x05	; 5
    20a2:	64 16       	cp	r6, r20
    20a4:	71 04       	cpc	r7, r1
    20a6:	49 f4       	brne	.+18     	; 0x20ba <main+0x1b9a>
    20a8:	c2 01       	movw	r24, r4
    20aa:	82 19       	sub	r24, r2
    20ac:	93 09       	sbc	r25, r3
    20ae:	85 36       	cpi	r24, 0x65	; 101
    20b0:	91 05       	cpc	r25, r1
    20b2:	0c f4       	brge	.+2      	; 0x20b6 <main+0x1b96>
    20b4:	4d c0       	rjmp	.+154    	; 0x2150 <main+0x1c30>
    20b6:	12 01       	movw	r2, r4
    20b8:	04 c0       	rjmp	.+8      	; 0x20c2 <main+0x1ba2>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    20ba:	56 e0       	ldi	r21, 0x06	; 6
    20bc:	65 16       	cp	r6, r21
    20be:	71 04       	cpc	r7, r1
    20c0:	61 f4       	brne	.+24     	; 0x20da <main+0x1bba>
    20c2:	c2 01       	movw	r24, r4
    20c4:	82 19       	sub	r24, r2
    20c6:	93 09       	sbc	r25, r3
    20c8:	81 5a       	subi	r24, 0xA1	; 161
    20ca:	9f 40       	sbci	r25, 0x0F	; 15
    20cc:	0c f4       	brge	.+2      	; 0x20d0 <main+0x1bb0>
    20ce:	50 c0       	rjmp	.+160    	; 0x2170 <main+0x1c50>
    20d0:	12 01       	movw	r2, r4
    20d2:	07 c0       	rjmp	.+14     	; 0x20e2 <main+0x1bc2>
    20d4:	21 e0       	ldi	r18, 0x01	; 1
    20d6:	62 2e       	mov	r6, r18
    20d8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    20da:	b7 e0       	ldi	r27, 0x07	; 7
    20dc:	6b 16       	cp	r6, r27
    20de:	71 04       	cpc	r7, r1
    20e0:	61 f4       	brne	.+24     	; 0x20fa <main+0x1bda>
    20e2:	c2 01       	movw	r24, r4
    20e4:	82 19       	sub	r24, r2
    20e6:	93 09       	sbc	r25, r3
    20e8:	85 36       	cpi	r24, 0x65	; 101
    20ea:	91 05       	cpc	r25, r1
    20ec:	0c f4       	brge	.+2      	; 0x20f0 <main+0x1bd0>
    20ee:	50 c0       	rjmp	.+160    	; 0x2190 <main+0x1c70>
    20f0:	12 01       	movw	r2, r4
    20f2:	07 c0       	rjmp	.+14     	; 0x2102 <main+0x1be2>
    20f4:	92 e0       	ldi	r25, 0x02	; 2
    20f6:	69 2e       	mov	r6, r25
    20f8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    20fa:	28 e0       	ldi	r18, 0x08	; 8
    20fc:	62 16       	cp	r6, r18
    20fe:	71 04       	cpc	r7, r1
    2100:	61 f4       	brne	.+24     	; 0x211a <main+0x1bfa>
    2102:	c2 01       	movw	r24, r4
    2104:	82 19       	sub	r24, r2
    2106:	93 09       	sbc	r25, r3
    2108:	85 36       	cpi	r24, 0x65	; 101
    210a:	91 05       	cpc	r25, r1
    210c:	0c f4       	brge	.+2      	; 0x2110 <main+0x1bf0>
    210e:	4e c0       	rjmp	.+156    	; 0x21ac <main+0x1c8c>
    2110:	12 01       	movw	r2, r4
    2112:	07 c0       	rjmp	.+14     	; 0x2122 <main+0x1c02>
    2114:	83 e0       	ldi	r24, 0x03	; 3
    2116:	68 2e       	mov	r6, r24
    2118:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    211a:	39 e0       	ldi	r19, 0x09	; 9
    211c:	63 16       	cp	r6, r19
    211e:	71 04       	cpc	r7, r1
    2120:	61 f4       	brne	.+24     	; 0x213a <main+0x1c1a>
    2122:	c2 01       	movw	r24, r4
    2124:	82 19       	sub	r24, r2
    2126:	93 09       	sbc	r25, r3
    2128:	81 5d       	subi	r24, 0xD1	; 209
    212a:	97 40       	sbci	r25, 0x07	; 7
    212c:	0c f4       	brge	.+2      	; 0x2130 <main+0x1c10>
    212e:	4e c0       	rjmp	.+156    	; 0x21cc <main+0x1cac>
    2130:	12 01       	movw	r2, r4
    2132:	07 c0       	rjmp	.+14     	; 0x2142 <main+0x1c22>
    2134:	04 e0       	ldi	r16, 0x04	; 4
    2136:	60 2e       	mov	r6, r16
    2138:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    213a:	5a e0       	ldi	r21, 0x0A	; 10
    213c:	65 16       	cp	r6, r21
    213e:	71 04       	cpc	r7, r1
    2140:	51 f4       	brne	.+20     	; 0x2156 <main+0x1c36>
    2142:	c2 01       	movw	r24, r4
    2144:	82 19       	sub	r24, r2
    2146:	93 09       	sbc	r25, r3
    2148:	85 36       	cpi	r24, 0x65	; 101
    214a:	91 05       	cpc	r25, r1
    214c:	44 f4       	brge	.+16     	; 0x215e <main+0x1c3e>
    214e:	4e c0       	rjmp	.+156    	; 0x21ec <main+0x1ccc>
    2150:	15 e0       	ldi	r17, 0x05	; 5
    2152:	61 2e       	mov	r6, r17
    2154:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    2156:	8b e0       	ldi	r24, 0x0B	; 11
    2158:	68 16       	cp	r6, r24
    215a:	71 04       	cpc	r7, r1
    215c:	61 f4       	brne	.+24     	; 0x2176 <main+0x1c56>
    215e:	c2 01       	movw	r24, r4
    2160:	82 19       	sub	r24, r2
    2162:	93 09       	sbc	r25, r3
    2164:	81 5d       	subi	r24, 0xD1	; 209
    2166:	97 40       	sbci	r25, 0x07	; 7
    2168:	0c f4       	brge	.+2      	; 0x216c <main+0x1c4c>
    216a:	50 c0       	rjmp	.+160    	; 0x220c <main+0x1cec>
    216c:	12 01       	movw	r2, r4
    216e:	07 c0       	rjmp	.+14     	; 0x217e <main+0x1c5e>
    2170:	b6 e0       	ldi	r27, 0x06	; 6
    2172:	6b 2e       	mov	r6, r27
    2174:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    2176:	bc e0       	ldi	r27, 0x0C	; 12
    2178:	6b 16       	cp	r6, r27
    217a:	71 04       	cpc	r7, r1
    217c:	61 f4       	brne	.+24     	; 0x2196 <main+0x1c76>
    217e:	c2 01       	movw	r24, r4
    2180:	82 19       	sub	r24, r2
    2182:	93 09       	sbc	r25, r3
    2184:	85 36       	cpi	r24, 0x65	; 101
    2186:	91 05       	cpc	r25, r1
    2188:	0c f4       	brge	.+2      	; 0x218c <main+0x1c6c>
    218a:	50 c0       	rjmp	.+160    	; 0x222c <main+0x1d0c>
    218c:	12 01       	movw	r2, r4
    218e:	07 c0       	rjmp	.+14     	; 0x219e <main+0x1c7e>
    2190:	a7 e0       	ldi	r26, 0x07	; 7
    2192:	6a 2e       	mov	r6, r26
    2194:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2196:	2d e0       	ldi	r18, 0x0D	; 13
    2198:	62 16       	cp	r6, r18
    219a:	71 04       	cpc	r7, r1
    219c:	51 f4       	brne	.+20     	; 0x21b2 <main+0x1c92>
    219e:	c2 01       	movw	r24, r4
    21a0:	82 19       	sub	r24, r2
    21a2:	93 09       	sbc	r25, r3
    21a4:	81 5d       	subi	r24, 0xD1	; 209
    21a6:	97 40       	sbci	r25, 0x07	; 7
    21a8:	44 f4       	brge	.+16     	; 0x21ba <main+0x1c9a>
    21aa:	50 c0       	rjmp	.+160    	; 0x224c <main+0x1d2c>
    21ac:	f8 e0       	ldi	r31, 0x08	; 8
    21ae:	6f 2e       	mov	r6, r31
    21b0:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
				}
				if(state == B1STOP2 && counter - counterRef > totalStepLength2*fixtureMotorBrush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    21b2:	4e e0       	ldi	r20, 0x0E	; 14
    21b4:	64 16       	cp	r6, r20
    21b6:	71 04       	cpc	r7, r1
    21b8:	61 f4       	brne	.+24     	; 0x21d2 <main+0x1cb2>
    21ba:	c2 01       	movw	r24, r4
    21bc:	82 19       	sub	r24, r2
    21be:	93 09       	sbc	r25, r3
    21c0:	81 5a       	subi	r24, 0xA1	; 161
    21c2:	9f 40       	sbci	r25, 0x0F	; 15
    21c4:	0c f4       	brge	.+2      	; 0x21c8 <main+0x1ca8>
    21c6:	52 c0       	rjmp	.+164    	; 0x226c <main+0x1d4c>
    21c8:	12 01       	movw	r2, r4
    21ca:	07 c0       	rjmp	.+14     	; 0x21da <main+0x1cba>
    21cc:	e9 e0       	ldi	r30, 0x09	; 9
    21ce:	6e 2e       	mov	r6, r30
    21d0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    21d2:	8f e0       	ldi	r24, 0x0F	; 15
    21d4:	68 16       	cp	r6, r24
    21d6:	71 04       	cpc	r7, r1
    21d8:	61 f4       	brne	.+24     	; 0x21f2 <main+0x1cd2>
    21da:	c2 01       	movw	r24, r4
    21dc:	82 19       	sub	r24, r2
    21de:	93 09       	sbc	r25, r3
    21e0:	85 36       	cpi	r24, 0x65	; 101
    21e2:	91 05       	cpc	r25, r1
    21e4:	0c f4       	brge	.+2      	; 0x21e8 <main+0x1cc8>
    21e6:	52 c0       	rjmp	.+164    	; 0x228c <main+0x1d6c>
    21e8:	12 01       	movw	r2, r4
    21ea:	07 c0       	rjmp	.+14     	; 0x21fa <main+0x1cda>
    21ec:	7a e0       	ldi	r23, 0x0A	; 10
    21ee:	67 2e       	mov	r6, r23
    21f0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    21f2:	90 e1       	ldi	r25, 0x10	; 16
    21f4:	69 16       	cp	r6, r25
    21f6:	71 04       	cpc	r7, r1
    21f8:	61 f4       	brne	.+24     	; 0x2212 <main+0x1cf2>
    21fa:	c2 01       	movw	r24, r4
    21fc:	82 19       	sub	r24, r2
    21fe:	93 09       	sbc	r25, r3
    2200:	85 36       	cpi	r24, 0x65	; 101
    2202:	91 05       	cpc	r25, r1
    2204:	0c f4       	brge	.+2      	; 0x2208 <main+0x1ce8>
    2206:	52 c0       	rjmp	.+164    	; 0x22ac <main+0x1d8c>
    2208:	12 01       	movw	r2, r4
    220a:	07 c0       	rjmp	.+14     	; 0x221a <main+0x1cfa>
    220c:	6b e0       	ldi	r22, 0x0B	; 11
    220e:	66 2e       	mov	r6, r22
    2210:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2212:	a1 e1       	ldi	r26, 0x11	; 17
    2214:	6a 16       	cp	r6, r26
    2216:	71 04       	cpc	r7, r1
    2218:	61 f4       	brne	.+24     	; 0x2232 <main+0x1d12>
    221a:	c2 01       	movw	r24, r4
    221c:	82 19       	sub	r24, r2
    221e:	93 09       	sbc	r25, r3
    2220:	81 5d       	subi	r24, 0xD1	; 209
    2222:	97 40       	sbci	r25, 0x07	; 7
    2224:	0c f4       	brge	.+2      	; 0x2228 <main+0x1d08>
    2226:	52 c0       	rjmp	.+164    	; 0x22cc <main+0x1dac>
    2228:	12 01       	movw	r2, r4
    222a:	07 c0       	rjmp	.+14     	; 0x223a <main+0x1d1a>
    222c:	5c e0       	ldi	r21, 0x0C	; 12
    222e:	65 2e       	mov	r6, r21
    2230:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    2232:	22 e1       	ldi	r18, 0x12	; 18
    2234:	62 16       	cp	r6, r18
    2236:	71 04       	cpc	r7, r1
    2238:	61 f4       	brne	.+24     	; 0x2252 <main+0x1d32>
    223a:	c2 01       	movw	r24, r4
    223c:	82 19       	sub	r24, r2
    223e:	93 09       	sbc	r25, r3
    2240:	85 36       	cpi	r24, 0x65	; 101
    2242:	91 05       	cpc	r25, r1
    2244:	0c f4       	brge	.+2      	; 0x2248 <main+0x1d28>
    2246:	52 c0       	rjmp	.+164    	; 0x22ec <main+0x1dcc>
    2248:	12 01       	movw	r2, r4
    224a:	07 c0       	rjmp	.+14     	; 0x225a <main+0x1d3a>
    224c:	4d e0       	ldi	r20, 0x0D	; 13
    224e:	64 2e       	mov	r6, r20
    2250:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    2252:	33 e1       	ldi	r19, 0x13	; 19
    2254:	63 16       	cp	r6, r19
    2256:	71 04       	cpc	r7, r1
    2258:	61 f4       	brne	.+24     	; 0x2272 <main+0x1d52>
    225a:	c2 01       	movw	r24, r4
    225c:	82 19       	sub	r24, r2
    225e:	93 09       	sbc	r25, r3
    2260:	81 5d       	subi	r24, 0xD1	; 209
    2262:	97 40       	sbci	r25, 0x07	; 7
    2264:	0c f4       	brge	.+2      	; 0x2268 <main+0x1d48>
    2266:	52 c0       	rjmp	.+164    	; 0x230c <main+0x1dec>
    2268:	12 01       	movw	r2, r4
    226a:	07 c0       	rjmp	.+14     	; 0x227a <main+0x1d5a>
    226c:	3e e0       	ldi	r19, 0x0E	; 14
    226e:	63 2e       	mov	r6, r19
    2270:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    2272:	54 e1       	ldi	r21, 0x14	; 20
    2274:	65 16       	cp	r6, r21
    2276:	71 04       	cpc	r7, r1
    2278:	61 f4       	brne	.+24     	; 0x2292 <main+0x1d72>
    227a:	c2 01       	movw	r24, r4
    227c:	82 19       	sub	r24, r2
    227e:	93 09       	sbc	r25, r3
    2280:	85 36       	cpi	r24, 0x65	; 101
    2282:	91 05       	cpc	r25, r1
    2284:	0c f4       	brge	.+2      	; 0x2288 <main+0x1d68>
    2286:	50 c0       	rjmp	.+160    	; 0x2328 <main+0x1e08>
    2288:	12 01       	movw	r2, r4
    228a:	07 c0       	rjmp	.+14     	; 0x229a <main+0x1d7a>
    228c:	2f e0       	ldi	r18, 0x0F	; 15
    228e:	62 2e       	mov	r6, r18
    2290:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2292:	85 e1       	ldi	r24, 0x15	; 21
    2294:	68 16       	cp	r6, r24
    2296:	71 04       	cpc	r7, r1
    2298:	61 f4       	brne	.+24     	; 0x22b2 <main+0x1d92>
    229a:	c2 01       	movw	r24, r4
    229c:	82 19       	sub	r24, r2
    229e:	93 09       	sbc	r25, r3
    22a0:	81 5d       	subi	r24, 0xD1	; 209
    22a2:	97 40       	sbci	r25, 0x07	; 7
    22a4:	0c f4       	brge	.+2      	; 0x22a8 <main+0x1d88>
    22a6:	51 c0       	rjmp	.+162    	; 0x234a <main+0x1e2a>
    22a8:	12 01       	movw	r2, r4
    22aa:	07 c0       	rjmp	.+14     	; 0x22ba <main+0x1d9a>
    22ac:	90 e1       	ldi	r25, 0x10	; 16
    22ae:	69 2e       	mov	r6, r25
    22b0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    22b2:	b6 e1       	ldi	r27, 0x16	; 22
    22b4:	6b 16       	cp	r6, r27
    22b6:	71 04       	cpc	r7, r1
    22b8:	61 f4       	brne	.+24     	; 0x22d2 <main+0x1db2>
    22ba:	c2 01       	movw	r24, r4
    22bc:	82 19       	sub	r24, r2
    22be:	93 09       	sbc	r25, r3
    22c0:	85 36       	cpi	r24, 0x65	; 101
    22c2:	91 05       	cpc	r25, r1
    22c4:	0c f4       	brge	.+2      	; 0x22c8 <main+0x1da8>
    22c6:	53 c0       	rjmp	.+166    	; 0x236e <main+0x1e4e>
    22c8:	12 01       	movw	r2, r4
    22ca:	07 c0       	rjmp	.+14     	; 0x22da <main+0x1dba>
    22cc:	81 e1       	ldi	r24, 0x11	; 17
    22ce:	68 2e       	mov	r6, r24
    22d0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    22d2:	27 e1       	ldi	r18, 0x17	; 23
    22d4:	62 16       	cp	r6, r18
    22d6:	71 04       	cpc	r7, r1
    22d8:	61 f4       	brne	.+24     	; 0x22f2 <main+0x1dd2>
    22da:	c2 01       	movw	r24, r4
    22dc:	82 19       	sub	r24, r2
    22de:	93 09       	sbc	r25, r3
    22e0:	81 5a       	subi	r24, 0xA1	; 161
    22e2:	9f 40       	sbci	r25, 0x0F	; 15
    22e4:	0c f4       	brge	.+2      	; 0x22e8 <main+0x1dc8>
    22e6:	53 c0       	rjmp	.+166    	; 0x238e <main+0x1e6e>
    22e8:	12 01       	movw	r2, r4
    22ea:	07 c0       	rjmp	.+14     	; 0x22fa <main+0x1dda>
    22ec:	02 e1       	ldi	r16, 0x12	; 18
    22ee:	60 2e       	mov	r6, r16
    22f0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    22f2:	48 e1       	ldi	r20, 0x18	; 24
    22f4:	64 16       	cp	r6, r20
    22f6:	71 04       	cpc	r7, r1
    22f8:	61 f4       	brne	.+24     	; 0x2312 <main+0x1df2>
    22fa:	c2 01       	movw	r24, r4
    22fc:	82 19       	sub	r24, r2
    22fe:	93 09       	sbc	r25, r3
    2300:	85 36       	cpi	r24, 0x65	; 101
    2302:	91 05       	cpc	r25, r1
    2304:	0c f4       	brge	.+2      	; 0x2308 <main+0x1de8>
    2306:	51 c0       	rjmp	.+162    	; 0x23aa <main+0x1e8a>
    2308:	12 01       	movw	r2, r4
    230a:	07 c0       	rjmp	.+14     	; 0x231a <main+0x1dfa>
    230c:	13 e1       	ldi	r17, 0x13	; 19
    230e:	61 2e       	mov	r6, r17
    2310:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2312:	59 e1       	ldi	r21, 0x19	; 25
    2314:	65 16       	cp	r6, r21
    2316:	71 04       	cpc	r7, r1
    2318:	51 f4       	brne	.+20     	; 0x232e <main+0x1e0e>
    231a:	c2 01       	movw	r24, r4
    231c:	82 19       	sub	r24, r2
    231e:	93 09       	sbc	r25, r3
    2320:	81 5a       	subi	r24, 0xA1	; 161
    2322:	9f 40       	sbci	r25, 0x0F	; 15
    2324:	44 f4       	brge	.+16     	; 0x2336 <main+0x1e16>
    2326:	4e c0       	rjmp	.+156    	; 0x23c4 <main+0x1ea4>
    2328:	b4 e1       	ldi	r27, 0x14	; 20
    232a:	6b 2e       	mov	r6, r27
    232c:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    232e:	ba e1       	ldi	r27, 0x1A	; 26
    2330:	6b 16       	cp	r6, r27
    2332:	71 04       	cpc	r7, r1
    2334:	69 f4       	brne	.+26     	; 0x2350 <main+0x1e30>
    2336:	c2 01       	movw	r24, r4
    2338:	82 19       	sub	r24, r2
    233a:	93 09       	sbc	r25, r3
    233c:	81 5a       	subi	r24, 0xA1	; 161
    233e:	9f 40       	sbci	r25, 0x0F	; 15
    2340:	0c f4       	brge	.+2      	; 0x2344 <main+0x1e24>
    2342:	50 c0       	rjmp	.+160    	; 0x23e4 <main+0x1ec4>
    2344:	58 a6       	std	Y+40, r5	; 0x28
    2346:	4f a2       	std	Y+39, r4	; 0x27
    2348:	07 c0       	rjmp	.+14     	; 0x2358 <main+0x1e38>
    234a:	a5 e1       	ldi	r26, 0x15	; 21
    234c:	6a 2e       	mov	r6, r26
    234e:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    2350:	3b e1       	ldi	r19, 0x1B	; 27
    2352:	63 16       	cp	r6, r19
    2354:	71 04       	cpc	r7, r1
    2356:	71 f4       	brne	.+28     	; 0x2374 <main+0x1e54>
    2358:	c2 01       	movw	r24, r4
    235a:	4f a1       	ldd	r20, Y+39	; 0x27
    235c:	58 a5       	ldd	r21, Y+40	; 0x28
    235e:	84 1b       	sub	r24, r20
    2360:	95 0b       	sbc	r25, r21
    2362:	85 36       	cpi	r24, 0x65	; 101
    2364:	91 05       	cpc	r25, r1
    2366:	0c f4       	brge	.+2      	; 0x236a <main+0x1e4a>
    2368:	4a c0       	rjmp	.+148    	; 0x23fe <main+0x1ede>
    236a:	12 01       	movw	r2, r4
    236c:	07 c0       	rjmp	.+14     	; 0x237c <main+0x1e5c>
    236e:	f6 e1       	ldi	r31, 0x16	; 22
    2370:	6f 2e       	mov	r6, r31
    2372:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    2374:	5c e1       	ldi	r21, 0x1C	; 28
    2376:	65 16       	cp	r6, r21
    2378:	71 04       	cpc	r7, r1
    237a:	61 f4       	brne	.+24     	; 0x2394 <main+0x1e74>
    237c:	c2 01       	movw	r24, r4
    237e:	82 19       	sub	r24, r2
    2380:	93 09       	sbc	r25, r3
    2382:	85 36       	cpi	r24, 0x65	; 101
    2384:	91 05       	cpc	r25, r1
    2386:	0c f4       	brge	.+2      	; 0x238a <main+0x1e6a>
    2388:	4a c0       	rjmp	.+148    	; 0x241e <main+0x1efe>
    238a:	12 01       	movw	r2, r4
    238c:	07 c0       	rjmp	.+14     	; 0x239c <main+0x1e7c>
    238e:	e7 e1       	ldi	r30, 0x17	; 23
    2390:	6e 2e       	mov	r6, r30
    2392:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2394:	8d e1       	ldi	r24, 0x1D	; 29
    2396:	68 16       	cp	r6, r24
    2398:	71 04       	cpc	r7, r1
    239a:	51 f4       	brne	.+20     	; 0x23b0 <main+0x1e90>
    239c:	c2 01       	movw	r24, r4
    239e:	82 19       	sub	r24, r2
    23a0:	93 09       	sbc	r25, r3
    23a2:	81 5a       	subi	r24, 0xA1	; 161
    23a4:	9f 40       	sbci	r25, 0x0F	; 15
    23a6:	44 f4       	brge	.+16     	; 0x23b8 <main+0x1e98>
    23a8:	4a c0       	rjmp	.+148    	; 0x243e <main+0x1f1e>
    23aa:	78 e1       	ldi	r23, 0x18	; 24
    23ac:	67 2e       	mov	r6, r23
    23ae:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && /*counter - counterRef > totalStepLength2*fixtureMotorLoadBack &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    23b0:	be e1       	ldi	r27, 0x1E	; 30
    23b2:	6b 16       	cp	r6, r27
    23b4:	71 04       	cpc	r7, r1
    23b6:	49 f4       	brne	.+18     	; 0x23ca <main+0x1eaa>
    23b8:	80 91 96 03 	lds	r24, 0x0396
    23bc:	83 fd       	sbrc	r24, 3
    23be:	50 c0       	rjmp	.+160    	; 0x2460 <main+0x1f40>
    23c0:	12 01       	movw	r2, r4
    23c2:	07 c0       	rjmp	.+14     	; 0x23d2 <main+0x1eb2>
    23c4:	69 e1       	ldi	r22, 0x19	; 25
    23c6:	66 2e       	mov	r6, r22
    23c8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    23ca:	2f e1       	ldi	r18, 0x1F	; 31
    23cc:	62 16       	cp	r6, r18
    23ce:	71 04       	cpc	r7, r1
    23d0:	61 f4       	brne	.+24     	; 0x23ea <main+0x1eca>
    23d2:	c2 01       	movw	r24, r4
    23d4:	82 19       	sub	r24, r2
    23d6:	93 09       	sbc	r25, r3
    23d8:	89 5e       	subi	r24, 0xE9	; 233
    23da:	93 40       	sbci	r25, 0x03	; 3
    23dc:	0c f4       	brge	.+2      	; 0x23e0 <main+0x1ec0>
    23de:	a7 c1       	rjmp	.+846    	; 0x272e <main+0x220e>
    23e0:	12 01       	movw	r2, r4
    23e2:	07 c0       	rjmp	.+14     	; 0x23f2 <main+0x1ed2>
    23e4:	5a e1       	ldi	r21, 0x1A	; 26
    23e6:	65 2e       	mov	r6, r21
    23e8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureHome == 0){
    23ea:	40 e2       	ldi	r20, 0x20	; 32
    23ec:	64 16       	cp	r6, r20
    23ee:	71 04       	cpc	r7, r1
    23f0:	49 f4       	brne	.+18     	; 0x2404 <main+0x1ee4>
    23f2:	80 91 96 03 	lds	r24, 0x0396
    23f6:	82 fd       	sbrc	r24, 2
    23f8:	a6 c1       	rjmp	.+844    	; 0x2746 <main+0x2226>
    23fa:	12 01       	movw	r2, r4
    23fc:	07 c0       	rjmp	.+14     	; 0x240c <main+0x1eec>
    23fe:	4b e1       	ldi	r20, 0x1B	; 27
    2400:	64 2e       	mov	r6, r20
    2402:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    2404:	51 e2       	ldi	r21, 0x21	; 33
    2406:	65 16       	cp	r6, r21
    2408:	71 04       	cpc	r7, r1
    240a:	61 f4       	brne	.+24     	; 0x2424 <main+0x1f04>
    240c:	c2 01       	movw	r24, r4
    240e:	82 19       	sub	r24, r2
    2410:	93 09       	sbc	r25, r3
    2412:	85 36       	cpi	r24, 0x65	; 101
    2414:	91 05       	cpc	r25, r1
    2416:	0c f4       	brge	.+2      	; 0x241a <main+0x1efa>
    2418:	a4 c1       	rjmp	.+840    	; 0x2762 <main+0x2242>
    241a:	12 01       	movw	r2, r4
    241c:	07 c0       	rjmp	.+14     	; 0x242c <main+0x1f0c>
    241e:	3c e1       	ldi	r19, 0x1C	; 28
    2420:	63 2e       	mov	r6, r19
    2422:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    2424:	82 e2       	ldi	r24, 0x22	; 34
    2426:	68 16       	cp	r6, r24
    2428:	71 04       	cpc	r7, r1
    242a:	61 f4       	brne	.+24     	; 0x2444 <main+0x1f24>
    242c:	c2 01       	movw	r24, r4
    242e:	82 19       	sub	r24, r2
    2430:	93 09       	sbc	r25, r3
    2432:	81 5a       	subi	r24, 0xA1	; 161
    2434:	9f 40       	sbci	r25, 0x0F	; 15
    2436:	0c f4       	brge	.+2      	; 0x243a <main+0x1f1a>
    2438:	a6 c1       	rjmp	.+844    	; 0x2786 <main+0x2266>
    243a:	12 01       	movw	r2, r4
    243c:	07 c0       	rjmp	.+14     	; 0x244c <main+0x1f2c>
    243e:	2d e1       	ldi	r18, 0x1D	; 29
    2440:	62 2e       	mov	r6, r18
    2442:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    2444:	b3 e2       	ldi	r27, 0x23	; 35
    2446:	6b 16       	cp	r6, r27
    2448:	71 04       	cpc	r7, r1
    244a:	69 f4       	brne	.+26     	; 0x2466 <main+0x1f46>
    244c:	c2 01       	movw	r24, r4
    244e:	82 19       	sub	r24, r2
    2450:	93 09       	sbc	r25, r3
    2452:	0b 97       	sbiw	r24, 0x0b	; 11
    2454:	0c f4       	brge	.+2      	; 0x2458 <main+0x1f38>
    2456:	a4 c1       	rjmp	.+840    	; 0x27a0 <main+0x2280>
    2458:	94 e2       	ldi	r25, 0x24	; 36
    245a:	69 2e       	mov	r6, r25
    245c:	71 2c       	mov	r7, r1
    245e:	b7 c1       	rjmp	.+878    	; 0x27ce <main+0x22ae>
    2460:	8e e1       	ldi	r24, 0x1E	; 30
    2462:	68 2e       	mov	r6, r24
    2464:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    2466:	f3 01       	movw	r30, r6
    2468:	e4 32       	cpi	r30, 0x24	; 36
    246a:	f1 05       	cpc	r31, r1
    246c:	08 f0       	brcs	.+2      	; 0x2470 <main+0x1f50>
    246e:	af c1       	rjmp	.+862    	; 0x27ce <main+0x22ae>
    2470:	e6 54       	subi	r30, 0x46	; 70
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	ee 0f       	add	r30, r30
    2476:	ff 1f       	adc	r31, r31
    2478:	05 90       	lpm	r0, Z+
    247a:	f4 91       	lpm	r31, Z+
    247c:	e0 2d       	mov	r30, r0
    247e:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    2480:	80 91 96 03 	lds	r24, 0x0396
    2484:	90 91 92 03 	lds	r25, 0x0392
    2488:	20 91 94 03 	lds	r18, 0x0394
    248c:	82 ff       	sbrs	r24, 2
    248e:	08 c0       	rjmp	.+16     	; 0x24a0 <main+0x1f80>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    2490:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2492:	27 7f       	andi	r18, 0xF7	; 247
    2494:	20 93 94 03 	sts	0x0394, r18
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2498:	90 62       	ori	r25, 0x20	; 32
    249a:	90 93 92 03 	sts	0x0392, r25
    249e:	97 c1       	rjmp	.+814    	; 0x27ce <main+0x22ae>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    24a0:	9f 7d       	andi	r25, 0xDF	; 223
    24a2:	90 93 92 03 	sts	0x0392, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    24a6:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    24a8:	28 60       	ori	r18, 0x08	; 8
    24aa:	20 93 94 03 	sts	0x0394, r18
						if(print0 == 1){
    24ae:	2b a5       	ldd	r18, Y+43	; 0x2b
    24b0:	3c a5       	ldd	r19, Y+44	; 0x2c
    24b2:	21 30       	cpi	r18, 0x01	; 1
    24b4:	31 05       	cpc	r19, r1
    24b6:	09 f0       	breq	.+2      	; 0x24ba <main+0x1f9a>
    24b8:	45 c0       	rjmp	.+138    	; 0x2544 <main+0x2024>
							OrangutanLCD::gotoXY(0,1);
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	61 e0       	ldi	r22, 0x01	; 1
    24be:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    24c2:	84 e4       	ldi	r24, 0x44	; 68
    24c4:	93 e0       	ldi	r25, 0x03	; 3
    24c6:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
    24ca:	1c a6       	std	Y+44, r1	; 0x2c
    24cc:	1b a6       	std	Y+43, r1	; 0x2b
    24ce:	3a c0       	rjmp	.+116    	; 0x2544 <main+0x2024>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    24d0:	20 91 94 03 	lds	r18, 0x0394
    24d4:	32 2f       	mov	r19, r18
    24d6:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    24d8:	c2 01       	movw	r24, r4
    24da:	68 ec       	ldi	r22, 0xC8	; 200
    24dc:	70 e0       	ldi	r23, 0x00	; 0
    24de:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__divmodhi4>
    24e2:	84 36       	cpi	r24, 0x64	; 100
    24e4:	91 05       	cpc	r25, r1
    24e6:	24 f4       	brge	.+8      	; 0x24f0 <main+0x1fd0>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    24e8:	2c 7f       	andi	r18, 0xFC	; 252
    24ea:	20 93 94 03 	sts	0x0394, r18
    24ee:	03 c0       	rjmp	.+6      	; 0x24f6 <main+0x1fd6>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    24f0:	32 60       	ori	r19, 0x02	; 2
    24f2:	30 93 94 03 	sts	0x0394, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    24f6:	80 91 92 03 	lds	r24, 0x0392
    24fa:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    24fc:	84 60       	ori	r24, 0x04	; 4
    24fe:	80 93 92 03 	sts	0x0392, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    2502:	80 91 94 03 	lds	r24, 0x0394
    2506:	8b 7f       	andi	r24, 0xFB	; 251
    2508:	80 93 94 03 	sts	0x0394, r24
    250c:	41 e0       	ldi	r20, 0x01	; 1
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	5e 87       	std	Y+14, r21	; 0x0e
    2512:	4d 87       	std	Y+13, r20	; 0x0d
    2514:	5c c1       	rjmp	.+696    	; 0x27ce <main+0x22ae>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2516:	80 91 94 03 	lds	r24, 0x0394
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    251a:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    251c:	86 61       	ori	r24, 0x16	; 22
    251e:	80 93 94 03 	sts	0x0394, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2522:	80 91 92 03 	lds	r24, 0x0392
    2526:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2528:	8b 7f       	andi	r24, 0xFB	; 251
    252a:	80 93 92 03 	sts	0x0392, r24
    252e:	4d c1       	rjmp	.+666    	; 0x27ca <main+0x22aa>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2530:	80 91 92 03 	lds	r24, 0x0392
    2534:	8f 7d       	andi	r24, 0xDF	; 223
    2536:	80 93 92 03 	sts	0x0392, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    253a:	80 91 94 03 	lds	r24, 0x0394
    253e:	88 60       	ori	r24, 0x08	; 8
    2540:	80 93 94 03 	sts	0x0394, r24
    2544:	1c 8e       	std	Y+28, r1	; 0x1c
    2546:	1b 8e       	std	Y+27, r1	; 0x1b
    2548:	42 c1       	rjmp	.+644    	; 0x27ce <main+0x22ae>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    254a:	80 91 94 03 	lds	r24, 0x0394
    254e:	8f 7e       	andi	r24, 0xEF	; 239
    2550:	80 93 94 03 	sts	0x0394, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2554:	80 91 92 03 	lds	r24, 0x0392
    2558:	80 62       	ori	r24, 0x20	; 32
    255a:	80 93 92 03 	sts	0x0392, r24
    255e:	37 c1       	rjmp	.+622    	; 0x27ce <main+0x22ae>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2560:	80 91 92 03 	lds	r24, 0x0392
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2564:	80 63       	ori	r24, 0x30	; 48
    2566:	81 c0       	rjmp	.+258    	; 0x266a <main+0x214a>
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    2568:	80 91 93 03 	lds	r24, 0x0393
    256c:	81 60       	ori	r24, 0x01	; 1
    256e:	80 93 93 03 	sts	0x0393, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2572:	80 91 92 03 	lds	r24, 0x0392
    2576:	8f 77       	andi	r24, 0x7F	; 127
    2578:	80 93 92 03 	sts	0x0392, r24
    257c:	e3 cf       	rjmp	.-58     	; 0x2544 <main+0x2024>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    257e:	80 91 94 03 	lds	r24, 0x0394
    2582:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2584:	8f 7d       	andi	r24, 0xDF	; 223
    2586:	80 93 94 03 	sts	0x0394, r24
    258a:	21 e0       	ldi	r18, 0x01	; 1
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	3e 8b       	std	Y+22, r19	; 0x16
    2590:	2d 8b       	std	Y+21, r18	; 0x15
    2592:	1d c1       	rjmp	.+570    	; 0x27ce <main+0x22ae>
					break;
				case CLEAN1_1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2594:	80 91 92 03 	lds	r24, 0x0392
    2598:	80 62       	ori	r24, 0x20	; 32
    259a:	80 93 92 03 	sts	0x0392, r24
					OrangutanLCD::gotoXY(0,1);
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	61 e0       	ldi	r22, 0x01	; 1
    25a2:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("SET MOTOR HIGH");
    25a6:	87 e7       	ldi	r24, 0x77	; 119
    25a8:	93 e0       	ldi	r25, 0x03	; 3
    25aa:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    25ae:	80 91 92 03 	lds	r24, 0x0392
    25b2:	8f 7e       	andi	r24, 0xEF	; 239
    25b4:	78 c0       	rjmp	.+240    	; 0x26a6 <main+0x2186>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    25b6:	80 91 92 03 	lds	r24, 0x0392
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    25ba:	80 63       	ori	r24, 0x30	; 48
    25bc:	40 c0       	rjmp	.+128    	; 0x263e <main+0x211e>
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    25be:	80 91 92 03 	lds	r24, 0x0392
    25c2:	8f 77       	andi	r24, 0x7F	; 127
    25c4:	80 93 92 03 	sts	0x0392, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    25c8:	80 91 94 03 	lds	r24, 0x0394
    25cc:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    25ce:	8f 7d       	andi	r24, 0xDF	; 223
    25d0:	80 93 94 03 	sts	0x0394, r24
    25d4:	1c 8e       	std	Y+28, r1	; 0x1c
    25d6:	1b 8e       	std	Y+27, r1	; 0x1b
    25d8:	a1 e0       	ldi	r26, 0x01	; 1
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	be 8b       	std	Y+22, r27	; 0x16
    25de:	ad 8b       	std	Y+21, r26	; 0x15
    25e0:	f6 c0       	rjmp	.+492    	; 0x27ce <main+0x22ae>
					break;
				case CLEAN1_3:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    25e2:	80 91 92 03 	lds	r24, 0x0392
    25e6:	80 62       	ori	r24, 0x20	; 32
    25e8:	80 93 92 03 	sts	0x0392, r24
    25ec:	21 e0       	ldi	r18, 0x01	; 1
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	3c 8f       	std	Y+28, r19	; 0x1c
    25f2:	2b 8f       	std	Y+27, r18	; 0x1b
    25f4:	ec c0       	rjmp	.+472    	; 0x27ce <main+0x22ae>
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    25f6:	80 91 94 03 	lds	r24, 0x0394
    25fa:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    25fc:	80 62       	ori	r24, 0x20	; 32
    25fe:	80 93 94 03 	sts	0x0394, r24
    2602:	1c 8e       	std	Y+28, r1	; 0x1c
    2604:	1b 8e       	std	Y+27, r1	; 0x1b
    2606:	1e 8a       	std	Y+22, r1	; 0x16
    2608:	1d 8a       	std	Y+21, r1	; 0x15
    260a:	e1 c0       	rjmp	.+450    	; 0x27ce <main+0x22ae>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    260c:	80 91 93 03 	lds	r24, 0x0393
    2610:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2612:	8b 7f       	andi	r24, 0xFB	; 251
    2614:	80 93 93 03 	sts	0x0393, r24
    2618:	95 cf       	rjmp	.-214    	; 0x2544 <main+0x2024>
						print15 = 0;
					}*/
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    261a:	80 91 95 03 	lds	r24, 0x0395
    261e:	81 60       	ori	r24, 0x01	; 1
    2620:	80 93 95 03 	sts	0x0395, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2624:	80 91 94 03 	lds	r24, 0x0394
    2628:	8f 77       	andi	r24, 0x7F	; 127
    262a:	80 93 94 03 	sts	0x0394, r24
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	50 e0       	ldi	r21, 0x00	; 0
    2632:	5c a3       	std	Y+36, r21	; 0x24
    2634:	4b a3       	std	Y+35, r20	; 0x23
    2636:	cb c0       	rjmp	.+406    	; 0x27ce <main+0x22ae>
					break;
				case CLEAN2_1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2638:	80 91 92 03 	lds	r24, 0x0392
    263c:	80 62       	ori	r24, 0x20	; 32
    263e:	80 93 92 03 	sts	0x0392, r24
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	9c 8f       	std	Y+28, r25	; 0x1c
    2648:	8b 8f       	std	Y+27, r24	; 0x1b
    264a:	c1 c0       	rjmp	.+386    	; 0x27ce <main+0x22ae>
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    264c:	80 91 95 03 	lds	r24, 0x0395
    2650:	8e 7f       	andi	r24, 0xFE	; 254
    2652:	80 93 95 03 	sts	0x0395, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2656:	80 91 94 03 	lds	r24, 0x0394
    265a:	80 68       	ori	r24, 0x80	; 128
    265c:	80 93 94 03 	sts	0x0394, r24
    2660:	38 c0       	rjmp	.+112    	; 0x26d2 <main+0x21b2>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2662:	80 91 92 03 	lds	r24, 0x0392
    2666:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2668:	80 62       	ori	r24, 0x20	; 32
    266a:	80 93 92 03 	sts	0x0392, r24
    266e:	a1 e0       	ldi	r26, 0x01	; 1
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	bc 8f       	std	Y+28, r27	; 0x1c
    2674:	ab 8f       	std	Y+27, r26	; 0x1b
    2676:	ab c0       	rjmp	.+342    	; 0x27ce <main+0x22ae>
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2678:	80 91 93 03 	lds	r24, 0x0393
    267c:	8b 7f       	andi	r24, 0xFB	; 251
    267e:	80 93 93 03 	sts	0x0393, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2682:	80 91 95 03 	lds	r24, 0x0395
    2686:	81 60       	ori	r24, 0x01	; 1
    2688:	80 93 95 03 	sts	0x0395, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    268c:	80 91 94 03 	lds	r24, 0x0394
    2690:	8f 77       	andi	r24, 0x7F	; 127
    2692:	80 93 94 03 	sts	0x0394, r24
    2696:	21 e0       	ldi	r18, 0x01	; 1
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	3c a3       	std	Y+36, r19	; 0x24
    269c:	2b a3       	std	Y+35, r18	; 0x23
    269e:	52 cf       	rjmp	.-348    	; 0x2544 <main+0x2024>
					break;
				case CLEAN2_3:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    26a0:	80 91 92 03 	lds	r24, 0x0392
    26a4:	80 62       	ori	r24, 0x20	; 32
    26a6:	80 93 92 03 	sts	0x0392, r24
    26aa:	41 e0       	ldi	r20, 0x01	; 1
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	5c 8f       	std	Y+28, r21	; 0x1c
    26b0:	4b 8f       	std	Y+27, r20	; 0x1b
    26b2:	8d c0       	rjmp	.+282    	; 0x27ce <main+0x22ae>
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    26b4:	80 91 95 03 	lds	r24, 0x0395
    26b8:	8e 7f       	andi	r24, 0xFE	; 254
    26ba:	80 93 95 03 	sts	0x0395, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    26be:	80 91 94 03 	lds	r24, 0x0394
    26c2:	80 68       	ori	r24, 0x80	; 128
    26c4:	80 93 94 03 	sts	0x0394, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    26c8:	80 91 93 03 	lds	r24, 0x0393
    26cc:	87 7f       	andi	r24, 0xF7	; 247
    26ce:	80 93 93 03 	sts	0x0393, r24
    26d2:	1c a2       	std	Y+36, r1	; 0x24
    26d4:	1b a2       	std	Y+35, r1	; 0x23
    26d6:	36 cf       	rjmp	.-404    	; 0x2544 <main+0x2024>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					//u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    26d8:	80 91 95 03 	lds	r24, 0x0395
    26dc:	87 7f       	andi	r24, 0xF7	; 247
    26de:	80 93 95 03 	sts	0x0395, r24
    26e2:	30 cf       	rjmp	.-416    	; 0x2544 <main+0x2024>
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    26e4:	80 91 95 03 	lds	r24, 0x0395
    26e8:	88 60       	ori	r24, 0x08	; 8
    26ea:	10 c0       	rjmp	.+32     	; 0x270c <main+0x21ec>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    26ec:	80 91 93 03 	lds	r24, 0x0393
    26f0:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    26f2:	8f 7d       	andi	r24, 0xDF	; 223
    26f4:	80 93 93 03 	sts	0x0393, r24
    26f8:	1c 8e       	std	Y+28, r1	; 0x1c
    26fa:	1b 8e       	std	Y+27, r1	; 0x1b
    26fc:	21 e0       	ldi	r18, 0x01	; 1
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	3e 83       	std	Y+6, r19	; 0x06
    2702:	2d 83       	std	Y+5, r18	; 0x05
    2704:	64 c0       	rjmp	.+200    	; 0x27ce <main+0x22ae>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    2706:	80 91 95 03 	lds	r24, 0x0395
    270a:	8d 7f       	andi	r24, 0xFD	; 253
    270c:	80 93 95 03 	sts	0x0395, r24
    2710:	5e c0       	rjmp	.+188    	; 0x27ce <main+0x22ae>
				case DRY2:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    2712:	80 91 93 03 	lds	r24, 0x0393
    2716:	8f 7b       	andi	r24, 0xBF	; 191
    2718:	80 93 93 03 	sts	0x0393, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    271c:	80 91 95 03 	lds	r24, 0x0395
    2720:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    2722:	8b 7f       	andi	r24, 0xFB	; 251
    2724:	80 93 95 03 	sts	0x0395, r24
    2728:	1e 82       	std	Y+6, r1	; 0x06
    272a:	1d 82       	std	Y+5, r1	; 0x05
    272c:	50 c0       	rjmp	.+160    	; 0x27ce <main+0x22ae>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    272e:	80 91 94 03 	lds	r24, 0x0394
    2732:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    2734:	80 61       	ori	r24, 0x10	; 16
    2736:	80 93 94 03 	sts	0x0394, r24
    273a:	1c 8e       	std	Y+28, r1	; 0x1c
    273c:	1b 8e       	std	Y+27, r1	; 0x1b
    273e:	0f e1       	ldi	r16, 0x1F	; 31
    2740:	60 2e       	mov	r6, r16
    2742:	71 2c       	mov	r7, r1
    2744:	44 c0       	rjmp	.+136    	; 0x27ce <main+0x22ae>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    2746:	80 91 92 03 	lds	r24, 0x0392
    274a:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    274c:	80 62       	ori	r24, 0x20	; 32
    274e:	80 93 92 03 	sts	0x0392, r24
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	9c 8f       	std	Y+28, r25	; 0x1c
    2758:	8b 8f       	std	Y+27, r24	; 0x1b
    275a:	10 e2       	ldi	r17, 0x20	; 32
    275c:	61 2e       	mov	r6, r17
    275e:	71 2c       	mov	r7, r1
    2760:	36 c0       	rjmp	.+108    	; 0x27ce <main+0x22ae>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2762:	80 91 92 03 	lds	r24, 0x0392
    2766:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    2768:	84 60       	ori	r24, 0x04	; 4
    276a:	80 93 92 03 	sts	0x0392, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    276e:	80 91 94 03 	lds	r24, 0x0394
    2772:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2774:	8f 7e       	andi	r24, 0xEF	; 239
    2776:	80 93 94 03 	sts	0x0394, r24
    277a:	1c 8e       	std	Y+28, r1	; 0x1c
    277c:	1b 8e       	std	Y+27, r1	; 0x1b
    277e:	b1 e2       	ldi	r27, 0x21	; 33
    2780:	6b 2e       	mov	r6, r27
    2782:	71 2c       	mov	r7, r1
    2784:	24 c0       	rjmp	.+72     	; 0x27ce <main+0x22ae>
					break;
    2786:	a2 e2       	ldi	r26, 0x22	; 34
    2788:	6a 2e       	mov	r6, r26
    278a:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    278c:	80 91 92 03 	lds	r24, 0x0392
    2790:	8d 7f       	andi	r24, 0xFD	; 253
    2792:	80 93 92 03 	sts	0x0392, r24
    2796:	a1 e0       	ldi	r26, 0x01	; 1
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	be 87       	std	Y+14, r27	; 0x0e
    279c:	ad 87       	std	Y+13, r26	; 0x0d
    279e:	17 c0       	rjmp	.+46     	; 0x27ce <main+0x22ae>
					plateLoadMotor = 1;
					break;
    27a0:	f3 e2       	ldi	r31, 0x23	; 35
    27a2:	6f 2e       	mov	r6, r31
    27a4:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    27a6:	80 91 92 03 	lds	r24, 0x0392
    27aa:	8b 7f       	andi	r24, 0xFB	; 251
    27ac:	80 93 92 03 	sts	0x0392, r24
					if(print35 == 1){
    27b0:	2d a9       	ldd	r18, Y+53	; 0x35
    27b2:	3e a9       	ldd	r19, Y+54	; 0x36
    27b4:	21 30       	cpi	r18, 0x01	; 1
    27b6:	31 05       	cpc	r19, r1
    27b8:	41 f4       	brne	.+16     	; 0x27ca <main+0x22aa>
						OrangutanLCD::clear();
    27ba:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    27be:	82 e5       	ldi	r24, 0x52	; 82
    27c0:	93 e0       	ldi	r25, 0x03	; 3
    27c2:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
    27c6:	1e aa       	std	Y+54, r1	; 0x36
    27c8:	1d aa       	std	Y+53, r1	; 0x35
    27ca:	1e 86       	std	Y+14, r1	; 0x0e
    27cc:	1d 86       	std	Y+13, r1	; 0x0d
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    27ce:	4d b7       	in	r20, 0x3d	; 61
    27d0:	5e b7       	in	r21, 0x3e	; 62
    27d2:	42 51       	subi	r20, 0x12	; 18
    27d4:	50 40       	sbci	r21, 0x00	; 0
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	5e bf       	out	0x3e, r21	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	4d bf       	out	0x3d, r20	; 61
    27e0:	ed b7       	in	r30, 0x3d	; 61
    27e2:	fe b7       	in	r31, 0x3e	; 62
    27e4:	31 96       	adiw	r30, 0x01	; 1
    27e6:	82 e0       	ldi	r24, 0x02	; 2
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	ad b7       	in	r26, 0x3d	; 61
    27ec:	be b7       	in	r27, 0x3e	; 62
    27ee:	12 96       	adiw	r26, 0x02	; 2
    27f0:	9c 93       	st	X, r25
    27f2:	8e 93       	st	-X, r24
    27f4:	11 97       	sbiw	r26, 0x01	; 1
    27f6:	93 83       	std	Z+3, r25	; 0x03
    27f8:	82 83       	std	Z+2, r24	; 0x02
    27fa:	95 83       	std	Z+5, r25	; 0x05
    27fc:	84 83       	std	Z+4, r24	; 0x04
    27fe:	97 83       	std	Z+7, r25	; 0x07
    2800:	86 83       	std	Z+6, r24	; 0x06
    2802:	21 e0       	ldi	r18, 0x01	; 1
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	31 87       	std	Z+9, r19	; 0x09
    2808:	20 87       	std	Z+8, r18	; 0x08
    280a:	33 87       	std	Z+11, r19	; 0x0b
    280c:	22 87       	std	Z+10, r18	; 0x0a
    280e:	35 87       	std	Z+13, r19	; 0x0d
    2810:	24 87       	std	Z+12, r18	; 0x0c
    2812:	37 87       	std	Z+15, r19	; 0x0f
    2814:	26 87       	std	Z+14, r18	; 0x0e
    2816:	31 8b       	std	Z+17, r19	; 0x11
    2818:	20 8b       	std	Z+16, r18	; 0x10
    281a:	c2 01       	movw	r24, r4
    281c:	b1 01       	movw	r22, r2
    281e:	4f a1       	ldd	r20, Y+39	; 0x27
    2820:	58 a5       	ldd	r21, Y+40	; 0x28
    2822:	2d 85       	ldd	r18, Y+13	; 0x0d
    2824:	3e 85       	ldd	r19, Y+14	; 0x0e
    2826:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2828:	1c 8d       	ldd	r17, Y+28	; 0x1c
    282a:	ed 88       	ldd	r14, Y+21	; 0x15
    282c:	fe 88       	ldd	r15, Y+22	; 0x16
    282e:	cb a0       	ldd	r12, Y+35	; 0x23
    2830:	dc a0       	ldd	r13, Y+36	; 0x24
    2832:	ad 80       	ldd	r10, Y+5	; 0x05
    2834:	be 80       	ldd	r11, Y+6	; 0x06
    2836:	e2 e0       	ldi	r30, 0x02	; 2
    2838:	8e 2e       	mov	r8, r30
    283a:	91 2c       	mov	r9, r1
    283c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    2840:	4d b7       	in	r20, 0x3d	; 61
    2842:	5e b7       	in	r21, 0x3e	; 62
    2844:	4e 5e       	subi	r20, 0xEE	; 238
    2846:	5f 4f       	sbci	r21, 0xFF	; 255
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	5e bf       	out	0x3e, r21	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	4d bf       	out	0x3d, r20	; 61
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("BOTH B");
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    285a:	54 e2       	ldi	r21, 0x24	; 36
    285c:	65 16       	cp	r6, r21
    285e:	71 04       	cpc	r7, r1
    2860:	09 f4       	brne	.+2      	; 0x2864 <main+0x2344>
    2862:	91 c4       	rjmp	.+2338   	; 0x3186 <main+0x2c66>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    2864:	08 94       	sec
    2866:	41 1c       	adc	r4, r1
    2868:	51 1c       	adc	r5, r1
    286a:	b3 cb       	rjmp	.-2202   	; 0x1fd2 <main+0x1ab2>
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    286c:	82 e0       	ldi	r24, 0x02	; 2
    286e:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    2872:	88 23       	and	r24, r24
    2874:	09 f4       	brne	.+2      	; 0x2878 <main+0x2358>
    2876:	87 c4       	rjmp	.+2318   	; 0x3186 <main+0x2c66>
			OrangutanLCD::gotoXY(7,0);
    2878:	87 e0       	ldi	r24, 0x07	; 7
    287a:	60 e0       	ldi	r22, 0x00	; 0
    287c:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("DEBUG");
    2880:	87 e3       	ldi	r24, 0x37	; 55
    2882:	93 e0       	ldi	r25, 0x03	; 3
    2884:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2888:	80 91 92 03 	lds	r24, 0x0392
    288c:	80 62       	ori	r24, 0x20	; 32
    288e:	80 93 92 03 	sts	0x0392, r24
    2892:	22 24       	eor	r2, r2
    2894:	33 24       	eor	r3, r3
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	9c ab       	std	Y+52, r25	; 0x34
    289c:	8b ab       	std	Y+51, r24	; 0x33
    289e:	9a a7       	std	Y+42, r25	; 0x2a
    28a0:	89 a7       	std	Y+41, r24	; 0x29
    28a2:	1a a2       	std	Y+34, r1	; 0x22
    28a4:	19 a2       	std	Y+33, r1	; 0x21
    28a6:	25 96       	adiw	r28, 0x05	; 5
    28a8:	1f ae       	std	Y+63, r1	; 0x3f
    28aa:	1e ae       	std	Y+62, r1	; 0x3e
    28ac:	25 97       	sbiw	r28, 0x05	; 5
    28ae:	9a 8f       	std	Y+26, r25	; 0x1a
    28b0:	89 8f       	std	Y+25, r24	; 0x19
    28b2:	1c 8a       	std	Y+20, r1	; 0x14
    28b4:	1b 8a       	std	Y+19, r1	; 0x13
    28b6:	1a aa       	std	Y+50, r1	; 0x32
    28b8:	19 aa       	std	Y+49, r1	; 0x31
    28ba:	1c 86       	std	Y+12, r1	; 0x0c
    28bc:	1b 86       	std	Y+11, r1	; 0x0b
    28be:	1c 82       	std	Y+4, r1	; 0x04
    28c0:	1b 82       	std	Y+3, r1	; 0x03
    28c2:	66 24       	eor	r6, r6
    28c4:	77 24       	eor	r7, r7
    28c6:	44 24       	eor	r4, r4
    28c8:	55 24       	eor	r5, r5
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    28ca:	84 e4       	ldi	r24, 0x44	; 68
    28cc:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    28d6:	85 e4       	ldi	r24, 0x45	; 69
    28d8:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    28dc:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z11i2c_readAckv>
    28e0:	80 93 96 03 	sts	0x0396, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    28e4:	0e 94 92 19 	call	0x3324	; 0x3324 <_Z11i2c_readNakv>
    28e8:	80 93 97 03 	sts	0x0397, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    28ec:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Z8i2c_stopv>
				
				if(state != INIT){
    28f0:	61 14       	cp	r6, r1
    28f2:	71 04       	cpc	r7, r1
    28f4:	79 f0       	breq	.+30     	; 0x2914 <main+0x23f4>
					OrangutanLCD::gotoXY(0,1);
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	61 e0       	ldi	r22, 0x01	; 1
    28fa:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    28fe:	8d e3       	ldi	r24, 0x3D	; 61
    2900:	93 e0       	ldi	r25, 0x03	; 3
    2902:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
    2906:	b3 01       	movw	r22, r6
    2908:	88 27       	eor	r24, r24
    290a:	77 fd       	sbrc	r23, 7
    290c:	80 95       	com	r24
    290e:	98 2f       	mov	r25, r24
    2910:	0e 94 44 1c 	call	0x3888	; 0x3888 <_ZN12OrangutanLCD5printEl>
						button = 0;
						stateButton = 0;
					}
				}*/

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    2914:	c2 01       	movw	r24, r4
    2916:	be 01       	movw	r22, r28
    2918:	6f 5f       	subi	r22, 0xFF	; 255
    291a:	7f 4f       	sbci	r23, 0xFF	; 255
    291c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>
    2920:	28 2f       	mov	r18, r24

				//state transitions
	
				if(state == INIT && buttonTriggered){
    2922:	61 14       	cp	r6, r1
    2924:	71 04       	cpc	r7, r1
    2926:	21 f4       	brne	.+8      	; 0x2930 <main+0x2410>
    2928:	88 23       	and	r24, r24
    292a:	09 f0       	breq	.+2      	; 0x292e <main+0x240e>
    292c:	69 c4       	rjmp	.+2258   	; 0x3200 <main+0x2ce0>
    292e:	6c c4       	rjmp	.+2264   	; 0x3208 <main+0x2ce8>
					buttonTriggered = false;
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    2930:	91 e0       	ldi	r25, 0x01	; 1
    2932:	69 16       	cp	r6, r25
    2934:	71 04       	cpc	r7, r1
    2936:	59 f4       	brne	.+22     	; 0x294e <main+0x242e>
    2938:	c2 01       	movw	r24, r4
    293a:	82 19       	sub	r24, r2
    293c:	93 09       	sbc	r25, r3
    293e:	81 5a       	subi	r24, 0xA1	; 161
    2940:	9f 40       	sbci	r25, 0x0F	; 15
    2942:	a4 f0       	brlt	.+40     	; 0x296c <main+0x244c>
    2944:	12 01       	movw	r2, r4
    2946:	45 e2       	ldi	r20, 0x25	; 37
    2948:	64 2e       	mov	r6, r20
    294a:	71 2c       	mov	r7, r1
    294c:	0f c0       	rjmp	.+30     	; 0x296c <main+0x244c>
					state = WAIT;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    294e:	b2 e0       	ldi	r27, 0x02	; 2
    2950:	6b 16       	cp	r6, r27
    2952:	71 04       	cpc	r7, r1
    2954:	59 f4       	brne	.+22     	; 0x296c <main+0x244c>
    2956:	c2 01       	movw	r24, r4
    2958:	82 19       	sub	r24, r2
    295a:	93 09       	sbc	r25, r3
    295c:	85 36       	cpi	r24, 0x65	; 101
    295e:	91 05       	cpc	r25, r1
    2960:	94 f0       	brlt	.+36     	; 0x2986 <main+0x2466>
    2962:	12 01       	movw	r2, r4
    2964:	35 e2       	ldi	r19, 0x25	; 37
    2966:	63 2e       	mov	r6, r19
    2968:	71 2c       	mov	r7, r1
    296a:	0d c0       	rjmp	.+26     	; 0x2986 <main+0x2466>
					state = WAIT;
					counterRef = counter;
				}
				if(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    296c:	33 e0       	ldi	r19, 0x03	; 3
    296e:	63 16       	cp	r6, r19
    2970:	71 04       	cpc	r7, r1
    2972:	49 f4       	brne	.+18     	; 0x2986 <main+0x2466>
    2974:	80 91 96 03 	lds	r24, 0x0396
    2978:	81 fd       	sbrc	r24, 1
    297a:	12 c0       	rjmp	.+36     	; 0x29a0 <main+0x2480>
    297c:	12 01       	movw	r2, r4
    297e:	95 e2       	ldi	r25, 0x25	; 37
    2980:	69 2e       	mov	r6, r25
    2982:	71 2c       	mov	r7, r1
    2984:	0d c0       	rjmp	.+26     	; 0x29a0 <main+0x2480>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    2986:	44 e0       	ldi	r20, 0x04	; 4
    2988:	64 16       	cp	r6, r20
    298a:	71 04       	cpc	r7, r1
    298c:	49 f4       	brne	.+18     	; 0x29a0 <main+0x2480>
    298e:	80 91 96 03 	lds	r24, 0x0396
    2992:	83 fd       	sbrc	r24, 3
    2994:	14 c0       	rjmp	.+40     	; 0x29be <main+0x249e>
    2996:	12 01       	movw	r2, r4
    2998:	85 e2       	ldi	r24, 0x25	; 37
    299a:	68 2e       	mov	r6, r24
    299c:	71 2c       	mov	r7, r1
    299e:	0f c0       	rjmp	.+30     	; 0x29be <main+0x249e>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    29a0:	55 e0       	ldi	r21, 0x05	; 5
    29a2:	65 16       	cp	r6, r21
    29a4:	71 04       	cpc	r7, r1
    29a6:	59 f4       	brne	.+22     	; 0x29be <main+0x249e>
    29a8:	c2 01       	movw	r24, r4
    29aa:	82 19       	sub	r24, r2
    29ac:	93 09       	sbc	r25, r3
    29ae:	85 36       	cpi	r24, 0x65	; 101
    29b0:	91 05       	cpc	r25, r1
    29b2:	a4 f0       	brlt	.+40     	; 0x29dc <main+0x24bc>
    29b4:	12 01       	movw	r2, r4
    29b6:	05 e2       	ldi	r16, 0x25	; 37
    29b8:	60 2e       	mov	r6, r16
    29ba:	71 2c       	mov	r7, r1
    29bc:	0f c0       	rjmp	.+30     	; 0x29dc <main+0x24bc>
					state = WAIT;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    29be:	86 e0       	ldi	r24, 0x06	; 6
    29c0:	68 16       	cp	r6, r24
    29c2:	71 04       	cpc	r7, r1
    29c4:	59 f4       	brne	.+22     	; 0x29dc <main+0x24bc>
    29c6:	c2 01       	movw	r24, r4
    29c8:	82 19       	sub	r24, r2
    29ca:	93 09       	sbc	r25, r3
    29cc:	81 5a       	subi	r24, 0xA1	; 161
    29ce:	9f 40       	sbci	r25, 0x0F	; 15
    29d0:	a4 f0       	brlt	.+40     	; 0x29fa <main+0x24da>
    29d2:	12 01       	movw	r2, r4
    29d4:	15 e2       	ldi	r17, 0x25	; 37
    29d6:	61 2e       	mov	r6, r17
    29d8:	71 2c       	mov	r7, r1
    29da:	0f c0       	rjmp	.+30     	; 0x29fa <main+0x24da>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    29dc:	b7 e0       	ldi	r27, 0x07	; 7
    29de:	6b 16       	cp	r6, r27
    29e0:	71 04       	cpc	r7, r1
    29e2:	59 f4       	brne	.+22     	; 0x29fa <main+0x24da>
    29e4:	c2 01       	movw	r24, r4
    29e6:	82 19       	sub	r24, r2
    29e8:	93 09       	sbc	r25, r3
    29ea:	85 36       	cpi	r24, 0x65	; 101
    29ec:	91 05       	cpc	r25, r1
    29ee:	a4 f0       	brlt	.+40     	; 0x2a18 <main+0x24f8>
    29f0:	12 01       	movw	r2, r4
    29f2:	b5 e2       	ldi	r27, 0x25	; 37
    29f4:	6b 2e       	mov	r6, r27
    29f6:	71 2c       	mov	r7, r1
    29f8:	0f c0       	rjmp	.+30     	; 0x2a18 <main+0x24f8>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    29fa:	38 e0       	ldi	r19, 0x08	; 8
    29fc:	63 16       	cp	r6, r19
    29fe:	71 04       	cpc	r7, r1
    2a00:	59 f4       	brne	.+22     	; 0x2a18 <main+0x24f8>
    2a02:	c2 01       	movw	r24, r4
    2a04:	82 19       	sub	r24, r2
    2a06:	93 09       	sbc	r25, r3
    2a08:	85 36       	cpi	r24, 0x65	; 101
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	a4 f0       	brlt	.+40     	; 0x2a36 <main+0x2516>
    2a0e:	12 01       	movw	r2, r4
    2a10:	a5 e2       	ldi	r26, 0x25	; 37
    2a12:	6a 2e       	mov	r6, r26
    2a14:	71 2c       	mov	r7, r1
    2a16:	0f c0       	rjmp	.+30     	; 0x2a36 <main+0x2516>
					state = WAIT;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2a18:	49 e0       	ldi	r20, 0x09	; 9
    2a1a:	64 16       	cp	r6, r20
    2a1c:	71 04       	cpc	r7, r1
    2a1e:	59 f4       	brne	.+22     	; 0x2a36 <main+0x2516>
    2a20:	c2 01       	movw	r24, r4
    2a22:	82 19       	sub	r24, r2
    2a24:	93 09       	sbc	r25, r3
    2a26:	81 5d       	subi	r24, 0xD1	; 209
    2a28:	97 40       	sbci	r25, 0x07	; 7
    2a2a:	9c f0       	brlt	.+38     	; 0x2a52 <main+0x2532>
    2a2c:	12 01       	movw	r2, r4
    2a2e:	f5 e2       	ldi	r31, 0x25	; 37
    2a30:	6f 2e       	mov	r6, r31
    2a32:	71 2c       	mov	r7, r1
    2a34:	0e c0       	rjmp	.+28     	; 0x2a52 <main+0x2532>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    2a36:	8a e0       	ldi	r24, 0x0A	; 10
    2a38:	68 16       	cp	r6, r24
    2a3a:	71 04       	cpc	r7, r1
    2a3c:	51 f4       	brne	.+20     	; 0x2a52 <main+0x2532>
    2a3e:	c2 01       	movw	r24, r4
    2a40:	82 19       	sub	r24, r2
    2a42:	93 09       	sbc	r25, r3
    2a44:	85 36       	cpi	r24, 0x65	; 101
    2a46:	91 05       	cpc	r25, r1
    2a48:	9c f0       	brlt	.+38     	; 0x2a70 <main+0x2550>
    2a4a:	e5 e2       	ldi	r30, 0x25	; 37
    2a4c:	6e 2e       	mov	r6, r30
    2a4e:	71 2c       	mov	r7, r1
    2a50:	0f c0       	rjmp	.+30     	; 0x2a70 <main+0x2550>
					state = WAIT;
				}
				if(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    2a52:	9b e0       	ldi	r25, 0x0B	; 11
    2a54:	69 16       	cp	r6, r25
    2a56:	71 04       	cpc	r7, r1
    2a58:	59 f4       	brne	.+22     	; 0x2a70 <main+0x2550>
    2a5a:	c2 01       	movw	r24, r4
    2a5c:	82 19       	sub	r24, r2
    2a5e:	93 09       	sbc	r25, r3
    2a60:	81 5d       	subi	r24, 0xD1	; 209
    2a62:	97 40       	sbci	r25, 0x07	; 7
    2a64:	a4 f0       	brlt	.+40     	; 0x2a8e <main+0x256e>
    2a66:	12 01       	movw	r2, r4
    2a68:	75 e2       	ldi	r23, 0x25	; 37
    2a6a:	67 2e       	mov	r6, r23
    2a6c:	71 2c       	mov	r7, r1
    2a6e:	0f c0       	rjmp	.+30     	; 0x2a8e <main+0x256e>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    2a70:	bc e0       	ldi	r27, 0x0C	; 12
    2a72:	6b 16       	cp	r6, r27
    2a74:	71 04       	cpc	r7, r1
    2a76:	59 f4       	brne	.+22     	; 0x2a8e <main+0x256e>
    2a78:	c2 01       	movw	r24, r4
    2a7a:	82 19       	sub	r24, r2
    2a7c:	93 09       	sbc	r25, r3
    2a7e:	85 36       	cpi	r24, 0x65	; 101
    2a80:	91 05       	cpc	r25, r1
    2a82:	9c f0       	brlt	.+38     	; 0x2aaa <main+0x258a>
    2a84:	12 01       	movw	r2, r4
    2a86:	65 e2       	ldi	r22, 0x25	; 37
    2a88:	66 2e       	mov	r6, r22
    2a8a:	71 2c       	mov	r7, r1
    2a8c:	0e c0       	rjmp	.+28     	; 0x2aaa <main+0x258a>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2a8e:	3d e0       	ldi	r19, 0x0D	; 13
    2a90:	63 16       	cp	r6, r19
    2a92:	71 04       	cpc	r7, r1
    2a94:	51 f4       	brne	.+20     	; 0x2aaa <main+0x258a>
    2a96:	c2 01       	movw	r24, r4
    2a98:	82 19       	sub	r24, r2
    2a9a:	93 09       	sbc	r25, r3
    2a9c:	81 5d       	subi	r24, 0xD1	; 209
    2a9e:	97 40       	sbci	r25, 0x07	; 7
    2aa0:	9c f0       	brlt	.+38     	; 0x2ac8 <main+0x25a8>
    2aa2:	55 e2       	ldi	r21, 0x25	; 37
    2aa4:	65 2e       	mov	r6, r21
    2aa6:	71 2c       	mov	r7, r1
    2aa8:	0f c0       	rjmp	.+30     	; 0x2ac8 <main+0x25a8>
					state = WAIT;
					counterRef14 = counter;
				}
				if(state == B1STOP2 && counter - counterRef > totalStepLength2*fixtureMotorBrush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    2aaa:	5e e0       	ldi	r21, 0x0E	; 14
    2aac:	65 16       	cp	r6, r21
    2aae:	71 04       	cpc	r7, r1
    2ab0:	59 f4       	brne	.+22     	; 0x2ac8 <main+0x25a8>
    2ab2:	c2 01       	movw	r24, r4
    2ab4:	82 19       	sub	r24, r2
    2ab6:	93 09       	sbc	r25, r3
    2ab8:	81 5a       	subi	r24, 0xA1	; 161
    2aba:	9f 40       	sbci	r25, 0x0F	; 15
    2abc:	a4 f0       	brlt	.+40     	; 0x2ae6 <main+0x25c6>
    2abe:	12 01       	movw	r2, r4
    2ac0:	45 e2       	ldi	r20, 0x25	; 37
    2ac2:	64 2e       	mov	r6, r20
    2ac4:	71 2c       	mov	r7, r1
    2ac6:	0f c0       	rjmp	.+30     	; 0x2ae6 <main+0x25c6>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    2ac8:	bf e0       	ldi	r27, 0x0F	; 15
    2aca:	6b 16       	cp	r6, r27
    2acc:	71 04       	cpc	r7, r1
    2ace:	59 f4       	brne	.+22     	; 0x2ae6 <main+0x25c6>
    2ad0:	c2 01       	movw	r24, r4
    2ad2:	82 19       	sub	r24, r2
    2ad4:	93 09       	sbc	r25, r3
    2ad6:	85 36       	cpi	r24, 0x65	; 101
    2ad8:	91 05       	cpc	r25, r1
    2ada:	a4 f0       	brlt	.+40     	; 0x2b04 <main+0x25e4>
    2adc:	12 01       	movw	r2, r4
    2ade:	35 e2       	ldi	r19, 0x25	; 37
    2ae0:	63 2e       	mov	r6, r19
    2ae2:	71 2c       	mov	r7, r1
    2ae4:	0f c0       	rjmp	.+30     	; 0x2b04 <main+0x25e4>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    2ae6:	30 e1       	ldi	r19, 0x10	; 16
    2ae8:	63 16       	cp	r6, r19
    2aea:	71 04       	cpc	r7, r1
    2aec:	59 f4       	brne	.+22     	; 0x2b04 <main+0x25e4>
    2aee:	c2 01       	movw	r24, r4
    2af0:	82 19       	sub	r24, r2
    2af2:	93 09       	sbc	r25, r3
    2af4:	85 36       	cpi	r24, 0x65	; 101
    2af6:	91 05       	cpc	r25, r1
    2af8:	a4 f0       	brlt	.+40     	; 0x2b22 <main+0x2602>
    2afa:	12 01       	movw	r2, r4
    2afc:	95 e2       	ldi	r25, 0x25	; 37
    2afe:	69 2e       	mov	r6, r25
    2b00:	71 2c       	mov	r7, r1
    2b02:	0f c0       	rjmp	.+30     	; 0x2b22 <main+0x2602>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2b04:	41 e1       	ldi	r20, 0x11	; 17
    2b06:	64 16       	cp	r6, r20
    2b08:	71 04       	cpc	r7, r1
    2b0a:	59 f4       	brne	.+22     	; 0x2b22 <main+0x2602>
    2b0c:	c2 01       	movw	r24, r4
    2b0e:	82 19       	sub	r24, r2
    2b10:	93 09       	sbc	r25, r3
    2b12:	81 5d       	subi	r24, 0xD1	; 209
    2b14:	97 40       	sbci	r25, 0x07	; 7
    2b16:	a4 f0       	brlt	.+40     	; 0x2b40 <main+0x2620>
    2b18:	12 01       	movw	r2, r4
    2b1a:	85 e2       	ldi	r24, 0x25	; 37
    2b1c:	68 2e       	mov	r6, r24
    2b1e:	71 2c       	mov	r7, r1
    2b20:	0f c0       	rjmp	.+30     	; 0x2b40 <main+0x2620>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    2b22:	82 e1       	ldi	r24, 0x12	; 18
    2b24:	68 16       	cp	r6, r24
    2b26:	71 04       	cpc	r7, r1
    2b28:	59 f4       	brne	.+22     	; 0x2b40 <main+0x2620>
    2b2a:	c2 01       	movw	r24, r4
    2b2c:	82 19       	sub	r24, r2
    2b2e:	93 09       	sbc	r25, r3
    2b30:	85 36       	cpi	r24, 0x65	; 101
    2b32:	91 05       	cpc	r25, r1
    2b34:	a4 f0       	brlt	.+40     	; 0x2b5e <main+0x263e>
    2b36:	12 01       	movw	r2, r4
    2b38:	05 e2       	ldi	r16, 0x25	; 37
    2b3a:	60 2e       	mov	r6, r16
    2b3c:	71 2c       	mov	r7, r1
    2b3e:	0f c0       	rjmp	.+30     	; 0x2b5e <main+0x263e>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    2b40:	93 e1       	ldi	r25, 0x13	; 19
    2b42:	69 16       	cp	r6, r25
    2b44:	71 04       	cpc	r7, r1
    2b46:	59 f4       	brne	.+22     	; 0x2b5e <main+0x263e>
    2b48:	c2 01       	movw	r24, r4
    2b4a:	82 19       	sub	r24, r2
    2b4c:	93 09       	sbc	r25, r3
    2b4e:	81 5d       	subi	r24, 0xD1	; 209
    2b50:	97 40       	sbci	r25, 0x07	; 7
    2b52:	a4 f0       	brlt	.+40     	; 0x2b7c <main+0x265c>
    2b54:	12 01       	movw	r2, r4
    2b56:	15 e2       	ldi	r17, 0x25	; 37
    2b58:	61 2e       	mov	r6, r17
    2b5a:	71 2c       	mov	r7, r1
    2b5c:	0f c0       	rjmp	.+30     	; 0x2b7c <main+0x265c>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    2b5e:	b4 e1       	ldi	r27, 0x14	; 20
    2b60:	6b 16       	cp	r6, r27
    2b62:	71 04       	cpc	r7, r1
    2b64:	59 f4       	brne	.+22     	; 0x2b7c <main+0x265c>
    2b66:	c2 01       	movw	r24, r4
    2b68:	82 19       	sub	r24, r2
    2b6a:	93 09       	sbc	r25, r3
    2b6c:	85 36       	cpi	r24, 0x65	; 101
    2b6e:	91 05       	cpc	r25, r1
    2b70:	a4 f0       	brlt	.+40     	; 0x2b9a <main+0x267a>
    2b72:	12 01       	movw	r2, r4
    2b74:	b5 e2       	ldi	r27, 0x25	; 37
    2b76:	6b 2e       	mov	r6, r27
    2b78:	71 2c       	mov	r7, r1
    2b7a:	0f c0       	rjmp	.+30     	; 0x2b9a <main+0x267a>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2b7c:	35 e1       	ldi	r19, 0x15	; 21
    2b7e:	63 16       	cp	r6, r19
    2b80:	71 04       	cpc	r7, r1
    2b82:	59 f4       	brne	.+22     	; 0x2b9a <main+0x267a>
    2b84:	c2 01       	movw	r24, r4
    2b86:	82 19       	sub	r24, r2
    2b88:	93 09       	sbc	r25, r3
    2b8a:	81 5d       	subi	r24, 0xD1	; 209
    2b8c:	97 40       	sbci	r25, 0x07	; 7
    2b8e:	a4 f0       	brlt	.+40     	; 0x2bb8 <main+0x2698>
    2b90:	12 01       	movw	r2, r4
    2b92:	a5 e2       	ldi	r26, 0x25	; 37
    2b94:	6a 2e       	mov	r6, r26
    2b96:	71 2c       	mov	r7, r1
    2b98:	0f c0       	rjmp	.+30     	; 0x2bb8 <main+0x2698>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    2b9a:	56 e1       	ldi	r21, 0x16	; 22
    2b9c:	65 16       	cp	r6, r21
    2b9e:	71 04       	cpc	r7, r1
    2ba0:	59 f4       	brne	.+22     	; 0x2bb8 <main+0x2698>
    2ba2:	c2 01       	movw	r24, r4
    2ba4:	82 19       	sub	r24, r2
    2ba6:	93 09       	sbc	r25, r3
    2ba8:	85 36       	cpi	r24, 0x65	; 101
    2baa:	91 05       	cpc	r25, r1
    2bac:	a4 f0       	brlt	.+40     	; 0x2bd6 <main+0x26b6>
    2bae:	12 01       	movw	r2, r4
    2bb0:	f5 e2       	ldi	r31, 0x25	; 37
    2bb2:	6f 2e       	mov	r6, r31
    2bb4:	71 2c       	mov	r7, r1
    2bb6:	0f c0       	rjmp	.+30     	; 0x2bd6 <main+0x26b6>
					state = WAIT;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    2bb8:	87 e1       	ldi	r24, 0x17	; 23
    2bba:	68 16       	cp	r6, r24
    2bbc:	71 04       	cpc	r7, r1
    2bbe:	59 f4       	brne	.+22     	; 0x2bd6 <main+0x26b6>
    2bc0:	c2 01       	movw	r24, r4
    2bc2:	82 19       	sub	r24, r2
    2bc4:	93 09       	sbc	r25, r3
    2bc6:	81 5a       	subi	r24, 0xA1	; 161
    2bc8:	9f 40       	sbci	r25, 0x0F	; 15
    2bca:	a4 f0       	brlt	.+40     	; 0x2bf4 <main+0x26d4>
    2bcc:	12 01       	movw	r2, r4
    2bce:	e5 e2       	ldi	r30, 0x25	; 37
    2bd0:	6e 2e       	mov	r6, r30
    2bd2:	71 2c       	mov	r7, r1
    2bd4:	0f c0       	rjmp	.+30     	; 0x2bf4 <main+0x26d4>
					state = WAIT;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    2bd6:	b8 e1       	ldi	r27, 0x18	; 24
    2bd8:	6b 16       	cp	r6, r27
    2bda:	71 04       	cpc	r7, r1
    2bdc:	59 f4       	brne	.+22     	; 0x2bf4 <main+0x26d4>
    2bde:	c2 01       	movw	r24, r4
    2be0:	82 19       	sub	r24, r2
    2be2:	93 09       	sbc	r25, r3
    2be4:	85 36       	cpi	r24, 0x65	; 101
    2be6:	91 05       	cpc	r25, r1
    2be8:	9c f0       	brlt	.+38     	; 0x2c10 <main+0x26f0>
    2bea:	12 01       	movw	r2, r4
    2bec:	75 e2       	ldi	r23, 0x25	; 37
    2bee:	67 2e       	mov	r6, r23
    2bf0:	71 2c       	mov	r7, r1
    2bf2:	0e c0       	rjmp	.+28     	; 0x2c10 <main+0x26f0>
					state = WAIT;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2bf4:	39 e1       	ldi	r19, 0x19	; 25
    2bf6:	63 16       	cp	r6, r19
    2bf8:	71 04       	cpc	r7, r1
    2bfa:	51 f4       	brne	.+20     	; 0x2c10 <main+0x26f0>
    2bfc:	c2 01       	movw	r24, r4
    2bfe:	82 19       	sub	r24, r2
    2c00:	93 09       	sbc	r25, r3
    2c02:	81 5a       	subi	r24, 0xA1	; 161
    2c04:	9f 40       	sbci	r25, 0x0F	; 15
    2c06:	a4 f0       	brlt	.+40     	; 0x2c30 <main+0x2710>
    2c08:	65 e2       	ldi	r22, 0x25	; 37
    2c0a:	66 2e       	mov	r6, r22
    2c0c:	71 2c       	mov	r7, r1
    2c0e:	10 c0       	rjmp	.+32     	; 0x2c30 <main+0x2710>
					state = WAIT;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    2c10:	5a e1       	ldi	r21, 0x1A	; 26
    2c12:	65 16       	cp	r6, r21
    2c14:	71 04       	cpc	r7, r1
    2c16:	61 f4       	brne	.+24     	; 0x2c30 <main+0x2710>
    2c18:	c2 01       	movw	r24, r4
    2c1a:	82 19       	sub	r24, r2
    2c1c:	93 09       	sbc	r25, r3
    2c1e:	81 5a       	subi	r24, 0xA1	; 161
    2c20:	9f 40       	sbci	r25, 0x0F	; 15
    2c22:	bc f0       	brlt	.+46     	; 0x2c52 <main+0x2732>
    2c24:	5a aa       	std	Y+50, r5	; 0x32
    2c26:	49 aa       	std	Y+49, r4	; 0x31
    2c28:	55 e2       	ldi	r21, 0x25	; 37
    2c2a:	65 2e       	mov	r6, r21
    2c2c:	71 2c       	mov	r7, r1
    2c2e:	11 c0       	rjmp	.+34     	; 0x2c52 <main+0x2732>
					state = WAIT;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    2c30:	bb e1       	ldi	r27, 0x1B	; 27
    2c32:	6b 16       	cp	r6, r27
    2c34:	71 04       	cpc	r7, r1
    2c36:	69 f4       	brne	.+26     	; 0x2c52 <main+0x2732>
    2c38:	c2 01       	movw	r24, r4
    2c3a:	49 a9       	ldd	r20, Y+49	; 0x31
    2c3c:	5a a9       	ldd	r21, Y+50	; 0x32
    2c3e:	84 1b       	sub	r24, r20
    2c40:	95 0b       	sbc	r25, r21
    2c42:	85 36       	cpi	r24, 0x65	; 101
    2c44:	91 05       	cpc	r25, r1
    2c46:	a4 f0       	brlt	.+40     	; 0x2c70 <main+0x2750>
    2c48:	12 01       	movw	r2, r4
    2c4a:	45 e2       	ldi	r20, 0x25	; 37
    2c4c:	64 2e       	mov	r6, r20
    2c4e:	71 2c       	mov	r7, r1
    2c50:	0f c0       	rjmp	.+30     	; 0x2c70 <main+0x2750>
					state = WAIT;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    2c52:	5c e1       	ldi	r21, 0x1C	; 28
    2c54:	65 16       	cp	r6, r21
    2c56:	71 04       	cpc	r7, r1
    2c58:	59 f4       	brne	.+22     	; 0x2c70 <main+0x2750>
    2c5a:	c2 01       	movw	r24, r4
    2c5c:	82 19       	sub	r24, r2
    2c5e:	93 09       	sbc	r25, r3
    2c60:	85 36       	cpi	r24, 0x65	; 101
    2c62:	91 05       	cpc	r25, r1
    2c64:	9c f0       	brlt	.+38     	; 0x2c8c <main+0x276c>
    2c66:	12 01       	movw	r2, r4
    2c68:	35 e2       	ldi	r19, 0x25	; 37
    2c6a:	63 2e       	mov	r6, r19
    2c6c:	71 2c       	mov	r7, r1
    2c6e:	0e c0       	rjmp	.+28     	; 0x2c8c <main+0x276c>
					state = WAIT;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2c70:	8d e1       	ldi	r24, 0x1D	; 29
    2c72:	68 16       	cp	r6, r24
    2c74:	71 04       	cpc	r7, r1
    2c76:	51 f4       	brne	.+20     	; 0x2c8c <main+0x276c>
    2c78:	c2 01       	movw	r24, r4
    2c7a:	82 19       	sub	r24, r2
    2c7c:	93 09       	sbc	r25, r3
    2c7e:	81 5a       	subi	r24, 0xA1	; 161
    2c80:	9f 40       	sbci	r25, 0x0F	; 15
    2c82:	8c f0       	brlt	.+34     	; 0x2ca6 <main+0x2786>
    2c84:	95 e2       	ldi	r25, 0x25	; 37
    2c86:	69 2e       	mov	r6, r25
    2c88:	71 2c       	mov	r7, r1
    2c8a:	0d c0       	rjmp	.+26     	; 0x2ca6 <main+0x2786>
					state = WAIT;
					counterRef30 = counter;
				}
				if(state == D2STOP && /*counter - counterRef > totalStepLength2*fixtureMotorLoadBack &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    2c8c:	be e1       	ldi	r27, 0x1E	; 30
    2c8e:	6b 16       	cp	r6, r27
    2c90:	71 04       	cpc	r7, r1
    2c92:	49 f4       	brne	.+18     	; 0x2ca6 <main+0x2786>
    2c94:	80 91 96 03 	lds	r24, 0x0396
    2c98:	83 fd       	sbrc	r24, 3
    2c9a:	12 c0       	rjmp	.+36     	; 0x2cc0 <main+0x27a0>
    2c9c:	12 01       	movw	r2, r4
    2c9e:	85 e2       	ldi	r24, 0x25	; 37
    2ca0:	68 2e       	mov	r6, r24
    2ca2:	71 2c       	mov	r7, r1
    2ca4:	0d c0       	rjmp	.+26     	; 0x2cc0 <main+0x27a0>
					state = WAIT;
					counterRef = counter;
				}
				if(state == RAISEL2 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    2ca6:	3f e1       	ldi	r19, 0x1F	; 31
    2ca8:	63 16       	cp	r6, r19
    2caa:	71 04       	cpc	r7, r1
    2cac:	49 f4       	brne	.+18     	; 0x2cc0 <main+0x27a0>
    2cae:	80 91 96 03 	lds	r24, 0x0396
    2cb2:	81 fd       	sbrc	r24, 1
    2cb4:	12 c0       	rjmp	.+36     	; 0x2cda <main+0x27ba>
    2cb6:	12 01       	movw	r2, r4
    2cb8:	05 e2       	ldi	r16, 0x25	; 37
    2cba:	60 2e       	mov	r6, r16
    2cbc:	71 2c       	mov	r7, r1
    2cbe:	0d c0       	rjmp	.+26     	; 0x2cda <main+0x27ba>
					state = WAIT;
					counterRef = counter;
				}
				if(state == FIXH && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureHome == 0){
    2cc0:	40 e2       	ldi	r20, 0x20	; 32
    2cc2:	64 16       	cp	r6, r20
    2cc4:	71 04       	cpc	r7, r1
    2cc6:	49 f4       	brne	.+18     	; 0x2cda <main+0x27ba>
    2cc8:	80 91 96 03 	lds	r24, 0x0396
    2ccc:	82 fd       	sbrc	r24, 2
    2cce:	14 c0       	rjmp	.+40     	; 0x2cf8 <main+0x27d8>
    2cd0:	12 01       	movw	r2, r4
    2cd2:	15 e2       	ldi	r17, 0x25	; 37
    2cd4:	61 2e       	mov	r6, r17
    2cd6:	71 2c       	mov	r7, r1
    2cd8:	0f c0       	rjmp	.+30     	; 0x2cf8 <main+0x27d8>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    2cda:	51 e2       	ldi	r21, 0x21	; 33
    2cdc:	65 16       	cp	r6, r21
    2cde:	71 04       	cpc	r7, r1
    2ce0:	59 f4       	brne	.+22     	; 0x2cf8 <main+0x27d8>
    2ce2:	c2 01       	movw	r24, r4
    2ce4:	82 19       	sub	r24, r2
    2ce6:	93 09       	sbc	r25, r3
    2ce8:	85 36       	cpi	r24, 0x65	; 101
    2cea:	91 05       	cpc	r25, r1
    2cec:	a4 f0       	brlt	.+40     	; 0x2d16 <main+0x27f6>
    2cee:	12 01       	movw	r2, r4
    2cf0:	b5 e2       	ldi	r27, 0x25	; 37
    2cf2:	6b 2e       	mov	r6, r27
    2cf4:	71 2c       	mov	r7, r1
    2cf6:	0f c0       	rjmp	.+30     	; 0x2d16 <main+0x27f6>
					state = WAIT;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    2cf8:	82 e2       	ldi	r24, 0x22	; 34
    2cfa:	68 16       	cp	r6, r24
    2cfc:	71 04       	cpc	r7, r1
    2cfe:	59 f4       	brne	.+22     	; 0x2d16 <main+0x27f6>
    2d00:	c2 01       	movw	r24, r4
    2d02:	82 19       	sub	r24, r2
    2d04:	93 09       	sbc	r25, r3
    2d06:	81 5a       	subi	r24, 0xA1	; 161
    2d08:	9f 40       	sbci	r25, 0x0F	; 15
    2d0a:	94 f0       	brlt	.+36     	; 0x2d30 <main+0x2810>
    2d0c:	12 01       	movw	r2, r4
    2d0e:	a5 e2       	ldi	r26, 0x25	; 37
    2d10:	6a 2e       	mov	r6, r26
    2d12:	71 2c       	mov	r7, r1
    2d14:	0d c0       	rjmp	.+26     	; 0x2d30 <main+0x2810>
					state = WAIT;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    2d16:	b3 e2       	ldi	r27, 0x23	; 35
    2d18:	6b 16       	cp	r6, r27
    2d1a:	71 04       	cpc	r7, r1
    2d1c:	49 f4       	brne	.+18     	; 0x2d30 <main+0x2810>
    2d1e:	c2 01       	movw	r24, r4
    2d20:	82 19       	sub	r24, r2
    2d22:	93 09       	sbc	r25, r3
    2d24:	0b 97       	sbiw	r24, 0x0b	; 11
    2d26:	ac f0       	brlt	.+42     	; 0x2d52 <main+0x2832>
    2d28:	f4 e2       	ldi	r31, 0x24	; 36
    2d2a:	6f 2e       	mov	r6, r31
    2d2c:	71 2c       	mov	r7, r1
    2d2e:	11 c0       	rjmp	.+34     	; 0x2d52 <main+0x2832>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    2d30:	35 e2       	ldi	r19, 0x25	; 37
    2d32:	63 16       	cp	r6, r19
    2d34:	71 04       	cpc	r7, r1
    2d36:	69 f4       	brne	.+26     	; 0x2d52 <main+0x2832>
    2d38:	22 23       	and	r18, r18
    2d3a:	c1 f0       	breq	.+48     	; 0x2d6c <main+0x284c>
					state = ++last;
    2d3c:	25 96       	adiw	r28, 0x05	; 5
    2d3e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d40:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d42:	25 97       	sbiw	r28, 0x05	; 5
    2d44:	4f 5f       	subi	r20, 0xFF	; 255
    2d46:	5f 4f       	sbci	r21, 0xFF	; 255
    2d48:	25 96       	adiw	r28, 0x05	; 5
    2d4a:	5f af       	std	Y+63, r21	; 0x3f
    2d4c:	4e af       	std	Y+62, r20	; 0x3e
    2d4e:	25 97       	sbiw	r28, 0x05	; 5
    2d50:	3a 01       	movw	r6, r20
				}


				//state actions
						
			switch (state){
    2d52:	f3 01       	movw	r30, r6
    2d54:	e6 32       	cpi	r30, 0x26	; 38
    2d56:	f1 05       	cpc	r31, r1
    2d58:	08 f0       	brcs	.+2      	; 0x2d5c <main+0x283c>
    2d5a:	c9 c1       	rjmp	.+914    	; 0x30ee <main+0x2bce>
    2d5c:	e2 52       	subi	r30, 0x22	; 34
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	ee 0f       	add	r30, r30
    2d62:	ff 1f       	adc	r31, r31
    2d64:	05 90       	lpm	r0, Z+
    2d66:	f4 91       	lpm	r31, Z+
    2d68:	e0 2d       	mov	r30, r0
    2d6a:	09 94       	ijmp
    2d6c:	1a a2       	std	Y+34, r1	; 0x22
    2d6e:	19 a2       	std	Y+33, r1	; 0x21
    2d70:	1a 8e       	std	Y+26, r1	; 0x1a
    2d72:	19 8e       	std	Y+25, r1	; 0x19
    2d74:	1c 8a       	std	Y+20, r1	; 0x14
    2d76:	1b 8a       	std	Y+19, r1	; 0x13
    2d78:	1c 86       	std	Y+12, r1	; 0x0c
    2d7a:	1b 86       	std	Y+11, r1	; 0x0b
    2d7c:	7c c1       	rjmp	.+760    	; 0x3076 <main+0x2b56>
					brush1Motor = 0;
					brush2Motor = 0;
					paperTowelMotor = 0;
					break;
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    2d7e:	80 91 96 03 	lds	r24, 0x0396
    2d82:	90 91 92 03 	lds	r25, 0x0392
    2d86:	20 91 94 03 	lds	r18, 0x0394
    2d8a:	82 ff       	sbrs	r24, 2
    2d8c:	07 c0       	rjmp	.+14     	; 0x2d9c <main+0x287c>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    2d8e:	9f 7e       	andi	r25, 0xEF	; 239
    2d90:	90 93 92 03 	sts	0x0392, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2d94:	27 7f       	andi	r18, 0xF7	; 247
    2d96:	20 93 94 03 	sts	0x0394, r18
    2d9a:	a9 c1       	rjmp	.+850    	; 0x30ee <main+0x2bce>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2d9c:	9f 7d       	andi	r25, 0xDF	; 223
    2d9e:	90 93 92 03 	sts	0x0392, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2da2:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2da4:	28 60       	ori	r18, 0x08	; 8
    2da6:	20 93 94 03 	sts	0x0394, r18
						if(print0 == 1){
    2daa:	89 a5       	ldd	r24, Y+41	; 0x29
    2dac:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	09 f0       	breq	.+2      	; 0x2db4 <main+0x2894>
    2db2:	45 c0       	rjmp	.+138    	; 0x2e3e <main+0x291e>
							OrangutanLCD::gotoXY(0,1);
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	61 e0       	ldi	r22, 0x01	; 1
    2db8:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    2dbc:	84 e4       	ldi	r24, 0x44	; 68
    2dbe:	93 e0       	ldi	r25, 0x03	; 3
    2dc0:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
    2dc4:	1a a6       	std	Y+42, r1	; 0x2a
    2dc6:	19 a6       	std	Y+41, r1	; 0x29
    2dc8:	3a c0       	rjmp	.+116    	; 0x2e3e <main+0x291e>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    2dca:	20 91 94 03 	lds	r18, 0x0394
    2dce:	32 2f       	mov	r19, r18
    2dd0:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    2dd2:	c2 01       	movw	r24, r4
    2dd4:	68 ec       	ldi	r22, 0xC8	; 200
    2dd6:	70 e0       	ldi	r23, 0x00	; 0
    2dd8:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__divmodhi4>
    2ddc:	84 36       	cpi	r24, 0x64	; 100
    2dde:	91 05       	cpc	r25, r1
    2de0:	24 f4       	brge	.+8      	; 0x2dea <main+0x28ca>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    2de2:	2c 7f       	andi	r18, 0xFC	; 252
    2de4:	20 93 94 03 	sts	0x0394, r18
    2de8:	03 c0       	rjmp	.+6      	; 0x2df0 <main+0x28d0>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2dea:	32 60       	ori	r19, 0x02	; 2
    2dec:	30 93 94 03 	sts	0x0394, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    2df0:	80 91 92 03 	lds	r24, 0x0392
    2df4:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    2df6:	84 60       	ori	r24, 0x04	; 4
    2df8:	80 93 92 03 	sts	0x0392, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    2dfc:	80 91 94 03 	lds	r24, 0x0394
    2e00:	8b 7f       	andi	r24, 0xFB	; 251
    2e02:	80 93 94 03 	sts	0x0394, r24
    2e06:	a1 e0       	ldi	r26, 0x01	; 1
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	bc 87       	std	Y+12, r27	; 0x0c
    2e0c:	ab 87       	std	Y+11, r26	; 0x0b
    2e0e:	6f c1       	rjmp	.+734    	; 0x30ee <main+0x2bce>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2e10:	80 91 94 03 	lds	r24, 0x0394
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2e14:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    2e16:	86 61       	ori	r24, 0x16	; 22
    2e18:	80 93 94 03 	sts	0x0394, r24
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2e1c:	80 91 92 03 	lds	r24, 0x0392
    2e20:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2e22:	8b 7f       	andi	r24, 0xFB	; 251
    2e24:	80 93 92 03 	sts	0x0392, r24
    2e28:	60 c1       	rjmp	.+704    	; 0x30ea <main+0x2bca>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2e2a:	80 91 92 03 	lds	r24, 0x0392
    2e2e:	8f 7d       	andi	r24, 0xDF	; 223
    2e30:	80 93 92 03 	sts	0x0392, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2e34:	80 91 94 03 	lds	r24, 0x0394
    2e38:	88 60       	ori	r24, 0x08	; 8
    2e3a:	80 93 94 03 	sts	0x0394, r24
    2e3e:	1a 8e       	std	Y+26, r1	; 0x1a
    2e40:	19 8e       	std	Y+25, r1	; 0x19
    2e42:	55 c1       	rjmp	.+682    	; 0x30ee <main+0x2bce>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2e44:	80 91 94 03 	lds	r24, 0x0394
    2e48:	8f 7e       	andi	r24, 0xEF	; 239
    2e4a:	80 93 94 03 	sts	0x0394, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2e4e:	80 91 92 03 	lds	r24, 0x0392
    2e52:	80 62       	ori	r24, 0x20	; 32
    2e54:	80 93 92 03 	sts	0x0392, r24
    2e58:	4a c1       	rjmp	.+660    	; 0x30ee <main+0x2bce>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2e5a:	80 91 92 03 	lds	r24, 0x0392
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2e5e:	80 63       	ori	r24, 0x30	; 48
    2e60:	7f c0       	rjmp	.+254    	; 0x2f60 <main+0x2a40>
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    2e62:	80 91 93 03 	lds	r24, 0x0393
    2e66:	81 60       	ori	r24, 0x01	; 1
    2e68:	80 93 93 03 	sts	0x0393, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2e6c:	80 91 92 03 	lds	r24, 0x0392
    2e70:	8f 77       	andi	r24, 0x7F	; 127
    2e72:	80 93 92 03 	sts	0x0392, r24
    2e76:	e3 cf       	rjmp	.-58     	; 0x2e3e <main+0x291e>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2e78:	80 91 94 03 	lds	r24, 0x0394
    2e7c:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2e7e:	8f 7d       	andi	r24, 0xDF	; 223
    2e80:	80 93 94 03 	sts	0x0394, r24
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	2c c0       	rjmp	.+88     	; 0x2ee2 <main+0x29c2>
					break;
				case CLEAN1_1:
					brush1Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2e8a:	80 91 92 03 	lds	r24, 0x0392
    2e8e:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2e90:	8f 7e       	andi	r24, 0xEF	; 239
    2e92:	80 93 92 03 	sts	0x0392, r24
    2e96:	a1 e0       	ldi	r26, 0x01	; 1
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	ba 8f       	std	Y+26, r27	; 0x1a
    2e9c:	a9 8f       	std	Y+25, r26	; 0x19
    2e9e:	bc 8b       	std	Y+20, r27	; 0x14
    2ea0:	ab 8b       	std	Y+19, r26	; 0x13
    2ea2:	25 c1       	rjmp	.+586    	; 0x30ee <main+0x2bce>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2ea4:	80 91 92 03 	lds	r24, 0x0392
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2ea8:	80 63       	ori	r24, 0x30	; 48
    2eaa:	94 c0       	rjmp	.+296    	; 0x2fd4 <main+0x2ab4>
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2eac:	80 91 92 03 	lds	r24, 0x0392
    2eb0:	8f 77       	andi	r24, 0x7F	; 127
    2eb2:	80 93 92 03 	sts	0x0392, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2eb6:	80 91 94 03 	lds	r24, 0x0394
    2eba:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2ebc:	8f 7d       	andi	r24, 0xDF	; 223
    2ebe:	80 93 94 03 	sts	0x0394, r24
    2ec2:	1a 8e       	std	Y+26, r1	; 0x1a
    2ec4:	19 8e       	std	Y+25, r1	; 0x19
    2ec6:	41 e0       	ldi	r20, 0x01	; 1
    2ec8:	50 e0       	ldi	r21, 0x00	; 0
    2eca:	5c 8b       	std	Y+20, r21	; 0x14
    2ecc:	4b 8b       	std	Y+19, r20	; 0x13
    2ece:	0f c1       	rjmp	.+542    	; 0x30ee <main+0x2bce>
					break;
				case CLEAN1_3:
					brush1Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2ed0:	80 91 92 03 	lds	r24, 0x0392
    2ed4:	80 62       	ori	r24, 0x20	; 32
    2ed6:	80 93 92 03 	sts	0x0392, r24
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	9a 8f       	std	Y+26, r25	; 0x1a
    2ee0:	89 8f       	std	Y+25, r24	; 0x19
    2ee2:	9c 8b       	std	Y+20, r25	; 0x14
    2ee4:	8b 8b       	std	Y+19, r24	; 0x13
    2ee6:	03 c1       	rjmp	.+518    	; 0x30ee <main+0x2bce>
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2ee8:	80 91 94 03 	lds	r24, 0x0394
    2eec:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2eee:	80 62       	ori	r24, 0x20	; 32
    2ef0:	80 93 94 03 	sts	0x0394, r24
    2ef4:	1a 8e       	std	Y+26, r1	; 0x1a
    2ef6:	19 8e       	std	Y+25, r1	; 0x19
    2ef8:	1c 8a       	std	Y+20, r1	; 0x14
    2efa:	1b 8a       	std	Y+19, r1	; 0x13
    2efc:	f8 c0       	rjmp	.+496    	; 0x30ee <main+0x2bce>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    2efe:	80 91 93 03 	lds	r24, 0x0393
    2f02:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2f04:	8b 7f       	andi	r24, 0xFB	; 251
    2f06:	80 93 93 03 	sts	0x0393, r24
    2f0a:	99 cf       	rjmp	.-206    	; 0x2e3e <main+0x291e>
						print15 = 0;
					}*/
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2f0c:	80 91 95 03 	lds	r24, 0x0395
    2f10:	81 60       	ori	r24, 0x01	; 1
    2f12:	80 93 95 03 	sts	0x0395, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2f16:	80 91 94 03 	lds	r24, 0x0394
    2f1a:	8f 77       	andi	r24, 0x7F	; 127
    2f1c:	80 93 94 03 	sts	0x0394, r24
    2f20:	a1 e0       	ldi	r26, 0x01	; 1
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	ba a3       	std	Y+34, r27	; 0x22
    2f26:	a9 a3       	std	Y+33, r26	; 0x21
    2f28:	e2 c0       	rjmp	.+452    	; 0x30ee <main+0x2bce>
					break;
				case CLEAN2_1:
					brush2Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2f2a:	80 91 92 03 	lds	r24, 0x0392
    2f2e:	80 62       	ori	r24, 0x20	; 32
    2f30:	80 93 92 03 	sts	0x0392, r24
    2f34:	21 e0       	ldi	r18, 0x01	; 1
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	3a a3       	std	Y+34, r19	; 0x22
    2f3a:	29 a3       	std	Y+33, r18	; 0x21
    2f3c:	3a 8f       	std	Y+26, r19	; 0x1a
    2f3e:	29 8f       	std	Y+25, r18	; 0x19
    2f40:	d6 c0       	rjmp	.+428    	; 0x30ee <main+0x2bce>
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2f42:	80 91 95 03 	lds	r24, 0x0395
    2f46:	8e 7f       	andi	r24, 0xFE	; 254
    2f48:	80 93 95 03 	sts	0x0395, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2f4c:	80 91 94 03 	lds	r24, 0x0394
    2f50:	80 68       	ori	r24, 0x80	; 128
    2f52:	80 93 94 03 	sts	0x0394, r24
    2f56:	38 c0       	rjmp	.+112    	; 0x2fc8 <main+0x2aa8>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2f58:	80 91 92 03 	lds	r24, 0x0392
    2f5c:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2f5e:	80 62       	ori	r24, 0x20	; 32
    2f60:	80 93 92 03 	sts	0x0392, r24
    2f64:	41 e0       	ldi	r20, 0x01	; 1
    2f66:	50 e0       	ldi	r21, 0x00	; 0
    2f68:	5a 8f       	std	Y+26, r21	; 0x1a
    2f6a:	49 8f       	std	Y+25, r20	; 0x19
    2f6c:	c0 c0       	rjmp	.+384    	; 0x30ee <main+0x2bce>
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2f6e:	80 91 93 03 	lds	r24, 0x0393
    2f72:	8b 7f       	andi	r24, 0xFB	; 251
    2f74:	80 93 93 03 	sts	0x0393, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2f78:	80 91 95 03 	lds	r24, 0x0395
    2f7c:	81 60       	ori	r24, 0x01	; 1
    2f7e:	80 93 95 03 	sts	0x0395, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2f82:	80 91 94 03 	lds	r24, 0x0394
    2f86:	8f 77       	andi	r24, 0x7F	; 127
    2f88:	80 93 94 03 	sts	0x0394, r24
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	9a a3       	std	Y+34, r25	; 0x22
    2f92:	89 a3       	std	Y+33, r24	; 0x21
    2f94:	54 cf       	rjmp	.-344    	; 0x2e3e <main+0x291e>
					break;
				case CLEAN2_3:
					brush2Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2f96:	80 91 92 03 	lds	r24, 0x0392
    2f9a:	80 62       	ori	r24, 0x20	; 32
    2f9c:	80 93 92 03 	sts	0x0392, r24
    2fa0:	a1 e0       	ldi	r26, 0x01	; 1
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	ba a3       	std	Y+34, r27	; 0x22
    2fa6:	a9 a3       	std	Y+33, r26	; 0x21
    2fa8:	76 c0       	rjmp	.+236    	; 0x3096 <main+0x2b76>
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2faa:	80 91 95 03 	lds	r24, 0x0395
    2fae:	8e 7f       	andi	r24, 0xFE	; 254
    2fb0:	80 93 95 03 	sts	0x0395, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2fb4:	80 91 94 03 	lds	r24, 0x0394
    2fb8:	80 68       	ori	r24, 0x80	; 128
    2fba:	80 93 94 03 	sts	0x0394, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    2fbe:	80 91 93 03 	lds	r24, 0x0393
    2fc2:	87 7f       	andi	r24, 0xF7	; 247
    2fc4:	80 93 93 03 	sts	0x0393, r24
    2fc8:	1a a2       	std	Y+34, r1	; 0x22
    2fca:	19 a2       	std	Y+33, r1	; 0x21
    2fcc:	38 cf       	rjmp	.-400    	; 0x2e3e <main+0x291e>
					break;
				//*************************************************
				case MOVED1:
					//u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2fce:	80 91 92 03 	lds	r24, 0x0392
    2fd2:	80 62       	ori	r24, 0x20	; 32
    2fd4:	80 93 92 03 	sts	0x0392, r24
    2fd8:	21 e0       	ldi	r18, 0x01	; 1
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	af cf       	rjmp	.-162    	; 0x2f3c <main+0x2a1c>
					//u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2fde:	80 91 95 03 	lds	r24, 0x0395
    2fe2:	87 7f       	andi	r24, 0xF7	; 247
    2fe4:	80 93 95 03 	sts	0x0395, r24
    2fe8:	2a cf       	rjmp	.-428    	; 0x2e3e <main+0x291e>
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1STOP:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2fea:	80 91 92 03 	lds	r24, 0x0392
    2fee:	80 62       	ori	r24, 0x20	; 32
    2ff0:	80 93 92 03 	sts	0x0392, r24
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    2ff4:	80 91 95 03 	lds	r24, 0x0395
    2ff8:	88 60       	ori	r24, 0x08	; 8
    2ffa:	80 93 95 03 	sts	0x0395, r24
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	9a 8f       	std	Y+26, r25	; 0x1a
    3004:	89 8f       	std	Y+25, r24	; 0x19
    3006:	73 c0       	rjmp	.+230    	; 0x30ee <main+0x2bce>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    3008:	80 91 93 03 	lds	r24, 0x0393
    300c:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    300e:	8f 7d       	andi	r24, 0xDF	; 223
    3010:	80 93 93 03 	sts	0x0393, r24
    3014:	1a 8e       	std	Y+26, r1	; 0x1a
    3016:	19 8e       	std	Y+25, r1	; 0x19
    3018:	a1 e0       	ldi	r26, 0x01	; 1
    301a:	b0 e0       	ldi	r27, 0x00	; 0
    301c:	bc 83       	std	Y+4, r27	; 0x04
    301e:	ab 83       	std	Y+3, r26	; 0x03
    3020:	66 c0       	rjmp	.+204    	; 0x30ee <main+0x2bce>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    3022:	80 91 95 03 	lds	r24, 0x0395
    3026:	8d 7f       	andi	r24, 0xFD	; 253
    3028:	80 93 95 03 	sts	0x0395, r24
    302c:	21 e0       	ldi	r18, 0x01	; 1
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	3c 83       	std	Y+4, r19	; 0x04
    3032:	2b 83       	std	Y+3, r18	; 0x03
    3034:	5c c0       	rjmp	.+184    	; 0x30ee <main+0x2bce>
					break;
				case DRY2:
					paperTowelMotor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    3036:	80 91 92 03 	lds	r24, 0x0392
    303a:	80 62       	ori	r24, 0x20	; 32
    303c:	80 93 92 03 	sts	0x0392, r24
    3040:	41 e0       	ldi	r20, 0x01	; 1
    3042:	50 e0       	ldi	r21, 0x00	; 0
    3044:	5a 8f       	std	Y+26, r21	; 0x1a
    3046:	49 8f       	std	Y+25, r20	; 0x19
    3048:	5c 83       	std	Y+4, r21	; 0x04
    304a:	4b 83       	std	Y+3, r20	; 0x03
    304c:	50 c0       	rjmp	.+160    	; 0x30ee <main+0x2bce>
					break;
				case D2STOP:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    304e:	80 91 92 03 	lds	r24, 0x0392
    3052:	80 62       	ori	r24, 0x20	; 32
    3054:	80 93 92 03 	sts	0x0392, r24
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    3058:	80 91 93 03 	lds	r24, 0x0393
    305c:	8f 7b       	andi	r24, 0xBF	; 191
    305e:	80 93 93 03 	sts	0x0393, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    3062:	80 91 95 03 	lds	r24, 0x0395
    3066:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    3068:	8b 7f       	andi	r24, 0xFB	; 251
    306a:	80 93 95 03 	sts	0x0395, r24
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	9a 8f       	std	Y+26, r25	; 0x1a
    3074:	89 8f       	std	Y+25, r24	; 0x19
    3076:	1c 82       	std	Y+4, r1	; 0x04
    3078:	1b 82       	std	Y+3, r1	; 0x03
    307a:	39 c0       	rjmp	.+114    	; 0x30ee <main+0x2bce>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    307c:	80 91 94 03 	lds	r24, 0x0394
    3080:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    3082:	80 61       	ori	r24, 0x10	; 16
    3084:	da ce       	rjmp	.-588    	; 0x2e3a <main+0x291a>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    3086:	80 91 92 03 	lds	r24, 0x0392
    308a:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    308c:	80 62       	ori	r24, 0x20	; 32
    308e:	80 93 92 03 	sts	0x0392, r24
    3092:	a1 e0       	ldi	r26, 0x01	; 1
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	ba 8f       	std	Y+26, r27	; 0x1a
    3098:	a9 8f       	std	Y+25, r26	; 0x19
    309a:	29 c0       	rjmp	.+82     	; 0x30ee <main+0x2bce>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    309c:	80 91 92 03 	lds	r24, 0x0392
    30a0:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    30a2:	84 60       	ori	r24, 0x04	; 4
    30a4:	80 93 92 03 	sts	0x0392, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    30a8:	80 91 94 03 	lds	r24, 0x0394
    30ac:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    30ae:	8f 7e       	andi	r24, 0xEF	; 239
    30b0:	c4 ce       	rjmp	.-632    	; 0x2e3a <main+0x291a>
					break;
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    30b2:	80 91 92 03 	lds	r24, 0x0392
    30b6:	8d 7f       	andi	r24, 0xFD	; 253
    30b8:	80 93 92 03 	sts	0x0392, r24
    30bc:	21 e0       	ldi	r18, 0x01	; 1
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	3c 87       	std	Y+12, r19	; 0x0c
    30c2:	2b 87       	std	Y+11, r18	; 0x0b
    30c4:	14 c0       	rjmp	.+40     	; 0x30ee <main+0x2bce>
					plateLoadMotor = 1;
					break;
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    30c6:	80 91 92 03 	lds	r24, 0x0392
    30ca:	8b 7f       	andi	r24, 0xFB	; 251
    30cc:	80 93 92 03 	sts	0x0392, r24
					if(print35 == 1){
    30d0:	4b a9       	ldd	r20, Y+51	; 0x33
    30d2:	5c a9       	ldd	r21, Y+52	; 0x34
    30d4:	41 30       	cpi	r20, 0x01	; 1
    30d6:	51 05       	cpc	r21, r1
    30d8:	41 f4       	brne	.+16     	; 0x30ea <main+0x2bca>
						OrangutanLCD::clear();
    30da:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    30de:	82 e5       	ldi	r24, 0x52	; 82
    30e0:	93 e0       	ldi	r25, 0x03	; 3
    30e2:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
    30e6:	1c aa       	std	Y+52, r1	; 0x34
    30e8:	1b aa       	std	Y+51, r1	; 0x33
    30ea:	1c 86       	std	Y+12, r1	; 0x0c
    30ec:	1b 86       	std	Y+11, r1	; 0x0b
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    30ee:	8d b7       	in	r24, 0x3d	; 61
    30f0:	9e b7       	in	r25, 0x3e	; 62
    30f2:	42 97       	sbiw	r24, 0x12	; 18
    30f4:	0f b6       	in	r0, 0x3f	; 63
    30f6:	f8 94       	cli
    30f8:	9e bf       	out	0x3e, r25	; 62
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	8d bf       	out	0x3d, r24	; 61
    30fe:	ed b7       	in	r30, 0x3d	; 61
    3100:	fe b7       	in	r31, 0x3e	; 62
    3102:	31 96       	adiw	r30, 0x01	; 1
    3104:	22 e0       	ldi	r18, 0x02	; 2
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	ad b7       	in	r26, 0x3d	; 61
    310a:	be b7       	in	r27, 0x3e	; 62
    310c:	12 96       	adiw	r26, 0x02	; 2
    310e:	3c 93       	st	X, r19
    3110:	2e 93       	st	-X, r18
    3112:	11 97       	sbiw	r26, 0x01	; 1
    3114:	33 83       	std	Z+3, r19	; 0x03
    3116:	22 83       	std	Z+2, r18	; 0x02
    3118:	35 83       	std	Z+5, r19	; 0x05
    311a:	24 83       	std	Z+4, r18	; 0x04
    311c:	37 83       	std	Z+7, r19	; 0x07
    311e:	26 83       	std	Z+6, r18	; 0x06
    3120:	41 e0       	ldi	r20, 0x01	; 1
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	51 87       	std	Z+9, r21	; 0x09
    3126:	40 87       	std	Z+8, r20	; 0x08
    3128:	53 87       	std	Z+11, r21	; 0x0b
    312a:	42 87       	std	Z+10, r20	; 0x0a
    312c:	55 87       	std	Z+13, r21	; 0x0d
    312e:	44 87       	std	Z+12, r20	; 0x0c
    3130:	57 87       	std	Z+15, r21	; 0x0f
    3132:	46 87       	std	Z+14, r20	; 0x0e
    3134:	51 8b       	std	Z+17, r21	; 0x11
    3136:	40 8b       	std	Z+16, r20	; 0x10
    3138:	c2 01       	movw	r24, r4
    313a:	b1 01       	movw	r22, r2
    313c:	49 a9       	ldd	r20, Y+49	; 0x31
    313e:	5a a9       	ldd	r21, Y+50	; 0x32
    3140:	2b 85       	ldd	r18, Y+11	; 0x0b
    3142:	3c 85       	ldd	r19, Y+12	; 0x0c
    3144:	09 8d       	ldd	r16, Y+25	; 0x19
    3146:	1a 8d       	ldd	r17, Y+26	; 0x1a
    3148:	eb 88       	ldd	r14, Y+19	; 0x13
    314a:	fc 88       	ldd	r15, Y+20	; 0x14
    314c:	c9 a0       	ldd	r12, Y+33	; 0x21
    314e:	da a0       	ldd	r13, Y+34	; 0x22
    3150:	ab 80       	ldd	r10, Y+3	; 0x03
    3152:	bc 80       	ldd	r11, Y+4	; 0x04
    3154:	e2 e0       	ldi	r30, 0x02	; 2
    3156:	8e 2e       	mov	r8, r30
    3158:	91 2c       	mov	r9, r1
    315a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    315e:	8d b7       	in	r24, 0x3d	; 61
    3160:	9e b7       	in	r25, 0x3e	; 62
    3162:	42 96       	adiw	r24, 0x12	; 18
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	f8 94       	cli
    3168:	9e bf       	out	0x3e, r25	; 62
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	8d bf       	out	0x3d, r24	; 61
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    3176:	94 e2       	ldi	r25, 0x24	; 36
    3178:	69 16       	cp	r6, r25
    317a:	71 04       	cpc	r7, r1
    317c:	21 f0       	breq	.+8      	; 0x3186 <main+0x2c66>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    317e:	08 94       	sec
    3180:	41 1c       	adc	r4, r1
    3182:	51 1c       	adc	r5, r1
    3184:	a2 cb       	rjmp	.-2236   	; 0x28ca <main+0x23aa>
				delay_ms(1);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    3186:	80 91 92 03 	lds	r24, 0x0392
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    318a:	8b 7d       	andi	r24, 0xDB	; 219
    318c:	80 93 92 03 	sts	0x0392, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    3190:	80 91 93 03 	lds	r24, 0x0393
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    3194:	86 7b       	andi	r24, 0xB6	; 182
    3196:	80 93 93 03 	sts	0x0393, r24
		
		i2c_start(I2C1+I2C_WRITE);
    319a:	80 e4       	ldi	r24, 0x40	; 64
    319c:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>
		i2c_write(0x2);
    31a0:	82 e0       	ldi	r24, 0x02	; 2
    31a2:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
    31a6:	80 91 92 03 	lds	r24, 0x0392
    31aa:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
    31ae:	80 91 93 03 	lds	r24, 0x0393
    31b2:	0e 94 76 19 	call	0x32ec	; 0x32ec <_Z9i2c_writeh>
		i2c_stop();
    31b6:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Z8i2c_stopv>
	}
	OrangutanLCD::print("END");
    31ba:	86 e8       	ldi	r24, 0x86	; 134
    31bc:	93 e0       	ldi	r25, 0x03	; 3
    31be:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
    31c2:	0c 94 ab 02 	jmp	0x556	; 0x556 <main+0x36>
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently

	bool buttonTriggered = false;	//buttonTriggered is false if it hasn't been triggered, true if it has;
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
    
	while(1){						//Repeats the entire program indefinitely (runs maintenance or normal each time)
    31c6:	10 e0       	ldi	r17, 0x00	; 0
    31c8:	0c 94 bc 03 	jmp	0x778	; 0x778 <main+0x258>
					print = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
					switched = true;
				}
				if(switched){
    31cc:	11 23       	and	r17, r17
    31ce:	11 f4       	brne	.+4      	; 0x31d4 <main+0x2cb4>
    31d0:	0c 94 4a 04 	jmp	0x894	; 0x894 <main+0x374>
    31d4:	0c 94 2d 04 	jmp	0x85a	; 0x85a <main+0x33a>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    31de:	88 23       	and	r24, r24
    31e0:	11 f0       	breq	.+4      	; 0x31e6 <main+0x2cc6>
    31e2:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <main+0x12f8>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    31ec:	88 23       	and	r24, r24
    31ee:	11 f4       	brne	.+4      	; 0x31f4 <main+0x2cd4>
    31f0:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <main+0x1a52>
				counter ++;
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    31fa:	88 23       	and	r24, r24
    31fc:	21 f2       	breq	.-120    	; 0x3186 <main+0x2c66>
    31fe:	36 cb       	rjmp	.-2452   	; 0x286c <main+0x234c>
    3200:	12 01       	movw	r2, r4
    3202:	95 e2       	ldi	r25, 0x25	; 37
    3204:	69 2e       	mov	r6, r25
    3206:	71 2c       	mov	r7, r1
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	a1 cb       	rjmp	.-2238   	; 0x294e <main+0x242e>
    320c:	23 96       	adiw	r28, 0x03	; 3
    320e:	3f ae       	std	Y+63, r3	; 0x3f
    3210:	2e ae       	std	Y+62, r2	; 0x3e
    3212:	23 97       	sbiw	r28, 0x03	; 3
    3214:	66 24       	eor	r6, r6
    3216:	77 24       	eor	r7, r7
    3218:	8c e2       	ldi	r24, 0x2C	; 44
    321a:	48 2e       	mov	r4, r24
    321c:	51 2c       	mov	r5, r1
    321e:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <main+0xa70>

00003222 <_ZdlPv>:
  return malloc(size); 
} 

void operator delete(void * ptr) 
{ 
  free(ptr); 
    3222:	0e 94 44 20 	call	0x4088	; 0x4088 <free>
} 
    3226:	08 95       	ret

00003228 <_Znwj>:
void * operator new(size_t size); 
void operator delete(void * ptr); 

void * operator new(size_t size) 
{ 
  return malloc(size); 
    3228:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <malloc>
} 
    322c:	08 95       	ret

0000322e <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    322e:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3232:	8c e0       	ldi	r24, 0x0C	; 12
    3234:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    3238:	08 95       	ret

0000323a <_Z9i2c_starth>:

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    323a:	98 2f       	mov	r25, r24
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    323c:	84 ea       	ldi	r24, 0xA4	; 164
    323e:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3242:	80 91 bc 00 	lds	r24, 0x00BC
    3246:	87 ff       	sbrs	r24, 7
    3248:	fc cf       	rjmp	.-8      	; 0x3242 <_Z9i2c_starth+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    324a:	80 91 b9 00 	lds	r24, 0x00B9
    324e:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    3250:	88 30       	cpi	r24, 0x08	; 8
    3252:	21 f0       	breq	.+8      	; 0x325c <_Z9i2c_starth+0x22>
    3254:	80 31       	cpi	r24, 0x10	; 16
    3256:	11 f0       	breq	.+4      	; 0x325c <_Z9i2c_starth+0x22>
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	08 95       	ret

	// send device address
	TWDR = address;
    325c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    3260:	84 e8       	ldi	r24, 0x84	; 132
    3262:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    3266:	80 91 bc 00 	lds	r24, 0x00BC
    326a:	87 ff       	sbrs	r24, 7
    326c:	fc cf       	rjmp	.-8      	; 0x3266 <_Z9i2c_starth+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    326e:	90 91 b9 00 	lds	r25, 0x00B9
    3272:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    3274:	98 31       	cpi	r25, 0x18	; 24
    3276:	11 f4       	brne	.+4      	; 0x327c <_Z9i2c_starth+0x42>
    3278:	80 e0       	ldi	r24, 0x00	; 0
    327a:	08 95       	ret
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	90 34       	cpi	r25, 0x40	; 64
    3280:	09 f0       	breq	.+2      	; 0x3284 <_Z9i2c_starth+0x4a>
    3282:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    3284:	08 95       	ret

00003286 <_Z14i2c_start_waith>:
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
    3286:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3288:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    328a:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    328c:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    328e:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    3292:	80 91 bc 00 	lds	r24, 0x00BC
    3296:	87 ff       	sbrs	r24, 7
    3298:	fc cf       	rjmp	.-8      	; 0x3292 <_Z14i2c_start_waith+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    329a:	80 91 b9 00 	lds	r24, 0x00B9
    329e:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    32a0:	88 30       	cpi	r24, 0x08	; 8
    32a2:	11 f0       	breq	.+4      	; 0x32a8 <_Z14i2c_start_waith+0x22>
    32a4:	80 31       	cpi	r24, 0x10	; 16
    32a6:	99 f7       	brne	.-26     	; 0x328e <_Z14i2c_start_waith+0x8>
    
    	// send device address
    	TWDR = address;
    32a8:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    32ac:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    32b0:	80 91 bc 00 	lds	r24, 0x00BC
    32b4:	87 ff       	sbrs	r24, 7
    32b6:	fc cf       	rjmp	.-8      	; 0x32b0 <_Z14i2c_start_waith+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    32b8:	80 91 b9 00 	lds	r24, 0x00B9
    32bc:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    32be:	80 32       	cpi	r24, 0x20	; 32
    32c0:	11 f0       	breq	.+4      	; 0x32c6 <_Z14i2c_start_waith+0x40>
    32c2:	88 35       	cpi	r24, 0x58	; 88
    32c4:	39 f4       	brne	.+14     	; 0x32d4 <_Z14i2c_start_waith+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    32c6:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    32ca:	80 91 bc 00 	lds	r24, 0x00BC
    32ce:	84 fd       	sbrc	r24, 4
    32d0:	fc cf       	rjmp	.-8      	; 0x32ca <_Z14i2c_start_waith+0x44>
    32d2:	dd cf       	rjmp	.-70     	; 0x328e <_Z14i2c_start_waith+0x8>
    32d4:	08 95       	ret

000032d6 <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    32d6:	0e 94 1d 19 	call	0x323a	; 0x323a <_Z9i2c_starth>

}/* i2c_rep_start */
    32da:	08 95       	ret

000032dc <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    32dc:	84 e9       	ldi	r24, 0x94	; 148
    32de:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    32e2:	80 91 bc 00 	lds	r24, 0x00BC
    32e6:	84 fd       	sbrc	r24, 4
    32e8:	fc cf       	rjmp	.-8      	; 0x32e2 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    32ea:	08 95       	ret

000032ec <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    32ec:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    32f0:	84 e8       	ldi	r24, 0x84	; 132
    32f2:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    32f6:	80 91 bc 00 	lds	r24, 0x00BC
    32fa:	87 ff       	sbrs	r24, 7
    32fc:	fc cf       	rjmp	.-8      	; 0x32f6 <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    32fe:	80 91 b9 00 	lds	r24, 0x00B9
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	88 7f       	andi	r24, 0xF8	; 248
    3306:	88 32       	cpi	r24, 0x28	; 40
    3308:	09 f0       	breq	.+2      	; 0x330c <_Z9i2c_writeh+0x20>
    330a:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    330c:	89 2f       	mov	r24, r25
    330e:	08 95       	ret

00003310 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3310:	84 ec       	ldi	r24, 0xC4	; 196
    3312:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    3316:	80 91 bc 00 	lds	r24, 0x00BC
    331a:	87 ff       	sbrs	r24, 7
    331c:	fc cf       	rjmp	.-8      	; 0x3316 <_Z11i2c_readAckv+0x6>

    return TWDR;
    331e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    3322:	08 95       	ret

00003324 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3324:	84 e8       	ldi	r24, 0x84	; 132
    3326:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    332a:	80 91 bc 00 	lds	r24, 0x00BC
    332e:	87 ff       	sbrs	r24, 7
    3330:	fc cf       	rjmp	.-8      	; 0x332a <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    3332:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    3336:	08 95       	ret

00003338 <_ZN12OrangutanLCDC2Ev>:
    3338:	08 95       	ret

0000333a <_ZN12OrangutanLCDC1Ev>:
    333a:	08 95       	ret

0000333c <void_getchar>:
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	08 95       	ret

00003342 <_ZN12OrangutanLCD8busyWaitEv>:
    3342:	ef 92       	push	r14
    3344:	ff 92       	push	r15
    3346:	0f 93       	push	r16
    3348:	1f 93       	push	r17
    334a:	67 b1       	in	r22, 0x07	; 7
    334c:	3d 98       	cbi	0x07, 5	; 7
    334e:	28 98       	cbi	0x05, 0	; 5
    3350:	29 9a       	sbi	0x05, 1	; 5
    3352:	e0 90 a0 03 	lds	r14, 0x03A0
    3356:	f0 90 a1 03 	lds	r15, 0x03A1
    335a:	00 91 a2 03 	lds	r16, 0x03A2
    335e:	10 91 a3 03 	lds	r17, 0x03A3
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	41 e0       	ldi	r20, 0x01	; 1
    3368:	50 e0       	ldi	r21, 0x00	; 0
    336a:	ca 01       	movw	r24, r20
    336c:	6f 93       	push	r22
    336e:	64 e0       	ldi	r22, 0x04	; 4
    3370:	6a 95       	dec	r22
    3372:	f1 f7       	brne	.-4      	; 0x3370 <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    3374:	6f 91       	pop	r22
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	c9 f7       	brne	.-14     	; 0x336c <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    337a:	2a 9a       	sbi	0x05, 2	; 5
    337c:	ca 01       	movw	r24, r20
    337e:	6f 93       	push	r22
    3380:	64 e0       	ldi	r22, 0x04	; 4
    3382:	6a 95       	dec	r22
    3384:	f1 f7       	brne	.-4      	; 0x3382 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    3386:	6f 91       	pop	r22
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	c9 f7       	brne	.-14     	; 0x337e <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    338c:	86 b1       	in	r24, 0x06	; 6
    338e:	2a 98       	cbi	0x05, 2	; 5
    3390:	fa 01       	movw	r30, r20
    3392:	6f 93       	push	r22
    3394:	64 e0       	ldi	r22, 0x04	; 4
    3396:	6a 95       	dec	r22
    3398:	f1 f7       	brne	.-4      	; 0x3396 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    339a:	6f 91       	pop	r22
    339c:	31 97       	sbiw	r30, 0x01	; 1
    339e:	c9 f7       	brne	.-14     	; 0x3392 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    33a0:	2a 9a       	sbi	0x05, 2	; 5
    33a2:	fa 01       	movw	r30, r20
    33a4:	6f 93       	push	r22
    33a6:	64 e0       	ldi	r22, 0x04	; 4
    33a8:	6a 95       	dec	r22
    33aa:	f1 f7       	brne	.-4      	; 0x33a8 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    33ac:	6f 91       	pop	r22
    33ae:	31 97       	sbiw	r30, 0x01	; 1
    33b0:	c9 f7       	brne	.-14     	; 0x33a4 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    33b2:	2a 98       	cbi	0x05, 2	; 5
    33b4:	2c 5f       	subi	r18, 0xFC	; 252
    33b6:	3f 4f       	sbci	r19, 0xFF	; 255
    33b8:	85 ff       	sbrs	r24, 5
    33ba:	09 c0       	rjmp	.+18     	; 0x33ce <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    33bc:	c9 01       	movw	r24, r18
    33be:	a0 e0       	ldi	r26, 0x00	; 0
    33c0:	b0 e0       	ldi	r27, 0x00	; 0
    33c2:	8e 15       	cp	r24, r14
    33c4:	9f 05       	cpc	r25, r15
    33c6:	a0 07       	cpc	r26, r16
    33c8:	b1 07       	cpc	r27, r17
    33ca:	08 f4       	brcc	.+2      	; 0x33ce <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    33cc:	ce cf       	rjmp	.-100    	; 0x336a <_ZN12OrangutanLCD8busyWaitEv+0x28>
    33ce:	c9 01       	movw	r24, r18
    33d0:	a0 e0       	ldi	r26, 0x00	; 0
    33d2:	b0 e0       	ldi	r27, 0x00	; 0
    33d4:	8e 15       	cp	r24, r14
    33d6:	9f 05       	cpc	r25, r15
    33d8:	a0 07       	cpc	r26, r16
    33da:	b1 07       	cpc	r27, r17
    33dc:	28 f0       	brcs	.+10     	; 0x33e8 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    33de:	82 e3       	ldi	r24, 0x32	; 50
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	a0 e0       	ldi	r26, 0x00	; 0
    33e4:	b0 e0       	ldi	r27, 0x00	; 0
    33e6:	04 c0       	rjmp	.+8      	; 0x33f0 <_ZN12OrangutanLCD8busyWaitEv+0xae>
    33e8:	80 e3       	ldi	r24, 0x30	; 48
    33ea:	95 e7       	ldi	r25, 0x75	; 117
    33ec:	a0 e0       	ldi	r26, 0x00	; 0
    33ee:	b0 e0       	ldi	r27, 0x00	; 0
    33f0:	80 93 a0 03 	sts	0x03A0, r24
    33f4:	90 93 a1 03 	sts	0x03A1, r25
    33f8:	a0 93 a2 03 	sts	0x03A2, r26
    33fc:	b0 93 a3 03 	sts	0x03A3, r27
    3400:	67 b9       	out	0x07, r22	; 7
    3402:	1f 91       	pop	r17
    3404:	0f 91       	pop	r16
    3406:	ff 90       	pop	r15
    3408:	ef 90       	pop	r14
    340a:	08 95       	ret

0000340c <_ZN12OrangutanLCD8sendDataEh>:
    340c:	28 b1       	in	r18, 0x08	; 8
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	8f 70       	andi	r24, 0x0F	; 15
    3412:	90 70       	andi	r25, 0x00	; 0
    3414:	88 0f       	add	r24, r24
    3416:	99 1f       	adc	r25, r25
    3418:	88 0f       	add	r24, r24
    341a:	99 1f       	adc	r25, r25
    341c:	23 7c       	andi	r18, 0xC3	; 195
    341e:	28 2b       	or	r18, r24
    3420:	28 b9       	out	0x08, r18	; 8
    3422:	2a 9a       	sbi	0x05, 2	; 5
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	fc 01       	movw	r30, r24
    342a:	6f 93       	push	r22
    342c:	64 e0       	ldi	r22, 0x04	; 4
    342e:	6a 95       	dec	r22
    3430:	f1 f7       	brne	.-4      	; 0x342e <_ZN12OrangutanLCD8sendDataEh+0x22>
    3432:	6f 91       	pop	r22
    3434:	31 97       	sbiw	r30, 0x01	; 1
    3436:	c9 f7       	brne	.-14     	; 0x342a <_ZN12OrangutanLCD8sendDataEh+0x1e>
    3438:	2a 98       	cbi	0x05, 2	; 5
    343a:	6f 93       	push	r22
    343c:	64 e0       	ldi	r22, 0x04	; 4
    343e:	6a 95       	dec	r22
    3440:	f1 f7       	brne	.-4      	; 0x343e <_ZN12OrangutanLCD8sendDataEh+0x32>
    3442:	6f 91       	pop	r22
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	c9 f7       	brne	.-14     	; 0x343a <_ZN12OrangutanLCD8sendDataEh+0x2e>
    3448:	08 95       	ret

0000344a <_ZN12OrangutanLCD10initPrintfEv>:
    344a:	80 91 9c 03 	lds	r24, 0x039C
    344e:	90 91 9d 03 	lds	r25, 0x039D
    3452:	00 97       	sbiw	r24, 0x00	; 0
    3454:	11 f0       	breq	.+4      	; 0x345a <_ZN12OrangutanLCD10initPrintfEv+0x10>
    3456:	0e 94 44 20 	call	0x4088	; 0x4088 <free>
    345a:	80 91 8a 03 	lds	r24, 0x038A
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	20 91 8b 03 	lds	r18, 0x038B
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	ac 01       	movw	r20, r24
    346a:	42 9f       	mul	r20, r18
    346c:	c0 01       	movw	r24, r0
    346e:	43 9f       	mul	r20, r19
    3470:	90 0d       	add	r25, r0
    3472:	52 9f       	mul	r21, r18
    3474:	90 0d       	add	r25, r0
    3476:	11 24       	eor	r1, r1
    3478:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <malloc>
    347c:	90 93 9d 03 	sts	0x039D, r25
    3480:	80 93 9c 03 	sts	0x039C, r24
    3484:	00 97       	sbiw	r24, 0x00	; 0
    3486:	29 f1       	breq	.+74     	; 0x34d2 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    3488:	60 e0       	ldi	r22, 0x00	; 0
    348a:	70 e2       	ldi	r23, 0x20	; 32
    348c:	08 c0       	rjmp	.+16     	; 0x349e <_ZN12OrangutanLCD10initPrintfEv+0x54>
    348e:	e0 91 9c 03 	lds	r30, 0x039C
    3492:	f0 91 9d 03 	lds	r31, 0x039D
    3496:	e4 0f       	add	r30, r20
    3498:	f5 1f       	adc	r31, r21
    349a:	70 83       	st	Z, r23
    349c:	6f 5f       	subi	r22, 0xFF	; 255
    349e:	46 2f       	mov	r20, r22
    34a0:	50 e0       	ldi	r21, 0x00	; 0
    34a2:	80 91 8a 03 	lds	r24, 0x038A
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	20 91 8b 03 	lds	r18, 0x038B
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	fc 01       	movw	r30, r24
    34b2:	e2 9f       	mul	r30, r18
    34b4:	c0 01       	movw	r24, r0
    34b6:	e3 9f       	mul	r30, r19
    34b8:	90 0d       	add	r25, r0
    34ba:	f2 9f       	mul	r31, r18
    34bc:	90 0d       	add	r25, r0
    34be:	11 24       	eor	r1, r1
    34c0:	48 17       	cp	r20, r24
    34c2:	59 07       	cpc	r21, r25
    34c4:	24 f3       	brlt	.-56     	; 0x348e <_ZN12OrangutanLCD10initPrintfEv+0x44>
    34c6:	8a e8       	ldi	r24, 0x8A	; 138
    34c8:	9c e1       	ldi	r25, 0x1C	; 28
    34ca:	6e e9       	ldi	r22, 0x9E	; 158
    34cc:	79 e1       	ldi	r23, 0x19	; 25
    34ce:	0e 94 9c 20 	call	0x4138	; 0x4138 <fdevopen>
    34d2:	08 95       	ret

000034d4 <_ZN12OrangutanLCD10initPrintfEhh>:
    34d4:	80 93 8b 03 	sts	0x038B, r24
    34d8:	60 93 8a 03 	sts	0x038A, r22
    34dc:	0e 94 25 1a 	call	0x344a	; 0x344a <_ZN12OrangutanLCD10initPrintfEv>
    34e0:	08 95       	ret

000034e2 <lcd_init_printf_with_dimensions>:
    34e2:	80 93 8b 03 	sts	0x038B, r24
    34e6:	60 93 8a 03 	sts	0x038A, r22
    34ea:	0e 94 25 1a 	call	0x344a	; 0x344a <_ZN12OrangutanLCD10initPrintfEv>
    34ee:	08 95       	ret

000034f0 <lcd_init_printf>:
    34f0:	0e 94 25 1a 	call	0x344a	; 0x344a <_ZN12OrangutanLCD10initPrintfEv>
    34f4:	08 95       	ret

000034f6 <_ZN12OrangutanLCD5init2Ev>:
    34f6:	3d 98       	cbi	0x07, 5	; 7
    34f8:	45 9a       	sbi	0x08, 5	; 8
    34fa:	80 e3       	ldi	r24, 0x30	; 48
    34fc:	95 e7       	ldi	r25, 0x75	; 117
    34fe:	a0 e0       	ldi	r26, 0x00	; 0
    3500:	b0 e0       	ldi	r27, 0x00	; 0
    3502:	80 93 a0 03 	sts	0x03A0, r24
    3506:	90 93 a1 03 	sts	0x03A1, r25
    350a:	a0 93 a2 03 	sts	0x03A2, r26
    350e:	b0 93 a3 03 	sts	0x03A3, r27
    3512:	20 9a       	sbi	0x04, 0	; 4
    3514:	21 9a       	sbi	0x04, 1	; 4
    3516:	22 9a       	sbi	0x04, 2	; 4
    3518:	8e e1       	ldi	r24, 0x1E	; 30
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
    3520:	83 e0       	ldi	r24, 0x03	; 3
    3522:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    3526:	86 e0       	ldi	r24, 0x06	; 6
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
    352e:	83 e0       	ldi	r24, 0x03	; 3
    3530:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    3534:	82 e0       	ldi	r24, 0x02	; 2
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
    353c:	83 e0       	ldi	r24, 0x03	; 3
    353e:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    3542:	82 e0       	ldi	r24, 0x02	; 2
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
    354a:	82 e0       	ldi	r24, 0x02	; 2
    354c:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    3550:	82 e0       	ldi	r24, 0x02	; 2
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
    3558:	88 e2       	ldi	r24, 0x28	; 40
    355a:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_ZN12OrangutanLCD8send_cmdEh>
    355e:	88 e0       	ldi	r24, 0x08	; 8
    3560:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_ZN12OrangutanLCD8send_cmdEh>
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_ZN12OrangutanLCD8send_cmdEh>
    356a:	86 e0       	ldi	r24, 0x06	; 6
    356c:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_ZN12OrangutanLCD8send_cmdEh>
    3570:	8c e0       	ldi	r24, 0x0C	; 12
    3572:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_ZN12OrangutanLCD8send_cmdEh>
    3576:	08 95       	ret

00003578 <_ZN12OrangutanLCD4initEv>:
    3578:	80 91 a4 03 	lds	r24, 0x03A4
    357c:	88 23       	and	r24, r24
    357e:	29 f4       	brne	.+10     	; 0x358a <_ZN12OrangutanLCD4initEv+0x12>
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	80 93 a4 03 	sts	0x03A4, r24
    3586:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <_ZN12OrangutanLCD5init2Ev>
    358a:	08 95       	ret

0000358c <_ZN12OrangutanLCD4sendEhhh>:
    358c:	ff 92       	push	r15
    358e:	0f 93       	push	r16
    3590:	1f 93       	push	r17
    3592:	08 2f       	mov	r16, r24
    3594:	16 2f       	mov	r17, r22
    3596:	f4 2e       	mov	r15, r20
    3598:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN12OrangutanLCD4initEv>
    359c:	0e 94 a1 19 	call	0x3342	; 0x3342 <_ZN12OrangutanLCD8busyWaitEv>
    35a0:	37 b1       	in	r19, 0x07	; 7
    35a2:	28 b1       	in	r18, 0x08	; 8
    35a4:	29 98       	cbi	0x05, 1	; 5
    35a6:	11 23       	and	r17, r17
    35a8:	11 f0       	breq	.+4      	; 0x35ae <_ZN12OrangutanLCD4sendEhhh+0x22>
    35aa:	28 9a       	sbi	0x05, 0	; 5
    35ac:	01 c0       	rjmp	.+2      	; 0x35b0 <_ZN12OrangutanLCD4sendEhhh+0x24>
    35ae:	28 98       	cbi	0x05, 0	; 5
    35b0:	87 b1       	in	r24, 0x07	; 7
    35b2:	8c 63       	ori	r24, 0x3C	; 60
    35b4:	87 b9       	out	0x07, r24	; 7
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	f8 16       	cp	r15, r24
    35ba:	e1 f0       	breq	.+56     	; 0x35f4 <_ZN12OrangutanLCD4sendEhhh+0x68>
    35bc:	88 b1       	in	r24, 0x08	; 8
    35be:	90 2f       	mov	r25, r16
    35c0:	92 95       	swap	r25
    35c2:	9f 70       	andi	r25, 0x0F	; 15
    35c4:	99 0f       	add	r25, r25
    35c6:	99 0f       	add	r25, r25
    35c8:	83 7c       	andi	r24, 0xC3	; 195
    35ca:	98 2b       	or	r25, r24
    35cc:	98 b9       	out	0x08, r25	; 8
    35ce:	2a 9a       	sbi	0x05, 2	; 5
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	fc 01       	movw	r30, r24
    35d6:	6f 93       	push	r22
    35d8:	64 e0       	ldi	r22, 0x04	; 4
    35da:	6a 95       	dec	r22
    35dc:	f1 f7       	brne	.-4      	; 0x35da <_ZN12OrangutanLCD4sendEhhh+0x4e>
    35de:	6f 91       	pop	r22
    35e0:	31 97       	sbiw	r30, 0x01	; 1
    35e2:	c9 f7       	brne	.-14     	; 0x35d6 <_ZN12OrangutanLCD4sendEhhh+0x4a>
    35e4:	2a 98       	cbi	0x05, 2	; 5
    35e6:	6f 93       	push	r22
    35e8:	64 e0       	ldi	r22, 0x04	; 4
    35ea:	6a 95       	dec	r22
    35ec:	f1 f7       	brne	.-4      	; 0x35ea <_ZN12OrangutanLCD4sendEhhh+0x5e>
    35ee:	6f 91       	pop	r22
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	c9 f7       	brne	.-14     	; 0x35e6 <_ZN12OrangutanLCD4sendEhhh+0x5a>
    35f4:	88 b1       	in	r24, 0x08	; 8
    35f6:	0f 70       	andi	r16, 0x0F	; 15
    35f8:	00 0f       	add	r16, r16
    35fa:	00 0f       	add	r16, r16
    35fc:	83 7c       	andi	r24, 0xC3	; 195
    35fe:	80 2b       	or	r24, r16
    3600:	88 b9       	out	0x08, r24	; 8
    3602:	2a 9a       	sbi	0x05, 2	; 5
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	fc 01       	movw	r30, r24
    360a:	6f 93       	push	r22
    360c:	64 e0       	ldi	r22, 0x04	; 4
    360e:	6a 95       	dec	r22
    3610:	f1 f7       	brne	.-4      	; 0x360e <_ZN12OrangutanLCD4sendEhhh+0x82>
    3612:	6f 91       	pop	r22
    3614:	31 97       	sbiw	r30, 0x01	; 1
    3616:	c9 f7       	brne	.-14     	; 0x360a <_ZN12OrangutanLCD4sendEhhh+0x7e>
    3618:	2a 98       	cbi	0x05, 2	; 5
    361a:	6f 93       	push	r22
    361c:	64 e0       	ldi	r22, 0x04	; 4
    361e:	6a 95       	dec	r22
    3620:	f1 f7       	brne	.-4      	; 0x361e <_ZN12OrangutanLCD4sendEhhh+0x92>
    3622:	6f 91       	pop	r22
    3624:	01 97       	sbiw	r24, 0x01	; 1
    3626:	c9 f7       	brne	.-14     	; 0x361a <_ZN12OrangutanLCD4sendEhhh+0x8e>
    3628:	37 b9       	out	0x07, r19	; 7
    362a:	28 b9       	out	0x08, r18	; 8
    362c:	1f 91       	pop	r17
    362e:	0f 91       	pop	r16
    3630:	ff 90       	pop	r15
    3632:	08 95       	ret

00003634 <_ZN12OrangutanLCD8send_cmdEh>:
    3634:	60 e0       	ldi	r22, 0x00	; 0
    3636:	42 e0       	ldi	r20, 0x02	; 2
    3638:	0e 94 c6 1a 	call	0x358c	; 0x358c <_ZN12OrangutanLCD4sendEhhh>
    363c:	08 95       	ret

0000363e <_ZN12OrangutanLCD10moveCursorEhh>:
    363e:	0f 93       	push	r16
    3640:	1f 93       	push	r17
    3642:	08 2f       	mov	r16, r24
    3644:	16 2f       	mov	r17, r22
    3646:	08 c0       	rjmp	.+16     	; 0x3658 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    3648:	00 23       	and	r16, r16
    364a:	11 f4       	brne	.+4      	; 0x3650 <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    364c:	80 e1       	ldi	r24, 0x10	; 16
    364e:	01 c0       	rjmp	.+2      	; 0x3652 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    3650:	84 e1       	ldi	r24, 0x14	; 20
    3652:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_ZN12OrangutanLCD8send_cmdEh>
    3656:	11 50       	subi	r17, 0x01	; 1
    3658:	11 23       	and	r17, r17
    365a:	b1 f7       	brne	.-20     	; 0x3648 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    365c:	1f 91       	pop	r17
    365e:	0f 91       	pop	r16
    3660:	08 95       	ret

00003662 <lcd_move_cursor>:
    3662:	0e 94 1f 1b 	call	0x363e	; 0x363e <_ZN12OrangutanLCD10moveCursorEhh>
    3666:	08 95       	ret

00003668 <_ZN12OrangutanLCD10hideCursorEv>:
    3668:	8c e0       	ldi	r24, 0x0C	; 12
    366a:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_ZN12OrangutanLCD8send_cmdEh>
    366e:	08 95       	ret

00003670 <lcd_hide_cursor>:
    3670:	0e 94 34 1b 	call	0x3668	; 0x3668 <_ZN12OrangutanLCD10hideCursorEv>
    3674:	08 95       	ret

00003676 <_ZN12OrangutanLCD10showCursorEh>:
    3676:	81 30       	cpi	r24, 0x01	; 1
    3678:	11 f4       	brne	.+4      	; 0x367e <_ZN12OrangutanLCD10showCursorEh+0x8>
    367a:	8f e0       	ldi	r24, 0x0F	; 15
    367c:	01 c0       	rjmp	.+2      	; 0x3680 <_ZN12OrangutanLCD10showCursorEh+0xa>
    367e:	8e e0       	ldi	r24, 0x0E	; 14
    3680:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_ZN12OrangutanLCD8send_cmdEh>
    3684:	08 95       	ret

00003686 <lcd_show_cursor>:
    3686:	0e 94 3b 1b 	call	0x3676	; 0x3676 <_ZN12OrangutanLCD10showCursorEh>
    368a:	08 95       	ret

0000368c <_ZN12OrangutanLCD6gotoXYEhh>:
    368c:	a4 e0       	ldi	r26, 0x04	; 4
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	ec e4       	ldi	r30, 0x4C	; 76
    3692:	fb e1       	ldi	r31, 0x1B	; 27
    3694:	0c 94 5a 1f 	jmp	0x3eb4	; 0x3eb4 <__prologue_saves__+0x1c>
    3698:	18 2f       	mov	r17, r24
    369a:	06 2f       	mov	r16, r22
    369c:	80 e8       	ldi	r24, 0x80	; 128
    369e:	89 83       	std	Y+1, r24	; 0x01
    36a0:	80 ec       	ldi	r24, 0xC0	; 192
    36a2:	8a 83       	std	Y+2, r24	; 0x02
    36a4:	84 e9       	ldi	r24, 0x94	; 148
    36a6:	8b 83       	std	Y+3, r24	; 0x03
    36a8:	84 ed       	ldi	r24, 0xD4	; 212
    36aa:	8c 83       	std	Y+4, r24	; 0x04
    36ac:	fe 01       	movw	r30, r28
    36ae:	e6 0f       	add	r30, r22
    36b0:	f1 1d       	adc	r31, r1
    36b2:	81 81       	ldd	r24, Z+1	; 0x01
    36b4:	81 0f       	add	r24, r17
    36b6:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_ZN12OrangutanLCD8send_cmdEh>
    36ba:	10 93 9f 03 	sts	0x039F, r17
    36be:	00 93 9e 03 	sts	0x039E, r16
    36c2:	24 96       	adiw	r28, 0x04	; 4
    36c4:	e4 e0       	ldi	r30, 0x04	; 4
    36c6:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <__epilogue_restores__+0x1c>

000036ca <lcd_goto_xy>:
    36ca:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
    36ce:	08 95       	ret

000036d0 <_ZN12OrangutanLCD5clearEv>:
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_ZN12OrangutanLCD8send_cmdEh>
    36d6:	80 91 9c 03 	lds	r24, 0x039C
    36da:	90 91 9d 03 	lds	r25, 0x039D
    36de:	89 2b       	or	r24, r25
    36e0:	19 f1       	breq	.+70     	; 0x3728 <_ZN12OrangutanLCD5clearEv+0x58>
    36e2:	60 e0       	ldi	r22, 0x00	; 0
    36e4:	70 e2       	ldi	r23, 0x20	; 32
    36e6:	08 c0       	rjmp	.+16     	; 0x36f8 <_ZN12OrangutanLCD5clearEv+0x28>
    36e8:	e0 91 9c 03 	lds	r30, 0x039C
    36ec:	f0 91 9d 03 	lds	r31, 0x039D
    36f0:	e4 0f       	add	r30, r20
    36f2:	f5 1f       	adc	r31, r21
    36f4:	70 83       	st	Z, r23
    36f6:	6f 5f       	subi	r22, 0xFF	; 255
    36f8:	46 2f       	mov	r20, r22
    36fa:	50 e0       	ldi	r21, 0x00	; 0
    36fc:	80 91 8a 03 	lds	r24, 0x038A
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	01 97       	sbiw	r24, 0x01	; 1
    3704:	20 91 8b 03 	lds	r18, 0x038B
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	fc 01       	movw	r30, r24
    370c:	e2 9f       	mul	r30, r18
    370e:	c0 01       	movw	r24, r0
    3710:	e3 9f       	mul	r30, r19
    3712:	90 0d       	add	r25, r0
    3714:	f2 9f       	mul	r31, r18
    3716:	90 0d       	add	r25, r0
    3718:	11 24       	eor	r1, r1
    371a:	48 17       	cp	r20, r24
    371c:	59 07       	cpc	r21, r25
    371e:	24 f3       	brlt	.-56     	; 0x36e8 <_ZN12OrangutanLCD5clearEv+0x18>
    3720:	10 92 9f 03 	sts	0x039F, r1
    3724:	10 92 9e 03 	sts	0x039E, r1
    3728:	08 95       	ret

0000372a <clear>:
    372a:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <_ZN12OrangutanLCD5clearEv>
    372e:	08 95       	ret

00003730 <_ZN12OrangutanLCD9send_dataEh>:
    3730:	61 e0       	ldi	r22, 0x01	; 1
    3732:	42 e0       	ldi	r20, 0x02	; 2
    3734:	0e 94 c6 1a 	call	0x358c	; 0x358c <_ZN12OrangutanLCD4sendEhhh>
    3738:	08 95       	ret

0000373a <_ZN12OrangutanLCD11printBinaryEh>:
    373a:	0f 93       	push	r16
    373c:	1f 93       	push	r17
    373e:	cf 93       	push	r28
    3740:	df 93       	push	r29
    3742:	00 e0       	ldi	r16, 0x00	; 0
    3744:	10 e8       	ldi	r17, 0x80	; 128
    3746:	c8 2f       	mov	r28, r24
    3748:	d0 e0       	ldi	r29, 0x00	; 0
    374a:	81 2f       	mov	r24, r17
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	8c 23       	and	r24, r28
    3750:	9d 23       	and	r25, r29
    3752:	89 2b       	or	r24, r25
    3754:	11 f0       	breq	.+4      	; 0x375a <_ZN12OrangutanLCD11printBinaryEh+0x20>
    3756:	81 e3       	ldi	r24, 0x31	; 49
    3758:	01 c0       	rjmp	.+2      	; 0x375c <_ZN12OrangutanLCD11printBinaryEh+0x22>
    375a:	80 e3       	ldi	r24, 0x30	; 48
    375c:	0e 94 98 1b 	call	0x3730	; 0x3730 <_ZN12OrangutanLCD9send_dataEh>
    3760:	0f 5f       	subi	r16, 0xFF	; 255
    3762:	08 30       	cpi	r16, 0x08	; 8
    3764:	11 f0       	breq	.+4      	; 0x376a <_ZN12OrangutanLCD11printBinaryEh+0x30>
    3766:	16 95       	lsr	r17
    3768:	f0 cf       	rjmp	.-32     	; 0x374a <_ZN12OrangutanLCD11printBinaryEh+0x10>
    376a:	df 91       	pop	r29
    376c:	cf 91       	pop	r28
    376e:	1f 91       	pop	r17
    3770:	0f 91       	pop	r16
    3772:	08 95       	ret

00003774 <print_binary>:
    3774:	0e 94 9d 1b 	call	0x373a	; 0x373a <_ZN12OrangutanLCD11printBinaryEh>
    3778:	08 95       	ret

0000377a <_ZN12OrangutanLCD14printHexNibbleEh>:
    377a:	8a 30       	cpi	r24, 0x0A	; 10
    377c:	10 f4       	brcc	.+4      	; 0x3782 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    377e:	80 5d       	subi	r24, 0xD0	; 208
    3780:	01 c0       	rjmp	.+2      	; 0x3784 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    3782:	89 5c       	subi	r24, 0xC9	; 201
    3784:	0e 94 98 1b 	call	0x3730	; 0x3730 <_ZN12OrangutanLCD9send_dataEh>
    3788:	08 95       	ret

0000378a <_ZN12OrangutanLCD8printHexEh>:
    378a:	1f 93       	push	r17
    378c:	18 2f       	mov	r17, r24
    378e:	82 95       	swap	r24
    3790:	8f 70       	andi	r24, 0x0F	; 15
    3792:	0e 94 bd 1b 	call	0x377a	; 0x377a <_ZN12OrangutanLCD14printHexNibbleEh>
    3796:	81 2f       	mov	r24, r17
    3798:	8f 70       	andi	r24, 0x0F	; 15
    379a:	0e 94 bd 1b 	call	0x377a	; 0x377a <_ZN12OrangutanLCD14printHexNibbleEh>
    379e:	1f 91       	pop	r17
    37a0:	08 95       	ret

000037a2 <_ZN12OrangutanLCD8printHexEj>:
    37a2:	1f 93       	push	r17
    37a4:	18 2f       	mov	r17, r24
    37a6:	89 2f       	mov	r24, r25
    37a8:	0e 94 c5 1b 	call	0x378a	; 0x378a <_ZN12OrangutanLCD8printHexEh>
    37ac:	81 2f       	mov	r24, r17
    37ae:	0e 94 c5 1b 	call	0x378a	; 0x378a <_ZN12OrangutanLCD8printHexEh>
    37b2:	1f 91       	pop	r17
    37b4:	08 95       	ret

000037b6 <print_hex>:
    37b6:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <_ZN12OrangutanLCD8printHexEj>
    37ba:	08 95       	ret

000037bc <print_hex_byte>:
    37bc:	0e 94 c5 1b 	call	0x378a	; 0x378a <_ZN12OrangutanLCD8printHexEh>
    37c0:	08 95       	ret

000037c2 <_ZN12OrangutanLCD5printEm>:
    37c2:	6f 92       	push	r6
    37c4:	7f 92       	push	r7
    37c6:	8f 92       	push	r8
    37c8:	9f 92       	push	r9
    37ca:	af 92       	push	r10
    37cc:	bf 92       	push	r11
    37ce:	cf 92       	push	r12
    37d0:	df 92       	push	r13
    37d2:	ff 92       	push	r15
    37d4:	0f 93       	push	r16
    37d6:	df 93       	push	r29
    37d8:	cf 93       	push	r28
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
    37de:	2a 97       	sbiw	r28, 0x0a	; 10
    37e0:	0f b6       	in	r0, 0x3f	; 63
    37e2:	f8 94       	cli
    37e4:	de bf       	out	0x3e, r29	; 62
    37e6:	0f be       	out	0x3f, r0	; 63
    37e8:	cd bf       	out	0x3d, r28	; 61
    37ea:	5b 01       	movw	r10, r22
    37ec:	6c 01       	movw	r12, r24
    37ee:	0a e0       	ldi	r16, 0x0A	; 10
    37f0:	3e 01       	movw	r6, r28
    37f2:	08 94       	sec
    37f4:	61 1c       	adc	r6, r1
    37f6:	71 1c       	adc	r7, r1
    37f8:	fa 2c       	mov	r15, r10
    37fa:	c6 01       	movw	r24, r12
    37fc:	b5 01       	movw	r22, r10
    37fe:	2a e0       	ldi	r18, 0x0A	; 10
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e0       	ldi	r20, 0x00	; 0
    3804:	50 e0       	ldi	r21, 0x00	; 0
    3806:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <__udivmodsi4>
    380a:	c9 01       	movw	r24, r18
    380c:	da 01       	movw	r26, r20
    380e:	5c 01       	movw	r10, r24
    3810:	6d 01       	movw	r12, r26
    3812:	01 50       	subi	r16, 0x01	; 1
    3814:	43 01       	movw	r8, r6
    3816:	80 0e       	add	r8, r16
    3818:	91 1c       	adc	r9, r1
    381a:	80 e3       	ldi	r24, 0x30	; 48
    381c:	f8 0e       	add	r15, r24
    381e:	c6 01       	movw	r24, r12
    3820:	b5 01       	movw	r22, r10
    3822:	2a e0       	ldi	r18, 0x0A	; 10
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	40 e0       	ldi	r20, 0x00	; 0
    3828:	50 e0       	ldi	r21, 0x00	; 0
    382a:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__mulsi3>
    382e:	f6 1a       	sub	r15, r22
    3830:	f4 01       	movw	r30, r8
    3832:	f0 82       	st	Z, r15
    3834:	a1 14       	cp	r10, r1
    3836:	b1 04       	cpc	r11, r1
    3838:	c1 04       	cpc	r12, r1
    383a:	d1 04       	cpc	r13, r1
    383c:	e9 f6       	brne	.-70     	; 0x37f8 <_ZN12OrangutanLCD5printEm+0x36>
    383e:	08 c0       	rjmp	.+16     	; 0x3850 <_ZN12OrangutanLCD5printEm+0x8e>
    3840:	f6 01       	movw	r30, r12
    3842:	e0 0f       	add	r30, r16
    3844:	f1 1d       	adc	r31, r1
    3846:	80 81       	ld	r24, Z
    3848:	0e 94 98 1b 	call	0x3730	; 0x3730 <_ZN12OrangutanLCD9send_dataEh>
    384c:	0f 5f       	subi	r16, 0xFF	; 255
    384e:	04 c0       	rjmp	.+8      	; 0x3858 <_ZN12OrangutanLCD5printEm+0x96>
    3850:	6e 01       	movw	r12, r28
    3852:	08 94       	sec
    3854:	c1 1c       	adc	r12, r1
    3856:	d1 1c       	adc	r13, r1
    3858:	0a 30       	cpi	r16, 0x0A	; 10
    385a:	90 f3       	brcs	.-28     	; 0x3840 <_ZN12OrangutanLCD5printEm+0x7e>
    385c:	2a 96       	adiw	r28, 0x0a	; 10
    385e:	0f b6       	in	r0, 0x3f	; 63
    3860:	f8 94       	cli
    3862:	de bf       	out	0x3e, r29	; 62
    3864:	0f be       	out	0x3f, r0	; 63
    3866:	cd bf       	out	0x3d, r28	; 61
    3868:	cf 91       	pop	r28
    386a:	df 91       	pop	r29
    386c:	0f 91       	pop	r16
    386e:	ff 90       	pop	r15
    3870:	df 90       	pop	r13
    3872:	cf 90       	pop	r12
    3874:	bf 90       	pop	r11
    3876:	af 90       	pop	r10
    3878:	9f 90       	pop	r9
    387a:	8f 90       	pop	r8
    387c:	7f 90       	pop	r7
    387e:	6f 90       	pop	r6
    3880:	08 95       	ret

00003882 <print_unsigned_long>:
    3882:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <_ZN12OrangutanLCD5printEm>
    3886:	08 95       	ret

00003888 <_ZN12OrangutanLCD5printEl>:
    3888:	ef 92       	push	r14
    388a:	ff 92       	push	r15
    388c:	0f 93       	push	r16
    388e:	1f 93       	push	r17
    3890:	7b 01       	movw	r14, r22
    3892:	8c 01       	movw	r16, r24
    3894:	97 ff       	sbrs	r25, 7
    3896:	0b c0       	rjmp	.+22     	; 0x38ae <_ZN12OrangutanLCD5printEl+0x26>
    3898:	10 95       	com	r17
    389a:	00 95       	com	r16
    389c:	f0 94       	com	r15
    389e:	e0 94       	com	r14
    38a0:	e1 1c       	adc	r14, r1
    38a2:	f1 1c       	adc	r15, r1
    38a4:	01 1d       	adc	r16, r1
    38a6:	11 1d       	adc	r17, r1
    38a8:	8d e2       	ldi	r24, 0x2D	; 45
    38aa:	0e 94 98 1b 	call	0x3730	; 0x3730 <_ZN12OrangutanLCD9send_dataEh>
    38ae:	c8 01       	movw	r24, r16
    38b0:	b7 01       	movw	r22, r14
    38b2:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <_ZN12OrangutanLCD5printEm>
    38b6:	1f 91       	pop	r17
    38b8:	0f 91       	pop	r16
    38ba:	ff 90       	pop	r15
    38bc:	ef 90       	pop	r14
    38be:	08 95       	ret

000038c0 <print_long>:
    38c0:	0e 94 44 1c 	call	0x3888	; 0x3888 <_ZN12OrangutanLCD5printEl>
    38c4:	08 95       	ret

000038c6 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    38c6:	cf 93       	push	r28
    38c8:	df 93       	push	r29
    38ca:	ec 01       	movw	r28, r24
    38cc:	03 c0       	rjmp	.+6      	; 0x38d4 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    38ce:	0e 94 98 1b 	call	0x3730	; 0x3730 <_ZN12OrangutanLCD9send_dataEh>
    38d2:	21 96       	adiw	r28, 0x01	; 1
    38d4:	fe 01       	movw	r30, r28
    38d6:	84 91       	lpm	r24, Z+
    38d8:	88 23       	and	r24, r24
    38da:	c9 f7       	brne	.-14     	; 0x38ce <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    38dc:	df 91       	pop	r29
    38de:	cf 91       	pop	r28
    38e0:	08 95       	ret

000038e2 <print_from_program_space>:
    38e2:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    38e6:	08 95       	ret

000038e8 <_ZN12OrangutanLCD5printEPKc>:
    38e8:	cf 93       	push	r28
    38ea:	df 93       	push	r29
    38ec:	ec 01       	movw	r28, r24
    38ee:	03 c0       	rjmp	.+6      	; 0x38f6 <_ZN12OrangutanLCD5printEPKc+0xe>
    38f0:	21 96       	adiw	r28, 0x01	; 1
    38f2:	0e 94 98 1b 	call	0x3730	; 0x3730 <_ZN12OrangutanLCD9send_dataEh>
    38f6:	88 81       	ld	r24, Y
    38f8:	88 23       	and	r24, r24
    38fa:	d1 f7       	brne	.-12     	; 0x38f0 <_ZN12OrangutanLCD5printEPKc+0x8>
    38fc:	df 91       	pop	r29
    38fe:	cf 91       	pop	r28
    3900:	08 95       	ret

00003902 <print>:
    3902:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN12OrangutanLCD5printEPKc>
    3906:	08 95       	ret

00003908 <_ZN12OrangutanLCD5printEc>:
    3908:	0e 94 98 1b 	call	0x3730	; 0x3730 <_ZN12OrangutanLCD9send_dataEh>
    390c:	08 95       	ret

0000390e <print_character>:
    390e:	0e 94 98 1b 	call	0x3730	; 0x3730 <_ZN12OrangutanLCD9send_dataEh>
    3912:	08 95       	ret

00003914 <lcd_putchar>:
    3914:	a0 e0       	ldi	r26, 0x00	; 0
    3916:	b0 e0       	ldi	r27, 0x00	; 0
    3918:	e0 e9       	ldi	r30, 0x90	; 144
    391a:	fc e1       	ldi	r31, 0x1C	; 28
    391c:	0c 94 56 1f 	jmp	0x3eac	; 0x3eac <__prologue_saves__+0x14>
    3920:	e8 2e       	mov	r14, r24
    3922:	80 91 9c 03 	lds	r24, 0x039C
    3926:	90 91 9d 03 	lds	r25, 0x039D
    392a:	89 2b       	or	r24, r25
    392c:	09 f4       	brne	.+2      	; 0x3930 <lcd_putchar+0x1c>
    392e:	05 c1       	rjmp	.+522    	; 0x3b3a <lcd_putchar+0x226>
    3930:	2a e0       	ldi	r18, 0x0A	; 10
    3932:	e2 16       	cp	r14, r18
    3934:	09 f4       	brne	.+2      	; 0x3938 <lcd_putchar+0x24>
    3936:	46 c0       	rjmp	.+140    	; 0x39c4 <lcd_putchar+0xb0>
    3938:	38 e0       	ldi	r19, 0x08	; 8
    393a:	e3 16       	cp	r14, r19
    393c:	c9 f4       	brne	.+50     	; 0x3970 <lcd_putchar+0x5c>
    393e:	80 91 9f 03 	lds	r24, 0x039F
    3942:	81 50       	subi	r24, 0x01	; 1
    3944:	80 93 9f 03 	sts	0x039F, r24
    3948:	8f 3f       	cpi	r24, 0xFF	; 255
    394a:	51 f4       	brne	.+20     	; 0x3960 <lcd_putchar+0x4c>
    394c:	80 91 9e 03 	lds	r24, 0x039E
    3950:	81 50       	subi	r24, 0x01	; 1
    3952:	80 93 9e 03 	sts	0x039E, r24
    3956:	80 91 8b 03 	lds	r24, 0x038B
    395a:	81 50       	subi	r24, 0x01	; 1
    395c:	80 93 9f 03 	sts	0x039F, r24
    3960:	80 91 9e 03 	lds	r24, 0x039E
    3964:	8f 3f       	cpi	r24, 0xFF	; 255
    3966:	09 f0       	breq	.+2      	; 0x396a <lcd_putchar+0x56>
    3968:	e2 c0       	rjmp	.+452    	; 0x3b2e <lcd_putchar+0x21a>
    396a:	10 92 9e 03 	sts	0x039E, r1
    396e:	dd c0       	rjmp	.+442    	; 0x3b2a <lcd_putchar+0x216>
    3970:	8e 2d       	mov	r24, r14
    3972:	0e 94 98 1b 	call	0x3730	; 0x3730 <_ZN12OrangutanLCD9send_dataEh>
    3976:	20 91 9e 03 	lds	r18, 0x039E
    397a:	22 23       	and	r18, r18
    397c:	c9 f0       	breq	.+50     	; 0x39b0 <lcd_putchar+0x9c>
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	21 50       	subi	r18, 0x01	; 1
    3982:	30 40       	sbci	r19, 0x00	; 0
    3984:	80 91 8b 03 	lds	r24, 0x038B
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	ac 01       	movw	r20, r24
    398c:	24 9f       	mul	r18, r20
    398e:	c0 01       	movw	r24, r0
    3990:	25 9f       	mul	r18, r21
    3992:	90 0d       	add	r25, r0
    3994:	34 9f       	mul	r19, r20
    3996:	90 0d       	add	r25, r0
    3998:	11 24       	eor	r1, r1
    399a:	20 91 9f 03 	lds	r18, 0x039F
    399e:	e0 91 9c 03 	lds	r30, 0x039C
    39a2:	f0 91 9d 03 	lds	r31, 0x039D
    39a6:	e8 0f       	add	r30, r24
    39a8:	f9 1f       	adc	r31, r25
    39aa:	e2 0f       	add	r30, r18
    39ac:	f1 1d       	adc	r31, r1
    39ae:	e0 82       	st	Z, r14
    39b0:	80 91 9f 03 	lds	r24, 0x039F
    39b4:	8f 5f       	subi	r24, 0xFF	; 255
    39b6:	80 93 9f 03 	sts	0x039F, r24
    39ba:	90 91 8b 03 	lds	r25, 0x038B
    39be:	89 17       	cp	r24, r25
    39c0:	09 f0       	breq	.+2      	; 0x39c4 <lcd_putchar+0xb0>
    39c2:	bb c0       	rjmp	.+374    	; 0x3b3a <lcd_putchar+0x226>
    39c4:	40 91 9e 03 	lds	r20, 0x039E
    39c8:	24 2f       	mov	r18, r20
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	80 91 8a 03 	lds	r24, 0x038A
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	01 97       	sbiw	r24, 0x01	; 1
    39d4:	28 17       	cp	r18, r24
    39d6:	39 07       	cpc	r19, r25
    39d8:	09 f0       	breq	.+2      	; 0x39dc <lcd_putchar+0xc8>
    39da:	a4 c0       	rjmp	.+328    	; 0x3b24 <lcd_putchar+0x210>
    39dc:	c0 e0       	ldi	r28, 0x00	; 0
    39de:	d0 e0       	ldi	r29, 0x00	; 0
    39e0:	44 c0       	rjmp	.+136    	; 0x3a6a <lcd_putchar+0x156>
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	6c 2f       	mov	r22, r28
    39e6:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
    39ea:	ff 24       	eor	r15, r15
    39ec:	6e 01       	movw	r12, r28
    39ee:	08 94       	sec
    39f0:	c1 1c       	adc	r12, r1
    39f2:	d1 1c       	adc	r13, r1
    39f4:	35 c0       	rjmp	.+106    	; 0x3a60 <lcd_putchar+0x14c>
    39f6:	0f 2d       	mov	r16, r15
    39f8:	10 e0       	ldi	r17, 0x00	; 0
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	9c 01       	movw	r18, r24
    39fe:	c2 9f       	mul	r28, r18
    3a00:	c0 01       	movw	r24, r0
    3a02:	c3 9f       	mul	r28, r19
    3a04:	90 0d       	add	r25, r0
    3a06:	d2 9f       	mul	r29, r18
    3a08:	90 0d       	add	r25, r0
    3a0a:	11 24       	eor	r1, r1
    3a0c:	e0 91 9c 03 	lds	r30, 0x039C
    3a10:	f0 91 9d 03 	lds	r31, 0x039D
    3a14:	e0 0f       	add	r30, r16
    3a16:	f1 1f       	adc	r31, r17
    3a18:	e8 0f       	add	r30, r24
    3a1a:	f9 1f       	adc	r31, r25
    3a1c:	80 81       	ld	r24, Z
    3a1e:	0e 94 98 1b 	call	0x3730	; 0x3730 <_ZN12OrangutanLCD9send_dataEh>
    3a22:	e0 91 9c 03 	lds	r30, 0x039C
    3a26:	f0 91 9d 03 	lds	r31, 0x039D
    3a2a:	80 91 8b 03 	lds	r24, 0x038B
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	c8 9f       	mul	r28, r24
    3a32:	d0 01       	movw	r26, r0
    3a34:	c9 9f       	mul	r28, r25
    3a36:	b0 0d       	add	r27, r0
    3a38:	d8 9f       	mul	r29, r24
    3a3a:	b0 0d       	add	r27, r0
    3a3c:	11 24       	eor	r1, r1
    3a3e:	e0 0f       	add	r30, r16
    3a40:	f1 1f       	adc	r31, r17
    3a42:	ae 0f       	add	r26, r30
    3a44:	bf 1f       	adc	r27, r31
    3a46:	ac 01       	movw	r20, r24
    3a48:	c4 9e       	mul	r12, r20
    3a4a:	c0 01       	movw	r24, r0
    3a4c:	c5 9e       	mul	r12, r21
    3a4e:	90 0d       	add	r25, r0
    3a50:	d4 9e       	mul	r13, r20
    3a52:	90 0d       	add	r25, r0
    3a54:	11 24       	eor	r1, r1
    3a56:	e8 0f       	add	r30, r24
    3a58:	f9 1f       	adc	r31, r25
    3a5a:	80 81       	ld	r24, Z
    3a5c:	8c 93       	st	X, r24
    3a5e:	f3 94       	inc	r15
    3a60:	80 91 8b 03 	lds	r24, 0x038B
    3a64:	f8 16       	cp	r15, r24
    3a66:	38 f2       	brcs	.-114    	; 0x39f6 <lcd_putchar+0xe2>
    3a68:	e6 01       	movw	r28, r12
    3a6a:	60 91 8a 03 	lds	r22, 0x038A
    3a6e:	86 2f       	mov	r24, r22
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	02 97       	sbiw	r24, 0x02	; 2
    3a74:	c8 17       	cp	r28, r24
    3a76:	d9 07       	cpc	r29, r25
    3a78:	0c f4       	brge	.+2      	; 0x3a7c <lcd_putchar+0x168>
    3a7a:	b3 cf       	rjmp	.-154    	; 0x39e2 <lcd_putchar+0xce>
    3a7c:	62 30       	cpi	r22, 0x02	; 2
    3a7e:	08 f4       	brcc	.+2      	; 0x3a82 <lcd_putchar+0x16e>
    3a80:	40 c0       	rjmp	.+128    	; 0x3b02 <lcd_putchar+0x1ee>
    3a82:	62 50       	subi	r22, 0x02	; 2
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
    3a8a:	ff 24       	eor	r15, r15
    3a8c:	40 e2       	ldi	r20, 0x20	; 32
    3a8e:	d4 2e       	mov	r13, r20
    3a90:	34 c0       	rjmp	.+104    	; 0x3afa <lcd_putchar+0x1e6>
    3a92:	0f 2d       	mov	r16, r15
    3a94:	10 e0       	ldi	r17, 0x00	; 0
    3a96:	80 91 8a 03 	lds	r24, 0x038A
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	02 97       	sbiw	r24, 0x02	; 2
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	ac 01       	movw	r20, r24
    3aa2:	42 9f       	mul	r20, r18
    3aa4:	c0 01       	movw	r24, r0
    3aa6:	43 9f       	mul	r20, r19
    3aa8:	90 0d       	add	r25, r0
    3aaa:	52 9f       	mul	r21, r18
    3aac:	90 0d       	add	r25, r0
    3aae:	11 24       	eor	r1, r1
    3ab0:	e0 91 9c 03 	lds	r30, 0x039C
    3ab4:	f0 91 9d 03 	lds	r31, 0x039D
    3ab8:	e0 0f       	add	r30, r16
    3aba:	f1 1f       	adc	r31, r17
    3abc:	e8 0f       	add	r30, r24
    3abe:	f9 1f       	adc	r31, r25
    3ac0:	80 81       	ld	r24, Z
    3ac2:	0e 94 98 1b 	call	0x3730	; 0x3730 <_ZN12OrangutanLCD9send_dataEh>
    3ac6:	20 91 8a 03 	lds	r18, 0x038A
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	22 50       	subi	r18, 0x02	; 2
    3ace:	30 40       	sbci	r19, 0x00	; 0
    3ad0:	80 91 8b 03 	lds	r24, 0x038B
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	ac 01       	movw	r20, r24
    3ad8:	24 9f       	mul	r18, r20
    3ada:	c0 01       	movw	r24, r0
    3adc:	25 9f       	mul	r18, r21
    3ade:	90 0d       	add	r25, r0
    3ae0:	34 9f       	mul	r19, r20
    3ae2:	90 0d       	add	r25, r0
    3ae4:	11 24       	eor	r1, r1
    3ae6:	e0 91 9c 03 	lds	r30, 0x039C
    3aea:	f0 91 9d 03 	lds	r31, 0x039D
    3aee:	e0 0f       	add	r30, r16
    3af0:	f1 1f       	adc	r31, r17
    3af2:	e8 0f       	add	r30, r24
    3af4:	f9 1f       	adc	r31, r25
    3af6:	d0 82       	st	Z, r13
    3af8:	f3 94       	inc	r15
    3afa:	20 91 8b 03 	lds	r18, 0x038B
    3afe:	f2 16       	cp	r15, r18
    3b00:	40 f2       	brcs	.-112    	; 0x3a92 <lcd_putchar+0x17e>
    3b02:	60 91 8a 03 	lds	r22, 0x038A
    3b06:	61 50       	subi	r22, 0x01	; 1
    3b08:	80 e0       	ldi	r24, 0x00	; 0
    3b0a:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
    3b0e:	00 e0       	ldi	r16, 0x00	; 0
    3b10:	04 c0       	rjmp	.+8      	; 0x3b1a <lcd_putchar+0x206>
    3b12:	80 e2       	ldi	r24, 0x20	; 32
    3b14:	0e 94 98 1b 	call	0x3730	; 0x3730 <_ZN12OrangutanLCD9send_dataEh>
    3b18:	0f 5f       	subi	r16, 0xFF	; 255
    3b1a:	80 91 8b 03 	lds	r24, 0x038B
    3b1e:	08 17       	cp	r16, r24
    3b20:	c0 f3       	brcs	.-16     	; 0x3b12 <lcd_putchar+0x1fe>
    3b22:	03 c0       	rjmp	.+6      	; 0x3b2a <lcd_putchar+0x216>
    3b24:	4f 5f       	subi	r20, 0xFF	; 255
    3b26:	40 93 9e 03 	sts	0x039E, r20
    3b2a:	10 92 9f 03 	sts	0x039F, r1
    3b2e:	80 91 9f 03 	lds	r24, 0x039F
    3b32:	60 91 9e 03 	lds	r22, 0x039E
    3b36:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD6gotoXYEhh>
    3b3a:	2e 2d       	mov	r18, r14
    3b3c:	33 27       	eor	r19, r19
    3b3e:	27 fd       	sbrc	r18, 7
    3b40:	30 95       	com	r19
    3b42:	c9 01       	movw	r24, r18
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	e8 e0       	ldi	r30, 0x08	; 8
    3b4a:	0c 94 72 1f 	jmp	0x3ee4	; 0x3ee4 <__epilogue_restores__+0x14>

00003b4e <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    3b4e:	ef 92       	push	r14
    3b50:	ff 92       	push	r15
    3b52:	0f 93       	push	r16
    3b54:	1f 93       	push	r17
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
    3b5a:	7c 01       	movw	r14, r24
    3b5c:	06 2f       	mov	r16, r22
    3b5e:	10 e0       	ldi	r17, 0x00	; 0
    3b60:	53 e0       	ldi	r21, 0x03	; 3
    3b62:	00 0f       	add	r16, r16
    3b64:	11 1f       	adc	r17, r17
    3b66:	5a 95       	dec	r21
    3b68:	e1 f7       	brne	.-8      	; 0x3b62 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    3b6a:	c0 e0       	ldi	r28, 0x00	; 0
    3b6c:	d0 e0       	ldi	r29, 0x00	; 0
    3b6e:	9e 01       	movw	r18, r28
    3b70:	20 0f       	add	r18, r16
    3b72:	82 2f       	mov	r24, r18
    3b74:	80 64       	ori	r24, 0x40	; 64
    3b76:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_ZN12OrangutanLCD8send_cmdEh>
    3b7a:	f7 01       	movw	r30, r14
    3b7c:	ec 0f       	add	r30, r28
    3b7e:	fd 1f       	adc	r31, r29
    3b80:	e4 91       	lpm	r30, Z+
    3b82:	8e 2f       	mov	r24, r30
    3b84:	0e 94 98 1b 	call	0x3730	; 0x3730 <_ZN12OrangutanLCD9send_dataEh>
    3b88:	21 96       	adiw	r28, 0x01	; 1
    3b8a:	c8 30       	cpi	r28, 0x08	; 8
    3b8c:	d1 05       	cpc	r29, r1
    3b8e:	79 f7       	brne	.-34     	; 0x3b6e <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    3b90:	cd b7       	in	r28, 0x3d	; 61
    3b92:	de b7       	in	r29, 0x3e	; 62
    3b94:	e6 e0       	ldi	r30, 0x06	; 6
    3b96:	0c 94 74 1f 	jmp	0x3ee8	; 0x3ee8 <__epilogue_restores__+0x18>

00003b9a <lcd_load_custom_character>:
    3b9a:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    3b9e:	08 95       	ret

00003ba0 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    3ba0:	60 e0       	ldi	r22, 0x00	; 0
    3ba2:	41 e0       	ldi	r20, 0x01	; 1
    3ba4:	0e 94 c6 1a 	call	0x358c	; 0x358c <_ZN12OrangutanLCD4sendEhhh>
    3ba8:	08 95       	ret

00003baa <_ZN12OrangutanLCD6scrollEhhj>:
    3baa:	0f 93       	push	r16
    3bac:	1f 93       	push	r17
    3bae:	cf 93       	push	r28
    3bb0:	df 93       	push	r29
    3bb2:	08 2f       	mov	r16, r24
    3bb4:	16 2f       	mov	r17, r22
    3bb6:	ea 01       	movw	r28, r20
    3bb8:	0b c0       	rjmp	.+22     	; 0x3bd0 <_ZN12OrangutanLCD6scrollEhhj+0x26>
    3bba:	00 23       	and	r16, r16
    3bbc:	11 f4       	brne	.+4      	; 0x3bc2 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    3bbe:	88 e1       	ldi	r24, 0x18	; 24
    3bc0:	01 c0       	rjmp	.+2      	; 0x3bc4 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    3bc2:	8c e1       	ldi	r24, 0x1C	; 28
    3bc4:	0e 94 1a 1b 	call	0x3634	; 0x3634 <_ZN12OrangutanLCD8send_cmdEh>
    3bc8:	ce 01       	movw	r24, r28
    3bca:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN13OrangutanTime17delayMillisecondsEj>
    3bce:	11 50       	subi	r17, 0x01	; 1
    3bd0:	11 23       	and	r17, r17
    3bd2:	99 f7       	brne	.-26     	; 0x3bba <_ZN12OrangutanLCD6scrollEhhj+0x10>
    3bd4:	df 91       	pop	r29
    3bd6:	cf 91       	pop	r28
    3bd8:	1f 91       	pop	r17
    3bda:	0f 91       	pop	r16
    3bdc:	08 95       	ret

00003bde <lcd_scroll>:
    3bde:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <_ZN12OrangutanLCD6scrollEhhj>
    3be2:	08 95       	ret

00003be4 <__vector_11>:
    3be4:	2f 92       	push	r2
    3be6:	8f 93       	push	r24
    3be8:	9f 93       	push	r25
    3bea:	2f b6       	in	r2, 0x3f	; 63
    3bec:	80 91 a6 03 	lds	r24, 0x03A6
    3bf0:	90 91 a7 03 	lds	r25, 0x03A7
    3bf4:	01 96       	adiw	r24, 0x01	; 1
    3bf6:	80 93 a6 03 	sts	0x03A6, r24
    3bfa:	90 93 a7 03 	sts	0x03A7, r25
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	80 91 a8 03 	lds	r24, 0x03A8
    3c04:	89 1f       	adc	r24, r25
    3c06:	80 93 a8 03 	sts	0x03A8, r24
    3c0a:	90 91 ae 03 	lds	r25, 0x03AE
    3c0e:	9c 5f       	subi	r25, 0xFC	; 252
    3c10:	90 93 ae 03 	sts	0x03AE, r25
    3c14:	80 91 ad 03 	lds	r24, 0x03AD
    3c18:	80 51       	subi	r24, 0x10	; 16
    3c1a:	97 42       	sbci	r25, 0x27	; 39
    3c1c:	c0 f0       	brcs	.+48     	; 0x3c4e <end>
    3c1e:	90 93 ae 03 	sts	0x03AE, r25
    3c22:	80 93 ad 03 	sts	0x03AD, r24
    3c26:	80 91 a9 03 	lds	r24, 0x03A9
    3c2a:	90 91 aa 03 	lds	r25, 0x03AA
    3c2e:	01 96       	adiw	r24, 0x01	; 1
    3c30:	80 93 a9 03 	sts	0x03A9, r24
    3c34:	90 93 aa 03 	sts	0x03AA, r25
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	80 91 ab 03 	lds	r24, 0x03AB
    3c3e:	89 1f       	adc	r24, r25
    3c40:	80 93 ab 03 	sts	0x03AB, r24
    3c44:	80 91 ac 03 	lds	r24, 0x03AC
    3c48:	89 1f       	adc	r24, r25
    3c4a:	80 93 ac 03 	sts	0x03AC, r24

00003c4e <end>:
    3c4e:	2f be       	out	0x3f, r2	; 63
    3c50:	9f 91       	pop	r25
    3c52:	8f 91       	pop	r24
    3c54:	2f 90       	pop	r2
    3c56:	18 95       	reti

00003c58 <ticks_to_microseconds>:
    3c58:	6f 5f       	subi	r22, 0xFF	; 255
    3c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c60:	66 0f       	add	r22, r22
    3c62:	77 1f       	adc	r23, r23
    3c64:	88 1f       	adc	r24, r24
    3c66:	99 1f       	adc	r25, r25
    3c68:	25 e0       	ldi	r18, 0x05	; 5
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	40 e0       	ldi	r20, 0x00	; 0
    3c6e:	50 e0       	ldi	r21, 0x00	; 0
    3c70:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <__udivmodsi4>
    3c74:	ca 01       	movw	r24, r20
    3c76:	b9 01       	movw	r22, r18
    3c78:	08 95       	ret

00003c7a <delay_ms>:
    3c7a:	28 ee       	ldi	r18, 0xE8	; 232
    3c7c:	33 e0       	ldi	r19, 0x03	; 3
    3c7e:	09 c0       	rjmp	.+18     	; 0x3c92 <delay_ms+0x18>
    3c80:	f9 01       	movw	r30, r18
    3c82:	6f 93       	push	r22
    3c84:	64 e0       	ldi	r22, 0x04	; 4
    3c86:	6a 95       	dec	r22
    3c88:	f1 f7       	brne	.-4      	; 0x3c86 <delay_ms+0xc>
    3c8a:	6f 91       	pop	r22
    3c8c:	31 97       	sbiw	r30, 0x01	; 1
    3c8e:	c9 f7       	brne	.-14     	; 0x3c82 <delay_ms+0x8>
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	00 97       	sbiw	r24, 0x00	; 0
    3c94:	a9 f7       	brne	.-22     	; 0x3c80 <delay_ms+0x6>
    3c96:	08 95       	ret

00003c98 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    3c98:	6f 5f       	subi	r22, 0xFF	; 255
    3c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c9c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca0:	66 0f       	add	r22, r22
    3ca2:	77 1f       	adc	r23, r23
    3ca4:	88 1f       	adc	r24, r24
    3ca6:	99 1f       	adc	r25, r25
    3ca8:	25 e0       	ldi	r18, 0x05	; 5
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	40 e0       	ldi	r20, 0x00	; 0
    3cae:	50 e0       	ldi	r21, 0x00	; 0
    3cb0:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <__udivmodsi4>
    3cb4:	ca 01       	movw	r24, r20
    3cb6:	b9 01       	movw	r22, r18
    3cb8:	08 95       	ret

00003cba <_ZN13OrangutanTime17delayMillisecondsEj>:
    3cba:	28 ee       	ldi	r18, 0xE8	; 232
    3cbc:	33 e0       	ldi	r19, 0x03	; 3
    3cbe:	09 c0       	rjmp	.+18     	; 0x3cd2 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3cc0:	f9 01       	movw	r30, r18
    3cc2:	6f 93       	push	r22
    3cc4:	64 e0       	ldi	r22, 0x04	; 4
    3cc6:	6a 95       	dec	r22
    3cc8:	f1 f7       	brne	.-4      	; 0x3cc6 <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3cca:	6f 91       	pop	r22
    3ccc:	31 97       	sbiw	r30, 0x01	; 1
    3cce:	c9 f7       	brne	.-14     	; 0x3cc2 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3cd0:	01 97       	sbiw	r24, 0x01	; 1
    3cd2:	00 97       	sbiw	r24, 0x00	; 0
    3cd4:	a9 f7       	brne	.-22     	; 0x3cc0 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    3cd6:	08 95       	ret

00003cd8 <_ZN13OrangutanTime5init2Ev>:
    3cd8:	a0 e7       	ldi	r26, 0x70	; 112
    3cda:	b0 e0       	ldi	r27, 0x00	; 0
    3cdc:	8c 91       	ld	r24, X
    3cde:	8e 7f       	andi	r24, 0xFE	; 254
    3ce0:	8c 93       	st	X, r24
    3ce2:	e0 eb       	ldi	r30, 0xB0	; 176
    3ce4:	f0 e0       	ldi	r31, 0x00	; 0
    3ce6:	80 81       	ld	r24, Z
    3ce8:	83 60       	ori	r24, 0x03	; 3
    3cea:	80 83       	st	Z, r24
    3cec:	e1 eb       	ldi	r30, 0xB1	; 177
    3cee:	f0 e0       	ldi	r31, 0x00	; 0
    3cf0:	80 81       	ld	r24, Z
    3cf2:	80 7f       	andi	r24, 0xF0	; 240
    3cf4:	80 83       	st	Z, r24
    3cf6:	80 81       	ld	r24, Z
    3cf8:	82 60       	ori	r24, 0x02	; 2
    3cfa:	80 83       	st	Z, r24
    3cfc:	b8 9a       	sbi	0x17, 0	; 23
    3cfe:	8c 91       	ld	r24, X
    3d00:	81 60       	ori	r24, 0x01	; 1
    3d02:	8c 93       	st	X, r24
    3d04:	78 94       	sei
    3d06:	08 95       	ret

00003d08 <_ZN13OrangutanTime4initEv>:
    3d08:	80 91 af 03 	lds	r24, 0x03AF
    3d0c:	88 23       	and	r24, r24
    3d0e:	29 f4       	brne	.+10     	; 0x3d1a <_ZN13OrangutanTime4initEv+0x12>
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	80 93 af 03 	sts	0x03AF, r24
    3d16:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <_ZN13OrangutanTime5init2Ev>
    3d1a:	08 95       	ret

00003d1c <_ZN13OrangutanTime2msEv>:
    3d1c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <_ZN13OrangutanTime4initEv>
    3d20:	e0 e7       	ldi	r30, 0x70	; 112
    3d22:	f0 e0       	ldi	r31, 0x00	; 0
    3d24:	80 81       	ld	r24, Z
    3d26:	8e 7f       	andi	r24, 0xFE	; 254
    3d28:	80 83       	st	Z, r24
    3d2a:	20 91 a9 03 	lds	r18, 0x03A9
    3d2e:	30 91 aa 03 	lds	r19, 0x03AA
    3d32:	40 91 ab 03 	lds	r20, 0x03AB
    3d36:	50 91 ac 03 	lds	r21, 0x03AC
    3d3a:	80 81       	ld	r24, Z
    3d3c:	81 60       	ori	r24, 0x01	; 1
    3d3e:	80 83       	st	Z, r24
    3d40:	b9 01       	movw	r22, r18
    3d42:	ca 01       	movw	r24, r20
    3d44:	08 95       	ret

00003d46 <get_ms>:
    3d46:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <_ZN13OrangutanTime2msEv>
    3d4a:	08 95       	ret

00003d4c <_ZN13OrangutanTime5ticksEv>:
    3d4c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <_ZN13OrangutanTime4initEv>
    3d50:	80 91 70 00 	lds	r24, 0x0070
    3d54:	8e 7f       	andi	r24, 0xFE	; 254
    3d56:	80 93 70 00 	sts	0x0070, r24
    3d5a:	60 91 b2 00 	lds	r22, 0x00B2
    3d5e:	80 91 a5 03 	lds	r24, 0x03A5
    3d62:	90 91 a6 03 	lds	r25, 0x03A6
    3d66:	a0 91 a7 03 	lds	r26, 0x03A7
    3d6a:	b0 91 a8 03 	lds	r27, 0x03A8
    3d6e:	b8 99       	sbic	0x17, 0	; 23
    3d70:	05 c0       	rjmp	.+10     	; 0x3d7c <_ZN13OrangutanTime5ticksEv+0x30>
    3d72:	26 2f       	mov	r18, r22
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	40 e0       	ldi	r20, 0x00	; 0
    3d78:	50 e0       	ldi	r21, 0x00	; 0
    3d7a:	11 c0       	rjmp	.+34     	; 0x3d9e <_ZN13OrangutanTime5ticksEv+0x52>
    3d7c:	80 91 b2 00 	lds	r24, 0x00B2
    3d80:	20 91 a5 03 	lds	r18, 0x03A5
    3d84:	30 91 a6 03 	lds	r19, 0x03A6
    3d88:	40 91 a7 03 	lds	r20, 0x03A7
    3d8c:	50 91 a8 03 	lds	r21, 0x03A8
    3d90:	20 50       	subi	r18, 0x00	; 0
    3d92:	3f 4f       	sbci	r19, 0xFF	; 255
    3d94:	4f 4f       	sbci	r20, 0xFF	; 255
    3d96:	5f 4f       	sbci	r21, 0xFF	; 255
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	a0 e0       	ldi	r26, 0x00	; 0
    3d9c:	b0 e0       	ldi	r27, 0x00	; 0
    3d9e:	28 2b       	or	r18, r24
    3da0:	39 2b       	or	r19, r25
    3da2:	4a 2b       	or	r20, r26
    3da4:	5b 2b       	or	r21, r27
    3da6:	80 91 70 00 	lds	r24, 0x0070
    3daa:	81 60       	ori	r24, 0x01	; 1
    3dac:	80 93 70 00 	sts	0x0070, r24
    3db0:	b9 01       	movw	r22, r18
    3db2:	ca 01       	movw	r24, r20
    3db4:	08 95       	ret

00003db6 <get_ticks>:
    3db6:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZN13OrangutanTime5ticksEv>
    3dba:	08 95       	ret

00003dbc <_ZN13OrangutanTime5resetEv>:
    3dbc:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <_ZN13OrangutanTime4initEv>
    3dc0:	e0 e7       	ldi	r30, 0x70	; 112
    3dc2:	f0 e0       	ldi	r31, 0x00	; 0
    3dc4:	80 81       	ld	r24, Z
    3dc6:	8e 7f       	andi	r24, 0xFE	; 254
    3dc8:	80 83       	st	Z, r24
    3dca:	10 92 a9 03 	sts	0x03A9, r1
    3dce:	10 92 aa 03 	sts	0x03AA, r1
    3dd2:	10 92 ab 03 	sts	0x03AB, r1
    3dd6:	10 92 ac 03 	sts	0x03AC, r1
    3dda:	10 92 ae 03 	sts	0x03AE, r1
    3dde:	10 92 ad 03 	sts	0x03AD, r1
    3de2:	80 81       	ld	r24, Z
    3de4:	81 60       	ori	r24, 0x01	; 1
    3de6:	80 83       	st	Z, r24
    3de8:	08 95       	ret

00003dea <time_reset>:
    3dea:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <_ZN13OrangutanTime5resetEv>
    3dee:	08 95       	ret

00003df0 <__mulsi3>:
    3df0:	62 9f       	mul	r22, r18
    3df2:	d0 01       	movw	r26, r0
    3df4:	73 9f       	mul	r23, r19
    3df6:	f0 01       	movw	r30, r0
    3df8:	82 9f       	mul	r24, r18
    3dfa:	e0 0d       	add	r30, r0
    3dfc:	f1 1d       	adc	r31, r1
    3dfe:	64 9f       	mul	r22, r20
    3e00:	e0 0d       	add	r30, r0
    3e02:	f1 1d       	adc	r31, r1
    3e04:	92 9f       	mul	r25, r18
    3e06:	f0 0d       	add	r31, r0
    3e08:	83 9f       	mul	r24, r19
    3e0a:	f0 0d       	add	r31, r0
    3e0c:	74 9f       	mul	r23, r20
    3e0e:	f0 0d       	add	r31, r0
    3e10:	65 9f       	mul	r22, r21
    3e12:	f0 0d       	add	r31, r0
    3e14:	99 27       	eor	r25, r25
    3e16:	72 9f       	mul	r23, r18
    3e18:	b0 0d       	add	r27, r0
    3e1a:	e1 1d       	adc	r30, r1
    3e1c:	f9 1f       	adc	r31, r25
    3e1e:	63 9f       	mul	r22, r19
    3e20:	b0 0d       	add	r27, r0
    3e22:	e1 1d       	adc	r30, r1
    3e24:	f9 1f       	adc	r31, r25
    3e26:	bd 01       	movw	r22, r26
    3e28:	cf 01       	movw	r24, r30
    3e2a:	11 24       	eor	r1, r1
    3e2c:	08 95       	ret

00003e2e <__divmodhi4>:
    3e2e:	97 fb       	bst	r25, 7
    3e30:	09 2e       	mov	r0, r25
    3e32:	07 26       	eor	r0, r23
    3e34:	0a d0       	rcall	.+20     	; 0x3e4a <__divmodhi4_neg1>
    3e36:	77 fd       	sbrc	r23, 7
    3e38:	04 d0       	rcall	.+8      	; 0x3e42 <__divmodhi4_neg2>
    3e3a:	65 d0       	rcall	.+202    	; 0x3f06 <__udivmodhi4>
    3e3c:	06 d0       	rcall	.+12     	; 0x3e4a <__divmodhi4_neg1>
    3e3e:	00 20       	and	r0, r0
    3e40:	1a f4       	brpl	.+6      	; 0x3e48 <__divmodhi4_exit>

00003e42 <__divmodhi4_neg2>:
    3e42:	70 95       	com	r23
    3e44:	61 95       	neg	r22
    3e46:	7f 4f       	sbci	r23, 0xFF	; 255

00003e48 <__divmodhi4_exit>:
    3e48:	08 95       	ret

00003e4a <__divmodhi4_neg1>:
    3e4a:	f6 f7       	brtc	.-4      	; 0x3e48 <__divmodhi4_exit>
    3e4c:	90 95       	com	r25
    3e4e:	81 95       	neg	r24
    3e50:	9f 4f       	sbci	r25, 0xFF	; 255
    3e52:	08 95       	ret

00003e54 <__udivmodsi4>:
    3e54:	a1 e2       	ldi	r26, 0x21	; 33
    3e56:	1a 2e       	mov	r1, r26
    3e58:	aa 1b       	sub	r26, r26
    3e5a:	bb 1b       	sub	r27, r27
    3e5c:	fd 01       	movw	r30, r26
    3e5e:	0d c0       	rjmp	.+26     	; 0x3e7a <__udivmodsi4_ep>

00003e60 <__udivmodsi4_loop>:
    3e60:	aa 1f       	adc	r26, r26
    3e62:	bb 1f       	adc	r27, r27
    3e64:	ee 1f       	adc	r30, r30
    3e66:	ff 1f       	adc	r31, r31
    3e68:	a2 17       	cp	r26, r18
    3e6a:	b3 07       	cpc	r27, r19
    3e6c:	e4 07       	cpc	r30, r20
    3e6e:	f5 07       	cpc	r31, r21
    3e70:	20 f0       	brcs	.+8      	; 0x3e7a <__udivmodsi4_ep>
    3e72:	a2 1b       	sub	r26, r18
    3e74:	b3 0b       	sbc	r27, r19
    3e76:	e4 0b       	sbc	r30, r20
    3e78:	f5 0b       	sbc	r31, r21

00003e7a <__udivmodsi4_ep>:
    3e7a:	66 1f       	adc	r22, r22
    3e7c:	77 1f       	adc	r23, r23
    3e7e:	88 1f       	adc	r24, r24
    3e80:	99 1f       	adc	r25, r25
    3e82:	1a 94       	dec	r1
    3e84:	69 f7       	brne	.-38     	; 0x3e60 <__udivmodsi4_loop>
    3e86:	60 95       	com	r22
    3e88:	70 95       	com	r23
    3e8a:	80 95       	com	r24
    3e8c:	90 95       	com	r25
    3e8e:	9b 01       	movw	r18, r22
    3e90:	ac 01       	movw	r20, r24
    3e92:	bd 01       	movw	r22, r26
    3e94:	cf 01       	movw	r24, r30
    3e96:	08 95       	ret

00003e98 <__prologue_saves__>:
    3e98:	2f 92       	push	r2
    3e9a:	3f 92       	push	r3
    3e9c:	4f 92       	push	r4
    3e9e:	5f 92       	push	r5
    3ea0:	6f 92       	push	r6
    3ea2:	7f 92       	push	r7
    3ea4:	8f 92       	push	r8
    3ea6:	9f 92       	push	r9
    3ea8:	af 92       	push	r10
    3eaa:	bf 92       	push	r11
    3eac:	cf 92       	push	r12
    3eae:	df 92       	push	r13
    3eb0:	ef 92       	push	r14
    3eb2:	ff 92       	push	r15
    3eb4:	0f 93       	push	r16
    3eb6:	1f 93       	push	r17
    3eb8:	cf 93       	push	r28
    3eba:	df 93       	push	r29
    3ebc:	cd b7       	in	r28, 0x3d	; 61
    3ebe:	de b7       	in	r29, 0x3e	; 62
    3ec0:	ca 1b       	sub	r28, r26
    3ec2:	db 0b       	sbc	r29, r27
    3ec4:	0f b6       	in	r0, 0x3f	; 63
    3ec6:	f8 94       	cli
    3ec8:	de bf       	out	0x3e, r29	; 62
    3eca:	0f be       	out	0x3f, r0	; 63
    3ecc:	cd bf       	out	0x3d, r28	; 61
    3ece:	09 94       	ijmp

00003ed0 <__epilogue_restores__>:
    3ed0:	2a 88       	ldd	r2, Y+18	; 0x12
    3ed2:	39 88       	ldd	r3, Y+17	; 0x11
    3ed4:	48 88       	ldd	r4, Y+16	; 0x10
    3ed6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ed8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3eda:	7d 84       	ldd	r7, Y+13	; 0x0d
    3edc:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ede:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ee0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ee2:	b9 84       	ldd	r11, Y+9	; 0x09
    3ee4:	c8 84       	ldd	r12, Y+8	; 0x08
    3ee6:	df 80       	ldd	r13, Y+7	; 0x07
    3ee8:	ee 80       	ldd	r14, Y+6	; 0x06
    3eea:	fd 80       	ldd	r15, Y+5	; 0x05
    3eec:	0c 81       	ldd	r16, Y+4	; 0x04
    3eee:	1b 81       	ldd	r17, Y+3	; 0x03
    3ef0:	aa 81       	ldd	r26, Y+2	; 0x02
    3ef2:	b9 81       	ldd	r27, Y+1	; 0x01
    3ef4:	ce 0f       	add	r28, r30
    3ef6:	d1 1d       	adc	r29, r1
    3ef8:	0f b6       	in	r0, 0x3f	; 63
    3efa:	f8 94       	cli
    3efc:	de bf       	out	0x3e, r29	; 62
    3efe:	0f be       	out	0x3f, r0	; 63
    3f00:	cd bf       	out	0x3d, r28	; 61
    3f02:	ed 01       	movw	r28, r26
    3f04:	08 95       	ret

00003f06 <__udivmodhi4>:
    3f06:	aa 1b       	sub	r26, r26
    3f08:	bb 1b       	sub	r27, r27
    3f0a:	51 e1       	ldi	r21, 0x11	; 17
    3f0c:	07 c0       	rjmp	.+14     	; 0x3f1c <__udivmodhi4_ep>

00003f0e <__udivmodhi4_loop>:
    3f0e:	aa 1f       	adc	r26, r26
    3f10:	bb 1f       	adc	r27, r27
    3f12:	a6 17       	cp	r26, r22
    3f14:	b7 07       	cpc	r27, r23
    3f16:	10 f0       	brcs	.+4      	; 0x3f1c <__udivmodhi4_ep>
    3f18:	a6 1b       	sub	r26, r22
    3f1a:	b7 0b       	sbc	r27, r23

00003f1c <__udivmodhi4_ep>:
    3f1c:	88 1f       	adc	r24, r24
    3f1e:	99 1f       	adc	r25, r25
    3f20:	5a 95       	dec	r21
    3f22:	a9 f7       	brne	.-22     	; 0x3f0e <__udivmodhi4_loop>
    3f24:	80 95       	com	r24
    3f26:	90 95       	com	r25
    3f28:	bc 01       	movw	r22, r24
    3f2a:	cd 01       	movw	r24, r26
    3f2c:	08 95       	ret

00003f2e <malloc>:
    3f2e:	cf 93       	push	r28
    3f30:	df 93       	push	r29
    3f32:	bc 01       	movw	r22, r24
    3f34:	82 30       	cpi	r24, 0x02	; 2
    3f36:	91 05       	cpc	r25, r1
    3f38:	10 f4       	brcc	.+4      	; 0x3f3e <malloc+0x10>
    3f3a:	62 e0       	ldi	r22, 0x02	; 2
    3f3c:	70 e0       	ldi	r23, 0x00	; 0
    3f3e:	a0 91 b2 03 	lds	r26, 0x03B2
    3f42:	b0 91 b3 03 	lds	r27, 0x03B3
    3f46:	ed 01       	movw	r28, r26
    3f48:	e0 e0       	ldi	r30, 0x00	; 0
    3f4a:	f0 e0       	ldi	r31, 0x00	; 0
    3f4c:	40 e0       	ldi	r20, 0x00	; 0
    3f4e:	50 e0       	ldi	r21, 0x00	; 0
    3f50:	21 c0       	rjmp	.+66     	; 0x3f94 <malloc+0x66>
    3f52:	88 81       	ld	r24, Y
    3f54:	99 81       	ldd	r25, Y+1	; 0x01
    3f56:	86 17       	cp	r24, r22
    3f58:	97 07       	cpc	r25, r23
    3f5a:	69 f4       	brne	.+26     	; 0x3f76 <malloc+0x48>
    3f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f60:	30 97       	sbiw	r30, 0x00	; 0
    3f62:	19 f0       	breq	.+6      	; 0x3f6a <malloc+0x3c>
    3f64:	93 83       	std	Z+3, r25	; 0x03
    3f66:	82 83       	std	Z+2, r24	; 0x02
    3f68:	04 c0       	rjmp	.+8      	; 0x3f72 <malloc+0x44>
    3f6a:	90 93 b3 03 	sts	0x03B3, r25
    3f6e:	80 93 b2 03 	sts	0x03B2, r24
    3f72:	fe 01       	movw	r30, r28
    3f74:	34 c0       	rjmp	.+104    	; 0x3fde <malloc+0xb0>
    3f76:	68 17       	cp	r22, r24
    3f78:	79 07       	cpc	r23, r25
    3f7a:	38 f4       	brcc	.+14     	; 0x3f8a <malloc+0x5c>
    3f7c:	41 15       	cp	r20, r1
    3f7e:	51 05       	cpc	r21, r1
    3f80:	19 f0       	breq	.+6      	; 0x3f88 <malloc+0x5a>
    3f82:	84 17       	cp	r24, r20
    3f84:	95 07       	cpc	r25, r21
    3f86:	08 f4       	brcc	.+2      	; 0x3f8a <malloc+0x5c>
    3f88:	ac 01       	movw	r20, r24
    3f8a:	fe 01       	movw	r30, r28
    3f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f90:	9c 01       	movw	r18, r24
    3f92:	e9 01       	movw	r28, r18
    3f94:	20 97       	sbiw	r28, 0x00	; 0
    3f96:	e9 f6       	brne	.-70     	; 0x3f52 <malloc+0x24>
    3f98:	41 15       	cp	r20, r1
    3f9a:	51 05       	cpc	r21, r1
    3f9c:	a9 f1       	breq	.+106    	; 0x4008 <malloc+0xda>
    3f9e:	ca 01       	movw	r24, r20
    3fa0:	86 1b       	sub	r24, r22
    3fa2:	97 0b       	sbc	r25, r23
    3fa4:	04 97       	sbiw	r24, 0x04	; 4
    3fa6:	08 f4       	brcc	.+2      	; 0x3faa <malloc+0x7c>
    3fa8:	ba 01       	movw	r22, r20
    3faa:	e0 e0       	ldi	r30, 0x00	; 0
    3fac:	f0 e0       	ldi	r31, 0x00	; 0
    3fae:	2a c0       	rjmp	.+84     	; 0x4004 <malloc+0xd6>
    3fb0:	8d 91       	ld	r24, X+
    3fb2:	9c 91       	ld	r25, X
    3fb4:	11 97       	sbiw	r26, 0x01	; 1
    3fb6:	84 17       	cp	r24, r20
    3fb8:	95 07       	cpc	r25, r21
    3fba:	f9 f4       	brne	.+62     	; 0x3ffa <malloc+0xcc>
    3fbc:	64 17       	cp	r22, r20
    3fbe:	75 07       	cpc	r23, r21
    3fc0:	81 f4       	brne	.+32     	; 0x3fe2 <malloc+0xb4>
    3fc2:	12 96       	adiw	r26, 0x02	; 2
    3fc4:	8d 91       	ld	r24, X+
    3fc6:	9c 91       	ld	r25, X
    3fc8:	13 97       	sbiw	r26, 0x03	; 3
    3fca:	30 97       	sbiw	r30, 0x00	; 0
    3fcc:	19 f0       	breq	.+6      	; 0x3fd4 <malloc+0xa6>
    3fce:	93 83       	std	Z+3, r25	; 0x03
    3fd0:	82 83       	std	Z+2, r24	; 0x02
    3fd2:	04 c0       	rjmp	.+8      	; 0x3fdc <malloc+0xae>
    3fd4:	90 93 b3 03 	sts	0x03B3, r25
    3fd8:	80 93 b2 03 	sts	0x03B2, r24
    3fdc:	fd 01       	movw	r30, r26
    3fde:	32 96       	adiw	r30, 0x02	; 2
    3fe0:	4f c0       	rjmp	.+158    	; 0x4080 <malloc+0x152>
    3fe2:	ca 01       	movw	r24, r20
    3fe4:	86 1b       	sub	r24, r22
    3fe6:	97 0b       	sbc	r25, r23
    3fe8:	fd 01       	movw	r30, r26
    3fea:	e8 0f       	add	r30, r24
    3fec:	f9 1f       	adc	r31, r25
    3fee:	61 93       	st	Z+, r22
    3ff0:	71 93       	st	Z+, r23
    3ff2:	02 97       	sbiw	r24, 0x02	; 2
    3ff4:	8d 93       	st	X+, r24
    3ff6:	9c 93       	st	X, r25
    3ff8:	43 c0       	rjmp	.+134    	; 0x4080 <malloc+0x152>
    3ffa:	fd 01       	movw	r30, r26
    3ffc:	82 81       	ldd	r24, Z+2	; 0x02
    3ffe:	93 81       	ldd	r25, Z+3	; 0x03
    4000:	9c 01       	movw	r18, r24
    4002:	d9 01       	movw	r26, r18
    4004:	10 97       	sbiw	r26, 0x00	; 0
    4006:	a1 f6       	brne	.-88     	; 0x3fb0 <malloc+0x82>
    4008:	80 91 b0 03 	lds	r24, 0x03B0
    400c:	90 91 b1 03 	lds	r25, 0x03B1
    4010:	89 2b       	or	r24, r25
    4012:	41 f4       	brne	.+16     	; 0x4024 <malloc+0xf6>
    4014:	80 91 8e 03 	lds	r24, 0x038E
    4018:	90 91 8f 03 	lds	r25, 0x038F
    401c:	90 93 b1 03 	sts	0x03B1, r25
    4020:	80 93 b0 03 	sts	0x03B0, r24
    4024:	40 91 90 03 	lds	r20, 0x0390
    4028:	50 91 91 03 	lds	r21, 0x0391
    402c:	41 15       	cp	r20, r1
    402e:	51 05       	cpc	r21, r1
    4030:	41 f4       	brne	.+16     	; 0x4042 <malloc+0x114>
    4032:	4d b7       	in	r20, 0x3d	; 61
    4034:	5e b7       	in	r21, 0x3e	; 62
    4036:	80 91 8c 03 	lds	r24, 0x038C
    403a:	90 91 8d 03 	lds	r25, 0x038D
    403e:	48 1b       	sub	r20, r24
    4040:	59 0b       	sbc	r21, r25
    4042:	20 91 b0 03 	lds	r18, 0x03B0
    4046:	30 91 b1 03 	lds	r19, 0x03B1
    404a:	24 17       	cp	r18, r20
    404c:	35 07       	cpc	r19, r21
    404e:	b0 f4       	brcc	.+44     	; 0x407c <malloc+0x14e>
    4050:	ca 01       	movw	r24, r20
    4052:	82 1b       	sub	r24, r18
    4054:	93 0b       	sbc	r25, r19
    4056:	86 17       	cp	r24, r22
    4058:	97 07       	cpc	r25, r23
    405a:	80 f0       	brcs	.+32     	; 0x407c <malloc+0x14e>
    405c:	ab 01       	movw	r20, r22
    405e:	4e 5f       	subi	r20, 0xFE	; 254
    4060:	5f 4f       	sbci	r21, 0xFF	; 255
    4062:	84 17       	cp	r24, r20
    4064:	95 07       	cpc	r25, r21
    4066:	50 f0       	brcs	.+20     	; 0x407c <malloc+0x14e>
    4068:	42 0f       	add	r20, r18
    406a:	53 1f       	adc	r21, r19
    406c:	50 93 b1 03 	sts	0x03B1, r21
    4070:	40 93 b0 03 	sts	0x03B0, r20
    4074:	f9 01       	movw	r30, r18
    4076:	61 93       	st	Z+, r22
    4078:	71 93       	st	Z+, r23
    407a:	02 c0       	rjmp	.+4      	; 0x4080 <malloc+0x152>
    407c:	e0 e0       	ldi	r30, 0x00	; 0
    407e:	f0 e0       	ldi	r31, 0x00	; 0
    4080:	cf 01       	movw	r24, r30
    4082:	df 91       	pop	r29
    4084:	cf 91       	pop	r28
    4086:	08 95       	ret

00004088 <free>:
    4088:	cf 93       	push	r28
    408a:	df 93       	push	r29
    408c:	00 97       	sbiw	r24, 0x00	; 0
    408e:	09 f4       	brne	.+2      	; 0x4092 <free+0xa>
    4090:	50 c0       	rjmp	.+160    	; 0x4132 <__stack+0x33>
    4092:	ec 01       	movw	r28, r24
    4094:	22 97       	sbiw	r28, 0x02	; 2
    4096:	1b 82       	std	Y+3, r1	; 0x03
    4098:	1a 82       	std	Y+2, r1	; 0x02
    409a:	a0 91 b2 03 	lds	r26, 0x03B2
    409e:	b0 91 b3 03 	lds	r27, 0x03B3
    40a2:	10 97       	sbiw	r26, 0x00	; 0
    40a4:	09 f1       	breq	.+66     	; 0x40e8 <free+0x60>
    40a6:	40 e0       	ldi	r20, 0x00	; 0
    40a8:	50 e0       	ldi	r21, 0x00	; 0
    40aa:	ac 17       	cp	r26, r28
    40ac:	bd 07       	cpc	r27, r29
    40ae:	08 f1       	brcs	.+66     	; 0x40f2 <free+0x6a>
    40b0:	bb 83       	std	Y+3, r27	; 0x03
    40b2:	aa 83       	std	Y+2, r26	; 0x02
    40b4:	fe 01       	movw	r30, r28
    40b6:	21 91       	ld	r18, Z+
    40b8:	31 91       	ld	r19, Z+
    40ba:	e2 0f       	add	r30, r18
    40bc:	f3 1f       	adc	r31, r19
    40be:	ae 17       	cp	r26, r30
    40c0:	bf 07       	cpc	r27, r31
    40c2:	79 f4       	brne	.+30     	; 0x40e2 <free+0x5a>
    40c4:	8d 91       	ld	r24, X+
    40c6:	9c 91       	ld	r25, X
    40c8:	11 97       	sbiw	r26, 0x01	; 1
    40ca:	28 0f       	add	r18, r24
    40cc:	39 1f       	adc	r19, r25
    40ce:	2e 5f       	subi	r18, 0xFE	; 254
    40d0:	3f 4f       	sbci	r19, 0xFF	; 255
    40d2:	39 83       	std	Y+1, r19	; 0x01
    40d4:	28 83       	st	Y, r18
    40d6:	12 96       	adiw	r26, 0x02	; 2
    40d8:	8d 91       	ld	r24, X+
    40da:	9c 91       	ld	r25, X
    40dc:	13 97       	sbiw	r26, 0x03	; 3
    40de:	9b 83       	std	Y+3, r25	; 0x03
    40e0:	8a 83       	std	Y+2, r24	; 0x02
    40e2:	41 15       	cp	r20, r1
    40e4:	51 05       	cpc	r21, r1
    40e6:	71 f4       	brne	.+28     	; 0x4104 <__stack+0x5>
    40e8:	d0 93 b3 03 	sts	0x03B3, r29
    40ec:	c0 93 b2 03 	sts	0x03B2, r28
    40f0:	20 c0       	rjmp	.+64     	; 0x4132 <__stack+0x33>
    40f2:	12 96       	adiw	r26, 0x02	; 2
    40f4:	8d 91       	ld	r24, X+
    40f6:	9c 91       	ld	r25, X
    40f8:	13 97       	sbiw	r26, 0x03	; 3
    40fa:	ad 01       	movw	r20, r26
    40fc:	00 97       	sbiw	r24, 0x00	; 0
    40fe:	11 f0       	breq	.+4      	; 0x4104 <__stack+0x5>
    4100:	dc 01       	movw	r26, r24
    4102:	d3 cf       	rjmp	.-90     	; 0x40aa <free+0x22>
    4104:	fa 01       	movw	r30, r20
    4106:	d3 83       	std	Z+3, r29	; 0x03
    4108:	c2 83       	std	Z+2, r28	; 0x02
    410a:	21 91       	ld	r18, Z+
    410c:	31 91       	ld	r19, Z+
    410e:	e2 0f       	add	r30, r18
    4110:	f3 1f       	adc	r31, r19
    4112:	ce 17       	cp	r28, r30
    4114:	df 07       	cpc	r29, r31
    4116:	69 f4       	brne	.+26     	; 0x4132 <__stack+0x33>
    4118:	88 81       	ld	r24, Y
    411a:	99 81       	ldd	r25, Y+1	; 0x01
    411c:	28 0f       	add	r18, r24
    411e:	39 1f       	adc	r19, r25
    4120:	2e 5f       	subi	r18, 0xFE	; 254
    4122:	3f 4f       	sbci	r19, 0xFF	; 255
    4124:	fa 01       	movw	r30, r20
    4126:	31 83       	std	Z+1, r19	; 0x01
    4128:	20 83       	st	Z, r18
    412a:	8a 81       	ldd	r24, Y+2	; 0x02
    412c:	9b 81       	ldd	r25, Y+3	; 0x03
    412e:	93 83       	std	Z+3, r25	; 0x03
    4130:	82 83       	std	Z+2, r24	; 0x02
    4132:	df 91       	pop	r29
    4134:	cf 91       	pop	r28
    4136:	08 95       	ret

00004138 <fdevopen>:
    4138:	0f 93       	push	r16
    413a:	1f 93       	push	r17
    413c:	cf 93       	push	r28
    413e:	df 93       	push	r29
    4140:	8c 01       	movw	r16, r24
    4142:	eb 01       	movw	r28, r22
    4144:	00 97       	sbiw	r24, 0x00	; 0
    4146:	31 f4       	brne	.+12     	; 0x4154 <fdevopen+0x1c>
    4148:	61 15       	cp	r22, r1
    414a:	71 05       	cpc	r23, r1
    414c:	19 f4       	brne	.+6      	; 0x4154 <fdevopen+0x1c>
    414e:	20 e0       	ldi	r18, 0x00	; 0
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	38 c0       	rjmp	.+112    	; 0x41c4 <fdevopen+0x8c>
    4154:	81 e0       	ldi	r24, 0x01	; 1
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	6e e0       	ldi	r22, 0x0E	; 14
    415a:	70 e0       	ldi	r23, 0x00	; 0
    415c:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <calloc>
    4160:	fc 01       	movw	r30, r24
    4162:	9c 01       	movw	r18, r24
    4164:	00 97       	sbiw	r24, 0x00	; 0
    4166:	71 f1       	breq	.+92     	; 0x41c4 <fdevopen+0x8c>
    4168:	80 e8       	ldi	r24, 0x80	; 128
    416a:	83 83       	std	Z+3, r24	; 0x03
    416c:	20 97       	sbiw	r28, 0x00	; 0
    416e:	71 f0       	breq	.+28     	; 0x418c <fdevopen+0x54>
    4170:	d3 87       	std	Z+11, r29	; 0x0b
    4172:	c2 87       	std	Z+10, r28	; 0x0a
    4174:	81 e8       	ldi	r24, 0x81	; 129
    4176:	83 83       	std	Z+3, r24	; 0x03
    4178:	80 91 b4 03 	lds	r24, 0x03B4
    417c:	90 91 b5 03 	lds	r25, 0x03B5
    4180:	89 2b       	or	r24, r25
    4182:	21 f4       	brne	.+8      	; 0x418c <fdevopen+0x54>
    4184:	f0 93 b5 03 	sts	0x03B5, r31
    4188:	e0 93 b4 03 	sts	0x03B4, r30
    418c:	01 15       	cp	r16, r1
    418e:	11 05       	cpc	r17, r1
    4190:	c9 f0       	breq	.+50     	; 0x41c4 <fdevopen+0x8c>
    4192:	11 87       	std	Z+9, r17	; 0x09
    4194:	00 87       	std	Z+8, r16	; 0x08
    4196:	83 81       	ldd	r24, Z+3	; 0x03
    4198:	82 60       	ori	r24, 0x02	; 2
    419a:	83 83       	std	Z+3, r24	; 0x03
    419c:	80 91 b6 03 	lds	r24, 0x03B6
    41a0:	90 91 b7 03 	lds	r25, 0x03B7
    41a4:	89 2b       	or	r24, r25
    41a6:	71 f4       	brne	.+28     	; 0x41c4 <fdevopen+0x8c>
    41a8:	f0 93 b7 03 	sts	0x03B7, r31
    41ac:	e0 93 b6 03 	sts	0x03B6, r30
    41b0:	80 91 b8 03 	lds	r24, 0x03B8
    41b4:	90 91 b9 03 	lds	r25, 0x03B9
    41b8:	89 2b       	or	r24, r25
    41ba:	21 f4       	brne	.+8      	; 0x41c4 <fdevopen+0x8c>
    41bc:	f0 93 b9 03 	sts	0x03B9, r31
    41c0:	e0 93 b8 03 	sts	0x03B8, r30
    41c4:	c9 01       	movw	r24, r18
    41c6:	df 91       	pop	r29
    41c8:	cf 91       	pop	r28
    41ca:	1f 91       	pop	r17
    41cc:	0f 91       	pop	r16
    41ce:	08 95       	ret

000041d0 <calloc>:
    41d0:	0f 93       	push	r16
    41d2:	1f 93       	push	r17
    41d4:	cf 93       	push	r28
    41d6:	df 93       	push	r29
    41d8:	68 9f       	mul	r22, r24
    41da:	80 01       	movw	r16, r0
    41dc:	69 9f       	mul	r22, r25
    41de:	10 0d       	add	r17, r0
    41e0:	78 9f       	mul	r23, r24
    41e2:	10 0d       	add	r17, r0
    41e4:	11 24       	eor	r1, r1
    41e6:	c8 01       	movw	r24, r16
    41e8:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <malloc>
    41ec:	ec 01       	movw	r28, r24
    41ee:	00 97       	sbiw	r24, 0x00	; 0
    41f0:	29 f0       	breq	.+10     	; 0x41fc <calloc+0x2c>
    41f2:	60 e0       	ldi	r22, 0x00	; 0
    41f4:	70 e0       	ldi	r23, 0x00	; 0
    41f6:	a8 01       	movw	r20, r16
    41f8:	0e 94 04 21 	call	0x4208	; 0x4208 <memset>
    41fc:	ce 01       	movw	r24, r28
    41fe:	df 91       	pop	r29
    4200:	cf 91       	pop	r28
    4202:	1f 91       	pop	r17
    4204:	0f 91       	pop	r16
    4206:	08 95       	ret

00004208 <memset>:
    4208:	dc 01       	movw	r26, r24
    420a:	01 c0       	rjmp	.+2      	; 0x420e <memset+0x6>
    420c:	6d 93       	st	X+, r22
    420e:	41 50       	subi	r20, 0x01	; 1
    4210:	50 40       	sbci	r21, 0x00	; 0
    4212:	e0 f7       	brcc	.-8      	; 0x420c <memset+0x4>
    4214:	08 95       	ret

00004216 <_exit>:
    4216:	f8 94       	cli

00004218 <__stop_program>:
    4218:	ff cf       	rjmp	.-2      	; 0x4218 <__stop_program>
