
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024c  00800100  0000423e  000042d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000423e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080034c  0080034c  0000451e  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  00004520  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002591  00000000  00000000  00006ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00009271  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000026d  00000000  00000000  000092b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000010f8  00000000  00000000  0000951e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003f7  00000000  00000000  0000a616  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000203a  00000000  00000000  0000aa0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000130  00000000  00000000  0000ca48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009ea  00000000  00000000  0000cb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000080d  00000000  00000000  0000d562  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  0000dd6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <__vector_11>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	78 04       	cpc	r7, r8
      8e:	91 04       	cpc	r9, r1
      90:	ab 04       	cpc	r10, r11
      92:	c6 04       	cpc	r12, r6
      94:	e2 04       	cpc	r14, r2
      96:	fc 04       	cpc	r15, r12
      98:	17 05       	cpc	r17, r7
      9a:	33 05       	cpc	r19, r3
      9c:	4e 05       	cpc	r20, r14
      9e:	62 05       	cpc	r22, r2
      a0:	67 05       	cpc	r22, r7
      a2:	78 05       	cpc	r23, r8
      a4:	7d 05       	cpc	r23, r13
      a6:	8e 05       	cpc	r24, r14
      a8:	93 05       	cpc	r25, r3
      aa:	a5 05       	cpc	r26, r5
      ac:	aa 05       	cpc	r26, r10
      ae:	bc 05       	cpc	r27, r12
      b0:	c1 05       	cpc	r28, r1
      b2:	d3 05       	cpc	r29, r3
      b4:	d8 05       	cpc	r29, r8
      b6:	ea 05       	cpc	r30, r10
      b8:	ef 05       	cpc	r30, r15
      ba:	05 06       	cpc	r0, r21
      bc:	0a 06       	cpc	r0, r26
      be:	20 06       	cpc	r2, r16
      c0:	25 06       	cpc	r2, r21
      c2:	37 06       	cpc	r3, r23
      c4:	3c 06       	cpc	r3, r28
      c6:	4e 06       	cpc	r4, r30
      c8:	53 06       	cpc	r5, r19
      ca:	64 06       	cpc	r6, r20
      cc:	69 06       	cpc	r6, r25
      ce:	7a 06       	cpc	r7, r26
      d0:	7f 06       	cpc	r7, r31
      d2:	90 06       	cpc	r9, r16
      d4:	95 06       	cpc	r9, r21
      d6:	a6 06       	cpc	r10, r22
      d8:	ab 06       	cpc	r10, r27
      da:	bc 06       	cpc	r11, r28
      dc:	c1 06       	cpc	r12, r17
      de:	d2 06       	cpc	r13, r18

000000e0 <__ctors_end>:
      e0:	11 24       	eor	r1, r1
      e2:	1f be       	out	0x3f, r1	; 63
      e4:	cf ef       	ldi	r28, 0xFF	; 255
      e6:	d0 e4       	ldi	r29, 0x40	; 64
      e8:	de bf       	out	0x3e, r29	; 62
      ea:	cd bf       	out	0x3d, r28	; 61

000000ec <__do_copy_data>:
      ec:	13 e0       	ldi	r17, 0x03	; 3
      ee:	a0 e0       	ldi	r26, 0x00	; 0
      f0:	b1 e0       	ldi	r27, 0x01	; 1
      f2:	ee e3       	ldi	r30, 0x3E	; 62
      f4:	f2 e4       	ldi	r31, 0x42	; 66
      f6:	00 e0       	ldi	r16, 0x00	; 0
      f8:	0b bf       	out	0x3b, r16	; 59
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x14>
      fc:	07 90       	elpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	ac 34       	cpi	r26, 0x4C	; 76
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0x10>

00000106 <__do_clear_bss>:
     106:	13 e0       	ldi	r17, 0x03	; 3
     108:	ac e4       	ldi	r26, 0x4C	; 76
     10a:	b3 e0       	ldi	r27, 0x03	; 3
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a0 37       	cpi	r26, 0x70	; 112
     112:	b1 07       	cpc	r27, r17
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 a8 01 	call	0x350	; 0x350 <main>
     11a:	0c 94 1d 21 	jmp	0x423a	; 0x423a <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <_ZN16OrangutanDigital11isInputHighEh>:


	// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
	// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
	// the pin.
	inline static unsigned char isInputHigh(unsigned char pin)
     122:	48 2f       	mov	r20, r24
		io->pinRegister = 0;
		io->portRegister = 0;
		io->ddrRegister = 0;
		io->bitmask = 0;

		if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     124:	88 30       	cpi	r24, 0x08	; 8
     126:	58 f4       	brcc	.+22     	; 0x13e <_ZN16OrangutanDigital11isInputHighEh+0x1c>
		{
			io->pinRegister = (unsigned char*)&PIND;
			io->portRegister = (unsigned char*)&PORTD;
			io->ddrRegister = (unsigned char*)&DDRD;
			io->bitmask = 1 << pin;
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	02 c0       	rjmp	.+4      	; 0x132 <_ZN16OrangutanDigital11isInputHighEh+0x10>
     12e:	88 0f       	add	r24, r24
     130:	99 1f       	adc	r25, r25
     132:	4a 95       	dec	r20
     134:	e2 f7       	brpl	.-8      	; 0x12e <_ZN16OrangutanDigital11isInputHighEh+0xc>
     136:	98 2f       	mov	r25, r24
     138:	e9 e2       	ldi	r30, 0x29	; 41
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	36 c0       	rjmp	.+108    	; 0x1aa <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)

		else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     13e:	80 31       	cpi	r24, 0x10	; 16
     140:	78 f4       	brcc	.+30     	; 0x160 <_ZN16OrangutanDigital11isInputHighEh+0x3e>
		{
			io->pinRegister = (unsigned char*)&PINB;
			io->portRegister = (unsigned char*)&PORTB;
			io->ddrRegister = (unsigned char*)&DDRB;
			io->bitmask = 1 << (pin - 8);
     142:	28 2f       	mov	r18, r24
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	28 50       	subi	r18, 0x08	; 8
     148:	30 40       	sbci	r19, 0x00	; 0
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	02 c0       	rjmp	.+4      	; 0x154 <_ZN16OrangutanDigital11isInputHighEh+0x32>
     150:	88 0f       	add	r24, r24
     152:	99 1f       	adc	r25, r25
     154:	2a 95       	dec	r18
     156:	e2 f7       	brpl	.-8      	; 0x150 <_ZN16OrangutanDigital11isInputHighEh+0x2e>
     158:	98 2f       	mov	r25, r24
     15a:	e3 e2       	ldi	r30, 0x23	; 35
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	25 c0       	rjmp	.+74     	; 0x1aa <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     160:	88 31       	cpi	r24, 0x18	; 24
     162:	78 f4       	brcc	.+30     	; 0x182 <_ZN16OrangutanDigital11isInputHighEh+0x60>
		{
			io->pinRegister = (unsigned char*)&PINC;
			io->portRegister = (unsigned char*)&PORTC;
			io->ddrRegister = (unsigned char*)&DDRC;
			io->bitmask = 1 << (pin - 16);
     164:	28 2f       	mov	r18, r24
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	20 51       	subi	r18, 0x10	; 16
     16a:	30 40       	sbci	r19, 0x00	; 0
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	02 c0       	rjmp	.+4      	; 0x176 <_ZN16OrangutanDigital11isInputHighEh+0x54>
     172:	88 0f       	add	r24, r24
     174:	99 1f       	adc	r25, r25
     176:	2a 95       	dec	r18
     178:	e2 f7       	brpl	.-8      	; 0x172 <_ZN16OrangutanDigital11isInputHighEh+0x50>
     17a:	98 2f       	mov	r25, r24
     17c:	e6 e2       	ldi	r30, 0x26	; 38
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	14 c0       	rjmp	.+40     	; 0x1aa <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     182:	80 32       	cpi	r24, 0x20	; 32
     184:	20 f0       	brcs	.+8      	; 0x18e <_ZN16OrangutanDigital11isInputHighEh+0x6c>
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	e0 e0       	ldi	r30, 0x00	; 0
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	0e c0       	rjmp	.+28     	; 0x1aa <_ZN16OrangutanDigital11isInputHighEh+0x88>
		{
			io->pinRegister = (unsigned char*)&PINA;
			io->portRegister = (unsigned char*)&PORTA;
			io->ddrRegister = (unsigned char*)&DDRA;
			io->bitmask = 1 << (31 - pin);
     18e:	2f e1       	ldi	r18, 0x1F	; 31
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	28 1b       	sub	r18, r24
     194:	31 09       	sbc	r19, r1
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <_ZN16OrangutanDigital11isInputHighEh+0x7e>
     19c:	88 0f       	add	r24, r24
     19e:	99 1f       	adc	r25, r25
     1a0:	2a 95       	dec	r18
     1a2:	e2 f7       	brpl	.-8      	; 0x19c <_ZN16OrangutanDigital11isInputHighEh+0x7a>
     1a4:	98 2f       	mov	r25, r24
     1a6:	e0 e2       	ldi	r30, 0x20	; 32
     1a8:	f0 e0       	ldi	r31, 0x00	; 0

	// low-level method for reading the value of the PIN register for an pin or set of pins
	// described by an IOStruct pointer.
	inline static unsigned char getInputValue(struct IOStruct* ioPin)
	{
		return *(ioPin->pinRegister) & ioPin->bitmask;
     1aa:	80 81       	ld	r24, Z
	inline static unsigned char isInputHigh(unsigned char pin)
	{
		struct IOStruct registers;
		getIORegisters(&registers, pin);
		return getInputValue(&registers);
	}
     1ac:	89 23       	and	r24, r25
     1ae:	08 95       	ret

000001b0 <__cxa_guard_acquire>:

extern "C" int __cxa_guard_acquire(__guard *); 
extern "C" void __cxa_guard_release (__guard *); 
extern "C" void __cxa_guard_abort (__guard *); 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);}; 
     1b0:	fc 01       	movw	r30, r24
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	88 23       	and	r24, r24
     1ba:	11 f4       	brne	.+4      	; 0x1c0 <__cxa_guard_acquire+0x10>
     1bc:	21 e0       	ldi	r18, 0x01	; 1
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	c9 01       	movw	r24, r18
     1c2:	08 95       	ret

000001c4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;}; 
     1c4:	fc 01       	movw	r30, r24
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	80 83       	st	Z, r24
     1ca:	08 95       	ret

000001cc <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
     1cc:	08 95       	ret

000001ce <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void); 
void __cxa_pure_virtual(void) {}; 
     1ce:	08 95       	ret

000001d0 <_Z15motor_and_writeiiiiiiii>:
	OrangutanLCD::print("END");
	}
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int m1, int m2, int m3, int m4, int m5)
     1d0:	6f 92       	push	r6
     1d2:	7f 92       	push	r7
     1d4:	8f 92       	push	r8
     1d6:	9f 92       	push	r9
     1d8:	af 92       	push	r10
     1da:	bf 92       	push	r11
     1dc:	cf 92       	push	r12
     1de:	df 92       	push	r13
     1e0:	ef 92       	push	r14
     1e2:	ff 92       	push	r15
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	4c 01       	movw	r8, r24
     1ee:	3a 01       	movw	r6, r20
     1f0:	e9 01       	movw	r28, r18
{
//motor and write
	if( ((counter - counterRef) % (totallength1) ) < (steplength1) && m1)  //check if it is in the right period of the loop to send high
     1f2:	fc 01       	movw	r30, r24
     1f4:	e6 1b       	sub	r30, r22
     1f6:	f7 0b       	sbc	r31, r23
     1f8:	60 91 39 03 	lds	r22, 0x0339
     1fc:	70 91 3a 03 	lds	r23, 0x033A
     200:	cf 01       	movw	r24, r30
     202:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
     206:	20 91 2f 03 	lds	r18, 0x032F
     20a:	30 91 30 03 	lds	r19, 0x0330
     20e:	82 17       	cp	r24, r18
     210:	93 07       	cpc	r25, r19
     212:	34 f4       	brge	.+12     	; 0x220 <_Z15motor_and_writeiiiiiiii+0x50>
     214:	cd 2b       	or	r28, r29
     216:	21 f0       	breq	.+8      	; 0x220 <_Z15motor_and_writeiiiiiiii+0x50>
	{
		u_motorByte0.bits_in_motorByte0.m1Step = 1; // set bit 0
     218:	80 91 4c 03 	lds	r24, 0x034C
     21c:	81 60       	ori	r24, 0x01	; 1
     21e:	03 c0       	rjmp	.+6      	; 0x226 <_Z15motor_and_writeiiiiiiii+0x56>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.m1Step = 0; // set bit 0
     220:	80 91 4c 03 	lds	r24, 0x034C
     224:	8e 7f       	andi	r24, 0xFE	; 254
     226:	80 93 4c 03 	sts	0x034C, r24
	}
		if( ((counter - counterRef) % (totallength2) ) < (steplength2) && m2)
     22a:	60 91 3b 03 	lds	r22, 0x033B
     22e:	70 91 3c 03 	lds	r23, 0x033C
     232:	cf 01       	movw	r24, r30
     234:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
     238:	20 91 31 03 	lds	r18, 0x0331
     23c:	30 91 32 03 	lds	r19, 0x0332
     240:	82 17       	cp	r24, r18
     242:	93 07       	cpc	r25, r19
     244:	34 f4       	brge	.+12     	; 0x252 <_Z15motor_and_writeiiiiiiii+0x82>
     246:	01 2b       	or	r16, r17
     248:	21 f0       	breq	.+8      	; 0x252 <_Z15motor_and_writeiiiiiiii+0x82>
	{
		u_motorByte0.bits_in_motorByte0.m2Step = 1; // set bit 1
     24a:	80 91 4c 03 	lds	r24, 0x034C
     24e:	88 60       	ori	r24, 0x08	; 8
     250:	03 c0       	rjmp	.+6      	; 0x258 <_Z15motor_and_writeiiiiiiii+0x88>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.m2Step = 0; // set bit 1
     252:	80 91 4c 03 	lds	r24, 0x034C
     256:	87 7f       	andi	r24, 0xF7	; 247
     258:	80 93 4c 03 	sts	0x034C, r24
	}
	if( ((counter - counterRef) % (totallength3) ) < (steplength3) && m3)
     25c:	60 91 3d 03 	lds	r22, 0x033D
     260:	70 91 3e 03 	lds	r23, 0x033E
     264:	cf 01       	movw	r24, r30
     266:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
     26a:	20 91 33 03 	lds	r18, 0x0333
     26e:	30 91 34 03 	lds	r19, 0x0334
     272:	82 17       	cp	r24, r18
     274:	93 07       	cpc	r25, r19
     276:	34 f4       	brge	.+12     	; 0x284 <_Z15motor_and_writeiiiiiiii+0xb4>
     278:	ef 28       	or	r14, r15
     27a:	21 f0       	breq	.+8      	; 0x284 <_Z15motor_and_writeiiiiiiii+0xb4>
	{
		u_motorByte0.bits_in_motorByte0.m3Step = 1; // set bit 1
     27c:	80 91 4c 03 	lds	r24, 0x034C
     280:	80 64       	ori	r24, 0x40	; 64
     282:	03 c0       	rjmp	.+6      	; 0x28a <_Z15motor_and_writeiiiiiiii+0xba>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.m3Step = 0; // set bit 1
     284:	80 91 4c 03 	lds	r24, 0x034C
     288:	8f 7b       	andi	r24, 0xBF	; 191
     28a:	80 93 4c 03 	sts	0x034C, r24
	}

	if( ((counter - counterRef) % (totallength4) ) < (steplength4) && m4)
     28e:	60 91 3f 03 	lds	r22, 0x033F
     292:	70 91 40 03 	lds	r23, 0x0340
     296:	cf 01       	movw	r24, r30
     298:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
     29c:	20 91 35 03 	lds	r18, 0x0335
     2a0:	30 91 36 03 	lds	r19, 0x0336
     2a4:	82 17       	cp	r24, r18
     2a6:	93 07       	cpc	r25, r19
     2a8:	34 f4       	brge	.+12     	; 0x2b6 <_Z15motor_and_writeiiiiiiii+0xe6>
     2aa:	cd 28       	or	r12, r13
     2ac:	21 f0       	breq	.+8      	; 0x2b6 <_Z15motor_and_writeiiiiiiii+0xe6>
	{
		u_motorByte1.bits_in_motorByte1.m4Step = 1; // set bit 1
     2ae:	80 91 4d 03 	lds	r24, 0x034D
     2b2:	82 60       	ori	r24, 0x02	; 2
     2b4:	03 c0       	rjmp	.+6      	; 0x2bc <_Z15motor_and_writeiiiiiiii+0xec>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.m4Step = 0; // set bit 1
     2b6:	80 91 4d 03 	lds	r24, 0x034D
     2ba:	8d 7f       	andi	r24, 0xFD	; 253
     2bc:	80 93 4d 03 	sts	0x034D, r24
	}

	if( ((counter - counterRefFive) % (totallength5) ) < (steplength5) && m5)
     2c0:	60 91 41 03 	lds	r22, 0x0341
     2c4:	70 91 42 03 	lds	r23, 0x0342
     2c8:	c4 01       	movw	r24, r8
     2ca:	86 19       	sub	r24, r6
     2cc:	97 09       	sbc	r25, r7
     2ce:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
     2d2:	20 91 37 03 	lds	r18, 0x0337
     2d6:	30 91 38 03 	lds	r19, 0x0338
     2da:	82 17       	cp	r24, r18
     2dc:	93 07       	cpc	r25, r19
     2de:	34 f4       	brge	.+12     	; 0x2ec <_Z15motor_and_writeiiiiiiii+0x11c>
     2e0:	ab 28       	or	r10, r11
     2e2:	21 f0       	breq	.+8      	; 0x2ec <_Z15motor_and_writeiiiiiiii+0x11c>
	{
		u_motorByte1.bits_in_motorByte1.m5Step = 1; // set bit 1
     2e4:	80 91 4d 03 	lds	r24, 0x034D
     2e8:	80 61       	ori	r24, 0x10	; 16
     2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <_Z15motor_and_writeiiiiiiii+0x122>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.m5Step = 0; // set bit 1
     2ec:	80 91 4d 03 	lds	r24, 0x034D
     2f0:	8f 7e       	andi	r24, 0xEF	; 239
     2f2:	80 93 4d 03 	sts	0x034D, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     2f6:	80 e4       	ldi	r24, 0x40	; 64
     2f8:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
	i2c_write(0x2);									// write command byte
     2fc:	82 e0       	ldi	r24, 0x02	; 2
     2fe:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     302:	80 91 4c 03 	lds	r24, 0x034C
     306:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     30a:	80 91 4d 03 	lds	r24, 0x034D
     30e:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
	i2c_stop();                            // set stop conditon = release bus
     312:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8i2c_stopv>

	i2c_start(I2C2+I2C_WRITE);
     316:	82 e4       	ldi	r24, 0x42	; 66
     318:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
	i2c_write(0x2);
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
	i2c_write(u_outputByte0.outputByte0);
     322:	80 91 4e 03 	lds	r24, 0x034E
     326:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
	i2c_write(u_outputByte1.outputByte1);
     32a:	80 91 4f 03 	lds	r24, 0x034F
     32e:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
}
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	ff 90       	pop	r15
     33c:	ef 90       	pop	r14
     33e:	df 90       	pop	r13
     340:	cf 90       	pop	r12
     342:	bf 90       	pop	r11
     344:	af 90       	pop	r10
     346:	9f 90       	pop	r9
     348:	8f 90       	pop	r8
     34a:	7f 90       	pop	r7
     34c:	6f 90       	pop	r6
     34e:	08 95       	ret

00000350 <main>:

  
void motor_and_write(int counter, int counterRef, int counterRefFive, int m1, int m2, int m3, int m4, int m5);


int main()   
     350:	2f 92       	push	r2
     352:	3f 92       	push	r3
     354:	4f 92       	push	r4
     356:	5f 92       	push	r5
     358:	6f 92       	push	r6
     35a:	7f 92       	push	r7
     35c:	8f 92       	push	r8
     35e:	9f 92       	push	r9
     360:	af 92       	push	r10
     362:	bf 92       	push	r11
     364:	cf 92       	push	r12
     366:	df 92       	push	r13
     368:	ef 92       	push	r14
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	df 93       	push	r29
     372:	cf 93       	push	r28
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	6a 97       	sbiw	r28, 0x1a	; 26
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
	int m2HalfPlate = 2000, m2WholePlate = 2000, m1LoadPlate = 2000, m2HomeFix = 2000;
	int m2Brush1Step = 2000, m2Brush2Step = 2000, m2Dry1Step = 2000, m2Dry2Step = 2000;
	int m2LoadBack = 2000, m2Dry1StepWhole = 2000, m2Brush2StepWhole = 2000;
    
	while(1){
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     384:	10 92 4c 03 	sts	0x034C, r1
	u_motorByte1.motorByte1 = 0;  // initialize motorByte1
     388:	10 92 4d 03 	sts	0x034D, r1
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     38c:	8f ef       	ldi	r24, 0xFF	; 255
     38e:	80 93 4e 03 	sts	0x034E, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
     392:	80 93 4f 03 	sts	0x034F, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
     396:	10 92 50 03 	sts	0x0350, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
     39a:	10 92 51 03 	sts	0x0351, r1
	
	OrangutanLCD::clear();
     39e:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("BEGIN ");
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
// another C++ file.
inline unsigned long get_ms() { return OrangutanTime::ms(); }
inline unsigned long millis() { return OrangutanTime::ms(); }

inline void delay(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
inline void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
     3aa:	88 ee       	ldi	r24, 0xE8	; 232
     3ac:	93 e0       	ldi	r25, 0x03	; 3
     3ae:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>
	
	delay_ms(1000);

    i2c_init();                                // init I2C interface
     3b2:	0e 94 29 19 	call	0x3252	; 0x3252 <_Z8i2c_initv>
	
    OrangutanLCD::print("INIT ");
     3b6:	87 e0       	ldi	r24, 0x07	; 7
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // set device address and write mode
     3be:	80 e4       	ldi	r24, 0x40	; 64
     3c0:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
     3c4:	c8 2e       	mov	r12, r24
	i2c_stop();
     3c6:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8i2c_stopv>
	ret2 = i2c_start(I2C2+I2C_WRITE);
     3ca:	82 e4       	ldi	r24, 0x42	; 66
     3cc:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
     3d0:	08 2f       	mov	r16, r24
	i2c_stop();
     3d2:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8i2c_stopv>
	ret3 = i2c_start(I2C3+I2C_WRITE);
     3d6:	84 e4       	ldi	r24, 0x44	; 68
     3d8:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
     3dc:	e8 2e       	mov	r14, r24
	i2c_stop();
     3de:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8i2c_stopv>
    
	OrangutanLCD::clear();
     3e2:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("START ");
     3e6:	8d e0       	ldi	r24, 0x0D	; 13
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
	
	if ( ret1 | ret2 | ret3 ) {
     3ee:	10 e0       	ldi	r17, 0x00	; 0
     3f0:	dd 24       	eor	r13, r13
     3f2:	0c 29       	or	r16, r12
     3f4:	1d 29       	or	r17, r13
     3f6:	ff 24       	eor	r15, r15
     3f8:	0e 29       	or	r16, r14
     3fa:	1f 29       	or	r17, r15
     3fc:	01 2b       	or	r16, r17
     3fe:	61 f0       	breq	.+24     	; 0x418 <main+0xc8>
        /* failed to issue start condition, possibly no device found */
        
		OrangutanLCD::print("NAK ");
     400:	84 e1       	ldi	r24, 0x14	; 20
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
		i2c_stop();
     408:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8i2c_stopv>
		OrangutanLCD::print("STOP ");
     40c:	89 e1       	ldi	r24, 0x19	; 25
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     414:	0c 94 90 18 	jmp	0x3120	; 0x3120 <main+0x2dd0>
    }
	else {
		OrangutanLCD::print("ACK ");
     418:	8f e1       	ldi	r24, 0x1F	; 31
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
        /* issuing start condition ok, device accessible */
		OrangutanLCD::print("BINIT ");
     420:	84 e2       	ldi	r24, 0x24	; 36
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
		i2c_start(I2C1+I2C_WRITE);
     428:	80 e4       	ldi	r24, 0x40	; 64
     42a:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
		i2c_write(0x6);
     42e:	86 e0       	ldi	r24, 0x06	; 6
     430:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
		i2c_write(0x0);
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
		i2c_write(0x0);
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
		i2c_stop();
     440:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8i2c_stopv>
		
		i2c_start(I2C2+I2C_WRITE);
     444:	82 e4       	ldi	r24, 0x42	; 66
     446:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
		i2c_write(0x6);
     44a:	86 e0       	ldi	r24, 0x06	; 6
     44c:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
		i2c_write(0x0);
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
		i2c_write(0x0);
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
		i2c_stop();
     45c:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8i2c_stopv>
     460:	88 ee       	ldi	r24, 0xE8	; 232
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>


		delay_ms(1000);
		OrangutanLCD::clear();
     468:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
		int counter = 0;									//Counts iteration of the loop for timing purposes
		int counterRef = 0, counterRef14 = 0, counterRef26 = 0, counterRefFive = 0, counterRef30 = 0;
		int pWait = 100, mWait = 100, kWait = 100;
		int print0 = 1, print35 = 1;

		if(OrangutanDigital::isInputHigh(IO_D3))							//Tests if the switch is set to Maintenance Mode
     46c:	83 e0       	ldi	r24, 0x03	; 3
     46e:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     472:	88 23       	and	r24, r24
     474:	09 f4       	brne	.+2      	; 0x478 <main+0x128>
     476:	bf c4       	rjmp	.+2430   	; 0xdf6 <main+0xaa6>
		{
			OrangutanLCD::print("MAINTENANCE");
     478:	8b e2       	ldi	r24, 0x2B	; 43
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     480:	88 ee       	ldi	r24, 0xE8	; 232
     482:	93 e0       	ldi	r25, 0x03	; 3
     484:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>
			//initialize
			int button = 1, counterRefPush = 0, counterRefRel = 0, stateButton = 0;
			int print = 0;
			int mode = 3;

			OrangutanLCD::clear();
     488:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
			OrangutanLCD::print("SELECT MODE");
     48c:	87 e3       	ldi	r24, 0x37	; 55
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     494:	ee 24       	eor	r14, r14
     496:	ff 24       	eor	r15, r15
     498:	01 e0       	ldi	r16, 0x01	; 1
     49a:	10 e0       	ldi	r17, 0x00	; 0
     49c:	1e 86       	std	Y+14, r1	; 0x0e
     49e:	1d 86       	std	Y+13, r1	; 0x0d
     4a0:	1c 86       	std	Y+12, r1	; 0x0c
     4a2:	1b 86       	std	Y+11, r1	; 0x0b
     4a4:	66 24       	eor	r6, r6
     4a6:	77 24       	eor	r7, r7
			
			//Wait for button
			while(button != 0){
				if(stateButton == 0 && OrangutanDigital::isInputHigh(IO_D0)){
     4a8:	61 14       	cp	r6, r1
     4aa:	71 04       	cpc	r7, r1
     4ac:	11 f0       	breq	.+4      	; 0x4b2 <main+0x162>
     4ae:	0c 94 96 18 	jmp	0x312c	; 0x312c <main+0x2ddc>
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     4b8:	88 23       	and	r24, r24
     4ba:	b9 f1       	breq	.+110    	; 0x52a <main+0x1da>
     4bc:	fe 86       	std	Y+14, r15	; 0x0e
     4be:	ed 86       	std	Y+13, r14	; 0x0d
					counterRefPush = counter;
					stateButton = 1;
				}
				if(stateButton == 1){
					if(counter - counterRefPush > 15){
     4c0:	c7 01       	movw	r24, r14
     4c2:	2d 85       	ldd	r18, Y+13	; 0x0d
     4c4:	3e 85       	ldd	r19, Y+14	; 0x0e
     4c6:	82 1b       	sub	r24, r18
     4c8:	93 0b       	sbc	r25, r19
     4ca:	40 97       	sbiw	r24, 0x10	; 16
     4cc:	54 f0       	brlt	.+20     	; 0x4e2 <main+0x192>
						if(!OrangutanDigital::isInputHigh(IO_D0)){
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     4d4:	88 23       	and	r24, r24
     4d6:	11 f0       	breq	.+4      	; 0x4dc <main+0x18c>
     4d8:	0c 94 9e 18 	jmp	0x313c	; 0x313c <main+0x2dec>
     4dc:	fc 86       	std	Y+12, r15	; 0x0c
     4de:	eb 86       	std	Y+11, r14	; 0x0b
     4e0:	0c c0       	rjmp	.+24     	; 0x4fa <main+0x1aa>
							counterRefRel = counter;
							stateButton = 2;
						}
					}
					else if(!OrangutanDigital::isInputHigh(IO_D0)){
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     4e8:	88 23       	and	r24, r24
     4ea:	11 f0       	breq	.+4      	; 0x4f0 <main+0x1a0>
     4ec:	0c 94 9e 18 	jmp	0x313c	; 0x313c <main+0x2dec>
     4f0:	16 c0       	rjmp	.+44     	; 0x51e <main+0x1ce>
						stateButton = 0;
					}
				}
				if(stateButton == 2){
     4f2:	32 e0       	ldi	r19, 0x02	; 2
     4f4:	63 16       	cp	r6, r19
     4f6:	71 04       	cpc	r7, r1
     4f8:	c1 f4       	brne	.+48     	; 0x52a <main+0x1da>
					if(OrangutanDigital::isInputHigh(IO_D0)){
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     500:	88 23       	and	r24, r24
     502:	21 f0       	breq	.+8      	; 0x50c <main+0x1bc>
     504:	fe 86       	std	Y+14, r15	; 0x0e
     506:	ed 86       	std	Y+13, r14	; 0x0d
     508:	0c 94 9e 18 	jmp	0x313c	; 0x313c <main+0x2dec>
						stateButton = 1;
						counterRefPush = counter;
					}
					else if(counter - counterRefRel > 15){
     50c:	c7 01       	movw	r24, r14
     50e:	4b 85       	ldd	r20, Y+11	; 0x0b
     510:	5c 85       	ldd	r21, Y+12	; 0x0c
     512:	84 1b       	sub	r24, r20
     514:	95 0b       	sbc	r25, r21
     516:	40 97       	sbiw	r24, 0x10	; 16
     518:	2c f0       	brlt	.+10     	; 0x524 <main+0x1d4>
     51a:	00 e0       	ldi	r16, 0x00	; 0
     51c:	10 e0       	ldi	r17, 0x00	; 0
     51e:	66 24       	eor	r6, r6
     520:	77 24       	eor	r7, r7
     522:	03 c0       	rjmp	.+6      	; 0x52a <main+0x1da>
     524:	62 e0       	ldi	r22, 0x02	; 2
     526:	66 2e       	mov	r6, r22
     528:	71 2c       	mov	r7, r1
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>

			OrangutanLCD::clear();
			OrangutanLCD::print("SELECT MODE");
			
			//Wait for button
			while(button != 0){
     532:	01 15       	cp	r16, r1
     534:	11 05       	cpc	r17, r1
     536:	21 f0       	breq	.+8      	; 0x540 <main+0x1f0>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}
				counter++;
     538:	08 94       	sec
     53a:	e1 1c       	adc	r14, r1
     53c:	f1 1c       	adc	r15, r1
     53e:	b4 cf       	rjmp	.-152    	; 0x4a8 <main+0x158>
				delay_ms(1);
			}
			button = 1;
			counter = 0;
			OrangutanLCD::clear();
     540:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>

			if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     54a:	88 23       	and	r24, r24
     54c:	79 f0       	breq	.+30     	; 0x56c <main+0x21c>
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     554:	88 23       	and	r24, r24
     556:	51 f0       	breq	.+20     	; 0x56c <main+0x21c>
				state = S0;
				mode = 3;
				OrangutanLCD::clear();
     558:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
				OrangutanLCD::print("INPUTS ");
     55c:	83 e4       	ldi	r24, 0x43	; 67
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
				OrangutanLCD::gotoXY(0,1);
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
     56c:	18 8e       	std	Y+24, r1	; 0x18
     56e:	1f 8a       	std	Y+23, r1	; 0x17
     570:	88 24       	eor	r8, r8
     572:	99 24       	eor	r9, r9
     574:	44 24       	eor	r4, r4
     576:	55 24       	eor	r5, r5
     578:	1e 8a       	std	Y+22, r1	; 0x16
     57a:	1d 8a       	std	Y+21, r1	; 0x15
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	9c 83       	std	Y+4, r25	; 0x04
     582:	8b 83       	std	Y+3, r24	; 0x03
     584:	1a 8e       	std	Y+26, r1	; 0x1a
     586:	19 8e       	std	Y+25, r1	; 0x19
     588:	53 e0       	ldi	r21, 0x03	; 3
     58a:	25 2e       	mov	r2, r21
     58c:	31 2c       	mov	r3, r1
				print = 0;
			}
			
			while(state != -1){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     58e:	84 e4       	ldi	r24, 0x44	; 68
     590:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     59a:	85 e4       	ldi	r24, 0x45	; 69
     59c:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     5a0:	0e 94 9a 19 	call	0x3334	; 0x3334 <_Z11i2c_readAckv>
     5a4:	80 93 50 03 	sts	0x0350, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     5a8:	0e 94 a4 19 	call	0x3348	; 0x3348 <_Z11i2c_readNakv>
     5ac:	80 93 51 03 	sts	0x0351, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     5b0:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8i2c_stopv>
				
				if(stateButton == 0 && OrangutanDigital::isInputHigh(IO_D0)){
     5b4:	61 14       	cp	r6, r1
     5b6:	71 04       	cpc	r7, r1
     5b8:	11 f0       	breq	.+4      	; 0x5be <main+0x26e>
     5ba:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <main+0x2df6>
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     5c4:	88 23       	and	r24, r24
     5c6:	b9 f1       	breq	.+110    	; 0x636 <main+0x2e6>
     5c8:	5e 86       	std	Y+14, r5	; 0x0e
     5ca:	4d 86       	std	Y+13, r4	; 0x0d
					counterRefPush = counter;
					stateButton = 1;
				}
				if(stateButton == 1){
					if(counter - counterRefPush > 15){
     5cc:	c2 01       	movw	r24, r4
     5ce:	ed 85       	ldd	r30, Y+13	; 0x0d
     5d0:	fe 85       	ldd	r31, Y+14	; 0x0e
     5d2:	8e 1b       	sub	r24, r30
     5d4:	9f 0b       	sbc	r25, r31
     5d6:	40 97       	sbiw	r24, 0x10	; 16
     5d8:	54 f0       	brlt	.+20     	; 0x5ee <main+0x29e>
						if(!OrangutanDigital::isInputHigh(IO_D0)){
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     5e0:	88 23       	and	r24, r24
     5e2:	11 f0       	breq	.+4      	; 0x5e8 <main+0x298>
     5e4:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <main+0x2e06>
     5e8:	5c 86       	std	Y+12, r5	; 0x0c
     5ea:	4b 86       	std	Y+11, r4	; 0x0b
     5ec:	0c c0       	rjmp	.+24     	; 0x606 <main+0x2b6>
							counterRefRel = counter;
							stateButton = 2;
						}
					}
					else if(!OrangutanDigital::isInputHigh(IO_D0)){
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     5f4:	88 23       	and	r24, r24
     5f6:	11 f0       	breq	.+4      	; 0x5fc <main+0x2ac>
     5f8:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <main+0x2e06>
     5fc:	16 c0       	rjmp	.+44     	; 0x62a <main+0x2da>
						stateButton = 0;
					}
				}
				if(stateButton == 2){
     5fe:	f2 e0       	ldi	r31, 0x02	; 2
     600:	6f 16       	cp	r6, r31
     602:	71 04       	cpc	r7, r1
     604:	c1 f4       	brne	.+48     	; 0x636 <main+0x2e6>
					if(OrangutanDigital::isInputHigh(IO_D0)){
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     60c:	88 23       	and	r24, r24
     60e:	21 f0       	breq	.+8      	; 0x618 <main+0x2c8>
     610:	5e 86       	std	Y+14, r5	; 0x0e
     612:	4d 86       	std	Y+13, r4	; 0x0d
     614:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <main+0x2e06>
						stateButton = 1;
						counterRefPush = counter;
					}
					else if(counter - counterRefRel > 15){
     618:	c2 01       	movw	r24, r4
     61a:	2b 85       	ldd	r18, Y+11	; 0x0b
     61c:	3c 85       	ldd	r19, Y+12	; 0x0c
     61e:	82 1b       	sub	r24, r18
     620:	93 0b       	sbc	r25, r19
     622:	40 97       	sbiw	r24, 0x10	; 16
     624:	2c f0       	brlt	.+10     	; 0x630 <main+0x2e0>
     626:	1c 82       	std	Y+4, r1	; 0x04
     628:	1b 82       	std	Y+3, r1	; 0x03
     62a:	66 24       	eor	r6, r6
     62c:	77 24       	eor	r7, r7
     62e:	03 c0       	rjmp	.+6      	; 0x636 <main+0x2e6>
     630:	42 e0       	ldi	r20, 0x02	; 2
     632:	64 2e       	mov	r6, r20
     634:	71 2c       	mov	r7, r1
						stateButton = 0;
					}
				}

				
				if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && mode != 0){
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     63c:	88 23       	and	r24, r24
     63e:	c1 f4       	brne	.+48     	; 0x670 <main+0x320>
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     646:	88 23       	and	r24, r24
     648:	99 f4       	brne	.+38     	; 0x670 <main+0x320>
     64a:	21 14       	cp	r2, r1
     64c:	31 04       	cpc	r3, r1
     64e:	81 f0       	breq	.+32     	; 0x670 <main+0x320>
					state = S0;
					mode = 0;
					OrangutanLCD::clear();
     650:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     654:	83 e4       	ldi	r24, 0x43	; 67
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
     664:	88 24       	eor	r8, r8
     666:	99 24       	eor	r9, r9
     668:	1a 8e       	std	Y+26, r1	; 0x1a
     66a:	19 8e       	std	Y+25, r1	; 0x19
     66c:	22 24       	eor	r2, r2
     66e:	33 24       	eor	r3, r3
					print = 0;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && mode != 1){
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     676:	88 23       	and	r24, r24
     678:	d9 f0       	breq	.+54     	; 0x6b0 <main+0x360>
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     680:	88 23       	and	r24, r24
     682:	b1 f4       	brne	.+44     	; 0x6b0 <main+0x360>
     684:	31 e0       	ldi	r19, 0x01	; 1
     686:	23 16       	cp	r2, r19
     688:	31 04       	cpc	r3, r1
     68a:	91 f0       	breq	.+36     	; 0x6b0 <main+0x360>
					state = O0_ON;
					mode = 1;
					OrangutanLCD::clear();
     68c:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("OUTPUTS");
     690:	8b e4       	ldi	r24, 0x4B	; 75
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	61 e0       	ldi	r22, 0x01	; 1
     69c:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
     6a0:	38 e0       	ldi	r19, 0x08	; 8
     6a2:	83 2e       	mov	r8, r19
     6a4:	91 2c       	mov	r9, r1
     6a6:	1a 8e       	std	Y+26, r1	; 0x1a
     6a8:	19 8e       	std	Y+25, r1	; 0x19
     6aa:	21 e0       	ldi	r18, 0x01	; 1
     6ac:	22 2e       	mov	r2, r18
     6ae:	31 2c       	mov	r3, r1
					print = 0;
				}
				if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && mode != 2){
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     6b6:	88 23       	and	r24, r24
     6b8:	d9 f4       	brne	.+54     	; 0x6f0 <main+0x3a0>
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     6c0:	88 23       	and	r24, r24
     6c2:	b1 f0       	breq	.+44     	; 0x6f0 <main+0x3a0>
     6c4:	42 e0       	ldi	r20, 0x02	; 2
     6c6:	24 16       	cp	r2, r20
     6c8:	31 04       	cpc	r3, r1
     6ca:	91 f0       	breq	.+36     	; 0x6f0 <main+0x3a0>
					state = M1_F;
					mode = 2;
					OrangutanLCD::clear();
     6cc:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MOTORS ");
     6d0:	83 e5       	ldi	r24, 0x53	; 83
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
     6e0:	90 e2       	ldi	r25, 0x20	; 32
     6e2:	89 2e       	mov	r8, r25
     6e4:	91 2c       	mov	r9, r1
     6e6:	1a 8e       	std	Y+26, r1	; 0x1a
     6e8:	19 8e       	std	Y+25, r1	; 0x19
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	28 2e       	mov	r2, r24
     6ee:	31 2c       	mov	r3, r1
					print = 0;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && mode != 3){
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     6f6:	88 23       	and	r24, r24
     6f8:	d1 f0       	breq	.+52     	; 0x72e <main+0x3de>
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     700:	88 23       	and	r24, r24
     702:	a9 f0       	breq	.+42     	; 0x72e <main+0x3de>
     704:	53 e0       	ldi	r21, 0x03	; 3
     706:	25 16       	cp	r2, r21
     708:	31 04       	cpc	r3, r1
     70a:	89 f0       	breq	.+34     	; 0x72e <main+0x3de>
					state = S0;
					mode = 3;
					OrangutanLCD::clear();
     70c:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     710:	83 e4       	ldi	r24, 0x43	; 67
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	61 e0       	ldi	r22, 0x01	; 1
     71c:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
     720:	88 24       	eor	r8, r8
     722:	99 24       	eor	r9, r9
     724:	1a 8e       	std	Y+26, r1	; 0x1a
     726:	19 8e       	std	Y+25, r1	; 0x19
     728:	03 e0       	ldi	r16, 0x03	; 3
     72a:	20 2e       	mov	r2, r16
     72c:	31 2c       	mov	r3, r1
					print = 0;
				}

				//state conversions

				if(button == 0) {
     72e:	8b 81       	ldd	r24, Y+3	; 0x03
     730:	9c 81       	ldd	r25, Y+4	; 0x04
     732:	89 2b       	or	r24, r25
     734:	09 f0       	breq	.+2      	; 0x738 <main+0x3e8>
     736:	cf c0       	rjmp	.+414    	; 0x8d6 <main+0x586>
					if(state <= S7){
     738:	98 e0       	ldi	r25, 0x08	; 8
     73a:	89 16       	cp	r8, r25
     73c:	91 04       	cpc	r9, r1
     73e:	14 f5       	brge	.+68     	; 0x784 <main+0x434>
						OrangutanLCD::gotoXY(0,1);
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	61 e0       	ldi	r22, 0x01	; 1
     744:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
						button = 1;
						state ++;
     748:	08 94       	sec
     74a:	81 1c       	adc	r8, r1
     74c:	91 1c       	adc	r9, r1
						counterRef = counter;
						print = 0;
						if(state == S7 + 1){
     74e:	e8 e0       	ldi	r30, 0x08	; 8
     750:	8e 16       	cp	r8, r30
     752:	91 04       	cpc	r9, r1
     754:	09 f0       	breq	.+2      	; 0x758 <main+0x408>
     756:	b7 c0       	rjmp	.+366    	; 0x8c6 <main+0x576>
							OrangutanLCD::clear();
     758:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
							if(mode == 0){
     75c:	21 14       	cp	r2, r1
     75e:	31 04       	cpc	r3, r1
     760:	11 f4       	brne	.+4      	; 0x766 <main+0x416>
     762:	0c 94 16 19 	jmp	0x322c	; 0x322c <main+0x2edc>
								state = -1;
							}
							else{
								OrangutanLCD::print("OUTPUTS");
     766:	8b e4       	ldi	r24, 0x4B	; 75
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
								OrangutanLCD::gotoXY(0,1);
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
     776:	5e 8a       	std	Y+22, r5	; 0x16
     778:	4d 8a       	std	Y+21, r4	; 0x15
     77a:	21 e0       	ldi	r18, 0x01	; 1
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	3c 83       	std	Y+4, r19	; 0x04
     780:	2b 83       	std	Y+3, r18	; 0x03
     782:	90 c1       	rjmp	.+800    	; 0xaa4 <main+0x754>
     784:	c4 01       	movw	r24, r8
     786:	81 70       	andi	r24, 0x01	; 1
     788:	90 70       	andi	r25, 0x00	; 0
							}
						}
					}
					else if(state <= O11_OFF){
     78a:	30 e2       	ldi	r19, 0x20	; 32
     78c:	83 16       	cp	r8, r19
     78e:	91 04       	cpc	r9, r1
     790:	9c f5       	brge	.+102    	; 0x7f8 <main+0x4a8>
						if(state % 2 == 0){
     792:	89 2b       	or	r24, r25
     794:	49 f4       	brne	.+18     	; 0x7a8 <main+0x458>
							OrangutanLCD::gotoXY(13,1);
     796:	8d e0       	ldi	r24, 0x0D	; 13
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("OFF");
     79e:	8b e5       	ldi	r24, 0x5B	; 91
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <main+0x460>
						}
						else{
							OrangutanLCD::gotoXY(0,1);
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
						}
						button = 1;
						state ++;
     7b0:	08 94       	sec
     7b2:	81 1c       	adc	r8, r1
     7b4:	91 1c       	adc	r9, r1
						counterRef = counter;
						print = 0;
						if(state == O11_OFF + 1){
     7b6:	40 e2       	ldi	r20, 0x20	; 32
     7b8:	84 16       	cp	r8, r20
     7ba:	91 04       	cpc	r9, r1
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <main+0x470>
     7be:	83 c0       	rjmp	.+262    	; 0x8c6 <main+0x576>
							OrangutanLCD::clear();
     7c0:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
							if(mode == 1){
     7c4:	51 e0       	ldi	r21, 0x01	; 1
     7c6:	25 16       	cp	r2, r21
     7c8:	31 04       	cpc	r3, r1
     7ca:	11 f4       	brne	.+4      	; 0x7d0 <main+0x480>
     7cc:	0c 94 16 19 	jmp	0x322c	; 0x322c <main+0x2edc>
								state = -1;
							}
							else{
								u_motorByte0.bits_in_motorByte0.m1Drop = 1;
     7d0:	80 91 4c 03 	lds	r24, 0x034C
     7d4:	84 60       	ori	r24, 0x04	; 4
     7d6:	80 93 4c 03 	sts	0x034C, r24
								OrangutanLCD::print("MOTORS");
     7da:	8f e5       	ldi	r24, 0x5F	; 95
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
								OrangutanLCD::gotoXY(0,1);
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	61 e0       	ldi	r22, 0x01	; 1
     7e6:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
     7ea:	5e 8a       	std	Y+22, r5	; 0x16
     7ec:	4d 8a       	std	Y+21, r4	; 0x15
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	9c 83       	std	Y+4, r25	; 0x04
     7f4:	8b 83       	std	Y+3, r24	; 0x03
     7f6:	71 c2       	rjmp	.+1250   	; 0xcda <main+0x98a>
							}
						}
					}
					else{
						button = 1;
						state ++;
     7f8:	84 01       	movw	r16, r8
     7fa:	0f 5f       	subi	r16, 0xFF	; 255
     7fc:	1f 4f       	sbci	r17, 0xFF	; 255
						counterRef = counter;
						print = 0;
						if((state - 1) % 2 == 0){
     7fe:	89 2b       	or	r24, r25
     800:	81 f4       	brne	.+32     	; 0x822 <main+0x4d2>
							OrangutanLCD::gotoXY(11,1);
     802:	8b e0       	ldi	r24, 0x0B	; 11
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("BACK ");
     80a:	86 e6       	ldi	r24, 0x66	; 102
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     812:	48 01       	movw	r8, r16
     814:	5e 8a       	std	Y+22, r5	; 0x16
     816:	4d 8a       	std	Y+21, r4	; 0x15
     818:	e1 e0       	ldi	r30, 0x01	; 1
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	fc 83       	std	Y+4, r31	; 0x04
     81e:	eb 83       	std	Y+3, r30	; 0x03
     820:	58 c0       	rjmp	.+176    	; 0x8d2 <main+0x582>
						}
						else{
							switch (state) {
     822:	06 32       	cpi	r16, 0x26	; 38
     824:	11 05       	cpc	r17, r1
     826:	81 f1       	breq	.+96     	; 0x888 <main+0x538>
     828:	07 32       	cpi	r16, 0x27	; 39
     82a:	11 05       	cpc	r17, r1
     82c:	3c f4       	brge	.+14     	; 0x83c <main+0x4ec>
     82e:	02 32       	cpi	r16, 0x22	; 34
     830:	11 05       	cpc	r17, r1
     832:	91 f0       	breq	.+36     	; 0x858 <main+0x508>
     834:	04 32       	cpi	r16, 0x24	; 36
     836:	11 05       	cpc	r17, r1
     838:	39 f4       	brne	.+14     	; 0x848 <main+0x4f8>
     83a:	18 c0       	rjmp	.+48     	; 0x86c <main+0x51c>
     83c:	08 32       	cpi	r16, 0x28	; 40
     83e:	11 05       	cpc	r17, r1
     840:	69 f1       	breq	.+90     	; 0x89c <main+0x54c>
     842:	0a 32       	cpi	r16, 0x2A	; 42
     844:	11 05       	cpc	r17, r1
     846:	a1 f1       	breq	.+104    	; 0x8b0 <main+0x560>
     848:	48 01       	movw	r8, r16
     84a:	5e 8a       	std	Y+22, r5	; 0x16
     84c:	4d 8a       	std	Y+21, r4	; 0x15
     84e:	21 e0       	ldi	r18, 0x01	; 1
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	3c 83       	std	Y+4, r19	; 0x04
     854:	2b 83       	std	Y+3, r18	; 0x03
     856:	3d c0       	rjmp	.+122    	; 0x8d2 <main+0x582>
								case M1_B + 1:
									OrangutanLCD::gotoXY(0,1);
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.m1Drop = 0;
     860:	80 91 4c 03 	lds	r24, 0x034C
     864:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.m2Drop = 1;
     866:	80 62       	ori	r24, 0x20	; 32
     868:	80 93 4c 03 	sts	0x034C, r24
								case M2_B + 1:
									OrangutanLCD::gotoXY(0,1);
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.m2Drop = 0;
     874:	80 91 4c 03 	lds	r24, 0x034C
     878:	8f 7d       	andi	r24, 0xDF	; 223
     87a:	80 93 4c 03 	sts	0x034C, r24
									u_motorByte1.bits_in_motorByte1.m3Drop = 1;
     87e:	80 91 4d 03 	lds	r24, 0x034D
     882:	81 60       	ori	r24, 0x01	; 1
     884:	80 93 4d 03 	sts	0x034D, r24
								case M3_B + 1:
									OrangutanLCD::gotoXY(0,1);
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.m3Drop = 0;
     890:	80 91 4d 03 	lds	r24, 0x034D
     894:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.m4Drop = 1;
     896:	88 60       	ori	r24, 0x08	; 8
     898:	80 93 4d 03 	sts	0x034D, r24
								case M4_B + 1:
									OrangutanLCD::gotoXY(0,1);
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.m4Drop = 0;
     8a4:	80 91 4d 03 	lds	r24, 0x034D
     8a8:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.m5Drop = 1;
     8aa:	80 64       	ori	r24, 0x40	; 64
     8ac:	80 93 4d 03 	sts	0x034D, r24
								case M5_B + 1:
									OrangutanLCD::clear();
     8b0:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
									u_motorByte1.bits_in_motorByte1.m5Drop = 0;
     8b4:	80 91 4d 03 	lds	r24, 0x034D
     8b8:	8f 7b       	andi	r24, 0xBF	; 191
     8ba:	80 93 4d 03 	sts	0x034D, r24
     8be:	18 8e       	std	Y+24, r1	; 0x18
     8c0:	1f 8a       	std	Y+23, r1	; 0x17
     8c2:	0c 94 16 19 	jmp	0x322c	; 0x322c <main+0x2edc>
     8c6:	5e 8a       	std	Y+22, r5	; 0x16
     8c8:	4d 8a       	std	Y+21, r4	; 0x15
     8ca:	41 e0       	ldi	r20, 0x01	; 1
     8cc:	50 e0       	ldi	r21, 0x00	; 0
     8ce:	5c 83       	std	Y+4, r21	; 0x04
     8d0:	4b 83       	std	Y+3, r20	; 0x03
     8d2:	1a 8e       	std	Y+26, r1	; 0x1a
     8d4:	19 8e       	std	Y+25, r1	; 0x19
					print = 0;
					m5 = 0;
				}*/

				//state actions
				switch (state) {
     8d6:	f4 01       	movw	r30, r8
     8d8:	ea 32       	cpi	r30, 0x2A	; 42
     8da:	f1 05       	cpc	r31, r1
     8dc:	08 f0       	brcs	.+2      	; 0x8e0 <main+0x590>
     8de:	6b c2       	rjmp	.+1238   	; 0xdb6 <main+0xa66>
     8e0:	ea 5b       	subi	r30, 0xBA	; 186
     8e2:	ff 4f       	sbci	r31, 0xFF	; 255
     8e4:	ee 0f       	add	r30, r30
     8e6:	ff 1f       	adc	r31, r31
     8e8:	05 90       	lpm	r0, Z+
     8ea:	f4 91       	lpm	r31, Z+
     8ec:	e0 2d       	mov	r30, r0
     8ee:	09 94       	ijmp
					case S0:
						if(print == 0){
     8f0:	89 8d       	ldd	r24, Y+25	; 0x19
     8f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8f4:	89 2b       	or	r24, r25
     8f6:	41 f4       	brne	.+16     	; 0x908 <main+0x5b8>
							OrangutanLCD::print("SENSOR 0");
     8f8:	8c e6       	ldi	r24, 0x6C	; 108
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     900:	e1 e0       	ldi	r30, 0x01	; 1
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	fa 8f       	std	Y+26, r31	; 0x1a
     906:	e9 8f       	std	Y+25, r30	; 0x19
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     908:	8f e0       	ldi	r24, 0x0F	; 15
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
	// position and will not span lines.
	static void print(unsigned long value);
	static void print(long value);
	static inline void print(unsigned int value)
	{
		print((unsigned long)value);
     910:	60 91 50 03 	lds	r22, 0x0350
     914:	61 70       	andi	r22, 0x01	; 1
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN12OrangutanLCD5printEm>
     920:	0c c0       	rjmp	.+24     	; 0x93a <main+0x5ea>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.plate);
					case S1:
						if(print == 0){
     922:	29 8d       	ldd	r18, Y+25	; 0x19
     924:	3a 8d       	ldd	r19, Y+26	; 0x1a
     926:	23 2b       	or	r18, r19
     928:	41 f4       	brne	.+16     	; 0x93a <main+0x5ea>
							OrangutanLCD::print("SENSOR 1");
     92a:	85 e7       	ldi	r24, 0x75	; 117
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     932:	41 e0       	ldi	r20, 0x01	; 1
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	5a 8f       	std	Y+26, r21	; 0x1a
     938:	49 8f       	std	Y+25, r20	; 0x19
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     93a:	8f e0       	ldi	r24, 0x0F	; 15
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
     942:	60 91 50 03 	lds	r22, 0x0350
     946:	66 95       	lsr	r22
     948:	61 70       	andi	r22, 0x01	; 1
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN12OrangutanLCD5printEm>
     954:	0c c0       	rjmp	.+24     	; 0x96e <main+0x61e>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureLift);
					case S2:
						if(print == 0){
     956:	89 8d       	ldd	r24, Y+25	; 0x19
     958:	9a 8d       	ldd	r25, Y+26	; 0x1a
     95a:	89 2b       	or	r24, r25
     95c:	41 f4       	brne	.+16     	; 0x96e <main+0x61e>
							OrangutanLCD::print("SENSOR 2");
     95e:	8e e7       	ldi	r24, 0x7E	; 126
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     966:	e1 e0       	ldi	r30, 0x01	; 1
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	fa 8f       	std	Y+26, r31	; 0x1a
     96c:	e9 8f       	std	Y+25, r30	; 0x19
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     96e:	8f e0       	ldi	r24, 0x0F	; 15
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
     976:	60 91 50 03 	lds	r22, 0x0350
     97a:	66 95       	lsr	r22
     97c:	66 95       	lsr	r22
     97e:	61 70       	andi	r22, 0x01	; 1
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN12OrangutanLCD5printEm>
     98a:	0c c0       	rjmp	.+24     	; 0x9a4 <main+0x654>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureHome);
					case S3:
						if(print == 0){
     98c:	29 8d       	ldd	r18, Y+25	; 0x19
     98e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     990:	23 2b       	or	r18, r19
     992:	41 f4       	brne	.+16     	; 0x9a4 <main+0x654>
							OrangutanLCD::print("SENSOR 3");
     994:	87 e8       	ldi	r24, 0x87	; 135
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     99c:	41 e0       	ldi	r20, 0x01	; 1
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	5a 8f       	std	Y+26, r21	; 0x1a
     9a2:	49 8f       	std	Y+25, r20	; 0x19
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     9a4:	8f e0       	ldi	r24, 0x0F	; 15
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
     9ac:	60 91 50 03 	lds	r22, 0x0350
     9b0:	66 95       	lsr	r22
     9b2:	66 95       	lsr	r22
     9b4:	66 95       	lsr	r22
     9b6:	61 70       	andi	r22, 0x01	; 1
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN12OrangutanLCD5printEm>
     9c2:	0c c0       	rjmp	.+24     	; 0x9dc <main+0x68c>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixturePlate);
					case S4:
						if(print == 0){
     9c4:	89 8d       	ldd	r24, Y+25	; 0x19
     9c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9c8:	89 2b       	or	r24, r25
     9ca:	41 f4       	brne	.+16     	; 0x9dc <main+0x68c>
							OrangutanLCD::print("SENSOR 4");
     9cc:	80 e9       	ldi	r24, 0x90	; 144
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     9d4:	e1 e0       	ldi	r30, 0x01	; 1
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	fa 8f       	std	Y+26, r31	; 0x1a
     9da:	e9 8f       	std	Y+25, r30	; 0x19
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     9dc:	8f e0       	ldi	r24, 0x0F	; 15
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
     9e4:	60 91 50 03 	lds	r22, 0x0350
     9e8:	62 95       	swap	r22
     9ea:	61 70       	andi	r22, 0x01	; 1
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN12OrangutanLCD5printEm>
     9f6:	0c c0       	rjmp	.+24     	; 0xa10 <main+0x6c0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
					case S5:
						if(print == 0){
     9f8:	29 8d       	ldd	r18, Y+25	; 0x19
     9fa:	3a 8d       	ldd	r19, Y+26	; 0x1a
     9fc:	23 2b       	or	r18, r19
     9fe:	41 f4       	brne	.+16     	; 0xa10 <main+0x6c0>
							OrangutanLCD::print("SENSOR 5");
     a00:	89 e9       	ldi	r24, 0x99	; 153
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     a08:	41 e0       	ldi	r20, 0x01	; 1
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	5a 8f       	std	Y+26, r21	; 0x1a
     a0e:	49 8f       	std	Y+25, r20	; 0x19
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a10:	8f e0       	ldi	r24, 0x0F	; 15
     a12:	61 e0       	ldi	r22, 0x01	; 1
     a14:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
     a18:	60 91 50 03 	lds	r22, 0x0350
     a1c:	62 95       	swap	r22
     a1e:	66 95       	lsr	r22
     a20:	61 70       	andi	r22, 0x01	; 1
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN12OrangutanLCD5printEm>
     a2c:	0c c0       	rjmp	.+24     	; 0xa46 <main+0x6f6>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
					case S6:
						if(print == 0){
     a2e:	89 8d       	ldd	r24, Y+25	; 0x19
     a30:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a32:	89 2b       	or	r24, r25
     a34:	41 f4       	brne	.+16     	; 0xa46 <main+0x6f6>
							OrangutanLCD::print("SENSOR 6");
     a36:	82 ea       	ldi	r24, 0xA2	; 162
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     a3e:	e1 e0       	ldi	r30, 0x01	; 1
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	fa 8f       	std	Y+26, r31	; 0x1a
     a44:	e9 8f       	std	Y+25, r30	; 0x19
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a46:	8f e0       	ldi	r24, 0x0F	; 15
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
     a4e:	60 91 50 03 	lds	r22, 0x0350
     a52:	62 95       	swap	r22
     a54:	66 95       	lsr	r22
     a56:	66 95       	lsr	r22
     a58:	61 70       	andi	r22, 0x01	; 1
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN12OrangutanLCD5printEm>
     a64:	0c c0       	rjmp	.+24     	; 0xa7e <main+0x72e>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry1);
					case S7:
						if(print == 0){
     a66:	29 8d       	ldd	r18, Y+25	; 0x19
     a68:	3a 8d       	ldd	r19, Y+26	; 0x1a
     a6a:	23 2b       	or	r18, r19
     a6c:	41 f4       	brne	.+16     	; 0xa7e <main+0x72e>
							OrangutanLCD::print("SENSOR 7");
     a6e:	8b ea       	ldi	r24, 0xAB	; 171
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     a76:	41 e0       	ldi	r20, 0x01	; 1
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	5a 8f       	std	Y+26, r21	; 0x1a
     a7c:	49 8f       	std	Y+25, r20	; 0x19
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a7e:	8f e0       	ldi	r24, 0x0F	; 15
     a80:	61 e0       	ldi	r22, 0x01	; 1
     a82:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
     a86:	60 91 50 03 	lds	r22, 0x0350
     a8a:	66 1f       	adc	r22, r22
     a8c:	66 27       	eor	r22, r22
     a8e:	66 1f       	adc	r22, r22
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN12OrangutanLCD5printEm>
     a9a:	0f c0       	rjmp	.+30     	; 0xaba <main+0x76a>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry2);
					case O0_ON:
						if(print == 0){
     a9c:	89 8d       	ldd	r24, Y+25	; 0x19
     a9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     aa0:	89 2b       	or	r24, r25
     aa2:	59 f4       	brne	.+22     	; 0xaba <main+0x76a>
							OrangutanLCD::print("AC POWER     ON ");
     aa4:	84 eb       	ldi	r24, 0xB4	; 180
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     aac:	e1 e0       	ldi	r30, 0x01	; 1
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	fa 8f       	std	Y+26, r31	; 0x1a
     ab2:	e9 8f       	std	Y+25, r30	; 0x19
     ab4:	18 e0       	ldi	r17, 0x08	; 8
     ab6:	81 2e       	mov	r8, r17
     ab8:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
     aba:	80 91 4e 03 	lds	r24, 0x034E
     abe:	8e 7f       	andi	r24, 0xFE	; 254
     ac0:	80 93 4e 03 	sts	0x034E, r24
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
     ac4:	80 91 4e 03 	lds	r24, 0x034E
     ac8:	81 60       	ori	r24, 0x01	; 1
     aca:	80 93 4e 03 	sts	0x034E, r24
					case O1_ON:
						if(print == 0){
     ace:	29 8d       	ldd	r18, Y+25	; 0x19
     ad0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     ad2:	23 2b       	or	r18, r19
     ad4:	41 f4       	brne	.+16     	; 0xae6 <main+0x796>
							OrangutanLCD::print("BLOWER       ON  ");
     ad6:	85 ec       	ldi	r24, 0xC5	; 197
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     ade:	41 e0       	ldi	r20, 0x01	; 1
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	5a 8f       	std	Y+26, r21	; 0x1a
     ae4:	49 8f       	std	Y+25, r20	; 0x19
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     ae6:	80 91 4e 03 	lds	r24, 0x034E
     aea:	8d 7f       	andi	r24, 0xFD	; 253
     aec:	80 93 4e 03 	sts	0x034E, r24
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     af0:	80 91 4e 03 	lds	r24, 0x034E
     af4:	82 60       	ori	r24, 0x02	; 2
     af6:	80 93 4e 03 	sts	0x034E, r24
					case O2_ON:
						if(print == 0){
     afa:	89 8d       	ldd	r24, Y+25	; 0x19
     afc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     afe:	89 2b       	or	r24, r25
     b00:	41 f4       	brne	.+16     	; 0xb12 <main+0x7c2>
							OrangutanLCD::print("PLATE STOP   ON ");
     b02:	87 ed       	ldi	r24, 0xD7	; 215
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     b0a:	e1 e0       	ldi	r30, 0x01	; 1
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	fa 8f       	std	Y+26, r31	; 0x1a
     b10:	e9 8f       	std	Y+25, r30	; 0x19
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
     b12:	80 91 4e 03 	lds	r24, 0x034E
     b16:	8b 7f       	andi	r24, 0xFB	; 251
     b18:	80 93 4e 03 	sts	0x034E, r24
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
     b1c:	80 91 4e 03 	lds	r24, 0x034E
     b20:	84 60       	ori	r24, 0x04	; 4
     b22:	80 93 4e 03 	sts	0x034E, r24
					case O3_ON:
						if(print == 0){
     b26:	29 8d       	ldd	r18, Y+25	; 0x19
     b28:	3a 8d       	ldd	r19, Y+26	; 0x1a
     b2a:	23 2b       	or	r18, r19
     b2c:	41 f4       	brne	.+16     	; 0xb3e <main+0x7ee>
							OrangutanLCD::print("PLATE RAISE  ON ");
     b2e:	88 ee       	ldi	r24, 0xE8	; 232
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     b36:	41 e0       	ldi	r20, 0x01	; 1
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	5a 8f       	std	Y+26, r21	; 0x1a
     b3c:	49 8f       	std	Y+25, r20	; 0x19
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     b3e:	80 91 4e 03 	lds	r24, 0x034E
     b42:	87 7f       	andi	r24, 0xF7	; 247
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     b44:	80 61       	ori	r24, 0x10	; 16
     b46:	80 93 4e 03 	sts	0x034E, r24
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     b4a:	80 91 4e 03 	lds	r24, 0x034E
     b4e:	88 60       	ori	r24, 0x08	; 8
     b50:	80 93 4e 03 	sts	0x034E, r24
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
					case O4_ON:
						if(print == 0){
     b54:	89 8d       	ldd	r24, Y+25	; 0x19
     b56:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b58:	89 2b       	or	r24, r25
     b5a:	41 f4       	brne	.+16     	; 0xb6c <main+0x81c>
							OrangutanLCD::print("PLATE LOWER  ON ");
     b5c:	89 ef       	ldi	r24, 0xF9	; 249
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     b64:	e1 e0       	ldi	r30, 0x01	; 1
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	fa 8f       	std	Y+26, r31	; 0x1a
     b6a:	e9 8f       	std	Y+25, r30	; 0x19
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     b6c:	80 91 4e 03 	lds	r24, 0x034E
     b70:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     b72:	8f 7e       	andi	r24, 0xEF	; 239
     b74:	80 93 4e 03 	sts	0x034E, r24
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     b78:	80 91 4e 03 	lds	r24, 0x034E
     b7c:	80 61       	ori	r24, 0x10	; 16
     b7e:	80 93 4e 03 	sts	0x034E, r24
					case O5_ON:
						if(print == 0){
     b82:	29 8d       	ldd	r18, Y+25	; 0x19
     b84:	3a 8d       	ldd	r19, Y+26	; 0x1a
     b86:	23 2b       	or	r18, r19
     b88:	41 f4       	brne	.+16     	; 0xb9a <main+0x84a>
							OrangutanLCD::print("BRUSH1 RAISE ON ");
     b8a:	8a e0       	ldi	r24, 0x0A	; 10
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	5a 8f       	std	Y+26, r21	; 0x1a
     b98:	49 8f       	std	Y+25, r20	; 0x19
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     b9a:	80 91 4e 03 	lds	r24, 0x034E
     b9e:	8f 7d       	andi	r24, 0xDF	; 223
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     ba0:	80 64       	ori	r24, 0x40	; 64
     ba2:	80 93 4e 03 	sts	0x034E, r24
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     ba6:	80 91 4e 03 	lds	r24, 0x034E
     baa:	80 62       	ori	r24, 0x20	; 32
     bac:	80 93 4e 03 	sts	0x034E, r24
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					case O6_ON:
						if(print == 0){
     bb0:	89 8d       	ldd	r24, Y+25	; 0x19
     bb2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bb4:	89 2b       	or	r24, r25
     bb6:	41 f4       	brne	.+16     	; 0xbc8 <main+0x878>
							OrangutanLCD::print("BRUSH1 LOWER ON ");
     bb8:	8b e1       	ldi	r24, 0x1B	; 27
     bba:	92 e0       	ldi	r25, 0x02	; 2
     bbc:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     bc0:	e1 e0       	ldi	r30, 0x01	; 1
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	fa 8f       	std	Y+26, r31	; 0x1a
     bc6:	e9 8f       	std	Y+25, r30	; 0x19
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     bc8:	80 91 4e 03 	lds	r24, 0x034E
     bcc:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     bce:	80 62       	ori	r24, 0x20	; 32
     bd0:	80 93 4e 03 	sts	0x034E, r24
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     bd4:	80 91 4e 03 	lds	r24, 0x034E
     bd8:	80 64       	ori	r24, 0x40	; 64
     bda:	80 93 4e 03 	sts	0x034E, r24
					case O7_ON:
						if(print == 0){
     bde:	29 8d       	ldd	r18, Y+25	; 0x19
     be0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     be2:	23 2b       	or	r18, r19
     be4:	41 f4       	brne	.+16     	; 0xbf6 <main+0x8a6>
							OrangutanLCD::print("BRUSH2 RAISE ON ");
     be6:	8c e2       	ldi	r24, 0x2C	; 44
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     bee:	41 e0       	ldi	r20, 0x01	; 1
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	5a 8f       	std	Y+26, r21	; 0x1a
     bf4:	49 8f       	std	Y+25, r20	; 0x19
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     bf6:	80 91 4e 03 	lds	r24, 0x034E
     bfa:	8f 77       	andi	r24, 0x7F	; 127
     bfc:	80 93 4e 03 	sts	0x034E, r24
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     c00:	80 91 4f 03 	lds	r24, 0x034F
     c04:	81 60       	ori	r24, 0x01	; 1
     c06:	80 93 4f 03 	sts	0x034F, r24
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     c0a:	80 91 4e 03 	lds	r24, 0x034E
     c0e:	80 68       	ori	r24, 0x80	; 128
     c10:	80 93 4e 03 	sts	0x034E, r24
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
					case O8_ON:
						if(print == 0){
     c14:	89 8d       	ldd	r24, Y+25	; 0x19
     c16:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c18:	89 2b       	or	r24, r25
     c1a:	41 f4       	brne	.+16     	; 0xc2c <main+0x8dc>
							OrangutanLCD::print("BRUSH2 LOWER ON ");
     c1c:	8d e3       	ldi	r24, 0x3D	; 61
     c1e:	92 e0       	ldi	r25, 0x02	; 2
     c20:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     c24:	e1 e0       	ldi	r30, 0x01	; 1
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	fa 8f       	std	Y+26, r31	; 0x1a
     c2a:	e9 8f       	std	Y+25, r30	; 0x19
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     c2c:	80 91 4f 03 	lds	r24, 0x034F
     c30:	8e 7f       	andi	r24, 0xFE	; 254
     c32:	80 93 4f 03 	sts	0x034F, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     c36:	80 91 4e 03 	lds	r24, 0x034E
     c3a:	80 68       	ori	r24, 0x80	; 128
     c3c:	80 93 4e 03 	sts	0x034E, r24
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     c40:	80 91 4f 03 	lds	r24, 0x034F
     c44:	81 60       	ori	r24, 0x01	; 1
     c46:	80 93 4f 03 	sts	0x034F, r24
					case O9_ON:
						if(print == 0){
     c4a:	29 8d       	ldd	r18, Y+25	; 0x19
     c4c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     c4e:	23 2b       	or	r18, r19
     c50:	41 f4       	brne	.+16     	; 0xc62 <main+0x912>
							OrangutanLCD::print("PAPER RAISE  ON ");
     c52:	8e e4       	ldi	r24, 0x4E	; 78
     c54:	92 e0       	ldi	r25, 0x02	; 2
     c56:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     c5a:	41 e0       	ldi	r20, 0x01	; 1
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	5a 8f       	std	Y+26, r21	; 0x1a
     c60:	49 8f       	std	Y+25, r20	; 0x19
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     c62:	80 91 4f 03 	lds	r24, 0x034F
     c66:	8d 7f       	andi	r24, 0xFD	; 253
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
     c68:	84 60       	ori	r24, 0x04	; 4
     c6a:	80 93 4f 03 	sts	0x034F, r24
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     c6e:	80 91 4f 03 	lds	r24, 0x034F
     c72:	82 60       	ori	r24, 0x02	; 2
     c74:	80 93 4f 03 	sts	0x034F, r24
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
					case O10_ON:
						if(print == 0){
     c78:	89 8d       	ldd	r24, Y+25	; 0x19
     c7a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c7c:	89 2b       	or	r24, r25
     c7e:	41 f4       	brne	.+16     	; 0xc90 <main+0x940>
							OrangutanLCD::print("PAPER LOWER  ON ");
     c80:	8f e5       	ldi	r24, 0x5F	; 95
     c82:	92 e0       	ldi	r25, 0x02	; 2
     c84:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     c88:	e1 e0       	ldi	r30, 0x01	; 1
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	fa 8f       	std	Y+26, r31	; 0x1a
     c8e:	e9 8f       	std	Y+25, r30	; 0x19
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
     c90:	80 91 4f 03 	lds	r24, 0x034F
     c94:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     c96:	82 60       	ori	r24, 0x02	; 2
     c98:	80 93 4f 03 	sts	0x034F, r24
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
     c9c:	80 91 4f 03 	lds	r24, 0x034F
     ca0:	84 60       	ori	r24, 0x04	; 4
     ca2:	80 93 4f 03 	sts	0x034F, r24
					case O11_ON:
						if(print == 0){
     ca6:	29 8d       	ldd	r18, Y+25	; 0x19
     ca8:	3a 8d       	ldd	r19, Y+26	; 0x1a
     caa:	23 2b       	or	r18, r19
     cac:	41 f4       	brne	.+16     	; 0xcbe <main+0x96e>
							OrangutanLCD::print("AIR KNIFE    ON ");
     cae:	80 e7       	ldi	r24, 0x70	; 112
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	5a 8f       	std	Y+26, r21	; 0x1a
     cbc:	49 8f       	std	Y+25, r20	; 0x19
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
     cbe:	80 91 4f 03 	lds	r24, 0x034F
     cc2:	87 7f       	andi	r24, 0xF7	; 247
     cc4:	80 93 4f 03 	sts	0x034F, r24
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
     cc8:	80 91 4f 03 	lds	r24, 0x034F
     ccc:	88 60       	ori	r24, 0x08	; 8
     cce:	80 93 4f 03 	sts	0x034F, r24
					case M1_F:
						if(print == 0){
     cd2:	89 8d       	ldd	r24, Y+25	; 0x19
     cd4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cd6:	89 2b       	or	r24, r25
     cd8:	41 f4       	brne	.+16     	; 0xcea <main+0x99a>
							OrangutanLCD::print("LOADING    FRONT");
     cda:	81 e8       	ldi	r24, 0x81	; 129
     cdc:	92 e0       	ldi	r25, 0x02	; 2
     cde:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     ce2:	e1 e0       	ldi	r30, 0x01	; 1
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	fa 8f       	std	Y+26, r31	; 0x1a
     ce8:	e9 8f       	std	Y+25, r30	; 0x19
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.m1Dir = 0;
     cea:	80 91 4c 03 	lds	r24, 0x034C
     cee:	8d 7f       	andi	r24, 0xFD	; 253
     cf0:	80 93 4c 03 	sts	0x034C, r24
						m1 =  1;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.m1Dir = 1;
     cf4:	80 91 4c 03 	lds	r24, 0x034C
     cf8:	82 60       	ori	r24, 0x02	; 2
     cfa:	80 93 4c 03 	sts	0x034C, r24
						m1 =  1;
					case M2_F:
						if(print == 0){
     cfe:	29 8d       	ldd	r18, Y+25	; 0x19
     d00:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d02:	23 2b       	or	r18, r19
     d04:	41 f4       	brne	.+16     	; 0xd16 <main+0x9c6>
							OrangutanLCD::print("DRIVE      FRONT");
     d06:	82 e9       	ldi	r24, 0x92	; 146
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	5a 8f       	std	Y+26, r21	; 0x1a
     d14:	49 8f       	std	Y+25, r20	; 0x19
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.m2Dir = 0;
     d16:	80 91 4c 03 	lds	r24, 0x034C
     d1a:	8f 7e       	andi	r24, 0xEF	; 239
     d1c:	80 93 4c 03 	sts	0x034C, r24
						m2 =  1;
						m1 = 0;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.m2Dir = 1;
     d20:	80 91 4c 03 	lds	r24, 0x034C
     d24:	80 61       	ori	r24, 0x10	; 16
     d26:	80 93 4c 03 	sts	0x034C, r24
						m2 =  1;
					case M3_F:
						if(print == 0){
     d2a:	89 8d       	ldd	r24, Y+25	; 0x19
     d2c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d2e:	89 2b       	or	r24, r25
     d30:	41 f4       	brne	.+16     	; 0xd42 <main+0x9f2>
							OrangutanLCD::print("BRUSH1     FRONT");
     d32:	83 ea       	ldi	r24, 0xA3	; 163
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     d3a:	e1 e0       	ldi	r30, 0x01	; 1
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	fa 8f       	std	Y+26, r31	; 0x1a
     d40:	e9 8f       	std	Y+25, r30	; 0x19
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.m3Dir = 0;
     d42:	80 91 4c 03 	lds	r24, 0x034C
     d46:	8f 77       	andi	r24, 0x7F	; 127
     d48:	80 93 4c 03 	sts	0x034C, r24
						m3 =  1;
						m2 = 0;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.m3Dir = 1;
     d4c:	80 91 4c 03 	lds	r24, 0x034C
     d50:	80 68       	ori	r24, 0x80	; 128
     d52:	80 93 4c 03 	sts	0x034C, r24
						m3 =  1;
					case M4_F:
						if(print == 0){
     d56:	29 8d       	ldd	r18, Y+25	; 0x19
     d58:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d5a:	23 2b       	or	r18, r19
     d5c:	41 f4       	brne	.+16     	; 0xd6e <main+0xa1e>
							OrangutanLCD::print("BRUSH2     FRONT");
     d5e:	84 eb       	ldi	r24, 0xB4	; 180
     d60:	92 e0       	ldi	r25, 0x02	; 2
     d62:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     d66:	41 e0       	ldi	r20, 0x01	; 1
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	5a 8f       	std	Y+26, r21	; 0x1a
     d6c:	49 8f       	std	Y+25, r20	; 0x19
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.m4Dir = 0;
     d6e:	80 91 4d 03 	lds	r24, 0x034D
     d72:	8b 7f       	andi	r24, 0xFB	; 251
     d74:	80 93 4d 03 	sts	0x034D, r24
						m4 =  1;
						m3 = 0;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.m4Dir = 1;
     d78:	80 91 4d 03 	lds	r24, 0x034D
     d7c:	84 60       	ori	r24, 0x04	; 4
     d7e:	80 93 4d 03 	sts	0x034D, r24
						m4 =  1;
					case M5_F:
						if(print == 0){
     d82:	89 8d       	ldd	r24, Y+25	; 0x19
     d84:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d86:	89 2b       	or	r24, r25
     d88:	41 f4       	brne	.+16     	; 0xd9a <main+0xa4a>
							OrangutanLCD::print("PAPER      FRONT");
     d8a:	85 ec       	ldi	r24, 0xC5	; 197
     d8c:	92 e0       	ldi	r25, 0x02	; 2
     d8e:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     d92:	e1 e0       	ldi	r30, 0x01	; 1
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	fa 8f       	std	Y+26, r31	; 0x1a
     d98:	e9 8f       	std	Y+25, r30	; 0x19
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.m5Dir = 0;
     d9a:	80 91 4d 03 	lds	r24, 0x034D
     d9e:	8f 7d       	andi	r24, 0xDF	; 223
     da0:	80 93 4d 03 	sts	0x034D, r24
						m5 =  1;
						m4 = 0;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.m5Dir = 1;
     da4:	80 91 4d 03 	lds	r24, 0x034D
     da8:	80 62       	ori	r24, 0x20	; 32
     daa:	80 93 4d 03 	sts	0x034D, r24
     dae:	21 e0       	ldi	r18, 0x01	; 1
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	38 8f       	std	Y+24, r19	; 0x18
     db4:	2f 8b       	std	Y+23, r18	; 0x17
						m5 =  1;
				}

				//motor and write
				motor_and_write(counter, counterRef, counterRefFive, m1, m2, m3, m4, m5);
     db6:	c2 01       	movw	r24, r4
     db8:	6d 89       	ldd	r22, Y+21	; 0x15
     dba:	7e 89       	ldd	r23, Y+22	; 0x16
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	00 e0       	ldi	r16, 0x00	; 0
     dc6:	10 e0       	ldi	r17, 0x00	; 0
     dc8:	ee 24       	eor	r14, r14
     dca:	ff 24       	eor	r15, r15
     dcc:	cc 24       	eor	r12, r12
     dce:	dd 24       	eor	r13, r13
     dd0:	af 88       	ldd	r10, Y+23	; 0x17
     dd2:	b8 8c       	ldd	r11, Y+24	; 0x18
     dd4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <_Z15motor_and_writeiiiiiiii>
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>
				OrangutanLCD::print("INPUTS ");
				OrangutanLCD::gotoXY(0,1);
				print = 0;
			}
			
			while(state != -1){
     de0:	3f ef       	ldi	r19, 0xFF	; 255
     de2:	83 16       	cp	r8, r19
     de4:	3f ef       	ldi	r19, 0xFF	; 255
     de6:	93 06       	cpc	r9, r19
     de8:	11 f4       	brne	.+4      	; 0xdee <main+0xa9e>
     dea:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <main+0x2d9c>
				i2c_start(I2C2+I2C_WRITE);
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				counter ++;
     dee:	08 94       	sec
     df0:	41 1c       	adc	r4, r1
     df2:	51 1c       	adc	r5, r1
     df4:	cc cb       	rjmp	.-2152   	; 0x58e <main+0x23e>
				delay_ms(1);
			}
		}
		else{										//If switch is set to Run Mode
		
		OrangutanLCD::print("NORMAL");
     df6:	86 ed       	ldi	r24, 0xD6	; 214
     df8:	92 e0       	ldi	r25, 0x02	; 2
     dfa:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     dfe:	88 ee       	ldi	r24, 0xE8	; 232
     e00:	93 e0       	ldi	r25, 0x03	; 3
     e02:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);

		int button = 1, counterRefPush = 0, counterRefRel = 0, stateButton = 0;
		
		OrangutanLCD::clear();
     e06:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("SELECT CYCLE");
     e0a:	8d ed       	ldi	r24, 0xDD	; 221
     e0c:	92 e0       	ldi	r25, 0x02	; 2
     e0e:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     e12:	ee 24       	eor	r14, r14
     e14:	ff 24       	eor	r15, r15
     e16:	01 e0       	ldi	r16, 0x01	; 1
     e18:	10 e0       	ldi	r17, 0x00	; 0
     e1a:	1a 86       	std	Y+10, r1	; 0x0a
     e1c:	19 86       	std	Y+9, r1	; 0x09
     e1e:	18 86       	std	Y+8, r1	; 0x08
     e20:	1f 82       	std	Y+7, r1	; 0x07
     e22:	aa 24       	eor	r10, r10
     e24:	bb 24       	eor	r11, r11
		while(button != 0){
			if(stateButton == 0 && OrangutanDigital::isInputHigh(IO_D0)){
     e26:	a1 14       	cp	r10, r1
     e28:	b1 04       	cpc	r11, r1
     e2a:	11 f0       	breq	.+4      	; 0xe30 <main+0xae0>
     e2c:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <main+0x2e10>
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     e36:	88 23       	and	r24, r24
     e38:	b9 f1       	breq	.+110    	; 0xea8 <main+0xb58>
     e3a:	fa 86       	std	Y+10, r15	; 0x0a
     e3c:	e9 86       	std	Y+9, r14	; 0x09
				counterRefPush = counter;
				stateButton = 1;
			}
			if(stateButton == 1){
				if(counter - counterRefPush > 15){
     e3e:	c7 01       	movw	r24, r14
     e40:	49 85       	ldd	r20, Y+9	; 0x09
     e42:	5a 85       	ldd	r21, Y+10	; 0x0a
     e44:	84 1b       	sub	r24, r20
     e46:	95 0b       	sbc	r25, r21
     e48:	40 97       	sbiw	r24, 0x10	; 16
     e4a:	54 f0       	brlt	.+20     	; 0xe60 <main+0xb10>
					if(!OrangutanDigital::isInputHigh(IO_D0)){
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     e52:	88 23       	and	r24, r24
     e54:	11 f0       	breq	.+4      	; 0xe5a <main+0xb0a>
     e56:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <main+0x2e20>
     e5a:	f8 86       	std	Y+8, r15	; 0x08
     e5c:	ef 82       	std	Y+7, r14	; 0x07
     e5e:	0c c0       	rjmp	.+24     	; 0xe78 <main+0xb28>
						counterRefRel = counter;
						stateButton = 2;
					}
				}
				else if(!OrangutanDigital::isInputHigh(IO_D0)){
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     e66:	88 23       	and	r24, r24
     e68:	11 f0       	breq	.+4      	; 0xe6e <main+0xb1e>
     e6a:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <main+0x2e20>
     e6e:	16 c0       	rjmp	.+44     	; 0xe9c <main+0xb4c>
					stateButton = 0;
				}
			}
			if(stateButton == 2){
     e70:	52 e0       	ldi	r21, 0x02	; 2
     e72:	a5 16       	cp	r10, r21
     e74:	b1 04       	cpc	r11, r1
     e76:	c1 f4       	brne	.+48     	; 0xea8 <main+0xb58>
				if(OrangutanDigital::isInputHigh(IO_D0)){
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     e7e:	88 23       	and	r24, r24
     e80:	21 f0       	breq	.+8      	; 0xe8a <main+0xb3a>
     e82:	fa 86       	std	Y+10, r15	; 0x0a
     e84:	e9 86       	std	Y+9, r14	; 0x09
     e86:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <main+0x2e20>
					stateButton = 1;
					counterRefPush = counter;
				}
				else if(counter - counterRefRel > 15){
     e8a:	c7 01       	movw	r24, r14
     e8c:	ef 81       	ldd	r30, Y+7	; 0x07
     e8e:	f8 85       	ldd	r31, Y+8	; 0x08
     e90:	8e 1b       	sub	r24, r30
     e92:	9f 0b       	sbc	r25, r31
     e94:	40 97       	sbiw	r24, 0x10	; 16
     e96:	2c f0       	brlt	.+10     	; 0xea2 <main+0xb52>
     e98:	00 e0       	ldi	r16, 0x00	; 0
     e9a:	10 e0       	ldi	r17, 0x00	; 0
     e9c:	aa 24       	eor	r10, r10
     e9e:	bb 24       	eor	r11, r11
     ea0:	03 c0       	rjmp	.+6      	; 0xea8 <main+0xb58>
     ea2:	b2 e0       	ldi	r27, 0x02	; 2
     ea4:	ab 2e       	mov	r10, r27
     ea6:	b1 2c       	mov	r11, r1
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>

		int button = 1, counterRefPush = 0, counterRefRel = 0, stateButton = 0;
		
		OrangutanLCD::clear();
		OrangutanLCD::print("SELECT CYCLE");
		while(button != 0){
     eb0:	01 15       	cp	r16, r1
     eb2:	11 05       	cpc	r17, r1
     eb4:	21 f0       	breq	.+8      	; 0xebe <main+0xb6e>
				else if(counter - counterRefRel > 15){
					button = 0;
					stateButton = 0;
				}
			}
			counter++;
     eb6:	08 94       	sec
     eb8:	e1 1c       	adc	r14, r1
     eba:	f1 1c       	adc	r15, r1
     ebc:	b4 cf       	rjmp	.-152    	; 0xe26 <main+0xad6>
			delay_ms(1);
		}
		button = 1;
		counter = 0;
		OrangutanLCD::clear();
     ebe:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("CYCLE:");
     ec2:	8a ee       	ldi	r24, 0xEA	; 234
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>

		//u_motorByte0.bits_in_motorByte0.m1Drop = 1;
		u_motorByte0.bits_in_motorByte0.m2Drop = 1;
     eca:	80 91 4c 03 	lds	r24, 0x034C
     ece:	80 62       	ori	r24, 0x20	; 32
     ed0:	80 93 4c 03 	sts	0x034C, r24
		/*u_motorByte1.bits_in_motorByte1.m3Drop = 1;
		u_motorByte1.bits_in_motorByte1.m4Drop = 1;
		u_motorByte1.bits_in_motorByte1.m5Drop = 1;*/

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     eda:	88 23       	and	r24, r24
     edc:	11 f0       	breq	.+4      	; 0xee2 <main+0xb92>
     ede:	0c 94 bd 18 	jmp	0x317a	; 0x317a <main+0x2e2a>
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     ee8:	88 23       	and	r24, r24
     eea:	11 f0       	breq	.+4      	; 0xef0 <main+0xba0>
     eec:	0c 94 bd 18 	jmp	0x317a	; 0x317a <main+0x2e2a>
			OrangutanLCD::gotoXY(7,0);
     ef0:	87 e0       	ldi	r24, 0x07	; 7
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("FIRST B");
     ef8:	81 ef       	ldi	r24, 0xF1	; 241
     efa:	92 e0       	ldi	r25, 0x02	; 2
     efc:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
     f00:	66 24       	eor	r6, r6
     f02:	77 24       	eor	r7, r7
     f04:	cc 24       	eor	r12, r12
     f06:	dd 24       	eor	r13, r13
     f08:	22 24       	eor	r2, r2
     f0a:	33 24       	eor	r3, r3
     f0c:	1e 82       	std	Y+6, r1	; 0x06
     f0e:	1d 82       	std	Y+5, r1	; 0x05
     f10:	00 e0       	ldi	r16, 0x00	; 0
     f12:	10 e0       	ldi	r17, 0x00	; 0
     f14:	1a 8e       	std	Y+26, r1	; 0x1a
     f16:	19 8e       	std	Y+25, r1	; 0x19
     f18:	ee 24       	eor	r14, r14
     f1a:	ff 24       	eor	r15, r15
     f1c:	1c 8a       	std	Y+20, r1	; 0x14
     f1e:	1b 8a       	std	Y+19, r1	; 0x13
     f20:	21 e0       	ldi	r18, 0x01	; 1
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	3a 8b       	std	Y+18, r19	; 0x12
     f26:	29 8b       	std	Y+17, r18	; 0x11
     f28:	38 8b       	std	Y+16, r19	; 0x10
     f2a:	2f 87       	std	Y+15, r18	; 0x0f
     f2c:	3a 83       	std	Y+2, r19	; 0x02
     f2e:	29 83       	std	Y+1, r18	; 0x01
				}
				if(state == 33 && counter - counterRef > pWait){
					state = 34;
					counterRef = counter;
				}
				if(state == 34 && counter - counterRef > totallength1*m1LoadPlate){
     f30:	a0 ed       	ldi	r26, 0xD0	; 208
     f32:	8a 2e       	mov	r8, r26
     f34:	a7 e0       	ldi	r26, 0x07	; 7
     f36:	9a 2e       	mov	r9, r26
		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("FIRST B");
			while(state != -1)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     f38:	84 e4       	ldi	r24, 0x44	; 68
     f3a:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     f44:	85 e4       	ldi	r24, 0x45	; 69
     f46:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     f4a:	0e 94 9a 19 	call	0x3334	; 0x3334 <_Z11i2c_readAckv>
     f4e:	80 93 50 03 	sts	0x0350, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     f52:	0e 94 a4 19 	call	0x3348	; 0x3348 <_Z11i2c_readNakv>
     f56:	80 93 51 03 	sts	0x0351, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     f5a:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8i2c_stopv>
				if(state != 0){
     f5e:	01 15       	cp	r16, r1
     f60:	11 05       	cpc	r17, r1
     f62:	79 f0       	breq	.+30     	; 0xf82 <main+0xc32>
					OrangutanLCD::gotoXY(0,1);
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
     f6c:	89 ef       	ldi	r24, 0xF9	; 249
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
	};
	static inline void print(int value)
	{
		print((long)value);
     f74:	b8 01       	movw	r22, r16
     f76:	88 27       	eor	r24, r24
     f78:	77 fd       	sbrc	r23, 7
     f7a:	80 95       	com	r24
     f7c:	98 2f       	mov	r25, r24
     f7e:	0e 94 56 1c 	call	0x38ac	; 0x38ac <_ZN12OrangutanLCD5printEl>
					OrangutanLCD::print(state);
				}

				if(stateButton == 0 && OrangutanDigital::isInputHigh(IO_D0)){
     f82:	a1 14       	cp	r10, r1
     f84:	b1 04       	cpc	r11, r1
     f86:	11 f0       	breq	.+4      	; 0xf8c <main+0xc3c>
     f88:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <main+0x2e5e>
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     f92:	88 23       	and	r24, r24
     f94:	09 f4       	brne	.+2      	; 0xf98 <main+0xc48>
     f96:	3f c0       	rjmp	.+126    	; 0x1016 <main+0xcc6>
     f98:	49 8d       	ldd	r20, Y+25	; 0x19
     f9a:	5a 8d       	ldd	r21, Y+26	; 0x1a
     f9c:	5a 87       	std	Y+10, r21	; 0x0a
     f9e:	49 87       	std	Y+9, r20	; 0x09
					counterRefPush = counter;
					stateButton = 1;
				}
				if(stateButton == 1){
					if(counter - counterRefPush > 15){
     fa0:	89 8d       	ldd	r24, Y+25	; 0x19
     fa2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     fa4:	e9 85       	ldd	r30, Y+9	; 0x09
     fa6:	fa 85       	ldd	r31, Y+10	; 0x0a
     fa8:	8e 1b       	sub	r24, r30
     faa:	9f 0b       	sbc	r25, r31
     fac:	40 97       	sbiw	r24, 0x10	; 16
     fae:	64 f0       	brlt	.+24     	; 0xfc8 <main+0xc78>
						if(!OrangutanDigital::isInputHigh(IO_D0)){
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     fb6:	88 23       	and	r24, r24
     fb8:	11 f0       	breq	.+4      	; 0xfbe <main+0xc6e>
     fba:	0c 94 df 18 	jmp	0x31be	; 0x31be <main+0x2e6e>
     fbe:	29 8d       	ldd	r18, Y+25	; 0x19
     fc0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     fc2:	38 87       	std	Y+8, r19	; 0x08
     fc4:	2f 83       	std	Y+7, r18	; 0x07
     fc6:	0c c0       	rjmp	.+24     	; 0xfe0 <main+0xc90>
							counterRefRel = counter;
							stateButton = 2;
						}
					}
					else if(!OrangutanDigital::isInputHigh(IO_D0)){
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     fce:	88 23       	and	r24, r24
     fd0:	11 f0       	breq	.+4      	; 0xfd6 <main+0xc86>
     fd2:	0c 94 df 18 	jmp	0x31be	; 0x31be <main+0x2e6e>
     fd6:	19 c0       	rjmp	.+50     	; 0x100a <main+0xcba>
						stateButton = 0;
					}
				}
				if(stateButton == 2){
     fd8:	32 e0       	ldi	r19, 0x02	; 2
     fda:	a3 16       	cp	r10, r19
     fdc:	b1 04       	cpc	r11, r1
     fde:	d9 f4       	brne	.+54     	; 0x1016 <main+0xcc6>
					if(OrangutanDigital::isInputHigh(IO_D0)){
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
     fe6:	88 23       	and	r24, r24
     fe8:	31 f0       	breq	.+12     	; 0xff6 <main+0xca6>
     fea:	49 8d       	ldd	r20, Y+25	; 0x19
     fec:	5a 8d       	ldd	r21, Y+26	; 0x1a
     fee:	5a 87       	std	Y+10, r21	; 0x0a
     ff0:	49 87       	std	Y+9, r20	; 0x09
     ff2:	0c 94 df 18 	jmp	0x31be	; 0x31be <main+0x2e6e>
						stateButton = 1;
						counterRefPush = counter;
					}
					else if(counter - counterRefRel > 15){
     ff6:	89 8d       	ldd	r24, Y+25	; 0x19
     ff8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ffa:	ef 81       	ldd	r30, Y+7	; 0x07
     ffc:	f8 85       	ldd	r31, Y+8	; 0x08
     ffe:	8e 1b       	sub	r24, r30
    1000:	9f 0b       	sbc	r25, r31
    1002:	40 97       	sbiw	r24, 0x10	; 16
    1004:	2c f0       	brlt	.+10     	; 0x1010 <main+0xcc0>
    1006:	1a 82       	std	Y+2, r1	; 0x02
    1008:	19 82       	std	Y+1, r1	; 0x01
    100a:	aa 24       	eor	r10, r10
    100c:	bb 24       	eor	r11, r11
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <main+0xcc6>
    1010:	f2 e0       	ldi	r31, 0x02	; 2
    1012:	af 2e       	mov	r10, r31
    1014:	b1 2c       	mov	r11, r1
					}
				}

				//state conversions
	
				if(state == 0 && button == 0){
    1016:	01 15       	cp	r16, r1
    1018:	11 05       	cpc	r17, r1
    101a:	61 f4       	brne	.+24     	; 0x1034 <main+0xce4>
    101c:	29 81       	ldd	r18, Y+1	; 0x01
    101e:	3a 81       	ldd	r19, Y+2	; 0x02
    1020:	23 2b       	or	r18, r19
    1022:	09 f0       	breq	.+2      	; 0x1026 <main+0xcd6>
    1024:	65 c0       	rjmp	.+202    	; 0x10f0 <main+0xda0>
    1026:	e9 8c       	ldd	r14, Y+25	; 0x19
    1028:	fa 8c       	ldd	r15, Y+26	; 0x1a
    102a:	41 e0       	ldi	r20, 0x01	; 1
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	5a 83       	std	Y+2, r21	; 0x02
    1030:	49 83       	std	Y+1, r20	; 0x01
    1032:	03 c0       	rjmp	.+6      	; 0x103a <main+0xcea>
					button = 1;
					state = 1;
					counterRef = counter;
				}
				if(state == 1 && counter - counterRef > totallength1*m1LoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    1034:	01 30       	cpi	r16, 0x01	; 1
    1036:	11 05       	cpc	r17, r1
    1038:	b9 f4       	brne	.+46     	; 0x1068 <main+0xd18>
    103a:	89 8d       	ldd	r24, Y+25	; 0x19
    103c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    103e:	8e 19       	sub	r24, r14
    1040:	9f 09       	sbc	r25, r15
    1042:	20 91 39 03 	lds	r18, 0x0339
    1046:	30 91 3a 03 	lds	r19, 0x033A
    104a:	f9 01       	movw	r30, r18
    104c:	e8 9d       	mul	r30, r8
    104e:	90 01       	movw	r18, r0
    1050:	e9 9d       	mul	r30, r9
    1052:	30 0d       	add	r19, r0
    1054:	f8 9d       	mul	r31, r8
    1056:	30 0d       	add	r19, r0
    1058:	11 24       	eor	r1, r1
    105a:	28 17       	cp	r18, r24
    105c:	39 07       	cpc	r19, r25
    105e:	0c f0       	brlt	.+2      	; 0x1062 <main+0xd12>
    1060:	61 c0       	rjmp	.+194    	; 0x1124 <main+0xdd4>
    1062:	e9 8c       	ldd	r14, Y+25	; 0x19
    1064:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1066:	03 c0       	rjmp	.+6      	; 0x106e <main+0xd1e>
					state = 2;
					counterRef = counter;
				}
				if(state == 2 && counter - counterRef > pWait){
    1068:	02 30       	cpi	r16, 0x02	; 2
    106a:	11 05       	cpc	r17, r1
    106c:	59 f4       	brne	.+22     	; 0x1084 <main+0xd34>
    106e:	89 8d       	ldd	r24, Y+25	; 0x19
    1070:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1072:	8e 19       	sub	r24, r14
    1074:	9f 09       	sbc	r25, r15
    1076:	85 36       	cpi	r24, 0x65	; 101
    1078:	91 05       	cpc	r25, r1
    107a:	0c f4       	brge	.+2      	; 0x107e <main+0xd2e>
    107c:	63 c0       	rjmp	.+198    	; 0x1144 <main+0xdf4>
    107e:	e9 8c       	ldd	r14, Y+25	; 0x19
    1080:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1082:	03 c0       	rjmp	.+6      	; 0x108a <main+0xd3a>
					state = 3;
					counterRef = counter;
				}
				if(state == 3 && counter - counterRef > totallength2*m2HomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1084:	03 30       	cpi	r16, 0x03	; 3
    1086:	11 05       	cpc	r17, r1
    1088:	b9 f4       	brne	.+46     	; 0x10b8 <main+0xd68>
    108a:	89 8d       	ldd	r24, Y+25	; 0x19
    108c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    108e:	8e 19       	sub	r24, r14
    1090:	9f 09       	sbc	r25, r15
    1092:	20 91 3b 03 	lds	r18, 0x033B
    1096:	30 91 3c 03 	lds	r19, 0x033C
    109a:	a9 01       	movw	r20, r18
    109c:	48 9d       	mul	r20, r8
    109e:	90 01       	movw	r18, r0
    10a0:	49 9d       	mul	r20, r9
    10a2:	30 0d       	add	r19, r0
    10a4:	58 9d       	mul	r21, r8
    10a6:	30 0d       	add	r19, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	28 17       	cp	r18, r24
    10ac:	39 07       	cpc	r19, r25
    10ae:	0c f0       	brlt	.+2      	; 0x10b2 <main+0xd62>
    10b0:	59 c0       	rjmp	.+178    	; 0x1164 <main+0xe14>
    10b2:	e9 8c       	ldd	r14, Y+25	; 0x19
    10b4:	fa 8c       	ldd	r15, Y+26	; 0x1a
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <main+0xd6e>
					state = 4;
					counterRef = counter;
				}
				if(state == 4 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    10b8:	04 30       	cpi	r16, 0x04	; 4
    10ba:	11 05       	cpc	r17, r1
    10bc:	59 f4       	brne	.+22     	; 0x10d4 <main+0xd84>
    10be:	89 8d       	ldd	r24, Y+25	; 0x19
    10c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10c2:	8e 19       	sub	r24, r14
    10c4:	9f 09       	sbc	r25, r15
    10c6:	89 5e       	subi	r24, 0xE9	; 233
    10c8:	93 40       	sbci	r25, 0x03	; 3
    10ca:	0c f4       	brge	.+2      	; 0x10ce <main+0xd7e>
    10cc:	67 c0       	rjmp	.+206    	; 0x119c <main+0xe4c>
    10ce:	e9 8c       	ldd	r14, Y+25	; 0x19
    10d0:	fa 8c       	ldd	r15, Y+26	; 0x1a
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <main+0xd8a>
					state = 5;
					counterRef = counter;
				}
				if(state == 5 && counter - counterRef > pWait){
    10d4:	05 30       	cpi	r16, 0x05	; 5
    10d6:	11 05       	cpc	r17, r1
    10d8:	59 f4       	brne	.+22     	; 0x10f0 <main+0xda0>
    10da:	89 8d       	ldd	r24, Y+25	; 0x19
    10dc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10de:	8e 19       	sub	r24, r14
    10e0:	9f 09       	sbc	r25, r15
    10e2:	85 36       	cpi	r24, 0x65	; 101
    10e4:	91 05       	cpc	r25, r1
    10e6:	0c f4       	brge	.+2      	; 0x10ea <main+0xd9a>
    10e8:	66 c0       	rjmp	.+204    	; 0x11b6 <main+0xe66>
    10ea:	e9 8c       	ldd	r14, Y+25	; 0x19
    10ec:	fa 8c       	ldd	r15, Y+26	; 0x1a
    10ee:	03 c0       	rjmp	.+6      	; 0x10f6 <main+0xda6>
						state = 6;
					counterRef = counter;
				}
				if(state == 6 && counter - counterRef > totallength2*m2Brush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    10f0:	06 30       	cpi	r16, 0x06	; 6
    10f2:	11 05       	cpc	r17, r1
    10f4:	c9 f4       	brne	.+50     	; 0x1128 <main+0xdd8>
    10f6:	89 8d       	ldd	r24, Y+25	; 0x19
    10f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10fa:	8e 19       	sub	r24, r14
    10fc:	9f 09       	sbc	r25, r15
    10fe:	20 91 3b 03 	lds	r18, 0x033B
    1102:	30 91 3c 03 	lds	r19, 0x033C
    1106:	f9 01       	movw	r30, r18
    1108:	e8 9d       	mul	r30, r8
    110a:	90 01       	movw	r18, r0
    110c:	e9 9d       	mul	r30, r9
    110e:	30 0d       	add	r19, r0
    1110:	f8 9d       	mul	r31, r8
    1112:	30 0d       	add	r19, r0
    1114:	11 24       	eor	r1, r1
    1116:	28 17       	cp	r18, r24
    1118:	39 07       	cpc	r19, r25
    111a:	0c f0       	brlt	.+2      	; 0x111e <main+0xdce>
    111c:	68 c0       	rjmp	.+208    	; 0x11ee <main+0xe9e>
    111e:	e9 8c       	ldd	r14, Y+25	; 0x19
    1120:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1122:	05 c0       	rjmp	.+10     	; 0x112e <main+0xdde>
    1124:	01 e0       	ldi	r16, 0x01	; 1
    1126:	10 e0       	ldi	r17, 0x00	; 0
					state = 7;
					counterRef = counter;
				}
				if(state == 7 && counter - counterRef > mWait){
    1128:	07 30       	cpi	r16, 0x07	; 7
    112a:	11 05       	cpc	r17, r1
    112c:	69 f4       	brne	.+26     	; 0x1148 <main+0xdf8>
    112e:	89 8d       	ldd	r24, Y+25	; 0x19
    1130:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1132:	8e 19       	sub	r24, r14
    1134:	9f 09       	sbc	r25, r15
    1136:	85 36       	cpi	r24, 0x65	; 101
    1138:	91 05       	cpc	r25, r1
    113a:	0c f4       	brge	.+2      	; 0x113e <main+0xdee>
    113c:	68 c0       	rjmp	.+208    	; 0x120e <main+0xebe>
    113e:	e9 8c       	ldd	r14, Y+25	; 0x19
    1140:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1142:	05 c0       	rjmp	.+10     	; 0x114e <main+0xdfe>
    1144:	02 e0       	ldi	r16, 0x02	; 2
    1146:	10 e0       	ldi	r17, 0x00	; 0
					state = 8;
					counterRef = counter;
				}
				if(state == 8 && counter - counterRef > pWait){
    1148:	08 30       	cpi	r16, 0x08	; 8
    114a:	11 05       	cpc	r17, r1
    114c:	69 f4       	brne	.+26     	; 0x1168 <main+0xe18>
    114e:	89 8d       	ldd	r24, Y+25	; 0x19
    1150:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1152:	8e 19       	sub	r24, r14
    1154:	9f 09       	sbc	r25, r15
    1156:	85 36       	cpi	r24, 0x65	; 101
    1158:	91 05       	cpc	r25, r1
    115a:	0c f4       	brge	.+2      	; 0x115e <main+0xe0e>
    115c:	71 c0       	rjmp	.+226    	; 0x1240 <main+0xef0>
    115e:	e9 8c       	ldd	r14, Y+25	; 0x19
    1160:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1162:	05 c0       	rjmp	.+10     	; 0x116e <main+0xe1e>
    1164:	03 e0       	ldi	r16, 0x03	; 3
    1166:	10 e0       	ldi	r17, 0x00	; 0
					state = 9;
						counterRef = counter;
				}
					if(state == 9 && counter - counterRef > totallength2*m2HalfPlate){
    1168:	09 30       	cpi	r16, 0x09	; 9
    116a:	11 05       	cpc	r17, r1
    116c:	c9 f4       	brne	.+50     	; 0x11a0 <main+0xe50>
    116e:	89 8d       	ldd	r24, Y+25	; 0x19
    1170:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1172:	8e 19       	sub	r24, r14
    1174:	9f 09       	sbc	r25, r15
    1176:	20 91 3b 03 	lds	r18, 0x033B
    117a:	30 91 3c 03 	lds	r19, 0x033C
    117e:	a9 01       	movw	r20, r18
    1180:	48 9d       	mul	r20, r8
    1182:	90 01       	movw	r18, r0
    1184:	49 9d       	mul	r20, r9
    1186:	30 0d       	add	r19, r0
    1188:	58 9d       	mul	r21, r8
    118a:	30 0d       	add	r19, r0
    118c:	11 24       	eor	r1, r1
    118e:	28 17       	cp	r18, r24
    1190:	39 07       	cpc	r19, r25
    1192:	0c f0       	brlt	.+2      	; 0x1196 <main+0xe46>
    1194:	65 c0       	rjmp	.+202    	; 0x1260 <main+0xf10>
    1196:	e9 8c       	ldd	r14, Y+25	; 0x19
    1198:	fa 8c       	ldd	r15, Y+26	; 0x1a
    119a:	05 c0       	rjmp	.+10     	; 0x11a6 <main+0xe56>
    119c:	04 e0       	ldi	r16, 0x04	; 4
    119e:	10 e0       	ldi	r17, 0x00	; 0
					state = 10;
					counterRef = counter;
				}
				if(state == 10 && counter - counterRef > pWait){
    11a0:	0a 30       	cpi	r16, 0x0A	; 10
    11a2:	11 05       	cpc	r17, r1
    11a4:	51 f4       	brne	.+20     	; 0x11ba <main+0xe6a>
    11a6:	89 8d       	ldd	r24, Y+25	; 0x19
    11a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11aa:	8e 19       	sub	r24, r14
    11ac:	9f 09       	sbc	r25, r15
    11ae:	85 36       	cpi	r24, 0x65	; 101
    11b0:	91 05       	cpc	r25, r1
    11b2:	34 f4       	brge	.+12     	; 0x11c0 <main+0xe70>
    11b4:	71 c0       	rjmp	.+226    	; 0x1298 <main+0xf48>
    11b6:	05 e0       	ldi	r16, 0x05	; 5
    11b8:	10 e0       	ldi	r17, 0x00	; 0
					state = 11;
				}
				if(state == 11 && counter - counterRef > totallength2*m2HalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    11ba:	0b 30       	cpi	r16, 0x0B	; 11
    11bc:	11 05       	cpc	r17, r1
    11be:	c9 f4       	brne	.+50     	; 0x11f2 <main+0xea2>
    11c0:	89 8d       	ldd	r24, Y+25	; 0x19
    11c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11c4:	8e 19       	sub	r24, r14
    11c6:	9f 09       	sbc	r25, r15
    11c8:	20 91 3b 03 	lds	r18, 0x033B
    11cc:	30 91 3c 03 	lds	r19, 0x033C
    11d0:	f9 01       	movw	r30, r18
    11d2:	e8 9d       	mul	r30, r8
    11d4:	90 01       	movw	r18, r0
    11d6:	e9 9d       	mul	r30, r9
    11d8:	30 0d       	add	r19, r0
    11da:	f8 9d       	mul	r31, r8
    11dc:	30 0d       	add	r19, r0
    11de:	11 24       	eor	r1, r1
    11e0:	28 17       	cp	r18, r24
    11e2:	39 07       	cpc	r19, r25
    11e4:	0c f0       	brlt	.+2      	; 0x11e8 <main+0xe98>
    11e6:	68 c0       	rjmp	.+208    	; 0x12b8 <main+0xf68>
    11e8:	e9 8c       	ldd	r14, Y+25	; 0x19
    11ea:	fa 8c       	ldd	r15, Y+26	; 0x1a
    11ec:	05 c0       	rjmp	.+10     	; 0x11f8 <main+0xea8>
    11ee:	06 e0       	ldi	r16, 0x06	; 6
    11f0:	10 e0       	ldi	r17, 0x00	; 0
					state = 12;
					counterRef = counter;
				}
				if(state == 12 && counter - counterRef > pWait){
    11f2:	0c 30       	cpi	r16, 0x0C	; 12
    11f4:	11 05       	cpc	r17, r1
    11f6:	69 f4       	brne	.+26     	; 0x1212 <main+0xec2>
    11f8:	89 8d       	ldd	r24, Y+25	; 0x19
    11fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11fc:	8e 19       	sub	r24, r14
    11fe:	9f 09       	sbc	r25, r15
    1200:	85 36       	cpi	r24, 0x65	; 101
    1202:	91 05       	cpc	r25, r1
    1204:	0c f4       	brge	.+2      	; 0x1208 <main+0xeb8>
    1206:	71 c0       	rjmp	.+226    	; 0x12ea <main+0xf9a>
    1208:	e9 8c       	ldd	r14, Y+25	; 0x19
    120a:	fa 8c       	ldd	r15, Y+26	; 0x1a
    120c:	05 c0       	rjmp	.+10     	; 0x1218 <main+0xec8>
    120e:	07 e0       	ldi	r16, 0x07	; 7
    1210:	10 e0       	ldi	r17, 0x00	; 0
					state = 13;
					counterRef = counter;
				}
				if(state == 13 && counter - counterRef > totallength2*m2HalfPlate){
    1212:	0d 30       	cpi	r16, 0x0D	; 13
    1214:	11 05       	cpc	r17, r1
    1216:	b1 f4       	brne	.+44     	; 0x1244 <main+0xef4>
    1218:	89 8d       	ldd	r24, Y+25	; 0x19
    121a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    121c:	8e 19       	sub	r24, r14
    121e:	9f 09       	sbc	r25, r15
    1220:	20 91 3b 03 	lds	r18, 0x033B
    1224:	30 91 3c 03 	lds	r19, 0x033C
    1228:	a9 01       	movw	r20, r18
    122a:	48 9d       	mul	r20, r8
    122c:	90 01       	movw	r18, r0
    122e:	49 9d       	mul	r20, r9
    1230:	30 0d       	add	r19, r0
    1232:	58 9d       	mul	r21, r8
    1234:	30 0d       	add	r19, r0
    1236:	11 24       	eor	r1, r1
    1238:	28 17       	cp	r18, r24
    123a:	39 07       	cpc	r19, r25
    123c:	34 f0       	brlt	.+12     	; 0x124a <main+0xefa>
    123e:	73 c0       	rjmp	.+230    	; 0x1326 <main+0xfd6>
    1240:	08 e0       	ldi	r16, 0x08	; 8
    1242:	10 e0       	ldi	r17, 0x00	; 0
					state = 14;
					counterRef14 = counter;
					}
				if(state == 14 && counter - counterRef > pWait){
    1244:	0e 30       	cpi	r16, 0x0E	; 14
    1246:	11 05       	cpc	r17, r1
    1248:	69 f4       	brne	.+26     	; 0x1264 <main+0xf14>
    124a:	89 8d       	ldd	r24, Y+25	; 0x19
    124c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    124e:	8e 19       	sub	r24, r14
    1250:	9f 09       	sbc	r25, r15
    1252:	85 36       	cpi	r24, 0x65	; 101
    1254:	91 05       	cpc	r25, r1
    1256:	0c f4       	brge	.+2      	; 0x125a <main+0xf0a>
    1258:	78 c0       	rjmp	.+240    	; 0x134a <main+0xffa>
    125a:	e9 8c       	ldd	r14, Y+25	; 0x19
    125c:	fa 8c       	ldd	r15, Y+26	; 0x1a
    125e:	05 c0       	rjmp	.+10     	; 0x126a <main+0xf1a>
    1260:	09 e0       	ldi	r16, 0x09	; 9
    1262:	10 e0       	ldi	r17, 0x00	; 0
					state = 23;
					counterRef = counter;
				}
				if(state == 23 && counter - counterRef > totallength2*m2Dry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1264:	07 31       	cpi	r16, 0x17	; 23
    1266:	11 05       	cpc	r17, r1
    1268:	c9 f4       	brne	.+50     	; 0x129c <main+0xf4c>
    126a:	89 8d       	ldd	r24, Y+25	; 0x19
    126c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    126e:	8e 19       	sub	r24, r14
    1270:	9f 09       	sbc	r25, r15
    1272:	20 91 3b 03 	lds	r18, 0x033B
    1276:	30 91 3c 03 	lds	r19, 0x033C
    127a:	f9 01       	movw	r30, r18
    127c:	e8 9d       	mul	r30, r8
    127e:	90 01       	movw	r18, r0
    1280:	e9 9d       	mul	r30, r9
    1282:	30 0d       	add	r19, r0
    1284:	f8 9d       	mul	r31, r8
    1286:	30 0d       	add	r19, r0
    1288:	11 24       	eor	r1, r1
    128a:	28 17       	cp	r18, r24
    128c:	39 07       	cpc	r19, r25
    128e:	0c f0       	brlt	.+2      	; 0x1292 <main+0xf42>
    1290:	6c c0       	rjmp	.+216    	; 0x136a <main+0x101a>
    1292:	e9 8c       	ldd	r14, Y+25	; 0x19
    1294:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1296:	05 c0       	rjmp	.+10     	; 0x12a2 <main+0xf52>
    1298:	0a e0       	ldi	r16, 0x0A	; 10
    129a:	10 e0       	ldi	r17, 0x00	; 0
					state = 24;
					counterRef = counter;
				}
				if(state == 24 && counter - counterRef > kWait){
    129c:	08 31       	cpi	r16, 0x18	; 24
    129e:	11 05       	cpc	r17, r1
    12a0:	69 f4       	brne	.+26     	; 0x12bc <main+0xf6c>
    12a2:	89 8d       	ldd	r24, Y+25	; 0x19
    12a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12a6:	8e 19       	sub	r24, r14
    12a8:	9f 09       	sbc	r25, r15
    12aa:	85 36       	cpi	r24, 0x65	; 101
    12ac:	91 05       	cpc	r25, r1
    12ae:	0c f4       	brge	.+2      	; 0x12b2 <main+0xf62>
    12b0:	75 c0       	rjmp	.+234    	; 0x139c <main+0x104c>
    12b2:	e9 8c       	ldd	r14, Y+25	; 0x19
    12b4:	fa 8c       	ldd	r15, Y+26	; 0x1a
    12b6:	05 c0       	rjmp	.+10     	; 0x12c2 <main+0xf72>
    12b8:	0b e0       	ldi	r16, 0x0B	; 11
    12ba:	10 e0       	ldi	r17, 0x00	; 0
					state = 25;
					counterRef = counter;
				}
				if(state == 25 && counter - counterRef > totallength2*m2WholePlate){
    12bc:	09 31       	cpi	r16, 0x19	; 25
    12be:	11 05       	cpc	r17, r1
    12c0:	b1 f4       	brne	.+44     	; 0x12ee <main+0xf9e>
    12c2:	89 8d       	ldd	r24, Y+25	; 0x19
    12c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12c6:	8e 19       	sub	r24, r14
    12c8:	9f 09       	sbc	r25, r15
    12ca:	20 91 3b 03 	lds	r18, 0x033B
    12ce:	30 91 3c 03 	lds	r19, 0x033C
    12d2:	a9 01       	movw	r20, r18
    12d4:	48 9d       	mul	r20, r8
    12d6:	90 01       	movw	r18, r0
    12d8:	49 9d       	mul	r20, r9
    12da:	30 0d       	add	r19, r0
    12dc:	58 9d       	mul	r21, r8
    12de:	30 0d       	add	r19, r0
    12e0:	11 24       	eor	r1, r1
    12e2:	28 17       	cp	r18, r24
    12e4:	39 07       	cpc	r19, r25
    12e6:	34 f0       	brlt	.+12     	; 0x12f4 <main+0xfa4>
    12e8:	75 c0       	rjmp	.+234    	; 0x13d4 <main+0x1084>
    12ea:	0c e0       	ldi	r16, 0x0C	; 12
    12ec:	10 e0       	ldi	r17, 0x00	; 0
					state = 26;
					counterRef26 = counter;
				}
				if(state == 26 && counter - counterRef > totallength2*m2Dry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    12ee:	0a 31       	cpi	r16, 0x1A	; 26
    12f0:	11 05       	cpc	r17, r1
    12f2:	d9 f4       	brne	.+54     	; 0x132a <main+0xfda>
    12f4:	89 8d       	ldd	r24, Y+25	; 0x19
    12f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12f8:	8e 19       	sub	r24, r14
    12fa:	9f 09       	sbc	r25, r15
    12fc:	20 91 3b 03 	lds	r18, 0x033B
    1300:	30 91 3c 03 	lds	r19, 0x033C
    1304:	f9 01       	movw	r30, r18
    1306:	e8 9d       	mul	r30, r8
    1308:	90 01       	movw	r18, r0
    130a:	e9 9d       	mul	r30, r9
    130c:	30 0d       	add	r19, r0
    130e:	f8 9d       	mul	r31, r8
    1310:	30 0d       	add	r19, r0
    1312:	11 24       	eor	r1, r1
    1314:	28 17       	cp	r18, r24
    1316:	39 07       	cpc	r19, r25
    1318:	0c f0       	brlt	.+2      	; 0x131c <main+0xfcc>
    131a:	6c c0       	rjmp	.+216    	; 0x13f4 <main+0x10a4>
    131c:	29 8d       	ldd	r18, Y+25	; 0x19
    131e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1320:	3c 8b       	std	Y+20, r19	; 0x14
    1322:	2b 8b       	std	Y+19, r18	; 0x13
    1324:	05 c0       	rjmp	.+10     	; 0x1330 <main+0xfe0>
    1326:	0d e0       	ldi	r16, 0x0D	; 13
    1328:	10 e0       	ldi	r17, 0x00	; 0
					state = 27;
					counterRefFive = counter;
				}
				if(state == 27 && counter - counterRefFive > mWait){
    132a:	0b 31       	cpi	r16, 0x1B	; 27
    132c:	11 05       	cpc	r17, r1
    132e:	79 f4       	brne	.+30     	; 0x134e <main+0xffe>
    1330:	89 8d       	ldd	r24, Y+25	; 0x19
    1332:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1334:	4b 89       	ldd	r20, Y+19	; 0x13
    1336:	5c 89       	ldd	r21, Y+20	; 0x14
    1338:	84 1b       	sub	r24, r20
    133a:	95 0b       	sbc	r25, r21
    133c:	85 36       	cpi	r24, 0x65	; 101
    133e:	91 05       	cpc	r25, r1
    1340:	0c f4       	brge	.+2      	; 0x1344 <main+0xff4>
    1342:	74 c0       	rjmp	.+232    	; 0x142c <main+0x10dc>
    1344:	e9 8c       	ldd	r14, Y+25	; 0x19
    1346:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1348:	05 c0       	rjmp	.+10     	; 0x1354 <main+0x1004>
    134a:	0e e0       	ldi	r16, 0x0E	; 14
    134c:	10 e0       	ldi	r17, 0x00	; 0
					state = 28;
					counterRef = counter;
				}
				if(state == 28 && counter - counterRef > pWait){
    134e:	0c 31       	cpi	r16, 0x1C	; 28
    1350:	11 05       	cpc	r17, r1
    1352:	69 f4       	brne	.+26     	; 0x136e <main+0x101e>
    1354:	89 8d       	ldd	r24, Y+25	; 0x19
    1356:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1358:	8e 19       	sub	r24, r14
    135a:	9f 09       	sbc	r25, r15
    135c:	85 36       	cpi	r24, 0x65	; 101
    135e:	91 05       	cpc	r25, r1
    1360:	0c f4       	brge	.+2      	; 0x1364 <main+0x1014>
    1362:	74 c0       	rjmp	.+232    	; 0x144c <main+0x10fc>
    1364:	e9 8c       	ldd	r14, Y+25	; 0x19
    1366:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1368:	05 c0       	rjmp	.+10     	; 0x1374 <main+0x1024>
    136a:	07 e1       	ldi	r16, 0x17	; 23
    136c:	10 e0       	ldi	r17, 0x00	; 0
					state = 29;
					counterRef = counter;
				}
				if(state == 29 && counter - counterRef > totallength2*m2WholePlate){
    136e:	0d 31       	cpi	r16, 0x1D	; 29
    1370:	11 05       	cpc	r17, r1
    1372:	b1 f4       	brne	.+44     	; 0x13a0 <main+0x1050>
    1374:	89 8d       	ldd	r24, Y+25	; 0x19
    1376:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1378:	8e 19       	sub	r24, r14
    137a:	9f 09       	sbc	r25, r15
    137c:	20 91 3b 03 	lds	r18, 0x033B
    1380:	30 91 3c 03 	lds	r19, 0x033C
    1384:	f9 01       	movw	r30, r18
    1386:	e8 9d       	mul	r30, r8
    1388:	90 01       	movw	r18, r0
    138a:	e9 9d       	mul	r30, r9
    138c:	30 0d       	add	r19, r0
    138e:	f8 9d       	mul	r31, r8
    1390:	30 0d       	add	r19, r0
    1392:	11 24       	eor	r1, r1
    1394:	28 17       	cp	r18, r24
    1396:	39 07       	cpc	r19, r25
    1398:	34 f0       	brlt	.+12     	; 0x13a6 <main+0x1056>
    139a:	74 c0       	rjmp	.+232    	; 0x1484 <main+0x1134>
    139c:	08 e1       	ldi	r16, 0x18	; 24
    139e:	10 e0       	ldi	r17, 0x00	; 0
					state = 30;
					counterRef30 = counter;
				}
				if(state == 30 && counter - counterRef > totallength2*m2LoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    13a0:	0e 31       	cpi	r16, 0x1E	; 30
    13a2:	11 05       	cpc	r17, r1
    13a4:	c9 f4       	brne	.+50     	; 0x13d8 <main+0x1088>
    13a6:	89 8d       	ldd	r24, Y+25	; 0x19
    13a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13aa:	8e 19       	sub	r24, r14
    13ac:	9f 09       	sbc	r25, r15
    13ae:	20 91 3b 03 	lds	r18, 0x033B
    13b2:	30 91 3c 03 	lds	r19, 0x033C
    13b6:	a9 01       	movw	r20, r18
    13b8:	48 9d       	mul	r20, r8
    13ba:	90 01       	movw	r18, r0
    13bc:	49 9d       	mul	r20, r9
    13be:	30 0d       	add	r19, r0
    13c0:	58 9d       	mul	r21, r8
    13c2:	30 0d       	add	r19, r0
    13c4:	11 24       	eor	r1, r1
    13c6:	28 17       	cp	r18, r24
    13c8:	39 07       	cpc	r19, r25
    13ca:	0c f0       	brlt	.+2      	; 0x13ce <main+0x107e>
    13cc:	6b c0       	rjmp	.+214    	; 0x14a4 <main+0x1154>
    13ce:	e9 8c       	ldd	r14, Y+25	; 0x19
    13d0:	fa 8c       	ldd	r15, Y+26	; 0x1a
    13d2:	05 c0       	rjmp	.+10     	; 0x13de <main+0x108e>
    13d4:	09 e1       	ldi	r16, 0x19	; 25
    13d6:	10 e0       	ldi	r17, 0x00	; 0
					state = 31;
					counterRef = counter;
				}
					if(state == 31 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    13d8:	0f 31       	cpi	r16, 0x1F	; 31
    13da:	11 05       	cpc	r17, r1
    13dc:	69 f4       	brne	.+26     	; 0x13f8 <main+0x10a8>
    13de:	89 8d       	ldd	r24, Y+25	; 0x19
    13e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13e2:	8e 19       	sub	r24, r14
    13e4:	9f 09       	sbc	r25, r15
    13e6:	89 5e       	subi	r24, 0xE9	; 233
    13e8:	93 40       	sbci	r25, 0x03	; 3
    13ea:	0c f4       	brge	.+2      	; 0x13ee <main+0x109e>
    13ec:	8a c0       	rjmp	.+276    	; 0x1502 <main+0x11b2>
    13ee:	e9 8c       	ldd	r14, Y+25	; 0x19
    13f0:	fa 8c       	ldd	r15, Y+26	; 0x1a
    13f2:	05 c0       	rjmp	.+10     	; 0x13fe <main+0x10ae>
    13f4:	0a e1       	ldi	r16, 0x1A	; 26
    13f6:	10 e0       	ldi	r17, 0x00	; 0
					state = 32;
					counterRef = counter;
				}
				if(state == 32 && counter - counterRef > totallength2*m2HomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    13f8:	00 32       	cpi	r16, 0x20	; 32
    13fa:	11 05       	cpc	r17, r1
    13fc:	c9 f4       	brne	.+50     	; 0x1430 <main+0x10e0>
    13fe:	89 8d       	ldd	r24, Y+25	; 0x19
    1400:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1402:	8e 19       	sub	r24, r14
    1404:	9f 09       	sbc	r25, r15
    1406:	20 91 3b 03 	lds	r18, 0x033B
    140a:	30 91 3c 03 	lds	r19, 0x033C
    140e:	f9 01       	movw	r30, r18
    1410:	e8 9d       	mul	r30, r8
    1412:	90 01       	movw	r18, r0
    1414:	e9 9d       	mul	r30, r9
    1416:	30 0d       	add	r19, r0
    1418:	f8 9d       	mul	r31, r8
    141a:	30 0d       	add	r19, r0
    141c:	11 24       	eor	r1, r1
    141e:	28 17       	cp	r18, r24
    1420:	39 07       	cpc	r19, r25
    1422:	0c f0       	brlt	.+2      	; 0x1426 <main+0x10d6>
    1424:	95 c0       	rjmp	.+298    	; 0x1550 <main+0x1200>
    1426:	e9 8c       	ldd	r14, Y+25	; 0x19
    1428:	fa 8c       	ldd	r15, Y+26	; 0x1a
    142a:	05 c0       	rjmp	.+10     	; 0x1436 <main+0x10e6>
    142c:	0b e1       	ldi	r16, 0x1B	; 27
    142e:	10 e0       	ldi	r17, 0x00	; 0
					state = 33;
					counterRef = counter;
				}
				if(state == 33 && counter - counterRef > pWait){
    1430:	01 32       	cpi	r16, 0x21	; 33
    1432:	11 05       	cpc	r17, r1
    1434:	69 f4       	brne	.+26     	; 0x1450 <main+0x1100>
    1436:	89 8d       	ldd	r24, Y+25	; 0x19
    1438:	9a 8d       	ldd	r25, Y+26	; 0x1a
    143a:	8e 19       	sub	r24, r14
    143c:	9f 09       	sbc	r25, r15
    143e:	85 36       	cpi	r24, 0x65	; 101
    1440:	91 05       	cpc	r25, r1
    1442:	0c f4       	brge	.+2      	; 0x1446 <main+0x10f6>
    1444:	99 c0       	rjmp	.+306    	; 0x1578 <main+0x1228>
    1446:	e9 8c       	ldd	r14, Y+25	; 0x19
    1448:	fa 8c       	ldd	r15, Y+26	; 0x1a
    144a:	05 c0       	rjmp	.+10     	; 0x1456 <main+0x1106>
    144c:	0c e1       	ldi	r16, 0x1C	; 28
    144e:	10 e0       	ldi	r17, 0x00	; 0
					state = 34;
					counterRef = counter;
				}
				if(state == 34 && counter - counterRef > totallength1*m1LoadPlate){
    1450:	02 32       	cpi	r16, 0x22	; 34
    1452:	11 05       	cpc	r17, r1
    1454:	c9 f4       	brne	.+50     	; 0x1488 <main+0x1138>
    1456:	89 8d       	ldd	r24, Y+25	; 0x19
    1458:	9a 8d       	ldd	r25, Y+26	; 0x1a
    145a:	8e 19       	sub	r24, r14
    145c:	9f 09       	sbc	r25, r15
    145e:	20 91 39 03 	lds	r18, 0x0339
    1462:	30 91 3a 03 	lds	r19, 0x033A
    1466:	a9 01       	movw	r20, r18
    1468:	48 9d       	mul	r20, r8
    146a:	90 01       	movw	r18, r0
    146c:	49 9d       	mul	r20, r9
    146e:	30 0d       	add	r19, r0
    1470:	58 9d       	mul	r21, r8
    1472:	30 0d       	add	r19, r0
    1474:	11 24       	eor	r1, r1
    1476:	28 17       	cp	r18, r24
    1478:	39 07       	cpc	r19, r25
    147a:	0c f0       	brlt	.+2      	; 0x147e <main+0x112e>
    147c:	8b c0       	rjmp	.+278    	; 0x1594 <main+0x1244>
    147e:	e9 8c       	ldd	r14, Y+25	; 0x19
    1480:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1482:	05 c0       	rjmp	.+10     	; 0x148e <main+0x113e>
    1484:	0d e1       	ldi	r16, 0x1D	; 29
    1486:	10 e0       	ldi	r17, 0x00	; 0
					state = 35;
					counterRef = counter;
				}
				if(state == 35 && counter - counterRef > 10){
    1488:	03 32       	cpi	r16, 0x23	; 35
    148a:	11 05       	cpc	r17, r1
    148c:	71 f4       	brne	.+28     	; 0x14aa <main+0x115a>
    148e:	89 8d       	ldd	r24, Y+25	; 0x19
    1490:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1492:	8e 19       	sub	r24, r14
    1494:	9f 09       	sbc	r25, r15
    1496:	0b 97       	sbiw	r24, 0x0b	; 11
    1498:	14 f4       	brge	.+4      	; 0x149e <main+0x114e>
    149a:	0c 94 e4 18 	jmp	0x31c8	; 0x31c8 <main+0x2e78>
    149e:	0f ef       	ldi	r16, 0xFF	; 255
    14a0:	1f ef       	ldi	r17, 0xFF	; 255
    14a2:	31 c0       	rjmp	.+98     	; 0x1506 <main+0x11b6>
    14a4:	0e e1       	ldi	r16, 0x1E	; 30
    14a6:	10 e0       	ldi	r17, 0x00	; 0
    14a8:	2e c0       	rjmp	.+92     	; 0x1506 <main+0x11b6>
				}


				//state actions
						
				if(state == 0){
    14aa:	01 15       	cp	r16, r1
    14ac:	11 05       	cpc	r17, r1
    14ae:	59 f5       	brne	.+86     	; 0x1506 <main+0x11b6>
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    14b0:	80 91 50 03 	lds	r24, 0x0350
    14b4:	90 91 4c 03 	lds	r25, 0x034C
    14b8:	20 91 4e 03 	lds	r18, 0x034E
    14bc:	82 ff       	sbrs	r24, 2
    14be:	0a c0       	rjmp	.+20     	; 0x14d4 <main+0x1184>
						u_motorByte0.bits_in_motorByte0.m2Dir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    14c0:	9f 7e       	andi	r25, 0xEF	; 239
    14c2:	90 93 4c 03 	sts	0x034C, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    14c6:	27 7f       	andi	r18, 0xF7	; 247
    14c8:	20 93 4e 03 	sts	0x034E, r18
    14cc:	e1 e0       	ldi	r30, 0x01	; 1
    14ce:	ce 2e       	mov	r12, r30
    14d0:	d1 2c       	mov	r13, r1
    14d2:	62 c0       	rjmp	.+196    	; 0x1598 <main+0x1248>
						m2 = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    14d4:	9f 7d       	andi	r25, 0xDF	; 223
    14d6:	90 93 4c 03 	sts	0x034C, r25
						m2 = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    14da:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    14dc:	28 60       	ori	r18, 0x08	; 8
    14de:	20 93 4e 03 	sts	0x034E, r18
						if(print0 == 1){
    14e2:	89 89       	ldd	r24, Y+17	; 0x11
    14e4:	9a 89       	ldd	r25, Y+18	; 0x12
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	11 f0       	breq	.+4      	; 0x14ee <main+0x119e>
    14ea:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <main+0x2e80>
							OrangutanLCD::gotoXY(0,1);
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	61 e0       	ldi	r22, 0x01	; 1
    14f2:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	93 e0       	ldi	r25, 0x03	; 3
    14fa:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
    14fe:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <main+0x2e80>
    1502:	0f e1       	ldi	r16, 0x1F	; 31
    1504:	10 e0       	ldi	r17, 0x00	; 0
							print0 = 0;
						}
					}
				}
				if(state == 1){
    1506:	01 30       	cpi	r16, 0x01	; 1
    1508:	11 05       	cpc	r17, r1
    150a:	21 f5       	brne	.+72     	; 0x1554 <main+0x1204>
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    150c:	20 91 4e 03 	lds	r18, 0x034E
    1510:	32 2f       	mov	r19, r18
    1512:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    1514:	89 8d       	ldd	r24, Y+25	; 0x19
    1516:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1518:	68 ec       	ldi	r22, 0xC8	; 200
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    1520:	84 36       	cpi	r24, 0x64	; 100
    1522:	91 05       	cpc	r25, r1
    1524:	24 f4       	brge	.+8      	; 0x152e <main+0x11de>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1526:	2c 7f       	andi	r18, 0xFC	; 252
    1528:	20 93 4e 03 	sts	0x034E, r18
    152c:	03 c0       	rjmp	.+6      	; 0x1534 <main+0x11e4>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    152e:	32 60       	ori	r19, 0x02	; 2
    1530:	30 93 4e 03 	sts	0x034E, r19
					}
					m1 = 1;
					u_motorByte0.bits_in_motorByte0.m1Dir = 1;  //****** dir1 ******
    1534:	80 91 4c 03 	lds	r24, 0x034C
					u_motorByte0.bits_in_motorByte0.m1Drop = 1;
    1538:	86 60       	ori	r24, 0x06	; 6
    153a:	80 93 4c 03 	sts	0x034C, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    153e:	80 91 4e 03 	lds	r24, 0x034E
    1542:	8b 7f       	andi	r24, 0xFB	; 251
    1544:	80 93 4e 03 	sts	0x034E, r24
    1548:	71 e0       	ldi	r23, 0x01	; 1
    154a:	67 2e       	mov	r6, r23
    154c:	71 2c       	mov	r7, r1
    154e:	24 c0       	rjmp	.+72     	; 0x1598 <main+0x1248>
    1550:	00 e2       	ldi	r16, 0x20	; 32
    1552:	10 e0       	ldi	r17, 0x00	; 0
				}
				if(state == 2){
    1554:	02 30       	cpi	r16, 0x02	; 2
    1556:	11 05       	cpc	r17, r1
    1558:	89 f4       	brne	.+34     	; 0x157c <main+0x122c>
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    155a:	80 91 4e 03 	lds	r24, 0x034E
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    155e:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1560:	86 61       	ori	r24, 0x16	; 22
    1562:	80 93 4e 03 	sts	0x034E, r24
						m1 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 1;
    1566:	80 91 4c 03 	lds	r24, 0x034C
    156a:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.m1Drop = 0;
    156c:	8b 7f       	andi	r24, 0xFB	; 251
    156e:	80 93 4c 03 	sts	0x034C, r24
    1572:	66 24       	eor	r6, r6
    1574:	77 24       	eor	r7, r7
    1576:	3a c0       	rjmp	.+116    	; 0x15ec <main+0x129c>
    1578:	01 e2       	ldi	r16, 0x21	; 33
    157a:	10 e0       	ldi	r17, 0x00	; 0
				}	
				if(state == 3){
    157c:	03 30       	cpi	r16, 0x03	; 3
    157e:	11 05       	cpc	r17, r1
    1580:	59 f4       	brne	.+22     	; 0x1598 <main+0x1248>
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ****** dir2 *******
    1582:	80 91 4c 03 	lds	r24, 0x034C
    1586:	80 61       	ori	r24, 0x10	; 16
    1588:	80 93 4c 03 	sts	0x034C, r24
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	c6 2e       	mov	r12, r22
    1590:	d1 2c       	mov	r13, r1
    1592:	3c c0       	rjmp	.+120    	; 0x160c <main+0x12bc>
    1594:	02 e2       	ldi	r16, 0x22	; 34
    1596:	10 e0       	ldi	r17, 0x00	; 0
					m2 = 1;
				}
				if(state == 4){
    1598:	04 30       	cpi	r16, 0x04	; 4
    159a:	11 05       	cpc	r17, r1
    159c:	69 f4       	brne	.+26     	; 0x15b8 <main+0x1268>
						m2 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    159e:	80 91 4c 03 	lds	r24, 0x034C
    15a2:	8f 7d       	andi	r24, 0xDF	; 223
    15a4:	80 93 4c 03 	sts	0x034C, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    15a8:	80 91 4e 03 	lds	r24, 0x034E
    15ac:	88 60       	ori	r24, 0x08	; 8
    15ae:	80 93 4e 03 	sts	0x034E, r24
    15b2:	cc 24       	eor	r12, r12
    15b4:	dd 24       	eor	r13, r13
    15b6:	37 c0       	rjmp	.+110    	; 0x1626 <main+0x12d6>
				}
				if(state == 5){
    15b8:	05 30       	cpi	r16, 0x05	; 5
    15ba:	11 05       	cpc	r17, r1
    15bc:	59 f4       	brne	.+22     	; 0x15d4 <main+0x1284>
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    15be:	80 91 4e 03 	lds	r24, 0x034E
    15c2:	8f 7e       	andi	r24, 0xEF	; 239
    15c4:	80 93 4e 03 	sts	0x034E, r24
					u_motorByte0.bits_in_motorByte0.m2Drop = 1;
    15c8:	80 91 4c 03 	lds	r24, 0x034C
    15cc:	80 62       	ori	r24, 0x20	; 32
    15ce:	80 93 4c 03 	sts	0x034C, r24
    15d2:	35 c0       	rjmp	.+106    	; 0x163e <main+0x12ee>
				}
				//*********************************************
				if(state == 6){
    15d4:	06 30       	cpi	r16, 0x06	; 6
    15d6:	11 05       	cpc	r17, r1
    15d8:	49 f4       	brne	.+18     	; 0x15ec <main+0x129c>
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    15da:	80 91 4c 03 	lds	r24, 0x034C
    15de:	80 61       	ori	r24, 0x10	; 16
    15e0:	80 93 4c 03 	sts	0x034C, r24
    15e4:	51 e0       	ldi	r21, 0x01	; 1
    15e6:	c5 2e       	mov	r12, r21
    15e8:	d1 2c       	mov	r13, r1
    15ea:	37 c0       	rjmp	.+110    	; 0x165a <main+0x130a>
					m2 = 1;
				}
				if(state == 7){
    15ec:	07 30       	cpi	r16, 0x07	; 7
    15ee:	11 05       	cpc	r17, r1
    15f0:	69 f4       	brne	.+26     	; 0x160c <main+0x12bc>
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m3Drop = 1;
    15f2:	80 91 4d 03 	lds	r24, 0x034D
    15f6:	81 60       	ori	r24, 0x01	; 1
    15f8:	80 93 4d 03 	sts	0x034D, r24
					u_motorByte0.bits_in_motorByte0.m3Dir = 0;  // ******* dir3 *******
    15fc:	80 91 4c 03 	lds	r24, 0x034C
    1600:	8f 77       	andi	r24, 0x7F	; 127
    1602:	80 93 4c 03 	sts	0x034C, r24
    1606:	cc 24       	eor	r12, r12
    1608:	dd 24       	eor	r13, r13
    160a:	33 c0       	rjmp	.+102    	; 0x1672 <main+0x1322>
						OrangutanLCD::clear();
						OrangutanLCD::print("Clean 1");
						print6 = 0;
					}*/
				}
				if(state == 8){
    160c:	08 30       	cpi	r16, 0x08	; 8
    160e:	11 05       	cpc	r17, r1
    1610:	51 f4       	brne	.+20     	; 0x1626 <main+0x12d6>
					m3 = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1612:	80 91 4e 03 	lds	r24, 0x034E
    1616:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    1618:	8f 7d       	andi	r24, 0xDF	; 223
    161a:	80 93 4e 03 	sts	0x034E, r24
    161e:	41 e0       	ldi	r20, 0x01	; 1
    1620:	24 2e       	mov	r2, r20
    1622:	31 2c       	mov	r3, r1
    1624:	3a c0       	rjmp	.+116    	; 0x169a <main+0x134a>
				}
				if(state == 9){
    1626:	09 30       	cpi	r16, 0x09	; 9
    1628:	11 05       	cpc	r17, r1
    162a:	49 f4       	brne	.+18     	; 0x163e <main+0x12ee>
					m2 = 1;
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;  // ******* dir2 *******
    162c:	80 91 4c 03 	lds	r24, 0x034C
    1630:	8f 7e       	andi	r24, 0xEF	; 239
    1632:	80 93 4c 03 	sts	0x034C, r24
    1636:	31 e0       	ldi	r19, 0x01	; 1
    1638:	c3 2e       	mov	r12, r19
    163a:	d1 2c       	mov	r13, r1
    163c:	31 c0       	rjmp	.+98     	; 0x16a0 <main+0x1350>
				}
				if(state == 10){
    163e:	0a 30       	cpi	r16, 0x0A	; 10
    1640:	11 05       	cpc	r17, r1
    1642:	59 f4       	brne	.+22     	; 0x165a <main+0x130a>
					m2 = 0;
					m3 = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1644:	80 91 4e 03 	lds	r24, 0x034E
    1648:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    164a:	80 62       	ori	r24, 0x20	; 32
    164c:	80 93 4e 03 	sts	0x034E, r24
    1650:	cc 24       	eor	r12, r12
    1652:	dd 24       	eor	r13, r13
    1654:	22 24       	eor	r2, r2
    1656:	33 24       	eor	r3, r3
    1658:	31 c0       	rjmp	.+98     	; 0x16bc <main+0x136c>
				}
				if(state == 11){
    165a:	0b 30       	cpi	r16, 0x0B	; 11
    165c:	11 05       	cpc	r17, r1
    165e:	49 f4       	brne	.+18     	; 0x1672 <main+0x1322>
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    1660:	80 91 4c 03 	lds	r24, 0x034C
    1664:	80 61       	ori	r24, 0x10	; 16
    1666:	80 93 4c 03 	sts	0x034C, r24
    166a:	21 e0       	ldi	r18, 0x01	; 1
    166c:	c2 2e       	mov	r12, r18
    166e:	d1 2c       	mov	r13, r1
    1670:	36 c0       	rjmp	.+108    	; 0x16de <main+0x138e>
					m2 = 1;
				}
				if(state == 12){
    1672:	0c 30       	cpi	r16, 0x0C	; 12
    1674:	11 05       	cpc	r17, r1
    1676:	89 f4       	brne	.+34     	; 0x169a <main+0x134a>
					m2 = 0;
					u_motorByte0.bits_in_motorByte0.m3Dir = 0;  // ******* dir3 *******
    1678:	80 91 4c 03 	lds	r24, 0x034C
    167c:	8f 77       	andi	r24, 0x7F	; 127
    167e:	80 93 4c 03 	sts	0x034C, r24
					m3 = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1682:	80 91 4e 03 	lds	r24, 0x034E
    1686:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    1688:	8f 7d       	andi	r24, 0xDF	; 223
    168a:	80 93 4e 03 	sts	0x034E, r24
    168e:	cc 24       	eor	r12, r12
    1690:	dd 24       	eor	r13, r13
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	29 2e       	mov	r2, r25
    1696:	31 2c       	mov	r3, r1
    1698:	2d c0       	rjmp	.+90     	; 0x16f4 <main+0x13a4>
				}
				if(state == 13){
    169a:	0d 30       	cpi	r16, 0x0D	; 13
    169c:	11 05       	cpc	r17, r1
    169e:	b1 f1       	breq	.+108    	; 0x170c <main+0x13bc>
					m2 = 1;
				}
				if(state == 14){
    16a0:	0e 30       	cpi	r16, 0x0E	; 14
    16a2:	11 05       	cpc	r17, r1
    16a4:	59 f4       	brne	.+22     	; 0x16bc <main+0x136c>
					m3 = 0;
					m2 = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    16a6:	80 91 4e 03 	lds	r24, 0x034E
    16aa:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    16ac:	80 62       	ori	r24, 0x20	; 32
    16ae:	80 93 4e 03 	sts	0x034E, r24
    16b2:	cc 24       	eor	r12, r12
    16b4:	dd 24       	eor	r13, r13
    16b6:	22 24       	eor	r2, r2
    16b8:	33 24       	eor	r3, r3
    16ba:	34 c0       	rjmp	.+104    	; 0x1724 <main+0x13d4>
				}
				
				//*************************************************
				if(state == 23){
    16bc:	07 31       	cpi	r16, 0x17	; 23
    16be:	11 05       	cpc	r17, r1
    16c0:	71 f4       	brne	.+28     	; 0x16de <main+0x138e>
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    16c2:	80 91 4c 03 	lds	r24, 0x034C
    16c6:	80 61       	ori	r24, 0x10	; 16
    16c8:	80 93 4c 03 	sts	0x034C, r24
					m2 = 1;
					u_motorByte1.bits_in_motorByte1.m3Drop = 0;
    16cc:	80 91 4d 03 	lds	r24, 0x034D
    16d0:	8e 7f       	andi	r24, 0xFE	; 254
    16d2:	80 93 4d 03 	sts	0x034D, r24
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	c8 2e       	mov	r12, r24
    16da:	d1 2c       	mov	r13, r1
    16dc:	33 c0       	rjmp	.+102    	; 0x1744 <main+0x13f4>
				}
				if(state == 24){
    16de:	08 31       	cpi	r16, 0x18	; 24
    16e0:	11 05       	cpc	r17, r1
    16e2:	41 f4       	brne	.+16     	; 0x16f4 <main+0x13a4>
					m2 = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    16e4:	80 91 4f 03 	lds	r24, 0x034F
    16e8:	87 7f       	andi	r24, 0xF7	; 247
    16ea:	80 93 4f 03 	sts	0x034F, r24
    16ee:	cc 24       	eor	r12, r12
    16f0:	dd 24       	eor	r13, r13
    16f2:	31 c0       	rjmp	.+98     	; 0x1756 <main+0x1406>
						OrangutanLCD::clear();
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
				}
				if(state == 25){
    16f4:	09 31       	cpi	r16, 0x19	; 25
    16f6:	11 05       	cpc	r17, r1
    16f8:	61 f4       	brne	.+24     	; 0x1712 <main+0x13c2>
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;  // ******* dir2 *******
    16fa:	80 91 4c 03 	lds	r24, 0x034C
    16fe:	8f 7e       	andi	r24, 0xEF	; 239
    1700:	80 93 4c 03 	sts	0x034C, r24
    1704:	b1 e0       	ldi	r27, 0x01	; 1
    1706:	cb 2e       	mov	r12, r27
    1708:	d1 2c       	mov	r13, r1
    170a:	28 c0       	rjmp	.+80     	; 0x175c <main+0x140c>
    170c:	a1 e0       	ldi	r26, 0x01	; 1
    170e:	ca 2e       	mov	r12, r26
    1710:	d1 2c       	mov	r13, r1
					m2 = 1;
				}
				if(state == 26){
    1712:	0a 31       	cpi	r16, 0x1A	; 26
    1714:	11 05       	cpc	r17, r1
    1716:	31 f4       	brne	.+12     	; 0x1724 <main+0x13d4>
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1718:	80 91 4f 03 	lds	r24, 0x034F
    171c:	88 60       	ori	r24, 0x08	; 8
    171e:	80 93 4f 03 	sts	0x034F, r24
    1722:	2d c0       	rjmp	.+90     	; 0x177e <main+0x142e>
				}
				if(state == 27){
    1724:	0b 31       	cpi	r16, 0x1B	; 27
    1726:	11 05       	cpc	r17, r1
    1728:	69 f4       	brne	.+26     	; 0x1744 <main+0x13f4>
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m5Drop = 1;
    172a:	80 91 4d 03 	lds	r24, 0x034D
    172e:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.m5Dir = 0;
    1730:	8f 7d       	andi	r24, 0xDF	; 223
    1732:	80 93 4d 03 	sts	0x034D, r24
    1736:	cc 24       	eor	r12, r12
    1738:	dd 24       	eor	r13, r13
    173a:	e1 e0       	ldi	r30, 0x01	; 1
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	fe 83       	std	Y+6, r31	; 0x06
    1740:	ed 83       	std	Y+5, r30	; 0x05
    1742:	25 c0       	rjmp	.+74     	; 0x178e <main+0x143e>
					m5 = 1;
				}
				if(state == 28){
    1744:	0c 31       	cpi	r16, 0x1C	; 28
    1746:	11 05       	cpc	r17, r1
    1748:	31 f4       	brne	.+12     	; 0x1756 <main+0x1406>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    174a:	80 91 4f 03 	lds	r24, 0x034F
    174e:	8d 7f       	andi	r24, 0xFD	; 253
    1750:	80 93 4f 03 	sts	0x034F, r24
    1754:	28 c0       	rjmp	.+80     	; 0x17a6 <main+0x1456>
				}
				if(state == 29){
    1756:	0d 31       	cpi	r16, 0x1D	; 29
    1758:	11 05       	cpc	r17, r1
    175a:	b9 f1       	breq	.+110    	; 0x17ca <main+0x147a>
					m2 = 1;
				}
				if(state == 30){
    175c:	0e 31       	cpi	r16, 0x1E	; 30
    175e:	11 05       	cpc	r17, r1
    1760:	71 f4       	brne	.+28     	; 0x177e <main+0x142e>
					m5 = 0;
						u_motorByte1.bits_in_motorByte1.m5Drop = 0;
    1762:	80 91 4d 03 	lds	r24, 0x034D
    1766:	8f 7b       	andi	r24, 0xBF	; 191
    1768:	80 93 4d 03 	sts	0x034D, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    176c:	80 91 4f 03 	lds	r24, 0x034F
    1770:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1772:	8b 7f       	andi	r24, 0xFB	; 251
    1774:	80 93 4f 03 	sts	0x034F, r24
    1778:	1e 82       	std	Y+6, r1	; 0x06
    177a:	1d 82       	std	Y+5, r1	; 0x05
    177c:	35 c0       	rjmp	.+106    	; 0x17e8 <main+0x1498>
				}
				if(state == 31){
    177e:	0f 31       	cpi	r16, 0x1F	; 31
    1780:	11 05       	cpc	r17, r1
    1782:	29 f4       	brne	.+10     	; 0x178e <main+0x143e>
					m2 = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1784:	80 91 4e 03 	lds	r24, 0x034E
    1788:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    178a:	80 61       	ori	r24, 0x10	; 16
    178c:	19 c0       	rjmp	.+50     	; 0x17c0 <main+0x1470>
				}
				if(state == 32){
    178e:	00 32       	cpi	r16, 0x20	; 32
    1790:	11 05       	cpc	r17, r1
    1792:	49 f4       	brne	.+18     	; 0x17a6 <main+0x1456>
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;
    1794:	80 91 4c 03 	lds	r24, 0x034C
    1798:	8f 7e       	andi	r24, 0xEF	; 239
    179a:	80 93 4c 03 	sts	0x034C, r24
    179e:	f1 e0       	ldi	r31, 0x01	; 1
    17a0:	cf 2e       	mov	r12, r31
    17a2:	d1 2c       	mov	r13, r1
    17a4:	3b c0       	rjmp	.+118    	; 0x181c <main+0x14cc>
					m2 = 1;
				}
				if(state == 33){
    17a6:	01 32       	cpi	r16, 0x21	; 33
    17a8:	11 05       	cpc	r17, r1
    17aa:	91 f4       	brne	.+36     	; 0x17d0 <main+0x1480>
					m2 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    17ac:	80 91 4c 03 	lds	r24, 0x034C
    17b0:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.m1Drop = 1;
    17b2:	84 60       	ori	r24, 0x04	; 4
    17b4:	80 93 4c 03 	sts	0x034C, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    17b8:	80 91 4e 03 	lds	r24, 0x034E
    17bc:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    17be:	8f 7e       	andi	r24, 0xEF	; 239
    17c0:	80 93 4e 03 	sts	0x034E, r24
    17c4:	cc 24       	eor	r12, r12
    17c6:	dd 24       	eor	r13, r13
    17c8:	29 c0       	rjmp	.+82     	; 0x181c <main+0x14cc>
    17ca:	e1 e0       	ldi	r30, 0x01	; 1
    17cc:	ce 2e       	mov	r12, r30
    17ce:	d1 2c       	mov	r13, r1
				}
				if(state == 34){
    17d0:	02 32       	cpi	r16, 0x22	; 34
    17d2:	11 05       	cpc	r17, r1
    17d4:	49 f4       	brne	.+18     	; 0x17e8 <main+0x1498>
					u_motorByte0.bits_in_motorByte0.m1Dir = 0;
    17d6:	80 91 4c 03 	lds	r24, 0x034C
    17da:	8d 7f       	andi	r24, 0xFD	; 253
    17dc:	80 93 4c 03 	sts	0x034C, r24
    17e0:	71 e0       	ldi	r23, 0x01	; 1
    17e2:	67 2e       	mov	r6, r23
    17e4:	71 2c       	mov	r7, r1
    17e6:	1a c0       	rjmp	.+52     	; 0x181c <main+0x14cc>
					m1 = 1;
					}
				if(state == 35){
    17e8:	03 32       	cpi	r16, 0x23	; 35
    17ea:	11 05       	cpc	r17, r1
    17ec:	b9 f4       	brne	.+46     	; 0x181c <main+0x14cc>
					m1 = 0;
					u_motorByte0.bits_in_motorByte0.m1Drop = 0;
    17ee:	80 91 4c 03 	lds	r24, 0x034C
    17f2:	8b 7f       	andi	r24, 0xFB	; 251
    17f4:	80 93 4c 03 	sts	0x034C, r24
					if(print35 == 1){
    17f8:	2f 85       	ldd	r18, Y+15	; 0x0f
    17fa:	38 89       	ldd	r19, Y+16	; 0x10
    17fc:	21 30       	cpi	r18, 0x01	; 1
    17fe:	31 05       	cpc	r19, r1
    1800:	19 f0       	breq	.+6      	; 0x1808 <main+0x14b8>
    1802:	66 24       	eor	r6, r6
    1804:	77 24       	eor	r7, r7
    1806:	0a c0       	rjmp	.+20     	; 0x181c <main+0x14cc>
						OrangutanLCD::clear();
    1808:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    180c:	8e e0       	ldi	r24, 0x0E	; 14
    180e:	93 e0       	ldi	r25, 0x03	; 3
    1810:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
    1814:	66 24       	eor	r6, r6
    1816:	77 24       	eor	r7, r7
    1818:	18 8a       	std	Y+16, r1	; 0x10
    181a:	1f 86       	std	Y+15, r1	; 0x0f





				if( ((counter - counterRef) % (totallength1) ) < (steplength1) && m1)  //check if it is in the right period of the loop to send high
    181c:	e9 8d       	ldd	r30, Y+25	; 0x19
    181e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1820:	ee 19       	sub	r30, r14
    1822:	ff 09       	sbc	r31, r15
    1824:	60 91 39 03 	lds	r22, 0x0339
    1828:	70 91 3a 03 	lds	r23, 0x033A
    182c:	cf 01       	movw	r24, r30
    182e:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    1832:	20 91 2f 03 	lds	r18, 0x032F
    1836:	30 91 30 03 	lds	r19, 0x0330
    183a:	82 17       	cp	r24, r18
    183c:	93 07       	cpc	r25, r19
    183e:	3c f4       	brge	.+14     	; 0x184e <main+0x14fe>
    1840:	61 14       	cp	r6, r1
    1842:	71 04       	cpc	r7, r1
    1844:	21 f0       	breq	.+8      	; 0x184e <main+0x14fe>
				{
					u_motorByte0.bits_in_motorByte0.m1Step = 1; // set bit 0
    1846:	80 91 4c 03 	lds	r24, 0x034C
    184a:	81 60       	ori	r24, 0x01	; 1
    184c:	03 c0       	rjmp	.+6      	; 0x1854 <main+0x1504>
				}
				else
				{
					u_motorByte0.bits_in_motorByte0.m1Step = 0; // set bit 0
    184e:	80 91 4c 03 	lds	r24, 0x034C
    1852:	8e 7f       	andi	r24, 0xFE	; 254
    1854:	80 93 4c 03 	sts	0x034C, r24
				}

				if( ((counter - counterRef) % (totallength2) ) < (steplength2) && m2)
    1858:	60 91 3b 03 	lds	r22, 0x033B
    185c:	70 91 3c 03 	lds	r23, 0x033C
    1860:	cf 01       	movw	r24, r30
    1862:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    1866:	20 91 31 03 	lds	r18, 0x0331
    186a:	30 91 32 03 	lds	r19, 0x0332
    186e:	82 17       	cp	r24, r18
    1870:	93 07       	cpc	r25, r19
    1872:	3c f4       	brge	.+14     	; 0x1882 <main+0x1532>
    1874:	c1 14       	cp	r12, r1
    1876:	d1 04       	cpc	r13, r1
    1878:	21 f0       	breq	.+8      	; 0x1882 <main+0x1532>
				{
					u_motorByte0.bits_in_motorByte0.m2Step = 1; // set bit 1
    187a:	80 91 4c 03 	lds	r24, 0x034C
    187e:	88 60       	ori	r24, 0x08	; 8
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <main+0x1538>
				}
				else
				{
					u_motorByte0.bits_in_motorByte0.m2Step = 0; // set bit 1
    1882:	80 91 4c 03 	lds	r24, 0x034C
    1886:	87 7f       	andi	r24, 0xF7	; 247
    1888:	80 93 4c 03 	sts	0x034C, r24
				}

				if( ((counter - counterRef) % (totallength3) ) < (steplength3) && m3)
    188c:	60 91 3d 03 	lds	r22, 0x033D
    1890:	70 91 3e 03 	lds	r23, 0x033E
    1894:	cf 01       	movw	r24, r30
    1896:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    189a:	20 91 33 03 	lds	r18, 0x0333
    189e:	30 91 34 03 	lds	r19, 0x0334
    18a2:	82 17       	cp	r24, r18
    18a4:	93 07       	cpc	r25, r19
    18a6:	3c f4       	brge	.+14     	; 0x18b6 <main+0x1566>
    18a8:	21 14       	cp	r2, r1
    18aa:	31 04       	cpc	r3, r1
    18ac:	21 f0       	breq	.+8      	; 0x18b6 <main+0x1566>
				{
					u_motorByte0.bits_in_motorByte0.m3Step = 1; // set bit 1
    18ae:	80 91 4c 03 	lds	r24, 0x034C
    18b2:	80 64       	ori	r24, 0x40	; 64
    18b4:	03 c0       	rjmp	.+6      	; 0x18bc <main+0x156c>
				}
				else
				{
					u_motorByte0.bits_in_motorByte0.m3Step = 0; // set bit 1
    18b6:	80 91 4c 03 	lds	r24, 0x034C
    18ba:	8f 7b       	andi	r24, 0xBF	; 191
    18bc:	80 93 4c 03 	sts	0x034C, r24
				{
					u_motorByte1.bits_in_motorByte1.m4Step = 1; // set bit 1
				}
				else
				{
					u_motorByte1.bits_in_motorByte1.m4Step = 0; // set bit 1
    18c0:	40 91 4d 03 	lds	r20, 0x034D
    18c4:	4d 7f       	andi	r20, 0xFD	; 253
    18c6:	40 93 4d 03 	sts	0x034D, r20
				}

				if( ((counter - counterRefFive) % (totallength5) ) < (steplength5) && m5)
    18ca:	60 91 41 03 	lds	r22, 0x0341
    18ce:	70 91 42 03 	lds	r23, 0x0342
    18d2:	89 8d       	ldd	r24, Y+25	; 0x19
    18d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18d6:	eb 89       	ldd	r30, Y+19	; 0x13
    18d8:	fc 89       	ldd	r31, Y+20	; 0x14
    18da:	8e 1b       	sub	r24, r30
    18dc:	9f 0b       	sbc	r25, r31
    18de:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    18e2:	20 91 37 03 	lds	r18, 0x0337
    18e6:	30 91 38 03 	lds	r19, 0x0338
    18ea:	82 17       	cp	r24, r18
    18ec:	93 07       	cpc	r25, r19
    18ee:	44 f4       	brge	.+16     	; 0x1900 <main+0x15b0>
    18f0:	2d 81       	ldd	r18, Y+5	; 0x05
    18f2:	3e 81       	ldd	r19, Y+6	; 0x06
    18f4:	23 2b       	or	r18, r19
    18f6:	21 f0       	breq	.+8      	; 0x1900 <main+0x15b0>
				{
					u_motorByte1.bits_in_motorByte1.m5Step = 1; // set bit 1
    18f8:	40 61       	ori	r20, 0x10	; 16
    18fa:	40 93 4d 03 	sts	0x034D, r20
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <main+0x15ba>
				}
				else
				{
					u_motorByte1.bits_in_motorByte1.m5Step = 0; // set bit 1
    1900:	80 91 4d 03 	lds	r24, 0x034D
    1904:	8f 7e       	andi	r24, 0xEF	; 239
    1906:	80 93 4d 03 	sts	0x034D, r24
				}

				i2c_start(I2C1+I2C_WRITE);
    190a:	80 e4       	ldi	r24, 0x40	; 64
    190c:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
				i2c_write(0x2);									// write command byte
    1910:	82 e0       	ldi	r24, 0x02	; 2
    1912:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
				i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
    1916:	80 91 4c 03 	lds	r24, 0x034C
    191a:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
       	 		i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
    191e:	80 91 4d 03 	lds	r24, 0x034D
    1922:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
       		 	i2c_stop();                            // set stop conditon = release bus
    1926:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8i2c_stopv>

				i2c_start(I2C2+I2C_WRITE);
    192a:	82 e4       	ldi	r24, 0x42	; 66
    192c:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
				i2c_write(0x2);
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
				i2c_write(u_outputByte0.outputByte0);
    1936:	80 91 4e 03 	lds	r24, 0x034E
    193a:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
				i2c_write(u_outputByte1.outputByte1);
    193e:	80 91 4f 03 	lds	r24, 0x034F
    1942:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>

				counter ++;
    1946:	49 8d       	ldd	r20, Y+25	; 0x19
    1948:	5a 8d       	ldd	r21, Y+26	; 0x1a
    194a:	4f 5f       	subi	r20, 0xFF	; 255
    194c:	5f 4f       	sbci	r21, 0xFF	; 255
    194e:	5a 8f       	std	Y+26, r21	; 0x1a
    1950:	49 8f       	std	Y+25, r20	; 0x19
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>
		u_motorByte1.bits_in_motorByte1.m5Drop = 1;*/

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("FIRST B");
			while(state != -1)
    195a:	5f ef       	ldi	r21, 0xFF	; 255
    195c:	0f 3f       	cpi	r16, 0xFF	; 255
    195e:	15 07       	cpc	r17, r21
    1960:	09 f0       	breq	.+2      	; 0x1964 <main+0x1614>
    1962:	ea ca       	rjmp	.-2604   	; 0xf38 <main+0xbe8>
				delay_ms(1);
   		 	}
		}


		if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
    196a:	88 23       	and	r24, r24
    196c:	11 f4       	brne	.+4      	; 0x1972 <main+0x1622>
    196e:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <main+0x2e8c>
    1972:	82 e0       	ldi	r24, 0x02	; 2
    1974:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
    1978:	88 23       	and	r24, r24
    197a:	11 f0       	breq	.+4      	; 0x1980 <main+0x1630>
    197c:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <main+0x2e8c>
			OrangutanLCD::gotoXY(7,0);
    1980:	87 e0       	ldi	r24, 0x07	; 7
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("SECOND B");
    1988:	8b e1       	ldi	r24, 0x1B	; 27
    198a:	93 e0       	ldi	r25, 0x03	; 3
    198c:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
    1990:	44 24       	eor	r4, r4
    1992:	55 24       	eor	r5, r5
				}
				if(state == 33 && counter - counterRef > pWait){
					state = 34;
					counterRef = counter;
				}
				if(state == 34 && counter - counterRef > totallength1*m1LoadPlate){
    1994:	60 ed       	ldi	r22, 0xD0	; 208
    1996:	86 2e       	mov	r8, r22
    1998:	67 e0       	ldi	r22, 0x07	; 7
    199a:	96 2e       	mov	r9, r22
    199c:	39 c5       	rjmp	.+2674   	; 0x2410 <main+0x20c0>
		if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("SECOND B");
			while(state != -1)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    199e:	84 e4       	ldi	r24, 0x44	; 68
    19a0:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    19aa:	85 e4       	ldi	r24, 0x45	; 69
    19ac:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    19b0:	0e 94 9a 19 	call	0x3334	; 0x3334 <_Z11i2c_readAckv>
    19b4:	80 93 50 03 	sts	0x0350, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    19b8:	0e 94 a4 19 	call	0x3348	; 0x3348 <_Z11i2c_readNakv>
    19bc:	80 93 51 03 	sts	0x0351, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    19c0:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8i2c_stopv>
				if(state != 0){
    19c4:	01 15       	cp	r16, r1
    19c6:	11 05       	cpc	r17, r1
    19c8:	79 f0       	breq	.+30     	; 0x19e8 <main+0x1698>
					OrangutanLCD::gotoXY(0,1);
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    19d2:	89 ef       	ldi	r24, 0xF9	; 249
    19d4:	92 e0       	ldi	r25, 0x02	; 2
    19d6:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
    19da:	b8 01       	movw	r22, r16
    19dc:	88 27       	eor	r24, r24
    19de:	77 fd       	sbrc	r23, 7
    19e0:	80 95       	com	r24
    19e2:	98 2f       	mov	r25, r24
    19e4:	0e 94 56 1c 	call	0x38ac	; 0x38ac <_ZN12OrangutanLCD5printEl>
					OrangutanLCD::print(state);
				}

				if(stateButton == 0 && OrangutanDigital::isInputHigh(IO_D0)){
    19e8:	a1 14       	cp	r10, r1
    19ea:	b1 04       	cpc	r11, r1
    19ec:	11 f0       	breq	.+4      	; 0x19f2 <main+0x16a2>
    19ee:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <main+0x2e92>
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
    19f8:	88 23       	and	r24, r24
    19fa:	09 f4       	brne	.+2      	; 0x19fe <main+0x16ae>
    19fc:	3f c0       	rjmp	.+126    	; 0x1a7c <main+0x172c>
    19fe:	89 8d       	ldd	r24, Y+25	; 0x19
    1a00:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a02:	9a 87       	std	Y+10, r25	; 0x0a
    1a04:	89 87       	std	Y+9, r24	; 0x09
					counterRefPush = counter;
					stateButton = 1;
				}
				if(stateButton == 1){
					if(counter - counterRefPush > 15){
    1a06:	89 8d       	ldd	r24, Y+25	; 0x19
    1a08:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a0a:	e9 85       	ldd	r30, Y+9	; 0x09
    1a0c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a0e:	8e 1b       	sub	r24, r30
    1a10:	9f 0b       	sbc	r25, r31
    1a12:	40 97       	sbiw	r24, 0x10	; 16
    1a14:	64 f0       	brlt	.+24     	; 0x1a2e <main+0x16de>
						if(!OrangutanDigital::isInputHigh(IO_D0)){
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
    1a1c:	88 23       	and	r24, r24
    1a1e:	11 f0       	breq	.+4      	; 0x1a24 <main+0x16d4>
    1a20:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <main+0x2ea2>
    1a24:	29 8d       	ldd	r18, Y+25	; 0x19
    1a26:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1a28:	38 87       	std	Y+8, r19	; 0x08
    1a2a:	2f 83       	std	Y+7, r18	; 0x07
    1a2c:	0c c0       	rjmp	.+24     	; 0x1a46 <main+0x16f6>
							counterRefRel = counter;
							stateButton = 2;
						}
					}
					else if(!OrangutanDigital::isInputHigh(IO_D0)){
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
    1a34:	88 23       	and	r24, r24
    1a36:	11 f0       	breq	.+4      	; 0x1a3c <main+0x16ec>
    1a38:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <main+0x2ea2>
    1a3c:	19 c0       	rjmp	.+50     	; 0x1a70 <main+0x1720>
						stateButton = 0;
					}
				}
				if(stateButton == 2){
    1a3e:	32 e0       	ldi	r19, 0x02	; 2
    1a40:	a3 16       	cp	r10, r19
    1a42:	b1 04       	cpc	r11, r1
    1a44:	d9 f4       	brne	.+54     	; 0x1a7c <main+0x172c>
					if(OrangutanDigital::isInputHigh(IO_D0)){
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
    1a4c:	88 23       	and	r24, r24
    1a4e:	31 f0       	breq	.+12     	; 0x1a5c <main+0x170c>
    1a50:	49 8d       	ldd	r20, Y+25	; 0x19
    1a52:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1a54:	5a 87       	std	Y+10, r21	; 0x0a
    1a56:	49 87       	std	Y+9, r20	; 0x09
    1a58:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <main+0x2ea2>
						stateButton = 1;
						counterRefPush = counter;
					}
					else if(counter - counterRefRel > 15){
    1a5c:	89 8d       	ldd	r24, Y+25	; 0x19
    1a5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a60:	ef 81       	ldd	r30, Y+7	; 0x07
    1a62:	f8 85       	ldd	r31, Y+8	; 0x08
    1a64:	8e 1b       	sub	r24, r30
    1a66:	9f 0b       	sbc	r25, r31
    1a68:	40 97       	sbiw	r24, 0x10	; 16
    1a6a:	2c f0       	brlt	.+10     	; 0x1a76 <main+0x1726>
    1a6c:	1a 82       	std	Y+2, r1	; 0x02
    1a6e:	19 82       	std	Y+1, r1	; 0x01
    1a70:	aa 24       	eor	r10, r10
    1a72:	bb 24       	eor	r11, r11
    1a74:	03 c0       	rjmp	.+6      	; 0x1a7c <main+0x172c>
    1a76:	52 e0       	ldi	r21, 0x02	; 2
    1a78:	a5 2e       	mov	r10, r21
    1a7a:	b1 2c       	mov	r11, r1
					}
				}

				//state conversions
	
				if(state == 0 && button == 0){
    1a7c:	01 15       	cp	r16, r1
    1a7e:	11 05       	cpc	r17, r1
    1a80:	61 f4       	brne	.+24     	; 0x1a9a <main+0x174a>
    1a82:	29 81       	ldd	r18, Y+1	; 0x01
    1a84:	3a 81       	ldd	r19, Y+2	; 0x02
    1a86:	23 2b       	or	r18, r19
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <main+0x173c>
    1a8a:	66 c0       	rjmp	.+204    	; 0x1b58 <main+0x1808>
    1a8c:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a8e:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a90:	41 e0       	ldi	r20, 0x01	; 1
    1a92:	50 e0       	ldi	r21, 0x00	; 0
    1a94:	5a 83       	std	Y+2, r21	; 0x02
    1a96:	49 83       	std	Y+1, r20	; 0x01
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <main+0x1750>
					button = 1;
					state = 1;
					counterRef = counter;
				}
				if(state == 1 && counter - counterRef > totallength1*m1LoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    1a9a:	01 30       	cpi	r16, 0x01	; 1
    1a9c:	11 05       	cpc	r17, r1
    1a9e:	b9 f4       	brne	.+46     	; 0x1ace <main+0x177e>
    1aa0:	89 8d       	ldd	r24, Y+25	; 0x19
    1aa2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1aa4:	8e 19       	sub	r24, r14
    1aa6:	9f 09       	sbc	r25, r15
    1aa8:	20 91 39 03 	lds	r18, 0x0339
    1aac:	30 91 3a 03 	lds	r19, 0x033A
    1ab0:	f9 01       	movw	r30, r18
    1ab2:	e8 9d       	mul	r30, r8
    1ab4:	90 01       	movw	r18, r0
    1ab6:	e9 9d       	mul	r30, r9
    1ab8:	30 0d       	add	r19, r0
    1aba:	f8 9d       	mul	r31, r8
    1abc:	30 0d       	add	r19, r0
    1abe:	11 24       	eor	r1, r1
    1ac0:	28 17       	cp	r18, r24
    1ac2:	39 07       	cpc	r19, r25
    1ac4:	0c f0       	brlt	.+2      	; 0x1ac8 <main+0x1778>
    1ac6:	62 c0       	rjmp	.+196    	; 0x1b8c <main+0x183c>
    1ac8:	e9 8c       	ldd	r14, Y+25	; 0x19
    1aca:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1acc:	03 c0       	rjmp	.+6      	; 0x1ad4 <main+0x1784>
						state = 2;
					counterRef = counter;
				}
				if(state == 2 && counter - counterRef > pWait){
    1ace:	02 30       	cpi	r16, 0x02	; 2
    1ad0:	11 05       	cpc	r17, r1
    1ad2:	69 f4       	brne	.+26     	; 0x1aee <main+0x179e>
    1ad4:	89 8d       	ldd	r24, Y+25	; 0x19
    1ad6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ad8:	8e 19       	sub	r24, r14
    1ada:	9f 09       	sbc	r25, r15
    1adc:	85 36       	cpi	r24, 0x65	; 101
    1ade:	91 05       	cpc	r25, r1
    1ae0:	0c f4       	brge	.+2      	; 0x1ae4 <main+0x1794>
    1ae2:	64 c0       	rjmp	.+200    	; 0x1bac <main+0x185c>
    1ae4:	e9 8c       	ldd	r14, Y+25	; 0x19
    1ae6:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1ae8:	03 e0       	ldi	r16, 0x03	; 3
    1aea:	10 e0       	ldi	r17, 0x00	; 0
    1aec:	03 c0       	rjmp	.+6      	; 0x1af4 <main+0x17a4>
					state = 3;
					counterRef = counter;
				}
				if(state == 3 && counter - counterRef > totallength2*m2HomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1aee:	03 30       	cpi	r16, 0x03	; 3
    1af0:	11 05       	cpc	r17, r1
    1af2:	b1 f4       	brne	.+44     	; 0x1b20 <main+0x17d0>
    1af4:	89 8d       	ldd	r24, Y+25	; 0x19
    1af6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1af8:	8e 19       	sub	r24, r14
    1afa:	9f 09       	sbc	r25, r15
    1afc:	20 91 3b 03 	lds	r18, 0x033B
    1b00:	30 91 3c 03 	lds	r19, 0x033C
    1b04:	a9 01       	movw	r20, r18
    1b06:	48 9d       	mul	r20, r8
    1b08:	90 01       	movw	r18, r0
    1b0a:	49 9d       	mul	r20, r9
    1b0c:	30 0d       	add	r19, r0
    1b0e:	58 9d       	mul	r21, r8
    1b10:	30 0d       	add	r19, r0
    1b12:	11 24       	eor	r1, r1
    1b14:	28 17       	cp	r18, r24
    1b16:	39 07       	cpc	r19, r25
    1b18:	1c f4       	brge	.+6      	; 0x1b20 <main+0x17d0>
    1b1a:	e9 8c       	ldd	r14, Y+25	; 0x19
    1b1c:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1b1e:	03 c0       	rjmp	.+6      	; 0x1b26 <main+0x17d6>
					state = 4;
					counterRef = counter;
				}
				if(state == 4 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1b20:	04 30       	cpi	r16, 0x04	; 4
    1b22:	11 05       	cpc	r17, r1
    1b24:	59 f4       	brne	.+22     	; 0x1b3c <main+0x17ec>
    1b26:	89 8d       	ldd	r24, Y+25	; 0x19
    1b28:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b2a:	8e 19       	sub	r24, r14
    1b2c:	9f 09       	sbc	r25, r15
    1b2e:	89 5e       	subi	r24, 0xE9	; 233
    1b30:	93 40       	sbci	r25, 0x03	; 3
    1b32:	0c f4       	brge	.+2      	; 0x1b36 <main+0x17e6>
    1b34:	65 c0       	rjmp	.+202    	; 0x1c00 <main+0x18b0>
    1b36:	e9 8c       	ldd	r14, Y+25	; 0x19
    1b38:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1b3a:	03 c0       	rjmp	.+6      	; 0x1b42 <main+0x17f2>
					state = 5;
					counterRef = counter;
				}
				if(state == 5 && counter - counterRef > pWait){
    1b3c:	05 30       	cpi	r16, 0x05	; 5
    1b3e:	11 05       	cpc	r17, r1
    1b40:	59 f4       	brne	.+22     	; 0x1b58 <main+0x1808>
    1b42:	89 8d       	ldd	r24, Y+25	; 0x19
    1b44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b46:	8e 19       	sub	r24, r14
    1b48:	9f 09       	sbc	r25, r15
    1b4a:	85 36       	cpi	r24, 0x65	; 101
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	0c f4       	brge	.+2      	; 0x1b52 <main+0x1802>
    1b50:	67 c0       	rjmp	.+206    	; 0x1c20 <main+0x18d0>
    1b52:	e9 8c       	ldd	r14, Y+25	; 0x19
    1b54:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1b56:	03 c0       	rjmp	.+6      	; 0x1b5e <main+0x180e>
						state = 6;
					counterRef = counter;
				}
				if(state == 6 && counter - counterRef > totallength2*m2Brush2StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1b58:	06 30       	cpi	r16, 0x06	; 6
    1b5a:	11 05       	cpc	r17, r1
    1b5c:	c9 f4       	brne	.+50     	; 0x1b90 <main+0x1840>
    1b5e:	89 8d       	ldd	r24, Y+25	; 0x19
    1b60:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b62:	8e 19       	sub	r24, r14
    1b64:	9f 09       	sbc	r25, r15
    1b66:	20 91 3b 03 	lds	r18, 0x033B
    1b6a:	30 91 3c 03 	lds	r19, 0x033C
    1b6e:	f9 01       	movw	r30, r18
    1b70:	e8 9d       	mul	r30, r8
    1b72:	90 01       	movw	r18, r0
    1b74:	e9 9d       	mul	r30, r9
    1b76:	30 0d       	add	r19, r0
    1b78:	f8 9d       	mul	r31, r8
    1b7a:	30 0d       	add	r19, r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	28 17       	cp	r18, r24
    1b80:	39 07       	cpc	r19, r25
    1b82:	0c f0       	brlt	.+2      	; 0x1b86 <main+0x1836>
    1b84:	69 c0       	rjmp	.+210    	; 0x1c58 <main+0x1908>
    1b86:	e9 8c       	ldd	r14, Y+25	; 0x19
    1b88:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1b8a:	05 c0       	rjmp	.+10     	; 0x1b96 <main+0x1846>
    1b8c:	01 e0       	ldi	r16, 0x01	; 1
    1b8e:	10 e0       	ldi	r17, 0x00	; 0
					state = 15;
					counterRef = counter;
				}
				if(state == 15 && counter - counterRef > mWait){
    1b90:	0f 30       	cpi	r16, 0x0F	; 15
    1b92:	11 05       	cpc	r17, r1
    1b94:	69 f4       	brne	.+26     	; 0x1bb0 <main+0x1860>
    1b96:	89 8d       	ldd	r24, Y+25	; 0x19
    1b98:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b9a:	8e 19       	sub	r24, r14
    1b9c:	9f 09       	sbc	r25, r15
    1b9e:	85 36       	cpi	r24, 0x65	; 101
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	0c f4       	brge	.+2      	; 0x1ba6 <main+0x1856>
    1ba4:	69 c0       	rjmp	.+210    	; 0x1c78 <main+0x1928>
    1ba6:	e9 8c       	ldd	r14, Y+25	; 0x19
    1ba8:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1baa:	05 c0       	rjmp	.+10     	; 0x1bb6 <main+0x1866>
    1bac:	02 e0       	ldi	r16, 0x02	; 2
    1bae:	10 e0       	ldi	r17, 0x00	; 0
					state = 16;
					counterRef = counter;
				}
				if(state == 16 && counter - counterRef > pWait){
    1bb0:	00 31       	cpi	r16, 0x10	; 16
    1bb2:	11 05       	cpc	r17, r1
    1bb4:	59 f4       	brne	.+22     	; 0x1bcc <main+0x187c>
    1bb6:	89 8d       	ldd	r24, Y+25	; 0x19
    1bb8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bba:	8e 19       	sub	r24, r14
    1bbc:	9f 09       	sbc	r25, r15
    1bbe:	85 36       	cpi	r24, 0x65	; 101
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	0c f4       	brge	.+2      	; 0x1bc6 <main+0x1876>
    1bc4:	75 c0       	rjmp	.+234    	; 0x1cb0 <main+0x1960>
    1bc6:	e9 8c       	ldd	r14, Y+25	; 0x19
    1bc8:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1bca:	03 c0       	rjmp	.+6      	; 0x1bd2 <main+0x1882>
					state = 17;
					counterRef = counter;
				}
				if(state == 17 && counter - counterRef > totallength2*m2HalfPlate){
    1bcc:	01 31       	cpi	r16, 0x11	; 17
    1bce:	11 05       	cpc	r17, r1
    1bd0:	c9 f4       	brne	.+50     	; 0x1c04 <main+0x18b4>
    1bd2:	89 8d       	ldd	r24, Y+25	; 0x19
    1bd4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bd6:	8e 19       	sub	r24, r14
    1bd8:	9f 09       	sbc	r25, r15
    1bda:	20 91 3b 03 	lds	r18, 0x033B
    1bde:	30 91 3c 03 	lds	r19, 0x033C
    1be2:	a9 01       	movw	r20, r18
    1be4:	48 9d       	mul	r20, r8
    1be6:	90 01       	movw	r18, r0
    1be8:	49 9d       	mul	r20, r9
    1bea:	30 0d       	add	r19, r0
    1bec:	58 9d       	mul	r21, r8
    1bee:	30 0d       	add	r19, r0
    1bf0:	11 24       	eor	r1, r1
    1bf2:	28 17       	cp	r18, r24
    1bf4:	39 07       	cpc	r19, r25
    1bf6:	0c f0       	brlt	.+2      	; 0x1bfa <main+0x18aa>
    1bf8:	6b c0       	rjmp	.+214    	; 0x1cd0 <main+0x1980>
    1bfa:	e9 8c       	ldd	r14, Y+25	; 0x19
    1bfc:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1bfe:	05 c0       	rjmp	.+10     	; 0x1c0a <main+0x18ba>
    1c00:	04 e0       	ldi	r16, 0x04	; 4
    1c02:	10 e0       	ldi	r17, 0x00	; 0
					state = 18;
					counterRef = counter;
				}
				if(state == 18 && counter - counterRef > pWait){
    1c04:	02 31       	cpi	r16, 0x12	; 18
    1c06:	11 05       	cpc	r17, r1
    1c08:	69 f4       	brne	.+26     	; 0x1c24 <main+0x18d4>
    1c0a:	89 8d       	ldd	r24, Y+25	; 0x19
    1c0c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c0e:	8e 19       	sub	r24, r14
    1c10:	9f 09       	sbc	r25, r15
    1c12:	85 36       	cpi	r24, 0x65	; 101
    1c14:	91 05       	cpc	r25, r1
    1c16:	0c f4       	brge	.+2      	; 0x1c1a <main+0x18ca>
    1c18:	77 c0       	rjmp	.+238    	; 0x1d08 <main+0x19b8>
    1c1a:	e9 8c       	ldd	r14, Y+25	; 0x19
    1c1c:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1c1e:	05 c0       	rjmp	.+10     	; 0x1c2a <main+0x18da>
    1c20:	05 e0       	ldi	r16, 0x05	; 5
    1c22:	10 e0       	ldi	r17, 0x00	; 0
					state = 19;
					counterRef = counter;
				}
				if(state == 19 && counter - counterRef > totallength2*m2HalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    1c24:	03 31       	cpi	r16, 0x13	; 19
    1c26:	11 05       	cpc	r17, r1
    1c28:	c9 f4       	brne	.+50     	; 0x1c5c <main+0x190c>
    1c2a:	89 8d       	ldd	r24, Y+25	; 0x19
    1c2c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c2e:	8e 19       	sub	r24, r14
    1c30:	9f 09       	sbc	r25, r15
    1c32:	20 91 3b 03 	lds	r18, 0x033B
    1c36:	30 91 3c 03 	lds	r19, 0x033C
    1c3a:	f9 01       	movw	r30, r18
    1c3c:	e8 9d       	mul	r30, r8
    1c3e:	90 01       	movw	r18, r0
    1c40:	e9 9d       	mul	r30, r9
    1c42:	30 0d       	add	r19, r0
    1c44:	f8 9d       	mul	r31, r8
    1c46:	30 0d       	add	r19, r0
    1c48:	11 24       	eor	r1, r1
    1c4a:	28 17       	cp	r18, r24
    1c4c:	39 07       	cpc	r19, r25
    1c4e:	0c f0       	brlt	.+2      	; 0x1c52 <main+0x1902>
    1c50:	6b c0       	rjmp	.+214    	; 0x1d28 <main+0x19d8>
    1c52:	e9 8c       	ldd	r14, Y+25	; 0x19
    1c54:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1c56:	05 c0       	rjmp	.+10     	; 0x1c62 <main+0x1912>
    1c58:	06 e0       	ldi	r16, 0x06	; 6
    1c5a:	10 e0       	ldi	r17, 0x00	; 0
					state = 20;
					counterRef = counter;
				}
				if(state == 20 && counter - counterRef > pWait){
    1c5c:	04 31       	cpi	r16, 0x14	; 20
    1c5e:	11 05       	cpc	r17, r1
    1c60:	69 f4       	brne	.+26     	; 0x1c7c <main+0x192c>
    1c62:	89 8d       	ldd	r24, Y+25	; 0x19
    1c64:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c66:	8e 19       	sub	r24, r14
    1c68:	9f 09       	sbc	r25, r15
    1c6a:	85 36       	cpi	r24, 0x65	; 101
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	0c f4       	brge	.+2      	; 0x1c72 <main+0x1922>
    1c70:	74 c0       	rjmp	.+232    	; 0x1d5a <main+0x1a0a>
    1c72:	e9 8c       	ldd	r14, Y+25	; 0x19
    1c74:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <main+0x1932>
    1c78:	0f e0       	ldi	r16, 0x0F	; 15
    1c7a:	10 e0       	ldi	r17, 0x00	; 0
					state = 21;
					counterRef = counter;
				}
				if(state == 21 && counter - counterRef > totallength2*m2HalfPlate){
    1c7c:	05 31       	cpi	r16, 0x15	; 21
    1c7e:	11 05       	cpc	r17, r1
    1c80:	c9 f4       	brne	.+50     	; 0x1cb4 <main+0x1964>
    1c82:	89 8d       	ldd	r24, Y+25	; 0x19
    1c84:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c86:	8e 19       	sub	r24, r14
    1c88:	9f 09       	sbc	r25, r15
    1c8a:	20 91 3b 03 	lds	r18, 0x033B
    1c8e:	30 91 3c 03 	lds	r19, 0x033C
    1c92:	a9 01       	movw	r20, r18
    1c94:	48 9d       	mul	r20, r8
    1c96:	90 01       	movw	r18, r0
    1c98:	49 9d       	mul	r20, r9
    1c9a:	30 0d       	add	r19, r0
    1c9c:	58 9d       	mul	r21, r8
    1c9e:	30 0d       	add	r19, r0
    1ca0:	11 24       	eor	r1, r1
    1ca2:	28 17       	cp	r18, r24
    1ca4:	39 07       	cpc	r19, r25
    1ca6:	0c f0       	brlt	.+2      	; 0x1caa <main+0x195a>
    1ca8:	76 c0       	rjmp	.+236    	; 0x1d96 <main+0x1a46>
    1caa:	e9 8c       	ldd	r14, Y+25	; 0x19
    1cac:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1cae:	05 c0       	rjmp	.+10     	; 0x1cba <main+0x196a>
    1cb0:	00 e1       	ldi	r16, 0x10	; 16
    1cb2:	10 e0       	ldi	r17, 0x00	; 0
					state = 22;
					counterRef = counter;
				}
				if(state == 22 && counter - counterRef > pWait){
    1cb4:	06 31       	cpi	r16, 0x16	; 22
    1cb6:	11 05       	cpc	r17, r1
    1cb8:	69 f4       	brne	.+26     	; 0x1cd4 <main+0x1984>
    1cba:	89 8d       	ldd	r24, Y+25	; 0x19
    1cbc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1cbe:	8e 19       	sub	r24, r14
    1cc0:	9f 09       	sbc	r25, r15
    1cc2:	85 36       	cpi	r24, 0x65	; 101
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	0c f4       	brge	.+2      	; 0x1cca <main+0x197a>
    1cc8:	78 c0       	rjmp	.+240    	; 0x1dba <main+0x1a6a>
    1cca:	e9 8c       	ldd	r14, Y+25	; 0x19
    1ccc:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1cce:	05 c0       	rjmp	.+10     	; 0x1cda <main+0x198a>
    1cd0:	01 e1       	ldi	r16, 0x11	; 17
    1cd2:	10 e0       	ldi	r17, 0x00	; 0
					state = 23;
					counterRef = counter;
				}
				if(state == 23 && counter - counterRef > totallength2*m2Dry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1cd4:	07 31       	cpi	r16, 0x17	; 23
    1cd6:	11 05       	cpc	r17, r1
    1cd8:	c9 f4       	brne	.+50     	; 0x1d0c <main+0x19bc>
    1cda:	89 8d       	ldd	r24, Y+25	; 0x19
    1cdc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1cde:	8e 19       	sub	r24, r14
    1ce0:	9f 09       	sbc	r25, r15
    1ce2:	20 91 3b 03 	lds	r18, 0x033B
    1ce6:	30 91 3c 03 	lds	r19, 0x033C
    1cea:	f9 01       	movw	r30, r18
    1cec:	e8 9d       	mul	r30, r8
    1cee:	90 01       	movw	r18, r0
    1cf0:	e9 9d       	mul	r30, r9
    1cf2:	30 0d       	add	r19, r0
    1cf4:	f8 9d       	mul	r31, r8
    1cf6:	30 0d       	add	r19, r0
    1cf8:	11 24       	eor	r1, r1
    1cfa:	28 17       	cp	r18, r24
    1cfc:	39 07       	cpc	r19, r25
    1cfe:	0c f0       	brlt	.+2      	; 0x1d02 <main+0x19b2>
    1d00:	6c c0       	rjmp	.+216    	; 0x1dda <main+0x1a8a>
    1d02:	e9 8c       	ldd	r14, Y+25	; 0x19
    1d04:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1d06:	05 c0       	rjmp	.+10     	; 0x1d12 <main+0x19c2>
    1d08:	02 e1       	ldi	r16, 0x12	; 18
    1d0a:	10 e0       	ldi	r17, 0x00	; 0
					state = 24;
					counterRef = counter;
				}
				if(state == 24 && counter - counterRef > kWait){
    1d0c:	08 31       	cpi	r16, 0x18	; 24
    1d0e:	11 05       	cpc	r17, r1
    1d10:	69 f4       	brne	.+26     	; 0x1d2c <main+0x19dc>
    1d12:	89 8d       	ldd	r24, Y+25	; 0x19
    1d14:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d16:	8e 19       	sub	r24, r14
    1d18:	9f 09       	sbc	r25, r15
    1d1a:	85 36       	cpi	r24, 0x65	; 101
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	0c f4       	brge	.+2      	; 0x1d22 <main+0x19d2>
    1d20:	75 c0       	rjmp	.+234    	; 0x1e0c <main+0x1abc>
    1d22:	e9 8c       	ldd	r14, Y+25	; 0x19
    1d24:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1d26:	05 c0       	rjmp	.+10     	; 0x1d32 <main+0x19e2>
    1d28:	03 e1       	ldi	r16, 0x13	; 19
    1d2a:	10 e0       	ldi	r17, 0x00	; 0
					state = 25;
					counterRef = counter;
				}
				if(state == 25 && counter - counterRef > totallength2*m2WholePlate){
    1d2c:	09 31       	cpi	r16, 0x19	; 25
    1d2e:	11 05       	cpc	r17, r1
    1d30:	b1 f4       	brne	.+44     	; 0x1d5e <main+0x1a0e>
    1d32:	89 8d       	ldd	r24, Y+25	; 0x19
    1d34:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d36:	8e 19       	sub	r24, r14
    1d38:	9f 09       	sbc	r25, r15
    1d3a:	20 91 3b 03 	lds	r18, 0x033B
    1d3e:	30 91 3c 03 	lds	r19, 0x033C
    1d42:	a9 01       	movw	r20, r18
    1d44:	48 9d       	mul	r20, r8
    1d46:	90 01       	movw	r18, r0
    1d48:	49 9d       	mul	r20, r9
    1d4a:	30 0d       	add	r19, r0
    1d4c:	58 9d       	mul	r21, r8
    1d4e:	30 0d       	add	r19, r0
    1d50:	11 24       	eor	r1, r1
    1d52:	28 17       	cp	r18, r24
    1d54:	39 07       	cpc	r19, r25
    1d56:	34 f0       	brlt	.+12     	; 0x1d64 <main+0x1a14>
    1d58:	75 c0       	rjmp	.+234    	; 0x1e44 <main+0x1af4>
    1d5a:	04 e1       	ldi	r16, 0x14	; 20
    1d5c:	10 e0       	ldi	r17, 0x00	; 0
					state = 26;
					counterRef26 = counter;
				}
				if(state == 26 && counter - counterRef > totallength2*m2Dry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    1d5e:	0a 31       	cpi	r16, 0x1A	; 26
    1d60:	11 05       	cpc	r17, r1
    1d62:	d9 f4       	brne	.+54     	; 0x1d9a <main+0x1a4a>
    1d64:	89 8d       	ldd	r24, Y+25	; 0x19
    1d66:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d68:	8e 19       	sub	r24, r14
    1d6a:	9f 09       	sbc	r25, r15
    1d6c:	20 91 3b 03 	lds	r18, 0x033B
    1d70:	30 91 3c 03 	lds	r19, 0x033C
    1d74:	f9 01       	movw	r30, r18
    1d76:	e8 9d       	mul	r30, r8
    1d78:	90 01       	movw	r18, r0
    1d7a:	e9 9d       	mul	r30, r9
    1d7c:	30 0d       	add	r19, r0
    1d7e:	f8 9d       	mul	r31, r8
    1d80:	30 0d       	add	r19, r0
    1d82:	11 24       	eor	r1, r1
    1d84:	28 17       	cp	r18, r24
    1d86:	39 07       	cpc	r19, r25
    1d88:	0c f0       	brlt	.+2      	; 0x1d8c <main+0x1a3c>
    1d8a:	6c c0       	rjmp	.+216    	; 0x1e64 <main+0x1b14>
    1d8c:	29 8d       	ldd	r18, Y+25	; 0x19
    1d8e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1d90:	3c 8b       	std	Y+20, r19	; 0x14
    1d92:	2b 8b       	std	Y+19, r18	; 0x13
    1d94:	05 c0       	rjmp	.+10     	; 0x1da0 <main+0x1a50>
    1d96:	05 e1       	ldi	r16, 0x15	; 21
    1d98:	10 e0       	ldi	r17, 0x00	; 0
					state = 27;
					counterRefFive = counter;
				}
				if(state == 27 && counter - counterRefFive > mWait){
    1d9a:	0b 31       	cpi	r16, 0x1B	; 27
    1d9c:	11 05       	cpc	r17, r1
    1d9e:	79 f4       	brne	.+30     	; 0x1dbe <main+0x1a6e>
    1da0:	89 8d       	ldd	r24, Y+25	; 0x19
    1da2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1da4:	4b 89       	ldd	r20, Y+19	; 0x13
    1da6:	5c 89       	ldd	r21, Y+20	; 0x14
    1da8:	84 1b       	sub	r24, r20
    1daa:	95 0b       	sbc	r25, r21
    1dac:	85 36       	cpi	r24, 0x65	; 101
    1dae:	91 05       	cpc	r25, r1
    1db0:	0c f4       	brge	.+2      	; 0x1db4 <main+0x1a64>
    1db2:	74 c0       	rjmp	.+232    	; 0x1e9c <main+0x1b4c>
    1db4:	e9 8c       	ldd	r14, Y+25	; 0x19
    1db6:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1db8:	05 c0       	rjmp	.+10     	; 0x1dc4 <main+0x1a74>
    1dba:	06 e1       	ldi	r16, 0x16	; 22
    1dbc:	10 e0       	ldi	r17, 0x00	; 0
					state = 28;
					counterRef = counter;
				}
				if(state == 28 && counter - counterRef > pWait){
    1dbe:	0c 31       	cpi	r16, 0x1C	; 28
    1dc0:	11 05       	cpc	r17, r1
    1dc2:	69 f4       	brne	.+26     	; 0x1dde <main+0x1a8e>
    1dc4:	89 8d       	ldd	r24, Y+25	; 0x19
    1dc6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1dc8:	8e 19       	sub	r24, r14
    1dca:	9f 09       	sbc	r25, r15
    1dcc:	85 36       	cpi	r24, 0x65	; 101
    1dce:	91 05       	cpc	r25, r1
    1dd0:	0c f4       	brge	.+2      	; 0x1dd4 <main+0x1a84>
    1dd2:	74 c0       	rjmp	.+232    	; 0x1ebc <main+0x1b6c>
    1dd4:	e9 8c       	ldd	r14, Y+25	; 0x19
    1dd6:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1dd8:	05 c0       	rjmp	.+10     	; 0x1de4 <main+0x1a94>
    1dda:	07 e1       	ldi	r16, 0x17	; 23
    1ddc:	10 e0       	ldi	r17, 0x00	; 0
					state = 29;
					counterRef = counter;
				}
				if(state == 29 && counter - counterRef > totallength2*m2WholePlate){
    1dde:	0d 31       	cpi	r16, 0x1D	; 29
    1de0:	11 05       	cpc	r17, r1
    1de2:	b1 f4       	brne	.+44     	; 0x1e10 <main+0x1ac0>
    1de4:	89 8d       	ldd	r24, Y+25	; 0x19
    1de6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1de8:	8e 19       	sub	r24, r14
    1dea:	9f 09       	sbc	r25, r15
    1dec:	20 91 3b 03 	lds	r18, 0x033B
    1df0:	30 91 3c 03 	lds	r19, 0x033C
    1df4:	f9 01       	movw	r30, r18
    1df6:	e8 9d       	mul	r30, r8
    1df8:	90 01       	movw	r18, r0
    1dfa:	e9 9d       	mul	r30, r9
    1dfc:	30 0d       	add	r19, r0
    1dfe:	f8 9d       	mul	r31, r8
    1e00:	30 0d       	add	r19, r0
    1e02:	11 24       	eor	r1, r1
    1e04:	28 17       	cp	r18, r24
    1e06:	39 07       	cpc	r19, r25
    1e08:	34 f0       	brlt	.+12     	; 0x1e16 <main+0x1ac6>
    1e0a:	74 c0       	rjmp	.+232    	; 0x1ef4 <main+0x1ba4>
    1e0c:	08 e1       	ldi	r16, 0x18	; 24
    1e0e:	10 e0       	ldi	r17, 0x00	; 0
					state = 30;
					counterRef30 = counter;
				}
				if(state == 30 && counter - counterRef > totallength2*m2LoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1e10:	0e 31       	cpi	r16, 0x1E	; 30
    1e12:	11 05       	cpc	r17, r1
    1e14:	c9 f4       	brne	.+50     	; 0x1e48 <main+0x1af8>
    1e16:	89 8d       	ldd	r24, Y+25	; 0x19
    1e18:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e1a:	8e 19       	sub	r24, r14
    1e1c:	9f 09       	sbc	r25, r15
    1e1e:	20 91 3b 03 	lds	r18, 0x033B
    1e22:	30 91 3c 03 	lds	r19, 0x033C
    1e26:	a9 01       	movw	r20, r18
    1e28:	48 9d       	mul	r20, r8
    1e2a:	90 01       	movw	r18, r0
    1e2c:	49 9d       	mul	r20, r9
    1e2e:	30 0d       	add	r19, r0
    1e30:	58 9d       	mul	r21, r8
    1e32:	30 0d       	add	r19, r0
    1e34:	11 24       	eor	r1, r1
    1e36:	28 17       	cp	r18, r24
    1e38:	39 07       	cpc	r19, r25
    1e3a:	0c f0       	brlt	.+2      	; 0x1e3e <main+0x1aee>
    1e3c:	6b c0       	rjmp	.+214    	; 0x1f14 <main+0x1bc4>
    1e3e:	e9 8c       	ldd	r14, Y+25	; 0x19
    1e40:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1e42:	05 c0       	rjmp	.+10     	; 0x1e4e <main+0x1afe>
    1e44:	09 e1       	ldi	r16, 0x19	; 25
    1e46:	10 e0       	ldi	r17, 0x00	; 0
					state = 31;
					counterRef = counter;
				}
					if(state == 31 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1e48:	0f 31       	cpi	r16, 0x1F	; 31
    1e4a:	11 05       	cpc	r17, r1
    1e4c:	69 f4       	brne	.+26     	; 0x1e68 <main+0x1b18>
    1e4e:	89 8d       	ldd	r24, Y+25	; 0x19
    1e50:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e52:	8e 19       	sub	r24, r14
    1e54:	9f 09       	sbc	r25, r15
    1e56:	89 5e       	subi	r24, 0xE9	; 233
    1e58:	93 40       	sbci	r25, 0x03	; 3
    1e5a:	0c f4       	brge	.+2      	; 0x1e5e <main+0x1b0e>
    1e5c:	8d c0       	rjmp	.+282    	; 0x1f78 <main+0x1c28>
    1e5e:	e9 8c       	ldd	r14, Y+25	; 0x19
    1e60:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1e62:	05 c0       	rjmp	.+10     	; 0x1e6e <main+0x1b1e>
    1e64:	0a e1       	ldi	r16, 0x1A	; 26
    1e66:	10 e0       	ldi	r17, 0x00	; 0
					state = 32;
					counterRef = counter;
				}
				if(state == 32 && counter - counterRef > totallength2*m2HomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    1e68:	00 32       	cpi	r16, 0x20	; 32
    1e6a:	11 05       	cpc	r17, r1
    1e6c:	c9 f4       	brne	.+50     	; 0x1ea0 <main+0x1b50>
    1e6e:	89 8d       	ldd	r24, Y+25	; 0x19
    1e70:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e72:	8e 19       	sub	r24, r14
    1e74:	9f 09       	sbc	r25, r15
    1e76:	20 91 3b 03 	lds	r18, 0x033B
    1e7a:	30 91 3c 03 	lds	r19, 0x033C
    1e7e:	f9 01       	movw	r30, r18
    1e80:	e8 9d       	mul	r30, r8
    1e82:	90 01       	movw	r18, r0
    1e84:	e9 9d       	mul	r30, r9
    1e86:	30 0d       	add	r19, r0
    1e88:	f8 9d       	mul	r31, r8
    1e8a:	30 0d       	add	r19, r0
    1e8c:	11 24       	eor	r1, r1
    1e8e:	28 17       	cp	r18, r24
    1e90:	39 07       	cpc	r19, r25
    1e92:	0c f0       	brlt	.+2      	; 0x1e96 <main+0x1b46>
    1e94:	98 c0       	rjmp	.+304    	; 0x1fc6 <main+0x1c76>
    1e96:	e9 8c       	ldd	r14, Y+25	; 0x19
    1e98:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1e9a:	05 c0       	rjmp	.+10     	; 0x1ea6 <main+0x1b56>
    1e9c:	0b e1       	ldi	r16, 0x1B	; 27
    1e9e:	10 e0       	ldi	r17, 0x00	; 0
					state = 33;
					counterRef = counter;
				}
				if(state == 33 && counter - counterRef > pWait){
    1ea0:	01 32       	cpi	r16, 0x21	; 33
    1ea2:	11 05       	cpc	r17, r1
    1ea4:	69 f4       	brne	.+26     	; 0x1ec0 <main+0x1b70>
    1ea6:	89 8d       	ldd	r24, Y+25	; 0x19
    1ea8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1eaa:	8e 19       	sub	r24, r14
    1eac:	9f 09       	sbc	r25, r15
    1eae:	85 36       	cpi	r24, 0x65	; 101
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	0c f4       	brge	.+2      	; 0x1eb6 <main+0x1b66>
    1eb4:	9c c0       	rjmp	.+312    	; 0x1fee <main+0x1c9e>
    1eb6:	e9 8c       	ldd	r14, Y+25	; 0x19
    1eb8:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1eba:	05 c0       	rjmp	.+10     	; 0x1ec6 <main+0x1b76>
    1ebc:	0c e1       	ldi	r16, 0x1C	; 28
    1ebe:	10 e0       	ldi	r17, 0x00	; 0
					state = 34;
					counterRef = counter;
				}
				if(state == 34 && counter - counterRef > totallength1*m1LoadPlate){
    1ec0:	02 32       	cpi	r16, 0x22	; 34
    1ec2:	11 05       	cpc	r17, r1
    1ec4:	c9 f4       	brne	.+50     	; 0x1ef8 <main+0x1ba8>
    1ec6:	89 8d       	ldd	r24, Y+25	; 0x19
    1ec8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1eca:	8e 19       	sub	r24, r14
    1ecc:	9f 09       	sbc	r25, r15
    1ece:	20 91 39 03 	lds	r18, 0x0339
    1ed2:	30 91 3a 03 	lds	r19, 0x033A
    1ed6:	a9 01       	movw	r20, r18
    1ed8:	48 9d       	mul	r20, r8
    1eda:	90 01       	movw	r18, r0
    1edc:	49 9d       	mul	r20, r9
    1ede:	30 0d       	add	r19, r0
    1ee0:	58 9d       	mul	r21, r8
    1ee2:	30 0d       	add	r19, r0
    1ee4:	11 24       	eor	r1, r1
    1ee6:	28 17       	cp	r18, r24
    1ee8:	39 07       	cpc	r19, r25
    1eea:	0c f0       	brlt	.+2      	; 0x1eee <main+0x1b9e>
    1eec:	8e c0       	rjmp	.+284    	; 0x200a <main+0x1cba>
    1eee:	e9 8c       	ldd	r14, Y+25	; 0x19
    1ef0:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1ef2:	05 c0       	rjmp	.+10     	; 0x1efe <main+0x1bae>
    1ef4:	0d e1       	ldi	r16, 0x1D	; 29
    1ef6:	10 e0       	ldi	r17, 0x00	; 0
					state = 35;
					counterRef = counter;
				}
				if(state == 35 && counter - counterRef > 10){
    1ef8:	03 32       	cpi	r16, 0x23	; 35
    1efa:	11 05       	cpc	r17, r1
    1efc:	71 f4       	brne	.+28     	; 0x1f1a <main+0x1bca>
    1efe:	89 8d       	ldd	r24, Y+25	; 0x19
    1f00:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f02:	8e 19       	sub	r24, r14
    1f04:	9f 09       	sbc	r25, r15
    1f06:	0b 97       	sbiw	r24, 0x0b	; 11
    1f08:	14 f4       	brge	.+4      	; 0x1f0e <main+0x1bbe>
    1f0a:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <main+0x2eac>
    1f0e:	0f ef       	ldi	r16, 0xFF	; 255
    1f10:	1f ef       	ldi	r17, 0xFF	; 255
    1f12:	34 c0       	rjmp	.+104    	; 0x1f7c <main+0x1c2c>
    1f14:	0e e1       	ldi	r16, 0x1E	; 30
    1f16:	10 e0       	ldi	r17, 0x00	; 0
    1f18:	31 c0       	rjmp	.+98     	; 0x1f7c <main+0x1c2c>
				}


				//state actions
						
				if(state == 0){
    1f1a:	01 15       	cp	r16, r1
    1f1c:	11 05       	cpc	r17, r1
    1f1e:	71 f5       	brne	.+92     	; 0x1f7c <main+0x1c2c>
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    1f20:	80 91 50 03 	lds	r24, 0x0350
    1f24:	90 91 4c 03 	lds	r25, 0x034C
    1f28:	20 91 4e 03 	lds	r18, 0x034E
    1f2c:	82 ff       	sbrs	r24, 2
    1f2e:	0a c0       	rjmp	.+20     	; 0x1f44 <main+0x1bf4>
						u_motorByte0.bits_in_motorByte0.m2Dir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    1f30:	9f 7e       	andi	r25, 0xEF	; 239
    1f32:	90 93 4c 03 	sts	0x034C, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1f36:	27 7f       	andi	r18, 0xF7	; 247
    1f38:	20 93 4e 03 	sts	0x034E, r18
    1f3c:	41 e0       	ldi	r20, 0x01	; 1
    1f3e:	c4 2e       	mov	r12, r20
    1f40:	d1 2c       	mov	r13, r1
    1f42:	65 c0       	rjmp	.+202    	; 0x200e <main+0x1cbe>
						m2 = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    1f44:	9f 7d       	andi	r25, 0xDF	; 223
    1f46:	90 93 4c 03 	sts	0x034C, r25
						m2 = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1f4a:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1f4c:	28 60       	ori	r18, 0x08	; 8
    1f4e:	20 93 4e 03 	sts	0x034E, r18
						if(print0 == 1){
    1f52:	89 89       	ldd	r24, Y+17	; 0x11
    1f54:	9a 89       	ldd	r25, Y+18	; 0x12
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	11 f0       	breq	.+4      	; 0x1f5e <main+0x1c0e>
    1f5a:	0c 94 02 19 	jmp	0x3204	; 0x3204 <main+0x2eb4>
							OrangutanLCD::gotoXY(0,1);
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	61 e0       	ldi	r22, 0x01	; 1
    1f62:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	93 e0       	ldi	r25, 0x03	; 3
    1f6a:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
    1f6e:	cc 24       	eor	r12, r12
    1f70:	dd 24       	eor	r13, r13
    1f72:	1a 8a       	std	Y+18, r1	; 0x12
    1f74:	19 8a       	std	Y+17, r1	; 0x11
    1f76:	4b c0       	rjmp	.+150    	; 0x200e <main+0x1cbe>
    1f78:	0f e1       	ldi	r16, 0x1F	; 31
    1f7a:	10 e0       	ldi	r17, 0x00	; 0
							print0 = 0;
						}
					}
				}
				if(state == 1){
    1f7c:	01 30       	cpi	r16, 0x01	; 1
    1f7e:	11 05       	cpc	r17, r1
    1f80:	21 f5       	brne	.+72     	; 0x1fca <main+0x1c7a>
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1f82:	20 91 4e 03 	lds	r18, 0x034E
    1f86:	32 2f       	mov	r19, r18
    1f88:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    1f8a:	89 8d       	ldd	r24, Y+25	; 0x19
    1f8c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f8e:	68 ec       	ldi	r22, 0xC8	; 200
    1f90:	70 e0       	ldi	r23, 0x00	; 0
    1f92:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    1f96:	84 36       	cpi	r24, 0x64	; 100
    1f98:	91 05       	cpc	r25, r1
    1f9a:	24 f4       	brge	.+8      	; 0x1fa4 <main+0x1c54>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1f9c:	2c 7f       	andi	r18, 0xFC	; 252
    1f9e:	20 93 4e 03 	sts	0x034E, r18
    1fa2:	03 c0       	rjmp	.+6      	; 0x1faa <main+0x1c5a>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1fa4:	32 60       	ori	r19, 0x02	; 2
    1fa6:	30 93 4e 03 	sts	0x034E, r19
					}
					m1 = 1;
					u_motorByte0.bits_in_motorByte0.m1Dir = 1;  //****** dir1 ******
    1faa:	80 91 4c 03 	lds	r24, 0x034C
					u_motorByte0.bits_in_motorByte0.m1Drop = 1;
    1fae:	86 60       	ori	r24, 0x06	; 6
    1fb0:	80 93 4c 03 	sts	0x034C, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1fb4:	80 91 4e 03 	lds	r24, 0x034E
    1fb8:	8b 7f       	andi	r24, 0xFB	; 251
    1fba:	80 93 4e 03 	sts	0x034E, r24
    1fbe:	31 e0       	ldi	r19, 0x01	; 1
    1fc0:	63 2e       	mov	r6, r19
    1fc2:	71 2c       	mov	r7, r1
    1fc4:	24 c0       	rjmp	.+72     	; 0x200e <main+0x1cbe>
    1fc6:	00 e2       	ldi	r16, 0x20	; 32
    1fc8:	10 e0       	ldi	r17, 0x00	; 0
				}
				if(state == 2){
    1fca:	02 30       	cpi	r16, 0x02	; 2
    1fcc:	11 05       	cpc	r17, r1
    1fce:	89 f4       	brne	.+34     	; 0x1ff2 <main+0x1ca2>
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1fd0:	80 91 4e 03 	lds	r24, 0x034E
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1fd4:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1fd6:	86 61       	ori	r24, 0x16	; 22
    1fd8:	80 93 4e 03 	sts	0x034E, r24
						m1 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 1;
    1fdc:	80 91 4c 03 	lds	r24, 0x034C
    1fe0:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.m1Drop = 0;
    1fe2:	8b 7f       	andi	r24, 0xFB	; 251
    1fe4:	80 93 4c 03 	sts	0x034C, r24
    1fe8:	66 24       	eor	r6, r6
    1fea:	77 24       	eor	r7, r7
    1fec:	3a c0       	rjmp	.+116    	; 0x2062 <main+0x1d12>
    1fee:	01 e2       	ldi	r16, 0x21	; 33
    1ff0:	10 e0       	ldi	r17, 0x00	; 0
				}	
				if(state == 3){
    1ff2:	03 30       	cpi	r16, 0x03	; 3
    1ff4:	11 05       	cpc	r17, r1
    1ff6:	59 f4       	brne	.+22     	; 0x200e <main+0x1cbe>
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ****** dir2 *******
    1ff8:	80 91 4c 03 	lds	r24, 0x034C
    1ffc:	80 61       	ori	r24, 0x10	; 16
    1ffe:	80 93 4c 03 	sts	0x034C, r24
    2002:	21 e0       	ldi	r18, 0x01	; 1
    2004:	c2 2e       	mov	r12, r18
    2006:	d1 2c       	mov	r13, r1
    2008:	38 c0       	rjmp	.+112    	; 0x207a <main+0x1d2a>
    200a:	02 e2       	ldi	r16, 0x22	; 34
    200c:	10 e0       	ldi	r17, 0x00	; 0
					m2 = 1;
				}
				if(state == 4){
    200e:	04 30       	cpi	r16, 0x04	; 4
    2010:	11 05       	cpc	r17, r1
    2012:	69 f4       	brne	.+26     	; 0x202e <main+0x1cde>
						m2 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    2014:	80 91 4c 03 	lds	r24, 0x034C
    2018:	8f 7d       	andi	r24, 0xDF	; 223
    201a:	80 93 4c 03 	sts	0x034C, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    201e:	80 91 4e 03 	lds	r24, 0x034E
    2022:	88 60       	ori	r24, 0x08	; 8
    2024:	80 93 4e 03 	sts	0x034E, r24
    2028:	cc 24       	eor	r12, r12
    202a:	dd 24       	eor	r13, r13
    202c:	37 c0       	rjmp	.+110    	; 0x209c <main+0x1d4c>
				}
				if(state == 5){
    202e:	05 30       	cpi	r16, 0x05	; 5
    2030:	11 05       	cpc	r17, r1
    2032:	59 f4       	brne	.+22     	; 0x204a <main+0x1cfa>
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2034:	80 91 4e 03 	lds	r24, 0x034E
    2038:	8f 7e       	andi	r24, 0xEF	; 239
    203a:	80 93 4e 03 	sts	0x034E, r24
					u_motorByte0.bits_in_motorByte0.m2Drop = 1;
    203e:	80 91 4c 03 	lds	r24, 0x034C
    2042:	80 62       	ori	r24, 0x20	; 32
    2044:	80 93 4c 03 	sts	0x034C, r24
    2048:	35 c0       	rjmp	.+106    	; 0x20b4 <main+0x1d64>
				}
				//*********************************************
				if(state == 6){
    204a:	06 30       	cpi	r16, 0x06	; 6
    204c:	11 05       	cpc	r17, r1
    204e:	49 f4       	brne	.+18     	; 0x2062 <main+0x1d12>
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    2050:	80 91 4c 03 	lds	r24, 0x034C
    2054:	80 61       	ori	r24, 0x10	; 16
    2056:	80 93 4c 03 	sts	0x034C, r24
    205a:	91 e0       	ldi	r25, 0x01	; 1
    205c:	c9 2e       	mov	r12, r25
    205e:	d1 2c       	mov	r13, r1
    2060:	3b c0       	rjmp	.+118    	; 0x20d8 <main+0x1d88>
					m2 = 1;
				}
				
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				if(state == 15){
    2062:	0f 30       	cpi	r16, 0x0F	; 15
    2064:	11 05       	cpc	r17, r1
    2066:	49 f4       	brne	.+18     	; 0x207a <main+0x1d2a>
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m4Drop = 1;
    2068:	80 91 4d 03 	lds	r24, 0x034D
    206c:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.m4Dir = 0;  // ******* dir4 *******
    206e:	8b 7f       	andi	r24, 0xFB	; 251
    2070:	80 93 4d 03 	sts	0x034D, r24
    2074:	cc 24       	eor	r12, r12
    2076:	dd 24       	eor	r13, r13
    2078:	3b c0       	rjmp	.+118    	; 0x20f0 <main+0x1da0>
						OrangutanLCD::clear();
						OrangutanLCD::print("Clean 2");
						print15 = 0;
					}*/
				}
				if(state == 16){
    207a:	00 31       	cpi	r16, 0x10	; 16
    207c:	11 05       	cpc	r17, r1
    207e:	71 f4       	brne	.+28     	; 0x209c <main+0x1d4c>
					m4 = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2080:	80 91 4f 03 	lds	r24, 0x034F
    2084:	81 60       	ori	r24, 0x01	; 1
    2086:	80 93 4f 03 	sts	0x034F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    208a:	80 91 4e 03 	lds	r24, 0x034E
    208e:	8f 77       	andi	r24, 0x7F	; 127
    2090:	80 93 4e 03 	sts	0x034E, r24
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	48 2e       	mov	r4, r24
    2098:	51 2c       	mov	r5, r1
    209a:	42 c0       	rjmp	.+132    	; 0x2120 <main+0x1dd0>
				}
				if(state == 17){
    209c:	01 31       	cpi	r16, 0x11	; 17
    209e:	11 05       	cpc	r17, r1
    20a0:	49 f4       	brne	.+18     	; 0x20b4 <main+0x1d64>
					m2 = 1;
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;  // ******* dir2 *******
    20a2:	80 91 4c 03 	lds	r24, 0x034C
    20a6:	8f 7e       	andi	r24, 0xEF	; 239
    20a8:	80 93 4c 03 	sts	0x034C, r24
    20ac:	b1 e0       	ldi	r27, 0x01	; 1
    20ae:	cb 2e       	mov	r12, r27
    20b0:	d1 2c       	mov	r13, r1
    20b2:	39 c0       	rjmp	.+114    	; 0x2126 <main+0x1dd6>
				}
				if(state == 18){
    20b4:	02 31       	cpi	r16, 0x12	; 18
    20b6:	11 05       	cpc	r17, r1
    20b8:	79 f4       	brne	.+30     	; 0x20d8 <main+0x1d88>
					m2 = 0;
					m4 = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    20ba:	80 91 4f 03 	lds	r24, 0x034F
    20be:	8e 7f       	andi	r24, 0xFE	; 254
    20c0:	80 93 4f 03 	sts	0x034F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    20c4:	80 91 4e 03 	lds	r24, 0x034E
    20c8:	80 68       	ori	r24, 0x80	; 128
    20ca:	80 93 4e 03 	sts	0x034E, r24
    20ce:	cc 24       	eor	r12, r12
    20d0:	dd 24       	eor	r13, r13
    20d2:	44 24       	eor	r4, r4
    20d4:	55 24       	eor	r5, r5
    20d6:	3e c0       	rjmp	.+124    	; 0x2154 <main+0x1e04>
				}
				if(state == 19){
    20d8:	03 31       	cpi	r16, 0x13	; 19
    20da:	11 05       	cpc	r17, r1
    20dc:	49 f4       	brne	.+18     	; 0x20f0 <main+0x1da0>
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    20de:	80 91 4c 03 	lds	r24, 0x034C
    20e2:	80 61       	ori	r24, 0x10	; 16
    20e4:	80 93 4c 03 	sts	0x034C, r24
    20e8:	a1 e0       	ldi	r26, 0x01	; 1
    20ea:	ca 2e       	mov	r12, r26
    20ec:	d1 2c       	mov	r13, r1
    20ee:	3e c0       	rjmp	.+124    	; 0x216c <main+0x1e1c>
					m2 = 1;
				}
				if(state == 20){
    20f0:	04 31       	cpi	r16, 0x14	; 20
    20f2:	11 05       	cpc	r17, r1
    20f4:	a9 f4       	brne	.+42     	; 0x2120 <main+0x1dd0>
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m4Dir = 0;  // ******* dir4 *******
    20f6:	80 91 4d 03 	lds	r24, 0x034D
    20fa:	8b 7f       	andi	r24, 0xFB	; 251
    20fc:	80 93 4d 03 	sts	0x034D, r24
					m4 = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2100:	80 91 4f 03 	lds	r24, 0x034F
    2104:	81 60       	ori	r24, 0x01	; 1
    2106:	80 93 4f 03 	sts	0x034F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    210a:	80 91 4e 03 	lds	r24, 0x034E
    210e:	8f 77       	andi	r24, 0x7F	; 127
    2110:	80 93 4e 03 	sts	0x034E, r24
    2114:	cc 24       	eor	r12, r12
    2116:	dd 24       	eor	r13, r13
    2118:	f1 e0       	ldi	r31, 0x01	; 1
    211a:	4f 2e       	mov	r4, r31
    211c:	51 2c       	mov	r5, r1
    211e:	31 c0       	rjmp	.+98     	; 0x2182 <main+0x1e32>
				}
				if(state == 21){
    2120:	05 31       	cpi	r16, 0x15	; 21
    2122:	11 05       	cpc	r17, r1
    2124:	d1 f1       	breq	.+116    	; 0x219a <main+0x1e4a>
					m2 = 1;
				}
				if(state == 22){
    2126:	06 31       	cpi	r16, 0x16	; 22
    2128:	11 05       	cpc	r17, r1
    212a:	a1 f4       	brne	.+40     	; 0x2154 <main+0x1e04>
					m4 = 0;
					m2 = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    212c:	80 91 4f 03 	lds	r24, 0x034F
    2130:	8e 7f       	andi	r24, 0xFE	; 254
    2132:	80 93 4f 03 	sts	0x034F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2136:	80 91 4e 03 	lds	r24, 0x034E
    213a:	80 68       	ori	r24, 0x80	; 128
    213c:	80 93 4e 03 	sts	0x034E, r24
					u_motorByte1.bits_in_motorByte1.m4Drop = 0;
    2140:	80 91 4d 03 	lds	r24, 0x034D
    2144:	87 7f       	andi	r24, 0xF7	; 247
    2146:	80 93 4d 03 	sts	0x034D, r24
    214a:	cc 24       	eor	r12, r12
    214c:	dd 24       	eor	r13, r13
    214e:	44 24       	eor	r4, r4
    2150:	55 24       	eor	r5, r5
    2152:	2f c0       	rjmp	.+94     	; 0x21b2 <main+0x1e62>
				}
				//*************************************************
				if(state == 23){
    2154:	07 31       	cpi	r16, 0x17	; 23
    2156:	11 05       	cpc	r17, r1
    2158:	49 f4       	brne	.+18     	; 0x216c <main+0x1e1c>
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    215a:	80 91 4c 03 	lds	r24, 0x034C
    215e:	80 61       	ori	r24, 0x10	; 16
    2160:	80 93 4c 03 	sts	0x034C, r24
    2164:	e1 e0       	ldi	r30, 0x01	; 1
    2166:	ce 2e       	mov	r12, r30
    2168:	d1 2c       	mov	r13, r1
    216a:	33 c0       	rjmp	.+102    	; 0x21d2 <main+0x1e82>
					m2 = 1;
				}
				if(state == 24){
    216c:	08 31       	cpi	r16, 0x18	; 24
    216e:	11 05       	cpc	r17, r1
    2170:	41 f4       	brne	.+16     	; 0x2182 <main+0x1e32>
					m2 = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2172:	80 91 4f 03 	lds	r24, 0x034F
    2176:	87 7f       	andi	r24, 0xF7	; 247
    2178:	80 93 4f 03 	sts	0x034F, r24
    217c:	cc 24       	eor	r12, r12
    217e:	dd 24       	eor	r13, r13
    2180:	31 c0       	rjmp	.+98     	; 0x21e4 <main+0x1e94>
						OrangutanLCD::clear();
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
				}
				if(state == 25){
    2182:	09 31       	cpi	r16, 0x19	; 25
    2184:	11 05       	cpc	r17, r1
    2186:	61 f4       	brne	.+24     	; 0x21a0 <main+0x1e50>
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;  // ******* dir2 *******
    2188:	80 91 4c 03 	lds	r24, 0x034C
    218c:	8f 7e       	andi	r24, 0xEF	; 239
    218e:	80 93 4c 03 	sts	0x034C, r24
    2192:	71 e0       	ldi	r23, 0x01	; 1
    2194:	c7 2e       	mov	r12, r23
    2196:	d1 2c       	mov	r13, r1
    2198:	28 c0       	rjmp	.+80     	; 0x21ea <main+0x1e9a>
    219a:	61 e0       	ldi	r22, 0x01	; 1
    219c:	c6 2e       	mov	r12, r22
    219e:	d1 2c       	mov	r13, r1
					m2 = 1;
				}
				if(state == 26){
    21a0:	0a 31       	cpi	r16, 0x1A	; 26
    21a2:	11 05       	cpc	r17, r1
    21a4:	31 f4       	brne	.+12     	; 0x21b2 <main+0x1e62>
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    21a6:	80 91 4f 03 	lds	r24, 0x034F
    21aa:	88 60       	ori	r24, 0x08	; 8
    21ac:	80 93 4f 03 	sts	0x034F, r24
    21b0:	2d c0       	rjmp	.+90     	; 0x220c <main+0x1ebc>
				}
				if(state == 27){
    21b2:	0b 31       	cpi	r16, 0x1B	; 27
    21b4:	11 05       	cpc	r17, r1
    21b6:	69 f4       	brne	.+26     	; 0x21d2 <main+0x1e82>
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m5Drop = 1;
    21b8:	80 91 4d 03 	lds	r24, 0x034D
    21bc:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.m5Dir = 0;
    21be:	8f 7d       	andi	r24, 0xDF	; 223
    21c0:	80 93 4d 03 	sts	0x034D, r24
    21c4:	cc 24       	eor	r12, r12
    21c6:	dd 24       	eor	r13, r13
    21c8:	e1 e0       	ldi	r30, 0x01	; 1
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	fe 83       	std	Y+6, r31	; 0x06
    21ce:	ed 83       	std	Y+5, r30	; 0x05
    21d0:	25 c0       	rjmp	.+74     	; 0x221c <main+0x1ecc>
					m5 = 1;
				}
				if(state == 28){
    21d2:	0c 31       	cpi	r16, 0x1C	; 28
    21d4:	11 05       	cpc	r17, r1
    21d6:	31 f4       	brne	.+12     	; 0x21e4 <main+0x1e94>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    21d8:	80 91 4f 03 	lds	r24, 0x034F
    21dc:	8d 7f       	andi	r24, 0xFD	; 253
    21de:	80 93 4f 03 	sts	0x034F, r24
    21e2:	28 c0       	rjmp	.+80     	; 0x2234 <main+0x1ee4>
				}
				if(state == 29){
    21e4:	0d 31       	cpi	r16, 0x1D	; 29
    21e6:	11 05       	cpc	r17, r1
    21e8:	b9 f1       	breq	.+110    	; 0x2258 <main+0x1f08>
					m2 = 1;
				}
				if(state == 30){
    21ea:	0e 31       	cpi	r16, 0x1E	; 30
    21ec:	11 05       	cpc	r17, r1
    21ee:	71 f4       	brne	.+28     	; 0x220c <main+0x1ebc>
					m5 = 0;
						u_motorByte1.bits_in_motorByte1.m5Drop = 0;
    21f0:	80 91 4d 03 	lds	r24, 0x034D
    21f4:	8f 7b       	andi	r24, 0xBF	; 191
    21f6:	80 93 4d 03 	sts	0x034D, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    21fa:	80 91 4f 03 	lds	r24, 0x034F
    21fe:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    2200:	8b 7f       	andi	r24, 0xFB	; 251
    2202:	80 93 4f 03 	sts	0x034F, r24
    2206:	1e 82       	std	Y+6, r1	; 0x06
    2208:	1d 82       	std	Y+5, r1	; 0x05
    220a:	35 c0       	rjmp	.+106    	; 0x2276 <main+0x1f26>
				}
				if(state == 31){
    220c:	0f 31       	cpi	r16, 0x1F	; 31
    220e:	11 05       	cpc	r17, r1
    2210:	29 f4       	brne	.+10     	; 0x221c <main+0x1ecc>
					m2 = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2212:	80 91 4e 03 	lds	r24, 0x034E
    2216:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    2218:	80 61       	ori	r24, 0x10	; 16
    221a:	19 c0       	rjmp	.+50     	; 0x224e <main+0x1efe>
				}
				if(state == 32){
    221c:	00 32       	cpi	r16, 0x20	; 32
    221e:	11 05       	cpc	r17, r1
    2220:	49 f4       	brne	.+18     	; 0x2234 <main+0x1ee4>
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;
    2222:	80 91 4c 03 	lds	r24, 0x034C
    2226:	8f 7e       	andi	r24, 0xEF	; 239
    2228:	80 93 4c 03 	sts	0x034C, r24
    222c:	51 e0       	ldi	r21, 0x01	; 1
    222e:	c5 2e       	mov	r12, r21
    2230:	d1 2c       	mov	r13, r1
    2232:	3b c0       	rjmp	.+118    	; 0x22aa <main+0x1f5a>
					m2 = 1;
				}
				if(state == 33){
    2234:	01 32       	cpi	r16, 0x21	; 33
    2236:	11 05       	cpc	r17, r1
    2238:	91 f4       	brne	.+36     	; 0x225e <main+0x1f0e>
					m2 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    223a:	80 91 4c 03 	lds	r24, 0x034C
    223e:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.m1Drop = 1;
    2240:	84 60       	ori	r24, 0x04	; 4
    2242:	80 93 4c 03 	sts	0x034C, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2246:	80 91 4e 03 	lds	r24, 0x034E
    224a:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    224c:	8f 7e       	andi	r24, 0xEF	; 239
    224e:	80 93 4e 03 	sts	0x034E, r24
    2252:	cc 24       	eor	r12, r12
    2254:	dd 24       	eor	r13, r13
    2256:	29 c0       	rjmp	.+82     	; 0x22aa <main+0x1f5a>
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	c4 2e       	mov	r12, r20
    225c:	d1 2c       	mov	r13, r1
				}
				if(state == 34){
    225e:	02 32       	cpi	r16, 0x22	; 34
    2260:	11 05       	cpc	r17, r1
    2262:	49 f4       	brne	.+18     	; 0x2276 <main+0x1f26>
					u_motorByte0.bits_in_motorByte0.m1Dir = 0;
    2264:	80 91 4c 03 	lds	r24, 0x034C
    2268:	8d 7f       	andi	r24, 0xFD	; 253
    226a:	80 93 4c 03 	sts	0x034C, r24
    226e:	31 e0       	ldi	r19, 0x01	; 1
    2270:	63 2e       	mov	r6, r19
    2272:	71 2c       	mov	r7, r1
    2274:	1a c0       	rjmp	.+52     	; 0x22aa <main+0x1f5a>
					m1 = 1;
					}
				if(state == 35){
    2276:	03 32       	cpi	r16, 0x23	; 35
    2278:	11 05       	cpc	r17, r1
    227a:	b9 f4       	brne	.+46     	; 0x22aa <main+0x1f5a>
					m1 = 0;
					u_motorByte0.bits_in_motorByte0.m1Drop = 0;
    227c:	80 91 4c 03 	lds	r24, 0x034C
    2280:	8b 7f       	andi	r24, 0xFB	; 251
    2282:	80 93 4c 03 	sts	0x034C, r24
					if(print35 == 1){
    2286:	2f 85       	ldd	r18, Y+15	; 0x0f
    2288:	38 89       	ldd	r19, Y+16	; 0x10
    228a:	21 30       	cpi	r18, 0x01	; 1
    228c:	31 05       	cpc	r19, r1
    228e:	19 f0       	breq	.+6      	; 0x2296 <main+0x1f46>
    2290:	66 24       	eor	r6, r6
    2292:	77 24       	eor	r7, r7
    2294:	0a c0       	rjmp	.+20     	; 0x22aa <main+0x1f5a>
						OrangutanLCD::clear();
    2296:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    229a:	8e e0       	ldi	r24, 0x0E	; 14
    229c:	93 e0       	ldi	r25, 0x03	; 3
    229e:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
    22a2:	66 24       	eor	r6, r6
    22a4:	77 24       	eor	r7, r7
    22a6:	18 8a       	std	Y+16, r1	; 0x10
    22a8:	1f 86       	std	Y+15, r1	; 0x0f





				if( ((counter - counterRef) % (totallength1) ) < (steplength1) && m1)  //check if it is in the right period of the loop to send high
    22aa:	e9 8d       	ldd	r30, Y+25	; 0x19
    22ac:	fa 8d       	ldd	r31, Y+26	; 0x1a
    22ae:	ee 19       	sub	r30, r14
    22b0:	ff 09       	sbc	r31, r15
    22b2:	60 91 39 03 	lds	r22, 0x0339
    22b6:	70 91 3a 03 	lds	r23, 0x033A
    22ba:	cf 01       	movw	r24, r30
    22bc:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    22c0:	20 91 2f 03 	lds	r18, 0x032F
    22c4:	30 91 30 03 	lds	r19, 0x0330
    22c8:	82 17       	cp	r24, r18
    22ca:	93 07       	cpc	r25, r19
    22cc:	3c f4       	brge	.+14     	; 0x22dc <main+0x1f8c>
    22ce:	61 14       	cp	r6, r1
    22d0:	71 04       	cpc	r7, r1
    22d2:	21 f0       	breq	.+8      	; 0x22dc <main+0x1f8c>
				{
					u_motorByte0.bits_in_motorByte0.m1Step = 1; // set bit 0
    22d4:	80 91 4c 03 	lds	r24, 0x034C
    22d8:	81 60       	ori	r24, 0x01	; 1
    22da:	03 c0       	rjmp	.+6      	; 0x22e2 <main+0x1f92>
				}
				else
				{
					u_motorByte0.bits_in_motorByte0.m1Step = 0; // set bit 0
    22dc:	80 91 4c 03 	lds	r24, 0x034C
    22e0:	8e 7f       	andi	r24, 0xFE	; 254
    22e2:	80 93 4c 03 	sts	0x034C, r24
				}

				if( ((counter - counterRef) % (totallength2) ) < (steplength2) && m2)
    22e6:	60 91 3b 03 	lds	r22, 0x033B
    22ea:	70 91 3c 03 	lds	r23, 0x033C
    22ee:	cf 01       	movw	r24, r30
    22f0:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    22f4:	20 91 31 03 	lds	r18, 0x0331
    22f8:	30 91 32 03 	lds	r19, 0x0332
    22fc:	82 17       	cp	r24, r18
    22fe:	93 07       	cpc	r25, r19
    2300:	3c f4       	brge	.+14     	; 0x2310 <main+0x1fc0>
    2302:	c1 14       	cp	r12, r1
    2304:	d1 04       	cpc	r13, r1
    2306:	21 f0       	breq	.+8      	; 0x2310 <main+0x1fc0>
				{
					u_motorByte0.bits_in_motorByte0.m2Step = 1; // set bit 1
    2308:	80 91 4c 03 	lds	r24, 0x034C
    230c:	88 60       	ori	r24, 0x08	; 8
    230e:	03 c0       	rjmp	.+6      	; 0x2316 <main+0x1fc6>
				}
				else
				{
					u_motorByte0.bits_in_motorByte0.m2Step = 0; // set bit 1
    2310:	80 91 4c 03 	lds	r24, 0x034C
    2314:	87 7f       	andi	r24, 0xF7	; 247
    2316:	80 93 4c 03 	sts	0x034C, r24
				}

				if( ((counter - counterRef) % (totallength3) ) < (steplength3) && m3)
    231a:	60 91 3d 03 	lds	r22, 0x033D
    231e:	70 91 3e 03 	lds	r23, 0x033E
    2322:	cf 01       	movw	r24, r30
    2324:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    2328:	20 91 33 03 	lds	r18, 0x0333
    232c:	30 91 34 03 	lds	r19, 0x0334
    2330:	82 17       	cp	r24, r18
    2332:	93 07       	cpc	r25, r19
    2334:	3c f4       	brge	.+14     	; 0x2344 <main+0x1ff4>
    2336:	21 14       	cp	r2, r1
    2338:	31 04       	cpc	r3, r1
    233a:	21 f0       	breq	.+8      	; 0x2344 <main+0x1ff4>
				{
					u_motorByte0.bits_in_motorByte0.m3Step = 1; // set bit 1
    233c:	80 91 4c 03 	lds	r24, 0x034C
    2340:	80 64       	ori	r24, 0x40	; 64
    2342:	03 c0       	rjmp	.+6      	; 0x234a <main+0x1ffa>
				}
				else
				{
					u_motorByte0.bits_in_motorByte0.m3Step = 0; // set bit 1
    2344:	80 91 4c 03 	lds	r24, 0x034C
    2348:	8f 7b       	andi	r24, 0xBF	; 191
    234a:	80 93 4c 03 	sts	0x034C, r24
				}

				if( ((counter - counterRef) % (totallength4) ) < (steplength4) && m4)
    234e:	60 91 3f 03 	lds	r22, 0x033F
    2352:	70 91 40 03 	lds	r23, 0x0340
    2356:	cf 01       	movw	r24, r30
    2358:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    235c:	20 91 35 03 	lds	r18, 0x0335
    2360:	30 91 36 03 	lds	r19, 0x0336
    2364:	82 17       	cp	r24, r18
    2366:	93 07       	cpc	r25, r19
    2368:	3c f4       	brge	.+14     	; 0x2378 <main+0x2028>
    236a:	41 14       	cp	r4, r1
    236c:	51 04       	cpc	r5, r1
    236e:	21 f0       	breq	.+8      	; 0x2378 <main+0x2028>
				{
					u_motorByte1.bits_in_motorByte1.m4Step = 1; // set bit 1
    2370:	80 91 4d 03 	lds	r24, 0x034D
    2374:	82 60       	ori	r24, 0x02	; 2
    2376:	03 c0       	rjmp	.+6      	; 0x237e <main+0x202e>
				}
				else
				{
					u_motorByte1.bits_in_motorByte1.m4Step = 0; // set bit 1
    2378:	80 91 4d 03 	lds	r24, 0x034D
    237c:	8d 7f       	andi	r24, 0xFD	; 253
    237e:	80 93 4d 03 	sts	0x034D, r24
				}

				if( ((counter - counterRefFive) % (totallength5) ) < (steplength5) && m5)
    2382:	60 91 41 03 	lds	r22, 0x0341
    2386:	70 91 42 03 	lds	r23, 0x0342
    238a:	89 8d       	ldd	r24, Y+25	; 0x19
    238c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    238e:	4b 89       	ldd	r20, Y+19	; 0x13
    2390:	5c 89       	ldd	r21, Y+20	; 0x14
    2392:	84 1b       	sub	r24, r20
    2394:	95 0b       	sbc	r25, r21
    2396:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    239a:	20 91 37 03 	lds	r18, 0x0337
    239e:	30 91 38 03 	lds	r19, 0x0338
    23a2:	82 17       	cp	r24, r18
    23a4:	93 07       	cpc	r25, r19
    23a6:	44 f4       	brge	.+16     	; 0x23b8 <main+0x2068>
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	89 2b       	or	r24, r25
    23ae:	21 f0       	breq	.+8      	; 0x23b8 <main+0x2068>
				{
					u_motorByte1.bits_in_motorByte1.m5Step = 1; // set bit 1
    23b0:	80 91 4d 03 	lds	r24, 0x034D
    23b4:	80 61       	ori	r24, 0x10	; 16
    23b6:	03 c0       	rjmp	.+6      	; 0x23be <main+0x206e>
				}
				else
				{
					u_motorByte1.bits_in_motorByte1.m5Step = 0; // set bit 1
    23b8:	80 91 4d 03 	lds	r24, 0x034D
    23bc:	8f 7e       	andi	r24, 0xEF	; 239
    23be:	80 93 4d 03 	sts	0x034D, r24
				}

				i2c_start(I2C1+I2C_WRITE);
    23c2:	80 e4       	ldi	r24, 0x40	; 64
    23c4:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
				i2c_write(0x2);									// write command byte
    23c8:	82 e0       	ldi	r24, 0x02	; 2
    23ca:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
				i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
    23ce:	80 91 4c 03 	lds	r24, 0x034C
    23d2:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
       	 		i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
    23d6:	80 91 4d 03 	lds	r24, 0x034D
    23da:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
       		 	i2c_stop();                            // set stop conditon = release bus
    23de:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8i2c_stopv>

				i2c_start(I2C2+I2C_WRITE);
    23e2:	82 e4       	ldi	r24, 0x42	; 66
    23e4:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
				i2c_write(0x2);
    23e8:	82 e0       	ldi	r24, 0x02	; 2
    23ea:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
				i2c_write(u_outputByte0.outputByte0);
    23ee:	80 91 4e 03 	lds	r24, 0x034E
    23f2:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
				i2c_write(u_outputByte1.outputByte1);
    23f6:	80 91 4f 03 	lds	r24, 0x034F
    23fa:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>

				counter ++;
    23fe:	e9 8d       	ldd	r30, Y+25	; 0x19
    2400:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2402:	31 96       	adiw	r30, 0x01	; 1
    2404:	fa 8f       	std	Y+26, r31	; 0x1a
    2406:	e9 8f       	std	Y+25, r30	; 0x19
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>


		if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("SECOND B");
			while(state != -1)
    2410:	ff ef       	ldi	r31, 0xFF	; 255
    2412:	0f 3f       	cpi	r16, 0xFF	; 255
    2414:	1f 07       	cpc	r17, r31
    2416:	09 f0       	breq	.+2      	; 0x241a <main+0x20ca>
    2418:	c2 ca       	rjmp	.-2684   	; 0x199e <main+0x164e>
				delay_ms(1);
   		 	}
		}


		if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
    2420:	88 23       	and	r24, r24
    2422:	09 f0       	breq	.+2      	; 0x2426 <main+0x20d6>
    2424:	63 c6       	rjmp	.+3270   	; 0x30ec <main+0x2d9c>
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
    242c:	88 23       	and	r24, r24
    242e:	09 f4       	brne	.+2      	; 0x2432 <main+0x20e2>
    2430:	5d c6       	rjmp	.+3258   	; 0x30ec <main+0x2d9c>
			OrangutanLCD::gotoXY(7,0);
    2432:	87 e0       	ldi	r24, 0x07	; 7
    2434:	60 e0       	ldi	r22, 0x00	; 0
    2436:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("BOTH B");
    243a:	84 e2       	ldi	r24, 0x24	; 36
    243c:	93 e0       	ldi	r25, 0x03	; 3
    243e:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
				}
				if(state == 33 && counter - counterRef > pWait){
					state = 34;
					counterRef = counter;
				}
				if(state == 34 && counter - counterRef > totallength1*m1LoadPlate){
    2442:	20 ed       	ldi	r18, 0xD0	; 208
    2444:	82 2e       	mov	r8, r18
    2446:	27 e0       	ldi	r18, 0x07	; 7
    2448:	92 2e       	mov	r9, r18
    244a:	4b c6       	rjmp	.+3222   	; 0x30e2 <main+0x2d92>
		if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("BOTH B");
			while(state != -1)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    244c:	84 e4       	ldi	r24, 0x44	; 68
    244e:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2458:	85 e4       	ldi	r24, 0x45	; 69
    245a:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    245e:	0e 94 9a 19 	call	0x3334	; 0x3334 <_Z11i2c_readAckv>
    2462:	80 93 50 03 	sts	0x0350, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2466:	0e 94 a4 19 	call	0x3348	; 0x3348 <_Z11i2c_readNakv>
    246a:	80 93 51 03 	sts	0x0351, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    246e:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8i2c_stopv>
				if(state != 0){
    2472:	01 15       	cp	r16, r1
    2474:	11 05       	cpc	r17, r1
    2476:	79 f0       	breq	.+30     	; 0x2496 <main+0x2146>
					OrangutanLCD::gotoXY(0,1);
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	61 e0       	ldi	r22, 0x01	; 1
    247c:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    2480:	89 ef       	ldi	r24, 0xF9	; 249
    2482:	92 e0       	ldi	r25, 0x02	; 2
    2484:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
    2488:	b8 01       	movw	r22, r16
    248a:	88 27       	eor	r24, r24
    248c:	77 fd       	sbrc	r23, 7
    248e:	80 95       	com	r24
    2490:	98 2f       	mov	r25, r24
    2492:	0e 94 56 1c 	call	0x38ac	; 0x38ac <_ZN12OrangutanLCD5printEl>
					OrangutanLCD::print(state);
				}

				if(stateButton == 0 && OrangutanDigital::isInputHigh(IO_D0)){
    2496:	a1 14       	cp	r10, r1
    2498:	b1 04       	cpc	r11, r1
    249a:	09 f0       	breq	.+2      	; 0x249e <main+0x214e>
    249c:	b7 c6       	rjmp	.+3438   	; 0x320c <main+0x2ebc>
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
    24a4:	88 23       	and	r24, r24
    24a6:	e1 f1       	breq	.+120    	; 0x2520 <main+0x21d0>
    24a8:	29 8d       	ldd	r18, Y+25	; 0x19
    24aa:	3a 8d       	ldd	r19, Y+26	; 0x1a
    24ac:	3a 87       	std	Y+10, r19	; 0x0a
    24ae:	29 87       	std	Y+9, r18	; 0x09
					counterRefPush = counter;
					stateButton = 1;
				}
				if(stateButton == 1){
					if(counter - counterRefPush > 15){
    24b0:	89 8d       	ldd	r24, Y+25	; 0x19
    24b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    24b4:	49 85       	ldd	r20, Y+9	; 0x09
    24b6:	5a 85       	ldd	r21, Y+10	; 0x0a
    24b8:	84 1b       	sub	r24, r20
    24ba:	95 0b       	sbc	r25, r21
    24bc:	40 97       	sbiw	r24, 0x10	; 16
    24be:	5c f0       	brlt	.+22     	; 0x24d6 <main+0x2186>
						if(!OrangutanDigital::isInputHigh(IO_D0)){
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
    24c6:	88 23       	and	r24, r24
    24c8:	09 f0       	breq	.+2      	; 0x24cc <main+0x217c>
    24ca:	a6 c6       	rjmp	.+3404   	; 0x3218 <main+0x2ec8>
    24cc:	89 8d       	ldd	r24, Y+25	; 0x19
    24ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    24d0:	98 87       	std	Y+8, r25	; 0x08
    24d2:	8f 83       	std	Y+7, r24	; 0x07
    24d4:	0b c0       	rjmp	.+22     	; 0x24ec <main+0x219c>
							counterRefRel = counter;
							stateButton = 2;
						}
					}
					else if(!OrangutanDigital::isInputHigh(IO_D0)){
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
    24dc:	88 23       	and	r24, r24
    24de:	09 f0       	breq	.+2      	; 0x24e2 <main+0x2192>
    24e0:	9b c6       	rjmp	.+3382   	; 0x3218 <main+0x2ec8>
    24e2:	18 c0       	rjmp	.+48     	; 0x2514 <main+0x21c4>
						stateButton = 0;
					}
				}
				if(stateButton == 2){
    24e4:	92 e0       	ldi	r25, 0x02	; 2
    24e6:	a9 16       	cp	r10, r25
    24e8:	b1 04       	cpc	r11, r1
    24ea:	d1 f4       	brne	.+52     	; 0x2520 <main+0x21d0>
					if(OrangutanDigital::isInputHigh(IO_D0)){
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	0e 94 91 00 	call	0x122	; 0x122 <_ZN16OrangutanDigital11isInputHighEh>
    24f2:	88 23       	and	r24, r24
    24f4:	29 f0       	breq	.+10     	; 0x2500 <main+0x21b0>
    24f6:	e9 8d       	ldd	r30, Y+25	; 0x19
    24f8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    24fa:	fa 87       	std	Y+10, r31	; 0x0a
    24fc:	e9 87       	std	Y+9, r30	; 0x09
    24fe:	8c c6       	rjmp	.+3352   	; 0x3218 <main+0x2ec8>
						stateButton = 1;
						counterRefPush = counter;
					}
					else if(counter - counterRefRel > 15){
    2500:	89 8d       	ldd	r24, Y+25	; 0x19
    2502:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2504:	2f 81       	ldd	r18, Y+7	; 0x07
    2506:	38 85       	ldd	r19, Y+8	; 0x08
    2508:	82 1b       	sub	r24, r18
    250a:	93 0b       	sbc	r25, r19
    250c:	40 97       	sbiw	r24, 0x10	; 16
    250e:	2c f0       	brlt	.+10     	; 0x251a <main+0x21ca>
    2510:	1a 82       	std	Y+2, r1	; 0x02
    2512:	19 82       	std	Y+1, r1	; 0x01
    2514:	aa 24       	eor	r10, r10
    2516:	bb 24       	eor	r11, r11
    2518:	03 c0       	rjmp	.+6      	; 0x2520 <main+0x21d0>
    251a:	92 e0       	ldi	r25, 0x02	; 2
    251c:	a9 2e       	mov	r10, r25
    251e:	b1 2c       	mov	r11, r1
					}
				}

				//state conversions
	
				if(state == 0 && button == 0){
    2520:	01 15       	cp	r16, r1
    2522:	11 05       	cpc	r17, r1
    2524:	61 f4       	brne	.+24     	; 0x253e <main+0x21ee>
    2526:	49 81       	ldd	r20, Y+1	; 0x01
    2528:	5a 81       	ldd	r21, Y+2	; 0x02
    252a:	45 2b       	or	r20, r21
    252c:	09 f0       	breq	.+2      	; 0x2530 <main+0x21e0>
    252e:	65 c0       	rjmp	.+202    	; 0x25fa <main+0x22aa>
    2530:	e9 8c       	ldd	r14, Y+25	; 0x19
    2532:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	9a 83       	std	Y+2, r25	; 0x02
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	03 c0       	rjmp	.+6      	; 0x2544 <main+0x21f4>
					button = 1;
					state = 1;
					counterRef = counter;
				}
				if(state == 1 && counter - counterRef > totallength1*m1LoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    253e:	01 30       	cpi	r16, 0x01	; 1
    2540:	11 05       	cpc	r17, r1
    2542:	b9 f4       	brne	.+46     	; 0x2572 <main+0x2222>
    2544:	89 8d       	ldd	r24, Y+25	; 0x19
    2546:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2548:	8e 19       	sub	r24, r14
    254a:	9f 09       	sbc	r25, r15
    254c:	20 91 39 03 	lds	r18, 0x0339
    2550:	30 91 3a 03 	lds	r19, 0x033A
    2554:	f9 01       	movw	r30, r18
    2556:	e8 9d       	mul	r30, r8
    2558:	90 01       	movw	r18, r0
    255a:	e9 9d       	mul	r30, r9
    255c:	30 0d       	add	r19, r0
    255e:	f8 9d       	mul	r31, r8
    2560:	30 0d       	add	r19, r0
    2562:	11 24       	eor	r1, r1
    2564:	28 17       	cp	r18, r24
    2566:	39 07       	cpc	r19, r25
    2568:	0c f0       	brlt	.+2      	; 0x256c <main+0x221c>
    256a:	61 c0       	rjmp	.+194    	; 0x262e <main+0x22de>
    256c:	e9 8c       	ldd	r14, Y+25	; 0x19
    256e:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2570:	03 c0       	rjmp	.+6      	; 0x2578 <main+0x2228>
						state = 2;
					counterRef = counter;
				}
				if(state == 2 && counter - counterRef > pWait){
    2572:	02 30       	cpi	r16, 0x02	; 2
    2574:	11 05       	cpc	r17, r1
    2576:	59 f4       	brne	.+22     	; 0x258e <main+0x223e>
    2578:	89 8d       	ldd	r24, Y+25	; 0x19
    257a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    257c:	8e 19       	sub	r24, r14
    257e:	9f 09       	sbc	r25, r15
    2580:	85 36       	cpi	r24, 0x65	; 101
    2582:	91 05       	cpc	r25, r1
    2584:	0c f4       	brge	.+2      	; 0x2588 <main+0x2238>
    2586:	63 c0       	rjmp	.+198    	; 0x264e <main+0x22fe>
    2588:	e9 8c       	ldd	r14, Y+25	; 0x19
    258a:	fa 8c       	ldd	r15, Y+26	; 0x1a
    258c:	03 c0       	rjmp	.+6      	; 0x2594 <main+0x2244>
					state = 3;
					counterRef = counter;
				}
				if(state == 3 && counter - counterRef > totallength2*m2HomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    258e:	03 30       	cpi	r16, 0x03	; 3
    2590:	11 05       	cpc	r17, r1
    2592:	b9 f4       	brne	.+46     	; 0x25c2 <main+0x2272>
    2594:	89 8d       	ldd	r24, Y+25	; 0x19
    2596:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2598:	8e 19       	sub	r24, r14
    259a:	9f 09       	sbc	r25, r15
    259c:	20 91 3b 03 	lds	r18, 0x033B
    25a0:	30 91 3c 03 	lds	r19, 0x033C
    25a4:	a9 01       	movw	r20, r18
    25a6:	48 9d       	mul	r20, r8
    25a8:	90 01       	movw	r18, r0
    25aa:	49 9d       	mul	r20, r9
    25ac:	30 0d       	add	r19, r0
    25ae:	58 9d       	mul	r21, r8
    25b0:	30 0d       	add	r19, r0
    25b2:	11 24       	eor	r1, r1
    25b4:	28 17       	cp	r18, r24
    25b6:	39 07       	cpc	r19, r25
    25b8:	0c f0       	brlt	.+2      	; 0x25bc <main+0x226c>
    25ba:	59 c0       	rjmp	.+178    	; 0x266e <main+0x231e>
    25bc:	e9 8c       	ldd	r14, Y+25	; 0x19
    25be:	fa 8c       	ldd	r15, Y+26	; 0x1a
    25c0:	03 c0       	rjmp	.+6      	; 0x25c8 <main+0x2278>
					state = 4;
					counterRef = counter;
				}
				if(state == 4 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    25c2:	04 30       	cpi	r16, 0x04	; 4
    25c4:	11 05       	cpc	r17, r1
    25c6:	59 f4       	brne	.+22     	; 0x25de <main+0x228e>
    25c8:	89 8d       	ldd	r24, Y+25	; 0x19
    25ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25cc:	8e 19       	sub	r24, r14
    25ce:	9f 09       	sbc	r25, r15
    25d0:	89 5e       	subi	r24, 0xE9	; 233
    25d2:	93 40       	sbci	r25, 0x03	; 3
    25d4:	0c f4       	brge	.+2      	; 0x25d8 <main+0x2288>
    25d6:	67 c0       	rjmp	.+206    	; 0x26a6 <main+0x2356>
    25d8:	e9 8c       	ldd	r14, Y+25	; 0x19
    25da:	fa 8c       	ldd	r15, Y+26	; 0x1a
    25dc:	03 c0       	rjmp	.+6      	; 0x25e4 <main+0x2294>
					state = 5;
					counterRef = counter;
				}
				if(state == 5 && counter - counterRef > pWait){
    25de:	05 30       	cpi	r16, 0x05	; 5
    25e0:	11 05       	cpc	r17, r1
    25e2:	59 f4       	brne	.+22     	; 0x25fa <main+0x22aa>
    25e4:	89 8d       	ldd	r24, Y+25	; 0x19
    25e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25e8:	8e 19       	sub	r24, r14
    25ea:	9f 09       	sbc	r25, r15
    25ec:	85 36       	cpi	r24, 0x65	; 101
    25ee:	91 05       	cpc	r25, r1
    25f0:	0c f4       	brge	.+2      	; 0x25f4 <main+0x22a4>
    25f2:	66 c0       	rjmp	.+204    	; 0x26c0 <main+0x2370>
    25f4:	e9 8c       	ldd	r14, Y+25	; 0x19
    25f6:	fa 8c       	ldd	r15, Y+26	; 0x1a
    25f8:	03 c0       	rjmp	.+6      	; 0x2600 <main+0x22b0>
						state = 6;
					counterRef = counter;
				}
				if(state == 6 && counter - counterRef > totallength2*m2Brush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    25fa:	06 30       	cpi	r16, 0x06	; 6
    25fc:	11 05       	cpc	r17, r1
    25fe:	c9 f4       	brne	.+50     	; 0x2632 <main+0x22e2>
    2600:	89 8d       	ldd	r24, Y+25	; 0x19
    2602:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2604:	8e 19       	sub	r24, r14
    2606:	9f 09       	sbc	r25, r15
    2608:	20 91 3b 03 	lds	r18, 0x033B
    260c:	30 91 3c 03 	lds	r19, 0x033C
    2610:	f9 01       	movw	r30, r18
    2612:	e8 9d       	mul	r30, r8
    2614:	90 01       	movw	r18, r0
    2616:	e9 9d       	mul	r30, r9
    2618:	30 0d       	add	r19, r0
    261a:	f8 9d       	mul	r31, r8
    261c:	30 0d       	add	r19, r0
    261e:	11 24       	eor	r1, r1
    2620:	28 17       	cp	r18, r24
    2622:	39 07       	cpc	r19, r25
    2624:	0c f0       	brlt	.+2      	; 0x2628 <main+0x22d8>
    2626:	68 c0       	rjmp	.+208    	; 0x26f8 <main+0x23a8>
    2628:	e9 8c       	ldd	r14, Y+25	; 0x19
    262a:	fa 8c       	ldd	r15, Y+26	; 0x1a
    262c:	05 c0       	rjmp	.+10     	; 0x2638 <main+0x22e8>
    262e:	01 e0       	ldi	r16, 0x01	; 1
    2630:	10 e0       	ldi	r17, 0x00	; 0
					state = 7;
					counterRef = counter;
				}
				if(state == 7 && counter - counterRef > mWait){
    2632:	07 30       	cpi	r16, 0x07	; 7
    2634:	11 05       	cpc	r17, r1
    2636:	69 f4       	brne	.+26     	; 0x2652 <main+0x2302>
    2638:	89 8d       	ldd	r24, Y+25	; 0x19
    263a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    263c:	8e 19       	sub	r24, r14
    263e:	9f 09       	sbc	r25, r15
    2640:	85 36       	cpi	r24, 0x65	; 101
    2642:	91 05       	cpc	r25, r1
    2644:	0c f4       	brge	.+2      	; 0x2648 <main+0x22f8>
    2646:	68 c0       	rjmp	.+208    	; 0x2718 <main+0x23c8>
    2648:	e9 8c       	ldd	r14, Y+25	; 0x19
    264a:	fa 8c       	ldd	r15, Y+26	; 0x1a
    264c:	05 c0       	rjmp	.+10     	; 0x2658 <main+0x2308>
    264e:	02 e0       	ldi	r16, 0x02	; 2
    2650:	10 e0       	ldi	r17, 0x00	; 0
					state = 8;
					counterRef = counter;
				}
				if(state == 8 && counter - counterRef > pWait){
    2652:	08 30       	cpi	r16, 0x08	; 8
    2654:	11 05       	cpc	r17, r1
    2656:	69 f4       	brne	.+26     	; 0x2672 <main+0x2322>
    2658:	89 8d       	ldd	r24, Y+25	; 0x19
    265a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    265c:	8e 19       	sub	r24, r14
    265e:	9f 09       	sbc	r25, r15
    2660:	85 36       	cpi	r24, 0x65	; 101
    2662:	91 05       	cpc	r25, r1
    2664:	0c f4       	brge	.+2      	; 0x2668 <main+0x2318>
    2666:	71 c0       	rjmp	.+226    	; 0x274a <main+0x23fa>
    2668:	e9 8c       	ldd	r14, Y+25	; 0x19
    266a:	fa 8c       	ldd	r15, Y+26	; 0x1a
    266c:	05 c0       	rjmp	.+10     	; 0x2678 <main+0x2328>
    266e:	03 e0       	ldi	r16, 0x03	; 3
    2670:	10 e0       	ldi	r17, 0x00	; 0
					state = 9;
						counterRef = counter;
				}
					if(state == 9 && counter - counterRef > totallength2*m2HalfPlate){
    2672:	09 30       	cpi	r16, 0x09	; 9
    2674:	11 05       	cpc	r17, r1
    2676:	c9 f4       	brne	.+50     	; 0x26aa <main+0x235a>
    2678:	89 8d       	ldd	r24, Y+25	; 0x19
    267a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    267c:	8e 19       	sub	r24, r14
    267e:	9f 09       	sbc	r25, r15
    2680:	20 91 3b 03 	lds	r18, 0x033B
    2684:	30 91 3c 03 	lds	r19, 0x033C
    2688:	a9 01       	movw	r20, r18
    268a:	48 9d       	mul	r20, r8
    268c:	90 01       	movw	r18, r0
    268e:	49 9d       	mul	r20, r9
    2690:	30 0d       	add	r19, r0
    2692:	58 9d       	mul	r21, r8
    2694:	30 0d       	add	r19, r0
    2696:	11 24       	eor	r1, r1
    2698:	28 17       	cp	r18, r24
    269a:	39 07       	cpc	r19, r25
    269c:	0c f0       	brlt	.+2      	; 0x26a0 <main+0x2350>
    269e:	71 c0       	rjmp	.+226    	; 0x2782 <main+0x2432>
    26a0:	e9 8c       	ldd	r14, Y+25	; 0x19
    26a2:	fa 8c       	ldd	r15, Y+26	; 0x1a
    26a4:	05 c0       	rjmp	.+10     	; 0x26b0 <main+0x2360>
    26a6:	04 e0       	ldi	r16, 0x04	; 4
    26a8:	10 e0       	ldi	r17, 0x00	; 0
					state = 10;
					counterRef = counter;
				}
				if(state == 10 && counter - counterRef > pWait){
    26aa:	0a 30       	cpi	r16, 0x0A	; 10
    26ac:	11 05       	cpc	r17, r1
    26ae:	51 f4       	brne	.+20     	; 0x26c4 <main+0x2374>
    26b0:	89 8d       	ldd	r24, Y+25	; 0x19
    26b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26b4:	8e 19       	sub	r24, r14
    26b6:	9f 09       	sbc	r25, r15
    26b8:	85 36       	cpi	r24, 0x65	; 101
    26ba:	91 05       	cpc	r25, r1
    26bc:	34 f4       	brge	.+12     	; 0x26ca <main+0x237a>
    26be:	71 c0       	rjmp	.+226    	; 0x27a2 <main+0x2452>
    26c0:	05 e0       	ldi	r16, 0x05	; 5
    26c2:	10 e0       	ldi	r17, 0x00	; 0
					state = 11;
				}
				if(state == 11 && counter - counterRef > totallength2*m2HalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    26c4:	0b 30       	cpi	r16, 0x0B	; 11
    26c6:	11 05       	cpc	r17, r1
    26c8:	c9 f4       	brne	.+50     	; 0x26fc <main+0x23ac>
    26ca:	89 8d       	ldd	r24, Y+25	; 0x19
    26cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26ce:	8e 19       	sub	r24, r14
    26d0:	9f 09       	sbc	r25, r15
    26d2:	20 91 3b 03 	lds	r18, 0x033B
    26d6:	30 91 3c 03 	lds	r19, 0x033C
    26da:	f9 01       	movw	r30, r18
    26dc:	e8 9d       	mul	r30, r8
    26de:	90 01       	movw	r18, r0
    26e0:	e9 9d       	mul	r30, r9
    26e2:	30 0d       	add	r19, r0
    26e4:	f8 9d       	mul	r31, r8
    26e6:	30 0d       	add	r19, r0
    26e8:	11 24       	eor	r1, r1
    26ea:	28 17       	cp	r18, r24
    26ec:	39 07       	cpc	r19, r25
    26ee:	0c f0       	brlt	.+2      	; 0x26f2 <main+0x23a2>
    26f0:	68 c0       	rjmp	.+208    	; 0x27c2 <main+0x2472>
    26f2:	e9 8c       	ldd	r14, Y+25	; 0x19
    26f4:	fa 8c       	ldd	r15, Y+26	; 0x1a
    26f6:	05 c0       	rjmp	.+10     	; 0x2702 <main+0x23b2>
    26f8:	06 e0       	ldi	r16, 0x06	; 6
    26fa:	10 e0       	ldi	r17, 0x00	; 0
					state = 12;
					counterRef = counter;
				}
				if(state == 12 && counter - counterRef > pWait){
    26fc:	0c 30       	cpi	r16, 0x0C	; 12
    26fe:	11 05       	cpc	r17, r1
    2700:	69 f4       	brne	.+26     	; 0x271c <main+0x23cc>
    2702:	89 8d       	ldd	r24, Y+25	; 0x19
    2704:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2706:	8e 19       	sub	r24, r14
    2708:	9f 09       	sbc	r25, r15
    270a:	85 36       	cpi	r24, 0x65	; 101
    270c:	91 05       	cpc	r25, r1
    270e:	0c f4       	brge	.+2      	; 0x2712 <main+0x23c2>
    2710:	74 c0       	rjmp	.+232    	; 0x27fa <main+0x24aa>
    2712:	e9 8c       	ldd	r14, Y+25	; 0x19
    2714:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2716:	05 c0       	rjmp	.+10     	; 0x2722 <main+0x23d2>
    2718:	07 e0       	ldi	r16, 0x07	; 7
    271a:	10 e0       	ldi	r17, 0x00	; 0
					state = 13;
					counterRef = counter;
				}
				if(state == 13 && counter - counterRef > totallength2*m2HalfPlate){
    271c:	0d 30       	cpi	r16, 0x0D	; 13
    271e:	11 05       	cpc	r17, r1
    2720:	b1 f4       	brne	.+44     	; 0x274e <main+0x23fe>
    2722:	89 8d       	ldd	r24, Y+25	; 0x19
    2724:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2726:	8e 19       	sub	r24, r14
    2728:	9f 09       	sbc	r25, r15
    272a:	20 91 3b 03 	lds	r18, 0x033B
    272e:	30 91 3c 03 	lds	r19, 0x033C
    2732:	a9 01       	movw	r20, r18
    2734:	48 9d       	mul	r20, r8
    2736:	90 01       	movw	r18, r0
    2738:	49 9d       	mul	r20, r9
    273a:	30 0d       	add	r19, r0
    273c:	58 9d       	mul	r21, r8
    273e:	30 0d       	add	r19, r0
    2740:	11 24       	eor	r1, r1
    2742:	28 17       	cp	r18, r24
    2744:	39 07       	cpc	r19, r25
    2746:	34 f0       	brlt	.+12     	; 0x2754 <main+0x2404>
    2748:	68 c0       	rjmp	.+208    	; 0x281a <main+0x24ca>
    274a:	08 e0       	ldi	r16, 0x08	; 8
    274c:	10 e0       	ldi	r17, 0x00	; 0
					state = 14;
					counterRef14 = counter;
					}
				if(state == 14 && counter - counterRef > totallength2*m2Brush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    274e:	0e 30       	cpi	r16, 0x0E	; 14
    2750:	11 05       	cpc	r17, r1
    2752:	c9 f4       	brne	.+50     	; 0x2786 <main+0x2436>
    2754:	89 8d       	ldd	r24, Y+25	; 0x19
    2756:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2758:	8e 19       	sub	r24, r14
    275a:	9f 09       	sbc	r25, r15
    275c:	20 91 3b 03 	lds	r18, 0x033B
    2760:	30 91 3c 03 	lds	r19, 0x033C
    2764:	f9 01       	movw	r30, r18
    2766:	e8 9d       	mul	r30, r8
    2768:	90 01       	movw	r18, r0
    276a:	e9 9d       	mul	r30, r9
    276c:	30 0d       	add	r19, r0
    276e:	f8 9d       	mul	r31, r8
    2770:	30 0d       	add	r19, r0
    2772:	11 24       	eor	r1, r1
    2774:	28 17       	cp	r18, r24
    2776:	39 07       	cpc	r19, r25
    2778:	0c f0       	brlt	.+2      	; 0x277c <main+0x242c>
    277a:	6b c0       	rjmp	.+214    	; 0x2852 <main+0x2502>
    277c:	e9 8c       	ldd	r14, Y+25	; 0x19
    277e:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2780:	05 c0       	rjmp	.+10     	; 0x278c <main+0x243c>
    2782:	09 e0       	ldi	r16, 0x09	; 9
    2784:	10 e0       	ldi	r17, 0x00	; 0
					state = 15;
					counterRef = counter;
				}
				if(state == 15 && counter - counterRef > mWait){
    2786:	0f 30       	cpi	r16, 0x0F	; 15
    2788:	11 05       	cpc	r17, r1
    278a:	69 f4       	brne	.+26     	; 0x27a6 <main+0x2456>
    278c:	89 8d       	ldd	r24, Y+25	; 0x19
    278e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2790:	8e 19       	sub	r24, r14
    2792:	9f 09       	sbc	r25, r15
    2794:	85 36       	cpi	r24, 0x65	; 101
    2796:	91 05       	cpc	r25, r1
    2798:	0c f4       	brge	.+2      	; 0x279c <main+0x244c>
    279a:	6b c0       	rjmp	.+214    	; 0x2872 <main+0x2522>
    279c:	e9 8c       	ldd	r14, Y+25	; 0x19
    279e:	fa 8c       	ldd	r15, Y+26	; 0x1a
    27a0:	05 c0       	rjmp	.+10     	; 0x27ac <main+0x245c>
    27a2:	0a e0       	ldi	r16, 0x0A	; 10
    27a4:	10 e0       	ldi	r17, 0x00	; 0
					state = 16;
					counterRef = counter;
				}
				if(state == 16 && counter - counterRef > pWait){
    27a6:	00 31       	cpi	r16, 0x10	; 16
    27a8:	11 05       	cpc	r17, r1
    27aa:	69 f4       	brne	.+26     	; 0x27c6 <main+0x2476>
    27ac:	89 8d       	ldd	r24, Y+25	; 0x19
    27ae:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27b0:	8e 19       	sub	r24, r14
    27b2:	9f 09       	sbc	r25, r15
    27b4:	85 36       	cpi	r24, 0x65	; 101
    27b6:	91 05       	cpc	r25, r1
    27b8:	0c f4       	brge	.+2      	; 0x27bc <main+0x246c>
    27ba:	77 c0       	rjmp	.+238    	; 0x28aa <main+0x255a>
    27bc:	e9 8c       	ldd	r14, Y+25	; 0x19
    27be:	fa 8c       	ldd	r15, Y+26	; 0x1a
    27c0:	05 c0       	rjmp	.+10     	; 0x27cc <main+0x247c>
    27c2:	0b e0       	ldi	r16, 0x0B	; 11
    27c4:	10 e0       	ldi	r17, 0x00	; 0
					state = 17;
					counterRef = counter;
				}
				if(state == 17 && counter - counterRef > totallength2*m2HalfPlate){
    27c6:	01 31       	cpi	r16, 0x11	; 17
    27c8:	11 05       	cpc	r17, r1
    27ca:	c9 f4       	brne	.+50     	; 0x27fe <main+0x24ae>
    27cc:	89 8d       	ldd	r24, Y+25	; 0x19
    27ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27d0:	8e 19       	sub	r24, r14
    27d2:	9f 09       	sbc	r25, r15
    27d4:	20 91 3b 03 	lds	r18, 0x033B
    27d8:	30 91 3c 03 	lds	r19, 0x033C
    27dc:	a9 01       	movw	r20, r18
    27de:	48 9d       	mul	r20, r8
    27e0:	90 01       	movw	r18, r0
    27e2:	49 9d       	mul	r20, r9
    27e4:	30 0d       	add	r19, r0
    27e6:	58 9d       	mul	r21, r8
    27e8:	30 0d       	add	r19, r0
    27ea:	11 24       	eor	r1, r1
    27ec:	28 17       	cp	r18, r24
    27ee:	39 07       	cpc	r19, r25
    27f0:	0c f0       	brlt	.+2      	; 0x27f4 <main+0x24a4>
    27f2:	6b c0       	rjmp	.+214    	; 0x28ca <main+0x257a>
    27f4:	e9 8c       	ldd	r14, Y+25	; 0x19
    27f6:	fa 8c       	ldd	r15, Y+26	; 0x1a
    27f8:	05 c0       	rjmp	.+10     	; 0x2804 <main+0x24b4>
    27fa:	0c e0       	ldi	r16, 0x0C	; 12
    27fc:	10 e0       	ldi	r17, 0x00	; 0
					state = 18;
					counterRef = counter;
				}
				if(state == 18 && counter - counterRef > pWait){
    27fe:	02 31       	cpi	r16, 0x12	; 18
    2800:	11 05       	cpc	r17, r1
    2802:	69 f4       	brne	.+26     	; 0x281e <main+0x24ce>
    2804:	89 8d       	ldd	r24, Y+25	; 0x19
    2806:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2808:	8e 19       	sub	r24, r14
    280a:	9f 09       	sbc	r25, r15
    280c:	85 36       	cpi	r24, 0x65	; 101
    280e:	91 05       	cpc	r25, r1
    2810:	0c f4       	brge	.+2      	; 0x2814 <main+0x24c4>
    2812:	77 c0       	rjmp	.+238    	; 0x2902 <main+0x25b2>
    2814:	e9 8c       	ldd	r14, Y+25	; 0x19
    2816:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2818:	05 c0       	rjmp	.+10     	; 0x2824 <main+0x24d4>
    281a:	0d e0       	ldi	r16, 0x0D	; 13
    281c:	10 e0       	ldi	r17, 0x00	; 0
					state = 19;
					counterRef = counter;
				}
				if(state == 19 && counter - counterRef > totallength2*m2HalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    281e:	03 31       	cpi	r16, 0x13	; 19
    2820:	11 05       	cpc	r17, r1
    2822:	c9 f4       	brne	.+50     	; 0x2856 <main+0x2506>
    2824:	89 8d       	ldd	r24, Y+25	; 0x19
    2826:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2828:	8e 19       	sub	r24, r14
    282a:	9f 09       	sbc	r25, r15
    282c:	20 91 3b 03 	lds	r18, 0x033B
    2830:	30 91 3c 03 	lds	r19, 0x033C
    2834:	f9 01       	movw	r30, r18
    2836:	e8 9d       	mul	r30, r8
    2838:	90 01       	movw	r18, r0
    283a:	e9 9d       	mul	r30, r9
    283c:	30 0d       	add	r19, r0
    283e:	f8 9d       	mul	r31, r8
    2840:	30 0d       	add	r19, r0
    2842:	11 24       	eor	r1, r1
    2844:	28 17       	cp	r18, r24
    2846:	39 07       	cpc	r19, r25
    2848:	0c f0       	brlt	.+2      	; 0x284c <main+0x24fc>
    284a:	6b c0       	rjmp	.+214    	; 0x2922 <main+0x25d2>
    284c:	e9 8c       	ldd	r14, Y+25	; 0x19
    284e:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2850:	05 c0       	rjmp	.+10     	; 0x285c <main+0x250c>
    2852:	0e e0       	ldi	r16, 0x0E	; 14
    2854:	10 e0       	ldi	r17, 0x00	; 0
					state = 20;
					counterRef = counter;
				}
				if(state == 20 && counter - counterRef > pWait){
    2856:	04 31       	cpi	r16, 0x14	; 20
    2858:	11 05       	cpc	r17, r1
    285a:	69 f4       	brne	.+26     	; 0x2876 <main+0x2526>
    285c:	89 8d       	ldd	r24, Y+25	; 0x19
    285e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2860:	8e 19       	sub	r24, r14
    2862:	9f 09       	sbc	r25, r15
    2864:	85 36       	cpi	r24, 0x65	; 101
    2866:	91 05       	cpc	r25, r1
    2868:	0c f4       	brge	.+2      	; 0x286c <main+0x251c>
    286a:	74 c0       	rjmp	.+232    	; 0x2954 <main+0x2604>
    286c:	e9 8c       	ldd	r14, Y+25	; 0x19
    286e:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2870:	05 c0       	rjmp	.+10     	; 0x287c <main+0x252c>
    2872:	0f e0       	ldi	r16, 0x0F	; 15
    2874:	10 e0       	ldi	r17, 0x00	; 0
					state = 21;
					counterRef = counter;
				}
				if(state == 21 && counter - counterRef > totallength2*m2HalfPlate){
    2876:	05 31       	cpi	r16, 0x15	; 21
    2878:	11 05       	cpc	r17, r1
    287a:	c9 f4       	brne	.+50     	; 0x28ae <main+0x255e>
    287c:	89 8d       	ldd	r24, Y+25	; 0x19
    287e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2880:	8e 19       	sub	r24, r14
    2882:	9f 09       	sbc	r25, r15
    2884:	20 91 3b 03 	lds	r18, 0x033B
    2888:	30 91 3c 03 	lds	r19, 0x033C
    288c:	a9 01       	movw	r20, r18
    288e:	48 9d       	mul	r20, r8
    2890:	90 01       	movw	r18, r0
    2892:	49 9d       	mul	r20, r9
    2894:	30 0d       	add	r19, r0
    2896:	58 9d       	mul	r21, r8
    2898:	30 0d       	add	r19, r0
    289a:	11 24       	eor	r1, r1
    289c:	28 17       	cp	r18, r24
    289e:	39 07       	cpc	r19, r25
    28a0:	0c f0       	brlt	.+2      	; 0x28a4 <main+0x2554>
    28a2:	76 c0       	rjmp	.+236    	; 0x2990 <main+0x2640>
    28a4:	e9 8c       	ldd	r14, Y+25	; 0x19
    28a6:	fa 8c       	ldd	r15, Y+26	; 0x1a
    28a8:	05 c0       	rjmp	.+10     	; 0x28b4 <main+0x2564>
    28aa:	00 e1       	ldi	r16, 0x10	; 16
    28ac:	10 e0       	ldi	r17, 0x00	; 0
					state = 22;
					counterRef = counter;
				}
				if(state == 22 && counter - counterRef > pWait){
    28ae:	06 31       	cpi	r16, 0x16	; 22
    28b0:	11 05       	cpc	r17, r1
    28b2:	69 f4       	brne	.+26     	; 0x28ce <main+0x257e>
    28b4:	89 8d       	ldd	r24, Y+25	; 0x19
    28b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28b8:	8e 19       	sub	r24, r14
    28ba:	9f 09       	sbc	r25, r15
    28bc:	85 36       	cpi	r24, 0x65	; 101
    28be:	91 05       	cpc	r25, r1
    28c0:	0c f4       	brge	.+2      	; 0x28c4 <main+0x2574>
    28c2:	78 c0       	rjmp	.+240    	; 0x29b4 <main+0x2664>
    28c4:	e9 8c       	ldd	r14, Y+25	; 0x19
    28c6:	fa 8c       	ldd	r15, Y+26	; 0x1a
    28c8:	05 c0       	rjmp	.+10     	; 0x28d4 <main+0x2584>
    28ca:	01 e1       	ldi	r16, 0x11	; 17
    28cc:	10 e0       	ldi	r17, 0x00	; 0
					state = 23;
					counterRef = counter;
				}
				if(state == 23 && counter - counterRef > totallength2*m2Dry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    28ce:	07 31       	cpi	r16, 0x17	; 23
    28d0:	11 05       	cpc	r17, r1
    28d2:	c9 f4       	brne	.+50     	; 0x2906 <main+0x25b6>
    28d4:	89 8d       	ldd	r24, Y+25	; 0x19
    28d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28d8:	8e 19       	sub	r24, r14
    28da:	9f 09       	sbc	r25, r15
    28dc:	20 91 3b 03 	lds	r18, 0x033B
    28e0:	30 91 3c 03 	lds	r19, 0x033C
    28e4:	f9 01       	movw	r30, r18
    28e6:	e8 9d       	mul	r30, r8
    28e8:	90 01       	movw	r18, r0
    28ea:	e9 9d       	mul	r30, r9
    28ec:	30 0d       	add	r19, r0
    28ee:	f8 9d       	mul	r31, r8
    28f0:	30 0d       	add	r19, r0
    28f2:	11 24       	eor	r1, r1
    28f4:	28 17       	cp	r18, r24
    28f6:	39 07       	cpc	r19, r25
    28f8:	0c f0       	brlt	.+2      	; 0x28fc <main+0x25ac>
    28fa:	6c c0       	rjmp	.+216    	; 0x29d4 <main+0x2684>
    28fc:	e9 8c       	ldd	r14, Y+25	; 0x19
    28fe:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2900:	05 c0       	rjmp	.+10     	; 0x290c <main+0x25bc>
    2902:	02 e1       	ldi	r16, 0x12	; 18
    2904:	10 e0       	ldi	r17, 0x00	; 0
					state = 24;
					counterRef = counter;
				}
				if(state == 24 && counter - counterRef > kWait){
    2906:	08 31       	cpi	r16, 0x18	; 24
    2908:	11 05       	cpc	r17, r1
    290a:	69 f4       	brne	.+26     	; 0x2926 <main+0x25d6>
    290c:	89 8d       	ldd	r24, Y+25	; 0x19
    290e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2910:	8e 19       	sub	r24, r14
    2912:	9f 09       	sbc	r25, r15
    2914:	85 36       	cpi	r24, 0x65	; 101
    2916:	91 05       	cpc	r25, r1
    2918:	0c f4       	brge	.+2      	; 0x291c <main+0x25cc>
    291a:	75 c0       	rjmp	.+234    	; 0x2a06 <main+0x26b6>
    291c:	e9 8c       	ldd	r14, Y+25	; 0x19
    291e:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2920:	05 c0       	rjmp	.+10     	; 0x292c <main+0x25dc>
    2922:	03 e1       	ldi	r16, 0x13	; 19
    2924:	10 e0       	ldi	r17, 0x00	; 0
					state = 25;
					counterRef = counter;
				}
				if(state == 25 && counter - counterRef > totallength2*m2WholePlate){
    2926:	09 31       	cpi	r16, 0x19	; 25
    2928:	11 05       	cpc	r17, r1
    292a:	b1 f4       	brne	.+44     	; 0x2958 <main+0x2608>
    292c:	89 8d       	ldd	r24, Y+25	; 0x19
    292e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2930:	8e 19       	sub	r24, r14
    2932:	9f 09       	sbc	r25, r15
    2934:	20 91 3b 03 	lds	r18, 0x033B
    2938:	30 91 3c 03 	lds	r19, 0x033C
    293c:	a9 01       	movw	r20, r18
    293e:	48 9d       	mul	r20, r8
    2940:	90 01       	movw	r18, r0
    2942:	49 9d       	mul	r20, r9
    2944:	30 0d       	add	r19, r0
    2946:	58 9d       	mul	r21, r8
    2948:	30 0d       	add	r19, r0
    294a:	11 24       	eor	r1, r1
    294c:	28 17       	cp	r18, r24
    294e:	39 07       	cpc	r19, r25
    2950:	34 f0       	brlt	.+12     	; 0x295e <main+0x260e>
    2952:	75 c0       	rjmp	.+234    	; 0x2a3e <main+0x26ee>
    2954:	04 e1       	ldi	r16, 0x14	; 20
    2956:	10 e0       	ldi	r17, 0x00	; 0
					state = 26;
					counterRef26 = counter;
				}
				if(state == 26 && counter - counterRef > totallength2*m2Dry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    2958:	0a 31       	cpi	r16, 0x1A	; 26
    295a:	11 05       	cpc	r17, r1
    295c:	d9 f4       	brne	.+54     	; 0x2994 <main+0x2644>
    295e:	89 8d       	ldd	r24, Y+25	; 0x19
    2960:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2962:	8e 19       	sub	r24, r14
    2964:	9f 09       	sbc	r25, r15
    2966:	20 91 3b 03 	lds	r18, 0x033B
    296a:	30 91 3c 03 	lds	r19, 0x033C
    296e:	f9 01       	movw	r30, r18
    2970:	e8 9d       	mul	r30, r8
    2972:	90 01       	movw	r18, r0
    2974:	e9 9d       	mul	r30, r9
    2976:	30 0d       	add	r19, r0
    2978:	f8 9d       	mul	r31, r8
    297a:	30 0d       	add	r19, r0
    297c:	11 24       	eor	r1, r1
    297e:	28 17       	cp	r18, r24
    2980:	39 07       	cpc	r19, r25
    2982:	0c f0       	brlt	.+2      	; 0x2986 <main+0x2636>
    2984:	6c c0       	rjmp	.+216    	; 0x2a5e <main+0x270e>
    2986:	29 8d       	ldd	r18, Y+25	; 0x19
    2988:	3a 8d       	ldd	r19, Y+26	; 0x1a
    298a:	3c 8b       	std	Y+20, r19	; 0x14
    298c:	2b 8b       	std	Y+19, r18	; 0x13
    298e:	05 c0       	rjmp	.+10     	; 0x299a <main+0x264a>
    2990:	05 e1       	ldi	r16, 0x15	; 21
    2992:	10 e0       	ldi	r17, 0x00	; 0
					state = 27;
					counterRefFive = counter;
				}
				if(state == 27 && counter - counterRefFive > mWait){
    2994:	0b 31       	cpi	r16, 0x1B	; 27
    2996:	11 05       	cpc	r17, r1
    2998:	79 f4       	brne	.+30     	; 0x29b8 <main+0x2668>
    299a:	89 8d       	ldd	r24, Y+25	; 0x19
    299c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    299e:	4b 89       	ldd	r20, Y+19	; 0x13
    29a0:	5c 89       	ldd	r21, Y+20	; 0x14
    29a2:	84 1b       	sub	r24, r20
    29a4:	95 0b       	sbc	r25, r21
    29a6:	85 36       	cpi	r24, 0x65	; 101
    29a8:	91 05       	cpc	r25, r1
    29aa:	0c f4       	brge	.+2      	; 0x29ae <main+0x265e>
    29ac:	74 c0       	rjmp	.+232    	; 0x2a96 <main+0x2746>
    29ae:	e9 8c       	ldd	r14, Y+25	; 0x19
    29b0:	fa 8c       	ldd	r15, Y+26	; 0x1a
    29b2:	05 c0       	rjmp	.+10     	; 0x29be <main+0x266e>
    29b4:	06 e1       	ldi	r16, 0x16	; 22
    29b6:	10 e0       	ldi	r17, 0x00	; 0
					state = 28;
					counterRef = counter;
				}
				if(state == 28 && counter - counterRef > pWait){
    29b8:	0c 31       	cpi	r16, 0x1C	; 28
    29ba:	11 05       	cpc	r17, r1
    29bc:	69 f4       	brne	.+26     	; 0x29d8 <main+0x2688>
    29be:	89 8d       	ldd	r24, Y+25	; 0x19
    29c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29c2:	8e 19       	sub	r24, r14
    29c4:	9f 09       	sbc	r25, r15
    29c6:	85 36       	cpi	r24, 0x65	; 101
    29c8:	91 05       	cpc	r25, r1
    29ca:	0c f4       	brge	.+2      	; 0x29ce <main+0x267e>
    29cc:	74 c0       	rjmp	.+232    	; 0x2ab6 <main+0x2766>
    29ce:	e9 8c       	ldd	r14, Y+25	; 0x19
    29d0:	fa 8c       	ldd	r15, Y+26	; 0x1a
    29d2:	05 c0       	rjmp	.+10     	; 0x29de <main+0x268e>
    29d4:	07 e1       	ldi	r16, 0x17	; 23
    29d6:	10 e0       	ldi	r17, 0x00	; 0
					state = 29;
					counterRef = counter;
				}
				if(state == 29 && counter - counterRef > totallength2*m2WholePlate){
    29d8:	0d 31       	cpi	r16, 0x1D	; 29
    29da:	11 05       	cpc	r17, r1
    29dc:	b1 f4       	brne	.+44     	; 0x2a0a <main+0x26ba>
    29de:	89 8d       	ldd	r24, Y+25	; 0x19
    29e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29e2:	8e 19       	sub	r24, r14
    29e4:	9f 09       	sbc	r25, r15
    29e6:	20 91 3b 03 	lds	r18, 0x033B
    29ea:	30 91 3c 03 	lds	r19, 0x033C
    29ee:	f9 01       	movw	r30, r18
    29f0:	e8 9d       	mul	r30, r8
    29f2:	90 01       	movw	r18, r0
    29f4:	e9 9d       	mul	r30, r9
    29f6:	30 0d       	add	r19, r0
    29f8:	f8 9d       	mul	r31, r8
    29fa:	30 0d       	add	r19, r0
    29fc:	11 24       	eor	r1, r1
    29fe:	28 17       	cp	r18, r24
    2a00:	39 07       	cpc	r19, r25
    2a02:	34 f0       	brlt	.+12     	; 0x2a10 <main+0x26c0>
    2a04:	74 c0       	rjmp	.+232    	; 0x2aee <main+0x279e>
    2a06:	08 e1       	ldi	r16, 0x18	; 24
    2a08:	10 e0       	ldi	r17, 0x00	; 0
					state = 30;
					counterRef30 = counter;
				}
				if(state == 30 && counter - counterRef > totallength2*m2LoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    2a0a:	0e 31       	cpi	r16, 0x1E	; 30
    2a0c:	11 05       	cpc	r17, r1
    2a0e:	c9 f4       	brne	.+50     	; 0x2a42 <main+0x26f2>
    2a10:	89 8d       	ldd	r24, Y+25	; 0x19
    2a12:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a14:	8e 19       	sub	r24, r14
    2a16:	9f 09       	sbc	r25, r15
    2a18:	20 91 3b 03 	lds	r18, 0x033B
    2a1c:	30 91 3c 03 	lds	r19, 0x033C
    2a20:	a9 01       	movw	r20, r18
    2a22:	48 9d       	mul	r20, r8
    2a24:	90 01       	movw	r18, r0
    2a26:	49 9d       	mul	r20, r9
    2a28:	30 0d       	add	r19, r0
    2a2a:	58 9d       	mul	r21, r8
    2a2c:	30 0d       	add	r19, r0
    2a2e:	11 24       	eor	r1, r1
    2a30:	28 17       	cp	r18, r24
    2a32:	39 07       	cpc	r19, r25
    2a34:	0c f0       	brlt	.+2      	; 0x2a38 <main+0x26e8>
    2a36:	6a c0       	rjmp	.+212    	; 0x2b0c <main+0x27bc>
    2a38:	e9 8c       	ldd	r14, Y+25	; 0x19
    2a3a:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2a3c:	05 c0       	rjmp	.+10     	; 0x2a48 <main+0x26f8>
    2a3e:	09 e1       	ldi	r16, 0x19	; 25
    2a40:	10 e0       	ldi	r17, 0x00	; 0
					state = 31;
					counterRef = counter;
				}
					if(state == 31 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    2a42:	0f 31       	cpi	r16, 0x1F	; 31
    2a44:	11 05       	cpc	r17, r1
    2a46:	69 f4       	brne	.+26     	; 0x2a62 <main+0x2712>
    2a48:	89 8d       	ldd	r24, Y+25	; 0x19
    2a4a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a4c:	8e 19       	sub	r24, r14
    2a4e:	9f 09       	sbc	r25, r15
    2a50:	89 5e       	subi	r24, 0xE9	; 233
    2a52:	93 40       	sbci	r25, 0x03	; 3
    2a54:	0c f4       	brge	.+2      	; 0x2a58 <main+0x2708>
    2a56:	8b c0       	rjmp	.+278    	; 0x2b6e <main+0x281e>
    2a58:	e9 8c       	ldd	r14, Y+25	; 0x19
    2a5a:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2a5c:	05 c0       	rjmp	.+10     	; 0x2a68 <main+0x2718>
    2a5e:	0a e1       	ldi	r16, 0x1A	; 26
    2a60:	10 e0       	ldi	r17, 0x00	; 0
					state = 32;
					counterRef = counter;
				}
				if(state == 32 && counter - counterRef > totallength2*m2HomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    2a62:	00 32       	cpi	r16, 0x20	; 32
    2a64:	11 05       	cpc	r17, r1
    2a66:	c9 f4       	brne	.+50     	; 0x2a9a <main+0x274a>
    2a68:	89 8d       	ldd	r24, Y+25	; 0x19
    2a6a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a6c:	8e 19       	sub	r24, r14
    2a6e:	9f 09       	sbc	r25, r15
    2a70:	20 91 3b 03 	lds	r18, 0x033B
    2a74:	30 91 3c 03 	lds	r19, 0x033C
    2a78:	f9 01       	movw	r30, r18
    2a7a:	e8 9d       	mul	r30, r8
    2a7c:	90 01       	movw	r18, r0
    2a7e:	e9 9d       	mul	r30, r9
    2a80:	30 0d       	add	r19, r0
    2a82:	f8 9d       	mul	r31, r8
    2a84:	30 0d       	add	r19, r0
    2a86:	11 24       	eor	r1, r1
    2a88:	28 17       	cp	r18, r24
    2a8a:	39 07       	cpc	r19, r25
    2a8c:	0c f0       	brlt	.+2      	; 0x2a90 <main+0x2740>
    2a8e:	96 c0       	rjmp	.+300    	; 0x2bbc <main+0x286c>
    2a90:	e9 8c       	ldd	r14, Y+25	; 0x19
    2a92:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2a94:	05 c0       	rjmp	.+10     	; 0x2aa0 <main+0x2750>
    2a96:	0b e1       	ldi	r16, 0x1B	; 27
    2a98:	10 e0       	ldi	r17, 0x00	; 0
					state = 33;
					counterRef = counter;
				}
				if(state == 33 && counter - counterRef > pWait){
    2a9a:	01 32       	cpi	r16, 0x21	; 33
    2a9c:	11 05       	cpc	r17, r1
    2a9e:	69 f4       	brne	.+26     	; 0x2aba <main+0x276a>
    2aa0:	89 8d       	ldd	r24, Y+25	; 0x19
    2aa2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2aa4:	8e 19       	sub	r24, r14
    2aa6:	9f 09       	sbc	r25, r15
    2aa8:	85 36       	cpi	r24, 0x65	; 101
    2aaa:	91 05       	cpc	r25, r1
    2aac:	0c f4       	brge	.+2      	; 0x2ab0 <main+0x2760>
    2aae:	9a c0       	rjmp	.+308    	; 0x2be4 <main+0x2894>
    2ab0:	e9 8c       	ldd	r14, Y+25	; 0x19
    2ab2:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2ab4:	05 c0       	rjmp	.+10     	; 0x2ac0 <main+0x2770>
    2ab6:	0c e1       	ldi	r16, 0x1C	; 28
    2ab8:	10 e0       	ldi	r17, 0x00	; 0
					state = 34;
					counterRef = counter;
				}
				if(state == 34 && counter - counterRef > totallength1*m1LoadPlate){
    2aba:	02 32       	cpi	r16, 0x22	; 34
    2abc:	11 05       	cpc	r17, r1
    2abe:	c9 f4       	brne	.+50     	; 0x2af2 <main+0x27a2>
    2ac0:	89 8d       	ldd	r24, Y+25	; 0x19
    2ac2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ac4:	8e 19       	sub	r24, r14
    2ac6:	9f 09       	sbc	r25, r15
    2ac8:	20 91 39 03 	lds	r18, 0x0339
    2acc:	30 91 3a 03 	lds	r19, 0x033A
    2ad0:	a9 01       	movw	r20, r18
    2ad2:	48 9d       	mul	r20, r8
    2ad4:	90 01       	movw	r18, r0
    2ad6:	49 9d       	mul	r20, r9
    2ad8:	30 0d       	add	r19, r0
    2ada:	58 9d       	mul	r21, r8
    2adc:	30 0d       	add	r19, r0
    2ade:	11 24       	eor	r1, r1
    2ae0:	28 17       	cp	r18, r24
    2ae2:	39 07       	cpc	r19, r25
    2ae4:	0c f0       	brlt	.+2      	; 0x2ae8 <main+0x2798>
    2ae6:	8c c0       	rjmp	.+280    	; 0x2c00 <main+0x28b0>
    2ae8:	e9 8c       	ldd	r14, Y+25	; 0x19
    2aea:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2aec:	05 c0       	rjmp	.+10     	; 0x2af8 <main+0x27a8>
    2aee:	0d e1       	ldi	r16, 0x1D	; 29
    2af0:	10 e0       	ldi	r17, 0x00	; 0
					state = 35;
					counterRef = counter;
				}
				if(state == 35 && counter - counterRef > 10){
    2af2:	03 32       	cpi	r16, 0x23	; 35
    2af4:	11 05       	cpc	r17, r1
    2af6:	69 f4       	brne	.+26     	; 0x2b12 <main+0x27c2>
    2af8:	89 8d       	ldd	r24, Y+25	; 0x19
    2afa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2afc:	8e 19       	sub	r24, r14
    2afe:	9f 09       	sbc	r25, r15
    2b00:	0b 97       	sbiw	r24, 0x0b	; 11
    2b02:	0c f4       	brge	.+2      	; 0x2b06 <main+0x27b6>
    2b04:	8d c3       	rjmp	.+1818   	; 0x3220 <main+0x2ed0>
    2b06:	0f ef       	ldi	r16, 0xFF	; 255
    2b08:	1f ef       	ldi	r17, 0xFF	; 255
    2b0a:	33 c0       	rjmp	.+102    	; 0x2b72 <main+0x2822>
    2b0c:	0e e1       	ldi	r16, 0x1E	; 30
    2b0e:	10 e0       	ldi	r17, 0x00	; 0
    2b10:	30 c0       	rjmp	.+96     	; 0x2b72 <main+0x2822>
				}


				//state actions
						
				if(state == 0){
    2b12:	01 15       	cp	r16, r1
    2b14:	11 05       	cpc	r17, r1
    2b16:	69 f5       	brne	.+90     	; 0x2b72 <main+0x2822>
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    2b18:	80 91 50 03 	lds	r24, 0x0350
    2b1c:	90 91 4c 03 	lds	r25, 0x034C
    2b20:	20 91 4e 03 	lds	r18, 0x034E
    2b24:	82 ff       	sbrs	r24, 2
    2b26:	0a c0       	rjmp	.+20     	; 0x2b3c <main+0x27ec>
						u_motorByte0.bits_in_motorByte0.m2Dir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    2b28:	9f 7e       	andi	r25, 0xEF	; 239
    2b2a:	90 93 4c 03 	sts	0x034C, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2b2e:	27 7f       	andi	r18, 0xF7	; 247
    2b30:	20 93 4e 03 	sts	0x034E, r18
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	c8 2e       	mov	r12, r24
    2b38:	d1 2c       	mov	r13, r1
    2b3a:	64 c0       	rjmp	.+200    	; 0x2c04 <main+0x28b4>
						m2 = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    2b3c:	9f 7d       	andi	r25, 0xDF	; 223
    2b3e:	90 93 4c 03 	sts	0x034C, r25
						m2 = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2b42:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2b44:	28 60       	ori	r18, 0x08	; 8
    2b46:	20 93 4e 03 	sts	0x034E, r18
						if(print0 == 1){
    2b4a:	89 89       	ldd	r24, Y+17	; 0x11
    2b4c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	09 f0       	breq	.+2      	; 0x2b54 <main+0x2804>
    2b52:	69 c3       	rjmp	.+1746   	; 0x3226 <main+0x2ed6>
							OrangutanLCD::gotoXY(0,1);
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	61 e0       	ldi	r22, 0x01	; 1
    2b58:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	93 e0       	ldi	r25, 0x03	; 3
    2b60:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
    2b64:	cc 24       	eor	r12, r12
    2b66:	dd 24       	eor	r13, r13
    2b68:	1a 8a       	std	Y+18, r1	; 0x12
    2b6a:	19 8a       	std	Y+17, r1	; 0x11
    2b6c:	4b c0       	rjmp	.+150    	; 0x2c04 <main+0x28b4>
    2b6e:	0f e1       	ldi	r16, 0x1F	; 31
    2b70:	10 e0       	ldi	r17, 0x00	; 0
							print0 = 0;
						}
					}
				}
				if(state == 1){
    2b72:	01 30       	cpi	r16, 0x01	; 1
    2b74:	11 05       	cpc	r17, r1
    2b76:	21 f5       	brne	.+72     	; 0x2bc0 <main+0x2870>
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    2b78:	20 91 4e 03 	lds	r18, 0x034E
    2b7c:	32 2f       	mov	r19, r18
    2b7e:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    2b80:	89 8d       	ldd	r24, Y+25	; 0x19
    2b82:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b84:	68 ec       	ldi	r22, 0xC8	; 200
    2b86:	70 e0       	ldi	r23, 0x00	; 0
    2b88:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    2b8c:	84 36       	cpi	r24, 0x64	; 100
    2b8e:	91 05       	cpc	r25, r1
    2b90:	24 f4       	brge	.+8      	; 0x2b9a <main+0x284a>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    2b92:	2c 7f       	andi	r18, 0xFC	; 252
    2b94:	20 93 4e 03 	sts	0x034E, r18
    2b98:	03 c0       	rjmp	.+6      	; 0x2ba0 <main+0x2850>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2b9a:	32 60       	ori	r19, 0x02	; 2
    2b9c:	30 93 4e 03 	sts	0x034E, r19
					}
					m1 = 1;
					u_motorByte0.bits_in_motorByte0.m1Dir = 1;  //****** dir1 ******
    2ba0:	80 91 4c 03 	lds	r24, 0x034C
					u_motorByte0.bits_in_motorByte0.m1Drop = 1;
    2ba4:	86 60       	ori	r24, 0x06	; 6
    2ba6:	80 93 4c 03 	sts	0x034C, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    2baa:	80 91 4e 03 	lds	r24, 0x034E
    2bae:	8b 7f       	andi	r24, 0xFB	; 251
    2bb0:	80 93 4e 03 	sts	0x034E, r24
    2bb4:	b1 e0       	ldi	r27, 0x01	; 1
    2bb6:	6b 2e       	mov	r6, r27
    2bb8:	71 2c       	mov	r7, r1
    2bba:	24 c0       	rjmp	.+72     	; 0x2c04 <main+0x28b4>
    2bbc:	00 e2       	ldi	r16, 0x20	; 32
    2bbe:	10 e0       	ldi	r17, 0x00	; 0
				}
				if(state == 2){
    2bc0:	02 30       	cpi	r16, 0x02	; 2
    2bc2:	11 05       	cpc	r17, r1
    2bc4:	89 f4       	brne	.+34     	; 0x2be8 <main+0x2898>
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2bc6:	80 91 4e 03 	lds	r24, 0x034E
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2bca:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    2bcc:	86 61       	ori	r24, 0x16	; 22
    2bce:	80 93 4e 03 	sts	0x034E, r24
						m1 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 1;
    2bd2:	80 91 4c 03 	lds	r24, 0x034C
    2bd6:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.m1Drop = 0;
    2bd8:	8b 7f       	andi	r24, 0xFB	; 251
    2bda:	80 93 4c 03 	sts	0x034C, r24
    2bde:	66 24       	eor	r6, r6
    2be0:	77 24       	eor	r7, r7
    2be2:	3a c0       	rjmp	.+116    	; 0x2c58 <main+0x2908>
    2be4:	01 e2       	ldi	r16, 0x21	; 33
    2be6:	10 e0       	ldi	r17, 0x00	; 0
				}	
				if(state == 3){
    2be8:	03 30       	cpi	r16, 0x03	; 3
    2bea:	11 05       	cpc	r17, r1
    2bec:	59 f4       	brne	.+22     	; 0x2c04 <main+0x28b4>
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ****** dir2 *******
    2bee:	80 91 4c 03 	lds	r24, 0x034C
    2bf2:	80 61       	ori	r24, 0x10	; 16
    2bf4:	80 93 4c 03 	sts	0x034C, r24
    2bf8:	a1 e0       	ldi	r26, 0x01	; 1
    2bfa:	ca 2e       	mov	r12, r26
    2bfc:	d1 2c       	mov	r13, r1
    2bfe:	3c c0       	rjmp	.+120    	; 0x2c78 <main+0x2928>
    2c00:	02 e2       	ldi	r16, 0x22	; 34
    2c02:	10 e0       	ldi	r17, 0x00	; 0
					m2 = 1;
				}
				if(state == 4){
    2c04:	04 30       	cpi	r16, 0x04	; 4
    2c06:	11 05       	cpc	r17, r1
    2c08:	69 f4       	brne	.+26     	; 0x2c24 <main+0x28d4>
						m2 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    2c0a:	80 91 4c 03 	lds	r24, 0x034C
    2c0e:	8f 7d       	andi	r24, 0xDF	; 223
    2c10:	80 93 4c 03 	sts	0x034C, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2c14:	80 91 4e 03 	lds	r24, 0x034E
    2c18:	88 60       	ori	r24, 0x08	; 8
    2c1a:	80 93 4e 03 	sts	0x034E, r24
    2c1e:	cc 24       	eor	r12, r12
    2c20:	dd 24       	eor	r13, r13
    2c22:	37 c0       	rjmp	.+110    	; 0x2c92 <main+0x2942>
				}
				if(state == 5){
    2c24:	05 30       	cpi	r16, 0x05	; 5
    2c26:	11 05       	cpc	r17, r1
    2c28:	59 f4       	brne	.+22     	; 0x2c40 <main+0x28f0>
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2c2a:	80 91 4e 03 	lds	r24, 0x034E
    2c2e:	8f 7e       	andi	r24, 0xEF	; 239
    2c30:	80 93 4e 03 	sts	0x034E, r24
					u_motorByte0.bits_in_motorByte0.m2Drop = 1;
    2c34:	80 91 4c 03 	lds	r24, 0x034C
    2c38:	80 62       	ori	r24, 0x20	; 32
    2c3a:	80 93 4c 03 	sts	0x034C, r24
    2c3e:	35 c0       	rjmp	.+106    	; 0x2caa <main+0x295a>
				}
				//*********************************************
				if(state == 6){
    2c40:	06 30       	cpi	r16, 0x06	; 6
    2c42:	11 05       	cpc	r17, r1
    2c44:	49 f4       	brne	.+18     	; 0x2c58 <main+0x2908>
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    2c46:	80 91 4c 03 	lds	r24, 0x034C
    2c4a:	80 61       	ori	r24, 0x10	; 16
    2c4c:	80 93 4c 03 	sts	0x034C, r24
    2c50:	f1 e0       	ldi	r31, 0x01	; 1
    2c52:	cf 2e       	mov	r12, r31
    2c54:	d1 2c       	mov	r13, r1
    2c56:	37 c0       	rjmp	.+110    	; 0x2cc6 <main+0x2976>
					m2 = 1;
				}
				if(state == 7){
    2c58:	07 30       	cpi	r16, 0x07	; 7
    2c5a:	11 05       	cpc	r17, r1
    2c5c:	69 f4       	brne	.+26     	; 0x2c78 <main+0x2928>
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m3Drop = 1;
    2c5e:	80 91 4d 03 	lds	r24, 0x034D
    2c62:	81 60       	ori	r24, 0x01	; 1
    2c64:	80 93 4d 03 	sts	0x034D, r24
					u_motorByte0.bits_in_motorByte0.m3Dir = 0;  // ******* dir3 *******
    2c68:	80 91 4c 03 	lds	r24, 0x034C
    2c6c:	8f 77       	andi	r24, 0x7F	; 127
    2c6e:	80 93 4c 03 	sts	0x034C, r24
    2c72:	cc 24       	eor	r12, r12
    2c74:	dd 24       	eor	r13, r13
    2c76:	33 c0       	rjmp	.+102    	; 0x2cde <main+0x298e>
						OrangutanLCD::clear();
						OrangutanLCD::print("Clean 1");
						print6 = 0;
					}*/
				}
				if(state == 8){
    2c78:	08 30       	cpi	r16, 0x08	; 8
    2c7a:	11 05       	cpc	r17, r1
    2c7c:	51 f4       	brne	.+20     	; 0x2c92 <main+0x2942>
					m3 = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2c7e:	80 91 4e 03 	lds	r24, 0x034E
    2c82:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2c84:	8f 7d       	andi	r24, 0xDF	; 223
    2c86:	80 93 4e 03 	sts	0x034E, r24
    2c8a:	e1 e0       	ldi	r30, 0x01	; 1
    2c8c:	2e 2e       	mov	r2, r30
    2c8e:	31 2c       	mov	r3, r1
    2c90:	3a c0       	rjmp	.+116    	; 0x2d06 <main+0x29b6>
				}
				if(state == 9){
    2c92:	09 30       	cpi	r16, 0x09	; 9
    2c94:	11 05       	cpc	r17, r1
    2c96:	49 f4       	brne	.+18     	; 0x2caa <main+0x295a>
					m2 = 1;
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;  // ******* dir2 *******
    2c98:	80 91 4c 03 	lds	r24, 0x034C
    2c9c:	8f 7e       	andi	r24, 0xEF	; 239
    2c9e:	80 93 4c 03 	sts	0x034C, r24
    2ca2:	71 e0       	ldi	r23, 0x01	; 1
    2ca4:	c7 2e       	mov	r12, r23
    2ca6:	d1 2c       	mov	r13, r1
    2ca8:	31 c0       	rjmp	.+98     	; 0x2d0c <main+0x29bc>
				}
				if(state == 10){
    2caa:	0a 30       	cpi	r16, 0x0A	; 10
    2cac:	11 05       	cpc	r17, r1
    2cae:	59 f4       	brne	.+22     	; 0x2cc6 <main+0x2976>
					m2 = 0;
					m3 = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2cb0:	80 91 4e 03 	lds	r24, 0x034E
    2cb4:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2cb6:	80 62       	ori	r24, 0x20	; 32
    2cb8:	80 93 4e 03 	sts	0x034E, r24
    2cbc:	22 24       	eor	r2, r2
    2cbe:	33 24       	eor	r3, r3
    2cc0:	cc 24       	eor	r12, r12
    2cc2:	dd 24       	eor	r13, r13
    2cc4:	34 c0       	rjmp	.+104    	; 0x2d2e <main+0x29de>
				}
				if(state == 11){
    2cc6:	0b 30       	cpi	r16, 0x0B	; 11
    2cc8:	11 05       	cpc	r17, r1
    2cca:	49 f4       	brne	.+18     	; 0x2cde <main+0x298e>
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    2ccc:	80 91 4c 03 	lds	r24, 0x034C
    2cd0:	80 61       	ori	r24, 0x10	; 16
    2cd2:	80 93 4c 03 	sts	0x034C, r24
    2cd6:	61 e0       	ldi	r22, 0x01	; 1
    2cd8:	c6 2e       	mov	r12, r22
    2cda:	d1 2c       	mov	r13, r1
    2cdc:	34 c0       	rjmp	.+104    	; 0x2d46 <main+0x29f6>
					m2 = 1;
				}
				if(state == 12){
    2cde:	0c 30       	cpi	r16, 0x0C	; 12
    2ce0:	11 05       	cpc	r17, r1
    2ce2:	89 f4       	brne	.+34     	; 0x2d06 <main+0x29b6>
					m2 = 0;
					u_motorByte0.bits_in_motorByte0.m3Dir = 0;  // ******* dir3 *******
    2ce4:	80 91 4c 03 	lds	r24, 0x034C
    2ce8:	8f 77       	andi	r24, 0x7F	; 127
    2cea:	80 93 4c 03 	sts	0x034C, r24
					m3 = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2cee:	80 91 4e 03 	lds	r24, 0x034E
    2cf2:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2cf4:	8f 7d       	andi	r24, 0xDF	; 223
    2cf6:	80 93 4e 03 	sts	0x034E, r24
    2cfa:	cc 24       	eor	r12, r12
    2cfc:	dd 24       	eor	r13, r13
    2cfe:	51 e0       	ldi	r21, 0x01	; 1
    2d00:	25 2e       	mov	r2, r21
    2d02:	31 2c       	mov	r3, r1
    2d04:	31 c0       	rjmp	.+98     	; 0x2d68 <main+0x2a18>
				}
				if(state == 13){
    2d06:	0d 30       	cpi	r16, 0x0D	; 13
    2d08:	11 05       	cpc	r17, r1
    2d0a:	d1 f1       	breq	.+116    	; 0x2d80 <main+0x2a30>
					m2 = 1;
				}
				if(state == 14){
    2d0c:	0e 30       	cpi	r16, 0x0E	; 14
    2d0e:	11 05       	cpc	r17, r1
    2d10:	71 f4       	brne	.+28     	; 0x2d2e <main+0x29de>
					m3 = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2d12:	80 91 4e 03 	lds	r24, 0x034E
    2d16:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2d18:	80 62       	ori	r24, 0x20	; 32
    2d1a:	80 93 4e 03 	sts	0x034E, r24
					u_motorByte1.bits_in_motorByte1.m3Drop = 0;
    2d1e:	80 91 4d 03 	lds	r24, 0x034D
    2d22:	8e 7f       	andi	r24, 0xFE	; 254
    2d24:	80 93 4d 03 	sts	0x034D, r24
    2d28:	22 24       	eor	r2, r2
    2d2a:	33 24       	eor	r3, r3
    2d2c:	3e c0       	rjmp	.+124    	; 0x2daa <main+0x2a5a>
				}
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				if(state == 15){
    2d2e:	0f 30       	cpi	r16, 0x0F	; 15
    2d30:	11 05       	cpc	r17, r1
    2d32:	49 f4       	brne	.+18     	; 0x2d46 <main+0x29f6>
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m4Drop = 1;
    2d34:	80 91 4d 03 	lds	r24, 0x034D
    2d38:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.m4Dir = 0;  // ******* dir4 *******
    2d3a:	8b 7f       	andi	r24, 0xFB	; 251
    2d3c:	80 93 4d 03 	sts	0x034D, r24
    2d40:	cc 24       	eor	r12, r12
    2d42:	dd 24       	eor	r13, r13
    2d44:	3e c0       	rjmp	.+124    	; 0x2dc2 <main+0x2a72>
						OrangutanLCD::clear();
						OrangutanLCD::print("Clean 2");
						print15 = 0;
					}*/
				}
				if(state == 16){
    2d46:	00 31       	cpi	r16, 0x10	; 16
    2d48:	11 05       	cpc	r17, r1
    2d4a:	71 f4       	brne	.+28     	; 0x2d68 <main+0x2a18>
					m4 = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2d4c:	80 91 4f 03 	lds	r24, 0x034F
    2d50:	81 60       	ori	r24, 0x01	; 1
    2d52:	80 93 4f 03 	sts	0x034F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2d56:	80 91 4e 03 	lds	r24, 0x034E
    2d5a:	8f 77       	andi	r24, 0x7F	; 127
    2d5c:	80 93 4e 03 	sts	0x034E, r24
    2d60:	41 e0       	ldi	r20, 0x01	; 1
    2d62:	44 2e       	mov	r4, r20
    2d64:	51 2c       	mov	r5, r1
    2d66:	45 c0       	rjmp	.+138    	; 0x2df2 <main+0x2aa2>
				}
				if(state == 17){
    2d68:	01 31       	cpi	r16, 0x11	; 17
    2d6a:	11 05       	cpc	r17, r1
    2d6c:	61 f4       	brne	.+24     	; 0x2d86 <main+0x2a36>
					m2 = 1;
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;  // ******* dir2 *******
    2d6e:	80 91 4c 03 	lds	r24, 0x034C
    2d72:	8f 7e       	andi	r24, 0xEF	; 239
    2d74:	80 93 4c 03 	sts	0x034C, r24
    2d78:	31 e0       	ldi	r19, 0x01	; 1
    2d7a:	c3 2e       	mov	r12, r19
    2d7c:	d1 2c       	mov	r13, r1
    2d7e:	3c c0       	rjmp	.+120    	; 0x2df8 <main+0x2aa8>
    2d80:	21 e0       	ldi	r18, 0x01	; 1
    2d82:	c2 2e       	mov	r12, r18
    2d84:	d1 2c       	mov	r13, r1
				}
				if(state == 18){
    2d86:	02 31       	cpi	r16, 0x12	; 18
    2d88:	11 05       	cpc	r17, r1
    2d8a:	79 f4       	brne	.+30     	; 0x2daa <main+0x2a5a>
					m2 = 0;
					m4 = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2d8c:	80 91 4f 03 	lds	r24, 0x034F
    2d90:	8e 7f       	andi	r24, 0xFE	; 254
    2d92:	80 93 4f 03 	sts	0x034F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2d96:	80 91 4e 03 	lds	r24, 0x034E
    2d9a:	80 68       	ori	r24, 0x80	; 128
    2d9c:	80 93 4e 03 	sts	0x034E, r24
    2da0:	cc 24       	eor	r12, r12
    2da2:	dd 24       	eor	r13, r13
    2da4:	44 24       	eor	r4, r4
    2da6:	55 24       	eor	r5, r5
    2da8:	3e c0       	rjmp	.+124    	; 0x2e26 <main+0x2ad6>
				}
				if(state == 19){
    2daa:	03 31       	cpi	r16, 0x13	; 19
    2dac:	11 05       	cpc	r17, r1
    2dae:	49 f4       	brne	.+18     	; 0x2dc2 <main+0x2a72>
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    2db0:	80 91 4c 03 	lds	r24, 0x034C
    2db4:	80 61       	ori	r24, 0x10	; 16
    2db6:	80 93 4c 03 	sts	0x034C, r24
    2dba:	91 e0       	ldi	r25, 0x01	; 1
    2dbc:	c9 2e       	mov	r12, r25
    2dbe:	d1 2c       	mov	r13, r1
    2dc0:	3e c0       	rjmp	.+124    	; 0x2e3e <main+0x2aee>
					m2 = 1;
				}
				if(state == 20){
    2dc2:	04 31       	cpi	r16, 0x14	; 20
    2dc4:	11 05       	cpc	r17, r1
    2dc6:	a9 f4       	brne	.+42     	; 0x2df2 <main+0x2aa2>
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m4Dir = 0;  // ******* dir4 *******
    2dc8:	80 91 4d 03 	lds	r24, 0x034D
    2dcc:	8b 7f       	andi	r24, 0xFB	; 251
    2dce:	80 93 4d 03 	sts	0x034D, r24
					m4 = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2dd2:	80 91 4f 03 	lds	r24, 0x034F
    2dd6:	81 60       	ori	r24, 0x01	; 1
    2dd8:	80 93 4f 03 	sts	0x034F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2ddc:	80 91 4e 03 	lds	r24, 0x034E
    2de0:	8f 77       	andi	r24, 0x7F	; 127
    2de2:	80 93 4e 03 	sts	0x034E, r24
    2de6:	cc 24       	eor	r12, r12
    2de8:	dd 24       	eor	r13, r13
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	48 2e       	mov	r4, r24
    2dee:	51 2c       	mov	r5, r1
    2df0:	31 c0       	rjmp	.+98     	; 0x2e54 <main+0x2b04>
				}
				if(state == 21){
    2df2:	05 31       	cpi	r16, 0x15	; 21
    2df4:	11 05       	cpc	r17, r1
    2df6:	d1 f1       	breq	.+116    	; 0x2e6c <main+0x2b1c>
					m2 = 1;
				}
				if(state == 22){
    2df8:	06 31       	cpi	r16, 0x16	; 22
    2dfa:	11 05       	cpc	r17, r1
    2dfc:	a1 f4       	brne	.+40     	; 0x2e26 <main+0x2ad6>
					m4 = 0;
					m2 = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2dfe:	80 91 4f 03 	lds	r24, 0x034F
    2e02:	8e 7f       	andi	r24, 0xFE	; 254
    2e04:	80 93 4f 03 	sts	0x034F, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2e08:	80 91 4e 03 	lds	r24, 0x034E
    2e0c:	80 68       	ori	r24, 0x80	; 128
    2e0e:	80 93 4e 03 	sts	0x034E, r24
					u_motorByte1.bits_in_motorByte1.m4Drop = 0;
    2e12:	80 91 4d 03 	lds	r24, 0x034D
    2e16:	87 7f       	andi	r24, 0xF7	; 247
    2e18:	80 93 4d 03 	sts	0x034D, r24
    2e1c:	cc 24       	eor	r12, r12
    2e1e:	dd 24       	eor	r13, r13
    2e20:	44 24       	eor	r4, r4
    2e22:	55 24       	eor	r5, r5
    2e24:	2f c0       	rjmp	.+94     	; 0x2e84 <main+0x2b34>
				}
				//*************************************************
				if(state == 23){
    2e26:	07 31       	cpi	r16, 0x17	; 23
    2e28:	11 05       	cpc	r17, r1
    2e2a:	49 f4       	brne	.+18     	; 0x2e3e <main+0x2aee>
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    2e2c:	80 91 4c 03 	lds	r24, 0x034C
    2e30:	80 61       	ori	r24, 0x10	; 16
    2e32:	80 93 4c 03 	sts	0x034C, r24
    2e36:	b1 e0       	ldi	r27, 0x01	; 1
    2e38:	cb 2e       	mov	r12, r27
    2e3a:	d1 2c       	mov	r13, r1
    2e3c:	33 c0       	rjmp	.+102    	; 0x2ea4 <main+0x2b54>
					m2 = 1;
				}
				if(state == 24){
    2e3e:	08 31       	cpi	r16, 0x18	; 24
    2e40:	11 05       	cpc	r17, r1
    2e42:	41 f4       	brne	.+16     	; 0x2e54 <main+0x2b04>
					m2 = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2e44:	80 91 4f 03 	lds	r24, 0x034F
    2e48:	87 7f       	andi	r24, 0xF7	; 247
    2e4a:	80 93 4f 03 	sts	0x034F, r24
    2e4e:	cc 24       	eor	r12, r12
    2e50:	dd 24       	eor	r13, r13
    2e52:	31 c0       	rjmp	.+98     	; 0x2eb6 <main+0x2b66>
						OrangutanLCD::clear();
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
				}
				if(state == 25){
    2e54:	09 31       	cpi	r16, 0x19	; 25
    2e56:	11 05       	cpc	r17, r1
    2e58:	61 f4       	brne	.+24     	; 0x2e72 <main+0x2b22>
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;  // ******* dir2 *******
    2e5a:	80 91 4c 03 	lds	r24, 0x034C
    2e5e:	8f 7e       	andi	r24, 0xEF	; 239
    2e60:	80 93 4c 03 	sts	0x034C, r24
    2e64:	a1 e0       	ldi	r26, 0x01	; 1
    2e66:	ca 2e       	mov	r12, r26
    2e68:	d1 2c       	mov	r13, r1
    2e6a:	28 c0       	rjmp	.+80     	; 0x2ebc <main+0x2b6c>
    2e6c:	f1 e0       	ldi	r31, 0x01	; 1
    2e6e:	cf 2e       	mov	r12, r31
    2e70:	d1 2c       	mov	r13, r1
					m2 = 1;
				}
				if(state == 26){
    2e72:	0a 31       	cpi	r16, 0x1A	; 26
    2e74:	11 05       	cpc	r17, r1
    2e76:	31 f4       	brne	.+12     	; 0x2e84 <main+0x2b34>
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    2e78:	80 91 4f 03 	lds	r24, 0x034F
    2e7c:	88 60       	ori	r24, 0x08	; 8
    2e7e:	80 93 4f 03 	sts	0x034F, r24
    2e82:	2d c0       	rjmp	.+90     	; 0x2ede <main+0x2b8e>
				}
				if(state == 27){
    2e84:	0b 31       	cpi	r16, 0x1B	; 27
    2e86:	11 05       	cpc	r17, r1
    2e88:	69 f4       	brne	.+26     	; 0x2ea4 <main+0x2b54>
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m5Drop = 1;
    2e8a:	80 91 4d 03 	lds	r24, 0x034D
    2e8e:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.m5Dir = 0;
    2e90:	8f 7d       	andi	r24, 0xDF	; 223
    2e92:	80 93 4d 03 	sts	0x034D, r24
    2e96:	cc 24       	eor	r12, r12
    2e98:	dd 24       	eor	r13, r13
    2e9a:	e1 e0       	ldi	r30, 0x01	; 1
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	fe 83       	std	Y+6, r31	; 0x06
    2ea0:	ed 83       	std	Y+5, r30	; 0x05
    2ea2:	25 c0       	rjmp	.+74     	; 0x2eee <main+0x2b9e>
					m5 = 1;
				}
				if(state == 28){
    2ea4:	0c 31       	cpi	r16, 0x1C	; 28
    2ea6:	11 05       	cpc	r17, r1
    2ea8:	31 f4       	brne	.+12     	; 0x2eb6 <main+0x2b66>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    2eaa:	80 91 4f 03 	lds	r24, 0x034F
    2eae:	8d 7f       	andi	r24, 0xFD	; 253
    2eb0:	80 93 4f 03 	sts	0x034F, r24
    2eb4:	28 c0       	rjmp	.+80     	; 0x2f06 <main+0x2bb6>
				}
				if(state == 29){
    2eb6:	0d 31       	cpi	r16, 0x1D	; 29
    2eb8:	11 05       	cpc	r17, r1
    2eba:	b9 f1       	breq	.+110    	; 0x2f2a <main+0x2bda>
					m2 = 1;
				}
				if(state == 30){
    2ebc:	0e 31       	cpi	r16, 0x1E	; 30
    2ebe:	11 05       	cpc	r17, r1
    2ec0:	71 f4       	brne	.+28     	; 0x2ede <main+0x2b8e>
					m5 = 0;
						u_motorByte1.bits_in_motorByte1.m5Drop = 0;
    2ec2:	80 91 4d 03 	lds	r24, 0x034D
    2ec6:	8f 7b       	andi	r24, 0xBF	; 191
    2ec8:	80 93 4d 03 	sts	0x034D, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    2ecc:	80 91 4f 03 	lds	r24, 0x034F
    2ed0:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    2ed2:	8b 7f       	andi	r24, 0xFB	; 251
    2ed4:	80 93 4f 03 	sts	0x034F, r24
    2ed8:	1e 82       	std	Y+6, r1	; 0x06
    2eda:	1d 82       	std	Y+5, r1	; 0x05
    2edc:	35 c0       	rjmp	.+106    	; 0x2f48 <main+0x2bf8>
				}
				if(state == 31){
    2ede:	0f 31       	cpi	r16, 0x1F	; 31
    2ee0:	11 05       	cpc	r17, r1
    2ee2:	29 f4       	brne	.+10     	; 0x2eee <main+0x2b9e>
					m2 = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2ee4:	80 91 4e 03 	lds	r24, 0x034E
    2ee8:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    2eea:	80 61       	ori	r24, 0x10	; 16
    2eec:	19 c0       	rjmp	.+50     	; 0x2f20 <main+0x2bd0>
				}
				if(state == 32){
    2eee:	00 32       	cpi	r16, 0x20	; 32
    2ef0:	11 05       	cpc	r17, r1
    2ef2:	49 f4       	brne	.+18     	; 0x2f06 <main+0x2bb6>
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;
    2ef4:	80 91 4c 03 	lds	r24, 0x034C
    2ef8:	8f 7e       	andi	r24, 0xEF	; 239
    2efa:	80 93 4c 03 	sts	0x034C, r24
    2efe:	e1 e0       	ldi	r30, 0x01	; 1
    2f00:	ce 2e       	mov	r12, r30
    2f02:	d1 2c       	mov	r13, r1
    2f04:	3b c0       	rjmp	.+118    	; 0x2f7c <main+0x2c2c>
					m2 = 1;
				}
				if(state == 33){
    2f06:	01 32       	cpi	r16, 0x21	; 33
    2f08:	11 05       	cpc	r17, r1
    2f0a:	91 f4       	brne	.+36     	; 0x2f30 <main+0x2be0>
					m2 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    2f0c:	80 91 4c 03 	lds	r24, 0x034C
    2f10:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.m1Drop = 1;
    2f12:	84 60       	ori	r24, 0x04	; 4
    2f14:	80 93 4c 03 	sts	0x034C, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2f18:	80 91 4e 03 	lds	r24, 0x034E
    2f1c:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2f1e:	8f 7e       	andi	r24, 0xEF	; 239
    2f20:	80 93 4e 03 	sts	0x034E, r24
    2f24:	cc 24       	eor	r12, r12
    2f26:	dd 24       	eor	r13, r13
    2f28:	29 c0       	rjmp	.+82     	; 0x2f7c <main+0x2c2c>
    2f2a:	71 e0       	ldi	r23, 0x01	; 1
    2f2c:	c7 2e       	mov	r12, r23
    2f2e:	d1 2c       	mov	r13, r1
				}
				if(state == 34){
    2f30:	02 32       	cpi	r16, 0x22	; 34
    2f32:	11 05       	cpc	r17, r1
    2f34:	49 f4       	brne	.+18     	; 0x2f48 <main+0x2bf8>
					u_motorByte0.bits_in_motorByte0.m1Dir = 0;
    2f36:	80 91 4c 03 	lds	r24, 0x034C
    2f3a:	8d 7f       	andi	r24, 0xFD	; 253
    2f3c:	80 93 4c 03 	sts	0x034C, r24
    2f40:	61 e0       	ldi	r22, 0x01	; 1
    2f42:	66 2e       	mov	r6, r22
    2f44:	71 2c       	mov	r7, r1
    2f46:	1a c0       	rjmp	.+52     	; 0x2f7c <main+0x2c2c>
					m1 = 1;
					}
				if(state == 35){
    2f48:	03 32       	cpi	r16, 0x23	; 35
    2f4a:	11 05       	cpc	r17, r1
    2f4c:	b9 f4       	brne	.+46     	; 0x2f7c <main+0x2c2c>
					m1 = 0;
					u_motorByte0.bits_in_motorByte0.m1Drop = 0;
    2f4e:	80 91 4c 03 	lds	r24, 0x034C
    2f52:	8b 7f       	andi	r24, 0xFB	; 251
    2f54:	80 93 4c 03 	sts	0x034C, r24
					if(print35 == 1){
    2f58:	2f 85       	ldd	r18, Y+15	; 0x0f
    2f5a:	38 89       	ldd	r19, Y+16	; 0x10
    2f5c:	21 30       	cpi	r18, 0x01	; 1
    2f5e:	31 05       	cpc	r19, r1
    2f60:	19 f0       	breq	.+6      	; 0x2f68 <main+0x2c18>
    2f62:	66 24       	eor	r6, r6
    2f64:	77 24       	eor	r7, r7
    2f66:	0a c0       	rjmp	.+20     	; 0x2f7c <main+0x2c2c>
						OrangutanLCD::clear();
    2f68:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    2f6c:	8e e0       	ldi	r24, 0x0E	; 14
    2f6e:	93 e0       	ldi	r25, 0x03	; 3
    2f70:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
    2f74:	66 24       	eor	r6, r6
    2f76:	77 24       	eor	r7, r7
    2f78:	18 8a       	std	Y+16, r1	; 0x10
    2f7a:	1f 86       	std	Y+15, r1	; 0x0f





				if( ((counter - counterRef) % (totallength1) ) < (steplength1) && m1)  //check if it is in the right period of the loop to send high
    2f7c:	e9 8d       	ldd	r30, Y+25	; 0x19
    2f7e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2f80:	ee 19       	sub	r30, r14
    2f82:	ff 09       	sbc	r31, r15
    2f84:	60 91 39 03 	lds	r22, 0x0339
    2f88:	70 91 3a 03 	lds	r23, 0x033A
    2f8c:	cf 01       	movw	r24, r30
    2f8e:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    2f92:	20 91 2f 03 	lds	r18, 0x032F
    2f96:	30 91 30 03 	lds	r19, 0x0330
    2f9a:	82 17       	cp	r24, r18
    2f9c:	93 07       	cpc	r25, r19
    2f9e:	3c f4       	brge	.+14     	; 0x2fae <main+0x2c5e>
    2fa0:	61 14       	cp	r6, r1
    2fa2:	71 04       	cpc	r7, r1
    2fa4:	21 f0       	breq	.+8      	; 0x2fae <main+0x2c5e>
				{
					u_motorByte0.bits_in_motorByte0.m1Step = 1; // set bit 0
    2fa6:	80 91 4c 03 	lds	r24, 0x034C
    2faa:	81 60       	ori	r24, 0x01	; 1
    2fac:	03 c0       	rjmp	.+6      	; 0x2fb4 <main+0x2c64>
				}
				else
				{
					u_motorByte0.bits_in_motorByte0.m1Step = 0; // set bit 0
    2fae:	80 91 4c 03 	lds	r24, 0x034C
    2fb2:	8e 7f       	andi	r24, 0xFE	; 254
    2fb4:	80 93 4c 03 	sts	0x034C, r24
				}

				if( ((counter - counterRef) % (totallength2) ) < (steplength2) && m2)
    2fb8:	60 91 3b 03 	lds	r22, 0x033B
    2fbc:	70 91 3c 03 	lds	r23, 0x033C
    2fc0:	cf 01       	movw	r24, r30
    2fc2:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    2fc6:	20 91 31 03 	lds	r18, 0x0331
    2fca:	30 91 32 03 	lds	r19, 0x0332
    2fce:	82 17       	cp	r24, r18
    2fd0:	93 07       	cpc	r25, r19
    2fd2:	3c f4       	brge	.+14     	; 0x2fe2 <main+0x2c92>
    2fd4:	c1 14       	cp	r12, r1
    2fd6:	d1 04       	cpc	r13, r1
    2fd8:	21 f0       	breq	.+8      	; 0x2fe2 <main+0x2c92>
				{
					u_motorByte0.bits_in_motorByte0.m2Step = 1; // set bit 1
    2fda:	80 91 4c 03 	lds	r24, 0x034C
    2fde:	88 60       	ori	r24, 0x08	; 8
    2fe0:	03 c0       	rjmp	.+6      	; 0x2fe8 <main+0x2c98>
				}
				else
				{
					u_motorByte0.bits_in_motorByte0.m2Step = 0; // set bit 1
    2fe2:	80 91 4c 03 	lds	r24, 0x034C
    2fe6:	87 7f       	andi	r24, 0xF7	; 247
    2fe8:	80 93 4c 03 	sts	0x034C, r24
				}

				if( ((counter - counterRef) % (totallength3) ) < (steplength3) && m3)
    2fec:	60 91 3d 03 	lds	r22, 0x033D
    2ff0:	70 91 3e 03 	lds	r23, 0x033E
    2ff4:	cf 01       	movw	r24, r30
    2ff6:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    2ffa:	20 91 33 03 	lds	r18, 0x0333
    2ffe:	30 91 34 03 	lds	r19, 0x0334
    3002:	82 17       	cp	r24, r18
    3004:	93 07       	cpc	r25, r19
    3006:	3c f4       	brge	.+14     	; 0x3016 <main+0x2cc6>
    3008:	21 14       	cp	r2, r1
    300a:	31 04       	cpc	r3, r1
    300c:	21 f0       	breq	.+8      	; 0x3016 <main+0x2cc6>
				{
					u_motorByte0.bits_in_motorByte0.m3Step = 1; // set bit 1
    300e:	80 91 4c 03 	lds	r24, 0x034C
    3012:	80 64       	ori	r24, 0x40	; 64
    3014:	03 c0       	rjmp	.+6      	; 0x301c <main+0x2ccc>
				}
				else
				{
					u_motorByte0.bits_in_motorByte0.m3Step = 0; // set bit 1
    3016:	80 91 4c 03 	lds	r24, 0x034C
    301a:	8f 7b       	andi	r24, 0xBF	; 191
    301c:	80 93 4c 03 	sts	0x034C, r24
				}

				if( ((counter - counterRef) % (totallength4) ) < (steplength4) && m4)
    3020:	60 91 3f 03 	lds	r22, 0x033F
    3024:	70 91 40 03 	lds	r23, 0x0340
    3028:	cf 01       	movw	r24, r30
    302a:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    302e:	20 91 35 03 	lds	r18, 0x0335
    3032:	30 91 36 03 	lds	r19, 0x0336
    3036:	82 17       	cp	r24, r18
    3038:	93 07       	cpc	r25, r19
    303a:	3c f4       	brge	.+14     	; 0x304a <main+0x2cfa>
    303c:	41 14       	cp	r4, r1
    303e:	51 04       	cpc	r5, r1
    3040:	21 f0       	breq	.+8      	; 0x304a <main+0x2cfa>
				{
					u_motorByte1.bits_in_motorByte1.m4Step = 1; // set bit 1
    3042:	80 91 4d 03 	lds	r24, 0x034D
    3046:	82 60       	ori	r24, 0x02	; 2
    3048:	03 c0       	rjmp	.+6      	; 0x3050 <main+0x2d00>
				}
				else
				{
					u_motorByte1.bits_in_motorByte1.m4Step = 0; // set bit 1
    304a:	80 91 4d 03 	lds	r24, 0x034D
    304e:	8d 7f       	andi	r24, 0xFD	; 253
    3050:	80 93 4d 03 	sts	0x034D, r24
				}

				if( ((counter - counterRefFive) % (totallength5) ) < (steplength5) && m5)
    3054:	60 91 41 03 	lds	r22, 0x0341
    3058:	70 91 42 03 	lds	r23, 0x0342
    305c:	89 8d       	ldd	r24, Y+25	; 0x19
    305e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3060:	4b 89       	ldd	r20, Y+19	; 0x13
    3062:	5c 89       	ldd	r21, Y+20	; 0x14
    3064:	84 1b       	sub	r24, r20
    3066:	95 0b       	sbc	r25, r21
    3068:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodhi4>
    306c:	20 91 37 03 	lds	r18, 0x0337
    3070:	30 91 38 03 	lds	r19, 0x0338
    3074:	82 17       	cp	r24, r18
    3076:	93 07       	cpc	r25, r19
    3078:	44 f4       	brge	.+16     	; 0x308a <main+0x2d3a>
    307a:	8d 81       	ldd	r24, Y+5	; 0x05
    307c:	9e 81       	ldd	r25, Y+6	; 0x06
    307e:	89 2b       	or	r24, r25
    3080:	21 f0       	breq	.+8      	; 0x308a <main+0x2d3a>
				{
					u_motorByte1.bits_in_motorByte1.m5Step = 1; // set bit 1
    3082:	80 91 4d 03 	lds	r24, 0x034D
    3086:	80 61       	ori	r24, 0x10	; 16
    3088:	03 c0       	rjmp	.+6      	; 0x3090 <main+0x2d40>
				}
				else
				{
					u_motorByte1.bits_in_motorByte1.m5Step = 0; // set bit 1
    308a:	80 91 4d 03 	lds	r24, 0x034D
    308e:	8f 7e       	andi	r24, 0xEF	; 239
    3090:	80 93 4d 03 	sts	0x034D, r24
				}

				i2c_start(I2C1+I2C_WRITE);
    3094:	80 e4       	ldi	r24, 0x40	; 64
    3096:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
				i2c_write(0x2);									// write command byte
    309a:	82 e0       	ldi	r24, 0x02	; 2
    309c:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
				i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
    30a0:	80 91 4c 03 	lds	r24, 0x034C
    30a4:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
       	 		i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
    30a8:	80 91 4d 03 	lds	r24, 0x034D
    30ac:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
       		 	i2c_stop();                            // set stop conditon = release bus
    30b0:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8i2c_stopv>

				i2c_start(I2C2+I2C_WRITE);
    30b4:	82 e4       	ldi	r24, 0x42	; 66
    30b6:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
				i2c_write(0x2);
    30ba:	82 e0       	ldi	r24, 0x02	; 2
    30bc:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
				i2c_write(u_outputByte0.outputByte0);
    30c0:	80 91 4e 03 	lds	r24, 0x034E
    30c4:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
				i2c_write(u_outputByte1.outputByte1);
    30c8:	80 91 4f 03 	lds	r24, 0x034F
    30cc:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>

				counter ++;
    30d0:	e9 8d       	ldd	r30, Y+25	; 0x19
    30d2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    30d4:	31 96       	adiw	r30, 0x01	; 1
    30d6:	fa 8f       	std	Y+26, r31	; 0x1a
    30d8:	e9 8f       	std	Y+25, r30	; 0x19
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>


		if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("BOTH B");
			while(state != -1)
    30e2:	ff ef       	ldi	r31, 0xFF	; 255
    30e4:	0f 3f       	cpi	r16, 0xFF	; 255
    30e6:	1f 07       	cpc	r17, r31
    30e8:	09 f0       	breq	.+2      	; 0x30ec <main+0x2d9c>
    30ea:	b0 c9       	rjmp	.-3232   	; 0x244c <main+0x20fc>
				counter ++;
				delay_ms(1);
   		 	}
		}
		}
		u_motorByte0.bits_in_motorByte0.m1Drop = 0;
    30ec:	80 91 4c 03 	lds	r24, 0x034C
		u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    30f0:	8b 7d       	andi	r24, 0xDB	; 219
    30f2:	80 93 4c 03 	sts	0x034C, r24
		u_motorByte1.bits_in_motorByte1.m3Drop = 0;
    30f6:	80 91 4d 03 	lds	r24, 0x034D
		u_motorByte1.bits_in_motorByte1.m4Drop = 0;
		u_motorByte1.bits_in_motorByte1.m5Drop = 0;
    30fa:	86 7b       	andi	r24, 0xB6	; 182
    30fc:	80 93 4d 03 	sts	0x034D, r24
		
		i2c_start(I2C1+I2C_WRITE);
    3100:	80 e4       	ldi	r24, 0x40	; 64
    3102:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>
		i2c_write(0x2);
    3106:	82 e0       	ldi	r24, 0x02	; 2
    3108:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
    310c:	80 91 4c 03 	lds	r24, 0x034C
    3110:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
    3114:	80 91 4d 03 	lds	r24, 0x034D
    3118:	0e 94 88 19 	call	0x3310	; 0x3310 <_Z9i2c_writeh>
		i2c_stop();
    311c:	0e 94 80 19 	call	0x3300	; 0x3300 <_Z8i2c_stopv>
	}
	OrangutanLCD::print("END");
    3120:	8b e2       	ldi	r24, 0x2B	; 43
    3122:	93 e0       	ldi	r25, 0x03	; 3
    3124:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
    3128:	0c 94 c2 01 	jmp	0x384	; 0x384 <main+0x34>
			while(button != 0){
				if(stateButton == 0 && OrangutanDigital::isInputHigh(IO_D0)){
					counterRefPush = counter;
					stateButton = 1;
				}
				if(stateButton == 1){
    312c:	21 e0       	ldi	r18, 0x01	; 1
    312e:	62 16       	cp	r6, r18
    3130:	71 04       	cpc	r7, r1
    3132:	11 f0       	breq	.+4      	; 0x3138 <main+0x2de8>
    3134:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <main+0x1a2>
    3138:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <main+0x170>
    313c:	51 e0       	ldi	r21, 0x01	; 1
    313e:	65 2e       	mov	r6, r21
    3140:	71 2c       	mov	r7, r1
    3142:	0c 94 95 02 	jmp	0x52a	; 0x52a <main+0x1da>
				
				if(stateButton == 0 && OrangutanDigital::isInputHigh(IO_D0)){
					counterRefPush = counter;
					stateButton = 1;
				}
				if(stateButton == 1){
    3146:	31 e0       	ldi	r19, 0x01	; 1
    3148:	63 16       	cp	r6, r19
    314a:	71 04       	cpc	r7, r1
    314c:	11 f0       	breq	.+4      	; 0x3152 <main+0x2e02>
    314e:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <main+0x2ae>
    3152:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <main+0x27c>
    3156:	41 e0       	ldi	r20, 0x01	; 1
    3158:	64 2e       	mov	r6, r20
    315a:	71 2c       	mov	r7, r1
    315c:	0c 94 1b 03 	jmp	0x636	; 0x636 <main+0x2e6>
		while(button != 0){
			if(stateButton == 0 && OrangutanDigital::isInputHigh(IO_D0)){
				counterRefPush = counter;
				stateButton = 1;
			}
			if(stateButton == 1){
    3160:	41 e0       	ldi	r20, 0x01	; 1
    3162:	a4 16       	cp	r10, r20
    3164:	b1 04       	cpc	r11, r1
    3166:	11 f0       	breq	.+4      	; 0x316c <main+0x2e1c>
    3168:	0c 94 38 07 	jmp	0xe70	; 0xe70 <main+0xb20>
    316c:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <main+0xaee>
    3170:	31 e0       	ldi	r19, 0x01	; 1
    3172:	a3 2e       	mov	r10, r19
    3174:	b1 2c       	mov	r11, r1
    3176:	0c 94 54 07 	jmp	0xea8	; 0xea8 <main+0xb58>
    317a:	66 24       	eor	r6, r6
    317c:	77 24       	eor	r7, r7
    317e:	cc 24       	eor	r12, r12
    3180:	dd 24       	eor	r13, r13
    3182:	22 24       	eor	r2, r2
    3184:	33 24       	eor	r3, r3
    3186:	1e 82       	std	Y+6, r1	; 0x06
    3188:	1d 82       	std	Y+5, r1	; 0x05
    318a:	00 e0       	ldi	r16, 0x00	; 0
    318c:	10 e0       	ldi	r17, 0x00	; 0
    318e:	1a 8e       	std	Y+26, r1	; 0x1a
    3190:	19 8e       	std	Y+25, r1	; 0x19
    3192:	ee 24       	eor	r14, r14
    3194:	ff 24       	eor	r15, r15
    3196:	1c 8a       	std	Y+20, r1	; 0x14
    3198:	1b 8a       	std	Y+19, r1	; 0x13
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	9a 8b       	std	Y+18, r25	; 0x12
    31a0:	89 8b       	std	Y+17, r24	; 0x11
    31a2:	98 8b       	std	Y+16, r25	; 0x10
    31a4:	8f 87       	std	Y+15, r24	; 0x0f
    31a6:	9a 83       	std	Y+2, r25	; 0x02
    31a8:	89 83       	std	Y+1, r24	; 0x01
    31aa:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <main+0x1614>

				if(stateButton == 0 && OrangutanDigital::isInputHigh(IO_D0)){
					counterRefPush = counter;
					stateButton = 1;
				}
				if(stateButton == 1){
    31ae:	91 e0       	ldi	r25, 0x01	; 1
    31b0:	a9 16       	cp	r10, r25
    31b2:	b1 04       	cpc	r11, r1
    31b4:	11 f0       	breq	.+4      	; 0x31ba <main+0x2e6a>
    31b6:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <main+0xc88>
    31ba:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <main+0xc50>
    31be:	21 e0       	ldi	r18, 0x01	; 1
    31c0:	a2 2e       	mov	r10, r18
    31c2:	b1 2c       	mov	r11, r1
    31c4:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <main+0xcc6>
    31c8:	03 e2       	ldi	r16, 0x23	; 35
    31ca:	10 e0       	ldi	r17, 0x00	; 0
    31cc:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <main+0x11b6>
    31d0:	cc 24       	eor	r12, r12
    31d2:	dd 24       	eor	r13, r13
    31d4:	1a 8a       	std	Y+18, r1	; 0x12
    31d6:	19 8a       	std	Y+17, r1	; 0x11
    31d8:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <main+0x1248>
    31dc:	44 24       	eor	r4, r4
    31de:	55 24       	eor	r5, r5
    31e0:	1c c9       	rjmp	.-3528   	; 0x241a <main+0x20ca>

				if(stateButton == 0 && OrangutanDigital::isInputHigh(IO_D0)){
					counterRefPush = counter;
					stateButton = 1;
				}
				if(stateButton == 1){
    31e2:	e1 e0       	ldi	r30, 0x01	; 1
    31e4:	ae 16       	cp	r10, r30
    31e6:	b1 04       	cpc	r11, r1
    31e8:	11 f0       	breq	.+4      	; 0x31ee <main+0x2e9e>
    31ea:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <main+0x16ee>
    31ee:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <main+0x16b6>
    31f2:	91 e0       	ldi	r25, 0x01	; 1
    31f4:	a9 2e       	mov	r10, r25
    31f6:	b1 2c       	mov	r11, r1
    31f8:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <main+0x172c>
    31fc:	03 e2       	ldi	r16, 0x23	; 35
    31fe:	10 e0       	ldi	r17, 0x00	; 0
    3200:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <main+0x1c2c>
    3204:	cc 24       	eor	r12, r12
    3206:	dd 24       	eor	r13, r13
    3208:	0c 94 07 10 	jmp	0x200e	; 0x200e <main+0x1cbe>

				if(stateButton == 0 && OrangutanDigital::isInputHigh(IO_D0)){
					counterRefPush = counter;
					stateButton = 1;
				}
				if(stateButton == 1){
    320c:	f1 e0       	ldi	r31, 0x01	; 1
    320e:	af 16       	cp	r10, r31
    3210:	b1 04       	cpc	r11, r1
    3212:	09 f0       	breq	.+2      	; 0x3216 <main+0x2ec6>
    3214:	67 c9       	rjmp	.-3378   	; 0x24e4 <main+0x2194>
    3216:	4c c9       	rjmp	.-3432   	; 0x24b0 <main+0x2160>
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	a8 2e       	mov	r10, r24
    321c:	b1 2c       	mov	r11, r1
    321e:	80 c9       	rjmp	.-3328   	; 0x2520 <main+0x21d0>
    3220:	03 e2       	ldi	r16, 0x23	; 35
    3222:	10 e0       	ldi	r17, 0x00	; 0
    3224:	a6 cc       	rjmp	.-1716   	; 0x2b72 <main+0x2822>
    3226:	cc 24       	eor	r12, r12
    3228:	dd 24       	eor	r13, r13
    322a:	ec cc       	rjmp	.-1576   	; 0x2c04 <main+0x28b4>
    322c:	5e 8a       	std	Y+22, r5	; 0x16
    322e:	4d 8a       	std	Y+21, r4	; 0x15
    3230:	1a 8e       	std	Y+26, r1	; 0x1a
    3232:	19 8e       	std	Y+25, r1	; 0x19
    3234:	88 24       	eor	r8, r8
    3236:	8a 94       	dec	r8
    3238:	98 2c       	mov	r9, r8
    323a:	21 e0       	ldi	r18, 0x01	; 1
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	3c 83       	std	Y+4, r19	; 0x04
    3240:	2b 83       	std	Y+3, r18	; 0x03
    3242:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <main+0xa66>

00003246 <_ZdlPv>:
  return malloc(size); 
} 

void operator delete(void * ptr) 
{ 
  free(ptr); 
    3246:	0e 94 56 20 	call	0x40ac	; 0x40ac <free>
} 
    324a:	08 95       	ret

0000324c <_Znwj>:
void * operator new(size_t size); 
void operator delete(void * ptr); 

void * operator new(size_t size) 
{ 
  return malloc(size); 
    324c:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <malloc>
} 
    3250:	08 95       	ret

00003252 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    3252:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3256:	8c e0       	ldi	r24, 0x0C	; 12
    3258:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    325c:	08 95       	ret

0000325e <_Z9i2c_starth>:

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    325e:	98 2f       	mov	r25, r24
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3260:	84 ea       	ldi	r24, 0xA4	; 164
    3262:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3266:	80 91 bc 00 	lds	r24, 0x00BC
    326a:	87 ff       	sbrs	r24, 7
    326c:	fc cf       	rjmp	.-8      	; 0x3266 <_Z9i2c_starth+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    326e:	80 91 b9 00 	lds	r24, 0x00B9
    3272:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    3274:	88 30       	cpi	r24, 0x08	; 8
    3276:	21 f0       	breq	.+8      	; 0x3280 <_Z9i2c_starth+0x22>
    3278:	80 31       	cpi	r24, 0x10	; 16
    327a:	11 f0       	breq	.+4      	; 0x3280 <_Z9i2c_starth+0x22>
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	08 95       	ret

	// send device address
	TWDR = address;
    3280:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    3284:	84 e8       	ldi	r24, 0x84	; 132
    3286:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    328a:	80 91 bc 00 	lds	r24, 0x00BC
    328e:	87 ff       	sbrs	r24, 7
    3290:	fc cf       	rjmp	.-8      	; 0x328a <_Z9i2c_starth+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    3292:	90 91 b9 00 	lds	r25, 0x00B9
    3296:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    3298:	98 31       	cpi	r25, 0x18	; 24
    329a:	11 f4       	brne	.+4      	; 0x32a0 <_Z9i2c_starth+0x42>
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	08 95       	ret
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	90 34       	cpi	r25, 0x40	; 64
    32a4:	09 f0       	breq	.+2      	; 0x32a8 <_Z9i2c_starth+0x4a>
    32a6:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    32a8:	08 95       	ret

000032aa <_Z14i2c_start_waith>:
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
    32aa:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    32ac:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    32ae:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    32b0:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    32b2:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    32b6:	80 91 bc 00 	lds	r24, 0x00BC
    32ba:	87 ff       	sbrs	r24, 7
    32bc:	fc cf       	rjmp	.-8      	; 0x32b6 <_Z14i2c_start_waith+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    32be:	80 91 b9 00 	lds	r24, 0x00B9
    32c2:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    32c4:	88 30       	cpi	r24, 0x08	; 8
    32c6:	11 f0       	breq	.+4      	; 0x32cc <_Z14i2c_start_waith+0x22>
    32c8:	80 31       	cpi	r24, 0x10	; 16
    32ca:	99 f7       	brne	.-26     	; 0x32b2 <_Z14i2c_start_waith+0x8>
    
    	// send device address
    	TWDR = address;
    32cc:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    32d0:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    32d4:	80 91 bc 00 	lds	r24, 0x00BC
    32d8:	87 ff       	sbrs	r24, 7
    32da:	fc cf       	rjmp	.-8      	; 0x32d4 <_Z14i2c_start_waith+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    32dc:	80 91 b9 00 	lds	r24, 0x00B9
    32e0:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    32e2:	80 32       	cpi	r24, 0x20	; 32
    32e4:	11 f0       	breq	.+4      	; 0x32ea <_Z14i2c_start_waith+0x40>
    32e6:	88 35       	cpi	r24, 0x58	; 88
    32e8:	39 f4       	brne	.+14     	; 0x32f8 <_Z14i2c_start_waith+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    32ea:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    32ee:	80 91 bc 00 	lds	r24, 0x00BC
    32f2:	84 fd       	sbrc	r24, 4
    32f4:	fc cf       	rjmp	.-8      	; 0x32ee <_Z14i2c_start_waith+0x44>
    32f6:	dd cf       	rjmp	.-70     	; 0x32b2 <_Z14i2c_start_waith+0x8>
    32f8:	08 95       	ret

000032fa <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    32fa:	0e 94 2f 19 	call	0x325e	; 0x325e <_Z9i2c_starth>

}/* i2c_rep_start */
    32fe:	08 95       	ret

00003300 <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3300:	84 e9       	ldi	r24, 0x94	; 148
    3302:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3306:	80 91 bc 00 	lds	r24, 0x00BC
    330a:	84 fd       	sbrc	r24, 4
    330c:	fc cf       	rjmp	.-8      	; 0x3306 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    330e:	08 95       	ret

00003310 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    3310:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3314:	84 e8       	ldi	r24, 0x84	; 132
    3316:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    331a:	80 91 bc 00 	lds	r24, 0x00BC
    331e:	87 ff       	sbrs	r24, 7
    3320:	fc cf       	rjmp	.-8      	; 0x331a <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    3322:	80 91 b9 00 	lds	r24, 0x00B9
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	88 7f       	andi	r24, 0xF8	; 248
    332a:	88 32       	cpi	r24, 0x28	; 40
    332c:	09 f0       	breq	.+2      	; 0x3330 <_Z9i2c_writeh+0x20>
    332e:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    3330:	89 2f       	mov	r24, r25
    3332:	08 95       	ret

00003334 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3334:	84 ec       	ldi	r24, 0xC4	; 196
    3336:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    333a:	80 91 bc 00 	lds	r24, 0x00BC
    333e:	87 ff       	sbrs	r24, 7
    3340:	fc cf       	rjmp	.-8      	; 0x333a <_Z11i2c_readAckv+0x6>

    return TWDR;
    3342:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    3346:	08 95       	ret

00003348 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3348:	84 e8       	ldi	r24, 0x84	; 132
    334a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    334e:	80 91 bc 00 	lds	r24, 0x00BC
    3352:	87 ff       	sbrs	r24, 7
    3354:	fc cf       	rjmp	.-8      	; 0x334e <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    3356:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    335a:	08 95       	ret

0000335c <_ZN12OrangutanLCDC2Ev>:
    335c:	08 95       	ret

0000335e <_ZN12OrangutanLCDC1Ev>:
    335e:	08 95       	ret

00003360 <void_getchar>:
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	08 95       	ret

00003366 <_ZN12OrangutanLCD8busyWaitEv>:
    3366:	ef 92       	push	r14
    3368:	ff 92       	push	r15
    336a:	0f 93       	push	r16
    336c:	1f 93       	push	r17
    336e:	67 b1       	in	r22, 0x07	; 7
    3370:	3d 98       	cbi	0x07, 5	; 7
    3372:	28 98       	cbi	0x05, 0	; 5
    3374:	29 9a       	sbi	0x05, 1	; 5
    3376:	e0 90 56 03 	lds	r14, 0x0356
    337a:	f0 90 57 03 	lds	r15, 0x0357
    337e:	00 91 58 03 	lds	r16, 0x0358
    3382:	10 91 59 03 	lds	r17, 0x0359
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	41 e0       	ldi	r20, 0x01	; 1
    338c:	50 e0       	ldi	r21, 0x00	; 0
    338e:	ca 01       	movw	r24, r20
    3390:	6f 93       	push	r22
    3392:	64 e0       	ldi	r22, 0x04	; 4
    3394:	6a 95       	dec	r22
    3396:	f1 f7       	brne	.-4      	; 0x3394 <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    3398:	6f 91       	pop	r22
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	c9 f7       	brne	.-14     	; 0x3390 <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    339e:	2a 9a       	sbi	0x05, 2	; 5
    33a0:	ca 01       	movw	r24, r20
    33a2:	6f 93       	push	r22
    33a4:	64 e0       	ldi	r22, 0x04	; 4
    33a6:	6a 95       	dec	r22
    33a8:	f1 f7       	brne	.-4      	; 0x33a6 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    33aa:	6f 91       	pop	r22
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	c9 f7       	brne	.-14     	; 0x33a2 <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    33b0:	86 b1       	in	r24, 0x06	; 6
    33b2:	2a 98       	cbi	0x05, 2	; 5
    33b4:	fa 01       	movw	r30, r20
    33b6:	6f 93       	push	r22
    33b8:	64 e0       	ldi	r22, 0x04	; 4
    33ba:	6a 95       	dec	r22
    33bc:	f1 f7       	brne	.-4      	; 0x33ba <_ZN12OrangutanLCD8busyWaitEv+0x54>
    33be:	6f 91       	pop	r22
    33c0:	31 97       	sbiw	r30, 0x01	; 1
    33c2:	c9 f7       	brne	.-14     	; 0x33b6 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    33c4:	2a 9a       	sbi	0x05, 2	; 5
    33c6:	fa 01       	movw	r30, r20
    33c8:	6f 93       	push	r22
    33ca:	64 e0       	ldi	r22, 0x04	; 4
    33cc:	6a 95       	dec	r22
    33ce:	f1 f7       	brne	.-4      	; 0x33cc <_ZN12OrangutanLCD8busyWaitEv+0x66>
    33d0:	6f 91       	pop	r22
    33d2:	31 97       	sbiw	r30, 0x01	; 1
    33d4:	c9 f7       	brne	.-14     	; 0x33c8 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    33d6:	2a 98       	cbi	0x05, 2	; 5
    33d8:	2c 5f       	subi	r18, 0xFC	; 252
    33da:	3f 4f       	sbci	r19, 0xFF	; 255
    33dc:	85 ff       	sbrs	r24, 5
    33de:	09 c0       	rjmp	.+18     	; 0x33f2 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    33e0:	c9 01       	movw	r24, r18
    33e2:	a0 e0       	ldi	r26, 0x00	; 0
    33e4:	b0 e0       	ldi	r27, 0x00	; 0
    33e6:	8e 15       	cp	r24, r14
    33e8:	9f 05       	cpc	r25, r15
    33ea:	a0 07       	cpc	r26, r16
    33ec:	b1 07       	cpc	r27, r17
    33ee:	08 f4       	brcc	.+2      	; 0x33f2 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    33f0:	ce cf       	rjmp	.-100    	; 0x338e <_ZN12OrangutanLCD8busyWaitEv+0x28>
    33f2:	c9 01       	movw	r24, r18
    33f4:	a0 e0       	ldi	r26, 0x00	; 0
    33f6:	b0 e0       	ldi	r27, 0x00	; 0
    33f8:	8e 15       	cp	r24, r14
    33fa:	9f 05       	cpc	r25, r15
    33fc:	a0 07       	cpc	r26, r16
    33fe:	b1 07       	cpc	r27, r17
    3400:	28 f0       	brcs	.+10     	; 0x340c <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    3402:	82 e3       	ldi	r24, 0x32	; 50
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	a0 e0       	ldi	r26, 0x00	; 0
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	04 c0       	rjmp	.+8      	; 0x3414 <_ZN12OrangutanLCD8busyWaitEv+0xae>
    340c:	80 e3       	ldi	r24, 0x30	; 48
    340e:	95 e7       	ldi	r25, 0x75	; 117
    3410:	a0 e0       	ldi	r26, 0x00	; 0
    3412:	b0 e0       	ldi	r27, 0x00	; 0
    3414:	80 93 56 03 	sts	0x0356, r24
    3418:	90 93 57 03 	sts	0x0357, r25
    341c:	a0 93 58 03 	sts	0x0358, r26
    3420:	b0 93 59 03 	sts	0x0359, r27
    3424:	67 b9       	out	0x07, r22	; 7
    3426:	1f 91       	pop	r17
    3428:	0f 91       	pop	r16
    342a:	ff 90       	pop	r15
    342c:	ef 90       	pop	r14
    342e:	08 95       	ret

00003430 <_ZN12OrangutanLCD8sendDataEh>:
    3430:	28 b1       	in	r18, 0x08	; 8
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	8f 70       	andi	r24, 0x0F	; 15
    3436:	90 70       	andi	r25, 0x00	; 0
    3438:	88 0f       	add	r24, r24
    343a:	99 1f       	adc	r25, r25
    343c:	88 0f       	add	r24, r24
    343e:	99 1f       	adc	r25, r25
    3440:	23 7c       	andi	r18, 0xC3	; 195
    3442:	28 2b       	or	r18, r24
    3444:	28 b9       	out	0x08, r18	; 8
    3446:	2a 9a       	sbi	0x05, 2	; 5
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	fc 01       	movw	r30, r24
    344e:	6f 93       	push	r22
    3450:	64 e0       	ldi	r22, 0x04	; 4
    3452:	6a 95       	dec	r22
    3454:	f1 f7       	brne	.-4      	; 0x3452 <_ZN12OrangutanLCD8sendDataEh+0x22>
    3456:	6f 91       	pop	r22
    3458:	31 97       	sbiw	r30, 0x01	; 1
    345a:	c9 f7       	brne	.-14     	; 0x344e <_ZN12OrangutanLCD8sendDataEh+0x1e>
    345c:	2a 98       	cbi	0x05, 2	; 5
    345e:	6f 93       	push	r22
    3460:	64 e0       	ldi	r22, 0x04	; 4
    3462:	6a 95       	dec	r22
    3464:	f1 f7       	brne	.-4      	; 0x3462 <_ZN12OrangutanLCD8sendDataEh+0x32>
    3466:	6f 91       	pop	r22
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	c9 f7       	brne	.-14     	; 0x345e <_ZN12OrangutanLCD8sendDataEh+0x2e>
    346c:	08 95       	ret

0000346e <_ZN12OrangutanLCD10initPrintfEv>:
    346e:	80 91 52 03 	lds	r24, 0x0352
    3472:	90 91 53 03 	lds	r25, 0x0353
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	11 f0       	breq	.+4      	; 0x347e <_ZN12OrangutanLCD10initPrintfEv+0x10>
    347a:	0e 94 56 20 	call	0x40ac	; 0x40ac <free>
    347e:	80 91 43 03 	lds	r24, 0x0343
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	01 97       	sbiw	r24, 0x01	; 1
    3486:	20 91 44 03 	lds	r18, 0x0344
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	ac 01       	movw	r20, r24
    348e:	42 9f       	mul	r20, r18
    3490:	c0 01       	movw	r24, r0
    3492:	43 9f       	mul	r20, r19
    3494:	90 0d       	add	r25, r0
    3496:	52 9f       	mul	r21, r18
    3498:	90 0d       	add	r25, r0
    349a:	11 24       	eor	r1, r1
    349c:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <malloc>
    34a0:	90 93 53 03 	sts	0x0353, r25
    34a4:	80 93 52 03 	sts	0x0352, r24
    34a8:	00 97       	sbiw	r24, 0x00	; 0
    34aa:	29 f1       	breq	.+74     	; 0x34f6 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    34ac:	60 e0       	ldi	r22, 0x00	; 0
    34ae:	70 e2       	ldi	r23, 0x20	; 32
    34b0:	08 c0       	rjmp	.+16     	; 0x34c2 <_ZN12OrangutanLCD10initPrintfEv+0x54>
    34b2:	e0 91 52 03 	lds	r30, 0x0352
    34b6:	f0 91 53 03 	lds	r31, 0x0353
    34ba:	e4 0f       	add	r30, r20
    34bc:	f5 1f       	adc	r31, r21
    34be:	70 83       	st	Z, r23
    34c0:	6f 5f       	subi	r22, 0xFF	; 255
    34c2:	46 2f       	mov	r20, r22
    34c4:	50 e0       	ldi	r21, 0x00	; 0
    34c6:	80 91 43 03 	lds	r24, 0x0343
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	01 97       	sbiw	r24, 0x01	; 1
    34ce:	20 91 44 03 	lds	r18, 0x0344
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	fc 01       	movw	r30, r24
    34d6:	e2 9f       	mul	r30, r18
    34d8:	c0 01       	movw	r24, r0
    34da:	e3 9f       	mul	r30, r19
    34dc:	90 0d       	add	r25, r0
    34de:	f2 9f       	mul	r31, r18
    34e0:	90 0d       	add	r25, r0
    34e2:	11 24       	eor	r1, r1
    34e4:	48 17       	cp	r20, r24
    34e6:	59 07       	cpc	r21, r25
    34e8:	24 f3       	brlt	.-56     	; 0x34b2 <_ZN12OrangutanLCD10initPrintfEv+0x44>
    34ea:	8c e9       	ldi	r24, 0x9C	; 156
    34ec:	9c e1       	ldi	r25, 0x1C	; 28
    34ee:	60 eb       	ldi	r22, 0xB0	; 176
    34f0:	79 e1       	ldi	r23, 0x19	; 25
    34f2:	0e 94 ae 20 	call	0x415c	; 0x415c <fdevopen>
    34f6:	08 95       	ret

000034f8 <_ZN12OrangutanLCD10initPrintfEhh>:
    34f8:	80 93 44 03 	sts	0x0344, r24
    34fc:	60 93 43 03 	sts	0x0343, r22
    3500:	0e 94 37 1a 	call	0x346e	; 0x346e <_ZN12OrangutanLCD10initPrintfEv>
    3504:	08 95       	ret

00003506 <lcd_init_printf_with_dimensions>:
    3506:	80 93 44 03 	sts	0x0344, r24
    350a:	60 93 43 03 	sts	0x0343, r22
    350e:	0e 94 37 1a 	call	0x346e	; 0x346e <_ZN12OrangutanLCD10initPrintfEv>
    3512:	08 95       	ret

00003514 <lcd_init_printf>:
    3514:	0e 94 37 1a 	call	0x346e	; 0x346e <_ZN12OrangutanLCD10initPrintfEv>
    3518:	08 95       	ret

0000351a <_ZN12OrangutanLCD5init2Ev>:
    351a:	3d 98       	cbi	0x07, 5	; 7
    351c:	45 9a       	sbi	0x08, 5	; 8
    351e:	80 e3       	ldi	r24, 0x30	; 48
    3520:	95 e7       	ldi	r25, 0x75	; 117
    3522:	a0 e0       	ldi	r26, 0x00	; 0
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	80 93 56 03 	sts	0x0356, r24
    352a:	90 93 57 03 	sts	0x0357, r25
    352e:	a0 93 58 03 	sts	0x0358, r26
    3532:	b0 93 59 03 	sts	0x0359, r27
    3536:	20 9a       	sbi	0x04, 0	; 4
    3538:	21 9a       	sbi	0x04, 1	; 4
    353a:	22 9a       	sbi	0x04, 2	; 4
    353c:	8e e1       	ldi	r24, 0x1E	; 30
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>
    3544:	83 e0       	ldi	r24, 0x03	; 3
    3546:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    354a:	86 e0       	ldi	r24, 0x06	; 6
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>
    3552:	83 e0       	ldi	r24, 0x03	; 3
    3554:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    3558:	82 e0       	ldi	r24, 0x02	; 2
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>
    3560:	83 e0       	ldi	r24, 0x03	; 3
    3562:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    3566:	82 e0       	ldi	r24, 0x02	; 2
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>
    356e:	82 e0       	ldi	r24, 0x02	; 2
    3570:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    3574:	82 e0       	ldi	r24, 0x02	; 2
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>
    357c:	88 e2       	ldi	r24, 0x28	; 40
    357e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN12OrangutanLCD8send_cmdEh>
    3582:	88 e0       	ldi	r24, 0x08	; 8
    3584:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN12OrangutanLCD8send_cmdEh>
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN12OrangutanLCD8send_cmdEh>
    358e:	86 e0       	ldi	r24, 0x06	; 6
    3590:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN12OrangutanLCD8send_cmdEh>
    3594:	8c e0       	ldi	r24, 0x0C	; 12
    3596:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN12OrangutanLCD8send_cmdEh>
    359a:	08 95       	ret

0000359c <_ZN12OrangutanLCD4initEv>:
    359c:	80 91 5a 03 	lds	r24, 0x035A
    35a0:	88 23       	and	r24, r24
    35a2:	29 f4       	brne	.+10     	; 0x35ae <_ZN12OrangutanLCD4initEv+0x12>
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	80 93 5a 03 	sts	0x035A, r24
    35aa:	0e 94 8d 1a 	call	0x351a	; 0x351a <_ZN12OrangutanLCD5init2Ev>
    35ae:	08 95       	ret

000035b0 <_ZN12OrangutanLCD4sendEhhh>:
    35b0:	ff 92       	push	r15
    35b2:	0f 93       	push	r16
    35b4:	1f 93       	push	r17
    35b6:	08 2f       	mov	r16, r24
    35b8:	16 2f       	mov	r17, r22
    35ba:	f4 2e       	mov	r15, r20
    35bc:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN12OrangutanLCD4initEv>
    35c0:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN12OrangutanLCD8busyWaitEv>
    35c4:	37 b1       	in	r19, 0x07	; 7
    35c6:	28 b1       	in	r18, 0x08	; 8
    35c8:	29 98       	cbi	0x05, 1	; 5
    35ca:	11 23       	and	r17, r17
    35cc:	11 f0       	breq	.+4      	; 0x35d2 <_ZN12OrangutanLCD4sendEhhh+0x22>
    35ce:	28 9a       	sbi	0x05, 0	; 5
    35d0:	01 c0       	rjmp	.+2      	; 0x35d4 <_ZN12OrangutanLCD4sendEhhh+0x24>
    35d2:	28 98       	cbi	0x05, 0	; 5
    35d4:	87 b1       	in	r24, 0x07	; 7
    35d6:	8c 63       	ori	r24, 0x3C	; 60
    35d8:	87 b9       	out	0x07, r24	; 7
    35da:	81 e0       	ldi	r24, 0x01	; 1
    35dc:	f8 16       	cp	r15, r24
    35de:	e1 f0       	breq	.+56     	; 0x3618 <_ZN12OrangutanLCD4sendEhhh+0x68>
    35e0:	88 b1       	in	r24, 0x08	; 8
    35e2:	90 2f       	mov	r25, r16
    35e4:	92 95       	swap	r25
    35e6:	9f 70       	andi	r25, 0x0F	; 15
    35e8:	99 0f       	add	r25, r25
    35ea:	99 0f       	add	r25, r25
    35ec:	83 7c       	andi	r24, 0xC3	; 195
    35ee:	98 2b       	or	r25, r24
    35f0:	98 b9       	out	0x08, r25	; 8
    35f2:	2a 9a       	sbi	0x05, 2	; 5
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	fc 01       	movw	r30, r24
    35fa:	6f 93       	push	r22
    35fc:	64 e0       	ldi	r22, 0x04	; 4
    35fe:	6a 95       	dec	r22
    3600:	f1 f7       	brne	.-4      	; 0x35fe <_ZN12OrangutanLCD4sendEhhh+0x4e>
    3602:	6f 91       	pop	r22
    3604:	31 97       	sbiw	r30, 0x01	; 1
    3606:	c9 f7       	brne	.-14     	; 0x35fa <_ZN12OrangutanLCD4sendEhhh+0x4a>
    3608:	2a 98       	cbi	0x05, 2	; 5
    360a:	6f 93       	push	r22
    360c:	64 e0       	ldi	r22, 0x04	; 4
    360e:	6a 95       	dec	r22
    3610:	f1 f7       	brne	.-4      	; 0x360e <_ZN12OrangutanLCD4sendEhhh+0x5e>
    3612:	6f 91       	pop	r22
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	c9 f7       	brne	.-14     	; 0x360a <_ZN12OrangutanLCD4sendEhhh+0x5a>
    3618:	88 b1       	in	r24, 0x08	; 8
    361a:	0f 70       	andi	r16, 0x0F	; 15
    361c:	00 0f       	add	r16, r16
    361e:	00 0f       	add	r16, r16
    3620:	83 7c       	andi	r24, 0xC3	; 195
    3622:	80 2b       	or	r24, r16
    3624:	88 b9       	out	0x08, r24	; 8
    3626:	2a 9a       	sbi	0x05, 2	; 5
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	fc 01       	movw	r30, r24
    362e:	6f 93       	push	r22
    3630:	64 e0       	ldi	r22, 0x04	; 4
    3632:	6a 95       	dec	r22
    3634:	f1 f7       	brne	.-4      	; 0x3632 <_ZN12OrangutanLCD4sendEhhh+0x82>
    3636:	6f 91       	pop	r22
    3638:	31 97       	sbiw	r30, 0x01	; 1
    363a:	c9 f7       	brne	.-14     	; 0x362e <_ZN12OrangutanLCD4sendEhhh+0x7e>
    363c:	2a 98       	cbi	0x05, 2	; 5
    363e:	6f 93       	push	r22
    3640:	64 e0       	ldi	r22, 0x04	; 4
    3642:	6a 95       	dec	r22
    3644:	f1 f7       	brne	.-4      	; 0x3642 <_ZN12OrangutanLCD4sendEhhh+0x92>
    3646:	6f 91       	pop	r22
    3648:	01 97       	sbiw	r24, 0x01	; 1
    364a:	c9 f7       	brne	.-14     	; 0x363e <_ZN12OrangutanLCD4sendEhhh+0x8e>
    364c:	37 b9       	out	0x07, r19	; 7
    364e:	28 b9       	out	0x08, r18	; 8
    3650:	1f 91       	pop	r17
    3652:	0f 91       	pop	r16
    3654:	ff 90       	pop	r15
    3656:	08 95       	ret

00003658 <_ZN12OrangutanLCD8send_cmdEh>:
    3658:	60 e0       	ldi	r22, 0x00	; 0
    365a:	42 e0       	ldi	r20, 0x02	; 2
    365c:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN12OrangutanLCD4sendEhhh>
    3660:	08 95       	ret

00003662 <_ZN12OrangutanLCD10moveCursorEhh>:
    3662:	0f 93       	push	r16
    3664:	1f 93       	push	r17
    3666:	08 2f       	mov	r16, r24
    3668:	16 2f       	mov	r17, r22
    366a:	08 c0       	rjmp	.+16     	; 0x367c <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    366c:	00 23       	and	r16, r16
    366e:	11 f4       	brne	.+4      	; 0x3674 <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    3670:	80 e1       	ldi	r24, 0x10	; 16
    3672:	01 c0       	rjmp	.+2      	; 0x3676 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    3674:	84 e1       	ldi	r24, 0x14	; 20
    3676:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN12OrangutanLCD8send_cmdEh>
    367a:	11 50       	subi	r17, 0x01	; 1
    367c:	11 23       	and	r17, r17
    367e:	b1 f7       	brne	.-20     	; 0x366c <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    3680:	1f 91       	pop	r17
    3682:	0f 91       	pop	r16
    3684:	08 95       	ret

00003686 <lcd_move_cursor>:
    3686:	0e 94 31 1b 	call	0x3662	; 0x3662 <_ZN12OrangutanLCD10moveCursorEhh>
    368a:	08 95       	ret

0000368c <_ZN12OrangutanLCD10hideCursorEv>:
    368c:	8c e0       	ldi	r24, 0x0C	; 12
    368e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN12OrangutanLCD8send_cmdEh>
    3692:	08 95       	ret

00003694 <lcd_hide_cursor>:
    3694:	0e 94 46 1b 	call	0x368c	; 0x368c <_ZN12OrangutanLCD10hideCursorEv>
    3698:	08 95       	ret

0000369a <_ZN12OrangutanLCD10showCursorEh>:
    369a:	81 30       	cpi	r24, 0x01	; 1
    369c:	11 f4       	brne	.+4      	; 0x36a2 <_ZN12OrangutanLCD10showCursorEh+0x8>
    369e:	8f e0       	ldi	r24, 0x0F	; 15
    36a0:	01 c0       	rjmp	.+2      	; 0x36a4 <_ZN12OrangutanLCD10showCursorEh+0xa>
    36a2:	8e e0       	ldi	r24, 0x0E	; 14
    36a4:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN12OrangutanLCD8send_cmdEh>
    36a8:	08 95       	ret

000036aa <lcd_show_cursor>:
    36aa:	0e 94 4d 1b 	call	0x369a	; 0x369a <_ZN12OrangutanLCD10showCursorEh>
    36ae:	08 95       	ret

000036b0 <_ZN12OrangutanLCD6gotoXYEhh>:
    36b0:	a4 e0       	ldi	r26, 0x04	; 4
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	ee e5       	ldi	r30, 0x5E	; 94
    36b6:	fb e1       	ldi	r31, 0x1B	; 27
    36b8:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <__prologue_saves__+0x1c>
    36bc:	18 2f       	mov	r17, r24
    36be:	06 2f       	mov	r16, r22
    36c0:	80 e8       	ldi	r24, 0x80	; 128
    36c2:	89 83       	std	Y+1, r24	; 0x01
    36c4:	80 ec       	ldi	r24, 0xC0	; 192
    36c6:	8a 83       	std	Y+2, r24	; 0x02
    36c8:	84 e9       	ldi	r24, 0x94	; 148
    36ca:	8b 83       	std	Y+3, r24	; 0x03
    36cc:	84 ed       	ldi	r24, 0xD4	; 212
    36ce:	8c 83       	std	Y+4, r24	; 0x04
    36d0:	fe 01       	movw	r30, r28
    36d2:	e6 0f       	add	r30, r22
    36d4:	f1 1d       	adc	r31, r1
    36d6:	81 81       	ldd	r24, Z+1	; 0x01
    36d8:	81 0f       	add	r24, r17
    36da:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN12OrangutanLCD8send_cmdEh>
    36de:	10 93 55 03 	sts	0x0355, r17
    36e2:	00 93 54 03 	sts	0x0354, r16
    36e6:	24 96       	adiw	r28, 0x04	; 4
    36e8:	e4 e0       	ldi	r30, 0x04	; 4
    36ea:	0c 94 88 1f 	jmp	0x3f10	; 0x3f10 <__epilogue_restores__+0x1c>

000036ee <lcd_goto_xy>:
    36ee:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
    36f2:	08 95       	ret

000036f4 <_ZN12OrangutanLCD5clearEv>:
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN12OrangutanLCD8send_cmdEh>
    36fa:	80 91 52 03 	lds	r24, 0x0352
    36fe:	90 91 53 03 	lds	r25, 0x0353
    3702:	89 2b       	or	r24, r25
    3704:	19 f1       	breq	.+70     	; 0x374c <_ZN12OrangutanLCD5clearEv+0x58>
    3706:	60 e0       	ldi	r22, 0x00	; 0
    3708:	70 e2       	ldi	r23, 0x20	; 32
    370a:	08 c0       	rjmp	.+16     	; 0x371c <_ZN12OrangutanLCD5clearEv+0x28>
    370c:	e0 91 52 03 	lds	r30, 0x0352
    3710:	f0 91 53 03 	lds	r31, 0x0353
    3714:	e4 0f       	add	r30, r20
    3716:	f5 1f       	adc	r31, r21
    3718:	70 83       	st	Z, r23
    371a:	6f 5f       	subi	r22, 0xFF	; 255
    371c:	46 2f       	mov	r20, r22
    371e:	50 e0       	ldi	r21, 0x00	; 0
    3720:	80 91 43 03 	lds	r24, 0x0343
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	01 97       	sbiw	r24, 0x01	; 1
    3728:	20 91 44 03 	lds	r18, 0x0344
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	fc 01       	movw	r30, r24
    3730:	e2 9f       	mul	r30, r18
    3732:	c0 01       	movw	r24, r0
    3734:	e3 9f       	mul	r30, r19
    3736:	90 0d       	add	r25, r0
    3738:	f2 9f       	mul	r31, r18
    373a:	90 0d       	add	r25, r0
    373c:	11 24       	eor	r1, r1
    373e:	48 17       	cp	r20, r24
    3740:	59 07       	cpc	r21, r25
    3742:	24 f3       	brlt	.-56     	; 0x370c <_ZN12OrangutanLCD5clearEv+0x18>
    3744:	10 92 55 03 	sts	0x0355, r1
    3748:	10 92 54 03 	sts	0x0354, r1
    374c:	08 95       	ret

0000374e <clear>:
    374e:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN12OrangutanLCD5clearEv>
    3752:	08 95       	ret

00003754 <_ZN12OrangutanLCD9send_dataEh>:
    3754:	61 e0       	ldi	r22, 0x01	; 1
    3756:	42 e0       	ldi	r20, 0x02	; 2
    3758:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN12OrangutanLCD4sendEhhh>
    375c:	08 95       	ret

0000375e <_ZN12OrangutanLCD11printBinaryEh>:
    375e:	0f 93       	push	r16
    3760:	1f 93       	push	r17
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
    3766:	00 e0       	ldi	r16, 0x00	; 0
    3768:	10 e8       	ldi	r17, 0x80	; 128
    376a:	c8 2f       	mov	r28, r24
    376c:	d0 e0       	ldi	r29, 0x00	; 0
    376e:	81 2f       	mov	r24, r17
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	8c 23       	and	r24, r28
    3774:	9d 23       	and	r25, r29
    3776:	89 2b       	or	r24, r25
    3778:	11 f0       	breq	.+4      	; 0x377e <_ZN12OrangutanLCD11printBinaryEh+0x20>
    377a:	81 e3       	ldi	r24, 0x31	; 49
    377c:	01 c0       	rjmp	.+2      	; 0x3780 <_ZN12OrangutanLCD11printBinaryEh+0x22>
    377e:	80 e3       	ldi	r24, 0x30	; 48
    3780:	0e 94 aa 1b 	call	0x3754	; 0x3754 <_ZN12OrangutanLCD9send_dataEh>
    3784:	0f 5f       	subi	r16, 0xFF	; 255
    3786:	08 30       	cpi	r16, 0x08	; 8
    3788:	11 f0       	breq	.+4      	; 0x378e <_ZN12OrangutanLCD11printBinaryEh+0x30>
    378a:	16 95       	lsr	r17
    378c:	f0 cf       	rjmp	.-32     	; 0x376e <_ZN12OrangutanLCD11printBinaryEh+0x10>
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	1f 91       	pop	r17
    3794:	0f 91       	pop	r16
    3796:	08 95       	ret

00003798 <print_binary>:
    3798:	0e 94 af 1b 	call	0x375e	; 0x375e <_ZN12OrangutanLCD11printBinaryEh>
    379c:	08 95       	ret

0000379e <_ZN12OrangutanLCD14printHexNibbleEh>:
    379e:	8a 30       	cpi	r24, 0x0A	; 10
    37a0:	10 f4       	brcc	.+4      	; 0x37a6 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    37a2:	80 5d       	subi	r24, 0xD0	; 208
    37a4:	01 c0       	rjmp	.+2      	; 0x37a8 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    37a6:	89 5c       	subi	r24, 0xC9	; 201
    37a8:	0e 94 aa 1b 	call	0x3754	; 0x3754 <_ZN12OrangutanLCD9send_dataEh>
    37ac:	08 95       	ret

000037ae <_ZN12OrangutanLCD8printHexEh>:
    37ae:	1f 93       	push	r17
    37b0:	18 2f       	mov	r17, r24
    37b2:	82 95       	swap	r24
    37b4:	8f 70       	andi	r24, 0x0F	; 15
    37b6:	0e 94 cf 1b 	call	0x379e	; 0x379e <_ZN12OrangutanLCD14printHexNibbleEh>
    37ba:	81 2f       	mov	r24, r17
    37bc:	8f 70       	andi	r24, 0x0F	; 15
    37be:	0e 94 cf 1b 	call	0x379e	; 0x379e <_ZN12OrangutanLCD14printHexNibbleEh>
    37c2:	1f 91       	pop	r17
    37c4:	08 95       	ret

000037c6 <_ZN12OrangutanLCD8printHexEj>:
    37c6:	1f 93       	push	r17
    37c8:	18 2f       	mov	r17, r24
    37ca:	89 2f       	mov	r24, r25
    37cc:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD8printHexEh>
    37d0:	81 2f       	mov	r24, r17
    37d2:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD8printHexEh>
    37d6:	1f 91       	pop	r17
    37d8:	08 95       	ret

000037da <print_hex>:
    37da:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <_ZN12OrangutanLCD8printHexEj>
    37de:	08 95       	ret

000037e0 <print_hex_byte>:
    37e0:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <_ZN12OrangutanLCD8printHexEh>
    37e4:	08 95       	ret

000037e6 <_ZN12OrangutanLCD5printEm>:
    37e6:	6f 92       	push	r6
    37e8:	7f 92       	push	r7
    37ea:	8f 92       	push	r8
    37ec:	9f 92       	push	r9
    37ee:	af 92       	push	r10
    37f0:	bf 92       	push	r11
    37f2:	cf 92       	push	r12
    37f4:	df 92       	push	r13
    37f6:	ff 92       	push	r15
    37f8:	0f 93       	push	r16
    37fa:	df 93       	push	r29
    37fc:	cf 93       	push	r28
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62
    3802:	2a 97       	sbiw	r28, 0x0a	; 10
    3804:	0f b6       	in	r0, 0x3f	; 63
    3806:	f8 94       	cli
    3808:	de bf       	out	0x3e, r29	; 62
    380a:	0f be       	out	0x3f, r0	; 63
    380c:	cd bf       	out	0x3d, r28	; 61
    380e:	5b 01       	movw	r10, r22
    3810:	6c 01       	movw	r12, r24
    3812:	0a e0       	ldi	r16, 0x0A	; 10
    3814:	3e 01       	movw	r6, r28
    3816:	08 94       	sec
    3818:	61 1c       	adc	r6, r1
    381a:	71 1c       	adc	r7, r1
    381c:	fa 2c       	mov	r15, r10
    381e:	c6 01       	movw	r24, r12
    3820:	b5 01       	movw	r22, r10
    3822:	2a e0       	ldi	r18, 0x0A	; 10
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	40 e0       	ldi	r20, 0x00	; 0
    3828:	50 e0       	ldi	r21, 0x00	; 0
    382a:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__udivmodsi4>
    382e:	c9 01       	movw	r24, r18
    3830:	da 01       	movw	r26, r20
    3832:	5c 01       	movw	r10, r24
    3834:	6d 01       	movw	r12, r26
    3836:	01 50       	subi	r16, 0x01	; 1
    3838:	43 01       	movw	r8, r6
    383a:	80 0e       	add	r8, r16
    383c:	91 1c       	adc	r9, r1
    383e:	80 e3       	ldi	r24, 0x30	; 48
    3840:	f8 0e       	add	r15, r24
    3842:	c6 01       	movw	r24, r12
    3844:	b5 01       	movw	r22, r10
    3846:	2a e0       	ldi	r18, 0x0A	; 10
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	40 e0       	ldi	r20, 0x00	; 0
    384c:	50 e0       	ldi	r21, 0x00	; 0
    384e:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <__mulsi3>
    3852:	f6 1a       	sub	r15, r22
    3854:	f4 01       	movw	r30, r8
    3856:	f0 82       	st	Z, r15
    3858:	a1 14       	cp	r10, r1
    385a:	b1 04       	cpc	r11, r1
    385c:	c1 04       	cpc	r12, r1
    385e:	d1 04       	cpc	r13, r1
    3860:	e9 f6       	brne	.-70     	; 0x381c <_ZN12OrangutanLCD5printEm+0x36>
    3862:	08 c0       	rjmp	.+16     	; 0x3874 <_ZN12OrangutanLCD5printEm+0x8e>
    3864:	f6 01       	movw	r30, r12
    3866:	e0 0f       	add	r30, r16
    3868:	f1 1d       	adc	r31, r1
    386a:	80 81       	ld	r24, Z
    386c:	0e 94 aa 1b 	call	0x3754	; 0x3754 <_ZN12OrangutanLCD9send_dataEh>
    3870:	0f 5f       	subi	r16, 0xFF	; 255
    3872:	04 c0       	rjmp	.+8      	; 0x387c <_ZN12OrangutanLCD5printEm+0x96>
    3874:	6e 01       	movw	r12, r28
    3876:	08 94       	sec
    3878:	c1 1c       	adc	r12, r1
    387a:	d1 1c       	adc	r13, r1
    387c:	0a 30       	cpi	r16, 0x0A	; 10
    387e:	90 f3       	brcs	.-28     	; 0x3864 <_ZN12OrangutanLCD5printEm+0x7e>
    3880:	2a 96       	adiw	r28, 0x0a	; 10
    3882:	0f b6       	in	r0, 0x3f	; 63
    3884:	f8 94       	cli
    3886:	de bf       	out	0x3e, r29	; 62
    3888:	0f be       	out	0x3f, r0	; 63
    388a:	cd bf       	out	0x3d, r28	; 61
    388c:	cf 91       	pop	r28
    388e:	df 91       	pop	r29
    3890:	0f 91       	pop	r16
    3892:	ff 90       	pop	r15
    3894:	df 90       	pop	r13
    3896:	cf 90       	pop	r12
    3898:	bf 90       	pop	r11
    389a:	af 90       	pop	r10
    389c:	9f 90       	pop	r9
    389e:	8f 90       	pop	r8
    38a0:	7f 90       	pop	r7
    38a2:	6f 90       	pop	r6
    38a4:	08 95       	ret

000038a6 <print_unsigned_long>:
    38a6:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN12OrangutanLCD5printEm>
    38aa:	08 95       	ret

000038ac <_ZN12OrangutanLCD5printEl>:
    38ac:	ef 92       	push	r14
    38ae:	ff 92       	push	r15
    38b0:	0f 93       	push	r16
    38b2:	1f 93       	push	r17
    38b4:	7b 01       	movw	r14, r22
    38b6:	8c 01       	movw	r16, r24
    38b8:	97 ff       	sbrs	r25, 7
    38ba:	0b c0       	rjmp	.+22     	; 0x38d2 <_ZN12OrangutanLCD5printEl+0x26>
    38bc:	10 95       	com	r17
    38be:	00 95       	com	r16
    38c0:	f0 94       	com	r15
    38c2:	e0 94       	com	r14
    38c4:	e1 1c       	adc	r14, r1
    38c6:	f1 1c       	adc	r15, r1
    38c8:	01 1d       	adc	r16, r1
    38ca:	11 1d       	adc	r17, r1
    38cc:	8d e2       	ldi	r24, 0x2D	; 45
    38ce:	0e 94 aa 1b 	call	0x3754	; 0x3754 <_ZN12OrangutanLCD9send_dataEh>
    38d2:	c8 01       	movw	r24, r16
    38d4:	b7 01       	movw	r22, r14
    38d6:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN12OrangutanLCD5printEm>
    38da:	1f 91       	pop	r17
    38dc:	0f 91       	pop	r16
    38de:	ff 90       	pop	r15
    38e0:	ef 90       	pop	r14
    38e2:	08 95       	ret

000038e4 <print_long>:
    38e4:	0e 94 56 1c 	call	0x38ac	; 0x38ac <_ZN12OrangutanLCD5printEl>
    38e8:	08 95       	ret

000038ea <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    38ea:	cf 93       	push	r28
    38ec:	df 93       	push	r29
    38ee:	ec 01       	movw	r28, r24
    38f0:	03 c0       	rjmp	.+6      	; 0x38f8 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    38f2:	0e 94 aa 1b 	call	0x3754	; 0x3754 <_ZN12OrangutanLCD9send_dataEh>
    38f6:	21 96       	adiw	r28, 0x01	; 1
    38f8:	fe 01       	movw	r30, r28
    38fa:	84 91       	lpm	r24, Z+
    38fc:	88 23       	and	r24, r24
    38fe:	c9 f7       	brne	.-14     	; 0x38f2 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	08 95       	ret

00003906 <print_from_program_space>:
    3906:	0e 94 75 1c 	call	0x38ea	; 0x38ea <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    390a:	08 95       	ret

0000390c <_ZN12OrangutanLCD5printEPKc>:
    390c:	cf 93       	push	r28
    390e:	df 93       	push	r29
    3910:	ec 01       	movw	r28, r24
    3912:	03 c0       	rjmp	.+6      	; 0x391a <_ZN12OrangutanLCD5printEPKc+0xe>
    3914:	21 96       	adiw	r28, 0x01	; 1
    3916:	0e 94 aa 1b 	call	0x3754	; 0x3754 <_ZN12OrangutanLCD9send_dataEh>
    391a:	88 81       	ld	r24, Y
    391c:	88 23       	and	r24, r24
    391e:	d1 f7       	brne	.-12     	; 0x3914 <_ZN12OrangutanLCD5printEPKc+0x8>
    3920:	df 91       	pop	r29
    3922:	cf 91       	pop	r28
    3924:	08 95       	ret

00003926 <print>:
    3926:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN12OrangutanLCD5printEPKc>
    392a:	08 95       	ret

0000392c <_ZN12OrangutanLCD5printEc>:
    392c:	0e 94 aa 1b 	call	0x3754	; 0x3754 <_ZN12OrangutanLCD9send_dataEh>
    3930:	08 95       	ret

00003932 <print_character>:
    3932:	0e 94 aa 1b 	call	0x3754	; 0x3754 <_ZN12OrangutanLCD9send_dataEh>
    3936:	08 95       	ret

00003938 <lcd_putchar>:
    3938:	a0 e0       	ldi	r26, 0x00	; 0
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	e2 ea       	ldi	r30, 0xA2	; 162
    393e:	fc e1       	ldi	r31, 0x1C	; 28
    3940:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <__prologue_saves__+0x14>
    3944:	e8 2e       	mov	r14, r24
    3946:	80 91 52 03 	lds	r24, 0x0352
    394a:	90 91 53 03 	lds	r25, 0x0353
    394e:	89 2b       	or	r24, r25
    3950:	09 f4       	brne	.+2      	; 0x3954 <lcd_putchar+0x1c>
    3952:	05 c1       	rjmp	.+522    	; 0x3b5e <lcd_putchar+0x226>
    3954:	2a e0       	ldi	r18, 0x0A	; 10
    3956:	e2 16       	cp	r14, r18
    3958:	09 f4       	brne	.+2      	; 0x395c <lcd_putchar+0x24>
    395a:	46 c0       	rjmp	.+140    	; 0x39e8 <lcd_putchar+0xb0>
    395c:	38 e0       	ldi	r19, 0x08	; 8
    395e:	e3 16       	cp	r14, r19
    3960:	c9 f4       	brne	.+50     	; 0x3994 <lcd_putchar+0x5c>
    3962:	80 91 55 03 	lds	r24, 0x0355
    3966:	81 50       	subi	r24, 0x01	; 1
    3968:	80 93 55 03 	sts	0x0355, r24
    396c:	8f 3f       	cpi	r24, 0xFF	; 255
    396e:	51 f4       	brne	.+20     	; 0x3984 <lcd_putchar+0x4c>
    3970:	80 91 54 03 	lds	r24, 0x0354
    3974:	81 50       	subi	r24, 0x01	; 1
    3976:	80 93 54 03 	sts	0x0354, r24
    397a:	80 91 44 03 	lds	r24, 0x0344
    397e:	81 50       	subi	r24, 0x01	; 1
    3980:	80 93 55 03 	sts	0x0355, r24
    3984:	80 91 54 03 	lds	r24, 0x0354
    3988:	8f 3f       	cpi	r24, 0xFF	; 255
    398a:	09 f0       	breq	.+2      	; 0x398e <lcd_putchar+0x56>
    398c:	e2 c0       	rjmp	.+452    	; 0x3b52 <lcd_putchar+0x21a>
    398e:	10 92 54 03 	sts	0x0354, r1
    3992:	dd c0       	rjmp	.+442    	; 0x3b4e <lcd_putchar+0x216>
    3994:	8e 2d       	mov	r24, r14
    3996:	0e 94 aa 1b 	call	0x3754	; 0x3754 <_ZN12OrangutanLCD9send_dataEh>
    399a:	20 91 54 03 	lds	r18, 0x0354
    399e:	22 23       	and	r18, r18
    39a0:	c9 f0       	breq	.+50     	; 0x39d4 <lcd_putchar+0x9c>
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	21 50       	subi	r18, 0x01	; 1
    39a6:	30 40       	sbci	r19, 0x00	; 0
    39a8:	80 91 44 03 	lds	r24, 0x0344
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	ac 01       	movw	r20, r24
    39b0:	24 9f       	mul	r18, r20
    39b2:	c0 01       	movw	r24, r0
    39b4:	25 9f       	mul	r18, r21
    39b6:	90 0d       	add	r25, r0
    39b8:	34 9f       	mul	r19, r20
    39ba:	90 0d       	add	r25, r0
    39bc:	11 24       	eor	r1, r1
    39be:	20 91 55 03 	lds	r18, 0x0355
    39c2:	e0 91 52 03 	lds	r30, 0x0352
    39c6:	f0 91 53 03 	lds	r31, 0x0353
    39ca:	e8 0f       	add	r30, r24
    39cc:	f9 1f       	adc	r31, r25
    39ce:	e2 0f       	add	r30, r18
    39d0:	f1 1d       	adc	r31, r1
    39d2:	e0 82       	st	Z, r14
    39d4:	80 91 55 03 	lds	r24, 0x0355
    39d8:	8f 5f       	subi	r24, 0xFF	; 255
    39da:	80 93 55 03 	sts	0x0355, r24
    39de:	90 91 44 03 	lds	r25, 0x0344
    39e2:	89 17       	cp	r24, r25
    39e4:	09 f0       	breq	.+2      	; 0x39e8 <lcd_putchar+0xb0>
    39e6:	bb c0       	rjmp	.+374    	; 0x3b5e <lcd_putchar+0x226>
    39e8:	40 91 54 03 	lds	r20, 0x0354
    39ec:	24 2f       	mov	r18, r20
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	80 91 43 03 	lds	r24, 0x0343
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	01 97       	sbiw	r24, 0x01	; 1
    39f8:	28 17       	cp	r18, r24
    39fa:	39 07       	cpc	r19, r25
    39fc:	09 f0       	breq	.+2      	; 0x3a00 <lcd_putchar+0xc8>
    39fe:	a4 c0       	rjmp	.+328    	; 0x3b48 <lcd_putchar+0x210>
    3a00:	c0 e0       	ldi	r28, 0x00	; 0
    3a02:	d0 e0       	ldi	r29, 0x00	; 0
    3a04:	44 c0       	rjmp	.+136    	; 0x3a8e <lcd_putchar+0x156>
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	6c 2f       	mov	r22, r28
    3a0a:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
    3a0e:	ff 24       	eor	r15, r15
    3a10:	6e 01       	movw	r12, r28
    3a12:	08 94       	sec
    3a14:	c1 1c       	adc	r12, r1
    3a16:	d1 1c       	adc	r13, r1
    3a18:	35 c0       	rjmp	.+106    	; 0x3a84 <lcd_putchar+0x14c>
    3a1a:	0f 2d       	mov	r16, r15
    3a1c:	10 e0       	ldi	r17, 0x00	; 0
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	9c 01       	movw	r18, r24
    3a22:	c2 9f       	mul	r28, r18
    3a24:	c0 01       	movw	r24, r0
    3a26:	c3 9f       	mul	r28, r19
    3a28:	90 0d       	add	r25, r0
    3a2a:	d2 9f       	mul	r29, r18
    3a2c:	90 0d       	add	r25, r0
    3a2e:	11 24       	eor	r1, r1
    3a30:	e0 91 52 03 	lds	r30, 0x0352
    3a34:	f0 91 53 03 	lds	r31, 0x0353
    3a38:	e0 0f       	add	r30, r16
    3a3a:	f1 1f       	adc	r31, r17
    3a3c:	e8 0f       	add	r30, r24
    3a3e:	f9 1f       	adc	r31, r25
    3a40:	80 81       	ld	r24, Z
    3a42:	0e 94 aa 1b 	call	0x3754	; 0x3754 <_ZN12OrangutanLCD9send_dataEh>
    3a46:	e0 91 52 03 	lds	r30, 0x0352
    3a4a:	f0 91 53 03 	lds	r31, 0x0353
    3a4e:	80 91 44 03 	lds	r24, 0x0344
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	c8 9f       	mul	r28, r24
    3a56:	d0 01       	movw	r26, r0
    3a58:	c9 9f       	mul	r28, r25
    3a5a:	b0 0d       	add	r27, r0
    3a5c:	d8 9f       	mul	r29, r24
    3a5e:	b0 0d       	add	r27, r0
    3a60:	11 24       	eor	r1, r1
    3a62:	e0 0f       	add	r30, r16
    3a64:	f1 1f       	adc	r31, r17
    3a66:	ae 0f       	add	r26, r30
    3a68:	bf 1f       	adc	r27, r31
    3a6a:	ac 01       	movw	r20, r24
    3a6c:	c4 9e       	mul	r12, r20
    3a6e:	c0 01       	movw	r24, r0
    3a70:	c5 9e       	mul	r12, r21
    3a72:	90 0d       	add	r25, r0
    3a74:	d4 9e       	mul	r13, r20
    3a76:	90 0d       	add	r25, r0
    3a78:	11 24       	eor	r1, r1
    3a7a:	e8 0f       	add	r30, r24
    3a7c:	f9 1f       	adc	r31, r25
    3a7e:	80 81       	ld	r24, Z
    3a80:	8c 93       	st	X, r24
    3a82:	f3 94       	inc	r15
    3a84:	80 91 44 03 	lds	r24, 0x0344
    3a88:	f8 16       	cp	r15, r24
    3a8a:	38 f2       	brcs	.-114    	; 0x3a1a <lcd_putchar+0xe2>
    3a8c:	e6 01       	movw	r28, r12
    3a8e:	60 91 43 03 	lds	r22, 0x0343
    3a92:	86 2f       	mov	r24, r22
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	02 97       	sbiw	r24, 0x02	; 2
    3a98:	c8 17       	cp	r28, r24
    3a9a:	d9 07       	cpc	r29, r25
    3a9c:	0c f4       	brge	.+2      	; 0x3aa0 <lcd_putchar+0x168>
    3a9e:	b3 cf       	rjmp	.-154    	; 0x3a06 <lcd_putchar+0xce>
    3aa0:	62 30       	cpi	r22, 0x02	; 2
    3aa2:	08 f4       	brcc	.+2      	; 0x3aa6 <lcd_putchar+0x16e>
    3aa4:	40 c0       	rjmp	.+128    	; 0x3b26 <lcd_putchar+0x1ee>
    3aa6:	62 50       	subi	r22, 0x02	; 2
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
    3aae:	ff 24       	eor	r15, r15
    3ab0:	40 e2       	ldi	r20, 0x20	; 32
    3ab2:	d4 2e       	mov	r13, r20
    3ab4:	34 c0       	rjmp	.+104    	; 0x3b1e <lcd_putchar+0x1e6>
    3ab6:	0f 2d       	mov	r16, r15
    3ab8:	10 e0       	ldi	r17, 0x00	; 0
    3aba:	80 91 43 03 	lds	r24, 0x0343
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	02 97       	sbiw	r24, 0x02	; 2
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	ac 01       	movw	r20, r24
    3ac6:	42 9f       	mul	r20, r18
    3ac8:	c0 01       	movw	r24, r0
    3aca:	43 9f       	mul	r20, r19
    3acc:	90 0d       	add	r25, r0
    3ace:	52 9f       	mul	r21, r18
    3ad0:	90 0d       	add	r25, r0
    3ad2:	11 24       	eor	r1, r1
    3ad4:	e0 91 52 03 	lds	r30, 0x0352
    3ad8:	f0 91 53 03 	lds	r31, 0x0353
    3adc:	e0 0f       	add	r30, r16
    3ade:	f1 1f       	adc	r31, r17
    3ae0:	e8 0f       	add	r30, r24
    3ae2:	f9 1f       	adc	r31, r25
    3ae4:	80 81       	ld	r24, Z
    3ae6:	0e 94 aa 1b 	call	0x3754	; 0x3754 <_ZN12OrangutanLCD9send_dataEh>
    3aea:	20 91 43 03 	lds	r18, 0x0343
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	22 50       	subi	r18, 0x02	; 2
    3af2:	30 40       	sbci	r19, 0x00	; 0
    3af4:	80 91 44 03 	lds	r24, 0x0344
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	ac 01       	movw	r20, r24
    3afc:	24 9f       	mul	r18, r20
    3afe:	c0 01       	movw	r24, r0
    3b00:	25 9f       	mul	r18, r21
    3b02:	90 0d       	add	r25, r0
    3b04:	34 9f       	mul	r19, r20
    3b06:	90 0d       	add	r25, r0
    3b08:	11 24       	eor	r1, r1
    3b0a:	e0 91 52 03 	lds	r30, 0x0352
    3b0e:	f0 91 53 03 	lds	r31, 0x0353
    3b12:	e0 0f       	add	r30, r16
    3b14:	f1 1f       	adc	r31, r17
    3b16:	e8 0f       	add	r30, r24
    3b18:	f9 1f       	adc	r31, r25
    3b1a:	d0 82       	st	Z, r13
    3b1c:	f3 94       	inc	r15
    3b1e:	20 91 44 03 	lds	r18, 0x0344
    3b22:	f2 16       	cp	r15, r18
    3b24:	40 f2       	brcs	.-112    	; 0x3ab6 <lcd_putchar+0x17e>
    3b26:	60 91 43 03 	lds	r22, 0x0343
    3b2a:	61 50       	subi	r22, 0x01	; 1
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
    3b32:	00 e0       	ldi	r16, 0x00	; 0
    3b34:	04 c0       	rjmp	.+8      	; 0x3b3e <lcd_putchar+0x206>
    3b36:	80 e2       	ldi	r24, 0x20	; 32
    3b38:	0e 94 aa 1b 	call	0x3754	; 0x3754 <_ZN12OrangutanLCD9send_dataEh>
    3b3c:	0f 5f       	subi	r16, 0xFF	; 255
    3b3e:	80 91 44 03 	lds	r24, 0x0344
    3b42:	08 17       	cp	r16, r24
    3b44:	c0 f3       	brcs	.-16     	; 0x3b36 <lcd_putchar+0x1fe>
    3b46:	03 c0       	rjmp	.+6      	; 0x3b4e <lcd_putchar+0x216>
    3b48:	4f 5f       	subi	r20, 0xFF	; 255
    3b4a:	40 93 54 03 	sts	0x0354, r20
    3b4e:	10 92 55 03 	sts	0x0355, r1
    3b52:	80 91 55 03 	lds	r24, 0x0355
    3b56:	60 91 54 03 	lds	r22, 0x0354
    3b5a:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN12OrangutanLCD6gotoXYEhh>
    3b5e:	2e 2d       	mov	r18, r14
    3b60:	33 27       	eor	r19, r19
    3b62:	27 fd       	sbrc	r18, 7
    3b64:	30 95       	com	r19
    3b66:	c9 01       	movw	r24, r18
    3b68:	cd b7       	in	r28, 0x3d	; 61
    3b6a:	de b7       	in	r29, 0x3e	; 62
    3b6c:	e8 e0       	ldi	r30, 0x08	; 8
    3b6e:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <__epilogue_restores__+0x14>

00003b72 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    3b72:	ef 92       	push	r14
    3b74:	ff 92       	push	r15
    3b76:	0f 93       	push	r16
    3b78:	1f 93       	push	r17
    3b7a:	cf 93       	push	r28
    3b7c:	df 93       	push	r29
    3b7e:	7c 01       	movw	r14, r24
    3b80:	06 2f       	mov	r16, r22
    3b82:	10 e0       	ldi	r17, 0x00	; 0
    3b84:	53 e0       	ldi	r21, 0x03	; 3
    3b86:	00 0f       	add	r16, r16
    3b88:	11 1f       	adc	r17, r17
    3b8a:	5a 95       	dec	r21
    3b8c:	e1 f7       	brne	.-8      	; 0x3b86 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    3b8e:	c0 e0       	ldi	r28, 0x00	; 0
    3b90:	d0 e0       	ldi	r29, 0x00	; 0
    3b92:	9e 01       	movw	r18, r28
    3b94:	20 0f       	add	r18, r16
    3b96:	82 2f       	mov	r24, r18
    3b98:	80 64       	ori	r24, 0x40	; 64
    3b9a:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN12OrangutanLCD8send_cmdEh>
    3b9e:	f7 01       	movw	r30, r14
    3ba0:	ec 0f       	add	r30, r28
    3ba2:	fd 1f       	adc	r31, r29
    3ba4:	e4 91       	lpm	r30, Z+
    3ba6:	8e 2f       	mov	r24, r30
    3ba8:	0e 94 aa 1b 	call	0x3754	; 0x3754 <_ZN12OrangutanLCD9send_dataEh>
    3bac:	21 96       	adiw	r28, 0x01	; 1
    3bae:	c8 30       	cpi	r28, 0x08	; 8
    3bb0:	d1 05       	cpc	r29, r1
    3bb2:	79 f7       	brne	.-34     	; 0x3b92 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    3bb4:	cd b7       	in	r28, 0x3d	; 61
    3bb6:	de b7       	in	r29, 0x3e	; 62
    3bb8:	e6 e0       	ldi	r30, 0x06	; 6
    3bba:	0c 94 86 1f 	jmp	0x3f0c	; 0x3f0c <__epilogue_restores__+0x18>

00003bbe <lcd_load_custom_character>:
    3bbe:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    3bc2:	08 95       	ret

00003bc4 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    3bc4:	60 e0       	ldi	r22, 0x00	; 0
    3bc6:	41 e0       	ldi	r20, 0x01	; 1
    3bc8:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZN12OrangutanLCD4sendEhhh>
    3bcc:	08 95       	ret

00003bce <_ZN12OrangutanLCD6scrollEhhj>:
    3bce:	0f 93       	push	r16
    3bd0:	1f 93       	push	r17
    3bd2:	cf 93       	push	r28
    3bd4:	df 93       	push	r29
    3bd6:	08 2f       	mov	r16, r24
    3bd8:	16 2f       	mov	r17, r22
    3bda:	ea 01       	movw	r28, r20
    3bdc:	0b c0       	rjmp	.+22     	; 0x3bf4 <_ZN12OrangutanLCD6scrollEhhj+0x26>
    3bde:	00 23       	and	r16, r16
    3be0:	11 f4       	brne	.+4      	; 0x3be6 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    3be2:	88 e1       	ldi	r24, 0x18	; 24
    3be4:	01 c0       	rjmp	.+2      	; 0x3be8 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    3be6:	8c e1       	ldi	r24, 0x1C	; 28
    3be8:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN12OrangutanLCD8send_cmdEh>
    3bec:	ce 01       	movw	r24, r28
    3bee:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN13OrangutanTime17delayMillisecondsEj>
    3bf2:	11 50       	subi	r17, 0x01	; 1
    3bf4:	11 23       	and	r17, r17
    3bf6:	99 f7       	brne	.-26     	; 0x3bde <_ZN12OrangutanLCD6scrollEhhj+0x10>
    3bf8:	df 91       	pop	r29
    3bfa:	cf 91       	pop	r28
    3bfc:	1f 91       	pop	r17
    3bfe:	0f 91       	pop	r16
    3c00:	08 95       	ret

00003c02 <lcd_scroll>:
    3c02:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <_ZN12OrangutanLCD6scrollEhhj>
    3c06:	08 95       	ret

00003c08 <__vector_11>:
    3c08:	2f 92       	push	r2
    3c0a:	8f 93       	push	r24
    3c0c:	9f 93       	push	r25
    3c0e:	2f b6       	in	r2, 0x3f	; 63
    3c10:	80 91 5c 03 	lds	r24, 0x035C
    3c14:	90 91 5d 03 	lds	r25, 0x035D
    3c18:	01 96       	adiw	r24, 0x01	; 1
    3c1a:	80 93 5c 03 	sts	0x035C, r24
    3c1e:	90 93 5d 03 	sts	0x035D, r25
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	80 91 5e 03 	lds	r24, 0x035E
    3c28:	89 1f       	adc	r24, r25
    3c2a:	80 93 5e 03 	sts	0x035E, r24
    3c2e:	90 91 64 03 	lds	r25, 0x0364
    3c32:	9c 5f       	subi	r25, 0xFC	; 252
    3c34:	90 93 64 03 	sts	0x0364, r25
    3c38:	80 91 63 03 	lds	r24, 0x0363
    3c3c:	80 51       	subi	r24, 0x10	; 16
    3c3e:	97 42       	sbci	r25, 0x27	; 39
    3c40:	c0 f0       	brcs	.+48     	; 0x3c72 <end>
    3c42:	90 93 64 03 	sts	0x0364, r25
    3c46:	80 93 63 03 	sts	0x0363, r24
    3c4a:	80 91 5f 03 	lds	r24, 0x035F
    3c4e:	90 91 60 03 	lds	r25, 0x0360
    3c52:	01 96       	adiw	r24, 0x01	; 1
    3c54:	80 93 5f 03 	sts	0x035F, r24
    3c58:	90 93 60 03 	sts	0x0360, r25
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	80 91 61 03 	lds	r24, 0x0361
    3c62:	89 1f       	adc	r24, r25
    3c64:	80 93 61 03 	sts	0x0361, r24
    3c68:	80 91 62 03 	lds	r24, 0x0362
    3c6c:	89 1f       	adc	r24, r25
    3c6e:	80 93 62 03 	sts	0x0362, r24

00003c72 <end>:
    3c72:	2f be       	out	0x3f, r2	; 63
    3c74:	9f 91       	pop	r25
    3c76:	8f 91       	pop	r24
    3c78:	2f 90       	pop	r2
    3c7a:	18 95       	reti

00003c7c <ticks_to_microseconds>:
    3c7c:	6f 5f       	subi	r22, 0xFF	; 255
    3c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c80:	8f 4f       	sbci	r24, 0xFF	; 255
    3c82:	9f 4f       	sbci	r25, 0xFF	; 255
    3c84:	66 0f       	add	r22, r22
    3c86:	77 1f       	adc	r23, r23
    3c88:	88 1f       	adc	r24, r24
    3c8a:	99 1f       	adc	r25, r25
    3c8c:	25 e0       	ldi	r18, 0x05	; 5
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	40 e0       	ldi	r20, 0x00	; 0
    3c92:	50 e0       	ldi	r21, 0x00	; 0
    3c94:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__udivmodsi4>
    3c98:	ca 01       	movw	r24, r20
    3c9a:	b9 01       	movw	r22, r18
    3c9c:	08 95       	ret

00003c9e <delay_ms>:
    3c9e:	28 ee       	ldi	r18, 0xE8	; 232
    3ca0:	33 e0       	ldi	r19, 0x03	; 3
    3ca2:	09 c0       	rjmp	.+18     	; 0x3cb6 <delay_ms+0x18>
    3ca4:	f9 01       	movw	r30, r18
    3ca6:	6f 93       	push	r22
    3ca8:	64 e0       	ldi	r22, 0x04	; 4
    3caa:	6a 95       	dec	r22
    3cac:	f1 f7       	brne	.-4      	; 0x3caa <delay_ms+0xc>
    3cae:	6f 91       	pop	r22
    3cb0:	31 97       	sbiw	r30, 0x01	; 1
    3cb2:	c9 f7       	brne	.-14     	; 0x3ca6 <delay_ms+0x8>
    3cb4:	01 97       	sbiw	r24, 0x01	; 1
    3cb6:	00 97       	sbiw	r24, 0x00	; 0
    3cb8:	a9 f7       	brne	.-22     	; 0x3ca4 <delay_ms+0x6>
    3cba:	08 95       	ret

00003cbc <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    3cbc:	6f 5f       	subi	r22, 0xFF	; 255
    3cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc0:	8f 4f       	sbci	r24, 0xFF	; 255
    3cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc4:	66 0f       	add	r22, r22
    3cc6:	77 1f       	adc	r23, r23
    3cc8:	88 1f       	adc	r24, r24
    3cca:	99 1f       	adc	r25, r25
    3ccc:	25 e0       	ldi	r18, 0x05	; 5
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	40 e0       	ldi	r20, 0x00	; 0
    3cd2:	50 e0       	ldi	r21, 0x00	; 0
    3cd4:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__udivmodsi4>
    3cd8:	ca 01       	movw	r24, r20
    3cda:	b9 01       	movw	r22, r18
    3cdc:	08 95       	ret

00003cde <_ZN13OrangutanTime17delayMillisecondsEj>:
    3cde:	28 ee       	ldi	r18, 0xE8	; 232
    3ce0:	33 e0       	ldi	r19, 0x03	; 3
    3ce2:	09 c0       	rjmp	.+18     	; 0x3cf6 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3ce4:	f9 01       	movw	r30, r18
    3ce6:	6f 93       	push	r22
    3ce8:	64 e0       	ldi	r22, 0x04	; 4
    3cea:	6a 95       	dec	r22
    3cec:	f1 f7       	brne	.-4      	; 0x3cea <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3cee:	6f 91       	pop	r22
    3cf0:	31 97       	sbiw	r30, 0x01	; 1
    3cf2:	c9 f7       	brne	.-14     	; 0x3ce6 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3cf4:	01 97       	sbiw	r24, 0x01	; 1
    3cf6:	00 97       	sbiw	r24, 0x00	; 0
    3cf8:	a9 f7       	brne	.-22     	; 0x3ce4 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    3cfa:	08 95       	ret

00003cfc <_ZN13OrangutanTime5init2Ev>:
    3cfc:	a0 e7       	ldi	r26, 0x70	; 112
    3cfe:	b0 e0       	ldi	r27, 0x00	; 0
    3d00:	8c 91       	ld	r24, X
    3d02:	8e 7f       	andi	r24, 0xFE	; 254
    3d04:	8c 93       	st	X, r24
    3d06:	e0 eb       	ldi	r30, 0xB0	; 176
    3d08:	f0 e0       	ldi	r31, 0x00	; 0
    3d0a:	80 81       	ld	r24, Z
    3d0c:	83 60       	ori	r24, 0x03	; 3
    3d0e:	80 83       	st	Z, r24
    3d10:	e1 eb       	ldi	r30, 0xB1	; 177
    3d12:	f0 e0       	ldi	r31, 0x00	; 0
    3d14:	80 81       	ld	r24, Z
    3d16:	80 7f       	andi	r24, 0xF0	; 240
    3d18:	80 83       	st	Z, r24
    3d1a:	80 81       	ld	r24, Z
    3d1c:	82 60       	ori	r24, 0x02	; 2
    3d1e:	80 83       	st	Z, r24
    3d20:	b8 9a       	sbi	0x17, 0	; 23
    3d22:	8c 91       	ld	r24, X
    3d24:	81 60       	ori	r24, 0x01	; 1
    3d26:	8c 93       	st	X, r24
    3d28:	78 94       	sei
    3d2a:	08 95       	ret

00003d2c <_ZN13OrangutanTime4initEv>:
    3d2c:	80 91 65 03 	lds	r24, 0x0365
    3d30:	88 23       	and	r24, r24
    3d32:	29 f4       	brne	.+10     	; 0x3d3e <_ZN13OrangutanTime4initEv+0x12>
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	80 93 65 03 	sts	0x0365, r24
    3d3a:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <_ZN13OrangutanTime5init2Ev>
    3d3e:	08 95       	ret

00003d40 <_ZN13OrangutanTime2msEv>:
    3d40:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <_ZN13OrangutanTime4initEv>
    3d44:	e0 e7       	ldi	r30, 0x70	; 112
    3d46:	f0 e0       	ldi	r31, 0x00	; 0
    3d48:	80 81       	ld	r24, Z
    3d4a:	8e 7f       	andi	r24, 0xFE	; 254
    3d4c:	80 83       	st	Z, r24
    3d4e:	20 91 5f 03 	lds	r18, 0x035F
    3d52:	30 91 60 03 	lds	r19, 0x0360
    3d56:	40 91 61 03 	lds	r20, 0x0361
    3d5a:	50 91 62 03 	lds	r21, 0x0362
    3d5e:	80 81       	ld	r24, Z
    3d60:	81 60       	ori	r24, 0x01	; 1
    3d62:	80 83       	st	Z, r24
    3d64:	b9 01       	movw	r22, r18
    3d66:	ca 01       	movw	r24, r20
    3d68:	08 95       	ret

00003d6a <get_ms>:
    3d6a:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <_ZN13OrangutanTime2msEv>
    3d6e:	08 95       	ret

00003d70 <_ZN13OrangutanTime5ticksEv>:
    3d70:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <_ZN13OrangutanTime4initEv>
    3d74:	80 91 70 00 	lds	r24, 0x0070
    3d78:	8e 7f       	andi	r24, 0xFE	; 254
    3d7a:	80 93 70 00 	sts	0x0070, r24
    3d7e:	60 91 b2 00 	lds	r22, 0x00B2
    3d82:	80 91 5b 03 	lds	r24, 0x035B
    3d86:	90 91 5c 03 	lds	r25, 0x035C
    3d8a:	a0 91 5d 03 	lds	r26, 0x035D
    3d8e:	b0 91 5e 03 	lds	r27, 0x035E
    3d92:	b8 99       	sbic	0x17, 0	; 23
    3d94:	05 c0       	rjmp	.+10     	; 0x3da0 <_ZN13OrangutanTime5ticksEv+0x30>
    3d96:	26 2f       	mov	r18, r22
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	40 e0       	ldi	r20, 0x00	; 0
    3d9c:	50 e0       	ldi	r21, 0x00	; 0
    3d9e:	11 c0       	rjmp	.+34     	; 0x3dc2 <_ZN13OrangutanTime5ticksEv+0x52>
    3da0:	80 91 b2 00 	lds	r24, 0x00B2
    3da4:	20 91 5b 03 	lds	r18, 0x035B
    3da8:	30 91 5c 03 	lds	r19, 0x035C
    3dac:	40 91 5d 03 	lds	r20, 0x035D
    3db0:	50 91 5e 03 	lds	r21, 0x035E
    3db4:	20 50       	subi	r18, 0x00	; 0
    3db6:	3f 4f       	sbci	r19, 0xFF	; 255
    3db8:	4f 4f       	sbci	r20, 0xFF	; 255
    3dba:	5f 4f       	sbci	r21, 0xFF	; 255
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	a0 e0       	ldi	r26, 0x00	; 0
    3dc0:	b0 e0       	ldi	r27, 0x00	; 0
    3dc2:	28 2b       	or	r18, r24
    3dc4:	39 2b       	or	r19, r25
    3dc6:	4a 2b       	or	r20, r26
    3dc8:	5b 2b       	or	r21, r27
    3dca:	80 91 70 00 	lds	r24, 0x0070
    3dce:	81 60       	ori	r24, 0x01	; 1
    3dd0:	80 93 70 00 	sts	0x0070, r24
    3dd4:	b9 01       	movw	r22, r18
    3dd6:	ca 01       	movw	r24, r20
    3dd8:	08 95       	ret

00003dda <get_ticks>:
    3dda:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <_ZN13OrangutanTime5ticksEv>
    3dde:	08 95       	ret

00003de0 <_ZN13OrangutanTime5resetEv>:
    3de0:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <_ZN13OrangutanTime4initEv>
    3de4:	e0 e7       	ldi	r30, 0x70	; 112
    3de6:	f0 e0       	ldi	r31, 0x00	; 0
    3de8:	80 81       	ld	r24, Z
    3dea:	8e 7f       	andi	r24, 0xFE	; 254
    3dec:	80 83       	st	Z, r24
    3dee:	10 92 5f 03 	sts	0x035F, r1
    3df2:	10 92 60 03 	sts	0x0360, r1
    3df6:	10 92 61 03 	sts	0x0361, r1
    3dfa:	10 92 62 03 	sts	0x0362, r1
    3dfe:	10 92 64 03 	sts	0x0364, r1
    3e02:	10 92 63 03 	sts	0x0363, r1
    3e06:	80 81       	ld	r24, Z
    3e08:	81 60       	ori	r24, 0x01	; 1
    3e0a:	80 83       	st	Z, r24
    3e0c:	08 95       	ret

00003e0e <time_reset>:
    3e0e:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <_ZN13OrangutanTime5resetEv>
    3e12:	08 95       	ret

00003e14 <__mulsi3>:
    3e14:	62 9f       	mul	r22, r18
    3e16:	d0 01       	movw	r26, r0
    3e18:	73 9f       	mul	r23, r19
    3e1a:	f0 01       	movw	r30, r0
    3e1c:	82 9f       	mul	r24, r18
    3e1e:	e0 0d       	add	r30, r0
    3e20:	f1 1d       	adc	r31, r1
    3e22:	64 9f       	mul	r22, r20
    3e24:	e0 0d       	add	r30, r0
    3e26:	f1 1d       	adc	r31, r1
    3e28:	92 9f       	mul	r25, r18
    3e2a:	f0 0d       	add	r31, r0
    3e2c:	83 9f       	mul	r24, r19
    3e2e:	f0 0d       	add	r31, r0
    3e30:	74 9f       	mul	r23, r20
    3e32:	f0 0d       	add	r31, r0
    3e34:	65 9f       	mul	r22, r21
    3e36:	f0 0d       	add	r31, r0
    3e38:	99 27       	eor	r25, r25
    3e3a:	72 9f       	mul	r23, r18
    3e3c:	b0 0d       	add	r27, r0
    3e3e:	e1 1d       	adc	r30, r1
    3e40:	f9 1f       	adc	r31, r25
    3e42:	63 9f       	mul	r22, r19
    3e44:	b0 0d       	add	r27, r0
    3e46:	e1 1d       	adc	r30, r1
    3e48:	f9 1f       	adc	r31, r25
    3e4a:	bd 01       	movw	r22, r26
    3e4c:	cf 01       	movw	r24, r30
    3e4e:	11 24       	eor	r1, r1
    3e50:	08 95       	ret

00003e52 <__divmodhi4>:
    3e52:	97 fb       	bst	r25, 7
    3e54:	09 2e       	mov	r0, r25
    3e56:	07 26       	eor	r0, r23
    3e58:	0a d0       	rcall	.+20     	; 0x3e6e <__divmodhi4_neg1>
    3e5a:	77 fd       	sbrc	r23, 7
    3e5c:	04 d0       	rcall	.+8      	; 0x3e66 <__divmodhi4_neg2>
    3e5e:	65 d0       	rcall	.+202    	; 0x3f2a <__udivmodhi4>
    3e60:	06 d0       	rcall	.+12     	; 0x3e6e <__divmodhi4_neg1>
    3e62:	00 20       	and	r0, r0
    3e64:	1a f4       	brpl	.+6      	; 0x3e6c <__divmodhi4_exit>

00003e66 <__divmodhi4_neg2>:
    3e66:	70 95       	com	r23
    3e68:	61 95       	neg	r22
    3e6a:	7f 4f       	sbci	r23, 0xFF	; 255

00003e6c <__divmodhi4_exit>:
    3e6c:	08 95       	ret

00003e6e <__divmodhi4_neg1>:
    3e6e:	f6 f7       	brtc	.-4      	; 0x3e6c <__divmodhi4_exit>
    3e70:	90 95       	com	r25
    3e72:	81 95       	neg	r24
    3e74:	9f 4f       	sbci	r25, 0xFF	; 255
    3e76:	08 95       	ret

00003e78 <__udivmodsi4>:
    3e78:	a1 e2       	ldi	r26, 0x21	; 33
    3e7a:	1a 2e       	mov	r1, r26
    3e7c:	aa 1b       	sub	r26, r26
    3e7e:	bb 1b       	sub	r27, r27
    3e80:	fd 01       	movw	r30, r26
    3e82:	0d c0       	rjmp	.+26     	; 0x3e9e <__udivmodsi4_ep>

00003e84 <__udivmodsi4_loop>:
    3e84:	aa 1f       	adc	r26, r26
    3e86:	bb 1f       	adc	r27, r27
    3e88:	ee 1f       	adc	r30, r30
    3e8a:	ff 1f       	adc	r31, r31
    3e8c:	a2 17       	cp	r26, r18
    3e8e:	b3 07       	cpc	r27, r19
    3e90:	e4 07       	cpc	r30, r20
    3e92:	f5 07       	cpc	r31, r21
    3e94:	20 f0       	brcs	.+8      	; 0x3e9e <__udivmodsi4_ep>
    3e96:	a2 1b       	sub	r26, r18
    3e98:	b3 0b       	sbc	r27, r19
    3e9a:	e4 0b       	sbc	r30, r20
    3e9c:	f5 0b       	sbc	r31, r21

00003e9e <__udivmodsi4_ep>:
    3e9e:	66 1f       	adc	r22, r22
    3ea0:	77 1f       	adc	r23, r23
    3ea2:	88 1f       	adc	r24, r24
    3ea4:	99 1f       	adc	r25, r25
    3ea6:	1a 94       	dec	r1
    3ea8:	69 f7       	brne	.-38     	; 0x3e84 <__udivmodsi4_loop>
    3eaa:	60 95       	com	r22
    3eac:	70 95       	com	r23
    3eae:	80 95       	com	r24
    3eb0:	90 95       	com	r25
    3eb2:	9b 01       	movw	r18, r22
    3eb4:	ac 01       	movw	r20, r24
    3eb6:	bd 01       	movw	r22, r26
    3eb8:	cf 01       	movw	r24, r30
    3eba:	08 95       	ret

00003ebc <__prologue_saves__>:
    3ebc:	2f 92       	push	r2
    3ebe:	3f 92       	push	r3
    3ec0:	4f 92       	push	r4
    3ec2:	5f 92       	push	r5
    3ec4:	6f 92       	push	r6
    3ec6:	7f 92       	push	r7
    3ec8:	8f 92       	push	r8
    3eca:	9f 92       	push	r9
    3ecc:	af 92       	push	r10
    3ece:	bf 92       	push	r11
    3ed0:	cf 92       	push	r12
    3ed2:	df 92       	push	r13
    3ed4:	ef 92       	push	r14
    3ed6:	ff 92       	push	r15
    3ed8:	0f 93       	push	r16
    3eda:	1f 93       	push	r17
    3edc:	cf 93       	push	r28
    3ede:	df 93       	push	r29
    3ee0:	cd b7       	in	r28, 0x3d	; 61
    3ee2:	de b7       	in	r29, 0x3e	; 62
    3ee4:	ca 1b       	sub	r28, r26
    3ee6:	db 0b       	sbc	r29, r27
    3ee8:	0f b6       	in	r0, 0x3f	; 63
    3eea:	f8 94       	cli
    3eec:	de bf       	out	0x3e, r29	; 62
    3eee:	0f be       	out	0x3f, r0	; 63
    3ef0:	cd bf       	out	0x3d, r28	; 61
    3ef2:	09 94       	ijmp

00003ef4 <__epilogue_restores__>:
    3ef4:	2a 88       	ldd	r2, Y+18	; 0x12
    3ef6:	39 88       	ldd	r3, Y+17	; 0x11
    3ef8:	48 88       	ldd	r4, Y+16	; 0x10
    3efa:	5f 84       	ldd	r5, Y+15	; 0x0f
    3efc:	6e 84       	ldd	r6, Y+14	; 0x0e
    3efe:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f00:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f02:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f04:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f06:	b9 84       	ldd	r11, Y+9	; 0x09
    3f08:	c8 84       	ldd	r12, Y+8	; 0x08
    3f0a:	df 80       	ldd	r13, Y+7	; 0x07
    3f0c:	ee 80       	ldd	r14, Y+6	; 0x06
    3f0e:	fd 80       	ldd	r15, Y+5	; 0x05
    3f10:	0c 81       	ldd	r16, Y+4	; 0x04
    3f12:	1b 81       	ldd	r17, Y+3	; 0x03
    3f14:	aa 81       	ldd	r26, Y+2	; 0x02
    3f16:	b9 81       	ldd	r27, Y+1	; 0x01
    3f18:	ce 0f       	add	r28, r30
    3f1a:	d1 1d       	adc	r29, r1
    3f1c:	0f b6       	in	r0, 0x3f	; 63
    3f1e:	f8 94       	cli
    3f20:	de bf       	out	0x3e, r29	; 62
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	cd bf       	out	0x3d, r28	; 61
    3f26:	ed 01       	movw	r28, r26
    3f28:	08 95       	ret

00003f2a <__udivmodhi4>:
    3f2a:	aa 1b       	sub	r26, r26
    3f2c:	bb 1b       	sub	r27, r27
    3f2e:	51 e1       	ldi	r21, 0x11	; 17
    3f30:	07 c0       	rjmp	.+14     	; 0x3f40 <__udivmodhi4_ep>

00003f32 <__udivmodhi4_loop>:
    3f32:	aa 1f       	adc	r26, r26
    3f34:	bb 1f       	adc	r27, r27
    3f36:	a6 17       	cp	r26, r22
    3f38:	b7 07       	cpc	r27, r23
    3f3a:	10 f0       	brcs	.+4      	; 0x3f40 <__udivmodhi4_ep>
    3f3c:	a6 1b       	sub	r26, r22
    3f3e:	b7 0b       	sbc	r27, r23

00003f40 <__udivmodhi4_ep>:
    3f40:	88 1f       	adc	r24, r24
    3f42:	99 1f       	adc	r25, r25
    3f44:	5a 95       	dec	r21
    3f46:	a9 f7       	brne	.-22     	; 0x3f32 <__udivmodhi4_loop>
    3f48:	80 95       	com	r24
    3f4a:	90 95       	com	r25
    3f4c:	bc 01       	movw	r22, r24
    3f4e:	cd 01       	movw	r24, r26
    3f50:	08 95       	ret

00003f52 <malloc>:
    3f52:	cf 93       	push	r28
    3f54:	df 93       	push	r29
    3f56:	bc 01       	movw	r22, r24
    3f58:	82 30       	cpi	r24, 0x02	; 2
    3f5a:	91 05       	cpc	r25, r1
    3f5c:	10 f4       	brcc	.+4      	; 0x3f62 <malloc+0x10>
    3f5e:	62 e0       	ldi	r22, 0x02	; 2
    3f60:	70 e0       	ldi	r23, 0x00	; 0
    3f62:	a0 91 68 03 	lds	r26, 0x0368
    3f66:	b0 91 69 03 	lds	r27, 0x0369
    3f6a:	ed 01       	movw	r28, r26
    3f6c:	e0 e0       	ldi	r30, 0x00	; 0
    3f6e:	f0 e0       	ldi	r31, 0x00	; 0
    3f70:	40 e0       	ldi	r20, 0x00	; 0
    3f72:	50 e0       	ldi	r21, 0x00	; 0
    3f74:	21 c0       	rjmp	.+66     	; 0x3fb8 <malloc+0x66>
    3f76:	88 81       	ld	r24, Y
    3f78:	99 81       	ldd	r25, Y+1	; 0x01
    3f7a:	86 17       	cp	r24, r22
    3f7c:	97 07       	cpc	r25, r23
    3f7e:	69 f4       	brne	.+26     	; 0x3f9a <malloc+0x48>
    3f80:	8a 81       	ldd	r24, Y+2	; 0x02
    3f82:	9b 81       	ldd	r25, Y+3	; 0x03
    3f84:	30 97       	sbiw	r30, 0x00	; 0
    3f86:	19 f0       	breq	.+6      	; 0x3f8e <malloc+0x3c>
    3f88:	93 83       	std	Z+3, r25	; 0x03
    3f8a:	82 83       	std	Z+2, r24	; 0x02
    3f8c:	04 c0       	rjmp	.+8      	; 0x3f96 <malloc+0x44>
    3f8e:	90 93 69 03 	sts	0x0369, r25
    3f92:	80 93 68 03 	sts	0x0368, r24
    3f96:	fe 01       	movw	r30, r28
    3f98:	34 c0       	rjmp	.+104    	; 0x4002 <malloc+0xb0>
    3f9a:	68 17       	cp	r22, r24
    3f9c:	79 07       	cpc	r23, r25
    3f9e:	38 f4       	brcc	.+14     	; 0x3fae <malloc+0x5c>
    3fa0:	41 15       	cp	r20, r1
    3fa2:	51 05       	cpc	r21, r1
    3fa4:	19 f0       	breq	.+6      	; 0x3fac <malloc+0x5a>
    3fa6:	84 17       	cp	r24, r20
    3fa8:	95 07       	cpc	r25, r21
    3faa:	08 f4       	brcc	.+2      	; 0x3fae <malloc+0x5c>
    3fac:	ac 01       	movw	r20, r24
    3fae:	fe 01       	movw	r30, r28
    3fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    3fb4:	9c 01       	movw	r18, r24
    3fb6:	e9 01       	movw	r28, r18
    3fb8:	20 97       	sbiw	r28, 0x00	; 0
    3fba:	e9 f6       	brne	.-70     	; 0x3f76 <malloc+0x24>
    3fbc:	41 15       	cp	r20, r1
    3fbe:	51 05       	cpc	r21, r1
    3fc0:	a9 f1       	breq	.+106    	; 0x402c <malloc+0xda>
    3fc2:	ca 01       	movw	r24, r20
    3fc4:	86 1b       	sub	r24, r22
    3fc6:	97 0b       	sbc	r25, r23
    3fc8:	04 97       	sbiw	r24, 0x04	; 4
    3fca:	08 f4       	brcc	.+2      	; 0x3fce <malloc+0x7c>
    3fcc:	ba 01       	movw	r22, r20
    3fce:	e0 e0       	ldi	r30, 0x00	; 0
    3fd0:	f0 e0       	ldi	r31, 0x00	; 0
    3fd2:	2a c0       	rjmp	.+84     	; 0x4028 <malloc+0xd6>
    3fd4:	8d 91       	ld	r24, X+
    3fd6:	9c 91       	ld	r25, X
    3fd8:	11 97       	sbiw	r26, 0x01	; 1
    3fda:	84 17       	cp	r24, r20
    3fdc:	95 07       	cpc	r25, r21
    3fde:	f9 f4       	brne	.+62     	; 0x401e <malloc+0xcc>
    3fe0:	64 17       	cp	r22, r20
    3fe2:	75 07       	cpc	r23, r21
    3fe4:	81 f4       	brne	.+32     	; 0x4006 <malloc+0xb4>
    3fe6:	12 96       	adiw	r26, 0x02	; 2
    3fe8:	8d 91       	ld	r24, X+
    3fea:	9c 91       	ld	r25, X
    3fec:	13 97       	sbiw	r26, 0x03	; 3
    3fee:	30 97       	sbiw	r30, 0x00	; 0
    3ff0:	19 f0       	breq	.+6      	; 0x3ff8 <malloc+0xa6>
    3ff2:	93 83       	std	Z+3, r25	; 0x03
    3ff4:	82 83       	std	Z+2, r24	; 0x02
    3ff6:	04 c0       	rjmp	.+8      	; 0x4000 <malloc+0xae>
    3ff8:	90 93 69 03 	sts	0x0369, r25
    3ffc:	80 93 68 03 	sts	0x0368, r24
    4000:	fd 01       	movw	r30, r26
    4002:	32 96       	adiw	r30, 0x02	; 2
    4004:	4f c0       	rjmp	.+158    	; 0x40a4 <malloc+0x152>
    4006:	ca 01       	movw	r24, r20
    4008:	86 1b       	sub	r24, r22
    400a:	97 0b       	sbc	r25, r23
    400c:	fd 01       	movw	r30, r26
    400e:	e8 0f       	add	r30, r24
    4010:	f9 1f       	adc	r31, r25
    4012:	61 93       	st	Z+, r22
    4014:	71 93       	st	Z+, r23
    4016:	02 97       	sbiw	r24, 0x02	; 2
    4018:	8d 93       	st	X+, r24
    401a:	9c 93       	st	X, r25
    401c:	43 c0       	rjmp	.+134    	; 0x40a4 <malloc+0x152>
    401e:	fd 01       	movw	r30, r26
    4020:	82 81       	ldd	r24, Z+2	; 0x02
    4022:	93 81       	ldd	r25, Z+3	; 0x03
    4024:	9c 01       	movw	r18, r24
    4026:	d9 01       	movw	r26, r18
    4028:	10 97       	sbiw	r26, 0x00	; 0
    402a:	a1 f6       	brne	.-88     	; 0x3fd4 <malloc+0x82>
    402c:	80 91 66 03 	lds	r24, 0x0366
    4030:	90 91 67 03 	lds	r25, 0x0367
    4034:	89 2b       	or	r24, r25
    4036:	41 f4       	brne	.+16     	; 0x4048 <malloc+0xf6>
    4038:	80 91 47 03 	lds	r24, 0x0347
    403c:	90 91 48 03 	lds	r25, 0x0348
    4040:	90 93 67 03 	sts	0x0367, r25
    4044:	80 93 66 03 	sts	0x0366, r24
    4048:	40 91 49 03 	lds	r20, 0x0349
    404c:	50 91 4a 03 	lds	r21, 0x034A
    4050:	41 15       	cp	r20, r1
    4052:	51 05       	cpc	r21, r1
    4054:	41 f4       	brne	.+16     	; 0x4066 <malloc+0x114>
    4056:	4d b7       	in	r20, 0x3d	; 61
    4058:	5e b7       	in	r21, 0x3e	; 62
    405a:	80 91 45 03 	lds	r24, 0x0345
    405e:	90 91 46 03 	lds	r25, 0x0346
    4062:	48 1b       	sub	r20, r24
    4064:	59 0b       	sbc	r21, r25
    4066:	20 91 66 03 	lds	r18, 0x0366
    406a:	30 91 67 03 	lds	r19, 0x0367
    406e:	24 17       	cp	r18, r20
    4070:	35 07       	cpc	r19, r21
    4072:	b0 f4       	brcc	.+44     	; 0x40a0 <malloc+0x14e>
    4074:	ca 01       	movw	r24, r20
    4076:	82 1b       	sub	r24, r18
    4078:	93 0b       	sbc	r25, r19
    407a:	86 17       	cp	r24, r22
    407c:	97 07       	cpc	r25, r23
    407e:	80 f0       	brcs	.+32     	; 0x40a0 <malloc+0x14e>
    4080:	ab 01       	movw	r20, r22
    4082:	4e 5f       	subi	r20, 0xFE	; 254
    4084:	5f 4f       	sbci	r21, 0xFF	; 255
    4086:	84 17       	cp	r24, r20
    4088:	95 07       	cpc	r25, r21
    408a:	50 f0       	brcs	.+20     	; 0x40a0 <malloc+0x14e>
    408c:	42 0f       	add	r20, r18
    408e:	53 1f       	adc	r21, r19
    4090:	50 93 67 03 	sts	0x0367, r21
    4094:	40 93 66 03 	sts	0x0366, r20
    4098:	f9 01       	movw	r30, r18
    409a:	61 93       	st	Z+, r22
    409c:	71 93       	st	Z+, r23
    409e:	02 c0       	rjmp	.+4      	; 0x40a4 <malloc+0x152>
    40a0:	e0 e0       	ldi	r30, 0x00	; 0
    40a2:	f0 e0       	ldi	r31, 0x00	; 0
    40a4:	cf 01       	movw	r24, r30
    40a6:	df 91       	pop	r29
    40a8:	cf 91       	pop	r28
    40aa:	08 95       	ret

000040ac <free>:
    40ac:	cf 93       	push	r28
    40ae:	df 93       	push	r29
    40b0:	00 97       	sbiw	r24, 0x00	; 0
    40b2:	09 f4       	brne	.+2      	; 0x40b6 <free+0xa>
    40b4:	50 c0       	rjmp	.+160    	; 0x4156 <__stack+0x57>
    40b6:	ec 01       	movw	r28, r24
    40b8:	22 97       	sbiw	r28, 0x02	; 2
    40ba:	1b 82       	std	Y+3, r1	; 0x03
    40bc:	1a 82       	std	Y+2, r1	; 0x02
    40be:	a0 91 68 03 	lds	r26, 0x0368
    40c2:	b0 91 69 03 	lds	r27, 0x0369
    40c6:	10 97       	sbiw	r26, 0x00	; 0
    40c8:	09 f1       	breq	.+66     	; 0x410c <__stack+0xd>
    40ca:	40 e0       	ldi	r20, 0x00	; 0
    40cc:	50 e0       	ldi	r21, 0x00	; 0
    40ce:	ac 17       	cp	r26, r28
    40d0:	bd 07       	cpc	r27, r29
    40d2:	08 f1       	brcs	.+66     	; 0x4116 <__stack+0x17>
    40d4:	bb 83       	std	Y+3, r27	; 0x03
    40d6:	aa 83       	std	Y+2, r26	; 0x02
    40d8:	fe 01       	movw	r30, r28
    40da:	21 91       	ld	r18, Z+
    40dc:	31 91       	ld	r19, Z+
    40de:	e2 0f       	add	r30, r18
    40e0:	f3 1f       	adc	r31, r19
    40e2:	ae 17       	cp	r26, r30
    40e4:	bf 07       	cpc	r27, r31
    40e6:	79 f4       	brne	.+30     	; 0x4106 <__stack+0x7>
    40e8:	8d 91       	ld	r24, X+
    40ea:	9c 91       	ld	r25, X
    40ec:	11 97       	sbiw	r26, 0x01	; 1
    40ee:	28 0f       	add	r18, r24
    40f0:	39 1f       	adc	r19, r25
    40f2:	2e 5f       	subi	r18, 0xFE	; 254
    40f4:	3f 4f       	sbci	r19, 0xFF	; 255
    40f6:	39 83       	std	Y+1, r19	; 0x01
    40f8:	28 83       	st	Y, r18
    40fa:	12 96       	adiw	r26, 0x02	; 2
    40fc:	8d 91       	ld	r24, X+
    40fe:	9c 91       	ld	r25, X
    4100:	13 97       	sbiw	r26, 0x03	; 3
    4102:	9b 83       	std	Y+3, r25	; 0x03
    4104:	8a 83       	std	Y+2, r24	; 0x02
    4106:	41 15       	cp	r20, r1
    4108:	51 05       	cpc	r21, r1
    410a:	71 f4       	brne	.+28     	; 0x4128 <__stack+0x29>
    410c:	d0 93 69 03 	sts	0x0369, r29
    4110:	c0 93 68 03 	sts	0x0368, r28
    4114:	20 c0       	rjmp	.+64     	; 0x4156 <__stack+0x57>
    4116:	12 96       	adiw	r26, 0x02	; 2
    4118:	8d 91       	ld	r24, X+
    411a:	9c 91       	ld	r25, X
    411c:	13 97       	sbiw	r26, 0x03	; 3
    411e:	ad 01       	movw	r20, r26
    4120:	00 97       	sbiw	r24, 0x00	; 0
    4122:	11 f0       	breq	.+4      	; 0x4128 <__stack+0x29>
    4124:	dc 01       	movw	r26, r24
    4126:	d3 cf       	rjmp	.-90     	; 0x40ce <free+0x22>
    4128:	fa 01       	movw	r30, r20
    412a:	d3 83       	std	Z+3, r29	; 0x03
    412c:	c2 83       	std	Z+2, r28	; 0x02
    412e:	21 91       	ld	r18, Z+
    4130:	31 91       	ld	r19, Z+
    4132:	e2 0f       	add	r30, r18
    4134:	f3 1f       	adc	r31, r19
    4136:	ce 17       	cp	r28, r30
    4138:	df 07       	cpc	r29, r31
    413a:	69 f4       	brne	.+26     	; 0x4156 <__stack+0x57>
    413c:	88 81       	ld	r24, Y
    413e:	99 81       	ldd	r25, Y+1	; 0x01
    4140:	28 0f       	add	r18, r24
    4142:	39 1f       	adc	r19, r25
    4144:	2e 5f       	subi	r18, 0xFE	; 254
    4146:	3f 4f       	sbci	r19, 0xFF	; 255
    4148:	fa 01       	movw	r30, r20
    414a:	31 83       	std	Z+1, r19	; 0x01
    414c:	20 83       	st	Z, r18
    414e:	8a 81       	ldd	r24, Y+2	; 0x02
    4150:	9b 81       	ldd	r25, Y+3	; 0x03
    4152:	93 83       	std	Z+3, r25	; 0x03
    4154:	82 83       	std	Z+2, r24	; 0x02
    4156:	df 91       	pop	r29
    4158:	cf 91       	pop	r28
    415a:	08 95       	ret

0000415c <fdevopen>:
    415c:	0f 93       	push	r16
    415e:	1f 93       	push	r17
    4160:	cf 93       	push	r28
    4162:	df 93       	push	r29
    4164:	8c 01       	movw	r16, r24
    4166:	eb 01       	movw	r28, r22
    4168:	00 97       	sbiw	r24, 0x00	; 0
    416a:	31 f4       	brne	.+12     	; 0x4178 <fdevopen+0x1c>
    416c:	61 15       	cp	r22, r1
    416e:	71 05       	cpc	r23, r1
    4170:	19 f4       	brne	.+6      	; 0x4178 <fdevopen+0x1c>
    4172:	20 e0       	ldi	r18, 0x00	; 0
    4174:	30 e0       	ldi	r19, 0x00	; 0
    4176:	38 c0       	rjmp	.+112    	; 0x41e8 <fdevopen+0x8c>
    4178:	81 e0       	ldi	r24, 0x01	; 1
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	6e e0       	ldi	r22, 0x0E	; 14
    417e:	70 e0       	ldi	r23, 0x00	; 0
    4180:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <calloc>
    4184:	fc 01       	movw	r30, r24
    4186:	9c 01       	movw	r18, r24
    4188:	00 97       	sbiw	r24, 0x00	; 0
    418a:	71 f1       	breq	.+92     	; 0x41e8 <fdevopen+0x8c>
    418c:	80 e8       	ldi	r24, 0x80	; 128
    418e:	83 83       	std	Z+3, r24	; 0x03
    4190:	20 97       	sbiw	r28, 0x00	; 0
    4192:	71 f0       	breq	.+28     	; 0x41b0 <fdevopen+0x54>
    4194:	d3 87       	std	Z+11, r29	; 0x0b
    4196:	c2 87       	std	Z+10, r28	; 0x0a
    4198:	81 e8       	ldi	r24, 0x81	; 129
    419a:	83 83       	std	Z+3, r24	; 0x03
    419c:	80 91 6a 03 	lds	r24, 0x036A
    41a0:	90 91 6b 03 	lds	r25, 0x036B
    41a4:	89 2b       	or	r24, r25
    41a6:	21 f4       	brne	.+8      	; 0x41b0 <fdevopen+0x54>
    41a8:	f0 93 6b 03 	sts	0x036B, r31
    41ac:	e0 93 6a 03 	sts	0x036A, r30
    41b0:	01 15       	cp	r16, r1
    41b2:	11 05       	cpc	r17, r1
    41b4:	c9 f0       	breq	.+50     	; 0x41e8 <fdevopen+0x8c>
    41b6:	11 87       	std	Z+9, r17	; 0x09
    41b8:	00 87       	std	Z+8, r16	; 0x08
    41ba:	83 81       	ldd	r24, Z+3	; 0x03
    41bc:	82 60       	ori	r24, 0x02	; 2
    41be:	83 83       	std	Z+3, r24	; 0x03
    41c0:	80 91 6c 03 	lds	r24, 0x036C
    41c4:	90 91 6d 03 	lds	r25, 0x036D
    41c8:	89 2b       	or	r24, r25
    41ca:	71 f4       	brne	.+28     	; 0x41e8 <fdevopen+0x8c>
    41cc:	f0 93 6d 03 	sts	0x036D, r31
    41d0:	e0 93 6c 03 	sts	0x036C, r30
    41d4:	80 91 6e 03 	lds	r24, 0x036E
    41d8:	90 91 6f 03 	lds	r25, 0x036F
    41dc:	89 2b       	or	r24, r25
    41de:	21 f4       	brne	.+8      	; 0x41e8 <fdevopen+0x8c>
    41e0:	f0 93 6f 03 	sts	0x036F, r31
    41e4:	e0 93 6e 03 	sts	0x036E, r30
    41e8:	c9 01       	movw	r24, r18
    41ea:	df 91       	pop	r29
    41ec:	cf 91       	pop	r28
    41ee:	1f 91       	pop	r17
    41f0:	0f 91       	pop	r16
    41f2:	08 95       	ret

000041f4 <calloc>:
    41f4:	0f 93       	push	r16
    41f6:	1f 93       	push	r17
    41f8:	cf 93       	push	r28
    41fa:	df 93       	push	r29
    41fc:	68 9f       	mul	r22, r24
    41fe:	80 01       	movw	r16, r0
    4200:	69 9f       	mul	r22, r25
    4202:	10 0d       	add	r17, r0
    4204:	78 9f       	mul	r23, r24
    4206:	10 0d       	add	r17, r0
    4208:	11 24       	eor	r1, r1
    420a:	c8 01       	movw	r24, r16
    420c:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <malloc>
    4210:	ec 01       	movw	r28, r24
    4212:	00 97       	sbiw	r24, 0x00	; 0
    4214:	29 f0       	breq	.+10     	; 0x4220 <calloc+0x2c>
    4216:	60 e0       	ldi	r22, 0x00	; 0
    4218:	70 e0       	ldi	r23, 0x00	; 0
    421a:	a8 01       	movw	r20, r16
    421c:	0e 94 16 21 	call	0x422c	; 0x422c <memset>
    4220:	ce 01       	movw	r24, r28
    4222:	df 91       	pop	r29
    4224:	cf 91       	pop	r28
    4226:	1f 91       	pop	r17
    4228:	0f 91       	pop	r16
    422a:	08 95       	ret

0000422c <memset>:
    422c:	dc 01       	movw	r26, r24
    422e:	01 c0       	rjmp	.+2      	; 0x4232 <memset+0x6>
    4230:	6d 93       	st	X+, r22
    4232:	41 50       	subi	r20, 0x01	; 1
    4234:	50 40       	sbci	r21, 0x00	; 0
    4236:	e0 f7       	brcc	.-8      	; 0x4230 <memset+0x4>
    4238:	08 95       	ret

0000423a <_exit>:
    423a:	f8 94       	cli

0000423c <__stop_program>:
    423c:	ff cf       	rjmp	.-2      	; 0x423c <__stop_program>
