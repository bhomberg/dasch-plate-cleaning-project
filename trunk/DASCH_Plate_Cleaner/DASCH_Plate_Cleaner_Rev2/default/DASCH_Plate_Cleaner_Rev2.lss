
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c6  00800100  00003210  000032a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003210  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  008003c6  008003c6  0000356a  2**0
                  ALLOC
  3 .stab         00002820  00000000  00000000  0000356c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000025b6  00000000  00000000  00005d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00008342  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003ba  00000000  00000000  00008382  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000011e5  00000000  00000000  0000873c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002da  00000000  00000000  00009921  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001857  00000000  00000000  00009bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b454  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ae0  00000000  00000000  0000b5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000012a9  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 ed 15 	jmp	0x2bda	; 0x2bda <__vector_11>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      8c:	4e 0a       	sbc	r4, r30
      8e:	59 0a       	sbc	r5, r25
      90:	69 0a       	sbc	r6, r25
      92:	76 0a       	sbc	r7, r22
      94:	84 0a       	sbc	r8, r20
      96:	91 0a       	sbc	r9, r17
      98:	9f 0a       	sbc	r9, r31
      9a:	ae 0a       	sbc	r10, r30
      9c:	bc 0a       	sbc	r11, r28
      9e:	c4 0a       	sbc	r12, r20
      a0:	ca 0a       	sbc	r12, r26
      a2:	d2 0a       	sbc	r13, r18
      a4:	d6 0a       	sbc	r13, r22
      a6:	de 0a       	sbc	r13, r30
      a8:	e2 0a       	sbc	r14, r18
      aa:	ea 0a       	sbc	r14, r26
      ac:	ee 0a       	sbc	r14, r30
      ae:	f7 0a       	sbc	r15, r23
      b0:	fb 0a       	sbc	r15, r27
      b2:	03 0b       	sbc	r16, r19
      b4:	06 0b       	sbc	r16, r22
      b6:	0f 0b       	sbc	r16, r31
      b8:	13 0b       	sbc	r17, r19
      ba:	26 0b       	sbc	r18, r22
      bc:	1d 0b       	sbc	r17, r29
      be:	2a 0b       	sbc	r18, r26
      c0:	2e 0b       	sbc	r18, r30
      c2:	36 0b       	sbc	r19, r22
      c4:	39 0b       	sbc	r19, r25
      c6:	42 0b       	sbc	r20, r18
      c8:	46 0b       	sbc	r20, r22
      ca:	4e 0b       	sbc	r20, r30
      cc:	54 0b       	sbc	r21, r20
      ce:	5c 0b       	sbc	r21, r28
      d0:	66 0b       	sbc	r22, r22
      d2:	79 0b       	sbc	r23, r25
      d4:	83 0b       	sbc	r24, r19
      d6:	96 0b       	sbc	r25, r22
      d8:	9e 0b       	sbc	r25, r30
      da:	b1 0b       	sbc	r27, r17
      dc:	b9 0b       	sbc	r27, r25
      de:	cc 0b       	sbc	r28, r28
      e0:	d6 0b       	sbc	r29, r22
      e2:	e1 0b       	sbc	r30, r17

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d0 e4       	ldi	r29, 0x40	; 64
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	13 e0       	ldi	r17, 0x03	; 3
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b1 e0       	ldi	r27, 0x01	; 1
      f6:	e0 e1       	ldi	r30, 0x10	; 16
      f8:	f2 e3       	ldi	r31, 0x32	; 50
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a6 3c       	cpi	r26, 0xC6	; 198
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	13 e0       	ldi	r17, 0x03	; 3
     10c:	a6 ec       	ldi	r26, 0xC6	; 198
     10e:	b3 e0       	ldi	r27, 0x03	; 3
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	ae 3e       	cpi	r26, 0xEE	; 238
     116:	b1 07       	cpc	r27, r17
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <main>
     11e:	0c 94 06 19 	jmp	0x320c	; 0x320c <_exit>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     126:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     12a:	8c e0       	ldi	r24, 0x0C	; 12
     12c:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
     130:	08 95       	ret

00000132 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
     132:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     134:	84 ea       	ldi	r24, 0xA4	; 164
     136:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     13a:	80 91 bc 00 	lds	r24, 0x00BC
     13e:	87 ff       	sbrs	r24, 7
     140:	fc cf       	rjmp	.-8      	; 0x13a <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     142:	80 91 b9 00 	lds	r24, 0x00B9
     146:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     148:	88 30       	cpi	r24, 0x08	; 8
     14a:	21 f0       	breq	.+8      	; 0x154 <i2c_start+0x22>
     14c:	80 31       	cpi	r24, 0x10	; 16
     14e:	11 f0       	breq	.+4      	; 0x154 <i2c_start+0x22>
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	08 95       	ret

	// send device address
	TWDR = address;
     154:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     158:	84 e8       	ldi	r24, 0x84	; 132
     15a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     15e:	80 91 bc 00 	lds	r24, 0x00BC
     162:	87 ff       	sbrs	r24, 7
     164:	fc cf       	rjmp	.-8      	; 0x15e <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     166:	90 91 b9 00 	lds	r25, 0x00B9
     16a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     16c:	98 31       	cpi	r25, 0x18	; 24
     16e:	11 f4       	brne	.+4      	; 0x174 <i2c_start+0x42>
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	08 95       	ret
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 34       	cpi	r25, 0x40	; 64
     178:	09 f0       	breq	.+2      	; 0x17c <i2c_start+0x4a>
     17a:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
     17c:	08 95       	ret

0000017e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     17e:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     180:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     182:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     184:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     186:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     18a:	80 91 bc 00 	lds	r24, 0x00BC
     18e:	87 ff       	sbrs	r24, 7
     190:	fc cf       	rjmp	.-8      	; 0x18a <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     192:	80 91 b9 00 	lds	r24, 0x00B9
     196:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     198:	88 30       	cpi	r24, 0x08	; 8
     19a:	11 f0       	breq	.+4      	; 0x1a0 <i2c_start_wait+0x22>
     19c:	80 31       	cpi	r24, 0x10	; 16
     19e:	99 f7       	brne	.-26     	; 0x186 <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
     1a0:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
     1a4:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     1a8:	80 91 bc 00 	lds	r24, 0x00BC
     1ac:	87 ff       	sbrs	r24, 7
     1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     1b0:	80 91 b9 00 	lds	r24, 0x00B9
     1b4:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     1b6:	80 32       	cpi	r24, 0x20	; 32
     1b8:	11 f0       	breq	.+4      	; 0x1be <i2c_start_wait+0x40>
     1ba:	88 35       	cpi	r24, 0x58	; 88
     1bc:	39 f4       	brne	.+14     	; 0x1cc <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1be:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     1c2:	80 91 bc 00 	lds	r24, 0x00BC
     1c6:	84 fd       	sbrc	r24, 4
     1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <i2c_start_wait+0x44>
     1ca:	dd cf       	rjmp	.-70     	; 0x186 <i2c_start_wait+0x8>
     1cc:	08 95       	ret

000001ce <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     1ce:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>

}/* i2c_rep_start */
     1d2:	08 95       	ret

000001d4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1d4:	84 e9       	ldi	r24, 0x94	; 148
     1d6:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     1da:	80 91 bc 00 	lds	r24, 0x00BC
     1de:	84 fd       	sbrc	r24, 4
     1e0:	fc cf       	rjmp	.-8      	; 0x1da <i2c_stop+0x6>

}/* i2c_stop */
     1e2:	08 95       	ret

000001e4 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     1e4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     1e8:	84 e8       	ldi	r24, 0x84	; 132
     1ea:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     1ee:	80 91 bc 00 	lds	r24, 0x00BC
     1f2:	87 ff       	sbrs	r24, 7
     1f4:	fc cf       	rjmp	.-8      	; 0x1ee <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     1f6:	80 91 b9 00 	lds	r24, 0x00B9
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	88 7f       	andi	r24, 0xF8	; 248
     1fe:	88 32       	cpi	r24, 0x28	; 40
     200:	09 f0       	breq	.+2      	; 0x204 <i2c_write+0x20>
     202:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     204:	89 2f       	mov	r24, r25
     206:	08 95       	ret

00000208 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     208:	84 ec       	ldi	r24, 0xC4	; 196
     20a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     20e:	80 91 bc 00 	lds	r24, 0x00BC
     212:	87 ff       	sbrs	r24, 7
     214:	fc cf       	rjmp	.-8      	; 0x20e <i2c_readAck+0x6>

    return TWDR;
     216:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
     21a:	08 95       	ret

0000021c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     21c:	84 e8       	ldi	r24, 0x84	; 132
     21e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     222:	80 91 bc 00 	lds	r24, 0x00BC
     226:	87 ff       	sbrs	r24, 7
     228:	fc cf       	rjmp	.-8      	; 0x222 <i2c_readNak+0x6>
	
    return TWDR;
     22a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     22e:	08 95       	ret

00000230 <is_digital_input_high>:

// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
// the pin.
static inline unsigned char is_digital_input_high(unsigned char pin)
{
     230:	48 2f       	mov	r20, r24
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     232:	88 30       	cpi	r24, 0x08	; 8
     234:	58 f4       	brcc	.+22     	; 0x24c <is_digital_input_high+0x1c>
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	02 c0       	rjmp	.+4      	; 0x240 <is_digital_input_high+0x10>
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	4a 95       	dec	r20
     242:	e2 f7       	brpl	.-8      	; 0x23c <is_digital_input_high+0xc>
     244:	98 2f       	mov	r25, r24
     246:	e9 e2       	ldi	r30, 0x29	; 41
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	36 c0       	rjmp	.+108    	; 0x2b8 <is_digital_input_high+0x88>
	}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     24c:	80 31       	cpi	r24, 0x10	; 16
     24e:	78 f4       	brcc	.+30     	; 0x26e <is_digital_input_high+0x3e>
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	28 50       	subi	r18, 0x08	; 8
     256:	30 40       	sbci	r19, 0x00	; 0
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	02 c0       	rjmp	.+4      	; 0x262 <is_digital_input_high+0x32>
     25e:	88 0f       	add	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	2a 95       	dec	r18
     264:	e2 f7       	brpl	.-8      	; 0x25e <is_digital_input_high+0x2e>
     266:	98 2f       	mov	r25, r24
     268:	e3 e2       	ldi	r30, 0x23	; 35
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	25 c0       	rjmp	.+74     	; 0x2b8 <is_digital_input_high+0x88>
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     26e:	88 31       	cpi	r24, 0x18	; 24
     270:	78 f4       	brcc	.+30     	; 0x290 <is_digital_input_high+0x60>
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
     272:	28 2f       	mov	r18, r24
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	20 51       	subi	r18, 0x10	; 16
     278:	30 40       	sbci	r19, 0x00	; 0
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	02 c0       	rjmp	.+4      	; 0x284 <is_digital_input_high+0x54>
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	2a 95       	dec	r18
     286:	e2 f7       	brpl	.-8      	; 0x280 <is_digital_input_high+0x50>
     288:	98 2f       	mov	r25, r24
     28a:	e6 e2       	ldi	r30, 0x26	; 38
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	14 c0       	rjmp	.+40     	; 0x2b8 <is_digital_input_high+0x88>
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     290:	80 32       	cpi	r24, 0x20	; 32
     292:	20 f0       	brcs	.+8      	; 0x29c <is_digital_input_high+0x6c>
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	e0 e0       	ldi	r30, 0x00	; 0
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	0e c0       	rjmp	.+28     	; 0x2b8 <is_digital_input_high+0x88>
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
		io->bitmask = 1 << (31 - pin);
     29c:	2f e1       	ldi	r18, 0x1F	; 31
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	28 1b       	sub	r18, r24
     2a2:	31 09       	sbc	r19, r1
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <is_digital_input_high+0x7e>
     2aa:	88 0f       	add	r24, r24
     2ac:	99 1f       	adc	r25, r25
     2ae:	2a 95       	dec	r18
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <is_digital_input_high+0x7a>
     2b2:	98 2f       	mov	r25, r24
     2b4:	e0 e2       	ldi	r30, 0x20	; 32
     2b6:	f0 e0       	ldi	r31, 0x00	; 0

// low-level method for reading the value of the PIN register for an pin or set of pins
// described by an IOStruct pointer.
static inline unsigned char get_digital_input_value(struct IOStruct* ioPin)
{
	return *(ioPin->pinRegister) & ioPin->bitmask;
     2b8:	80 81       	ld	r24, Z
static inline unsigned char is_digital_input_high(unsigned char pin)
{
	struct IOStruct registers;
	get_io_registers(&registers, pin);
	return get_digital_input_value(&registers);
}
     2ba:	89 23       	and	r24, r25
     2bc:	08 95       	ret

000002be <brush1_action>:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
	}
}

void brush1_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	f9 01       	movw	r30, r18
     2c4:	d8 01       	movw	r26, r16
	switch(state){
     2c6:	89 30       	cpi	r24, 0x09	; 9
     2c8:	91 05       	cpc	r25, r1
     2ca:	31 f1       	breq	.+76     	; 0x318 <brush1_action+0x5a>
     2cc:	8a 30       	cpi	r24, 0x0A	; 10
     2ce:	91 05       	cpc	r25, r1
     2d0:	5c f4       	brge	.+22     	; 0x2e8 <brush1_action+0x2a>
     2d2:	87 30       	cpi	r24, 0x07	; 7
     2d4:	91 05       	cpc	r25, r1
     2d6:	a9 f0       	breq	.+42     	; 0x302 <brush1_action+0x44>
     2d8:	88 30       	cpi	r24, 0x08	; 8
     2da:	91 05       	cpc	r25, r1
     2dc:	0c f0       	brlt	.+2      	; 0x2e0 <brush1_action+0x22>
     2de:	3f c0       	rjmp	.+126    	; 0x35e <brush1_action+0xa0>
     2e0:	06 97       	sbiw	r24, 0x06	; 6
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <brush1_action+0x28>
     2e4:	52 c0       	rjmp	.+164    	; 0x38a <brush1_action+0xcc>
     2e6:	2c c0       	rjmp	.+88     	; 0x340 <brush1_action+0x82>
     2e8:	8b 30       	cpi	r24, 0x0B	; 11
     2ea:	91 05       	cpc	r25, r1
     2ec:	49 f1       	breq	.+82     	; 0x340 <brush1_action+0x82>
     2ee:	8b 30       	cpi	r24, 0x0B	; 11
     2f0:	91 05       	cpc	r25, r1
     2f2:	ec f0       	brlt	.+58     	; 0x32e <brush1_action+0x70>
     2f4:	8c 30       	cpi	r24, 0x0C	; 12
     2f6:	91 05       	cpc	r25, r1
     2f8:	59 f1       	breq	.+86     	; 0x350 <brush1_action+0x92>
     2fa:	0d 97       	sbiw	r24, 0x0d	; 13
     2fc:	09 f0       	breq	.+2      	; 0x300 <brush1_action+0x42>
     2fe:	45 c0       	rjmp	.+138    	; 0x38a <brush1_action+0xcc>
     300:	39 c0       	rjmp	.+114    	; 0x374 <brush1_action+0xb6>
		case MOVEC1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B1SET:
			*pfixtureMotor = 0;
     302:	11 82       	std	Z+1, r1	; 0x01
     304:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     306:	80 91 df 03 	lds	r24, 0x03DF
     30a:	81 60       	ori	r24, 0x01	; 1
     30c:	80 93 df 03 	sts	0x03DF, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
     310:	80 91 e3 03 	lds	r24, 0x03E3
     314:	8f 77       	andi	r24, 0x7F	; 127
     316:	37 c0       	rjmp	.+110    	; 0x386 <brush1_action+0xc8>
			*pbrush1Motor = 1;
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
			break;
		case CLEAN1_1:
			*pbrush1Motor = 1;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	8d 93       	st	X+, r24
     31e:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     320:	91 83       	std	Z+1, r25	; 0x01
     322:	80 83       	st	Z, r24
     324:	80 91 e3 03 	lds	r24, 0x03E3
     328:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     32a:	8f 7e       	andi	r24, 0xEF	; 239
     32c:	2c c0       	rjmp	.+88     	; 0x386 <brush1_action+0xc8>
			break;
		case B1STOP1:
			*pfixtureMotor = 0;
     32e:	11 82       	std	Z+1, r1	; 0x01
     330:	10 82       	st	Z, r1
			*pbrush1Motor = 0;
     332:	1d 92       	st	X+, r1
     334:	1c 92       	st	X, r1
			u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     336:	80 91 e2 03 	lds	r24, 0x03E2
     33a:	8f 7b       	andi	r24, 0xBF	; 191
			u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     33c:	80 62       	ori	r24, 0x20	; 32
     33e:	17 c0       	rjmp	.+46     	; 0x36e <brush1_action+0xb0>
			break;
		case CLEAN1_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     340:	80 91 e3 03 	lds	r24, 0x03E3
     344:	80 61       	ori	r24, 0x10	; 16
     346:	80 93 e3 03 	sts	0x03E3, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	16 c0       	rjmp	.+44     	; 0x37c <brush1_action+0xbe>
			break;
		case B1START2:
			*pfixtureMotor = 0;
     350:	11 82       	std	Z+1, r1	; 0x01
     352:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
     354:	80 91 e3 03 	lds	r24, 0x03E3
     358:	8f 77       	andi	r24, 0x7F	; 127
     35a:	80 93 e3 03 	sts	0x03E3, r24
			*pbrush1Motor = 1;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	8d 93       	st	X+, r24
     364:	9c 93       	st	X, r25
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     366:	80 91 e2 03 	lds	r24, 0x03E2
     36a:	80 64       	ori	r24, 0x40	; 64
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     36c:	8f 7d       	andi	r24, 0xDF	; 223
     36e:	80 93 e2 03 	sts	0x03E2, r24
     372:	0b c0       	rjmp	.+22     	; 0x38a <brush1_action+0xcc>
			break;
		case CLEAN1_3:
			*pbrush1Motor = 1;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	8d 93       	st	X+, r24
     37a:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     37c:	91 83       	std	Z+1, r25	; 0x01
     37e:	80 83       	st	Z, r24
     380:	80 91 e3 03 	lds	r24, 0x03E3
     384:	80 62       	ori	r24, 0x20	; 32
     386:	80 93 e3 03 	sts	0x03E3, r24
			break;
	}
}
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	08 95       	ret

00000390 <brush2_action>:

void brush2_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     390:	ef 92       	push	r14
     392:	ff 92       	push	r15
     394:	f9 01       	movw	r30, r18
     396:	d7 01       	movw	r26, r14
	switch(state){
     398:	83 31       	cpi	r24, 0x13	; 19
     39a:	91 05       	cpc	r25, r1
     39c:	b9 f1       	breq	.+110    	; 0x40c <brush2_action+0x7c>
     39e:	84 31       	cpi	r24, 0x14	; 20
     3a0:	91 05       	cpc	r25, r1
     3a2:	9c f4       	brge	.+38     	; 0x3ca <brush2_action+0x3a>
     3a4:	80 31       	cpi	r24, 0x10	; 16
     3a6:	91 05       	cpc	r25, r1
     3a8:	09 f4       	brne	.+2      	; 0x3ac <brush2_action+0x1c>
     3aa:	3d c0       	rjmp	.+122    	; 0x426 <brush2_action+0x96>
     3ac:	81 31       	cpi	r24, 0x11	; 17
     3ae:	91 05       	cpc	r25, r1
     3b0:	24 f4       	brge	.+8      	; 0x3ba <brush2_action+0x2a>
     3b2:	0f 97       	sbiw	r24, 0x0f	; 15
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <brush2_action+0x28>
     3b6:	68 c0       	rjmp	.+208    	; 0x488 <brush2_action+0xf8>
     3b8:	15 c0       	rjmp	.+42     	; 0x3e4 <brush2_action+0x54>
     3ba:	81 31       	cpi	r24, 0x11	; 17
     3bc:	91 05       	cpc	r25, r1
     3be:	09 f4       	brne	.+2      	; 0x3c2 <brush2_action+0x32>
     3c0:	41 c0       	rjmp	.+130    	; 0x444 <brush2_action+0xb4>
     3c2:	42 97       	sbiw	r24, 0x12	; 18
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <brush2_action+0x38>
     3c6:	60 c0       	rjmp	.+192    	; 0x488 <brush2_action+0xf8>
     3c8:	14 c0       	rjmp	.+40     	; 0x3f2 <brush2_action+0x62>
     3ca:	85 31       	cpi	r24, 0x15	; 21
     3cc:	91 05       	cpc	r25, r1
     3ce:	d1 f1       	breq	.+116    	; 0x444 <brush2_action+0xb4>
     3d0:	85 31       	cpi	r24, 0x15	; 21
     3d2:	91 05       	cpc	r25, r1
     3d4:	0c f1       	brlt	.+66     	; 0x418 <brush2_action+0x88>
     3d6:	86 31       	cpi	r24, 0x16	; 22
     3d8:	91 05       	cpc	r25, r1
     3da:	c9 f1       	breq	.+114    	; 0x44e <brush2_action+0xbe>
     3dc:	47 97       	sbiw	r24, 0x17	; 23
     3de:	09 f0       	breq	.+2      	; 0x3e2 <brush2_action+0x52>
     3e0:	53 c0       	rjmp	.+166    	; 0x488 <brush2_action+0xf8>
     3e2:	49 c0       	rjmp	.+146    	; 0x476 <brush2_action+0xe6>
		case B2SET:
			*pfixtureMotor = 0;
     3e4:	11 82       	std	Z+1, r1	; 0x01
     3e6:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     3e8:	80 91 df 03 	lds	r24, 0x03DF
     3ec:	88 60       	ori	r24, 0x08	; 8
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     3ee:	8b 7f       	andi	r24, 0xFB	; 251
     3f0:	3f c0       	rjmp	.+126    	; 0x470 <brush2_action+0xe0>
		case CLEAN2_1:
			*pbrush2Motor = 1;
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP1:
			*pfixtureMotor = 0;
     3f2:	11 82       	std	Z+1, r1	; 0x01
     3f4:	10 82       	st	Z, r1
			*pbrush2Motor = 0;
     3f6:	1d 92       	st	X+, r1
     3f8:	1c 92       	st	X, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     3fa:	80 91 e0 03 	lds	r24, 0x03E0
     3fe:	8e 7f       	andi	r24, 0xFE	; 254
     400:	80 93 e0 03 	sts	0x03E0, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     404:	80 91 e2 03 	lds	r24, 0x03E2
     408:	80 68       	ori	r24, 0x80	; 128
     40a:	19 c0       	rjmp	.+50     	; 0x43e <brush2_action+0xae>
			break;
		case CLEAN2_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     40c:	80 91 e3 03 	lds	r24, 0x03E3
     410:	8f 7e       	andi	r24, 0xEF	; 239
     412:	80 93 e3 03 	sts	0x03E3, r24
     416:	2f c0       	rjmp	.+94     	; 0x476 <brush2_action+0xe6>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2START2:
			*pfixtureMotor = 0;
     418:	11 82       	std	Z+1, r1	; 0x01
     41a:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     41c:	80 91 df 03 	lds	r24, 0x03DF
     420:	8b 7f       	andi	r24, 0xFB	; 251
     422:	80 93 df 03 	sts	0x03DF, r24
			*pbrush2Motor = 1;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	8d 93       	st	X+, r24
     42c:	9c 93       	st	X, r25
			u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     42e:	80 91 e0 03 	lds	r24, 0x03E0
     432:	81 60       	ori	r24, 0x01	; 1
     434:	80 93 e0 03 	sts	0x03E0, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     438:	80 91 e2 03 	lds	r24, 0x03E2
     43c:	8f 77       	andi	r24, 0x7F	; 127
     43e:	80 93 e2 03 	sts	0x03E2, r24
     442:	22 c0       	rjmp	.+68     	; 0x488 <brush2_action+0xf8>
			break;
		case CLEAN2_3:
			*pbrush2Motor = 1;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	8d 93       	st	X+, r24
     44a:	9c 93       	st	X, r25
     44c:	16 c0       	rjmp	.+44     	; 0x47a <brush2_action+0xea>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP2:
			*pbrush2Motor = 0;
     44e:	1d 92       	st	X+, r1
     450:	1c 92       	st	X, r1
			*pfixtureMotor = 0;
     452:	11 82       	std	Z+1, r1	; 0x01
     454:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     456:	80 91 e0 03 	lds	r24, 0x03E0
     45a:	8e 7f       	andi	r24, 0xFE	; 254
     45c:	80 93 e0 03 	sts	0x03E0, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     460:	80 91 e2 03 	lds	r24, 0x03E2
     464:	80 68       	ori	r24, 0x80	; 128
     466:	80 93 e2 03 	sts	0x03E2, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     46a:	80 91 df 03 	lds	r24, 0x03DF
     46e:	87 7f       	andi	r24, 0xF7	; 247
     470:	80 93 df 03 	sts	0x03DF, r24
     474:	09 c0       	rjmp	.+18     	; 0x488 <brush2_action+0xf8>
			break;
		//*************************************************
		case MOVED1:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	91 83       	std	Z+1, r25	; 0x01
     47c:	80 83       	st	Z, r24
     47e:	80 91 e3 03 	lds	r24, 0x03E3
     482:	80 62       	ori	r24, 0x20	; 32
     484:	80 93 e3 03 	sts	0x03E3, r24
			break;
	}
}
     488:	ff 90       	pop	r15
     48a:	ef 90       	pop	r14
     48c:	08 95       	ret

0000048e <dry_action>:

void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	ea 01       	movw	r28, r20
     498:	f9 01       	movw	r30, r18
     49a:	d6 01       	movw	r26, r12
	switch(state){
     49c:	8d 31       	cpi	r24, 0x1D	; 29
     49e:	91 05       	cpc	r25, r1
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <dry_action+0x16>
     4a2:	57 c0       	rjmp	.+174    	; 0x552 <dry_action+0xc4>
     4a4:	8e 31       	cpi	r24, 0x1E	; 30
     4a6:	91 05       	cpc	r25, r1
     4a8:	a4 f4       	brge	.+40     	; 0x4d2 <dry_action+0x44>
     4aa:	8a 31       	cpi	r24, 0x1A	; 26
     4ac:	91 05       	cpc	r25, r1
     4ae:	69 f1       	breq	.+90     	; 0x50a <dry_action+0x7c>
     4b0:	8b 31       	cpi	r24, 0x1B	; 27
     4b2:	91 05       	cpc	r25, r1
     4b4:	3c f4       	brge	.+14     	; 0x4c4 <dry_action+0x36>
     4b6:	88 31       	cpi	r24, 0x18	; 24
     4b8:	91 05       	cpc	r25, r1
     4ba:	09 f1       	breq	.+66     	; 0x4fe <dry_action+0x70>
     4bc:	49 97       	sbiw	r24, 0x19	; 25
     4be:	09 f0       	breq	.+2      	; 0x4c2 <dry_action+0x34>
     4c0:	90 c0       	rjmp	.+288    	; 0x5e2 <dry_action+0x154>
     4c2:	68 c0       	rjmp	.+208    	; 0x594 <dry_action+0x106>
     4c4:	8b 31       	cpi	r24, 0x1B	; 27
     4c6:	91 05       	cpc	r25, r1
     4c8:	79 f1       	breq	.+94     	; 0x528 <dry_action+0x9a>
     4ca:	4c 97       	sbiw	r24, 0x1c	; 28
     4cc:	09 f0       	breq	.+2      	; 0x4d0 <dry_action+0x42>
     4ce:	89 c0       	rjmp	.+274    	; 0x5e2 <dry_action+0x154>
     4d0:	38 c0       	rjmp	.+112    	; 0x542 <dry_action+0xb4>
     4d2:	80 32       	cpi	r24, 0x20	; 32
     4d4:	91 05       	cpc	r25, r1
     4d6:	09 f4       	brne	.+2      	; 0x4da <dry_action+0x4c>
     4d8:	5d c0       	rjmp	.+186    	; 0x594 <dry_action+0x106>
     4da:	81 32       	cpi	r24, 0x21	; 33
     4dc:	91 05       	cpc	r25, r1
     4de:	3c f4       	brge	.+14     	; 0x4ee <dry_action+0x60>
     4e0:	8e 31       	cpi	r24, 0x1E	; 30
     4e2:	91 05       	cpc	r25, r1
     4e4:	d9 f1       	breq	.+118    	; 0x55c <dry_action+0xce>
     4e6:	4f 97       	sbiw	r24, 0x1f	; 31
     4e8:	09 f0       	breq	.+2      	; 0x4ec <dry_action+0x5e>
     4ea:	7b c0       	rjmp	.+246    	; 0x5e2 <dry_action+0x154>
     4ec:	4c c0       	rjmp	.+152    	; 0x586 <dry_action+0xf8>
     4ee:	81 32       	cpi	r24, 0x21	; 33
     4f0:	91 05       	cpc	r25, r1
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <dry_action+0x68>
     4f4:	5e c0       	rjmp	.+188    	; 0x5b2 <dry_action+0x124>
     4f6:	82 97       	sbiw	r24, 0x22	; 34
     4f8:	09 f0       	breq	.+2      	; 0x4fc <dry_action+0x6e>
     4fa:	73 c0       	rjmp	.+230    	; 0x5e2 <dry_action+0x154>
     4fc:	69 c0       	rjmp	.+210    	; 0x5d0 <dry_action+0x142>
		case D1START:
			*pfixtureMotor = 0;
     4fe:	11 82       	std	Z+1, r1	; 0x01
     500:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.airKnife = 0;
     502:	80 91 e0 03 	lds	r24, 0x03E0
     506:	87 7f       	andi	r24, 0xF7	; 247
     508:	0c c0       	rjmp	.+24     	; 0x522 <dry_action+0x94>
		case DRY1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case D1STOP:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	91 83       	std	Z+1, r25	; 0x01
     510:	80 83       	st	Z, r24
     512:	80 91 e3 03 	lds	r24, 0x03E3
     516:	80 62       	ori	r24, 0x20	; 32
     518:	80 93 e3 03 	sts	0x03E3, r24
			u_outputByte1.bits_in_outputByte1.airKnife = 1;
     51c:	80 91 e0 03 	lds	r24, 0x03E0
     520:	88 60       	ori	r24, 0x08	; 8
     522:	80 93 e0 03 	sts	0x03E0, r24
     526:	5d c0       	rjmp	.+186    	; 0x5e2 <dry_action+0x154>
			break;
		case D2START:
			*pfixtureMotor = 0;
     528:	11 82       	std	Z+1, r1	; 0x01
     52a:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
     52c:	80 91 df 03 	lds	r24, 0x03DF
     530:	80 64       	ori	r24, 0x40	; 64
			u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     532:	8f 7d       	andi	r24, 0xDF	; 223
     534:	80 93 df 03 	sts	0x03DF, r24
			*ppaperTowelMotor = 1;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	8d 93       	st	X+, r24
     53e:	9c 93       	st	X, r25
     540:	50 c0       	rjmp	.+160    	; 0x5e2 <dry_action+0x154>
			break;
		case D2RAISE:
			*ppaperTowelMotor = 1;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	8d 93       	st	X+, r24
     548:	9c 93       	st	X, r25
			u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     54a:	80 91 e0 03 	lds	r24, 0x03E0
     54e:	8d 7f       	andi	r24, 0xFD	; 253
     550:	e8 cf       	rjmp	.-48     	; 0x522 <dry_action+0x94>
			break;
		case DRY2:
			*ppaperTowelMotor = 1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	8d 93       	st	X+, r24
     558:	9c 93       	st	X, r25
     55a:	23 c0       	rjmp	.+70     	; 0x5a2 <dry_action+0x114>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case D2STOP:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	91 83       	std	Z+1, r25	; 0x01
     562:	80 83       	st	Z, r24
     564:	80 91 e3 03 	lds	r24, 0x03E3
     568:	80 62       	ori	r24, 0x20	; 32
     56a:	80 93 e3 03 	sts	0x03E3, r24
			*ppaperTowelMotor = 0;
     56e:	1d 92       	st	X+, r1
     570:	1c 92       	st	X, r1
				u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
     572:	80 91 df 03 	lds	r24, 0x03DF
     576:	8f 7b       	andi	r24, 0xBF	; 191
     578:	80 93 df 03 	sts	0x03DF, r24
			u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     57c:	80 91 e0 03 	lds	r24, 0x03E0
     580:	82 60       	ori	r24, 0x02	; 2
			u_outputByte1.bits_in_outputByte1.ptLower = 0;
     582:	8b 7f       	andi	r24, 0xFB	; 251
     584:	ce cf       	rjmp	.-100    	; 0x522 <dry_action+0x94>
			break;
		case RAISEL2:
			*pfixtureMotor = 0;
     586:	11 82       	std	Z+1, r1	; 0x01
     588:	10 82       	st	Z, r1
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     58a:	80 91 e2 03 	lds	r24, 0x03E2
     58e:	87 7f       	andi	r24, 0xF7	; 247
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     590:	80 61       	ori	r24, 0x10	; 16
     592:	1b c0       	rjmp	.+54     	; 0x5ca <dry_action+0x13c>
			break;
		case FIXH:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     594:	80 91 e3 03 	lds	r24, 0x03E3
     598:	8f 7e       	andi	r24, 0xEF	; 239
     59a:	80 93 e3 03 	sts	0x03E3, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	91 83       	std	Z+1, r25	; 0x01
     5a4:	80 83       	st	Z, r24
     5a6:	80 91 e3 03 	lds	r24, 0x03E3
     5aa:	80 62       	ori	r24, 0x20	; 32
     5ac:	80 93 e3 03 	sts	0x03E3, r24
     5b0:	18 c0       	rjmp	.+48     	; 0x5e2 <dry_action+0x154>
			break;
		case LOWERL3:
			*pfixtureMotor = 0;
     5b2:	11 82       	std	Z+1, r1	; 0x01
     5b4:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     5b6:	80 91 e3 03 	lds	r24, 0x03E3
     5ba:	8f 7d       	andi	r24, 0xDF	; 223
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     5bc:	84 60       	ori	r24, 0x04	; 4
     5be:	80 93 e3 03 	sts	0x03E3, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     5c2:	80 91 e2 03 	lds	r24, 0x03E2
     5c6:	88 60       	ori	r24, 0x08	; 8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     5c8:	8f 7e       	andi	r24, 0xEF	; 239
     5ca:	80 93 e2 03 	sts	0x03E2, r24
     5ce:	09 c0       	rjmp	.+18     	; 0x5e2 <dry_action+0x154>
			break;
		case UNLOAD:
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     5d0:	80 91 e3 03 	lds	r24, 0x03E3
     5d4:	8d 7f       	andi	r24, 0xFD	; 253
     5d6:	80 93 e3 03 	sts	0x03E3, r24
			*pplateLoadMotor = 1;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	99 83       	std	Y+1, r25	; 0x01
     5e0:	88 83       	st	Y, r24
			break;
	}
}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	df 90       	pop	r13
     5e8:	cf 90       	pop	r12
     5ea:	08 95       	ret

000005ec <button_debounce>:

bool button_debounce(int counter, int *pstateButton)
{
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	8c 01       	movw	r16, r24
     5f6:	eb 01       	movw	r28, r22
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && is_digital_input_high(IO_D0)){
     5f8:	88 81       	ld	r24, Y
     5fa:	99 81       	ldd	r25, Y+1	; 0x01
     5fc:	89 2b       	or	r24, r25
     5fe:	69 f4       	brne	.+26     	; 0x61a <button_debounce+0x2e>
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     606:	88 23       	and	r24, r24
     608:	41 f0       	breq	.+16     	; 0x61a <button_debounce+0x2e>
		counterRefPush = counter;
     60a:	10 93 c9 03 	sts	0x03C9, r17
     60e:	00 93 c8 03 	sts	0x03C8, r16
		*pstateButton = PRESSED;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	99 83       	std	Y+1, r25	; 0x01
     618:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     61a:	88 81       	ld	r24, Y
     61c:	99 81       	ldd	r25, Y+1	; 0x01
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	f9 f4       	brne	.+62     	; 0x660 <button_debounce+0x74>
		if(counter - counterRefPush > 15){
     622:	80 91 c8 03 	lds	r24, 0x03C8
     626:	90 91 c9 03 	lds	r25, 0x03C9
     62a:	98 01       	movw	r18, r16
     62c:	28 1b       	sub	r18, r24
     62e:	39 0b       	sbc	r19, r25
     630:	20 31       	cpi	r18, 0x10	; 16
     632:	31 05       	cpc	r19, r1
     634:	74 f0       	brlt	.+28     	; 0x652 <button_debounce+0x66>
			if(!is_digital_input_high(IO_D0)){
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     63c:	88 23       	and	r24, r24
     63e:	81 f4       	brne	.+32     	; 0x660 <button_debounce+0x74>
				counterRefRel = counter;
     640:	10 93 c7 03 	sts	0x03C7, r17
     644:	00 93 c6 03 	sts	0x03C6, r16
				*pstateButton = RELEASED;
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	99 83       	std	Y+1, r25	; 0x01
     64e:	88 83       	st	Y, r24
     650:	07 c0       	rjmp	.+14     	; 0x660 <button_debounce+0x74>
			}
		}
		else if(!is_digital_input_high(IO_D0)){
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     658:	88 23       	and	r24, r24
     65a:	11 f4       	brne	.+4      	; 0x660 <button_debounce+0x74>
			*pstateButton = NONE;
     65c:	19 82       	std	Y+1, r1	; 0x01
     65e:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     660:	88 81       	ld	r24, Y
     662:	99 81       	ldd	r25, Y+1	; 0x01
     664:	02 97       	sbiw	r24, 0x02	; 2
     666:	d9 f4       	brne	.+54     	; 0x69e <button_debounce+0xb2>
		if(is_digital_input_high(IO_D0)){
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     66e:	88 23       	and	r24, r24
     670:	49 f0       	breq	.+18     	; 0x684 <button_debounce+0x98>
			*pstateButton = PRESSED;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	99 83       	std	Y+1, r25	; 0x01
     678:	88 83       	st	Y, r24
			counterRefPush = counter;
     67a:	10 93 c9 03 	sts	0x03C9, r17
     67e:	00 93 c8 03 	sts	0x03C8, r16
     682:	0d c0       	rjmp	.+26     	; 0x69e <button_debounce+0xb2>
		}
		else if(counter - counterRefRel > 15){
     684:	80 91 c6 03 	lds	r24, 0x03C6
     688:	90 91 c7 03 	lds	r25, 0x03C7
     68c:	08 1b       	sub	r16, r24
     68e:	19 0b       	sbc	r17, r25
     690:	00 31       	cpi	r16, 0x10	; 16
     692:	11 05       	cpc	r17, r1
     694:	24 f0       	brlt	.+8      	; 0x69e <button_debounce+0xb2>
			*pstateButton = NONE;
     696:	19 82       	std	Y+1, r1	; 0x01
     698:	18 82       	st	Y, r1
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	01 c0       	rjmp	.+2      	; 0x6a0 <button_debounce+0xb4>
			return true;
     69e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	08 95       	ret

000006aa <init_trans>:

bool init_trans(int state, bool buttonTriggered, int counter, int counterRef){
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	dc 01       	movw	r26, r24
     6b0:	86 2f       	mov	r24, r22
     6b2:	fa 01       	movw	r30, r20
     6b4:	b9 01       	movw	r22, r18
	return((state == INIT && buttonTriggered)||
     6b6:	10 97       	sbiw	r26, 0x00	; 0
     6b8:	19 f4       	brne	.+6      	; 0x6c0 <init_trans+0x16>
     6ba:	88 23       	and	r24, r24
     6bc:	21 f1       	breq	.+72     	; 0x706 <init_trans+0x5c>
     6be:	45 c0       	rjmp	.+138    	; 0x74a <init_trans+0xa0>
     6c0:	a1 30       	cpi	r26, 0x01	; 1
     6c2:	b1 05       	cpc	r27, r1
     6c4:	b1 f4       	brne	.+44     	; 0x6f2 <init_trans+0x48>
     6c6:	42 1b       	sub	r20, r18
     6c8:	53 0b       	sbc	r21, r19
     6ca:	20 91 ab 03 	lds	r18, 0x03AB
     6ce:	30 91 ac 03 	lds	r19, 0x03AC
     6d2:	80 91 9d 03 	lds	r24, 0x039D
     6d6:	90 91 9e 03 	lds	r25, 0x039E
     6da:	ec 01       	movw	r28, r24
     6dc:	2c 9f       	mul	r18, r28
     6de:	c0 01       	movw	r24, r0
     6e0:	2d 9f       	mul	r18, r29
     6e2:	90 0d       	add	r25, r0
     6e4:	3c 9f       	mul	r19, r28
     6e6:	90 0d       	add	r25, r0
     6e8:	11 24       	eor	r1, r1
     6ea:	84 17       	cp	r24, r20
     6ec:	95 07       	cpc	r25, r21
     6ee:	cc f4       	brge	.+50     	; 0x722 <init_trans+0x78>
     6f0:	2c c0       	rjmp	.+88     	; 0x74a <init_trans+0xa0>
     6f2:	a2 30       	cpi	r26, 0x02	; 2
     6f4:	b1 05       	cpc	r27, r1
     6f6:	d1 f0       	breq	.+52     	; 0x72c <init_trans+0x82>
     6f8:	a3 30       	cpi	r26, 0x03	; 3
     6fa:	b1 05       	cpc	r27, r1
     6fc:	21 f4       	brne	.+8      	; 0x706 <init_trans+0x5c>
     6fe:	80 91 de 03 	lds	r24, 0x03DE
     702:	86 95       	lsr	r24
     704:	08 c0       	rjmp	.+16     	; 0x716 <init_trans+0x6c>
     706:	a4 30       	cpi	r26, 0x04	; 4
     708:	b1 05       	cpc	r27, r1
     70a:	59 f4       	brne	.+22     	; 0x722 <init_trans+0x78>
     70c:	80 91 de 03 	lds	r24, 0x03DE
     710:	86 95       	lsr	r24
     712:	86 95       	lsr	r24
     714:	86 95       	lsr	r24
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	89 27       	eor	r24, r25
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	81 70       	andi	r24, 0x01	; 1
     71e:	90 70       	andi	r25, 0x00	; 0
     720:	16 c0       	rjmp	.+44     	; 0x74e <init_trans+0xa4>
     722:	15 97       	sbiw	r26, 0x05	; 5
     724:	19 f0       	breq	.+6      	; 0x72c <init_trans+0x82>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	11 c0       	rjmp	.+34     	; 0x74e <init_trans+0xa4>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	e6 1b       	sub	r30, r22
     732:	f7 0b       	sbc	r31, r23
     734:	80 91 8d 03 	lds	r24, 0x038D
     738:	90 91 8e 03 	lds	r25, 0x038E
     73c:	8e 17       	cp	r24, r30
     73e:	9f 07       	cpc	r25, r31
     740:	14 f4       	brge	.+4      	; 0x746 <init_trans+0x9c>
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	c9 01       	movw	r24, r18
     748:	02 c0       	rjmp	.+4      	; 0x74e <init_trans+0xa4>
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	90 e0       	ldi	r25, 0x00	; 0
	(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/)||
	(state == RAISEL1 && counter - counterRef > pWait)||
	(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0)||
	(state == LOWERL2 && counter - counterRef > pWait));
}
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <firstB_trans>:

bool firstB_trans(int state, int counter, int counterRef){
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	fc 01       	movw	r30, r24
     75a:	da 01       	movw	r26, r20
	//Had references to counterRef14...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/)||
     75c:	86 30       	cpi	r24, 0x06	; 6
     75e:	91 05       	cpc	r25, r1
     760:	b9 f4       	brne	.+46     	; 0x790 <firstB_trans+0x3c>
     762:	ab 01       	movw	r20, r22
     764:	4a 1b       	sub	r20, r26
     766:	5b 0b       	sbc	r21, r27
     768:	20 91 af 03 	lds	r18, 0x03AF
     76c:	30 91 b0 03 	lds	r19, 0x03B0
     770:	80 91 9f 03 	lds	r24, 0x039F
     774:	90 91 a0 03 	lds	r25, 0x03A0
     778:	ec 01       	movw	r28, r24
     77a:	2c 9f       	mul	r18, r28
     77c:	c0 01       	movw	r24, r0
     77e:	2d 9f       	mul	r18, r29
     780:	90 0d       	add	r25, r0
     782:	3c 9f       	mul	r19, r28
     784:	90 0d       	add	r25, r0
     786:	11 24       	eor	r1, r1
     788:	84 17       	cp	r24, r20
     78a:	95 07       	cpc	r25, r21
     78c:	bc f5       	brge	.+110    	; 0x7fc <firstB_trans+0xa8>
     78e:	83 c0       	rjmp	.+262    	; 0x896 <firstB_trans+0x142>
     790:	87 30       	cpi	r24, 0x07	; 7
     792:	91 05       	cpc	r25, r1
     794:	59 f4       	brne	.+22     	; 0x7ac <firstB_trans+0x58>
     796:	9b 01       	movw	r18, r22
     798:	24 1b       	sub	r18, r20
     79a:	35 0b       	sbc	r19, r21
     79c:	80 91 8f 03 	lds	r24, 0x038F
     7a0:	90 91 90 03 	lds	r25, 0x0390
     7a4:	82 17       	cp	r24, r18
     7a6:	93 07       	cpc	r25, r19
     7a8:	64 f5       	brge	.+88     	; 0x802 <firstB_trans+0xae>
     7aa:	75 c0       	rjmp	.+234    	; 0x896 <firstB_trans+0x142>
     7ac:	88 30       	cpi	r24, 0x08	; 8
     7ae:	91 05       	cpc	r25, r1
     7b0:	59 f4       	brne	.+22     	; 0x7c8 <firstB_trans+0x74>
     7b2:	9b 01       	movw	r18, r22
     7b4:	24 1b       	sub	r18, r20
     7b6:	35 0b       	sbc	r19, r21
     7b8:	80 91 8d 03 	lds	r24, 0x038D
     7bc:	90 91 8e 03 	lds	r25, 0x038E
     7c0:	82 17       	cp	r24, r18
     7c2:	93 07       	cpc	r25, r19
     7c4:	b4 f5       	brge	.+108    	; 0x832 <firstB_trans+0xde>
     7c6:	67 c0       	rjmp	.+206    	; 0x896 <firstB_trans+0x142>
     7c8:	89 30       	cpi	r24, 0x09	; 9
     7ca:	91 05       	cpc	r25, r1
     7cc:	b9 f4       	brne	.+46     	; 0x7fc <firstB_trans+0xa8>
     7ce:	ab 01       	movw	r20, r22
     7d0:	4a 1b       	sub	r20, r26
     7d2:	5b 0b       	sbc	r21, r27
     7d4:	20 91 a7 03 	lds	r18, 0x03A7
     7d8:	30 91 a8 03 	lds	r19, 0x03A8
     7dc:	80 91 9f 03 	lds	r24, 0x039F
     7e0:	90 91 a0 03 	lds	r25, 0x03A0
     7e4:	ec 01       	movw	r28, r24
     7e6:	2c 9f       	mul	r18, r28
     7e8:	c0 01       	movw	r24, r0
     7ea:	2d 9f       	mul	r18, r29
     7ec:	90 0d       	add	r25, r0
     7ee:	3c 9f       	mul	r19, r28
     7f0:	90 0d       	add	r25, r0
     7f2:	11 24       	eor	r1, r1
     7f4:	84 17       	cp	r24, r20
     7f6:	95 07       	cpc	r25, r21
     7f8:	74 f5       	brge	.+92     	; 0x856 <firstB_trans+0x102>
     7fa:	4d c0       	rjmp	.+154    	; 0x896 <firstB_trans+0x142>
     7fc:	ea 30       	cpi	r30, 0x0A	; 10
     7fe:	f1 05       	cpc	r31, r1
     800:	d9 f0       	breq	.+54     	; 0x838 <firstB_trans+0xe4>
     802:	eb 30       	cpi	r30, 0x0B	; 11
     804:	f1 05       	cpc	r31, r1
     806:	a9 f4       	brne	.+42     	; 0x832 <firstB_trans+0xde>
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	6a 1b       	sub	r22, r26
     80e:	7b 0b       	sbc	r23, r27
     810:	80 91 a7 03 	lds	r24, 0x03A7
     814:	90 91 a8 03 	lds	r25, 0x03A8
     818:	20 91 9f 03 	lds	r18, 0x039F
     81c:	30 91 a0 03 	lds	r19, 0x03A0
     820:	fc 01       	movw	r30, r24
     822:	e2 9f       	mul	r30, r18
     824:	c0 01       	movw	r24, r0
     826:	e3 9f       	mul	r30, r19
     828:	90 0d       	add	r25, r0
     82a:	f2 9f       	mul	r31, r18
     82c:	90 0d       	add	r25, r0
     82e:	11 24       	eor	r1, r1
     830:	2b c0       	rjmp	.+86     	; 0x888 <firstB_trans+0x134>
     832:	ec 30       	cpi	r30, 0x0C	; 12
     834:	f1 05       	cpc	r31, r1
     836:	79 f4       	brne	.+30     	; 0x856 <firstB_trans+0x102>
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	6a 1b       	sub	r22, r26
     83e:	7b 0b       	sbc	r23, r27
     840:	80 91 8d 03 	lds	r24, 0x038D
     844:	90 91 8e 03 	lds	r25, 0x038E
     848:	86 17       	cp	r24, r22
     84a:	97 07       	cpc	r25, r23
     84c:	14 f4       	brge	.+4      	; 0x852 <firstB_trans+0xfe>
     84e:	21 e0       	ldi	r18, 0x01	; 1
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	c9 01       	movw	r24, r18
     854:	22 c0       	rjmp	.+68     	; 0x89a <firstB_trans+0x146>
     856:	3d 97       	sbiw	r30, 0x0d	; 13
     858:	19 f0       	breq	.+6      	; 0x860 <firstB_trans+0x10c>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	1d c0       	rjmp	.+58     	; 0x89a <firstB_trans+0x146>
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	6a 1b       	sub	r22, r26
     866:	7b 0b       	sbc	r23, r27
     868:	80 91 a7 03 	lds	r24, 0x03A7
     86c:	90 91 a8 03 	lds	r25, 0x03A8
     870:	20 91 9f 03 	lds	r18, 0x039F
     874:	30 91 a0 03 	lds	r19, 0x03A0
     878:	ec 01       	movw	r28, r24
     87a:	c2 9f       	mul	r28, r18
     87c:	c0 01       	movw	r24, r0
     87e:	c3 9f       	mul	r28, r19
     880:	90 0d       	add	r25, r0
     882:	d2 9f       	mul	r29, r18
     884:	90 0d       	add	r25, r0
     886:	11 24       	eor	r1, r1
     888:	86 17       	cp	r24, r22
     88a:	97 07       	cpc	r25, r23
     88c:	14 f4       	brge	.+4      	; 0x892 <firstB_trans+0x13e>
     88e:	41 e0       	ldi	r20, 0x01	; 1
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	ca 01       	movw	r24, r20
     894:	02 c0       	rjmp	.+4      	; 0x89a <firstB_trans+0x146>
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
	(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||
	(state == B1STOP1 && counter - counterRef > pWait)||
	(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/)||
	(state == B1START2 && counter - counterRef > pWait)||
	(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate));
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <secondB_trans>:

bool secondB_trans(int state, int counter, int counterRef){
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	fc 01       	movw	r30, r24
     8a6:	da 01       	movw	r26, r20
	return((state == B2SET && counter - counterRef > mWait)||
     8a8:	8f 30       	cpi	r24, 0x0F	; 15
     8aa:	91 05       	cpc	r25, r1
     8ac:	59 f4       	brne	.+22     	; 0x8c4 <secondB_trans+0x24>
     8ae:	9b 01       	movw	r18, r22
     8b0:	24 1b       	sub	r18, r20
     8b2:	35 0b       	sbc	r19, r21
     8b4:	80 91 8f 03 	lds	r24, 0x038F
     8b8:	90 91 90 03 	lds	r25, 0x0390
     8bc:	82 17       	cp	r24, r18
     8be:	93 07       	cpc	r25, r19
     8c0:	c4 f5       	brge	.+112    	; 0x932 <secondB_trans+0x92>
     8c2:	9e c0       	rjmp	.+316    	; 0xa00 <secondB_trans+0x160>
     8c4:	80 31       	cpi	r24, 0x10	; 16
     8c6:	91 05       	cpc	r25, r1
     8c8:	61 f4       	brne	.+24     	; 0x8e2 <secondB_trans+0x42>
     8ca:	9b 01       	movw	r18, r22
     8cc:	24 1b       	sub	r18, r20
     8ce:	35 0b       	sbc	r19, r21
     8d0:	80 91 8d 03 	lds	r24, 0x038D
     8d4:	90 91 8e 03 	lds	r25, 0x038E
     8d8:	82 17       	cp	r24, r18
     8da:	93 07       	cpc	r25, r19
     8dc:	0c f0       	brlt	.+2      	; 0x8e0 <secondB_trans+0x40>
     8de:	43 c0       	rjmp	.+134    	; 0x966 <secondB_trans+0xc6>
     8e0:	8f c0       	rjmp	.+286    	; 0xa00 <secondB_trans+0x160>
     8e2:	81 31       	cpi	r24, 0x11	; 17
     8e4:	91 05       	cpc	r25, r1
     8e6:	b9 f4       	brne	.+46     	; 0x916 <secondB_trans+0x76>
     8e8:	ab 01       	movw	r20, r22
     8ea:	4a 1b       	sub	r20, r26
     8ec:	5b 0b       	sbc	r21, r27
     8ee:	20 91 a7 03 	lds	r18, 0x03A7
     8f2:	30 91 a8 03 	lds	r19, 0x03A8
     8f6:	80 91 9f 03 	lds	r24, 0x039F
     8fa:	90 91 a0 03 	lds	r25, 0x03A0
     8fe:	ec 01       	movw	r28, r24
     900:	2c 9f       	mul	r18, r28
     902:	c0 01       	movw	r24, r0
     904:	2d 9f       	mul	r18, r29
     906:	90 0d       	add	r25, r0
     908:	3c 9f       	mul	r19, r28
     90a:	90 0d       	add	r25, r0
     90c:	11 24       	eor	r1, r1
     90e:	84 17       	cp	r24, r20
     910:	95 07       	cpc	r25, r21
     912:	64 f5       	brge	.+88     	; 0x96c <secondB_trans+0xcc>
     914:	75 c0       	rjmp	.+234    	; 0xa00 <secondB_trans+0x160>
     916:	82 31       	cpi	r24, 0x12	; 18
     918:	91 05       	cpc	r25, r1
     91a:	59 f4       	brne	.+22     	; 0x932 <secondB_trans+0x92>
     91c:	9b 01       	movw	r18, r22
     91e:	24 1b       	sub	r18, r20
     920:	35 0b       	sbc	r19, r21
     922:	80 91 8d 03 	lds	r24, 0x038D
     926:	90 91 8e 03 	lds	r25, 0x038E
     92a:	82 17       	cp	r24, r18
     92c:	93 07       	cpc	r25, r19
     92e:	b4 f5       	brge	.+108    	; 0x99c <secondB_trans+0xfc>
     930:	67 c0       	rjmp	.+206    	; 0xa00 <secondB_trans+0x160>
     932:	e3 31       	cpi	r30, 0x13	; 19
     934:	f1 05       	cpc	r31, r1
     936:	b9 f4       	brne	.+46     	; 0x966 <secondB_trans+0xc6>
     938:	ab 01       	movw	r20, r22
     93a:	4a 1b       	sub	r20, r26
     93c:	5b 0b       	sbc	r21, r27
     93e:	20 91 a7 03 	lds	r18, 0x03A7
     942:	30 91 a8 03 	lds	r19, 0x03A8
     946:	80 91 9f 03 	lds	r24, 0x039F
     94a:	90 91 a0 03 	lds	r25, 0x03A0
     94e:	ec 01       	movw	r28, r24
     950:	2c 9f       	mul	r18, r28
     952:	c0 01       	movw	r24, r0
     954:	2d 9f       	mul	r18, r29
     956:	90 0d       	add	r25, r0
     958:	3c 9f       	mul	r19, r28
     95a:	90 0d       	add	r25, r0
     95c:	11 24       	eor	r1, r1
     95e:	84 17       	cp	r24, r20
     960:	95 07       	cpc	r25, r21
     962:	74 f5       	brge	.+92     	; 0x9c0 <secondB_trans+0x120>
     964:	4d c0       	rjmp	.+154    	; 0xa00 <secondB_trans+0x160>
     966:	e4 31       	cpi	r30, 0x14	; 20
     968:	f1 05       	cpc	r31, r1
     96a:	d9 f0       	breq	.+54     	; 0x9a2 <secondB_trans+0x102>
     96c:	e5 31       	cpi	r30, 0x15	; 21
     96e:	f1 05       	cpc	r31, r1
     970:	a9 f4       	brne	.+42     	; 0x99c <secondB_trans+0xfc>
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	6a 1b       	sub	r22, r26
     978:	7b 0b       	sbc	r23, r27
     97a:	80 91 a7 03 	lds	r24, 0x03A7
     97e:	90 91 a8 03 	lds	r25, 0x03A8
     982:	20 91 9f 03 	lds	r18, 0x039F
     986:	30 91 a0 03 	lds	r19, 0x03A0
     98a:	fc 01       	movw	r30, r24
     98c:	e2 9f       	mul	r30, r18
     98e:	c0 01       	movw	r24, r0
     990:	e3 9f       	mul	r30, r19
     992:	90 0d       	add	r25, r0
     994:	f2 9f       	mul	r31, r18
     996:	90 0d       	add	r25, r0
     998:	11 24       	eor	r1, r1
     99a:	2b c0       	rjmp	.+86     	; 0x9f2 <secondB_trans+0x152>
     99c:	e6 31       	cpi	r30, 0x16	; 22
     99e:	f1 05       	cpc	r31, r1
     9a0:	79 f4       	brne	.+30     	; 0x9c0 <secondB_trans+0x120>
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	6a 1b       	sub	r22, r26
     9a8:	7b 0b       	sbc	r23, r27
     9aa:	80 91 8d 03 	lds	r24, 0x038D
     9ae:	90 91 8e 03 	lds	r25, 0x038E
     9b2:	86 17       	cp	r24, r22
     9b4:	97 07       	cpc	r25, r23
     9b6:	14 f4       	brge	.+4      	; 0x9bc <secondB_trans+0x11c>
     9b8:	21 e0       	ldi	r18, 0x01	; 1
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	c9 01       	movw	r24, r18
     9be:	22 c0       	rjmp	.+68     	; 0xa04 <secondB_trans+0x164>
     9c0:	77 97       	sbiw	r30, 0x17	; 23
     9c2:	19 f0       	breq	.+6      	; 0x9ca <secondB_trans+0x12a>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	1d c0       	rjmp	.+58     	; 0xa04 <secondB_trans+0x164>
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	6a 1b       	sub	r22, r26
     9d0:	7b 0b       	sbc	r23, r27
     9d2:	80 91 b3 03 	lds	r24, 0x03B3
     9d6:	90 91 b4 03 	lds	r25, 0x03B4
     9da:	20 91 9f 03 	lds	r18, 0x039F
     9de:	30 91 a0 03 	lds	r19, 0x03A0
     9e2:	ec 01       	movw	r28, r24
     9e4:	c2 9f       	mul	r28, r18
     9e6:	c0 01       	movw	r24, r0
     9e8:	c3 9f       	mul	r28, r19
     9ea:	90 0d       	add	r25, r0
     9ec:	d2 9f       	mul	r29, r18
     9ee:	90 0d       	add	r25, r0
     9f0:	11 24       	eor	r1, r1
     9f2:	86 17       	cp	r24, r22
     9f4:	97 07       	cpc	r25, r23
     9f6:	14 f4       	brge	.+4      	; 0x9fc <secondB_trans+0x15c>
     9f8:	41 e0       	ldi	r20, 0x01	; 1
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	ca 01       	movw	r24, r20
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <secondB_trans+0x164>
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	90 e0       	ldi	r25, 0x00	; 0
	(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/)||
	(state == B2START2 && counter - counterRef > pWait)||
	(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||
	(state == B2STOP2 && counter - counterRef > pWait)||
	(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/));
}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <dry_trans>:

bool dry_trans(int state, int counter, int counterRef, int counterRefFive){
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	fc 01       	movw	r30, r24
     a10:	da 01       	movw	r26, r20
	//Had references to counterRef26, 30...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == D1START && counter - counterRef > kWait)||
     a12:	88 31       	cpi	r24, 0x18	; 24
     a14:	91 05       	cpc	r25, r1
     a16:	61 f4       	brne	.+24     	; 0xa30 <dry_trans+0x26>
     a18:	9b 01       	movw	r18, r22
     a1a:	24 1b       	sub	r18, r20
     a1c:	35 0b       	sbc	r19, r21
     a1e:	80 91 91 03 	lds	r24, 0x0391
     a22:	90 91 92 03 	lds	r25, 0x0392
     a26:	82 17       	cp	r24, r18
     a28:	93 07       	cpc	r25, r19
     a2a:	0c f0       	brlt	.+2      	; 0xa2e <dry_trans+0x24>
     a2c:	45 c0       	rjmp	.+138    	; 0xab8 <dry_trans+0xae>
     a2e:	de c0       	rjmp	.+444    	; 0xbec <dry_trans+0x1e2>
     a30:	89 31       	cpi	r24, 0x19	; 25
     a32:	91 05       	cpc	r25, r1
     a34:	b9 f4       	brne	.+46     	; 0xa64 <dry_trans+0x5a>
     a36:	ab 01       	movw	r20, r22
     a38:	4a 1b       	sub	r20, r26
     a3a:	5b 0b       	sbc	r21, r27
     a3c:	20 91 a9 03 	lds	r18, 0x03A9
     a40:	30 91 aa 03 	lds	r19, 0x03AA
     a44:	80 91 9f 03 	lds	r24, 0x039F
     a48:	90 91 a0 03 	lds	r25, 0x03A0
     a4c:	ec 01       	movw	r28, r24
     a4e:	2c 9f       	mul	r18, r28
     a50:	c0 01       	movw	r24, r0
     a52:	2d 9f       	mul	r18, r29
     a54:	90 0d       	add	r25, r0
     a56:	3c 9f       	mul	r19, r28
     a58:	90 0d       	add	r25, r0
     a5a:	11 24       	eor	r1, r1
     a5c:	84 17       	cp	r24, r20
     a5e:	95 07       	cpc	r25, r21
     a60:	d4 f5       	brge	.+116    	; 0xad6 <dry_trans+0xcc>
     a62:	c4 c0       	rjmp	.+392    	; 0xbec <dry_trans+0x1e2>
     a64:	8a 31       	cpi	r24, 0x1A	; 26
     a66:	91 05       	cpc	r25, r1
     a68:	b9 f4       	brne	.+46     	; 0xa98 <dry_trans+0x8e>
     a6a:	ab 01       	movw	r20, r22
     a6c:	4a 1b       	sub	r20, r26
     a6e:	5b 0b       	sbc	r21, r27
     a70:	20 91 b5 03 	lds	r18, 0x03B5
     a74:	30 91 b6 03 	lds	r19, 0x03B6
     a78:	80 91 9f 03 	lds	r24, 0x039F
     a7c:	90 91 a0 03 	lds	r25, 0x03A0
     a80:	ec 01       	movw	r28, r24
     a82:	2c 9f       	mul	r18, r28
     a84:	c0 01       	movw	r24, r0
     a86:	2d 9f       	mul	r18, r29
     a88:	90 0d       	add	r25, r0
     a8a:	3c 9f       	mul	r19, r28
     a8c:	90 0d       	add	r25, r0
     a8e:	11 24       	eor	r1, r1
     a90:	84 17       	cp	r24, r20
     a92:	95 07       	cpc	r25, r21
     a94:	dc f5       	brge	.+118    	; 0xb0c <dry_trans+0x102>
     a96:	aa c0       	rjmp	.+340    	; 0xbec <dry_trans+0x1e2>
     a98:	8b 31       	cpi	r24, 0x1B	; 27
     a9a:	91 05       	cpc	r25, r1
     a9c:	69 f4       	brne	.+26     	; 0xab8 <dry_trans+0xae>
     a9e:	cb 01       	movw	r24, r22
     aa0:	82 1b       	sub	r24, r18
     aa2:	93 0b       	sbc	r25, r19
     aa4:	9c 01       	movw	r18, r24
     aa6:	80 91 8f 03 	lds	r24, 0x038F
     aaa:	90 91 90 03 	lds	r25, 0x0390
     aae:	82 17       	cp	r24, r18
     ab0:	93 07       	cpc	r25, r19
     ab2:	0c f0       	brlt	.+2      	; 0xab6 <dry_trans+0xac>
     ab4:	45 c0       	rjmp	.+138    	; 0xb40 <dry_trans+0x136>
     ab6:	9a c0       	rjmp	.+308    	; 0xbec <dry_trans+0x1e2>
     ab8:	ec 31       	cpi	r30, 0x1C	; 28
     aba:	f1 05       	cpc	r31, r1
     abc:	61 f4       	brne	.+24     	; 0xad6 <dry_trans+0xcc>
     abe:	9b 01       	movw	r18, r22
     ac0:	2a 1b       	sub	r18, r26
     ac2:	3b 0b       	sbc	r19, r27
     ac4:	80 91 8d 03 	lds	r24, 0x038D
     ac8:	90 91 8e 03 	lds	r25, 0x038E
     acc:	82 17       	cp	r24, r18
     ace:	93 07       	cpc	r25, r19
     ad0:	0c f0       	brlt	.+2      	; 0xad4 <dry_trans+0xca>
     ad2:	42 c0       	rjmp	.+132    	; 0xb58 <dry_trans+0x14e>
     ad4:	8b c0       	rjmp	.+278    	; 0xbec <dry_trans+0x1e2>
     ad6:	ed 31       	cpi	r30, 0x1D	; 29
     ad8:	f1 05       	cpc	r31, r1
     ada:	c1 f4       	brne	.+48     	; 0xb0c <dry_trans+0x102>
     adc:	ab 01       	movw	r20, r22
     ade:	4a 1b       	sub	r20, r26
     ae0:	5b 0b       	sbc	r21, r27
     ae2:	20 91 a9 03 	lds	r18, 0x03A9
     ae6:	30 91 aa 03 	lds	r19, 0x03AA
     aea:	80 91 9f 03 	lds	r24, 0x039F
     aee:	90 91 a0 03 	lds	r25, 0x03A0
     af2:	ec 01       	movw	r28, r24
     af4:	2c 9f       	mul	r18, r28
     af6:	c0 01       	movw	r24, r0
     af8:	2d 9f       	mul	r18, r29
     afa:	90 0d       	add	r25, r0
     afc:	3c 9f       	mul	r19, r28
     afe:	90 0d       	add	r25, r0
     b00:	11 24       	eor	r1, r1
     b02:	84 17       	cp	r24, r20
     b04:	95 07       	cpc	r25, r21
     b06:	0c f0       	brlt	.+2      	; 0xb0a <dry_trans+0x100>
     b08:	3f c0       	rjmp	.+126    	; 0xb88 <dry_trans+0x17e>
     b0a:	70 c0       	rjmp	.+224    	; 0xbec <dry_trans+0x1e2>
     b0c:	ee 31       	cpi	r30, 0x1E	; 30
     b0e:	f1 05       	cpc	r31, r1
     b10:	b9 f4       	brne	.+46     	; 0xb40 <dry_trans+0x136>
     b12:	ab 01       	movw	r20, r22
     b14:	4a 1b       	sub	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	20 91 b7 03 	lds	r18, 0x03B7
     b1c:	30 91 b8 03 	lds	r19, 0x03B8
     b20:	80 91 9f 03 	lds	r24, 0x039F
     b24:	90 91 a0 03 	lds	r25, 0x03A0
     b28:	ec 01       	movw	r28, r24
     b2a:	2c 9f       	mul	r18, r28
     b2c:	c0 01       	movw	r24, r0
     b2e:	2d 9f       	mul	r18, r29
     b30:	90 0d       	add	r25, r0
     b32:	3c 9f       	mul	r19, r28
     b34:	90 0d       	add	r25, r0
     b36:	11 24       	eor	r1, r1
     b38:	84 17       	cp	r24, r20
     b3a:	95 07       	cpc	r25, r21
     b3c:	bc f5       	brge	.+110    	; 0xbac <dry_trans+0x1a2>
     b3e:	56 c0       	rjmp	.+172    	; 0xbec <dry_trans+0x1e2>
     b40:	ef 31       	cpi	r30, 0x1F	; 31
     b42:	f1 05       	cpc	r31, r1
     b44:	49 f4       	brne	.+18     	; 0xb58 <dry_trans+0x14e>
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	6a 1b       	sub	r22, r26
     b4c:	7b 0b       	sbc	r23, r27
     b4e:	69 5e       	subi	r22, 0xE9	; 233
     b50:	73 40       	sbci	r23, 0x03	; 3
     b52:	0c f4       	brge	.+2      	; 0xb56 <dry_trans+0x14c>
     b54:	4d c0       	rjmp	.+154    	; 0xbf0 <dry_trans+0x1e6>
     b56:	4a c0       	rjmp	.+148    	; 0xbec <dry_trans+0x1e2>
     b58:	e0 32       	cpi	r30, 0x20	; 32
     b5a:	f1 05       	cpc	r31, r1
     b5c:	a9 f4       	brne	.+42     	; 0xb88 <dry_trans+0x17e>
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	6a 1b       	sub	r22, r26
     b64:	7b 0b       	sbc	r23, r27
     b66:	80 91 ad 03 	lds	r24, 0x03AD
     b6a:	90 91 ae 03 	lds	r25, 0x03AE
     b6e:	20 91 9f 03 	lds	r18, 0x039F
     b72:	30 91 a0 03 	lds	r19, 0x03A0
     b76:	ec 01       	movw	r28, r24
     b78:	c2 9f       	mul	r28, r18
     b7a:	c0 01       	movw	r24, r0
     b7c:	c3 9f       	mul	r28, r19
     b7e:	90 0d       	add	r25, r0
     b80:	d2 9f       	mul	r29, r18
     b82:	90 0d       	add	r25, r0
     b84:	11 24       	eor	r1, r1
     b86:	2b c0       	rjmp	.+86     	; 0xbde <dry_trans+0x1d4>
     b88:	e1 32       	cpi	r30, 0x21	; 33
     b8a:	f1 05       	cpc	r31, r1
     b8c:	79 f4       	brne	.+30     	; 0xbac <dry_trans+0x1a2>
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	6a 1b       	sub	r22, r26
     b94:	7b 0b       	sbc	r23, r27
     b96:	80 91 8d 03 	lds	r24, 0x038D
     b9a:	90 91 8e 03 	lds	r25, 0x038E
     b9e:	86 17       	cp	r24, r22
     ba0:	97 07       	cpc	r25, r23
     ba2:	14 f4       	brge	.+4      	; 0xba8 <dry_trans+0x19e>
     ba4:	21 e0       	ldi	r18, 0x01	; 1
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	c9 01       	movw	r24, r18
     baa:	22 c0       	rjmp	.+68     	; 0xbf0 <dry_trans+0x1e6>
     bac:	b2 97       	sbiw	r30, 0x22	; 34
     bae:	19 f0       	breq	.+6      	; 0xbb6 <dry_trans+0x1ac>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	1d c0       	rjmp	.+58     	; 0xbf0 <dry_trans+0x1e6>
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	6a 1b       	sub	r22, r26
     bbc:	7b 0b       	sbc	r23, r27
     bbe:	80 91 ab 03 	lds	r24, 0x03AB
     bc2:	90 91 ac 03 	lds	r25, 0x03AC
     bc6:	20 91 9d 03 	lds	r18, 0x039D
     bca:	30 91 9e 03 	lds	r19, 0x039E
     bce:	fc 01       	movw	r30, r24
     bd0:	e2 9f       	mul	r30, r18
     bd2:	c0 01       	movw	r24, r0
     bd4:	e3 9f       	mul	r30, r19
     bd6:	90 0d       	add	r25, r0
     bd8:	f2 9f       	mul	r31, r18
     bda:	90 0d       	add	r25, r0
     bdc:	11 24       	eor	r1, r1
     bde:	86 17       	cp	r24, r22
     be0:	97 07       	cpc	r25, r23
     be2:	14 f4       	brge	.+4      	; 0xbe8 <dry_trans+0x1de>
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	ca 01       	movw	r24, r20
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <dry_trans+0x1e6>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
	(state == D2STOP && counter - counterRef > totalStepLength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/)||
	(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/)||
	(state == FIXH && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/)||
	(state == LOWERL3 && counter - counterRef > pWait)||
	(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate));
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	08 95       	ret

00000bf6 <init_action>:
	i2c_write(u_outputByte0.outputByte0);
	i2c_write(u_outputByte1.outputByte1);
	i2c_stop();
}

void init_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor, bool *pprint0){
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	ea 01       	movw	r28, r20
     c00:	f9 01       	movw	r30, r18
	switch(state){
     c02:	83 30       	cpi	r24, 0x03	; 3
     c04:	91 05       	cpc	r25, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <init_action+0x14>
     c08:	82 c0       	rjmp	.+260    	; 0xd0e <init_action+0x118>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	91 05       	cpc	r25, r1
     c0e:	54 f4       	brge	.+20     	; 0xc24 <init_action+0x2e>
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	91 05       	cpc	r25, r1
     c14:	d9 f1       	breq	.+118    	; 0xc8c <init_action+0x96>
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	91 05       	cpc	r25, r1
     c1a:	0c f0       	brlt	.+2      	; 0xc1e <init_action+0x28>
     c1c:	58 c0       	rjmp	.+176    	; 0xcce <init_action+0xd8>
     c1e:	89 2b       	or	r24, r25
     c20:	69 f0       	breq	.+26     	; 0xc3c <init_action+0x46>
     c22:	83 c0       	rjmp	.+262    	; 0xd2a <init_action+0x134>
     c24:	85 30       	cpi	r24, 0x05	; 5
     c26:	91 05       	cpc	r25, r1
     c28:	09 f4       	brne	.+2      	; 0xc2c <init_action+0x36>
     c2a:	6b c0       	rjmp	.+214    	; 0xd02 <init_action+0x10c>
     c2c:	85 30       	cpi	r24, 0x05	; 5
     c2e:	91 05       	cpc	r25, r1
     c30:	0c f4       	brge	.+2      	; 0xc34 <init_action+0x3e>
     c32:	5a c0       	rjmp	.+180    	; 0xce8 <init_action+0xf2>
     c34:	06 97       	sbiw	r24, 0x06	; 6
     c36:	09 f0       	breq	.+2      	; 0xc3a <init_action+0x44>
     c38:	78 c0       	rjmp	.+240    	; 0xd2a <init_action+0x134>
     c3a:	69 c0       	rjmp	.+210    	; 0xd0e <init_action+0x118>
		case INIT:
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
     c3c:	80 91 de 03 	lds	r24, 0x03DE
     c40:	90 91 e3 03 	lds	r25, 0x03E3
     c44:	82 ff       	sbrs	r24, 2
     c46:	07 c0       	rjmp	.+14     	; 0xc56 <init_action+0x60>
				u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
     c48:	9f 7e       	andi	r25, 0xEF	; 239
     c4a:	90 93 e3 03 	sts	0x03E3, r25
				u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     c4e:	80 91 e2 03 	lds	r24, 0x03E2
     c52:	87 7f       	andi	r24, 0xF7	; 247
     c54:	53 c0       	rjmp	.+166    	; 0xcfc <init_action+0x106>
			}
			else{
				u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     c56:	9f 7d       	andi	r25, 0xDF	; 223
     c58:	90 93 e3 03 	sts	0x03E3, r25
				*pfixtureMotor = 0;
     c5c:	11 82       	std	Z+1, r1	; 0x01
     c5e:	10 82       	st	Z, r1
				u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     c60:	80 91 e2 03 	lds	r24, 0x03E2
     c64:	8f 7e       	andi	r24, 0xEF	; 239
				u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     c66:	88 60       	ori	r24, 0x08	; 8
     c68:	80 93 e2 03 	sts	0x03E2, r24
				if(*pprint0 == 1){
     c6c:	f5 01       	movw	r30, r10
     c6e:	80 81       	ld	r24, Z
     c70:	88 23       	and	r24, r24
     c72:	09 f4       	brne	.+2      	; 0xc76 <init_action+0x80>
     c74:	5a c0       	rjmp	.+180    	; 0xd2a <init_action+0x134>
					lcd_goto_xy(0,1);
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
					print("PUSH TO START");
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					*pprint0 = 0;
     c86:	f5 01       	movw	r30, r10
     c88:	10 82       	st	Z, r1
     c8a:	4f c0       	rjmp	.+158    	; 0xd2a <init_action+0x134>
				}
			}
			break;
		case LOAD:
			u_outputByte0.bits_in_outputByte0.ACPower = 0;
     c8c:	20 91 e2 03 	lds	r18, 0x03E2
     c90:	32 2f       	mov	r19, r18
     c92:	3e 7f       	andi	r19, 0xFE	; 254
			if((counter % 200) < 100){
     c94:	cb 01       	movw	r24, r22
     c96:	68 ec       	ldi	r22, 0xC8	; 200
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__divmodhi4>
     c9e:	84 36       	cpi	r24, 0x64	; 100
     ca0:	91 05       	cpc	r25, r1
     ca2:	24 f4       	brge	.+8      	; 0xcac <init_action+0xb6>
				u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     ca4:	2c 7f       	andi	r18, 0xFC	; 252
     ca6:	20 93 e2 03 	sts	0x03E2, r18
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <init_action+0xbc>
			}
			else{
				u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     cac:	32 60       	ori	r19, 0x02	; 2
     cae:	30 93 e2 03 	sts	0x03E2, r19
			}
			*pplateLoadMotor = 1;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	99 83       	std	Y+1, r25	; 0x01
     cb8:	88 83       	st	Y, r24
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
     cba:	80 91 e3 03 	lds	r24, 0x03E3
     cbe:	8d 7f       	andi	r24, 0xFD	; 253
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     cc0:	84 60       	ori	r24, 0x04	; 4
     cc2:	80 93 e3 03 	sts	0x03E3, r24
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
     cc6:	80 91 e2 03 	lds	r24, 0x03E2
     cca:	8b 7f       	andi	r24, 0xFB	; 251
     ccc:	17 c0       	rjmp	.+46     	; 0xcfc <init_action+0x106>
			break;
		case RAISEL1:
			u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     cce:	80 91 e2 03 	lds	r24, 0x03E2
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     cd2:	81 7e       	andi	r24, 0xE1	; 225
			u_outputByte0.bits_in_outputByte0.plateStop = 1;
     cd4:	86 61       	ori	r24, 0x16	; 22
     cd6:	80 93 e2 03 	sts	0x03E2, r24
			*pplateLoadMotor = 0;
     cda:	19 82       	std	Y+1, r1	; 0x01
     cdc:	18 82       	st	Y, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     cde:	80 91 e3 03 	lds	r24, 0x03E3
     ce2:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
     ce4:	8b 7f       	andi	r24, 0xFB	; 251
     ce6:	1f c0       	rjmp	.+62     	; 0xd26 <init_action+0x130>
		case FIXL:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case LOWERL1:
			*pfixtureMotor = 0;
     ce8:	11 82       	std	Z+1, r1	; 0x01
     cea:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     cec:	80 91 e3 03 	lds	r24, 0x03E3
     cf0:	8f 7d       	andi	r24, 0xDF	; 223
     cf2:	80 93 e3 03 	sts	0x03E3, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     cf6:	80 91 e2 03 	lds	r24, 0x03E2
     cfa:	88 60       	ori	r24, 0x08	; 8
     cfc:	80 93 e2 03 	sts	0x03E2, r24
     d00:	14 c0       	rjmp	.+40     	; 0xd2a <init_action+0x134>
			break;
		case LOWERL2:
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     d02:	80 91 e2 03 	lds	r24, 0x03E2
     d06:	8f 7e       	andi	r24, 0xEF	; 239
     d08:	80 93 e2 03 	sts	0x03E2, r24
     d0c:	09 c0       	rjmp	.+18     	; 0xd20 <init_action+0x12a>
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		//*********************************************
		case MOVEC1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     d0e:	80 91 e3 03 	lds	r24, 0x03E3
     d12:	80 61       	ori	r24, 0x10	; 16
     d14:	80 93 e3 03 	sts	0x03E3, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	91 83       	std	Z+1, r25	; 0x01
     d1e:	80 83       	st	Z, r24
     d20:	80 91 e3 03 	lds	r24, 0x03E3
     d24:	80 62       	ori	r24, 0x20	; 32
     d26:	80 93 e3 03 	sts	0x03E3, r24
			break;
	}
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	bf 90       	pop	r11
     d30:	af 90       	pop	r10
     d32:	08 95       	ret

00000d34 <motor_and_write>:
	}
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor)
{
     d34:	6f 92       	push	r6
     d36:	7f 92       	push	r7
     d38:	8f 92       	push	r8
     d3a:	9f 92       	push	r9
     d3c:	af 92       	push	r10
     d3e:	bf 92       	push	r11
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	4c 01       	movw	r8, r24
     d52:	3a 01       	movw	r6, r20
     d54:	e9 01       	movw	r28, r18
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     d56:	fc 01       	movw	r30, r24
     d58:	e6 1b       	sub	r30, r22
     d5a:	f7 0b       	sbc	r31, r23
     d5c:	60 91 9d 03 	lds	r22, 0x039D
     d60:	70 91 9e 03 	lds	r23, 0x039E
     d64:	cf 01       	movw	r24, r30
     d66:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__divmodhi4>
     d6a:	20 91 93 03 	lds	r18, 0x0393
     d6e:	30 91 94 03 	lds	r19, 0x0394
     d72:	82 17       	cp	r24, r18
     d74:	93 07       	cpc	r25, r19
     d76:	34 f4       	brge	.+12     	; 0xd84 <motor_and_write+0x50>
     d78:	cd 2b       	or	r28, r29
     d7a:	21 f0       	breq	.+8      	; 0xd84 <motor_and_write+0x50>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     d7c:	80 91 e3 03 	lds	r24, 0x03E3
     d80:	81 60       	ori	r24, 0x01	; 1
     d82:	03 c0       	rjmp	.+6      	; 0xd8a <motor_and_write+0x56>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     d84:	80 91 e3 03 	lds	r24, 0x03E3
     d88:	8e 7f       	andi	r24, 0xFE	; 254
     d8a:	80 93 e3 03 	sts	0x03E3, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     d8e:	60 91 9f 03 	lds	r22, 0x039F
     d92:	70 91 a0 03 	lds	r23, 0x03A0
     d96:	cf 01       	movw	r24, r30
     d98:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__divmodhi4>
     d9c:	20 91 95 03 	lds	r18, 0x0395
     da0:	30 91 96 03 	lds	r19, 0x0396
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	34 f4       	brge	.+12     	; 0xdb6 <motor_and_write+0x82>
     daa:	01 2b       	or	r16, r17
     dac:	21 f0       	breq	.+8      	; 0xdb6 <motor_and_write+0x82>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     dae:	80 91 e3 03 	lds	r24, 0x03E3
     db2:	88 60       	ori	r24, 0x08	; 8
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <motor_and_write+0x88>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     db6:	80 91 e3 03 	lds	r24, 0x03E3
     dba:	87 7f       	andi	r24, 0xF7	; 247
     dbc:	80 93 e3 03 	sts	0x03E3, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     dc0:	60 91 a1 03 	lds	r22, 0x03A1
     dc4:	70 91 a2 03 	lds	r23, 0x03A2
     dc8:	cf 01       	movw	r24, r30
     dca:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__divmodhi4>
     dce:	20 91 97 03 	lds	r18, 0x0397
     dd2:	30 91 98 03 	lds	r19, 0x0398
     dd6:	82 17       	cp	r24, r18
     dd8:	93 07       	cpc	r25, r19
     dda:	34 f4       	brge	.+12     	; 0xde8 <motor_and_write+0xb4>
     ddc:	ef 28       	or	r14, r15
     dde:	21 f0       	breq	.+8      	; 0xde8 <motor_and_write+0xb4>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     de0:	80 91 e3 03 	lds	r24, 0x03E3
     de4:	80 64       	ori	r24, 0x40	; 64
     de6:	03 c0       	rjmp	.+6      	; 0xdee <motor_and_write+0xba>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     de8:	80 91 e3 03 	lds	r24, 0x03E3
     dec:	8f 7b       	andi	r24, 0xBF	; 191
     dee:	80 93 e3 03 	sts	0x03E3, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     df2:	60 91 a3 03 	lds	r22, 0x03A3
     df6:	70 91 a4 03 	lds	r23, 0x03A4
     dfa:	cf 01       	movw	r24, r30
     dfc:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__divmodhi4>
     e00:	20 91 99 03 	lds	r18, 0x0399
     e04:	30 91 9a 03 	lds	r19, 0x039A
     e08:	82 17       	cp	r24, r18
     e0a:	93 07       	cpc	r25, r19
     e0c:	34 f4       	brge	.+12     	; 0xe1a <motor_and_write+0xe6>
     e0e:	cd 28       	or	r12, r13
     e10:	21 f0       	breq	.+8      	; 0xe1a <motor_and_write+0xe6>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     e12:	80 91 df 03 	lds	r24, 0x03DF
     e16:	82 60       	ori	r24, 0x02	; 2
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <motor_and_write+0xec>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     e1a:	80 91 df 03 	lds	r24, 0x03DF
     e1e:	8d 7f       	andi	r24, 0xFD	; 253
     e20:	80 93 df 03 	sts	0x03DF, r24
	}

	if( ((counter - counterRefFive) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     e24:	60 91 a5 03 	lds	r22, 0x03A5
     e28:	70 91 a6 03 	lds	r23, 0x03A6
     e2c:	c4 01       	movw	r24, r8
     e2e:	86 19       	sub	r24, r6
     e30:	97 09       	sbc	r25, r7
     e32:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__divmodhi4>
     e36:	20 91 9b 03 	lds	r18, 0x039B
     e3a:	30 91 9c 03 	lds	r19, 0x039C
     e3e:	82 17       	cp	r24, r18
     e40:	93 07       	cpc	r25, r19
     e42:	34 f4       	brge	.+12     	; 0xe50 <motor_and_write+0x11c>
     e44:	ab 28       	or	r10, r11
     e46:	21 f0       	breq	.+8      	; 0xe50 <motor_and_write+0x11c>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     e48:	80 91 df 03 	lds	r24, 0x03DF
     e4c:	80 61       	ori	r24, 0x10	; 16
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <motor_and_write+0x122>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     e50:	80 91 df 03 	lds	r24, 0x03DF
     e54:	8f 7e       	andi	r24, 0xEF	; 239
     e56:	80 93 df 03 	sts	0x03DF, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     e5a:	80 e4       	ldi	r24, 0x40	; 64
     e5c:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
	i2c_write(0x2);									// write command byte
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     e66:	80 91 e3 03 	lds	r24, 0x03E3
     e6a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     e6e:	80 91 df 03 	lds	r24, 0x03DF
     e72:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     e76:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

	i2c_start(I2C2+I2C_WRITE);
     e7a:	82 e4       	ldi	r24, 0x42	; 66
     e7c:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
	i2c_write(0x2);
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_outputByte0.outputByte0);
     e86:	80 91 e2 03 	lds	r24, 0x03E2
     e8a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_outputByte1.outputByte1);
     e8e:	80 91 e0 03 	lds	r24, 0x03E0
     e92:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_stop();
     e96:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
}
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	ff 90       	pop	r15
     ea4:	ef 90       	pop	r14
     ea6:	df 90       	pop	r13
     ea8:	cf 90       	pop	r12
     eaa:	bf 90       	pop	r11
     eac:	af 90       	pop	r10
     eae:	9f 90       	pop	r9
     eb0:	8f 90       	pop	r8
     eb2:	7f 90       	pop	r7
     eb4:	6f 90       	pop	r6
     eb6:	08 95       	ret

00000eb8 <main>:
void brush2_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor);

void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor);

int main()   
{
     eb8:	2f 92       	push	r2
     eba:	3f 92       	push	r3
     ebc:	4f 92       	push	r4
     ebe:	5f 92       	push	r5
     ec0:	6f 92       	push	r6
     ec2:	7f 92       	push	r7
     ec4:	8f 92       	push	r8
     ec6:	9f 92       	push	r9
     ec8:	af 92       	push	r10
     eca:	bf 92       	push	r11
     ecc:	cf 92       	push	r12
     ece:	df 92       	push	r13
     ed0:	ef 92       	push	r14
     ed2:	ff 92       	push	r15
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	62 97       	sbiw	r28, 0x12	; 18
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
	bool print0 = true;
	bool  print35 = true;
		
	//initialize button variables
	int button = 1;				
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently
     eec:	19 8a       	std	Y+17, r1	; 0x11
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
    
	while(1){						//Repeats the entire program indefinitely (runs maintenance or normal each time)

							//mx holds whether motor x should move: 0 = no, 1 = yes
	plateLoadMotor = 0;		//plate load motor
     eee:	1b 82       	std	Y+3, r1	; 0x03
     ef0:	1a 82       	std	Y+2, r1	; 0x02
	fixtureMotor = 0;		//fixture motor
     ef2:	1d 82       	std	Y+5, r1	; 0x05
     ef4:	1c 82       	std	Y+4, r1	; 0x04
	brush1Motor = 0;		//brush 1 motor
     ef6:	1f 82       	std	Y+7, r1	; 0x07
     ef8:	1e 82       	std	Y+6, r1	; 0x06
	brush2Motor = 0;		//brush 2 motor
     efa:	19 86       	std	Y+9, r1	; 0x09
     efc:	18 86       	std	Y+8, r1	; 0x08
	paperTowelMotor = 0; 	//paper towel roller motor
     efe:	1b 86       	std	Y+11, r1	; 0x0b
     f00:	1a 86       	std	Y+10, r1	; 0x0a
	//the ones with numbers correspond to run mode states, and Five refers to motor 5 (paper towel roller)
	counterRef = 0;
	counterRefFive = 0;
		
	//holds wait times for various actions in ms
	pWait = 100;
     f02:	84 e6       	ldi	r24, 0x64	; 100
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	90 93 8e 03 	sts	0x038E, r25
     f0a:	80 93 8d 03 	sts	0x038D, r24
	mWait = 100;
     f0e:	90 93 90 03 	sts	0x0390, r25
     f12:	80 93 8f 03 	sts	0x038F, r24
	kWait = 100;
     f16:	90 93 92 03 	sts	0x0392, r25
     f1a:	80 93 91 03 	sts	0x0391, r24

	//hold the length of the high and high-low periods for the various motors - this controls their speed
	highLength1 = 1;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	90 93 94 03 	sts	0x0394, r25
     f26:	80 93 93 03 	sts	0x0393, r24
	highLength2 = 1;
     f2a:	90 93 96 03 	sts	0x0396, r25
     f2e:	80 93 95 03 	sts	0x0395, r24
	highLength3 = 1;
     f32:	90 93 98 03 	sts	0x0398, r25
     f36:	80 93 97 03 	sts	0x0397, r24
	highLength4 = 1;
     f3a:	90 93 9a 03 	sts	0x039A, r25
     f3e:	80 93 99 03 	sts	0x0399, r24
	highLength5 = 1;
     f42:	90 93 9c 03 	sts	0x039C, r25
     f46:	80 93 9b 03 	sts	0x039B, r24
	totalStepLength1 = 2;
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	90 93 9e 03 	sts	0x039E, r25
     f52:	80 93 9d 03 	sts	0x039D, r24
	totalStepLength2 = 2;
     f56:	90 93 a0 03 	sts	0x03A0, r25
     f5a:	80 93 9f 03 	sts	0x039F, r24
	totalStepLength3 = 2;
     f5e:	90 93 a2 03 	sts	0x03A2, r25
     f62:	80 93 a1 03 	sts	0x03A1, r24
	totalStepLength4 = 2;
     f66:	90 93 a4 03 	sts	0x03A4, r25
     f6a:	80 93 a3 03 	sts	0x03A3, r24
	totalStepLength5 = 2;
     f6e:	90 93 a6 03 	sts	0x03A6, r25
     f72:	80 93 a5 03 	sts	0x03A5, r24
	
	//hold whether or not statements have been printed yet (numbers refer to run mode states)
	print0 = true;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	89 83       	std	Y+1, r24	; 0x01
	print35 = true;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     f7a:	1d 86       	std	Y+13, r1	; 0x0d
     f7c:	1c 86       	std	Y+12, r1	; 0x0c
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     f7e:	10 92 e3 03 	sts	0x03E3, r1
	u_motorByte1.motorByte1 = 128;  // initialize motorByte1              **********1 or 128, depending on order**********
     f82:	80 e8       	ldi	r24, 0x80	; 128
     f84:	80 93 df 03 	sts	0x03DF, r24
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	80 93 e2 03 	sts	0x03E2, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
     f8e:	80 93 e0 03 	sts	0x03E0, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
     f92:	10 92 de 03 	sts	0x03DE, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
     f96:	10 92 e1 03 	sts	0x03E1, r1
	
	clear();
     f9a:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
	print("DASCH CLEANER 2c");
     f9e:	8e e0       	ldi	r24, 0x0E	; 14
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
	lcd_goto_xy(0,1);
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
	print("REV: 31");
     fae:	8f e1       	ldi	r24, 0x1F	; 31
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
	delay_ms(2000);
     fb6:	80 ed       	ldi	r24, 0xD0	; 208
     fb8:	97 e0       	ldi	r25, 0x07	; 7
     fba:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>
	
	clear();
     fbe:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
	print("BEGIN ");
     fc2:	87 e2       	ldi	r24, 0x27	; 39
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
	
	delay_ms(1000);
     fca:	88 ee       	ldi	r24, 0xE8	; 232
     fcc:	93 e0       	ldi	r25, 0x03	; 3
     fce:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>

    i2c_init();                                // init I2C interface
     fd2:	0e 94 93 00 	call	0x126	; 0x126 <i2c_init>
	
    print("INIT ");
     fd6:	8e e2       	ldi	r24, 0x2E	; 46
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
     fde:	80 e4       	ldi	r24, 0x40	; 64
     fe0:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
     fe4:	f8 2e       	mov	r15, r24
	i2c_stop();
     fe6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
     fea:	82 e4       	ldi	r24, 0x42	; 66
     fec:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
     ff0:	18 2f       	mov	r17, r24
	i2c_stop();
     ff2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
     ff6:	84 e4       	ldi	r24, 0x44	; 68
     ff8:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
     ffc:	08 2f       	mov	r16, r24
	i2c_stop();
     ffe:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
    
	clear();
    1002:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
	print("START ");
    1006:	84 e3       	ldi	r24, 0x34	; 52
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
    100e:	1f 29       	or	r17, r15
    1010:	10 2b       	or	r17, r16
    1012:	61 f0       	breq	.+24     	; 0x102c <main+0x174>
        /* failed to issue start condition(s), possibly no device found */
        
		print("I2C BAD ");
    1014:	8b e3       	ldi	r24, 0x3B	; 59
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
		i2c_stop();
    101c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
		print("STOP ");
    1020:	84 e4       	ldi	r24, 0x44	; 68
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
    1028:	0c 94 89 11 	jmp	0x2312	; 0x2312 <main+0x145a>
    }
	else {
		print("I2C OK ");
    102c:	8a e4       	ldi	r24, 0x4A	; 74
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
        /* issuing start conditions ok, devices accessible */
		print("BINIT ");
    1034:	82 e5       	ldi	r24, 0x52	; 82
    1036:	91 e0       	ldi	r25, 0x01	; 1
    1038:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
    103c:	80 e4       	ldi	r24, 0x40	; 64
    103e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x6);
    1042:	86 e0       	ldi	r24, 0x06	; 6
    1044:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1054:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C1+I2C_WRITE);
    1058:	80 e4       	ldi	r24, 0x40	; 64
    105a:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    1064:	80 91 e3 03 	lds	r24, 0x03E3
    1068:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    106c:	80 91 df 03 	lds	r24, 0x03DF
    1070:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1074:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
    1078:	82 e4       	ldi	r24, 0x42	; 66
    107a:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x6);
    107e:	86 e0       	ldi	r24, 0x06	; 6
    1080:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1090:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);
    1094:	82 e4       	ldi	r24, 0x42	; 66
    1096:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_outputByte0.outputByte0);
    10a0:	80 91 e2 03 	lds	r24, 0x03E2
    10a4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_outputByte1.outputByte1);
    10a8:	80 91 e0 03 	lds	r24, 0x03E0
    10ac:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    10b0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		//Registers default to input, so I2C3 is fine already

		u_motorByte1.bits_in_motorByte1.enableAll = 0;	//Enables all motor drivers after startup
    10b4:	80 91 df 03 	lds	r24, 0x03DF
    10b8:	8f 77       	andi	r24, 0x7F	; 127
    10ba:	80 93 df 03 	sts	0x03DF, r24
		i2c_start(I2C1+I2C_WRITE);
    10be:	80 e4       	ldi	r24, 0x40	; 64
    10c0:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    10ca:	80 91 e3 03 	lds	r24, 0x03E3
    10ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    10d2:	80 91 df 03 	lds	r24, 0x03DF
    10d6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    10da:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>


		delay_ms(1000);
    10de:	88 ee       	ldi	r24, 0xE8	; 232
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>
		clear();
    10e6:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
		print("INPUT RUN/DEBUG");
    10ea:	89 e5       	ldi	r24, 0x59	; 89
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
    10f2:	ee 24       	eor	r14, r14
    10f4:	ff 24       	eor	r15, r15
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    10f6:	c7 01       	movw	r24, r14
    10f8:	be 01       	movw	r22, r28
    10fa:	64 5f       	subi	r22, 0xF4	; 244
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    1102:	18 2f       	mov	r17, r24
			counter ++;
    1104:	08 94       	sec
    1106:	e1 1c       	adc	r14, r1
    1108:	f1 1c       	adc	r15, r1
			delay_ms(1);
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>
		delay_ms(1000);
		clear();
		print("INPUT RUN/DEBUG");
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1112:	11 23       	and	r17, r17
    1114:	81 f3       	breq	.-32     	; 0x10f6 <main+0x23e>
			counter ++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		clear();
    1116:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>


		if(is_digital_input_high(IO_D3))							//Tests if the switch is set to Maintenance Mode
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1120:	88 23       	and	r24, r24
    1122:	09 f4       	brne	.+2      	; 0x1126 <main+0x26e>
    1124:	77 c3       	rjmp	.+1774   	; 0x1814 <main+0x95c>
		{
			print("DEBUG");
    1126:	89 e6       	ldi	r24, 0x69	; 105
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
			delay_ms(1000);
    112e:	88 ee       	ldi	r24, 0xE8	; 232
    1130:	93 e0       	ldi	r25, 0x03	; 3
    1132:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>
			
			//initialize
			bool printVar = true;
			int submode = -1;

			clear();
    1136:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
			print("INPUT MODE");
    113a:	8f e6       	ldi	r24, 0x6F	; 111
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
    1142:	ee 24       	eor	r14, r14
    1144:	ff 24       	eor	r15, r15
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1146:	c7 01       	movw	r24, r14
    1148:	be 01       	movw	r22, r28
    114a:	64 5f       	subi	r22, 0xF4	; 244
    114c:	7f 4f       	sbci	r23, 0xFF	; 255
    114e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    1152:	18 2f       	mov	r17, r24
				counter++;
    1154:	08 94       	sec
    1156:	e1 1c       	adc	r14, r1
    1158:	f1 1c       	adc	r15, r1
				delay_ms(1);
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>

			clear();
			print("INPUT MODE");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
    1162:	11 23       	and	r17, r17
    1164:	81 f3       	breq	.-32     	; 0x1146 <main+0x28e>
				counter++;
				delay_ms(1);
			}
			buttonTriggered = false;
			counter = 0;
			clear();
    1166:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
    116a:	22 24       	eor	r2, r2
    116c:	2a 94       	dec	r2
    116e:	32 2c       	mov	r3, r2
    1170:	88 24       	eor	r8, r8
    1172:	99 24       	eor	r9, r9
    1174:	66 24       	eor	r6, r6
    1176:	77 24       	eor	r7, r7
    1178:	44 24       	eor	r4, r4
    117a:	55 24       	eor	r5, r5
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    117c:	84 e4       	ldi	r24, 0x44	; 68
    117e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1188:	85 e4       	ldi	r24, 0x45	; 69
    118a:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    118e:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1192:	80 93 de 03 	sts	0x03DE, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1196:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    119a:	80 93 e1 03 	sts	0x03E1, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    119e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    11a2:	c3 01       	movw	r24, r6
    11a4:	be 01       	movw	r22, r28
    11a6:	64 5f       	subi	r22, 0xF4	; 244
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    11ae:	18 2f       	mov	r17, r24
							Output 			--     starts testing each output individually and ends after testing all outputs
							Motor			--     starts testing each motor individually and ends after testing all motors
							Multi motor		--     starts testing each the fixture motor with each of the brush motors

				*/
				if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != INPUT){
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    11b6:	88 23       	and	r24, r24
    11b8:	c1 f4       	brne	.+48     	; 0x11ea <main+0x332>
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    11c0:	88 23       	and	r24, r24
    11c2:	99 f4       	brne	.+38     	; 0x11ea <main+0x332>
    11c4:	21 14       	cp	r2, r1
    11c6:	31 04       	cpc	r3, r1
    11c8:	81 f0       	breq	.+32     	; 0x11ea <main+0x332>
					state = S0;
					submode = INPUT;
					clear();
    11ca:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
					print("INPUTS ");
    11ce:	8a e7       	ldi	r24, 0x7A	; 122
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					lcd_goto_xy(0,1);
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	61 e0       	ldi	r22, 0x01	; 1
    11da:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
    11de:	22 24       	eor	r2, r2
    11e0:	33 24       	eor	r3, r3
    11e2:	88 24       	eor	r8, r8
    11e4:	99 24       	eor	r9, r9
    11e6:	21 e0       	ldi	r18, 0x01	; 1
    11e8:	29 8b       	std	Y+17, r18	; 0x11
					printVar = true;
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != OUTPUT){
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    11f0:	88 23       	and	r24, r24
    11f2:	d9 f0       	breq	.+54     	; 0x122a <main+0x372>
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    11fa:	88 23       	and	r24, r24
    11fc:	b1 f4       	brne	.+44     	; 0x122a <main+0x372>
    11fe:	31 e0       	ldi	r19, 0x01	; 1
    1200:	23 16       	cp	r2, r19
    1202:	31 04       	cpc	r3, r1
    1204:	91 f0       	breq	.+36     	; 0x122a <main+0x372>
					state = O0_ON;
					submode = OUTPUT;
					clear();
    1206:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
					print("OUTPUTS");
    120a:	82 e8       	ldi	r24, 0x82	; 130
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					lcd_goto_xy(0,1);
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	61 e0       	ldi	r22, 0x01	; 1
    1216:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
    121a:	e1 e0       	ldi	r30, 0x01	; 1
    121c:	2e 2e       	mov	r2, r30
    121e:	31 2c       	mov	r3, r1
    1220:	78 e0       	ldi	r23, 0x08	; 8
    1222:	87 2e       	mov	r8, r23
    1224:	91 2c       	mov	r9, r1
    1226:	61 e0       	ldi	r22, 0x01	; 1
    1228:	69 8b       	std	Y+17, r22	; 0x11
					printVar = true;
					switched = true;
				}
				if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MOTOR){
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1230:	88 23       	and	r24, r24
    1232:	01 f5       	brne	.+64     	; 0x1274 <main+0x3bc>
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    123a:	88 23       	and	r24, r24
    123c:	d9 f0       	breq	.+54     	; 0x1274 <main+0x3bc>
    123e:	72 e0       	ldi	r23, 0x02	; 2
    1240:	27 16       	cp	r2, r23
    1242:	31 04       	cpc	r3, r1
    1244:	b9 f0       	breq	.+46     	; 0x1274 <main+0x3bc>
					state = M1_F;
					submode = MOTOR;
					clear();
    1246:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
					print("MOTORS ");
    124a:	8a e8       	ldi	r24, 0x8A	; 138
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					lcd_goto_xy(0,1);
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	61 e0       	ldi	r22, 0x01	; 1
    1256:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    125a:	80 91 e3 03 	lds	r24, 0x03E3
    125e:	84 60       	ori	r24, 0x04	; 4
    1260:	80 93 e3 03 	sts	0x03E3, r24
    1264:	62 e0       	ldi	r22, 0x02	; 2
    1266:	26 2e       	mov	r2, r22
    1268:	31 2c       	mov	r3, r1
    126a:	50 e2       	ldi	r21, 0x20	; 32
    126c:	85 2e       	mov	r8, r21
    126e:	91 2c       	mov	r9, r1
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	89 8b       	std	Y+17, r24	; 0x11
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MULTI){
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    127a:	88 23       	and	r24, r24
    127c:	21 f1       	breq	.+72     	; 0x12c6 <main+0x40e>
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1284:	88 23       	and	r24, r24
    1286:	f9 f0       	breq	.+62     	; 0x12c6 <main+0x40e>
    1288:	23 e0       	ldi	r18, 0x03	; 3
    128a:	22 16       	cp	r2, r18
    128c:	31 04       	cpc	r3, r1
    128e:	d9 f0       	breq	.+54     	; 0x12c6 <main+0x40e>
					state = M2_AND_M3;
					submode = MULTI;
					clear();
    1290:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
					print("MULTI MOTOR");
    1294:	82 e9       	ldi	r24, 0x92	; 146
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					lcd_goto_xy(0,1);
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	61 e0       	ldi	r22, 0x01	; 1
    12a0:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    12a4:	80 91 e3 03 	lds	r24, 0x03E3
    12a8:	80 62       	ori	r24, 0x20	; 32
    12aa:	80 93 e3 03 	sts	0x03E3, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    12ae:	80 91 df 03 	lds	r24, 0x03DF
    12b2:	81 60       	ori	r24, 0x01	; 1
    12b4:	80 93 df 03 	sts	0x03DF, r24
    12b8:	43 e0       	ldi	r20, 0x03	; 3
    12ba:	24 2e       	mov	r2, r20
    12bc:	31 2c       	mov	r3, r1
    12be:	3a e2       	ldi	r19, 0x2A	; 42
    12c0:	83 2e       	mov	r8, r19
    12c2:	91 2c       	mov	r9, r1
    12c4:	03 c0       	rjmp	.+6      	; 0x12cc <main+0x414>
					switched = true;
				}
				if(switched){
    12c6:	39 89       	ldd	r19, Y+17	; 0x11
    12c8:	33 23       	and	r19, r19
    12ca:	c1 f0       	breq	.+48     	; 0x12fc <main+0x444>
					plateLoadMotor = 0;
    12cc:	1b 82       	std	Y+3, r1	; 0x03
    12ce:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    12d0:	1d 82       	std	Y+5, r1	; 0x05
    12d2:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    12d4:	1f 82       	std	Y+7, r1	; 0x07
    12d6:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    12d8:	19 86       	std	Y+9, r1	; 0x09
    12da:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    12dc:	1b 86       	std	Y+11, r1	; 0x0b
    12de:	1a 86       	std	Y+10, r1	; 0x0a
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	80 93 e2 03 	sts	0x03E2, r24
					u_outputByte1.outputByte1 = 255;  // reset outputByte1
    12e6:	80 93 e0 03 	sts	0x03E0, r24
					if(submode != MOTOR && submode != MULTI){
    12ea:	c1 01       	movw	r24, r2
    12ec:	02 97       	sbiw	r24, 0x02	; 2
    12ee:	02 97       	sbiw	r24, 0x02	; 2
    12f0:	20 f0       	brcs	.+8      	; 0x12fa <main+0x442>
						u_motorByte0.motorByte0 = 0;	  // reset motorByte0
    12f2:	10 92 e3 03 	sts	0x03E3, r1
						u_motorByte1.motorByte1 = 0;	  // reset motorByte1
    12f6:	10 92 df 03 	sts	0x03DF, r1
    12fa:	19 8a       	std	Y+17, r1	; 0x11
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
    12fc:	11 23       	and	r17, r17
    12fe:	09 f4       	brne	.+2      	; 0x1302 <main+0x44a>
    1300:	c0 c0       	rjmp	.+384    	; 0x1482 <main+0x5ca>
					if(state <= S7){				//if it's doing the sensors
    1302:	68 e0       	ldi	r22, 0x08	; 8
    1304:	86 16       	cp	r8, r22
    1306:	91 04       	cpc	r9, r1
    1308:	6c f4       	brge	.+26     	; 0x1324 <main+0x46c>
						lcd_goto_xy(0,1);
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
						buttonTriggered = false;
						state ++;
    1312:	08 94       	sec
    1314:	81 1c       	adc	r8, r1
    1316:	91 1c       	adc	r9, r1
						counterRef = counter;
						printVar = true;
						if(state == S7 + 1){		//accounts for end of maintenance mode after sensors
    1318:	78 e0       	ldi	r23, 0x08	; 8
    131a:	87 16       	cp	r8, r23
    131c:	91 04       	cpc	r9, r1
    131e:	09 f0       	breq	.+2      	; 0x1322 <main+0x46a>
    1320:	af c0       	rjmp	.+350    	; 0x1480 <main+0x5c8>
    1322:	1b c0       	rjmp	.+54     	; 0x135a <main+0x4a2>
							clear();
							state = DONEM;
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
    1324:	80 e2       	ldi	r24, 0x20	; 32
    1326:	88 16       	cp	r8, r24
    1328:	91 04       	cpc	r9, r1
    132a:	d4 f4       	brge	.+52     	; 0x1360 <main+0x4a8>
						if(state % 2 == 0){			//current state is an 'on' state
    132c:	80 fc       	sbrc	r8, 0
    132e:	09 c0       	rjmp	.+18     	; 0x1342 <main+0x48a>
							lcd_goto_xy(13,1);
    1330:	8d e0       	ldi	r24, 0x0D	; 13
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
							print("OFF");
    1338:	8e e9       	ldi	r24, 0x9E	; 158
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
    1340:	04 c0       	rjmp	.+8      	; 0x134a <main+0x492>
						}
						else{						//current state is an 'off' state
							lcd_goto_xy(0,1);
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	61 e0       	ldi	r22, 0x01	; 1
    1346:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
						}
						buttonTriggered = false;
						state ++;
    134a:	08 94       	sec
    134c:	81 1c       	adc	r8, r1
    134e:	91 1c       	adc	r9, r1
						counterRef = counter;
						printVar = true;
						if(state == O11_OFF + 1){	//accounts for end of maintenance mode after outputs
    1350:	20 e2       	ldi	r18, 0x20	; 32
    1352:	82 16       	cp	r8, r18
    1354:	91 04       	cpc	r9, r1
    1356:	09 f0       	breq	.+2      	; 0x135a <main+0x4a2>
    1358:	93 c0       	rjmp	.+294    	; 0x1480 <main+0x5c8>
							clear();
    135a:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
    135e:	df c7       	rjmp	.+4030   	; 0x231e <main+0x1466>
    1360:	84 01       	movw	r16, r8
    1362:	0f 5f       	subi	r16, 0xFF	; 255
    1364:	1f 4f       	sbci	r17, 0xFF	; 255
							state = DONEM;
						}
					}
					else if(state <= M5_B){							//if it's doing the motors
    1366:	3a e2       	ldi	r19, 0x2A	; 42
    1368:	83 16       	cp	r8, r19
    136a:	91 04       	cpc	r9, r1
    136c:	0c f0       	brlt	.+2      	; 0x1370 <main+0x4b8>
    136e:	5e c0       	rjmp	.+188    	; 0x142c <main+0x574>
						buttonTriggered = false;
						state ++;
						counterRef = counter;
						printVar = true;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
    1370:	80 fc       	sbrc	r8, 0
    1372:	09 c0       	rjmp	.+18     	; 0x1386 <main+0x4ce>
							lcd_goto_xy(11,1);
    1374:	8b e0       	ldi	r24, 0x0B	; 11
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
							print("BACK ");
    137c:	82 ea       	ldi	r24, 0xA2	; 162
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
    1384:	13 c0       	rjmp	.+38     	; 0x13ac <main+0x4f4>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
    1386:	06 32       	cpi	r16, 0x26	; 38
    1388:	11 05       	cpc	r17, r1
    138a:	71 f1       	breq	.+92     	; 0x13e8 <main+0x530>
    138c:	07 32       	cpi	r16, 0x27	; 39
    138e:	11 05       	cpc	r17, r1
    1390:	3c f4       	brge	.+14     	; 0x13a0 <main+0x4e8>
    1392:	02 32       	cpi	r16, 0x22	; 34
    1394:	11 05       	cpc	r17, r1
    1396:	61 f0       	breq	.+24     	; 0x13b0 <main+0x4f8>
    1398:	04 32       	cpi	r16, 0x24	; 36
    139a:	11 05       	cpc	r17, r1
    139c:	39 f4       	brne	.+14     	; 0x13ac <main+0x4f4>
    139e:	14 c0       	rjmp	.+40     	; 0x13c8 <main+0x510>
    13a0:	08 32       	cpi	r16, 0x28	; 40
    13a2:	11 05       	cpc	r17, r1
    13a4:	69 f1       	breq	.+90     	; 0x1400 <main+0x548>
    13a6:	0a 32       	cpi	r16, 0x2A	; 42
    13a8:	11 05       	cpc	r17, r1
    13aa:	b1 f1       	breq	.+108    	; 0x1418 <main+0x560>
    13ac:	48 01       	movw	r8, r16
    13ae:	68 c0       	rjmp	.+208    	; 0x1480 <main+0x5c8>
								case M1_B + 1:
									lcd_goto_xy(0,1);
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	61 e0       	ldi	r22, 0x01	; 1
    13b4:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    13b8:	80 91 e3 03 	lds	r24, 0x03E3
    13bc:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    13be:	80 62       	ori	r24, 0x20	; 32
    13c0:	80 93 e3 03 	sts	0x03E3, r24
    13c4:	23 01       	movw	r4, r6
    13c6:	82 c1       	rjmp	.+772    	; 0x16cc <main+0x814>
									break;
								case M2_B + 1:
									lcd_goto_xy(0,1);
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	61 e0       	ldi	r22, 0x01	; 1
    13cc:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    13d0:	80 91 e3 03 	lds	r24, 0x03E3
    13d4:	8f 7d       	andi	r24, 0xDF	; 223
    13d6:	80 93 e3 03 	sts	0x03E3, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    13da:	80 91 df 03 	lds	r24, 0x03DF
    13de:	81 60       	ori	r24, 0x01	; 1
    13e0:	80 93 df 03 	sts	0x03DF, r24
    13e4:	23 01       	movw	r4, r6
    13e6:	8f c1       	rjmp	.+798    	; 0x1706 <main+0x84e>
									break;
								case M3_B + 1:
									lcd_goto_xy(0,1);
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    13f0:	80 91 df 03 	lds	r24, 0x03DF
    13f4:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    13f6:	88 60       	ori	r24, 0x08	; 8
    13f8:	80 93 df 03 	sts	0x03DF, r24
    13fc:	23 01       	movw	r4, r6
    13fe:	9e c1       	rjmp	.+828    	; 0x173c <main+0x884>
									break;
								case M4_B + 1:
									lcd_goto_xy(0,1);
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	61 e0       	ldi	r22, 0x01	; 1
    1404:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    1408:	80 91 df 03 	lds	r24, 0x03DF
    140c:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    140e:	80 64       	ori	r24, 0x40	; 64
    1410:	80 93 df 03 	sts	0x03DF, r24
    1414:	23 01       	movw	r4, r6
    1416:	ad c1       	rjmp	.+858    	; 0x1772 <main+0x8ba>
									break;
								case M5_B + 1:
									clear();
    1418:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    141c:	80 91 df 03 	lds	r24, 0x03DF
    1420:	8f 7b       	andi	r24, 0xBF	; 191
    1422:	80 93 df 03 	sts	0x03DF, r24
									state = DONEM;
									paperTowelMotor = 0;
    1426:	1b 86       	std	Y+11, r1	; 0x0b
    1428:	1a 86       	std	Y+10, r1	; 0x0a
    142a:	79 c7       	rjmp	.+3826   	; 0x231e <main+0x1466>
							}
						}
					}
					else{
						buttonTriggered = false;
						state ++;
    142c:	48 01       	movw	r8, r16
						counterRef = counter;
						printVar = true;
						switch(state){
    142e:	0b 32       	cpi	r16, 0x2B	; 43
    1430:	11 05       	cpc	r17, r1
    1432:	21 f0       	breq	.+8      	; 0x143c <main+0x584>
    1434:	0c 32       	cpi	r16, 0x2C	; 44
    1436:	11 05       	cpc	r17, r1
    1438:	19 f5       	brne	.+70     	; 0x1480 <main+0x5c8>
    143a:	11 c0       	rjmp	.+34     	; 0x145e <main+0x5a6>
							case M2_AND_M3 + 1:
								lcd_goto_xy(0,1);
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	61 e0       	ldi	r22, 0x01	; 1
    1440:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
								u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1444:	90 91 df 03 	lds	r25, 0x03DF
    1448:	9e 7f       	andi	r25, 0xFE	; 254
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    144a:	80 91 e3 03 	lds	r24, 0x03E3
    144e:	80 62       	ori	r24, 0x20	; 32
    1450:	80 93 e3 03 	sts	0x03E3, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    1454:	98 60       	ori	r25, 0x08	; 8
    1456:	90 93 df 03 	sts	0x03DF, r25
    145a:	23 01       	movw	r4, r6
    145c:	b2 c1       	rjmp	.+868    	; 0x17c2 <main+0x90a>
								break;
							case M2_AND_M4 + 1:
								clear();
    145e:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1462:	80 91 e3 03 	lds	r24, 0x03E3
    1466:	8f 7d       	andi	r24, 0xDF	; 223
    1468:	80 93 e3 03 	sts	0x03E3, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    146c:	80 91 df 03 	lds	r24, 0x03DF
    1470:	87 7f       	andi	r24, 0xF7	; 247
    1472:	80 93 df 03 	sts	0x03DF, r24
								state = DONEM;
								fixtureMotor = 0;
    1476:	1d 82       	std	Y+5, r1	; 0x05
    1478:	1c 82       	std	Y+4, r1	; 0x04
								brush2Motor = 0;
    147a:	19 86       	std	Y+9, r1	; 0x09
    147c:	18 86       	std	Y+8, r1	; 0x08
    147e:	4f c7       	rjmp	.+3742   	; 0x231e <main+0x1466>
    1480:	23 01       	movw	r4, r6
						}
					}
				}

				//state actions
				switch (state) {
    1482:	f4 01       	movw	r30, r8
    1484:	ec 32       	cpi	r30, 0x2C	; 44
    1486:	f1 05       	cpc	r31, r1
    1488:	08 f0       	brcs	.+2      	; 0x148c <main+0x5d4>
    148a:	a7 c1       	rjmp	.+846    	; 0x17da <main+0x922>
    148c:	ea 5b       	subi	r30, 0xBA	; 186
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	05 90       	lpm	r0, Z+
    1496:	f4 91       	lpm	r31, Z+
    1498:	e0 2d       	mov	r30, r0
    149a:	09 94       	ijmp
					case S0:
						if(print){
							print("SENSOR 0");
    149c:	88 ea       	ldi	r24, 0xA8	; 168
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    14a4:	8f e0       	ldi	r24, 0x0F	; 15
    14a6:	61 e0       	ldi	r22, 0x01	; 1
    14a8:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
						print(u_inputByte0.bits_in_inputByte0.plate);
    14ac:	80 91 de 03 	lds	r24, 0x03DE
    14b0:	0b c0       	rjmp	.+22     	; 0x14c8 <main+0x610>
						break;
					case S1:
						if(print){
							print("SENSOR 1");
    14b2:	81 eb       	ldi	r24, 0xB1	; 177
    14b4:	91 e0       	ldi	r25, 0x01	; 1
    14b6:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    14ba:	8f e0       	ldi	r24, 0x0F	; 15
    14bc:	61 e0       	ldi	r22, 0x01	; 1
    14be:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
						print(u_inputByte0.bits_in_inputByte0.fixtureLift);
    14c2:	80 91 de 03 	lds	r24, 0x03DE
    14c6:	86 95       	lsr	r24
    14c8:	81 70       	andi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
    14d0:	84 c1       	rjmp	.+776    	; 0x17da <main+0x922>
						break;
					case S2:
						if(print){
							print("SENSOR 2");
    14d2:	8a eb       	ldi	r24, 0xBA	; 186
    14d4:	91 e0       	ldi	r25, 0x01	; 1
    14d6:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    14da:	8f e0       	ldi	r24, 0x0F	; 15
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
						print(u_inputByte0.bits_in_inputByte0.fixtureHome);
    14e2:	80 91 de 03 	lds	r24, 0x03DE
    14e6:	86 95       	lsr	r24
    14e8:	86 95       	lsr	r24
    14ea:	ee cf       	rjmp	.-36     	; 0x14c8 <main+0x610>
						break;
					case S3:
						if(print){
							print("SENSOR 3");
    14ec:	83 ec       	ldi	r24, 0xC3	; 195
    14ee:	91 e0       	ldi	r25, 0x01	; 1
    14f0:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    14f4:	8f e0       	ldi	r24, 0x0F	; 15
    14f6:	61 e0       	ldi	r22, 0x01	; 1
    14f8:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
						print(u_inputByte0.bits_in_inputByte0.fixturePlate);
    14fc:	80 91 de 03 	lds	r24, 0x03DE
    1500:	86 95       	lsr	r24
    1502:	86 95       	lsr	r24
    1504:	86 95       	lsr	r24
    1506:	e0 cf       	rjmp	.-64     	; 0x14c8 <main+0x610>
						break;
					case S4:
						if(print){
							print("SENSOR 4");
    1508:	8c ec       	ldi	r24, 0xCC	; 204
    150a:	91 e0       	ldi	r25, 0x01	; 1
    150c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1510:	8f e0       	ldi	r24, 0x0F	; 15
    1512:	61 e0       	ldi	r22, 0x01	; 1
    1514:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
						print(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
    1518:	80 91 de 03 	lds	r24, 0x03DE
    151c:	82 95       	swap	r24
    151e:	8f 70       	andi	r24, 0x0F	; 15
    1520:	d3 cf       	rjmp	.-90     	; 0x14c8 <main+0x610>
						break;
					case S5:
						if(print){
							print("SENSOR 5");
    1522:	85 ed       	ldi	r24, 0xD5	; 213
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    152a:	8f e0       	ldi	r24, 0x0F	; 15
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
						print(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
    1532:	80 91 de 03 	lds	r24, 0x03DE
    1536:	82 95       	swap	r24
    1538:	86 95       	lsr	r24
    153a:	87 70       	andi	r24, 0x07	; 7
    153c:	c5 cf       	rjmp	.-118    	; 0x14c8 <main+0x610>
						break;
					case S6:
						if(print){
							print("SENSOR 6");
    153e:	8e ed       	ldi	r24, 0xDE	; 222
    1540:	91 e0       	ldi	r25, 0x01	; 1
    1542:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1546:	8f e0       	ldi	r24, 0x0F	; 15
    1548:	61 e0       	ldi	r22, 0x01	; 1
    154a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
						print(u_inputByte0.bits_in_inputByte0.fixtureDry1);
    154e:	80 91 de 03 	lds	r24, 0x03DE
    1552:	82 95       	swap	r24
    1554:	86 95       	lsr	r24
    1556:	86 95       	lsr	r24
    1558:	83 70       	andi	r24, 0x03	; 3
    155a:	b6 cf       	rjmp	.-148    	; 0x14c8 <main+0x610>
						break;
					case S7:
						if(print){
							print("SENSOR 7");
    155c:	87 ee       	ldi	r24, 0xE7	; 231
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1564:	8f e0       	ldi	r24, 0x0F	; 15
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
						print(u_inputByte0.bits_in_inputByte0.fixtureDry2);
    156c:	80 91 de 03 	lds	r24, 0x03DE
    1570:	88 1f       	adc	r24, r24
    1572:	88 27       	eor	r24, r24
    1574:	88 1f       	adc	r24, r24
    1576:	a9 cf       	rjmp	.-174    	; 0x14ca <main+0x612>
						break;
					case O0_ON:
						if(print){
							print("AC POWER     ON ");
    1578:	80 ef       	ldi	r24, 0xF0	; 240
    157a:	91 e0       	ldi	r25, 0x01	; 1
    157c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1580:	80 91 e2 03 	lds	r24, 0x03E2
    1584:	8e 7f       	andi	r24, 0xFE	; 254
    1586:	03 c0       	rjmp	.+6      	; 0x158e <main+0x6d6>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
    1588:	80 91 e2 03 	lds	r24, 0x03E2
    158c:	81 60       	ori	r24, 0x01	; 1
    158e:	80 93 e2 03 	sts	0x03E2, r24
    1592:	23 c1       	rjmp	.+582    	; 0x17da <main+0x922>
						break;
					case O1_ON:
						if(print){
							print("BLOWER       ON  ");
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	92 e0       	ldi	r25, 0x02	; 2
    1598:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    159c:	80 91 e2 03 	lds	r24, 0x03E2
    15a0:	8d 7f       	andi	r24, 0xFD	; 253
    15a2:	f5 cf       	rjmp	.-22     	; 0x158e <main+0x6d6>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    15a4:	80 91 e2 03 	lds	r24, 0x03E2
    15a8:	82 60       	ori	r24, 0x02	; 2
    15aa:	f1 cf       	rjmp	.-30     	; 0x158e <main+0x6d6>
						break;
					case O2_ON:
						if(print){
							print("PLATE STOP   ON ");
    15ac:	83 e1       	ldi	r24, 0x13	; 19
    15ae:	92 e0       	ldi	r25, 0x02	; 2
    15b0:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
    15b4:	80 91 e2 03 	lds	r24, 0x03E2
    15b8:	8b 7f       	andi	r24, 0xFB	; 251
    15ba:	e9 cf       	rjmp	.-46     	; 0x158e <main+0x6d6>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
    15bc:	80 91 e2 03 	lds	r24, 0x03E2
    15c0:	84 60       	ori	r24, 0x04	; 4
    15c2:	e5 cf       	rjmp	.-54     	; 0x158e <main+0x6d6>
						break;
					case O3_ON:
						if(print){
							print("PLATE RAISE  ON ");
    15c4:	84 e2       	ldi	r24, 0x24	; 36
    15c6:	92 e0       	ldi	r25, 0x02	; 2
    15c8:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    15cc:	80 91 e2 03 	lds	r24, 0x03E2
    15d0:	87 7f       	andi	r24, 0xF7	; 247
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <main+0x73a>
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    15d4:	80 91 e2 03 	lds	r24, 0x03E2
    15d8:	88 60       	ori	r24, 0x08	; 8
    15da:	d9 cf       	rjmp	.-78     	; 0x158e <main+0x6d6>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(print){
							print("PLATE LOWER  ON ");
    15dc:	85 e3       	ldi	r24, 0x35	; 53
    15de:	92 e0       	ldi	r25, 0x02	; 2
    15e0:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    15e4:	80 91 e2 03 	lds	r24, 0x03E2
    15e8:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    15ea:	8f 7e       	andi	r24, 0xEF	; 239
    15ec:	d0 cf       	rjmp	.-96     	; 0x158e <main+0x6d6>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    15ee:	80 91 e2 03 	lds	r24, 0x03E2
    15f2:	80 61       	ori	r24, 0x10	; 16
    15f4:	cc cf       	rjmp	.-104    	; 0x158e <main+0x6d6>
						break;
					case O5_ON:
						if(print){
							print("BRUSH1 RAISE ON ");
    15f6:	86 e4       	ldi	r24, 0x46	; 70
    15f8:	92 e0       	ldi	r25, 0x02	; 2
    15fa:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    15fe:	80 91 e2 03 	lds	r24, 0x03E2
    1602:	8f 7d       	andi	r24, 0xDF	; 223
    1604:	0e c0       	rjmp	.+28     	; 0x1622 <main+0x76a>
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1606:	80 91 e2 03 	lds	r24, 0x03E2
    160a:	07 c0       	rjmp	.+14     	; 0x161a <main+0x762>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(print){
							print("BRUSH1 LOWER ON ");
    160c:	87 e5       	ldi	r24, 0x57	; 87
    160e:	92 e0       	ldi	r25, 0x02	; 2
    1610:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1614:	80 91 e2 03 	lds	r24, 0x03E2
    1618:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    161a:	80 62       	ori	r24, 0x20	; 32
    161c:	b8 cf       	rjmp	.-144    	; 0x158e <main+0x6d6>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    161e:	80 91 e2 03 	lds	r24, 0x03E2
    1622:	80 64       	ori	r24, 0x40	; 64
    1624:	b4 cf       	rjmp	.-152    	; 0x158e <main+0x6d6>
						break;
					case O7_ON:
						if(print){
							print("BRUSH2 RAISE ON ");
    1626:	88 e6       	ldi	r24, 0x68	; 104
    1628:	92 e0       	ldi	r25, 0x02	; 2
    162a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    162e:	80 91 e2 03 	lds	r24, 0x03E2
    1632:	8f 77       	andi	r24, 0x7F	; 127
    1634:	80 93 e2 03 	sts	0x03E2, r24
    1638:	0d c0       	rjmp	.+26     	; 0x1654 <main+0x79c>
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(print){
							print("BRUSH2 LOWER ON ");
    163a:	89 e7       	ldi	r24, 0x79	; 121
    163c:	92 e0       	ldi	r25, 0x02	; 2
    163e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1642:	80 91 e0 03 	lds	r24, 0x03E0
    1646:	8e 7f       	andi	r24, 0xFE	; 254
    1648:	80 93 e0 03 	sts	0x03E0, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    164c:	80 91 e2 03 	lds	r24, 0x03E2
    1650:	80 68       	ori	r24, 0x80	; 128
    1652:	9d cf       	rjmp	.-198    	; 0x158e <main+0x6d6>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1654:	80 91 e0 03 	lds	r24, 0x03E0
    1658:	81 60       	ori	r24, 0x01	; 1
    165a:	23 c0       	rjmp	.+70     	; 0x16a2 <main+0x7ea>
						break;
					case O9_ON:
						if(print){
							print("PAPER RAISE  ON ");
    165c:	8a e8       	ldi	r24, 0x8A	; 138
    165e:	92 e0       	ldi	r25, 0x02	; 2
    1660:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1664:	80 91 e0 03 	lds	r24, 0x03E0
    1668:	8d 7f       	andi	r24, 0xFD	; 253
    166a:	0e c0       	rjmp	.+28     	; 0x1688 <main+0x7d0>
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    166c:	80 91 e0 03 	lds	r24, 0x03E0
    1670:	07 c0       	rjmp	.+14     	; 0x1680 <main+0x7c8>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(print){
							print("PAPER LOWER  ON ");
    1672:	8b e9       	ldi	r24, 0x9B	; 155
    1674:	92 e0       	ldi	r25, 0x02	; 2
    1676:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
    167a:	80 91 e0 03 	lds	r24, 0x03E0
    167e:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1680:	82 60       	ori	r24, 0x02	; 2
    1682:	0f c0       	rjmp	.+30     	; 0x16a2 <main+0x7ea>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    1684:	80 91 e0 03 	lds	r24, 0x03E0
    1688:	84 60       	ori	r24, 0x04	; 4
    168a:	0b c0       	rjmp	.+22     	; 0x16a2 <main+0x7ea>
						break;
					case O11_ON:
						if(print){
							print("AIR KNIFE    ON ");
    168c:	8c ea       	ldi	r24, 0xAC	; 172
    168e:	92 e0       	ldi	r25, 0x02	; 2
    1690:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1694:	80 91 e0 03 	lds	r24, 0x03E0
    1698:	87 7f       	andi	r24, 0xF7	; 247
    169a:	03 c0       	rjmp	.+6      	; 0x16a2 <main+0x7ea>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
    169c:	80 91 e0 03 	lds	r24, 0x03E0
    16a0:	88 60       	ori	r24, 0x08	; 8
    16a2:	80 93 e0 03 	sts	0x03E0, r24
    16a6:	99 c0       	rjmp	.+306    	; 0x17da <main+0x922>
						break;
					case M1_F:
						if(print){
							print("LOADING    FRONT");
    16a8:	8d eb       	ldi	r24, 0xBD	; 189
    16aa:	92 e0       	ldi	r25, 0x02	; 2
    16ac:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    16b0:	80 91 e3 03 	lds	r24, 0x03E3
    16b4:	8d 7f       	andi	r24, 0xFD	; 253
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <main+0x806>
						plateLoadMotor =  1;
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
    16b8:	80 91 e3 03 	lds	r24, 0x03E3
    16bc:	82 60       	ori	r24, 0x02	; 2
    16be:	80 93 e3 03 	sts	0x03E3, r24
						plateLoadMotor =  1;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	9b 83       	std	Y+3, r25	; 0x03
    16c8:	8a 83       	std	Y+2, r24	; 0x02
    16ca:	87 c0       	rjmp	.+270    	; 0x17da <main+0x922>
						break;
					case M2_F:
						if(print){
							print("DRIVE      FRONT");
    16cc:	8e ec       	ldi	r24, 0xCE	; 206
    16ce:	92 e0       	ldi	r25, 0x02	; 2
    16d0:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    16d4:	80 91 e3 03 	lds	r24, 0x03E3
    16d8:	8f 7e       	andi	r24, 0xEF	; 239
    16da:	80 93 e3 03 	sts	0x03E3, r24
						fixtureMotor =  1;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9d 83       	std	Y+5, r25	; 0x05
    16e4:	8c 83       	std	Y+4, r24	; 0x04
						plateLoadMotor = 0;
    16e6:	1b 82       	std	Y+3, r1	; 0x03
    16e8:	1a 82       	std	Y+2, r1	; 0x02
    16ea:	22 e2       	ldi	r18, 0x22	; 34
    16ec:	82 2e       	mov	r8, r18
    16ee:	91 2c       	mov	r9, r1
    16f0:	74 c0       	rjmp	.+232    	; 0x17da <main+0x922>
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
    16f2:	80 91 e3 03 	lds	r24, 0x03E3
    16f6:	80 61       	ori	r24, 0x10	; 16
    16f8:	80 93 e3 03 	sts	0x03E3, r24
						fixtureMotor =  1;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	9d 83       	std	Y+5, r25	; 0x05
    1702:	8c 83       	std	Y+4, r24	; 0x04
    1704:	6a c0       	rjmp	.+212    	; 0x17da <main+0x922>
						break;
					case M3_F:
						if(print){
							print("BRUSH1     FRONT");
    1706:	8f ed       	ldi	r24, 0xDF	; 223
    1708:	92 e0       	ldi	r25, 0x02	; 2
    170a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
    170e:	80 91 e3 03 	lds	r24, 0x03E3
    1712:	8f 77       	andi	r24, 0x7F	; 127
    1714:	80 93 e3 03 	sts	0x03E3, r24
						brush1Motor =  1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9f 83       	std	Y+7, r25	; 0x07
    171e:	8e 83       	std	Y+6, r24	; 0x06
						fixtureMotor = 0;
    1720:	1d 82       	std	Y+5, r1	; 0x05
    1722:	1c 82       	std	Y+4, r1	; 0x04
    1724:	94 e2       	ldi	r25, 0x24	; 36
    1726:	89 2e       	mov	r8, r25
    1728:	91 2c       	mov	r9, r1
    172a:	57 c0       	rjmp	.+174    	; 0x17da <main+0x922>
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
    172c:	80 91 e3 03 	lds	r24, 0x03E3
    1730:	80 68       	ori	r24, 0x80	; 128
    1732:	80 93 e3 03 	sts	0x03E3, r24
						brush1Motor =  1;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	40 c0       	rjmp	.+128    	; 0x17bc <main+0x904>
						break;
					case M4_F:
						if(print){
							print("BRUSH2     FRONT");
    173c:	80 ef       	ldi	r24, 0xF0	; 240
    173e:	92 e0       	ldi	r25, 0x02	; 2
    1740:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
    1744:	80 91 df 03 	lds	r24, 0x03DF
    1748:	8b 7f       	andi	r24, 0xFB	; 251
    174a:	80 93 df 03 	sts	0x03DF, r24
						brush2Motor =  1;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	99 87       	std	Y+9, r25	; 0x09
    1754:	88 87       	std	Y+8, r24	; 0x08
						brush1Motor = 0;
    1756:	1f 82       	std	Y+7, r1	; 0x07
    1758:	1e 82       	std	Y+6, r1	; 0x06
    175a:	86 e2       	ldi	r24, 0x26	; 38
    175c:	88 2e       	mov	r8, r24
    175e:	91 2c       	mov	r9, r1
    1760:	3c c0       	rjmp	.+120    	; 0x17da <main+0x922>
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
    1762:	80 91 df 03 	lds	r24, 0x03DF
    1766:	84 60       	ori	r24, 0x04	; 4
    1768:	80 93 df 03 	sts	0x03DF, r24
						brush2Motor =  1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	32 c0       	rjmp	.+100    	; 0x17d6 <main+0x91e>
						break;
					case M5_F:
						if(print){
							print("PAPER      FRONT");
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	93 e0       	ldi	r25, 0x03	; 3
    1776:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    177a:	80 91 df 03 	lds	r24, 0x03DF
    177e:	8f 7d       	andi	r24, 0xDF	; 223
    1780:	80 93 df 03 	sts	0x03DF, r24
						paperTowelMotor =  1;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9b 87       	std	Y+11, r25	; 0x0b
    178a:	8a 87       	std	Y+10, r24	; 0x0a
						brush2Motor = 0;
    178c:	19 86       	std	Y+9, r1	; 0x09
    178e:	18 86       	std	Y+8, r1	; 0x08
    1790:	08 e2       	ldi	r16, 0x28	; 40
    1792:	80 2e       	mov	r8, r16
    1794:	91 2c       	mov	r9, r1
    1796:	21 c0       	rjmp	.+66     	; 0x17da <main+0x922>
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
    1798:	80 91 df 03 	lds	r24, 0x03DF
    179c:	80 62       	ori	r24, 0x20	; 32
    179e:	80 93 df 03 	sts	0x03DF, r24
						paperTowelMotor =  1;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	9b 87       	std	Y+11, r25	; 0x0b
    17a8:	8a 87       	std	Y+10, r24	; 0x0a
    17aa:	17 c0       	rjmp	.+46     	; 0x17da <main+0x922>
						break;
					case M2_AND_M3:
						if(print){
							print("FIXTURE & BRUSH1");
    17ac:	82 e1       	ldi	r24, 0x12	; 18
    17ae:	93 e0       	ldi	r25, 0x03	; 3
    17b0:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						fixtureMotor = 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	9d 83       	std	Y+5, r25	; 0x05
    17ba:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 1;
    17bc:	9f 83       	std	Y+7, r25	; 0x07
    17be:	8e 83       	std	Y+6, r24	; 0x06
    17c0:	0c c0       	rjmp	.+24     	; 0x17da <main+0x922>
						break;
					case M2_AND_M4:
						if(print){
							print("FIXTURE & BRUSH2");
    17c2:	83 e2       	ldi	r24, 0x23	; 35
    17c4:	93 e0       	ldi	r25, 0x03	; 3
    17c6:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
							printVar = false;
						}
						fixtureMotor = 1;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9d 83       	std	Y+5, r25	; 0x05
    17d0:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 0;
    17d2:	1f 82       	std	Y+7, r1	; 0x07
    17d4:	1e 82       	std	Y+6, r1	; 0x06
						brush2Motor = 1;
    17d6:	99 87       	std	Y+9, r25	; 0x09
    17d8:	88 87       	std	Y+8, r24	; 0x08
						break;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    17da:	2a 81       	ldd	r18, Y+2	; 0x02
    17dc:	3b 81       	ldd	r19, Y+3	; 0x03
    17de:	0c 81       	ldd	r16, Y+4	; 0x04
    17e0:	1d 81       	ldd	r17, Y+5	; 0x05
    17e2:	ee 80       	ldd	r14, Y+6	; 0x06
    17e4:	ff 80       	ldd	r15, Y+7	; 0x07
    17e6:	c8 84       	ldd	r12, Y+8	; 0x08
    17e8:	d9 84       	ldd	r13, Y+9	; 0x09
    17ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    17ec:	bb 84       	ldd	r11, Y+11	; 0x0b
    17ee:	c3 01       	movw	r24, r6
    17f0:	b2 01       	movw	r22, r4
    17f2:	40 e0       	ldi	r20, 0x00	; 0
    17f4:	50 e0       	ldi	r21, 0x00	; 0
    17f6:	0e 94 9a 06 	call	0xd34	; 0xd34 <motor_and_write>

				counter ++;
				delay_ms(1);
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>
			counter = 0;
			clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
    1802:	8c e2       	ldi	r24, 0x2C	; 44
    1804:	88 16       	cp	r8, r24
    1806:	91 04       	cpc	r9, r1
    1808:	09 f4       	brne	.+2      	; 0x180c <main+0x954>
    180a:	69 c5       	rjmp	.+2770   	; 0x22de <main+0x1426>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				counter ++;
    180c:	08 94       	sec
    180e:	61 1c       	adc	r6, r1
    1810:	71 1c       	adc	r7, r1
    1812:	b4 cc       	rjmp	.-1688   	; 0x117c <main+0x2c4>
		}
		else{										//If switch is set to Run Mode
		
		bool printVar = true;

		print("NORMAL");
    1814:	84 e3       	ldi	r24, 0x34	; 52
    1816:	93 e0       	ldi	r25, 0x03	; 3
    1818:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
		delay_ms(1000);
    181c:	88 ee       	ldi	r24, 0xE8	; 232
    181e:	93 e0       	ldi	r25, 0x03	; 3
    1820:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>
		
		clear();
    1824:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
		print("SELECT CYCLE");
    1828:	8b e3       	ldi	r24, 0x3B	; 59
    182a:	93 e0       	ldi	r25, 0x03	; 3
    182c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
    1830:	ee 24       	eor	r14, r14
    1832:	ff 24       	eor	r15, r15
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1834:	c7 01       	movw	r24, r14
    1836:	be 01       	movw	r22, r28
    1838:	64 5f       	subi	r22, 0xF4	; 244
    183a:	7f 4f       	sbci	r23, 0xFF	; 255
    183c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    1840:	18 2f       	mov	r17, r24
			counter++;
    1842:	08 94       	sec
    1844:	e1 1c       	adc	r14, r1
    1846:	f1 1c       	adc	r15, r1
			delay_ms(1);
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>
		delay_ms(1000);
		
		clear();
		print("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1850:	11 23       	and	r17, r17
    1852:	81 f3       	breq	.-32     	; 0x1834 <main+0x97c>
			counter++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		clear();
    1854:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
		print("CYCLE:");
    1858:	88 e4       	ldi	r24, 0x48	; 72
    185a:	93 e0       	ldi	r25, 0x03	; 3
    185c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>

		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1860:	80 91 e3 03 	lds	r24, 0x03E3
    1864:	80 62       	ori	r24, 0x20	; 32
    1866:	80 93 e3 03 	sts	0x03E3, r24

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1870:	88 23       	and	r24, r24
    1872:	09 f0       	breq	.+2      	; 0x1876 <main+0x9be>
    1874:	5a c1       	rjmp	.+692    	; 0x1b2a <main+0xc72>
    1876:	82 e0       	ldi	r24, 0x02	; 2
    1878:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    187c:	88 23       	and	r24, r24
    187e:	09 f0       	breq	.+2      	; 0x1882 <main+0x9ca>
    1880:	54 c1       	rjmp	.+680    	; 0x1b2a <main+0xc72>
			lcd_goto_xy(7,0);
    1882:	87 e0       	ldi	r24, 0x07	; 7
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
			print("FIRST B");
    188a:	8f e4       	ldi	r24, 0x4F	; 79
    188c:	93 e0       	ldi	r25, 0x03	; 3
    188e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	9d 83       	std	Y+5, r25	; 0x05
    1898:	8c 83       	std	Y+4, r24	; 0x04
    189a:	80 91 e3 03 	lds	r24, 0x03E3
    189e:	80 62       	ori	r24, 0x20	; 32
    18a0:	80 93 e3 03 	sts	0x03E3, r24
    18a4:	88 24       	eor	r8, r8
    18a6:	99 24       	eor	r9, r9
    18a8:	66 24       	eor	r6, r6
    18aa:	77 24       	eor	r7, r7
    18ac:	44 24       	eor	r4, r4
    18ae:	55 24       	eor	r5, r5
    18b0:	22 24       	eor	r2, r2
    18b2:	33 24       	eor	r3, r3
    18b4:	21 e0       	ldi	r18, 0x01	; 1
    18b6:	2a 8b       	std	Y+18, r18	; 0x12
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    18b8:	84 e4       	ldi	r24, 0x44	; 68
    18ba:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    18c4:	85 e4       	ldi	r24, 0x45	; 69
    18c6:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    18ca:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    18ce:	80 93 de 03 	sts	0x03DE, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    18d2:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    18d6:	80 93 e1 03 	sts	0x03E1, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    18da:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && print){
    18de:	81 14       	cp	r8, r1
    18e0:	91 04       	cpc	r9, r1
    18e2:	99 f0       	breq	.+38     	; 0x190a <main+0xa52>
					lcd_goto_xy(6,1);
    18e4:	86 e0       	ldi	r24, 0x06	; 6
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
					print("     ");
    18ec:	87 e5       	ldi	r24, 0x57	; 87
    18ee:	93 e0       	ldi	r25, 0x03	; 3
    18f0:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					lcd_goto_xy(0,1);
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	61 e0       	ldi	r22, 0x01	; 1
    18f8:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
					print("STATE ");
    18fc:	8d e5       	ldi	r24, 0x5D	; 93
    18fe:	93 e0       	ldi	r25, 0x03	; 3
    1900:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					print(state);
    1904:	c4 01       	movw	r24, r8
    1906:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    190a:	c3 01       	movw	r24, r6
    190c:	be 01       	movw	r22, r28
    190e:	64 5f       	subi	r22, 0xF4	; 244
    1910:	7f 4f       	sbci	r23, 0xFF	; 255
    1912:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    1916:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1918:	c4 01       	movw	r24, r8
    191a:	a3 01       	movw	r20, r6
    191c:	92 01       	movw	r18, r4
    191e:	0e 94 55 03 	call	0x6aa	; 0x6aa <init_trans>
    1922:	88 23       	and	r24, r24
    1924:	21 f0       	breq	.+8      	; 0x192e <main+0xa76>
					buttonTriggered = false;
					state ++;
    1926:	08 94       	sec
    1928:	81 1c       	adc	r8, r1
    192a:	91 1c       	adc	r9, r1
    192c:	23 01       	movw	r4, r6
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    192e:	c4 01       	movw	r24, r8
    1930:	b3 01       	movw	r22, r6
    1932:	a2 01       	movw	r20, r4
    1934:	0e 94 aa 03 	call	0x754	; 0x754 <firstB_trans>
    1938:	88 23       	and	r24, r24
    193a:	61 f0       	breq	.+24     	; 0x1954 <main+0xa9c>
					state ++;
    193c:	08 94       	sec
    193e:	81 1c       	adc	r8, r1
    1940:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    1942:	3a e0       	ldi	r19, 0x0A	; 10
    1944:	83 16       	cp	r8, r19
    1946:	91 04       	cpc	r9, r1
    1948:	b9 f1       	breq	.+110    	; 0x19b8 <main+0xb00>
    194a:	6d e0       	ldi	r22, 0x0D	; 13
    194c:	86 16       	cp	r8, r22
    194e:	91 04       	cpc	r9, r1
    1950:	99 f1       	breq	.+102    	; 0x19b8 <main+0xb00>
    1952:	23 01       	movw	r4, r6
						counterRef = counter;
					printVar = true;
				}

				if(state == B1STOP2 && counter - counterRef > pWait){
    1954:	7e e0       	ldi	r23, 0x0E	; 14
    1956:	87 16       	cp	r8, r23
    1958:	91 04       	cpc	r9, r1
    195a:	61 f4       	brne	.+24     	; 0x1974 <main+0xabc>
    195c:	93 01       	movw	r18, r6
    195e:	24 19       	sub	r18, r4
    1960:	35 09       	sbc	r19, r5
    1962:	80 91 8d 03 	lds	r24, 0x038D
    1966:	90 91 8e 03 	lds	r25, 0x038E
    196a:	82 17       	cp	r24, r18
    196c:	93 07       	cpc	r25, r19
    196e:	24 f5       	brge	.+72     	; 0x19b8 <main+0xb00>
    1970:	23 01       	movw	r4, r6
    1972:	04 c0       	rjmp	.+8      	; 0x197c <main+0xac4>
					state = MOVED1;
					counterRef = counter;
					printVar = true;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1974:	87 e1       	ldi	r24, 0x17	; 23
    1976:	88 16       	cp	r8, r24
    1978:	91 04       	cpc	r9, r1
    197a:	f1 f4       	brne	.+60     	; 0x19b8 <main+0xb00>
    197c:	a3 01       	movw	r20, r6
    197e:	44 19       	sub	r20, r4
    1980:	55 09       	sbc	r21, r5
    1982:	20 91 b9 03 	lds	r18, 0x03B9
    1986:	30 91 ba 03 	lds	r19, 0x03BA
    198a:	80 91 9f 03 	lds	r24, 0x039F
    198e:	90 91 a0 03 	lds	r25, 0x03A0
    1992:	bc 01       	movw	r22, r24
    1994:	26 9f       	mul	r18, r22
    1996:	c0 01       	movw	r24, r0
    1998:	27 9f       	mul	r18, r23
    199a:	90 0d       	add	r25, r0
    199c:	36 9f       	mul	r19, r22
    199e:	90 0d       	add	r25, r0
    19a0:	11 24       	eor	r1, r1
    19a2:	84 17       	cp	r24, r20
    19a4:	95 07       	cpc	r25, r21
    19a6:	2c f4       	brge	.+10     	; 0x19b2 <main+0xafa>
    19a8:	23 01       	movw	r4, r6
    19aa:	18 e1       	ldi	r17, 0x18	; 24
    19ac:	81 2e       	mov	r8, r17
    19ae:	91 2c       	mov	r9, r1
    19b0:	03 c0       	rjmp	.+6      	; 0x19b8 <main+0xb00>
    19b2:	b7 e1       	ldi	r27, 0x17	; 23
    19b4:	8b 2e       	mov	r8, r27
    19b6:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    19b8:	c4 01       	movw	r24, r8
    19ba:	b3 01       	movw	r22, r6
    19bc:	a2 01       	movw	r20, r4
    19be:	91 01       	movw	r18, r2
    19c0:	0e 94 05 05 	call	0xa0a	; 0xa0a <dry_trans>
    19c4:	88 23       	and	r24, r24
    19c6:	51 f0       	breq	.+20     	; 0x19dc <main+0xb24>
					state ++;
    19c8:	08 94       	sec
    19ca:	81 1c       	adc	r8, r1
    19cc:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    19ce:	7a e1       	ldi	r23, 0x1A	; 26
    19d0:	87 16       	cp	r8, r23
    19d2:	91 04       	cpc	r9, r1
    19d4:	11 f4       	brne	.+4      	; 0x19da <main+0xb22>
    19d6:	13 01       	movw	r2, r6
    19d8:	0d c0       	rjmp	.+26     	; 0x19f4 <main+0xb3c>
    19da:	23 01       	movw	r4, r6
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    19dc:	83 e2       	ldi	r24, 0x23	; 35
    19de:	88 16       	cp	r8, r24
    19e0:	91 04       	cpc	r9, r1
    19e2:	41 f4       	brne	.+16     	; 0x19f4 <main+0xb3c>
    19e4:	c3 01       	movw	r24, r6
    19e6:	84 19       	sub	r24, r4
    19e8:	95 09       	sbc	r25, r5
    19ea:	0b 97       	sbiw	r24, 0x0b	; 11
    19ec:	1c f0       	brlt	.+6      	; 0x19f4 <main+0xb3c>
    19ee:	a4 e2       	ldi	r26, 0x24	; 36
    19f0:	8a 2e       	mov	r8, r26
    19f2:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    19f4:	c4 01       	movw	r24, r8
    19f6:	b3 01       	movw	r22, r6
    19f8:	ae 01       	movw	r20, r28
    19fa:	4e 5f       	subi	r20, 0xFE	; 254
    19fc:	5f 4f       	sbci	r21, 0xFF	; 255
    19fe:	9e 01       	movw	r18, r28
    1a00:	2c 5f       	subi	r18, 0xFC	; 252
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	8e 01       	movw	r16, r28
    1a06:	0a 5f       	subi	r16, 0xFA	; 250
    1a08:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0a:	f8 e0       	ldi	r31, 0x08	; 8
    1a0c:	ef 2e       	mov	r14, r31
    1a0e:	f1 2c       	mov	r15, r1
    1a10:	ec 0e       	add	r14, r28
    1a12:	fd 1e       	adc	r15, r29
    1a14:	ea e0       	ldi	r30, 0x0A	; 10
    1a16:	ce 2e       	mov	r12, r30
    1a18:	d1 2c       	mov	r13, r1
    1a1a:	cc 0e       	add	r12, r28
    1a1c:	dd 1e       	adc	r13, r29
    1a1e:	5e 01       	movw	r10, r28
    1a20:	08 94       	sec
    1a22:	a1 1c       	adc	r10, r1
    1a24:	b1 1c       	adc	r11, r1
    1a26:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1a2a:	c4 01       	movw	r24, r8
    1a2c:	b3 01       	movw	r22, r6
    1a2e:	ae 01       	movw	r20, r28
    1a30:	4e 5f       	subi	r20, 0xFE	; 254
    1a32:	5f 4f       	sbci	r21, 0xFF	; 255
    1a34:	9e 01       	movw	r18, r28
    1a36:	2c 5f       	subi	r18, 0xFC	; 252
    1a38:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3a:	8e 01       	movw	r16, r28
    1a3c:	0a 5f       	subi	r16, 0xFA	; 250
    1a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a40:	b8 e0       	ldi	r27, 0x08	; 8
    1a42:	eb 2e       	mov	r14, r27
    1a44:	f1 2c       	mov	r15, r1
    1a46:	ec 0e       	add	r14, r28
    1a48:	fd 1e       	adc	r15, r29
    1a4a:	aa e0       	ldi	r26, 0x0A	; 10
    1a4c:	ca 2e       	mov	r12, r26
    1a4e:	d1 2c       	mov	r13, r1
    1a50:	cc 0e       	add	r12, r28
    1a52:	dd 1e       	adc	r13, r29
    1a54:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    1a58:	2e e0       	ldi	r18, 0x0E	; 14
    1a5a:	82 16       	cp	r8, r18
    1a5c:	91 04       	cpc	r9, r1
    1a5e:	59 f4       	brne	.+22     	; 0x1a76 <main+0xbbe>
					brush1Motor = 0;
    1a60:	1f 82       	std	Y+7, r1	; 0x07
    1a62:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    1a64:	1d 82       	std	Y+5, r1	; 0x05
    1a66:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1a68:	80 91 e2 03 	lds	r24, 0x03E2
    1a6c:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1a6e:	80 62       	ori	r24, 0x20	; 32
    1a70:	80 93 e2 03 	sts	0x03E2, r24
    1a74:	12 c0       	rjmp	.+36     	; 0x1a9a <main+0xbe2>
				}
				if(state == MOVED1){
    1a76:	37 e1       	ldi	r19, 0x17	; 23
    1a78:	83 16       	cp	r8, r19
    1a7a:	91 04       	cpc	r9, r1
    1a7c:	71 f4       	brne	.+28     	; 0x1a9a <main+0xbe2>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1a7e:	80 91 e3 03 	lds	r24, 0x03E3
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1a82:	61 e0       	ldi	r22, 0x01	; 1
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	7d 83       	std	Y+5, r23	; 0x05
    1a88:	6c 83       	std	Y+4, r22	; 0x04
    1a8a:	80 63       	ori	r24, 0x30	; 48
    1a8c:	80 93 e3 03 	sts	0x03E3, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1a90:	80 91 df 03 	lds	r24, 0x03DF
    1a94:	8e 7f       	andi	r24, 0xFE	; 254
    1a96:	80 93 df 03 	sts	0x03DF, r24
				}
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1a9a:	c4 01       	movw	r24, r8
    1a9c:	b3 01       	movw	r22, r6
    1a9e:	ae 01       	movw	r20, r28
    1aa0:	4e 5f       	subi	r20, 0xFE	; 254
    1aa2:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa4:	9e 01       	movw	r18, r28
    1aa6:	2c 5f       	subi	r18, 0xFC	; 252
    1aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aaa:	8e 01       	movw	r16, r28
    1aac:	0a 5f       	subi	r16, 0xFA	; 250
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	f8 e0       	ldi	r31, 0x08	; 8
    1ab2:	ef 2e       	mov	r14, r31
    1ab4:	f1 2c       	mov	r15, r1
    1ab6:	ec 0e       	add	r14, r28
    1ab8:	fd 1e       	adc	r15, r29
    1aba:	ea e0       	ldi	r30, 0x0A	; 10
    1abc:	ce 2e       	mov	r12, r30
    1abe:	d1 2c       	mov	r13, r1
    1ac0:	cc 0e       	add	r12, r28
    1ac2:	dd 1e       	adc	r13, r29
    1ac4:	0e 94 47 02 	call	0x48e	; 0x48e <dry_action>
				if(state == END){
    1ac8:	73 e2       	ldi	r23, 0x23	; 35
    1aca:	87 16       	cp	r8, r23
    1acc:	91 04       	cpc	r9, r1
    1ace:	89 f4       	brne	.+34     	; 0x1af2 <main+0xc3a>
					plateLoadMotor = 0;
    1ad0:	1b 82       	std	Y+3, r1	; 0x03
    1ad2:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1ad4:	80 91 e3 03 	lds	r24, 0x03E3
    1ad8:	8b 7f       	andi	r24, 0xFB	; 251
    1ada:	80 93 e3 03 	sts	0x03E3, r24
					if(print35 == 1){
    1ade:	8a 89       	ldd	r24, Y+18	; 0x12
    1ae0:	88 23       	and	r24, r24
    1ae2:	39 f0       	breq	.+14     	; 0x1af2 <main+0xc3a>
						clear();
    1ae4:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
						print("END OF CYCLE");
    1ae8:	84 e6       	ldi	r24, 0x64	; 100
    1aea:	93 e0       	ldi	r25, 0x03	; 3
    1aec:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
    1af0:	1a 8a       	std	Y+18, r1	; 0x12
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1af2:	2a 81       	ldd	r18, Y+2	; 0x02
    1af4:	3b 81       	ldd	r19, Y+3	; 0x03
    1af6:	0c 81       	ldd	r16, Y+4	; 0x04
    1af8:	1d 81       	ldd	r17, Y+5	; 0x05
    1afa:	ee 80       	ldd	r14, Y+6	; 0x06
    1afc:	ff 80       	ldd	r15, Y+7	; 0x07
    1afe:	c8 84       	ldd	r12, Y+8	; 0x08
    1b00:	d9 84       	ldd	r13, Y+9	; 0x09
    1b02:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b04:	bb 84       	ldd	r11, Y+11	; 0x0b
    1b06:	c3 01       	movw	r24, r6
    1b08:	b2 01       	movw	r22, r4
    1b0a:	a1 01       	movw	r20, r2
    1b0c:	0e 94 9a 06 	call	0xd34	; 0xd34 <motor_and_write>

				counter ++;
				delay_ms(1);
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			print("FIRST B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1b18:	24 e2       	ldi	r18, 0x24	; 36
    1b1a:	82 16       	cp	r8, r18
    1b1c:	91 04       	cpc	r9, r1
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <main+0xc6a>
    1b20:	de c3       	rjmp	.+1980   	; 0x22de <main+0x1426>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				counter ++;
    1b22:	08 94       	sec
    1b24:	61 1c       	adc	r6, r1
    1b26:	71 1c       	adc	r7, r1
    1b28:	c7 ce       	rjmp	.-626    	; 0x18b8 <main+0xa00>
				delay_ms(1);
   		 	}
		}


		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1b30:	88 23       	and	r24, r24
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <main+0xc7e>
    1b34:	2a c1       	rjmp	.+596    	; 0x1d8a <main+0xed2>
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1b3c:	88 23       	and	r24, r24
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <main+0xc8a>
    1b40:	24 c1       	rjmp	.+584    	; 0x1d8a <main+0xed2>
			lcd_goto_xy(7,0);
    1b42:	87 e0       	ldi	r24, 0x07	; 7
    1b44:	60 e0       	ldi	r22, 0x00	; 0
    1b46:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
			print("SECOND B");
    1b4a:	81 e7       	ldi	r24, 0x71	; 113
    1b4c:	93 e0       	ldi	r25, 0x03	; 3
    1b4e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9d 83       	std	Y+5, r25	; 0x05
    1b58:	8c 83       	std	Y+4, r24	; 0x04
    1b5a:	80 91 e3 03 	lds	r24, 0x03E3
    1b5e:	80 62       	ori	r24, 0x20	; 32
    1b60:	80 93 e3 03 	sts	0x03E3, r24
    1b64:	88 24       	eor	r8, r8
    1b66:	99 24       	eor	r9, r9
    1b68:	66 24       	eor	r6, r6
    1b6a:	77 24       	eor	r7, r7
    1b6c:	44 24       	eor	r4, r4
    1b6e:	55 24       	eor	r5, r5
    1b70:	22 24       	eor	r2, r2
    1b72:	33 24       	eor	r3, r3
    1b74:	31 e0       	ldi	r19, 0x01	; 1
    1b76:	38 8b       	std	Y+16, r19	; 0x10
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1b78:	84 e4       	ldi	r24, 0x44	; 68
    1b7a:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1b84:	85 e4       	ldi	r24, 0x45	; 69
    1b86:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1b8a:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1b8e:	80 93 de 03 	sts	0x03DE, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1b92:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1b96:	80 93 e1 03 	sts	0x03E1, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1b9a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && print){
    1b9e:	81 14       	cp	r8, r1
    1ba0:	91 04       	cpc	r9, r1
    1ba2:	99 f0       	breq	.+38     	; 0x1bca <main+0xd12>
					lcd_goto_xy(6,1);
    1ba4:	86 e0       	ldi	r24, 0x06	; 6
    1ba6:	61 e0       	ldi	r22, 0x01	; 1
    1ba8:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
					print("     ");
    1bac:	87 e5       	ldi	r24, 0x57	; 87
    1bae:	93 e0       	ldi	r25, 0x03	; 3
    1bb0:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					lcd_goto_xy(0,1);
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	61 e0       	ldi	r22, 0x01	; 1
    1bb8:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
					print("STATE ");
    1bbc:	8d e5       	ldi	r24, 0x5D	; 93
    1bbe:	93 e0       	ldi	r25, 0x03	; 3
    1bc0:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					print(state);
    1bc4:	c4 01       	movw	r24, r8
    1bc6:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1bca:	c3 01       	movw	r24, r6
    1bcc:	be 01       	movw	r22, r28
    1bce:	64 5f       	subi	r22, 0xF4	; 244
    1bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    1bd6:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1bd8:	c4 01       	movw	r24, r8
    1bda:	a3 01       	movw	r20, r6
    1bdc:	92 01       	movw	r18, r4
    1bde:	0e 94 55 03 	call	0x6aa	; 0x6aa <init_trans>
    1be2:	88 23       	and	r24, r24
    1be4:	21 f0       	breq	.+8      	; 0x1bee <main+0xd36>
					buttonTriggered = false;
					state ++;
    1be6:	08 94       	sec
    1be8:	81 1c       	adc	r8, r1
    1bea:	91 1c       	adc	r9, r1
    1bec:	23 01       	movw	r4, r6
					counterRef = counter;
					printVar = true;
				}

				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1bee:	66 e0       	ldi	r22, 0x06	; 6
    1bf0:	86 16       	cp	r8, r22
    1bf2:	91 04       	cpc	r9, r1
    1bf4:	d1 f4       	brne	.+52     	; 0x1c2a <main+0xd72>
    1bf6:	a3 01       	movw	r20, r6
    1bf8:	44 19       	sub	r20, r4
    1bfa:	55 09       	sbc	r21, r5
    1bfc:	20 91 bb 03 	lds	r18, 0x03BB
    1c00:	30 91 bc 03 	lds	r19, 0x03BC
    1c04:	80 91 9f 03 	lds	r24, 0x039F
    1c08:	90 91 a0 03 	lds	r25, 0x03A0
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	26 9f       	mul	r18, r22
    1c10:	c0 01       	movw	r24, r0
    1c12:	27 9f       	mul	r18, r23
    1c14:	90 0d       	add	r25, r0
    1c16:	36 9f       	mul	r19, r22
    1c18:	90 0d       	add	r25, r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	84 17       	cp	r24, r20
    1c1e:	95 07       	cpc	r25, r21
    1c20:	24 f4       	brge	.+8      	; 0x1c2a <main+0xd72>
    1c22:	23 01       	movw	r4, r6
    1c24:	bf e0       	ldi	r27, 0x0F	; 15
    1c26:	8b 2e       	mov	r8, r27
    1c28:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}

				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    1c2a:	c4 01       	movw	r24, r8
    1c2c:	b3 01       	movw	r22, r6
    1c2e:	a2 01       	movw	r20, r4
    1c30:	0e 94 50 04 	call	0x8a0	; 0x8a0 <secondB_trans>
    1c34:	88 23       	and	r24, r24
    1c36:	21 f0       	breq	.+8      	; 0x1c40 <main+0xd88>
					state ++;
    1c38:	08 94       	sec
    1c3a:	81 1c       	adc	r8, r1
    1c3c:	91 1c       	adc	r9, r1
    1c3e:	23 01       	movw	r4, r6
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1c40:	c4 01       	movw	r24, r8
    1c42:	b3 01       	movw	r22, r6
    1c44:	a2 01       	movw	r20, r4
    1c46:	91 01       	movw	r18, r2
    1c48:	0e 94 05 05 	call	0xa0a	; 0xa0a <dry_trans>
    1c4c:	88 23       	and	r24, r24
    1c4e:	51 f0       	breq	.+20     	; 0x1c64 <main+0xdac>
					state ++;
    1c50:	08 94       	sec
    1c52:	81 1c       	adc	r8, r1
    1c54:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    1c56:	7a e1       	ldi	r23, 0x1A	; 26
    1c58:	87 16       	cp	r8, r23
    1c5a:	91 04       	cpc	r9, r1
    1c5c:	11 f4       	brne	.+4      	; 0x1c62 <main+0xdaa>
    1c5e:	13 01       	movw	r2, r6
    1c60:	0d c0       	rjmp	.+26     	; 0x1c7c <main+0xdc4>
    1c62:	23 01       	movw	r4, r6
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    1c64:	83 e2       	ldi	r24, 0x23	; 35
    1c66:	88 16       	cp	r8, r24
    1c68:	91 04       	cpc	r9, r1
    1c6a:	41 f4       	brne	.+16     	; 0x1c7c <main+0xdc4>
    1c6c:	c3 01       	movw	r24, r6
    1c6e:	84 19       	sub	r24, r4
    1c70:	95 09       	sbc	r25, r5
    1c72:	0b 97       	sbiw	r24, 0x0b	; 11
    1c74:	1c f0       	brlt	.+6      	; 0x1c7c <main+0xdc4>
    1c76:	a4 e2       	ldi	r26, 0x24	; 36
    1c78:	8a 2e       	mov	r8, r26
    1c7a:	91 2c       	mov	r9, r1
				}


				//state actions
				
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1c7c:	c4 01       	movw	r24, r8
    1c7e:	b3 01       	movw	r22, r6
    1c80:	ae 01       	movw	r20, r28
    1c82:	4e 5f       	subi	r20, 0xFE	; 254
    1c84:	5f 4f       	sbci	r21, 0xFF	; 255
    1c86:	9e 01       	movw	r18, r28
    1c88:	2c 5f       	subi	r18, 0xFC	; 252
    1c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8c:	8e 01       	movw	r16, r28
    1c8e:	0a 5f       	subi	r16, 0xFA	; 250
    1c90:	1f 4f       	sbci	r17, 0xFF	; 255
    1c92:	f8 e0       	ldi	r31, 0x08	; 8
    1c94:	ef 2e       	mov	r14, r31
    1c96:	f1 2c       	mov	r15, r1
    1c98:	ec 0e       	add	r14, r28
    1c9a:	fd 1e       	adc	r15, r29
    1c9c:	ea e0       	ldi	r30, 0x0A	; 10
    1c9e:	ce 2e       	mov	r12, r30
    1ca0:	d1 2c       	mov	r13, r1
    1ca2:	cc 0e       	add	r12, r28
    1ca4:	dd 1e       	adc	r13, r29
    1ca6:	5e 01       	movw	r10, r28
    1ca8:	08 94       	sec
    1caa:	a1 1c       	adc	r10, r1
    1cac:	b1 1c       	adc	r11, r1
    1cae:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <init_action>
				if(state == MOVEC1){
    1cb2:	26 e0       	ldi	r18, 0x06	; 6
    1cb4:	82 16       	cp	r8, r18
    1cb6:	91 04       	cpc	r9, r1
    1cb8:	49 f4       	brne	.+18     	; 0x1ccc <main+0xe14>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1cba:	80 91 e3 03 	lds	r24, 0x03E3
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	7d 83       	std	Y+5, r23	; 0x05
    1cc4:	6c 83       	std	Y+4, r22	; 0x04
    1cc6:	80 63       	ori	r24, 0x30	; 48
    1cc8:	80 93 e3 03 	sts	0x03E3, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1ccc:	c4 01       	movw	r24, r8
    1cce:	b3 01       	movw	r22, r6
    1cd0:	ae 01       	movw	r20, r28
    1cd2:	4e 5f       	subi	r20, 0xFE	; 254
    1cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd6:	9e 01       	movw	r18, r28
    1cd8:	2c 5f       	subi	r18, 0xFC	; 252
    1cda:	3f 4f       	sbci	r19, 0xFF	; 255
    1cdc:	8e 01       	movw	r16, r28
    1cde:	0a 5f       	subi	r16, 0xFA	; 250
    1ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce2:	b8 e0       	ldi	r27, 0x08	; 8
    1ce4:	eb 2e       	mov	r14, r27
    1ce6:	f1 2c       	mov	r15, r1
    1ce8:	ec 0e       	add	r14, r28
    1cea:	fd 1e       	adc	r15, r29
    1cec:	aa e0       	ldi	r26, 0x0A	; 10
    1cee:	ca 2e       	mov	r12, r26
    1cf0:	d1 2c       	mov	r13, r1
    1cf2:	cc 0e       	add	r12, r28
    1cf4:	dd 1e       	adc	r13, r29
    1cf6:	0e 94 c8 01 	call	0x390	; 0x390 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1cfa:	c4 01       	movw	r24, r8
    1cfc:	b3 01       	movw	r22, r6
    1cfe:	ae 01       	movw	r20, r28
    1d00:	4e 5f       	subi	r20, 0xFE	; 254
    1d02:	5f 4f       	sbci	r21, 0xFF	; 255
    1d04:	9e 01       	movw	r18, r28
    1d06:	2c 5f       	subi	r18, 0xFC	; 252
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	8e 01       	movw	r16, r28
    1d0c:	0a 5f       	subi	r16, 0xFA	; 250
    1d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d10:	f8 e0       	ldi	r31, 0x08	; 8
    1d12:	ef 2e       	mov	r14, r31
    1d14:	f1 2c       	mov	r15, r1
    1d16:	ec 0e       	add	r14, r28
    1d18:	fd 1e       	adc	r15, r29
    1d1a:	ea e0       	ldi	r30, 0x0A	; 10
    1d1c:	ce 2e       	mov	r12, r30
    1d1e:	d1 2c       	mov	r13, r1
    1d20:	cc 0e       	add	r12, r28
    1d22:	dd 1e       	adc	r13, r29
    1d24:	0e 94 47 02 	call	0x48e	; 0x48e <dry_action>
				if(state == END){
    1d28:	73 e2       	ldi	r23, 0x23	; 35
    1d2a:	87 16       	cp	r8, r23
    1d2c:	91 04       	cpc	r9, r1
    1d2e:	89 f4       	brne	.+34     	; 0x1d52 <main+0xe9a>
					plateLoadMotor = 0;
    1d30:	1b 82       	std	Y+3, r1	; 0x03
    1d32:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1d34:	80 91 e3 03 	lds	r24, 0x03E3
    1d38:	8b 7f       	andi	r24, 0xFB	; 251
    1d3a:	80 93 e3 03 	sts	0x03E3, r24
					if(print35 == 1){
    1d3e:	88 89       	ldd	r24, Y+16	; 0x10
    1d40:	88 23       	and	r24, r24
    1d42:	39 f0       	breq	.+14     	; 0x1d52 <main+0xe9a>
						clear();
    1d44:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
						print("END OF CYCLE");
    1d48:	84 e6       	ldi	r24, 0x64	; 100
    1d4a:	93 e0       	ldi	r25, 0x03	; 3
    1d4c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
    1d50:	18 8a       	std	Y+16, r1	; 0x10
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1d52:	2a 81       	ldd	r18, Y+2	; 0x02
    1d54:	3b 81       	ldd	r19, Y+3	; 0x03
    1d56:	0c 81       	ldd	r16, Y+4	; 0x04
    1d58:	1d 81       	ldd	r17, Y+5	; 0x05
    1d5a:	ee 80       	ldd	r14, Y+6	; 0x06
    1d5c:	ff 80       	ldd	r15, Y+7	; 0x07
    1d5e:	c8 84       	ldd	r12, Y+8	; 0x08
    1d60:	d9 84       	ldd	r13, Y+9	; 0x09
    1d62:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d64:	bb 84       	ldd	r11, Y+11	; 0x0b
    1d66:	c3 01       	movw	r24, r6
    1d68:	b2 01       	movw	r22, r4
    1d6a:	a1 01       	movw	r20, r2
    1d6c:	0e 94 9a 06 	call	0xd34	; 0xd34 <motor_and_write>

				counter ++;
				delay_ms(1);
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>

		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			print("SECOND B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1d78:	24 e2       	ldi	r18, 0x24	; 36
    1d7a:	82 16       	cp	r8, r18
    1d7c:	91 04       	cpc	r9, r1
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <main+0xeca>
    1d80:	ae c2       	rjmp	.+1372   	; 0x22de <main+0x1426>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				counter ++;
    1d82:	08 94       	sec
    1d84:	61 1c       	adc	r6, r1
    1d86:	71 1c       	adc	r7, r1
    1d88:	f7 ce       	rjmp	.-530    	; 0x1b78 <main+0xcc0>
				delay_ms(1);
   		 	}
		}


		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1d90:	88 23       	and	r24, r24
    1d92:	09 f0       	breq	.+2      	; 0x1d96 <main+0xede>
    1d94:	49 c1       	rjmp	.+658    	; 0x2028 <main+0x1170>
    1d96:	82 e0       	ldi	r24, 0x02	; 2
    1d98:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1d9c:	88 23       	and	r24, r24
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <main+0xeea>
    1da0:	43 c1       	rjmp	.+646    	; 0x2028 <main+0x1170>
			lcd_goto_xy(7,0);
    1da2:	87 e0       	ldi	r24, 0x07	; 7
    1da4:	60 e0       	ldi	r22, 0x00	; 0
    1da6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
			print("BOTH B");
    1daa:	8a e7       	ldi	r24, 0x7A	; 122
    1dac:	93 e0       	ldi	r25, 0x03	; 3
    1dae:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9d 83       	std	Y+5, r25	; 0x05
    1db8:	8c 83       	std	Y+4, r24	; 0x04
    1dba:	80 91 e3 03 	lds	r24, 0x03E3
    1dbe:	80 62       	ori	r24, 0x20	; 32
    1dc0:	80 93 e3 03 	sts	0x03E3, r24
    1dc4:	88 24       	eor	r8, r8
    1dc6:	99 24       	eor	r9, r9
    1dc8:	66 24       	eor	r6, r6
    1dca:	77 24       	eor	r7, r7
    1dcc:	44 24       	eor	r4, r4
    1dce:	55 24       	eor	r5, r5
    1dd0:	22 24       	eor	r2, r2
    1dd2:	33 24       	eor	r3, r3
    1dd4:	31 e0       	ldi	r19, 0x01	; 1
    1dd6:	3f 87       	std	Y+15, r19	; 0x0f
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1dd8:	84 e4       	ldi	r24, 0x44	; 68
    1dda:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1de4:	85 e4       	ldi	r24, 0x45	; 69
    1de6:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1dea:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1dee:	80 93 de 03 	sts	0x03DE, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1df2:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1df6:	80 93 e1 03 	sts	0x03E1, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1dfa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && print){
    1dfe:	81 14       	cp	r8, r1
    1e00:	91 04       	cpc	r9, r1
    1e02:	99 f0       	breq	.+38     	; 0x1e2a <main+0xf72>
					lcd_goto_xy(6,1);
    1e04:	86 e0       	ldi	r24, 0x06	; 6
    1e06:	61 e0       	ldi	r22, 0x01	; 1
    1e08:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
					print("       ");
    1e0c:	81 e8       	ldi	r24, 0x81	; 129
    1e0e:	93 e0       	ldi	r25, 0x03	; 3
    1e10:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					lcd_goto_xy(0,1);
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	61 e0       	ldi	r22, 0x01	; 1
    1e18:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
					print("STATE ");
    1e1c:	8d e5       	ldi	r24, 0x5D	; 93
    1e1e:	93 e0       	ldi	r25, 0x03	; 3
    1e20:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					print(state);
    1e24:	c4 01       	movw	r24, r8
    1e26:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1e2a:	c3 01       	movw	r24, r6
    1e2c:	be 01       	movw	r22, r28
    1e2e:	64 5f       	subi	r22, 0xF4	; 244
    1e30:	7f 4f       	sbci	r23, 0xFF	; 255
    1e32:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    1e36:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1e38:	c4 01       	movw	r24, r8
    1e3a:	a3 01       	movw	r20, r6
    1e3c:	92 01       	movw	r18, r4
    1e3e:	0e 94 55 03 	call	0x6aa	; 0x6aa <init_trans>
    1e42:	88 23       	and	r24, r24
    1e44:	21 f0       	breq	.+8      	; 0x1e4e <main+0xf96>
					buttonTriggered = false;
					state ++;
    1e46:	08 94       	sec
    1e48:	81 1c       	adc	r8, r1
    1e4a:	91 1c       	adc	r9, r1
    1e4c:	23 01       	movw	r4, r6
					printVar = true;
				}

				
				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    1e4e:	c4 01       	movw	r24, r8
    1e50:	b3 01       	movw	r22, r6
    1e52:	a2 01       	movw	r20, r4
    1e54:	0e 94 aa 03 	call	0x754	; 0x754 <firstB_trans>
    1e58:	88 23       	and	r24, r24
    1e5a:	61 f0       	breq	.+24     	; 0x1e74 <main+0xfbc>
					state ++;
    1e5c:	08 94       	sec
    1e5e:	81 1c       	adc	r8, r1
    1e60:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    1e62:	6a e0       	ldi	r22, 0x0A	; 10
    1e64:	86 16       	cp	r8, r22
    1e66:	91 04       	cpc	r9, r1
    1e68:	b9 f0       	breq	.+46     	; 0x1e98 <main+0xfe0>
    1e6a:	7d e0       	ldi	r23, 0x0D	; 13
    1e6c:	87 16       	cp	r8, r23
    1e6e:	91 04       	cpc	r9, r1
    1e70:	99 f0       	breq	.+38     	; 0x1e98 <main+0xfe0>
    1e72:	23 01       	movw	r4, r6
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    1e74:	8e e0       	ldi	r24, 0x0E	; 14
    1e76:	88 16       	cp	r8, r24
    1e78:	91 04       	cpc	r9, r1
    1e7a:	71 f4       	brne	.+28     	; 0x1e98 <main+0xfe0>
    1e7c:	93 01       	movw	r18, r6
    1e7e:	24 19       	sub	r18, r4
    1e80:	35 09       	sbc	r19, r5
    1e82:	80 91 8d 03 	lds	r24, 0x038D
    1e86:	90 91 8e 03 	lds	r25, 0x038E
    1e8a:	82 17       	cp	r24, r18
    1e8c:	93 07       	cpc	r25, r19
    1e8e:	24 f4       	brge	.+8      	; 0x1e98 <main+0xfe0>
    1e90:	23 01       	movw	r4, r6
    1e92:	0f e0       	ldi	r16, 0x0F	; 15
    1e94:	80 2e       	mov	r8, r16
    1e96:	91 2c       	mov	r9, r1
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    1e98:	c4 01       	movw	r24, r8
    1e9a:	b3 01       	movw	r22, r6
    1e9c:	a2 01       	movw	r20, r4
    1e9e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <secondB_trans>
    1ea2:	88 23       	and	r24, r24
    1ea4:	21 f0       	breq	.+8      	; 0x1eae <main+0xff6>
					state ++;
    1ea6:	08 94       	sec
    1ea8:	81 1c       	adc	r8, r1
    1eaa:	91 1c       	adc	r9, r1
    1eac:	23 01       	movw	r4, r6
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1eae:	c4 01       	movw	r24, r8
    1eb0:	b3 01       	movw	r22, r6
    1eb2:	a2 01       	movw	r20, r4
    1eb4:	91 01       	movw	r18, r2
    1eb6:	0e 94 05 05 	call	0xa0a	; 0xa0a <dry_trans>
    1eba:	88 23       	and	r24, r24
    1ebc:	51 f0       	breq	.+20     	; 0x1ed2 <main+0x101a>
					state ++;
    1ebe:	08 94       	sec
    1ec0:	81 1c       	adc	r8, r1
    1ec2:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    1ec4:	2a e1       	ldi	r18, 0x1A	; 26
    1ec6:	82 16       	cp	r8, r18
    1ec8:	91 04       	cpc	r9, r1
    1eca:	11 f4       	brne	.+4      	; 0x1ed0 <main+0x1018>
    1ecc:	13 01       	movw	r2, r6
    1ece:	0d c0       	rjmp	.+26     	; 0x1eea <main+0x1032>
    1ed0:	23 01       	movw	r4, r6
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    1ed2:	33 e2       	ldi	r19, 0x23	; 35
    1ed4:	83 16       	cp	r8, r19
    1ed6:	91 04       	cpc	r9, r1
    1ed8:	41 f4       	brne	.+16     	; 0x1eea <main+0x1032>
    1eda:	c3 01       	movw	r24, r6
    1edc:	84 19       	sub	r24, r4
    1ede:	95 09       	sbc	r25, r5
    1ee0:	0b 97       	sbiw	r24, 0x0b	; 11
    1ee2:	1c f0       	brlt	.+6      	; 0x1eea <main+0x1032>
    1ee4:	14 e2       	ldi	r17, 0x24	; 36
    1ee6:	81 2e       	mov	r8, r17
    1ee8:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1eea:	c4 01       	movw	r24, r8
    1eec:	b3 01       	movw	r22, r6
    1eee:	ae 01       	movw	r20, r28
    1ef0:	4e 5f       	subi	r20, 0xFE	; 254
    1ef2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef4:	9e 01       	movw	r18, r28
    1ef6:	2c 5f       	subi	r18, 0xFC	; 252
    1ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    1efa:	8e 01       	movw	r16, r28
    1efc:	0a 5f       	subi	r16, 0xFA	; 250
    1efe:	1f 4f       	sbci	r17, 0xFF	; 255
    1f00:	b8 e0       	ldi	r27, 0x08	; 8
    1f02:	eb 2e       	mov	r14, r27
    1f04:	f1 2c       	mov	r15, r1
    1f06:	ec 0e       	add	r14, r28
    1f08:	fd 1e       	adc	r15, r29
    1f0a:	aa e0       	ldi	r26, 0x0A	; 10
    1f0c:	ca 2e       	mov	r12, r26
    1f0e:	d1 2c       	mov	r13, r1
    1f10:	cc 0e       	add	r12, r28
    1f12:	dd 1e       	adc	r13, r29
    1f14:	5e 01       	movw	r10, r28
    1f16:	08 94       	sec
    1f18:	a1 1c       	adc	r10, r1
    1f1a:	b1 1c       	adc	r11, r1
    1f1c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1f20:	c4 01       	movw	r24, r8
    1f22:	b3 01       	movw	r22, r6
    1f24:	ae 01       	movw	r20, r28
    1f26:	4e 5f       	subi	r20, 0xFE	; 254
    1f28:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2a:	9e 01       	movw	r18, r28
    1f2c:	2c 5f       	subi	r18, 0xFC	; 252
    1f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f30:	8e 01       	movw	r16, r28
    1f32:	0a 5f       	subi	r16, 0xFA	; 250
    1f34:	1f 4f       	sbci	r17, 0xFF	; 255
    1f36:	f8 e0       	ldi	r31, 0x08	; 8
    1f38:	ef 2e       	mov	r14, r31
    1f3a:	f1 2c       	mov	r15, r1
    1f3c:	ec 0e       	add	r14, r28
    1f3e:	fd 1e       	adc	r15, r29
    1f40:	ea e0       	ldi	r30, 0x0A	; 10
    1f42:	ce 2e       	mov	r12, r30
    1f44:	d1 2c       	mov	r13, r1
    1f46:	cc 0e       	add	r12, r28
    1f48:	dd 1e       	adc	r13, r29
    1f4a:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    1f4e:	6e e0       	ldi	r22, 0x0E	; 14
    1f50:	86 16       	cp	r8, r22
    1f52:	91 04       	cpc	r9, r1
    1f54:	51 f4       	brne	.+20     	; 0x1f6a <main+0x10b2>
					brush1Motor = 0;
    1f56:	1f 82       	std	Y+7, r1	; 0x07
    1f58:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    1f5a:	1d 82       	std	Y+5, r1	; 0x05
    1f5c:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1f5e:	80 91 e2 03 	lds	r24, 0x03E2
    1f62:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1f64:	80 62       	ori	r24, 0x20	; 32
    1f66:	80 93 e2 03 	sts	0x03E2, r24
				}
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1f6a:	c4 01       	movw	r24, r8
    1f6c:	b3 01       	movw	r22, r6
    1f6e:	ae 01       	movw	r20, r28
    1f70:	4e 5f       	subi	r20, 0xFE	; 254
    1f72:	5f 4f       	sbci	r21, 0xFF	; 255
    1f74:	9e 01       	movw	r18, r28
    1f76:	2c 5f       	subi	r18, 0xFC	; 252
    1f78:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7a:	8e 01       	movw	r16, r28
    1f7c:	0a 5f       	subi	r16, 0xFA	; 250
    1f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f80:	b8 e0       	ldi	r27, 0x08	; 8
    1f82:	eb 2e       	mov	r14, r27
    1f84:	f1 2c       	mov	r15, r1
    1f86:	ec 0e       	add	r14, r28
    1f88:	fd 1e       	adc	r15, r29
    1f8a:	aa e0       	ldi	r26, 0x0A	; 10
    1f8c:	ca 2e       	mov	r12, r26
    1f8e:	d1 2c       	mov	r13, r1
    1f90:	cc 0e       	add	r12, r28
    1f92:	dd 1e       	adc	r13, r29
    1f94:	0e 94 c8 01 	call	0x390	; 0x390 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1f98:	c4 01       	movw	r24, r8
    1f9a:	b3 01       	movw	r22, r6
    1f9c:	ae 01       	movw	r20, r28
    1f9e:	4e 5f       	subi	r20, 0xFE	; 254
    1fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa2:	9e 01       	movw	r18, r28
    1fa4:	2c 5f       	subi	r18, 0xFC	; 252
    1fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa8:	8e 01       	movw	r16, r28
    1faa:	0a 5f       	subi	r16, 0xFA	; 250
    1fac:	1f 4f       	sbci	r17, 0xFF	; 255
    1fae:	f8 e0       	ldi	r31, 0x08	; 8
    1fb0:	ef 2e       	mov	r14, r31
    1fb2:	f1 2c       	mov	r15, r1
    1fb4:	ec 0e       	add	r14, r28
    1fb6:	fd 1e       	adc	r15, r29
    1fb8:	ea e0       	ldi	r30, 0x0A	; 10
    1fba:	ce 2e       	mov	r12, r30
    1fbc:	d1 2c       	mov	r13, r1
    1fbe:	cc 0e       	add	r12, r28
    1fc0:	dd 1e       	adc	r13, r29
    1fc2:	0e 94 47 02 	call	0x48e	; 0x48e <dry_action>
				if(state == END){
    1fc6:	73 e2       	ldi	r23, 0x23	; 35
    1fc8:	87 16       	cp	r8, r23
    1fca:	91 04       	cpc	r9, r1
    1fcc:	89 f4       	brne	.+34     	; 0x1ff0 <main+0x1138>
					plateLoadMotor = 0;
    1fce:	1b 82       	std	Y+3, r1	; 0x03
    1fd0:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1fd2:	80 91 e3 03 	lds	r24, 0x03E3
    1fd6:	8b 7f       	andi	r24, 0xFB	; 251
    1fd8:	80 93 e3 03 	sts	0x03E3, r24
					if(print35 == 1){
    1fdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fde:	88 23       	and	r24, r24
    1fe0:	39 f0       	breq	.+14     	; 0x1ff0 <main+0x1138>
						clear();
    1fe2:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
						print("END OF CYCLE");
    1fe6:	84 e6       	ldi	r24, 0x64	; 100
    1fe8:	93 e0       	ldi	r25, 0x03	; 3
    1fea:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
    1fee:	1f 86       	std	Y+15, r1	; 0x0f
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1ff0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ff2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ff4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ff6:	1d 81       	ldd	r17, Y+5	; 0x05
    1ff8:	ee 80       	ldd	r14, Y+6	; 0x06
    1ffa:	ff 80       	ldd	r15, Y+7	; 0x07
    1ffc:	c8 84       	ldd	r12, Y+8	; 0x08
    1ffe:	d9 84       	ldd	r13, Y+9	; 0x09
    2000:	aa 84       	ldd	r10, Y+10	; 0x0a
    2002:	bb 84       	ldd	r11, Y+11	; 0x0b
    2004:	c3 01       	movw	r24, r6
    2006:	b2 01       	movw	r22, r4
    2008:	a1 01       	movw	r20, r2
    200a:	0e 94 9a 06 	call	0xd34	; 0xd34 <motor_and_write>

				counter ++;
				delay_ms(1);
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>

		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			print("BOTH B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    2016:	24 e2       	ldi	r18, 0x24	; 36
    2018:	82 16       	cp	r8, r18
    201a:	91 04       	cpc	r9, r1
    201c:	09 f4       	brne	.+2      	; 0x2020 <main+0x1168>
    201e:	5f c1       	rjmp	.+702    	; 0x22de <main+0x1426>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				counter ++;
    2020:	08 94       	sec
    2022:	61 1c       	adc	r6, r1
    2024:	71 1c       	adc	r7, r1
    2026:	d8 ce       	rjmp	.-592    	; 0x1dd8 <main+0xf20>
				delay_ms(1);
   		 	}
		}

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    202e:	88 23       	and	r24, r24
    2030:	09 f4       	brne	.+2      	; 0x2034 <main+0x117c>
    2032:	55 c1       	rjmp	.+682    	; 0x22de <main+0x1426>
    2034:	82 e0       	ldi	r24, 0x02	; 2
    2036:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    203a:	88 23       	and	r24, r24
    203c:	09 f4       	brne	.+2      	; 0x2040 <main+0x1188>
    203e:	4f c1       	rjmp	.+670    	; 0x22de <main+0x1426>
			lcd_goto_xy(7,0);
    2040:	87 e0       	ldi	r24, 0x07	; 7
    2042:	60 e0       	ldi	r22, 0x00	; 0
    2044:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
			print("DEBUG");
    2048:	89 e6       	ldi	r24, 0x69	; 105
    204a:	91 e0       	ldi	r25, 0x01	; 1
    204c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	9d 83       	std	Y+5, r25	; 0x05
    2056:	8c 83       	std	Y+4, r24	; 0x04
    2058:	80 91 e3 03 	lds	r24, 0x03E3
    205c:	80 62       	ori	r24, 0x20	; 32
    205e:	80 93 e3 03 	sts	0x03E3, r24
    2062:	88 24       	eor	r8, r8
    2064:	99 24       	eor	r9, r9
    2066:	66 24       	eor	r6, r6
    2068:	77 24       	eor	r7, r7
    206a:	22 24       	eor	r2, r2
    206c:	33 24       	eor	r3, r3
    206e:	44 24       	eor	r4, r4
    2070:	55 24       	eor	r5, r5
    2072:	31 e0       	ldi	r19, 0x01	; 1
    2074:	3e 87       	std	Y+14, r19	; 0x0e
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    2076:	84 e4       	ldi	r24, 0x44	; 68
    2078:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2082:	85 e4       	ldi	r24, 0x45	; 69
    2084:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    2088:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    208c:	80 93 de 03 	sts	0x03DE, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2090:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    2094:	80 93 e1 03 	sts	0x03E1, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    2098:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && print){
    209c:	81 14       	cp	r8, r1
    209e:	91 04       	cpc	r9, r1
    20a0:	99 f0       	breq	.+38     	; 0x20c8 <main+0x1210>
					lcd_goto_xy(6,1);
    20a2:	86 e0       	ldi	r24, 0x06	; 6
    20a4:	61 e0       	ldi	r22, 0x01	; 1
    20a6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
					print("     ");
    20aa:	87 e5       	ldi	r24, 0x57	; 87
    20ac:	93 e0       	ldi	r25, 0x03	; 3
    20ae:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					lcd_goto_xy(0,1);
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <lcd_goto_xy>
					print("STATE ");
    20ba:	8d e5       	ldi	r24, 0x5D	; 93
    20bc:	93 e0       	ldi	r25, 0x03	; 3
    20be:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					print(state);
    20c2:	c4 01       	movw	r24, r8
    20c4:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    20c8:	c3 01       	movw	r24, r6
    20ca:	be 01       	movw	r22, r28
    20cc:	64 5f       	subi	r22, 0xF4	; 244
    20ce:	7f 4f       	sbci	r23, 0xFF	; 255
    20d0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <button_debounce>
    20d4:	18 2f       	mov	r17, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    20d6:	c4 01       	movw	r24, r8
    20d8:	61 2f       	mov	r22, r17
    20da:	a3 01       	movw	r20, r6
    20dc:	92 01       	movw	r18, r4
    20de:	0e 94 55 03 	call	0x6aa	; 0x6aa <init_trans>
    20e2:	88 23       	and	r24, r24
    20e4:	29 f0       	breq	.+10     	; 0x20f0 <main+0x1238>
    20e6:	23 01       	movw	r4, r6
    20e8:	25 e2       	ldi	r18, 0x25	; 37
    20ea:	82 2e       	mov	r8, r18
    20ec:	91 2c       	mov	r9, r1
    20ee:	10 e0       	ldi	r17, 0x00	; 0
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    20f0:	c4 01       	movw	r24, r8
    20f2:	b3 01       	movw	r22, r6
    20f4:	a2 01       	movw	r20, r4
    20f6:	0e 94 aa 03 	call	0x754	; 0x754 <firstB_trans>
    20fa:	88 23       	and	r24, r24
    20fc:	71 f4       	brne	.+28     	; 0x211a <main+0x1262>
					state = WAIT;
					if(state != B1STOP1 && state != CLEAN1_3)
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    20fe:	6e e0       	ldi	r22, 0x0E	; 14
    2100:	86 16       	cp	r8, r22
    2102:	91 04       	cpc	r9, r1
    2104:	71 f4       	brne	.+28     	; 0x2122 <main+0x126a>
    2106:	93 01       	movw	r18, r6
    2108:	24 19       	sub	r18, r4
    210a:	35 09       	sbc	r19, r5
    210c:	80 91 8d 03 	lds	r24, 0x038D
    2110:	90 91 8e 03 	lds	r25, 0x038E
    2114:	82 17       	cp	r24, r18
    2116:	93 07       	cpc	r25, r19
    2118:	24 f4       	brge	.+8      	; 0x2122 <main+0x126a>
    211a:	23 01       	movw	r4, r6
    211c:	95 e2       	ldi	r25, 0x25	; 37
    211e:	89 2e       	mov	r8, r25
    2120:	91 2c       	mov	r9, r1
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    2122:	c4 01       	movw	r24, r8
    2124:	b3 01       	movw	r22, r6
    2126:	a2 01       	movw	r20, r4
    2128:	0e 94 50 04 	call	0x8a0	; 0x8a0 <secondB_trans>
    212c:	88 23       	and	r24, r24
    212e:	21 f0       	breq	.+8      	; 0x2138 <main+0x1280>
    2130:	23 01       	movw	r4, r6
    2132:	85 e2       	ldi	r24, 0x25	; 37
    2134:	88 2e       	mov	r8, r24
    2136:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}
				
				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    2138:	c4 01       	movw	r24, r8
    213a:	b3 01       	movw	r22, r6
    213c:	a2 01       	movw	r20, r4
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	0e 94 05 05 	call	0xa0a	; 0xa0a <dry_trans>
    2146:	88 23       	and	r24, r24
    2148:	11 f0       	breq	.+4      	; 0x214e <main+0x1296>
    214a:	23 01       	movw	r4, r6
    214c:	11 c0       	rjmp	.+34     	; 0x2170 <main+0x12b8>
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    214e:	73 e2       	ldi	r23, 0x23	; 35
    2150:	87 16       	cp	r8, r23
    2152:	91 04       	cpc	r9, r1
    2154:	49 f4       	brne	.+18     	; 0x2168 <main+0x12b0>
    2156:	c3 01       	movw	r24, r6
    2158:	84 19       	sub	r24, r4
    215a:	95 09       	sbc	r25, r5
    215c:	0b 97       	sbiw	r24, 0x0b	; 11
    215e:	04 f1       	brlt	.+64     	; 0x21a0 <main+0x12e8>
    2160:	04 e2       	ldi	r16, 0x24	; 36
    2162:	80 2e       	mov	r8, r16
    2164:	91 2c       	mov	r9, r1
    2166:	1c c0       	rjmp	.+56     	; 0x21a0 <main+0x12e8>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    2168:	85 e2       	ldi	r24, 0x25	; 37
    216a:	88 16       	cp	r8, r24
    216c:	91 04       	cpc	r9, r1
    216e:	c1 f4       	brne	.+48     	; 0x21a0 <main+0x12e8>
    2170:	11 23       	and	r17, r17
    2172:	49 f0       	breq	.+18     	; 0x2186 <main+0x12ce>
					state = ++last;
    2174:	08 94       	sec
    2176:	21 1c       	adc	r2, r1
    2178:	31 1c       	adc	r3, r1
				}


				//state actions
						
				if(state == WAIT){
    217a:	25 e2       	ldi	r18, 0x25	; 37
    217c:	22 16       	cp	r2, r18
    217e:	31 04       	cpc	r3, r1
    2180:	11 f0       	breq	.+4      	; 0x2186 <main+0x12ce>
    2182:	41 01       	movw	r8, r2
    2184:	0d c0       	rjmp	.+26     	; 0x21a0 <main+0x12e8>
    2186:	15 e2       	ldi	r17, 0x25	; 37
    2188:	81 2e       	mov	r8, r17
    218a:	91 2c       	mov	r9, r1
					plateLoadMotor = 0;
    218c:	1b 82       	std	Y+3, r1	; 0x03
    218e:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    2190:	1d 82       	std	Y+5, r1	; 0x05
    2192:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    2194:	1f 82       	std	Y+7, r1	; 0x07
    2196:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    2198:	19 86       	std	Y+9, r1	; 0x09
    219a:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    219c:	1b 86       	std	Y+11, r1	; 0x0b
    219e:	1a 86       	std	Y+10, r1	; 0x0a
				}
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    21a0:	c4 01       	movw	r24, r8
    21a2:	b3 01       	movw	r22, r6
    21a4:	ae 01       	movw	r20, r28
    21a6:	4e 5f       	subi	r20, 0xFE	; 254
    21a8:	5f 4f       	sbci	r21, 0xFF	; 255
    21aa:	9e 01       	movw	r18, r28
    21ac:	2c 5f       	subi	r18, 0xFC	; 252
    21ae:	3f 4f       	sbci	r19, 0xFF	; 255
    21b0:	8e 01       	movw	r16, r28
    21b2:	0a 5f       	subi	r16, 0xFA	; 250
    21b4:	1f 4f       	sbci	r17, 0xFF	; 255
    21b6:	b8 e0       	ldi	r27, 0x08	; 8
    21b8:	eb 2e       	mov	r14, r27
    21ba:	f1 2c       	mov	r15, r1
    21bc:	ec 0e       	add	r14, r28
    21be:	fd 1e       	adc	r15, r29
    21c0:	aa e0       	ldi	r26, 0x0A	; 10
    21c2:	ca 2e       	mov	r12, r26
    21c4:	d1 2c       	mov	r13, r1
    21c6:	cc 0e       	add	r12, r28
    21c8:	dd 1e       	adc	r13, r29
    21ca:	5e 01       	movw	r10, r28
    21cc:	08 94       	sec
    21ce:	a1 1c       	adc	r10, r1
    21d0:	b1 1c       	adc	r11, r1
    21d2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    21d6:	c4 01       	movw	r24, r8
    21d8:	b3 01       	movw	r22, r6
    21da:	ae 01       	movw	r20, r28
    21dc:	4e 5f       	subi	r20, 0xFE	; 254
    21de:	5f 4f       	sbci	r21, 0xFF	; 255
    21e0:	9e 01       	movw	r18, r28
    21e2:	2c 5f       	subi	r18, 0xFC	; 252
    21e4:	3f 4f       	sbci	r19, 0xFF	; 255
    21e6:	8e 01       	movw	r16, r28
    21e8:	0a 5f       	subi	r16, 0xFA	; 250
    21ea:	1f 4f       	sbci	r17, 0xFF	; 255
    21ec:	f8 e0       	ldi	r31, 0x08	; 8
    21ee:	ef 2e       	mov	r14, r31
    21f0:	f1 2c       	mov	r15, r1
    21f2:	ec 0e       	add	r14, r28
    21f4:	fd 1e       	adc	r15, r29
    21f6:	ea e0       	ldi	r30, 0x0A	; 10
    21f8:	ce 2e       	mov	r12, r30
    21fa:	d1 2c       	mov	r13, r1
    21fc:	cc 0e       	add	r12, r28
    21fe:	dd 1e       	adc	r13, r29
    2200:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    2204:	3e e0       	ldi	r19, 0x0E	; 14
    2206:	83 16       	cp	r8, r19
    2208:	91 04       	cpc	r9, r1
    220a:	51 f4       	brne	.+20     	; 0x2220 <main+0x1368>
					brush1Motor = 0;
    220c:	1f 82       	std	Y+7, r1	; 0x07
    220e:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    2210:	1d 82       	std	Y+5, r1	; 0x05
    2212:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2214:	80 91 e2 03 	lds	r24, 0x03E2
    2218:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    221a:	80 62       	ori	r24, 0x20	; 32
    221c:	80 93 e2 03 	sts	0x03E2, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2220:	c4 01       	movw	r24, r8
    2222:	b3 01       	movw	r22, r6
    2224:	ae 01       	movw	r20, r28
    2226:	4e 5f       	subi	r20, 0xFE	; 254
    2228:	5f 4f       	sbci	r21, 0xFF	; 255
    222a:	9e 01       	movw	r18, r28
    222c:	2c 5f       	subi	r18, 0xFC	; 252
    222e:	3f 4f       	sbci	r19, 0xFF	; 255
    2230:	8e 01       	movw	r16, r28
    2232:	0a 5f       	subi	r16, 0xFA	; 250
    2234:	1f 4f       	sbci	r17, 0xFF	; 255
    2236:	b8 e0       	ldi	r27, 0x08	; 8
    2238:	eb 2e       	mov	r14, r27
    223a:	f1 2c       	mov	r15, r1
    223c:	ec 0e       	add	r14, r28
    223e:	fd 1e       	adc	r15, r29
    2240:	aa e0       	ldi	r26, 0x0A	; 10
    2242:	ca 2e       	mov	r12, r26
    2244:	d1 2c       	mov	r13, r1
    2246:	cc 0e       	add	r12, r28
    2248:	dd 1e       	adc	r13, r29
    224a:	0e 94 c8 01 	call	0x390	; 0x390 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    224e:	c4 01       	movw	r24, r8
    2250:	b3 01       	movw	r22, r6
    2252:	ae 01       	movw	r20, r28
    2254:	4e 5f       	subi	r20, 0xFE	; 254
    2256:	5f 4f       	sbci	r21, 0xFF	; 255
    2258:	9e 01       	movw	r18, r28
    225a:	2c 5f       	subi	r18, 0xFC	; 252
    225c:	3f 4f       	sbci	r19, 0xFF	; 255
    225e:	8e 01       	movw	r16, r28
    2260:	0a 5f       	subi	r16, 0xFA	; 250
    2262:	1f 4f       	sbci	r17, 0xFF	; 255
    2264:	f8 e0       	ldi	r31, 0x08	; 8
    2266:	ef 2e       	mov	r14, r31
    2268:	f1 2c       	mov	r15, r1
    226a:	ec 0e       	add	r14, r28
    226c:	fd 1e       	adc	r15, r29
    226e:	ea e0       	ldi	r30, 0x0A	; 10
    2270:	ce 2e       	mov	r12, r30
    2272:	d1 2c       	mov	r13, r1
    2274:	cc 0e       	add	r12, r28
    2276:	dd 1e       	adc	r13, r29
    2278:	0e 94 47 02 	call	0x48e	; 0x48e <dry_action>
				if(state == END){
    227c:	63 e2       	ldi	r22, 0x23	; 35
    227e:	86 16       	cp	r8, r22
    2280:	91 04       	cpc	r9, r1
    2282:	89 f4       	brne	.+34     	; 0x22a6 <main+0x13ee>
					plateLoadMotor = 0;
    2284:	1b 82       	std	Y+3, r1	; 0x03
    2286:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2288:	80 91 e3 03 	lds	r24, 0x03E3
    228c:	8b 7f       	andi	r24, 0xFB	; 251
    228e:	80 93 e3 03 	sts	0x03E3, r24
					if(print35 == 1){
    2292:	7e 85       	ldd	r23, Y+14	; 0x0e
    2294:	77 23       	and	r23, r23
    2296:	39 f0       	breq	.+14     	; 0x22a6 <main+0x13ee>
						clear();
    2298:	0e 94 8d 13 	call	0x271a	; 0x271a <clear>
						print("END OF CYCLE");
    229c:	84 e6       	ldi	r24, 0x64	; 100
    229e:	93 e0       	ldi	r25, 0x03	; 3
    22a0:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
    22a4:	1e 86       	std	Y+14, r1	; 0x0e
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    22a6:	2a 81       	ldd	r18, Y+2	; 0x02
    22a8:	3b 81       	ldd	r19, Y+3	; 0x03
    22aa:	0c 81       	ldd	r16, Y+4	; 0x04
    22ac:	1d 81       	ldd	r17, Y+5	; 0x05
    22ae:	ee 80       	ldd	r14, Y+6	; 0x06
    22b0:	ff 80       	ldd	r15, Y+7	; 0x07
    22b2:	c8 84       	ldd	r12, Y+8	; 0x08
    22b4:	d9 84       	ldd	r13, Y+9	; 0x09
    22b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    22b8:	bb 84       	ldd	r11, Y+11	; 0x0b
    22ba:	c3 01       	movw	r24, r6
    22bc:	b2 01       	movw	r22, r4
    22be:	40 e0       	ldi	r20, 0x00	; 0
    22c0:	50 e0       	ldi	r21, 0x00	; 0
    22c2:	0e 94 9a 06 	call	0xd34	; 0xd34 <motor_and_write>

				counter ++;
				delay_ms(1);
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    22ce:	84 e2       	ldi	r24, 0x24	; 36
    22d0:	88 16       	cp	r8, r24
    22d2:	91 04       	cpc	r9, r1
    22d4:	21 f0       	breq	.+8      	; 0x22de <main+0x1426>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				counter ++;
    22d6:	08 94       	sec
    22d8:	61 1c       	adc	r6, r1
    22da:	71 1c       	adc	r7, r1
    22dc:	cc ce       	rjmp	.-616    	; 0x2076 <main+0x11be>
				delay_ms(1);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    22de:	80 91 e3 03 	lds	r24, 0x03E3
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    22e2:	8b 7d       	andi	r24, 0xDB	; 219
    22e4:	80 93 e3 03 	sts	0x03E3, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    22e8:	80 91 df 03 	lds	r24, 0x03DF
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    22ec:	86 7b       	andi	r24, 0xB6	; 182
    22ee:	80 93 df 03 	sts	0x03DF, r24
		
		i2c_start(I2C1+I2C_WRITE);
    22f2:	80 e4       	ldi	r24, 0x40	; 64
    22f4:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    22f8:	82 e0       	ldi	r24, 0x02	; 2
    22fa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    22fe:	80 91 e3 03 	lds	r24, 0x03E3
    2302:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    2306:	80 91 df 03 	lds	r24, 0x03DF
    230a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    230e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	}
	print("END");
    2312:	89 e8       	ldi	r24, 0x89	; 137
    2314:	93 e0       	ldi	r25, 0x03	; 3
    2316:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <print>
    231a:	0c 94 77 07 	jmp	0xeee	; 0xeee <main+0x36>
	}
    231e:	23 01       	movw	r4, r6
    2320:	8c e2       	ldi	r24, 0x2C	; 44
    2322:	88 2e       	mov	r8, r24
    2324:	91 2c       	mov	r9, r1
    2326:	59 ca       	rjmp	.-2894   	; 0x17da <main+0x922>

00002328 <_ZN12OrangutanLCDC2Ev>:
    2328:	08 95       	ret

0000232a <_ZN12OrangutanLCDC1Ev>:
    232a:	08 95       	ret

0000232c <void_getchar>:
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	08 95       	ret

00002332 <_ZN12OrangutanLCD8busyWaitEv>:
    2332:	ef 92       	push	r14
    2334:	ff 92       	push	r15
    2336:	0f 93       	push	r16
    2338:	1f 93       	push	r17
    233a:	67 b1       	in	r22, 0x07	; 7
    233c:	3d 98       	cbi	0x07, 5	; 7
    233e:	28 98       	cbi	0x05, 0	; 5
    2340:	29 9a       	sbi	0x05, 1	; 5
    2342:	e0 90 ce 03 	lds	r14, 0x03CE
    2346:	f0 90 cf 03 	lds	r15, 0x03CF
    234a:	00 91 d0 03 	lds	r16, 0x03D0
    234e:	10 91 d1 03 	lds	r17, 0x03D1
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	41 e0       	ldi	r20, 0x01	; 1
    2358:	50 e0       	ldi	r21, 0x00	; 0
    235a:	ca 01       	movw	r24, r20
    235c:	6f 93       	push	r22
    235e:	64 e0       	ldi	r22, 0x04	; 4
    2360:	6a 95       	dec	r22
    2362:	f1 f7       	brne	.-4      	; 0x2360 <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    2364:	6f 91       	pop	r22
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	c9 f7       	brne	.-14     	; 0x235c <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    236a:	2a 9a       	sbi	0x05, 2	; 5
    236c:	ca 01       	movw	r24, r20
    236e:	6f 93       	push	r22
    2370:	64 e0       	ldi	r22, 0x04	; 4
    2372:	6a 95       	dec	r22
    2374:	f1 f7       	brne	.-4      	; 0x2372 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    2376:	6f 91       	pop	r22
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	c9 f7       	brne	.-14     	; 0x236e <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    237c:	86 b1       	in	r24, 0x06	; 6
    237e:	2a 98       	cbi	0x05, 2	; 5
    2380:	fa 01       	movw	r30, r20
    2382:	6f 93       	push	r22
    2384:	64 e0       	ldi	r22, 0x04	; 4
    2386:	6a 95       	dec	r22
    2388:	f1 f7       	brne	.-4      	; 0x2386 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    238a:	6f 91       	pop	r22
    238c:	31 97       	sbiw	r30, 0x01	; 1
    238e:	c9 f7       	brne	.-14     	; 0x2382 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    2390:	2a 9a       	sbi	0x05, 2	; 5
    2392:	fa 01       	movw	r30, r20
    2394:	6f 93       	push	r22
    2396:	64 e0       	ldi	r22, 0x04	; 4
    2398:	6a 95       	dec	r22
    239a:	f1 f7       	brne	.-4      	; 0x2398 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    239c:	6f 91       	pop	r22
    239e:	31 97       	sbiw	r30, 0x01	; 1
    23a0:	c9 f7       	brne	.-14     	; 0x2394 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    23a2:	2a 98       	cbi	0x05, 2	; 5
    23a4:	2c 5f       	subi	r18, 0xFC	; 252
    23a6:	3f 4f       	sbci	r19, 0xFF	; 255
    23a8:	85 ff       	sbrs	r24, 5
    23aa:	09 c0       	rjmp	.+18     	; 0x23be <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    23ac:	c9 01       	movw	r24, r18
    23ae:	a0 e0       	ldi	r26, 0x00	; 0
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	8e 15       	cp	r24, r14
    23b4:	9f 05       	cpc	r25, r15
    23b6:	a0 07       	cpc	r26, r16
    23b8:	b1 07       	cpc	r27, r17
    23ba:	08 f4       	brcc	.+2      	; 0x23be <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    23bc:	ce cf       	rjmp	.-100    	; 0x235a <_ZN12OrangutanLCD8busyWaitEv+0x28>
    23be:	c9 01       	movw	r24, r18
    23c0:	a0 e0       	ldi	r26, 0x00	; 0
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	8e 15       	cp	r24, r14
    23c6:	9f 05       	cpc	r25, r15
    23c8:	a0 07       	cpc	r26, r16
    23ca:	b1 07       	cpc	r27, r17
    23cc:	28 f0       	brcs	.+10     	; 0x23d8 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    23ce:	82 e3       	ldi	r24, 0x32	; 50
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	a0 e0       	ldi	r26, 0x00	; 0
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	04 c0       	rjmp	.+8      	; 0x23e0 <_ZN12OrangutanLCD8busyWaitEv+0xae>
    23d8:	80 e3       	ldi	r24, 0x30	; 48
    23da:	95 e7       	ldi	r25, 0x75	; 117
    23dc:	a0 e0       	ldi	r26, 0x00	; 0
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	80 93 ce 03 	sts	0x03CE, r24
    23e4:	90 93 cf 03 	sts	0x03CF, r25
    23e8:	a0 93 d0 03 	sts	0x03D0, r26
    23ec:	b0 93 d1 03 	sts	0x03D1, r27
    23f0:	67 b9       	out	0x07, r22	; 7
    23f2:	1f 91       	pop	r17
    23f4:	0f 91       	pop	r16
    23f6:	ff 90       	pop	r15
    23f8:	ef 90       	pop	r14
    23fa:	08 95       	ret

000023fc <_ZN12OrangutanLCD8sendDataEh>:
    23fc:	28 b1       	in	r18, 0x08	; 8
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	8f 70       	andi	r24, 0x0F	; 15
    2402:	90 70       	andi	r25, 0x00	; 0
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	23 7c       	andi	r18, 0xC3	; 195
    240e:	28 2b       	or	r18, r24
    2410:	28 b9       	out	0x08, r18	; 8
    2412:	2a 9a       	sbi	0x05, 2	; 5
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	fc 01       	movw	r30, r24
    241a:	6f 93       	push	r22
    241c:	64 e0       	ldi	r22, 0x04	; 4
    241e:	6a 95       	dec	r22
    2420:	f1 f7       	brne	.-4      	; 0x241e <_ZN12OrangutanLCD8sendDataEh+0x22>
    2422:	6f 91       	pop	r22
    2424:	31 97       	sbiw	r30, 0x01	; 1
    2426:	c9 f7       	brne	.-14     	; 0x241a <_ZN12OrangutanLCD8sendDataEh+0x1e>
    2428:	2a 98       	cbi	0x05, 2	; 5
    242a:	6f 93       	push	r22
    242c:	64 e0       	ldi	r22, 0x04	; 4
    242e:	6a 95       	dec	r22
    2430:	f1 f7       	brne	.-4      	; 0x242e <_ZN12OrangutanLCD8sendDataEh+0x32>
    2432:	6f 91       	pop	r22
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	c9 f7       	brne	.-14     	; 0x242a <_ZN12OrangutanLCD8sendDataEh+0x2e>
    2438:	08 95       	ret

0000243a <_ZN12OrangutanLCD10initPrintfEv>:
    243a:	80 91 ca 03 	lds	r24, 0x03CA
    243e:	90 91 cb 03 	lds	r25, 0x03CB
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	11 f0       	breq	.+4      	; 0x244a <_ZN12OrangutanLCD10initPrintfEv+0x10>
    2446:	0e 94 3f 18 	call	0x307e	; 0x307e <free>
    244a:	80 91 bd 03 	lds	r24, 0x03BD
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	20 91 be 03 	lds	r18, 0x03BE
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	ac 01       	movw	r20, r24
    245a:	42 9f       	mul	r20, r18
    245c:	c0 01       	movw	r24, r0
    245e:	43 9f       	mul	r20, r19
    2460:	90 0d       	add	r25, r0
    2462:	52 9f       	mul	r21, r18
    2464:	90 0d       	add	r25, r0
    2466:	11 24       	eor	r1, r1
    2468:	0e 94 92 17 	call	0x2f24	; 0x2f24 <malloc>
    246c:	90 93 cb 03 	sts	0x03CB, r25
    2470:	80 93 ca 03 	sts	0x03CA, r24
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	29 f1       	breq	.+74     	; 0x24c2 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    2478:	60 e0       	ldi	r22, 0x00	; 0
    247a:	70 e2       	ldi	r23, 0x20	; 32
    247c:	08 c0       	rjmp	.+16     	; 0x248e <_ZN12OrangutanLCD10initPrintfEv+0x54>
    247e:	e0 91 ca 03 	lds	r30, 0x03CA
    2482:	f0 91 cb 03 	lds	r31, 0x03CB
    2486:	e4 0f       	add	r30, r20
    2488:	f5 1f       	adc	r31, r21
    248a:	70 83       	st	Z, r23
    248c:	6f 5f       	subi	r22, 0xFF	; 255
    248e:	46 2f       	mov	r20, r22
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	80 91 bd 03 	lds	r24, 0x03BD
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	20 91 be 03 	lds	r18, 0x03BE
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	fc 01       	movw	r30, r24
    24a2:	e2 9f       	mul	r30, r18
    24a4:	c0 01       	movw	r24, r0
    24a6:	e3 9f       	mul	r30, r19
    24a8:	90 0d       	add	r25, r0
    24aa:	f2 9f       	mul	r31, r18
    24ac:	90 0d       	add	r25, r0
    24ae:	11 24       	eor	r1, r1
    24b0:	48 17       	cp	r20, r24
    24b2:	59 07       	cpc	r21, r25
    24b4:	24 f3       	brlt	.-56     	; 0x247e <_ZN12OrangutanLCD10initPrintfEv+0x44>
    24b6:	85 e8       	ldi	r24, 0x85	; 133
    24b8:	94 e1       	ldi	r25, 0x14	; 20
    24ba:	66 e9       	ldi	r22, 0x96	; 150
    24bc:	71 e1       	ldi	r23, 0x11	; 17
    24be:	0e 94 97 18 	call	0x312e	; 0x312e <fdevopen>
    24c2:	08 95       	ret

000024c4 <_ZN12OrangutanLCD10initPrintfEhh>:
    24c4:	80 93 be 03 	sts	0x03BE, r24
    24c8:	60 93 bd 03 	sts	0x03BD, r22
    24cc:	0e 94 1d 12 	call	0x243a	; 0x243a <_ZN12OrangutanLCD10initPrintfEv>
    24d0:	08 95       	ret

000024d2 <lcd_init_printf_with_dimensions>:
    24d2:	80 93 be 03 	sts	0x03BE, r24
    24d6:	60 93 bd 03 	sts	0x03BD, r22
    24da:	0e 94 1d 12 	call	0x243a	; 0x243a <_ZN12OrangutanLCD10initPrintfEv>
    24de:	08 95       	ret

000024e0 <lcd_init_printf>:
    24e0:	0e 94 1d 12 	call	0x243a	; 0x243a <_ZN12OrangutanLCD10initPrintfEv>
    24e4:	08 95       	ret

000024e6 <_ZN12OrangutanLCD5init2Ev>:
    24e6:	3d 98       	cbi	0x07, 5	; 7
    24e8:	45 9a       	sbi	0x08, 5	; 8
    24ea:	80 e3       	ldi	r24, 0x30	; 48
    24ec:	95 e7       	ldi	r25, 0x75	; 117
    24ee:	a0 e0       	ldi	r26, 0x00	; 0
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	80 93 ce 03 	sts	0x03CE, r24
    24f6:	90 93 cf 03 	sts	0x03CF, r25
    24fa:	a0 93 d0 03 	sts	0x03D0, r26
    24fe:	b0 93 d1 03 	sts	0x03D1, r27
    2502:	20 9a       	sbi	0x04, 0	; 4
    2504:	21 9a       	sbi	0x04, 1	; 4
    2506:	22 9a       	sbi	0x04, 2	; 4
    2508:	8e e1       	ldi	r24, 0x1E	; 30
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>
    2510:	83 e0       	ldi	r24, 0x03	; 3
    2512:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2516:	86 e0       	ldi	r24, 0x06	; 6
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>
    251e:	83 e0       	ldi	r24, 0x03	; 3
    2520:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2524:	82 e0       	ldi	r24, 0x02	; 2
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>
    252c:	83 e0       	ldi	r24, 0x03	; 3
    252e:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2532:	82 e0       	ldi	r24, 0x02	; 2
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>
    253a:	82 e0       	ldi	r24, 0x02	; 2
    253c:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>
    2548:	88 e2       	ldi	r24, 0x28	; 40
    254a:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN12OrangutanLCD8send_cmdEh>
    254e:	88 e0       	ldi	r24, 0x08	; 8
    2550:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN12OrangutanLCD8send_cmdEh>
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN12OrangutanLCD8send_cmdEh>
    255a:	86 e0       	ldi	r24, 0x06	; 6
    255c:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN12OrangutanLCD8send_cmdEh>
    2560:	8c e0       	ldi	r24, 0x0C	; 12
    2562:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN12OrangutanLCD8send_cmdEh>
    2566:	08 95       	ret

00002568 <_ZN12OrangutanLCD4initEv>:
    2568:	80 91 d2 03 	lds	r24, 0x03D2
    256c:	88 23       	and	r24, r24
    256e:	29 f4       	brne	.+10     	; 0x257a <_ZN12OrangutanLCD4initEv+0x12>
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	80 93 d2 03 	sts	0x03D2, r24
    2576:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN12OrangutanLCD5init2Ev>
    257a:	08 95       	ret

0000257c <_ZN12OrangutanLCD4sendEhhh>:
    257c:	ff 92       	push	r15
    257e:	0f 93       	push	r16
    2580:	1f 93       	push	r17
    2582:	08 2f       	mov	r16, r24
    2584:	16 2f       	mov	r17, r22
    2586:	f4 2e       	mov	r15, r20
    2588:	0e 94 b4 12 	call	0x2568	; 0x2568 <_ZN12OrangutanLCD4initEv>
    258c:	0e 94 99 11 	call	0x2332	; 0x2332 <_ZN12OrangutanLCD8busyWaitEv>
    2590:	37 b1       	in	r19, 0x07	; 7
    2592:	28 b1       	in	r18, 0x08	; 8
    2594:	29 98       	cbi	0x05, 1	; 5
    2596:	11 23       	and	r17, r17
    2598:	11 f0       	breq	.+4      	; 0x259e <_ZN12OrangutanLCD4sendEhhh+0x22>
    259a:	28 9a       	sbi	0x05, 0	; 5
    259c:	01 c0       	rjmp	.+2      	; 0x25a0 <_ZN12OrangutanLCD4sendEhhh+0x24>
    259e:	28 98       	cbi	0x05, 0	; 5
    25a0:	87 b1       	in	r24, 0x07	; 7
    25a2:	8c 63       	ori	r24, 0x3C	; 60
    25a4:	87 b9       	out	0x07, r24	; 7
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	f8 16       	cp	r15, r24
    25aa:	e1 f0       	breq	.+56     	; 0x25e4 <_ZN12OrangutanLCD4sendEhhh+0x68>
    25ac:	88 b1       	in	r24, 0x08	; 8
    25ae:	90 2f       	mov	r25, r16
    25b0:	92 95       	swap	r25
    25b2:	9f 70       	andi	r25, 0x0F	; 15
    25b4:	99 0f       	add	r25, r25
    25b6:	99 0f       	add	r25, r25
    25b8:	83 7c       	andi	r24, 0xC3	; 195
    25ba:	98 2b       	or	r25, r24
    25bc:	98 b9       	out	0x08, r25	; 8
    25be:	2a 9a       	sbi	0x05, 2	; 5
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	fc 01       	movw	r30, r24
    25c6:	6f 93       	push	r22
    25c8:	64 e0       	ldi	r22, 0x04	; 4
    25ca:	6a 95       	dec	r22
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <_ZN12OrangutanLCD4sendEhhh+0x4e>
    25ce:	6f 91       	pop	r22
    25d0:	31 97       	sbiw	r30, 0x01	; 1
    25d2:	c9 f7       	brne	.-14     	; 0x25c6 <_ZN12OrangutanLCD4sendEhhh+0x4a>
    25d4:	2a 98       	cbi	0x05, 2	; 5
    25d6:	6f 93       	push	r22
    25d8:	64 e0       	ldi	r22, 0x04	; 4
    25da:	6a 95       	dec	r22
    25dc:	f1 f7       	brne	.-4      	; 0x25da <_ZN12OrangutanLCD4sendEhhh+0x5e>
    25de:	6f 91       	pop	r22
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	c9 f7       	brne	.-14     	; 0x25d6 <_ZN12OrangutanLCD4sendEhhh+0x5a>
    25e4:	88 b1       	in	r24, 0x08	; 8
    25e6:	0f 70       	andi	r16, 0x0F	; 15
    25e8:	00 0f       	add	r16, r16
    25ea:	00 0f       	add	r16, r16
    25ec:	83 7c       	andi	r24, 0xC3	; 195
    25ee:	80 2b       	or	r24, r16
    25f0:	88 b9       	out	0x08, r24	; 8
    25f2:	2a 9a       	sbi	0x05, 2	; 5
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	fc 01       	movw	r30, r24
    25fa:	6f 93       	push	r22
    25fc:	64 e0       	ldi	r22, 0x04	; 4
    25fe:	6a 95       	dec	r22
    2600:	f1 f7       	brne	.-4      	; 0x25fe <_ZN12OrangutanLCD4sendEhhh+0x82>
    2602:	6f 91       	pop	r22
    2604:	31 97       	sbiw	r30, 0x01	; 1
    2606:	c9 f7       	brne	.-14     	; 0x25fa <_ZN12OrangutanLCD4sendEhhh+0x7e>
    2608:	2a 98       	cbi	0x05, 2	; 5
    260a:	6f 93       	push	r22
    260c:	64 e0       	ldi	r22, 0x04	; 4
    260e:	6a 95       	dec	r22
    2610:	f1 f7       	brne	.-4      	; 0x260e <_ZN12OrangutanLCD4sendEhhh+0x92>
    2612:	6f 91       	pop	r22
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	c9 f7       	brne	.-14     	; 0x260a <_ZN12OrangutanLCD4sendEhhh+0x8e>
    2618:	37 b9       	out	0x07, r19	; 7
    261a:	28 b9       	out	0x08, r18	; 8
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	ff 90       	pop	r15
    2622:	08 95       	ret

00002624 <_ZN12OrangutanLCD8send_cmdEh>:
    2624:	60 e0       	ldi	r22, 0x00	; 0
    2626:	42 e0       	ldi	r20, 0x02	; 2
    2628:	0e 94 be 12 	call	0x257c	; 0x257c <_ZN12OrangutanLCD4sendEhhh>
    262c:	08 95       	ret

0000262e <_ZN12OrangutanLCD10moveCursorEhh>:
    262e:	0f 93       	push	r16
    2630:	1f 93       	push	r17
    2632:	08 2f       	mov	r16, r24
    2634:	16 2f       	mov	r17, r22
    2636:	08 c0       	rjmp	.+16     	; 0x2648 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    2638:	00 23       	and	r16, r16
    263a:	11 f4       	brne	.+4      	; 0x2640 <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    263c:	80 e1       	ldi	r24, 0x10	; 16
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    2640:	84 e1       	ldi	r24, 0x14	; 20
    2642:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN12OrangutanLCD8send_cmdEh>
    2646:	11 50       	subi	r17, 0x01	; 1
    2648:	11 23       	and	r17, r17
    264a:	b1 f7       	brne	.-20     	; 0x2638 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	08 95       	ret

00002652 <lcd_move_cursor>:
    2652:	0e 94 17 13 	call	0x262e	; 0x262e <_ZN12OrangutanLCD10moveCursorEhh>
    2656:	08 95       	ret

00002658 <_ZN12OrangutanLCD10hideCursorEv>:
    2658:	8c e0       	ldi	r24, 0x0C	; 12
    265a:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN12OrangutanLCD8send_cmdEh>
    265e:	08 95       	ret

00002660 <lcd_hide_cursor>:
    2660:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN12OrangutanLCD10hideCursorEv>
    2664:	08 95       	ret

00002666 <_ZN12OrangutanLCD10showCursorEh>:
    2666:	81 30       	cpi	r24, 0x01	; 1
    2668:	11 f4       	brne	.+4      	; 0x266e <_ZN12OrangutanLCD10showCursorEh+0x8>
    266a:	8f e0       	ldi	r24, 0x0F	; 15
    266c:	01 c0       	rjmp	.+2      	; 0x2670 <_ZN12OrangutanLCD10showCursorEh+0xa>
    266e:	8e e0       	ldi	r24, 0x0E	; 14
    2670:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN12OrangutanLCD8send_cmdEh>
    2674:	08 95       	ret

00002676 <lcd_show_cursor>:
    2676:	0e 94 33 13 	call	0x2666	; 0x2666 <_ZN12OrangutanLCD10showCursorEh>
    267a:	08 95       	ret

0000267c <_ZN12OrangutanLCD6gotoXYEhh>:
    267c:	a4 e0       	ldi	r26, 0x04	; 4
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	e4 e4       	ldi	r30, 0x44	; 68
    2682:	f3 e1       	ldi	r31, 0x13	; 19
    2684:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__prologue_saves__+0x1c>
    2688:	18 2f       	mov	r17, r24
    268a:	06 2f       	mov	r16, r22
    268c:	80 e8       	ldi	r24, 0x80	; 128
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	80 ec       	ldi	r24, 0xC0	; 192
    2692:	8a 83       	std	Y+2, r24	; 0x02
    2694:	84 e9       	ldi	r24, 0x94	; 148
    2696:	8b 83       	std	Y+3, r24	; 0x03
    2698:	84 ed       	ldi	r24, 0xD4	; 212
    269a:	8c 83       	std	Y+4, r24	; 0x04
    269c:	fe 01       	movw	r30, r28
    269e:	e6 0f       	add	r30, r22
    26a0:	f1 1d       	adc	r31, r1
    26a2:	81 81       	ldd	r24, Z+1	; 0x01
    26a4:	81 0f       	add	r24, r17
    26a6:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN12OrangutanLCD8send_cmdEh>
    26aa:	10 93 cd 03 	sts	0x03CD, r17
    26ae:	00 93 cc 03 	sts	0x03CC, r16
    26b2:	24 96       	adiw	r28, 0x04	; 4
    26b4:	e4 e0       	ldi	r30, 0x04	; 4
    26b6:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__epilogue_restores__+0x1c>

000026ba <lcd_goto_xy>:
    26ba:	0e 94 3e 13 	call	0x267c	; 0x267c <_ZN12OrangutanLCD6gotoXYEhh>
    26be:	08 95       	ret

000026c0 <_ZN12OrangutanLCD5clearEv>:
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN12OrangutanLCD8send_cmdEh>
    26c6:	80 91 ca 03 	lds	r24, 0x03CA
    26ca:	90 91 cb 03 	lds	r25, 0x03CB
    26ce:	89 2b       	or	r24, r25
    26d0:	19 f1       	breq	.+70     	; 0x2718 <_ZN12OrangutanLCD5clearEv+0x58>
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	70 e2       	ldi	r23, 0x20	; 32
    26d6:	08 c0       	rjmp	.+16     	; 0x26e8 <_ZN12OrangutanLCD5clearEv+0x28>
    26d8:	e0 91 ca 03 	lds	r30, 0x03CA
    26dc:	f0 91 cb 03 	lds	r31, 0x03CB
    26e0:	e4 0f       	add	r30, r20
    26e2:	f5 1f       	adc	r31, r21
    26e4:	70 83       	st	Z, r23
    26e6:	6f 5f       	subi	r22, 0xFF	; 255
    26e8:	46 2f       	mov	r20, r22
    26ea:	50 e0       	ldi	r21, 0x00	; 0
    26ec:	80 91 bd 03 	lds	r24, 0x03BD
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	20 91 be 03 	lds	r18, 0x03BE
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	fc 01       	movw	r30, r24
    26fc:	e2 9f       	mul	r30, r18
    26fe:	c0 01       	movw	r24, r0
    2700:	e3 9f       	mul	r30, r19
    2702:	90 0d       	add	r25, r0
    2704:	f2 9f       	mul	r31, r18
    2706:	90 0d       	add	r25, r0
    2708:	11 24       	eor	r1, r1
    270a:	48 17       	cp	r20, r24
    270c:	59 07       	cpc	r21, r25
    270e:	24 f3       	brlt	.-56     	; 0x26d8 <_ZN12OrangutanLCD5clearEv+0x18>
    2710:	10 92 cd 03 	sts	0x03CD, r1
    2714:	10 92 cc 03 	sts	0x03CC, r1
    2718:	08 95       	ret

0000271a <clear>:
    271a:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN12OrangutanLCD5clearEv>
    271e:	08 95       	ret

00002720 <_ZN12OrangutanLCD9send_dataEh>:
    2720:	61 e0       	ldi	r22, 0x01	; 1
    2722:	42 e0       	ldi	r20, 0x02	; 2
    2724:	0e 94 be 12 	call	0x257c	; 0x257c <_ZN12OrangutanLCD4sendEhhh>
    2728:	08 95       	ret

0000272a <_ZN12OrangutanLCD11printBinaryEh>:
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	00 e0       	ldi	r16, 0x00	; 0
    2734:	10 e8       	ldi	r17, 0x80	; 128
    2736:	c8 2f       	mov	r28, r24
    2738:	d0 e0       	ldi	r29, 0x00	; 0
    273a:	81 2f       	mov	r24, r17
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	8c 23       	and	r24, r28
    2740:	9d 23       	and	r25, r29
    2742:	89 2b       	or	r24, r25
    2744:	11 f0       	breq	.+4      	; 0x274a <_ZN12OrangutanLCD11printBinaryEh+0x20>
    2746:	81 e3       	ldi	r24, 0x31	; 49
    2748:	01 c0       	rjmp	.+2      	; 0x274c <_ZN12OrangutanLCD11printBinaryEh+0x22>
    274a:	80 e3       	ldi	r24, 0x30	; 48
    274c:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD9send_dataEh>
    2750:	0f 5f       	subi	r16, 0xFF	; 255
    2752:	08 30       	cpi	r16, 0x08	; 8
    2754:	11 f0       	breq	.+4      	; 0x275a <_ZN12OrangutanLCD11printBinaryEh+0x30>
    2756:	16 95       	lsr	r17
    2758:	f0 cf       	rjmp	.-32     	; 0x273a <_ZN12OrangutanLCD11printBinaryEh+0x10>
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	1f 91       	pop	r17
    2760:	0f 91       	pop	r16
    2762:	08 95       	ret

00002764 <print_binary>:
    2764:	0e 94 95 13 	call	0x272a	; 0x272a <_ZN12OrangutanLCD11printBinaryEh>
    2768:	08 95       	ret

0000276a <_ZN12OrangutanLCD14printHexNibbleEh>:
    276a:	8a 30       	cpi	r24, 0x0A	; 10
    276c:	10 f4       	brcc	.+4      	; 0x2772 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    276e:	80 5d       	subi	r24, 0xD0	; 208
    2770:	01 c0       	rjmp	.+2      	; 0x2774 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    2772:	89 5c       	subi	r24, 0xC9	; 201
    2774:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD9send_dataEh>
    2778:	08 95       	ret

0000277a <_ZN12OrangutanLCD8printHexEh>:
    277a:	1f 93       	push	r17
    277c:	18 2f       	mov	r17, r24
    277e:	82 95       	swap	r24
    2780:	8f 70       	andi	r24, 0x0F	; 15
    2782:	0e 94 b5 13 	call	0x276a	; 0x276a <_ZN12OrangutanLCD14printHexNibbleEh>
    2786:	81 2f       	mov	r24, r17
    2788:	8f 70       	andi	r24, 0x0F	; 15
    278a:	0e 94 b5 13 	call	0x276a	; 0x276a <_ZN12OrangutanLCD14printHexNibbleEh>
    278e:	1f 91       	pop	r17
    2790:	08 95       	ret

00002792 <_ZN12OrangutanLCD8printHexEj>:
    2792:	1f 93       	push	r17
    2794:	18 2f       	mov	r17, r24
    2796:	89 2f       	mov	r24, r25
    2798:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN12OrangutanLCD8printHexEh>
    279c:	81 2f       	mov	r24, r17
    279e:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN12OrangutanLCD8printHexEh>
    27a2:	1f 91       	pop	r17
    27a4:	08 95       	ret

000027a6 <print_hex>:
    27a6:	0e 94 c9 13 	call	0x2792	; 0x2792 <_ZN12OrangutanLCD8printHexEj>
    27aa:	08 95       	ret

000027ac <print_hex_byte>:
    27ac:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN12OrangutanLCD8printHexEh>
    27b0:	08 95       	ret

000027b2 <_ZN12OrangutanLCD5printEm>:
    27b2:	6f 92       	push	r6
    27b4:	7f 92       	push	r7
    27b6:	8f 92       	push	r8
    27b8:	9f 92       	push	r9
    27ba:	af 92       	push	r10
    27bc:	bf 92       	push	r11
    27be:	cf 92       	push	r12
    27c0:	df 92       	push	r13
    27c2:	ff 92       	push	r15
    27c4:	0f 93       	push	r16
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	2a 97       	sbiw	r28, 0x0a	; 10
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	5b 01       	movw	r10, r22
    27dc:	6c 01       	movw	r12, r24
    27de:	0a e0       	ldi	r16, 0x0A	; 10
    27e0:	3e 01       	movw	r6, r28
    27e2:	08 94       	sec
    27e4:	61 1c       	adc	r6, r1
    27e6:	71 1c       	adc	r7, r1
    27e8:	fa 2c       	mov	r15, r10
    27ea:	c6 01       	movw	r24, r12
    27ec:	b5 01       	movw	r22, r10
    27ee:	2a e0       	ldi	r18, 0x0A	; 10
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	50 e0       	ldi	r21, 0x00	; 0
    27f6:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <__udivmodsi4>
    27fa:	c9 01       	movw	r24, r18
    27fc:	da 01       	movw	r26, r20
    27fe:	5c 01       	movw	r10, r24
    2800:	6d 01       	movw	r12, r26
    2802:	01 50       	subi	r16, 0x01	; 1
    2804:	43 01       	movw	r8, r6
    2806:	80 0e       	add	r8, r16
    2808:	91 1c       	adc	r9, r1
    280a:	80 e3       	ldi	r24, 0x30	; 48
    280c:	f8 0e       	add	r15, r24
    280e:	c6 01       	movw	r24, r12
    2810:	b5 01       	movw	r22, r10
    2812:	2a e0       	ldi	r18, 0x0A	; 10
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__mulsi3>
    281e:	f6 1a       	sub	r15, r22
    2820:	f4 01       	movw	r30, r8
    2822:	f0 82       	st	Z, r15
    2824:	a1 14       	cp	r10, r1
    2826:	b1 04       	cpc	r11, r1
    2828:	c1 04       	cpc	r12, r1
    282a:	d1 04       	cpc	r13, r1
    282c:	e9 f6       	brne	.-70     	; 0x27e8 <_ZN12OrangutanLCD5printEm+0x36>
    282e:	08 c0       	rjmp	.+16     	; 0x2840 <_ZN12OrangutanLCD5printEm+0x8e>
    2830:	f6 01       	movw	r30, r12
    2832:	e0 0f       	add	r30, r16
    2834:	f1 1d       	adc	r31, r1
    2836:	80 81       	ld	r24, Z
    2838:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD9send_dataEh>
    283c:	0f 5f       	subi	r16, 0xFF	; 255
    283e:	04 c0       	rjmp	.+8      	; 0x2848 <_ZN12OrangutanLCD5printEm+0x96>
    2840:	6e 01       	movw	r12, r28
    2842:	08 94       	sec
    2844:	c1 1c       	adc	r12, r1
    2846:	d1 1c       	adc	r13, r1
    2848:	0a 30       	cpi	r16, 0x0A	; 10
    284a:	90 f3       	brcs	.-28     	; 0x2830 <_ZN12OrangutanLCD5printEm+0x7e>
    284c:	2a 96       	adiw	r28, 0x0a	; 10
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	df 90       	pop	r13
    2862:	cf 90       	pop	r12
    2864:	bf 90       	pop	r11
    2866:	af 90       	pop	r10
    2868:	9f 90       	pop	r9
    286a:	8f 90       	pop	r8
    286c:	7f 90       	pop	r7
    286e:	6f 90       	pop	r6
    2870:	08 95       	ret

00002872 <print_unsigned_long>:
    2872:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_ZN12OrangutanLCD5printEm>
    2876:	08 95       	ret

00002878 <_ZN12OrangutanLCD5printEl>:
    2878:	ef 92       	push	r14
    287a:	ff 92       	push	r15
    287c:	0f 93       	push	r16
    287e:	1f 93       	push	r17
    2880:	7b 01       	movw	r14, r22
    2882:	8c 01       	movw	r16, r24
    2884:	97 ff       	sbrs	r25, 7
    2886:	0b c0       	rjmp	.+22     	; 0x289e <_ZN12OrangutanLCD5printEl+0x26>
    2888:	10 95       	com	r17
    288a:	00 95       	com	r16
    288c:	f0 94       	com	r15
    288e:	e0 94       	com	r14
    2890:	e1 1c       	adc	r14, r1
    2892:	f1 1c       	adc	r15, r1
    2894:	01 1d       	adc	r16, r1
    2896:	11 1d       	adc	r17, r1
    2898:	8d e2       	ldi	r24, 0x2D	; 45
    289a:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD9send_dataEh>
    289e:	c8 01       	movw	r24, r16
    28a0:	b7 01       	movw	r22, r14
    28a2:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_ZN12OrangutanLCD5printEm>
    28a6:	1f 91       	pop	r17
    28a8:	0f 91       	pop	r16
    28aa:	ff 90       	pop	r15
    28ac:	ef 90       	pop	r14
    28ae:	08 95       	ret

000028b0 <print_long>:
    28b0:	0e 94 3c 14 	call	0x2878	; 0x2878 <_ZN12OrangutanLCD5printEl>
    28b4:	08 95       	ret

000028b6 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    28b6:	cf 93       	push	r28
    28b8:	df 93       	push	r29
    28ba:	ec 01       	movw	r28, r24
    28bc:	03 c0       	rjmp	.+6      	; 0x28c4 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    28be:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD9send_dataEh>
    28c2:	21 96       	adiw	r28, 0x01	; 1
    28c4:	fe 01       	movw	r30, r28
    28c6:	84 91       	lpm	r24, Z+
    28c8:	88 23       	and	r24, r24
    28ca:	c9 f7       	brne	.-14     	; 0x28be <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    28cc:	df 91       	pop	r29
    28ce:	cf 91       	pop	r28
    28d0:	08 95       	ret

000028d2 <print_from_program_space>:
    28d2:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    28d6:	08 95       	ret

000028d8 <_ZN12OrangutanLCD5printEPKc>:
    28d8:	cf 93       	push	r28
    28da:	df 93       	push	r29
    28dc:	ec 01       	movw	r28, r24
    28de:	03 c0       	rjmp	.+6      	; 0x28e6 <_ZN12OrangutanLCD5printEPKc+0xe>
    28e0:	21 96       	adiw	r28, 0x01	; 1
    28e2:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD9send_dataEh>
    28e6:	88 81       	ld	r24, Y
    28e8:	88 23       	and	r24, r24
    28ea:	d1 f7       	brne	.-12     	; 0x28e0 <_ZN12OrangutanLCD5printEPKc+0x8>
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	08 95       	ret

000028f2 <_ZN12OrangutanLCD7printInEPKc>:
    28f2:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_ZN12OrangutanLCD5printEPKc>
    28f6:	08 95       	ret

000028f8 <print>:
    28f8:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_ZN12OrangutanLCD5printEPKc>
    28fc:	08 95       	ret

000028fe <_ZN12OrangutanLCD5printEc>:
    28fe:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD9send_dataEh>
    2902:	08 95       	ret

00002904 <print_character>:
    2904:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD9send_dataEh>
    2908:	08 95       	ret

0000290a <lcd_putchar>:
    290a:	a0 e0       	ldi	r26, 0x00	; 0
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	eb e8       	ldi	r30, 0x8B	; 139
    2910:	f4 e1       	ldi	r31, 0x14	; 20
    2912:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__prologue_saves__+0x14>
    2916:	e8 2e       	mov	r14, r24
    2918:	80 91 ca 03 	lds	r24, 0x03CA
    291c:	90 91 cb 03 	lds	r25, 0x03CB
    2920:	89 2b       	or	r24, r25
    2922:	09 f4       	brne	.+2      	; 0x2926 <lcd_putchar+0x1c>
    2924:	05 c1       	rjmp	.+522    	; 0x2b30 <lcd_putchar+0x226>
    2926:	2a e0       	ldi	r18, 0x0A	; 10
    2928:	e2 16       	cp	r14, r18
    292a:	09 f4       	brne	.+2      	; 0x292e <lcd_putchar+0x24>
    292c:	46 c0       	rjmp	.+140    	; 0x29ba <lcd_putchar+0xb0>
    292e:	38 e0       	ldi	r19, 0x08	; 8
    2930:	e3 16       	cp	r14, r19
    2932:	c9 f4       	brne	.+50     	; 0x2966 <lcd_putchar+0x5c>
    2934:	80 91 cd 03 	lds	r24, 0x03CD
    2938:	81 50       	subi	r24, 0x01	; 1
    293a:	80 93 cd 03 	sts	0x03CD, r24
    293e:	8f 3f       	cpi	r24, 0xFF	; 255
    2940:	51 f4       	brne	.+20     	; 0x2956 <lcd_putchar+0x4c>
    2942:	80 91 cc 03 	lds	r24, 0x03CC
    2946:	81 50       	subi	r24, 0x01	; 1
    2948:	80 93 cc 03 	sts	0x03CC, r24
    294c:	80 91 be 03 	lds	r24, 0x03BE
    2950:	81 50       	subi	r24, 0x01	; 1
    2952:	80 93 cd 03 	sts	0x03CD, r24
    2956:	80 91 cc 03 	lds	r24, 0x03CC
    295a:	8f 3f       	cpi	r24, 0xFF	; 255
    295c:	09 f0       	breq	.+2      	; 0x2960 <lcd_putchar+0x56>
    295e:	e2 c0       	rjmp	.+452    	; 0x2b24 <lcd_putchar+0x21a>
    2960:	10 92 cc 03 	sts	0x03CC, r1
    2964:	dd c0       	rjmp	.+442    	; 0x2b20 <lcd_putchar+0x216>
    2966:	8e 2d       	mov	r24, r14
    2968:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD9send_dataEh>
    296c:	20 91 cc 03 	lds	r18, 0x03CC
    2970:	22 23       	and	r18, r18
    2972:	c9 f0       	breq	.+50     	; 0x29a6 <lcd_putchar+0x9c>
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	21 50       	subi	r18, 0x01	; 1
    2978:	30 40       	sbci	r19, 0x00	; 0
    297a:	80 91 be 03 	lds	r24, 0x03BE
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	ac 01       	movw	r20, r24
    2982:	24 9f       	mul	r18, r20
    2984:	c0 01       	movw	r24, r0
    2986:	25 9f       	mul	r18, r21
    2988:	90 0d       	add	r25, r0
    298a:	34 9f       	mul	r19, r20
    298c:	90 0d       	add	r25, r0
    298e:	11 24       	eor	r1, r1
    2990:	20 91 cd 03 	lds	r18, 0x03CD
    2994:	e0 91 ca 03 	lds	r30, 0x03CA
    2998:	f0 91 cb 03 	lds	r31, 0x03CB
    299c:	e8 0f       	add	r30, r24
    299e:	f9 1f       	adc	r31, r25
    29a0:	e2 0f       	add	r30, r18
    29a2:	f1 1d       	adc	r31, r1
    29a4:	e0 82       	st	Z, r14
    29a6:	80 91 cd 03 	lds	r24, 0x03CD
    29aa:	8f 5f       	subi	r24, 0xFF	; 255
    29ac:	80 93 cd 03 	sts	0x03CD, r24
    29b0:	90 91 be 03 	lds	r25, 0x03BE
    29b4:	89 17       	cp	r24, r25
    29b6:	09 f0       	breq	.+2      	; 0x29ba <lcd_putchar+0xb0>
    29b8:	bb c0       	rjmp	.+374    	; 0x2b30 <lcd_putchar+0x226>
    29ba:	40 91 cc 03 	lds	r20, 0x03CC
    29be:	24 2f       	mov	r18, r20
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	80 91 bd 03 	lds	r24, 0x03BD
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	28 17       	cp	r18, r24
    29cc:	39 07       	cpc	r19, r25
    29ce:	09 f0       	breq	.+2      	; 0x29d2 <lcd_putchar+0xc8>
    29d0:	a4 c0       	rjmp	.+328    	; 0x2b1a <lcd_putchar+0x210>
    29d2:	c0 e0       	ldi	r28, 0x00	; 0
    29d4:	d0 e0       	ldi	r29, 0x00	; 0
    29d6:	44 c0       	rjmp	.+136    	; 0x2a60 <lcd_putchar+0x156>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	6c 2f       	mov	r22, r28
    29dc:	0e 94 3e 13 	call	0x267c	; 0x267c <_ZN12OrangutanLCD6gotoXYEhh>
    29e0:	ff 24       	eor	r15, r15
    29e2:	6e 01       	movw	r12, r28
    29e4:	08 94       	sec
    29e6:	c1 1c       	adc	r12, r1
    29e8:	d1 1c       	adc	r13, r1
    29ea:	35 c0       	rjmp	.+106    	; 0x2a56 <lcd_putchar+0x14c>
    29ec:	0f 2d       	mov	r16, r15
    29ee:	10 e0       	ldi	r17, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9c 01       	movw	r18, r24
    29f4:	c2 9f       	mul	r28, r18
    29f6:	c0 01       	movw	r24, r0
    29f8:	c3 9f       	mul	r28, r19
    29fa:	90 0d       	add	r25, r0
    29fc:	d2 9f       	mul	r29, r18
    29fe:	90 0d       	add	r25, r0
    2a00:	11 24       	eor	r1, r1
    2a02:	e0 91 ca 03 	lds	r30, 0x03CA
    2a06:	f0 91 cb 03 	lds	r31, 0x03CB
    2a0a:	e0 0f       	add	r30, r16
    2a0c:	f1 1f       	adc	r31, r17
    2a0e:	e8 0f       	add	r30, r24
    2a10:	f9 1f       	adc	r31, r25
    2a12:	80 81       	ld	r24, Z
    2a14:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD9send_dataEh>
    2a18:	e0 91 ca 03 	lds	r30, 0x03CA
    2a1c:	f0 91 cb 03 	lds	r31, 0x03CB
    2a20:	80 91 be 03 	lds	r24, 0x03BE
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	c8 9f       	mul	r28, r24
    2a28:	d0 01       	movw	r26, r0
    2a2a:	c9 9f       	mul	r28, r25
    2a2c:	b0 0d       	add	r27, r0
    2a2e:	d8 9f       	mul	r29, r24
    2a30:	b0 0d       	add	r27, r0
    2a32:	11 24       	eor	r1, r1
    2a34:	e0 0f       	add	r30, r16
    2a36:	f1 1f       	adc	r31, r17
    2a38:	ae 0f       	add	r26, r30
    2a3a:	bf 1f       	adc	r27, r31
    2a3c:	ac 01       	movw	r20, r24
    2a3e:	c4 9e       	mul	r12, r20
    2a40:	c0 01       	movw	r24, r0
    2a42:	c5 9e       	mul	r12, r21
    2a44:	90 0d       	add	r25, r0
    2a46:	d4 9e       	mul	r13, r20
    2a48:	90 0d       	add	r25, r0
    2a4a:	11 24       	eor	r1, r1
    2a4c:	e8 0f       	add	r30, r24
    2a4e:	f9 1f       	adc	r31, r25
    2a50:	80 81       	ld	r24, Z
    2a52:	8c 93       	st	X, r24
    2a54:	f3 94       	inc	r15
    2a56:	80 91 be 03 	lds	r24, 0x03BE
    2a5a:	f8 16       	cp	r15, r24
    2a5c:	38 f2       	brcs	.-114    	; 0x29ec <lcd_putchar+0xe2>
    2a5e:	e6 01       	movw	r28, r12
    2a60:	60 91 bd 03 	lds	r22, 0x03BD
    2a64:	86 2f       	mov	r24, r22
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	02 97       	sbiw	r24, 0x02	; 2
    2a6a:	c8 17       	cp	r28, r24
    2a6c:	d9 07       	cpc	r29, r25
    2a6e:	0c f4       	brge	.+2      	; 0x2a72 <lcd_putchar+0x168>
    2a70:	b3 cf       	rjmp	.-154    	; 0x29d8 <lcd_putchar+0xce>
    2a72:	62 30       	cpi	r22, 0x02	; 2
    2a74:	08 f4       	brcc	.+2      	; 0x2a78 <lcd_putchar+0x16e>
    2a76:	40 c0       	rjmp	.+128    	; 0x2af8 <lcd_putchar+0x1ee>
    2a78:	62 50       	subi	r22, 0x02	; 2
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	0e 94 3e 13 	call	0x267c	; 0x267c <_ZN12OrangutanLCD6gotoXYEhh>
    2a80:	ff 24       	eor	r15, r15
    2a82:	40 e2       	ldi	r20, 0x20	; 32
    2a84:	d4 2e       	mov	r13, r20
    2a86:	34 c0       	rjmp	.+104    	; 0x2af0 <lcd_putchar+0x1e6>
    2a88:	0f 2d       	mov	r16, r15
    2a8a:	10 e0       	ldi	r17, 0x00	; 0
    2a8c:	80 91 bd 03 	lds	r24, 0x03BD
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	02 97       	sbiw	r24, 0x02	; 2
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	ac 01       	movw	r20, r24
    2a98:	42 9f       	mul	r20, r18
    2a9a:	c0 01       	movw	r24, r0
    2a9c:	43 9f       	mul	r20, r19
    2a9e:	90 0d       	add	r25, r0
    2aa0:	52 9f       	mul	r21, r18
    2aa2:	90 0d       	add	r25, r0
    2aa4:	11 24       	eor	r1, r1
    2aa6:	e0 91 ca 03 	lds	r30, 0x03CA
    2aaa:	f0 91 cb 03 	lds	r31, 0x03CB
    2aae:	e0 0f       	add	r30, r16
    2ab0:	f1 1f       	adc	r31, r17
    2ab2:	e8 0f       	add	r30, r24
    2ab4:	f9 1f       	adc	r31, r25
    2ab6:	80 81       	ld	r24, Z
    2ab8:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD9send_dataEh>
    2abc:	20 91 bd 03 	lds	r18, 0x03BD
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	22 50       	subi	r18, 0x02	; 2
    2ac4:	30 40       	sbci	r19, 0x00	; 0
    2ac6:	80 91 be 03 	lds	r24, 0x03BE
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	ac 01       	movw	r20, r24
    2ace:	24 9f       	mul	r18, r20
    2ad0:	c0 01       	movw	r24, r0
    2ad2:	25 9f       	mul	r18, r21
    2ad4:	90 0d       	add	r25, r0
    2ad6:	34 9f       	mul	r19, r20
    2ad8:	90 0d       	add	r25, r0
    2ada:	11 24       	eor	r1, r1
    2adc:	e0 91 ca 03 	lds	r30, 0x03CA
    2ae0:	f0 91 cb 03 	lds	r31, 0x03CB
    2ae4:	e0 0f       	add	r30, r16
    2ae6:	f1 1f       	adc	r31, r17
    2ae8:	e8 0f       	add	r30, r24
    2aea:	f9 1f       	adc	r31, r25
    2aec:	d0 82       	st	Z, r13
    2aee:	f3 94       	inc	r15
    2af0:	20 91 be 03 	lds	r18, 0x03BE
    2af4:	f2 16       	cp	r15, r18
    2af6:	40 f2       	brcs	.-112    	; 0x2a88 <lcd_putchar+0x17e>
    2af8:	60 91 bd 03 	lds	r22, 0x03BD
    2afc:	61 50       	subi	r22, 0x01	; 1
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	0e 94 3e 13 	call	0x267c	; 0x267c <_ZN12OrangutanLCD6gotoXYEhh>
    2b04:	00 e0       	ldi	r16, 0x00	; 0
    2b06:	04 c0       	rjmp	.+8      	; 0x2b10 <lcd_putchar+0x206>
    2b08:	80 e2       	ldi	r24, 0x20	; 32
    2b0a:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD9send_dataEh>
    2b0e:	0f 5f       	subi	r16, 0xFF	; 255
    2b10:	80 91 be 03 	lds	r24, 0x03BE
    2b14:	08 17       	cp	r16, r24
    2b16:	c0 f3       	brcs	.-16     	; 0x2b08 <lcd_putchar+0x1fe>
    2b18:	03 c0       	rjmp	.+6      	; 0x2b20 <lcd_putchar+0x216>
    2b1a:	4f 5f       	subi	r20, 0xFF	; 255
    2b1c:	40 93 cc 03 	sts	0x03CC, r20
    2b20:	10 92 cd 03 	sts	0x03CD, r1
    2b24:	80 91 cd 03 	lds	r24, 0x03CD
    2b28:	60 91 cc 03 	lds	r22, 0x03CC
    2b2c:	0e 94 3e 13 	call	0x267c	; 0x267c <_ZN12OrangutanLCD6gotoXYEhh>
    2b30:	2e 2d       	mov	r18, r14
    2b32:	33 27       	eor	r19, r19
    2b34:	27 fd       	sbrc	r18, 7
    2b36:	30 95       	com	r19
    2b38:	c9 01       	movw	r24, r18
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
    2b3e:	e8 e0       	ldi	r30, 0x08	; 8
    2b40:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__epilogue_restores__+0x14>

00002b44 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	7c 01       	movw	r14, r24
    2b52:	06 2f       	mov	r16, r22
    2b54:	10 e0       	ldi	r17, 0x00	; 0
    2b56:	53 e0       	ldi	r21, 0x03	; 3
    2b58:	00 0f       	add	r16, r16
    2b5a:	11 1f       	adc	r17, r17
    2b5c:	5a 95       	dec	r21
    2b5e:	e1 f7       	brne	.-8      	; 0x2b58 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    2b60:	c0 e0       	ldi	r28, 0x00	; 0
    2b62:	d0 e0       	ldi	r29, 0x00	; 0
    2b64:	9e 01       	movw	r18, r28
    2b66:	20 0f       	add	r18, r16
    2b68:	82 2f       	mov	r24, r18
    2b6a:	80 64       	ori	r24, 0x40	; 64
    2b6c:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN12OrangutanLCD8send_cmdEh>
    2b70:	f7 01       	movw	r30, r14
    2b72:	ec 0f       	add	r30, r28
    2b74:	fd 1f       	adc	r31, r29
    2b76:	e4 91       	lpm	r30, Z+
    2b78:	8e 2f       	mov	r24, r30
    2b7a:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD9send_dataEh>
    2b7e:	21 96       	adiw	r28, 0x01	; 1
    2b80:	c8 30       	cpi	r28, 0x08	; 8
    2b82:	d1 05       	cpc	r29, r1
    2b84:	79 f7       	brne	.-34     	; 0x2b64 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
    2b8a:	e6 e0       	ldi	r30, 0x06	; 6
    2b8c:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <__epilogue_restores__+0x18>

00002b90 <lcd_load_custom_character>:
    2b90:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    2b94:	08 95       	ret

00002b96 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    2b96:	60 e0       	ldi	r22, 0x00	; 0
    2b98:	41 e0       	ldi	r20, 0x01	; 1
    2b9a:	0e 94 be 12 	call	0x257c	; 0x257c <_ZN12OrangutanLCD4sendEhhh>
    2b9e:	08 95       	ret

00002ba0 <_ZN12OrangutanLCD6scrollEhhj>:
    2ba0:	0f 93       	push	r16
    2ba2:	1f 93       	push	r17
    2ba4:	cf 93       	push	r28
    2ba6:	df 93       	push	r29
    2ba8:	08 2f       	mov	r16, r24
    2baa:	16 2f       	mov	r17, r22
    2bac:	ea 01       	movw	r28, r20
    2bae:	0b c0       	rjmp	.+22     	; 0x2bc6 <_ZN12OrangutanLCD6scrollEhhj+0x26>
    2bb0:	00 23       	and	r16, r16
    2bb2:	11 f4       	brne	.+4      	; 0x2bb8 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    2bb4:	88 e1       	ldi	r24, 0x18	; 24
    2bb6:	01 c0       	rjmp	.+2      	; 0x2bba <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    2bb8:	8c e1       	ldi	r24, 0x1C	; 28
    2bba:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN12OrangutanLCD8send_cmdEh>
    2bbe:	ce 01       	movw	r24, r28
    2bc0:	0e 94 38 16 	call	0x2c70	; 0x2c70 <delay_ms>
    2bc4:	11 50       	subi	r17, 0x01	; 1
    2bc6:	11 23       	and	r17, r17
    2bc8:	99 f7       	brne	.-26     	; 0x2bb0 <_ZN12OrangutanLCD6scrollEhhj+0x10>
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	1f 91       	pop	r17
    2bd0:	0f 91       	pop	r16
    2bd2:	08 95       	ret

00002bd4 <lcd_scroll>:
    2bd4:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <_ZN12OrangutanLCD6scrollEhhj>
    2bd8:	08 95       	ret

00002bda <__vector_11>:
    2bda:	2f 92       	push	r2
    2bdc:	8f 93       	push	r24
    2bde:	9f 93       	push	r25
    2be0:	2f b6       	in	r2, 0x3f	; 63
    2be2:	80 91 d4 03 	lds	r24, 0x03D4
    2be6:	90 91 d5 03 	lds	r25, 0x03D5
    2bea:	01 96       	adiw	r24, 0x01	; 1
    2bec:	80 93 d4 03 	sts	0x03D4, r24
    2bf0:	90 93 d5 03 	sts	0x03D5, r25
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	80 91 d6 03 	lds	r24, 0x03D6
    2bfa:	89 1f       	adc	r24, r25
    2bfc:	80 93 d6 03 	sts	0x03D6, r24
    2c00:	90 91 dc 03 	lds	r25, 0x03DC
    2c04:	9c 5f       	subi	r25, 0xFC	; 252
    2c06:	90 93 dc 03 	sts	0x03DC, r25
    2c0a:	80 91 db 03 	lds	r24, 0x03DB
    2c0e:	80 51       	subi	r24, 0x10	; 16
    2c10:	97 42       	sbci	r25, 0x27	; 39
    2c12:	c0 f0       	brcs	.+48     	; 0x2c44 <end>
    2c14:	90 93 dc 03 	sts	0x03DC, r25
    2c18:	80 93 db 03 	sts	0x03DB, r24
    2c1c:	80 91 d7 03 	lds	r24, 0x03D7
    2c20:	90 91 d8 03 	lds	r25, 0x03D8
    2c24:	01 96       	adiw	r24, 0x01	; 1
    2c26:	80 93 d7 03 	sts	0x03D7, r24
    2c2a:	90 93 d8 03 	sts	0x03D8, r25
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	80 91 d9 03 	lds	r24, 0x03D9
    2c34:	89 1f       	adc	r24, r25
    2c36:	80 93 d9 03 	sts	0x03D9, r24
    2c3a:	80 91 da 03 	lds	r24, 0x03DA
    2c3e:	89 1f       	adc	r24, r25
    2c40:	80 93 da 03 	sts	0x03DA, r24

00002c44 <end>:
    2c44:	2f be       	out	0x3f, r2	; 63
    2c46:	9f 91       	pop	r25
    2c48:	8f 91       	pop	r24
    2c4a:	2f 90       	pop	r2
    2c4c:	18 95       	reti

00002c4e <ticks_to_microseconds>:
    2c4e:	6f 5f       	subi	r22, 0xFF	; 255
    2c50:	7f 4f       	sbci	r23, 0xFF	; 255
    2c52:	8f 4f       	sbci	r24, 0xFF	; 255
    2c54:	9f 4f       	sbci	r25, 0xFF	; 255
    2c56:	66 0f       	add	r22, r22
    2c58:	77 1f       	adc	r23, r23
    2c5a:	88 1f       	adc	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	25 e0       	ldi	r18, 0x05	; 5
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	50 e0       	ldi	r21, 0x00	; 0
    2c66:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <__udivmodsi4>
    2c6a:	ca 01       	movw	r24, r20
    2c6c:	b9 01       	movw	r22, r18
    2c6e:	08 95       	ret

00002c70 <delay_ms>:
    2c70:	28 ee       	ldi	r18, 0xE8	; 232
    2c72:	33 e0       	ldi	r19, 0x03	; 3
    2c74:	09 c0       	rjmp	.+18     	; 0x2c88 <delay_ms+0x18>
    2c76:	f9 01       	movw	r30, r18
    2c78:	6f 93       	push	r22
    2c7a:	64 e0       	ldi	r22, 0x04	; 4
    2c7c:	6a 95       	dec	r22
    2c7e:	f1 f7       	brne	.-4      	; 0x2c7c <delay_ms+0xc>
    2c80:	6f 91       	pop	r22
    2c82:	31 97       	sbiw	r30, 0x01	; 1
    2c84:	c9 f7       	brne	.-14     	; 0x2c78 <delay_ms+0x8>
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	a9 f7       	brne	.-22     	; 0x2c76 <delay_ms+0x6>
    2c8c:	08 95       	ret

00002c8e <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    2c8e:	6f 5f       	subi	r22, 0xFF	; 255
    2c90:	7f 4f       	sbci	r23, 0xFF	; 255
    2c92:	8f 4f       	sbci	r24, 0xFF	; 255
    2c94:	9f 4f       	sbci	r25, 0xFF	; 255
    2c96:	66 0f       	add	r22, r22
    2c98:	77 1f       	adc	r23, r23
    2c9a:	88 1f       	adc	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	25 e0       	ldi	r18, 0x05	; 5
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	40 e0       	ldi	r20, 0x00	; 0
    2ca4:	50 e0       	ldi	r21, 0x00	; 0
    2ca6:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <__udivmodsi4>
    2caa:	ca 01       	movw	r24, r20
    2cac:	b9 01       	movw	r22, r18
    2cae:	08 95       	ret

00002cb0 <_ZN13OrangutanTime17delayMillisecondsEj>:
    2cb0:	28 ee       	ldi	r18, 0xE8	; 232
    2cb2:	33 e0       	ldi	r19, 0x03	; 3
    2cb4:	09 c0       	rjmp	.+18     	; 0x2cc8 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    2cb6:	f9 01       	movw	r30, r18
    2cb8:	6f 93       	push	r22
    2cba:	64 e0       	ldi	r22, 0x04	; 4
    2cbc:	6a 95       	dec	r22
    2cbe:	f1 f7       	brne	.-4      	; 0x2cbc <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    2cc0:	6f 91       	pop	r22
    2cc2:	31 97       	sbiw	r30, 0x01	; 1
    2cc4:	c9 f7       	brne	.-14     	; 0x2cb8 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	a9 f7       	brne	.-22     	; 0x2cb6 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    2ccc:	08 95       	ret

00002cce <_ZN13OrangutanTime5init2Ev>:
    2cce:	a0 e7       	ldi	r26, 0x70	; 112
    2cd0:	b0 e0       	ldi	r27, 0x00	; 0
    2cd2:	8c 91       	ld	r24, X
    2cd4:	8e 7f       	andi	r24, 0xFE	; 254
    2cd6:	8c 93       	st	X, r24
    2cd8:	e0 eb       	ldi	r30, 0xB0	; 176
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	83 60       	ori	r24, 0x03	; 3
    2ce0:	80 83       	st	Z, r24
    2ce2:	e1 eb       	ldi	r30, 0xB1	; 177
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	80 7f       	andi	r24, 0xF0	; 240
    2cea:	80 83       	st	Z, r24
    2cec:	80 81       	ld	r24, Z
    2cee:	82 60       	ori	r24, 0x02	; 2
    2cf0:	80 83       	st	Z, r24
    2cf2:	b8 9a       	sbi	0x17, 0	; 23
    2cf4:	8c 91       	ld	r24, X
    2cf6:	81 60       	ori	r24, 0x01	; 1
    2cf8:	8c 93       	st	X, r24
    2cfa:	78 94       	sei
    2cfc:	08 95       	ret

00002cfe <_ZN13OrangutanTime4initEv>:
    2cfe:	80 91 dd 03 	lds	r24, 0x03DD
    2d02:	88 23       	and	r24, r24
    2d04:	29 f4       	brne	.+10     	; 0x2d10 <_ZN13OrangutanTime4initEv+0x12>
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	80 93 dd 03 	sts	0x03DD, r24
    2d0c:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN13OrangutanTime5init2Ev>
    2d10:	08 95       	ret

00002d12 <_ZN13OrangutanTime2msEv>:
    2d12:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <_ZN13OrangutanTime4initEv>
    2d16:	e0 e7       	ldi	r30, 0x70	; 112
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	8e 7f       	andi	r24, 0xFE	; 254
    2d1e:	80 83       	st	Z, r24
    2d20:	20 91 d7 03 	lds	r18, 0x03D7
    2d24:	30 91 d8 03 	lds	r19, 0x03D8
    2d28:	40 91 d9 03 	lds	r20, 0x03D9
    2d2c:	50 91 da 03 	lds	r21, 0x03DA
    2d30:	80 81       	ld	r24, Z
    2d32:	81 60       	ori	r24, 0x01	; 1
    2d34:	80 83       	st	Z, r24
    2d36:	b9 01       	movw	r22, r18
    2d38:	ca 01       	movw	r24, r20
    2d3a:	08 95       	ret

00002d3c <get_ms>:
    2d3c:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_ZN13OrangutanTime2msEv>
    2d40:	08 95       	ret

00002d42 <_ZN13OrangutanTime5ticksEv>:
    2d42:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <_ZN13OrangutanTime4initEv>
    2d46:	80 91 70 00 	lds	r24, 0x0070
    2d4a:	8e 7f       	andi	r24, 0xFE	; 254
    2d4c:	80 93 70 00 	sts	0x0070, r24
    2d50:	60 91 b2 00 	lds	r22, 0x00B2
    2d54:	80 91 d3 03 	lds	r24, 0x03D3
    2d58:	90 91 d4 03 	lds	r25, 0x03D4
    2d5c:	a0 91 d5 03 	lds	r26, 0x03D5
    2d60:	b0 91 d6 03 	lds	r27, 0x03D6
    2d64:	b8 99       	sbic	0x17, 0	; 23
    2d66:	05 c0       	rjmp	.+10     	; 0x2d72 <_ZN13OrangutanTime5ticksEv+0x30>
    2d68:	26 2f       	mov	r18, r22
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	50 e0       	ldi	r21, 0x00	; 0
    2d70:	11 c0       	rjmp	.+34     	; 0x2d94 <_ZN13OrangutanTime5ticksEv+0x52>
    2d72:	80 91 b2 00 	lds	r24, 0x00B2
    2d76:	20 91 d3 03 	lds	r18, 0x03D3
    2d7a:	30 91 d4 03 	lds	r19, 0x03D4
    2d7e:	40 91 d5 03 	lds	r20, 0x03D5
    2d82:	50 91 d6 03 	lds	r21, 0x03D6
    2d86:	20 50       	subi	r18, 0x00	; 0
    2d88:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8a:	4f 4f       	sbci	r20, 0xFF	; 255
    2d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	a0 e0       	ldi	r26, 0x00	; 0
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	28 2b       	or	r18, r24
    2d96:	39 2b       	or	r19, r25
    2d98:	4a 2b       	or	r20, r26
    2d9a:	5b 2b       	or	r21, r27
    2d9c:	80 91 70 00 	lds	r24, 0x0070
    2da0:	81 60       	ori	r24, 0x01	; 1
    2da2:	80 93 70 00 	sts	0x0070, r24
    2da6:	b9 01       	movw	r22, r18
    2da8:	ca 01       	movw	r24, r20
    2daa:	08 95       	ret

00002dac <get_ticks>:
    2dac:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <_ZN13OrangutanTime5ticksEv>
    2db0:	08 95       	ret

00002db2 <_ZN13OrangutanTime5resetEv>:
    2db2:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <_ZN13OrangutanTime4initEv>
    2db6:	e0 e7       	ldi	r30, 0x70	; 112
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
    2dbc:	8e 7f       	andi	r24, 0xFE	; 254
    2dbe:	80 83       	st	Z, r24
    2dc0:	10 92 d7 03 	sts	0x03D7, r1
    2dc4:	10 92 d8 03 	sts	0x03D8, r1
    2dc8:	10 92 d9 03 	sts	0x03D9, r1
    2dcc:	10 92 da 03 	sts	0x03DA, r1
    2dd0:	10 92 dc 03 	sts	0x03DC, r1
    2dd4:	10 92 db 03 	sts	0x03DB, r1
    2dd8:	80 81       	ld	r24, Z
    2dda:	81 60       	ori	r24, 0x01	; 1
    2ddc:	80 83       	st	Z, r24
    2dde:	08 95       	ret

00002de0 <time_reset>:
    2de0:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <_ZN13OrangutanTime5resetEv>
    2de4:	08 95       	ret

00002de6 <__mulsi3>:
    2de6:	62 9f       	mul	r22, r18
    2de8:	d0 01       	movw	r26, r0
    2dea:	73 9f       	mul	r23, r19
    2dec:	f0 01       	movw	r30, r0
    2dee:	82 9f       	mul	r24, r18
    2df0:	e0 0d       	add	r30, r0
    2df2:	f1 1d       	adc	r31, r1
    2df4:	64 9f       	mul	r22, r20
    2df6:	e0 0d       	add	r30, r0
    2df8:	f1 1d       	adc	r31, r1
    2dfa:	92 9f       	mul	r25, r18
    2dfc:	f0 0d       	add	r31, r0
    2dfe:	83 9f       	mul	r24, r19
    2e00:	f0 0d       	add	r31, r0
    2e02:	74 9f       	mul	r23, r20
    2e04:	f0 0d       	add	r31, r0
    2e06:	65 9f       	mul	r22, r21
    2e08:	f0 0d       	add	r31, r0
    2e0a:	99 27       	eor	r25, r25
    2e0c:	72 9f       	mul	r23, r18
    2e0e:	b0 0d       	add	r27, r0
    2e10:	e1 1d       	adc	r30, r1
    2e12:	f9 1f       	adc	r31, r25
    2e14:	63 9f       	mul	r22, r19
    2e16:	b0 0d       	add	r27, r0
    2e18:	e1 1d       	adc	r30, r1
    2e1a:	f9 1f       	adc	r31, r25
    2e1c:	bd 01       	movw	r22, r26
    2e1e:	cf 01       	movw	r24, r30
    2e20:	11 24       	eor	r1, r1
    2e22:	08 95       	ret

00002e24 <__divmodhi4>:
    2e24:	97 fb       	bst	r25, 7
    2e26:	09 2e       	mov	r0, r25
    2e28:	07 26       	eor	r0, r23
    2e2a:	0a d0       	rcall	.+20     	; 0x2e40 <__divmodhi4_neg1>
    2e2c:	77 fd       	sbrc	r23, 7
    2e2e:	04 d0       	rcall	.+8      	; 0x2e38 <__divmodhi4_neg2>
    2e30:	65 d0       	rcall	.+202    	; 0x2efc <__udivmodhi4>
    2e32:	06 d0       	rcall	.+12     	; 0x2e40 <__divmodhi4_neg1>
    2e34:	00 20       	and	r0, r0
    2e36:	1a f4       	brpl	.+6      	; 0x2e3e <__divmodhi4_exit>

00002e38 <__divmodhi4_neg2>:
    2e38:	70 95       	com	r23
    2e3a:	61 95       	neg	r22
    2e3c:	7f 4f       	sbci	r23, 0xFF	; 255

00002e3e <__divmodhi4_exit>:
    2e3e:	08 95       	ret

00002e40 <__divmodhi4_neg1>:
    2e40:	f6 f7       	brtc	.-4      	; 0x2e3e <__divmodhi4_exit>
    2e42:	90 95       	com	r25
    2e44:	81 95       	neg	r24
    2e46:	9f 4f       	sbci	r25, 0xFF	; 255
    2e48:	08 95       	ret

00002e4a <__udivmodsi4>:
    2e4a:	a1 e2       	ldi	r26, 0x21	; 33
    2e4c:	1a 2e       	mov	r1, r26
    2e4e:	aa 1b       	sub	r26, r26
    2e50:	bb 1b       	sub	r27, r27
    2e52:	fd 01       	movw	r30, r26
    2e54:	0d c0       	rjmp	.+26     	; 0x2e70 <__udivmodsi4_ep>

00002e56 <__udivmodsi4_loop>:
    2e56:	aa 1f       	adc	r26, r26
    2e58:	bb 1f       	adc	r27, r27
    2e5a:	ee 1f       	adc	r30, r30
    2e5c:	ff 1f       	adc	r31, r31
    2e5e:	a2 17       	cp	r26, r18
    2e60:	b3 07       	cpc	r27, r19
    2e62:	e4 07       	cpc	r30, r20
    2e64:	f5 07       	cpc	r31, r21
    2e66:	20 f0       	brcs	.+8      	; 0x2e70 <__udivmodsi4_ep>
    2e68:	a2 1b       	sub	r26, r18
    2e6a:	b3 0b       	sbc	r27, r19
    2e6c:	e4 0b       	sbc	r30, r20
    2e6e:	f5 0b       	sbc	r31, r21

00002e70 <__udivmodsi4_ep>:
    2e70:	66 1f       	adc	r22, r22
    2e72:	77 1f       	adc	r23, r23
    2e74:	88 1f       	adc	r24, r24
    2e76:	99 1f       	adc	r25, r25
    2e78:	1a 94       	dec	r1
    2e7a:	69 f7       	brne	.-38     	; 0x2e56 <__udivmodsi4_loop>
    2e7c:	60 95       	com	r22
    2e7e:	70 95       	com	r23
    2e80:	80 95       	com	r24
    2e82:	90 95       	com	r25
    2e84:	9b 01       	movw	r18, r22
    2e86:	ac 01       	movw	r20, r24
    2e88:	bd 01       	movw	r22, r26
    2e8a:	cf 01       	movw	r24, r30
    2e8c:	08 95       	ret

00002e8e <__prologue_saves__>:
    2e8e:	2f 92       	push	r2
    2e90:	3f 92       	push	r3
    2e92:	4f 92       	push	r4
    2e94:	5f 92       	push	r5
    2e96:	6f 92       	push	r6
    2e98:	7f 92       	push	r7
    2e9a:	8f 92       	push	r8
    2e9c:	9f 92       	push	r9
    2e9e:	af 92       	push	r10
    2ea0:	bf 92       	push	r11
    2ea2:	cf 92       	push	r12
    2ea4:	df 92       	push	r13
    2ea6:	ef 92       	push	r14
    2ea8:	ff 92       	push	r15
    2eaa:	0f 93       	push	r16
    2eac:	1f 93       	push	r17
    2eae:	cf 93       	push	r28
    2eb0:	df 93       	push	r29
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
    2eb6:	ca 1b       	sub	r28, r26
    2eb8:	db 0b       	sbc	r29, r27
    2eba:	0f b6       	in	r0, 0x3f	; 63
    2ebc:	f8 94       	cli
    2ebe:	de bf       	out	0x3e, r29	; 62
    2ec0:	0f be       	out	0x3f, r0	; 63
    2ec2:	cd bf       	out	0x3d, r28	; 61
    2ec4:	09 94       	ijmp

00002ec6 <__epilogue_restores__>:
    2ec6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ec8:	39 88       	ldd	r3, Y+17	; 0x11
    2eca:	48 88       	ldd	r4, Y+16	; 0x10
    2ecc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ece:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ed0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ed2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ed4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ed6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ed8:	b9 84       	ldd	r11, Y+9	; 0x09
    2eda:	c8 84       	ldd	r12, Y+8	; 0x08
    2edc:	df 80       	ldd	r13, Y+7	; 0x07
    2ede:	ee 80       	ldd	r14, Y+6	; 0x06
    2ee0:	fd 80       	ldd	r15, Y+5	; 0x05
    2ee2:	0c 81       	ldd	r16, Y+4	; 0x04
    2ee4:	1b 81       	ldd	r17, Y+3	; 0x03
    2ee6:	aa 81       	ldd	r26, Y+2	; 0x02
    2ee8:	b9 81       	ldd	r27, Y+1	; 0x01
    2eea:	ce 0f       	add	r28, r30
    2eec:	d1 1d       	adc	r29, r1
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	ed 01       	movw	r28, r26
    2efa:	08 95       	ret

00002efc <__udivmodhi4>:
    2efc:	aa 1b       	sub	r26, r26
    2efe:	bb 1b       	sub	r27, r27
    2f00:	51 e1       	ldi	r21, 0x11	; 17
    2f02:	07 c0       	rjmp	.+14     	; 0x2f12 <__udivmodhi4_ep>

00002f04 <__udivmodhi4_loop>:
    2f04:	aa 1f       	adc	r26, r26
    2f06:	bb 1f       	adc	r27, r27
    2f08:	a6 17       	cp	r26, r22
    2f0a:	b7 07       	cpc	r27, r23
    2f0c:	10 f0       	brcs	.+4      	; 0x2f12 <__udivmodhi4_ep>
    2f0e:	a6 1b       	sub	r26, r22
    2f10:	b7 0b       	sbc	r27, r23

00002f12 <__udivmodhi4_ep>:
    2f12:	88 1f       	adc	r24, r24
    2f14:	99 1f       	adc	r25, r25
    2f16:	5a 95       	dec	r21
    2f18:	a9 f7       	brne	.-22     	; 0x2f04 <__udivmodhi4_loop>
    2f1a:	80 95       	com	r24
    2f1c:	90 95       	com	r25
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	08 95       	ret

00002f24 <malloc>:
    2f24:	cf 93       	push	r28
    2f26:	df 93       	push	r29
    2f28:	bc 01       	movw	r22, r24
    2f2a:	82 30       	cpi	r24, 0x02	; 2
    2f2c:	91 05       	cpc	r25, r1
    2f2e:	10 f4       	brcc	.+4      	; 0x2f34 <malloc+0x10>
    2f30:	62 e0       	ldi	r22, 0x02	; 2
    2f32:	70 e0       	ldi	r23, 0x00	; 0
    2f34:	a0 91 e6 03 	lds	r26, 0x03E6
    2f38:	b0 91 e7 03 	lds	r27, 0x03E7
    2f3c:	ed 01       	movw	r28, r26
    2f3e:	e0 e0       	ldi	r30, 0x00	; 0
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	40 e0       	ldi	r20, 0x00	; 0
    2f44:	50 e0       	ldi	r21, 0x00	; 0
    2f46:	21 c0       	rjmp	.+66     	; 0x2f8a <malloc+0x66>
    2f48:	88 81       	ld	r24, Y
    2f4a:	99 81       	ldd	r25, Y+1	; 0x01
    2f4c:	86 17       	cp	r24, r22
    2f4e:	97 07       	cpc	r25, r23
    2f50:	69 f4       	brne	.+26     	; 0x2f6c <malloc+0x48>
    2f52:	8a 81       	ldd	r24, Y+2	; 0x02
    2f54:	9b 81       	ldd	r25, Y+3	; 0x03
    2f56:	30 97       	sbiw	r30, 0x00	; 0
    2f58:	19 f0       	breq	.+6      	; 0x2f60 <malloc+0x3c>
    2f5a:	93 83       	std	Z+3, r25	; 0x03
    2f5c:	82 83       	std	Z+2, r24	; 0x02
    2f5e:	04 c0       	rjmp	.+8      	; 0x2f68 <malloc+0x44>
    2f60:	90 93 e7 03 	sts	0x03E7, r25
    2f64:	80 93 e6 03 	sts	0x03E6, r24
    2f68:	fe 01       	movw	r30, r28
    2f6a:	34 c0       	rjmp	.+104    	; 0x2fd4 <malloc+0xb0>
    2f6c:	68 17       	cp	r22, r24
    2f6e:	79 07       	cpc	r23, r25
    2f70:	38 f4       	brcc	.+14     	; 0x2f80 <malloc+0x5c>
    2f72:	41 15       	cp	r20, r1
    2f74:	51 05       	cpc	r21, r1
    2f76:	19 f0       	breq	.+6      	; 0x2f7e <malloc+0x5a>
    2f78:	84 17       	cp	r24, r20
    2f7a:	95 07       	cpc	r25, r21
    2f7c:	08 f4       	brcc	.+2      	; 0x2f80 <malloc+0x5c>
    2f7e:	ac 01       	movw	r20, r24
    2f80:	fe 01       	movw	r30, r28
    2f82:	8a 81       	ldd	r24, Y+2	; 0x02
    2f84:	9b 81       	ldd	r25, Y+3	; 0x03
    2f86:	9c 01       	movw	r18, r24
    2f88:	e9 01       	movw	r28, r18
    2f8a:	20 97       	sbiw	r28, 0x00	; 0
    2f8c:	e9 f6       	brne	.-70     	; 0x2f48 <malloc+0x24>
    2f8e:	41 15       	cp	r20, r1
    2f90:	51 05       	cpc	r21, r1
    2f92:	a9 f1       	breq	.+106    	; 0x2ffe <malloc+0xda>
    2f94:	ca 01       	movw	r24, r20
    2f96:	86 1b       	sub	r24, r22
    2f98:	97 0b       	sbc	r25, r23
    2f9a:	04 97       	sbiw	r24, 0x04	; 4
    2f9c:	08 f4       	brcc	.+2      	; 0x2fa0 <malloc+0x7c>
    2f9e:	ba 01       	movw	r22, r20
    2fa0:	e0 e0       	ldi	r30, 0x00	; 0
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	2a c0       	rjmp	.+84     	; 0x2ffa <malloc+0xd6>
    2fa6:	8d 91       	ld	r24, X+
    2fa8:	9c 91       	ld	r25, X
    2faa:	11 97       	sbiw	r26, 0x01	; 1
    2fac:	84 17       	cp	r24, r20
    2fae:	95 07       	cpc	r25, r21
    2fb0:	f9 f4       	brne	.+62     	; 0x2ff0 <malloc+0xcc>
    2fb2:	64 17       	cp	r22, r20
    2fb4:	75 07       	cpc	r23, r21
    2fb6:	81 f4       	brne	.+32     	; 0x2fd8 <malloc+0xb4>
    2fb8:	12 96       	adiw	r26, 0x02	; 2
    2fba:	8d 91       	ld	r24, X+
    2fbc:	9c 91       	ld	r25, X
    2fbe:	13 97       	sbiw	r26, 0x03	; 3
    2fc0:	30 97       	sbiw	r30, 0x00	; 0
    2fc2:	19 f0       	breq	.+6      	; 0x2fca <malloc+0xa6>
    2fc4:	93 83       	std	Z+3, r25	; 0x03
    2fc6:	82 83       	std	Z+2, r24	; 0x02
    2fc8:	04 c0       	rjmp	.+8      	; 0x2fd2 <malloc+0xae>
    2fca:	90 93 e7 03 	sts	0x03E7, r25
    2fce:	80 93 e6 03 	sts	0x03E6, r24
    2fd2:	fd 01       	movw	r30, r26
    2fd4:	32 96       	adiw	r30, 0x02	; 2
    2fd6:	4f c0       	rjmp	.+158    	; 0x3076 <malloc+0x152>
    2fd8:	ca 01       	movw	r24, r20
    2fda:	86 1b       	sub	r24, r22
    2fdc:	97 0b       	sbc	r25, r23
    2fde:	fd 01       	movw	r30, r26
    2fe0:	e8 0f       	add	r30, r24
    2fe2:	f9 1f       	adc	r31, r25
    2fe4:	61 93       	st	Z+, r22
    2fe6:	71 93       	st	Z+, r23
    2fe8:	02 97       	sbiw	r24, 0x02	; 2
    2fea:	8d 93       	st	X+, r24
    2fec:	9c 93       	st	X, r25
    2fee:	43 c0       	rjmp	.+134    	; 0x3076 <malloc+0x152>
    2ff0:	fd 01       	movw	r30, r26
    2ff2:	82 81       	ldd	r24, Z+2	; 0x02
    2ff4:	93 81       	ldd	r25, Z+3	; 0x03
    2ff6:	9c 01       	movw	r18, r24
    2ff8:	d9 01       	movw	r26, r18
    2ffa:	10 97       	sbiw	r26, 0x00	; 0
    2ffc:	a1 f6       	brne	.-88     	; 0x2fa6 <malloc+0x82>
    2ffe:	80 91 e4 03 	lds	r24, 0x03E4
    3002:	90 91 e5 03 	lds	r25, 0x03E5
    3006:	89 2b       	or	r24, r25
    3008:	41 f4       	brne	.+16     	; 0x301a <malloc+0xf6>
    300a:	80 91 c1 03 	lds	r24, 0x03C1
    300e:	90 91 c2 03 	lds	r25, 0x03C2
    3012:	90 93 e5 03 	sts	0x03E5, r25
    3016:	80 93 e4 03 	sts	0x03E4, r24
    301a:	40 91 c3 03 	lds	r20, 0x03C3
    301e:	50 91 c4 03 	lds	r21, 0x03C4
    3022:	41 15       	cp	r20, r1
    3024:	51 05       	cpc	r21, r1
    3026:	41 f4       	brne	.+16     	; 0x3038 <malloc+0x114>
    3028:	4d b7       	in	r20, 0x3d	; 61
    302a:	5e b7       	in	r21, 0x3e	; 62
    302c:	80 91 bf 03 	lds	r24, 0x03BF
    3030:	90 91 c0 03 	lds	r25, 0x03C0
    3034:	48 1b       	sub	r20, r24
    3036:	59 0b       	sbc	r21, r25
    3038:	20 91 e4 03 	lds	r18, 0x03E4
    303c:	30 91 e5 03 	lds	r19, 0x03E5
    3040:	24 17       	cp	r18, r20
    3042:	35 07       	cpc	r19, r21
    3044:	b0 f4       	brcc	.+44     	; 0x3072 <malloc+0x14e>
    3046:	ca 01       	movw	r24, r20
    3048:	82 1b       	sub	r24, r18
    304a:	93 0b       	sbc	r25, r19
    304c:	86 17       	cp	r24, r22
    304e:	97 07       	cpc	r25, r23
    3050:	80 f0       	brcs	.+32     	; 0x3072 <malloc+0x14e>
    3052:	ab 01       	movw	r20, r22
    3054:	4e 5f       	subi	r20, 0xFE	; 254
    3056:	5f 4f       	sbci	r21, 0xFF	; 255
    3058:	84 17       	cp	r24, r20
    305a:	95 07       	cpc	r25, r21
    305c:	50 f0       	brcs	.+20     	; 0x3072 <malloc+0x14e>
    305e:	42 0f       	add	r20, r18
    3060:	53 1f       	adc	r21, r19
    3062:	50 93 e5 03 	sts	0x03E5, r21
    3066:	40 93 e4 03 	sts	0x03E4, r20
    306a:	f9 01       	movw	r30, r18
    306c:	61 93       	st	Z+, r22
    306e:	71 93       	st	Z+, r23
    3070:	02 c0       	rjmp	.+4      	; 0x3076 <malloc+0x152>
    3072:	e0 e0       	ldi	r30, 0x00	; 0
    3074:	f0 e0       	ldi	r31, 0x00	; 0
    3076:	cf 01       	movw	r24, r30
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	08 95       	ret

0000307e <free>:
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
    3082:	00 97       	sbiw	r24, 0x00	; 0
    3084:	09 f4       	brne	.+2      	; 0x3088 <free+0xa>
    3086:	50 c0       	rjmp	.+160    	; 0x3128 <free+0xaa>
    3088:	ec 01       	movw	r28, r24
    308a:	22 97       	sbiw	r28, 0x02	; 2
    308c:	1b 82       	std	Y+3, r1	; 0x03
    308e:	1a 82       	std	Y+2, r1	; 0x02
    3090:	a0 91 e6 03 	lds	r26, 0x03E6
    3094:	b0 91 e7 03 	lds	r27, 0x03E7
    3098:	10 97       	sbiw	r26, 0x00	; 0
    309a:	09 f1       	breq	.+66     	; 0x30de <free+0x60>
    309c:	40 e0       	ldi	r20, 0x00	; 0
    309e:	50 e0       	ldi	r21, 0x00	; 0
    30a0:	ac 17       	cp	r26, r28
    30a2:	bd 07       	cpc	r27, r29
    30a4:	08 f1       	brcs	.+66     	; 0x30e8 <free+0x6a>
    30a6:	bb 83       	std	Y+3, r27	; 0x03
    30a8:	aa 83       	std	Y+2, r26	; 0x02
    30aa:	fe 01       	movw	r30, r28
    30ac:	21 91       	ld	r18, Z+
    30ae:	31 91       	ld	r19, Z+
    30b0:	e2 0f       	add	r30, r18
    30b2:	f3 1f       	adc	r31, r19
    30b4:	ae 17       	cp	r26, r30
    30b6:	bf 07       	cpc	r27, r31
    30b8:	79 f4       	brne	.+30     	; 0x30d8 <free+0x5a>
    30ba:	8d 91       	ld	r24, X+
    30bc:	9c 91       	ld	r25, X
    30be:	11 97       	sbiw	r26, 0x01	; 1
    30c0:	28 0f       	add	r18, r24
    30c2:	39 1f       	adc	r19, r25
    30c4:	2e 5f       	subi	r18, 0xFE	; 254
    30c6:	3f 4f       	sbci	r19, 0xFF	; 255
    30c8:	39 83       	std	Y+1, r19	; 0x01
    30ca:	28 83       	st	Y, r18
    30cc:	12 96       	adiw	r26, 0x02	; 2
    30ce:	8d 91       	ld	r24, X+
    30d0:	9c 91       	ld	r25, X
    30d2:	13 97       	sbiw	r26, 0x03	; 3
    30d4:	9b 83       	std	Y+3, r25	; 0x03
    30d6:	8a 83       	std	Y+2, r24	; 0x02
    30d8:	41 15       	cp	r20, r1
    30da:	51 05       	cpc	r21, r1
    30dc:	71 f4       	brne	.+28     	; 0x30fa <free+0x7c>
    30de:	d0 93 e7 03 	sts	0x03E7, r29
    30e2:	c0 93 e6 03 	sts	0x03E6, r28
    30e6:	20 c0       	rjmp	.+64     	; 0x3128 <free+0xaa>
    30e8:	12 96       	adiw	r26, 0x02	; 2
    30ea:	8d 91       	ld	r24, X+
    30ec:	9c 91       	ld	r25, X
    30ee:	13 97       	sbiw	r26, 0x03	; 3
    30f0:	ad 01       	movw	r20, r26
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	11 f0       	breq	.+4      	; 0x30fa <free+0x7c>
    30f6:	dc 01       	movw	r26, r24
    30f8:	d3 cf       	rjmp	.-90     	; 0x30a0 <free+0x22>
    30fa:	fa 01       	movw	r30, r20
    30fc:	d3 83       	std	Z+3, r29	; 0x03
    30fe:	c2 83       	std	Z+2, r28	; 0x02
    3100:	21 91       	ld	r18, Z+
    3102:	31 91       	ld	r19, Z+
    3104:	e2 0f       	add	r30, r18
    3106:	f3 1f       	adc	r31, r19
    3108:	ce 17       	cp	r28, r30
    310a:	df 07       	cpc	r29, r31
    310c:	69 f4       	brne	.+26     	; 0x3128 <free+0xaa>
    310e:	88 81       	ld	r24, Y
    3110:	99 81       	ldd	r25, Y+1	; 0x01
    3112:	28 0f       	add	r18, r24
    3114:	39 1f       	adc	r19, r25
    3116:	2e 5f       	subi	r18, 0xFE	; 254
    3118:	3f 4f       	sbci	r19, 0xFF	; 255
    311a:	fa 01       	movw	r30, r20
    311c:	31 83       	std	Z+1, r19	; 0x01
    311e:	20 83       	st	Z, r18
    3120:	8a 81       	ldd	r24, Y+2	; 0x02
    3122:	9b 81       	ldd	r25, Y+3	; 0x03
    3124:	93 83       	std	Z+3, r25	; 0x03
    3126:	82 83       	std	Z+2, r24	; 0x02
    3128:	df 91       	pop	r29
    312a:	cf 91       	pop	r28
    312c:	08 95       	ret

0000312e <fdevopen>:
    312e:	0f 93       	push	r16
    3130:	1f 93       	push	r17
    3132:	cf 93       	push	r28
    3134:	df 93       	push	r29
    3136:	8c 01       	movw	r16, r24
    3138:	eb 01       	movw	r28, r22
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	31 f4       	brne	.+12     	; 0x314a <fdevopen+0x1c>
    313e:	61 15       	cp	r22, r1
    3140:	71 05       	cpc	r23, r1
    3142:	19 f4       	brne	.+6      	; 0x314a <fdevopen+0x1c>
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	38 c0       	rjmp	.+112    	; 0x31ba <fdevopen+0x8c>
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	6e e0       	ldi	r22, 0x0E	; 14
    3150:	70 e0       	ldi	r23, 0x00	; 0
    3152:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <calloc>
    3156:	fc 01       	movw	r30, r24
    3158:	9c 01       	movw	r18, r24
    315a:	00 97       	sbiw	r24, 0x00	; 0
    315c:	71 f1       	breq	.+92     	; 0x31ba <fdevopen+0x8c>
    315e:	80 e8       	ldi	r24, 0x80	; 128
    3160:	83 83       	std	Z+3, r24	; 0x03
    3162:	20 97       	sbiw	r28, 0x00	; 0
    3164:	71 f0       	breq	.+28     	; 0x3182 <fdevopen+0x54>
    3166:	d3 87       	std	Z+11, r29	; 0x0b
    3168:	c2 87       	std	Z+10, r28	; 0x0a
    316a:	81 e8       	ldi	r24, 0x81	; 129
    316c:	83 83       	std	Z+3, r24	; 0x03
    316e:	80 91 e8 03 	lds	r24, 0x03E8
    3172:	90 91 e9 03 	lds	r25, 0x03E9
    3176:	89 2b       	or	r24, r25
    3178:	21 f4       	brne	.+8      	; 0x3182 <fdevopen+0x54>
    317a:	f0 93 e9 03 	sts	0x03E9, r31
    317e:	e0 93 e8 03 	sts	0x03E8, r30
    3182:	01 15       	cp	r16, r1
    3184:	11 05       	cpc	r17, r1
    3186:	c9 f0       	breq	.+50     	; 0x31ba <fdevopen+0x8c>
    3188:	11 87       	std	Z+9, r17	; 0x09
    318a:	00 87       	std	Z+8, r16	; 0x08
    318c:	83 81       	ldd	r24, Z+3	; 0x03
    318e:	82 60       	ori	r24, 0x02	; 2
    3190:	83 83       	std	Z+3, r24	; 0x03
    3192:	80 91 ea 03 	lds	r24, 0x03EA
    3196:	90 91 eb 03 	lds	r25, 0x03EB
    319a:	89 2b       	or	r24, r25
    319c:	71 f4       	brne	.+28     	; 0x31ba <fdevopen+0x8c>
    319e:	f0 93 eb 03 	sts	0x03EB, r31
    31a2:	e0 93 ea 03 	sts	0x03EA, r30
    31a6:	80 91 ec 03 	lds	r24, 0x03EC
    31aa:	90 91 ed 03 	lds	r25, 0x03ED
    31ae:	89 2b       	or	r24, r25
    31b0:	21 f4       	brne	.+8      	; 0x31ba <fdevopen+0x8c>
    31b2:	f0 93 ed 03 	sts	0x03ED, r31
    31b6:	e0 93 ec 03 	sts	0x03EC, r30
    31ba:	c9 01       	movw	r24, r18
    31bc:	df 91       	pop	r29
    31be:	cf 91       	pop	r28
    31c0:	1f 91       	pop	r17
    31c2:	0f 91       	pop	r16
    31c4:	08 95       	ret

000031c6 <calloc>:
    31c6:	0f 93       	push	r16
    31c8:	1f 93       	push	r17
    31ca:	cf 93       	push	r28
    31cc:	df 93       	push	r29
    31ce:	68 9f       	mul	r22, r24
    31d0:	80 01       	movw	r16, r0
    31d2:	69 9f       	mul	r22, r25
    31d4:	10 0d       	add	r17, r0
    31d6:	78 9f       	mul	r23, r24
    31d8:	10 0d       	add	r17, r0
    31da:	11 24       	eor	r1, r1
    31dc:	c8 01       	movw	r24, r16
    31de:	0e 94 92 17 	call	0x2f24	; 0x2f24 <malloc>
    31e2:	ec 01       	movw	r28, r24
    31e4:	00 97       	sbiw	r24, 0x00	; 0
    31e6:	29 f0       	breq	.+10     	; 0x31f2 <calloc+0x2c>
    31e8:	60 e0       	ldi	r22, 0x00	; 0
    31ea:	70 e0       	ldi	r23, 0x00	; 0
    31ec:	a8 01       	movw	r20, r16
    31ee:	0e 94 ff 18 	call	0x31fe	; 0x31fe <memset>
    31f2:	ce 01       	movw	r24, r28
    31f4:	df 91       	pop	r29
    31f6:	cf 91       	pop	r28
    31f8:	1f 91       	pop	r17
    31fa:	0f 91       	pop	r16
    31fc:	08 95       	ret

000031fe <memset>:
    31fe:	dc 01       	movw	r26, r24
    3200:	01 c0       	rjmp	.+2      	; 0x3204 <memset+0x6>
    3202:	6d 93       	st	X+, r22
    3204:	41 50       	subi	r20, 0x01	; 1
    3206:	50 40       	sbci	r21, 0x00	; 0
    3208:	e0 f7       	brcc	.-8      	; 0x3202 <memset+0x4>
    320a:	08 95       	ret

0000320c <_exit>:
    320c:	f8 94       	cli

0000320e <__stop_program>:
    320e:	ff cf       	rjmp	.-2      	; 0x320e <__stop_program>
