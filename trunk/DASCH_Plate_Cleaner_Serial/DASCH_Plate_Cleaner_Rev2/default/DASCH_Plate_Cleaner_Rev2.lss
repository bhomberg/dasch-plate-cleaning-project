
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000346  00800100  000043a4  00004438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000043a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800446  00800446  0000477e  2**0
                  ALLOC
  3 .stab         00005274  00000000  00000000  00004780  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000544b  00000000  00000000  000099f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000ee3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000043f  00000000  00000000  0000ee7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000012cc  00000000  00000000  0000f2be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002fb  00000000  00000000  0001058a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000019f6  00000000  00000000  00010885  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0001227c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b8c  00000000  00000000  000123fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000012e8  00000000  00000000  00012f88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__vector_11>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      50:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__vector_20>
      54:	0c 94 ee 1a 	jmp	0x35dc	; 0x35dc <__vector_21>
      58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      70:	0c 94 60 19 	jmp	0x32c0	; 0x32c0 <__vector_28>
      74:	0c 94 17 1b 	jmp	0x362e	; 0x362e <__vector_29>
      78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      8c:	a9 0a       	sbc	r10, r25
      8e:	c2 0a       	sbc	r12, r18
      90:	dd 0a       	sbc	r13, r29
      92:	fa 0a       	sbc	r15, r26
      94:	19 0b       	sbc	r17, r25
      96:	35 0b       	sbc	r19, r21
      98:	53 0b       	sbc	r21, r19
      9a:	74 0b       	sbc	r23, r20
      9c:	96 0b       	sbc	r25, r22
      9e:	a0 0b       	sbc	r26, r16
      a0:	a4 0b       	sbc	r26, r20
      a2:	b0 0b       	sbc	r27, r16
      a4:	b4 0b       	sbc	r27, r20
      a6:	be 0b       	sbc	r27, r30
      a8:	c2 0b       	sbc	r28, r18
      aa:	cd 0b       	sbc	r28, r29
      ac:	d1 0b       	sbc	r29, r17
      ae:	dc 0b       	sbc	r29, r28
      b0:	e0 0b       	sbc	r30, r16
      b2:	eb 0b       	sbc	r30, r27
      b4:	ef 0b       	sbc	r30, r31
      b6:	fa 0b       	sbc	r31, r26
      b8:	fe 0b       	sbc	r31, r30
      ba:	0d 0c       	add	r0, r13
      bc:	13 0c       	add	r1, r3
      be:	22 0c       	add	r2, r2
      c0:	26 0c       	add	r2, r6
      c2:	31 0c       	add	r3, r1
      c4:	35 0c       	add	r3, r5
      c6:	40 0c       	add	r4, r0
      c8:	44 0c       	add	r4, r4
      ca:	50 0c       	add	r5, r0
      cc:	56 0c       	add	r5, r6
      ce:	66 0c       	add	r6, r6
      d0:	70 0c       	add	r7, r0
      d2:	86 0c       	add	r8, r6
      d4:	90 0c       	add	r9, r0
      d6:	a6 0c       	add	r10, r6
      d8:	b0 0c       	add	r11, r0
      da:	c6 0c       	add	r12, r6
      dc:	d0 0c       	add	r13, r0
      de:	e6 0c       	add	r14, r6
      e0:	f0 0c       	add	r15, r0
      e2:	fd 0c       	add	r15, r13

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d0 e4       	ldi	r29, 0x40	; 64
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	14 e0       	ldi	r17, 0x04	; 4
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b1 e0       	ldi	r27, 0x01	; 1
      f6:	e4 ea       	ldi	r30, 0xA4	; 164
      f8:	f3 e4       	ldi	r31, 0x43	; 67
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a6 34       	cpi	r26, 0x46	; 70
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	14 e0       	ldi	r17, 0x04	; 4
     10c:	a6 e4       	ldi	r26, 0x46	; 70
     10e:	b4 e0       	ldi	r27, 0x04	; 4
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	ae 38       	cpi	r26, 0x8E	; 142
     116:	b1 07       	cpc	r27, r17
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <main>
     11e:	0c 94 d0 21 	jmp	0x43a0	; 0x43a0 <_exit>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     126:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     12a:	8c e0       	ldi	r24, 0x0C	; 12
     12c:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
     130:	08 95       	ret

00000132 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
     132:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     134:	84 ea       	ldi	r24, 0xA4	; 164
     136:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     13a:	80 91 bc 00 	lds	r24, 0x00BC
     13e:	87 ff       	sbrs	r24, 7
     140:	fc cf       	rjmp	.-8      	; 0x13a <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     142:	80 91 b9 00 	lds	r24, 0x00B9
     146:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     148:	88 30       	cpi	r24, 0x08	; 8
     14a:	21 f0       	breq	.+8      	; 0x154 <i2c_start+0x22>
     14c:	80 31       	cpi	r24, 0x10	; 16
     14e:	11 f0       	breq	.+4      	; 0x154 <i2c_start+0x22>
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	08 95       	ret

	// send device address
	TWDR = address;
     154:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     158:	84 e8       	ldi	r24, 0x84	; 132
     15a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     15e:	80 91 bc 00 	lds	r24, 0x00BC
     162:	87 ff       	sbrs	r24, 7
     164:	fc cf       	rjmp	.-8      	; 0x15e <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     166:	90 91 b9 00 	lds	r25, 0x00B9
     16a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     16c:	98 31       	cpi	r25, 0x18	; 24
     16e:	11 f4       	brne	.+4      	; 0x174 <i2c_start+0x42>
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	08 95       	ret
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 34       	cpi	r25, 0x40	; 64
     178:	09 f0       	breq	.+2      	; 0x17c <i2c_start+0x4a>
     17a:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
     17c:	08 95       	ret

0000017e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     17e:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     180:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     182:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     184:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     186:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     18a:	80 91 bc 00 	lds	r24, 0x00BC
     18e:	87 ff       	sbrs	r24, 7
     190:	fc cf       	rjmp	.-8      	; 0x18a <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     192:	80 91 b9 00 	lds	r24, 0x00B9
     196:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     198:	88 30       	cpi	r24, 0x08	; 8
     19a:	11 f0       	breq	.+4      	; 0x1a0 <i2c_start_wait+0x22>
     19c:	80 31       	cpi	r24, 0x10	; 16
     19e:	99 f7       	brne	.-26     	; 0x186 <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
     1a0:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
     1a4:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     1a8:	80 91 bc 00 	lds	r24, 0x00BC
     1ac:	87 ff       	sbrs	r24, 7
     1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     1b0:	80 91 b9 00 	lds	r24, 0x00B9
     1b4:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     1b6:	80 32       	cpi	r24, 0x20	; 32
     1b8:	11 f0       	breq	.+4      	; 0x1be <i2c_start_wait+0x40>
     1ba:	88 35       	cpi	r24, 0x58	; 88
     1bc:	39 f4       	brne	.+14     	; 0x1cc <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1be:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     1c2:	80 91 bc 00 	lds	r24, 0x00BC
     1c6:	84 fd       	sbrc	r24, 4
     1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <i2c_start_wait+0x44>
     1ca:	dd cf       	rjmp	.-70     	; 0x186 <i2c_start_wait+0x8>
     1cc:	08 95       	ret

000001ce <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     1ce:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>

}/* i2c_rep_start */
     1d2:	08 95       	ret

000001d4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1d4:	84 e9       	ldi	r24, 0x94	; 148
     1d6:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     1da:	80 91 bc 00 	lds	r24, 0x00BC
     1de:	84 fd       	sbrc	r24, 4
     1e0:	fc cf       	rjmp	.-8      	; 0x1da <i2c_stop+0x6>

}/* i2c_stop */
     1e2:	08 95       	ret

000001e4 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     1e4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     1e8:	84 e8       	ldi	r24, 0x84	; 132
     1ea:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     1ee:	80 91 bc 00 	lds	r24, 0x00BC
     1f2:	87 ff       	sbrs	r24, 7
     1f4:	fc cf       	rjmp	.-8      	; 0x1ee <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     1f6:	80 91 b9 00 	lds	r24, 0x00B9
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	88 7f       	andi	r24, 0xF8	; 248
     1fe:	88 32       	cpi	r24, 0x28	; 40
     200:	09 f0       	breq	.+2      	; 0x204 <i2c_write+0x20>
     202:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     204:	89 2f       	mov	r24, r25
     206:	08 95       	ret

00000208 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     208:	84 ec       	ldi	r24, 0xC4	; 196
     20a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     20e:	80 91 bc 00 	lds	r24, 0x00BC
     212:	87 ff       	sbrs	r24, 7
     214:	fc cf       	rjmp	.-8      	; 0x20e <i2c_readAck+0x6>

    return TWDR;
     216:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
     21a:	08 95       	ret

0000021c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     21c:	84 e8       	ldi	r24, 0x84	; 132
     21e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     222:	80 91 bc 00 	lds	r24, 0x00BC
     226:	87 ff       	sbrs	r24, 7
     228:	fc cf       	rjmp	.-8      	; 0x222 <i2c_readNak+0x6>
	
    return TWDR;
     22a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     22e:	08 95       	ret

00000230 <is_digital_input_high>:

// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
// the pin.
static inline unsigned char is_digital_input_high(unsigned char pin)
{
     230:	48 2f       	mov	r20, r24
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     232:	88 30       	cpi	r24, 0x08	; 8
     234:	58 f4       	brcc	.+22     	; 0x24c <is_digital_input_high+0x1c>
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	02 c0       	rjmp	.+4      	; 0x240 <is_digital_input_high+0x10>
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	4a 95       	dec	r20
     242:	e2 f7       	brpl	.-8      	; 0x23c <is_digital_input_high+0xc>
     244:	98 2f       	mov	r25, r24
     246:	e9 e2       	ldi	r30, 0x29	; 41
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	36 c0       	rjmp	.+108    	; 0x2b8 <is_digital_input_high+0x88>
	}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     24c:	80 31       	cpi	r24, 0x10	; 16
     24e:	78 f4       	brcc	.+30     	; 0x26e <is_digital_input_high+0x3e>
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	28 50       	subi	r18, 0x08	; 8
     256:	30 40       	sbci	r19, 0x00	; 0
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	02 c0       	rjmp	.+4      	; 0x262 <is_digital_input_high+0x32>
     25e:	88 0f       	add	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	2a 95       	dec	r18
     264:	e2 f7       	brpl	.-8      	; 0x25e <is_digital_input_high+0x2e>
     266:	98 2f       	mov	r25, r24
     268:	e3 e2       	ldi	r30, 0x23	; 35
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	25 c0       	rjmp	.+74     	; 0x2b8 <is_digital_input_high+0x88>
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     26e:	88 31       	cpi	r24, 0x18	; 24
     270:	78 f4       	brcc	.+30     	; 0x290 <is_digital_input_high+0x60>
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
     272:	28 2f       	mov	r18, r24
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	20 51       	subi	r18, 0x10	; 16
     278:	30 40       	sbci	r19, 0x00	; 0
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	02 c0       	rjmp	.+4      	; 0x284 <is_digital_input_high+0x54>
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	2a 95       	dec	r18
     286:	e2 f7       	brpl	.-8      	; 0x280 <is_digital_input_high+0x50>
     288:	98 2f       	mov	r25, r24
     28a:	e6 e2       	ldi	r30, 0x26	; 38
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	14 c0       	rjmp	.+40     	; 0x2b8 <is_digital_input_high+0x88>
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     290:	80 32       	cpi	r24, 0x20	; 32
     292:	20 f0       	brcs	.+8      	; 0x29c <is_digital_input_high+0x6c>
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	e0 e0       	ldi	r30, 0x00	; 0
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	0e c0       	rjmp	.+28     	; 0x2b8 <is_digital_input_high+0x88>
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
		io->bitmask = 1 << (31 - pin);
     29c:	2f e1       	ldi	r18, 0x1F	; 31
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	28 1b       	sub	r18, r24
     2a2:	31 09       	sbc	r19, r1
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <is_digital_input_high+0x7e>
     2aa:	88 0f       	add	r24, r24
     2ac:	99 1f       	adc	r25, r25
     2ae:	2a 95       	dec	r18
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <is_digital_input_high+0x7a>
     2b2:	98 2f       	mov	r25, r24
     2b4:	e0 e2       	ldi	r30, 0x20	; 32
     2b6:	f0 e0       	ldi	r31, 0x00	; 0

// low-level method for reading the value of the PIN register for an pin or set of pins
// described by an IOStruct pointer.
static inline unsigned char get_digital_input_value(struct IOStruct* ioPin)
{
	return *(ioPin->pinRegister) & ioPin->bitmask;
     2b8:	80 81       	ld	r24, Z
static inline unsigned char is_digital_input_high(unsigned char pin)
{
	struct IOStruct registers;
	get_io_registers(&registers, pin);
	return get_digital_input_value(&registers);
}
     2ba:	89 23       	and	r24, r25
     2bc:	08 95       	ret

000002be <brush1_action>:
			break;
		//*********************************************
	}
}

void brush1_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	f9 01       	movw	r30, r18
     2c4:	d8 01       	movw	r26, r16
	switch(state){
     2c6:	8c 30       	cpi	r24, 0x0C	; 12
     2c8:	91 05       	cpc	r25, r1
     2ca:	09 f4       	brne	.+2      	; 0x2ce <brush1_action+0x10>
     2cc:	3c c0       	rjmp	.+120    	; 0x346 <brush1_action+0x88>
     2ce:	8d 30       	cpi	r24, 0x0D	; 13
     2d0:	91 05       	cpc	r25, r1
     2d2:	94 f4       	brge	.+36     	; 0x2f8 <brush1_action+0x3a>
     2d4:	89 30       	cpi	r24, 0x09	; 9
     2d6:	91 05       	cpc	r25, r1
     2d8:	e1 f0       	breq	.+56     	; 0x312 <brush1_action+0x54>
     2da:	8a 30       	cpi	r24, 0x0A	; 10
     2dc:	91 05       	cpc	r25, r1
     2de:	24 f4       	brge	.+8      	; 0x2e8 <brush1_action+0x2a>
     2e0:	08 97       	sbiw	r24, 0x08	; 8
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <brush1_action+0x28>
     2e4:	68 c0       	rjmp	.+208    	; 0x3b6 <brush1_action+0xf8>
     2e6:	38 c0       	rjmp	.+112    	; 0x358 <brush1_action+0x9a>
     2e8:	8a 30       	cpi	r24, 0x0A	; 10
     2ea:	91 05       	cpc	r25, r1
     2ec:	09 f4       	brne	.+2      	; 0x2f0 <brush1_action+0x32>
     2ee:	4d c0       	rjmp	.+154    	; 0x38a <brush1_action+0xcc>
     2f0:	0b 97       	sbiw	r24, 0x0b	; 11
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <brush1_action+0x38>
     2f4:	60 c0       	rjmp	.+192    	; 0x3b6 <brush1_action+0xf8>
     2f6:	1c c0       	rjmp	.+56     	; 0x330 <brush1_action+0x72>
     2f8:	8e 30       	cpi	r24, 0x0E	; 14
     2fa:	91 05       	cpc	r25, r1
     2fc:	a9 f1       	breq	.+106    	; 0x368 <brush1_action+0xaa>
     2fe:	8e 30       	cpi	r24, 0x0E	; 14
     300:	91 05       	cpc	r25, r1
     302:	54 f1       	brlt	.+84     	; 0x358 <brush1_action+0x9a>
     304:	8f 30       	cpi	r24, 0x0F	; 15
     306:	91 05       	cpc	r25, r1
     308:	c9 f1       	breq	.+114    	; 0x37c <brush1_action+0xbe>
     30a:	40 97       	sbiw	r24, 0x10	; 16
     30c:	09 f0       	breq	.+2      	; 0x310 <brush1_action+0x52>
     30e:	53 c0       	rjmp	.+166    	; 0x3b6 <brush1_action+0xf8>
     310:	47 c0       	rjmp	.+142    	; 0x3a0 <brush1_action+0xe2>
		case MOVEC1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******   
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B1SET1:
			*pfixtureMotor = 0;
     312:	11 82       	std	Z+1, r1	; 0x01
     314:	10 82       	st	Z, r1
			*pbrush1Motor = 1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	8d 93       	st	X+, r24
     31c:	9c 93       	st	X, r25
			//u_outputByte1.bits_in_outputByte1.brush1Pump = 0;	//Pump control
			u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     31e:	80 91 7f 04 	lds	r24, 0x047F
     322:	81 60       	ori	r24, 0x01	; 1
     324:	80 93 7f 04 	sts	0x047F, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;  // ******* dir3 *******
     328:	80 91 83 04 	lds	r24, 0x0483
     32c:	80 68       	ori	r24, 0x80	; 128
     32e:	41 c0       	rjmp	.+130    	; 0x3b2 <brush1_action+0xf4>
			//u_outputByte1.bits_in_outputByte1.brush1Pump = 1;	//Pump control
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
			break;
		case CLEAN1_1:
			*pbrush1Motor = 1;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	8d 93       	st	X+, r24
     336:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     338:	91 83       	std	Z+1, r25	; 0x01
     33a:	80 83       	st	Z, r24
     33c:	80 91 83 04 	lds	r24, 0x0483
     340:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     342:	8f 7e       	andi	r24, 0xEF	; 239
     344:	36 c0       	rjmp	.+108    	; 0x3b2 <brush1_action+0xf4>
			break;
		case B1STOP1:
			*pfixtureMotor = 0;
     346:	11 82       	std	Z+1, r1	; 0x01
     348:	10 82       	st	Z, r1
			*pbrush1Motor = 0;
     34a:	1d 92       	st	X+, r1
     34c:	1c 92       	st	X, r1
			u_outputByte0.bits_in_outputByte0.brush1Lower = 0;   //add brush1 wet here?
     34e:	80 91 82 04 	lds	r24, 0x0482
     352:	8f 7b       	andi	r24, 0xBF	; 191
			u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     354:	80 62       	ori	r24, 0x20	; 32
     356:	21 c0       	rjmp	.+66     	; 0x39a <brush1_action+0xdc>
			break;
		case CLEAN1_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     358:	80 91 83 04 	lds	r24, 0x0483
     35c:	80 61       	ori	r24, 0x10	; 16
     35e:	80 93 83 04 	sts	0x0483, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	20 c0       	rjmp	.+64     	; 0x3a8 <brush1_action+0xea>
			break;
		case B1SET2:
			*pfixtureMotor = 0;
     368:	11 82       	std	Z+1, r1	; 0x01
     36a:	10 82       	st	Z, r1
			*pbrush1Motor = 1;
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	8d 93       	st	X+, r24
     372:	9c 93       	st	X, r25
			//u_outputByte1.bits_in_outputByte1.brush1Pump = 0;	//Pump control
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
     374:	80 91 83 04 	lds	r24, 0x0483
     378:	8f 77       	andi	r24, 0x7F	; 127
     37a:	1b c0       	rjmp	.+54     	; 0x3b2 <brush1_action+0xf4>
			break;
		case B1START2:
			*pfixtureMotor = 0;
     37c:	11 82       	std	Z+1, r1	; 0x01
     37e:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
     380:	80 91 83 04 	lds	r24, 0x0483
     384:	8f 77       	andi	r24, 0x7F	; 127
     386:	80 93 83 04 	sts	0x0483, r24
			//u_outputByte1.bits_in_outputByte1.brush1Pump = 1;	//Pump control
			*pbrush1Motor = 1;
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	8d 93       	st	X+, r24
     390:	9c 93       	st	X, r25
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;  //add brush1 wet here?
     392:	80 91 82 04 	lds	r24, 0x0482
     396:	80 64       	ori	r24, 0x40	; 64
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     398:	8f 7d       	andi	r24, 0xDF	; 223
     39a:	80 93 82 04 	sts	0x0482, r24
     39e:	0b c0       	rjmp	.+22     	; 0x3b6 <brush1_action+0xf8>
			break;
		case CLEAN1_3:
			*pbrush1Motor = 1;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	8d 93       	st	X+, r24
     3a6:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     3a8:	91 83       	std	Z+1, r25	; 0x01
     3aa:	80 83       	st	Z, r24
     3ac:	80 91 83 04 	lds	r24, 0x0483
     3b0:	80 62       	ori	r24, 0x20	; 32
     3b2:	80 93 83 04 	sts	0x0483, r24
			break;
	}
}
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	08 95       	ret

000003bc <brush2_action>:

void brush2_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     3bc:	ef 92       	push	r14
     3be:	ff 92       	push	r15
     3c0:	f9 01       	movw	r30, r18
     3c2:	d7 01       	movw	r26, r14
	switch(state){
     3c4:	87 31       	cpi	r24, 0x17	; 23
     3c6:	91 05       	cpc	r25, r1
     3c8:	09 f4       	brne	.+2      	; 0x3cc <brush2_action+0x10>
     3ca:	47 c0       	rjmp	.+142    	; 0x45a <brush2_action+0x9e>
     3cc:	88 31       	cpi	r24, 0x18	; 24
     3ce:	91 05       	cpc	r25, r1
     3d0:	bc f4       	brge	.+46     	; 0x400 <brush2_action+0x44>
     3d2:	84 31       	cpi	r24, 0x14	; 20
     3d4:	91 05       	cpc	r25, r1
     3d6:	09 f4       	brne	.+2      	; 0x3da <brush2_action+0x1e>
     3d8:	56 c0       	rjmp	.+172    	; 0x486 <brush2_action+0xca>
     3da:	85 31       	cpi	r24, 0x15	; 21
     3dc:	91 05       	cpc	r25, r1
     3de:	44 f4       	brge	.+16     	; 0x3f0 <brush2_action+0x34>
     3e0:	82 31       	cpi	r24, 0x12	; 18
     3e2:	91 05       	cpc	r25, r1
     3e4:	09 f4       	brne	.+2      	; 0x3e8 <brush2_action+0x2c>
     3e6:	77 c0       	rjmp	.+238    	; 0x4d6 <brush2_action+0x11a>
     3e8:	43 97       	sbiw	r24, 0x13	; 19
     3ea:	09 f0       	breq	.+2      	; 0x3ee <brush2_action+0x32>
     3ec:	82 c0       	rjmp	.+260    	; 0x4f2 <brush2_action+0x136>
     3ee:	1e c0       	rjmp	.+60     	; 0x42c <brush2_action+0x70>
     3f0:	85 31       	cpi	r24, 0x15	; 21
     3f2:	91 05       	cpc	r25, r1
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <brush2_action+0x3c>
     3f6:	56 c0       	rjmp	.+172    	; 0x4a4 <brush2_action+0xe8>
     3f8:	46 97       	sbiw	r24, 0x16	; 22
     3fa:	09 f0       	breq	.+2      	; 0x3fe <brush2_action+0x42>
     3fc:	7a c0       	rjmp	.+244    	; 0x4f2 <brush2_action+0x136>
     3fe:	20 c0       	rjmp	.+64     	; 0x440 <brush2_action+0x84>
     400:	8a 31       	cpi	r24, 0x1A	; 26
     402:	91 05       	cpc	r25, r1
     404:	09 f4       	brne	.+2      	; 0x408 <brush2_action+0x4c>
     406:	4e c0       	rjmp	.+156    	; 0x4a4 <brush2_action+0xe8>
     408:	8b 31       	cpi	r24, 0x1B	; 27
     40a:	91 05       	cpc	r25, r1
     40c:	3c f4       	brge	.+14     	; 0x41c <brush2_action+0x60>
     40e:	88 31       	cpi	r24, 0x18	; 24
     410:	91 05       	cpc	r25, r1
     412:	39 f1       	breq	.+78     	; 0x462 <brush2_action+0xa6>
     414:	49 97       	sbiw	r24, 0x19	; 25
     416:	09 f0       	breq	.+2      	; 0x41a <brush2_action+0x5e>
     418:	6c c0       	rjmp	.+216    	; 0x4f2 <brush2_action+0x136>
     41a:	2e c0       	rjmp	.+92     	; 0x478 <brush2_action+0xbc>
     41c:	8b 31       	cpi	r24, 0x1B	; 27
     41e:	91 05       	cpc	r25, r1
     420:	09 f4       	brne	.+2      	; 0x424 <brush2_action+0x68>
     422:	45 c0       	rjmp	.+138    	; 0x4ae <brush2_action+0xf2>
     424:	4c 97       	sbiw	r24, 0x1c	; 28
     426:	09 f0       	breq	.+2      	; 0x42a <brush2_action+0x6e>
     428:	64 c0       	rjmp	.+200    	; 0x4f2 <brush2_action+0x136>
     42a:	55 c0       	rjmp	.+170    	; 0x4d6 <brush2_action+0x11a>
		case MOVEC2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 ******* change dir here?? and further??
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2SET1:
			*pfixtureMotor = 0;
     42c:	11 82       	std	Z+1, r1	; 0x01
     42e:	10 82       	st	Z, r1
			*pbrush2Motor = 1;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	8d 93       	st	X+, r24
     436:	9c 93       	st	X, r25
			//u_outputByte1.bits_in_outputByte1.brush2Pump = 0;	//Pump control
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     438:	80 91 7f 04 	lds	r24, 0x047F
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;  // ******* dir4 ******* 
     43c:	8c 60       	ori	r24, 0x0C	; 12
     43e:	48 c0       	rjmp	.+144    	; 0x4d0 <brush2_action+0x114>
		case CLEAN2_1:
			*pbrush2Motor = 1;
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP1:
			*pfixtureMotor = 0;
     440:	11 82       	std	Z+1, r1	; 0x01
     442:	10 82       	st	Z, r1
			*pbrush2Motor = 0;
     444:	1d 92       	st	X+, r1
     446:	1c 92       	st	X, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;  //add brush2 wet here??
     448:	80 91 80 04 	lds	r24, 0x0480
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	80 93 80 04 	sts	0x0480, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     452:	80 91 82 04 	lds	r24, 0x0482
     456:	80 68       	ori	r24, 0x80	; 128
     458:	22 c0       	rjmp	.+68     	; 0x49e <brush2_action+0xe2>
			break;
		case CLEAN2_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     45a:	80 91 83 04 	lds	r24, 0x0483
     45e:	80 61       	ori	r24, 0x10	; 16
     460:	3d c0       	rjmp	.+122    	; 0x4dc <brush2_action+0x120>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2SET2:
			*pfixtureMotor = 0;
     462:	11 82       	std	Z+1, r1	; 0x01
     464:	10 82       	st	Z, r1
			*pbrush2Motor = 1;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	8d 93       	st	X+, r24
     46c:	9c 93       	st	X, r25
			//u_outputByte1.bits_in_outputByte1.brush2Pump = 0;	//Pump control
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     46e:	80 91 7f 04 	lds	r24, 0x047F
     472:	88 60       	ori	r24, 0x08	; 8
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     474:	8b 7f       	andi	r24, 0xFB	; 251
     476:	2c c0       	rjmp	.+88     	; 0x4d0 <brush2_action+0x114>
			break;
		case B2START2:
			*pfixtureMotor = 0;
     478:	11 82       	std	Z+1, r1	; 0x01
     47a:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     47c:	80 91 7f 04 	lds	r24, 0x047F
     480:	8b 7f       	andi	r24, 0xFB	; 251
     482:	80 93 7f 04 	sts	0x047F, r24
			//u_outputByte1.bits_in_outputByte1.brush2Pump = 1;	//Pump control
			*pbrush2Motor = 1;
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	8d 93       	st	X+, r24
     48c:	9c 93       	st	X, r25
			u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     48e:	80 91 80 04 	lds	r24, 0x0480
     492:	81 60       	ori	r24, 0x01	; 1
     494:	80 93 80 04 	sts	0x0480, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     498:	80 91 82 04 	lds	r24, 0x0482
     49c:	8f 77       	andi	r24, 0x7F	; 127
     49e:	80 93 82 04 	sts	0x0482, r24
     4a2:	27 c0       	rjmp	.+78     	; 0x4f2 <brush2_action+0x136>
			break;
		case CLEAN2_3:
			*pbrush2Motor = 1;
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	8d 93       	st	X+, r24
     4aa:	9c 93       	st	X, r25
     4ac:	1b c0       	rjmp	.+54     	; 0x4e4 <brush2_action+0x128>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP2:
			*pbrush2Motor = 0;
     4ae:	1d 92       	st	X+, r1
     4b0:	1c 92       	st	X, r1
			*pfixtureMotor = 0;
     4b2:	11 82       	std	Z+1, r1	; 0x01
     4b4:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     4b6:	80 91 80 04 	lds	r24, 0x0480
     4ba:	8e 7f       	andi	r24, 0xFE	; 254
     4bc:	80 93 80 04 	sts	0x0480, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     4c0:	80 91 82 04 	lds	r24, 0x0482
     4c4:	80 68       	ori	r24, 0x80	; 128
     4c6:	80 93 82 04 	sts	0x0482, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     4ca:	80 91 7f 04 	lds	r24, 0x047F
     4ce:	87 7f       	andi	r24, 0xF7	; 247
     4d0:	80 93 7f 04 	sts	0x047F, r24
     4d4:	0e c0       	rjmp	.+28     	; 0x4f2 <brush2_action+0x136>
			break;
		//*************************************************
		case MOVED1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     4d6:	80 91 83 04 	lds	r24, 0x0483
     4da:	8f 7e       	andi	r24, 0xEF	; 239
     4dc:	80 93 83 04 	sts	0x0483, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	91 83       	std	Z+1, r25	; 0x01
     4e6:	80 83       	st	Z, r24
     4e8:	80 91 83 04 	lds	r24, 0x0483
     4ec:	80 62       	ori	r24, 0x20	; 32
     4ee:	80 93 83 04 	sts	0x0483, r24
			break;
	}
}
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	08 95       	ret

000004f8 <dry_action>:

void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	ea 01       	movw	r28, r20
     502:	f9 01       	movw	r30, r18
     504:	d6 01       	movw	r26, r12
	switch(state){
     506:	81 32       	cpi	r24, 0x21	; 33
     508:	91 05       	cpc	r25, r1
     50a:	09 f4       	brne	.+2      	; 0x50e <dry_action+0x16>
     50c:	5f c0       	rjmp	.+190    	; 0x5cc <dry_action+0xd4>
     50e:	82 32       	cpi	r24, 0x22	; 34
     510:	91 05       	cpc	r25, r1
     512:	8c f4       	brge	.+34     	; 0x536 <dry_action+0x3e>
     514:	8e 31       	cpi	r24, 0x1E	; 30
     516:	91 05       	cpc	r25, r1
     518:	79 f1       	breq	.+94     	; 0x578 <dry_action+0x80>
     51a:	8f 31       	cpi	r24, 0x1F	; 31
     51c:	91 05       	cpc	r25, r1
     51e:	24 f4       	brge	.+8      	; 0x528 <dry_action+0x30>
     520:	4d 97       	sbiw	r24, 0x1d	; 29
     522:	09 f0       	breq	.+2      	; 0x526 <dry_action+0x2e>
     524:	98 c0       	rjmp	.+304    	; 0x656 <dry_action+0x15e>
     526:	1e c0       	rjmp	.+60     	; 0x564 <dry_action+0x6c>
     528:	8f 31       	cpi	r24, 0x1F	; 31
     52a:	91 05       	cpc	r25, r1
     52c:	71 f1       	breq	.+92     	; 0x58a <dry_action+0x92>
     52e:	80 97       	sbiw	r24, 0x20	; 32
     530:	09 f0       	breq	.+2      	; 0x534 <dry_action+0x3c>
     532:	91 c0       	rjmp	.+290    	; 0x656 <dry_action+0x15e>
     534:	41 c0       	rjmp	.+130    	; 0x5b8 <dry_action+0xc0>
     536:	84 32       	cpi	r24, 0x24	; 36
     538:	91 05       	cpc	r25, r1
     53a:	09 f4       	brne	.+2      	; 0x53e <dry_action+0x46>
     53c:	65 c0       	rjmp	.+202    	; 0x608 <dry_action+0x110>
     53e:	85 32       	cpi	r24, 0x25	; 37
     540:	91 05       	cpc	r25, r1
     542:	44 f4       	brge	.+16     	; 0x554 <dry_action+0x5c>
     544:	82 32       	cpi	r24, 0x22	; 34
     546:	91 05       	cpc	r25, r1
     548:	09 f4       	brne	.+2      	; 0x54c <dry_action+0x54>
     54a:	63 c0       	rjmp	.+198    	; 0x612 <dry_action+0x11a>
     54c:	83 97       	sbiw	r24, 0x23	; 35
     54e:	09 f0       	breq	.+2      	; 0x552 <dry_action+0x5a>
     550:	82 c0       	rjmp	.+260    	; 0x656 <dry_action+0x15e>
     552:	53 c0       	rjmp	.+166    	; 0x5fa <dry_action+0x102>
     554:	85 32       	cpi	r24, 0x25	; 37
     556:	91 05       	cpc	r25, r1
     558:	09 f4       	brne	.+2      	; 0x55c <dry_action+0x64>
     55a:	65 c0       	rjmp	.+202    	; 0x626 <dry_action+0x12e>
     55c:	86 97       	sbiw	r24, 0x26	; 38
     55e:	09 f0       	breq	.+2      	; 0x562 <dry_action+0x6a>
     560:	7a c0       	rjmp	.+244    	; 0x656 <dry_action+0x15e>
     562:	70 c0       	rjmp	.+224    	; 0x644 <dry_action+0x14c>
		case MOVED1EXTRA:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     564:	80 91 83 04 	lds	r24, 0x0483
     568:	80 61       	ori	r24, 0x10	; 16
     56a:	80 93 83 04 	sts	0x0483, r24
			*pfixtureMotor = 1;
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	91 83       	std	Z+1, r25	; 0x01
     574:	80 83       	st	Z, r24
     576:	6f c0       	rjmp	.+222    	; 0x656 <dry_action+0x15e>
			break;
		case DRY1:
		u_outputByte1.bits_in_outputByte1.airKnife = 0;
     578:	80 91 80 04 	lds	r24, 0x0480
     57c:	87 7f       	andi	r24, 0xF7	; 247
     57e:	80 93 80 04 	sts	0x0480, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     582:	80 91 83 04 	lds	r24, 0x0483
     586:	80 61       	ori	r24, 0x10	; 16
     588:	42 c0       	rjmp	.+132    	; 0x60e <dry_action+0x116>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case D1STOP:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     58a:	21 e0       	ldi	r18, 0x01	; 1
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	31 83       	std	Z+1, r19	; 0x01
     590:	20 83       	st	Z, r18
     592:	80 91 83 04 	lds	r24, 0x0483
     596:	80 62       	ori	r24, 0x20	; 32
     598:	80 93 83 04 	sts	0x0483, r24
			u_outputByte1.bits_in_outputByte1.airKnife = 1;
     59c:	80 91 80 04 	lds	r24, 0x0480
     5a0:	88 60       	ori	r24, 0x08	; 8
     5a2:	80 93 80 04 	sts	0x0480, r24
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
     5a6:	80 91 7f 04 	lds	r24, 0x047F
     5aa:	80 64       	ori	r24, 0x40	; 64
			u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     5ac:	8f 7d       	andi	r24, 0xDF	; 223
     5ae:	80 93 7f 04 	sts	0x047F, r24
			*ppaperTowelMotor = 1;
     5b2:	2d 93       	st	X+, r18
     5b4:	3c 93       	st	X, r19
     5b6:	4f c0       	rjmp	.+158    	; 0x656 <dry_action+0x15e>
			break;
		case DRY2:
			u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     5b8:	80 91 80 04 	lds	r24, 0x0480
     5bc:	8d 7f       	andi	r24, 0xFD	; 253
     5be:	80 93 80 04 	sts	0x0480, r24
			*ppaperTowelMotor = 1;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	8d 93       	st	X+, r24
     5c8:	9c 93       	st	X, r25
     5ca:	25 c0       	rjmp	.+74     	; 0x616 <dry_action+0x11e>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case D2STOP:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	91 83       	std	Z+1, r25	; 0x01
     5d2:	80 83       	st	Z, r24
     5d4:	80 91 83 04 	lds	r24, 0x0483
     5d8:	80 62       	ori	r24, 0x20	; 32
     5da:	80 93 83 04 	sts	0x0483, r24
			*ppaperTowelMotor = 0;
     5de:	1d 92       	st	X+, r1
     5e0:	1c 92       	st	X, r1
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
     5e2:	80 91 7f 04 	lds	r24, 0x047F
     5e6:	8f 7b       	andi	r24, 0xBF	; 191
     5e8:	80 93 7f 04 	sts	0x047F, r24
			u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     5ec:	80 91 80 04 	lds	r24, 0x0480
     5f0:	82 60       	ori	r24, 0x02	; 2
			u_outputByte1.bits_in_outputByte1.ptLower = 0;
     5f2:	8b 7f       	andi	r24, 0xFB	; 251
     5f4:	80 93 80 04 	sts	0x0480, r24
     5f8:	2e c0       	rjmp	.+92     	; 0x656 <dry_action+0x15e>
		case FIXL2EXTRA:
			*pfixtureMotor = 1;
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case RAISEL2:
			*pfixtureMotor = 0;
     5fa:	11 82       	std	Z+1, r1	; 0x01
     5fc:	10 82       	st	Z, r1
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     5fe:	80 91 82 04 	lds	r24, 0x0482
     602:	87 7f       	andi	r24, 0xF7	; 247
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     604:	80 61       	ori	r24, 0x10	; 16
     606:	1b c0       	rjmp	.+54     	; 0x63e <dry_action+0x146>
			break;
		case FIXH:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     608:	80 91 83 04 	lds	r24, 0x0483
     60c:	8f 7e       	andi	r24, 0xEF	; 239
     60e:	80 93 83 04 	sts	0x0483, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	91 83       	std	Z+1, r25	; 0x01
     618:	80 83       	st	Z, r24
     61a:	80 91 83 04 	lds	r24, 0x0483
     61e:	80 62       	ori	r24, 0x20	; 32
     620:	80 93 83 04 	sts	0x0483, r24
     624:	18 c0       	rjmp	.+48     	; 0x656 <dry_action+0x15e>
			break;
		case LOWERL3:
			*pfixtureMotor = 0;
     626:	11 82       	std	Z+1, r1	; 0x01
     628:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     62a:	80 91 83 04 	lds	r24, 0x0483
     62e:	8f 7d       	andi	r24, 0xDF	; 223
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     630:	84 60       	ori	r24, 0x04	; 4
     632:	80 93 83 04 	sts	0x0483, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     636:	80 91 82 04 	lds	r24, 0x0482
     63a:	88 60       	ori	r24, 0x08	; 8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     63c:	8f 7e       	andi	r24, 0xEF	; 239
     63e:	80 93 82 04 	sts	0x0482, r24
     642:	09 c0       	rjmp	.+18     	; 0x656 <dry_action+0x15e>
			break;
		case UNLOAD:
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     644:	80 91 83 04 	lds	r24, 0x0483
     648:	8d 7f       	andi	r24, 0xFD	; 253
     64a:	80 93 83 04 	sts	0x0483, r24
			*pplateLoadMotor = 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	99 83       	std	Y+1, r25	; 0x01
     654:	88 83       	st	Y, r24
			break;
	}
}
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	df 90       	pop	r13
     65c:	cf 90       	pop	r12
     65e:	08 95       	ret

00000660 <button_debounce>:

bool button_debounce(int counter, int *pstateButton)
{
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	8c 01       	movw	r16, r24
     66a:	eb 01       	movw	r28, r22
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && is_digital_input_high(IO_D0)){
     66c:	88 81       	ld	r24, Y
     66e:	99 81       	ldd	r25, Y+1	; 0x01
     670:	89 2b       	or	r24, r25
     672:	69 f4       	brne	.+26     	; 0x68e <button_debounce+0x2e>
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     67a:	88 23       	and	r24, r24
     67c:	41 f0       	breq	.+16     	; 0x68e <button_debounce+0x2e>
		counterRefPush = counter;
     67e:	10 93 49 04 	sts	0x0449, r17
     682:	00 93 48 04 	sts	0x0448, r16
		*pstateButton = PRESSED;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	99 83       	std	Y+1, r25	; 0x01
     68c:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     68e:	88 81       	ld	r24, Y
     690:	99 81       	ldd	r25, Y+1	; 0x01
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	f9 f4       	brne	.+62     	; 0x6d4 <button_debounce+0x74>
		if(counter - counterRefPush > 15){
     696:	80 91 48 04 	lds	r24, 0x0448
     69a:	90 91 49 04 	lds	r25, 0x0449
     69e:	98 01       	movw	r18, r16
     6a0:	28 1b       	sub	r18, r24
     6a2:	39 0b       	sbc	r19, r25
     6a4:	20 31       	cpi	r18, 0x10	; 16
     6a6:	31 05       	cpc	r19, r1
     6a8:	74 f0       	brlt	.+28     	; 0x6c6 <button_debounce+0x66>
			if(!is_digital_input_high(IO_D0)){
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     6b0:	88 23       	and	r24, r24
     6b2:	81 f4       	brne	.+32     	; 0x6d4 <button_debounce+0x74>
				counterRefRel = counter;
     6b4:	10 93 47 04 	sts	0x0447, r17
     6b8:	00 93 46 04 	sts	0x0446, r16
				*pstateButton = RELEASED;
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	99 83       	std	Y+1, r25	; 0x01
     6c2:	88 83       	st	Y, r24
     6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <button_debounce+0x74>
			}
		}
		else if(!is_digital_input_high(IO_D0)){
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     6cc:	88 23       	and	r24, r24
     6ce:	11 f4       	brne	.+4      	; 0x6d4 <button_debounce+0x74>
			*pstateButton = NONE;
     6d0:	19 82       	std	Y+1, r1	; 0x01
     6d2:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     6d4:	88 81       	ld	r24, Y
     6d6:	99 81       	ldd	r25, Y+1	; 0x01
     6d8:	02 97       	sbiw	r24, 0x02	; 2
     6da:	d9 f4       	brne	.+54     	; 0x712 <button_debounce+0xb2>
		if(is_digital_input_high(IO_D0)){
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
     6e2:	88 23       	and	r24, r24
     6e4:	49 f0       	breq	.+18     	; 0x6f8 <button_debounce+0x98>
			*pstateButton = PRESSED;
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	99 83       	std	Y+1, r25	; 0x01
     6ec:	88 83       	st	Y, r24
			counterRefPush = counter;
     6ee:	10 93 49 04 	sts	0x0449, r17
     6f2:	00 93 48 04 	sts	0x0448, r16
     6f6:	0d c0       	rjmp	.+26     	; 0x712 <button_debounce+0xb2>
		}
		else if(counter - counterRefRel > 15){
     6f8:	80 91 46 04 	lds	r24, 0x0446
     6fc:	90 91 47 04 	lds	r25, 0x0447
     700:	08 1b       	sub	r16, r24
     702:	19 0b       	sbc	r17, r25
     704:	00 31       	cpi	r16, 0x10	; 16
     706:	11 05       	cpc	r17, r1
     708:	24 f0       	brlt	.+8      	; 0x712 <button_debounce+0xb2>
			*pstateButton = NONE;
     70a:	19 82       	std	Y+1, r1	; 0x01
     70c:	18 82       	st	Y, r1
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	01 c0       	rjmp	.+2      	; 0x714 <button_debounce+0xb4>
			return true;
     712:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	08 95       	ret

0000071e <init_trans>:

bool init_trans(int state, bool buttonTriggered, int counter, int counterRef){
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	fc 01       	movw	r30, r24
     724:	86 2f       	mov	r24, r22
     726:	da 01       	movw	r26, r20
     728:	b9 01       	movw	r22, r18
	return((state == INIT && buttonTriggered)||
     72a:	30 97       	sbiw	r30, 0x00	; 0
     72c:	19 f4       	brne	.+6      	; 0x734 <init_trans+0x16>
     72e:	88 23       	and	r24, r24
     730:	81 f1       	breq	.+96     	; 0x792 <init_trans+0x74>
     732:	77 c0       	rjmp	.+238    	; 0x822 <init_trans+0x104>
     734:	e1 30       	cpi	r30, 0x01	; 1
     736:	f1 05       	cpc	r31, r1
     738:	29 f4       	brne	.+10     	; 0x744 <init_trans+0x26>
     73a:	80 91 7e 04 	lds	r24, 0x047E
     73e:	80 fd       	sbrc	r24, 0
     740:	30 c0       	rjmp	.+96     	; 0x7a2 <init_trans+0x84>
     742:	6f c0       	rjmp	.+222    	; 0x822 <init_trans+0x104>
     744:	e2 30       	cpi	r30, 0x02	; 2
     746:	f1 05       	cpc	r31, r1
     748:	b1 f4       	brne	.+44     	; 0x776 <init_trans+0x58>
     74a:	42 1b       	sub	r20, r18
     74c:	53 0b       	sbc	r21, r19
     74e:	20 91 00 04 	lds	r18, 0x0400
     752:	30 91 01 04 	lds	r19, 0x0401
     756:	80 91 f0 03 	lds	r24, 0x03F0
     75a:	90 91 f1 03 	lds	r25, 0x03F1
     75e:	ec 01       	movw	r28, r24
     760:	2c 9f       	mul	r18, r28
     762:	c0 01       	movw	r24, r0
     764:	2d 9f       	mul	r18, r29
     766:	90 0d       	add	r25, r0
     768:	3c 9f       	mul	r19, r28
     76a:	90 0d       	add	r25, r0
     76c:	11 24       	eor	r1, r1
     76e:	84 17       	cp	r24, r20
     770:	95 07       	cpc	r25, r21
     772:	ac f5       	brge	.+106    	; 0x7de <init_trans+0xc0>
     774:	56 c0       	rjmp	.+172    	; 0x822 <init_trans+0x104>
     776:	e3 30       	cpi	r30, 0x03	; 3
     778:	f1 05       	cpc	r31, r1
     77a:	59 f4       	brne	.+22     	; 0x792 <init_trans+0x74>
     77c:	9a 01       	movw	r18, r20
     77e:	26 1b       	sub	r18, r22
     780:	37 0b       	sbc	r19, r23
     782:	80 91 e0 03 	lds	r24, 0x03E0
     786:	90 91 e1 03 	lds	r25, 0x03E1
     78a:	82 17       	cp	r24, r18
     78c:	93 07       	cpc	r25, r19
     78e:	ac f5       	brge	.+106    	; 0x7fa <init_trans+0xdc>
     790:	48 c0       	rjmp	.+144    	; 0x822 <init_trans+0x104>
     792:	e4 30       	cpi	r30, 0x04	; 4
     794:	f1 05       	cpc	r31, r1
     796:	29 f4       	brne	.+10     	; 0x7a2 <init_trans+0x84>
     798:	80 91 7e 04 	lds	r24, 0x047E
     79c:	86 95       	lsr	r24
     79e:	86 95       	lsr	r24
     7a0:	26 c0       	rjmp	.+76     	; 0x7ee <init_trans+0xd0>
     7a2:	e5 30       	cpi	r30, 0x05	; 5
     7a4:	f1 05       	cpc	r31, r1
     7a6:	d9 f4       	brne	.+54     	; 0x7de <init_trans+0xc0>
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	a6 1b       	sub	r26, r22
     7ae:	b7 0b       	sbc	r27, r23
     7b0:	80 91 02 04 	lds	r24, 0x0402
     7b4:	90 91 03 04 	lds	r25, 0x0403
     7b8:	20 91 f2 03 	lds	r18, 0x03F2
     7bc:	30 91 f3 03 	lds	r19, 0x03F3
     7c0:	bc 01       	movw	r22, r24
     7c2:	62 9f       	mul	r22, r18
     7c4:	c0 01       	movw	r24, r0
     7c6:	63 9f       	mul	r22, r19
     7c8:	90 0d       	add	r25, r0
     7ca:	72 9f       	mul	r23, r18
     7cc:	90 0d       	add	r25, r0
     7ce:	11 24       	eor	r1, r1
     7d0:	8a 17       	cp	r24, r26
     7d2:	9b 07       	cpc	r25, r27
     7d4:	14 f4       	brge	.+4      	; 0x7da <init_trans+0xbc>
     7d6:	41 e0       	ldi	r20, 0x01	; 1
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	ca 01       	movw	r24, r20
     7dc:	24 c0       	rjmp	.+72     	; 0x826 <init_trans+0x108>
     7de:	e6 30       	cpi	r30, 0x06	; 6
     7e0:	f1 05       	cpc	r31, r1
     7e2:	59 f4       	brne	.+22     	; 0x7fa <init_trans+0xdc>
     7e4:	80 91 7e 04 	lds	r24, 0x047E
     7e8:	86 95       	lsr	r24
     7ea:	86 95       	lsr	r24
     7ec:	86 95       	lsr	r24
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	89 27       	eor	r24, r25
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	81 70       	andi	r24, 0x01	; 1
     7f6:	90 70       	andi	r25, 0x00	; 0
     7f8:	16 c0       	rjmp	.+44     	; 0x826 <init_trans+0x108>
     7fa:	37 97       	sbiw	r30, 0x07	; 7
     7fc:	19 f0       	breq	.+6      	; 0x804 <init_trans+0xe6>
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	11 c0       	rjmp	.+34     	; 0x826 <init_trans+0x108>
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	a6 1b       	sub	r26, r22
     80a:	b7 0b       	sbc	r27, r23
     80c:	80 91 e0 03 	lds	r24, 0x03E0
     810:	90 91 e1 03 	lds	r25, 0x03E1
     814:	8a 17       	cp	r24, r26
     816:	9b 07       	cpc	r25, r27
     818:	14 f4       	brge	.+4      	; 0x81e <init_trans+0x100>
     81a:	21 e0       	ldi	r18, 0x01	; 1
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	c9 01       	movw	r24, r18
     820:	02 c0       	rjmp	.+4      	; 0x826 <init_trans+0x108>
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
	(state == RAISEL1 && counter - counterRef > pWait)||
	(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == FIXLEXTRA && counter - counterRef > totalStepLength2*fixtureLiftExtra)||
	(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0)||
	(state == LOWERL2 && counter - counterRef > pWait));
}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <firstB_trans>:

bool firstB_trans(int state, int counter, int counterRef){
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	fc 01       	movw	r30, r24
     832:	da 01       	movw	r26, r20
	//Had references to counterRef14...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVEC1 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush1Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0)||
     834:	88 30       	cpi	r24, 0x08	; 8
     836:	91 05       	cpc	r25, r1
     838:	29 f4       	brne	.+10     	; 0x844 <firstB_trans+0x18>
     83a:	80 91 7e 04 	lds	r24, 0x047E
     83e:	84 fd       	sbrc	r24, 4
     840:	37 c0       	rjmp	.+110    	; 0x8b0 <firstB_trans+0x84>
     842:	8f c0       	rjmp	.+286    	; 0x962 <firstB_trans+0x136>
     844:	89 30       	cpi	r24, 0x09	; 9
     846:	91 05       	cpc	r25, r1
     848:	59 f4       	brne	.+22     	; 0x860 <firstB_trans+0x34>
     84a:	9b 01       	movw	r18, r22
     84c:	24 1b       	sub	r18, r20
     84e:	35 0b       	sbc	r19, r21
     850:	80 91 e2 03 	lds	r24, 0x03E2
     854:	90 91 e3 03 	lds	r25, 0x03E3
     858:	82 17       	cp	r24, r18
     85a:	93 07       	cpc	r25, r19
     85c:	bc f5       	brge	.+110    	; 0x8cc <firstB_trans+0xa0>
     85e:	81 c0       	rjmp	.+258    	; 0x962 <firstB_trans+0x136>
     860:	8a 30       	cpi	r24, 0x0A	; 10
     862:	91 05       	cpc	r25, r1
     864:	59 f4       	brne	.+22     	; 0x87c <firstB_trans+0x50>
     866:	9b 01       	movw	r18, r22
     868:	24 1b       	sub	r18, r20
     86a:	35 0b       	sbc	r19, r21
     86c:	80 91 e0 03 	lds	r24, 0x03E0
     870:	90 91 e1 03 	lds	r25, 0x03E1
     874:	82 17       	cp	r24, r18
     876:	93 07       	cpc	r25, r19
     878:	b4 f5       	brge	.+108    	; 0x8e6 <firstB_trans+0xba>
     87a:	73 c0       	rjmp	.+230    	; 0x962 <firstB_trans+0x136>
     87c:	8b 30       	cpi	r24, 0x0B	; 11
     87e:	91 05       	cpc	r25, r1
     880:	b9 f4       	brne	.+46     	; 0x8b0 <firstB_trans+0x84>
     882:	ab 01       	movw	r20, r22
     884:	4a 1b       	sub	r20, r26
     886:	5b 0b       	sbc	r21, r27
     888:	20 91 fa 03 	lds	r18, 0x03FA
     88c:	30 91 fb 03 	lds	r19, 0x03FB
     890:	80 91 f2 03 	lds	r24, 0x03F2
     894:	90 91 f3 03 	lds	r25, 0x03F3
     898:	ec 01       	movw	r28, r24
     89a:	2c 9f       	mul	r18, r28
     89c:	c0 01       	movw	r24, r0
     89e:	2d 9f       	mul	r18, r29
     8a0:	90 0d       	add	r25, r0
     8a2:	3c 9f       	mul	r19, r28
     8a4:	90 0d       	add	r25, r0
     8a6:	11 24       	eor	r1, r1
     8a8:	84 17       	cp	r24, r20
     8aa:	95 07       	cpc	r25, r21
     8ac:	44 f5       	brge	.+80     	; 0x8fe <firstB_trans+0xd2>
     8ae:	59 c0       	rjmp	.+178    	; 0x962 <firstB_trans+0x136>
     8b0:	ec 30       	cpi	r30, 0x0C	; 12
     8b2:	f1 05       	cpc	r31, r1
     8b4:	59 f4       	brne	.+22     	; 0x8cc <firstB_trans+0xa0>
     8b6:	9b 01       	movw	r18, r22
     8b8:	2a 1b       	sub	r18, r26
     8ba:	3b 0b       	sbc	r19, r27
     8bc:	80 91 e0 03 	lds	r24, 0x03E0
     8c0:	90 91 e1 03 	lds	r25, 0x03E1
     8c4:	82 17       	cp	r24, r18
     8c6:	93 07       	cpc	r25, r19
     8c8:	64 f5       	brge	.+88     	; 0x922 <firstB_trans+0xf6>
     8ca:	4b c0       	rjmp	.+150    	; 0x962 <firstB_trans+0x136>
     8cc:	ed 30       	cpi	r30, 0x0D	; 13
     8ce:	f1 05       	cpc	r31, r1
     8d0:	51 f4       	brne	.+20     	; 0x8e6 <firstB_trans+0xba>
     8d2:	80 91 7e 04 	lds	r24, 0x047E
     8d6:	82 95       	swap	r24
     8d8:	8f 70       	andi	r24, 0x0F	; 15
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	89 27       	eor	r24, r25
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	81 70       	andi	r24, 0x01	; 1
     8e2:	90 70       	andi	r25, 0x00	; 0
     8e4:	40 c0       	rjmp	.+128    	; 0x966 <firstB_trans+0x13a>
     8e6:	ee 30       	cpi	r30, 0x0E	; 14
     8e8:	f1 05       	cpc	r31, r1
     8ea:	49 f4       	brne	.+18     	; 0x8fe <firstB_trans+0xd2>
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	6a 1b       	sub	r22, r26
     8f2:	7b 0b       	sbc	r23, r27
     8f4:	80 91 e2 03 	lds	r24, 0x03E2
     8f8:	90 91 e3 03 	lds	r25, 0x03E3
     8fc:	0b c0       	rjmp	.+22     	; 0x914 <firstB_trans+0xe8>
     8fe:	ef 30       	cpi	r30, 0x0F	; 15
     900:	f1 05       	cpc	r31, r1
     902:	79 f4       	brne	.+30     	; 0x922 <firstB_trans+0xf6>
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	6a 1b       	sub	r22, r26
     90a:	7b 0b       	sbc	r23, r27
     90c:	80 91 e0 03 	lds	r24, 0x03E0
     910:	90 91 e1 03 	lds	r25, 0x03E1
     914:	86 17       	cp	r24, r22
     916:	97 07       	cpc	r25, r23
     918:	14 f4       	brge	.+4      	; 0x91e <firstB_trans+0xf2>
     91a:	21 e0       	ldi	r18, 0x01	; 1
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	c9 01       	movw	r24, r18
     920:	22 c0       	rjmp	.+68     	; 0x966 <firstB_trans+0x13a>
     922:	70 97       	sbiw	r30, 0x10	; 16
     924:	19 f0       	breq	.+6      	; 0x92c <firstB_trans+0x100>
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	1d c0       	rjmp	.+58     	; 0x966 <firstB_trans+0x13a>
     92c:	40 e0       	ldi	r20, 0x00	; 0
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	6a 1b       	sub	r22, r26
     932:	7b 0b       	sbc	r23, r27
     934:	80 91 fa 03 	lds	r24, 0x03FA
     938:	90 91 fb 03 	lds	r25, 0x03FB
     93c:	20 91 f2 03 	lds	r18, 0x03F2
     940:	30 91 f3 03 	lds	r19, 0x03F3
     944:	fc 01       	movw	r30, r24
     946:	e2 9f       	mul	r30, r18
     948:	c0 01       	movw	r24, r0
     94a:	e3 9f       	mul	r30, r19
     94c:	90 0d       	add	r25, r0
     94e:	f2 9f       	mul	r31, r18
     950:	90 0d       	add	r25, r0
     952:	11 24       	eor	r1, r1
     954:	86 17       	cp	r24, r22
     956:	97 07       	cpc	r25, r23
     958:	14 f4       	brge	.+4      	; 0x95e <firstB_trans+0x132>
     95a:	41 e0       	ldi	r20, 0x01	; 1
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	ca 01       	movw	r24, r20
     960:	02 c0       	rjmp	.+4      	; 0x966 <firstB_trans+0x13a>
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	90 e0       	ldi	r25, 0x00	; 0
	(state == B1STOP1 && counter - counterRef > pWait)||
	(state == CLEAN1_2 && /*counter - counterRef > totalStepLength2*fixtureMotorHalfPlate &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0)||
	(state == B1SET2 && counter - counterRef > mWait)||
	(state == B1START2 && counter - counterRef > pWait)||
	(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate));
}
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <secondB_trans>:

bool secondB_trans(int state, int counter, int counterRef){
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	fc 01       	movw	r30, r24
     972:	da 01       	movw	r26, r20
	return((state == MOVEC2 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush2Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0)||
     974:	82 31       	cpi	r24, 0x12	; 18
     976:	91 05       	cpc	r25, r1
     978:	29 f4       	brne	.+10     	; 0x984 <secondB_trans+0x18>
     97a:	80 91 7e 04 	lds	r24, 0x047E
     97e:	85 fd       	sbrc	r24, 5
     980:	37 c0       	rjmp	.+110    	; 0x9f0 <secondB_trans+0x84>
     982:	9d c0       	rjmp	.+314    	; 0xabe <secondB_trans+0x152>
     984:	83 31       	cpi	r24, 0x13	; 19
     986:	91 05       	cpc	r25, r1
     988:	59 f4       	brne	.+22     	; 0x9a0 <secondB_trans+0x34>
     98a:	9b 01       	movw	r18, r22
     98c:	24 1b       	sub	r18, r20
     98e:	35 0b       	sbc	r19, r21
     990:	80 91 e2 03 	lds	r24, 0x03E2
     994:	90 91 e3 03 	lds	r25, 0x03E3
     998:	82 17       	cp	r24, r18
     99a:	93 07       	cpc	r25, r19
     99c:	bc f5       	brge	.+110    	; 0xa0c <secondB_trans+0xa0>
     99e:	8f c0       	rjmp	.+286    	; 0xabe <secondB_trans+0x152>
     9a0:	84 31       	cpi	r24, 0x14	; 20
     9a2:	91 05       	cpc	r25, r1
     9a4:	59 f4       	brne	.+22     	; 0x9bc <secondB_trans+0x50>
     9a6:	9b 01       	movw	r18, r22
     9a8:	24 1b       	sub	r18, r20
     9aa:	35 0b       	sbc	r19, r21
     9ac:	80 91 e0 03 	lds	r24, 0x03E0
     9b0:	90 91 e1 03 	lds	r25, 0x03E1
     9b4:	82 17       	cp	r24, r18
     9b6:	93 07       	cpc	r25, r19
     9b8:	8c f5       	brge	.+98     	; 0xa1c <secondB_trans+0xb0>
     9ba:	81 c0       	rjmp	.+258    	; 0xabe <secondB_trans+0x152>
     9bc:	85 31       	cpi	r24, 0x15	; 21
     9be:	91 05       	cpc	r25, r1
     9c0:	b9 f4       	brne	.+46     	; 0x9f0 <secondB_trans+0x84>
     9c2:	ab 01       	movw	r20, r22
     9c4:	4a 1b       	sub	r20, r26
     9c6:	5b 0b       	sbc	r21, r27
     9c8:	20 91 fa 03 	lds	r18, 0x03FA
     9cc:	30 91 fb 03 	lds	r19, 0x03FB
     9d0:	80 91 f2 03 	lds	r24, 0x03F2
     9d4:	90 91 f3 03 	lds	r25, 0x03F3
     9d8:	ec 01       	movw	r28, r24
     9da:	2c 9f       	mul	r18, r28
     9dc:	c0 01       	movw	r24, r0
     9de:	2d 9f       	mul	r18, r29
     9e0:	90 0d       	add	r25, r0
     9e2:	3c 9f       	mul	r19, r28
     9e4:	90 0d       	add	r25, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	84 17       	cp	r24, r20
     9ea:	95 07       	cpc	r25, r21
     9ec:	24 f5       	brge	.+72     	; 0xa36 <secondB_trans+0xca>
     9ee:	67 c0       	rjmp	.+206    	; 0xabe <secondB_trans+0x152>
     9f0:	e6 31       	cpi	r30, 0x16	; 22
     9f2:	f1 05       	cpc	r31, r1
     9f4:	59 f4       	brne	.+22     	; 0xa0c <secondB_trans+0xa0>
     9f6:	9b 01       	movw	r18, r22
     9f8:	2a 1b       	sub	r18, r26
     9fa:	3b 0b       	sbc	r19, r27
     9fc:	80 91 e0 03 	lds	r24, 0x03E0
     a00:	90 91 e1 03 	lds	r25, 0x03E1
     a04:	82 17       	cp	r24, r18
     a06:	93 07       	cpc	r25, r19
     a08:	cc f4       	brge	.+50     	; 0xa3c <secondB_trans+0xd0>
     a0a:	59 c0       	rjmp	.+178    	; 0xabe <secondB_trans+0x152>
     a0c:	e7 31       	cpi	r30, 0x17	; 23
     a0e:	f1 05       	cpc	r31, r1
     a10:	29 f4       	brne	.+10     	; 0xa1c <secondB_trans+0xb0>
     a12:	80 91 7e 04 	lds	r24, 0x047E
     a16:	85 fd       	sbrc	r24, 5
     a18:	2f c0       	rjmp	.+94     	; 0xa78 <secondB_trans+0x10c>
     a1a:	51 c0       	rjmp	.+162    	; 0xabe <secondB_trans+0x152>
     a1c:	e8 31       	cpi	r30, 0x18	; 24
     a1e:	f1 05       	cpc	r31, r1
     a20:	51 f4       	brne	.+20     	; 0xa36 <secondB_trans+0xca>
     a22:	6a 1b       	sub	r22, r26
     a24:	7b 0b       	sbc	r23, r27
     a26:	80 91 e2 03 	lds	r24, 0x03E2
     a2a:	90 91 e3 03 	lds	r25, 0x03E3
     a2e:	86 17       	cp	r24, r22
     a30:	97 07       	cpc	r25, r23
     a32:	a4 f5       	brge	.+104    	; 0xa9c <secondB_trans+0x130>
     a34:	44 c0       	rjmp	.+136    	; 0xabe <secondB_trans+0x152>
     a36:	e9 31       	cpi	r30, 0x19	; 25
     a38:	f1 05       	cpc	r31, r1
     a3a:	09 f1       	breq	.+66     	; 0xa7e <secondB_trans+0x112>
     a3c:	ea 31       	cpi	r30, 0x1A	; 26
     a3e:	f1 05       	cpc	r31, r1
     a40:	d9 f4       	brne	.+54     	; 0xa78 <secondB_trans+0x10c>
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	6a 1b       	sub	r22, r26
     a48:	7b 0b       	sbc	r23, r27
     a4a:	80 91 fa 03 	lds	r24, 0x03FA
     a4e:	90 91 fb 03 	lds	r25, 0x03FB
     a52:	20 91 f2 03 	lds	r18, 0x03F2
     a56:	30 91 f3 03 	lds	r19, 0x03F3
     a5a:	fc 01       	movw	r30, r24
     a5c:	e2 9f       	mul	r30, r18
     a5e:	c0 01       	movw	r24, r0
     a60:	e3 9f       	mul	r30, r19
     a62:	90 0d       	add	r25, r0
     a64:	f2 9f       	mul	r31, r18
     a66:	90 0d       	add	r25, r0
     a68:	11 24       	eor	r1, r1
     a6a:	86 17       	cp	r24, r22
     a6c:	97 07       	cpc	r25, r23
     a6e:	14 f4       	brge	.+4      	; 0xa74 <secondB_trans+0x108>
     a70:	41 e0       	ldi	r20, 0x01	; 1
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	ca 01       	movw	r24, r20
     a76:	25 c0       	rjmp	.+74     	; 0xac2 <secondB_trans+0x156>
     a78:	eb 31       	cpi	r30, 0x1B	; 27
     a7a:	f1 05       	cpc	r31, r1
     a7c:	79 f4       	brne	.+30     	; 0xa9c <secondB_trans+0x130>
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	6a 1b       	sub	r22, r26
     a84:	7b 0b       	sbc	r23, r27
     a86:	80 91 e0 03 	lds	r24, 0x03E0
     a8a:	90 91 e1 03 	lds	r25, 0x03E1
     a8e:	86 17       	cp	r24, r22
     a90:	97 07       	cpc	r25, r23
     a92:	14 f4       	brge	.+4      	; 0xa98 <secondB_trans+0x12c>
     a94:	21 e0       	ldi	r18, 0x01	; 1
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	c9 01       	movw	r24, r18
     a9a:	13 c0       	rjmp	.+38     	; 0xac2 <secondB_trans+0x156>
     a9c:	7c 97       	sbiw	r30, 0x1c	; 28
     a9e:	19 f0       	breq	.+6      	; 0xaa6 <secondB_trans+0x13a>
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e c0       	rjmp	.+28     	; 0xac2 <secondB_trans+0x156>
     aa6:	80 91 7e 04 	lds	r24, 0x047E
     aaa:	82 95       	swap	r24
     aac:	86 95       	lsr	r24
     aae:	86 95       	lsr	r24
     ab0:	83 70       	andi	r24, 0x03	; 3
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	89 27       	eor	r24, r25
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	81 70       	andi	r24, 0x01	; 1
     aba:	90 70       	andi	r25, 0x00	; 0
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <secondB_trans+0x156>
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	90 e0       	ldi	r25, 0x00	; 0
	(state == B2SET2 && counter - counterRef > mWait)||
	(state == B2START2 && counter - counterRef > pWait)||
	(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||
	(state == B2STOP2 && counter - counterRef > pWait)||
	(state == MOVED1 && /*counter - counterRef > totalStepLength2*fixtureMotorDry1Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0));
}
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <dry_trans>:

bool dry_trans(int state, int counter, int counterRef, int counterRefFive){
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	fc 01       	movw	r30, r24
     ace:	da 01       	movw	r26, r20
	//Had references to counterRef26, 30...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVED1EXTRA && counter - counterRef > fixtureMotorDry1Extra)||
     ad0:	8d 31       	cpi	r24, 0x1D	; 29
     ad2:	91 05       	cpc	r25, r1
     ad4:	61 f4       	brne	.+24     	; 0xaee <dry_trans+0x26>
     ad6:	9b 01       	movw	r18, r22
     ad8:	24 1b       	sub	r18, r20
     ada:	35 0b       	sbc	r19, r21
     adc:	80 91 0c 04 	lds	r24, 0x040C
     ae0:	90 91 0d 04 	lds	r25, 0x040D
     ae4:	82 17       	cp	r24, r18
     ae6:	93 07       	cpc	r25, r19
     ae8:	0c f0       	brlt	.+2      	; 0xaec <dry_trans+0x24>
     aea:	4f c0       	rjmp	.+158    	; 0xb8a <dry_trans+0xc2>
     aec:	b6 c0       	rjmp	.+364    	; 0xc5a <dry_trans+0x192>
     aee:	8e 31       	cpi	r24, 0x1E	; 30
     af0:	91 05       	cpc	r25, r1
     af2:	b9 f4       	brne	.+46     	; 0xb22 <dry_trans+0x5a>
     af4:	ab 01       	movw	r20, r22
     af6:	4a 1b       	sub	r20, r26
     af8:	5b 0b       	sbc	r21, r27
     afa:	20 91 fc 03 	lds	r18, 0x03FC
     afe:	30 91 fd 03 	lds	r19, 0x03FD
     b02:	80 91 f2 03 	lds	r24, 0x03F2
     b06:	90 91 f3 03 	lds	r25, 0x03F3
     b0a:	ec 01       	movw	r28, r24
     b0c:	2c 9f       	mul	r18, r28
     b0e:	c0 01       	movw	r24, r0
     b10:	2d 9f       	mul	r18, r29
     b12:	90 0d       	add	r25, r0
     b14:	3c 9f       	mul	r19, r28
     b16:	90 0d       	add	r25, r0
     b18:	11 24       	eor	r1, r1
     b1a:	84 17       	cp	r24, r20
     b1c:	95 07       	cpc	r25, r21
     b1e:	ec f5       	brge	.+122    	; 0xb9a <dry_trans+0xd2>
     b20:	9c c0       	rjmp	.+312    	; 0xc5a <dry_trans+0x192>
     b22:	8f 31       	cpi	r24, 0x1F	; 31
     b24:	91 05       	cpc	r25, r1
     b26:	b9 f4       	brne	.+46     	; 0xb56 <dry_trans+0x8e>
     b28:	ab 01       	movw	r20, r22
     b2a:	4a 1b       	sub	r20, r26
     b2c:	5b 0b       	sbc	r21, r27
     b2e:	20 91 0e 04 	lds	r18, 0x040E
     b32:	30 91 0f 04 	lds	r19, 0x040F
     b36:	80 91 f2 03 	lds	r24, 0x03F2
     b3a:	90 91 f3 03 	lds	r25, 0x03F3
     b3e:	ec 01       	movw	r28, r24
     b40:	2c 9f       	mul	r18, r28
     b42:	c0 01       	movw	r24, r0
     b44:	2d 9f       	mul	r18, r29
     b46:	90 0d       	add	r25, r0
     b48:	3c 9f       	mul	r19, r28
     b4a:	90 0d       	add	r25, r0
     b4c:	11 24       	eor	r1, r1
     b4e:	84 17       	cp	r24, r20
     b50:	95 07       	cpc	r25, r21
     b52:	ec f5       	brge	.+122    	; 0xbce <dry_trans+0x106>
     b54:	82 c0       	rjmp	.+260    	; 0xc5a <dry_trans+0x192>
     b56:	80 32       	cpi	r24, 0x20	; 32
     b58:	91 05       	cpc	r25, r1
     b5a:	b9 f4       	brne	.+46     	; 0xb8a <dry_trans+0xc2>
     b5c:	ab 01       	movw	r20, r22
     b5e:	4a 1b       	sub	r20, r26
     b60:	5b 0b       	sbc	r21, r27
     b62:	20 91 fc 03 	lds	r18, 0x03FC
     b66:	30 91 fd 03 	lds	r19, 0x03FD
     b6a:	80 91 f2 03 	lds	r24, 0x03F2
     b6e:	90 91 f3 03 	lds	r25, 0x03F3
     b72:	ec 01       	movw	r28, r24
     b74:	2c 9f       	mul	r18, r28
     b76:	c0 01       	movw	r24, r0
     b78:	2d 9f       	mul	r18, r29
     b7a:	90 0d       	add	r25, r0
     b7c:	3c 9f       	mul	r19, r28
     b7e:	90 0d       	add	r25, r0
     b80:	11 24       	eor	r1, r1
     b82:	84 17       	cp	r24, r20
     b84:	95 07       	cpc	r25, r21
     b86:	5c f5       	brge	.+86     	; 0xbde <dry_trans+0x116>
     b88:	68 c0       	rjmp	.+208    	; 0xc5a <dry_trans+0x192>
     b8a:	e1 32       	cpi	r30, 0x21	; 33
     b8c:	f1 05       	cpc	r31, r1
     b8e:	29 f4       	brne	.+10     	; 0xb9a <dry_trans+0xd2>
     b90:	80 91 7e 04 	lds	r24, 0x047E
     b94:	83 fd       	sbrc	r24, 3
     b96:	2f c0       	rjmp	.+94     	; 0xbf6 <dry_trans+0x12e>
     b98:	60 c0       	rjmp	.+192    	; 0xc5a <dry_trans+0x192>
     b9a:	e2 32       	cpi	r30, 0x22	; 34
     b9c:	f1 05       	cpc	r31, r1
     b9e:	b9 f4       	brne	.+46     	; 0xbce <dry_trans+0x106>
     ba0:	ab 01       	movw	r20, r22
     ba2:	4a 1b       	sub	r20, r26
     ba4:	5b 0b       	sbc	r21, r27
     ba6:	20 91 16 04 	lds	r18, 0x0416
     baa:	30 91 17 04 	lds	r19, 0x0417
     bae:	80 91 f2 03 	lds	r24, 0x03F2
     bb2:	90 91 f3 03 	lds	r25, 0x03F3
     bb6:	ec 01       	movw	r28, r24
     bb8:	2c 9f       	mul	r18, r28
     bba:	c0 01       	movw	r24, r0
     bbc:	2d 9f       	mul	r18, r29
     bbe:	90 0d       	add	r25, r0
     bc0:	3c 9f       	mul	r19, r28
     bc2:	90 0d       	add	r25, r0
     bc4:	11 24       	eor	r1, r1
     bc6:	84 17       	cp	r24, r20
     bc8:	95 07       	cpc	r25, r21
     bca:	3c f5       	brge	.+78     	; 0xc1a <dry_trans+0x152>
     bcc:	46 c0       	rjmp	.+140    	; 0xc5a <dry_trans+0x192>
     bce:	e3 32       	cpi	r30, 0x23	; 35
     bd0:	f1 05       	cpc	r31, r1
     bd2:	29 f4       	brne	.+10     	; 0xbde <dry_trans+0x116>
     bd4:	80 91 7e 04 	lds	r24, 0x047E
     bd8:	86 95       	lsr	r24
     bda:	86 95       	lsr	r24
     bdc:	06 c0       	rjmp	.+12     	; 0xbea <dry_trans+0x122>
     bde:	e4 32       	cpi	r30, 0x24	; 36
     be0:	f1 05       	cpc	r31, r1
     be2:	49 f4       	brne	.+18     	; 0xbf6 <dry_trans+0x12e>
     be4:	80 91 7e 04 	lds	r24, 0x047E
     be8:	86 95       	lsr	r24
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	89 27       	eor	r24, r25
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	81 70       	andi	r24, 0x01	; 1
     bf2:	90 70       	andi	r25, 0x00	; 0
     bf4:	34 c0       	rjmp	.+104    	; 0xc5e <dry_trans+0x196>
     bf6:	e5 32       	cpi	r30, 0x25	; 37
     bf8:	f1 05       	cpc	r31, r1
     bfa:	79 f4       	brne	.+30     	; 0xc1a <dry_trans+0x152>
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	6a 1b       	sub	r22, r26
     c02:	7b 0b       	sbc	r23, r27
     c04:	80 91 e0 03 	lds	r24, 0x03E0
     c08:	90 91 e1 03 	lds	r25, 0x03E1
     c0c:	86 17       	cp	r24, r22
     c0e:	97 07       	cpc	r25, r23
     c10:	14 f4       	brge	.+4      	; 0xc16 <dry_trans+0x14e>
     c12:	21 e0       	ldi	r18, 0x01	; 1
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	c9 01       	movw	r24, r18
     c18:	22 c0       	rjmp	.+68     	; 0xc5e <dry_trans+0x196>
     c1a:	b6 97       	sbiw	r30, 0x26	; 38
     c1c:	19 f0       	breq	.+6      	; 0xc24 <dry_trans+0x15c>
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	1d c0       	rjmp	.+58     	; 0xc5e <dry_trans+0x196>
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	6a 1b       	sub	r22, r26
     c2a:	7b 0b       	sbc	r23, r27
     c2c:	80 91 fe 03 	lds	r24, 0x03FE
     c30:	90 91 ff 03 	lds	r25, 0x03FF
     c34:	20 91 f0 03 	lds	r18, 0x03F0
     c38:	30 91 f1 03 	lds	r19, 0x03F1
     c3c:	fc 01       	movw	r30, r24
     c3e:	e2 9f       	mul	r30, r18
     c40:	c0 01       	movw	r24, r0
     c42:	e3 9f       	mul	r30, r19
     c44:	90 0d       	add	r25, r0
     c46:	f2 9f       	mul	r31, r18
     c48:	90 0d       	add	r25, r0
     c4a:	11 24       	eor	r1, r1
     c4c:	86 17       	cp	r24, r22
     c4e:	97 07       	cpc	r25, r23
     c50:	14 f4       	brge	.+4      	; 0xc56 <dry_trans+0x18e>
     c52:	41 e0       	ldi	r20, 0x01	; 1
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	ca 01       	movw	r24, r20
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <dry_trans+0x196>
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
	(state == FIXL2EXTRA && counter - counterRef > totalStepLength2*fixtureLift2Extra)||
	(state == RAISEL2 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == FIXH && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureHome == 0)||
	(state == LOWERL3 && counter - counterRef > pWait)||
	(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate));
}
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <motor_and_write>:
	serial_print_string(msg);
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor)
{
     c64:	6f 92       	push	r6
     c66:	7f 92       	push	r7
     c68:	8f 92       	push	r8
     c6a:	9f 92       	push	r9
     c6c:	af 92       	push	r10
     c6e:	bf 92       	push	r11
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	4c 01       	movw	r8, r24
     c82:	3a 01       	movw	r6, r20
     c84:	e9 01       	movw	r28, r18
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     c86:	fc 01       	movw	r30, r24
     c88:	e6 1b       	sub	r30, r22
     c8a:	f7 0b       	sbc	r31, r23
     c8c:	60 91 f0 03 	lds	r22, 0x03F0
     c90:	70 91 f1 03 	lds	r23, 0x03F1
     c94:	cf 01       	movw	r24, r30
     c96:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <__divmodhi4>
     c9a:	20 91 e6 03 	lds	r18, 0x03E6
     c9e:	30 91 e7 03 	lds	r19, 0x03E7
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	34 f4       	brge	.+12     	; 0xcb4 <motor_and_write+0x50>
     ca8:	cd 2b       	or	r28, r29
     caa:	21 f0       	breq	.+8      	; 0xcb4 <motor_and_write+0x50>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 1
     cac:	80 91 83 04 	lds	r24, 0x0483
     cb0:	81 60       	ori	r24, 0x01	; 1
     cb2:	03 c0       	rjmp	.+6      	; 0xcba <motor_and_write+0x56>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     cb4:	80 91 83 04 	lds	r24, 0x0483
     cb8:	8e 7f       	andi	r24, 0xFE	; 254
     cba:	80 93 83 04 	sts	0x0483, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     cbe:	60 91 f2 03 	lds	r22, 0x03F2
     cc2:	70 91 f3 03 	lds	r23, 0x03F3
     cc6:	cf 01       	movw	r24, r30
     cc8:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <__divmodhi4>
     ccc:	20 91 e8 03 	lds	r18, 0x03E8
     cd0:	30 91 e9 03 	lds	r19, 0x03E9
     cd4:	82 17       	cp	r24, r18
     cd6:	93 07       	cpc	r25, r19
     cd8:	34 f4       	brge	.+12     	; 0xce6 <motor_and_write+0x82>
     cda:	01 2b       	or	r16, r17
     cdc:	21 f0       	breq	.+8      	; 0xce6 <motor_and_write+0x82>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     cde:	80 91 83 04 	lds	r24, 0x0483
     ce2:	88 60       	ori	r24, 0x08	; 8
     ce4:	03 c0       	rjmp	.+6      	; 0xcec <motor_and_write+0x88>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 0
     ce6:	80 91 83 04 	lds	r24, 0x0483
     cea:	87 7f       	andi	r24, 0xF7	; 247
     cec:	80 93 83 04 	sts	0x0483, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     cf0:	60 91 f4 03 	lds	r22, 0x03F4
     cf4:	70 91 f5 03 	lds	r23, 0x03F5
     cf8:	cf 01       	movw	r24, r30
     cfa:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <__divmodhi4>
     cfe:	20 91 ea 03 	lds	r18, 0x03EA
     d02:	30 91 eb 03 	lds	r19, 0x03EB
     d06:	82 17       	cp	r24, r18
     d08:	93 07       	cpc	r25, r19
     d0a:	34 f4       	brge	.+12     	; 0xd18 <motor_and_write+0xb4>
     d0c:	ef 28       	or	r14, r15
     d0e:	21 f0       	breq	.+8      	; 0xd18 <motor_and_write+0xb4>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     d10:	80 91 83 04 	lds	r24, 0x0483
     d14:	80 64       	ori	r24, 0x40	; 64
     d16:	03 c0       	rjmp	.+6      	; 0xd1e <motor_and_write+0xba>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 0
     d18:	80 91 83 04 	lds	r24, 0x0483
     d1c:	8f 7b       	andi	r24, 0xBF	; 191
     d1e:	80 93 83 04 	sts	0x0483, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     d22:	60 91 f6 03 	lds	r22, 0x03F6
     d26:	70 91 f7 03 	lds	r23, 0x03F7
     d2a:	cf 01       	movw	r24, r30
     d2c:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <__divmodhi4>
     d30:	20 91 ec 03 	lds	r18, 0x03EC
     d34:	30 91 ed 03 	lds	r19, 0x03ED
     d38:	82 17       	cp	r24, r18
     d3a:	93 07       	cpc	r25, r19
     d3c:	34 f4       	brge	.+12     	; 0xd4a <motor_and_write+0xe6>
     d3e:	cd 28       	or	r12, r13
     d40:	21 f0       	breq	.+8      	; 0xd4a <motor_and_write+0xe6>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     d42:	80 91 7f 04 	lds	r24, 0x047F
     d46:	82 60       	ori	r24, 0x02	; 2
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <motor_and_write+0xec>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 0
     d4a:	80 91 7f 04 	lds	r24, 0x047F
     d4e:	8d 7f       	andi	r24, 0xFD	; 253
     d50:	80 93 7f 04 	sts	0x047F, r24
	}

	if( ((counter - counterRefFive) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     d54:	60 91 f8 03 	lds	r22, 0x03F8
     d58:	70 91 f9 03 	lds	r23, 0x03F9
     d5c:	c4 01       	movw	r24, r8
     d5e:	86 19       	sub	r24, r6
     d60:	97 09       	sbc	r25, r7
     d62:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <__divmodhi4>
     d66:	20 91 ee 03 	lds	r18, 0x03EE
     d6a:	30 91 ef 03 	lds	r19, 0x03EF
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	34 f4       	brge	.+12     	; 0xd80 <motor_and_write+0x11c>
     d74:	ab 28       	or	r10, r11
     d76:	21 f0       	breq	.+8      	; 0xd80 <motor_and_write+0x11c>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     d78:	80 91 7f 04 	lds	r24, 0x047F
     d7c:	80 61       	ori	r24, 0x10	; 16
     d7e:	03 c0       	rjmp	.+6      	; 0xd86 <motor_and_write+0x122>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 0
     d80:	80 91 7f 04 	lds	r24, 0x047F
     d84:	8f 7e       	andi	r24, 0xEF	; 239
     d86:	80 93 7f 04 	sts	0x047F, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     d8a:	80 e4       	ldi	r24, 0x40	; 64
     d8c:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
	i2c_write(0x2);									// write command byte
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     d96:	80 91 83 04 	lds	r24, 0x0483
     d9a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     d9e:	80 91 7f 04 	lds	r24, 0x047F
     da2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_stop();                            // set stop condition = release bus
     da6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

	i2c_start(I2C2+I2C_WRITE);                // why the second write?
     daa:	82 e4       	ldi	r24, 0x42	; 66
     dac:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
	i2c_write(0x2);
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_outputByte0.outputByte0);
     db6:	80 91 82 04 	lds	r24, 0x0482
     dba:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_write(u_outputByte1.outputByte1);
     dbe:	80 91 80 04 	lds	r24, 0x0480
     dc2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
	i2c_stop();
     dc6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
}
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	ff 90       	pop	r15
     dd4:	ef 90       	pop	r14
     dd6:	df 90       	pop	r13
     dd8:	cf 90       	pop	r12
     dda:	bf 90       	pop	r11
     ddc:	af 90       	pop	r10
     dde:	9f 90       	pop	r9
     de0:	8f 90       	pop	r8
     de2:	7f 90       	pop	r7
     de4:	6f 90       	pop	r6
     de6:	08 95       	ret

00000de8 <serial_print_string>:
	}
	serial_print_string("END");
	}
}

void serial_print_string(char msg[]){
     de8:	68 2f       	mov	r22, r24
	serial_send_blocking(USB_COMM, msg, strlen(msg));
     dea:	e8 2f       	mov	r30, r24
     dec:	f9 2f       	mov	r31, r25
     dee:	df 01       	movw	r26, r30
     df0:	0d 90       	ld	r0, X+
     df2:	00 20       	and	r0, r0
     df4:	e9 f7       	brne	.-6      	; 0xdf0 <serial_print_string+0x8>
     df6:	11 97       	sbiw	r26, 0x01	; 1
     df8:	ae 1b       	sub	r26, r30
     dfa:	bf 0b       	sbc	r27, r31
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	79 2f       	mov	r23, r25
     e00:	4a 2f       	mov	r20, r26
     e02:	0e 94 9a 1c 	call	0x3934	; 0x3934 <serial_send_blocking>
	serial_send_blocking(USB_COMM, "\r\n", 2);
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	71 e0       	ldi	r23, 0x01	; 1
     e0c:	42 e0       	ldi	r20, 0x02	; 2
     e0e:	0e 94 9a 1c 	call	0x3934	; 0x3934 <serial_send_blocking>
}
     e12:	08 95       	ret

00000e14 <init_action>:
	i2c_write(u_outputByte0.outputByte0);
	i2c_write(u_outputByte1.outputByte1);
	i2c_stop();
}

void init_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor, bool *pprint0){
     e14:	af 92       	push	r10
     e16:	bf 92       	push	r11
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	ea 01       	movw	r28, r20
     e1e:	f9 01       	movw	r30, r18
	switch(state){
     e20:	83 30       	cpi	r24, 0x03	; 3
     e22:	91 05       	cpc	r25, r1
     e24:	09 f4       	brne	.+2      	; 0xe28 <init_action+0x14>
     e26:	69 c0       	rjmp	.+210    	; 0xefa <init_action+0xe6>
     e28:	84 30       	cpi	r24, 0x04	; 4
     e2a:	91 05       	cpc	r25, r1
     e2c:	5c f4       	brge	.+22     	; 0xe44 <init_action+0x30>
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	91 05       	cpc	r25, r1
     e32:	09 f4       	brne	.+2      	; 0xe36 <init_action+0x22>
     e34:	3f c0       	rjmp	.+126    	; 0xeb4 <init_action+0xa0>
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	91 05       	cpc	r25, r1
     e3a:	0c f0       	brlt	.+2      	; 0xe3e <init_action+0x2a>
     e3c:	4e c0       	rjmp	.+156    	; 0xeda <init_action+0xc6>
     e3e:	89 2b       	or	r24, r25
     e40:	89 f0       	breq	.+34     	; 0xe64 <init_action+0x50>
     e42:	89 c0       	rjmp	.+274    	; 0xf56 <init_action+0x142>
     e44:	85 30       	cpi	r24, 0x05	; 5
     e46:	91 05       	cpc	r25, r1
     e48:	09 f4       	brne	.+2      	; 0xe4c <init_action+0x38>
     e4a:	64 c0       	rjmp	.+200    	; 0xf14 <init_action+0x100>
     e4c:	85 30       	cpi	r24, 0x05	; 5
     e4e:	91 05       	cpc	r25, r1
     e50:	0c f4       	brge	.+2      	; 0xe54 <init_action+0x40>
     e52:	60 c0       	rjmp	.+192    	; 0xf14 <init_action+0x100>
     e54:	86 30       	cpi	r24, 0x06	; 6
     e56:	91 05       	cpc	r25, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <init_action+0x48>
     e5a:	66 c0       	rjmp	.+204    	; 0xf28 <init_action+0x114>
     e5c:	07 97       	sbiw	r24, 0x07	; 7
     e5e:	09 f0       	breq	.+2      	; 0xe62 <init_action+0x4e>
     e60:	7a c0       	rjmp	.+244    	; 0xf56 <init_action+0x142>
     e62:	6f c0       	rjmp	.+222    	; 0xf42 <init_action+0x12e>
		case INIT:
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
     e64:	80 91 7e 04 	lds	r24, 0x047E
     e68:	90 91 83 04 	lds	r25, 0x0483
     e6c:	81 ff       	sbrs	r24, 1
     e6e:	07 c0       	rjmp	.+14     	; 0xe7e <init_action+0x6a>
				u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
     e70:	9f 7e       	andi	r25, 0xEF	; 239
     e72:	90 93 83 04 	sts	0x0483, r25
				u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     e76:	80 91 82 04 	lds	r24, 0x0482
     e7a:	87 7f       	andi	r24, 0xF7	; 247
     e7c:	5f c0       	rjmp	.+190    	; 0xf3c <init_action+0x128>
			}
			else{
				u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     e7e:	9f 7d       	andi	r25, 0xDF	; 223
     e80:	90 93 83 04 	sts	0x0483, r25
				*pfixtureMotor = 0;
     e84:	11 82       	std	Z+1, r1	; 0x01
     e86:	10 82       	st	Z, r1
				u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     e88:	80 91 82 04 	lds	r24, 0x0482
     e8c:	8f 7e       	andi	r24, 0xEF	; 239
				u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     e8e:	88 60       	ori	r24, 0x08	; 8
     e90:	80 93 82 04 	sts	0x0482, r24
				if(*pprint0 == 1){
     e94:	f5 01       	movw	r30, r10
     e96:	80 81       	ld	r24, Z
     e98:	88 23       	and	r24, r24
     e9a:	09 f4       	brne	.+2      	; 0xe9e <init_action+0x8a>
     e9c:	5c c0       	rjmp	.+184    	; 0xf56 <init_action+0x142>
					lcd_goto_xy(0,1);
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
					serial_print_string("PUSH TO START");
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
					*pprint0 = 0;
     eae:	f5 01       	movw	r30, r10
     eb0:	10 82       	st	Z, r1
     eb2:	51 c0       	rjmp	.+162    	; 0xf56 <init_action+0x142>
				}
			}
			break;
		case LOAD:
			u_outputByte0.bits_in_outputByte0.ACPower = 0;
     eb4:	20 91 82 04 	lds	r18, 0x0482
     eb8:	32 2f       	mov	r19, r18
     eba:	3e 7f       	andi	r19, 0xFE	; 254
			if((counter % 200) < 100){
     ebc:	cb 01       	movw	r24, r22
     ebe:	68 ec       	ldi	r22, 0xC8	; 200
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <__divmodhi4>
     ec6:	84 36       	cpi	r24, 0x64	; 100
     ec8:	91 05       	cpc	r25, r1
     eca:	24 f4       	brge	.+8      	; 0xed4 <init_action+0xc0>
				u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     ecc:	2c 7f       	andi	r18, 0xFC	; 252
     ece:	20 93 82 04 	sts	0x0482, r18
     ed2:	03 c0       	rjmp	.+6      	; 0xeda <init_action+0xc6>
			}
			else{
				u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     ed4:	32 60       	ori	r19, 0x02	; 2
     ed6:	30 93 82 04 	sts	0x0482, r19
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
			break;
		case LOADEXTRA:
			*pplateLoadMotor = 1;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	99 83       	std	Y+1, r25	; 0x01
     ee0:	88 83       	st	Y, r24
			*pfixtureMotor = 0;
     ee2:	11 82       	std	Z+1, r1	; 0x01
     ee4:	10 82       	st	Z, r1
			
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
     ee6:	80 91 83 04 	lds	r24, 0x0483
     eea:	8d 7f       	andi	r24, 0xFD	; 253
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     eec:	84 60       	ori	r24, 0x04	; 4
     eee:	80 93 83 04 	sts	0x0483, r24
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
     ef2:	80 91 82 04 	lds	r24, 0x0482
     ef6:	8b 7f       	andi	r24, 0xFB	; 251
     ef8:	21 c0       	rjmp	.+66     	; 0xf3c <init_action+0x128>
			break;
		case RAISEL1:
			u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     efa:	80 91 82 04 	lds	r24, 0x0482
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     efe:	81 7e       	andi	r24, 0xE1	; 225
			u_outputByte0.bits_in_outputByte0.plateStop = 1;
     f00:	86 61       	ori	r24, 0x16	; 22
     f02:	80 93 82 04 	sts	0x0482, r24
			*pplateLoadMotor = 0;
     f06:	19 82       	std	Y+1, r1	; 0x01
     f08:	18 82       	st	Y, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     f0a:	80 91 83 04 	lds	r24, 0x0483
     f0e:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
     f10:	8b 7f       	andi	r24, 0xFB	; 251
     f12:	1f c0       	rjmp	.+62     	; 0xf52 <init_action+0x13e>
		case FIXL:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case FIXLEXTRA:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
     f14:	80 91 83 04 	lds	r24, 0x0483
     f18:	80 61       	ori	r24, 0x10	; 16
     f1a:	80 93 83 04 	sts	0x0483, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	80 83       	st	Z, r24
     f26:	12 c0       	rjmp	.+36     	; 0xf4c <init_action+0x138>
			break;
		case LOWERL1:
			*pfixtureMotor = 0;
     f28:	11 82       	std	Z+1, r1	; 0x01
     f2a:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     f2c:	80 91 83 04 	lds	r24, 0x0483
     f30:	8f 7d       	andi	r24, 0xDF	; 223
     f32:	80 93 83 04 	sts	0x0483, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     f36:	80 91 82 04 	lds	r24, 0x0482
     f3a:	88 60       	ori	r24, 0x08	; 8
     f3c:	80 93 82 04 	sts	0x0482, r24
     f40:	0a c0       	rjmp	.+20     	; 0xf56 <init_action+0x142>
			break;
		case LOWERL2:
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     f42:	80 91 82 04 	lds	r24, 0x0482
     f46:	8f 7e       	andi	r24, 0xEF	; 239
     f48:	80 93 82 04 	sts	0x0482, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     f4c:	80 91 83 04 	lds	r24, 0x0483
     f50:	80 62       	ori	r24, 0x20	; 32
     f52:	80 93 83 04 	sts	0x0483, r24
			break;
		//*********************************************
	}
}
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	bf 90       	pop	r11
     f5c:	af 90       	pop	r10
     f5e:	08 95       	ret

00000f60 <serial_print_int>:
void serial_print_string(char msg[]){
	serial_send_blocking(USB_COMM, msg, strlen(msg));
	serial_send_blocking(USB_COMM, "\r\n", 2);
}

void serial_print_int(int a){
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	00 d0       	rcall	.+0      	; 0xf6a <serial_print_int+0xa>
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <serial_print_int+0xc>
     f6c:	0f 92       	push	r0
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
	char msg[5];
	itoa(a, msg, 10);
     f72:	8e 01       	movw	r16, r28
     f74:	0f 5f       	subi	r16, 0xFF	; 255
     f76:	1f 4f       	sbci	r17, 0xFF	; 255
     f78:	b8 01       	movw	r22, r16
     f7a:	4a e0       	ldi	r20, 0x0A	; 10
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	0e 94 30 21 	call	0x4260	; 0x4260 <itoa>
	serial_print_string(msg);
     f82:	c8 01       	movw	r24, r16
     f84:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
}
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	08 95       	ret

00000f9c <main>:
void serial_print_string(char msg[]);

void serial_print_int(int a);

int main()   
{
     f9c:	2f 92       	push	r2
     f9e:	3f 92       	push	r3
     fa0:	4f 92       	push	r4
     fa2:	5f 92       	push	r5
     fa4:	6f 92       	push	r6
     fa6:	7f 92       	push	r7
     fa8:	8f 92       	push	r8
     faa:	9f 92       	push	r9
     fac:	af 92       	push	r10
     fae:	bf 92       	push	r11
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	6a 97       	sbiw	r28, 0x1a	; 26
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
	bool print0 = true;
	bool  print35 = true;
		
	//initialize button variables
	int button = 1;				
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently
     fd0:	2f ef       	ldi	r18, 0xFF	; 255
     fd2:	3f ef       	ldi	r19, 0xFF	; 255
     fd4:	38 8f       	std	Y+24, r19	; 0x18
     fd6:	2f 8b       	std	Y+23, r18	; 0x17
     fd8:	1c 8a       	std	Y+20, r1	; 0x14
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
    
	while(1){						//Repeats the entire program indefinitely (runs maintenance or normal each time)

							//mx holds whether motor x should move: 0 = no, 1 = yes
	plateLoadMotor = 0;		//plate load motor
     fda:	1b 82       	std	Y+3, r1	; 0x03
     fdc:	1a 82       	std	Y+2, r1	; 0x02
	fixtureMotor = 0;		//fixture motor
     fde:	1d 82       	std	Y+5, r1	; 0x05
     fe0:	1c 82       	std	Y+4, r1	; 0x04
	brush1Motor = 0;		//brush 1 motor
     fe2:	1f 82       	std	Y+7, r1	; 0x07
     fe4:	1e 82       	std	Y+6, r1	; 0x06
	brush2Motor = 0;		//brush 2 motor
     fe6:	19 86       	std	Y+9, r1	; 0x09
     fe8:	18 86       	std	Y+8, r1	; 0x08
	paperTowelMotor = 0; 	//paper towel roller motor
     fea:	1b 86       	std	Y+11, r1	; 0x0b
     fec:	1a 86       	std	Y+10, r1	; 0x0a
	//the ones with numbers correspond to run mode states, and Five refers to motor 5 (paper towel roller)
	counterRef = 0;
	counterRefFive = 0;
	
	//hold whether or not statements have been printed yet (numbers refer to run mode states)
	print0 = true;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	89 83       	std	Y+1, r24	; 0x01
	print35 = true;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been de-bounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     ff2:	1d 86       	std	Y+13, r1	; 0x0d
     ff4:	1c 86       	std	Y+12, r1	; 0x0c
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     ff6:	10 92 83 04 	sts	0x0483, r1
	u_motorByte1.motorByte1 = 128;  // initialize motorByte1              **********1 or 128, depending on order**********
     ffa:	80 e8       	ldi	r24, 0x80	; 128
     ffc:	80 93 7f 04 	sts	0x047F, r24
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
    1000:	8f ef       	ldi	r24, 0xFF	; 255
    1002:	80 93 82 04 	sts	0x0482, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
    1006:	80 93 80 04 	sts	0x0480, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
    100a:	10 92 7e 04 	sts	0x047E, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
    100e:	10 92 81 04 	sts	0x0481, r1
	
	//clear();
	serial_print_string("DASCH CLEANER 2c");
    1012:	81 e1       	ldi	r24, 0x11	; 17
    1014:	91 e0       	ldi	r25, 0x01	; 1
    1016:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
	lcd_goto_xy(0,1);
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
	serial_print_string("REV: 40");
    1022:	82 e2       	ldi	r24, 0x22	; 34
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
	delay_ms(2000);
    102a:	80 ed       	ldi	r24, 0xD0	; 208
    102c:	97 e0       	ldi	r25, 0x07	; 7
    102e:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>
	
	//clear();
	serial_print_string("BEGIN ");
    1032:	8a e2       	ldi	r24, 0x2A	; 42
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
	
	delay_ms(1000);
    103a:	88 ee       	ldi	r24, 0xE8	; 232
    103c:	93 e0       	ldi	r25, 0x03	; 3
    103e:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>

    i2c_init();                                // init I2C interface
    1042:	0e 94 93 00 	call	0x126	; 0x126 <i2c_init>
	
    serial_print_string("INIT ");
    1046:	81 e3       	ldi	r24, 0x31	; 49
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
    104e:	80 e4       	ldi	r24, 0x40	; 64
    1050:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    1054:	f8 2e       	mov	r15, r24
	i2c_stop();	
    1056:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
    105a:	82 e4       	ldi	r24, 0x42	; 66
    105c:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    1060:	18 2f       	mov	r17, r24
	i2c_stop();
    1062:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
    1066:	84 e4       	ldi	r24, 0x44	; 68
    1068:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
    106c:	08 2f       	mov	r16, r24
	i2c_stop();
    106e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	
	if (ret1)
    1072:	ff 20       	and	r15, r15
    1074:	19 f0       	breq	.+6      	; 0x107c <main+0xe0>
		serial_print_string("I2C1 DOWN ");
    1076:	87 e3       	ldi	r24, 0x37	; 55
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <main+0xe4>
	else
		serial_print_string("I2C1 UP");
    107c:	82 e4       	ldi	r24, 0x42	; 66
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
	if (ret2)
    1084:	11 23       	and	r17, r17
    1086:	19 f0       	breq	.+6      	; 0x108e <main+0xf2>
		serial_print_string("I2C2 DOWN ");
    1088:	8a e4       	ldi	r24, 0x4A	; 74
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <main+0xf6>
	else
		serial_print_string("I2C2 UP");
    108e:	85 e5       	ldi	r24, 0x55	; 85
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
	if (ret3)
    1096:	00 23       	and	r16, r16
    1098:	19 f0       	breq	.+6      	; 0x10a0 <main+0x104>
		serial_print_string("I2C3 DOWN ");
    109a:	8d e5       	ldi	r24, 0x5D	; 93
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <main+0x108>
	else
		serial_print_string("I2C3 UP");
    10a0:	88 e6       	ldi	r24, 0x68	; 104
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
    
	//clear();
	serial_print_string("START ");
    10a8:	80 e7       	ldi	r24, 0x70	; 112
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
    10b0:	1f 29       	or	r17, r15
    10b2:	10 2b       	or	r17, r16
    10b4:	61 f0       	breq	.+24     	; 0x10ce <main+0x132>
        /* failed to issue start condition(s), possibly no device found */
        
		serial_print_string("I2C BAD ");
    10b6:	87 e7       	ldi	r24, 0x77	; 119
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
		i2c_stop();
    10be:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
		serial_print_string("STOP PROG ");
    10c2:	80 e8       	ldi	r24, 0x80	; 128
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
    10ca:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <main+0x167a>
    }
	else {
		serial_print_string("I2C OK ");
    10ce:	8b e8       	ldi	r24, 0x8B	; 139
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
        /* issuing start conditions ok, devices accessible */
		serial_print_string("BINIT ");
    10d6:	83 e9       	ldi	r24, 0x93	; 147
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
    10de:	80 e4       	ldi	r24, 0x40	; 64
    10e0:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x6);
    10e4:	86 e0       	ldi	r24, 0x06	; 6
    10e6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    10f6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C1+I2C_WRITE);
    10fa:	80 e4       	ldi	r24, 0x40	; 64
    10fc:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    1106:	80 91 83 04 	lds	r24, 0x0483
    110a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    110e:	80 91 7f 04 	lds	r24, 0x047F
    1112:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1116:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
    111a:	82 e4       	ldi	r24, 0x42	; 66
    111c:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x6);
    1120:	86 e0       	ldi	r24, 0x06	; 6
    1122:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(0x0);
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1132:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);
    1136:	82 e4       	ldi	r24, 0x42	; 66
    1138:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_outputByte0.outputByte0);
    1142:	80 91 82 04 	lds	r24, 0x0482
    1146:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_outputByte1.outputByte1);
    114a:	80 91 80 04 	lds	r24, 0x0480
    114e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    1152:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

		//Registers default to input, so I2C3 is fine already

		u_motorByte1.bits_in_motorByte1.enableAll = 0;	//Enables all motor drivers after startup
    1156:	80 91 7f 04 	lds	r24, 0x047F
    115a:	8f 77       	andi	r24, 0x7F	; 127
    115c:	80 93 7f 04 	sts	0x047F, r24
		i2c_start(I2C1+I2C_WRITE);
    1160:	80 e4       	ldi	r24, 0x40	; 64
    1162:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    116c:	80 91 83 04 	lds	r24, 0x0483
    1170:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    1174:	80 91 7f 04 	lds	r24, 0x047F
    1178:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    117c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>


		delay_ms(1000);
    1180:	88 ee       	ldi	r24, 0xE8	; 232
    1182:	93 e0       	ldi	r25, 0x03	; 3
    1184:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
    1188:	8a e9       	ldi	r24, 0x9A	; 154
    118a:	91 e0       	ldi	r25, 0x01	; 1
    118c:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
    1190:	ee 24       	eor	r14, r14
    1192:	ff 24       	eor	r15, r15
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1194:	c7 01       	movw	r24, r14
    1196:	be 01       	movw	r22, r28
    1198:	64 5f       	subi	r22, 0xF4	; 244
    119a:	7f 4f       	sbci	r23, 0xFF	; 255
    119c:	0e 94 30 03 	call	0x660	; 0x660 <button_debounce>
    11a0:	18 2f       	mov	r17, r24
			serial_check(); counter++;
    11a2:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <serial_check>
    11a6:	08 94       	sec
    11a8:	e1 1c       	adc	r14, r1
    11aa:	f1 1c       	adc	r15, r1
			delay_ms(1);
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>
		delay_ms(1000);
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    11b4:	11 23       	and	r17, r17
    11b6:	71 f3       	breq	.-36     	; 0x1194 <main+0x1f8>
		buttonTriggered = false;
		counter = 0;
		//clear();


		if(is_digital_input_high(IO_D3))							//Tests if the switch is set to Maintenance Mode
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    11be:	88 23       	and	r24, r24
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <main+0x228>
    11c2:	4e c4       	rjmp	.+2204   	; 0x1a60 <main+0xac4>
		{
			serial_print_string("DEBUG");
    11c4:	8a ea       	ldi	r24, 0xAA	; 170
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
			delay_ms(1000);
    11cc:	88 ee       	ldi	r24, 0xE8	; 232
    11ce:	93 e0       	ldi	r25, 0x03	; 3
    11d0:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>
			//initialize
			bool printVar = true;
			int submode = -1;

			//clear();
			serial_print_string("INPUT MODE");
    11d4:	80 eb       	ldi	r24, 0xB0	; 176
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
    11dc:	ee 24       	eor	r14, r14
    11de:	ff 24       	eor	r15, r15
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    11e0:	c7 01       	movw	r24, r14
    11e2:	be 01       	movw	r22, r28
    11e4:	64 5f       	subi	r22, 0xF4	; 244
    11e6:	7f 4f       	sbci	r23, 0xFF	; 255
    11e8:	0e 94 30 03 	call	0x660	; 0x660 <button_debounce>
    11ec:	18 2f       	mov	r17, r24
				counter++;
    11ee:	08 94       	sec
    11f0:	e1 1c       	adc	r14, r1
    11f2:	f1 1c       	adc	r15, r1
				delay_ms(1);
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>

			//clear();
			serial_print_string("INPUT MODE");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
    11fc:	11 23       	and	r17, r17
    11fe:	81 f3       	breq	.-32     	; 0x11e0 <main+0x244>
    1200:	44 24       	eor	r4, r4
    1202:	55 24       	eor	r5, r5
    1204:	22 24       	eor	r2, r2
    1206:	33 24       	eor	r3, r3
    1208:	99 24       	eor	r9, r9
    120a:	93 94       	inc	r9
    120c:	6f ef       	ldi	r22, 0xFF	; 255
    120e:	7f ef       	ldi	r23, 0xFF	; 255
    1210:	7b 8b       	std	Y+19, r23	; 0x13
    1212:	6a 8b       	std	Y+18, r22	; 0x12
    1214:	66 24       	eor	r6, r6
    1216:	77 24       	eor	r7, r7
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1218:	84 e4       	ldi	r24, 0x44	; 68
    121a:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1224:	85 e4       	ldi	r24, 0x45	; 69
    1226:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    122a:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    122e:	80 93 7e 04 	sts	0x047E, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1232:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1236:	80 93 81 04 	sts	0x0481, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    123a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    123e:	c2 01       	movw	r24, r4
    1240:	be 01       	movw	r22, r28
    1242:	64 5f       	subi	r22, 0xF4	; 244
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	0e 94 30 03 	call	0x660	; 0x660 <button_debounce>
    124a:	18 2f       	mov	r17, r24
							Output 			--     starts testing each output individually and ends after testing all outputs
							Motor			--     starts testing each motor individually and ends after testing all motors
							Multi motor		--     starts testing each the fixture motor with each of the brush motors

				*/
				if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != INPUT){
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1252:	88 23       	and	r24, r24
    1254:	c9 f4       	brne	.+50     	; 0x1288 <main+0x2ec>
    1256:	82 e0       	ldi	r24, 0x02	; 2
    1258:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    125c:	88 23       	and	r24, r24
    125e:	a1 f4       	brne	.+40     	; 0x1288 <main+0x2ec>
    1260:	8a 89       	ldd	r24, Y+18	; 0x12
    1262:	9b 89       	ldd	r25, Y+19	; 0x13
    1264:	89 2b       	or	r24, r25
    1266:	81 f0       	breq	.+32     	; 0x1288 <main+0x2ec>
					state = S0;
					submode = INPUT;
					//clear();
					serial_print_string("INPUTS ");
    1268:	8b eb       	ldi	r24, 0xBB	; 187
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
					lcd_goto_xy(0,1);
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	61 e0       	ldi	r22, 0x01	; 1
    1274:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	9c 8b       	std	Y+20, r25	; 0x14
    127c:	99 24       	eor	r9, r9
    127e:	93 94       	inc	r9
    1280:	1b 8a       	std	Y+19, r1	; 0x13
    1282:	1a 8a       	std	Y+18, r1	; 0x12
    1284:	66 24       	eor	r6, r6
    1286:	77 24       	eor	r7, r7
					printVar = true;
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != OUTPUT){
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    128e:	88 23       	and	r24, r24
    1290:	e9 f0       	breq	.+58     	; 0x12cc <main+0x330>
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1298:	88 23       	and	r24, r24
    129a:	c1 f4       	brne	.+48     	; 0x12cc <main+0x330>
    129c:	2a 89       	ldd	r18, Y+18	; 0x12
    129e:	3b 89       	ldd	r19, Y+19	; 0x13
    12a0:	21 30       	cpi	r18, 0x01	; 1
    12a2:	31 05       	cpc	r19, r1
    12a4:	99 f0       	breq	.+38     	; 0x12cc <main+0x330>
					state = O0_ON;
					submode = OUTPUT;
					//clear();
					serial_print_string("OUTPUTS");
    12a6:	83 ec       	ldi	r24, 0xC3	; 195
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
					lcd_goto_xy(0,1);
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
    12b6:	31 e0       	ldi	r19, 0x01	; 1
    12b8:	3c 8b       	std	Y+20, r19	; 0x14
    12ba:	99 24       	eor	r9, r9
    12bc:	93 94       	inc	r9
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	7b 8b       	std	Y+19, r23	; 0x13
    12c4:	6a 8b       	std	Y+18, r22	; 0x12
    12c6:	68 e0       	ldi	r22, 0x08	; 8
    12c8:	66 2e       	mov	r6, r22
    12ca:	71 2c       	mov	r7, r1
					printVar = true;
					switched = true;
				}
				if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MOTOR){
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    12d2:	88 23       	and	r24, r24
    12d4:	09 f5       	brne	.+66     	; 0x1318 <main+0x37c>
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    12dc:	88 23       	and	r24, r24
    12de:	e1 f0       	breq	.+56     	; 0x1318 <main+0x37c>
    12e0:	8a 89       	ldd	r24, Y+18	; 0x12
    12e2:	9b 89       	ldd	r25, Y+19	; 0x13
    12e4:	02 97       	sbiw	r24, 0x02	; 2
    12e6:	c1 f0       	breq	.+48     	; 0x1318 <main+0x37c>
					state = M1_F;
					submode = MOTOR;
					//clear();
					serial_print_string("MOTORS ");
    12e8:	8b ec       	ldi	r24, 0xCB	; 203
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
					lcd_goto_xy(0,1);
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    12f8:	80 91 83 04 	lds	r24, 0x0483
    12fc:	84 60       	ori	r24, 0x04	; 4
    12fe:	80 93 83 04 	sts	0x0483, r24
    1302:	91 e0       	ldi	r25, 0x01	; 1
    1304:	9c 8b       	std	Y+20, r25	; 0x14
    1306:	99 24       	eor	r9, r9
    1308:	93 94       	inc	r9
    130a:	22 e0       	ldi	r18, 0x02	; 2
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	3b 8b       	std	Y+19, r19	; 0x13
    1310:	2a 8b       	std	Y+18, r18	; 0x12
    1312:	50 e2       	ldi	r21, 0x20	; 32
    1314:	65 2e       	mov	r6, r21
    1316:	71 2c       	mov	r7, r1
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MULTI){
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    131e:	88 23       	and	r24, r24
    1320:	31 f1       	breq	.+76     	; 0x136e <main+0x3d2>
    1322:	82 e0       	ldi	r24, 0x02	; 2
    1324:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1328:	88 23       	and	r24, r24
    132a:	09 f1       	breq	.+66     	; 0x136e <main+0x3d2>
    132c:	6a 89       	ldd	r22, Y+18	; 0x12
    132e:	7b 89       	ldd	r23, Y+19	; 0x13
    1330:	63 30       	cpi	r22, 0x03	; 3
    1332:	71 05       	cpc	r23, r1
    1334:	e1 f0       	breq	.+56     	; 0x136e <main+0x3d2>
					state = M2_AND_M3;
					submode = MULTI;
					//clear();
					serial_print_string("MULTI MOTOR");
    1336:	83 ed       	ldi	r24, 0xD3	; 211
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
					lcd_goto_xy(0,1);
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	61 e0       	ldi	r22, 0x01	; 1
    1342:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1346:	80 91 83 04 	lds	r24, 0x0483
    134a:	80 62       	ori	r24, 0x20	; 32
    134c:	80 93 83 04 	sts	0x0483, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    1350:	80 91 7f 04 	lds	r24, 0x047F
    1354:	81 60       	ori	r24, 0x01	; 1
    1356:	80 93 7f 04 	sts	0x047F, r24
    135a:	99 24       	eor	r9, r9
    135c:	93 94       	inc	r9
    135e:	83 e0       	ldi	r24, 0x03	; 3
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	9b 8b       	std	Y+19, r25	; 0x13
    1364:	8a 8b       	std	Y+18, r24	; 0x12
    1366:	4a e2       	ldi	r20, 0x2A	; 42
    1368:	64 2e       	mov	r6, r20
    136a:	71 2c       	mov	r7, r1
    136c:	03 c0       	rjmp	.+6      	; 0x1374 <main+0x3d8>
					switched = true;
				}
				if(switched){
    136e:	9c 89       	ldd	r25, Y+20	; 0x14
    1370:	99 23       	and	r25, r25
    1372:	c9 f0       	breq	.+50     	; 0x13a6 <main+0x40a>
					plateLoadMotor = 0;
    1374:	1b 82       	std	Y+3, r1	; 0x03
    1376:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    1378:	1d 82       	std	Y+5, r1	; 0x05
    137a:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    137c:	1f 82       	std	Y+7, r1	; 0x07
    137e:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    1380:	19 86       	std	Y+9, r1	; 0x09
    1382:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    1384:	1b 86       	std	Y+11, r1	; 0x0b
    1386:	1a 86       	std	Y+10, r1	; 0x0a
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
    1388:	8f ef       	ldi	r24, 0xFF	; 255
    138a:	80 93 82 04 	sts	0x0482, r24
					u_outputByte1.outputByte1 = 255;  // reset outputByte1
    138e:	80 93 80 04 	sts	0x0480, r24
					if(submode != MOTOR && submode != MULTI){
    1392:	8a 89       	ldd	r24, Y+18	; 0x12
    1394:	9b 89       	ldd	r25, Y+19	; 0x13
    1396:	02 97       	sbiw	r24, 0x02	; 2
    1398:	02 97       	sbiw	r24, 0x02	; 2
    139a:	20 f0       	brcs	.+8      	; 0x13a4 <main+0x408>
						u_motorByte0.motorByte0 = 0;	  // reset motorByte0
    139c:	10 92 83 04 	sts	0x0483, r1
						u_motorByte1.motorByte1 = 0;	  // reset motorByte1
    13a0:	10 92 7f 04 	sts	0x047F, r1
    13a4:	1c 8a       	std	Y+20, r1	; 0x14
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
    13a6:	11 23       	and	r17, r17
    13a8:	09 f4       	brne	.+2      	; 0x13ac <main+0x410>
    13aa:	c6 c0       	rjmp	.+396    	; 0x1538 <main+0x59c>
					if(state <= S7){				//if it's doing the sensors
    13ac:	28 e0       	ldi	r18, 0x08	; 8
    13ae:	62 16       	cp	r6, r18
    13b0:	71 04       	cpc	r7, r1
    13b2:	9c f4       	brge	.+38     	; 0x13da <main+0x43e>
						lastVal = -1;
						lcd_goto_xy(0,1);
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	61 e0       	ldi	r22, 0x01	; 1
    13b8:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
						buttonTriggered = false;
						state ++;
    13bc:	08 94       	sec
    13be:	61 1c       	adc	r6, r1
    13c0:	71 1c       	adc	r7, r1
						counterRef = counter;
						printVar = true;
						if(state == S7 + 1){		//accounts for end of maintenance mode after sensors
    13c2:	38 e0       	ldi	r19, 0x08	; 8
    13c4:	63 16       	cp	r6, r19
    13c6:	71 04       	cpc	r7, r1
    13c8:	11 f4       	brne	.+4      	; 0x13ce <main+0x432>
    13ca:	0c 94 11 13 	jmp	0x2622	; 0x2622 <main+0x1686>
    13ce:	12 01       	movw	r2, r4
    13d0:	6f ef       	ldi	r22, 0xFF	; 255
    13d2:	7f ef       	ldi	r23, 0xFF	; 255
    13d4:	78 8f       	std	Y+24, r23	; 0x18
    13d6:	6f 8b       	std	Y+23, r22	; 0x17
    13d8:	ad c0       	rjmp	.+346    	; 0x1534 <main+0x598>
							//clear();
							state = DONEM;
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
    13da:	70 e2       	ldi	r23, 0x20	; 32
    13dc:	67 16       	cp	r6, r23
    13de:	71 04       	cpc	r7, r1
    13e0:	cc f4       	brge	.+50     	; 0x1414 <main+0x478>
						if(state % 2 == 0){			//current state is an 'on' state
    13e2:	60 fc       	sbrc	r6, 0
    13e4:	09 c0       	rjmp	.+18     	; 0x13f8 <main+0x45c>
							lcd_goto_xy(13,1);
    13e6:	8d e0       	ldi	r24, 0x0D	; 13
    13e8:	61 e0       	ldi	r22, 0x01	; 1
    13ea:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
							serial_print_string("OFF");
    13ee:	8f ed       	ldi	r24, 0xDF	; 223
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <main+0x464>
						}
						else{						//current state is an 'off' state
							lcd_goto_xy(0,1);
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	61 e0       	ldi	r22, 0x01	; 1
    13fc:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
						}
						buttonTriggered = false;
						state ++;
    1400:	08 94       	sec
    1402:	61 1c       	adc	r6, r1
    1404:	71 1c       	adc	r7, r1
						counterRef = counter;
						printVar = true;
						if(state == O11_OFF + 1){	//accounts for end of maintenance mode after outputs
    1406:	80 e2       	ldi	r24, 0x20	; 32
    1408:	68 16       	cp	r6, r24
    140a:	71 04       	cpc	r7, r1
    140c:	09 f0       	breq	.+2      	; 0x1410 <main+0x474>
    140e:	91 c0       	rjmp	.+290    	; 0x1532 <main+0x596>
    1410:	0c 94 15 13 	jmp	0x262a	; 0x262a <main+0x168e>
    1414:	83 01       	movw	r16, r6
    1416:	0f 5f       	subi	r16, 0xFF	; 255
    1418:	1f 4f       	sbci	r17, 0xFF	; 255
							//clear();
							state = DONEM;
						}
					}
					else if(state <= M5_B){							//if it's doing the motors
    141a:	9a e2       	ldi	r25, 0x2A	; 42
    141c:	69 16       	cp	r6, r25
    141e:	71 04       	cpc	r7, r1
    1420:	0c f0       	brlt	.+2      	; 0x1424 <main+0x488>
    1422:	5e c0       	rjmp	.+188    	; 0x14e0 <main+0x544>
						buttonTriggered = false;
						state ++;
						counterRef = counter;
						printVar = true;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
    1424:	60 fc       	sbrc	r6, 0
    1426:	09 c0       	rjmp	.+18     	; 0x143a <main+0x49e>
							lcd_goto_xy(11,1);
    1428:	8b e0       	ldi	r24, 0x0B	; 11
    142a:	61 e0       	ldi	r22, 0x01	; 1
    142c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
							serial_print_string("BACK ");
    1430:	83 ee       	ldi	r24, 0xE3	; 227
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
    1438:	13 c0       	rjmp	.+38     	; 0x1460 <main+0x4c4>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
    143a:	06 32       	cpi	r16, 0x26	; 38
    143c:	11 05       	cpc	r17, r1
    143e:	79 f1       	breq	.+94     	; 0x149e <main+0x502>
    1440:	07 32       	cpi	r16, 0x27	; 39
    1442:	11 05       	cpc	r17, r1
    1444:	3c f4       	brge	.+14     	; 0x1454 <main+0x4b8>
    1446:	02 32       	cpi	r16, 0x22	; 34
    1448:	11 05       	cpc	r17, r1
    144a:	69 f0       	breq	.+26     	; 0x1466 <main+0x4ca>
    144c:	04 32       	cpi	r16, 0x24	; 36
    144e:	11 05       	cpc	r17, r1
    1450:	39 f4       	brne	.+14     	; 0x1460 <main+0x4c4>
    1452:	15 c0       	rjmp	.+42     	; 0x147e <main+0x4e2>
    1454:	08 32       	cpi	r16, 0x28	; 40
    1456:	11 05       	cpc	r17, r1
    1458:	71 f1       	breq	.+92     	; 0x14b6 <main+0x51a>
    145a:	0a 32       	cpi	r16, 0x2A	; 42
    145c:	11 05       	cpc	r17, r1
    145e:	b9 f1       	breq	.+110    	; 0x14ce <main+0x532>
    1460:	12 01       	movw	r2, r4
    1462:	38 01       	movw	r6, r16
    1464:	67 c0       	rjmp	.+206    	; 0x1534 <main+0x598>
								case M1_B + 1:
									lcd_goto_xy(0,1);
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    146e:	80 91 83 04 	lds	r24, 0x0483
    1472:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1474:	80 62       	ori	r24, 0x20	; 32
    1476:	80 93 83 04 	sts	0x0483, r24
    147a:	12 01       	movw	r2, r4
    147c:	33 c2       	rjmp	.+1126   	; 0x18e4 <main+0x948>
									break;
								case M2_B + 1:
									lcd_goto_xy(0,1);
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	61 e0       	ldi	r22, 0x01	; 1
    1482:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1486:	80 91 83 04 	lds	r24, 0x0483
    148a:	8f 7d       	andi	r24, 0xDF	; 223
    148c:	80 93 83 04 	sts	0x0483, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    1490:	80 91 7f 04 	lds	r24, 0x047F
    1494:	81 60       	ori	r24, 0x01	; 1
    1496:	80 93 7f 04 	sts	0x047F, r24
    149a:	12 01       	movw	r2, r4
    149c:	43 c2       	rjmp	.+1158   	; 0x1924 <main+0x988>
									break;
								case M3_B + 1:
									lcd_goto_xy(0,1);
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	61 e0       	ldi	r22, 0x01	; 1
    14a2:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    14a6:	80 91 7f 04 	lds	r24, 0x047F
    14aa:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    14ac:	88 60       	ori	r24, 0x08	; 8
    14ae:	80 93 7f 04 	sts	0x047F, r24
    14b2:	12 01       	movw	r2, r4
    14b4:	57 c2       	rjmp	.+1198   	; 0x1964 <main+0x9c8>
									break;
								case M4_B + 1:
									lcd_goto_xy(0,1);
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	61 e0       	ldi	r22, 0x01	; 1
    14ba:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    14be:	80 91 7f 04 	lds	r24, 0x047F
    14c2:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    14c4:	80 64       	ori	r24, 0x40	; 64
    14c6:	80 93 7f 04 	sts	0x047F, r24
    14ca:	12 01       	movw	r2, r4
    14cc:	6b c2       	rjmp	.+1238   	; 0x19a4 <main+0xa08>
									break;
								case M5_B + 1:
									//clear();
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    14ce:	80 91 7f 04 	lds	r24, 0x047F
    14d2:	8f 7b       	andi	r24, 0xBF	; 191
    14d4:	80 93 7f 04 	sts	0x047F, r24
									state = DONEM;
									paperTowelMotor = 0;
    14d8:	1b 86       	std	Y+11, r1	; 0x0b
    14da:	1a 86       	std	Y+10, r1	; 0x0a
    14dc:	0c 94 15 13 	jmp	0x262a	; 0x262a <main+0x168e>
							}
						}
					}
					else{
						buttonTriggered = false;
						state ++;
    14e0:	38 01       	movw	r6, r16
						counterRef = counter;
						printVar = true;
						switch(state){
    14e2:	0b 32       	cpi	r16, 0x2B	; 43
    14e4:	11 05       	cpc	r17, r1
    14e6:	21 f0       	breq	.+8      	; 0x14f0 <main+0x554>
    14e8:	0c 32       	cpi	r16, 0x2C	; 44
    14ea:	11 05       	cpc	r17, r1
    14ec:	11 f5       	brne	.+68     	; 0x1532 <main+0x596>
    14ee:	11 c0       	rjmp	.+34     	; 0x1512 <main+0x576>
							case M2_AND_M3 + 1:
								lcd_goto_xy(0,1);
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	61 e0       	ldi	r22, 0x01	; 1
    14f4:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
								u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    14f8:	90 91 7f 04 	lds	r25, 0x047F
    14fc:	9e 7f       	andi	r25, 0xFE	; 254
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    14fe:	80 91 83 04 	lds	r24, 0x0483
    1502:	80 62       	ori	r24, 0x20	; 32
    1504:	80 93 83 04 	sts	0x0483, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    1508:	98 60       	ori	r25, 0x08	; 8
    150a:	90 93 7f 04 	sts	0x047F, r25
    150e:	12 01       	movw	r2, r4
    1510:	76 c2       	rjmp	.+1260   	; 0x19fe <main+0xa62>
								break;
							case M2_AND_M4 + 1:
								//clear();
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1512:	80 91 83 04 	lds	r24, 0x0483
    1516:	8f 7d       	andi	r24, 0xDF	; 223
    1518:	80 93 83 04 	sts	0x0483, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    151c:	80 91 7f 04 	lds	r24, 0x047F
    1520:	87 7f       	andi	r24, 0xF7	; 247
    1522:	80 93 7f 04 	sts	0x047F, r24
								state = DONEM;
								fixtureMotor = 0;
    1526:	1d 82       	std	Y+5, r1	; 0x05
    1528:	1c 82       	std	Y+4, r1	; 0x04
								brush2Motor = 0;
    152a:	19 86       	std	Y+9, r1	; 0x09
    152c:	18 86       	std	Y+8, r1	; 0x08
    152e:	0c 94 15 13 	jmp	0x262a	; 0x262a <main+0x168e>
    1532:	12 01       	movw	r2, r4
    1534:	99 24       	eor	r9, r9
    1536:	93 94       	inc	r9
						}
					}
				}

				//state actions
				switch (state) {
    1538:	f3 01       	movw	r30, r6
    153a:	ec 32       	cpi	r30, 0x2C	; 44
    153c:	f1 05       	cpc	r31, r1
    153e:	08 f0       	brcs	.+2      	; 0x1542 <main+0x5a6>
    1540:	70 c2       	rjmp	.+1248   	; 0x1a22 <main+0xa86>
    1542:	ea 5b       	subi	r30, 0xBA	; 186
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	ee 0f       	add	r30, r30
    1548:	ff 1f       	adc	r31, r31
    154a:	05 90       	lpm	r0, Z+
    154c:	f4 91       	lpm	r31, Z+
    154e:	e0 2d       	mov	r30, r0
    1550:	09 94       	ijmp
					case S0:
						if(printVar){
    1552:	99 20       	and	r9, r9
    1554:	21 f0       	breq	.+8      	; 0x155e <main+0x5c2>
							serial_print_string("SENSOR 1");
    1556:	89 ee       	ldi	r24, 0xE9	; 233
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    155e:	8f e0       	ldi	r24, 0x0F	; 15
    1560:	61 e0       	ldi	r22, 0x01	; 1
    1562:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.plate){
    1566:	80 91 7e 04 	lds	r24, 0x047E
    156a:	81 70       	andi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	6f 89       	ldd	r22, Y+23	; 0x17
    1570:	78 8d       	ldd	r23, Y+24	; 0x18
    1572:	68 17       	cp	r22, r24
    1574:	79 07       	cpc	r23, r25
    1576:	09 f4       	brne	.+2      	; 0x157a <main+0x5de>
    1578:	53 c2       	rjmp	.+1190   	; 0x1a20 <main+0xa84>
							serial_print_int(u_inputByte0.bits_in_inputByte0.plate);
    157a:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.plate;
    157e:	80 91 7e 04 	lds	r24, 0x047E
    1582:	b0 c0       	rjmp	.+352    	; 0x16e4 <main+0x748>
						}							
						break;
					case S1:
						if(printVar){
    1584:	99 20       	and	r9, r9
    1586:	21 f0       	breq	.+8      	; 0x1590 <main+0x5f4>
							serial_print_string("SENSOR 2");
    1588:	82 ef       	ldi	r24, 0xF2	; 242
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1590:	8f e0       	ldi	r24, 0x0F	; 15
    1592:	61 e0       	ldi	r22, 0x01	; 1
    1594:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureHome){
    1598:	80 91 7e 04 	lds	r24, 0x047E
    159c:	86 95       	lsr	r24
    159e:	81 70       	andi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	6f 89       	ldd	r22, Y+23	; 0x17
    15a4:	78 8d       	ldd	r23, Y+24	; 0x18
    15a6:	68 17       	cp	r22, r24
    15a8:	79 07       	cpc	r23, r25
    15aa:	09 f4       	brne	.+2      	; 0x15ae <main+0x612>
    15ac:	39 c2       	rjmp	.+1138   	; 0x1a20 <main+0xa84>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureHome);
    15ae:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureHome;
    15b2:	80 91 7e 04 	lds	r24, 0x047E
    15b6:	86 95       	lsr	r24
    15b8:	95 c0       	rjmp	.+298    	; 0x16e4 <main+0x748>
						}							
						break;
					case S2:
						if(printVar){
    15ba:	99 20       	and	r9, r9
    15bc:	21 f0       	breq	.+8      	; 0x15c6 <main+0x62a>
							serial_print_string("SENSOR 3");
    15be:	8b ef       	ldi	r24, 0xFB	; 251
    15c0:	91 e0       	ldi	r25, 0x01	; 1
    15c2:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    15c6:	8f e0       	ldi	r24, 0x0F	; 15
    15c8:	61 e0       	ldi	r22, 0x01	; 1
    15ca:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureLift){
    15ce:	80 91 7e 04 	lds	r24, 0x047E
    15d2:	86 95       	lsr	r24
    15d4:	86 95       	lsr	r24
    15d6:	81 70       	andi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	6f 89       	ldd	r22, Y+23	; 0x17
    15dc:	78 8d       	ldd	r23, Y+24	; 0x18
    15de:	68 17       	cp	r22, r24
    15e0:	79 07       	cpc	r23, r25
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <main+0x64a>
    15e4:	1d c2       	rjmp	.+1082   	; 0x1a20 <main+0xa84>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureLift);
    15e6:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureLift;
    15ea:	80 91 7e 04 	lds	r24, 0x047E
    15ee:	86 95       	lsr	r24
    15f0:	86 95       	lsr	r24
    15f2:	78 c0       	rjmp	.+240    	; 0x16e4 <main+0x748>
						}							
						break;
					case S3:
						if(printVar){
    15f4:	99 20       	and	r9, r9
    15f6:	21 f0       	breq	.+8      	; 0x1600 <main+0x664>
							serial_print_string("SENSOR 4");
    15f8:	84 e0       	ldi	r24, 0x04	; 4
    15fa:	92 e0       	ldi	r25, 0x02	; 2
    15fc:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1600:	8f e0       	ldi	r24, 0x0F	; 15
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixturePlate){
    1608:	80 91 7e 04 	lds	r24, 0x047E
    160c:	86 95       	lsr	r24
    160e:	86 95       	lsr	r24
    1610:	86 95       	lsr	r24
    1612:	81 70       	andi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	6f 89       	ldd	r22, Y+23	; 0x17
    1618:	78 8d       	ldd	r23, Y+24	; 0x18
    161a:	68 17       	cp	r22, r24
    161c:	79 07       	cpc	r23, r25
    161e:	09 f4       	brne	.+2      	; 0x1622 <main+0x686>
    1620:	ff c1       	rjmp	.+1022   	; 0x1a20 <main+0xa84>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixturePlate);
    1622:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixturePlate;
    1626:	80 91 7e 04 	lds	r24, 0x047E
    162a:	86 95       	lsr	r24
    162c:	86 95       	lsr	r24
    162e:	86 95       	lsr	r24
    1630:	59 c0       	rjmp	.+178    	; 0x16e4 <main+0x748>
						}							
						break;
					case S4:
						if(printVar){
    1632:	99 20       	and	r9, r9
    1634:	21 f0       	breq	.+8      	; 0x163e <main+0x6a2>
							serial_print_string("SENSOR 5");
    1636:	8d e0       	ldi	r24, 0x0D	; 13
    1638:	92 e0       	ldi	r25, 0x02	; 2
    163a:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    163e:	8f e0       	ldi	r24, 0x0F	; 15
    1640:	61 e0       	ldi	r22, 0x01	; 1
    1642:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush1){
    1646:	80 91 7e 04 	lds	r24, 0x047E
    164a:	82 95       	swap	r24
    164c:	81 70       	andi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	6f 89       	ldd	r22, Y+23	; 0x17
    1652:	78 8d       	ldd	r23, Y+24	; 0x18
    1654:	68 17       	cp	r22, r24
    1656:	79 07       	cpc	r23, r25
    1658:	09 f4       	brne	.+2      	; 0x165c <main+0x6c0>
    165a:	e2 c1       	rjmp	.+964    	; 0x1a20 <main+0xa84>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
    165c:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush1;
    1660:	80 91 7e 04 	lds	r24, 0x047E
    1664:	82 95       	swap	r24
    1666:	8f 70       	andi	r24, 0x0F	; 15
    1668:	3d c0       	rjmp	.+122    	; 0x16e4 <main+0x748>
						}							
						break;
					case S5:
						if(printVar){
    166a:	99 20       	and	r9, r9
    166c:	21 f0       	breq	.+8      	; 0x1676 <main+0x6da>
							serial_print_string("SENSOR 6");
    166e:	86 e1       	ldi	r24, 0x16	; 22
    1670:	92 e0       	ldi	r25, 0x02	; 2
    1672:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1676:	8f e0       	ldi	r24, 0x0F	; 15
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush2){
    167e:	80 91 7e 04 	lds	r24, 0x047E
    1682:	82 95       	swap	r24
    1684:	86 95       	lsr	r24
    1686:	81 70       	andi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	6f 89       	ldd	r22, Y+23	; 0x17
    168c:	78 8d       	ldd	r23, Y+24	; 0x18
    168e:	68 17       	cp	r22, r24
    1690:	79 07       	cpc	r23, r25
    1692:	09 f4       	brne	.+2      	; 0x1696 <main+0x6fa>
    1694:	c5 c1       	rjmp	.+906    	; 0x1a20 <main+0xa84>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
    1696:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush2;
    169a:	80 91 7e 04 	lds	r24, 0x047E
    169e:	82 95       	swap	r24
    16a0:	86 95       	lsr	r24
    16a2:	87 70       	andi	r24, 0x07	; 7
    16a4:	1f c0       	rjmp	.+62     	; 0x16e4 <main+0x748>
						}							
						break;
					case S6:
						if(printVar){
    16a6:	99 20       	and	r9, r9
    16a8:	21 f0       	breq	.+8      	; 0x16b2 <main+0x716>
							serial_print_string("SENSOR 7");
    16aa:	8f e1       	ldi	r24, 0x1F	; 31
    16ac:	92 e0       	ldi	r25, 0x02	; 2
    16ae:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    16b2:	8f e0       	ldi	r24, 0x0F	; 15
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry1){
    16ba:	80 91 7e 04 	lds	r24, 0x047E
    16be:	82 95       	swap	r24
    16c0:	86 95       	lsr	r24
    16c2:	86 95       	lsr	r24
    16c4:	81 70       	andi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	6f 89       	ldd	r22, Y+23	; 0x17
    16ca:	78 8d       	ldd	r23, Y+24	; 0x18
    16cc:	68 17       	cp	r22, r24
    16ce:	79 07       	cpc	r23, r25
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <main+0x738>
    16d2:	a6 c1       	rjmp	.+844    	; 0x1a20 <main+0xa84>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry1);
    16d4:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry1;
    16d8:	80 91 7e 04 	lds	r24, 0x047E
    16dc:	82 95       	swap	r24
    16de:	86 95       	lsr	r24
    16e0:	86 95       	lsr	r24
    16e2:	83 70       	andi	r24, 0x03	; 3
    16e4:	81 70       	andi	r24, 0x01	; 1
    16e6:	1d c0       	rjmp	.+58     	; 0x1722 <main+0x786>
						}							
						break;
					case S7:
						if(printVar){
    16e8:	99 20       	and	r9, r9
    16ea:	21 f0       	breq	.+8      	; 0x16f4 <main+0x758>
							serial_print_string("SENSOR 8");
    16ec:	88 e2       	ldi	r24, 0x28	; 40
    16ee:	92 e0       	ldi	r25, 0x02	; 2
    16f0:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    16f4:	8f e0       	ldi	r24, 0x0F	; 15
    16f6:	61 e0       	ldi	r22, 0x01	; 1
    16f8:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry2){
    16fc:	80 91 7e 04 	lds	r24, 0x047E
    1700:	88 1f       	adc	r24, r24
    1702:	88 27       	eor	r24, r24
    1704:	88 1f       	adc	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	6f 89       	ldd	r22, Y+23	; 0x17
    170a:	78 8d       	ldd	r23, Y+24	; 0x18
    170c:	68 17       	cp	r22, r24
    170e:	79 07       	cpc	r23, r25
    1710:	09 f4       	brne	.+2      	; 0x1714 <main+0x778>
    1712:	86 c1       	rjmp	.+780    	; 0x1a20 <main+0xa84>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry2);
    1714:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry2;
    1718:	80 91 7e 04 	lds	r24, 0x047E
    171c:	88 1f       	adc	r24, r24
    171e:	88 27       	eor	r24, r24
    1720:	88 1f       	adc	r24, r24
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	38 8f       	std	Y+24, r19	; 0x18
    1728:	2f 8b       	std	Y+23, r18	; 0x17
    172a:	7a c1       	rjmp	.+756    	; 0x1a20 <main+0xa84>
						}							
						break;
					case O0_ON:
						if(printVar){
    172c:	99 20       	and	r9, r9
    172e:	21 f0       	breq	.+8      	; 0x1738 <main+0x79c>
							serial_print_string("AC POWER     ON ");
    1730:	81 e3       	ldi	r24, 0x31	; 49
    1732:	92 e0       	ldi	r25, 0x02	; 2
    1734:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1738:	80 91 82 04 	lds	r24, 0x0482
    173c:	8e 7f       	andi	r24, 0xFE	; 254
    173e:	0d c0       	rjmp	.+26     	; 0x175a <main+0x7be>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
    1740:	80 91 82 04 	lds	r24, 0x0482
    1744:	81 60       	ori	r24, 0x01	; 1
    1746:	6c c0       	rjmp	.+216    	; 0x1820 <main+0x884>
						break;
					case O1_ON:
						if(printVar){
    1748:	99 20       	and	r9, r9
    174a:	21 f0       	breq	.+8      	; 0x1754 <main+0x7b8>
							serial_print_string("BLOWER       ON  ");
    174c:	82 e4       	ldi	r24, 0x42	; 66
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1754:	80 91 82 04 	lds	r24, 0x0482
    1758:	8d 7f       	andi	r24, 0xFD	; 253
    175a:	80 93 82 04 	sts	0x0482, r24
    175e:	60 c1       	rjmp	.+704    	; 0x1a20 <main+0xa84>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1760:	80 91 82 04 	lds	r24, 0x0482
    1764:	82 60       	ori	r24, 0x02	; 2
    1766:	5c c0       	rjmp	.+184    	; 0x1820 <main+0x884>
						break;
					case O2_ON:
						if(printVar){
    1768:	99 20       	and	r9, r9
    176a:	21 f0       	breq	.+8      	; 0x1774 <main+0x7d8>
							serial_print_string("PLATE STOP   ON ");
    176c:	84 e5       	ldi	r24, 0x54	; 84
    176e:	92 e0       	ldi	r25, 0x02	; 2
    1770:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1774:	80 91 82 04 	lds	r24, 0x0482
    1778:	8b 7f       	andi	r24, 0xFB	; 251
    177a:	ef cf       	rjmp	.-34     	; 0x175a <main+0x7be>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
    177c:	80 91 82 04 	lds	r24, 0x0482
    1780:	84 60       	ori	r24, 0x04	; 4
    1782:	4e c0       	rjmp	.+156    	; 0x1820 <main+0x884>
						break;
					case O3_ON:
						if(printVar){
    1784:	99 20       	and	r9, r9
    1786:	21 f0       	breq	.+8      	; 0x1790 <main+0x7f4>
							serial_print_string("PLATE RAISE  ON ");
    1788:	85 e6       	ldi	r24, 0x65	; 101
    178a:	92 e0       	ldi	r25, 0x02	; 2
    178c:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1790:	80 91 82 04 	lds	r24, 0x0482
    1794:	87 7f       	andi	r24, 0xF7	; 247
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1796:	80 61       	ori	r24, 0x10	; 16
    1798:	e0 cf       	rjmp	.-64     	; 0x175a <main+0x7be>
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    179a:	80 91 82 04 	lds	r24, 0x0482
    179e:	88 60       	ori	r24, 0x08	; 8
    17a0:	3f c0       	rjmp	.+126    	; 0x1820 <main+0x884>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(printVar){
    17a2:	99 20       	and	r9, r9
    17a4:	21 f0       	breq	.+8      	; 0x17ae <main+0x812>
							serial_print_string("PLATE LOWER  ON ");
    17a6:	86 e7       	ldi	r24, 0x76	; 118
    17a8:	92 e0       	ldi	r25, 0x02	; 2
    17aa:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    17ae:	80 91 82 04 	lds	r24, 0x0482
    17b2:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    17b4:	8f 7e       	andi	r24, 0xEF	; 239
    17b6:	d1 cf       	rjmp	.-94     	; 0x175a <main+0x7be>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    17b8:	80 91 82 04 	lds	r24, 0x0482
    17bc:	80 61       	ori	r24, 0x10	; 16
    17be:	30 c0       	rjmp	.+96     	; 0x1820 <main+0x884>
						break;
					case O5_ON:
						if(printVar){
    17c0:	99 20       	and	r9, r9
    17c2:	21 f0       	breq	.+8      	; 0x17cc <main+0x830>
							serial_print_string("BRUSH1 RAISE ON ");
    17c4:	87 e8       	ldi	r24, 0x87	; 135
    17c6:	92 e0       	ldi	r25, 0x02	; 2
    17c8:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    17cc:	80 91 82 04 	lds	r24, 0x0482
    17d0:	8f 7d       	andi	r24, 0xDF	; 223
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    17d2:	80 64       	ori	r24, 0x40	; 64
    17d4:	c2 cf       	rjmp	.-124    	; 0x175a <main+0x7be>
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    17d6:	80 91 82 04 	lds	r24, 0x0482
    17da:	80 62       	ori	r24, 0x20	; 32
    17dc:	21 c0       	rjmp	.+66     	; 0x1820 <main+0x884>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(printVar){
    17de:	99 20       	and	r9, r9
    17e0:	21 f0       	breq	.+8      	; 0x17ea <main+0x84e>
							serial_print_string("BRUSH1 LOWER ON ");
    17e2:	88 e9       	ldi	r24, 0x98	; 152
    17e4:	92 e0       	ldi	r25, 0x02	; 2
    17e6:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    17ea:	80 91 82 04 	lds	r24, 0x0482
    17ee:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    17f0:	80 62       	ori	r24, 0x20	; 32
    17f2:	b3 cf       	rjmp	.-154    	; 0x175a <main+0x7be>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    17f4:	80 91 82 04 	lds	r24, 0x0482
    17f8:	80 64       	ori	r24, 0x40	; 64
    17fa:	12 c0       	rjmp	.+36     	; 0x1820 <main+0x884>
						break;
					case O7_ON:
						if(printVar){
    17fc:	99 20       	and	r9, r9
    17fe:	21 f0       	breq	.+8      	; 0x1808 <main+0x86c>
							serial_print_string("BRUSH2 RAISE ON ");
    1800:	89 ea       	ldi	r24, 0xA9	; 169
    1802:	92 e0       	ldi	r25, 0x02	; 2
    1804:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1808:	80 91 82 04 	lds	r24, 0x0482
    180c:	8f 77       	andi	r24, 0x7F	; 127
    180e:	80 93 82 04 	sts	0x0482, r24
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1812:	80 91 80 04 	lds	r24, 0x0480
    1816:	81 60       	ori	r24, 0x01	; 1
    1818:	40 c0       	rjmp	.+128    	; 0x189a <main+0x8fe>
						break;
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    181a:	80 91 82 04 	lds	r24, 0x0482
    181e:	80 68       	ori	r24, 0x80	; 128
    1820:	80 93 82 04 	sts	0x0482, r24
    1824:	fe c0       	rjmp	.+508    	; 0x1a22 <main+0xa86>
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(printVar){
    1826:	99 20       	and	r9, r9
    1828:	21 f0       	breq	.+8      	; 0x1832 <main+0x896>
							serial_print_string("BRUSH2 LOWER ON ");
    182a:	8a eb       	ldi	r24, 0xBA	; 186
    182c:	92 e0       	ldi	r25, 0x02	; 2
    182e:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1832:	80 91 80 04 	lds	r24, 0x0480
    1836:	8e 7f       	andi	r24, 0xFE	; 254
    1838:	80 93 80 04 	sts	0x0480, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    183c:	80 91 82 04 	lds	r24, 0x0482
    1840:	80 68       	ori	r24, 0x80	; 128
    1842:	8b cf       	rjmp	.-234    	; 0x175a <main+0x7be>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1844:	80 91 80 04 	lds	r24, 0x0480
    1848:	81 60       	ori	r24, 0x01	; 1
    184a:	2d c0       	rjmp	.+90     	; 0x18a6 <main+0x90a>
						break;
					case O9_ON:
						if(printVar){
    184c:	99 20       	and	r9, r9
    184e:	21 f0       	breq	.+8      	; 0x1858 <main+0x8bc>
							serial_print_string("PAPER RAISE  ON ");
    1850:	8b ec       	ldi	r24, 0xCB	; 203
    1852:	92 e0       	ldi	r25, 0x02	; 2
    1854:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1858:	80 91 80 04 	lds	r24, 0x0480
    185c:	8d 7f       	andi	r24, 0xFD	; 253
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    185e:	84 60       	ori	r24, 0x04	; 4
    1860:	1c c0       	rjmp	.+56     	; 0x189a <main+0x8fe>
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1862:	80 91 80 04 	lds	r24, 0x0480
    1866:	82 60       	ori	r24, 0x02	; 2
    1868:	1e c0       	rjmp	.+60     	; 0x18a6 <main+0x90a>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(printVar){
    186a:	99 20       	and	r9, r9
    186c:	21 f0       	breq	.+8      	; 0x1876 <main+0x8da>
							serial_print_string("PAPER LOWER  ON ");
    186e:	8c ed       	ldi	r24, 0xDC	; 220
    1870:	92 e0       	ldi	r25, 0x02	; 2
    1872:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1876:	80 91 80 04 	lds	r24, 0x0480
    187a:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    187c:	82 60       	ori	r24, 0x02	; 2
    187e:	0d c0       	rjmp	.+26     	; 0x189a <main+0x8fe>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    1880:	80 91 80 04 	lds	r24, 0x0480
    1884:	84 60       	ori	r24, 0x04	; 4
    1886:	0f c0       	rjmp	.+30     	; 0x18a6 <main+0x90a>
						break;
					case O11_ON:
						if(printVar){
    1888:	99 20       	and	r9, r9
    188a:	21 f0       	breq	.+8      	; 0x1894 <main+0x8f8>
							serial_print_string("AIR KNIFE    ON ");
    188c:	8d ee       	ldi	r24, 0xED	; 237
    188e:	92 e0       	ldi	r25, 0x02	; 2
    1890:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1894:	80 91 80 04 	lds	r24, 0x0480
    1898:	87 7f       	andi	r24, 0xF7	; 247
    189a:	80 93 80 04 	sts	0x0480, r24
    189e:	c0 c0       	rjmp	.+384    	; 0x1a20 <main+0xa84>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
    18a0:	80 91 80 04 	lds	r24, 0x0480
    18a4:	88 60       	ori	r24, 0x08	; 8
    18a6:	80 93 80 04 	sts	0x0480, r24
    18aa:	bb c0       	rjmp	.+374    	; 0x1a22 <main+0xa86>
						break;
					case M1_F:
						if(printVar){
    18ac:	99 20       	and	r9, r9
    18ae:	21 f0       	breq	.+8      	; 0x18b8 <main+0x91c>
							serial_print_string("LOADING    FRONT");
    18b0:	8e ef       	ldi	r24, 0xFE	; 254
    18b2:	92 e0       	ldi	r25, 0x02	; 2
    18b4:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    18b8:	80 91 83 04 	lds	r24, 0x0483
    18bc:	8d 7f       	andi	r24, 0xFD	; 253
    18be:	80 93 83 04 	sts	0x0483, r24
						plateLoadMotor =  1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	9b 83       	std	Y+3, r25	; 0x03
    18c8:	8a 83       	std	Y+2, r24	; 0x02
    18ca:	aa c0       	rjmp	.+340    	; 0x1a20 <main+0xa84>
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
    18cc:	80 91 83 04 	lds	r24, 0x0483
    18d0:	82 60       	ori	r24, 0x02	; 2
    18d2:	80 93 83 04 	sts	0x0483, r24
						plateLoadMotor =  1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	9b 83       	std	Y+3, r25	; 0x03
    18dc:	8a 83       	std	Y+2, r24	; 0x02
    18de:	a1 c0       	rjmp	.+322    	; 0x1a22 <main+0xa86>
						break;
					case M2_F:
						if(printVar){
    18e0:	99 20       	and	r9, r9
    18e2:	21 f0       	breq	.+8      	; 0x18ec <main+0x950>
							serial_print_string("DRIVE      FRONT");
    18e4:	8f e0       	ldi	r24, 0x0F	; 15
    18e6:	93 e0       	ldi	r25, 0x03	; 3
    18e8:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    18ec:	80 91 83 04 	lds	r24, 0x0483
    18f0:	8f 7e       	andi	r24, 0xEF	; 239
    18f2:	80 93 83 04 	sts	0x0483, r24
						fixtureMotor =  1;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	9d 83       	std	Y+5, r25	; 0x05
    18fc:	8c 83       	std	Y+4, r24	; 0x04
						plateLoadMotor = 0;
    18fe:	1b 82       	std	Y+3, r1	; 0x03
    1900:	1a 82       	std	Y+2, r1	; 0x02
    1902:	99 24       	eor	r9, r9
    1904:	32 e2       	ldi	r19, 0x22	; 34
    1906:	63 2e       	mov	r6, r19
    1908:	71 2c       	mov	r7, r1
    190a:	8b c0       	rjmp	.+278    	; 0x1a22 <main+0xa86>
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
    190c:	80 91 83 04 	lds	r24, 0x0483
    1910:	80 61       	ori	r24, 0x10	; 16
    1912:	80 93 83 04 	sts	0x0483, r24
						fixtureMotor =  1;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9d 83       	std	Y+5, r25	; 0x05
    191c:	8c 83       	std	Y+4, r24	; 0x04
    191e:	81 c0       	rjmp	.+258    	; 0x1a22 <main+0xa86>
						break;
					case M3_F:
						if(printVar){
    1920:	99 20       	and	r9, r9
    1922:	21 f0       	breq	.+8      	; 0x192c <main+0x990>
							serial_print_string("BRUSH1     FRONT");
    1924:	80 e2       	ldi	r24, 0x20	; 32
    1926:	93 e0       	ldi	r25, 0x03	; 3
    1928:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
    192c:	80 91 83 04 	lds	r24, 0x0483
    1930:	8f 77       	andi	r24, 0x7F	; 127
    1932:	80 93 83 04 	sts	0x0483, r24
						brush1Motor =  1;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	9f 83       	std	Y+7, r25	; 0x07
    193c:	8e 83       	std	Y+6, r24	; 0x06
						fixtureMotor = 0;
    193e:	1d 82       	std	Y+5, r1	; 0x05
    1940:	1c 82       	std	Y+4, r1	; 0x04
    1942:	99 24       	eor	r9, r9
    1944:	24 e2       	ldi	r18, 0x24	; 36
    1946:	62 2e       	mov	r6, r18
    1948:	71 2c       	mov	r7, r1
    194a:	6b c0       	rjmp	.+214    	; 0x1a22 <main+0xa86>
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
    194c:	80 91 83 04 	lds	r24, 0x0483
    1950:	80 68       	ori	r24, 0x80	; 128
    1952:	80 93 83 04 	sts	0x0483, r24
						brush1Motor =  1;
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	9f 83       	std	Y+7, r25	; 0x07
    195c:	8e 83       	std	Y+6, r24	; 0x06
    195e:	61 c0       	rjmp	.+194    	; 0x1a22 <main+0xa86>
						break;
					case M4_F:
						if(printVar){
    1960:	99 20       	and	r9, r9
    1962:	21 f0       	breq	.+8      	; 0x196c <main+0x9d0>
							serial_print_string("BRUSH2     FRONT");
    1964:	81 e3       	ldi	r24, 0x31	; 49
    1966:	93 e0       	ldi	r25, 0x03	; 3
    1968:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
    196c:	80 91 7f 04 	lds	r24, 0x047F
    1970:	8b 7f       	andi	r24, 0xFB	; 251
    1972:	80 93 7f 04 	sts	0x047F, r24
						brush2Motor =  1;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	99 87       	std	Y+9, r25	; 0x09
    197c:	88 87       	std	Y+8, r24	; 0x08
						brush1Motor = 0;
    197e:	1f 82       	std	Y+7, r1	; 0x07
    1980:	1e 82       	std	Y+6, r1	; 0x06
    1982:	99 24       	eor	r9, r9
    1984:	96 e2       	ldi	r25, 0x26	; 38
    1986:	69 2e       	mov	r6, r25
    1988:	71 2c       	mov	r7, r1
    198a:	4b c0       	rjmp	.+150    	; 0x1a22 <main+0xa86>
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
    198c:	80 91 7f 04 	lds	r24, 0x047F
    1990:	84 60       	ori	r24, 0x04	; 4
    1992:	80 93 7f 04 	sts	0x047F, r24
						brush2Motor =  1;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	99 87       	std	Y+9, r25	; 0x09
    199c:	88 87       	std	Y+8, r24	; 0x08
    199e:	41 c0       	rjmp	.+130    	; 0x1a22 <main+0xa86>
						break;
					case M5_F:
						if(printVar){
    19a0:	99 20       	and	r9, r9
    19a2:	21 f0       	breq	.+8      	; 0x19ac <main+0xa10>
							serial_print_string("PAPER      FRONT");
    19a4:	82 e4       	ldi	r24, 0x42	; 66
    19a6:	93 e0       	ldi	r25, 0x03	; 3
    19a8:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    19ac:	80 91 7f 04 	lds	r24, 0x047F
    19b0:	8f 7d       	andi	r24, 0xDF	; 223
    19b2:	80 93 7f 04 	sts	0x047F, r24
						paperTowelMotor =  1;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9b 87       	std	Y+11, r25	; 0x0b
    19bc:	8a 87       	std	Y+10, r24	; 0x0a
						brush2Motor = 0;
    19be:	19 86       	std	Y+9, r1	; 0x09
    19c0:	18 86       	std	Y+8, r1	; 0x08
    19c2:	99 24       	eor	r9, r9
    19c4:	88 e2       	ldi	r24, 0x28	; 40
    19c6:	68 2e       	mov	r6, r24
    19c8:	71 2c       	mov	r7, r1
    19ca:	2b c0       	rjmp	.+86     	; 0x1a22 <main+0xa86>
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
    19cc:	80 91 7f 04 	lds	r24, 0x047F
    19d0:	80 62       	ori	r24, 0x20	; 32
    19d2:	80 93 7f 04 	sts	0x047F, r24
						paperTowelMotor =  1;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	9b 87       	std	Y+11, r25	; 0x0b
    19dc:	8a 87       	std	Y+10, r24	; 0x0a
    19de:	21 c0       	rjmp	.+66     	; 0x1a22 <main+0xa86>
						break;
					case M2_AND_M3:
						if(printVar){
    19e0:	99 20       	and	r9, r9
    19e2:	21 f0       	breq	.+8      	; 0x19ec <main+0xa50>
							serial_print_string("FIXTURE & BRUSH1");
    19e4:	83 e5       	ldi	r24, 0x53	; 83
    19e6:	93 e0       	ldi	r25, 0x03	; 3
    19e8:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	9d 83       	std	Y+5, r25	; 0x05
    19f2:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 1;
    19f4:	9f 83       	std	Y+7, r25	; 0x07
    19f6:	8e 83       	std	Y+6, r24	; 0x06
    19f8:	13 c0       	rjmp	.+38     	; 0x1a20 <main+0xa84>
						break;
					case M2_AND_M4:
						if(printVar){
    19fa:	99 20       	and	r9, r9
    19fc:	21 f0       	breq	.+8      	; 0x1a06 <main+0xa6a>
							serial_print_string("FIXTURE & BRUSH2");
    19fe:	84 e6       	ldi	r24, 0x64	; 100
    1a00:	93 e0       	ldi	r25, 0x03	; 3
    1a02:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9d 83       	std	Y+5, r25	; 0x05
    1a0c:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 0;
    1a0e:	1f 82       	std	Y+7, r1	; 0x07
    1a10:	1e 82       	std	Y+6, r1	; 0x06
						brush2Motor = 1;
    1a12:	99 87       	std	Y+9, r25	; 0x09
    1a14:	88 87       	std	Y+8, r24	; 0x08
    1a16:	99 24       	eor	r9, r9
    1a18:	0b e2       	ldi	r16, 0x2B	; 43
    1a1a:	60 2e       	mov	r6, r16
    1a1c:	71 2c       	mov	r7, r1
    1a1e:	01 c0       	rjmp	.+2      	; 0x1a22 <main+0xa86>
    1a20:	99 24       	eor	r9, r9
						break;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1a22:	2a 81       	ldd	r18, Y+2	; 0x02
    1a24:	3b 81       	ldd	r19, Y+3	; 0x03
    1a26:	0c 81       	ldd	r16, Y+4	; 0x04
    1a28:	1d 81       	ldd	r17, Y+5	; 0x05
    1a2a:	ee 80       	ldd	r14, Y+6	; 0x06
    1a2c:	ff 80       	ldd	r15, Y+7	; 0x07
    1a2e:	c8 84       	ldd	r12, Y+8	; 0x08
    1a30:	d9 84       	ldd	r13, Y+9	; 0x09
    1a32:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a34:	bb 84       	ldd	r11, Y+11	; 0x0b
    1a36:	c2 01       	movw	r24, r4
    1a38:	b1 01       	movw	r22, r2
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	50 e0       	ldi	r21, 0x00	; 0
    1a3e:	0e 94 32 06 	call	0xc64	; 0xc64 <motor_and_write>

				serial_check(); counter++;
    1a42:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <serial_check>
				delay_ms(1);
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>
			counter = 0;
			//clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
    1a4e:	3c e2       	ldi	r19, 0x2C	; 44
    1a50:	63 16       	cp	r6, r19
    1a52:	71 04       	cpc	r7, r1
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <main+0xabc>
    1a56:	c5 c5       	rjmp	.+2954   	; 0x25e2 <main+0x1646>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1a58:	08 94       	sec
    1a5a:	41 1c       	adc	r4, r1
    1a5c:	51 1c       	adc	r5, r1
    1a5e:	dc cb       	rjmp	.-2120   	; 0x1218 <main+0x27c>
		}
		else{										//If switch is set to Run Mode
		
		bool printVar = true;

		serial_print_string("NORMAL");
    1a60:	85 e7       	ldi	r24, 0x75	; 117
    1a62:	93 e0       	ldi	r25, 0x03	; 3
    1a64:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
		delay_ms(1000);
    1a68:	88 ee       	ldi	r24, 0xE8	; 232
    1a6a:	93 e0       	ldi	r25, 0x03	; 3
    1a6c:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>
		
		//clear();
		serial_print_string("SELECT CYCLE");
    1a70:	8c e7       	ldi	r24, 0x7C	; 124
    1a72:	93 e0       	ldi	r25, 0x03	; 3
    1a74:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
    1a78:	ee 24       	eor	r14, r14
    1a7a:	ff 24       	eor	r15, r15
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1a7c:	c7 01       	movw	r24, r14
    1a7e:	be 01       	movw	r22, r28
    1a80:	64 5f       	subi	r22, 0xF4	; 244
    1a82:	7f 4f       	sbci	r23, 0xFF	; 255
    1a84:	0e 94 30 03 	call	0x660	; 0x660 <button_debounce>
    1a88:	18 2f       	mov	r17, r24
			counter++;
    1a8a:	08 94       	sec
    1a8c:	e1 1c       	adc	r14, r1
    1a8e:	f1 1c       	adc	r15, r1
			delay_ms(1);
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>
		delay_ms(1000);
		
		//clear();
		serial_print_string("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1a98:	11 23       	and	r17, r17
    1a9a:	81 f3       	breq	.-32     	; 0x1a7c <main+0xae0>
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		//clear();
		serial_print_string("CYCLE:");
    1a9c:	89 e8       	ldi	r24, 0x89	; 137
    1a9e:	93 e0       	ldi	r25, 0x03	; 3
    1aa0:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>

		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1aa4:	80 91 83 04 	lds	r24, 0x0483
    1aa8:	80 62       	ori	r24, 0x20	; 32
    1aaa:	80 93 83 04 	sts	0x0483, r24

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1ab4:	88 23       	and	r24, r24
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <main+0xb1e>
    1ab8:	70 c1       	rjmp	.+736    	; 0x1d9a <main+0xdfe>
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1ac0:	88 23       	and	r24, r24
    1ac2:	09 f0       	breq	.+2      	; 0x1ac6 <main+0xb2a>
    1ac4:	6a c1       	rjmp	.+724    	; 0x1d9a <main+0xdfe>
			lcd_goto_xy(7,0);
    1ac6:	87 e0       	ldi	r24, 0x07	; 7
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
			serial_print_string("FIRST B");
    1ace:	80 e9       	ldi	r24, 0x90	; 144
    1ad0:	93 e0       	ldi	r25, 0x03	; 3
    1ad2:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9d 83       	std	Y+5, r25	; 0x05
    1adc:	8c 83       	std	Y+4, r24	; 0x04
    1ade:	80 91 83 04 	lds	r24, 0x0483
    1ae2:	80 62       	ori	r24, 0x20	; 32
    1ae4:	80 93 83 04 	sts	0x0483, r24
    1ae8:	66 24       	eor	r6, r6
    1aea:	77 24       	eor	r7, r7
    1aec:	44 24       	eor	r4, r4
    1aee:	55 24       	eor	r5, r5
    1af0:	19 8a       	std	Y+17, r1	; 0x11
    1af2:	18 8a       	std	Y+16, r1	; 0x10
    1af4:	22 24       	eor	r2, r2
    1af6:	23 94       	inc	r2
    1af8:	33 24       	eor	r3, r3
    1afa:	33 94       	inc	r3
    1afc:	88 24       	eor	r8, r8
    1afe:	99 24       	eor	r9, r9
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1b00:	84 e4       	ldi	r24, 0x44	; 68
    1b02:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1b0c:	85 e4       	ldi	r24, 0x45	; 69
    1b0e:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1b12:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1b16:	80 93 7e 04 	sts	0x047E, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1b1a:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1b1e:	80 93 81 04 	sts	0x0481, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1b22:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    1b26:	81 14       	cp	r8, r1
    1b28:	91 04       	cpc	r9, r1
    1b2a:	b1 f0       	breq	.+44     	; 0x1b58 <main+0xbbc>
    1b2c:	33 20       	and	r3, r3
    1b2e:	a1 f0       	breq	.+40     	; 0x1b58 <main+0xbbc>
					lcd_goto_xy(6,1);
    1b30:	86 e0       	ldi	r24, 0x06	; 6
    1b32:	61 e0       	ldi	r22, 0x01	; 1
    1b34:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
					serial_print_string("     ");
    1b38:	88 e9       	ldi	r24, 0x98	; 152
    1b3a:	93 e0       	ldi	r25, 0x03	; 3
    1b3c:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
					lcd_goto_xy(0,1);
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	61 e0       	ldi	r22, 0x01	; 1
    1b44:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
					serial_print_string("STATE ");
    1b48:	8e e9       	ldi	r24, 0x9E	; 158
    1b4a:	93 e0       	ldi	r25, 0x03	; 3
    1b4c:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
					serial_print_int(state);
    1b50:	c4 01       	movw	r24, r8
    1b52:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
    1b56:	33 24       	eor	r3, r3
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1b58:	c3 01       	movw	r24, r6
    1b5a:	be 01       	movw	r22, r28
    1b5c:	64 5f       	subi	r22, 0xF4	; 244
    1b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b60:	0e 94 30 03 	call	0x660	; 0x660 <button_debounce>
    1b64:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1b66:	c4 01       	movw	r24, r8
    1b68:	a3 01       	movw	r20, r6
    1b6a:	92 01       	movw	r18, r4
    1b6c:	0e 94 8f 03 	call	0x71e	; 0x71e <init_trans>
    1b70:	88 23       	and	r24, r24
    1b72:	31 f0       	breq	.+12     	; 0x1b80 <main+0xbe4>
					buttonTriggered = false;
					state ++;
    1b74:	08 94       	sec
    1b76:	81 1c       	adc	r8, r1
    1b78:	91 1c       	adc	r9, r1
    1b7a:	23 01       	movw	r4, r6
    1b7c:	33 24       	eor	r3, r3
    1b7e:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    1b80:	c4 01       	movw	r24, r8
    1b82:	b3 01       	movw	r22, r6
    1b84:	a2 01       	movw	r20, r4
    1b86:	0e 94 16 04 	call	0x82c	; 0x82c <firstB_trans>
    1b8a:	88 23       	and	r24, r24
    1b8c:	71 f0       	breq	.+28     	; 0x1baa <main+0xc0e>
					state ++;
    1b8e:	08 94       	sec
    1b90:	81 1c       	adc	r8, r1
    1b92:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)         // want to print number of steps to reach here
    1b94:	6c e0       	ldi	r22, 0x0C	; 12
    1b96:	86 16       	cp	r8, r22
    1b98:	91 04       	cpc	r9, r1
    1b9a:	f1 f1       	breq	.+124    	; 0x1c18 <main+0xc7c>
    1b9c:	70 e1       	ldi	r23, 0x10	; 16
    1b9e:	87 16       	cp	r8, r23
    1ba0:	91 04       	cpc	r9, r1
    1ba2:	d1 f1       	breq	.+116    	; 0x1c18 <main+0xc7c>
    1ba4:	23 01       	movw	r4, r6
    1ba6:	33 24       	eor	r3, r3
    1ba8:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}

				if(state == B1STOP2 && counter - counterRef > pWait){
    1baa:	81 e1       	ldi	r24, 0x11	; 17
    1bac:	88 16       	cp	r8, r24
    1bae:	91 04       	cpc	r9, r1
    1bb0:	71 f4       	brne	.+28     	; 0x1bce <main+0xc32>
    1bb2:	93 01       	movw	r18, r6
    1bb4:	24 19       	sub	r18, r4
    1bb6:	35 09       	sbc	r19, r5
    1bb8:	80 91 e0 03 	lds	r24, 0x03E0
    1bbc:	90 91 e1 03 	lds	r25, 0x03E1
    1bc0:	82 17       	cp	r24, r18
    1bc2:	93 07       	cpc	r25, r19
    1bc4:	5c f5       	brge	.+86     	; 0x1c1c <main+0xc80>
    1bc6:	23 01       	movw	r4, r6
    1bc8:	33 24       	eor	r3, r3
    1bca:	33 94       	inc	r3
    1bcc:	04 c0       	rjmp	.+8      	; 0x1bd6 <main+0xc3a>
					state = MOVED1;
					counterRef = counter;
					printVar = true;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1bce:	9c e1       	ldi	r25, 0x1C	; 28
    1bd0:	89 16       	cp	r8, r25
    1bd2:	91 04       	cpc	r9, r1
    1bd4:	19 f5       	brne	.+70     	; 0x1c1c <main+0xc80>
    1bd6:	a3 01       	movw	r20, r6
    1bd8:	44 19       	sub	r20, r4
    1bda:	55 09       	sbc	r21, r5
    1bdc:	20 91 12 04 	lds	r18, 0x0412
    1be0:	30 91 13 04 	lds	r19, 0x0413
    1be4:	80 91 f2 03 	lds	r24, 0x03F2
    1be8:	90 91 f3 03 	lds	r25, 0x03F3
    1bec:	bc 01       	movw	r22, r24
    1bee:	26 9f       	mul	r18, r22
    1bf0:	c0 01       	movw	r24, r0
    1bf2:	27 9f       	mul	r18, r23
    1bf4:	90 0d       	add	r25, r0
    1bf6:	36 9f       	mul	r19, r22
    1bf8:	90 0d       	add	r25, r0
    1bfa:	11 24       	eor	r1, r1
    1bfc:	84 17       	cp	r24, r20
    1bfe:	95 07       	cpc	r25, r21
    1c00:	3c f4       	brge	.+14     	; 0x1c10 <main+0xc74>
    1c02:	23 01       	movw	r4, r6
    1c04:	33 24       	eor	r3, r3
    1c06:	33 94       	inc	r3
    1c08:	1d e1       	ldi	r17, 0x1D	; 29
    1c0a:	81 2e       	mov	r8, r17
    1c0c:	91 2c       	mov	r9, r1
    1c0e:	06 c0       	rjmp	.+12     	; 0x1c1c <main+0xc80>
    1c10:	bc e1       	ldi	r27, 0x1C	; 28
    1c12:	8b 2e       	mov	r8, r27
    1c14:	91 2c       	mov	r9, r1
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <main+0xc80>
    1c18:	33 24       	eor	r3, r3
    1c1a:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1c1c:	c4 01       	movw	r24, r8
    1c1e:	b3 01       	movw	r22, r6
    1c20:	a2 01       	movw	r20, r4
    1c22:	28 89       	ldd	r18, Y+16	; 0x10
    1c24:	39 89       	ldd	r19, Y+17	; 0x11
    1c26:	0e 94 64 05 	call	0xac8	; 0xac8 <dry_trans>
    1c2a:	88 23       	and	r24, r24
    1c2c:	79 f0       	breq	.+30     	; 0x1c4c <main+0xcb0>
					state ++;
    1c2e:	08 94       	sec
    1c30:	81 1c       	adc	r8, r1
    1c32:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    1c34:	7f e1       	ldi	r23, 0x1F	; 31
    1c36:	87 16       	cp	r8, r23
    1c38:	91 04       	cpc	r9, r1
    1c3a:	29 f4       	brne	.+10     	; 0x1c46 <main+0xcaa>
    1c3c:	79 8a       	std	Y+17, r7	; 0x11
    1c3e:	68 8a       	std	Y+16, r6	; 0x10
    1c40:	33 24       	eor	r3, r3
    1c42:	33 94       	inc	r3
    1c44:	0f c0       	rjmp	.+30     	; 0x1c64 <main+0xcc8>
    1c46:	23 01       	movw	r4, r6
    1c48:	33 24       	eor	r3, r3
    1c4a:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    1c4c:	87 e2       	ldi	r24, 0x27	; 39
    1c4e:	88 16       	cp	r8, r24
    1c50:	91 04       	cpc	r9, r1
    1c52:	41 f4       	brne	.+16     	; 0x1c64 <main+0xcc8>
    1c54:	c3 01       	movw	r24, r6
    1c56:	84 19       	sub	r24, r4
    1c58:	95 09       	sbc	r25, r5
    1c5a:	0b 97       	sbiw	r24, 0x0b	; 11
    1c5c:	1c f0       	brlt	.+6      	; 0x1c64 <main+0xcc8>
    1c5e:	a8 e2       	ldi	r26, 0x28	; 40
    1c60:	8a 2e       	mov	r8, r26
    1c62:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1c64:	c4 01       	movw	r24, r8
    1c66:	b3 01       	movw	r22, r6
    1c68:	ae 01       	movw	r20, r28
    1c6a:	4e 5f       	subi	r20, 0xFE	; 254
    1c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6e:	9e 01       	movw	r18, r28
    1c70:	2c 5f       	subi	r18, 0xFC	; 252
    1c72:	3f 4f       	sbci	r19, 0xFF	; 255
    1c74:	8e 01       	movw	r16, r28
    1c76:	0a 5f       	subi	r16, 0xFA	; 250
    1c78:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7a:	f8 e0       	ldi	r31, 0x08	; 8
    1c7c:	ef 2e       	mov	r14, r31
    1c7e:	f1 2c       	mov	r15, r1
    1c80:	ec 0e       	add	r14, r28
    1c82:	fd 1e       	adc	r15, r29
    1c84:	ea e0       	ldi	r30, 0x0A	; 10
    1c86:	ce 2e       	mov	r12, r30
    1c88:	d1 2c       	mov	r13, r1
    1c8a:	cc 0e       	add	r12, r28
    1c8c:	dd 1e       	adc	r13, r29
    1c8e:	5e 01       	movw	r10, r28
    1c90:	08 94       	sec
    1c92:	a1 1c       	adc	r10, r1
    1c94:	b1 1c       	adc	r11, r1
    1c96:	0e 94 0a 07 	call	0xe14	; 0xe14 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1c9a:	c4 01       	movw	r24, r8
    1c9c:	b3 01       	movw	r22, r6
    1c9e:	ae 01       	movw	r20, r28
    1ca0:	4e 5f       	subi	r20, 0xFE	; 254
    1ca2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca4:	9e 01       	movw	r18, r28
    1ca6:	2c 5f       	subi	r18, 0xFC	; 252
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	8e 01       	movw	r16, r28
    1cac:	0a 5f       	subi	r16, 0xFA	; 250
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	b8 e0       	ldi	r27, 0x08	; 8
    1cb2:	eb 2e       	mov	r14, r27
    1cb4:	f1 2c       	mov	r15, r1
    1cb6:	ec 0e       	add	r14, r28
    1cb8:	fd 1e       	adc	r15, r29
    1cba:	aa e0       	ldi	r26, 0x0A	; 10
    1cbc:	ca 2e       	mov	r12, r26
    1cbe:	d1 2c       	mov	r13, r1
    1cc0:	cc 0e       	add	r12, r28
    1cc2:	dd 1e       	adc	r13, r29
    1cc4:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    1cc8:	91 e1       	ldi	r25, 0x11	; 17
    1cca:	89 16       	cp	r8, r25
    1ccc:	91 04       	cpc	r9, r1
    1cce:	59 f4       	brne	.+22     	; 0x1ce6 <main+0xd4a>
					brush1Motor = 0;
    1cd0:	1f 82       	std	Y+7, r1	; 0x07
    1cd2:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    1cd4:	1d 82       	std	Y+5, r1	; 0x05
    1cd6:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1cd8:	80 91 82 04 	lds	r24, 0x0482
    1cdc:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1cde:	80 62       	ori	r24, 0x20	; 32
    1ce0:	80 93 82 04 	sts	0x0482, r24
    1ce4:	12 c0       	rjmp	.+36     	; 0x1d0a <main+0xd6e>
				}
				if(state == MOVED1){
    1ce6:	2c e1       	ldi	r18, 0x1C	; 28
    1ce8:	82 16       	cp	r8, r18
    1cea:	91 04       	cpc	r9, r1
    1cec:	71 f4       	brne	.+28     	; 0x1d0a <main+0xd6e>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1cee:	80 91 83 04 	lds	r24, 0x0483
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1cf2:	61 e0       	ldi	r22, 0x01	; 1
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	7d 83       	std	Y+5, r23	; 0x05
    1cf8:	6c 83       	std	Y+4, r22	; 0x04
    1cfa:	80 63       	ori	r24, 0x30	; 48
    1cfc:	80 93 83 04 	sts	0x0483, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1d00:	80 91 7f 04 	lds	r24, 0x047F
    1d04:	8e 7f       	andi	r24, 0xFE	; 254
    1d06:	80 93 7f 04 	sts	0x047F, r24
				}
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1d0a:	c4 01       	movw	r24, r8
    1d0c:	b3 01       	movw	r22, r6
    1d0e:	ae 01       	movw	r20, r28
    1d10:	4e 5f       	subi	r20, 0xFE	; 254
    1d12:	5f 4f       	sbci	r21, 0xFF	; 255
    1d14:	9e 01       	movw	r18, r28
    1d16:	2c 5f       	subi	r18, 0xFC	; 252
    1d18:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1a:	8e 01       	movw	r16, r28
    1d1c:	0a 5f       	subi	r16, 0xFA	; 250
    1d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d20:	f8 e0       	ldi	r31, 0x08	; 8
    1d22:	ef 2e       	mov	r14, r31
    1d24:	f1 2c       	mov	r15, r1
    1d26:	ec 0e       	add	r14, r28
    1d28:	fd 1e       	adc	r15, r29
    1d2a:	ea e0       	ldi	r30, 0x0A	; 10
    1d2c:	ce 2e       	mov	r12, r30
    1d2e:	d1 2c       	mov	r13, r1
    1d30:	cc 0e       	add	r12, r28
    1d32:	dd 1e       	adc	r13, r29
    1d34:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <dry_action>
				if(state == END){
    1d38:	77 e2       	ldi	r23, 0x27	; 39
    1d3a:	87 16       	cp	r8, r23
    1d3c:	91 04       	cpc	r9, r1
    1d3e:	71 f4       	brne	.+28     	; 0x1d5c <main+0xdc0>
					plateLoadMotor = 0;
    1d40:	1b 82       	std	Y+3, r1	; 0x03
    1d42:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1d44:	80 91 83 04 	lds	r24, 0x0483
    1d48:	8b 7f       	andi	r24, 0xFB	; 251
    1d4a:	80 93 83 04 	sts	0x0483, r24
					if(print35 == 1){
    1d4e:	22 20       	and	r2, r2
    1d50:	29 f0       	breq	.+10     	; 0x1d5c <main+0xdc0>
						//clear();
						serial_print_string("END OF CYCLE");
    1d52:	85 ea       	ldi	r24, 0xA5	; 165
    1d54:	93 e0       	ldi	r25, 0x03	; 3
    1d56:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
    1d5a:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1d5c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d5e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d60:	0c 81       	ldd	r16, Y+4	; 0x04
    1d62:	1d 81       	ldd	r17, Y+5	; 0x05
    1d64:	ee 80       	ldd	r14, Y+6	; 0x06
    1d66:	ff 80       	ldd	r15, Y+7	; 0x07
    1d68:	c8 84       	ldd	r12, Y+8	; 0x08
    1d6a:	d9 84       	ldd	r13, Y+9	; 0x09
    1d6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d6e:	bb 84       	ldd	r11, Y+11	; 0x0b
    1d70:	c3 01       	movw	r24, r6
    1d72:	b2 01       	movw	r22, r4
    1d74:	48 89       	ldd	r20, Y+16	; 0x10
    1d76:	59 89       	ldd	r21, Y+17	; 0x11
    1d78:	0e 94 32 06 	call	0xc64	; 0xc64 <motor_and_write>

				serial_check(); counter++;
    1d7c:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <serial_check>
				delay_ms(1);
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("FIRST B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1d88:	88 e2       	ldi	r24, 0x28	; 40
    1d8a:	88 16       	cp	r8, r24
    1d8c:	91 04       	cpc	r9, r1
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <main+0xdf6>
    1d90:	28 c4       	rjmp	.+2128   	; 0x25e2 <main+0x1646>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1d92:	08 94       	sec
    1d94:	61 1c       	adc	r6, r1
    1d96:	71 1c       	adc	r7, r1
    1d98:	b3 ce       	rjmp	.-666    	; 0x1b00 <main+0xb64>
				delay_ms(1);
   		 	}
		}


		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1da0:	88 23       	and	r24, r24
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <main+0xe0a>
    1da4:	29 c1       	rjmp	.+594    	; 0x1ff8 <main+0x105c>
    1da6:	82 e0       	ldi	r24, 0x02	; 2
    1da8:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1dac:	88 23       	and	r24, r24
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <main+0xe16>
    1db0:	23 c1       	rjmp	.+582    	; 0x1ff8 <main+0x105c>
			lcd_goto_xy(7,0);
    1db2:	87 e0       	ldi	r24, 0x07	; 7
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
			serial_print_string("SECOND B");
    1dba:	82 eb       	ldi	r24, 0xB2	; 178
    1dbc:	93 e0       	ldi	r25, 0x03	; 3
    1dbe:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	9d 83       	std	Y+5, r25	; 0x05
    1dc8:	8c 83       	std	Y+4, r24	; 0x04
    1dca:	80 91 83 04 	lds	r24, 0x0483
    1dce:	80 62       	ori	r24, 0x20	; 32
    1dd0:	80 93 83 04 	sts	0x0483, r24
    1dd4:	66 24       	eor	r6, r6
    1dd6:	77 24       	eor	r7, r7
    1dd8:	44 24       	eor	r4, r4
    1dda:	55 24       	eor	r5, r5
    1ddc:	1f 86       	std	Y+15, r1	; 0x0f
    1dde:	1e 86       	std	Y+14, r1	; 0x0e
    1de0:	22 24       	eor	r2, r2
    1de2:	23 94       	inc	r2
    1de4:	33 24       	eor	r3, r3
    1de6:	33 94       	inc	r3
    1de8:	88 24       	eor	r8, r8
    1dea:	99 24       	eor	r9, r9
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1dec:	84 e4       	ldi	r24, 0x44	; 68
    1dee:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1df8:	85 e4       	ldi	r24, 0x45	; 69
    1dfa:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1dfe:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    1e02:	80 93 7e 04 	sts	0x047E, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1e06:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    1e0a:	80 93 81 04 	sts	0x0481, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1e0e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    1e12:	81 14       	cp	r8, r1
    1e14:	91 04       	cpc	r9, r1
    1e16:	b1 f0       	breq	.+44     	; 0x1e44 <main+0xea8>
    1e18:	33 20       	and	r3, r3
    1e1a:	a1 f0       	breq	.+40     	; 0x1e44 <main+0xea8>
					lcd_goto_xy(6,1);
    1e1c:	86 e0       	ldi	r24, 0x06	; 6
    1e1e:	61 e0       	ldi	r22, 0x01	; 1
    1e20:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
					serial_print_string("     ");
    1e24:	88 e9       	ldi	r24, 0x98	; 152
    1e26:	93 e0       	ldi	r25, 0x03	; 3
    1e28:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
					lcd_goto_xy(0,1);
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	61 e0       	ldi	r22, 0x01	; 1
    1e30:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
					serial_print_string("STATE ");
    1e34:	8e e9       	ldi	r24, 0x9E	; 158
    1e36:	93 e0       	ldi	r25, 0x03	; 3
    1e38:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
					serial_print_int(state);
    1e3c:	c4 01       	movw	r24, r8
    1e3e:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
    1e42:	33 24       	eor	r3, r3
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1e44:	c3 01       	movw	r24, r6
    1e46:	be 01       	movw	r22, r28
    1e48:	64 5f       	subi	r22, 0xF4	; 244
    1e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4c:	0e 94 30 03 	call	0x660	; 0x660 <button_debounce>
    1e50:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1e52:	c4 01       	movw	r24, r8
    1e54:	a3 01       	movw	r20, r6
    1e56:	92 01       	movw	r18, r4
    1e58:	0e 94 8f 03 	call	0x71e	; 0x71e <init_trans>
    1e5c:	88 23       	and	r24, r24
    1e5e:	31 f0       	breq	.+12     	; 0x1e6c <main+0xed0>
					buttonTriggered = false;
					state ++;
    1e60:	08 94       	sec
    1e62:	81 1c       	adc	r8, r1
    1e64:	91 1c       	adc	r9, r1
    1e66:	23 01       	movw	r4, r6
    1e68:	33 24       	eor	r3, r3
    1e6a:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == MOVEC1 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0){
    1e6c:	98 e0       	ldi	r25, 0x08	; 8
    1e6e:	89 16       	cp	r8, r25
    1e70:	91 04       	cpc	r9, r1
    1e72:	51 f4       	brne	.+20     	; 0x1e88 <main+0xeec>
    1e74:	80 91 7e 04 	lds	r24, 0x047E
    1e78:	84 fd       	sbrc	r24, 4
    1e7a:	06 c0       	rjmp	.+12     	; 0x1e88 <main+0xeec>
    1e7c:	23 01       	movw	r4, r6
    1e7e:	33 24       	eor	r3, r3
    1e80:	33 94       	inc	r3
    1e82:	b3 e1       	ldi	r27, 0x13	; 19
    1e84:	8b 2e       	mov	r8, r27
    1e86:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}

				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    1e88:	c4 01       	movw	r24, r8
    1e8a:	b3 01       	movw	r22, r6
    1e8c:	a2 01       	movw	r20, r4
    1e8e:	0e 94 b6 04 	call	0x96c	; 0x96c <secondB_trans>
    1e92:	88 23       	and	r24, r24
    1e94:	31 f0       	breq	.+12     	; 0x1ea2 <main+0xf06>
					state ++;
    1e96:	08 94       	sec
    1e98:	81 1c       	adc	r8, r1
    1e9a:	91 1c       	adc	r9, r1
    1e9c:	23 01       	movw	r4, r6
    1e9e:	33 24       	eor	r3, r3
    1ea0:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1ea2:	c4 01       	movw	r24, r8
    1ea4:	b3 01       	movw	r22, r6
    1ea6:	a2 01       	movw	r20, r4
    1ea8:	2e 85       	ldd	r18, Y+14	; 0x0e
    1eaa:	3f 85       	ldd	r19, Y+15	; 0x0f
    1eac:	0e 94 64 05 	call	0xac8	; 0xac8 <dry_trans>
    1eb0:	88 23       	and	r24, r24
    1eb2:	79 f0       	breq	.+30     	; 0x1ed2 <main+0xf36>
					state ++;
    1eb4:	08 94       	sec
    1eb6:	81 1c       	adc	r8, r1
    1eb8:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    1eba:	2f e1       	ldi	r18, 0x1F	; 31
    1ebc:	82 16       	cp	r8, r18
    1ebe:	91 04       	cpc	r9, r1
    1ec0:	29 f4       	brne	.+10     	; 0x1ecc <main+0xf30>
    1ec2:	7f 86       	std	Y+15, r7	; 0x0f
    1ec4:	6e 86       	std	Y+14, r6	; 0x0e
    1ec6:	33 24       	eor	r3, r3
    1ec8:	33 94       	inc	r3
    1eca:	0f c0       	rjmp	.+30     	; 0x1eea <main+0xf4e>
    1ecc:	23 01       	movw	r4, r6
    1ece:	33 24       	eor	r3, r3
    1ed0:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    1ed2:	37 e2       	ldi	r19, 0x27	; 39
    1ed4:	83 16       	cp	r8, r19
    1ed6:	91 04       	cpc	r9, r1
    1ed8:	41 f4       	brne	.+16     	; 0x1eea <main+0xf4e>
    1eda:	c3 01       	movw	r24, r6
    1edc:	84 19       	sub	r24, r4
    1ede:	95 09       	sbc	r25, r5
    1ee0:	0b 97       	sbiw	r24, 0x0b	; 11
    1ee2:	1c f0       	brlt	.+6      	; 0x1eea <main+0xf4e>
    1ee4:	a8 e2       	ldi	r26, 0x28	; 40
    1ee6:	8a 2e       	mov	r8, r26
    1ee8:	91 2c       	mov	r9, r1
				}


				//state actions
				
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1eea:	c4 01       	movw	r24, r8
    1eec:	b3 01       	movw	r22, r6
    1eee:	ae 01       	movw	r20, r28
    1ef0:	4e 5f       	subi	r20, 0xFE	; 254
    1ef2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef4:	9e 01       	movw	r18, r28
    1ef6:	2c 5f       	subi	r18, 0xFC	; 252
    1ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    1efa:	8e 01       	movw	r16, r28
    1efc:	0a 5f       	subi	r16, 0xFA	; 250
    1efe:	1f 4f       	sbci	r17, 0xFF	; 255
    1f00:	f8 e0       	ldi	r31, 0x08	; 8
    1f02:	ef 2e       	mov	r14, r31
    1f04:	f1 2c       	mov	r15, r1
    1f06:	ec 0e       	add	r14, r28
    1f08:	fd 1e       	adc	r15, r29
    1f0a:	ea e0       	ldi	r30, 0x0A	; 10
    1f0c:	ce 2e       	mov	r12, r30
    1f0e:	d1 2c       	mov	r13, r1
    1f10:	cc 0e       	add	r12, r28
    1f12:	dd 1e       	adc	r13, r29
    1f14:	5e 01       	movw	r10, r28
    1f16:	08 94       	sec
    1f18:	a1 1c       	adc	r10, r1
    1f1a:	b1 1c       	adc	r11, r1
    1f1c:	0e 94 0a 07 	call	0xe14	; 0xe14 <init_action>
				if(state == MOVEC1){
    1f20:	68 e0       	ldi	r22, 0x08	; 8
    1f22:	86 16       	cp	r8, r22
    1f24:	91 04       	cpc	r9, r1
    1f26:	49 f4       	brne	.+18     	; 0x1f3a <main+0xf9e>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1f28:	80 91 83 04 	lds	r24, 0x0483
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1f2c:	21 e0       	ldi	r18, 0x01	; 1
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	3d 83       	std	Y+5, r19	; 0x05
    1f32:	2c 83       	std	Y+4, r18	; 0x04
    1f34:	80 63       	ori	r24, 0x30	; 48
    1f36:	80 93 83 04 	sts	0x0483, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1f3a:	c4 01       	movw	r24, r8
    1f3c:	b3 01       	movw	r22, r6
    1f3e:	ae 01       	movw	r20, r28
    1f40:	4e 5f       	subi	r20, 0xFE	; 254
    1f42:	5f 4f       	sbci	r21, 0xFF	; 255
    1f44:	9e 01       	movw	r18, r28
    1f46:	2c 5f       	subi	r18, 0xFC	; 252
    1f48:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4a:	8e 01       	movw	r16, r28
    1f4c:	0a 5f       	subi	r16, 0xFA	; 250
    1f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f50:	b8 e0       	ldi	r27, 0x08	; 8
    1f52:	eb 2e       	mov	r14, r27
    1f54:	f1 2c       	mov	r15, r1
    1f56:	ec 0e       	add	r14, r28
    1f58:	fd 1e       	adc	r15, r29
    1f5a:	aa e0       	ldi	r26, 0x0A	; 10
    1f5c:	ca 2e       	mov	r12, r26
    1f5e:	d1 2c       	mov	r13, r1
    1f60:	cc 0e       	add	r12, r28
    1f62:	dd 1e       	adc	r13, r29
    1f64:	0e 94 de 01 	call	0x3bc	; 0x3bc <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1f68:	c4 01       	movw	r24, r8
    1f6a:	b3 01       	movw	r22, r6
    1f6c:	ae 01       	movw	r20, r28
    1f6e:	4e 5f       	subi	r20, 0xFE	; 254
    1f70:	5f 4f       	sbci	r21, 0xFF	; 255
    1f72:	9e 01       	movw	r18, r28
    1f74:	2c 5f       	subi	r18, 0xFC	; 252
    1f76:	3f 4f       	sbci	r19, 0xFF	; 255
    1f78:	8e 01       	movw	r16, r28
    1f7a:	0a 5f       	subi	r16, 0xFA	; 250
    1f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7e:	f8 e0       	ldi	r31, 0x08	; 8
    1f80:	ef 2e       	mov	r14, r31
    1f82:	f1 2c       	mov	r15, r1
    1f84:	ec 0e       	add	r14, r28
    1f86:	fd 1e       	adc	r15, r29
    1f88:	ea e0       	ldi	r30, 0x0A	; 10
    1f8a:	ce 2e       	mov	r12, r30
    1f8c:	d1 2c       	mov	r13, r1
    1f8e:	cc 0e       	add	r12, r28
    1f90:	dd 1e       	adc	r13, r29
    1f92:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <dry_action>
				if(state == END){
    1f96:	37 e2       	ldi	r19, 0x27	; 39
    1f98:	83 16       	cp	r8, r19
    1f9a:	91 04       	cpc	r9, r1
    1f9c:	71 f4       	brne	.+28     	; 0x1fba <main+0x101e>
					plateLoadMotor = 0;
    1f9e:	1b 82       	std	Y+3, r1	; 0x03
    1fa0:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1fa2:	80 91 83 04 	lds	r24, 0x0483
    1fa6:	8b 7f       	andi	r24, 0xFB	; 251
    1fa8:	80 93 83 04 	sts	0x0483, r24
					if(print35 == 1){
    1fac:	22 20       	and	r2, r2
    1fae:	29 f0       	breq	.+10     	; 0x1fba <main+0x101e>
						//clear();
						serial_print_string("END OF CYCLE");
    1fb0:	85 ea       	ldi	r24, 0xA5	; 165
    1fb2:	93 e0       	ldi	r25, 0x03	; 3
    1fb4:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
    1fb8:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1fba:	2a 81       	ldd	r18, Y+2	; 0x02
    1fbc:	3b 81       	ldd	r19, Y+3	; 0x03
    1fbe:	0c 81       	ldd	r16, Y+4	; 0x04
    1fc0:	1d 81       	ldd	r17, Y+5	; 0x05
    1fc2:	ee 80       	ldd	r14, Y+6	; 0x06
    1fc4:	ff 80       	ldd	r15, Y+7	; 0x07
    1fc6:	c8 84       	ldd	r12, Y+8	; 0x08
    1fc8:	d9 84       	ldd	r13, Y+9	; 0x09
    1fca:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fcc:	bb 84       	ldd	r11, Y+11	; 0x0b
    1fce:	c3 01       	movw	r24, r6
    1fd0:	b2 01       	movw	r22, r4
    1fd2:	4e 85       	ldd	r20, Y+14	; 0x0e
    1fd4:	5f 85       	ldd	r21, Y+15	; 0x0f
    1fd6:	0e 94 32 06 	call	0xc64	; 0xc64 <motor_and_write>

				serial_check(); counter++;
    1fda:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <serial_check>
				delay_ms(1);
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>

		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("SECOND B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1fe6:	68 e2       	ldi	r22, 0x28	; 40
    1fe8:	86 16       	cp	r8, r22
    1fea:	91 04       	cpc	r9, r1
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <main+0x1054>
    1fee:	f9 c2       	rjmp	.+1522   	; 0x25e2 <main+0x1646>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1ff0:	08 94       	sec
    1ff2:	61 1c       	adc	r6, r1
    1ff4:	71 1c       	adc	r7, r1
    1ff6:	fa ce       	rjmp	.-524    	; 0x1dec <main+0xe50>
				delay_ms(1);
   		 	}
		}


		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    1ffe:	88 23       	and	r24, r24
    2000:	09 f0       	breq	.+2      	; 0x2004 <main+0x1068>
    2002:	7e c1       	rjmp	.+764    	; 0x2300 <main+0x1364>
    2004:	82 e0       	ldi	r24, 0x02	; 2
    2006:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    200a:	88 23       	and	r24, r24
    200c:	09 f4       	brne	.+2      	; 0x2010 <main+0x1074>
    200e:	78 c1       	rjmp	.+752    	; 0x2300 <main+0x1364>
			lcd_goto_xy(7,0);
    2010:	87 e0       	ldi	r24, 0x07	; 7
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
			serial_print_string("BOTH B");
    2018:	8b eb       	ldi	r24, 0xBB	; 187
    201a:	93 e0       	ldi	r25, 0x03	; 3
    201c:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	9d 83       	std	Y+5, r25	; 0x05
    2026:	8c 83       	std	Y+4, r24	; 0x04
    2028:	80 91 83 04 	lds	r24, 0x0483
    202c:	80 62       	ori	r24, 0x20	; 32
    202e:	80 93 83 04 	sts	0x0483, r24
    2032:	66 24       	eor	r6, r6
    2034:	77 24       	eor	r7, r7
    2036:	44 24       	eor	r4, r4
    2038:	55 24       	eor	r5, r5
    203a:	1e 8a       	std	Y+22, r1	; 0x16
    203c:	1d 8a       	std	Y+21, r1	; 0x15
    203e:	22 24       	eor	r2, r2
    2040:	23 94       	inc	r2
    2042:	33 24       	eor	r3, r3
    2044:	33 94       	inc	r3
    2046:	88 24       	eor	r8, r8
    2048:	99 24       	eor	r9, r9
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    204a:	84 e4       	ldi	r24, 0x44	; 68
    204c:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2056:	85 e4       	ldi	r24, 0x45	; 69
    2058:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    205c:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    2060:	80 93 7e 04 	sts	0x047E, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2064:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    2068:	80 93 81 04 	sts	0x0481, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    206c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    2070:	81 14       	cp	r8, r1
    2072:	91 04       	cpc	r9, r1
    2074:	d1 f0       	breq	.+52     	; 0x20aa <main+0x110e>
    2076:	33 20       	and	r3, r3
    2078:	c1 f0       	breq	.+48     	; 0x20aa <main+0x110e>
					lcd_goto_xy(6,1);
    207a:	86 e0       	ldi	r24, 0x06	; 6
    207c:	61 e0       	ldi	r22, 0x01	; 1
    207e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
					serial_print_string("       ");
    2082:	82 ec       	ldi	r24, 0xC2	; 194
    2084:	93 e0       	ldi	r25, 0x03	; 3
    2086:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
					lcd_goto_xy(0,1);
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	61 e0       	ldi	r22, 0x01	; 1
    208e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
					serial_print_string("STATE ");
    2092:	8e e9       	ldi	r24, 0x9E	; 158
    2094:	93 e0       	ldi	r25, 0x03	; 3
    2096:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
					serial_print_int(state);
    209a:	c4 01       	movw	r24, r8
    209c:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
					if(state != B2SET1)
    20a0:	73 e1       	ldi	r23, 0x13	; 19
    20a2:	87 16       	cp	r8, r23
    20a4:	91 04       	cpc	r9, r1
    20a6:	09 f0       	breq	.+2      	; 0x20aa <main+0x110e>
    20a8:	33 24       	eor	r3, r3
						printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    20aa:	c3 01       	movw	r24, r6
    20ac:	be 01       	movw	r22, r28
    20ae:	64 5f       	subi	r22, 0xF4	; 244
    20b0:	7f 4f       	sbci	r23, 0xFF	; 255
    20b2:	0e 94 30 03 	call	0x660	; 0x660 <button_debounce>
    20b6:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    20b8:	c4 01       	movw	r24, r8
    20ba:	a3 01       	movw	r20, r6
    20bc:	92 01       	movw	r18, r4
    20be:	0e 94 8f 03 	call	0x71e	; 0x71e <init_trans>
    20c2:	88 23       	and	r24, r24
    20c4:	31 f0       	breq	.+12     	; 0x20d2 <main+0x1136>
					buttonTriggered = false;
					state ++;
    20c6:	08 94       	sec
    20c8:	81 1c       	adc	r8, r1
    20ca:	91 1c       	adc	r9, r1
    20cc:	23 01       	movw	r4, r6
    20ce:	33 24       	eor	r3, r3
    20d0:	33 94       	inc	r3
					printVar = true;
				}

				
				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    20d2:	c4 01       	movw	r24, r8
    20d4:	b3 01       	movw	r22, r6
    20d6:	a2 01       	movw	r20, r4
    20d8:	0e 94 16 04 	call	0x82c	; 0x82c <firstB_trans>
    20dc:	88 23       	and	r24, r24
    20de:	71 f0       	breq	.+28     	; 0x20fc <main+0x1160>
					state ++;
    20e0:	08 94       	sec
    20e2:	81 1c       	adc	r8, r1
    20e4:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    20e6:	8c e0       	ldi	r24, 0x0C	; 12
    20e8:	88 16       	cp	r8, r24
    20ea:	91 04       	cpc	r9, r1
    20ec:	e1 f0       	breq	.+56     	; 0x2126 <main+0x118a>
    20ee:	90 e1       	ldi	r25, 0x10	; 16
    20f0:	89 16       	cp	r8, r25
    20f2:	91 04       	cpc	r9, r1
    20f4:	c1 f0       	breq	.+48     	; 0x2126 <main+0x118a>
    20f6:	23 01       	movw	r4, r6
    20f8:	33 24       	eor	r3, r3
    20fa:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    20fc:	21 e1       	ldi	r18, 0x11	; 17
    20fe:	82 16       	cp	r8, r18
    2100:	91 04       	cpc	r9, r1
    2102:	99 f4       	brne	.+38     	; 0x212a <main+0x118e>
    2104:	93 01       	movw	r18, r6
    2106:	24 19       	sub	r18, r4
    2108:	35 09       	sbc	r19, r5
    210a:	80 91 e0 03 	lds	r24, 0x03E0
    210e:	90 91 e1 03 	lds	r25, 0x03E1
    2112:	82 17       	cp	r24, r18
    2114:	93 07       	cpc	r25, r19
    2116:	4c f4       	brge	.+18     	; 0x212a <main+0x118e>
    2118:	23 01       	movw	r4, r6
    211a:	33 24       	eor	r3, r3
    211c:	33 94       	inc	r3
    211e:	02 e1       	ldi	r16, 0x12	; 18
    2120:	80 2e       	mov	r8, r16
    2122:	91 2c       	mov	r9, r1
    2124:	02 c0       	rjmp	.+4      	; 0x212a <main+0x118e>
    2126:	33 24       	eor	r3, r3
    2128:	33 94       	inc	r3
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    212a:	c4 01       	movw	r24, r8
    212c:	b3 01       	movw	r22, r6
    212e:	a2 01       	movw	r20, r4
    2130:	0e 94 b6 04 	call	0x96c	; 0x96c <secondB_trans>
    2134:	88 23       	and	r24, r24
    2136:	31 f0       	breq	.+12     	; 0x2144 <main+0x11a8>
					state ++;
    2138:	08 94       	sec
    213a:	81 1c       	adc	r8, r1
    213c:	91 1c       	adc	r9, r1
    213e:	23 01       	movw	r4, r6
    2140:	33 24       	eor	r3, r3
    2142:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    2144:	c4 01       	movw	r24, r8
    2146:	b3 01       	movw	r22, r6
    2148:	a2 01       	movw	r20, r4
    214a:	2d 89       	ldd	r18, Y+21	; 0x15
    214c:	3e 89       	ldd	r19, Y+22	; 0x16
    214e:	0e 94 64 05 	call	0xac8	; 0xac8 <dry_trans>
    2152:	88 23       	and	r24, r24
    2154:	79 f0       	breq	.+30     	; 0x2174 <main+0x11d8>
					state ++;
    2156:	08 94       	sec
    2158:	81 1c       	adc	r8, r1
    215a:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    215c:	3f e1       	ldi	r19, 0x1F	; 31
    215e:	83 16       	cp	r8, r19
    2160:	91 04       	cpc	r9, r1
    2162:	29 f4       	brne	.+10     	; 0x216e <main+0x11d2>
    2164:	7e 8a       	std	Y+22, r7	; 0x16
    2166:	6d 8a       	std	Y+21, r6	; 0x15
    2168:	33 24       	eor	r3, r3
    216a:	33 94       	inc	r3
    216c:	0f c0       	rjmp	.+30     	; 0x218c <main+0x11f0>
    216e:	23 01       	movw	r4, r6
    2170:	33 24       	eor	r3, r3
    2172:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    2174:	67 e2       	ldi	r22, 0x27	; 39
    2176:	86 16       	cp	r8, r22
    2178:	91 04       	cpc	r9, r1
    217a:	41 f4       	brne	.+16     	; 0x218c <main+0x11f0>
    217c:	c3 01       	movw	r24, r6
    217e:	84 19       	sub	r24, r4
    2180:	95 09       	sbc	r25, r5
    2182:	0b 97       	sbiw	r24, 0x0b	; 11
    2184:	1c f0       	brlt	.+6      	; 0x218c <main+0x11f0>
    2186:	18 e2       	ldi	r17, 0x28	; 40
    2188:	81 2e       	mov	r8, r17
    218a:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    218c:	c4 01       	movw	r24, r8
    218e:	b3 01       	movw	r22, r6
    2190:	ae 01       	movw	r20, r28
    2192:	4e 5f       	subi	r20, 0xFE	; 254
    2194:	5f 4f       	sbci	r21, 0xFF	; 255
    2196:	9e 01       	movw	r18, r28
    2198:	2c 5f       	subi	r18, 0xFC	; 252
    219a:	3f 4f       	sbci	r19, 0xFF	; 255
    219c:	8e 01       	movw	r16, r28
    219e:	0a 5f       	subi	r16, 0xFA	; 250
    21a0:	1f 4f       	sbci	r17, 0xFF	; 255
    21a2:	b8 e0       	ldi	r27, 0x08	; 8
    21a4:	eb 2e       	mov	r14, r27
    21a6:	f1 2c       	mov	r15, r1
    21a8:	ec 0e       	add	r14, r28
    21aa:	fd 1e       	adc	r15, r29
    21ac:	aa e0       	ldi	r26, 0x0A	; 10
    21ae:	ca 2e       	mov	r12, r26
    21b0:	d1 2c       	mov	r13, r1
    21b2:	cc 0e       	add	r12, r28
    21b4:	dd 1e       	adc	r13, r29
    21b6:	5e 01       	movw	r10, r28
    21b8:	08 94       	sec
    21ba:	a1 1c       	adc	r10, r1
    21bc:	b1 1c       	adc	r11, r1
    21be:	0e 94 0a 07 	call	0xe14	; 0xe14 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    21c2:	c4 01       	movw	r24, r8
    21c4:	b3 01       	movw	r22, r6
    21c6:	ae 01       	movw	r20, r28
    21c8:	4e 5f       	subi	r20, 0xFE	; 254
    21ca:	5f 4f       	sbci	r21, 0xFF	; 255
    21cc:	9e 01       	movw	r18, r28
    21ce:	2c 5f       	subi	r18, 0xFC	; 252
    21d0:	3f 4f       	sbci	r19, 0xFF	; 255
    21d2:	8e 01       	movw	r16, r28
    21d4:	0a 5f       	subi	r16, 0xFA	; 250
    21d6:	1f 4f       	sbci	r17, 0xFF	; 255
    21d8:	f8 e0       	ldi	r31, 0x08	; 8
    21da:	ef 2e       	mov	r14, r31
    21dc:	f1 2c       	mov	r15, r1
    21de:	ec 0e       	add	r14, r28
    21e0:	fd 1e       	adc	r15, r29
    21e2:	ea e0       	ldi	r30, 0x0A	; 10
    21e4:	ce 2e       	mov	r12, r30
    21e6:	d1 2c       	mov	r13, r1
    21e8:	cc 0e       	add	r12, r28
    21ea:	dd 1e       	adc	r13, r29
    21ec:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    21f0:	71 e1       	ldi	r23, 0x11	; 17
    21f2:	87 16       	cp	r8, r23
    21f4:	91 04       	cpc	r9, r1
    21f6:	81 f4       	brne	.+32     	; 0x2218 <main+0x127c>
					brush1Motor = 0;
    21f8:	1f 82       	std	Y+7, r1	; 0x07
    21fa:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    21fc:	1d 82       	std	Y+5, r1	; 0x05
    21fe:	1c 82       	std	Y+4, r1	; 0x04
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    2200:	80 91 7f 04 	lds	r24, 0x047F
    2204:	8e 7f       	andi	r24, 0xFE	; 254
    2206:	80 93 7f 04 	sts	0x047F, r24
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    220a:	80 91 82 04 	lds	r24, 0x0482
    220e:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2210:	80 62       	ori	r24, 0x20	; 32
    2212:	80 93 82 04 	sts	0x0482, r24
    2216:	0a c0       	rjmp	.+20     	; 0x222c <main+0x1290>
				}
				if(state == B2SET1 && printVar){
    2218:	83 e1       	ldi	r24, 0x13	; 19
    221a:	88 16       	cp	r8, r24
    221c:	91 04       	cpc	r9, r1
    221e:	31 f4       	brne	.+12     	; 0x222c <main+0x1290>
    2220:	33 20       	and	r3, r3
    2222:	21 f0       	breq	.+8      	; 0x222c <main+0x1290>
					serial_print_string("B2SET1 1");
    2224:	8a ec       	ldi	r24, 0xCA	; 202
    2226:	93 e0       	ldi	r25, 0x03	; 3
    2228:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
				}
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    222c:	c4 01       	movw	r24, r8
    222e:	b3 01       	movw	r22, r6
    2230:	ae 01       	movw	r20, r28
    2232:	4e 5f       	subi	r20, 0xFE	; 254
    2234:	5f 4f       	sbci	r21, 0xFF	; 255
    2236:	9e 01       	movw	r18, r28
    2238:	2c 5f       	subi	r18, 0xFC	; 252
    223a:	3f 4f       	sbci	r19, 0xFF	; 255
    223c:	8e 01       	movw	r16, r28
    223e:	0a 5f       	subi	r16, 0xFA	; 250
    2240:	1f 4f       	sbci	r17, 0xFF	; 255
    2242:	b8 e0       	ldi	r27, 0x08	; 8
    2244:	eb 2e       	mov	r14, r27
    2246:	f1 2c       	mov	r15, r1
    2248:	ec 0e       	add	r14, r28
    224a:	fd 1e       	adc	r15, r29
    224c:	aa e0       	ldi	r26, 0x0A	; 10
    224e:	ca 2e       	mov	r12, r26
    2250:	d1 2c       	mov	r13, r1
    2252:	cc 0e       	add	r12, r28
    2254:	dd 1e       	adc	r13, r29
    2256:	0e 94 de 01 	call	0x3bc	; 0x3bc <brush2_action>
				if(state == B2SET1 && printVar){
    225a:	93 e1       	ldi	r25, 0x13	; 19
    225c:	89 16       	cp	r8, r25
    225e:	91 04       	cpc	r9, r1
    2260:	39 f4       	brne	.+14     	; 0x2270 <main+0x12d4>
    2262:	33 20       	and	r3, r3
    2264:	29 f0       	breq	.+10     	; 0x2270 <main+0x12d4>
					serial_print_string("B2SET1 2");
    2266:	83 ed       	ldi	r24, 0xD3	; 211
    2268:	93 e0       	ldi	r25, 0x03	; 3
    226a:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
    226e:	33 24       	eor	r3, r3
					printVar = false;
				}
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2270:	c4 01       	movw	r24, r8
    2272:	b3 01       	movw	r22, r6
    2274:	ae 01       	movw	r20, r28
    2276:	4e 5f       	subi	r20, 0xFE	; 254
    2278:	5f 4f       	sbci	r21, 0xFF	; 255
    227a:	9e 01       	movw	r18, r28
    227c:	2c 5f       	subi	r18, 0xFC	; 252
    227e:	3f 4f       	sbci	r19, 0xFF	; 255
    2280:	8e 01       	movw	r16, r28
    2282:	0a 5f       	subi	r16, 0xFA	; 250
    2284:	1f 4f       	sbci	r17, 0xFF	; 255
    2286:	f8 e0       	ldi	r31, 0x08	; 8
    2288:	ef 2e       	mov	r14, r31
    228a:	f1 2c       	mov	r15, r1
    228c:	ec 0e       	add	r14, r28
    228e:	fd 1e       	adc	r15, r29
    2290:	ea e0       	ldi	r30, 0x0A	; 10
    2292:	ce 2e       	mov	r12, r30
    2294:	d1 2c       	mov	r13, r1
    2296:	cc 0e       	add	r12, r28
    2298:	dd 1e       	adc	r13, r29
    229a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <dry_action>
				if(state == END){
    229e:	27 e2       	ldi	r18, 0x27	; 39
    22a0:	82 16       	cp	r8, r18
    22a2:	91 04       	cpc	r9, r1
    22a4:	71 f4       	brne	.+28     	; 0x22c2 <main+0x1326>
					plateLoadMotor = 0;
    22a6:	1b 82       	std	Y+3, r1	; 0x03
    22a8:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    22aa:	80 91 83 04 	lds	r24, 0x0483
    22ae:	8b 7f       	andi	r24, 0xFB	; 251
    22b0:	80 93 83 04 	sts	0x0483, r24
					if(print35 == 1){
    22b4:	22 20       	and	r2, r2
    22b6:	29 f0       	breq	.+10     	; 0x22c2 <main+0x1326>
						//clear();
						serial_print_string("END OF CYCLE");
    22b8:	85 ea       	ldi	r24, 0xA5	; 165
    22ba:	93 e0       	ldi	r25, 0x03	; 3
    22bc:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
    22c0:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    22c2:	2a 81       	ldd	r18, Y+2	; 0x02
    22c4:	3b 81       	ldd	r19, Y+3	; 0x03
    22c6:	0c 81       	ldd	r16, Y+4	; 0x04
    22c8:	1d 81       	ldd	r17, Y+5	; 0x05
    22ca:	ee 80       	ldd	r14, Y+6	; 0x06
    22cc:	ff 80       	ldd	r15, Y+7	; 0x07
    22ce:	c8 84       	ldd	r12, Y+8	; 0x08
    22d0:	d9 84       	ldd	r13, Y+9	; 0x09
    22d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    22d4:	bb 84       	ldd	r11, Y+11	; 0x0b
    22d6:	c3 01       	movw	r24, r6
    22d8:	b2 01       	movw	r22, r4
    22da:	4d 89       	ldd	r20, Y+21	; 0x15
    22dc:	5e 89       	ldd	r21, Y+22	; 0x16
    22de:	0e 94 32 06 	call	0xc64	; 0xc64 <motor_and_write>

				serial_check(); counter++;
    22e2:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <serial_check>
				delay_ms(1);
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>

		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("BOTH B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    22ee:	38 e2       	ldi	r19, 0x28	; 40
    22f0:	83 16       	cp	r8, r19
    22f2:	91 04       	cpc	r9, r1
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <main+0x135c>
    22f6:	75 c1       	rjmp	.+746    	; 0x25e2 <main+0x1646>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    22f8:	08 94       	sec
    22fa:	61 1c       	adc	r6, r1
    22fc:	71 1c       	adc	r7, r1
    22fe:	a5 ce       	rjmp	.-694    	; 0x204a <main+0x10ae>
				delay_ms(1);
   		 	}
		}

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    2306:	88 23       	and	r24, r24
    2308:	09 f4       	brne	.+2      	; 0x230c <main+0x1370>
    230a:	6b c1       	rjmp	.+726    	; 0x25e2 <main+0x1646>
    230c:	82 e0       	ldi	r24, 0x02	; 2
    230e:	0e 94 18 01 	call	0x230	; 0x230 <is_digital_input_high>
    2312:	88 23       	and	r24, r24
    2314:	09 f4       	brne	.+2      	; 0x2318 <main+0x137c>
    2316:	65 c1       	rjmp	.+714    	; 0x25e2 <main+0x1646>
			lcd_goto_xy(7,0);
    2318:	87 e0       	ldi	r24, 0x07	; 7
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
			serial_print_string("DEBUG");
    2320:	8a ea       	ldi	r24, 0xAA	; 170
    2322:	91 e0       	ldi	r25, 0x01	; 1
    2324:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	9d 83       	std	Y+5, r25	; 0x05
    232e:	8c 83       	std	Y+4, r24	; 0x04
    2330:	80 91 83 04 	lds	r24, 0x0483
    2334:	80 62       	ori	r24, 0x20	; 32
    2336:	80 93 83 04 	sts	0x0483, r24
    233a:	66 24       	eor	r6, r6
    233c:	77 24       	eor	r7, r7
    233e:	1a 8e       	std	Y+26, r1	; 0x1a
    2340:	19 8e       	std	Y+25, r1	; 0x19
    2342:	44 24       	eor	r4, r4
    2344:	55 24       	eor	r5, r5
    2346:	22 24       	eor	r2, r2
    2348:	23 94       	inc	r2
    234a:	33 24       	eor	r3, r3
    234c:	33 94       	inc	r3
    234e:	88 24       	eor	r8, r8
    2350:	99 24       	eor	r9, r9
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    2352:	84 e4       	ldi	r24, 0x44	; 68
    2354:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				i2c_write(0x0);								// write command byte
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    235e:	85 e4       	ldi	r24, 0x45	; 69
    2360:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    2364:	0e 94 04 01 	call	0x208	; 0x208 <i2c_readAck>
    2368:	80 93 7e 04 	sts	0x047E, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    236c:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_readNak>
    2370:	80 93 81 04 	sts	0x0481, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    2374:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
				
				if(state != INIT && printVar){
    2378:	81 14       	cp	r8, r1
    237a:	91 04       	cpc	r9, r1
    237c:	b1 f0       	breq	.+44     	; 0x23aa <main+0x140e>
    237e:	33 20       	and	r3, r3
    2380:	a1 f0       	breq	.+40     	; 0x23aa <main+0x140e>
					lcd_goto_xy(6,1);
    2382:	86 e0       	ldi	r24, 0x06	; 6
    2384:	61 e0       	ldi	r22, 0x01	; 1
    2386:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
					serial_print_string("     ");
    238a:	88 e9       	ldi	r24, 0x98	; 152
    238c:	93 e0       	ldi	r25, 0x03	; 3
    238e:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
					lcd_goto_xy(0,1);
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	61 e0       	ldi	r22, 0x01	; 1
    2396:	0e 94 e5 14 	call	0x29ca	; 0x29ca <lcd_goto_xy>
					serial_print_string("STATE ");
    239a:	8e e9       	ldi	r24, 0x9E	; 158
    239c:	93 e0       	ldi	r25, 0x03	; 3
    239e:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
					serial_print_int(state);
    23a2:	c4 01       	movw	r24, r8
    23a4:	0e 94 b0 07 	call	0xf60	; 0xf60 <serial_print_int>
    23a8:	33 24       	eor	r3, r3
					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    23aa:	c3 01       	movw	r24, r6
    23ac:	be 01       	movw	r22, r28
    23ae:	64 5f       	subi	r22, 0xF4	; 244
    23b0:	7f 4f       	sbci	r23, 0xFF	; 255
    23b2:	0e 94 30 03 	call	0x660	; 0x660 <button_debounce>
    23b6:	18 2f       	mov	r17, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    23b8:	c4 01       	movw	r24, r8
    23ba:	61 2f       	mov	r22, r17
    23bc:	a3 01       	movw	r20, r6
    23be:	92 01       	movw	r18, r4
    23c0:	0e 94 8f 03 	call	0x71e	; 0x71e <init_trans>
    23c4:	88 23       	and	r24, r24
    23c6:	39 f0       	breq	.+14     	; 0x23d6 <main+0x143a>
    23c8:	23 01       	movw	r4, r6
    23ca:	10 e0       	ldi	r17, 0x00	; 0
    23cc:	33 24       	eor	r3, r3
    23ce:	33 94       	inc	r3
    23d0:	39 e2       	ldi	r19, 0x29	; 41
    23d2:	83 2e       	mov	r8, r19
    23d4:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    23d6:	c4 01       	movw	r24, r8
    23d8:	b3 01       	movw	r22, r6
    23da:	a2 01       	movw	r20, r4
    23dc:	0e 94 16 04 	call	0x82c	; 0x82c <firstB_trans>
    23e0:	88 23       	and	r24, r24
    23e2:	71 f4       	brne	.+28     	; 0x2400 <main+0x1464>
					state = WAIT;
					if(state != B1STOP1 && state != CLEAN1_3)
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    23e4:	61 e1       	ldi	r22, 0x11	; 17
    23e6:	86 16       	cp	r8, r22
    23e8:	91 04       	cpc	r9, r1
    23ea:	81 f4       	brne	.+32     	; 0x240c <main+0x1470>
    23ec:	93 01       	movw	r18, r6
    23ee:	24 19       	sub	r18, r4
    23f0:	35 09       	sbc	r19, r5
    23f2:	80 91 e0 03 	lds	r24, 0x03E0
    23f6:	90 91 e1 03 	lds	r25, 0x03E1
    23fa:	82 17       	cp	r24, r18
    23fc:	93 07       	cpc	r25, r19
    23fe:	34 f4       	brge	.+12     	; 0x240c <main+0x1470>
    2400:	23 01       	movw	r4, r6
    2402:	33 24       	eor	r3, r3
    2404:	33 94       	inc	r3
    2406:	29 e2       	ldi	r18, 0x29	; 41
    2408:	82 2e       	mov	r8, r18
    240a:	91 2c       	mov	r9, r1
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    240c:	c4 01       	movw	r24, r8
    240e:	b3 01       	movw	r22, r6
    2410:	a2 01       	movw	r20, r4
    2412:	0e 94 b6 04 	call	0x96c	; 0x96c <secondB_trans>
    2416:	88 23       	and	r24, r24
    2418:	31 f0       	breq	.+12     	; 0x2426 <main+0x148a>
    241a:	23 01       	movw	r4, r6
    241c:	33 24       	eor	r3, r3
    241e:	33 94       	inc	r3
    2420:	99 e2       	ldi	r25, 0x29	; 41
    2422:	89 2e       	mov	r8, r25
    2424:	91 2c       	mov	r9, r1
					counterRef = counter;
					printVar = true;
				}
				
				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    2426:	c4 01       	movw	r24, r8
    2428:	b3 01       	movw	r22, r6
    242a:	a2 01       	movw	r20, r4
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	0e 94 64 05 	call	0xac8	; 0xac8 <dry_trans>
    2434:	88 23       	and	r24, r24
    2436:	21 f0       	breq	.+8      	; 0x2440 <main+0x14a4>
    2438:	23 01       	movw	r4, r6
    243a:	33 24       	eor	r3, r3
    243c:	33 94       	inc	r3
    243e:	11 c0       	rjmp	.+34     	; 0x2462 <main+0x14c6>
					if(state == D1STOP)
						counterRefFive = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    2440:	77 e2       	ldi	r23, 0x27	; 39
    2442:	87 16       	cp	r8, r23
    2444:	91 04       	cpc	r9, r1
    2446:	49 f4       	brne	.+18     	; 0x245a <main+0x14be>
    2448:	c3 01       	movw	r24, r6
    244a:	84 19       	sub	r24, r4
    244c:	95 09       	sbc	r25, r5
    244e:	0b 97       	sbiw	r24, 0x0b	; 11
    2450:	54 f1       	brlt	.+84     	; 0x24a6 <main+0x150a>
    2452:	88 e2       	ldi	r24, 0x28	; 40
    2454:	88 2e       	mov	r8, r24
    2456:	91 2c       	mov	r9, r1
    2458:	26 c0       	rjmp	.+76     	; 0x24a6 <main+0x150a>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    245a:	89 e2       	ldi	r24, 0x29	; 41
    245c:	88 16       	cp	r8, r24
    245e:	91 04       	cpc	r9, r1
    2460:	11 f5       	brne	.+68     	; 0x24a6 <main+0x150a>
    2462:	11 23       	and	r17, r17
    2464:	21 f4       	brne	.+8      	; 0x246e <main+0x14d2>
    2466:	09 e2       	ldi	r16, 0x29	; 41
    2468:	80 2e       	mov	r8, r16
    246a:	91 2c       	mov	r9, r1
    246c:	12 c0       	rjmp	.+36     	; 0x2492 <main+0x14f6>
					state = ++last;
    246e:	29 8d       	ldd	r18, Y+25	; 0x19
    2470:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2472:	2f 5f       	subi	r18, 0xFF	; 255
    2474:	3f 4f       	sbci	r19, 0xFF	; 255
    2476:	3a 8f       	std	Y+26, r19	; 0x1a
    2478:	29 8f       	std	Y+25, r18	; 0x19
				}


				//state actions
						
				if(state == WAIT){
    247a:	29 32       	cpi	r18, 0x29	; 41
    247c:	31 05       	cpc	r19, r1
    247e:	21 f0       	breq	.+8      	; 0x2488 <main+0x14ec>
    2480:	49 01       	movw	r8, r18
    2482:	33 24       	eor	r3, r3
    2484:	33 94       	inc	r3
    2486:	0f c0       	rjmp	.+30     	; 0x24a6 <main+0x150a>
    2488:	19 e2       	ldi	r17, 0x29	; 41
    248a:	81 2e       	mov	r8, r17
    248c:	91 2c       	mov	r9, r1
    248e:	33 24       	eor	r3, r3
    2490:	33 94       	inc	r3
					plateLoadMotor = 0;
    2492:	1b 82       	std	Y+3, r1	; 0x03
    2494:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    2496:	1d 82       	std	Y+5, r1	; 0x05
    2498:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    249a:	1f 82       	std	Y+7, r1	; 0x07
    249c:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    249e:	19 86       	std	Y+9, r1	; 0x09
    24a0:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    24a2:	1b 86       	std	Y+11, r1	; 0x0b
    24a4:	1a 86       	std	Y+10, r1	; 0x0a
				}
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    24a6:	c4 01       	movw	r24, r8
    24a8:	b3 01       	movw	r22, r6
    24aa:	ae 01       	movw	r20, r28
    24ac:	4e 5f       	subi	r20, 0xFE	; 254
    24ae:	5f 4f       	sbci	r21, 0xFF	; 255
    24b0:	9e 01       	movw	r18, r28
    24b2:	2c 5f       	subi	r18, 0xFC	; 252
    24b4:	3f 4f       	sbci	r19, 0xFF	; 255
    24b6:	8e 01       	movw	r16, r28
    24b8:	0a 5f       	subi	r16, 0xFA	; 250
    24ba:	1f 4f       	sbci	r17, 0xFF	; 255
    24bc:	b8 e0       	ldi	r27, 0x08	; 8
    24be:	eb 2e       	mov	r14, r27
    24c0:	f1 2c       	mov	r15, r1
    24c2:	ec 0e       	add	r14, r28
    24c4:	fd 1e       	adc	r15, r29
    24c6:	aa e0       	ldi	r26, 0x0A	; 10
    24c8:	ca 2e       	mov	r12, r26
    24ca:	d1 2c       	mov	r13, r1
    24cc:	cc 0e       	add	r12, r28
    24ce:	dd 1e       	adc	r13, r29
    24d0:	5e 01       	movw	r10, r28
    24d2:	08 94       	sec
    24d4:	a1 1c       	adc	r10, r1
    24d6:	b1 1c       	adc	r11, r1
    24d8:	0e 94 0a 07 	call	0xe14	; 0xe14 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    24dc:	c4 01       	movw	r24, r8
    24de:	b3 01       	movw	r22, r6
    24e0:	ae 01       	movw	r20, r28
    24e2:	4e 5f       	subi	r20, 0xFE	; 254
    24e4:	5f 4f       	sbci	r21, 0xFF	; 255
    24e6:	9e 01       	movw	r18, r28
    24e8:	2c 5f       	subi	r18, 0xFC	; 252
    24ea:	3f 4f       	sbci	r19, 0xFF	; 255
    24ec:	8e 01       	movw	r16, r28
    24ee:	0a 5f       	subi	r16, 0xFA	; 250
    24f0:	1f 4f       	sbci	r17, 0xFF	; 255
    24f2:	f8 e0       	ldi	r31, 0x08	; 8
    24f4:	ef 2e       	mov	r14, r31
    24f6:	f1 2c       	mov	r15, r1
    24f8:	ec 0e       	add	r14, r28
    24fa:	fd 1e       	adc	r15, r29
    24fc:	ea e0       	ldi	r30, 0x0A	; 10
    24fe:	ce 2e       	mov	r12, r30
    2500:	d1 2c       	mov	r13, r1
    2502:	cc 0e       	add	r12, r28
    2504:	dd 1e       	adc	r13, r29
    2506:	0e 94 5f 01 	call	0x2be	; 0x2be <brush1_action>
				if(state == B1STOP2){
    250a:	31 e1       	ldi	r19, 0x11	; 17
    250c:	83 16       	cp	r8, r19
    250e:	91 04       	cpc	r9, r1
    2510:	51 f4       	brne	.+20     	; 0x2526 <main+0x158a>
					brush1Motor = 0;
    2512:	1f 82       	std	Y+7, r1	; 0x07
    2514:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    2516:	1d 82       	std	Y+5, r1	; 0x05
    2518:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    251a:	80 91 82 04 	lds	r24, 0x0482
    251e:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2520:	80 62       	ori	r24, 0x20	; 32
    2522:	80 93 82 04 	sts	0x0482, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2526:	c4 01       	movw	r24, r8
    2528:	b3 01       	movw	r22, r6
    252a:	ae 01       	movw	r20, r28
    252c:	4e 5f       	subi	r20, 0xFE	; 254
    252e:	5f 4f       	sbci	r21, 0xFF	; 255
    2530:	9e 01       	movw	r18, r28
    2532:	2c 5f       	subi	r18, 0xFC	; 252
    2534:	3f 4f       	sbci	r19, 0xFF	; 255
    2536:	8e 01       	movw	r16, r28
    2538:	0a 5f       	subi	r16, 0xFA	; 250
    253a:	1f 4f       	sbci	r17, 0xFF	; 255
    253c:	b8 e0       	ldi	r27, 0x08	; 8
    253e:	eb 2e       	mov	r14, r27
    2540:	f1 2c       	mov	r15, r1
    2542:	ec 0e       	add	r14, r28
    2544:	fd 1e       	adc	r15, r29
    2546:	aa e0       	ldi	r26, 0x0A	; 10
    2548:	ca 2e       	mov	r12, r26
    254a:	d1 2c       	mov	r13, r1
    254c:	cc 0e       	add	r12, r28
    254e:	dd 1e       	adc	r13, r29
    2550:	0e 94 de 01 	call	0x3bc	; 0x3bc <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2554:	c4 01       	movw	r24, r8
    2556:	b3 01       	movw	r22, r6
    2558:	ae 01       	movw	r20, r28
    255a:	4e 5f       	subi	r20, 0xFE	; 254
    255c:	5f 4f       	sbci	r21, 0xFF	; 255
    255e:	9e 01       	movw	r18, r28
    2560:	2c 5f       	subi	r18, 0xFC	; 252
    2562:	3f 4f       	sbci	r19, 0xFF	; 255
    2564:	8e 01       	movw	r16, r28
    2566:	0a 5f       	subi	r16, 0xFA	; 250
    2568:	1f 4f       	sbci	r17, 0xFF	; 255
    256a:	f8 e0       	ldi	r31, 0x08	; 8
    256c:	ef 2e       	mov	r14, r31
    256e:	f1 2c       	mov	r15, r1
    2570:	ec 0e       	add	r14, r28
    2572:	fd 1e       	adc	r15, r29
    2574:	ea e0       	ldi	r30, 0x0A	; 10
    2576:	ce 2e       	mov	r12, r30
    2578:	d1 2c       	mov	r13, r1
    257a:	cc 0e       	add	r12, r28
    257c:	dd 1e       	adc	r13, r29
    257e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <dry_action>
				if(state == END){
    2582:	67 e2       	ldi	r22, 0x27	; 39
    2584:	86 16       	cp	r8, r22
    2586:	91 04       	cpc	r9, r1
    2588:	71 f4       	brne	.+28     	; 0x25a6 <main+0x160a>
					plateLoadMotor = 0;
    258a:	1b 82       	std	Y+3, r1	; 0x03
    258c:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    258e:	80 91 83 04 	lds	r24, 0x0483
    2592:	8b 7f       	andi	r24, 0xFB	; 251
    2594:	80 93 83 04 	sts	0x0483, r24
					if(print35 == 1){
    2598:	22 20       	and	r2, r2
    259a:	29 f0       	breq	.+10     	; 0x25a6 <main+0x160a>
						//clear();
						serial_print_string("END OF CYCLE");
    259c:	85 ea       	ldi	r24, 0xA5	; 165
    259e:	93 e0       	ldi	r25, 0x03	; 3
    25a0:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
    25a4:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    25a6:	2a 81       	ldd	r18, Y+2	; 0x02
    25a8:	3b 81       	ldd	r19, Y+3	; 0x03
    25aa:	0c 81       	ldd	r16, Y+4	; 0x04
    25ac:	1d 81       	ldd	r17, Y+5	; 0x05
    25ae:	ee 80       	ldd	r14, Y+6	; 0x06
    25b0:	ff 80       	ldd	r15, Y+7	; 0x07
    25b2:	c8 84       	ldd	r12, Y+8	; 0x08
    25b4:	d9 84       	ldd	r13, Y+9	; 0x09
    25b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    25b8:	bb 84       	ldd	r11, Y+11	; 0x0b
    25ba:	c3 01       	movw	r24, r6
    25bc:	b2 01       	movw	r22, r4
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	0e 94 32 06 	call	0xc64	; 0xc64 <motor_and_write>

				serial_check(); counter++;
    25c6:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <serial_check>
				delay_ms(1);
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    25d2:	78 e2       	ldi	r23, 0x28	; 40
    25d4:	87 16       	cp	r8, r23
    25d6:	91 04       	cpc	r9, r1
    25d8:	21 f0       	breq	.+8      	; 0x25e2 <main+0x1646>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    25da:	08 94       	sec
    25dc:	61 1c       	adc	r6, r1
    25de:	71 1c       	adc	r7, r1
    25e0:	b8 ce       	rjmp	.-656    	; 0x2352 <main+0x13b6>
				delay_ms(1);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    25e2:	80 91 83 04 	lds	r24, 0x0483
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    25e6:	8b 7d       	andi	r24, 0xDB	; 219
    25e8:	80 93 83 04 	sts	0x0483, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    25ec:	80 91 7f 04 	lds	r24, 0x047F
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    25f0:	86 7b       	andi	r24, 0xB6	; 182
    25f2:	80 93 7f 04 	sts	0x047F, r24
		
		i2c_start(I2C1+I2C_WRITE);
    25f6:	80 e4       	ldi	r24, 0x40	; 64
    25f8:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start>
		i2c_write(0x2);
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    2602:	80 91 83 04 	lds	r24, 0x0483
    2606:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    260a:	80 91 7f 04 	lds	r24, 0x047F
    260e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_write>
		i2c_stop();
    2612:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <i2c_stop>
	}
	serial_print_string("END");
    2616:	8c ed       	ldi	r24, 0xDC	; 220
    2618:	93 e0       	ldi	r25, 0x03	; 3
    261a:	0e 94 f4 06 	call	0xde8	; 0xde8 <serial_print_string>
    261e:	0c 94 ed 07 	jmp	0xfda	; 0xfda <main+0x3e>
	}
    2622:	8f ef       	ldi	r24, 0xFF	; 255
    2624:	9f ef       	ldi	r25, 0xFF	; 255
    2626:	98 8f       	std	Y+24, r25	; 0x18
    2628:	8f 8b       	std	Y+23, r24	; 0x17
    262a:	12 01       	movw	r2, r4
    262c:	99 24       	eor	r9, r9
    262e:	93 94       	inc	r9
    2630:	8c e2       	ldi	r24, 0x2C	; 44
    2632:	68 2e       	mov	r6, r24
    2634:	71 2c       	mov	r7, r1
    2636:	f5 c9       	rjmp	.-3094   	; 0x1a22 <main+0xa86>

00002638 <_ZN12OrangutanLCDC2Ev>:
    2638:	08 95       	ret

0000263a <_ZN12OrangutanLCDC1Ev>:
    263a:	08 95       	ret

0000263c <void_getchar>:
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	08 95       	ret

00002642 <_ZN12OrangutanLCD8busyWaitEv>:
    2642:	ef 92       	push	r14
    2644:	ff 92       	push	r15
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	67 b1       	in	r22, 0x07	; 7
    264c:	3d 98       	cbi	0x07, 5	; 7
    264e:	28 98       	cbi	0x05, 0	; 5
    2650:	29 9a       	sbi	0x05, 1	; 5
    2652:	e0 90 4e 04 	lds	r14, 0x044E
    2656:	f0 90 4f 04 	lds	r15, 0x044F
    265a:	00 91 50 04 	lds	r16, 0x0450
    265e:	10 91 51 04 	lds	r17, 0x0451
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	41 e0       	ldi	r20, 0x01	; 1
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	ca 01       	movw	r24, r20
    266c:	6f 93       	push	r22
    266e:	64 e0       	ldi	r22, 0x04	; 4
    2670:	6a 95       	dec	r22
    2672:	f1 f7       	brne	.-4      	; 0x2670 <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    2674:	6f 91       	pop	r22
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	c9 f7       	brne	.-14     	; 0x266c <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    267a:	2a 9a       	sbi	0x05, 2	; 5
    267c:	ca 01       	movw	r24, r20
    267e:	6f 93       	push	r22
    2680:	64 e0       	ldi	r22, 0x04	; 4
    2682:	6a 95       	dec	r22
    2684:	f1 f7       	brne	.-4      	; 0x2682 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    2686:	6f 91       	pop	r22
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	c9 f7       	brne	.-14     	; 0x267e <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    268c:	86 b1       	in	r24, 0x06	; 6
    268e:	2a 98       	cbi	0x05, 2	; 5
    2690:	fa 01       	movw	r30, r20
    2692:	6f 93       	push	r22
    2694:	64 e0       	ldi	r22, 0x04	; 4
    2696:	6a 95       	dec	r22
    2698:	f1 f7       	brne	.-4      	; 0x2696 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    269a:	6f 91       	pop	r22
    269c:	31 97       	sbiw	r30, 0x01	; 1
    269e:	c9 f7       	brne	.-14     	; 0x2692 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    26a0:	2a 9a       	sbi	0x05, 2	; 5
    26a2:	fa 01       	movw	r30, r20
    26a4:	6f 93       	push	r22
    26a6:	64 e0       	ldi	r22, 0x04	; 4
    26a8:	6a 95       	dec	r22
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    26ac:	6f 91       	pop	r22
    26ae:	31 97       	sbiw	r30, 0x01	; 1
    26b0:	c9 f7       	brne	.-14     	; 0x26a4 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    26b2:	2a 98       	cbi	0x05, 2	; 5
    26b4:	2c 5f       	subi	r18, 0xFC	; 252
    26b6:	3f 4f       	sbci	r19, 0xFF	; 255
    26b8:	85 ff       	sbrs	r24, 5
    26ba:	09 c0       	rjmp	.+18     	; 0x26ce <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    26bc:	c9 01       	movw	r24, r18
    26be:	a0 e0       	ldi	r26, 0x00	; 0
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	8e 15       	cp	r24, r14
    26c4:	9f 05       	cpc	r25, r15
    26c6:	a0 07       	cpc	r26, r16
    26c8:	b1 07       	cpc	r27, r17
    26ca:	08 f4       	brcc	.+2      	; 0x26ce <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    26cc:	ce cf       	rjmp	.-100    	; 0x266a <_ZN12OrangutanLCD8busyWaitEv+0x28>
    26ce:	c9 01       	movw	r24, r18
    26d0:	a0 e0       	ldi	r26, 0x00	; 0
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	8e 15       	cp	r24, r14
    26d6:	9f 05       	cpc	r25, r15
    26d8:	a0 07       	cpc	r26, r16
    26da:	b1 07       	cpc	r27, r17
    26dc:	28 f0       	brcs	.+10     	; 0x26e8 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    26de:	82 e3       	ldi	r24, 0x32	; 50
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	a0 e0       	ldi	r26, 0x00	; 0
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	04 c0       	rjmp	.+8      	; 0x26f0 <_ZN12OrangutanLCD8busyWaitEv+0xae>
    26e8:	80 e3       	ldi	r24, 0x30	; 48
    26ea:	95 e7       	ldi	r25, 0x75	; 117
    26ec:	a0 e0       	ldi	r26, 0x00	; 0
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	80 93 4e 04 	sts	0x044E, r24
    26f4:	90 93 4f 04 	sts	0x044F, r25
    26f8:	a0 93 50 04 	sts	0x0450, r26
    26fc:	b0 93 51 04 	sts	0x0451, r27
    2700:	67 b9       	out	0x07, r22	; 7
    2702:	1f 91       	pop	r17
    2704:	0f 91       	pop	r16
    2706:	ff 90       	pop	r15
    2708:	ef 90       	pop	r14
    270a:	08 95       	ret

0000270c <_ZN12OrangutanLCD8sendDataEh>:
    270c:	28 b1       	in	r18, 0x08	; 8
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	8f 70       	andi	r24, 0x0F	; 15
    2712:	90 70       	andi	r25, 0x00	; 0
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	23 7c       	andi	r18, 0xC3	; 195
    271e:	28 2b       	or	r18, r24
    2720:	28 b9       	out	0x08, r18	; 8
    2722:	2a 9a       	sbi	0x05, 2	; 5
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	fc 01       	movw	r30, r24
    272a:	6f 93       	push	r22
    272c:	64 e0       	ldi	r22, 0x04	; 4
    272e:	6a 95       	dec	r22
    2730:	f1 f7       	brne	.-4      	; 0x272e <_ZN12OrangutanLCD8sendDataEh+0x22>
    2732:	6f 91       	pop	r22
    2734:	31 97       	sbiw	r30, 0x01	; 1
    2736:	c9 f7       	brne	.-14     	; 0x272a <_ZN12OrangutanLCD8sendDataEh+0x1e>
    2738:	2a 98       	cbi	0x05, 2	; 5
    273a:	6f 93       	push	r22
    273c:	64 e0       	ldi	r22, 0x04	; 4
    273e:	6a 95       	dec	r22
    2740:	f1 f7       	brne	.-4      	; 0x273e <_ZN12OrangutanLCD8sendDataEh+0x32>
    2742:	6f 91       	pop	r22
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	c9 f7       	brne	.-14     	; 0x273a <_ZN12OrangutanLCD8sendDataEh+0x2e>
    2748:	08 95       	ret

0000274a <_ZN12OrangutanLCD10initPrintfEv>:
    274a:	80 91 4a 04 	lds	r24, 0x044A
    274e:	90 91 4b 04 	lds	r25, 0x044B
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	11 f0       	breq	.+4      	; 0x275a <_ZN12OrangutanLCD10initPrintfEv+0x10>
    2756:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <free>
    275a:	80 91 18 04 	lds	r24, 0x0418
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	20 91 19 04 	lds	r18, 0x0419
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	ac 01       	movw	r20, r24
    276a:	42 9f       	mul	r20, r18
    276c:	c0 01       	movw	r24, r0
    276e:	43 9f       	mul	r20, r19
    2770:	90 0d       	add	r25, r0
    2772:	52 9f       	mul	r21, r18
    2774:	90 0d       	add	r25, r0
    2776:	11 24       	eor	r1, r1
    2778:	0e 94 2b 20 	call	0x4056	; 0x4056 <malloc>
    277c:	90 93 4b 04 	sts	0x044B, r25
    2780:	80 93 4a 04 	sts	0x044A, r24
    2784:	00 97       	sbiw	r24, 0x00	; 0
    2786:	29 f1       	breq	.+74     	; 0x27d2 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    2788:	60 e0       	ldi	r22, 0x00	; 0
    278a:	70 e2       	ldi	r23, 0x20	; 32
    278c:	08 c0       	rjmp	.+16     	; 0x279e <_ZN12OrangutanLCD10initPrintfEv+0x54>
    278e:	e0 91 4a 04 	lds	r30, 0x044A
    2792:	f0 91 4b 04 	lds	r31, 0x044B
    2796:	e4 0f       	add	r30, r20
    2798:	f5 1f       	adc	r31, r21
    279a:	70 83       	st	Z, r23
    279c:	6f 5f       	subi	r22, 0xFF	; 255
    279e:	46 2f       	mov	r20, r22
    27a0:	50 e0       	ldi	r21, 0x00	; 0
    27a2:	80 91 18 04 	lds	r24, 0x0418
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	20 91 19 04 	lds	r18, 0x0419
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	fc 01       	movw	r30, r24
    27b2:	e2 9f       	mul	r30, r18
    27b4:	c0 01       	movw	r24, r0
    27b6:	e3 9f       	mul	r30, r19
    27b8:	90 0d       	add	r25, r0
    27ba:	f2 9f       	mul	r31, r18
    27bc:	90 0d       	add	r25, r0
    27be:	11 24       	eor	r1, r1
    27c0:	48 17       	cp	r20, r24
    27c2:	59 07       	cpc	r21, r25
    27c4:	24 f3       	brlt	.-56     	; 0x278e <_ZN12OrangutanLCD10initPrintfEv+0x44>
    27c6:	8d e0       	ldi	r24, 0x0D	; 13
    27c8:	96 e1       	ldi	r25, 0x16	; 22
    27ca:	6e e1       	ldi	r22, 0x1E	; 30
    27cc:	73 e1       	ldi	r23, 0x13	; 19
    27ce:	0e 94 51 21 	call	0x42a2	; 0x42a2 <fdevopen>
    27d2:	08 95       	ret

000027d4 <_ZN12OrangutanLCD10initPrintfEhh>:
    27d4:	80 93 19 04 	sts	0x0419, r24
    27d8:	60 93 18 04 	sts	0x0418, r22
    27dc:	0e 94 a5 13 	call	0x274a	; 0x274a <_ZN12OrangutanLCD10initPrintfEv>
    27e0:	08 95       	ret

000027e2 <lcd_init_printf_with_dimensions>:
    27e2:	80 93 19 04 	sts	0x0419, r24
    27e6:	60 93 18 04 	sts	0x0418, r22
    27ea:	0e 94 a5 13 	call	0x274a	; 0x274a <_ZN12OrangutanLCD10initPrintfEv>
    27ee:	08 95       	ret

000027f0 <lcd_init_printf>:
    27f0:	0e 94 a5 13 	call	0x274a	; 0x274a <_ZN12OrangutanLCD10initPrintfEv>
    27f4:	08 95       	ret

000027f6 <_ZN12OrangutanLCD5init2Ev>:
    27f6:	3d 98       	cbi	0x07, 5	; 7
    27f8:	45 9a       	sbi	0x08, 5	; 8
    27fa:	80 e3       	ldi	r24, 0x30	; 48
    27fc:	95 e7       	ldi	r25, 0x75	; 117
    27fe:	a0 e0       	ldi	r26, 0x00	; 0
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	80 93 4e 04 	sts	0x044E, r24
    2806:	90 93 4f 04 	sts	0x044F, r25
    280a:	a0 93 50 04 	sts	0x0450, r26
    280e:	b0 93 51 04 	sts	0x0451, r27
    2812:	20 9a       	sbi	0x04, 0	; 4
    2814:	21 9a       	sbi	0x04, 1	; 4
    2816:	22 9a       	sbi	0x04, 2	; 4
    2818:	8e e1       	ldi	r24, 0x1E	; 30
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>
    2820:	83 e0       	ldi	r24, 0x03	; 3
    2822:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2826:	86 e0       	ldi	r24, 0x06	; 6
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>
    282e:	83 e0       	ldi	r24, 0x03	; 3
    2830:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2834:	82 e0       	ldi	r24, 0x02	; 2
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>
    283c:	83 e0       	ldi	r24, 0x03	; 3
    283e:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2842:	82 e0       	ldi	r24, 0x02	; 2
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>
    284a:	82 e0       	ldi	r24, 0x02	; 2
    284c:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2850:	82 e0       	ldi	r24, 0x02	; 2
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>
    2858:	88 e2       	ldi	r24, 0x28	; 40
    285a:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN12OrangutanLCD8send_cmdEh>
    285e:	88 e0       	ldi	r24, 0x08	; 8
    2860:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN12OrangutanLCD8send_cmdEh>
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN12OrangutanLCD8send_cmdEh>
    286a:	86 e0       	ldi	r24, 0x06	; 6
    286c:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN12OrangutanLCD8send_cmdEh>
    2870:	8c e0       	ldi	r24, 0x0C	; 12
    2872:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN12OrangutanLCD8send_cmdEh>
    2876:	08 95       	ret

00002878 <_ZN12OrangutanLCD4initEv>:
    2878:	80 91 52 04 	lds	r24, 0x0452
    287c:	88 23       	and	r24, r24
    287e:	29 f4       	brne	.+10     	; 0x288a <_ZN12OrangutanLCD4initEv+0x12>
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	80 93 52 04 	sts	0x0452, r24
    2886:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_ZN12OrangutanLCD5init2Ev>
    288a:	08 95       	ret

0000288c <_ZN12OrangutanLCD4sendEhhh>:
    288c:	ff 92       	push	r15
    288e:	0f 93       	push	r16
    2890:	1f 93       	push	r17
    2892:	08 2f       	mov	r16, r24
    2894:	16 2f       	mov	r17, r22
    2896:	f4 2e       	mov	r15, r20
    2898:	0e 94 3c 14 	call	0x2878	; 0x2878 <_ZN12OrangutanLCD4initEv>
    289c:	0e 94 21 13 	call	0x2642	; 0x2642 <_ZN12OrangutanLCD8busyWaitEv>
    28a0:	37 b1       	in	r19, 0x07	; 7
    28a2:	28 b1       	in	r18, 0x08	; 8
    28a4:	29 98       	cbi	0x05, 1	; 5
    28a6:	11 23       	and	r17, r17
    28a8:	11 f0       	breq	.+4      	; 0x28ae <_ZN12OrangutanLCD4sendEhhh+0x22>
    28aa:	28 9a       	sbi	0x05, 0	; 5
    28ac:	01 c0       	rjmp	.+2      	; 0x28b0 <_ZN12OrangutanLCD4sendEhhh+0x24>
    28ae:	28 98       	cbi	0x05, 0	; 5
    28b0:	87 b1       	in	r24, 0x07	; 7
    28b2:	8c 63       	ori	r24, 0x3C	; 60
    28b4:	87 b9       	out	0x07, r24	; 7
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	f8 16       	cp	r15, r24
    28ba:	e1 f0       	breq	.+56     	; 0x28f4 <_ZN12OrangutanLCD4sendEhhh+0x68>
    28bc:	88 b1       	in	r24, 0x08	; 8
    28be:	90 2f       	mov	r25, r16
    28c0:	92 95       	swap	r25
    28c2:	9f 70       	andi	r25, 0x0F	; 15
    28c4:	99 0f       	add	r25, r25
    28c6:	99 0f       	add	r25, r25
    28c8:	83 7c       	andi	r24, 0xC3	; 195
    28ca:	98 2b       	or	r25, r24
    28cc:	98 b9       	out	0x08, r25	; 8
    28ce:	2a 9a       	sbi	0x05, 2	; 5
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	fc 01       	movw	r30, r24
    28d6:	6f 93       	push	r22
    28d8:	64 e0       	ldi	r22, 0x04	; 4
    28da:	6a 95       	dec	r22
    28dc:	f1 f7       	brne	.-4      	; 0x28da <_ZN12OrangutanLCD4sendEhhh+0x4e>
    28de:	6f 91       	pop	r22
    28e0:	31 97       	sbiw	r30, 0x01	; 1
    28e2:	c9 f7       	brne	.-14     	; 0x28d6 <_ZN12OrangutanLCD4sendEhhh+0x4a>
    28e4:	2a 98       	cbi	0x05, 2	; 5
    28e6:	6f 93       	push	r22
    28e8:	64 e0       	ldi	r22, 0x04	; 4
    28ea:	6a 95       	dec	r22
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <_ZN12OrangutanLCD4sendEhhh+0x5e>
    28ee:	6f 91       	pop	r22
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	c9 f7       	brne	.-14     	; 0x28e6 <_ZN12OrangutanLCD4sendEhhh+0x5a>
    28f4:	88 b1       	in	r24, 0x08	; 8
    28f6:	0f 70       	andi	r16, 0x0F	; 15
    28f8:	00 0f       	add	r16, r16
    28fa:	00 0f       	add	r16, r16
    28fc:	83 7c       	andi	r24, 0xC3	; 195
    28fe:	80 2b       	or	r24, r16
    2900:	88 b9       	out	0x08, r24	; 8
    2902:	2a 9a       	sbi	0x05, 2	; 5
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	fc 01       	movw	r30, r24
    290a:	6f 93       	push	r22
    290c:	64 e0       	ldi	r22, 0x04	; 4
    290e:	6a 95       	dec	r22
    2910:	f1 f7       	brne	.-4      	; 0x290e <_ZN12OrangutanLCD4sendEhhh+0x82>
    2912:	6f 91       	pop	r22
    2914:	31 97       	sbiw	r30, 0x01	; 1
    2916:	c9 f7       	brne	.-14     	; 0x290a <_ZN12OrangutanLCD4sendEhhh+0x7e>
    2918:	2a 98       	cbi	0x05, 2	; 5
    291a:	6f 93       	push	r22
    291c:	64 e0       	ldi	r22, 0x04	; 4
    291e:	6a 95       	dec	r22
    2920:	f1 f7       	brne	.-4      	; 0x291e <_ZN12OrangutanLCD4sendEhhh+0x92>
    2922:	6f 91       	pop	r22
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	c9 f7       	brne	.-14     	; 0x291a <_ZN12OrangutanLCD4sendEhhh+0x8e>
    2928:	37 b9       	out	0x07, r19	; 7
    292a:	28 b9       	out	0x08, r18	; 8
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	ff 90       	pop	r15
    2932:	08 95       	ret

00002934 <_ZN12OrangutanLCD8send_cmdEh>:
    2934:	60 e0       	ldi	r22, 0x00	; 0
    2936:	42 e0       	ldi	r20, 0x02	; 2
    2938:	0e 94 46 14 	call	0x288c	; 0x288c <_ZN12OrangutanLCD4sendEhhh>
    293c:	08 95       	ret

0000293e <_ZN12OrangutanLCD10moveCursorEhh>:
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	08 2f       	mov	r16, r24
    2944:	16 2f       	mov	r17, r22
    2946:	08 c0       	rjmp	.+16     	; 0x2958 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    2948:	00 23       	and	r16, r16
    294a:	11 f4       	brne	.+4      	; 0x2950 <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    294c:	80 e1       	ldi	r24, 0x10	; 16
    294e:	01 c0       	rjmp	.+2      	; 0x2952 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    2950:	84 e1       	ldi	r24, 0x14	; 20
    2952:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN12OrangutanLCD8send_cmdEh>
    2956:	11 50       	subi	r17, 0x01	; 1
    2958:	11 23       	and	r17, r17
    295a:	b1 f7       	brne	.-20     	; 0x2948 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	08 95       	ret

00002962 <lcd_move_cursor>:
    2962:	0e 94 9f 14 	call	0x293e	; 0x293e <_ZN12OrangutanLCD10moveCursorEhh>
    2966:	08 95       	ret

00002968 <_ZN12OrangutanLCD10hideCursorEv>:
    2968:	8c e0       	ldi	r24, 0x0C	; 12
    296a:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN12OrangutanLCD8send_cmdEh>
    296e:	08 95       	ret

00002970 <lcd_hide_cursor>:
    2970:	0e 94 b4 14 	call	0x2968	; 0x2968 <_ZN12OrangutanLCD10hideCursorEv>
    2974:	08 95       	ret

00002976 <_ZN12OrangutanLCD10showCursorEh>:
    2976:	81 30       	cpi	r24, 0x01	; 1
    2978:	11 f4       	brne	.+4      	; 0x297e <_ZN12OrangutanLCD10showCursorEh+0x8>
    297a:	8f e0       	ldi	r24, 0x0F	; 15
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <_ZN12OrangutanLCD10showCursorEh+0xa>
    297e:	8e e0       	ldi	r24, 0x0E	; 14
    2980:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN12OrangutanLCD8send_cmdEh>
    2984:	08 95       	ret

00002986 <lcd_show_cursor>:
    2986:	0e 94 bb 14 	call	0x2976	; 0x2976 <_ZN12OrangutanLCD10showCursorEh>
    298a:	08 95       	ret

0000298c <_ZN12OrangutanLCD6gotoXYEhh>:
    298c:	a4 e0       	ldi	r26, 0x04	; 4
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	ec ec       	ldi	r30, 0xCC	; 204
    2992:	f4 e1       	ldi	r31, 0x14	; 20
    2994:	0c 94 ee 1f 	jmp	0x3fdc	; 0x3fdc <__prologue_saves__+0x1c>
    2998:	18 2f       	mov	r17, r24
    299a:	06 2f       	mov	r16, r22
    299c:	80 e8       	ldi	r24, 0x80	; 128
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	80 ec       	ldi	r24, 0xC0	; 192
    29a2:	8a 83       	std	Y+2, r24	; 0x02
    29a4:	84 e9       	ldi	r24, 0x94	; 148
    29a6:	8b 83       	std	Y+3, r24	; 0x03
    29a8:	84 ed       	ldi	r24, 0xD4	; 212
    29aa:	8c 83       	std	Y+4, r24	; 0x04
    29ac:	fe 01       	movw	r30, r28
    29ae:	e6 0f       	add	r30, r22
    29b0:	f1 1d       	adc	r31, r1
    29b2:	81 81       	ldd	r24, Z+1	; 0x01
    29b4:	81 0f       	add	r24, r17
    29b6:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN12OrangutanLCD8send_cmdEh>
    29ba:	10 93 4d 04 	sts	0x044D, r17
    29be:	00 93 4c 04 	sts	0x044C, r16
    29c2:	24 96       	adiw	r28, 0x04	; 4
    29c4:	e4 e0       	ldi	r30, 0x04	; 4
    29c6:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <__epilogue_restores__+0x1c>

000029ca <lcd_goto_xy>:
    29ca:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN12OrangutanLCD6gotoXYEhh>
    29ce:	08 95       	ret

000029d0 <_ZN12OrangutanLCD5clearEv>:
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN12OrangutanLCD8send_cmdEh>
    29d6:	80 91 4a 04 	lds	r24, 0x044A
    29da:	90 91 4b 04 	lds	r25, 0x044B
    29de:	89 2b       	or	r24, r25
    29e0:	19 f1       	breq	.+70     	; 0x2a28 <_ZN12OrangutanLCD5clearEv+0x58>
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	70 e2       	ldi	r23, 0x20	; 32
    29e6:	08 c0       	rjmp	.+16     	; 0x29f8 <_ZN12OrangutanLCD5clearEv+0x28>
    29e8:	e0 91 4a 04 	lds	r30, 0x044A
    29ec:	f0 91 4b 04 	lds	r31, 0x044B
    29f0:	e4 0f       	add	r30, r20
    29f2:	f5 1f       	adc	r31, r21
    29f4:	70 83       	st	Z, r23
    29f6:	6f 5f       	subi	r22, 0xFF	; 255
    29f8:	46 2f       	mov	r20, r22
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	80 91 18 04 	lds	r24, 0x0418
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	20 91 19 04 	lds	r18, 0x0419
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	e2 9f       	mul	r30, r18
    2a0e:	c0 01       	movw	r24, r0
    2a10:	e3 9f       	mul	r30, r19
    2a12:	90 0d       	add	r25, r0
    2a14:	f2 9f       	mul	r31, r18
    2a16:	90 0d       	add	r25, r0
    2a18:	11 24       	eor	r1, r1
    2a1a:	48 17       	cp	r20, r24
    2a1c:	59 07       	cpc	r21, r25
    2a1e:	24 f3       	brlt	.-56     	; 0x29e8 <_ZN12OrangutanLCD5clearEv+0x18>
    2a20:	10 92 4d 04 	sts	0x044D, r1
    2a24:	10 92 4c 04 	sts	0x044C, r1
    2a28:	08 95       	ret

00002a2a <clear>:
    2a2a:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <_ZN12OrangutanLCD5clearEv>
    2a2e:	08 95       	ret

00002a30 <_ZN12OrangutanLCD9send_dataEh>:
    2a30:	61 e0       	ldi	r22, 0x01	; 1
    2a32:	42 e0       	ldi	r20, 0x02	; 2
    2a34:	0e 94 46 14 	call	0x288c	; 0x288c <_ZN12OrangutanLCD4sendEhhh>
    2a38:	08 95       	ret

00002a3a <_ZN12OrangutanLCD11printBinaryEh>:
    2a3a:	0f 93       	push	r16
    2a3c:	1f 93       	push	r17
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	00 e0       	ldi	r16, 0x00	; 0
    2a44:	10 e8       	ldi	r17, 0x80	; 128
    2a46:	c8 2f       	mov	r28, r24
    2a48:	d0 e0       	ldi	r29, 0x00	; 0
    2a4a:	81 2f       	mov	r24, r17
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	8c 23       	and	r24, r28
    2a50:	9d 23       	and	r25, r29
    2a52:	89 2b       	or	r24, r25
    2a54:	11 f0       	breq	.+4      	; 0x2a5a <_ZN12OrangutanLCD11printBinaryEh+0x20>
    2a56:	81 e3       	ldi	r24, 0x31	; 49
    2a58:	01 c0       	rjmp	.+2      	; 0x2a5c <_ZN12OrangutanLCD11printBinaryEh+0x22>
    2a5a:	80 e3       	ldi	r24, 0x30	; 48
    2a5c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZN12OrangutanLCD9send_dataEh>
    2a60:	0f 5f       	subi	r16, 0xFF	; 255
    2a62:	08 30       	cpi	r16, 0x08	; 8
    2a64:	11 f0       	breq	.+4      	; 0x2a6a <_ZN12OrangutanLCD11printBinaryEh+0x30>
    2a66:	16 95       	lsr	r17
    2a68:	f0 cf       	rjmp	.-32     	; 0x2a4a <_ZN12OrangutanLCD11printBinaryEh+0x10>
    2a6a:	df 91       	pop	r29
    2a6c:	cf 91       	pop	r28
    2a6e:	1f 91       	pop	r17
    2a70:	0f 91       	pop	r16
    2a72:	08 95       	ret

00002a74 <print_binary>:
    2a74:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN12OrangutanLCD11printBinaryEh>
    2a78:	08 95       	ret

00002a7a <_ZN12OrangutanLCD14printHexNibbleEh>:
    2a7a:	8a 30       	cpi	r24, 0x0A	; 10
    2a7c:	10 f4       	brcc	.+4      	; 0x2a82 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    2a7e:	80 5d       	subi	r24, 0xD0	; 208
    2a80:	01 c0       	rjmp	.+2      	; 0x2a84 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    2a82:	89 5c       	subi	r24, 0xC9	; 201
    2a84:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZN12OrangutanLCD9send_dataEh>
    2a88:	08 95       	ret

00002a8a <_ZN12OrangutanLCD8printHexEh>:
    2a8a:	1f 93       	push	r17
    2a8c:	18 2f       	mov	r17, r24
    2a8e:	82 95       	swap	r24
    2a90:	8f 70       	andi	r24, 0x0F	; 15
    2a92:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN12OrangutanLCD14printHexNibbleEh>
    2a96:	81 2f       	mov	r24, r17
    2a98:	8f 70       	andi	r24, 0x0F	; 15
    2a9a:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN12OrangutanLCD14printHexNibbleEh>
    2a9e:	1f 91       	pop	r17
    2aa0:	08 95       	ret

00002aa2 <_ZN12OrangutanLCD8printHexEj>:
    2aa2:	1f 93       	push	r17
    2aa4:	18 2f       	mov	r17, r24
    2aa6:	89 2f       	mov	r24, r25
    2aa8:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN12OrangutanLCD8printHexEh>
    2aac:	81 2f       	mov	r24, r17
    2aae:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN12OrangutanLCD8printHexEh>
    2ab2:	1f 91       	pop	r17
    2ab4:	08 95       	ret

00002ab6 <print_hex>:
    2ab6:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_ZN12OrangutanLCD8printHexEj>
    2aba:	08 95       	ret

00002abc <print_hex_byte>:
    2abc:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN12OrangutanLCD8printHexEh>
    2ac0:	08 95       	ret

00002ac2 <_ZN12OrangutanLCD5printEm>:
    2ac2:	6f 92       	push	r6
    2ac4:	7f 92       	push	r7
    2ac6:	8f 92       	push	r8
    2ac8:	9f 92       	push	r9
    2aca:	af 92       	push	r10
    2acc:	bf 92       	push	r11
    2ace:	cf 92       	push	r12
    2ad0:	df 92       	push	r13
    2ad2:	ff 92       	push	r15
    2ad4:	0f 93       	push	r16
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
    2ade:	2a 97       	sbiw	r28, 0x0a	; 10
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	5b 01       	movw	r10, r22
    2aec:	6c 01       	movw	r12, r24
    2aee:	0a e0       	ldi	r16, 0x0A	; 10
    2af0:	3e 01       	movw	r6, r28
    2af2:	08 94       	sec
    2af4:	61 1c       	adc	r6, r1
    2af6:	71 1c       	adc	r7, r1
    2af8:	fa 2c       	mov	r15, r10
    2afa:	c6 01       	movw	r24, r12
    2afc:	b5 01       	movw	r22, r10
    2afe:	2a e0       	ldi	r18, 0x0A	; 10
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e0       	ldi	r20, 0x00	; 0
    2b04:	50 e0       	ldi	r21, 0x00	; 0
    2b06:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__udivmodsi4>
    2b0a:	c9 01       	movw	r24, r18
    2b0c:	da 01       	movw	r26, r20
    2b0e:	5c 01       	movw	r10, r24
    2b10:	6d 01       	movw	r12, r26
    2b12:	01 50       	subi	r16, 0x01	; 1
    2b14:	43 01       	movw	r8, r6
    2b16:	80 0e       	add	r8, r16
    2b18:	91 1c       	adc	r9, r1
    2b1a:	80 e3       	ldi	r24, 0x30	; 48
    2b1c:	f8 0e       	add	r15, r24
    2b1e:	c6 01       	movw	r24, r12
    2b20:	b5 01       	movw	r22, r10
    2b22:	2a e0       	ldi	r18, 0x0A	; 10
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	40 e0       	ldi	r20, 0x00	; 0
    2b28:	50 e0       	ldi	r21, 0x00	; 0
    2b2a:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__mulsi3>
    2b2e:	f6 1a       	sub	r15, r22
    2b30:	f4 01       	movw	r30, r8
    2b32:	f0 82       	st	Z, r15
    2b34:	a1 14       	cp	r10, r1
    2b36:	b1 04       	cpc	r11, r1
    2b38:	c1 04       	cpc	r12, r1
    2b3a:	d1 04       	cpc	r13, r1
    2b3c:	e9 f6       	brne	.-70     	; 0x2af8 <_ZN12OrangutanLCD5printEm+0x36>
    2b3e:	08 c0       	rjmp	.+16     	; 0x2b50 <_ZN12OrangutanLCD5printEm+0x8e>
    2b40:	f6 01       	movw	r30, r12
    2b42:	e0 0f       	add	r30, r16
    2b44:	f1 1d       	adc	r31, r1
    2b46:	80 81       	ld	r24, Z
    2b48:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZN12OrangutanLCD9send_dataEh>
    2b4c:	0f 5f       	subi	r16, 0xFF	; 255
    2b4e:	04 c0       	rjmp	.+8      	; 0x2b58 <_ZN12OrangutanLCD5printEm+0x96>
    2b50:	6e 01       	movw	r12, r28
    2b52:	08 94       	sec
    2b54:	c1 1c       	adc	r12, r1
    2b56:	d1 1c       	adc	r13, r1
    2b58:	0a 30       	cpi	r16, 0x0A	; 10
    2b5a:	90 f3       	brcs	.-28     	; 0x2b40 <_ZN12OrangutanLCD5printEm+0x7e>
    2b5c:	2a 96       	adiw	r28, 0x0a	; 10
    2b5e:	0f b6       	in	r0, 0x3f	; 63
    2b60:	f8 94       	cli
    2b62:	de bf       	out	0x3e, r29	; 62
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	cd bf       	out	0x3d, r28	; 61
    2b68:	cf 91       	pop	r28
    2b6a:	df 91       	pop	r29
    2b6c:	0f 91       	pop	r16
    2b6e:	ff 90       	pop	r15
    2b70:	df 90       	pop	r13
    2b72:	cf 90       	pop	r12
    2b74:	bf 90       	pop	r11
    2b76:	af 90       	pop	r10
    2b78:	9f 90       	pop	r9
    2b7a:	8f 90       	pop	r8
    2b7c:	7f 90       	pop	r7
    2b7e:	6f 90       	pop	r6
    2b80:	08 95       	ret

00002b82 <print_unsigned_long>:
    2b82:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_ZN12OrangutanLCD5printEm>
    2b86:	08 95       	ret

00002b88 <_ZN12OrangutanLCD5printEl>:
    2b88:	ef 92       	push	r14
    2b8a:	ff 92       	push	r15
    2b8c:	0f 93       	push	r16
    2b8e:	1f 93       	push	r17
    2b90:	7b 01       	movw	r14, r22
    2b92:	8c 01       	movw	r16, r24
    2b94:	97 ff       	sbrs	r25, 7
    2b96:	0b c0       	rjmp	.+22     	; 0x2bae <_ZN12OrangutanLCD5printEl+0x26>
    2b98:	10 95       	com	r17
    2b9a:	00 95       	com	r16
    2b9c:	f0 94       	com	r15
    2b9e:	e0 94       	com	r14
    2ba0:	e1 1c       	adc	r14, r1
    2ba2:	f1 1c       	adc	r15, r1
    2ba4:	01 1d       	adc	r16, r1
    2ba6:	11 1d       	adc	r17, r1
    2ba8:	8d e2       	ldi	r24, 0x2D	; 45
    2baa:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZN12OrangutanLCD9send_dataEh>
    2bae:	c8 01       	movw	r24, r16
    2bb0:	b7 01       	movw	r22, r14
    2bb2:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_ZN12OrangutanLCD5printEm>
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	ff 90       	pop	r15
    2bbc:	ef 90       	pop	r14
    2bbe:	08 95       	ret

00002bc0 <print_long>:
    2bc0:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN12OrangutanLCD5printEl>
    2bc4:	08 95       	ret

00002bc6 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    2bc6:	cf 93       	push	r28
    2bc8:	df 93       	push	r29
    2bca:	ec 01       	movw	r28, r24
    2bcc:	03 c0       	rjmp	.+6      	; 0x2bd4 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    2bce:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZN12OrangutanLCD9send_dataEh>
    2bd2:	21 96       	adiw	r28, 0x01	; 1
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	84 91       	lpm	r24, Z+
    2bd8:	88 23       	and	r24, r24
    2bda:	c9 f7       	brne	.-14     	; 0x2bce <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    2bdc:	df 91       	pop	r29
    2bde:	cf 91       	pop	r28
    2be0:	08 95       	ret

00002be2 <print_from_program_space>:
    2be2:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    2be6:	08 95       	ret

00002be8 <_ZN12OrangutanLCD5printEPKc>:
    2be8:	cf 93       	push	r28
    2bea:	df 93       	push	r29
    2bec:	ec 01       	movw	r28, r24
    2bee:	03 c0       	rjmp	.+6      	; 0x2bf6 <_ZN12OrangutanLCD5printEPKc+0xe>
    2bf0:	21 96       	adiw	r28, 0x01	; 1
    2bf2:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZN12OrangutanLCD9send_dataEh>
    2bf6:	88 81       	ld	r24, Y
    2bf8:	88 23       	and	r24, r24
    2bfa:	d1 f7       	brne	.-12     	; 0x2bf0 <_ZN12OrangutanLCD5printEPKc+0x8>
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	08 95       	ret

00002c02 <_ZN12OrangutanLCD7printInEPKc>:
    2c02:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN12OrangutanLCD5printEPKc>
    2c06:	08 95       	ret

00002c08 <print>:
    2c08:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN12OrangutanLCD5printEPKc>
    2c0c:	08 95       	ret

00002c0e <_ZN12OrangutanLCD5printEc>:
    2c0e:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZN12OrangutanLCD9send_dataEh>
    2c12:	08 95       	ret

00002c14 <print_character>:
    2c14:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZN12OrangutanLCD9send_dataEh>
    2c18:	08 95       	ret

00002c1a <lcd_putchar>:
    2c1a:	a0 e0       	ldi	r26, 0x00	; 0
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e3 e1       	ldi	r30, 0x13	; 19
    2c20:	f6 e1       	ldi	r31, 0x16	; 22
    2c22:	0c 94 ea 1f 	jmp	0x3fd4	; 0x3fd4 <__prologue_saves__+0x14>
    2c26:	e8 2e       	mov	r14, r24
    2c28:	80 91 4a 04 	lds	r24, 0x044A
    2c2c:	90 91 4b 04 	lds	r25, 0x044B
    2c30:	89 2b       	or	r24, r25
    2c32:	09 f4       	brne	.+2      	; 0x2c36 <lcd_putchar+0x1c>
    2c34:	05 c1       	rjmp	.+522    	; 0x2e40 <lcd_putchar+0x226>
    2c36:	2a e0       	ldi	r18, 0x0A	; 10
    2c38:	e2 16       	cp	r14, r18
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <lcd_putchar+0x24>
    2c3c:	46 c0       	rjmp	.+140    	; 0x2cca <lcd_putchar+0xb0>
    2c3e:	38 e0       	ldi	r19, 0x08	; 8
    2c40:	e3 16       	cp	r14, r19
    2c42:	c9 f4       	brne	.+50     	; 0x2c76 <lcd_putchar+0x5c>
    2c44:	80 91 4d 04 	lds	r24, 0x044D
    2c48:	81 50       	subi	r24, 0x01	; 1
    2c4a:	80 93 4d 04 	sts	0x044D, r24
    2c4e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c50:	51 f4       	brne	.+20     	; 0x2c66 <lcd_putchar+0x4c>
    2c52:	80 91 4c 04 	lds	r24, 0x044C
    2c56:	81 50       	subi	r24, 0x01	; 1
    2c58:	80 93 4c 04 	sts	0x044C, r24
    2c5c:	80 91 19 04 	lds	r24, 0x0419
    2c60:	81 50       	subi	r24, 0x01	; 1
    2c62:	80 93 4d 04 	sts	0x044D, r24
    2c66:	80 91 4c 04 	lds	r24, 0x044C
    2c6a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c6c:	09 f0       	breq	.+2      	; 0x2c70 <lcd_putchar+0x56>
    2c6e:	e2 c0       	rjmp	.+452    	; 0x2e34 <lcd_putchar+0x21a>
    2c70:	10 92 4c 04 	sts	0x044C, r1
    2c74:	dd c0       	rjmp	.+442    	; 0x2e30 <lcd_putchar+0x216>
    2c76:	8e 2d       	mov	r24, r14
    2c78:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZN12OrangutanLCD9send_dataEh>
    2c7c:	20 91 4c 04 	lds	r18, 0x044C
    2c80:	22 23       	and	r18, r18
    2c82:	c9 f0       	breq	.+50     	; 0x2cb6 <lcd_putchar+0x9c>
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	21 50       	subi	r18, 0x01	; 1
    2c88:	30 40       	sbci	r19, 0x00	; 0
    2c8a:	80 91 19 04 	lds	r24, 0x0419
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	ac 01       	movw	r20, r24
    2c92:	24 9f       	mul	r18, r20
    2c94:	c0 01       	movw	r24, r0
    2c96:	25 9f       	mul	r18, r21
    2c98:	90 0d       	add	r25, r0
    2c9a:	34 9f       	mul	r19, r20
    2c9c:	90 0d       	add	r25, r0
    2c9e:	11 24       	eor	r1, r1
    2ca0:	20 91 4d 04 	lds	r18, 0x044D
    2ca4:	e0 91 4a 04 	lds	r30, 0x044A
    2ca8:	f0 91 4b 04 	lds	r31, 0x044B
    2cac:	e8 0f       	add	r30, r24
    2cae:	f9 1f       	adc	r31, r25
    2cb0:	e2 0f       	add	r30, r18
    2cb2:	f1 1d       	adc	r31, r1
    2cb4:	e0 82       	st	Z, r14
    2cb6:	80 91 4d 04 	lds	r24, 0x044D
    2cba:	8f 5f       	subi	r24, 0xFF	; 255
    2cbc:	80 93 4d 04 	sts	0x044D, r24
    2cc0:	90 91 19 04 	lds	r25, 0x0419
    2cc4:	89 17       	cp	r24, r25
    2cc6:	09 f0       	breq	.+2      	; 0x2cca <lcd_putchar+0xb0>
    2cc8:	bb c0       	rjmp	.+374    	; 0x2e40 <lcd_putchar+0x226>
    2cca:	40 91 4c 04 	lds	r20, 0x044C
    2cce:	24 2f       	mov	r18, r20
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	80 91 18 04 	lds	r24, 0x0418
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	28 17       	cp	r18, r24
    2cdc:	39 07       	cpc	r19, r25
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <lcd_putchar+0xc8>
    2ce0:	a4 c0       	rjmp	.+328    	; 0x2e2a <lcd_putchar+0x210>
    2ce2:	c0 e0       	ldi	r28, 0x00	; 0
    2ce4:	d0 e0       	ldi	r29, 0x00	; 0
    2ce6:	44 c0       	rjmp	.+136    	; 0x2d70 <lcd_putchar+0x156>
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	6c 2f       	mov	r22, r28
    2cec:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN12OrangutanLCD6gotoXYEhh>
    2cf0:	ff 24       	eor	r15, r15
    2cf2:	6e 01       	movw	r12, r28
    2cf4:	08 94       	sec
    2cf6:	c1 1c       	adc	r12, r1
    2cf8:	d1 1c       	adc	r13, r1
    2cfa:	35 c0       	rjmp	.+106    	; 0x2d66 <lcd_putchar+0x14c>
    2cfc:	0f 2d       	mov	r16, r15
    2cfe:	10 e0       	ldi	r17, 0x00	; 0
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	9c 01       	movw	r18, r24
    2d04:	c2 9f       	mul	r28, r18
    2d06:	c0 01       	movw	r24, r0
    2d08:	c3 9f       	mul	r28, r19
    2d0a:	90 0d       	add	r25, r0
    2d0c:	d2 9f       	mul	r29, r18
    2d0e:	90 0d       	add	r25, r0
    2d10:	11 24       	eor	r1, r1
    2d12:	e0 91 4a 04 	lds	r30, 0x044A
    2d16:	f0 91 4b 04 	lds	r31, 0x044B
    2d1a:	e0 0f       	add	r30, r16
    2d1c:	f1 1f       	adc	r31, r17
    2d1e:	e8 0f       	add	r30, r24
    2d20:	f9 1f       	adc	r31, r25
    2d22:	80 81       	ld	r24, Z
    2d24:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZN12OrangutanLCD9send_dataEh>
    2d28:	e0 91 4a 04 	lds	r30, 0x044A
    2d2c:	f0 91 4b 04 	lds	r31, 0x044B
    2d30:	80 91 19 04 	lds	r24, 0x0419
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	c8 9f       	mul	r28, r24
    2d38:	d0 01       	movw	r26, r0
    2d3a:	c9 9f       	mul	r28, r25
    2d3c:	b0 0d       	add	r27, r0
    2d3e:	d8 9f       	mul	r29, r24
    2d40:	b0 0d       	add	r27, r0
    2d42:	11 24       	eor	r1, r1
    2d44:	e0 0f       	add	r30, r16
    2d46:	f1 1f       	adc	r31, r17
    2d48:	ae 0f       	add	r26, r30
    2d4a:	bf 1f       	adc	r27, r31
    2d4c:	ac 01       	movw	r20, r24
    2d4e:	c4 9e       	mul	r12, r20
    2d50:	c0 01       	movw	r24, r0
    2d52:	c5 9e       	mul	r12, r21
    2d54:	90 0d       	add	r25, r0
    2d56:	d4 9e       	mul	r13, r20
    2d58:	90 0d       	add	r25, r0
    2d5a:	11 24       	eor	r1, r1
    2d5c:	e8 0f       	add	r30, r24
    2d5e:	f9 1f       	adc	r31, r25
    2d60:	80 81       	ld	r24, Z
    2d62:	8c 93       	st	X, r24
    2d64:	f3 94       	inc	r15
    2d66:	80 91 19 04 	lds	r24, 0x0419
    2d6a:	f8 16       	cp	r15, r24
    2d6c:	38 f2       	brcs	.-114    	; 0x2cfc <lcd_putchar+0xe2>
    2d6e:	e6 01       	movw	r28, r12
    2d70:	60 91 18 04 	lds	r22, 0x0418
    2d74:	86 2f       	mov	r24, r22
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	02 97       	sbiw	r24, 0x02	; 2
    2d7a:	c8 17       	cp	r28, r24
    2d7c:	d9 07       	cpc	r29, r25
    2d7e:	0c f4       	brge	.+2      	; 0x2d82 <lcd_putchar+0x168>
    2d80:	b3 cf       	rjmp	.-154    	; 0x2ce8 <lcd_putchar+0xce>
    2d82:	62 30       	cpi	r22, 0x02	; 2
    2d84:	08 f4       	brcc	.+2      	; 0x2d88 <lcd_putchar+0x16e>
    2d86:	40 c0       	rjmp	.+128    	; 0x2e08 <lcd_putchar+0x1ee>
    2d88:	62 50       	subi	r22, 0x02	; 2
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN12OrangutanLCD6gotoXYEhh>
    2d90:	ff 24       	eor	r15, r15
    2d92:	40 e2       	ldi	r20, 0x20	; 32
    2d94:	d4 2e       	mov	r13, r20
    2d96:	34 c0       	rjmp	.+104    	; 0x2e00 <lcd_putchar+0x1e6>
    2d98:	0f 2d       	mov	r16, r15
    2d9a:	10 e0       	ldi	r17, 0x00	; 0
    2d9c:	80 91 18 04 	lds	r24, 0x0418
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	02 97       	sbiw	r24, 0x02	; 2
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	ac 01       	movw	r20, r24
    2da8:	42 9f       	mul	r20, r18
    2daa:	c0 01       	movw	r24, r0
    2dac:	43 9f       	mul	r20, r19
    2dae:	90 0d       	add	r25, r0
    2db0:	52 9f       	mul	r21, r18
    2db2:	90 0d       	add	r25, r0
    2db4:	11 24       	eor	r1, r1
    2db6:	e0 91 4a 04 	lds	r30, 0x044A
    2dba:	f0 91 4b 04 	lds	r31, 0x044B
    2dbe:	e0 0f       	add	r30, r16
    2dc0:	f1 1f       	adc	r31, r17
    2dc2:	e8 0f       	add	r30, r24
    2dc4:	f9 1f       	adc	r31, r25
    2dc6:	80 81       	ld	r24, Z
    2dc8:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZN12OrangutanLCD9send_dataEh>
    2dcc:	20 91 18 04 	lds	r18, 0x0418
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	22 50       	subi	r18, 0x02	; 2
    2dd4:	30 40       	sbci	r19, 0x00	; 0
    2dd6:	80 91 19 04 	lds	r24, 0x0419
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	ac 01       	movw	r20, r24
    2dde:	24 9f       	mul	r18, r20
    2de0:	c0 01       	movw	r24, r0
    2de2:	25 9f       	mul	r18, r21
    2de4:	90 0d       	add	r25, r0
    2de6:	34 9f       	mul	r19, r20
    2de8:	90 0d       	add	r25, r0
    2dea:	11 24       	eor	r1, r1
    2dec:	e0 91 4a 04 	lds	r30, 0x044A
    2df0:	f0 91 4b 04 	lds	r31, 0x044B
    2df4:	e0 0f       	add	r30, r16
    2df6:	f1 1f       	adc	r31, r17
    2df8:	e8 0f       	add	r30, r24
    2dfa:	f9 1f       	adc	r31, r25
    2dfc:	d0 82       	st	Z, r13
    2dfe:	f3 94       	inc	r15
    2e00:	20 91 19 04 	lds	r18, 0x0419
    2e04:	f2 16       	cp	r15, r18
    2e06:	40 f2       	brcs	.-112    	; 0x2d98 <lcd_putchar+0x17e>
    2e08:	60 91 18 04 	lds	r22, 0x0418
    2e0c:	61 50       	subi	r22, 0x01	; 1
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN12OrangutanLCD6gotoXYEhh>
    2e14:	00 e0       	ldi	r16, 0x00	; 0
    2e16:	04 c0       	rjmp	.+8      	; 0x2e20 <lcd_putchar+0x206>
    2e18:	80 e2       	ldi	r24, 0x20	; 32
    2e1a:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZN12OrangutanLCD9send_dataEh>
    2e1e:	0f 5f       	subi	r16, 0xFF	; 255
    2e20:	80 91 19 04 	lds	r24, 0x0419
    2e24:	08 17       	cp	r16, r24
    2e26:	c0 f3       	brcs	.-16     	; 0x2e18 <lcd_putchar+0x1fe>
    2e28:	03 c0       	rjmp	.+6      	; 0x2e30 <lcd_putchar+0x216>
    2e2a:	4f 5f       	subi	r20, 0xFF	; 255
    2e2c:	40 93 4c 04 	sts	0x044C, r20
    2e30:	10 92 4d 04 	sts	0x044D, r1
    2e34:	80 91 4d 04 	lds	r24, 0x044D
    2e38:	60 91 4c 04 	lds	r22, 0x044C
    2e3c:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN12OrangutanLCD6gotoXYEhh>
    2e40:	2e 2d       	mov	r18, r14
    2e42:	33 27       	eor	r19, r19
    2e44:	27 fd       	sbrc	r18, 7
    2e46:	30 95       	com	r19
    2e48:	c9 01       	movw	r24, r18
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	e8 e0       	ldi	r30, 0x08	; 8
    2e50:	0c 94 06 20 	jmp	0x400c	; 0x400c <__epilogue_restores__+0x14>

00002e54 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    2e54:	ef 92       	push	r14
    2e56:	ff 92       	push	r15
    2e58:	0f 93       	push	r16
    2e5a:	1f 93       	push	r17
    2e5c:	cf 93       	push	r28
    2e5e:	df 93       	push	r29
    2e60:	7c 01       	movw	r14, r24
    2e62:	06 2f       	mov	r16, r22
    2e64:	10 e0       	ldi	r17, 0x00	; 0
    2e66:	53 e0       	ldi	r21, 0x03	; 3
    2e68:	00 0f       	add	r16, r16
    2e6a:	11 1f       	adc	r17, r17
    2e6c:	5a 95       	dec	r21
    2e6e:	e1 f7       	brne	.-8      	; 0x2e68 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    2e70:	c0 e0       	ldi	r28, 0x00	; 0
    2e72:	d0 e0       	ldi	r29, 0x00	; 0
    2e74:	9e 01       	movw	r18, r28
    2e76:	20 0f       	add	r18, r16
    2e78:	82 2f       	mov	r24, r18
    2e7a:	80 64       	ori	r24, 0x40	; 64
    2e7c:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN12OrangutanLCD8send_cmdEh>
    2e80:	f7 01       	movw	r30, r14
    2e82:	ec 0f       	add	r30, r28
    2e84:	fd 1f       	adc	r31, r29
    2e86:	e4 91       	lpm	r30, Z+
    2e88:	8e 2f       	mov	r24, r30
    2e8a:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZN12OrangutanLCD9send_dataEh>
    2e8e:	21 96       	adiw	r28, 0x01	; 1
    2e90:	c8 30       	cpi	r28, 0x08	; 8
    2e92:	d1 05       	cpc	r29, r1
    2e94:	79 f7       	brne	.-34     	; 0x2e74 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
    2e9a:	e6 e0       	ldi	r30, 0x06	; 6
    2e9c:	0c 94 08 20 	jmp	0x4010	; 0x4010 <__epilogue_restores__+0x18>

00002ea0 <lcd_load_custom_character>:
    2ea0:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    2ea4:	08 95       	ret

00002ea6 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    2ea6:	60 e0       	ldi	r22, 0x00	; 0
    2ea8:	41 e0       	ldi	r20, 0x01	; 1
    2eaa:	0e 94 46 14 	call	0x288c	; 0x288c <_ZN12OrangutanLCD4sendEhhh>
    2eae:	08 95       	ret

00002eb0 <_ZN12OrangutanLCD6scrollEhhj>:
    2eb0:	0f 93       	push	r16
    2eb2:	1f 93       	push	r17
    2eb4:	cf 93       	push	r28
    2eb6:	df 93       	push	r29
    2eb8:	08 2f       	mov	r16, r24
    2eba:	16 2f       	mov	r17, r22
    2ebc:	ea 01       	movw	r28, r20
    2ebe:	0b c0       	rjmp	.+22     	; 0x2ed6 <_ZN12OrangutanLCD6scrollEhhj+0x26>
    2ec0:	00 23       	and	r16, r16
    2ec2:	11 f4       	brne	.+4      	; 0x2ec8 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    2ec4:	88 e1       	ldi	r24, 0x18	; 24
    2ec6:	01 c0       	rjmp	.+2      	; 0x2eca <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    2ec8:	8c e1       	ldi	r24, 0x1C	; 28
    2eca:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN12OrangutanLCD8send_cmdEh>
    2ece:	ce 01       	movw	r24, r28
    2ed0:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <delay_ms>
    2ed4:	11 50       	subi	r17, 0x01	; 1
    2ed6:	11 23       	and	r17, r17
    2ed8:	99 f7       	brne	.-26     	; 0x2ec0 <_ZN12OrangutanLCD6scrollEhhj+0x10>
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	1f 91       	pop	r17
    2ee0:	0f 91       	pop	r16
    2ee2:	08 95       	ret

00002ee4 <lcd_scroll>:
    2ee4:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <_ZN12OrangutanLCD6scrollEhhj>
    2ee8:	08 95       	ret

00002eea <serial_get_mode>:
    2eea:	28 2f       	mov	r18, r24
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	f9 01       	movw	r30, r18
    2ef0:	93 e0       	ldi	r25, 0x03	; 3
    2ef2:	ee 0f       	add	r30, r30
    2ef4:	ff 1f       	adc	r31, r31
    2ef6:	9a 95       	dec	r25
    2ef8:	e1 f7       	brne	.-8      	; 0x2ef2 <serial_get_mode+0x8>
    2efa:	22 0f       	add	r18, r18
    2efc:	33 1f       	adc	r19, r19
    2efe:	e2 0f       	add	r30, r18
    2f00:	f3 1f       	adc	r31, r19
    2f02:	e6 5e       	subi	r30, 0xE6	; 230
    2f04:	fb 4f       	sbci	r31, 0xFB	; 251
    2f06:	80 81       	ld	r24, Z
    2f08:	08 95       	ret

00002f0a <serial_get_received_bytes>:
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	ee 0f       	add	r30, r30
    2f10:	ff 1f       	adc	r31, r31
    2f12:	ee 0f       	add	r30, r30
    2f14:	ff 1f       	adc	r31, r31
    2f16:	e8 0f       	add	r30, r24
    2f18:	f9 1f       	adc	r31, r25
    2f1a:	ee 0f       	add	r30, r30
    2f1c:	ff 1f       	adc	r31, r31
    2f1e:	e4 5e       	subi	r30, 0xE4	; 228
    2f20:	fb 4f       	sbci	r31, 0xFB	; 251
    2f22:	80 81       	ld	r24, Z
    2f24:	08 95       	ret

00002f26 <serial_receive_buffer_full>:
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	fc 01       	movw	r30, r24
    2f2a:	ee 0f       	add	r30, r30
    2f2c:	ff 1f       	adc	r31, r31
    2f2e:	ee 0f       	add	r30, r30
    2f30:	ff 1f       	adc	r31, r31
    2f32:	e8 0f       	add	r30, r24
    2f34:	f9 1f       	adc	r31, r25
    2f36:	ee 0f       	add	r30, r30
    2f38:	ff 1f       	adc	r31, r31
    2f3a:	e4 5e       	subi	r30, 0xE4	; 228
    2f3c:	fb 4f       	sbci	r31, 0xFB	; 251
    2f3e:	20 81       	ld	r18, Z
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	fc 01       	movw	r30, r24
    2f44:	53 e0       	ldi	r21, 0x03	; 3
    2f46:	ee 0f       	add	r30, r30
    2f48:	ff 1f       	adc	r31, r31
    2f4a:	5a 95       	dec	r21
    2f4c:	e1 f7       	brne	.-8      	; 0x2f46 <serial_receive_buffer_full+0x20>
    2f4e:	88 0f       	add	r24, r24
    2f50:	99 1f       	adc	r25, r25
    2f52:	e8 0f       	add	r30, r24
    2f54:	f9 1f       	adc	r31, r25
    2f56:	e6 5e       	subi	r30, 0xE6	; 230
    2f58:	fb 4f       	sbci	r31, 0xFB	; 251
    2f5a:	84 81       	ldd	r24, Z+4	; 0x04
    2f5c:	28 17       	cp	r18, r24
    2f5e:	09 f4       	brne	.+2      	; 0x2f62 <serial_receive_buffer_full+0x3c>
    2f60:	31 e0       	ldi	r19, 0x01	; 1
    2f62:	83 2f       	mov	r24, r19
    2f64:	08 95       	ret

00002f66 <serial_get_sent_bytes>:
    2f66:	28 2f       	mov	r18, r24
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	f9 01       	movw	r30, r18
    2f6c:	b3 e0       	ldi	r27, 0x03	; 3
    2f6e:	ee 0f       	add	r30, r30
    2f70:	ff 1f       	adc	r31, r31
    2f72:	ba 95       	dec	r27
    2f74:	e1 f7       	brne	.-8      	; 0x2f6e <serial_get_sent_bytes+0x8>
    2f76:	22 0f       	add	r18, r18
    2f78:	33 1f       	adc	r19, r19
    2f7a:	e2 0f       	add	r30, r18
    2f7c:	f3 1f       	adc	r31, r19
    2f7e:	e6 5e       	subi	r30, 0xE6	; 230
    2f80:	fb 4f       	sbci	r31, 0xFB	; 251
    2f82:	81 81       	ldd	r24, Z+1	; 0x01
    2f84:	08 95       	ret

00002f86 <serial_send_buffer_empty>:
    2f86:	28 2f       	mov	r18, r24
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	f9 01       	movw	r30, r18
    2f8c:	73 e0       	ldi	r23, 0x03	; 3
    2f8e:	ee 0f       	add	r30, r30
    2f90:	ff 1f       	adc	r31, r31
    2f92:	7a 95       	dec	r23
    2f94:	e1 f7       	brne	.-8      	; 0x2f8e <serial_send_buffer_empty+0x8>
    2f96:	22 0f       	add	r18, r18
    2f98:	33 1f       	adc	r19, r19
    2f9a:	e2 0f       	add	r30, r18
    2f9c:	f3 1f       	adc	r31, r19
    2f9e:	e6 5e       	subi	r30, 0xE6	; 230
    2fa0:	fb 4f       	sbci	r31, 0xFB	; 251
    2fa2:	91 81       	ldd	r25, Z+1	; 0x01
    2fa4:	40 e0       	ldi	r20, 0x00	; 0
    2fa6:	28 2f       	mov	r18, r24
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	f9 01       	movw	r30, r18
    2fac:	53 e0       	ldi	r21, 0x03	; 3
    2fae:	ee 0f       	add	r30, r30
    2fb0:	ff 1f       	adc	r31, r31
    2fb2:	5a 95       	dec	r21
    2fb4:	e1 f7       	brne	.-8      	; 0x2fae <serial_send_buffer_empty+0x28>
    2fb6:	22 0f       	add	r18, r18
    2fb8:	33 1f       	adc	r19, r19
    2fba:	e2 0f       	add	r30, r18
    2fbc:	f3 1f       	adc	r31, r19
    2fbe:	e6 5e       	subi	r30, 0xE6	; 230
    2fc0:	fb 4f       	sbci	r31, 0xFB	; 251
    2fc2:	83 81       	ldd	r24, Z+3	; 0x03
    2fc4:	98 17       	cp	r25, r24
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <serial_send_buffer_empty+0x44>
    2fc8:	41 e0       	ldi	r20, 0x01	; 1
    2fca:	84 2f       	mov	r24, r20
    2fcc:	08 95       	ret

00002fce <_ZN15OrangutanSerialC2Ev>:
    2fce:	08 95       	ret

00002fd0 <_ZN15OrangutanSerialC1Ev>:
    2fd0:	08 95       	ret

00002fd2 <_ZN15OrangutanSerial8initPortEh>:
    2fd2:	88 23       	and	r24, r24
    2fd4:	21 f0       	breq	.+8      	; 0x2fde <_ZN15OrangutanSerial8initPortEh+0xc>
    2fd6:	81 30       	cpi	r24, 0x01	; 1
    2fd8:	09 f0       	breq	.+2      	; 0x2fdc <_ZN15OrangutanSerial8initPortEh+0xa>
    2fda:	44 c0       	rjmp	.+136    	; 0x3064 <_ZN15OrangutanSerial8initPortEh+0x92>
    2fdc:	1d c0       	rjmp	.+58     	; 0x3018 <_ZN15OrangutanSerial8initPortEh+0x46>
    2fde:	20 91 1a 04 	lds	r18, 0x041A
    2fe2:	22 23       	and	r18, r18
    2fe4:	11 f4       	brne	.+4      	; 0x2fea <_ZN15OrangutanSerial8initPortEh+0x18>
    2fe6:	88 e9       	ldi	r24, 0x98	; 152
    2fe8:	01 c0       	rjmp	.+2      	; 0x2fec <_ZN15OrangutanSerial8initPortEh+0x1a>
    2fea:	88 e1       	ldi	r24, 0x18	; 24
    2fec:	80 93 c1 00 	sts	0x00C1, r24
    2ff0:	80 91 20 04 	lds	r24, 0x0420
    2ff4:	90 91 21 04 	lds	r25, 0x0421
    2ff8:	89 2b       	or	r24, r25
    2ffa:	61 f1       	breq	.+88     	; 0x3054 <_ZN15OrangutanSerial8initPortEh+0x82>
    2ffc:	90 91 1b 04 	lds	r25, 0x041B
    3000:	80 91 1d 04 	lds	r24, 0x041D
    3004:	98 17       	cp	r25, r24
    3006:	30 f5       	brcc	.+76     	; 0x3054 <_ZN15OrangutanSerial8initPortEh+0x82>
    3008:	22 23       	and	r18, r18
    300a:	21 f5       	brne	.+72     	; 0x3054 <_ZN15OrangutanSerial8initPortEh+0x82>
    300c:	80 91 c1 00 	lds	r24, 0x00C1
    3010:	80 62       	ori	r24, 0x20	; 32
    3012:	80 93 c1 00 	sts	0x00C1, r24
    3016:	1c c0       	rjmp	.+56     	; 0x3050 <_ZN15OrangutanSerial8initPortEh+0x7e>
    3018:	20 91 24 04 	lds	r18, 0x0424
    301c:	22 23       	and	r18, r18
    301e:	11 f4       	brne	.+4      	; 0x3024 <_ZN15OrangutanSerial8initPortEh+0x52>
    3020:	88 e9       	ldi	r24, 0x98	; 152
    3022:	01 c0       	rjmp	.+2      	; 0x3026 <_ZN15OrangutanSerial8initPortEh+0x54>
    3024:	88 e1       	ldi	r24, 0x18	; 24
    3026:	80 93 c9 00 	sts	0x00C9, r24
    302a:	80 91 2a 04 	lds	r24, 0x042A
    302e:	90 91 2b 04 	lds	r25, 0x042B
    3032:	89 2b       	or	r24, r25
    3034:	99 f0       	breq	.+38     	; 0x305c <_ZN15OrangutanSerial8initPortEh+0x8a>
    3036:	90 91 25 04 	lds	r25, 0x0425
    303a:	80 91 27 04 	lds	r24, 0x0427
    303e:	98 17       	cp	r25, r24
    3040:	68 f4       	brcc	.+26     	; 0x305c <_ZN15OrangutanSerial8initPortEh+0x8a>
    3042:	22 23       	and	r18, r18
    3044:	59 f4       	brne	.+22     	; 0x305c <_ZN15OrangutanSerial8initPortEh+0x8a>
    3046:	80 91 c9 00 	lds	r24, 0x00C9
    304a:	80 62       	ori	r24, 0x20	; 32
    304c:	80 93 c9 00 	sts	0x00C9, r24
    3050:	78 94       	sei
    3052:	08 95       	ret
    3054:	80 91 c1 00 	lds	r24, 0x00C1
    3058:	8f 7d       	andi	r24, 0xDF	; 223
    305a:	db cf       	rjmp	.-74     	; 0x3012 <_ZN15OrangutanSerial8initPortEh+0x40>
    305c:	80 91 c9 00 	lds	r24, 0x00C9
    3060:	8f 7d       	andi	r24, 0xDF	; 223
    3062:	f4 cf       	rjmp	.-24     	; 0x304c <_ZN15OrangutanSerial8initPortEh+0x7a>
    3064:	08 95       	ret

00003066 <serial_set_mode>:
    3066:	28 2f       	mov	r18, r24
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	f9 01       	movw	r30, r18
    306c:	b3 e0       	ldi	r27, 0x03	; 3
    306e:	ee 0f       	add	r30, r30
    3070:	ff 1f       	adc	r31, r31
    3072:	ba 95       	dec	r27
    3074:	e1 f7       	brne	.-8      	; 0x306e <serial_set_mode+0x8>
    3076:	22 0f       	add	r18, r18
    3078:	33 1f       	adc	r19, r19
    307a:	e2 0f       	add	r30, r18
    307c:	f3 1f       	adc	r31, r19
    307e:	e6 5e       	subi	r30, 0xE6	; 230
    3080:	fb 4f       	sbci	r31, 0xFB	; 251
    3082:	60 83       	st	Z, r22
    3084:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_ZN15OrangutanSerial8initPortEh>
    3088:	08 95       	ret

0000308a <_ZN15OrangutanSerial11setBaudRateEhm>:
    308a:	a0 e0       	ldi	r26, 0x00	; 0
    308c:	b0 e0       	ldi	r27, 0x00	; 0
    308e:	eb e4       	ldi	r30, 0x4B	; 75
    3090:	f8 e1       	ldi	r31, 0x18	; 24
    3092:	0c 94 eb 1f 	jmp	0x3fd6	; 0x3fd6 <__prologue_saves__+0x16>
    3096:	d8 2e       	mov	r13, r24
    3098:	7a 01       	movw	r14, r20
    309a:	8b 01       	movw	r16, r22
    309c:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_ZN15OrangutanSerial8initPortEh>
    30a0:	82 e0       	ldi	r24, 0x02	; 2
    30a2:	d8 16       	cp	r13, r24
    30a4:	19 f1       	breq	.+70     	; 0x30ec <_ZN15OrangutanSerial11setBaudRateEhm+0x62>
    30a6:	dd 20       	and	r13, r13
    30a8:	19 f0       	breq	.+6      	; 0x30b0 <_ZN15OrangutanSerial11setBaudRateEhm+0x26>
    30aa:	cc ec       	ldi	r28, 0xCC	; 204
    30ac:	d0 e0       	ldi	r29, 0x00	; 0
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <_ZN15OrangutanSerial11setBaudRateEhm+0x2a>
    30b0:	c4 ec       	ldi	r28, 0xC4	; 196
    30b2:	d0 e0       	ldi	r29, 0x00	; 0
    30b4:	60 ea       	ldi	r22, 0xA0	; 160
    30b6:	75 e2       	ldi	r23, 0x25	; 37
    30b8:	86 e2       	ldi	r24, 0x26	; 38
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	6e 19       	sub	r22, r14
    30be:	7f 09       	sbc	r23, r15
    30c0:	80 0b       	sbc	r24, r16
    30c2:	91 0b       	sbc	r25, r17
    30c4:	33 e0       	ldi	r19, 0x03	; 3
    30c6:	66 0f       	add	r22, r22
    30c8:	77 1f       	adc	r23, r23
    30ca:	88 1f       	adc	r24, r24
    30cc:	99 1f       	adc	r25, r25
    30ce:	3a 95       	dec	r19
    30d0:	d1 f7       	brne	.-12     	; 0x30c6 <_ZN15OrangutanSerial11setBaudRateEhm+0x3c>
    30d2:	24 e0       	ldi	r18, 0x04	; 4
    30d4:	ee 0c       	add	r14, r14
    30d6:	ff 1c       	adc	r15, r15
    30d8:	00 1f       	adc	r16, r16
    30da:	11 1f       	adc	r17, r17
    30dc:	2a 95       	dec	r18
    30de:	d1 f7       	brne	.-12     	; 0x30d4 <_ZN15OrangutanSerial11setBaudRateEhm+0x4a>
    30e0:	a8 01       	movw	r20, r16
    30e2:	97 01       	movw	r18, r14
    30e4:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__udivmodsi4>
    30e8:	39 83       	std	Y+1, r19	; 0x01
    30ea:	28 83       	st	Y, r18
    30ec:	cd b7       	in	r28, 0x3d	; 61
    30ee:	de b7       	in	r29, 0x3e	; 62
    30f0:	e7 e0       	ldi	r30, 0x07	; 7
    30f2:	0c 94 07 20 	jmp	0x400e	; 0x400e <__epilogue_restores__+0x16>

000030f6 <serial_set_baud_rate>:
    30f6:	0e 94 45 18 	call	0x308a	; 0x308a <_ZN15OrangutanSerial11setBaudRateEhm>
    30fa:	08 95       	ret

000030fc <_ZN15OrangutanSerial7setModeEhh>:
    30fc:	28 2f       	mov	r18, r24
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	f9 01       	movw	r30, r18
    3102:	53 e0       	ldi	r21, 0x03	; 3
    3104:	ee 0f       	add	r30, r30
    3106:	ff 1f       	adc	r31, r31
    3108:	5a 95       	dec	r21
    310a:	e1 f7       	brne	.-8      	; 0x3104 <_ZN15OrangutanSerial7setModeEhh+0x8>
    310c:	22 0f       	add	r18, r18
    310e:	33 1f       	adc	r19, r19
    3110:	e2 0f       	add	r30, r18
    3112:	f3 1f       	adc	r31, r19
    3114:	e6 5e       	subi	r30, 0xE6	; 230
    3116:	fb 4f       	sbci	r31, 0xFB	; 251
    3118:	60 83       	st	Z, r22
    311a:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <_ZN15OrangutanSerial8initPortEh>
    311e:	08 95       	ret

00003120 <_ZN15OrangutanSerial7receiveEhPch>:
    3120:	58 2f       	mov	r21, r24
    3122:	82 30       	cpi	r24, 0x02	; 2
    3124:	51 f0       	breq	.+20     	; 0x313a <_ZN15OrangutanSerial7receiveEhPch+0x1a>
    3126:	88 23       	and	r24, r24
    3128:	19 f0       	breq	.+6      	; 0x3130 <_ZN15OrangutanSerial7receiveEhPch+0x10>
    312a:	e9 ec       	ldi	r30, 0xC9	; 201
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	02 c0       	rjmp	.+4      	; 0x3134 <_ZN15OrangutanSerial7receiveEhPch+0x14>
    3130:	e1 ec       	ldi	r30, 0xC1	; 193
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	8f 77       	andi	r24, 0x7F	; 127
    3138:	80 83       	st	Z, r24
    313a:	25 2f       	mov	r18, r21
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	d9 01       	movw	r26, r18
    3140:	aa 0f       	add	r26, r26
    3142:	bb 1f       	adc	r27, r27
    3144:	c9 01       	movw	r24, r18
    3146:	e3 e0       	ldi	r30, 0x03	; 3
    3148:	88 0f       	add	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	ea 95       	dec	r30
    314e:	e1 f7       	brne	.-8      	; 0x3148 <_ZN15OrangutanSerial7receiveEhPch+0x28>
    3150:	a8 0f       	add	r26, r24
    3152:	b9 1f       	adc	r27, r25
    3154:	a6 5e       	subi	r26, 0xE6	; 230
    3156:	bb 4f       	sbci	r27, 0xFB	; 251
    3158:	19 96       	adiw	r26, 0x09	; 9
    315a:	7c 93       	st	X, r23
    315c:	6e 93       	st	-X, r22
    315e:	18 97       	sbiw	r26, 0x08	; 8
    3160:	f9 01       	movw	r30, r18
    3162:	ee 0f       	add	r30, r30
    3164:	ff 1f       	adc	r31, r31
    3166:	ee 0f       	add	r30, r30
    3168:	ff 1f       	adc	r31, r31
    316a:	e2 0f       	add	r30, r18
    316c:	f3 1f       	adc	r31, r19
    316e:	ee 0f       	add	r30, r30
    3170:	ff 1f       	adc	r31, r31
    3172:	e4 5e       	subi	r30, 0xE4	; 228
    3174:	fb 4f       	sbci	r31, 0xFB	; 251
    3176:	10 82       	st	Z, r1
    3178:	14 96       	adiw	r26, 0x04	; 4
    317a:	4c 93       	st	X, r20
    317c:	14 97       	sbiw	r26, 0x04	; 4
    317e:	15 96       	adiw	r26, 0x05	; 5
    3180:	1c 92       	st	X, r1
    3182:	15 97       	sbiw	r26, 0x05	; 5
    3184:	52 30       	cpi	r21, 0x02	; 2
    3186:	69 f0       	breq	.+26     	; 0x31a2 <_ZN15OrangutanSerial7receiveEhPch+0x82>
    3188:	8c 91       	ld	r24, X
    318a:	88 23       	and	r24, r24
    318c:	51 f4       	brne	.+20     	; 0x31a2 <_ZN15OrangutanSerial7receiveEhPch+0x82>
    318e:	55 23       	and	r21, r21
    3190:	19 f0       	breq	.+6      	; 0x3198 <_ZN15OrangutanSerial7receiveEhPch+0x78>
    3192:	e9 ec       	ldi	r30, 0xC9	; 201
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	02 c0       	rjmp	.+4      	; 0x319c <_ZN15OrangutanSerial7receiveEhPch+0x7c>
    3198:	e1 ec       	ldi	r30, 0xC1	; 193
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	80 81       	ld	r24, Z
    319e:	80 68       	ori	r24, 0x80	; 128
    31a0:	80 83       	st	Z, r24
    31a2:	08 95       	ret

000031a4 <serial_receive>:
    31a4:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN15OrangutanSerial7receiveEhPch>
    31a8:	08 95       	ret

000031aa <_ZN15OrangutanSerial11receiveRingEhPch>:
    31aa:	58 2f       	mov	r21, r24
    31ac:	82 30       	cpi	r24, 0x02	; 2
    31ae:	51 f0       	breq	.+20     	; 0x31c4 <_ZN15OrangutanSerial11receiveRingEhPch+0x1a>
    31b0:	88 23       	and	r24, r24
    31b2:	19 f0       	breq	.+6      	; 0x31ba <_ZN15OrangutanSerial11receiveRingEhPch+0x10>
    31b4:	e9 ec       	ldi	r30, 0xC9	; 201
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	02 c0       	rjmp	.+4      	; 0x31be <_ZN15OrangutanSerial11receiveRingEhPch+0x14>
    31ba:	e1 ec       	ldi	r30, 0xC1	; 193
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	80 81       	ld	r24, Z
    31c0:	8f 77       	andi	r24, 0x7F	; 127
    31c2:	80 83       	st	Z, r24
    31c4:	25 2f       	mov	r18, r21
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	d9 01       	movw	r26, r18
    31ca:	aa 0f       	add	r26, r26
    31cc:	bb 1f       	adc	r27, r27
    31ce:	c9 01       	movw	r24, r18
    31d0:	e3 e0       	ldi	r30, 0x03	; 3
    31d2:	88 0f       	add	r24, r24
    31d4:	99 1f       	adc	r25, r25
    31d6:	ea 95       	dec	r30
    31d8:	e1 f7       	brne	.-8      	; 0x31d2 <_ZN15OrangutanSerial11receiveRingEhPch+0x28>
    31da:	a8 0f       	add	r26, r24
    31dc:	b9 1f       	adc	r27, r25
    31de:	a6 5e       	subi	r26, 0xE6	; 230
    31e0:	bb 4f       	sbci	r27, 0xFB	; 251
    31e2:	19 96       	adiw	r26, 0x09	; 9
    31e4:	7c 93       	st	X, r23
    31e6:	6e 93       	st	-X, r22
    31e8:	18 97       	sbiw	r26, 0x08	; 8
    31ea:	f9 01       	movw	r30, r18
    31ec:	ee 0f       	add	r30, r30
    31ee:	ff 1f       	adc	r31, r31
    31f0:	ee 0f       	add	r30, r30
    31f2:	ff 1f       	adc	r31, r31
    31f4:	e2 0f       	add	r30, r18
    31f6:	f3 1f       	adc	r31, r19
    31f8:	ee 0f       	add	r30, r30
    31fa:	ff 1f       	adc	r31, r31
    31fc:	e4 5e       	subi	r30, 0xE4	; 228
    31fe:	fb 4f       	sbci	r31, 0xFB	; 251
    3200:	10 82       	st	Z, r1
    3202:	14 96       	adiw	r26, 0x04	; 4
    3204:	4c 93       	st	X, r20
    3206:	14 97       	sbiw	r26, 0x04	; 4
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	15 96       	adiw	r26, 0x05	; 5
    320c:	8c 93       	st	X, r24
    320e:	15 97       	sbiw	r26, 0x05	; 5
    3210:	52 30       	cpi	r21, 0x02	; 2
    3212:	69 f0       	breq	.+26     	; 0x322e <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    3214:	8c 91       	ld	r24, X
    3216:	88 23       	and	r24, r24
    3218:	51 f4       	brne	.+20     	; 0x322e <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    321a:	55 23       	and	r21, r21
    321c:	19 f0       	breq	.+6      	; 0x3224 <_ZN15OrangutanSerial11receiveRingEhPch+0x7a>
    321e:	e9 ec       	ldi	r30, 0xC9	; 201
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	02 c0       	rjmp	.+4      	; 0x3228 <_ZN15OrangutanSerial11receiveRingEhPch+0x7e>
    3224:	e1 ec       	ldi	r30, 0xC1	; 193
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	80 68       	ori	r24, 0x80	; 128
    322c:	80 83       	st	Z, r24
    322e:	08 95       	ret

00003230 <serial_receive_ring>:
    3230:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN15OrangutanSerial11receiveRingEhPch>
    3234:	08 95       	ret

00003236 <_ZN15OrangutanSerial13cancelReceiveEh>:
    3236:	60 e0       	ldi	r22, 0x00	; 0
    3238:	70 e0       	ldi	r23, 0x00	; 0
    323a:	40 e0       	ldi	r20, 0x00	; 0
    323c:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN15OrangutanSerial7receiveEhPch>
    3240:	08 95       	ret

00003242 <serial_cancel_receive>:
    3242:	0e 94 1b 19 	call	0x3236	; 0x3236 <_ZN15OrangutanSerial13cancelReceiveEh>
    3246:	08 95       	ret

00003248 <__vector_20>:
    3248:	1f 92       	push	r1
    324a:	0f 92       	push	r0
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	0f 92       	push	r0
    3250:	0b b6       	in	r0, 0x3b	; 59
    3252:	0f 92       	push	r0
    3254:	11 24       	eor	r1, r1
    3256:	2f 93       	push	r18
    3258:	8f 93       	push	r24
    325a:	9f 93       	push	r25
    325c:	ef 93       	push	r30
    325e:	ff 93       	push	r31
    3260:	20 91 c6 00 	lds	r18, 0x00C6
    3264:	e0 91 22 04 	lds	r30, 0x0422
    3268:	f0 91 23 04 	lds	r31, 0x0423
    326c:	30 97       	sbiw	r30, 0x00	; 0
    326e:	81 f0       	breq	.+32     	; 0x3290 <__vector_20+0x48>
    3270:	90 91 1c 04 	lds	r25, 0x041C
    3274:	80 91 1e 04 	lds	r24, 0x041E
    3278:	98 17       	cp	r25, r24
    327a:	50 f4       	brcc	.+20     	; 0x3290 <__vector_20+0x48>
    327c:	80 91 1c 04 	lds	r24, 0x041C
    3280:	e8 0f       	add	r30, r24
    3282:	f1 1d       	adc	r31, r1
    3284:	20 83       	st	Z, r18
    3286:	80 91 1c 04 	lds	r24, 0x041C
    328a:	8f 5f       	subi	r24, 0xFF	; 255
    328c:	80 93 1c 04 	sts	0x041C, r24
    3290:	90 91 1c 04 	lds	r25, 0x041C
    3294:	80 91 1e 04 	lds	r24, 0x041E
    3298:	98 17       	cp	r25, r24
    329a:	31 f4       	brne	.+12     	; 0x32a8 <__vector_20+0x60>
    329c:	80 91 1f 04 	lds	r24, 0x041F
    32a0:	88 23       	and	r24, r24
    32a2:	11 f0       	breq	.+4      	; 0x32a8 <__vector_20+0x60>
    32a4:	10 92 1c 04 	sts	0x041C, r1
    32a8:	ff 91       	pop	r31
    32aa:	ef 91       	pop	r30
    32ac:	9f 91       	pop	r25
    32ae:	8f 91       	pop	r24
    32b0:	2f 91       	pop	r18
    32b2:	0f 90       	pop	r0
    32b4:	0b be       	out	0x3b, r0	; 59
    32b6:	0f 90       	pop	r0
    32b8:	0f be       	out	0x3f, r0	; 63
    32ba:	0f 90       	pop	r0
    32bc:	1f 90       	pop	r1
    32be:	18 95       	reti

000032c0 <__vector_28>:
    32c0:	1f 92       	push	r1
    32c2:	0f 92       	push	r0
    32c4:	0f b6       	in	r0, 0x3f	; 63
    32c6:	0f 92       	push	r0
    32c8:	0b b6       	in	r0, 0x3b	; 59
    32ca:	0f 92       	push	r0
    32cc:	11 24       	eor	r1, r1
    32ce:	2f 93       	push	r18
    32d0:	8f 93       	push	r24
    32d2:	9f 93       	push	r25
    32d4:	ef 93       	push	r30
    32d6:	ff 93       	push	r31
    32d8:	20 91 ce 00 	lds	r18, 0x00CE
    32dc:	e0 91 2c 04 	lds	r30, 0x042C
    32e0:	f0 91 2d 04 	lds	r31, 0x042D
    32e4:	30 97       	sbiw	r30, 0x00	; 0
    32e6:	81 f0       	breq	.+32     	; 0x3308 <__vector_28+0x48>
    32e8:	90 91 26 04 	lds	r25, 0x0426
    32ec:	80 91 28 04 	lds	r24, 0x0428
    32f0:	98 17       	cp	r25, r24
    32f2:	50 f4       	brcc	.+20     	; 0x3308 <__vector_28+0x48>
    32f4:	80 91 26 04 	lds	r24, 0x0426
    32f8:	e8 0f       	add	r30, r24
    32fa:	f1 1d       	adc	r31, r1
    32fc:	20 83       	st	Z, r18
    32fe:	80 91 26 04 	lds	r24, 0x0426
    3302:	8f 5f       	subi	r24, 0xFF	; 255
    3304:	80 93 26 04 	sts	0x0426, r24
    3308:	90 91 26 04 	lds	r25, 0x0426
    330c:	80 91 28 04 	lds	r24, 0x0428
    3310:	98 17       	cp	r25, r24
    3312:	31 f4       	brne	.+12     	; 0x3320 <__vector_28+0x60>
    3314:	80 91 29 04 	lds	r24, 0x0429
    3318:	88 23       	and	r24, r24
    331a:	11 f0       	breq	.+4      	; 0x3320 <__vector_28+0x60>
    331c:	10 92 26 04 	sts	0x0426, r1
    3320:	ff 91       	pop	r31
    3322:	ef 91       	pop	r30
    3324:	9f 91       	pop	r25
    3326:	8f 91       	pop	r24
    3328:	2f 91       	pop	r18
    332a:	0f 90       	pop	r0
    332c:	0b be       	out	0x3b, r0	; 59
    332e:	0f 90       	pop	r0
    3330:	0f be       	out	0x3f, r0	; 63
    3332:	0f 90       	pop	r0
    3334:	1f 90       	pop	r1
    3336:	18 95       	reti

00003338 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    3338:	cf 93       	push	r28
    333a:	df 93       	push	r29
    333c:	38 2f       	mov	r19, r24
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	fc 01       	movw	r30, r24
    3342:	53 e0       	ldi	r21, 0x03	; 3
    3344:	ee 0f       	add	r30, r30
    3346:	ff 1f       	adc	r31, r31
    3348:	5a 95       	dec	r21
    334a:	e1 f7       	brne	.-8      	; 0x3344 <_ZN15OrangutanSerial11uart_tx_isrEh+0xc>
    334c:	88 0f       	add	r24, r24
    334e:	99 1f       	adc	r25, r25
    3350:	e8 0f       	add	r30, r24
    3352:	f9 1f       	adc	r31, r25
    3354:	e6 5e       	subi	r30, 0xE6	; 230
    3356:	fb 4f       	sbci	r31, 0xFB	; 251
    3358:	a6 81       	ldd	r26, Z+6	; 0x06
    335a:	b7 81       	ldd	r27, Z+7	; 0x07
    335c:	10 97       	sbiw	r26, 0x00	; 0
    335e:	09 f4       	brne	.+2      	; 0x3362 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2a>
    3360:	64 c0       	rjmp	.+200    	; 0x342a <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    3362:	83 2f       	mov	r24, r19
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	fc 01       	movw	r30, r24
    3368:	23 e0       	ldi	r18, 0x03	; 3
    336a:	ee 0f       	add	r30, r30
    336c:	ff 1f       	adc	r31, r31
    336e:	2a 95       	dec	r18
    3370:	e1 f7       	brne	.-8      	; 0x336a <_ZN15OrangutanSerial11uart_tx_isrEh+0x32>
    3372:	88 0f       	add	r24, r24
    3374:	99 1f       	adc	r25, r25
    3376:	e8 0f       	add	r30, r24
    3378:	f9 1f       	adc	r31, r25
    337a:	e6 5e       	subi	r30, 0xE6	; 230
    337c:	fb 4f       	sbci	r31, 0xFB	; 251
    337e:	21 81       	ldd	r18, Z+1	; 0x01
    3380:	83 2f       	mov	r24, r19
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	fc 01       	movw	r30, r24
    3386:	63 e0       	ldi	r22, 0x03	; 3
    3388:	ee 0f       	add	r30, r30
    338a:	ff 1f       	adc	r31, r31
    338c:	6a 95       	dec	r22
    338e:	e1 f7       	brne	.-8      	; 0x3388 <_ZN15OrangutanSerial11uart_tx_isrEh+0x50>
    3390:	88 0f       	add	r24, r24
    3392:	99 1f       	adc	r25, r25
    3394:	e8 0f       	add	r30, r24
    3396:	f9 1f       	adc	r31, r25
    3398:	e6 5e       	subi	r30, 0xE6	; 230
    339a:	fb 4f       	sbci	r31, 0xFB	; 251
    339c:	83 81       	ldd	r24, Z+3	; 0x03
    339e:	28 17       	cp	r18, r24
    33a0:	08 f0       	brcs	.+2      	; 0x33a4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x6c>
    33a2:	43 c0       	rjmp	.+134    	; 0x342a <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    33a4:	33 23       	and	r19, r19
    33a6:	19 f0       	breq	.+6      	; 0x33ae <_ZN15OrangutanSerial11uart_tx_isrEh+0x76>
    33a8:	e8 ec       	ldi	r30, 0xC8	; 200
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	02 c0       	rjmp	.+4      	; 0x33b2 <_ZN15OrangutanSerial11uart_tx_isrEh+0x7a>
    33ae:	e0 ec       	ldi	r30, 0xC0	; 192
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	80 81       	ld	r24, Z
    33b4:	85 ff       	sbrs	r24, 5
    33b6:	39 c0       	rjmp	.+114    	; 0x342a <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    33b8:	33 23       	and	r19, r19
    33ba:	19 f0       	breq	.+6      	; 0x33c2 <_ZN15OrangutanSerial11uart_tx_isrEh+0x8a>
    33bc:	ce ec       	ldi	r28, 0xCE	; 206
    33be:	d0 e0       	ldi	r29, 0x00	; 0
    33c0:	02 c0       	rjmp	.+4      	; 0x33c6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x8e>
    33c2:	c6 ec       	ldi	r28, 0xC6	; 198
    33c4:	d0 e0       	ldi	r29, 0x00	; 0
    33c6:	83 2f       	mov	r24, r19
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	fc 01       	movw	r30, r24
    33cc:	43 e0       	ldi	r20, 0x03	; 3
    33ce:	ee 0f       	add	r30, r30
    33d0:	ff 1f       	adc	r31, r31
    33d2:	4a 95       	dec	r20
    33d4:	e1 f7       	brne	.-8      	; 0x33ce <_ZN15OrangutanSerial11uart_tx_isrEh+0x96>
    33d6:	88 0f       	add	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	e8 0f       	add	r30, r24
    33dc:	f9 1f       	adc	r31, r25
    33de:	e6 5e       	subi	r30, 0xE6	; 230
    33e0:	fb 4f       	sbci	r31, 0xFB	; 251
    33e2:	81 81       	ldd	r24, Z+1	; 0x01
    33e4:	a8 0f       	add	r26, r24
    33e6:	b1 1d       	adc	r27, r1
    33e8:	8c 91       	ld	r24, X
    33ea:	88 83       	st	Y, r24
    33ec:	83 2f       	mov	r24, r19
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	fc 01       	movw	r30, r24
    33f2:	73 e0       	ldi	r23, 0x03	; 3
    33f4:	ee 0f       	add	r30, r30
    33f6:	ff 1f       	adc	r31, r31
    33f8:	7a 95       	dec	r23
    33fa:	e1 f7       	brne	.-8      	; 0x33f4 <_ZN15OrangutanSerial11uart_tx_isrEh+0xbc>
    33fc:	88 0f       	add	r24, r24
    33fe:	99 1f       	adc	r25, r25
    3400:	e8 0f       	add	r30, r24
    3402:	f9 1f       	adc	r31, r25
    3404:	e6 5e       	subi	r30, 0xE6	; 230
    3406:	fb 4f       	sbci	r31, 0xFB	; 251
    3408:	21 81       	ldd	r18, Z+1	; 0x01
    340a:	2f 5f       	subi	r18, 0xFF	; 255
    340c:	83 2f       	mov	r24, r19
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	fc 01       	movw	r30, r24
    3412:	53 e0       	ldi	r21, 0x03	; 3
    3414:	ee 0f       	add	r30, r30
    3416:	ff 1f       	adc	r31, r31
    3418:	5a 95       	dec	r21
    341a:	e1 f7       	brne	.-8      	; 0x3414 <_ZN15OrangutanSerial11uart_tx_isrEh+0xdc>
    341c:	88 0f       	add	r24, r24
    341e:	99 1f       	adc	r25, r25
    3420:	e8 0f       	add	r30, r24
    3422:	f9 1f       	adc	r31, r25
    3424:	e6 5e       	subi	r30, 0xE6	; 230
    3426:	fb 4f       	sbci	r31, 0xFB	; 251
    3428:	21 83       	std	Z+1, r18	; 0x01
    342a:	83 2f       	mov	r24, r19
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	fc 01       	movw	r30, r24
    3430:	b3 e0       	ldi	r27, 0x03	; 3
    3432:	ee 0f       	add	r30, r30
    3434:	ff 1f       	adc	r31, r31
    3436:	ba 95       	dec	r27
    3438:	e1 f7       	brne	.-8      	; 0x3432 <_ZN15OrangutanSerial11uart_tx_isrEh+0xfa>
    343a:	88 0f       	add	r24, r24
    343c:	99 1f       	adc	r25, r25
    343e:	e8 0f       	add	r30, r24
    3440:	f9 1f       	adc	r31, r25
    3442:	e6 5e       	subi	r30, 0xE6	; 230
    3444:	fb 4f       	sbci	r31, 0xFB	; 251
    3446:	86 81       	ldd	r24, Z+6	; 0x06
    3448:	97 81       	ldd	r25, Z+7	; 0x07
    344a:	89 2b       	or	r24, r25
    344c:	09 f4       	brne	.+2      	; 0x3450 <_ZN15OrangutanSerial11uart_tx_isrEh+0x118>
    344e:	43 c0       	rjmp	.+134    	; 0x34d6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    3450:	83 2f       	mov	r24, r19
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	fc 01       	movw	r30, r24
    3456:	73 e0       	ldi	r23, 0x03	; 3
    3458:	ee 0f       	add	r30, r30
    345a:	ff 1f       	adc	r31, r31
    345c:	7a 95       	dec	r23
    345e:	e1 f7       	brne	.-8      	; 0x3458 <_ZN15OrangutanSerial11uart_tx_isrEh+0x120>
    3460:	88 0f       	add	r24, r24
    3462:	99 1f       	adc	r25, r25
    3464:	e8 0f       	add	r30, r24
    3466:	f9 1f       	adc	r31, r25
    3468:	e6 5e       	subi	r30, 0xE6	; 230
    346a:	fb 4f       	sbci	r31, 0xFB	; 251
    346c:	21 81       	ldd	r18, Z+1	; 0x01
    346e:	83 2f       	mov	r24, r19
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	fc 01       	movw	r30, r24
    3474:	53 e0       	ldi	r21, 0x03	; 3
    3476:	ee 0f       	add	r30, r30
    3478:	ff 1f       	adc	r31, r31
    347a:	5a 95       	dec	r21
    347c:	e1 f7       	brne	.-8      	; 0x3476 <_ZN15OrangutanSerial11uart_tx_isrEh+0x13e>
    347e:	88 0f       	add	r24, r24
    3480:	99 1f       	adc	r25, r25
    3482:	e8 0f       	add	r30, r24
    3484:	f9 1f       	adc	r31, r25
    3486:	e6 5e       	subi	r30, 0xE6	; 230
    3488:	fb 4f       	sbci	r31, 0xFB	; 251
    348a:	83 81       	ldd	r24, Z+3	; 0x03
    348c:	28 17       	cp	r18, r24
    348e:	18 f5       	brcc	.+70     	; 0x34d6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    3490:	83 2f       	mov	r24, r19
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	fc 01       	movw	r30, r24
    3496:	b3 e0       	ldi	r27, 0x03	; 3
    3498:	ee 0f       	add	r30, r30
    349a:	ff 1f       	adc	r31, r31
    349c:	ba 95       	dec	r27
    349e:	e1 f7       	brne	.-8      	; 0x3498 <_ZN15OrangutanSerial11uart_tx_isrEh+0x160>
    34a0:	88 0f       	add	r24, r24
    34a2:	99 1f       	adc	r25, r25
    34a4:	e8 0f       	add	r30, r24
    34a6:	f9 1f       	adc	r31, r25
    34a8:	e6 5e       	subi	r30, 0xE6	; 230
    34aa:	fb 4f       	sbci	r31, 0xFB	; 251
    34ac:	80 81       	ld	r24, Z
    34ae:	88 23       	and	r24, r24
    34b0:	91 f4       	brne	.+36     	; 0x34d6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    34b2:	33 23       	and	r19, r19
    34b4:	19 f0       	breq	.+6      	; 0x34bc <_ZN15OrangutanSerial11uart_tx_isrEh+0x184>
    34b6:	e9 ec       	ldi	r30, 0xC9	; 201
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	02 c0       	rjmp	.+4      	; 0x34c0 <_ZN15OrangutanSerial11uart_tx_isrEh+0x188>
    34bc:	e1 ec       	ldi	r30, 0xC1	; 193
    34be:	f0 e0       	ldi	r31, 0x00	; 0
    34c0:	80 81       	ld	r24, Z
    34c2:	80 62       	ori	r24, 0x20	; 32
    34c4:	04 c0       	rjmp	.+8      	; 0x34ce <_ZN15OrangutanSerial11uart_tx_isrEh+0x196>
    34c6:	e9 ec       	ldi	r30, 0xC9	; 201
    34c8:	f0 e0       	ldi	r31, 0x00	; 0
    34ca:	80 81       	ld	r24, Z
    34cc:	8f 7d       	andi	r24, 0xDF	; 223
    34ce:	80 83       	st	Z, r24
    34d0:	df 91       	pop	r29
    34d2:	cf 91       	pop	r28
    34d4:	08 95       	ret
    34d6:	33 23       	and	r19, r19
    34d8:	b1 f7       	brne	.-20     	; 0x34c6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x18e>
    34da:	e1 ec       	ldi	r30, 0xC1	; 193
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	f5 cf       	rjmp	.-22     	; 0x34ca <_ZN15OrangutanSerial11uart_tx_isrEh+0x192>

000034e0 <_ZN15OrangutanSerial4sendEhPch>:
    34e0:	28 2f       	mov	r18, r24
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	fc 01       	movw	r30, r24
    34e6:	53 e0       	ldi	r21, 0x03	; 3
    34e8:	ee 0f       	add	r30, r30
    34ea:	ff 1f       	adc	r31, r31
    34ec:	5a 95       	dec	r21
    34ee:	e1 f7       	brne	.-8      	; 0x34e8 <_ZN15OrangutanSerial4sendEhPch+0x8>
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	e8 0f       	add	r30, r24
    34f6:	f9 1f       	adc	r31, r25
    34f8:	e6 5e       	subi	r30, 0xE6	; 230
    34fa:	fb 4f       	sbci	r31, 0xFB	; 251
    34fc:	77 83       	std	Z+7, r23	; 0x07
    34fe:	66 83       	std	Z+6, r22	; 0x06
    3500:	82 2f       	mov	r24, r18
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	fc 01       	movw	r30, r24
    3506:	b3 e0       	ldi	r27, 0x03	; 3
    3508:	ee 0f       	add	r30, r30
    350a:	ff 1f       	adc	r31, r31
    350c:	ba 95       	dec	r27
    350e:	e1 f7       	brne	.-8      	; 0x3508 <_ZN15OrangutanSerial4sendEhPch+0x28>
    3510:	88 0f       	add	r24, r24
    3512:	99 1f       	adc	r25, r25
    3514:	e8 0f       	add	r30, r24
    3516:	f9 1f       	adc	r31, r25
    3518:	e6 5e       	subi	r30, 0xE6	; 230
    351a:	fb 4f       	sbci	r31, 0xFB	; 251
    351c:	11 82       	std	Z+1, r1	; 0x01
    351e:	82 2f       	mov	r24, r18
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	fc 01       	movw	r30, r24
    3524:	73 e0       	ldi	r23, 0x03	; 3
    3526:	ee 0f       	add	r30, r30
    3528:	ff 1f       	adc	r31, r31
    352a:	7a 95       	dec	r23
    352c:	e1 f7       	brne	.-8      	; 0x3526 <_ZN15OrangutanSerial4sendEhPch+0x46>
    352e:	88 0f       	add	r24, r24
    3530:	99 1f       	adc	r25, r25
    3532:	e8 0f       	add	r30, r24
    3534:	f9 1f       	adc	r31, r25
    3536:	e6 5e       	subi	r30, 0xE6	; 230
    3538:	fb 4f       	sbci	r31, 0xFB	; 251
    353a:	43 83       	std	Z+3, r20	; 0x03
    353c:	22 30       	cpi	r18, 0x02	; 2
    353e:	09 f4       	brne	.+2      	; 0x3542 <_ZN15OrangutanSerial4sendEhPch+0x62>
    3540:	49 c0       	rjmp	.+146    	; 0x35d4 <_ZN15OrangutanSerial4sendEhPch+0xf4>
    3542:	82 2f       	mov	r24, r18
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	fc 01       	movw	r30, r24
    3548:	53 e0       	ldi	r21, 0x03	; 3
    354a:	ee 0f       	add	r30, r30
    354c:	ff 1f       	adc	r31, r31
    354e:	5a 95       	dec	r21
    3550:	e1 f7       	brne	.-8      	; 0x354a <_ZN15OrangutanSerial4sendEhPch+0x6a>
    3552:	88 0f       	add	r24, r24
    3554:	99 1f       	adc	r25, r25
    3556:	e8 0f       	add	r30, r24
    3558:	f9 1f       	adc	r31, r25
    355a:	e6 5e       	subi	r30, 0xE6	; 230
    355c:	fb 4f       	sbci	r31, 0xFB	; 251
    355e:	86 81       	ldd	r24, Z+6	; 0x06
    3560:	97 81       	ldd	r25, Z+7	; 0x07
    3562:	89 2b       	or	r24, r25
    3564:	91 f1       	breq	.+100    	; 0x35ca <_ZN15OrangutanSerial4sendEhPch+0xea>
    3566:	82 2f       	mov	r24, r18
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	fc 01       	movw	r30, r24
    356c:	b3 e0       	ldi	r27, 0x03	; 3
    356e:	ee 0f       	add	r30, r30
    3570:	ff 1f       	adc	r31, r31
    3572:	ba 95       	dec	r27
    3574:	e1 f7       	brne	.-8      	; 0x356e <_ZN15OrangutanSerial4sendEhPch+0x8e>
    3576:	88 0f       	add	r24, r24
    3578:	99 1f       	adc	r25, r25
    357a:	e8 0f       	add	r30, r24
    357c:	f9 1f       	adc	r31, r25
    357e:	e6 5e       	subi	r30, 0xE6	; 230
    3580:	fb 4f       	sbci	r31, 0xFB	; 251
    3582:	81 81       	ldd	r24, Z+1	; 0x01
    3584:	84 17       	cp	r24, r20
    3586:	08 f5       	brcc	.+66     	; 0x35ca <_ZN15OrangutanSerial4sendEhPch+0xea>
    3588:	82 2f       	mov	r24, r18
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	fc 01       	movw	r30, r24
    358e:	73 e0       	ldi	r23, 0x03	; 3
    3590:	ee 0f       	add	r30, r30
    3592:	ff 1f       	adc	r31, r31
    3594:	7a 95       	dec	r23
    3596:	e1 f7       	brne	.-8      	; 0x3590 <_ZN15OrangutanSerial4sendEhPch+0xb0>
    3598:	88 0f       	add	r24, r24
    359a:	99 1f       	adc	r25, r25
    359c:	e8 0f       	add	r30, r24
    359e:	f9 1f       	adc	r31, r25
    35a0:	e6 5e       	subi	r30, 0xE6	; 230
    35a2:	fb 4f       	sbci	r31, 0xFB	; 251
    35a4:	80 81       	ld	r24, Z
    35a6:	88 23       	and	r24, r24
    35a8:	81 f4       	brne	.+32     	; 0x35ca <_ZN15OrangutanSerial4sendEhPch+0xea>
    35aa:	22 23       	and	r18, r18
    35ac:	19 f0       	breq	.+6      	; 0x35b4 <_ZN15OrangutanSerial4sendEhPch+0xd4>
    35ae:	e9 ec       	ldi	r30, 0xC9	; 201
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <_ZN15OrangutanSerial4sendEhPch+0xd8>
    35b4:	e1 ec       	ldi	r30, 0xC1	; 193
    35b6:	f0 e0       	ldi	r31, 0x00	; 0
    35b8:	80 81       	ld	r24, Z
    35ba:	80 62       	ori	r24, 0x20	; 32
    35bc:	04 c0       	rjmp	.+8      	; 0x35c6 <_ZN15OrangutanSerial4sendEhPch+0xe6>
    35be:	e9 ec       	ldi	r30, 0xC9	; 201
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
    35c2:	80 81       	ld	r24, Z
    35c4:	8f 7d       	andi	r24, 0xDF	; 223
    35c6:	80 83       	st	Z, r24
    35c8:	08 95       	ret
    35ca:	22 23       	and	r18, r18
    35cc:	c1 f7       	brne	.-16     	; 0x35be <_ZN15OrangutanSerial4sendEhPch+0xde>
    35ce:	e1 ec       	ldi	r30, 0xC1	; 193
    35d0:	f0 e0       	ldi	r31, 0x00	; 0
    35d2:	f7 cf       	rjmp	.-18     	; 0x35c2 <_ZN15OrangutanSerial4sendEhPch+0xe2>
    35d4:	08 95       	ret

000035d6 <serial_send>:
    35d6:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <_ZN15OrangutanSerial4sendEhPch>
    35da:	08 95       	ret

000035dc <__vector_21>:
    35dc:	1f 92       	push	r1
    35de:	0f 92       	push	r0
    35e0:	0f b6       	in	r0, 0x3f	; 63
    35e2:	0f 92       	push	r0
    35e4:	0b b6       	in	r0, 0x3b	; 59
    35e6:	0f 92       	push	r0
    35e8:	11 24       	eor	r1, r1
    35ea:	2f 93       	push	r18
    35ec:	3f 93       	push	r19
    35ee:	4f 93       	push	r20
    35f0:	5f 93       	push	r21
    35f2:	6f 93       	push	r22
    35f4:	7f 93       	push	r23
    35f6:	8f 93       	push	r24
    35f8:	9f 93       	push	r25
    35fa:	af 93       	push	r26
    35fc:	bf 93       	push	r27
    35fe:	ef 93       	push	r30
    3600:	ff 93       	push	r31
    3602:	80 e0       	ldi	r24, 0x00	; 0
    3604:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN15OrangutanSerial11uart_tx_isrEh>
    3608:	ff 91       	pop	r31
    360a:	ef 91       	pop	r30
    360c:	bf 91       	pop	r27
    360e:	af 91       	pop	r26
    3610:	9f 91       	pop	r25
    3612:	8f 91       	pop	r24
    3614:	7f 91       	pop	r23
    3616:	6f 91       	pop	r22
    3618:	5f 91       	pop	r21
    361a:	4f 91       	pop	r20
    361c:	3f 91       	pop	r19
    361e:	2f 91       	pop	r18
    3620:	0f 90       	pop	r0
    3622:	0b be       	out	0x3b, r0	; 59
    3624:	0f 90       	pop	r0
    3626:	0f be       	out	0x3f, r0	; 63
    3628:	0f 90       	pop	r0
    362a:	1f 90       	pop	r1
    362c:	18 95       	reti

0000362e <__vector_29>:
    362e:	1f 92       	push	r1
    3630:	0f 92       	push	r0
    3632:	0f b6       	in	r0, 0x3f	; 63
    3634:	0f 92       	push	r0
    3636:	0b b6       	in	r0, 0x3b	; 59
    3638:	0f 92       	push	r0
    363a:	11 24       	eor	r1, r1
    363c:	2f 93       	push	r18
    363e:	3f 93       	push	r19
    3640:	4f 93       	push	r20
    3642:	5f 93       	push	r21
    3644:	6f 93       	push	r22
    3646:	7f 93       	push	r23
    3648:	8f 93       	push	r24
    364a:	9f 93       	push	r25
    364c:	af 93       	push	r26
    364e:	bf 93       	push	r27
    3650:	ef 93       	push	r30
    3652:	ff 93       	push	r31
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN15OrangutanSerial11uart_tx_isrEh>
    365a:	ff 91       	pop	r31
    365c:	ef 91       	pop	r30
    365e:	bf 91       	pop	r27
    3660:	af 91       	pop	r26
    3662:	9f 91       	pop	r25
    3664:	8f 91       	pop	r24
    3666:	7f 91       	pop	r23
    3668:	6f 91       	pop	r22
    366a:	5f 91       	pop	r21
    366c:	4f 91       	pop	r20
    366e:	3f 91       	pop	r19
    3670:	2f 91       	pop	r18
    3672:	0f 90       	pop	r0
    3674:	0b be       	out	0x3b, r0	; 59
    3676:	0f 90       	pop	r0
    3678:	0f be       	out	0x3f, r0	; 63
    367a:	0f 90       	pop	r0
    367c:	1f 90       	pop	r1
    367e:	18 95       	reti

00003680 <_ZN15OrangutanSerial15serial_tx_checkEh>:
    3680:	98 2f       	mov	r25, r24
    3682:	82 30       	cpi	r24, 0x02	; 2
    3684:	71 f0       	breq	.+28     	; 0x36a2 <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    3686:	88 23       	and	r24, r24
    3688:	19 f0       	breq	.+6      	; 0x3690 <_ZN15OrangutanSerial15serial_tx_checkEh+0x10>
    368a:	e9 ec       	ldi	r30, 0xC9	; 201
    368c:	f0 e0       	ldi	r31, 0x00	; 0
    368e:	02 c0       	rjmp	.+4      	; 0x3694 <_ZN15OrangutanSerial15serial_tx_checkEh+0x14>
    3690:	e1 ec       	ldi	r30, 0xC1	; 193
    3692:	f0 e0       	ldi	r31, 0x00	; 0
    3694:	80 81       	ld	r24, Z
    3696:	8f 7d       	andi	r24, 0xDF	; 223
    3698:	80 83       	st	Z, r24
    369a:	89 2f       	mov	r24, r25
    369c:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN15OrangutanSerial11uart_tx_isrEh>
    36a0:	08 95       	ret
    36a2:	e0 91 34 04 	lds	r30, 0x0434
    36a6:	f0 91 35 04 	lds	r31, 0x0435
    36aa:	30 97       	sbiw	r30, 0x00	; 0
    36ac:	b1 f0       	breq	.+44     	; 0x36da <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    36ae:	90 91 2f 04 	lds	r25, 0x042F
    36b2:	80 91 31 04 	lds	r24, 0x0431
    36b6:	98 17       	cp	r25, r24
    36b8:	80 f4       	brcc	.+32     	; 0x36da <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    36ba:	06 c0       	rjmp	.+12     	; 0x36c8 <_ZN15OrangutanSerial15serial_tx_checkEh+0x48>
    36bc:	80 91 2f 04 	lds	r24, 0x042F
    36c0:	8f 5f       	subi	r24, 0xFF	; 255
    36c2:	80 93 2f 04 	sts	0x042F, r24
    36c6:	ed cf       	rjmp	.-38     	; 0x36a2 <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    36c8:	80 91 2f 04 	lds	r24, 0x042F
    36cc:	e8 0f       	add	r30, r24
    36ce:	f1 1d       	adc	r31, r1
    36d0:	80 81       	ld	r24, Z
    36d2:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <_ZN12OrangutanSVP17serialSendIfReadyEc>
    36d6:	88 23       	and	r24, r24
    36d8:	89 f7       	brne	.-30     	; 0x36bc <_ZN15OrangutanSerial15serial_tx_checkEh+0x3c>
    36da:	08 95       	ret

000036dc <_ZN15OrangutanSerial15serial_rx_checkEh>:
    36dc:	0f 93       	push	r16
    36de:	1f 93       	push	r17
    36e0:	cf 93       	push	r28
    36e2:	df 93       	push	r29
    36e4:	68 2f       	mov	r22, r24
    36e6:	82 30       	cpi	r24, 0x02	; 2
    36e8:	09 f4       	brne	.+2      	; 0x36ec <_ZN15OrangutanSerial15serial_rx_checkEh+0x10>
    36ea:	9c c0       	rjmp	.+312    	; 0x3824 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    36ec:	88 23       	and	r24, r24
    36ee:	19 f0       	breq	.+6      	; 0x36f6 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1a>
    36f0:	e9 ec       	ldi	r30, 0xC9	; 201
    36f2:	f0 e0       	ldi	r31, 0x00	; 0
    36f4:	02 c0       	rjmp	.+4      	; 0x36fa <_ZN15OrangutanSerial15serial_rx_checkEh+0x1e>
    36f6:	e1 ec       	ldi	r30, 0xC1	; 193
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	80 81       	ld	r24, Z
    36fc:	8f 77       	andi	r24, 0x7F	; 127
    36fe:	80 83       	st	Z, r24
    3700:	46 2f       	mov	r20, r22
    3702:	50 e0       	ldi	r21, 0x00	; 0
    3704:	da 01       	movw	r26, r20
    3706:	aa 0f       	add	r26, r26
    3708:	bb 1f       	adc	r27, r27
    370a:	ca 01       	movw	r24, r20
    370c:	23 e0       	ldi	r18, 0x03	; 3
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	2a 95       	dec	r18
    3714:	e1 f7       	brne	.-8      	; 0x370e <_ZN15OrangutanSerial15serial_rx_checkEh+0x32>
    3716:	a8 0f       	add	r26, r24
    3718:	b9 1f       	adc	r27, r25
    371a:	a6 5e       	subi	r26, 0xE6	; 230
    371c:	bb 4f       	sbci	r27, 0xFB	; 251
    371e:	18 96       	adiw	r26, 0x08	; 8
    3720:	cd 91       	ld	r28, X+
    3722:	dc 91       	ld	r29, X
    3724:	19 97       	sbiw	r26, 0x09	; 9
    3726:	20 97       	sbiw	r28, 0x00	; 0
    3728:	09 f4       	brne	.+2      	; 0x372c <_ZN15OrangutanSerial15serial_rx_checkEh+0x50>
    372a:	5a c0       	rjmp	.+180    	; 0x37e0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    372c:	fa 01       	movw	r30, r20
    372e:	ee 0f       	add	r30, r30
    3730:	ff 1f       	adc	r31, r31
    3732:	ee 0f       	add	r30, r30
    3734:	ff 1f       	adc	r31, r31
    3736:	e4 0f       	add	r30, r20
    3738:	f5 1f       	adc	r31, r21
    373a:	ee 0f       	add	r30, r30
    373c:	ff 1f       	adc	r31, r31
    373e:	e4 5e       	subi	r30, 0xE4	; 228
    3740:	fb 4f       	sbci	r31, 0xFB	; 251
    3742:	80 81       	ld	r24, Z
    3744:	14 96       	adiw	r26, 0x04	; 4
    3746:	2c 91       	ld	r18, X
    3748:	82 17       	cp	r24, r18
    374a:	08 f0       	brcs	.+2      	; 0x374e <_ZN15OrangutanSerial15serial_rx_checkEh+0x72>
    374c:	49 c0       	rjmp	.+146    	; 0x37e0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    374e:	66 23       	and	r22, r22
    3750:	19 f0       	breq	.+6      	; 0x3758 <_ZN15OrangutanSerial15serial_rx_checkEh+0x7c>
    3752:	e8 ec       	ldi	r30, 0xC8	; 200
    3754:	f0 e0       	ldi	r31, 0x00	; 0
    3756:	02 c0       	rjmp	.+4      	; 0x375c <_ZN15OrangutanSerial15serial_rx_checkEh+0x80>
    3758:	e0 ec       	ldi	r30, 0xC0	; 192
    375a:	f0 e0       	ldi	r31, 0x00	; 0
    375c:	80 81       	ld	r24, Z
    375e:	87 ff       	sbrs	r24, 7
    3760:	3f c0       	rjmp	.+126    	; 0x37e0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3762:	66 23       	and	r22, r22
    3764:	19 f4       	brne	.+6      	; 0x376c <_ZN15OrangutanSerial15serial_rx_checkEh+0x90>
    3766:	e6 ec       	ldi	r30, 0xC6	; 198
    3768:	f0 e0       	ldi	r31, 0x00	; 0
    376a:	02 c0       	rjmp	.+4      	; 0x3770 <_ZN15OrangutanSerial15serial_rx_checkEh+0x94>
    376c:	ee ec       	ldi	r30, 0xCE	; 206
    376e:	f0 e0       	ldi	r31, 0x00	; 0
    3770:	90 81       	ld	r25, Z
    3772:	fa 01       	movw	r30, r20
    3774:	ee 0f       	add	r30, r30
    3776:	ff 1f       	adc	r31, r31
    3778:	ee 0f       	add	r30, r30
    377a:	ff 1f       	adc	r31, r31
    377c:	e4 0f       	add	r30, r20
    377e:	f5 1f       	adc	r31, r21
    3780:	ee 0f       	add	r30, r30
    3782:	ff 1f       	adc	r31, r31
    3784:	e4 5e       	subi	r30, 0xE4	; 228
    3786:	fb 4f       	sbci	r31, 0xFB	; 251
    3788:	80 81       	ld	r24, Z
    378a:	82 17       	cp	r24, r18
    378c:	38 f4       	brcc	.+14     	; 0x379c <_ZN15OrangutanSerial15serial_rx_checkEh+0xc0>
    378e:	80 81       	ld	r24, Z
    3790:	c8 0f       	add	r28, r24
    3792:	d1 1d       	adc	r29, r1
    3794:	98 83       	st	Y, r25
    3796:	80 81       	ld	r24, Z
    3798:	8f 5f       	subi	r24, 0xFF	; 255
    379a:	80 83       	st	Z, r24
    379c:	fa 01       	movw	r30, r20
    379e:	ee 0f       	add	r30, r30
    37a0:	ff 1f       	adc	r31, r31
    37a2:	ee 0f       	add	r30, r30
    37a4:	ff 1f       	adc	r31, r31
    37a6:	e4 0f       	add	r30, r20
    37a8:	f5 1f       	adc	r31, r21
    37aa:	ee 0f       	add	r30, r30
    37ac:	ff 1f       	adc	r31, r31
    37ae:	e4 5e       	subi	r30, 0xE4	; 228
    37b0:	fb 4f       	sbci	r31, 0xFB	; 251
    37b2:	80 81       	ld	r24, Z
    37b4:	da 01       	movw	r26, r20
    37b6:	aa 0f       	add	r26, r26
    37b8:	bb 1f       	adc	r27, r27
    37ba:	9a 01       	movw	r18, r20
    37bc:	13 e0       	ldi	r17, 0x03	; 3
    37be:	22 0f       	add	r18, r18
    37c0:	33 1f       	adc	r19, r19
    37c2:	1a 95       	dec	r17
    37c4:	e1 f7       	brne	.-8      	; 0x37be <_ZN15OrangutanSerial15serial_rx_checkEh+0xe2>
    37c6:	a2 0f       	add	r26, r18
    37c8:	b3 1f       	adc	r27, r19
    37ca:	a6 5e       	subi	r26, 0xE6	; 230
    37cc:	bb 4f       	sbci	r27, 0xFB	; 251
    37ce:	14 96       	adiw	r26, 0x04	; 4
    37d0:	9c 91       	ld	r25, X
    37d2:	14 97       	sbiw	r26, 0x04	; 4
    37d4:	89 17       	cp	r24, r25
    37d6:	21 f4       	brne	.+8      	; 0x37e0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    37d8:	15 96       	adiw	r26, 0x05	; 5
    37da:	8c 91       	ld	r24, X
    37dc:	81 11       	cpse	r24, r1
    37de:	10 82       	st	Z, r1
    37e0:	fa 01       	movw	r30, r20
    37e2:	a3 e0       	ldi	r26, 0x03	; 3
    37e4:	ee 0f       	add	r30, r30
    37e6:	ff 1f       	adc	r31, r31
    37e8:	aa 95       	dec	r26
    37ea:	e1 f7       	brne	.-8      	; 0x37e4 <_ZN15OrangutanSerial15serial_rx_checkEh+0x108>
    37ec:	44 0f       	add	r20, r20
    37ee:	55 1f       	adc	r21, r21
    37f0:	e4 0f       	add	r30, r20
    37f2:	f5 1f       	adc	r31, r21
    37f4:	e6 5e       	subi	r30, 0xE6	; 230
    37f6:	fb 4f       	sbci	r31, 0xFB	; 251
    37f8:	80 81       	ld	r24, Z
    37fa:	88 23       	and	r24, r24
    37fc:	09 f0       	breq	.+2      	; 0x3800 <_ZN15OrangutanSerial15serial_rx_checkEh+0x124>
    37fe:	59 c0       	rjmp	.+178    	; 0x38b2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3800:	66 23       	and	r22, r22
    3802:	19 f0       	breq	.+6      	; 0x380a <_ZN15OrangutanSerial15serial_rx_checkEh+0x12e>
    3804:	e9 ec       	ldi	r30, 0xC9	; 201
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	02 c0       	rjmp	.+4      	; 0x380e <_ZN15OrangutanSerial15serial_rx_checkEh+0x132>
    380a:	e1 ec       	ldi	r30, 0xC1	; 193
    380c:	f0 e0       	ldi	r31, 0x00	; 0
    380e:	80 81       	ld	r24, Z
    3810:	80 68       	ori	r24, 0x80	; 128
    3812:	80 83       	st	Z, r24
    3814:	4e c0       	rjmp	.+156    	; 0x38b2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3816:	80 91 33 04 	lds	r24, 0x0433
    381a:	88 23       	and	r24, r24
    381c:	19 f0       	breq	.+6      	; 0x3824 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    381e:	10 92 30 04 	sts	0x0430, r1
    3822:	47 c0       	rjmp	.+142    	; 0x38b2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3824:	80 91 36 04 	lds	r24, 0x0436
    3828:	90 91 37 04 	lds	r25, 0x0437
    382c:	89 2b       	or	r24, r25
    382e:	09 f4       	brne	.+2      	; 0x3832 <_ZN15OrangutanSerial15serial_rx_checkEh+0x156>
    3830:	40 c0       	rjmp	.+128    	; 0x38b2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3832:	90 91 30 04 	lds	r25, 0x0430
    3836:	80 91 32 04 	lds	r24, 0x0432
    383a:	98 17       	cp	r25, r24
    383c:	d0 f5       	brcc	.+116    	; 0x38b2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    383e:	80 91 53 04 	lds	r24, 0x0453
    3842:	88 23       	and	r24, r24
    3844:	a9 f4       	brne	.+42     	; 0x3870 <_ZN15OrangutanSerial15serial_rx_checkEh+0x194>
    3846:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <_ZN12OrangutanSVP15serialReadStartEv>
    384a:	80 93 53 04 	sts	0x0453, r24
    384e:	10 e0       	ldi	r17, 0x00	; 0
    3850:	0b c0       	rjmp	.+22     	; 0x3868 <_ZN15OrangutanSerial15serial_rx_checkEh+0x18c>
    3852:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <_ZN12OrangutanSVP11getNextByteEv>
    3856:	e0 2f       	mov	r30, r16
    3858:	f0 e0       	ldi	r31, 0x00	; 0
    385a:	31 97       	sbiw	r30, 0x01	; 1
    385c:	e1 1b       	sub	r30, r17
    385e:	f1 09       	sbc	r31, r1
    3860:	ec 5a       	subi	r30, 0xAC	; 172
    3862:	fb 4f       	sbci	r31, 0xFB	; 251
    3864:	80 83       	st	Z, r24
    3866:	1f 5f       	subi	r17, 0xFF	; 255
    3868:	00 91 53 04 	lds	r16, 0x0453
    386c:	10 17       	cp	r17, r16
    386e:	88 f3       	brcs	.-30     	; 0x3852 <_ZN15OrangutanSerial15serial_rx_checkEh+0x176>
    3870:	e0 91 53 04 	lds	r30, 0x0453
    3874:	ee 23       	and	r30, r30
    3876:	e9 f0       	breq	.+58     	; 0x38b2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3878:	80 91 30 04 	lds	r24, 0x0430
    387c:	a0 91 36 04 	lds	r26, 0x0436
    3880:	b0 91 37 04 	lds	r27, 0x0437
    3884:	a8 0f       	add	r26, r24
    3886:	b1 1d       	adc	r27, r1
    3888:	e1 50       	subi	r30, 0x01	; 1
    388a:	e0 93 53 04 	sts	0x0453, r30
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	ec 5a       	subi	r30, 0xAC	; 172
    3892:	fb 4f       	sbci	r31, 0xFB	; 251
    3894:	80 81       	ld	r24, Z
    3896:	8c 93       	st	X, r24
    3898:	80 91 30 04 	lds	r24, 0x0430
    389c:	8f 5f       	subi	r24, 0xFF	; 255
    389e:	80 93 30 04 	sts	0x0430, r24
    38a2:	90 91 30 04 	lds	r25, 0x0430
    38a6:	80 91 32 04 	lds	r24, 0x0432
    38aa:	98 17       	cp	r25, r24
    38ac:	09 f0       	breq	.+2      	; 0x38b0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d4>
    38ae:	ba cf       	rjmp	.-140    	; 0x3824 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    38b0:	b2 cf       	rjmp	.-156    	; 0x3816 <_ZN15OrangutanSerial15serial_rx_checkEh+0x13a>
    38b2:	df 91       	pop	r29
    38b4:	cf 91       	pop	r28
    38b6:	1f 91       	pop	r17
    38b8:	0f 91       	pop	r16
    38ba:	08 95       	ret

000038bc <_ZN15OrangutanSerial5checkEv>:
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	0e 94 40 1b 	call	0x3680	; 0x3680 <_ZN15OrangutanSerial15serial_tx_checkEh>
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	0e 94 40 1b 	call	0x3680	; 0x3680 <_ZN15OrangutanSerial15serial_tx_checkEh>
    38c8:	82 e0       	ldi	r24, 0x02	; 2
    38ca:	0e 94 40 1b 	call	0x3680	; 0x3680 <_ZN15OrangutanSerial15serial_tx_checkEh>
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <_ZN15OrangutanSerial15serial_rx_checkEh>
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <_ZN15OrangutanSerial15serial_rx_checkEh>
    38da:	82 e0       	ldi	r24, 0x02	; 2
    38dc:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <_ZN15OrangutanSerial15serial_rx_checkEh>
    38e0:	08 95       	ret

000038e2 <_ZN15OrangutanSerial12sendBlockingEhPch>:
    38e2:	1f 93       	push	r17
    38e4:	18 2f       	mov	r17, r24
    38e6:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <_ZN15OrangutanSerial4sendEhPch>
    38ea:	02 c0       	rjmp	.+4      	; 0x38f0 <_ZN15OrangutanSerial12sendBlockingEhPch+0xe>
    38ec:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <_ZN15OrangutanSerial5checkEv>
    38f0:	81 2f       	mov	r24, r17
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	fc 01       	movw	r30, r24
    38f6:	73 e0       	ldi	r23, 0x03	; 3
    38f8:	ee 0f       	add	r30, r30
    38fa:	ff 1f       	adc	r31, r31
    38fc:	7a 95       	dec	r23
    38fe:	e1 f7       	brne	.-8      	; 0x38f8 <_ZN15OrangutanSerial12sendBlockingEhPch+0x16>
    3900:	88 0f       	add	r24, r24
    3902:	99 1f       	adc	r25, r25
    3904:	e8 0f       	add	r30, r24
    3906:	f9 1f       	adc	r31, r25
    3908:	e6 5e       	subi	r30, 0xE6	; 230
    390a:	fb 4f       	sbci	r31, 0xFB	; 251
    390c:	21 81       	ldd	r18, Z+1	; 0x01
    390e:	81 2f       	mov	r24, r17
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	fc 01       	movw	r30, r24
    3914:	53 e0       	ldi	r21, 0x03	; 3
    3916:	ee 0f       	add	r30, r30
    3918:	ff 1f       	adc	r31, r31
    391a:	5a 95       	dec	r21
    391c:	e1 f7       	brne	.-8      	; 0x3916 <_ZN15OrangutanSerial12sendBlockingEhPch+0x34>
    391e:	88 0f       	add	r24, r24
    3920:	99 1f       	adc	r25, r25
    3922:	e8 0f       	add	r30, r24
    3924:	f9 1f       	adc	r31, r25
    3926:	e6 5e       	subi	r30, 0xE6	; 230
    3928:	fb 4f       	sbci	r31, 0xFB	; 251
    392a:	83 81       	ldd	r24, Z+3	; 0x03
    392c:	28 17       	cp	r18, r24
    392e:	f1 f6       	brne	.-68     	; 0x38ec <_ZN15OrangutanSerial12sendBlockingEhPch+0xa>
    3930:	1f 91       	pop	r17
    3932:	08 95       	ret

00003934 <serial_send_blocking>:
    3934:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <_ZN15OrangutanSerial12sendBlockingEhPch>
    3938:	08 95       	ret

0000393a <_ZN15OrangutanSerial15receiveBlockingEhPchj>:
    393a:	a0 e0       	ldi	r26, 0x00	; 0
    393c:	b0 e0       	ldi	r27, 0x00	; 0
    393e:	e3 ea       	ldi	r30, 0xA3	; 163
    3940:	fc e1       	ldi	r31, 0x1C	; 28
    3942:	0c 94 e6 1f 	jmp	0x3fcc	; 0x3fcc <__prologue_saves__+0xc>
    3946:	08 2f       	mov	r16, r24
    3948:	79 01       	movw	r14, r18
    394a:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN15OrangutanSerial7receiveEhPch>
    394e:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <get_ms>
    3952:	4b 01       	movw	r8, r22
    3954:	5c 01       	movw	r10, r24
    3956:	10 e0       	ldi	r17, 0x00	; 0
    3958:	e8 01       	movw	r28, r16
    395a:	cc 0f       	add	r28, r28
    395c:	dd 1f       	adc	r29, r29
    395e:	cc 0f       	add	r28, r28
    3960:	dd 1f       	adc	r29, r29
    3962:	c0 0f       	add	r28, r16
    3964:	d1 1f       	adc	r29, r17
    3966:	cc 0f       	add	r28, r28
    3968:	dd 1f       	adc	r29, r29
    396a:	c4 5e       	subi	r28, 0xE4	; 228
    396c:	db 4f       	sbci	r29, 0xFB	; 251
    396e:	68 01       	movw	r12, r16
    3970:	f3 e0       	ldi	r31, 0x03	; 3
    3972:	cc 0c       	add	r12, r12
    3974:	dd 1c       	adc	r13, r13
    3976:	fa 95       	dec	r31
    3978:	e1 f7       	brne	.-8      	; 0x3972 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x38>
    397a:	00 0f       	add	r16, r16
    397c:	11 1f       	adc	r17, r17
    397e:	c0 0e       	add	r12, r16
    3980:	d1 1e       	adc	r13, r17
    3982:	8e e1       	ldi	r24, 0x1E	; 30
    3984:	94 e0       	ldi	r25, 0x04	; 4
    3986:	c8 0e       	add	r12, r24
    3988:	d9 1e       	adc	r13, r25
    398a:	00 e0       	ldi	r16, 0x00	; 0
    398c:	10 e0       	ldi	r17, 0x00	; 0
    398e:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <_ZN15OrangutanSerial5checkEv>
    3992:	98 81       	ld	r25, Y
    3994:	f6 01       	movw	r30, r12
    3996:	80 81       	ld	r24, Z
    3998:	98 17       	cp	r25, r24
    399a:	11 f4       	brne	.+4      	; 0x39a0 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x66>
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	0c c0       	rjmp	.+24     	; 0x39b8 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x7e>
    39a0:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <get_ms>
    39a4:	68 19       	sub	r22, r8
    39a6:	79 09       	sbc	r23, r9
    39a8:	8a 09       	sbc	r24, r10
    39aa:	9b 09       	sbc	r25, r11
    39ac:	6e 15       	cp	r22, r14
    39ae:	7f 05       	cpc	r23, r15
    39b0:	80 07       	cpc	r24, r16
    39b2:	91 07       	cpc	r25, r17
    39b4:	60 f3       	brcs	.-40     	; 0x398e <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x54>
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
    39bc:	ec e0       	ldi	r30, 0x0C	; 12
    39be:	0c 94 02 20 	jmp	0x4004	; 0x4004 <__epilogue_restores__+0xc>

000039c2 <serial_receive_blocking>:
    39c2:	0e 94 9d 1c 	call	0x393a	; 0x393a <_ZN15OrangutanSerial15receiveBlockingEhPchj>
    39c6:	08 95       	ret

000039c8 <serial_check>:
    39c8:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <_ZN15OrangutanSerial5checkEv>
    39cc:	08 95       	ret

000039ce <__vector_11>:
    39ce:	2f 92       	push	r2
    39d0:	8f 93       	push	r24
    39d2:	9f 93       	push	r25
    39d4:	2f b6       	in	r2, 0x3f	; 63
    39d6:	80 91 5d 04 	lds	r24, 0x045D
    39da:	90 91 5e 04 	lds	r25, 0x045E
    39de:	01 96       	adiw	r24, 0x01	; 1
    39e0:	80 93 5d 04 	sts	0x045D, r24
    39e4:	90 93 5e 04 	sts	0x045E, r25
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	80 91 5f 04 	lds	r24, 0x045F
    39ee:	89 1f       	adc	r24, r25
    39f0:	80 93 5f 04 	sts	0x045F, r24
    39f4:	90 91 65 04 	lds	r25, 0x0465
    39f8:	9c 5f       	subi	r25, 0xFC	; 252
    39fa:	90 93 65 04 	sts	0x0465, r25
    39fe:	80 91 64 04 	lds	r24, 0x0464
    3a02:	80 51       	subi	r24, 0x10	; 16
    3a04:	97 42       	sbci	r25, 0x27	; 39
    3a06:	c0 f0       	brcs	.+48     	; 0x3a38 <end>
    3a08:	90 93 65 04 	sts	0x0465, r25
    3a0c:	80 93 64 04 	sts	0x0464, r24
    3a10:	80 91 60 04 	lds	r24, 0x0460
    3a14:	90 91 61 04 	lds	r25, 0x0461
    3a18:	01 96       	adiw	r24, 0x01	; 1
    3a1a:	80 93 60 04 	sts	0x0460, r24
    3a1e:	90 93 61 04 	sts	0x0461, r25
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	80 91 62 04 	lds	r24, 0x0462
    3a28:	89 1f       	adc	r24, r25
    3a2a:	80 93 62 04 	sts	0x0462, r24
    3a2e:	80 91 63 04 	lds	r24, 0x0463
    3a32:	89 1f       	adc	r24, r25
    3a34:	80 93 63 04 	sts	0x0463, r24

00003a38 <end>:
    3a38:	2f be       	out	0x3f, r2	; 63
    3a3a:	9f 91       	pop	r25
    3a3c:	8f 91       	pop	r24
    3a3e:	2f 90       	pop	r2
    3a40:	18 95       	reti

00003a42 <ticks_to_microseconds>:
    3a42:	6f 5f       	subi	r22, 0xFF	; 255
    3a44:	7f 4f       	sbci	r23, 0xFF	; 255
    3a46:	8f 4f       	sbci	r24, 0xFF	; 255
    3a48:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4a:	66 0f       	add	r22, r22
    3a4c:	77 1f       	adc	r23, r23
    3a4e:	88 1f       	adc	r24, r24
    3a50:	99 1f       	adc	r25, r25
    3a52:	25 e0       	ldi	r18, 0x05	; 5
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e0       	ldi	r20, 0x00	; 0
    3a58:	50 e0       	ldi	r21, 0x00	; 0
    3a5a:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__udivmodsi4>
    3a5e:	ca 01       	movw	r24, r20
    3a60:	b9 01       	movw	r22, r18
    3a62:	08 95       	ret

00003a64 <delay_ms>:
    3a64:	28 ee       	ldi	r18, 0xE8	; 232
    3a66:	33 e0       	ldi	r19, 0x03	; 3
    3a68:	09 c0       	rjmp	.+18     	; 0x3a7c <delay_ms+0x18>
    3a6a:	f9 01       	movw	r30, r18
    3a6c:	6f 93       	push	r22
    3a6e:	64 e0       	ldi	r22, 0x04	; 4
    3a70:	6a 95       	dec	r22
    3a72:	f1 f7       	brne	.-4      	; 0x3a70 <delay_ms+0xc>
    3a74:	6f 91       	pop	r22
    3a76:	31 97       	sbiw	r30, 0x01	; 1
    3a78:	c9 f7       	brne	.-14     	; 0x3a6c <delay_ms+0x8>
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	00 97       	sbiw	r24, 0x00	; 0
    3a7e:	a9 f7       	brne	.-22     	; 0x3a6a <delay_ms+0x6>
    3a80:	08 95       	ret

00003a82 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    3a82:	6f 5f       	subi	r22, 0xFF	; 255
    3a84:	7f 4f       	sbci	r23, 0xFF	; 255
    3a86:	8f 4f       	sbci	r24, 0xFF	; 255
    3a88:	9f 4f       	sbci	r25, 0xFF	; 255
    3a8a:	66 0f       	add	r22, r22
    3a8c:	77 1f       	adc	r23, r23
    3a8e:	88 1f       	adc	r24, r24
    3a90:	99 1f       	adc	r25, r25
    3a92:	25 e0       	ldi	r18, 0x05	; 5
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	40 e0       	ldi	r20, 0x00	; 0
    3a98:	50 e0       	ldi	r21, 0x00	; 0
    3a9a:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__udivmodsi4>
    3a9e:	ca 01       	movw	r24, r20
    3aa0:	b9 01       	movw	r22, r18
    3aa2:	08 95       	ret

00003aa4 <_ZN13OrangutanTime17delayMillisecondsEj>:
    3aa4:	28 ee       	ldi	r18, 0xE8	; 232
    3aa6:	33 e0       	ldi	r19, 0x03	; 3
    3aa8:	09 c0       	rjmp	.+18     	; 0x3abc <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3aaa:	f9 01       	movw	r30, r18
    3aac:	6f 93       	push	r22
    3aae:	64 e0       	ldi	r22, 0x04	; 4
    3ab0:	6a 95       	dec	r22
    3ab2:	f1 f7       	brne	.-4      	; 0x3ab0 <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3ab4:	6f 91       	pop	r22
    3ab6:	31 97       	sbiw	r30, 0x01	; 1
    3ab8:	c9 f7       	brne	.-14     	; 0x3aac <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3aba:	01 97       	sbiw	r24, 0x01	; 1
    3abc:	00 97       	sbiw	r24, 0x00	; 0
    3abe:	a9 f7       	brne	.-22     	; 0x3aaa <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    3ac0:	08 95       	ret

00003ac2 <_ZN13OrangutanTime5init2Ev>:
    3ac2:	a0 e7       	ldi	r26, 0x70	; 112
    3ac4:	b0 e0       	ldi	r27, 0x00	; 0
    3ac6:	8c 91       	ld	r24, X
    3ac8:	8e 7f       	andi	r24, 0xFE	; 254
    3aca:	8c 93       	st	X, r24
    3acc:	e0 eb       	ldi	r30, 0xB0	; 176
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	80 81       	ld	r24, Z
    3ad2:	83 60       	ori	r24, 0x03	; 3
    3ad4:	80 83       	st	Z, r24
    3ad6:	e1 eb       	ldi	r30, 0xB1	; 177
    3ad8:	f0 e0       	ldi	r31, 0x00	; 0
    3ada:	80 81       	ld	r24, Z
    3adc:	80 7f       	andi	r24, 0xF0	; 240
    3ade:	80 83       	st	Z, r24
    3ae0:	80 81       	ld	r24, Z
    3ae2:	82 60       	ori	r24, 0x02	; 2
    3ae4:	80 83       	st	Z, r24
    3ae6:	b8 9a       	sbi	0x17, 0	; 23
    3ae8:	8c 91       	ld	r24, X
    3aea:	81 60       	ori	r24, 0x01	; 1
    3aec:	8c 93       	st	X, r24
    3aee:	78 94       	sei
    3af0:	08 95       	ret

00003af2 <_ZN13OrangutanTime4initEv>:
    3af2:	80 91 66 04 	lds	r24, 0x0466
    3af6:	88 23       	and	r24, r24
    3af8:	29 f4       	brne	.+10     	; 0x3b04 <_ZN13OrangutanTime4initEv+0x12>
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	80 93 66 04 	sts	0x0466, r24
    3b00:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <_ZN13OrangutanTime5init2Ev>
    3b04:	08 95       	ret

00003b06 <_ZN13OrangutanTime2msEv>:
    3b06:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_ZN13OrangutanTime4initEv>
    3b0a:	e0 e7       	ldi	r30, 0x70	; 112
    3b0c:	f0 e0       	ldi	r31, 0x00	; 0
    3b0e:	80 81       	ld	r24, Z
    3b10:	8e 7f       	andi	r24, 0xFE	; 254
    3b12:	80 83       	st	Z, r24
    3b14:	20 91 60 04 	lds	r18, 0x0460
    3b18:	30 91 61 04 	lds	r19, 0x0461
    3b1c:	40 91 62 04 	lds	r20, 0x0462
    3b20:	50 91 63 04 	lds	r21, 0x0463
    3b24:	80 81       	ld	r24, Z
    3b26:	81 60       	ori	r24, 0x01	; 1
    3b28:	80 83       	st	Z, r24
    3b2a:	b9 01       	movw	r22, r18
    3b2c:	ca 01       	movw	r24, r20
    3b2e:	08 95       	ret

00003b30 <get_ms>:
    3b30:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <_ZN13OrangutanTime2msEv>
    3b34:	08 95       	ret

00003b36 <_ZN13OrangutanTime5ticksEv>:
    3b36:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_ZN13OrangutanTime4initEv>
    3b3a:	80 91 70 00 	lds	r24, 0x0070
    3b3e:	8e 7f       	andi	r24, 0xFE	; 254
    3b40:	80 93 70 00 	sts	0x0070, r24
    3b44:	60 91 b2 00 	lds	r22, 0x00B2
    3b48:	80 91 5c 04 	lds	r24, 0x045C
    3b4c:	90 91 5d 04 	lds	r25, 0x045D
    3b50:	a0 91 5e 04 	lds	r26, 0x045E
    3b54:	b0 91 5f 04 	lds	r27, 0x045F
    3b58:	b8 99       	sbic	0x17, 0	; 23
    3b5a:	05 c0       	rjmp	.+10     	; 0x3b66 <_ZN13OrangutanTime5ticksEv+0x30>
    3b5c:	26 2f       	mov	r18, r22
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	40 e0       	ldi	r20, 0x00	; 0
    3b62:	50 e0       	ldi	r21, 0x00	; 0
    3b64:	11 c0       	rjmp	.+34     	; 0x3b88 <_ZN13OrangutanTime5ticksEv+0x52>
    3b66:	80 91 b2 00 	lds	r24, 0x00B2
    3b6a:	20 91 5c 04 	lds	r18, 0x045C
    3b6e:	30 91 5d 04 	lds	r19, 0x045D
    3b72:	40 91 5e 04 	lds	r20, 0x045E
    3b76:	50 91 5f 04 	lds	r21, 0x045F
    3b7a:	20 50       	subi	r18, 0x00	; 0
    3b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b7e:	4f 4f       	sbci	r20, 0xFF	; 255
    3b80:	5f 4f       	sbci	r21, 0xFF	; 255
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	a0 e0       	ldi	r26, 0x00	; 0
    3b86:	b0 e0       	ldi	r27, 0x00	; 0
    3b88:	28 2b       	or	r18, r24
    3b8a:	39 2b       	or	r19, r25
    3b8c:	4a 2b       	or	r20, r26
    3b8e:	5b 2b       	or	r21, r27
    3b90:	80 91 70 00 	lds	r24, 0x0070
    3b94:	81 60       	ori	r24, 0x01	; 1
    3b96:	80 93 70 00 	sts	0x0070, r24
    3b9a:	b9 01       	movw	r22, r18
    3b9c:	ca 01       	movw	r24, r20
    3b9e:	08 95       	ret

00003ba0 <get_ticks>:
    3ba0:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <_ZN13OrangutanTime5ticksEv>
    3ba4:	08 95       	ret

00003ba6 <_ZN13OrangutanTime5resetEv>:
    3ba6:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_ZN13OrangutanTime4initEv>
    3baa:	e0 e7       	ldi	r30, 0x70	; 112
    3bac:	f0 e0       	ldi	r31, 0x00	; 0
    3bae:	80 81       	ld	r24, Z
    3bb0:	8e 7f       	andi	r24, 0xFE	; 254
    3bb2:	80 83       	st	Z, r24
    3bb4:	10 92 60 04 	sts	0x0460, r1
    3bb8:	10 92 61 04 	sts	0x0461, r1
    3bbc:	10 92 62 04 	sts	0x0462, r1
    3bc0:	10 92 63 04 	sts	0x0463, r1
    3bc4:	10 92 65 04 	sts	0x0465, r1
    3bc8:	10 92 64 04 	sts	0x0464, r1
    3bcc:	80 81       	ld	r24, Z
    3bce:	81 60       	ori	r24, 0x01	; 1
    3bd0:	80 83       	st	Z, r24
    3bd2:	08 95       	ret

00003bd4 <time_reset>:
    3bd4:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <_ZN13OrangutanTime5resetEv>
    3bd8:	08 95       	ret

00003bda <_ZN12OrangutanSVP7setModeEh>:
    3bda:	98 2f       	mov	r25, r24
    3bdc:	80 91 7d 04 	lds	r24, 0x047D
    3be0:	89 17       	cp	r24, r25
    3be2:	39 f0       	breq	.+14     	; 0x3bf2 <_ZN12OrangutanSVP7setModeEh+0x18>
    3be4:	90 93 7d 04 	sts	0x047D, r25
    3be8:	89 2f       	mov	r24, r25
    3bea:	80 6c       	ori	r24, 0xC0	; 192
    3bec:	65 e0       	ldi	r22, 0x05	; 5
    3bee:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3bf2:	08 95       	ret

00003bf4 <svp_set_mode>:
    3bf4:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <_ZN12OrangutanSVP7setModeEh>
    3bf8:	08 95       	ret

00003bfa <_ZN12OrangutanSVP17serialSendIfReadyEc>:
    3bfa:	1f 93       	push	r17
    3bfc:	18 2f       	mov	r17, r24
    3bfe:	88 1f       	adc	r24, r24
    3c00:	88 27       	eor	r24, r24
    3c02:	88 1f       	adc	r24, r24
    3c04:	8c 57       	subi	r24, 0x7C	; 124
    3c06:	65 e0       	ldi	r22, 0x05	; 5
    3c08:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3c0c:	81 2f       	mov	r24, r17
    3c0e:	8f 77       	andi	r24, 0x7F	; 127
    3c10:	65 e0       	ldi	r22, 0x05	; 5
    3c12:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3c16:	1f 91       	pop	r17
    3c18:	08 95       	ret

00003c1a <_ZN12OrangutanSVP11getNextByteEv>:
    3c1a:	8f ef       	ldi	r24, 0xFF	; 255
    3c1c:	64 e0       	ldi	r22, 0x04	; 4
    3c1e:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3c22:	08 95       	ret

00003c24 <_ZL23updateVariablesIfNeededv>:
    3c24:	cf 93       	push	r28
    3c26:	df 93       	push	r29
    3c28:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <_ZN13OrangutanTime2msEv>
    3c2c:	20 91 3c 04 	lds	r18, 0x043C
    3c30:	30 91 3d 04 	lds	r19, 0x043D
    3c34:	40 91 3e 04 	lds	r20, 0x043E
    3c38:	50 91 3f 04 	lds	r21, 0x043F
    3c3c:	62 17       	cp	r22, r18
    3c3e:	73 07       	cpc	r23, r19
    3c40:	84 07       	cpc	r24, r20
    3c42:	95 07       	cpc	r25, r21
    3c44:	b9 f0       	breq	.+46     	; 0x3c74 <_ZL23updateVariablesIfNeededv+0x50>
    3c46:	81 e8       	ldi	r24, 0x81	; 129
    3c48:	67 e0       	ldi	r22, 0x07	; 7
    3c4a:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3c4e:	c0 e7       	ldi	r28, 0x70	; 112
    3c50:	d4 e0       	ldi	r29, 0x04	; 4
    3c52:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <_ZN12OrangutanSVP11getNextByteEv>
    3c56:	89 93       	st	Y+, r24
    3c58:	84 e0       	ldi	r24, 0x04	; 4
    3c5a:	cd 37       	cpi	r28, 0x7D	; 125
    3c5c:	d8 07       	cpc	r29, r24
    3c5e:	c9 f7       	brne	.-14     	; 0x3c52 <_ZL23updateVariablesIfNeededv+0x2e>
    3c60:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <_ZN13OrangutanTime2msEv>
    3c64:	60 93 3c 04 	sts	0x043C, r22
    3c68:	70 93 3d 04 	sts	0x043D, r23
    3c6c:	80 93 3e 04 	sts	0x043E, r24
    3c70:	90 93 3f 04 	sts	0x043F, r25
    3c74:	df 91       	pop	r29
    3c76:	cf 91       	pop	r28
    3c78:	08 95       	ret

00003c7a <_ZN12OrangutanSVP9getStatusEv>:
    3c7a:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <_ZL23updateVariablesIfNeededv>
    3c7e:	80 91 70 04 	lds	r24, 0x0470
    3c82:	08 95       	ret

00003c84 <svp_get_status>:
    3c84:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <_ZN12OrangutanSVP9getStatusEv>
    3c88:	08 95       	ret

00003c8a <_ZN12OrangutanSVP21getChannelDMillivoltsEv>:
    3c8a:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <_ZL23updateVariablesIfNeededv>
    3c8e:	80 91 77 04 	lds	r24, 0x0477
    3c92:	90 91 78 04 	lds	r25, 0x0478
    3c96:	08 95       	ret

00003c98 <_ZN12OrangutanSVP21getChannelCMillivoltsEv>:
    3c98:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <_ZL23updateVariablesIfNeededv>
    3c9c:	80 91 75 04 	lds	r24, 0x0475
    3ca0:	90 91 76 04 	lds	r25, 0x0476
    3ca4:	08 95       	ret

00003ca6 <_ZN12OrangutanSVP21getChannelBMillivoltsEv>:
    3ca6:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <_ZL23updateVariablesIfNeededv>
    3caa:	80 91 73 04 	lds	r24, 0x0473
    3cae:	90 91 74 04 	lds	r25, 0x0474
    3cb2:	08 95       	ret

00003cb4 <_ZN12OrangutanSVP21getChannelAMillivoltsEv>:
    3cb4:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <_ZL23updateVariablesIfNeededv>
    3cb8:	80 91 71 04 	lds	r24, 0x0471
    3cbc:	90 91 72 04 	lds	r25, 0x0472
    3cc0:	08 95       	ret

00003cc2 <_ZN12OrangutanSVP20getBatteryMillivoltsEv>:
    3cc2:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <_ZL23updateVariablesIfNeededv>
    3cc6:	80 91 7b 04 	lds	r24, 0x047B
    3cca:	90 91 7c 04 	lds	r25, 0x047C
    3cce:	08 95       	ret

00003cd0 <_ZN12OrangutanSVP20getTrimpotMillivoltsEv>:
    3cd0:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <_ZL23updateVariablesIfNeededv>
    3cd4:	80 91 79 04 	lds	r24, 0x0479
    3cd8:	90 91 7a 04 	lds	r25, 0x047A
    3cdc:	08 95       	ret

00003cde <_ZN12OrangutanSVP15serialReadStartEv>:
    3cde:	83 e8       	ldi	r24, 0x83	; 131
    3ce0:	67 e0       	ldi	r22, 0x07	; 7
    3ce2:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3ce6:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <_ZN12OrangutanSVP11getNextByteEv>
    3cea:	08 95       	ret

00003cec <_Z14updateEncodersv>:
    3cec:	a5 e0       	ldi	r26, 0x05	; 5
    3cee:	b0 e0       	ldi	r27, 0x00	; 0
    3cf0:	ec e7       	ldi	r30, 0x7C	; 124
    3cf2:	fe e1       	ldi	r31, 0x1E	; 30
    3cf4:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__prologue_saves__+0x1e>
    3cf8:	82 e8       	ldi	r24, 0x82	; 130
    3cfa:	66 e0       	ldi	r22, 0x06	; 6
    3cfc:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3d00:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <_ZN12OrangutanSVP11getNextByteEv>
    3d04:	80 93 6b 04 	sts	0x046B, r24
    3d08:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <_ZN12OrangutanSVP11getNextByteEv>
    3d0c:	80 93 6c 04 	sts	0x046C, r24
    3d10:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <_ZN12OrangutanSVP11getNextByteEv>
    3d14:	80 93 6d 04 	sts	0x046D, r24
    3d18:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <_ZN12OrangutanSVP11getNextByteEv>
    3d1c:	80 93 6e 04 	sts	0x046E, r24
    3d20:	10 91 6f 04 	lds	r17, 0x046F
    3d24:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <_ZN12OrangutanSVP11getNextByteEv>
    3d28:	18 2b       	or	r17, r24
    3d2a:	10 93 6f 04 	sts	0x046F, r17
    3d2e:	de 01       	movw	r26, r28
    3d30:	11 96       	adiw	r26, 0x01	; 1
    3d32:	eb e6       	ldi	r30, 0x6B	; 107
    3d34:	f4 e0       	ldi	r31, 0x04	; 4
    3d36:	85 e0       	ldi	r24, 0x05	; 5
    3d38:	01 90       	ld	r0, Z+
    3d3a:	0d 92       	st	X+, r0
    3d3c:	81 50       	subi	r24, 0x01	; 1
    3d3e:	e1 f7       	brne	.-8      	; 0x3d38 <_Z14updateEncodersv+0x4c>
    3d40:	29 81       	ldd	r18, Y+1	; 0x01
    3d42:	3a 81       	ldd	r19, Y+2	; 0x02
    3d44:	4b 81       	ldd	r20, Y+3	; 0x03
    3d46:	5c 81       	ldd	r21, Y+4	; 0x04
    3d48:	6d 81       	ldd	r22, Y+5	; 0x05
    3d4a:	70 e0       	ldi	r23, 0x00	; 0
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	25 96       	adiw	r28, 0x05	; 5
    3d50:	e3 e0       	ldi	r30, 0x03	; 3
    3d52:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <__epilogue_restores__+0x1e>

00003d56 <_ZL22updateEncodersIfNeededv>:
    3d56:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <_ZN13OrangutanTime2msEv>
    3d5a:	20 91 38 04 	lds	r18, 0x0438
    3d5e:	30 91 39 04 	lds	r19, 0x0439
    3d62:	40 91 3a 04 	lds	r20, 0x043A
    3d66:	50 91 3b 04 	lds	r21, 0x043B
    3d6a:	62 17       	cp	r22, r18
    3d6c:	73 07       	cpc	r23, r19
    3d6e:	84 07       	cpc	r24, r20
    3d70:	95 07       	cpc	r25, r21
    3d72:	61 f0       	breq	.+24     	; 0x3d8c <_ZL22updateEncodersIfNeededv+0x36>
    3d74:	0e 94 76 1e 	call	0x3cec	; 0x3cec <_Z14updateEncodersv>
    3d78:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <_ZN13OrangutanTime2msEv>
    3d7c:	60 93 38 04 	sts	0x0438, r22
    3d80:	70 93 39 04 	sts	0x0439, r23
    3d84:	80 93 3a 04 	sts	0x043A, r24
    3d88:	90 93 3b 04 	sts	0x043B, r25
    3d8c:	08 95       	ret

00003d8e <_ZN12OrangutanSVP12checkErrorCDEv>:
    3d8e:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <_ZL22updateEncodersIfNeededv>
    3d92:	80 91 6f 04 	lds	r24, 0x046F
    3d96:	81 fd       	sbrc	r24, 1
    3d98:	02 c0       	rjmp	.+4      	; 0x3d9e <_ZN12OrangutanSVP12checkErrorCDEv+0x10>
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	08 95       	ret
    3d9e:	8d 7f       	andi	r24, 0xFD	; 253
    3da0:	80 93 6f 04 	sts	0x046F, r24
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	08 95       	ret

00003da8 <svp_check_error_cd>:
    3da8:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <_ZN12OrangutanSVP12checkErrorCDEv>
    3dac:	08 95       	ret

00003dae <_ZN12OrangutanSVP12checkErrorABEv>:
    3dae:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <_ZL22updateEncodersIfNeededv>
    3db2:	80 91 6f 04 	lds	r24, 0x046F
    3db6:	80 fd       	sbrc	r24, 0
    3db8:	02 c0       	rjmp	.+4      	; 0x3dbe <_ZN12OrangutanSVP12checkErrorABEv+0x10>
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	08 95       	ret
    3dbe:	8e 7f       	andi	r24, 0xFE	; 254
    3dc0:	80 93 6f 04 	sts	0x046F, r24
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	08 95       	ret

00003dc8 <svp_check_error_ab>:
    3dc8:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <_ZN12OrangutanSVP12checkErrorABEv>
    3dcc:	08 95       	ret

00003dce <_ZN12OrangutanSVP11getCountsCDEv>:
    3dce:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <_ZL22updateEncodersIfNeededv>
    3dd2:	20 91 6d 04 	lds	r18, 0x046D
    3dd6:	30 91 6e 04 	lds	r19, 0x046E
    3dda:	80 91 69 04 	lds	r24, 0x0469
    3dde:	90 91 6a 04 	lds	r25, 0x046A
    3de2:	28 1b       	sub	r18, r24
    3de4:	39 0b       	sbc	r19, r25
    3de6:	c9 01       	movw	r24, r18
    3de8:	08 95       	ret

00003dea <_ZN12OrangutanSVP19getCountsAndResetCDEv>:
    3dea:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <_ZN12OrangutanSVP11getCountsCDEv>
    3dee:	20 91 6d 04 	lds	r18, 0x046D
    3df2:	30 91 6e 04 	lds	r19, 0x046E
    3df6:	30 93 6a 04 	sts	0x046A, r19
    3dfa:	20 93 69 04 	sts	0x0469, r18
    3dfe:	08 95       	ret

00003e00 <svp_get_counts_and_reset_cd>:
    3e00:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <_ZN12OrangutanSVP19getCountsAndResetCDEv>
    3e04:	08 95       	ret

00003e06 <svp_get_counts_cd>:
    3e06:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <_ZN12OrangutanSVP11getCountsCDEv>
    3e0a:	08 95       	ret

00003e0c <_ZN12OrangutanSVP11getCountsABEv>:
    3e0c:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <_ZL22updateEncodersIfNeededv>
    3e10:	20 91 6b 04 	lds	r18, 0x046B
    3e14:	30 91 6c 04 	lds	r19, 0x046C
    3e18:	80 91 67 04 	lds	r24, 0x0467
    3e1c:	90 91 68 04 	lds	r25, 0x0468
    3e20:	28 1b       	sub	r18, r24
    3e22:	39 0b       	sbc	r19, r25
    3e24:	c9 01       	movw	r24, r18
    3e26:	08 95       	ret

00003e28 <_ZN12OrangutanSVP19getCountsAndResetABEv>:
    3e28:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <_ZN12OrangutanSVP11getCountsABEv>
    3e2c:	20 91 6b 04 	lds	r18, 0x046B
    3e30:	30 91 6c 04 	lds	r19, 0x046C
    3e34:	30 93 68 04 	sts	0x0468, r19
    3e38:	20 93 67 04 	sts	0x0467, r18
    3e3c:	08 95       	ret

00003e3e <svp_get_counts_and_reset_ab>:
    3e3e:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <_ZN12OrangutanSVP19getCountsAndResetABEv>
    3e42:	08 95       	ret

00003e44 <svp_get_counts_ab>:
    3e44:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <_ZN12OrangutanSVP11getCountsABEv>
    3e48:	08 95       	ret

00003e4a <_ZN12OrangutanSVP18getFirmwareVersionEv>:
    3e4a:	80 e8       	ldi	r24, 0x80	; 128
    3e4c:	65 e0       	ldi	r22, 0x05	; 5
    3e4e:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3e52:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <_ZN12OrangutanSVP11getNextByteEv>
    3e56:	08 95       	ret

00003e58 <svp_get_firmware_version>:
    3e58:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <_ZN12OrangutanSVP18getFirmwareVersionEv>
    3e5c:	08 95       	ret

00003e5e <_ZN18OrangutanSPIMaster4initEhh>:
    3e5e:	98 2f       	mov	r25, r24
    3e60:	24 99       	sbic	0x04, 4	; 4
    3e62:	0c c0       	rjmp	.+24     	; 0x3e7c <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    3e64:	2c 99       	sbic	0x05, 4	; 5
    3e66:	0a c0       	rjmp	.+20     	; 0x3e7c <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    3e68:	2c 9a       	sbi	0x05, 4	; 5
    3e6a:	ee e1       	ldi	r30, 0x1E	; 30
    3e6c:	f0 e0       	ldi	r31, 0x00	; 0
    3e6e:	6f 93       	push	r22
    3e70:	64 e0       	ldi	r22, 0x04	; 4
    3e72:	6a 95       	dec	r22
    3e74:	f1 f7       	brne	.-4      	; 0x3e72 <_ZN18OrangutanSPIMaster4initEhh+0x14>
    3e76:	6f 91       	pop	r22
    3e78:	31 97       	sbiw	r30, 0x01	; 1
    3e7a:	c9 f7       	brne	.-14     	; 0x3e6e <_ZN18OrangutanSPIMaster4initEhh+0x10>
    3e7c:	84 b1       	in	r24, 0x04	; 4
    3e7e:	80 6a       	ori	r24, 0xA0	; 160
    3e80:	84 b9       	out	0x04, r24	; 4
    3e82:	26 98       	cbi	0x04, 6	; 4
    3e84:	89 2f       	mov	r24, r25
    3e86:	83 70       	andi	r24, 0x03	; 3
    3e88:	80 65       	ori	r24, 0x50	; 80
    3e8a:	6c 7a       	andi	r22, 0xAC	; 172
    3e8c:	86 2b       	or	r24, r22
    3e8e:	8c bd       	out	0x2c, r24	; 44
    3e90:	89 2f       	mov	r24, r25
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	96 95       	lsr	r25
    3e96:	87 95       	ror	r24
    3e98:	96 95       	lsr	r25
    3e9a:	87 95       	ror	r24
    3e9c:	81 70       	andi	r24, 0x01	; 1
    3e9e:	8d bd       	out	0x2d, r24	; 45
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <_ZN13OrangutanTime17delayMillisecondsEj>
    3ea8:	08 95       	ret

00003eaa <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>:
    3eaa:	0f 93       	push	r16
    3eac:	1f 93       	push	r17
    3eae:	08 2f       	mov	r16, r24
    3eb0:	16 2f       	mov	r17, r22
    3eb2:	0c b4       	in	r0, 0x2c	; 44
    3eb4:	06 fc       	sbrc	r0, 6
    3eb6:	04 c0       	rjmp	.+8      	; 0x3ec0 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x16>
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	64 e0       	ldi	r22, 0x04	; 4
    3ebc:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <_ZN18OrangutanSPIMaster4initEhh>
    3ec0:	0c b4       	in	r0, 0x2c	; 44
    3ec2:	04 fc       	sbrc	r0, 4
    3ec4:	03 c0       	rjmp	.+6      	; 0x3ecc <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x22>
    3ec6:	8c b5       	in	r24, 0x2c	; 44
    3ec8:	80 61       	ori	r24, 0x10	; 16
    3eca:	8c bd       	out	0x2c, r24	; 44
    3ecc:	0e bd       	out	0x2e, r16	; 46
    3ece:	05 c0       	rjmp	.+10     	; 0x3eda <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    3ed0:	0c b4       	in	r0, 0x2c	; 44
    3ed2:	04 fc       	sbrc	r0, 4
    3ed4:	02 c0       	rjmp	.+4      	; 0x3eda <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    3ed6:	80 e0       	ldi	r24, 0x00	; 0
    3ed8:	0f c0       	rjmp	.+30     	; 0x3ef8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4e>
    3eda:	0d b4       	in	r0, 0x2d	; 45
    3edc:	07 fe       	sbrs	r0, 7
    3ede:	f8 cf       	rjmp	.-16     	; 0x3ed0 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x26>
    3ee0:	11 23       	and	r17, r17
    3ee2:	49 f0       	breq	.+18     	; 0x3ef6 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4c>
    3ee4:	81 2f       	mov	r24, r17
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	6f 93       	push	r22
    3eea:	64 e0       	ldi	r22, 0x04	; 4
    3eec:	6a 95       	dec	r22
    3eee:	f1 f7       	brne	.-4      	; 0x3eec <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x42>
    3ef0:	6f 91       	pop	r22
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	c9 f7       	brne	.-14     	; 0x3ee8 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x3e>
    3ef6:	8e b5       	in	r24, 0x2e	; 46
    3ef8:	1f 91       	pop	r17
    3efa:	0f 91       	pop	r16
    3efc:	08 95       	ret

00003efe <_ZN18OrangutanSPIMaster8transmitEh>:
    3efe:	60 e0       	ldi	r22, 0x00	; 0
    3f00:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3f04:	08 95       	ret

00003f06 <spi_master_transmit>:
    3f06:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <_ZN18OrangutanSPIMaster8transmitEh>
    3f0a:	08 95       	ret

00003f0c <spi_master_transmit_and_delay>:
    3f0c:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    3f10:	08 95       	ret

00003f12 <spi_master_init>:
    3f12:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <_ZN18OrangutanSPIMaster4initEhh>
    3f16:	08 95       	ret

00003f18 <__mulsi3>:
    3f18:	62 9f       	mul	r22, r18
    3f1a:	d0 01       	movw	r26, r0
    3f1c:	73 9f       	mul	r23, r19
    3f1e:	f0 01       	movw	r30, r0
    3f20:	82 9f       	mul	r24, r18
    3f22:	e0 0d       	add	r30, r0
    3f24:	f1 1d       	adc	r31, r1
    3f26:	64 9f       	mul	r22, r20
    3f28:	e0 0d       	add	r30, r0
    3f2a:	f1 1d       	adc	r31, r1
    3f2c:	92 9f       	mul	r25, r18
    3f2e:	f0 0d       	add	r31, r0
    3f30:	83 9f       	mul	r24, r19
    3f32:	f0 0d       	add	r31, r0
    3f34:	74 9f       	mul	r23, r20
    3f36:	f0 0d       	add	r31, r0
    3f38:	65 9f       	mul	r22, r21
    3f3a:	f0 0d       	add	r31, r0
    3f3c:	99 27       	eor	r25, r25
    3f3e:	72 9f       	mul	r23, r18
    3f40:	b0 0d       	add	r27, r0
    3f42:	e1 1d       	adc	r30, r1
    3f44:	f9 1f       	adc	r31, r25
    3f46:	63 9f       	mul	r22, r19
    3f48:	b0 0d       	add	r27, r0
    3f4a:	e1 1d       	adc	r30, r1
    3f4c:	f9 1f       	adc	r31, r25
    3f4e:	bd 01       	movw	r22, r26
    3f50:	cf 01       	movw	r24, r30
    3f52:	11 24       	eor	r1, r1
    3f54:	08 95       	ret

00003f56 <__divmodhi4>:
    3f56:	97 fb       	bst	r25, 7
    3f58:	09 2e       	mov	r0, r25
    3f5a:	07 26       	eor	r0, r23
    3f5c:	0a d0       	rcall	.+20     	; 0x3f72 <__divmodhi4_neg1>
    3f5e:	77 fd       	sbrc	r23, 7
    3f60:	04 d0       	rcall	.+8      	; 0x3f6a <__divmodhi4_neg2>
    3f62:	65 d0       	rcall	.+202    	; 0x402e <__udivmodhi4>
    3f64:	06 d0       	rcall	.+12     	; 0x3f72 <__divmodhi4_neg1>
    3f66:	00 20       	and	r0, r0
    3f68:	1a f4       	brpl	.+6      	; 0x3f70 <__divmodhi4_exit>

00003f6a <__divmodhi4_neg2>:
    3f6a:	70 95       	com	r23
    3f6c:	61 95       	neg	r22
    3f6e:	7f 4f       	sbci	r23, 0xFF	; 255

00003f70 <__divmodhi4_exit>:
    3f70:	08 95       	ret

00003f72 <__divmodhi4_neg1>:
    3f72:	f6 f7       	brtc	.-4      	; 0x3f70 <__divmodhi4_exit>
    3f74:	90 95       	com	r25
    3f76:	81 95       	neg	r24
    3f78:	9f 4f       	sbci	r25, 0xFF	; 255
    3f7a:	08 95       	ret

00003f7c <__udivmodsi4>:
    3f7c:	a1 e2       	ldi	r26, 0x21	; 33
    3f7e:	1a 2e       	mov	r1, r26
    3f80:	aa 1b       	sub	r26, r26
    3f82:	bb 1b       	sub	r27, r27
    3f84:	fd 01       	movw	r30, r26
    3f86:	0d c0       	rjmp	.+26     	; 0x3fa2 <__udivmodsi4_ep>

00003f88 <__udivmodsi4_loop>:
    3f88:	aa 1f       	adc	r26, r26
    3f8a:	bb 1f       	adc	r27, r27
    3f8c:	ee 1f       	adc	r30, r30
    3f8e:	ff 1f       	adc	r31, r31
    3f90:	a2 17       	cp	r26, r18
    3f92:	b3 07       	cpc	r27, r19
    3f94:	e4 07       	cpc	r30, r20
    3f96:	f5 07       	cpc	r31, r21
    3f98:	20 f0       	brcs	.+8      	; 0x3fa2 <__udivmodsi4_ep>
    3f9a:	a2 1b       	sub	r26, r18
    3f9c:	b3 0b       	sbc	r27, r19
    3f9e:	e4 0b       	sbc	r30, r20
    3fa0:	f5 0b       	sbc	r31, r21

00003fa2 <__udivmodsi4_ep>:
    3fa2:	66 1f       	adc	r22, r22
    3fa4:	77 1f       	adc	r23, r23
    3fa6:	88 1f       	adc	r24, r24
    3fa8:	99 1f       	adc	r25, r25
    3faa:	1a 94       	dec	r1
    3fac:	69 f7       	brne	.-38     	; 0x3f88 <__udivmodsi4_loop>
    3fae:	60 95       	com	r22
    3fb0:	70 95       	com	r23
    3fb2:	80 95       	com	r24
    3fb4:	90 95       	com	r25
    3fb6:	9b 01       	movw	r18, r22
    3fb8:	ac 01       	movw	r20, r24
    3fba:	bd 01       	movw	r22, r26
    3fbc:	cf 01       	movw	r24, r30
    3fbe:	08 95       	ret

00003fc0 <__prologue_saves__>:
    3fc0:	2f 92       	push	r2
    3fc2:	3f 92       	push	r3
    3fc4:	4f 92       	push	r4
    3fc6:	5f 92       	push	r5
    3fc8:	6f 92       	push	r6
    3fca:	7f 92       	push	r7
    3fcc:	8f 92       	push	r8
    3fce:	9f 92       	push	r9
    3fd0:	af 92       	push	r10
    3fd2:	bf 92       	push	r11
    3fd4:	cf 92       	push	r12
    3fd6:	df 92       	push	r13
    3fd8:	ef 92       	push	r14
    3fda:	ff 92       	push	r15
    3fdc:	0f 93       	push	r16
    3fde:	1f 93       	push	r17
    3fe0:	cf 93       	push	r28
    3fe2:	df 93       	push	r29
    3fe4:	cd b7       	in	r28, 0x3d	; 61
    3fe6:	de b7       	in	r29, 0x3e	; 62
    3fe8:	ca 1b       	sub	r28, r26
    3fea:	db 0b       	sbc	r29, r27
    3fec:	0f b6       	in	r0, 0x3f	; 63
    3fee:	f8 94       	cli
    3ff0:	de bf       	out	0x3e, r29	; 62
    3ff2:	0f be       	out	0x3f, r0	; 63
    3ff4:	cd bf       	out	0x3d, r28	; 61
    3ff6:	09 94       	ijmp

00003ff8 <__epilogue_restores__>:
    3ff8:	2a 88       	ldd	r2, Y+18	; 0x12
    3ffa:	39 88       	ldd	r3, Y+17	; 0x11
    3ffc:	48 88       	ldd	r4, Y+16	; 0x10
    3ffe:	5f 84       	ldd	r5, Y+15	; 0x0f
    4000:	6e 84       	ldd	r6, Y+14	; 0x0e
    4002:	7d 84       	ldd	r7, Y+13	; 0x0d
    4004:	8c 84       	ldd	r8, Y+12	; 0x0c
    4006:	9b 84       	ldd	r9, Y+11	; 0x0b
    4008:	aa 84       	ldd	r10, Y+10	; 0x0a
    400a:	b9 84       	ldd	r11, Y+9	; 0x09
    400c:	c8 84       	ldd	r12, Y+8	; 0x08
    400e:	df 80       	ldd	r13, Y+7	; 0x07
    4010:	ee 80       	ldd	r14, Y+6	; 0x06
    4012:	fd 80       	ldd	r15, Y+5	; 0x05
    4014:	0c 81       	ldd	r16, Y+4	; 0x04
    4016:	1b 81       	ldd	r17, Y+3	; 0x03
    4018:	aa 81       	ldd	r26, Y+2	; 0x02
    401a:	b9 81       	ldd	r27, Y+1	; 0x01
    401c:	ce 0f       	add	r28, r30
    401e:	d1 1d       	adc	r29, r1
    4020:	0f b6       	in	r0, 0x3f	; 63
    4022:	f8 94       	cli
    4024:	de bf       	out	0x3e, r29	; 62
    4026:	0f be       	out	0x3f, r0	; 63
    4028:	cd bf       	out	0x3d, r28	; 61
    402a:	ed 01       	movw	r28, r26
    402c:	08 95       	ret

0000402e <__udivmodhi4>:
    402e:	aa 1b       	sub	r26, r26
    4030:	bb 1b       	sub	r27, r27
    4032:	51 e1       	ldi	r21, 0x11	; 17
    4034:	07 c0       	rjmp	.+14     	; 0x4044 <__udivmodhi4_ep>

00004036 <__udivmodhi4_loop>:
    4036:	aa 1f       	adc	r26, r26
    4038:	bb 1f       	adc	r27, r27
    403a:	a6 17       	cp	r26, r22
    403c:	b7 07       	cpc	r27, r23
    403e:	10 f0       	brcs	.+4      	; 0x4044 <__udivmodhi4_ep>
    4040:	a6 1b       	sub	r26, r22
    4042:	b7 0b       	sbc	r27, r23

00004044 <__udivmodhi4_ep>:
    4044:	88 1f       	adc	r24, r24
    4046:	99 1f       	adc	r25, r25
    4048:	5a 95       	dec	r21
    404a:	a9 f7       	brne	.-22     	; 0x4036 <__udivmodhi4_loop>
    404c:	80 95       	com	r24
    404e:	90 95       	com	r25
    4050:	bc 01       	movw	r22, r24
    4052:	cd 01       	movw	r24, r26
    4054:	08 95       	ret

00004056 <malloc>:
    4056:	cf 93       	push	r28
    4058:	df 93       	push	r29
    405a:	bc 01       	movw	r22, r24
    405c:	82 30       	cpi	r24, 0x02	; 2
    405e:	91 05       	cpc	r25, r1
    4060:	10 f4       	brcc	.+4      	; 0x4066 <malloc+0x10>
    4062:	62 e0       	ldi	r22, 0x02	; 2
    4064:	70 e0       	ldi	r23, 0x00	; 0
    4066:	a0 91 86 04 	lds	r26, 0x0486
    406a:	b0 91 87 04 	lds	r27, 0x0487
    406e:	ed 01       	movw	r28, r26
    4070:	e0 e0       	ldi	r30, 0x00	; 0
    4072:	f0 e0       	ldi	r31, 0x00	; 0
    4074:	40 e0       	ldi	r20, 0x00	; 0
    4076:	50 e0       	ldi	r21, 0x00	; 0
    4078:	21 c0       	rjmp	.+66     	; 0x40bc <malloc+0x66>
    407a:	88 81       	ld	r24, Y
    407c:	99 81       	ldd	r25, Y+1	; 0x01
    407e:	86 17       	cp	r24, r22
    4080:	97 07       	cpc	r25, r23
    4082:	69 f4       	brne	.+26     	; 0x409e <malloc+0x48>
    4084:	8a 81       	ldd	r24, Y+2	; 0x02
    4086:	9b 81       	ldd	r25, Y+3	; 0x03
    4088:	30 97       	sbiw	r30, 0x00	; 0
    408a:	19 f0       	breq	.+6      	; 0x4092 <malloc+0x3c>
    408c:	93 83       	std	Z+3, r25	; 0x03
    408e:	82 83       	std	Z+2, r24	; 0x02
    4090:	04 c0       	rjmp	.+8      	; 0x409a <malloc+0x44>
    4092:	90 93 87 04 	sts	0x0487, r25
    4096:	80 93 86 04 	sts	0x0486, r24
    409a:	fe 01       	movw	r30, r28
    409c:	34 c0       	rjmp	.+104    	; 0x4106 <__stack+0x7>
    409e:	68 17       	cp	r22, r24
    40a0:	79 07       	cpc	r23, r25
    40a2:	38 f4       	brcc	.+14     	; 0x40b2 <malloc+0x5c>
    40a4:	41 15       	cp	r20, r1
    40a6:	51 05       	cpc	r21, r1
    40a8:	19 f0       	breq	.+6      	; 0x40b0 <malloc+0x5a>
    40aa:	84 17       	cp	r24, r20
    40ac:	95 07       	cpc	r25, r21
    40ae:	08 f4       	brcc	.+2      	; 0x40b2 <malloc+0x5c>
    40b0:	ac 01       	movw	r20, r24
    40b2:	fe 01       	movw	r30, r28
    40b4:	8a 81       	ldd	r24, Y+2	; 0x02
    40b6:	9b 81       	ldd	r25, Y+3	; 0x03
    40b8:	9c 01       	movw	r18, r24
    40ba:	e9 01       	movw	r28, r18
    40bc:	20 97       	sbiw	r28, 0x00	; 0
    40be:	e9 f6       	brne	.-70     	; 0x407a <malloc+0x24>
    40c0:	41 15       	cp	r20, r1
    40c2:	51 05       	cpc	r21, r1
    40c4:	a9 f1       	breq	.+106    	; 0x4130 <__stack+0x31>
    40c6:	ca 01       	movw	r24, r20
    40c8:	86 1b       	sub	r24, r22
    40ca:	97 0b       	sbc	r25, r23
    40cc:	04 97       	sbiw	r24, 0x04	; 4
    40ce:	08 f4       	brcc	.+2      	; 0x40d2 <malloc+0x7c>
    40d0:	ba 01       	movw	r22, r20
    40d2:	e0 e0       	ldi	r30, 0x00	; 0
    40d4:	f0 e0       	ldi	r31, 0x00	; 0
    40d6:	2a c0       	rjmp	.+84     	; 0x412c <__stack+0x2d>
    40d8:	8d 91       	ld	r24, X+
    40da:	9c 91       	ld	r25, X
    40dc:	11 97       	sbiw	r26, 0x01	; 1
    40de:	84 17       	cp	r24, r20
    40e0:	95 07       	cpc	r25, r21
    40e2:	f9 f4       	brne	.+62     	; 0x4122 <__stack+0x23>
    40e4:	64 17       	cp	r22, r20
    40e6:	75 07       	cpc	r23, r21
    40e8:	81 f4       	brne	.+32     	; 0x410a <__stack+0xb>
    40ea:	12 96       	adiw	r26, 0x02	; 2
    40ec:	8d 91       	ld	r24, X+
    40ee:	9c 91       	ld	r25, X
    40f0:	13 97       	sbiw	r26, 0x03	; 3
    40f2:	30 97       	sbiw	r30, 0x00	; 0
    40f4:	19 f0       	breq	.+6      	; 0x40fc <malloc+0xa6>
    40f6:	93 83       	std	Z+3, r25	; 0x03
    40f8:	82 83       	std	Z+2, r24	; 0x02
    40fa:	04 c0       	rjmp	.+8      	; 0x4104 <__stack+0x5>
    40fc:	90 93 87 04 	sts	0x0487, r25
    4100:	80 93 86 04 	sts	0x0486, r24
    4104:	fd 01       	movw	r30, r26
    4106:	32 96       	adiw	r30, 0x02	; 2
    4108:	4f c0       	rjmp	.+158    	; 0x41a8 <__stack+0xa9>
    410a:	ca 01       	movw	r24, r20
    410c:	86 1b       	sub	r24, r22
    410e:	97 0b       	sbc	r25, r23
    4110:	fd 01       	movw	r30, r26
    4112:	e8 0f       	add	r30, r24
    4114:	f9 1f       	adc	r31, r25
    4116:	61 93       	st	Z+, r22
    4118:	71 93       	st	Z+, r23
    411a:	02 97       	sbiw	r24, 0x02	; 2
    411c:	8d 93       	st	X+, r24
    411e:	9c 93       	st	X, r25
    4120:	43 c0       	rjmp	.+134    	; 0x41a8 <__stack+0xa9>
    4122:	fd 01       	movw	r30, r26
    4124:	82 81       	ldd	r24, Z+2	; 0x02
    4126:	93 81       	ldd	r25, Z+3	; 0x03
    4128:	9c 01       	movw	r18, r24
    412a:	d9 01       	movw	r26, r18
    412c:	10 97       	sbiw	r26, 0x00	; 0
    412e:	a1 f6       	brne	.-88     	; 0x40d8 <malloc+0x82>
    4130:	80 91 84 04 	lds	r24, 0x0484
    4134:	90 91 85 04 	lds	r25, 0x0485
    4138:	89 2b       	or	r24, r25
    413a:	41 f4       	brne	.+16     	; 0x414c <__stack+0x4d>
    413c:	80 91 42 04 	lds	r24, 0x0442
    4140:	90 91 43 04 	lds	r25, 0x0443
    4144:	90 93 85 04 	sts	0x0485, r25
    4148:	80 93 84 04 	sts	0x0484, r24
    414c:	40 91 44 04 	lds	r20, 0x0444
    4150:	50 91 45 04 	lds	r21, 0x0445
    4154:	41 15       	cp	r20, r1
    4156:	51 05       	cpc	r21, r1
    4158:	41 f4       	brne	.+16     	; 0x416a <__stack+0x6b>
    415a:	4d b7       	in	r20, 0x3d	; 61
    415c:	5e b7       	in	r21, 0x3e	; 62
    415e:	80 91 40 04 	lds	r24, 0x0440
    4162:	90 91 41 04 	lds	r25, 0x0441
    4166:	48 1b       	sub	r20, r24
    4168:	59 0b       	sbc	r21, r25
    416a:	20 91 84 04 	lds	r18, 0x0484
    416e:	30 91 85 04 	lds	r19, 0x0485
    4172:	24 17       	cp	r18, r20
    4174:	35 07       	cpc	r19, r21
    4176:	b0 f4       	brcc	.+44     	; 0x41a4 <__stack+0xa5>
    4178:	ca 01       	movw	r24, r20
    417a:	82 1b       	sub	r24, r18
    417c:	93 0b       	sbc	r25, r19
    417e:	86 17       	cp	r24, r22
    4180:	97 07       	cpc	r25, r23
    4182:	80 f0       	brcs	.+32     	; 0x41a4 <__stack+0xa5>
    4184:	ab 01       	movw	r20, r22
    4186:	4e 5f       	subi	r20, 0xFE	; 254
    4188:	5f 4f       	sbci	r21, 0xFF	; 255
    418a:	84 17       	cp	r24, r20
    418c:	95 07       	cpc	r25, r21
    418e:	50 f0       	brcs	.+20     	; 0x41a4 <__stack+0xa5>
    4190:	42 0f       	add	r20, r18
    4192:	53 1f       	adc	r21, r19
    4194:	50 93 85 04 	sts	0x0485, r21
    4198:	40 93 84 04 	sts	0x0484, r20
    419c:	f9 01       	movw	r30, r18
    419e:	61 93       	st	Z+, r22
    41a0:	71 93       	st	Z+, r23
    41a2:	02 c0       	rjmp	.+4      	; 0x41a8 <__stack+0xa9>
    41a4:	e0 e0       	ldi	r30, 0x00	; 0
    41a6:	f0 e0       	ldi	r31, 0x00	; 0
    41a8:	cf 01       	movw	r24, r30
    41aa:	df 91       	pop	r29
    41ac:	cf 91       	pop	r28
    41ae:	08 95       	ret

000041b0 <free>:
    41b0:	cf 93       	push	r28
    41b2:	df 93       	push	r29
    41b4:	00 97       	sbiw	r24, 0x00	; 0
    41b6:	09 f4       	brne	.+2      	; 0x41ba <free+0xa>
    41b8:	50 c0       	rjmp	.+160    	; 0x425a <free+0xaa>
    41ba:	ec 01       	movw	r28, r24
    41bc:	22 97       	sbiw	r28, 0x02	; 2
    41be:	1b 82       	std	Y+3, r1	; 0x03
    41c0:	1a 82       	std	Y+2, r1	; 0x02
    41c2:	a0 91 86 04 	lds	r26, 0x0486
    41c6:	b0 91 87 04 	lds	r27, 0x0487
    41ca:	10 97       	sbiw	r26, 0x00	; 0
    41cc:	09 f1       	breq	.+66     	; 0x4210 <free+0x60>
    41ce:	40 e0       	ldi	r20, 0x00	; 0
    41d0:	50 e0       	ldi	r21, 0x00	; 0
    41d2:	ac 17       	cp	r26, r28
    41d4:	bd 07       	cpc	r27, r29
    41d6:	08 f1       	brcs	.+66     	; 0x421a <free+0x6a>
    41d8:	bb 83       	std	Y+3, r27	; 0x03
    41da:	aa 83       	std	Y+2, r26	; 0x02
    41dc:	fe 01       	movw	r30, r28
    41de:	21 91       	ld	r18, Z+
    41e0:	31 91       	ld	r19, Z+
    41e2:	e2 0f       	add	r30, r18
    41e4:	f3 1f       	adc	r31, r19
    41e6:	ae 17       	cp	r26, r30
    41e8:	bf 07       	cpc	r27, r31
    41ea:	79 f4       	brne	.+30     	; 0x420a <free+0x5a>
    41ec:	8d 91       	ld	r24, X+
    41ee:	9c 91       	ld	r25, X
    41f0:	11 97       	sbiw	r26, 0x01	; 1
    41f2:	28 0f       	add	r18, r24
    41f4:	39 1f       	adc	r19, r25
    41f6:	2e 5f       	subi	r18, 0xFE	; 254
    41f8:	3f 4f       	sbci	r19, 0xFF	; 255
    41fa:	39 83       	std	Y+1, r19	; 0x01
    41fc:	28 83       	st	Y, r18
    41fe:	12 96       	adiw	r26, 0x02	; 2
    4200:	8d 91       	ld	r24, X+
    4202:	9c 91       	ld	r25, X
    4204:	13 97       	sbiw	r26, 0x03	; 3
    4206:	9b 83       	std	Y+3, r25	; 0x03
    4208:	8a 83       	std	Y+2, r24	; 0x02
    420a:	41 15       	cp	r20, r1
    420c:	51 05       	cpc	r21, r1
    420e:	71 f4       	brne	.+28     	; 0x422c <free+0x7c>
    4210:	d0 93 87 04 	sts	0x0487, r29
    4214:	c0 93 86 04 	sts	0x0486, r28
    4218:	20 c0       	rjmp	.+64     	; 0x425a <free+0xaa>
    421a:	12 96       	adiw	r26, 0x02	; 2
    421c:	8d 91       	ld	r24, X+
    421e:	9c 91       	ld	r25, X
    4220:	13 97       	sbiw	r26, 0x03	; 3
    4222:	ad 01       	movw	r20, r26
    4224:	00 97       	sbiw	r24, 0x00	; 0
    4226:	11 f0       	breq	.+4      	; 0x422c <free+0x7c>
    4228:	dc 01       	movw	r26, r24
    422a:	d3 cf       	rjmp	.-90     	; 0x41d2 <free+0x22>
    422c:	fa 01       	movw	r30, r20
    422e:	d3 83       	std	Z+3, r29	; 0x03
    4230:	c2 83       	std	Z+2, r28	; 0x02
    4232:	21 91       	ld	r18, Z+
    4234:	31 91       	ld	r19, Z+
    4236:	e2 0f       	add	r30, r18
    4238:	f3 1f       	adc	r31, r19
    423a:	ce 17       	cp	r28, r30
    423c:	df 07       	cpc	r29, r31
    423e:	69 f4       	brne	.+26     	; 0x425a <free+0xaa>
    4240:	88 81       	ld	r24, Y
    4242:	99 81       	ldd	r25, Y+1	; 0x01
    4244:	28 0f       	add	r18, r24
    4246:	39 1f       	adc	r19, r25
    4248:	2e 5f       	subi	r18, 0xFE	; 254
    424a:	3f 4f       	sbci	r19, 0xFF	; 255
    424c:	fa 01       	movw	r30, r20
    424e:	31 83       	std	Z+1, r19	; 0x01
    4250:	20 83       	st	Z, r18
    4252:	8a 81       	ldd	r24, Y+2	; 0x02
    4254:	9b 81       	ldd	r25, Y+3	; 0x03
    4256:	93 83       	std	Z+3, r25	; 0x03
    4258:	82 83       	std	Z+2, r24	; 0x02
    425a:	df 91       	pop	r29
    425c:	cf 91       	pop	r28
    425e:	08 95       	ret

00004260 <itoa>:
    4260:	fb 01       	movw	r30, r22
    4262:	9f 01       	movw	r18, r30
    4264:	e8 94       	clt
    4266:	42 30       	cpi	r20, 0x02	; 2
    4268:	c4 f0       	brlt	.+48     	; 0x429a <itoa+0x3a>
    426a:	45 32       	cpi	r20, 0x25	; 37
    426c:	b4 f4       	brge	.+44     	; 0x429a <itoa+0x3a>
    426e:	4a 30       	cpi	r20, 0x0A	; 10
    4270:	29 f4       	brne	.+10     	; 0x427c <itoa+0x1c>
    4272:	97 fb       	bst	r25, 7
    4274:	1e f4       	brtc	.+6      	; 0x427c <itoa+0x1c>
    4276:	90 95       	com	r25
    4278:	81 95       	neg	r24
    427a:	9f 4f       	sbci	r25, 0xFF	; 255
    427c:	64 2f       	mov	r22, r20
    427e:	77 27       	eor	r23, r23
    4280:	0e 94 17 20 	call	0x402e	; 0x402e <__udivmodhi4>
    4284:	80 5d       	subi	r24, 0xD0	; 208
    4286:	8a 33       	cpi	r24, 0x3A	; 58
    4288:	0c f0       	brlt	.+2      	; 0x428c <itoa+0x2c>
    428a:	89 5d       	subi	r24, 0xD9	; 217
    428c:	81 93       	st	Z+, r24
    428e:	cb 01       	movw	r24, r22
    4290:	00 97       	sbiw	r24, 0x00	; 0
    4292:	a1 f7       	brne	.-24     	; 0x427c <itoa+0x1c>
    4294:	16 f4       	brtc	.+4      	; 0x429a <itoa+0x3a>
    4296:	5d e2       	ldi	r21, 0x2D	; 45
    4298:	51 93       	st	Z+, r21
    429a:	10 82       	st	Z, r1
    429c:	c9 01       	movw	r24, r18
    429e:	0c 94 c0 21 	jmp	0x4380	; 0x4380 <strrev>

000042a2 <fdevopen>:
    42a2:	0f 93       	push	r16
    42a4:	1f 93       	push	r17
    42a6:	cf 93       	push	r28
    42a8:	df 93       	push	r29
    42aa:	8c 01       	movw	r16, r24
    42ac:	eb 01       	movw	r28, r22
    42ae:	00 97       	sbiw	r24, 0x00	; 0
    42b0:	31 f4       	brne	.+12     	; 0x42be <fdevopen+0x1c>
    42b2:	61 15       	cp	r22, r1
    42b4:	71 05       	cpc	r23, r1
    42b6:	19 f4       	brne	.+6      	; 0x42be <fdevopen+0x1c>
    42b8:	20 e0       	ldi	r18, 0x00	; 0
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	38 c0       	rjmp	.+112    	; 0x432e <fdevopen+0x8c>
    42be:	81 e0       	ldi	r24, 0x01	; 1
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	6e e0       	ldi	r22, 0x0E	; 14
    42c4:	70 e0       	ldi	r23, 0x00	; 0
    42c6:	0e 94 9d 21 	call	0x433a	; 0x433a <calloc>
    42ca:	fc 01       	movw	r30, r24
    42cc:	9c 01       	movw	r18, r24
    42ce:	00 97       	sbiw	r24, 0x00	; 0
    42d0:	71 f1       	breq	.+92     	; 0x432e <fdevopen+0x8c>
    42d2:	80 e8       	ldi	r24, 0x80	; 128
    42d4:	83 83       	std	Z+3, r24	; 0x03
    42d6:	20 97       	sbiw	r28, 0x00	; 0
    42d8:	71 f0       	breq	.+28     	; 0x42f6 <fdevopen+0x54>
    42da:	d3 87       	std	Z+11, r29	; 0x0b
    42dc:	c2 87       	std	Z+10, r28	; 0x0a
    42de:	81 e8       	ldi	r24, 0x81	; 129
    42e0:	83 83       	std	Z+3, r24	; 0x03
    42e2:	80 91 88 04 	lds	r24, 0x0488
    42e6:	90 91 89 04 	lds	r25, 0x0489
    42ea:	89 2b       	or	r24, r25
    42ec:	21 f4       	brne	.+8      	; 0x42f6 <fdevopen+0x54>
    42ee:	f0 93 89 04 	sts	0x0489, r31
    42f2:	e0 93 88 04 	sts	0x0488, r30
    42f6:	01 15       	cp	r16, r1
    42f8:	11 05       	cpc	r17, r1
    42fa:	c9 f0       	breq	.+50     	; 0x432e <fdevopen+0x8c>
    42fc:	11 87       	std	Z+9, r17	; 0x09
    42fe:	00 87       	std	Z+8, r16	; 0x08
    4300:	83 81       	ldd	r24, Z+3	; 0x03
    4302:	82 60       	ori	r24, 0x02	; 2
    4304:	83 83       	std	Z+3, r24	; 0x03
    4306:	80 91 8a 04 	lds	r24, 0x048A
    430a:	90 91 8b 04 	lds	r25, 0x048B
    430e:	89 2b       	or	r24, r25
    4310:	71 f4       	brne	.+28     	; 0x432e <fdevopen+0x8c>
    4312:	f0 93 8b 04 	sts	0x048B, r31
    4316:	e0 93 8a 04 	sts	0x048A, r30
    431a:	80 91 8c 04 	lds	r24, 0x048C
    431e:	90 91 8d 04 	lds	r25, 0x048D
    4322:	89 2b       	or	r24, r25
    4324:	21 f4       	brne	.+8      	; 0x432e <fdevopen+0x8c>
    4326:	f0 93 8d 04 	sts	0x048D, r31
    432a:	e0 93 8c 04 	sts	0x048C, r30
    432e:	c9 01       	movw	r24, r18
    4330:	df 91       	pop	r29
    4332:	cf 91       	pop	r28
    4334:	1f 91       	pop	r17
    4336:	0f 91       	pop	r16
    4338:	08 95       	ret

0000433a <calloc>:
    433a:	0f 93       	push	r16
    433c:	1f 93       	push	r17
    433e:	cf 93       	push	r28
    4340:	df 93       	push	r29
    4342:	68 9f       	mul	r22, r24
    4344:	80 01       	movw	r16, r0
    4346:	69 9f       	mul	r22, r25
    4348:	10 0d       	add	r17, r0
    434a:	78 9f       	mul	r23, r24
    434c:	10 0d       	add	r17, r0
    434e:	11 24       	eor	r1, r1
    4350:	c8 01       	movw	r24, r16
    4352:	0e 94 2b 20 	call	0x4056	; 0x4056 <malloc>
    4356:	ec 01       	movw	r28, r24
    4358:	00 97       	sbiw	r24, 0x00	; 0
    435a:	29 f0       	breq	.+10     	; 0x4366 <calloc+0x2c>
    435c:	60 e0       	ldi	r22, 0x00	; 0
    435e:	70 e0       	ldi	r23, 0x00	; 0
    4360:	a8 01       	movw	r20, r16
    4362:	0e 94 b9 21 	call	0x4372	; 0x4372 <memset>
    4366:	ce 01       	movw	r24, r28
    4368:	df 91       	pop	r29
    436a:	cf 91       	pop	r28
    436c:	1f 91       	pop	r17
    436e:	0f 91       	pop	r16
    4370:	08 95       	ret

00004372 <memset>:
    4372:	dc 01       	movw	r26, r24
    4374:	01 c0       	rjmp	.+2      	; 0x4378 <memset+0x6>
    4376:	6d 93       	st	X+, r22
    4378:	41 50       	subi	r20, 0x01	; 1
    437a:	50 40       	sbci	r21, 0x00	; 0
    437c:	e0 f7       	brcc	.-8      	; 0x4376 <memset+0x4>
    437e:	08 95       	ret

00004380 <strrev>:
    4380:	dc 01       	movw	r26, r24
    4382:	fc 01       	movw	r30, r24
    4384:	67 2f       	mov	r22, r23
    4386:	71 91       	ld	r23, Z+
    4388:	77 23       	and	r23, r23
    438a:	e1 f7       	brne	.-8      	; 0x4384 <strrev+0x4>
    438c:	32 97       	sbiw	r30, 0x02	; 2
    438e:	04 c0       	rjmp	.+8      	; 0x4398 <strrev+0x18>
    4390:	7c 91       	ld	r23, X
    4392:	6d 93       	st	X+, r22
    4394:	70 83       	st	Z, r23
    4396:	62 91       	ld	r22, -Z
    4398:	ae 17       	cp	r26, r30
    439a:	bf 07       	cpc	r27, r31
    439c:	c8 f3       	brcs	.-14     	; 0x4390 <strrev+0x10>
    439e:	08 95       	ret

000043a0 <_exit>:
    43a0:	f8 94       	cli

000043a2 <__stop_program>:
    43a2:	ff cf       	rjmp	.-2      	; 0x43a2 <__stop_program>
