
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000007bc  00800100  00004828  000048bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004828  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  008008bc  008008bc  00005078  2**0
                  ALLOC
  3 .stab         00005274  00000000  00000000  00005078  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000544b  00000000  00000000  0000a2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000f737  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003fc  00000000  00000000  0000f777  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000013f2  00000000  00000000  0000fb73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000338  00000000  00000000  00010f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001de4  00000000  00000000  0001129d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000190  00000000  00000000  00013084  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b83  00000000  00000000  00013214  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000146e  00000000  00000000  00013d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
       4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__vector_11>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      50:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <__vector_20>
      54:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__vector_21>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      70:	0c 94 a2 1b 	jmp	0x3744	; 0x3744 <__vector_28>
      74:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__vector_29>
      78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      80:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      8c:	56 0c       	add	r5, r6
      8e:	6f 0c       	add	r6, r15
      90:	8a 0c       	add	r8, r10
      92:	a7 0c       	add	r10, r7
      94:	c6 0c       	add	r12, r6
      96:	e2 0c       	add	r14, r2
      98:	00 0d       	add	r16, r0
      9a:	21 0d       	add	r18, r1
      9c:	43 0d       	add	r20, r3
      9e:	4d 0d       	add	r20, r13
      a0:	51 0d       	add	r21, r1
      a2:	5d 0d       	add	r21, r13
      a4:	61 0d       	add	r22, r1
      a6:	6b 0d       	add	r22, r11
      a8:	6f 0d       	add	r22, r15
      aa:	7a 0d       	add	r23, r10
      ac:	7e 0d       	add	r23, r14
      ae:	89 0d       	add	r24, r9
      b0:	8d 0d       	add	r24, r13
      b2:	98 0d       	add	r25, r8
      b4:	9c 0d       	add	r25, r12
      b6:	a7 0d       	add	r26, r7
      b8:	ab 0d       	add	r26, r11
      ba:	ba 0d       	add	r27, r10
      bc:	c0 0d       	add	r28, r0
      be:	cf 0d       	add	r28, r15
      c0:	d3 0d       	add	r29, r3
      c2:	de 0d       	add	r29, r14
      c4:	e2 0d       	add	r30, r2
      c6:	ed 0d       	add	r30, r13
      c8:	f1 0d       	add	r31, r1
      ca:	fb 0d       	add	r31, r11
      cc:	ff 0d       	add	r31, r15
      ce:	09 0e       	add	r0, r25
      d0:	0d 0e       	add	r0, r29
      d2:	19 0e       	add	r1, r25
      d4:	1f 0e       	add	r1, r31
      d6:	2f 0e       	add	r2, r31
      d8:	39 0e       	add	r3, r25
      da:	4f 0e       	add	r4, r31
      dc:	59 0e       	add	r5, r25
      de:	6f 0e       	add	r6, r31
      e0:	79 0e       	add	r7, r25
      e2:	8f 0e       	add	r8, r31
      e4:	99 0e       	add	r9, r25
      e6:	af 0e       	add	r10, r31
      e8:	b9 0e       	add	r11, r25
      ea:	c6 0e       	add	r12, r22

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	d0 e4       	ldi	r29, 0x40	; 64
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_copy_data>:
      f8:	18 e0       	ldi	r17, 0x08	; 8
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	e8 e2       	ldi	r30, 0x28	; 40
     100:	f8 e4       	ldi	r31, 0x48	; 72
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0b bf       	out	0x3b, r16	; 59
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
     108:	07 90       	elpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	ac 3b       	cpi	r26, 0xBC	; 188
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
     112:	19 e0       	ldi	r17, 0x09	; 9
     114:	ac eb       	ldi	r26, 0xBC	; 188
     116:	b8 e0       	ldi	r27, 0x08	; 8
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	a5 30       	cpi	r26, 0x05	; 5
     11e:	b1 07       	cpc	r27, r17
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
     122:	0e 94 dd 08 	call	0x11ba	; 0x11ba <main>
     126:	0c 94 12 24 	jmp	0x4824	; 0x4824 <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     12e:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     132:	8c e0       	ldi	r24, 0x0C	; 12
     134:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
     138:	08 95       	ret

0000013a <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
     13a:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     13c:	84 ea       	ldi	r24, 0xA4	; 164
     13e:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     142:	80 91 bc 00 	lds	r24, 0x00BC
     146:	87 ff       	sbrs	r24, 7
     148:	fc cf       	rjmp	.-8      	; 0x142 <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     14a:	80 91 b9 00 	lds	r24, 0x00B9
     14e:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     150:	88 30       	cpi	r24, 0x08	; 8
     152:	21 f0       	breq	.+8      	; 0x15c <i2c_start+0x22>
     154:	80 31       	cpi	r24, 0x10	; 16
     156:	11 f0       	breq	.+4      	; 0x15c <i2c_start+0x22>
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	08 95       	ret

	// send device address
	TWDR = address;
     15c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     160:	84 e8       	ldi	r24, 0x84	; 132
     162:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     166:	80 91 bc 00 	lds	r24, 0x00BC
     16a:	87 ff       	sbrs	r24, 7
     16c:	fc cf       	rjmp	.-8      	; 0x166 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     16e:	90 91 b9 00 	lds	r25, 0x00B9
     172:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     174:	98 31       	cpi	r25, 0x18	; 24
     176:	11 f4       	brne	.+4      	; 0x17c <i2c_start+0x42>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	08 95       	ret
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 34       	cpi	r25, 0x40	; 64
     180:	09 f0       	breq	.+2      	; 0x184 <i2c_start+0x4a>
     182:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
     184:	08 95       	ret

00000186 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     186:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     188:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     18a:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     18c:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     18e:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     192:	80 91 bc 00 	lds	r24, 0x00BC
     196:	87 ff       	sbrs	r24, 7
     198:	fc cf       	rjmp	.-8      	; 0x192 <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     19a:	80 91 b9 00 	lds	r24, 0x00B9
     19e:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     1a0:	88 30       	cpi	r24, 0x08	; 8
     1a2:	11 f0       	breq	.+4      	; 0x1a8 <i2c_start_wait+0x22>
     1a4:	80 31       	cpi	r24, 0x10	; 16
     1a6:	99 f7       	brne	.-26     	; 0x18e <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
     1a8:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
     1ac:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     1b0:	80 91 bc 00 	lds	r24, 0x00BC
     1b4:	87 ff       	sbrs	r24, 7
     1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     1b8:	80 91 b9 00 	lds	r24, 0x00B9
     1bc:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     1be:	80 32       	cpi	r24, 0x20	; 32
     1c0:	11 f0       	breq	.+4      	; 0x1c6 <i2c_start_wait+0x40>
     1c2:	88 35       	cpi	r24, 0x58	; 88
     1c4:	39 f4       	brne	.+14     	; 0x1d4 <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1c6:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     1ca:	80 91 bc 00 	lds	r24, 0x00BC
     1ce:	84 fd       	sbrc	r24, 4
     1d0:	fc cf       	rjmp	.-8      	; 0x1ca <i2c_start_wait+0x44>
     1d2:	dd cf       	rjmp	.-70     	; 0x18e <i2c_start_wait+0x8>
     1d4:	08 95       	ret

000001d6 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     1d6:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>

}/* i2c_rep_start */
     1da:	08 95       	ret

000001dc <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1dc:	84 e9       	ldi	r24, 0x94	; 148
     1de:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     1e2:	80 91 bc 00 	lds	r24, 0x00BC
     1e6:	84 fd       	sbrc	r24, 4
     1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <i2c_stop+0x6>

}/* i2c_stop */
     1ea:	08 95       	ret

000001ec <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     1ec:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     1f0:	84 e8       	ldi	r24, 0x84	; 132
     1f2:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     1f6:	80 91 bc 00 	lds	r24, 0x00BC
     1fa:	87 ff       	sbrs	r24, 7
     1fc:	fc cf       	rjmp	.-8      	; 0x1f6 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     1fe:	80 91 b9 00 	lds	r24, 0x00B9
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	88 7f       	andi	r24, 0xF8	; 248
     206:	88 32       	cpi	r24, 0x28	; 40
     208:	09 f0       	breq	.+2      	; 0x20c <i2c_write+0x20>
     20a:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     20c:	89 2f       	mov	r24, r25
     20e:	08 95       	ret

00000210 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     210:	84 ec       	ldi	r24, 0xC4	; 196
     212:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     216:	80 91 bc 00 	lds	r24, 0x00BC
     21a:	87 ff       	sbrs	r24, 7
     21c:	fc cf       	rjmp	.-8      	; 0x216 <i2c_readAck+0x6>

    return TWDR;
     21e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
     222:	08 95       	ret

00000224 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     224:	84 e8       	ldi	r24, 0x84	; 132
     226:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     22a:	80 91 bc 00 	lds	r24, 0x00BC
     22e:	87 ff       	sbrs	r24, 7
     230:	fc cf       	rjmp	.-8      	; 0x22a <i2c_readNak+0x6>
	
    return TWDR;
     232:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     236:	08 95       	ret

00000238 <is_digital_input_high>:

// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
// the pin.
static inline unsigned char is_digital_input_high(unsigned char pin)
{
     238:	48 2f       	mov	r20, r24
	io->pinRegister = 0;
	io->portRegister = 0;
	io->ddrRegister = 0;
	io->bitmask = 0;

	if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     23a:	88 30       	cpi	r24, 0x08	; 8
     23c:	58 f4       	brcc	.+22     	; 0x254 <is_digital_input_high+0x1c>
	{
		io->pinRegister = (unsigned char*)&PIND;
		io->portRegister = (unsigned char*)&PORTD;
		io->ddrRegister = (unsigned char*)&DDRD;
		io->bitmask = 1 << pin;
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	02 c0       	rjmp	.+4      	; 0x248 <is_digital_input_high+0x10>
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	4a 95       	dec	r20
     24a:	e2 f7       	brpl	.-8      	; 0x244 <is_digital_input_high+0xc>
     24c:	98 2f       	mov	r25, r24
     24e:	e9 e2       	ldi	r30, 0x29	; 41
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	36 c0       	rjmp	.+108    	; 0x2c0 <is_digital_input_high+0x88>
	}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)
	else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     254:	80 31       	cpi	r24, 0x10	; 16
     256:	78 f4       	brcc	.+30     	; 0x276 <is_digital_input_high+0x3e>
	{
		io->pinRegister = (unsigned char*)&PINB;
		io->portRegister = (unsigned char*)&PORTB;
		io->ddrRegister = (unsigned char*)&DDRB;
		io->bitmask = 1 << (pin - 8);
     258:	28 2f       	mov	r18, r24
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	28 50       	subi	r18, 0x08	; 8
     25e:	30 40       	sbci	r19, 0x00	; 0
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	02 c0       	rjmp	.+4      	; 0x26a <is_digital_input_high+0x32>
     266:	88 0f       	add	r24, r24
     268:	99 1f       	adc	r25, r25
     26a:	2a 95       	dec	r18
     26c:	e2 f7       	brpl	.-8      	; 0x266 <is_digital_input_high+0x2e>
     26e:	98 2f       	mov	r25, r24
     270:	e3 e2       	ldi	r30, 0x23	; 35
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	25 c0       	rjmp	.+74     	; 0x2c0 <is_digital_input_high+0x88>
	}
	else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     276:	88 31       	cpi	r24, 0x18	; 24
     278:	78 f4       	brcc	.+30     	; 0x298 <is_digital_input_high+0x60>
	{
		io->pinRegister = (unsigned char*)&PINC;
		io->portRegister = (unsigned char*)&PORTC;
		io->ddrRegister = (unsigned char*)&DDRC;
		io->bitmask = 1 << (pin - 16);
     27a:	28 2f       	mov	r18, r24
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	20 51       	subi	r18, 0x10	; 16
     280:	30 40       	sbci	r19, 0x00	; 0
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	02 c0       	rjmp	.+4      	; 0x28c <is_digital_input_high+0x54>
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	2a 95       	dec	r18
     28e:	e2 f7       	brpl	.-8      	; 0x288 <is_digital_input_high+0x50>
     290:	98 2f       	mov	r25, r24
     292:	e6 e2       	ldi	r30, 0x26	; 38
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	14 c0       	rjmp	.+40     	; 0x2c0 <is_digital_input_high+0x88>
	}
	else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     298:	80 32       	cpi	r24, 0x20	; 32
     29a:	20 f0       	brcs	.+8      	; 0x2a4 <is_digital_input_high+0x6c>
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	e0 e0       	ldi	r30, 0x00	; 0
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	0e c0       	rjmp	.+28     	; 0x2c0 <is_digital_input_high+0x88>
	{
		io->pinRegister = (unsigned char*)&PINA;
		io->portRegister = (unsigned char*)&PORTA;
		io->ddrRegister = (unsigned char*)&DDRA;
		io->bitmask = 1 << (31 - pin);
     2a4:	2f e1       	ldi	r18, 0x1F	; 31
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	28 1b       	sub	r18, r24
     2aa:	31 09       	sbc	r19, r1
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <is_digital_input_high+0x7e>
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	2a 95       	dec	r18
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <is_digital_input_high+0x7a>
     2ba:	98 2f       	mov	r25, r24
     2bc:	e0 e2       	ldi	r30, 0x20	; 32
     2be:	f0 e0       	ldi	r31, 0x00	; 0

// low-level method for reading the value of the PIN register for an pin or set of pins
// described by an IOStruct pointer.
static inline unsigned char get_digital_input_value(struct IOStruct* ioPin)
{
	return *(ioPin->pinRegister) & ioPin->bitmask;
     2c0:	80 81       	ld	r24, Z
static inline unsigned char is_digital_input_high(unsigned char pin)
{
	struct IOStruct registers;
	get_io_registers(&registers, pin);
	return get_digital_input_value(&registers);
}
     2c2:	89 23       	and	r24, r25
     2c4:	08 95       	ret

000002c6 <brush1_action>:
			break;
		//*********************************************
	}
}

void brush1_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     2c6:	0f 93       	push	r16
     2c8:	1f 93       	push	r17
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	bc 01       	movw	r22, r24
     2d0:	ea 01       	movw	r28, r20
     2d2:	f9 01       	movw	r30, r18
     2d4:	d8 01       	movw	r26, r16
	switch(state){
     2d6:	8c 30       	cpi	r24, 0x0C	; 12
     2d8:	91 05       	cpc	r25, r1
     2da:	09 f4       	brne	.+2      	; 0x2de <brush1_action+0x18>
     2dc:	8e c0       	rjmp	.+284    	; 0x3fa <brush1_action+0x134>
     2de:	8d 30       	cpi	r24, 0x0D	; 13
     2e0:	91 05       	cpc	r25, r1
     2e2:	a4 f4       	brge	.+40     	; 0x30c <brush1_action+0x46>
     2e4:	89 30       	cpi	r24, 0x09	; 9
     2e6:	91 05       	cpc	r25, r1
     2e8:	b1 f1       	breq	.+108    	; 0x356 <brush1_action+0x90>
     2ea:	8a 30       	cpi	r24, 0x0A	; 10
     2ec:	91 05       	cpc	r25, r1
     2ee:	2c f4       	brge	.+10     	; 0x2fa <brush1_action+0x34>
     2f0:	88 30       	cpi	r24, 0x08	; 8
     2f2:	91 05       	cpc	r25, r1
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <brush1_action+0x32>
     2f6:	1f c1       	rjmp	.+574    	; 0x536 <brush1_action+0x270>
     2f8:	22 c0       	rjmp	.+68     	; 0x33e <brush1_action+0x78>
     2fa:	8a 30       	cpi	r24, 0x0A	; 10
     2fc:	91 05       	cpc	r25, r1
     2fe:	09 f4       	brne	.+2      	; 0x302 <brush1_action+0x3c>
     300:	4c c0       	rjmp	.+152    	; 0x39a <brush1_action+0xd4>
     302:	8b 30       	cpi	r24, 0x0B	; 11
     304:	91 05       	cpc	r25, r1
     306:	09 f0       	breq	.+2      	; 0x30a <brush1_action+0x44>
     308:	16 c1       	rjmp	.+556    	; 0x536 <brush1_action+0x270>
     30a:	6a c0       	rjmp	.+212    	; 0x3e0 <brush1_action+0x11a>
     30c:	8f 30       	cpi	r24, 0x0F	; 15
     30e:	91 05       	cpc	r25, r1
     310:	09 f4       	brne	.+2      	; 0x314 <brush1_action+0x4e>
     312:	ab c0       	rjmp	.+342    	; 0x46a <brush1_action+0x1a4>
     314:	80 31       	cpi	r24, 0x10	; 16
     316:	91 05       	cpc	r25, r1
     318:	4c f4       	brge	.+18     	; 0x32c <brush1_action+0x66>
     31a:	8d 30       	cpi	r24, 0x0D	; 13
     31c:	91 05       	cpc	r25, r1
     31e:	09 f4       	brne	.+2      	; 0x322 <brush1_action+0x5c>
     320:	88 c0       	rjmp	.+272    	; 0x432 <brush1_action+0x16c>
     322:	8e 30       	cpi	r24, 0x0E	; 14
     324:	91 05       	cpc	r25, r1
     326:	09 f0       	breq	.+2      	; 0x32a <brush1_action+0x64>
     328:	06 c1       	rjmp	.+524    	; 0x536 <brush1_action+0x270>
     32a:	8d c0       	rjmp	.+282    	; 0x446 <brush1_action+0x180>
     32c:	80 31       	cpi	r24, 0x10	; 16
     32e:	91 05       	cpc	r25, r1
     330:	09 f4       	brne	.+2      	; 0x334 <brush1_action+0x6e>
     332:	c3 c0       	rjmp	.+390    	; 0x4ba <brush1_action+0x1f4>
     334:	81 31       	cpi	r24, 0x11	; 17
     336:	91 05       	cpc	r25, r1
     338:	09 f0       	breq	.+2      	; 0x33c <brush1_action+0x76>
     33a:	fd c0       	rjmp	.+506    	; 0x536 <brush1_action+0x270>
     33c:	db c0       	rjmp	.+438    	; 0x4f4 <brush1_action+0x22e>
		case MOVEC1:  //state 8   move to first cleaning stateion
		
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // move fixture to brush1 center   
     33e:	80 91 fa 08 	lds	r24, 0x08FA
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     342:	80 63       	ori	r24, 0x30	; 48
     344:	80 93 fa 08 	sts	0x08FA, r24
			*pfixtureMotor = 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	91 83       	std	Z+1, r25	; 0x01
     34e:	80 83       	st	Z, r24
			*pplateLoadMotor = 0;
     350:	19 82       	std	Y+1, r1	; 0x01
     352:	18 82       	st	Y, r1
     354:	f0 c0       	rjmp	.+480    	; 0x536 <brush1_action+0x270>
			break;
			
		case B1SET1:    //state 9
		
			*pfixtureMotor = 0;				//stop fixture
     356:	11 82       	std	Z+1, r1	; 0x01
     358:	10 82       	st	Z, r1
			u_outputByte0.bits_in_outputByte0.brush1Raise = 1;		// turn off raise brush1(if on)
     35a:	80 91 f8 08 	lds	r24, 0x08F8
     35e:	80 62       	ori	r24, 0x20	; 32
			u_outputByte0.bits_in_outputByte0.brush1Lower = 0;		 //force brush low
     360:	8f 7b       	andi	r24, 0xBF	; 191
     362:	80 93 f8 08 	sts	0x08F8, r24
			u_outputByte1.bits_in_outputByte1.brush1Pump = 1;		//Pump on to wet brush
     366:	80 91 f6 08 	lds	r24, 0x08F6
     36a:	80 61       	ori	r24, 0x10	; 16
     36c:	80 93 f6 08 	sts	0x08F6, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;		 // set brush 1 direction ccw (1)
     370:	80 91 fa 08 	lds	r24, 0x08FA
     374:	80 68       	ori	r24, 0x80	; 128
     376:	80 93 fa 08 	sts	0x08FA, r24
			u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1; // set the brush motor current up
     37a:	80 91 f5 08 	lds	r24, 0x08F5
     37e:	81 60       	ori	r24, 0x01	; 1
     380:	80 93 f5 08 	sts	0x08F5, r24
			delayTimeMicroSeconds = 4000;   //  slow down the brush for wetting utputByte0.bits_in_outputByte0.brush1Lower = 1;
     384:	80 ea       	ldi	r24, 0xA0	; 160
     386:	9f e0       	ldi	r25, 0x0F	; 15
     388:	90 93 21 04 	sts	0x0421, r25
     38c:	80 93 20 04 	sts	0x0420, r24
			*pbrush1Motor = 1;										// turn on brush motor
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	8d 93       	st	X+, r24
     396:	9c 93       	st	X, r25
     398:	ce c0       	rjmp	.+412    	; 0x536 <brush1_action+0x270>
			break;
			
		case B1START1: //state 10
		
			u_outputByte1.bits_in_outputByte1.brush1Pump = 0;	 // turn off the pump
     39a:	80 91 f6 08 	lds	r24, 0x08F6
     39e:	8f 7e       	andi	r24, 0xEF	; 239
     3a0:	80 93 f6 08 	sts	0x08F6, r24
			*pbrush1Motor = 0;								     // stop the brush motor	
     3a4:	1d 92       	st	X+, r1
     3a6:	1c 92       	st	X, r1
			delayTimeMicroSeconds =250; // speed up brush and fixture
     3a8:	8a ef       	ldi	r24, 0xFA	; 250
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	90 93 21 04 	sts	0x0421, r25
     3b0:	80 93 20 04 	sts	0x0420, r24
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;   //release brush low
     3b4:	80 91 f8 08 	lds	r24, 0x08F8
     3b8:	80 64       	ori	r24, 0x40	; 64
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;    // raise the brush against the glass
     3ba:	8f 7d       	andi	r24, 0xDF	; 223
     3bc:	80 93 f8 08 	sts	0x08F8, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;		 // set brush 1 direction cw (1)
     3c0:	80 91 fa 08 	lds	r24, 0x08FA
     3c4:	80 68       	ori	r24, 0x80	; 128
     3c6:	80 93 fa 08 	sts	0x08FA, r24
			highLength2 = 5;
     3ca:	85 e0       	ldi	r24, 0x05	; 5
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	90 93 0f 04 	sts	0x040F, r25
     3d2:	80 93 0e 04 	sts	0x040E, r24
			totalStepLength2 = 10;
     3d6:	70 93 19 04 	sts	0x0419, r23
     3da:	60 93 18 04 	sts	0x0418, r22
     3de:	ab c0       	rjmp	.+342    	; 0x536 <brush1_action+0x270>
			break;
			
		case CLEAN1_1:    //state 11
			 u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     3e0:	80 91 fa 08 	lds	r24, 0x08FA
     3e4:	80 62       	ori	r24, 0x20	; 32
			 u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // fixture moves backward
     3e6:	8f 7e       	andi	r24, 0xEF	; 239
     3e8:	80 93 fa 08 	sts	0x08FA, r24
			*pbrush1Motor = 1;            //turn on the brush for cleaning
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	8d 93       	st	X+, r24
     3f2:	9c 93       	st	X, r25
			*pfixtureMotor = 1;			  //start fixture moving
     3f4:	91 83       	std	Z+1, r25	; 0x01
     3f6:	80 83       	st	Z, r24
     3f8:	9e c0       	rjmp	.+316    	; 0x536 <brush1_action+0x270>

			break;
			
		case B1STOP1:      // state 12
			*pfixtureMotor = 0;              // stop fixture
     3fa:	11 82       	std	Z+1, r1	; 0x01
     3fc:	10 82       	st	Z, r1
			*pbrush1Motor = 0;              // stop	brush motor
     3fe:	1d 92       	st	X+, r1
     400:	1c 92       	st	X, r1
			u_outputByte0.bits_in_outputByte0.brush1Raise =1 ;       //turn off brush raise
     402:	80 91 f8 08 	lds	r24, 0x08F8
     406:	80 62       	ori	r24, 0x20	; 32
			u_outputByte0.bits_in_outputByte0.brush1Lower = 0;       //drive brush low
     408:	8f 7b       	andi	r24, 0xBF	; 191
     40a:	80 93 f8 08 	sts	0x08F8, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;		 // set brush 1 direction CW (1)
     40e:	80 91 fa 08 	lds	r24, 0x08FA
     412:	80 68       	ori	r24, 0x80	; 128
     414:	80 93 fa 08 	sts	0x08FA, r24
			highLength2 = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	90 93 0f 04 	sts	0x040F, r25
     420:	80 93 0e 04 	sts	0x040E, r24
			totalStepLength2 = 2;
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	90 93 19 04 	sts	0x0419, r25
     42c:	80 93 18 04 	sts	0x0418, r24
     430:	82 c0       	rjmp	.+260    	; 0x536 <brush1_action+0x270>
			
			break;
		case CLEAN1_2:    //state 13
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // fixture moves to center of brush1
     432:	80 91 fa 08 	lds	r24, 0x08FA
     436:	80 61       	ori	r24, 0x10	; 16
     438:	80 93 fa 08 	sts	0x08FA, r24
			*pfixtureMotor = 1;
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	91 83       	std	Z+1, r25	; 0x01
     442:	80 83       	st	Z, r24
     444:	51 c0       	rjmp	.+162    	; 0x4e8 <brush1_action+0x222>
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
			
		case B1SET2:    //state 14
		
			*pfixtureMotor = 0;
     446:	11 82       	std	Z+1, r1	; 0x01
     448:	10 82       	st	Z, r1
			*pbrush1Motor = 1;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	8d 93       	st	X+, r24
     450:	9c 93       	st	X, r25
			
			delayTimeMicroSeconds = 4000;   //  slow down the brush for wetting 
     452:	80 ea       	ldi	r24, 0xA0	; 160
     454:	9f e0       	ldi	r25, 0x0F	; 15
     456:	90 93 21 04 	sts	0x0421, r25
     45a:	80 93 20 04 	sts	0x0420, r24
			u_outputByte1.bits_in_outputByte1.brush1Pump = 1;	//pump on to wet brush
     45e:	80 91 f6 08 	lds	r24, 0x08F6
     462:	80 61       	ori	r24, 0x10	; 16
     464:	80 93 f6 08 	sts	0x08F6, r24
     468:	22 c0       	rjmp	.+68     	; 0x4ae <brush1_action+0x1e8>
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1; 
		
			break;
		case B1START2:   //state 15
			highLength2 = 5;
     46a:	85 e0       	ldi	r24, 0x05	; 5
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	90 93 0f 04 	sts	0x040F, r25
     472:	80 93 0e 04 	sts	0x040E, r24
			totalStepLength2 = 10;
     476:	8a e0       	ldi	r24, 0x0A	; 10
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	90 93 19 04 	sts	0x0419, r25
     47e:	80 93 18 04 	sts	0x0418, r24
			delayTimeMicroSeconds = 250; // speed up the motors
     482:	8a ef       	ldi	r24, 0xFA	; 250
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	90 93 21 04 	sts	0x0421, r25
     48a:	80 93 20 04 	sts	0x0420, r24
			*pfixtureMotor = 0;
     48e:	11 82       	std	Z+1, r1	; 0x01
     490:	10 82       	st	Z, r1
			*pbrush1Motor = 1;            //turnup current on brush 1 motor
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	8d 93       	st	X+, r24
     498:	9c 93       	st	X, r25
			u_outputByte1.bits_in_outputByte1.brush1Pump = 0;	//Pump off
     49a:	80 91 f6 08 	lds	r24, 0x08F6
     49e:	8f 7e       	andi	r24, 0xEF	; 239
     4a0:	80 93 f6 08 	sts	0x08F6, r24
		    u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  //brush1 dir CCW(1)
     4a4:	80 91 fa 08 	lds	r24, 0x08FA
     4a8:	8f 77       	andi	r24, 0x7F	; 127
     4aa:	80 93 fa 08 	sts	0x08FA, r24
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;  
     4ae:	80 91 f8 08 	lds	r24, 0x08F8
     4b2:	80 64       	ori	r24, 0x40	; 64
     4b4:	80 93 f8 08 	sts	0x08F8, r24
     4b8:	3e c0       	rjmp	.+124    	; 0x536 <brush1_action+0x270>
			//u_outputByte0.bits_in_outputByte0.brush1Raise = 0;  

			break;
			
		case CLEAN1_3:    // state 16
			highLength2 = 5;
     4ba:	85 e0       	ldi	r24, 0x05	; 5
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	90 93 0f 04 	sts	0x040F, r25
     4c2:	80 93 0e 04 	sts	0x040E, r24
			totalStepLength2 = 10;
     4c6:	8a e0       	ldi	r24, 0x0A	; 10
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	90 93 19 04 	sts	0x0419, r25
     4ce:	80 93 18 04 	sts	0x0418, r24
			*pbrush1Motor = 1;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	8d 93       	st	X+, r24
     4d8:	9c 93       	st	X, r25
			*pfixtureMotor = 1;
     4da:	91 83       	std	Z+1, r25	; 0x01
     4dc:	80 83       	st	Z, r24
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;  // raise brush
     4de:	80 91 f8 08 	lds	r24, 0x08F8
     4e2:	8f 7d       	andi	r24, 0xDF	; 223
     4e4:	80 93 f8 08 	sts	0x08F8, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     4e8:	80 91 fa 08 	lds	r24, 0x08FA
     4ec:	80 62       	ori	r24, 0x20	; 32
     4ee:	80 93 fa 08 	sts	0x08FA, r24
     4f2:	21 c0       	rjmp	.+66     	; 0x536 <brush1_action+0x270>
			

			break;
			
		case B1STOP2:    //state  17
			highLength2 = 1;
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	90 93 0f 04 	sts	0x040F, r25
     4fc:	80 93 0e 04 	sts	0x040E, r24
			totalStepLength2 = 2;
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	90 93 19 04 	sts	0x0419, r25
     508:	80 93 18 04 	sts	0x0418, r24
			*pbrush1Motor = 0;
     50c:	1d 92       	st	X+, r1
     50e:	1c 92       	st	X, r1
			*pfixtureMotor = 0;
     510:	11 82       	std	Z+1, r1	; 0x01
     512:	10 82       	st	Z, r1
			*pplateLoadMotor = 0;
     514:	19 82       	std	Y+1, r1	; 0x01
     516:	18 82       	st	Y, r1
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0; // turn off raise
     518:	80 91 f8 08 	lds	r24, 0x08F8
     51c:	8f 77       	andi	r24, 0x7F	; 127
     51e:	80 93 f8 08 	sts	0x08F8, r24
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;  // turn on lower
     522:	80 91 f6 08 	lds	r24, 0x08F6
     526:	81 60       	ori	r24, 0x01	; 1
     528:	80 93 f6 08 	sts	0x08F6, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;  //idle brush motor
     52c:	80 91 f5 08 	lds	r24, 0x08F5
     530:	87 7f       	andi	r24, 0xF7	; 247
     532:	80 93 f5 08 	sts	0x08F5, r24

					break;		
	}
}
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	08 95       	ret

00000540 <brush2_action>:

void brush2_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	f9 01       	movw	r30, r18
     546:	d7 01       	movw	r26, r14
	switch(state){
     548:	87 31       	cpi	r24, 0x17	; 23
     54a:	91 05       	cpc	r25, r1
     54c:	09 f4       	brne	.+2      	; 0x550 <brush2_action+0x10>
     54e:	85 c0       	rjmp	.+266    	; 0x65a <brush2_action+0x11a>
     550:	88 31       	cpi	r24, 0x18	; 24
     552:	91 05       	cpc	r25, r1
     554:	b4 f4       	brge	.+44     	; 0x582 <brush2_action+0x42>
     556:	84 31       	cpi	r24, 0x14	; 20
     558:	91 05       	cpc	r25, r1
     55a:	09 f4       	brne	.+2      	; 0x55e <brush2_action+0x1e>
     55c:	4d c0       	rjmp	.+154    	; 0x5f8 <brush2_action+0xb8>
     55e:	85 31       	cpi	r24, 0x15	; 21
     560:	91 05       	cpc	r25, r1
     562:	3c f4       	brge	.+14     	; 0x572 <brush2_action+0x32>
     564:	82 31       	cpi	r24, 0x12	; 18
     566:	91 05       	cpc	r25, r1
     568:	19 f1       	breq	.+70     	; 0x5b0 <brush2_action+0x70>
     56a:	43 97       	sbiw	r24, 0x13	; 19
     56c:	09 f0       	breq	.+2      	; 0x570 <brush2_action+0x30>
     56e:	eb c0       	rjmp	.+470    	; 0x746 <brush2_action+0x206>
     570:	29 c0       	rjmp	.+82     	; 0x5c4 <brush2_action+0x84>
     572:	85 31       	cpi	r24, 0x15	; 21
     574:	91 05       	cpc	r25, r1
     576:	09 f4       	brne	.+2      	; 0x57a <brush2_action+0x3a>
     578:	5c c0       	rjmp	.+184    	; 0x632 <brush2_action+0xf2>
     57a:	46 97       	sbiw	r24, 0x16	; 22
     57c:	09 f0       	breq	.+2      	; 0x580 <brush2_action+0x40>
     57e:	e3 c0       	rjmp	.+454    	; 0x746 <brush2_action+0x206>
     580:	5f c0       	rjmp	.+190    	; 0x640 <brush2_action+0x100>
     582:	8a 31       	cpi	r24, 0x1A	; 26
     584:	91 05       	cpc	r25, r1
     586:	09 f4       	brne	.+2      	; 0x58a <brush2_action+0x4a>
     588:	a1 c0       	rjmp	.+322    	; 0x6cc <brush2_action+0x18c>
     58a:	8b 31       	cpi	r24, 0x1B	; 27
     58c:	91 05       	cpc	r25, r1
     58e:	44 f4       	brge	.+16     	; 0x5a0 <brush2_action+0x60>
     590:	88 31       	cpi	r24, 0x18	; 24
     592:	91 05       	cpc	r25, r1
     594:	09 f4       	brne	.+2      	; 0x598 <brush2_action+0x58>
     596:	6f c0       	rjmp	.+222    	; 0x676 <brush2_action+0x136>
     598:	49 97       	sbiw	r24, 0x19	; 25
     59a:	09 f0       	breq	.+2      	; 0x59e <brush2_action+0x5e>
     59c:	d4 c0       	rjmp	.+424    	; 0x746 <brush2_action+0x206>
     59e:	7b c0       	rjmp	.+246    	; 0x696 <brush2_action+0x156>
     5a0:	8b 31       	cpi	r24, 0x1B	; 27
     5a2:	91 05       	cpc	r25, r1
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <brush2_action+0x68>
     5a6:	9c c0       	rjmp	.+312    	; 0x6e0 <brush2_action+0x1a0>
     5a8:	4c 97       	sbiw	r24, 0x1c	; 28
     5aa:	09 f0       	breq	.+2      	; 0x5ae <brush2_action+0x6e>
     5ac:	cc c0       	rjmp	.+408    	; 0x746 <brush2_action+0x206>
     5ae:	b8 c0       	rjmp	.+368    	; 0x720 <brush2_action+0x1e0>
		
		case MOVEC2:  // state 18
			delayTimeMicroSeconds = 250; // speed up to move fixture
     5b0:	8a ef       	ldi	r24, 0xFA	; 250
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	90 93 21 04 	sts	0x0421, r25
     5b8:	80 93 20 04 	sts	0x0420, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // set fixture motor to go forward
     5bc:	80 91 fa 08 	lds	r24, 0x08FA
     5c0:	8f 7e       	andi	r24, 0xEF	; 239
     5c2:	54 c0       	rjmp	.+168    	; 0x66c <brush2_action+0x12c>
			*pfixtureMotor = 1; 
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
			
		case B2SET1:  //state 19
			*pfixtureMotor = 0;  // turn off fixture motor
     5c4:	11 82       	std	Z+1, r1	; 0x01
     5c6:	10 82       	st	Z, r1
			*pbrush2Motor = 1;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	8d 93       	st	X+, r24
     5ce:	9c 93       	st	X, r25
			delayTimeMicroSeconds = 4000; //slow down to wet brush
     5d0:	80 ea       	ldi	r24, 0xA0	; 160
     5d2:	9f e0       	ldi	r25, 0x0F	; 15
     5d4:	90 93 21 04 	sts	0x0421, r25
     5d8:	80 93 20 04 	sts	0x0420, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0; //turn current down on fixture motor
     5dc:	80 91 fa 08 	lds	r24, 0x08FA
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;   //set fixture motor to go backward
     5e0:	8f 7c       	andi	r24, 0xCF	; 207
     5e2:	80 93 fa 08 	sts	0x08FA, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;   //make sure raise is off
     5e6:	80 91 f8 08 	lds	r24, 0x08F8
     5ea:	80 68       	ori	r24, 0x80	; 128
     5ec:	80 93 f8 08 	sts	0x08F8, r24
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;  // drive down brush to wet
     5f0:	80 91 f6 08 	lds	r24, 0x08F6
     5f4:	8e 7f       	andi	r24, 0xFE	; 254
     5f6:	47 c0       	rjmp	.+142    	; 0x686 <brush2_action+0x146>
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // direction for wetting brush 2
			break;
			
		case B2START1:   //state 20
			*pbrush2Motor = 0;      // turn off brush2
     5f8:	1d 92       	st	X+, r1
     5fa:	1c 92       	st	X, r1
			*pfixtureMotor = 1;     // turn on fixture motor
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	91 83       	std	Z+1, r25	; 0x01
     602:	80 83       	st	Z, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;  //set power up
     604:	80 91 fa 08 	lds	r24, 0x08FA
     608:	80 62       	ori	r24, 0x20	; 32
     60a:	80 93 fa 08 	sts	0x08FA, r24
			u_outputByte1.bits_in_outputByte1.brush2Pump = 0;	//turn off brush2 pump
     60e:	80 91 f6 08 	lds	r24, 0x08F6
     612:	8f 7d       	andi	r24, 0xDF	; 223
			u_outputByte1.bits_in_outputByte1.brush2Lower = 1;  // release brush 2 lower
     614:	81 60       	ori	r24, 0x01	; 1
     616:	80 93 f6 08 	sts	0x08F6, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 0;  // raise brush 2 to clean
     61a:	80 91 f8 08 	lds	r24, 0x08F8
     61e:	8f 77       	andi	r24, 0x7F	; 127
     620:	80 93 f8 08 	sts	0x08F8, r24
			delayTimeMicroSeconds =250; // speed up to move fixture
     624:	8a ef       	ldi	r24, 0xFA	; 250
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	90 93 21 04 	sts	0x0421, r25
     62c:	80 93 20 04 	sts	0x0420, r24
     630:	8a c0       	rjmp	.+276    	; 0x746 <brush2_action+0x206>
			break;
			
		case CLEAN2_1:   //state 21
			delayTimeMicroSeconds = 250; // speed up to move fixture
     632:	8a ef       	ldi	r24, 0xFA	; 250
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	90 93 21 04 	sts	0x0421, r25
     63a:	80 93 20 04 	sts	0x0420, r24
     63e:	46 c0       	rjmp	.+140    	; 0x6cc <brush2_action+0x18c>
			*pbrush2Motor = 1;
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
			
		case B2STOP1:   //state 22
			*pfixtureMotor = 0;
     640:	11 82       	std	Z+1, r1	; 0x01
     642:	10 82       	st	Z, r1
			*pbrush2Motor = 0;
     644:	1d 92       	st	X+, r1
     646:	1c 92       	st	X, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;  //drive brush low
     648:	80 91 f6 08 	lds	r24, 0x08F6
     64c:	8e 7f       	andi	r24, 0xFE	; 254
     64e:	80 93 f6 08 	sts	0x08F6, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;  //release brush raise
     652:	80 91 f8 08 	lds	r24, 0x08F8
     656:	80 68       	ori	r24, 0x80	; 128
     658:	36 c0       	rjmp	.+108    	; 0x6c6 <brush2_action+0x186>
			break;
			
		case CLEAN2_2:    // state 23
			delayTimeMicroSeconds = 250; // speed up to move fixture
     65a:	8a ef       	ldi	r24, 0xFA	; 250
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	90 93 21 04 	sts	0x0421, r25
     662:	80 93 20 04 	sts	0x0420, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // fixture direction to forward
     666:	80 91 fa 08 	lds	r24, 0x08FA
     66a:	80 61       	ori	r24, 0x10	; 16
     66c:	80 93 fa 08 	sts	0x08FA, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	2f c0       	rjmp	.+94     	; 0x6d4 <brush2_action+0x194>
			break;
			
		case B2SET2:   // state 24
			*pfixtureMotor = 0;
     676:	11 82       	std	Z+1, r1	; 0x01
     678:	10 82       	st	Z, r1
			*pbrush2Motor = 1;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	8d 93       	st	X+, r24
     680:	9c 93       	st	X, r25
			u_outputByte1.bits_in_outputByte1.brush2Pump = 1;	//turn pump2 on
     682:	80 91 f6 08 	lds	r24, 0x08F6
     686:	80 62       	ori	r24, 0x20	; 32
     688:	80 93 f6 08 	sts	0x08F6, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     68c:	80 91 f5 08 	lds	r24, 0x08F5
     690:	88 60       	ori	r24, 0x08	; 8
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  //brush direction for wetting
     692:	8b 7f       	andi	r24, 0xFB	; 251
     694:	42 c0       	rjmp	.+132    	; 0x71a <brush2_action+0x1da>
			break;
			
		case B2START2:   //State 25
			*pfixtureMotor = 0;
     696:	11 82       	std	Z+1, r1	; 0x01
     698:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // brush direction for forward cleaning
     69a:	80 91 f5 08 	lds	r24, 0x08F5
     69e:	8b 7f       	andi	r24, 0xFB	; 251
     6a0:	80 93 f5 08 	sts	0x08F5, r24
			u_outputByte1.bits_in_outputByte1.brush2Pump = 0;	//turn pump2 on
     6a4:	80 91 f6 08 	lds	r24, 0x08F6
     6a8:	8f 7d       	andi	r24, 0xDF	; 223
     6aa:	80 93 f6 08 	sts	0x08F6, r24
			*pbrush2Motor = 1;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	8d 93       	st	X+, r24
     6b4:	9c 93       	st	X, r25
			u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     6b6:	80 91 f6 08 	lds	r24, 0x08F6
     6ba:	81 60       	ori	r24, 0x01	; 1
     6bc:	80 93 f6 08 	sts	0x08F6, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     6c0:	80 91 f8 08 	lds	r24, 0x08F8
     6c4:	8f 77       	andi	r24, 0x7F	; 127
     6c6:	80 93 f8 08 	sts	0x08F8, r24
     6ca:	3d c0       	rjmp	.+122    	; 0x746 <brush2_action+0x206>
			break;
			
		case CLEAN2_3:     // state 26
			*pbrush2Motor = 1;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	8d 93       	st	X+, r24
     6d2:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     6d4:	91 83       	std	Z+1, r25	; 0x01
     6d6:	80 83       	st	Z, r24
     6d8:	80 91 fa 08 	lds	r24, 0x08FA
     6dc:	80 62       	ori	r24, 0x20	; 32
     6de:	31 c0       	rjmp	.+98     	; 0x742 <brush2_action+0x202>
			break;
			
		case B2STOP2:    // state 27
			highLength2 = 1;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	90 93 0f 04 	sts	0x040F, r25
     6e8:	80 93 0e 04 	sts	0x040E, r24
			totalStepLength2 = 2;
     6ec:	82 e0       	ldi	r24, 0x02	; 2
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	90 93 19 04 	sts	0x0419, r25
     6f4:	80 93 18 04 	sts	0x0418, r24
			*pbrush2Motor = 0;
     6f8:	1d 92       	st	X+, r1
     6fa:	1c 92       	st	X, r1
			*pfixtureMotor = 0;
     6fc:	11 82       	std	Z+1, r1	; 0x01
     6fe:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     700:	80 91 f6 08 	lds	r24, 0x08F6
     704:	8e 7f       	andi	r24, 0xFE	; 254
     706:	80 93 f6 08 	sts	0x08F6, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     70a:	80 91 f8 08 	lds	r24, 0x08F8
     70e:	80 68       	ori	r24, 0x80	; 128
     710:	80 93 f8 08 	sts	0x08F8, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     714:	80 91 f5 08 	lds	r24, 0x08F5
     718:	87 7f       	andi	r24, 0xF7	; 247
     71a:	80 93 f5 08 	sts	0x08F5, r24
     71e:	13 c0       	rjmp	.+38     	; 0x746 <brush2_action+0x206>
			break;
			
		case MOVED1:    // state 28
			highLength2 = 1;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	90 93 0f 04 	sts	0x040F, r25
     728:	80 93 0e 04 	sts	0x040E, r24
			totalStepLength2 = 2;
     72c:	22 e0       	ldi	r18, 0x02	; 2
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	30 93 19 04 	sts	0x0419, r19
     734:	20 93 18 04 	sts	0x0418, r18
			*pfixtureMotor = 1;
     738:	91 83       	std	Z+1, r25	; 0x01
     73a:	80 83       	st	Z, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     73c:	80 91 fa 08 	lds	r24, 0x08FA
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     740:	80 63       	ori	r24, 0x30	; 48
     742:	80 93 fa 08 	sts	0x08FA, r24
			break;
	}
}
     746:	ff 90       	pop	r15
     748:	ef 90       	pop	r14
     74a:	08 95       	ret

0000074c <dry_action>:

void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     74c:	cf 92       	push	r12
     74e:	df 92       	push	r13
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	ea 01       	movw	r28, r20
     756:	f9 01       	movw	r30, r18
     758:	d6 01       	movw	r26, r12
	switch(state){
     75a:	80 32       	cpi	r24, 0x20	; 32
     75c:	91 05       	cpc	r25, r1
     75e:	09 f4       	brne	.+2      	; 0x762 <dry_action+0x16>
     760:	6d c0       	rjmp	.+218    	; 0x83c <dry_action+0xf0>
     762:	81 32       	cpi	r24, 0x21	; 33
     764:	91 05       	cpc	r25, r1
     766:	5c f4       	brge	.+22     	; 0x77e <dry_action+0x32>
     768:	8e 31       	cpi	r24, 0x1E	; 30
     76a:	91 05       	cpc	r25, r1
     76c:	51 f1       	breq	.+84     	; 0x7c2 <dry_action+0x76>
     76e:	8f 31       	cpi	r24, 0x1F	; 31
     770:	91 05       	cpc	r25, r1
     772:	0c f0       	brlt	.+2      	; 0x776 <dry_action+0x2a>
     774:	47 c0       	rjmp	.+142    	; 0x804 <dry_action+0xb8>
     776:	4d 97       	sbiw	r24, 0x1d	; 29
     778:	09 f0       	breq	.+2      	; 0x77c <dry_action+0x30>
     77a:	a2 c0       	rjmp	.+324    	; 0x8c0 <dry_action+0x174>
     77c:	10 c0       	rjmp	.+32     	; 0x79e <dry_action+0x52>
     77e:	82 32       	cpi	r24, 0x22	; 34
     780:	91 05       	cpc	r25, r1
     782:	09 f4       	brne	.+2      	; 0x786 <dry_action+0x3a>
     784:	71 c0       	rjmp	.+226    	; 0x868 <dry_action+0x11c>
     786:	82 32       	cpi	r24, 0x22	; 34
     788:	91 05       	cpc	r25, r1
     78a:	0c f4       	brge	.+2      	; 0x78e <dry_action+0x42>
     78c:	66 c0       	rjmp	.+204    	; 0x85a <dry_action+0x10e>
     78e:	83 32       	cpi	r24, 0x23	; 35
     790:	91 05       	cpc	r25, r1
     792:	09 f4       	brne	.+2      	; 0x796 <dry_action+0x4a>
     794:	74 c0       	rjmp	.+232    	; 0x87e <dry_action+0x132>
     796:	84 97       	sbiw	r24, 0x24	; 36
     798:	09 f0       	breq	.+2      	; 0x79c <dry_action+0x50>
     79a:	92 c0       	rjmp	.+292    	; 0x8c0 <dry_action+0x174>
     79c:	77 c0       	rjmp	.+238    	; 0x88c <dry_action+0x140>
		
		case MOVED1EXTRA:    //state 29  ?
			highLength2 = 1;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	90 93 0f 04 	sts	0x040F, r25
     7a6:	80 93 0e 04 	sts	0x040E, r24
			totalStepLength2 = 2;
     7aa:	22 e0       	ldi	r18, 0x02	; 2
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	30 93 19 04 	sts	0x0419, r19
     7b2:	20 93 18 04 	sts	0x0418, r18
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     7b6:	20 91 fa 08 	lds	r18, 0x08FA
     7ba:	20 61       	ori	r18, 0x10	; 16
     7bc:	20 93 fa 08 	sts	0x08FA, r18
     7c0:	5b c0       	rjmp	.+182    	; 0x878 <dry_action+0x12c>
			*pfixtureMotor = 1;
			break;
			
		case DRY:    // state 30   stop running paper towel advance
		
			u_outputByte1.bits_in_outputByte1.airKnife = 0;   // turn on air to dry
     7c2:	80 91 f6 08 	lds	r24, 0x08F6
     7c6:	87 7f       	andi	r24, 0xF7	; 247
     7c8:	80 93 f6 08 	sts	0x08F6, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     7cc:	80 91 fa 08 	lds	r24, 0x08FA
     7d0:	8f 7e       	andi	r24, 0xEF	; 239
     7d2:	80 93 fa 08 	sts	0x08FA, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     7d6:	21 e0       	ldi	r18, 0x01	; 1
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	31 83       	std	Z+1, r19	; 0x01
     7dc:	20 83       	st	Z, r18
     7de:	80 91 fa 08 	lds	r24, 0x08FA
     7e2:	80 62       	ori	r24, 0x20	; 32
     7e4:	80 93 fa 08 	sts	0x08FA, r24
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
     7e8:	80 91 f5 08 	lds	r24, 0x08F5
     7ec:	80 64       	ori	r24, 0x40	; 64
			u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     7ee:	8f 7d       	andi	r24, 0xDF	; 223
     7f0:	80 93 f5 08 	sts	0x08F5, r24
			u_outputByte1.bits_in_outputByte1.ptRaise = 0;   //raise the rollers
     7f4:	80 91 f6 08 	lds	r24, 0x08F6
     7f8:	8b 7f       	andi	r24, 0xFB	; 251
     7fa:	80 93 f6 08 	sts	0x08F6, r24
			*ppaperTowelMotor = 1;   //start advancing the paper
     7fe:	2d 93       	st	X+, r18
     800:	3c 93       	st	X, r19
     802:	5e c0       	rjmp	.+188    	; 0x8c0 <dry_action+0x174>
			break;
			
		case DSTOP:   // state 31 turn off drying --plate is past
		
			u_outputByte1.bits_in_outputByte1.airKnife = 1;
     804:	80 91 f6 08 	lds	r24, 0x08F6
     808:	88 60       	ori	r24, 0x08	; 8
     80a:	80 93 f6 08 	sts	0x08F6, r24
			*pfixtureMotor = 1;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	91 83       	std	Z+1, r25	; 0x01
     814:	80 83       	st	Z, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     816:	80 91 fa 08 	lds	r24, 0x08FA
     81a:	80 62       	ori	r24, 0x20	; 32
     81c:	80 93 fa 08 	sts	0x08FA, r24
			*ppaperTowelMotor = 0;
     820:	1d 92       	st	X+, r1
     822:	1c 92       	st	X, r1
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
     824:	80 91 f5 08 	lds	r24, 0x08F5
     828:	8f 7b       	andi	r24, 0xBF	; 191
     82a:	80 93 f5 08 	sts	0x08F5, r24
			u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     82e:	80 91 f6 08 	lds	r24, 0x08F6
     832:	84 60       	ori	r24, 0x04	; 4
			u_outputByte1.bits_in_outputByte1.ptLower = 0;
     834:	8d 7f       	andi	r24, 0xFD	; 253
     836:	80 93 f6 08 	sts	0x08F6, r24
     83a:	42 c0       	rjmp	.+132    	; 0x8c0 <dry_action+0x174>
			break;
			
		case FIXL2EXTRA:  //state 32
		
			u_outputByte1.bits_in_outputByte1.ptLower = 1;
     83c:	80 91 f6 08 	lds	r24, 0x08F6
     840:	82 60       	ori	r24, 0x02	; 2
     842:	80 93 f6 08 	sts	0x08F6, r24
			*pfixtureMotor = 1;
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	91 83       	std	Z+1, r25	; 0x01
     84c:	80 83       	st	Z, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     84e:	80 91 fa 08 	lds	r24, 0x08FA
     852:	80 62       	ori	r24, 0x20	; 32
     854:	80 93 fa 08 	sts	0x08FA, r24
     858:	33 c0       	rjmp	.+102    	; 0x8c0 <dry_action+0x174>
			break;
			
		case RAISEL2:  //state 33   raise fixture lifts
		
			*pfixtureMotor = 0;
     85a:	11 82       	std	Z+1, r1	; 0x01
     85c:	10 82       	st	Z, r1
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;   //make sure pistons are free
     85e:	80 91 f8 08 	lds	r24, 0x08F8
     862:	80 61       	ori	r24, 0x10	; 16
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;    // raise fixture
     864:	87 7f       	andi	r24, 0xF7	; 247
     866:	0f c0       	rjmp	.+30     	; 0x886 <dry_action+0x13a>

			break;
			
		case FIXH:   // state 34  home fixture
		
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     868:	80 91 fa 08 	lds	r24, 0x08FA
     86c:	8f 7e       	andi	r24, 0xEF	; 239
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     86e:	84 62       	ori	r24, 0x24	; 36
     870:	80 93 fa 08 	sts	0x08FA, r24
			*pfixtureMotor = 1; 
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	91 83       	std	Z+1, r25	; 0x01
     87a:	80 83       	st	Z, r24
     87c:	21 c0       	rjmp	.+66     	; 0x8c0 <dry_action+0x174>
			break;
			
		case LOWERL3:   // state 35
		
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1; // let pistons down again
     87e:	80 91 f8 08 	lds	r24, 0x08F8
     882:	88 60       	ori	r24, 0x08	; 8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;   //drive pistons down
     884:	8f 7e       	andi	r24, 0xEF	; 239
     886:	80 93 f8 08 	sts	0x08F8, r24
     88a:	1a c0       	rjmp	.+52     	; 0x8c0 <dry_action+0x174>
			
			break;
			
		case UNLOAD:     // state 36
		
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     88c:	80 91 f8 08 	lds	r24, 0x08F8
     890:	88 60       	ori	r24, 0x08	; 8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     892:	8f 7e       	andi	r24, 0xEF	; 239
     894:	80 93 f8 08 	sts	0x08F8, r24
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 0){
     898:	80 91 f4 08 	lds	r24, 0x08F4
     89c:	81 fd       	sbrc	r24, 1
     89e:	07 c0       	rjmp	.+14     	; 0x8ae <dry_action+0x162>
				u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     8a0:	80 91 fa 08 	lds	r24, 0x08FA
     8a4:	8f 7d       	andi	r24, 0xDF	; 223
     8a6:	80 93 fa 08 	sts	0x08FA, r24
				*pfixtureMotor = 0;
     8aa:	11 82       	std	Z+1, r1	; 0x01
     8ac:	10 82       	st	Z, r1
			}
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     8ae:	80 91 fa 08 	lds	r24, 0x08FA
     8b2:	8d 7f       	andi	r24, 0xFD	; 253
     8b4:	80 93 fa 08 	sts	0x08FA, r24
			*pplateLoadMotor = 1;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	99 83       	std	Y+1, r25	; 0x01
     8be:	88 83       	st	Y, r24
			break;
	}
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	df 90       	pop	r13
     8c6:	cf 90       	pop	r12
     8c8:	08 95       	ret

000008ca <button_debounce>:

bool button_debounce(int counter, int *pstateButton)
{
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	8c 01       	movw	r16, r24
     8d4:	eb 01       	movw	r28, r22
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && is_digital_input_high(IO_D0)){
     8d6:	88 81       	ld	r24, Y
     8d8:	99 81       	ldd	r25, Y+1	; 0x01
     8da:	89 2b       	or	r24, r25
     8dc:	69 f4       	brne	.+26     	; 0x8f8 <button_debounce+0x2e>
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
     8e4:	88 23       	and	r24, r24
     8e6:	41 f0       	breq	.+16     	; 0x8f8 <button_debounce+0x2e>
		counterRefPush = counter;
     8e8:	10 93 bf 08 	sts	0x08BF, r17
     8ec:	00 93 be 08 	sts	0x08BE, r16
		*pstateButton = PRESSED;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	99 83       	std	Y+1, r25	; 0x01
     8f6:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     8f8:	88 81       	ld	r24, Y
     8fa:	99 81       	ldd	r25, Y+1	; 0x01
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	39 f5       	brne	.+78     	; 0x94e <button_debounce+0x84>
		if(counter - counterRefPush > 15*1000/delayTimeMicroSeconds){
     900:	80 91 be 08 	lds	r24, 0x08BE
     904:	90 91 bf 08 	lds	r25, 0x08BF
     908:	98 01       	movw	r18, r16
     90a:	28 1b       	sub	r18, r24
     90c:	39 0b       	sbc	r19, r25
     90e:	60 91 20 04 	lds	r22, 0x0420
     912:	70 91 21 04 	lds	r23, 0x0421
     916:	88 e9       	ldi	r24, 0x98	; 152
     918:	9a e3       	ldi	r25, 0x3A	; 58
     91a:	0e 94 ed 21 	call	0x43da	; 0x43da <__divmodhi4>
     91e:	62 17       	cp	r22, r18
     920:	73 07       	cpc	r23, r19
     922:	74 f4       	brge	.+28     	; 0x940 <button_debounce+0x76>
			if(!is_digital_input_high(IO_D0)){
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
     92a:	88 23       	and	r24, r24
     92c:	81 f4       	brne	.+32     	; 0x94e <button_debounce+0x84>
				counterRefRel = counter;
     92e:	10 93 bd 08 	sts	0x08BD, r17
     932:	00 93 bc 08 	sts	0x08BC, r16
				*pstateButton = RELEASED;
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	99 83       	std	Y+1, r25	; 0x01
     93c:	88 83       	st	Y, r24
     93e:	07 c0       	rjmp	.+14     	; 0x94e <button_debounce+0x84>
			}
		}
		else if(!is_digital_input_high(IO_D0)){
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
     946:	88 23       	and	r24, r24
     948:	11 f4       	brne	.+4      	; 0x94e <button_debounce+0x84>
			*pstateButton = NONE;
     94a:	19 82       	std	Y+1, r1	; 0x01
     94c:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     94e:	88 81       	ld	r24, Y
     950:	99 81       	ldd	r25, Y+1	; 0x01
     952:	02 97       	sbiw	r24, 0x02	; 2
     954:	19 f5       	brne	.+70     	; 0x99c <button_debounce+0xd2>
		if(is_digital_input_high(IO_D0)){
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
     95c:	88 23       	and	r24, r24
     95e:	49 f0       	breq	.+18     	; 0x972 <button_debounce+0xa8>
			*pstateButton = PRESSED;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	99 83       	std	Y+1, r25	; 0x01
     966:	88 83       	st	Y, r24
			counterRefPush = counter;
     968:	10 93 bf 08 	sts	0x08BF, r17
     96c:	00 93 be 08 	sts	0x08BE, r16
     970:	15 c0       	rjmp	.+42     	; 0x99c <button_debounce+0xd2>
		}
		else if(counter - counterRefRel > 15*1000/delayTimeMicroSeconds){
     972:	80 91 bc 08 	lds	r24, 0x08BC
     976:	90 91 bd 08 	lds	r25, 0x08BD
     97a:	08 1b       	sub	r16, r24
     97c:	19 0b       	sbc	r17, r25
     97e:	60 91 20 04 	lds	r22, 0x0420
     982:	70 91 21 04 	lds	r23, 0x0421
     986:	88 e9       	ldi	r24, 0x98	; 152
     988:	9a e3       	ldi	r25, 0x3A	; 58
     98a:	0e 94 ed 21 	call	0x43da	; 0x43da <__divmodhi4>
     98e:	60 17       	cp	r22, r16
     990:	71 07       	cpc	r23, r17
     992:	24 f4       	brge	.+8      	; 0x99c <button_debounce+0xd2>
			*pstateButton = NONE;
     994:	19 82       	std	Y+1, r1	; 0x01
     996:	18 82       	st	Y, r1
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	01 c0       	rjmp	.+2      	; 0x99e <button_debounce+0xd4>
			return true;
     99c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	08 95       	ret

000009a8 <init_trans>:

bool init_trans(int state, bool buttonTriggered, int counter, int counterRef){
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	fc 01       	movw	r30, r24
     9ae:	86 2f       	mov	r24, r22
     9b0:	da 01       	movw	r26, r20
     9b2:	b9 01       	movw	r22, r18
	return((state == INIT && buttonTriggered)||
     9b4:	30 97       	sbiw	r30, 0x00	; 0
     9b6:	19 f4       	brne	.+6      	; 0x9be <init_trans+0x16>
     9b8:	88 23       	and	r24, r24
     9ba:	81 f1       	breq	.+96     	; 0xa1c <init_trans+0x74>
     9bc:	77 c0       	rjmp	.+238    	; 0xaac <init_trans+0x104>
     9be:	e1 30       	cpi	r30, 0x01	; 1
     9c0:	f1 05       	cpc	r31, r1
     9c2:	29 f4       	brne	.+10     	; 0x9ce <init_trans+0x26>
     9c4:	80 91 f4 08 	lds	r24, 0x08F4
     9c8:	80 fd       	sbrc	r24, 0
     9ca:	30 c0       	rjmp	.+96     	; 0xa2c <init_trans+0x84>
     9cc:	6f c0       	rjmp	.+222    	; 0xaac <init_trans+0x104>
     9ce:	e2 30       	cpi	r30, 0x02	; 2
     9d0:	f1 05       	cpc	r31, r1
     9d2:	b1 f4       	brne	.+44     	; 0xa00 <init_trans+0x58>
     9d4:	42 1b       	sub	r20, r18
     9d6:	53 0b       	sbc	r21, r19
     9d8:	20 91 2c 04 	lds	r18, 0x042C
     9dc:	30 91 2d 04 	lds	r19, 0x042D
     9e0:	80 91 16 04 	lds	r24, 0x0416
     9e4:	90 91 17 04 	lds	r25, 0x0417
     9e8:	ec 01       	movw	r28, r24
     9ea:	2c 9f       	mul	r18, r28
     9ec:	c0 01       	movw	r24, r0
     9ee:	2d 9f       	mul	r18, r29
     9f0:	90 0d       	add	r25, r0
     9f2:	3c 9f       	mul	r19, r28
     9f4:	90 0d       	add	r25, r0
     9f6:	11 24       	eor	r1, r1
     9f8:	84 17       	cp	r24, r20
     9fa:	95 07       	cpc	r25, r21
     9fc:	ac f5       	brge	.+106    	; 0xa68 <init_trans+0xc0>
     9fe:	56 c0       	rjmp	.+172    	; 0xaac <init_trans+0x104>
     a00:	e3 30       	cpi	r30, 0x03	; 3
     a02:	f1 05       	cpc	r31, r1
     a04:	59 f4       	brne	.+22     	; 0xa1c <init_trans+0x74>
     a06:	9a 01       	movw	r18, r20
     a08:	26 1b       	sub	r18, r22
     a0a:	37 0b       	sbc	r19, r23
     a0c:	80 91 06 04 	lds	r24, 0x0406
     a10:	90 91 07 04 	lds	r25, 0x0407
     a14:	82 17       	cp	r24, r18
     a16:	93 07       	cpc	r25, r19
     a18:	ac f5       	brge	.+106    	; 0xa84 <init_trans+0xdc>
     a1a:	48 c0       	rjmp	.+144    	; 0xaac <init_trans+0x104>
     a1c:	e4 30       	cpi	r30, 0x04	; 4
     a1e:	f1 05       	cpc	r31, r1
     a20:	29 f4       	brne	.+10     	; 0xa2c <init_trans+0x84>
     a22:	80 91 f4 08 	lds	r24, 0x08F4
     a26:	86 95       	lsr	r24
     a28:	86 95       	lsr	r24
     a2a:	26 c0       	rjmp	.+76     	; 0xa78 <init_trans+0xd0>
     a2c:	e5 30       	cpi	r30, 0x05	; 5
     a2e:	f1 05       	cpc	r31, r1
     a30:	d9 f4       	brne	.+54     	; 0xa68 <init_trans+0xc0>
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	a6 1b       	sub	r26, r22
     a38:	b7 0b       	sbc	r27, r23
     a3a:	80 91 2e 04 	lds	r24, 0x042E
     a3e:	90 91 2f 04 	lds	r25, 0x042F
     a42:	20 91 18 04 	lds	r18, 0x0418
     a46:	30 91 19 04 	lds	r19, 0x0419
     a4a:	bc 01       	movw	r22, r24
     a4c:	62 9f       	mul	r22, r18
     a4e:	c0 01       	movw	r24, r0
     a50:	63 9f       	mul	r22, r19
     a52:	90 0d       	add	r25, r0
     a54:	72 9f       	mul	r23, r18
     a56:	90 0d       	add	r25, r0
     a58:	11 24       	eor	r1, r1
     a5a:	8a 17       	cp	r24, r26
     a5c:	9b 07       	cpc	r25, r27
     a5e:	14 f4       	brge	.+4      	; 0xa64 <init_trans+0xbc>
     a60:	41 e0       	ldi	r20, 0x01	; 1
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	ca 01       	movw	r24, r20
     a66:	24 c0       	rjmp	.+72     	; 0xab0 <init_trans+0x108>
     a68:	e6 30       	cpi	r30, 0x06	; 6
     a6a:	f1 05       	cpc	r31, r1
     a6c:	59 f4       	brne	.+22     	; 0xa84 <init_trans+0xdc>
     a6e:	80 91 f4 08 	lds	r24, 0x08F4
     a72:	86 95       	lsr	r24
     a74:	86 95       	lsr	r24
     a76:	86 95       	lsr	r24
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	89 27       	eor	r24, r25
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	81 70       	andi	r24, 0x01	; 1
     a80:	90 70       	andi	r25, 0x00	; 0
     a82:	16 c0       	rjmp	.+44     	; 0xab0 <init_trans+0x108>
     a84:	37 97       	sbiw	r30, 0x07	; 7
     a86:	19 f0       	breq	.+6      	; 0xa8e <init_trans+0xe6>
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	11 c0       	rjmp	.+34     	; 0xab0 <init_trans+0x108>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	a6 1b       	sub	r26, r22
     a94:	b7 0b       	sbc	r27, r23
     a96:	80 91 06 04 	lds	r24, 0x0406
     a9a:	90 91 07 04 	lds	r25, 0x0407
     a9e:	8a 17       	cp	r24, r26
     aa0:	9b 07       	cpc	r25, r27
     aa2:	14 f4       	brge	.+4      	; 0xaa8 <init_trans+0x100>
     aa4:	21 e0       	ldi	r18, 0x01	; 1
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	c9 01       	movw	r24, r18
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <init_trans+0x108>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
	(state == RAISEL1 && counter - counterRef > pWait)||
	(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == FIXLEXTRA && counter - counterRef > totalStepLength2*fixtureLiftExtra)||
	(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0)||
	(state == LOWERL2 && counter - counterRef > pWait));
}
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <firstB_trans>:

bool firstB_trans(int state, int counter, int counterRef){
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	fc 01       	movw	r30, r24
     abc:	da 01       	movw	r26, r20
	//Had references to counterRef14...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVEC1 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush1Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0)||
     abe:	88 30       	cpi	r24, 0x08	; 8
     ac0:	91 05       	cpc	r25, r1
     ac2:	29 f4       	brne	.+10     	; 0xace <firstB_trans+0x18>
     ac4:	80 91 f4 08 	lds	r24, 0x08F4
     ac8:	84 fd       	sbrc	r24, 4
     aca:	37 c0       	rjmp	.+110    	; 0xb3a <firstB_trans+0x84>
     acc:	8d c0       	rjmp	.+282    	; 0xbe8 <firstB_trans+0x132>
     ace:	89 30       	cpi	r24, 0x09	; 9
     ad0:	91 05       	cpc	r25, r1
     ad2:	59 f4       	brne	.+22     	; 0xaea <firstB_trans+0x34>
     ad4:	9b 01       	movw	r18, r22
     ad6:	24 1b       	sub	r18, r20
     ad8:	35 0b       	sbc	r19, r21
     ada:	80 91 08 04 	lds	r24, 0x0408
     ade:	90 91 09 04 	lds	r25, 0x0409
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	bc f5       	brge	.+110    	; 0xb56 <firstB_trans+0xa0>
     ae8:	7f c0       	rjmp	.+254    	; 0xbe8 <firstB_trans+0x132>
     aea:	8a 30       	cpi	r24, 0x0A	; 10
     aec:	91 05       	cpc	r25, r1
     aee:	59 f4       	brne	.+22     	; 0xb06 <firstB_trans+0x50>
     af0:	9b 01       	movw	r18, r22
     af2:	24 1b       	sub	r18, r20
     af4:	35 0b       	sbc	r19, r21
     af6:	80 91 06 04 	lds	r24, 0x0406
     afa:	90 91 07 04 	lds	r25, 0x0407
     afe:	82 17       	cp	r24, r18
     b00:	93 07       	cpc	r25, r19
     b02:	8c f5       	brge	.+98     	; 0xb66 <firstB_trans+0xb0>
     b04:	71 c0       	rjmp	.+226    	; 0xbe8 <firstB_trans+0x132>
     b06:	8b 30       	cpi	r24, 0x0B	; 11
     b08:	91 05       	cpc	r25, r1
     b0a:	b9 f4       	brne	.+46     	; 0xb3a <firstB_trans+0x84>
     b0c:	ab 01       	movw	r20, r22
     b0e:	4a 1b       	sub	r20, r26
     b10:	5b 0b       	sbc	r21, r27
     b12:	20 91 24 04 	lds	r18, 0x0424
     b16:	30 91 25 04 	lds	r19, 0x0425
     b1a:	80 91 18 04 	lds	r24, 0x0418
     b1e:	90 91 19 04 	lds	r25, 0x0419
     b22:	ec 01       	movw	r28, r24
     b24:	2c 9f       	mul	r18, r28
     b26:	c0 01       	movw	r24, r0
     b28:	2d 9f       	mul	r18, r29
     b2a:	90 0d       	add	r25, r0
     b2c:	3c 9f       	mul	r19, r28
     b2e:	90 0d       	add	r25, r0
     b30:	11 24       	eor	r1, r1
     b32:	84 17       	cp	r24, r20
     b34:	95 07       	cpc	r25, r21
     b36:	1c f5       	brge	.+70     	; 0xb7e <firstB_trans+0xc8>
     b38:	57 c0       	rjmp	.+174    	; 0xbe8 <firstB_trans+0x132>
     b3a:	ec 30       	cpi	r30, 0x0C	; 12
     b3c:	f1 05       	cpc	r31, r1
     b3e:	59 f4       	brne	.+22     	; 0xb56 <firstB_trans+0xa0>
     b40:	9b 01       	movw	r18, r22
     b42:	2a 1b       	sub	r18, r26
     b44:	3b 0b       	sbc	r19, r27
     b46:	80 91 06 04 	lds	r24, 0x0406
     b4a:	90 91 07 04 	lds	r25, 0x0407
     b4e:	82 17       	cp	r24, r18
     b50:	93 07       	cpc	r25, r19
     b52:	c4 f4       	brge	.+48     	; 0xb84 <firstB_trans+0xce>
     b54:	49 c0       	rjmp	.+146    	; 0xbe8 <firstB_trans+0x132>
     b56:	ed 30       	cpi	r30, 0x0D	; 13
     b58:	f1 05       	cpc	r31, r1
     b5a:	29 f4       	brne	.+10     	; 0xb66 <firstB_trans+0xb0>
     b5c:	80 91 f4 08 	lds	r24, 0x08F4
     b60:	84 fd       	sbrc	r24, 4
     b62:	2e c0       	rjmp	.+92     	; 0xbc0 <firstB_trans+0x10a>
     b64:	41 c0       	rjmp	.+130    	; 0xbe8 <firstB_trans+0x132>
     b66:	ee 30       	cpi	r30, 0x0E	; 14
     b68:	f1 05       	cpc	r31, r1
     b6a:	49 f4       	brne	.+18     	; 0xb7e <firstB_trans+0xc8>
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	6a 1b       	sub	r22, r26
     b72:	7b 0b       	sbc	r23, r27
     b74:	80 91 08 04 	lds	r24, 0x0408
     b78:	90 91 09 04 	lds	r25, 0x0409
     b7c:	2e c0       	rjmp	.+92     	; 0xbda <firstB_trans+0x124>
     b7e:	ef 30       	cpi	r30, 0x0F	; 15
     b80:	f1 05       	cpc	r31, r1
     b82:	19 f1       	breq	.+70     	; 0xbca <firstB_trans+0x114>
     b84:	e0 31       	cpi	r30, 0x10	; 16
     b86:	f1 05       	cpc	r31, r1
     b88:	d9 f4       	brne	.+54     	; 0xbc0 <firstB_trans+0x10a>
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	6a 1b       	sub	r22, r26
     b90:	7b 0b       	sbc	r23, r27
     b92:	80 91 26 04 	lds	r24, 0x0426
     b96:	90 91 27 04 	lds	r25, 0x0427
     b9a:	20 91 18 04 	lds	r18, 0x0418
     b9e:	30 91 19 04 	lds	r19, 0x0419
     ba2:	fc 01       	movw	r30, r24
     ba4:	e2 9f       	mul	r30, r18
     ba6:	c0 01       	movw	r24, r0
     ba8:	e3 9f       	mul	r30, r19
     baa:	90 0d       	add	r25, r0
     bac:	f2 9f       	mul	r31, r18
     bae:	90 0d       	add	r25, r0
     bb0:	11 24       	eor	r1, r1
     bb2:	86 17       	cp	r24, r22
     bb4:	97 07       	cpc	r25, r23
     bb6:	14 f4       	brge	.+4      	; 0xbbc <firstB_trans+0x106>
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	ca 01       	movw	r24, r20
     bbe:	16 c0       	rjmp	.+44     	; 0xbec <firstB_trans+0x136>
     bc0:	71 97       	sbiw	r30, 0x11	; 17
     bc2:	19 f0       	breq	.+6      	; 0xbca <firstB_trans+0x114>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	11 c0       	rjmp	.+34     	; 0xbec <firstB_trans+0x136>
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	6a 1b       	sub	r22, r26
     bd0:	7b 0b       	sbc	r23, r27
     bd2:	80 91 06 04 	lds	r24, 0x0406
     bd6:	90 91 07 04 	lds	r25, 0x0407
     bda:	86 17       	cp	r24, r22
     bdc:	97 07       	cpc	r25, r23
     bde:	14 f4       	brge	.+4      	; 0xbe4 <firstB_trans+0x12e>
     be0:	21 e0       	ldi	r18, 0x01	; 1
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	c9 01       	movw	r24, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <firstB_trans+0x136>
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
	(state == CLEAN1_2 && u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0)||
	(state == B1SET2 && counter - counterRef > mWait)||
	(state == B1START2 && counter - counterRef > pWait)||
	(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorBigHalfPlate)||
	(state == B1STOP2 && counter - counterRef > pWait));
}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <secondB_trans>:

bool secondB_trans(int state, int counter, int counterRef){
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	fc 01       	movw	r30, r24
     bf8:	da 01       	movw	r26, r20
	return((state == MOVEC2 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush2Step &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0)||
     bfa:	82 31       	cpi	r24, 0x12	; 18
     bfc:	91 05       	cpc	r25, r1
     bfe:	29 f4       	brne	.+10     	; 0xc0a <secondB_trans+0x18>
     c00:	80 91 f4 08 	lds	r24, 0x08F4
     c04:	85 fd       	sbrc	r24, 5
     c06:	37 c0       	rjmp	.+110    	; 0xc76 <secondB_trans+0x84>
     c08:	9d c0       	rjmp	.+314    	; 0xd44 <secondB_trans+0x152>
     c0a:	83 31       	cpi	r24, 0x13	; 19
     c0c:	91 05       	cpc	r25, r1
     c0e:	59 f4       	brne	.+22     	; 0xc26 <secondB_trans+0x34>
     c10:	9b 01       	movw	r18, r22
     c12:	24 1b       	sub	r18, r20
     c14:	35 0b       	sbc	r19, r21
     c16:	80 91 08 04 	lds	r24, 0x0408
     c1a:	90 91 09 04 	lds	r25, 0x0409
     c1e:	82 17       	cp	r24, r18
     c20:	93 07       	cpc	r25, r19
     c22:	bc f5       	brge	.+110    	; 0xc92 <secondB_trans+0xa0>
     c24:	8f c0       	rjmp	.+286    	; 0xd44 <secondB_trans+0x152>
     c26:	84 31       	cpi	r24, 0x14	; 20
     c28:	91 05       	cpc	r25, r1
     c2a:	59 f4       	brne	.+22     	; 0xc42 <secondB_trans+0x50>
     c2c:	9b 01       	movw	r18, r22
     c2e:	24 1b       	sub	r18, r20
     c30:	35 0b       	sbc	r19, r21
     c32:	80 91 06 04 	lds	r24, 0x0406
     c36:	90 91 07 04 	lds	r25, 0x0407
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	8c f5       	brge	.+98     	; 0xca2 <secondB_trans+0xb0>
     c40:	81 c0       	rjmp	.+258    	; 0xd44 <secondB_trans+0x152>
     c42:	85 31       	cpi	r24, 0x15	; 21
     c44:	91 05       	cpc	r25, r1
     c46:	b9 f4       	brne	.+46     	; 0xc76 <secondB_trans+0x84>
     c48:	ab 01       	movw	r20, r22
     c4a:	4a 1b       	sub	r20, r26
     c4c:	5b 0b       	sbc	r21, r27
     c4e:	20 91 26 04 	lds	r18, 0x0426
     c52:	30 91 27 04 	lds	r19, 0x0427
     c56:	80 91 18 04 	lds	r24, 0x0418
     c5a:	90 91 19 04 	lds	r25, 0x0419
     c5e:	ec 01       	movw	r28, r24
     c60:	2c 9f       	mul	r18, r28
     c62:	c0 01       	movw	r24, r0
     c64:	2d 9f       	mul	r18, r29
     c66:	90 0d       	add	r25, r0
     c68:	3c 9f       	mul	r19, r28
     c6a:	90 0d       	add	r25, r0
     c6c:	11 24       	eor	r1, r1
     c6e:	84 17       	cp	r24, r20
     c70:	95 07       	cpc	r25, r21
     c72:	24 f5       	brge	.+72     	; 0xcbc <secondB_trans+0xca>
     c74:	67 c0       	rjmp	.+206    	; 0xd44 <secondB_trans+0x152>
     c76:	e6 31       	cpi	r30, 0x16	; 22
     c78:	f1 05       	cpc	r31, r1
     c7a:	59 f4       	brne	.+22     	; 0xc92 <secondB_trans+0xa0>
     c7c:	9b 01       	movw	r18, r22
     c7e:	2a 1b       	sub	r18, r26
     c80:	3b 0b       	sbc	r19, r27
     c82:	80 91 06 04 	lds	r24, 0x0406
     c86:	90 91 07 04 	lds	r25, 0x0407
     c8a:	82 17       	cp	r24, r18
     c8c:	93 07       	cpc	r25, r19
     c8e:	cc f4       	brge	.+50     	; 0xcc2 <secondB_trans+0xd0>
     c90:	59 c0       	rjmp	.+178    	; 0xd44 <secondB_trans+0x152>
     c92:	e7 31       	cpi	r30, 0x17	; 23
     c94:	f1 05       	cpc	r31, r1
     c96:	29 f4       	brne	.+10     	; 0xca2 <secondB_trans+0xb0>
     c98:	80 91 f4 08 	lds	r24, 0x08F4
     c9c:	85 fd       	sbrc	r24, 5
     c9e:	2f c0       	rjmp	.+94     	; 0xcfe <secondB_trans+0x10c>
     ca0:	51 c0       	rjmp	.+162    	; 0xd44 <secondB_trans+0x152>
     ca2:	e8 31       	cpi	r30, 0x18	; 24
     ca4:	f1 05       	cpc	r31, r1
     ca6:	51 f4       	brne	.+20     	; 0xcbc <secondB_trans+0xca>
     ca8:	6a 1b       	sub	r22, r26
     caa:	7b 0b       	sbc	r23, r27
     cac:	80 91 08 04 	lds	r24, 0x0408
     cb0:	90 91 09 04 	lds	r25, 0x0409
     cb4:	86 17       	cp	r24, r22
     cb6:	97 07       	cpc	r25, r23
     cb8:	a4 f5       	brge	.+104    	; 0xd22 <secondB_trans+0x130>
     cba:	44 c0       	rjmp	.+136    	; 0xd44 <secondB_trans+0x152>
     cbc:	e9 31       	cpi	r30, 0x19	; 25
     cbe:	f1 05       	cpc	r31, r1
     cc0:	09 f1       	breq	.+66     	; 0xd04 <secondB_trans+0x112>
     cc2:	ea 31       	cpi	r30, 0x1A	; 26
     cc4:	f1 05       	cpc	r31, r1
     cc6:	d9 f4       	brne	.+54     	; 0xcfe <secondB_trans+0x10c>
     cc8:	40 e0       	ldi	r20, 0x00	; 0
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	6a 1b       	sub	r22, r26
     cce:	7b 0b       	sbc	r23, r27
     cd0:	80 91 24 04 	lds	r24, 0x0424
     cd4:	90 91 25 04 	lds	r25, 0x0425
     cd8:	20 91 18 04 	lds	r18, 0x0418
     cdc:	30 91 19 04 	lds	r19, 0x0419
     ce0:	fc 01       	movw	r30, r24
     ce2:	e2 9f       	mul	r30, r18
     ce4:	c0 01       	movw	r24, r0
     ce6:	e3 9f       	mul	r30, r19
     ce8:	90 0d       	add	r25, r0
     cea:	f2 9f       	mul	r31, r18
     cec:	90 0d       	add	r25, r0
     cee:	11 24       	eor	r1, r1
     cf0:	86 17       	cp	r24, r22
     cf2:	97 07       	cpc	r25, r23
     cf4:	14 f4       	brge	.+4      	; 0xcfa <secondB_trans+0x108>
     cf6:	41 e0       	ldi	r20, 0x01	; 1
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	ca 01       	movw	r24, r20
     cfc:	25 c0       	rjmp	.+74     	; 0xd48 <secondB_trans+0x156>
     cfe:	eb 31       	cpi	r30, 0x1B	; 27
     d00:	f1 05       	cpc	r31, r1
     d02:	79 f4       	brne	.+30     	; 0xd22 <secondB_trans+0x130>
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	6a 1b       	sub	r22, r26
     d0a:	7b 0b       	sbc	r23, r27
     d0c:	80 91 06 04 	lds	r24, 0x0406
     d10:	90 91 07 04 	lds	r25, 0x0407
     d14:	86 17       	cp	r24, r22
     d16:	97 07       	cpc	r25, r23
     d18:	14 f4       	brge	.+4      	; 0xd1e <secondB_trans+0x12c>
     d1a:	21 e0       	ldi	r18, 0x01	; 1
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	c9 01       	movw	r24, r18
     d20:	13 c0       	rjmp	.+38     	; 0xd48 <secondB_trans+0x156>
     d22:	7c 97       	sbiw	r30, 0x1c	; 28
     d24:	19 f0       	breq	.+6      	; 0xd2c <secondB_trans+0x13a>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e c0       	rjmp	.+28     	; 0xd48 <secondB_trans+0x156>
     d2c:	80 91 f4 08 	lds	r24, 0x08F4
     d30:	82 95       	swap	r24
     d32:	86 95       	lsr	r24
     d34:	86 95       	lsr	r24
     d36:	83 70       	andi	r24, 0x03	; 3
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	89 27       	eor	r24, r25
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	81 70       	andi	r24, 0x01	; 1
     d40:	90 70       	andi	r25, 0x00	; 0
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <secondB_trans+0x156>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
	(state == B2START2 && counter - counterRef > pWait)||
	(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorSmallHalfPlate)||
	(state == B2STOP2 && counter - counterRef > pWait)||
	(state == MOVED1 && /*counter - counterRef > totalStepLength2*fixtureMotorDry1Step &&*/ 
	u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0));
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <dry_trans>:

bool dry_trans(int state, int counter, int counterRef){
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	fc 01       	movw	r30, r24
     d54:	da 01       	movw	r26, r20
	//Had references to counterRef26, 30...not used in any transitions, though...unnecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVED1EXTRA && counter - counterRef > fixtureMotorDry1Extra)||
     d56:	8d 31       	cpi	r24, 0x1D	; 29
     d58:	91 05       	cpc	r25, r1
     d5a:	59 f4       	brne	.+22     	; 0xd72 <dry_trans+0x24>
     d5c:	9b 01       	movw	r18, r22
     d5e:	24 1b       	sub	r18, r20
     d60:	35 0b       	sbc	r19, r21
     d62:	80 91 30 04 	lds	r24, 0x0430
     d66:	90 91 31 04 	lds	r25, 0x0431
     d6a:	82 17       	cp	r24, r18
     d6c:	93 07       	cpc	r25, r19
     d6e:	ec f5       	brge	.+122    	; 0xdea <dry_trans+0x9c>
     d70:	7f c0       	rjmp	.+254    	; 0xe70 <dry_trans+0x122>
     d72:	8e 31       	cpi	r24, 0x1E	; 30
     d74:	91 05       	cpc	r25, r1
     d76:	b9 f4       	brne	.+46     	; 0xda6 <dry_trans+0x58>
     d78:	ab 01       	movw	r20, r22
     d7a:	4a 1b       	sub	r20, r26
     d7c:	5b 0b       	sbc	r21, r27
     d7e:	20 91 28 04 	lds	r18, 0x0428
     d82:	30 91 29 04 	lds	r19, 0x0429
     d86:	80 91 18 04 	lds	r24, 0x0418
     d8a:	90 91 19 04 	lds	r25, 0x0419
     d8e:	ec 01       	movw	r28, r24
     d90:	2c 9f       	mul	r18, r28
     d92:	c0 01       	movw	r24, r0
     d94:	2d 9f       	mul	r18, r29
     d96:	90 0d       	add	r25, r0
     d98:	3c 9f       	mul	r19, r28
     d9a:	90 0d       	add	r25, r0
     d9c:	11 24       	eor	r1, r1
     d9e:	84 17       	cp	r24, r20
     da0:	95 07       	cpc	r25, r21
     da2:	84 f5       	brge	.+96     	; 0xe04 <dry_trans+0xb6>
     da4:	65 c0       	rjmp	.+202    	; 0xe70 <dry_trans+0x122>
     da6:	8f 31       	cpi	r24, 0x1F	; 31
     da8:	91 05       	cpc	r25, r1
     daa:	29 f4       	brne	.+10     	; 0xdb6 <dry_trans+0x68>
     dac:	80 91 f4 08 	lds	r24, 0x08F4
     db0:	83 fd       	sbrc	r24, 3
     db2:	33 c0       	rjmp	.+102    	; 0xe1a <dry_trans+0xcc>
     db4:	5d c0       	rjmp	.+186    	; 0xe70 <dry_trans+0x122>
     db6:	80 32       	cpi	r24, 0x20	; 32
     db8:	91 05       	cpc	r25, r1
     dba:	b9 f4       	brne	.+46     	; 0xdea <dry_trans+0x9c>
     dbc:	ab 01       	movw	r20, r22
     dbe:	4a 1b       	sub	r20, r26
     dc0:	5b 0b       	sbc	r21, r27
     dc2:	20 91 34 04 	lds	r18, 0x0434
     dc6:	30 91 35 04 	lds	r19, 0x0435
     dca:	80 91 18 04 	lds	r24, 0x0418
     dce:	90 91 19 04 	lds	r25, 0x0419
     dd2:	ec 01       	movw	r28, r24
     dd4:	2c 9f       	mul	r18, r28
     dd6:	c0 01       	movw	r24, r0
     dd8:	2d 9f       	mul	r18, r29
     dda:	90 0d       	add	r25, r0
     ddc:	3c 9f       	mul	r19, r28
     dde:	90 0d       	add	r25, r0
     de0:	11 24       	eor	r1, r1
     de2:	84 17       	cp	r24, r20
     de4:	95 07       	cpc	r25, r21
     de6:	24 f5       	brge	.+72     	; 0xe30 <dry_trans+0xe2>
     de8:	43 c0       	rjmp	.+134    	; 0xe70 <dry_trans+0x122>
     dea:	e1 32       	cpi	r30, 0x21	; 33
     dec:	f1 05       	cpc	r31, r1
     dee:	51 f4       	brne	.+20     	; 0xe04 <dry_trans+0xb6>
     df0:	80 91 f4 08 	lds	r24, 0x08F4
     df4:	86 95       	lsr	r24
     df6:	86 95       	lsr	r24
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	89 27       	eor	r24, r25
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	81 70       	andi	r24, 0x01	; 1
     e00:	90 70       	andi	r25, 0x00	; 0
     e02:	38 c0       	rjmp	.+112    	; 0xe74 <dry_trans+0x126>
     e04:	e2 32       	cpi	r30, 0x22	; 34
     e06:	f1 05       	cpc	r31, r1
     e08:	41 f4       	brne	.+16     	; 0xe1a <dry_trans+0xcc>
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	6a 1b       	sub	r22, r26
     e10:	7b 0b       	sbc	r23, r27
     e12:	69 3c       	cpi	r22, 0xC9	; 201
     e14:	71 05       	cpc	r23, r1
     e16:	74 f1       	brlt	.+92     	; 0xe74 <dry_trans+0x126>
     e18:	2b c0       	rjmp	.+86     	; 0xe70 <dry_trans+0x122>
     e1a:	e3 32       	cpi	r30, 0x23	; 35
     e1c:	f1 05       	cpc	r31, r1
     e1e:	41 f4       	brne	.+16     	; 0xe30 <dry_trans+0xe2>
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	6a 1b       	sub	r22, r26
     e26:	7b 0b       	sbc	r23, r27
     e28:	65 58       	subi	r22, 0x85	; 133
     e2a:	73 40       	sbci	r23, 0x03	; 3
     e2c:	1c f1       	brlt	.+70     	; 0xe74 <dry_trans+0x126>
     e2e:	20 c0       	rjmp	.+64     	; 0xe70 <dry_trans+0x122>
     e30:	b4 97       	sbiw	r30, 0x24	; 36
     e32:	19 f0       	breq	.+6      	; 0xe3a <dry_trans+0xec>
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	1d c0       	rjmp	.+58     	; 0xe74 <dry_trans+0x126>
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	6a 1b       	sub	r22, r26
     e40:	7b 0b       	sbc	r23, r27
     e42:	80 91 2a 04 	lds	r24, 0x042A
     e46:	90 91 2b 04 	lds	r25, 0x042B
     e4a:	20 91 16 04 	lds	r18, 0x0416
     e4e:	30 91 17 04 	lds	r19, 0x0417
     e52:	ec 01       	movw	r28, r24
     e54:	c2 9f       	mul	r28, r18
     e56:	c0 01       	movw	r24, r0
     e58:	c3 9f       	mul	r28, r19
     e5a:	90 0d       	add	r25, r0
     e5c:	d2 9f       	mul	r29, r18
     e5e:	90 0d       	add	r25, r0
     e60:	11 24       	eor	r1, r1
     e62:	86 17       	cp	r24, r22
     e64:	97 07       	cpc	r25, r23
     e66:	14 f4       	brge	.+4      	; 0xe6c <dry_trans+0x11e>
     e68:	41 e0       	ldi	r20, 0x01	; 1
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	ca 01       	movw	r24, r20
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <dry_trans+0x126>
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
	(state == FIXL2EXTRA && counter - counterRef > totalStepLength2*fixtureLift2Extra)||
	(state == RAISEL2 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == FIXH && counter - counterRef > 200)||
	(state == LOWERL3 && counter - counterRef > 900)||
	(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate));
}
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <motor_and_write>:
	serial_print_string(msg);
}


void motor_and_write(int counter, int counterRef, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor)
{
     e7a:	af 92       	push	r10
     e7c:	bf 92       	push	r11
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	ea 01       	movw	r28, r20
     e90:	59 01       	movw	r10, r18
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     e92:	fc 01       	movw	r30, r24
     e94:	e6 1b       	sub	r30, r22
     e96:	f7 0b       	sbc	r31, r23
     e98:	60 91 16 04 	lds	r22, 0x0416
     e9c:	70 91 17 04 	lds	r23, 0x0417
     ea0:	cf 01       	movw	r24, r30
     ea2:	0e 94 ed 21 	call	0x43da	; 0x43da <__divmodhi4>
     ea6:	20 91 0c 04 	lds	r18, 0x040C
     eaa:	30 91 0d 04 	lds	r19, 0x040D
     eae:	82 17       	cp	r24, r18
     eb0:	93 07       	cpc	r25, r19
     eb2:	34 f4       	brge	.+12     	; 0xec0 <motor_and_write+0x46>
     eb4:	cd 2b       	or	r28, r29
     eb6:	21 f0       	breq	.+8      	; 0xec0 <motor_and_write+0x46>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 1
     eb8:	80 91 fa 08 	lds	r24, 0x08FA
     ebc:	81 60       	ori	r24, 0x01	; 1
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <motor_and_write+0x4c>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     ec0:	80 91 fa 08 	lds	r24, 0x08FA
     ec4:	8e 7f       	andi	r24, 0xFE	; 254
     ec6:	80 93 fa 08 	sts	0x08FA, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     eca:	60 91 18 04 	lds	r22, 0x0418
     ece:	70 91 19 04 	lds	r23, 0x0419
     ed2:	cf 01       	movw	r24, r30
     ed4:	0e 94 ed 21 	call	0x43da	; 0x43da <__divmodhi4>
     ed8:	20 91 0e 04 	lds	r18, 0x040E
     edc:	30 91 0f 04 	lds	r19, 0x040F
     ee0:	82 17       	cp	r24, r18
     ee2:	93 07       	cpc	r25, r19
     ee4:	34 f4       	brge	.+12     	; 0xef2 <motor_and_write+0x78>
     ee6:	ab 28       	or	r10, r11
     ee8:	21 f0       	breq	.+8      	; 0xef2 <motor_and_write+0x78>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     eea:	80 91 fa 08 	lds	r24, 0x08FA
     eee:	88 60       	ori	r24, 0x08	; 8
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <motor_and_write+0x7e>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 0
     ef2:	80 91 fa 08 	lds	r24, 0x08FA
     ef6:	87 7f       	andi	r24, 0xF7	; 247
     ef8:	80 93 fa 08 	sts	0x08FA, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     efc:	60 91 1a 04 	lds	r22, 0x041A
     f00:	70 91 1b 04 	lds	r23, 0x041B
     f04:	cf 01       	movw	r24, r30
     f06:	0e 94 ed 21 	call	0x43da	; 0x43da <__divmodhi4>
     f0a:	20 91 10 04 	lds	r18, 0x0410
     f0e:	30 91 11 04 	lds	r19, 0x0411
     f12:	82 17       	cp	r24, r18
     f14:	93 07       	cpc	r25, r19
     f16:	34 f4       	brge	.+12     	; 0xf24 <motor_and_write+0xaa>
     f18:	01 2b       	or	r16, r17
     f1a:	21 f0       	breq	.+8      	; 0xf24 <motor_and_write+0xaa>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     f1c:	80 91 fa 08 	lds	r24, 0x08FA
     f20:	80 64       	ori	r24, 0x40	; 64
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <motor_and_write+0xb0>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 0
     f24:	80 91 fa 08 	lds	r24, 0x08FA
     f28:	8f 7b       	andi	r24, 0xBF	; 191
     f2a:	80 93 fa 08 	sts	0x08FA, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     f2e:	60 91 1c 04 	lds	r22, 0x041C
     f32:	70 91 1d 04 	lds	r23, 0x041D
     f36:	cf 01       	movw	r24, r30
     f38:	0e 94 ed 21 	call	0x43da	; 0x43da <__divmodhi4>
     f3c:	20 91 12 04 	lds	r18, 0x0412
     f40:	30 91 13 04 	lds	r19, 0x0413
     f44:	82 17       	cp	r24, r18
     f46:	93 07       	cpc	r25, r19
     f48:	34 f4       	brge	.+12     	; 0xf56 <motor_and_write+0xdc>
     f4a:	ef 28       	or	r14, r15
     f4c:	21 f0       	breq	.+8      	; 0xf56 <motor_and_write+0xdc>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     f4e:	80 91 f5 08 	lds	r24, 0x08F5
     f52:	82 60       	ori	r24, 0x02	; 2
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <motor_and_write+0xe2>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 0
     f56:	80 91 f5 08 	lds	r24, 0x08F5
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	80 93 f5 08 	sts	0x08F5, r24
	}

	if( ((counter - counterRef) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     f60:	60 91 1e 04 	lds	r22, 0x041E
     f64:	70 91 1f 04 	lds	r23, 0x041F
     f68:	cf 01       	movw	r24, r30
     f6a:	0e 94 ed 21 	call	0x43da	; 0x43da <__divmodhi4>
     f6e:	20 91 14 04 	lds	r18, 0x0414
     f72:	30 91 15 04 	lds	r19, 0x0415
     f76:	82 17       	cp	r24, r18
     f78:	93 07       	cpc	r25, r19
     f7a:	34 f4       	brge	.+12     	; 0xf88 <motor_and_write+0x10e>
     f7c:	cd 28       	or	r12, r13
     f7e:	21 f0       	breq	.+8      	; 0xf88 <motor_and_write+0x10e>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     f80:	80 91 f5 08 	lds	r24, 0x08F5
     f84:	80 61       	ori	r24, 0x10	; 16
     f86:	03 c0       	rjmp	.+6      	; 0xf8e <motor_and_write+0x114>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 0
     f88:	80 91 f5 08 	lds	r24, 0x08F5
     f8c:	8f 7e       	andi	r24, 0xEF	; 239
     f8e:	80 93 f5 08 	sts	0x08F5, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     f92:	80 e4       	ldi	r24, 0x40	; 64
     f94:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
	i2c_write(0x2);									// write command byte to motor chip
     f98:	82 e0       	ldi	r24, 0x02	; 2
     f9a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     f9e:	80 91 fa 08 	lds	r24, 0x08FA
     fa2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     fa6:	80 91 f5 08 	lds	r24, 0x08F5
     faa:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_stop();                            // set stop condition = release bus
     fae:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

	i2c_start(I2C2+I2C_WRITE);                // write to output chip
     fb2:	82 e4       	ldi	r24, 0x42	; 66
     fb4:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
	i2c_write(0x2);
     fb8:	82 e0       	ldi	r24, 0x02	; 2
     fba:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_write(u_outputByte0.outputByte0);
     fbe:	80 91 f8 08 	lds	r24, 0x08F8
     fc2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_write(u_outputByte1.outputByte1);
     fc6:	80 91 f6 08 	lds	r24, 0x08F6
     fca:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_stop();
     fce:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
}
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	df 90       	pop	r13
     fe0:	cf 90       	pop	r12
     fe2:	bf 90       	pop	r11
     fe4:	af 90       	pop	r10
     fe6:	08 95       	ret

00000fe8 <serial_print_string_noCRLF>:
void serial_print_string(char *msg){
	serial_send_blocking(USB_COMM, msg, strlen(msg));
	serial_send_blocking(USB_COMM, "\r\n", 2);
}

void serial_print_string_noCRLF(char msg[]){
     fe8:	68 2f       	mov	r22, r24
	serial_send_blocking(USB_COMM, msg, strlen(msg));
     fea:	e8 2f       	mov	r30, r24
     fec:	f9 2f       	mov	r31, r25
     fee:	df 01       	movw	r26, r30
     ff0:	0d 90       	ld	r0, X+
     ff2:	00 20       	and	r0, r0
     ff4:	e9 f7       	brne	.-6      	; 0xff0 <serial_print_string_noCRLF+0x8>
     ff6:	11 97       	sbiw	r26, 0x01	; 1
     ff8:	ae 1b       	sub	r26, r30
     ffa:	bf 0b       	sbc	r27, r31
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	79 2f       	mov	r23, r25
    1000:	4a 2f       	mov	r20, r26
    1002:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <serial_send_blocking>
}
    1006:	08 95       	ret

00001008 <serial_print_string>:
	}
	serial_print_string("END");
	}
}

void serial_print_string(char *msg){
    1008:	68 2f       	mov	r22, r24
	serial_send_blocking(USB_COMM, msg, strlen(msg));
    100a:	e8 2f       	mov	r30, r24
    100c:	f9 2f       	mov	r31, r25
    100e:	df 01       	movw	r26, r30
    1010:	0d 90       	ld	r0, X+
    1012:	00 20       	and	r0, r0
    1014:	e9 f7       	brne	.-6      	; 0x1010 <serial_print_string+0x8>
    1016:	11 97       	sbiw	r26, 0x01	; 1
    1018:	ae 1b       	sub	r26, r30
    101a:	bf 0b       	sbc	r27, r31
    101c:	82 e0       	ldi	r24, 0x02	; 2
    101e:	79 2f       	mov	r23, r25
    1020:	4a 2f       	mov	r20, r26
    1022:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <serial_send_blocking>
	serial_send_blocking(USB_COMM, "\r\n", 2);
    1026:	82 e0       	ldi	r24, 0x02	; 2
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	71 e0       	ldi	r23, 0x01	; 1
    102c:	42 e0       	ldi	r20, 0x02	; 2
    102e:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <serial_send_blocking>
}
    1032:	08 95       	ret

00001034 <init_action>:
	i2c_write(u_outputByte0.outputByte0);
	i2c_write(u_outputByte1.outputByte1);
	i2c_stop();
}

void init_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor, bool *pprint0){
    1034:	af 92       	push	r10
    1036:	bf 92       	push	r11
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	ea 01       	movw	r28, r20
    103e:	f9 01       	movw	r30, r18
	switch(state){
    1040:	83 30       	cpi	r24, 0x03	; 3
    1042:	91 05       	cpc	r25, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <init_action+0x14>
    1046:	64 c0       	rjmp	.+200    	; 0x1110 <init_action+0xdc>
    1048:	84 30       	cpi	r24, 0x04	; 4
    104a:	91 05       	cpc	r25, r1
    104c:	54 f4       	brge	.+20     	; 0x1062 <init_action+0x2e>
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	91 05       	cpc	r25, r1
    1052:	e1 f1       	breq	.+120    	; 0x10cc <init_action+0x98>
    1054:	82 30       	cpi	r24, 0x02	; 2
    1056:	91 05       	cpc	r25, r1
    1058:	0c f0       	brlt	.+2      	; 0x105c <init_action+0x28>
    105a:	4b c0       	rjmp	.+150    	; 0x10f2 <init_action+0xbe>
    105c:	89 2b       	or	r24, r25
    105e:	89 f0       	breq	.+34     	; 0x1082 <init_action+0x4e>
    1060:	85 c0       	rjmp	.+266    	; 0x116c <init_action+0x138>
    1062:	85 30       	cpi	r24, 0x05	; 5
    1064:	91 05       	cpc	r25, r1
    1066:	09 f4       	brne	.+2      	; 0x106a <init_action+0x36>
    1068:	60 c0       	rjmp	.+192    	; 0x112a <init_action+0xf6>
    106a:	85 30       	cpi	r24, 0x05	; 5
    106c:	91 05       	cpc	r25, r1
    106e:	0c f4       	brge	.+2      	; 0x1072 <init_action+0x3e>
    1070:	5c c0       	rjmp	.+184    	; 0x112a <init_action+0xf6>
    1072:	86 30       	cpi	r24, 0x06	; 6
    1074:	91 05       	cpc	r25, r1
    1076:	09 f4       	brne	.+2      	; 0x107a <init_action+0x46>
    1078:	62 c0       	rjmp	.+196    	; 0x113e <init_action+0x10a>
    107a:	07 97       	sbiw	r24, 0x07	; 7
    107c:	09 f0       	breq	.+2      	; 0x1080 <init_action+0x4c>
    107e:	76 c0       	rjmp	.+236    	; 0x116c <init_action+0x138>
    1080:	6b c0       	rjmp	.+214    	; 0x1158 <init_action+0x124>
		
		case INIT:   // state 0
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    1082:	80 91 f4 08 	lds	r24, 0x08F4
    1086:	90 91 fa 08 	lds	r25, 0x08FA
    108a:	81 ff       	sbrs	r24, 1
    108c:	04 c0       	rjmp	.+8      	; 0x1096 <init_action+0x62>
				u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    108e:	9f 7e       	andi	r25, 0xEF	; 239
    1090:	90 93 fa 08 	sts	0x08FA, r25
    1094:	6b c0       	rjmp	.+214    	; 0x116c <init_action+0x138>
				//u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
			}
			else{
				u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1096:	9f 7d       	andi	r25, 0xDF	; 223
    1098:	90 93 fa 08 	sts	0x08FA, r25
				*pfixtureMotor = 0;
    109c:	11 82       	std	Z+1, r1	; 0x01
    109e:	10 82       	st	Z, r1
				u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    10a0:	80 91 f8 08 	lds	r24, 0x08F8
    10a4:	8f 7e       	andi	r24, 0xEF	; 239
				u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    10a6:	88 60       	ori	r24, 0x08	; 8
    10a8:	80 93 f8 08 	sts	0x08F8, r24
				if(*pprint0 == 1){
    10ac:	f5 01       	movw	r30, r10
    10ae:	80 81       	ld	r24, Z
    10b0:	88 23       	and	r24, r24
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <init_action+0x82>
    10b4:	5b c0       	rjmp	.+182    	; 0x116c <init_action+0x138>
					lcd_goto_xy(0,1);
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
					serial_print_string("PUSH TO START");
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					*pprint0 = 0;
    10c6:	f5 01       	movw	r30, r10
    10c8:	10 82       	st	Z, r1
    10ca:	50 c0       	rjmp	.+160    	; 0x116c <init_action+0x138>
				}
			}
			break;
			
		case LOAD:    //state 1
			u_outputByte0.bits_in_outputByte0.ACPower = 0;
    10cc:	20 91 f8 08 	lds	r18, 0x08F8
    10d0:	32 2f       	mov	r19, r18
    10d2:	3e 7f       	andi	r19, 0xFE	; 254
			if((counter % 200) < 100){
    10d4:	cb 01       	movw	r24, r22
    10d6:	68 ec       	ldi	r22, 0xC8	; 200
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	0e 94 ed 21 	call	0x43da	; 0x43da <__divmodhi4>
    10de:	84 36       	cpi	r24, 0x64	; 100
    10e0:	91 05       	cpc	r25, r1
    10e2:	24 f4       	brge	.+8      	; 0x10ec <init_action+0xb8>
				u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    10e4:	2c 7f       	andi	r18, 0xFC	; 252
    10e6:	20 93 f8 08 	sts	0x08F8, r18
    10ea:	03 c0       	rjmp	.+6      	; 0x10f2 <init_action+0xbe>
			}
			else{
				u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    10ec:	32 60       	ori	r19, 0x02	; 2
    10ee:	30 93 f8 08 	sts	0x08F8, r19
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
			break;
			
		case LOADEXTRA:  // state 2
			*pplateLoadMotor = 1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	99 83       	std	Y+1, r25	; 0x01
    10f8:	88 83       	st	Y, r24
			*pfixtureMotor = 0;
    10fa:	11 82       	std	Z+1, r1	; 0x01
    10fc:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
    10fe:	80 91 fa 08 	lds	r24, 0x08FA
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1102:	86 60       	ori	r24, 0x06	; 6
    1104:	80 93 fa 08 	sts	0x08FA, r24
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1108:	80 91 f8 08 	lds	r24, 0x08F8
    110c:	8b 7f       	andi	r24, 0xFB	; 251
    110e:	21 c0       	rjmp	.+66     	; 0x1152 <init_action+0x11e>
			break;
			
		case RAISEL1:    // state 3
			u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1110:	80 91 f8 08 	lds	r24, 0x08F8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1114:	81 7e       	andi	r24, 0xE1	; 225
			u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1116:	86 61       	ori	r24, 0x16	; 22
    1118:	80 93 f8 08 	sts	0x08F8, r24
			*pplateLoadMotor = 0;
    111c:	19 82       	std	Y+1, r1	; 0x01
    111e:	18 82       	st	Y, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1120:	80 91 fa 08 	lds	r24, 0x08FA
    1124:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1126:	8b 7f       	andi	r24, 0xFB	; 251
    1128:	1f c0       	rjmp	.+62     	; 0x1168 <init_action+0x134>
			*pfixtureMotor = 1; 
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
			
		case FIXLEXTRA:   // state 5
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
    112a:	80 91 fa 08 	lds	r24, 0x08FA
    112e:	80 61       	ori	r24, 0x10	; 16
    1130:	80 93 fa 08 	sts	0x08FA, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	80 83       	st	Z, r24
    113c:	12 c0       	rjmp	.+36     	; 0x1162 <init_action+0x12e>
			break;
			
		case LOWERL1:      // state 6
			*pfixtureMotor = 0;
    113e:	11 82       	std	Z+1, r1	; 0x01
    1140:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1142:	80 91 fa 08 	lds	r24, 0x08FA
    1146:	8f 7d       	andi	r24, 0xDF	; 223
    1148:	80 93 fa 08 	sts	0x08FA, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;    // removes air to drop fixture
    114c:	80 91 f8 08 	lds	r24, 0x08F8
    1150:	88 60       	ori	r24, 0x08	; 8
    1152:	80 93 f8 08 	sts	0x08F8, r24
    1156:	0a c0       	rjmp	.+20     	; 0x116c <init_action+0x138>
			break;
			
		case LOWERL2:     // state 7
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;    // drives lifts down
    1158:	80 91 f8 08 	lds	r24, 0x08F8
    115c:	8f 7e       	andi	r24, 0xEF	; 239
    115e:	80 93 f8 08 	sts	0x08F8, r24
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1162:	80 91 fa 08 	lds	r24, 0x08FA
    1166:	80 62       	ori	r24, 0x20	; 32
    1168:	80 93 fa 08 	sts	0x08FA, r24
			break;
		//*********************************************
	}
}
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	bf 90       	pop	r11
    1172:	af 90       	pop	r10
    1174:	08 95       	ret

00001176 <serial_print_int>:

void serial_print_string_noCRLF(char msg[]){
	serial_send_blocking(USB_COMM, msg, strlen(msg));
}

void serial_print_int(int a){
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	2a 97       	sbiw	r28, 0x0a	; 10
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
	char msg[10];
	itoa(a, msg, 10);
    118e:	8e 01       	movw	r16, r28
    1190:	0f 5f       	subi	r16, 0xFF	; 255
    1192:	1f 4f       	sbci	r17, 0xFF	; 255
    1194:	b8 01       	movw	r22, r16
    1196:	4a e0       	ldi	r20, 0x0A	; 10
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	0e 94 72 23 	call	0x46e4	; 0x46e4 <itoa>
	serial_print_string(msg);
    119e:	c8 01       	movw	r24, r16
    11a0:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
}
    11a4:	2a 96       	adiw	r28, 0x0a	; 10
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	08 95       	ret

000011ba <main>:
void serial_print_int(int a);

void serial_print_string_noCRLF(char msg[]);

int main()   
{
    11ba:	2f 92       	push	r2
    11bc:	3f 92       	push	r3
    11be:	4f 92       	push	r4
    11c0:	5f 92       	push	r5
    11c2:	6f 92       	push	r6
    11c4:	7f 92       	push	r7
    11c6:	8f 92       	push	r8
    11c8:	9f 92       	push	r9
    11ca:	af 92       	push	r10
    11cc:	bf 92       	push	r11
    11ce:	cf 92       	push	r12
    11d0:	df 92       	push	r13
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	62 97       	sbiw	r28, 0x12	; 18
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently

	bool buttonTriggered = false;	//buttonTriggered is false if it hasn't been triggered, true if it has;
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
	
	fixtureMotorSmallHalfPlate *= stepFactor;
    11ee:	80 91 24 04 	lds	r24, 0x0424
    11f2:	90 91 25 04 	lds	r25, 0x0425
    11f6:	20 91 22 04 	lds	r18, 0x0422
    11fa:	30 91 23 04 	lds	r19, 0x0423
    11fe:	ac 01       	movw	r20, r24
    1200:	42 9f       	mul	r20, r18
    1202:	c0 01       	movw	r24, r0
    1204:	43 9f       	mul	r20, r19
    1206:	90 0d       	add	r25, r0
    1208:	52 9f       	mul	r21, r18
    120a:	90 0d       	add	r25, r0
    120c:	11 24       	eor	r1, r1
    120e:	90 93 25 04 	sts	0x0425, r25
    1212:	80 93 24 04 	sts	0x0424, r24
	fixtureMotorBigHalfPlate   *= stepFactor;
    1216:	80 91 26 04 	lds	r24, 0x0426
    121a:	90 91 27 04 	lds	r25, 0x0427
    121e:	ac 01       	movw	r20, r24
    1220:	42 9f       	mul	r20, r18
    1222:	c0 01       	movw	r24, r0
    1224:	43 9f       	mul	r20, r19
    1226:	90 0d       	add	r25, r0
    1228:	52 9f       	mul	r21, r18
    122a:	90 0d       	add	r25, r0
    122c:	11 24       	eor	r1, r1
    122e:	90 93 27 04 	sts	0x0427, r25
    1232:	80 93 26 04 	sts	0x0426, r24
	fixtureMotorDry            *= stepFactor;
    1236:	80 91 28 04 	lds	r24, 0x0428
    123a:	90 91 29 04 	lds	r25, 0x0429
    123e:	ac 01       	movw	r20, r24
    1240:	42 9f       	mul	r20, r18
    1242:	c0 01       	movw	r24, r0
    1244:	43 9f       	mul	r20, r19
    1246:	90 0d       	add	r25, r0
    1248:	52 9f       	mul	r21, r18
    124a:	90 0d       	add	r25, r0
    124c:	11 24       	eor	r1, r1
    124e:	90 93 29 04 	sts	0x0429, r25
    1252:	80 93 28 04 	sts	0x0428, r24
	plateLoadMotorLoadPlate    *= stepFactor;
    1256:	80 91 2a 04 	lds	r24, 0x042A
    125a:	90 91 2b 04 	lds	r25, 0x042B
    125e:	ac 01       	movw	r20, r24
    1260:	42 9f       	mul	r20, r18
    1262:	c0 01       	movw	r24, r0
    1264:	43 9f       	mul	r20, r19
    1266:	90 0d       	add	r25, r0
    1268:	52 9f       	mul	r21, r18
    126a:	90 0d       	add	r25, r0
    126c:	11 24       	eor	r1, r1
    126e:	90 93 2b 04 	sts	0x042B, r25
    1272:	80 93 2a 04 	sts	0x042A, r24
	plateLoadExtra             *= stepFactor;
    1276:	80 91 2c 04 	lds	r24, 0x042C
    127a:	90 91 2d 04 	lds	r25, 0x042D
    127e:	ac 01       	movw	r20, r24
    1280:	42 9f       	mul	r20, r18
    1282:	c0 01       	movw	r24, r0
    1284:	43 9f       	mul	r20, r19
    1286:	90 0d       	add	r25, r0
    1288:	52 9f       	mul	r21, r18
    128a:	90 0d       	add	r25, r0
    128c:	11 24       	eor	r1, r1
    128e:	90 93 2d 04 	sts	0x042D, r25
    1292:	80 93 2c 04 	sts	0x042C, r24
	fixtureLiftExtra           *= stepFactor;
    1296:	80 91 2e 04 	lds	r24, 0x042E
    129a:	90 91 2f 04 	lds	r25, 0x042F
    129e:	ac 01       	movw	r20, r24
    12a0:	42 9f       	mul	r20, r18
    12a2:	c0 01       	movw	r24, r0
    12a4:	43 9f       	mul	r20, r19
    12a6:	90 0d       	add	r25, r0
    12a8:	52 9f       	mul	r21, r18
    12aa:	90 0d       	add	r25, r0
    12ac:	11 24       	eor	r1, r1
    12ae:	90 93 2f 04 	sts	0x042F, r25
    12b2:	80 93 2e 04 	sts	0x042E, r24
	fixtureLift2Extra          *= stepFactor;
    12b6:	80 91 34 04 	lds	r24, 0x0434
    12ba:	90 91 35 04 	lds	r25, 0x0435
    12be:	ac 01       	movw	r20, r24
    12c0:	42 9f       	mul	r20, r18
    12c2:	c0 01       	movw	r24, r0
    12c4:	43 9f       	mul	r20, r19
    12c6:	90 0d       	add	r25, r0
    12c8:	52 9f       	mul	r21, r18
    12ca:	90 0d       	add	r25, r0
    12cc:	11 24       	eor	r1, r1
    12ce:	90 93 35 04 	sts	0x0435, r25
    12d2:	80 93 34 04 	sts	0x0434, r24
	fixtureMotorDry1Extra      *= stepFactor;
    12d6:	80 91 30 04 	lds	r24, 0x0430
    12da:	90 91 31 04 	lds	r25, 0x0431
    12de:	ac 01       	movw	r20, r24
    12e0:	42 9f       	mul	r20, r18
    12e2:	c0 01       	movw	r24, r0
    12e4:	43 9f       	mul	r20, r19
    12e6:	90 0d       	add	r25, r0
    12e8:	52 9f       	mul	r21, r18
    12ea:	90 0d       	add	r25, r0
    12ec:	11 24       	eor	r1, r1
    12ee:	90 93 31 04 	sts	0x0431, r25
    12f2:	80 93 30 04 	sts	0x0430, r24
	fixtureMotorDry2Step       *= stepFactor;
    12f6:	80 91 32 04 	lds	r24, 0x0432
    12fa:	90 91 33 04 	lds	r25, 0x0433
    12fe:	ac 01       	movw	r20, r24
    1300:	42 9f       	mul	r20, r18
    1302:	c0 01       	movw	r24, r0
    1304:	43 9f       	mul	r20, r19
    1306:	90 0d       	add	r25, r0
    1308:	52 9f       	mul	r21, r18
    130a:	90 0d       	add	r25, r0
    130c:	11 24       	eor	r1, r1
    130e:	90 93 33 04 	sts	0x0433, r25
    1312:	80 93 32 04 	sts	0x0432, r24
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	9f ef       	ldi	r25, 0xFF	; 255
    131a:	98 8b       	std	Y+16, r25	; 0x10
    131c:	8f 87       	std	Y+15, r24	; 0x0f
    131e:	1e 86       	std	Y+14, r1	; 0x0e
    
	while(1){		//Repeats the entire program indefinitely (runs maintenance or normal each time)

							//mx holds whether motor x should move: 0 = no, 1 = yes
	plateLoadMotor = 0;		//plate load motor
    1320:	1b 82       	std	Y+3, r1	; 0x03
    1322:	1a 82       	std	Y+2, r1	; 0x02
	fixtureMotor = 0;		//fixture motor
    1324:	1d 82       	std	Y+5, r1	; 0x05
    1326:	1c 82       	std	Y+4, r1	; 0x04
	brush1Motor = 0;		//brush 1 motor
    1328:	1f 82       	std	Y+7, r1	; 0x07
    132a:	1e 82       	std	Y+6, r1	; 0x06
	brush2Motor = 0;		//brush 2 motor
    132c:	19 86       	std	Y+9, r1	; 0x09
    132e:	18 86       	std	Y+8, r1	; 0x08
	paperTowelMotor = 0; 	//paper towel roller motor
    1330:	1b 86       	std	Y+11, r1	; 0x0b
    1332:	1a 86       	std	Y+10, r1	; 0x0a
	//various reference points used by the program to tell how long since an event has occurred
	//the ones with numbers correspond to run mode states, and Five refers to motor 5 (paper towel roller)
	counterRef = 0;
	
	//hold whether or not statements have been printed yet (numbers refer to run mode states)
	print0 = true;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	89 83       	std	Y+1, r24	; 0x01
	print35 = true;
	
	//initialize button variables
	button = 1;						//button = 0 means it has been de-bounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;				//holds the state in the button subroutine where the program is currently
    1338:	1d 86       	std	Y+13, r1	; 0x0d
    133a:	1c 86       	std	Y+12, r1	; 0x0c

	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
    133c:	10 92 fa 08 	sts	0x08FA, r1
	u_motorByte1.motorByte1 = 128;  // initialize motorByte1              **********1 or 128, depending on order**********
    1340:	80 e8       	ldi	r24, 0x80	; 128
    1342:	80 93 f5 08 	sts	0x08F5, r24
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	80 93 f8 08 	sts	0x08F8, r24
	u_outputByte1.outputByte1 = 15;  // initialize outputByte1
    134c:	8f e0       	ldi	r24, 0x0F	; 15
    134e:	80 93 f6 08 	sts	0x08F6, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
    1352:	10 92 f4 08 	sts	0x08F4, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
    1356:	10 92 f7 08 	sts	0x08F7, r1
	
	//clear();
	serial_print_string(PROGRAM_NAME);
    135a:	81 e1       	ldi	r24, 0x11	; 17
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
	lcd_goto_xy(0,1);
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
	serial_print_string(REVISION_NUMBER);
    136a:	82 e2       	ldi	r24, 0x22	; 34
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
	delay_ms(2000);
    1372:	80 ed       	ldi	r24, 0xD0	; 208
    1374:	97 e0       	ldi	r25, 0x07	; 7
    1376:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <delay_ms>
	
	//clear();
	serial_print_string("BEGIN ");
    137a:	89 e2       	ldi	r24, 0x29	; 41
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
	
	delay_ms(1000);
    1382:	88 ee       	ldi	r24, 0xE8	; 232
    1384:	93 e0       	ldi	r25, 0x03	; 3
    1386:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <delay_ms>

    i2c_init();                                // init I2C interface
    138a:	0e 94 97 00 	call	0x12e	; 0x12e <i2c_init>
	
    serial_print_string("INIT ");
    138e:	80 e3       	ldi	r24, 0x30	; 48
    1390:	91 e0       	ldi	r25, 0x01	; 1
    1392:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
    1396:	80 e4       	ldi	r24, 0x40	; 64
    1398:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
    139c:	f8 2e       	mov	r15, r24
	// OR
	//      ret1 = IC_START( IC22 ); 
	//		serial_print_string( "I2C2 ");
	//      serial_print_string( (ret1)? "DOWN":"UP" ); 
	//		i2c_stop();
	if (ret1) {
    139e:	88 23       	and	r24, r24
    13a0:	19 f0       	breq	.+6      	; 0x13a8 <main+0x1ee>
		serial_print_string("I2C1 DOWN ");
    13a2:	86 e3       	ldi	r24, 0x36	; 54
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <main+0x1f2>
		}
	else {
		serial_print_string("I2C1 UP");
    13a8:	81 e4       	ldi	r24, 0x41	; 65
    13aa:	91 e0       	ldi	r25, 0x01	; 1
    13ac:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
		}	
	i2c_stop();	
    13b0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
	
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
    13b4:	82 e4       	ldi	r24, 0x42	; 66
    13b6:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
    13ba:	18 2f       	mov	r17, r24
	
	if (ret2){
    13bc:	88 23       	and	r24, r24
    13be:	19 f0       	breq	.+6      	; 0x13c6 <main+0x20c>
		
		serial_print_string("I2C2 DOWN ");
    13c0:	89 e4       	ldi	r24, 0x49	; 73
    13c2:	91 e0       	ldi	r25, 0x01	; 1
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <main+0x210>
		}
	else{
		serial_print_string("I2C2 UP");
    13c6:	84 e5       	ldi	r24, 0x54	; 84
    13c8:	91 e0       	ldi	r25, 0x01	; 1
    13ca:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
		}		
	i2c_stop();
    13ce:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
    13d2:	84 e4       	ldi	r24, 0x44	; 68
    13d4:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
    13d8:	08 2f       	mov	r16, r24
	if (ret3){
    13da:	88 23       	and	r24, r24
    13dc:	19 f0       	breq	.+6      	; 0x13e4 <main+0x22a>
		serial_print_string("I2C3 DOWN ");
    13de:	8c e5       	ldi	r24, 0x5C	; 92
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <main+0x22e>
		}		
	else{
		serial_print_string("I2C3 UP");
    13e4:	87 e6       	ldi	r24, 0x67	; 103
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
		}		
	i2c_stop();
    13ec:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
    
	//clear();
	serial_print_string("START ");
    13f0:	8f e6       	ldi	r24, 0x6F	; 111
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
	
	if ( ret1 | ret2 | ret3 ) {			
    13f8:	1f 29       	or	r17, r15
    13fa:	10 2b       	or	r17, r16
    13fc:	61 f0       	breq	.+24     	; 0x1416 <main+0x25c>
		// Check if all three I2C devices responded properly
        /* failed to issue start condition(s), possibly no device found */
        
		serial_print_string("I2C BAD ");
    13fe:	86 e7       	ldi	r24, 0x76	; 118
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
		i2c_stop();
    1406:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
		serial_print_string("STOP PROG ");
    140a:	8f e7       	ldi	r24, 0x7F	; 127
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
    1412:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <main+0x18e0>
    }
	else {
		serial_print_string("I2C OK ");
    1416:	8a e8       	ldi	r24, 0x8A	; 138
    1418:	91 e0       	ldi	r25, 0x01	; 1
    141a:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
        /* issuing start conditions ok, devices accessible */
		serial_print_string("BINIT ");
    141e:	82 e9       	ldi	r24, 0x92	; 146
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
    1426:	80 e4       	ldi	r24, 0x40	; 64
    1428:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
		i2c_write(0x6);
    142c:	86 e0       	ldi	r24, 0x06	; 6
    142e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(0x0);
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(0x0);
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_stop();
    143e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

		i2c_start(I2C1+I2C_WRITE);
    1442:	80 e4       	ldi	r24, 0x40	; 64
    1444:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
		i2c_write(0x2);
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    144e:	80 91 fa 08 	lds	r24, 0x08FA
    1452:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    1456:	80 91 f5 08 	lds	r24, 0x08F5
    145a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_stop();
    145e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

        i2c_start(I2C2+I2C_WRITE);       //moved above to make sure right outputs are available
    1462:	82 e4       	ldi	r24, 0x42	; 66
    1464:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
        i2c_write(0x2);
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
        i2c_write(u_outputByte0.outputByte0);
    146e:	80 91 f8 08 	lds	r24, 0x08F8
    1472:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
        i2c_write(u_outputByte1.outputByte1);
    1476:	80 91 f6 08 	lds	r24, 0x08F6
    147a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
        i2c_stop();
    147e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
    1482:	82 e4       	ldi	r24, 0x42	; 66
    1484:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
		i2c_write(0x6);
    1488:	86 e0       	ldi	r24, 0x06	; 6
    148a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(0x0);
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(0x0);
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_stop();
    149a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

		
		//Registers default to input, so I2C3 is fine already

		u_motorByte1.bits_in_motorByte1.enableAll = 0;	//Enables all motor drivers after startup
    149e:	80 91 f5 08 	lds	r24, 0x08F5
    14a2:	8f 77       	andi	r24, 0x7F	; 127
    14a4:	80 93 f5 08 	sts	0x08F5, r24
		i2c_start(I2C1+I2C_WRITE);
    14a8:	80 e4       	ldi	r24, 0x40	; 64
    14aa:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
		i2c_write(0x2);
    14ae:	82 e0       	ldi	r24, 0x02	; 2
    14b0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    14b4:	80 91 fa 08 	lds	r24, 0x08FA
    14b8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    14bc:	80 91 f5 08 	lds	r24, 0x08F5
    14c0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_stop();
    14c4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>


		delay_ms(1000);
    14c8:	88 ee       	ldi	r24, 0xE8	; 232
    14ca:	93 e0       	ldi	r25, 0x03	; 3
    14cc:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <delay_ms>
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
    14d0:	89 e9       	ldi	r24, 0x99	; 153
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
		int selection = !is_digital_input_high(IO_D3);
    14d8:	83 e0       	ldi	r24, 0x03	; 3
    14da:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    14de:	00 e0       	ldi	r16, 0x00	; 0
    14e0:	10 e0       	ldi	r17, 0x00	; 0
    14e2:	88 23       	and	r24, r24
    14e4:	11 f4       	brne	.+4      	; 0x14ea <main+0x330>
    14e6:	01 e0       	ldi	r16, 0x01	; 1
    14e8:	10 e0       	ldi	r17, 0x00	; 0
    14ea:	ee 24       	eor	r14, r14
    14ec:	ff 24       	eor	r15, r15
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			if(selection != is_digital_input_high(IO_D3)){
    14ee:	83 e0       	ldi	r24, 0x03	; 3
    14f0:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	08 17       	cp	r16, r24
    14f8:	19 07       	cpc	r17, r25
    14fa:	49 f0       	breq	.+18     	; 0x150e <main+0x354>
				if(!selection){
    14fc:	01 2b       	or	r16, r17
    14fe:	19 f4       	brne	.+6      	; 0x1506 <main+0x34c>
					serial_print_string("DEBUG");
    1500:	89 ea       	ldi	r24, 0xA9	; 169
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	02 c0       	rjmp	.+4      	; 0x150a <main+0x350>
				}
				else{
					serial_print_string("RUN");
    1506:	8f ea       	ldi	r24, 0xAF	; 175
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
				}
			}
			selection = is_digital_input_high(IO_D3);
    150e:	83 e0       	ldi	r24, 0x03	; 3
    1510:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1514:	08 2f       	mov	r16, r24
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1516:	c7 01       	movw	r24, r14
    1518:	be 01       	movw	r22, r28
    151a:	64 5f       	subi	r22, 0xF4	; 244
    151c:	7f 4f       	sbci	r23, 0xFF	; 255
    151e:	0e 94 65 04 	call	0x8ca	; 0x8ca <button_debounce>
    1522:	18 2f       	mov	r17, r24
			serial_check(); counter++;
    1524:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <serial_check>
void time_reset(void);

// This is inline for efficiency:
static inline void delay_us(unsigned int microseconds)
{
  __asm__ volatile (
    1528:	80 91 20 04 	lds	r24, 0x0420
    152c:	90 91 21 04 	lds	r25, 0x0421
    1530:	6f 93       	push	r22
    1532:	64 e0       	ldi	r22, 0x04	; 4
    1534:	6a 95       	dec	r22
    1536:	f1 f7       	brne	.-4      	; 0x1534 <main+0x37a>
    1538:	6f 91       	pop	r22
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	c9 f7       	brne	.-14     	; 0x1530 <main+0x376>
		//clear();
		serial_print_string("INPUT RUN/DEBUG");
		int selection = !is_digital_input_high(IO_D3);
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    153e:	11 23       	and	r17, r17
    1540:	29 f4       	brne	.+10     	; 0x154c <main+0x392>
				}
				else{
					serial_print_string("RUN");
				}
			}
			selection = is_digital_input_high(IO_D3);
    1542:	10 e0       	ldi	r17, 0x00	; 0
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
			serial_check(); counter++;
    1544:	08 94       	sec
    1546:	e1 1c       	adc	r14, r1
    1548:	f1 1c       	adc	r15, r1
    154a:	d1 cf       	rjmp	.-94     	; 0x14ee <main+0x334>
		buttonTriggered = false;
		counter = 0;
		//clear();


		if(is_digital_input_high(IO_D3))							//Tests if the switch is set to Maintenance Mode
    154c:	83 e0       	ldi	r24, 0x03	; 3
    154e:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1552:	88 23       	and	r24, r24
    1554:	09 f4       	brne	.+2      	; 0x1558 <main+0x39e>
    1556:	52 c4       	rjmp	.+2212   	; 0x1dfc <main+0xc42>
		{
			serial_print_string("DEBUG");
    1558:	89 ea       	ldi	r24, 0xA9	; 169
    155a:	91 e0       	ldi	r25, 0x01	; 1
    155c:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
			delay_ms(1000);
    1560:	88 ee       	ldi	r24, 0xE8	; 232
    1562:	93 e0       	ldi	r25, 0x03	; 3
    1564:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <delay_ms>
    1568:	88 24       	eor	r8, r8
    156a:	99 24       	eor	r9, r9
    156c:	66 24       	eor	r6, r6
    156e:	77 24       	eor	r7, r7
    1570:	44 24       	eor	r4, r4
    1572:	55 24       	eor	r5, r5
    1574:	bb 24       	eor	r11, r11
    1576:	b3 94       	inc	r11
    1578:	22 24       	eor	r2, r2
    157a:	2a 94       	dec	r2
    157c:	32 2c       	mov	r3, r2
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    157e:	84 e4       	ldi	r24, 0x44	; 68
    1580:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				i2c_write(0x0);								// write command byte
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    158a:	85 e4       	ldi	r24, 0x45	; 69
    158c:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1590:	0e 94 08 01 	call	0x210	; 0x210 <i2c_readAck>
    1594:	80 93 f4 08 	sts	0x08F4, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1598:	0e 94 12 01 	call	0x224	; 0x224 <i2c_readNak>
    159c:	80 93 f7 08 	sts	0x08F7, r24
  	 	     	i2c_stop();								// set stop condition = release bus 		
    15a0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    15a4:	c3 01       	movw	r24, r6
    15a6:	be 01       	movw	r22, r28
    15a8:	64 5f       	subi	r22, 0xF4	; 244
    15aa:	7f 4f       	sbci	r23, 0xFF	; 255
    15ac:	0e 94 65 04 	call	0x8ca	; 0x8ca <button_debounce>
    15b0:	18 2f       	mov	r17, r24
							Output 			--     starts testing each output individually and ends after testing all outputs
							Motor			--     starts testing each motor individually and ends after testing all motors
							Multi motor		--     starts testing each the fixture motor with each of the brush motors

				*/
				if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != INPUT){
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    15b8:	88 23       	and	r24, r24
    15ba:	c1 f4       	brne	.+48     	; 0x15ec <main+0x432>
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    15c2:	88 23       	and	r24, r24
    15c4:	99 f4       	brne	.+38     	; 0x15ec <main+0x432>
    15c6:	21 14       	cp	r2, r1
    15c8:	31 04       	cpc	r3, r1
    15ca:	81 f0       	breq	.+32     	; 0x15ec <main+0x432>
					state = S0;
					submode = INPUT;
					//clear();
					serial_print_string("INPUTS ");
    15cc:	83 eb       	ldi	r24, 0xB3	; 179
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					lcd_goto_xy(0,1);
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	61 e0       	ldi	r22, 0x01	; 1
    15d8:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
    15dc:	88 24       	eor	r8, r8
    15de:	99 24       	eor	r9, r9
    15e0:	91 e0       	ldi	r25, 0x01	; 1
    15e2:	9e 87       	std	Y+14, r25	; 0x0e
    15e4:	bb 24       	eor	r11, r11
    15e6:	b3 94       	inc	r11
    15e8:	22 24       	eor	r2, r2
    15ea:	33 24       	eor	r3, r3
					printVar = true;
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2) && submode != OUTPUT){
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    15f2:	88 23       	and	r24, r24
    15f4:	d9 f0       	breq	.+54     	; 0x162c <main+0x472>
    15f6:	82 e0       	ldi	r24, 0x02	; 2
    15f8:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    15fc:	88 23       	and	r24, r24
    15fe:	b1 f4       	brne	.+44     	; 0x162c <main+0x472>
    1600:	21 e0       	ldi	r18, 0x01	; 1
    1602:	22 16       	cp	r2, r18
    1604:	31 04       	cpc	r3, r1
    1606:	91 f0       	breq	.+36     	; 0x162c <main+0x472>
					state = O0_ON;
					submode = OUTPUT;
					//clear();
					serial_print_string("OUTPUTS");
    1608:	8b eb       	ldi	r24, 0xBB	; 187
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					lcd_goto_xy(0,1);
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	61 e0       	ldi	r22, 0x01	; 1
    1614:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
    1618:	b8 e0       	ldi	r27, 0x08	; 8
    161a:	8b 2e       	mov	r8, r27
    161c:	91 2c       	mov	r9, r1
    161e:	31 e0       	ldi	r19, 0x01	; 1
    1620:	3e 87       	std	Y+14, r19	; 0x0e
    1622:	bb 24       	eor	r11, r11
    1624:	b3 94       	inc	r11
    1626:	a1 e0       	ldi	r26, 0x01	; 1
    1628:	2a 2e       	mov	r2, r26
    162a:	31 2c       	mov	r3, r1
					printVar = true;
					switched = true;
				}
				if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MOTOR){
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1632:	88 23       	and	r24, r24
    1634:	01 f5       	brne	.+64     	; 0x1676 <main+0x4bc>
    1636:	82 e0       	ldi	r24, 0x02	; 2
    1638:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    163c:	88 23       	and	r24, r24
    163e:	d9 f0       	breq	.+54     	; 0x1676 <main+0x4bc>
    1640:	42 e0       	ldi	r20, 0x02	; 2
    1642:	24 16       	cp	r2, r20
    1644:	31 04       	cpc	r3, r1
    1646:	b9 f0       	breq	.+46     	; 0x1676 <main+0x4bc>
					state = M1_F;
					submode = MOTOR;
					//clear();
					serial_print_string("MOTORS ");
    1648:	83 ec       	ldi	r24, 0xC3	; 195
    164a:	91 e0       	ldi	r25, 0x01	; 1
    164c:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					lcd_goto_xy(0,1);
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	61 e0       	ldi	r22, 0x01	; 1
    1654:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1658:	80 91 fa 08 	lds	r24, 0x08FA
    165c:	84 60       	ori	r24, 0x04	; 4
    165e:	80 93 fa 08 	sts	0x08FA, r24
    1662:	f4 e2       	ldi	r31, 0x24	; 36
    1664:	8f 2e       	mov	r8, r31
    1666:	91 2c       	mov	r9, r1
    1668:	51 e0       	ldi	r21, 0x01	; 1
    166a:	5e 87       	std	Y+14, r21	; 0x0e
    166c:	bb 24       	eor	r11, r11
    166e:	b3 94       	inc	r11
    1670:	e2 e0       	ldi	r30, 0x02	; 2
    1672:	2e 2e       	mov	r2, r30
    1674:	31 2c       	mov	r3, r1
					switched = true;
				}
				if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2) && submode != MULTI){
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    167c:	88 23       	and	r24, r24
    167e:	21 f1       	breq	.+72     	; 0x16c8 <main+0x50e>
    1680:	82 e0       	ldi	r24, 0x02	; 2
    1682:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1686:	88 23       	and	r24, r24
    1688:	f9 f0       	breq	.+62     	; 0x16c8 <main+0x50e>
    168a:	83 e0       	ldi	r24, 0x03	; 3
    168c:	28 16       	cp	r2, r24
    168e:	31 04       	cpc	r3, r1
    1690:	d9 f0       	breq	.+54     	; 0x16c8 <main+0x50e>
					state = M2_AND_M3;
					submode = MULTI;
					//clear();
					serial_print_string("MULTI MOTOR");
    1692:	8b ec       	ldi	r24, 0xCB	; 203
    1694:	91 e0       	ldi	r25, 0x01	; 1
    1696:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					lcd_goto_xy(0,1);
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	61 e0       	ldi	r22, 0x01	; 1
    169e:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
					printVar = true;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    16a2:	80 91 fa 08 	lds	r24, 0x08FA
    16a6:	80 62       	ori	r24, 0x20	; 32
    16a8:	80 93 fa 08 	sts	0x08FA, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    16ac:	80 91 f5 08 	lds	r24, 0x08F5
    16b0:	81 60       	ori	r24, 0x01	; 1
    16b2:	80 93 f5 08 	sts	0x08F5, r24
    16b6:	7e e2       	ldi	r23, 0x2E	; 46
    16b8:	87 2e       	mov	r8, r23
    16ba:	91 2c       	mov	r9, r1
    16bc:	bb 24       	eor	r11, r11
    16be:	b3 94       	inc	r11
    16c0:	63 e0       	ldi	r22, 0x03	; 3
    16c2:	26 2e       	mov	r2, r22
    16c4:	31 2c       	mov	r3, r1
    16c6:	03 c0       	rjmp	.+6      	; 0x16ce <main+0x514>
					switched = true;
				}
				if(switched){
    16c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ca:	99 23       	and	r25, r25
    16cc:	c9 f0       	breq	.+50     	; 0x1700 <main+0x546>
					plateLoadMotor = 0;
    16ce:	1b 82       	std	Y+3, r1	; 0x03
    16d0:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    16d2:	1d 82       	std	Y+5, r1	; 0x05
    16d4:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    16d6:	1f 82       	std	Y+7, r1	; 0x07
    16d8:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    16da:	19 86       	std	Y+9, r1	; 0x09
    16dc:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    16de:	1b 86       	std	Y+11, r1	; 0x0b
    16e0:	1a 86       	std	Y+10, r1	; 0x0a
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
    16e2:	8f ef       	ldi	r24, 0xFF	; 255
    16e4:	80 93 f8 08 	sts	0x08F8, r24
					u_outputByte1.outputByte1 = 15;  // reset outputByte1
    16e8:	8f e0       	ldi	r24, 0x0F	; 15
    16ea:	80 93 f6 08 	sts	0x08F6, r24
					if(submode != MOTOR && submode != MULTI){
    16ee:	c1 01       	movw	r24, r2
    16f0:	02 97       	sbiw	r24, 0x02	; 2
    16f2:	02 97       	sbiw	r24, 0x02	; 2
    16f4:	20 f0       	brcs	.+8      	; 0x16fe <main+0x544>
						u_motorByte0.motorByte0 = 0;	  // reset motorByte0
    16f6:	10 92 fa 08 	sts	0x08FA, r1
						u_motorByte1.motorByte1 = 0;	  // reset motorByte1
    16fa:	10 92 f5 08 	sts	0x08F5, r1
    16fe:	1e 86       	std	Y+14, r1	; 0x0e
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
    1700:	11 23       	and	r17, r17
    1702:	09 f4       	brne	.+2      	; 0x1706 <main+0x54c>
    1704:	c6 c0       	rjmp	.+396    	; 0x1892 <main+0x6d8>
					if(state <= S7){				//if it's doing the sensors
    1706:	28 e0       	ldi	r18, 0x08	; 8
    1708:	82 16       	cp	r8, r18
    170a:	91 04       	cpc	r9, r1
    170c:	74 f4       	brge	.+28     	; 0x172a <main+0x570>
						lastVal = -1;
						lcd_goto_xy(0,1);
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
						buttonTriggered = false;
						state ++;
    1716:	08 94       	sec
    1718:	81 1c       	adc	r8, r1
    171a:	91 1c       	adc	r9, r1
						counterRef = counter;
						printVar = true;
						if(state == S7 + 1){		//accounts for end of maintenance mode after sensors
    171c:	38 e0       	ldi	r19, 0x08	; 8
    171e:	83 16       	cp	r8, r19
    1720:	91 04       	cpc	r9, r1
    1722:	09 f0       	breq	.+2      	; 0x1726 <main+0x56c>
    1724:	ad c0       	rjmp	.+346    	; 0x1880 <main+0x6c6>
    1726:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <main+0x18ec>
							//clear();
							state = DONEM;
						}
					}
					else if(state <= O13_OFF){		//if it's doing the outputs
    172a:	44 e2       	ldi	r20, 0x24	; 36
    172c:	84 16       	cp	r8, r20
    172e:	91 04       	cpc	r9, r1
    1730:	cc f4       	brge	.+50     	; 0x1764 <main+0x5aa>
						if(state % 2 == 0){			//current state is an 'on' state
    1732:	80 fc       	sbrc	r8, 0
    1734:	09 c0       	rjmp	.+18     	; 0x1748 <main+0x58e>
							lcd_goto_xy(13,1);
    1736:	8d e0       	ldi	r24, 0x0D	; 13
    1738:	61 e0       	ldi	r22, 0x01	; 1
    173a:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
							serial_print_string("OFF");
    173e:	87 ed       	ldi	r24, 0xD7	; 215
    1740:	91 e0       	ldi	r25, 0x01	; 1
    1742:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
    1746:	04 c0       	rjmp	.+8      	; 0x1750 <main+0x596>
						}
						else{						//current state is an 'off' state
							lcd_goto_xy(0,1);
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	61 e0       	ldi	r22, 0x01	; 1
    174c:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
						}
						buttonTriggered = false;
						state ++;
    1750:	08 94       	sec
    1752:	81 1c       	adc	r8, r1
    1754:	91 1c       	adc	r9, r1
						counterRef = counter;
						printVar = true;
						if(state == O13_OFF + 1){	//accounts for end of maintenance mode after outputs
    1756:	54 e2       	ldi	r21, 0x24	; 36
    1758:	85 16       	cp	r8, r21
    175a:	91 04       	cpc	r9, r1
    175c:	09 f0       	breq	.+2      	; 0x1760 <main+0x5a6>
    175e:	96 c0       	rjmp	.+300    	; 0x188c <main+0x6d2>
    1760:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <main+0x18f4>
    1764:	84 01       	movw	r16, r8
    1766:	0f 5f       	subi	r16, 0xFF	; 255
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
							//clear();
							state = DONEM;
						}
					}
					else if(state <= M5_B){							//if it's doing the motors
    176a:	8e e2       	ldi	r24, 0x2E	; 46
    176c:	88 16       	cp	r8, r24
    176e:	91 04       	cpc	r9, r1
    1770:	0c f0       	brlt	.+2      	; 0x1774 <main+0x5ba>
    1772:	5d c0       	rjmp	.+186    	; 0x182e <main+0x674>
						buttonTriggered = false;
						state ++;
						counterRef = counter;
						printVar = true;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
    1774:	80 fc       	sbrc	r8, 0
    1776:	09 c0       	rjmp	.+18     	; 0x178a <main+0x5d0>
							lcd_goto_xy(11,1);
    1778:	8b e0       	ldi	r24, 0x0B	; 11
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
							serial_print_string("BACK ");
    1780:	8b ed       	ldi	r24, 0xDB	; 219
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
    1788:	13 c0       	rjmp	.+38     	; 0x17b0 <main+0x5f6>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
    178a:	0a 32       	cpi	r16, 0x2A	; 42
    178c:	11 05       	cpc	r17, r1
    178e:	71 f1       	breq	.+92     	; 0x17ec <main+0x632>
    1790:	0b 32       	cpi	r16, 0x2B	; 43
    1792:	11 05       	cpc	r17, r1
    1794:	3c f4       	brge	.+14     	; 0x17a4 <main+0x5ea>
    1796:	06 32       	cpi	r16, 0x26	; 38
    1798:	11 05       	cpc	r17, r1
    179a:	61 f0       	breq	.+24     	; 0x17b4 <main+0x5fa>
    179c:	08 32       	cpi	r16, 0x28	; 40
    179e:	11 05       	cpc	r17, r1
    17a0:	39 f4       	brne	.+14     	; 0x17b0 <main+0x5f6>
    17a2:	14 c0       	rjmp	.+40     	; 0x17cc <main+0x612>
    17a4:	0c 32       	cpi	r16, 0x2C	; 44
    17a6:	11 05       	cpc	r17, r1
    17a8:	69 f1       	breq	.+90     	; 0x1804 <main+0x64a>
    17aa:	0e 32       	cpi	r16, 0x2E	; 46
    17ac:	11 05       	cpc	r17, r1
    17ae:	b1 f1       	breq	.+108    	; 0x181c <main+0x662>
    17b0:	48 01       	movw	r8, r16
    17b2:	6c c0       	rjmp	.+216    	; 0x188c <main+0x6d2>
								case M1_B + 1:
									lcd_goto_xy(0,1);
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    17bc:	80 91 fa 08 	lds	r24, 0x08FA
    17c0:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    17c2:	80 62       	ori	r24, 0x20	; 32
    17c4:	80 93 fa 08 	sts	0x08FA, r24
    17c8:	23 01       	movw	r4, r6
    17ca:	55 c2       	rjmp	.+1194   	; 0x1c76 <main+0xabc>
									break;
								case M2_B + 1:
									lcd_goto_xy(0,1);
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	61 e0       	ldi	r22, 0x01	; 1
    17d0:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    17d4:	80 91 fa 08 	lds	r24, 0x08FA
    17d8:	8f 7d       	andi	r24, 0xDF	; 223
    17da:	80 93 fa 08 	sts	0x08FA, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    17de:	80 91 f5 08 	lds	r24, 0x08F5
    17e2:	81 60       	ori	r24, 0x01	; 1
    17e4:	80 93 f5 08 	sts	0x08F5, r24
    17e8:	23 01       	movw	r4, r6
    17ea:	65 c2       	rjmp	.+1226   	; 0x1cb6 <main+0xafc>
									break;
								case M3_B + 1:
									lcd_goto_xy(0,1);
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    17f4:	80 91 f5 08 	lds	r24, 0x08F5
    17f8:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    17fa:	88 60       	ori	r24, 0x08	; 8
    17fc:	80 93 f5 08 	sts	0x08F5, r24
    1800:	23 01       	movw	r4, r6
    1802:	79 c2       	rjmp	.+1266   	; 0x1cf6 <main+0xb3c>
									break;
								case M4_B + 1:
									lcd_goto_xy(0,1);
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    180c:	80 91 f5 08 	lds	r24, 0x08F5
    1810:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    1812:	80 64       	ori	r24, 0x40	; 64
    1814:	80 93 f5 08 	sts	0x08F5, r24
    1818:	23 01       	movw	r4, r6
    181a:	8d c2       	rjmp	.+1306   	; 0x1d36 <main+0xb7c>
									break;
								case M5_B + 1:
									//clear();
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    181c:	80 91 f5 08 	lds	r24, 0x08F5
    1820:	8f 7b       	andi	r24, 0xBF	; 191
    1822:	80 93 f5 08 	sts	0x08F5, r24
									state = DONEM;
									paperTowelMotor = 0;
    1826:	1b 86       	std	Y+11, r1	; 0x0b
    1828:	1a 86       	std	Y+10, r1	; 0x0a
    182a:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <main+0x18f4>
							}
						}
					}
					else{
						buttonTriggered = false;
						state ++;
    182e:	48 01       	movw	r8, r16
						counterRef = counter;
						printVar = true;
						switch(state){
    1830:	0f 32       	cpi	r16, 0x2F	; 47
    1832:	11 05       	cpc	r17, r1
    1834:	21 f0       	breq	.+8      	; 0x183e <main+0x684>
    1836:	00 33       	cpi	r16, 0x30	; 48
    1838:	11 05       	cpc	r17, r1
    183a:	41 f5       	brne	.+80     	; 0x188c <main+0x6d2>
    183c:	11 c0       	rjmp	.+34     	; 0x1860 <main+0x6a6>
							case M2_AND_M3 + 1:
								lcd_goto_xy(0,1);
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
								u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1846:	90 91 f5 08 	lds	r25, 0x08F5
    184a:	9e 7f       	andi	r25, 0xFE	; 254
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    184c:	80 91 fa 08 	lds	r24, 0x08FA
    1850:	80 62       	ori	r24, 0x20	; 32
    1852:	80 93 fa 08 	sts	0x08FA, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    1856:	98 60       	ori	r25, 0x08	; 8
    1858:	90 93 f5 08 	sts	0x08F5, r25
    185c:	23 01       	movw	r4, r6
    185e:	98 c2       	rjmp	.+1328   	; 0x1d90 <main+0xbd6>
								break;
							case M2_AND_M4 + 1:
								//clear();
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1860:	80 91 fa 08 	lds	r24, 0x08FA
    1864:	8f 7d       	andi	r24, 0xDF	; 223
    1866:	80 93 fa 08 	sts	0x08FA, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    186a:	80 91 f5 08 	lds	r24, 0x08F5
    186e:	87 7f       	andi	r24, 0xF7	; 247
    1870:	80 93 f5 08 	sts	0x08F5, r24
								state = DONEM;
								fixtureMotor = 0;
    1874:	1d 82       	std	Y+5, r1	; 0x05
    1876:	1c 82       	std	Y+4, r1	; 0x04
								brush2Motor = 0;
    1878:	19 86       	std	Y+9, r1	; 0x09
    187a:	18 86       	std	Y+8, r1	; 0x08
    187c:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <main+0x18f4>
    1880:	23 01       	movw	r4, r6
    1882:	4f ef       	ldi	r20, 0xFF	; 255
    1884:	5f ef       	ldi	r21, 0xFF	; 255
    1886:	58 8b       	std	Y+16, r21	; 0x10
    1888:	4f 87       	std	Y+15, r20	; 0x0f
    188a:	01 c0       	rjmp	.+2      	; 0x188e <main+0x6d4>
    188c:	23 01       	movw	r4, r6
    188e:	bb 24       	eor	r11, r11
    1890:	b3 94       	inc	r11
						}
					}
				}

				//state actions
				switch (state) {
    1892:	f4 01       	movw	r30, r8
    1894:	e0 33       	cpi	r30, 0x30	; 48
    1896:	f1 05       	cpc	r31, r1
    1898:	08 f0       	brcs	.+2      	; 0x189c <main+0x6e2>
    189a:	8c c2       	rjmp	.+1304   	; 0x1db4 <main+0xbfa>
    189c:	ea 5b       	subi	r30, 0xBA	; 186
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	ee 0f       	add	r30, r30
    18a2:	ff 1f       	adc	r31, r31
    18a4:	05 90       	lpm	r0, Z+
    18a6:	f4 91       	lpm	r31, Z+
    18a8:	e0 2d       	mov	r30, r0
    18aa:	09 94       	ijmp
					case S0:
						if(printVar){
    18ac:	bb 20       	and	r11, r11
    18ae:	21 f0       	breq	.+8      	; 0x18b8 <main+0x6fe>
							serial_print_string("SENSOR 1");
    18b0:	81 ee       	ldi	r24, 0xE1	; 225
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    18b8:	8f e0       	ldi	r24, 0x0F	; 15
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.plate){
    18c0:	80 91 f4 08 	lds	r24, 0x08F4
    18c4:	81 70       	andi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	2f 85       	ldd	r18, Y+15	; 0x0f
    18ca:	38 89       	ldd	r19, Y+16	; 0x10
    18cc:	28 17       	cp	r18, r24
    18ce:	39 07       	cpc	r19, r25
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <main+0x71a>
    18d2:	6f c2       	rjmp	.+1246   	; 0x1db2 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.plate);
    18d4:	0e 94 bb 08 	call	0x1176	; 0x1176 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.plate;
    18d8:	80 91 f4 08 	lds	r24, 0x08F4
    18dc:	b0 c0       	rjmp	.+352    	; 0x1a3e <main+0x884>
						}							
						break;
					case S1:
						if(printVar){
    18de:	bb 20       	and	r11, r11
    18e0:	21 f0       	breq	.+8      	; 0x18ea <main+0x730>
							serial_print_string("SENSOR 2");
    18e2:	8a ee       	ldi	r24, 0xEA	; 234
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    18ea:	8f e0       	ldi	r24, 0x0F	; 15
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureHome){
    18f2:	80 91 f4 08 	lds	r24, 0x08F4
    18f6:	86 95       	lsr	r24
    18f8:	81 70       	andi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	2f 85       	ldd	r18, Y+15	; 0x0f
    18fe:	38 89       	ldd	r19, Y+16	; 0x10
    1900:	28 17       	cp	r18, r24
    1902:	39 07       	cpc	r19, r25
    1904:	09 f4       	brne	.+2      	; 0x1908 <main+0x74e>
    1906:	55 c2       	rjmp	.+1194   	; 0x1db2 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureHome);
    1908:	0e 94 bb 08 	call	0x1176	; 0x1176 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureHome;
    190c:	80 91 f4 08 	lds	r24, 0x08F4
    1910:	86 95       	lsr	r24
    1912:	95 c0       	rjmp	.+298    	; 0x1a3e <main+0x884>
						}							
						break;
					case S2:
						if(printVar){
    1914:	bb 20       	and	r11, r11
    1916:	21 f0       	breq	.+8      	; 0x1920 <main+0x766>
							serial_print_string("SENSOR 3");
    1918:	83 ef       	ldi	r24, 0xF3	; 243
    191a:	91 e0       	ldi	r25, 0x01	; 1
    191c:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1920:	8f e0       	ldi	r24, 0x0F	; 15
    1922:	61 e0       	ldi	r22, 0x01	; 1
    1924:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureLift){
    1928:	80 91 f4 08 	lds	r24, 0x08F4
    192c:	86 95       	lsr	r24
    192e:	86 95       	lsr	r24
    1930:	81 70       	andi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	2f 85       	ldd	r18, Y+15	; 0x0f
    1936:	38 89       	ldd	r19, Y+16	; 0x10
    1938:	28 17       	cp	r18, r24
    193a:	39 07       	cpc	r19, r25
    193c:	09 f4       	brne	.+2      	; 0x1940 <main+0x786>
    193e:	39 c2       	rjmp	.+1138   	; 0x1db2 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureLift);
    1940:	0e 94 bb 08 	call	0x1176	; 0x1176 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureLift;
    1944:	80 91 f4 08 	lds	r24, 0x08F4
    1948:	86 95       	lsr	r24
    194a:	86 95       	lsr	r24
    194c:	78 c0       	rjmp	.+240    	; 0x1a3e <main+0x884>
						}							
						break;
					case S3:
						if(printVar){
    194e:	bb 20       	and	r11, r11
    1950:	21 f0       	breq	.+8      	; 0x195a <main+0x7a0>
							serial_print_string("SENSOR 4");
    1952:	8c ef       	ldi	r24, 0xFC	; 252
    1954:	91 e0       	ldi	r25, 0x01	; 1
    1956:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    195a:	8f e0       	ldi	r24, 0x0F	; 15
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixturePlate){
    1962:	80 91 f4 08 	lds	r24, 0x08F4
    1966:	86 95       	lsr	r24
    1968:	86 95       	lsr	r24
    196a:	86 95       	lsr	r24
    196c:	81 70       	andi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	2f 85       	ldd	r18, Y+15	; 0x0f
    1972:	38 89       	ldd	r19, Y+16	; 0x10
    1974:	28 17       	cp	r18, r24
    1976:	39 07       	cpc	r19, r25
    1978:	09 f4       	brne	.+2      	; 0x197c <main+0x7c2>
    197a:	1b c2       	rjmp	.+1078   	; 0x1db2 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixturePlate);
    197c:	0e 94 bb 08 	call	0x1176	; 0x1176 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixturePlate;
    1980:	80 91 f4 08 	lds	r24, 0x08F4
    1984:	86 95       	lsr	r24
    1986:	86 95       	lsr	r24
    1988:	86 95       	lsr	r24
    198a:	59 c0       	rjmp	.+178    	; 0x1a3e <main+0x884>
						}							
						break;
					case S4:
						if(printVar){
    198c:	bb 20       	and	r11, r11
    198e:	21 f0       	breq	.+8      	; 0x1998 <main+0x7de>
							serial_print_string("SENSOR 5");
    1990:	85 e0       	ldi	r24, 0x05	; 5
    1992:	92 e0       	ldi	r25, 0x02	; 2
    1994:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1998:	8f e0       	ldi	r24, 0x0F	; 15
    199a:	61 e0       	ldi	r22, 0x01	; 1
    199c:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush1){
    19a0:	80 91 f4 08 	lds	r24, 0x08F4
    19a4:	82 95       	swap	r24
    19a6:	81 70       	andi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	2f 85       	ldd	r18, Y+15	; 0x0f
    19ac:	38 89       	ldd	r19, Y+16	; 0x10
    19ae:	28 17       	cp	r18, r24
    19b0:	39 07       	cpc	r19, r25
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <main+0x7fc>
    19b4:	fe c1       	rjmp	.+1020   	; 0x1db2 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
    19b6:	0e 94 bb 08 	call	0x1176	; 0x1176 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush1;
    19ba:	80 91 f4 08 	lds	r24, 0x08F4
    19be:	82 95       	swap	r24
    19c0:	8f 70       	andi	r24, 0x0F	; 15
    19c2:	3d c0       	rjmp	.+122    	; 0x1a3e <main+0x884>
						}							
						break;
					case S5:
						if(printVar){
    19c4:	bb 20       	and	r11, r11
    19c6:	21 f0       	breq	.+8      	; 0x19d0 <main+0x816>
							serial_print_string("SENSOR 6");
    19c8:	8e e0       	ldi	r24, 0x0E	; 14
    19ca:	92 e0       	ldi	r25, 0x02	; 2
    19cc:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    19d0:	8f e0       	ldi	r24, 0x0F	; 15
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureBrush2){
    19d8:	80 91 f4 08 	lds	r24, 0x08F4
    19dc:	82 95       	swap	r24
    19de:	86 95       	lsr	r24
    19e0:	81 70       	andi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	2f 85       	ldd	r18, Y+15	; 0x0f
    19e6:	38 89       	ldd	r19, Y+16	; 0x10
    19e8:	28 17       	cp	r18, r24
    19ea:	39 07       	cpc	r19, r25
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <main+0x836>
    19ee:	e1 c1       	rjmp	.+962    	; 0x1db2 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
    19f0:	0e 94 bb 08 	call	0x1176	; 0x1176 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureBrush2;
    19f4:	80 91 f4 08 	lds	r24, 0x08F4
    19f8:	82 95       	swap	r24
    19fa:	86 95       	lsr	r24
    19fc:	87 70       	andi	r24, 0x07	; 7
    19fe:	1f c0       	rjmp	.+62     	; 0x1a3e <main+0x884>
						}							
						break;
					case S6:
						if(printVar){
    1a00:	bb 20       	and	r11, r11
    1a02:	21 f0       	breq	.+8      	; 0x1a0c <main+0x852>
							serial_print_string("SENSOR 7");
    1a04:	87 e1       	ldi	r24, 0x17	; 23
    1a06:	92 e0       	ldi	r25, 0x02	; 2
    1a08:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1a0c:	8f e0       	ldi	r24, 0x0F	; 15
    1a0e:	61 e0       	ldi	r22, 0x01	; 1
    1a10:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry1){
    1a14:	80 91 f4 08 	lds	r24, 0x08F4
    1a18:	82 95       	swap	r24
    1a1a:	86 95       	lsr	r24
    1a1c:	86 95       	lsr	r24
    1a1e:	81 70       	andi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	2f 85       	ldd	r18, Y+15	; 0x0f
    1a24:	38 89       	ldd	r19, Y+16	; 0x10
    1a26:	28 17       	cp	r18, r24
    1a28:	39 07       	cpc	r19, r25
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <main+0x874>
    1a2c:	c2 c1       	rjmp	.+900    	; 0x1db2 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry1);
    1a2e:	0e 94 bb 08 	call	0x1176	; 0x1176 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry1;
    1a32:	80 91 f4 08 	lds	r24, 0x08F4
    1a36:	82 95       	swap	r24
    1a38:	86 95       	lsr	r24
    1a3a:	86 95       	lsr	r24
    1a3c:	83 70       	andi	r24, 0x03	; 3
    1a3e:	81 70       	andi	r24, 0x01	; 1
    1a40:	1d c0       	rjmp	.+58     	; 0x1a7c <main+0x8c2>
						}							
						break;
					case S7:
						if(printVar){
    1a42:	bb 20       	and	r11, r11
    1a44:	21 f0       	breq	.+8      	; 0x1a4e <main+0x894>
							serial_print_string("SENSOR 8");
    1a46:	80 e2       	ldi	r24, 0x20	; 32
    1a48:	92 e0       	ldi	r25, 0x02	; 2
    1a4a:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						lcd_goto_xy(15,1);
    1a4e:	8f e0       	ldi	r24, 0x0F	; 15
    1a50:	61 e0       	ldi	r22, 0x01	; 1
    1a52:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
						if(lastVal !=u_inputByte0.bits_in_inputByte0.fixtureDry2){
    1a56:	80 91 f4 08 	lds	r24, 0x08F4
    1a5a:	88 1f       	adc	r24, r24
    1a5c:	88 27       	eor	r24, r24
    1a5e:	88 1f       	adc	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	2f 85       	ldd	r18, Y+15	; 0x0f
    1a64:	38 89       	ldd	r19, Y+16	; 0x10
    1a66:	28 17       	cp	r18, r24
    1a68:	39 07       	cpc	r19, r25
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <main+0x8b4>
    1a6c:	a2 c1       	rjmp	.+836    	; 0x1db2 <main+0xbf8>
							serial_print_int(u_inputByte0.bits_in_inputByte0.fixtureDry2);
    1a6e:	0e 94 bb 08 	call	0x1176	; 0x1176 <serial_print_int>
							lastVal = u_inputByte0.bits_in_inputByte0.fixtureDry2;
    1a72:	80 91 f4 08 	lds	r24, 0x08F4
    1a76:	88 1f       	adc	r24, r24
    1a78:	88 27       	eor	r24, r24
    1a7a:	88 1f       	adc	r24, r24
    1a7c:	48 2f       	mov	r20, r24
    1a7e:	50 e0       	ldi	r21, 0x00	; 0
    1a80:	58 8b       	std	Y+16, r21	; 0x10
    1a82:	4f 87       	std	Y+15, r20	; 0x0f
    1a84:	96 c1       	rjmp	.+812    	; 0x1db2 <main+0xbf8>
						}							
						break;
					case O0_ON:
						if(printVar){
    1a86:	bb 20       	and	r11, r11
    1a88:	21 f0       	breq	.+8      	; 0x1a92 <main+0x8d8>
							serial_print_string("AC POWER     ON ");
    1a8a:	89 e2       	ldi	r24, 0x29	; 41
    1a8c:	92 e0       	ldi	r25, 0x02	; 2
    1a8e:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1a92:	80 91 f8 08 	lds	r24, 0x08F8
    1a96:	8e 7f       	andi	r24, 0xFE	; 254
    1a98:	0d c0       	rjmp	.+26     	; 0x1ab4 <main+0x8fa>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
    1a9a:	80 91 f8 08 	lds	r24, 0x08F8
    1a9e:	81 60       	ori	r24, 0x01	; 1
    1aa0:	6c c0       	rjmp	.+216    	; 0x1b7a <main+0x9c0>
						break;
					case O1_ON:
						if(printVar){
    1aa2:	bb 20       	and	r11, r11
    1aa4:	21 f0       	breq	.+8      	; 0x1aae <main+0x8f4>
							serial_print_string("BLOWER       ON  ");
    1aa6:	8a e3       	ldi	r24, 0x3A	; 58
    1aa8:	92 e0       	ldi	r25, 0x02	; 2
    1aaa:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1aae:	80 91 f8 08 	lds	r24, 0x08F8
    1ab2:	8d 7f       	andi	r24, 0xFD	; 253
    1ab4:	80 93 f8 08 	sts	0x08F8, r24
    1ab8:	7c c1       	rjmp	.+760    	; 0x1db2 <main+0xbf8>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1aba:	80 91 f8 08 	lds	r24, 0x08F8
    1abe:	82 60       	ori	r24, 0x02	; 2
    1ac0:	5c c0       	rjmp	.+184    	; 0x1b7a <main+0x9c0>
						break;
					case O2_ON:
						if(printVar){
    1ac2:	bb 20       	and	r11, r11
    1ac4:	21 f0       	breq	.+8      	; 0x1ace <main+0x914>
							serial_print_string("PLATE STOP   ON ");
    1ac6:	8c e4       	ldi	r24, 0x4C	; 76
    1ac8:	92 e0       	ldi	r25, 0x02	; 2
    1aca:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1ace:	80 91 f8 08 	lds	r24, 0x08F8
    1ad2:	8b 7f       	andi	r24, 0xFB	; 251
    1ad4:	ef cf       	rjmp	.-34     	; 0x1ab4 <main+0x8fa>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1ad6:	80 91 f8 08 	lds	r24, 0x08F8
    1ada:	84 60       	ori	r24, 0x04	; 4
    1adc:	4e c0       	rjmp	.+156    	; 0x1b7a <main+0x9c0>
						break;
					case O3_ON:
						if(printVar){
    1ade:	bb 20       	and	r11, r11
    1ae0:	21 f0       	breq	.+8      	; 0x1aea <main+0x930>
							serial_print_string("PLATE RAISE  ON ");
    1ae2:	8d e5       	ldi	r24, 0x5D	; 93
    1ae4:	92 e0       	ldi	r25, 0x02	; 2
    1ae6:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1aea:	80 91 f8 08 	lds	r24, 0x08F8
    1aee:	87 7f       	andi	r24, 0xF7	; 247
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1af0:	80 61       	ori	r24, 0x10	; 16
    1af2:	e0 cf       	rjmp	.-64     	; 0x1ab4 <main+0x8fa>
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1af4:	80 91 f8 08 	lds	r24, 0x08F8
    1af8:	88 60       	ori	r24, 0x08	; 8
    1afa:	3f c0       	rjmp	.+126    	; 0x1b7a <main+0x9c0>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(printVar){
    1afc:	bb 20       	and	r11, r11
    1afe:	21 f0       	breq	.+8      	; 0x1b08 <main+0x94e>
							serial_print_string("PLATE LOWER  ON ");
    1b00:	8e e6       	ldi	r24, 0x6E	; 110
    1b02:	92 e0       	ldi	r25, 0x02	; 2
    1b04:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1b08:	80 91 f8 08 	lds	r24, 0x08F8
    1b0c:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1b0e:	8f 7e       	andi	r24, 0xEF	; 239
    1b10:	d1 cf       	rjmp	.-94     	; 0x1ab4 <main+0x8fa>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1b12:	80 91 f8 08 	lds	r24, 0x08F8
    1b16:	80 61       	ori	r24, 0x10	; 16
    1b18:	30 c0       	rjmp	.+96     	; 0x1b7a <main+0x9c0>
						break;
					case O5_ON:
						if(printVar){
    1b1a:	bb 20       	and	r11, r11
    1b1c:	21 f0       	breq	.+8      	; 0x1b26 <main+0x96c>
							serial_print_string("BRUSH1 RAISE ON ");
    1b1e:	8f e7       	ldi	r24, 0x7F	; 127
    1b20:	92 e0       	ldi	r25, 0x02	; 2
    1b22:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    1b26:	80 91 f8 08 	lds	r24, 0x08F8
    1b2a:	8f 7d       	andi	r24, 0xDF	; 223
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1b2c:	80 64       	ori	r24, 0x40	; 64
    1b2e:	c2 cf       	rjmp	.-124    	; 0x1ab4 <main+0x8fa>
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1b30:	80 91 f8 08 	lds	r24, 0x08F8
    1b34:	80 62       	ori	r24, 0x20	; 32
    1b36:	21 c0       	rjmp	.+66     	; 0x1b7a <main+0x9c0>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(printVar){
    1b38:	bb 20       	and	r11, r11
    1b3a:	21 f0       	breq	.+8      	; 0x1b44 <main+0x98a>
							serial_print_string("BRUSH1 LOWER ON ");
    1b3c:	80 e9       	ldi	r24, 0x90	; 144
    1b3e:	92 e0       	ldi	r25, 0x02	; 2
    1b40:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1b44:	80 91 f8 08 	lds	r24, 0x08F8
    1b48:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1b4a:	80 62       	ori	r24, 0x20	; 32
    1b4c:	b3 cf       	rjmp	.-154    	; 0x1ab4 <main+0x8fa>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1b4e:	80 91 f8 08 	lds	r24, 0x08F8
    1b52:	80 64       	ori	r24, 0x40	; 64
    1b54:	12 c0       	rjmp	.+36     	; 0x1b7a <main+0x9c0>
						break;
					case O7_ON:
						if(printVar){
    1b56:	bb 20       	and	r11, r11
    1b58:	21 f0       	breq	.+8      	; 0x1b62 <main+0x9a8>
							serial_print_string("BRUSH2 RAISE ON ");
    1b5a:	81 ea       	ldi	r24, 0xA1	; 161
    1b5c:	92 e0       	ldi	r25, 0x02	; 2
    1b5e:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1b62:	80 91 f8 08 	lds	r24, 0x08F8
    1b66:	8f 77       	andi	r24, 0x7F	; 127
    1b68:	80 93 f8 08 	sts	0x08F8, r24
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1b6c:	80 91 f6 08 	lds	r24, 0x08F6
    1b70:	81 60       	ori	r24, 0x01	; 1
    1b72:	5c c0       	rjmp	.+184    	; 0x1c2c <main+0xa72>
						break;
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1b74:	80 91 f8 08 	lds	r24, 0x08F8
    1b78:	80 68       	ori	r24, 0x80	; 128
    1b7a:	80 93 f8 08 	sts	0x08F8, r24
    1b7e:	1a c1       	rjmp	.+564    	; 0x1db4 <main+0xbfa>
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(printVar){
    1b80:	bb 20       	and	r11, r11
    1b82:	21 f0       	breq	.+8      	; 0x1b8c <main+0x9d2>
							serial_print_string("BRUSH2 LOWER ON ");
    1b84:	82 eb       	ldi	r24, 0xB2	; 178
    1b86:	92 e0       	ldi	r25, 0x02	; 2
    1b88:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1b8c:	80 91 f6 08 	lds	r24, 0x08F6
    1b90:	8e 7f       	andi	r24, 0xFE	; 254
    1b92:	80 93 f6 08 	sts	0x08F6, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1b96:	80 91 f8 08 	lds	r24, 0x08F8
    1b9a:	80 68       	ori	r24, 0x80	; 128
    1b9c:	8b cf       	rjmp	.-234    	; 0x1ab4 <main+0x8fa>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1b9e:	80 91 f6 08 	lds	r24, 0x08F6
    1ba2:	81 60       	ori	r24, 0x01	; 1
    1ba4:	49 c0       	rjmp	.+146    	; 0x1c38 <main+0xa7e>
						break;
					case O9_ON:
						if(printVar){
    1ba6:	bb 20       	and	r11, r11
    1ba8:	21 f0       	breq	.+8      	; 0x1bb2 <main+0x9f8>
							serial_print_string("PAPER RAISE  ON ");
    1baa:	83 ec       	ldi	r24, 0xC3	; 195
    1bac:	92 e0       	ldi	r25, 0x02	; 2
    1bae:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1bb2:	80 91 f6 08 	lds	r24, 0x08F6
    1bb6:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    1bb8:	82 60       	ori	r24, 0x02	; 2
    1bba:	38 c0       	rjmp	.+112    	; 0x1c2c <main+0xa72>
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1bbc:	80 91 f6 08 	lds	r24, 0x08F6
    1bc0:	84 60       	ori	r24, 0x04	; 4
    1bc2:	3a c0       	rjmp	.+116    	; 0x1c38 <main+0xa7e>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(printVar){
    1bc4:	bb 20       	and	r11, r11
    1bc6:	21 f0       	breq	.+8      	; 0x1bd0 <main+0xa16>
							serial_print_string("PAPER LOWER  ON ");
    1bc8:	84 ed       	ldi	r24, 0xD4	; 212
    1bca:	92 e0       	ldi	r25, 0x02	; 2
    1bcc:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1bd0:	80 91 f6 08 	lds	r24, 0x08F6
    1bd4:	8d 7f       	andi	r24, 0xFD	; 253
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1bd6:	84 60       	ori	r24, 0x04	; 4
    1bd8:	29 c0       	rjmp	.+82     	; 0x1c2c <main+0xa72>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    1bda:	80 91 f6 08 	lds	r24, 0x08F6
    1bde:	82 60       	ori	r24, 0x02	; 2
    1be0:	2b c0       	rjmp	.+86     	; 0x1c38 <main+0xa7e>
						break;
					case O11_ON:
						if(printVar){
    1be2:	bb 20       	and	r11, r11
    1be4:	21 f0       	breq	.+8      	; 0x1bee <main+0xa34>
							serial_print_string("AIR KNIFE    ON ");
    1be6:	85 ee       	ldi	r24, 0xE5	; 229
    1be8:	92 e0       	ldi	r25, 0x02	; 2
    1bea:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1bee:	80 91 f6 08 	lds	r24, 0x08F6
    1bf2:	87 7f       	andi	r24, 0xF7	; 247
    1bf4:	1b c0       	rjmp	.+54     	; 0x1c2c <main+0xa72>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1bf6:	80 91 f6 08 	lds	r24, 0x08F6
    1bfa:	88 60       	ori	r24, 0x08	; 8
    1bfc:	1d c0       	rjmp	.+58     	; 0x1c38 <main+0xa7e>
						break;
					case O12_ON:
                        if(printVar){
    1bfe:	bb 20       	and	r11, r11
    1c00:	21 f0       	breq	.+8      	; 0x1c0a <main+0xa50>
							serial_print_string("BRUSH1PUMP    ON ");
    1c02:	86 ef       	ldi	r24, 0xF6	; 246
    1c04:	92 e0       	ldi	r25, 0x02	; 2
    1c06:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;	
						}	
						u_outputByte1.bits_in_outputByte1.brush1Pump = 1;
    1c0a:	80 91 f6 08 	lds	r24, 0x08F6
    1c0e:	80 61       	ori	r24, 0x10	; 16
    1c10:	0d c0       	rjmp	.+26     	; 0x1c2c <main+0xa72>
					break;	
					case O12_OFF:
						u_outputByte1.bits_in_outputByte1.brush1Pump = 0;
    1c12:	80 91 f6 08 	lds	r24, 0x08F6
    1c16:	8f 7e       	andi	r24, 0xEF	; 239
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <main+0xa7e>
					break;						
					case O13_ON:
                        if(printVar){
    1c1a:	bb 20       	and	r11, r11
    1c1c:	21 f0       	breq	.+8      	; 0x1c26 <main+0xa6c>
							serial_print_string("BRUSH2PUMP    ON ");
    1c1e:	88 e0       	ldi	r24, 0x08	; 8
    1c20:	93 e0       	ldi	r25, 0x03	; 3
    1c22:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;	
						}	
						u_outputByte1.bits_in_outputByte1.brush2Pump = 1;
    1c26:	80 91 f6 08 	lds	r24, 0x08F6
    1c2a:	80 62       	ori	r24, 0x20	; 32
    1c2c:	80 93 f6 08 	sts	0x08F6, r24
    1c30:	c0 c0       	rjmp	.+384    	; 0x1db2 <main+0xbf8>
					break;	
					case O13_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Pump = 0;
    1c32:	80 91 f6 08 	lds	r24, 0x08F6
    1c36:	8f 7d       	andi	r24, 0xDF	; 223
    1c38:	80 93 f6 08 	sts	0x08F6, r24
    1c3c:	bb c0       	rjmp	.+374    	; 0x1db4 <main+0xbfa>
						break;								
					case M1_F:		// M1_F:    /* ALERT is there a case missing??? */
						if(printVar){
    1c3e:	bb 20       	and	r11, r11
    1c40:	21 f0       	breq	.+8      	; 0x1c4a <main+0xa90>
							serial_print_string("LOADING    FRONT");
    1c42:	8a e1       	ldi	r24, 0x1A	; 26
    1c44:	93 e0       	ldi	r25, 0x03	; 3
    1c46:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  // dir needs reversing on other side
    1c4a:	80 91 fa 08 	lds	r24, 0x08FA
    1c4e:	82 60       	ori	r24, 0x02	; 2
    1c50:	80 93 fa 08 	sts	0x08FA, r24
						plateLoadMotor =  1;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9b 83       	std	Y+3, r25	; 0x03
    1c5a:	8a 83       	std	Y+2, r24	; 0x02
    1c5c:	aa c0       	rjmp	.+340    	; 0x1db2 <main+0xbf8>
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1c5e:	80 91 fa 08 	lds	r24, 0x08FA
    1c62:	8d 7f       	andi	r24, 0xFD	; 253
    1c64:	80 93 fa 08 	sts	0x08FA, r24
						plateLoadMotor =  1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9b 83       	std	Y+3, r25	; 0x03
    1c6e:	8a 83       	std	Y+2, r24	; 0x02
    1c70:	a1 c0       	rjmp	.+322    	; 0x1db4 <main+0xbfa>
						break;
					case M2_F:
						if(printVar){
    1c72:	bb 20       	and	r11, r11
    1c74:	21 f0       	breq	.+8      	; 0x1c7e <main+0xac4>
							serial_print_string("DRIVE      FRONT");
    1c76:	8b e2       	ldi	r24, 0x2B	; 43
    1c78:	93 e0       	ldi	r25, 0x03	; 3
    1c7a:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1c7e:	80 91 fa 08 	lds	r24, 0x08FA
    1c82:	8f 7e       	andi	r24, 0xEF	; 239
    1c84:	80 93 fa 08 	sts	0x08FA, r24
						fixtureMotor =  1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	9d 83       	std	Y+5, r25	; 0x05
    1c8e:	8c 83       	std	Y+4, r24	; 0x04
						plateLoadMotor = 0;
    1c90:	1b 82       	std	Y+3, r1	; 0x03
    1c92:	1a 82       	std	Y+2, r1	; 0x02
    1c94:	bb 24       	eor	r11, r11
    1c96:	56 e2       	ldi	r21, 0x26	; 38
    1c98:	85 2e       	mov	r8, r21
    1c9a:	91 2c       	mov	r9, r1
    1c9c:	8b c0       	rjmp	.+278    	; 0x1db4 <main+0xbfa>
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
    1c9e:	80 91 fa 08 	lds	r24, 0x08FA
    1ca2:	80 61       	ori	r24, 0x10	; 16
    1ca4:	80 93 fa 08 	sts	0x08FA, r24
						fixtureMotor =  1;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	9d 83       	std	Y+5, r25	; 0x05
    1cae:	8c 83       	std	Y+4, r24	; 0x04
    1cb0:	81 c0       	rjmp	.+258    	; 0x1db4 <main+0xbfa>
						break;
					case M3_F:
						if(printVar){
    1cb2:	bb 20       	and	r11, r11
    1cb4:	21 f0       	breq	.+8      	; 0x1cbe <main+0xb04>
							serial_print_string("BRUSH1     FRONT");
    1cb6:	8c e3       	ldi	r24, 0x3C	; 60
    1cb8:	93 e0       	ldi	r25, 0x03	; 3
    1cba:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
    1cbe:	80 91 fa 08 	lds	r24, 0x08FA
    1cc2:	8f 77       	andi	r24, 0x7F	; 127
    1cc4:	80 93 fa 08 	sts	0x08FA, r24
						brush1Motor =  1;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9f 83       	std	Y+7, r25	; 0x07
    1cce:	8e 83       	std	Y+6, r24	; 0x06
						fixtureMotor = 0;
    1cd0:	1d 82       	std	Y+5, r1	; 0x05
    1cd2:	1c 82       	std	Y+4, r1	; 0x04
    1cd4:	bb 24       	eor	r11, r11
    1cd6:	48 e2       	ldi	r20, 0x28	; 40
    1cd8:	84 2e       	mov	r8, r20
    1cda:	91 2c       	mov	r9, r1
    1cdc:	6b c0       	rjmp	.+214    	; 0x1db4 <main+0xbfa>
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
    1cde:	80 91 fa 08 	lds	r24, 0x08FA
    1ce2:	80 68       	ori	r24, 0x80	; 128
    1ce4:	80 93 fa 08 	sts	0x08FA, r24
						brush1Motor =  1;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	9f 83       	std	Y+7, r25	; 0x07
    1cee:	8e 83       	std	Y+6, r24	; 0x06
    1cf0:	61 c0       	rjmp	.+194    	; 0x1db4 <main+0xbfa>
						break;
					case M4_F:
						if(printVar){
    1cf2:	bb 20       	and	r11, r11
    1cf4:	21 f0       	breq	.+8      	; 0x1cfe <main+0xb44>
							serial_print_string("BRUSH2     FRONT");
    1cf6:	8d e4       	ldi	r24, 0x4D	; 77
    1cf8:	93 e0       	ldi	r25, 0x03	; 3
    1cfa:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
    1cfe:	80 91 f5 08 	lds	r24, 0x08F5
    1d02:	8b 7f       	andi	r24, 0xFB	; 251
    1d04:	80 93 f5 08 	sts	0x08F5, r24
						brush2Motor =  1;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	99 87       	std	Y+9, r25	; 0x09
    1d0e:	88 87       	std	Y+8, r24	; 0x08
						brush1Motor = 0;
    1d10:	1f 82       	std	Y+7, r1	; 0x07
    1d12:	1e 82       	std	Y+6, r1	; 0x06
    1d14:	bb 24       	eor	r11, r11
    1d16:	3a e2       	ldi	r19, 0x2A	; 42
    1d18:	83 2e       	mov	r8, r19
    1d1a:	91 2c       	mov	r9, r1
    1d1c:	4b c0       	rjmp	.+150    	; 0x1db4 <main+0xbfa>
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
    1d1e:	80 91 f5 08 	lds	r24, 0x08F5
    1d22:	84 60       	ori	r24, 0x04	; 4
    1d24:	80 93 f5 08 	sts	0x08F5, r24
						brush2Motor =  1;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	99 87       	std	Y+9, r25	; 0x09
    1d2e:	88 87       	std	Y+8, r24	; 0x08
    1d30:	41 c0       	rjmp	.+130    	; 0x1db4 <main+0xbfa>
						break;
					case M5_F:
						if(printVar){
    1d32:	bb 20       	and	r11, r11
    1d34:	21 f0       	breq	.+8      	; 0x1d3e <main+0xb84>
							serial_print_string("PAPER      FRONT");
    1d36:	8e e5       	ldi	r24, 0x5E	; 94
    1d38:	93 e0       	ldi	r25, 0x03	; 3
    1d3a:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1d3e:	80 91 f5 08 	lds	r24, 0x08F5
    1d42:	8f 7d       	andi	r24, 0xDF	; 223
    1d44:	80 93 f5 08 	sts	0x08F5, r24
						paperTowelMotor =  1;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9b 87       	std	Y+11, r25	; 0x0b
    1d4e:	8a 87       	std	Y+10, r24	; 0x0a
						brush2Motor = 0;
    1d50:	19 86       	std	Y+9, r1	; 0x09
    1d52:	18 86       	std	Y+8, r1	; 0x08
    1d54:	bb 24       	eor	r11, r11
    1d56:	2c e2       	ldi	r18, 0x2C	; 44
    1d58:	82 2e       	mov	r8, r18
    1d5a:	91 2c       	mov	r9, r1
    1d5c:	2b c0       	rjmp	.+86     	; 0x1db4 <main+0xbfa>
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
    1d5e:	80 91 f5 08 	lds	r24, 0x08F5
    1d62:	80 62       	ori	r24, 0x20	; 32
    1d64:	80 93 f5 08 	sts	0x08F5, r24
						paperTowelMotor =  1;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9b 87       	std	Y+11, r25	; 0x0b
    1d6e:	8a 87       	std	Y+10, r24	; 0x0a
    1d70:	21 c0       	rjmp	.+66     	; 0x1db4 <main+0xbfa>
						break;
					case M2_AND_M3:
						if(printVar){
    1d72:	bb 20       	and	r11, r11
    1d74:	21 f0       	breq	.+8      	; 0x1d7e <main+0xbc4>
							serial_print_string("FIXTURE & BRUSH1");
    1d76:	8f e6       	ldi	r24, 0x6F	; 111
    1d78:	93 e0       	ldi	r25, 0x03	; 3
    1d7a:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	9d 83       	std	Y+5, r25	; 0x05
    1d84:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 1;
    1d86:	9f 83       	std	Y+7, r25	; 0x07
    1d88:	8e 83       	std	Y+6, r24	; 0x06
    1d8a:	13 c0       	rjmp	.+38     	; 0x1db2 <main+0xbf8>
						break;
					case M2_AND_M4:
						if(printVar){
    1d8c:	bb 20       	and	r11, r11
    1d8e:	21 f0       	breq	.+8      	; 0x1d98 <main+0xbde>
							serial_print_string("FIXTURE & BRUSH2");
    1d90:	80 e8       	ldi	r24, 0x80	; 128
    1d92:	93 e0       	ldi	r25, 0x03	; 3
    1d94:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
							printVar = false;
						}
						fixtureMotor = 1;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9d 83       	std	Y+5, r25	; 0x05
    1d9e:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 0;
    1da0:	1f 82       	std	Y+7, r1	; 0x07
    1da2:	1e 82       	std	Y+6, r1	; 0x06
						brush2Motor = 1;
    1da4:	99 87       	std	Y+9, r25	; 0x09
    1da6:	88 87       	std	Y+8, r24	; 0x08
    1da8:	bb 24       	eor	r11, r11
    1daa:	9f e2       	ldi	r25, 0x2F	; 47
    1dac:	89 2e       	mov	r8, r25
    1dae:	91 2c       	mov	r9, r1
    1db0:	01 c0       	rjmp	.+2      	; 0x1db4 <main+0xbfa>
    1db2:	bb 24       	eor	r11, r11
						break;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1db4:	4a 81       	ldd	r20, Y+2	; 0x02
    1db6:	5b 81       	ldd	r21, Y+3	; 0x03
    1db8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dba:	3d 81       	ldd	r19, Y+5	; 0x05
    1dbc:	0e 81       	ldd	r16, Y+6	; 0x06
    1dbe:	1f 81       	ldd	r17, Y+7	; 0x07
    1dc0:	e8 84       	ldd	r14, Y+8	; 0x08
    1dc2:	f9 84       	ldd	r15, Y+9	; 0x09
    1dc4:	ca 84       	ldd	r12, Y+10	; 0x0a
    1dc6:	db 84       	ldd	r13, Y+11	; 0x0b
    1dc8:	c3 01       	movw	r24, r6
    1dca:	b2 01       	movw	r22, r4
    1dcc:	0e 94 3d 07 	call	0xe7a	; 0xe7a <motor_and_write>

				serial_check(); counter++;
    1dd0:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <serial_check>
    1dd4:	80 91 20 04 	lds	r24, 0x0420
    1dd8:	90 91 21 04 	lds	r25, 0x0421
    1ddc:	6f 93       	push	r22
    1dde:	64 e0       	ldi	r22, 0x04	; 4
    1de0:	6a 95       	dec	r22
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <main+0xc26>
    1de4:	6f 91       	pop	r22
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	c9 f7       	brne	.-14     	; 0x1ddc <main+0xc22>
			counter = 0;
			//clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
    1dea:	50 e3       	ldi	r21, 0x30	; 48
    1dec:	85 16       	cp	r8, r21
    1dee:	91 04       	cpc	r9, r1
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <main+0xc3a>
    1df2:	39 c6       	rjmp	.+3186   	; 0x2a66 <main+0x18ac>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    1df4:	08 94       	sec
    1df6:	61 1c       	adc	r6, r1
    1df8:	71 1c       	adc	r7, r1
    1dfa:	c1 cb       	rjmp	.-2174   	; 0x157e <main+0x3c4>
		}
		else{										//If switch is set to Run Mode
		
		bool printVar = true;

		serial_print_string("NORMAL");
    1dfc:	81 e9       	ldi	r24, 0x91	; 145
    1dfe:	93 e0       	ldi	r25, 0x03	; 3
    1e00:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
		delay_ms(1000);
    1e04:	88 ee       	ldi	r24, 0xE8	; 232
    1e06:	93 e0       	ldi	r25, 0x03	; 3
    1e08:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <delay_ms>
		
		//clear();
		serial_print_string("SELECT CYCLE");
    1e0c:	88 e9       	ldi	r24, 0x98	; 152
    1e0e:	93 e0       	ldi	r25, 0x03	; 3
    1e10:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
		delay_ms(1000);
    1e14:	88 ee       	ldi	r24, 0xE8	; 232
    1e16:	93 e0       	ldi	r25, 0x03	; 3
    1e18:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <delay_ms>
		int sel1 = !is_digital_input_high(IO_D1);
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e22:	ee 24       	eor	r14, r14
    1e24:	ff 24       	eor	r15, r15
    1e26:	88 23       	and	r24, r24
    1e28:	19 f4       	brne	.+6      	; 0x1e30 <main+0xc76>
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	e8 2e       	mov	r14, r24
    1e2e:	f1 2c       	mov	r15, r1
		int sel2 = !is_digital_input_high(IO_D2);
    1e30:	82 e0       	ldi	r24, 0x02	; 2
    1e32:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e36:	00 e0       	ldi	r16, 0x00	; 0
    1e38:	10 e0       	ldi	r17, 0x00	; 0
    1e3a:	88 23       	and	r24, r24
    1e3c:	11 f4       	brne	.+4      	; 0x1e42 <main+0xc88>
    1e3e:	01 e0       	ldi	r16, 0x01	; 1
    1e40:	10 e0       	ldi	r17, 0x00	; 0
    1e42:	cc 24       	eor	r12, r12
    1e44:	dd 24       	eor	r13, r13
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			if(sel1 != is_digital_input_high(IO_D1) || sel2 != is_digital_input_high(IO_D2)){
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	e8 16       	cp	r14, r24
    1e50:	f9 06       	cpc	r15, r25
    1e52:	39 f4       	brne	.+14     	; 0x1e62 <main+0xca8>
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	08 17       	cp	r16, r24
    1e5e:	19 07       	cpc	r17, r25
    1e60:	59 f1       	breq	.+86     	; 0x1eb8 <main+0xcfe>
				if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2))
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e68:	88 23       	and	r24, r24
    1e6a:	41 f4       	brne	.+16     	; 0x1e7c <main+0xcc2>
    1e6c:	82 e0       	ldi	r24, 0x02	; 2
    1e6e:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e72:	88 23       	and	r24, r24
    1e74:	19 f4       	brne	.+6      	; 0x1e7c <main+0xcc2>
					serial_print_string("FIRST B");
    1e76:	85 ea       	ldi	r24, 0xA5	; 165
    1e78:	93 e0       	ldi	r25, 0x03	; 3
    1e7a:	1c c0       	rjmp	.+56     	; 0x1eb4 <main+0xcfa>
				else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2))
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e82:	88 23       	and	r24, r24
    1e84:	41 f0       	breq	.+16     	; 0x1e96 <main+0xcdc>
    1e86:	82 e0       	ldi	r24, 0x02	; 2
    1e88:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e8c:	88 23       	and	r24, r24
    1e8e:	19 f4       	brne	.+6      	; 0x1e96 <main+0xcdc>
					serial_print_string("SECOND B");
    1e90:	8d ea       	ldi	r24, 0xAD	; 173
    1e92:	93 e0       	ldi	r25, 0x03	; 3
    1e94:	0f c0       	rjmp	.+30     	; 0x1eb4 <main+0xcfa>
				else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2))
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1e9c:	88 23       	and	r24, r24
    1e9e:	41 f4       	brne	.+16     	; 0x1eb0 <main+0xcf6>
    1ea0:	82 e0       	ldi	r24, 0x02	; 2
    1ea2:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1ea6:	88 23       	and	r24, r24
    1ea8:	19 f0       	breq	.+6      	; 0x1eb0 <main+0xcf6>
					serial_print_string("BOTH B");
    1eaa:	86 eb       	ldi	r24, 0xB6	; 182
    1eac:	93 e0       	ldi	r25, 0x03	; 3
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <main+0xcfa>
				else
					serial_print_string("STEP");
    1eb0:	8d eb       	ldi	r24, 0xBD	; 189
    1eb2:	93 e0       	ldi	r25, 0x03	; 3
    1eb4:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					state = 0;          /* added to reset state counter to zero*/
			}
			sel1 = is_digital_input_high(IO_D1);
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1ebe:	08 2f       	mov	r16, r24
			sel2 = is_digital_input_high(IO_D2);
    1ec0:	82 e0       	ldi	r24, 0x02	; 2
    1ec2:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1ec6:	18 2f       	mov	r17, r24
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1ec8:	c6 01       	movw	r24, r12
    1eca:	be 01       	movw	r22, r28
    1ecc:	64 5f       	subi	r22, 0xF4	; 244
    1ece:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed0:	0e 94 65 04 	call	0x8ca	; 0x8ca <button_debounce>
    1ed4:	e0 91 20 04 	lds	r30, 0x0420
    1ed8:	f0 91 21 04 	lds	r31, 0x0421
    1edc:	6f 93       	push	r22
    1ede:	64 e0       	ldi	r22, 0x04	; 4
    1ee0:	6a 95       	dec	r22
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <main+0xd26>
    1ee4:	6f 91       	pop	r22
    1ee6:	31 97       	sbiw	r30, 0x01	; 1
    1ee8:	c9 f7       	brne	.-14     	; 0x1edc <main+0xd22>
		serial_print_string("SELECT CYCLE");
		delay_ms(1000);
		int sel1 = !is_digital_input_high(IO_D1);
		int sel2 = !is_digital_input_high(IO_D2);
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    1eea:	88 23       	and	r24, r24
    1eec:	41 f4       	brne	.+16     	; 0x1efe <main+0xd44>
					serial_print_string("BOTH B");
				else
					serial_print_string("STEP");
					state = 0;          /* added to reset state counter to zero*/
			}
			sel1 = is_digital_input_high(IO_D1);
    1eee:	e0 2e       	mov	r14, r16
    1ef0:	ff 24       	eor	r15, r15
			sel2 = is_digital_input_high(IO_D2);
    1ef2:	01 2f       	mov	r16, r17
    1ef4:	10 e0       	ldi	r17, 0x00	; 0
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
			counter++;
    1ef6:	08 94       	sec
    1ef8:	c1 1c       	adc	r12, r1
    1efa:	d1 1c       	adc	r13, r1
    1efc:	a4 cf       	rjmp	.-184    	; 0x1e46 <main+0xc8c>
			delay_us(delayTimeMicroSeconds);
		}
		buttonTriggered = false;
		counter = 0;
		//clear();
		serial_print_string("CYCLE:");
    1efe:	82 ec       	ldi	r24, 0xC2	; 194
    1f00:	93 e0       	ldi	r25, 0x03	; 3
    1f02:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>

		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1f06:	80 91 fa 08 	lds	r24, 0x08FA
    1f0a:	80 62       	ori	r24, 0x20	; 32
    1f0c:	80 93 fa 08 	sts	0x08FA, r24

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1f16:	88 23       	and	r24, r24
    1f18:	09 f0       	breq	.+2      	; 0x1f1c <main+0xd62>
    1f1a:	79 c1       	rjmp	.+754    	; 0x220e <main+0x1054>
    1f1c:	82 e0       	ldi	r24, 0x02	; 2
    1f1e:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    1f22:	88 23       	and	r24, r24
    1f24:	09 f0       	breq	.+2      	; 0x1f28 <main+0xd6e>
    1f26:	73 c1       	rjmp	.+742    	; 0x220e <main+0x1054>
			lcd_goto_xy(7,0);
    1f28:	87 e0       	ldi	r24, 0x07	; 7
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
			serial_print_string("FIRST B");    //start of first brush cycle
    1f30:	85 ea       	ldi	r24, 0xA5	; 165
    1f32:	93 e0       	ldi	r25, 0x03	; 3
    1f34:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9d 83       	std	Y+5, r25	; 0x05
    1f3e:	8c 83       	std	Y+4, r24	; 0x04
    1f40:	80 91 fa 08 	lds	r24, 0x08FA
    1f44:	80 62       	ori	r24, 0x20	; 32
    1f46:	80 93 fa 08 	sts	0x08FA, r24
    1f4a:	88 24       	eor	r8, r8
    1f4c:	99 24       	eor	r9, r9
    1f4e:	66 24       	eor	r6, r6
    1f50:	77 24       	eor	r7, r7
    1f52:	44 24       	eor	r4, r4
    1f54:	55 24       	eor	r5, r5
    1f56:	22 24       	eor	r2, r2
    1f58:	23 94       	inc	r2
    1f5a:	33 24       	eor	r3, r3
    1f5c:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1f5e:	84 e4       	ldi	r24, 0x44	; 68
    1f60:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				i2c_write(0x0);								// write command byte
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1f6a:	85 e4       	ldi	r24, 0x45	; 69
    1f6c:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1f70:	0e 94 08 01 	call	0x210	; 0x210 <i2c_readAck>
    1f74:	80 93 f4 08 	sts	0x08F4, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1f78:	0e 94 12 01 	call	0x224	; 0x224 <i2c_readNak>
    1f7c:	80 93 f7 08 	sts	0x08F7, r24
  	 	     	i2c_stop();								// set stop condition = release bus 		
    1f80:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
				
				if(state != INIT && printVar){
    1f84:	81 14       	cp	r8, r1
    1f86:	91 04       	cpc	r9, r1
    1f88:	a9 f1       	breq	.+106    	; 0x1ff4 <main+0xe3a>
    1f8a:	33 20       	and	r3, r3
    1f8c:	99 f1       	breq	.+102    	; 0x1ff4 <main+0xe3a>
					lcd_goto_xy(6,1);
    1f8e:	86 e0       	ldi	r24, 0x06	; 6
    1f90:	61 e0       	ldi	r22, 0x01	; 1
    1f92:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
					serial_print_string("     ");
    1f96:	89 ec       	ldi	r24, 0xC9	; 201
    1f98:	93 e0       	ldi	r25, 0x03	; 3
    1f9a:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					lcd_goto_xy(0,1);
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	61 e0       	ldi	r22, 0x01	; 1
    1fa2:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
					serial_print_string_noCRLF("STATE: ");
    1fa6:	8f ec       	ldi	r24, 0xCF	; 207
    1fa8:	93 e0       	ldi	r25, 0x03	; 3
    1faa:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <serial_print_string_noCRLF>
					serial_print_int(state);
    1fae:	c4 01       	movw	r24, r8
    1fb0:	0e 94 bb 08 	call	0x1176	; 0x1176 <serial_print_int>
					serial_print_string_noCRLF("=> ");
    1fb4:	87 ed       	ldi	r24, 0xD7	; 215
    1fb6:	93 e0       	ldi	r25, 0x03	; 3
    1fb8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <serial_print_string_noCRLF>
					serial_print_string((char *)run_states_msg_list[state]);
    1fbc:	f4 01       	movw	r30, r8
    1fbe:	ee 0f       	add	r30, r30
    1fc0:	ff 1f       	adc	r31, r31
    1fc2:	e3 5c       	subi	r30, 0xC3	; 195
    1fc4:	f7 4f       	sbci	r31, 0xF7	; 247
    1fc6:	80 81       	ld	r24, Z
    1fc8:	91 81       	ldd	r25, Z+1	; 0x01
    1fca:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					serial_print_string(" ");
    1fce:	8b ed       	ldi	r24, 0xDB	; 219
    1fd0:	93 e0       	ldi	r25, 0x03	; 3
    1fd2:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					serial_print_string_noCRLF("Counter:");
    1fd6:	8d ed       	ldi	r24, 0xDD	; 221
    1fd8:	93 e0       	ldi	r25, 0x03	; 3
    1fda:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <serial_print_string_noCRLF>
					serial_print_int(counter/stepFactor);      // want to print number of steps to reach here
    1fde:	60 91 22 04 	lds	r22, 0x0422
    1fe2:	70 91 23 04 	lds	r23, 0x0423
    1fe6:	c3 01       	movw	r24, r6
    1fe8:	0e 94 ed 21 	call	0x43da	; 0x43da <__divmodhi4>
    1fec:	cb 01       	movw	r24, r22
    1fee:	0e 94 bb 08 	call	0x1176	; 0x1176 <serial_print_int>
    1ff2:	33 24       	eor	r3, r3
					printVar = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1ff4:	c3 01       	movw	r24, r6
    1ff6:	be 01       	movw	r22, r28
    1ff8:	64 5f       	subi	r22, 0xF4	; 244
    1ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffc:	0e 94 65 04 	call	0x8ca	; 0x8ca <button_debounce>
    2000:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    2002:	c4 01       	movw	r24, r8
    2004:	a3 01       	movw	r20, r6
    2006:	92 01       	movw	r18, r4
    2008:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <init_trans>
    200c:	88 23       	and	r24, r24
    200e:	31 f0       	breq	.+12     	; 0x201c <main+0xe62>
					buttonTriggered = false;
					state ++;
    2010:	08 94       	sec
    2012:	81 1c       	adc	r8, r1
    2014:	91 1c       	adc	r9, r1
    2016:	23 01       	movw	r4, r6
    2018:	33 24       	eor	r3, r3
    201a:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    201c:	c4 01       	movw	r24, r8
    201e:	b3 01       	movw	r22, r6
    2020:	a2 01       	movw	r20, r4
    2022:	0e 94 5b 05 	call	0xab6	; 0xab6 <firstB_trans>
    2026:	88 23       	and	r24, r24
    2028:	91 f0       	breq	.+36     	; 0x204e <main+0xe94>
					serial_print_string("firstB_trans: ");
    202a:	86 ee       	ldi	r24, 0xE6	; 230
    202c:	93 e0       	ldi	r25, 0x03	; 3
    202e:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					//serial_print_int(counter);      // want to print number of steps to reach here
					state ++;
    2032:	08 94       	sec
    2034:	81 1c       	adc	r8, r1
    2036:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    2038:	8c e0       	ldi	r24, 0x0C	; 12
    203a:	88 16       	cp	r8, r24
    203c:	91 04       	cpc	r9, r1
    203e:	51 f1       	breq	.+84     	; 0x2094 <main+0xeda>
    2040:	90 e1       	ldi	r25, 0x10	; 16
    2042:	89 16       	cp	r8, r25
    2044:	91 04       	cpc	r9, r1
    2046:	31 f1       	breq	.+76     	; 0x2094 <main+0xeda>
    2048:	23 01       	movw	r4, r6
    204a:	33 24       	eor	r3, r3
    204c:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}

				if(state == B1STOP2 && counter - counterRef > pWait){
    204e:	21 e1       	ldi	r18, 0x11	; 17
    2050:	82 16       	cp	r8, r18
    2052:	91 04       	cpc	r9, r1
    2054:	71 f4       	brne	.+28     	; 0x2072 <main+0xeb8>
    2056:	93 01       	movw	r18, r6
    2058:	24 19       	sub	r18, r4
    205a:	35 09       	sbc	r19, r5
    205c:	80 91 06 04 	lds	r24, 0x0406
    2060:	90 91 07 04 	lds	r25, 0x0407
    2064:	82 17       	cp	r24, r18
    2066:	93 07       	cpc	r25, r19
    2068:	bc f4       	brge	.+46     	; 0x2098 <main+0xede>
    206a:	23 01       	movw	r4, r6
    206c:	33 24       	eor	r3, r3
    206e:	33 94       	inc	r3
    2070:	04 c0       	rjmp	.+8      	; 0x207a <main+0xec0>
					counterRef = counter;
					printVar = true;
				}

				 
				if(state == MOVED1 /*&& counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole*/ && u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0){
    2072:	3c e1       	ldi	r19, 0x1C	; 28
    2074:	83 16       	cp	r8, r19
    2076:	91 04       	cpc	r9, r1
    2078:	79 f4       	brne	.+30     	; 0x2098 <main+0xede>
    207a:	80 91 f4 08 	lds	r24, 0x08F4
    207e:	86 fd       	sbrc	r24, 6
    2080:	05 c0       	rjmp	.+10     	; 0x208c <main+0xed2>
    2082:	23 01       	movw	r4, r6
    2084:	1d e1       	ldi	r17, 0x1D	; 29
    2086:	81 2e       	mov	r8, r17
    2088:	91 2c       	mov	r9, r1
    208a:	04 c0       	rjmp	.+8      	; 0x2094 <main+0xeda>
    208c:	bc e1       	ldi	r27, 0x1C	; 28
    208e:	8b 2e       	mov	r8, r27
    2090:	91 2c       	mov	r9, r1
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <main+0xede>
    2094:	33 24       	eor	r3, r3
    2096:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef)){
    2098:	c4 01       	movw	r24, r8
    209a:	b3 01       	movw	r22, r6
    209c:	a2 01       	movw	r20, r4
    209e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <dry_trans>
    20a2:	88 23       	and	r24, r24
    20a4:	31 f0       	breq	.+12     	; 0x20b2 <main+0xef8>
					state ++;
    20a6:	08 94       	sec
    20a8:	81 1c       	adc	r8, r1
    20aa:	91 1c       	adc	r9, r1
    20ac:	23 01       	movw	r4, r6
    20ae:	33 24       	eor	r3, r3
    20b0:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    20b2:	45 e2       	ldi	r20, 0x25	; 37
    20b4:	84 16       	cp	r8, r20
    20b6:	91 04       	cpc	r9, r1
    20b8:	41 f4       	brne	.+16     	; 0x20ca <main+0xf10>
    20ba:	c3 01       	movw	r24, r6
    20bc:	84 19       	sub	r24, r4
    20be:	95 09       	sbc	r25, r5
    20c0:	0b 97       	sbiw	r24, 0x0b	; 11
    20c2:	1c f0       	brlt	.+6      	; 0x20ca <main+0xf10>
    20c4:	a6 e2       	ldi	r26, 0x26	; 38
    20c6:	8a 2e       	mov	r8, r26
    20c8:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    20ca:	c4 01       	movw	r24, r8
    20cc:	b3 01       	movw	r22, r6
    20ce:	ae 01       	movw	r20, r28
    20d0:	4e 5f       	subi	r20, 0xFE	; 254
    20d2:	5f 4f       	sbci	r21, 0xFF	; 255
    20d4:	9e 01       	movw	r18, r28
    20d6:	2c 5f       	subi	r18, 0xFC	; 252
    20d8:	3f 4f       	sbci	r19, 0xFF	; 255
    20da:	8e 01       	movw	r16, r28
    20dc:	0a 5f       	subi	r16, 0xFA	; 250
    20de:	1f 4f       	sbci	r17, 0xFF	; 255
    20e0:	f8 e0       	ldi	r31, 0x08	; 8
    20e2:	ef 2e       	mov	r14, r31
    20e4:	f1 2c       	mov	r15, r1
    20e6:	ec 0e       	add	r14, r28
    20e8:	fd 1e       	adc	r15, r29
    20ea:	ea e0       	ldi	r30, 0x0A	; 10
    20ec:	ce 2e       	mov	r12, r30
    20ee:	d1 2c       	mov	r13, r1
    20f0:	cc 0e       	add	r12, r28
    20f2:	dd 1e       	adc	r13, r29
    20f4:	5e 01       	movw	r10, r28
    20f6:	08 94       	sec
    20f8:	a1 1c       	adc	r10, r1
    20fa:	b1 1c       	adc	r11, r1
    20fc:	0e 94 1a 08 	call	0x1034	; 0x1034 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2100:	c4 01       	movw	r24, r8
    2102:	b3 01       	movw	r22, r6
    2104:	ae 01       	movw	r20, r28
    2106:	4e 5f       	subi	r20, 0xFE	; 254
    2108:	5f 4f       	sbci	r21, 0xFF	; 255
    210a:	9e 01       	movw	r18, r28
    210c:	2c 5f       	subi	r18, 0xFC	; 252
    210e:	3f 4f       	sbci	r19, 0xFF	; 255
    2110:	8e 01       	movw	r16, r28
    2112:	0a 5f       	subi	r16, 0xFA	; 250
    2114:	1f 4f       	sbci	r17, 0xFF	; 255
    2116:	b8 e0       	ldi	r27, 0x08	; 8
    2118:	eb 2e       	mov	r14, r27
    211a:	f1 2c       	mov	r15, r1
    211c:	ec 0e       	add	r14, r28
    211e:	fd 1e       	adc	r15, r29
    2120:	aa e0       	ldi	r26, 0x0A	; 10
    2122:	ca 2e       	mov	r12, r26
    2124:	d1 2c       	mov	r13, r1
    2126:	cc 0e       	add	r12, r28
    2128:	dd 1e       	adc	r13, r29
    212a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <brush1_action>
				if(state == B1STOP2){
    212e:	51 e1       	ldi	r21, 0x11	; 17
    2130:	85 16       	cp	r8, r21
    2132:	91 04       	cpc	r9, r1
    2134:	59 f4       	brne	.+22     	; 0x214c <main+0xf92>
					brush1Motor = 0;
    2136:	1f 82       	std	Y+7, r1	; 0x07
    2138:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    213a:	1d 82       	std	Y+5, r1	; 0x05
    213c:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    213e:	80 91 f8 08 	lds	r24, 0x08F8
    2142:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2144:	80 62       	ori	r24, 0x20	; 32
    2146:	80 93 f8 08 	sts	0x08F8, r24
    214a:	12 c0       	rjmp	.+36     	; 0x2170 <main+0xfb6>
				}
				if(state == MOVED1){
    214c:	8c e1       	ldi	r24, 0x1C	; 28
    214e:	88 16       	cp	r8, r24
    2150:	91 04       	cpc	r9, r1
    2152:	71 f4       	brne	.+28     	; 0x2170 <main+0xfb6>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2154:	80 91 fa 08 	lds	r24, 0x08FA
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2158:	21 e0       	ldi	r18, 0x01	; 1
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	3d 83       	std	Y+5, r19	; 0x05
    215e:	2c 83       	std	Y+4, r18	; 0x04
    2160:	80 63       	ori	r24, 0x30	; 48
    2162:	80 93 fa 08 	sts	0x08FA, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    2166:	80 91 f5 08 	lds	r24, 0x08F5
    216a:	8e 7f       	andi	r24, 0xFE	; 254
    216c:	80 93 f5 08 	sts	0x08F5, r24
				}
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2170:	c4 01       	movw	r24, r8
    2172:	b3 01       	movw	r22, r6
    2174:	ae 01       	movw	r20, r28
    2176:	4e 5f       	subi	r20, 0xFE	; 254
    2178:	5f 4f       	sbci	r21, 0xFF	; 255
    217a:	9e 01       	movw	r18, r28
    217c:	2c 5f       	subi	r18, 0xFC	; 252
    217e:	3f 4f       	sbci	r19, 0xFF	; 255
    2180:	8e 01       	movw	r16, r28
    2182:	0a 5f       	subi	r16, 0xFA	; 250
    2184:	1f 4f       	sbci	r17, 0xFF	; 255
    2186:	f8 e0       	ldi	r31, 0x08	; 8
    2188:	ef 2e       	mov	r14, r31
    218a:	f1 2c       	mov	r15, r1
    218c:	ec 0e       	add	r14, r28
    218e:	fd 1e       	adc	r15, r29
    2190:	ea e0       	ldi	r30, 0x0A	; 10
    2192:	ce 2e       	mov	r12, r30
    2194:	d1 2c       	mov	r13, r1
    2196:	cc 0e       	add	r12, r28
    2198:	dd 1e       	adc	r13, r29
    219a:	0e 94 a6 03 	call	0x74c	; 0x74c <dry_action>
				if(state == END){
    219e:	35 e2       	ldi	r19, 0x25	; 37
    21a0:	83 16       	cp	r8, r19
    21a2:	91 04       	cpc	r9, r1
    21a4:	81 f4       	brne	.+32     	; 0x21c6 <main+0x100c>
					plateLoadMotor = 1;      // may need reversing on other side?
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	50 e0       	ldi	r21, 0x00	; 0
    21aa:	5b 83       	std	Y+3, r21	; 0x03
    21ac:	4a 83       	std	Y+2, r20	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    21ae:	80 91 fa 08 	lds	r24, 0x08FA
    21b2:	8b 7f       	andi	r24, 0xFB	; 251
    21b4:	80 93 fa 08 	sts	0x08FA, r24
					if(print35 == 1){
    21b8:	22 20       	and	r2, r2
    21ba:	29 f0       	breq	.+10     	; 0x21c6 <main+0x100c>
						//clear();
						serial_print_string("END OF CYCLE");
    21bc:	85 ef       	ldi	r24, 0xF5	; 245
    21be:	93 e0       	ldi	r25, 0x03	; 3
    21c0:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
    21c4:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    21c6:	4a 81       	ldd	r20, Y+2	; 0x02
    21c8:	5b 81       	ldd	r21, Y+3	; 0x03
    21ca:	2c 81       	ldd	r18, Y+4	; 0x04
    21cc:	3d 81       	ldd	r19, Y+5	; 0x05
    21ce:	0e 81       	ldd	r16, Y+6	; 0x06
    21d0:	1f 81       	ldd	r17, Y+7	; 0x07
    21d2:	e8 84       	ldd	r14, Y+8	; 0x08
    21d4:	f9 84       	ldd	r15, Y+9	; 0x09
    21d6:	ca 84       	ldd	r12, Y+10	; 0x0a
    21d8:	db 84       	ldd	r13, Y+11	; 0x0b
    21da:	c3 01       	movw	r24, r6
    21dc:	b2 01       	movw	r22, r4
    21de:	0e 94 3d 07 	call	0xe7a	; 0xe7a <motor_and_write>

				serial_check(); counter++;
    21e2:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <serial_check>
    21e6:	80 91 20 04 	lds	r24, 0x0420
    21ea:	90 91 21 04 	lds	r25, 0x0421
    21ee:	6f 93       	push	r22
    21f0:	64 e0       	ldi	r22, 0x04	; 4
    21f2:	6a 95       	dec	r22
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <main+0x1038>
    21f6:	6f 91       	pop	r22
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	c9 f7       	brne	.-14     	; 0x21ee <main+0x1034>

		if(!is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("FIRST B");    //start of first brush cycle
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    21fc:	56 e2       	ldi	r21, 0x26	; 38
    21fe:	85 16       	cp	r8, r21
    2200:	91 04       	cpc	r9, r1
    2202:	09 f4       	brne	.+2      	; 0x2206 <main+0x104c>
    2204:	30 c4       	rjmp	.+2144   	; 0x2a66 <main+0x18ac>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    2206:	08 94       	sec
    2208:	61 1c       	adc	r6, r1
    220a:	71 1c       	adc	r7, r1
    220c:	a8 ce       	rjmp	.-688    	; 0x1f5e <main+0xda4>
   		 	}     // end of first brush while cycle
			}				
					   


		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    2214:	88 23       	and	r24, r24
    2216:	09 f4       	brne	.+2      	; 0x221a <main+0x1060>
    2218:	32 c1       	rjmp	.+612    	; 0x247e <main+0x12c4>
    221a:	82 e0       	ldi	r24, 0x02	; 2
    221c:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    2220:	88 23       	and	r24, r24
    2222:	09 f0       	breq	.+2      	; 0x2226 <main+0x106c>
    2224:	2c c1       	rjmp	.+600    	; 0x247e <main+0x12c4>
			lcd_goto_xy(7,0);
    2226:	87 e0       	ldi	r24, 0x07	; 7
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
			serial_print_string("SECOND B");
    222e:	8d ea       	ldi	r24, 0xAD	; 173
    2230:	93 e0       	ldi	r25, 0x03	; 3
    2232:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9d 83       	std	Y+5, r25	; 0x05
    223c:	8c 83       	std	Y+4, r24	; 0x04
    223e:	80 91 fa 08 	lds	r24, 0x08FA
    2242:	80 62       	ori	r24, 0x20	; 32
    2244:	80 93 fa 08 	sts	0x08FA, r24
    2248:	88 24       	eor	r8, r8
    224a:	99 24       	eor	r9, r9
    224c:	66 24       	eor	r6, r6
    224e:	77 24       	eor	r7, r7
    2250:	44 24       	eor	r4, r4
    2252:	55 24       	eor	r5, r5
    2254:	22 24       	eor	r2, r2
    2256:	23 94       	inc	r2
    2258:	33 24       	eor	r3, r3
    225a:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    225c:	84 e4       	ldi	r24, 0x44	; 68
    225e:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				i2c_write(0x0);								// write command byte
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2268:	85 e4       	ldi	r24, 0x45	; 69
    226a:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    226e:	0e 94 08 01 	call	0x210	; 0x210 <i2c_readAck>
    2272:	80 93 f4 08 	sts	0x08F4, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2276:	0e 94 12 01 	call	0x224	; 0x224 <i2c_readNak>
    227a:	80 93 f7 08 	sts	0x08F7, r24
  	 	     	i2c_stop();								// set stop condition = release bus 		
    227e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
				
				if(state != INIT && printVar){
    2282:	81 14       	cp	r8, r1
    2284:	91 04       	cpc	r9, r1
    2286:	39 f1       	breq	.+78     	; 0x22d6 <main+0x111c>
    2288:	33 20       	and	r3, r3
    228a:	29 f1       	breq	.+74     	; 0x22d6 <main+0x111c>
					lcd_goto_xy(6,1);
    228c:	86 e0       	ldi	r24, 0x06	; 6
    228e:	61 e0       	ldi	r22, 0x01	; 1
    2290:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
					serial_print_string("     ");
    2294:	89 ec       	ldi	r24, 0xC9	; 201
    2296:	93 e0       	ldi	r25, 0x03	; 3
    2298:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					lcd_goto_xy(0,1);
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	61 e0       	ldi	r22, 0x01	; 1
    22a0:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
					serial_print_string_noCRLF("STATE: ");
    22a4:	8f ec       	ldi	r24, 0xCF	; 207
    22a6:	93 e0       	ldi	r25, 0x03	; 3
    22a8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <serial_print_string_noCRLF>
					serial_print_int(state);
    22ac:	c4 01       	movw	r24, r8
    22ae:	0e 94 bb 08 	call	0x1176	; 0x1176 <serial_print_int>
					serial_print_string_noCRLF("=> ");
    22b2:	87 ed       	ldi	r24, 0xD7	; 215
    22b4:	93 e0       	ldi	r25, 0x03	; 3
    22b6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <serial_print_string_noCRLF>
					serial_print_string((char *)run_states_msg_list[state]);
    22ba:	f4 01       	movw	r30, r8
    22bc:	ee 0f       	add	r30, r30
    22be:	ff 1f       	adc	r31, r31
    22c0:	e3 5c       	subi	r30, 0xC3	; 195
    22c2:	f7 4f       	sbci	r31, 0xF7	; 247
    22c4:	80 81       	ld	r24, Z
    22c6:	91 81       	ldd	r25, Z+1	; 0x01
    22c8:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					serial_print_string(" ");
    22cc:	8b ed       	ldi	r24, 0xDB	; 219
    22ce:	93 e0       	ldi	r25, 0x03	; 3
    22d0:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
    22d4:	33 24       	eor	r3, r3

					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    22d6:	c3 01       	movw	r24, r6
    22d8:	be 01       	movw	r22, r28
    22da:	64 5f       	subi	r22, 0xF4	; 244
    22dc:	7f 4f       	sbci	r23, 0xFF	; 255
    22de:	0e 94 65 04 	call	0x8ca	; 0x8ca <button_debounce>
    22e2:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    22e4:	c4 01       	movw	r24, r8
    22e6:	a3 01       	movw	r20, r6
    22e8:	92 01       	movw	r18, r4
    22ea:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <init_trans>
    22ee:	88 23       	and	r24, r24
    22f0:	31 f0       	breq	.+12     	; 0x22fe <main+0x1144>
					buttonTriggered = false;
					state ++;
    22f2:	08 94       	sec
    22f4:	81 1c       	adc	r8, r1
    22f6:	91 1c       	adc	r9, r1
    22f8:	23 01       	movw	r4, r6
    22fa:	33 24       	eor	r3, r3
    22fc:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == MOVEC1 && /*counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole &&*/ u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0){
    22fe:	88 e0       	ldi	r24, 0x08	; 8
    2300:	88 16       	cp	r8, r24
    2302:	91 04       	cpc	r9, r1
    2304:	51 f4       	brne	.+20     	; 0x231a <main+0x1160>
    2306:	80 91 f4 08 	lds	r24, 0x08F4
    230a:	85 fd       	sbrc	r24, 5
    230c:	06 c0       	rjmp	.+12     	; 0x231a <main+0x1160>
    230e:	23 01       	movw	r4, r6
    2310:	b3 e1       	ldi	r27, 0x13	; 19
    2312:	8b 2e       	mov	r8, r27
    2314:	91 2c       	mov	r9, r1
    2316:	33 24       	eor	r3, r3
    2318:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    231a:	c4 01       	movw	r24, r8
    231c:	b3 01       	movw	r22, r6
    231e:	a2 01       	movw	r20, r4
    2320:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <secondB_trans>
    2324:	88 23       	and	r24, r24
    2326:	31 f0       	breq	.+12     	; 0x2334 <main+0x117a>
					state ++;
    2328:	08 94       	sec
    232a:	81 1c       	adc	r8, r1
    232c:	91 1c       	adc	r9, r1
    232e:	23 01       	movw	r4, r6
    2330:	33 24       	eor	r3, r3
    2332:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef)){
    2334:	c4 01       	movw	r24, r8
    2336:	b3 01       	movw	r22, r6
    2338:	a2 01       	movw	r20, r4
    233a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <dry_trans>
    233e:	88 23       	and	r24, r24
    2340:	31 f0       	breq	.+12     	; 0x234e <main+0x1194>
					state ++;
    2342:	08 94       	sec
    2344:	81 1c       	adc	r8, r1
    2346:	91 1c       	adc	r9, r1
    2348:	23 01       	movw	r4, r6
    234a:	33 24       	eor	r3, r3
    234c:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    234e:	95 e2       	ldi	r25, 0x25	; 37
    2350:	89 16       	cp	r8, r25
    2352:	91 04       	cpc	r9, r1
    2354:	41 f4       	brne	.+16     	; 0x2366 <main+0x11ac>
    2356:	c3 01       	movw	r24, r6
    2358:	84 19       	sub	r24, r4
    235a:	95 09       	sbc	r25, r5
    235c:	0b 97       	sbiw	r24, 0x0b	; 11
    235e:	1c f0       	brlt	.+6      	; 0x2366 <main+0x11ac>
    2360:	a6 e2       	ldi	r26, 0x26	; 38
    2362:	8a 2e       	mov	r8, r26
    2364:	91 2c       	mov	r9, r1
				}


				//state actions
				
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    2366:	c4 01       	movw	r24, r8
    2368:	b3 01       	movw	r22, r6
    236a:	ae 01       	movw	r20, r28
    236c:	4e 5f       	subi	r20, 0xFE	; 254
    236e:	5f 4f       	sbci	r21, 0xFF	; 255
    2370:	9e 01       	movw	r18, r28
    2372:	2c 5f       	subi	r18, 0xFC	; 252
    2374:	3f 4f       	sbci	r19, 0xFF	; 255
    2376:	8e 01       	movw	r16, r28
    2378:	0a 5f       	subi	r16, 0xFA	; 250
    237a:	1f 4f       	sbci	r17, 0xFF	; 255
    237c:	f8 e0       	ldi	r31, 0x08	; 8
    237e:	ef 2e       	mov	r14, r31
    2380:	f1 2c       	mov	r15, r1
    2382:	ec 0e       	add	r14, r28
    2384:	fd 1e       	adc	r15, r29
    2386:	ea e0       	ldi	r30, 0x0A	; 10
    2388:	ce 2e       	mov	r12, r30
    238a:	d1 2c       	mov	r13, r1
    238c:	cc 0e       	add	r12, r28
    238e:	dd 1e       	adc	r13, r29
    2390:	5e 01       	movw	r10, r28
    2392:	08 94       	sec
    2394:	a1 1c       	adc	r10, r1
    2396:	b1 1c       	adc	r11, r1
    2398:	0e 94 1a 08 	call	0x1034	; 0x1034 <init_action>
				if(state == MOVEC1){
    239c:	28 e0       	ldi	r18, 0x08	; 8
    239e:	82 16       	cp	r8, r18
    23a0:	91 04       	cpc	r9, r1
    23a2:	49 f4       	brne	.+18     	; 0x23b6 <main+0x11fc>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    23a4:	80 91 fa 08 	lds	r24, 0x08FA
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    23a8:	41 e0       	ldi	r20, 0x01	; 1
    23aa:	50 e0       	ldi	r21, 0x00	; 0
    23ac:	5d 83       	std	Y+5, r21	; 0x05
    23ae:	4c 83       	std	Y+4, r20	; 0x04
    23b0:	80 63       	ori	r24, 0x30	; 48
    23b2:	80 93 fa 08 	sts	0x08FA, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    23b6:	c4 01       	movw	r24, r8
    23b8:	b3 01       	movw	r22, r6
    23ba:	ae 01       	movw	r20, r28
    23bc:	4e 5f       	subi	r20, 0xFE	; 254
    23be:	5f 4f       	sbci	r21, 0xFF	; 255
    23c0:	9e 01       	movw	r18, r28
    23c2:	2c 5f       	subi	r18, 0xFC	; 252
    23c4:	3f 4f       	sbci	r19, 0xFF	; 255
    23c6:	8e 01       	movw	r16, r28
    23c8:	0a 5f       	subi	r16, 0xFA	; 250
    23ca:	1f 4f       	sbci	r17, 0xFF	; 255
    23cc:	b8 e0       	ldi	r27, 0x08	; 8
    23ce:	eb 2e       	mov	r14, r27
    23d0:	f1 2c       	mov	r15, r1
    23d2:	ec 0e       	add	r14, r28
    23d4:	fd 1e       	adc	r15, r29
    23d6:	aa e0       	ldi	r26, 0x0A	; 10
    23d8:	ca 2e       	mov	r12, r26
    23da:	d1 2c       	mov	r13, r1
    23dc:	cc 0e       	add	r12, r28
    23de:	dd 1e       	adc	r13, r29
    23e0:	0e 94 a0 02 	call	0x540	; 0x540 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    23e4:	c4 01       	movw	r24, r8
    23e6:	b3 01       	movw	r22, r6
    23e8:	ae 01       	movw	r20, r28
    23ea:	4e 5f       	subi	r20, 0xFE	; 254
    23ec:	5f 4f       	sbci	r21, 0xFF	; 255
    23ee:	9e 01       	movw	r18, r28
    23f0:	2c 5f       	subi	r18, 0xFC	; 252
    23f2:	3f 4f       	sbci	r19, 0xFF	; 255
    23f4:	8e 01       	movw	r16, r28
    23f6:	0a 5f       	subi	r16, 0xFA	; 250
    23f8:	1f 4f       	sbci	r17, 0xFF	; 255
    23fa:	f8 e0       	ldi	r31, 0x08	; 8
    23fc:	ef 2e       	mov	r14, r31
    23fe:	f1 2c       	mov	r15, r1
    2400:	ec 0e       	add	r14, r28
    2402:	fd 1e       	adc	r15, r29
    2404:	ea e0       	ldi	r30, 0x0A	; 10
    2406:	ce 2e       	mov	r12, r30
    2408:	d1 2c       	mov	r13, r1
    240a:	cc 0e       	add	r12, r28
    240c:	dd 1e       	adc	r13, r29
    240e:	0e 94 a6 03 	call	0x74c	; 0x74c <dry_action>
				if(state == END){
    2412:	55 e2       	ldi	r21, 0x25	; 37
    2414:	85 16       	cp	r8, r21
    2416:	91 04       	cpc	r9, r1
    2418:	71 f4       	brne	.+28     	; 0x2436 <main+0x127c>
					plateLoadMotor = 0;
    241a:	1b 82       	std	Y+3, r1	; 0x03
    241c:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    241e:	80 91 fa 08 	lds	r24, 0x08FA
    2422:	8b 7f       	andi	r24, 0xFB	; 251
    2424:	80 93 fa 08 	sts	0x08FA, r24
					if(print35 == 1){
    2428:	22 20       	and	r2, r2
    242a:	29 f0       	breq	.+10     	; 0x2436 <main+0x127c>
						//clear();
						serial_print_string("END OF CYCLE");
    242c:	85 ef       	ldi	r24, 0xF5	; 245
    242e:	93 e0       	ldi	r25, 0x03	; 3
    2430:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
    2434:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    2436:	4a 81       	ldd	r20, Y+2	; 0x02
    2438:	5b 81       	ldd	r21, Y+3	; 0x03
    243a:	2c 81       	ldd	r18, Y+4	; 0x04
    243c:	3d 81       	ldd	r19, Y+5	; 0x05
    243e:	0e 81       	ldd	r16, Y+6	; 0x06
    2440:	1f 81       	ldd	r17, Y+7	; 0x07
    2442:	e8 84       	ldd	r14, Y+8	; 0x08
    2444:	f9 84       	ldd	r15, Y+9	; 0x09
    2446:	ca 84       	ldd	r12, Y+10	; 0x0a
    2448:	db 84       	ldd	r13, Y+11	; 0x0b
    244a:	c3 01       	movw	r24, r6
    244c:	b2 01       	movw	r22, r4
    244e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <motor_and_write>

				serial_check(); counter++;
    2452:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <serial_check>
    2456:	80 91 20 04 	lds	r24, 0x0420
    245a:	90 91 21 04 	lds	r25, 0x0421
    245e:	6f 93       	push	r22
    2460:	64 e0       	ldi	r22, 0x04	; 4
    2462:	6a 95       	dec	r22
    2464:	f1 f7       	brne	.-4      	; 0x2462 <main+0x12a8>
    2466:	6f 91       	pop	r22
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	c9 f7       	brne	.-14     	; 0x245e <main+0x12a4>

		else if(is_digital_input_high(IO_D1) && !is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("SECOND B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    246c:	86 e2       	ldi	r24, 0x26	; 38
    246e:	88 16       	cp	r8, r24
    2470:	91 04       	cpc	r9, r1
    2472:	09 f4       	brne	.+2      	; 0x2476 <main+0x12bc>
    2474:	f8 c2       	rjmp	.+1520   	; 0x2a66 <main+0x18ac>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    2476:	08 94       	sec
    2478:	61 1c       	adc	r6, r1
    247a:	71 1c       	adc	r7, r1
    247c:	ef ce       	rjmp	.-546    	; 0x225c <main+0x10a2>
				delay_us(delayTimeMicroSeconds);
   		 	}
		}


		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    2484:	88 23       	and	r24, r24
    2486:	09 f0       	breq	.+2      	; 0x248a <main+0x12d0>
    2488:	6a c1       	rjmp	.+724    	; 0x275e <main+0x15a4>
    248a:	82 e0       	ldi	r24, 0x02	; 2
    248c:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    2490:	88 23       	and	r24, r24
    2492:	09 f4       	brne	.+2      	; 0x2496 <main+0x12dc>
    2494:	64 c1       	rjmp	.+712    	; 0x275e <main+0x15a4>
			lcd_goto_xy(7,0);
    2496:	87 e0       	ldi	r24, 0x07	; 7
    2498:	60 e0       	ldi	r22, 0x00	; 0
    249a:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
			serial_print_string("BOTH B");
    249e:	86 eb       	ldi	r24, 0xB6	; 182
    24a0:	93 e0       	ldi	r25, 0x03	; 3
    24a2:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9d 83       	std	Y+5, r25	; 0x05
    24ac:	8c 83       	std	Y+4, r24	; 0x04
    24ae:	80 91 fa 08 	lds	r24, 0x08FA
    24b2:	80 62       	ori	r24, 0x20	; 32
    24b4:	80 93 fa 08 	sts	0x08FA, r24
    24b8:	88 24       	eor	r8, r8
    24ba:	99 24       	eor	r9, r9
    24bc:	66 24       	eor	r6, r6
    24be:	77 24       	eor	r7, r7
    24c0:	44 24       	eor	r4, r4
    24c2:	55 24       	eor	r5, r5
    24c4:	22 24       	eor	r2, r2
    24c6:	23 94       	inc	r2
    24c8:	33 24       	eor	r3, r3
    24ca:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    24cc:	84 e4       	ldi	r24, 0x44	; 68
    24ce:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				i2c_write(0x0);								// write command byte
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    24d8:	85 e4       	ldi	r24, 0x45	; 69
    24da:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    24de:	0e 94 08 01 	call	0x210	; 0x210 <i2c_readAck>
    24e2:	80 93 f4 08 	sts	0x08F4, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    24e6:	0e 94 12 01 	call	0x224	; 0x224 <i2c_readNak>
    24ea:	80 93 f7 08 	sts	0x08F7, r24
  	 	     	i2c_stop();								// set stop condition = release bus 		
    24ee:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
				
				if(state != INIT && printVar){
    24f2:	81 14       	cp	r8, r1
    24f4:	91 04       	cpc	r9, r1
    24f6:	39 f1       	breq	.+78     	; 0x2546 <main+0x138c>
    24f8:	33 20       	and	r3, r3
    24fa:	29 f1       	breq	.+74     	; 0x2546 <main+0x138c>
					lcd_goto_xy(6,1);
    24fc:	86 e0       	ldi	r24, 0x06	; 6
    24fe:	61 e0       	ldi	r22, 0x01	; 1
    2500:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
					serial_print_string("     ");
    2504:	89 ec       	ldi	r24, 0xC9	; 201
    2506:	93 e0       	ldi	r25, 0x03	; 3
    2508:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					lcd_goto_xy(0,1);
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	61 e0       	ldi	r22, 0x01	; 1
    2510:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
					serial_print_string_noCRLF("STATE: ");
    2514:	8f ec       	ldi	r24, 0xCF	; 207
    2516:	93 e0       	ldi	r25, 0x03	; 3
    2518:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <serial_print_string_noCRLF>
					serial_print_int(state);
    251c:	c4 01       	movw	r24, r8
    251e:	0e 94 bb 08 	call	0x1176	; 0x1176 <serial_print_int>
					serial_print_string_noCRLF("=> ");
    2522:	87 ed       	ldi	r24, 0xD7	; 215
    2524:	93 e0       	ldi	r25, 0x03	; 3
    2526:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <serial_print_string_noCRLF>
					serial_print_string((char *)run_states_msg_list[state]);
    252a:	f4 01       	movw	r30, r8
    252c:	ee 0f       	add	r30, r30
    252e:	ff 1f       	adc	r31, r31
    2530:	e3 5c       	subi	r30, 0xC3	; 195
    2532:	f7 4f       	sbci	r31, 0xF7	; 247
    2534:	80 81       	ld	r24, Z
    2536:	91 81       	ldd	r25, Z+1	; 0x01
    2538:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					serial_print_string(" ");
    253c:	8b ed       	ldi	r24, 0xDB	; 219
    253e:	93 e0       	ldi	r25, 0x03	; 3
    2540:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
    2544:	33 24       	eor	r3, r3

					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    2546:	c3 01       	movw	r24, r6
    2548:	be 01       	movw	r22, r28
    254a:	64 5f       	subi	r22, 0xF4	; 244
    254c:	7f 4f       	sbci	r23, 0xFF	; 255
    254e:	0e 94 65 04 	call	0x8ca	; 0x8ca <button_debounce>
    2552:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    2554:	c4 01       	movw	r24, r8
    2556:	a3 01       	movw	r20, r6
    2558:	92 01       	movw	r18, r4
    255a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <init_trans>
    255e:	88 23       	and	r24, r24
    2560:	31 f0       	breq	.+12     	; 0x256e <main+0x13b4>
					buttonTriggered = false;
					state ++;
    2562:	08 94       	sec
    2564:	81 1c       	adc	r8, r1
    2566:	91 1c       	adc	r9, r1
    2568:	23 01       	movw	r4, r6
    256a:	33 24       	eor	r3, r3
    256c:	33 94       	inc	r3
					printVar = true;
				}

				
				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    256e:	c4 01       	movw	r24, r8
    2570:	b3 01       	movw	r22, r6
    2572:	a2 01       	movw	r20, r4
    2574:	0e 94 5b 05 	call	0xab6	; 0xab6 <firstB_trans>
    2578:	88 23       	and	r24, r24
    257a:	71 f0       	breq	.+28     	; 0x2598 <main+0x13de>
					state ++;
    257c:	08 94       	sec
    257e:	81 1c       	adc	r8, r1
    2580:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    2582:	9c e0       	ldi	r25, 0x0C	; 12
    2584:	89 16       	cp	r8, r25
    2586:	91 04       	cpc	r9, r1
    2588:	c9 f0       	breq	.+50     	; 0x25bc <main+0x1402>
    258a:	20 e1       	ldi	r18, 0x10	; 16
    258c:	82 16       	cp	r8, r18
    258e:	91 04       	cpc	r9, r1
    2590:	a9 f0       	breq	.+42     	; 0x25bc <main+0x1402>
    2592:	23 01       	movw	r4, r6
    2594:	33 24       	eor	r3, r3
    2596:	33 94       	inc	r3
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    2598:	31 e1       	ldi	r19, 0x11	; 17
    259a:	83 16       	cp	r8, r19
    259c:	91 04       	cpc	r9, r1
    259e:	81 f4       	brne	.+32     	; 0x25c0 <main+0x1406>
    25a0:	93 01       	movw	r18, r6
    25a2:	24 19       	sub	r18, r4
    25a4:	35 09       	sbc	r19, r5
    25a6:	80 91 06 04 	lds	r24, 0x0406
    25aa:	90 91 07 04 	lds	r25, 0x0407
    25ae:	82 17       	cp	r24, r18
    25b0:	93 07       	cpc	r25, r19
    25b2:	34 f4       	brge	.+12     	; 0x25c0 <main+0x1406>
    25b4:	23 01       	movw	r4, r6
    25b6:	02 e1       	ldi	r16, 0x12	; 18
    25b8:	80 2e       	mov	r8, r16
    25ba:	91 2c       	mov	r9, r1
    25bc:	33 24       	eor	r3, r3
    25be:	33 94       	inc	r3
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    25c0:	c4 01       	movw	r24, r8
    25c2:	b3 01       	movw	r22, r6
    25c4:	a2 01       	movw	r20, r4
    25c6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <secondB_trans>
    25ca:	88 23       	and	r24, r24
    25cc:	31 f0       	breq	.+12     	; 0x25da <main+0x1420>
					state ++;
    25ce:	08 94       	sec
    25d0:	81 1c       	adc	r8, r1
    25d2:	91 1c       	adc	r9, r1
    25d4:	23 01       	movw	r4, r6
    25d6:	33 24       	eor	r3, r3
    25d8:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef)){
    25da:	c4 01       	movw	r24, r8
    25dc:	b3 01       	movw	r22, r6
    25de:	a2 01       	movw	r20, r4
    25e0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <dry_trans>
    25e4:	88 23       	and	r24, r24
    25e6:	31 f0       	breq	.+12     	; 0x25f4 <main+0x143a>
					state ++;
    25e8:	08 94       	sec
    25ea:	81 1c       	adc	r8, r1
    25ec:	91 1c       	adc	r9, r1
    25ee:	23 01       	movw	r4, r6
    25f0:	33 24       	eor	r3, r3
    25f2:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    25f4:	45 e2       	ldi	r20, 0x25	; 37
    25f6:	84 16       	cp	r8, r20
    25f8:	91 04       	cpc	r9, r1
    25fa:	41 f4       	brne	.+16     	; 0x260c <main+0x1452>
    25fc:	c3 01       	movw	r24, r6
    25fe:	84 19       	sub	r24, r4
    2600:	95 09       	sbc	r25, r5
    2602:	0b 97       	sbiw	r24, 0x0b	; 11
    2604:	1c f0       	brlt	.+6      	; 0x260c <main+0x1452>
    2606:	16 e2       	ldi	r17, 0x26	; 38
    2608:	81 2e       	mov	r8, r17
    260a:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    260c:	c4 01       	movw	r24, r8
    260e:	b3 01       	movw	r22, r6
    2610:	ae 01       	movw	r20, r28
    2612:	4e 5f       	subi	r20, 0xFE	; 254
    2614:	5f 4f       	sbci	r21, 0xFF	; 255
    2616:	9e 01       	movw	r18, r28
    2618:	2c 5f       	subi	r18, 0xFC	; 252
    261a:	3f 4f       	sbci	r19, 0xFF	; 255
    261c:	8e 01       	movw	r16, r28
    261e:	0a 5f       	subi	r16, 0xFA	; 250
    2620:	1f 4f       	sbci	r17, 0xFF	; 255
    2622:	b8 e0       	ldi	r27, 0x08	; 8
    2624:	eb 2e       	mov	r14, r27
    2626:	f1 2c       	mov	r15, r1
    2628:	ec 0e       	add	r14, r28
    262a:	fd 1e       	adc	r15, r29
    262c:	aa e0       	ldi	r26, 0x0A	; 10
    262e:	ca 2e       	mov	r12, r26
    2630:	d1 2c       	mov	r13, r1
    2632:	cc 0e       	add	r12, r28
    2634:	dd 1e       	adc	r13, r29
    2636:	5e 01       	movw	r10, r28
    2638:	08 94       	sec
    263a:	a1 1c       	adc	r10, r1
    263c:	b1 1c       	adc	r11, r1
    263e:	0e 94 1a 08 	call	0x1034	; 0x1034 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2642:	c4 01       	movw	r24, r8
    2644:	b3 01       	movw	r22, r6
    2646:	ae 01       	movw	r20, r28
    2648:	4e 5f       	subi	r20, 0xFE	; 254
    264a:	5f 4f       	sbci	r21, 0xFF	; 255
    264c:	9e 01       	movw	r18, r28
    264e:	2c 5f       	subi	r18, 0xFC	; 252
    2650:	3f 4f       	sbci	r19, 0xFF	; 255
    2652:	8e 01       	movw	r16, r28
    2654:	0a 5f       	subi	r16, 0xFA	; 250
    2656:	1f 4f       	sbci	r17, 0xFF	; 255
    2658:	f8 e0       	ldi	r31, 0x08	; 8
    265a:	ef 2e       	mov	r14, r31
    265c:	f1 2c       	mov	r15, r1
    265e:	ec 0e       	add	r14, r28
    2660:	fd 1e       	adc	r15, r29
    2662:	ea e0       	ldi	r30, 0x0A	; 10
    2664:	ce 2e       	mov	r12, r30
    2666:	d1 2c       	mov	r13, r1
    2668:	cc 0e       	add	r12, r28
    266a:	dd 1e       	adc	r13, r29
    266c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <brush1_action>
				if(state == B1STOP2){
    2670:	51 e1       	ldi	r21, 0x11	; 17
    2672:	85 16       	cp	r8, r21
    2674:	91 04       	cpc	r9, r1
    2676:	79 f4       	brne	.+30     	; 0x2696 <main+0x14dc>
					brush1Motor = 0;
    2678:	1f 82       	std	Y+7, r1	; 0x07
    267a:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    267c:	1d 82       	std	Y+5, r1	; 0x05
    267e:	1c 82       	std	Y+4, r1	; 0x04
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    2680:	80 91 f5 08 	lds	r24, 0x08F5
    2684:	8e 7f       	andi	r24, 0xFE	; 254
    2686:	80 93 f5 08 	sts	0x08F5, r24
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    268a:	80 91 f8 08 	lds	r24, 0x08F8
    268e:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2690:	80 62       	ori	r24, 0x20	; 32
    2692:	80 93 f8 08 	sts	0x08F8, r24
				}
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2696:	c4 01       	movw	r24, r8
    2698:	b3 01       	movw	r22, r6
    269a:	ae 01       	movw	r20, r28
    269c:	4e 5f       	subi	r20, 0xFE	; 254
    269e:	5f 4f       	sbci	r21, 0xFF	; 255
    26a0:	9e 01       	movw	r18, r28
    26a2:	2c 5f       	subi	r18, 0xFC	; 252
    26a4:	3f 4f       	sbci	r19, 0xFF	; 255
    26a6:	8e 01       	movw	r16, r28
    26a8:	0a 5f       	subi	r16, 0xFA	; 250
    26aa:	1f 4f       	sbci	r17, 0xFF	; 255
    26ac:	b8 e0       	ldi	r27, 0x08	; 8
    26ae:	eb 2e       	mov	r14, r27
    26b0:	f1 2c       	mov	r15, r1
    26b2:	ec 0e       	add	r14, r28
    26b4:	fd 1e       	adc	r15, r29
    26b6:	aa e0       	ldi	r26, 0x0A	; 10
    26b8:	ca 2e       	mov	r12, r26
    26ba:	d1 2c       	mov	r13, r1
    26bc:	cc 0e       	add	r12, r28
    26be:	dd 1e       	adc	r13, r29
    26c0:	0e 94 a0 02 	call	0x540	; 0x540 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    26c4:	c4 01       	movw	r24, r8
    26c6:	b3 01       	movw	r22, r6
    26c8:	ae 01       	movw	r20, r28
    26ca:	4e 5f       	subi	r20, 0xFE	; 254
    26cc:	5f 4f       	sbci	r21, 0xFF	; 255
    26ce:	9e 01       	movw	r18, r28
    26d0:	2c 5f       	subi	r18, 0xFC	; 252
    26d2:	3f 4f       	sbci	r19, 0xFF	; 255
    26d4:	8e 01       	movw	r16, r28
    26d6:	0a 5f       	subi	r16, 0xFA	; 250
    26d8:	1f 4f       	sbci	r17, 0xFF	; 255
    26da:	f8 e0       	ldi	r31, 0x08	; 8
    26dc:	ef 2e       	mov	r14, r31
    26de:	f1 2c       	mov	r15, r1
    26e0:	ec 0e       	add	r14, r28
    26e2:	fd 1e       	adc	r15, r29
    26e4:	ea e0       	ldi	r30, 0x0A	; 10
    26e6:	ce 2e       	mov	r12, r30
    26e8:	d1 2c       	mov	r13, r1
    26ea:	cc 0e       	add	r12, r28
    26ec:	dd 1e       	adc	r13, r29
    26ee:	0e 94 a6 03 	call	0x74c	; 0x74c <dry_action>
				if(state == END){
    26f2:	85 e2       	ldi	r24, 0x25	; 37
    26f4:	88 16       	cp	r8, r24
    26f6:	91 04       	cpc	r9, r1
    26f8:	71 f4       	brne	.+28     	; 0x2716 <main+0x155c>
					plateLoadMotor = 0;
    26fa:	1b 82       	std	Y+3, r1	; 0x03
    26fc:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    26fe:	80 91 fa 08 	lds	r24, 0x08FA
    2702:	8b 7f       	andi	r24, 0xFB	; 251
    2704:	80 93 fa 08 	sts	0x08FA, r24
					if(print35 == 1){
    2708:	22 20       	and	r2, r2
    270a:	29 f0       	breq	.+10     	; 0x2716 <main+0x155c>
						//clear();
						serial_print_string("END OF CYCLE");
    270c:	85 ef       	ldi	r24, 0xF5	; 245
    270e:	93 e0       	ldi	r25, 0x03	; 3
    2710:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
    2714:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    2716:	4a 81       	ldd	r20, Y+2	; 0x02
    2718:	5b 81       	ldd	r21, Y+3	; 0x03
    271a:	2c 81       	ldd	r18, Y+4	; 0x04
    271c:	3d 81       	ldd	r19, Y+5	; 0x05
    271e:	0e 81       	ldd	r16, Y+6	; 0x06
    2720:	1f 81       	ldd	r17, Y+7	; 0x07
    2722:	e8 84       	ldd	r14, Y+8	; 0x08
    2724:	f9 84       	ldd	r15, Y+9	; 0x09
    2726:	ca 84       	ldd	r12, Y+10	; 0x0a
    2728:	db 84       	ldd	r13, Y+11	; 0x0b
    272a:	c3 01       	movw	r24, r6
    272c:	b2 01       	movw	r22, r4
    272e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <motor_and_write>

				serial_check(); counter++;
    2732:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <serial_check>
    2736:	80 91 20 04 	lds	r24, 0x0420
    273a:	90 91 21 04 	lds	r25, 0x0421
    273e:	6f 93       	push	r22
    2740:	64 e0       	ldi	r22, 0x04	; 4
    2742:	6a 95       	dec	r22
    2744:	f1 f7       	brne	.-4      	; 0x2742 <main+0x1588>
    2746:	6f 91       	pop	r22
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	c9 f7       	brne	.-14     	; 0x273e <main+0x1584>

		else if(!is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("BOTH B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    274c:	96 e2       	ldi	r25, 0x26	; 38
    274e:	89 16       	cp	r8, r25
    2750:	91 04       	cpc	r9, r1
    2752:	09 f4       	brne	.+2      	; 0x2756 <main+0x159c>
    2754:	88 c1       	rjmp	.+784    	; 0x2a66 <main+0x18ac>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    2756:	08 94       	sec
    2758:	61 1c       	adc	r6, r1
    275a:	71 1c       	adc	r7, r1
    275c:	b7 ce       	rjmp	.-658    	; 0x24cc <main+0x1312>
				delay_us(delayTimeMicroSeconds);
   		 	}
		}

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    2764:	88 23       	and	r24, r24
    2766:	09 f4       	brne	.+2      	; 0x276a <main+0x15b0>
    2768:	7e c1       	rjmp	.+764    	; 0x2a66 <main+0x18ac>
    276a:	82 e0       	ldi	r24, 0x02	; 2
    276c:	0e 94 1c 01 	call	0x238	; 0x238 <is_digital_input_high>
    2770:	88 23       	and	r24, r24
    2772:	09 f4       	brne	.+2      	; 0x2776 <main+0x15bc>
    2774:	78 c1       	rjmp	.+752    	; 0x2a66 <main+0x18ac>
			lcd_goto_xy(7,0);
    2776:	87 e0       	ldi	r24, 0x07	; 7
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
			serial_print_string("STEP");
    277e:	8d eb       	ldi	r24, 0xBD	; 189
    2780:	93 e0       	ldi	r25, 0x03	; 3
    2782:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	9d 83       	std	Y+5, r25	; 0x05
    278c:	8c 83       	std	Y+4, r24	; 0x04
    278e:	80 91 fa 08 	lds	r24, 0x08FA
    2792:	80 62       	ori	r24, 0x20	; 32
    2794:	80 93 fa 08 	sts	0x08FA, r24
    2798:	88 24       	eor	r8, r8
    279a:	99 24       	eor	r9, r9
    279c:	66 24       	eor	r6, r6
    279e:	77 24       	eor	r7, r7
    27a0:	1a 8a       	std	Y+18, r1	; 0x12
    27a2:	19 8a       	std	Y+17, r1	; 0x11
    27a4:	44 24       	eor	r4, r4
    27a6:	55 24       	eor	r5, r5
    27a8:	22 24       	eor	r2, r2
    27aa:	23 94       	inc	r2
    27ac:	33 24       	eor	r3, r3
    27ae:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    27b0:	84 e4       	ldi	r24, 0x44	; 68
    27b2:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				i2c_write(0x0);								// write command byte
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    27bc:	85 e4       	ldi	r24, 0x45	; 69
    27be:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    27c2:	0e 94 08 01 	call	0x210	; 0x210 <i2c_readAck>
    27c6:	80 93 f4 08 	sts	0x08F4, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    27ca:	0e 94 12 01 	call	0x224	; 0x224 <i2c_readNak>
    27ce:	80 93 f7 08 	sts	0x08F7, r24
  	 	     	i2c_stop();								// set stop condition = release bus 		
    27d2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
				
				if(state != INIT && printVar){
    27d6:	81 14       	cp	r8, r1
    27d8:	91 04       	cpc	r9, r1
    27da:	39 f1       	breq	.+78     	; 0x282a <main+0x1670>
    27dc:	33 20       	and	r3, r3
    27de:	29 f1       	breq	.+74     	; 0x282a <main+0x1670>
					lcd_goto_xy(6,1);
    27e0:	86 e0       	ldi	r24, 0x06	; 6
    27e2:	61 e0       	ldi	r22, 0x01	; 1
    27e4:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
					serial_print_string("     ");
    27e8:	89 ec       	ldi	r24, 0xC9	; 201
    27ea:	93 e0       	ldi	r25, 0x03	; 3
    27ec:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					lcd_goto_xy(0,1);
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	61 e0       	ldi	r22, 0x01	; 1
    27f4:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <lcd_goto_xy>
					serial_print_string_noCRLF("STATE: ");
    27f8:	8f ec       	ldi	r24, 0xCF	; 207
    27fa:	93 e0       	ldi	r25, 0x03	; 3
    27fc:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <serial_print_string_noCRLF>
					serial_print_int(state);
    2800:	c4 01       	movw	r24, r8
    2802:	0e 94 bb 08 	call	0x1176	; 0x1176 <serial_print_int>
					serial_print_string_noCRLF("=> ");
    2806:	87 ed       	ldi	r24, 0xD7	; 215
    2808:	93 e0       	ldi	r25, 0x03	; 3
    280a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <serial_print_string_noCRLF>
					serial_print_string((char *)run_states_msg_list[state]);
    280e:	f4 01       	movw	r30, r8
    2810:	ee 0f       	add	r30, r30
    2812:	ff 1f       	adc	r31, r31
    2814:	e3 5c       	subi	r30, 0xC3	; 195
    2816:	f7 4f       	sbci	r31, 0xF7	; 247
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
					serial_print_string(" ");
    2820:	8b ed       	ldi	r24, 0xDB	; 219
    2822:	93 e0       	ldi	r25, 0x03	; 3
    2824:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
    2828:	33 24       	eor	r3, r3

					printVar = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    282a:	c3 01       	movw	r24, r6
    282c:	be 01       	movw	r22, r28
    282e:	64 5f       	subi	r22, 0xF4	; 244
    2830:	7f 4f       	sbci	r23, 0xFF	; 255
    2832:	0e 94 65 04 	call	0x8ca	; 0x8ca <button_debounce>
    2836:	18 2f       	mov	r17, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    2838:	c4 01       	movw	r24, r8
    283a:	61 2f       	mov	r22, r17
    283c:	a3 01       	movw	r20, r6
    283e:	92 01       	movw	r18, r4
    2840:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <init_trans>
    2844:	88 23       	and	r24, r24
    2846:	39 f0       	breq	.+14     	; 0x2856 <main+0x169c>
    2848:	23 01       	movw	r4, r6
    284a:	10 e0       	ldi	r17, 0x00	; 0
    284c:	37 e2       	ldi	r19, 0x27	; 39
    284e:	83 2e       	mov	r8, r19
    2850:	91 2c       	mov	r9, r1
    2852:	33 24       	eor	r3, r3
    2854:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    2856:	c4 01       	movw	r24, r8
    2858:	b3 01       	movw	r22, r6
    285a:	a2 01       	movw	r20, r4
    285c:	0e 94 5b 05 	call	0xab6	; 0xab6 <firstB_trans>
    2860:	88 23       	and	r24, r24
    2862:	71 f4       	brne	.+28     	; 0x2880 <main+0x16c6>
					state = WAIT;
					if(state != B1STOP1 && state != CLEAN1_3)
						counterRef = counter;
					printVar = true;
				}
				if(state == B1STOP2 && counter - counterRef > mWait){
    2864:	21 e1       	ldi	r18, 0x11	; 17
    2866:	82 16       	cp	r8, r18
    2868:	91 04       	cpc	r9, r1
    286a:	81 f4       	brne	.+32     	; 0x288c <main+0x16d2>
    286c:	93 01       	movw	r18, r6
    286e:	24 19       	sub	r18, r4
    2870:	35 09       	sbc	r19, r5
    2872:	80 91 08 04 	lds	r24, 0x0408
    2876:	90 91 09 04 	lds	r25, 0x0409
    287a:	82 17       	cp	r24, r18
    287c:	93 07       	cpc	r25, r19
    287e:	34 f4       	brge	.+12     	; 0x288c <main+0x16d2>
    2880:	23 01       	movw	r4, r6
    2882:	27 e2       	ldi	r18, 0x27	; 39
    2884:	82 2e       	mov	r8, r18
    2886:	91 2c       	mov	r9, r1
    2888:	33 24       	eor	r3, r3
    288a:	33 94       	inc	r3
					printVar = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    288c:	c4 01       	movw	r24, r8
    288e:	b3 01       	movw	r22, r6
    2890:	a2 01       	movw	r20, r4
    2892:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <secondB_trans>
    2896:	88 23       	and	r24, r24
    2898:	31 f0       	breq	.+12     	; 0x28a6 <main+0x16ec>
    289a:	23 01       	movw	r4, r6
    289c:	97 e2       	ldi	r25, 0x27	; 39
    289e:	89 2e       	mov	r8, r25
    28a0:	91 2c       	mov	r9, r1
    28a2:	33 24       	eor	r3, r3
    28a4:	33 94       	inc	r3
					counterRef = counter;
					printVar = true;
				}
				
				//Dry
				if(dry_trans(state, counter, counterRef)){
    28a6:	c4 01       	movw	r24, r8
    28a8:	b3 01       	movw	r22, r6
    28aa:	a2 01       	movw	r20, r4
    28ac:	0e 94 a7 06 	call	0xd4e	; 0xd4e <dry_trans>
    28b0:	88 23       	and	r24, r24
    28b2:	21 f0       	breq	.+8      	; 0x28bc <main+0x1702>
    28b4:	23 01       	movw	r4, r6
    28b6:	33 24       	eor	r3, r3
    28b8:	33 94       	inc	r3
    28ba:	11 c0       	rjmp	.+34     	; 0x28de <main+0x1724>
					state = WAIT;
					counterRef = counter;
					printVar = true;
				}

				if(state == END && counter - counterRef > 10){
    28bc:	35 e2       	ldi	r19, 0x25	; 37
    28be:	83 16       	cp	r8, r19
    28c0:	91 04       	cpc	r9, r1
    28c2:	49 f4       	brne	.+18     	; 0x28d6 <main+0x171c>
    28c4:	c3 01       	movw	r24, r6
    28c6:	84 19       	sub	r24, r4
    28c8:	95 09       	sbc	r25, r5
    28ca:	0b 97       	sbiw	r24, 0x0b	; 11
    28cc:	4c f1       	brlt	.+82     	; 0x2920 <main+0x1766>
    28ce:	86 e2       	ldi	r24, 0x26	; 38
    28d0:	88 2e       	mov	r8, r24
    28d2:	91 2c       	mov	r9, r1
    28d4:	25 c0       	rjmp	.+74     	; 0x2920 <main+0x1766>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    28d6:	47 e2       	ldi	r20, 0x27	; 39
    28d8:	84 16       	cp	r8, r20
    28da:	91 04       	cpc	r9, r1
    28dc:	09 f5       	brne	.+66     	; 0x2920 <main+0x1766>
    28de:	11 23       	and	r17, r17
    28e0:	21 f4       	brne	.+8      	; 0x28ea <main+0x1730>
    28e2:	07 e2       	ldi	r16, 0x27	; 39
    28e4:	80 2e       	mov	r8, r16
    28e6:	91 2c       	mov	r9, r1
    28e8:	11 c0       	rjmp	.+34     	; 0x290c <main+0x1752>
					state = ++last;
    28ea:	89 89       	ldd	r24, Y+17	; 0x11
    28ec:	9a 89       	ldd	r25, Y+18	; 0x12
    28ee:	01 96       	adiw	r24, 0x01	; 1
    28f0:	9a 8b       	std	Y+18, r25	; 0x12
    28f2:	89 8b       	std	Y+17, r24	; 0x11
				}


				//state actions
						
				if(state == WAIT){
    28f4:	87 32       	cpi	r24, 0x27	; 39
    28f6:	91 05       	cpc	r25, r1
    28f8:	21 f0       	breq	.+8      	; 0x2902 <main+0x1748>
    28fa:	4c 01       	movw	r8, r24
    28fc:	33 24       	eor	r3, r3
    28fe:	33 94       	inc	r3
    2900:	0f c0       	rjmp	.+30     	; 0x2920 <main+0x1766>
    2902:	17 e2       	ldi	r17, 0x27	; 39
    2904:	81 2e       	mov	r8, r17
    2906:	91 2c       	mov	r9, r1
    2908:	33 24       	eor	r3, r3
    290a:	33 94       	inc	r3
					plateLoadMotor = 0;
    290c:	1b 82       	std	Y+3, r1	; 0x03
    290e:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    2910:	1d 82       	std	Y+5, r1	; 0x05
    2912:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    2914:	1f 82       	std	Y+7, r1	; 0x07
    2916:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    2918:	19 86       	std	Y+9, r1	; 0x09
    291a:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    291c:	1b 86       	std	Y+11, r1	; 0x0b
    291e:	1a 86       	std	Y+10, r1	; 0x0a
				}
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    2920:	c4 01       	movw	r24, r8
    2922:	b3 01       	movw	r22, r6
    2924:	ae 01       	movw	r20, r28
    2926:	4e 5f       	subi	r20, 0xFE	; 254
    2928:	5f 4f       	sbci	r21, 0xFF	; 255
    292a:	9e 01       	movw	r18, r28
    292c:	2c 5f       	subi	r18, 0xFC	; 252
    292e:	3f 4f       	sbci	r19, 0xFF	; 255
    2930:	8e 01       	movw	r16, r28
    2932:	0a 5f       	subi	r16, 0xFA	; 250
    2934:	1f 4f       	sbci	r17, 0xFF	; 255
    2936:	b8 e0       	ldi	r27, 0x08	; 8
    2938:	eb 2e       	mov	r14, r27
    293a:	f1 2c       	mov	r15, r1
    293c:	ec 0e       	add	r14, r28
    293e:	fd 1e       	adc	r15, r29
    2940:	aa e0       	ldi	r26, 0x0A	; 10
    2942:	ca 2e       	mov	r12, r26
    2944:	d1 2c       	mov	r13, r1
    2946:	cc 0e       	add	r12, r28
    2948:	dd 1e       	adc	r13, r29
    294a:	5e 01       	movw	r10, r28
    294c:	08 94       	sec
    294e:	a1 1c       	adc	r10, r1
    2950:	b1 1c       	adc	r11, r1
    2952:	0e 94 1a 08 	call	0x1034	; 0x1034 <init_action>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2956:	c4 01       	movw	r24, r8
    2958:	b3 01       	movw	r22, r6
    295a:	ae 01       	movw	r20, r28
    295c:	4e 5f       	subi	r20, 0xFE	; 254
    295e:	5f 4f       	sbci	r21, 0xFF	; 255
    2960:	9e 01       	movw	r18, r28
    2962:	2c 5f       	subi	r18, 0xFC	; 252
    2964:	3f 4f       	sbci	r19, 0xFF	; 255
    2966:	8e 01       	movw	r16, r28
    2968:	0a 5f       	subi	r16, 0xFA	; 250
    296a:	1f 4f       	sbci	r17, 0xFF	; 255
    296c:	f8 e0       	ldi	r31, 0x08	; 8
    296e:	ef 2e       	mov	r14, r31
    2970:	f1 2c       	mov	r15, r1
    2972:	ec 0e       	add	r14, r28
    2974:	fd 1e       	adc	r15, r29
    2976:	ea e0       	ldi	r30, 0x0A	; 10
    2978:	ce 2e       	mov	r12, r30
    297a:	d1 2c       	mov	r13, r1
    297c:	cc 0e       	add	r12, r28
    297e:	dd 1e       	adc	r13, r29
    2980:	0e 94 63 01 	call	0x2c6	; 0x2c6 <brush1_action>
				if(state == B1STOP2){
    2984:	91 e1       	ldi	r25, 0x11	; 17
    2986:	89 16       	cp	r8, r25
    2988:	91 04       	cpc	r9, r1
    298a:	51 f4       	brne	.+20     	; 0x29a0 <main+0x17e6>
					brush1Motor = 0;
    298c:	1f 82       	std	Y+7, r1	; 0x07
    298e:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    2990:	1d 82       	std	Y+5, r1	; 0x05
    2992:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2994:	80 91 f8 08 	lds	r24, 0x08F8
    2998:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    299a:	80 62       	ori	r24, 0x20	; 32
    299c:	80 93 f8 08 	sts	0x08F8, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    29a0:	c4 01       	movw	r24, r8
    29a2:	b3 01       	movw	r22, r6
    29a4:	ae 01       	movw	r20, r28
    29a6:	4e 5f       	subi	r20, 0xFE	; 254
    29a8:	5f 4f       	sbci	r21, 0xFF	; 255
    29aa:	9e 01       	movw	r18, r28
    29ac:	2c 5f       	subi	r18, 0xFC	; 252
    29ae:	3f 4f       	sbci	r19, 0xFF	; 255
    29b0:	8e 01       	movw	r16, r28
    29b2:	0a 5f       	subi	r16, 0xFA	; 250
    29b4:	1f 4f       	sbci	r17, 0xFF	; 255
    29b6:	b8 e0       	ldi	r27, 0x08	; 8
    29b8:	eb 2e       	mov	r14, r27
    29ba:	f1 2c       	mov	r15, r1
    29bc:	ec 0e       	add	r14, r28
    29be:	fd 1e       	adc	r15, r29
    29c0:	aa e0       	ldi	r26, 0x0A	; 10
    29c2:	ca 2e       	mov	r12, r26
    29c4:	d1 2c       	mov	r13, r1
    29c6:	cc 0e       	add	r12, r28
    29c8:	dd 1e       	adc	r13, r29
    29ca:	0e 94 a0 02 	call	0x540	; 0x540 <brush2_action>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    29ce:	c4 01       	movw	r24, r8
    29d0:	b3 01       	movw	r22, r6
    29d2:	ae 01       	movw	r20, r28
    29d4:	4e 5f       	subi	r20, 0xFE	; 254
    29d6:	5f 4f       	sbci	r21, 0xFF	; 255
    29d8:	9e 01       	movw	r18, r28
    29da:	2c 5f       	subi	r18, 0xFC	; 252
    29dc:	3f 4f       	sbci	r19, 0xFF	; 255
    29de:	8e 01       	movw	r16, r28
    29e0:	0a 5f       	subi	r16, 0xFA	; 250
    29e2:	1f 4f       	sbci	r17, 0xFF	; 255
    29e4:	f8 e0       	ldi	r31, 0x08	; 8
    29e6:	ef 2e       	mov	r14, r31
    29e8:	f1 2c       	mov	r15, r1
    29ea:	ec 0e       	add	r14, r28
    29ec:	fd 1e       	adc	r15, r29
    29ee:	ea e0       	ldi	r30, 0x0A	; 10
    29f0:	ce 2e       	mov	r12, r30
    29f2:	d1 2c       	mov	r13, r1
    29f4:	cc 0e       	add	r12, r28
    29f6:	dd 1e       	adc	r13, r29
    29f8:	0e 94 a6 03 	call	0x74c	; 0x74c <dry_action>
				if(state == END){
    29fc:	25 e2       	ldi	r18, 0x25	; 37
    29fe:	82 16       	cp	r8, r18
    2a00:	91 04       	cpc	r9, r1
    2a02:	71 f4       	brne	.+28     	; 0x2a20 <main+0x1866>
					plateLoadMotor = 0;
    2a04:	1b 82       	std	Y+3, r1	; 0x03
    2a06:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2a08:	80 91 fa 08 	lds	r24, 0x08FA
    2a0c:	8b 7f       	andi	r24, 0xFB	; 251
    2a0e:	80 93 fa 08 	sts	0x08FA, r24
					if(print35 == 1){
    2a12:	22 20       	and	r2, r2
    2a14:	29 f0       	breq	.+10     	; 0x2a20 <main+0x1866>
						//clear();
						serial_print_string("END OF CYCLE");
    2a16:	85 ef       	ldi	r24, 0xF5	; 245
    2a18:	93 e0       	ldi	r25, 0x03	; 3
    2a1a:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
    2a1e:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    2a20:	4a 81       	ldd	r20, Y+2	; 0x02
    2a22:	5b 81       	ldd	r21, Y+3	; 0x03
    2a24:	2c 81       	ldd	r18, Y+4	; 0x04
    2a26:	3d 81       	ldd	r19, Y+5	; 0x05
    2a28:	0e 81       	ldd	r16, Y+6	; 0x06
    2a2a:	1f 81       	ldd	r17, Y+7	; 0x07
    2a2c:	e8 84       	ldd	r14, Y+8	; 0x08
    2a2e:	f9 84       	ldd	r15, Y+9	; 0x09
    2a30:	ca 84       	ldd	r12, Y+10	; 0x0a
    2a32:	db 84       	ldd	r13, Y+11	; 0x0b
    2a34:	c3 01       	movw	r24, r6
    2a36:	b2 01       	movw	r22, r4
    2a38:	0e 94 3d 07 	call	0xe7a	; 0xe7a <motor_and_write>

				serial_check(); counter++;
    2a3c:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <serial_check>
    2a40:	80 91 20 04 	lds	r24, 0x0420
    2a44:	90 91 21 04 	lds	r25, 0x0421
    2a48:	6f 93       	push	r22
    2a4a:	64 e0       	ldi	r22, 0x04	; 4
    2a4c:	6a 95       	dec	r22
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <main+0x1892>
    2a50:	6f 91       	pop	r22
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	c9 f7       	brne	.-14     	; 0x2a48 <main+0x188e>

		else if(is_digital_input_high(IO_D1) && is_digital_input_high(IO_D2)){
			lcd_goto_xy(7,0);
			serial_print_string("STEP");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    2a56:	36 e2       	ldi	r19, 0x26	; 38
    2a58:	83 16       	cp	r8, r19
    2a5a:	91 04       	cpc	r9, r1
    2a5c:	21 f0       	breq	.+8      	; 0x2a66 <main+0x18ac>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				serial_check(); counter++;
    2a5e:	08 94       	sec
    2a60:	61 1c       	adc	r6, r1
    2a62:	71 1c       	adc	r7, r1
    2a64:	a5 ce       	rjmp	.-694    	; 0x27b0 <main+0x15f6>
				delay_us(delayTimeMicroSeconds);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2a66:	80 91 fa 08 	lds	r24, 0x08FA
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2a6a:	8b 7d       	andi	r24, 0xDB	; 219
    2a6c:	80 93 fa 08 	sts	0x08FA, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    2a70:	80 91 f5 08 	lds	r24, 0x08F5
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    2a74:	86 7b       	andi	r24, 0xB6	; 182
    2a76:	80 93 f5 08 	sts	0x08F5, r24
		
		i2c_start(I2C1+I2C_WRITE);
    2a7a:	80 e4       	ldi	r24, 0x40	; 64
    2a7c:	0e 94 9d 00 	call	0x13a	; 0x13a <i2c_start>
		i2c_write(0x2);
    2a80:	82 e0       	ldi	r24, 0x02	; 2
    2a82:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte0.motorByte0);
    2a86:	80 91 fa 08 	lds	r24, 0x08FA
    2a8a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_write(u_motorByte1.motorByte1);
    2a8e:	80 91 f5 08 	lds	r24, 0x08F5
    2a92:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
		i2c_stop();
    2a96:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_stop>
	}
	serial_print_string("END");
    2a9a:	82 e0       	ldi	r24, 0x02	; 2
    2a9c:	94 e0       	ldi	r25, 0x04	; 4
    2a9e:	0e 94 04 08 	call	0x1008	; 0x1008 <serial_print_string>
    2aa2:	0c 94 90 09 	jmp	0x1320	; 0x1320 <main+0x166>
	}
    2aa6:	4f ef       	ldi	r20, 0xFF	; 255
    2aa8:	5f ef       	ldi	r21, 0xFF	; 255
    2aaa:	58 8b       	std	Y+16, r21	; 0x10
    2aac:	4f 87       	std	Y+15, r20	; 0x0f
    2aae:	23 01       	movw	r4, r6
    2ab0:	bb 24       	eor	r11, r11
    2ab2:	b3 94       	inc	r11
    2ab4:	80 e3       	ldi	r24, 0x30	; 48
    2ab6:	88 2e       	mov	r8, r24
    2ab8:	91 2c       	mov	r9, r1
    2aba:	7c c9       	rjmp	.-3336   	; 0x1db4 <main+0xbfa>

00002abc <_ZN12OrangutanLCDC2Ev>:
    2abc:	08 95       	ret

00002abe <_ZN12OrangutanLCDC1Ev>:
    2abe:	08 95       	ret

00002ac0 <void_getchar>:
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	08 95       	ret

00002ac6 <_ZN12OrangutanLCD8busyWaitEv>:
    2ac6:	ef 92       	push	r14
    2ac8:	ff 92       	push	r15
    2aca:	0f 93       	push	r16
    2acc:	1f 93       	push	r17
    2ace:	67 b1       	in	r22, 0x07	; 7
    2ad0:	3d 98       	cbi	0x07, 5	; 7
    2ad2:	28 98       	cbi	0x05, 0	; 5
    2ad4:	29 9a       	sbi	0x05, 1	; 5
    2ad6:	e0 90 c4 08 	lds	r14, 0x08C4
    2ada:	f0 90 c5 08 	lds	r15, 0x08C5
    2ade:	00 91 c6 08 	lds	r16, 0x08C6
    2ae2:	10 91 c7 08 	lds	r17, 0x08C7
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	41 e0       	ldi	r20, 0x01	; 1
    2aec:	50 e0       	ldi	r21, 0x00	; 0
    2aee:	ca 01       	movw	r24, r20
    2af0:	6f 93       	push	r22
    2af2:	64 e0       	ldi	r22, 0x04	; 4
    2af4:	6a 95       	dec	r22
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    2af8:	6f 91       	pop	r22
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	c9 f7       	brne	.-14     	; 0x2af0 <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    2afe:	2a 9a       	sbi	0x05, 2	; 5
    2b00:	ca 01       	movw	r24, r20
    2b02:	6f 93       	push	r22
    2b04:	64 e0       	ldi	r22, 0x04	; 4
    2b06:	6a 95       	dec	r22
    2b08:	f1 f7       	brne	.-4      	; 0x2b06 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    2b0a:	6f 91       	pop	r22
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	c9 f7       	brne	.-14     	; 0x2b02 <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    2b10:	86 b1       	in	r24, 0x06	; 6
    2b12:	2a 98       	cbi	0x05, 2	; 5
    2b14:	fa 01       	movw	r30, r20
    2b16:	6f 93       	push	r22
    2b18:	64 e0       	ldi	r22, 0x04	; 4
    2b1a:	6a 95       	dec	r22
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <_ZN12OrangutanLCD8busyWaitEv+0x54>
    2b1e:	6f 91       	pop	r22
    2b20:	31 97       	sbiw	r30, 0x01	; 1
    2b22:	c9 f7       	brne	.-14     	; 0x2b16 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    2b24:	2a 9a       	sbi	0x05, 2	; 5
    2b26:	fa 01       	movw	r30, r20
    2b28:	6f 93       	push	r22
    2b2a:	64 e0       	ldi	r22, 0x04	; 4
    2b2c:	6a 95       	dec	r22
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <_ZN12OrangutanLCD8busyWaitEv+0x66>
    2b30:	6f 91       	pop	r22
    2b32:	31 97       	sbiw	r30, 0x01	; 1
    2b34:	c9 f7       	brne	.-14     	; 0x2b28 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    2b36:	2a 98       	cbi	0x05, 2	; 5
    2b38:	2c 5f       	subi	r18, 0xFC	; 252
    2b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3c:	85 ff       	sbrs	r24, 5
    2b3e:	09 c0       	rjmp	.+18     	; 0x2b52 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    2b40:	c9 01       	movw	r24, r18
    2b42:	a0 e0       	ldi	r26, 0x00	; 0
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	8e 15       	cp	r24, r14
    2b48:	9f 05       	cpc	r25, r15
    2b4a:	a0 07       	cpc	r26, r16
    2b4c:	b1 07       	cpc	r27, r17
    2b4e:	08 f4       	brcc	.+2      	; 0x2b52 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    2b50:	ce cf       	rjmp	.-100    	; 0x2aee <_ZN12OrangutanLCD8busyWaitEv+0x28>
    2b52:	c9 01       	movw	r24, r18
    2b54:	a0 e0       	ldi	r26, 0x00	; 0
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	8e 15       	cp	r24, r14
    2b5a:	9f 05       	cpc	r25, r15
    2b5c:	a0 07       	cpc	r26, r16
    2b5e:	b1 07       	cpc	r27, r17
    2b60:	28 f0       	brcs	.+10     	; 0x2b6c <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    2b62:	82 e3       	ldi	r24, 0x32	; 50
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	a0 e0       	ldi	r26, 0x00	; 0
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	04 c0       	rjmp	.+8      	; 0x2b74 <_ZN12OrangutanLCD8busyWaitEv+0xae>
    2b6c:	80 e3       	ldi	r24, 0x30	; 48
    2b6e:	95 e7       	ldi	r25, 0x75	; 117
    2b70:	a0 e0       	ldi	r26, 0x00	; 0
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	80 93 c4 08 	sts	0x08C4, r24
    2b78:	90 93 c5 08 	sts	0x08C5, r25
    2b7c:	a0 93 c6 08 	sts	0x08C6, r26
    2b80:	b0 93 c7 08 	sts	0x08C7, r27
    2b84:	67 b9       	out	0x07, r22	; 7
    2b86:	1f 91       	pop	r17
    2b88:	0f 91       	pop	r16
    2b8a:	ff 90       	pop	r15
    2b8c:	ef 90       	pop	r14
    2b8e:	08 95       	ret

00002b90 <_ZN12OrangutanLCD8sendDataEh>:
    2b90:	28 b1       	in	r18, 0x08	; 8
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	8f 70       	andi	r24, 0x0F	; 15
    2b96:	90 70       	andi	r25, 0x00	; 0
    2b98:	88 0f       	add	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	88 0f       	add	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	23 7c       	andi	r18, 0xC3	; 195
    2ba2:	28 2b       	or	r18, r24
    2ba4:	28 b9       	out	0x08, r18	; 8
    2ba6:	2a 9a       	sbi	0x05, 2	; 5
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	fc 01       	movw	r30, r24
    2bae:	6f 93       	push	r22
    2bb0:	64 e0       	ldi	r22, 0x04	; 4
    2bb2:	6a 95       	dec	r22
    2bb4:	f1 f7       	brne	.-4      	; 0x2bb2 <_ZN12OrangutanLCD8sendDataEh+0x22>
    2bb6:	6f 91       	pop	r22
    2bb8:	31 97       	sbiw	r30, 0x01	; 1
    2bba:	c9 f7       	brne	.-14     	; 0x2bae <_ZN12OrangutanLCD8sendDataEh+0x1e>
    2bbc:	2a 98       	cbi	0x05, 2	; 5
    2bbe:	6f 93       	push	r22
    2bc0:	64 e0       	ldi	r22, 0x04	; 4
    2bc2:	6a 95       	dec	r22
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <_ZN12OrangutanLCD8sendDataEh+0x32>
    2bc6:	6f 91       	pop	r22
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	c9 f7       	brne	.-14     	; 0x2bbe <_ZN12OrangutanLCD8sendDataEh+0x2e>
    2bcc:	08 95       	ret

00002bce <_ZN12OrangutanLCD10initPrintfEv>:
    2bce:	80 91 c0 08 	lds	r24, 0x08C0
    2bd2:	90 91 c1 08 	lds	r25, 0x08C1
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	11 f0       	breq	.+4      	; 0x2bde <_ZN12OrangutanLCD10initPrintfEv+0x10>
    2bda:	0e 94 1a 23 	call	0x4634	; 0x4634 <free>
    2bde:	80 91 8d 08 	lds	r24, 0x088D
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	20 91 8e 08 	lds	r18, 0x088E
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	ac 01       	movw	r20, r24
    2bee:	42 9f       	mul	r20, r18
    2bf0:	c0 01       	movw	r24, r0
    2bf2:	43 9f       	mul	r20, r19
    2bf4:	90 0d       	add	r25, r0
    2bf6:	52 9f       	mul	r21, r18
    2bf8:	90 0d       	add	r25, r0
    2bfa:	11 24       	eor	r1, r1
    2bfc:	0e 94 6d 22 	call	0x44da	; 0x44da <malloc>
    2c00:	90 93 c1 08 	sts	0x08C1, r25
    2c04:	80 93 c0 08 	sts	0x08C0, r24
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	29 f1       	breq	.+74     	; 0x2c56 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    2c0c:	60 e0       	ldi	r22, 0x00	; 0
    2c0e:	70 e2       	ldi	r23, 0x20	; 32
    2c10:	08 c0       	rjmp	.+16     	; 0x2c22 <_ZN12OrangutanLCD10initPrintfEv+0x54>
    2c12:	e0 91 c0 08 	lds	r30, 0x08C0
    2c16:	f0 91 c1 08 	lds	r31, 0x08C1
    2c1a:	e4 0f       	add	r30, r20
    2c1c:	f5 1f       	adc	r31, r21
    2c1e:	70 83       	st	Z, r23
    2c20:	6f 5f       	subi	r22, 0xFF	; 255
    2c22:	46 2f       	mov	r20, r22
    2c24:	50 e0       	ldi	r21, 0x00	; 0
    2c26:	80 91 8d 08 	lds	r24, 0x088D
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	20 91 8e 08 	lds	r18, 0x088E
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	fc 01       	movw	r30, r24
    2c36:	e2 9f       	mul	r30, r18
    2c38:	c0 01       	movw	r24, r0
    2c3a:	e3 9f       	mul	r30, r19
    2c3c:	90 0d       	add	r25, r0
    2c3e:	f2 9f       	mul	r31, r18
    2c40:	90 0d       	add	r25, r0
    2c42:	11 24       	eor	r1, r1
    2c44:	48 17       	cp	r20, r24
    2c46:	59 07       	cpc	r21, r25
    2c48:	24 f3       	brlt	.-56     	; 0x2c12 <_ZN12OrangutanLCD10initPrintfEv+0x44>
    2c4a:	8f e4       	ldi	r24, 0x4F	; 79
    2c4c:	98 e1       	ldi	r25, 0x18	; 24
    2c4e:	60 e6       	ldi	r22, 0x60	; 96
    2c50:	75 e1       	ldi	r23, 0x15	; 21
    2c52:	0e 94 93 23 	call	0x4726	; 0x4726 <fdevopen>
    2c56:	08 95       	ret

00002c58 <_ZN12OrangutanLCD10initPrintfEhh>:
    2c58:	80 93 8e 08 	sts	0x088E, r24
    2c5c:	60 93 8d 08 	sts	0x088D, r22
    2c60:	0e 94 e7 15 	call	0x2bce	; 0x2bce <_ZN12OrangutanLCD10initPrintfEv>
    2c64:	08 95       	ret

00002c66 <lcd_init_printf_with_dimensions>:
    2c66:	80 93 8e 08 	sts	0x088E, r24
    2c6a:	60 93 8d 08 	sts	0x088D, r22
    2c6e:	0e 94 e7 15 	call	0x2bce	; 0x2bce <_ZN12OrangutanLCD10initPrintfEv>
    2c72:	08 95       	ret

00002c74 <lcd_init_printf>:
    2c74:	0e 94 e7 15 	call	0x2bce	; 0x2bce <_ZN12OrangutanLCD10initPrintfEv>
    2c78:	08 95       	ret

00002c7a <_ZN12OrangutanLCD5init2Ev>:
    2c7a:	3d 98       	cbi	0x07, 5	; 7
    2c7c:	45 9a       	sbi	0x08, 5	; 8
    2c7e:	80 e3       	ldi	r24, 0x30	; 48
    2c80:	95 e7       	ldi	r25, 0x75	; 117
    2c82:	a0 e0       	ldi	r26, 0x00	; 0
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	80 93 c4 08 	sts	0x08C4, r24
    2c8a:	90 93 c5 08 	sts	0x08C5, r25
    2c8e:	a0 93 c6 08 	sts	0x08C6, r26
    2c92:	b0 93 c7 08 	sts	0x08C7, r27
    2c96:	20 9a       	sbi	0x04, 0	; 4
    2c98:	21 9a       	sbi	0x04, 1	; 4
    2c9a:	22 9a       	sbi	0x04, 2	; 4
    2c9c:	8e e1       	ldi	r24, 0x1E	; 30
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <delay_ms>
    2ca4:	83 e0       	ldi	r24, 0x03	; 3
    2ca6:	0e 94 95 19 	call	0x332a	; 0x332a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2caa:	86 e0       	ldi	r24, 0x06	; 6
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <delay_ms>
    2cb2:	83 e0       	ldi	r24, 0x03	; 3
    2cb4:	0e 94 95 19 	call	0x332a	; 0x332a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2cb8:	82 e0       	ldi	r24, 0x02	; 2
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <delay_ms>
    2cc0:	83 e0       	ldi	r24, 0x03	; 3
    2cc2:	0e 94 95 19 	call	0x332a	; 0x332a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2cc6:	82 e0       	ldi	r24, 0x02	; 2
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <delay_ms>
    2cce:	82 e0       	ldi	r24, 0x02	; 2
    2cd0:	0e 94 95 19 	call	0x332a	; 0x332a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <delay_ms>
    2cdc:	88 e2       	ldi	r24, 0x28	; 40
    2cde:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZN12OrangutanLCD8send_cmdEh>
    2ce2:	88 e0       	ldi	r24, 0x08	; 8
    2ce4:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZN12OrangutanLCD8send_cmdEh>
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZN12OrangutanLCD8send_cmdEh>
    2cee:	86 e0       	ldi	r24, 0x06	; 6
    2cf0:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZN12OrangutanLCD8send_cmdEh>
    2cf4:	8c e0       	ldi	r24, 0x0C	; 12
    2cf6:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZN12OrangutanLCD8send_cmdEh>
    2cfa:	08 95       	ret

00002cfc <_ZN12OrangutanLCD4initEv>:
    2cfc:	80 91 c8 08 	lds	r24, 0x08C8
    2d00:	88 23       	and	r24, r24
    2d02:	29 f4       	brne	.+10     	; 0x2d0e <_ZN12OrangutanLCD4initEv+0x12>
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	80 93 c8 08 	sts	0x08C8, r24
    2d0a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <_ZN12OrangutanLCD5init2Ev>
    2d0e:	08 95       	ret

00002d10 <_ZN12OrangutanLCD4sendEhhh>:
    2d10:	ff 92       	push	r15
    2d12:	0f 93       	push	r16
    2d14:	1f 93       	push	r17
    2d16:	08 2f       	mov	r16, r24
    2d18:	16 2f       	mov	r17, r22
    2d1a:	f4 2e       	mov	r15, r20
    2d1c:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <_ZN12OrangutanLCD4initEv>
    2d20:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <_ZN12OrangutanLCD8busyWaitEv>
    2d24:	37 b1       	in	r19, 0x07	; 7
    2d26:	28 b1       	in	r18, 0x08	; 8
    2d28:	29 98       	cbi	0x05, 1	; 5
    2d2a:	11 23       	and	r17, r17
    2d2c:	11 f0       	breq	.+4      	; 0x2d32 <_ZN12OrangutanLCD4sendEhhh+0x22>
    2d2e:	28 9a       	sbi	0x05, 0	; 5
    2d30:	01 c0       	rjmp	.+2      	; 0x2d34 <_ZN12OrangutanLCD4sendEhhh+0x24>
    2d32:	28 98       	cbi	0x05, 0	; 5
    2d34:	87 b1       	in	r24, 0x07	; 7
    2d36:	8c 63       	ori	r24, 0x3C	; 60
    2d38:	87 b9       	out	0x07, r24	; 7
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	f8 16       	cp	r15, r24
    2d3e:	e1 f0       	breq	.+56     	; 0x2d78 <_ZN12OrangutanLCD4sendEhhh+0x68>
    2d40:	88 b1       	in	r24, 0x08	; 8
    2d42:	90 2f       	mov	r25, r16
    2d44:	92 95       	swap	r25
    2d46:	9f 70       	andi	r25, 0x0F	; 15
    2d48:	99 0f       	add	r25, r25
    2d4a:	99 0f       	add	r25, r25
    2d4c:	83 7c       	andi	r24, 0xC3	; 195
    2d4e:	98 2b       	or	r25, r24
    2d50:	98 b9       	out	0x08, r25	; 8
    2d52:	2a 9a       	sbi	0x05, 2	; 5
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	fc 01       	movw	r30, r24
    2d5a:	6f 93       	push	r22
    2d5c:	64 e0       	ldi	r22, 0x04	; 4
    2d5e:	6a 95       	dec	r22
    2d60:	f1 f7       	brne	.-4      	; 0x2d5e <_ZN12OrangutanLCD4sendEhhh+0x4e>
    2d62:	6f 91       	pop	r22
    2d64:	31 97       	sbiw	r30, 0x01	; 1
    2d66:	c9 f7       	brne	.-14     	; 0x2d5a <_ZN12OrangutanLCD4sendEhhh+0x4a>
    2d68:	2a 98       	cbi	0x05, 2	; 5
    2d6a:	6f 93       	push	r22
    2d6c:	64 e0       	ldi	r22, 0x04	; 4
    2d6e:	6a 95       	dec	r22
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <_ZN12OrangutanLCD4sendEhhh+0x5e>
    2d72:	6f 91       	pop	r22
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	c9 f7       	brne	.-14     	; 0x2d6a <_ZN12OrangutanLCD4sendEhhh+0x5a>
    2d78:	88 b1       	in	r24, 0x08	; 8
    2d7a:	0f 70       	andi	r16, 0x0F	; 15
    2d7c:	00 0f       	add	r16, r16
    2d7e:	00 0f       	add	r16, r16
    2d80:	83 7c       	andi	r24, 0xC3	; 195
    2d82:	80 2b       	or	r24, r16
    2d84:	88 b9       	out	0x08, r24	; 8
    2d86:	2a 9a       	sbi	0x05, 2	; 5
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	6f 93       	push	r22
    2d90:	64 e0       	ldi	r22, 0x04	; 4
    2d92:	6a 95       	dec	r22
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <_ZN12OrangutanLCD4sendEhhh+0x82>
    2d96:	6f 91       	pop	r22
    2d98:	31 97       	sbiw	r30, 0x01	; 1
    2d9a:	c9 f7       	brne	.-14     	; 0x2d8e <_ZN12OrangutanLCD4sendEhhh+0x7e>
    2d9c:	2a 98       	cbi	0x05, 2	; 5
    2d9e:	6f 93       	push	r22
    2da0:	64 e0       	ldi	r22, 0x04	; 4
    2da2:	6a 95       	dec	r22
    2da4:	f1 f7       	brne	.-4      	; 0x2da2 <_ZN12OrangutanLCD4sendEhhh+0x92>
    2da6:	6f 91       	pop	r22
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	c9 f7       	brne	.-14     	; 0x2d9e <_ZN12OrangutanLCD4sendEhhh+0x8e>
    2dac:	37 b9       	out	0x07, r19	; 7
    2dae:	28 b9       	out	0x08, r18	; 8
    2db0:	1f 91       	pop	r17
    2db2:	0f 91       	pop	r16
    2db4:	ff 90       	pop	r15
    2db6:	08 95       	ret

00002db8 <_ZN12OrangutanLCD8send_cmdEh>:
    2db8:	60 e0       	ldi	r22, 0x00	; 0
    2dba:	42 e0       	ldi	r20, 0x02	; 2
    2dbc:	0e 94 88 16 	call	0x2d10	; 0x2d10 <_ZN12OrangutanLCD4sendEhhh>
    2dc0:	08 95       	ret

00002dc2 <_ZN12OrangutanLCD10moveCursorEhh>:
    2dc2:	0f 93       	push	r16
    2dc4:	1f 93       	push	r17
    2dc6:	08 2f       	mov	r16, r24
    2dc8:	16 2f       	mov	r17, r22
    2dca:	08 c0       	rjmp	.+16     	; 0x2ddc <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    2dcc:	00 23       	and	r16, r16
    2dce:	11 f4       	brne	.+4      	; 0x2dd4 <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    2dd0:	80 e1       	ldi	r24, 0x10	; 16
    2dd2:	01 c0       	rjmp	.+2      	; 0x2dd6 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    2dd4:	84 e1       	ldi	r24, 0x14	; 20
    2dd6:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZN12OrangutanLCD8send_cmdEh>
    2dda:	11 50       	subi	r17, 0x01	; 1
    2ddc:	11 23       	and	r17, r17
    2dde:	b1 f7       	brne	.-20     	; 0x2dcc <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    2de0:	1f 91       	pop	r17
    2de2:	0f 91       	pop	r16
    2de4:	08 95       	ret

00002de6 <lcd_move_cursor>:
    2de6:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <_ZN12OrangutanLCD10moveCursorEhh>
    2dea:	08 95       	ret

00002dec <_ZN12OrangutanLCD10hideCursorEv>:
    2dec:	8c e0       	ldi	r24, 0x0C	; 12
    2dee:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZN12OrangutanLCD8send_cmdEh>
    2df2:	08 95       	ret

00002df4 <lcd_hide_cursor>:
    2df4:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN12OrangutanLCD10hideCursorEv>
    2df8:	08 95       	ret

00002dfa <_ZN12OrangutanLCD10showCursorEh>:
    2dfa:	81 30       	cpi	r24, 0x01	; 1
    2dfc:	11 f4       	brne	.+4      	; 0x2e02 <_ZN12OrangutanLCD10showCursorEh+0x8>
    2dfe:	8f e0       	ldi	r24, 0x0F	; 15
    2e00:	01 c0       	rjmp	.+2      	; 0x2e04 <_ZN12OrangutanLCD10showCursorEh+0xa>
    2e02:	8e e0       	ldi	r24, 0x0E	; 14
    2e04:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZN12OrangutanLCD8send_cmdEh>
    2e08:	08 95       	ret

00002e0a <lcd_show_cursor>:
    2e0a:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_ZN12OrangutanLCD10showCursorEh>
    2e0e:	08 95       	ret

00002e10 <_ZN12OrangutanLCD6gotoXYEhh>:
    2e10:	a4 e0       	ldi	r26, 0x04	; 4
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	ee e0       	ldi	r30, 0x0E	; 14
    2e16:	f7 e1       	ldi	r31, 0x17	; 23
    2e18:	0c 94 30 22 	jmp	0x4460	; 0x4460 <__prologue_saves__+0x1c>
    2e1c:	18 2f       	mov	r17, r24
    2e1e:	06 2f       	mov	r16, r22
    2e20:	80 e8       	ldi	r24, 0x80	; 128
    2e22:	89 83       	std	Y+1, r24	; 0x01
    2e24:	80 ec       	ldi	r24, 0xC0	; 192
    2e26:	8a 83       	std	Y+2, r24	; 0x02
    2e28:	84 e9       	ldi	r24, 0x94	; 148
    2e2a:	8b 83       	std	Y+3, r24	; 0x03
    2e2c:	84 ed       	ldi	r24, 0xD4	; 212
    2e2e:	8c 83       	std	Y+4, r24	; 0x04
    2e30:	fe 01       	movw	r30, r28
    2e32:	e6 0f       	add	r30, r22
    2e34:	f1 1d       	adc	r31, r1
    2e36:	81 81       	ldd	r24, Z+1	; 0x01
    2e38:	81 0f       	add	r24, r17
    2e3a:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZN12OrangutanLCD8send_cmdEh>
    2e3e:	10 93 c3 08 	sts	0x08C3, r17
    2e42:	00 93 c2 08 	sts	0x08C2, r16
    2e46:	24 96       	adiw	r28, 0x04	; 4
    2e48:	e4 e0       	ldi	r30, 0x04	; 4
    2e4a:	0c 94 4c 22 	jmp	0x4498	; 0x4498 <__epilogue_restores__+0x1c>

00002e4e <lcd_goto_xy>:
    2e4e:	0e 94 08 17 	call	0x2e10	; 0x2e10 <_ZN12OrangutanLCD6gotoXYEhh>
    2e52:	08 95       	ret

00002e54 <_ZN12OrangutanLCD5clearEv>:
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZN12OrangutanLCD8send_cmdEh>
    2e5a:	80 91 c0 08 	lds	r24, 0x08C0
    2e5e:	90 91 c1 08 	lds	r25, 0x08C1
    2e62:	89 2b       	or	r24, r25
    2e64:	19 f1       	breq	.+70     	; 0x2eac <_ZN12OrangutanLCD5clearEv+0x58>
    2e66:	60 e0       	ldi	r22, 0x00	; 0
    2e68:	70 e2       	ldi	r23, 0x20	; 32
    2e6a:	08 c0       	rjmp	.+16     	; 0x2e7c <_ZN12OrangutanLCD5clearEv+0x28>
    2e6c:	e0 91 c0 08 	lds	r30, 0x08C0
    2e70:	f0 91 c1 08 	lds	r31, 0x08C1
    2e74:	e4 0f       	add	r30, r20
    2e76:	f5 1f       	adc	r31, r21
    2e78:	70 83       	st	Z, r23
    2e7a:	6f 5f       	subi	r22, 0xFF	; 255
    2e7c:	46 2f       	mov	r20, r22
    2e7e:	50 e0       	ldi	r21, 0x00	; 0
    2e80:	80 91 8d 08 	lds	r24, 0x088D
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	20 91 8e 08 	lds	r18, 0x088E
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	fc 01       	movw	r30, r24
    2e90:	e2 9f       	mul	r30, r18
    2e92:	c0 01       	movw	r24, r0
    2e94:	e3 9f       	mul	r30, r19
    2e96:	90 0d       	add	r25, r0
    2e98:	f2 9f       	mul	r31, r18
    2e9a:	90 0d       	add	r25, r0
    2e9c:	11 24       	eor	r1, r1
    2e9e:	48 17       	cp	r20, r24
    2ea0:	59 07       	cpc	r21, r25
    2ea2:	24 f3       	brlt	.-56     	; 0x2e6c <_ZN12OrangutanLCD5clearEv+0x18>
    2ea4:	10 92 c3 08 	sts	0x08C3, r1
    2ea8:	10 92 c2 08 	sts	0x08C2, r1
    2eac:	08 95       	ret

00002eae <clear>:
    2eae:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <_ZN12OrangutanLCD5clearEv>
    2eb2:	08 95       	ret

00002eb4 <_ZN12OrangutanLCD9send_dataEh>:
    2eb4:	61 e0       	ldi	r22, 0x01	; 1
    2eb6:	42 e0       	ldi	r20, 0x02	; 2
    2eb8:	0e 94 88 16 	call	0x2d10	; 0x2d10 <_ZN12OrangutanLCD4sendEhhh>
    2ebc:	08 95       	ret

00002ebe <_ZN12OrangutanLCD11printBinaryEh>:
    2ebe:	0f 93       	push	r16
    2ec0:	1f 93       	push	r17
    2ec2:	cf 93       	push	r28
    2ec4:	df 93       	push	r29
    2ec6:	00 e0       	ldi	r16, 0x00	; 0
    2ec8:	10 e8       	ldi	r17, 0x80	; 128
    2eca:	c8 2f       	mov	r28, r24
    2ecc:	d0 e0       	ldi	r29, 0x00	; 0
    2ece:	81 2f       	mov	r24, r17
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	8c 23       	and	r24, r28
    2ed4:	9d 23       	and	r25, r29
    2ed6:	89 2b       	or	r24, r25
    2ed8:	11 f0       	breq	.+4      	; 0x2ede <_ZN12OrangutanLCD11printBinaryEh+0x20>
    2eda:	81 e3       	ldi	r24, 0x31	; 49
    2edc:	01 c0       	rjmp	.+2      	; 0x2ee0 <_ZN12OrangutanLCD11printBinaryEh+0x22>
    2ede:	80 e3       	ldi	r24, 0x30	; 48
    2ee0:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN12OrangutanLCD9send_dataEh>
    2ee4:	0f 5f       	subi	r16, 0xFF	; 255
    2ee6:	08 30       	cpi	r16, 0x08	; 8
    2ee8:	11 f0       	breq	.+4      	; 0x2eee <_ZN12OrangutanLCD11printBinaryEh+0x30>
    2eea:	16 95       	lsr	r17
    2eec:	f0 cf       	rjmp	.-32     	; 0x2ece <_ZN12OrangutanLCD11printBinaryEh+0x10>
    2eee:	df 91       	pop	r29
    2ef0:	cf 91       	pop	r28
    2ef2:	1f 91       	pop	r17
    2ef4:	0f 91       	pop	r16
    2ef6:	08 95       	ret

00002ef8 <print_binary>:
    2ef8:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <_ZN12OrangutanLCD11printBinaryEh>
    2efc:	08 95       	ret

00002efe <_ZN12OrangutanLCD14printHexNibbleEh>:
    2efe:	8a 30       	cpi	r24, 0x0A	; 10
    2f00:	10 f4       	brcc	.+4      	; 0x2f06 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    2f02:	80 5d       	subi	r24, 0xD0	; 208
    2f04:	01 c0       	rjmp	.+2      	; 0x2f08 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    2f06:	89 5c       	subi	r24, 0xC9	; 201
    2f08:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN12OrangutanLCD9send_dataEh>
    2f0c:	08 95       	ret

00002f0e <_ZN12OrangutanLCD8printHexEh>:
    2f0e:	1f 93       	push	r17
    2f10:	18 2f       	mov	r17, r24
    2f12:	82 95       	swap	r24
    2f14:	8f 70       	andi	r24, 0x0F	; 15
    2f16:	0e 94 7f 17 	call	0x2efe	; 0x2efe <_ZN12OrangutanLCD14printHexNibbleEh>
    2f1a:	81 2f       	mov	r24, r17
    2f1c:	8f 70       	andi	r24, 0x0F	; 15
    2f1e:	0e 94 7f 17 	call	0x2efe	; 0x2efe <_ZN12OrangutanLCD14printHexNibbleEh>
    2f22:	1f 91       	pop	r17
    2f24:	08 95       	ret

00002f26 <_ZN12OrangutanLCD8printHexEj>:
    2f26:	1f 93       	push	r17
    2f28:	18 2f       	mov	r17, r24
    2f2a:	89 2f       	mov	r24, r25
    2f2c:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <_ZN12OrangutanLCD8printHexEh>
    2f30:	81 2f       	mov	r24, r17
    2f32:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <_ZN12OrangutanLCD8printHexEh>
    2f36:	1f 91       	pop	r17
    2f38:	08 95       	ret

00002f3a <print_hex>:
    2f3a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <_ZN12OrangutanLCD8printHexEj>
    2f3e:	08 95       	ret

00002f40 <print_hex_byte>:
    2f40:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <_ZN12OrangutanLCD8printHexEh>
    2f44:	08 95       	ret

00002f46 <_ZN12OrangutanLCD5printEm>:
    2f46:	6f 92       	push	r6
    2f48:	7f 92       	push	r7
    2f4a:	8f 92       	push	r8
    2f4c:	9f 92       	push	r9
    2f4e:	af 92       	push	r10
    2f50:	bf 92       	push	r11
    2f52:	cf 92       	push	r12
    2f54:	df 92       	push	r13
    2f56:	ff 92       	push	r15
    2f58:	0f 93       	push	r16
    2f5a:	df 93       	push	r29
    2f5c:	cf 93       	push	r28
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	2a 97       	sbiw	r28, 0x0a	; 10
    2f64:	0f b6       	in	r0, 0x3f	; 63
    2f66:	f8 94       	cli
    2f68:	de bf       	out	0x3e, r29	; 62
    2f6a:	0f be       	out	0x3f, r0	; 63
    2f6c:	cd bf       	out	0x3d, r28	; 61
    2f6e:	5b 01       	movw	r10, r22
    2f70:	6c 01       	movw	r12, r24
    2f72:	0a e0       	ldi	r16, 0x0A	; 10
    2f74:	3e 01       	movw	r6, r28
    2f76:	08 94       	sec
    2f78:	61 1c       	adc	r6, r1
    2f7a:	71 1c       	adc	r7, r1
    2f7c:	fa 2c       	mov	r15, r10
    2f7e:	c6 01       	movw	r24, r12
    2f80:	b5 01       	movw	r22, r10
    2f82:	2a e0       	ldi	r18, 0x0A	; 10
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e0       	ldi	r20, 0x00	; 0
    2f88:	50 e0       	ldi	r21, 0x00	; 0
    2f8a:	0e 94 00 22 	call	0x4400	; 0x4400 <__udivmodsi4>
    2f8e:	c9 01       	movw	r24, r18
    2f90:	da 01       	movw	r26, r20
    2f92:	5c 01       	movw	r10, r24
    2f94:	6d 01       	movw	r12, r26
    2f96:	01 50       	subi	r16, 0x01	; 1
    2f98:	43 01       	movw	r8, r6
    2f9a:	80 0e       	add	r8, r16
    2f9c:	91 1c       	adc	r9, r1
    2f9e:	80 e3       	ldi	r24, 0x30	; 48
    2fa0:	f8 0e       	add	r15, r24
    2fa2:	c6 01       	movw	r24, r12
    2fa4:	b5 01       	movw	r22, r10
    2fa6:	2a e0       	ldi	r18, 0x0A	; 10
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	40 e0       	ldi	r20, 0x00	; 0
    2fac:	50 e0       	ldi	r21, 0x00	; 0
    2fae:	0e 94 ce 21 	call	0x439c	; 0x439c <__mulsi3>
    2fb2:	f6 1a       	sub	r15, r22
    2fb4:	f4 01       	movw	r30, r8
    2fb6:	f0 82       	st	Z, r15
    2fb8:	a1 14       	cp	r10, r1
    2fba:	b1 04       	cpc	r11, r1
    2fbc:	c1 04       	cpc	r12, r1
    2fbe:	d1 04       	cpc	r13, r1
    2fc0:	e9 f6       	brne	.-70     	; 0x2f7c <_ZN12OrangutanLCD5printEm+0x36>
    2fc2:	08 c0       	rjmp	.+16     	; 0x2fd4 <_ZN12OrangutanLCD5printEm+0x8e>
    2fc4:	f6 01       	movw	r30, r12
    2fc6:	e0 0f       	add	r30, r16
    2fc8:	f1 1d       	adc	r31, r1
    2fca:	80 81       	ld	r24, Z
    2fcc:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN12OrangutanLCD9send_dataEh>
    2fd0:	0f 5f       	subi	r16, 0xFF	; 255
    2fd2:	04 c0       	rjmp	.+8      	; 0x2fdc <_ZN12OrangutanLCD5printEm+0x96>
    2fd4:	6e 01       	movw	r12, r28
    2fd6:	08 94       	sec
    2fd8:	c1 1c       	adc	r12, r1
    2fda:	d1 1c       	adc	r13, r1
    2fdc:	0a 30       	cpi	r16, 0x0A	; 10
    2fde:	90 f3       	brcs	.-28     	; 0x2fc4 <_ZN12OrangutanLCD5printEm+0x7e>
    2fe0:	2a 96       	adiw	r28, 0x0a	; 10
    2fe2:	0f b6       	in	r0, 0x3f	; 63
    2fe4:	f8 94       	cli
    2fe6:	de bf       	out	0x3e, r29	; 62
    2fe8:	0f be       	out	0x3f, r0	; 63
    2fea:	cd bf       	out	0x3d, r28	; 61
    2fec:	cf 91       	pop	r28
    2fee:	df 91       	pop	r29
    2ff0:	0f 91       	pop	r16
    2ff2:	ff 90       	pop	r15
    2ff4:	df 90       	pop	r13
    2ff6:	cf 90       	pop	r12
    2ff8:	bf 90       	pop	r11
    2ffa:	af 90       	pop	r10
    2ffc:	9f 90       	pop	r9
    2ffe:	8f 90       	pop	r8
    3000:	7f 90       	pop	r7
    3002:	6f 90       	pop	r6
    3004:	08 95       	ret

00003006 <print_unsigned_long>:
    3006:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN12OrangutanLCD5printEm>
    300a:	08 95       	ret

0000300c <_ZN12OrangutanLCD5printEl>:
    300c:	ef 92       	push	r14
    300e:	ff 92       	push	r15
    3010:	0f 93       	push	r16
    3012:	1f 93       	push	r17
    3014:	7b 01       	movw	r14, r22
    3016:	8c 01       	movw	r16, r24
    3018:	97 ff       	sbrs	r25, 7
    301a:	0b c0       	rjmp	.+22     	; 0x3032 <_ZN12OrangutanLCD5printEl+0x26>
    301c:	10 95       	com	r17
    301e:	00 95       	com	r16
    3020:	f0 94       	com	r15
    3022:	e0 94       	com	r14
    3024:	e1 1c       	adc	r14, r1
    3026:	f1 1c       	adc	r15, r1
    3028:	01 1d       	adc	r16, r1
    302a:	11 1d       	adc	r17, r1
    302c:	8d e2       	ldi	r24, 0x2D	; 45
    302e:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN12OrangutanLCD9send_dataEh>
    3032:	c8 01       	movw	r24, r16
    3034:	b7 01       	movw	r22, r14
    3036:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN12OrangutanLCD5printEm>
    303a:	1f 91       	pop	r17
    303c:	0f 91       	pop	r16
    303e:	ff 90       	pop	r15
    3040:	ef 90       	pop	r14
    3042:	08 95       	ret

00003044 <print_long>:
    3044:	0e 94 06 18 	call	0x300c	; 0x300c <_ZN12OrangutanLCD5printEl>
    3048:	08 95       	ret

0000304a <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    304a:	cf 93       	push	r28
    304c:	df 93       	push	r29
    304e:	ec 01       	movw	r28, r24
    3050:	03 c0       	rjmp	.+6      	; 0x3058 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    3052:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN12OrangutanLCD9send_dataEh>
    3056:	21 96       	adiw	r28, 0x01	; 1
    3058:	fe 01       	movw	r30, r28
    305a:	84 91       	lpm	r24, Z+
    305c:	88 23       	and	r24, r24
    305e:	c9 f7       	brne	.-14     	; 0x3052 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    3060:	df 91       	pop	r29
    3062:	cf 91       	pop	r28
    3064:	08 95       	ret

00003066 <print_from_program_space>:
    3066:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    306a:	08 95       	ret

0000306c <_ZN12OrangutanLCD5printEPKc>:
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	ec 01       	movw	r28, r24
    3072:	03 c0       	rjmp	.+6      	; 0x307a <_ZN12OrangutanLCD5printEPKc+0xe>
    3074:	21 96       	adiw	r28, 0x01	; 1
    3076:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN12OrangutanLCD9send_dataEh>
    307a:	88 81       	ld	r24, Y
    307c:	88 23       	and	r24, r24
    307e:	d1 f7       	brne	.-12     	; 0x3074 <_ZN12OrangutanLCD5printEPKc+0x8>
    3080:	df 91       	pop	r29
    3082:	cf 91       	pop	r28
    3084:	08 95       	ret

00003086 <_ZN12OrangutanLCD7printInEPKc>:
    3086:	0e 94 36 18 	call	0x306c	; 0x306c <_ZN12OrangutanLCD5printEPKc>
    308a:	08 95       	ret

0000308c <print>:
    308c:	0e 94 36 18 	call	0x306c	; 0x306c <_ZN12OrangutanLCD5printEPKc>
    3090:	08 95       	ret

00003092 <_ZN12OrangutanLCD5printEc>:
    3092:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN12OrangutanLCD9send_dataEh>
    3096:	08 95       	ret

00003098 <print_character>:
    3098:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN12OrangutanLCD9send_dataEh>
    309c:	08 95       	ret

0000309e <lcd_putchar>:
    309e:	a0 e0       	ldi	r26, 0x00	; 0
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	e5 e5       	ldi	r30, 0x55	; 85
    30a4:	f8 e1       	ldi	r31, 0x18	; 24
    30a6:	0c 94 2c 22 	jmp	0x4458	; 0x4458 <__prologue_saves__+0x14>
    30aa:	e8 2e       	mov	r14, r24
    30ac:	80 91 c0 08 	lds	r24, 0x08C0
    30b0:	90 91 c1 08 	lds	r25, 0x08C1
    30b4:	89 2b       	or	r24, r25
    30b6:	09 f4       	brne	.+2      	; 0x30ba <lcd_putchar+0x1c>
    30b8:	05 c1       	rjmp	.+522    	; 0x32c4 <lcd_putchar+0x226>
    30ba:	2a e0       	ldi	r18, 0x0A	; 10
    30bc:	e2 16       	cp	r14, r18
    30be:	09 f4       	brne	.+2      	; 0x30c2 <lcd_putchar+0x24>
    30c0:	46 c0       	rjmp	.+140    	; 0x314e <lcd_putchar+0xb0>
    30c2:	38 e0       	ldi	r19, 0x08	; 8
    30c4:	e3 16       	cp	r14, r19
    30c6:	c9 f4       	brne	.+50     	; 0x30fa <lcd_putchar+0x5c>
    30c8:	80 91 c3 08 	lds	r24, 0x08C3
    30cc:	81 50       	subi	r24, 0x01	; 1
    30ce:	80 93 c3 08 	sts	0x08C3, r24
    30d2:	8f 3f       	cpi	r24, 0xFF	; 255
    30d4:	51 f4       	brne	.+20     	; 0x30ea <lcd_putchar+0x4c>
    30d6:	80 91 c2 08 	lds	r24, 0x08C2
    30da:	81 50       	subi	r24, 0x01	; 1
    30dc:	80 93 c2 08 	sts	0x08C2, r24
    30e0:	80 91 8e 08 	lds	r24, 0x088E
    30e4:	81 50       	subi	r24, 0x01	; 1
    30e6:	80 93 c3 08 	sts	0x08C3, r24
    30ea:	80 91 c2 08 	lds	r24, 0x08C2
    30ee:	8f 3f       	cpi	r24, 0xFF	; 255
    30f0:	09 f0       	breq	.+2      	; 0x30f4 <lcd_putchar+0x56>
    30f2:	e2 c0       	rjmp	.+452    	; 0x32b8 <lcd_putchar+0x21a>
    30f4:	10 92 c2 08 	sts	0x08C2, r1
    30f8:	dd c0       	rjmp	.+442    	; 0x32b4 <lcd_putchar+0x216>
    30fa:	8e 2d       	mov	r24, r14
    30fc:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN12OrangutanLCD9send_dataEh>
    3100:	20 91 c2 08 	lds	r18, 0x08C2
    3104:	22 23       	and	r18, r18
    3106:	c9 f0       	breq	.+50     	; 0x313a <lcd_putchar+0x9c>
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	21 50       	subi	r18, 0x01	; 1
    310c:	30 40       	sbci	r19, 0x00	; 0
    310e:	80 91 8e 08 	lds	r24, 0x088E
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	ac 01       	movw	r20, r24
    3116:	24 9f       	mul	r18, r20
    3118:	c0 01       	movw	r24, r0
    311a:	25 9f       	mul	r18, r21
    311c:	90 0d       	add	r25, r0
    311e:	34 9f       	mul	r19, r20
    3120:	90 0d       	add	r25, r0
    3122:	11 24       	eor	r1, r1
    3124:	20 91 c3 08 	lds	r18, 0x08C3
    3128:	e0 91 c0 08 	lds	r30, 0x08C0
    312c:	f0 91 c1 08 	lds	r31, 0x08C1
    3130:	e8 0f       	add	r30, r24
    3132:	f9 1f       	adc	r31, r25
    3134:	e2 0f       	add	r30, r18
    3136:	f1 1d       	adc	r31, r1
    3138:	e0 82       	st	Z, r14
    313a:	80 91 c3 08 	lds	r24, 0x08C3
    313e:	8f 5f       	subi	r24, 0xFF	; 255
    3140:	80 93 c3 08 	sts	0x08C3, r24
    3144:	90 91 8e 08 	lds	r25, 0x088E
    3148:	89 17       	cp	r24, r25
    314a:	09 f0       	breq	.+2      	; 0x314e <lcd_putchar+0xb0>
    314c:	bb c0       	rjmp	.+374    	; 0x32c4 <lcd_putchar+0x226>
    314e:	40 91 c2 08 	lds	r20, 0x08C2
    3152:	24 2f       	mov	r18, r20
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	80 91 8d 08 	lds	r24, 0x088D
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	28 17       	cp	r18, r24
    3160:	39 07       	cpc	r19, r25
    3162:	09 f0       	breq	.+2      	; 0x3166 <lcd_putchar+0xc8>
    3164:	a4 c0       	rjmp	.+328    	; 0x32ae <lcd_putchar+0x210>
    3166:	c0 e0       	ldi	r28, 0x00	; 0
    3168:	d0 e0       	ldi	r29, 0x00	; 0
    316a:	44 c0       	rjmp	.+136    	; 0x31f4 <lcd_putchar+0x156>
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	6c 2f       	mov	r22, r28
    3170:	0e 94 08 17 	call	0x2e10	; 0x2e10 <_ZN12OrangutanLCD6gotoXYEhh>
    3174:	ff 24       	eor	r15, r15
    3176:	6e 01       	movw	r12, r28
    3178:	08 94       	sec
    317a:	c1 1c       	adc	r12, r1
    317c:	d1 1c       	adc	r13, r1
    317e:	35 c0       	rjmp	.+106    	; 0x31ea <lcd_putchar+0x14c>
    3180:	0f 2d       	mov	r16, r15
    3182:	10 e0       	ldi	r17, 0x00	; 0
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	9c 01       	movw	r18, r24
    3188:	c2 9f       	mul	r28, r18
    318a:	c0 01       	movw	r24, r0
    318c:	c3 9f       	mul	r28, r19
    318e:	90 0d       	add	r25, r0
    3190:	d2 9f       	mul	r29, r18
    3192:	90 0d       	add	r25, r0
    3194:	11 24       	eor	r1, r1
    3196:	e0 91 c0 08 	lds	r30, 0x08C0
    319a:	f0 91 c1 08 	lds	r31, 0x08C1
    319e:	e0 0f       	add	r30, r16
    31a0:	f1 1f       	adc	r31, r17
    31a2:	e8 0f       	add	r30, r24
    31a4:	f9 1f       	adc	r31, r25
    31a6:	80 81       	ld	r24, Z
    31a8:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN12OrangutanLCD9send_dataEh>
    31ac:	e0 91 c0 08 	lds	r30, 0x08C0
    31b0:	f0 91 c1 08 	lds	r31, 0x08C1
    31b4:	80 91 8e 08 	lds	r24, 0x088E
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	c8 9f       	mul	r28, r24
    31bc:	d0 01       	movw	r26, r0
    31be:	c9 9f       	mul	r28, r25
    31c0:	b0 0d       	add	r27, r0
    31c2:	d8 9f       	mul	r29, r24
    31c4:	b0 0d       	add	r27, r0
    31c6:	11 24       	eor	r1, r1
    31c8:	e0 0f       	add	r30, r16
    31ca:	f1 1f       	adc	r31, r17
    31cc:	ae 0f       	add	r26, r30
    31ce:	bf 1f       	adc	r27, r31
    31d0:	ac 01       	movw	r20, r24
    31d2:	c4 9e       	mul	r12, r20
    31d4:	c0 01       	movw	r24, r0
    31d6:	c5 9e       	mul	r12, r21
    31d8:	90 0d       	add	r25, r0
    31da:	d4 9e       	mul	r13, r20
    31dc:	90 0d       	add	r25, r0
    31de:	11 24       	eor	r1, r1
    31e0:	e8 0f       	add	r30, r24
    31e2:	f9 1f       	adc	r31, r25
    31e4:	80 81       	ld	r24, Z
    31e6:	8c 93       	st	X, r24
    31e8:	f3 94       	inc	r15
    31ea:	80 91 8e 08 	lds	r24, 0x088E
    31ee:	f8 16       	cp	r15, r24
    31f0:	38 f2       	brcs	.-114    	; 0x3180 <lcd_putchar+0xe2>
    31f2:	e6 01       	movw	r28, r12
    31f4:	60 91 8d 08 	lds	r22, 0x088D
    31f8:	86 2f       	mov	r24, r22
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	02 97       	sbiw	r24, 0x02	; 2
    31fe:	c8 17       	cp	r28, r24
    3200:	d9 07       	cpc	r29, r25
    3202:	0c f4       	brge	.+2      	; 0x3206 <lcd_putchar+0x168>
    3204:	b3 cf       	rjmp	.-154    	; 0x316c <lcd_putchar+0xce>
    3206:	62 30       	cpi	r22, 0x02	; 2
    3208:	08 f4       	brcc	.+2      	; 0x320c <lcd_putchar+0x16e>
    320a:	40 c0       	rjmp	.+128    	; 0x328c <lcd_putchar+0x1ee>
    320c:	62 50       	subi	r22, 0x02	; 2
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	0e 94 08 17 	call	0x2e10	; 0x2e10 <_ZN12OrangutanLCD6gotoXYEhh>
    3214:	ff 24       	eor	r15, r15
    3216:	40 e2       	ldi	r20, 0x20	; 32
    3218:	d4 2e       	mov	r13, r20
    321a:	34 c0       	rjmp	.+104    	; 0x3284 <lcd_putchar+0x1e6>
    321c:	0f 2d       	mov	r16, r15
    321e:	10 e0       	ldi	r17, 0x00	; 0
    3220:	80 91 8d 08 	lds	r24, 0x088D
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	02 97       	sbiw	r24, 0x02	; 2
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	ac 01       	movw	r20, r24
    322c:	42 9f       	mul	r20, r18
    322e:	c0 01       	movw	r24, r0
    3230:	43 9f       	mul	r20, r19
    3232:	90 0d       	add	r25, r0
    3234:	52 9f       	mul	r21, r18
    3236:	90 0d       	add	r25, r0
    3238:	11 24       	eor	r1, r1
    323a:	e0 91 c0 08 	lds	r30, 0x08C0
    323e:	f0 91 c1 08 	lds	r31, 0x08C1
    3242:	e0 0f       	add	r30, r16
    3244:	f1 1f       	adc	r31, r17
    3246:	e8 0f       	add	r30, r24
    3248:	f9 1f       	adc	r31, r25
    324a:	80 81       	ld	r24, Z
    324c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN12OrangutanLCD9send_dataEh>
    3250:	20 91 8d 08 	lds	r18, 0x088D
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	22 50       	subi	r18, 0x02	; 2
    3258:	30 40       	sbci	r19, 0x00	; 0
    325a:	80 91 8e 08 	lds	r24, 0x088E
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	ac 01       	movw	r20, r24
    3262:	24 9f       	mul	r18, r20
    3264:	c0 01       	movw	r24, r0
    3266:	25 9f       	mul	r18, r21
    3268:	90 0d       	add	r25, r0
    326a:	34 9f       	mul	r19, r20
    326c:	90 0d       	add	r25, r0
    326e:	11 24       	eor	r1, r1
    3270:	e0 91 c0 08 	lds	r30, 0x08C0
    3274:	f0 91 c1 08 	lds	r31, 0x08C1
    3278:	e0 0f       	add	r30, r16
    327a:	f1 1f       	adc	r31, r17
    327c:	e8 0f       	add	r30, r24
    327e:	f9 1f       	adc	r31, r25
    3280:	d0 82       	st	Z, r13
    3282:	f3 94       	inc	r15
    3284:	20 91 8e 08 	lds	r18, 0x088E
    3288:	f2 16       	cp	r15, r18
    328a:	40 f2       	brcs	.-112    	; 0x321c <lcd_putchar+0x17e>
    328c:	60 91 8d 08 	lds	r22, 0x088D
    3290:	61 50       	subi	r22, 0x01	; 1
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	0e 94 08 17 	call	0x2e10	; 0x2e10 <_ZN12OrangutanLCD6gotoXYEhh>
    3298:	00 e0       	ldi	r16, 0x00	; 0
    329a:	04 c0       	rjmp	.+8      	; 0x32a4 <lcd_putchar+0x206>
    329c:	80 e2       	ldi	r24, 0x20	; 32
    329e:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN12OrangutanLCD9send_dataEh>
    32a2:	0f 5f       	subi	r16, 0xFF	; 255
    32a4:	80 91 8e 08 	lds	r24, 0x088E
    32a8:	08 17       	cp	r16, r24
    32aa:	c0 f3       	brcs	.-16     	; 0x329c <lcd_putchar+0x1fe>
    32ac:	03 c0       	rjmp	.+6      	; 0x32b4 <lcd_putchar+0x216>
    32ae:	4f 5f       	subi	r20, 0xFF	; 255
    32b0:	40 93 c2 08 	sts	0x08C2, r20
    32b4:	10 92 c3 08 	sts	0x08C3, r1
    32b8:	80 91 c3 08 	lds	r24, 0x08C3
    32bc:	60 91 c2 08 	lds	r22, 0x08C2
    32c0:	0e 94 08 17 	call	0x2e10	; 0x2e10 <_ZN12OrangutanLCD6gotoXYEhh>
    32c4:	2e 2d       	mov	r18, r14
    32c6:	33 27       	eor	r19, r19
    32c8:	27 fd       	sbrc	r18, 7
    32ca:	30 95       	com	r19
    32cc:	c9 01       	movw	r24, r18
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
    32d2:	e8 e0       	ldi	r30, 0x08	; 8
    32d4:	0c 94 48 22 	jmp	0x4490	; 0x4490 <__epilogue_restores__+0x14>

000032d8 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    32d8:	ef 92       	push	r14
    32da:	ff 92       	push	r15
    32dc:	0f 93       	push	r16
    32de:	1f 93       	push	r17
    32e0:	cf 93       	push	r28
    32e2:	df 93       	push	r29
    32e4:	7c 01       	movw	r14, r24
    32e6:	06 2f       	mov	r16, r22
    32e8:	10 e0       	ldi	r17, 0x00	; 0
    32ea:	53 e0       	ldi	r21, 0x03	; 3
    32ec:	00 0f       	add	r16, r16
    32ee:	11 1f       	adc	r17, r17
    32f0:	5a 95       	dec	r21
    32f2:	e1 f7       	brne	.-8      	; 0x32ec <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    32f4:	c0 e0       	ldi	r28, 0x00	; 0
    32f6:	d0 e0       	ldi	r29, 0x00	; 0
    32f8:	9e 01       	movw	r18, r28
    32fa:	20 0f       	add	r18, r16
    32fc:	82 2f       	mov	r24, r18
    32fe:	80 64       	ori	r24, 0x40	; 64
    3300:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZN12OrangutanLCD8send_cmdEh>
    3304:	f7 01       	movw	r30, r14
    3306:	ec 0f       	add	r30, r28
    3308:	fd 1f       	adc	r31, r29
    330a:	e4 91       	lpm	r30, Z+
    330c:	8e 2f       	mov	r24, r30
    330e:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN12OrangutanLCD9send_dataEh>
    3312:	21 96       	adiw	r28, 0x01	; 1
    3314:	c8 30       	cpi	r28, 0x08	; 8
    3316:	d1 05       	cpc	r29, r1
    3318:	79 f7       	brne	.-34     	; 0x32f8 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	e6 e0       	ldi	r30, 0x06	; 6
    3320:	0c 94 4a 22 	jmp	0x4494	; 0x4494 <__epilogue_restores__+0x18>

00003324 <lcd_load_custom_character>:
    3324:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    3328:	08 95       	ret

0000332a <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    332a:	60 e0       	ldi	r22, 0x00	; 0
    332c:	41 e0       	ldi	r20, 0x01	; 1
    332e:	0e 94 88 16 	call	0x2d10	; 0x2d10 <_ZN12OrangutanLCD4sendEhhh>
    3332:	08 95       	ret

00003334 <_ZN12OrangutanLCD6scrollEhhj>:
    3334:	0f 93       	push	r16
    3336:	1f 93       	push	r17
    3338:	cf 93       	push	r28
    333a:	df 93       	push	r29
    333c:	08 2f       	mov	r16, r24
    333e:	16 2f       	mov	r17, r22
    3340:	ea 01       	movw	r28, r20
    3342:	0b c0       	rjmp	.+22     	; 0x335a <_ZN12OrangutanLCD6scrollEhhj+0x26>
    3344:	00 23       	and	r16, r16
    3346:	11 f4       	brne	.+4      	; 0x334c <_ZN12OrangutanLCD6scrollEhhj+0x18>
    3348:	88 e1       	ldi	r24, 0x18	; 24
    334a:	01 c0       	rjmp	.+2      	; 0x334e <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    334c:	8c e1       	ldi	r24, 0x1C	; 28
    334e:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <_ZN12OrangutanLCD8send_cmdEh>
    3352:	ce 01       	movw	r24, r28
    3354:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <delay_ms>
    3358:	11 50       	subi	r17, 0x01	; 1
    335a:	11 23       	and	r17, r17
    335c:	99 f7       	brne	.-26     	; 0x3344 <_ZN12OrangutanLCD6scrollEhhj+0x10>
    335e:	df 91       	pop	r29
    3360:	cf 91       	pop	r28
    3362:	1f 91       	pop	r17
    3364:	0f 91       	pop	r16
    3366:	08 95       	ret

00003368 <lcd_scroll>:
    3368:	0e 94 9a 19 	call	0x3334	; 0x3334 <_ZN12OrangutanLCD6scrollEhhj>
    336c:	08 95       	ret

0000336e <serial_get_mode>:
    336e:	28 2f       	mov	r18, r24
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	f9 01       	movw	r30, r18
    3374:	93 e0       	ldi	r25, 0x03	; 3
    3376:	ee 0f       	add	r30, r30
    3378:	ff 1f       	adc	r31, r31
    337a:	9a 95       	dec	r25
    337c:	e1 f7       	brne	.-8      	; 0x3376 <serial_get_mode+0x8>
    337e:	22 0f       	add	r18, r18
    3380:	33 1f       	adc	r19, r19
    3382:	e2 0f       	add	r30, r18
    3384:	f3 1f       	adc	r31, r19
    3386:	e1 57       	subi	r30, 0x71	; 113
    3388:	f7 4f       	sbci	r31, 0xF7	; 247
    338a:	80 81       	ld	r24, Z
    338c:	08 95       	ret

0000338e <serial_get_received_bytes>:
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	fc 01       	movw	r30, r24
    3392:	ee 0f       	add	r30, r30
    3394:	ff 1f       	adc	r31, r31
    3396:	ee 0f       	add	r30, r30
    3398:	ff 1f       	adc	r31, r31
    339a:	e8 0f       	add	r30, r24
    339c:	f9 1f       	adc	r31, r25
    339e:	ee 0f       	add	r30, r30
    33a0:	ff 1f       	adc	r31, r31
    33a2:	ef 56       	subi	r30, 0x6F	; 111
    33a4:	f7 4f       	sbci	r31, 0xF7	; 247
    33a6:	80 81       	ld	r24, Z
    33a8:	08 95       	ret

000033aa <serial_receive_buffer_full>:
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	fc 01       	movw	r30, r24
    33ae:	ee 0f       	add	r30, r30
    33b0:	ff 1f       	adc	r31, r31
    33b2:	ee 0f       	add	r30, r30
    33b4:	ff 1f       	adc	r31, r31
    33b6:	e8 0f       	add	r30, r24
    33b8:	f9 1f       	adc	r31, r25
    33ba:	ee 0f       	add	r30, r30
    33bc:	ff 1f       	adc	r31, r31
    33be:	ef 56       	subi	r30, 0x6F	; 111
    33c0:	f7 4f       	sbci	r31, 0xF7	; 247
    33c2:	20 81       	ld	r18, Z
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	fc 01       	movw	r30, r24
    33c8:	53 e0       	ldi	r21, 0x03	; 3
    33ca:	ee 0f       	add	r30, r30
    33cc:	ff 1f       	adc	r31, r31
    33ce:	5a 95       	dec	r21
    33d0:	e1 f7       	brne	.-8      	; 0x33ca <serial_receive_buffer_full+0x20>
    33d2:	88 0f       	add	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	e8 0f       	add	r30, r24
    33d8:	f9 1f       	adc	r31, r25
    33da:	e1 57       	subi	r30, 0x71	; 113
    33dc:	f7 4f       	sbci	r31, 0xF7	; 247
    33de:	84 81       	ldd	r24, Z+4	; 0x04
    33e0:	28 17       	cp	r18, r24
    33e2:	09 f4       	brne	.+2      	; 0x33e6 <serial_receive_buffer_full+0x3c>
    33e4:	31 e0       	ldi	r19, 0x01	; 1
    33e6:	83 2f       	mov	r24, r19
    33e8:	08 95       	ret

000033ea <serial_get_sent_bytes>:
    33ea:	28 2f       	mov	r18, r24
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	f9 01       	movw	r30, r18
    33f0:	b3 e0       	ldi	r27, 0x03	; 3
    33f2:	ee 0f       	add	r30, r30
    33f4:	ff 1f       	adc	r31, r31
    33f6:	ba 95       	dec	r27
    33f8:	e1 f7       	brne	.-8      	; 0x33f2 <serial_get_sent_bytes+0x8>
    33fa:	22 0f       	add	r18, r18
    33fc:	33 1f       	adc	r19, r19
    33fe:	e2 0f       	add	r30, r18
    3400:	f3 1f       	adc	r31, r19
    3402:	e1 57       	subi	r30, 0x71	; 113
    3404:	f7 4f       	sbci	r31, 0xF7	; 247
    3406:	81 81       	ldd	r24, Z+1	; 0x01
    3408:	08 95       	ret

0000340a <serial_send_buffer_empty>:
    340a:	28 2f       	mov	r18, r24
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	f9 01       	movw	r30, r18
    3410:	73 e0       	ldi	r23, 0x03	; 3
    3412:	ee 0f       	add	r30, r30
    3414:	ff 1f       	adc	r31, r31
    3416:	7a 95       	dec	r23
    3418:	e1 f7       	brne	.-8      	; 0x3412 <serial_send_buffer_empty+0x8>
    341a:	22 0f       	add	r18, r18
    341c:	33 1f       	adc	r19, r19
    341e:	e2 0f       	add	r30, r18
    3420:	f3 1f       	adc	r31, r19
    3422:	e1 57       	subi	r30, 0x71	; 113
    3424:	f7 4f       	sbci	r31, 0xF7	; 247
    3426:	91 81       	ldd	r25, Z+1	; 0x01
    3428:	40 e0       	ldi	r20, 0x00	; 0
    342a:	28 2f       	mov	r18, r24
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	f9 01       	movw	r30, r18
    3430:	53 e0       	ldi	r21, 0x03	; 3
    3432:	ee 0f       	add	r30, r30
    3434:	ff 1f       	adc	r31, r31
    3436:	5a 95       	dec	r21
    3438:	e1 f7       	brne	.-8      	; 0x3432 <serial_send_buffer_empty+0x28>
    343a:	22 0f       	add	r18, r18
    343c:	33 1f       	adc	r19, r19
    343e:	e2 0f       	add	r30, r18
    3440:	f3 1f       	adc	r31, r19
    3442:	e1 57       	subi	r30, 0x71	; 113
    3444:	f7 4f       	sbci	r31, 0xF7	; 247
    3446:	83 81       	ldd	r24, Z+3	; 0x03
    3448:	98 17       	cp	r25, r24
    344a:	09 f4       	brne	.+2      	; 0x344e <serial_send_buffer_empty+0x44>
    344c:	41 e0       	ldi	r20, 0x01	; 1
    344e:	84 2f       	mov	r24, r20
    3450:	08 95       	ret

00003452 <_ZN15OrangutanSerialC2Ev>:
    3452:	08 95       	ret

00003454 <_ZN15OrangutanSerialC1Ev>:
    3454:	08 95       	ret

00003456 <_ZN15OrangutanSerial8initPortEh>:
    3456:	88 23       	and	r24, r24
    3458:	21 f0       	breq	.+8      	; 0x3462 <_ZN15OrangutanSerial8initPortEh+0xc>
    345a:	81 30       	cpi	r24, 0x01	; 1
    345c:	09 f0       	breq	.+2      	; 0x3460 <_ZN15OrangutanSerial8initPortEh+0xa>
    345e:	44 c0       	rjmp	.+136    	; 0x34e8 <_ZN15OrangutanSerial8initPortEh+0x92>
    3460:	1d c0       	rjmp	.+58     	; 0x349c <_ZN15OrangutanSerial8initPortEh+0x46>
    3462:	20 91 8f 08 	lds	r18, 0x088F
    3466:	22 23       	and	r18, r18
    3468:	11 f4       	brne	.+4      	; 0x346e <_ZN15OrangutanSerial8initPortEh+0x18>
    346a:	88 e9       	ldi	r24, 0x98	; 152
    346c:	01 c0       	rjmp	.+2      	; 0x3470 <_ZN15OrangutanSerial8initPortEh+0x1a>
    346e:	88 e1       	ldi	r24, 0x18	; 24
    3470:	80 93 c1 00 	sts	0x00C1, r24
    3474:	80 91 95 08 	lds	r24, 0x0895
    3478:	90 91 96 08 	lds	r25, 0x0896
    347c:	89 2b       	or	r24, r25
    347e:	61 f1       	breq	.+88     	; 0x34d8 <_ZN15OrangutanSerial8initPortEh+0x82>
    3480:	90 91 90 08 	lds	r25, 0x0890
    3484:	80 91 92 08 	lds	r24, 0x0892
    3488:	98 17       	cp	r25, r24
    348a:	30 f5       	brcc	.+76     	; 0x34d8 <_ZN15OrangutanSerial8initPortEh+0x82>
    348c:	22 23       	and	r18, r18
    348e:	21 f5       	brne	.+72     	; 0x34d8 <_ZN15OrangutanSerial8initPortEh+0x82>
    3490:	80 91 c1 00 	lds	r24, 0x00C1
    3494:	80 62       	ori	r24, 0x20	; 32
    3496:	80 93 c1 00 	sts	0x00C1, r24
    349a:	1c c0       	rjmp	.+56     	; 0x34d4 <_ZN15OrangutanSerial8initPortEh+0x7e>
    349c:	20 91 99 08 	lds	r18, 0x0899
    34a0:	22 23       	and	r18, r18
    34a2:	11 f4       	brne	.+4      	; 0x34a8 <_ZN15OrangutanSerial8initPortEh+0x52>
    34a4:	88 e9       	ldi	r24, 0x98	; 152
    34a6:	01 c0       	rjmp	.+2      	; 0x34aa <_ZN15OrangutanSerial8initPortEh+0x54>
    34a8:	88 e1       	ldi	r24, 0x18	; 24
    34aa:	80 93 c9 00 	sts	0x00C9, r24
    34ae:	80 91 9f 08 	lds	r24, 0x089F
    34b2:	90 91 a0 08 	lds	r25, 0x08A0
    34b6:	89 2b       	or	r24, r25
    34b8:	99 f0       	breq	.+38     	; 0x34e0 <_ZN15OrangutanSerial8initPortEh+0x8a>
    34ba:	90 91 9a 08 	lds	r25, 0x089A
    34be:	80 91 9c 08 	lds	r24, 0x089C
    34c2:	98 17       	cp	r25, r24
    34c4:	68 f4       	brcc	.+26     	; 0x34e0 <_ZN15OrangutanSerial8initPortEh+0x8a>
    34c6:	22 23       	and	r18, r18
    34c8:	59 f4       	brne	.+22     	; 0x34e0 <_ZN15OrangutanSerial8initPortEh+0x8a>
    34ca:	80 91 c9 00 	lds	r24, 0x00C9
    34ce:	80 62       	ori	r24, 0x20	; 32
    34d0:	80 93 c9 00 	sts	0x00C9, r24
    34d4:	78 94       	sei
    34d6:	08 95       	ret
    34d8:	80 91 c1 00 	lds	r24, 0x00C1
    34dc:	8f 7d       	andi	r24, 0xDF	; 223
    34de:	db cf       	rjmp	.-74     	; 0x3496 <_ZN15OrangutanSerial8initPortEh+0x40>
    34e0:	80 91 c9 00 	lds	r24, 0x00C9
    34e4:	8f 7d       	andi	r24, 0xDF	; 223
    34e6:	f4 cf       	rjmp	.-24     	; 0x34d0 <_ZN15OrangutanSerial8initPortEh+0x7a>
    34e8:	08 95       	ret

000034ea <serial_set_mode>:
    34ea:	28 2f       	mov	r18, r24
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	f9 01       	movw	r30, r18
    34f0:	b3 e0       	ldi	r27, 0x03	; 3
    34f2:	ee 0f       	add	r30, r30
    34f4:	ff 1f       	adc	r31, r31
    34f6:	ba 95       	dec	r27
    34f8:	e1 f7       	brne	.-8      	; 0x34f2 <serial_set_mode+0x8>
    34fa:	22 0f       	add	r18, r18
    34fc:	33 1f       	adc	r19, r19
    34fe:	e2 0f       	add	r30, r18
    3500:	f3 1f       	adc	r31, r19
    3502:	e1 57       	subi	r30, 0x71	; 113
    3504:	f7 4f       	sbci	r31, 0xF7	; 247
    3506:	60 83       	st	Z, r22
    3508:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN15OrangutanSerial8initPortEh>
    350c:	08 95       	ret

0000350e <_ZN15OrangutanSerial11setBaudRateEhm>:
    350e:	a0 e0       	ldi	r26, 0x00	; 0
    3510:	b0 e0       	ldi	r27, 0x00	; 0
    3512:	ed e8       	ldi	r30, 0x8D	; 141
    3514:	fa e1       	ldi	r31, 0x1A	; 26
    3516:	0c 94 2d 22 	jmp	0x445a	; 0x445a <__prologue_saves__+0x16>
    351a:	d8 2e       	mov	r13, r24
    351c:	7a 01       	movw	r14, r20
    351e:	8b 01       	movw	r16, r22
    3520:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN15OrangutanSerial8initPortEh>
    3524:	82 e0       	ldi	r24, 0x02	; 2
    3526:	d8 16       	cp	r13, r24
    3528:	19 f1       	breq	.+70     	; 0x3570 <_ZN15OrangutanSerial11setBaudRateEhm+0x62>
    352a:	dd 20       	and	r13, r13
    352c:	19 f0       	breq	.+6      	; 0x3534 <_ZN15OrangutanSerial11setBaudRateEhm+0x26>
    352e:	cc ec       	ldi	r28, 0xCC	; 204
    3530:	d0 e0       	ldi	r29, 0x00	; 0
    3532:	02 c0       	rjmp	.+4      	; 0x3538 <_ZN15OrangutanSerial11setBaudRateEhm+0x2a>
    3534:	c4 ec       	ldi	r28, 0xC4	; 196
    3536:	d0 e0       	ldi	r29, 0x00	; 0
    3538:	60 ea       	ldi	r22, 0xA0	; 160
    353a:	75 e2       	ldi	r23, 0x25	; 37
    353c:	86 e2       	ldi	r24, 0x26	; 38
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	6e 19       	sub	r22, r14
    3542:	7f 09       	sbc	r23, r15
    3544:	80 0b       	sbc	r24, r16
    3546:	91 0b       	sbc	r25, r17
    3548:	33 e0       	ldi	r19, 0x03	; 3
    354a:	66 0f       	add	r22, r22
    354c:	77 1f       	adc	r23, r23
    354e:	88 1f       	adc	r24, r24
    3550:	99 1f       	adc	r25, r25
    3552:	3a 95       	dec	r19
    3554:	d1 f7       	brne	.-12     	; 0x354a <_ZN15OrangutanSerial11setBaudRateEhm+0x3c>
    3556:	24 e0       	ldi	r18, 0x04	; 4
    3558:	ee 0c       	add	r14, r14
    355a:	ff 1c       	adc	r15, r15
    355c:	00 1f       	adc	r16, r16
    355e:	11 1f       	adc	r17, r17
    3560:	2a 95       	dec	r18
    3562:	d1 f7       	brne	.-12     	; 0x3558 <_ZN15OrangutanSerial11setBaudRateEhm+0x4a>
    3564:	a8 01       	movw	r20, r16
    3566:	97 01       	movw	r18, r14
    3568:	0e 94 00 22 	call	0x4400	; 0x4400 <__udivmodsi4>
    356c:	39 83       	std	Y+1, r19	; 0x01
    356e:	28 83       	st	Y, r18
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	e7 e0       	ldi	r30, 0x07	; 7
    3576:	0c 94 49 22 	jmp	0x4492	; 0x4492 <__epilogue_restores__+0x16>

0000357a <serial_set_baud_rate>:
    357a:	0e 94 87 1a 	call	0x350e	; 0x350e <_ZN15OrangutanSerial11setBaudRateEhm>
    357e:	08 95       	ret

00003580 <_ZN15OrangutanSerial7setModeEhh>:
    3580:	28 2f       	mov	r18, r24
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	f9 01       	movw	r30, r18
    3586:	53 e0       	ldi	r21, 0x03	; 3
    3588:	ee 0f       	add	r30, r30
    358a:	ff 1f       	adc	r31, r31
    358c:	5a 95       	dec	r21
    358e:	e1 f7       	brne	.-8      	; 0x3588 <_ZN15OrangutanSerial7setModeEhh+0x8>
    3590:	22 0f       	add	r18, r18
    3592:	33 1f       	adc	r19, r19
    3594:	e2 0f       	add	r30, r18
    3596:	f3 1f       	adc	r31, r19
    3598:	e1 57       	subi	r30, 0x71	; 113
    359a:	f7 4f       	sbci	r31, 0xF7	; 247
    359c:	60 83       	st	Z, r22
    359e:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN15OrangutanSerial8initPortEh>
    35a2:	08 95       	ret

000035a4 <_ZN15OrangutanSerial7receiveEhPch>:
    35a4:	58 2f       	mov	r21, r24
    35a6:	82 30       	cpi	r24, 0x02	; 2
    35a8:	51 f0       	breq	.+20     	; 0x35be <_ZN15OrangutanSerial7receiveEhPch+0x1a>
    35aa:	88 23       	and	r24, r24
    35ac:	19 f0       	breq	.+6      	; 0x35b4 <_ZN15OrangutanSerial7receiveEhPch+0x10>
    35ae:	e9 ec       	ldi	r30, 0xC9	; 201
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <_ZN15OrangutanSerial7receiveEhPch+0x14>
    35b4:	e1 ec       	ldi	r30, 0xC1	; 193
    35b6:	f0 e0       	ldi	r31, 0x00	; 0
    35b8:	80 81       	ld	r24, Z
    35ba:	8f 77       	andi	r24, 0x7F	; 127
    35bc:	80 83       	st	Z, r24
    35be:	25 2f       	mov	r18, r21
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	d9 01       	movw	r26, r18
    35c4:	aa 0f       	add	r26, r26
    35c6:	bb 1f       	adc	r27, r27
    35c8:	c9 01       	movw	r24, r18
    35ca:	e3 e0       	ldi	r30, 0x03	; 3
    35cc:	88 0f       	add	r24, r24
    35ce:	99 1f       	adc	r25, r25
    35d0:	ea 95       	dec	r30
    35d2:	e1 f7       	brne	.-8      	; 0x35cc <_ZN15OrangutanSerial7receiveEhPch+0x28>
    35d4:	a8 0f       	add	r26, r24
    35d6:	b9 1f       	adc	r27, r25
    35d8:	a1 57       	subi	r26, 0x71	; 113
    35da:	b7 4f       	sbci	r27, 0xF7	; 247
    35dc:	19 96       	adiw	r26, 0x09	; 9
    35de:	7c 93       	st	X, r23
    35e0:	6e 93       	st	-X, r22
    35e2:	18 97       	sbiw	r26, 0x08	; 8
    35e4:	f9 01       	movw	r30, r18
    35e6:	ee 0f       	add	r30, r30
    35e8:	ff 1f       	adc	r31, r31
    35ea:	ee 0f       	add	r30, r30
    35ec:	ff 1f       	adc	r31, r31
    35ee:	e2 0f       	add	r30, r18
    35f0:	f3 1f       	adc	r31, r19
    35f2:	ee 0f       	add	r30, r30
    35f4:	ff 1f       	adc	r31, r31
    35f6:	ef 56       	subi	r30, 0x6F	; 111
    35f8:	f7 4f       	sbci	r31, 0xF7	; 247
    35fa:	10 82       	st	Z, r1
    35fc:	14 96       	adiw	r26, 0x04	; 4
    35fe:	4c 93       	st	X, r20
    3600:	14 97       	sbiw	r26, 0x04	; 4
    3602:	15 96       	adiw	r26, 0x05	; 5
    3604:	1c 92       	st	X, r1
    3606:	15 97       	sbiw	r26, 0x05	; 5
    3608:	52 30       	cpi	r21, 0x02	; 2
    360a:	69 f0       	breq	.+26     	; 0x3626 <_ZN15OrangutanSerial7receiveEhPch+0x82>
    360c:	8c 91       	ld	r24, X
    360e:	88 23       	and	r24, r24
    3610:	51 f4       	brne	.+20     	; 0x3626 <_ZN15OrangutanSerial7receiveEhPch+0x82>
    3612:	55 23       	and	r21, r21
    3614:	19 f0       	breq	.+6      	; 0x361c <_ZN15OrangutanSerial7receiveEhPch+0x78>
    3616:	e9 ec       	ldi	r30, 0xC9	; 201
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	02 c0       	rjmp	.+4      	; 0x3620 <_ZN15OrangutanSerial7receiveEhPch+0x7c>
    361c:	e1 ec       	ldi	r30, 0xC1	; 193
    361e:	f0 e0       	ldi	r31, 0x00	; 0
    3620:	80 81       	ld	r24, Z
    3622:	80 68       	ori	r24, 0x80	; 128
    3624:	80 83       	st	Z, r24
    3626:	08 95       	ret

00003628 <serial_receive>:
    3628:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <_ZN15OrangutanSerial7receiveEhPch>
    362c:	08 95       	ret

0000362e <_ZN15OrangutanSerial11receiveRingEhPch>:
    362e:	58 2f       	mov	r21, r24
    3630:	82 30       	cpi	r24, 0x02	; 2
    3632:	51 f0       	breq	.+20     	; 0x3648 <_ZN15OrangutanSerial11receiveRingEhPch+0x1a>
    3634:	88 23       	and	r24, r24
    3636:	19 f0       	breq	.+6      	; 0x363e <_ZN15OrangutanSerial11receiveRingEhPch+0x10>
    3638:	e9 ec       	ldi	r30, 0xC9	; 201
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	02 c0       	rjmp	.+4      	; 0x3642 <_ZN15OrangutanSerial11receiveRingEhPch+0x14>
    363e:	e1 ec       	ldi	r30, 0xC1	; 193
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	80 81       	ld	r24, Z
    3644:	8f 77       	andi	r24, 0x7F	; 127
    3646:	80 83       	st	Z, r24
    3648:	25 2f       	mov	r18, r21
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	d9 01       	movw	r26, r18
    364e:	aa 0f       	add	r26, r26
    3650:	bb 1f       	adc	r27, r27
    3652:	c9 01       	movw	r24, r18
    3654:	e3 e0       	ldi	r30, 0x03	; 3
    3656:	88 0f       	add	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	ea 95       	dec	r30
    365c:	e1 f7       	brne	.-8      	; 0x3656 <_ZN15OrangutanSerial11receiveRingEhPch+0x28>
    365e:	a8 0f       	add	r26, r24
    3660:	b9 1f       	adc	r27, r25
    3662:	a1 57       	subi	r26, 0x71	; 113
    3664:	b7 4f       	sbci	r27, 0xF7	; 247
    3666:	19 96       	adiw	r26, 0x09	; 9
    3668:	7c 93       	st	X, r23
    366a:	6e 93       	st	-X, r22
    366c:	18 97       	sbiw	r26, 0x08	; 8
    366e:	f9 01       	movw	r30, r18
    3670:	ee 0f       	add	r30, r30
    3672:	ff 1f       	adc	r31, r31
    3674:	ee 0f       	add	r30, r30
    3676:	ff 1f       	adc	r31, r31
    3678:	e2 0f       	add	r30, r18
    367a:	f3 1f       	adc	r31, r19
    367c:	ee 0f       	add	r30, r30
    367e:	ff 1f       	adc	r31, r31
    3680:	ef 56       	subi	r30, 0x6F	; 111
    3682:	f7 4f       	sbci	r31, 0xF7	; 247
    3684:	10 82       	st	Z, r1
    3686:	14 96       	adiw	r26, 0x04	; 4
    3688:	4c 93       	st	X, r20
    368a:	14 97       	sbiw	r26, 0x04	; 4
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	15 96       	adiw	r26, 0x05	; 5
    3690:	8c 93       	st	X, r24
    3692:	15 97       	sbiw	r26, 0x05	; 5
    3694:	52 30       	cpi	r21, 0x02	; 2
    3696:	69 f0       	breq	.+26     	; 0x36b2 <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    3698:	8c 91       	ld	r24, X
    369a:	88 23       	and	r24, r24
    369c:	51 f4       	brne	.+20     	; 0x36b2 <_ZN15OrangutanSerial11receiveRingEhPch+0x84>
    369e:	55 23       	and	r21, r21
    36a0:	19 f0       	breq	.+6      	; 0x36a8 <_ZN15OrangutanSerial11receiveRingEhPch+0x7a>
    36a2:	e9 ec       	ldi	r30, 0xC9	; 201
    36a4:	f0 e0       	ldi	r31, 0x00	; 0
    36a6:	02 c0       	rjmp	.+4      	; 0x36ac <_ZN15OrangutanSerial11receiveRingEhPch+0x7e>
    36a8:	e1 ec       	ldi	r30, 0xC1	; 193
    36aa:	f0 e0       	ldi	r31, 0x00	; 0
    36ac:	80 81       	ld	r24, Z
    36ae:	80 68       	ori	r24, 0x80	; 128
    36b0:	80 83       	st	Z, r24
    36b2:	08 95       	ret

000036b4 <serial_receive_ring>:
    36b4:	0e 94 17 1b 	call	0x362e	; 0x362e <_ZN15OrangutanSerial11receiveRingEhPch>
    36b8:	08 95       	ret

000036ba <_ZN15OrangutanSerial13cancelReceiveEh>:
    36ba:	60 e0       	ldi	r22, 0x00	; 0
    36bc:	70 e0       	ldi	r23, 0x00	; 0
    36be:	40 e0       	ldi	r20, 0x00	; 0
    36c0:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <_ZN15OrangutanSerial7receiveEhPch>
    36c4:	08 95       	ret

000036c6 <serial_cancel_receive>:
    36c6:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <_ZN15OrangutanSerial13cancelReceiveEh>
    36ca:	08 95       	ret

000036cc <__vector_20>:
    36cc:	1f 92       	push	r1
    36ce:	0f 92       	push	r0
    36d0:	0f b6       	in	r0, 0x3f	; 63
    36d2:	0f 92       	push	r0
    36d4:	0b b6       	in	r0, 0x3b	; 59
    36d6:	0f 92       	push	r0
    36d8:	11 24       	eor	r1, r1
    36da:	2f 93       	push	r18
    36dc:	8f 93       	push	r24
    36de:	9f 93       	push	r25
    36e0:	ef 93       	push	r30
    36e2:	ff 93       	push	r31
    36e4:	20 91 c6 00 	lds	r18, 0x00C6
    36e8:	e0 91 97 08 	lds	r30, 0x0897
    36ec:	f0 91 98 08 	lds	r31, 0x0898
    36f0:	30 97       	sbiw	r30, 0x00	; 0
    36f2:	81 f0       	breq	.+32     	; 0x3714 <__vector_20+0x48>
    36f4:	90 91 91 08 	lds	r25, 0x0891
    36f8:	80 91 93 08 	lds	r24, 0x0893
    36fc:	98 17       	cp	r25, r24
    36fe:	50 f4       	brcc	.+20     	; 0x3714 <__vector_20+0x48>
    3700:	80 91 91 08 	lds	r24, 0x0891
    3704:	e8 0f       	add	r30, r24
    3706:	f1 1d       	adc	r31, r1
    3708:	20 83       	st	Z, r18
    370a:	80 91 91 08 	lds	r24, 0x0891
    370e:	8f 5f       	subi	r24, 0xFF	; 255
    3710:	80 93 91 08 	sts	0x0891, r24
    3714:	90 91 91 08 	lds	r25, 0x0891
    3718:	80 91 93 08 	lds	r24, 0x0893
    371c:	98 17       	cp	r25, r24
    371e:	31 f4       	brne	.+12     	; 0x372c <__vector_20+0x60>
    3720:	80 91 94 08 	lds	r24, 0x0894
    3724:	88 23       	and	r24, r24
    3726:	11 f0       	breq	.+4      	; 0x372c <__vector_20+0x60>
    3728:	10 92 91 08 	sts	0x0891, r1
    372c:	ff 91       	pop	r31
    372e:	ef 91       	pop	r30
    3730:	9f 91       	pop	r25
    3732:	8f 91       	pop	r24
    3734:	2f 91       	pop	r18
    3736:	0f 90       	pop	r0
    3738:	0b be       	out	0x3b, r0	; 59
    373a:	0f 90       	pop	r0
    373c:	0f be       	out	0x3f, r0	; 63
    373e:	0f 90       	pop	r0
    3740:	1f 90       	pop	r1
    3742:	18 95       	reti

00003744 <__vector_28>:
    3744:	1f 92       	push	r1
    3746:	0f 92       	push	r0
    3748:	0f b6       	in	r0, 0x3f	; 63
    374a:	0f 92       	push	r0
    374c:	0b b6       	in	r0, 0x3b	; 59
    374e:	0f 92       	push	r0
    3750:	11 24       	eor	r1, r1
    3752:	2f 93       	push	r18
    3754:	8f 93       	push	r24
    3756:	9f 93       	push	r25
    3758:	ef 93       	push	r30
    375a:	ff 93       	push	r31
    375c:	20 91 ce 00 	lds	r18, 0x00CE
    3760:	e0 91 a1 08 	lds	r30, 0x08A1
    3764:	f0 91 a2 08 	lds	r31, 0x08A2
    3768:	30 97       	sbiw	r30, 0x00	; 0
    376a:	81 f0       	breq	.+32     	; 0x378c <__vector_28+0x48>
    376c:	90 91 9b 08 	lds	r25, 0x089B
    3770:	80 91 9d 08 	lds	r24, 0x089D
    3774:	98 17       	cp	r25, r24
    3776:	50 f4       	brcc	.+20     	; 0x378c <__vector_28+0x48>
    3778:	80 91 9b 08 	lds	r24, 0x089B
    377c:	e8 0f       	add	r30, r24
    377e:	f1 1d       	adc	r31, r1
    3780:	20 83       	st	Z, r18
    3782:	80 91 9b 08 	lds	r24, 0x089B
    3786:	8f 5f       	subi	r24, 0xFF	; 255
    3788:	80 93 9b 08 	sts	0x089B, r24
    378c:	90 91 9b 08 	lds	r25, 0x089B
    3790:	80 91 9d 08 	lds	r24, 0x089D
    3794:	98 17       	cp	r25, r24
    3796:	31 f4       	brne	.+12     	; 0x37a4 <__vector_28+0x60>
    3798:	80 91 9e 08 	lds	r24, 0x089E
    379c:	88 23       	and	r24, r24
    379e:	11 f0       	breq	.+4      	; 0x37a4 <__vector_28+0x60>
    37a0:	10 92 9b 08 	sts	0x089B, r1
    37a4:	ff 91       	pop	r31
    37a6:	ef 91       	pop	r30
    37a8:	9f 91       	pop	r25
    37aa:	8f 91       	pop	r24
    37ac:	2f 91       	pop	r18
    37ae:	0f 90       	pop	r0
    37b0:	0b be       	out	0x3b, r0	; 59
    37b2:	0f 90       	pop	r0
    37b4:	0f be       	out	0x3f, r0	; 63
    37b6:	0f 90       	pop	r0
    37b8:	1f 90       	pop	r1
    37ba:	18 95       	reti

000037bc <_ZN15OrangutanSerial11uart_tx_isrEh>:
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
    37c0:	38 2f       	mov	r19, r24
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	fc 01       	movw	r30, r24
    37c6:	53 e0       	ldi	r21, 0x03	; 3
    37c8:	ee 0f       	add	r30, r30
    37ca:	ff 1f       	adc	r31, r31
    37cc:	5a 95       	dec	r21
    37ce:	e1 f7       	brne	.-8      	; 0x37c8 <_ZN15OrangutanSerial11uart_tx_isrEh+0xc>
    37d0:	88 0f       	add	r24, r24
    37d2:	99 1f       	adc	r25, r25
    37d4:	e8 0f       	add	r30, r24
    37d6:	f9 1f       	adc	r31, r25
    37d8:	e1 57       	subi	r30, 0x71	; 113
    37da:	f7 4f       	sbci	r31, 0xF7	; 247
    37dc:	a6 81       	ldd	r26, Z+6	; 0x06
    37de:	b7 81       	ldd	r27, Z+7	; 0x07
    37e0:	10 97       	sbiw	r26, 0x00	; 0
    37e2:	09 f4       	brne	.+2      	; 0x37e6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2a>
    37e4:	64 c0       	rjmp	.+200    	; 0x38ae <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    37e6:	83 2f       	mov	r24, r19
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	fc 01       	movw	r30, r24
    37ec:	23 e0       	ldi	r18, 0x03	; 3
    37ee:	ee 0f       	add	r30, r30
    37f0:	ff 1f       	adc	r31, r31
    37f2:	2a 95       	dec	r18
    37f4:	e1 f7       	brne	.-8      	; 0x37ee <_ZN15OrangutanSerial11uart_tx_isrEh+0x32>
    37f6:	88 0f       	add	r24, r24
    37f8:	99 1f       	adc	r25, r25
    37fa:	e8 0f       	add	r30, r24
    37fc:	f9 1f       	adc	r31, r25
    37fe:	e1 57       	subi	r30, 0x71	; 113
    3800:	f7 4f       	sbci	r31, 0xF7	; 247
    3802:	21 81       	ldd	r18, Z+1	; 0x01
    3804:	83 2f       	mov	r24, r19
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	fc 01       	movw	r30, r24
    380a:	63 e0       	ldi	r22, 0x03	; 3
    380c:	ee 0f       	add	r30, r30
    380e:	ff 1f       	adc	r31, r31
    3810:	6a 95       	dec	r22
    3812:	e1 f7       	brne	.-8      	; 0x380c <_ZN15OrangutanSerial11uart_tx_isrEh+0x50>
    3814:	88 0f       	add	r24, r24
    3816:	99 1f       	adc	r25, r25
    3818:	e8 0f       	add	r30, r24
    381a:	f9 1f       	adc	r31, r25
    381c:	e1 57       	subi	r30, 0x71	; 113
    381e:	f7 4f       	sbci	r31, 0xF7	; 247
    3820:	83 81       	ldd	r24, Z+3	; 0x03
    3822:	28 17       	cp	r18, r24
    3824:	08 f0       	brcs	.+2      	; 0x3828 <_ZN15OrangutanSerial11uart_tx_isrEh+0x6c>
    3826:	43 c0       	rjmp	.+134    	; 0x38ae <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    3828:	33 23       	and	r19, r19
    382a:	19 f0       	breq	.+6      	; 0x3832 <_ZN15OrangutanSerial11uart_tx_isrEh+0x76>
    382c:	e8 ec       	ldi	r30, 0xC8	; 200
    382e:	f0 e0       	ldi	r31, 0x00	; 0
    3830:	02 c0       	rjmp	.+4      	; 0x3836 <_ZN15OrangutanSerial11uart_tx_isrEh+0x7a>
    3832:	e0 ec       	ldi	r30, 0xC0	; 192
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	80 81       	ld	r24, Z
    3838:	85 ff       	sbrs	r24, 5
    383a:	39 c0       	rjmp	.+114    	; 0x38ae <_ZN15OrangutanSerial11uart_tx_isrEh+0xf2>
    383c:	33 23       	and	r19, r19
    383e:	19 f0       	breq	.+6      	; 0x3846 <_ZN15OrangutanSerial11uart_tx_isrEh+0x8a>
    3840:	ce ec       	ldi	r28, 0xCE	; 206
    3842:	d0 e0       	ldi	r29, 0x00	; 0
    3844:	02 c0       	rjmp	.+4      	; 0x384a <_ZN15OrangutanSerial11uart_tx_isrEh+0x8e>
    3846:	c6 ec       	ldi	r28, 0xC6	; 198
    3848:	d0 e0       	ldi	r29, 0x00	; 0
    384a:	83 2f       	mov	r24, r19
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	fc 01       	movw	r30, r24
    3850:	43 e0       	ldi	r20, 0x03	; 3
    3852:	ee 0f       	add	r30, r30
    3854:	ff 1f       	adc	r31, r31
    3856:	4a 95       	dec	r20
    3858:	e1 f7       	brne	.-8      	; 0x3852 <_ZN15OrangutanSerial11uart_tx_isrEh+0x96>
    385a:	88 0f       	add	r24, r24
    385c:	99 1f       	adc	r25, r25
    385e:	e8 0f       	add	r30, r24
    3860:	f9 1f       	adc	r31, r25
    3862:	e1 57       	subi	r30, 0x71	; 113
    3864:	f7 4f       	sbci	r31, 0xF7	; 247
    3866:	81 81       	ldd	r24, Z+1	; 0x01
    3868:	a8 0f       	add	r26, r24
    386a:	b1 1d       	adc	r27, r1
    386c:	8c 91       	ld	r24, X
    386e:	88 83       	st	Y, r24
    3870:	83 2f       	mov	r24, r19
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	fc 01       	movw	r30, r24
    3876:	73 e0       	ldi	r23, 0x03	; 3
    3878:	ee 0f       	add	r30, r30
    387a:	ff 1f       	adc	r31, r31
    387c:	7a 95       	dec	r23
    387e:	e1 f7       	brne	.-8      	; 0x3878 <_ZN15OrangutanSerial11uart_tx_isrEh+0xbc>
    3880:	88 0f       	add	r24, r24
    3882:	99 1f       	adc	r25, r25
    3884:	e8 0f       	add	r30, r24
    3886:	f9 1f       	adc	r31, r25
    3888:	e1 57       	subi	r30, 0x71	; 113
    388a:	f7 4f       	sbci	r31, 0xF7	; 247
    388c:	21 81       	ldd	r18, Z+1	; 0x01
    388e:	2f 5f       	subi	r18, 0xFF	; 255
    3890:	83 2f       	mov	r24, r19
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	fc 01       	movw	r30, r24
    3896:	53 e0       	ldi	r21, 0x03	; 3
    3898:	ee 0f       	add	r30, r30
    389a:	ff 1f       	adc	r31, r31
    389c:	5a 95       	dec	r21
    389e:	e1 f7       	brne	.-8      	; 0x3898 <_ZN15OrangutanSerial11uart_tx_isrEh+0xdc>
    38a0:	88 0f       	add	r24, r24
    38a2:	99 1f       	adc	r25, r25
    38a4:	e8 0f       	add	r30, r24
    38a6:	f9 1f       	adc	r31, r25
    38a8:	e1 57       	subi	r30, 0x71	; 113
    38aa:	f7 4f       	sbci	r31, 0xF7	; 247
    38ac:	21 83       	std	Z+1, r18	; 0x01
    38ae:	83 2f       	mov	r24, r19
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	fc 01       	movw	r30, r24
    38b4:	b3 e0       	ldi	r27, 0x03	; 3
    38b6:	ee 0f       	add	r30, r30
    38b8:	ff 1f       	adc	r31, r31
    38ba:	ba 95       	dec	r27
    38bc:	e1 f7       	brne	.-8      	; 0x38b6 <_ZN15OrangutanSerial11uart_tx_isrEh+0xfa>
    38be:	88 0f       	add	r24, r24
    38c0:	99 1f       	adc	r25, r25
    38c2:	e8 0f       	add	r30, r24
    38c4:	f9 1f       	adc	r31, r25
    38c6:	e1 57       	subi	r30, 0x71	; 113
    38c8:	f7 4f       	sbci	r31, 0xF7	; 247
    38ca:	86 81       	ldd	r24, Z+6	; 0x06
    38cc:	97 81       	ldd	r25, Z+7	; 0x07
    38ce:	89 2b       	or	r24, r25
    38d0:	09 f4       	brne	.+2      	; 0x38d4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x118>
    38d2:	43 c0       	rjmp	.+134    	; 0x395a <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    38d4:	83 2f       	mov	r24, r19
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	fc 01       	movw	r30, r24
    38da:	73 e0       	ldi	r23, 0x03	; 3
    38dc:	ee 0f       	add	r30, r30
    38de:	ff 1f       	adc	r31, r31
    38e0:	7a 95       	dec	r23
    38e2:	e1 f7       	brne	.-8      	; 0x38dc <_ZN15OrangutanSerial11uart_tx_isrEh+0x120>
    38e4:	88 0f       	add	r24, r24
    38e6:	99 1f       	adc	r25, r25
    38e8:	e8 0f       	add	r30, r24
    38ea:	f9 1f       	adc	r31, r25
    38ec:	e1 57       	subi	r30, 0x71	; 113
    38ee:	f7 4f       	sbci	r31, 0xF7	; 247
    38f0:	21 81       	ldd	r18, Z+1	; 0x01
    38f2:	83 2f       	mov	r24, r19
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	fc 01       	movw	r30, r24
    38f8:	53 e0       	ldi	r21, 0x03	; 3
    38fa:	ee 0f       	add	r30, r30
    38fc:	ff 1f       	adc	r31, r31
    38fe:	5a 95       	dec	r21
    3900:	e1 f7       	brne	.-8      	; 0x38fa <_ZN15OrangutanSerial11uart_tx_isrEh+0x13e>
    3902:	88 0f       	add	r24, r24
    3904:	99 1f       	adc	r25, r25
    3906:	e8 0f       	add	r30, r24
    3908:	f9 1f       	adc	r31, r25
    390a:	e1 57       	subi	r30, 0x71	; 113
    390c:	f7 4f       	sbci	r31, 0xF7	; 247
    390e:	83 81       	ldd	r24, Z+3	; 0x03
    3910:	28 17       	cp	r18, r24
    3912:	18 f5       	brcc	.+70     	; 0x395a <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    3914:	83 2f       	mov	r24, r19
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	fc 01       	movw	r30, r24
    391a:	b3 e0       	ldi	r27, 0x03	; 3
    391c:	ee 0f       	add	r30, r30
    391e:	ff 1f       	adc	r31, r31
    3920:	ba 95       	dec	r27
    3922:	e1 f7       	brne	.-8      	; 0x391c <_ZN15OrangutanSerial11uart_tx_isrEh+0x160>
    3924:	88 0f       	add	r24, r24
    3926:	99 1f       	adc	r25, r25
    3928:	e8 0f       	add	r30, r24
    392a:	f9 1f       	adc	r31, r25
    392c:	e1 57       	subi	r30, 0x71	; 113
    392e:	f7 4f       	sbci	r31, 0xF7	; 247
    3930:	80 81       	ld	r24, Z
    3932:	88 23       	and	r24, r24
    3934:	91 f4       	brne	.+36     	; 0x395a <_ZN15OrangutanSerial11uart_tx_isrEh+0x19e>
    3936:	33 23       	and	r19, r19
    3938:	19 f0       	breq	.+6      	; 0x3940 <_ZN15OrangutanSerial11uart_tx_isrEh+0x184>
    393a:	e9 ec       	ldi	r30, 0xC9	; 201
    393c:	f0 e0       	ldi	r31, 0x00	; 0
    393e:	02 c0       	rjmp	.+4      	; 0x3944 <_ZN15OrangutanSerial11uart_tx_isrEh+0x188>
    3940:	e1 ec       	ldi	r30, 0xC1	; 193
    3942:	f0 e0       	ldi	r31, 0x00	; 0
    3944:	80 81       	ld	r24, Z
    3946:	80 62       	ori	r24, 0x20	; 32
    3948:	04 c0       	rjmp	.+8      	; 0x3952 <_ZN15OrangutanSerial11uart_tx_isrEh+0x196>
    394a:	e9 ec       	ldi	r30, 0xC9	; 201
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	80 81       	ld	r24, Z
    3950:	8f 7d       	andi	r24, 0xDF	; 223
    3952:	80 83       	st	Z, r24
    3954:	df 91       	pop	r29
    3956:	cf 91       	pop	r28
    3958:	08 95       	ret
    395a:	33 23       	and	r19, r19
    395c:	b1 f7       	brne	.-20     	; 0x394a <_ZN15OrangutanSerial11uart_tx_isrEh+0x18e>
    395e:	e1 ec       	ldi	r30, 0xC1	; 193
    3960:	f0 e0       	ldi	r31, 0x00	; 0
    3962:	f5 cf       	rjmp	.-22     	; 0x394e <_ZN15OrangutanSerial11uart_tx_isrEh+0x192>

00003964 <_ZN15OrangutanSerial4sendEhPch>:
    3964:	28 2f       	mov	r18, r24
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	fc 01       	movw	r30, r24
    396a:	53 e0       	ldi	r21, 0x03	; 3
    396c:	ee 0f       	add	r30, r30
    396e:	ff 1f       	adc	r31, r31
    3970:	5a 95       	dec	r21
    3972:	e1 f7       	brne	.-8      	; 0x396c <_ZN15OrangutanSerial4sendEhPch+0x8>
    3974:	88 0f       	add	r24, r24
    3976:	99 1f       	adc	r25, r25
    3978:	e8 0f       	add	r30, r24
    397a:	f9 1f       	adc	r31, r25
    397c:	e1 57       	subi	r30, 0x71	; 113
    397e:	f7 4f       	sbci	r31, 0xF7	; 247
    3980:	77 83       	std	Z+7, r23	; 0x07
    3982:	66 83       	std	Z+6, r22	; 0x06
    3984:	82 2f       	mov	r24, r18
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	fc 01       	movw	r30, r24
    398a:	b3 e0       	ldi	r27, 0x03	; 3
    398c:	ee 0f       	add	r30, r30
    398e:	ff 1f       	adc	r31, r31
    3990:	ba 95       	dec	r27
    3992:	e1 f7       	brne	.-8      	; 0x398c <_ZN15OrangutanSerial4sendEhPch+0x28>
    3994:	88 0f       	add	r24, r24
    3996:	99 1f       	adc	r25, r25
    3998:	e8 0f       	add	r30, r24
    399a:	f9 1f       	adc	r31, r25
    399c:	e1 57       	subi	r30, 0x71	; 113
    399e:	f7 4f       	sbci	r31, 0xF7	; 247
    39a0:	11 82       	std	Z+1, r1	; 0x01
    39a2:	82 2f       	mov	r24, r18
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	fc 01       	movw	r30, r24
    39a8:	73 e0       	ldi	r23, 0x03	; 3
    39aa:	ee 0f       	add	r30, r30
    39ac:	ff 1f       	adc	r31, r31
    39ae:	7a 95       	dec	r23
    39b0:	e1 f7       	brne	.-8      	; 0x39aa <_ZN15OrangutanSerial4sendEhPch+0x46>
    39b2:	88 0f       	add	r24, r24
    39b4:	99 1f       	adc	r25, r25
    39b6:	e8 0f       	add	r30, r24
    39b8:	f9 1f       	adc	r31, r25
    39ba:	e1 57       	subi	r30, 0x71	; 113
    39bc:	f7 4f       	sbci	r31, 0xF7	; 247
    39be:	43 83       	std	Z+3, r20	; 0x03
    39c0:	22 30       	cpi	r18, 0x02	; 2
    39c2:	09 f4       	brne	.+2      	; 0x39c6 <_ZN15OrangutanSerial4sendEhPch+0x62>
    39c4:	49 c0       	rjmp	.+146    	; 0x3a58 <_ZN15OrangutanSerial4sendEhPch+0xf4>
    39c6:	82 2f       	mov	r24, r18
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	fc 01       	movw	r30, r24
    39cc:	53 e0       	ldi	r21, 0x03	; 3
    39ce:	ee 0f       	add	r30, r30
    39d0:	ff 1f       	adc	r31, r31
    39d2:	5a 95       	dec	r21
    39d4:	e1 f7       	brne	.-8      	; 0x39ce <_ZN15OrangutanSerial4sendEhPch+0x6a>
    39d6:	88 0f       	add	r24, r24
    39d8:	99 1f       	adc	r25, r25
    39da:	e8 0f       	add	r30, r24
    39dc:	f9 1f       	adc	r31, r25
    39de:	e1 57       	subi	r30, 0x71	; 113
    39e0:	f7 4f       	sbci	r31, 0xF7	; 247
    39e2:	86 81       	ldd	r24, Z+6	; 0x06
    39e4:	97 81       	ldd	r25, Z+7	; 0x07
    39e6:	89 2b       	or	r24, r25
    39e8:	91 f1       	breq	.+100    	; 0x3a4e <_ZN15OrangutanSerial4sendEhPch+0xea>
    39ea:	82 2f       	mov	r24, r18
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	fc 01       	movw	r30, r24
    39f0:	b3 e0       	ldi	r27, 0x03	; 3
    39f2:	ee 0f       	add	r30, r30
    39f4:	ff 1f       	adc	r31, r31
    39f6:	ba 95       	dec	r27
    39f8:	e1 f7       	brne	.-8      	; 0x39f2 <_ZN15OrangutanSerial4sendEhPch+0x8e>
    39fa:	88 0f       	add	r24, r24
    39fc:	99 1f       	adc	r25, r25
    39fe:	e8 0f       	add	r30, r24
    3a00:	f9 1f       	adc	r31, r25
    3a02:	e1 57       	subi	r30, 0x71	; 113
    3a04:	f7 4f       	sbci	r31, 0xF7	; 247
    3a06:	81 81       	ldd	r24, Z+1	; 0x01
    3a08:	84 17       	cp	r24, r20
    3a0a:	08 f5       	brcc	.+66     	; 0x3a4e <_ZN15OrangutanSerial4sendEhPch+0xea>
    3a0c:	82 2f       	mov	r24, r18
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	fc 01       	movw	r30, r24
    3a12:	73 e0       	ldi	r23, 0x03	; 3
    3a14:	ee 0f       	add	r30, r30
    3a16:	ff 1f       	adc	r31, r31
    3a18:	7a 95       	dec	r23
    3a1a:	e1 f7       	brne	.-8      	; 0x3a14 <_ZN15OrangutanSerial4sendEhPch+0xb0>
    3a1c:	88 0f       	add	r24, r24
    3a1e:	99 1f       	adc	r25, r25
    3a20:	e8 0f       	add	r30, r24
    3a22:	f9 1f       	adc	r31, r25
    3a24:	e1 57       	subi	r30, 0x71	; 113
    3a26:	f7 4f       	sbci	r31, 0xF7	; 247
    3a28:	80 81       	ld	r24, Z
    3a2a:	88 23       	and	r24, r24
    3a2c:	81 f4       	brne	.+32     	; 0x3a4e <_ZN15OrangutanSerial4sendEhPch+0xea>
    3a2e:	22 23       	and	r18, r18
    3a30:	19 f0       	breq	.+6      	; 0x3a38 <_ZN15OrangutanSerial4sendEhPch+0xd4>
    3a32:	e9 ec       	ldi	r30, 0xC9	; 201
    3a34:	f0 e0       	ldi	r31, 0x00	; 0
    3a36:	02 c0       	rjmp	.+4      	; 0x3a3c <_ZN15OrangutanSerial4sendEhPch+0xd8>
    3a38:	e1 ec       	ldi	r30, 0xC1	; 193
    3a3a:	f0 e0       	ldi	r31, 0x00	; 0
    3a3c:	80 81       	ld	r24, Z
    3a3e:	80 62       	ori	r24, 0x20	; 32
    3a40:	04 c0       	rjmp	.+8      	; 0x3a4a <_ZN15OrangutanSerial4sendEhPch+0xe6>
    3a42:	e9 ec       	ldi	r30, 0xC9	; 201
    3a44:	f0 e0       	ldi	r31, 0x00	; 0
    3a46:	80 81       	ld	r24, Z
    3a48:	8f 7d       	andi	r24, 0xDF	; 223
    3a4a:	80 83       	st	Z, r24
    3a4c:	08 95       	ret
    3a4e:	22 23       	and	r18, r18
    3a50:	c1 f7       	brne	.-16     	; 0x3a42 <_ZN15OrangutanSerial4sendEhPch+0xde>
    3a52:	e1 ec       	ldi	r30, 0xC1	; 193
    3a54:	f0 e0       	ldi	r31, 0x00	; 0
    3a56:	f7 cf       	rjmp	.-18     	; 0x3a46 <_ZN15OrangutanSerial4sendEhPch+0xe2>
    3a58:	08 95       	ret

00003a5a <serial_send>:
    3a5a:	0e 94 b2 1c 	call	0x3964	; 0x3964 <_ZN15OrangutanSerial4sendEhPch>
    3a5e:	08 95       	ret

00003a60 <__vector_21>:
    3a60:	1f 92       	push	r1
    3a62:	0f 92       	push	r0
    3a64:	0f b6       	in	r0, 0x3f	; 63
    3a66:	0f 92       	push	r0
    3a68:	0b b6       	in	r0, 0x3b	; 59
    3a6a:	0f 92       	push	r0
    3a6c:	11 24       	eor	r1, r1
    3a6e:	2f 93       	push	r18
    3a70:	3f 93       	push	r19
    3a72:	4f 93       	push	r20
    3a74:	5f 93       	push	r21
    3a76:	6f 93       	push	r22
    3a78:	7f 93       	push	r23
    3a7a:	8f 93       	push	r24
    3a7c:	9f 93       	push	r25
    3a7e:	af 93       	push	r26
    3a80:	bf 93       	push	r27
    3a82:	ef 93       	push	r30
    3a84:	ff 93       	push	r31
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	0e 94 de 1b 	call	0x37bc	; 0x37bc <_ZN15OrangutanSerial11uart_tx_isrEh>
    3a8c:	ff 91       	pop	r31
    3a8e:	ef 91       	pop	r30
    3a90:	bf 91       	pop	r27
    3a92:	af 91       	pop	r26
    3a94:	9f 91       	pop	r25
    3a96:	8f 91       	pop	r24
    3a98:	7f 91       	pop	r23
    3a9a:	6f 91       	pop	r22
    3a9c:	5f 91       	pop	r21
    3a9e:	4f 91       	pop	r20
    3aa0:	3f 91       	pop	r19
    3aa2:	2f 91       	pop	r18
    3aa4:	0f 90       	pop	r0
    3aa6:	0b be       	out	0x3b, r0	; 59
    3aa8:	0f 90       	pop	r0
    3aaa:	0f be       	out	0x3f, r0	; 63
    3aac:	0f 90       	pop	r0
    3aae:	1f 90       	pop	r1
    3ab0:	18 95       	reti

00003ab2 <__vector_29>:
    3ab2:	1f 92       	push	r1
    3ab4:	0f 92       	push	r0
    3ab6:	0f b6       	in	r0, 0x3f	; 63
    3ab8:	0f 92       	push	r0
    3aba:	0b b6       	in	r0, 0x3b	; 59
    3abc:	0f 92       	push	r0
    3abe:	11 24       	eor	r1, r1
    3ac0:	2f 93       	push	r18
    3ac2:	3f 93       	push	r19
    3ac4:	4f 93       	push	r20
    3ac6:	5f 93       	push	r21
    3ac8:	6f 93       	push	r22
    3aca:	7f 93       	push	r23
    3acc:	8f 93       	push	r24
    3ace:	9f 93       	push	r25
    3ad0:	af 93       	push	r26
    3ad2:	bf 93       	push	r27
    3ad4:	ef 93       	push	r30
    3ad6:	ff 93       	push	r31
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	0e 94 de 1b 	call	0x37bc	; 0x37bc <_ZN15OrangutanSerial11uart_tx_isrEh>
    3ade:	ff 91       	pop	r31
    3ae0:	ef 91       	pop	r30
    3ae2:	bf 91       	pop	r27
    3ae4:	af 91       	pop	r26
    3ae6:	9f 91       	pop	r25
    3ae8:	8f 91       	pop	r24
    3aea:	7f 91       	pop	r23
    3aec:	6f 91       	pop	r22
    3aee:	5f 91       	pop	r21
    3af0:	4f 91       	pop	r20
    3af2:	3f 91       	pop	r19
    3af4:	2f 91       	pop	r18
    3af6:	0f 90       	pop	r0
    3af8:	0b be       	out	0x3b, r0	; 59
    3afa:	0f 90       	pop	r0
    3afc:	0f be       	out	0x3f, r0	; 63
    3afe:	0f 90       	pop	r0
    3b00:	1f 90       	pop	r1
    3b02:	18 95       	reti

00003b04 <_ZN15OrangutanSerial15serial_tx_checkEh>:
    3b04:	98 2f       	mov	r25, r24
    3b06:	82 30       	cpi	r24, 0x02	; 2
    3b08:	71 f0       	breq	.+28     	; 0x3b26 <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    3b0a:	88 23       	and	r24, r24
    3b0c:	19 f0       	breq	.+6      	; 0x3b14 <_ZN15OrangutanSerial15serial_tx_checkEh+0x10>
    3b0e:	e9 ec       	ldi	r30, 0xC9	; 201
    3b10:	f0 e0       	ldi	r31, 0x00	; 0
    3b12:	02 c0       	rjmp	.+4      	; 0x3b18 <_ZN15OrangutanSerial15serial_tx_checkEh+0x14>
    3b14:	e1 ec       	ldi	r30, 0xC1	; 193
    3b16:	f0 e0       	ldi	r31, 0x00	; 0
    3b18:	80 81       	ld	r24, Z
    3b1a:	8f 7d       	andi	r24, 0xDF	; 223
    3b1c:	80 83       	st	Z, r24
    3b1e:	89 2f       	mov	r24, r25
    3b20:	0e 94 de 1b 	call	0x37bc	; 0x37bc <_ZN15OrangutanSerial11uart_tx_isrEh>
    3b24:	08 95       	ret
    3b26:	e0 91 a9 08 	lds	r30, 0x08A9
    3b2a:	f0 91 aa 08 	lds	r31, 0x08AA
    3b2e:	30 97       	sbiw	r30, 0x00	; 0
    3b30:	b1 f0       	breq	.+44     	; 0x3b5e <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    3b32:	90 91 a4 08 	lds	r25, 0x08A4
    3b36:	80 91 a6 08 	lds	r24, 0x08A6
    3b3a:	98 17       	cp	r25, r24
    3b3c:	80 f4       	brcc	.+32     	; 0x3b5e <_ZN15OrangutanSerial15serial_tx_checkEh+0x5a>
    3b3e:	06 c0       	rjmp	.+12     	; 0x3b4c <_ZN15OrangutanSerial15serial_tx_checkEh+0x48>
    3b40:	80 91 a4 08 	lds	r24, 0x08A4
    3b44:	8f 5f       	subi	r24, 0xFF	; 255
    3b46:	80 93 a4 08 	sts	0x08A4, r24
    3b4a:	ed cf       	rjmp	.-38     	; 0x3b26 <_ZN15OrangutanSerial15serial_tx_checkEh+0x22>
    3b4c:	80 91 a4 08 	lds	r24, 0x08A4
    3b50:	e8 0f       	add	r30, r24
    3b52:	f1 1d       	adc	r31, r1
    3b54:	80 81       	ld	r24, Z
    3b56:	0e 94 3f 20 	call	0x407e	; 0x407e <_ZN12OrangutanSVP17serialSendIfReadyEc>
    3b5a:	88 23       	and	r24, r24
    3b5c:	89 f7       	brne	.-30     	; 0x3b40 <_ZN15OrangutanSerial15serial_tx_checkEh+0x3c>
    3b5e:	08 95       	ret

00003b60 <_ZN15OrangutanSerial15serial_rx_checkEh>:
    3b60:	0f 93       	push	r16
    3b62:	1f 93       	push	r17
    3b64:	cf 93       	push	r28
    3b66:	df 93       	push	r29
    3b68:	68 2f       	mov	r22, r24
    3b6a:	82 30       	cpi	r24, 0x02	; 2
    3b6c:	09 f4       	brne	.+2      	; 0x3b70 <_ZN15OrangutanSerial15serial_rx_checkEh+0x10>
    3b6e:	9c c0       	rjmp	.+312    	; 0x3ca8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    3b70:	88 23       	and	r24, r24
    3b72:	19 f0       	breq	.+6      	; 0x3b7a <_ZN15OrangutanSerial15serial_rx_checkEh+0x1a>
    3b74:	e9 ec       	ldi	r30, 0xC9	; 201
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	02 c0       	rjmp	.+4      	; 0x3b7e <_ZN15OrangutanSerial15serial_rx_checkEh+0x1e>
    3b7a:	e1 ec       	ldi	r30, 0xC1	; 193
    3b7c:	f0 e0       	ldi	r31, 0x00	; 0
    3b7e:	80 81       	ld	r24, Z
    3b80:	8f 77       	andi	r24, 0x7F	; 127
    3b82:	80 83       	st	Z, r24
    3b84:	46 2f       	mov	r20, r22
    3b86:	50 e0       	ldi	r21, 0x00	; 0
    3b88:	da 01       	movw	r26, r20
    3b8a:	aa 0f       	add	r26, r26
    3b8c:	bb 1f       	adc	r27, r27
    3b8e:	ca 01       	movw	r24, r20
    3b90:	23 e0       	ldi	r18, 0x03	; 3
    3b92:	88 0f       	add	r24, r24
    3b94:	99 1f       	adc	r25, r25
    3b96:	2a 95       	dec	r18
    3b98:	e1 f7       	brne	.-8      	; 0x3b92 <_ZN15OrangutanSerial15serial_rx_checkEh+0x32>
    3b9a:	a8 0f       	add	r26, r24
    3b9c:	b9 1f       	adc	r27, r25
    3b9e:	a1 57       	subi	r26, 0x71	; 113
    3ba0:	b7 4f       	sbci	r27, 0xF7	; 247
    3ba2:	18 96       	adiw	r26, 0x08	; 8
    3ba4:	cd 91       	ld	r28, X+
    3ba6:	dc 91       	ld	r29, X
    3ba8:	19 97       	sbiw	r26, 0x09	; 9
    3baa:	20 97       	sbiw	r28, 0x00	; 0
    3bac:	09 f4       	brne	.+2      	; 0x3bb0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x50>
    3bae:	5a c0       	rjmp	.+180    	; 0x3c64 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3bb0:	fa 01       	movw	r30, r20
    3bb2:	ee 0f       	add	r30, r30
    3bb4:	ff 1f       	adc	r31, r31
    3bb6:	ee 0f       	add	r30, r30
    3bb8:	ff 1f       	adc	r31, r31
    3bba:	e4 0f       	add	r30, r20
    3bbc:	f5 1f       	adc	r31, r21
    3bbe:	ee 0f       	add	r30, r30
    3bc0:	ff 1f       	adc	r31, r31
    3bc2:	ef 56       	subi	r30, 0x6F	; 111
    3bc4:	f7 4f       	sbci	r31, 0xF7	; 247
    3bc6:	80 81       	ld	r24, Z
    3bc8:	14 96       	adiw	r26, 0x04	; 4
    3bca:	2c 91       	ld	r18, X
    3bcc:	82 17       	cp	r24, r18
    3bce:	08 f0       	brcs	.+2      	; 0x3bd2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x72>
    3bd0:	49 c0       	rjmp	.+146    	; 0x3c64 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3bd2:	66 23       	and	r22, r22
    3bd4:	19 f0       	breq	.+6      	; 0x3bdc <_ZN15OrangutanSerial15serial_rx_checkEh+0x7c>
    3bd6:	e8 ec       	ldi	r30, 0xC8	; 200
    3bd8:	f0 e0       	ldi	r31, 0x00	; 0
    3bda:	02 c0       	rjmp	.+4      	; 0x3be0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x80>
    3bdc:	e0 ec       	ldi	r30, 0xC0	; 192
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	80 81       	ld	r24, Z
    3be2:	87 ff       	sbrs	r24, 7
    3be4:	3f c0       	rjmp	.+126    	; 0x3c64 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3be6:	66 23       	and	r22, r22
    3be8:	19 f4       	brne	.+6      	; 0x3bf0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x90>
    3bea:	e6 ec       	ldi	r30, 0xC6	; 198
    3bec:	f0 e0       	ldi	r31, 0x00	; 0
    3bee:	02 c0       	rjmp	.+4      	; 0x3bf4 <_ZN15OrangutanSerial15serial_rx_checkEh+0x94>
    3bf0:	ee ec       	ldi	r30, 0xCE	; 206
    3bf2:	f0 e0       	ldi	r31, 0x00	; 0
    3bf4:	90 81       	ld	r25, Z
    3bf6:	fa 01       	movw	r30, r20
    3bf8:	ee 0f       	add	r30, r30
    3bfa:	ff 1f       	adc	r31, r31
    3bfc:	ee 0f       	add	r30, r30
    3bfe:	ff 1f       	adc	r31, r31
    3c00:	e4 0f       	add	r30, r20
    3c02:	f5 1f       	adc	r31, r21
    3c04:	ee 0f       	add	r30, r30
    3c06:	ff 1f       	adc	r31, r31
    3c08:	ef 56       	subi	r30, 0x6F	; 111
    3c0a:	f7 4f       	sbci	r31, 0xF7	; 247
    3c0c:	80 81       	ld	r24, Z
    3c0e:	82 17       	cp	r24, r18
    3c10:	38 f4       	brcc	.+14     	; 0x3c20 <_ZN15OrangutanSerial15serial_rx_checkEh+0xc0>
    3c12:	80 81       	ld	r24, Z
    3c14:	c8 0f       	add	r28, r24
    3c16:	d1 1d       	adc	r29, r1
    3c18:	98 83       	st	Y, r25
    3c1a:	80 81       	ld	r24, Z
    3c1c:	8f 5f       	subi	r24, 0xFF	; 255
    3c1e:	80 83       	st	Z, r24
    3c20:	fa 01       	movw	r30, r20
    3c22:	ee 0f       	add	r30, r30
    3c24:	ff 1f       	adc	r31, r31
    3c26:	ee 0f       	add	r30, r30
    3c28:	ff 1f       	adc	r31, r31
    3c2a:	e4 0f       	add	r30, r20
    3c2c:	f5 1f       	adc	r31, r21
    3c2e:	ee 0f       	add	r30, r30
    3c30:	ff 1f       	adc	r31, r31
    3c32:	ef 56       	subi	r30, 0x6F	; 111
    3c34:	f7 4f       	sbci	r31, 0xF7	; 247
    3c36:	80 81       	ld	r24, Z
    3c38:	da 01       	movw	r26, r20
    3c3a:	aa 0f       	add	r26, r26
    3c3c:	bb 1f       	adc	r27, r27
    3c3e:	9a 01       	movw	r18, r20
    3c40:	13 e0       	ldi	r17, 0x03	; 3
    3c42:	22 0f       	add	r18, r18
    3c44:	33 1f       	adc	r19, r19
    3c46:	1a 95       	dec	r17
    3c48:	e1 f7       	brne	.-8      	; 0x3c42 <_ZN15OrangutanSerial15serial_rx_checkEh+0xe2>
    3c4a:	a2 0f       	add	r26, r18
    3c4c:	b3 1f       	adc	r27, r19
    3c4e:	a1 57       	subi	r26, 0x71	; 113
    3c50:	b7 4f       	sbci	r27, 0xF7	; 247
    3c52:	14 96       	adiw	r26, 0x04	; 4
    3c54:	9c 91       	ld	r25, X
    3c56:	14 97       	sbiw	r26, 0x04	; 4
    3c58:	89 17       	cp	r24, r25
    3c5a:	21 f4       	brne	.+8      	; 0x3c64 <_ZN15OrangutanSerial15serial_rx_checkEh+0x104>
    3c5c:	15 96       	adiw	r26, 0x05	; 5
    3c5e:	8c 91       	ld	r24, X
    3c60:	81 11       	cpse	r24, r1
    3c62:	10 82       	st	Z, r1
    3c64:	fa 01       	movw	r30, r20
    3c66:	a3 e0       	ldi	r26, 0x03	; 3
    3c68:	ee 0f       	add	r30, r30
    3c6a:	ff 1f       	adc	r31, r31
    3c6c:	aa 95       	dec	r26
    3c6e:	e1 f7       	brne	.-8      	; 0x3c68 <_ZN15OrangutanSerial15serial_rx_checkEh+0x108>
    3c70:	44 0f       	add	r20, r20
    3c72:	55 1f       	adc	r21, r21
    3c74:	e4 0f       	add	r30, r20
    3c76:	f5 1f       	adc	r31, r21
    3c78:	e1 57       	subi	r30, 0x71	; 113
    3c7a:	f7 4f       	sbci	r31, 0xF7	; 247
    3c7c:	80 81       	ld	r24, Z
    3c7e:	88 23       	and	r24, r24
    3c80:	09 f0       	breq	.+2      	; 0x3c84 <_ZN15OrangutanSerial15serial_rx_checkEh+0x124>
    3c82:	59 c0       	rjmp	.+178    	; 0x3d36 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3c84:	66 23       	and	r22, r22
    3c86:	19 f0       	breq	.+6      	; 0x3c8e <_ZN15OrangutanSerial15serial_rx_checkEh+0x12e>
    3c88:	e9 ec       	ldi	r30, 0xC9	; 201
    3c8a:	f0 e0       	ldi	r31, 0x00	; 0
    3c8c:	02 c0       	rjmp	.+4      	; 0x3c92 <_ZN15OrangutanSerial15serial_rx_checkEh+0x132>
    3c8e:	e1 ec       	ldi	r30, 0xC1	; 193
    3c90:	f0 e0       	ldi	r31, 0x00	; 0
    3c92:	80 81       	ld	r24, Z
    3c94:	80 68       	ori	r24, 0x80	; 128
    3c96:	80 83       	st	Z, r24
    3c98:	4e c0       	rjmp	.+156    	; 0x3d36 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3c9a:	80 91 a8 08 	lds	r24, 0x08A8
    3c9e:	88 23       	and	r24, r24
    3ca0:	19 f0       	breq	.+6      	; 0x3ca8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    3ca2:	10 92 a5 08 	sts	0x08A5, r1
    3ca6:	47 c0       	rjmp	.+142    	; 0x3d36 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3ca8:	80 91 ab 08 	lds	r24, 0x08AB
    3cac:	90 91 ac 08 	lds	r25, 0x08AC
    3cb0:	89 2b       	or	r24, r25
    3cb2:	09 f4       	brne	.+2      	; 0x3cb6 <_ZN15OrangutanSerial15serial_rx_checkEh+0x156>
    3cb4:	40 c0       	rjmp	.+128    	; 0x3d36 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3cb6:	90 91 a5 08 	lds	r25, 0x08A5
    3cba:	80 91 a7 08 	lds	r24, 0x08A7
    3cbe:	98 17       	cp	r25, r24
    3cc0:	d0 f5       	brcc	.+116    	; 0x3d36 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3cc2:	80 91 c9 08 	lds	r24, 0x08C9
    3cc6:	88 23       	and	r24, r24
    3cc8:	a9 f4       	brne	.+42     	; 0x3cf4 <_ZN15OrangutanSerial15serial_rx_checkEh+0x194>
    3cca:	0e 94 b1 20 	call	0x4162	; 0x4162 <_ZN12OrangutanSVP15serialReadStartEv>
    3cce:	80 93 c9 08 	sts	0x08C9, r24
    3cd2:	10 e0       	ldi	r17, 0x00	; 0
    3cd4:	0b c0       	rjmp	.+22     	; 0x3cec <_ZN15OrangutanSerial15serial_rx_checkEh+0x18c>
    3cd6:	0e 94 4f 20 	call	0x409e	; 0x409e <_ZN12OrangutanSVP11getNextByteEv>
    3cda:	e0 2f       	mov	r30, r16
    3cdc:	f0 e0       	ldi	r31, 0x00	; 0
    3cde:	31 97       	sbiw	r30, 0x01	; 1
    3ce0:	e1 1b       	sub	r30, r17
    3ce2:	f1 09       	sbc	r31, r1
    3ce4:	e6 53       	subi	r30, 0x36	; 54
    3ce6:	f7 4f       	sbci	r31, 0xF7	; 247
    3ce8:	80 83       	st	Z, r24
    3cea:	1f 5f       	subi	r17, 0xFF	; 255
    3cec:	00 91 c9 08 	lds	r16, 0x08C9
    3cf0:	10 17       	cp	r17, r16
    3cf2:	88 f3       	brcs	.-30     	; 0x3cd6 <_ZN15OrangutanSerial15serial_rx_checkEh+0x176>
    3cf4:	e0 91 c9 08 	lds	r30, 0x08C9
    3cf8:	ee 23       	and	r30, r30
    3cfa:	e9 f0       	breq	.+58     	; 0x3d36 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d6>
    3cfc:	80 91 a5 08 	lds	r24, 0x08A5
    3d00:	a0 91 ab 08 	lds	r26, 0x08AB
    3d04:	b0 91 ac 08 	lds	r27, 0x08AC
    3d08:	a8 0f       	add	r26, r24
    3d0a:	b1 1d       	adc	r27, r1
    3d0c:	e1 50       	subi	r30, 0x01	; 1
    3d0e:	e0 93 c9 08 	sts	0x08C9, r30
    3d12:	f0 e0       	ldi	r31, 0x00	; 0
    3d14:	e6 53       	subi	r30, 0x36	; 54
    3d16:	f7 4f       	sbci	r31, 0xF7	; 247
    3d18:	80 81       	ld	r24, Z
    3d1a:	8c 93       	st	X, r24
    3d1c:	80 91 a5 08 	lds	r24, 0x08A5
    3d20:	8f 5f       	subi	r24, 0xFF	; 255
    3d22:	80 93 a5 08 	sts	0x08A5, r24
    3d26:	90 91 a5 08 	lds	r25, 0x08A5
    3d2a:	80 91 a7 08 	lds	r24, 0x08A7
    3d2e:	98 17       	cp	r25, r24
    3d30:	09 f0       	breq	.+2      	; 0x3d34 <_ZN15OrangutanSerial15serial_rx_checkEh+0x1d4>
    3d32:	ba cf       	rjmp	.-140    	; 0x3ca8 <_ZN15OrangutanSerial15serial_rx_checkEh+0x148>
    3d34:	b2 cf       	rjmp	.-156    	; 0x3c9a <_ZN15OrangutanSerial15serial_rx_checkEh+0x13a>
    3d36:	df 91       	pop	r29
    3d38:	cf 91       	pop	r28
    3d3a:	1f 91       	pop	r17
    3d3c:	0f 91       	pop	r16
    3d3e:	08 95       	ret

00003d40 <_ZN15OrangutanSerial5checkEv>:
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <_ZN15OrangutanSerial15serial_tx_checkEh>
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <_ZN15OrangutanSerial15serial_tx_checkEh>
    3d4c:	82 e0       	ldi	r24, 0x02	; 2
    3d4e:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <_ZN15OrangutanSerial15serial_tx_checkEh>
    3d52:	80 e0       	ldi	r24, 0x00	; 0
    3d54:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <_ZN15OrangutanSerial15serial_rx_checkEh>
    3d58:	81 e0       	ldi	r24, 0x01	; 1
    3d5a:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <_ZN15OrangutanSerial15serial_rx_checkEh>
    3d5e:	82 e0       	ldi	r24, 0x02	; 2
    3d60:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <_ZN15OrangutanSerial15serial_rx_checkEh>
    3d64:	08 95       	ret

00003d66 <_ZN15OrangutanSerial12sendBlockingEhPch>:
    3d66:	1f 93       	push	r17
    3d68:	18 2f       	mov	r17, r24
    3d6a:	0e 94 b2 1c 	call	0x3964	; 0x3964 <_ZN15OrangutanSerial4sendEhPch>
    3d6e:	02 c0       	rjmp	.+4      	; 0x3d74 <_ZN15OrangutanSerial12sendBlockingEhPch+0xe>
    3d70:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <_ZN15OrangutanSerial5checkEv>
    3d74:	81 2f       	mov	r24, r17
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	fc 01       	movw	r30, r24
    3d7a:	73 e0       	ldi	r23, 0x03	; 3
    3d7c:	ee 0f       	add	r30, r30
    3d7e:	ff 1f       	adc	r31, r31
    3d80:	7a 95       	dec	r23
    3d82:	e1 f7       	brne	.-8      	; 0x3d7c <_ZN15OrangutanSerial12sendBlockingEhPch+0x16>
    3d84:	88 0f       	add	r24, r24
    3d86:	99 1f       	adc	r25, r25
    3d88:	e8 0f       	add	r30, r24
    3d8a:	f9 1f       	adc	r31, r25
    3d8c:	e1 57       	subi	r30, 0x71	; 113
    3d8e:	f7 4f       	sbci	r31, 0xF7	; 247
    3d90:	21 81       	ldd	r18, Z+1	; 0x01
    3d92:	81 2f       	mov	r24, r17
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	fc 01       	movw	r30, r24
    3d98:	53 e0       	ldi	r21, 0x03	; 3
    3d9a:	ee 0f       	add	r30, r30
    3d9c:	ff 1f       	adc	r31, r31
    3d9e:	5a 95       	dec	r21
    3da0:	e1 f7       	brne	.-8      	; 0x3d9a <_ZN15OrangutanSerial12sendBlockingEhPch+0x34>
    3da2:	88 0f       	add	r24, r24
    3da4:	99 1f       	adc	r25, r25
    3da6:	e8 0f       	add	r30, r24
    3da8:	f9 1f       	adc	r31, r25
    3daa:	e1 57       	subi	r30, 0x71	; 113
    3dac:	f7 4f       	sbci	r31, 0xF7	; 247
    3dae:	83 81       	ldd	r24, Z+3	; 0x03
    3db0:	28 17       	cp	r18, r24
    3db2:	f1 f6       	brne	.-68     	; 0x3d70 <_ZN15OrangutanSerial12sendBlockingEhPch+0xa>
    3db4:	1f 91       	pop	r17
    3db6:	08 95       	ret

00003db8 <serial_send_blocking>:
    3db8:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <_ZN15OrangutanSerial12sendBlockingEhPch>
    3dbc:	08 95       	ret

00003dbe <_ZN15OrangutanSerial15receiveBlockingEhPchj>:
    3dbe:	a0 e0       	ldi	r26, 0x00	; 0
    3dc0:	b0 e0       	ldi	r27, 0x00	; 0
    3dc2:	e5 ee       	ldi	r30, 0xE5	; 229
    3dc4:	fe e1       	ldi	r31, 0x1E	; 30
    3dc6:	0c 94 28 22 	jmp	0x4450	; 0x4450 <__prologue_saves__+0xc>
    3dca:	08 2f       	mov	r16, r24
    3dcc:	79 01       	movw	r14, r18
    3dce:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <_ZN15OrangutanSerial7receiveEhPch>
    3dd2:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <get_ms>
    3dd6:	4b 01       	movw	r8, r22
    3dd8:	5c 01       	movw	r10, r24
    3dda:	10 e0       	ldi	r17, 0x00	; 0
    3ddc:	e8 01       	movw	r28, r16
    3dde:	cc 0f       	add	r28, r28
    3de0:	dd 1f       	adc	r29, r29
    3de2:	cc 0f       	add	r28, r28
    3de4:	dd 1f       	adc	r29, r29
    3de6:	c0 0f       	add	r28, r16
    3de8:	d1 1f       	adc	r29, r17
    3dea:	cc 0f       	add	r28, r28
    3dec:	dd 1f       	adc	r29, r29
    3dee:	cf 56       	subi	r28, 0x6F	; 111
    3df0:	d7 4f       	sbci	r29, 0xF7	; 247
    3df2:	68 01       	movw	r12, r16
    3df4:	f3 e0       	ldi	r31, 0x03	; 3
    3df6:	cc 0c       	add	r12, r12
    3df8:	dd 1c       	adc	r13, r13
    3dfa:	fa 95       	dec	r31
    3dfc:	e1 f7       	brne	.-8      	; 0x3df6 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x38>
    3dfe:	00 0f       	add	r16, r16
    3e00:	11 1f       	adc	r17, r17
    3e02:	c0 0e       	add	r12, r16
    3e04:	d1 1e       	adc	r13, r17
    3e06:	83 e9       	ldi	r24, 0x93	; 147
    3e08:	98 e0       	ldi	r25, 0x08	; 8
    3e0a:	c8 0e       	add	r12, r24
    3e0c:	d9 1e       	adc	r13, r25
    3e0e:	00 e0       	ldi	r16, 0x00	; 0
    3e10:	10 e0       	ldi	r17, 0x00	; 0
    3e12:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <_ZN15OrangutanSerial5checkEv>
    3e16:	98 81       	ld	r25, Y
    3e18:	f6 01       	movw	r30, r12
    3e1a:	80 81       	ld	r24, Z
    3e1c:	98 17       	cp	r25, r24
    3e1e:	11 f4       	brne	.+4      	; 0x3e24 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x66>
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	0c c0       	rjmp	.+24     	; 0x3e3c <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x7e>
    3e24:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <get_ms>
    3e28:	68 19       	sub	r22, r8
    3e2a:	79 09       	sbc	r23, r9
    3e2c:	8a 09       	sbc	r24, r10
    3e2e:	9b 09       	sbc	r25, r11
    3e30:	6e 15       	cp	r22, r14
    3e32:	7f 05       	cpc	r23, r15
    3e34:	80 07       	cpc	r24, r16
    3e36:	91 07       	cpc	r25, r17
    3e38:	60 f3       	brcs	.-40     	; 0x3e12 <_ZN15OrangutanSerial15receiveBlockingEhPchj+0x54>
    3e3a:	81 e0       	ldi	r24, 0x01	; 1
    3e3c:	cd b7       	in	r28, 0x3d	; 61
    3e3e:	de b7       	in	r29, 0x3e	; 62
    3e40:	ec e0       	ldi	r30, 0x0C	; 12
    3e42:	0c 94 44 22 	jmp	0x4488	; 0x4488 <__epilogue_restores__+0xc>

00003e46 <serial_receive_blocking>:
    3e46:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <_ZN15OrangutanSerial15receiveBlockingEhPchj>
    3e4a:	08 95       	ret

00003e4c <serial_check>:
    3e4c:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <_ZN15OrangutanSerial5checkEv>
    3e50:	08 95       	ret

00003e52 <__vector_11>:
    3e52:	2f 92       	push	r2
    3e54:	8f 93       	push	r24
    3e56:	9f 93       	push	r25
    3e58:	2f b6       	in	r2, 0x3f	; 63
    3e5a:	80 91 d3 08 	lds	r24, 0x08D3
    3e5e:	90 91 d4 08 	lds	r25, 0x08D4
    3e62:	01 96       	adiw	r24, 0x01	; 1
    3e64:	80 93 d3 08 	sts	0x08D3, r24
    3e68:	90 93 d4 08 	sts	0x08D4, r25
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	80 91 d5 08 	lds	r24, 0x08D5
    3e72:	89 1f       	adc	r24, r25
    3e74:	80 93 d5 08 	sts	0x08D5, r24
    3e78:	90 91 db 08 	lds	r25, 0x08DB
    3e7c:	9c 5f       	subi	r25, 0xFC	; 252
    3e7e:	90 93 db 08 	sts	0x08DB, r25
    3e82:	80 91 da 08 	lds	r24, 0x08DA
    3e86:	80 51       	subi	r24, 0x10	; 16
    3e88:	97 42       	sbci	r25, 0x27	; 39
    3e8a:	c0 f0       	brcs	.+48     	; 0x3ebc <end>
    3e8c:	90 93 db 08 	sts	0x08DB, r25
    3e90:	80 93 da 08 	sts	0x08DA, r24
    3e94:	80 91 d6 08 	lds	r24, 0x08D6
    3e98:	90 91 d7 08 	lds	r25, 0x08D7
    3e9c:	01 96       	adiw	r24, 0x01	; 1
    3e9e:	80 93 d6 08 	sts	0x08D6, r24
    3ea2:	90 93 d7 08 	sts	0x08D7, r25
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	80 91 d8 08 	lds	r24, 0x08D8
    3eac:	89 1f       	adc	r24, r25
    3eae:	80 93 d8 08 	sts	0x08D8, r24
    3eb2:	80 91 d9 08 	lds	r24, 0x08D9
    3eb6:	89 1f       	adc	r24, r25
    3eb8:	80 93 d9 08 	sts	0x08D9, r24

00003ebc <end>:
    3ebc:	2f be       	out	0x3f, r2	; 63
    3ebe:	9f 91       	pop	r25
    3ec0:	8f 91       	pop	r24
    3ec2:	2f 90       	pop	r2
    3ec4:	18 95       	reti

00003ec6 <ticks_to_microseconds>:
    3ec6:	6f 5f       	subi	r22, 0xFF	; 255
    3ec8:	7f 4f       	sbci	r23, 0xFF	; 255
    3eca:	8f 4f       	sbci	r24, 0xFF	; 255
    3ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ece:	66 0f       	add	r22, r22
    3ed0:	77 1f       	adc	r23, r23
    3ed2:	88 1f       	adc	r24, r24
    3ed4:	99 1f       	adc	r25, r25
    3ed6:	25 e0       	ldi	r18, 0x05	; 5
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	40 e0       	ldi	r20, 0x00	; 0
    3edc:	50 e0       	ldi	r21, 0x00	; 0
    3ede:	0e 94 00 22 	call	0x4400	; 0x4400 <__udivmodsi4>
    3ee2:	ca 01       	movw	r24, r20
    3ee4:	b9 01       	movw	r22, r18
    3ee6:	08 95       	ret

00003ee8 <delay_ms>:
    3ee8:	28 ee       	ldi	r18, 0xE8	; 232
    3eea:	33 e0       	ldi	r19, 0x03	; 3
    3eec:	09 c0       	rjmp	.+18     	; 0x3f00 <delay_ms+0x18>
    3eee:	f9 01       	movw	r30, r18
    3ef0:	6f 93       	push	r22
    3ef2:	64 e0       	ldi	r22, 0x04	; 4
    3ef4:	6a 95       	dec	r22
    3ef6:	f1 f7       	brne	.-4      	; 0x3ef4 <delay_ms+0xc>
    3ef8:	6f 91       	pop	r22
    3efa:	31 97       	sbiw	r30, 0x01	; 1
    3efc:	c9 f7       	brne	.-14     	; 0x3ef0 <delay_ms+0x8>
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	00 97       	sbiw	r24, 0x00	; 0
    3f02:	a9 f7       	brne	.-22     	; 0x3eee <delay_ms+0x6>
    3f04:	08 95       	ret

00003f06 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    3f06:	6f 5f       	subi	r22, 0xFF	; 255
    3f08:	7f 4f       	sbci	r23, 0xFF	; 255
    3f0a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f0e:	66 0f       	add	r22, r22
    3f10:	77 1f       	adc	r23, r23
    3f12:	88 1f       	adc	r24, r24
    3f14:	99 1f       	adc	r25, r25
    3f16:	25 e0       	ldi	r18, 0x05	; 5
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	40 e0       	ldi	r20, 0x00	; 0
    3f1c:	50 e0       	ldi	r21, 0x00	; 0
    3f1e:	0e 94 00 22 	call	0x4400	; 0x4400 <__udivmodsi4>
    3f22:	ca 01       	movw	r24, r20
    3f24:	b9 01       	movw	r22, r18
    3f26:	08 95       	ret

00003f28 <_ZN13OrangutanTime17delayMillisecondsEj>:
    3f28:	28 ee       	ldi	r18, 0xE8	; 232
    3f2a:	33 e0       	ldi	r19, 0x03	; 3
    3f2c:	09 c0       	rjmp	.+18     	; 0x3f40 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3f2e:	f9 01       	movw	r30, r18
    3f30:	6f 93       	push	r22
    3f32:	64 e0       	ldi	r22, 0x04	; 4
    3f34:	6a 95       	dec	r22
    3f36:	f1 f7       	brne	.-4      	; 0x3f34 <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3f38:	6f 91       	pop	r22
    3f3a:	31 97       	sbiw	r30, 0x01	; 1
    3f3c:	c9 f7       	brne	.-14     	; 0x3f30 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3f3e:	01 97       	sbiw	r24, 0x01	; 1
    3f40:	00 97       	sbiw	r24, 0x00	; 0
    3f42:	a9 f7       	brne	.-22     	; 0x3f2e <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    3f44:	08 95       	ret

00003f46 <_ZN13OrangutanTime5init2Ev>:
    3f46:	a0 e7       	ldi	r26, 0x70	; 112
    3f48:	b0 e0       	ldi	r27, 0x00	; 0
    3f4a:	8c 91       	ld	r24, X
    3f4c:	8e 7f       	andi	r24, 0xFE	; 254
    3f4e:	8c 93       	st	X, r24
    3f50:	e0 eb       	ldi	r30, 0xB0	; 176
    3f52:	f0 e0       	ldi	r31, 0x00	; 0
    3f54:	80 81       	ld	r24, Z
    3f56:	83 60       	ori	r24, 0x03	; 3
    3f58:	80 83       	st	Z, r24
    3f5a:	e1 eb       	ldi	r30, 0xB1	; 177
    3f5c:	f0 e0       	ldi	r31, 0x00	; 0
    3f5e:	80 81       	ld	r24, Z
    3f60:	80 7f       	andi	r24, 0xF0	; 240
    3f62:	80 83       	st	Z, r24
    3f64:	80 81       	ld	r24, Z
    3f66:	82 60       	ori	r24, 0x02	; 2
    3f68:	80 83       	st	Z, r24
    3f6a:	b8 9a       	sbi	0x17, 0	; 23
    3f6c:	8c 91       	ld	r24, X
    3f6e:	81 60       	ori	r24, 0x01	; 1
    3f70:	8c 93       	st	X, r24
    3f72:	78 94       	sei
    3f74:	08 95       	ret

00003f76 <_ZN13OrangutanTime4initEv>:
    3f76:	80 91 dc 08 	lds	r24, 0x08DC
    3f7a:	88 23       	and	r24, r24
    3f7c:	29 f4       	brne	.+10     	; 0x3f88 <_ZN13OrangutanTime4initEv+0x12>
    3f7e:	81 e0       	ldi	r24, 0x01	; 1
    3f80:	80 93 dc 08 	sts	0x08DC, r24
    3f84:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <_ZN13OrangutanTime5init2Ev>
    3f88:	08 95       	ret

00003f8a <_ZN13OrangutanTime2msEv>:
    3f8a:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <_ZN13OrangutanTime4initEv>
    3f8e:	e0 e7       	ldi	r30, 0x70	; 112
    3f90:	f0 e0       	ldi	r31, 0x00	; 0
    3f92:	80 81       	ld	r24, Z
    3f94:	8e 7f       	andi	r24, 0xFE	; 254
    3f96:	80 83       	st	Z, r24
    3f98:	20 91 d6 08 	lds	r18, 0x08D6
    3f9c:	30 91 d7 08 	lds	r19, 0x08D7
    3fa0:	40 91 d8 08 	lds	r20, 0x08D8
    3fa4:	50 91 d9 08 	lds	r21, 0x08D9
    3fa8:	80 81       	ld	r24, Z
    3faa:	81 60       	ori	r24, 0x01	; 1
    3fac:	80 83       	st	Z, r24
    3fae:	b9 01       	movw	r22, r18
    3fb0:	ca 01       	movw	r24, r20
    3fb2:	08 95       	ret

00003fb4 <get_ms>:
    3fb4:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <_ZN13OrangutanTime2msEv>
    3fb8:	08 95       	ret

00003fba <_ZN13OrangutanTime5ticksEv>:
    3fba:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <_ZN13OrangutanTime4initEv>
    3fbe:	80 91 70 00 	lds	r24, 0x0070
    3fc2:	8e 7f       	andi	r24, 0xFE	; 254
    3fc4:	80 93 70 00 	sts	0x0070, r24
    3fc8:	60 91 b2 00 	lds	r22, 0x00B2
    3fcc:	80 91 d2 08 	lds	r24, 0x08D2
    3fd0:	90 91 d3 08 	lds	r25, 0x08D3
    3fd4:	a0 91 d4 08 	lds	r26, 0x08D4
    3fd8:	b0 91 d5 08 	lds	r27, 0x08D5
    3fdc:	b8 99       	sbic	0x17, 0	; 23
    3fde:	05 c0       	rjmp	.+10     	; 0x3fea <_ZN13OrangutanTime5ticksEv+0x30>
    3fe0:	26 2f       	mov	r18, r22
    3fe2:	30 e0       	ldi	r19, 0x00	; 0
    3fe4:	40 e0       	ldi	r20, 0x00	; 0
    3fe6:	50 e0       	ldi	r21, 0x00	; 0
    3fe8:	11 c0       	rjmp	.+34     	; 0x400c <_ZN13OrangutanTime5ticksEv+0x52>
    3fea:	80 91 b2 00 	lds	r24, 0x00B2
    3fee:	20 91 d2 08 	lds	r18, 0x08D2
    3ff2:	30 91 d3 08 	lds	r19, 0x08D3
    3ff6:	40 91 d4 08 	lds	r20, 0x08D4
    3ffa:	50 91 d5 08 	lds	r21, 0x08D5
    3ffe:	20 50       	subi	r18, 0x00	; 0
    4000:	3f 4f       	sbci	r19, 0xFF	; 255
    4002:	4f 4f       	sbci	r20, 0xFF	; 255
    4004:	5f 4f       	sbci	r21, 0xFF	; 255
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	a0 e0       	ldi	r26, 0x00	; 0
    400a:	b0 e0       	ldi	r27, 0x00	; 0
    400c:	28 2b       	or	r18, r24
    400e:	39 2b       	or	r19, r25
    4010:	4a 2b       	or	r20, r26
    4012:	5b 2b       	or	r21, r27
    4014:	80 91 70 00 	lds	r24, 0x0070
    4018:	81 60       	ori	r24, 0x01	; 1
    401a:	80 93 70 00 	sts	0x0070, r24
    401e:	b9 01       	movw	r22, r18
    4020:	ca 01       	movw	r24, r20
    4022:	08 95       	ret

00004024 <get_ticks>:
    4024:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <_ZN13OrangutanTime5ticksEv>
    4028:	08 95       	ret

0000402a <_ZN13OrangutanTime5resetEv>:
    402a:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <_ZN13OrangutanTime4initEv>
    402e:	e0 e7       	ldi	r30, 0x70	; 112
    4030:	f0 e0       	ldi	r31, 0x00	; 0
    4032:	80 81       	ld	r24, Z
    4034:	8e 7f       	andi	r24, 0xFE	; 254
    4036:	80 83       	st	Z, r24
    4038:	10 92 d6 08 	sts	0x08D6, r1
    403c:	10 92 d7 08 	sts	0x08D7, r1
    4040:	10 92 d8 08 	sts	0x08D8, r1
    4044:	10 92 d9 08 	sts	0x08D9, r1
    4048:	10 92 db 08 	sts	0x08DB, r1
    404c:	10 92 da 08 	sts	0x08DA, r1
    4050:	80 81       	ld	r24, Z
    4052:	81 60       	ori	r24, 0x01	; 1
    4054:	80 83       	st	Z, r24
    4056:	08 95       	ret

00004058 <time_reset>:
    4058:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN13OrangutanTime5resetEv>
    405c:	08 95       	ret

0000405e <_ZN12OrangutanSVP7setModeEh>:
    405e:	98 2f       	mov	r25, r24
    4060:	80 91 f3 08 	lds	r24, 0x08F3
    4064:	89 17       	cp	r24, r25
    4066:	39 f0       	breq	.+14     	; 0x4076 <_ZN12OrangutanSVP7setModeEh+0x18>
    4068:	90 93 f3 08 	sts	0x08F3, r25
    406c:	89 2f       	mov	r24, r25
    406e:	80 6c       	ori	r24, 0xC0	; 192
    4070:	65 e0       	ldi	r22, 0x05	; 5
    4072:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    4076:	08 95       	ret

00004078 <svp_set_mode>:
    4078:	0e 94 2f 20 	call	0x405e	; 0x405e <_ZN12OrangutanSVP7setModeEh>
    407c:	08 95       	ret

0000407e <_ZN12OrangutanSVP17serialSendIfReadyEc>:
    407e:	1f 93       	push	r17
    4080:	18 2f       	mov	r17, r24
    4082:	88 1f       	adc	r24, r24
    4084:	88 27       	eor	r24, r24
    4086:	88 1f       	adc	r24, r24
    4088:	8c 57       	subi	r24, 0x7C	; 124
    408a:	65 e0       	ldi	r22, 0x05	; 5
    408c:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    4090:	81 2f       	mov	r24, r17
    4092:	8f 77       	andi	r24, 0x7F	; 127
    4094:	65 e0       	ldi	r22, 0x05	; 5
    4096:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    409a:	1f 91       	pop	r17
    409c:	08 95       	ret

0000409e <_ZN12OrangutanSVP11getNextByteEv>:
    409e:	8f ef       	ldi	r24, 0xFF	; 255
    40a0:	64 e0       	ldi	r22, 0x04	; 4
    40a2:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    40a6:	08 95       	ret

000040a8 <_ZL23updateVariablesIfNeededv>:
    40a8:	cf 93       	push	r28
    40aa:	df 93       	push	r29
    40ac:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <_ZN13OrangutanTime2msEv>
    40b0:	20 91 b1 08 	lds	r18, 0x08B1
    40b4:	30 91 b2 08 	lds	r19, 0x08B2
    40b8:	40 91 b3 08 	lds	r20, 0x08B3
    40bc:	50 91 b4 08 	lds	r21, 0x08B4
    40c0:	62 17       	cp	r22, r18
    40c2:	73 07       	cpc	r23, r19
    40c4:	84 07       	cpc	r24, r20
    40c6:	95 07       	cpc	r25, r21
    40c8:	b9 f0       	breq	.+46     	; 0x40f8 <_ZL23updateVariablesIfNeededv+0x50>
    40ca:	81 e8       	ldi	r24, 0x81	; 129
    40cc:	67 e0       	ldi	r22, 0x07	; 7
    40ce:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    40d2:	c6 ee       	ldi	r28, 0xE6	; 230
    40d4:	d8 e0       	ldi	r29, 0x08	; 8
    40d6:	0e 94 4f 20 	call	0x409e	; 0x409e <_ZN12OrangutanSVP11getNextByteEv>
    40da:	89 93       	st	Y+, r24
    40dc:	88 e0       	ldi	r24, 0x08	; 8
    40de:	c3 3f       	cpi	r28, 0xF3	; 243
    40e0:	d8 07       	cpc	r29, r24
    40e2:	c9 f7       	brne	.-14     	; 0x40d6 <_ZL23updateVariablesIfNeededv+0x2e>
    40e4:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <_ZN13OrangutanTime2msEv>
    40e8:	60 93 b1 08 	sts	0x08B1, r22
    40ec:	70 93 b2 08 	sts	0x08B2, r23
    40f0:	80 93 b3 08 	sts	0x08B3, r24
    40f4:	90 93 b4 08 	sts	0x08B4, r25
    40f8:	df 91       	pop	r29
    40fa:	cf 91       	pop	r28
    40fc:	08 95       	ret

000040fe <_ZN12OrangutanSVP9getStatusEv>:
    40fe:	0e 94 54 20 	call	0x40a8	; 0x40a8 <_ZL23updateVariablesIfNeededv>
    4102:	80 91 e6 08 	lds	r24, 0x08E6
    4106:	08 95       	ret

00004108 <svp_get_status>:
    4108:	0e 94 7f 20 	call	0x40fe	; 0x40fe <_ZN12OrangutanSVP9getStatusEv>
    410c:	08 95       	ret

0000410e <_ZN12OrangutanSVP21getChannelDMillivoltsEv>:
    410e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <_ZL23updateVariablesIfNeededv>
    4112:	80 91 ed 08 	lds	r24, 0x08ED
    4116:	90 91 ee 08 	lds	r25, 0x08EE
    411a:	08 95       	ret

0000411c <_ZN12OrangutanSVP21getChannelCMillivoltsEv>:
    411c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <_ZL23updateVariablesIfNeededv>
    4120:	80 91 eb 08 	lds	r24, 0x08EB
    4124:	90 91 ec 08 	lds	r25, 0x08EC
    4128:	08 95       	ret

0000412a <_ZN12OrangutanSVP21getChannelBMillivoltsEv>:
    412a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <_ZL23updateVariablesIfNeededv>
    412e:	80 91 e9 08 	lds	r24, 0x08E9
    4132:	90 91 ea 08 	lds	r25, 0x08EA
    4136:	08 95       	ret

00004138 <_ZN12OrangutanSVP21getChannelAMillivoltsEv>:
    4138:	0e 94 54 20 	call	0x40a8	; 0x40a8 <_ZL23updateVariablesIfNeededv>
    413c:	80 91 e7 08 	lds	r24, 0x08E7
    4140:	90 91 e8 08 	lds	r25, 0x08E8
    4144:	08 95       	ret

00004146 <_ZN12OrangutanSVP20getBatteryMillivoltsEv>:
    4146:	0e 94 54 20 	call	0x40a8	; 0x40a8 <_ZL23updateVariablesIfNeededv>
    414a:	80 91 f1 08 	lds	r24, 0x08F1
    414e:	90 91 f2 08 	lds	r25, 0x08F2
    4152:	08 95       	ret

00004154 <_ZN12OrangutanSVP20getTrimpotMillivoltsEv>:
    4154:	0e 94 54 20 	call	0x40a8	; 0x40a8 <_ZL23updateVariablesIfNeededv>
    4158:	80 91 ef 08 	lds	r24, 0x08EF
    415c:	90 91 f0 08 	lds	r25, 0x08F0
    4160:	08 95       	ret

00004162 <_ZN12OrangutanSVP15serialReadStartEv>:
    4162:	83 e8       	ldi	r24, 0x83	; 131
    4164:	67 e0       	ldi	r22, 0x07	; 7
    4166:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    416a:	0e 94 4f 20 	call	0x409e	; 0x409e <_ZN12OrangutanSVP11getNextByteEv>
    416e:	08 95       	ret

00004170 <_Z14updateEncodersv>:
    4170:	a5 e0       	ldi	r26, 0x05	; 5
    4172:	b0 e0       	ldi	r27, 0x00	; 0
    4174:	ee eb       	ldi	r30, 0xBE	; 190
    4176:	f0 e2       	ldi	r31, 0x20	; 32
    4178:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__prologue_saves__+0x1e>
    417c:	82 e8       	ldi	r24, 0x82	; 130
    417e:	66 e0       	ldi	r22, 0x06	; 6
    4180:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    4184:	0e 94 4f 20 	call	0x409e	; 0x409e <_ZN12OrangutanSVP11getNextByteEv>
    4188:	80 93 e1 08 	sts	0x08E1, r24
    418c:	0e 94 4f 20 	call	0x409e	; 0x409e <_ZN12OrangutanSVP11getNextByteEv>
    4190:	80 93 e2 08 	sts	0x08E2, r24
    4194:	0e 94 4f 20 	call	0x409e	; 0x409e <_ZN12OrangutanSVP11getNextByteEv>
    4198:	80 93 e3 08 	sts	0x08E3, r24
    419c:	0e 94 4f 20 	call	0x409e	; 0x409e <_ZN12OrangutanSVP11getNextByteEv>
    41a0:	80 93 e4 08 	sts	0x08E4, r24
    41a4:	10 91 e5 08 	lds	r17, 0x08E5
    41a8:	0e 94 4f 20 	call	0x409e	; 0x409e <_ZN12OrangutanSVP11getNextByteEv>
    41ac:	18 2b       	or	r17, r24
    41ae:	10 93 e5 08 	sts	0x08E5, r17
    41b2:	de 01       	movw	r26, r28
    41b4:	11 96       	adiw	r26, 0x01	; 1
    41b6:	e1 ee       	ldi	r30, 0xE1	; 225
    41b8:	f8 e0       	ldi	r31, 0x08	; 8
    41ba:	85 e0       	ldi	r24, 0x05	; 5
    41bc:	01 90       	ld	r0, Z+
    41be:	0d 92       	st	X+, r0
    41c0:	81 50       	subi	r24, 0x01	; 1
    41c2:	e1 f7       	brne	.-8      	; 0x41bc <_Z14updateEncodersv+0x4c>
    41c4:	29 81       	ldd	r18, Y+1	; 0x01
    41c6:	3a 81       	ldd	r19, Y+2	; 0x02
    41c8:	4b 81       	ldd	r20, Y+3	; 0x03
    41ca:	5c 81       	ldd	r21, Y+4	; 0x04
    41cc:	6d 81       	ldd	r22, Y+5	; 0x05
    41ce:	70 e0       	ldi	r23, 0x00	; 0
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	25 96       	adiw	r28, 0x05	; 5
    41d4:	e3 e0       	ldi	r30, 0x03	; 3
    41d6:	0c 94 4d 22 	jmp	0x449a	; 0x449a <__epilogue_restores__+0x1e>

000041da <_ZL22updateEncodersIfNeededv>:
    41da:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <_ZN13OrangutanTime2msEv>
    41de:	20 91 ad 08 	lds	r18, 0x08AD
    41e2:	30 91 ae 08 	lds	r19, 0x08AE
    41e6:	40 91 af 08 	lds	r20, 0x08AF
    41ea:	50 91 b0 08 	lds	r21, 0x08B0
    41ee:	62 17       	cp	r22, r18
    41f0:	73 07       	cpc	r23, r19
    41f2:	84 07       	cpc	r24, r20
    41f4:	95 07       	cpc	r25, r21
    41f6:	61 f0       	breq	.+24     	; 0x4210 <_ZL22updateEncodersIfNeededv+0x36>
    41f8:	0e 94 b8 20 	call	0x4170	; 0x4170 <_Z14updateEncodersv>
    41fc:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <_ZN13OrangutanTime2msEv>
    4200:	60 93 ad 08 	sts	0x08AD, r22
    4204:	70 93 ae 08 	sts	0x08AE, r23
    4208:	80 93 af 08 	sts	0x08AF, r24
    420c:	90 93 b0 08 	sts	0x08B0, r25
    4210:	08 95       	ret

00004212 <_ZN12OrangutanSVP12checkErrorCDEv>:
    4212:	0e 94 ed 20 	call	0x41da	; 0x41da <_ZL22updateEncodersIfNeededv>
    4216:	80 91 e5 08 	lds	r24, 0x08E5
    421a:	81 fd       	sbrc	r24, 1
    421c:	02 c0       	rjmp	.+4      	; 0x4222 <_ZN12OrangutanSVP12checkErrorCDEv+0x10>
    421e:	80 e0       	ldi	r24, 0x00	; 0
    4220:	08 95       	ret
    4222:	8d 7f       	andi	r24, 0xFD	; 253
    4224:	80 93 e5 08 	sts	0x08E5, r24
    4228:	81 e0       	ldi	r24, 0x01	; 1
    422a:	08 95       	ret

0000422c <svp_check_error_cd>:
    422c:	0e 94 09 21 	call	0x4212	; 0x4212 <_ZN12OrangutanSVP12checkErrorCDEv>
    4230:	08 95       	ret

00004232 <_ZN12OrangutanSVP12checkErrorABEv>:
    4232:	0e 94 ed 20 	call	0x41da	; 0x41da <_ZL22updateEncodersIfNeededv>
    4236:	80 91 e5 08 	lds	r24, 0x08E5
    423a:	80 fd       	sbrc	r24, 0
    423c:	02 c0       	rjmp	.+4      	; 0x4242 <_ZN12OrangutanSVP12checkErrorABEv+0x10>
    423e:	80 e0       	ldi	r24, 0x00	; 0
    4240:	08 95       	ret
    4242:	8e 7f       	andi	r24, 0xFE	; 254
    4244:	80 93 e5 08 	sts	0x08E5, r24
    4248:	81 e0       	ldi	r24, 0x01	; 1
    424a:	08 95       	ret

0000424c <svp_check_error_ab>:
    424c:	0e 94 19 21 	call	0x4232	; 0x4232 <_ZN12OrangutanSVP12checkErrorABEv>
    4250:	08 95       	ret

00004252 <_ZN12OrangutanSVP11getCountsCDEv>:
    4252:	0e 94 ed 20 	call	0x41da	; 0x41da <_ZL22updateEncodersIfNeededv>
    4256:	20 91 e3 08 	lds	r18, 0x08E3
    425a:	30 91 e4 08 	lds	r19, 0x08E4
    425e:	80 91 df 08 	lds	r24, 0x08DF
    4262:	90 91 e0 08 	lds	r25, 0x08E0
    4266:	28 1b       	sub	r18, r24
    4268:	39 0b       	sbc	r19, r25
    426a:	c9 01       	movw	r24, r18
    426c:	08 95       	ret

0000426e <_ZN12OrangutanSVP19getCountsAndResetCDEv>:
    426e:	0e 94 29 21 	call	0x4252	; 0x4252 <_ZN12OrangutanSVP11getCountsCDEv>
    4272:	20 91 e3 08 	lds	r18, 0x08E3
    4276:	30 91 e4 08 	lds	r19, 0x08E4
    427a:	30 93 e0 08 	sts	0x08E0, r19
    427e:	20 93 df 08 	sts	0x08DF, r18
    4282:	08 95       	ret

00004284 <svp_get_counts_and_reset_cd>:
    4284:	0e 94 37 21 	call	0x426e	; 0x426e <_ZN12OrangutanSVP19getCountsAndResetCDEv>
    4288:	08 95       	ret

0000428a <svp_get_counts_cd>:
    428a:	0e 94 29 21 	call	0x4252	; 0x4252 <_ZN12OrangutanSVP11getCountsCDEv>
    428e:	08 95       	ret

00004290 <_ZN12OrangutanSVP11getCountsABEv>:
    4290:	0e 94 ed 20 	call	0x41da	; 0x41da <_ZL22updateEncodersIfNeededv>
    4294:	20 91 e1 08 	lds	r18, 0x08E1
    4298:	30 91 e2 08 	lds	r19, 0x08E2
    429c:	80 91 dd 08 	lds	r24, 0x08DD
    42a0:	90 91 de 08 	lds	r25, 0x08DE
    42a4:	28 1b       	sub	r18, r24
    42a6:	39 0b       	sbc	r19, r25
    42a8:	c9 01       	movw	r24, r18
    42aa:	08 95       	ret

000042ac <_ZN12OrangutanSVP19getCountsAndResetABEv>:
    42ac:	0e 94 48 21 	call	0x4290	; 0x4290 <_ZN12OrangutanSVP11getCountsABEv>
    42b0:	20 91 e1 08 	lds	r18, 0x08E1
    42b4:	30 91 e2 08 	lds	r19, 0x08E2
    42b8:	30 93 de 08 	sts	0x08DE, r19
    42bc:	20 93 dd 08 	sts	0x08DD, r18
    42c0:	08 95       	ret

000042c2 <svp_get_counts_and_reset_ab>:
    42c2:	0e 94 56 21 	call	0x42ac	; 0x42ac <_ZN12OrangutanSVP19getCountsAndResetABEv>
    42c6:	08 95       	ret

000042c8 <svp_get_counts_ab>:
    42c8:	0e 94 48 21 	call	0x4290	; 0x4290 <_ZN12OrangutanSVP11getCountsABEv>
    42cc:	08 95       	ret

000042ce <_ZN12OrangutanSVP18getFirmwareVersionEv>:
    42ce:	80 e8       	ldi	r24, 0x80	; 128
    42d0:	65 e0       	ldi	r22, 0x05	; 5
    42d2:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    42d6:	0e 94 4f 20 	call	0x409e	; 0x409e <_ZN12OrangutanSVP11getNextByteEv>
    42da:	08 95       	ret

000042dc <svp_get_firmware_version>:
    42dc:	0e 94 67 21 	call	0x42ce	; 0x42ce <_ZN12OrangutanSVP18getFirmwareVersionEv>
    42e0:	08 95       	ret

000042e2 <_ZN18OrangutanSPIMaster4initEhh>:
    42e2:	98 2f       	mov	r25, r24
    42e4:	24 99       	sbic	0x04, 4	; 4
    42e6:	0c c0       	rjmp	.+24     	; 0x4300 <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    42e8:	2c 99       	sbic	0x05, 4	; 5
    42ea:	0a c0       	rjmp	.+20     	; 0x4300 <_ZN18OrangutanSPIMaster4initEhh+0x1e>
    42ec:	2c 9a       	sbi	0x05, 4	; 5
    42ee:	ee e1       	ldi	r30, 0x1E	; 30
    42f0:	f0 e0       	ldi	r31, 0x00	; 0
    42f2:	6f 93       	push	r22
    42f4:	64 e0       	ldi	r22, 0x04	; 4
    42f6:	6a 95       	dec	r22
    42f8:	f1 f7       	brne	.-4      	; 0x42f6 <_ZN18OrangutanSPIMaster4initEhh+0x14>
    42fa:	6f 91       	pop	r22
    42fc:	31 97       	sbiw	r30, 0x01	; 1
    42fe:	c9 f7       	brne	.-14     	; 0x42f2 <_ZN18OrangutanSPIMaster4initEhh+0x10>
    4300:	84 b1       	in	r24, 0x04	; 4
    4302:	80 6a       	ori	r24, 0xA0	; 160
    4304:	84 b9       	out	0x04, r24	; 4
    4306:	26 98       	cbi	0x04, 6	; 4
    4308:	89 2f       	mov	r24, r25
    430a:	83 70       	andi	r24, 0x03	; 3
    430c:	80 65       	ori	r24, 0x50	; 80
    430e:	6c 7a       	andi	r22, 0xAC	; 172
    4310:	86 2b       	or	r24, r22
    4312:	8c bd       	out	0x2c, r24	; 44
    4314:	89 2f       	mov	r24, r25
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	96 95       	lsr	r25
    431a:	87 95       	ror	r24
    431c:	96 95       	lsr	r25
    431e:	87 95       	ror	r24
    4320:	81 70       	andi	r24, 0x01	; 1
    4322:	8d bd       	out	0x2d, r24	; 45
    4324:	81 e0       	ldi	r24, 0x01	; 1
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN13OrangutanTime17delayMillisecondsEj>
    432c:	08 95       	ret

0000432e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>:
    432e:	0f 93       	push	r16
    4330:	1f 93       	push	r17
    4332:	08 2f       	mov	r16, r24
    4334:	16 2f       	mov	r17, r22
    4336:	0c b4       	in	r0, 0x2c	; 44
    4338:	06 fc       	sbrc	r0, 6
    433a:	04 c0       	rjmp	.+8      	; 0x4344 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x16>
    433c:	80 e0       	ldi	r24, 0x00	; 0
    433e:	64 e0       	ldi	r22, 0x04	; 4
    4340:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN18OrangutanSPIMaster4initEhh>
    4344:	0c b4       	in	r0, 0x2c	; 44
    4346:	04 fc       	sbrc	r0, 4
    4348:	03 c0       	rjmp	.+6      	; 0x4350 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x22>
    434a:	8c b5       	in	r24, 0x2c	; 44
    434c:	80 61       	ori	r24, 0x10	; 16
    434e:	8c bd       	out	0x2c, r24	; 44
    4350:	0e bd       	out	0x2e, r16	; 46
    4352:	05 c0       	rjmp	.+10     	; 0x435e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    4354:	0c b4       	in	r0, 0x2c	; 44
    4356:	04 fc       	sbrc	r0, 4
    4358:	02 c0       	rjmp	.+4      	; 0x435e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x30>
    435a:	80 e0       	ldi	r24, 0x00	; 0
    435c:	0f c0       	rjmp	.+30     	; 0x437c <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4e>
    435e:	0d b4       	in	r0, 0x2d	; 45
    4360:	07 fe       	sbrs	r0, 7
    4362:	f8 cf       	rjmp	.-16     	; 0x4354 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x26>
    4364:	11 23       	and	r17, r17
    4366:	49 f0       	breq	.+18     	; 0x437a <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x4c>
    4368:	81 2f       	mov	r24, r17
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	6f 93       	push	r22
    436e:	64 e0       	ldi	r22, 0x04	; 4
    4370:	6a 95       	dec	r22
    4372:	f1 f7       	brne	.-4      	; 0x4370 <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x42>
    4374:	6f 91       	pop	r22
    4376:	01 97       	sbiw	r24, 0x01	; 1
    4378:	c9 f7       	brne	.-14     	; 0x436c <_ZN18OrangutanSPIMaster16transmitAndDelayEhh+0x3e>
    437a:	8e b5       	in	r24, 0x2e	; 46
    437c:	1f 91       	pop	r17
    437e:	0f 91       	pop	r16
    4380:	08 95       	ret

00004382 <_ZN18OrangutanSPIMaster8transmitEh>:
    4382:	60 e0       	ldi	r22, 0x00	; 0
    4384:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    4388:	08 95       	ret

0000438a <spi_master_transmit>:
    438a:	0e 94 c1 21 	call	0x4382	; 0x4382 <_ZN18OrangutanSPIMaster8transmitEh>
    438e:	08 95       	ret

00004390 <spi_master_transmit_and_delay>:
    4390:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN18OrangutanSPIMaster16transmitAndDelayEhh>
    4394:	08 95       	ret

00004396 <spi_master_init>:
    4396:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN18OrangutanSPIMaster4initEhh>
    439a:	08 95       	ret

0000439c <__mulsi3>:
    439c:	62 9f       	mul	r22, r18
    439e:	d0 01       	movw	r26, r0
    43a0:	73 9f       	mul	r23, r19
    43a2:	f0 01       	movw	r30, r0
    43a4:	82 9f       	mul	r24, r18
    43a6:	e0 0d       	add	r30, r0
    43a8:	f1 1d       	adc	r31, r1
    43aa:	64 9f       	mul	r22, r20
    43ac:	e0 0d       	add	r30, r0
    43ae:	f1 1d       	adc	r31, r1
    43b0:	92 9f       	mul	r25, r18
    43b2:	f0 0d       	add	r31, r0
    43b4:	83 9f       	mul	r24, r19
    43b6:	f0 0d       	add	r31, r0
    43b8:	74 9f       	mul	r23, r20
    43ba:	f0 0d       	add	r31, r0
    43bc:	65 9f       	mul	r22, r21
    43be:	f0 0d       	add	r31, r0
    43c0:	99 27       	eor	r25, r25
    43c2:	72 9f       	mul	r23, r18
    43c4:	b0 0d       	add	r27, r0
    43c6:	e1 1d       	adc	r30, r1
    43c8:	f9 1f       	adc	r31, r25
    43ca:	63 9f       	mul	r22, r19
    43cc:	b0 0d       	add	r27, r0
    43ce:	e1 1d       	adc	r30, r1
    43d0:	f9 1f       	adc	r31, r25
    43d2:	bd 01       	movw	r22, r26
    43d4:	cf 01       	movw	r24, r30
    43d6:	11 24       	eor	r1, r1
    43d8:	08 95       	ret

000043da <__divmodhi4>:
    43da:	97 fb       	bst	r25, 7
    43dc:	09 2e       	mov	r0, r25
    43de:	07 26       	eor	r0, r23
    43e0:	0a d0       	rcall	.+20     	; 0x43f6 <__divmodhi4_neg1>
    43e2:	77 fd       	sbrc	r23, 7
    43e4:	04 d0       	rcall	.+8      	; 0x43ee <__divmodhi4_neg2>
    43e6:	65 d0       	rcall	.+202    	; 0x44b2 <__udivmodhi4>
    43e8:	06 d0       	rcall	.+12     	; 0x43f6 <__divmodhi4_neg1>
    43ea:	00 20       	and	r0, r0
    43ec:	1a f4       	brpl	.+6      	; 0x43f4 <__divmodhi4_exit>

000043ee <__divmodhi4_neg2>:
    43ee:	70 95       	com	r23
    43f0:	61 95       	neg	r22
    43f2:	7f 4f       	sbci	r23, 0xFF	; 255

000043f4 <__divmodhi4_exit>:
    43f4:	08 95       	ret

000043f6 <__divmodhi4_neg1>:
    43f6:	f6 f7       	brtc	.-4      	; 0x43f4 <__divmodhi4_exit>
    43f8:	90 95       	com	r25
    43fa:	81 95       	neg	r24
    43fc:	9f 4f       	sbci	r25, 0xFF	; 255
    43fe:	08 95       	ret

00004400 <__udivmodsi4>:
    4400:	a1 e2       	ldi	r26, 0x21	; 33
    4402:	1a 2e       	mov	r1, r26
    4404:	aa 1b       	sub	r26, r26
    4406:	bb 1b       	sub	r27, r27
    4408:	fd 01       	movw	r30, r26
    440a:	0d c0       	rjmp	.+26     	; 0x4426 <__udivmodsi4_ep>

0000440c <__udivmodsi4_loop>:
    440c:	aa 1f       	adc	r26, r26
    440e:	bb 1f       	adc	r27, r27
    4410:	ee 1f       	adc	r30, r30
    4412:	ff 1f       	adc	r31, r31
    4414:	a2 17       	cp	r26, r18
    4416:	b3 07       	cpc	r27, r19
    4418:	e4 07       	cpc	r30, r20
    441a:	f5 07       	cpc	r31, r21
    441c:	20 f0       	brcs	.+8      	; 0x4426 <__udivmodsi4_ep>
    441e:	a2 1b       	sub	r26, r18
    4420:	b3 0b       	sbc	r27, r19
    4422:	e4 0b       	sbc	r30, r20
    4424:	f5 0b       	sbc	r31, r21

00004426 <__udivmodsi4_ep>:
    4426:	66 1f       	adc	r22, r22
    4428:	77 1f       	adc	r23, r23
    442a:	88 1f       	adc	r24, r24
    442c:	99 1f       	adc	r25, r25
    442e:	1a 94       	dec	r1
    4430:	69 f7       	brne	.-38     	; 0x440c <__udivmodsi4_loop>
    4432:	60 95       	com	r22
    4434:	70 95       	com	r23
    4436:	80 95       	com	r24
    4438:	90 95       	com	r25
    443a:	9b 01       	movw	r18, r22
    443c:	ac 01       	movw	r20, r24
    443e:	bd 01       	movw	r22, r26
    4440:	cf 01       	movw	r24, r30
    4442:	08 95       	ret

00004444 <__prologue_saves__>:
    4444:	2f 92       	push	r2
    4446:	3f 92       	push	r3
    4448:	4f 92       	push	r4
    444a:	5f 92       	push	r5
    444c:	6f 92       	push	r6
    444e:	7f 92       	push	r7
    4450:	8f 92       	push	r8
    4452:	9f 92       	push	r9
    4454:	af 92       	push	r10
    4456:	bf 92       	push	r11
    4458:	cf 92       	push	r12
    445a:	df 92       	push	r13
    445c:	ef 92       	push	r14
    445e:	ff 92       	push	r15
    4460:	0f 93       	push	r16
    4462:	1f 93       	push	r17
    4464:	cf 93       	push	r28
    4466:	df 93       	push	r29
    4468:	cd b7       	in	r28, 0x3d	; 61
    446a:	de b7       	in	r29, 0x3e	; 62
    446c:	ca 1b       	sub	r28, r26
    446e:	db 0b       	sbc	r29, r27
    4470:	0f b6       	in	r0, 0x3f	; 63
    4472:	f8 94       	cli
    4474:	de bf       	out	0x3e, r29	; 62
    4476:	0f be       	out	0x3f, r0	; 63
    4478:	cd bf       	out	0x3d, r28	; 61
    447a:	09 94       	ijmp

0000447c <__epilogue_restores__>:
    447c:	2a 88       	ldd	r2, Y+18	; 0x12
    447e:	39 88       	ldd	r3, Y+17	; 0x11
    4480:	48 88       	ldd	r4, Y+16	; 0x10
    4482:	5f 84       	ldd	r5, Y+15	; 0x0f
    4484:	6e 84       	ldd	r6, Y+14	; 0x0e
    4486:	7d 84       	ldd	r7, Y+13	; 0x0d
    4488:	8c 84       	ldd	r8, Y+12	; 0x0c
    448a:	9b 84       	ldd	r9, Y+11	; 0x0b
    448c:	aa 84       	ldd	r10, Y+10	; 0x0a
    448e:	b9 84       	ldd	r11, Y+9	; 0x09
    4490:	c8 84       	ldd	r12, Y+8	; 0x08
    4492:	df 80       	ldd	r13, Y+7	; 0x07
    4494:	ee 80       	ldd	r14, Y+6	; 0x06
    4496:	fd 80       	ldd	r15, Y+5	; 0x05
    4498:	0c 81       	ldd	r16, Y+4	; 0x04
    449a:	1b 81       	ldd	r17, Y+3	; 0x03
    449c:	aa 81       	ldd	r26, Y+2	; 0x02
    449e:	b9 81       	ldd	r27, Y+1	; 0x01
    44a0:	ce 0f       	add	r28, r30
    44a2:	d1 1d       	adc	r29, r1
    44a4:	0f b6       	in	r0, 0x3f	; 63
    44a6:	f8 94       	cli
    44a8:	de bf       	out	0x3e, r29	; 62
    44aa:	0f be       	out	0x3f, r0	; 63
    44ac:	cd bf       	out	0x3d, r28	; 61
    44ae:	ed 01       	movw	r28, r26
    44b0:	08 95       	ret

000044b2 <__udivmodhi4>:
    44b2:	aa 1b       	sub	r26, r26
    44b4:	bb 1b       	sub	r27, r27
    44b6:	51 e1       	ldi	r21, 0x11	; 17
    44b8:	07 c0       	rjmp	.+14     	; 0x44c8 <__udivmodhi4_ep>

000044ba <__udivmodhi4_loop>:
    44ba:	aa 1f       	adc	r26, r26
    44bc:	bb 1f       	adc	r27, r27
    44be:	a6 17       	cp	r26, r22
    44c0:	b7 07       	cpc	r27, r23
    44c2:	10 f0       	brcs	.+4      	; 0x44c8 <__udivmodhi4_ep>
    44c4:	a6 1b       	sub	r26, r22
    44c6:	b7 0b       	sbc	r27, r23

000044c8 <__udivmodhi4_ep>:
    44c8:	88 1f       	adc	r24, r24
    44ca:	99 1f       	adc	r25, r25
    44cc:	5a 95       	dec	r21
    44ce:	a9 f7       	brne	.-22     	; 0x44ba <__udivmodhi4_loop>
    44d0:	80 95       	com	r24
    44d2:	90 95       	com	r25
    44d4:	bc 01       	movw	r22, r24
    44d6:	cd 01       	movw	r24, r26
    44d8:	08 95       	ret

000044da <malloc>:
    44da:	cf 93       	push	r28
    44dc:	df 93       	push	r29
    44de:	bc 01       	movw	r22, r24
    44e0:	82 30       	cpi	r24, 0x02	; 2
    44e2:	91 05       	cpc	r25, r1
    44e4:	10 f4       	brcc	.+4      	; 0x44ea <malloc+0x10>
    44e6:	62 e0       	ldi	r22, 0x02	; 2
    44e8:	70 e0       	ldi	r23, 0x00	; 0
    44ea:	a0 91 fd 08 	lds	r26, 0x08FD
    44ee:	b0 91 fe 08 	lds	r27, 0x08FE
    44f2:	ed 01       	movw	r28, r26
    44f4:	e0 e0       	ldi	r30, 0x00	; 0
    44f6:	f0 e0       	ldi	r31, 0x00	; 0
    44f8:	40 e0       	ldi	r20, 0x00	; 0
    44fa:	50 e0       	ldi	r21, 0x00	; 0
    44fc:	21 c0       	rjmp	.+66     	; 0x4540 <malloc+0x66>
    44fe:	88 81       	ld	r24, Y
    4500:	99 81       	ldd	r25, Y+1	; 0x01
    4502:	86 17       	cp	r24, r22
    4504:	97 07       	cpc	r25, r23
    4506:	69 f4       	brne	.+26     	; 0x4522 <malloc+0x48>
    4508:	8a 81       	ldd	r24, Y+2	; 0x02
    450a:	9b 81       	ldd	r25, Y+3	; 0x03
    450c:	30 97       	sbiw	r30, 0x00	; 0
    450e:	19 f0       	breq	.+6      	; 0x4516 <malloc+0x3c>
    4510:	93 83       	std	Z+3, r25	; 0x03
    4512:	82 83       	std	Z+2, r24	; 0x02
    4514:	04 c0       	rjmp	.+8      	; 0x451e <malloc+0x44>
    4516:	90 93 fe 08 	sts	0x08FE, r25
    451a:	80 93 fd 08 	sts	0x08FD, r24
    451e:	fe 01       	movw	r30, r28
    4520:	34 c0       	rjmp	.+104    	; 0x458a <malloc+0xb0>
    4522:	68 17       	cp	r22, r24
    4524:	79 07       	cpc	r23, r25
    4526:	38 f4       	brcc	.+14     	; 0x4536 <malloc+0x5c>
    4528:	41 15       	cp	r20, r1
    452a:	51 05       	cpc	r21, r1
    452c:	19 f0       	breq	.+6      	; 0x4534 <malloc+0x5a>
    452e:	84 17       	cp	r24, r20
    4530:	95 07       	cpc	r25, r21
    4532:	08 f4       	brcc	.+2      	; 0x4536 <malloc+0x5c>
    4534:	ac 01       	movw	r20, r24
    4536:	fe 01       	movw	r30, r28
    4538:	8a 81       	ldd	r24, Y+2	; 0x02
    453a:	9b 81       	ldd	r25, Y+3	; 0x03
    453c:	9c 01       	movw	r18, r24
    453e:	e9 01       	movw	r28, r18
    4540:	20 97       	sbiw	r28, 0x00	; 0
    4542:	e9 f6       	brne	.-70     	; 0x44fe <malloc+0x24>
    4544:	41 15       	cp	r20, r1
    4546:	51 05       	cpc	r21, r1
    4548:	a9 f1       	breq	.+106    	; 0x45b4 <malloc+0xda>
    454a:	ca 01       	movw	r24, r20
    454c:	86 1b       	sub	r24, r22
    454e:	97 0b       	sbc	r25, r23
    4550:	04 97       	sbiw	r24, 0x04	; 4
    4552:	08 f4       	brcc	.+2      	; 0x4556 <malloc+0x7c>
    4554:	ba 01       	movw	r22, r20
    4556:	e0 e0       	ldi	r30, 0x00	; 0
    4558:	f0 e0       	ldi	r31, 0x00	; 0
    455a:	2a c0       	rjmp	.+84     	; 0x45b0 <malloc+0xd6>
    455c:	8d 91       	ld	r24, X+
    455e:	9c 91       	ld	r25, X
    4560:	11 97       	sbiw	r26, 0x01	; 1
    4562:	84 17       	cp	r24, r20
    4564:	95 07       	cpc	r25, r21
    4566:	f9 f4       	brne	.+62     	; 0x45a6 <malloc+0xcc>
    4568:	64 17       	cp	r22, r20
    456a:	75 07       	cpc	r23, r21
    456c:	81 f4       	brne	.+32     	; 0x458e <malloc+0xb4>
    456e:	12 96       	adiw	r26, 0x02	; 2
    4570:	8d 91       	ld	r24, X+
    4572:	9c 91       	ld	r25, X
    4574:	13 97       	sbiw	r26, 0x03	; 3
    4576:	30 97       	sbiw	r30, 0x00	; 0
    4578:	19 f0       	breq	.+6      	; 0x4580 <malloc+0xa6>
    457a:	93 83       	std	Z+3, r25	; 0x03
    457c:	82 83       	std	Z+2, r24	; 0x02
    457e:	04 c0       	rjmp	.+8      	; 0x4588 <malloc+0xae>
    4580:	90 93 fe 08 	sts	0x08FE, r25
    4584:	80 93 fd 08 	sts	0x08FD, r24
    4588:	fd 01       	movw	r30, r26
    458a:	32 96       	adiw	r30, 0x02	; 2
    458c:	4f c0       	rjmp	.+158    	; 0x462c <malloc+0x152>
    458e:	ca 01       	movw	r24, r20
    4590:	86 1b       	sub	r24, r22
    4592:	97 0b       	sbc	r25, r23
    4594:	fd 01       	movw	r30, r26
    4596:	e8 0f       	add	r30, r24
    4598:	f9 1f       	adc	r31, r25
    459a:	61 93       	st	Z+, r22
    459c:	71 93       	st	Z+, r23
    459e:	02 97       	sbiw	r24, 0x02	; 2
    45a0:	8d 93       	st	X+, r24
    45a2:	9c 93       	st	X, r25
    45a4:	43 c0       	rjmp	.+134    	; 0x462c <malloc+0x152>
    45a6:	fd 01       	movw	r30, r26
    45a8:	82 81       	ldd	r24, Z+2	; 0x02
    45aa:	93 81       	ldd	r25, Z+3	; 0x03
    45ac:	9c 01       	movw	r18, r24
    45ae:	d9 01       	movw	r26, r18
    45b0:	10 97       	sbiw	r26, 0x00	; 0
    45b2:	a1 f6       	brne	.-88     	; 0x455c <malloc+0x82>
    45b4:	80 91 fb 08 	lds	r24, 0x08FB
    45b8:	90 91 fc 08 	lds	r25, 0x08FC
    45bc:	89 2b       	or	r24, r25
    45be:	41 f4       	brne	.+16     	; 0x45d0 <malloc+0xf6>
    45c0:	80 91 b7 08 	lds	r24, 0x08B7
    45c4:	90 91 b8 08 	lds	r25, 0x08B8
    45c8:	90 93 fc 08 	sts	0x08FC, r25
    45cc:	80 93 fb 08 	sts	0x08FB, r24
    45d0:	40 91 b9 08 	lds	r20, 0x08B9
    45d4:	50 91 ba 08 	lds	r21, 0x08BA
    45d8:	41 15       	cp	r20, r1
    45da:	51 05       	cpc	r21, r1
    45dc:	41 f4       	brne	.+16     	; 0x45ee <malloc+0x114>
    45de:	4d b7       	in	r20, 0x3d	; 61
    45e0:	5e b7       	in	r21, 0x3e	; 62
    45e2:	80 91 b5 08 	lds	r24, 0x08B5
    45e6:	90 91 b6 08 	lds	r25, 0x08B6
    45ea:	48 1b       	sub	r20, r24
    45ec:	59 0b       	sbc	r21, r25
    45ee:	20 91 fb 08 	lds	r18, 0x08FB
    45f2:	30 91 fc 08 	lds	r19, 0x08FC
    45f6:	24 17       	cp	r18, r20
    45f8:	35 07       	cpc	r19, r21
    45fa:	b0 f4       	brcc	.+44     	; 0x4628 <malloc+0x14e>
    45fc:	ca 01       	movw	r24, r20
    45fe:	82 1b       	sub	r24, r18
    4600:	93 0b       	sbc	r25, r19
    4602:	86 17       	cp	r24, r22
    4604:	97 07       	cpc	r25, r23
    4606:	80 f0       	brcs	.+32     	; 0x4628 <malloc+0x14e>
    4608:	ab 01       	movw	r20, r22
    460a:	4e 5f       	subi	r20, 0xFE	; 254
    460c:	5f 4f       	sbci	r21, 0xFF	; 255
    460e:	84 17       	cp	r24, r20
    4610:	95 07       	cpc	r25, r21
    4612:	50 f0       	brcs	.+20     	; 0x4628 <malloc+0x14e>
    4614:	42 0f       	add	r20, r18
    4616:	53 1f       	adc	r21, r19
    4618:	50 93 fc 08 	sts	0x08FC, r21
    461c:	40 93 fb 08 	sts	0x08FB, r20
    4620:	f9 01       	movw	r30, r18
    4622:	61 93       	st	Z+, r22
    4624:	71 93       	st	Z+, r23
    4626:	02 c0       	rjmp	.+4      	; 0x462c <malloc+0x152>
    4628:	e0 e0       	ldi	r30, 0x00	; 0
    462a:	f0 e0       	ldi	r31, 0x00	; 0
    462c:	cf 01       	movw	r24, r30
    462e:	df 91       	pop	r29
    4630:	cf 91       	pop	r28
    4632:	08 95       	ret

00004634 <free>:
    4634:	cf 93       	push	r28
    4636:	df 93       	push	r29
    4638:	00 97       	sbiw	r24, 0x00	; 0
    463a:	09 f4       	brne	.+2      	; 0x463e <free+0xa>
    463c:	50 c0       	rjmp	.+160    	; 0x46de <free+0xaa>
    463e:	ec 01       	movw	r28, r24
    4640:	22 97       	sbiw	r28, 0x02	; 2
    4642:	1b 82       	std	Y+3, r1	; 0x03
    4644:	1a 82       	std	Y+2, r1	; 0x02
    4646:	a0 91 fd 08 	lds	r26, 0x08FD
    464a:	b0 91 fe 08 	lds	r27, 0x08FE
    464e:	10 97       	sbiw	r26, 0x00	; 0
    4650:	09 f1       	breq	.+66     	; 0x4694 <free+0x60>
    4652:	40 e0       	ldi	r20, 0x00	; 0
    4654:	50 e0       	ldi	r21, 0x00	; 0
    4656:	ac 17       	cp	r26, r28
    4658:	bd 07       	cpc	r27, r29
    465a:	08 f1       	brcs	.+66     	; 0x469e <free+0x6a>
    465c:	bb 83       	std	Y+3, r27	; 0x03
    465e:	aa 83       	std	Y+2, r26	; 0x02
    4660:	fe 01       	movw	r30, r28
    4662:	21 91       	ld	r18, Z+
    4664:	31 91       	ld	r19, Z+
    4666:	e2 0f       	add	r30, r18
    4668:	f3 1f       	adc	r31, r19
    466a:	ae 17       	cp	r26, r30
    466c:	bf 07       	cpc	r27, r31
    466e:	79 f4       	brne	.+30     	; 0x468e <free+0x5a>
    4670:	8d 91       	ld	r24, X+
    4672:	9c 91       	ld	r25, X
    4674:	11 97       	sbiw	r26, 0x01	; 1
    4676:	28 0f       	add	r18, r24
    4678:	39 1f       	adc	r19, r25
    467a:	2e 5f       	subi	r18, 0xFE	; 254
    467c:	3f 4f       	sbci	r19, 0xFF	; 255
    467e:	39 83       	std	Y+1, r19	; 0x01
    4680:	28 83       	st	Y, r18
    4682:	12 96       	adiw	r26, 0x02	; 2
    4684:	8d 91       	ld	r24, X+
    4686:	9c 91       	ld	r25, X
    4688:	13 97       	sbiw	r26, 0x03	; 3
    468a:	9b 83       	std	Y+3, r25	; 0x03
    468c:	8a 83       	std	Y+2, r24	; 0x02
    468e:	41 15       	cp	r20, r1
    4690:	51 05       	cpc	r21, r1
    4692:	71 f4       	brne	.+28     	; 0x46b0 <free+0x7c>
    4694:	d0 93 fe 08 	sts	0x08FE, r29
    4698:	c0 93 fd 08 	sts	0x08FD, r28
    469c:	20 c0       	rjmp	.+64     	; 0x46de <free+0xaa>
    469e:	12 96       	adiw	r26, 0x02	; 2
    46a0:	8d 91       	ld	r24, X+
    46a2:	9c 91       	ld	r25, X
    46a4:	13 97       	sbiw	r26, 0x03	; 3
    46a6:	ad 01       	movw	r20, r26
    46a8:	00 97       	sbiw	r24, 0x00	; 0
    46aa:	11 f0       	breq	.+4      	; 0x46b0 <free+0x7c>
    46ac:	dc 01       	movw	r26, r24
    46ae:	d3 cf       	rjmp	.-90     	; 0x4656 <free+0x22>
    46b0:	fa 01       	movw	r30, r20
    46b2:	d3 83       	std	Z+3, r29	; 0x03
    46b4:	c2 83       	std	Z+2, r28	; 0x02
    46b6:	21 91       	ld	r18, Z+
    46b8:	31 91       	ld	r19, Z+
    46ba:	e2 0f       	add	r30, r18
    46bc:	f3 1f       	adc	r31, r19
    46be:	ce 17       	cp	r28, r30
    46c0:	df 07       	cpc	r29, r31
    46c2:	69 f4       	brne	.+26     	; 0x46de <free+0xaa>
    46c4:	88 81       	ld	r24, Y
    46c6:	99 81       	ldd	r25, Y+1	; 0x01
    46c8:	28 0f       	add	r18, r24
    46ca:	39 1f       	adc	r19, r25
    46cc:	2e 5f       	subi	r18, 0xFE	; 254
    46ce:	3f 4f       	sbci	r19, 0xFF	; 255
    46d0:	fa 01       	movw	r30, r20
    46d2:	31 83       	std	Z+1, r19	; 0x01
    46d4:	20 83       	st	Z, r18
    46d6:	8a 81       	ldd	r24, Y+2	; 0x02
    46d8:	9b 81       	ldd	r25, Y+3	; 0x03
    46da:	93 83       	std	Z+3, r25	; 0x03
    46dc:	82 83       	std	Z+2, r24	; 0x02
    46de:	df 91       	pop	r29
    46e0:	cf 91       	pop	r28
    46e2:	08 95       	ret

000046e4 <itoa>:
    46e4:	fb 01       	movw	r30, r22
    46e6:	9f 01       	movw	r18, r30
    46e8:	e8 94       	clt
    46ea:	42 30       	cpi	r20, 0x02	; 2
    46ec:	c4 f0       	brlt	.+48     	; 0x471e <itoa+0x3a>
    46ee:	45 32       	cpi	r20, 0x25	; 37
    46f0:	b4 f4       	brge	.+44     	; 0x471e <itoa+0x3a>
    46f2:	4a 30       	cpi	r20, 0x0A	; 10
    46f4:	29 f4       	brne	.+10     	; 0x4700 <itoa+0x1c>
    46f6:	97 fb       	bst	r25, 7
    46f8:	1e f4       	brtc	.+6      	; 0x4700 <itoa+0x1c>
    46fa:	90 95       	com	r25
    46fc:	81 95       	neg	r24
    46fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4700:	64 2f       	mov	r22, r20
    4702:	77 27       	eor	r23, r23
    4704:	0e 94 59 22 	call	0x44b2	; 0x44b2 <__udivmodhi4>
    4708:	80 5d       	subi	r24, 0xD0	; 208
    470a:	8a 33       	cpi	r24, 0x3A	; 58
    470c:	0c f0       	brlt	.+2      	; 0x4710 <itoa+0x2c>
    470e:	89 5d       	subi	r24, 0xD9	; 217
    4710:	81 93       	st	Z+, r24
    4712:	cb 01       	movw	r24, r22
    4714:	00 97       	sbiw	r24, 0x00	; 0
    4716:	a1 f7       	brne	.-24     	; 0x4700 <itoa+0x1c>
    4718:	16 f4       	brtc	.+4      	; 0x471e <itoa+0x3a>
    471a:	5d e2       	ldi	r21, 0x2D	; 45
    471c:	51 93       	st	Z+, r21
    471e:	10 82       	st	Z, r1
    4720:	c9 01       	movw	r24, r18
    4722:	0c 94 02 24 	jmp	0x4804	; 0x4804 <strrev>

00004726 <fdevopen>:
    4726:	0f 93       	push	r16
    4728:	1f 93       	push	r17
    472a:	cf 93       	push	r28
    472c:	df 93       	push	r29
    472e:	8c 01       	movw	r16, r24
    4730:	eb 01       	movw	r28, r22
    4732:	00 97       	sbiw	r24, 0x00	; 0
    4734:	31 f4       	brne	.+12     	; 0x4742 <fdevopen+0x1c>
    4736:	61 15       	cp	r22, r1
    4738:	71 05       	cpc	r23, r1
    473a:	19 f4       	brne	.+6      	; 0x4742 <fdevopen+0x1c>
    473c:	20 e0       	ldi	r18, 0x00	; 0
    473e:	30 e0       	ldi	r19, 0x00	; 0
    4740:	38 c0       	rjmp	.+112    	; 0x47b2 <fdevopen+0x8c>
    4742:	81 e0       	ldi	r24, 0x01	; 1
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	6e e0       	ldi	r22, 0x0E	; 14
    4748:	70 e0       	ldi	r23, 0x00	; 0
    474a:	0e 94 df 23 	call	0x47be	; 0x47be <calloc>
    474e:	fc 01       	movw	r30, r24
    4750:	9c 01       	movw	r18, r24
    4752:	00 97       	sbiw	r24, 0x00	; 0
    4754:	71 f1       	breq	.+92     	; 0x47b2 <fdevopen+0x8c>
    4756:	80 e8       	ldi	r24, 0x80	; 128
    4758:	83 83       	std	Z+3, r24	; 0x03
    475a:	20 97       	sbiw	r28, 0x00	; 0
    475c:	71 f0       	breq	.+28     	; 0x477a <fdevopen+0x54>
    475e:	d3 87       	std	Z+11, r29	; 0x0b
    4760:	c2 87       	std	Z+10, r28	; 0x0a
    4762:	81 e8       	ldi	r24, 0x81	; 129
    4764:	83 83       	std	Z+3, r24	; 0x03
    4766:	80 91 ff 08 	lds	r24, 0x08FF
    476a:	90 91 00 09 	lds	r25, 0x0900
    476e:	89 2b       	or	r24, r25
    4770:	21 f4       	brne	.+8      	; 0x477a <fdevopen+0x54>
    4772:	f0 93 00 09 	sts	0x0900, r31
    4776:	e0 93 ff 08 	sts	0x08FF, r30
    477a:	01 15       	cp	r16, r1
    477c:	11 05       	cpc	r17, r1
    477e:	c9 f0       	breq	.+50     	; 0x47b2 <fdevopen+0x8c>
    4780:	11 87       	std	Z+9, r17	; 0x09
    4782:	00 87       	std	Z+8, r16	; 0x08
    4784:	83 81       	ldd	r24, Z+3	; 0x03
    4786:	82 60       	ori	r24, 0x02	; 2
    4788:	83 83       	std	Z+3, r24	; 0x03
    478a:	80 91 01 09 	lds	r24, 0x0901
    478e:	90 91 02 09 	lds	r25, 0x0902
    4792:	89 2b       	or	r24, r25
    4794:	71 f4       	brne	.+28     	; 0x47b2 <fdevopen+0x8c>
    4796:	f0 93 02 09 	sts	0x0902, r31
    479a:	e0 93 01 09 	sts	0x0901, r30
    479e:	80 91 03 09 	lds	r24, 0x0903
    47a2:	90 91 04 09 	lds	r25, 0x0904
    47a6:	89 2b       	or	r24, r25
    47a8:	21 f4       	brne	.+8      	; 0x47b2 <fdevopen+0x8c>
    47aa:	f0 93 04 09 	sts	0x0904, r31
    47ae:	e0 93 03 09 	sts	0x0903, r30
    47b2:	c9 01       	movw	r24, r18
    47b4:	df 91       	pop	r29
    47b6:	cf 91       	pop	r28
    47b8:	1f 91       	pop	r17
    47ba:	0f 91       	pop	r16
    47bc:	08 95       	ret

000047be <calloc>:
    47be:	0f 93       	push	r16
    47c0:	1f 93       	push	r17
    47c2:	cf 93       	push	r28
    47c4:	df 93       	push	r29
    47c6:	68 9f       	mul	r22, r24
    47c8:	80 01       	movw	r16, r0
    47ca:	69 9f       	mul	r22, r25
    47cc:	10 0d       	add	r17, r0
    47ce:	78 9f       	mul	r23, r24
    47d0:	10 0d       	add	r17, r0
    47d2:	11 24       	eor	r1, r1
    47d4:	c8 01       	movw	r24, r16
    47d6:	0e 94 6d 22 	call	0x44da	; 0x44da <malloc>
    47da:	ec 01       	movw	r28, r24
    47dc:	00 97       	sbiw	r24, 0x00	; 0
    47de:	29 f0       	breq	.+10     	; 0x47ea <calloc+0x2c>
    47e0:	60 e0       	ldi	r22, 0x00	; 0
    47e2:	70 e0       	ldi	r23, 0x00	; 0
    47e4:	a8 01       	movw	r20, r16
    47e6:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <memset>
    47ea:	ce 01       	movw	r24, r28
    47ec:	df 91       	pop	r29
    47ee:	cf 91       	pop	r28
    47f0:	1f 91       	pop	r17
    47f2:	0f 91       	pop	r16
    47f4:	08 95       	ret

000047f6 <memset>:
    47f6:	dc 01       	movw	r26, r24
    47f8:	01 c0       	rjmp	.+2      	; 0x47fc <memset+0x6>
    47fa:	6d 93       	st	X+, r22
    47fc:	41 50       	subi	r20, 0x01	; 1
    47fe:	50 40       	sbci	r21, 0x00	; 0
    4800:	e0 f7       	brcc	.-8      	; 0x47fa <memset+0x4>
    4802:	08 95       	ret

00004804 <strrev>:
    4804:	dc 01       	movw	r26, r24
    4806:	fc 01       	movw	r30, r24
    4808:	67 2f       	mov	r22, r23
    480a:	71 91       	ld	r23, Z+
    480c:	77 23       	and	r23, r23
    480e:	e1 f7       	brne	.-8      	; 0x4808 <strrev+0x4>
    4810:	32 97       	sbiw	r30, 0x02	; 2
    4812:	04 c0       	rjmp	.+8      	; 0x481c <strrev+0x18>
    4814:	7c 91       	ld	r23, X
    4816:	6d 93       	st	X+, r22
    4818:	70 83       	st	Z, r23
    481a:	62 91       	ld	r22, -Z
    481c:	ae 17       	cp	r26, r30
    481e:	bf 07       	cpc	r27, r31
    4820:	c8 f3       	brcs	.-14     	; 0x4814 <strrev+0x10>
    4822:	08 95       	ret

00004824 <_exit>:
    4824:	f8 94       	cli

00004826 <__stop_program>:
    4826:	ff cf       	rjmp	.-2      	; 0x4826 <__stop_program>
