
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c6  00800100  0000338e  00003422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000338e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  008003c6  008003c6  000036e8  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  000036e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002591  00000000  00000000  00005ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00008439  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000045e  00000000  00000000  00008479  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001717  00000000  00000000  000088d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000402  00000000  00000000  00009fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001c1d  00000000  00000000  0000a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c010  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e3f  00000000  00000000  0000c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000149e  00000000  00000000  0000d00f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  0000e4ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__vector_11>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      8c:	c3 09       	sbc	r28, r3
      8e:	d0 09       	sbc	r29, r0
      90:	e4 09       	sbc	r30, r4
      92:	f3 09       	sbc	r31, r3
      94:	03 0a       	sbc	r0, r19
      96:	12 0a       	sbc	r1, r18
      98:	22 0a       	sbc	r2, r18
      9a:	33 0a       	sbc	r3, r19
      9c:	43 0a       	sbc	r4, r19
      9e:	4d 0a       	sbc	r4, r29
      a0:	51 0a       	sbc	r5, r17
      a2:	5b 0a       	sbc	r5, r27
      a4:	61 0a       	sbc	r6, r17
      a6:	6b 0a       	sbc	r6, r27
      a8:	6f 0a       	sbc	r6, r31
      aa:	7a 0a       	sbc	r7, r26
      ac:	7e 0a       	sbc	r7, r30
      ae:	89 0a       	sbc	r8, r25
      b0:	8d 0a       	sbc	r8, r29
      b2:	98 0a       	sbc	r9, r24
      b4:	9c 0a       	sbc	r9, r28
      b6:	a7 0a       	sbc	r10, r23
      b8:	ab 0a       	sbc	r10, r27
      ba:	ba 0a       	sbc	r11, r26
      bc:	be 0a       	sbc	r11, r30
      be:	cf 0a       	sbc	r12, r31
      c0:	d3 0a       	sbc	r13, r19
      c2:	de 0a       	sbc	r13, r30
      c4:	e2 0a       	sbc	r14, r18
      c6:	ed 0a       	sbc	r14, r29
      c8:	f1 0a       	sbc	r15, r17
      ca:	fd 0a       	sbc	r15, r29
      cc:	03 0b       	sbc	r16, r19
      ce:	13 0b       	sbc	r17, r19
      d0:	1d 0b       	sbc	r17, r29
      d2:	33 0b       	sbc	r19, r19
      d4:	3d 0b       	sbc	r19, r29
      d6:	53 0b       	sbc	r21, r19
      d8:	5d 0b       	sbc	r21, r29
      da:	73 0b       	sbc	r23, r19
      dc:	7d 0b       	sbc	r23, r29
      de:	93 0b       	sbc	r25, r19
      e0:	9d 0b       	sbc	r25, r29
      e2:	ab 0b       	sbc	r26, r27

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d0 e4       	ldi	r29, 0x40	; 64
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	13 e0       	ldi	r17, 0x03	; 3
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b1 e0       	ldi	r27, 0x01	; 1
      f6:	ee e8       	ldi	r30, 0x8E	; 142
      f8:	f3 e3       	ldi	r31, 0x33	; 51
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a6 3c       	cpi	r26, 0xC6	; 198
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	13 e0       	ldi	r17, 0x03	; 3
     10c:	a6 ec       	ldi	r26, 0xC6	; 198
     10e:	b3 e0       	ldi	r27, 0x03	; 3
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	ae 3e       	cpi	r26, 0xEE	; 238
     116:	b1 07       	cpc	r27, r17
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 b2 06 	call	0xd64	; 0xd64 <main>
     11e:	0c 94 c5 19 	jmp	0x338a	; 0x338a <_exit>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <_ZN16OrangutanDigital11isInputHighEh>:


	// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
	// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
	// the pin.
	inline static unsigned char isInputHigh(unsigned char pin)
     126:	48 2f       	mov	r20, r24
		io->pinRegister = 0;
		io->portRegister = 0;
		io->ddrRegister = 0;
		io->bitmask = 0;

		if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     128:	88 30       	cpi	r24, 0x08	; 8
     12a:	58 f4       	brcc	.+22     	; 0x142 <_ZN16OrangutanDigital11isInputHighEh+0x1c>
		{
			io->pinRegister = (unsigned char*)&PIND;
			io->portRegister = (unsigned char*)&PORTD;
			io->ddrRegister = (unsigned char*)&DDRD;
			io->bitmask = 1 << pin;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	02 c0       	rjmp	.+4      	; 0x136 <_ZN16OrangutanDigital11isInputHighEh+0x10>
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	4a 95       	dec	r20
     138:	e2 f7       	brpl	.-8      	; 0x132 <_ZN16OrangutanDigital11isInputHighEh+0xc>
     13a:	98 2f       	mov	r25, r24
     13c:	e9 e2       	ldi	r30, 0x29	; 41
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	36 c0       	rjmp	.+108    	; 0x1ae <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)

		else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     142:	80 31       	cpi	r24, 0x10	; 16
     144:	78 f4       	brcc	.+30     	; 0x164 <_ZN16OrangutanDigital11isInputHighEh+0x3e>
		{
			io->pinRegister = (unsigned char*)&PINB;
			io->portRegister = (unsigned char*)&PORTB;
			io->ddrRegister = (unsigned char*)&DDRB;
			io->bitmask = 1 << (pin - 8);
     146:	28 2f       	mov	r18, r24
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	28 50       	subi	r18, 0x08	; 8
     14c:	30 40       	sbci	r19, 0x00	; 0
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	02 c0       	rjmp	.+4      	; 0x158 <_ZN16OrangutanDigital11isInputHighEh+0x32>
     154:	88 0f       	add	r24, r24
     156:	99 1f       	adc	r25, r25
     158:	2a 95       	dec	r18
     15a:	e2 f7       	brpl	.-8      	; 0x154 <_ZN16OrangutanDigital11isInputHighEh+0x2e>
     15c:	98 2f       	mov	r25, r24
     15e:	e3 e2       	ldi	r30, 0x23	; 35
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	25 c0       	rjmp	.+74     	; 0x1ae <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     164:	88 31       	cpi	r24, 0x18	; 24
     166:	78 f4       	brcc	.+30     	; 0x186 <_ZN16OrangutanDigital11isInputHighEh+0x60>
		{
			io->pinRegister = (unsigned char*)&PINC;
			io->portRegister = (unsigned char*)&PORTC;
			io->ddrRegister = (unsigned char*)&DDRC;
			io->bitmask = 1 << (pin - 16);
     168:	28 2f       	mov	r18, r24
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	20 51       	subi	r18, 0x10	; 16
     16e:	30 40       	sbci	r19, 0x00	; 0
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	02 c0       	rjmp	.+4      	; 0x17a <_ZN16OrangutanDigital11isInputHighEh+0x54>
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	2a 95       	dec	r18
     17c:	e2 f7       	brpl	.-8      	; 0x176 <_ZN16OrangutanDigital11isInputHighEh+0x50>
     17e:	98 2f       	mov	r25, r24
     180:	e6 e2       	ldi	r30, 0x26	; 38
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	14 c0       	rjmp	.+40     	; 0x1ae <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     186:	80 32       	cpi	r24, 0x20	; 32
     188:	20 f0       	brcs	.+8      	; 0x192 <_ZN16OrangutanDigital11isInputHighEh+0x6c>
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	e0 e0       	ldi	r30, 0x00	; 0
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	0e c0       	rjmp	.+28     	; 0x1ae <_ZN16OrangutanDigital11isInputHighEh+0x88>
		{
			io->pinRegister = (unsigned char*)&PINA;
			io->portRegister = (unsigned char*)&PORTA;
			io->ddrRegister = (unsigned char*)&DDRA;
			io->bitmask = 1 << (31 - pin);
     192:	2f e1       	ldi	r18, 0x1F	; 31
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	28 1b       	sub	r18, r24
     198:	31 09       	sbc	r19, r1
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <_ZN16OrangutanDigital11isInputHighEh+0x7e>
     1a0:	88 0f       	add	r24, r24
     1a2:	99 1f       	adc	r25, r25
     1a4:	2a 95       	dec	r18
     1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <_ZN16OrangutanDigital11isInputHighEh+0x7a>
     1a8:	98 2f       	mov	r25, r24
     1aa:	e0 e2       	ldi	r30, 0x20	; 32
     1ac:	f0 e0       	ldi	r31, 0x00	; 0

	// low-level method for reading the value of the PIN register for an pin or set of pins
	// described by an IOStruct pointer.
	inline static unsigned char getInputValue(struct IOStruct* ioPin)
	{
		return *(ioPin->pinRegister) & ioPin->bitmask;
     1ae:	80 81       	ld	r24, Z
	inline static unsigned char isInputHigh(unsigned char pin)
	{
		struct IOStruct registers;
		getIORegisters(&registers, pin);
		return getInputValue(&registers);
	}
     1b0:	89 23       	and	r24, r25
     1b2:	08 95       	ret

000001b4 <__cxa_guard_acquire>:

extern "C" int __cxa_guard_acquire(__guard *); 
extern "C" void __cxa_guard_release (__guard *); 
extern "C" void __cxa_guard_abort (__guard *); 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);}; 
     1b4:	fc 01       	movw	r30, r24
     1b6:	20 e0       	ldi	r18, 0x00	; 0
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	88 23       	and	r24, r24
     1be:	11 f4       	brne	.+4      	; 0x1c4 <__cxa_guard_acquire+0x10>
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	c9 01       	movw	r24, r18
     1c6:	08 95       	ret

000001c8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;}; 
     1c8:	fc 01       	movw	r30, r24
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	80 83       	st	Z, r24
     1ce:	08 95       	ret

000001d0 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
     1d0:	08 95       	ret

000001d2 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void); 
void __cxa_pure_virtual(void) {}; 
     1d2:	08 95       	ret

000001d4 <_Z13brush1_actioniiPiS_S_S_S_>:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
	}
}

void brush1_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	f9 01       	movw	r30, r18
     1da:	d8 01       	movw	r26, r16
	switch(state){
     1dc:	89 30       	cpi	r24, 0x09	; 9
     1de:	91 05       	cpc	r25, r1
     1e0:	31 f1       	breq	.+76     	; 0x22e <_Z13brush1_actioniiPiS_S_S_S_+0x5a>
     1e2:	8a 30       	cpi	r24, 0x0A	; 10
     1e4:	91 05       	cpc	r25, r1
     1e6:	5c f4       	brge	.+22     	; 0x1fe <_Z13brush1_actioniiPiS_S_S_S_+0x2a>
     1e8:	87 30       	cpi	r24, 0x07	; 7
     1ea:	91 05       	cpc	r25, r1
     1ec:	a9 f0       	breq	.+42     	; 0x218 <_Z13brush1_actioniiPiS_S_S_S_+0x44>
     1ee:	88 30       	cpi	r24, 0x08	; 8
     1f0:	91 05       	cpc	r25, r1
     1f2:	0c f0       	brlt	.+2      	; 0x1f6 <_Z13brush1_actioniiPiS_S_S_S_+0x22>
     1f4:	3f c0       	rjmp	.+126    	; 0x274 <_Z13brush1_actioniiPiS_S_S_S_+0xa0>
     1f6:	06 97       	sbiw	r24, 0x06	; 6
     1f8:	09 f0       	breq	.+2      	; 0x1fc <_Z13brush1_actioniiPiS_S_S_S_+0x28>
     1fa:	52 c0       	rjmp	.+164    	; 0x2a0 <_Z13brush1_actioniiPiS_S_S_S_+0xcc>
     1fc:	2c c0       	rjmp	.+88     	; 0x256 <_Z13brush1_actioniiPiS_S_S_S_+0x82>
     1fe:	8b 30       	cpi	r24, 0x0B	; 11
     200:	91 05       	cpc	r25, r1
     202:	49 f1       	breq	.+82     	; 0x256 <_Z13brush1_actioniiPiS_S_S_S_+0x82>
     204:	8b 30       	cpi	r24, 0x0B	; 11
     206:	91 05       	cpc	r25, r1
     208:	ec f0       	brlt	.+58     	; 0x244 <_Z13brush1_actioniiPiS_S_S_S_+0x70>
     20a:	8c 30       	cpi	r24, 0x0C	; 12
     20c:	91 05       	cpc	r25, r1
     20e:	59 f1       	breq	.+86     	; 0x266 <_Z13brush1_actioniiPiS_S_S_S_+0x92>
     210:	0d 97       	sbiw	r24, 0x0d	; 13
     212:	09 f0       	breq	.+2      	; 0x216 <_Z13brush1_actioniiPiS_S_S_S_+0x42>
     214:	45 c0       	rjmp	.+138    	; 0x2a0 <_Z13brush1_actioniiPiS_S_S_S_+0xcc>
     216:	39 c0       	rjmp	.+114    	; 0x28a <_Z13brush1_actioniiPiS_S_S_S_+0xb6>
		case MOVEC1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B1SET:
			*pfixtureMotor = 0;
     218:	11 82       	std	Z+1, r1	; 0x01
     21a:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     21c:	80 91 c7 03 	lds	r24, 0x03C7
     220:	81 60       	ori	r24, 0x01	; 1
     222:	80 93 c7 03 	sts	0x03C7, r24
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
     226:	80 91 c6 03 	lds	r24, 0x03C6
     22a:	8f 77       	andi	r24, 0x7F	; 127
     22c:	37 c0       	rjmp	.+110    	; 0x29c <_Z13brush1_actioniiPiS_S_S_S_+0xc8>
			*pbrush1Motor = 1;
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
			break;
		case CLEAN1_1:
			*pbrush1Motor = 1;
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	8d 93       	st	X+, r24
     234:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     236:	91 83       	std	Z+1, r25	; 0x01
     238:	80 83       	st	Z, r24
     23a:	80 91 c6 03 	lds	r24, 0x03C6
     23e:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     240:	8f 7e       	andi	r24, 0xEF	; 239
     242:	2c c0       	rjmp	.+88     	; 0x29c <_Z13brush1_actioniiPiS_S_S_S_+0xc8>
			break;
		case B1STOP1:
			*pfixtureMotor = 0;
     244:	11 82       	std	Z+1, r1	; 0x01
     246:	10 82       	st	Z, r1
			*pbrush1Motor = 0;
     248:	1d 92       	st	X+, r1
     24a:	1c 92       	st	X, r1
			u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     24c:	80 91 c8 03 	lds	r24, 0x03C8
     250:	8f 7b       	andi	r24, 0xBF	; 191
			u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     252:	80 62       	ori	r24, 0x20	; 32
     254:	17 c0       	rjmp	.+46     	; 0x284 <_Z13brush1_actioniiPiS_S_S_S_+0xb0>
			break;
		case CLEAN1_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     256:	80 91 c6 03 	lds	r24, 0x03C6
     25a:	80 61       	ori	r24, 0x10	; 16
     25c:	80 93 c6 03 	sts	0x03C6, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	16 c0       	rjmp	.+44     	; 0x292 <_Z13brush1_actioniiPiS_S_S_S_+0xbe>
			break;
		case B1START2:
			*pfixtureMotor = 0;
     266:	11 82       	std	Z+1, r1	; 0x01
     268:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
     26a:	80 91 c6 03 	lds	r24, 0x03C6
     26e:	8f 77       	andi	r24, 0x7F	; 127
     270:	80 93 c6 03 	sts	0x03C6, r24
			*pbrush1Motor = 1;
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	8d 93       	st	X+, r24
     27a:	9c 93       	st	X, r25
			u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     27c:	80 91 c8 03 	lds	r24, 0x03C8
     280:	80 64       	ori	r24, 0x40	; 64
			u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     282:	8f 7d       	andi	r24, 0xDF	; 223
     284:	80 93 c8 03 	sts	0x03C8, r24
     288:	0b c0       	rjmp	.+22     	; 0x2a0 <_Z13brush1_actioniiPiS_S_S_S_+0xcc>
			break;
		case CLEAN1_3:
			*pbrush1Motor = 1;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     292:	91 83       	std	Z+1, r25	; 0x01
     294:	80 83       	st	Z, r24
     296:	80 91 c6 03 	lds	r24, 0x03C6
     29a:	80 62       	ori	r24, 0x20	; 32
     29c:	80 93 c6 03 	sts	0x03C6, r24
			break;
	}
}
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	08 95       	ret

000002a6 <_Z13brush2_actioniiPiS_S_S_S_>:

void brush2_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	f9 01       	movw	r30, r18
     2ac:	d7 01       	movw	r26, r14
	switch(state){
     2ae:	83 31       	cpi	r24, 0x13	; 19
     2b0:	91 05       	cpc	r25, r1
     2b2:	b9 f1       	breq	.+110    	; 0x322 <_Z13brush2_actioniiPiS_S_S_S_+0x7c>
     2b4:	84 31       	cpi	r24, 0x14	; 20
     2b6:	91 05       	cpc	r25, r1
     2b8:	9c f4       	brge	.+38     	; 0x2e0 <_Z13brush2_actioniiPiS_S_S_S_+0x3a>
     2ba:	80 31       	cpi	r24, 0x10	; 16
     2bc:	91 05       	cpc	r25, r1
     2be:	09 f4       	brne	.+2      	; 0x2c2 <_Z13brush2_actioniiPiS_S_S_S_+0x1c>
     2c0:	3d c0       	rjmp	.+122    	; 0x33c <_Z13brush2_actioniiPiS_S_S_S_+0x96>
     2c2:	81 31       	cpi	r24, 0x11	; 17
     2c4:	91 05       	cpc	r25, r1
     2c6:	24 f4       	brge	.+8      	; 0x2d0 <_Z13brush2_actioniiPiS_S_S_S_+0x2a>
     2c8:	0f 97       	sbiw	r24, 0x0f	; 15
     2ca:	09 f0       	breq	.+2      	; 0x2ce <_Z13brush2_actioniiPiS_S_S_S_+0x28>
     2cc:	68 c0       	rjmp	.+208    	; 0x39e <_Z13brush2_actioniiPiS_S_S_S_+0xf8>
     2ce:	15 c0       	rjmp	.+42     	; 0x2fa <_Z13brush2_actioniiPiS_S_S_S_+0x54>
     2d0:	81 31       	cpi	r24, 0x11	; 17
     2d2:	91 05       	cpc	r25, r1
     2d4:	09 f4       	brne	.+2      	; 0x2d8 <_Z13brush2_actioniiPiS_S_S_S_+0x32>
     2d6:	41 c0       	rjmp	.+130    	; 0x35a <_Z13brush2_actioniiPiS_S_S_S_+0xb4>
     2d8:	42 97       	sbiw	r24, 0x12	; 18
     2da:	09 f0       	breq	.+2      	; 0x2de <_Z13brush2_actioniiPiS_S_S_S_+0x38>
     2dc:	60 c0       	rjmp	.+192    	; 0x39e <_Z13brush2_actioniiPiS_S_S_S_+0xf8>
     2de:	14 c0       	rjmp	.+40     	; 0x308 <_Z13brush2_actioniiPiS_S_S_S_+0x62>
     2e0:	85 31       	cpi	r24, 0x15	; 21
     2e2:	91 05       	cpc	r25, r1
     2e4:	d1 f1       	breq	.+116    	; 0x35a <_Z13brush2_actioniiPiS_S_S_S_+0xb4>
     2e6:	85 31       	cpi	r24, 0x15	; 21
     2e8:	91 05       	cpc	r25, r1
     2ea:	0c f1       	brlt	.+66     	; 0x32e <_Z13brush2_actioniiPiS_S_S_S_+0x88>
     2ec:	86 31       	cpi	r24, 0x16	; 22
     2ee:	91 05       	cpc	r25, r1
     2f0:	c9 f1       	breq	.+114    	; 0x364 <_Z13brush2_actioniiPiS_S_S_S_+0xbe>
     2f2:	47 97       	sbiw	r24, 0x17	; 23
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <_Z13brush2_actioniiPiS_S_S_S_+0x52>
     2f6:	53 c0       	rjmp	.+166    	; 0x39e <_Z13brush2_actioniiPiS_S_S_S_+0xf8>
     2f8:	49 c0       	rjmp	.+146    	; 0x38c <_Z13brush2_actioniiPiS_S_S_S_+0xe6>
		case B2SET:
			*pfixtureMotor = 0;
     2fa:	11 82       	std	Z+1, r1	; 0x01
     2fc:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     2fe:	80 91 c7 03 	lds	r24, 0x03C7
     302:	88 60       	ori	r24, 0x08	; 8
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     304:	8b 7f       	andi	r24, 0xFB	; 251
     306:	3f c0       	rjmp	.+126    	; 0x386 <_Z13brush2_actioniiPiS_S_S_S_+0xe0>
		case CLEAN2_1:
			*pbrush2Motor = 1;
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP1:
			*pfixtureMotor = 0;
     308:	11 82       	std	Z+1, r1	; 0x01
     30a:	10 82       	st	Z, r1
			*pbrush2Motor = 0;
     30c:	1d 92       	st	X+, r1
     30e:	1c 92       	st	X, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     310:	80 91 c9 03 	lds	r24, 0x03C9
     314:	8e 7f       	andi	r24, 0xFE	; 254
     316:	80 93 c9 03 	sts	0x03C9, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     31a:	80 91 c8 03 	lds	r24, 0x03C8
     31e:	80 68       	ori	r24, 0x80	; 128
     320:	19 c0       	rjmp	.+50     	; 0x354 <_Z13brush2_actioniiPiS_S_S_S_+0xae>
			break;
		case CLEAN2_2:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
     322:	80 91 c6 03 	lds	r24, 0x03C6
     326:	8f 7e       	andi	r24, 0xEF	; 239
     328:	80 93 c6 03 	sts	0x03C6, r24
     32c:	2f c0       	rjmp	.+94     	; 0x38c <_Z13brush2_actioniiPiS_S_S_S_+0xe6>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2START2:
			*pfixtureMotor = 0;
     32e:	11 82       	std	Z+1, r1	; 0x01
     330:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
     332:	80 91 c7 03 	lds	r24, 0x03C7
     336:	8b 7f       	andi	r24, 0xFB	; 251
     338:	80 93 c7 03 	sts	0x03C7, r24
			*pbrush2Motor = 1;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	8d 93       	st	X+, r24
     342:	9c 93       	st	X, r25
			u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     344:	80 91 c9 03 	lds	r24, 0x03C9
     348:	81 60       	ori	r24, 0x01	; 1
     34a:	80 93 c9 03 	sts	0x03C9, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     34e:	80 91 c8 03 	lds	r24, 0x03C8
     352:	8f 77       	andi	r24, 0x7F	; 127
     354:	80 93 c8 03 	sts	0x03C8, r24
     358:	22 c0       	rjmp	.+68     	; 0x39e <_Z13brush2_actioniiPiS_S_S_S_+0xf8>
			break;
		case CLEAN2_3:
			*pbrush2Motor = 1;
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	8d 93       	st	X+, r24
     360:	9c 93       	st	X, r25
     362:	16 c0       	rjmp	.+44     	; 0x390 <_Z13brush2_actioniiPiS_S_S_S_+0xea>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case B2STOP2:
			*pbrush2Motor = 0;
     364:	1d 92       	st	X+, r1
     366:	1c 92       	st	X, r1
			*pfixtureMotor = 0;
     368:	11 82       	std	Z+1, r1	; 0x01
     36a:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     36c:	80 91 c9 03 	lds	r24, 0x03C9
     370:	8e 7f       	andi	r24, 0xFE	; 254
     372:	80 93 c9 03 	sts	0x03C9, r24
			u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     376:	80 91 c8 03 	lds	r24, 0x03C8
     37a:	80 68       	ori	r24, 0x80	; 128
     37c:	80 93 c8 03 	sts	0x03C8, r24
			u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     380:	80 91 c7 03 	lds	r24, 0x03C7
     384:	87 7f       	andi	r24, 0xF7	; 247
     386:	80 93 c7 03 	sts	0x03C7, r24
     38a:	09 c0       	rjmp	.+18     	; 0x39e <_Z13brush2_actioniiPiS_S_S_S_+0xf8>
			break;
		//*************************************************
		case MOVED1:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	91 83       	std	Z+1, r25	; 0x01
     392:	80 83       	st	Z, r24
     394:	80 91 c6 03 	lds	r24, 0x03C6
     398:	80 62       	ori	r24, 0x20	; 32
     39a:	80 93 c6 03 	sts	0x03C6, r24
			break;
	}
}
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	08 95       	ret

000003a4 <_Z10dry_actioniiPiS_S_S_S_>:

void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
     3a4:	cf 92       	push	r12
     3a6:	df 92       	push	r13
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	ea 01       	movw	r28, r20
     3ae:	f9 01       	movw	r30, r18
     3b0:	d6 01       	movw	r26, r12
	switch(state){
     3b2:	8d 31       	cpi	r24, 0x1D	; 29
     3b4:	91 05       	cpc	r25, r1
     3b6:	09 f4       	brne	.+2      	; 0x3ba <_Z10dry_actioniiPiS_S_S_S_+0x16>
     3b8:	57 c0       	rjmp	.+174    	; 0x468 <_Z10dry_actioniiPiS_S_S_S_+0xc4>
     3ba:	8e 31       	cpi	r24, 0x1E	; 30
     3bc:	91 05       	cpc	r25, r1
     3be:	a4 f4       	brge	.+40     	; 0x3e8 <_Z10dry_actioniiPiS_S_S_S_+0x44>
     3c0:	8a 31       	cpi	r24, 0x1A	; 26
     3c2:	91 05       	cpc	r25, r1
     3c4:	69 f1       	breq	.+90     	; 0x420 <_Z10dry_actioniiPiS_S_S_S_+0x7c>
     3c6:	8b 31       	cpi	r24, 0x1B	; 27
     3c8:	91 05       	cpc	r25, r1
     3ca:	3c f4       	brge	.+14     	; 0x3da <_Z10dry_actioniiPiS_S_S_S_+0x36>
     3cc:	88 31       	cpi	r24, 0x18	; 24
     3ce:	91 05       	cpc	r25, r1
     3d0:	09 f1       	breq	.+66     	; 0x414 <_Z10dry_actioniiPiS_S_S_S_+0x70>
     3d2:	49 97       	sbiw	r24, 0x19	; 25
     3d4:	09 f0       	breq	.+2      	; 0x3d8 <_Z10dry_actioniiPiS_S_S_S_+0x34>
     3d6:	90 c0       	rjmp	.+288    	; 0x4f8 <_Z10dry_actioniiPiS_S_S_S_+0x154>
     3d8:	68 c0       	rjmp	.+208    	; 0x4aa <_Z10dry_actioniiPiS_S_S_S_+0x106>
     3da:	8b 31       	cpi	r24, 0x1B	; 27
     3dc:	91 05       	cpc	r25, r1
     3de:	79 f1       	breq	.+94     	; 0x43e <_Z10dry_actioniiPiS_S_S_S_+0x9a>
     3e0:	4c 97       	sbiw	r24, 0x1c	; 28
     3e2:	09 f0       	breq	.+2      	; 0x3e6 <_Z10dry_actioniiPiS_S_S_S_+0x42>
     3e4:	89 c0       	rjmp	.+274    	; 0x4f8 <_Z10dry_actioniiPiS_S_S_S_+0x154>
     3e6:	38 c0       	rjmp	.+112    	; 0x458 <_Z10dry_actioniiPiS_S_S_S_+0xb4>
     3e8:	80 32       	cpi	r24, 0x20	; 32
     3ea:	91 05       	cpc	r25, r1
     3ec:	09 f4       	brne	.+2      	; 0x3f0 <_Z10dry_actioniiPiS_S_S_S_+0x4c>
     3ee:	5d c0       	rjmp	.+186    	; 0x4aa <_Z10dry_actioniiPiS_S_S_S_+0x106>
     3f0:	81 32       	cpi	r24, 0x21	; 33
     3f2:	91 05       	cpc	r25, r1
     3f4:	3c f4       	brge	.+14     	; 0x404 <_Z10dry_actioniiPiS_S_S_S_+0x60>
     3f6:	8e 31       	cpi	r24, 0x1E	; 30
     3f8:	91 05       	cpc	r25, r1
     3fa:	d9 f1       	breq	.+118    	; 0x472 <_Z10dry_actioniiPiS_S_S_S_+0xce>
     3fc:	4f 97       	sbiw	r24, 0x1f	; 31
     3fe:	09 f0       	breq	.+2      	; 0x402 <_Z10dry_actioniiPiS_S_S_S_+0x5e>
     400:	7b c0       	rjmp	.+246    	; 0x4f8 <_Z10dry_actioniiPiS_S_S_S_+0x154>
     402:	4c c0       	rjmp	.+152    	; 0x49c <_Z10dry_actioniiPiS_S_S_S_+0xf8>
     404:	81 32       	cpi	r24, 0x21	; 33
     406:	91 05       	cpc	r25, r1
     408:	09 f4       	brne	.+2      	; 0x40c <_Z10dry_actioniiPiS_S_S_S_+0x68>
     40a:	5e c0       	rjmp	.+188    	; 0x4c8 <_Z10dry_actioniiPiS_S_S_S_+0x124>
     40c:	82 97       	sbiw	r24, 0x22	; 34
     40e:	09 f0       	breq	.+2      	; 0x412 <_Z10dry_actioniiPiS_S_S_S_+0x6e>
     410:	73 c0       	rjmp	.+230    	; 0x4f8 <_Z10dry_actioniiPiS_S_S_S_+0x154>
     412:	69 c0       	rjmp	.+210    	; 0x4e6 <_Z10dry_actioniiPiS_S_S_S_+0x142>
		case D1START:
			*pfixtureMotor = 0;
     414:	11 82       	std	Z+1, r1	; 0x01
     416:	10 82       	st	Z, r1
			u_outputByte1.bits_in_outputByte1.airKnife = 0;
     418:	80 91 c9 03 	lds	r24, 0x03C9
     41c:	87 7f       	andi	r24, 0xF7	; 247
     41e:	0c c0       	rjmp	.+24     	; 0x438 <_Z10dry_actioniiPiS_S_S_S_+0x94>
		case DRY1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case D1STOP:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	91 83       	std	Z+1, r25	; 0x01
     426:	80 83       	st	Z, r24
     428:	80 91 c6 03 	lds	r24, 0x03C6
     42c:	80 62       	ori	r24, 0x20	; 32
     42e:	80 93 c6 03 	sts	0x03C6, r24
			u_outputByte1.bits_in_outputByte1.airKnife = 1;
     432:	80 91 c9 03 	lds	r24, 0x03C9
     436:	88 60       	ori	r24, 0x08	; 8
     438:	80 93 c9 03 	sts	0x03C9, r24
     43c:	5d c0       	rjmp	.+186    	; 0x4f8 <_Z10dry_actioniiPiS_S_S_S_+0x154>
			break;
		case D2START:
			*pfixtureMotor = 0;
     43e:	11 82       	std	Z+1, r1	; 0x01
     440:	10 82       	st	Z, r1
			u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
     442:	80 91 c7 03 	lds	r24, 0x03C7
     446:	80 64       	ori	r24, 0x40	; 64
			u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     448:	8f 7d       	andi	r24, 0xDF	; 223
     44a:	80 93 c7 03 	sts	0x03C7, r24
			*ppaperTowelMotor = 1;
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	8d 93       	st	X+, r24
     454:	9c 93       	st	X, r25
     456:	50 c0       	rjmp	.+160    	; 0x4f8 <_Z10dry_actioniiPiS_S_S_S_+0x154>
			break;
		case D2RAISE:
			*ppaperTowelMotor = 1;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	8d 93       	st	X+, r24
     45e:	9c 93       	st	X, r25
			u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     460:	80 91 c9 03 	lds	r24, 0x03C9
     464:	8d 7f       	andi	r24, 0xFD	; 253
     466:	e8 cf       	rjmp	.-48     	; 0x438 <_Z10dry_actioniiPiS_S_S_S_+0x94>
			break;
		case DRY2:
			*ppaperTowelMotor = 1;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	8d 93       	st	X+, r24
     46e:	9c 93       	st	X, r25
     470:	23 c0       	rjmp	.+70     	; 0x4b8 <_Z10dry_actioniiPiS_S_S_S_+0x114>
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case D2STOP:
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	91 83       	std	Z+1, r25	; 0x01
     478:	80 83       	st	Z, r24
     47a:	80 91 c6 03 	lds	r24, 0x03C6
     47e:	80 62       	ori	r24, 0x20	; 32
     480:	80 93 c6 03 	sts	0x03C6, r24
			*ppaperTowelMotor = 0;
     484:	1d 92       	st	X+, r1
     486:	1c 92       	st	X, r1
				u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
     488:	80 91 c7 03 	lds	r24, 0x03C7
     48c:	8f 7b       	andi	r24, 0xBF	; 191
     48e:	80 93 c7 03 	sts	0x03C7, r24
			u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     492:	80 91 c9 03 	lds	r24, 0x03C9
     496:	82 60       	ori	r24, 0x02	; 2
			u_outputByte1.bits_in_outputByte1.ptLower = 0;
     498:	8b 7f       	andi	r24, 0xFB	; 251
     49a:	ce cf       	rjmp	.-100    	; 0x438 <_Z10dry_actioniiPiS_S_S_S_+0x94>
			break;
		case RAISEL2:
			*pfixtureMotor = 0;
     49c:	11 82       	std	Z+1, r1	; 0x01
     49e:	10 82       	st	Z, r1
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     4a0:	80 91 c8 03 	lds	r24, 0x03C8
     4a4:	87 7f       	andi	r24, 0xF7	; 247
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     4a6:	80 61       	ori	r24, 0x10	; 16
     4a8:	1b c0       	rjmp	.+54     	; 0x4e0 <_Z10dry_actioniiPiS_S_S_S_+0x13c>
			break;
		case FIXH:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     4aa:	80 91 c6 03 	lds	r24, 0x03C6
     4ae:	8f 7e       	andi	r24, 0xEF	; 239
     4b0:	80 93 c6 03 	sts	0x03C6, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	91 83       	std	Z+1, r25	; 0x01
     4ba:	80 83       	st	Z, r24
     4bc:	80 91 c6 03 	lds	r24, 0x03C6
     4c0:	80 62       	ori	r24, 0x20	; 32
     4c2:	80 93 c6 03 	sts	0x03C6, r24
     4c6:	18 c0       	rjmp	.+48     	; 0x4f8 <_Z10dry_actioniiPiS_S_S_S_+0x154>
			break;
		case LOWERL3:
			*pfixtureMotor = 0;
     4c8:	11 82       	std	Z+1, r1	; 0x01
     4ca:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     4cc:	80 91 c6 03 	lds	r24, 0x03C6
     4d0:	8f 7d       	andi	r24, 0xDF	; 223
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     4d2:	84 60       	ori	r24, 0x04	; 4
     4d4:	80 93 c6 03 	sts	0x03C6, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     4d8:	80 91 c8 03 	lds	r24, 0x03C8
     4dc:	88 60       	ori	r24, 0x08	; 8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     4de:	8f 7e       	andi	r24, 0xEF	; 239
     4e0:	80 93 c8 03 	sts	0x03C8, r24
     4e4:	09 c0       	rjmp	.+18     	; 0x4f8 <_Z10dry_actioniiPiS_S_S_S_+0x154>
			break;
		case UNLOAD:
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     4e6:	80 91 c6 03 	lds	r24, 0x03C6
     4ea:	8d 7f       	andi	r24, 0xFD	; 253
     4ec:	80 93 c6 03 	sts	0x03C6, r24
			*pplateLoadMotor = 1;
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	99 83       	std	Y+1, r25	; 0x01
     4f6:	88 83       	st	Y, r24
			break;
	}
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	df 90       	pop	r13
     4fe:	cf 90       	pop	r12
     500:	08 95       	ret

00000502 <_Z15button_debounceiPi>:

bool button_debounce(int counter, int *pstateButton)
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	8c 01       	movw	r16, r24
     50c:	eb 01       	movw	r28, r22
{
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && OrangutanDigital::isInputHigh(IO_D0)){
     50e:	88 81       	ld	r24, Y
     510:	99 81       	ldd	r25, Y+1	; 0x01
     512:	89 2b       	or	r24, r25
     514:	69 f4       	brne	.+26     	; 0x530 <_Z15button_debounceiPi+0x2e>
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
     51c:	88 23       	and	r24, r24
     51e:	41 f0       	breq	.+16     	; 0x530 <_Z15button_debounceiPi+0x2e>
		counterRefPush = counter;
     520:	10 93 cf 03 	sts	0x03CF, r17
     524:	00 93 ce 03 	sts	0x03CE, r16
		*pstateButton = PRESSED;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	99 83       	std	Y+1, r25	; 0x01
     52e:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     530:	88 81       	ld	r24, Y
     532:	99 81       	ldd	r25, Y+1	; 0x01
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	f9 f4       	brne	.+62     	; 0x576 <_Z15button_debounceiPi+0x74>
		if(counter - counterRefPush > 15){
     538:	80 91 ce 03 	lds	r24, 0x03CE
     53c:	90 91 cf 03 	lds	r25, 0x03CF
     540:	98 01       	movw	r18, r16
     542:	28 1b       	sub	r18, r24
     544:	39 0b       	sbc	r19, r25
     546:	20 31       	cpi	r18, 0x10	; 16
     548:	31 05       	cpc	r19, r1
     54a:	74 f0       	brlt	.+28     	; 0x568 <_Z15button_debounceiPi+0x66>
			if(!OrangutanDigital::isInputHigh(IO_D0)){
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
     552:	88 23       	and	r24, r24
     554:	81 f4       	brne	.+32     	; 0x576 <_Z15button_debounceiPi+0x74>
				counterRefRel = counter;
     556:	10 93 cd 03 	sts	0x03CD, r17
     55a:	00 93 cc 03 	sts	0x03CC, r16
				*pstateButton = RELEASED;
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	99 83       	std	Y+1, r25	; 0x01
     564:	88 83       	st	Y, r24
     566:	07 c0       	rjmp	.+14     	; 0x576 <_Z15button_debounceiPi+0x74>
			}
		}
		else if(!OrangutanDigital::isInputHigh(IO_D0)){
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
     56e:	88 23       	and	r24, r24
     570:	11 f4       	brne	.+4      	; 0x576 <_Z15button_debounceiPi+0x74>
			*pstateButton = NONE;
     572:	19 82       	std	Y+1, r1	; 0x01
     574:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     576:	88 81       	ld	r24, Y
     578:	99 81       	ldd	r25, Y+1	; 0x01
     57a:	02 97       	sbiw	r24, 0x02	; 2
     57c:	d9 f4       	brne	.+54     	; 0x5b4 <_Z15button_debounceiPi+0xb2>
		if(OrangutanDigital::isInputHigh(IO_D0)){
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
     584:	88 23       	and	r24, r24
     586:	49 f0       	breq	.+18     	; 0x59a <_Z15button_debounceiPi+0x98>
			*pstateButton = PRESSED;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	99 83       	std	Y+1, r25	; 0x01
     58e:	88 83       	st	Y, r24
			counterRefPush = counter;
     590:	10 93 cf 03 	sts	0x03CF, r17
     594:	00 93 ce 03 	sts	0x03CE, r16
     598:	0d c0       	rjmp	.+26     	; 0x5b4 <_Z15button_debounceiPi+0xb2>
		}
		else if(counter - counterRefRel > 15){
     59a:	80 91 cc 03 	lds	r24, 0x03CC
     59e:	90 91 cd 03 	lds	r25, 0x03CD
     5a2:	08 1b       	sub	r16, r24
     5a4:	19 0b       	sbc	r17, r25
     5a6:	00 31       	cpi	r16, 0x10	; 16
     5a8:	11 05       	cpc	r17, r1
     5aa:	24 f0       	brlt	.+8      	; 0x5b4 <_Z15button_debounceiPi+0xb2>
			*pstateButton = NONE;
     5ac:	19 82       	std	Y+1, r1	; 0x01
     5ae:	18 82       	st	Y, r1
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <_Z15button_debounceiPi+0xb4>
			return true;
     5b4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	08 95       	ret

000005c0 <_Z10init_transibii>:

bool init_trans(int state, bool buttonTriggered, int counter, int counterRef){
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	dc 01       	movw	r26, r24
     5c6:	86 2f       	mov	r24, r22
     5c8:	fa 01       	movw	r30, r20
     5ca:	b9 01       	movw	r22, r18
	return((state == INIT && buttonTriggered)||
	(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/)||
	(state == RAISEL1 && counter - counterRef > pWait)||
	(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||
	(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0)||
	(state == LOWERL2 && counter - counterRef > pWait));
     5cc:	10 97       	sbiw	r26, 0x00	; 0
     5ce:	19 f4       	brne	.+6      	; 0x5d6 <_Z10init_transibii+0x16>
     5d0:	88 23       	and	r24, r24
     5d2:	21 f1       	breq	.+72     	; 0x61c <_Z10init_transibii+0x5c>
     5d4:	3c c0       	rjmp	.+120    	; 0x64e <_Z10init_transibii+0x8e>
     5d6:	a1 30       	cpi	r26, 0x01	; 1
     5d8:	b1 05       	cpc	r27, r1
     5da:	b1 f4       	brne	.+44     	; 0x608 <_Z10init_transibii+0x48>
     5dc:	42 1b       	sub	r20, r18
     5de:	53 0b       	sbc	r21, r19
     5e0:	20 91 ab 03 	lds	r18, 0x03AB
     5e4:	30 91 ac 03 	lds	r19, 0x03AC
     5e8:	80 91 9d 03 	lds	r24, 0x039D
     5ec:	90 91 9e 03 	lds	r25, 0x039E
     5f0:	ec 01       	movw	r28, r24
     5f2:	2c 9f       	mul	r18, r28
     5f4:	c0 01       	movw	r24, r0
     5f6:	2d 9f       	mul	r18, r29
     5f8:	90 0d       	add	r25, r0
     5fa:	3c 9f       	mul	r19, r28
     5fc:	90 0d       	add	r25, r0
     5fe:	11 24       	eor	r1, r1
     600:	84 17       	cp	r24, r20
     602:	95 07       	cpc	r25, r21
     604:	b4 f4       	brge	.+44     	; 0x632 <_Z10init_transibii+0x72>
     606:	23 c0       	rjmp	.+70     	; 0x64e <_Z10init_transibii+0x8e>
     608:	a2 30       	cpi	r26, 0x02	; 2
     60a:	b1 05       	cpc	r27, r1
     60c:	b1 f0       	breq	.+44     	; 0x63a <_Z10init_transibii+0x7a>
     60e:	a3 30       	cpi	r26, 0x03	; 3
     610:	b1 05       	cpc	r27, r1
     612:	21 f4       	brne	.+8      	; 0x61c <_Z10init_transibii+0x5c>
     614:	20 91 ca 03 	lds	r18, 0x03CA
     618:	26 95       	lsr	r18
     61a:	08 c0       	rjmp	.+16     	; 0x62c <_Z10init_transibii+0x6c>
     61c:	a4 30       	cpi	r26, 0x04	; 4
     61e:	b1 05       	cpc	r27, r1
     620:	41 f4       	brne	.+16     	; 0x632 <_Z10init_transibii+0x72>
     622:	20 91 ca 03 	lds	r18, 0x03CA
     626:	26 95       	lsr	r18
     628:	26 95       	lsr	r18
     62a:	26 95       	lsr	r18
     62c:	20 95       	com	r18
     62e:	21 70       	andi	r18, 0x01	; 1
     630:	0f c0       	rjmp	.+30     	; 0x650 <_Z10init_transibii+0x90>
     632:	15 97       	sbiw	r26, 0x05	; 5
     634:	11 f0       	breq	.+4      	; 0x63a <_Z10init_transibii+0x7a>
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	0b c0       	rjmp	.+22     	; 0x650 <_Z10init_transibii+0x90>
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	e6 1b       	sub	r30, r22
     63e:	f7 0b       	sbc	r31, r23
     640:	80 91 8d 03 	lds	r24, 0x038D
     644:	90 91 8e 03 	lds	r25, 0x038E
     648:	8e 17       	cp	r24, r30
     64a:	9f 07       	cpc	r25, r31
     64c:	0c f4       	brge	.+2      	; 0x650 <_Z10init_transibii+0x90>
     64e:	21 e0       	ldi	r18, 0x01	; 1
}
     650:	82 2f       	mov	r24, r18
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <_Z12firstB_transiii>:

bool firstB_trans(int state, int counter, int counterRef){
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	fc 01       	movw	r30, r24
     65e:	da 01       	movw	r26, r20
	(state == B1START1 && counter - counterRef > pWait)||
	(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||
	(state == B1STOP1 && counter - counterRef > pWait)||
	(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/)||
	(state == B1START2 && counter - counterRef > pWait)||
	(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate));
     660:	86 30       	cpi	r24, 0x06	; 6
     662:	91 05       	cpc	r25, r1
     664:	b9 f4       	brne	.+46     	; 0x694 <_Z12firstB_transiii+0x3c>
     666:	ab 01       	movw	r20, r22
     668:	4a 1b       	sub	r20, r26
     66a:	5b 0b       	sbc	r21, r27
     66c:	20 91 af 03 	lds	r18, 0x03AF
     670:	30 91 b0 03 	lds	r19, 0x03B0
     674:	80 91 9f 03 	lds	r24, 0x039F
     678:	90 91 a0 03 	lds	r25, 0x03A0
     67c:	ec 01       	movw	r28, r24
     67e:	2c 9f       	mul	r18, r28
     680:	c0 01       	movw	r24, r0
     682:	2d 9f       	mul	r18, r29
     684:	90 0d       	add	r25, r0
     686:	3c 9f       	mul	r19, r28
     688:	90 0d       	add	r25, r0
     68a:	11 24       	eor	r1, r1
     68c:	84 17       	cp	r24, r20
     68e:	95 07       	cpc	r25, r21
     690:	bc f5       	brge	.+110    	; 0x700 <_Z12firstB_transiii+0xa8>
     692:	75 c0       	rjmp	.+234    	; 0x77e <_Z12firstB_transiii+0x126>
     694:	87 30       	cpi	r24, 0x07	; 7
     696:	91 05       	cpc	r25, r1
     698:	59 f4       	brne	.+22     	; 0x6b0 <_Z12firstB_transiii+0x58>
     69a:	9b 01       	movw	r18, r22
     69c:	24 1b       	sub	r18, r20
     69e:	35 0b       	sbc	r19, r21
     6a0:	80 91 8f 03 	lds	r24, 0x038F
     6a4:	90 91 90 03 	lds	r25, 0x0390
     6a8:	82 17       	cp	r24, r18
     6aa:	93 07       	cpc	r25, r19
     6ac:	64 f5       	brge	.+88     	; 0x706 <_Z12firstB_transiii+0xae>
     6ae:	67 c0       	rjmp	.+206    	; 0x77e <_Z12firstB_transiii+0x126>
     6b0:	88 30       	cpi	r24, 0x08	; 8
     6b2:	91 05       	cpc	r25, r1
     6b4:	59 f4       	brne	.+22     	; 0x6cc <_Z12firstB_transiii+0x74>
     6b6:	9b 01       	movw	r18, r22
     6b8:	24 1b       	sub	r18, r20
     6ba:	35 0b       	sbc	r19, r21
     6bc:	80 91 8d 03 	lds	r24, 0x038D
     6c0:	90 91 8e 03 	lds	r25, 0x038E
     6c4:	82 17       	cp	r24, r18
     6c6:	93 07       	cpc	r25, r19
     6c8:	ac f5       	brge	.+106    	; 0x734 <_Z12firstB_transiii+0xdc>
     6ca:	59 c0       	rjmp	.+178    	; 0x77e <_Z12firstB_transiii+0x126>
     6cc:	89 30       	cpi	r24, 0x09	; 9
     6ce:	91 05       	cpc	r25, r1
     6d0:	b9 f4       	brne	.+46     	; 0x700 <_Z12firstB_transiii+0xa8>
     6d2:	ab 01       	movw	r20, r22
     6d4:	4a 1b       	sub	r20, r26
     6d6:	5b 0b       	sbc	r21, r27
     6d8:	20 91 a7 03 	lds	r18, 0x03A7
     6dc:	30 91 a8 03 	lds	r19, 0x03A8
     6e0:	80 91 9f 03 	lds	r24, 0x039F
     6e4:	90 91 a0 03 	lds	r25, 0x03A0
     6e8:	ec 01       	movw	r28, r24
     6ea:	2c 9f       	mul	r18, r28
     6ec:	c0 01       	movw	r24, r0
     6ee:	2d 9f       	mul	r18, r29
     6f0:	90 0d       	add	r25, r0
     6f2:	3c 9f       	mul	r19, r28
     6f4:	90 0d       	add	r25, r0
     6f6:	11 24       	eor	r1, r1
     6f8:	84 17       	cp	r24, r20
     6fa:	95 07       	cpc	r25, r21
     6fc:	34 f5       	brge	.+76     	; 0x74a <_Z12firstB_transiii+0xf2>
     6fe:	3f c0       	rjmp	.+126    	; 0x77e <_Z12firstB_transiii+0x126>
     700:	ea 30       	cpi	r30, 0x0A	; 10
     702:	f1 05       	cpc	r31, r1
     704:	d1 f0       	breq	.+52     	; 0x73a <_Z12firstB_transiii+0xe2>
     706:	eb 30       	cpi	r30, 0x0B	; 11
     708:	f1 05       	cpc	r31, r1
     70a:	a1 f4       	brne	.+40     	; 0x734 <_Z12firstB_transiii+0xdc>
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	6a 1b       	sub	r22, r26
     710:	7b 0b       	sbc	r23, r27
     712:	80 91 a7 03 	lds	r24, 0x03A7
     716:	90 91 a8 03 	lds	r25, 0x03A8
     71a:	20 91 9f 03 	lds	r18, 0x039F
     71e:	30 91 a0 03 	lds	r19, 0x03A0
     722:	fc 01       	movw	r30, r24
     724:	e2 9f       	mul	r30, r18
     726:	c0 01       	movw	r24, r0
     728:	e3 9f       	mul	r30, r19
     72a:	90 0d       	add	r25, r0
     72c:	f2 9f       	mul	r31, r18
     72e:	90 0d       	add	r25, r0
     730:	11 24       	eor	r1, r1
     732:	22 c0       	rjmp	.+68     	; 0x778 <_Z12firstB_transiii+0x120>
     734:	ec 30       	cpi	r30, 0x0C	; 12
     736:	f1 05       	cpc	r31, r1
     738:	41 f4       	brne	.+16     	; 0x74a <_Z12firstB_transiii+0xf2>
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	6a 1b       	sub	r22, r26
     73e:	7b 0b       	sbc	r23, r27
     740:	80 91 8d 03 	lds	r24, 0x038D
     744:	90 91 8e 03 	lds	r25, 0x038E
     748:	17 c0       	rjmp	.+46     	; 0x778 <_Z12firstB_transiii+0x120>
     74a:	3d 97       	sbiw	r30, 0x0d	; 13
     74c:	11 f0       	breq	.+4      	; 0x752 <_Z12firstB_transiii+0xfa>
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	17 c0       	rjmp	.+46     	; 0x780 <_Z12firstB_transiii+0x128>
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	6a 1b       	sub	r22, r26
     756:	7b 0b       	sbc	r23, r27
     758:	80 91 a7 03 	lds	r24, 0x03A7
     75c:	90 91 a8 03 	lds	r25, 0x03A8
     760:	20 91 9f 03 	lds	r18, 0x039F
     764:	30 91 a0 03 	lds	r19, 0x03A0
     768:	ec 01       	movw	r28, r24
     76a:	c2 9f       	mul	r28, r18
     76c:	c0 01       	movw	r24, r0
     76e:	c3 9f       	mul	r28, r19
     770:	90 0d       	add	r25, r0
     772:	d2 9f       	mul	r29, r18
     774:	90 0d       	add	r25, r0
     776:	11 24       	eor	r1, r1
     778:	86 17       	cp	r24, r22
     77a:	97 07       	cpc	r25, r23
     77c:	0c f4       	brge	.+2      	; 0x780 <_Z12firstB_transiii+0x128>
     77e:	41 e0       	ldi	r20, 0x01	; 1
}
     780:	84 2f       	mov	r24, r20
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	08 95       	ret

00000788 <_Z13secondB_transiii>:

bool secondB_trans(int state, int counter, int counterRef){
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	fc 01       	movw	r30, r24
     78e:	da 01       	movw	r26, r20
	(state == B2STOP1 && counter - counterRef > pWait)||
	(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/)||
	(state == B2START2 && counter - counterRef > pWait)||
	(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||
	(state == B2STOP2 && counter - counterRef > pWait)||
	(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/));
     790:	8f 30       	cpi	r24, 0x0F	; 15
     792:	91 05       	cpc	r25, r1
     794:	59 f4       	brne	.+22     	; 0x7ac <_Z13secondB_transiii+0x24>
     796:	9b 01       	movw	r18, r22
     798:	24 1b       	sub	r18, r20
     79a:	35 0b       	sbc	r19, r21
     79c:	80 91 8f 03 	lds	r24, 0x038F
     7a0:	90 91 90 03 	lds	r25, 0x0390
     7a4:	82 17       	cp	r24, r18
     7a6:	93 07       	cpc	r25, r19
     7a8:	c4 f5       	brge	.+112    	; 0x81a <_Z13secondB_transiii+0x92>
     7aa:	90 c0       	rjmp	.+288    	; 0x8cc <_Z13secondB_transiii+0x144>
     7ac:	80 31       	cpi	r24, 0x10	; 16
     7ae:	91 05       	cpc	r25, r1
     7b0:	61 f4       	brne	.+24     	; 0x7ca <_Z13secondB_transiii+0x42>
     7b2:	9b 01       	movw	r18, r22
     7b4:	24 1b       	sub	r18, r20
     7b6:	35 0b       	sbc	r19, r21
     7b8:	80 91 8d 03 	lds	r24, 0x038D
     7bc:	90 91 8e 03 	lds	r25, 0x038E
     7c0:	82 17       	cp	r24, r18
     7c2:	93 07       	cpc	r25, r19
     7c4:	0c f0       	brlt	.+2      	; 0x7c8 <_Z13secondB_transiii+0x40>
     7c6:	43 c0       	rjmp	.+134    	; 0x84e <_Z13secondB_transiii+0xc6>
     7c8:	81 c0       	rjmp	.+258    	; 0x8cc <_Z13secondB_transiii+0x144>
     7ca:	81 31       	cpi	r24, 0x11	; 17
     7cc:	91 05       	cpc	r25, r1
     7ce:	b9 f4       	brne	.+46     	; 0x7fe <_Z13secondB_transiii+0x76>
     7d0:	ab 01       	movw	r20, r22
     7d2:	4a 1b       	sub	r20, r26
     7d4:	5b 0b       	sbc	r21, r27
     7d6:	20 91 a7 03 	lds	r18, 0x03A7
     7da:	30 91 a8 03 	lds	r19, 0x03A8
     7de:	80 91 9f 03 	lds	r24, 0x039F
     7e2:	90 91 a0 03 	lds	r25, 0x03A0
     7e6:	ec 01       	movw	r28, r24
     7e8:	2c 9f       	mul	r18, r28
     7ea:	c0 01       	movw	r24, r0
     7ec:	2d 9f       	mul	r18, r29
     7ee:	90 0d       	add	r25, r0
     7f0:	3c 9f       	mul	r19, r28
     7f2:	90 0d       	add	r25, r0
     7f4:	11 24       	eor	r1, r1
     7f6:	84 17       	cp	r24, r20
     7f8:	95 07       	cpc	r25, r21
     7fa:	64 f5       	brge	.+88     	; 0x854 <_Z13secondB_transiii+0xcc>
     7fc:	67 c0       	rjmp	.+206    	; 0x8cc <_Z13secondB_transiii+0x144>
     7fe:	82 31       	cpi	r24, 0x12	; 18
     800:	91 05       	cpc	r25, r1
     802:	59 f4       	brne	.+22     	; 0x81a <_Z13secondB_transiii+0x92>
     804:	9b 01       	movw	r18, r22
     806:	24 1b       	sub	r18, r20
     808:	35 0b       	sbc	r19, r21
     80a:	80 91 8d 03 	lds	r24, 0x038D
     80e:	90 91 8e 03 	lds	r25, 0x038E
     812:	82 17       	cp	r24, r18
     814:	93 07       	cpc	r25, r19
     816:	ac f5       	brge	.+106    	; 0x882 <_Z13secondB_transiii+0xfa>
     818:	59 c0       	rjmp	.+178    	; 0x8cc <_Z13secondB_transiii+0x144>
     81a:	e3 31       	cpi	r30, 0x13	; 19
     81c:	f1 05       	cpc	r31, r1
     81e:	b9 f4       	brne	.+46     	; 0x84e <_Z13secondB_transiii+0xc6>
     820:	ab 01       	movw	r20, r22
     822:	4a 1b       	sub	r20, r26
     824:	5b 0b       	sbc	r21, r27
     826:	20 91 a7 03 	lds	r18, 0x03A7
     82a:	30 91 a8 03 	lds	r19, 0x03A8
     82e:	80 91 9f 03 	lds	r24, 0x039F
     832:	90 91 a0 03 	lds	r25, 0x03A0
     836:	ec 01       	movw	r28, r24
     838:	2c 9f       	mul	r18, r28
     83a:	c0 01       	movw	r24, r0
     83c:	2d 9f       	mul	r18, r29
     83e:	90 0d       	add	r25, r0
     840:	3c 9f       	mul	r19, r28
     842:	90 0d       	add	r25, r0
     844:	11 24       	eor	r1, r1
     846:	84 17       	cp	r24, r20
     848:	95 07       	cpc	r25, r21
     84a:	34 f5       	brge	.+76     	; 0x898 <_Z13secondB_transiii+0x110>
     84c:	3f c0       	rjmp	.+126    	; 0x8cc <_Z13secondB_transiii+0x144>
     84e:	e4 31       	cpi	r30, 0x14	; 20
     850:	f1 05       	cpc	r31, r1
     852:	d1 f0       	breq	.+52     	; 0x888 <_Z13secondB_transiii+0x100>
     854:	e5 31       	cpi	r30, 0x15	; 21
     856:	f1 05       	cpc	r31, r1
     858:	a1 f4       	brne	.+40     	; 0x882 <_Z13secondB_transiii+0xfa>
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	6a 1b       	sub	r22, r26
     85e:	7b 0b       	sbc	r23, r27
     860:	80 91 a7 03 	lds	r24, 0x03A7
     864:	90 91 a8 03 	lds	r25, 0x03A8
     868:	20 91 9f 03 	lds	r18, 0x039F
     86c:	30 91 a0 03 	lds	r19, 0x03A0
     870:	fc 01       	movw	r30, r24
     872:	e2 9f       	mul	r30, r18
     874:	c0 01       	movw	r24, r0
     876:	e3 9f       	mul	r30, r19
     878:	90 0d       	add	r25, r0
     87a:	f2 9f       	mul	r31, r18
     87c:	90 0d       	add	r25, r0
     87e:	11 24       	eor	r1, r1
     880:	22 c0       	rjmp	.+68     	; 0x8c6 <_Z13secondB_transiii+0x13e>
     882:	e6 31       	cpi	r30, 0x16	; 22
     884:	f1 05       	cpc	r31, r1
     886:	41 f4       	brne	.+16     	; 0x898 <_Z13secondB_transiii+0x110>
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	6a 1b       	sub	r22, r26
     88c:	7b 0b       	sbc	r23, r27
     88e:	80 91 8d 03 	lds	r24, 0x038D
     892:	90 91 8e 03 	lds	r25, 0x038E
     896:	17 c0       	rjmp	.+46     	; 0x8c6 <_Z13secondB_transiii+0x13e>
     898:	77 97       	sbiw	r30, 0x17	; 23
     89a:	11 f0       	breq	.+4      	; 0x8a0 <_Z13secondB_transiii+0x118>
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	17 c0       	rjmp	.+46     	; 0x8ce <_Z13secondB_transiii+0x146>
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	6a 1b       	sub	r22, r26
     8a4:	7b 0b       	sbc	r23, r27
     8a6:	80 91 b3 03 	lds	r24, 0x03B3
     8aa:	90 91 b4 03 	lds	r25, 0x03B4
     8ae:	20 91 9f 03 	lds	r18, 0x039F
     8b2:	30 91 a0 03 	lds	r19, 0x03A0
     8b6:	ec 01       	movw	r28, r24
     8b8:	c2 9f       	mul	r28, r18
     8ba:	c0 01       	movw	r24, r0
     8bc:	c3 9f       	mul	r28, r19
     8be:	90 0d       	add	r25, r0
     8c0:	d2 9f       	mul	r29, r18
     8c2:	90 0d       	add	r25, r0
     8c4:	11 24       	eor	r1, r1
     8c6:	86 17       	cp	r24, r22
     8c8:	97 07       	cpc	r25, r23
     8ca:	0c f4       	brge	.+2      	; 0x8ce <_Z13secondB_transiii+0x146>
     8cc:	41 e0       	ldi	r20, 0x01	; 1
}
     8ce:	84 2f       	mov	r24, r20
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	08 95       	ret

000008d6 <_Z9dry_transiiii>:

bool dry_trans(int state, int counter, int counterRef, int counterRefFive){
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	fc 01       	movw	r30, r24
     8dc:	da 01       	movw	r26, r20
	(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate)||
	(state == D2STOP && counter - counterRef > totalStepLength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/)||
	(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/)||
	(state == FIXH && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/)||
	(state == LOWERL3 && counter - counterRef > pWait)||
	(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate));
     8de:	88 31       	cpi	r24, 0x18	; 24
     8e0:	91 05       	cpc	r25, r1
     8e2:	61 f4       	brne	.+24     	; 0x8fc <_Z9dry_transiiii+0x26>
     8e4:	9b 01       	movw	r18, r22
     8e6:	24 1b       	sub	r18, r20
     8e8:	35 0b       	sbc	r19, r21
     8ea:	80 91 91 03 	lds	r24, 0x0391
     8ee:	90 91 92 03 	lds	r25, 0x0392
     8f2:	82 17       	cp	r24, r18
     8f4:	93 07       	cpc	r25, r19
     8f6:	0c f0       	brlt	.+2      	; 0x8fa <_Z9dry_transiiii+0x24>
     8f8:	45 c0       	rjmp	.+138    	; 0x984 <_Z9dry_transiiii+0xae>
     8fa:	ce c0       	rjmp	.+412    	; 0xa98 <_Z9dry_transiiii+0x1c2>
     8fc:	89 31       	cpi	r24, 0x19	; 25
     8fe:	91 05       	cpc	r25, r1
     900:	b9 f4       	brne	.+46     	; 0x930 <_Z9dry_transiiii+0x5a>
     902:	ab 01       	movw	r20, r22
     904:	4a 1b       	sub	r20, r26
     906:	5b 0b       	sbc	r21, r27
     908:	20 91 a9 03 	lds	r18, 0x03A9
     90c:	30 91 aa 03 	lds	r19, 0x03AA
     910:	80 91 9f 03 	lds	r24, 0x039F
     914:	90 91 a0 03 	lds	r25, 0x03A0
     918:	ec 01       	movw	r28, r24
     91a:	2c 9f       	mul	r18, r28
     91c:	c0 01       	movw	r24, r0
     91e:	2d 9f       	mul	r18, r29
     920:	90 0d       	add	r25, r0
     922:	3c 9f       	mul	r19, r28
     924:	90 0d       	add	r25, r0
     926:	11 24       	eor	r1, r1
     928:	84 17       	cp	r24, r20
     92a:	95 07       	cpc	r25, r21
     92c:	d4 f5       	brge	.+116    	; 0x9a2 <_Z9dry_transiiii+0xcc>
     92e:	b4 c0       	rjmp	.+360    	; 0xa98 <_Z9dry_transiiii+0x1c2>
     930:	8a 31       	cpi	r24, 0x1A	; 26
     932:	91 05       	cpc	r25, r1
     934:	b9 f4       	brne	.+46     	; 0x964 <_Z9dry_transiiii+0x8e>
     936:	ab 01       	movw	r20, r22
     938:	4a 1b       	sub	r20, r26
     93a:	5b 0b       	sbc	r21, r27
     93c:	20 91 b5 03 	lds	r18, 0x03B5
     940:	30 91 b6 03 	lds	r19, 0x03B6
     944:	80 91 9f 03 	lds	r24, 0x039F
     948:	90 91 a0 03 	lds	r25, 0x03A0
     94c:	ec 01       	movw	r28, r24
     94e:	2c 9f       	mul	r18, r28
     950:	c0 01       	movw	r24, r0
     952:	2d 9f       	mul	r18, r29
     954:	90 0d       	add	r25, r0
     956:	3c 9f       	mul	r19, r28
     958:	90 0d       	add	r25, r0
     95a:	11 24       	eor	r1, r1
     95c:	84 17       	cp	r24, r20
     95e:	95 07       	cpc	r25, r21
     960:	d4 f5       	brge	.+116    	; 0x9d6 <_Z9dry_transiiii+0x100>
     962:	9a c0       	rjmp	.+308    	; 0xa98 <_Z9dry_transiiii+0x1c2>
     964:	8b 31       	cpi	r24, 0x1B	; 27
     966:	91 05       	cpc	r25, r1
     968:	69 f4       	brne	.+26     	; 0x984 <_Z9dry_transiiii+0xae>
     96a:	cb 01       	movw	r24, r22
     96c:	82 1b       	sub	r24, r18
     96e:	93 0b       	sbc	r25, r19
     970:	9c 01       	movw	r18, r24
     972:	80 91 8f 03 	lds	r24, 0x038F
     976:	90 91 90 03 	lds	r25, 0x0390
     97a:	82 17       	cp	r24, r18
     97c:	93 07       	cpc	r25, r19
     97e:	0c f0       	brlt	.+2      	; 0x982 <_Z9dry_transiiii+0xac>
     980:	44 c0       	rjmp	.+136    	; 0xa0a <_Z9dry_transiiii+0x134>
     982:	8a c0       	rjmp	.+276    	; 0xa98 <_Z9dry_transiiii+0x1c2>
     984:	ec 31       	cpi	r30, 0x1C	; 28
     986:	f1 05       	cpc	r31, r1
     988:	61 f4       	brne	.+24     	; 0x9a2 <_Z9dry_transiiii+0xcc>
     98a:	9b 01       	movw	r18, r22
     98c:	2a 1b       	sub	r18, r26
     98e:	3b 0b       	sbc	r19, r27
     990:	80 91 8d 03 	lds	r24, 0x038D
     994:	90 91 8e 03 	lds	r25, 0x038E
     998:	82 17       	cp	r24, r18
     99a:	93 07       	cpc	r25, r19
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <_Z9dry_transiiii+0xca>
     99e:	40 c0       	rjmp	.+128    	; 0xa20 <_Z9dry_transiiii+0x14a>
     9a0:	7b c0       	rjmp	.+246    	; 0xa98 <_Z9dry_transiiii+0x1c2>
     9a2:	ed 31       	cpi	r30, 0x1D	; 29
     9a4:	f1 05       	cpc	r31, r1
     9a6:	b9 f4       	brne	.+46     	; 0x9d6 <_Z9dry_transiiii+0x100>
     9a8:	ab 01       	movw	r20, r22
     9aa:	4a 1b       	sub	r20, r26
     9ac:	5b 0b       	sbc	r21, r27
     9ae:	20 91 a9 03 	lds	r18, 0x03A9
     9b2:	30 91 aa 03 	lds	r19, 0x03AA
     9b6:	80 91 9f 03 	lds	r24, 0x039F
     9ba:	90 91 a0 03 	lds	r25, 0x03A0
     9be:	ec 01       	movw	r28, r24
     9c0:	2c 9f       	mul	r18, r28
     9c2:	c0 01       	movw	r24, r0
     9c4:	2d 9f       	mul	r18, r29
     9c6:	90 0d       	add	r25, r0
     9c8:	3c 9f       	mul	r19, r28
     9ca:	90 0d       	add	r25, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	84 17       	cp	r24, r20
     9d0:	95 07       	cpc	r25, r21
     9d2:	ec f5       	brge	.+122    	; 0xa4e <_Z9dry_transiiii+0x178>
     9d4:	61 c0       	rjmp	.+194    	; 0xa98 <_Z9dry_transiiii+0x1c2>
     9d6:	ee 31       	cpi	r30, 0x1E	; 30
     9d8:	f1 05       	cpc	r31, r1
     9da:	b9 f4       	brne	.+46     	; 0xa0a <_Z9dry_transiiii+0x134>
     9dc:	ab 01       	movw	r20, r22
     9de:	4a 1b       	sub	r20, r26
     9e0:	5b 0b       	sbc	r21, r27
     9e2:	20 91 b7 03 	lds	r18, 0x03B7
     9e6:	30 91 b8 03 	lds	r19, 0x03B8
     9ea:	80 91 9f 03 	lds	r24, 0x039F
     9ee:	90 91 a0 03 	lds	r25, 0x03A0
     9f2:	ec 01       	movw	r28, r24
     9f4:	2c 9f       	mul	r18, r28
     9f6:	c0 01       	movw	r24, r0
     9f8:	2d 9f       	mul	r18, r29
     9fa:	90 0d       	add	r25, r0
     9fc:	3c 9f       	mul	r19, r28
     9fe:	90 0d       	add	r25, r0
     a00:	11 24       	eor	r1, r1
     a02:	84 17       	cp	r24, r20
     a04:	95 07       	cpc	r25, r21
     a06:	74 f5       	brge	.+92     	; 0xa64 <_Z9dry_transiiii+0x18e>
     a08:	47 c0       	rjmp	.+142    	; 0xa98 <_Z9dry_transiiii+0x1c2>
     a0a:	ef 31       	cpi	r30, 0x1F	; 31
     a0c:	f1 05       	cpc	r31, r1
     a0e:	41 f4       	brne	.+16     	; 0xa20 <_Z9dry_transiiii+0x14a>
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	6a 1b       	sub	r22, r26
     a14:	7b 0b       	sbc	r23, r27
     a16:	69 5e       	subi	r22, 0xE9	; 233
     a18:	73 40       	sbci	r23, 0x03	; 3
     a1a:	0c f4       	brge	.+2      	; 0xa1e <_Z9dry_transiiii+0x148>
     a1c:	3e c0       	rjmp	.+124    	; 0xa9a <_Z9dry_transiiii+0x1c4>
     a1e:	3c c0       	rjmp	.+120    	; 0xa98 <_Z9dry_transiiii+0x1c2>
     a20:	e0 32       	cpi	r30, 0x20	; 32
     a22:	f1 05       	cpc	r31, r1
     a24:	a1 f4       	brne	.+40     	; 0xa4e <_Z9dry_transiiii+0x178>
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	6a 1b       	sub	r22, r26
     a2a:	7b 0b       	sbc	r23, r27
     a2c:	80 91 ad 03 	lds	r24, 0x03AD
     a30:	90 91 ae 03 	lds	r25, 0x03AE
     a34:	20 91 9f 03 	lds	r18, 0x039F
     a38:	30 91 a0 03 	lds	r19, 0x03A0
     a3c:	ec 01       	movw	r28, r24
     a3e:	c2 9f       	mul	r28, r18
     a40:	c0 01       	movw	r24, r0
     a42:	c3 9f       	mul	r28, r19
     a44:	90 0d       	add	r25, r0
     a46:	d2 9f       	mul	r29, r18
     a48:	90 0d       	add	r25, r0
     a4a:	11 24       	eor	r1, r1
     a4c:	22 c0       	rjmp	.+68     	; 0xa92 <_Z9dry_transiiii+0x1bc>
     a4e:	e1 32       	cpi	r30, 0x21	; 33
     a50:	f1 05       	cpc	r31, r1
     a52:	41 f4       	brne	.+16     	; 0xa64 <_Z9dry_transiiii+0x18e>
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	6a 1b       	sub	r22, r26
     a58:	7b 0b       	sbc	r23, r27
     a5a:	80 91 8d 03 	lds	r24, 0x038D
     a5e:	90 91 8e 03 	lds	r25, 0x038E
     a62:	17 c0       	rjmp	.+46     	; 0xa92 <_Z9dry_transiiii+0x1bc>
     a64:	b2 97       	sbiw	r30, 0x22	; 34
     a66:	11 f0       	breq	.+4      	; 0xa6c <_Z9dry_transiiii+0x196>
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	17 c0       	rjmp	.+46     	; 0xa9a <_Z9dry_transiiii+0x1c4>
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	6a 1b       	sub	r22, r26
     a70:	7b 0b       	sbc	r23, r27
     a72:	80 91 ab 03 	lds	r24, 0x03AB
     a76:	90 91 ac 03 	lds	r25, 0x03AC
     a7a:	20 91 9d 03 	lds	r18, 0x039D
     a7e:	30 91 9e 03 	lds	r19, 0x039E
     a82:	fc 01       	movw	r30, r24
     a84:	e2 9f       	mul	r30, r18
     a86:	c0 01       	movw	r24, r0
     a88:	e3 9f       	mul	r30, r19
     a8a:	90 0d       	add	r25, r0
     a8c:	f2 9f       	mul	r31, r18
     a8e:	90 0d       	add	r25, r0
     a90:	11 24       	eor	r1, r1
     a92:	86 17       	cp	r24, r22
     a94:	97 07       	cpc	r25, r23
     a96:	0c f4       	brge	.+2      	; 0xa9a <_Z9dry_transiiii+0x1c4>
     a98:	41 e0       	ldi	r20, 0x01	; 1
}
     a9a:	84 2f       	mov	r24, r20
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <_Z11init_actioniiPiS_S_S_S_Pb>:
	i2c_write(u_outputByte0.outputByte0);
	i2c_write(u_outputByte1.outputByte1);
	i2c_stop();
}

void init_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor, bool *pprint0){
     aa2:	af 92       	push	r10
     aa4:	bf 92       	push	r11
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	ea 01       	movw	r28, r20
     aac:	f9 01       	movw	r30, r18
	switch(state){
     aae:	83 30       	cpi	r24, 0x03	; 3
     ab0:	91 05       	cpc	r25, r1
     ab2:	09 f4       	brne	.+2      	; 0xab6 <_Z11init_actioniiPiS_S_S_S_Pb+0x14>
     ab4:	82 c0       	rjmp	.+260    	; 0xbba <_Z11init_actioniiPiS_S_S_S_Pb+0x118>
     ab6:	84 30       	cpi	r24, 0x04	; 4
     ab8:	91 05       	cpc	r25, r1
     aba:	54 f4       	brge	.+20     	; 0xad0 <_Z11init_actioniiPiS_S_S_S_Pb+0x2e>
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	91 05       	cpc	r25, r1
     ac0:	d9 f1       	breq	.+118    	; 0xb38 <_Z11init_actioniiPiS_S_S_S_Pb+0x96>
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	91 05       	cpc	r25, r1
     ac6:	0c f0       	brlt	.+2      	; 0xaca <_Z11init_actioniiPiS_S_S_S_Pb+0x28>
     ac8:	58 c0       	rjmp	.+176    	; 0xb7a <_Z11init_actioniiPiS_S_S_S_Pb+0xd8>
     aca:	89 2b       	or	r24, r25
     acc:	69 f0       	breq	.+26     	; 0xae8 <_Z11init_actioniiPiS_S_S_S_Pb+0x46>
     ace:	83 c0       	rjmp	.+262    	; 0xbd6 <_Z11init_actioniiPiS_S_S_S_Pb+0x134>
     ad0:	85 30       	cpi	r24, 0x05	; 5
     ad2:	91 05       	cpc	r25, r1
     ad4:	09 f4       	brne	.+2      	; 0xad8 <_Z11init_actioniiPiS_S_S_S_Pb+0x36>
     ad6:	6b c0       	rjmp	.+214    	; 0xbae <_Z11init_actioniiPiS_S_S_S_Pb+0x10c>
     ad8:	85 30       	cpi	r24, 0x05	; 5
     ada:	91 05       	cpc	r25, r1
     adc:	0c f4       	brge	.+2      	; 0xae0 <_Z11init_actioniiPiS_S_S_S_Pb+0x3e>
     ade:	5a c0       	rjmp	.+180    	; 0xb94 <_Z11init_actioniiPiS_S_S_S_Pb+0xf2>
     ae0:	06 97       	sbiw	r24, 0x06	; 6
     ae2:	09 f0       	breq	.+2      	; 0xae6 <_Z11init_actioniiPiS_S_S_S_Pb+0x44>
     ae4:	78 c0       	rjmp	.+240    	; 0xbd6 <_Z11init_actioniiPiS_S_S_S_Pb+0x134>
     ae6:	69 c0       	rjmp	.+210    	; 0xbba <_Z11init_actioniiPiS_S_S_S_Pb+0x118>
		case INIT:
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
     ae8:	80 91 ca 03 	lds	r24, 0x03CA
     aec:	90 91 c6 03 	lds	r25, 0x03C6
     af0:	82 ff       	sbrs	r24, 2
     af2:	07 c0       	rjmp	.+14     	; 0xb02 <_Z11init_actioniiPiS_S_S_S_Pb+0x60>
				u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
     af4:	9f 7e       	andi	r25, 0xEF	; 239
     af6:	90 93 c6 03 	sts	0x03C6, r25
				u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     afa:	80 91 c8 03 	lds	r24, 0x03C8
     afe:	87 7f       	andi	r24, 0xF7	; 247
     b00:	53 c0       	rjmp	.+166    	; 0xba8 <_Z11init_actioniiPiS_S_S_S_Pb+0x106>
			}
			else{
				u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     b02:	9f 7d       	andi	r25, 0xDF	; 223
     b04:	90 93 c6 03 	sts	0x03C6, r25
				*pfixtureMotor = 0;
     b08:	11 82       	std	Z+1, r1	; 0x01
     b0a:	10 82       	st	Z, r1
				u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     b0c:	80 91 c8 03 	lds	r24, 0x03C8
     b10:	8f 7e       	andi	r24, 0xEF	; 239
				u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     b12:	88 60       	ori	r24, 0x08	; 8
     b14:	80 93 c8 03 	sts	0x03C8, r24
				if(*pprint0 == 1){
     b18:	f5 01       	movw	r30, r10
     b1a:	80 81       	ld	r24, Z
     b1c:	88 23       	and	r24, r24
     b1e:	09 f4       	brne	.+2      	; 0xb22 <_Z11init_actioniiPiS_S_S_S_Pb+0x80>
     b20:	5a c0       	rjmp	.+180    	; 0xbd6 <_Z11init_actioniiPiS_S_S_S_Pb+0x134>
					OrangutanLCD::gotoXY(0,1);
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	61 e0       	ldi	r22, 0x01	; 1
     b26:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("PUSH TO START");
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
					*pprint0 = 0;
     b32:	f5 01       	movw	r30, r10
     b34:	10 82       	st	Z, r1
     b36:	4f c0       	rjmp	.+158    	; 0xbd6 <_Z11init_actioniiPiS_S_S_S_Pb+0x134>
				}
			}
			break;
		case LOAD:
			u_outputByte0.bits_in_outputByte0.ACPower = 0;
     b38:	20 91 c8 03 	lds	r18, 0x03C8
     b3c:	32 2f       	mov	r19, r18
     b3e:	3e 7f       	andi	r19, 0xFE	; 254
			if((counter % 200) < 100){
     b40:	cb 01       	movw	r24, r22
     b42:	68 ec       	ldi	r22, 0xC8	; 200
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <__divmodhi4>
     b4a:	84 36       	cpi	r24, 0x64	; 100
     b4c:	91 05       	cpc	r25, r1
     b4e:	24 f4       	brge	.+8      	; 0xb58 <_Z11init_actioniiPiS_S_S_S_Pb+0xb6>
				u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     b50:	2c 7f       	andi	r18, 0xFC	; 252
     b52:	20 93 c8 03 	sts	0x03C8, r18
     b56:	03 c0       	rjmp	.+6      	; 0xb5e <_Z11init_actioniiPiS_S_S_S_Pb+0xbc>
			}
			else{
				u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     b58:	32 60       	ori	r19, 0x02	; 2
     b5a:	30 93 c8 03 	sts	0x03C8, r19
			}
			*pplateLoadMotor = 1;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	99 83       	std	Y+1, r25	; 0x01
     b64:	88 83       	st	Y, r24
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
     b66:	80 91 c6 03 	lds	r24, 0x03C6
     b6a:	8d 7f       	andi	r24, 0xFD	; 253
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     b6c:	84 60       	ori	r24, 0x04	; 4
     b6e:	80 93 c6 03 	sts	0x03C6, r24
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
     b72:	80 91 c8 03 	lds	r24, 0x03C8
     b76:	8b 7f       	andi	r24, 0xFB	; 251
     b78:	17 c0       	rjmp	.+46     	; 0xba8 <_Z11init_actioniiPiS_S_S_S_Pb+0x106>
			break;
		case RAISEL1:
			u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     b7a:	80 91 c8 03 	lds	r24, 0x03C8
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     b7e:	81 7e       	andi	r24, 0xE1	; 225
			u_outputByte0.bits_in_outputByte0.plateStop = 1;
     b80:	86 61       	ori	r24, 0x16	; 22
     b82:	80 93 c8 03 	sts	0x03C8, r24
			*pplateLoadMotor = 0;
     b86:	19 82       	std	Y+1, r1	; 0x01
     b88:	18 82       	st	Y, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     b8a:	80 91 c6 03 	lds	r24, 0x03C6
     b8e:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
     b90:	8b 7f       	andi	r24, 0xFB	; 251
     b92:	1f c0       	rjmp	.+62     	; 0xbd2 <_Z11init_actioniiPiS_S_S_S_Pb+0x130>
		case FIXL:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case LOWERL1:
			*pfixtureMotor = 0;
     b94:	11 82       	std	Z+1, r1	; 0x01
     b96:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     b98:	80 91 c6 03 	lds	r24, 0x03C6
     b9c:	8f 7d       	andi	r24, 0xDF	; 223
     b9e:	80 93 c6 03 	sts	0x03C6, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     ba2:	80 91 c8 03 	lds	r24, 0x03C8
     ba6:	88 60       	ori	r24, 0x08	; 8
     ba8:	80 93 c8 03 	sts	0x03C8, r24
     bac:	14 c0       	rjmp	.+40     	; 0xbd6 <_Z11init_actioniiPiS_S_S_S_Pb+0x134>
			break;
		case LOWERL2:
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     bae:	80 91 c8 03 	lds	r24, 0x03C8
     bb2:	8f 7e       	andi	r24, 0xEF	; 239
     bb4:	80 93 c8 03 	sts	0x03C8, r24
     bb8:	09 c0       	rjmp	.+18     	; 0xbcc <_Z11init_actioniiPiS_S_S_S_Pb+0x12a>
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		//*********************************************
		case MOVEC1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     bba:	80 91 c6 03 	lds	r24, 0x03C6
     bbe:	80 61       	ori	r24, 0x10	; 16
     bc0:	80 93 c6 03 	sts	0x03C6, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	91 83       	std	Z+1, r25	; 0x01
     bca:	80 83       	st	Z, r24
     bcc:	80 91 c6 03 	lds	r24, 0x03C6
     bd0:	80 62       	ori	r24, 0x20	; 32
     bd2:	80 93 c6 03 	sts	0x03C6, r24
			break;
	}
}
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	bf 90       	pop	r11
     bdc:	af 90       	pop	r10
     bde:	08 95       	ret

00000be0 <_Z15motor_and_writeiiiiiiii>:
	OrangutanLCD::print("END");
	}
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor)
     be0:	6f 92       	push	r6
     be2:	7f 92       	push	r7
     be4:	8f 92       	push	r8
     be6:	9f 92       	push	r9
     be8:	af 92       	push	r10
     bea:	bf 92       	push	r11
     bec:	cf 92       	push	r12
     bee:	df 92       	push	r13
     bf0:	ef 92       	push	r14
     bf2:	ff 92       	push	r15
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	4c 01       	movw	r8, r24
     bfe:	3a 01       	movw	r6, r20
     c00:	e9 01       	movw	r28, r18
{
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     c02:	fc 01       	movw	r30, r24
     c04:	e6 1b       	sub	r30, r22
     c06:	f7 0b       	sbc	r31, r23
     c08:	60 91 9d 03 	lds	r22, 0x039D
     c0c:	70 91 9e 03 	lds	r23, 0x039E
     c10:	cf 01       	movw	r24, r30
     c12:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <__divmodhi4>
     c16:	20 91 93 03 	lds	r18, 0x0393
     c1a:	30 91 94 03 	lds	r19, 0x0394
     c1e:	82 17       	cp	r24, r18
     c20:	93 07       	cpc	r25, r19
     c22:	34 f4       	brge	.+12     	; 0xc30 <_Z15motor_and_writeiiiiiiii+0x50>
     c24:	cd 2b       	or	r28, r29
     c26:	21 f0       	breq	.+8      	; 0xc30 <_Z15motor_and_writeiiiiiiii+0x50>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     c28:	80 91 c6 03 	lds	r24, 0x03C6
     c2c:	81 60       	ori	r24, 0x01	; 1
     c2e:	03 c0       	rjmp	.+6      	; 0xc36 <_Z15motor_and_writeiiiiiiii+0x56>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     c30:	80 91 c6 03 	lds	r24, 0x03C6
     c34:	8e 7f       	andi	r24, 0xFE	; 254
     c36:	80 93 c6 03 	sts	0x03C6, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     c3a:	60 91 9f 03 	lds	r22, 0x039F
     c3e:	70 91 a0 03 	lds	r23, 0x03A0
     c42:	cf 01       	movw	r24, r30
     c44:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <__divmodhi4>
     c48:	20 91 95 03 	lds	r18, 0x0395
     c4c:	30 91 96 03 	lds	r19, 0x0396
     c50:	82 17       	cp	r24, r18
     c52:	93 07       	cpc	r25, r19
     c54:	34 f4       	brge	.+12     	; 0xc62 <_Z15motor_and_writeiiiiiiii+0x82>
     c56:	01 2b       	or	r16, r17
     c58:	21 f0       	breq	.+8      	; 0xc62 <_Z15motor_and_writeiiiiiiii+0x82>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     c5a:	80 91 c6 03 	lds	r24, 0x03C6
     c5e:	88 60       	ori	r24, 0x08	; 8
     c60:	03 c0       	rjmp	.+6      	; 0xc68 <_Z15motor_and_writeiiiiiiii+0x88>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     c62:	80 91 c6 03 	lds	r24, 0x03C6
     c66:	87 7f       	andi	r24, 0xF7	; 247
     c68:	80 93 c6 03 	sts	0x03C6, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     c6c:	60 91 a1 03 	lds	r22, 0x03A1
     c70:	70 91 a2 03 	lds	r23, 0x03A2
     c74:	cf 01       	movw	r24, r30
     c76:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <__divmodhi4>
     c7a:	20 91 97 03 	lds	r18, 0x0397
     c7e:	30 91 98 03 	lds	r19, 0x0398
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	34 f4       	brge	.+12     	; 0xc94 <_Z15motor_and_writeiiiiiiii+0xb4>
     c88:	ef 28       	or	r14, r15
     c8a:	21 f0       	breq	.+8      	; 0xc94 <_Z15motor_and_writeiiiiiiii+0xb4>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     c8c:	80 91 c6 03 	lds	r24, 0x03C6
     c90:	80 64       	ori	r24, 0x40	; 64
     c92:	03 c0       	rjmp	.+6      	; 0xc9a <_Z15motor_and_writeiiiiiiii+0xba>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     c94:	80 91 c6 03 	lds	r24, 0x03C6
     c98:	8f 7b       	andi	r24, 0xBF	; 191
     c9a:	80 93 c6 03 	sts	0x03C6, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     c9e:	60 91 a3 03 	lds	r22, 0x03A3
     ca2:	70 91 a4 03 	lds	r23, 0x03A4
     ca6:	cf 01       	movw	r24, r30
     ca8:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <__divmodhi4>
     cac:	20 91 99 03 	lds	r18, 0x0399
     cb0:	30 91 9a 03 	lds	r19, 0x039A
     cb4:	82 17       	cp	r24, r18
     cb6:	93 07       	cpc	r25, r19
     cb8:	34 f4       	brge	.+12     	; 0xcc6 <_Z15motor_and_writeiiiiiiii+0xe6>
     cba:	cd 28       	or	r12, r13
     cbc:	21 f0       	breq	.+8      	; 0xcc6 <_Z15motor_and_writeiiiiiiii+0xe6>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     cbe:	80 91 c7 03 	lds	r24, 0x03C7
     cc2:	82 60       	ori	r24, 0x02	; 2
     cc4:	03 c0       	rjmp	.+6      	; 0xccc <_Z15motor_and_writeiiiiiiii+0xec>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     cc6:	80 91 c7 03 	lds	r24, 0x03C7
     cca:	8d 7f       	andi	r24, 0xFD	; 253
     ccc:	80 93 c7 03 	sts	0x03C7, r24
	}

	if( ((counter - counterRefFive) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     cd0:	60 91 a5 03 	lds	r22, 0x03A5
     cd4:	70 91 a6 03 	lds	r23, 0x03A6
     cd8:	c4 01       	movw	r24, r8
     cda:	86 19       	sub	r24, r6
     cdc:	97 09       	sbc	r25, r7
     cde:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <__divmodhi4>
     ce2:	20 91 9b 03 	lds	r18, 0x039B
     ce6:	30 91 9c 03 	lds	r19, 0x039C
     cea:	82 17       	cp	r24, r18
     cec:	93 07       	cpc	r25, r19
     cee:	34 f4       	brge	.+12     	; 0xcfc <_Z15motor_and_writeiiiiiiii+0x11c>
     cf0:	ab 28       	or	r10, r11
     cf2:	21 f0       	breq	.+8      	; 0xcfc <_Z15motor_and_writeiiiiiiii+0x11c>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     cf4:	80 91 c7 03 	lds	r24, 0x03C7
     cf8:	80 61       	ori	r24, 0x10	; 16
     cfa:	03 c0       	rjmp	.+6      	; 0xd02 <_Z15motor_and_writeiiiiiiii+0x122>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     cfc:	80 91 c7 03 	lds	r24, 0x03C7
     d00:	8f 7e       	andi	r24, 0xEF	; 239
     d02:	80 93 c7 03 	sts	0x03C7, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
	i2c_write(0x2);									// write command byte
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     d12:	80 91 c6 03 	lds	r24, 0x03C6
     d16:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     d1a:	80 91 c7 03 	lds	r24, 0x03C7
     d1e:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
	i2c_stop();                            // set stop conditon = release bus
     d22:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>

	i2c_start(I2C2+I2C_WRITE);
     d26:	82 e4       	ldi	r24, 0x42	; 66
     d28:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
	i2c_write(0x2);
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
	i2c_write(u_outputByte0.outputByte0);
     d32:	80 91 c8 03 	lds	r24, 0x03C8
     d36:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
	i2c_write(u_outputByte1.outputByte1);
     d3a:	80 91 c9 03 	lds	r24, 0x03C9
     d3e:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
	i2c_stop();
     d42:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>
}
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	ff 90       	pop	r15
     d50:	ef 90       	pop	r14
     d52:	df 90       	pop	r13
     d54:	cf 90       	pop	r12
     d56:	bf 90       	pop	r11
     d58:	af 90       	pop	r10
     d5a:	9f 90       	pop	r9
     d5c:	8f 90       	pop	r8
     d5e:	7f 90       	pop	r7
     d60:	6f 90       	pop	r6
     d62:	08 95       	ret

00000d64 <main>:

void brush2_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor);

void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor);

int main()   
     d64:	2f 92       	push	r2
     d66:	3f 92       	push	r3
     d68:	4f 92       	push	r4
     d6a:	5f 92       	push	r5
     d6c:	6f 92       	push	r6
     d6e:	7f 92       	push	r7
     d70:	8f 92       	push	r8
     d72:	9f 92       	push	r9
     d74:	af 92       	push	r10
     d76:	bf 92       	push	r11
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	68 97       	sbiw	r28, 0x18	; 24
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
	bool print0 = true;
	bool  print35 = true;
		
	//initialize button variables
	int button = 1;				
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently
     d98:	1c 8a       	std	Y+20, r1	; 0x14
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
    
	while(1){						//Repeats the entire program indefinitely (runs maintenance or normal each time)

							//mx holds whether motor x should move: 0 = no, 1 = yes
	plateLoadMotor = 0;		//plate load motor
     d9a:	1b 82       	std	Y+3, r1	; 0x03
     d9c:	1a 82       	std	Y+2, r1	; 0x02
	fixtureMotor = 0;		//fixture motor
     d9e:	1d 82       	std	Y+5, r1	; 0x05
     da0:	1c 82       	std	Y+4, r1	; 0x04
	brush1Motor = 0;		//brush 1 motor
     da2:	1f 82       	std	Y+7, r1	; 0x07
     da4:	1e 82       	std	Y+6, r1	; 0x06
	brush2Motor = 0;		//brush 2 motor
     da6:	19 86       	std	Y+9, r1	; 0x09
     da8:	18 86       	std	Y+8, r1	; 0x08
	paperTowelMotor = 0; 	//paper towel roller motor
     daa:	1b 86       	std	Y+11, r1	; 0x0b
     dac:	1a 86       	std	Y+10, r1	; 0x0a
	//the ones with numbers correspond to run mode states, and Five refers to motor 5 (paper towel roller)
	counterRef = 0;
	counterRefFive = 0;
		
	//holds wait times for various actions in ms
	pWait = 100;
     dae:	84 e6       	ldi	r24, 0x64	; 100
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	90 93 8e 03 	sts	0x038E, r25
     db6:	80 93 8d 03 	sts	0x038D, r24
	mWait = 100;
     dba:	90 93 90 03 	sts	0x0390, r25
     dbe:	80 93 8f 03 	sts	0x038F, r24
	kWait = 100;
     dc2:	90 93 92 03 	sts	0x0392, r25
     dc6:	80 93 91 03 	sts	0x0391, r24

	//hold the length of the high and high-low periods for the various motors - this controls their speed
	highLength1 = 1;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	90 93 94 03 	sts	0x0394, r25
     dd2:	80 93 93 03 	sts	0x0393, r24
	highLength2 = 1;
     dd6:	90 93 96 03 	sts	0x0396, r25
     dda:	80 93 95 03 	sts	0x0395, r24
	highLength3 = 1;
     dde:	90 93 98 03 	sts	0x0398, r25
     de2:	80 93 97 03 	sts	0x0397, r24
	highLength4 = 1;
     de6:	90 93 9a 03 	sts	0x039A, r25
     dea:	80 93 99 03 	sts	0x0399, r24
	highLength5 = 1;
     dee:	90 93 9c 03 	sts	0x039C, r25
     df2:	80 93 9b 03 	sts	0x039B, r24
	totalStepLength1 = 2;
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	90 93 9e 03 	sts	0x039E, r25
     dfe:	80 93 9d 03 	sts	0x039D, r24
	totalStepLength2 = 2;
     e02:	90 93 a0 03 	sts	0x03A0, r25
     e06:	80 93 9f 03 	sts	0x039F, r24
	totalStepLength3 = 2;
     e0a:	90 93 a2 03 	sts	0x03A2, r25
     e0e:	80 93 a1 03 	sts	0x03A1, r24
	totalStepLength4 = 2;
     e12:	90 93 a4 03 	sts	0x03A4, r25
     e16:	80 93 a3 03 	sts	0x03A3, r24
	totalStepLength5 = 2;
     e1a:	90 93 a6 03 	sts	0x03A6, r25
     e1e:	80 93 a5 03 	sts	0x03A5, r24
	
	//hold whether or not statements have been printed yet (numbers refer to run mode states)
	print0 = true;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	89 83       	std	Y+1, r24	; 0x01
	print35 = true;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     e26:	1d 86       	std	Y+13, r1	; 0x0d
     e28:	1c 86       	std	Y+12, r1	; 0x0c
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     e2a:	10 92 c6 03 	sts	0x03C6, r1
	u_motorByte1.motorByte1 = 128;  // initialize motorByte1              **********1 or 128, depending on order**********
     e2e:	80 e8       	ldi	r24, 0x80	; 128
     e30:	80 93 c7 03 	sts	0x03C7, r24
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	80 93 c8 03 	sts	0x03C8, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
     e3a:	80 93 c9 03 	sts	0x03C9, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
     e3e:	10 92 ca 03 	sts	0x03CA, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
     e42:	10 92 cb 03 	sts	0x03CB, r1
	
	OrangutanLCD::clear();
     e46:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("DASCH CLEANER 2c");
     e4a:	8e e0       	ldi	r24, 0x0E	; 14
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
	OrangutanLCD::gotoXY(0,1);
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
	OrangutanLCD::print("REV: 31");
     e5a:	8f e1       	ldi	r24, 0x1F	; 31
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
// another C++ file.
inline unsigned long get_ms() { return OrangutanTime::ms(); }
inline unsigned long millis() { return OrangutanTime::ms(); }

inline void delay(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
inline void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
     e62:	80 ed       	ldi	r24, 0xD0	; 208
     e64:	97 e0       	ldi	r25, 0x07	; 7
     e66:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>
	delay_ms(2000);
	
	OrangutanLCD::clear();
     e6a:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("BEGIN ");
     e6e:	87 e2       	ldi	r24, 0x27	; 39
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
     e76:	88 ee       	ldi	r24, 0xE8	; 232
     e78:	93 e0       	ldi	r25, 0x03	; 3
     e7a:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>
	
	delay_ms(1000);

    i2c_init();                                // init I2C interface
     e7e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <_Z8i2c_initv>
	
    OrangutanLCD::print("INIT ");
     e82:	8e e2       	ldi	r24, 0x2E	; 46
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
     e8a:	80 e4       	ldi	r24, 0x40	; 64
     e8c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
     e90:	c8 2e       	mov	r12, r24
	i2c_stop();
     e92:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
     e96:	82 e4       	ldi	r24, 0x42	; 66
     e98:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
     e9c:	08 2f       	mov	r16, r24
	i2c_stop();
     e9e:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
     ea2:	84 e4       	ldi	r24, 0x44	; 68
     ea4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
     ea8:	e8 2e       	mov	r14, r24
	i2c_stop();
     eaa:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>
    
	OrangutanLCD::clear();
     eae:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("START ");
     eb2:	84 e3       	ldi	r24, 0x34	; 52
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
     eba:	10 e0       	ldi	r17, 0x00	; 0
     ebc:	dd 24       	eor	r13, r13
     ebe:	0c 29       	or	r16, r12
     ec0:	1d 29       	or	r17, r13
     ec2:	ff 24       	eor	r15, r15
     ec4:	0e 29       	or	r16, r14
     ec6:	1f 29       	or	r17, r15
     ec8:	01 2b       	or	r16, r17
     eca:	61 f0       	breq	.+24     	; 0xee4 <main+0x180>
        /* failed to issue start condition(s), possibly no device found */
        
		OrangutanLCD::print("I2C BAD ");
     ecc:	8b e3       	ldi	r24, 0x3B	; 59
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
		i2c_stop();
     ed4:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>
		OrangutanLCD::print("STOP ");
     ed8:	84 e4       	ldi	r24, 0x44	; 68
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
     ee0:	0c 94 a5 11 	jmp	0x234a	; 0x234a <main+0x15e6>
    }
	else {
		OrangutanLCD::print("I2C OK ");
     ee4:	8a e4       	ldi	r24, 0x4A	; 74
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
        /* issuing start conditions ok, devices accessible */
		OrangutanLCD::print("BINIT ");
     eec:	82 e5       	ldi	r24, 0x52	; 82
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
     ef4:	80 e4       	ldi	r24, 0x40	; 64
     ef6:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
		i2c_write(0x6);
     efa:	86 e0       	ldi	r24, 0x06	; 6
     efc:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_write(0x0);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_write(0x0);
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_stop();
     f0c:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>

		i2c_start(I2C1+I2C_WRITE);
     f10:	80 e4       	ldi	r24, 0x40	; 64
     f12:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
		i2c_write(0x2);
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
     f1c:	80 91 c6 03 	lds	r24, 0x03C6
     f20:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
     f24:	80 91 c7 03 	lds	r24, 0x03C7
     f28:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_stop();
     f2c:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>

		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
     f30:	82 e4       	ldi	r24, 0x42	; 66
     f32:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
		i2c_write(0x6);
     f36:	86 e0       	ldi	r24, 0x06	; 6
     f38:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_write(0x0);
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_write(0x0);
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_stop();
     f48:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>

		i2c_start(I2C2+I2C_WRITE);
     f4c:	82 e4       	ldi	r24, 0x42	; 66
     f4e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
		i2c_write(0x2);
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_write(u_outputByte0.outputByte0);
     f58:	80 91 c8 03 	lds	r24, 0x03C8
     f5c:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_write(u_outputByte1.outputByte1);
     f60:	80 91 c9 03 	lds	r24, 0x03C9
     f64:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_stop();
     f68:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>

		//Registers default to input, so I2C3 is fine already

		u_motorByte1.bits_in_motorByte1.enableAll = 0;	//Enables all motor drivers after startup
     f6c:	80 91 c7 03 	lds	r24, 0x03C7
     f70:	8f 77       	andi	r24, 0x7F	; 127
     f72:	80 93 c7 03 	sts	0x03C7, r24
		i2c_start(I2C1+I2C_WRITE);
     f76:	80 e4       	ldi	r24, 0x40	; 64
     f78:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
		i2c_write(0x2);
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
     f82:	80 91 c6 03 	lds	r24, 0x03C6
     f86:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
     f8a:	80 91 c7 03 	lds	r24, 0x03C7
     f8e:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_stop();
     f92:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>
     f96:	88 ee       	ldi	r24, 0xE8	; 232
     f98:	93 e0       	ldi	r25, 0x03	; 3
     f9a:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>


		delay_ms(1000);
		OrangutanLCD::clear();
     f9e:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("INPUT RUN/DEBUG");
     fa2:	89 e5       	ldi	r24, 0x59	; 89
     fa4:	91 e0       	ldi	r25, 0x01	; 1
     fa6:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
     faa:	ee 24       	eor	r14, r14
     fac:	ff 24       	eor	r15, r15
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     fae:	c7 01       	movw	r24, r14
     fb0:	be 01       	movw	r22, r28
     fb2:	64 5f       	subi	r22, 0xF4	; 244
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	0e 94 81 02 	call	0x502	; 0x502 <_Z15button_debounceiPi>
     fba:	18 2f       	mov	r17, r24
			counter ++;
     fbc:	08 94       	sec
     fbe:	e1 1c       	adc	r14, r1
     fc0:	f1 1c       	adc	r15, r1
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		OrangutanLCD::clear();
		OrangutanLCD::print("INPUT RUN/DEBUG");
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
     fca:	11 23       	and	r17, r17
     fcc:	81 f3       	breq	.-32     	; 0xfae <main+0x24a>
			counter ++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		OrangutanLCD::clear();
     fce:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>


		if(OrangutanDigital::isInputHigh(IO_D3))							//Tests if the switch is set to Maintenance Mode
     fd2:	83 e0       	ldi	r24, 0x03	; 3
     fd4:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
     fd8:	88 23       	and	r24, r24
     fda:	09 f4       	brne	.+2      	; 0xfde <main+0x27a>
     fdc:	eb c3       	rjmp	.+2006   	; 0x17b4 <main+0xa50>
		{
			OrangutanLCD::print("DEBUG");
     fde:	89 e6       	ldi	r24, 0x69	; 105
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
     fe6:	88 ee       	ldi	r24, 0xE8	; 232
     fe8:	93 e0       	ldi	r25, 0x03	; 3
     fea:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>
			
			//initialize
			bool print = true;
			int submode = -1;

			OrangutanLCD::clear();
     fee:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
			OrangutanLCD::print("INPUT MODE");
     ff2:	8f e6       	ldi	r24, 0x6F	; 111
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
     ffa:	ee 24       	eor	r14, r14
     ffc:	ff 24       	eor	r15, r15
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     ffe:	c7 01       	movw	r24, r14
    1000:	be 01       	movw	r22, r28
    1002:	64 5f       	subi	r22, 0xF4	; 244
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	0e 94 81 02 	call	0x502	; 0x502 <_Z15button_debounceiPi>
    100a:	18 2f       	mov	r17, r24
				counter++;
    100c:	08 94       	sec
    100e:	e1 1c       	adc	r14, r1
    1010:	f1 1c       	adc	r15, r1
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>

			OrangutanLCD::clear();
			OrangutanLCD::print("INPUT MODE");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
    101a:	11 23       	and	r17, r17
    101c:	81 f3       	breq	.-32     	; 0xffe <main+0x29a>
				counter++;
				delay_ms(1);
			}
			buttonTriggered = false;
			counter = 0;
			OrangutanLCD::clear();
    101e:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
    1022:	66 24       	eor	r6, r6
    1024:	77 24       	eor	r7, r7
    1026:	44 24       	eor	r4, r4
    1028:	55 24       	eor	r5, r5
    102a:	22 24       	eor	r2, r2
    102c:	33 24       	eor	r3, r3
    102e:	99 24       	eor	r9, r9
    1030:	93 94       	inc	r9
    1032:	2f ef       	ldi	r18, 0xFF	; 255
    1034:	3f ef       	ldi	r19, 0xFF	; 255
    1036:	3b 8b       	std	Y+19, r19	; 0x13
    1038:	2a 8b       	std	Y+18, r18	; 0x12
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    103a:	84 e4       	ldi	r24, 0x44	; 68
    103c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1046:	85 e4       	ldi	r24, 0x45	; 69
    1048:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    104c:	0e 94 42 12 	call	0x2484	; 0x2484 <_Z11i2c_readAckv>
    1050:	80 93 ca 03 	sts	0x03CA, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1054:	0e 94 4c 12 	call	0x2498	; 0x2498 <_Z11i2c_readNakv>
    1058:	80 93 cb 03 	sts	0x03CB, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    105c:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1060:	c2 01       	movw	r24, r4
    1062:	be 01       	movw	r22, r28
    1064:	64 5f       	subi	r22, 0xF4	; 244
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	0e 94 81 02 	call	0x502	; 0x502 <_Z15button_debounceiPi>
    106c:	18 2f       	mov	r17, r24
							Output 			--     starts testing each output individually and ends after testing all outputs
							Motor			--     starts testing each motor individually and ends after testing all motors
							Multi motor		--     starts testing each the fixture motor with each of the brush motors

				*/
				if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != INPUT){
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    1074:	88 23       	and	r24, r24
    1076:	d9 f4       	brne	.+54     	; 0x10ae <main+0x34a>
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    107e:	88 23       	and	r24, r24
    1080:	b1 f4       	brne	.+44     	; 0x10ae <main+0x34a>
    1082:	6a 89       	ldd	r22, Y+18	; 0x12
    1084:	7b 89       	ldd	r23, Y+19	; 0x13
    1086:	67 2b       	or	r22, r23
    1088:	91 f0       	breq	.+36     	; 0x10ae <main+0x34a>
					state = S0;
					submode = INPUT;
					OrangutanLCD::clear();
    108a:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
    108e:	8a e7       	ldi	r24, 0x7A	; 122
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	61 e0       	ldi	r22, 0x01	; 1
    109a:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
    109e:	66 24       	eor	r6, r6
    10a0:	77 24       	eor	r7, r7
    10a2:	71 e0       	ldi	r23, 0x01	; 1
    10a4:	7c 8b       	std	Y+20, r23	; 0x14
    10a6:	99 24       	eor	r9, r9
    10a8:	93 94       	inc	r9
    10aa:	1b 8a       	std	Y+19, r1	; 0x13
    10ac:	1a 8a       	std	Y+18, r1	; 0x12
					print = true;
					switched = true;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != OUTPUT){
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    10b4:	88 23       	and	r24, r24
    10b6:	f1 f0       	breq	.+60     	; 0x10f4 <main+0x390>
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    10be:	88 23       	and	r24, r24
    10c0:	c9 f4       	brne	.+50     	; 0x10f4 <main+0x390>
    10c2:	8a 89       	ldd	r24, Y+18	; 0x12
    10c4:	9b 89       	ldd	r25, Y+19	; 0x13
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	a9 f0       	breq	.+42     	; 0x10f4 <main+0x390>
					state = O0_ON;
					submode = OUTPUT;
					OrangutanLCD::clear();
    10ca:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("OUTPUTS");
    10ce:	82 e8       	ldi	r24, 0x82	; 130
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	61 e0       	ldi	r22, 0x01	; 1
    10da:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
    10de:	68 e0       	ldi	r22, 0x08	; 8
    10e0:	66 2e       	mov	r6, r22
    10e2:	71 2c       	mov	r7, r1
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	9c 8b       	std	Y+20, r25	; 0x14
    10e8:	99 24       	eor	r9, r9
    10ea:	93 94       	inc	r9
    10ec:	21 e0       	ldi	r18, 0x01	; 1
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	3b 8b       	std	Y+19, r19	; 0x13
    10f2:	2a 8b       	std	Y+18, r18	; 0x12
					print = true;
					switched = true;
				}
				if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != MOTOR){
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    10fa:	88 23       	and	r24, r24
    10fc:	21 f5       	brne	.+72     	; 0x1146 <main+0x3e2>
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    1104:	88 23       	and	r24, r24
    1106:	f9 f0       	breq	.+62     	; 0x1146 <main+0x3e2>
    1108:	6a 89       	ldd	r22, Y+18	; 0x12
    110a:	7b 89       	ldd	r23, Y+19	; 0x13
    110c:	62 30       	cpi	r22, 0x02	; 2
    110e:	71 05       	cpc	r23, r1
    1110:	d1 f0       	breq	.+52     	; 0x1146 <main+0x3e2>
					state = M1_F;
					submode = MOTOR;
					OrangutanLCD::clear();
    1112:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MOTORS ");
    1116:	8a e8       	ldi	r24, 0x8A	; 138
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
					print = true;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1126:	80 91 c6 03 	lds	r24, 0x03C6
    112a:	84 60       	ori	r24, 0x04	; 4
    112c:	80 93 c6 03 	sts	0x03C6, r24
    1130:	50 e2       	ldi	r21, 0x20	; 32
    1132:	65 2e       	mov	r6, r21
    1134:	71 2c       	mov	r7, r1
    1136:	71 e0       	ldi	r23, 0x01	; 1
    1138:	7c 8b       	std	Y+20, r23	; 0x14
    113a:	99 24       	eor	r9, r9
    113c:	93 94       	inc	r9
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	9b 8b       	std	Y+19, r25	; 0x13
    1144:	8a 8b       	std	Y+18, r24	; 0x12
					switched = true;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != MULTI){
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    114c:	88 23       	and	r24, r24
    114e:	11 f4       	brne	.+4      	; 0x1154 <main+0x3f0>
    1150:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <main+0x15f2>
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    115a:	88 23       	and	r24, r24
    115c:	11 f4       	brne	.+4      	; 0x1162 <main+0x3fe>
    115e:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <main+0x15f2>
    1162:	2a 89       	ldd	r18, Y+18	; 0x12
    1164:	3b 89       	ldd	r19, Y+19	; 0x13
    1166:	23 30       	cpi	r18, 0x03	; 3
    1168:	31 05       	cpc	r19, r1
    116a:	11 f4       	brne	.+4      	; 0x1170 <main+0x40c>
    116c:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <main+0x15f2>
					state = M2_AND_M3;
					submode = MULTI;
					OrangutanLCD::clear();
    1170:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MULTI MOTOR");
    1174:	82 e9       	ldi	r24, 0x92	; 146
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
					print = true;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1184:	80 91 c6 03 	lds	r24, 0x03C6
    1188:	80 62       	ori	r24, 0x20	; 32
    118a:	80 93 c6 03 	sts	0x03C6, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    118e:	80 91 c7 03 	lds	r24, 0x03C7
    1192:	81 60       	ori	r24, 0x01	; 1
    1194:	80 93 c7 03 	sts	0x03C7, r24
    1198:	4a e2       	ldi	r20, 0x2A	; 42
    119a:	64 2e       	mov	r6, r20
    119c:	71 2c       	mov	r7, r1
    119e:	99 24       	eor	r9, r9
    11a0:	93 94       	inc	r9
    11a2:	63 e0       	ldi	r22, 0x03	; 3
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	7b 8b       	std	Y+19, r23	; 0x13
    11a8:	6a 8b       	std	Y+18, r22	; 0x12
					switched = true;
				}
				if(switched){
					plateLoadMotor = 0;
    11aa:	1b 82       	std	Y+3, r1	; 0x03
    11ac:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    11ae:	1d 82       	std	Y+5, r1	; 0x05
    11b0:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    11b2:	1f 82       	std	Y+7, r1	; 0x07
    11b4:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    11b6:	19 86       	std	Y+9, r1	; 0x09
    11b8:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    11ba:	1b 86       	std	Y+11, r1	; 0x0b
    11bc:	1a 86       	std	Y+10, r1	; 0x0a
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	80 93 c8 03 	sts	0x03C8, r24
					u_outputByte1.outputByte1 = 255;  // reset outputByte1
    11c4:	80 93 c9 03 	sts	0x03C9, r24
					if(submode != MOTOR && submode != MULTI){
    11c8:	8a 89       	ldd	r24, Y+18	; 0x12
    11ca:	9b 89       	ldd	r25, Y+19	; 0x13
    11cc:	02 97       	sbiw	r24, 0x02	; 2
    11ce:	02 97       	sbiw	r24, 0x02	; 2
    11d0:	20 f0       	brcs	.+8      	; 0x11da <main+0x476>
						u_motorByte0.motorByte0 = 0;	  // reset motorByte0
    11d2:	10 92 c6 03 	sts	0x03C6, r1
						u_motorByte1.motorByte1 = 0;	  // reset motorByte1
    11d6:	10 92 c7 03 	sts	0x03C7, r1
    11da:	1c 8a       	std	Y+20, r1	; 0x14
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
    11dc:	11 23       	and	r17, r17
    11de:	09 f4       	brne	.+2      	; 0x11e2 <main+0x47e>
    11e0:	c5 c0       	rjmp	.+394    	; 0x136c <main+0x608>
					if(state <= S7){				//if it's doing the sensors
    11e2:	78 e0       	ldi	r23, 0x08	; 8
    11e4:	67 16       	cp	r6, r23
    11e6:	71 04       	cpc	r7, r1
    11e8:	6c f4       	brge	.+26     	; 0x1204 <main+0x4a0>
						OrangutanLCD::gotoXY(0,1);
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	61 e0       	ldi	r22, 0x01	; 1
    11ee:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
						buttonTriggered = false;
						state ++;
    11f2:	08 94       	sec
    11f4:	61 1c       	adc	r6, r1
    11f6:	71 1c       	adc	r7, r1
						counterRef = counter;
						print = true;
						if(state == S7 + 1){		//accounts for end of maintenance mode after sensors
    11f8:	88 e0       	ldi	r24, 0x08	; 8
    11fa:	68 16       	cp	r6, r24
    11fc:	71 04       	cpc	r7, r1
    11fe:	09 f0       	breq	.+2      	; 0x1202 <main+0x49e>
    1200:	b2 c0       	rjmp	.+356    	; 0x1366 <main+0x602>
    1202:	1b c0       	rjmp	.+54     	; 0x123a <main+0x4d6>
							OrangutanLCD::clear();
							state = DONEM;
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
    1204:	90 e2       	ldi	r25, 0x20	; 32
    1206:	69 16       	cp	r6, r25
    1208:	71 04       	cpc	r7, r1
    120a:	dc f4       	brge	.+54     	; 0x1242 <main+0x4de>
						if(state % 2 == 0){			//current state is an 'on' state
    120c:	60 fc       	sbrc	r6, 0
    120e:	09 c0       	rjmp	.+18     	; 0x1222 <main+0x4be>
							OrangutanLCD::gotoXY(13,1);
    1210:	8d e0       	ldi	r24, 0x0D	; 13
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("OFF");
    1218:	8e e9       	ldi	r24, 0x9E	; 158
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
    1220:	04 c0       	rjmp	.+8      	; 0x122a <main+0x4c6>
						}
						else{						//current state is an 'off' state
							OrangutanLCD::gotoXY(0,1);
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
						}
						buttonTriggered = false;
						state ++;
    122a:	08 94       	sec
    122c:	61 1c       	adc	r6, r1
    122e:	71 1c       	adc	r7, r1
						counterRef = counter;
						print = true;
						if(state == O11_OFF + 1){	//accounts for end of maintenance mode after outputs
    1230:	20 e2       	ldi	r18, 0x20	; 32
    1232:	62 16       	cp	r6, r18
    1234:	71 04       	cpc	r7, r1
    1236:	09 f0       	breq	.+2      	; 0x123a <main+0x4d6>
    1238:	96 c0       	rjmp	.+300    	; 0x1366 <main+0x602>
							OrangutanLCD::clear();
    123a:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
    123e:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <main+0x1624>
    1242:	83 01       	movw	r16, r6
    1244:	0f 5f       	subi	r16, 0xFF	; 255
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
							state = DONEM;
						}
					}
					else if(state <= M5_B){							//if it's doing the motors
    1248:	3a e2       	ldi	r19, 0x2A	; 42
    124a:	63 16       	cp	r6, r19
    124c:	71 04       	cpc	r7, r1
    124e:	0c f0       	brlt	.+2      	; 0x1252 <main+0x4ee>
    1250:	5f c0       	rjmp	.+190    	; 0x1310 <main+0x5ac>
						buttonTriggered = false;
						state ++;
						counterRef = counter;
						print = true;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
    1252:	60 fc       	sbrc	r6, 0
    1254:	09 c0       	rjmp	.+18     	; 0x1268 <main+0x504>
							OrangutanLCD::gotoXY(11,1);
    1256:	8b e0       	ldi	r24, 0x0B	; 11
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("BACK ");
    125e:	82 ea       	ldi	r24, 0xA2	; 162
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
    1266:	13 c0       	rjmp	.+38     	; 0x128e <main+0x52a>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
    1268:	06 32       	cpi	r16, 0x26	; 38
    126a:	11 05       	cpc	r17, r1
    126c:	71 f1       	breq	.+92     	; 0x12ca <main+0x566>
    126e:	07 32       	cpi	r16, 0x27	; 39
    1270:	11 05       	cpc	r17, r1
    1272:	3c f4       	brge	.+14     	; 0x1282 <main+0x51e>
    1274:	02 32       	cpi	r16, 0x22	; 34
    1276:	11 05       	cpc	r17, r1
    1278:	61 f0       	breq	.+24     	; 0x1292 <main+0x52e>
    127a:	04 32       	cpi	r16, 0x24	; 36
    127c:	11 05       	cpc	r17, r1
    127e:	39 f4       	brne	.+14     	; 0x128e <main+0x52a>
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <main+0x546>
    1282:	08 32       	cpi	r16, 0x28	; 40
    1284:	11 05       	cpc	r17, r1
    1286:	69 f1       	breq	.+90     	; 0x12e2 <main+0x57e>
    1288:	0a 32       	cpi	r16, 0x2A	; 42
    128a:	11 05       	cpc	r17, r1
    128c:	b1 f1       	breq	.+108    	; 0x12fa <main+0x596>
    128e:	38 01       	movw	r6, r16
    1290:	6a c0       	rjmp	.+212    	; 0x1366 <main+0x602>
								case M1_B + 1:
									OrangutanLCD::gotoXY(0,1);
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    129a:	80 91 c6 03 	lds	r24, 0x03C6
    129e:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    12a0:	80 62       	ori	r24, 0x20	; 32
    12a2:	80 93 c6 03 	sts	0x03C6, r24
    12a6:	12 01       	movw	r2, r4
    12a8:	ca c1       	rjmp	.+916    	; 0x163e <main+0x8da>
									break;
								case M2_B + 1:
									OrangutanLCD::gotoXY(0,1);
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	61 e0       	ldi	r22, 0x01	; 1
    12ae:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    12b2:	80 91 c6 03 	lds	r24, 0x03C6
    12b6:	8f 7d       	andi	r24, 0xDF	; 223
    12b8:	80 93 c6 03 	sts	0x03C6, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    12bc:	80 91 c7 03 	lds	r24, 0x03C7
    12c0:	81 60       	ori	r24, 0x01	; 1
    12c2:	80 93 c7 03 	sts	0x03C7, r24
    12c6:	12 01       	movw	r2, r4
    12c8:	da c1       	rjmp	.+948    	; 0x167e <main+0x91a>
									break;
								case M3_B + 1:
									OrangutanLCD::gotoXY(0,1);
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    12d2:	80 91 c7 03 	lds	r24, 0x03C7
    12d6:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    12d8:	88 60       	ori	r24, 0x08	; 8
    12da:	80 93 c7 03 	sts	0x03C7, r24
    12de:	12 01       	movw	r2, r4
    12e0:	ee c1       	rjmp	.+988    	; 0x16be <main+0x95a>
									break;
								case M4_B + 1:
									OrangutanLCD::gotoXY(0,1);
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	61 e0       	ldi	r22, 0x01	; 1
    12e6:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    12ea:	80 91 c7 03 	lds	r24, 0x03C7
    12ee:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    12f0:	80 64       	ori	r24, 0x40	; 64
    12f2:	80 93 c7 03 	sts	0x03C7, r24
    12f6:	12 01       	movw	r2, r4
    12f8:	02 c2       	rjmp	.+1028   	; 0x16fe <main+0x99a>
									break;
								case M5_B + 1:
									OrangutanLCD::clear();
    12fa:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    12fe:	80 91 c7 03 	lds	r24, 0x03C7
    1302:	8f 7b       	andi	r24, 0xBF	; 191
    1304:	80 93 c7 03 	sts	0x03C7, r24
									state = DONEM;
									paperTowelMotor = 0;
    1308:	1b 86       	std	Y+11, r1	; 0x0b
    130a:	1a 86       	std	Y+10, r1	; 0x0a
    130c:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <main+0x1624>
							}
						}
					}
					else{
						buttonTriggered = false;
						state ++;
    1310:	38 01       	movw	r6, r16
						counterRef = counter;
						print = true;
						switch(state){
    1312:	0b 32       	cpi	r16, 0x2B	; 43
    1314:	11 05       	cpc	r17, r1
    1316:	21 f0       	breq	.+8      	; 0x1320 <main+0x5bc>
    1318:	0c 32       	cpi	r16, 0x2C	; 44
    131a:	11 05       	cpc	r17, r1
    131c:	21 f5       	brne	.+72     	; 0x1366 <main+0x602>
    131e:	11 c0       	rjmp	.+34     	; 0x1342 <main+0x5de>
							case M2_AND_M3 + 1:
								OrangutanLCD::gotoXY(0,1);
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	61 e0       	ldi	r22, 0x01	; 1
    1324:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
								u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1328:	90 91 c7 03 	lds	r25, 0x03C7
    132c:	9e 7f       	andi	r25, 0xFE	; 254
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    132e:	80 91 c6 03 	lds	r24, 0x03C6
    1332:	80 62       	ori	r24, 0x20	; 32
    1334:	80 93 c6 03 	sts	0x03C6, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    1338:	98 60       	ori	r25, 0x08	; 8
    133a:	90 93 c7 03 	sts	0x03C7, r25
    133e:	12 01       	movw	r2, r4
    1340:	0c c2       	rjmp	.+1048   	; 0x175a <main+0x9f6>
								break;
							case M2_AND_M4 + 1:
								OrangutanLCD::clear();
    1342:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1346:	80 91 c6 03 	lds	r24, 0x03C6
    134a:	8f 7d       	andi	r24, 0xDF	; 223
    134c:	80 93 c6 03 	sts	0x03C6, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    1350:	80 91 c7 03 	lds	r24, 0x03C7
    1354:	87 7f       	andi	r24, 0xF7	; 247
    1356:	80 93 c7 03 	sts	0x03C7, r24
								state = DONEM;
								fixtureMotor = 0;
    135a:	1d 82       	std	Y+5, r1	; 0x05
    135c:	1c 82       	std	Y+4, r1	; 0x04
								brush2Motor = 0;
    135e:	19 86       	std	Y+9, r1	; 0x09
    1360:	18 86       	std	Y+8, r1	; 0x08
    1362:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <main+0x1624>
    1366:	12 01       	movw	r2, r4
    1368:	99 24       	eor	r9, r9
    136a:	93 94       	inc	r9
						}
					}
				}

				//state actions
				switch (state) {
    136c:	f3 01       	movw	r30, r6
    136e:	ec 32       	cpi	r30, 0x2C	; 44
    1370:	f1 05       	cpc	r31, r1
    1372:	08 f0       	brcs	.+2      	; 0x1376 <main+0x612>
    1374:	02 c2       	rjmp	.+1028   	; 0x177a <main+0xa16>
    1376:	ea 5b       	subi	r30, 0xBA	; 186
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	ee 0f       	add	r30, r30
    137c:	ff 1f       	adc	r31, r31
    137e:	05 90       	lpm	r0, Z+
    1380:	f4 91       	lpm	r31, Z+
    1382:	e0 2d       	mov	r30, r0
    1384:	09 94       	ijmp
					case S0:
						if(print){
    1386:	99 20       	and	r9, r9
    1388:	21 f0       	breq	.+8      	; 0x1392 <main+0x62e>
							OrangutanLCD::print("SENSOR 0");
    138a:	88 ea       	ldi	r24, 0xA8	; 168
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						OrangutanLCD::gotoXY(15,1);
    1392:	8f e0       	ldi	r24, 0x0F	; 15
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
	// position and will not span lines.
	static void print(unsigned long value);
	static void print(long value);
	static inline void print(unsigned int value)
	{
		print((unsigned long)value);
    139a:	60 91 ca 03 	lds	r22, 0x03CA
    139e:	0d c0       	rjmp	.+26     	; 0x13ba <main+0x656>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.plate);
						break;
					case S1:
						if(print){
    13a0:	99 20       	and	r9, r9
    13a2:	21 f0       	breq	.+8      	; 0x13ac <main+0x648>
							OrangutanLCD::print("SENSOR 1");
    13a4:	81 eb       	ldi	r24, 0xB1	; 177
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						OrangutanLCD::gotoXY(15,1);
    13ac:	8f e0       	ldi	r24, 0x0F	; 15
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
    13b4:	60 91 ca 03 	lds	r22, 0x03CA
    13b8:	66 95       	lsr	r22
    13ba:	61 70       	andi	r22, 0x01	; 1
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN12OrangutanLCD5printEm>
    13c6:	c5 c1       	rjmp	.+906    	; 0x1752 <main+0x9ee>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureLift);
						break;
					case S2:
						if(print){
    13c8:	99 20       	and	r9, r9
    13ca:	21 f0       	breq	.+8      	; 0x13d4 <main+0x670>
							OrangutanLCD::print("SENSOR 2");
    13cc:	8a eb       	ldi	r24, 0xBA	; 186
    13ce:	91 e0       	ldi	r25, 0x01	; 1
    13d0:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						OrangutanLCD::gotoXY(15,1);
    13d4:	8f e0       	ldi	r24, 0x0F	; 15
    13d6:	61 e0       	ldi	r22, 0x01	; 1
    13d8:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
    13dc:	60 91 ca 03 	lds	r22, 0x03CA
    13e0:	66 95       	lsr	r22
    13e2:	66 95       	lsr	r22
    13e4:	ea cf       	rjmp	.-44     	; 0x13ba <main+0x656>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureHome);
						break;
					case S3:
						if(print){
    13e6:	99 20       	and	r9, r9
    13e8:	21 f0       	breq	.+8      	; 0x13f2 <main+0x68e>
							OrangutanLCD::print("SENSOR 3");
    13ea:	83 ec       	ldi	r24, 0xC3	; 195
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						OrangutanLCD::gotoXY(15,1);
    13f2:	8f e0       	ldi	r24, 0x0F	; 15
    13f4:	61 e0       	ldi	r22, 0x01	; 1
    13f6:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
    13fa:	60 91 ca 03 	lds	r22, 0x03CA
    13fe:	66 95       	lsr	r22
    1400:	66 95       	lsr	r22
    1402:	66 95       	lsr	r22
    1404:	da cf       	rjmp	.-76     	; 0x13ba <main+0x656>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixturePlate);
						break;
					case S4:
						if(print){
    1406:	99 20       	and	r9, r9
    1408:	21 f0       	breq	.+8      	; 0x1412 <main+0x6ae>
							OrangutanLCD::print("SENSOR 4");
    140a:	8c ec       	ldi	r24, 0xCC	; 204
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						OrangutanLCD::gotoXY(15,1);
    1412:	8f e0       	ldi	r24, 0x0F	; 15
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
    141a:	60 91 ca 03 	lds	r22, 0x03CA
    141e:	62 95       	swap	r22
    1420:	6f 70       	andi	r22, 0x0F	; 15
    1422:	cb cf       	rjmp	.-106    	; 0x13ba <main+0x656>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
						break;
					case S5:
						if(print){
    1424:	99 20       	and	r9, r9
    1426:	21 f0       	breq	.+8      	; 0x1430 <main+0x6cc>
							OrangutanLCD::print("SENSOR 5");
    1428:	85 ed       	ldi	r24, 0xD5	; 213
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						OrangutanLCD::gotoXY(15,1);
    1430:	8f e0       	ldi	r24, 0x0F	; 15
    1432:	61 e0       	ldi	r22, 0x01	; 1
    1434:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
    1438:	60 91 ca 03 	lds	r22, 0x03CA
    143c:	62 95       	swap	r22
    143e:	66 95       	lsr	r22
    1440:	67 70       	andi	r22, 0x07	; 7
    1442:	bb cf       	rjmp	.-138    	; 0x13ba <main+0x656>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
						break;
					case S6:
						if(print){
    1444:	99 20       	and	r9, r9
    1446:	21 f0       	breq	.+8      	; 0x1450 <main+0x6ec>
							OrangutanLCD::print("SENSOR 6");
    1448:	8e ed       	ldi	r24, 0xDE	; 222
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						OrangutanLCD::gotoXY(15,1);
    1450:	8f e0       	ldi	r24, 0x0F	; 15
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
    1458:	60 91 ca 03 	lds	r22, 0x03CA
    145c:	62 95       	swap	r22
    145e:	66 95       	lsr	r22
    1460:	66 95       	lsr	r22
    1462:	63 70       	andi	r22, 0x03	; 3
    1464:	aa cf       	rjmp	.-172    	; 0x13ba <main+0x656>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry1);
						break;
					case S7:
						if(print){
    1466:	99 20       	and	r9, r9
    1468:	21 f0       	breq	.+8      	; 0x1472 <main+0x70e>
							OrangutanLCD::print("SENSOR 7");
    146a:	87 ee       	ldi	r24, 0xE7	; 231
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						OrangutanLCD::gotoXY(15,1);
    1472:	8f e0       	ldi	r24, 0x0F	; 15
    1474:	61 e0       	ldi	r22, 0x01	; 1
    1476:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
    147a:	60 91 ca 03 	lds	r22, 0x03CA
    147e:	66 1f       	adc	r22, r22
    1480:	66 27       	eor	r22, r22
    1482:	66 1f       	adc	r22, r22
    1484:	9b cf       	rjmp	.-202    	; 0x13bc <main+0x658>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry2);
						break;
					case O0_ON:
						if(print){
    1486:	99 20       	and	r9, r9
    1488:	21 f0       	breq	.+8      	; 0x1492 <main+0x72e>
							OrangutanLCD::print("AC POWER     ON ");
    148a:	80 ef       	ldi	r24, 0xF0	; 240
    148c:	91 e0       	ldi	r25, 0x01	; 1
    148e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1492:	80 91 c8 03 	lds	r24, 0x03C8
    1496:	8e 7f       	andi	r24, 0xFE	; 254
    1498:	7f c0       	rjmp	.+254    	; 0x1598 <main+0x834>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
    149a:	80 91 c8 03 	lds	r24, 0x03C8
    149e:	81 60       	ori	r24, 0x01	; 1
    14a0:	0d c0       	rjmp	.+26     	; 0x14bc <main+0x758>
						break;
					case O1_ON:
						if(print){
    14a2:	99 20       	and	r9, r9
    14a4:	21 f0       	breq	.+8      	; 0x14ae <main+0x74a>
							OrangutanLCD::print("BLOWER       ON  ");
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	92 e0       	ldi	r25, 0x02	; 2
    14aa:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    14ae:	80 91 c8 03 	lds	r24, 0x03C8
    14b2:	8d 7f       	andi	r24, 0xFD	; 253
    14b4:	71 c0       	rjmp	.+226    	; 0x1598 <main+0x834>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    14b6:	80 91 c8 03 	lds	r24, 0x03C8
    14ba:	82 60       	ori	r24, 0x02	; 2
    14bc:	80 93 c8 03 	sts	0x03C8, r24
    14c0:	5c c1       	rjmp	.+696    	; 0x177a <main+0xa16>
						break;
					case O2_ON:
						if(print){
    14c2:	99 20       	and	r9, r9
    14c4:	21 f0       	breq	.+8      	; 0x14ce <main+0x76a>
							OrangutanLCD::print("PLATE STOP   ON ");
    14c6:	83 e1       	ldi	r24, 0x13	; 19
    14c8:	92 e0       	ldi	r25, 0x02	; 2
    14ca:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
    14ce:	80 91 c8 03 	lds	r24, 0x03C8
    14d2:	8b 7f       	andi	r24, 0xFB	; 251
    14d4:	61 c0       	rjmp	.+194    	; 0x1598 <main+0x834>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
    14d6:	80 91 c8 03 	lds	r24, 0x03C8
    14da:	84 60       	ori	r24, 0x04	; 4
    14dc:	ef cf       	rjmp	.-34     	; 0x14bc <main+0x758>
						break;
					case O3_ON:
						if(print){
    14de:	99 20       	and	r9, r9
    14e0:	21 f0       	breq	.+8      	; 0x14ea <main+0x786>
							OrangutanLCD::print("PLATE RAISE  ON ");
    14e2:	84 e2       	ldi	r24, 0x24	; 36
    14e4:	92 e0       	ldi	r25, 0x02	; 2
    14e6:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    14ea:	80 91 c8 03 	lds	r24, 0x03C8
    14ee:	87 7f       	andi	r24, 0xF7	; 247
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    14f0:	80 61       	ori	r24, 0x10	; 16
    14f2:	52 c0       	rjmp	.+164    	; 0x1598 <main+0x834>
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    14f4:	80 91 c8 03 	lds	r24, 0x03C8
    14f8:	88 60       	ori	r24, 0x08	; 8
    14fa:	e0 cf       	rjmp	.-64     	; 0x14bc <main+0x758>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(print){
    14fc:	99 20       	and	r9, r9
    14fe:	21 f0       	breq	.+8      	; 0x1508 <main+0x7a4>
							OrangutanLCD::print("PLATE LOWER  ON ");
    1500:	85 e3       	ldi	r24, 0x35	; 53
    1502:	92 e0       	ldi	r25, 0x02	; 2
    1504:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1508:	80 91 c8 03 	lds	r24, 0x03C8
    150c:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    150e:	8f 7e       	andi	r24, 0xEF	; 239
    1510:	43 c0       	rjmp	.+134    	; 0x1598 <main+0x834>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1512:	80 91 c8 03 	lds	r24, 0x03C8
    1516:	80 61       	ori	r24, 0x10	; 16
    1518:	d1 cf       	rjmp	.-94     	; 0x14bc <main+0x758>
						break;
					case O5_ON:
						if(print){
    151a:	99 20       	and	r9, r9
    151c:	21 f0       	breq	.+8      	; 0x1526 <main+0x7c2>
							OrangutanLCD::print("BRUSH1 RAISE ON ");
    151e:	86 e4       	ldi	r24, 0x46	; 70
    1520:	92 e0       	ldi	r25, 0x02	; 2
    1522:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    1526:	80 91 c8 03 	lds	r24, 0x03C8
    152a:	8f 7d       	andi	r24, 0xDF	; 223
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    152c:	80 64       	ori	r24, 0x40	; 64
    152e:	34 c0       	rjmp	.+104    	; 0x1598 <main+0x834>
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1530:	80 91 c8 03 	lds	r24, 0x03C8
    1534:	80 62       	ori	r24, 0x20	; 32
    1536:	c2 cf       	rjmp	.-124    	; 0x14bc <main+0x758>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(print){
    1538:	99 20       	and	r9, r9
    153a:	21 f0       	breq	.+8      	; 0x1544 <main+0x7e0>
							OrangutanLCD::print("BRUSH1 LOWER ON ");
    153c:	87 e5       	ldi	r24, 0x57	; 87
    153e:	92 e0       	ldi	r25, 0x02	; 2
    1540:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1544:	80 91 c8 03 	lds	r24, 0x03C8
    1548:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    154a:	80 62       	ori	r24, 0x20	; 32
    154c:	25 c0       	rjmp	.+74     	; 0x1598 <main+0x834>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    154e:	80 91 c8 03 	lds	r24, 0x03C8
    1552:	80 64       	ori	r24, 0x40	; 64
    1554:	b3 cf       	rjmp	.-154    	; 0x14bc <main+0x758>
						break;
					case O7_ON:
						if(print){
    1556:	99 20       	and	r9, r9
    1558:	21 f0       	breq	.+8      	; 0x1562 <main+0x7fe>
							OrangutanLCD::print("BRUSH2 RAISE ON ");
    155a:	88 e6       	ldi	r24, 0x68	; 104
    155c:	92 e0       	ldi	r25, 0x02	; 2
    155e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1562:	80 91 c8 03 	lds	r24, 0x03C8
    1566:	8f 77       	andi	r24, 0x7F	; 127
    1568:	80 93 c8 03 	sts	0x03C8, r24
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    156c:	80 91 c9 03 	lds	r24, 0x03C9
    1570:	81 60       	ori	r24, 0x01	; 1
    1572:	40 c0       	rjmp	.+128    	; 0x15f4 <main+0x890>
						break;
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1574:	80 91 c8 03 	lds	r24, 0x03C8
    1578:	80 68       	ori	r24, 0x80	; 128
    157a:	a0 cf       	rjmp	.-192    	; 0x14bc <main+0x758>
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(print){
    157c:	99 20       	and	r9, r9
    157e:	21 f0       	breq	.+8      	; 0x1588 <main+0x824>
							OrangutanLCD::print("BRUSH2 LOWER ON ");
    1580:	89 e7       	ldi	r24, 0x79	; 121
    1582:	92 e0       	ldi	r25, 0x02	; 2
    1584:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1588:	80 91 c9 03 	lds	r24, 0x03C9
    158c:	8e 7f       	andi	r24, 0xFE	; 254
    158e:	80 93 c9 03 	sts	0x03C9, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1592:	80 91 c8 03 	lds	r24, 0x03C8
    1596:	80 68       	ori	r24, 0x80	; 128
    1598:	80 93 c8 03 	sts	0x03C8, r24
    159c:	da c0       	rjmp	.+436    	; 0x1752 <main+0x9ee>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    159e:	80 91 c9 03 	lds	r24, 0x03C9
    15a2:	81 60       	ori	r24, 0x01	; 1
    15a4:	2d c0       	rjmp	.+90     	; 0x1600 <main+0x89c>
						break;
					case O9_ON:
						if(print){
    15a6:	99 20       	and	r9, r9
    15a8:	21 f0       	breq	.+8      	; 0x15b2 <main+0x84e>
							OrangutanLCD::print("PAPER RAISE  ON ");
    15aa:	8a e8       	ldi	r24, 0x8A	; 138
    15ac:	92 e0       	ldi	r25, 0x02	; 2
    15ae:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    15b2:	80 91 c9 03 	lds	r24, 0x03C9
    15b6:	8d 7f       	andi	r24, 0xFD	; 253
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    15b8:	84 60       	ori	r24, 0x04	; 4
    15ba:	1c c0       	rjmp	.+56     	; 0x15f4 <main+0x890>
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    15bc:	80 91 c9 03 	lds	r24, 0x03C9
    15c0:	82 60       	ori	r24, 0x02	; 2
    15c2:	1e c0       	rjmp	.+60     	; 0x1600 <main+0x89c>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(print){
    15c4:	99 20       	and	r9, r9
    15c6:	21 f0       	breq	.+8      	; 0x15d0 <main+0x86c>
							OrangutanLCD::print("PAPER LOWER  ON ");
    15c8:	8b e9       	ldi	r24, 0x9B	; 155
    15ca:	92 e0       	ldi	r25, 0x02	; 2
    15cc:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
    15d0:	80 91 c9 03 	lds	r24, 0x03C9
    15d4:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    15d6:	82 60       	ori	r24, 0x02	; 2
    15d8:	0d c0       	rjmp	.+26     	; 0x15f4 <main+0x890>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    15da:	80 91 c9 03 	lds	r24, 0x03C9
    15de:	84 60       	ori	r24, 0x04	; 4
    15e0:	0f c0       	rjmp	.+30     	; 0x1600 <main+0x89c>
						break;
					case O11_ON:
						if(print){
    15e2:	99 20       	and	r9, r9
    15e4:	21 f0       	breq	.+8      	; 0x15ee <main+0x88a>
							OrangutanLCD::print("AIR KNIFE    ON ");
    15e6:	8c ea       	ldi	r24, 0xAC	; 172
    15e8:	92 e0       	ldi	r25, 0x02	; 2
    15ea:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
    15ee:	80 91 c9 03 	lds	r24, 0x03C9
    15f2:	87 7f       	andi	r24, 0xF7	; 247
    15f4:	80 93 c9 03 	sts	0x03C9, r24
    15f8:	ac c0       	rjmp	.+344    	; 0x1752 <main+0x9ee>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
    15fa:	80 91 c9 03 	lds	r24, 0x03C9
    15fe:	88 60       	ori	r24, 0x08	; 8
    1600:	80 93 c9 03 	sts	0x03C9, r24
    1604:	ba c0       	rjmp	.+372    	; 0x177a <main+0xa16>
						break;
					case M1_F:
						if(print){
    1606:	99 20       	and	r9, r9
    1608:	21 f0       	breq	.+8      	; 0x1612 <main+0x8ae>
							OrangutanLCD::print("LOADING    FRONT");
    160a:	8d eb       	ldi	r24, 0xBD	; 189
    160c:	92 e0       	ldi	r25, 0x02	; 2
    160e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1612:	80 91 c6 03 	lds	r24, 0x03C6
    1616:	8d 7f       	andi	r24, 0xFD	; 253
    1618:	80 93 c6 03 	sts	0x03C6, r24
						plateLoadMotor =  1;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9b 83       	std	Y+3, r25	; 0x03
    1622:	8a 83       	std	Y+2, r24	; 0x02
    1624:	96 c0       	rjmp	.+300    	; 0x1752 <main+0x9ee>
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
    1626:	80 91 c6 03 	lds	r24, 0x03C6
    162a:	82 60       	ori	r24, 0x02	; 2
    162c:	80 93 c6 03 	sts	0x03C6, r24
						plateLoadMotor =  1;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	9b 83       	std	Y+3, r25	; 0x03
    1636:	8a 83       	std	Y+2, r24	; 0x02
    1638:	a0 c0       	rjmp	.+320    	; 0x177a <main+0xa16>
						break;
					case M2_F:
						if(print){
    163a:	99 20       	and	r9, r9
    163c:	21 f0       	breq	.+8      	; 0x1646 <main+0x8e2>
							OrangutanLCD::print("DRIVE      FRONT");
    163e:	8e ec       	ldi	r24, 0xCE	; 206
    1640:	92 e0       	ldi	r25, 0x02	; 2
    1642:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1646:	80 91 c6 03 	lds	r24, 0x03C6
    164a:	8f 7e       	andi	r24, 0xEF	; 239
    164c:	80 93 c6 03 	sts	0x03C6, r24
						fixtureMotor =  1;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	9d 83       	std	Y+5, r25	; 0x05
    1656:	8c 83       	std	Y+4, r24	; 0x04
						plateLoadMotor = 0;
    1658:	1b 82       	std	Y+3, r1	; 0x03
    165a:	1a 82       	std	Y+2, r1	; 0x02
    165c:	99 24       	eor	r9, r9
    165e:	32 e2       	ldi	r19, 0x22	; 34
    1660:	63 2e       	mov	r6, r19
    1662:	71 2c       	mov	r7, r1
    1664:	8a c0       	rjmp	.+276    	; 0x177a <main+0xa16>
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
    1666:	80 91 c6 03 	lds	r24, 0x03C6
    166a:	80 61       	ori	r24, 0x10	; 16
    166c:	80 93 c6 03 	sts	0x03C6, r24
						fixtureMotor =  1;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	9d 83       	std	Y+5, r25	; 0x05
    1676:	8c 83       	std	Y+4, r24	; 0x04
    1678:	80 c0       	rjmp	.+256    	; 0x177a <main+0xa16>
						break;
					case M3_F:
						if(print){
    167a:	99 20       	and	r9, r9
    167c:	21 f0       	breq	.+8      	; 0x1686 <main+0x922>
							OrangutanLCD::print("BRUSH1     FRONT");
    167e:	8f ed       	ldi	r24, 0xDF	; 223
    1680:	92 e0       	ldi	r25, 0x02	; 2
    1682:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
    1686:	80 91 c6 03 	lds	r24, 0x03C6
    168a:	8f 77       	andi	r24, 0x7F	; 127
    168c:	80 93 c6 03 	sts	0x03C6, r24
						brush1Motor =  1;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	9f 83       	std	Y+7, r25	; 0x07
    1696:	8e 83       	std	Y+6, r24	; 0x06
						fixtureMotor = 0;
    1698:	1d 82       	std	Y+5, r1	; 0x05
    169a:	1c 82       	std	Y+4, r1	; 0x04
    169c:	99 24       	eor	r9, r9
    169e:	24 e2       	ldi	r18, 0x24	; 36
    16a0:	62 2e       	mov	r6, r18
    16a2:	71 2c       	mov	r7, r1
    16a4:	6a c0       	rjmp	.+212    	; 0x177a <main+0xa16>
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
    16a6:	80 91 c6 03 	lds	r24, 0x03C6
    16aa:	80 68       	ori	r24, 0x80	; 128
    16ac:	80 93 c6 03 	sts	0x03C6, r24
						brush1Motor =  1;
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9f 83       	std	Y+7, r25	; 0x07
    16b6:	8e 83       	std	Y+6, r24	; 0x06
    16b8:	60 c0       	rjmp	.+192    	; 0x177a <main+0xa16>
						break;
					case M4_F:
						if(print){
    16ba:	99 20       	and	r9, r9
    16bc:	21 f0       	breq	.+8      	; 0x16c6 <main+0x962>
							OrangutanLCD::print("BRUSH2     FRONT");
    16be:	80 ef       	ldi	r24, 0xF0	; 240
    16c0:	92 e0       	ldi	r25, 0x02	; 2
    16c2:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
    16c6:	80 91 c7 03 	lds	r24, 0x03C7
    16ca:	8b 7f       	andi	r24, 0xFB	; 251
    16cc:	80 93 c7 03 	sts	0x03C7, r24
						brush2Motor =  1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	99 87       	std	Y+9, r25	; 0x09
    16d6:	88 87       	std	Y+8, r24	; 0x08
						brush1Motor = 0;
    16d8:	1f 82       	std	Y+7, r1	; 0x07
    16da:	1e 82       	std	Y+6, r1	; 0x06
    16dc:	99 24       	eor	r9, r9
    16de:	96 e2       	ldi	r25, 0x26	; 38
    16e0:	69 2e       	mov	r6, r25
    16e2:	71 2c       	mov	r7, r1
    16e4:	4a c0       	rjmp	.+148    	; 0x177a <main+0xa16>
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
    16e6:	80 91 c7 03 	lds	r24, 0x03C7
    16ea:	84 60       	ori	r24, 0x04	; 4
    16ec:	80 93 c7 03 	sts	0x03C7, r24
						brush2Motor =  1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	99 87       	std	Y+9, r25	; 0x09
    16f6:	88 87       	std	Y+8, r24	; 0x08
    16f8:	40 c0       	rjmp	.+128    	; 0x177a <main+0xa16>
						break;
					case M5_F:
						if(print){
    16fa:	99 20       	and	r9, r9
    16fc:	21 f0       	breq	.+8      	; 0x1706 <main+0x9a2>
							OrangutanLCD::print("PAPER      FRONT");
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	93 e0       	ldi	r25, 0x03	; 3
    1702:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1706:	80 91 c7 03 	lds	r24, 0x03C7
    170a:	8f 7d       	andi	r24, 0xDF	; 223
    170c:	80 93 c7 03 	sts	0x03C7, r24
						paperTowelMotor =  1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	9b 87       	std	Y+11, r25	; 0x0b
    1716:	8a 87       	std	Y+10, r24	; 0x0a
						brush2Motor = 0;
    1718:	19 86       	std	Y+9, r1	; 0x09
    171a:	18 86       	std	Y+8, r1	; 0x08
    171c:	99 24       	eor	r9, r9
    171e:	88 e2       	ldi	r24, 0x28	; 40
    1720:	68 2e       	mov	r6, r24
    1722:	71 2c       	mov	r7, r1
    1724:	2a c0       	rjmp	.+84     	; 0x177a <main+0xa16>
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
    1726:	80 91 c7 03 	lds	r24, 0x03C7
    172a:	80 62       	ori	r24, 0x20	; 32
    172c:	80 93 c7 03 	sts	0x03C7, r24
						paperTowelMotor =  1;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	9b 87       	std	Y+11, r25	; 0x0b
    1736:	8a 87       	std	Y+10, r24	; 0x0a
    1738:	20 c0       	rjmp	.+64     	; 0x177a <main+0xa16>
						break;
					case M2_AND_M3:
						if(print){
    173a:	99 20       	and	r9, r9
    173c:	21 f0       	breq	.+8      	; 0x1746 <main+0x9e2>
							OrangutanLCD::print("FIXTURE & BRUSH1");
    173e:	82 e1       	ldi	r24, 0x12	; 18
    1740:	93 e0       	ldi	r25, 0x03	; 3
    1742:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						fixtureMotor = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	9d 83       	std	Y+5, r25	; 0x05
    174c:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 1;
    174e:	9f 83       	std	Y+7, r25	; 0x07
    1750:	8e 83       	std	Y+6, r24	; 0x06
    1752:	99 24       	eor	r9, r9
    1754:	12 c0       	rjmp	.+36     	; 0x177a <main+0xa16>
						break;
					case M2_AND_M4:
						if(print){
    1756:	99 20       	and	r9, r9
    1758:	21 f0       	breq	.+8      	; 0x1762 <main+0x9fe>
							OrangutanLCD::print("FIXTURE & BRUSH2");
    175a:	83 e2       	ldi	r24, 0x23	; 35
    175c:	93 e0       	ldi	r25, 0x03	; 3
    175e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
							print = false;
						}
						fixtureMotor = 1;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	9d 83       	std	Y+5, r25	; 0x05
    1768:	8c 83       	std	Y+4, r24	; 0x04
						brush1Motor = 0;
    176a:	1f 82       	std	Y+7, r1	; 0x07
    176c:	1e 82       	std	Y+6, r1	; 0x06
						brush2Motor = 1;
    176e:	99 87       	std	Y+9, r25	; 0x09
    1770:	88 87       	std	Y+8, r24	; 0x08
    1772:	99 24       	eor	r9, r9
    1774:	0b e2       	ldi	r16, 0x2B	; 43
    1776:	60 2e       	mov	r6, r16
    1778:	71 2c       	mov	r7, r1
						break;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    177a:	2a 81       	ldd	r18, Y+2	; 0x02
    177c:	3b 81       	ldd	r19, Y+3	; 0x03
    177e:	0c 81       	ldd	r16, Y+4	; 0x04
    1780:	1d 81       	ldd	r17, Y+5	; 0x05
    1782:	ee 80       	ldd	r14, Y+6	; 0x06
    1784:	ff 80       	ldd	r15, Y+7	; 0x07
    1786:	c8 84       	ldd	r12, Y+8	; 0x08
    1788:	d9 84       	ldd	r13, Y+9	; 0x09
    178a:	aa 84       	ldd	r10, Y+10	; 0x0a
    178c:	bb 84       	ldd	r11, Y+11	; 0x0b
    178e:	c2 01       	movw	r24, r4
    1790:	b1 01       	movw	r22, r2
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_Z15motor_and_writeiiiiiiii>
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>
			counter = 0;
			OrangutanLCD::clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
    17a2:	8c e2       	ldi	r24, 0x2C	; 44
    17a4:	68 16       	cp	r6, r24
    17a6:	71 04       	cpc	r7, r1
    17a8:	09 f4       	brne	.+2      	; 0x17ac <main+0xa48>
    17aa:	b5 c5       	rjmp	.+2922   	; 0x2316 <main+0x15b2>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				counter ++;
    17ac:	08 94       	sec
    17ae:	41 1c       	adc	r4, r1
    17b0:	51 1c       	adc	r5, r1
    17b2:	43 cc       	rjmp	.-1914   	; 0x103a <main+0x2d6>
		}
		else{										//If switch is set to Run Mode
		
		bool print = true;

		OrangutanLCD::print("NORMAL");
    17b4:	84 e3       	ldi	r24, 0x34	; 52
    17b6:	93 e0       	ldi	r25, 0x03	; 3
    17b8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
    17bc:	88 ee       	ldi	r24, 0xE8	; 232
    17be:	93 e0       	ldi	r25, 0x03	; 3
    17c0:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
    17c4:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("SELECT CYCLE");
    17c8:	8b e3       	ldi	r24, 0x3B	; 59
    17ca:	93 e0       	ldi	r25, 0x03	; 3
    17cc:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
    17d0:	ee 24       	eor	r14, r14
    17d2:	ff 24       	eor	r15, r15
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    17d4:	c7 01       	movw	r24, r14
    17d6:	be 01       	movw	r22, r28
    17d8:	64 5f       	subi	r22, 0xF4	; 244
    17da:	7f 4f       	sbci	r23, 0xFF	; 255
    17dc:	0e 94 81 02 	call	0x502	; 0x502 <_Z15button_debounceiPi>
    17e0:	18 2f       	mov	r17, r24
			counter++;
    17e2:	08 94       	sec
    17e4:	e1 1c       	adc	r14, r1
    17e6:	f1 1c       	adc	r15, r1
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
		OrangutanLCD::print("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    17f0:	11 23       	and	r17, r17
    17f2:	81 f3       	breq	.-32     	; 0x17d4 <main+0xa70>
			counter++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		OrangutanLCD::clear();
    17f4:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("CYCLE:");
    17f8:	88 e4       	ldi	r24, 0x48	; 72
    17fa:	93 e0       	ldi	r25, 0x03	; 3
    17fc:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>

		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1800:	80 91 c6 03 	lds	r24, 0x03C6
    1804:	80 62       	ori	r24, 0x20	; 32
    1806:	80 93 c6 03 	sts	0x03C6, r24

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    1810:	88 23       	and	r24, r24
    1812:	09 f0       	breq	.+2      	; 0x1816 <main+0xab2>
    1814:	a7 c5       	rjmp	.+2894   	; 0x2364 <main+0x1600>
    1816:	82 e0       	ldi	r24, 0x02	; 2
    1818:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    181c:	88 23       	and	r24, r24
    181e:	09 f0       	breq	.+2      	; 0x1822 <main+0xabe>
    1820:	a1 c5       	rjmp	.+2882   	; 0x2364 <main+0x1600>
			OrangutanLCD::gotoXY(7,0);
    1822:	87 e0       	ldi	r24, 0x07	; 7
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("FIRST B");
    182a:	8f e4       	ldi	r24, 0x4F	; 79
    182c:	93 e0       	ldi	r25, 0x03	; 3
    182e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	9d 83       	std	Y+5, r25	; 0x05
    1838:	8c 83       	std	Y+4, r24	; 0x04
    183a:	80 91 c6 03 	lds	r24, 0x03C6
    183e:	80 62       	ori	r24, 0x20	; 32
    1840:	80 93 c6 03 	sts	0x03C6, r24
    1844:	88 24       	eor	r8, r8
    1846:	99 24       	eor	r9, r9
    1848:	66 24       	eor	r6, r6
    184a:	77 24       	eor	r7, r7
    184c:	44 24       	eor	r4, r4
    184e:	55 24       	eor	r5, r5
    1850:	1e 8a       	std	Y+22, r1	; 0x16
    1852:	1d 8a       	std	Y+21, r1	; 0x15
    1854:	22 24       	eor	r2, r2
    1856:	23 94       	inc	r2
    1858:	33 24       	eor	r3, r3
    185a:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    185c:	84 e4       	ldi	r24, 0x44	; 68
    185e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1868:	85 e4       	ldi	r24, 0x45	; 69
    186a:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    186e:	0e 94 42 12 	call	0x2484	; 0x2484 <_Z11i2c_readAckv>
    1872:	80 93 ca 03 	sts	0x03CA, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1876:	0e 94 4c 12 	call	0x2498	; 0x2498 <_Z11i2c_readNakv>
    187a:	80 93 cb 03 	sts	0x03CB, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    187e:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>
				
				if(state != INIT && print){
    1882:	81 14       	cp	r8, r1
    1884:	91 04       	cpc	r9, r1
    1886:	d1 f0       	breq	.+52     	; 0x18bc <main+0xb58>
    1888:	33 20       	and	r3, r3
    188a:	c1 f0       	breq	.+48     	; 0x18bc <main+0xb58>
					OrangutanLCD::gotoXY(6,1);
    188c:	86 e0       	ldi	r24, 0x06	; 6
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("     ");
    1894:	87 e5       	ldi	r24, 0x57	; 87
    1896:	93 e0       	ldi	r25, 0x03	; 3
    1898:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    18a4:	8d e5       	ldi	r24, 0x5D	; 93
    18a6:	93 e0       	ldi	r25, 0x03	; 3
    18a8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
	};
	static inline void print(int value)
	{
		print((long)value);
    18ac:	b4 01       	movw	r22, r8
    18ae:	88 27       	eor	r24, r24
    18b0:	77 fd       	sbrc	r23, 7
    18b2:	80 95       	com	r24
    18b4:	98 2f       	mov	r25, r24
    18b6:	0e 94 fe 14 	call	0x29fc	; 0x29fc <_ZN12OrangutanLCD5printEl>
    18ba:	33 24       	eor	r3, r3
					OrangutanLCD::print(state);
					print = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    18bc:	c3 01       	movw	r24, r6
    18be:	be 01       	movw	r22, r28
    18c0:	64 5f       	subi	r22, 0xF4	; 244
    18c2:	7f 4f       	sbci	r23, 0xFF	; 255
    18c4:	0e 94 81 02 	call	0x502	; 0x502 <_Z15button_debounceiPi>
    18c8:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    18ca:	c4 01       	movw	r24, r8
    18cc:	a3 01       	movw	r20, r6
    18ce:	92 01       	movw	r18, r4
    18d0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_Z10init_transibii>
    18d4:	88 23       	and	r24, r24
    18d6:	31 f0       	breq	.+12     	; 0x18e4 <main+0xb80>
					buttonTriggered = false;
					state ++;
    18d8:	08 94       	sec
    18da:	81 1c       	adc	r8, r1
    18dc:	91 1c       	adc	r9, r1
    18de:	23 01       	movw	r4, r6
    18e0:	33 24       	eor	r3, r3
    18e2:	33 94       	inc	r3
					counterRef = counter;
					print = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    18e4:	c4 01       	movw	r24, r8
    18e6:	b3 01       	movw	r22, r6
    18e8:	a2 01       	movw	r20, r4
    18ea:	0e 94 2c 03 	call	0x658	; 0x658 <_Z12firstB_transiii>
    18ee:	88 23       	and	r24, r24
    18f0:	71 f0       	breq	.+28     	; 0x190e <main+0xbaa>
					state ++;
    18f2:	08 94       	sec
    18f4:	81 1c       	adc	r8, r1
    18f6:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    18f8:	9a e0       	ldi	r25, 0x0A	; 10
    18fa:	89 16       	cp	r8, r25
    18fc:	91 04       	cpc	r9, r1
    18fe:	e1 f1       	breq	.+120    	; 0x1978 <main+0xc14>
    1900:	2d e0       	ldi	r18, 0x0D	; 13
    1902:	82 16       	cp	r8, r18
    1904:	91 04       	cpc	r9, r1
    1906:	c1 f1       	breq	.+112    	; 0x1978 <main+0xc14>
    1908:	23 01       	movw	r4, r6
    190a:	33 24       	eor	r3, r3
    190c:	33 94       	inc	r3
						counterRef = counter;
					print = true;
				}

				if(state == B1STOP2 && counter - counterRef > pWait){
    190e:	3e e0       	ldi	r19, 0x0E	; 14
    1910:	83 16       	cp	r8, r19
    1912:	91 04       	cpc	r9, r1
    1914:	71 f4       	brne	.+28     	; 0x1932 <main+0xbce>
    1916:	93 01       	movw	r18, r6
    1918:	24 19       	sub	r18, r4
    191a:	35 09       	sbc	r19, r5
    191c:	80 91 8d 03 	lds	r24, 0x038D
    1920:	90 91 8e 03 	lds	r25, 0x038E
    1924:	82 17       	cp	r24, r18
    1926:	93 07       	cpc	r25, r19
    1928:	4c f5       	brge	.+82     	; 0x197c <main+0xc18>
    192a:	23 01       	movw	r4, r6
    192c:	33 24       	eor	r3, r3
    192e:	33 94       	inc	r3
    1930:	04 c0       	rjmp	.+8      	; 0x193a <main+0xbd6>
					state = MOVED1;
					counterRef = counter;
					print = true;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1932:	67 e1       	ldi	r22, 0x17	; 23
    1934:	86 16       	cp	r8, r22
    1936:	91 04       	cpc	r9, r1
    1938:	09 f5       	brne	.+66     	; 0x197c <main+0xc18>
    193a:	a3 01       	movw	r20, r6
    193c:	44 19       	sub	r20, r4
    193e:	55 09       	sbc	r21, r5
    1940:	20 91 b9 03 	lds	r18, 0x03B9
    1944:	30 91 ba 03 	lds	r19, 0x03BA
    1948:	80 91 9f 03 	lds	r24, 0x039F
    194c:	90 91 a0 03 	lds	r25, 0x03A0
    1950:	bc 01       	movw	r22, r24
    1952:	26 9f       	mul	r18, r22
    1954:	c0 01       	movw	r24, r0
    1956:	27 9f       	mul	r18, r23
    1958:	90 0d       	add	r25, r0
    195a:	36 9f       	mul	r19, r22
    195c:	90 0d       	add	r25, r0
    195e:	11 24       	eor	r1, r1
    1960:	84 17       	cp	r24, r20
    1962:	95 07       	cpc	r25, r21
    1964:	2c f4       	brge	.+10     	; 0x1970 <main+0xc0c>
    1966:	23 01       	movw	r4, r6
    1968:	18 e1       	ldi	r17, 0x18	; 24
    196a:	81 2e       	mov	r8, r17
    196c:	91 2c       	mov	r9, r1
    196e:	04 c0       	rjmp	.+8      	; 0x1978 <main+0xc14>
    1970:	b7 e1       	ldi	r27, 0x17	; 23
    1972:	8b 2e       	mov	r8, r27
    1974:	91 2c       	mov	r9, r1
    1976:	02 c0       	rjmp	.+4      	; 0x197c <main+0xc18>
    1978:	33 24       	eor	r3, r3
    197a:	33 94       	inc	r3
					counterRef = counter;
					print = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    197c:	c4 01       	movw	r24, r8
    197e:	b3 01       	movw	r22, r6
    1980:	a2 01       	movw	r20, r4
    1982:	2d 89       	ldd	r18, Y+21	; 0x15
    1984:	3e 89       	ldd	r19, Y+22	; 0x16
    1986:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_Z9dry_transiiii>
    198a:	88 23       	and	r24, r24
    198c:	79 f0       	breq	.+30     	; 0x19ac <main+0xc48>
					state ++;
    198e:	08 94       	sec
    1990:	81 1c       	adc	r8, r1
    1992:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    1994:	7a e1       	ldi	r23, 0x1A	; 26
    1996:	87 16       	cp	r8, r23
    1998:	91 04       	cpc	r9, r1
    199a:	29 f4       	brne	.+10     	; 0x19a6 <main+0xc42>
    199c:	7e 8a       	std	Y+22, r7	; 0x16
    199e:	6d 8a       	std	Y+21, r6	; 0x15
    19a0:	33 24       	eor	r3, r3
    19a2:	33 94       	inc	r3
    19a4:	0f c0       	rjmp	.+30     	; 0x19c4 <main+0xc60>
    19a6:	23 01       	movw	r4, r6
    19a8:	33 24       	eor	r3, r3
    19aa:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					print = true;
				}

				if(state == END && counter - counterRef > 10){
    19ac:	83 e2       	ldi	r24, 0x23	; 35
    19ae:	88 16       	cp	r8, r24
    19b0:	91 04       	cpc	r9, r1
    19b2:	41 f4       	brne	.+16     	; 0x19c4 <main+0xc60>
    19b4:	c3 01       	movw	r24, r6
    19b6:	84 19       	sub	r24, r4
    19b8:	95 09       	sbc	r25, r5
    19ba:	0b 97       	sbiw	r24, 0x0b	; 11
    19bc:	1c f0       	brlt	.+6      	; 0x19c4 <main+0xc60>
    19be:	a4 e2       	ldi	r26, 0x24	; 36
    19c0:	8a 2e       	mov	r8, r26
    19c2:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    19c4:	c4 01       	movw	r24, r8
    19c6:	b3 01       	movw	r22, r6
    19c8:	ae 01       	movw	r20, r28
    19ca:	4e 5f       	subi	r20, 0xFE	; 254
    19cc:	5f 4f       	sbci	r21, 0xFF	; 255
    19ce:	9e 01       	movw	r18, r28
    19d0:	2c 5f       	subi	r18, 0xFC	; 252
    19d2:	3f 4f       	sbci	r19, 0xFF	; 255
    19d4:	8e 01       	movw	r16, r28
    19d6:	0a 5f       	subi	r16, 0xFA	; 250
    19d8:	1f 4f       	sbci	r17, 0xFF	; 255
    19da:	f8 e0       	ldi	r31, 0x08	; 8
    19dc:	ef 2e       	mov	r14, r31
    19de:	f1 2c       	mov	r15, r1
    19e0:	ec 0e       	add	r14, r28
    19e2:	fd 1e       	adc	r15, r29
    19e4:	ea e0       	ldi	r30, 0x0A	; 10
    19e6:	ce 2e       	mov	r12, r30
    19e8:	d1 2c       	mov	r13, r1
    19ea:	cc 0e       	add	r12, r28
    19ec:	dd 1e       	adc	r13, r29
    19ee:	5e 01       	movw	r10, r28
    19f0:	08 94       	sec
    19f2:	a1 1c       	adc	r10, r1
    19f4:	b1 1c       	adc	r11, r1
    19f6:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_Z11init_actioniiPiS_S_S_S_Pb>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    19fa:	c4 01       	movw	r24, r8
    19fc:	b3 01       	movw	r22, r6
    19fe:	ae 01       	movw	r20, r28
    1a00:	4e 5f       	subi	r20, 0xFE	; 254
    1a02:	5f 4f       	sbci	r21, 0xFF	; 255
    1a04:	9e 01       	movw	r18, r28
    1a06:	2c 5f       	subi	r18, 0xFC	; 252
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	8e 01       	movw	r16, r28
    1a0c:	0a 5f       	subi	r16, 0xFA	; 250
    1a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a10:	b8 e0       	ldi	r27, 0x08	; 8
    1a12:	eb 2e       	mov	r14, r27
    1a14:	f1 2c       	mov	r15, r1
    1a16:	ec 0e       	add	r14, r28
    1a18:	fd 1e       	adc	r15, r29
    1a1a:	aa e0       	ldi	r26, 0x0A	; 10
    1a1c:	ca 2e       	mov	r12, r26
    1a1e:	d1 2c       	mov	r13, r1
    1a20:	cc 0e       	add	r12, r28
    1a22:	dd 1e       	adc	r13, r29
    1a24:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z13brush1_actioniiPiS_S_S_S_>
				if(state == B1STOP2){
    1a28:	9e e0       	ldi	r25, 0x0E	; 14
    1a2a:	89 16       	cp	r8, r25
    1a2c:	91 04       	cpc	r9, r1
    1a2e:	59 f4       	brne	.+22     	; 0x1a46 <main+0xce2>
					brush1Motor = 0;
    1a30:	1f 82       	std	Y+7, r1	; 0x07
    1a32:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    1a34:	1d 82       	std	Y+5, r1	; 0x05
    1a36:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1a38:	80 91 c8 03 	lds	r24, 0x03C8
    1a3c:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1a3e:	80 62       	ori	r24, 0x20	; 32
    1a40:	80 93 c8 03 	sts	0x03C8, r24
    1a44:	12 c0       	rjmp	.+36     	; 0x1a6a <main+0xd06>
				}
				if(state == MOVED1){
    1a46:	27 e1       	ldi	r18, 0x17	; 23
    1a48:	82 16       	cp	r8, r18
    1a4a:	91 04       	cpc	r9, r1
    1a4c:	71 f4       	brne	.+28     	; 0x1a6a <main+0xd06>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1a4e:	80 91 c6 03 	lds	r24, 0x03C6
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1a52:	61 e0       	ldi	r22, 0x01	; 1
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	7d 83       	std	Y+5, r23	; 0x05
    1a58:	6c 83       	std	Y+4, r22	; 0x04
    1a5a:	80 63       	ori	r24, 0x30	; 48
    1a5c:	80 93 c6 03 	sts	0x03C6, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    1a60:	80 91 c7 03 	lds	r24, 0x03C7
    1a64:	8e 7f       	andi	r24, 0xFE	; 254
    1a66:	80 93 c7 03 	sts	0x03C7, r24
				}
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1a6a:	c4 01       	movw	r24, r8
    1a6c:	b3 01       	movw	r22, r6
    1a6e:	ae 01       	movw	r20, r28
    1a70:	4e 5f       	subi	r20, 0xFE	; 254
    1a72:	5f 4f       	sbci	r21, 0xFF	; 255
    1a74:	9e 01       	movw	r18, r28
    1a76:	2c 5f       	subi	r18, 0xFC	; 252
    1a78:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7a:	8e 01       	movw	r16, r28
    1a7c:	0a 5f       	subi	r16, 0xFA	; 250
    1a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a80:	f8 e0       	ldi	r31, 0x08	; 8
    1a82:	ef 2e       	mov	r14, r31
    1a84:	f1 2c       	mov	r15, r1
    1a86:	ec 0e       	add	r14, r28
    1a88:	fd 1e       	adc	r15, r29
    1a8a:	ea e0       	ldi	r30, 0x0A	; 10
    1a8c:	ce 2e       	mov	r12, r30
    1a8e:	d1 2c       	mov	r13, r1
    1a90:	cc 0e       	add	r12, r28
    1a92:	dd 1e       	adc	r13, r29
    1a94:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_Z10dry_actioniiPiS_S_S_S_>
				if(state == END){
    1a98:	73 e2       	ldi	r23, 0x23	; 35
    1a9a:	87 16       	cp	r8, r23
    1a9c:	91 04       	cpc	r9, r1
    1a9e:	81 f4       	brne	.+32     	; 0x1ac0 <main+0xd5c>
					plateLoadMotor = 0;
    1aa0:	1b 82       	std	Y+3, r1	; 0x03
    1aa2:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1aa4:	80 91 c6 03 	lds	r24, 0x03C6
    1aa8:	8b 7f       	andi	r24, 0xFB	; 251
    1aaa:	80 93 c6 03 	sts	0x03C6, r24
					if(print35 == 1){
    1aae:	22 20       	and	r2, r2
    1ab0:	39 f0       	breq	.+14     	; 0x1ac0 <main+0xd5c>
						OrangutanLCD::clear();
    1ab2:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1ab6:	84 e6       	ldi	r24, 0x64	; 100
    1ab8:	93 e0       	ldi	r25, 0x03	; 3
    1aba:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
    1abe:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1ac0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ac2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ac4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ac6:	1d 81       	ldd	r17, Y+5	; 0x05
    1ac8:	ee 80       	ldd	r14, Y+6	; 0x06
    1aca:	ff 80       	ldd	r15, Y+7	; 0x07
    1acc:	c8 84       	ldd	r12, Y+8	; 0x08
    1ace:	d9 84       	ldd	r13, Y+9	; 0x09
    1ad0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ad2:	bb 84       	ldd	r11, Y+11	; 0x0b
    1ad4:	c3 01       	movw	r24, r6
    1ad6:	b2 01       	movw	r22, r4
    1ad8:	4d 89       	ldd	r20, Y+21	; 0x15
    1ada:	5e 89       	ldd	r21, Y+22	; 0x16
    1adc:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_Z15motor_and_writeiiiiiiii>
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("FIRST B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1ae8:	84 e2       	ldi	r24, 0x24	; 36
    1aea:	88 16       	cp	r8, r24
    1aec:	91 04       	cpc	r9, r1
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <main+0xd8e>
    1af0:	12 c4       	rjmp	.+2084   	; 0x2316 <main+0x15b2>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				counter ++;
    1af2:	08 94       	sec
    1af4:	61 1c       	adc	r6, r1
    1af6:	71 1c       	adc	r7, r1
    1af8:	b1 ce       	rjmp	.-670    	; 0x185c <main+0xaf8>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    1afa:	82 e0       	ldi	r24, 0x02	; 2
    1afc:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    1b00:	88 23       	and	r24, r24
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <main+0xda2>
    1b04:	35 c4       	rjmp	.+2154   	; 0x2370 <main+0x160c>
			OrangutanLCD::gotoXY(7,0);
    1b06:	87 e0       	ldi	r24, 0x07	; 7
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("SECOND B");
    1b0e:	81 e7       	ldi	r24, 0x71	; 113
    1b10:	93 e0       	ldi	r25, 0x03	; 3
    1b12:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	9d 83       	std	Y+5, r25	; 0x05
    1b1c:	8c 83       	std	Y+4, r24	; 0x04
    1b1e:	80 91 c6 03 	lds	r24, 0x03C6
    1b22:	80 62       	ori	r24, 0x20	; 32
    1b24:	80 93 c6 03 	sts	0x03C6, r24
    1b28:	88 24       	eor	r8, r8
    1b2a:	99 24       	eor	r9, r9
    1b2c:	66 24       	eor	r6, r6
    1b2e:	77 24       	eor	r7, r7
    1b30:	44 24       	eor	r4, r4
    1b32:	55 24       	eor	r5, r5
    1b34:	19 8a       	std	Y+17, r1	; 0x11
    1b36:	18 8a       	std	Y+16, r1	; 0x10
    1b38:	22 24       	eor	r2, r2
    1b3a:	23 94       	inc	r2
    1b3c:	33 24       	eor	r3, r3
    1b3e:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1b40:	84 e4       	ldi	r24, 0x44	; 68
    1b42:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1b4c:	85 e4       	ldi	r24, 0x45	; 69
    1b4e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1b52:	0e 94 42 12 	call	0x2484	; 0x2484 <_Z11i2c_readAckv>
    1b56:	80 93 ca 03 	sts	0x03CA, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1b5a:	0e 94 4c 12 	call	0x2498	; 0x2498 <_Z11i2c_readNakv>
    1b5e:	80 93 cb 03 	sts	0x03CB, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1b62:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>
				
				if(state != INIT && print){
    1b66:	81 14       	cp	r8, r1
    1b68:	91 04       	cpc	r9, r1
    1b6a:	d1 f0       	breq	.+52     	; 0x1ba0 <main+0xe3c>
    1b6c:	33 20       	and	r3, r3
    1b6e:	c1 f0       	breq	.+48     	; 0x1ba0 <main+0xe3c>
					OrangutanLCD::gotoXY(6,1);
    1b70:	86 e0       	ldi	r24, 0x06	; 6
    1b72:	61 e0       	ldi	r22, 0x01	; 1
    1b74:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("     ");
    1b78:	87 e5       	ldi	r24, 0x57	; 87
    1b7a:	93 e0       	ldi	r25, 0x03	; 3
    1b7c:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	61 e0       	ldi	r22, 0x01	; 1
    1b84:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1b88:	8d e5       	ldi	r24, 0x5D	; 93
    1b8a:	93 e0       	ldi	r25, 0x03	; 3
    1b8c:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
    1b90:	b4 01       	movw	r22, r8
    1b92:	88 27       	eor	r24, r24
    1b94:	77 fd       	sbrc	r23, 7
    1b96:	80 95       	com	r24
    1b98:	98 2f       	mov	r25, r24
    1b9a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <_ZN12OrangutanLCD5printEl>
    1b9e:	33 24       	eor	r3, r3
					OrangutanLCD::print(state);
					print = false;
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1ba0:	c3 01       	movw	r24, r6
    1ba2:	be 01       	movw	r22, r28
    1ba4:	64 5f       	subi	r22, 0xF4	; 244
    1ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba8:	0e 94 81 02 	call	0x502	; 0x502 <_Z15button_debounceiPi>
    1bac:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1bae:	c4 01       	movw	r24, r8
    1bb0:	a3 01       	movw	r20, r6
    1bb2:	92 01       	movw	r18, r4
    1bb4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_Z10init_transibii>
    1bb8:	88 23       	and	r24, r24
    1bba:	31 f0       	breq	.+12     	; 0x1bc8 <main+0xe64>
					buttonTriggered = false;
					state ++;
    1bbc:	08 94       	sec
    1bbe:	81 1c       	adc	r8, r1
    1bc0:	91 1c       	adc	r9, r1
    1bc2:	23 01       	movw	r4, r6
    1bc4:	33 24       	eor	r3, r3
    1bc6:	33 94       	inc	r3
					counterRef = counter;
					print = true;
				}

				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1bc8:	96 e0       	ldi	r25, 0x06	; 6
    1bca:	89 16       	cp	r8, r25
    1bcc:	91 04       	cpc	r9, r1
    1bce:	e1 f4       	brne	.+56     	; 0x1c08 <main+0xea4>
    1bd0:	a3 01       	movw	r20, r6
    1bd2:	44 19       	sub	r20, r4
    1bd4:	55 09       	sbc	r21, r5
    1bd6:	20 91 bb 03 	lds	r18, 0x03BB
    1bda:	30 91 bc 03 	lds	r19, 0x03BC
    1bde:	80 91 9f 03 	lds	r24, 0x039F
    1be2:	90 91 a0 03 	lds	r25, 0x03A0
    1be6:	bc 01       	movw	r22, r24
    1be8:	26 9f       	mul	r18, r22
    1bea:	c0 01       	movw	r24, r0
    1bec:	27 9f       	mul	r18, r23
    1bee:	90 0d       	add	r25, r0
    1bf0:	36 9f       	mul	r19, r22
    1bf2:	90 0d       	add	r25, r0
    1bf4:	11 24       	eor	r1, r1
    1bf6:	84 17       	cp	r24, r20
    1bf8:	95 07       	cpc	r25, r21
    1bfa:	34 f4       	brge	.+12     	; 0x1c08 <main+0xea4>
    1bfc:	23 01       	movw	r4, r6
    1bfe:	bf e0       	ldi	r27, 0x0F	; 15
    1c00:	8b 2e       	mov	r8, r27
    1c02:	91 2c       	mov	r9, r1
    1c04:	33 24       	eor	r3, r3
    1c06:	33 94       	inc	r3
					counterRef = counter;
					print = true;
				}

				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    1c08:	c4 01       	movw	r24, r8
    1c0a:	b3 01       	movw	r22, r6
    1c0c:	a2 01       	movw	r20, r4
    1c0e:	0e 94 c4 03 	call	0x788	; 0x788 <_Z13secondB_transiii>
    1c12:	88 23       	and	r24, r24
    1c14:	31 f0       	breq	.+12     	; 0x1c22 <main+0xebe>
					state ++;
    1c16:	08 94       	sec
    1c18:	81 1c       	adc	r8, r1
    1c1a:	91 1c       	adc	r9, r1
    1c1c:	23 01       	movw	r4, r6
    1c1e:	33 24       	eor	r3, r3
    1c20:	33 94       	inc	r3
					counterRef = counter;
					print = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1c22:	c4 01       	movw	r24, r8
    1c24:	b3 01       	movw	r22, r6
    1c26:	a2 01       	movw	r20, r4
    1c28:	28 89       	ldd	r18, Y+16	; 0x10
    1c2a:	39 89       	ldd	r19, Y+17	; 0x11
    1c2c:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_Z9dry_transiiii>
    1c30:	88 23       	and	r24, r24
    1c32:	79 f0       	breq	.+30     	; 0x1c52 <main+0xeee>
					state ++;
    1c34:	08 94       	sec
    1c36:	81 1c       	adc	r8, r1
    1c38:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    1c3a:	7a e1       	ldi	r23, 0x1A	; 26
    1c3c:	87 16       	cp	r8, r23
    1c3e:	91 04       	cpc	r9, r1
    1c40:	29 f4       	brne	.+10     	; 0x1c4c <main+0xee8>
    1c42:	79 8a       	std	Y+17, r7	; 0x11
    1c44:	68 8a       	std	Y+16, r6	; 0x10
    1c46:	33 24       	eor	r3, r3
    1c48:	33 94       	inc	r3
    1c4a:	0f c0       	rjmp	.+30     	; 0x1c6a <main+0xf06>
    1c4c:	23 01       	movw	r4, r6
    1c4e:	33 24       	eor	r3, r3
    1c50:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					print = true;
				}

				if(state == END && counter - counterRef > 10){
    1c52:	83 e2       	ldi	r24, 0x23	; 35
    1c54:	88 16       	cp	r8, r24
    1c56:	91 04       	cpc	r9, r1
    1c58:	41 f4       	brne	.+16     	; 0x1c6a <main+0xf06>
    1c5a:	c3 01       	movw	r24, r6
    1c5c:	84 19       	sub	r24, r4
    1c5e:	95 09       	sbc	r25, r5
    1c60:	0b 97       	sbiw	r24, 0x0b	; 11
    1c62:	1c f0       	brlt	.+6      	; 0x1c6a <main+0xf06>
    1c64:	a4 e2       	ldi	r26, 0x24	; 36
    1c66:	8a 2e       	mov	r8, r26
    1c68:	91 2c       	mov	r9, r1
				}


				//state actions
				
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1c6a:	c4 01       	movw	r24, r8
    1c6c:	b3 01       	movw	r22, r6
    1c6e:	ae 01       	movw	r20, r28
    1c70:	4e 5f       	subi	r20, 0xFE	; 254
    1c72:	5f 4f       	sbci	r21, 0xFF	; 255
    1c74:	9e 01       	movw	r18, r28
    1c76:	2c 5f       	subi	r18, 0xFC	; 252
    1c78:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7a:	8e 01       	movw	r16, r28
    1c7c:	0a 5f       	subi	r16, 0xFA	; 250
    1c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c80:	f8 e0       	ldi	r31, 0x08	; 8
    1c82:	ef 2e       	mov	r14, r31
    1c84:	f1 2c       	mov	r15, r1
    1c86:	ec 0e       	add	r14, r28
    1c88:	fd 1e       	adc	r15, r29
    1c8a:	ea e0       	ldi	r30, 0x0A	; 10
    1c8c:	ce 2e       	mov	r12, r30
    1c8e:	d1 2c       	mov	r13, r1
    1c90:	cc 0e       	add	r12, r28
    1c92:	dd 1e       	adc	r13, r29
    1c94:	5e 01       	movw	r10, r28
    1c96:	08 94       	sec
    1c98:	a1 1c       	adc	r10, r1
    1c9a:	b1 1c       	adc	r11, r1
    1c9c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_Z11init_actioniiPiS_S_S_S_Pb>
				if(state == MOVEC1){
    1ca0:	96 e0       	ldi	r25, 0x06	; 6
    1ca2:	89 16       	cp	r8, r25
    1ca4:	91 04       	cpc	r9, r1
    1ca6:	49 f4       	brne	.+18     	; 0x1cba <main+0xf56>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1ca8:	80 91 c6 03 	lds	r24, 0x03C6
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1cac:	21 e0       	ldi	r18, 0x01	; 1
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	3d 83       	std	Y+5, r19	; 0x05
    1cb2:	2c 83       	std	Y+4, r18	; 0x04
    1cb4:	80 63       	ori	r24, 0x30	; 48
    1cb6:	80 93 c6 03 	sts	0x03C6, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1cba:	c4 01       	movw	r24, r8
    1cbc:	b3 01       	movw	r22, r6
    1cbe:	ae 01       	movw	r20, r28
    1cc0:	4e 5f       	subi	r20, 0xFE	; 254
    1cc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc4:	9e 01       	movw	r18, r28
    1cc6:	2c 5f       	subi	r18, 0xFC	; 252
    1cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cca:	8e 01       	movw	r16, r28
    1ccc:	0a 5f       	subi	r16, 0xFA	; 250
    1cce:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd0:	b8 e0       	ldi	r27, 0x08	; 8
    1cd2:	eb 2e       	mov	r14, r27
    1cd4:	f1 2c       	mov	r15, r1
    1cd6:	ec 0e       	add	r14, r28
    1cd8:	fd 1e       	adc	r15, r29
    1cda:	aa e0       	ldi	r26, 0x0A	; 10
    1cdc:	ca 2e       	mov	r12, r26
    1cde:	d1 2c       	mov	r13, r1
    1ce0:	cc 0e       	add	r12, r28
    1ce2:	dd 1e       	adc	r13, r29
    1ce4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z13brush2_actioniiPiS_S_S_S_>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1ce8:	c4 01       	movw	r24, r8
    1cea:	b3 01       	movw	r22, r6
    1cec:	ae 01       	movw	r20, r28
    1cee:	4e 5f       	subi	r20, 0xFE	; 254
    1cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf2:	9e 01       	movw	r18, r28
    1cf4:	2c 5f       	subi	r18, 0xFC	; 252
    1cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf8:	8e 01       	movw	r16, r28
    1cfa:	0a 5f       	subi	r16, 0xFA	; 250
    1cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfe:	f8 e0       	ldi	r31, 0x08	; 8
    1d00:	ef 2e       	mov	r14, r31
    1d02:	f1 2c       	mov	r15, r1
    1d04:	ec 0e       	add	r14, r28
    1d06:	fd 1e       	adc	r15, r29
    1d08:	ea e0       	ldi	r30, 0x0A	; 10
    1d0a:	ce 2e       	mov	r12, r30
    1d0c:	d1 2c       	mov	r13, r1
    1d0e:	cc 0e       	add	r12, r28
    1d10:	dd 1e       	adc	r13, r29
    1d12:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_Z10dry_actioniiPiS_S_S_S_>
				if(state == END){
    1d16:	33 e2       	ldi	r19, 0x23	; 35
    1d18:	83 16       	cp	r8, r19
    1d1a:	91 04       	cpc	r9, r1
    1d1c:	81 f4       	brne	.+32     	; 0x1d3e <main+0xfda>
					plateLoadMotor = 0;
    1d1e:	1b 82       	std	Y+3, r1	; 0x03
    1d20:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1d22:	80 91 c6 03 	lds	r24, 0x03C6
    1d26:	8b 7f       	andi	r24, 0xFB	; 251
    1d28:	80 93 c6 03 	sts	0x03C6, r24
					if(print35 == 1){
    1d2c:	22 20       	and	r2, r2
    1d2e:	39 f0       	breq	.+14     	; 0x1d3e <main+0xfda>
						OrangutanLCD::clear();
    1d30:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1d34:	84 e6       	ldi	r24, 0x64	; 100
    1d36:	93 e0       	ldi	r25, 0x03	; 3
    1d38:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
    1d3c:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1d3e:	2a 81       	ldd	r18, Y+2	; 0x02
    1d40:	3b 81       	ldd	r19, Y+3	; 0x03
    1d42:	0c 81       	ldd	r16, Y+4	; 0x04
    1d44:	1d 81       	ldd	r17, Y+5	; 0x05
    1d46:	ee 80       	ldd	r14, Y+6	; 0x06
    1d48:	ff 80       	ldd	r15, Y+7	; 0x07
    1d4a:	c8 84       	ldd	r12, Y+8	; 0x08
    1d4c:	d9 84       	ldd	r13, Y+9	; 0x09
    1d4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d50:	bb 84       	ldd	r11, Y+11	; 0x0b
    1d52:	c3 01       	movw	r24, r6
    1d54:	b2 01       	movw	r22, r4
    1d56:	48 89       	ldd	r20, Y+16	; 0x10
    1d58:	59 89       	ldd	r21, Y+17	; 0x11
    1d5a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_Z15motor_and_writeiiiiiiii>
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>

		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("SECOND B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1d66:	64 e2       	ldi	r22, 0x24	; 36
    1d68:	86 16       	cp	r8, r22
    1d6a:	91 04       	cpc	r9, r1
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <main+0x100c>
    1d6e:	d3 c2       	rjmp	.+1446   	; 0x2316 <main+0x15b2>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				counter ++;
    1d70:	08 94       	sec
    1d72:	61 1c       	adc	r6, r1
    1d74:	71 1c       	adc	r7, r1
    1d76:	e4 ce       	rjmp	.-568    	; 0x1b40 <main+0xddc>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    1d78:	82 e0       	ldi	r24, 0x02	; 2
    1d7a:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    1d7e:	88 23       	and	r24, r24
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <main+0x1020>
    1d82:	fc c2       	rjmp	.+1528   	; 0x237c <main+0x1618>
			OrangutanLCD::gotoXY(7,0);
    1d84:	87 e0       	ldi	r24, 0x07	; 7
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("BOTH B");
    1d8c:	8a e7       	ldi	r24, 0x7A	; 122
    1d8e:	93 e0       	ldi	r25, 0x03	; 3
    1d90:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	9d 83       	std	Y+5, r25	; 0x05
    1d9a:	8c 83       	std	Y+4, r24	; 0x04
    1d9c:	80 91 c6 03 	lds	r24, 0x03C6
    1da0:	80 62       	ori	r24, 0x20	; 32
    1da2:	80 93 c6 03 	sts	0x03C6, r24
    1da6:	88 24       	eor	r8, r8
    1da8:	99 24       	eor	r9, r9
    1daa:	66 24       	eor	r6, r6
    1dac:	77 24       	eor	r7, r7
    1dae:	44 24       	eor	r4, r4
    1db0:	55 24       	eor	r5, r5
    1db2:	1f 86       	std	Y+15, r1	; 0x0f
    1db4:	1e 86       	std	Y+14, r1	; 0x0e
    1db6:	22 24       	eor	r2, r2
    1db8:	23 94       	inc	r2
    1dba:	33 24       	eor	r3, r3
    1dbc:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1dbe:	84 e4       	ldi	r24, 0x44	; 68
    1dc0:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1dca:	85 e4       	ldi	r24, 0x45	; 69
    1dcc:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1dd0:	0e 94 42 12 	call	0x2484	; 0x2484 <_Z11i2c_readAckv>
    1dd4:	80 93 ca 03 	sts	0x03CA, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1dd8:	0e 94 4c 12 	call	0x2498	; 0x2498 <_Z11i2c_readNakv>
    1ddc:	80 93 cb 03 	sts	0x03CB, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1de0:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>
				
				if(state != INIT && print){
    1de4:	81 14       	cp	r8, r1
    1de6:	91 04       	cpc	r9, r1
    1de8:	d1 f0       	breq	.+52     	; 0x1e1e <main+0x10ba>
    1dea:	33 20       	and	r3, r3
    1dec:	c1 f0       	breq	.+48     	; 0x1e1e <main+0x10ba>
					OrangutanLCD::gotoXY(6,1);
    1dee:	86 e0       	ldi	r24, 0x06	; 6
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("       ");
    1df6:	81 e8       	ldi	r24, 0x81	; 129
    1df8:	93 e0       	ldi	r25, 0x03	; 3
    1dfa:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	61 e0       	ldi	r22, 0x01	; 1
    1e02:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1e06:	8d e5       	ldi	r24, 0x5D	; 93
    1e08:	93 e0       	ldi	r25, 0x03	; 3
    1e0a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
    1e0e:	b4 01       	movw	r22, r8
    1e10:	88 27       	eor	r24, r24
    1e12:	77 fd       	sbrc	r23, 7
    1e14:	80 95       	com	r24
    1e16:	98 2f       	mov	r25, r24
    1e18:	0e 94 fe 14 	call	0x29fc	; 0x29fc <_ZN12OrangutanLCD5printEl>
    1e1c:	33 24       	eor	r3, r3
					OrangutanLCD::print(state);
					print = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1e1e:	c3 01       	movw	r24, r6
    1e20:	be 01       	movw	r22, r28
    1e22:	64 5f       	subi	r22, 0xF4	; 244
    1e24:	7f 4f       	sbci	r23, 0xFF	; 255
    1e26:	0e 94 81 02 	call	0x502	; 0x502 <_Z15button_debounceiPi>
    1e2a:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1e2c:	c4 01       	movw	r24, r8
    1e2e:	a3 01       	movw	r20, r6
    1e30:	92 01       	movw	r18, r4
    1e32:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_Z10init_transibii>
    1e36:	88 23       	and	r24, r24
    1e38:	31 f0       	breq	.+12     	; 0x1e46 <main+0x10e2>
					buttonTriggered = false;
					state ++;
    1e3a:	08 94       	sec
    1e3c:	81 1c       	adc	r8, r1
    1e3e:	91 1c       	adc	r9, r1
    1e40:	23 01       	movw	r4, r6
    1e42:	33 24       	eor	r3, r3
    1e44:	33 94       	inc	r3
					print = true;
				}

				
				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    1e46:	c4 01       	movw	r24, r8
    1e48:	b3 01       	movw	r22, r6
    1e4a:	a2 01       	movw	r20, r4
    1e4c:	0e 94 2c 03 	call	0x658	; 0x658 <_Z12firstB_transiii>
    1e50:	88 23       	and	r24, r24
    1e52:	71 f0       	breq	.+28     	; 0x1e70 <main+0x110c>
					state ++;
    1e54:	08 94       	sec
    1e56:	81 1c       	adc	r8, r1
    1e58:	91 1c       	adc	r9, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    1e5a:	7a e0       	ldi	r23, 0x0A	; 10
    1e5c:	87 16       	cp	r8, r23
    1e5e:	91 04       	cpc	r9, r1
    1e60:	c9 f0       	breq	.+50     	; 0x1e94 <main+0x1130>
    1e62:	8d e0       	ldi	r24, 0x0D	; 13
    1e64:	88 16       	cp	r8, r24
    1e66:	91 04       	cpc	r9, r1
    1e68:	a9 f0       	breq	.+42     	; 0x1e94 <main+0x1130>
    1e6a:	23 01       	movw	r4, r6
    1e6c:	33 24       	eor	r3, r3
    1e6e:	33 94       	inc	r3
						counterRef = counter;
					print = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    1e70:	9e e0       	ldi	r25, 0x0E	; 14
    1e72:	89 16       	cp	r8, r25
    1e74:	91 04       	cpc	r9, r1
    1e76:	81 f4       	brne	.+32     	; 0x1e98 <main+0x1134>
    1e78:	93 01       	movw	r18, r6
    1e7a:	24 19       	sub	r18, r4
    1e7c:	35 09       	sbc	r19, r5
    1e7e:	80 91 8d 03 	lds	r24, 0x038D
    1e82:	90 91 8e 03 	lds	r25, 0x038E
    1e86:	82 17       	cp	r24, r18
    1e88:	93 07       	cpc	r25, r19
    1e8a:	34 f4       	brge	.+12     	; 0x1e98 <main+0x1134>
    1e8c:	23 01       	movw	r4, r6
    1e8e:	0f e0       	ldi	r16, 0x0F	; 15
    1e90:	80 2e       	mov	r8, r16
    1e92:	91 2c       	mov	r9, r1
    1e94:	33 24       	eor	r3, r3
    1e96:	33 94       	inc	r3
					print = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    1e98:	c4 01       	movw	r24, r8
    1e9a:	b3 01       	movw	r22, r6
    1e9c:	a2 01       	movw	r20, r4
    1e9e:	0e 94 c4 03 	call	0x788	; 0x788 <_Z13secondB_transiii>
    1ea2:	88 23       	and	r24, r24
    1ea4:	31 f0       	breq	.+12     	; 0x1eb2 <main+0x114e>
					state ++;
    1ea6:	08 94       	sec
    1ea8:	81 1c       	adc	r8, r1
    1eaa:	91 1c       	adc	r9, r1
    1eac:	23 01       	movw	r4, r6
    1eae:	33 24       	eor	r3, r3
    1eb0:	33 94       	inc	r3
					counterRef = counter;
					print = true;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1eb2:	c4 01       	movw	r24, r8
    1eb4:	b3 01       	movw	r22, r6
    1eb6:	a2 01       	movw	r20, r4
    1eb8:	2e 85       	ldd	r18, Y+14	; 0x0e
    1eba:	3f 85       	ldd	r19, Y+15	; 0x0f
    1ebc:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_Z9dry_transiiii>
    1ec0:	88 23       	and	r24, r24
    1ec2:	79 f0       	breq	.+30     	; 0x1ee2 <main+0x117e>
					state ++;
    1ec4:	08 94       	sec
    1ec6:	81 1c       	adc	r8, r1
    1ec8:	91 1c       	adc	r9, r1
					if(state != D1STOP)
    1eca:	2a e1       	ldi	r18, 0x1A	; 26
    1ecc:	82 16       	cp	r8, r18
    1ece:	91 04       	cpc	r9, r1
    1ed0:	29 f4       	brne	.+10     	; 0x1edc <main+0x1178>
    1ed2:	7f 86       	std	Y+15, r7	; 0x0f
    1ed4:	6e 86       	std	Y+14, r6	; 0x0e
    1ed6:	33 24       	eor	r3, r3
    1ed8:	33 94       	inc	r3
    1eda:	0f c0       	rjmp	.+30     	; 0x1efa <main+0x1196>
    1edc:	23 01       	movw	r4, r6
    1ede:	33 24       	eor	r3, r3
    1ee0:	33 94       	inc	r3
					if(state == D1STOP)
						counterRefFive = counter;
					print = true;
				}

				if(state == END && counter - counterRef > 10){
    1ee2:	33 e2       	ldi	r19, 0x23	; 35
    1ee4:	83 16       	cp	r8, r19
    1ee6:	91 04       	cpc	r9, r1
    1ee8:	41 f4       	brne	.+16     	; 0x1efa <main+0x1196>
    1eea:	c3 01       	movw	r24, r6
    1eec:	84 19       	sub	r24, r4
    1eee:	95 09       	sbc	r25, r5
    1ef0:	0b 97       	sbiw	r24, 0x0b	; 11
    1ef2:	1c f0       	brlt	.+6      	; 0x1efa <main+0x1196>
    1ef4:	14 e2       	ldi	r17, 0x24	; 36
    1ef6:	81 2e       	mov	r8, r17
    1ef8:	91 2c       	mov	r9, r1
					state = DONER;
				}


				//state actions
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    1efa:	c4 01       	movw	r24, r8
    1efc:	b3 01       	movw	r22, r6
    1efe:	ae 01       	movw	r20, r28
    1f00:	4e 5f       	subi	r20, 0xFE	; 254
    1f02:	5f 4f       	sbci	r21, 0xFF	; 255
    1f04:	9e 01       	movw	r18, r28
    1f06:	2c 5f       	subi	r18, 0xFC	; 252
    1f08:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0a:	8e 01       	movw	r16, r28
    1f0c:	0a 5f       	subi	r16, 0xFA	; 250
    1f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f10:	b8 e0       	ldi	r27, 0x08	; 8
    1f12:	eb 2e       	mov	r14, r27
    1f14:	f1 2c       	mov	r15, r1
    1f16:	ec 0e       	add	r14, r28
    1f18:	fd 1e       	adc	r15, r29
    1f1a:	aa e0       	ldi	r26, 0x0A	; 10
    1f1c:	ca 2e       	mov	r12, r26
    1f1e:	d1 2c       	mov	r13, r1
    1f20:	cc 0e       	add	r12, r28
    1f22:	dd 1e       	adc	r13, r29
    1f24:	5e 01       	movw	r10, r28
    1f26:	08 94       	sec
    1f28:	a1 1c       	adc	r10, r1
    1f2a:	b1 1c       	adc	r11, r1
    1f2c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_Z11init_actioniiPiS_S_S_S_Pb>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1f30:	c4 01       	movw	r24, r8
    1f32:	b3 01       	movw	r22, r6
    1f34:	ae 01       	movw	r20, r28
    1f36:	4e 5f       	subi	r20, 0xFE	; 254
    1f38:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3a:	9e 01       	movw	r18, r28
    1f3c:	2c 5f       	subi	r18, 0xFC	; 252
    1f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f40:	8e 01       	movw	r16, r28
    1f42:	0a 5f       	subi	r16, 0xFA	; 250
    1f44:	1f 4f       	sbci	r17, 0xFF	; 255
    1f46:	f8 e0       	ldi	r31, 0x08	; 8
    1f48:	ef 2e       	mov	r14, r31
    1f4a:	f1 2c       	mov	r15, r1
    1f4c:	ec 0e       	add	r14, r28
    1f4e:	fd 1e       	adc	r15, r29
    1f50:	ea e0       	ldi	r30, 0x0A	; 10
    1f52:	ce 2e       	mov	r12, r30
    1f54:	d1 2c       	mov	r13, r1
    1f56:	cc 0e       	add	r12, r28
    1f58:	dd 1e       	adc	r13, r29
    1f5a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z13brush1_actioniiPiS_S_S_S_>
				if(state == B1STOP2){
    1f5e:	6e e0       	ldi	r22, 0x0E	; 14
    1f60:	86 16       	cp	r8, r22
    1f62:	91 04       	cpc	r9, r1
    1f64:	51 f4       	brne	.+20     	; 0x1f7a <main+0x1216>
					brush1Motor = 0;
    1f66:	1f 82       	std	Y+7, r1	; 0x07
    1f68:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    1f6a:	1d 82       	std	Y+5, r1	; 0x05
    1f6c:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1f6e:	80 91 c8 03 	lds	r24, 0x03C8
    1f72:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1f74:	80 62       	ori	r24, 0x20	; 32
    1f76:	80 93 c8 03 	sts	0x03C8, r24
				}
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1f7a:	c4 01       	movw	r24, r8
    1f7c:	b3 01       	movw	r22, r6
    1f7e:	ae 01       	movw	r20, r28
    1f80:	4e 5f       	subi	r20, 0xFE	; 254
    1f82:	5f 4f       	sbci	r21, 0xFF	; 255
    1f84:	9e 01       	movw	r18, r28
    1f86:	2c 5f       	subi	r18, 0xFC	; 252
    1f88:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8a:	8e 01       	movw	r16, r28
    1f8c:	0a 5f       	subi	r16, 0xFA	; 250
    1f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f90:	b8 e0       	ldi	r27, 0x08	; 8
    1f92:	eb 2e       	mov	r14, r27
    1f94:	f1 2c       	mov	r15, r1
    1f96:	ec 0e       	add	r14, r28
    1f98:	fd 1e       	adc	r15, r29
    1f9a:	aa e0       	ldi	r26, 0x0A	; 10
    1f9c:	ca 2e       	mov	r12, r26
    1f9e:	d1 2c       	mov	r13, r1
    1fa0:	cc 0e       	add	r12, r28
    1fa2:	dd 1e       	adc	r13, r29
    1fa4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z13brush2_actioniiPiS_S_S_S_>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    1fa8:	c4 01       	movw	r24, r8
    1faa:	b3 01       	movw	r22, r6
    1fac:	ae 01       	movw	r20, r28
    1fae:	4e 5f       	subi	r20, 0xFE	; 254
    1fb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb2:	9e 01       	movw	r18, r28
    1fb4:	2c 5f       	subi	r18, 0xFC	; 252
    1fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb8:	8e 01       	movw	r16, r28
    1fba:	0a 5f       	subi	r16, 0xFA	; 250
    1fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbe:	f8 e0       	ldi	r31, 0x08	; 8
    1fc0:	ef 2e       	mov	r14, r31
    1fc2:	f1 2c       	mov	r15, r1
    1fc4:	ec 0e       	add	r14, r28
    1fc6:	fd 1e       	adc	r15, r29
    1fc8:	ea e0       	ldi	r30, 0x0A	; 10
    1fca:	ce 2e       	mov	r12, r30
    1fcc:	d1 2c       	mov	r13, r1
    1fce:	cc 0e       	add	r12, r28
    1fd0:	dd 1e       	adc	r13, r29
    1fd2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_Z10dry_actioniiPiS_S_S_S_>
				if(state == END){
    1fd6:	73 e2       	ldi	r23, 0x23	; 35
    1fd8:	87 16       	cp	r8, r23
    1fda:	91 04       	cpc	r9, r1
    1fdc:	81 f4       	brne	.+32     	; 0x1ffe <main+0x129a>
					plateLoadMotor = 0;
    1fde:	1b 82       	std	Y+3, r1	; 0x03
    1fe0:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1fe2:	80 91 c6 03 	lds	r24, 0x03C6
    1fe6:	8b 7f       	andi	r24, 0xFB	; 251
    1fe8:	80 93 c6 03 	sts	0x03C6, r24
					if(print35 == 1){
    1fec:	22 20       	and	r2, r2
    1fee:	39 f0       	breq	.+14     	; 0x1ffe <main+0x129a>
						OrangutanLCD::clear();
    1ff0:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1ff4:	84 e6       	ldi	r24, 0x64	; 100
    1ff6:	93 e0       	ldi	r25, 0x03	; 3
    1ff8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
    1ffc:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1ffe:	2a 81       	ldd	r18, Y+2	; 0x02
    2000:	3b 81       	ldd	r19, Y+3	; 0x03
    2002:	0c 81       	ldd	r16, Y+4	; 0x04
    2004:	1d 81       	ldd	r17, Y+5	; 0x05
    2006:	ee 80       	ldd	r14, Y+6	; 0x06
    2008:	ff 80       	ldd	r15, Y+7	; 0x07
    200a:	c8 84       	ldd	r12, Y+8	; 0x08
    200c:	d9 84       	ldd	r13, Y+9	; 0x09
    200e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2010:	bb 84       	ldd	r11, Y+11	; 0x0b
    2012:	c3 01       	movw	r24, r6
    2014:	b2 01       	movw	r22, r4
    2016:	4e 85       	ldd	r20, Y+14	; 0x0e
    2018:	5f 85       	ldd	r21, Y+15	; 0x0f
    201a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_Z15motor_and_writeiiiiiiii>
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>

		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("BOTH B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    2026:	84 e2       	ldi	r24, 0x24	; 36
    2028:	88 16       	cp	r8, r24
    202a:	91 04       	cpc	r9, r1
    202c:	09 f4       	brne	.+2      	; 0x2030 <main+0x12cc>
    202e:	73 c1       	rjmp	.+742    	; 0x2316 <main+0x15b2>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				counter ++;
    2030:	08 94       	sec
    2032:	61 1c       	adc	r6, r1
    2034:	71 1c       	adc	r7, r1
    2036:	c3 ce       	rjmp	.-634    	; 0x1dbe <main+0x105a>
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    203e:	88 23       	and	r24, r24
    2040:	09 f4       	brne	.+2      	; 0x2044 <main+0x12e0>
    2042:	69 c1       	rjmp	.+722    	; 0x2316 <main+0x15b2>
			OrangutanLCD::gotoXY(7,0);
    2044:	87 e0       	ldi	r24, 0x07	; 7
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("DEBUG");
    204c:	89 e6       	ldi	r24, 0x69	; 105
    204e:	91 e0       	ldi	r25, 0x01	; 1
    2050:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9d 83       	std	Y+5, r25	; 0x05
    205a:	8c 83       	std	Y+4, r24	; 0x04
    205c:	80 91 c6 03 	lds	r24, 0x03C6
    2060:	80 62       	ori	r24, 0x20	; 32
    2062:	80 93 c6 03 	sts	0x03C6, r24
    2066:	88 24       	eor	r8, r8
    2068:	99 24       	eor	r9, r9
    206a:	66 24       	eor	r6, r6
    206c:	77 24       	eor	r7, r7
    206e:	18 8e       	std	Y+24, r1	; 0x18
    2070:	1f 8a       	std	Y+23, r1	; 0x17
    2072:	44 24       	eor	r4, r4
    2074:	55 24       	eor	r5, r5
    2076:	22 24       	eor	r2, r2
    2078:	23 94       	inc	r2
    207a:	33 24       	eor	r3, r3
    207c:	33 94       	inc	r3
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    207e:	84 e4       	ldi	r24, 0x44	; 68
    2080:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    208a:	85 e4       	ldi	r24, 0x45	; 69
    208c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    2090:	0e 94 42 12 	call	0x2484	; 0x2484 <_Z11i2c_readAckv>
    2094:	80 93 ca 03 	sts	0x03CA, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2098:	0e 94 4c 12 	call	0x2498	; 0x2498 <_Z11i2c_readNakv>
    209c:	80 93 cb 03 	sts	0x03CB, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    20a0:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>
				
				if(state != INIT && print){
    20a4:	81 14       	cp	r8, r1
    20a6:	91 04       	cpc	r9, r1
    20a8:	d1 f0       	breq	.+52     	; 0x20de <main+0x137a>
    20aa:	33 20       	and	r3, r3
    20ac:	c1 f0       	breq	.+48     	; 0x20de <main+0x137a>
					OrangutanLCD::gotoXY(6,1);
    20ae:	86 e0       	ldi	r24, 0x06	; 6
    20b0:	61 e0       	ldi	r22, 0x01	; 1
    20b2:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("     ");
    20b6:	87 e5       	ldi	r24, 0x57	; 87
    20b8:	93 e0       	ldi	r25, 0x03	; 3
    20ba:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	61 e0       	ldi	r22, 0x01	; 1
    20c2:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    20c6:	8d e5       	ldi	r24, 0x5D	; 93
    20c8:	93 e0       	ldi	r25, 0x03	; 3
    20ca:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
    20ce:	b4 01       	movw	r22, r8
    20d0:	88 27       	eor	r24, r24
    20d2:	77 fd       	sbrc	r23, 7
    20d4:	80 95       	com	r24
    20d6:	98 2f       	mov	r25, r24
    20d8:	0e 94 fe 14 	call	0x29fc	; 0x29fc <_ZN12OrangutanLCD5printEl>
    20dc:	33 24       	eor	r3, r3
					OrangutanLCD::print(state);
					print = false;
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    20de:	c3 01       	movw	r24, r6
    20e0:	be 01       	movw	r22, r28
    20e2:	64 5f       	subi	r22, 0xF4	; 244
    20e4:	7f 4f       	sbci	r23, 0xFF	; 255
    20e6:	0e 94 81 02 	call	0x502	; 0x502 <_Z15button_debounceiPi>
    20ea:	18 2f       	mov	r17, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    20ec:	c4 01       	movw	r24, r8
    20ee:	61 2f       	mov	r22, r17
    20f0:	a3 01       	movw	r20, r6
    20f2:	92 01       	movw	r18, r4
    20f4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_Z10init_transibii>
    20f8:	88 23       	and	r24, r24
    20fa:	39 f0       	breq	.+14     	; 0x210a <main+0x13a6>
    20fc:	23 01       	movw	r4, r6
    20fe:	35 e2       	ldi	r19, 0x25	; 37
    2100:	83 2e       	mov	r8, r19
    2102:	91 2c       	mov	r9, r1
    2104:	10 e0       	ldi	r17, 0x00	; 0
    2106:	33 24       	eor	r3, r3
    2108:	33 94       	inc	r3
					counterRef = counter;
					print = true;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    210a:	c4 01       	movw	r24, r8
    210c:	b3 01       	movw	r22, r6
    210e:	a2 01       	movw	r20, r4
    2110:	0e 94 2c 03 	call	0x658	; 0x658 <_Z12firstB_transiii>
    2114:	88 23       	and	r24, r24
    2116:	71 f4       	brne	.+28     	; 0x2134 <main+0x13d0>
					state = WAIT;
					if(state != B1STOP1 && state != CLEAN1_3)
						counterRef = counter;
					print = true;
				}
				if(state == B1STOP2 && counter - counterRef > pWait){
    2118:	9e e0       	ldi	r25, 0x0E	; 14
    211a:	89 16       	cp	r8, r25
    211c:	91 04       	cpc	r9, r1
    211e:	81 f4       	brne	.+32     	; 0x2140 <main+0x13dc>
    2120:	93 01       	movw	r18, r6
    2122:	24 19       	sub	r18, r4
    2124:	35 09       	sbc	r19, r5
    2126:	80 91 8d 03 	lds	r24, 0x038D
    212a:	90 91 8e 03 	lds	r25, 0x038E
    212e:	82 17       	cp	r24, r18
    2130:	93 07       	cpc	r25, r19
    2132:	34 f4       	brge	.+12     	; 0x2140 <main+0x13dc>
    2134:	23 01       	movw	r4, r6
    2136:	25 e2       	ldi	r18, 0x25	; 37
    2138:	82 2e       	mov	r8, r18
    213a:	91 2c       	mov	r9, r1
    213c:	33 24       	eor	r3, r3
    213e:	33 94       	inc	r3
					print = true;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    2140:	c4 01       	movw	r24, r8
    2142:	b3 01       	movw	r22, r6
    2144:	a2 01       	movw	r20, r4
    2146:	0e 94 c4 03 	call	0x788	; 0x788 <_Z13secondB_transiii>
    214a:	88 23       	and	r24, r24
    214c:	31 f0       	breq	.+12     	; 0x215a <main+0x13f6>
    214e:	23 01       	movw	r4, r6
    2150:	95 e2       	ldi	r25, 0x25	; 37
    2152:	89 2e       	mov	r8, r25
    2154:	91 2c       	mov	r9, r1
    2156:	33 24       	eor	r3, r3
    2158:	33 94       	inc	r3
					counterRef = counter;
					print = true;
				}
				
				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    215a:	c4 01       	movw	r24, r8
    215c:	b3 01       	movw	r22, r6
    215e:	a2 01       	movw	r20, r4
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_Z9dry_transiiii>
    2168:	88 23       	and	r24, r24
    216a:	21 f0       	breq	.+8      	; 0x2174 <main+0x1410>
    216c:	23 01       	movw	r4, r6
    216e:	33 24       	eor	r3, r3
    2170:	33 94       	inc	r3
    2172:	11 c0       	rjmp	.+34     	; 0x2196 <main+0x1432>
					if(state == D1STOP)
						counterRefFive = counter;
					print = true;
				}

				if(state == END && counter - counterRef > 10){
    2174:	23 e2       	ldi	r18, 0x23	; 35
    2176:	82 16       	cp	r8, r18
    2178:	91 04       	cpc	r9, r1
    217a:	49 f4       	brne	.+18     	; 0x218e <main+0x142a>
    217c:	c3 01       	movw	r24, r6
    217e:	84 19       	sub	r24, r4
    2180:	95 09       	sbc	r25, r5
    2182:	0b 97       	sbiw	r24, 0x0b	; 11
    2184:	54 f1       	brlt	.+84     	; 0x21da <main+0x1476>
    2186:	84 e2       	ldi	r24, 0x24	; 36
    2188:	88 2e       	mov	r8, r24
    218a:	91 2c       	mov	r9, r1
    218c:	26 c0       	rjmp	.+76     	; 0x21da <main+0x1476>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    218e:	35 e2       	ldi	r19, 0x25	; 37
    2190:	83 16       	cp	r8, r19
    2192:	91 04       	cpc	r9, r1
    2194:	11 f5       	brne	.+68     	; 0x21da <main+0x1476>
    2196:	11 23       	and	r17, r17
    2198:	21 f4       	brne	.+8      	; 0x21a2 <main+0x143e>
    219a:	05 e2       	ldi	r16, 0x25	; 37
    219c:	80 2e       	mov	r8, r16
    219e:	91 2c       	mov	r9, r1
    21a0:	12 c0       	rjmp	.+36     	; 0x21c6 <main+0x1462>
					state = ++last;
    21a2:	6f 89       	ldd	r22, Y+23	; 0x17
    21a4:	78 8d       	ldd	r23, Y+24	; 0x18
    21a6:	6f 5f       	subi	r22, 0xFF	; 255
    21a8:	7f 4f       	sbci	r23, 0xFF	; 255
    21aa:	78 8f       	std	Y+24, r23	; 0x18
    21ac:	6f 8b       	std	Y+23, r22	; 0x17
				}


				//state actions
						
				if(state == WAIT){
    21ae:	65 32       	cpi	r22, 0x25	; 37
    21b0:	71 05       	cpc	r23, r1
    21b2:	21 f0       	breq	.+8      	; 0x21bc <main+0x1458>
    21b4:	4b 01       	movw	r8, r22
    21b6:	33 24       	eor	r3, r3
    21b8:	33 94       	inc	r3
    21ba:	0f c0       	rjmp	.+30     	; 0x21da <main+0x1476>
    21bc:	15 e2       	ldi	r17, 0x25	; 37
    21be:	81 2e       	mov	r8, r17
    21c0:	91 2c       	mov	r9, r1
    21c2:	33 24       	eor	r3, r3
    21c4:	33 94       	inc	r3
					plateLoadMotor = 0;
    21c6:	1b 82       	std	Y+3, r1	; 0x03
    21c8:	1a 82       	std	Y+2, r1	; 0x02
					fixtureMotor = 0;
    21ca:	1d 82       	std	Y+5, r1	; 0x05
    21cc:	1c 82       	std	Y+4, r1	; 0x04
					brush1Motor = 0;
    21ce:	1f 82       	std	Y+7, r1	; 0x07
    21d0:	1e 82       	std	Y+6, r1	; 0x06
					brush2Motor = 0;
    21d2:	19 86       	std	Y+9, r1	; 0x09
    21d4:	18 86       	std	Y+8, r1	; 0x08
					paperTowelMotor = 0;
    21d6:	1b 86       	std	Y+11, r1	; 0x0b
    21d8:	1a 86       	std	Y+10, r1	; 0x0a
				}
				init_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor, &print0);
    21da:	c4 01       	movw	r24, r8
    21dc:	b3 01       	movw	r22, r6
    21de:	ae 01       	movw	r20, r28
    21e0:	4e 5f       	subi	r20, 0xFE	; 254
    21e2:	5f 4f       	sbci	r21, 0xFF	; 255
    21e4:	9e 01       	movw	r18, r28
    21e6:	2c 5f       	subi	r18, 0xFC	; 252
    21e8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ea:	8e 01       	movw	r16, r28
    21ec:	0a 5f       	subi	r16, 0xFA	; 250
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	b8 e0       	ldi	r27, 0x08	; 8
    21f2:	eb 2e       	mov	r14, r27
    21f4:	f1 2c       	mov	r15, r1
    21f6:	ec 0e       	add	r14, r28
    21f8:	fd 1e       	adc	r15, r29
    21fa:	aa e0       	ldi	r26, 0x0A	; 10
    21fc:	ca 2e       	mov	r12, r26
    21fe:	d1 2c       	mov	r13, r1
    2200:	cc 0e       	add	r12, r28
    2202:	dd 1e       	adc	r13, r29
    2204:	5e 01       	movw	r10, r28
    2206:	08 94       	sec
    2208:	a1 1c       	adc	r10, r1
    220a:	b1 1c       	adc	r11, r1
    220c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_Z11init_actioniiPiS_S_S_S_Pb>
				brush1_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2210:	c4 01       	movw	r24, r8
    2212:	b3 01       	movw	r22, r6
    2214:	ae 01       	movw	r20, r28
    2216:	4e 5f       	subi	r20, 0xFE	; 254
    2218:	5f 4f       	sbci	r21, 0xFF	; 255
    221a:	9e 01       	movw	r18, r28
    221c:	2c 5f       	subi	r18, 0xFC	; 252
    221e:	3f 4f       	sbci	r19, 0xFF	; 255
    2220:	8e 01       	movw	r16, r28
    2222:	0a 5f       	subi	r16, 0xFA	; 250
    2224:	1f 4f       	sbci	r17, 0xFF	; 255
    2226:	f8 e0       	ldi	r31, 0x08	; 8
    2228:	ef 2e       	mov	r14, r31
    222a:	f1 2c       	mov	r15, r1
    222c:	ec 0e       	add	r14, r28
    222e:	fd 1e       	adc	r15, r29
    2230:	ea e0       	ldi	r30, 0x0A	; 10
    2232:	ce 2e       	mov	r12, r30
    2234:	d1 2c       	mov	r13, r1
    2236:	cc 0e       	add	r12, r28
    2238:	dd 1e       	adc	r13, r29
    223a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z13brush1_actioniiPiS_S_S_S_>
				if(state == B1STOP2){
    223e:	7e e0       	ldi	r23, 0x0E	; 14
    2240:	87 16       	cp	r8, r23
    2242:	91 04       	cpc	r9, r1
    2244:	51 f4       	brne	.+20     	; 0x225a <main+0x14f6>
					brush1Motor = 0;
    2246:	1f 82       	std	Y+7, r1	; 0x07
    2248:	1e 82       	std	Y+6, r1	; 0x06
					fixtureMotor = 0;
    224a:	1d 82       	std	Y+5, r1	; 0x05
    224c:	1c 82       	std	Y+4, r1	; 0x04
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    224e:	80 91 c8 03 	lds	r24, 0x03C8
    2252:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2254:	80 62       	ori	r24, 0x20	; 32
    2256:	80 93 c8 03 	sts	0x03C8, r24
				}		
				brush2_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    225a:	c4 01       	movw	r24, r8
    225c:	b3 01       	movw	r22, r6
    225e:	ae 01       	movw	r20, r28
    2260:	4e 5f       	subi	r20, 0xFE	; 254
    2262:	5f 4f       	sbci	r21, 0xFF	; 255
    2264:	9e 01       	movw	r18, r28
    2266:	2c 5f       	subi	r18, 0xFC	; 252
    2268:	3f 4f       	sbci	r19, 0xFF	; 255
    226a:	8e 01       	movw	r16, r28
    226c:	0a 5f       	subi	r16, 0xFA	; 250
    226e:	1f 4f       	sbci	r17, 0xFF	; 255
    2270:	b8 e0       	ldi	r27, 0x08	; 8
    2272:	eb 2e       	mov	r14, r27
    2274:	f1 2c       	mov	r15, r1
    2276:	ec 0e       	add	r14, r28
    2278:	fd 1e       	adc	r15, r29
    227a:	aa e0       	ldi	r26, 0x0A	; 10
    227c:	ca 2e       	mov	r12, r26
    227e:	d1 2c       	mov	r13, r1
    2280:	cc 0e       	add	r12, r28
    2282:	dd 1e       	adc	r13, r29
    2284:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z13brush2_actioniiPiS_S_S_S_>
				dry_action(state, counter, &plateLoadMotor, &fixtureMotor, &brush1Motor, &brush2Motor, &paperTowelMotor);
    2288:	c4 01       	movw	r24, r8
    228a:	b3 01       	movw	r22, r6
    228c:	ae 01       	movw	r20, r28
    228e:	4e 5f       	subi	r20, 0xFE	; 254
    2290:	5f 4f       	sbci	r21, 0xFF	; 255
    2292:	9e 01       	movw	r18, r28
    2294:	2c 5f       	subi	r18, 0xFC	; 252
    2296:	3f 4f       	sbci	r19, 0xFF	; 255
    2298:	8e 01       	movw	r16, r28
    229a:	0a 5f       	subi	r16, 0xFA	; 250
    229c:	1f 4f       	sbci	r17, 0xFF	; 255
    229e:	f8 e0       	ldi	r31, 0x08	; 8
    22a0:	ef 2e       	mov	r14, r31
    22a2:	f1 2c       	mov	r15, r1
    22a4:	ec 0e       	add	r14, r28
    22a6:	fd 1e       	adc	r15, r29
    22a8:	ea e0       	ldi	r30, 0x0A	; 10
    22aa:	ce 2e       	mov	r12, r30
    22ac:	d1 2c       	mov	r13, r1
    22ae:	cc 0e       	add	r12, r28
    22b0:	dd 1e       	adc	r13, r29
    22b2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_Z10dry_actioniiPiS_S_S_S_>
				if(state == END){
    22b6:	83 e2       	ldi	r24, 0x23	; 35
    22b8:	88 16       	cp	r8, r24
    22ba:	91 04       	cpc	r9, r1
    22bc:	81 f4       	brne	.+32     	; 0x22de <main+0x157a>
					plateLoadMotor = 0;
    22be:	1b 82       	std	Y+3, r1	; 0x03
    22c0:	1a 82       	std	Y+2, r1	; 0x02
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    22c2:	80 91 c6 03 	lds	r24, 0x03C6
    22c6:	8b 7f       	andi	r24, 0xFB	; 251
    22c8:	80 93 c6 03 	sts	0x03C6, r24
					if(print35 == 1){
    22cc:	22 20       	and	r2, r2
    22ce:	39 f0       	breq	.+14     	; 0x22de <main+0x157a>
						OrangutanLCD::clear();
    22d0:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    22d4:	84 e6       	ldi	r24, 0x64	; 100
    22d6:	93 e0       	ldi	r25, 0x03	; 3
    22d8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
    22dc:	22 24       	eor	r2, r2
						print35 = 0;
					}
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    22de:	2a 81       	ldd	r18, Y+2	; 0x02
    22e0:	3b 81       	ldd	r19, Y+3	; 0x03
    22e2:	0c 81       	ldd	r16, Y+4	; 0x04
    22e4:	1d 81       	ldd	r17, Y+5	; 0x05
    22e6:	ee 80       	ldd	r14, Y+6	; 0x06
    22e8:	ff 80       	ldd	r15, Y+7	; 0x07
    22ea:	c8 84       	ldd	r12, Y+8	; 0x08
    22ec:	d9 84       	ldd	r13, Y+9	; 0x09
    22ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    22f0:	bb 84       	ldd	r11, Y+11	; 0x0b
    22f2:	c3 01       	movw	r24, r6
    22f4:	b2 01       	movw	r22, r4
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_Z15motor_and_writeiiiiiiii>
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    2306:	94 e2       	ldi	r25, 0x24	; 36
    2308:	89 16       	cp	r8, r25
    230a:	91 04       	cpc	r9, r1
    230c:	21 f0       	breq	.+8      	; 0x2316 <main+0x15b2>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				counter ++;
    230e:	08 94       	sec
    2310:	61 1c       	adc	r6, r1
    2312:	71 1c       	adc	r7, r1
    2314:	b4 ce       	rjmp	.-664    	; 0x207e <main+0x131a>
				delay_ms(1);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2316:	80 91 c6 03 	lds	r24, 0x03C6
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    231a:	8b 7d       	andi	r24, 0xDB	; 219
    231c:	80 93 c6 03 	sts	0x03C6, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    2320:	80 91 c7 03 	lds	r24, 0x03C7
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    2324:	86 7b       	andi	r24, 0xB6	; 182
    2326:	80 93 c7 03 	sts	0x03C7, r24
		
		i2c_start(I2C1+I2C_WRITE);
    232a:	80 e4       	ldi	r24, 0x40	; 64
    232c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>
		i2c_write(0x2);
    2330:	82 e0       	ldi	r24, 0x02	; 2
    2332:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
    2336:	80 91 c6 03 	lds	r24, 0x03C6
    233a:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
    233e:	80 91 c7 03 	lds	r24, 0x03C7
    2342:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z9i2c_writeh>
		i2c_stop();
    2346:	0e 94 28 12 	call	0x2450	; 0x2450 <_Z8i2c_stopv>
	}
	OrangutanLCD::print("END");
    234a:	89 e8       	ldi	r24, 0x89	; 137
    234c:	93 e0       	ldi	r25, 0x03	; 3
    234e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
    2352:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <main+0x36>
					print = true;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
					switched = true;
				}
				if(switched){
    2356:	2c 89       	ldd	r18, Y+20	; 0x14
    2358:	22 23       	and	r18, r18
    235a:	11 f4       	brne	.+4      	; 0x2360 <main+0x15fc>
    235c:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <main+0x478>
    2360:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <main+0x446>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    236a:	88 23       	and	r24, r24
    236c:	09 f0       	breq	.+2      	; 0x2370 <main+0x160c>
    236e:	c5 cb       	rjmp	.-2166   	; 0x1afa <main+0xd96>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    2376:	88 23       	and	r24, r24
    2378:	09 f4       	brne	.+2      	; 0x237c <main+0x1618>
    237a:	fe cc       	rjmp	.-1540   	; 0x1d78 <main+0x1014>
				counter ++;
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	0e 94 93 00 	call	0x126	; 0x126 <_ZN16OrangutanDigital11isInputHighEh>
    2382:	88 23       	and	r24, r24
    2384:	41 f2       	breq	.-112    	; 0x2316 <main+0x15b2>
    2386:	58 ce       	rjmp	.-848    	; 0x2038 <main+0x12d4>
    2388:	12 01       	movw	r2, r4
    238a:	99 24       	eor	r9, r9
    238c:	93 94       	inc	r9
    238e:	8c e2       	ldi	r24, 0x2C	; 44
    2390:	68 2e       	mov	r6, r24
    2392:	71 2c       	mov	r7, r1
    2394:	f2 c9       	rjmp	.-3100   	; 0x177a <main+0xa16>

00002396 <_ZdlPv>:
  return malloc(size); 
} 

void operator delete(void * ptr) 
{ 
  free(ptr); 
    2396:	0e 94 fe 18 	call	0x31fc	; 0x31fc <free>
} 
    239a:	08 95       	ret

0000239c <_Znwj>:
void * operator new(size_t size); 
void operator delete(void * ptr); 

void * operator new(size_t size) 
{ 
  return malloc(size); 
    239c:	0e 94 51 18 	call	0x30a2	; 0x30a2 <malloc>
} 
    23a0:	08 95       	ret

000023a2 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    23a2:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    23a6:	8c e0       	ldi	r24, 0x0C	; 12
    23a8:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    23ac:	08 95       	ret

000023ae <_Z9i2c_starth>:

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    23ae:	98 2f       	mov	r25, r24
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    23b0:	84 ea       	ldi	r24, 0xA4	; 164
    23b2:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    23b6:	80 91 bc 00 	lds	r24, 0x00BC
    23ba:	87 ff       	sbrs	r24, 7
    23bc:	fc cf       	rjmp	.-8      	; 0x23b6 <_Z9i2c_starth+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    23be:	80 91 b9 00 	lds	r24, 0x00B9
    23c2:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    23c4:	88 30       	cpi	r24, 0x08	; 8
    23c6:	21 f0       	breq	.+8      	; 0x23d0 <_Z9i2c_starth+0x22>
    23c8:	80 31       	cpi	r24, 0x10	; 16
    23ca:	11 f0       	breq	.+4      	; 0x23d0 <_Z9i2c_starth+0x22>
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	08 95       	ret

	// send device address
	TWDR = address;
    23d0:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    23d4:	84 e8       	ldi	r24, 0x84	; 132
    23d6:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    23da:	80 91 bc 00 	lds	r24, 0x00BC
    23de:	87 ff       	sbrs	r24, 7
    23e0:	fc cf       	rjmp	.-8      	; 0x23da <_Z9i2c_starth+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    23e2:	90 91 b9 00 	lds	r25, 0x00B9
    23e6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    23e8:	98 31       	cpi	r25, 0x18	; 24
    23ea:	11 f4       	brne	.+4      	; 0x23f0 <_Z9i2c_starth+0x42>
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	08 95       	ret
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 34       	cpi	r25, 0x40	; 64
    23f4:	09 f0       	breq	.+2      	; 0x23f8 <_Z9i2c_starth+0x4a>
    23f6:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    23f8:	08 95       	ret

000023fa <_Z14i2c_start_waith>:
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
    23fa:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    23fc:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    23fe:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2400:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2402:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2406:	80 91 bc 00 	lds	r24, 0x00BC
    240a:	87 ff       	sbrs	r24, 7
    240c:	fc cf       	rjmp	.-8      	; 0x2406 <_Z14i2c_start_waith+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    240e:	80 91 b9 00 	lds	r24, 0x00B9
    2412:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2414:	88 30       	cpi	r24, 0x08	; 8
    2416:	11 f0       	breq	.+4      	; 0x241c <_Z14i2c_start_waith+0x22>
    2418:	80 31       	cpi	r24, 0x10	; 16
    241a:	99 f7       	brne	.-26     	; 0x2402 <_Z14i2c_start_waith+0x8>
    
    	// send device address
    	TWDR = address;
    241c:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2420:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2424:	80 91 bc 00 	lds	r24, 0x00BC
    2428:	87 ff       	sbrs	r24, 7
    242a:	fc cf       	rjmp	.-8      	; 0x2424 <_Z14i2c_start_waith+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    242c:	80 91 b9 00 	lds	r24, 0x00B9
    2430:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2432:	80 32       	cpi	r24, 0x20	; 32
    2434:	11 f0       	breq	.+4      	; 0x243a <_Z14i2c_start_waith+0x40>
    2436:	88 35       	cpi	r24, 0x58	; 88
    2438:	39 f4       	brne	.+14     	; 0x2448 <_Z14i2c_start_waith+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    243a:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    243e:	80 91 bc 00 	lds	r24, 0x00BC
    2442:	84 fd       	sbrc	r24, 4
    2444:	fc cf       	rjmp	.-8      	; 0x243e <_Z14i2c_start_waith+0x44>
    2446:	dd cf       	rjmp	.-70     	; 0x2402 <_Z14i2c_start_waith+0x8>
    2448:	08 95       	ret

0000244a <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    244a:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z9i2c_starth>

}/* i2c_rep_start */
    244e:	08 95       	ret

00002450 <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2450:	84 e9       	ldi	r24, 0x94	; 148
    2452:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2456:	80 91 bc 00 	lds	r24, 0x00BC
    245a:	84 fd       	sbrc	r24, 4
    245c:	fc cf       	rjmp	.-8      	; 0x2456 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    245e:	08 95       	ret

00002460 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2460:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2464:	84 e8       	ldi	r24, 0x84	; 132
    2466:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    246a:	80 91 bc 00 	lds	r24, 0x00BC
    246e:	87 ff       	sbrs	r24, 7
    2470:	fc cf       	rjmp	.-8      	; 0x246a <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2472:	80 91 b9 00 	lds	r24, 0x00B9
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	88 7f       	andi	r24, 0xF8	; 248
    247a:	88 32       	cpi	r24, 0x28	; 40
    247c:	09 f0       	breq	.+2      	; 0x2480 <_Z9i2c_writeh+0x20>
    247e:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    2480:	89 2f       	mov	r24, r25
    2482:	08 95       	ret

00002484 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2484:	84 ec       	ldi	r24, 0xC4	; 196
    2486:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    248a:	80 91 bc 00 	lds	r24, 0x00BC
    248e:	87 ff       	sbrs	r24, 7
    2490:	fc cf       	rjmp	.-8      	; 0x248a <_Z11i2c_readAckv+0x6>

    return TWDR;
    2492:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    2496:	08 95       	ret

00002498 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2498:	84 e8       	ldi	r24, 0x84	; 132
    249a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    249e:	80 91 bc 00 	lds	r24, 0x00BC
    24a2:	87 ff       	sbrs	r24, 7
    24a4:	fc cf       	rjmp	.-8      	; 0x249e <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    24a6:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    24aa:	08 95       	ret

000024ac <_ZN12OrangutanLCDC2Ev>:
    24ac:	08 95       	ret

000024ae <_ZN12OrangutanLCDC1Ev>:
    24ae:	08 95       	ret

000024b0 <void_getchar>:
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	08 95       	ret

000024b6 <_ZN12OrangutanLCD8busyWaitEv>:
    24b6:	ef 92       	push	r14
    24b8:	ff 92       	push	r15
    24ba:	0f 93       	push	r16
    24bc:	1f 93       	push	r17
    24be:	67 b1       	in	r22, 0x07	; 7
    24c0:	3d 98       	cbi	0x07, 5	; 7
    24c2:	28 98       	cbi	0x05, 0	; 5
    24c4:	29 9a       	sbi	0x05, 1	; 5
    24c6:	e0 90 d4 03 	lds	r14, 0x03D4
    24ca:	f0 90 d5 03 	lds	r15, 0x03D5
    24ce:	00 91 d6 03 	lds	r16, 0x03D6
    24d2:	10 91 d7 03 	lds	r17, 0x03D7
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	50 e0       	ldi	r21, 0x00	; 0
    24de:	ca 01       	movw	r24, r20
    24e0:	6f 93       	push	r22
    24e2:	64 e0       	ldi	r22, 0x04	; 4
    24e4:	6a 95       	dec	r22
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    24e8:	6f 91       	pop	r22
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	c9 f7       	brne	.-14     	; 0x24e0 <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    24ee:	2a 9a       	sbi	0x05, 2	; 5
    24f0:	ca 01       	movw	r24, r20
    24f2:	6f 93       	push	r22
    24f4:	64 e0       	ldi	r22, 0x04	; 4
    24f6:	6a 95       	dec	r22
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    24fa:	6f 91       	pop	r22
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	c9 f7       	brne	.-14     	; 0x24f2 <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    2500:	86 b1       	in	r24, 0x06	; 6
    2502:	2a 98       	cbi	0x05, 2	; 5
    2504:	fa 01       	movw	r30, r20
    2506:	6f 93       	push	r22
    2508:	64 e0       	ldi	r22, 0x04	; 4
    250a:	6a 95       	dec	r22
    250c:	f1 f7       	brne	.-4      	; 0x250a <_ZN12OrangutanLCD8busyWaitEv+0x54>
    250e:	6f 91       	pop	r22
    2510:	31 97       	sbiw	r30, 0x01	; 1
    2512:	c9 f7       	brne	.-14     	; 0x2506 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    2514:	2a 9a       	sbi	0x05, 2	; 5
    2516:	fa 01       	movw	r30, r20
    2518:	6f 93       	push	r22
    251a:	64 e0       	ldi	r22, 0x04	; 4
    251c:	6a 95       	dec	r22
    251e:	f1 f7       	brne	.-4      	; 0x251c <_ZN12OrangutanLCD8busyWaitEv+0x66>
    2520:	6f 91       	pop	r22
    2522:	31 97       	sbiw	r30, 0x01	; 1
    2524:	c9 f7       	brne	.-14     	; 0x2518 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    2526:	2a 98       	cbi	0x05, 2	; 5
    2528:	2c 5f       	subi	r18, 0xFC	; 252
    252a:	3f 4f       	sbci	r19, 0xFF	; 255
    252c:	85 ff       	sbrs	r24, 5
    252e:	09 c0       	rjmp	.+18     	; 0x2542 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    2530:	c9 01       	movw	r24, r18
    2532:	a0 e0       	ldi	r26, 0x00	; 0
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	8e 15       	cp	r24, r14
    2538:	9f 05       	cpc	r25, r15
    253a:	a0 07       	cpc	r26, r16
    253c:	b1 07       	cpc	r27, r17
    253e:	08 f4       	brcc	.+2      	; 0x2542 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    2540:	ce cf       	rjmp	.-100    	; 0x24de <_ZN12OrangutanLCD8busyWaitEv+0x28>
    2542:	c9 01       	movw	r24, r18
    2544:	a0 e0       	ldi	r26, 0x00	; 0
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	8e 15       	cp	r24, r14
    254a:	9f 05       	cpc	r25, r15
    254c:	a0 07       	cpc	r26, r16
    254e:	b1 07       	cpc	r27, r17
    2550:	28 f0       	brcs	.+10     	; 0x255c <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    2552:	82 e3       	ldi	r24, 0x32	; 50
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	a0 e0       	ldi	r26, 0x00	; 0
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	04 c0       	rjmp	.+8      	; 0x2564 <_ZN12OrangutanLCD8busyWaitEv+0xae>
    255c:	80 e3       	ldi	r24, 0x30	; 48
    255e:	95 e7       	ldi	r25, 0x75	; 117
    2560:	a0 e0       	ldi	r26, 0x00	; 0
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	80 93 d4 03 	sts	0x03D4, r24
    2568:	90 93 d5 03 	sts	0x03D5, r25
    256c:	a0 93 d6 03 	sts	0x03D6, r26
    2570:	b0 93 d7 03 	sts	0x03D7, r27
    2574:	67 b9       	out	0x07, r22	; 7
    2576:	1f 91       	pop	r17
    2578:	0f 91       	pop	r16
    257a:	ff 90       	pop	r15
    257c:	ef 90       	pop	r14
    257e:	08 95       	ret

00002580 <_ZN12OrangutanLCD8sendDataEh>:
    2580:	28 b1       	in	r18, 0x08	; 8
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	8f 70       	andi	r24, 0x0F	; 15
    2586:	90 70       	andi	r25, 0x00	; 0
    2588:	88 0f       	add	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	23 7c       	andi	r18, 0xC3	; 195
    2592:	28 2b       	or	r18, r24
    2594:	28 b9       	out	0x08, r18	; 8
    2596:	2a 9a       	sbi	0x05, 2	; 5
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	fc 01       	movw	r30, r24
    259e:	6f 93       	push	r22
    25a0:	64 e0       	ldi	r22, 0x04	; 4
    25a2:	6a 95       	dec	r22
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <_ZN12OrangutanLCD8sendDataEh+0x22>
    25a6:	6f 91       	pop	r22
    25a8:	31 97       	sbiw	r30, 0x01	; 1
    25aa:	c9 f7       	brne	.-14     	; 0x259e <_ZN12OrangutanLCD8sendDataEh+0x1e>
    25ac:	2a 98       	cbi	0x05, 2	; 5
    25ae:	6f 93       	push	r22
    25b0:	64 e0       	ldi	r22, 0x04	; 4
    25b2:	6a 95       	dec	r22
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <_ZN12OrangutanLCD8sendDataEh+0x32>
    25b6:	6f 91       	pop	r22
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	c9 f7       	brne	.-14     	; 0x25ae <_ZN12OrangutanLCD8sendDataEh+0x2e>
    25bc:	08 95       	ret

000025be <_ZN12OrangutanLCD10initPrintfEv>:
    25be:	80 91 d0 03 	lds	r24, 0x03D0
    25c2:	90 91 d1 03 	lds	r25, 0x03D1
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	11 f0       	breq	.+4      	; 0x25ce <_ZN12OrangutanLCD10initPrintfEv+0x10>
    25ca:	0e 94 fe 18 	call	0x31fc	; 0x31fc <free>
    25ce:	80 91 bd 03 	lds	r24, 0x03BD
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	20 91 be 03 	lds	r18, 0x03BE
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	ac 01       	movw	r20, r24
    25de:	42 9f       	mul	r20, r18
    25e0:	c0 01       	movw	r24, r0
    25e2:	43 9f       	mul	r20, r19
    25e4:	90 0d       	add	r25, r0
    25e6:	52 9f       	mul	r21, r18
    25e8:	90 0d       	add	r25, r0
    25ea:	11 24       	eor	r1, r1
    25ec:	0e 94 51 18 	call	0x30a2	; 0x30a2 <malloc>
    25f0:	90 93 d1 03 	sts	0x03D1, r25
    25f4:	80 93 d0 03 	sts	0x03D0, r24
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	29 f1       	breq	.+74     	; 0x2646 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	70 e2       	ldi	r23, 0x20	; 32
    2600:	08 c0       	rjmp	.+16     	; 0x2612 <_ZN12OrangutanLCD10initPrintfEv+0x54>
    2602:	e0 91 d0 03 	lds	r30, 0x03D0
    2606:	f0 91 d1 03 	lds	r31, 0x03D1
    260a:	e4 0f       	add	r30, r20
    260c:	f5 1f       	adc	r31, r21
    260e:	70 83       	st	Z, r23
    2610:	6f 5f       	subi	r22, 0xFF	; 255
    2612:	46 2f       	mov	r20, r22
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	80 91 bd 03 	lds	r24, 0x03BD
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	20 91 be 03 	lds	r18, 0x03BE
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	fc 01       	movw	r30, r24
    2626:	e2 9f       	mul	r30, r18
    2628:	c0 01       	movw	r24, r0
    262a:	e3 9f       	mul	r30, r19
    262c:	90 0d       	add	r25, r0
    262e:	f2 9f       	mul	r31, r18
    2630:	90 0d       	add	r25, r0
    2632:	11 24       	eor	r1, r1
    2634:	48 17       	cp	r20, r24
    2636:	59 07       	cpc	r21, r25
    2638:	24 f3       	brlt	.-56     	; 0x2602 <_ZN12OrangutanLCD10initPrintfEv+0x44>
    263a:	84 e4       	ldi	r24, 0x44	; 68
    263c:	95 e1       	ldi	r25, 0x15	; 21
    263e:	68 e5       	ldi	r22, 0x58	; 88
    2640:	72 e1       	ldi	r23, 0x12	; 18
    2642:	0e 94 56 19 	call	0x32ac	; 0x32ac <fdevopen>
    2646:	08 95       	ret

00002648 <_ZN12OrangutanLCD10initPrintfEhh>:
    2648:	80 93 be 03 	sts	0x03BE, r24
    264c:	60 93 bd 03 	sts	0x03BD, r22
    2650:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN12OrangutanLCD10initPrintfEv>
    2654:	08 95       	ret

00002656 <lcd_init_printf_with_dimensions>:
    2656:	80 93 be 03 	sts	0x03BE, r24
    265a:	60 93 bd 03 	sts	0x03BD, r22
    265e:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN12OrangutanLCD10initPrintfEv>
    2662:	08 95       	ret

00002664 <lcd_init_printf>:
    2664:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN12OrangutanLCD10initPrintfEv>
    2668:	08 95       	ret

0000266a <_ZN12OrangutanLCD5init2Ev>:
    266a:	3d 98       	cbi	0x07, 5	; 7
    266c:	45 9a       	sbi	0x08, 5	; 8
    266e:	80 e3       	ldi	r24, 0x30	; 48
    2670:	95 e7       	ldi	r25, 0x75	; 117
    2672:	a0 e0       	ldi	r26, 0x00	; 0
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	80 93 d4 03 	sts	0x03D4, r24
    267a:	90 93 d5 03 	sts	0x03D5, r25
    267e:	a0 93 d6 03 	sts	0x03D6, r26
    2682:	b0 93 d7 03 	sts	0x03D7, r27
    2686:	20 9a       	sbi	0x04, 0	; 4
    2688:	21 9a       	sbi	0x04, 1	; 4
    268a:	22 9a       	sbi	0x04, 2	; 4
    268c:	8e e1       	ldi	r24, 0x1E	; 30
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>
    2694:	83 e0       	ldi	r24, 0x03	; 3
    2696:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    269a:	86 e0       	ldi	r24, 0x06	; 6
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>
    26a2:	83 e0       	ldi	r24, 0x03	; 3
    26a4:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    26a8:	82 e0       	ldi	r24, 0x02	; 2
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>
    26b0:	83 e0       	ldi	r24, 0x03	; 3
    26b2:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    26b6:	82 e0       	ldi	r24, 0x02	; 2
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>
    26be:	82 e0       	ldi	r24, 0x02	; 2
    26c0:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    26c4:	82 e0       	ldi	r24, 0x02	; 2
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>
    26cc:	88 e2       	ldi	r24, 0x28	; 40
    26ce:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN12OrangutanLCD8send_cmdEh>
    26d2:	88 e0       	ldi	r24, 0x08	; 8
    26d4:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN12OrangutanLCD8send_cmdEh>
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN12OrangutanLCD8send_cmdEh>
    26de:	86 e0       	ldi	r24, 0x06	; 6
    26e0:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN12OrangutanLCD8send_cmdEh>
    26e4:	8c e0       	ldi	r24, 0x0C	; 12
    26e6:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN12OrangutanLCD8send_cmdEh>
    26ea:	08 95       	ret

000026ec <_ZN12OrangutanLCD4initEv>:
    26ec:	80 91 d8 03 	lds	r24, 0x03D8
    26f0:	88 23       	and	r24, r24
    26f2:	29 f4       	brne	.+10     	; 0x26fe <_ZN12OrangutanLCD4initEv+0x12>
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	80 93 d8 03 	sts	0x03D8, r24
    26fa:	0e 94 35 13 	call	0x266a	; 0x266a <_ZN12OrangutanLCD5init2Ev>
    26fe:	08 95       	ret

00002700 <_ZN12OrangutanLCD4sendEhhh>:
    2700:	ff 92       	push	r15
    2702:	0f 93       	push	r16
    2704:	1f 93       	push	r17
    2706:	08 2f       	mov	r16, r24
    2708:	16 2f       	mov	r17, r22
    270a:	f4 2e       	mov	r15, r20
    270c:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN12OrangutanLCD4initEv>
    2710:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <_ZN12OrangutanLCD8busyWaitEv>
    2714:	37 b1       	in	r19, 0x07	; 7
    2716:	28 b1       	in	r18, 0x08	; 8
    2718:	29 98       	cbi	0x05, 1	; 5
    271a:	11 23       	and	r17, r17
    271c:	11 f0       	breq	.+4      	; 0x2722 <_ZN12OrangutanLCD4sendEhhh+0x22>
    271e:	28 9a       	sbi	0x05, 0	; 5
    2720:	01 c0       	rjmp	.+2      	; 0x2724 <_ZN12OrangutanLCD4sendEhhh+0x24>
    2722:	28 98       	cbi	0x05, 0	; 5
    2724:	87 b1       	in	r24, 0x07	; 7
    2726:	8c 63       	ori	r24, 0x3C	; 60
    2728:	87 b9       	out	0x07, r24	; 7
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	f8 16       	cp	r15, r24
    272e:	e1 f0       	breq	.+56     	; 0x2768 <_ZN12OrangutanLCD4sendEhhh+0x68>
    2730:	88 b1       	in	r24, 0x08	; 8
    2732:	90 2f       	mov	r25, r16
    2734:	92 95       	swap	r25
    2736:	9f 70       	andi	r25, 0x0F	; 15
    2738:	99 0f       	add	r25, r25
    273a:	99 0f       	add	r25, r25
    273c:	83 7c       	andi	r24, 0xC3	; 195
    273e:	98 2b       	or	r25, r24
    2740:	98 b9       	out	0x08, r25	; 8
    2742:	2a 9a       	sbi	0x05, 2	; 5
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	fc 01       	movw	r30, r24
    274a:	6f 93       	push	r22
    274c:	64 e0       	ldi	r22, 0x04	; 4
    274e:	6a 95       	dec	r22
    2750:	f1 f7       	brne	.-4      	; 0x274e <_ZN12OrangutanLCD4sendEhhh+0x4e>
    2752:	6f 91       	pop	r22
    2754:	31 97       	sbiw	r30, 0x01	; 1
    2756:	c9 f7       	brne	.-14     	; 0x274a <_ZN12OrangutanLCD4sendEhhh+0x4a>
    2758:	2a 98       	cbi	0x05, 2	; 5
    275a:	6f 93       	push	r22
    275c:	64 e0       	ldi	r22, 0x04	; 4
    275e:	6a 95       	dec	r22
    2760:	f1 f7       	brne	.-4      	; 0x275e <_ZN12OrangutanLCD4sendEhhh+0x5e>
    2762:	6f 91       	pop	r22
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	c9 f7       	brne	.-14     	; 0x275a <_ZN12OrangutanLCD4sendEhhh+0x5a>
    2768:	88 b1       	in	r24, 0x08	; 8
    276a:	0f 70       	andi	r16, 0x0F	; 15
    276c:	00 0f       	add	r16, r16
    276e:	00 0f       	add	r16, r16
    2770:	83 7c       	andi	r24, 0xC3	; 195
    2772:	80 2b       	or	r24, r16
    2774:	88 b9       	out	0x08, r24	; 8
    2776:	2a 9a       	sbi	0x05, 2	; 5
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	fc 01       	movw	r30, r24
    277e:	6f 93       	push	r22
    2780:	64 e0       	ldi	r22, 0x04	; 4
    2782:	6a 95       	dec	r22
    2784:	f1 f7       	brne	.-4      	; 0x2782 <_ZN12OrangutanLCD4sendEhhh+0x82>
    2786:	6f 91       	pop	r22
    2788:	31 97       	sbiw	r30, 0x01	; 1
    278a:	c9 f7       	brne	.-14     	; 0x277e <_ZN12OrangutanLCD4sendEhhh+0x7e>
    278c:	2a 98       	cbi	0x05, 2	; 5
    278e:	6f 93       	push	r22
    2790:	64 e0       	ldi	r22, 0x04	; 4
    2792:	6a 95       	dec	r22
    2794:	f1 f7       	brne	.-4      	; 0x2792 <_ZN12OrangutanLCD4sendEhhh+0x92>
    2796:	6f 91       	pop	r22
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	c9 f7       	brne	.-14     	; 0x278e <_ZN12OrangutanLCD4sendEhhh+0x8e>
    279c:	37 b9       	out	0x07, r19	; 7
    279e:	28 b9       	out	0x08, r18	; 8
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	ff 90       	pop	r15
    27a6:	08 95       	ret

000027a8 <_ZN12OrangutanLCD8send_cmdEh>:
    27a8:	60 e0       	ldi	r22, 0x00	; 0
    27aa:	42 e0       	ldi	r20, 0x02	; 2
    27ac:	0e 94 80 13 	call	0x2700	; 0x2700 <_ZN12OrangutanLCD4sendEhhh>
    27b0:	08 95       	ret

000027b2 <_ZN12OrangutanLCD10moveCursorEhh>:
    27b2:	0f 93       	push	r16
    27b4:	1f 93       	push	r17
    27b6:	08 2f       	mov	r16, r24
    27b8:	16 2f       	mov	r17, r22
    27ba:	08 c0       	rjmp	.+16     	; 0x27cc <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    27bc:	00 23       	and	r16, r16
    27be:	11 f4       	brne	.+4      	; 0x27c4 <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    27c0:	80 e1       	ldi	r24, 0x10	; 16
    27c2:	01 c0       	rjmp	.+2      	; 0x27c6 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    27c4:	84 e1       	ldi	r24, 0x14	; 20
    27c6:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN12OrangutanLCD8send_cmdEh>
    27ca:	11 50       	subi	r17, 0x01	; 1
    27cc:	11 23       	and	r17, r17
    27ce:	b1 f7       	brne	.-20     	; 0x27bc <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    27d0:	1f 91       	pop	r17
    27d2:	0f 91       	pop	r16
    27d4:	08 95       	ret

000027d6 <lcd_move_cursor>:
    27d6:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_ZN12OrangutanLCD10moveCursorEhh>
    27da:	08 95       	ret

000027dc <_ZN12OrangutanLCD10hideCursorEv>:
    27dc:	8c e0       	ldi	r24, 0x0C	; 12
    27de:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN12OrangutanLCD8send_cmdEh>
    27e2:	08 95       	ret

000027e4 <lcd_hide_cursor>:
    27e4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <_ZN12OrangutanLCD10hideCursorEv>
    27e8:	08 95       	ret

000027ea <_ZN12OrangutanLCD10showCursorEh>:
    27ea:	81 30       	cpi	r24, 0x01	; 1
    27ec:	11 f4       	brne	.+4      	; 0x27f2 <_ZN12OrangutanLCD10showCursorEh+0x8>
    27ee:	8f e0       	ldi	r24, 0x0F	; 15
    27f0:	01 c0       	rjmp	.+2      	; 0x27f4 <_ZN12OrangutanLCD10showCursorEh+0xa>
    27f2:	8e e0       	ldi	r24, 0x0E	; 14
    27f4:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN12OrangutanLCD8send_cmdEh>
    27f8:	08 95       	ret

000027fa <lcd_show_cursor>:
    27fa:	0e 94 f5 13 	call	0x27ea	; 0x27ea <_ZN12OrangutanLCD10showCursorEh>
    27fe:	08 95       	ret

00002800 <_ZN12OrangutanLCD6gotoXYEhh>:
    2800:	a4 e0       	ldi	r26, 0x04	; 4
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	e6 e0       	ldi	r30, 0x06	; 6
    2806:	f4 e1       	ldi	r31, 0x14	; 20
    2808:	0c 94 14 18 	jmp	0x3028	; 0x3028 <__prologue_saves__+0x1c>
    280c:	18 2f       	mov	r17, r24
    280e:	06 2f       	mov	r16, r22
    2810:	80 e8       	ldi	r24, 0x80	; 128
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	80 ec       	ldi	r24, 0xC0	; 192
    2816:	8a 83       	std	Y+2, r24	; 0x02
    2818:	84 e9       	ldi	r24, 0x94	; 148
    281a:	8b 83       	std	Y+3, r24	; 0x03
    281c:	84 ed       	ldi	r24, 0xD4	; 212
    281e:	8c 83       	std	Y+4, r24	; 0x04
    2820:	fe 01       	movw	r30, r28
    2822:	e6 0f       	add	r30, r22
    2824:	f1 1d       	adc	r31, r1
    2826:	81 81       	ldd	r24, Z+1	; 0x01
    2828:	81 0f       	add	r24, r17
    282a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN12OrangutanLCD8send_cmdEh>
    282e:	10 93 d3 03 	sts	0x03D3, r17
    2832:	00 93 d2 03 	sts	0x03D2, r16
    2836:	24 96       	adiw	r28, 0x04	; 4
    2838:	e4 e0       	ldi	r30, 0x04	; 4
    283a:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__epilogue_restores__+0x1c>

0000283e <lcd_goto_xy>:
    283e:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
    2842:	08 95       	ret

00002844 <_ZN12OrangutanLCD5clearEv>:
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN12OrangutanLCD8send_cmdEh>
    284a:	80 91 d0 03 	lds	r24, 0x03D0
    284e:	90 91 d1 03 	lds	r25, 0x03D1
    2852:	89 2b       	or	r24, r25
    2854:	19 f1       	breq	.+70     	; 0x289c <_ZN12OrangutanLCD5clearEv+0x58>
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	70 e2       	ldi	r23, 0x20	; 32
    285a:	08 c0       	rjmp	.+16     	; 0x286c <_ZN12OrangutanLCD5clearEv+0x28>
    285c:	e0 91 d0 03 	lds	r30, 0x03D0
    2860:	f0 91 d1 03 	lds	r31, 0x03D1
    2864:	e4 0f       	add	r30, r20
    2866:	f5 1f       	adc	r31, r21
    2868:	70 83       	st	Z, r23
    286a:	6f 5f       	subi	r22, 0xFF	; 255
    286c:	46 2f       	mov	r20, r22
    286e:	50 e0       	ldi	r21, 0x00	; 0
    2870:	80 91 bd 03 	lds	r24, 0x03BD
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	20 91 be 03 	lds	r18, 0x03BE
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	fc 01       	movw	r30, r24
    2880:	e2 9f       	mul	r30, r18
    2882:	c0 01       	movw	r24, r0
    2884:	e3 9f       	mul	r30, r19
    2886:	90 0d       	add	r25, r0
    2888:	f2 9f       	mul	r31, r18
    288a:	90 0d       	add	r25, r0
    288c:	11 24       	eor	r1, r1
    288e:	48 17       	cp	r20, r24
    2890:	59 07       	cpc	r21, r25
    2892:	24 f3       	brlt	.-56     	; 0x285c <_ZN12OrangutanLCD5clearEv+0x18>
    2894:	10 92 d3 03 	sts	0x03D3, r1
    2898:	10 92 d2 03 	sts	0x03D2, r1
    289c:	08 95       	ret

0000289e <clear>:
    289e:	0e 94 22 14 	call	0x2844	; 0x2844 <_ZN12OrangutanLCD5clearEv>
    28a2:	08 95       	ret

000028a4 <_ZN12OrangutanLCD9send_dataEh>:
    28a4:	61 e0       	ldi	r22, 0x01	; 1
    28a6:	42 e0       	ldi	r20, 0x02	; 2
    28a8:	0e 94 80 13 	call	0x2700	; 0x2700 <_ZN12OrangutanLCD4sendEhhh>
    28ac:	08 95       	ret

000028ae <_ZN12OrangutanLCD11printBinaryEh>:
    28ae:	0f 93       	push	r16
    28b0:	1f 93       	push	r17
    28b2:	cf 93       	push	r28
    28b4:	df 93       	push	r29
    28b6:	00 e0       	ldi	r16, 0x00	; 0
    28b8:	10 e8       	ldi	r17, 0x80	; 128
    28ba:	c8 2f       	mov	r28, r24
    28bc:	d0 e0       	ldi	r29, 0x00	; 0
    28be:	81 2f       	mov	r24, r17
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	8c 23       	and	r24, r28
    28c4:	9d 23       	and	r25, r29
    28c6:	89 2b       	or	r24, r25
    28c8:	11 f0       	breq	.+4      	; 0x28ce <_ZN12OrangutanLCD11printBinaryEh+0x20>
    28ca:	81 e3       	ldi	r24, 0x31	; 49
    28cc:	01 c0       	rjmp	.+2      	; 0x28d0 <_ZN12OrangutanLCD11printBinaryEh+0x22>
    28ce:	80 e3       	ldi	r24, 0x30	; 48
    28d0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN12OrangutanLCD9send_dataEh>
    28d4:	0f 5f       	subi	r16, 0xFF	; 255
    28d6:	08 30       	cpi	r16, 0x08	; 8
    28d8:	11 f0       	breq	.+4      	; 0x28de <_ZN12OrangutanLCD11printBinaryEh+0x30>
    28da:	16 95       	lsr	r17
    28dc:	f0 cf       	rjmp	.-32     	; 0x28be <_ZN12OrangutanLCD11printBinaryEh+0x10>
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	1f 91       	pop	r17
    28e4:	0f 91       	pop	r16
    28e6:	08 95       	ret

000028e8 <print_binary>:
    28e8:	0e 94 57 14 	call	0x28ae	; 0x28ae <_ZN12OrangutanLCD11printBinaryEh>
    28ec:	08 95       	ret

000028ee <_ZN12OrangutanLCD14printHexNibbleEh>:
    28ee:	8a 30       	cpi	r24, 0x0A	; 10
    28f0:	10 f4       	brcc	.+4      	; 0x28f6 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    28f2:	80 5d       	subi	r24, 0xD0	; 208
    28f4:	01 c0       	rjmp	.+2      	; 0x28f8 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    28f6:	89 5c       	subi	r24, 0xC9	; 201
    28f8:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN12OrangutanLCD9send_dataEh>
    28fc:	08 95       	ret

000028fe <_ZN12OrangutanLCD8printHexEh>:
    28fe:	1f 93       	push	r17
    2900:	18 2f       	mov	r17, r24
    2902:	82 95       	swap	r24
    2904:	8f 70       	andi	r24, 0x0F	; 15
    2906:	0e 94 77 14 	call	0x28ee	; 0x28ee <_ZN12OrangutanLCD14printHexNibbleEh>
    290a:	81 2f       	mov	r24, r17
    290c:	8f 70       	andi	r24, 0x0F	; 15
    290e:	0e 94 77 14 	call	0x28ee	; 0x28ee <_ZN12OrangutanLCD14printHexNibbleEh>
    2912:	1f 91       	pop	r17
    2914:	08 95       	ret

00002916 <_ZN12OrangutanLCD8printHexEj>:
    2916:	1f 93       	push	r17
    2918:	18 2f       	mov	r17, r24
    291a:	89 2f       	mov	r24, r25
    291c:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZN12OrangutanLCD8printHexEh>
    2920:	81 2f       	mov	r24, r17
    2922:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZN12OrangutanLCD8printHexEh>
    2926:	1f 91       	pop	r17
    2928:	08 95       	ret

0000292a <print_hex>:
    292a:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN12OrangutanLCD8printHexEj>
    292e:	08 95       	ret

00002930 <print_hex_byte>:
    2930:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZN12OrangutanLCD8printHexEh>
    2934:	08 95       	ret

00002936 <_ZN12OrangutanLCD5printEm>:
    2936:	6f 92       	push	r6
    2938:	7f 92       	push	r7
    293a:	8f 92       	push	r8
    293c:	9f 92       	push	r9
    293e:	af 92       	push	r10
    2940:	bf 92       	push	r11
    2942:	cf 92       	push	r12
    2944:	df 92       	push	r13
    2946:	ff 92       	push	r15
    2948:	0f 93       	push	r16
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	2a 97       	sbiw	r28, 0x0a	; 10
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	5b 01       	movw	r10, r22
    2960:	6c 01       	movw	r12, r24
    2962:	0a e0       	ldi	r16, 0x0A	; 10
    2964:	3e 01       	movw	r6, r28
    2966:	08 94       	sec
    2968:	61 1c       	adc	r6, r1
    296a:	71 1c       	adc	r7, r1
    296c:	fa 2c       	mov	r15, r10
    296e:	c6 01       	movw	r24, r12
    2970:	b5 01       	movw	r22, r10
    2972:	2a e0       	ldi	r18, 0x0A	; 10
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	50 e0       	ldi	r21, 0x00	; 0
    297a:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__udivmodsi4>
    297e:	c9 01       	movw	r24, r18
    2980:	da 01       	movw	r26, r20
    2982:	5c 01       	movw	r10, r24
    2984:	6d 01       	movw	r12, r26
    2986:	01 50       	subi	r16, 0x01	; 1
    2988:	43 01       	movw	r8, r6
    298a:	80 0e       	add	r8, r16
    298c:	91 1c       	adc	r9, r1
    298e:	80 e3       	ldi	r24, 0x30	; 48
    2990:	f8 0e       	add	r15, r24
    2992:	c6 01       	movw	r24, r12
    2994:	b5 01       	movw	r22, r10
    2996:	2a e0       	ldi	r18, 0x0A	; 10
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e0       	ldi	r20, 0x00	; 0
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__mulsi3>
    29a2:	f6 1a       	sub	r15, r22
    29a4:	f4 01       	movw	r30, r8
    29a6:	f0 82       	st	Z, r15
    29a8:	a1 14       	cp	r10, r1
    29aa:	b1 04       	cpc	r11, r1
    29ac:	c1 04       	cpc	r12, r1
    29ae:	d1 04       	cpc	r13, r1
    29b0:	e9 f6       	brne	.-70     	; 0x296c <_ZN12OrangutanLCD5printEm+0x36>
    29b2:	08 c0       	rjmp	.+16     	; 0x29c4 <_ZN12OrangutanLCD5printEm+0x8e>
    29b4:	f6 01       	movw	r30, r12
    29b6:	e0 0f       	add	r30, r16
    29b8:	f1 1d       	adc	r31, r1
    29ba:	80 81       	ld	r24, Z
    29bc:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN12OrangutanLCD9send_dataEh>
    29c0:	0f 5f       	subi	r16, 0xFF	; 255
    29c2:	04 c0       	rjmp	.+8      	; 0x29cc <_ZN12OrangutanLCD5printEm+0x96>
    29c4:	6e 01       	movw	r12, r28
    29c6:	08 94       	sec
    29c8:	c1 1c       	adc	r12, r1
    29ca:	d1 1c       	adc	r13, r1
    29cc:	0a 30       	cpi	r16, 0x0A	; 10
    29ce:	90 f3       	brcs	.-28     	; 0x29b4 <_ZN12OrangutanLCD5printEm+0x7e>
    29d0:	2a 96       	adiw	r28, 0x0a	; 10
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	f8 94       	cli
    29d6:	de bf       	out	0x3e, r29	; 62
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	cd bf       	out	0x3d, r28	; 61
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	0f 91       	pop	r16
    29e2:	ff 90       	pop	r15
    29e4:	df 90       	pop	r13
    29e6:	cf 90       	pop	r12
    29e8:	bf 90       	pop	r11
    29ea:	af 90       	pop	r10
    29ec:	9f 90       	pop	r9
    29ee:	8f 90       	pop	r8
    29f0:	7f 90       	pop	r7
    29f2:	6f 90       	pop	r6
    29f4:	08 95       	ret

000029f6 <print_unsigned_long>:
    29f6:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN12OrangutanLCD5printEm>
    29fa:	08 95       	ret

000029fc <_ZN12OrangutanLCD5printEl>:
    29fc:	ef 92       	push	r14
    29fe:	ff 92       	push	r15
    2a00:	0f 93       	push	r16
    2a02:	1f 93       	push	r17
    2a04:	7b 01       	movw	r14, r22
    2a06:	8c 01       	movw	r16, r24
    2a08:	97 ff       	sbrs	r25, 7
    2a0a:	0b c0       	rjmp	.+22     	; 0x2a22 <_ZN12OrangutanLCD5printEl+0x26>
    2a0c:	10 95       	com	r17
    2a0e:	00 95       	com	r16
    2a10:	f0 94       	com	r15
    2a12:	e0 94       	com	r14
    2a14:	e1 1c       	adc	r14, r1
    2a16:	f1 1c       	adc	r15, r1
    2a18:	01 1d       	adc	r16, r1
    2a1a:	11 1d       	adc	r17, r1
    2a1c:	8d e2       	ldi	r24, 0x2D	; 45
    2a1e:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN12OrangutanLCD9send_dataEh>
    2a22:	c8 01       	movw	r24, r16
    2a24:	b7 01       	movw	r22, r14
    2a26:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN12OrangutanLCD5printEm>
    2a2a:	1f 91       	pop	r17
    2a2c:	0f 91       	pop	r16
    2a2e:	ff 90       	pop	r15
    2a30:	ef 90       	pop	r14
    2a32:	08 95       	ret

00002a34 <print_long>:
    2a34:	0e 94 fe 14 	call	0x29fc	; 0x29fc <_ZN12OrangutanLCD5printEl>
    2a38:	08 95       	ret

00002a3a <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    2a3a:	cf 93       	push	r28
    2a3c:	df 93       	push	r29
    2a3e:	ec 01       	movw	r28, r24
    2a40:	03 c0       	rjmp	.+6      	; 0x2a48 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    2a42:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN12OrangutanLCD9send_dataEh>
    2a46:	21 96       	adiw	r28, 0x01	; 1
    2a48:	fe 01       	movw	r30, r28
    2a4a:	84 91       	lpm	r24, Z+
    2a4c:	88 23       	and	r24, r24
    2a4e:	c9 f7       	brne	.-14     	; 0x2a42 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    2a50:	df 91       	pop	r29
    2a52:	cf 91       	pop	r28
    2a54:	08 95       	ret

00002a56 <print_from_program_space>:
    2a56:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    2a5a:	08 95       	ret

00002a5c <_ZN12OrangutanLCD5printEPKc>:
    2a5c:	cf 93       	push	r28
    2a5e:	df 93       	push	r29
    2a60:	ec 01       	movw	r28, r24
    2a62:	03 c0       	rjmp	.+6      	; 0x2a6a <_ZN12OrangutanLCD5printEPKc+0xe>
    2a64:	21 96       	adiw	r28, 0x01	; 1
    2a66:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN12OrangutanLCD9send_dataEh>
    2a6a:	88 81       	ld	r24, Y
    2a6c:	88 23       	and	r24, r24
    2a6e:	d1 f7       	brne	.-12     	; 0x2a64 <_ZN12OrangutanLCD5printEPKc+0x8>
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	08 95       	ret

00002a76 <print>:
    2a76:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZN12OrangutanLCD5printEPKc>
    2a7a:	08 95       	ret

00002a7c <_ZN12OrangutanLCD5printEc>:
    2a7c:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN12OrangutanLCD9send_dataEh>
    2a80:	08 95       	ret

00002a82 <print_character>:
    2a82:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN12OrangutanLCD9send_dataEh>
    2a86:	08 95       	ret

00002a88 <lcd_putchar>:
    2a88:	a0 e0       	ldi	r26, 0x00	; 0
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	ea e4       	ldi	r30, 0x4A	; 74
    2a8e:	f5 e1       	ldi	r31, 0x15	; 21
    2a90:	0c 94 10 18 	jmp	0x3020	; 0x3020 <__prologue_saves__+0x14>
    2a94:	e8 2e       	mov	r14, r24
    2a96:	80 91 d0 03 	lds	r24, 0x03D0
    2a9a:	90 91 d1 03 	lds	r25, 0x03D1
    2a9e:	89 2b       	or	r24, r25
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <lcd_putchar+0x1c>
    2aa2:	05 c1       	rjmp	.+522    	; 0x2cae <lcd_putchar+0x226>
    2aa4:	2a e0       	ldi	r18, 0x0A	; 10
    2aa6:	e2 16       	cp	r14, r18
    2aa8:	09 f4       	brne	.+2      	; 0x2aac <lcd_putchar+0x24>
    2aaa:	46 c0       	rjmp	.+140    	; 0x2b38 <lcd_putchar+0xb0>
    2aac:	38 e0       	ldi	r19, 0x08	; 8
    2aae:	e3 16       	cp	r14, r19
    2ab0:	c9 f4       	brne	.+50     	; 0x2ae4 <lcd_putchar+0x5c>
    2ab2:	80 91 d3 03 	lds	r24, 0x03D3
    2ab6:	81 50       	subi	r24, 0x01	; 1
    2ab8:	80 93 d3 03 	sts	0x03D3, r24
    2abc:	8f 3f       	cpi	r24, 0xFF	; 255
    2abe:	51 f4       	brne	.+20     	; 0x2ad4 <lcd_putchar+0x4c>
    2ac0:	80 91 d2 03 	lds	r24, 0x03D2
    2ac4:	81 50       	subi	r24, 0x01	; 1
    2ac6:	80 93 d2 03 	sts	0x03D2, r24
    2aca:	80 91 be 03 	lds	r24, 0x03BE
    2ace:	81 50       	subi	r24, 0x01	; 1
    2ad0:	80 93 d3 03 	sts	0x03D3, r24
    2ad4:	80 91 d2 03 	lds	r24, 0x03D2
    2ad8:	8f 3f       	cpi	r24, 0xFF	; 255
    2ada:	09 f0       	breq	.+2      	; 0x2ade <lcd_putchar+0x56>
    2adc:	e2 c0       	rjmp	.+452    	; 0x2ca2 <lcd_putchar+0x21a>
    2ade:	10 92 d2 03 	sts	0x03D2, r1
    2ae2:	dd c0       	rjmp	.+442    	; 0x2c9e <lcd_putchar+0x216>
    2ae4:	8e 2d       	mov	r24, r14
    2ae6:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN12OrangutanLCD9send_dataEh>
    2aea:	20 91 d2 03 	lds	r18, 0x03D2
    2aee:	22 23       	and	r18, r18
    2af0:	c9 f0       	breq	.+50     	; 0x2b24 <lcd_putchar+0x9c>
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	21 50       	subi	r18, 0x01	; 1
    2af6:	30 40       	sbci	r19, 0x00	; 0
    2af8:	80 91 be 03 	lds	r24, 0x03BE
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	ac 01       	movw	r20, r24
    2b00:	24 9f       	mul	r18, r20
    2b02:	c0 01       	movw	r24, r0
    2b04:	25 9f       	mul	r18, r21
    2b06:	90 0d       	add	r25, r0
    2b08:	34 9f       	mul	r19, r20
    2b0a:	90 0d       	add	r25, r0
    2b0c:	11 24       	eor	r1, r1
    2b0e:	20 91 d3 03 	lds	r18, 0x03D3
    2b12:	e0 91 d0 03 	lds	r30, 0x03D0
    2b16:	f0 91 d1 03 	lds	r31, 0x03D1
    2b1a:	e8 0f       	add	r30, r24
    2b1c:	f9 1f       	adc	r31, r25
    2b1e:	e2 0f       	add	r30, r18
    2b20:	f1 1d       	adc	r31, r1
    2b22:	e0 82       	st	Z, r14
    2b24:	80 91 d3 03 	lds	r24, 0x03D3
    2b28:	8f 5f       	subi	r24, 0xFF	; 255
    2b2a:	80 93 d3 03 	sts	0x03D3, r24
    2b2e:	90 91 be 03 	lds	r25, 0x03BE
    2b32:	89 17       	cp	r24, r25
    2b34:	09 f0       	breq	.+2      	; 0x2b38 <lcd_putchar+0xb0>
    2b36:	bb c0       	rjmp	.+374    	; 0x2cae <lcd_putchar+0x226>
    2b38:	40 91 d2 03 	lds	r20, 0x03D2
    2b3c:	24 2f       	mov	r18, r20
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	80 91 bd 03 	lds	r24, 0x03BD
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	28 17       	cp	r18, r24
    2b4a:	39 07       	cpc	r19, r25
    2b4c:	09 f0       	breq	.+2      	; 0x2b50 <lcd_putchar+0xc8>
    2b4e:	a4 c0       	rjmp	.+328    	; 0x2c98 <lcd_putchar+0x210>
    2b50:	c0 e0       	ldi	r28, 0x00	; 0
    2b52:	d0 e0       	ldi	r29, 0x00	; 0
    2b54:	44 c0       	rjmp	.+136    	; 0x2bde <lcd_putchar+0x156>
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	6c 2f       	mov	r22, r28
    2b5a:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
    2b5e:	ff 24       	eor	r15, r15
    2b60:	6e 01       	movw	r12, r28
    2b62:	08 94       	sec
    2b64:	c1 1c       	adc	r12, r1
    2b66:	d1 1c       	adc	r13, r1
    2b68:	35 c0       	rjmp	.+106    	; 0x2bd4 <lcd_putchar+0x14c>
    2b6a:	0f 2d       	mov	r16, r15
    2b6c:	10 e0       	ldi	r17, 0x00	; 0
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	9c 01       	movw	r18, r24
    2b72:	c2 9f       	mul	r28, r18
    2b74:	c0 01       	movw	r24, r0
    2b76:	c3 9f       	mul	r28, r19
    2b78:	90 0d       	add	r25, r0
    2b7a:	d2 9f       	mul	r29, r18
    2b7c:	90 0d       	add	r25, r0
    2b7e:	11 24       	eor	r1, r1
    2b80:	e0 91 d0 03 	lds	r30, 0x03D0
    2b84:	f0 91 d1 03 	lds	r31, 0x03D1
    2b88:	e0 0f       	add	r30, r16
    2b8a:	f1 1f       	adc	r31, r17
    2b8c:	e8 0f       	add	r30, r24
    2b8e:	f9 1f       	adc	r31, r25
    2b90:	80 81       	ld	r24, Z
    2b92:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN12OrangutanLCD9send_dataEh>
    2b96:	e0 91 d0 03 	lds	r30, 0x03D0
    2b9a:	f0 91 d1 03 	lds	r31, 0x03D1
    2b9e:	80 91 be 03 	lds	r24, 0x03BE
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	c8 9f       	mul	r28, r24
    2ba6:	d0 01       	movw	r26, r0
    2ba8:	c9 9f       	mul	r28, r25
    2baa:	b0 0d       	add	r27, r0
    2bac:	d8 9f       	mul	r29, r24
    2bae:	b0 0d       	add	r27, r0
    2bb0:	11 24       	eor	r1, r1
    2bb2:	e0 0f       	add	r30, r16
    2bb4:	f1 1f       	adc	r31, r17
    2bb6:	ae 0f       	add	r26, r30
    2bb8:	bf 1f       	adc	r27, r31
    2bba:	ac 01       	movw	r20, r24
    2bbc:	c4 9e       	mul	r12, r20
    2bbe:	c0 01       	movw	r24, r0
    2bc0:	c5 9e       	mul	r12, r21
    2bc2:	90 0d       	add	r25, r0
    2bc4:	d4 9e       	mul	r13, r20
    2bc6:	90 0d       	add	r25, r0
    2bc8:	11 24       	eor	r1, r1
    2bca:	e8 0f       	add	r30, r24
    2bcc:	f9 1f       	adc	r31, r25
    2bce:	80 81       	ld	r24, Z
    2bd0:	8c 93       	st	X, r24
    2bd2:	f3 94       	inc	r15
    2bd4:	80 91 be 03 	lds	r24, 0x03BE
    2bd8:	f8 16       	cp	r15, r24
    2bda:	38 f2       	brcs	.-114    	; 0x2b6a <lcd_putchar+0xe2>
    2bdc:	e6 01       	movw	r28, r12
    2bde:	60 91 bd 03 	lds	r22, 0x03BD
    2be2:	86 2f       	mov	r24, r22
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	02 97       	sbiw	r24, 0x02	; 2
    2be8:	c8 17       	cp	r28, r24
    2bea:	d9 07       	cpc	r29, r25
    2bec:	0c f4       	brge	.+2      	; 0x2bf0 <lcd_putchar+0x168>
    2bee:	b3 cf       	rjmp	.-154    	; 0x2b56 <lcd_putchar+0xce>
    2bf0:	62 30       	cpi	r22, 0x02	; 2
    2bf2:	08 f4       	brcc	.+2      	; 0x2bf6 <lcd_putchar+0x16e>
    2bf4:	40 c0       	rjmp	.+128    	; 0x2c76 <lcd_putchar+0x1ee>
    2bf6:	62 50       	subi	r22, 0x02	; 2
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
    2bfe:	ff 24       	eor	r15, r15
    2c00:	40 e2       	ldi	r20, 0x20	; 32
    2c02:	d4 2e       	mov	r13, r20
    2c04:	34 c0       	rjmp	.+104    	; 0x2c6e <lcd_putchar+0x1e6>
    2c06:	0f 2d       	mov	r16, r15
    2c08:	10 e0       	ldi	r17, 0x00	; 0
    2c0a:	80 91 bd 03 	lds	r24, 0x03BD
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	02 97       	sbiw	r24, 0x02	; 2
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	ac 01       	movw	r20, r24
    2c16:	42 9f       	mul	r20, r18
    2c18:	c0 01       	movw	r24, r0
    2c1a:	43 9f       	mul	r20, r19
    2c1c:	90 0d       	add	r25, r0
    2c1e:	52 9f       	mul	r21, r18
    2c20:	90 0d       	add	r25, r0
    2c22:	11 24       	eor	r1, r1
    2c24:	e0 91 d0 03 	lds	r30, 0x03D0
    2c28:	f0 91 d1 03 	lds	r31, 0x03D1
    2c2c:	e0 0f       	add	r30, r16
    2c2e:	f1 1f       	adc	r31, r17
    2c30:	e8 0f       	add	r30, r24
    2c32:	f9 1f       	adc	r31, r25
    2c34:	80 81       	ld	r24, Z
    2c36:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN12OrangutanLCD9send_dataEh>
    2c3a:	20 91 bd 03 	lds	r18, 0x03BD
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	22 50       	subi	r18, 0x02	; 2
    2c42:	30 40       	sbci	r19, 0x00	; 0
    2c44:	80 91 be 03 	lds	r24, 0x03BE
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	ac 01       	movw	r20, r24
    2c4c:	24 9f       	mul	r18, r20
    2c4e:	c0 01       	movw	r24, r0
    2c50:	25 9f       	mul	r18, r21
    2c52:	90 0d       	add	r25, r0
    2c54:	34 9f       	mul	r19, r20
    2c56:	90 0d       	add	r25, r0
    2c58:	11 24       	eor	r1, r1
    2c5a:	e0 91 d0 03 	lds	r30, 0x03D0
    2c5e:	f0 91 d1 03 	lds	r31, 0x03D1
    2c62:	e0 0f       	add	r30, r16
    2c64:	f1 1f       	adc	r31, r17
    2c66:	e8 0f       	add	r30, r24
    2c68:	f9 1f       	adc	r31, r25
    2c6a:	d0 82       	st	Z, r13
    2c6c:	f3 94       	inc	r15
    2c6e:	20 91 be 03 	lds	r18, 0x03BE
    2c72:	f2 16       	cp	r15, r18
    2c74:	40 f2       	brcs	.-112    	; 0x2c06 <lcd_putchar+0x17e>
    2c76:	60 91 bd 03 	lds	r22, 0x03BD
    2c7a:	61 50       	subi	r22, 0x01	; 1
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
    2c82:	00 e0       	ldi	r16, 0x00	; 0
    2c84:	04 c0       	rjmp	.+8      	; 0x2c8e <lcd_putchar+0x206>
    2c86:	80 e2       	ldi	r24, 0x20	; 32
    2c88:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN12OrangutanLCD9send_dataEh>
    2c8c:	0f 5f       	subi	r16, 0xFF	; 255
    2c8e:	80 91 be 03 	lds	r24, 0x03BE
    2c92:	08 17       	cp	r16, r24
    2c94:	c0 f3       	brcs	.-16     	; 0x2c86 <lcd_putchar+0x1fe>
    2c96:	03 c0       	rjmp	.+6      	; 0x2c9e <lcd_putchar+0x216>
    2c98:	4f 5f       	subi	r20, 0xFF	; 255
    2c9a:	40 93 d2 03 	sts	0x03D2, r20
    2c9e:	10 92 d3 03 	sts	0x03D3, r1
    2ca2:	80 91 d3 03 	lds	r24, 0x03D3
    2ca6:	60 91 d2 03 	lds	r22, 0x03D2
    2caa:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN12OrangutanLCD6gotoXYEhh>
    2cae:	2e 2d       	mov	r18, r14
    2cb0:	33 27       	eor	r19, r19
    2cb2:	27 fd       	sbrc	r18, 7
    2cb4:	30 95       	com	r19
    2cb6:	c9 01       	movw	r24, r18
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	e8 e0       	ldi	r30, 0x08	; 8
    2cbe:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__epilogue_restores__+0x14>

00002cc2 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    2cc2:	ef 92       	push	r14
    2cc4:	ff 92       	push	r15
    2cc6:	0f 93       	push	r16
    2cc8:	1f 93       	push	r17
    2cca:	cf 93       	push	r28
    2ccc:	df 93       	push	r29
    2cce:	7c 01       	movw	r14, r24
    2cd0:	06 2f       	mov	r16, r22
    2cd2:	10 e0       	ldi	r17, 0x00	; 0
    2cd4:	53 e0       	ldi	r21, 0x03	; 3
    2cd6:	00 0f       	add	r16, r16
    2cd8:	11 1f       	adc	r17, r17
    2cda:	5a 95       	dec	r21
    2cdc:	e1 f7       	brne	.-8      	; 0x2cd6 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    2cde:	c0 e0       	ldi	r28, 0x00	; 0
    2ce0:	d0 e0       	ldi	r29, 0x00	; 0
    2ce2:	9e 01       	movw	r18, r28
    2ce4:	20 0f       	add	r18, r16
    2ce6:	82 2f       	mov	r24, r18
    2ce8:	80 64       	ori	r24, 0x40	; 64
    2cea:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN12OrangutanLCD8send_cmdEh>
    2cee:	f7 01       	movw	r30, r14
    2cf0:	ec 0f       	add	r30, r28
    2cf2:	fd 1f       	adc	r31, r29
    2cf4:	e4 91       	lpm	r30, Z+
    2cf6:	8e 2f       	mov	r24, r30
    2cf8:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN12OrangutanLCD9send_dataEh>
    2cfc:	21 96       	adiw	r28, 0x01	; 1
    2cfe:	c8 30       	cpi	r28, 0x08	; 8
    2d00:	d1 05       	cpc	r29, r1
    2d02:	79 f7       	brne	.-34     	; 0x2ce2 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	e6 e0       	ldi	r30, 0x06	; 6
    2d0a:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__epilogue_restores__+0x18>

00002d0e <lcd_load_custom_character>:
    2d0e:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    2d12:	08 95       	ret

00002d14 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    2d14:	60 e0       	ldi	r22, 0x00	; 0
    2d16:	41 e0       	ldi	r20, 0x01	; 1
    2d18:	0e 94 80 13 	call	0x2700	; 0x2700 <_ZN12OrangutanLCD4sendEhhh>
    2d1c:	08 95       	ret

00002d1e <_ZN12OrangutanLCD6scrollEhhj>:
    2d1e:	0f 93       	push	r16
    2d20:	1f 93       	push	r17
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	08 2f       	mov	r16, r24
    2d28:	16 2f       	mov	r17, r22
    2d2a:	ea 01       	movw	r28, r20
    2d2c:	0b c0       	rjmp	.+22     	; 0x2d44 <_ZN12OrangutanLCD6scrollEhhj+0x26>
    2d2e:	00 23       	and	r16, r16
    2d30:	11 f4       	brne	.+4      	; 0x2d36 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    2d32:	88 e1       	ldi	r24, 0x18	; 24
    2d34:	01 c0       	rjmp	.+2      	; 0x2d38 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    2d36:	8c e1       	ldi	r24, 0x1C	; 28
    2d38:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN12OrangutanLCD8send_cmdEh>
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN13OrangutanTime17delayMillisecondsEj>
    2d42:	11 50       	subi	r17, 0x01	; 1
    2d44:	11 23       	and	r17, r17
    2d46:	99 f7       	brne	.-26     	; 0x2d2e <_ZN12OrangutanLCD6scrollEhhj+0x10>
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	1f 91       	pop	r17
    2d4e:	0f 91       	pop	r16
    2d50:	08 95       	ret

00002d52 <lcd_scroll>:
    2d52:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <_ZN12OrangutanLCD6scrollEhhj>
    2d56:	08 95       	ret

00002d58 <__vector_11>:
    2d58:	2f 92       	push	r2
    2d5a:	8f 93       	push	r24
    2d5c:	9f 93       	push	r25
    2d5e:	2f b6       	in	r2, 0x3f	; 63
    2d60:	80 91 da 03 	lds	r24, 0x03DA
    2d64:	90 91 db 03 	lds	r25, 0x03DB
    2d68:	01 96       	adiw	r24, 0x01	; 1
    2d6a:	80 93 da 03 	sts	0x03DA, r24
    2d6e:	90 93 db 03 	sts	0x03DB, r25
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	80 91 dc 03 	lds	r24, 0x03DC
    2d78:	89 1f       	adc	r24, r25
    2d7a:	80 93 dc 03 	sts	0x03DC, r24
    2d7e:	90 91 e2 03 	lds	r25, 0x03E2
    2d82:	9c 5f       	subi	r25, 0xFC	; 252
    2d84:	90 93 e2 03 	sts	0x03E2, r25
    2d88:	80 91 e1 03 	lds	r24, 0x03E1
    2d8c:	80 51       	subi	r24, 0x10	; 16
    2d8e:	97 42       	sbci	r25, 0x27	; 39
    2d90:	c0 f0       	brcs	.+48     	; 0x2dc2 <end>
    2d92:	90 93 e2 03 	sts	0x03E2, r25
    2d96:	80 93 e1 03 	sts	0x03E1, r24
    2d9a:	80 91 dd 03 	lds	r24, 0x03DD
    2d9e:	90 91 de 03 	lds	r25, 0x03DE
    2da2:	01 96       	adiw	r24, 0x01	; 1
    2da4:	80 93 dd 03 	sts	0x03DD, r24
    2da8:	90 93 de 03 	sts	0x03DE, r25
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	80 91 df 03 	lds	r24, 0x03DF
    2db2:	89 1f       	adc	r24, r25
    2db4:	80 93 df 03 	sts	0x03DF, r24
    2db8:	80 91 e0 03 	lds	r24, 0x03E0
    2dbc:	89 1f       	adc	r24, r25
    2dbe:	80 93 e0 03 	sts	0x03E0, r24

00002dc2 <end>:
    2dc2:	2f be       	out	0x3f, r2	; 63
    2dc4:	9f 91       	pop	r25
    2dc6:	8f 91       	pop	r24
    2dc8:	2f 90       	pop	r2
    2dca:	18 95       	reti

00002dcc <ticks_to_microseconds>:
    2dcc:	6f 5f       	subi	r22, 0xFF	; 255
    2dce:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd0:	8f 4f       	sbci	r24, 0xFF	; 255
    2dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd4:	66 0f       	add	r22, r22
    2dd6:	77 1f       	adc	r23, r23
    2dd8:	88 1f       	adc	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	25 e0       	ldi	r18, 0x05	; 5
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e0       	ldi	r20, 0x00	; 0
    2de2:	50 e0       	ldi	r21, 0x00	; 0
    2de4:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__udivmodsi4>
    2de8:	ca 01       	movw	r24, r20
    2dea:	b9 01       	movw	r22, r18
    2dec:	08 95       	ret

00002dee <delay_ms>:
    2dee:	28 ee       	ldi	r18, 0xE8	; 232
    2df0:	33 e0       	ldi	r19, 0x03	; 3
    2df2:	09 c0       	rjmp	.+18     	; 0x2e06 <delay_ms+0x18>
    2df4:	f9 01       	movw	r30, r18
    2df6:	6f 93       	push	r22
    2df8:	64 e0       	ldi	r22, 0x04	; 4
    2dfa:	6a 95       	dec	r22
    2dfc:	f1 f7       	brne	.-4      	; 0x2dfa <delay_ms+0xc>
    2dfe:	6f 91       	pop	r22
    2e00:	31 97       	sbiw	r30, 0x01	; 1
    2e02:	c9 f7       	brne	.-14     	; 0x2df6 <delay_ms+0x8>
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	00 97       	sbiw	r24, 0x00	; 0
    2e08:	a9 f7       	brne	.-22     	; 0x2df4 <delay_ms+0x6>
    2e0a:	08 95       	ret

00002e0c <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    2e0c:	6f 5f       	subi	r22, 0xFF	; 255
    2e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e10:	8f 4f       	sbci	r24, 0xFF	; 255
    2e12:	9f 4f       	sbci	r25, 0xFF	; 255
    2e14:	66 0f       	add	r22, r22
    2e16:	77 1f       	adc	r23, r23
    2e18:	88 1f       	adc	r24, r24
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	25 e0       	ldi	r18, 0x05	; 5
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	40 e0       	ldi	r20, 0x00	; 0
    2e22:	50 e0       	ldi	r21, 0x00	; 0
    2e24:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__udivmodsi4>
    2e28:	ca 01       	movw	r24, r20
    2e2a:	b9 01       	movw	r22, r18
    2e2c:	08 95       	ret

00002e2e <_ZN13OrangutanTime17delayMillisecondsEj>:
    2e2e:	28 ee       	ldi	r18, 0xE8	; 232
    2e30:	33 e0       	ldi	r19, 0x03	; 3
    2e32:	09 c0       	rjmp	.+18     	; 0x2e46 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    2e34:	f9 01       	movw	r30, r18
    2e36:	6f 93       	push	r22
    2e38:	64 e0       	ldi	r22, 0x04	; 4
    2e3a:	6a 95       	dec	r22
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    2e3e:	6f 91       	pop	r22
    2e40:	31 97       	sbiw	r30, 0x01	; 1
    2e42:	c9 f7       	brne	.-14     	; 0x2e36 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	a9 f7       	brne	.-22     	; 0x2e34 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    2e4a:	08 95       	ret

00002e4c <_ZN13OrangutanTime5init2Ev>:
    2e4c:	a0 e7       	ldi	r26, 0x70	; 112
    2e4e:	b0 e0       	ldi	r27, 0x00	; 0
    2e50:	8c 91       	ld	r24, X
    2e52:	8e 7f       	andi	r24, 0xFE	; 254
    2e54:	8c 93       	st	X, r24
    2e56:	e0 eb       	ldi	r30, 0xB0	; 176
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	83 60       	ori	r24, 0x03	; 3
    2e5e:	80 83       	st	Z, r24
    2e60:	e1 eb       	ldi	r30, 0xB1	; 177
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	80 81       	ld	r24, Z
    2e66:	80 7f       	andi	r24, 0xF0	; 240
    2e68:	80 83       	st	Z, r24
    2e6a:	80 81       	ld	r24, Z
    2e6c:	82 60       	ori	r24, 0x02	; 2
    2e6e:	80 83       	st	Z, r24
    2e70:	b8 9a       	sbi	0x17, 0	; 23
    2e72:	8c 91       	ld	r24, X
    2e74:	81 60       	ori	r24, 0x01	; 1
    2e76:	8c 93       	st	X, r24
    2e78:	78 94       	sei
    2e7a:	08 95       	ret

00002e7c <_ZN13OrangutanTime4initEv>:
    2e7c:	80 91 e3 03 	lds	r24, 0x03E3
    2e80:	88 23       	and	r24, r24
    2e82:	29 f4       	brne	.+10     	; 0x2e8e <_ZN13OrangutanTime4initEv+0x12>
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	80 93 e3 03 	sts	0x03E3, r24
    2e8a:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <_ZN13OrangutanTime5init2Ev>
    2e8e:	08 95       	ret

00002e90 <_ZN13OrangutanTime2msEv>:
    2e90:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <_ZN13OrangutanTime4initEv>
    2e94:	e0 e7       	ldi	r30, 0x70	; 112
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 81       	ld	r24, Z
    2e9a:	8e 7f       	andi	r24, 0xFE	; 254
    2e9c:	80 83       	st	Z, r24
    2e9e:	20 91 dd 03 	lds	r18, 0x03DD
    2ea2:	30 91 de 03 	lds	r19, 0x03DE
    2ea6:	40 91 df 03 	lds	r20, 0x03DF
    2eaa:	50 91 e0 03 	lds	r21, 0x03E0
    2eae:	80 81       	ld	r24, Z
    2eb0:	81 60       	ori	r24, 0x01	; 1
    2eb2:	80 83       	st	Z, r24
    2eb4:	b9 01       	movw	r22, r18
    2eb6:	ca 01       	movw	r24, r20
    2eb8:	08 95       	ret

00002eba <get_ms>:
    2eba:	0e 94 48 17 	call	0x2e90	; 0x2e90 <_ZN13OrangutanTime2msEv>
    2ebe:	08 95       	ret

00002ec0 <_ZN13OrangutanTime5ticksEv>:
    2ec0:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <_ZN13OrangutanTime4initEv>
    2ec4:	80 91 70 00 	lds	r24, 0x0070
    2ec8:	8e 7f       	andi	r24, 0xFE	; 254
    2eca:	80 93 70 00 	sts	0x0070, r24
    2ece:	60 91 b2 00 	lds	r22, 0x00B2
    2ed2:	80 91 d9 03 	lds	r24, 0x03D9
    2ed6:	90 91 da 03 	lds	r25, 0x03DA
    2eda:	a0 91 db 03 	lds	r26, 0x03DB
    2ede:	b0 91 dc 03 	lds	r27, 0x03DC
    2ee2:	b8 99       	sbic	0x17, 0	; 23
    2ee4:	05 c0       	rjmp	.+10     	; 0x2ef0 <_ZN13OrangutanTime5ticksEv+0x30>
    2ee6:	26 2f       	mov	r18, r22
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	50 e0       	ldi	r21, 0x00	; 0
    2eee:	11 c0       	rjmp	.+34     	; 0x2f12 <_ZN13OrangutanTime5ticksEv+0x52>
    2ef0:	80 91 b2 00 	lds	r24, 0x00B2
    2ef4:	20 91 d9 03 	lds	r18, 0x03D9
    2ef8:	30 91 da 03 	lds	r19, 0x03DA
    2efc:	40 91 db 03 	lds	r20, 0x03DB
    2f00:	50 91 dc 03 	lds	r21, 0x03DC
    2f04:	20 50       	subi	r18, 0x00	; 0
    2f06:	3f 4f       	sbci	r19, 0xFF	; 255
    2f08:	4f 4f       	sbci	r20, 0xFF	; 255
    2f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	a0 e0       	ldi	r26, 0x00	; 0
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	28 2b       	or	r18, r24
    2f14:	39 2b       	or	r19, r25
    2f16:	4a 2b       	or	r20, r26
    2f18:	5b 2b       	or	r21, r27
    2f1a:	80 91 70 00 	lds	r24, 0x0070
    2f1e:	81 60       	ori	r24, 0x01	; 1
    2f20:	80 93 70 00 	sts	0x0070, r24
    2f24:	b9 01       	movw	r22, r18
    2f26:	ca 01       	movw	r24, r20
    2f28:	08 95       	ret

00002f2a <get_ticks>:
    2f2a:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <_ZN13OrangutanTime5ticksEv>
    2f2e:	08 95       	ret

00002f30 <_ZN13OrangutanTime5resetEv>:
    2f30:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <_ZN13OrangutanTime4initEv>
    2f34:	e0 e7       	ldi	r30, 0x70	; 112
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	8e 7f       	andi	r24, 0xFE	; 254
    2f3c:	80 83       	st	Z, r24
    2f3e:	10 92 dd 03 	sts	0x03DD, r1
    2f42:	10 92 de 03 	sts	0x03DE, r1
    2f46:	10 92 df 03 	sts	0x03DF, r1
    2f4a:	10 92 e0 03 	sts	0x03E0, r1
    2f4e:	10 92 e2 03 	sts	0x03E2, r1
    2f52:	10 92 e1 03 	sts	0x03E1, r1
    2f56:	80 81       	ld	r24, Z
    2f58:	81 60       	ori	r24, 0x01	; 1
    2f5a:	80 83       	st	Z, r24
    2f5c:	08 95       	ret

00002f5e <time_reset>:
    2f5e:	0e 94 98 17 	call	0x2f30	; 0x2f30 <_ZN13OrangutanTime5resetEv>
    2f62:	08 95       	ret

00002f64 <__mulsi3>:
    2f64:	62 9f       	mul	r22, r18
    2f66:	d0 01       	movw	r26, r0
    2f68:	73 9f       	mul	r23, r19
    2f6a:	f0 01       	movw	r30, r0
    2f6c:	82 9f       	mul	r24, r18
    2f6e:	e0 0d       	add	r30, r0
    2f70:	f1 1d       	adc	r31, r1
    2f72:	64 9f       	mul	r22, r20
    2f74:	e0 0d       	add	r30, r0
    2f76:	f1 1d       	adc	r31, r1
    2f78:	92 9f       	mul	r25, r18
    2f7a:	f0 0d       	add	r31, r0
    2f7c:	83 9f       	mul	r24, r19
    2f7e:	f0 0d       	add	r31, r0
    2f80:	74 9f       	mul	r23, r20
    2f82:	f0 0d       	add	r31, r0
    2f84:	65 9f       	mul	r22, r21
    2f86:	f0 0d       	add	r31, r0
    2f88:	99 27       	eor	r25, r25
    2f8a:	72 9f       	mul	r23, r18
    2f8c:	b0 0d       	add	r27, r0
    2f8e:	e1 1d       	adc	r30, r1
    2f90:	f9 1f       	adc	r31, r25
    2f92:	63 9f       	mul	r22, r19
    2f94:	b0 0d       	add	r27, r0
    2f96:	e1 1d       	adc	r30, r1
    2f98:	f9 1f       	adc	r31, r25
    2f9a:	bd 01       	movw	r22, r26
    2f9c:	cf 01       	movw	r24, r30
    2f9e:	11 24       	eor	r1, r1
    2fa0:	08 95       	ret

00002fa2 <__divmodhi4>:
    2fa2:	97 fb       	bst	r25, 7
    2fa4:	09 2e       	mov	r0, r25
    2fa6:	07 26       	eor	r0, r23
    2fa8:	0a d0       	rcall	.+20     	; 0x2fbe <__divmodhi4_neg1>
    2faa:	77 fd       	sbrc	r23, 7
    2fac:	04 d0       	rcall	.+8      	; 0x2fb6 <__divmodhi4_neg2>
    2fae:	65 d0       	rcall	.+202    	; 0x307a <__udivmodhi4>
    2fb0:	06 d0       	rcall	.+12     	; 0x2fbe <__divmodhi4_neg1>
    2fb2:	00 20       	and	r0, r0
    2fb4:	1a f4       	brpl	.+6      	; 0x2fbc <__divmodhi4_exit>

00002fb6 <__divmodhi4_neg2>:
    2fb6:	70 95       	com	r23
    2fb8:	61 95       	neg	r22
    2fba:	7f 4f       	sbci	r23, 0xFF	; 255

00002fbc <__divmodhi4_exit>:
    2fbc:	08 95       	ret

00002fbe <__divmodhi4_neg1>:
    2fbe:	f6 f7       	brtc	.-4      	; 0x2fbc <__divmodhi4_exit>
    2fc0:	90 95       	com	r25
    2fc2:	81 95       	neg	r24
    2fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc6:	08 95       	ret

00002fc8 <__udivmodsi4>:
    2fc8:	a1 e2       	ldi	r26, 0x21	; 33
    2fca:	1a 2e       	mov	r1, r26
    2fcc:	aa 1b       	sub	r26, r26
    2fce:	bb 1b       	sub	r27, r27
    2fd0:	fd 01       	movw	r30, r26
    2fd2:	0d c0       	rjmp	.+26     	; 0x2fee <__udivmodsi4_ep>

00002fd4 <__udivmodsi4_loop>:
    2fd4:	aa 1f       	adc	r26, r26
    2fd6:	bb 1f       	adc	r27, r27
    2fd8:	ee 1f       	adc	r30, r30
    2fda:	ff 1f       	adc	r31, r31
    2fdc:	a2 17       	cp	r26, r18
    2fde:	b3 07       	cpc	r27, r19
    2fe0:	e4 07       	cpc	r30, r20
    2fe2:	f5 07       	cpc	r31, r21
    2fe4:	20 f0       	brcs	.+8      	; 0x2fee <__udivmodsi4_ep>
    2fe6:	a2 1b       	sub	r26, r18
    2fe8:	b3 0b       	sbc	r27, r19
    2fea:	e4 0b       	sbc	r30, r20
    2fec:	f5 0b       	sbc	r31, r21

00002fee <__udivmodsi4_ep>:
    2fee:	66 1f       	adc	r22, r22
    2ff0:	77 1f       	adc	r23, r23
    2ff2:	88 1f       	adc	r24, r24
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	1a 94       	dec	r1
    2ff8:	69 f7       	brne	.-38     	; 0x2fd4 <__udivmodsi4_loop>
    2ffa:	60 95       	com	r22
    2ffc:	70 95       	com	r23
    2ffe:	80 95       	com	r24
    3000:	90 95       	com	r25
    3002:	9b 01       	movw	r18, r22
    3004:	ac 01       	movw	r20, r24
    3006:	bd 01       	movw	r22, r26
    3008:	cf 01       	movw	r24, r30
    300a:	08 95       	ret

0000300c <__prologue_saves__>:
    300c:	2f 92       	push	r2
    300e:	3f 92       	push	r3
    3010:	4f 92       	push	r4
    3012:	5f 92       	push	r5
    3014:	6f 92       	push	r6
    3016:	7f 92       	push	r7
    3018:	8f 92       	push	r8
    301a:	9f 92       	push	r9
    301c:	af 92       	push	r10
    301e:	bf 92       	push	r11
    3020:	cf 92       	push	r12
    3022:	df 92       	push	r13
    3024:	ef 92       	push	r14
    3026:	ff 92       	push	r15
    3028:	0f 93       	push	r16
    302a:	1f 93       	push	r17
    302c:	cf 93       	push	r28
    302e:	df 93       	push	r29
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	ca 1b       	sub	r28, r26
    3036:	db 0b       	sbc	r29, r27
    3038:	0f b6       	in	r0, 0x3f	; 63
    303a:	f8 94       	cli
    303c:	de bf       	out	0x3e, r29	; 62
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	cd bf       	out	0x3d, r28	; 61
    3042:	09 94       	ijmp

00003044 <__epilogue_restores__>:
    3044:	2a 88       	ldd	r2, Y+18	; 0x12
    3046:	39 88       	ldd	r3, Y+17	; 0x11
    3048:	48 88       	ldd	r4, Y+16	; 0x10
    304a:	5f 84       	ldd	r5, Y+15	; 0x0f
    304c:	6e 84       	ldd	r6, Y+14	; 0x0e
    304e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3050:	8c 84       	ldd	r8, Y+12	; 0x0c
    3052:	9b 84       	ldd	r9, Y+11	; 0x0b
    3054:	aa 84       	ldd	r10, Y+10	; 0x0a
    3056:	b9 84       	ldd	r11, Y+9	; 0x09
    3058:	c8 84       	ldd	r12, Y+8	; 0x08
    305a:	df 80       	ldd	r13, Y+7	; 0x07
    305c:	ee 80       	ldd	r14, Y+6	; 0x06
    305e:	fd 80       	ldd	r15, Y+5	; 0x05
    3060:	0c 81       	ldd	r16, Y+4	; 0x04
    3062:	1b 81       	ldd	r17, Y+3	; 0x03
    3064:	aa 81       	ldd	r26, Y+2	; 0x02
    3066:	b9 81       	ldd	r27, Y+1	; 0x01
    3068:	ce 0f       	add	r28, r30
    306a:	d1 1d       	adc	r29, r1
    306c:	0f b6       	in	r0, 0x3f	; 63
    306e:	f8 94       	cli
    3070:	de bf       	out	0x3e, r29	; 62
    3072:	0f be       	out	0x3f, r0	; 63
    3074:	cd bf       	out	0x3d, r28	; 61
    3076:	ed 01       	movw	r28, r26
    3078:	08 95       	ret

0000307a <__udivmodhi4>:
    307a:	aa 1b       	sub	r26, r26
    307c:	bb 1b       	sub	r27, r27
    307e:	51 e1       	ldi	r21, 0x11	; 17
    3080:	07 c0       	rjmp	.+14     	; 0x3090 <__udivmodhi4_ep>

00003082 <__udivmodhi4_loop>:
    3082:	aa 1f       	adc	r26, r26
    3084:	bb 1f       	adc	r27, r27
    3086:	a6 17       	cp	r26, r22
    3088:	b7 07       	cpc	r27, r23
    308a:	10 f0       	brcs	.+4      	; 0x3090 <__udivmodhi4_ep>
    308c:	a6 1b       	sub	r26, r22
    308e:	b7 0b       	sbc	r27, r23

00003090 <__udivmodhi4_ep>:
    3090:	88 1f       	adc	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	5a 95       	dec	r21
    3096:	a9 f7       	brne	.-22     	; 0x3082 <__udivmodhi4_loop>
    3098:	80 95       	com	r24
    309a:	90 95       	com	r25
    309c:	bc 01       	movw	r22, r24
    309e:	cd 01       	movw	r24, r26
    30a0:	08 95       	ret

000030a2 <malloc>:
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	bc 01       	movw	r22, r24
    30a8:	82 30       	cpi	r24, 0x02	; 2
    30aa:	91 05       	cpc	r25, r1
    30ac:	10 f4       	brcc	.+4      	; 0x30b2 <malloc+0x10>
    30ae:	62 e0       	ldi	r22, 0x02	; 2
    30b0:	70 e0       	ldi	r23, 0x00	; 0
    30b2:	a0 91 e6 03 	lds	r26, 0x03E6
    30b6:	b0 91 e7 03 	lds	r27, 0x03E7
    30ba:	ed 01       	movw	r28, r26
    30bc:	e0 e0       	ldi	r30, 0x00	; 0
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	40 e0       	ldi	r20, 0x00	; 0
    30c2:	50 e0       	ldi	r21, 0x00	; 0
    30c4:	21 c0       	rjmp	.+66     	; 0x3108 <malloc+0x66>
    30c6:	88 81       	ld	r24, Y
    30c8:	99 81       	ldd	r25, Y+1	; 0x01
    30ca:	86 17       	cp	r24, r22
    30cc:	97 07       	cpc	r25, r23
    30ce:	69 f4       	brne	.+26     	; 0x30ea <malloc+0x48>
    30d0:	8a 81       	ldd	r24, Y+2	; 0x02
    30d2:	9b 81       	ldd	r25, Y+3	; 0x03
    30d4:	30 97       	sbiw	r30, 0x00	; 0
    30d6:	19 f0       	breq	.+6      	; 0x30de <malloc+0x3c>
    30d8:	93 83       	std	Z+3, r25	; 0x03
    30da:	82 83       	std	Z+2, r24	; 0x02
    30dc:	04 c0       	rjmp	.+8      	; 0x30e6 <malloc+0x44>
    30de:	90 93 e7 03 	sts	0x03E7, r25
    30e2:	80 93 e6 03 	sts	0x03E6, r24
    30e6:	fe 01       	movw	r30, r28
    30e8:	34 c0       	rjmp	.+104    	; 0x3152 <malloc+0xb0>
    30ea:	68 17       	cp	r22, r24
    30ec:	79 07       	cpc	r23, r25
    30ee:	38 f4       	brcc	.+14     	; 0x30fe <malloc+0x5c>
    30f0:	41 15       	cp	r20, r1
    30f2:	51 05       	cpc	r21, r1
    30f4:	19 f0       	breq	.+6      	; 0x30fc <malloc+0x5a>
    30f6:	84 17       	cp	r24, r20
    30f8:	95 07       	cpc	r25, r21
    30fa:	08 f4       	brcc	.+2      	; 0x30fe <malloc+0x5c>
    30fc:	ac 01       	movw	r20, r24
    30fe:	fe 01       	movw	r30, r28
    3100:	8a 81       	ldd	r24, Y+2	; 0x02
    3102:	9b 81       	ldd	r25, Y+3	; 0x03
    3104:	9c 01       	movw	r18, r24
    3106:	e9 01       	movw	r28, r18
    3108:	20 97       	sbiw	r28, 0x00	; 0
    310a:	e9 f6       	brne	.-70     	; 0x30c6 <malloc+0x24>
    310c:	41 15       	cp	r20, r1
    310e:	51 05       	cpc	r21, r1
    3110:	a9 f1       	breq	.+106    	; 0x317c <malloc+0xda>
    3112:	ca 01       	movw	r24, r20
    3114:	86 1b       	sub	r24, r22
    3116:	97 0b       	sbc	r25, r23
    3118:	04 97       	sbiw	r24, 0x04	; 4
    311a:	08 f4       	brcc	.+2      	; 0x311e <malloc+0x7c>
    311c:	ba 01       	movw	r22, r20
    311e:	e0 e0       	ldi	r30, 0x00	; 0
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	2a c0       	rjmp	.+84     	; 0x3178 <malloc+0xd6>
    3124:	8d 91       	ld	r24, X+
    3126:	9c 91       	ld	r25, X
    3128:	11 97       	sbiw	r26, 0x01	; 1
    312a:	84 17       	cp	r24, r20
    312c:	95 07       	cpc	r25, r21
    312e:	f9 f4       	brne	.+62     	; 0x316e <malloc+0xcc>
    3130:	64 17       	cp	r22, r20
    3132:	75 07       	cpc	r23, r21
    3134:	81 f4       	brne	.+32     	; 0x3156 <malloc+0xb4>
    3136:	12 96       	adiw	r26, 0x02	; 2
    3138:	8d 91       	ld	r24, X+
    313a:	9c 91       	ld	r25, X
    313c:	13 97       	sbiw	r26, 0x03	; 3
    313e:	30 97       	sbiw	r30, 0x00	; 0
    3140:	19 f0       	breq	.+6      	; 0x3148 <malloc+0xa6>
    3142:	93 83       	std	Z+3, r25	; 0x03
    3144:	82 83       	std	Z+2, r24	; 0x02
    3146:	04 c0       	rjmp	.+8      	; 0x3150 <malloc+0xae>
    3148:	90 93 e7 03 	sts	0x03E7, r25
    314c:	80 93 e6 03 	sts	0x03E6, r24
    3150:	fd 01       	movw	r30, r26
    3152:	32 96       	adiw	r30, 0x02	; 2
    3154:	4f c0       	rjmp	.+158    	; 0x31f4 <malloc+0x152>
    3156:	ca 01       	movw	r24, r20
    3158:	86 1b       	sub	r24, r22
    315a:	97 0b       	sbc	r25, r23
    315c:	fd 01       	movw	r30, r26
    315e:	e8 0f       	add	r30, r24
    3160:	f9 1f       	adc	r31, r25
    3162:	61 93       	st	Z+, r22
    3164:	71 93       	st	Z+, r23
    3166:	02 97       	sbiw	r24, 0x02	; 2
    3168:	8d 93       	st	X+, r24
    316a:	9c 93       	st	X, r25
    316c:	43 c0       	rjmp	.+134    	; 0x31f4 <malloc+0x152>
    316e:	fd 01       	movw	r30, r26
    3170:	82 81       	ldd	r24, Z+2	; 0x02
    3172:	93 81       	ldd	r25, Z+3	; 0x03
    3174:	9c 01       	movw	r18, r24
    3176:	d9 01       	movw	r26, r18
    3178:	10 97       	sbiw	r26, 0x00	; 0
    317a:	a1 f6       	brne	.-88     	; 0x3124 <malloc+0x82>
    317c:	80 91 e4 03 	lds	r24, 0x03E4
    3180:	90 91 e5 03 	lds	r25, 0x03E5
    3184:	89 2b       	or	r24, r25
    3186:	41 f4       	brne	.+16     	; 0x3198 <malloc+0xf6>
    3188:	80 91 c1 03 	lds	r24, 0x03C1
    318c:	90 91 c2 03 	lds	r25, 0x03C2
    3190:	90 93 e5 03 	sts	0x03E5, r25
    3194:	80 93 e4 03 	sts	0x03E4, r24
    3198:	40 91 c3 03 	lds	r20, 0x03C3
    319c:	50 91 c4 03 	lds	r21, 0x03C4
    31a0:	41 15       	cp	r20, r1
    31a2:	51 05       	cpc	r21, r1
    31a4:	41 f4       	brne	.+16     	; 0x31b6 <malloc+0x114>
    31a6:	4d b7       	in	r20, 0x3d	; 61
    31a8:	5e b7       	in	r21, 0x3e	; 62
    31aa:	80 91 bf 03 	lds	r24, 0x03BF
    31ae:	90 91 c0 03 	lds	r25, 0x03C0
    31b2:	48 1b       	sub	r20, r24
    31b4:	59 0b       	sbc	r21, r25
    31b6:	20 91 e4 03 	lds	r18, 0x03E4
    31ba:	30 91 e5 03 	lds	r19, 0x03E5
    31be:	24 17       	cp	r18, r20
    31c0:	35 07       	cpc	r19, r21
    31c2:	b0 f4       	brcc	.+44     	; 0x31f0 <malloc+0x14e>
    31c4:	ca 01       	movw	r24, r20
    31c6:	82 1b       	sub	r24, r18
    31c8:	93 0b       	sbc	r25, r19
    31ca:	86 17       	cp	r24, r22
    31cc:	97 07       	cpc	r25, r23
    31ce:	80 f0       	brcs	.+32     	; 0x31f0 <malloc+0x14e>
    31d0:	ab 01       	movw	r20, r22
    31d2:	4e 5f       	subi	r20, 0xFE	; 254
    31d4:	5f 4f       	sbci	r21, 0xFF	; 255
    31d6:	84 17       	cp	r24, r20
    31d8:	95 07       	cpc	r25, r21
    31da:	50 f0       	brcs	.+20     	; 0x31f0 <malloc+0x14e>
    31dc:	42 0f       	add	r20, r18
    31de:	53 1f       	adc	r21, r19
    31e0:	50 93 e5 03 	sts	0x03E5, r21
    31e4:	40 93 e4 03 	sts	0x03E4, r20
    31e8:	f9 01       	movw	r30, r18
    31ea:	61 93       	st	Z+, r22
    31ec:	71 93       	st	Z+, r23
    31ee:	02 c0       	rjmp	.+4      	; 0x31f4 <malloc+0x152>
    31f0:	e0 e0       	ldi	r30, 0x00	; 0
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	cf 01       	movw	r24, r30
    31f6:	df 91       	pop	r29
    31f8:	cf 91       	pop	r28
    31fa:	08 95       	ret

000031fc <free>:
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	00 97       	sbiw	r24, 0x00	; 0
    3202:	09 f4       	brne	.+2      	; 0x3206 <free+0xa>
    3204:	50 c0       	rjmp	.+160    	; 0x32a6 <free+0xaa>
    3206:	ec 01       	movw	r28, r24
    3208:	22 97       	sbiw	r28, 0x02	; 2
    320a:	1b 82       	std	Y+3, r1	; 0x03
    320c:	1a 82       	std	Y+2, r1	; 0x02
    320e:	a0 91 e6 03 	lds	r26, 0x03E6
    3212:	b0 91 e7 03 	lds	r27, 0x03E7
    3216:	10 97       	sbiw	r26, 0x00	; 0
    3218:	09 f1       	breq	.+66     	; 0x325c <free+0x60>
    321a:	40 e0       	ldi	r20, 0x00	; 0
    321c:	50 e0       	ldi	r21, 0x00	; 0
    321e:	ac 17       	cp	r26, r28
    3220:	bd 07       	cpc	r27, r29
    3222:	08 f1       	brcs	.+66     	; 0x3266 <free+0x6a>
    3224:	bb 83       	std	Y+3, r27	; 0x03
    3226:	aa 83       	std	Y+2, r26	; 0x02
    3228:	fe 01       	movw	r30, r28
    322a:	21 91       	ld	r18, Z+
    322c:	31 91       	ld	r19, Z+
    322e:	e2 0f       	add	r30, r18
    3230:	f3 1f       	adc	r31, r19
    3232:	ae 17       	cp	r26, r30
    3234:	bf 07       	cpc	r27, r31
    3236:	79 f4       	brne	.+30     	; 0x3256 <free+0x5a>
    3238:	8d 91       	ld	r24, X+
    323a:	9c 91       	ld	r25, X
    323c:	11 97       	sbiw	r26, 0x01	; 1
    323e:	28 0f       	add	r18, r24
    3240:	39 1f       	adc	r19, r25
    3242:	2e 5f       	subi	r18, 0xFE	; 254
    3244:	3f 4f       	sbci	r19, 0xFF	; 255
    3246:	39 83       	std	Y+1, r19	; 0x01
    3248:	28 83       	st	Y, r18
    324a:	12 96       	adiw	r26, 0x02	; 2
    324c:	8d 91       	ld	r24, X+
    324e:	9c 91       	ld	r25, X
    3250:	13 97       	sbiw	r26, 0x03	; 3
    3252:	9b 83       	std	Y+3, r25	; 0x03
    3254:	8a 83       	std	Y+2, r24	; 0x02
    3256:	41 15       	cp	r20, r1
    3258:	51 05       	cpc	r21, r1
    325a:	71 f4       	brne	.+28     	; 0x3278 <free+0x7c>
    325c:	d0 93 e7 03 	sts	0x03E7, r29
    3260:	c0 93 e6 03 	sts	0x03E6, r28
    3264:	20 c0       	rjmp	.+64     	; 0x32a6 <free+0xaa>
    3266:	12 96       	adiw	r26, 0x02	; 2
    3268:	8d 91       	ld	r24, X+
    326a:	9c 91       	ld	r25, X
    326c:	13 97       	sbiw	r26, 0x03	; 3
    326e:	ad 01       	movw	r20, r26
    3270:	00 97       	sbiw	r24, 0x00	; 0
    3272:	11 f0       	breq	.+4      	; 0x3278 <free+0x7c>
    3274:	dc 01       	movw	r26, r24
    3276:	d3 cf       	rjmp	.-90     	; 0x321e <free+0x22>
    3278:	fa 01       	movw	r30, r20
    327a:	d3 83       	std	Z+3, r29	; 0x03
    327c:	c2 83       	std	Z+2, r28	; 0x02
    327e:	21 91       	ld	r18, Z+
    3280:	31 91       	ld	r19, Z+
    3282:	e2 0f       	add	r30, r18
    3284:	f3 1f       	adc	r31, r19
    3286:	ce 17       	cp	r28, r30
    3288:	df 07       	cpc	r29, r31
    328a:	69 f4       	brne	.+26     	; 0x32a6 <free+0xaa>
    328c:	88 81       	ld	r24, Y
    328e:	99 81       	ldd	r25, Y+1	; 0x01
    3290:	28 0f       	add	r18, r24
    3292:	39 1f       	adc	r19, r25
    3294:	2e 5f       	subi	r18, 0xFE	; 254
    3296:	3f 4f       	sbci	r19, 0xFF	; 255
    3298:	fa 01       	movw	r30, r20
    329a:	31 83       	std	Z+1, r19	; 0x01
    329c:	20 83       	st	Z, r18
    329e:	8a 81       	ldd	r24, Y+2	; 0x02
    32a0:	9b 81       	ldd	r25, Y+3	; 0x03
    32a2:	93 83       	std	Z+3, r25	; 0x03
    32a4:	82 83       	std	Z+2, r24	; 0x02
    32a6:	df 91       	pop	r29
    32a8:	cf 91       	pop	r28
    32aa:	08 95       	ret

000032ac <fdevopen>:
    32ac:	0f 93       	push	r16
    32ae:	1f 93       	push	r17
    32b0:	cf 93       	push	r28
    32b2:	df 93       	push	r29
    32b4:	8c 01       	movw	r16, r24
    32b6:	eb 01       	movw	r28, r22
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	31 f4       	brne	.+12     	; 0x32c8 <fdevopen+0x1c>
    32bc:	61 15       	cp	r22, r1
    32be:	71 05       	cpc	r23, r1
    32c0:	19 f4       	brne	.+6      	; 0x32c8 <fdevopen+0x1c>
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	38 c0       	rjmp	.+112    	; 0x3338 <fdevopen+0x8c>
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	6e e0       	ldi	r22, 0x0E	; 14
    32ce:	70 e0       	ldi	r23, 0x00	; 0
    32d0:	0e 94 a2 19 	call	0x3344	; 0x3344 <calloc>
    32d4:	fc 01       	movw	r30, r24
    32d6:	9c 01       	movw	r18, r24
    32d8:	00 97       	sbiw	r24, 0x00	; 0
    32da:	71 f1       	breq	.+92     	; 0x3338 <fdevopen+0x8c>
    32dc:	80 e8       	ldi	r24, 0x80	; 128
    32de:	83 83       	std	Z+3, r24	; 0x03
    32e0:	20 97       	sbiw	r28, 0x00	; 0
    32e2:	71 f0       	breq	.+28     	; 0x3300 <fdevopen+0x54>
    32e4:	d3 87       	std	Z+11, r29	; 0x0b
    32e6:	c2 87       	std	Z+10, r28	; 0x0a
    32e8:	81 e8       	ldi	r24, 0x81	; 129
    32ea:	83 83       	std	Z+3, r24	; 0x03
    32ec:	80 91 e8 03 	lds	r24, 0x03E8
    32f0:	90 91 e9 03 	lds	r25, 0x03E9
    32f4:	89 2b       	or	r24, r25
    32f6:	21 f4       	brne	.+8      	; 0x3300 <fdevopen+0x54>
    32f8:	f0 93 e9 03 	sts	0x03E9, r31
    32fc:	e0 93 e8 03 	sts	0x03E8, r30
    3300:	01 15       	cp	r16, r1
    3302:	11 05       	cpc	r17, r1
    3304:	c9 f0       	breq	.+50     	; 0x3338 <fdevopen+0x8c>
    3306:	11 87       	std	Z+9, r17	; 0x09
    3308:	00 87       	std	Z+8, r16	; 0x08
    330a:	83 81       	ldd	r24, Z+3	; 0x03
    330c:	82 60       	ori	r24, 0x02	; 2
    330e:	83 83       	std	Z+3, r24	; 0x03
    3310:	80 91 ea 03 	lds	r24, 0x03EA
    3314:	90 91 eb 03 	lds	r25, 0x03EB
    3318:	89 2b       	or	r24, r25
    331a:	71 f4       	brne	.+28     	; 0x3338 <fdevopen+0x8c>
    331c:	f0 93 eb 03 	sts	0x03EB, r31
    3320:	e0 93 ea 03 	sts	0x03EA, r30
    3324:	80 91 ec 03 	lds	r24, 0x03EC
    3328:	90 91 ed 03 	lds	r25, 0x03ED
    332c:	89 2b       	or	r24, r25
    332e:	21 f4       	brne	.+8      	; 0x3338 <fdevopen+0x8c>
    3330:	f0 93 ed 03 	sts	0x03ED, r31
    3334:	e0 93 ec 03 	sts	0x03EC, r30
    3338:	c9 01       	movw	r24, r18
    333a:	df 91       	pop	r29
    333c:	cf 91       	pop	r28
    333e:	1f 91       	pop	r17
    3340:	0f 91       	pop	r16
    3342:	08 95       	ret

00003344 <calloc>:
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	68 9f       	mul	r22, r24
    334e:	80 01       	movw	r16, r0
    3350:	69 9f       	mul	r22, r25
    3352:	10 0d       	add	r17, r0
    3354:	78 9f       	mul	r23, r24
    3356:	10 0d       	add	r17, r0
    3358:	11 24       	eor	r1, r1
    335a:	c8 01       	movw	r24, r16
    335c:	0e 94 51 18 	call	0x30a2	; 0x30a2 <malloc>
    3360:	ec 01       	movw	r28, r24
    3362:	00 97       	sbiw	r24, 0x00	; 0
    3364:	29 f0       	breq	.+10     	; 0x3370 <calloc+0x2c>
    3366:	60 e0       	ldi	r22, 0x00	; 0
    3368:	70 e0       	ldi	r23, 0x00	; 0
    336a:	a8 01       	movw	r20, r16
    336c:	0e 94 be 19 	call	0x337c	; 0x337c <memset>
    3370:	ce 01       	movw	r24, r28
    3372:	df 91       	pop	r29
    3374:	cf 91       	pop	r28
    3376:	1f 91       	pop	r17
    3378:	0f 91       	pop	r16
    337a:	08 95       	ret

0000337c <memset>:
    337c:	dc 01       	movw	r26, r24
    337e:	01 c0       	rjmp	.+2      	; 0x3382 <memset+0x6>
    3380:	6d 93       	st	X+, r22
    3382:	41 50       	subi	r20, 0x01	; 1
    3384:	50 40       	sbci	r21, 0x00	; 0
    3386:	e0 f7       	brcc	.-8      	; 0x3380 <memset+0x4>
    3388:	08 95       	ret

0000338a <_exit>:
    338a:	f8 94       	cli

0000338c <__stop_program>:
    338c:	ff cf       	rjmp	.-2      	; 0x338c <__stop_program>
