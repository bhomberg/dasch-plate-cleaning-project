
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000238  00800100  000034f0  00003584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800338  00800338  000037bc  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  000037bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002591  00000000  00000000  00005f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000850d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001dc  00000000  00000000  0000854d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001294  00000000  00000000  00008729  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000402  00000000  00000000  000099bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a8f  00000000  00000000  00009dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  0000b850  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b71  00000000  00000000  0000b990  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b45  00000000  00000000  0000c501  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  0000d046  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__vector_11>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      6c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      70:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      7c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      80:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      84:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      88:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      8c:	b1 04       	cpc	r11, r1
      8e:	c8 04       	cpc	r12, r8
      90:	e0 04       	cpc	r14, r0
      92:	f9 04       	cpc	r15, r9
      94:	13 05       	cpc	r17, r3
      96:	2b 05       	cpc	r18, r11
      98:	44 05       	cpc	r20, r4
      9a:	5e 05       	cpc	r21, r14
      9c:	77 05       	cpc	r23, r7
      9e:	89 05       	cpc	r24, r9
      a0:	8e 05       	cpc	r24, r14
      a2:	9d 05       	cpc	r25, r13
      a4:	a2 05       	cpc	r26, r2
      a6:	b1 05       	cpc	r27, r1
      a8:	b6 05       	cpc	r27, r6
      aa:	c6 05       	cpc	r28, r6
      ac:	cb 05       	cpc	r28, r11
      ae:	db 05       	cpc	r29, r11
      b0:	e0 05       	cpc	r30, r0
      b2:	f0 05       	cpc	r31, r0
      b4:	f5 05       	cpc	r31, r5
      b6:	05 06       	cpc	r0, r21
      b8:	0a 06       	cpc	r0, r26
      ba:	1e 06       	cpc	r1, r30
      bc:	23 06       	cpc	r2, r19
      be:	37 06       	cpc	r3, r23
      c0:	3c 06       	cpc	r3, r28
      c2:	4c 06       	cpc	r4, r28
      c4:	51 06       	cpc	r5, r17
      c6:	61 06       	cpc	r6, r17
      c8:	66 06       	cpc	r6, r22
      ca:	75 06       	cpc	r7, r21
      cc:	7a 06       	cpc	r7, r26
      ce:	89 06       	cpc	r8, r25
      d0:	8e 06       	cpc	r8, r30
      d2:	9d 06       	cpc	r9, r29
      d4:	a2 06       	cpc	r10, r18
      d6:	b1 06       	cpc	r11, r17
      d8:	b6 06       	cpc	r11, r22
      da:	c5 06       	cpc	r12, r21
      dc:	ca 06       	cpc	r12, r26
      de:	d9 06       	cpc	r13, r25
      e0:	7d 09       	sbc	r23, r13
      e2:	a1 09       	sbc	r26, r1
      e4:	be 09       	sbc	r27, r14
      e6:	ca 09       	sbc	r28, r10
      e8:	cf 09       	sbc	r28, r15
      ea:	d9 09       	sbc	r29, r9
      ec:	e3 09       	sbc	r30, r3
      ee:	e8 09       	sbc	r30, r8
      f0:	f2 09       	sbc	r31, r2
      f2:	f8 09       	sbc	r31, r8
      f4:	fd 09       	sbc	r31, r13
      f6:	03 0a       	sbc	r0, r19
      f8:	08 0a       	sbc	r0, r24
      fa:	13 0a       	sbc	r1, r19
      fc:	13 0a       	sbc	r1, r19
      fe:	76 0a       	sbc	r7, r22
     100:	76 0a       	sbc	r7, r22
     102:	76 0a       	sbc	r7, r22
     104:	76 0a       	sbc	r7, r22
     106:	76 0a       	sbc	r7, r22
     108:	76 0a       	sbc	r7, r22
     10a:	76 0a       	sbc	r7, r22
     10c:	76 0a       	sbc	r7, r22
     10e:	19 0a       	sbc	r1, r25
     110:	23 0a       	sbc	r2, r19
     112:	28 0a       	sbc	r2, r24
     114:	2d 0a       	sbc	r2, r29
     116:	32 0a       	sbc	r3, r18
     118:	38 0a       	sbc	r3, r24
     11a:	3d 0a       	sbc	r3, r29
     11c:	3d 0a       	sbc	r3, r29
     11e:	48 0a       	sbc	r4, r24
     120:	4e 0a       	sbc	r4, r30
     122:	53 0a       	sbc	r5, r19
     124:	5f 0a       	sbc	r5, r31
     126:	64 0a       	sbc	r6, r20
     128:	d7 0c       	add	r13, r7
     12a:	fc 0c       	add	r15, r12
     12c:	19 0d       	add	r17, r9
     12e:	25 0d       	add	r18, r5
     130:	2a 0d       	add	r18, r10
     132:	34 0d       	add	r19, r4
     134:	3e 0d       	add	r19, r14
     136:	e1 0d       	add	r30, r1
     138:	e1 0d       	add	r30, r1
     13a:	e1 0d       	add	r30, r1
     13c:	e1 0d       	add	r30, r1
     13e:	e1 0d       	add	r30, r1
     140:	e1 0d       	add	r30, r1
     142:	e1 0d       	add	r30, r1
     144:	e1 0d       	add	r30, r1
     146:	43 0d       	add	r20, r3
     148:	49 0d       	add	r20, r9
     14a:	53 0d       	add	r21, r3
     14c:	58 0d       	add	r21, r8
     14e:	62 0d       	add	r22, r2
     150:	67 0d       	add	r22, r7
     152:	76 0d       	add	r23, r6
     154:	76 0d       	add	r23, r6
     156:	85 0d       	add	r24, r5
     158:	8f 0d       	add	r24, r15
     15a:	94 0d       	add	r25, r4
     15c:	99 0d       	add	r25, r9
     15e:	9e 0d       	add	r25, r14
     160:	a4 0d       	add	r26, r4
     162:	a9 0d       	add	r26, r9
     164:	a9 0d       	add	r26, r9
     166:	b4 0d       	add	r27, r4
     168:	ba 0d       	add	r27, r10
     16a:	bf 0d       	add	r27, r15
     16c:	cb 0d       	add	r28, r11
     16e:	d0 0d       	add	r29, r0
     170:	bc 10       	cpse	r11, r12
     172:	e0 10       	cpse	r14, r0
     174:	fd 10       	cpse	r15, r13
     176:	09 11       	cpse	r16, r9
     178:	0e 11       	cpse	r16, r14
     17a:	18 11       	cpse	r17, r8
     17c:	22 11       	cpse	r18, r2
     17e:	27 11       	cpse	r18, r7
     180:	31 11       	cpse	r19, r1
     182:	37 11       	cpse	r19, r7
     184:	3c 11       	cpse	r19, r12
     186:	42 11       	cpse	r20, r2
     188:	47 11       	cpse	r20, r7
     18a:	52 11       	cpse	r21, r2
     18c:	52 11       	cpse	r21, r2
     18e:	58 11       	cpse	r21, r8
     190:	5e 11       	cpse	r21, r14
     192:	68 11       	cpse	r22, r8
     194:	6d 11       	cpse	r22, r13
     196:	77 11       	cpse	r23, r7
     198:	7c 11       	cpse	r23, r12
     19a:	8b 11       	cpse	r24, r11
     19c:	8b 11       	cpse	r24, r11
     19e:	9a 11       	cpse	r25, r10
     1a0:	a4 11       	cpse	r26, r4
     1a2:	a9 11       	cpse	r26, r9
     1a4:	ae 11       	cpse	r26, r14
     1a6:	b3 11       	cpse	r27, r3
     1a8:	b9 11       	cpse	r27, r9
     1aa:	be 11       	cpse	r27, r14
     1ac:	be 11       	cpse	r27, r14
     1ae:	c9 11       	cpse	r28, r9
     1b0:	cf 11       	cpse	r28, r15
     1b2:	d4 11       	cpse	r29, r4
     1b4:	e0 11       	cpse	r30, r0
     1b6:	e5 11       	cpse	r30, r5

000001b8 <__ctors_end>:
     1b8:	11 24       	eor	r1, r1
     1ba:	1f be       	out	0x3f, r1	; 63
     1bc:	cf ef       	ldi	r28, 0xFF	; 255
     1be:	d0 e4       	ldi	r29, 0x40	; 64
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	cd bf       	out	0x3d, r28	; 61

000001c4 <__do_copy_data>:
     1c4:	13 e0       	ldi	r17, 0x03	; 3
     1c6:	a0 e0       	ldi	r26, 0x00	; 0
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	e0 ef       	ldi	r30, 0xF0	; 240
     1cc:	f4 e3       	ldi	r31, 0x34	; 52
     1ce:	00 e0       	ldi	r16, 0x00	; 0
     1d0:	0b bf       	out	0x3b, r16	; 59
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x14>
     1d4:	07 90       	elpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	a8 33       	cpi	r26, 0x38	; 56
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0x10>

000001de <__do_clear_bss>:
     1de:	13 e0       	ldi	r17, 0x03	; 3
     1e0:	a8 e3       	ldi	r26, 0x38	; 56
     1e2:	b3 e0       	ldi	r27, 0x03	; 3
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	ac 35       	cpi	r26, 0x5C	; 92
     1ea:	b1 07       	cpc	r27, r17
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	0e 94 70 02 	call	0x4e0	; 0x4e0 <main>
     1f2:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <_ZN16OrangutanDigital11isInputHighEh>:


	// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
	// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
	// the pin.
	inline static unsigned char isInputHigh(unsigned char pin)
     1fa:	48 2f       	mov	r20, r24
		io->pinRegister = 0;
		io->portRegister = 0;
		io->ddrRegister = 0;
		io->bitmask = 0;

		if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     1fc:	88 30       	cpi	r24, 0x08	; 8
     1fe:	58 f4       	brcc	.+22     	; 0x216 <_ZN16OrangutanDigital11isInputHighEh+0x1c>
		{
			io->pinRegister = (unsigned char*)&PIND;
			io->portRegister = (unsigned char*)&PORTD;
			io->ddrRegister = (unsigned char*)&DDRD;
			io->bitmask = 1 << pin;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	02 c0       	rjmp	.+4      	; 0x20a <_ZN16OrangutanDigital11isInputHighEh+0x10>
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	4a 95       	dec	r20
     20c:	e2 f7       	brpl	.-8      	; 0x206 <_ZN16OrangutanDigital11isInputHighEh+0xc>
     20e:	98 2f       	mov	r25, r24
     210:	e9 e2       	ldi	r30, 0x29	; 41
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	36 c0       	rjmp	.+108    	; 0x282 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)

		else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     216:	80 31       	cpi	r24, 0x10	; 16
     218:	78 f4       	brcc	.+30     	; 0x238 <_ZN16OrangutanDigital11isInputHighEh+0x3e>
		{
			io->pinRegister = (unsigned char*)&PINB;
			io->portRegister = (unsigned char*)&PORTB;
			io->ddrRegister = (unsigned char*)&DDRB;
			io->bitmask = 1 << (pin - 8);
     21a:	28 2f       	mov	r18, r24
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	28 50       	subi	r18, 0x08	; 8
     220:	30 40       	sbci	r19, 0x00	; 0
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	02 c0       	rjmp	.+4      	; 0x22c <_ZN16OrangutanDigital11isInputHighEh+0x32>
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	2a 95       	dec	r18
     22e:	e2 f7       	brpl	.-8      	; 0x228 <_ZN16OrangutanDigital11isInputHighEh+0x2e>
     230:	98 2f       	mov	r25, r24
     232:	e3 e2       	ldi	r30, 0x23	; 35
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	25 c0       	rjmp	.+74     	; 0x282 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     238:	88 31       	cpi	r24, 0x18	; 24
     23a:	78 f4       	brcc	.+30     	; 0x25a <_ZN16OrangutanDigital11isInputHighEh+0x60>
		{
			io->pinRegister = (unsigned char*)&PINC;
			io->portRegister = (unsigned char*)&PORTC;
			io->ddrRegister = (unsigned char*)&DDRC;
			io->bitmask = 1 << (pin - 16);
     23c:	28 2f       	mov	r18, r24
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	20 51       	subi	r18, 0x10	; 16
     242:	30 40       	sbci	r19, 0x00	; 0
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	02 c0       	rjmp	.+4      	; 0x24e <_ZN16OrangutanDigital11isInputHighEh+0x54>
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	2a 95       	dec	r18
     250:	e2 f7       	brpl	.-8      	; 0x24a <_ZN16OrangutanDigital11isInputHighEh+0x50>
     252:	98 2f       	mov	r25, r24
     254:	e6 e2       	ldi	r30, 0x26	; 38
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	14 c0       	rjmp	.+40     	; 0x282 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     25a:	80 32       	cpi	r24, 0x20	; 32
     25c:	20 f0       	brcs	.+8      	; 0x266 <_ZN16OrangutanDigital11isInputHighEh+0x6c>
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	e0 e0       	ldi	r30, 0x00	; 0
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	0e c0       	rjmp	.+28     	; 0x282 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		{
			io->pinRegister = (unsigned char*)&PINA;
			io->portRegister = (unsigned char*)&PORTA;
			io->ddrRegister = (unsigned char*)&DDRA;
			io->bitmask = 1 << (31 - pin);
     266:	2f e1       	ldi	r18, 0x1F	; 31
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	28 1b       	sub	r18, r24
     26c:	31 09       	sbc	r19, r1
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	02 c0       	rjmp	.+4      	; 0x278 <_ZN16OrangutanDigital11isInputHighEh+0x7e>
     274:	88 0f       	add	r24, r24
     276:	99 1f       	adc	r25, r25
     278:	2a 95       	dec	r18
     27a:	e2 f7       	brpl	.-8      	; 0x274 <_ZN16OrangutanDigital11isInputHighEh+0x7a>
     27c:	98 2f       	mov	r25, r24
     27e:	e0 e2       	ldi	r30, 0x20	; 32
     280:	f0 e0       	ldi	r31, 0x00	; 0

	// low-level method for reading the value of the PIN register for an pin or set of pins
	// described by an IOStruct pointer.
	inline static unsigned char getInputValue(struct IOStruct* ioPin)
	{
		return *(ioPin->pinRegister) & ioPin->bitmask;
     282:	80 81       	ld	r24, Z
	inline static unsigned char isInputHigh(unsigned char pin)
	{
		struct IOStruct registers;
		getIORegisters(&registers, pin);
		return getInputValue(&registers);
	}
     284:	89 23       	and	r24, r25
     286:	08 95       	ret

00000288 <__cxa_guard_acquire>:

extern "C" int __cxa_guard_acquire(__guard *); 
extern "C" void __cxa_guard_release (__guard *); 
extern "C" void __cxa_guard_abort (__guard *); 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);}; 
     288:	fc 01       	movw	r30, r24
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	88 23       	and	r24, r24
     292:	11 f4       	brne	.+4      	; 0x298 <__cxa_guard_acquire+0x10>
     294:	21 e0       	ldi	r18, 0x01	; 1
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	c9 01       	movw	r24, r18
     29a:	08 95       	ret

0000029c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;}; 
     29c:	fc 01       	movw	r30, r24
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	80 83       	st	Z, r24
     2a2:	08 95       	ret

000002a4 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
     2a4:	08 95       	ret

000002a6 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void); 
void __cxa_pure_virtual(void) {}; 
     2a6:	08 95       	ret

000002a8 <_Z15button_debounceiPiS_S_>:
	i2c_write(u_outputByte0.outputByte0);
	i2c_write(u_outputByte1.outputByte1);
}


int button_debounce(int counter, int *pcounterRefPush, int *pcounterRefRel, int *pstateButton)
     2a8:	cf 92       	push	r12
     2aa:	df 92       	push	r13
     2ac:	ef 92       	push	r14
     2ae:	ff 92       	push	r15
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	8c 01       	movw	r16, r24
     2ba:	7b 01       	movw	r14, r22
     2bc:	6a 01       	movw	r12, r20
     2be:	e9 01       	movw	r28, r18
{
	if(*pstateButton == NONE && OrangutanDigital::isInputHigh(IO_D0)){
     2c0:	88 81       	ld	r24, Y
     2c2:	99 81       	ldd	r25, Y+1	; 0x01
     2c4:	89 2b       	or	r24, r25
     2c6:	61 f4       	brne	.+24     	; 0x2e0 <_Z15button_debounceiPiS_S_+0x38>
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     2ce:	88 23       	and	r24, r24
     2d0:	39 f0       	breq	.+14     	; 0x2e0 <_Z15button_debounceiPiS_S_+0x38>
		*pcounterRefPush = counter;
     2d2:	f7 01       	movw	r30, r14
     2d4:	11 83       	std	Z+1, r17	; 0x01
     2d6:	00 83       	st	Z, r16
		*pstateButton = PRESSED;
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	99 83       	std	Y+1, r25	; 0x01
     2de:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     2e0:	88 81       	ld	r24, Y
     2e2:	99 81       	ldd	r25, Y+1	; 0x01
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	e9 f4       	brne	.+58     	; 0x322 <_Z15button_debounceiPiS_S_+0x7a>
		if(counter - *pcounterRefPush > 15){
     2e8:	f7 01       	movw	r30, r14
     2ea:	80 81       	ld	r24, Z
     2ec:	91 81       	ldd	r25, Z+1	; 0x01
     2ee:	98 01       	movw	r18, r16
     2f0:	28 1b       	sub	r18, r24
     2f2:	39 0b       	sbc	r19, r25
     2f4:	20 31       	cpi	r18, 0x10	; 16
     2f6:	31 05       	cpc	r19, r1
     2f8:	6c f0       	brlt	.+26     	; 0x314 <_Z15button_debounceiPiS_S_+0x6c>
			if(!OrangutanDigital::isInputHigh(IO_D0)){
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     300:	88 23       	and	r24, r24
     302:	79 f4       	brne	.+30     	; 0x322 <_Z15button_debounceiPiS_S_+0x7a>
				*pcounterRefRel = counter;
     304:	f6 01       	movw	r30, r12
     306:	11 83       	std	Z+1, r17	; 0x01
     308:	00 83       	st	Z, r16
				*pstateButton = DEPRESSED;
     30a:	82 e0       	ldi	r24, 0x02	; 2
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	99 83       	std	Y+1, r25	; 0x01
     310:	88 83       	st	Y, r24
     312:	07 c0       	rjmp	.+14     	; 0x322 <_Z15button_debounceiPiS_S_+0x7a>
			}
		}
		else if(!OrangutanDigital::isInputHigh(IO_D0)){
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     31a:	88 23       	and	r24, r24
     31c:	11 f4       	brne	.+4      	; 0x322 <_Z15button_debounceiPiS_S_+0x7a>
			*pstateButton = NONE;
     31e:	19 82       	std	Y+1, r1	; 0x01
     320:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == DEPRESSED){
     322:	88 81       	ld	r24, Y
     324:	99 81       	ldd	r25, Y+1	; 0x01
     326:	02 97       	sbiw	r24, 0x02	; 2
     328:	d1 f4       	brne	.+52     	; 0x35e <_Z15button_debounceiPiS_S_+0xb6>
		if(OrangutanDigital::isInputHigh(IO_D0)){
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     330:	88 23       	and	r24, r24
     332:	41 f0       	breq	.+16     	; 0x344 <_Z15button_debounceiPiS_S_+0x9c>
			*pstateButton = PRESSED;
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	99 83       	std	Y+1, r25	; 0x01
     33a:	88 83       	st	Y, r24
			*pcounterRefPush = counter;
     33c:	f7 01       	movw	r30, r14
     33e:	11 83       	std	Z+1, r17	; 0x01
     340:	00 83       	st	Z, r16
     342:	0d c0       	rjmp	.+26     	; 0x35e <_Z15button_debounceiPiS_S_+0xb6>
		}
		else if(counter - *pcounterRefRel > 15){
     344:	f6 01       	movw	r30, r12
     346:	80 81       	ld	r24, Z
     348:	91 81       	ldd	r25, Z+1	; 0x01
     34a:	08 1b       	sub	r16, r24
     34c:	19 0b       	sbc	r17, r25
     34e:	00 31       	cpi	r16, 0x10	; 16
     350:	11 05       	cpc	r17, r1
     352:	2c f0       	brlt	.+10     	; 0x35e <_Z15button_debounceiPiS_S_+0xb6>
			*pstateButton = NONE;
     354:	19 82       	std	Y+1, r1	; 0x01
     356:	18 82       	st	Y, r1
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	02 c0       	rjmp	.+4      	; 0x362 <_Z15button_debounceiPiS_S_+0xba>
			return 0;
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	return 1;
}
     362:	c9 01       	movw	r24, r18
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	ef 90       	pop	r14
     370:	df 90       	pop	r13
     372:	cf 90       	pop	r12
     374:	08 95       	ret

00000376 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>:
	OrangutanLCD::print("END");
	}
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int m1, int m2, int m3, int m4, int m5, int totallength1, int totallength2, int totallength3, int totallength4, int totallength5, int steplength1, int steplength2, int steplength3, int steplength4, int steplength5)
     376:	2f 92       	push	r2
     378:	3f 92       	push	r3
     37a:	4f 92       	push	r4
     37c:	5f 92       	push	r5
     37e:	6f 92       	push	r6
     380:	7f 92       	push	r7
     382:	8f 92       	push	r8
     384:	9f 92       	push	r9
     386:	af 92       	push	r10
     388:	bf 92       	push	r11
     38a:	cf 92       	push	r12
     38c:	df 92       	push	r13
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	df 93       	push	r29
     398:	cf 93       	push	r28
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	2c 01       	movw	r4, r24
     3a0:	1a 01       	movw	r2, r20
     3a2:	39 01       	movw	r6, r18
{
//motor and write
	if( ((counter - counterRef) % (totallength1) ) < (steplength1) && m1)  //check if it is in the right period of the loop to send high
     3a4:	fc 01       	movw	r30, r24
     3a6:	e6 1b       	sub	r30, r22
     3a8:	f7 0b       	sbc	r31, r23
     3aa:	cf 01       	movw	r24, r30
     3ac:	b4 01       	movw	r22, r8
     3ae:	0e 94 82 18 	call	0x3104	; 0x3104 <__divmodhi4>
     3b2:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3b4:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3b6:	82 17       	cp	r24, r18
     3b8:	93 07       	cpc	r25, r19
     3ba:	34 f4       	brge	.+12     	; 0x3c8 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
     3bc:	67 28       	or	r6, r7
     3be:	21 f0       	breq	.+8      	; 0x3c8 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
	{
		u_motorByte0.bits_in_motorByte0.m1Step = 1; // set bit 0
     3c0:	80 91 38 03 	lds	r24, 0x0338
     3c4:	81 60       	ori	r24, 0x01	; 1
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x58>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.m1Step = 0; // set bit 0
     3c8:	80 91 38 03 	lds	r24, 0x0338
     3cc:	8e 7f       	andi	r24, 0xFE	; 254
     3ce:	80 93 38 03 	sts	0x0338, r24
	}
		if( ((counter - counterRef) % (totallength2) ) < (steplength2) && m2)
     3d2:	cf 01       	movw	r24, r30
     3d4:	6d 89       	ldd	r22, Y+21	; 0x15
     3d6:	7e 89       	ldd	r23, Y+22	; 0x16
     3d8:	0e 94 82 18 	call	0x3104	; 0x3104 <__divmodhi4>
     3dc:	2f 8d       	ldd	r18, Y+31	; 0x1f
     3de:	38 a1       	ldd	r19, Y+32	; 0x20
     3e0:	82 17       	cp	r24, r18
     3e2:	93 07       	cpc	r25, r19
     3e4:	34 f4       	brge	.+12     	; 0x3f2 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
     3e6:	01 2b       	or	r16, r17
     3e8:	21 f0       	breq	.+8      	; 0x3f2 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
	{
		u_motorByte0.bits_in_motorByte0.m2Step = 1; // set bit 1
     3ea:	80 91 38 03 	lds	r24, 0x0338
     3ee:	88 60       	ori	r24, 0x08	; 8
     3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x82>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.m2Step = 0; // set bit 1
     3f2:	80 91 38 03 	lds	r24, 0x0338
     3f6:	87 7f       	andi	r24, 0xF7	; 247
     3f8:	80 93 38 03 	sts	0x0338, r24
	}
	if( ((counter - counterRef) % (totallength3) ) < (steplength3) && m3)
     3fc:	cf 01       	movw	r24, r30
     3fe:	6f 89       	ldd	r22, Y+23	; 0x17
     400:	78 8d       	ldd	r23, Y+24	; 0x18
     402:	0e 94 82 18 	call	0x3104	; 0x3104 <__divmodhi4>
     406:	29 a1       	ldd	r18, Y+33	; 0x21
     408:	3a a1       	ldd	r19, Y+34	; 0x22
     40a:	82 17       	cp	r24, r18
     40c:	93 07       	cpc	r25, r19
     40e:	34 f4       	brge	.+12     	; 0x41c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
     410:	ef 28       	or	r14, r15
     412:	21 f0       	breq	.+8      	; 0x41c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
	{
		u_motorByte0.bits_in_motorByte0.m3Step = 1; // set bit 1
     414:	80 91 38 03 	lds	r24, 0x0338
     418:	80 64       	ori	r24, 0x40	; 64
     41a:	03 c0       	rjmp	.+6      	; 0x422 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xac>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.m3Step = 0; // set bit 1
     41c:	80 91 38 03 	lds	r24, 0x0338
     420:	8f 7b       	andi	r24, 0xBF	; 191
     422:	80 93 38 03 	sts	0x0338, r24
	}

	if( ((counter - counterRef) % (totallength4) ) < (steplength4) && m4)
     426:	cf 01       	movw	r24, r30
     428:	69 8d       	ldd	r22, Y+25	; 0x19
     42a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     42c:	0e 94 82 18 	call	0x3104	; 0x3104 <__divmodhi4>
     430:	2b a1       	ldd	r18, Y+35	; 0x23
     432:	3c a1       	ldd	r19, Y+36	; 0x24
     434:	82 17       	cp	r24, r18
     436:	93 07       	cpc	r25, r19
     438:	34 f4       	brge	.+12     	; 0x446 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
     43a:	cd 28       	or	r12, r13
     43c:	21 f0       	breq	.+8      	; 0x446 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
	{
		u_motorByte1.bits_in_motorByte1.m4Step = 1; // set bit 1
     43e:	80 91 39 03 	lds	r24, 0x0339
     442:	82 60       	ori	r24, 0x02	; 2
     444:	03 c0       	rjmp	.+6      	; 0x44c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd6>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.m4Step = 0; // set bit 1
     446:	80 91 39 03 	lds	r24, 0x0339
     44a:	8d 7f       	andi	r24, 0xFD	; 253
     44c:	80 93 39 03 	sts	0x0339, r24
	}

	if( ((counter - counterRefFive) % (totallength5) ) < (steplength5) && m5)
     450:	c2 01       	movw	r24, r4
     452:	82 19       	sub	r24, r2
     454:	93 09       	sbc	r25, r3
     456:	6b 8d       	ldd	r22, Y+27	; 0x1b
     458:	7c 8d       	ldd	r23, Y+28	; 0x1c
     45a:	0e 94 82 18 	call	0x3104	; 0x3104 <__divmodhi4>
     45e:	2d a1       	ldd	r18, Y+37	; 0x25
     460:	3e a1       	ldd	r19, Y+38	; 0x26
     462:	82 17       	cp	r24, r18
     464:	93 07       	cpc	r25, r19
     466:	34 f4       	brge	.+12     	; 0x474 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
     468:	ab 28       	or	r10, r11
     46a:	21 f0       	breq	.+8      	; 0x474 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
	{
		u_motorByte1.bits_in_motorByte1.m5Step = 1; // set bit 1
     46c:	80 91 39 03 	lds	r24, 0x0339
     470:	80 61       	ori	r24, 0x10	; 16
     472:	03 c0       	rjmp	.+6      	; 0x47a <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x104>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.m5Step = 0; // set bit 1
     474:	80 91 39 03 	lds	r24, 0x0339
     478:	8f 7e       	andi	r24, 0xEF	; 239
     47a:	80 93 39 03 	sts	0x0339, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     47e:	80 e4       	ldi	r24, 0x40	; 64
     480:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
	i2c_write(0x2);									// write command byte
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     48a:	80 91 38 03 	lds	r24, 0x0338
     48e:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     492:	80 91 39 03 	lds	r24, 0x0339
     496:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
	i2c_stop();                            // set stop conditon = release bus
     49a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_Z8i2c_stopv>

	i2c_start(I2C2+I2C_WRITE);
     49e:	82 e4       	ldi	r24, 0x42	; 66
     4a0:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
	i2c_write(0x2);
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
	i2c_write(u_outputByte0.outputByte0);
     4aa:	80 91 3a 03 	lds	r24, 0x033A
     4ae:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
	i2c_write(u_outputByte1.outputByte1);
     4b2:	80 91 3b 03 	lds	r24, 0x033B
     4b6:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
}
     4ba:	cf 91       	pop	r28
     4bc:	df 91       	pop	r29
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	bf 90       	pop	r11
     4cc:	af 90       	pop	r10
     4ce:	9f 90       	pop	r9
     4d0:	8f 90       	pop	r8
     4d2:	7f 90       	pop	r7
     4d4:	6f 90       	pop	r6
     4d6:	5f 90       	pop	r5
     4d8:	4f 90       	pop	r4
     4da:	3f 90       	pop	r3
     4dc:	2f 90       	pop	r2
     4de:	08 95       	ret

000004e0 <main>:
void motor_and_write(int counter, int counterRef, int counterRefFive, int m1, int m2, int m3, int m4, int m5, int totallength1, int totallength2, int totallength3, int totallength4, int totallength5, int steplength1, int steplength2, int steplength3, int steplength4, int steplength5);

int button_debounce(int counter, int *pcounterRefPush, int *pcounterRefRel, int *pstateButton);


int main()   
     4e0:	2f 92       	push	r2
     4e2:	3f 92       	push	r3
     4e4:	4f 92       	push	r4
     4e6:	5f 92       	push	r5
     4e8:	6f 92       	push	r6
     4ea:	7f 92       	push	r7
     4ec:	8f 92       	push	r8
     4ee:	9f 92       	push	r9
     4f0:	af 92       	push	r10
     4f2:	bf 92       	push	r11
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	df 93       	push	r29
     502:	cf 93       	push	r28
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	6e 97       	sbiw	r28, 0x1e	; 30
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
	int m2HalfPlate = 2000, m2WholePlate = 2000, m1LoadPlate = 2000, m2HomeFix = 2000;		//Contain numbers of steps for various distances with various motors
	int m2Brush1Step = 2000, m2Brush2Step = 2000, m2Dry1Step = 2000, m2Dry2Step = 2000;
	int m2LoadBack = 2000, m2Dry1StepWhole = 2000, m2Brush2StepWhole = 2000;
    
	while(1){						//Repeats the entire program indefinitely (runs maintenance or normal each time)
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     514:	10 92 38 03 	sts	0x0338, r1
	u_motorByte1.motorByte1 = 0;  // initialize motorByte1
     518:	10 92 39 03 	sts	0x0339, r1
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     51c:	8f ef       	ldi	r24, 0xFF	; 255
     51e:	80 93 3a 03 	sts	0x033A, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
     522:	80 93 3b 03 	sts	0x033B, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
     526:	10 92 3c 03 	sts	0x033C, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
     52a:	10 92 3d 03 	sts	0x033D, r1
	
	OrangutanLCD::clear();
     52e:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("BEGIN ");
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
// another C++ file.
inline unsigned long get_ms() { return OrangutanTime::ms(); }
inline unsigned long millis() { return OrangutanTime::ms(); }

inline void delay(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
inline void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
     53a:	88 ee       	ldi	r24, 0xE8	; 232
     53c:	93 e0       	ldi	r25, 0x03	; 3
     53e:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>
	
	delay_ms(1000);

    i2c_init();                                // init I2C interface
     542:	0e 94 82 12 	call	0x2504	; 0x2504 <_Z8i2c_initv>
	
    OrangutanLCD::print("INIT ");
     546:	87 e0       	ldi	r24, 0x07	; 7
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
     54e:	80 e4       	ldi	r24, 0x40	; 64
     550:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
     554:	c8 2e       	mov	r12, r24
	i2c_stop();
     556:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_Z8i2c_stopv>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
     55a:	82 e4       	ldi	r24, 0x42	; 66
     55c:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
     560:	08 2f       	mov	r16, r24
	i2c_stop();
     562:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_Z8i2c_stopv>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
     566:	84 e4       	ldi	r24, 0x44	; 68
     568:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
     56c:	e8 2e       	mov	r14, r24
	i2c_stop();
     56e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_Z8i2c_stopv>
    
	OrangutanLCD::clear();
     572:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("START ");
     576:	8d e0       	ldi	r24, 0x0D	; 13
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
     57e:	10 e0       	ldi	r17, 0x00	; 0
     580:	dd 24       	eor	r13, r13
     582:	0c 29       	or	r16, r12
     584:	1d 29       	or	r17, r13
     586:	ff 24       	eor	r15, r15
     588:	0e 29       	or	r16, r14
     58a:	1f 29       	or	r17, r15
     58c:	01 2b       	or	r16, r17
     58e:	61 f0       	breq	.+24     	; 0x5a8 <main+0xc8>
        /* failed to issue start condition(s), possibly no device found */
        
		OrangutanLCD::print("NAK ");
     590:	84 e1       	ldi	r24, 0x14	; 20
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
		i2c_stop();
     598:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_Z8i2c_stopv>
		OrangutanLCD::print("STOP ");
     59c:	89 e1       	ldi	r24, 0x19	; 25
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     5a4:	0c 94 5f 12 	jmp	0x24be	; 0x24be <main+0x1fde>
    }
	else {
		OrangutanLCD::print("ACK ");
     5a8:	8f e1       	ldi	r24, 0x1F	; 31
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
        /* issuing start conditions ok, devices accessible */
		OrangutanLCD::print("BINIT ");
     5b0:	84 e2       	ldi	r24, 0x24	; 36
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
     5b8:	80 e4       	ldi	r24, 0x40	; 64
     5ba:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
		i2c_write(0x6);
     5be:	86 e0       	ldi	r24, 0x06	; 6
     5c0:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
		i2c_write(0x0);
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
		i2c_write(0x0);
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
		i2c_stop();
     5d0:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_Z8i2c_stopv>
		
		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
     5d4:	82 e4       	ldi	r24, 0x42	; 66
     5d6:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
		i2c_write(0x6);
     5da:	86 e0       	ldi	r24, 0x06	; 6
     5dc:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
		i2c_write(0x0);
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
		i2c_write(0x0);
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
		i2c_stop();
     5ec:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_Z8i2c_stopv>
     5f0:	88 ee       	ldi	r24, 0xE8	; 232
     5f2:	93 e0       	ldi	r25, 0x03	; 3
     5f4:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>
										//Registers default to input, so I2C3 is fine already


		delay_ms(1000);
		OrangutanLCD::clear();
     5f8:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
		//hold whether or not statements have been printed yet (numbers refer to run mode states)
		int print0 = 1, print35 = 1;
		
		//initialize button variables
		int button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
		int counterRefPush = 0;		//holds the counter value when the button was pushed
     5fc:	1a 82       	std	Y+2, r1	; 0x02
     5fe:	19 82       	std	Y+1, r1	; 0x01
		int counterRefRel = 0;		//holds the counter value when the button was released
     600:	1c 82       	std	Y+4, r1	; 0x04
     602:	1b 82       	std	Y+3, r1	; 0x03
		int stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     604:	1e 82       	std	Y+6, r1	; 0x06
     606:	1d 82       	std	Y+5, r1	; 0x05

		if(OrangutanDigital::isInputHigh(IO_D3))							//Tests if the switch is set to Maintenance Mode
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     60e:	88 23       	and	r24, r24
     610:	09 f4       	brne	.+2      	; 0x614 <main+0x134>
     612:	2c c4       	rjmp	.+2136   	; 0xe6c <main+0x98c>
		{
			OrangutanLCD::print("MAINTENANCE");
     614:	8b e2       	ldi	r24, 0x2B	; 43
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     61c:	88 ee       	ldi	r24, 0xE8	; 232
     61e:	93 e0       	ldi	r25, 0x03	; 3
     620:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>
			
			//initialize
			int print = 0;
			int mode = -1;

			OrangutanLCD::clear();
     624:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
			OrangutanLCD::print("SELECT MODE");
     628:	87 e3       	ldi	r24, 0x37	; 55
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     630:	ee 24       	eor	r14, r14
     632:	ff 24       	eor	r15, r15
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = NONE;
					}
				}*/
				button = button_debounce(counter, &counterRefPush, &counterRefRel, &stateButton);
     634:	c7 01       	movw	r24, r14
     636:	be 01       	movw	r22, r28
     638:	6f 5f       	subi	r22, 0xFF	; 255
     63a:	7f 4f       	sbci	r23, 0xFF	; 255
     63c:	ae 01       	movw	r20, r28
     63e:	4d 5f       	subi	r20, 0xFD	; 253
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	9e 01       	movw	r18, r28
     644:	2b 5f       	subi	r18, 0xFB	; 251
     646:	3f 4f       	sbci	r19, 0xFF	; 255
     648:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPiS_S_>
     64c:	8c 01       	movw	r16, r24
				counter++;
     64e:	08 94       	sec
     650:	e1 1c       	adc	r14, r1
     652:	f1 1c       	adc	r15, r1
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>

			OrangutanLCD::clear();
			OrangutanLCD::print("SELECT MODE");
			
			//Repeats until user debounces button - waiting for user to select a mode
			while(button != 0){
     65c:	01 2b       	or	r16, r17
     65e:	51 f7       	brne	.-44     	; 0x634 <main+0x154>
				counter++;
				delay_ms(1);
			}
			button = 1;
			counter = 0;
			OrangutanLCD::clear();
     660:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
     664:	66 24       	eor	r6, r6
     666:	77 24       	eor	r7, r7
     668:	22 24       	eor	r2, r2
     66a:	2a 94       	dec	r2
     66c:	32 2c       	mov	r3, r2
     66e:	1e 8e       	std	Y+30, r1	; 0x1e
     670:	1d 8e       	std	Y+29, r1	; 0x1d
     672:	44 24       	eor	r4, r4
     674:	55 24       	eor	r5, r5
     676:	1c 86       	std	Y+12, r1	; 0x0c
     678:	1b 86       	std	Y+11, r1	; 0x0b
     67a:	1c 8e       	std	Y+28, r1	; 0x1c
     67c:	1b 8e       	std	Y+27, r1	; 0x1b
			
			while(state != -1){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     67e:	84 e4       	ldi	r24, 0x44	; 68
     680:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     68a:	85 e4       	ldi	r24, 0x45	; 69
     68c:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     690:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_Z11i2c_readAckv>
     694:	80 93 3c 03 	sts	0x033C, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     698:	0e 94 fd 12 	call	0x25fa	; 0x25fa <_Z11i2c_readNakv>
     69c:	80 93 3d 03 	sts	0x033D, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     6a0:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_Z8i2c_stopv>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}*/
				button = button_debounce(counter, &counterRefPush, &counterRefRel, &stateButton);
     6a4:	8b 85       	ldd	r24, Y+11	; 0x0b
     6a6:	9c 85       	ldd	r25, Y+12	; 0x0c
     6a8:	be 01       	movw	r22, r28
     6aa:	6f 5f       	subi	r22, 0xFF	; 255
     6ac:	7f 4f       	sbci	r23, 0xFF	; 255
     6ae:	ae 01       	movw	r20, r28
     6b0:	4d 5f       	subi	r20, 0xFD	; 253
     6b2:	5f 4f       	sbci	r21, 0xFF	; 255
     6b4:	9e 01       	movw	r18, r28
     6b6:	2b 5f       	subi	r18, 0xFB	; 251
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ba:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPiS_S_>
     6be:	8c 01       	movw	r16, r24

				//Switches mode to whichever is currently selected
				if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && mode != 0){
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     6c6:	88 23       	and	r24, r24
     6c8:	c1 f4       	brne	.+48     	; 0x6fa <main+0x21a>
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     6d0:	88 23       	and	r24, r24
     6d2:	99 f4       	brne	.+38     	; 0x6fa <main+0x21a>
     6d4:	21 14       	cp	r2, r1
     6d6:	31 04       	cpc	r3, r1
     6d8:	81 f0       	breq	.+32     	; 0x6fa <main+0x21a>
					state = S0;
					mode = INPUT;
					OrangutanLCD::clear();
     6da:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     6de:	83 e4       	ldi	r24, 0x43	; 67
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
     6ee:	66 24       	eor	r6, r6
     6f0:	77 24       	eor	r7, r7
     6f2:	22 24       	eor	r2, r2
     6f4:	33 24       	eor	r3, r3
     6f6:	44 24       	eor	r4, r4
     6f8:	55 24       	eor	r5, r5
					print = 0;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && mode != 1){
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     700:	88 23       	and	r24, r24
     702:	d9 f0       	breq	.+54     	; 0x73a <main+0x25a>
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     70a:	88 23       	and	r24, r24
     70c:	b1 f4       	brne	.+44     	; 0x73a <main+0x25a>
     70e:	21 e0       	ldi	r18, 0x01	; 1
     710:	22 16       	cp	r2, r18
     712:	31 04       	cpc	r3, r1
     714:	91 f0       	breq	.+36     	; 0x73a <main+0x25a>
					state = O0_ON;
					mode = OUTPUT;
					OrangutanLCD::clear();
     716:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("OUTPUTS");
     71a:	8b e4       	ldi	r24, 0x4B	; 75
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
     72a:	66 24       	eor	r6, r6
     72c:	77 24       	eor	r7, r7
     72e:	b1 e0       	ldi	r27, 0x01	; 1
     730:	2b 2e       	mov	r2, r27
     732:	31 2c       	mov	r3, r1
     734:	a8 e0       	ldi	r26, 0x08	; 8
     736:	4a 2e       	mov	r4, r26
     738:	51 2c       	mov	r5, r1
					print = 0;
				}
				if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && mode != 2){
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     740:	88 23       	and	r24, r24
     742:	d9 f4       	brne	.+54     	; 0x77a <main+0x29a>
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     74a:	88 23       	and	r24, r24
     74c:	b1 f0       	breq	.+44     	; 0x77a <main+0x29a>
     74e:	32 e0       	ldi	r19, 0x02	; 2
     750:	23 16       	cp	r2, r19
     752:	31 04       	cpc	r3, r1
     754:	91 f0       	breq	.+36     	; 0x77a <main+0x29a>
					state = M1_F;
					mode = MOTOR;
					OrangutanLCD::clear();
     756:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MOTORS ");
     75a:	83 e5       	ldi	r24, 0x53	; 83
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
     76a:	66 24       	eor	r6, r6
     76c:	77 24       	eor	r7, r7
     76e:	f2 e0       	ldi	r31, 0x02	; 2
     770:	2f 2e       	mov	r2, r31
     772:	31 2c       	mov	r3, r1
     774:	e0 e2       	ldi	r30, 0x20	; 32
     776:	4e 2e       	mov	r4, r30
     778:	51 2c       	mov	r5, r1
					print = 0;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && mode != 3){
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     780:	88 23       	and	r24, r24
     782:	d1 f0       	breq	.+52     	; 0x7b8 <main+0x2d8>
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     78a:	88 23       	and	r24, r24
     78c:	a9 f0       	breq	.+42     	; 0x7b8 <main+0x2d8>
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	28 16       	cp	r2, r24
     792:	31 04       	cpc	r3, r1
     794:	89 f0       	breq	.+34     	; 0x7b8 <main+0x2d8>
					state = S0;
					mode = ALL;
					OrangutanLCD::clear();
     796:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     79a:	83 e4       	ldi	r24, 0x43	; 67
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
     7aa:	66 24       	eor	r6, r6
     7ac:	77 24       	eor	r7, r7
     7ae:	73 e0       	ldi	r23, 0x03	; 3
     7b0:	27 2e       	mov	r2, r23
     7b2:	31 2c       	mov	r3, r1
     7b4:	44 24       	eor	r4, r4
     7b6:	55 24       	eor	r5, r5
					print = 0;
				}

				//state conversions

				if(button == 0) {					//if a state conversion is in order (button press)
     7b8:	01 2b       	or	r16, r17
     7ba:	09 f0       	breq	.+2      	; 0x7be <main+0x2de>
     7bc:	c5 c0       	rjmp	.+394    	; 0x948 <main+0x468>
					if(state <= S7){				//if it's doing the sensors
     7be:	98 e0       	ldi	r25, 0x08	; 8
     7c0:	49 16       	cp	r4, r25
     7c2:	51 04       	cpc	r5, r1
     7c4:	04 f5       	brge	.+64     	; 0x806 <main+0x326>
						OrangutanLCD::gotoXY(0,1);
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	61 e0       	ldi	r22, 0x01	; 1
     7ca:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
						button = 1;
						state ++;
     7ce:	08 94       	sec
     7d0:	41 1c       	adc	r4, r1
     7d2:	51 1c       	adc	r5, r1
						counterRef = counter;
						print = 0;
						if(state == S7 + 1){		//accounts for possible end of maintenance mode after sensors
     7d4:	a8 e0       	ldi	r26, 0x08	; 8
     7d6:	4a 16       	cp	r4, r26
     7d8:	51 04       	cpc	r5, r1
     7da:	09 f0       	breq	.+2      	; 0x7de <main+0x2fe>
     7dc:	af c0       	rjmp	.+350    	; 0x93c <main+0x45c>
							OrangutanLCD::clear();
     7de:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
							if(mode == 0){
     7e2:	21 14       	cp	r2, r1
     7e4:	31 04       	cpc	r3, r1
     7e6:	11 f4       	brne	.+4      	; 0x7ec <main+0x30c>
     7e8:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <main+0x2002>
								state = -1;
							}
							else{
								OrangutanLCD::print("OUTPUTS");
     7ec:	8b e4       	ldi	r24, 0x4B	; 75
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
								OrangutanLCD::gotoXY(0,1);
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	61 e0       	ldi	r22, 0x01	; 1
     7f8:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
     7fc:	2b 85       	ldd	r18, Y+11	; 0x0b
     7fe:	3c 85       	ldd	r19, Y+12	; 0x0c
     800:	3c 8f       	std	Y+28, r19	; 0x1c
     802:	2b 8f       	std	Y+27, r18	; 0x1b
     804:	77 c1       	rjmp	.+750    	; 0xaf4 <main+0x614>
     806:	c2 01       	movw	r24, r4
     808:	81 70       	andi	r24, 0x01	; 1
     80a:	90 70       	andi	r25, 0x00	; 0
							}
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
     80c:	30 e2       	ldi	r19, 0x20	; 32
     80e:	43 16       	cp	r4, r19
     810:	51 04       	cpc	r5, r1
     812:	8c f5       	brge	.+98     	; 0x876 <main+0x396>
						if(state % 2 == 0){			//current state is an 'on' state
     814:	89 2b       	or	r24, r25
     816:	49 f4       	brne	.+18     	; 0x82a <main+0x34a>
							OrangutanLCD::gotoXY(13,1);
     818:	8d e0       	ldi	r24, 0x0D	; 13
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("OFF");
     820:	8b e5       	ldi	r24, 0x5B	; 91
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     828:	04 c0       	rjmp	.+8      	; 0x832 <main+0x352>
						}
						else{						//current state is an 'off' state
							OrangutanLCD::gotoXY(0,1);
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	61 e0       	ldi	r22, 0x01	; 1
     82e:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
						}
						button = 1;
						state ++;
     832:	08 94       	sec
     834:	41 1c       	adc	r4, r1
     836:	51 1c       	adc	r5, r1
						counterRef = counter;
						print = 0;
						if(state == O11_OFF + 1){	//accounts for possible end of maintenance mode after outputs
     838:	80 e2       	ldi	r24, 0x20	; 32
     83a:	48 16       	cp	r4, r24
     83c:	51 04       	cpc	r5, r1
     83e:	09 f0       	breq	.+2      	; 0x842 <main+0x362>
     840:	7d c0       	rjmp	.+250    	; 0x93c <main+0x45c>
							OrangutanLCD::clear();
     842:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
							if(mode == 1){
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	29 16       	cp	r2, r25
     84a:	31 04       	cpc	r3, r1
     84c:	11 f4       	brne	.+4      	; 0x852 <main+0x372>
     84e:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <main+0x2002>
								state = -1;
							}
							else{
								u_motorByte0.bits_in_motorByte0.m1Drop = 1;
     852:	80 91 38 03 	lds	r24, 0x0338
     856:	84 60       	ori	r24, 0x04	; 4
     858:	80 93 38 03 	sts	0x0338, r24
								OrangutanLCD::print("MOTORS");
     85c:	8f e5       	ldi	r24, 0x5F	; 95
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
								OrangutanLCD::gotoXY(0,1);
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
     86c:	ab 85       	ldd	r26, Y+11	; 0x0b
     86e:	bc 85       	ldd	r27, Y+12	; 0x0c
     870:	bc 8f       	std	Y+28, r27	; 0x1c
     872:	ab 8f       	std	Y+27, r26	; 0x1b
     874:	42 c2       	rjmp	.+1156   	; 0xcfa <main+0x81a>
							}
						}
					}
					else{							//if it's doing the motors
						button = 1;
						state ++;
     876:	82 01       	movw	r16, r4
     878:	0f 5f       	subi	r16, 0xFF	; 255
     87a:	1f 4f       	sbci	r17, 0xFF	; 255
						counterRef = counter;
						print = 0;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
     87c:	89 2b       	or	r24, r25
     87e:	71 f4       	brne	.+28     	; 0x89c <main+0x3bc>
							OrangutanLCD::gotoXY(11,1);
     880:	8b e0       	ldi	r24, 0x0B	; 11
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("BACK ");
     888:	86 e6       	ldi	r24, 0x66	; 102
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     890:	28 01       	movw	r4, r16
     892:	2b 85       	ldd	r18, Y+11	; 0x0b
     894:	3c 85       	ldd	r19, Y+12	; 0x0c
     896:	3c 8f       	std	Y+28, r19	; 0x1c
     898:	2b 8f       	std	Y+27, r18	; 0x1b
     89a:	54 c0       	rjmp	.+168    	; 0x944 <main+0x464>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
     89c:	06 32       	cpi	r16, 0x26	; 38
     89e:	11 05       	cpc	r17, r1
     8a0:	71 f1       	breq	.+92     	; 0x8fe <main+0x41e>
     8a2:	07 32       	cpi	r16, 0x27	; 39
     8a4:	11 05       	cpc	r17, r1
     8a6:	3c f4       	brge	.+14     	; 0x8b6 <main+0x3d6>
     8a8:	02 32       	cpi	r16, 0x22	; 34
     8aa:	11 05       	cpc	r17, r1
     8ac:	81 f0       	breq	.+32     	; 0x8ce <main+0x3ee>
     8ae:	04 32       	cpi	r16, 0x24	; 36
     8b0:	11 05       	cpc	r17, r1
     8b2:	39 f4       	brne	.+14     	; 0x8c2 <main+0x3e2>
     8b4:	16 c0       	rjmp	.+44     	; 0x8e2 <main+0x402>
     8b6:	08 32       	cpi	r16, 0x28	; 40
     8b8:	11 05       	cpc	r17, r1
     8ba:	59 f1       	breq	.+86     	; 0x912 <main+0x432>
     8bc:	0a 32       	cpi	r16, 0x2A	; 42
     8be:	11 05       	cpc	r17, r1
     8c0:	91 f1       	breq	.+100    	; 0x926 <main+0x446>
     8c2:	28 01       	movw	r4, r16
     8c4:	8b 85       	ldd	r24, Y+11	; 0x0b
     8c6:	9c 85       	ldd	r25, Y+12	; 0x0c
     8c8:	9c 8f       	std	Y+28, r25	; 0x1c
     8ca:	8b 8f       	std	Y+27, r24	; 0x1b
     8cc:	3b c0       	rjmp	.+118    	; 0x944 <main+0x464>
								case M1_B + 1:
									OrangutanLCD::gotoXY(0,1);
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	61 e0       	ldi	r22, 0x01	; 1
     8d2:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.m1Drop = 0;
     8d6:	80 91 38 03 	lds	r24, 0x0338
     8da:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.m2Drop = 1;
     8dc:	80 62       	ori	r24, 0x20	; 32
     8de:	80 93 38 03 	sts	0x0338, r24
								case M2_B + 1:
									OrangutanLCD::gotoXY(0,1);
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.m2Drop = 0;
     8ea:	80 91 38 03 	lds	r24, 0x0338
     8ee:	8f 7d       	andi	r24, 0xDF	; 223
     8f0:	80 93 38 03 	sts	0x0338, r24
									u_motorByte1.bits_in_motorByte1.m3Drop = 1;
     8f4:	80 91 39 03 	lds	r24, 0x0339
     8f8:	81 60       	ori	r24, 0x01	; 1
     8fa:	80 93 39 03 	sts	0x0339, r24
								case M3_B + 1:
									OrangutanLCD::gotoXY(0,1);
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.m3Drop = 0;
     906:	80 91 39 03 	lds	r24, 0x0339
     90a:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.m4Drop = 1;
     90c:	88 60       	ori	r24, 0x08	; 8
     90e:	80 93 39 03 	sts	0x0339, r24
								case M4_B + 1:
									OrangutanLCD::gotoXY(0,1);
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	61 e0       	ldi	r22, 0x01	; 1
     916:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.m4Drop = 0;
     91a:	80 91 39 03 	lds	r24, 0x0339
     91e:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.m5Drop = 1;
     920:	80 64       	ori	r24, 0x40	; 64
     922:	80 93 39 03 	sts	0x0339, r24
								case M5_B + 1:
									OrangutanLCD::clear();
     926:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
									u_motorByte1.bits_in_motorByte1.m5Drop = 0;
     92a:	80 91 39 03 	lds	r24, 0x0339
     92e:	8f 7b       	andi	r24, 0xBF	; 191
     930:	80 93 39 03 	sts	0x0339, r24
     934:	1e 8e       	std	Y+30, r1	; 0x1e
     936:	1d 8e       	std	Y+29, r1	; 0x1d
     938:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <main+0x2002>
     93c:	ab 85       	ldd	r26, Y+11	; 0x0b
     93e:	bc 85       	ldd	r27, Y+12	; 0x0c
     940:	bc 8f       	std	Y+28, r27	; 0x1c
     942:	ab 8f       	std	Y+27, r26	; 0x1b
     944:	66 24       	eor	r6, r6
     946:	77 24       	eor	r7, r7
					print = 0;
					m5 = 0;
				}*/

				//state actions
				switch (state) {
     948:	f2 01       	movw	r30, r4
     94a:	ea 32       	cpi	r30, 0x2A	; 42
     94c:	f1 05       	cpc	r31, r1
     94e:	08 f0       	brcs	.+2      	; 0x952 <main+0x472>
     950:	39 c2       	rjmp	.+1138   	; 0xdc4 <main+0x8e4>
     952:	ea 5b       	subi	r30, 0xBA	; 186
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	ee 0f       	add	r30, r30
     958:	ff 1f       	adc	r31, r31
     95a:	05 90       	lpm	r0, Z+
     95c:	f4 91       	lpm	r31, Z+
     95e:	e0 2d       	mov	r30, r0
     960:	09 94       	ijmp
					case S0:
						if(print == 0){
     962:	61 14       	cp	r6, r1
     964:	71 04       	cpc	r7, r1
     966:	39 f4       	brne	.+14     	; 0x976 <main+0x496>
							OrangutanLCD::print("SENSOR 0");
     968:	8c e6       	ldi	r24, 0x6C	; 108
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	66 2e       	mov	r6, r22
     974:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     976:	8f e0       	ldi	r24, 0x0F	; 15
     978:	61 e0       	ldi	r22, 0x01	; 1
     97a:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
	// position and will not span lines.
	static void print(unsigned long value);
	static void print(long value);
	static inline void print(unsigned int value)
	{
		print((unsigned long)value);
     97e:	60 91 3c 03 	lds	r22, 0x033C
     982:	61 70       	andi	r22, 0x01	; 1
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN12OrangutanLCD5printEm>
     98e:	0a c0       	rjmp	.+20     	; 0x9a4 <main+0x4c4>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.plate);
					case S1:
						if(print == 0){
     990:	61 14       	cp	r6, r1
     992:	71 04       	cpc	r7, r1
     994:	39 f4       	brne	.+14     	; 0x9a4 <main+0x4c4>
							OrangutanLCD::print("SENSOR 1");
     996:	85 e7       	ldi	r24, 0x75	; 117
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     99e:	51 e0       	ldi	r21, 0x01	; 1
     9a0:	65 2e       	mov	r6, r21
     9a2:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     9a4:	8f e0       	ldi	r24, 0x0F	; 15
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
     9ac:	60 91 3c 03 	lds	r22, 0x033C
     9b0:	66 95       	lsr	r22
     9b2:	61 70       	andi	r22, 0x01	; 1
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN12OrangutanLCD5printEm>
     9be:	0a c0       	rjmp	.+20     	; 0x9d4 <main+0x4f4>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureLift);
					case S2:
						if(print == 0){
     9c0:	61 14       	cp	r6, r1
     9c2:	71 04       	cpc	r7, r1
     9c4:	39 f4       	brne	.+14     	; 0x9d4 <main+0x4f4>
							OrangutanLCD::print("SENSOR 2");
     9c6:	8e e7       	ldi	r24, 0x7E	; 126
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     9ce:	41 e0       	ldi	r20, 0x01	; 1
     9d0:	64 2e       	mov	r6, r20
     9d2:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     9d4:	8f e0       	ldi	r24, 0x0F	; 15
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
     9dc:	60 91 3c 03 	lds	r22, 0x033C
     9e0:	66 95       	lsr	r22
     9e2:	66 95       	lsr	r22
     9e4:	61 70       	andi	r22, 0x01	; 1
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN12OrangutanLCD5printEm>
     9f0:	0a c0       	rjmp	.+20     	; 0xa06 <main+0x526>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureHome);
					case S3:
						if(print == 0){
     9f2:	61 14       	cp	r6, r1
     9f4:	71 04       	cpc	r7, r1
     9f6:	39 f4       	brne	.+14     	; 0xa06 <main+0x526>
							OrangutanLCD::print("SENSOR 3");
     9f8:	87 e8       	ldi	r24, 0x87	; 135
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     a00:	31 e0       	ldi	r19, 0x01	; 1
     a02:	63 2e       	mov	r6, r19
     a04:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a06:	8f e0       	ldi	r24, 0x0F	; 15
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
     a0e:	60 91 3c 03 	lds	r22, 0x033C
     a12:	66 95       	lsr	r22
     a14:	66 95       	lsr	r22
     a16:	66 95       	lsr	r22
     a18:	61 70       	andi	r22, 0x01	; 1
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN12OrangutanLCD5printEm>
     a24:	0a c0       	rjmp	.+20     	; 0xa3a <main+0x55a>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixturePlate);
					case S4:
						if(print == 0){
     a26:	61 14       	cp	r6, r1
     a28:	71 04       	cpc	r7, r1
     a2a:	39 f4       	brne	.+14     	; 0xa3a <main+0x55a>
							OrangutanLCD::print("SENSOR 4");
     a2c:	80 e9       	ldi	r24, 0x90	; 144
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     a34:	21 e0       	ldi	r18, 0x01	; 1
     a36:	62 2e       	mov	r6, r18
     a38:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a3a:	8f e0       	ldi	r24, 0x0F	; 15
     a3c:	61 e0       	ldi	r22, 0x01	; 1
     a3e:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
     a42:	60 91 3c 03 	lds	r22, 0x033C
     a46:	62 95       	swap	r22
     a48:	61 70       	andi	r22, 0x01	; 1
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN12OrangutanLCD5printEm>
     a54:	0a c0       	rjmp	.+20     	; 0xa6a <main+0x58a>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
					case S5:
						if(print == 0){
     a56:	61 14       	cp	r6, r1
     a58:	71 04       	cpc	r7, r1
     a5a:	39 f4       	brne	.+14     	; 0xa6a <main+0x58a>
							OrangutanLCD::print("SENSOR 5");
     a5c:	89 e9       	ldi	r24, 0x99	; 153
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	69 2e       	mov	r6, r25
     a68:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a6a:	8f e0       	ldi	r24, 0x0F	; 15
     a6c:	61 e0       	ldi	r22, 0x01	; 1
     a6e:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
     a72:	60 91 3c 03 	lds	r22, 0x033C
     a76:	62 95       	swap	r22
     a78:	66 95       	lsr	r22
     a7a:	61 70       	andi	r22, 0x01	; 1
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN12OrangutanLCD5printEm>
     a86:	0a c0       	rjmp	.+20     	; 0xa9c <main+0x5bc>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
					case S6:
						if(print == 0){
     a88:	61 14       	cp	r6, r1
     a8a:	71 04       	cpc	r7, r1
     a8c:	39 f4       	brne	.+14     	; 0xa9c <main+0x5bc>
							OrangutanLCD::print("SENSOR 6");
     a8e:	82 ea       	ldi	r24, 0xA2	; 162
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	68 2e       	mov	r6, r24
     a9a:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a9c:	8f e0       	ldi	r24, 0x0F	; 15
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
     aa4:	60 91 3c 03 	lds	r22, 0x033C
     aa8:	62 95       	swap	r22
     aaa:	66 95       	lsr	r22
     aac:	66 95       	lsr	r22
     aae:	61 70       	andi	r22, 0x01	; 1
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN12OrangutanLCD5printEm>
     aba:	0a c0       	rjmp	.+20     	; 0xad0 <main+0x5f0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry1);
					case S7:
						if(print == 0){
     abc:	61 14       	cp	r6, r1
     abe:	71 04       	cpc	r7, r1
     ac0:	39 f4       	brne	.+14     	; 0xad0 <main+0x5f0>
							OrangutanLCD::print("SENSOR 7");
     ac2:	8b ea       	ldi	r24, 0xAB	; 171
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     aca:	01 e0       	ldi	r16, 0x01	; 1
     acc:	60 2e       	mov	r6, r16
     ace:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     ad0:	8f e0       	ldi	r24, 0x0F	; 15
     ad2:	61 e0       	ldi	r22, 0x01	; 1
     ad4:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
     ad8:	60 91 3c 03 	lds	r22, 0x033C
     adc:	66 1f       	adc	r22, r22
     ade:	66 27       	eor	r22, r22
     ae0:	66 1f       	adc	r22, r22
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN12OrangutanLCD5printEm>
     aec:	0d c0       	rjmp	.+26     	; 0xb08 <main+0x628>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry2);
					case O0_ON:
						if(print == 0){
     aee:	61 14       	cp	r6, r1
     af0:	71 04       	cpc	r7, r1
     af2:	51 f4       	brne	.+20     	; 0xb08 <main+0x628>
							OrangutanLCD::print("AC POWER     ON ");
     af4:	84 eb       	ldi	r24, 0xB4	; 180
     af6:	91 e0       	ldi	r25, 0x01	; 1
     af8:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     afc:	11 e0       	ldi	r17, 0x01	; 1
     afe:	61 2e       	mov	r6, r17
     b00:	71 2c       	mov	r7, r1
     b02:	b8 e0       	ldi	r27, 0x08	; 8
     b04:	4b 2e       	mov	r4, r27
     b06:	51 2c       	mov	r5, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
     b08:	80 91 3a 03 	lds	r24, 0x033A
     b0c:	8e 7f       	andi	r24, 0xFE	; 254
     b0e:	80 93 3a 03 	sts	0x033A, r24
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
     b12:	80 91 3a 03 	lds	r24, 0x033A
     b16:	81 60       	ori	r24, 0x01	; 1
     b18:	80 93 3a 03 	sts	0x033A, r24
					case O1_ON:
						if(print == 0){
     b1c:	61 14       	cp	r6, r1
     b1e:	71 04       	cpc	r7, r1
     b20:	39 f4       	brne	.+14     	; 0xb30 <main+0x650>
							OrangutanLCD::print("BLOWER       ON  ");
     b22:	85 ec       	ldi	r24, 0xC5	; 197
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     b2a:	a1 e0       	ldi	r26, 0x01	; 1
     b2c:	6a 2e       	mov	r6, r26
     b2e:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     b30:	80 91 3a 03 	lds	r24, 0x033A
     b34:	8d 7f       	andi	r24, 0xFD	; 253
     b36:	80 93 3a 03 	sts	0x033A, r24
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     b3a:	80 91 3a 03 	lds	r24, 0x033A
     b3e:	82 60       	ori	r24, 0x02	; 2
     b40:	80 93 3a 03 	sts	0x033A, r24
					case O2_ON:
						if(print == 0){
     b44:	61 14       	cp	r6, r1
     b46:	71 04       	cpc	r7, r1
     b48:	39 f4       	brne	.+14     	; 0xb58 <main+0x678>
							OrangutanLCD::print("PLATE STOP   ON ");
     b4a:	87 ed       	ldi	r24, 0xD7	; 215
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     b52:	f1 e0       	ldi	r31, 0x01	; 1
     b54:	6f 2e       	mov	r6, r31
     b56:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
     b58:	80 91 3a 03 	lds	r24, 0x033A
     b5c:	8b 7f       	andi	r24, 0xFB	; 251
     b5e:	80 93 3a 03 	sts	0x033A, r24
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
     b62:	80 91 3a 03 	lds	r24, 0x033A
     b66:	84 60       	ori	r24, 0x04	; 4
     b68:	80 93 3a 03 	sts	0x033A, r24
					case O3_ON:
						if(print == 0){
     b6c:	61 14       	cp	r6, r1
     b6e:	71 04       	cpc	r7, r1
     b70:	39 f4       	brne	.+14     	; 0xb80 <main+0x6a0>
							OrangutanLCD::print("PLATE RAISE  ON ");
     b72:	88 ee       	ldi	r24, 0xE8	; 232
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     b7a:	e1 e0       	ldi	r30, 0x01	; 1
     b7c:	6e 2e       	mov	r6, r30
     b7e:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     b80:	80 91 3a 03 	lds	r24, 0x033A
     b84:	87 7f       	andi	r24, 0xF7	; 247
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     b86:	80 61       	ori	r24, 0x10	; 16
     b88:	80 93 3a 03 	sts	0x033A, r24
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     b8c:	80 91 3a 03 	lds	r24, 0x033A
     b90:	88 60       	ori	r24, 0x08	; 8
     b92:	80 93 3a 03 	sts	0x033A, r24
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
					case O4_ON:
						if(print == 0){
     b96:	61 14       	cp	r6, r1
     b98:	71 04       	cpc	r7, r1
     b9a:	39 f4       	brne	.+14     	; 0xbaa <main+0x6ca>
							OrangutanLCD::print("PLATE LOWER  ON ");
     b9c:	89 ef       	ldi	r24, 0xF9	; 249
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     ba4:	71 e0       	ldi	r23, 0x01	; 1
     ba6:	67 2e       	mov	r6, r23
     ba8:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     baa:	80 91 3a 03 	lds	r24, 0x033A
     bae:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     bb0:	8f 7e       	andi	r24, 0xEF	; 239
     bb2:	80 93 3a 03 	sts	0x033A, r24
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     bb6:	80 91 3a 03 	lds	r24, 0x033A
     bba:	80 61       	ori	r24, 0x10	; 16
     bbc:	80 93 3a 03 	sts	0x033A, r24
					case O5_ON:
						if(print == 0){
     bc0:	61 14       	cp	r6, r1
     bc2:	71 04       	cpc	r7, r1
     bc4:	39 f4       	brne	.+14     	; 0xbd4 <main+0x6f4>
							OrangutanLCD::print("BRUSH1 RAISE ON ");
     bc6:	8a e0       	ldi	r24, 0x0A	; 10
     bc8:	92 e0       	ldi	r25, 0x02	; 2
     bca:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	66 2e       	mov	r6, r22
     bd2:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     bd4:	80 91 3a 03 	lds	r24, 0x033A
     bd8:	8f 7d       	andi	r24, 0xDF	; 223
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     bda:	80 64       	ori	r24, 0x40	; 64
     bdc:	80 93 3a 03 	sts	0x033A, r24
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     be0:	80 91 3a 03 	lds	r24, 0x033A
     be4:	80 62       	ori	r24, 0x20	; 32
     be6:	80 93 3a 03 	sts	0x033A, r24
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					case O6_ON:
						if(print == 0){
     bea:	61 14       	cp	r6, r1
     bec:	71 04       	cpc	r7, r1
     bee:	39 f4       	brne	.+14     	; 0xbfe <main+0x71e>
							OrangutanLCD::print("BRUSH1 LOWER ON ");
     bf0:	8b e1       	ldi	r24, 0x1B	; 27
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     bf8:	51 e0       	ldi	r21, 0x01	; 1
     bfa:	65 2e       	mov	r6, r21
     bfc:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     bfe:	80 91 3a 03 	lds	r24, 0x033A
     c02:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     c04:	80 62       	ori	r24, 0x20	; 32
     c06:	80 93 3a 03 	sts	0x033A, r24
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     c0a:	80 91 3a 03 	lds	r24, 0x033A
     c0e:	80 64       	ori	r24, 0x40	; 64
     c10:	80 93 3a 03 	sts	0x033A, r24
					case O7_ON:
						if(print == 0){
     c14:	61 14       	cp	r6, r1
     c16:	71 04       	cpc	r7, r1
     c18:	39 f4       	brne	.+14     	; 0xc28 <main+0x748>
							OrangutanLCD::print("BRUSH2 RAISE ON ");
     c1a:	8c e2       	ldi	r24, 0x2C	; 44
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     c22:	41 e0       	ldi	r20, 0x01	; 1
     c24:	64 2e       	mov	r6, r20
     c26:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     c28:	80 91 3a 03 	lds	r24, 0x033A
     c2c:	8f 77       	andi	r24, 0x7F	; 127
     c2e:	80 93 3a 03 	sts	0x033A, r24
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     c32:	80 91 3b 03 	lds	r24, 0x033B
     c36:	81 60       	ori	r24, 0x01	; 1
     c38:	80 93 3b 03 	sts	0x033B, r24
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     c3c:	80 91 3a 03 	lds	r24, 0x033A
     c40:	80 68       	ori	r24, 0x80	; 128
     c42:	80 93 3a 03 	sts	0x033A, r24
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
					case O8_ON:
						if(print == 0){
     c46:	61 14       	cp	r6, r1
     c48:	71 04       	cpc	r7, r1
     c4a:	39 f4       	brne	.+14     	; 0xc5a <main+0x77a>
							OrangutanLCD::print("BRUSH2 LOWER ON ");
     c4c:	8d e3       	ldi	r24, 0x3D	; 61
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     c54:	31 e0       	ldi	r19, 0x01	; 1
     c56:	63 2e       	mov	r6, r19
     c58:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     c5a:	80 91 3b 03 	lds	r24, 0x033B
     c5e:	8e 7f       	andi	r24, 0xFE	; 254
     c60:	80 93 3b 03 	sts	0x033B, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     c64:	80 91 3a 03 	lds	r24, 0x033A
     c68:	80 68       	ori	r24, 0x80	; 128
     c6a:	80 93 3a 03 	sts	0x033A, r24
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     c6e:	80 91 3b 03 	lds	r24, 0x033B
     c72:	81 60       	ori	r24, 0x01	; 1
     c74:	80 93 3b 03 	sts	0x033B, r24
					case O9_ON:
						if(print == 0){
     c78:	61 14       	cp	r6, r1
     c7a:	71 04       	cpc	r7, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <main+0x7ac>
							OrangutanLCD::print("PAPER RAISE  ON ");
     c7e:	8e e4       	ldi	r24, 0x4E	; 78
     c80:	92 e0       	ldi	r25, 0x02	; 2
     c82:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     c86:	21 e0       	ldi	r18, 0x01	; 1
     c88:	62 2e       	mov	r6, r18
     c8a:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     c8c:	80 91 3b 03 	lds	r24, 0x033B
     c90:	8d 7f       	andi	r24, 0xFD	; 253
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
     c92:	84 60       	ori	r24, 0x04	; 4
     c94:	80 93 3b 03 	sts	0x033B, r24
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     c98:	80 91 3b 03 	lds	r24, 0x033B
     c9c:	82 60       	ori	r24, 0x02	; 2
     c9e:	80 93 3b 03 	sts	0x033B, r24
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
					case O10_ON:
						if(print == 0){
     ca2:	61 14       	cp	r6, r1
     ca4:	71 04       	cpc	r7, r1
     ca6:	39 f4       	brne	.+14     	; 0xcb6 <main+0x7d6>
							OrangutanLCD::print("PAPER LOWER  ON ");
     ca8:	8f e5       	ldi	r24, 0x5F	; 95
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	69 2e       	mov	r6, r25
     cb4:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
     cb6:	80 91 3b 03 	lds	r24, 0x033B
     cba:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     cbc:	82 60       	ori	r24, 0x02	; 2
     cbe:	80 93 3b 03 	sts	0x033B, r24
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
     cc2:	80 91 3b 03 	lds	r24, 0x033B
     cc6:	84 60       	ori	r24, 0x04	; 4
     cc8:	80 93 3b 03 	sts	0x033B, r24
					case O11_ON:
						if(print == 0){
     ccc:	61 14       	cp	r6, r1
     cce:	71 04       	cpc	r7, r1
     cd0:	39 f4       	brne	.+14     	; 0xce0 <main+0x800>
							OrangutanLCD::print("AIR KNIFE    ON ");
     cd2:	80 e7       	ldi	r24, 0x70	; 112
     cd4:	92 e0       	ldi	r25, 0x02	; 2
     cd6:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	68 2e       	mov	r6, r24
     cde:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
     ce0:	80 91 3b 03 	lds	r24, 0x033B
     ce4:	87 7f       	andi	r24, 0xF7	; 247
     ce6:	80 93 3b 03 	sts	0x033B, r24
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
     cea:	80 91 3b 03 	lds	r24, 0x033B
     cee:	88 60       	ori	r24, 0x08	; 8
     cf0:	80 93 3b 03 	sts	0x033B, r24
					case M1_F:
						if(print == 0){
     cf4:	61 14       	cp	r6, r1
     cf6:	71 04       	cpc	r7, r1
     cf8:	39 f4       	brne	.+14     	; 0xd08 <main+0x828>
							OrangutanLCD::print("LOADING    FRONT");
     cfa:	81 e8       	ldi	r24, 0x81	; 129
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     d02:	01 e0       	ldi	r16, 0x01	; 1
     d04:	60 2e       	mov	r6, r16
     d06:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.m1Dir = 0;
     d08:	80 91 38 03 	lds	r24, 0x0338
     d0c:	8d 7f       	andi	r24, 0xFD	; 253
     d0e:	80 93 38 03 	sts	0x0338, r24
						m1 =  1;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.m1Dir = 1;
     d12:	80 91 38 03 	lds	r24, 0x0338
     d16:	82 60       	ori	r24, 0x02	; 2
     d18:	80 93 38 03 	sts	0x0338, r24
						m1 =  1;
					case M2_F:
						if(print == 0){
     d1c:	61 14       	cp	r6, r1
     d1e:	71 04       	cpc	r7, r1
     d20:	39 f4       	brne	.+14     	; 0xd30 <main+0x850>
							OrangutanLCD::print("DRIVE      FRONT");
     d22:	82 e9       	ldi	r24, 0x92	; 146
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     d2a:	11 e0       	ldi	r17, 0x01	; 1
     d2c:	61 2e       	mov	r6, r17
     d2e:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.m2Dir = 0;
     d30:	80 91 38 03 	lds	r24, 0x0338
     d34:	8f 7e       	andi	r24, 0xEF	; 239
     d36:	80 93 38 03 	sts	0x0338, r24
						m2 =  1;
						m1 = 0;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.m2Dir = 1;
     d3a:	80 91 38 03 	lds	r24, 0x0338
     d3e:	80 61       	ori	r24, 0x10	; 16
     d40:	80 93 38 03 	sts	0x0338, r24
						m2 =  1;
					case M3_F:
						if(print == 0){
     d44:	61 14       	cp	r6, r1
     d46:	71 04       	cpc	r7, r1
     d48:	39 f4       	brne	.+14     	; 0xd58 <main+0x878>
							OrangutanLCD::print("BRUSH1     FRONT");
     d4a:	83 ea       	ldi	r24, 0xA3	; 163
     d4c:	92 e0       	ldi	r25, 0x02	; 2
     d4e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     d52:	b1 e0       	ldi	r27, 0x01	; 1
     d54:	6b 2e       	mov	r6, r27
     d56:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.m3Dir = 0;
     d58:	80 91 38 03 	lds	r24, 0x0338
     d5c:	8f 77       	andi	r24, 0x7F	; 127
     d5e:	80 93 38 03 	sts	0x0338, r24
						m3 =  1;
						m2 = 0;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.m3Dir = 1;
     d62:	80 91 38 03 	lds	r24, 0x0338
     d66:	80 68       	ori	r24, 0x80	; 128
     d68:	80 93 38 03 	sts	0x0338, r24
						m3 =  1;
					case M4_F:
						if(print == 0){
     d6c:	61 14       	cp	r6, r1
     d6e:	71 04       	cpc	r7, r1
     d70:	39 f4       	brne	.+14     	; 0xd80 <main+0x8a0>
							OrangutanLCD::print("BRUSH2     FRONT");
     d72:	84 eb       	ldi	r24, 0xB4	; 180
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     d7a:	a1 e0       	ldi	r26, 0x01	; 1
     d7c:	6a 2e       	mov	r6, r26
     d7e:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.m4Dir = 0;
     d80:	80 91 39 03 	lds	r24, 0x0339
     d84:	8b 7f       	andi	r24, 0xFB	; 251
     d86:	80 93 39 03 	sts	0x0339, r24
						m4 =  1;
						m3 = 0;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.m4Dir = 1;
     d8a:	80 91 39 03 	lds	r24, 0x0339
     d8e:	84 60       	ori	r24, 0x04	; 4
     d90:	80 93 39 03 	sts	0x0339, r24
						m4 =  1;
					case M5_F:
						if(print == 0){
     d94:	61 14       	cp	r6, r1
     d96:	71 04       	cpc	r7, r1
     d98:	39 f4       	brne	.+14     	; 0xda8 <main+0x8c8>
							OrangutanLCD::print("PAPER      FRONT");
     d9a:	85 ec       	ldi	r24, 0xC5	; 197
     d9c:	92 e0       	ldi	r25, 0x02	; 2
     d9e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     da2:	f1 e0       	ldi	r31, 0x01	; 1
     da4:	6f 2e       	mov	r6, r31
     da6:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.m5Dir = 0;
     da8:	80 91 39 03 	lds	r24, 0x0339
     dac:	8f 7d       	andi	r24, 0xDF	; 223
     dae:	80 93 39 03 	sts	0x0339, r24
						m5 =  1;
						m4 = 0;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.m5Dir = 1;
     db2:	80 91 39 03 	lds	r24, 0x0339
     db6:	80 62       	ori	r24, 0x20	; 32
     db8:	80 93 39 03 	sts	0x0339, r24
     dbc:	21 e0       	ldi	r18, 0x01	; 1
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	3e 8f       	std	Y+30, r19	; 0x1e
     dc2:	2d 8f       	std	Y+29, r18	; 0x1d
						m5 =  1;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, m1, m2, m3, m4, m5, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
     dc4:	8d b7       	in	r24, 0x3d	; 61
     dc6:	9e b7       	in	r25, 0x3e	; 62
     dc8:	42 97       	sbiw	r24, 0x12	; 18
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	9e bf       	out	0x3e, r25	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	8d bf       	out	0x3d, r24	; 61
     dd4:	ed b7       	in	r30, 0x3d	; 61
     dd6:	fe b7       	in	r31, 0x3e	; 62
     dd8:	31 96       	adiw	r30, 0x01	; 1
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	ad b7       	in	r26, 0x3d	; 61
     de0:	be b7       	in	r27, 0x3e	; 62
     de2:	12 96       	adiw	r26, 0x02	; 2
     de4:	9c 93       	st	X, r25
     de6:	8e 93       	st	-X, r24
     de8:	11 97       	sbiw	r26, 0x01	; 1
     dea:	93 83       	std	Z+3, r25	; 0x03
     dec:	82 83       	std	Z+2, r24	; 0x02
     dee:	95 83       	std	Z+5, r25	; 0x05
     df0:	84 83       	std	Z+4, r24	; 0x04
     df2:	97 83       	std	Z+7, r25	; 0x07
     df4:	86 83       	std	Z+6, r24	; 0x06
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	91 87       	std	Z+9, r25	; 0x09
     dfc:	80 87       	std	Z+8, r24	; 0x08
     dfe:	93 87       	std	Z+11, r25	; 0x0b
     e00:	82 87       	std	Z+10, r24	; 0x0a
     e02:	95 87       	std	Z+13, r25	; 0x0d
     e04:	84 87       	std	Z+12, r24	; 0x0c
     e06:	97 87       	std	Z+15, r25	; 0x0f
     e08:	86 87       	std	Z+14, r24	; 0x0e
     e0a:	91 8b       	std	Z+17, r25	; 0x11
     e0c:	80 8b       	std	Z+16, r24	; 0x10
     e0e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e10:	9c 85       	ldd	r25, Y+12	; 0x0c
     e12:	6b 8d       	ldd	r22, Y+27	; 0x1b
     e14:	7c 8d       	ldd	r23, Y+28	; 0x1c
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	00 e0       	ldi	r16, 0x00	; 0
     e20:	10 e0       	ldi	r17, 0x00	; 0
     e22:	ee 24       	eor	r14, r14
     e24:	ff 24       	eor	r15, r15
     e26:	cc 24       	eor	r12, r12
     e28:	dd 24       	eor	r13, r13
     e2a:	ad 8c       	ldd	r10, Y+29	; 0x1d
     e2c:	be 8c       	ldd	r11, Y+30	; 0x1e
     e2e:	e2 e0       	ldi	r30, 0x02	; 2
     e30:	8e 2e       	mov	r8, r30
     e32:	91 2c       	mov	r9, r1
     e34:	0e 94 bb 01 	call	0x376	; 0x376 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
     e38:	2d b7       	in	r18, 0x3d	; 61
     e3a:	3e b7       	in	r19, 0x3e	; 62
     e3c:	2e 5e       	subi	r18, 0xEE	; 238
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	3e bf       	out	0x3e, r19	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	2d bf       	out	0x3d, r18	; 61
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>
			}
			button = 1;
			counter = 0;
			OrangutanLCD::clear();
			
			while(state != -1){
     e52:	3f ef       	ldi	r19, 0xFF	; 255
     e54:	43 16       	cp	r4, r19
     e56:	3f ef       	ldi	r19, 0xFF	; 255
     e58:	53 06       	cpc	r5, r19
     e5a:	11 f4       	brne	.+4      	; 0xe60 <main+0x980>
     e5c:	0c 94 45 12 	jmp	0x248a	; 0x248a <main+0x1faa>
				i2c_start(I2C2+I2C_WRITE);
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				counter ++;
     e60:	8b 85       	ldd	r24, Y+11	; 0x0b
     e62:	9c 85       	ldd	r25, Y+12	; 0x0c
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	9c 87       	std	Y+12, r25	; 0x0c
     e68:	8b 87       	std	Y+11, r24	; 0x0b
     e6a:	09 cc       	rjmp	.-2030   	; 0x67e <main+0x19e>
				delay_ms(1);
			}
		}
		else{										//If switch is set to Run Mode
		
		OrangutanLCD::print("NORMAL");
     e6c:	86 ed       	ldi	r24, 0xD6	; 214
     e6e:	92 e0       	ldi	r25, 0x02	; 2
     e70:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     e74:	88 ee       	ldi	r24, 0xE8	; 232
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
     e7c:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("SELECT CYCLE");
     e80:	8d ed       	ldi	r24, 0xDD	; 221
     e82:	92 e0       	ldi	r25, 0x02	; 2
     e84:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     e88:	ee 24       	eor	r14, r14
     e8a:	ff 24       	eor	r15, r15
				else if(counter - counterRefRel > 15){
					button = 0;
					stateButton = NONE;
				}
			}*/
			button = button_debounce(counter, &counterRefPush, &counterRefRel, &stateButton);
     e8c:	c7 01       	movw	r24, r14
     e8e:	be 01       	movw	r22, r28
     e90:	6f 5f       	subi	r22, 0xFF	; 255
     e92:	7f 4f       	sbci	r23, 0xFF	; 255
     e94:	ae 01       	movw	r20, r28
     e96:	4d 5f       	subi	r20, 0xFD	; 253
     e98:	5f 4f       	sbci	r21, 0xFF	; 255
     e9a:	9e 01       	movw	r18, r28
     e9c:	2b 5f       	subi	r18, 0xFB	; 251
     e9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ea0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPiS_S_>
     ea4:	8c 01       	movw	r16, r24
			counter++;
     ea6:	08 94       	sec
     ea8:	e1 1c       	adc	r14, r1
     eaa:	f1 1c       	adc	r15, r1
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
		OrangutanLCD::print("SELECT CYCLE");
		//Repeats until user debounces button - waiting for user to select a mode
		while(button != 0){
     eb4:	01 2b       	or	r16, r17
     eb6:	51 f7       	brne	.-44     	; 0xe8c <main+0x9ac>
			counter++;
			delay_ms(1);
		}
		button = 1;
		counter = 0;
		OrangutanLCD::clear();
     eb8:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("CYCLE:");
     ebc:	8a ee       	ldi	r24, 0xEA	; 234
     ebe:	92 e0       	ldi	r25, 0x02	; 2
     ec0:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>

		//u_motorByte0.bits_in_motorByte0.m1Drop = 1;
		u_motorByte0.bits_in_motorByte0.m2Drop = 1;
     ec4:	80 91 38 03 	lds	r24, 0x0338
     ec8:	80 62       	ori	r24, 0x20	; 32
     eca:	80 93 38 03 	sts	0x0338, r24
		/*u_motorByte1.bits_in_motorByte1.m3Drop = 1;
		u_motorByte1.bits_in_motorByte1.m4Drop = 1;
		u_motorByte1.bits_in_motorByte1.m5Drop = 1;*/

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     ed4:	88 23       	and	r24, r24
     ed6:	11 f0       	breq	.+4      	; 0xedc <main+0x9fc>
     ed8:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <main+0x1fea>
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     ee2:	88 23       	and	r24, r24
     ee4:	11 f0       	breq	.+4      	; 0xeea <main+0xa0a>
     ee6:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <main+0x1fea>
			OrangutanLCD::gotoXY(7,0);
     eea:	87 e0       	ldi	r24, 0x07	; 7
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("FIRST B");
     ef2:	81 ef       	ldi	r24, 0xF1	; 241
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
     efa:	a1 e0       	ldi	r26, 0x01	; 1
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	b8 8f       	std	Y+24, r27	; 0x18
     f00:	af 8b       	std	Y+23, r26	; 0x17
     f02:	be 8b       	std	Y+22, r27	; 0x16
     f04:	ad 8b       	std	Y+21, r26	; 0x15
     f06:	66 24       	eor	r6, r6
     f08:	77 24       	eor	r7, r7
     f0a:	44 24       	eor	r4, r4
     f0c:	55 24       	eor	r5, r5
     f0e:	22 24       	eor	r2, r2
     f10:	33 24       	eor	r3, r3
     f12:	1a 8e       	std	Y+26, r1	; 0x1a
     f14:	19 8e       	std	Y+25, r1	; 0x19
			while(state != -1)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     f16:	84 e4       	ldi	r24, 0x44	; 68
     f18:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     f22:	85 e4       	ldi	r24, 0x45	; 69
     f24:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     f28:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_Z11i2c_readAckv>
     f2c:	80 93 3c 03 	sts	0x033C, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     f30:	0e 94 fd 12 	call	0x25fa	; 0x25fa <_Z11i2c_readNakv>
     f34:	80 93 3d 03 	sts	0x033D, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     f38:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_Z8i2c_stopv>
				
				if(state != INIT){
     f3c:	61 14       	cp	r6, r1
     f3e:	71 04       	cpc	r7, r1
     f40:	79 f0       	breq	.+30     	; 0xf60 <main+0xa80>
					OrangutanLCD::gotoXY(0,1);
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
     f4a:	89 ef       	ldi	r24, 0xF9	; 249
     f4c:	92 e0       	ldi	r25, 0x02	; 2
     f4e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
	};
	static inline void print(int value)
	{
		print((long)value);
     f52:	b3 01       	movw	r22, r6
     f54:	88 27       	eor	r24, r24
     f56:	77 fd       	sbrc	r23, 7
     f58:	80 95       	com	r24
     f5a:	98 2f       	mov	r25, r24
     f5c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_ZN12OrangutanLCD5printEl>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}*/
				button = button_debounce(counter, &counterRefPush, &counterRefRel, &stateButton);
     f60:	c2 01       	movw	r24, r4
     f62:	be 01       	movw	r22, r28
     f64:	6f 5f       	subi	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	ae 01       	movw	r20, r28
     f6a:	4d 5f       	subi	r20, 0xFD	; 253
     f6c:	5f 4f       	sbci	r21, 0xFF	; 255
     f6e:	9e 01       	movw	r18, r28
     f70:	2b 5f       	subi	r18, 0xFB	; 251
     f72:	3f 4f       	sbci	r19, 0xFF	; 255
     f74:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPiS_S_>

				//state conversions
	
				if(state == INIT && button == 0){
     f78:	61 14       	cp	r6, r1
     f7a:	71 04       	cpc	r7, r1
     f7c:	29 f4       	brne	.+10     	; 0xf88 <main+0xaa8>
     f7e:	89 2b       	or	r24, r25
     f80:	09 f0       	breq	.+2      	; 0xf84 <main+0xaa4>
     f82:	43 c0       	rjmp	.+134    	; 0x100a <main+0xb2a>
     f84:	12 01       	movw	r2, r4
     f86:	04 c0       	rjmp	.+8      	; 0xf90 <main+0xab0>
					button = 1;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totallength1*m1LoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
     f88:	b1 e0       	ldi	r27, 0x01	; 1
     f8a:	6b 16       	cp	r6, r27
     f8c:	71 04       	cpc	r7, r1
     f8e:	49 f4       	brne	.+18     	; 0xfa2 <main+0xac2>
     f90:	c2 01       	movw	r24, r4
     f92:	82 19       	sub	r24, r2
     f94:	93 09       	sbc	r25, r3
     f96:	81 5a       	subi	r24, 0xA1	; 161
     f98:	9f 40       	sbci	r25, 0x0F	; 15
     f9a:	0c f4       	brge	.+2      	; 0xf9e <main+0xabe>
     f9c:	43 c0       	rjmp	.+134    	; 0x1024 <main+0xb44>
     f9e:	12 01       	movw	r2, r4
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <main+0xaca>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
     fa2:	32 e0       	ldi	r19, 0x02	; 2
     fa4:	63 16       	cp	r6, r19
     fa6:	71 04       	cpc	r7, r1
     fa8:	49 f4       	brne	.+18     	; 0xfbc <main+0xadc>
     faa:	c2 01       	movw	r24, r4
     fac:	82 19       	sub	r24, r2
     fae:	93 09       	sbc	r25, r3
     fb0:	85 36       	cpi	r24, 0x65	; 101
     fb2:	91 05       	cpc	r25, r1
     fb4:	0c f4       	brge	.+2      	; 0xfb8 <main+0xad8>
     fb6:	46 c0       	rjmp	.+140    	; 0x1044 <main+0xb64>
     fb8:	12 01       	movw	r2, r4
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <main+0xae4>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totallength2*m2HomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
     fbc:	83 e0       	ldi	r24, 0x03	; 3
     fbe:	68 16       	cp	r6, r24
     fc0:	71 04       	cpc	r7, r1
     fc2:	49 f4       	brne	.+18     	; 0xfd6 <main+0xaf6>
     fc4:	c2 01       	movw	r24, r4
     fc6:	82 19       	sub	r24, r2
     fc8:	93 09       	sbc	r25, r3
     fca:	81 5a       	subi	r24, 0xA1	; 161
     fcc:	9f 40       	sbci	r25, 0x0F	; 15
     fce:	0c f4       	brge	.+2      	; 0xfd2 <main+0xaf2>
     fd0:	49 c0       	rjmp	.+146    	; 0x1064 <main+0xb84>
     fd2:	12 01       	movw	r2, r4
     fd4:	04 c0       	rjmp	.+8      	; 0xfde <main+0xafe>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
     fd6:	b4 e0       	ldi	r27, 0x04	; 4
     fd8:	6b 16       	cp	r6, r27
     fda:	71 04       	cpc	r7, r1
     fdc:	49 f4       	brne	.+18     	; 0xff0 <main+0xb10>
     fde:	c2 01       	movw	r24, r4
     fe0:	82 19       	sub	r24, r2
     fe2:	93 09       	sbc	r25, r3
     fe4:	89 5e       	subi	r24, 0xE9	; 233
     fe6:	93 40       	sbci	r25, 0x03	; 3
     fe8:	0c f4       	brge	.+2      	; 0xfec <main+0xb0c>
     fea:	4c c0       	rjmp	.+152    	; 0x1084 <main+0xba4>
     fec:	12 01       	movw	r2, r4
     fee:	04 c0       	rjmp	.+8      	; 0xff8 <main+0xb18>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
     ff0:	35 e0       	ldi	r19, 0x05	; 5
     ff2:	63 16       	cp	r6, r19
     ff4:	71 04       	cpc	r7, r1
     ff6:	49 f4       	brne	.+18     	; 0x100a <main+0xb2a>
     ff8:	c2 01       	movw	r24, r4
     ffa:	82 19       	sub	r24, r2
     ffc:	93 09       	sbc	r25, r3
     ffe:	85 36       	cpi	r24, 0x65	; 101
    1000:	91 05       	cpc	r25, r1
    1002:	0c f4       	brge	.+2      	; 0x1006 <main+0xb26>
    1004:	4d c0       	rjmp	.+154    	; 0x10a0 <main+0xbc0>
    1006:	12 01       	movw	r2, r4
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <main+0xb32>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totallength2*m2Brush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    100a:	86 e0       	ldi	r24, 0x06	; 6
    100c:	68 16       	cp	r6, r24
    100e:	71 04       	cpc	r7, r1
    1010:	61 f4       	brne	.+24     	; 0x102a <main+0xb4a>
    1012:	c2 01       	movw	r24, r4
    1014:	82 19       	sub	r24, r2
    1016:	93 09       	sbc	r25, r3
    1018:	81 5a       	subi	r24, 0xA1	; 161
    101a:	9f 40       	sbci	r25, 0x0F	; 15
    101c:	0c f4       	brge	.+2      	; 0x1020 <main+0xb40>
    101e:	50 c0       	rjmp	.+160    	; 0x10c0 <main+0xbe0>
    1020:	12 01       	movw	r2, r4
    1022:	07 c0       	rjmp	.+14     	; 0x1032 <main+0xb52>
    1024:	71 e0       	ldi	r23, 0x01	; 1
    1026:	67 2e       	mov	r6, r23
    1028:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    102a:	b7 e0       	ldi	r27, 0x07	; 7
    102c:	6b 16       	cp	r6, r27
    102e:	71 04       	cpc	r7, r1
    1030:	61 f4       	brne	.+24     	; 0x104a <main+0xb6a>
    1032:	c2 01       	movw	r24, r4
    1034:	82 19       	sub	r24, r2
    1036:	93 09       	sbc	r25, r3
    1038:	85 36       	cpi	r24, 0x65	; 101
    103a:	91 05       	cpc	r25, r1
    103c:	0c f4       	brge	.+2      	; 0x1040 <main+0xb60>
    103e:	50 c0       	rjmp	.+160    	; 0x10e0 <main+0xc00>
    1040:	12 01       	movw	r2, r4
    1042:	07 c0       	rjmp	.+14     	; 0x1052 <main+0xb72>
    1044:	62 e0       	ldi	r22, 0x02	; 2
    1046:	66 2e       	mov	r6, r22
    1048:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    104a:	28 e0       	ldi	r18, 0x08	; 8
    104c:	62 16       	cp	r6, r18
    104e:	71 04       	cpc	r7, r1
    1050:	61 f4       	brne	.+24     	; 0x106a <main+0xb8a>
    1052:	c2 01       	movw	r24, r4
    1054:	82 19       	sub	r24, r2
    1056:	93 09       	sbc	r25, r3
    1058:	85 36       	cpi	r24, 0x65	; 101
    105a:	91 05       	cpc	r25, r1
    105c:	0c f4       	brge	.+2      	; 0x1060 <main+0xb80>
    105e:	4e c0       	rjmp	.+156    	; 0x10fc <main+0xc1c>
    1060:	12 01       	movw	r2, r4
    1062:	07 c0       	rjmp	.+14     	; 0x1072 <main+0xb92>
    1064:	53 e0       	ldi	r21, 0x03	; 3
    1066:	65 2e       	mov	r6, r21
    1068:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totallength2*m2HalfPlate){
    106a:	39 e0       	ldi	r19, 0x09	; 9
    106c:	63 16       	cp	r6, r19
    106e:	71 04       	cpc	r7, r1
    1070:	61 f4       	brne	.+24     	; 0x108a <main+0xbaa>
    1072:	c2 01       	movw	r24, r4
    1074:	82 19       	sub	r24, r2
    1076:	93 09       	sbc	r25, r3
    1078:	81 5a       	subi	r24, 0xA1	; 161
    107a:	9f 40       	sbci	r25, 0x0F	; 15
    107c:	0c f4       	brge	.+2      	; 0x1080 <main+0xba0>
    107e:	4e c0       	rjmp	.+156    	; 0x111c <main+0xc3c>
    1080:	12 01       	movw	r2, r4
    1082:	07 c0       	rjmp	.+14     	; 0x1092 <main+0xbb2>
    1084:	44 e0       	ldi	r20, 0x04	; 4
    1086:	64 2e       	mov	r6, r20
    1088:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    108a:	ba e0       	ldi	r27, 0x0A	; 10
    108c:	6b 16       	cp	r6, r27
    108e:	71 04       	cpc	r7, r1
    1090:	51 f4       	brne	.+20     	; 0x10a6 <main+0xbc6>
    1092:	c2 01       	movw	r24, r4
    1094:	82 19       	sub	r24, r2
    1096:	93 09       	sbc	r25, r3
    1098:	85 36       	cpi	r24, 0x65	; 101
    109a:	91 05       	cpc	r25, r1
    109c:	44 f4       	brge	.+16     	; 0x10ae <main+0xbce>
    109e:	4e c0       	rjmp	.+156    	; 0x113c <main+0xc5c>
    10a0:	35 e0       	ldi	r19, 0x05	; 5
    10a2:	63 2e       	mov	r6, r19
    10a4:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totallength2*m2HalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    10a6:	2b e0       	ldi	r18, 0x0B	; 11
    10a8:	62 16       	cp	r6, r18
    10aa:	71 04       	cpc	r7, r1
    10ac:	61 f4       	brne	.+24     	; 0x10c6 <main+0xbe6>
    10ae:	c2 01       	movw	r24, r4
    10b0:	82 19       	sub	r24, r2
    10b2:	93 09       	sbc	r25, r3
    10b4:	81 5a       	subi	r24, 0xA1	; 161
    10b6:	9f 40       	sbci	r25, 0x0F	; 15
    10b8:	0c f4       	brge	.+2      	; 0x10bc <main+0xbdc>
    10ba:	50 c0       	rjmp	.+160    	; 0x115c <main+0xc7c>
    10bc:	12 01       	movw	r2, r4
    10be:	07 c0       	rjmp	.+14     	; 0x10ce <main+0xbee>
    10c0:	26 e0       	ldi	r18, 0x06	; 6
    10c2:	62 2e       	mov	r6, r18
    10c4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    10c6:	8c e0       	ldi	r24, 0x0C	; 12
    10c8:	68 16       	cp	r6, r24
    10ca:	71 04       	cpc	r7, r1
    10cc:	61 f4       	brne	.+24     	; 0x10e6 <main+0xc06>
    10ce:	c2 01       	movw	r24, r4
    10d0:	82 19       	sub	r24, r2
    10d2:	93 09       	sbc	r25, r3
    10d4:	85 36       	cpi	r24, 0x65	; 101
    10d6:	91 05       	cpc	r25, r1
    10d8:	0c f4       	brge	.+2      	; 0x10dc <main+0xbfc>
    10da:	4e c0       	rjmp	.+156    	; 0x1178 <main+0xc98>
    10dc:	12 01       	movw	r2, r4
    10de:	07 c0       	rjmp	.+14     	; 0x10ee <main+0xc0e>
    10e0:	97 e0       	ldi	r25, 0x07	; 7
    10e2:	69 2e       	mov	r6, r25
    10e4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totallength2*m2HalfPlate){
    10e6:	9d e0       	ldi	r25, 0x0D	; 13
    10e8:	69 16       	cp	r6, r25
    10ea:	71 04       	cpc	r7, r1
    10ec:	51 f4       	brne	.+20     	; 0x1102 <main+0xc22>
    10ee:	c2 01       	movw	r24, r4
    10f0:	82 19       	sub	r24, r2
    10f2:	93 09       	sbc	r25, r3
    10f4:	81 5a       	subi	r24, 0xA1	; 161
    10f6:	9f 40       	sbci	r25, 0x0F	; 15
    10f8:	44 f4       	brge	.+16     	; 0x110a <main+0xc2a>
    10fa:	4f c0       	rjmp	.+158    	; 0x119a <main+0xcba>
    10fc:	88 e0       	ldi	r24, 0x08	; 8
    10fe:	68 2e       	mov	r6, r24
    1100:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
					}
				if(state == B1STOP2 && counter - counterRef > pWait){
    1102:	be e0       	ldi	r27, 0x0E	; 14
    1104:	6b 16       	cp	r6, r27
    1106:	71 04       	cpc	r7, r1
    1108:	61 f4       	brne	.+24     	; 0x1122 <main+0xc42>
    110a:	c2 01       	movw	r24, r4
    110c:	82 19       	sub	r24, r2
    110e:	93 09       	sbc	r25, r3
    1110:	85 36       	cpi	r24, 0x65	; 101
    1112:	91 05       	cpc	r25, r1
    1114:	0c f4       	brge	.+2      	; 0x1118 <main+0xc38>
    1116:	53 c0       	rjmp	.+166    	; 0x11be <main+0xcde>
    1118:	12 01       	movw	r2, r4
    111a:	07 c0       	rjmp	.+14     	; 0x112a <main+0xc4a>
    111c:	09 e0       	ldi	r16, 0x09	; 9
    111e:	60 2e       	mov	r6, r16
    1120:	71 2c       	mov	r7, r1
					state = 23;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totallength2*m2Dry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1122:	27 e1       	ldi	r18, 0x17	; 23
    1124:	62 16       	cp	r6, r18
    1126:	71 04       	cpc	r7, r1
    1128:	61 f4       	brne	.+24     	; 0x1142 <main+0xc62>
    112a:	c2 01       	movw	r24, r4
    112c:	82 19       	sub	r24, r2
    112e:	93 09       	sbc	r25, r3
    1130:	81 5a       	subi	r24, 0xA1	; 161
    1132:	9f 40       	sbci	r25, 0x0F	; 15
    1134:	0c f4       	brge	.+2      	; 0x1138 <main+0xc58>
    1136:	53 c0       	rjmp	.+166    	; 0x11de <main+0xcfe>
    1138:	12 01       	movw	r2, r4
    113a:	07 c0       	rjmp	.+14     	; 0x114a <main+0xc6a>
    113c:	1a e0       	ldi	r17, 0x0A	; 10
    113e:	61 2e       	mov	r6, r17
    1140:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    1142:	88 e1       	ldi	r24, 0x18	; 24
    1144:	68 16       	cp	r6, r24
    1146:	71 04       	cpc	r7, r1
    1148:	61 f4       	brne	.+24     	; 0x1162 <main+0xc82>
    114a:	c2 01       	movw	r24, r4
    114c:	82 19       	sub	r24, r2
    114e:	93 09       	sbc	r25, r3
    1150:	85 36       	cpi	r24, 0x65	; 101
    1152:	91 05       	cpc	r25, r1
    1154:	0c f4       	brge	.+2      	; 0x1158 <main+0xc78>
    1156:	51 c0       	rjmp	.+162    	; 0x11fa <main+0xd1a>
    1158:	12 01       	movw	r2, r4
    115a:	07 c0       	rjmp	.+14     	; 0x116a <main+0xc8a>
    115c:	bb e0       	ldi	r27, 0x0B	; 11
    115e:	6b 2e       	mov	r6, r27
    1160:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totallength2*m2WholePlate){
    1162:	99 e1       	ldi	r25, 0x19	; 25
    1164:	69 16       	cp	r6, r25
    1166:	71 04       	cpc	r7, r1
    1168:	51 f4       	brne	.+20     	; 0x117e <main+0xc9e>
    116a:	c2 01       	movw	r24, r4
    116c:	82 19       	sub	r24, r2
    116e:	93 09       	sbc	r25, r3
    1170:	81 5a       	subi	r24, 0xA1	; 161
    1172:	9f 40       	sbci	r25, 0x0F	; 15
    1174:	44 f4       	brge	.+16     	; 0x1186 <main+0xca6>
    1176:	51 c0       	rjmp	.+162    	; 0x121a <main+0xd3a>
    1178:	ac e0       	ldi	r26, 0x0C	; 12
    117a:	6a 2e       	mov	r6, r26
    117c:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totallength2*m2Dry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    117e:	ba e1       	ldi	r27, 0x1A	; 26
    1180:	6b 16       	cp	r6, r27
    1182:	71 04       	cpc	r7, r1
    1184:	69 f4       	brne	.+26     	; 0x11a0 <main+0xcc0>
    1186:	c2 01       	movw	r24, r4
    1188:	82 19       	sub	r24, r2
    118a:	93 09       	sbc	r25, r3
    118c:	81 5a       	subi	r24, 0xA1	; 161
    118e:	9f 40       	sbci	r25, 0x0F	; 15
    1190:	0c f4       	brge	.+2      	; 0x1194 <main+0xcb4>
    1192:	56 c0       	rjmp	.+172    	; 0x1240 <main+0xd60>
    1194:	5a 8e       	std	Y+26, r5	; 0x1a
    1196:	49 8e       	std	Y+25, r4	; 0x19
    1198:	07 c0       	rjmp	.+14     	; 0x11a8 <main+0xcc8>
    119a:	fd e0       	ldi	r31, 0x0D	; 13
    119c:	6f 2e       	mov	r6, r31
    119e:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    11a0:	3b e1       	ldi	r19, 0x1B	; 27
    11a2:	63 16       	cp	r6, r19
    11a4:	71 04       	cpc	r7, r1
    11a6:	71 f4       	brne	.+28     	; 0x11c4 <main+0xce4>
    11a8:	c2 01       	movw	r24, r4
    11aa:	a9 8d       	ldd	r26, Y+25	; 0x19
    11ac:	ba 8d       	ldd	r27, Y+26	; 0x1a
    11ae:	8a 1b       	sub	r24, r26
    11b0:	9b 0b       	sbc	r25, r27
    11b2:	85 36       	cpi	r24, 0x65	; 101
    11b4:	91 05       	cpc	r25, r1
    11b6:	0c f4       	brge	.+2      	; 0x11ba <main+0xcda>
    11b8:	56 c0       	rjmp	.+172    	; 0x1266 <main+0xd86>
    11ba:	12 01       	movw	r2, r4
    11bc:	07 c0       	rjmp	.+14     	; 0x11cc <main+0xcec>
    11be:	ee e0       	ldi	r30, 0x0E	; 14
    11c0:	6e 2e       	mov	r6, r30
    11c2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    11c4:	bc e1       	ldi	r27, 0x1C	; 28
    11c6:	6b 16       	cp	r6, r27
    11c8:	71 04       	cpc	r7, r1
    11ca:	61 f4       	brne	.+24     	; 0x11e4 <main+0xd04>
    11cc:	c2 01       	movw	r24, r4
    11ce:	82 19       	sub	r24, r2
    11d0:	93 09       	sbc	r25, r3
    11d2:	85 36       	cpi	r24, 0x65	; 101
    11d4:	91 05       	cpc	r25, r1
    11d6:	0c f4       	brge	.+2      	; 0x11da <main+0xcfa>
    11d8:	59 c0       	rjmp	.+178    	; 0x128c <main+0xdac>
    11da:	12 01       	movw	r2, r4
    11dc:	07 c0       	rjmp	.+14     	; 0x11ec <main+0xd0c>
    11de:	77 e1       	ldi	r23, 0x17	; 23
    11e0:	67 2e       	mov	r6, r23
    11e2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totallength2*m2WholePlate){
    11e4:	2d e1       	ldi	r18, 0x1D	; 29
    11e6:	62 16       	cp	r6, r18
    11e8:	71 04       	cpc	r7, r1
    11ea:	51 f4       	brne	.+20     	; 0x1200 <main+0xd20>
    11ec:	c2 01       	movw	r24, r4
    11ee:	82 19       	sub	r24, r2
    11f0:	93 09       	sbc	r25, r3
    11f2:	81 5a       	subi	r24, 0xA1	; 161
    11f4:	9f 40       	sbci	r25, 0x0F	; 15
    11f6:	44 f4       	brge	.+16     	; 0x1208 <main+0xd28>
    11f8:	5c c0       	rjmp	.+184    	; 0x12b2 <main+0xdd2>
    11fa:	68 e1       	ldi	r22, 0x18	; 24
    11fc:	66 2e       	mov	r6, r22
    11fe:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totallength2*m2LoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1200:	8e e1       	ldi	r24, 0x1E	; 30
    1202:	68 16       	cp	r6, r24
    1204:	71 04       	cpc	r7, r1
    1206:	61 f4       	brne	.+24     	; 0x1220 <main+0xd40>
    1208:	c2 01       	movw	r24, r4
    120a:	82 19       	sub	r24, r2
    120c:	93 09       	sbc	r25, r3
    120e:	81 5a       	subi	r24, 0xA1	; 161
    1210:	9f 40       	sbci	r25, 0x0F	; 15
    1212:	0c f4       	brge	.+2      	; 0x1216 <main+0xd36>
    1214:	62 c0       	rjmp	.+196    	; 0x12da <main+0xdfa>
    1216:	12 01       	movw	r2, r4
    1218:	07 c0       	rjmp	.+14     	; 0x1228 <main+0xd48>
    121a:	59 e1       	ldi	r21, 0x19	; 25
    121c:	65 2e       	mov	r6, r21
    121e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1220:	bf e1       	ldi	r27, 0x1F	; 31
    1222:	6b 16       	cp	r6, r27
    1224:	71 04       	cpc	r7, r1
    1226:	79 f4       	brne	.+30     	; 0x1246 <main+0xd66>
    1228:	c2 01       	movw	r24, r4
    122a:	82 19       	sub	r24, r2
    122c:	93 09       	sbc	r25, r3
    122e:	89 5e       	subi	r24, 0xE9	; 233
    1230:	93 40       	sbci	r25, 0x03	; 3
    1232:	24 f4       	brge	.+8      	; 0x123c <main+0xd5c>
    1234:	4f e1       	ldi	r20, 0x1F	; 31
    1236:	64 2e       	mov	r6, r20
    1238:	71 2c       	mov	r7, r1
    123a:	2a c1       	rjmp	.+596    	; 0x1490 <main+0xfb0>
    123c:	12 01       	movw	r2, r4
    123e:	07 c0       	rjmp	.+14     	; 0x124e <main+0xd6e>
    1240:	3a e1       	ldi	r19, 0x1A	; 26
    1242:	63 2e       	mov	r6, r19
    1244:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totallength2*m2HomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    1246:	30 e2       	ldi	r19, 0x20	; 32
    1248:	63 16       	cp	r6, r19
    124a:	71 04       	cpc	r7, r1
    124c:	79 f4       	brne	.+30     	; 0x126c <main+0xd8c>
    124e:	c2 01       	movw	r24, r4
    1250:	82 19       	sub	r24, r2
    1252:	93 09       	sbc	r25, r3
    1254:	81 5a       	subi	r24, 0xA1	; 161
    1256:	9f 40       	sbci	r25, 0x0F	; 15
    1258:	24 f4       	brge	.+8      	; 0x1262 <main+0xd82>
    125a:	20 e2       	ldi	r18, 0x20	; 32
    125c:	62 2e       	mov	r6, r18
    125e:	71 2c       	mov	r7, r1
    1260:	1d c1       	rjmp	.+570    	; 0x149c <main+0xfbc>
    1262:	12 01       	movw	r2, r4
    1264:	07 c0       	rjmp	.+14     	; 0x1274 <main+0xd94>
    1266:	9b e1       	ldi	r25, 0x1B	; 27
    1268:	69 2e       	mov	r6, r25
    126a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    126c:	b1 e2       	ldi	r27, 0x21	; 33
    126e:	6b 16       	cp	r6, r27
    1270:	71 04       	cpc	r7, r1
    1272:	79 f4       	brne	.+30     	; 0x1292 <main+0xdb2>
    1274:	c2 01       	movw	r24, r4
    1276:	82 19       	sub	r24, r2
    1278:	93 09       	sbc	r25, r3
    127a:	85 36       	cpi	r24, 0x65	; 101
    127c:	91 05       	cpc	r25, r1
    127e:	24 f4       	brge	.+8      	; 0x1288 <main+0xda8>
    1280:	81 e2       	ldi	r24, 0x21	; 33
    1282:	68 2e       	mov	r6, r24
    1284:	71 2c       	mov	r7, r1
    1286:	0f c1       	rjmp	.+542    	; 0x14a6 <main+0xfc6>
    1288:	12 01       	movw	r2, r4
    128a:	07 c0       	rjmp	.+14     	; 0x129a <main+0xdba>
    128c:	0c e1       	ldi	r16, 0x1C	; 28
    128e:	60 2e       	mov	r6, r16
    1290:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totallength1*m1LoadPlate){
    1292:	22 e2       	ldi	r18, 0x22	; 34
    1294:	62 16       	cp	r6, r18
    1296:	71 04       	cpc	r7, r1
    1298:	79 f4       	brne	.+30     	; 0x12b8 <main+0xdd8>
    129a:	c2 01       	movw	r24, r4
    129c:	82 19       	sub	r24, r2
    129e:	93 09       	sbc	r25, r3
    12a0:	81 5a       	subi	r24, 0xA1	; 161
    12a2:	9f 40       	sbci	r25, 0x0F	; 15
    12a4:	24 f4       	brge	.+8      	; 0x12ae <main+0xdce>
    12a6:	12 e2       	ldi	r17, 0x22	; 34
    12a8:	61 2e       	mov	r6, r17
    12aa:	71 2c       	mov	r7, r1
    12ac:	08 c1       	rjmp	.+528    	; 0x14be <main+0xfde>
    12ae:	12 01       	movw	r2, r4
    12b0:	07 c0       	rjmp	.+14     	; 0x12c0 <main+0xde0>
    12b2:	bd e1       	ldi	r27, 0x1D	; 29
    12b4:	6b 2e       	mov	r6, r27
    12b6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    12b8:	83 e2       	ldi	r24, 0x23	; 35
    12ba:	68 16       	cp	r6, r24
    12bc:	71 04       	cpc	r7, r1
    12be:	81 f4       	brne	.+32     	; 0x12e0 <main+0xe00>
    12c0:	c2 01       	movw	r24, r4
    12c2:	82 19       	sub	r24, r2
    12c4:	93 09       	sbc	r25, r3
    12c6:	0b 97       	sbiw	r24, 0x0b	; 11
    12c8:	24 f0       	brlt	.+8      	; 0x12d2 <main+0xdf2>
    12ca:	66 24       	eor	r6, r6
    12cc:	6a 94       	dec	r6
    12ce:	76 2c       	mov	r7, r6
    12d0:	0d c1       	rjmp	.+538    	; 0x14ec <main+0x100c>
    12d2:	a3 e2       	ldi	r26, 0x23	; 35
    12d4:	6a 2e       	mov	r6, r26
    12d6:	71 2c       	mov	r7, r1
    12d8:	f7 c0       	rjmp	.+494    	; 0x14c8 <main+0xfe8>
    12da:	fe e1       	ldi	r31, 0x1E	; 30
    12dc:	6f 2e       	mov	r6, r31
    12de:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    12e0:	f3 01       	movw	r30, r6
    12e2:	e4 32       	cpi	r30, 0x24	; 36
    12e4:	f1 05       	cpc	r31, r1
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <main+0xe0a>
    12e8:	01 c1       	rjmp	.+514    	; 0x14ec <main+0x100c>
    12ea:	e0 59       	subi	r30, 0x90	; 144
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	ee 0f       	add	r30, r30
    12f0:	ff 1f       	adc	r31, r31
    12f2:	05 90       	lpm	r0, Z+
    12f4:	f4 91       	lpm	r31, Z+
    12f6:	e0 2d       	mov	r30, r0
    12f8:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    12fa:	80 91 3c 03 	lds	r24, 0x033C
    12fe:	90 91 38 03 	lds	r25, 0x0338
    1302:	20 91 3a 03 	lds	r18, 0x033A
    1306:	82 ff       	sbrs	r24, 2
    1308:	07 c0       	rjmp	.+14     	; 0x1318 <main+0xe38>
						u_motorByte0.bits_in_motorByte0.m2Dir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    130a:	9f 7e       	andi	r25, 0xEF	; 239
    130c:	90 93 38 03 	sts	0x0338, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1310:	27 7f       	andi	r18, 0xF7	; 247
    1312:	20 93 3a 03 	sts	0x033A, r18
    1316:	15 c0       	rjmp	.+42     	; 0x1342 <main+0xe62>
						m2 = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    1318:	9f 7d       	andi	r25, 0xDF	; 223
    131a:	90 93 38 03 	sts	0x0338, r25
						m2 = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    131e:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1320:	28 60       	ori	r18, 0x08	; 8
    1322:	20 93 3a 03 	sts	0x033A, r18
						if(print0 == 1){
    1326:	af 89       	ldd	r26, Y+23	; 0x17
    1328:	b8 8d       	ldd	r27, Y+24	; 0x18
    132a:	11 97       	sbiw	r26, 0x01	; 1
    132c:	51 f4       	brne	.+20     	; 0x1342 <main+0xe62>
							OrangutanLCD::gotoXY(0,1);
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	93 e0       	ldi	r25, 0x03	; 3
    133a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
    133e:	18 8e       	std	Y+24, r1	; 0x18
    1340:	1f 8a       	std	Y+23, r1	; 0x17
							print0 = 0;
						}
					}
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1342:	20 91 3a 03 	lds	r18, 0x033A
    1346:	32 2f       	mov	r19, r18
    1348:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    134a:	c2 01       	movw	r24, r4
    134c:	68 ec       	ldi	r22, 0xC8	; 200
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	0e 94 82 18 	call	0x3104	; 0x3104 <__divmodhi4>
    1354:	84 36       	cpi	r24, 0x64	; 100
    1356:	91 05       	cpc	r25, r1
    1358:	24 f4       	brge	.+8      	; 0x1362 <main+0xe82>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    135a:	2c 7f       	andi	r18, 0xFC	; 252
    135c:	20 93 3a 03 	sts	0x033A, r18
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <main+0xe88>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1362:	32 60       	ori	r19, 0x02	; 2
    1364:	30 93 3a 03 	sts	0x033A, r19
					}
					m1 = 1;
					u_motorByte0.bits_in_motorByte0.m1Dir = 1;  //****** dir1 ******
    1368:	80 91 38 03 	lds	r24, 0x0338
					u_motorByte0.bits_in_motorByte0.m1Drop = 1;
    136c:	86 60       	ori	r24, 0x06	; 6
    136e:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1372:	80 91 3a 03 	lds	r24, 0x033A
    1376:	8b 7f       	andi	r24, 0xFB	; 251
    1378:	80 93 3a 03 	sts	0x033A, r24
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    137c:	80 91 3a 03 	lds	r24, 0x033A
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1380:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1382:	86 61       	ori	r24, 0x16	; 22
    1384:	80 93 3a 03 	sts	0x033A, r24
						m1 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 1;
    1388:	80 91 38 03 	lds	r24, 0x0338
    138c:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.m1Drop = 0;
    138e:	8b 7f       	andi	r24, 0xFB	; 251
    1390:	80 93 38 03 	sts	0x0338, r24
				case FIXL:
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ****** dir2 *******
    1394:	80 91 38 03 	lds	r24, 0x0338
    1398:	80 61       	ori	r24, 0x10	; 16
    139a:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				case LOWERL1:
						m2 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    139e:	80 91 38 03 	lds	r24, 0x0338
    13a2:	8f 7d       	andi	r24, 0xDF	; 223
    13a4:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    13a8:	80 91 3a 03 	lds	r24, 0x033A
    13ac:	88 60       	ori	r24, 0x08	; 8
    13ae:	80 93 3a 03 	sts	0x033A, r24
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    13b2:	80 91 3a 03 	lds	r24, 0x033A
    13b6:	8f 7e       	andi	r24, 0xEF	; 239
    13b8:	80 93 3a 03 	sts	0x033A, r24
					u_motorByte0.bits_in_motorByte0.m2Drop = 1;
    13bc:	80 91 38 03 	lds	r24, 0x0338
    13c0:	80 62       	ori	r24, 0x20	; 32
    13c2:	80 93 38 03 	sts	0x0338, r24
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    13c6:	80 91 38 03 	lds	r24, 0x0338
    13ca:	80 61       	ori	r24, 0x10	; 16
    13cc:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				case B1SET:
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m3Drop = 1;
    13d0:	80 91 39 03 	lds	r24, 0x0339
    13d4:	81 60       	ori	r24, 0x01	; 1
    13d6:	80 93 39 03 	sts	0x0339, r24
					u_motorByte0.bits_in_motorByte0.m3Dir = 0;  // ******* dir3 *******
    13da:	80 91 38 03 	lds	r24, 0x0338
    13de:	8f 77       	andi	r24, 0x7F	; 127
    13e0:	80 93 38 03 	sts	0x0338, r24
						OrangutanLCD::print("Clean 1");
						print6 = 0;
					}*/
				case B1START1:
					m3 = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    13e4:	80 91 3a 03 	lds	r24, 0x033A
    13e8:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    13ea:	8f 7d       	andi	r24, 0xDF	; 223
    13ec:	80 93 3a 03 	sts	0x033A, r24
				case CLEAN1_1:
					m2 = 1;
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;  // ******* dir2 *******
    13f0:	80 91 38 03 	lds	r24, 0x0338
    13f4:	8f 7e       	andi	r24, 0xEF	; 239
    13f6:	80 93 38 03 	sts	0x0338, r24
				case B1STOP1:
					m2 = 0;
					m3 = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    13fa:	80 91 3a 03 	lds	r24, 0x033A
    13fe:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1400:	80 62       	ori	r24, 0x20	; 32
    1402:	80 93 3a 03 	sts	0x033A, r24
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    1406:	80 91 38 03 	lds	r24, 0x0338
    140a:	80 61       	ori	r24, 0x10	; 16
    140c:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				case B1START2:
					m2 = 0;
					u_motorByte0.bits_in_motorByte0.m3Dir = 0;  // ******* dir3 *******
    1410:	80 91 38 03 	lds	r24, 0x0338
    1414:	8f 77       	andi	r24, 0x7F	; 127
    1416:	80 93 38 03 	sts	0x0338, r24
					m3 = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    141a:	80 91 3a 03 	lds	r24, 0x033A
    141e:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    1420:	8f 7d       	andi	r24, 0xDF	; 223
    1422:	80 93 3a 03 	sts	0x033A, r24
				case CLEAN1_3:
					m2 = 1;
				case B1STOP2:
					m3 = 0;
					m2 = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1426:	80 91 3a 03 	lds	r24, 0x033A
    142a:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    142c:	80 62       	ori	r24, 0x20	; 32
    142e:	80 93 3a 03 	sts	0x033A, r24
				
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    1432:	80 91 38 03 	lds	r24, 0x0338
    1436:	80 61       	ori	r24, 0x10	; 16
    1438:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
					u_motorByte1.bits_in_motorByte1.m3Drop = 0;
    143c:	80 91 39 03 	lds	r24, 0x0339
    1440:	8e 7f       	andi	r24, 0xFE	; 254
    1442:	80 93 39 03 	sts	0x0339, r24
				case D1START:
					m2 = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1446:	80 91 3b 03 	lds	r24, 0x033B
    144a:	87 7f       	andi	r24, 0xF7	; 247
    144c:	80 93 3b 03 	sts	0x033B, r24
						OrangutanLCD::clear();
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
				case DRY1:
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;  // ******* dir2 *******
    1450:	80 91 38 03 	lds	r24, 0x0338
    1454:	8f 7e       	andi	r24, 0xEF	; 239
    1456:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    145a:	80 91 3b 03 	lds	r24, 0x033B
    145e:	88 60       	ori	r24, 0x08	; 8
    1460:	80 93 3b 03 	sts	0x033B, r24
				case D2START:
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m5Drop = 1;
    1464:	80 91 39 03 	lds	r24, 0x0339
    1468:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.m5Dir = 0;
    146a:	8f 7d       	andi	r24, 0xDF	; 223
    146c:	80 93 39 03 	sts	0x0339, r24
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1470:	80 91 3b 03 	lds	r24, 0x033B
    1474:	8d 7f       	andi	r24, 0xFD	; 253
    1476:	80 93 3b 03 	sts	0x033B, r24
				case DRY2:
					m2 = 1;
				case D2STOP:
					m5 = 0;
						u_motorByte1.bits_in_motorByte1.m5Drop = 0;
    147a:	80 91 39 03 	lds	r24, 0x0339
    147e:	8f 7b       	andi	r24, 0xBF	; 191
    1480:	80 93 39 03 	sts	0x0339, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1484:	80 91 3b 03 	lds	r24, 0x033B
    1488:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    148a:	8b 7f       	andi	r24, 0xFB	; 251
    148c:	80 93 3b 03 	sts	0x033B, r24
				case RAISEL2:
					m2 = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1490:	80 91 3a 03 	lds	r24, 0x033A
    1494:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1496:	80 61       	ori	r24, 0x10	; 16
    1498:	80 93 3a 03 	sts	0x033A, r24
				case FIXH:
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;
    149c:	80 91 38 03 	lds	r24, 0x0338
    14a0:	8f 7e       	andi	r24, 0xEF	; 239
    14a2:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				case LOWERL3:
					m2 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    14a6:	80 91 38 03 	lds	r24, 0x0338
    14aa:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.m1Drop = 1;
    14ac:	84 60       	ori	r24, 0x04	; 4
    14ae:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    14b2:	80 91 3a 03 	lds	r24, 0x033A
    14b6:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    14b8:	8f 7e       	andi	r24, 0xEF	; 239
    14ba:	80 93 3a 03 	sts	0x033A, r24
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.m1Dir = 0;
    14be:	80 91 38 03 	lds	r24, 0x0338
    14c2:	8d 7f       	andi	r24, 0xFD	; 253
    14c4:	80 93 38 03 	sts	0x0338, r24
					m1 = 1;
				case END:
					m1 = 0;
					u_motorByte0.bits_in_motorByte0.m1Drop = 0;
    14c8:	80 91 38 03 	lds	r24, 0x0338
    14cc:	8b 7f       	andi	r24, 0xFB	; 251
    14ce:	80 93 38 03 	sts	0x0338, r24
					if(print35 == 1){
    14d2:	2d 89       	ldd	r18, Y+21	; 0x15
    14d4:	3e 89       	ldd	r19, Y+22	; 0x16
    14d6:	21 30       	cpi	r18, 0x01	; 1
    14d8:	31 05       	cpc	r19, r1
    14da:	31 f4       	brne	.+12     	; 0x14e8 <main+0x1008>
						OrangutanLCD::clear();
    14dc:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    14e0:	8e e0       	ldi	r24, 0x0E	; 14
    14e2:	93 e0       	ldi	r25, 0x03	; 3
    14e4:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
    14e8:	1e 8a       	std	Y+22, r1	; 0x16
    14ea:	1d 8a       	std	Y+21, r1	; 0x15
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, m1, m2, m3, m4, m5, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
    14ec:	8d b7       	in	r24, 0x3d	; 61
    14ee:	9e b7       	in	r25, 0x3e	; 62
    14f0:	42 97       	sbiw	r24, 0x12	; 18
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	9e bf       	out	0x3e, r25	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	8d bf       	out	0x3d, r24	; 61
    14fc:	ed b7       	in	r30, 0x3d	; 61
    14fe:	fe b7       	in	r31, 0x3e	; 62
    1500:	31 96       	adiw	r30, 0x01	; 1
    1502:	82 e0       	ldi	r24, 0x02	; 2
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	ad b7       	in	r26, 0x3d	; 61
    1508:	be b7       	in	r27, 0x3e	; 62
    150a:	12 96       	adiw	r26, 0x02	; 2
    150c:	9c 93       	st	X, r25
    150e:	8e 93       	st	-X, r24
    1510:	11 97       	sbiw	r26, 0x01	; 1
    1512:	93 83       	std	Z+3, r25	; 0x03
    1514:	82 83       	std	Z+2, r24	; 0x02
    1516:	95 83       	std	Z+5, r25	; 0x05
    1518:	84 83       	std	Z+4, r24	; 0x04
    151a:	97 83       	std	Z+7, r25	; 0x07
    151c:	86 83       	std	Z+6, r24	; 0x06
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	91 87       	std	Z+9, r25	; 0x09
    1524:	80 87       	std	Z+8, r24	; 0x08
    1526:	93 87       	std	Z+11, r25	; 0x0b
    1528:	82 87       	std	Z+10, r24	; 0x0a
    152a:	95 87       	std	Z+13, r25	; 0x0d
    152c:	84 87       	std	Z+12, r24	; 0x0c
    152e:	97 87       	std	Z+15, r25	; 0x0f
    1530:	86 87       	std	Z+14, r24	; 0x0e
    1532:	91 8b       	std	Z+17, r25	; 0x11
    1534:	80 8b       	std	Z+16, r24	; 0x10
    1536:	c2 01       	movw	r24, r4
    1538:	b1 01       	movw	r22, r2
    153a:	49 8d       	ldd	r20, Y+25	; 0x19
    153c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	00 e0       	ldi	r16, 0x00	; 0
    1544:	10 e0       	ldi	r17, 0x00	; 0
    1546:	ee 24       	eor	r14, r14
    1548:	ff 24       	eor	r15, r15
    154a:	cc 24       	eor	r12, r12
    154c:	dd 24       	eor	r13, r13
    154e:	aa 24       	eor	r10, r10
    1550:	bb 24       	eor	r11, r11
    1552:	e2 e0       	ldi	r30, 0x02	; 2
    1554:	8e 2e       	mov	r8, r30
    1556:	91 2c       	mov	r9, r1
    1558:	0e 94 bb 01 	call	0x376	; 0x376 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    155c:	2d b7       	in	r18, 0x3d	; 61
    155e:	3e b7       	in	r19, 0x3e	; 62
    1560:	2e 5e       	subi	r18, 0xEE	; 238
    1562:	3f 4f       	sbci	r19, 0xFF	; 255
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	3e bf       	out	0x3e, r19	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	2d bf       	out	0x3d, r18	; 61
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>
		u_motorByte1.bits_in_motorByte1.m5Drop = 1;*/

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("FIRST B");
			while(state != -1)
    1576:	3f ef       	ldi	r19, 0xFF	; 255
    1578:	63 16       	cp	r6, r19
    157a:	3f ef       	ldi	r19, 0xFF	; 255
    157c:	73 06       	cpc	r7, r19
    157e:	09 f4       	brne	.+2      	; 0x1582 <main+0x10a2>
    1580:	84 c7       	rjmp	.+3848   	; 0x248a <main+0x1faa>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, m1, m2, m3, m4, m5, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);

				counter ++;
    1582:	08 94       	sec
    1584:	41 1c       	adc	r4, r1
    1586:	51 1c       	adc	r5, r1
    1588:	c6 cc       	rjmp	.-1652   	; 0xf16 <main+0xa36>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
    1590:	88 23       	and	r24, r24
    1592:	09 f0       	breq	.+2      	; 0x1596 <main+0x10b6>
    1594:	a0 c7       	rjmp	.+3904   	; 0x24d6 <main+0x1ff6>
			OrangutanLCD::gotoXY(7,0);
    1596:	87 e0       	ldi	r24, 0x07	; 7
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("SECOND B");
    159e:	8b e1       	ldi	r24, 0x1B	; 27
    15a0:	93 e0       	ldi	r25, 0x03	; 3
    15a2:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	9c 8b       	std	Y+20, r25	; 0x14
    15ac:	8b 8b       	std	Y+19, r24	; 0x13
    15ae:	98 8b       	std	Y+16, r25	; 0x10
    15b0:	8f 87       	std	Y+15, r24	; 0x0f
    15b2:	66 24       	eor	r6, r6
    15b4:	77 24       	eor	r7, r7
    15b6:	44 24       	eor	r4, r4
    15b8:	55 24       	eor	r5, r5
    15ba:	22 24       	eor	r2, r2
    15bc:	33 24       	eor	r3, r3
    15be:	1a 86       	std	Y+10, r1	; 0x0a
    15c0:	19 86       	std	Y+9, r1	; 0x09
			while(state != -1)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    15c2:	84 e4       	ldi	r24, 0x44	; 68
    15c4:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    15ce:	85 e4       	ldi	r24, 0x45	; 69
    15d0:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    15d4:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_Z11i2c_readAckv>
    15d8:	80 93 3c 03 	sts	0x033C, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    15dc:	0e 94 fd 12 	call	0x25fa	; 0x25fa <_Z11i2c_readNakv>
    15e0:	80 93 3d 03 	sts	0x033D, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    15e4:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_Z8i2c_stopv>
				
				if(state != INIT){
    15e8:	61 14       	cp	r6, r1
    15ea:	71 04       	cpc	r7, r1
    15ec:	79 f0       	breq	.+30     	; 0x160c <main+0x112c>
					OrangutanLCD::gotoXY(0,1);
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    15f6:	89 ef       	ldi	r24, 0xF9	; 249
    15f8:	92 e0       	ldi	r25, 0x02	; 2
    15fa:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
    15fe:	b3 01       	movw	r22, r6
    1600:	88 27       	eor	r24, r24
    1602:	77 fd       	sbrc	r23, 7
    1604:	80 95       	com	r24
    1606:	98 2f       	mov	r25, r24
    1608:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_ZN12OrangutanLCD5printEl>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}*/
				button = button_debounce(counter, &counterRefPush, &counterRefRel, &stateButton);
    160c:	c2 01       	movw	r24, r4
    160e:	be 01       	movw	r22, r28
    1610:	6f 5f       	subi	r22, 0xFF	; 255
    1612:	7f 4f       	sbci	r23, 0xFF	; 255
    1614:	ae 01       	movw	r20, r28
    1616:	4d 5f       	subi	r20, 0xFD	; 253
    1618:	5f 4f       	sbci	r21, 0xFF	; 255
    161a:	9e 01       	movw	r18, r28
    161c:	2b 5f       	subi	r18, 0xFB	; 251
    161e:	3f 4f       	sbci	r19, 0xFF	; 255
    1620:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPiS_S_>

				//state conversions
	
				if(state == INIT && button == 0){
    1624:	61 14       	cp	r6, r1
    1626:	71 04       	cpc	r7, r1
    1628:	29 f4       	brne	.+10     	; 0x1634 <main+0x1154>
    162a:	89 2b       	or	r24, r25
    162c:	09 f0       	breq	.+2      	; 0x1630 <main+0x1150>
    162e:	43 c0       	rjmp	.+134    	; 0x16b6 <main+0x11d6>
    1630:	12 01       	movw	r2, r4
    1632:	04 c0       	rjmp	.+8      	; 0x163c <main+0x115c>
					button = 1;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totallength1*m1LoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	69 16       	cp	r6, r25
    1638:	71 04       	cpc	r7, r1
    163a:	49 f4       	brne	.+18     	; 0x164e <main+0x116e>
    163c:	c2 01       	movw	r24, r4
    163e:	82 19       	sub	r24, r2
    1640:	93 09       	sbc	r25, r3
    1642:	81 5a       	subi	r24, 0xA1	; 161
    1644:	9f 40       	sbci	r25, 0x0F	; 15
    1646:	0c f4       	brge	.+2      	; 0x164a <main+0x116a>
    1648:	43 c0       	rjmp	.+134    	; 0x16d0 <main+0x11f0>
    164a:	12 01       	movw	r2, r4
    164c:	04 c0       	rjmp	.+8      	; 0x1656 <main+0x1176>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    164e:	b2 e0       	ldi	r27, 0x02	; 2
    1650:	6b 16       	cp	r6, r27
    1652:	71 04       	cpc	r7, r1
    1654:	49 f4       	brne	.+18     	; 0x1668 <main+0x1188>
    1656:	c2 01       	movw	r24, r4
    1658:	82 19       	sub	r24, r2
    165a:	93 09       	sbc	r25, r3
    165c:	85 36       	cpi	r24, 0x65	; 101
    165e:	91 05       	cpc	r25, r1
    1660:	0c f4       	brge	.+2      	; 0x1664 <main+0x1184>
    1662:	46 c0       	rjmp	.+140    	; 0x16f0 <main+0x1210>
    1664:	12 01       	movw	r2, r4
    1666:	04 c0       	rjmp	.+8      	; 0x1670 <main+0x1190>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totallength2*m2HomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1668:	23 e0       	ldi	r18, 0x03	; 3
    166a:	62 16       	cp	r6, r18
    166c:	71 04       	cpc	r7, r1
    166e:	49 f4       	brne	.+18     	; 0x1682 <main+0x11a2>
    1670:	c2 01       	movw	r24, r4
    1672:	82 19       	sub	r24, r2
    1674:	93 09       	sbc	r25, r3
    1676:	81 5a       	subi	r24, 0xA1	; 161
    1678:	9f 40       	sbci	r25, 0x0F	; 15
    167a:	0c f4       	brge	.+2      	; 0x167e <main+0x119e>
    167c:	49 c0       	rjmp	.+146    	; 0x1710 <main+0x1230>
    167e:	12 01       	movw	r2, r4
    1680:	04 c0       	rjmp	.+8      	; 0x168a <main+0x11aa>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1682:	84 e0       	ldi	r24, 0x04	; 4
    1684:	68 16       	cp	r6, r24
    1686:	71 04       	cpc	r7, r1
    1688:	49 f4       	brne	.+18     	; 0x169c <main+0x11bc>
    168a:	c2 01       	movw	r24, r4
    168c:	82 19       	sub	r24, r2
    168e:	93 09       	sbc	r25, r3
    1690:	89 5e       	subi	r24, 0xE9	; 233
    1692:	93 40       	sbci	r25, 0x03	; 3
    1694:	0c f4       	brge	.+2      	; 0x1698 <main+0x11b8>
    1696:	4c c0       	rjmp	.+152    	; 0x1730 <main+0x1250>
    1698:	12 01       	movw	r2, r4
    169a:	04 c0       	rjmp	.+8      	; 0x16a4 <main+0x11c4>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    169c:	b5 e0       	ldi	r27, 0x05	; 5
    169e:	6b 16       	cp	r6, r27
    16a0:	71 04       	cpc	r7, r1
    16a2:	49 f4       	brne	.+18     	; 0x16b6 <main+0x11d6>
    16a4:	c2 01       	movw	r24, r4
    16a6:	82 19       	sub	r24, r2
    16a8:	93 09       	sbc	r25, r3
    16aa:	85 36       	cpi	r24, 0x65	; 101
    16ac:	91 05       	cpc	r25, r1
    16ae:	0c f4       	brge	.+2      	; 0x16b2 <main+0x11d2>
    16b0:	4f c0       	rjmp	.+158    	; 0x1750 <main+0x1270>
    16b2:	12 01       	movw	r2, r4
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <main+0x11de>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totallength2*m2Brush2StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    16b6:	26 e0       	ldi	r18, 0x06	; 6
    16b8:	62 16       	cp	r6, r18
    16ba:	71 04       	cpc	r7, r1
    16bc:	61 f4       	brne	.+24     	; 0x16d6 <main+0x11f6>
    16be:	c2 01       	movw	r24, r4
    16c0:	82 19       	sub	r24, r2
    16c2:	93 09       	sbc	r25, r3
    16c4:	81 5a       	subi	r24, 0xA1	; 161
    16c6:	9f 40       	sbci	r25, 0x0F	; 15
    16c8:	0c f4       	brge	.+2      	; 0x16cc <main+0x11ec>
    16ca:	52 c0       	rjmp	.+164    	; 0x1770 <main+0x1290>
    16cc:	12 01       	movw	r2, r4
    16ce:	07 c0       	rjmp	.+14     	; 0x16de <main+0x11fe>
    16d0:	71 e0       	ldi	r23, 0x01	; 1
    16d2:	67 2e       	mov	r6, r23
    16d4:	71 2c       	mov	r7, r1
					state = B2SET;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    16d6:	8f e0       	ldi	r24, 0x0F	; 15
    16d8:	68 16       	cp	r6, r24
    16da:	71 04       	cpc	r7, r1
    16dc:	61 f4       	brne	.+24     	; 0x16f6 <main+0x1216>
    16de:	c2 01       	movw	r24, r4
    16e0:	82 19       	sub	r24, r2
    16e2:	93 09       	sbc	r25, r3
    16e4:	85 36       	cpi	r24, 0x65	; 101
    16e6:	91 05       	cpc	r25, r1
    16e8:	0c f4       	brge	.+2      	; 0x16ec <main+0x120c>
    16ea:	52 c0       	rjmp	.+164    	; 0x1790 <main+0x12b0>
    16ec:	12 01       	movw	r2, r4
    16ee:	07 c0       	rjmp	.+14     	; 0x16fe <main+0x121e>
    16f0:	62 e0       	ldi	r22, 0x02	; 2
    16f2:	66 2e       	mov	r6, r22
    16f4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    16f6:	90 e1       	ldi	r25, 0x10	; 16
    16f8:	69 16       	cp	r6, r25
    16fa:	71 04       	cpc	r7, r1
    16fc:	61 f4       	brne	.+24     	; 0x1716 <main+0x1236>
    16fe:	c2 01       	movw	r24, r4
    1700:	82 19       	sub	r24, r2
    1702:	93 09       	sbc	r25, r3
    1704:	85 36       	cpi	r24, 0x65	; 101
    1706:	91 05       	cpc	r25, r1
    1708:	0c f4       	brge	.+2      	; 0x170c <main+0x122c>
    170a:	52 c0       	rjmp	.+164    	; 0x17b0 <main+0x12d0>
    170c:	12 01       	movw	r2, r4
    170e:	07 c0       	rjmp	.+14     	; 0x171e <main+0x123e>
    1710:	53 e0       	ldi	r21, 0x03	; 3
    1712:	65 2e       	mov	r6, r21
    1714:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totallength2*m2HalfPlate){
    1716:	a1 e1       	ldi	r26, 0x11	; 17
    1718:	6a 16       	cp	r6, r26
    171a:	71 04       	cpc	r7, r1
    171c:	61 f4       	brne	.+24     	; 0x1736 <main+0x1256>
    171e:	c2 01       	movw	r24, r4
    1720:	82 19       	sub	r24, r2
    1722:	93 09       	sbc	r25, r3
    1724:	81 5a       	subi	r24, 0xA1	; 161
    1726:	9f 40       	sbci	r25, 0x0F	; 15
    1728:	0c f4       	brge	.+2      	; 0x172c <main+0x124c>
    172a:	52 c0       	rjmp	.+164    	; 0x17d0 <main+0x12f0>
    172c:	12 01       	movw	r2, r4
    172e:	07 c0       	rjmp	.+14     	; 0x173e <main+0x125e>
    1730:	44 e0       	ldi	r20, 0x04	; 4
    1732:	64 2e       	mov	r6, r20
    1734:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    1736:	22 e1       	ldi	r18, 0x12	; 18
    1738:	62 16       	cp	r6, r18
    173a:	71 04       	cpc	r7, r1
    173c:	61 f4       	brne	.+24     	; 0x1756 <main+0x1276>
    173e:	c2 01       	movw	r24, r4
    1740:	82 19       	sub	r24, r2
    1742:	93 09       	sbc	r25, r3
    1744:	85 36       	cpi	r24, 0x65	; 101
    1746:	91 05       	cpc	r25, r1
    1748:	0c f4       	brge	.+2      	; 0x174c <main+0x126c>
    174a:	52 c0       	rjmp	.+164    	; 0x17f0 <main+0x1310>
    174c:	12 01       	movw	r2, r4
    174e:	07 c0       	rjmp	.+14     	; 0x175e <main+0x127e>
    1750:	35 e0       	ldi	r19, 0x05	; 5
    1752:	63 2e       	mov	r6, r19
    1754:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totallength2*m2HalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    1756:	33 e1       	ldi	r19, 0x13	; 19
    1758:	63 16       	cp	r6, r19
    175a:	71 04       	cpc	r7, r1
    175c:	61 f4       	brne	.+24     	; 0x1776 <main+0x1296>
    175e:	c2 01       	movw	r24, r4
    1760:	82 19       	sub	r24, r2
    1762:	93 09       	sbc	r25, r3
    1764:	81 5a       	subi	r24, 0xA1	; 161
    1766:	9f 40       	sbci	r25, 0x0F	; 15
    1768:	0c f4       	brge	.+2      	; 0x176c <main+0x128c>
    176a:	52 c0       	rjmp	.+164    	; 0x1810 <main+0x1330>
    176c:	12 01       	movw	r2, r4
    176e:	07 c0       	rjmp	.+14     	; 0x177e <main+0x129e>
    1770:	26 e0       	ldi	r18, 0x06	; 6
    1772:	62 2e       	mov	r6, r18
    1774:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    1776:	b4 e1       	ldi	r27, 0x14	; 20
    1778:	6b 16       	cp	r6, r27
    177a:	71 04       	cpc	r7, r1
    177c:	61 f4       	brne	.+24     	; 0x1796 <main+0x12b6>
    177e:	c2 01       	movw	r24, r4
    1780:	82 19       	sub	r24, r2
    1782:	93 09       	sbc	r25, r3
    1784:	85 36       	cpi	r24, 0x65	; 101
    1786:	91 05       	cpc	r25, r1
    1788:	0c f4       	brge	.+2      	; 0x178c <main+0x12ac>
    178a:	50 c0       	rjmp	.+160    	; 0x182c <main+0x134c>
    178c:	12 01       	movw	r2, r4
    178e:	07 c0       	rjmp	.+14     	; 0x179e <main+0x12be>
    1790:	9f e0       	ldi	r25, 0x0F	; 15
    1792:	69 2e       	mov	r6, r25
    1794:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totallength2*m2HalfPlate){
    1796:	25 e1       	ldi	r18, 0x15	; 21
    1798:	62 16       	cp	r6, r18
    179a:	71 04       	cpc	r7, r1
    179c:	61 f4       	brne	.+24     	; 0x17b6 <main+0x12d6>
    179e:	c2 01       	movw	r24, r4
    17a0:	82 19       	sub	r24, r2
    17a2:	93 09       	sbc	r25, r3
    17a4:	81 5a       	subi	r24, 0xA1	; 161
    17a6:	9f 40       	sbci	r25, 0x0F	; 15
    17a8:	0c f4       	brge	.+2      	; 0x17ac <main+0x12cc>
    17aa:	51 c0       	rjmp	.+162    	; 0x184e <main+0x136e>
    17ac:	12 01       	movw	r2, r4
    17ae:	07 c0       	rjmp	.+14     	; 0x17be <main+0x12de>
    17b0:	80 e1       	ldi	r24, 0x10	; 16
    17b2:	68 2e       	mov	r6, r24
    17b4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    17b6:	86 e1       	ldi	r24, 0x16	; 22
    17b8:	68 16       	cp	r6, r24
    17ba:	71 04       	cpc	r7, r1
    17bc:	61 f4       	brne	.+24     	; 0x17d6 <main+0x12f6>
    17be:	c2 01       	movw	r24, r4
    17c0:	82 19       	sub	r24, r2
    17c2:	93 09       	sbc	r25, r3
    17c4:	85 36       	cpi	r24, 0x65	; 101
    17c6:	91 05       	cpc	r25, r1
    17c8:	0c f4       	brge	.+2      	; 0x17cc <main+0x12ec>
    17ca:	53 c0       	rjmp	.+166    	; 0x1872 <main+0x1392>
    17cc:	12 01       	movw	r2, r4
    17ce:	07 c0       	rjmp	.+14     	; 0x17de <main+0x12fe>
    17d0:	01 e1       	ldi	r16, 0x11	; 17
    17d2:	60 2e       	mov	r6, r16
    17d4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totallength2*m2Dry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    17d6:	97 e1       	ldi	r25, 0x17	; 23
    17d8:	69 16       	cp	r6, r25
    17da:	71 04       	cpc	r7, r1
    17dc:	61 f4       	brne	.+24     	; 0x17f6 <main+0x1316>
    17de:	c2 01       	movw	r24, r4
    17e0:	82 19       	sub	r24, r2
    17e2:	93 09       	sbc	r25, r3
    17e4:	81 5a       	subi	r24, 0xA1	; 161
    17e6:	9f 40       	sbci	r25, 0x0F	; 15
    17e8:	0c f4       	brge	.+2      	; 0x17ec <main+0x130c>
    17ea:	53 c0       	rjmp	.+166    	; 0x1892 <main+0x13b2>
    17ec:	12 01       	movw	r2, r4
    17ee:	07 c0       	rjmp	.+14     	; 0x17fe <main+0x131e>
    17f0:	12 e1       	ldi	r17, 0x12	; 18
    17f2:	61 2e       	mov	r6, r17
    17f4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    17f6:	b8 e1       	ldi	r27, 0x18	; 24
    17f8:	6b 16       	cp	r6, r27
    17fa:	71 04       	cpc	r7, r1
    17fc:	61 f4       	brne	.+24     	; 0x1816 <main+0x1336>
    17fe:	c2 01       	movw	r24, r4
    1800:	82 19       	sub	r24, r2
    1802:	93 09       	sbc	r25, r3
    1804:	85 36       	cpi	r24, 0x65	; 101
    1806:	91 05       	cpc	r25, r1
    1808:	0c f4       	brge	.+2      	; 0x180c <main+0x132c>
    180a:	51 c0       	rjmp	.+162    	; 0x18ae <main+0x13ce>
    180c:	12 01       	movw	r2, r4
    180e:	07 c0       	rjmp	.+14     	; 0x181e <main+0x133e>
    1810:	b3 e1       	ldi	r27, 0x13	; 19
    1812:	6b 2e       	mov	r6, r27
    1814:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totallength2*m2WholePlate){
    1816:	29 e1       	ldi	r18, 0x19	; 25
    1818:	62 16       	cp	r6, r18
    181a:	71 04       	cpc	r7, r1
    181c:	51 f4       	brne	.+20     	; 0x1832 <main+0x1352>
    181e:	c2 01       	movw	r24, r4
    1820:	82 19       	sub	r24, r2
    1822:	93 09       	sbc	r25, r3
    1824:	81 5a       	subi	r24, 0xA1	; 161
    1826:	9f 40       	sbci	r25, 0x0F	; 15
    1828:	44 f4       	brge	.+16     	; 0x183a <main+0x135a>
    182a:	51 c0       	rjmp	.+162    	; 0x18ce <main+0x13ee>
    182c:	a4 e1       	ldi	r26, 0x14	; 20
    182e:	6a 2e       	mov	r6, r26
    1830:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totallength2*m2Dry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    1832:	8a e1       	ldi	r24, 0x1A	; 26
    1834:	68 16       	cp	r6, r24
    1836:	71 04       	cpc	r7, r1
    1838:	69 f4       	brne	.+26     	; 0x1854 <main+0x1374>
    183a:	c2 01       	movw	r24, r4
    183c:	82 19       	sub	r24, r2
    183e:	93 09       	sbc	r25, r3
    1840:	81 5a       	subi	r24, 0xA1	; 161
    1842:	9f 40       	sbci	r25, 0x0F	; 15
    1844:	0c f4       	brge	.+2      	; 0x1848 <main+0x1368>
    1846:	56 c0       	rjmp	.+172    	; 0x18f4 <main+0x1414>
    1848:	5a 86       	std	Y+10, r5	; 0x0a
    184a:	49 86       	std	Y+9, r4	; 0x09
    184c:	07 c0       	rjmp	.+14     	; 0x185c <main+0x137c>
    184e:	f5 e1       	ldi	r31, 0x15	; 21
    1850:	6f 2e       	mov	r6, r31
    1852:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    1854:	bb e1       	ldi	r27, 0x1B	; 27
    1856:	6b 16       	cp	r6, r27
    1858:	71 04       	cpc	r7, r1
    185a:	71 f4       	brne	.+28     	; 0x1878 <main+0x1398>
    185c:	c2 01       	movw	r24, r4
    185e:	29 85       	ldd	r18, Y+9	; 0x09
    1860:	3a 85       	ldd	r19, Y+10	; 0x0a
    1862:	82 1b       	sub	r24, r18
    1864:	93 0b       	sbc	r25, r19
    1866:	85 36       	cpi	r24, 0x65	; 101
    1868:	91 05       	cpc	r25, r1
    186a:	0c f4       	brge	.+2      	; 0x186e <main+0x138e>
    186c:	56 c0       	rjmp	.+172    	; 0x191a <main+0x143a>
    186e:	12 01       	movw	r2, r4
    1870:	07 c0       	rjmp	.+14     	; 0x1880 <main+0x13a0>
    1872:	e6 e1       	ldi	r30, 0x16	; 22
    1874:	6e 2e       	mov	r6, r30
    1876:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    1878:	3c e1       	ldi	r19, 0x1C	; 28
    187a:	63 16       	cp	r6, r19
    187c:	71 04       	cpc	r7, r1
    187e:	61 f4       	brne	.+24     	; 0x1898 <main+0x13b8>
    1880:	c2 01       	movw	r24, r4
    1882:	82 19       	sub	r24, r2
    1884:	93 09       	sbc	r25, r3
    1886:	85 36       	cpi	r24, 0x65	; 101
    1888:	91 05       	cpc	r25, r1
    188a:	0c f4       	brge	.+2      	; 0x188e <main+0x13ae>
    188c:	59 c0       	rjmp	.+178    	; 0x1940 <main+0x1460>
    188e:	12 01       	movw	r2, r4
    1890:	07 c0       	rjmp	.+14     	; 0x18a0 <main+0x13c0>
    1892:	77 e1       	ldi	r23, 0x17	; 23
    1894:	67 2e       	mov	r6, r23
    1896:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totallength2*m2WholePlate){
    1898:	8d e1       	ldi	r24, 0x1D	; 29
    189a:	68 16       	cp	r6, r24
    189c:	71 04       	cpc	r7, r1
    189e:	51 f4       	brne	.+20     	; 0x18b4 <main+0x13d4>
    18a0:	c2 01       	movw	r24, r4
    18a2:	82 19       	sub	r24, r2
    18a4:	93 09       	sbc	r25, r3
    18a6:	81 5a       	subi	r24, 0xA1	; 161
    18a8:	9f 40       	sbci	r25, 0x0F	; 15
    18aa:	44 f4       	brge	.+16     	; 0x18bc <main+0x13dc>
    18ac:	5c c0       	rjmp	.+184    	; 0x1966 <main+0x1486>
    18ae:	68 e1       	ldi	r22, 0x18	; 24
    18b0:	66 2e       	mov	r6, r22
    18b2:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totallength2*m2LoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    18b4:	be e1       	ldi	r27, 0x1E	; 30
    18b6:	6b 16       	cp	r6, r27
    18b8:	71 04       	cpc	r7, r1
    18ba:	61 f4       	brne	.+24     	; 0x18d4 <main+0x13f4>
    18bc:	c2 01       	movw	r24, r4
    18be:	82 19       	sub	r24, r2
    18c0:	93 09       	sbc	r25, r3
    18c2:	81 5a       	subi	r24, 0xA1	; 161
    18c4:	9f 40       	sbci	r25, 0x0F	; 15
    18c6:	0c f4       	brge	.+2      	; 0x18ca <main+0x13ea>
    18c8:	62 c0       	rjmp	.+196    	; 0x198e <main+0x14ae>
    18ca:	12 01       	movw	r2, r4
    18cc:	07 c0       	rjmp	.+14     	; 0x18dc <main+0x13fc>
    18ce:	59 e1       	ldi	r21, 0x19	; 25
    18d0:	65 2e       	mov	r6, r21
    18d2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    18d4:	3f e1       	ldi	r19, 0x1F	; 31
    18d6:	63 16       	cp	r6, r19
    18d8:	71 04       	cpc	r7, r1
    18da:	79 f4       	brne	.+30     	; 0x18fa <main+0x141a>
    18dc:	c2 01       	movw	r24, r4
    18de:	82 19       	sub	r24, r2
    18e0:	93 09       	sbc	r25, r3
    18e2:	89 5e       	subi	r24, 0xE9	; 233
    18e4:	93 40       	sbci	r25, 0x03	; 3
    18e6:	24 f4       	brge	.+8      	; 0x18f0 <main+0x1410>
    18e8:	4f e1       	ldi	r20, 0x1F	; 31
    18ea:	64 2e       	mov	r6, r20
    18ec:	71 2c       	mov	r7, r1
    18ee:	3c c1       	rjmp	.+632    	; 0x1b68 <main+0x1688>
    18f0:	12 01       	movw	r2, r4
    18f2:	07 c0       	rjmp	.+14     	; 0x1902 <main+0x1422>
    18f4:	3a e1       	ldi	r19, 0x1A	; 26
    18f6:	63 2e       	mov	r6, r19
    18f8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totallength2*m2HomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    18fa:	b0 e2       	ldi	r27, 0x20	; 32
    18fc:	6b 16       	cp	r6, r27
    18fe:	71 04       	cpc	r7, r1
    1900:	79 f4       	brne	.+30     	; 0x1920 <main+0x1440>
    1902:	c2 01       	movw	r24, r4
    1904:	82 19       	sub	r24, r2
    1906:	93 09       	sbc	r25, r3
    1908:	81 5a       	subi	r24, 0xA1	; 161
    190a:	9f 40       	sbci	r25, 0x0F	; 15
    190c:	24 f4       	brge	.+8      	; 0x1916 <main+0x1436>
    190e:	20 e2       	ldi	r18, 0x20	; 32
    1910:	62 2e       	mov	r6, r18
    1912:	71 2c       	mov	r7, r1
    1914:	2f c1       	rjmp	.+606    	; 0x1b74 <main+0x1694>
    1916:	12 01       	movw	r2, r4
    1918:	07 c0       	rjmp	.+14     	; 0x1928 <main+0x1448>
    191a:	9b e1       	ldi	r25, 0x1B	; 27
    191c:	69 2e       	mov	r6, r25
    191e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    1920:	31 e2       	ldi	r19, 0x21	; 33
    1922:	63 16       	cp	r6, r19
    1924:	71 04       	cpc	r7, r1
    1926:	79 f4       	brne	.+30     	; 0x1946 <main+0x1466>
    1928:	c2 01       	movw	r24, r4
    192a:	82 19       	sub	r24, r2
    192c:	93 09       	sbc	r25, r3
    192e:	85 36       	cpi	r24, 0x65	; 101
    1930:	91 05       	cpc	r25, r1
    1932:	24 f4       	brge	.+8      	; 0x193c <main+0x145c>
    1934:	81 e2       	ldi	r24, 0x21	; 33
    1936:	68 2e       	mov	r6, r24
    1938:	71 2c       	mov	r7, r1
    193a:	21 c1       	rjmp	.+578    	; 0x1b7e <main+0x169e>
    193c:	12 01       	movw	r2, r4
    193e:	07 c0       	rjmp	.+14     	; 0x194e <main+0x146e>
    1940:	0c e1       	ldi	r16, 0x1C	; 28
    1942:	60 2e       	mov	r6, r16
    1944:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totallength1*m1LoadPlate){
    1946:	82 e2       	ldi	r24, 0x22	; 34
    1948:	68 16       	cp	r6, r24
    194a:	71 04       	cpc	r7, r1
    194c:	79 f4       	brne	.+30     	; 0x196c <main+0x148c>
    194e:	c2 01       	movw	r24, r4
    1950:	82 19       	sub	r24, r2
    1952:	93 09       	sbc	r25, r3
    1954:	81 5a       	subi	r24, 0xA1	; 161
    1956:	9f 40       	sbci	r25, 0x0F	; 15
    1958:	24 f4       	brge	.+8      	; 0x1962 <main+0x1482>
    195a:	12 e2       	ldi	r17, 0x22	; 34
    195c:	61 2e       	mov	r6, r17
    195e:	71 2c       	mov	r7, r1
    1960:	1a c1       	rjmp	.+564    	; 0x1b96 <main+0x16b6>
    1962:	12 01       	movw	r2, r4
    1964:	07 c0       	rjmp	.+14     	; 0x1974 <main+0x1494>
    1966:	bd e1       	ldi	r27, 0x1D	; 29
    1968:	6b 2e       	mov	r6, r27
    196a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    196c:	b3 e2       	ldi	r27, 0x23	; 35
    196e:	6b 16       	cp	r6, r27
    1970:	71 04       	cpc	r7, r1
    1972:	81 f4       	brne	.+32     	; 0x1994 <main+0x14b4>
    1974:	c2 01       	movw	r24, r4
    1976:	82 19       	sub	r24, r2
    1978:	93 09       	sbc	r25, r3
    197a:	0b 97       	sbiw	r24, 0x0b	; 11
    197c:	24 f0       	brlt	.+8      	; 0x1986 <main+0x14a6>
    197e:	66 24       	eor	r6, r6
    1980:	6a 94       	dec	r6
    1982:	76 2c       	mov	r7, r6
    1984:	1e c1       	rjmp	.+572    	; 0x1bc2 <main+0x16e2>
    1986:	a3 e2       	ldi	r26, 0x23	; 35
    1988:	6a 2e       	mov	r6, r26
    198a:	71 2c       	mov	r7, r1
    198c:	09 c1       	rjmp	.+530    	; 0x1ba0 <main+0x16c0>
    198e:	fe e1       	ldi	r31, 0x1E	; 30
    1990:	6f 2e       	mov	r6, r31
    1992:	71 2c       	mov	r7, r1
				}


				//state actions
						
				switch (state){
    1994:	f3 01       	movw	r30, r6
    1996:	e4 32       	cpi	r30, 0x24	; 36
    1998:	f1 05       	cpc	r31, r1
    199a:	08 f0       	brcs	.+2      	; 0x199e <main+0x14be>
    199c:	12 c1       	rjmp	.+548    	; 0x1bc2 <main+0x16e2>
    199e:	ec 56       	subi	r30, 0x6C	; 108
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	ee 0f       	add	r30, r30
    19a4:	ff 1f       	adc	r31, r31
    19a6:	05 90       	lpm	r0, Z+
    19a8:	f4 91       	lpm	r31, Z+
    19aa:	e0 2d       	mov	r30, r0
    19ac:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    19ae:	80 91 3c 03 	lds	r24, 0x033C
    19b2:	90 91 38 03 	lds	r25, 0x0338
    19b6:	20 91 3a 03 	lds	r18, 0x033A
    19ba:	82 ff       	sbrs	r24, 2
    19bc:	07 c0       	rjmp	.+14     	; 0x19cc <main+0x14ec>
						u_motorByte0.bits_in_motorByte0.m2Dir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    19be:	9f 7e       	andi	r25, 0xEF	; 239
    19c0:	90 93 38 03 	sts	0x0338, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    19c4:	27 7f       	andi	r18, 0xF7	; 247
    19c6:	20 93 3a 03 	sts	0x033A, r18
    19ca:	16 c0       	rjmp	.+44     	; 0x19f8 <main+0x1518>
						m2 = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    19cc:	9f 7d       	andi	r25, 0xDF	; 223
    19ce:	90 93 38 03 	sts	0x0338, r25
						m2 = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    19d2:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    19d4:	28 60       	ori	r18, 0x08	; 8
    19d6:	20 93 3a 03 	sts	0x033A, r18
						if(print0 == 1){
    19da:	2b 89       	ldd	r18, Y+19	; 0x13
    19dc:	3c 89       	ldd	r19, Y+20	; 0x14
    19de:	21 30       	cpi	r18, 0x01	; 1
    19e0:	31 05       	cpc	r19, r1
    19e2:	51 f4       	brne	.+20     	; 0x19f8 <main+0x1518>
							OrangutanLCD::gotoXY(0,1);
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	61 e0       	ldi	r22, 0x01	; 1
    19e8:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	93 e0       	ldi	r25, 0x03	; 3
    19f0:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
    19f4:	1c 8a       	std	Y+20, r1	; 0x14
    19f6:	1b 8a       	std	Y+19, r1	; 0x13
							print0 = 0;
						}
					}
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    19f8:	20 91 3a 03 	lds	r18, 0x033A
    19fc:	32 2f       	mov	r19, r18
    19fe:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    1a00:	c2 01       	movw	r24, r4
    1a02:	68 ec       	ldi	r22, 0xC8	; 200
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	0e 94 82 18 	call	0x3104	; 0x3104 <__divmodhi4>
    1a0a:	84 36       	cpi	r24, 0x64	; 100
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	24 f4       	brge	.+8      	; 0x1a18 <main+0x1538>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1a10:	2c 7f       	andi	r18, 0xFC	; 252
    1a12:	20 93 3a 03 	sts	0x033A, r18
    1a16:	03 c0       	rjmp	.+6      	; 0x1a1e <main+0x153e>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1a18:	32 60       	ori	r19, 0x02	; 2
    1a1a:	30 93 3a 03 	sts	0x033A, r19
					}
					m1 = 1;
					u_motorByte0.bits_in_motorByte0.m1Dir = 1;  //****** dir1 ******
    1a1e:	80 91 38 03 	lds	r24, 0x0338
					u_motorByte0.bits_in_motorByte0.m1Drop = 1;
    1a22:	86 60       	ori	r24, 0x06	; 6
    1a24:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1a28:	80 91 3a 03 	lds	r24, 0x033A
    1a2c:	8b 7f       	andi	r24, 0xFB	; 251
    1a2e:	80 93 3a 03 	sts	0x033A, r24
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1a32:	80 91 3a 03 	lds	r24, 0x033A
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1a36:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1a38:	86 61       	ori	r24, 0x16	; 22
    1a3a:	80 93 3a 03 	sts	0x033A, r24
						m1 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 1;
    1a3e:	80 91 38 03 	lds	r24, 0x0338
    1a42:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.m1Drop = 0;
    1a44:	8b 7f       	andi	r24, 0xFB	; 251
    1a46:	80 93 38 03 	sts	0x0338, r24
				case FIXL:
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ****** dir2 *******
    1a4a:	80 91 38 03 	lds	r24, 0x0338
    1a4e:	80 61       	ori	r24, 0x10	; 16
    1a50:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				case LOWERL1:
						m2 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    1a54:	80 91 38 03 	lds	r24, 0x0338
    1a58:	8f 7d       	andi	r24, 0xDF	; 223
    1a5a:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1a5e:	80 91 3a 03 	lds	r24, 0x033A
    1a62:	88 60       	ori	r24, 0x08	; 8
    1a64:	80 93 3a 03 	sts	0x033A, r24
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1a68:	80 91 3a 03 	lds	r24, 0x033A
    1a6c:	8f 7e       	andi	r24, 0xEF	; 239
    1a6e:	80 93 3a 03 	sts	0x033A, r24
					u_motorByte0.bits_in_motorByte0.m2Drop = 1;
    1a72:	80 91 38 03 	lds	r24, 0x0338
    1a76:	80 62       	ori	r24, 0x20	; 32
    1a78:	80 93 38 03 	sts	0x0338, r24
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    1a7c:	80 91 38 03 	lds	r24, 0x0338
    1a80:	80 61       	ori	r24, 0x10	; 16
    1a82:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m4Drop = 1;
    1a86:	80 91 39 03 	lds	r24, 0x0339
    1a8a:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.m4Dir = 0;  // ******* dir4 *******
    1a8c:	8b 7f       	andi	r24, 0xFB	; 251
    1a8e:	80 93 39 03 	sts	0x0339, r24
						OrangutanLCD::print("Clean 2");
						print15 = 0;
					}*/
				case B2START1:
					m4 = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1a92:	80 91 3b 03 	lds	r24, 0x033B
    1a96:	81 60       	ori	r24, 0x01	; 1
    1a98:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1a9c:	80 91 3a 03 	lds	r24, 0x033A
    1aa0:	8f 77       	andi	r24, 0x7F	; 127
    1aa2:	80 93 3a 03 	sts	0x033A, r24
				case CLEAN2_1:
					m2 = 1;
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;  // ******* dir2 *******
    1aa6:	80 91 38 03 	lds	r24, 0x0338
    1aaa:	8f 7e       	andi	r24, 0xEF	; 239
    1aac:	80 93 38 03 	sts	0x0338, r24
				case B2STOP1:
					m2 = 0;
					m4 = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1ab0:	80 91 3b 03 	lds	r24, 0x033B
    1ab4:	8e 7f       	andi	r24, 0xFE	; 254
    1ab6:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1aba:	80 91 3a 03 	lds	r24, 0x033A
    1abe:	80 68       	ori	r24, 0x80	; 128
    1ac0:	80 93 3a 03 	sts	0x033A, r24
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    1ac4:	80 91 38 03 	lds	r24, 0x0338
    1ac8:	80 61       	ori	r24, 0x10	; 16
    1aca:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				case B2START2:
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m4Dir = 0;  // ******* dir4 *******
    1ace:	80 91 39 03 	lds	r24, 0x0339
    1ad2:	8b 7f       	andi	r24, 0xFB	; 251
    1ad4:	80 93 39 03 	sts	0x0339, r24
					m4 = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1ad8:	80 91 3b 03 	lds	r24, 0x033B
    1adc:	81 60       	ori	r24, 0x01	; 1
    1ade:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1ae2:	80 91 3a 03 	lds	r24, 0x033A
    1ae6:	8f 77       	andi	r24, 0x7F	; 127
    1ae8:	80 93 3a 03 	sts	0x033A, r24
				case CLEAN2_3:
					m2 = 1;
				case B2STOP2:
					m4 = 0;
					m2 = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1aec:	80 91 3b 03 	lds	r24, 0x033B
    1af0:	8e 7f       	andi	r24, 0xFE	; 254
    1af2:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1af6:	80 91 3a 03 	lds	r24, 0x033A
    1afa:	80 68       	ori	r24, 0x80	; 128
    1afc:	80 93 3a 03 	sts	0x033A, r24
					u_motorByte1.bits_in_motorByte1.m4Drop = 0;
    1b00:	80 91 39 03 	lds	r24, 0x0339
    1b04:	87 7f       	andi	r24, 0xF7	; 247
    1b06:	80 93 39 03 	sts	0x0339, r24
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    1b0a:	80 91 38 03 	lds	r24, 0x0338
    1b0e:	80 61       	ori	r24, 0x10	; 16
    1b10:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
					u_motorByte1.bits_in_motorByte1.m3Drop = 0;
    1b14:	80 91 39 03 	lds	r24, 0x0339
    1b18:	8e 7f       	andi	r24, 0xFE	; 254
    1b1a:	80 93 39 03 	sts	0x0339, r24
				case D1START:
					m2 = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1b1e:	80 91 3b 03 	lds	r24, 0x033B
    1b22:	87 7f       	andi	r24, 0xF7	; 247
    1b24:	80 93 3b 03 	sts	0x033B, r24
						OrangutanLCD::clear();
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
				case DRY1:
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;  // ******* dir2 *******
    1b28:	80 91 38 03 	lds	r24, 0x0338
    1b2c:	8f 7e       	andi	r24, 0xEF	; 239
    1b2e:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1b32:	80 91 3b 03 	lds	r24, 0x033B
    1b36:	88 60       	ori	r24, 0x08	; 8
    1b38:	80 93 3b 03 	sts	0x033B, r24
				case D2START:
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m5Drop = 1;
    1b3c:	80 91 39 03 	lds	r24, 0x0339
    1b40:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.m5Dir = 0;
    1b42:	8f 7d       	andi	r24, 0xDF	; 223
    1b44:	80 93 39 03 	sts	0x0339, r24
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1b48:	80 91 3b 03 	lds	r24, 0x033B
    1b4c:	8d 7f       	andi	r24, 0xFD	; 253
    1b4e:	80 93 3b 03 	sts	0x033B, r24
				case DRY2:
					m2 = 1;
				case D2STOP:
					m5 = 0;
						u_motorByte1.bits_in_motorByte1.m5Drop = 0;
    1b52:	80 91 39 03 	lds	r24, 0x0339
    1b56:	8f 7b       	andi	r24, 0xBF	; 191
    1b58:	80 93 39 03 	sts	0x0339, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1b5c:	80 91 3b 03 	lds	r24, 0x033B
    1b60:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1b62:	8b 7f       	andi	r24, 0xFB	; 251
    1b64:	80 93 3b 03 	sts	0x033B, r24
				case RAISEL2:
					m2 = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1b68:	80 91 3a 03 	lds	r24, 0x033A
    1b6c:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1b6e:	80 61       	ori	r24, 0x10	; 16
    1b70:	80 93 3a 03 	sts	0x033A, r24
				case FIXH:
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;
    1b74:	80 91 38 03 	lds	r24, 0x0338
    1b78:	8f 7e       	andi	r24, 0xEF	; 239
    1b7a:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				case LOWERL3:
					m2 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    1b7e:	80 91 38 03 	lds	r24, 0x0338
    1b82:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.m1Drop = 1;
    1b84:	84 60       	ori	r24, 0x04	; 4
    1b86:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1b8a:	80 91 3a 03 	lds	r24, 0x033A
    1b8e:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1b90:	8f 7e       	andi	r24, 0xEF	; 239
    1b92:	80 93 3a 03 	sts	0x033A, r24
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.m1Dir = 0;
    1b96:	80 91 38 03 	lds	r24, 0x0338
    1b9a:	8d 7f       	andi	r24, 0xFD	; 253
    1b9c:	80 93 38 03 	sts	0x0338, r24
					m1 = 1;
				case END:
					m1 = 0;
					u_motorByte0.bits_in_motorByte0.m1Drop = 0;
    1ba0:	80 91 38 03 	lds	r24, 0x0338
    1ba4:	8b 7f       	andi	r24, 0xFB	; 251
    1ba6:	80 93 38 03 	sts	0x0338, r24
					if(print35 == 1){
    1baa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bac:	98 89       	ldd	r25, Y+16	; 0x10
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	31 f4       	brne	.+12     	; 0x1bbe <main+0x16de>
						OrangutanLCD::clear();
    1bb2:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1bb6:	8e e0       	ldi	r24, 0x0E	; 14
    1bb8:	93 e0       	ldi	r25, 0x03	; 3
    1bba:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
    1bbe:	18 8a       	std	Y+16, r1	; 0x10
    1bc0:	1f 86       	std	Y+15, r1	; 0x0f
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, m1, m2, m3, m4, m5, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
    1bc2:	ad b7       	in	r26, 0x3d	; 61
    1bc4:	be b7       	in	r27, 0x3e	; 62
    1bc6:	52 97       	sbiw	r26, 0x12	; 18
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	be bf       	out	0x3e, r27	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	ad bf       	out	0x3d, r26	; 61
    1bd2:	ed b7       	in	r30, 0x3d	; 61
    1bd4:	fe b7       	in	r31, 0x3e	; 62
    1bd6:	31 96       	adiw	r30, 0x01	; 1
    1bd8:	82 e0       	ldi	r24, 0x02	; 2
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	12 96       	adiw	r26, 0x02	; 2
    1bde:	9c 93       	st	X, r25
    1be0:	8e 93       	st	-X, r24
    1be2:	11 97       	sbiw	r26, 0x01	; 1
    1be4:	93 83       	std	Z+3, r25	; 0x03
    1be6:	82 83       	std	Z+2, r24	; 0x02
    1be8:	95 83       	std	Z+5, r25	; 0x05
    1bea:	84 83       	std	Z+4, r24	; 0x04
    1bec:	97 83       	std	Z+7, r25	; 0x07
    1bee:	86 83       	std	Z+6, r24	; 0x06
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	91 87       	std	Z+9, r25	; 0x09
    1bf6:	80 87       	std	Z+8, r24	; 0x08
    1bf8:	93 87       	std	Z+11, r25	; 0x0b
    1bfa:	82 87       	std	Z+10, r24	; 0x0a
    1bfc:	95 87       	std	Z+13, r25	; 0x0d
    1bfe:	84 87       	std	Z+12, r24	; 0x0c
    1c00:	97 87       	std	Z+15, r25	; 0x0f
    1c02:	86 87       	std	Z+14, r24	; 0x0e
    1c04:	91 8b       	std	Z+17, r25	; 0x11
    1c06:	80 8b       	std	Z+16, r24	; 0x10
    1c08:	c2 01       	movw	r24, r4
    1c0a:	b1 01       	movw	r22, r2
    1c0c:	49 85       	ldd	r20, Y+9	; 0x09
    1c0e:	5a 85       	ldd	r21, Y+10	; 0x0a
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	00 e0       	ldi	r16, 0x00	; 0
    1c16:	10 e0       	ldi	r17, 0x00	; 0
    1c18:	ee 24       	eor	r14, r14
    1c1a:	ff 24       	eor	r15, r15
    1c1c:	cc 24       	eor	r12, r12
    1c1e:	dd 24       	eor	r13, r13
    1c20:	aa 24       	eor	r10, r10
    1c22:	bb 24       	eor	r11, r11
    1c24:	e2 e0       	ldi	r30, 0x02	; 2
    1c26:	8e 2e       	mov	r8, r30
    1c28:	91 2c       	mov	r9, r1
    1c2a:	0e 94 bb 01 	call	0x376	; 0x376 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    1c2e:	2d b7       	in	r18, 0x3d	; 61
    1c30:	3e b7       	in	r19, 0x3e	; 62
    1c32:	2e 5e       	subi	r18, 0xEE	; 238
    1c34:	3f 4f       	sbci	r19, 0xFF	; 255
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	3e bf       	out	0x3e, r19	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	2d bf       	out	0x3d, r18	; 61
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("SECOND B");
			while(state != -1)
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	63 16       	cp	r6, r19
    1c4c:	3f ef       	ldi	r19, 0xFF	; 255
    1c4e:	73 06       	cpc	r7, r19
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <main+0x1774>
    1c52:	1b c4       	rjmp	.+2102   	; 0x248a <main+0x1faa>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, m1, m2, m3, m4, m5, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);

				counter ++;
    1c54:	08 94       	sec
    1c56:	41 1c       	adc	r4, r1
    1c58:	51 1c       	adc	r5, r1
    1c5a:	b3 cc       	rjmp	.-1690   	; 0x15c2 <main+0x10e2>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
    1c62:	88 23       	and	r24, r24
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <main+0x1788>
    1c66:	11 c4       	rjmp	.+2082   	; 0x248a <main+0x1faa>
			OrangutanLCD::gotoXY(7,0);
    1c68:	87 e0       	ldi	r24, 0x07	; 7
    1c6a:	60 e0       	ldi	r22, 0x00	; 0
    1c6c:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("BOTH B");
    1c70:	84 e2       	ldi	r24, 0x24	; 36
    1c72:	93 e0       	ldi	r25, 0x03	; 3
    1c74:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9a 8b       	std	Y+18, r25	; 0x12
    1c7e:	89 8b       	std	Y+17, r24	; 0x11
    1c80:	9e 87       	std	Y+14, r25	; 0x0e
    1c82:	8d 87       	std	Y+13, r24	; 0x0d
    1c84:	66 24       	eor	r6, r6
    1c86:	77 24       	eor	r7, r7
    1c88:	44 24       	eor	r4, r4
    1c8a:	55 24       	eor	r5, r5
    1c8c:	22 24       	eor	r2, r2
    1c8e:	33 24       	eor	r3, r3
    1c90:	18 86       	std	Y+8, r1	; 0x08
    1c92:	1f 82       	std	Y+7, r1	; 0x07
			while(state != -1)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1c94:	84 e4       	ldi	r24, 0x44	; 68
    1c96:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1ca0:	85 e4       	ldi	r24, 0x45	; 69
    1ca2:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1ca6:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_Z11i2c_readAckv>
    1caa:	80 93 3c 03 	sts	0x033C, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1cae:	0e 94 fd 12 	call	0x25fa	; 0x25fa <_Z11i2c_readNakv>
    1cb2:	80 93 3d 03 	sts	0x033D, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1cb6:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_Z8i2c_stopv>
				
				if(state != INIT){
    1cba:	61 14       	cp	r6, r1
    1cbc:	71 04       	cpc	r7, r1
    1cbe:	79 f0       	breq	.+30     	; 0x1cde <main+0x17fe>
					OrangutanLCD::gotoXY(0,1);
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	61 e0       	ldi	r22, 0x01	; 1
    1cc4:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1cc8:	89 ef       	ldi	r24, 0xF9	; 249
    1cca:	92 e0       	ldi	r25, 0x02	; 2
    1ccc:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
    1cd0:	b3 01       	movw	r22, r6
    1cd2:	88 27       	eor	r24, r24
    1cd4:	77 fd       	sbrc	r23, 7
    1cd6:	80 95       	com	r24
    1cd8:	98 2f       	mov	r25, r24
    1cda:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_ZN12OrangutanLCD5printEl>
						button = 0;
						stateButton = 0;
					}
				}*/

				button = button_debounce(counter, &counterRefPush, &counterRefRel, &stateButton);
    1cde:	c2 01       	movw	r24, r4
    1ce0:	be 01       	movw	r22, r28
    1ce2:	6f 5f       	subi	r22, 0xFF	; 255
    1ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce6:	ae 01       	movw	r20, r28
    1ce8:	4d 5f       	subi	r20, 0xFD	; 253
    1cea:	5f 4f       	sbci	r21, 0xFF	; 255
    1cec:	9e 01       	movw	r18, r28
    1cee:	2b 5f       	subi	r18, 0xFB	; 251
    1cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPiS_S_>

				//state conversions
	
				if(state == INIT && button == 0){
    1cf6:	61 14       	cp	r6, r1
    1cf8:	71 04       	cpc	r7, r1
    1cfa:	29 f4       	brne	.+10     	; 0x1d06 <main+0x1826>
    1cfc:	89 2b       	or	r24, r25
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <main+0x1822>
    1d00:	43 c0       	rjmp	.+134    	; 0x1d88 <main+0x18a8>
    1d02:	12 01       	movw	r2, r4
    1d04:	04 c0       	rjmp	.+8      	; 0x1d0e <main+0x182e>
					button = 1;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totallength1*m1LoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    1d06:	91 e0       	ldi	r25, 0x01	; 1
    1d08:	69 16       	cp	r6, r25
    1d0a:	71 04       	cpc	r7, r1
    1d0c:	49 f4       	brne	.+18     	; 0x1d20 <main+0x1840>
    1d0e:	c2 01       	movw	r24, r4
    1d10:	82 19       	sub	r24, r2
    1d12:	93 09       	sbc	r25, r3
    1d14:	81 5a       	subi	r24, 0xA1	; 161
    1d16:	9f 40       	sbci	r25, 0x0F	; 15
    1d18:	0c f4       	brge	.+2      	; 0x1d1c <main+0x183c>
    1d1a:	43 c0       	rjmp	.+134    	; 0x1da2 <main+0x18c2>
    1d1c:	12 01       	movw	r2, r4
    1d1e:	04 c0       	rjmp	.+8      	; 0x1d28 <main+0x1848>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    1d20:	b2 e0       	ldi	r27, 0x02	; 2
    1d22:	6b 16       	cp	r6, r27
    1d24:	71 04       	cpc	r7, r1
    1d26:	49 f4       	brne	.+18     	; 0x1d3a <main+0x185a>
    1d28:	c2 01       	movw	r24, r4
    1d2a:	82 19       	sub	r24, r2
    1d2c:	93 09       	sbc	r25, r3
    1d2e:	85 36       	cpi	r24, 0x65	; 101
    1d30:	91 05       	cpc	r25, r1
    1d32:	0c f4       	brge	.+2      	; 0x1d36 <main+0x1856>
    1d34:	46 c0       	rjmp	.+140    	; 0x1dc2 <main+0x18e2>
    1d36:	12 01       	movw	r2, r4
    1d38:	04 c0       	rjmp	.+8      	; 0x1d42 <main+0x1862>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totallength2*m2HomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1d3a:	23 e0       	ldi	r18, 0x03	; 3
    1d3c:	62 16       	cp	r6, r18
    1d3e:	71 04       	cpc	r7, r1
    1d40:	49 f4       	brne	.+18     	; 0x1d54 <main+0x1874>
    1d42:	c2 01       	movw	r24, r4
    1d44:	82 19       	sub	r24, r2
    1d46:	93 09       	sbc	r25, r3
    1d48:	81 5a       	subi	r24, 0xA1	; 161
    1d4a:	9f 40       	sbci	r25, 0x0F	; 15
    1d4c:	0c f4       	brge	.+2      	; 0x1d50 <main+0x1870>
    1d4e:	49 c0       	rjmp	.+146    	; 0x1de2 <main+0x1902>
    1d50:	12 01       	movw	r2, r4
    1d52:	04 c0       	rjmp	.+8      	; 0x1d5c <main+0x187c>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1d54:	84 e0       	ldi	r24, 0x04	; 4
    1d56:	68 16       	cp	r6, r24
    1d58:	71 04       	cpc	r7, r1
    1d5a:	49 f4       	brne	.+18     	; 0x1d6e <main+0x188e>
    1d5c:	c2 01       	movw	r24, r4
    1d5e:	82 19       	sub	r24, r2
    1d60:	93 09       	sbc	r25, r3
    1d62:	89 5e       	subi	r24, 0xE9	; 233
    1d64:	93 40       	sbci	r25, 0x03	; 3
    1d66:	0c f4       	brge	.+2      	; 0x1d6a <main+0x188a>
    1d68:	4c c0       	rjmp	.+152    	; 0x1e02 <main+0x1922>
    1d6a:	12 01       	movw	r2, r4
    1d6c:	04 c0       	rjmp	.+8      	; 0x1d76 <main+0x1896>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    1d6e:	b5 e0       	ldi	r27, 0x05	; 5
    1d70:	6b 16       	cp	r6, r27
    1d72:	71 04       	cpc	r7, r1
    1d74:	49 f4       	brne	.+18     	; 0x1d88 <main+0x18a8>
    1d76:	c2 01       	movw	r24, r4
    1d78:	82 19       	sub	r24, r2
    1d7a:	93 09       	sbc	r25, r3
    1d7c:	85 36       	cpi	r24, 0x65	; 101
    1d7e:	91 05       	cpc	r25, r1
    1d80:	0c f4       	brge	.+2      	; 0x1d84 <main+0x18a4>
    1d82:	4d c0       	rjmp	.+154    	; 0x1e1e <main+0x193e>
    1d84:	12 01       	movw	r2, r4
    1d86:	04 c0       	rjmp	.+8      	; 0x1d90 <main+0x18b0>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totallength2*m2Brush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1d88:	26 e0       	ldi	r18, 0x06	; 6
    1d8a:	62 16       	cp	r6, r18
    1d8c:	71 04       	cpc	r7, r1
    1d8e:	61 f4       	brne	.+24     	; 0x1da8 <main+0x18c8>
    1d90:	c2 01       	movw	r24, r4
    1d92:	82 19       	sub	r24, r2
    1d94:	93 09       	sbc	r25, r3
    1d96:	81 5a       	subi	r24, 0xA1	; 161
    1d98:	9f 40       	sbci	r25, 0x0F	; 15
    1d9a:	0c f4       	brge	.+2      	; 0x1d9e <main+0x18be>
    1d9c:	50 c0       	rjmp	.+160    	; 0x1e3e <main+0x195e>
    1d9e:	12 01       	movw	r2, r4
    1da0:	07 c0       	rjmp	.+14     	; 0x1db0 <main+0x18d0>
    1da2:	91 e0       	ldi	r25, 0x01	; 1
    1da4:	69 2e       	mov	r6, r25
    1da6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    1da8:	87 e0       	ldi	r24, 0x07	; 7
    1daa:	68 16       	cp	r6, r24
    1dac:	71 04       	cpc	r7, r1
    1dae:	61 f4       	brne	.+24     	; 0x1dc8 <main+0x18e8>
    1db0:	c2 01       	movw	r24, r4
    1db2:	82 19       	sub	r24, r2
    1db4:	93 09       	sbc	r25, r3
    1db6:	85 36       	cpi	r24, 0x65	; 101
    1db8:	91 05       	cpc	r25, r1
    1dba:	0c f4       	brge	.+2      	; 0x1dbe <main+0x18de>
    1dbc:	50 c0       	rjmp	.+160    	; 0x1e5e <main+0x197e>
    1dbe:	12 01       	movw	r2, r4
    1dc0:	07 c0       	rjmp	.+14     	; 0x1dd0 <main+0x18f0>
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	68 2e       	mov	r6, r24
    1dc6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    1dc8:	98 e0       	ldi	r25, 0x08	; 8
    1dca:	69 16       	cp	r6, r25
    1dcc:	71 04       	cpc	r7, r1
    1dce:	61 f4       	brne	.+24     	; 0x1de8 <main+0x1908>
    1dd0:	c2 01       	movw	r24, r4
    1dd2:	82 19       	sub	r24, r2
    1dd4:	93 09       	sbc	r25, r3
    1dd6:	85 36       	cpi	r24, 0x65	; 101
    1dd8:	91 05       	cpc	r25, r1
    1dda:	0c f4       	brge	.+2      	; 0x1dde <main+0x18fe>
    1ddc:	4e c0       	rjmp	.+156    	; 0x1e7a <main+0x199a>
    1dde:	12 01       	movw	r2, r4
    1de0:	07 c0       	rjmp	.+14     	; 0x1df0 <main+0x1910>
    1de2:	03 e0       	ldi	r16, 0x03	; 3
    1de4:	60 2e       	mov	r6, r16
    1de6:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totallength2*m2HalfPlate){
    1de8:	a9 e0       	ldi	r26, 0x09	; 9
    1dea:	6a 16       	cp	r6, r26
    1dec:	71 04       	cpc	r7, r1
    1dee:	61 f4       	brne	.+24     	; 0x1e08 <main+0x1928>
    1df0:	c2 01       	movw	r24, r4
    1df2:	82 19       	sub	r24, r2
    1df4:	93 09       	sbc	r25, r3
    1df6:	81 5a       	subi	r24, 0xA1	; 161
    1df8:	9f 40       	sbci	r25, 0x0F	; 15
    1dfa:	0c f4       	brge	.+2      	; 0x1dfe <main+0x191e>
    1dfc:	4e c0       	rjmp	.+156    	; 0x1e9a <main+0x19ba>
    1dfe:	12 01       	movw	r2, r4
    1e00:	07 c0       	rjmp	.+14     	; 0x1e10 <main+0x1930>
    1e02:	14 e0       	ldi	r17, 0x04	; 4
    1e04:	61 2e       	mov	r6, r17
    1e06:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    1e08:	2a e0       	ldi	r18, 0x0A	; 10
    1e0a:	62 16       	cp	r6, r18
    1e0c:	71 04       	cpc	r7, r1
    1e0e:	51 f4       	brne	.+20     	; 0x1e24 <main+0x1944>
    1e10:	c2 01       	movw	r24, r4
    1e12:	82 19       	sub	r24, r2
    1e14:	93 09       	sbc	r25, r3
    1e16:	85 36       	cpi	r24, 0x65	; 101
    1e18:	91 05       	cpc	r25, r1
    1e1a:	44 f4       	brge	.+16     	; 0x1e2c <main+0x194c>
    1e1c:	4e c0       	rjmp	.+156    	; 0x1eba <main+0x19da>
    1e1e:	b5 e0       	ldi	r27, 0x05	; 5
    1e20:	6b 2e       	mov	r6, r27
    1e22:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totallength2*m2HalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1e24:	3b e0       	ldi	r19, 0x0B	; 11
    1e26:	63 16       	cp	r6, r19
    1e28:	71 04       	cpc	r7, r1
    1e2a:	61 f4       	brne	.+24     	; 0x1e44 <main+0x1964>
    1e2c:	c2 01       	movw	r24, r4
    1e2e:	82 19       	sub	r24, r2
    1e30:	93 09       	sbc	r25, r3
    1e32:	81 5a       	subi	r24, 0xA1	; 161
    1e34:	9f 40       	sbci	r25, 0x0F	; 15
    1e36:	0c f4       	brge	.+2      	; 0x1e3a <main+0x195a>
    1e38:	50 c0       	rjmp	.+160    	; 0x1eda <main+0x19fa>
    1e3a:	12 01       	movw	r2, r4
    1e3c:	07 c0       	rjmp	.+14     	; 0x1e4c <main+0x196c>
    1e3e:	a6 e0       	ldi	r26, 0x06	; 6
    1e40:	6a 2e       	mov	r6, r26
    1e42:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    1e44:	bc e0       	ldi	r27, 0x0C	; 12
    1e46:	6b 16       	cp	r6, r27
    1e48:	71 04       	cpc	r7, r1
    1e4a:	61 f4       	brne	.+24     	; 0x1e64 <main+0x1984>
    1e4c:	c2 01       	movw	r24, r4
    1e4e:	82 19       	sub	r24, r2
    1e50:	93 09       	sbc	r25, r3
    1e52:	85 36       	cpi	r24, 0x65	; 101
    1e54:	91 05       	cpc	r25, r1
    1e56:	0c f4       	brge	.+2      	; 0x1e5a <main+0x197a>
    1e58:	50 c0       	rjmp	.+160    	; 0x1efa <main+0x1a1a>
    1e5a:	12 01       	movw	r2, r4
    1e5c:	07 c0       	rjmp	.+14     	; 0x1e6c <main+0x198c>
    1e5e:	f7 e0       	ldi	r31, 0x07	; 7
    1e60:	6f 2e       	mov	r6, r31
    1e62:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totallength2*m2HalfPlate){
    1e64:	2d e0       	ldi	r18, 0x0D	; 13
    1e66:	62 16       	cp	r6, r18
    1e68:	71 04       	cpc	r7, r1
    1e6a:	51 f4       	brne	.+20     	; 0x1e80 <main+0x19a0>
    1e6c:	c2 01       	movw	r24, r4
    1e6e:	82 19       	sub	r24, r2
    1e70:	93 09       	sbc	r25, r3
    1e72:	81 5a       	subi	r24, 0xA1	; 161
    1e74:	9f 40       	sbci	r25, 0x0F	; 15
    1e76:	44 f4       	brge	.+16     	; 0x1e88 <main+0x19a8>
    1e78:	50 c0       	rjmp	.+160    	; 0x1f1a <main+0x1a3a>
    1e7a:	e8 e0       	ldi	r30, 0x08	; 8
    1e7c:	6e 2e       	mov	r6, r30
    1e7e:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
				}
				if(state == B1STOP2 && counter - counterRef > totallength2*m2Brush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    1e80:	8e e0       	ldi	r24, 0x0E	; 14
    1e82:	68 16       	cp	r6, r24
    1e84:	71 04       	cpc	r7, r1
    1e86:	61 f4       	brne	.+24     	; 0x1ea0 <main+0x19c0>
    1e88:	c2 01       	movw	r24, r4
    1e8a:	82 19       	sub	r24, r2
    1e8c:	93 09       	sbc	r25, r3
    1e8e:	81 5a       	subi	r24, 0xA1	; 161
    1e90:	9f 40       	sbci	r25, 0x0F	; 15
    1e92:	0c f4       	brge	.+2      	; 0x1e96 <main+0x19b6>
    1e94:	52 c0       	rjmp	.+164    	; 0x1f3a <main+0x1a5a>
    1e96:	12 01       	movw	r2, r4
    1e98:	07 c0       	rjmp	.+14     	; 0x1ea8 <main+0x19c8>
    1e9a:	79 e0       	ldi	r23, 0x09	; 9
    1e9c:	67 2e       	mov	r6, r23
    1e9e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    1ea0:	bf e0       	ldi	r27, 0x0F	; 15
    1ea2:	6b 16       	cp	r6, r27
    1ea4:	71 04       	cpc	r7, r1
    1ea6:	61 f4       	brne	.+24     	; 0x1ec0 <main+0x19e0>
    1ea8:	c2 01       	movw	r24, r4
    1eaa:	82 19       	sub	r24, r2
    1eac:	93 09       	sbc	r25, r3
    1eae:	85 36       	cpi	r24, 0x65	; 101
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	0c f4       	brge	.+2      	; 0x1eb6 <main+0x19d6>
    1eb4:	52 c0       	rjmp	.+164    	; 0x1f5a <main+0x1a7a>
    1eb6:	12 01       	movw	r2, r4
    1eb8:	07 c0       	rjmp	.+14     	; 0x1ec8 <main+0x19e8>
    1eba:	6a e0       	ldi	r22, 0x0A	; 10
    1ebc:	66 2e       	mov	r6, r22
    1ebe:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    1ec0:	20 e1       	ldi	r18, 0x10	; 16
    1ec2:	62 16       	cp	r6, r18
    1ec4:	71 04       	cpc	r7, r1
    1ec6:	61 f4       	brne	.+24     	; 0x1ee0 <main+0x1a00>
    1ec8:	c2 01       	movw	r24, r4
    1eca:	82 19       	sub	r24, r2
    1ecc:	93 09       	sbc	r25, r3
    1ece:	85 36       	cpi	r24, 0x65	; 101
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	0c f4       	brge	.+2      	; 0x1ed6 <main+0x19f6>
    1ed4:	52 c0       	rjmp	.+164    	; 0x1f7a <main+0x1a9a>
    1ed6:	12 01       	movw	r2, r4
    1ed8:	07 c0       	rjmp	.+14     	; 0x1ee8 <main+0x1a08>
    1eda:	5b e0       	ldi	r21, 0x0B	; 11
    1edc:	65 2e       	mov	r6, r21
    1ede:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totallength2*m2HalfPlate){
    1ee0:	31 e1       	ldi	r19, 0x11	; 17
    1ee2:	63 16       	cp	r6, r19
    1ee4:	71 04       	cpc	r7, r1
    1ee6:	61 f4       	brne	.+24     	; 0x1f00 <main+0x1a20>
    1ee8:	c2 01       	movw	r24, r4
    1eea:	82 19       	sub	r24, r2
    1eec:	93 09       	sbc	r25, r3
    1eee:	81 5a       	subi	r24, 0xA1	; 161
    1ef0:	9f 40       	sbci	r25, 0x0F	; 15
    1ef2:	0c f4       	brge	.+2      	; 0x1ef6 <main+0x1a16>
    1ef4:	52 c0       	rjmp	.+164    	; 0x1f9a <main+0x1aba>
    1ef6:	12 01       	movw	r2, r4
    1ef8:	07 c0       	rjmp	.+14     	; 0x1f08 <main+0x1a28>
    1efa:	4c e0       	ldi	r20, 0x0C	; 12
    1efc:	64 2e       	mov	r6, r20
    1efe:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    1f00:	b2 e1       	ldi	r27, 0x12	; 18
    1f02:	6b 16       	cp	r6, r27
    1f04:	71 04       	cpc	r7, r1
    1f06:	61 f4       	brne	.+24     	; 0x1f20 <main+0x1a40>
    1f08:	c2 01       	movw	r24, r4
    1f0a:	82 19       	sub	r24, r2
    1f0c:	93 09       	sbc	r25, r3
    1f0e:	85 36       	cpi	r24, 0x65	; 101
    1f10:	91 05       	cpc	r25, r1
    1f12:	0c f4       	brge	.+2      	; 0x1f16 <main+0x1a36>
    1f14:	52 c0       	rjmp	.+164    	; 0x1fba <main+0x1ada>
    1f16:	12 01       	movw	r2, r4
    1f18:	07 c0       	rjmp	.+14     	; 0x1f28 <main+0x1a48>
    1f1a:	3d e0       	ldi	r19, 0x0D	; 13
    1f1c:	63 2e       	mov	r6, r19
    1f1e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totallength2*m2HalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    1f20:	23 e1       	ldi	r18, 0x13	; 19
    1f22:	62 16       	cp	r6, r18
    1f24:	71 04       	cpc	r7, r1
    1f26:	61 f4       	brne	.+24     	; 0x1f40 <main+0x1a60>
    1f28:	c2 01       	movw	r24, r4
    1f2a:	82 19       	sub	r24, r2
    1f2c:	93 09       	sbc	r25, r3
    1f2e:	81 5a       	subi	r24, 0xA1	; 161
    1f30:	9f 40       	sbci	r25, 0x0F	; 15
    1f32:	0c f4       	brge	.+2      	; 0x1f36 <main+0x1a56>
    1f34:	52 c0       	rjmp	.+164    	; 0x1fda <main+0x1afa>
    1f36:	12 01       	movw	r2, r4
    1f38:	07 c0       	rjmp	.+14     	; 0x1f48 <main+0x1a68>
    1f3a:	2e e0       	ldi	r18, 0x0E	; 14
    1f3c:	62 2e       	mov	r6, r18
    1f3e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    1f40:	84 e1       	ldi	r24, 0x14	; 20
    1f42:	68 16       	cp	r6, r24
    1f44:	71 04       	cpc	r7, r1
    1f46:	61 f4       	brne	.+24     	; 0x1f60 <main+0x1a80>
    1f48:	c2 01       	movw	r24, r4
    1f4a:	82 19       	sub	r24, r2
    1f4c:	93 09       	sbc	r25, r3
    1f4e:	85 36       	cpi	r24, 0x65	; 101
    1f50:	91 05       	cpc	r25, r1
    1f52:	0c f4       	brge	.+2      	; 0x1f56 <main+0x1a76>
    1f54:	50 c0       	rjmp	.+160    	; 0x1ff6 <main+0x1b16>
    1f56:	12 01       	movw	r2, r4
    1f58:	07 c0       	rjmp	.+14     	; 0x1f68 <main+0x1a88>
    1f5a:	9f e0       	ldi	r25, 0x0F	; 15
    1f5c:	69 2e       	mov	r6, r25
    1f5e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totallength2*m2HalfPlate){
    1f60:	95 e1       	ldi	r25, 0x15	; 21
    1f62:	69 16       	cp	r6, r25
    1f64:	71 04       	cpc	r7, r1
    1f66:	61 f4       	brne	.+24     	; 0x1f80 <main+0x1aa0>
    1f68:	c2 01       	movw	r24, r4
    1f6a:	82 19       	sub	r24, r2
    1f6c:	93 09       	sbc	r25, r3
    1f6e:	81 5a       	subi	r24, 0xA1	; 161
    1f70:	9f 40       	sbci	r25, 0x0F	; 15
    1f72:	0c f4       	brge	.+2      	; 0x1f76 <main+0x1a96>
    1f74:	51 c0       	rjmp	.+162    	; 0x2018 <main+0x1b38>
    1f76:	12 01       	movw	r2, r4
    1f78:	07 c0       	rjmp	.+14     	; 0x1f88 <main+0x1aa8>
    1f7a:	80 e1       	ldi	r24, 0x10	; 16
    1f7c:	68 2e       	mov	r6, r24
    1f7e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    1f80:	b6 e1       	ldi	r27, 0x16	; 22
    1f82:	6b 16       	cp	r6, r27
    1f84:	71 04       	cpc	r7, r1
    1f86:	61 f4       	brne	.+24     	; 0x1fa0 <main+0x1ac0>
    1f88:	c2 01       	movw	r24, r4
    1f8a:	82 19       	sub	r24, r2
    1f8c:	93 09       	sbc	r25, r3
    1f8e:	85 36       	cpi	r24, 0x65	; 101
    1f90:	91 05       	cpc	r25, r1
    1f92:	0c f4       	brge	.+2      	; 0x1f96 <main+0x1ab6>
    1f94:	53 c0       	rjmp	.+166    	; 0x203c <main+0x1b5c>
    1f96:	12 01       	movw	r2, r4
    1f98:	07 c0       	rjmp	.+14     	; 0x1fa8 <main+0x1ac8>
    1f9a:	01 e1       	ldi	r16, 0x11	; 17
    1f9c:	60 2e       	mov	r6, r16
    1f9e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totallength2*m2Dry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1fa0:	27 e1       	ldi	r18, 0x17	; 23
    1fa2:	62 16       	cp	r6, r18
    1fa4:	71 04       	cpc	r7, r1
    1fa6:	61 f4       	brne	.+24     	; 0x1fc0 <main+0x1ae0>
    1fa8:	c2 01       	movw	r24, r4
    1faa:	82 19       	sub	r24, r2
    1fac:	93 09       	sbc	r25, r3
    1fae:	81 5a       	subi	r24, 0xA1	; 161
    1fb0:	9f 40       	sbci	r25, 0x0F	; 15
    1fb2:	0c f4       	brge	.+2      	; 0x1fb6 <main+0x1ad6>
    1fb4:	53 c0       	rjmp	.+166    	; 0x205c <main+0x1b7c>
    1fb6:	12 01       	movw	r2, r4
    1fb8:	07 c0       	rjmp	.+14     	; 0x1fc8 <main+0x1ae8>
    1fba:	12 e1       	ldi	r17, 0x12	; 18
    1fbc:	61 2e       	mov	r6, r17
    1fbe:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    1fc0:	88 e1       	ldi	r24, 0x18	; 24
    1fc2:	68 16       	cp	r6, r24
    1fc4:	71 04       	cpc	r7, r1
    1fc6:	61 f4       	brne	.+24     	; 0x1fe0 <main+0x1b00>
    1fc8:	c2 01       	movw	r24, r4
    1fca:	82 19       	sub	r24, r2
    1fcc:	93 09       	sbc	r25, r3
    1fce:	85 36       	cpi	r24, 0x65	; 101
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	0c f4       	brge	.+2      	; 0x1fd6 <main+0x1af6>
    1fd4:	51 c0       	rjmp	.+162    	; 0x2078 <main+0x1b98>
    1fd6:	12 01       	movw	r2, r4
    1fd8:	07 c0       	rjmp	.+14     	; 0x1fe8 <main+0x1b08>
    1fda:	b3 e1       	ldi	r27, 0x13	; 19
    1fdc:	6b 2e       	mov	r6, r27
    1fde:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totallength2*m2WholePlate){
    1fe0:	99 e1       	ldi	r25, 0x19	; 25
    1fe2:	69 16       	cp	r6, r25
    1fe4:	71 04       	cpc	r7, r1
    1fe6:	51 f4       	brne	.+20     	; 0x1ffc <main+0x1b1c>
    1fe8:	c2 01       	movw	r24, r4
    1fea:	82 19       	sub	r24, r2
    1fec:	93 09       	sbc	r25, r3
    1fee:	81 5a       	subi	r24, 0xA1	; 161
    1ff0:	9f 40       	sbci	r25, 0x0F	; 15
    1ff2:	44 f4       	brge	.+16     	; 0x2004 <main+0x1b24>
    1ff4:	51 c0       	rjmp	.+162    	; 0x2098 <main+0x1bb8>
    1ff6:	a4 e1       	ldi	r26, 0x14	; 20
    1ff8:	6a 2e       	mov	r6, r26
    1ffa:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totallength2*m2Dry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    1ffc:	ba e1       	ldi	r27, 0x1A	; 26
    1ffe:	6b 16       	cp	r6, r27
    2000:	71 04       	cpc	r7, r1
    2002:	69 f4       	brne	.+26     	; 0x201e <main+0x1b3e>
    2004:	c2 01       	movw	r24, r4
    2006:	82 19       	sub	r24, r2
    2008:	93 09       	sbc	r25, r3
    200a:	81 5a       	subi	r24, 0xA1	; 161
    200c:	9f 40       	sbci	r25, 0x0F	; 15
    200e:	0c f4       	brge	.+2      	; 0x2012 <main+0x1b32>
    2010:	56 c0       	rjmp	.+172    	; 0x20be <main+0x1bde>
    2012:	58 86       	std	Y+8, r5	; 0x08
    2014:	4f 82       	std	Y+7, r4	; 0x07
    2016:	07 c0       	rjmp	.+14     	; 0x2026 <main+0x1b46>
    2018:	f5 e1       	ldi	r31, 0x15	; 21
    201a:	6f 2e       	mov	r6, r31
    201c:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    201e:	3b e1       	ldi	r19, 0x1B	; 27
    2020:	63 16       	cp	r6, r19
    2022:	71 04       	cpc	r7, r1
    2024:	71 f4       	brne	.+28     	; 0x2042 <main+0x1b62>
    2026:	c2 01       	movw	r24, r4
    2028:	af 81       	ldd	r26, Y+7	; 0x07
    202a:	b8 85       	ldd	r27, Y+8	; 0x08
    202c:	8a 1b       	sub	r24, r26
    202e:	9b 0b       	sbc	r25, r27
    2030:	85 36       	cpi	r24, 0x65	; 101
    2032:	91 05       	cpc	r25, r1
    2034:	0c f4       	brge	.+2      	; 0x2038 <main+0x1b58>
    2036:	56 c0       	rjmp	.+172    	; 0x20e4 <main+0x1c04>
    2038:	12 01       	movw	r2, r4
    203a:	07 c0       	rjmp	.+14     	; 0x204a <main+0x1b6a>
    203c:	e6 e1       	ldi	r30, 0x16	; 22
    203e:	6e 2e       	mov	r6, r30
    2040:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    2042:	bc e1       	ldi	r27, 0x1C	; 28
    2044:	6b 16       	cp	r6, r27
    2046:	71 04       	cpc	r7, r1
    2048:	61 f4       	brne	.+24     	; 0x2062 <main+0x1b82>
    204a:	c2 01       	movw	r24, r4
    204c:	82 19       	sub	r24, r2
    204e:	93 09       	sbc	r25, r3
    2050:	85 36       	cpi	r24, 0x65	; 101
    2052:	91 05       	cpc	r25, r1
    2054:	0c f4       	brge	.+2      	; 0x2058 <main+0x1b78>
    2056:	59 c0       	rjmp	.+178    	; 0x210a <main+0x1c2a>
    2058:	12 01       	movw	r2, r4
    205a:	07 c0       	rjmp	.+14     	; 0x206a <main+0x1b8a>
    205c:	77 e1       	ldi	r23, 0x17	; 23
    205e:	67 2e       	mov	r6, r23
    2060:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totallength2*m2WholePlate){
    2062:	2d e1       	ldi	r18, 0x1D	; 29
    2064:	62 16       	cp	r6, r18
    2066:	71 04       	cpc	r7, r1
    2068:	51 f4       	brne	.+20     	; 0x207e <main+0x1b9e>
    206a:	c2 01       	movw	r24, r4
    206c:	82 19       	sub	r24, r2
    206e:	93 09       	sbc	r25, r3
    2070:	81 5a       	subi	r24, 0xA1	; 161
    2072:	9f 40       	sbci	r25, 0x0F	; 15
    2074:	44 f4       	brge	.+16     	; 0x2086 <main+0x1ba6>
    2076:	5c c0       	rjmp	.+184    	; 0x2130 <main+0x1c50>
    2078:	68 e1       	ldi	r22, 0x18	; 24
    207a:	66 2e       	mov	r6, r22
    207c:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totallength2*m2LoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    207e:	8e e1       	ldi	r24, 0x1E	; 30
    2080:	68 16       	cp	r6, r24
    2082:	71 04       	cpc	r7, r1
    2084:	61 f4       	brne	.+24     	; 0x209e <main+0x1bbe>
    2086:	c2 01       	movw	r24, r4
    2088:	82 19       	sub	r24, r2
    208a:	93 09       	sbc	r25, r3
    208c:	81 5a       	subi	r24, 0xA1	; 161
    208e:	9f 40       	sbci	r25, 0x0F	; 15
    2090:	0c f4       	brge	.+2      	; 0x2094 <main+0x1bb4>
    2092:	62 c0       	rjmp	.+196    	; 0x2158 <main+0x1c78>
    2094:	12 01       	movw	r2, r4
    2096:	07 c0       	rjmp	.+14     	; 0x20a6 <main+0x1bc6>
    2098:	59 e1       	ldi	r21, 0x19	; 25
    209a:	65 2e       	mov	r6, r21
    209c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    209e:	bf e1       	ldi	r27, 0x1F	; 31
    20a0:	6b 16       	cp	r6, r27
    20a2:	71 04       	cpc	r7, r1
    20a4:	79 f4       	brne	.+30     	; 0x20c4 <main+0x1be4>
    20a6:	c2 01       	movw	r24, r4
    20a8:	82 19       	sub	r24, r2
    20aa:	93 09       	sbc	r25, r3
    20ac:	89 5e       	subi	r24, 0xE9	; 233
    20ae:	93 40       	sbci	r25, 0x03	; 3
    20b0:	24 f4       	brge	.+8      	; 0x20ba <main+0x1bda>
    20b2:	4f e1       	ldi	r20, 0x1F	; 31
    20b4:	64 2e       	mov	r6, r20
    20b6:	71 2c       	mov	r7, r1
    20b8:	6c c1       	rjmp	.+728    	; 0x2392 <main+0x1eb2>
    20ba:	12 01       	movw	r2, r4
    20bc:	07 c0       	rjmp	.+14     	; 0x20cc <main+0x1bec>
    20be:	3a e1       	ldi	r19, 0x1A	; 26
    20c0:	63 2e       	mov	r6, r19
    20c2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totallength2*m2HomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    20c4:	30 e2       	ldi	r19, 0x20	; 32
    20c6:	63 16       	cp	r6, r19
    20c8:	71 04       	cpc	r7, r1
    20ca:	79 f4       	brne	.+30     	; 0x20ea <main+0x1c0a>
    20cc:	c2 01       	movw	r24, r4
    20ce:	82 19       	sub	r24, r2
    20d0:	93 09       	sbc	r25, r3
    20d2:	81 5a       	subi	r24, 0xA1	; 161
    20d4:	9f 40       	sbci	r25, 0x0F	; 15
    20d6:	24 f4       	brge	.+8      	; 0x20e0 <main+0x1c00>
    20d8:	20 e2       	ldi	r18, 0x20	; 32
    20da:	62 2e       	mov	r6, r18
    20dc:	71 2c       	mov	r7, r1
    20de:	5f c1       	rjmp	.+702    	; 0x239e <main+0x1ebe>
    20e0:	12 01       	movw	r2, r4
    20e2:	07 c0       	rjmp	.+14     	; 0x20f2 <main+0x1c12>
    20e4:	9b e1       	ldi	r25, 0x1B	; 27
    20e6:	69 2e       	mov	r6, r25
    20e8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    20ea:	b1 e2       	ldi	r27, 0x21	; 33
    20ec:	6b 16       	cp	r6, r27
    20ee:	71 04       	cpc	r7, r1
    20f0:	79 f4       	brne	.+30     	; 0x2110 <main+0x1c30>
    20f2:	c2 01       	movw	r24, r4
    20f4:	82 19       	sub	r24, r2
    20f6:	93 09       	sbc	r25, r3
    20f8:	85 36       	cpi	r24, 0x65	; 101
    20fa:	91 05       	cpc	r25, r1
    20fc:	24 f4       	brge	.+8      	; 0x2106 <main+0x1c26>
    20fe:	81 e2       	ldi	r24, 0x21	; 33
    2100:	68 2e       	mov	r6, r24
    2102:	71 2c       	mov	r7, r1
    2104:	51 c1       	rjmp	.+674    	; 0x23a8 <main+0x1ec8>
    2106:	12 01       	movw	r2, r4
    2108:	07 c0       	rjmp	.+14     	; 0x2118 <main+0x1c38>
    210a:	0c e1       	ldi	r16, 0x1C	; 28
    210c:	60 2e       	mov	r6, r16
    210e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totallength1*m1LoadPlate){
    2110:	22 e2       	ldi	r18, 0x22	; 34
    2112:	62 16       	cp	r6, r18
    2114:	71 04       	cpc	r7, r1
    2116:	79 f4       	brne	.+30     	; 0x2136 <main+0x1c56>
    2118:	c2 01       	movw	r24, r4
    211a:	82 19       	sub	r24, r2
    211c:	93 09       	sbc	r25, r3
    211e:	81 5a       	subi	r24, 0xA1	; 161
    2120:	9f 40       	sbci	r25, 0x0F	; 15
    2122:	24 f4       	brge	.+8      	; 0x212c <main+0x1c4c>
    2124:	12 e2       	ldi	r17, 0x22	; 34
    2126:	61 2e       	mov	r6, r17
    2128:	71 2c       	mov	r7, r1
    212a:	4a c1       	rjmp	.+660    	; 0x23c0 <main+0x1ee0>
    212c:	12 01       	movw	r2, r4
    212e:	07 c0       	rjmp	.+14     	; 0x213e <main+0x1c5e>
    2130:	bd e1       	ldi	r27, 0x1D	; 29
    2132:	6b 2e       	mov	r6, r27
    2134:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    2136:	83 e2       	ldi	r24, 0x23	; 35
    2138:	68 16       	cp	r6, r24
    213a:	71 04       	cpc	r7, r1
    213c:	81 f4       	brne	.+32     	; 0x215e <main+0x1c7e>
    213e:	c2 01       	movw	r24, r4
    2140:	82 19       	sub	r24, r2
    2142:	93 09       	sbc	r25, r3
    2144:	0b 97       	sbiw	r24, 0x0b	; 11
    2146:	24 f0       	brlt	.+8      	; 0x2150 <main+0x1c70>
    2148:	66 24       	eor	r6, r6
    214a:	6a 94       	dec	r6
    214c:	76 2c       	mov	r7, r6
    214e:	4f c1       	rjmp	.+670    	; 0x23ee <main+0x1f0e>
    2150:	a3 e2       	ldi	r26, 0x23	; 35
    2152:	6a 2e       	mov	r6, r26
    2154:	71 2c       	mov	r7, r1
    2156:	39 c1       	rjmp	.+626    	; 0x23ca <main+0x1eea>
    2158:	fe e1       	ldi	r31, 0x1E	; 30
    215a:	6f 2e       	mov	r6, r31
    215c:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    215e:	f3 01       	movw	r30, r6
    2160:	e4 32       	cpi	r30, 0x24	; 36
    2162:	f1 05       	cpc	r31, r1
    2164:	08 f0       	brcs	.+2      	; 0x2168 <main+0x1c88>
    2166:	43 c1       	rjmp	.+646    	; 0x23ee <main+0x1f0e>
    2168:	e8 54       	subi	r30, 0x48	; 72
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	ee 0f       	add	r30, r30
    216e:	ff 1f       	adc	r31, r31
    2170:	05 90       	lpm	r0, Z+
    2172:	f4 91       	lpm	r31, Z+
    2174:	e0 2d       	mov	r30, r0
    2176:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    2178:	80 91 3c 03 	lds	r24, 0x033C
    217c:	90 91 38 03 	lds	r25, 0x0338
    2180:	20 91 3a 03 	lds	r18, 0x033A
    2184:	82 ff       	sbrs	r24, 2
    2186:	07 c0       	rjmp	.+14     	; 0x2196 <main+0x1cb6>
						u_motorByte0.bits_in_motorByte0.m2Dir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    2188:	9f 7e       	andi	r25, 0xEF	; 239
    218a:	90 93 38 03 	sts	0x0338, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    218e:	27 7f       	andi	r18, 0xF7	; 247
    2190:	20 93 3a 03 	sts	0x033A, r18
    2194:	15 c0       	rjmp	.+42     	; 0x21c0 <main+0x1ce0>
						m2 = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    2196:	9f 7d       	andi	r25, 0xDF	; 223
    2198:	90 93 38 03 	sts	0x0338, r25
						m2 = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    219c:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    219e:	28 60       	ori	r18, 0x08	; 8
    21a0:	20 93 3a 03 	sts	0x033A, r18
						if(print0 == 1){
    21a4:	a9 89       	ldd	r26, Y+17	; 0x11
    21a6:	ba 89       	ldd	r27, Y+18	; 0x12
    21a8:	11 97       	sbiw	r26, 0x01	; 1
    21aa:	51 f4       	brne	.+20     	; 0x21c0 <main+0x1ce0>
							OrangutanLCD::gotoXY(0,1);
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	61 e0       	ldi	r22, 0x01	; 1
    21b0:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	93 e0       	ldi	r25, 0x03	; 3
    21b8:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
    21bc:	1a 8a       	std	Y+18, r1	; 0x12
    21be:	19 8a       	std	Y+17, r1	; 0x11
							print0 = 0;
						}
					}
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    21c0:	20 91 3a 03 	lds	r18, 0x033A
    21c4:	32 2f       	mov	r19, r18
    21c6:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    21c8:	c2 01       	movw	r24, r4
    21ca:	68 ec       	ldi	r22, 0xC8	; 200
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	0e 94 82 18 	call	0x3104	; 0x3104 <__divmodhi4>
    21d2:	84 36       	cpi	r24, 0x64	; 100
    21d4:	91 05       	cpc	r25, r1
    21d6:	24 f4       	brge	.+8      	; 0x21e0 <main+0x1d00>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    21d8:	2c 7f       	andi	r18, 0xFC	; 252
    21da:	20 93 3a 03 	sts	0x033A, r18
    21de:	03 c0       	rjmp	.+6      	; 0x21e6 <main+0x1d06>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    21e0:	32 60       	ori	r19, 0x02	; 2
    21e2:	30 93 3a 03 	sts	0x033A, r19
					}
					m1 = 1;
					u_motorByte0.bits_in_motorByte0.m1Dir = 1;  //****** dir1 ******
    21e6:	80 91 38 03 	lds	r24, 0x0338
					u_motorByte0.bits_in_motorByte0.m1Drop = 1;
    21ea:	86 60       	ori	r24, 0x06	; 6
    21ec:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    21f0:	80 91 3a 03 	lds	r24, 0x033A
    21f4:	8b 7f       	andi	r24, 0xFB	; 251
    21f6:	80 93 3a 03 	sts	0x033A, r24
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    21fa:	80 91 3a 03 	lds	r24, 0x033A
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    21fe:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    2200:	86 61       	ori	r24, 0x16	; 22
    2202:	80 93 3a 03 	sts	0x033A, r24
						m1 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 1;
    2206:	80 91 38 03 	lds	r24, 0x0338
    220a:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.m1Drop = 0;
    220c:	8b 7f       	andi	r24, 0xFB	; 251
    220e:	80 93 38 03 	sts	0x0338, r24
				case FIXL:
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ****** dir2 *******
    2212:	80 91 38 03 	lds	r24, 0x0338
    2216:	80 61       	ori	r24, 0x10	; 16
    2218:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				case LOWERL1:
						m2 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    221c:	80 91 38 03 	lds	r24, 0x0338
    2220:	8f 7d       	andi	r24, 0xDF	; 223
    2222:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2226:	80 91 3a 03 	lds	r24, 0x033A
    222a:	88 60       	ori	r24, 0x08	; 8
    222c:	80 93 3a 03 	sts	0x033A, r24
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2230:	80 91 3a 03 	lds	r24, 0x033A
    2234:	8f 7e       	andi	r24, 0xEF	; 239
    2236:	80 93 3a 03 	sts	0x033A, r24
					u_motorByte0.bits_in_motorByte0.m2Drop = 1;
    223a:	80 91 38 03 	lds	r24, 0x0338
    223e:	80 62       	ori	r24, 0x20	; 32
    2240:	80 93 38 03 	sts	0x0338, r24
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    2244:	80 91 38 03 	lds	r24, 0x0338
    2248:	80 61       	ori	r24, 0x10	; 16
    224a:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				case B1SET:
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m3Drop = 1;
    224e:	80 91 39 03 	lds	r24, 0x0339
    2252:	81 60       	ori	r24, 0x01	; 1
    2254:	80 93 39 03 	sts	0x0339, r24
					u_motorByte0.bits_in_motorByte0.m3Dir = 0;  // ******* dir3 *******
    2258:	80 91 38 03 	lds	r24, 0x0338
    225c:	8f 77       	andi	r24, 0x7F	; 127
    225e:	80 93 38 03 	sts	0x0338, r24
						OrangutanLCD::print("Clean 1");
						print6 = 0;
					}*/
				case B1START1:
					m3 = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2262:	80 91 3a 03 	lds	r24, 0x033A
    2266:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2268:	8f 7d       	andi	r24, 0xDF	; 223
    226a:	80 93 3a 03 	sts	0x033A, r24
				case CLEAN1_1:
					m2 = 1;
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;  // ******* dir2 *******
    226e:	80 91 38 03 	lds	r24, 0x0338
    2272:	8f 7e       	andi	r24, 0xEF	; 239
    2274:	80 93 38 03 	sts	0x0338, r24
				case B1STOP1:
					m2 = 0;
					m3 = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2278:	80 91 3a 03 	lds	r24, 0x033A
    227c:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    227e:	80 62       	ori	r24, 0x20	; 32
    2280:	80 93 3a 03 	sts	0x033A, r24
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    2284:	80 91 38 03 	lds	r24, 0x0338
    2288:	80 61       	ori	r24, 0x10	; 16
    228a:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				case B1START2:
					m2 = 0;
					u_motorByte0.bits_in_motorByte0.m3Dir = 0;  // ******* dir3 *******
    228e:	80 91 38 03 	lds	r24, 0x0338
    2292:	8f 77       	andi	r24, 0x7F	; 127
    2294:	80 93 38 03 	sts	0x0338, r24
					m3 = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2298:	80 91 3a 03 	lds	r24, 0x033A
    229c:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    229e:	8f 7d       	andi	r24, 0xDF	; 223
    22a0:	80 93 3a 03 	sts	0x033A, r24
				case CLEAN1_3:
					m2 = 1;
				case B1STOP2:
					m3 = 0;
					m2 = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    22a4:	80 91 3a 03 	lds	r24, 0x033A
    22a8:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    22aa:	80 62       	ori	r24, 0x20	; 32
    22ac:	80 93 3a 03 	sts	0x033A, r24
				
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m4Drop = 1;
    22b0:	80 91 39 03 	lds	r24, 0x0339
    22b4:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.m4Dir = 0;  // ******* dir4 *******
    22b6:	8b 7f       	andi	r24, 0xFB	; 251
    22b8:	80 93 39 03 	sts	0x0339, r24
						OrangutanLCD::print("Clean 2");
						print15 = 0;
					}*/
				case B2START1:
					m4 = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    22bc:	80 91 3b 03 	lds	r24, 0x033B
    22c0:	81 60       	ori	r24, 0x01	; 1
    22c2:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    22c6:	80 91 3a 03 	lds	r24, 0x033A
    22ca:	8f 77       	andi	r24, 0x7F	; 127
    22cc:	80 93 3a 03 	sts	0x033A, r24
				case CLEAN2_1:
					m2 = 1;
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;  // ******* dir2 *******
    22d0:	80 91 38 03 	lds	r24, 0x0338
    22d4:	8f 7e       	andi	r24, 0xEF	; 239
    22d6:	80 93 38 03 	sts	0x0338, r24
				case B2STOP1:
					m2 = 0;
					m4 = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    22da:	80 91 3b 03 	lds	r24, 0x033B
    22de:	8e 7f       	andi	r24, 0xFE	; 254
    22e0:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    22e4:	80 91 3a 03 	lds	r24, 0x033A
    22e8:	80 68       	ori	r24, 0x80	; 128
    22ea:	80 93 3a 03 	sts	0x033A, r24
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    22ee:	80 91 38 03 	lds	r24, 0x0338
    22f2:	80 61       	ori	r24, 0x10	; 16
    22f4:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				case B2START2:
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m4Dir = 0;  // ******* dir4 *******
    22f8:	80 91 39 03 	lds	r24, 0x0339
    22fc:	8b 7f       	andi	r24, 0xFB	; 251
    22fe:	80 93 39 03 	sts	0x0339, r24
					m4 = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2302:	80 91 3b 03 	lds	r24, 0x033B
    2306:	81 60       	ori	r24, 0x01	; 1
    2308:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    230c:	80 91 3a 03 	lds	r24, 0x033A
    2310:	8f 77       	andi	r24, 0x7F	; 127
    2312:	80 93 3a 03 	sts	0x033A, r24
				case CLEAN2_3:
					m2 = 1;
				case B2STOP2:
					m4 = 0;
					m2 = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2316:	80 91 3b 03 	lds	r24, 0x033B
    231a:	8e 7f       	andi	r24, 0xFE	; 254
    231c:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2320:	80 91 3a 03 	lds	r24, 0x033A
    2324:	80 68       	ori	r24, 0x80	; 128
    2326:	80 93 3a 03 	sts	0x033A, r24
					u_motorByte1.bits_in_motorByte1.m4Drop = 0;
    232a:	80 91 39 03 	lds	r24, 0x0339
    232e:	87 7f       	andi	r24, 0xF7	; 247
    2330:	80 93 39 03 	sts	0x0339, r24
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.m2Dir = 1;  // ******* dir2 *******
    2334:	80 91 38 03 	lds	r24, 0x0338
    2338:	80 61       	ori	r24, 0x10	; 16
    233a:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
					u_motorByte1.bits_in_motorByte1.m3Drop = 0;
    233e:	80 91 39 03 	lds	r24, 0x0339
    2342:	8e 7f       	andi	r24, 0xFE	; 254
    2344:	80 93 39 03 	sts	0x0339, r24
				case D1START:
					m2 = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2348:	80 91 3b 03 	lds	r24, 0x033B
    234c:	87 7f       	andi	r24, 0xF7	; 247
    234e:	80 93 3b 03 	sts	0x033B, r24
						OrangutanLCD::clear();
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
				case DRY1:
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;  // ******* dir2 *******
    2352:	80 91 38 03 	lds	r24, 0x0338
    2356:	8f 7e       	andi	r24, 0xEF	; 239
    2358:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    235c:	80 91 3b 03 	lds	r24, 0x033B
    2360:	88 60       	ori	r24, 0x08	; 8
    2362:	80 93 3b 03 	sts	0x033B, r24
				case D2START:
					m2 = 0;
					u_motorByte1.bits_in_motorByte1.m5Drop = 1;
    2366:	80 91 39 03 	lds	r24, 0x0339
    236a:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.m5Dir = 0;
    236c:	8f 7d       	andi	r24, 0xDF	; 223
    236e:	80 93 39 03 	sts	0x0339, r24
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    2372:	80 91 3b 03 	lds	r24, 0x033B
    2376:	8d 7f       	andi	r24, 0xFD	; 253
    2378:	80 93 3b 03 	sts	0x033B, r24
				case DRY2:
					m2 = 1;
				case D2STOP:
					m5 = 0;
						u_motorByte1.bits_in_motorByte1.m5Drop = 0;
    237c:	80 91 39 03 	lds	r24, 0x0339
    2380:	8f 7b       	andi	r24, 0xBF	; 191
    2382:	80 93 39 03 	sts	0x0339, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    2386:	80 91 3b 03 	lds	r24, 0x033B
    238a:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    238c:	8b 7f       	andi	r24, 0xFB	; 251
    238e:	80 93 3b 03 	sts	0x033B, r24
				case RAISEL2:
					m2 = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2392:	80 91 3a 03 	lds	r24, 0x033A
    2396:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    2398:	80 61       	ori	r24, 0x10	; 16
    239a:	80 93 3a 03 	sts	0x033A, r24
				case FIXH:
					u_motorByte0.bits_in_motorByte0.m2Dir = 0;
    239e:	80 91 38 03 	lds	r24, 0x0338
    23a2:	8f 7e       	andi	r24, 0xEF	; 239
    23a4:	80 93 38 03 	sts	0x0338, r24
					m2 = 1;
				case LOWERL3:
					m2 = 0;
					u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    23a8:	80 91 38 03 	lds	r24, 0x0338
    23ac:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.m1Drop = 1;
    23ae:	84 60       	ori	r24, 0x04	; 4
    23b0:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    23b4:	80 91 3a 03 	lds	r24, 0x033A
    23b8:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    23ba:	8f 7e       	andi	r24, 0xEF	; 239
    23bc:	80 93 3a 03 	sts	0x033A, r24
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.m1Dir = 0;
    23c0:	80 91 38 03 	lds	r24, 0x0338
    23c4:	8d 7f       	andi	r24, 0xFD	; 253
    23c6:	80 93 38 03 	sts	0x0338, r24
					m1 = 1;
				case END:
					m1 = 0;
					u_motorByte0.bits_in_motorByte0.m1Drop = 0;
    23ca:	80 91 38 03 	lds	r24, 0x0338
    23ce:	8b 7f       	andi	r24, 0xFB	; 251
    23d0:	80 93 38 03 	sts	0x0338, r24
					if(print35 == 1){
    23d4:	2d 85       	ldd	r18, Y+13	; 0x0d
    23d6:	3e 85       	ldd	r19, Y+14	; 0x0e
    23d8:	21 30       	cpi	r18, 0x01	; 1
    23da:	31 05       	cpc	r19, r1
    23dc:	31 f4       	brne	.+12     	; 0x23ea <main+0x1f0a>
						OrangutanLCD::clear();
    23de:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    23e2:	8e e0       	ldi	r24, 0x0E	; 14
    23e4:	93 e0       	ldi	r25, 0x03	; 3
    23e6:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
    23ea:	1e 86       	std	Y+14, r1	; 0x0e
    23ec:	1d 86       	std	Y+13, r1	; 0x0d
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, m1, m2, m3, m4, m5, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
    23ee:	8d b7       	in	r24, 0x3d	; 61
    23f0:	9e b7       	in	r25, 0x3e	; 62
    23f2:	42 97       	sbiw	r24, 0x12	; 18
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	9e bf       	out	0x3e, r25	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	8d bf       	out	0x3d, r24	; 61
    23fe:	ed b7       	in	r30, 0x3d	; 61
    2400:	fe b7       	in	r31, 0x3e	; 62
    2402:	31 96       	adiw	r30, 0x01	; 1
    2404:	82 e0       	ldi	r24, 0x02	; 2
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	ad b7       	in	r26, 0x3d	; 61
    240a:	be b7       	in	r27, 0x3e	; 62
    240c:	12 96       	adiw	r26, 0x02	; 2
    240e:	9c 93       	st	X, r25
    2410:	8e 93       	st	-X, r24
    2412:	11 97       	sbiw	r26, 0x01	; 1
    2414:	93 83       	std	Z+3, r25	; 0x03
    2416:	82 83       	std	Z+2, r24	; 0x02
    2418:	95 83       	std	Z+5, r25	; 0x05
    241a:	84 83       	std	Z+4, r24	; 0x04
    241c:	97 83       	std	Z+7, r25	; 0x07
    241e:	86 83       	std	Z+6, r24	; 0x06
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	91 87       	std	Z+9, r25	; 0x09
    2426:	80 87       	std	Z+8, r24	; 0x08
    2428:	93 87       	std	Z+11, r25	; 0x0b
    242a:	82 87       	std	Z+10, r24	; 0x0a
    242c:	95 87       	std	Z+13, r25	; 0x0d
    242e:	84 87       	std	Z+12, r24	; 0x0c
    2430:	97 87       	std	Z+15, r25	; 0x0f
    2432:	86 87       	std	Z+14, r24	; 0x0e
    2434:	91 8b       	std	Z+17, r25	; 0x11
    2436:	80 8b       	std	Z+16, r24	; 0x10
    2438:	c2 01       	movw	r24, r4
    243a:	b1 01       	movw	r22, r2
    243c:	4f 81       	ldd	r20, Y+7	; 0x07
    243e:	58 85       	ldd	r21, Y+8	; 0x08
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	00 e0       	ldi	r16, 0x00	; 0
    2446:	10 e0       	ldi	r17, 0x00	; 0
    2448:	ee 24       	eor	r14, r14
    244a:	ff 24       	eor	r15, r15
    244c:	cc 24       	eor	r12, r12
    244e:	dd 24       	eor	r13, r13
    2450:	aa 24       	eor	r10, r10
    2452:	bb 24       	eor	r11, r11
    2454:	e2 e0       	ldi	r30, 0x02	; 2
    2456:	8e 2e       	mov	r8, r30
    2458:	91 2c       	mov	r9, r1
    245a:	0e 94 bb 01 	call	0x376	; 0x376 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    245e:	2d b7       	in	r18, 0x3d	; 61
    2460:	3e b7       	in	r19, 0x3e	; 62
    2462:	2e 5e       	subi	r18, 0xEE	; 238
    2464:	3f 4f       	sbci	r19, 0xFF	; 255
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	3e bf       	out	0x3e, r19	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	2d bf       	out	0x3d, r18	; 61
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("BOTH B");
			while(state != -1)
    2478:	3f ef       	ldi	r19, 0xFF	; 255
    247a:	63 16       	cp	r6, r19
    247c:	3f ef       	ldi	r19, 0xFF	; 255
    247e:	73 06       	cpc	r7, r19
    2480:	21 f0       	breq	.+8      	; 0x248a <main+0x1faa>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, m1, m2, m3, m4, m5, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);

				counter ++;
    2482:	08 94       	sec
    2484:	41 1c       	adc	r4, r1
    2486:	51 1c       	adc	r5, r1
    2488:	05 cc       	rjmp	.-2038   	; 0x1c94 <main+0x17b4>
				delay_ms(1);
   		 	}
		}
		}
		u_motorByte0.bits_in_motorByte0.m1Drop = 0;
    248a:	80 91 38 03 	lds	r24, 0x0338
		u_motorByte0.bits_in_motorByte0.m2Drop = 0;
    248e:	8b 7d       	andi	r24, 0xDB	; 219
    2490:	80 93 38 03 	sts	0x0338, r24
		u_motorByte1.bits_in_motorByte1.m3Drop = 0;
    2494:	80 91 39 03 	lds	r24, 0x0339
		u_motorByte1.bits_in_motorByte1.m4Drop = 0;
		u_motorByte1.bits_in_motorByte1.m5Drop = 0;
    2498:	86 7b       	andi	r24, 0xB6	; 182
    249a:	80 93 39 03 	sts	0x0339, r24
		
		i2c_start(I2C1+I2C_WRITE);
    249e:	80 e4       	ldi	r24, 0x40	; 64
    24a0:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>
		i2c_write(0x2);
    24a4:	82 e0       	ldi	r24, 0x02	; 2
    24a6:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
    24aa:	80 91 38 03 	lds	r24, 0x0338
    24ae:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
    24b2:	80 91 39 03 	lds	r24, 0x0339
    24b6:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_Z9i2c_writeh>
		i2c_stop();
    24ba:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_Z8i2c_stopv>
	}
	OrangutanLCD::print("END");
    24be:	8b e2       	ldi	r24, 0x2B	; 43
    24c0:	93 e0       	ldi	r25, 0x03	; 3
    24c2:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
    24c6:	0c 94 8a 02 	jmp	0x514	; 0x514 <main+0x34>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
    24d0:	88 23       	and	r24, r24
    24d2:	09 f0       	breq	.+2      	; 0x24d6 <main+0x1ff6>
    24d4:	5a c8       	rjmp	.-3916   	; 0x158a <main+0x10aa>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
    24dc:	88 23       	and	r24, r24
    24de:	a9 f6       	brne	.-86     	; 0x248a <main+0x1faa>
    24e0:	bd cb       	rjmp	.-2182   	; 0x1c5c <main+0x177c>
    24e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    24e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    24e6:	9c 8f       	std	Y+28, r25	; 0x1c
    24e8:	8b 8f       	std	Y+27, r24	; 0x1b
    24ea:	66 24       	eor	r6, r6
    24ec:	77 24       	eor	r7, r7
    24ee:	44 24       	eor	r4, r4
    24f0:	4a 94       	dec	r4
    24f2:	54 2c       	mov	r5, r4
    24f4:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <main+0x8e4>

000024f8 <_ZdlPv>:
  return malloc(size); 
} 

void operator delete(void * ptr) 
{ 
  free(ptr); 
    24f8:	0e 94 af 19 	call	0x335e	; 0x335e <free>
} 
    24fc:	08 95       	ret

000024fe <_Znwj>:
void * operator new(size_t size); 
void operator delete(void * ptr); 

void * operator new(size_t size) 
{ 
  return malloc(size); 
    24fe:	0e 94 02 19 	call	0x3204	; 0x3204 <malloc>
} 
    2502:	08 95       	ret

00002504 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    2504:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2508:	8c e0       	ldi	r24, 0x0C	; 12
    250a:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    250e:	08 95       	ret

00002510 <_Z9i2c_starth>:

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    2510:	98 2f       	mov	r25, r24
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2512:	84 ea       	ldi	r24, 0xA4	; 164
    2514:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2518:	80 91 bc 00 	lds	r24, 0x00BC
    251c:	87 ff       	sbrs	r24, 7
    251e:	fc cf       	rjmp	.-8      	; 0x2518 <_Z9i2c_starth+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2520:	80 91 b9 00 	lds	r24, 0x00B9
    2524:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    2526:	88 30       	cpi	r24, 0x08	; 8
    2528:	21 f0       	breq	.+8      	; 0x2532 <_Z9i2c_starth+0x22>
    252a:	80 31       	cpi	r24, 0x10	; 16
    252c:	11 f0       	breq	.+4      	; 0x2532 <_Z9i2c_starth+0x22>
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	08 95       	ret

	// send device address
	TWDR = address;
    2532:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2536:	84 e8       	ldi	r24, 0x84	; 132
    2538:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    253c:	80 91 bc 00 	lds	r24, 0x00BC
    2540:	87 ff       	sbrs	r24, 7
    2542:	fc cf       	rjmp	.-8      	; 0x253c <_Z9i2c_starth+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2544:	90 91 b9 00 	lds	r25, 0x00B9
    2548:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    254a:	98 31       	cpi	r25, 0x18	; 24
    254c:	11 f4       	brne	.+4      	; 0x2552 <_Z9i2c_starth+0x42>
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	08 95       	ret
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	90 34       	cpi	r25, 0x40	; 64
    2556:	09 f0       	breq	.+2      	; 0x255a <_Z9i2c_starth+0x4a>
    2558:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    255a:	08 95       	ret

0000255c <_Z14i2c_start_waith>:
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
    255c:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    255e:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2560:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2562:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2564:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2568:	80 91 bc 00 	lds	r24, 0x00BC
    256c:	87 ff       	sbrs	r24, 7
    256e:	fc cf       	rjmp	.-8      	; 0x2568 <_Z14i2c_start_waith+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2570:	80 91 b9 00 	lds	r24, 0x00B9
    2574:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2576:	88 30       	cpi	r24, 0x08	; 8
    2578:	11 f0       	breq	.+4      	; 0x257e <_Z14i2c_start_waith+0x22>
    257a:	80 31       	cpi	r24, 0x10	; 16
    257c:	99 f7       	brne	.-26     	; 0x2564 <_Z14i2c_start_waith+0x8>
    
    	// send device address
    	TWDR = address;
    257e:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2582:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2586:	80 91 bc 00 	lds	r24, 0x00BC
    258a:	87 ff       	sbrs	r24, 7
    258c:	fc cf       	rjmp	.-8      	; 0x2586 <_Z14i2c_start_waith+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    258e:	80 91 b9 00 	lds	r24, 0x00B9
    2592:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2594:	80 32       	cpi	r24, 0x20	; 32
    2596:	11 f0       	breq	.+4      	; 0x259c <_Z14i2c_start_waith+0x40>
    2598:	88 35       	cpi	r24, 0x58	; 88
    259a:	39 f4       	brne	.+14     	; 0x25aa <_Z14i2c_start_waith+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    259c:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    25a0:	80 91 bc 00 	lds	r24, 0x00BC
    25a4:	84 fd       	sbrc	r24, 4
    25a6:	fc cf       	rjmp	.-8      	; 0x25a0 <_Z14i2c_start_waith+0x44>
    25a8:	dd cf       	rjmp	.-70     	; 0x2564 <_Z14i2c_start_waith+0x8>
    25aa:	08 95       	ret

000025ac <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    25ac:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z9i2c_starth>

}/* i2c_rep_start */
    25b0:	08 95       	ret

000025b2 <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    25b2:	84 e9       	ldi	r24, 0x94	; 148
    25b4:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    25b8:	80 91 bc 00 	lds	r24, 0x00BC
    25bc:	84 fd       	sbrc	r24, 4
    25be:	fc cf       	rjmp	.-8      	; 0x25b8 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    25c0:	08 95       	ret

000025c2 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    25c2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    25c6:	84 e8       	ldi	r24, 0x84	; 132
    25c8:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    25cc:	80 91 bc 00 	lds	r24, 0x00BC
    25d0:	87 ff       	sbrs	r24, 7
    25d2:	fc cf       	rjmp	.-8      	; 0x25cc <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    25d4:	80 91 b9 00 	lds	r24, 0x00B9
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	88 7f       	andi	r24, 0xF8	; 248
    25dc:	88 32       	cpi	r24, 0x28	; 40
    25de:	09 f0       	breq	.+2      	; 0x25e2 <_Z9i2c_writeh+0x20>
    25e0:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    25e2:	89 2f       	mov	r24, r25
    25e4:	08 95       	ret

000025e6 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    25e6:	84 ec       	ldi	r24, 0xC4	; 196
    25e8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    25ec:	80 91 bc 00 	lds	r24, 0x00BC
    25f0:	87 ff       	sbrs	r24, 7
    25f2:	fc cf       	rjmp	.-8      	; 0x25ec <_Z11i2c_readAckv+0x6>

    return TWDR;
    25f4:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    25f8:	08 95       	ret

000025fa <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    25fa:	84 e8       	ldi	r24, 0x84	; 132
    25fc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    2600:	80 91 bc 00 	lds	r24, 0x00BC
    2604:	87 ff       	sbrs	r24, 7
    2606:	fc cf       	rjmp	.-8      	; 0x2600 <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    2608:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    260c:	08 95       	ret

0000260e <_ZN12OrangutanLCDC2Ev>:
    260e:	08 95       	ret

00002610 <_ZN12OrangutanLCDC1Ev>:
    2610:	08 95       	ret

00002612 <void_getchar>:
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	08 95       	ret

00002618 <_ZN12OrangutanLCD8busyWaitEv>:
    2618:	ef 92       	push	r14
    261a:	ff 92       	push	r15
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	67 b1       	in	r22, 0x07	; 7
    2622:	3d 98       	cbi	0x07, 5	; 7
    2624:	28 98       	cbi	0x05, 0	; 5
    2626:	29 9a       	sbi	0x05, 1	; 5
    2628:	e0 90 42 03 	lds	r14, 0x0342
    262c:	f0 90 43 03 	lds	r15, 0x0343
    2630:	00 91 44 03 	lds	r16, 0x0344
    2634:	10 91 45 03 	lds	r17, 0x0345
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	41 e0       	ldi	r20, 0x01	; 1
    263e:	50 e0       	ldi	r21, 0x00	; 0
    2640:	ca 01       	movw	r24, r20
    2642:	6f 93       	push	r22
    2644:	64 e0       	ldi	r22, 0x04	; 4
    2646:	6a 95       	dec	r22
    2648:	f1 f7       	brne	.-4      	; 0x2646 <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    264a:	6f 91       	pop	r22
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	c9 f7       	brne	.-14     	; 0x2642 <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    2650:	2a 9a       	sbi	0x05, 2	; 5
    2652:	ca 01       	movw	r24, r20
    2654:	6f 93       	push	r22
    2656:	64 e0       	ldi	r22, 0x04	; 4
    2658:	6a 95       	dec	r22
    265a:	f1 f7       	brne	.-4      	; 0x2658 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    265c:	6f 91       	pop	r22
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	c9 f7       	brne	.-14     	; 0x2654 <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    2662:	86 b1       	in	r24, 0x06	; 6
    2664:	2a 98       	cbi	0x05, 2	; 5
    2666:	fa 01       	movw	r30, r20
    2668:	6f 93       	push	r22
    266a:	64 e0       	ldi	r22, 0x04	; 4
    266c:	6a 95       	dec	r22
    266e:	f1 f7       	brne	.-4      	; 0x266c <_ZN12OrangutanLCD8busyWaitEv+0x54>
    2670:	6f 91       	pop	r22
    2672:	31 97       	sbiw	r30, 0x01	; 1
    2674:	c9 f7       	brne	.-14     	; 0x2668 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    2676:	2a 9a       	sbi	0x05, 2	; 5
    2678:	fa 01       	movw	r30, r20
    267a:	6f 93       	push	r22
    267c:	64 e0       	ldi	r22, 0x04	; 4
    267e:	6a 95       	dec	r22
    2680:	f1 f7       	brne	.-4      	; 0x267e <_ZN12OrangutanLCD8busyWaitEv+0x66>
    2682:	6f 91       	pop	r22
    2684:	31 97       	sbiw	r30, 0x01	; 1
    2686:	c9 f7       	brne	.-14     	; 0x267a <_ZN12OrangutanLCD8busyWaitEv+0x62>
    2688:	2a 98       	cbi	0x05, 2	; 5
    268a:	2c 5f       	subi	r18, 0xFC	; 252
    268c:	3f 4f       	sbci	r19, 0xFF	; 255
    268e:	85 ff       	sbrs	r24, 5
    2690:	09 c0       	rjmp	.+18     	; 0x26a4 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    2692:	c9 01       	movw	r24, r18
    2694:	a0 e0       	ldi	r26, 0x00	; 0
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	8e 15       	cp	r24, r14
    269a:	9f 05       	cpc	r25, r15
    269c:	a0 07       	cpc	r26, r16
    269e:	b1 07       	cpc	r27, r17
    26a0:	08 f4       	brcc	.+2      	; 0x26a4 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    26a2:	ce cf       	rjmp	.-100    	; 0x2640 <_ZN12OrangutanLCD8busyWaitEv+0x28>
    26a4:	c9 01       	movw	r24, r18
    26a6:	a0 e0       	ldi	r26, 0x00	; 0
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	8e 15       	cp	r24, r14
    26ac:	9f 05       	cpc	r25, r15
    26ae:	a0 07       	cpc	r26, r16
    26b0:	b1 07       	cpc	r27, r17
    26b2:	28 f0       	brcs	.+10     	; 0x26be <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    26b4:	82 e3       	ldi	r24, 0x32	; 50
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	a0 e0       	ldi	r26, 0x00	; 0
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	04 c0       	rjmp	.+8      	; 0x26c6 <_ZN12OrangutanLCD8busyWaitEv+0xae>
    26be:	80 e3       	ldi	r24, 0x30	; 48
    26c0:	95 e7       	ldi	r25, 0x75	; 117
    26c2:	a0 e0       	ldi	r26, 0x00	; 0
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	80 93 42 03 	sts	0x0342, r24
    26ca:	90 93 43 03 	sts	0x0343, r25
    26ce:	a0 93 44 03 	sts	0x0344, r26
    26d2:	b0 93 45 03 	sts	0x0345, r27
    26d6:	67 b9       	out	0x07, r22	; 7
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	ff 90       	pop	r15
    26de:	ef 90       	pop	r14
    26e0:	08 95       	ret

000026e2 <_ZN12OrangutanLCD8sendDataEh>:
    26e2:	28 b1       	in	r18, 0x08	; 8
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	8f 70       	andi	r24, 0x0F	; 15
    26e8:	90 70       	andi	r25, 0x00	; 0
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	23 7c       	andi	r18, 0xC3	; 195
    26f4:	28 2b       	or	r18, r24
    26f6:	28 b9       	out	0x08, r18	; 8
    26f8:	2a 9a       	sbi	0x05, 2	; 5
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	fc 01       	movw	r30, r24
    2700:	6f 93       	push	r22
    2702:	64 e0       	ldi	r22, 0x04	; 4
    2704:	6a 95       	dec	r22
    2706:	f1 f7       	brne	.-4      	; 0x2704 <_ZN12OrangutanLCD8sendDataEh+0x22>
    2708:	6f 91       	pop	r22
    270a:	31 97       	sbiw	r30, 0x01	; 1
    270c:	c9 f7       	brne	.-14     	; 0x2700 <_ZN12OrangutanLCD8sendDataEh+0x1e>
    270e:	2a 98       	cbi	0x05, 2	; 5
    2710:	6f 93       	push	r22
    2712:	64 e0       	ldi	r22, 0x04	; 4
    2714:	6a 95       	dec	r22
    2716:	f1 f7       	brne	.-4      	; 0x2714 <_ZN12OrangutanLCD8sendDataEh+0x32>
    2718:	6f 91       	pop	r22
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	c9 f7       	brne	.-14     	; 0x2710 <_ZN12OrangutanLCD8sendDataEh+0x2e>
    271e:	08 95       	ret

00002720 <_ZN12OrangutanLCD10initPrintfEv>:
    2720:	80 91 3e 03 	lds	r24, 0x033E
    2724:	90 91 3f 03 	lds	r25, 0x033F
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	11 f0       	breq	.+4      	; 0x2730 <_ZN12OrangutanLCD10initPrintfEv+0x10>
    272c:	0e 94 af 19 	call	0x335e	; 0x335e <free>
    2730:	80 91 2f 03 	lds	r24, 0x032F
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	20 91 30 03 	lds	r18, 0x0330
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	ac 01       	movw	r20, r24
    2740:	42 9f       	mul	r20, r18
    2742:	c0 01       	movw	r24, r0
    2744:	43 9f       	mul	r20, r19
    2746:	90 0d       	add	r25, r0
    2748:	52 9f       	mul	r21, r18
    274a:	90 0d       	add	r25, r0
    274c:	11 24       	eor	r1, r1
    274e:	0e 94 02 19 	call	0x3204	; 0x3204 <malloc>
    2752:	90 93 3f 03 	sts	0x033F, r25
    2756:	80 93 3e 03 	sts	0x033E, r24
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	29 f1       	breq	.+74     	; 0x27a8 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    275e:	60 e0       	ldi	r22, 0x00	; 0
    2760:	70 e2       	ldi	r23, 0x20	; 32
    2762:	08 c0       	rjmp	.+16     	; 0x2774 <_ZN12OrangutanLCD10initPrintfEv+0x54>
    2764:	e0 91 3e 03 	lds	r30, 0x033E
    2768:	f0 91 3f 03 	lds	r31, 0x033F
    276c:	e4 0f       	add	r30, r20
    276e:	f5 1f       	adc	r31, r21
    2770:	70 83       	st	Z, r23
    2772:	6f 5f       	subi	r22, 0xFF	; 255
    2774:	46 2f       	mov	r20, r22
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	80 91 2f 03 	lds	r24, 0x032F
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	20 91 30 03 	lds	r18, 0x0330
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	fc 01       	movw	r30, r24
    2788:	e2 9f       	mul	r30, r18
    278a:	c0 01       	movw	r24, r0
    278c:	e3 9f       	mul	r30, r19
    278e:	90 0d       	add	r25, r0
    2790:	f2 9f       	mul	r31, r18
    2792:	90 0d       	add	r25, r0
    2794:	11 24       	eor	r1, r1
    2796:	48 17       	cp	r20, r24
    2798:	59 07       	cpc	r21, r25
    279a:	24 f3       	brlt	.-56     	; 0x2764 <_ZN12OrangutanLCD10initPrintfEv+0x44>
    279c:	85 ef       	ldi	r24, 0xF5	; 245
    279e:	95 e1       	ldi	r25, 0x15	; 21
    27a0:	69 e0       	ldi	r22, 0x09	; 9
    27a2:	73 e1       	ldi	r23, 0x13	; 19
    27a4:	0e 94 07 1a 	call	0x340e	; 0x340e <fdevopen>
    27a8:	08 95       	ret

000027aa <_ZN12OrangutanLCD10initPrintfEhh>:
    27aa:	80 93 30 03 	sts	0x0330, r24
    27ae:	60 93 2f 03 	sts	0x032F, r22
    27b2:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD10initPrintfEv>
    27b6:	08 95       	ret

000027b8 <lcd_init_printf_with_dimensions>:
    27b8:	80 93 30 03 	sts	0x0330, r24
    27bc:	60 93 2f 03 	sts	0x032F, r22
    27c0:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD10initPrintfEv>
    27c4:	08 95       	ret

000027c6 <lcd_init_printf>:
    27c6:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN12OrangutanLCD10initPrintfEv>
    27ca:	08 95       	ret

000027cc <_ZN12OrangutanLCD5init2Ev>:
    27cc:	3d 98       	cbi	0x07, 5	; 7
    27ce:	45 9a       	sbi	0x08, 5	; 8
    27d0:	80 e3       	ldi	r24, 0x30	; 48
    27d2:	95 e7       	ldi	r25, 0x75	; 117
    27d4:	a0 e0       	ldi	r26, 0x00	; 0
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	80 93 42 03 	sts	0x0342, r24
    27dc:	90 93 43 03 	sts	0x0343, r25
    27e0:	a0 93 44 03 	sts	0x0344, r26
    27e4:	b0 93 45 03 	sts	0x0345, r27
    27e8:	20 9a       	sbi	0x04, 0	; 4
    27ea:	21 9a       	sbi	0x04, 1	; 4
    27ec:	22 9a       	sbi	0x04, 2	; 4
    27ee:	8e e1       	ldi	r24, 0x1E	; 30
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>
    27f6:	83 e0       	ldi	r24, 0x03	; 3
    27f8:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    27fc:	86 e0       	ldi	r24, 0x06	; 6
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>
    2804:	83 e0       	ldi	r24, 0x03	; 3
    2806:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    280a:	82 e0       	ldi	r24, 0x02	; 2
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>
    2812:	83 e0       	ldi	r24, 0x03	; 3
    2814:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2818:	82 e0       	ldi	r24, 0x02	; 2
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>
    2820:	82 e0       	ldi	r24, 0x02	; 2
    2822:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2826:	82 e0       	ldi	r24, 0x02	; 2
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>
    282e:	88 e2       	ldi	r24, 0x28	; 40
    2830:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN12OrangutanLCD8send_cmdEh>
    2834:	88 e0       	ldi	r24, 0x08	; 8
    2836:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN12OrangutanLCD8send_cmdEh>
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN12OrangutanLCD8send_cmdEh>
    2840:	86 e0       	ldi	r24, 0x06	; 6
    2842:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN12OrangutanLCD8send_cmdEh>
    2846:	8c e0       	ldi	r24, 0x0C	; 12
    2848:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN12OrangutanLCD8send_cmdEh>
    284c:	08 95       	ret

0000284e <_ZN12OrangutanLCD4initEv>:
    284e:	80 91 46 03 	lds	r24, 0x0346
    2852:	88 23       	and	r24, r24
    2854:	29 f4       	brne	.+10     	; 0x2860 <_ZN12OrangutanLCD4initEv+0x12>
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	80 93 46 03 	sts	0x0346, r24
    285c:	0e 94 e6 13 	call	0x27cc	; 0x27cc <_ZN12OrangutanLCD5init2Ev>
    2860:	08 95       	ret

00002862 <_ZN12OrangutanLCD4sendEhhh>:
    2862:	ff 92       	push	r15
    2864:	0f 93       	push	r16
    2866:	1f 93       	push	r17
    2868:	08 2f       	mov	r16, r24
    286a:	16 2f       	mov	r17, r22
    286c:	f4 2e       	mov	r15, r20
    286e:	0e 94 27 14 	call	0x284e	; 0x284e <_ZN12OrangutanLCD4initEv>
    2872:	0e 94 0c 13 	call	0x2618	; 0x2618 <_ZN12OrangutanLCD8busyWaitEv>
    2876:	37 b1       	in	r19, 0x07	; 7
    2878:	28 b1       	in	r18, 0x08	; 8
    287a:	29 98       	cbi	0x05, 1	; 5
    287c:	11 23       	and	r17, r17
    287e:	11 f0       	breq	.+4      	; 0x2884 <_ZN12OrangutanLCD4sendEhhh+0x22>
    2880:	28 9a       	sbi	0x05, 0	; 5
    2882:	01 c0       	rjmp	.+2      	; 0x2886 <_ZN12OrangutanLCD4sendEhhh+0x24>
    2884:	28 98       	cbi	0x05, 0	; 5
    2886:	87 b1       	in	r24, 0x07	; 7
    2888:	8c 63       	ori	r24, 0x3C	; 60
    288a:	87 b9       	out	0x07, r24	; 7
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	f8 16       	cp	r15, r24
    2890:	e1 f0       	breq	.+56     	; 0x28ca <_ZN12OrangutanLCD4sendEhhh+0x68>
    2892:	88 b1       	in	r24, 0x08	; 8
    2894:	90 2f       	mov	r25, r16
    2896:	92 95       	swap	r25
    2898:	9f 70       	andi	r25, 0x0F	; 15
    289a:	99 0f       	add	r25, r25
    289c:	99 0f       	add	r25, r25
    289e:	83 7c       	andi	r24, 0xC3	; 195
    28a0:	98 2b       	or	r25, r24
    28a2:	98 b9       	out	0x08, r25	; 8
    28a4:	2a 9a       	sbi	0x05, 2	; 5
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	fc 01       	movw	r30, r24
    28ac:	6f 93       	push	r22
    28ae:	64 e0       	ldi	r22, 0x04	; 4
    28b0:	6a 95       	dec	r22
    28b2:	f1 f7       	brne	.-4      	; 0x28b0 <_ZN12OrangutanLCD4sendEhhh+0x4e>
    28b4:	6f 91       	pop	r22
    28b6:	31 97       	sbiw	r30, 0x01	; 1
    28b8:	c9 f7       	brne	.-14     	; 0x28ac <_ZN12OrangutanLCD4sendEhhh+0x4a>
    28ba:	2a 98       	cbi	0x05, 2	; 5
    28bc:	6f 93       	push	r22
    28be:	64 e0       	ldi	r22, 0x04	; 4
    28c0:	6a 95       	dec	r22
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <_ZN12OrangutanLCD4sendEhhh+0x5e>
    28c4:	6f 91       	pop	r22
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	c9 f7       	brne	.-14     	; 0x28bc <_ZN12OrangutanLCD4sendEhhh+0x5a>
    28ca:	88 b1       	in	r24, 0x08	; 8
    28cc:	0f 70       	andi	r16, 0x0F	; 15
    28ce:	00 0f       	add	r16, r16
    28d0:	00 0f       	add	r16, r16
    28d2:	83 7c       	andi	r24, 0xC3	; 195
    28d4:	80 2b       	or	r24, r16
    28d6:	88 b9       	out	0x08, r24	; 8
    28d8:	2a 9a       	sbi	0x05, 2	; 5
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	fc 01       	movw	r30, r24
    28e0:	6f 93       	push	r22
    28e2:	64 e0       	ldi	r22, 0x04	; 4
    28e4:	6a 95       	dec	r22
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <_ZN12OrangutanLCD4sendEhhh+0x82>
    28e8:	6f 91       	pop	r22
    28ea:	31 97       	sbiw	r30, 0x01	; 1
    28ec:	c9 f7       	brne	.-14     	; 0x28e0 <_ZN12OrangutanLCD4sendEhhh+0x7e>
    28ee:	2a 98       	cbi	0x05, 2	; 5
    28f0:	6f 93       	push	r22
    28f2:	64 e0       	ldi	r22, 0x04	; 4
    28f4:	6a 95       	dec	r22
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <_ZN12OrangutanLCD4sendEhhh+0x92>
    28f8:	6f 91       	pop	r22
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	c9 f7       	brne	.-14     	; 0x28f0 <_ZN12OrangutanLCD4sendEhhh+0x8e>
    28fe:	37 b9       	out	0x07, r19	; 7
    2900:	28 b9       	out	0x08, r18	; 8
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	ff 90       	pop	r15
    2908:	08 95       	ret

0000290a <_ZN12OrangutanLCD8send_cmdEh>:
    290a:	60 e0       	ldi	r22, 0x00	; 0
    290c:	42 e0       	ldi	r20, 0x02	; 2
    290e:	0e 94 31 14 	call	0x2862	; 0x2862 <_ZN12OrangutanLCD4sendEhhh>
    2912:	08 95       	ret

00002914 <_ZN12OrangutanLCD10moveCursorEhh>:
    2914:	0f 93       	push	r16
    2916:	1f 93       	push	r17
    2918:	08 2f       	mov	r16, r24
    291a:	16 2f       	mov	r17, r22
    291c:	08 c0       	rjmp	.+16     	; 0x292e <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    291e:	00 23       	and	r16, r16
    2920:	11 f4       	brne	.+4      	; 0x2926 <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    2922:	80 e1       	ldi	r24, 0x10	; 16
    2924:	01 c0       	rjmp	.+2      	; 0x2928 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    2926:	84 e1       	ldi	r24, 0x14	; 20
    2928:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN12OrangutanLCD8send_cmdEh>
    292c:	11 50       	subi	r17, 0x01	; 1
    292e:	11 23       	and	r17, r17
    2930:	b1 f7       	brne	.-20     	; 0x291e <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    2932:	1f 91       	pop	r17
    2934:	0f 91       	pop	r16
    2936:	08 95       	ret

00002938 <lcd_move_cursor>:
    2938:	0e 94 8a 14 	call	0x2914	; 0x2914 <_ZN12OrangutanLCD10moveCursorEhh>
    293c:	08 95       	ret

0000293e <_ZN12OrangutanLCD10hideCursorEv>:
    293e:	8c e0       	ldi	r24, 0x0C	; 12
    2940:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN12OrangutanLCD8send_cmdEh>
    2944:	08 95       	ret

00002946 <lcd_hide_cursor>:
    2946:	0e 94 9f 14 	call	0x293e	; 0x293e <_ZN12OrangutanLCD10hideCursorEv>
    294a:	08 95       	ret

0000294c <_ZN12OrangutanLCD10showCursorEh>:
    294c:	81 30       	cpi	r24, 0x01	; 1
    294e:	11 f4       	brne	.+4      	; 0x2954 <_ZN12OrangutanLCD10showCursorEh+0x8>
    2950:	8f e0       	ldi	r24, 0x0F	; 15
    2952:	01 c0       	rjmp	.+2      	; 0x2956 <_ZN12OrangutanLCD10showCursorEh+0xa>
    2954:	8e e0       	ldi	r24, 0x0E	; 14
    2956:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN12OrangutanLCD8send_cmdEh>
    295a:	08 95       	ret

0000295c <lcd_show_cursor>:
    295c:	0e 94 a6 14 	call	0x294c	; 0x294c <_ZN12OrangutanLCD10showCursorEh>
    2960:	08 95       	ret

00002962 <_ZN12OrangutanLCD6gotoXYEhh>:
    2962:	a4 e0       	ldi	r26, 0x04	; 4
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e7 eb       	ldi	r30, 0xB7	; 183
    2968:	f4 e1       	ldi	r31, 0x14	; 20
    296a:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__prologue_saves__+0x1c>
    296e:	18 2f       	mov	r17, r24
    2970:	06 2f       	mov	r16, r22
    2972:	80 e8       	ldi	r24, 0x80	; 128
    2974:	89 83       	std	Y+1, r24	; 0x01
    2976:	80 ec       	ldi	r24, 0xC0	; 192
    2978:	8a 83       	std	Y+2, r24	; 0x02
    297a:	84 e9       	ldi	r24, 0x94	; 148
    297c:	8b 83       	std	Y+3, r24	; 0x03
    297e:	84 ed       	ldi	r24, 0xD4	; 212
    2980:	8c 83       	std	Y+4, r24	; 0x04
    2982:	fe 01       	movw	r30, r28
    2984:	e6 0f       	add	r30, r22
    2986:	f1 1d       	adc	r31, r1
    2988:	81 81       	ldd	r24, Z+1	; 0x01
    298a:	81 0f       	add	r24, r17
    298c:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN12OrangutanLCD8send_cmdEh>
    2990:	10 93 41 03 	sts	0x0341, r17
    2994:	00 93 40 03 	sts	0x0340, r16
    2998:	24 96       	adiw	r28, 0x04	; 4
    299a:	e4 e0       	ldi	r30, 0x04	; 4
    299c:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <__epilogue_restores__+0x1c>

000029a0 <lcd_goto_xy>:
    29a0:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
    29a4:	08 95       	ret

000029a6 <_ZN12OrangutanLCD5clearEv>:
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN12OrangutanLCD8send_cmdEh>
    29ac:	80 91 3e 03 	lds	r24, 0x033E
    29b0:	90 91 3f 03 	lds	r25, 0x033F
    29b4:	89 2b       	or	r24, r25
    29b6:	19 f1       	breq	.+70     	; 0x29fe <_ZN12OrangutanLCD5clearEv+0x58>
    29b8:	60 e0       	ldi	r22, 0x00	; 0
    29ba:	70 e2       	ldi	r23, 0x20	; 32
    29bc:	08 c0       	rjmp	.+16     	; 0x29ce <_ZN12OrangutanLCD5clearEv+0x28>
    29be:	e0 91 3e 03 	lds	r30, 0x033E
    29c2:	f0 91 3f 03 	lds	r31, 0x033F
    29c6:	e4 0f       	add	r30, r20
    29c8:	f5 1f       	adc	r31, r21
    29ca:	70 83       	st	Z, r23
    29cc:	6f 5f       	subi	r22, 0xFF	; 255
    29ce:	46 2f       	mov	r20, r22
    29d0:	50 e0       	ldi	r21, 0x00	; 0
    29d2:	80 91 2f 03 	lds	r24, 0x032F
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	20 91 30 03 	lds	r18, 0x0330
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	fc 01       	movw	r30, r24
    29e2:	e2 9f       	mul	r30, r18
    29e4:	c0 01       	movw	r24, r0
    29e6:	e3 9f       	mul	r30, r19
    29e8:	90 0d       	add	r25, r0
    29ea:	f2 9f       	mul	r31, r18
    29ec:	90 0d       	add	r25, r0
    29ee:	11 24       	eor	r1, r1
    29f0:	48 17       	cp	r20, r24
    29f2:	59 07       	cpc	r21, r25
    29f4:	24 f3       	brlt	.-56     	; 0x29be <_ZN12OrangutanLCD5clearEv+0x18>
    29f6:	10 92 41 03 	sts	0x0341, r1
    29fa:	10 92 40 03 	sts	0x0340, r1
    29fe:	08 95       	ret

00002a00 <clear>:
    2a00:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN12OrangutanLCD5clearEv>
    2a04:	08 95       	ret

00002a06 <_ZN12OrangutanLCD9send_dataEh>:
    2a06:	61 e0       	ldi	r22, 0x01	; 1
    2a08:	42 e0       	ldi	r20, 0x02	; 2
    2a0a:	0e 94 31 14 	call	0x2862	; 0x2862 <_ZN12OrangutanLCD4sendEhhh>
    2a0e:	08 95       	ret

00002a10 <_ZN12OrangutanLCD11printBinaryEh>:
    2a10:	0f 93       	push	r16
    2a12:	1f 93       	push	r17
    2a14:	cf 93       	push	r28
    2a16:	df 93       	push	r29
    2a18:	00 e0       	ldi	r16, 0x00	; 0
    2a1a:	10 e8       	ldi	r17, 0x80	; 128
    2a1c:	c8 2f       	mov	r28, r24
    2a1e:	d0 e0       	ldi	r29, 0x00	; 0
    2a20:	81 2f       	mov	r24, r17
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	8c 23       	and	r24, r28
    2a26:	9d 23       	and	r25, r29
    2a28:	89 2b       	or	r24, r25
    2a2a:	11 f0       	breq	.+4      	; 0x2a30 <_ZN12OrangutanLCD11printBinaryEh+0x20>
    2a2c:	81 e3       	ldi	r24, 0x31	; 49
    2a2e:	01 c0       	rjmp	.+2      	; 0x2a32 <_ZN12OrangutanLCD11printBinaryEh+0x22>
    2a30:	80 e3       	ldi	r24, 0x30	; 48
    2a32:	0e 94 03 15 	call	0x2a06	; 0x2a06 <_ZN12OrangutanLCD9send_dataEh>
    2a36:	0f 5f       	subi	r16, 0xFF	; 255
    2a38:	08 30       	cpi	r16, 0x08	; 8
    2a3a:	11 f0       	breq	.+4      	; 0x2a40 <_ZN12OrangutanLCD11printBinaryEh+0x30>
    2a3c:	16 95       	lsr	r17
    2a3e:	f0 cf       	rjmp	.-32     	; 0x2a20 <_ZN12OrangutanLCD11printBinaryEh+0x10>
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	1f 91       	pop	r17
    2a46:	0f 91       	pop	r16
    2a48:	08 95       	ret

00002a4a <print_binary>:
    2a4a:	0e 94 08 15 	call	0x2a10	; 0x2a10 <_ZN12OrangutanLCD11printBinaryEh>
    2a4e:	08 95       	ret

00002a50 <_ZN12OrangutanLCD14printHexNibbleEh>:
    2a50:	8a 30       	cpi	r24, 0x0A	; 10
    2a52:	10 f4       	brcc	.+4      	; 0x2a58 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    2a54:	80 5d       	subi	r24, 0xD0	; 208
    2a56:	01 c0       	rjmp	.+2      	; 0x2a5a <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    2a58:	89 5c       	subi	r24, 0xC9	; 201
    2a5a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <_ZN12OrangutanLCD9send_dataEh>
    2a5e:	08 95       	ret

00002a60 <_ZN12OrangutanLCD8printHexEh>:
    2a60:	1f 93       	push	r17
    2a62:	18 2f       	mov	r17, r24
    2a64:	82 95       	swap	r24
    2a66:	8f 70       	andi	r24, 0x0F	; 15
    2a68:	0e 94 28 15 	call	0x2a50	; 0x2a50 <_ZN12OrangutanLCD14printHexNibbleEh>
    2a6c:	81 2f       	mov	r24, r17
    2a6e:	8f 70       	andi	r24, 0x0F	; 15
    2a70:	0e 94 28 15 	call	0x2a50	; 0x2a50 <_ZN12OrangutanLCD14printHexNibbleEh>
    2a74:	1f 91       	pop	r17
    2a76:	08 95       	ret

00002a78 <_ZN12OrangutanLCD8printHexEj>:
    2a78:	1f 93       	push	r17
    2a7a:	18 2f       	mov	r17, r24
    2a7c:	89 2f       	mov	r24, r25
    2a7e:	0e 94 30 15 	call	0x2a60	; 0x2a60 <_ZN12OrangutanLCD8printHexEh>
    2a82:	81 2f       	mov	r24, r17
    2a84:	0e 94 30 15 	call	0x2a60	; 0x2a60 <_ZN12OrangutanLCD8printHexEh>
    2a88:	1f 91       	pop	r17
    2a8a:	08 95       	ret

00002a8c <print_hex>:
    2a8c:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <_ZN12OrangutanLCD8printHexEj>
    2a90:	08 95       	ret

00002a92 <print_hex_byte>:
    2a92:	0e 94 30 15 	call	0x2a60	; 0x2a60 <_ZN12OrangutanLCD8printHexEh>
    2a96:	08 95       	ret

00002a98 <_ZN12OrangutanLCD5printEm>:
    2a98:	6f 92       	push	r6
    2a9a:	7f 92       	push	r7
    2a9c:	8f 92       	push	r8
    2a9e:	9f 92       	push	r9
    2aa0:	af 92       	push	r10
    2aa2:	bf 92       	push	r11
    2aa4:	cf 92       	push	r12
    2aa6:	df 92       	push	r13
    2aa8:	ff 92       	push	r15
    2aaa:	0f 93       	push	r16
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	2a 97       	sbiw	r28, 0x0a	; 10
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
    2ac0:	5b 01       	movw	r10, r22
    2ac2:	6c 01       	movw	r12, r24
    2ac4:	0a e0       	ldi	r16, 0x0A	; 10
    2ac6:	3e 01       	movw	r6, r28
    2ac8:	08 94       	sec
    2aca:	61 1c       	adc	r6, r1
    2acc:	71 1c       	adc	r7, r1
    2ace:	fa 2c       	mov	r15, r10
    2ad0:	c6 01       	movw	r24, r12
    2ad2:	b5 01       	movw	r22, r10
    2ad4:	2a e0       	ldi	r18, 0x0A	; 10
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e0       	ldi	r20, 0x00	; 0
    2ada:	50 e0       	ldi	r21, 0x00	; 0
    2adc:	0e 94 95 18 	call	0x312a	; 0x312a <__udivmodsi4>
    2ae0:	c9 01       	movw	r24, r18
    2ae2:	da 01       	movw	r26, r20
    2ae4:	5c 01       	movw	r10, r24
    2ae6:	6d 01       	movw	r12, r26
    2ae8:	01 50       	subi	r16, 0x01	; 1
    2aea:	43 01       	movw	r8, r6
    2aec:	80 0e       	add	r8, r16
    2aee:	91 1c       	adc	r9, r1
    2af0:	80 e3       	ldi	r24, 0x30	; 48
    2af2:	f8 0e       	add	r15, r24
    2af4:	c6 01       	movw	r24, r12
    2af6:	b5 01       	movw	r22, r10
    2af8:	2a e0       	ldi	r18, 0x0A	; 10
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e0       	ldi	r20, 0x00	; 0
    2afe:	50 e0       	ldi	r21, 0x00	; 0
    2b00:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__mulsi3>
    2b04:	f6 1a       	sub	r15, r22
    2b06:	f4 01       	movw	r30, r8
    2b08:	f0 82       	st	Z, r15
    2b0a:	a1 14       	cp	r10, r1
    2b0c:	b1 04       	cpc	r11, r1
    2b0e:	c1 04       	cpc	r12, r1
    2b10:	d1 04       	cpc	r13, r1
    2b12:	e9 f6       	brne	.-70     	; 0x2ace <_ZN12OrangutanLCD5printEm+0x36>
    2b14:	08 c0       	rjmp	.+16     	; 0x2b26 <_ZN12OrangutanLCD5printEm+0x8e>
    2b16:	f6 01       	movw	r30, r12
    2b18:	e0 0f       	add	r30, r16
    2b1a:	f1 1d       	adc	r31, r1
    2b1c:	80 81       	ld	r24, Z
    2b1e:	0e 94 03 15 	call	0x2a06	; 0x2a06 <_ZN12OrangutanLCD9send_dataEh>
    2b22:	0f 5f       	subi	r16, 0xFF	; 255
    2b24:	04 c0       	rjmp	.+8      	; 0x2b2e <_ZN12OrangutanLCD5printEm+0x96>
    2b26:	6e 01       	movw	r12, r28
    2b28:	08 94       	sec
    2b2a:	c1 1c       	adc	r12, r1
    2b2c:	d1 1c       	adc	r13, r1
    2b2e:	0a 30       	cpi	r16, 0x0A	; 10
    2b30:	90 f3       	brcs	.-28     	; 0x2b16 <_ZN12OrangutanLCD5printEm+0x7e>
    2b32:	2a 96       	adiw	r28, 0x0a	; 10
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	0f 91       	pop	r16
    2b44:	ff 90       	pop	r15
    2b46:	df 90       	pop	r13
    2b48:	cf 90       	pop	r12
    2b4a:	bf 90       	pop	r11
    2b4c:	af 90       	pop	r10
    2b4e:	9f 90       	pop	r9
    2b50:	8f 90       	pop	r8
    2b52:	7f 90       	pop	r7
    2b54:	6f 90       	pop	r6
    2b56:	08 95       	ret

00002b58 <print_unsigned_long>:
    2b58:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN12OrangutanLCD5printEm>
    2b5c:	08 95       	ret

00002b5e <_ZN12OrangutanLCD5printEl>:
    2b5e:	ef 92       	push	r14
    2b60:	ff 92       	push	r15
    2b62:	0f 93       	push	r16
    2b64:	1f 93       	push	r17
    2b66:	7b 01       	movw	r14, r22
    2b68:	8c 01       	movw	r16, r24
    2b6a:	97 ff       	sbrs	r25, 7
    2b6c:	0b c0       	rjmp	.+22     	; 0x2b84 <_ZN12OrangutanLCD5printEl+0x26>
    2b6e:	10 95       	com	r17
    2b70:	00 95       	com	r16
    2b72:	f0 94       	com	r15
    2b74:	e0 94       	com	r14
    2b76:	e1 1c       	adc	r14, r1
    2b78:	f1 1c       	adc	r15, r1
    2b7a:	01 1d       	adc	r16, r1
    2b7c:	11 1d       	adc	r17, r1
    2b7e:	8d e2       	ldi	r24, 0x2D	; 45
    2b80:	0e 94 03 15 	call	0x2a06	; 0x2a06 <_ZN12OrangutanLCD9send_dataEh>
    2b84:	c8 01       	movw	r24, r16
    2b86:	b7 01       	movw	r22, r14
    2b88:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN12OrangutanLCD5printEm>
    2b8c:	1f 91       	pop	r17
    2b8e:	0f 91       	pop	r16
    2b90:	ff 90       	pop	r15
    2b92:	ef 90       	pop	r14
    2b94:	08 95       	ret

00002b96 <print_long>:
    2b96:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_ZN12OrangutanLCD5printEl>
    2b9a:	08 95       	ret

00002b9c <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    2b9c:	cf 93       	push	r28
    2b9e:	df 93       	push	r29
    2ba0:	ec 01       	movw	r28, r24
    2ba2:	03 c0       	rjmp	.+6      	; 0x2baa <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    2ba4:	0e 94 03 15 	call	0x2a06	; 0x2a06 <_ZN12OrangutanLCD9send_dataEh>
    2ba8:	21 96       	adiw	r28, 0x01	; 1
    2baa:	fe 01       	movw	r30, r28
    2bac:	84 91       	lpm	r24, Z+
    2bae:	88 23       	and	r24, r24
    2bb0:	c9 f7       	brne	.-14     	; 0x2ba4 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	08 95       	ret

00002bb8 <print_from_program_space>:
    2bb8:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    2bbc:	08 95       	ret

00002bbe <_ZN12OrangutanLCD5printEPKc>:
    2bbe:	cf 93       	push	r28
    2bc0:	df 93       	push	r29
    2bc2:	ec 01       	movw	r28, r24
    2bc4:	03 c0       	rjmp	.+6      	; 0x2bcc <_ZN12OrangutanLCD5printEPKc+0xe>
    2bc6:	21 96       	adiw	r28, 0x01	; 1
    2bc8:	0e 94 03 15 	call	0x2a06	; 0x2a06 <_ZN12OrangutanLCD9send_dataEh>
    2bcc:	88 81       	ld	r24, Y
    2bce:	88 23       	and	r24, r24
    2bd0:	d1 f7       	brne	.-12     	; 0x2bc6 <_ZN12OrangutanLCD5printEPKc+0x8>
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	08 95       	ret

00002bd8 <print>:
    2bd8:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD5printEPKc>
    2bdc:	08 95       	ret

00002bde <_ZN12OrangutanLCD5printEc>:
    2bde:	0e 94 03 15 	call	0x2a06	; 0x2a06 <_ZN12OrangutanLCD9send_dataEh>
    2be2:	08 95       	ret

00002be4 <print_character>:
    2be4:	0e 94 03 15 	call	0x2a06	; 0x2a06 <_ZN12OrangutanLCD9send_dataEh>
    2be8:	08 95       	ret

00002bea <lcd_putchar>:
    2bea:	a0 e0       	ldi	r26, 0x00	; 0
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	eb ef       	ldi	r30, 0xFB	; 251
    2bf0:	f5 e1       	ldi	r31, 0x15	; 21
    2bf2:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__prologue_saves__+0x14>
    2bf6:	e8 2e       	mov	r14, r24
    2bf8:	80 91 3e 03 	lds	r24, 0x033E
    2bfc:	90 91 3f 03 	lds	r25, 0x033F
    2c00:	89 2b       	or	r24, r25
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <lcd_putchar+0x1c>
    2c04:	05 c1       	rjmp	.+522    	; 0x2e10 <lcd_putchar+0x226>
    2c06:	2a e0       	ldi	r18, 0x0A	; 10
    2c08:	e2 16       	cp	r14, r18
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <lcd_putchar+0x24>
    2c0c:	46 c0       	rjmp	.+140    	; 0x2c9a <lcd_putchar+0xb0>
    2c0e:	38 e0       	ldi	r19, 0x08	; 8
    2c10:	e3 16       	cp	r14, r19
    2c12:	c9 f4       	brne	.+50     	; 0x2c46 <lcd_putchar+0x5c>
    2c14:	80 91 41 03 	lds	r24, 0x0341
    2c18:	81 50       	subi	r24, 0x01	; 1
    2c1a:	80 93 41 03 	sts	0x0341, r24
    2c1e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c20:	51 f4       	brne	.+20     	; 0x2c36 <lcd_putchar+0x4c>
    2c22:	80 91 40 03 	lds	r24, 0x0340
    2c26:	81 50       	subi	r24, 0x01	; 1
    2c28:	80 93 40 03 	sts	0x0340, r24
    2c2c:	80 91 30 03 	lds	r24, 0x0330
    2c30:	81 50       	subi	r24, 0x01	; 1
    2c32:	80 93 41 03 	sts	0x0341, r24
    2c36:	80 91 40 03 	lds	r24, 0x0340
    2c3a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c3c:	09 f0       	breq	.+2      	; 0x2c40 <lcd_putchar+0x56>
    2c3e:	e2 c0       	rjmp	.+452    	; 0x2e04 <lcd_putchar+0x21a>
    2c40:	10 92 40 03 	sts	0x0340, r1
    2c44:	dd c0       	rjmp	.+442    	; 0x2e00 <lcd_putchar+0x216>
    2c46:	8e 2d       	mov	r24, r14
    2c48:	0e 94 03 15 	call	0x2a06	; 0x2a06 <_ZN12OrangutanLCD9send_dataEh>
    2c4c:	20 91 40 03 	lds	r18, 0x0340
    2c50:	22 23       	and	r18, r18
    2c52:	c9 f0       	breq	.+50     	; 0x2c86 <lcd_putchar+0x9c>
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	21 50       	subi	r18, 0x01	; 1
    2c58:	30 40       	sbci	r19, 0x00	; 0
    2c5a:	80 91 30 03 	lds	r24, 0x0330
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	ac 01       	movw	r20, r24
    2c62:	24 9f       	mul	r18, r20
    2c64:	c0 01       	movw	r24, r0
    2c66:	25 9f       	mul	r18, r21
    2c68:	90 0d       	add	r25, r0
    2c6a:	34 9f       	mul	r19, r20
    2c6c:	90 0d       	add	r25, r0
    2c6e:	11 24       	eor	r1, r1
    2c70:	20 91 41 03 	lds	r18, 0x0341
    2c74:	e0 91 3e 03 	lds	r30, 0x033E
    2c78:	f0 91 3f 03 	lds	r31, 0x033F
    2c7c:	e8 0f       	add	r30, r24
    2c7e:	f9 1f       	adc	r31, r25
    2c80:	e2 0f       	add	r30, r18
    2c82:	f1 1d       	adc	r31, r1
    2c84:	e0 82       	st	Z, r14
    2c86:	80 91 41 03 	lds	r24, 0x0341
    2c8a:	8f 5f       	subi	r24, 0xFF	; 255
    2c8c:	80 93 41 03 	sts	0x0341, r24
    2c90:	90 91 30 03 	lds	r25, 0x0330
    2c94:	89 17       	cp	r24, r25
    2c96:	09 f0       	breq	.+2      	; 0x2c9a <lcd_putchar+0xb0>
    2c98:	bb c0       	rjmp	.+374    	; 0x2e10 <lcd_putchar+0x226>
    2c9a:	40 91 40 03 	lds	r20, 0x0340
    2c9e:	24 2f       	mov	r18, r20
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	80 91 2f 03 	lds	r24, 0x032F
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	28 17       	cp	r18, r24
    2cac:	39 07       	cpc	r19, r25
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <lcd_putchar+0xc8>
    2cb0:	a4 c0       	rjmp	.+328    	; 0x2dfa <lcd_putchar+0x210>
    2cb2:	c0 e0       	ldi	r28, 0x00	; 0
    2cb4:	d0 e0       	ldi	r29, 0x00	; 0
    2cb6:	44 c0       	rjmp	.+136    	; 0x2d40 <lcd_putchar+0x156>
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	6c 2f       	mov	r22, r28
    2cbc:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
    2cc0:	ff 24       	eor	r15, r15
    2cc2:	6e 01       	movw	r12, r28
    2cc4:	08 94       	sec
    2cc6:	c1 1c       	adc	r12, r1
    2cc8:	d1 1c       	adc	r13, r1
    2cca:	35 c0       	rjmp	.+106    	; 0x2d36 <lcd_putchar+0x14c>
    2ccc:	0f 2d       	mov	r16, r15
    2cce:	10 e0       	ldi	r17, 0x00	; 0
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	9c 01       	movw	r18, r24
    2cd4:	c2 9f       	mul	r28, r18
    2cd6:	c0 01       	movw	r24, r0
    2cd8:	c3 9f       	mul	r28, r19
    2cda:	90 0d       	add	r25, r0
    2cdc:	d2 9f       	mul	r29, r18
    2cde:	90 0d       	add	r25, r0
    2ce0:	11 24       	eor	r1, r1
    2ce2:	e0 91 3e 03 	lds	r30, 0x033E
    2ce6:	f0 91 3f 03 	lds	r31, 0x033F
    2cea:	e0 0f       	add	r30, r16
    2cec:	f1 1f       	adc	r31, r17
    2cee:	e8 0f       	add	r30, r24
    2cf0:	f9 1f       	adc	r31, r25
    2cf2:	80 81       	ld	r24, Z
    2cf4:	0e 94 03 15 	call	0x2a06	; 0x2a06 <_ZN12OrangutanLCD9send_dataEh>
    2cf8:	e0 91 3e 03 	lds	r30, 0x033E
    2cfc:	f0 91 3f 03 	lds	r31, 0x033F
    2d00:	80 91 30 03 	lds	r24, 0x0330
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	c8 9f       	mul	r28, r24
    2d08:	d0 01       	movw	r26, r0
    2d0a:	c9 9f       	mul	r28, r25
    2d0c:	b0 0d       	add	r27, r0
    2d0e:	d8 9f       	mul	r29, r24
    2d10:	b0 0d       	add	r27, r0
    2d12:	11 24       	eor	r1, r1
    2d14:	e0 0f       	add	r30, r16
    2d16:	f1 1f       	adc	r31, r17
    2d18:	ae 0f       	add	r26, r30
    2d1a:	bf 1f       	adc	r27, r31
    2d1c:	ac 01       	movw	r20, r24
    2d1e:	c4 9e       	mul	r12, r20
    2d20:	c0 01       	movw	r24, r0
    2d22:	c5 9e       	mul	r12, r21
    2d24:	90 0d       	add	r25, r0
    2d26:	d4 9e       	mul	r13, r20
    2d28:	90 0d       	add	r25, r0
    2d2a:	11 24       	eor	r1, r1
    2d2c:	e8 0f       	add	r30, r24
    2d2e:	f9 1f       	adc	r31, r25
    2d30:	80 81       	ld	r24, Z
    2d32:	8c 93       	st	X, r24
    2d34:	f3 94       	inc	r15
    2d36:	80 91 30 03 	lds	r24, 0x0330
    2d3a:	f8 16       	cp	r15, r24
    2d3c:	38 f2       	brcs	.-114    	; 0x2ccc <lcd_putchar+0xe2>
    2d3e:	e6 01       	movw	r28, r12
    2d40:	60 91 2f 03 	lds	r22, 0x032F
    2d44:	86 2f       	mov	r24, r22
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	02 97       	sbiw	r24, 0x02	; 2
    2d4a:	c8 17       	cp	r28, r24
    2d4c:	d9 07       	cpc	r29, r25
    2d4e:	0c f4       	brge	.+2      	; 0x2d52 <lcd_putchar+0x168>
    2d50:	b3 cf       	rjmp	.-154    	; 0x2cb8 <lcd_putchar+0xce>
    2d52:	62 30       	cpi	r22, 0x02	; 2
    2d54:	08 f4       	brcc	.+2      	; 0x2d58 <lcd_putchar+0x16e>
    2d56:	40 c0       	rjmp	.+128    	; 0x2dd8 <lcd_putchar+0x1ee>
    2d58:	62 50       	subi	r22, 0x02	; 2
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
    2d60:	ff 24       	eor	r15, r15
    2d62:	40 e2       	ldi	r20, 0x20	; 32
    2d64:	d4 2e       	mov	r13, r20
    2d66:	34 c0       	rjmp	.+104    	; 0x2dd0 <lcd_putchar+0x1e6>
    2d68:	0f 2d       	mov	r16, r15
    2d6a:	10 e0       	ldi	r17, 0x00	; 0
    2d6c:	80 91 2f 03 	lds	r24, 0x032F
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	02 97       	sbiw	r24, 0x02	; 2
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	ac 01       	movw	r20, r24
    2d78:	42 9f       	mul	r20, r18
    2d7a:	c0 01       	movw	r24, r0
    2d7c:	43 9f       	mul	r20, r19
    2d7e:	90 0d       	add	r25, r0
    2d80:	52 9f       	mul	r21, r18
    2d82:	90 0d       	add	r25, r0
    2d84:	11 24       	eor	r1, r1
    2d86:	e0 91 3e 03 	lds	r30, 0x033E
    2d8a:	f0 91 3f 03 	lds	r31, 0x033F
    2d8e:	e0 0f       	add	r30, r16
    2d90:	f1 1f       	adc	r31, r17
    2d92:	e8 0f       	add	r30, r24
    2d94:	f9 1f       	adc	r31, r25
    2d96:	80 81       	ld	r24, Z
    2d98:	0e 94 03 15 	call	0x2a06	; 0x2a06 <_ZN12OrangutanLCD9send_dataEh>
    2d9c:	20 91 2f 03 	lds	r18, 0x032F
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	22 50       	subi	r18, 0x02	; 2
    2da4:	30 40       	sbci	r19, 0x00	; 0
    2da6:	80 91 30 03 	lds	r24, 0x0330
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	ac 01       	movw	r20, r24
    2dae:	24 9f       	mul	r18, r20
    2db0:	c0 01       	movw	r24, r0
    2db2:	25 9f       	mul	r18, r21
    2db4:	90 0d       	add	r25, r0
    2db6:	34 9f       	mul	r19, r20
    2db8:	90 0d       	add	r25, r0
    2dba:	11 24       	eor	r1, r1
    2dbc:	e0 91 3e 03 	lds	r30, 0x033E
    2dc0:	f0 91 3f 03 	lds	r31, 0x033F
    2dc4:	e0 0f       	add	r30, r16
    2dc6:	f1 1f       	adc	r31, r17
    2dc8:	e8 0f       	add	r30, r24
    2dca:	f9 1f       	adc	r31, r25
    2dcc:	d0 82       	st	Z, r13
    2dce:	f3 94       	inc	r15
    2dd0:	20 91 30 03 	lds	r18, 0x0330
    2dd4:	f2 16       	cp	r15, r18
    2dd6:	40 f2       	brcs	.-112    	; 0x2d68 <lcd_putchar+0x17e>
    2dd8:	60 91 2f 03 	lds	r22, 0x032F
    2ddc:	61 50       	subi	r22, 0x01	; 1
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
    2de4:	00 e0       	ldi	r16, 0x00	; 0
    2de6:	04 c0       	rjmp	.+8      	; 0x2df0 <lcd_putchar+0x206>
    2de8:	80 e2       	ldi	r24, 0x20	; 32
    2dea:	0e 94 03 15 	call	0x2a06	; 0x2a06 <_ZN12OrangutanLCD9send_dataEh>
    2dee:	0f 5f       	subi	r16, 0xFF	; 255
    2df0:	80 91 30 03 	lds	r24, 0x0330
    2df4:	08 17       	cp	r16, r24
    2df6:	c0 f3       	brcs	.-16     	; 0x2de8 <lcd_putchar+0x1fe>
    2df8:	03 c0       	rjmp	.+6      	; 0x2e00 <lcd_putchar+0x216>
    2dfa:	4f 5f       	subi	r20, 0xFF	; 255
    2dfc:	40 93 40 03 	sts	0x0340, r20
    2e00:	10 92 41 03 	sts	0x0341, r1
    2e04:	80 91 41 03 	lds	r24, 0x0341
    2e08:	60 91 40 03 	lds	r22, 0x0340
    2e0c:	0e 94 b1 14 	call	0x2962	; 0x2962 <_ZN12OrangutanLCD6gotoXYEhh>
    2e10:	2e 2d       	mov	r18, r14
    2e12:	33 27       	eor	r19, r19
    2e14:	27 fd       	sbrc	r18, 7
    2e16:	30 95       	com	r19
    2e18:	c9 01       	movw	r24, r18
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	e8 e0       	ldi	r30, 0x08	; 8
    2e20:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__epilogue_restores__+0x14>

00002e24 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    2e24:	ef 92       	push	r14
    2e26:	ff 92       	push	r15
    2e28:	0f 93       	push	r16
    2e2a:	1f 93       	push	r17
    2e2c:	cf 93       	push	r28
    2e2e:	df 93       	push	r29
    2e30:	7c 01       	movw	r14, r24
    2e32:	06 2f       	mov	r16, r22
    2e34:	10 e0       	ldi	r17, 0x00	; 0
    2e36:	53 e0       	ldi	r21, 0x03	; 3
    2e38:	00 0f       	add	r16, r16
    2e3a:	11 1f       	adc	r17, r17
    2e3c:	5a 95       	dec	r21
    2e3e:	e1 f7       	brne	.-8      	; 0x2e38 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    2e40:	c0 e0       	ldi	r28, 0x00	; 0
    2e42:	d0 e0       	ldi	r29, 0x00	; 0
    2e44:	9e 01       	movw	r18, r28
    2e46:	20 0f       	add	r18, r16
    2e48:	82 2f       	mov	r24, r18
    2e4a:	80 64       	ori	r24, 0x40	; 64
    2e4c:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN12OrangutanLCD8send_cmdEh>
    2e50:	f7 01       	movw	r30, r14
    2e52:	ec 0f       	add	r30, r28
    2e54:	fd 1f       	adc	r31, r29
    2e56:	e4 91       	lpm	r30, Z+
    2e58:	8e 2f       	mov	r24, r30
    2e5a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <_ZN12OrangutanLCD9send_dataEh>
    2e5e:	21 96       	adiw	r28, 0x01	; 1
    2e60:	c8 30       	cpi	r28, 0x08	; 8
    2e62:	d1 05       	cpc	r29, r1
    2e64:	79 f7       	brne	.-34     	; 0x2e44 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62
    2e6a:	e6 e0       	ldi	r30, 0x06	; 6
    2e6c:	0c 94 df 18 	jmp	0x31be	; 0x31be <__epilogue_restores__+0x18>

00002e70 <lcd_load_custom_character>:
    2e70:	0e 94 12 17 	call	0x2e24	; 0x2e24 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    2e74:	08 95       	ret

00002e76 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    2e76:	60 e0       	ldi	r22, 0x00	; 0
    2e78:	41 e0       	ldi	r20, 0x01	; 1
    2e7a:	0e 94 31 14 	call	0x2862	; 0x2862 <_ZN12OrangutanLCD4sendEhhh>
    2e7e:	08 95       	ret

00002e80 <_ZN12OrangutanLCD6scrollEhhj>:
    2e80:	0f 93       	push	r16
    2e82:	1f 93       	push	r17
    2e84:	cf 93       	push	r28
    2e86:	df 93       	push	r29
    2e88:	08 2f       	mov	r16, r24
    2e8a:	16 2f       	mov	r17, r22
    2e8c:	ea 01       	movw	r28, r20
    2e8e:	0b c0       	rjmp	.+22     	; 0x2ea6 <_ZN12OrangutanLCD6scrollEhhj+0x26>
    2e90:	00 23       	and	r16, r16
    2e92:	11 f4       	brne	.+4      	; 0x2e98 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    2e94:	88 e1       	ldi	r24, 0x18	; 24
    2e96:	01 c0       	rjmp	.+2      	; 0x2e9a <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    2e98:	8c e1       	ldi	r24, 0x1C	; 28
    2e9a:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN12OrangutanLCD8send_cmdEh>
    2e9e:	ce 01       	movw	r24, r28
    2ea0:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN13OrangutanTime17delayMillisecondsEj>
    2ea4:	11 50       	subi	r17, 0x01	; 1
    2ea6:	11 23       	and	r17, r17
    2ea8:	99 f7       	brne	.-26     	; 0x2e90 <_ZN12OrangutanLCD6scrollEhhj+0x10>
    2eaa:	df 91       	pop	r29
    2eac:	cf 91       	pop	r28
    2eae:	1f 91       	pop	r17
    2eb0:	0f 91       	pop	r16
    2eb2:	08 95       	ret

00002eb4 <lcd_scroll>:
    2eb4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN12OrangutanLCD6scrollEhhj>
    2eb8:	08 95       	ret

00002eba <__vector_11>:
    2eba:	2f 92       	push	r2
    2ebc:	8f 93       	push	r24
    2ebe:	9f 93       	push	r25
    2ec0:	2f b6       	in	r2, 0x3f	; 63
    2ec2:	80 91 48 03 	lds	r24, 0x0348
    2ec6:	90 91 49 03 	lds	r25, 0x0349
    2eca:	01 96       	adiw	r24, 0x01	; 1
    2ecc:	80 93 48 03 	sts	0x0348, r24
    2ed0:	90 93 49 03 	sts	0x0349, r25
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	80 91 4a 03 	lds	r24, 0x034A
    2eda:	89 1f       	adc	r24, r25
    2edc:	80 93 4a 03 	sts	0x034A, r24
    2ee0:	90 91 50 03 	lds	r25, 0x0350
    2ee4:	9c 5f       	subi	r25, 0xFC	; 252
    2ee6:	90 93 50 03 	sts	0x0350, r25
    2eea:	80 91 4f 03 	lds	r24, 0x034F
    2eee:	80 51       	subi	r24, 0x10	; 16
    2ef0:	97 42       	sbci	r25, 0x27	; 39
    2ef2:	c0 f0       	brcs	.+48     	; 0x2f24 <end>
    2ef4:	90 93 50 03 	sts	0x0350, r25
    2ef8:	80 93 4f 03 	sts	0x034F, r24
    2efc:	80 91 4b 03 	lds	r24, 0x034B
    2f00:	90 91 4c 03 	lds	r25, 0x034C
    2f04:	01 96       	adiw	r24, 0x01	; 1
    2f06:	80 93 4b 03 	sts	0x034B, r24
    2f0a:	90 93 4c 03 	sts	0x034C, r25
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	80 91 4d 03 	lds	r24, 0x034D
    2f14:	89 1f       	adc	r24, r25
    2f16:	80 93 4d 03 	sts	0x034D, r24
    2f1a:	80 91 4e 03 	lds	r24, 0x034E
    2f1e:	89 1f       	adc	r24, r25
    2f20:	80 93 4e 03 	sts	0x034E, r24

00002f24 <end>:
    2f24:	2f be       	out	0x3f, r2	; 63
    2f26:	9f 91       	pop	r25
    2f28:	8f 91       	pop	r24
    2f2a:	2f 90       	pop	r2
    2f2c:	18 95       	reti

00002f2e <ticks_to_microseconds>:
    2f2e:	6f 5f       	subi	r22, 0xFF	; 255
    2f30:	7f 4f       	sbci	r23, 0xFF	; 255
    2f32:	8f 4f       	sbci	r24, 0xFF	; 255
    2f34:	9f 4f       	sbci	r25, 0xFF	; 255
    2f36:	66 0f       	add	r22, r22
    2f38:	77 1f       	adc	r23, r23
    2f3a:	88 1f       	adc	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	25 e0       	ldi	r18, 0x05	; 5
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	40 e0       	ldi	r20, 0x00	; 0
    2f44:	50 e0       	ldi	r21, 0x00	; 0
    2f46:	0e 94 95 18 	call	0x312a	; 0x312a <__udivmodsi4>
    2f4a:	ca 01       	movw	r24, r20
    2f4c:	b9 01       	movw	r22, r18
    2f4e:	08 95       	ret

00002f50 <delay_ms>:
    2f50:	28 ee       	ldi	r18, 0xE8	; 232
    2f52:	33 e0       	ldi	r19, 0x03	; 3
    2f54:	09 c0       	rjmp	.+18     	; 0x2f68 <delay_ms+0x18>
    2f56:	f9 01       	movw	r30, r18
    2f58:	6f 93       	push	r22
    2f5a:	64 e0       	ldi	r22, 0x04	; 4
    2f5c:	6a 95       	dec	r22
    2f5e:	f1 f7       	brne	.-4      	; 0x2f5c <delay_ms+0xc>
    2f60:	6f 91       	pop	r22
    2f62:	31 97       	sbiw	r30, 0x01	; 1
    2f64:	c9 f7       	brne	.-14     	; 0x2f58 <delay_ms+0x8>
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	00 97       	sbiw	r24, 0x00	; 0
    2f6a:	a9 f7       	brne	.-22     	; 0x2f56 <delay_ms+0x6>
    2f6c:	08 95       	ret

00002f6e <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    2f6e:	6f 5f       	subi	r22, 0xFF	; 255
    2f70:	7f 4f       	sbci	r23, 0xFF	; 255
    2f72:	8f 4f       	sbci	r24, 0xFF	; 255
    2f74:	9f 4f       	sbci	r25, 0xFF	; 255
    2f76:	66 0f       	add	r22, r22
    2f78:	77 1f       	adc	r23, r23
    2f7a:	88 1f       	adc	r24, r24
    2f7c:	99 1f       	adc	r25, r25
    2f7e:	25 e0       	ldi	r18, 0x05	; 5
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	40 e0       	ldi	r20, 0x00	; 0
    2f84:	50 e0       	ldi	r21, 0x00	; 0
    2f86:	0e 94 95 18 	call	0x312a	; 0x312a <__udivmodsi4>
    2f8a:	ca 01       	movw	r24, r20
    2f8c:	b9 01       	movw	r22, r18
    2f8e:	08 95       	ret

00002f90 <_ZN13OrangutanTime17delayMillisecondsEj>:
    2f90:	28 ee       	ldi	r18, 0xE8	; 232
    2f92:	33 e0       	ldi	r19, 0x03	; 3
    2f94:	09 c0       	rjmp	.+18     	; 0x2fa8 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    2f96:	f9 01       	movw	r30, r18
    2f98:	6f 93       	push	r22
    2f9a:	64 e0       	ldi	r22, 0x04	; 4
    2f9c:	6a 95       	dec	r22
    2f9e:	f1 f7       	brne	.-4      	; 0x2f9c <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    2fa0:	6f 91       	pop	r22
    2fa2:	31 97       	sbiw	r30, 0x01	; 1
    2fa4:	c9 f7       	brne	.-14     	; 0x2f98 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    2fa6:	01 97       	sbiw	r24, 0x01	; 1
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	a9 f7       	brne	.-22     	; 0x2f96 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    2fac:	08 95       	ret

00002fae <_ZN13OrangutanTime5init2Ev>:
    2fae:	a0 e7       	ldi	r26, 0x70	; 112
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	8c 91       	ld	r24, X
    2fb4:	8e 7f       	andi	r24, 0xFE	; 254
    2fb6:	8c 93       	st	X, r24
    2fb8:	e0 eb       	ldi	r30, 0xB0	; 176
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	83 60       	ori	r24, 0x03	; 3
    2fc0:	80 83       	st	Z, r24
    2fc2:	e1 eb       	ldi	r30, 0xB1	; 177
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	80 81       	ld	r24, Z
    2fc8:	80 7f       	andi	r24, 0xF0	; 240
    2fca:	80 83       	st	Z, r24
    2fcc:	80 81       	ld	r24, Z
    2fce:	82 60       	ori	r24, 0x02	; 2
    2fd0:	80 83       	st	Z, r24
    2fd2:	b8 9a       	sbi	0x17, 0	; 23
    2fd4:	8c 91       	ld	r24, X
    2fd6:	81 60       	ori	r24, 0x01	; 1
    2fd8:	8c 93       	st	X, r24
    2fda:	78 94       	sei
    2fdc:	08 95       	ret

00002fde <_ZN13OrangutanTime4initEv>:
    2fde:	80 91 51 03 	lds	r24, 0x0351
    2fe2:	88 23       	and	r24, r24
    2fe4:	29 f4       	brne	.+10     	; 0x2ff0 <_ZN13OrangutanTime4initEv+0x12>
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	80 93 51 03 	sts	0x0351, r24
    2fec:	0e 94 d7 17 	call	0x2fae	; 0x2fae <_ZN13OrangutanTime5init2Ev>
    2ff0:	08 95       	ret

00002ff2 <_ZN13OrangutanTime2msEv>:
    2ff2:	0e 94 ef 17 	call	0x2fde	; 0x2fde <_ZN13OrangutanTime4initEv>
    2ff6:	e0 e7       	ldi	r30, 0x70	; 112
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	8e 7f       	andi	r24, 0xFE	; 254
    2ffe:	80 83       	st	Z, r24
    3000:	20 91 4b 03 	lds	r18, 0x034B
    3004:	30 91 4c 03 	lds	r19, 0x034C
    3008:	40 91 4d 03 	lds	r20, 0x034D
    300c:	50 91 4e 03 	lds	r21, 0x034E
    3010:	80 81       	ld	r24, Z
    3012:	81 60       	ori	r24, 0x01	; 1
    3014:	80 83       	st	Z, r24
    3016:	b9 01       	movw	r22, r18
    3018:	ca 01       	movw	r24, r20
    301a:	08 95       	ret

0000301c <get_ms>:
    301c:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <_ZN13OrangutanTime2msEv>
    3020:	08 95       	ret

00003022 <_ZN13OrangutanTime5ticksEv>:
    3022:	0e 94 ef 17 	call	0x2fde	; 0x2fde <_ZN13OrangutanTime4initEv>
    3026:	80 91 70 00 	lds	r24, 0x0070
    302a:	8e 7f       	andi	r24, 0xFE	; 254
    302c:	80 93 70 00 	sts	0x0070, r24
    3030:	60 91 b2 00 	lds	r22, 0x00B2
    3034:	80 91 47 03 	lds	r24, 0x0347
    3038:	90 91 48 03 	lds	r25, 0x0348
    303c:	a0 91 49 03 	lds	r26, 0x0349
    3040:	b0 91 4a 03 	lds	r27, 0x034A
    3044:	b8 99       	sbic	0x17, 0	; 23
    3046:	05 c0       	rjmp	.+10     	; 0x3052 <_ZN13OrangutanTime5ticksEv+0x30>
    3048:	26 2f       	mov	r18, r22
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	40 e0       	ldi	r20, 0x00	; 0
    304e:	50 e0       	ldi	r21, 0x00	; 0
    3050:	11 c0       	rjmp	.+34     	; 0x3074 <_ZN13OrangutanTime5ticksEv+0x52>
    3052:	80 91 b2 00 	lds	r24, 0x00B2
    3056:	20 91 47 03 	lds	r18, 0x0347
    305a:	30 91 48 03 	lds	r19, 0x0348
    305e:	40 91 49 03 	lds	r20, 0x0349
    3062:	50 91 4a 03 	lds	r21, 0x034A
    3066:	20 50       	subi	r18, 0x00	; 0
    3068:	3f 4f       	sbci	r19, 0xFF	; 255
    306a:	4f 4f       	sbci	r20, 0xFF	; 255
    306c:	5f 4f       	sbci	r21, 0xFF	; 255
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	a0 e0       	ldi	r26, 0x00	; 0
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	28 2b       	or	r18, r24
    3076:	39 2b       	or	r19, r25
    3078:	4a 2b       	or	r20, r26
    307a:	5b 2b       	or	r21, r27
    307c:	80 91 70 00 	lds	r24, 0x0070
    3080:	81 60       	ori	r24, 0x01	; 1
    3082:	80 93 70 00 	sts	0x0070, r24
    3086:	b9 01       	movw	r22, r18
    3088:	ca 01       	movw	r24, r20
    308a:	08 95       	ret

0000308c <get_ticks>:
    308c:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN13OrangutanTime5ticksEv>
    3090:	08 95       	ret

00003092 <_ZN13OrangutanTime5resetEv>:
    3092:	0e 94 ef 17 	call	0x2fde	; 0x2fde <_ZN13OrangutanTime4initEv>
    3096:	e0 e7       	ldi	r30, 0x70	; 112
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	80 81       	ld	r24, Z
    309c:	8e 7f       	andi	r24, 0xFE	; 254
    309e:	80 83       	st	Z, r24
    30a0:	10 92 4b 03 	sts	0x034B, r1
    30a4:	10 92 4c 03 	sts	0x034C, r1
    30a8:	10 92 4d 03 	sts	0x034D, r1
    30ac:	10 92 4e 03 	sts	0x034E, r1
    30b0:	10 92 50 03 	sts	0x0350, r1
    30b4:	10 92 4f 03 	sts	0x034F, r1
    30b8:	80 81       	ld	r24, Z
    30ba:	81 60       	ori	r24, 0x01	; 1
    30bc:	80 83       	st	Z, r24
    30be:	08 95       	ret

000030c0 <time_reset>:
    30c0:	0e 94 49 18 	call	0x3092	; 0x3092 <_ZN13OrangutanTime5resetEv>
    30c4:	08 95       	ret

000030c6 <__mulsi3>:
    30c6:	62 9f       	mul	r22, r18
    30c8:	d0 01       	movw	r26, r0
    30ca:	73 9f       	mul	r23, r19
    30cc:	f0 01       	movw	r30, r0
    30ce:	82 9f       	mul	r24, r18
    30d0:	e0 0d       	add	r30, r0
    30d2:	f1 1d       	adc	r31, r1
    30d4:	64 9f       	mul	r22, r20
    30d6:	e0 0d       	add	r30, r0
    30d8:	f1 1d       	adc	r31, r1
    30da:	92 9f       	mul	r25, r18
    30dc:	f0 0d       	add	r31, r0
    30de:	83 9f       	mul	r24, r19
    30e0:	f0 0d       	add	r31, r0
    30e2:	74 9f       	mul	r23, r20
    30e4:	f0 0d       	add	r31, r0
    30e6:	65 9f       	mul	r22, r21
    30e8:	f0 0d       	add	r31, r0
    30ea:	99 27       	eor	r25, r25
    30ec:	72 9f       	mul	r23, r18
    30ee:	b0 0d       	add	r27, r0
    30f0:	e1 1d       	adc	r30, r1
    30f2:	f9 1f       	adc	r31, r25
    30f4:	63 9f       	mul	r22, r19
    30f6:	b0 0d       	add	r27, r0
    30f8:	e1 1d       	adc	r30, r1
    30fa:	f9 1f       	adc	r31, r25
    30fc:	bd 01       	movw	r22, r26
    30fe:	cf 01       	movw	r24, r30
    3100:	11 24       	eor	r1, r1
    3102:	08 95       	ret

00003104 <__divmodhi4>:
    3104:	97 fb       	bst	r25, 7
    3106:	09 2e       	mov	r0, r25
    3108:	07 26       	eor	r0, r23
    310a:	0a d0       	rcall	.+20     	; 0x3120 <__divmodhi4_neg1>
    310c:	77 fd       	sbrc	r23, 7
    310e:	04 d0       	rcall	.+8      	; 0x3118 <__divmodhi4_neg2>
    3110:	65 d0       	rcall	.+202    	; 0x31dc <__udivmodhi4>
    3112:	06 d0       	rcall	.+12     	; 0x3120 <__divmodhi4_neg1>
    3114:	00 20       	and	r0, r0
    3116:	1a f4       	brpl	.+6      	; 0x311e <__divmodhi4_exit>

00003118 <__divmodhi4_neg2>:
    3118:	70 95       	com	r23
    311a:	61 95       	neg	r22
    311c:	7f 4f       	sbci	r23, 0xFF	; 255

0000311e <__divmodhi4_exit>:
    311e:	08 95       	ret

00003120 <__divmodhi4_neg1>:
    3120:	f6 f7       	brtc	.-4      	; 0x311e <__divmodhi4_exit>
    3122:	90 95       	com	r25
    3124:	81 95       	neg	r24
    3126:	9f 4f       	sbci	r25, 0xFF	; 255
    3128:	08 95       	ret

0000312a <__udivmodsi4>:
    312a:	a1 e2       	ldi	r26, 0x21	; 33
    312c:	1a 2e       	mov	r1, r26
    312e:	aa 1b       	sub	r26, r26
    3130:	bb 1b       	sub	r27, r27
    3132:	fd 01       	movw	r30, r26
    3134:	0d c0       	rjmp	.+26     	; 0x3150 <__udivmodsi4_ep>

00003136 <__udivmodsi4_loop>:
    3136:	aa 1f       	adc	r26, r26
    3138:	bb 1f       	adc	r27, r27
    313a:	ee 1f       	adc	r30, r30
    313c:	ff 1f       	adc	r31, r31
    313e:	a2 17       	cp	r26, r18
    3140:	b3 07       	cpc	r27, r19
    3142:	e4 07       	cpc	r30, r20
    3144:	f5 07       	cpc	r31, r21
    3146:	20 f0       	brcs	.+8      	; 0x3150 <__udivmodsi4_ep>
    3148:	a2 1b       	sub	r26, r18
    314a:	b3 0b       	sbc	r27, r19
    314c:	e4 0b       	sbc	r30, r20
    314e:	f5 0b       	sbc	r31, r21

00003150 <__udivmodsi4_ep>:
    3150:	66 1f       	adc	r22, r22
    3152:	77 1f       	adc	r23, r23
    3154:	88 1f       	adc	r24, r24
    3156:	99 1f       	adc	r25, r25
    3158:	1a 94       	dec	r1
    315a:	69 f7       	brne	.-38     	; 0x3136 <__udivmodsi4_loop>
    315c:	60 95       	com	r22
    315e:	70 95       	com	r23
    3160:	80 95       	com	r24
    3162:	90 95       	com	r25
    3164:	9b 01       	movw	r18, r22
    3166:	ac 01       	movw	r20, r24
    3168:	bd 01       	movw	r22, r26
    316a:	cf 01       	movw	r24, r30
    316c:	08 95       	ret

0000316e <__prologue_saves__>:
    316e:	2f 92       	push	r2
    3170:	3f 92       	push	r3
    3172:	4f 92       	push	r4
    3174:	5f 92       	push	r5
    3176:	6f 92       	push	r6
    3178:	7f 92       	push	r7
    317a:	8f 92       	push	r8
    317c:	9f 92       	push	r9
    317e:	af 92       	push	r10
    3180:	bf 92       	push	r11
    3182:	cf 92       	push	r12
    3184:	df 92       	push	r13
    3186:	ef 92       	push	r14
    3188:	ff 92       	push	r15
    318a:	0f 93       	push	r16
    318c:	1f 93       	push	r17
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
    3196:	ca 1b       	sub	r28, r26
    3198:	db 0b       	sbc	r29, r27
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	f8 94       	cli
    319e:	de bf       	out	0x3e, r29	; 62
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	cd bf       	out	0x3d, r28	; 61
    31a4:	09 94       	ijmp

000031a6 <__epilogue_restores__>:
    31a6:	2a 88       	ldd	r2, Y+18	; 0x12
    31a8:	39 88       	ldd	r3, Y+17	; 0x11
    31aa:	48 88       	ldd	r4, Y+16	; 0x10
    31ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    31ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    31b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    31b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    31b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    31b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    31b8:	b9 84       	ldd	r11, Y+9	; 0x09
    31ba:	c8 84       	ldd	r12, Y+8	; 0x08
    31bc:	df 80       	ldd	r13, Y+7	; 0x07
    31be:	ee 80       	ldd	r14, Y+6	; 0x06
    31c0:	fd 80       	ldd	r15, Y+5	; 0x05
    31c2:	0c 81       	ldd	r16, Y+4	; 0x04
    31c4:	1b 81       	ldd	r17, Y+3	; 0x03
    31c6:	aa 81       	ldd	r26, Y+2	; 0x02
    31c8:	b9 81       	ldd	r27, Y+1	; 0x01
    31ca:	ce 0f       	add	r28, r30
    31cc:	d1 1d       	adc	r29, r1
    31ce:	0f b6       	in	r0, 0x3f	; 63
    31d0:	f8 94       	cli
    31d2:	de bf       	out	0x3e, r29	; 62
    31d4:	0f be       	out	0x3f, r0	; 63
    31d6:	cd bf       	out	0x3d, r28	; 61
    31d8:	ed 01       	movw	r28, r26
    31da:	08 95       	ret

000031dc <__udivmodhi4>:
    31dc:	aa 1b       	sub	r26, r26
    31de:	bb 1b       	sub	r27, r27
    31e0:	51 e1       	ldi	r21, 0x11	; 17
    31e2:	07 c0       	rjmp	.+14     	; 0x31f2 <__udivmodhi4_ep>

000031e4 <__udivmodhi4_loop>:
    31e4:	aa 1f       	adc	r26, r26
    31e6:	bb 1f       	adc	r27, r27
    31e8:	a6 17       	cp	r26, r22
    31ea:	b7 07       	cpc	r27, r23
    31ec:	10 f0       	brcs	.+4      	; 0x31f2 <__udivmodhi4_ep>
    31ee:	a6 1b       	sub	r26, r22
    31f0:	b7 0b       	sbc	r27, r23

000031f2 <__udivmodhi4_ep>:
    31f2:	88 1f       	adc	r24, r24
    31f4:	99 1f       	adc	r25, r25
    31f6:	5a 95       	dec	r21
    31f8:	a9 f7       	brne	.-22     	; 0x31e4 <__udivmodhi4_loop>
    31fa:	80 95       	com	r24
    31fc:	90 95       	com	r25
    31fe:	bc 01       	movw	r22, r24
    3200:	cd 01       	movw	r24, r26
    3202:	08 95       	ret

00003204 <malloc>:
    3204:	cf 93       	push	r28
    3206:	df 93       	push	r29
    3208:	bc 01       	movw	r22, r24
    320a:	82 30       	cpi	r24, 0x02	; 2
    320c:	91 05       	cpc	r25, r1
    320e:	10 f4       	brcc	.+4      	; 0x3214 <malloc+0x10>
    3210:	62 e0       	ldi	r22, 0x02	; 2
    3212:	70 e0       	ldi	r23, 0x00	; 0
    3214:	a0 91 54 03 	lds	r26, 0x0354
    3218:	b0 91 55 03 	lds	r27, 0x0355
    321c:	ed 01       	movw	r28, r26
    321e:	e0 e0       	ldi	r30, 0x00	; 0
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	40 e0       	ldi	r20, 0x00	; 0
    3224:	50 e0       	ldi	r21, 0x00	; 0
    3226:	21 c0       	rjmp	.+66     	; 0x326a <malloc+0x66>
    3228:	88 81       	ld	r24, Y
    322a:	99 81       	ldd	r25, Y+1	; 0x01
    322c:	86 17       	cp	r24, r22
    322e:	97 07       	cpc	r25, r23
    3230:	69 f4       	brne	.+26     	; 0x324c <malloc+0x48>
    3232:	8a 81       	ldd	r24, Y+2	; 0x02
    3234:	9b 81       	ldd	r25, Y+3	; 0x03
    3236:	30 97       	sbiw	r30, 0x00	; 0
    3238:	19 f0       	breq	.+6      	; 0x3240 <malloc+0x3c>
    323a:	93 83       	std	Z+3, r25	; 0x03
    323c:	82 83       	std	Z+2, r24	; 0x02
    323e:	04 c0       	rjmp	.+8      	; 0x3248 <malloc+0x44>
    3240:	90 93 55 03 	sts	0x0355, r25
    3244:	80 93 54 03 	sts	0x0354, r24
    3248:	fe 01       	movw	r30, r28
    324a:	34 c0       	rjmp	.+104    	; 0x32b4 <malloc+0xb0>
    324c:	68 17       	cp	r22, r24
    324e:	79 07       	cpc	r23, r25
    3250:	38 f4       	brcc	.+14     	; 0x3260 <malloc+0x5c>
    3252:	41 15       	cp	r20, r1
    3254:	51 05       	cpc	r21, r1
    3256:	19 f0       	breq	.+6      	; 0x325e <malloc+0x5a>
    3258:	84 17       	cp	r24, r20
    325a:	95 07       	cpc	r25, r21
    325c:	08 f4       	brcc	.+2      	; 0x3260 <malloc+0x5c>
    325e:	ac 01       	movw	r20, r24
    3260:	fe 01       	movw	r30, r28
    3262:	8a 81       	ldd	r24, Y+2	; 0x02
    3264:	9b 81       	ldd	r25, Y+3	; 0x03
    3266:	9c 01       	movw	r18, r24
    3268:	e9 01       	movw	r28, r18
    326a:	20 97       	sbiw	r28, 0x00	; 0
    326c:	e9 f6       	brne	.-70     	; 0x3228 <malloc+0x24>
    326e:	41 15       	cp	r20, r1
    3270:	51 05       	cpc	r21, r1
    3272:	a9 f1       	breq	.+106    	; 0x32de <malloc+0xda>
    3274:	ca 01       	movw	r24, r20
    3276:	86 1b       	sub	r24, r22
    3278:	97 0b       	sbc	r25, r23
    327a:	04 97       	sbiw	r24, 0x04	; 4
    327c:	08 f4       	brcc	.+2      	; 0x3280 <malloc+0x7c>
    327e:	ba 01       	movw	r22, r20
    3280:	e0 e0       	ldi	r30, 0x00	; 0
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	2a c0       	rjmp	.+84     	; 0x32da <malloc+0xd6>
    3286:	8d 91       	ld	r24, X+
    3288:	9c 91       	ld	r25, X
    328a:	11 97       	sbiw	r26, 0x01	; 1
    328c:	84 17       	cp	r24, r20
    328e:	95 07       	cpc	r25, r21
    3290:	f9 f4       	brne	.+62     	; 0x32d0 <malloc+0xcc>
    3292:	64 17       	cp	r22, r20
    3294:	75 07       	cpc	r23, r21
    3296:	81 f4       	brne	.+32     	; 0x32b8 <malloc+0xb4>
    3298:	12 96       	adiw	r26, 0x02	; 2
    329a:	8d 91       	ld	r24, X+
    329c:	9c 91       	ld	r25, X
    329e:	13 97       	sbiw	r26, 0x03	; 3
    32a0:	30 97       	sbiw	r30, 0x00	; 0
    32a2:	19 f0       	breq	.+6      	; 0x32aa <malloc+0xa6>
    32a4:	93 83       	std	Z+3, r25	; 0x03
    32a6:	82 83       	std	Z+2, r24	; 0x02
    32a8:	04 c0       	rjmp	.+8      	; 0x32b2 <malloc+0xae>
    32aa:	90 93 55 03 	sts	0x0355, r25
    32ae:	80 93 54 03 	sts	0x0354, r24
    32b2:	fd 01       	movw	r30, r26
    32b4:	32 96       	adiw	r30, 0x02	; 2
    32b6:	4f c0       	rjmp	.+158    	; 0x3356 <malloc+0x152>
    32b8:	ca 01       	movw	r24, r20
    32ba:	86 1b       	sub	r24, r22
    32bc:	97 0b       	sbc	r25, r23
    32be:	fd 01       	movw	r30, r26
    32c0:	e8 0f       	add	r30, r24
    32c2:	f9 1f       	adc	r31, r25
    32c4:	61 93       	st	Z+, r22
    32c6:	71 93       	st	Z+, r23
    32c8:	02 97       	sbiw	r24, 0x02	; 2
    32ca:	8d 93       	st	X+, r24
    32cc:	9c 93       	st	X, r25
    32ce:	43 c0       	rjmp	.+134    	; 0x3356 <malloc+0x152>
    32d0:	fd 01       	movw	r30, r26
    32d2:	82 81       	ldd	r24, Z+2	; 0x02
    32d4:	93 81       	ldd	r25, Z+3	; 0x03
    32d6:	9c 01       	movw	r18, r24
    32d8:	d9 01       	movw	r26, r18
    32da:	10 97       	sbiw	r26, 0x00	; 0
    32dc:	a1 f6       	brne	.-88     	; 0x3286 <malloc+0x82>
    32de:	80 91 52 03 	lds	r24, 0x0352
    32e2:	90 91 53 03 	lds	r25, 0x0353
    32e6:	89 2b       	or	r24, r25
    32e8:	41 f4       	brne	.+16     	; 0x32fa <malloc+0xf6>
    32ea:	80 91 33 03 	lds	r24, 0x0333
    32ee:	90 91 34 03 	lds	r25, 0x0334
    32f2:	90 93 53 03 	sts	0x0353, r25
    32f6:	80 93 52 03 	sts	0x0352, r24
    32fa:	40 91 35 03 	lds	r20, 0x0335
    32fe:	50 91 36 03 	lds	r21, 0x0336
    3302:	41 15       	cp	r20, r1
    3304:	51 05       	cpc	r21, r1
    3306:	41 f4       	brne	.+16     	; 0x3318 <malloc+0x114>
    3308:	4d b7       	in	r20, 0x3d	; 61
    330a:	5e b7       	in	r21, 0x3e	; 62
    330c:	80 91 31 03 	lds	r24, 0x0331
    3310:	90 91 32 03 	lds	r25, 0x0332
    3314:	48 1b       	sub	r20, r24
    3316:	59 0b       	sbc	r21, r25
    3318:	20 91 52 03 	lds	r18, 0x0352
    331c:	30 91 53 03 	lds	r19, 0x0353
    3320:	24 17       	cp	r18, r20
    3322:	35 07       	cpc	r19, r21
    3324:	b0 f4       	brcc	.+44     	; 0x3352 <malloc+0x14e>
    3326:	ca 01       	movw	r24, r20
    3328:	82 1b       	sub	r24, r18
    332a:	93 0b       	sbc	r25, r19
    332c:	86 17       	cp	r24, r22
    332e:	97 07       	cpc	r25, r23
    3330:	80 f0       	brcs	.+32     	; 0x3352 <malloc+0x14e>
    3332:	ab 01       	movw	r20, r22
    3334:	4e 5f       	subi	r20, 0xFE	; 254
    3336:	5f 4f       	sbci	r21, 0xFF	; 255
    3338:	84 17       	cp	r24, r20
    333a:	95 07       	cpc	r25, r21
    333c:	50 f0       	brcs	.+20     	; 0x3352 <malloc+0x14e>
    333e:	42 0f       	add	r20, r18
    3340:	53 1f       	adc	r21, r19
    3342:	50 93 53 03 	sts	0x0353, r21
    3346:	40 93 52 03 	sts	0x0352, r20
    334a:	f9 01       	movw	r30, r18
    334c:	61 93       	st	Z+, r22
    334e:	71 93       	st	Z+, r23
    3350:	02 c0       	rjmp	.+4      	; 0x3356 <malloc+0x152>
    3352:	e0 e0       	ldi	r30, 0x00	; 0
    3354:	f0 e0       	ldi	r31, 0x00	; 0
    3356:	cf 01       	movw	r24, r30
    3358:	df 91       	pop	r29
    335a:	cf 91       	pop	r28
    335c:	08 95       	ret

0000335e <free>:
    335e:	cf 93       	push	r28
    3360:	df 93       	push	r29
    3362:	00 97       	sbiw	r24, 0x00	; 0
    3364:	09 f4       	brne	.+2      	; 0x3368 <free+0xa>
    3366:	50 c0       	rjmp	.+160    	; 0x3408 <free+0xaa>
    3368:	ec 01       	movw	r28, r24
    336a:	22 97       	sbiw	r28, 0x02	; 2
    336c:	1b 82       	std	Y+3, r1	; 0x03
    336e:	1a 82       	std	Y+2, r1	; 0x02
    3370:	a0 91 54 03 	lds	r26, 0x0354
    3374:	b0 91 55 03 	lds	r27, 0x0355
    3378:	10 97       	sbiw	r26, 0x00	; 0
    337a:	09 f1       	breq	.+66     	; 0x33be <free+0x60>
    337c:	40 e0       	ldi	r20, 0x00	; 0
    337e:	50 e0       	ldi	r21, 0x00	; 0
    3380:	ac 17       	cp	r26, r28
    3382:	bd 07       	cpc	r27, r29
    3384:	08 f1       	brcs	.+66     	; 0x33c8 <free+0x6a>
    3386:	bb 83       	std	Y+3, r27	; 0x03
    3388:	aa 83       	std	Y+2, r26	; 0x02
    338a:	fe 01       	movw	r30, r28
    338c:	21 91       	ld	r18, Z+
    338e:	31 91       	ld	r19, Z+
    3390:	e2 0f       	add	r30, r18
    3392:	f3 1f       	adc	r31, r19
    3394:	ae 17       	cp	r26, r30
    3396:	bf 07       	cpc	r27, r31
    3398:	79 f4       	brne	.+30     	; 0x33b8 <free+0x5a>
    339a:	8d 91       	ld	r24, X+
    339c:	9c 91       	ld	r25, X
    339e:	11 97       	sbiw	r26, 0x01	; 1
    33a0:	28 0f       	add	r18, r24
    33a2:	39 1f       	adc	r19, r25
    33a4:	2e 5f       	subi	r18, 0xFE	; 254
    33a6:	3f 4f       	sbci	r19, 0xFF	; 255
    33a8:	39 83       	std	Y+1, r19	; 0x01
    33aa:	28 83       	st	Y, r18
    33ac:	12 96       	adiw	r26, 0x02	; 2
    33ae:	8d 91       	ld	r24, X+
    33b0:	9c 91       	ld	r25, X
    33b2:	13 97       	sbiw	r26, 0x03	; 3
    33b4:	9b 83       	std	Y+3, r25	; 0x03
    33b6:	8a 83       	std	Y+2, r24	; 0x02
    33b8:	41 15       	cp	r20, r1
    33ba:	51 05       	cpc	r21, r1
    33bc:	71 f4       	brne	.+28     	; 0x33da <free+0x7c>
    33be:	d0 93 55 03 	sts	0x0355, r29
    33c2:	c0 93 54 03 	sts	0x0354, r28
    33c6:	20 c0       	rjmp	.+64     	; 0x3408 <free+0xaa>
    33c8:	12 96       	adiw	r26, 0x02	; 2
    33ca:	8d 91       	ld	r24, X+
    33cc:	9c 91       	ld	r25, X
    33ce:	13 97       	sbiw	r26, 0x03	; 3
    33d0:	ad 01       	movw	r20, r26
    33d2:	00 97       	sbiw	r24, 0x00	; 0
    33d4:	11 f0       	breq	.+4      	; 0x33da <free+0x7c>
    33d6:	dc 01       	movw	r26, r24
    33d8:	d3 cf       	rjmp	.-90     	; 0x3380 <free+0x22>
    33da:	fa 01       	movw	r30, r20
    33dc:	d3 83       	std	Z+3, r29	; 0x03
    33de:	c2 83       	std	Z+2, r28	; 0x02
    33e0:	21 91       	ld	r18, Z+
    33e2:	31 91       	ld	r19, Z+
    33e4:	e2 0f       	add	r30, r18
    33e6:	f3 1f       	adc	r31, r19
    33e8:	ce 17       	cp	r28, r30
    33ea:	df 07       	cpc	r29, r31
    33ec:	69 f4       	brne	.+26     	; 0x3408 <free+0xaa>
    33ee:	88 81       	ld	r24, Y
    33f0:	99 81       	ldd	r25, Y+1	; 0x01
    33f2:	28 0f       	add	r18, r24
    33f4:	39 1f       	adc	r19, r25
    33f6:	2e 5f       	subi	r18, 0xFE	; 254
    33f8:	3f 4f       	sbci	r19, 0xFF	; 255
    33fa:	fa 01       	movw	r30, r20
    33fc:	31 83       	std	Z+1, r19	; 0x01
    33fe:	20 83       	st	Z, r18
    3400:	8a 81       	ldd	r24, Y+2	; 0x02
    3402:	9b 81       	ldd	r25, Y+3	; 0x03
    3404:	93 83       	std	Z+3, r25	; 0x03
    3406:	82 83       	std	Z+2, r24	; 0x02
    3408:	df 91       	pop	r29
    340a:	cf 91       	pop	r28
    340c:	08 95       	ret

0000340e <fdevopen>:
    340e:	0f 93       	push	r16
    3410:	1f 93       	push	r17
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
    3416:	8c 01       	movw	r16, r24
    3418:	eb 01       	movw	r28, r22
    341a:	00 97       	sbiw	r24, 0x00	; 0
    341c:	31 f4       	brne	.+12     	; 0x342a <fdevopen+0x1c>
    341e:	61 15       	cp	r22, r1
    3420:	71 05       	cpc	r23, r1
    3422:	19 f4       	brne	.+6      	; 0x342a <fdevopen+0x1c>
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	38 c0       	rjmp	.+112    	; 0x349a <fdevopen+0x8c>
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	6e e0       	ldi	r22, 0x0E	; 14
    3430:	70 e0       	ldi	r23, 0x00	; 0
    3432:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <calloc>
    3436:	fc 01       	movw	r30, r24
    3438:	9c 01       	movw	r18, r24
    343a:	00 97       	sbiw	r24, 0x00	; 0
    343c:	71 f1       	breq	.+92     	; 0x349a <fdevopen+0x8c>
    343e:	80 e8       	ldi	r24, 0x80	; 128
    3440:	83 83       	std	Z+3, r24	; 0x03
    3442:	20 97       	sbiw	r28, 0x00	; 0
    3444:	71 f0       	breq	.+28     	; 0x3462 <fdevopen+0x54>
    3446:	d3 87       	std	Z+11, r29	; 0x0b
    3448:	c2 87       	std	Z+10, r28	; 0x0a
    344a:	81 e8       	ldi	r24, 0x81	; 129
    344c:	83 83       	std	Z+3, r24	; 0x03
    344e:	80 91 56 03 	lds	r24, 0x0356
    3452:	90 91 57 03 	lds	r25, 0x0357
    3456:	89 2b       	or	r24, r25
    3458:	21 f4       	brne	.+8      	; 0x3462 <fdevopen+0x54>
    345a:	f0 93 57 03 	sts	0x0357, r31
    345e:	e0 93 56 03 	sts	0x0356, r30
    3462:	01 15       	cp	r16, r1
    3464:	11 05       	cpc	r17, r1
    3466:	c9 f0       	breq	.+50     	; 0x349a <fdevopen+0x8c>
    3468:	11 87       	std	Z+9, r17	; 0x09
    346a:	00 87       	std	Z+8, r16	; 0x08
    346c:	83 81       	ldd	r24, Z+3	; 0x03
    346e:	82 60       	ori	r24, 0x02	; 2
    3470:	83 83       	std	Z+3, r24	; 0x03
    3472:	80 91 58 03 	lds	r24, 0x0358
    3476:	90 91 59 03 	lds	r25, 0x0359
    347a:	89 2b       	or	r24, r25
    347c:	71 f4       	brne	.+28     	; 0x349a <fdevopen+0x8c>
    347e:	f0 93 59 03 	sts	0x0359, r31
    3482:	e0 93 58 03 	sts	0x0358, r30
    3486:	80 91 5a 03 	lds	r24, 0x035A
    348a:	90 91 5b 03 	lds	r25, 0x035B
    348e:	89 2b       	or	r24, r25
    3490:	21 f4       	brne	.+8      	; 0x349a <fdevopen+0x8c>
    3492:	f0 93 5b 03 	sts	0x035B, r31
    3496:	e0 93 5a 03 	sts	0x035A, r30
    349a:	c9 01       	movw	r24, r18
    349c:	df 91       	pop	r29
    349e:	cf 91       	pop	r28
    34a0:	1f 91       	pop	r17
    34a2:	0f 91       	pop	r16
    34a4:	08 95       	ret

000034a6 <calloc>:
    34a6:	0f 93       	push	r16
    34a8:	1f 93       	push	r17
    34aa:	cf 93       	push	r28
    34ac:	df 93       	push	r29
    34ae:	68 9f       	mul	r22, r24
    34b0:	80 01       	movw	r16, r0
    34b2:	69 9f       	mul	r22, r25
    34b4:	10 0d       	add	r17, r0
    34b6:	78 9f       	mul	r23, r24
    34b8:	10 0d       	add	r17, r0
    34ba:	11 24       	eor	r1, r1
    34bc:	c8 01       	movw	r24, r16
    34be:	0e 94 02 19 	call	0x3204	; 0x3204 <malloc>
    34c2:	ec 01       	movw	r28, r24
    34c4:	00 97       	sbiw	r24, 0x00	; 0
    34c6:	29 f0       	breq	.+10     	; 0x34d2 <calloc+0x2c>
    34c8:	60 e0       	ldi	r22, 0x00	; 0
    34ca:	70 e0       	ldi	r23, 0x00	; 0
    34cc:	a8 01       	movw	r20, r16
    34ce:	0e 94 6f 1a 	call	0x34de	; 0x34de <memset>
    34d2:	ce 01       	movw	r24, r28
    34d4:	df 91       	pop	r29
    34d6:	cf 91       	pop	r28
    34d8:	1f 91       	pop	r17
    34da:	0f 91       	pop	r16
    34dc:	08 95       	ret

000034de <memset>:
    34de:	dc 01       	movw	r26, r24
    34e0:	01 c0       	rjmp	.+2      	; 0x34e4 <memset+0x6>
    34e2:	6d 93       	st	X+, r22
    34e4:	41 50       	subi	r20, 0x01	; 1
    34e6:	50 40       	sbci	r21, 0x00	; 0
    34e8:	e0 f7       	brcc	.-8      	; 0x34e2 <memset+0x4>
    34ea:	08 95       	ret

000034ec <_exit>:
    34ec:	f8 94       	cli

000034ee <__stop_program>:
    34ee:	ff cf       	rjmp	.-2      	; 0x34ee <__stop_program>
