
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000238  00800100  0000364e  000036e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000364e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800338  00800338  0000391a  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  0000391c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002591  00000000  00000000  000060dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000866d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001dc  00000000  00000000  000086ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000012b0  00000000  00000000  00008889  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003df  00000000  00000000  00009b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b0c  00000000  00000000  00009f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  0000ba24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ce9  00000000  00000000  0000bb64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000deb  00000000  00000000  0000c84d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__vector_11>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      6c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      70:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      7c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      80:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      84:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      88:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      8c:	97 04       	cpc	r9, r7
      8e:	a7 04       	cpc	r10, r7
      90:	be 04       	cpc	r11, r14
      92:	d0 04       	cpc	r13, r0
      94:	e3 04       	cpc	r14, r3
      96:	f5 04       	cpc	r15, r5
      98:	08 05       	cpc	r16, r8
      9a:	1c 05       	cpc	r17, r12
      9c:	2f 05       	cpc	r18, r15
      9e:	41 05       	cpc	r20, r1
      a0:	45 05       	cpc	r20, r5
      a2:	54 05       	cpc	r21, r4
      a4:	58 05       	cpc	r21, r8
      a6:	65 05       	cpc	r22, r5
      a8:	69 05       	cpc	r22, r9
      aa:	76 05       	cpc	r23, r6
      ac:	7a 05       	cpc	r23, r10
      ae:	88 05       	cpc	r24, r8
      b0:	8c 05       	cpc	r24, r12
      b2:	99 05       	cpc	r25, r9
      b4:	9c 05       	cpc	r25, r12
      b6:	aa 05       	cpc	r26, r10
      b8:	ae 05       	cpc	r26, r14
      ba:	cb 05       	cpc	r28, r11
      bc:	bd 05       	cpc	r27, r13
      be:	cf 05       	cpc	r28, r15
      c0:	d3 05       	cpc	r29, r3
      c2:	e0 05       	cpc	r30, r0
      c4:	e3 05       	cpc	r30, r3
      c6:	f1 05       	cpc	r31, r1
      c8:	f5 05       	cpc	r31, r5
      ca:	02 06       	cpc	r0, r18
      cc:	08 06       	cpc	r0, r24
      ce:	1e 06       	cpc	r1, r30
      d0:	28 06       	cpc	r2, r24
      d2:	3f 06       	cpc	r3, r31
      d4:	48 06       	cpc	r4, r24
      d6:	5f 06       	cpc	r5, r31
      d8:	68 06       	cpc	r6, r24
      da:	7f 06       	cpc	r7, r31
      dc:	88 06       	cpc	r8, r24
      de:	a0 06       	cpc	r10, r16
      e0:	63 09       	sbc	r22, r3
      e2:	89 09       	sbc	r24, r9
      e4:	ab 09       	sbc	r26, r11
      e6:	b8 09       	sbc	r27, r8
      e8:	bc 09       	sbc	r27, r12
      ea:	c7 09       	sbc	r28, r7
      ec:	ea 09       	sbc	r30, r10
      ee:	d2 09       	sbc	r29, r2
      f0:	dd 09       	sbc	r29, r13
      f2:	e4 09       	sbc	r30, r4
      f4:	00 0a       	sbc	r0, r16
      f6:	ea 09       	sbc	r30, r10
      f8:	ee 09       	sbc	r30, r14
      fa:	9c 0a       	sbc	r9, r28
      fc:	00 0a       	sbc	r0, r16
      fe:	a0 0a       	sbc	r10, r16
     100:	a0 0a       	sbc	r10, r16
     102:	a0 0a       	sbc	r10, r16
     104:	a0 0a       	sbc	r10, r16
     106:	a0 0a       	sbc	r10, r16
     108:	a0 0a       	sbc	r10, r16
     10a:	a0 0a       	sbc	r10, r16
     10c:	a0 0a       	sbc	r10, r16
     10e:	0b 0a       	sbc	r0, r27
     110:	16 0a       	sbc	r1, r22
     112:	1e 0a       	sbc	r1, r30
     114:	28 0a       	sbc	r2, r24
     116:	2c 0a       	sbc	r2, r28
     118:	39 0a       	sbc	r3, r25
     11a:	9c 0a       	sbc	r9, r28
     11c:	3f 0a       	sbc	r3, r31
     11e:	4d 0a       	sbc	r4, r29
     120:	59 0a       	sbc	r5, r25
     122:	66 0a       	sbc	r6, r22
     124:	7b 0a       	sbc	r7, r27
     126:	88 0a       	sbc	r8, r24
     128:	f4 0c       	add	r15, r4
     12a:	1b 0d       	add	r17, r11
     12c:	3d 0d       	add	r19, r13
     12e:	4a 0d       	add	r20, r10
     130:	4e 0d       	add	r20, r14
     132:	59 0d       	add	r21, r9
     134:	87 0d       	add	r24, r7
     136:	4a 0e       	add	r4, r26
     138:	4a 0e       	add	r4, r26
     13a:	4a 0e       	add	r4, r26
     13c:	4a 0e       	add	r4, r26
     13e:	4a 0e       	add	r4, r26
     140:	4a 0e       	add	r4, r26
     142:	4a 0e       	add	r4, r26
     144:	4a 0e       	add	r4, r26
     146:	64 0d       	add	r22, r4
     148:	6b 0d       	add	r22, r11
     14a:	76 0d       	add	r23, r6
     14c:	7c 0d       	add	r23, r12
     14e:	87 0d       	add	r24, r7
     150:	8b 0d       	add	r24, r11
     152:	46 0e       	add	r4, r22
     154:	a1 0d       	add	r26, r1
     156:	b5 0d       	add	r27, r5
     158:	c0 0d       	add	r28, r0
     15a:	c8 0d       	add	r28, r8
     15c:	d2 0d       	add	r29, r2
     15e:	d6 0d       	add	r29, r6
     160:	e3 0d       	add	r30, r3
     162:	46 0e       	add	r4, r22
     164:	e9 0d       	add	r30, r9
     166:	f7 0d       	add	r31, r7
     168:	03 0e       	add	r0, r19
     16a:	10 0e       	add	r1, r16
     16c:	25 0e       	add	r2, r21
     16e:	32 0e       	add	r3, r18
     170:	1b 11       	cpse	r17, r11
     172:	42 11       	cpse	r20, r2
     174:	60 11       	cpse	r22, r0
     176:	6d 11       	cpse	r22, r13
     178:	71 11       	cpse	r23, r1
     17a:	7c 11       	cpse	r23, r12
     17c:	a3 11       	cpse	r26, r3
     17e:	87 11       	cpse	r24, r7
     180:	92 11       	cpse	r25, r2
     182:	99 11       	cpse	r25, r9
     184:	b9 11       	cpse	r27, r9
     186:	a3 11       	cpse	r26, r3
     188:	a7 11       	cpse	r26, r7
     18a:	a6 12       	cpse	r10, r22
     18c:	b9 11       	cpse	r27, r9
     18e:	c4 11       	cpse	r28, r4
     190:	cb 11       	cpse	r28, r11
     192:	d6 11       	cpse	r29, r6
     194:	dc 11       	cpse	r29, r12
     196:	e7 11       	cpse	r30, r7
     198:	eb 11       	cpse	r30, r11
     19a:	a6 12       	cpse	r10, r22
     19c:	01 12       	cpse	r0, r17
     19e:	15 12       	cpse	r1, r21
     1a0:	20 12       	cpse	r2, r16
     1a2:	28 12       	cpse	r2, r24
     1a4:	32 12       	cpse	r3, r18
     1a6:	36 12       	cpse	r3, r22
     1a8:	43 12       	cpse	r4, r19
     1aa:	a6 12       	cpse	r10, r22
     1ac:	49 12       	cpse	r4, r25
     1ae:	57 12       	cpse	r5, r23
     1b0:	63 12       	cpse	r6, r19
     1b2:	70 12       	cpse	r7, r16
     1b4:	85 12       	cpse	r8, r21
     1b6:	92 12       	cpse	r9, r18

000001b8 <__ctors_end>:
     1b8:	11 24       	eor	r1, r1
     1ba:	1f be       	out	0x3f, r1	; 63
     1bc:	cf ef       	ldi	r28, 0xFF	; 255
     1be:	d0 e4       	ldi	r29, 0x40	; 64
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	cd bf       	out	0x3d, r28	; 61

000001c4 <__do_copy_data>:
     1c4:	13 e0       	ldi	r17, 0x03	; 3
     1c6:	a0 e0       	ldi	r26, 0x00	; 0
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	ee e4       	ldi	r30, 0x4E	; 78
     1cc:	f6 e3       	ldi	r31, 0x36	; 54
     1ce:	00 e0       	ldi	r16, 0x00	; 0
     1d0:	0b bf       	out	0x3b, r16	; 59
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x14>
     1d4:	07 90       	elpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	a8 33       	cpi	r26, 0x38	; 56
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0x10>

000001de <__do_clear_bss>:
     1de:	13 e0       	ldi	r17, 0x03	; 3
     1e0:	a8 e3       	ldi	r26, 0x38	; 56
     1e2:	b3 e0       	ldi	r27, 0x03	; 3
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	a0 36       	cpi	r26, 0x60	; 96
     1ea:	b1 07       	cpc	r27, r17
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	0e 94 68 02 	call	0x4d0	; 0x4d0 <main>
     1f2:	0c 94 25 1b 	jmp	0x364a	; 0x364a <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <_ZN16OrangutanDigital11isInputHighEh>:


	// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
	// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
	// the pin.
	inline static unsigned char isInputHigh(unsigned char pin)
     1fa:	48 2f       	mov	r20, r24
		io->pinRegister = 0;
		io->portRegister = 0;
		io->ddrRegister = 0;
		io->bitmask = 0;

		if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     1fc:	88 30       	cpi	r24, 0x08	; 8
     1fe:	58 f4       	brcc	.+22     	; 0x216 <_ZN16OrangutanDigital11isInputHighEh+0x1c>
		{
			io->pinRegister = (unsigned char*)&PIND;
			io->portRegister = (unsigned char*)&PORTD;
			io->ddrRegister = (unsigned char*)&DDRD;
			io->bitmask = 1 << pin;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	02 c0       	rjmp	.+4      	; 0x20a <_ZN16OrangutanDigital11isInputHighEh+0x10>
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	4a 95       	dec	r20
     20c:	e2 f7       	brpl	.-8      	; 0x206 <_ZN16OrangutanDigital11isInputHighEh+0xc>
     20e:	98 2f       	mov	r25, r24
     210:	e9 e2       	ldi	r30, 0x29	; 41
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	36 c0       	rjmp	.+108    	; 0x282 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)

		else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     216:	80 31       	cpi	r24, 0x10	; 16
     218:	78 f4       	brcc	.+30     	; 0x238 <_ZN16OrangutanDigital11isInputHighEh+0x3e>
		{
			io->pinRegister = (unsigned char*)&PINB;
			io->portRegister = (unsigned char*)&PORTB;
			io->ddrRegister = (unsigned char*)&DDRB;
			io->bitmask = 1 << (pin - 8);
     21a:	28 2f       	mov	r18, r24
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	28 50       	subi	r18, 0x08	; 8
     220:	30 40       	sbci	r19, 0x00	; 0
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	02 c0       	rjmp	.+4      	; 0x22c <_ZN16OrangutanDigital11isInputHighEh+0x32>
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	2a 95       	dec	r18
     22e:	e2 f7       	brpl	.-8      	; 0x228 <_ZN16OrangutanDigital11isInputHighEh+0x2e>
     230:	98 2f       	mov	r25, r24
     232:	e3 e2       	ldi	r30, 0x23	; 35
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	25 c0       	rjmp	.+74     	; 0x282 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     238:	88 31       	cpi	r24, 0x18	; 24
     23a:	78 f4       	brcc	.+30     	; 0x25a <_ZN16OrangutanDigital11isInputHighEh+0x60>
		{
			io->pinRegister = (unsigned char*)&PINC;
			io->portRegister = (unsigned char*)&PORTC;
			io->ddrRegister = (unsigned char*)&DDRC;
			io->bitmask = 1 << (pin - 16);
     23c:	28 2f       	mov	r18, r24
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	20 51       	subi	r18, 0x10	; 16
     242:	30 40       	sbci	r19, 0x00	; 0
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	02 c0       	rjmp	.+4      	; 0x24e <_ZN16OrangutanDigital11isInputHighEh+0x54>
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	2a 95       	dec	r18
     250:	e2 f7       	brpl	.-8      	; 0x24a <_ZN16OrangutanDigital11isInputHighEh+0x50>
     252:	98 2f       	mov	r25, r24
     254:	e6 e2       	ldi	r30, 0x26	; 38
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	14 c0       	rjmp	.+40     	; 0x282 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     25a:	80 32       	cpi	r24, 0x20	; 32
     25c:	20 f0       	brcs	.+8      	; 0x266 <_ZN16OrangutanDigital11isInputHighEh+0x6c>
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	e0 e0       	ldi	r30, 0x00	; 0
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	0e c0       	rjmp	.+28     	; 0x282 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		{
			io->pinRegister = (unsigned char*)&PINA;
			io->portRegister = (unsigned char*)&PORTA;
			io->ddrRegister = (unsigned char*)&DDRA;
			io->bitmask = 1 << (31 - pin);
     266:	2f e1       	ldi	r18, 0x1F	; 31
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	28 1b       	sub	r18, r24
     26c:	31 09       	sbc	r19, r1
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	02 c0       	rjmp	.+4      	; 0x278 <_ZN16OrangutanDigital11isInputHighEh+0x7e>
     274:	88 0f       	add	r24, r24
     276:	99 1f       	adc	r25, r25
     278:	2a 95       	dec	r18
     27a:	e2 f7       	brpl	.-8      	; 0x274 <_ZN16OrangutanDigital11isInputHighEh+0x7a>
     27c:	98 2f       	mov	r25, r24
     27e:	e0 e2       	ldi	r30, 0x20	; 32
     280:	f0 e0       	ldi	r31, 0x00	; 0

	// low-level method for reading the value of the PIN register for an pin or set of pins
	// described by an IOStruct pointer.
	inline static unsigned char getInputValue(struct IOStruct* ioPin)
	{
		return *(ioPin->pinRegister) & ioPin->bitmask;
     282:	80 81       	ld	r24, Z
	inline static unsigned char isInputHigh(unsigned char pin)
	{
		struct IOStruct registers;
		getIORegisters(&registers, pin);
		return getInputValue(&registers);
	}
     284:	89 23       	and	r24, r25
     286:	08 95       	ret

00000288 <__cxa_guard_acquire>:

extern "C" int __cxa_guard_acquire(__guard *); 
extern "C" void __cxa_guard_release (__guard *); 
extern "C" void __cxa_guard_abort (__guard *); 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);}; 
     288:	fc 01       	movw	r30, r24
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	88 23       	and	r24, r24
     292:	11 f4       	brne	.+4      	; 0x298 <__cxa_guard_acquire+0x10>
     294:	21 e0       	ldi	r18, 0x01	; 1
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	c9 01       	movw	r24, r18
     29a:	08 95       	ret

0000029c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;}; 
     29c:	fc 01       	movw	r30, r24
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	80 83       	st	Z, r24
     2a2:	08 95       	ret

000002a4 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
     2a4:	08 95       	ret

000002a6 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void); 
void __cxa_pure_virtual(void) {}; 
     2a6:	08 95       	ret

000002a8 <_Z15button_debounceiPi>:
	}
	return 1;
}*/


bool button_debounce(int counter, int *pstateButton)
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	8c 01       	movw	r16, r24
     2b2:	eb 01       	movw	r28, r22
{
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && OrangutanDigital::isInputHigh(IO_D0)){
     2b4:	88 81       	ld	r24, Y
     2b6:	99 81       	ldd	r25, Y+1	; 0x01
     2b8:	89 2b       	or	r24, r25
     2ba:	69 f4       	brne	.+26     	; 0x2d6 <_Z15button_debounceiPi+0x2e>
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     2c2:	88 23       	and	r24, r24
     2c4:	41 f0       	breq	.+16     	; 0x2d6 <_Z15button_debounceiPi+0x2e>
		counterRefPush = counter;
     2c6:	10 93 41 03 	sts	0x0341, r17
     2ca:	00 93 40 03 	sts	0x0340, r16
		*pstateButton = PRESSED;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	99 83       	std	Y+1, r25	; 0x01
     2d4:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     2d6:	88 81       	ld	r24, Y
     2d8:	99 81       	ldd	r25, Y+1	; 0x01
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f9 f4       	brne	.+62     	; 0x31c <_Z15button_debounceiPi+0x74>
		if(counter - counterRefPush > 15){
     2de:	80 91 40 03 	lds	r24, 0x0340
     2e2:	90 91 41 03 	lds	r25, 0x0341
     2e6:	98 01       	movw	r18, r16
     2e8:	28 1b       	sub	r18, r24
     2ea:	39 0b       	sbc	r19, r25
     2ec:	20 31       	cpi	r18, 0x10	; 16
     2ee:	31 05       	cpc	r19, r1
     2f0:	74 f0       	brlt	.+28     	; 0x30e <_Z15button_debounceiPi+0x66>
			if(!OrangutanDigital::isInputHigh(IO_D0)){
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     2f8:	88 23       	and	r24, r24
     2fa:	81 f4       	brne	.+32     	; 0x31c <_Z15button_debounceiPi+0x74>
				counterRefRel = counter;
     2fc:	10 93 3f 03 	sts	0x033F, r17
     300:	00 93 3e 03 	sts	0x033E, r16
				*pstateButton = RELEASED;
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	99 83       	std	Y+1, r25	; 0x01
     30a:	88 83       	st	Y, r24
     30c:	07 c0       	rjmp	.+14     	; 0x31c <_Z15button_debounceiPi+0x74>
			}
		}
		else if(!OrangutanDigital::isInputHigh(IO_D0)){
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     314:	88 23       	and	r24, r24
     316:	11 f4       	brne	.+4      	; 0x31c <_Z15button_debounceiPi+0x74>
			*pstateButton = NONE;
     318:	19 82       	std	Y+1, r1	; 0x01
     31a:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     31c:	88 81       	ld	r24, Y
     31e:	99 81       	ldd	r25, Y+1	; 0x01
     320:	02 97       	sbiw	r24, 0x02	; 2
     322:	d9 f4       	brne	.+54     	; 0x35a <_Z15button_debounceiPi+0xb2>
		if(OrangutanDigital::isInputHigh(IO_D0)){
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     32a:	88 23       	and	r24, r24
     32c:	49 f0       	breq	.+18     	; 0x340 <_Z15button_debounceiPi+0x98>
			*pstateButton = PRESSED;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	99 83       	std	Y+1, r25	; 0x01
     334:	88 83       	st	Y, r24
			counterRefPush = counter;
     336:	10 93 41 03 	sts	0x0341, r17
     33a:	00 93 40 03 	sts	0x0340, r16
     33e:	0d c0       	rjmp	.+26     	; 0x35a <_Z15button_debounceiPi+0xb2>
		}
		else if(counter - counterRefRel > 15){
     340:	80 91 3e 03 	lds	r24, 0x033E
     344:	90 91 3f 03 	lds	r25, 0x033F
     348:	08 1b       	sub	r16, r24
     34a:	19 0b       	sbc	r17, r25
     34c:	00 31       	cpi	r16, 0x10	; 16
     34e:	11 05       	cpc	r17, r1
     350:	24 f0       	brlt	.+8      	; 0x35a <_Z15button_debounceiPi+0xb2>
			*pstateButton = NONE;
     352:	19 82       	std	Y+1, r1	; 0x01
     354:	18 82       	st	Y, r1
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	01 c0       	rjmp	.+2      	; 0x35c <_Z15button_debounceiPi+0xb4>
			return true;
     35a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	08 95       	ret

00000366 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>:
	OrangutanLCD::print("END");
	}
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor, int totallength1, int totallength2, int totallength3, int totallength4, int totallength5, int steplength1, int steplength2, int steplength3, int steplength4, int steplength5)
     366:	2f 92       	push	r2
     368:	3f 92       	push	r3
     36a:	4f 92       	push	r4
     36c:	5f 92       	push	r5
     36e:	6f 92       	push	r6
     370:	7f 92       	push	r7
     372:	8f 92       	push	r8
     374:	9f 92       	push	r9
     376:	af 92       	push	r10
     378:	bf 92       	push	r11
     37a:	cf 92       	push	r12
     37c:	df 92       	push	r13
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	df 93       	push	r29
     388:	cf 93       	push	r28
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	2c 01       	movw	r4, r24
     390:	1a 01       	movw	r2, r20
     392:	39 01       	movw	r6, r18
{
//motor and write
	if( ((counter - counterRef) % (totallength1) ) < (steplength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     394:	fc 01       	movw	r30, r24
     396:	e6 1b       	sub	r30, r22
     398:	f7 0b       	sbc	r31, r23
     39a:	cf 01       	movw	r24, r30
     39c:	b4 01       	movw	r22, r8
     39e:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodhi4>
     3a2:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3a4:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3a6:	82 17       	cp	r24, r18
     3a8:	93 07       	cpc	r25, r19
     3aa:	34 f4       	brge	.+12     	; 0x3b8 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
     3ac:	67 28       	or	r6, r7
     3ae:	21 f0       	breq	.+8      	; 0x3b8 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     3b0:	80 91 38 03 	lds	r24, 0x0338
     3b4:	81 60       	ori	r24, 0x01	; 1
     3b6:	03 c0       	rjmp	.+6      	; 0x3be <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x58>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     3b8:	80 91 38 03 	lds	r24, 0x0338
     3bc:	8e 7f       	andi	r24, 0xFE	; 254
     3be:	80 93 38 03 	sts	0x0338, r24
	}
		if( ((counter - counterRef) % (totallength2) ) < (steplength2) && fixtureMotor)
     3c2:	cf 01       	movw	r24, r30
     3c4:	6d 89       	ldd	r22, Y+21	; 0x15
     3c6:	7e 89       	ldd	r23, Y+22	; 0x16
     3c8:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodhi4>
     3cc:	2f 8d       	ldd	r18, Y+31	; 0x1f
     3ce:	38 a1       	ldd	r19, Y+32	; 0x20
     3d0:	82 17       	cp	r24, r18
     3d2:	93 07       	cpc	r25, r19
     3d4:	34 f4       	brge	.+12     	; 0x3e2 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
     3d6:	01 2b       	or	r16, r17
     3d8:	21 f0       	breq	.+8      	; 0x3e2 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     3da:	80 91 38 03 	lds	r24, 0x0338
     3de:	88 60       	ori	r24, 0x08	; 8
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x82>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     3e2:	80 91 38 03 	lds	r24, 0x0338
     3e6:	87 7f       	andi	r24, 0xF7	; 247
     3e8:	80 93 38 03 	sts	0x0338, r24
	}
	if( ((counter - counterRef) % (totallength3) ) < (steplength3) && brush1Motor)
     3ec:	cf 01       	movw	r24, r30
     3ee:	6f 89       	ldd	r22, Y+23	; 0x17
     3f0:	78 8d       	ldd	r23, Y+24	; 0x18
     3f2:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodhi4>
     3f6:	29 a1       	ldd	r18, Y+33	; 0x21
     3f8:	3a a1       	ldd	r19, Y+34	; 0x22
     3fa:	82 17       	cp	r24, r18
     3fc:	93 07       	cpc	r25, r19
     3fe:	34 f4       	brge	.+12     	; 0x40c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
     400:	ef 28       	or	r14, r15
     402:	21 f0       	breq	.+8      	; 0x40c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     404:	80 91 38 03 	lds	r24, 0x0338
     408:	80 64       	ori	r24, 0x40	; 64
     40a:	03 c0       	rjmp	.+6      	; 0x412 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xac>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     40c:	80 91 38 03 	lds	r24, 0x0338
     410:	8f 7b       	andi	r24, 0xBF	; 191
     412:	80 93 38 03 	sts	0x0338, r24
	}

	if( ((counter - counterRef) % (totallength4) ) < (steplength4) && brush2Motor)
     416:	cf 01       	movw	r24, r30
     418:	69 8d       	ldd	r22, Y+25	; 0x19
     41a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     41c:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodhi4>
     420:	2b a1       	ldd	r18, Y+35	; 0x23
     422:	3c a1       	ldd	r19, Y+36	; 0x24
     424:	82 17       	cp	r24, r18
     426:	93 07       	cpc	r25, r19
     428:	34 f4       	brge	.+12     	; 0x436 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
     42a:	cd 28       	or	r12, r13
     42c:	21 f0       	breq	.+8      	; 0x436 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     42e:	80 91 39 03 	lds	r24, 0x0339
     432:	82 60       	ori	r24, 0x02	; 2
     434:	03 c0       	rjmp	.+6      	; 0x43c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd6>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     436:	80 91 39 03 	lds	r24, 0x0339
     43a:	8d 7f       	andi	r24, 0xFD	; 253
     43c:	80 93 39 03 	sts	0x0339, r24
	}

	if( ((counter - counterRefFive) % (totallength5) ) < (steplength5) && paperTowelMotor)
     440:	c2 01       	movw	r24, r4
     442:	82 19       	sub	r24, r2
     444:	93 09       	sbc	r25, r3
     446:	6b 8d       	ldd	r22, Y+27	; 0x1b
     448:	7c 8d       	ldd	r23, Y+28	; 0x1c
     44a:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodhi4>
     44e:	2d a1       	ldd	r18, Y+37	; 0x25
     450:	3e a1       	ldd	r19, Y+38	; 0x26
     452:	82 17       	cp	r24, r18
     454:	93 07       	cpc	r25, r19
     456:	34 f4       	brge	.+12     	; 0x464 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
     458:	ab 28       	or	r10, r11
     45a:	21 f0       	breq	.+8      	; 0x464 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     45c:	80 91 39 03 	lds	r24, 0x0339
     460:	80 61       	ori	r24, 0x10	; 16
     462:	03 c0       	rjmp	.+6      	; 0x46a <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x104>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     464:	80 91 39 03 	lds	r24, 0x0339
     468:	8f 7e       	andi	r24, 0xEF	; 239
     46a:	80 93 39 03 	sts	0x0339, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     46e:	80 e4       	ldi	r24, 0x40	; 64
     470:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
	i2c_write(0x2);									// write command byte
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     47a:	80 91 38 03 	lds	r24, 0x0338
     47e:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     482:	80 91 39 03 	lds	r24, 0x0339
     486:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
	i2c_stop();                            // set stop conditon = release bus
     48a:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z8i2c_stopv>

	i2c_start(I2C2+I2C_WRITE);
     48e:	82 e4       	ldi	r24, 0x42	; 66
     490:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
	i2c_write(0x2);
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
	i2c_write(u_outputByte0.outputByte0);
     49a:	80 91 3a 03 	lds	r24, 0x033A
     49e:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
	i2c_write(u_outputByte1.outputByte1);
     4a2:	80 91 3b 03 	lds	r24, 0x033B
     4a6:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
}
     4aa:	cf 91       	pop	r28
     4ac:	df 91       	pop	r29
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	df 90       	pop	r13
     4b8:	cf 90       	pop	r12
     4ba:	bf 90       	pop	r11
     4bc:	af 90       	pop	r10
     4be:	9f 90       	pop	r9
     4c0:	8f 90       	pop	r8
     4c2:	7f 90       	pop	r7
     4c4:	6f 90       	pop	r6
     4c6:	5f 90       	pop	r5
     4c8:	4f 90       	pop	r4
     4ca:	3f 90       	pop	r3
     4cc:	2f 90       	pop	r2
     4ce:	08 95       	ret

000004d0 <main>:
//int button_debounce(int counter, int *pcounterRefPush, int *pcounterRefRel, int *pstateButton);

bool button_debounce(int counter, int *pstateButton);


int main()   
     4d0:	2f 92       	push	r2
     4d2:	3f 92       	push	r3
     4d4:	4f 92       	push	r4
     4d6:	5f 92       	push	r5
     4d8:	6f 92       	push	r6
     4da:	7f 92       	push	r7
     4dc:	8f 92       	push	r8
     4de:	9f 92       	push	r9
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	df 93       	push	r29
     4f2:	cf 93       	push	r28
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	e3 97       	sbiw	r28, 0x33	; 51
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
	print35 = 1;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     504:	1a 82       	std	Y+2, r1	; 0x02
     506:	19 82       	std	Y+1, r1	; 0x01
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     508:	10 92 38 03 	sts	0x0338, r1
	u_motorByte1.motorByte1 = 0;  // initialize motorByte1
     50c:	10 92 39 03 	sts	0x0339, r1
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     510:	8f ef       	ldi	r24, 0xFF	; 255
     512:	80 93 3a 03 	sts	0x033A, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
     516:	80 93 3b 03 	sts	0x033B, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
     51a:	10 92 3c 03 	sts	0x033C, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
     51e:	10 92 3d 03 	sts	0x033D, r1
	
	OrangutanLCD::clear();
     522:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("BEGIN ");
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
// another C++ file.
inline unsigned long get_ms() { return OrangutanTime::ms(); }
inline unsigned long millis() { return OrangutanTime::ms(); }

inline void delay(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
inline void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
     52e:	88 ee       	ldi	r24, 0xE8	; 232
     530:	93 e0       	ldi	r25, 0x03	; 3
     532:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>
	
	delay_ms(1000);

    i2c_init();                                // init I2C interface
     536:	0e 94 31 13 	call	0x2662	; 0x2662 <_Z8i2c_initv>
	
    OrangutanLCD::print("INIT ");
     53a:	87 e0       	ldi	r24, 0x07	; 7
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
     542:	80 e4       	ldi	r24, 0x40	; 64
     544:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
     548:	c8 2e       	mov	r12, r24
	i2c_stop();
     54a:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z8i2c_stopv>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
     54e:	82 e4       	ldi	r24, 0x42	; 66
     550:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
     554:	08 2f       	mov	r16, r24
	i2c_stop();
     556:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z8i2c_stopv>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
     55a:	84 e4       	ldi	r24, 0x44	; 68
     55c:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
     560:	e8 2e       	mov	r14, r24
	i2c_stop();
     562:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z8i2c_stopv>
    
	OrangutanLCD::clear();
     566:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("START ");
     56a:	8d e0       	ldi	r24, 0x0D	; 13
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
     572:	10 e0       	ldi	r17, 0x00	; 0
     574:	dd 24       	eor	r13, r13
     576:	0c 29       	or	r16, r12
     578:	1d 29       	or	r17, r13
     57a:	ff 24       	eor	r15, r15
     57c:	0e 29       	or	r16, r14
     57e:	1f 29       	or	r17, r15
     580:	01 2b       	or	r16, r17
     582:	61 f0       	breq	.+24     	; 0x59c <main+0xcc>
        /* failed to issue start condition(s), possibly no device found */
        
		OrangutanLCD::print("NAK ");
     584:	84 e1       	ldi	r24, 0x14	; 20
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
		i2c_stop();
     58c:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z8i2c_stopv>
		OrangutanLCD::print("STOP ");
     590:	89 e1       	ldi	r24, 0x19	; 25
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     598:	0c 94 10 13 	jmp	0x2620	; 0x2620 <main+0x2150>
    }
	else {
		OrangutanLCD::print("ACK ");
     59c:	8f e1       	ldi	r24, 0x1F	; 31
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
        /* issuing start conditions ok, devices accessible */
		OrangutanLCD::print("BINIT ");
     5a4:	84 e2       	ldi	r24, 0x24	; 36
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
     5ac:	80 e4       	ldi	r24, 0x40	; 64
     5ae:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
		i2c_write(0x6);
     5b2:	86 e0       	ldi	r24, 0x06	; 6
     5b4:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
		i2c_write(0x0);
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
		i2c_write(0x0);
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
		i2c_stop();
     5c4:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z8i2c_stopv>
		
		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
     5c8:	82 e4       	ldi	r24, 0x42	; 66
     5ca:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
		i2c_write(0x6);
     5ce:	86 e0       	ldi	r24, 0x06	; 6
     5d0:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
		i2c_write(0x0);
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
		i2c_write(0x0);
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
		i2c_stop();
     5e0:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z8i2c_stopv>
     5e4:	88 ee       	ldi	r24, 0xE8	; 232
     5e6:	93 e0       	ldi	r25, 0x03	; 3
     5e8:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>
										//Registers default to input, so I2C3 is fine already


		delay_ms(1000);
		OrangutanLCD::clear();
     5ec:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>


		if(OrangutanDigital::isInputHigh(IO_D3))							//Tests if the switch is set to Maintenance Mode
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     5f6:	88 23       	and	r24, r24
     5f8:	09 f4       	brne	.+2      	; 0x5fc <main+0x12c>
     5fa:	31 c4       	rjmp	.+2146   	; 0xe5e <main+0x98e>
		{
			OrangutanLCD::print("MAINTENANCE");
     5fc:	8b e2       	ldi	r24, 0x2B	; 43
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     604:	88 ee       	ldi	r24, 0xE8	; 232
     606:	93 e0       	ldi	r25, 0x03	; 3
     608:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>
			
			//initialize
			int print = 0;
			int submode = -1;

			OrangutanLCD::clear();
     60c:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
			OrangutanLCD::print("SELECT MODE");
     610:	87 e3       	ldi	r24, 0x37	; 55
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     618:	ee 24       	eor	r14, r14
     61a:	ff 24       	eor	r15, r15
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = NONE;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     61c:	c7 01       	movw	r24, r14
     61e:	be 01       	movw	r22, r28
     620:	6f 5f       	subi	r22, 0xFF	; 255
     622:	7f 4f       	sbci	r23, 0xFF	; 255
     624:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPi>
     628:	18 2f       	mov	r17, r24
				counter++;
     62a:	08 94       	sec
     62c:	e1 1c       	adc	r14, r1
     62e:	f1 1c       	adc	r15, r1
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>

			OrangutanLCD::clear();
			OrangutanLCD::print("SELECT MODE");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
     638:	11 23       	and	r17, r17
     63a:	81 f3       	breq	.-32     	; 0x61c <main+0x14c>
				counter++;
				delay_ms(1);
			}
			buttonTriggered = false;
			counter = 0;
			OrangutanLCD::clear();
     63c:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
     640:	00 e0       	ldi	r16, 0x00	; 0
     642:	10 e0       	ldi	r17, 0x00	; 0
     644:	88 24       	eor	r8, r8
     646:	8a 94       	dec	r8
     648:	98 2c       	mov	r9, r8
     64a:	1b aa       	std	Y+51, r1	; 0x33
     64c:	1a aa       	std	Y+50, r1	; 0x32
     64e:	22 24       	eor	r2, r2
     650:	33 24       	eor	r3, r3
     652:	66 24       	eor	r6, r6
     654:	77 24       	eor	r7, r7
     656:	44 24       	eor	r4, r4
     658:	55 24       	eor	r5, r5
     65a:	18 86       	std	Y+8, r1	; 0x08
     65c:	1f 82       	std	Y+7, r1	; 0x07
     65e:	ee 24       	eor	r14, r14
     660:	ff 24       	eor	r15, r15
     662:	cc 24       	eor	r12, r12
     664:	dd 24       	eor	r13, r13
     666:	aa 24       	eor	r10, r10
     668:	bb 24       	eor	r11, r11
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     66a:	84 e4       	ldi	r24, 0x44	; 68
     66c:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     676:	85 e4       	ldi	r24, 0x45	; 69
     678:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     67c:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z11i2c_readAckv>
     680:	80 93 3c 03 	sts	0x033C, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     684:	0e 94 ac 13 	call	0x2758	; 0x2758 <_Z11i2c_readNakv>
     688:	80 93 3d 03 	sts	0x033D, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     68c:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z8i2c_stopv>
						stateButton = 0;
					}
				}*/

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     690:	c6 01       	movw	r24, r12
     692:	be 01       	movw	r22, r28
     694:	6f 5f       	subi	r22, 0xFF	; 255
     696:	7f 4f       	sbci	r23, 0xFF	; 255
     698:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPi>
     69c:	89 87       	std	Y+9, r24	; 0x09
							Output only 	--     starts testing each output individually and ends after testing all outputs
							Motor only		--     starts testing each motor individually and ends after testing all motors
							All				--     starts testing each input, then output, then motor, and ends after testing each

				*/
				if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != 0){
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     6a4:	88 23       	and	r24, r24
     6a6:	c1 f4       	brne	.+48     	; 0x6d8 <main+0x208>
     6a8:	82 e0       	ldi	r24, 0x02	; 2
     6aa:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     6ae:	88 23       	and	r24, r24
     6b0:	99 f4       	brne	.+38     	; 0x6d8 <main+0x208>
     6b2:	81 14       	cp	r8, r1
     6b4:	91 04       	cpc	r9, r1
     6b6:	81 f0       	breq	.+32     	; 0x6d8 <main+0x208>
					state = S0;
					submode = INPUT;
					OrangutanLCD::clear();
     6b8:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     6bc:	83 e4       	ldi	r24, 0x43	; 67
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	61 e0       	ldi	r22, 0x01	; 1
     6c8:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
     6cc:	00 e0       	ldi	r16, 0x00	; 0
     6ce:	10 e0       	ldi	r17, 0x00	; 0
     6d0:	88 24       	eor	r8, r8
     6d2:	99 24       	eor	r9, r9
     6d4:	ee 24       	eor	r14, r14
     6d6:	ff 24       	eor	r15, r15
					print = 0;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != 1){
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     6de:	88 23       	and	r24, r24
     6e0:	d9 f0       	breq	.+54     	; 0x718 <main+0x248>
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     6e8:	88 23       	and	r24, r24
     6ea:	b1 f4       	brne	.+44     	; 0x718 <main+0x248>
     6ec:	21 e0       	ldi	r18, 0x01	; 1
     6ee:	82 16       	cp	r8, r18
     6f0:	91 04       	cpc	r9, r1
     6f2:	91 f0       	breq	.+36     	; 0x718 <main+0x248>
					state = O0_ON;
					submode = OUTPUT;
					OrangutanLCD::clear();
     6f4:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("OUTPUTS");
     6f8:	8b e4       	ldi	r24, 0x4B	; 75
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
     708:	00 e0       	ldi	r16, 0x00	; 0
     70a:	10 e0       	ldi	r17, 0x00	; 0
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	82 2e       	mov	r8, r18
     710:	91 2c       	mov	r9, r1
     712:	98 e0       	ldi	r25, 0x08	; 8
     714:	e9 2e       	mov	r14, r25
     716:	f1 2c       	mov	r15, r1
					print = 0;
				}
				if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != 2){
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     71e:	88 23       	and	r24, r24
     720:	d9 f4       	brne	.+54     	; 0x758 <main+0x288>
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     728:	88 23       	and	r24, r24
     72a:	b1 f0       	breq	.+44     	; 0x758 <main+0x288>
     72c:	32 e0       	ldi	r19, 0x02	; 2
     72e:	83 16       	cp	r8, r19
     730:	91 04       	cpc	r9, r1
     732:	91 f0       	breq	.+36     	; 0x758 <main+0x288>
					state = M1_F;
					submode = MOTOR;
					OrangutanLCD::clear();
     734:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MOTORS ");
     738:	83 e5       	ldi	r24, 0x53	; 83
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	61 e0       	ldi	r22, 0x01	; 1
     744:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
     748:	00 e0       	ldi	r16, 0x00	; 0
     74a:	10 e0       	ldi	r17, 0x00	; 0
     74c:	82 e0       	ldi	r24, 0x02	; 2
     74e:	88 2e       	mov	r8, r24
     750:	91 2c       	mov	r9, r1
     752:	b0 e2       	ldi	r27, 0x20	; 32
     754:	eb 2e       	mov	r14, r27
     756:	f1 2c       	mov	r15, r1
					print = 0;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != 3){
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     75e:	88 23       	and	r24, r24
     760:	d1 f0       	breq	.+52     	; 0x796 <main+0x2c6>
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     768:	88 23       	and	r24, r24
     76a:	a9 f0       	breq	.+42     	; 0x796 <main+0x2c6>
     76c:	83 e0       	ldi	r24, 0x03	; 3
     76e:	88 16       	cp	r8, r24
     770:	91 04       	cpc	r9, r1
     772:	89 f0       	breq	.+34     	; 0x796 <main+0x2c6>
					state = S0;
					submode = ALL;
					OrangutanLCD::clear();
     774:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     778:	83 e4       	ldi	r24, 0x43	; 67
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
     788:	00 e0       	ldi	r16, 0x00	; 0
     78a:	10 e0       	ldi	r17, 0x00	; 0
     78c:	a3 e0       	ldi	r26, 0x03	; 3
     78e:	8a 2e       	mov	r8, r26
     790:	91 2c       	mov	r9, r1
     792:	ee 24       	eor	r14, r14
     794:	ff 24       	eor	r15, r15
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
     796:	99 85       	ldd	r25, Y+9	; 0x09
     798:	99 23       	and	r25, r25
     79a:	09 f4       	brne	.+2      	; 0x79e <main+0x2ce>
     79c:	bb c0       	rjmp	.+374    	; 0x914 <main+0x444>
					if(state <= S7){				//if it's doing the sensors
     79e:	a8 e0       	ldi	r26, 0x08	; 8
     7a0:	ea 16       	cp	r14, r26
     7a2:	f1 04       	cpc	r15, r1
     7a4:	ec f4       	brge	.+58     	; 0x7e0 <main+0x310>
						OrangutanLCD::gotoXY(0,1);
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
						buttonTriggered = false;
						state ++;
     7ae:	08 94       	sec
     7b0:	e1 1c       	adc	r14, r1
     7b2:	f1 1c       	adc	r15, r1
						counterRef = counter;
						print = 0;
						if(state == S7 + 1){		//accounts for possible end of maintenance mode after sensors
     7b4:	b8 e0       	ldi	r27, 0x08	; 8
     7b6:	eb 16       	cp	r14, r27
     7b8:	f1 04       	cpc	r15, r1
     7ba:	09 f0       	breq	.+2      	; 0x7be <main+0x2ee>
     7bc:	a8 c0       	rjmp	.+336    	; 0x90e <main+0x43e>
							OrangutanLCD::clear();
     7be:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
							if(submode == 0){
     7c2:	81 14       	cp	r8, r1
     7c4:	91 04       	cpc	r9, r1
     7c6:	11 f4       	brne	.+4      	; 0x7cc <main+0x2fc>
     7c8:	0c 94 23 13 	jmp	0x2646	; 0x2646 <main+0x2176>
								state = DONEM;
							}
							else{
								OrangutanLCD::print("OUTPUTS");
     7cc:	8b e4       	ldi	r24, 0x4B	; 75
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
								OrangutanLCD::gotoXY(0,1);
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
     7dc:	56 01       	movw	r10, r12
     7de:	42 c1       	rjmp	.+644    	; 0xa64 <main+0x594>
     7e0:	c7 01       	movw	r24, r14
     7e2:	81 70       	andi	r24, 0x01	; 1
     7e4:	90 70       	andi	r25, 0x00	; 0
							}
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
     7e6:	20 e2       	ldi	r18, 0x20	; 32
     7e8:	e2 16       	cp	r14, r18
     7ea:	f1 04       	cpc	r15, r1
     7ec:	74 f5       	brge	.+92     	; 0x84a <main+0x37a>
						if(state % 2 == 0){			//current state is an 'on' state
     7ee:	89 2b       	or	r24, r25
     7f0:	49 f4       	brne	.+18     	; 0x804 <main+0x334>
							OrangutanLCD::gotoXY(13,1);
     7f2:	8d e0       	ldi	r24, 0x0D	; 13
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("OFF");
     7fa:	8b e5       	ldi	r24, 0x5B	; 91
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     802:	04 c0       	rjmp	.+8      	; 0x80c <main+0x33c>
						}
						else{						//current state is an 'off' state
							OrangutanLCD::gotoXY(0,1);
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
						}
						buttonTriggered = false;
						state ++;
     80c:	08 94       	sec
     80e:	e1 1c       	adc	r14, r1
     810:	f1 1c       	adc	r15, r1
						counterRef = counter;
						print = 0;
						if(state == O11_OFF + 1){	//accounts for possible end of maintenance mode after outputs
     812:	30 e2       	ldi	r19, 0x20	; 32
     814:	e3 16       	cp	r14, r19
     816:	f1 04       	cpc	r15, r1
     818:	09 f0       	breq	.+2      	; 0x81c <main+0x34c>
     81a:	79 c0       	rjmp	.+242    	; 0x90e <main+0x43e>
							OrangutanLCD::clear();
     81c:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
							if(submode == 1){
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	88 16       	cp	r8, r24
     824:	91 04       	cpc	r9, r1
     826:	11 f4       	brne	.+4      	; 0x82c <main+0x35c>
     828:	0c 94 23 13 	jmp	0x2646	; 0x2646 <main+0x2176>
								state = DONEM;
							}
							else{
								u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
     82c:	80 91 38 03 	lds	r24, 0x0338
     830:	84 60       	ori	r24, 0x04	; 4
     832:	80 93 38 03 	sts	0x0338, r24
								OrangutanLCD::print("MOTORS");
     836:	8f e5       	ldi	r24, 0x5F	; 95
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
								OrangutanLCD::gotoXY(0,1);
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
     846:	56 01       	movw	r10, r12
     848:	e6 c1       	rjmp	.+972    	; 0xc16 <main+0x746>
							}
						}
					}
					else{							//if it's doing the motors
						buttonTriggered = false;
						state ++;
     84a:	87 01       	movw	r16, r14
     84c:	0f 5f       	subi	r16, 0xFF	; 255
     84e:	1f 4f       	sbci	r17, 0xFF	; 255
						counterRef = counter;
						print = 0;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
     850:	89 2b       	or	r24, r25
     852:	49 f4       	brne	.+18     	; 0x866 <main+0x396>
							OrangutanLCD::gotoXY(11,1);
     854:	8b e0       	ldi	r24, 0x0B	; 11
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("BACK ");
     85c:	86 e6       	ldi	r24, 0x66	; 102
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     864:	13 c0       	rjmp	.+38     	; 0x88c <main+0x3bc>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
     866:	06 32       	cpi	r16, 0x26	; 38
     868:	11 05       	cpc	r17, r1
     86a:	71 f1       	breq	.+92     	; 0x8c8 <main+0x3f8>
     86c:	07 32       	cpi	r16, 0x27	; 39
     86e:	11 05       	cpc	r17, r1
     870:	3c f4       	brge	.+14     	; 0x880 <main+0x3b0>
     872:	02 32       	cpi	r16, 0x22	; 34
     874:	11 05       	cpc	r17, r1
     876:	61 f0       	breq	.+24     	; 0x890 <main+0x3c0>
     878:	04 32       	cpi	r16, 0x24	; 36
     87a:	11 05       	cpc	r17, r1
     87c:	39 f4       	brne	.+14     	; 0x88c <main+0x3bc>
     87e:	14 c0       	rjmp	.+40     	; 0x8a8 <main+0x3d8>
     880:	08 32       	cpi	r16, 0x28	; 40
     882:	11 05       	cpc	r17, r1
     884:	69 f1       	breq	.+90     	; 0x8e0 <main+0x410>
     886:	0a 32       	cpi	r16, 0x2A	; 42
     888:	11 05       	cpc	r17, r1
     88a:	b1 f1       	breq	.+108    	; 0x8f8 <main+0x428>
     88c:	78 01       	movw	r14, r16
     88e:	3f c0       	rjmp	.+126    	; 0x90e <main+0x43e>
								case M1_B + 1:
									OrangutanLCD::gotoXY(0,1);
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
     898:	80 91 38 03 	lds	r24, 0x0338
     89c:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
     89e:	80 62       	ori	r24, 0x20	; 32
     8a0:	80 93 38 03 	sts	0x0338, r24
     8a4:	56 01       	movw	r10, r12
     8a6:	d7 c1       	rjmp	.+942    	; 0xc56 <main+0x786>
									break;
								case M2_B + 1:
									OrangutanLCD::gotoXY(0,1);
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	61 e0       	ldi	r22, 0x01	; 1
     8ac:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
     8b0:	80 91 38 03 	lds	r24, 0x0338
     8b4:	8f 7d       	andi	r24, 0xDF	; 223
     8b6:	80 93 38 03 	sts	0x0338, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
     8ba:	80 91 39 03 	lds	r24, 0x0339
     8be:	81 60       	ori	r24, 0x01	; 1
     8c0:	80 93 39 03 	sts	0x0339, r24
     8c4:	56 01       	movw	r10, r12
     8c6:	e7 c1       	rjmp	.+974    	; 0xc96 <main+0x7c6>
									break;
								case M3_B + 1:
									OrangutanLCD::gotoXY(0,1);
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
     8d0:	80 91 39 03 	lds	r24, 0x0339
     8d4:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
     8d6:	88 60       	ori	r24, 0x08	; 8
     8d8:	80 93 39 03 	sts	0x0339, r24
     8dc:	56 01       	movw	r10, r12
     8de:	fb c1       	rjmp	.+1014   	; 0xcd6 <main+0x806>
									break;
								case M4_B + 1:
									OrangutanLCD::gotoXY(0,1);
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
     8e8:	80 91 39 03 	lds	r24, 0x0339
     8ec:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
     8ee:	80 64       	ori	r24, 0x40	; 64
     8f0:	80 93 39 03 	sts	0x0339, r24
     8f4:	56 01       	movw	r10, r12
     8f6:	0f c2       	rjmp	.+1054   	; 0xd16 <main+0x846>
									break;
								case M5_B + 1:
									OrangutanLCD::clear();
     8f8:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
									u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
     8fc:	80 91 39 03 	lds	r24, 0x0339
     900:	8f 7b       	andi	r24, 0xBF	; 191
     902:	80 93 39 03 	sts	0x0339, r24
     906:	18 86       	std	Y+8, r1	; 0x08
     908:	1f 82       	std	Y+7, r1	; 0x07
     90a:	0c 94 23 13 	jmp	0x2646	; 0x2646 <main+0x2176>
     90e:	56 01       	movw	r10, r12
     910:	00 e0       	ldi	r16, 0x00	; 0
     912:	10 e0       	ldi	r17, 0x00	; 0
					print = 0;
					paperTowelMotor = 0;
				}*/

				//state actions
				switch (state) {
     914:	f7 01       	movw	r30, r14
     916:	ea 32       	cpi	r30, 0x2A	; 42
     918:	f1 05       	cpc	r31, r1
     91a:	08 f0       	brcs	.+2      	; 0x91e <main+0x44e>
     91c:	1a c2       	rjmp	.+1076   	; 0xd52 <main+0x882>
     91e:	ea 5b       	subi	r30, 0xBA	; 186
     920:	ff 4f       	sbci	r31, 0xFF	; 255
     922:	ee 0f       	add	r30, r30
     924:	ff 1f       	adc	r31, r31
     926:	05 90       	lpm	r0, Z+
     928:	f4 91       	lpm	r31, Z+
     92a:	e0 2d       	mov	r30, r0
     92c:	09 94       	ijmp
					case S0:
						if(print == 0){
     92e:	01 15       	cp	r16, r1
     930:	11 05       	cpc	r17, r1
     932:	31 f4       	brne	.+12     	; 0x940 <main+0x470>
							OrangutanLCD::print("SENSOR 0");
     934:	8c e6       	ldi	r24, 0x6C	; 108
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     93c:	01 e0       	ldi	r16, 0x01	; 1
     93e:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     940:	8f e0       	ldi	r24, 0x0F	; 15
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
	// position and will not span lines.
	static void print(unsigned long value);
	static void print(long value);
	static inline void print(unsigned int value)
	{
		print((unsigned long)value);
     948:	60 91 3c 03 	lds	r22, 0x033C
     94c:	10 c0       	rjmp	.+32     	; 0x96e <main+0x49e>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.plate);
						break;
					case S1:
						if(print == 0){
     94e:	01 15       	cp	r16, r1
     950:	11 05       	cpc	r17, r1
     952:	31 f4       	brne	.+12     	; 0x960 <main+0x490>
							OrangutanLCD::print("SENSOR 1");
     954:	85 e7       	ldi	r24, 0x75	; 117
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     95c:	01 e0       	ldi	r16, 0x01	; 1
     95e:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     960:	8f e0       	ldi	r24, 0x0F	; 15
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
     968:	60 91 3c 03 	lds	r22, 0x033C
     96c:	66 95       	lsr	r22
     96e:	61 70       	andi	r22, 0x01	; 1
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <_ZN12OrangutanLCD5printEm>
     97a:	eb c1       	rjmp	.+982    	; 0xd52 <main+0x882>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureLift);
						break;
					case S2:
						if(print == 0){
     97c:	01 15       	cp	r16, r1
     97e:	11 05       	cpc	r17, r1
     980:	31 f4       	brne	.+12     	; 0x98e <main+0x4be>
							OrangutanLCD::print("SENSOR 2");
     982:	8e e7       	ldi	r24, 0x7E	; 126
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     98a:	01 e0       	ldi	r16, 0x01	; 1
     98c:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     98e:	8f e0       	ldi	r24, 0x0F	; 15
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
     996:	60 91 3c 03 	lds	r22, 0x033C
     99a:	66 95       	lsr	r22
     99c:	66 95       	lsr	r22
     99e:	e7 cf       	rjmp	.-50     	; 0x96e <main+0x49e>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureHome);
						break;
					case S3:
						if(print == 0){
     9a0:	01 15       	cp	r16, r1
     9a2:	11 05       	cpc	r17, r1
     9a4:	31 f4       	brne	.+12     	; 0x9b2 <main+0x4e2>
							OrangutanLCD::print("SENSOR 3");
     9a6:	87 e8       	ldi	r24, 0x87	; 135
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     9ae:	01 e0       	ldi	r16, 0x01	; 1
     9b0:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     9b2:	8f e0       	ldi	r24, 0x0F	; 15
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
     9ba:	60 91 3c 03 	lds	r22, 0x033C
     9be:	66 95       	lsr	r22
     9c0:	66 95       	lsr	r22
     9c2:	66 95       	lsr	r22
     9c4:	d4 cf       	rjmp	.-88     	; 0x96e <main+0x49e>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixturePlate);
						break;
					case S4:
						if(print == 0){
     9c6:	01 15       	cp	r16, r1
     9c8:	11 05       	cpc	r17, r1
     9ca:	31 f4       	brne	.+12     	; 0x9d8 <main+0x508>
							OrangutanLCD::print("SENSOR 4");
     9cc:	80 e9       	ldi	r24, 0x90	; 144
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     9d4:	01 e0       	ldi	r16, 0x01	; 1
     9d6:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     9d8:	8f e0       	ldi	r24, 0x0F	; 15
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
     9e0:	60 91 3c 03 	lds	r22, 0x033C
     9e4:	62 95       	swap	r22
     9e6:	6f 70       	andi	r22, 0x0F	; 15
     9e8:	c2 cf       	rjmp	.-124    	; 0x96e <main+0x49e>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
						break;
					case S5:
						if(print == 0){
     9ea:	01 15       	cp	r16, r1
     9ec:	11 05       	cpc	r17, r1
     9ee:	31 f4       	brne	.+12     	; 0x9fc <main+0x52c>
							OrangutanLCD::print("SENSOR 5");
     9f0:	89 e9       	ldi	r24, 0x99	; 153
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     9f8:	01 e0       	ldi	r16, 0x01	; 1
     9fa:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     9fc:	8f e0       	ldi	r24, 0x0F	; 15
     9fe:	61 e0       	ldi	r22, 0x01	; 1
     a00:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
     a04:	60 91 3c 03 	lds	r22, 0x033C
     a08:	62 95       	swap	r22
     a0a:	66 95       	lsr	r22
     a0c:	67 70       	andi	r22, 0x07	; 7
     a0e:	af cf       	rjmp	.-162    	; 0x96e <main+0x49e>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
						break;
					case S6:
						if(print == 0){
     a10:	01 15       	cp	r16, r1
     a12:	11 05       	cpc	r17, r1
     a14:	31 f4       	brne	.+12     	; 0xa22 <main+0x552>
							OrangutanLCD::print("SENSOR 6");
     a16:	82 ea       	ldi	r24, 0xA2	; 162
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     a1e:	01 e0       	ldi	r16, 0x01	; 1
     a20:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a22:	8f e0       	ldi	r24, 0x0F	; 15
     a24:	61 e0       	ldi	r22, 0x01	; 1
     a26:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
     a2a:	60 91 3c 03 	lds	r22, 0x033C
     a2e:	62 95       	swap	r22
     a30:	66 95       	lsr	r22
     a32:	66 95       	lsr	r22
     a34:	63 70       	andi	r22, 0x03	; 3
     a36:	9b cf       	rjmp	.-202    	; 0x96e <main+0x49e>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry1);
						break;
					case S7:
						if(print == 0){
     a38:	01 15       	cp	r16, r1
     a3a:	11 05       	cpc	r17, r1
     a3c:	31 f4       	brne	.+12     	; 0xa4a <main+0x57a>
							OrangutanLCD::print("SENSOR 7");
     a3e:	8b ea       	ldi	r24, 0xAB	; 171
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     a46:	01 e0       	ldi	r16, 0x01	; 1
     a48:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     a4a:	8f e0       	ldi	r24, 0x0F	; 15
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
     a52:	60 91 3c 03 	lds	r22, 0x033C
     a56:	66 1f       	adc	r22, r22
     a58:	66 27       	eor	r22, r22
     a5a:	66 1f       	adc	r22, r22
     a5c:	89 cf       	rjmp	.-238    	; 0x970 <main+0x4a0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry2);
						break;
					case O0_ON:
						if(print == 0){
     a5e:	01 15       	cp	r16, r1
     a60:	11 05       	cpc	r17, r1
     a62:	31 f4       	brne	.+12     	; 0xa70 <main+0x5a0>
							OrangutanLCD::print("AC POWER     ON ");
     a64:	84 eb       	ldi	r24, 0xB4	; 180
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     a6c:	01 e0       	ldi	r16, 0x01	; 1
     a6e:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
     a70:	80 91 3a 03 	lds	r24, 0x033A
     a74:	8e 7f       	andi	r24, 0xFE	; 254
     a76:	80 93 3a 03 	sts	0x033A, r24
     a7a:	f8 e0       	ldi	r31, 0x08	; 8
     a7c:	ef 2e       	mov	r14, r31
     a7e:	f1 2c       	mov	r15, r1
     a80:	68 c1       	rjmp	.+720    	; 0xd52 <main+0x882>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
     a82:	80 91 3a 03 	lds	r24, 0x033A
     a86:	81 60       	ori	r24, 0x01	; 1
     a88:	0c c0       	rjmp	.+24     	; 0xaa2 <main+0x5d2>
						break;
					case O1_ON:
						if(print == 0){
     a8a:	01 15       	cp	r16, r1
     a8c:	11 05       	cpc	r17, r1
     a8e:	31 f4       	brne	.+12     	; 0xa9c <main+0x5cc>
							OrangutanLCD::print("BLOWER       ON  ");
     a90:	85 ec       	ldi	r24, 0xC5	; 197
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     a98:	01 e0       	ldi	r16, 0x01	; 1
     a9a:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     a9c:	80 91 3a 03 	lds	r24, 0x033A
     aa0:	8d 7f       	andi	r24, 0xFD	; 253
     aa2:	80 93 3a 03 	sts	0x033A, r24
     aa6:	55 c1       	rjmp	.+682    	; 0xd52 <main+0x882>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     aa8:	80 91 3a 03 	lds	r24, 0x033A
     aac:	82 60       	ori	r24, 0x02	; 2
     aae:	f9 cf       	rjmp	.-14     	; 0xaa2 <main+0x5d2>
						break;
					case O2_ON:
						if(print == 0){
     ab0:	01 15       	cp	r16, r1
     ab2:	11 05       	cpc	r17, r1
     ab4:	31 f4       	brne	.+12     	; 0xac2 <main+0x5f2>
							OrangutanLCD::print("PLATE STOP   ON ");
     ab6:	87 ed       	ldi	r24, 0xD7	; 215
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     abe:	01 e0       	ldi	r16, 0x01	; 1
     ac0:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
     ac2:	80 91 3a 03 	lds	r24, 0x033A
     ac6:	8b 7f       	andi	r24, 0xFB	; 251
     ac8:	ec cf       	rjmp	.-40     	; 0xaa2 <main+0x5d2>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
     aca:	80 91 3a 03 	lds	r24, 0x033A
     ace:	84 60       	ori	r24, 0x04	; 4
     ad0:	e8 cf       	rjmp	.-48     	; 0xaa2 <main+0x5d2>
						break;
					case O3_ON:
						if(print == 0){
     ad2:	01 15       	cp	r16, r1
     ad4:	11 05       	cpc	r17, r1
     ad6:	31 f4       	brne	.+12     	; 0xae4 <main+0x614>
							OrangutanLCD::print("PLATE RAISE  ON ");
     ad8:	88 ee       	ldi	r24, 0xE8	; 232
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     ae0:	01 e0       	ldi	r16, 0x01	; 1
     ae2:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     ae4:	80 91 3a 03 	lds	r24, 0x033A
     ae8:	87 7f       	andi	r24, 0xF7	; 247
     aea:	14 c0       	rjmp	.+40     	; 0xb14 <main+0x644>
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     aec:	80 91 3a 03 	lds	r24, 0x033A
     af0:	88 60       	ori	r24, 0x08	; 8
     af2:	d7 cf       	rjmp	.-82     	; 0xaa2 <main+0x5d2>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(print == 0){
     af4:	01 15       	cp	r16, r1
     af6:	11 05       	cpc	r17, r1
     af8:	31 f4       	brne	.+12     	; 0xb06 <main+0x636>
							OrangutanLCD::print("PLATE LOWER  ON ");
     afa:	89 ef       	ldi	r24, 0xF9	; 249
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     b02:	01 e0       	ldi	r16, 0x01	; 1
     b04:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     b06:	80 91 3a 03 	lds	r24, 0x033A
     b0a:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     b0c:	8f 7e       	andi	r24, 0xEF	; 239
     b0e:	c9 cf       	rjmp	.-110    	; 0xaa2 <main+0x5d2>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     b10:	80 91 3a 03 	lds	r24, 0x033A
     b14:	80 61       	ori	r24, 0x10	; 16
     b16:	c5 cf       	rjmp	.-118    	; 0xaa2 <main+0x5d2>
						break;
					case O5_ON:
						if(print == 0){
     b18:	01 15       	cp	r16, r1
     b1a:	11 05       	cpc	r17, r1
     b1c:	31 f4       	brne	.+12     	; 0xb2a <main+0x65a>
							OrangutanLCD::print("BRUSH1 RAISE ON ");
     b1e:	8a e0       	ldi	r24, 0x0A	; 10
     b20:	92 e0       	ldi	r25, 0x02	; 2
     b22:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     b26:	01 e0       	ldi	r16, 0x01	; 1
     b28:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     b2a:	80 91 3a 03 	lds	r24, 0x033A
     b2e:	8f 7d       	andi	r24, 0xDF	; 223
     b30:	13 c0       	rjmp	.+38     	; 0xb58 <main+0x688>
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     b32:	80 91 3a 03 	lds	r24, 0x033A
     b36:	0c c0       	rjmp	.+24     	; 0xb50 <main+0x680>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(print == 0){
     b38:	01 15       	cp	r16, r1
     b3a:	11 05       	cpc	r17, r1
     b3c:	31 f4       	brne	.+12     	; 0xb4a <main+0x67a>
							OrangutanLCD::print("BRUSH1 LOWER ON ");
     b3e:	8b e1       	ldi	r24, 0x1B	; 27
     b40:	92 e0       	ldi	r25, 0x02	; 2
     b42:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     b46:	01 e0       	ldi	r16, 0x01	; 1
     b48:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     b4a:	80 91 3a 03 	lds	r24, 0x033A
     b4e:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     b50:	80 62       	ori	r24, 0x20	; 32
     b52:	a7 cf       	rjmp	.-178    	; 0xaa2 <main+0x5d2>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     b54:	80 91 3a 03 	lds	r24, 0x033A
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	a3 cf       	rjmp	.-186    	; 0xaa2 <main+0x5d2>
						break;
					case O7_ON:
						if(print == 0){
     b5c:	01 15       	cp	r16, r1
     b5e:	11 05       	cpc	r17, r1
     b60:	31 f4       	brne	.+12     	; 0xb6e <main+0x69e>
							OrangutanLCD::print("BRUSH2 RAISE ON ");
     b62:	8c e2       	ldi	r24, 0x2C	; 44
     b64:	92 e0       	ldi	r25, 0x02	; 2
     b66:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     b6a:	01 e0       	ldi	r16, 0x01	; 1
     b6c:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     b6e:	80 91 3a 03 	lds	r24, 0x033A
     b72:	8f 77       	andi	r24, 0x7F	; 127
     b74:	80 93 3a 03 	sts	0x033A, r24
     b78:	12 c0       	rjmp	.+36     	; 0xb9e <main+0x6ce>
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(print == 0){
     b7a:	01 15       	cp	r16, r1
     b7c:	11 05       	cpc	r17, r1
     b7e:	31 f4       	brne	.+12     	; 0xb8c <main+0x6bc>
							OrangutanLCD::print("BRUSH2 LOWER ON ");
     b80:	8d e3       	ldi	r24, 0x3D	; 61
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     b88:	01 e0       	ldi	r16, 0x01	; 1
     b8a:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     b8c:	80 91 3b 03 	lds	r24, 0x033B
     b90:	8e 7f       	andi	r24, 0xFE	; 254
     b92:	80 93 3b 03 	sts	0x033B, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     b96:	80 91 3a 03 	lds	r24, 0x033A
     b9a:	80 68       	ori	r24, 0x80	; 128
     b9c:	82 cf       	rjmp	.-252    	; 0xaa2 <main+0x5d2>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     b9e:	80 91 3b 03 	lds	r24, 0x033B
     ba2:	81 60       	ori	r24, 0x01	; 1
     ba4:	32 c0       	rjmp	.+100    	; 0xc0a <main+0x73a>
						break;
					case O9_ON:
						if(print == 0){
     ba6:	01 15       	cp	r16, r1
     ba8:	11 05       	cpc	r17, r1
     baa:	31 f4       	brne	.+12     	; 0xbb8 <main+0x6e8>
							OrangutanLCD::print("PAPER RAISE  ON ");
     bac:	8e e4       	ldi	r24, 0x4E	; 78
     bae:	92 e0       	ldi	r25, 0x02	; 2
     bb0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     bb4:	01 e0       	ldi	r16, 0x01	; 1
     bb6:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     bb8:	80 91 3b 03 	lds	r24, 0x033B
     bbc:	8d 7f       	andi	r24, 0xFD	; 253
     bbe:	13 c0       	rjmp	.+38     	; 0xbe6 <main+0x716>
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     bc0:	80 91 3b 03 	lds	r24, 0x033B
     bc4:	0c c0       	rjmp	.+24     	; 0xbde <main+0x70e>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(print == 0){
     bc6:	01 15       	cp	r16, r1
     bc8:	11 05       	cpc	r17, r1
     bca:	31 f4       	brne	.+12     	; 0xbd8 <main+0x708>
							OrangutanLCD::print("PAPER LOWER  ON ");
     bcc:	8f e5       	ldi	r24, 0x5F	; 95
     bce:	92 e0       	ldi	r25, 0x02	; 2
     bd0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     bd4:	01 e0       	ldi	r16, 0x01	; 1
     bd6:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
     bd8:	80 91 3b 03 	lds	r24, 0x033B
     bdc:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     bde:	82 60       	ori	r24, 0x02	; 2
     be0:	14 c0       	rjmp	.+40     	; 0xc0a <main+0x73a>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
     be2:	80 91 3b 03 	lds	r24, 0x033B
     be6:	84 60       	ori	r24, 0x04	; 4
     be8:	10 c0       	rjmp	.+32     	; 0xc0a <main+0x73a>
						break;
					case O11_ON:
						if(print == 0){
     bea:	01 15       	cp	r16, r1
     bec:	11 05       	cpc	r17, r1
     bee:	31 f4       	brne	.+12     	; 0xbfc <main+0x72c>
							OrangutanLCD::print("AIR KNIFE    ON ");
     bf0:	80 e7       	ldi	r24, 0x70	; 112
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     bf8:	01 e0       	ldi	r16, 0x01	; 1
     bfa:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
     bfc:	80 91 3b 03 	lds	r24, 0x033B
     c00:	87 7f       	andi	r24, 0xF7	; 247
     c02:	03 c0       	rjmp	.+6      	; 0xc0a <main+0x73a>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
     c04:	80 91 3b 03 	lds	r24, 0x033B
     c08:	88 60       	ori	r24, 0x08	; 8
     c0a:	80 93 3b 03 	sts	0x033B, r24
     c0e:	a1 c0       	rjmp	.+322    	; 0xd52 <main+0x882>
						break;
					case M1_F:
						if(print == 0){
     c10:	01 15       	cp	r16, r1
     c12:	11 05       	cpc	r17, r1
     c14:	31 f4       	brne	.+12     	; 0xc22 <main+0x752>
							OrangutanLCD::print("LOADING    FRONT");
     c16:	81 e8       	ldi	r24, 0x81	; 129
     c18:	92 e0       	ldi	r25, 0x02	; 2
     c1a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     c1e:	01 e0       	ldi	r16, 0x01	; 1
     c20:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     c22:	80 91 38 03 	lds	r24, 0x0338
     c26:	8d 7f       	andi	r24, 0xFD	; 253
     c28:	80 93 38 03 	sts	0x0338, r24
     c2c:	a1 e0       	ldi	r26, 0x01	; 1
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	bb ab       	std	Y+51, r27	; 0x33
     c32:	aa ab       	std	Y+50, r26	; 0x32
     c34:	e0 e2       	ldi	r30, 0x20	; 32
     c36:	ee 2e       	mov	r14, r30
     c38:	f1 2c       	mov	r15, r1
     c3a:	8b c0       	rjmp	.+278    	; 0xd52 <main+0x882>
						plateLoadMotor =  1;
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
     c3c:	80 91 38 03 	lds	r24, 0x0338
     c40:	82 60       	ori	r24, 0x02	; 2
     c42:	80 93 38 03 	sts	0x0338, r24
     c46:	21 e0       	ldi	r18, 0x01	; 1
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	3b ab       	std	Y+51, r19	; 0x33
     c4c:	2a ab       	std	Y+50, r18	; 0x32
     c4e:	81 c0       	rjmp	.+258    	; 0xd52 <main+0x882>
						plateLoadMotor =  1;
						break;
					case M2_F:
						if(print == 0){
     c50:	01 15       	cp	r16, r1
     c52:	11 05       	cpc	r17, r1
     c54:	31 f4       	brne	.+12     	; 0xc62 <main+0x792>
							OrangutanLCD::print("DRIVE      FRONT");
     c56:	82 e9       	ldi	r24, 0x92	; 146
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     c5e:	01 e0       	ldi	r16, 0x01	; 1
     c60:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     c62:	80 91 38 03 	lds	r24, 0x0338
     c66:	8f 7e       	andi	r24, 0xEF	; 239
     c68:	80 93 38 03 	sts	0x0338, r24
     c6c:	1b aa       	std	Y+51, r1	; 0x33
     c6e:	1a aa       	std	Y+50, r1	; 0x32
     c70:	71 e0       	ldi	r23, 0x01	; 1
     c72:	27 2e       	mov	r2, r23
     c74:	31 2c       	mov	r3, r1
     c76:	62 e2       	ldi	r22, 0x22	; 34
     c78:	e6 2e       	mov	r14, r22
     c7a:	f1 2c       	mov	r15, r1
     c7c:	6a c0       	rjmp	.+212    	; 0xd52 <main+0x882>
						fixtureMotor =  1;
						plateLoadMotor = 0;
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     c7e:	80 91 38 03 	lds	r24, 0x0338
     c82:	80 61       	ori	r24, 0x10	; 16
     c84:	80 93 38 03 	sts	0x0338, r24
     c88:	51 e0       	ldi	r21, 0x01	; 1
     c8a:	25 2e       	mov	r2, r21
     c8c:	31 2c       	mov	r3, r1
     c8e:	61 c0       	rjmp	.+194    	; 0xd52 <main+0x882>
						fixtureMotor =  1;
						break;
					case M3_F:
						if(print == 0){
     c90:	01 15       	cp	r16, r1
     c92:	11 05       	cpc	r17, r1
     c94:	31 f4       	brne	.+12     	; 0xca2 <main+0x7d2>
							OrangutanLCD::print("BRUSH1     FRONT");
     c96:	83 ea       	ldi	r24, 0xA3	; 163
     c98:	92 e0       	ldi	r25, 0x02	; 2
     c9a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     c9e:	01 e0       	ldi	r16, 0x01	; 1
     ca0:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
     ca2:	80 91 38 03 	lds	r24, 0x0338
     ca6:	8f 77       	andi	r24, 0x7F	; 127
     ca8:	80 93 38 03 	sts	0x0338, r24
     cac:	22 24       	eor	r2, r2
     cae:	33 24       	eor	r3, r3
     cb0:	41 e0       	ldi	r20, 0x01	; 1
     cb2:	64 2e       	mov	r6, r20
     cb4:	71 2c       	mov	r7, r1
     cb6:	34 e2       	ldi	r19, 0x24	; 36
     cb8:	e3 2e       	mov	r14, r19
     cba:	f1 2c       	mov	r15, r1
     cbc:	4a c0       	rjmp	.+148    	; 0xd52 <main+0x882>
						brush1Motor =  1;
						fixtureMotor = 0;
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
     cbe:	80 91 38 03 	lds	r24, 0x0338
     cc2:	80 68       	ori	r24, 0x80	; 128
     cc4:	80 93 38 03 	sts	0x0338, r24
     cc8:	21 e0       	ldi	r18, 0x01	; 1
     cca:	62 2e       	mov	r6, r18
     ccc:	71 2c       	mov	r7, r1
     cce:	41 c0       	rjmp	.+130    	; 0xd52 <main+0x882>
						brush1Motor =  1;
						break;
					case M4_F:
						if(print == 0){
     cd0:	01 15       	cp	r16, r1
     cd2:	11 05       	cpc	r17, r1
     cd4:	31 f4       	brne	.+12     	; 0xce2 <main+0x812>
							OrangutanLCD::print("BRUSH2     FRONT");
     cd6:	84 eb       	ldi	r24, 0xB4	; 180
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     cde:	01 e0       	ldi	r16, 0x01	; 1
     ce0:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
     ce2:	80 91 39 03 	lds	r24, 0x0339
     ce6:	8b 7f       	andi	r24, 0xFB	; 251
     ce8:	80 93 39 03 	sts	0x0339, r24
     cec:	66 24       	eor	r6, r6
     cee:	77 24       	eor	r7, r7
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	49 2e       	mov	r4, r25
     cf4:	51 2c       	mov	r5, r1
     cf6:	86 e2       	ldi	r24, 0x26	; 38
     cf8:	e8 2e       	mov	r14, r24
     cfa:	f1 2c       	mov	r15, r1
     cfc:	2a c0       	rjmp	.+84     	; 0xd52 <main+0x882>
						brush2Motor =  1;
						brush1Motor = 0;
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
     cfe:	80 91 39 03 	lds	r24, 0x0339
     d02:	84 60       	ori	r24, 0x04	; 4
     d04:	80 93 39 03 	sts	0x0339, r24
     d08:	b1 e0       	ldi	r27, 0x01	; 1
     d0a:	4b 2e       	mov	r4, r27
     d0c:	51 2c       	mov	r5, r1
     d0e:	21 c0       	rjmp	.+66     	; 0xd52 <main+0x882>
						brush2Motor =  1;
						break;
					case M5_F:
						if(print == 0){
     d10:	01 15       	cp	r16, r1
     d12:	11 05       	cpc	r17, r1
     d14:	31 f4       	brne	.+12     	; 0xd22 <main+0x852>
							OrangutanLCD::print("PAPER      FRONT");
     d16:	85 ec       	ldi	r24, 0xC5	; 197
     d18:	92 e0       	ldi	r25, 0x02	; 2
     d1a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     d1e:	01 e0       	ldi	r16, 0x01	; 1
     d20:	10 e0       	ldi	r17, 0x00	; 0
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     d22:	80 91 39 03 	lds	r24, 0x0339
     d26:	8f 7d       	andi	r24, 0xDF	; 223
     d28:	80 93 39 03 	sts	0x0339, r24
     d2c:	44 24       	eor	r4, r4
     d2e:	55 24       	eor	r5, r5
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	98 87       	std	Y+8, r25	; 0x08
     d36:	8f 83       	std	Y+7, r24	; 0x07
     d38:	a8 e2       	ldi	r26, 0x28	; 40
     d3a:	ea 2e       	mov	r14, r26
     d3c:	f1 2c       	mov	r15, r1
     d3e:	09 c0       	rjmp	.+18     	; 0xd52 <main+0x882>
						paperTowelMotor =  1;
						brush2Motor = 0;
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
     d40:	80 91 39 03 	lds	r24, 0x0339
     d44:	80 62       	ori	r24, 0x20	; 32
     d46:	80 93 39 03 	sts	0x0339, r24
     d4a:	a1 e0       	ldi	r26, 0x01	; 1
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	b8 87       	std	Y+8, r27	; 0x08
     d50:	af 83       	std	Y+7, r26	; 0x07
				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				//motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);



				if( ((counter - counterRef) % (totallength1) ) < (steplength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     d52:	c6 01       	movw	r24, r12
     d54:	8a 19       	sub	r24, r10
     d56:	9b 09       	sbc	r25, r11
     d58:	62 e0       	ldi	r22, 0x02	; 2
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodhi4>
     d60:	9c 01       	movw	r18, r24
     d62:	18 16       	cp	r1, r24
     d64:	19 06       	cpc	r1, r25
     d66:	54 f0       	brlt	.+20     	; 0xd7c <main+0x8ac>
     d68:	8a a9       	ldd	r24, Y+50	; 0x32
     d6a:	9b a9       	ldd	r25, Y+51	; 0x33
     d6c:	89 2b       	or	r24, r25
     d6e:	31 f0       	breq	.+12     	; 0xd7c <main+0x8ac>
				{
					u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     d70:	80 91 38 03 	lds	r24, 0x0338
     d74:	81 60       	ori	r24, 0x01	; 1
     d76:	80 93 38 03 	sts	0x0338, r24
     d7a:	08 c0       	rjmp	.+16     	; 0xd8c <main+0x8bc>
				}
				else
				{
					u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     d7c:	80 91 38 03 	lds	r24, 0x0338
     d80:	8e 7f       	andi	r24, 0xFE	; 254
     d82:	80 93 38 03 	sts	0x0338, r24
				}

				if( ((counter - counterRef) % (totallength2) ) < (steplength2) && fixtureMotor)
     d86:	12 16       	cp	r1, r18
     d88:	13 06       	cpc	r1, r19
     d8a:	4c f0       	brlt	.+18     	; 0xd9e <main+0x8ce>
     d8c:	21 14       	cp	r2, r1
     d8e:	31 04       	cpc	r3, r1
     d90:	31 f0       	breq	.+12     	; 0xd9e <main+0x8ce>
				{
					u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     d92:	80 91 38 03 	lds	r24, 0x0338
     d96:	88 60       	ori	r24, 0x08	; 8
     d98:	80 93 38 03 	sts	0x0338, r24
     d9c:	08 c0       	rjmp	.+16     	; 0xdae <main+0x8de>
				}
				else
				{
					u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     d9e:	80 91 38 03 	lds	r24, 0x0338
     da2:	87 7f       	andi	r24, 0xF7	; 247
     da4:	80 93 38 03 	sts	0x0338, r24
				}

				if( ((counter - counterRef) % (totallength3) ) < (steplength3) && brush1Motor)
     da8:	12 16       	cp	r1, r18
     daa:	13 06       	cpc	r1, r19
     dac:	4c f0       	brlt	.+18     	; 0xdc0 <main+0x8f0>
     dae:	61 14       	cp	r6, r1
     db0:	71 04       	cpc	r7, r1
     db2:	31 f0       	breq	.+12     	; 0xdc0 <main+0x8f0>
				{
					u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     db4:	80 91 38 03 	lds	r24, 0x0338
     db8:	80 64       	ori	r24, 0x40	; 64
     dba:	80 93 38 03 	sts	0x0338, r24
     dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <main+0x900>
				}
				else
				{
					u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     dc0:	80 91 38 03 	lds	r24, 0x0338
     dc4:	8f 7b       	andi	r24, 0xBF	; 191
     dc6:	80 93 38 03 	sts	0x0338, r24
				}

				if( ((counter - counterRef) % (totallength4) ) < (steplength4) && brush2Motor)
     dca:	12 16       	cp	r1, r18
     dcc:	13 06       	cpc	r1, r19
     dce:	3c f0       	brlt	.+14     	; 0xdde <main+0x90e>
     dd0:	41 14       	cp	r4, r1
     dd2:	51 04       	cpc	r5, r1
     dd4:	21 f0       	breq	.+8      	; 0xdde <main+0x90e>
				{
					u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     dd6:	80 91 39 03 	lds	r24, 0x0339
     dda:	82 60       	ori	r24, 0x02	; 2
     ddc:	03 c0       	rjmp	.+6      	; 0xde4 <main+0x914>
				}
				else
				{
					u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     dde:	80 91 39 03 	lds	r24, 0x0339
     de2:	8d 7f       	andi	r24, 0xFD	; 253
     de4:	80 93 39 03 	sts	0x0339, r24
				}

				if( ((counter - counterRefFive) % (totallength5) ) < (steplength5) && paperTowelMotor)
     de8:	c0 fc       	sbrc	r12, 0
     dea:	08 c0       	rjmp	.+16     	; 0xdfc <main+0x92c>
     dec:	af 81       	ldd	r26, Y+7	; 0x07
     dee:	b8 85       	ldd	r27, Y+8	; 0x08
     df0:	ab 2b       	or	r26, r27
     df2:	21 f0       	breq	.+8      	; 0xdfc <main+0x92c>
				{
					u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     df4:	80 91 39 03 	lds	r24, 0x0339
     df8:	80 61       	ori	r24, 0x10	; 16
     dfa:	03 c0       	rjmp	.+6      	; 0xe02 <main+0x932>
				}
				else
				{
					u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     dfc:	80 91 39 03 	lds	r24, 0x0339
     e00:	8f 7e       	andi	r24, 0xEF	; 239
     e02:	80 93 39 03 	sts	0x0339, r24
				}

				i2c_start(I2C1+I2C_WRITE);
     e06:	80 e4       	ldi	r24, 0x40	; 64
     e08:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
				i2c_write(0x2);									// write command byte
     e0c:	82 e0       	ldi	r24, 0x02	; 2
     e0e:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
				i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     e12:	80 91 38 03 	lds	r24, 0x0338
     e16:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
       	 		i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     e1a:	80 91 39 03 	lds	r24, 0x0339
     e1e:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
       		 	i2c_stop();                            // set stop conditon = release bus
     e22:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z8i2c_stopv>

				i2c_start(I2C2+I2C_WRITE);
     e26:	82 e4       	ldi	r24, 0x42	; 66
     e28:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
				i2c_write(0x2);
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
				i2c_write(u_outputByte0.outputByte0);
     e32:	80 91 3a 03 	lds	r24, 0x033A
     e36:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
				i2c_write(u_outputByte1.outputByte1);
     e3a:	80 91 3b 03 	lds	r24, 0x033B
     e3e:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>
			counter = 0;
			OrangutanLCD::clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
     e4a:	ba e2       	ldi	r27, 0x2A	; 42
     e4c:	eb 16       	cp	r14, r27
     e4e:	f1 04       	cpc	r15, r1
     e50:	11 f4       	brne	.+4      	; 0xe56 <main+0x986>
     e52:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <main+0x211c>
				i2c_start(I2C2+I2C_WRITE);
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);

				counter ++;
     e56:	08 94       	sec
     e58:	c1 1c       	adc	r12, r1
     e5a:	d1 1c       	adc	r13, r1
     e5c:	06 cc       	rjmp	.-2036   	; 0x66a <main+0x19a>
				delay_ms(1);
			}
		}
		else{										//If switch is set to Run Mode
		
		OrangutanLCD::print("NORMAL");
     e5e:	86 ed       	ldi	r24, 0xD6	; 214
     e60:	92 e0       	ldi	r25, 0x02	; 2
     e62:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     e66:	88 ee       	ldi	r24, 0xE8	; 232
     e68:	93 e0       	ldi	r25, 0x03	; 3
     e6a:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
     e6e:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("SELECT CYCLE");
     e72:	8d ed       	ldi	r24, 0xDD	; 221
     e74:	92 e0       	ldi	r25, 0x02	; 2
     e76:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     e7a:	ee 24       	eor	r14, r14
     e7c:	ff 24       	eor	r15, r15
				else if(counter - counterRefRel > 15){
					button = 0;
					stateButton = NONE;
				}
			}*/
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     e7e:	c7 01       	movw	r24, r14
     e80:	be 01       	movw	r22, r28
     e82:	6f 5f       	subi	r22, 0xFF	; 255
     e84:	7f 4f       	sbci	r23, 0xFF	; 255
     e86:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPi>
     e8a:	18 2f       	mov	r17, r24
			counter++;
     e8c:	08 94       	sec
     e8e:	e1 1c       	adc	r14, r1
     e90:	f1 1c       	adc	r15, r1
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
		OrangutanLCD::print("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
     e9a:	11 23       	and	r17, r17
     e9c:	81 f3       	breq	.-32     	; 0xe7e <main+0x9ae>
			counter++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		OrangutanLCD::clear();
     e9e:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("CYCLE:");
     ea2:	8a ee       	ldi	r24, 0xEA	; 234
     ea4:	92 e0       	ldi	r25, 0x02	; 2
     ea6:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>

		//u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
		u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
     eaa:	80 91 38 03 	lds	r24, 0x0338
     eae:	80 62       	ori	r24, 0x20	; 32
     eb0:	80 93 38 03 	sts	0x0338, r24
		/*u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
		u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;*/

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     eba:	88 23       	and	r24, r24
     ebc:	11 f0       	breq	.+4      	; 0xec2 <main+0x9f2>
     ebe:	0c 94 16 13 	jmp	0x262c	; 0x262c <main+0x215c>
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
     ec8:	88 23       	and	r24, r24
     eca:	11 f0       	breq	.+4      	; 0xed0 <main+0xa00>
     ecc:	0c 94 16 13 	jmp	0x262c	; 0x262c <main+0x215c>
			OrangutanLCD::gotoXY(7,0);
     ed0:	87 e0       	ldi	r24, 0x07	; 7
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("FIRST B");
     ed8:	81 ef       	ldi	r24, 0xF1	; 241
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
     ee0:	21 e0       	ldi	r18, 0x01	; 1
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	3d a7       	std	Y+45, r19	; 0x2d
     ee6:	2c a7       	std	Y+44, r18	; 0x2c
     ee8:	3b a7       	std	Y+43, r19	; 0x2b
     eea:	2a a7       	std	Y+42, r18	; 0x2a
     eec:	19 a2       	std	Y+33, r1	; 0x21
     eee:	18 a2       	std	Y+32, r1	; 0x20
     ef0:	1b 8e       	std	Y+27, r1	; 0x1b
     ef2:	1a 8e       	std	Y+26, r1	; 0x1a
     ef4:	1d 8a       	std	Y+21, r1	; 0x15
     ef6:	1c 8a       	std	Y+20, r1	; 0x14
     ef8:	19 aa       	std	Y+49, r1	; 0x31
     efa:	18 aa       	std	Y+48, r1	; 0x30
     efc:	66 24       	eor	r6, r6
     efe:	77 24       	eor	r7, r7
     f00:	44 24       	eor	r4, r4
     f02:	55 24       	eor	r5, r5
     f04:	22 24       	eor	r2, r2
     f06:	33 24       	eor	r3, r3
     f08:	1f a6       	std	Y+47, r1	; 0x2f
     f0a:	1e a6       	std	Y+46, r1	; 0x2e
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     f0c:	84 e4       	ldi	r24, 0x44	; 68
     f0e:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     f18:	85 e4       	ldi	r24, 0x45	; 69
     f1a:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     f1e:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z11i2c_readAckv>
     f22:	80 93 3c 03 	sts	0x033C, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     f26:	0e 94 ac 13 	call	0x2758	; 0x2758 <_Z11i2c_readNakv>
     f2a:	80 93 3d 03 	sts	0x033D, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     f2e:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z8i2c_stopv>
				
				if(state != INIT){
     f32:	61 14       	cp	r6, r1
     f34:	71 04       	cpc	r7, r1
     f36:	79 f0       	breq	.+30     	; 0xf56 <main+0xa86>
					OrangutanLCD::gotoXY(0,1);
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
     f40:	89 ef       	ldi	r24, 0xF9	; 249
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
	};
	static inline void print(int value)
	{
		print((long)value);
     f48:	b3 01       	movw	r22, r6
     f4a:	88 27       	eor	r24, r24
     f4c:	77 fd       	sbrc	r23, 7
     f4e:	80 95       	com	r24
     f50:	98 2f       	mov	r25, r24
     f52:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <_ZN12OrangutanLCD5printEl>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     f56:	c2 01       	movw	r24, r4
     f58:	be 01       	movw	r22, r28
     f5a:	6f 5f       	subi	r22, 0xFF	; 255
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
     f62:	61 14       	cp	r6, r1
     f64:	71 04       	cpc	r7, r1
     f66:	29 f4       	brne	.+10     	; 0xf72 <main+0xaa2>
     f68:	88 23       	and	r24, r24
     f6a:	09 f4       	brne	.+2      	; 0xf6e <main+0xa9e>
     f6c:	43 c0       	rjmp	.+134    	; 0xff4 <main+0xb24>
     f6e:	12 01       	movw	r2, r4
     f70:	04 c0       	rjmp	.+8      	; 0xf7a <main+0xaaa>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
     f72:	31 e0       	ldi	r19, 0x01	; 1
     f74:	63 16       	cp	r6, r19
     f76:	71 04       	cpc	r7, r1
     f78:	49 f4       	brne	.+18     	; 0xf8c <main+0xabc>
     f7a:	c2 01       	movw	r24, r4
     f7c:	82 19       	sub	r24, r2
     f7e:	93 09       	sbc	r25, r3
     f80:	81 5a       	subi	r24, 0xA1	; 161
     f82:	9f 40       	sbci	r25, 0x0F	; 15
     f84:	0c f4       	brge	.+2      	; 0xf88 <main+0xab8>
     f86:	43 c0       	rjmp	.+134    	; 0x100e <main+0xb3e>
     f88:	12 01       	movw	r2, r4
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <main+0xac4>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
     f8c:	b2 e0       	ldi	r27, 0x02	; 2
     f8e:	6b 16       	cp	r6, r27
     f90:	71 04       	cpc	r7, r1
     f92:	49 f4       	brne	.+18     	; 0xfa6 <main+0xad6>
     f94:	c2 01       	movw	r24, r4
     f96:	82 19       	sub	r24, r2
     f98:	93 09       	sbc	r25, r3
     f9a:	85 36       	cpi	r24, 0x65	; 101
     f9c:	91 05       	cpc	r25, r1
     f9e:	0c f4       	brge	.+2      	; 0xfa2 <main+0xad2>
     fa0:	46 c0       	rjmp	.+140    	; 0x102e <main+0xb5e>
     fa2:	12 01       	movw	r2, r4
     fa4:	04 c0       	rjmp	.+8      	; 0xfae <main+0xade>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
     fa6:	23 e0       	ldi	r18, 0x03	; 3
     fa8:	62 16       	cp	r6, r18
     faa:	71 04       	cpc	r7, r1
     fac:	49 f4       	brne	.+18     	; 0xfc0 <main+0xaf0>
     fae:	c2 01       	movw	r24, r4
     fb0:	82 19       	sub	r24, r2
     fb2:	93 09       	sbc	r25, r3
     fb4:	81 5a       	subi	r24, 0xA1	; 161
     fb6:	9f 40       	sbci	r25, 0x0F	; 15
     fb8:	0c f4       	brge	.+2      	; 0xfbc <main+0xaec>
     fba:	49 c0       	rjmp	.+146    	; 0x104e <main+0xb7e>
     fbc:	12 01       	movw	r2, r4
     fbe:	04 c0       	rjmp	.+8      	; 0xfc8 <main+0xaf8>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
     fc0:	84 e0       	ldi	r24, 0x04	; 4
     fc2:	68 16       	cp	r6, r24
     fc4:	71 04       	cpc	r7, r1
     fc6:	49 f4       	brne	.+18     	; 0xfda <main+0xb0a>
     fc8:	c2 01       	movw	r24, r4
     fca:	82 19       	sub	r24, r2
     fcc:	93 09       	sbc	r25, r3
     fce:	89 5e       	subi	r24, 0xE9	; 233
     fd0:	93 40       	sbci	r25, 0x03	; 3
     fd2:	0c f4       	brge	.+2      	; 0xfd6 <main+0xb06>
     fd4:	4c c0       	rjmp	.+152    	; 0x106e <main+0xb9e>
     fd6:	12 01       	movw	r2, r4
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <main+0xb12>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
     fda:	b5 e0       	ldi	r27, 0x05	; 5
     fdc:	6b 16       	cp	r6, r27
     fde:	71 04       	cpc	r7, r1
     fe0:	49 f4       	brne	.+18     	; 0xff4 <main+0xb24>
     fe2:	c2 01       	movw	r24, r4
     fe4:	82 19       	sub	r24, r2
     fe6:	93 09       	sbc	r25, r3
     fe8:	85 36       	cpi	r24, 0x65	; 101
     fea:	91 05       	cpc	r25, r1
     fec:	0c f4       	brge	.+2      	; 0xff0 <main+0xb20>
     fee:	4d c0       	rjmp	.+154    	; 0x108a <main+0xbba>
     ff0:	12 01       	movw	r2, r4
     ff2:	04 c0       	rjmp	.+8      	; 0xffc <main+0xb2c>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totallength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
     ff4:	26 e0       	ldi	r18, 0x06	; 6
     ff6:	62 16       	cp	r6, r18
     ff8:	71 04       	cpc	r7, r1
     ffa:	61 f4       	brne	.+24     	; 0x1014 <main+0xb44>
     ffc:	c2 01       	movw	r24, r4
     ffe:	82 19       	sub	r24, r2
    1000:	93 09       	sbc	r25, r3
    1002:	81 5a       	subi	r24, 0xA1	; 161
    1004:	9f 40       	sbci	r25, 0x0F	; 15
    1006:	0c f4       	brge	.+2      	; 0x100a <main+0xb3a>
    1008:	50 c0       	rjmp	.+160    	; 0x10aa <main+0xbda>
    100a:	12 01       	movw	r2, r4
    100c:	07 c0       	rjmp	.+14     	; 0x101c <main+0xb4c>
    100e:	f1 e0       	ldi	r31, 0x01	; 1
    1010:	6f 2e       	mov	r6, r31
    1012:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    1014:	87 e0       	ldi	r24, 0x07	; 7
    1016:	68 16       	cp	r6, r24
    1018:	71 04       	cpc	r7, r1
    101a:	61 f4       	brne	.+24     	; 0x1034 <main+0xb64>
    101c:	c2 01       	movw	r24, r4
    101e:	82 19       	sub	r24, r2
    1020:	93 09       	sbc	r25, r3
    1022:	85 36       	cpi	r24, 0x65	; 101
    1024:	91 05       	cpc	r25, r1
    1026:	0c f4       	brge	.+2      	; 0x102a <main+0xb5a>
    1028:	50 c0       	rjmp	.+160    	; 0x10ca <main+0xbfa>
    102a:	12 01       	movw	r2, r4
    102c:	07 c0       	rjmp	.+14     	; 0x103c <main+0xb6c>
    102e:	e2 e0       	ldi	r30, 0x02	; 2
    1030:	6e 2e       	mov	r6, r30
    1032:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    1034:	98 e0       	ldi	r25, 0x08	; 8
    1036:	69 16       	cp	r6, r25
    1038:	71 04       	cpc	r7, r1
    103a:	61 f4       	brne	.+24     	; 0x1054 <main+0xb84>
    103c:	c2 01       	movw	r24, r4
    103e:	82 19       	sub	r24, r2
    1040:	93 09       	sbc	r25, r3
    1042:	85 36       	cpi	r24, 0x65	; 101
    1044:	91 05       	cpc	r25, r1
    1046:	0c f4       	brge	.+2      	; 0x104a <main+0xb7a>
    1048:	4e c0       	rjmp	.+156    	; 0x10e6 <main+0xc16>
    104a:	12 01       	movw	r2, r4
    104c:	07 c0       	rjmp	.+14     	; 0x105c <main+0xb8c>
    104e:	73 e0       	ldi	r23, 0x03	; 3
    1050:	67 2e       	mov	r6, r23
    1052:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    1054:	a9 e0       	ldi	r26, 0x09	; 9
    1056:	6a 16       	cp	r6, r26
    1058:	71 04       	cpc	r7, r1
    105a:	61 f4       	brne	.+24     	; 0x1074 <main+0xba4>
    105c:	c2 01       	movw	r24, r4
    105e:	82 19       	sub	r24, r2
    1060:	93 09       	sbc	r25, r3
    1062:	81 5a       	subi	r24, 0xA1	; 161
    1064:	9f 40       	sbci	r25, 0x0F	; 15
    1066:	0c f4       	brge	.+2      	; 0x106a <main+0xb9a>
    1068:	4e c0       	rjmp	.+156    	; 0x1106 <main+0xc36>
    106a:	12 01       	movw	r2, r4
    106c:	07 c0       	rjmp	.+14     	; 0x107c <main+0xbac>
    106e:	64 e0       	ldi	r22, 0x04	; 4
    1070:	66 2e       	mov	r6, r22
    1072:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    1074:	2a e0       	ldi	r18, 0x0A	; 10
    1076:	62 16       	cp	r6, r18
    1078:	71 04       	cpc	r7, r1
    107a:	51 f4       	brne	.+20     	; 0x1090 <main+0xbc0>
    107c:	c2 01       	movw	r24, r4
    107e:	82 19       	sub	r24, r2
    1080:	93 09       	sbc	r25, r3
    1082:	85 36       	cpi	r24, 0x65	; 101
    1084:	91 05       	cpc	r25, r1
    1086:	44 f4       	brge	.+16     	; 0x1098 <main+0xbc8>
    1088:	4e c0       	rjmp	.+156    	; 0x1126 <main+0xc56>
    108a:	55 e0       	ldi	r21, 0x05	; 5
    108c:	65 2e       	mov	r6, r21
    108e:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totallength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1090:	3b e0       	ldi	r19, 0x0B	; 11
    1092:	63 16       	cp	r6, r19
    1094:	71 04       	cpc	r7, r1
    1096:	61 f4       	brne	.+24     	; 0x10b0 <main+0xbe0>
    1098:	c2 01       	movw	r24, r4
    109a:	82 19       	sub	r24, r2
    109c:	93 09       	sbc	r25, r3
    109e:	81 5a       	subi	r24, 0xA1	; 161
    10a0:	9f 40       	sbci	r25, 0x0F	; 15
    10a2:	0c f4       	brge	.+2      	; 0x10a6 <main+0xbd6>
    10a4:	50 c0       	rjmp	.+160    	; 0x1146 <main+0xc76>
    10a6:	12 01       	movw	r2, r4
    10a8:	07 c0       	rjmp	.+14     	; 0x10b8 <main+0xbe8>
    10aa:	46 e0       	ldi	r20, 0x06	; 6
    10ac:	64 2e       	mov	r6, r20
    10ae:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    10b0:	bc e0       	ldi	r27, 0x0C	; 12
    10b2:	6b 16       	cp	r6, r27
    10b4:	71 04       	cpc	r7, r1
    10b6:	61 f4       	brne	.+24     	; 0x10d0 <main+0xc00>
    10b8:	c2 01       	movw	r24, r4
    10ba:	82 19       	sub	r24, r2
    10bc:	93 09       	sbc	r25, r3
    10be:	85 36       	cpi	r24, 0x65	; 101
    10c0:	91 05       	cpc	r25, r1
    10c2:	0c f4       	brge	.+2      	; 0x10c6 <main+0xbf6>
    10c4:	4e c0       	rjmp	.+156    	; 0x1162 <main+0xc92>
    10c6:	12 01       	movw	r2, r4
    10c8:	07 c0       	rjmp	.+14     	; 0x10d8 <main+0xc08>
    10ca:	37 e0       	ldi	r19, 0x07	; 7
    10cc:	63 2e       	mov	r6, r19
    10ce:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    10d0:	2d e0       	ldi	r18, 0x0D	; 13
    10d2:	62 16       	cp	r6, r18
    10d4:	71 04       	cpc	r7, r1
    10d6:	51 f4       	brne	.+20     	; 0x10ec <main+0xc1c>
    10d8:	c2 01       	movw	r24, r4
    10da:	82 19       	sub	r24, r2
    10dc:	93 09       	sbc	r25, r3
    10de:	81 5a       	subi	r24, 0xA1	; 161
    10e0:	9f 40       	sbci	r25, 0x0F	; 15
    10e2:	44 f4       	brge	.+16     	; 0x10f4 <main+0xc24>
    10e4:	4f c0       	rjmp	.+158    	; 0x1184 <main+0xcb4>
    10e6:	28 e0       	ldi	r18, 0x08	; 8
    10e8:	62 2e       	mov	r6, r18
    10ea:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
					}
				if(state == B1STOP2 && counter - counterRef > pWait){
    10ec:	8e e0       	ldi	r24, 0x0E	; 14
    10ee:	68 16       	cp	r6, r24
    10f0:	71 04       	cpc	r7, r1
    10f2:	61 f4       	brne	.+24     	; 0x110c <main+0xc3c>
    10f4:	c2 01       	movw	r24, r4
    10f6:	82 19       	sub	r24, r2
    10f8:	93 09       	sbc	r25, r3
    10fa:	85 36       	cpi	r24, 0x65	; 101
    10fc:	91 05       	cpc	r25, r1
    10fe:	0c f4       	brge	.+2      	; 0x1102 <main+0xc32>
    1100:	53 c0       	rjmp	.+166    	; 0x11a8 <main+0xcd8>
    1102:	12 01       	movw	r2, r4
    1104:	07 c0       	rjmp	.+14     	; 0x1114 <main+0xc44>
    1106:	99 e0       	ldi	r25, 0x09	; 9
    1108:	69 2e       	mov	r6, r25
    110a:	71 2c       	mov	r7, r1
					state = 23;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totallength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    110c:	97 e1       	ldi	r25, 0x17	; 23
    110e:	69 16       	cp	r6, r25
    1110:	71 04       	cpc	r7, r1
    1112:	61 f4       	brne	.+24     	; 0x112c <main+0xc5c>
    1114:	c2 01       	movw	r24, r4
    1116:	82 19       	sub	r24, r2
    1118:	93 09       	sbc	r25, r3
    111a:	81 5a       	subi	r24, 0xA1	; 161
    111c:	9f 40       	sbci	r25, 0x0F	; 15
    111e:	0c f4       	brge	.+2      	; 0x1122 <main+0xc52>
    1120:	53 c0       	rjmp	.+166    	; 0x11c8 <main+0xcf8>
    1122:	12 01       	movw	r2, r4
    1124:	07 c0       	rjmp	.+14     	; 0x1134 <main+0xc64>
    1126:	8a e0       	ldi	r24, 0x0A	; 10
    1128:	68 2e       	mov	r6, r24
    112a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    112c:	b8 e1       	ldi	r27, 0x18	; 24
    112e:	6b 16       	cp	r6, r27
    1130:	71 04       	cpc	r7, r1
    1132:	61 f4       	brne	.+24     	; 0x114c <main+0xc7c>
    1134:	c2 01       	movw	r24, r4
    1136:	82 19       	sub	r24, r2
    1138:	93 09       	sbc	r25, r3
    113a:	85 36       	cpi	r24, 0x65	; 101
    113c:	91 05       	cpc	r25, r1
    113e:	0c f4       	brge	.+2      	; 0x1142 <main+0xc72>
    1140:	51 c0       	rjmp	.+162    	; 0x11e4 <main+0xd14>
    1142:	12 01       	movw	r2, r4
    1144:	07 c0       	rjmp	.+14     	; 0x1154 <main+0xc84>
    1146:	0b e0       	ldi	r16, 0x0B	; 11
    1148:	60 2e       	mov	r6, r16
    114a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    114c:	29 e1       	ldi	r18, 0x19	; 25
    114e:	62 16       	cp	r6, r18
    1150:	71 04       	cpc	r7, r1
    1152:	51 f4       	brne	.+20     	; 0x1168 <main+0xc98>
    1154:	c2 01       	movw	r24, r4
    1156:	82 19       	sub	r24, r2
    1158:	93 09       	sbc	r25, r3
    115a:	81 5a       	subi	r24, 0xA1	; 161
    115c:	9f 40       	sbci	r25, 0x0F	; 15
    115e:	44 f4       	brge	.+16     	; 0x1170 <main+0xca0>
    1160:	51 c0       	rjmp	.+162    	; 0x1204 <main+0xd34>
    1162:	1c e0       	ldi	r17, 0x0C	; 12
    1164:	61 2e       	mov	r6, r17
    1166:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totallength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    1168:	8a e1       	ldi	r24, 0x1A	; 26
    116a:	68 16       	cp	r6, r24
    116c:	71 04       	cpc	r7, r1
    116e:	69 f4       	brne	.+26     	; 0x118a <main+0xcba>
    1170:	c2 01       	movw	r24, r4
    1172:	82 19       	sub	r24, r2
    1174:	93 09       	sbc	r25, r3
    1176:	81 5a       	subi	r24, 0xA1	; 161
    1178:	9f 40       	sbci	r25, 0x0F	; 15
    117a:	0c f4       	brge	.+2      	; 0x117e <main+0xcae>
    117c:	53 c0       	rjmp	.+166    	; 0x1224 <main+0xd54>
    117e:	5f a6       	std	Y+47, r5	; 0x2f
    1180:	4e a6       	std	Y+46, r4	; 0x2e
    1182:	07 c0       	rjmp	.+14     	; 0x1192 <main+0xcc2>
    1184:	bd e0       	ldi	r27, 0x0D	; 13
    1186:	6b 2e       	mov	r6, r27
    1188:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    118a:	bb e1       	ldi	r27, 0x1B	; 27
    118c:	6b 16       	cp	r6, r27
    118e:	71 04       	cpc	r7, r1
    1190:	71 f4       	brne	.+28     	; 0x11ae <main+0xcde>
    1192:	c2 01       	movw	r24, r4
    1194:	2e a5       	ldd	r18, Y+46	; 0x2e
    1196:	3f a5       	ldd	r19, Y+47	; 0x2f
    1198:	82 1b       	sub	r24, r18
    119a:	93 0b       	sbc	r25, r19
    119c:	85 36       	cpi	r24, 0x65	; 101
    119e:	91 05       	cpc	r25, r1
    11a0:	0c f4       	brge	.+2      	; 0x11a4 <main+0xcd4>
    11a2:	50 c0       	rjmp	.+160    	; 0x1244 <main+0xd74>
    11a4:	12 01       	movw	r2, r4
    11a6:	07 c0       	rjmp	.+14     	; 0x11b6 <main+0xce6>
    11a8:	ae e0       	ldi	r26, 0x0E	; 14
    11aa:	6a 2e       	mov	r6, r26
    11ac:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    11ae:	3c e1       	ldi	r19, 0x1C	; 28
    11b0:	63 16       	cp	r6, r19
    11b2:	71 04       	cpc	r7, r1
    11b4:	61 f4       	brne	.+24     	; 0x11ce <main+0xcfe>
    11b6:	c2 01       	movw	r24, r4
    11b8:	82 19       	sub	r24, r2
    11ba:	93 09       	sbc	r25, r3
    11bc:	85 36       	cpi	r24, 0x65	; 101
    11be:	91 05       	cpc	r25, r1
    11c0:	0c f4       	brge	.+2      	; 0x11c4 <main+0xcf4>
    11c2:	50 c0       	rjmp	.+160    	; 0x1264 <main+0xd94>
    11c4:	12 01       	movw	r2, r4
    11c6:	07 c0       	rjmp	.+14     	; 0x11d6 <main+0xd06>
    11c8:	f7 e1       	ldi	r31, 0x17	; 23
    11ca:	6f 2e       	mov	r6, r31
    11cc:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    11ce:	8d e1       	ldi	r24, 0x1D	; 29
    11d0:	68 16       	cp	r6, r24
    11d2:	71 04       	cpc	r7, r1
    11d4:	51 f4       	brne	.+20     	; 0x11ea <main+0xd1a>
    11d6:	c2 01       	movw	r24, r4
    11d8:	82 19       	sub	r24, r2
    11da:	93 09       	sbc	r25, r3
    11dc:	81 5a       	subi	r24, 0xA1	; 161
    11de:	9f 40       	sbci	r25, 0x0F	; 15
    11e0:	44 f4       	brge	.+16     	; 0x11f2 <main+0xd22>
    11e2:	50 c0       	rjmp	.+160    	; 0x1284 <main+0xdb4>
    11e4:	e8 e1       	ldi	r30, 0x18	; 24
    11e6:	6e 2e       	mov	r6, r30
    11e8:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totallength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    11ea:	be e1       	ldi	r27, 0x1E	; 30
    11ec:	6b 16       	cp	r6, r27
    11ee:	71 04       	cpc	r7, r1
    11f0:	61 f4       	brne	.+24     	; 0x120a <main+0xd3a>
    11f2:	c2 01       	movw	r24, r4
    11f4:	82 19       	sub	r24, r2
    11f6:	93 09       	sbc	r25, r3
    11f8:	81 5a       	subi	r24, 0xA1	; 161
    11fa:	9f 40       	sbci	r25, 0x0F	; 15
    11fc:	0c f4       	brge	.+2      	; 0x1200 <main+0xd30>
    11fe:	53 c0       	rjmp	.+166    	; 0x12a6 <main+0xdd6>
    1200:	12 01       	movw	r2, r4
    1202:	07 c0       	rjmp	.+14     	; 0x1212 <main+0xd42>
    1204:	79 e1       	ldi	r23, 0x19	; 25
    1206:	67 2e       	mov	r6, r23
    1208:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    120a:	3f e1       	ldi	r19, 0x1F	; 31
    120c:	63 16       	cp	r6, r19
    120e:	71 04       	cpc	r7, r1
    1210:	61 f4       	brne	.+24     	; 0x122a <main+0xd5a>
    1212:	c2 01       	movw	r24, r4
    1214:	82 19       	sub	r24, r2
    1216:	93 09       	sbc	r25, r3
    1218:	89 5e       	subi	r24, 0xE9	; 233
    121a:	93 40       	sbci	r25, 0x03	; 3
    121c:	0c f4       	brge	.+2      	; 0x1220 <main+0xd50>
    121e:	3d c1       	rjmp	.+634    	; 0x149a <main+0xfca>
    1220:	12 01       	movw	r2, r4
    1222:	07 c0       	rjmp	.+14     	; 0x1232 <main+0xd62>
    1224:	6a e1       	ldi	r22, 0x1A	; 26
    1226:	66 2e       	mov	r6, r22
    1228:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    122a:	b0 e2       	ldi	r27, 0x20	; 32
    122c:	6b 16       	cp	r6, r27
    122e:	71 04       	cpc	r7, r1
    1230:	61 f4       	brne	.+24     	; 0x124a <main+0xd7a>
    1232:	c2 01       	movw	r24, r4
    1234:	82 19       	sub	r24, r2
    1236:	93 09       	sbc	r25, r3
    1238:	81 5a       	subi	r24, 0xA1	; 161
    123a:	9f 40       	sbci	r25, 0x0F	; 15
    123c:	0c f4       	brge	.+2      	; 0x1240 <main+0xd70>
    123e:	39 c1       	rjmp	.+626    	; 0x14b2 <main+0xfe2>
    1240:	12 01       	movw	r2, r4
    1242:	07 c0       	rjmp	.+14     	; 0x1252 <main+0xd82>
    1244:	5b e1       	ldi	r21, 0x1B	; 27
    1246:	65 2e       	mov	r6, r21
    1248:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    124a:	31 e2       	ldi	r19, 0x21	; 33
    124c:	63 16       	cp	r6, r19
    124e:	71 04       	cpc	r7, r1
    1250:	61 f4       	brne	.+24     	; 0x126a <main+0xd9a>
    1252:	c2 01       	movw	r24, r4
    1254:	82 19       	sub	r24, r2
    1256:	93 09       	sbc	r25, r3
    1258:	85 36       	cpi	r24, 0x65	; 101
    125a:	91 05       	cpc	r25, r1
    125c:	0c f4       	brge	.+2      	; 0x1260 <main+0xd90>
    125e:	36 c1       	rjmp	.+620    	; 0x14cc <main+0xffc>
    1260:	12 01       	movw	r2, r4
    1262:	07 c0       	rjmp	.+14     	; 0x1272 <main+0xda2>
    1264:	4c e1       	ldi	r20, 0x1C	; 28
    1266:	64 2e       	mov	r6, r20
    1268:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate){
    126a:	82 e2       	ldi	r24, 0x22	; 34
    126c:	68 16       	cp	r6, r24
    126e:	71 04       	cpc	r7, r1
    1270:	61 f4       	brne	.+24     	; 0x128a <main+0xdba>
    1272:	c2 01       	movw	r24, r4
    1274:	82 19       	sub	r24, r2
    1276:	93 09       	sbc	r25, r3
    1278:	81 5a       	subi	r24, 0xA1	; 161
    127a:	9f 40       	sbci	r25, 0x0F	; 15
    127c:	0c f4       	brge	.+2      	; 0x1280 <main+0xdb0>
    127e:	38 c1       	rjmp	.+624    	; 0x14f0 <main+0x1020>
    1280:	12 01       	movw	r2, r4
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <main+0xdc2>
    1284:	3d e1       	ldi	r19, 0x1D	; 29
    1286:	63 2e       	mov	r6, r19
    1288:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    128a:	b3 e2       	ldi	r27, 0x23	; 35
    128c:	6b 16       	cp	r6, r27
    128e:	71 04       	cpc	r7, r1
    1290:	69 f4       	brne	.+26     	; 0x12ac <main+0xddc>
    1292:	c2 01       	movw	r24, r4
    1294:	82 19       	sub	r24, r2
    1296:	93 09       	sbc	r25, r3
    1298:	0b 97       	sbiw	r24, 0x0b	; 11
    129a:	0c f4       	brge	.+2      	; 0x129e <main+0xdce>
    129c:	36 c1       	rjmp	.+620    	; 0x150a <main+0x103a>
    129e:	24 e2       	ldi	r18, 0x24	; 36
    12a0:	62 2e       	mov	r6, r18
    12a2:	71 2c       	mov	r7, r1
    12a4:	4d c1       	rjmp	.+666    	; 0x1540 <main+0x1070>
    12a6:	9e e1       	ldi	r25, 0x1E	; 30
    12a8:	69 2e       	mov	r6, r25
    12aa:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    12ac:	f3 01       	movw	r30, r6
    12ae:	e4 32       	cpi	r30, 0x24	; 36
    12b0:	f1 05       	cpc	r31, r1
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <main+0xde6>
    12b4:	45 c1       	rjmp	.+650    	; 0x1540 <main+0x1070>
    12b6:	e0 59       	subi	r30, 0x90	; 144
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	ee 0f       	add	r30, r30
    12bc:	ff 1f       	adc	r31, r31
    12be:	05 90       	lpm	r0, Z+
    12c0:	f4 91       	lpm	r31, Z+
    12c2:	e0 2d       	mov	r30, r0
    12c4:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    12c6:	80 91 3c 03 	lds	r24, 0x033C
    12ca:	90 91 38 03 	lds	r25, 0x0338
    12ce:	20 91 3a 03 	lds	r18, 0x033A
    12d2:	82 ff       	sbrs	r24, 2
    12d4:	07 c0       	rjmp	.+14     	; 0x12e4 <main+0xe14>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    12d6:	9f 7e       	andi	r25, 0xEF	; 239
    12d8:	90 93 38 03 	sts	0x0338, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    12dc:	27 7f       	andi	r18, 0xF7	; 247
    12de:	20 93 3a 03 	sts	0x033A, r18
    12e2:	2a c1       	rjmp	.+596    	; 0x1538 <main+0x1068>
						fixtureMotor = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    12e4:	9f 7d       	andi	r25, 0xDF	; 223
    12e6:	90 93 38 03 	sts	0x0338, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    12ea:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    12ec:	28 60       	ori	r18, 0x08	; 8
    12ee:	20 93 3a 03 	sts	0x033A, r18
						if(print0 == 1){
    12f2:	8c a5       	ldd	r24, Y+44	; 0x2c
    12f4:	9d a5       	ldd	r25, Y+45	; 0x2d
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	09 f0       	breq	.+2      	; 0x12fc <main+0xe2c>
    12fa:	9d c0       	rjmp	.+314    	; 0x1436 <main+0xf66>
							OrangutanLCD::gotoXY(0,1);
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	61 e0       	ldi	r22, 0x01	; 1
    1300:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	93 e0       	ldi	r25, 0x03	; 3
    1308:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
    130c:	1d a6       	std	Y+45, r1	; 0x2d
    130e:	1c a6       	std	Y+44, r1	; 0x2c
    1310:	92 c0       	rjmp	.+292    	; 0x1436 <main+0xf66>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1312:	20 91 3a 03 	lds	r18, 0x033A
    1316:	32 2f       	mov	r19, r18
    1318:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    131a:	c2 01       	movw	r24, r4
    131c:	68 ec       	ldi	r22, 0xC8	; 200
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodhi4>
    1324:	84 36       	cpi	r24, 0x64	; 100
    1326:	91 05       	cpc	r25, r1
    1328:	24 f4       	brge	.+8      	; 0x1332 <main+0xe62>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    132a:	2c 7f       	andi	r18, 0xFC	; 252
    132c:	20 93 3a 03 	sts	0x033A, r18
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <main+0xe68>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1332:	32 60       	ori	r19, 0x02	; 2
    1334:	30 93 3a 03 	sts	0x033A, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
    1338:	80 91 38 03 	lds	r24, 0x0338
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    133c:	86 60       	ori	r24, 0x06	; 6
    133e:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1342:	80 91 3a 03 	lds	r24, 0x033A
    1346:	8b 7f       	andi	r24, 0xFB	; 251
    1348:	80 93 3a 03 	sts	0x033A, r24
    134c:	a1 e0       	ldi	r26, 0x01	; 1
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	b9 a3       	std	Y+33, r27	; 0x21
    1352:	a8 a3       	std	Y+32, r26	; 0x20
    1354:	f5 c0       	rjmp	.+490    	; 0x1540 <main+0x1070>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1356:	80 91 3a 03 	lds	r24, 0x033A
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    135a:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    135c:	86 61       	ori	r24, 0x16	; 22
    135e:	80 93 3a 03 	sts	0x033A, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    1362:	80 91 38 03 	lds	r24, 0x0338
    1366:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    1368:	8b 7f       	andi	r24, 0xFB	; 251
    136a:	80 93 38 03 	sts	0x0338, r24
    136e:	e1 c0       	rjmp	.+450    	; 0x1532 <main+0x1062>
					break;
				case FIXL:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
    1370:	80 91 38 03 	lds	r24, 0x0338
    1374:	80 61       	ori	r24, 0x10	; 16
    1376:	2b c0       	rjmp	.+86     	; 0x13ce <main+0xefe>
					fixtureMotor = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1378:	80 91 38 03 	lds	r24, 0x0338
    137c:	8f 7d       	andi	r24, 0xDF	; 223
    137e:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1382:	80 91 3a 03 	lds	r24, 0x033A
    1386:	88 60       	ori	r24, 0x08	; 8
    1388:	80 93 3a 03 	sts	0x033A, r24
    138c:	54 c0       	rjmp	.+168    	; 0x1436 <main+0xf66>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    138e:	80 91 3a 03 	lds	r24, 0x033A
    1392:	8f 7e       	andi	r24, 0xEF	; 239
    1394:	80 93 3a 03 	sts	0x033A, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    1398:	80 91 38 03 	lds	r24, 0x0338
    139c:	80 62       	ori	r24, 0x20	; 32
    139e:	80 93 38 03 	sts	0x0338, r24
    13a2:	ce c0       	rjmp	.+412    	; 0x1540 <main+0x1070>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
					fixtureMotor = 1;
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
    13a4:	80 91 39 03 	lds	r24, 0x0339
    13a8:	81 60       	ori	r24, 0x01	; 1
    13aa:	80 93 39 03 	sts	0x0339, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    13ae:	80 91 38 03 	lds	r24, 0x0338
    13b2:	8f 77       	andi	r24, 0x7F	; 127
    13b4:	80 93 38 03 	sts	0x0338, r24
    13b8:	3e c0       	rjmp	.+124    	; 0x1436 <main+0xf66>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    13ba:	80 91 3a 03 	lds	r24, 0x033A
    13be:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    13c0:	8f 7d       	andi	r24, 0xDF	; 223
    13c2:	80 93 3a 03 	sts	0x033A, r24
    13c6:	17 c0       	rjmp	.+46     	; 0x13f6 <main+0xf26>
					break;
				case CLEAN1_1:
					fixtureMotor = 1;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    13c8:	80 91 38 03 	lds	r24, 0x0338
    13cc:	8f 7e       	andi	r24, 0xEF	; 239
    13ce:	80 93 38 03 	sts	0x0338, r24
    13d2:	b2 c0       	rjmp	.+356    	; 0x1538 <main+0x1068>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    13d4:	80 91 38 03 	lds	r24, 0x0338
    13d8:	80 61       	ori	r24, 0x10	; 16
    13da:	33 c0       	rjmp	.+102    	; 0x1442 <main+0xf72>
					fixtureMotor = 1;
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    13dc:	80 91 38 03 	lds	r24, 0x0338
    13e0:	8f 77       	andi	r24, 0x7F	; 127
    13e2:	80 93 38 03 	sts	0x0338, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    13e6:	80 91 3a 03 	lds	r24, 0x033A
    13ea:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    13ec:	8f 7d       	andi	r24, 0xDF	; 223
    13ee:	80 93 3a 03 	sts	0x033A, r24
    13f2:	1b 8e       	std	Y+27, r1	; 0x1b
    13f4:	1a 8e       	std	Y+26, r1	; 0x1a
    13f6:	a1 e0       	ldi	r26, 0x01	; 1
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	bd 8b       	std	Y+21, r27	; 0x15
    13fc:	ac 8b       	std	Y+20, r26	; 0x14
    13fe:	a0 c0       	rjmp	.+320    	; 0x1540 <main+0x1070>
					fixtureMotor = 1;
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1400:	80 91 3a 03 	lds	r24, 0x033A
    1404:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1406:	80 62       	ori	r24, 0x20	; 32
    1408:	80 93 3a 03 	sts	0x033A, r24
    140c:	1b 8e       	std	Y+27, r1	; 0x1b
    140e:	1a 8e       	std	Y+26, r1	; 0x1a
    1410:	1d 8a       	std	Y+21, r1	; 0x15
    1412:	1c 8a       	std	Y+20, r1	; 0x14
    1414:	95 c0       	rjmp	.+298    	; 0x1540 <main+0x1070>
				
					break;
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1416:	80 91 38 03 	lds	r24, 0x0338
    141a:	80 61       	ori	r24, 0x10	; 16
    141c:	80 93 38 03 	sts	0x0338, r24
					fixtureMotor = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
    1420:	80 91 39 03 	lds	r24, 0x0339
    1424:	8e 7f       	andi	r24, 0xFE	; 254
    1426:	80 93 39 03 	sts	0x0339, r24
    142a:	86 c0       	rjmp	.+268    	; 0x1538 <main+0x1068>
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    142c:	80 91 3b 03 	lds	r24, 0x033B
    1430:	87 7f       	andi	r24, 0xF7	; 247
    1432:	80 93 3b 03 	sts	0x033B, r24
    1436:	1b 8e       	std	Y+27, r1	; 0x1b
    1438:	1a 8e       	std	Y+26, r1	; 0x1a
    143a:	82 c0       	rjmp	.+260    	; 0x1540 <main+0x1070>
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    143c:	80 91 38 03 	lds	r24, 0x0338
    1440:	8f 7e       	andi	r24, 0xEF	; 239
    1442:	80 93 38 03 	sts	0x0338, r24
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9b 8f       	std	Y+27, r25	; 0x1b
    144c:	8a 8f       	std	Y+26, r24	; 0x1a
    144e:	78 c0       	rjmp	.+240    	; 0x1540 <main+0x1070>
					fixtureMotor = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1450:	80 91 3b 03 	lds	r24, 0x033B
    1454:	88 60       	ori	r24, 0x08	; 8
    1456:	10 c0       	rjmp	.+32     	; 0x1478 <main+0xfa8>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
    1458:	80 91 39 03 	lds	r24, 0x0339
    145c:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    145e:	8f 7d       	andi	r24, 0xDF	; 223
    1460:	80 93 39 03 	sts	0x0339, r24
    1464:	1b 8e       	std	Y+27, r1	; 0x1b
    1466:	1a 8e       	std	Y+26, r1	; 0x1a
    1468:	a1 e0       	ldi	r26, 0x01	; 1
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	b9 ab       	std	Y+49, r27	; 0x31
    146e:	a8 ab       	std	Y+48, r26	; 0x30
    1470:	67 c0       	rjmp	.+206    	; 0x1540 <main+0x1070>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1472:	80 91 3b 03 	lds	r24, 0x033B
    1476:	8d 7f       	andi	r24, 0xFD	; 253
    1478:	80 93 3b 03 	sts	0x033B, r24
    147c:	61 c0       	rjmp	.+194    	; 0x1540 <main+0x1070>
				case DRY2:
					fixtureMotor = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    147e:	80 91 39 03 	lds	r24, 0x0339
    1482:	8f 7b       	andi	r24, 0xBF	; 191
    1484:	80 93 39 03 	sts	0x0339, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1488:	80 91 3b 03 	lds	r24, 0x033B
    148c:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    148e:	8b 7f       	andi	r24, 0xFB	; 251
    1490:	80 93 3b 03 	sts	0x033B, r24
    1494:	19 aa       	std	Y+49, r1	; 0x31
    1496:	18 aa       	std	Y+48, r1	; 0x30
    1498:	53 c0       	rjmp	.+166    	; 0x1540 <main+0x1070>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    149a:	80 91 3a 03 	lds	r24, 0x033A
    149e:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    14a0:	80 61       	ori	r24, 0x10	; 16
    14a2:	80 93 3a 03 	sts	0x033A, r24
    14a6:	1b 8e       	std	Y+27, r1	; 0x1b
    14a8:	1a 8e       	std	Y+26, r1	; 0x1a
    14aa:	8f e1       	ldi	r24, 0x1F	; 31
    14ac:	68 2e       	mov	r6, r24
    14ae:	71 2c       	mov	r7, r1
    14b0:	47 c0       	rjmp	.+142    	; 0x1540 <main+0x1070>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    14b2:	80 91 38 03 	lds	r24, 0x0338
    14b6:	8f 7e       	andi	r24, 0xEF	; 239
    14b8:	80 93 38 03 	sts	0x0338, r24
    14bc:	21 e0       	ldi	r18, 0x01	; 1
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	3b 8f       	std	Y+27, r19	; 0x1b
    14c2:	2a 8f       	std	Y+26, r18	; 0x1a
    14c4:	00 e2       	ldi	r16, 0x20	; 32
    14c6:	60 2e       	mov	r6, r16
    14c8:	71 2c       	mov	r7, r1
    14ca:	3a c0       	rjmp	.+116    	; 0x1540 <main+0x1070>
					fixtureMotor = 1;
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    14cc:	80 91 38 03 	lds	r24, 0x0338
    14d0:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    14d2:	84 60       	ori	r24, 0x04	; 4
    14d4:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    14d8:	80 91 3a 03 	lds	r24, 0x033A
    14dc:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    14de:	8f 7e       	andi	r24, 0xEF	; 239
    14e0:	80 93 3a 03 	sts	0x033A, r24
    14e4:	1b 8e       	std	Y+27, r1	; 0x1b
    14e6:	1a 8e       	std	Y+26, r1	; 0x1a
    14e8:	11 e2       	ldi	r17, 0x21	; 33
    14ea:	61 2e       	mov	r6, r17
    14ec:	71 2c       	mov	r7, r1
    14ee:	28 c0       	rjmp	.+80     	; 0x1540 <main+0x1070>
					break;
    14f0:	b2 e2       	ldi	r27, 0x22	; 34
    14f2:	6b 2e       	mov	r6, r27
    14f4:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    14f6:	80 91 38 03 	lds	r24, 0x0338
    14fa:	8d 7f       	andi	r24, 0xFD	; 253
    14fc:	80 93 38 03 	sts	0x0338, r24
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	99 a3       	std	Y+33, r25	; 0x21
    1506:	88 a3       	std	Y+32, r24	; 0x20
    1508:	1b c0       	rjmp	.+54     	; 0x1540 <main+0x1070>
					plateLoadMotor = 1;
					break;
    150a:	a3 e2       	ldi	r26, 0x23	; 35
    150c:	6a 2e       	mov	r6, r26
    150e:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    1510:	80 91 38 03 	lds	r24, 0x0338
    1514:	8b 7f       	andi	r24, 0xFB	; 251
    1516:	80 93 38 03 	sts	0x0338, r24
					if(print35 == 1){
    151a:	aa a5       	ldd	r26, Y+42	; 0x2a
    151c:	bb a5       	ldd	r27, Y+43	; 0x2b
    151e:	11 97       	sbiw	r26, 0x01	; 1
    1520:	41 f4       	brne	.+16     	; 0x1532 <main+0x1062>
						OrangutanLCD::clear();
    1522:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1526:	8e e0       	ldi	r24, 0x0E	; 14
    1528:	93 e0       	ldi	r25, 0x03	; 3
    152a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
    152e:	1b a6       	std	Y+43, r1	; 0x2b
    1530:	1a a6       	std	Y+42, r1	; 0x2a
    1532:	19 a2       	std	Y+33, r1	; 0x21
    1534:	18 a2       	std	Y+32, r1	; 0x20
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <main+0x1070>
    1538:	21 e0       	ldi	r18, 0x01	; 1
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	3b 8f       	std	Y+27, r19	; 0x1b
    153e:	2a 8f       	std	Y+26, r18	; 0x1a
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
    1540:	8d b7       	in	r24, 0x3d	; 61
    1542:	9e b7       	in	r25, 0x3e	; 62
    1544:	42 97       	sbiw	r24, 0x12	; 18
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	9e bf       	out	0x3e, r25	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	8d bf       	out	0x3d, r24	; 61
    1550:	ed b7       	in	r30, 0x3d	; 61
    1552:	fe b7       	in	r31, 0x3e	; 62
    1554:	31 96       	adiw	r30, 0x01	; 1
    1556:	82 e0       	ldi	r24, 0x02	; 2
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	ad b7       	in	r26, 0x3d	; 61
    155c:	be b7       	in	r27, 0x3e	; 62
    155e:	12 96       	adiw	r26, 0x02	; 2
    1560:	9c 93       	st	X, r25
    1562:	8e 93       	st	-X, r24
    1564:	11 97       	sbiw	r26, 0x01	; 1
    1566:	93 83       	std	Z+3, r25	; 0x03
    1568:	82 83       	std	Z+2, r24	; 0x02
    156a:	95 83       	std	Z+5, r25	; 0x05
    156c:	84 83       	std	Z+4, r24	; 0x04
    156e:	97 83       	std	Z+7, r25	; 0x07
    1570:	86 83       	std	Z+6, r24	; 0x06
    1572:	21 e0       	ldi	r18, 0x01	; 1
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	31 87       	std	Z+9, r19	; 0x09
    1578:	20 87       	std	Z+8, r18	; 0x08
    157a:	33 87       	std	Z+11, r19	; 0x0b
    157c:	22 87       	std	Z+10, r18	; 0x0a
    157e:	35 87       	std	Z+13, r19	; 0x0d
    1580:	24 87       	std	Z+12, r18	; 0x0c
    1582:	37 87       	std	Z+15, r19	; 0x0f
    1584:	26 87       	std	Z+14, r18	; 0x0e
    1586:	31 8b       	std	Z+17, r19	; 0x11
    1588:	20 8b       	std	Z+16, r18	; 0x10
    158a:	c2 01       	movw	r24, r4
    158c:	b1 01       	movw	r22, r2
    158e:	4e a5       	ldd	r20, Y+46	; 0x2e
    1590:	5f a5       	ldd	r21, Y+47	; 0x2f
    1592:	28 a1       	ldd	r18, Y+32	; 0x20
    1594:	39 a1       	ldd	r19, Y+33	; 0x21
    1596:	0a 8d       	ldd	r16, Y+26	; 0x1a
    1598:	1b 8d       	ldd	r17, Y+27	; 0x1b
    159a:	ec 88       	ldd	r14, Y+20	; 0x14
    159c:	fd 88       	ldd	r15, Y+21	; 0x15
    159e:	cc 24       	eor	r12, r12
    15a0:	dd 24       	eor	r13, r13
    15a2:	a8 a8       	ldd	r10, Y+48	; 0x30
    15a4:	b9 a8       	ldd	r11, Y+49	; 0x31
    15a6:	f2 e0       	ldi	r31, 0x02	; 2
    15a8:	8f 2e       	mov	r8, r31
    15aa:	91 2c       	mov	r9, r1
    15ac:	0e 94 b3 01 	call	0x366	; 0x366 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    15b0:	8d b7       	in	r24, 0x3d	; 61
    15b2:	9e b7       	in	r25, 0x3e	; 62
    15b4:	42 96       	adiw	r24, 0x12	; 18
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	9e bf       	out	0x3e, r25	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	8d bf       	out	0x3d, r24	; 61
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>
		u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;*/

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("FIRST B");
			while(state != DONER)
    15c8:	94 e2       	ldi	r25, 0x24	; 36
    15ca:	69 16       	cp	r6, r25
    15cc:	71 04       	cpc	r7, r1
    15ce:	11 f4       	brne	.+4      	; 0x15d4 <main+0x1104>
    15d0:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <main+0x211c>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);

				counter ++;
    15d4:	08 94       	sec
    15d6:	41 1c       	adc	r4, r1
    15d8:	51 1c       	adc	r5, r1
    15da:	98 cc       	rjmp	.-1744   	; 0xf0c <main+0xa3c>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    15dc:	82 e0       	ldi	r24, 0x02	; 2
    15de:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
    15e2:	88 23       	and	r24, r24
    15e4:	11 f0       	breq	.+4      	; 0x15ea <main+0x111a>
    15e6:	0c 94 1d 13 	jmp	0x263a	; 0x263a <main+0x216a>
			OrangutanLCD::gotoXY(7,0);
    15ea:	87 e0       	ldi	r24, 0x07	; 7
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("SECOND B");
    15f2:	8b e1       	ldi	r24, 0x1B	; 27
    15f4:	93 e0       	ldi	r25, 0x03	; 3
    15f6:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
    15fa:	a1 e0       	ldi	r26, 0x01	; 1
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	b9 a7       	std	Y+41, r27	; 0x29
    1600:	a8 a7       	std	Y+40, r26	; 0x28
    1602:	bd a3       	std	Y+37, r27	; 0x25
    1604:	ac a3       	std	Y+36, r26	; 0x24
    1606:	1f 8e       	std	Y+31, r1	; 0x1f
    1608:	1e 8e       	std	Y+30, r1	; 0x1e
    160a:	19 8e       	std	Y+25, r1	; 0x19
    160c:	18 8e       	std	Y+24, r1	; 0x18
    160e:	19 8a       	std	Y+17, r1	; 0x11
    1610:	18 8a       	std	Y+16, r1	; 0x10
    1612:	1d 86       	std	Y+13, r1	; 0x0d
    1614:	1c 86       	std	Y+12, r1	; 0x0c
    1616:	66 24       	eor	r6, r6
    1618:	77 24       	eor	r7, r7
    161a:	44 24       	eor	r4, r4
    161c:	55 24       	eor	r5, r5
    161e:	22 24       	eor	r2, r2
    1620:	33 24       	eor	r3, r3
    1622:	1e 82       	std	Y+6, r1	; 0x06
    1624:	1d 82       	std	Y+5, r1	; 0x05
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1626:	84 e4       	ldi	r24, 0x44	; 68
    1628:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1632:	85 e4       	ldi	r24, 0x45	; 69
    1634:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1638:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z11i2c_readAckv>
    163c:	80 93 3c 03 	sts	0x033C, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1640:	0e 94 ac 13 	call	0x2758	; 0x2758 <_Z11i2c_readNakv>
    1644:	80 93 3d 03 	sts	0x033D, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1648:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z8i2c_stopv>
				
				if(state != INIT){
    164c:	61 14       	cp	r6, r1
    164e:	71 04       	cpc	r7, r1
    1650:	79 f0       	breq	.+30     	; 0x1670 <main+0x11a0>
					OrangutanLCD::gotoXY(0,1);
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	61 e0       	ldi	r22, 0x01	; 1
    1656:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    165a:	89 ef       	ldi	r24, 0xF9	; 249
    165c:	92 e0       	ldi	r25, 0x02	; 2
    165e:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
    1662:	b3 01       	movw	r22, r6
    1664:	88 27       	eor	r24, r24
    1666:	77 fd       	sbrc	r23, 7
    1668:	80 95       	com	r24
    166a:	98 2f       	mov	r25, r24
    166c:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <_ZN12OrangutanLCD5printEl>
					else if(counter - counterRefRel > 15){
						button = 0;
						stateButton = 0;
					}
				}*/
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1670:	c2 01       	movw	r24, r4
    1672:	be 01       	movw	r22, r28
    1674:	6f 5f       	subi	r22, 0xFF	; 255
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    167c:	61 14       	cp	r6, r1
    167e:	71 04       	cpc	r7, r1
    1680:	29 f4       	brne	.+10     	; 0x168c <main+0x11bc>
    1682:	88 23       	and	r24, r24
    1684:	09 f4       	brne	.+2      	; 0x1688 <main+0x11b8>
    1686:	43 c0       	rjmp	.+134    	; 0x170e <main+0x123e>
    1688:	12 01       	movw	r2, r4
    168a:	04 c0       	rjmp	.+8      	; 0x1694 <main+0x11c4>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    168c:	b1 e0       	ldi	r27, 0x01	; 1
    168e:	6b 16       	cp	r6, r27
    1690:	71 04       	cpc	r7, r1
    1692:	49 f4       	brne	.+18     	; 0x16a6 <main+0x11d6>
    1694:	c2 01       	movw	r24, r4
    1696:	82 19       	sub	r24, r2
    1698:	93 09       	sbc	r25, r3
    169a:	81 5a       	subi	r24, 0xA1	; 161
    169c:	9f 40       	sbci	r25, 0x0F	; 15
    169e:	0c f4       	brge	.+2      	; 0x16a2 <main+0x11d2>
    16a0:	43 c0       	rjmp	.+134    	; 0x1728 <main+0x1258>
    16a2:	12 01       	movw	r2, r4
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <main+0x11de>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    16a6:	32 e0       	ldi	r19, 0x02	; 2
    16a8:	63 16       	cp	r6, r19
    16aa:	71 04       	cpc	r7, r1
    16ac:	49 f4       	brne	.+18     	; 0x16c0 <main+0x11f0>
    16ae:	c2 01       	movw	r24, r4
    16b0:	82 19       	sub	r24, r2
    16b2:	93 09       	sbc	r25, r3
    16b4:	85 36       	cpi	r24, 0x65	; 101
    16b6:	91 05       	cpc	r25, r1
    16b8:	0c f4       	brge	.+2      	; 0x16bc <main+0x11ec>
    16ba:	46 c0       	rjmp	.+140    	; 0x1748 <main+0x1278>
    16bc:	12 01       	movw	r2, r4
    16be:	04 c0       	rjmp	.+8      	; 0x16c8 <main+0x11f8>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    16c0:	83 e0       	ldi	r24, 0x03	; 3
    16c2:	68 16       	cp	r6, r24
    16c4:	71 04       	cpc	r7, r1
    16c6:	49 f4       	brne	.+18     	; 0x16da <main+0x120a>
    16c8:	c2 01       	movw	r24, r4
    16ca:	82 19       	sub	r24, r2
    16cc:	93 09       	sbc	r25, r3
    16ce:	81 5a       	subi	r24, 0xA1	; 161
    16d0:	9f 40       	sbci	r25, 0x0F	; 15
    16d2:	0c f4       	brge	.+2      	; 0x16d6 <main+0x1206>
    16d4:	49 c0       	rjmp	.+146    	; 0x1768 <main+0x1298>
    16d6:	12 01       	movw	r2, r4
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <main+0x1212>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    16da:	b4 e0       	ldi	r27, 0x04	; 4
    16dc:	6b 16       	cp	r6, r27
    16de:	71 04       	cpc	r7, r1
    16e0:	49 f4       	brne	.+18     	; 0x16f4 <main+0x1224>
    16e2:	c2 01       	movw	r24, r4
    16e4:	82 19       	sub	r24, r2
    16e6:	93 09       	sbc	r25, r3
    16e8:	89 5e       	subi	r24, 0xE9	; 233
    16ea:	93 40       	sbci	r25, 0x03	; 3
    16ec:	0c f4       	brge	.+2      	; 0x16f0 <main+0x1220>
    16ee:	4c c0       	rjmp	.+152    	; 0x1788 <main+0x12b8>
    16f0:	12 01       	movw	r2, r4
    16f2:	04 c0       	rjmp	.+8      	; 0x16fc <main+0x122c>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    16f4:	35 e0       	ldi	r19, 0x05	; 5
    16f6:	63 16       	cp	r6, r19
    16f8:	71 04       	cpc	r7, r1
    16fa:	49 f4       	brne	.+18     	; 0x170e <main+0x123e>
    16fc:	c2 01       	movw	r24, r4
    16fe:	82 19       	sub	r24, r2
    1700:	93 09       	sbc	r25, r3
    1702:	85 36       	cpi	r24, 0x65	; 101
    1704:	91 05       	cpc	r25, r1
    1706:	0c f4       	brge	.+2      	; 0x170a <main+0x123a>
    1708:	4f c0       	rjmp	.+158    	; 0x17a8 <main+0x12d8>
    170a:	12 01       	movw	r2, r4
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <main+0x1246>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totallength2*fixtureMotorBrush2StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    170e:	86 e0       	ldi	r24, 0x06	; 6
    1710:	68 16       	cp	r6, r24
    1712:	71 04       	cpc	r7, r1
    1714:	61 f4       	brne	.+24     	; 0x172e <main+0x125e>
    1716:	c2 01       	movw	r24, r4
    1718:	82 19       	sub	r24, r2
    171a:	93 09       	sbc	r25, r3
    171c:	81 5a       	subi	r24, 0xA1	; 161
    171e:	9f 40       	sbci	r25, 0x0F	; 15
    1720:	0c f4       	brge	.+2      	; 0x1724 <main+0x1254>
    1722:	52 c0       	rjmp	.+164    	; 0x17c8 <main+0x12f8>
    1724:	12 01       	movw	r2, r4
    1726:	07 c0       	rjmp	.+14     	; 0x1736 <main+0x1266>
    1728:	e1 e0       	ldi	r30, 0x01	; 1
    172a:	6e 2e       	mov	r6, r30
    172c:	71 2c       	mov	r7, r1
					state = B2SET;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    172e:	bf e0       	ldi	r27, 0x0F	; 15
    1730:	6b 16       	cp	r6, r27
    1732:	71 04       	cpc	r7, r1
    1734:	61 f4       	brne	.+24     	; 0x174e <main+0x127e>
    1736:	c2 01       	movw	r24, r4
    1738:	82 19       	sub	r24, r2
    173a:	93 09       	sbc	r25, r3
    173c:	85 36       	cpi	r24, 0x65	; 101
    173e:	91 05       	cpc	r25, r1
    1740:	0c f4       	brge	.+2      	; 0x1744 <main+0x1274>
    1742:	52 c0       	rjmp	.+164    	; 0x17e8 <main+0x1318>
    1744:	12 01       	movw	r2, r4
    1746:	07 c0       	rjmp	.+14     	; 0x1756 <main+0x1286>
    1748:	72 e0       	ldi	r23, 0x02	; 2
    174a:	67 2e       	mov	r6, r23
    174c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    174e:	20 e1       	ldi	r18, 0x10	; 16
    1750:	62 16       	cp	r6, r18
    1752:	71 04       	cpc	r7, r1
    1754:	61 f4       	brne	.+24     	; 0x176e <main+0x129e>
    1756:	c2 01       	movw	r24, r4
    1758:	82 19       	sub	r24, r2
    175a:	93 09       	sbc	r25, r3
    175c:	85 36       	cpi	r24, 0x65	; 101
    175e:	91 05       	cpc	r25, r1
    1760:	0c f4       	brge	.+2      	; 0x1764 <main+0x1294>
    1762:	52 c0       	rjmp	.+164    	; 0x1808 <main+0x1338>
    1764:	12 01       	movw	r2, r4
    1766:	07 c0       	rjmp	.+14     	; 0x1776 <main+0x12a6>
    1768:	63 e0       	ldi	r22, 0x03	; 3
    176a:	66 2e       	mov	r6, r22
    176c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    176e:	31 e1       	ldi	r19, 0x11	; 17
    1770:	63 16       	cp	r6, r19
    1772:	71 04       	cpc	r7, r1
    1774:	61 f4       	brne	.+24     	; 0x178e <main+0x12be>
    1776:	c2 01       	movw	r24, r4
    1778:	82 19       	sub	r24, r2
    177a:	93 09       	sbc	r25, r3
    177c:	81 5a       	subi	r24, 0xA1	; 161
    177e:	9f 40       	sbci	r25, 0x0F	; 15
    1780:	0c f4       	brge	.+2      	; 0x1784 <main+0x12b4>
    1782:	52 c0       	rjmp	.+164    	; 0x1828 <main+0x1358>
    1784:	12 01       	movw	r2, r4
    1786:	07 c0       	rjmp	.+14     	; 0x1796 <main+0x12c6>
    1788:	54 e0       	ldi	r21, 0x04	; 4
    178a:	65 2e       	mov	r6, r21
    178c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    178e:	b2 e1       	ldi	r27, 0x12	; 18
    1790:	6b 16       	cp	r6, r27
    1792:	71 04       	cpc	r7, r1
    1794:	61 f4       	brne	.+24     	; 0x17ae <main+0x12de>
    1796:	c2 01       	movw	r24, r4
    1798:	82 19       	sub	r24, r2
    179a:	93 09       	sbc	r25, r3
    179c:	85 36       	cpi	r24, 0x65	; 101
    179e:	91 05       	cpc	r25, r1
    17a0:	0c f4       	brge	.+2      	; 0x17a4 <main+0x12d4>
    17a2:	52 c0       	rjmp	.+164    	; 0x1848 <main+0x1378>
    17a4:	12 01       	movw	r2, r4
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <main+0x12e6>
    17a8:	45 e0       	ldi	r20, 0x05	; 5
    17aa:	64 2e       	mov	r6, r20
    17ac:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totallength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    17ae:	23 e1       	ldi	r18, 0x13	; 19
    17b0:	62 16       	cp	r6, r18
    17b2:	71 04       	cpc	r7, r1
    17b4:	61 f4       	brne	.+24     	; 0x17ce <main+0x12fe>
    17b6:	c2 01       	movw	r24, r4
    17b8:	82 19       	sub	r24, r2
    17ba:	93 09       	sbc	r25, r3
    17bc:	81 5a       	subi	r24, 0xA1	; 161
    17be:	9f 40       	sbci	r25, 0x0F	; 15
    17c0:	0c f4       	brge	.+2      	; 0x17c4 <main+0x12f4>
    17c2:	52 c0       	rjmp	.+164    	; 0x1868 <main+0x1398>
    17c4:	12 01       	movw	r2, r4
    17c6:	07 c0       	rjmp	.+14     	; 0x17d6 <main+0x1306>
    17c8:	36 e0       	ldi	r19, 0x06	; 6
    17ca:	63 2e       	mov	r6, r19
    17cc:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    17ce:	84 e1       	ldi	r24, 0x14	; 20
    17d0:	68 16       	cp	r6, r24
    17d2:	71 04       	cpc	r7, r1
    17d4:	61 f4       	brne	.+24     	; 0x17ee <main+0x131e>
    17d6:	c2 01       	movw	r24, r4
    17d8:	82 19       	sub	r24, r2
    17da:	93 09       	sbc	r25, r3
    17dc:	85 36       	cpi	r24, 0x65	; 101
    17de:	91 05       	cpc	r25, r1
    17e0:	0c f4       	brge	.+2      	; 0x17e4 <main+0x1314>
    17e2:	50 c0       	rjmp	.+160    	; 0x1884 <main+0x13b4>
    17e4:	12 01       	movw	r2, r4
    17e6:	07 c0       	rjmp	.+14     	; 0x17f6 <main+0x1326>
    17e8:	2f e0       	ldi	r18, 0x0F	; 15
    17ea:	62 2e       	mov	r6, r18
    17ec:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    17ee:	95 e1       	ldi	r25, 0x15	; 21
    17f0:	69 16       	cp	r6, r25
    17f2:	71 04       	cpc	r7, r1
    17f4:	61 f4       	brne	.+24     	; 0x180e <main+0x133e>
    17f6:	c2 01       	movw	r24, r4
    17f8:	82 19       	sub	r24, r2
    17fa:	93 09       	sbc	r25, r3
    17fc:	81 5a       	subi	r24, 0xA1	; 161
    17fe:	9f 40       	sbci	r25, 0x0F	; 15
    1800:	0c f4       	brge	.+2      	; 0x1804 <main+0x1334>
    1802:	51 c0       	rjmp	.+162    	; 0x18a6 <main+0x13d6>
    1804:	12 01       	movw	r2, r4
    1806:	07 c0       	rjmp	.+14     	; 0x1816 <main+0x1346>
    1808:	90 e1       	ldi	r25, 0x10	; 16
    180a:	69 2e       	mov	r6, r25
    180c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    180e:	b6 e1       	ldi	r27, 0x16	; 22
    1810:	6b 16       	cp	r6, r27
    1812:	71 04       	cpc	r7, r1
    1814:	61 f4       	brne	.+24     	; 0x182e <main+0x135e>
    1816:	c2 01       	movw	r24, r4
    1818:	82 19       	sub	r24, r2
    181a:	93 09       	sbc	r25, r3
    181c:	85 36       	cpi	r24, 0x65	; 101
    181e:	91 05       	cpc	r25, r1
    1820:	0c f4       	brge	.+2      	; 0x1824 <main+0x1354>
    1822:	53 c0       	rjmp	.+166    	; 0x18ca <main+0x13fa>
    1824:	12 01       	movw	r2, r4
    1826:	07 c0       	rjmp	.+14     	; 0x1836 <main+0x1366>
    1828:	81 e1       	ldi	r24, 0x11	; 17
    182a:	68 2e       	mov	r6, r24
    182c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totallength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    182e:	27 e1       	ldi	r18, 0x17	; 23
    1830:	62 16       	cp	r6, r18
    1832:	71 04       	cpc	r7, r1
    1834:	61 f4       	brne	.+24     	; 0x184e <main+0x137e>
    1836:	c2 01       	movw	r24, r4
    1838:	82 19       	sub	r24, r2
    183a:	93 09       	sbc	r25, r3
    183c:	81 5a       	subi	r24, 0xA1	; 161
    183e:	9f 40       	sbci	r25, 0x0F	; 15
    1840:	0c f4       	brge	.+2      	; 0x1844 <main+0x1374>
    1842:	53 c0       	rjmp	.+166    	; 0x18ea <main+0x141a>
    1844:	12 01       	movw	r2, r4
    1846:	07 c0       	rjmp	.+14     	; 0x1856 <main+0x1386>
    1848:	02 e1       	ldi	r16, 0x12	; 18
    184a:	60 2e       	mov	r6, r16
    184c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    184e:	88 e1       	ldi	r24, 0x18	; 24
    1850:	68 16       	cp	r6, r24
    1852:	71 04       	cpc	r7, r1
    1854:	61 f4       	brne	.+24     	; 0x186e <main+0x139e>
    1856:	c2 01       	movw	r24, r4
    1858:	82 19       	sub	r24, r2
    185a:	93 09       	sbc	r25, r3
    185c:	85 36       	cpi	r24, 0x65	; 101
    185e:	91 05       	cpc	r25, r1
    1860:	0c f4       	brge	.+2      	; 0x1864 <main+0x1394>
    1862:	51 c0       	rjmp	.+162    	; 0x1906 <main+0x1436>
    1864:	12 01       	movw	r2, r4
    1866:	07 c0       	rjmp	.+14     	; 0x1876 <main+0x13a6>
    1868:	13 e1       	ldi	r17, 0x13	; 19
    186a:	61 2e       	mov	r6, r17
    186c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    186e:	99 e1       	ldi	r25, 0x19	; 25
    1870:	69 16       	cp	r6, r25
    1872:	71 04       	cpc	r7, r1
    1874:	51 f4       	brne	.+20     	; 0x188a <main+0x13ba>
    1876:	c2 01       	movw	r24, r4
    1878:	82 19       	sub	r24, r2
    187a:	93 09       	sbc	r25, r3
    187c:	81 5a       	subi	r24, 0xA1	; 161
    187e:	9f 40       	sbci	r25, 0x0F	; 15
    1880:	44 f4       	brge	.+16     	; 0x1892 <main+0x13c2>
    1882:	51 c0       	rjmp	.+162    	; 0x1926 <main+0x1456>
    1884:	b4 e1       	ldi	r27, 0x14	; 20
    1886:	6b 2e       	mov	r6, r27
    1888:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totallength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    188a:	ba e1       	ldi	r27, 0x1A	; 26
    188c:	6b 16       	cp	r6, r27
    188e:	71 04       	cpc	r7, r1
    1890:	69 f4       	brne	.+26     	; 0x18ac <main+0x13dc>
    1892:	c2 01       	movw	r24, r4
    1894:	82 19       	sub	r24, r2
    1896:	93 09       	sbc	r25, r3
    1898:	81 5a       	subi	r24, 0xA1	; 161
    189a:	9f 40       	sbci	r25, 0x0F	; 15
    189c:	0c f4       	brge	.+2      	; 0x18a0 <main+0x13d0>
    189e:	53 c0       	rjmp	.+166    	; 0x1946 <main+0x1476>
    18a0:	5e 82       	std	Y+6, r5	; 0x06
    18a2:	4d 82       	std	Y+5, r4	; 0x05
    18a4:	07 c0       	rjmp	.+14     	; 0x18b4 <main+0x13e4>
    18a6:	a5 e1       	ldi	r26, 0x15	; 21
    18a8:	6a 2e       	mov	r6, r26
    18aa:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    18ac:	3b e1       	ldi	r19, 0x1B	; 27
    18ae:	63 16       	cp	r6, r19
    18b0:	71 04       	cpc	r7, r1
    18b2:	71 f4       	brne	.+28     	; 0x18d0 <main+0x1400>
    18b4:	c2 01       	movw	r24, r4
    18b6:	ad 81       	ldd	r26, Y+5	; 0x05
    18b8:	be 81       	ldd	r27, Y+6	; 0x06
    18ba:	8a 1b       	sub	r24, r26
    18bc:	9b 0b       	sbc	r25, r27
    18be:	85 36       	cpi	r24, 0x65	; 101
    18c0:	91 05       	cpc	r25, r1
    18c2:	0c f4       	brge	.+2      	; 0x18c6 <main+0x13f6>
    18c4:	50 c0       	rjmp	.+160    	; 0x1966 <main+0x1496>
    18c6:	12 01       	movw	r2, r4
    18c8:	07 c0       	rjmp	.+14     	; 0x18d8 <main+0x1408>
    18ca:	f6 e1       	ldi	r31, 0x16	; 22
    18cc:	6f 2e       	mov	r6, r31
    18ce:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    18d0:	bc e1       	ldi	r27, 0x1C	; 28
    18d2:	6b 16       	cp	r6, r27
    18d4:	71 04       	cpc	r7, r1
    18d6:	61 f4       	brne	.+24     	; 0x18f0 <main+0x1420>
    18d8:	c2 01       	movw	r24, r4
    18da:	82 19       	sub	r24, r2
    18dc:	93 09       	sbc	r25, r3
    18de:	85 36       	cpi	r24, 0x65	; 101
    18e0:	91 05       	cpc	r25, r1
    18e2:	0c f4       	brge	.+2      	; 0x18e6 <main+0x1416>
    18e4:	50 c0       	rjmp	.+160    	; 0x1986 <main+0x14b6>
    18e6:	12 01       	movw	r2, r4
    18e8:	07 c0       	rjmp	.+14     	; 0x18f8 <main+0x1428>
    18ea:	e7 e1       	ldi	r30, 0x17	; 23
    18ec:	6e 2e       	mov	r6, r30
    18ee:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    18f0:	2d e1       	ldi	r18, 0x1D	; 29
    18f2:	62 16       	cp	r6, r18
    18f4:	71 04       	cpc	r7, r1
    18f6:	51 f4       	brne	.+20     	; 0x190c <main+0x143c>
    18f8:	c2 01       	movw	r24, r4
    18fa:	82 19       	sub	r24, r2
    18fc:	93 09       	sbc	r25, r3
    18fe:	81 5a       	subi	r24, 0xA1	; 161
    1900:	9f 40       	sbci	r25, 0x0F	; 15
    1902:	44 f4       	brge	.+16     	; 0x1914 <main+0x1444>
    1904:	50 c0       	rjmp	.+160    	; 0x19a6 <main+0x14d6>
    1906:	78 e1       	ldi	r23, 0x18	; 24
    1908:	67 2e       	mov	r6, r23
    190a:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totallength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    190c:	8e e1       	ldi	r24, 0x1E	; 30
    190e:	68 16       	cp	r6, r24
    1910:	71 04       	cpc	r7, r1
    1912:	61 f4       	brne	.+24     	; 0x192c <main+0x145c>
    1914:	c2 01       	movw	r24, r4
    1916:	82 19       	sub	r24, r2
    1918:	93 09       	sbc	r25, r3
    191a:	81 5a       	subi	r24, 0xA1	; 161
    191c:	9f 40       	sbci	r25, 0x0F	; 15
    191e:	0c f4       	brge	.+2      	; 0x1922 <main+0x1452>
    1920:	53 c0       	rjmp	.+166    	; 0x19c8 <main+0x14f8>
    1922:	12 01       	movw	r2, r4
    1924:	07 c0       	rjmp	.+14     	; 0x1934 <main+0x1464>
    1926:	69 e1       	ldi	r22, 0x19	; 25
    1928:	66 2e       	mov	r6, r22
    192a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    192c:	bf e1       	ldi	r27, 0x1F	; 31
    192e:	6b 16       	cp	r6, r27
    1930:	71 04       	cpc	r7, r1
    1932:	61 f4       	brne	.+24     	; 0x194c <main+0x147c>
    1934:	c2 01       	movw	r24, r4
    1936:	82 19       	sub	r24, r2
    1938:	93 09       	sbc	r25, r3
    193a:	89 5e       	subi	r24, 0xE9	; 233
    193c:	93 40       	sbci	r25, 0x03	; 3
    193e:	0c f4       	brge	.+2      	; 0x1942 <main+0x1472>
    1940:	56 c1       	rjmp	.+684    	; 0x1bee <main+0x171e>
    1942:	12 01       	movw	r2, r4
    1944:	07 c0       	rjmp	.+14     	; 0x1954 <main+0x1484>
    1946:	5a e1       	ldi	r21, 0x1A	; 26
    1948:	65 2e       	mov	r6, r21
    194a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    194c:	30 e2       	ldi	r19, 0x20	; 32
    194e:	63 16       	cp	r6, r19
    1950:	71 04       	cpc	r7, r1
    1952:	61 f4       	brne	.+24     	; 0x196c <main+0x149c>
    1954:	c2 01       	movw	r24, r4
    1956:	82 19       	sub	r24, r2
    1958:	93 09       	sbc	r25, r3
    195a:	81 5a       	subi	r24, 0xA1	; 161
    195c:	9f 40       	sbci	r25, 0x0F	; 15
    195e:	0c f4       	brge	.+2      	; 0x1962 <main+0x1492>
    1960:	52 c1       	rjmp	.+676    	; 0x1c06 <main+0x1736>
    1962:	12 01       	movw	r2, r4
    1964:	07 c0       	rjmp	.+14     	; 0x1974 <main+0x14a4>
    1966:	4b e1       	ldi	r20, 0x1B	; 27
    1968:	64 2e       	mov	r6, r20
    196a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    196c:	b1 e2       	ldi	r27, 0x21	; 33
    196e:	6b 16       	cp	r6, r27
    1970:	71 04       	cpc	r7, r1
    1972:	61 f4       	brne	.+24     	; 0x198c <main+0x14bc>
    1974:	c2 01       	movw	r24, r4
    1976:	82 19       	sub	r24, r2
    1978:	93 09       	sbc	r25, r3
    197a:	85 36       	cpi	r24, 0x65	; 101
    197c:	91 05       	cpc	r25, r1
    197e:	0c f4       	brge	.+2      	; 0x1982 <main+0x14b2>
    1980:	4f c1       	rjmp	.+670    	; 0x1c20 <main+0x1750>
    1982:	12 01       	movw	r2, r4
    1984:	07 c0       	rjmp	.+14     	; 0x1994 <main+0x14c4>
    1986:	3c e1       	ldi	r19, 0x1C	; 28
    1988:	63 2e       	mov	r6, r19
    198a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate){
    198c:	22 e2       	ldi	r18, 0x22	; 34
    198e:	62 16       	cp	r6, r18
    1990:	71 04       	cpc	r7, r1
    1992:	61 f4       	brne	.+24     	; 0x19ac <main+0x14dc>
    1994:	c2 01       	movw	r24, r4
    1996:	82 19       	sub	r24, r2
    1998:	93 09       	sbc	r25, r3
    199a:	81 5a       	subi	r24, 0xA1	; 161
    199c:	9f 40       	sbci	r25, 0x0F	; 15
    199e:	0c f4       	brge	.+2      	; 0x19a2 <main+0x14d2>
    19a0:	51 c1       	rjmp	.+674    	; 0x1c44 <main+0x1774>
    19a2:	12 01       	movw	r2, r4
    19a4:	07 c0       	rjmp	.+14     	; 0x19b4 <main+0x14e4>
    19a6:	2d e1       	ldi	r18, 0x1D	; 29
    19a8:	62 2e       	mov	r6, r18
    19aa:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    19ac:	83 e2       	ldi	r24, 0x23	; 35
    19ae:	68 16       	cp	r6, r24
    19b0:	71 04       	cpc	r7, r1
    19b2:	69 f4       	brne	.+26     	; 0x19ce <main+0x14fe>
    19b4:	c2 01       	movw	r24, r4
    19b6:	82 19       	sub	r24, r2
    19b8:	93 09       	sbc	r25, r3
    19ba:	0b 97       	sbiw	r24, 0x0b	; 11
    19bc:	0c f4       	brge	.+2      	; 0x19c0 <main+0x14f0>
    19be:	4f c1       	rjmp	.+670    	; 0x1c5e <main+0x178e>
    19c0:	94 e2       	ldi	r25, 0x24	; 36
    19c2:	69 2e       	mov	r6, r25
    19c4:	71 2c       	mov	r7, r1
    19c6:	66 c1       	rjmp	.+716    	; 0x1c94 <main+0x17c4>
    19c8:	8e e1       	ldi	r24, 0x1E	; 30
    19ca:	68 2e       	mov	r6, r24
    19cc:	71 2c       	mov	r7, r1
				}


				//state actions
						
				switch (state){
    19ce:	f3 01       	movw	r30, r6
    19d0:	e4 32       	cpi	r30, 0x24	; 36
    19d2:	f1 05       	cpc	r31, r1
    19d4:	08 f0       	brcs	.+2      	; 0x19d8 <main+0x1508>
    19d6:	5e c1       	rjmp	.+700    	; 0x1c94 <main+0x17c4>
    19d8:	ec 56       	subi	r30, 0x6C	; 108
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	ee 0f       	add	r30, r30
    19de:	ff 1f       	adc	r31, r31
    19e0:	05 90       	lpm	r0, Z+
    19e2:	f4 91       	lpm	r31, Z+
    19e4:	e0 2d       	mov	r30, r0
    19e6:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    19e8:	80 91 3c 03 	lds	r24, 0x033C
    19ec:	90 91 38 03 	lds	r25, 0x0338
    19f0:	20 91 3a 03 	lds	r18, 0x033A
    19f4:	82 ff       	sbrs	r24, 2
    19f6:	07 c0       	rjmp	.+14     	; 0x1a06 <main+0x1536>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    19f8:	9f 7e       	andi	r25, 0xEF	; 239
    19fa:	90 93 38 03 	sts	0x0338, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    19fe:	27 7f       	andi	r18, 0xF7	; 247
    1a00:	20 93 3a 03 	sts	0x033A, r18
    1a04:	43 c1       	rjmp	.+646    	; 0x1c8c <main+0x17bc>
						fixtureMotor = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1a06:	9f 7d       	andi	r25, 0xDF	; 223
    1a08:	90 93 38 03 	sts	0x0338, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1a0c:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1a0e:	28 60       	ori	r18, 0x08	; 8
    1a10:	20 93 3a 03 	sts	0x033A, r18
						if(print0 == 1){
    1a14:	28 a5       	ldd	r18, Y+40	; 0x28
    1a16:	39 a5       	ldd	r19, Y+41	; 0x29
    1a18:	21 30       	cpi	r18, 0x01	; 1
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <main+0x1550>
    1a1e:	b5 c0       	rjmp	.+362    	; 0x1b8a <main+0x16ba>
							OrangutanLCD::gotoXY(0,1);
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	61 e0       	ldi	r22, 0x01	; 1
    1a24:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	93 e0       	ldi	r25, 0x03	; 3
    1a2c:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
    1a30:	19 a6       	std	Y+41, r1	; 0x29
    1a32:	18 a6       	std	Y+40, r1	; 0x28
    1a34:	aa c0       	rjmp	.+340    	; 0x1b8a <main+0x16ba>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1a36:	20 91 3a 03 	lds	r18, 0x033A
    1a3a:	32 2f       	mov	r19, r18
    1a3c:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    1a3e:	c2 01       	movw	r24, r4
    1a40:	68 ec       	ldi	r22, 0xC8	; 200
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodhi4>
    1a48:	84 36       	cpi	r24, 0x64	; 100
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	24 f4       	brge	.+8      	; 0x1a56 <main+0x1586>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1a4e:	2c 7f       	andi	r18, 0xFC	; 252
    1a50:	20 93 3a 03 	sts	0x033A, r18
    1a54:	03 c0       	rjmp	.+6      	; 0x1a5c <main+0x158c>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1a56:	32 60       	ori	r19, 0x02	; 2
    1a58:	30 93 3a 03 	sts	0x033A, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
    1a5c:	80 91 38 03 	lds	r24, 0x0338
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    1a60:	86 60       	ori	r24, 0x06	; 6
    1a62:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1a66:	80 91 3a 03 	lds	r24, 0x033A
    1a6a:	8b 7f       	andi	r24, 0xFB	; 251
    1a6c:	80 93 3a 03 	sts	0x033A, r24
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9f 8f       	std	Y+31, r25	; 0x1f
    1a76:	8e 8f       	std	Y+30, r24	; 0x1e
    1a78:	0d c1       	rjmp	.+538    	; 0x1c94 <main+0x17c4>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1a7a:	80 91 3a 03 	lds	r24, 0x033A
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1a7e:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1a80:	86 61       	ori	r24, 0x16	; 22
    1a82:	80 93 3a 03 	sts	0x033A, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    1a86:	80 91 38 03 	lds	r24, 0x0338
    1a8a:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    1a8c:	8b 7f       	andi	r24, 0xFB	; 251
    1a8e:	80 93 38 03 	sts	0x0338, r24
    1a92:	f9 c0       	rjmp	.+498    	; 0x1c86 <main+0x17b6>
					break;
				case FIXL:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
    1a94:	80 91 38 03 	lds	r24, 0x0338
    1a98:	80 61       	ori	r24, 0x10	; 16
    1a9a:	2b c0       	rjmp	.+86     	; 0x1af2 <main+0x1622>
					fixtureMotor = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1a9c:	80 91 38 03 	lds	r24, 0x0338
    1aa0:	8f 7d       	andi	r24, 0xDF	; 223
    1aa2:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1aa6:	80 91 3a 03 	lds	r24, 0x033A
    1aaa:	88 60       	ori	r24, 0x08	; 8
    1aac:	80 93 3a 03 	sts	0x033A, r24
    1ab0:	6c c0       	rjmp	.+216    	; 0x1b8a <main+0x16ba>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1ab2:	80 91 3a 03 	lds	r24, 0x033A
    1ab6:	8f 7e       	andi	r24, 0xEF	; 239
    1ab8:	80 93 3a 03 	sts	0x033A, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    1abc:	80 91 38 03 	lds	r24, 0x0338
    1ac0:	80 62       	ori	r24, 0x20	; 32
    1ac2:	80 93 38 03 	sts	0x0338, r24
    1ac6:	e6 c0       	rjmp	.+460    	; 0x1c94 <main+0x17c4>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
    1ac8:	80 91 39 03 	lds	r24, 0x0339
    1acc:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1ace:	8b 7f       	andi	r24, 0xFB	; 251
    1ad0:	80 93 39 03 	sts	0x0339, r24
    1ad4:	5a c0       	rjmp	.+180    	; 0x1b8a <main+0x16ba>
						print15 = 0;
					}*/
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1ad6:	80 91 3b 03 	lds	r24, 0x033B
    1ada:	81 60       	ori	r24, 0x01	; 1
    1adc:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1ae0:	80 91 3a 03 	lds	r24, 0x033A
    1ae4:	8f 77       	andi	r24, 0x7F	; 127
    1ae6:	80 93 3a 03 	sts	0x033A, r24
    1aea:	26 c0       	rjmp	.+76     	; 0x1b38 <main+0x1668>
					break;
				case CLEAN2_1:
					fixtureMotor = 1;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1aec:	80 91 38 03 	lds	r24, 0x0338
    1af0:	8f 7e       	andi	r24, 0xEF	; 239
    1af2:	80 93 38 03 	sts	0x0338, r24
    1af6:	ca c0       	rjmp	.+404    	; 0x1c8c <main+0x17bc>
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1af8:	80 91 3b 03 	lds	r24, 0x033B
    1afc:	8e 7f       	andi	r24, 0xFE	; 254
    1afe:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1b02:	80 91 3a 03 	lds	r24, 0x033A
    1b06:	80 68       	ori	r24, 0x80	; 128
    1b08:	80 93 3a 03 	sts	0x033A, r24
    1b0c:	29 c0       	rjmp	.+82     	; 0x1b60 <main+0x1690>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1b0e:	80 91 38 03 	lds	r24, 0x0338
    1b12:	80 61       	ori	r24, 0x10	; 16
    1b14:	40 c0       	rjmp	.+128    	; 0x1b96 <main+0x16c6>
					fixtureMotor = 1;
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1b16:	80 91 39 03 	lds	r24, 0x0339
    1b1a:	8b 7f       	andi	r24, 0xFB	; 251
    1b1c:	80 93 39 03 	sts	0x0339, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1b20:	80 91 3b 03 	lds	r24, 0x033B
    1b24:	81 60       	ori	r24, 0x01	; 1
    1b26:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1b2a:	80 91 3a 03 	lds	r24, 0x033A
    1b2e:	8f 77       	andi	r24, 0x7F	; 127
    1b30:	80 93 3a 03 	sts	0x033A, r24
    1b34:	19 8e       	std	Y+25, r1	; 0x19
    1b36:	18 8e       	std	Y+24, r1	; 0x18
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	99 8b       	std	Y+17, r25	; 0x11
    1b3e:	88 8b       	std	Y+16, r24	; 0x10
    1b40:	a9 c0       	rjmp	.+338    	; 0x1c94 <main+0x17c4>
					fixtureMotor = 1;
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1b42:	80 91 3b 03 	lds	r24, 0x033B
    1b46:	8e 7f       	andi	r24, 0xFE	; 254
    1b48:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1b4c:	80 91 3a 03 	lds	r24, 0x033A
    1b50:	80 68       	ori	r24, 0x80	; 128
    1b52:	80 93 3a 03 	sts	0x033A, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
    1b56:	80 91 39 03 	lds	r24, 0x0339
    1b5a:	87 7f       	andi	r24, 0xF7	; 247
    1b5c:	80 93 39 03 	sts	0x0339, r24
    1b60:	19 8e       	std	Y+25, r1	; 0x19
    1b62:	18 8e       	std	Y+24, r1	; 0x18
    1b64:	19 8a       	std	Y+17, r1	; 0x11
    1b66:	18 8a       	std	Y+16, r1	; 0x10
    1b68:	95 c0       	rjmp	.+298    	; 0x1c94 <main+0x17c4>
					break;
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1b6a:	80 91 38 03 	lds	r24, 0x0338
    1b6e:	80 61       	ori	r24, 0x10	; 16
    1b70:	80 93 38 03 	sts	0x0338, r24
					fixtureMotor = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
    1b74:	80 91 39 03 	lds	r24, 0x0339
    1b78:	8e 7f       	andi	r24, 0xFE	; 254
    1b7a:	80 93 39 03 	sts	0x0339, r24
    1b7e:	86 c0       	rjmp	.+268    	; 0x1c8c <main+0x17bc>
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1b80:	80 91 3b 03 	lds	r24, 0x033B
    1b84:	87 7f       	andi	r24, 0xF7	; 247
    1b86:	80 93 3b 03 	sts	0x033B, r24
    1b8a:	19 8e       	std	Y+25, r1	; 0x19
    1b8c:	18 8e       	std	Y+24, r1	; 0x18
    1b8e:	82 c0       	rjmp	.+260    	; 0x1c94 <main+0x17c4>
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1b90:	80 91 38 03 	lds	r24, 0x0338
    1b94:	8f 7e       	andi	r24, 0xEF	; 239
    1b96:	80 93 38 03 	sts	0x0338, r24
    1b9a:	21 e0       	ldi	r18, 0x01	; 1
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	39 8f       	std	Y+25, r19	; 0x19
    1ba0:	28 8f       	std	Y+24, r18	; 0x18
    1ba2:	78 c0       	rjmp	.+240    	; 0x1c94 <main+0x17c4>
					fixtureMotor = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1ba4:	80 91 3b 03 	lds	r24, 0x033B
    1ba8:	88 60       	ori	r24, 0x08	; 8
    1baa:	10 c0       	rjmp	.+32     	; 0x1bcc <main+0x16fc>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
    1bac:	80 91 39 03 	lds	r24, 0x0339
    1bb0:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1bb2:	8f 7d       	andi	r24, 0xDF	; 223
    1bb4:	80 93 39 03 	sts	0x0339, r24
    1bb8:	19 8e       	std	Y+25, r1	; 0x19
    1bba:	18 8e       	std	Y+24, r1	; 0x18
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9d 87       	std	Y+13, r25	; 0x0d
    1bc2:	8c 87       	std	Y+12, r24	; 0x0c
    1bc4:	67 c0       	rjmp	.+206    	; 0x1c94 <main+0x17c4>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1bc6:	80 91 3b 03 	lds	r24, 0x033B
    1bca:	8d 7f       	andi	r24, 0xFD	; 253
    1bcc:	80 93 3b 03 	sts	0x033B, r24
    1bd0:	61 c0       	rjmp	.+194    	; 0x1c94 <main+0x17c4>
				case DRY2:
					fixtureMotor = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    1bd2:	80 91 39 03 	lds	r24, 0x0339
    1bd6:	8f 7b       	andi	r24, 0xBF	; 191
    1bd8:	80 93 39 03 	sts	0x0339, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1bdc:	80 91 3b 03 	lds	r24, 0x033B
    1be0:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1be2:	8b 7f       	andi	r24, 0xFB	; 251
    1be4:	80 93 3b 03 	sts	0x033B, r24
    1be8:	1d 86       	std	Y+13, r1	; 0x0d
    1bea:	1c 86       	std	Y+12, r1	; 0x0c
    1bec:	53 c0       	rjmp	.+166    	; 0x1c94 <main+0x17c4>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1bee:	80 91 3a 03 	lds	r24, 0x033A
    1bf2:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1bf4:	80 61       	ori	r24, 0x10	; 16
    1bf6:	80 93 3a 03 	sts	0x033A, r24
    1bfa:	19 8e       	std	Y+25, r1	; 0x19
    1bfc:	18 8e       	std	Y+24, r1	; 0x18
    1bfe:	0f e1       	ldi	r16, 0x1F	; 31
    1c00:	60 2e       	mov	r6, r16
    1c02:	71 2c       	mov	r7, r1
    1c04:	47 c0       	rjmp	.+142    	; 0x1c94 <main+0x17c4>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1c06:	80 91 38 03 	lds	r24, 0x0338
    1c0a:	8f 7e       	andi	r24, 0xEF	; 239
    1c0c:	80 93 38 03 	sts	0x0338, r24
    1c10:	a1 e0       	ldi	r26, 0x01	; 1
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	b9 8f       	std	Y+25, r27	; 0x19
    1c16:	a8 8f       	std	Y+24, r26	; 0x18
    1c18:	10 e2       	ldi	r17, 0x20	; 32
    1c1a:	61 2e       	mov	r6, r17
    1c1c:	71 2c       	mov	r7, r1
    1c1e:	3a c0       	rjmp	.+116    	; 0x1c94 <main+0x17c4>
					fixtureMotor = 1;
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    1c20:	80 91 38 03 	lds	r24, 0x0338
    1c24:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    1c26:	84 60       	ori	r24, 0x04	; 4
    1c28:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1c2c:	80 91 3a 03 	lds	r24, 0x033A
    1c30:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1c32:	8f 7e       	andi	r24, 0xEF	; 239
    1c34:	80 93 3a 03 	sts	0x033A, r24
    1c38:	19 8e       	std	Y+25, r1	; 0x19
    1c3a:	18 8e       	std	Y+24, r1	; 0x18
    1c3c:	b1 e2       	ldi	r27, 0x21	; 33
    1c3e:	6b 2e       	mov	r6, r27
    1c40:	71 2c       	mov	r7, r1
    1c42:	28 c0       	rjmp	.+80     	; 0x1c94 <main+0x17c4>
					break;
    1c44:	a2 e2       	ldi	r26, 0x22	; 34
    1c46:	6a 2e       	mov	r6, r26
    1c48:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1c4a:	80 91 38 03 	lds	r24, 0x0338
    1c4e:	8d 7f       	andi	r24, 0xFD	; 253
    1c50:	80 93 38 03 	sts	0x0338, r24
    1c54:	21 e0       	ldi	r18, 0x01	; 1
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	3f 8f       	std	Y+31, r19	; 0x1f
    1c5a:	2e 8f       	std	Y+30, r18	; 0x1e
    1c5c:	1b c0       	rjmp	.+54     	; 0x1c94 <main+0x17c4>
					plateLoadMotor = 1;
					break;
    1c5e:	f3 e2       	ldi	r31, 0x23	; 35
    1c60:	6f 2e       	mov	r6, r31
    1c62:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    1c64:	80 91 38 03 	lds	r24, 0x0338
    1c68:	8b 7f       	andi	r24, 0xFB	; 251
    1c6a:	80 93 38 03 	sts	0x0338, r24
					if(print35 == 1){
    1c6e:	8c a1       	ldd	r24, Y+36	; 0x24
    1c70:	9d a1       	ldd	r25, Y+37	; 0x25
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	41 f4       	brne	.+16     	; 0x1c86 <main+0x17b6>
						OrangutanLCD::clear();
    1c76:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1c7a:	8e e0       	ldi	r24, 0x0E	; 14
    1c7c:	93 e0       	ldi	r25, 0x03	; 3
    1c7e:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
    1c82:	1d a2       	std	Y+37, r1	; 0x25
    1c84:	1c a2       	std	Y+36, r1	; 0x24
    1c86:	1f 8e       	std	Y+31, r1	; 0x1f
    1c88:	1e 8e       	std	Y+30, r1	; 0x1e
    1c8a:	04 c0       	rjmp	.+8      	; 0x1c94 <main+0x17c4>
    1c8c:	a1 e0       	ldi	r26, 0x01	; 1
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	b9 8f       	std	Y+25, r27	; 0x19
    1c92:	a8 8f       	std	Y+24, r26	; 0x18
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
    1c94:	2d b7       	in	r18, 0x3d	; 61
    1c96:	3e b7       	in	r19, 0x3e	; 62
    1c98:	22 51       	subi	r18, 0x12	; 18
    1c9a:	30 40       	sbci	r19, 0x00	; 0
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	3e bf       	out	0x3e, r19	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	2d bf       	out	0x3d, r18	; 61
    1ca6:	ed b7       	in	r30, 0x3d	; 61
    1ca8:	fe b7       	in	r31, 0x3e	; 62
    1caa:	31 96       	adiw	r30, 0x01	; 1
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	ad b7       	in	r26, 0x3d	; 61
    1cb2:	be b7       	in	r27, 0x3e	; 62
    1cb4:	12 96       	adiw	r26, 0x02	; 2
    1cb6:	9c 93       	st	X, r25
    1cb8:	8e 93       	st	-X, r24
    1cba:	11 97       	sbiw	r26, 0x01	; 1
    1cbc:	93 83       	std	Z+3, r25	; 0x03
    1cbe:	82 83       	std	Z+2, r24	; 0x02
    1cc0:	95 83       	std	Z+5, r25	; 0x05
    1cc2:	84 83       	std	Z+4, r24	; 0x04
    1cc4:	97 83       	std	Z+7, r25	; 0x07
    1cc6:	86 83       	std	Z+6, r24	; 0x06
    1cc8:	21 e0       	ldi	r18, 0x01	; 1
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	31 87       	std	Z+9, r19	; 0x09
    1cce:	20 87       	std	Z+8, r18	; 0x08
    1cd0:	33 87       	std	Z+11, r19	; 0x0b
    1cd2:	22 87       	std	Z+10, r18	; 0x0a
    1cd4:	35 87       	std	Z+13, r19	; 0x0d
    1cd6:	24 87       	std	Z+12, r18	; 0x0c
    1cd8:	37 87       	std	Z+15, r19	; 0x0f
    1cda:	26 87       	std	Z+14, r18	; 0x0e
    1cdc:	31 8b       	std	Z+17, r19	; 0x11
    1cde:	20 8b       	std	Z+16, r18	; 0x10
    1ce0:	c2 01       	movw	r24, r4
    1ce2:	b1 01       	movw	r22, r2
    1ce4:	4d 81       	ldd	r20, Y+5	; 0x05
    1ce6:	5e 81       	ldd	r21, Y+6	; 0x06
    1ce8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1cea:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1cec:	08 8d       	ldd	r16, Y+24	; 0x18
    1cee:	19 8d       	ldd	r17, Y+25	; 0x19
    1cf0:	ee 24       	eor	r14, r14
    1cf2:	ff 24       	eor	r15, r15
    1cf4:	c8 88       	ldd	r12, Y+16	; 0x10
    1cf6:	d9 88       	ldd	r13, Y+17	; 0x11
    1cf8:	ac 84       	ldd	r10, Y+12	; 0x0c
    1cfa:	bd 84       	ldd	r11, Y+13	; 0x0d
    1cfc:	e2 e0       	ldi	r30, 0x02	; 2
    1cfe:	8e 2e       	mov	r8, r30
    1d00:	91 2c       	mov	r9, r1
    1d02:	0e 94 b3 01 	call	0x366	; 0x366 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    1d06:	8d b7       	in	r24, 0x3d	; 61
    1d08:	9e b7       	in	r25, 0x3e	; 62
    1d0a:	42 96       	adiw	r24, 0x12	; 18
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	9e bf       	out	0x3e, r25	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	8d bf       	out	0x3d, r24	; 61
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("SECOND B");
			while(state != DONER)
    1d1e:	94 e2       	ldi	r25, 0x24	; 36
    1d20:	69 16       	cp	r6, r25
    1d22:	71 04       	cpc	r7, r1
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <main+0x1858>
    1d26:	62 c4       	rjmp	.+2244   	; 0x25ec <main+0x211c>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);

				counter ++;
    1d28:	08 94       	sec
    1d2a:	41 1c       	adc	r4, r1
    1d2c:	51 1c       	adc	r5, r1
    1d2e:	7b cc       	rjmp	.-1802   	; 0x1626 <main+0x1156>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
    1d36:	88 23       	and	r24, r24
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <main+0x186c>
    1d3a:	58 c4       	rjmp	.+2224   	; 0x25ec <main+0x211c>
			OrangutanLCD::gotoXY(7,0);
    1d3c:	87 e0       	ldi	r24, 0x07	; 7
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("BOTH B");
    1d44:	84 e2       	ldi	r24, 0x24	; 36
    1d46:	93 e0       	ldi	r25, 0x03	; 3
    1d48:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
    1d4c:	a1 e0       	ldi	r26, 0x01	; 1
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	bf a3       	std	Y+39, r27	; 0x27
    1d52:	ae a3       	std	Y+38, r26	; 0x26
    1d54:	bb a3       	std	Y+35, r27	; 0x23
    1d56:	aa a3       	std	Y+34, r26	; 0x22
    1d58:	1d 8e       	std	Y+29, r1	; 0x1d
    1d5a:	1c 8e       	std	Y+28, r1	; 0x1c
    1d5c:	1f 8a       	std	Y+23, r1	; 0x17
    1d5e:	1e 8a       	std	Y+22, r1	; 0x16
    1d60:	1b 8a       	std	Y+19, r1	; 0x13
    1d62:	1a 8a       	std	Y+18, r1	; 0x12
    1d64:	1f 86       	std	Y+15, r1	; 0x0f
    1d66:	1e 86       	std	Y+14, r1	; 0x0e
    1d68:	1b 86       	std	Y+11, r1	; 0x0b
    1d6a:	1a 86       	std	Y+10, r1	; 0x0a
    1d6c:	66 24       	eor	r6, r6
    1d6e:	77 24       	eor	r7, r7
    1d70:	44 24       	eor	r4, r4
    1d72:	55 24       	eor	r5, r5
    1d74:	22 24       	eor	r2, r2
    1d76:	33 24       	eor	r3, r3
    1d78:	1c 82       	std	Y+4, r1	; 0x04
    1d7a:	1b 82       	std	Y+3, r1	; 0x03
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1d7c:	84 e4       	ldi	r24, 0x44	; 68
    1d7e:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1d88:	85 e4       	ldi	r24, 0x45	; 69
    1d8a:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1d8e:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z11i2c_readAckv>
    1d92:	80 93 3c 03 	sts	0x033C, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1d96:	0e 94 ac 13 	call	0x2758	; 0x2758 <_Z11i2c_readNakv>
    1d9a:	80 93 3d 03 	sts	0x033D, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1d9e:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z8i2c_stopv>
				
				if(state != INIT){
    1da2:	61 14       	cp	r6, r1
    1da4:	71 04       	cpc	r7, r1
    1da6:	79 f0       	breq	.+30     	; 0x1dc6 <main+0x18f6>
					OrangutanLCD::gotoXY(0,1);
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1db0:	89 ef       	ldi	r24, 0xF9	; 249
    1db2:	92 e0       	ldi	r25, 0x02	; 2
    1db4:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
    1db8:	b3 01       	movw	r22, r6
    1dba:	88 27       	eor	r24, r24
    1dbc:	77 fd       	sbrc	r23, 7
    1dbe:	80 95       	com	r24
    1dc0:	98 2f       	mov	r25, r24
    1dc2:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <_ZN12OrangutanLCD5printEl>
						button = 0;
						stateButton = 0;
					}
				}*/

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1dc6:	c2 01       	movw	r24, r4
    1dc8:	be 01       	movw	r22, r28
    1dca:	6f 5f       	subi	r22, 0xFF	; 255
    1dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dce:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    1dd2:	61 14       	cp	r6, r1
    1dd4:	71 04       	cpc	r7, r1
    1dd6:	29 f4       	brne	.+10     	; 0x1de2 <main+0x1912>
    1dd8:	88 23       	and	r24, r24
    1dda:	09 f4       	brne	.+2      	; 0x1dde <main+0x190e>
    1ddc:	43 c0       	rjmp	.+134    	; 0x1e64 <main+0x1994>
    1dde:	12 01       	movw	r2, r4
    1de0:	04 c0       	rjmp	.+8      	; 0x1dea <main+0x191a>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    1de2:	b1 e0       	ldi	r27, 0x01	; 1
    1de4:	6b 16       	cp	r6, r27
    1de6:	71 04       	cpc	r7, r1
    1de8:	49 f4       	brne	.+18     	; 0x1dfc <main+0x192c>
    1dea:	c2 01       	movw	r24, r4
    1dec:	82 19       	sub	r24, r2
    1dee:	93 09       	sbc	r25, r3
    1df0:	81 5a       	subi	r24, 0xA1	; 161
    1df2:	9f 40       	sbci	r25, 0x0F	; 15
    1df4:	0c f4       	brge	.+2      	; 0x1df8 <main+0x1928>
    1df6:	43 c0       	rjmp	.+134    	; 0x1e7e <main+0x19ae>
    1df8:	12 01       	movw	r2, r4
    1dfa:	04 c0       	rjmp	.+8      	; 0x1e04 <main+0x1934>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    1dfc:	32 e0       	ldi	r19, 0x02	; 2
    1dfe:	63 16       	cp	r6, r19
    1e00:	71 04       	cpc	r7, r1
    1e02:	49 f4       	brne	.+18     	; 0x1e16 <main+0x1946>
    1e04:	c2 01       	movw	r24, r4
    1e06:	82 19       	sub	r24, r2
    1e08:	93 09       	sbc	r25, r3
    1e0a:	85 36       	cpi	r24, 0x65	; 101
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	0c f4       	brge	.+2      	; 0x1e12 <main+0x1942>
    1e10:	46 c0       	rjmp	.+140    	; 0x1e9e <main+0x19ce>
    1e12:	12 01       	movw	r2, r4
    1e14:	04 c0       	rjmp	.+8      	; 0x1e1e <main+0x194e>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1e16:	83 e0       	ldi	r24, 0x03	; 3
    1e18:	68 16       	cp	r6, r24
    1e1a:	71 04       	cpc	r7, r1
    1e1c:	49 f4       	brne	.+18     	; 0x1e30 <main+0x1960>
    1e1e:	c2 01       	movw	r24, r4
    1e20:	82 19       	sub	r24, r2
    1e22:	93 09       	sbc	r25, r3
    1e24:	81 5a       	subi	r24, 0xA1	; 161
    1e26:	9f 40       	sbci	r25, 0x0F	; 15
    1e28:	0c f4       	brge	.+2      	; 0x1e2c <main+0x195c>
    1e2a:	49 c0       	rjmp	.+146    	; 0x1ebe <main+0x19ee>
    1e2c:	12 01       	movw	r2, r4
    1e2e:	04 c0       	rjmp	.+8      	; 0x1e38 <main+0x1968>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1e30:	b4 e0       	ldi	r27, 0x04	; 4
    1e32:	6b 16       	cp	r6, r27
    1e34:	71 04       	cpc	r7, r1
    1e36:	49 f4       	brne	.+18     	; 0x1e4a <main+0x197a>
    1e38:	c2 01       	movw	r24, r4
    1e3a:	82 19       	sub	r24, r2
    1e3c:	93 09       	sbc	r25, r3
    1e3e:	89 5e       	subi	r24, 0xE9	; 233
    1e40:	93 40       	sbci	r25, 0x03	; 3
    1e42:	0c f4       	brge	.+2      	; 0x1e46 <main+0x1976>
    1e44:	4c c0       	rjmp	.+152    	; 0x1ede <main+0x1a0e>
    1e46:	12 01       	movw	r2, r4
    1e48:	04 c0       	rjmp	.+8      	; 0x1e52 <main+0x1982>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    1e4a:	35 e0       	ldi	r19, 0x05	; 5
    1e4c:	63 16       	cp	r6, r19
    1e4e:	71 04       	cpc	r7, r1
    1e50:	49 f4       	brne	.+18     	; 0x1e64 <main+0x1994>
    1e52:	c2 01       	movw	r24, r4
    1e54:	82 19       	sub	r24, r2
    1e56:	93 09       	sbc	r25, r3
    1e58:	85 36       	cpi	r24, 0x65	; 101
    1e5a:	91 05       	cpc	r25, r1
    1e5c:	0c f4       	brge	.+2      	; 0x1e60 <main+0x1990>
    1e5e:	4d c0       	rjmp	.+154    	; 0x1efa <main+0x1a2a>
    1e60:	12 01       	movw	r2, r4
    1e62:	04 c0       	rjmp	.+8      	; 0x1e6c <main+0x199c>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totallength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1e64:	86 e0       	ldi	r24, 0x06	; 6
    1e66:	68 16       	cp	r6, r24
    1e68:	71 04       	cpc	r7, r1
    1e6a:	61 f4       	brne	.+24     	; 0x1e84 <main+0x19b4>
    1e6c:	c2 01       	movw	r24, r4
    1e6e:	82 19       	sub	r24, r2
    1e70:	93 09       	sbc	r25, r3
    1e72:	81 5a       	subi	r24, 0xA1	; 161
    1e74:	9f 40       	sbci	r25, 0x0F	; 15
    1e76:	0c f4       	brge	.+2      	; 0x1e7a <main+0x19aa>
    1e78:	50 c0       	rjmp	.+160    	; 0x1f1a <main+0x1a4a>
    1e7a:	12 01       	movw	r2, r4
    1e7c:	07 c0       	rjmp	.+14     	; 0x1e8c <main+0x19bc>
    1e7e:	21 e0       	ldi	r18, 0x01	; 1
    1e80:	62 2e       	mov	r6, r18
    1e82:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    1e84:	b7 e0       	ldi	r27, 0x07	; 7
    1e86:	6b 16       	cp	r6, r27
    1e88:	71 04       	cpc	r7, r1
    1e8a:	61 f4       	brne	.+24     	; 0x1ea4 <main+0x19d4>
    1e8c:	c2 01       	movw	r24, r4
    1e8e:	82 19       	sub	r24, r2
    1e90:	93 09       	sbc	r25, r3
    1e92:	85 36       	cpi	r24, 0x65	; 101
    1e94:	91 05       	cpc	r25, r1
    1e96:	0c f4       	brge	.+2      	; 0x1e9a <main+0x19ca>
    1e98:	50 c0       	rjmp	.+160    	; 0x1f3a <main+0x1a6a>
    1e9a:	12 01       	movw	r2, r4
    1e9c:	07 c0       	rjmp	.+14     	; 0x1eac <main+0x19dc>
    1e9e:	92 e0       	ldi	r25, 0x02	; 2
    1ea0:	69 2e       	mov	r6, r25
    1ea2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    1ea4:	28 e0       	ldi	r18, 0x08	; 8
    1ea6:	62 16       	cp	r6, r18
    1ea8:	71 04       	cpc	r7, r1
    1eaa:	61 f4       	brne	.+24     	; 0x1ec4 <main+0x19f4>
    1eac:	c2 01       	movw	r24, r4
    1eae:	82 19       	sub	r24, r2
    1eb0:	93 09       	sbc	r25, r3
    1eb2:	85 36       	cpi	r24, 0x65	; 101
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	0c f4       	brge	.+2      	; 0x1eba <main+0x19ea>
    1eb8:	4e c0       	rjmp	.+156    	; 0x1f56 <main+0x1a86>
    1eba:	12 01       	movw	r2, r4
    1ebc:	07 c0       	rjmp	.+14     	; 0x1ecc <main+0x19fc>
    1ebe:	83 e0       	ldi	r24, 0x03	; 3
    1ec0:	68 2e       	mov	r6, r24
    1ec2:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    1ec4:	39 e0       	ldi	r19, 0x09	; 9
    1ec6:	63 16       	cp	r6, r19
    1ec8:	71 04       	cpc	r7, r1
    1eca:	61 f4       	brne	.+24     	; 0x1ee4 <main+0x1a14>
    1ecc:	c2 01       	movw	r24, r4
    1ece:	82 19       	sub	r24, r2
    1ed0:	93 09       	sbc	r25, r3
    1ed2:	81 5a       	subi	r24, 0xA1	; 161
    1ed4:	9f 40       	sbci	r25, 0x0F	; 15
    1ed6:	0c f4       	brge	.+2      	; 0x1eda <main+0x1a0a>
    1ed8:	4e c0       	rjmp	.+156    	; 0x1f76 <main+0x1aa6>
    1eda:	12 01       	movw	r2, r4
    1edc:	07 c0       	rjmp	.+14     	; 0x1eec <main+0x1a1c>
    1ede:	04 e0       	ldi	r16, 0x04	; 4
    1ee0:	60 2e       	mov	r6, r16
    1ee2:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    1ee4:	ba e0       	ldi	r27, 0x0A	; 10
    1ee6:	6b 16       	cp	r6, r27
    1ee8:	71 04       	cpc	r7, r1
    1eea:	51 f4       	brne	.+20     	; 0x1f00 <main+0x1a30>
    1eec:	c2 01       	movw	r24, r4
    1eee:	82 19       	sub	r24, r2
    1ef0:	93 09       	sbc	r25, r3
    1ef2:	85 36       	cpi	r24, 0x65	; 101
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	44 f4       	brge	.+16     	; 0x1f08 <main+0x1a38>
    1ef8:	4e c0       	rjmp	.+156    	; 0x1f96 <main+0x1ac6>
    1efa:	15 e0       	ldi	r17, 0x05	; 5
    1efc:	61 2e       	mov	r6, r17
    1efe:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totallength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1f00:	2b e0       	ldi	r18, 0x0B	; 11
    1f02:	62 16       	cp	r6, r18
    1f04:	71 04       	cpc	r7, r1
    1f06:	61 f4       	brne	.+24     	; 0x1f20 <main+0x1a50>
    1f08:	c2 01       	movw	r24, r4
    1f0a:	82 19       	sub	r24, r2
    1f0c:	93 09       	sbc	r25, r3
    1f0e:	81 5a       	subi	r24, 0xA1	; 161
    1f10:	9f 40       	sbci	r25, 0x0F	; 15
    1f12:	0c f4       	brge	.+2      	; 0x1f16 <main+0x1a46>
    1f14:	50 c0       	rjmp	.+160    	; 0x1fb6 <main+0x1ae6>
    1f16:	12 01       	movw	r2, r4
    1f18:	07 c0       	rjmp	.+14     	; 0x1f28 <main+0x1a58>
    1f1a:	b6 e0       	ldi	r27, 0x06	; 6
    1f1c:	6b 2e       	mov	r6, r27
    1f1e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    1f20:	8c e0       	ldi	r24, 0x0C	; 12
    1f22:	68 16       	cp	r6, r24
    1f24:	71 04       	cpc	r7, r1
    1f26:	61 f4       	brne	.+24     	; 0x1f40 <main+0x1a70>
    1f28:	c2 01       	movw	r24, r4
    1f2a:	82 19       	sub	r24, r2
    1f2c:	93 09       	sbc	r25, r3
    1f2e:	85 36       	cpi	r24, 0x65	; 101
    1f30:	91 05       	cpc	r25, r1
    1f32:	0c f4       	brge	.+2      	; 0x1f36 <main+0x1a66>
    1f34:	50 c0       	rjmp	.+160    	; 0x1fd6 <main+0x1b06>
    1f36:	12 01       	movw	r2, r4
    1f38:	07 c0       	rjmp	.+14     	; 0x1f48 <main+0x1a78>
    1f3a:	a7 e0       	ldi	r26, 0x07	; 7
    1f3c:	6a 2e       	mov	r6, r26
    1f3e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    1f40:	9d e0       	ldi	r25, 0x0D	; 13
    1f42:	69 16       	cp	r6, r25
    1f44:	71 04       	cpc	r7, r1
    1f46:	51 f4       	brne	.+20     	; 0x1f5c <main+0x1a8c>
    1f48:	c2 01       	movw	r24, r4
    1f4a:	82 19       	sub	r24, r2
    1f4c:	93 09       	sbc	r25, r3
    1f4e:	81 5a       	subi	r24, 0xA1	; 161
    1f50:	9f 40       	sbci	r25, 0x0F	; 15
    1f52:	44 f4       	brge	.+16     	; 0x1f64 <main+0x1a94>
    1f54:	50 c0       	rjmp	.+160    	; 0x1ff6 <main+0x1b26>
    1f56:	f8 e0       	ldi	r31, 0x08	; 8
    1f58:	6f 2e       	mov	r6, r31
    1f5a:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
				}
				if(state == B1STOP2 && counter - counterRef > totallength2*fixtureMotorBrush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    1f5c:	be e0       	ldi	r27, 0x0E	; 14
    1f5e:	6b 16       	cp	r6, r27
    1f60:	71 04       	cpc	r7, r1
    1f62:	61 f4       	brne	.+24     	; 0x1f7c <main+0x1aac>
    1f64:	c2 01       	movw	r24, r4
    1f66:	82 19       	sub	r24, r2
    1f68:	93 09       	sbc	r25, r3
    1f6a:	81 5a       	subi	r24, 0xA1	; 161
    1f6c:	9f 40       	sbci	r25, 0x0F	; 15
    1f6e:	0c f4       	brge	.+2      	; 0x1f72 <main+0x1aa2>
    1f70:	52 c0       	rjmp	.+164    	; 0x2016 <main+0x1b46>
    1f72:	12 01       	movw	r2, r4
    1f74:	07 c0       	rjmp	.+14     	; 0x1f84 <main+0x1ab4>
    1f76:	e9 e0       	ldi	r30, 0x09	; 9
    1f78:	6e 2e       	mov	r6, r30
    1f7a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    1f7c:	3f e0       	ldi	r19, 0x0F	; 15
    1f7e:	63 16       	cp	r6, r19
    1f80:	71 04       	cpc	r7, r1
    1f82:	61 f4       	brne	.+24     	; 0x1f9c <main+0x1acc>
    1f84:	c2 01       	movw	r24, r4
    1f86:	82 19       	sub	r24, r2
    1f88:	93 09       	sbc	r25, r3
    1f8a:	85 36       	cpi	r24, 0x65	; 101
    1f8c:	91 05       	cpc	r25, r1
    1f8e:	0c f4       	brge	.+2      	; 0x1f92 <main+0x1ac2>
    1f90:	52 c0       	rjmp	.+164    	; 0x2036 <main+0x1b66>
    1f92:	12 01       	movw	r2, r4
    1f94:	07 c0       	rjmp	.+14     	; 0x1fa4 <main+0x1ad4>
    1f96:	7a e0       	ldi	r23, 0x0A	; 10
    1f98:	67 2e       	mov	r6, r23
    1f9a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    1f9c:	80 e1       	ldi	r24, 0x10	; 16
    1f9e:	68 16       	cp	r6, r24
    1fa0:	71 04       	cpc	r7, r1
    1fa2:	61 f4       	brne	.+24     	; 0x1fbc <main+0x1aec>
    1fa4:	c2 01       	movw	r24, r4
    1fa6:	82 19       	sub	r24, r2
    1fa8:	93 09       	sbc	r25, r3
    1faa:	85 36       	cpi	r24, 0x65	; 101
    1fac:	91 05       	cpc	r25, r1
    1fae:	0c f4       	brge	.+2      	; 0x1fb2 <main+0x1ae2>
    1fb0:	52 c0       	rjmp	.+164    	; 0x2056 <main+0x1b86>
    1fb2:	12 01       	movw	r2, r4
    1fb4:	07 c0       	rjmp	.+14     	; 0x1fc4 <main+0x1af4>
    1fb6:	6b e0       	ldi	r22, 0x0B	; 11
    1fb8:	66 2e       	mov	r6, r22
    1fba:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    1fbc:	91 e1       	ldi	r25, 0x11	; 17
    1fbe:	69 16       	cp	r6, r25
    1fc0:	71 04       	cpc	r7, r1
    1fc2:	61 f4       	brne	.+24     	; 0x1fdc <main+0x1b0c>
    1fc4:	c2 01       	movw	r24, r4
    1fc6:	82 19       	sub	r24, r2
    1fc8:	93 09       	sbc	r25, r3
    1fca:	81 5a       	subi	r24, 0xA1	; 161
    1fcc:	9f 40       	sbci	r25, 0x0F	; 15
    1fce:	0c f4       	brge	.+2      	; 0x1fd2 <main+0x1b02>
    1fd0:	52 c0       	rjmp	.+164    	; 0x2076 <main+0x1ba6>
    1fd2:	12 01       	movw	r2, r4
    1fd4:	07 c0       	rjmp	.+14     	; 0x1fe4 <main+0x1b14>
    1fd6:	5c e0       	ldi	r21, 0x0C	; 12
    1fd8:	65 2e       	mov	r6, r21
    1fda:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    1fdc:	b2 e1       	ldi	r27, 0x12	; 18
    1fde:	6b 16       	cp	r6, r27
    1fe0:	71 04       	cpc	r7, r1
    1fe2:	61 f4       	brne	.+24     	; 0x1ffc <main+0x1b2c>
    1fe4:	c2 01       	movw	r24, r4
    1fe6:	82 19       	sub	r24, r2
    1fe8:	93 09       	sbc	r25, r3
    1fea:	85 36       	cpi	r24, 0x65	; 101
    1fec:	91 05       	cpc	r25, r1
    1fee:	0c f4       	brge	.+2      	; 0x1ff2 <main+0x1b22>
    1ff0:	52 c0       	rjmp	.+164    	; 0x2096 <main+0x1bc6>
    1ff2:	12 01       	movw	r2, r4
    1ff4:	07 c0       	rjmp	.+14     	; 0x2004 <main+0x1b34>
    1ff6:	4d e0       	ldi	r20, 0x0D	; 13
    1ff8:	64 2e       	mov	r6, r20
    1ffa:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totallength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    1ffc:	23 e1       	ldi	r18, 0x13	; 19
    1ffe:	62 16       	cp	r6, r18
    2000:	71 04       	cpc	r7, r1
    2002:	61 f4       	brne	.+24     	; 0x201c <main+0x1b4c>
    2004:	c2 01       	movw	r24, r4
    2006:	82 19       	sub	r24, r2
    2008:	93 09       	sbc	r25, r3
    200a:	81 5a       	subi	r24, 0xA1	; 161
    200c:	9f 40       	sbci	r25, 0x0F	; 15
    200e:	0c f4       	brge	.+2      	; 0x2012 <main+0x1b42>
    2010:	52 c0       	rjmp	.+164    	; 0x20b6 <main+0x1be6>
    2012:	12 01       	movw	r2, r4
    2014:	07 c0       	rjmp	.+14     	; 0x2024 <main+0x1b54>
    2016:	3e e0       	ldi	r19, 0x0E	; 14
    2018:	63 2e       	mov	r6, r19
    201a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    201c:	84 e1       	ldi	r24, 0x14	; 20
    201e:	68 16       	cp	r6, r24
    2020:	71 04       	cpc	r7, r1
    2022:	61 f4       	brne	.+24     	; 0x203c <main+0x1b6c>
    2024:	c2 01       	movw	r24, r4
    2026:	82 19       	sub	r24, r2
    2028:	93 09       	sbc	r25, r3
    202a:	85 36       	cpi	r24, 0x65	; 101
    202c:	91 05       	cpc	r25, r1
    202e:	0c f4       	brge	.+2      	; 0x2032 <main+0x1b62>
    2030:	50 c0       	rjmp	.+160    	; 0x20d2 <main+0x1c02>
    2032:	12 01       	movw	r2, r4
    2034:	07 c0       	rjmp	.+14     	; 0x2044 <main+0x1b74>
    2036:	2f e0       	ldi	r18, 0x0F	; 15
    2038:	62 2e       	mov	r6, r18
    203a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totallength2*fixtureMotorHalfPlate){
    203c:	95 e1       	ldi	r25, 0x15	; 21
    203e:	69 16       	cp	r6, r25
    2040:	71 04       	cpc	r7, r1
    2042:	61 f4       	brne	.+24     	; 0x205c <main+0x1b8c>
    2044:	c2 01       	movw	r24, r4
    2046:	82 19       	sub	r24, r2
    2048:	93 09       	sbc	r25, r3
    204a:	81 5a       	subi	r24, 0xA1	; 161
    204c:	9f 40       	sbci	r25, 0x0F	; 15
    204e:	0c f4       	brge	.+2      	; 0x2052 <main+0x1b82>
    2050:	51 c0       	rjmp	.+162    	; 0x20f4 <main+0x1c24>
    2052:	12 01       	movw	r2, r4
    2054:	07 c0       	rjmp	.+14     	; 0x2064 <main+0x1b94>
    2056:	90 e1       	ldi	r25, 0x10	; 16
    2058:	69 2e       	mov	r6, r25
    205a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    205c:	b6 e1       	ldi	r27, 0x16	; 22
    205e:	6b 16       	cp	r6, r27
    2060:	71 04       	cpc	r7, r1
    2062:	61 f4       	brne	.+24     	; 0x207c <main+0x1bac>
    2064:	c2 01       	movw	r24, r4
    2066:	82 19       	sub	r24, r2
    2068:	93 09       	sbc	r25, r3
    206a:	85 36       	cpi	r24, 0x65	; 101
    206c:	91 05       	cpc	r25, r1
    206e:	0c f4       	brge	.+2      	; 0x2072 <main+0x1ba2>
    2070:	53 c0       	rjmp	.+166    	; 0x2118 <main+0x1c48>
    2072:	12 01       	movw	r2, r4
    2074:	07 c0       	rjmp	.+14     	; 0x2084 <main+0x1bb4>
    2076:	81 e1       	ldi	r24, 0x11	; 17
    2078:	68 2e       	mov	r6, r24
    207a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totallength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    207c:	27 e1       	ldi	r18, 0x17	; 23
    207e:	62 16       	cp	r6, r18
    2080:	71 04       	cpc	r7, r1
    2082:	61 f4       	brne	.+24     	; 0x209c <main+0x1bcc>
    2084:	c2 01       	movw	r24, r4
    2086:	82 19       	sub	r24, r2
    2088:	93 09       	sbc	r25, r3
    208a:	81 5a       	subi	r24, 0xA1	; 161
    208c:	9f 40       	sbci	r25, 0x0F	; 15
    208e:	0c f4       	brge	.+2      	; 0x2092 <main+0x1bc2>
    2090:	53 c0       	rjmp	.+166    	; 0x2138 <main+0x1c68>
    2092:	12 01       	movw	r2, r4
    2094:	07 c0       	rjmp	.+14     	; 0x20a4 <main+0x1bd4>
    2096:	02 e1       	ldi	r16, 0x12	; 18
    2098:	60 2e       	mov	r6, r16
    209a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    209c:	88 e1       	ldi	r24, 0x18	; 24
    209e:	68 16       	cp	r6, r24
    20a0:	71 04       	cpc	r7, r1
    20a2:	61 f4       	brne	.+24     	; 0x20bc <main+0x1bec>
    20a4:	c2 01       	movw	r24, r4
    20a6:	82 19       	sub	r24, r2
    20a8:	93 09       	sbc	r25, r3
    20aa:	85 36       	cpi	r24, 0x65	; 101
    20ac:	91 05       	cpc	r25, r1
    20ae:	0c f4       	brge	.+2      	; 0x20b2 <main+0x1be2>
    20b0:	51 c0       	rjmp	.+162    	; 0x2154 <main+0x1c84>
    20b2:	12 01       	movw	r2, r4
    20b4:	07 c0       	rjmp	.+14     	; 0x20c4 <main+0x1bf4>
    20b6:	13 e1       	ldi	r17, 0x13	; 19
    20b8:	61 2e       	mov	r6, r17
    20ba:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    20bc:	99 e1       	ldi	r25, 0x19	; 25
    20be:	69 16       	cp	r6, r25
    20c0:	71 04       	cpc	r7, r1
    20c2:	51 f4       	brne	.+20     	; 0x20d8 <main+0x1c08>
    20c4:	c2 01       	movw	r24, r4
    20c6:	82 19       	sub	r24, r2
    20c8:	93 09       	sbc	r25, r3
    20ca:	81 5a       	subi	r24, 0xA1	; 161
    20cc:	9f 40       	sbci	r25, 0x0F	; 15
    20ce:	44 f4       	brge	.+16     	; 0x20e0 <main+0x1c10>
    20d0:	51 c0       	rjmp	.+162    	; 0x2174 <main+0x1ca4>
    20d2:	b4 e1       	ldi	r27, 0x14	; 20
    20d4:	6b 2e       	mov	r6, r27
    20d6:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totallength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    20d8:	ba e1       	ldi	r27, 0x1A	; 26
    20da:	6b 16       	cp	r6, r27
    20dc:	71 04       	cpc	r7, r1
    20de:	69 f4       	brne	.+26     	; 0x20fa <main+0x1c2a>
    20e0:	c2 01       	movw	r24, r4
    20e2:	82 19       	sub	r24, r2
    20e4:	93 09       	sbc	r25, r3
    20e6:	81 5a       	subi	r24, 0xA1	; 161
    20e8:	9f 40       	sbci	r25, 0x0F	; 15
    20ea:	0c f4       	brge	.+2      	; 0x20ee <main+0x1c1e>
    20ec:	53 c0       	rjmp	.+166    	; 0x2194 <main+0x1cc4>
    20ee:	5c 82       	std	Y+4, r5	; 0x04
    20f0:	4b 82       	std	Y+3, r4	; 0x03
    20f2:	07 c0       	rjmp	.+14     	; 0x2102 <main+0x1c32>
    20f4:	a5 e1       	ldi	r26, 0x15	; 21
    20f6:	6a 2e       	mov	r6, r26
    20f8:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    20fa:	3b e1       	ldi	r19, 0x1B	; 27
    20fc:	63 16       	cp	r6, r19
    20fe:	71 04       	cpc	r7, r1
    2100:	71 f4       	brne	.+28     	; 0x211e <main+0x1c4e>
    2102:	c2 01       	movw	r24, r4
    2104:	ab 81       	ldd	r26, Y+3	; 0x03
    2106:	bc 81       	ldd	r27, Y+4	; 0x04
    2108:	8a 1b       	sub	r24, r26
    210a:	9b 0b       	sbc	r25, r27
    210c:	85 36       	cpi	r24, 0x65	; 101
    210e:	91 05       	cpc	r25, r1
    2110:	0c f4       	brge	.+2      	; 0x2114 <main+0x1c44>
    2112:	50 c0       	rjmp	.+160    	; 0x21b4 <main+0x1ce4>
    2114:	12 01       	movw	r2, r4
    2116:	07 c0       	rjmp	.+14     	; 0x2126 <main+0x1c56>
    2118:	f6 e1       	ldi	r31, 0x16	; 22
    211a:	6f 2e       	mov	r6, r31
    211c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    211e:	bc e1       	ldi	r27, 0x1C	; 28
    2120:	6b 16       	cp	r6, r27
    2122:	71 04       	cpc	r7, r1
    2124:	61 f4       	brne	.+24     	; 0x213e <main+0x1c6e>
    2126:	c2 01       	movw	r24, r4
    2128:	82 19       	sub	r24, r2
    212a:	93 09       	sbc	r25, r3
    212c:	85 36       	cpi	r24, 0x65	; 101
    212e:	91 05       	cpc	r25, r1
    2130:	0c f4       	brge	.+2      	; 0x2134 <main+0x1c64>
    2132:	50 c0       	rjmp	.+160    	; 0x21d4 <main+0x1d04>
    2134:	12 01       	movw	r2, r4
    2136:	07 c0       	rjmp	.+14     	; 0x2146 <main+0x1c76>
    2138:	e7 e1       	ldi	r30, 0x17	; 23
    213a:	6e 2e       	mov	r6, r30
    213c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totallength2*fixtureMotorWholePlate){
    213e:	2d e1       	ldi	r18, 0x1D	; 29
    2140:	62 16       	cp	r6, r18
    2142:	71 04       	cpc	r7, r1
    2144:	51 f4       	brne	.+20     	; 0x215a <main+0x1c8a>
    2146:	c2 01       	movw	r24, r4
    2148:	82 19       	sub	r24, r2
    214a:	93 09       	sbc	r25, r3
    214c:	81 5a       	subi	r24, 0xA1	; 161
    214e:	9f 40       	sbci	r25, 0x0F	; 15
    2150:	44 f4       	brge	.+16     	; 0x2162 <main+0x1c92>
    2152:	50 c0       	rjmp	.+160    	; 0x21f4 <main+0x1d24>
    2154:	78 e1       	ldi	r23, 0x18	; 24
    2156:	67 2e       	mov	r6, r23
    2158:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totallength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    215a:	8e e1       	ldi	r24, 0x1E	; 30
    215c:	68 16       	cp	r6, r24
    215e:	71 04       	cpc	r7, r1
    2160:	61 f4       	brne	.+24     	; 0x217a <main+0x1caa>
    2162:	c2 01       	movw	r24, r4
    2164:	82 19       	sub	r24, r2
    2166:	93 09       	sbc	r25, r3
    2168:	81 5a       	subi	r24, 0xA1	; 161
    216a:	9f 40       	sbci	r25, 0x0F	; 15
    216c:	0c f4       	brge	.+2      	; 0x2170 <main+0x1ca0>
    216e:	53 c0       	rjmp	.+166    	; 0x2216 <main+0x1d46>
    2170:	12 01       	movw	r2, r4
    2172:	07 c0       	rjmp	.+14     	; 0x2182 <main+0x1cb2>
    2174:	69 e1       	ldi	r22, 0x19	; 25
    2176:	66 2e       	mov	r6, r22
    2178:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    217a:	bf e1       	ldi	r27, 0x1F	; 31
    217c:	6b 16       	cp	r6, r27
    217e:	71 04       	cpc	r7, r1
    2180:	61 f4       	brne	.+24     	; 0x219a <main+0x1cca>
    2182:	c2 01       	movw	r24, r4
    2184:	82 19       	sub	r24, r2
    2186:	93 09       	sbc	r25, r3
    2188:	89 5e       	subi	r24, 0xE9	; 233
    218a:	93 40       	sbci	r25, 0x03	; 3
    218c:	0c f4       	brge	.+2      	; 0x2190 <main+0x1cc0>
    218e:	8f c1       	rjmp	.+798    	; 0x24ae <main+0x1fde>
    2190:	12 01       	movw	r2, r4
    2192:	07 c0       	rjmp	.+14     	; 0x21a2 <main+0x1cd2>
    2194:	5a e1       	ldi	r21, 0x1A	; 26
    2196:	65 2e       	mov	r6, r21
    2198:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totallength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    219a:	30 e2       	ldi	r19, 0x20	; 32
    219c:	63 16       	cp	r6, r19
    219e:	71 04       	cpc	r7, r1
    21a0:	61 f4       	brne	.+24     	; 0x21ba <main+0x1cea>
    21a2:	c2 01       	movw	r24, r4
    21a4:	82 19       	sub	r24, r2
    21a6:	93 09       	sbc	r25, r3
    21a8:	81 5a       	subi	r24, 0xA1	; 161
    21aa:	9f 40       	sbci	r25, 0x0F	; 15
    21ac:	0c f4       	brge	.+2      	; 0x21b0 <main+0x1ce0>
    21ae:	8b c1       	rjmp	.+790    	; 0x24c6 <main+0x1ff6>
    21b0:	12 01       	movw	r2, r4
    21b2:	07 c0       	rjmp	.+14     	; 0x21c2 <main+0x1cf2>
    21b4:	4b e1       	ldi	r20, 0x1B	; 27
    21b6:	64 2e       	mov	r6, r20
    21b8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    21ba:	b1 e2       	ldi	r27, 0x21	; 33
    21bc:	6b 16       	cp	r6, r27
    21be:	71 04       	cpc	r7, r1
    21c0:	61 f4       	brne	.+24     	; 0x21da <main+0x1d0a>
    21c2:	c2 01       	movw	r24, r4
    21c4:	82 19       	sub	r24, r2
    21c6:	93 09       	sbc	r25, r3
    21c8:	85 36       	cpi	r24, 0x65	; 101
    21ca:	91 05       	cpc	r25, r1
    21cc:	0c f4       	brge	.+2      	; 0x21d0 <main+0x1d00>
    21ce:	88 c1       	rjmp	.+784    	; 0x24e0 <main+0x2010>
    21d0:	12 01       	movw	r2, r4
    21d2:	07 c0       	rjmp	.+14     	; 0x21e2 <main+0x1d12>
    21d4:	3c e1       	ldi	r19, 0x1C	; 28
    21d6:	63 2e       	mov	r6, r19
    21d8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totallength1*plateLoadMotorLoadPlate){
    21da:	22 e2       	ldi	r18, 0x22	; 34
    21dc:	62 16       	cp	r6, r18
    21de:	71 04       	cpc	r7, r1
    21e0:	61 f4       	brne	.+24     	; 0x21fa <main+0x1d2a>
    21e2:	c2 01       	movw	r24, r4
    21e4:	82 19       	sub	r24, r2
    21e6:	93 09       	sbc	r25, r3
    21e8:	81 5a       	subi	r24, 0xA1	; 161
    21ea:	9f 40       	sbci	r25, 0x0F	; 15
    21ec:	0c f4       	brge	.+2      	; 0x21f0 <main+0x1d20>
    21ee:	8a c1       	rjmp	.+788    	; 0x2504 <main+0x2034>
    21f0:	12 01       	movw	r2, r4
    21f2:	07 c0       	rjmp	.+14     	; 0x2202 <main+0x1d32>
    21f4:	2d e1       	ldi	r18, 0x1D	; 29
    21f6:	62 2e       	mov	r6, r18
    21f8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    21fa:	83 e2       	ldi	r24, 0x23	; 35
    21fc:	68 16       	cp	r6, r24
    21fe:	71 04       	cpc	r7, r1
    2200:	69 f4       	brne	.+26     	; 0x221c <main+0x1d4c>
    2202:	c2 01       	movw	r24, r4
    2204:	82 19       	sub	r24, r2
    2206:	93 09       	sbc	r25, r3
    2208:	0b 97       	sbiw	r24, 0x0b	; 11
    220a:	0c f4       	brge	.+2      	; 0x220e <main+0x1d3e>
    220c:	88 c1       	rjmp	.+784    	; 0x251e <main+0x204e>
    220e:	94 e2       	ldi	r25, 0x24	; 36
    2210:	69 2e       	mov	r6, r25
    2212:	71 2c       	mov	r7, r1
    2214:	9f c1       	rjmp	.+830    	; 0x2554 <main+0x2084>
    2216:	8e e1       	ldi	r24, 0x1E	; 30
    2218:	68 2e       	mov	r6, r24
    221a:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    221c:	f3 01       	movw	r30, r6
    221e:	e4 32       	cpi	r30, 0x24	; 36
    2220:	f1 05       	cpc	r31, r1
    2222:	08 f0       	brcs	.+2      	; 0x2226 <main+0x1d56>
    2224:	97 c1       	rjmp	.+814    	; 0x2554 <main+0x2084>
    2226:	e8 54       	subi	r30, 0x48	; 72
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	05 90       	lpm	r0, Z+
    2230:	f4 91       	lpm	r31, Z+
    2232:	e0 2d       	mov	r30, r0
    2234:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    2236:	80 91 3c 03 	lds	r24, 0x033C
    223a:	90 91 38 03 	lds	r25, 0x0338
    223e:	20 91 3a 03 	lds	r18, 0x033A
    2242:	82 ff       	sbrs	r24, 2
    2244:	07 c0       	rjmp	.+14     	; 0x2254 <main+0x1d84>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    2246:	9f 7e       	andi	r25, 0xEF	; 239
    2248:	90 93 38 03 	sts	0x0338, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    224c:	27 7f       	andi	r18, 0xF7	; 247
    224e:	20 93 3a 03 	sts	0x033A, r18
    2252:	74 c0       	rjmp	.+232    	; 0x233c <main+0x1e6c>
						fixtureMotor = 1;
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    2254:	9f 7d       	andi	r25, 0xDF	; 223
    2256:	90 93 38 03 	sts	0x0338, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    225a:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    225c:	28 60       	ori	r18, 0x08	; 8
    225e:	20 93 3a 03 	sts	0x033A, r18
						if(print0 == 1){
    2262:	2e a1       	ldd	r18, Y+38	; 0x26
    2264:	3f a1       	ldd	r19, Y+39	; 0x27
    2266:	21 30       	cpi	r18, 0x01	; 1
    2268:	31 05       	cpc	r19, r1
    226a:	09 f0       	breq	.+2      	; 0x226e <main+0x1d9e>
    226c:	ee c0       	rjmp	.+476    	; 0x244a <main+0x1f7a>
							OrangutanLCD::gotoXY(0,1);
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	61 e0       	ldi	r22, 0x01	; 1
    2272:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	93 e0       	ldi	r25, 0x03	; 3
    227a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
    227e:	1f a2       	std	Y+39, r1	; 0x27
    2280:	1e a2       	std	Y+38, r1	; 0x26
    2282:	e3 c0       	rjmp	.+454    	; 0x244a <main+0x1f7a>
						}
					}
					break;
				case LOAD:
					//OrangutanLCD::clear();
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    2284:	20 91 3a 03 	lds	r18, 0x033A
    2288:	32 2f       	mov	r19, r18
    228a:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    228c:	c2 01       	movw	r24, r4
    228e:	68 ec       	ldi	r22, 0xC8	; 200
    2290:	70 e0       	ldi	r23, 0x00	; 0
    2292:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodhi4>
    2296:	84 36       	cpi	r24, 0x64	; 100
    2298:	91 05       	cpc	r25, r1
    229a:	24 f4       	brge	.+8      	; 0x22a4 <main+0x1dd4>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    229c:	2c 7f       	andi	r18, 0xFC	; 252
    229e:	20 93 3a 03 	sts	0x033A, r18
    22a2:	03 c0       	rjmp	.+6      	; 0x22aa <main+0x1dda>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    22a4:	32 60       	ori	r19, 0x02	; 2
    22a6:	30 93 3a 03 	sts	0x033A, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;  //****** dir1 ******
    22aa:	80 91 38 03 	lds	r24, 0x0338
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    22ae:	86 60       	ori	r24, 0x06	; 6
    22b0:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    22b4:	80 91 3a 03 	lds	r24, 0x033A
    22b8:	8b 7f       	andi	r24, 0xFB	; 251
    22ba:	80 93 3a 03 	sts	0x033A, r24
    22be:	2a c1       	rjmp	.+596    	; 0x2514 <main+0x2044>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    22c0:	80 91 3a 03 	lds	r24, 0x033A
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    22c4:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    22c6:	86 61       	ori	r24, 0x16	; 22
    22c8:	80 93 3a 03 	sts	0x033A, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    22cc:	80 91 38 03 	lds	r24, 0x0338
    22d0:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    22d2:	8b 7f       	andi	r24, 0xFB	; 251
    22d4:	80 93 38 03 	sts	0x0338, r24
    22d8:	36 c1       	rjmp	.+620    	; 0x2546 <main+0x2076>
					break;
				case FIXL:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
    22da:	80 91 38 03 	lds	r24, 0x0338
    22de:	80 61       	ori	r24, 0x10	; 16
    22e0:	2b c0       	rjmp	.+86     	; 0x2338 <main+0x1e68>
					fixtureMotor = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    22e2:	80 91 38 03 	lds	r24, 0x0338
    22e6:	8f 7d       	andi	r24, 0xDF	; 223
    22e8:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    22ec:	80 91 3a 03 	lds	r24, 0x033A
    22f0:	88 60       	ori	r24, 0x08	; 8
    22f2:	80 93 3a 03 	sts	0x033A, r24
    22f6:	a9 c0       	rjmp	.+338    	; 0x244a <main+0x1f7a>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    22f8:	80 91 3a 03 	lds	r24, 0x033A
    22fc:	8f 7e       	andi	r24, 0xEF	; 239
    22fe:	80 93 3a 03 	sts	0x033A, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 1;
    2302:	80 91 38 03 	lds	r24, 0x0338
    2306:	80 62       	ori	r24, 0x20	; 32
    2308:	80 93 38 03 	sts	0x0338, r24
    230c:	23 c1       	rjmp	.+582    	; 0x2554 <main+0x2084>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
					fixtureMotor = 1;
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 1;
    230e:	80 91 39 03 	lds	r24, 0x0339
    2312:	81 60       	ori	r24, 0x01	; 1
    2314:	80 93 39 03 	sts	0x0339, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2318:	80 91 38 03 	lds	r24, 0x0338
    231c:	8f 77       	andi	r24, 0x7F	; 127
    231e:	80 93 38 03 	sts	0x0338, r24
    2322:	93 c0       	rjmp	.+294    	; 0x244a <main+0x1f7a>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2324:	80 91 3a 03 	lds	r24, 0x033A
    2328:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    232a:	8f 7d       	andi	r24, 0xDF	; 223
    232c:	80 93 3a 03 	sts	0x033A, r24
    2330:	1b c0       	rjmp	.+54     	; 0x2368 <main+0x1e98>
					break;
				case CLEAN1_1:
					fixtureMotor = 1;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2332:	80 91 38 03 	lds	r24, 0x0338
    2336:	8f 7e       	andi	r24, 0xEF	; 239
    2338:	80 93 38 03 	sts	0x0338, r24
    233c:	a1 e0       	ldi	r26, 0x01	; 1
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	bf 8b       	std	Y+23, r27	; 0x17
    2342:	ae 8b       	std	Y+22, r26	; 0x16
    2344:	07 c1       	rjmp	.+526    	; 0x2554 <main+0x2084>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2346:	80 91 38 03 	lds	r24, 0x0338
    234a:	80 61       	ori	r24, 0x10	; 16
    234c:	32 c0       	rjmp	.+100    	; 0x23b2 <main+0x1ee2>
					fixtureMotor = 1;
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    234e:	80 91 38 03 	lds	r24, 0x0338
    2352:	8f 77       	andi	r24, 0x7F	; 127
    2354:	80 93 38 03 	sts	0x0338, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2358:	80 91 3a 03 	lds	r24, 0x033A
    235c:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    235e:	8f 7d       	andi	r24, 0xDF	; 223
    2360:	80 93 3a 03 	sts	0x033A, r24
    2364:	1f 8a       	std	Y+23, r1	; 0x17
    2366:	1e 8a       	std	Y+22, r1	; 0x16
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	9b 8b       	std	Y+19, r25	; 0x13
    236e:	8a 8b       	std	Y+18, r24	; 0x12
    2370:	f1 c0       	rjmp	.+482    	; 0x2554 <main+0x2084>
					fixtureMotor = 1;
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2372:	80 91 3a 03 	lds	r24, 0x033A
    2376:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2378:	80 62       	ori	r24, 0x20	; 32
    237a:	80 93 3a 03 	sts	0x033A, r24
    237e:	1f 8a       	std	Y+23, r1	; 0x17
    2380:	1e 8a       	std	Y+22, r1	; 0x16
    2382:	1b 8a       	std	Y+19, r1	; 0x13
    2384:	1a 8a       	std	Y+18, r1	; 0x12
    2386:	e6 c0       	rjmp	.+460    	; 0x2554 <main+0x2084>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 1;
    2388:	80 91 39 03 	lds	r24, 0x0339
    238c:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    238e:	8b 7f       	andi	r24, 0xFB	; 251
    2390:	80 93 39 03 	sts	0x0339, r24
    2394:	5a c0       	rjmp	.+180    	; 0x244a <main+0x1f7a>
						print15 = 0;
					}*/
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2396:	80 91 3b 03 	lds	r24, 0x033B
    239a:	81 60       	ori	r24, 0x01	; 1
    239c:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    23a0:	80 91 3a 03 	lds	r24, 0x033A
    23a4:	8f 77       	andi	r24, 0x7F	; 127
    23a6:	80 93 3a 03 	sts	0x033A, r24
    23aa:	26 c0       	rjmp	.+76     	; 0x23f8 <main+0x1f28>
					break;
				case CLEAN2_1:
					fixtureMotor = 1;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    23ac:	80 91 38 03 	lds	r24, 0x0338
    23b0:	8f 7e       	andi	r24, 0xEF	; 239
    23b2:	80 93 38 03 	sts	0x0338, r24
    23b6:	ca c0       	rjmp	.+404    	; 0x254c <main+0x207c>
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    23b8:	80 91 3b 03 	lds	r24, 0x033B
    23bc:	8e 7f       	andi	r24, 0xFE	; 254
    23be:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    23c2:	80 91 3a 03 	lds	r24, 0x033A
    23c6:	80 68       	ori	r24, 0x80	; 128
    23c8:	80 93 3a 03 	sts	0x033A, r24
    23cc:	29 c0       	rjmp	.+82     	; 0x2420 <main+0x1f50>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    23ce:	80 91 38 03 	lds	r24, 0x0338
    23d2:	80 61       	ori	r24, 0x10	; 16
    23d4:	40 c0       	rjmp	.+128    	; 0x2456 <main+0x1f86>
					fixtureMotor = 1;
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    23d6:	80 91 39 03 	lds	r24, 0x0339
    23da:	8b 7f       	andi	r24, 0xFB	; 251
    23dc:	80 93 39 03 	sts	0x0339, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    23e0:	80 91 3b 03 	lds	r24, 0x033B
    23e4:	81 60       	ori	r24, 0x01	; 1
    23e6:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    23ea:	80 91 3a 03 	lds	r24, 0x033A
    23ee:	8f 77       	andi	r24, 0x7F	; 127
    23f0:	80 93 3a 03 	sts	0x033A, r24
    23f4:	1f 8a       	std	Y+23, r1	; 0x17
    23f6:	1e 8a       	std	Y+22, r1	; 0x16
    23f8:	a1 e0       	ldi	r26, 0x01	; 1
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	bf 87       	std	Y+15, r27	; 0x0f
    23fe:	ae 87       	std	Y+14, r26	; 0x0e
    2400:	a9 c0       	rjmp	.+338    	; 0x2554 <main+0x2084>
					fixtureMotor = 1;
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2402:	80 91 3b 03 	lds	r24, 0x033B
    2406:	8e 7f       	andi	r24, 0xFE	; 254
    2408:	80 93 3b 03 	sts	0x033B, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    240c:	80 91 3a 03 	lds	r24, 0x033A
    2410:	80 68       	ori	r24, 0x80	; 128
    2412:	80 93 3a 03 	sts	0x033A, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
    2416:	80 91 39 03 	lds	r24, 0x0339
    241a:	87 7f       	andi	r24, 0xF7	; 247
    241c:	80 93 39 03 	sts	0x0339, r24
    2420:	1f 8a       	std	Y+23, r1	; 0x17
    2422:	1e 8a       	std	Y+22, r1	; 0x16
    2424:	1f 86       	std	Y+15, r1	; 0x0f
    2426:	1e 86       	std	Y+14, r1	; 0x0e
    2428:	95 c0       	rjmp	.+298    	; 0x2554 <main+0x2084>
					break;
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    242a:	80 91 38 03 	lds	r24, 0x0338
    242e:	80 61       	ori	r24, 0x10	; 16
    2430:	80 93 38 03 	sts	0x0338, r24
					fixtureMotor = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
    2434:	80 91 39 03 	lds	r24, 0x0339
    2438:	8e 7f       	andi	r24, 0xFE	; 254
    243a:	80 93 39 03 	sts	0x0339, r24
    243e:	86 c0       	rjmp	.+268    	; 0x254c <main+0x207c>
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2440:	80 91 3b 03 	lds	r24, 0x033B
    2444:	87 7f       	andi	r24, 0xF7	; 247
    2446:	80 93 3b 03 	sts	0x033B, r24
    244a:	1f 8a       	std	Y+23, r1	; 0x17
    244c:	1e 8a       	std	Y+22, r1	; 0x16
    244e:	82 c0       	rjmp	.+260    	; 0x2554 <main+0x2084>
						OrangutanLCD::print("DRY AIR");
						print24 = 0;
					}*/
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2450:	80 91 38 03 	lds	r24, 0x0338
    2454:	8f 7e       	andi	r24, 0xEF	; 239
    2456:	80 93 38 03 	sts	0x0338, r24
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	9f 8b       	std	Y+23, r25	; 0x17
    2460:	8e 8b       	std	Y+22, r24	; 0x16
    2462:	78 c0       	rjmp	.+240    	; 0x2554 <main+0x2084>
					fixtureMotor = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    2464:	80 91 3b 03 	lds	r24, 0x033B
    2468:	88 60       	ori	r24, 0x08	; 8
    246a:	10 c0       	rjmp	.+32     	; 0x248c <main+0x1fbc>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 1;
    246c:	80 91 39 03 	lds	r24, 0x0339
    2470:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    2472:	8f 7d       	andi	r24, 0xDF	; 223
    2474:	80 93 39 03 	sts	0x0339, r24
    2478:	1f 8a       	std	Y+23, r1	; 0x17
    247a:	1e 8a       	std	Y+22, r1	; 0x16
    247c:	a1 e0       	ldi	r26, 0x01	; 1
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	bb 87       	std	Y+11, r27	; 0x0b
    2482:	aa 87       	std	Y+10, r26	; 0x0a
    2484:	67 c0       	rjmp	.+206    	; 0x2554 <main+0x2084>
					/*if(print28 == 1){
							OrangutanLCD::clear();
						OrangutanLCD::print("FINAL DRY");
						print28 = 0;
						}*/
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    2486:	80 91 3b 03 	lds	r24, 0x033B
    248a:	8d 7f       	andi	r24, 0xFD	; 253
    248c:	80 93 3b 03 	sts	0x033B, r24
    2490:	61 c0       	rjmp	.+194    	; 0x2554 <main+0x2084>
				case DRY2:
					fixtureMotor = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    2492:	80 91 39 03 	lds	r24, 0x0339
    2496:	8f 7b       	andi	r24, 0xBF	; 191
    2498:	80 93 39 03 	sts	0x0339, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    249c:	80 91 3b 03 	lds	r24, 0x033B
    24a0:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    24a2:	8b 7f       	andi	r24, 0xFB	; 251
    24a4:	80 93 3b 03 	sts	0x033B, r24
    24a8:	1b 86       	std	Y+11, r1	; 0x0b
    24aa:	1a 86       	std	Y+10, r1	; 0x0a
    24ac:	53 c0       	rjmp	.+166    	; 0x2554 <main+0x2084>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    24ae:	80 91 3a 03 	lds	r24, 0x033A
    24b2:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    24b4:	80 61       	ori	r24, 0x10	; 16
    24b6:	80 93 3a 03 	sts	0x033A, r24
    24ba:	1f 8a       	std	Y+23, r1	; 0x17
    24bc:	1e 8a       	std	Y+22, r1	; 0x16
    24be:	0f e1       	ldi	r16, 0x1F	; 31
    24c0:	60 2e       	mov	r6, r16
    24c2:	71 2c       	mov	r7, r1
    24c4:	47 c0       	rjmp	.+142    	; 0x2554 <main+0x2084>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    24c6:	80 91 38 03 	lds	r24, 0x0338
    24ca:	8f 7e       	andi	r24, 0xEF	; 239
    24cc:	80 93 38 03 	sts	0x0338, r24
    24d0:	21 e0       	ldi	r18, 0x01	; 1
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	3f 8b       	std	Y+23, r19	; 0x17
    24d6:	2e 8b       	std	Y+22, r18	; 0x16
    24d8:	10 e2       	ldi	r17, 0x20	; 32
    24da:	61 2e       	mov	r6, r17
    24dc:	71 2c       	mov	r7, r1
    24de:	3a c0       	rjmp	.+116    	; 0x2554 <main+0x2084>
					fixtureMotor = 1;
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    24e0:	80 91 38 03 	lds	r24, 0x0338
    24e4:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 1;
    24e6:	84 60       	ori	r24, 0x04	; 4
    24e8:	80 93 38 03 	sts	0x0338, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    24ec:	80 91 3a 03 	lds	r24, 0x033A
    24f0:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    24f2:	8f 7e       	andi	r24, 0xEF	; 239
    24f4:	80 93 3a 03 	sts	0x033A, r24
    24f8:	1f 8a       	std	Y+23, r1	; 0x17
    24fa:	1e 8a       	std	Y+22, r1	; 0x16
    24fc:	b1 e2       	ldi	r27, 0x21	; 33
    24fe:	6b 2e       	mov	r6, r27
    2500:	71 2c       	mov	r7, r1
    2502:	28 c0       	rjmp	.+80     	; 0x2554 <main+0x2084>
					break;
    2504:	a2 e2       	ldi	r26, 0x22	; 34
    2506:	6a 2e       	mov	r6, r26
    2508:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    250a:	80 91 38 03 	lds	r24, 0x0338
    250e:	8d 7f       	andi	r24, 0xFD	; 253
    2510:	80 93 38 03 	sts	0x0338, r24
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9d 8f       	std	Y+29, r25	; 0x1d
    251a:	8c 8f       	std	Y+28, r24	; 0x1c
    251c:	1b c0       	rjmp	.+54     	; 0x2554 <main+0x2084>
					plateLoadMotor = 1;
					break;
    251e:	f3 e2       	ldi	r31, 0x23	; 35
    2520:	6f 2e       	mov	r6, r31
    2522:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    2524:	80 91 38 03 	lds	r24, 0x0338
    2528:	8b 7f       	andi	r24, 0xFB	; 251
    252a:	80 93 38 03 	sts	0x0338, r24
					if(print35 == 1){
    252e:	aa a1       	ldd	r26, Y+34	; 0x22
    2530:	bb a1       	ldd	r27, Y+35	; 0x23
    2532:	11 97       	sbiw	r26, 0x01	; 1
    2534:	41 f4       	brne	.+16     	; 0x2546 <main+0x2076>
						OrangutanLCD::clear();
    2536:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    253a:	8e e0       	ldi	r24, 0x0E	; 14
    253c:	93 e0       	ldi	r25, 0x03	; 3
    253e:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
    2542:	1b a2       	std	Y+35, r1	; 0x23
    2544:	1a a2       	std	Y+34, r1	; 0x22
    2546:	1d 8e       	std	Y+29, r1	; 0x1d
    2548:	1c 8e       	std	Y+28, r1	; 0x1c
    254a:	04 c0       	rjmp	.+8      	; 0x2554 <main+0x2084>
    254c:	21 e0       	ldi	r18, 0x01	; 1
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	3f 8b       	std	Y+23, r19	; 0x17
    2552:	2e 8b       	std	Y+22, r18	; 0x16
				i2c_write(0x2);
				i2c_write(u_outputByte0.outputByte0);
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);
    2554:	8d b7       	in	r24, 0x3d	; 61
    2556:	9e b7       	in	r25, 0x3e	; 62
    2558:	42 97       	sbiw	r24, 0x12	; 18
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	9e bf       	out	0x3e, r25	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	8d bf       	out	0x3d, r24	; 61
    2564:	ed b7       	in	r30, 0x3d	; 61
    2566:	fe b7       	in	r31, 0x3e	; 62
    2568:	31 96       	adiw	r30, 0x01	; 1
    256a:	82 e0       	ldi	r24, 0x02	; 2
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	ad b7       	in	r26, 0x3d	; 61
    2570:	be b7       	in	r27, 0x3e	; 62
    2572:	12 96       	adiw	r26, 0x02	; 2
    2574:	9c 93       	st	X, r25
    2576:	8e 93       	st	-X, r24
    2578:	11 97       	sbiw	r26, 0x01	; 1
    257a:	93 83       	std	Z+3, r25	; 0x03
    257c:	82 83       	std	Z+2, r24	; 0x02
    257e:	95 83       	std	Z+5, r25	; 0x05
    2580:	84 83       	std	Z+4, r24	; 0x04
    2582:	97 83       	std	Z+7, r25	; 0x07
    2584:	86 83       	std	Z+6, r24	; 0x06
    2586:	21 e0       	ldi	r18, 0x01	; 1
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	31 87       	std	Z+9, r19	; 0x09
    258c:	20 87       	std	Z+8, r18	; 0x08
    258e:	33 87       	std	Z+11, r19	; 0x0b
    2590:	22 87       	std	Z+10, r18	; 0x0a
    2592:	35 87       	std	Z+13, r19	; 0x0d
    2594:	24 87       	std	Z+12, r18	; 0x0c
    2596:	37 87       	std	Z+15, r19	; 0x0f
    2598:	26 87       	std	Z+14, r18	; 0x0e
    259a:	31 8b       	std	Z+17, r19	; 0x11
    259c:	20 8b       	std	Z+16, r18	; 0x10
    259e:	c2 01       	movw	r24, r4
    25a0:	b1 01       	movw	r22, r2
    25a2:	4b 81       	ldd	r20, Y+3	; 0x03
    25a4:	5c 81       	ldd	r21, Y+4	; 0x04
    25a6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    25a8:	3d 8d       	ldd	r19, Y+29	; 0x1d
    25aa:	0e 89       	ldd	r16, Y+22	; 0x16
    25ac:	1f 89       	ldd	r17, Y+23	; 0x17
    25ae:	ea 88       	ldd	r14, Y+18	; 0x12
    25b0:	fb 88       	ldd	r15, Y+19	; 0x13
    25b2:	ce 84       	ldd	r12, Y+14	; 0x0e
    25b4:	df 84       	ldd	r13, Y+15	; 0x0f
    25b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    25b8:	bb 84       	ldd	r11, Y+11	; 0x0b
    25ba:	e2 e0       	ldi	r30, 0x02	; 2
    25bc:	8e 2e       	mov	r8, r30
    25be:	91 2c       	mov	r9, r1
    25c0:	0e 94 b3 01 	call	0x366	; 0x366 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    25c4:	8d b7       	in	r24, 0x3d	; 61
    25c6:	9e b7       	in	r25, 0x3e	; 62
    25c8:	42 96       	adiw	r24, 0x12	; 18
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	9e bf       	out	0x3e, r25	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	8d bf       	out	0x3d, r24	; 61
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("BOTH B");
			while(state != DONER)
    25dc:	94 e2       	ldi	r25, 0x24	; 36
    25de:	69 16       	cp	r6, r25
    25e0:	71 04       	cpc	r7, r1
    25e2:	21 f0       	breq	.+8      	; 0x25ec <main+0x211c>
				i2c_write(u_outputByte1.outputByte1);*/

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totallength1, totallength2, totallength3, totallength4, totallength5, steplength1, steplength2, steplength3, steplength4, steplength5);

				counter ++;
    25e4:	08 94       	sec
    25e6:	41 1c       	adc	r4, r1
    25e8:	51 1c       	adc	r5, r1
    25ea:	c8 cb       	rjmp	.-2160   	; 0x1d7c <main+0x18ac>
				delay_ms(1);
   		 	}
		}
		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorDrop = 0;
    25ec:	80 91 38 03 	lds	r24, 0x0338
		u_motorByte0.bits_in_motorByte0.fixtureMotorDrop = 0;
    25f0:	8b 7d       	andi	r24, 0xDB	; 219
    25f2:	80 93 38 03 	sts	0x0338, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorDrop = 0;
    25f6:	80 91 39 03 	lds	r24, 0x0339
		u_motorByte1.bits_in_motorByte1.brush2MotorDrop = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorDrop = 0;
    25fa:	86 7b       	andi	r24, 0xB6	; 182
    25fc:	80 93 39 03 	sts	0x0339, r24
		
		i2c_start(I2C1+I2C_WRITE);
    2600:	80 e4       	ldi	r24, 0x40	; 64
    2602:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>
		i2c_write(0x2);
    2606:	82 e0       	ldi	r24, 0x02	; 2
    2608:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
    260c:	80 91 38 03 	lds	r24, 0x0338
    2610:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
    2614:	80 91 39 03 	lds	r24, 0x0339
    2618:	0e 94 90 13 	call	0x2720	; 0x2720 <_Z9i2c_writeh>
		i2c_stop();
    261c:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z8i2c_stopv>
	}
	OrangutanLCD::print("END");
    2620:	8b e2       	ldi	r24, 0x2B	; 43
    2622:	93 e0       	ldi	r25, 0x03	; 3
    2624:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
    2628:	0c 94 82 02 	jmp	0x504	; 0x504 <main+0x34>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
    2632:	88 23       	and	r24, r24
    2634:	11 f0       	breq	.+4      	; 0x263a <main+0x216a>
    2636:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <main+0x110c>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN16OrangutanDigital11isInputHighEh>
    2640:	88 23       	and	r24, r24
    2642:	a1 f6       	brne	.-88     	; 0x25ec <main+0x211c>
    2644:	75 cb       	rjmp	.-2326   	; 0x1d30 <main+0x1860>
    2646:	56 01       	movw	r10, r12
    2648:	00 e0       	ldi	r16, 0x00	; 0
    264a:	10 e0       	ldi	r17, 0x00	; 0
    264c:	8a e2       	ldi	r24, 0x2A	; 42
    264e:	e8 2e       	mov	r14, r24
    2650:	f1 2c       	mov	r15, r1
    2652:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <main+0x882>

00002656 <_ZdlPv>:
  return malloc(size); 
} 

void operator delete(void * ptr) 
{ 
  free(ptr); 
    2656:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <free>
} 
    265a:	08 95       	ret

0000265c <_Znwj>:
void * operator new(size_t size); 
void operator delete(void * ptr); 

void * operator new(size_t size) 
{ 
  return malloc(size); 
    265c:	0e 94 b1 19 	call	0x3362	; 0x3362 <malloc>
} 
    2660:	08 95       	ret

00002662 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    2662:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    2666:	8c e0       	ldi	r24, 0x0C	; 12
    2668:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    266c:	08 95       	ret

0000266e <_Z9i2c_starth>:

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    266e:	98 2f       	mov	r25, r24
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2670:	84 ea       	ldi	r24, 0xA4	; 164
    2672:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    2676:	80 91 bc 00 	lds	r24, 0x00BC
    267a:	87 ff       	sbrs	r24, 7
    267c:	fc cf       	rjmp	.-8      	; 0x2676 <_Z9i2c_starth+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    267e:	80 91 b9 00 	lds	r24, 0x00B9
    2682:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    2684:	88 30       	cpi	r24, 0x08	; 8
    2686:	21 f0       	breq	.+8      	; 0x2690 <_Z9i2c_starth+0x22>
    2688:	80 31       	cpi	r24, 0x10	; 16
    268a:	11 f0       	breq	.+4      	; 0x2690 <_Z9i2c_starth+0x22>
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	08 95       	ret

	// send device address
	TWDR = address;
    2690:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2694:	84 e8       	ldi	r24, 0x84	; 132
    2696:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    269a:	80 91 bc 00 	lds	r24, 0x00BC
    269e:	87 ff       	sbrs	r24, 7
    26a0:	fc cf       	rjmp	.-8      	; 0x269a <_Z9i2c_starth+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    26a2:	90 91 b9 00 	lds	r25, 0x00B9
    26a6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    26a8:	98 31       	cpi	r25, 0x18	; 24
    26aa:	11 f4       	brne	.+4      	; 0x26b0 <_Z9i2c_starth+0x42>
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	08 95       	ret
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 34       	cpi	r25, 0x40	; 64
    26b4:	09 f0       	breq	.+2      	; 0x26b8 <_Z9i2c_starth+0x4a>
    26b6:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    26b8:	08 95       	ret

000026ba <_Z14i2c_start_waith>:
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
    26ba:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    26bc:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    26be:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    26c0:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    26c2:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    26c6:	80 91 bc 00 	lds	r24, 0x00BC
    26ca:	87 ff       	sbrs	r24, 7
    26cc:	fc cf       	rjmp	.-8      	; 0x26c6 <_Z14i2c_start_waith+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    26ce:	80 91 b9 00 	lds	r24, 0x00B9
    26d2:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    26d4:	88 30       	cpi	r24, 0x08	; 8
    26d6:	11 f0       	breq	.+4      	; 0x26dc <_Z14i2c_start_waith+0x22>
    26d8:	80 31       	cpi	r24, 0x10	; 16
    26da:	99 f7       	brne	.-26     	; 0x26c2 <_Z14i2c_start_waith+0x8>
    
    	// send device address
    	TWDR = address;
    26dc:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    26e0:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    26e4:	80 91 bc 00 	lds	r24, 0x00BC
    26e8:	87 ff       	sbrs	r24, 7
    26ea:	fc cf       	rjmp	.-8      	; 0x26e4 <_Z14i2c_start_waith+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    26ec:	80 91 b9 00 	lds	r24, 0x00B9
    26f0:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    26f2:	80 32       	cpi	r24, 0x20	; 32
    26f4:	11 f0       	breq	.+4      	; 0x26fa <_Z14i2c_start_waith+0x40>
    26f6:	88 35       	cpi	r24, 0x58	; 88
    26f8:	39 f4       	brne	.+14     	; 0x2708 <_Z14i2c_start_waith+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    26fa:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    26fe:	80 91 bc 00 	lds	r24, 0x00BC
    2702:	84 fd       	sbrc	r24, 4
    2704:	fc cf       	rjmp	.-8      	; 0x26fe <_Z14i2c_start_waith+0x44>
    2706:	dd cf       	rjmp	.-70     	; 0x26c2 <_Z14i2c_start_waith+0x8>
    2708:	08 95       	ret

0000270a <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    270a:	0e 94 37 13 	call	0x266e	; 0x266e <_Z9i2c_starth>

}/* i2c_rep_start */
    270e:	08 95       	ret

00002710 <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2710:	84 e9       	ldi	r24, 0x94	; 148
    2712:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2716:	80 91 bc 00 	lds	r24, 0x00BC
    271a:	84 fd       	sbrc	r24, 4
    271c:	fc cf       	rjmp	.-8      	; 0x2716 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    271e:	08 95       	ret

00002720 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2720:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2724:	84 e8       	ldi	r24, 0x84	; 132
    2726:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    272a:	80 91 bc 00 	lds	r24, 0x00BC
    272e:	87 ff       	sbrs	r24, 7
    2730:	fc cf       	rjmp	.-8      	; 0x272a <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    2732:	80 91 b9 00 	lds	r24, 0x00B9
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	88 7f       	andi	r24, 0xF8	; 248
    273a:	88 32       	cpi	r24, 0x28	; 40
    273c:	09 f0       	breq	.+2      	; 0x2740 <_Z9i2c_writeh+0x20>
    273e:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    2740:	89 2f       	mov	r24, r25
    2742:	08 95       	ret

00002744 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2744:	84 ec       	ldi	r24, 0xC4	; 196
    2746:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    274a:	80 91 bc 00 	lds	r24, 0x00BC
    274e:	87 ff       	sbrs	r24, 7
    2750:	fc cf       	rjmp	.-8      	; 0x274a <_Z11i2c_readAckv+0x6>

    return TWDR;
    2752:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    2756:	08 95       	ret

00002758 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2758:	84 e8       	ldi	r24, 0x84	; 132
    275a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    275e:	80 91 bc 00 	lds	r24, 0x00BC
    2762:	87 ff       	sbrs	r24, 7
    2764:	fc cf       	rjmp	.-8      	; 0x275e <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    2766:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    276a:	08 95       	ret

0000276c <_ZN12OrangutanLCDC2Ev>:
    276c:	08 95       	ret

0000276e <_ZN12OrangutanLCDC1Ev>:
    276e:	08 95       	ret

00002770 <void_getchar>:
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	08 95       	ret

00002776 <_ZN12OrangutanLCD8busyWaitEv>:
    2776:	ef 92       	push	r14
    2778:	ff 92       	push	r15
    277a:	0f 93       	push	r16
    277c:	1f 93       	push	r17
    277e:	67 b1       	in	r22, 0x07	; 7
    2780:	3d 98       	cbi	0x07, 5	; 7
    2782:	28 98       	cbi	0x05, 0	; 5
    2784:	29 9a       	sbi	0x05, 1	; 5
    2786:	e0 90 46 03 	lds	r14, 0x0346
    278a:	f0 90 47 03 	lds	r15, 0x0347
    278e:	00 91 48 03 	lds	r16, 0x0348
    2792:	10 91 49 03 	lds	r17, 0x0349
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	41 e0       	ldi	r20, 0x01	; 1
    279c:	50 e0       	ldi	r21, 0x00	; 0
    279e:	ca 01       	movw	r24, r20
    27a0:	6f 93       	push	r22
    27a2:	64 e0       	ldi	r22, 0x04	; 4
    27a4:	6a 95       	dec	r22
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    27a8:	6f 91       	pop	r22
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	c9 f7       	brne	.-14     	; 0x27a0 <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    27ae:	2a 9a       	sbi	0x05, 2	; 5
    27b0:	ca 01       	movw	r24, r20
    27b2:	6f 93       	push	r22
    27b4:	64 e0       	ldi	r22, 0x04	; 4
    27b6:	6a 95       	dec	r22
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    27ba:	6f 91       	pop	r22
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	c9 f7       	brne	.-14     	; 0x27b2 <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    27c0:	86 b1       	in	r24, 0x06	; 6
    27c2:	2a 98       	cbi	0x05, 2	; 5
    27c4:	fa 01       	movw	r30, r20
    27c6:	6f 93       	push	r22
    27c8:	64 e0       	ldi	r22, 0x04	; 4
    27ca:	6a 95       	dec	r22
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <_ZN12OrangutanLCD8busyWaitEv+0x54>
    27ce:	6f 91       	pop	r22
    27d0:	31 97       	sbiw	r30, 0x01	; 1
    27d2:	c9 f7       	brne	.-14     	; 0x27c6 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    27d4:	2a 9a       	sbi	0x05, 2	; 5
    27d6:	fa 01       	movw	r30, r20
    27d8:	6f 93       	push	r22
    27da:	64 e0       	ldi	r22, 0x04	; 4
    27dc:	6a 95       	dec	r22
    27de:	f1 f7       	brne	.-4      	; 0x27dc <_ZN12OrangutanLCD8busyWaitEv+0x66>
    27e0:	6f 91       	pop	r22
    27e2:	31 97       	sbiw	r30, 0x01	; 1
    27e4:	c9 f7       	brne	.-14     	; 0x27d8 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    27e6:	2a 98       	cbi	0x05, 2	; 5
    27e8:	2c 5f       	subi	r18, 0xFC	; 252
    27ea:	3f 4f       	sbci	r19, 0xFF	; 255
    27ec:	85 ff       	sbrs	r24, 5
    27ee:	09 c0       	rjmp	.+18     	; 0x2802 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    27f0:	c9 01       	movw	r24, r18
    27f2:	a0 e0       	ldi	r26, 0x00	; 0
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	8e 15       	cp	r24, r14
    27f8:	9f 05       	cpc	r25, r15
    27fa:	a0 07       	cpc	r26, r16
    27fc:	b1 07       	cpc	r27, r17
    27fe:	08 f4       	brcc	.+2      	; 0x2802 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    2800:	ce cf       	rjmp	.-100    	; 0x279e <_ZN12OrangutanLCD8busyWaitEv+0x28>
    2802:	c9 01       	movw	r24, r18
    2804:	a0 e0       	ldi	r26, 0x00	; 0
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	8e 15       	cp	r24, r14
    280a:	9f 05       	cpc	r25, r15
    280c:	a0 07       	cpc	r26, r16
    280e:	b1 07       	cpc	r27, r17
    2810:	28 f0       	brcs	.+10     	; 0x281c <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    2812:	82 e3       	ldi	r24, 0x32	; 50
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	a0 e0       	ldi	r26, 0x00	; 0
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	04 c0       	rjmp	.+8      	; 0x2824 <_ZN12OrangutanLCD8busyWaitEv+0xae>
    281c:	80 e3       	ldi	r24, 0x30	; 48
    281e:	95 e7       	ldi	r25, 0x75	; 117
    2820:	a0 e0       	ldi	r26, 0x00	; 0
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	80 93 46 03 	sts	0x0346, r24
    2828:	90 93 47 03 	sts	0x0347, r25
    282c:	a0 93 48 03 	sts	0x0348, r26
    2830:	b0 93 49 03 	sts	0x0349, r27
    2834:	67 b9       	out	0x07, r22	; 7
    2836:	1f 91       	pop	r17
    2838:	0f 91       	pop	r16
    283a:	ff 90       	pop	r15
    283c:	ef 90       	pop	r14
    283e:	08 95       	ret

00002840 <_ZN12OrangutanLCD8sendDataEh>:
    2840:	28 b1       	in	r18, 0x08	; 8
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	8f 70       	andi	r24, 0x0F	; 15
    2846:	90 70       	andi	r25, 0x00	; 0
    2848:	88 0f       	add	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	23 7c       	andi	r18, 0xC3	; 195
    2852:	28 2b       	or	r18, r24
    2854:	28 b9       	out	0x08, r18	; 8
    2856:	2a 9a       	sbi	0x05, 2	; 5
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	fc 01       	movw	r30, r24
    285e:	6f 93       	push	r22
    2860:	64 e0       	ldi	r22, 0x04	; 4
    2862:	6a 95       	dec	r22
    2864:	f1 f7       	brne	.-4      	; 0x2862 <_ZN12OrangutanLCD8sendDataEh+0x22>
    2866:	6f 91       	pop	r22
    2868:	31 97       	sbiw	r30, 0x01	; 1
    286a:	c9 f7       	brne	.-14     	; 0x285e <_ZN12OrangutanLCD8sendDataEh+0x1e>
    286c:	2a 98       	cbi	0x05, 2	; 5
    286e:	6f 93       	push	r22
    2870:	64 e0       	ldi	r22, 0x04	; 4
    2872:	6a 95       	dec	r22
    2874:	f1 f7       	brne	.-4      	; 0x2872 <_ZN12OrangutanLCD8sendDataEh+0x32>
    2876:	6f 91       	pop	r22
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	c9 f7       	brne	.-14     	; 0x286e <_ZN12OrangutanLCD8sendDataEh+0x2e>
    287c:	08 95       	ret

0000287e <_ZN12OrangutanLCD10initPrintfEv>:
    287e:	80 91 42 03 	lds	r24, 0x0342
    2882:	90 91 43 03 	lds	r25, 0x0343
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	11 f0       	breq	.+4      	; 0x288e <_ZN12OrangutanLCD10initPrintfEv+0x10>
    288a:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <free>
    288e:	80 91 2f 03 	lds	r24, 0x032F
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	20 91 30 03 	lds	r18, 0x0330
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	ac 01       	movw	r20, r24
    289e:	42 9f       	mul	r20, r18
    28a0:	c0 01       	movw	r24, r0
    28a2:	43 9f       	mul	r20, r19
    28a4:	90 0d       	add	r25, r0
    28a6:	52 9f       	mul	r21, r18
    28a8:	90 0d       	add	r25, r0
    28aa:	11 24       	eor	r1, r1
    28ac:	0e 94 b1 19 	call	0x3362	; 0x3362 <malloc>
    28b0:	90 93 43 03 	sts	0x0343, r25
    28b4:	80 93 42 03 	sts	0x0342, r24
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	29 f1       	breq	.+74     	; 0x2906 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    28bc:	60 e0       	ldi	r22, 0x00	; 0
    28be:	70 e2       	ldi	r23, 0x20	; 32
    28c0:	08 c0       	rjmp	.+16     	; 0x28d2 <_ZN12OrangutanLCD10initPrintfEv+0x54>
    28c2:	e0 91 42 03 	lds	r30, 0x0342
    28c6:	f0 91 43 03 	lds	r31, 0x0343
    28ca:	e4 0f       	add	r30, r20
    28cc:	f5 1f       	adc	r31, r21
    28ce:	70 83       	st	Z, r23
    28d0:	6f 5f       	subi	r22, 0xFF	; 255
    28d2:	46 2f       	mov	r20, r22
    28d4:	50 e0       	ldi	r21, 0x00	; 0
    28d6:	80 91 2f 03 	lds	r24, 0x032F
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	20 91 30 03 	lds	r18, 0x0330
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	fc 01       	movw	r30, r24
    28e6:	e2 9f       	mul	r30, r18
    28e8:	c0 01       	movw	r24, r0
    28ea:	e3 9f       	mul	r30, r19
    28ec:	90 0d       	add	r25, r0
    28ee:	f2 9f       	mul	r31, r18
    28f0:	90 0d       	add	r25, r0
    28f2:	11 24       	eor	r1, r1
    28f4:	48 17       	cp	r20, r24
    28f6:	59 07       	cpc	r21, r25
    28f8:	24 f3       	brlt	.-56     	; 0x28c2 <_ZN12OrangutanLCD10initPrintfEv+0x44>
    28fa:	84 ea       	ldi	r24, 0xA4	; 164
    28fc:	96 e1       	ldi	r25, 0x16	; 22
    28fe:	68 eb       	ldi	r22, 0xB8	; 184
    2900:	73 e1       	ldi	r23, 0x13	; 19
    2902:	0e 94 b6 1a 	call	0x356c	; 0x356c <fdevopen>
    2906:	08 95       	ret

00002908 <_ZN12OrangutanLCD10initPrintfEhh>:
    2908:	80 93 30 03 	sts	0x0330, r24
    290c:	60 93 2f 03 	sts	0x032F, r22
    2910:	0e 94 3f 14 	call	0x287e	; 0x287e <_ZN12OrangutanLCD10initPrintfEv>
    2914:	08 95       	ret

00002916 <lcd_init_printf_with_dimensions>:
    2916:	80 93 30 03 	sts	0x0330, r24
    291a:	60 93 2f 03 	sts	0x032F, r22
    291e:	0e 94 3f 14 	call	0x287e	; 0x287e <_ZN12OrangutanLCD10initPrintfEv>
    2922:	08 95       	ret

00002924 <lcd_init_printf>:
    2924:	0e 94 3f 14 	call	0x287e	; 0x287e <_ZN12OrangutanLCD10initPrintfEv>
    2928:	08 95       	ret

0000292a <_ZN12OrangutanLCD5init2Ev>:
    292a:	3d 98       	cbi	0x07, 5	; 7
    292c:	45 9a       	sbi	0x08, 5	; 8
    292e:	80 e3       	ldi	r24, 0x30	; 48
    2930:	95 e7       	ldi	r25, 0x75	; 117
    2932:	a0 e0       	ldi	r26, 0x00	; 0
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	80 93 46 03 	sts	0x0346, r24
    293a:	90 93 47 03 	sts	0x0347, r25
    293e:	a0 93 48 03 	sts	0x0348, r26
    2942:	b0 93 49 03 	sts	0x0349, r27
    2946:	20 9a       	sbi	0x04, 0	; 4
    2948:	21 9a       	sbi	0x04, 1	; 4
    294a:	22 9a       	sbi	0x04, 2	; 4
    294c:	8e e1       	ldi	r24, 0x1E	; 30
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>
    2954:	83 e0       	ldi	r24, 0x03	; 3
    2956:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    295a:	86 e0       	ldi	r24, 0x06	; 6
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>
    2962:	83 e0       	ldi	r24, 0x03	; 3
    2964:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2968:	82 e0       	ldi	r24, 0x02	; 2
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>
    2970:	83 e0       	ldi	r24, 0x03	; 3
    2972:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2976:	82 e0       	ldi	r24, 0x02	; 2
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>
    297e:	82 e0       	ldi	r24, 0x02	; 2
    2980:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2984:	82 e0       	ldi	r24, 0x02	; 2
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>
    298c:	88 e2       	ldi	r24, 0x28	; 40
    298e:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_ZN12OrangutanLCD8send_cmdEh>
    2992:	88 e0       	ldi	r24, 0x08	; 8
    2994:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_ZN12OrangutanLCD8send_cmdEh>
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_ZN12OrangutanLCD8send_cmdEh>
    299e:	86 e0       	ldi	r24, 0x06	; 6
    29a0:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_ZN12OrangutanLCD8send_cmdEh>
    29a4:	8c e0       	ldi	r24, 0x0C	; 12
    29a6:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_ZN12OrangutanLCD8send_cmdEh>
    29aa:	08 95       	ret

000029ac <_ZN12OrangutanLCD4initEv>:
    29ac:	80 91 4a 03 	lds	r24, 0x034A
    29b0:	88 23       	and	r24, r24
    29b2:	29 f4       	brne	.+10     	; 0x29be <_ZN12OrangutanLCD4initEv+0x12>
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	80 93 4a 03 	sts	0x034A, r24
    29ba:	0e 94 95 14 	call	0x292a	; 0x292a <_ZN12OrangutanLCD5init2Ev>
    29be:	08 95       	ret

000029c0 <_ZN12OrangutanLCD4sendEhhh>:
    29c0:	ff 92       	push	r15
    29c2:	0f 93       	push	r16
    29c4:	1f 93       	push	r17
    29c6:	08 2f       	mov	r16, r24
    29c8:	16 2f       	mov	r17, r22
    29ca:	f4 2e       	mov	r15, r20
    29cc:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN12OrangutanLCD4initEv>
    29d0:	0e 94 bb 13 	call	0x2776	; 0x2776 <_ZN12OrangutanLCD8busyWaitEv>
    29d4:	37 b1       	in	r19, 0x07	; 7
    29d6:	28 b1       	in	r18, 0x08	; 8
    29d8:	29 98       	cbi	0x05, 1	; 5
    29da:	11 23       	and	r17, r17
    29dc:	11 f0       	breq	.+4      	; 0x29e2 <_ZN12OrangutanLCD4sendEhhh+0x22>
    29de:	28 9a       	sbi	0x05, 0	; 5
    29e0:	01 c0       	rjmp	.+2      	; 0x29e4 <_ZN12OrangutanLCD4sendEhhh+0x24>
    29e2:	28 98       	cbi	0x05, 0	; 5
    29e4:	87 b1       	in	r24, 0x07	; 7
    29e6:	8c 63       	ori	r24, 0x3C	; 60
    29e8:	87 b9       	out	0x07, r24	; 7
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	f8 16       	cp	r15, r24
    29ee:	e1 f0       	breq	.+56     	; 0x2a28 <_ZN12OrangutanLCD4sendEhhh+0x68>
    29f0:	88 b1       	in	r24, 0x08	; 8
    29f2:	90 2f       	mov	r25, r16
    29f4:	92 95       	swap	r25
    29f6:	9f 70       	andi	r25, 0x0F	; 15
    29f8:	99 0f       	add	r25, r25
    29fa:	99 0f       	add	r25, r25
    29fc:	83 7c       	andi	r24, 0xC3	; 195
    29fe:	98 2b       	or	r25, r24
    2a00:	98 b9       	out	0x08, r25	; 8
    2a02:	2a 9a       	sbi	0x05, 2	; 5
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	fc 01       	movw	r30, r24
    2a0a:	6f 93       	push	r22
    2a0c:	64 e0       	ldi	r22, 0x04	; 4
    2a0e:	6a 95       	dec	r22
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <_ZN12OrangutanLCD4sendEhhh+0x4e>
    2a12:	6f 91       	pop	r22
    2a14:	31 97       	sbiw	r30, 0x01	; 1
    2a16:	c9 f7       	brne	.-14     	; 0x2a0a <_ZN12OrangutanLCD4sendEhhh+0x4a>
    2a18:	2a 98       	cbi	0x05, 2	; 5
    2a1a:	6f 93       	push	r22
    2a1c:	64 e0       	ldi	r22, 0x04	; 4
    2a1e:	6a 95       	dec	r22
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <_ZN12OrangutanLCD4sendEhhh+0x5e>
    2a22:	6f 91       	pop	r22
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	c9 f7       	brne	.-14     	; 0x2a1a <_ZN12OrangutanLCD4sendEhhh+0x5a>
    2a28:	88 b1       	in	r24, 0x08	; 8
    2a2a:	0f 70       	andi	r16, 0x0F	; 15
    2a2c:	00 0f       	add	r16, r16
    2a2e:	00 0f       	add	r16, r16
    2a30:	83 7c       	andi	r24, 0xC3	; 195
    2a32:	80 2b       	or	r24, r16
    2a34:	88 b9       	out	0x08, r24	; 8
    2a36:	2a 9a       	sbi	0x05, 2	; 5
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	6f 93       	push	r22
    2a40:	64 e0       	ldi	r22, 0x04	; 4
    2a42:	6a 95       	dec	r22
    2a44:	f1 f7       	brne	.-4      	; 0x2a42 <_ZN12OrangutanLCD4sendEhhh+0x82>
    2a46:	6f 91       	pop	r22
    2a48:	31 97       	sbiw	r30, 0x01	; 1
    2a4a:	c9 f7       	brne	.-14     	; 0x2a3e <_ZN12OrangutanLCD4sendEhhh+0x7e>
    2a4c:	2a 98       	cbi	0x05, 2	; 5
    2a4e:	6f 93       	push	r22
    2a50:	64 e0       	ldi	r22, 0x04	; 4
    2a52:	6a 95       	dec	r22
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <_ZN12OrangutanLCD4sendEhhh+0x92>
    2a56:	6f 91       	pop	r22
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	c9 f7       	brne	.-14     	; 0x2a4e <_ZN12OrangutanLCD4sendEhhh+0x8e>
    2a5c:	37 b9       	out	0x07, r19	; 7
    2a5e:	28 b9       	out	0x08, r18	; 8
    2a60:	1f 91       	pop	r17
    2a62:	0f 91       	pop	r16
    2a64:	ff 90       	pop	r15
    2a66:	08 95       	ret

00002a68 <_ZN12OrangutanLCD8send_cmdEh>:
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	42 e0       	ldi	r20, 0x02	; 2
    2a6c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <_ZN12OrangutanLCD4sendEhhh>
    2a70:	08 95       	ret

00002a72 <_ZN12OrangutanLCD10moveCursorEhh>:
    2a72:	0f 93       	push	r16
    2a74:	1f 93       	push	r17
    2a76:	08 2f       	mov	r16, r24
    2a78:	16 2f       	mov	r17, r22
    2a7a:	08 c0       	rjmp	.+16     	; 0x2a8c <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    2a7c:	00 23       	and	r16, r16
    2a7e:	11 f4       	brne	.+4      	; 0x2a84 <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    2a80:	80 e1       	ldi	r24, 0x10	; 16
    2a82:	01 c0       	rjmp	.+2      	; 0x2a86 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    2a84:	84 e1       	ldi	r24, 0x14	; 20
    2a86:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_ZN12OrangutanLCD8send_cmdEh>
    2a8a:	11 50       	subi	r17, 0x01	; 1
    2a8c:	11 23       	and	r17, r17
    2a8e:	b1 f7       	brne	.-20     	; 0x2a7c <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    2a90:	1f 91       	pop	r17
    2a92:	0f 91       	pop	r16
    2a94:	08 95       	ret

00002a96 <lcd_move_cursor>:
    2a96:	0e 94 39 15 	call	0x2a72	; 0x2a72 <_ZN12OrangutanLCD10moveCursorEhh>
    2a9a:	08 95       	ret

00002a9c <_ZN12OrangutanLCD10hideCursorEv>:
    2a9c:	8c e0       	ldi	r24, 0x0C	; 12
    2a9e:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_ZN12OrangutanLCD8send_cmdEh>
    2aa2:	08 95       	ret

00002aa4 <lcd_hide_cursor>:
    2aa4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <_ZN12OrangutanLCD10hideCursorEv>
    2aa8:	08 95       	ret

00002aaa <_ZN12OrangutanLCD10showCursorEh>:
    2aaa:	81 30       	cpi	r24, 0x01	; 1
    2aac:	11 f4       	brne	.+4      	; 0x2ab2 <_ZN12OrangutanLCD10showCursorEh+0x8>
    2aae:	8f e0       	ldi	r24, 0x0F	; 15
    2ab0:	01 c0       	rjmp	.+2      	; 0x2ab4 <_ZN12OrangutanLCD10showCursorEh+0xa>
    2ab2:	8e e0       	ldi	r24, 0x0E	; 14
    2ab4:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_ZN12OrangutanLCD8send_cmdEh>
    2ab8:	08 95       	ret

00002aba <lcd_show_cursor>:
    2aba:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <_ZN12OrangutanLCD10showCursorEh>
    2abe:	08 95       	ret

00002ac0 <_ZN12OrangutanLCD6gotoXYEhh>:
    2ac0:	a4 e0       	ldi	r26, 0x04	; 4
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e6 e6       	ldi	r30, 0x66	; 102
    2ac6:	f5 e1       	ldi	r31, 0x15	; 21
    2ac8:	0c 94 74 19 	jmp	0x32e8	; 0x32e8 <__prologue_saves__+0x1c>
    2acc:	18 2f       	mov	r17, r24
    2ace:	06 2f       	mov	r16, r22
    2ad0:	80 e8       	ldi	r24, 0x80	; 128
    2ad2:	89 83       	std	Y+1, r24	; 0x01
    2ad4:	80 ec       	ldi	r24, 0xC0	; 192
    2ad6:	8a 83       	std	Y+2, r24	; 0x02
    2ad8:	84 e9       	ldi	r24, 0x94	; 148
    2ada:	8b 83       	std	Y+3, r24	; 0x03
    2adc:	84 ed       	ldi	r24, 0xD4	; 212
    2ade:	8c 83       	std	Y+4, r24	; 0x04
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	e6 0f       	add	r30, r22
    2ae4:	f1 1d       	adc	r31, r1
    2ae6:	81 81       	ldd	r24, Z+1	; 0x01
    2ae8:	81 0f       	add	r24, r17
    2aea:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_ZN12OrangutanLCD8send_cmdEh>
    2aee:	10 93 45 03 	sts	0x0345, r17
    2af2:	00 93 44 03 	sts	0x0344, r16
    2af6:	24 96       	adiw	r28, 0x04	; 4
    2af8:	e4 e0       	ldi	r30, 0x04	; 4
    2afa:	0c 94 90 19 	jmp	0x3320	; 0x3320 <__epilogue_restores__+0x1c>

00002afe <lcd_goto_xy>:
    2afe:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
    2b02:	08 95       	ret

00002b04 <_ZN12OrangutanLCD5clearEv>:
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_ZN12OrangutanLCD8send_cmdEh>
    2b0a:	80 91 42 03 	lds	r24, 0x0342
    2b0e:	90 91 43 03 	lds	r25, 0x0343
    2b12:	89 2b       	or	r24, r25
    2b14:	19 f1       	breq	.+70     	; 0x2b5c <_ZN12OrangutanLCD5clearEv+0x58>
    2b16:	60 e0       	ldi	r22, 0x00	; 0
    2b18:	70 e2       	ldi	r23, 0x20	; 32
    2b1a:	08 c0       	rjmp	.+16     	; 0x2b2c <_ZN12OrangutanLCD5clearEv+0x28>
    2b1c:	e0 91 42 03 	lds	r30, 0x0342
    2b20:	f0 91 43 03 	lds	r31, 0x0343
    2b24:	e4 0f       	add	r30, r20
    2b26:	f5 1f       	adc	r31, r21
    2b28:	70 83       	st	Z, r23
    2b2a:	6f 5f       	subi	r22, 0xFF	; 255
    2b2c:	46 2f       	mov	r20, r22
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	80 91 2f 03 	lds	r24, 0x032F
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	20 91 30 03 	lds	r18, 0x0330
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	fc 01       	movw	r30, r24
    2b40:	e2 9f       	mul	r30, r18
    2b42:	c0 01       	movw	r24, r0
    2b44:	e3 9f       	mul	r30, r19
    2b46:	90 0d       	add	r25, r0
    2b48:	f2 9f       	mul	r31, r18
    2b4a:	90 0d       	add	r25, r0
    2b4c:	11 24       	eor	r1, r1
    2b4e:	48 17       	cp	r20, r24
    2b50:	59 07       	cpc	r21, r25
    2b52:	24 f3       	brlt	.-56     	; 0x2b1c <_ZN12OrangutanLCD5clearEv+0x18>
    2b54:	10 92 45 03 	sts	0x0345, r1
    2b58:	10 92 44 03 	sts	0x0344, r1
    2b5c:	08 95       	ret

00002b5e <clear>:
    2b5e:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN12OrangutanLCD5clearEv>
    2b62:	08 95       	ret

00002b64 <_ZN12OrangutanLCD9send_dataEh>:
    2b64:	61 e0       	ldi	r22, 0x01	; 1
    2b66:	42 e0       	ldi	r20, 0x02	; 2
    2b68:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <_ZN12OrangutanLCD4sendEhhh>
    2b6c:	08 95       	ret

00002b6e <_ZN12OrangutanLCD11printBinaryEh>:
    2b6e:	0f 93       	push	r16
    2b70:	1f 93       	push	r17
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	00 e0       	ldi	r16, 0x00	; 0
    2b78:	10 e8       	ldi	r17, 0x80	; 128
    2b7a:	c8 2f       	mov	r28, r24
    2b7c:	d0 e0       	ldi	r29, 0x00	; 0
    2b7e:	81 2f       	mov	r24, r17
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	8c 23       	and	r24, r28
    2b84:	9d 23       	and	r25, r29
    2b86:	89 2b       	or	r24, r25
    2b88:	11 f0       	breq	.+4      	; 0x2b8e <_ZN12OrangutanLCD11printBinaryEh+0x20>
    2b8a:	81 e3       	ldi	r24, 0x31	; 49
    2b8c:	01 c0       	rjmp	.+2      	; 0x2b90 <_ZN12OrangutanLCD11printBinaryEh+0x22>
    2b8e:	80 e3       	ldi	r24, 0x30	; 48
    2b90:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN12OrangutanLCD9send_dataEh>
    2b94:	0f 5f       	subi	r16, 0xFF	; 255
    2b96:	08 30       	cpi	r16, 0x08	; 8
    2b98:	11 f0       	breq	.+4      	; 0x2b9e <_ZN12OrangutanLCD11printBinaryEh+0x30>
    2b9a:	16 95       	lsr	r17
    2b9c:	f0 cf       	rjmp	.-32     	; 0x2b7e <_ZN12OrangutanLCD11printBinaryEh+0x10>
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	1f 91       	pop	r17
    2ba4:	0f 91       	pop	r16
    2ba6:	08 95       	ret

00002ba8 <print_binary>:
    2ba8:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <_ZN12OrangutanLCD11printBinaryEh>
    2bac:	08 95       	ret

00002bae <_ZN12OrangutanLCD14printHexNibbleEh>:
    2bae:	8a 30       	cpi	r24, 0x0A	; 10
    2bb0:	10 f4       	brcc	.+4      	; 0x2bb6 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    2bb2:	80 5d       	subi	r24, 0xD0	; 208
    2bb4:	01 c0       	rjmp	.+2      	; 0x2bb8 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    2bb6:	89 5c       	subi	r24, 0xC9	; 201
    2bb8:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN12OrangutanLCD9send_dataEh>
    2bbc:	08 95       	ret

00002bbe <_ZN12OrangutanLCD8printHexEh>:
    2bbe:	1f 93       	push	r17
    2bc0:	18 2f       	mov	r17, r24
    2bc2:	82 95       	swap	r24
    2bc4:	8f 70       	andi	r24, 0x0F	; 15
    2bc6:	0e 94 d7 15 	call	0x2bae	; 0x2bae <_ZN12OrangutanLCD14printHexNibbleEh>
    2bca:	81 2f       	mov	r24, r17
    2bcc:	8f 70       	andi	r24, 0x0F	; 15
    2bce:	0e 94 d7 15 	call	0x2bae	; 0x2bae <_ZN12OrangutanLCD14printHexNibbleEh>
    2bd2:	1f 91       	pop	r17
    2bd4:	08 95       	ret

00002bd6 <_ZN12OrangutanLCD8printHexEj>:
    2bd6:	1f 93       	push	r17
    2bd8:	18 2f       	mov	r17, r24
    2bda:	89 2f       	mov	r24, r25
    2bdc:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD8printHexEh>
    2be0:	81 2f       	mov	r24, r17
    2be2:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD8printHexEh>
    2be6:	1f 91       	pop	r17
    2be8:	08 95       	ret

00002bea <print_hex>:
    2bea:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <_ZN12OrangutanLCD8printHexEj>
    2bee:	08 95       	ret

00002bf0 <print_hex_byte>:
    2bf0:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN12OrangutanLCD8printHexEh>
    2bf4:	08 95       	ret

00002bf6 <_ZN12OrangutanLCD5printEm>:
    2bf6:	6f 92       	push	r6
    2bf8:	7f 92       	push	r7
    2bfa:	8f 92       	push	r8
    2bfc:	9f 92       	push	r9
    2bfe:	af 92       	push	r10
    2c00:	bf 92       	push	r11
    2c02:	cf 92       	push	r12
    2c04:	df 92       	push	r13
    2c06:	ff 92       	push	r15
    2c08:	0f 93       	push	r16
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	2a 97       	sbiw	r28, 0x0a	; 10
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	de bf       	out	0x3e, r29	; 62
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	cd bf       	out	0x3d, r28	; 61
    2c1e:	5b 01       	movw	r10, r22
    2c20:	6c 01       	movw	r12, r24
    2c22:	0a e0       	ldi	r16, 0x0A	; 10
    2c24:	3e 01       	movw	r6, r28
    2c26:	08 94       	sec
    2c28:	61 1c       	adc	r6, r1
    2c2a:	71 1c       	adc	r7, r1
    2c2c:	fa 2c       	mov	r15, r10
    2c2e:	c6 01       	movw	r24, r12
    2c30:	b5 01       	movw	r22, r10
    2c32:	2a e0       	ldi	r18, 0x0A	; 10
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e0       	ldi	r20, 0x00	; 0
    2c38:	50 e0       	ldi	r21, 0x00	; 0
    2c3a:	0e 94 44 19 	call	0x3288	; 0x3288 <__udivmodsi4>
    2c3e:	c9 01       	movw	r24, r18
    2c40:	da 01       	movw	r26, r20
    2c42:	5c 01       	movw	r10, r24
    2c44:	6d 01       	movw	r12, r26
    2c46:	01 50       	subi	r16, 0x01	; 1
    2c48:	43 01       	movw	r8, r6
    2c4a:	80 0e       	add	r8, r16
    2c4c:	91 1c       	adc	r9, r1
    2c4e:	80 e3       	ldi	r24, 0x30	; 48
    2c50:	f8 0e       	add	r15, r24
    2c52:	c6 01       	movw	r24, r12
    2c54:	b5 01       	movw	r22, r10
    2c56:	2a e0       	ldi	r18, 0x0A	; 10
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e0       	ldi	r20, 0x00	; 0
    2c5c:	50 e0       	ldi	r21, 0x00	; 0
    2c5e:	0e 94 12 19 	call	0x3224	; 0x3224 <__mulsi3>
    2c62:	f6 1a       	sub	r15, r22
    2c64:	f4 01       	movw	r30, r8
    2c66:	f0 82       	st	Z, r15
    2c68:	a1 14       	cp	r10, r1
    2c6a:	b1 04       	cpc	r11, r1
    2c6c:	c1 04       	cpc	r12, r1
    2c6e:	d1 04       	cpc	r13, r1
    2c70:	e9 f6       	brne	.-70     	; 0x2c2c <_ZN12OrangutanLCD5printEm+0x36>
    2c72:	08 c0       	rjmp	.+16     	; 0x2c84 <_ZN12OrangutanLCD5printEm+0x8e>
    2c74:	f6 01       	movw	r30, r12
    2c76:	e0 0f       	add	r30, r16
    2c78:	f1 1d       	adc	r31, r1
    2c7a:	80 81       	ld	r24, Z
    2c7c:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN12OrangutanLCD9send_dataEh>
    2c80:	0f 5f       	subi	r16, 0xFF	; 255
    2c82:	04 c0       	rjmp	.+8      	; 0x2c8c <_ZN12OrangutanLCD5printEm+0x96>
    2c84:	6e 01       	movw	r12, r28
    2c86:	08 94       	sec
    2c88:	c1 1c       	adc	r12, r1
    2c8a:	d1 1c       	adc	r13, r1
    2c8c:	0a 30       	cpi	r16, 0x0A	; 10
    2c8e:	90 f3       	brcs	.-28     	; 0x2c74 <_ZN12OrangutanLCD5printEm+0x7e>
    2c90:	2a 96       	adiw	r28, 0x0a	; 10
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	0f 91       	pop	r16
    2ca2:	ff 90       	pop	r15
    2ca4:	df 90       	pop	r13
    2ca6:	cf 90       	pop	r12
    2ca8:	bf 90       	pop	r11
    2caa:	af 90       	pop	r10
    2cac:	9f 90       	pop	r9
    2cae:	8f 90       	pop	r8
    2cb0:	7f 90       	pop	r7
    2cb2:	6f 90       	pop	r6
    2cb4:	08 95       	ret

00002cb6 <print_unsigned_long>:
    2cb6:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <_ZN12OrangutanLCD5printEm>
    2cba:	08 95       	ret

00002cbc <_ZN12OrangutanLCD5printEl>:
    2cbc:	ef 92       	push	r14
    2cbe:	ff 92       	push	r15
    2cc0:	0f 93       	push	r16
    2cc2:	1f 93       	push	r17
    2cc4:	7b 01       	movw	r14, r22
    2cc6:	8c 01       	movw	r16, r24
    2cc8:	97 ff       	sbrs	r25, 7
    2cca:	0b c0       	rjmp	.+22     	; 0x2ce2 <_ZN12OrangutanLCD5printEl+0x26>
    2ccc:	10 95       	com	r17
    2cce:	00 95       	com	r16
    2cd0:	f0 94       	com	r15
    2cd2:	e0 94       	com	r14
    2cd4:	e1 1c       	adc	r14, r1
    2cd6:	f1 1c       	adc	r15, r1
    2cd8:	01 1d       	adc	r16, r1
    2cda:	11 1d       	adc	r17, r1
    2cdc:	8d e2       	ldi	r24, 0x2D	; 45
    2cde:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN12OrangutanLCD9send_dataEh>
    2ce2:	c8 01       	movw	r24, r16
    2ce4:	b7 01       	movw	r22, r14
    2ce6:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <_ZN12OrangutanLCD5printEm>
    2cea:	1f 91       	pop	r17
    2cec:	0f 91       	pop	r16
    2cee:	ff 90       	pop	r15
    2cf0:	ef 90       	pop	r14
    2cf2:	08 95       	ret

00002cf4 <print_long>:
    2cf4:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <_ZN12OrangutanLCD5printEl>
    2cf8:	08 95       	ret

00002cfa <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	ec 01       	movw	r28, r24
    2d00:	03 c0       	rjmp	.+6      	; 0x2d08 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    2d02:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN12OrangutanLCD9send_dataEh>
    2d06:	21 96       	adiw	r28, 0x01	; 1
    2d08:	fe 01       	movw	r30, r28
    2d0a:	84 91       	lpm	r24, Z+
    2d0c:	88 23       	and	r24, r24
    2d0e:	c9 f7       	brne	.-14     	; 0x2d02 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    2d10:	df 91       	pop	r29
    2d12:	cf 91       	pop	r28
    2d14:	08 95       	ret

00002d16 <print_from_program_space>:
    2d16:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    2d1a:	08 95       	ret

00002d1c <_ZN12OrangutanLCD5printEPKc>:
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
    2d20:	ec 01       	movw	r28, r24
    2d22:	03 c0       	rjmp	.+6      	; 0x2d2a <_ZN12OrangutanLCD5printEPKc+0xe>
    2d24:	21 96       	adiw	r28, 0x01	; 1
    2d26:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN12OrangutanLCD9send_dataEh>
    2d2a:	88 81       	ld	r24, Y
    2d2c:	88 23       	and	r24, r24
    2d2e:	d1 f7       	brne	.-12     	; 0x2d24 <_ZN12OrangutanLCD5printEPKc+0x8>
    2d30:	df 91       	pop	r29
    2d32:	cf 91       	pop	r28
    2d34:	08 95       	ret

00002d36 <print>:
    2d36:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD5printEPKc>
    2d3a:	08 95       	ret

00002d3c <_ZN12OrangutanLCD5printEc>:
    2d3c:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN12OrangutanLCD9send_dataEh>
    2d40:	08 95       	ret

00002d42 <print_character>:
    2d42:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN12OrangutanLCD9send_dataEh>
    2d46:	08 95       	ret

00002d48 <lcd_putchar>:
    2d48:	a0 e0       	ldi	r26, 0x00	; 0
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	ea ea       	ldi	r30, 0xAA	; 170
    2d4e:	f6 e1       	ldi	r31, 0x16	; 22
    2d50:	0c 94 70 19 	jmp	0x32e0	; 0x32e0 <__prologue_saves__+0x14>
    2d54:	e8 2e       	mov	r14, r24
    2d56:	80 91 42 03 	lds	r24, 0x0342
    2d5a:	90 91 43 03 	lds	r25, 0x0343
    2d5e:	89 2b       	or	r24, r25
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <lcd_putchar+0x1c>
    2d62:	05 c1       	rjmp	.+522    	; 0x2f6e <lcd_putchar+0x226>
    2d64:	2a e0       	ldi	r18, 0x0A	; 10
    2d66:	e2 16       	cp	r14, r18
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <lcd_putchar+0x24>
    2d6a:	46 c0       	rjmp	.+140    	; 0x2df8 <lcd_putchar+0xb0>
    2d6c:	38 e0       	ldi	r19, 0x08	; 8
    2d6e:	e3 16       	cp	r14, r19
    2d70:	c9 f4       	brne	.+50     	; 0x2da4 <lcd_putchar+0x5c>
    2d72:	80 91 45 03 	lds	r24, 0x0345
    2d76:	81 50       	subi	r24, 0x01	; 1
    2d78:	80 93 45 03 	sts	0x0345, r24
    2d7c:	8f 3f       	cpi	r24, 0xFF	; 255
    2d7e:	51 f4       	brne	.+20     	; 0x2d94 <lcd_putchar+0x4c>
    2d80:	80 91 44 03 	lds	r24, 0x0344
    2d84:	81 50       	subi	r24, 0x01	; 1
    2d86:	80 93 44 03 	sts	0x0344, r24
    2d8a:	80 91 30 03 	lds	r24, 0x0330
    2d8e:	81 50       	subi	r24, 0x01	; 1
    2d90:	80 93 45 03 	sts	0x0345, r24
    2d94:	80 91 44 03 	lds	r24, 0x0344
    2d98:	8f 3f       	cpi	r24, 0xFF	; 255
    2d9a:	09 f0       	breq	.+2      	; 0x2d9e <lcd_putchar+0x56>
    2d9c:	e2 c0       	rjmp	.+452    	; 0x2f62 <lcd_putchar+0x21a>
    2d9e:	10 92 44 03 	sts	0x0344, r1
    2da2:	dd c0       	rjmp	.+442    	; 0x2f5e <lcd_putchar+0x216>
    2da4:	8e 2d       	mov	r24, r14
    2da6:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN12OrangutanLCD9send_dataEh>
    2daa:	20 91 44 03 	lds	r18, 0x0344
    2dae:	22 23       	and	r18, r18
    2db0:	c9 f0       	breq	.+50     	; 0x2de4 <lcd_putchar+0x9c>
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	21 50       	subi	r18, 0x01	; 1
    2db6:	30 40       	sbci	r19, 0x00	; 0
    2db8:	80 91 30 03 	lds	r24, 0x0330
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	ac 01       	movw	r20, r24
    2dc0:	24 9f       	mul	r18, r20
    2dc2:	c0 01       	movw	r24, r0
    2dc4:	25 9f       	mul	r18, r21
    2dc6:	90 0d       	add	r25, r0
    2dc8:	34 9f       	mul	r19, r20
    2dca:	90 0d       	add	r25, r0
    2dcc:	11 24       	eor	r1, r1
    2dce:	20 91 45 03 	lds	r18, 0x0345
    2dd2:	e0 91 42 03 	lds	r30, 0x0342
    2dd6:	f0 91 43 03 	lds	r31, 0x0343
    2dda:	e8 0f       	add	r30, r24
    2ddc:	f9 1f       	adc	r31, r25
    2dde:	e2 0f       	add	r30, r18
    2de0:	f1 1d       	adc	r31, r1
    2de2:	e0 82       	st	Z, r14
    2de4:	80 91 45 03 	lds	r24, 0x0345
    2de8:	8f 5f       	subi	r24, 0xFF	; 255
    2dea:	80 93 45 03 	sts	0x0345, r24
    2dee:	90 91 30 03 	lds	r25, 0x0330
    2df2:	89 17       	cp	r24, r25
    2df4:	09 f0       	breq	.+2      	; 0x2df8 <lcd_putchar+0xb0>
    2df6:	bb c0       	rjmp	.+374    	; 0x2f6e <lcd_putchar+0x226>
    2df8:	40 91 44 03 	lds	r20, 0x0344
    2dfc:	24 2f       	mov	r18, r20
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	80 91 2f 03 	lds	r24, 0x032F
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	28 17       	cp	r18, r24
    2e0a:	39 07       	cpc	r19, r25
    2e0c:	09 f0       	breq	.+2      	; 0x2e10 <lcd_putchar+0xc8>
    2e0e:	a4 c0       	rjmp	.+328    	; 0x2f58 <lcd_putchar+0x210>
    2e10:	c0 e0       	ldi	r28, 0x00	; 0
    2e12:	d0 e0       	ldi	r29, 0x00	; 0
    2e14:	44 c0       	rjmp	.+136    	; 0x2e9e <lcd_putchar+0x156>
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	6c 2f       	mov	r22, r28
    2e1a:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
    2e1e:	ff 24       	eor	r15, r15
    2e20:	6e 01       	movw	r12, r28
    2e22:	08 94       	sec
    2e24:	c1 1c       	adc	r12, r1
    2e26:	d1 1c       	adc	r13, r1
    2e28:	35 c0       	rjmp	.+106    	; 0x2e94 <lcd_putchar+0x14c>
    2e2a:	0f 2d       	mov	r16, r15
    2e2c:	10 e0       	ldi	r17, 0x00	; 0
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	9c 01       	movw	r18, r24
    2e32:	c2 9f       	mul	r28, r18
    2e34:	c0 01       	movw	r24, r0
    2e36:	c3 9f       	mul	r28, r19
    2e38:	90 0d       	add	r25, r0
    2e3a:	d2 9f       	mul	r29, r18
    2e3c:	90 0d       	add	r25, r0
    2e3e:	11 24       	eor	r1, r1
    2e40:	e0 91 42 03 	lds	r30, 0x0342
    2e44:	f0 91 43 03 	lds	r31, 0x0343
    2e48:	e0 0f       	add	r30, r16
    2e4a:	f1 1f       	adc	r31, r17
    2e4c:	e8 0f       	add	r30, r24
    2e4e:	f9 1f       	adc	r31, r25
    2e50:	80 81       	ld	r24, Z
    2e52:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN12OrangutanLCD9send_dataEh>
    2e56:	e0 91 42 03 	lds	r30, 0x0342
    2e5a:	f0 91 43 03 	lds	r31, 0x0343
    2e5e:	80 91 30 03 	lds	r24, 0x0330
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	c8 9f       	mul	r28, r24
    2e66:	d0 01       	movw	r26, r0
    2e68:	c9 9f       	mul	r28, r25
    2e6a:	b0 0d       	add	r27, r0
    2e6c:	d8 9f       	mul	r29, r24
    2e6e:	b0 0d       	add	r27, r0
    2e70:	11 24       	eor	r1, r1
    2e72:	e0 0f       	add	r30, r16
    2e74:	f1 1f       	adc	r31, r17
    2e76:	ae 0f       	add	r26, r30
    2e78:	bf 1f       	adc	r27, r31
    2e7a:	ac 01       	movw	r20, r24
    2e7c:	c4 9e       	mul	r12, r20
    2e7e:	c0 01       	movw	r24, r0
    2e80:	c5 9e       	mul	r12, r21
    2e82:	90 0d       	add	r25, r0
    2e84:	d4 9e       	mul	r13, r20
    2e86:	90 0d       	add	r25, r0
    2e88:	11 24       	eor	r1, r1
    2e8a:	e8 0f       	add	r30, r24
    2e8c:	f9 1f       	adc	r31, r25
    2e8e:	80 81       	ld	r24, Z
    2e90:	8c 93       	st	X, r24
    2e92:	f3 94       	inc	r15
    2e94:	80 91 30 03 	lds	r24, 0x0330
    2e98:	f8 16       	cp	r15, r24
    2e9a:	38 f2       	brcs	.-114    	; 0x2e2a <lcd_putchar+0xe2>
    2e9c:	e6 01       	movw	r28, r12
    2e9e:	60 91 2f 03 	lds	r22, 0x032F
    2ea2:	86 2f       	mov	r24, r22
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	02 97       	sbiw	r24, 0x02	; 2
    2ea8:	c8 17       	cp	r28, r24
    2eaa:	d9 07       	cpc	r29, r25
    2eac:	0c f4       	brge	.+2      	; 0x2eb0 <lcd_putchar+0x168>
    2eae:	b3 cf       	rjmp	.-154    	; 0x2e16 <lcd_putchar+0xce>
    2eb0:	62 30       	cpi	r22, 0x02	; 2
    2eb2:	08 f4       	brcc	.+2      	; 0x2eb6 <lcd_putchar+0x16e>
    2eb4:	40 c0       	rjmp	.+128    	; 0x2f36 <lcd_putchar+0x1ee>
    2eb6:	62 50       	subi	r22, 0x02	; 2
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
    2ebe:	ff 24       	eor	r15, r15
    2ec0:	40 e2       	ldi	r20, 0x20	; 32
    2ec2:	d4 2e       	mov	r13, r20
    2ec4:	34 c0       	rjmp	.+104    	; 0x2f2e <lcd_putchar+0x1e6>
    2ec6:	0f 2d       	mov	r16, r15
    2ec8:	10 e0       	ldi	r17, 0x00	; 0
    2eca:	80 91 2f 03 	lds	r24, 0x032F
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	02 97       	sbiw	r24, 0x02	; 2
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	ac 01       	movw	r20, r24
    2ed6:	42 9f       	mul	r20, r18
    2ed8:	c0 01       	movw	r24, r0
    2eda:	43 9f       	mul	r20, r19
    2edc:	90 0d       	add	r25, r0
    2ede:	52 9f       	mul	r21, r18
    2ee0:	90 0d       	add	r25, r0
    2ee2:	11 24       	eor	r1, r1
    2ee4:	e0 91 42 03 	lds	r30, 0x0342
    2ee8:	f0 91 43 03 	lds	r31, 0x0343
    2eec:	e0 0f       	add	r30, r16
    2eee:	f1 1f       	adc	r31, r17
    2ef0:	e8 0f       	add	r30, r24
    2ef2:	f9 1f       	adc	r31, r25
    2ef4:	80 81       	ld	r24, Z
    2ef6:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN12OrangutanLCD9send_dataEh>
    2efa:	20 91 2f 03 	lds	r18, 0x032F
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	22 50       	subi	r18, 0x02	; 2
    2f02:	30 40       	sbci	r19, 0x00	; 0
    2f04:	80 91 30 03 	lds	r24, 0x0330
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	ac 01       	movw	r20, r24
    2f0c:	24 9f       	mul	r18, r20
    2f0e:	c0 01       	movw	r24, r0
    2f10:	25 9f       	mul	r18, r21
    2f12:	90 0d       	add	r25, r0
    2f14:	34 9f       	mul	r19, r20
    2f16:	90 0d       	add	r25, r0
    2f18:	11 24       	eor	r1, r1
    2f1a:	e0 91 42 03 	lds	r30, 0x0342
    2f1e:	f0 91 43 03 	lds	r31, 0x0343
    2f22:	e0 0f       	add	r30, r16
    2f24:	f1 1f       	adc	r31, r17
    2f26:	e8 0f       	add	r30, r24
    2f28:	f9 1f       	adc	r31, r25
    2f2a:	d0 82       	st	Z, r13
    2f2c:	f3 94       	inc	r15
    2f2e:	20 91 30 03 	lds	r18, 0x0330
    2f32:	f2 16       	cp	r15, r18
    2f34:	40 f2       	brcs	.-112    	; 0x2ec6 <lcd_putchar+0x17e>
    2f36:	60 91 2f 03 	lds	r22, 0x032F
    2f3a:	61 50       	subi	r22, 0x01	; 1
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
    2f42:	00 e0       	ldi	r16, 0x00	; 0
    2f44:	04 c0       	rjmp	.+8      	; 0x2f4e <lcd_putchar+0x206>
    2f46:	80 e2       	ldi	r24, 0x20	; 32
    2f48:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN12OrangutanLCD9send_dataEh>
    2f4c:	0f 5f       	subi	r16, 0xFF	; 255
    2f4e:	80 91 30 03 	lds	r24, 0x0330
    2f52:	08 17       	cp	r16, r24
    2f54:	c0 f3       	brcs	.-16     	; 0x2f46 <lcd_putchar+0x1fe>
    2f56:	03 c0       	rjmp	.+6      	; 0x2f5e <lcd_putchar+0x216>
    2f58:	4f 5f       	subi	r20, 0xFF	; 255
    2f5a:	40 93 44 03 	sts	0x0344, r20
    2f5e:	10 92 45 03 	sts	0x0345, r1
    2f62:	80 91 45 03 	lds	r24, 0x0345
    2f66:	60 91 44 03 	lds	r22, 0x0344
    2f6a:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_ZN12OrangutanLCD6gotoXYEhh>
    2f6e:	2e 2d       	mov	r18, r14
    2f70:	33 27       	eor	r19, r19
    2f72:	27 fd       	sbrc	r18, 7
    2f74:	30 95       	com	r19
    2f76:	c9 01       	movw	r24, r18
    2f78:	cd b7       	in	r28, 0x3d	; 61
    2f7a:	de b7       	in	r29, 0x3e	; 62
    2f7c:	e8 e0       	ldi	r30, 0x08	; 8
    2f7e:	0c 94 8c 19 	jmp	0x3318	; 0x3318 <__epilogue_restores__+0x14>

00002f82 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    2f82:	ef 92       	push	r14
    2f84:	ff 92       	push	r15
    2f86:	0f 93       	push	r16
    2f88:	1f 93       	push	r17
    2f8a:	cf 93       	push	r28
    2f8c:	df 93       	push	r29
    2f8e:	7c 01       	movw	r14, r24
    2f90:	06 2f       	mov	r16, r22
    2f92:	10 e0       	ldi	r17, 0x00	; 0
    2f94:	53 e0       	ldi	r21, 0x03	; 3
    2f96:	00 0f       	add	r16, r16
    2f98:	11 1f       	adc	r17, r17
    2f9a:	5a 95       	dec	r21
    2f9c:	e1 f7       	brne	.-8      	; 0x2f96 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    2f9e:	c0 e0       	ldi	r28, 0x00	; 0
    2fa0:	d0 e0       	ldi	r29, 0x00	; 0
    2fa2:	9e 01       	movw	r18, r28
    2fa4:	20 0f       	add	r18, r16
    2fa6:	82 2f       	mov	r24, r18
    2fa8:	80 64       	ori	r24, 0x40	; 64
    2faa:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_ZN12OrangutanLCD8send_cmdEh>
    2fae:	f7 01       	movw	r30, r14
    2fb0:	ec 0f       	add	r30, r28
    2fb2:	fd 1f       	adc	r31, r29
    2fb4:	e4 91       	lpm	r30, Z+
    2fb6:	8e 2f       	mov	r24, r30
    2fb8:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN12OrangutanLCD9send_dataEh>
    2fbc:	21 96       	adiw	r28, 0x01	; 1
    2fbe:	c8 30       	cpi	r28, 0x08	; 8
    2fc0:	d1 05       	cpc	r29, r1
    2fc2:	79 f7       	brne	.-34     	; 0x2fa2 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
    2fc8:	e6 e0       	ldi	r30, 0x06	; 6
    2fca:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__epilogue_restores__+0x18>

00002fce <lcd_load_custom_character>:
    2fce:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    2fd2:	08 95       	ret

00002fd4 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    2fd4:	60 e0       	ldi	r22, 0x00	; 0
    2fd6:	41 e0       	ldi	r20, 0x01	; 1
    2fd8:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <_ZN12OrangutanLCD4sendEhhh>
    2fdc:	08 95       	ret

00002fde <_ZN12OrangutanLCD6scrollEhhj>:
    2fde:	0f 93       	push	r16
    2fe0:	1f 93       	push	r17
    2fe2:	cf 93       	push	r28
    2fe4:	df 93       	push	r29
    2fe6:	08 2f       	mov	r16, r24
    2fe8:	16 2f       	mov	r17, r22
    2fea:	ea 01       	movw	r28, r20
    2fec:	0b c0       	rjmp	.+22     	; 0x3004 <_ZN12OrangutanLCD6scrollEhhj+0x26>
    2fee:	00 23       	and	r16, r16
    2ff0:	11 f4       	brne	.+4      	; 0x2ff6 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    2ff2:	88 e1       	ldi	r24, 0x18	; 24
    2ff4:	01 c0       	rjmp	.+2      	; 0x2ff8 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    2ff6:	8c e1       	ldi	r24, 0x1C	; 28
    2ff8:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_ZN12OrangutanLCD8send_cmdEh>
    2ffc:	ce 01       	movw	r24, r28
    2ffe:	0e 94 77 18 	call	0x30ee	; 0x30ee <_ZN13OrangutanTime17delayMillisecondsEj>
    3002:	11 50       	subi	r17, 0x01	; 1
    3004:	11 23       	and	r17, r17
    3006:	99 f7       	brne	.-26     	; 0x2fee <_ZN12OrangutanLCD6scrollEhhj+0x10>
    3008:	df 91       	pop	r29
    300a:	cf 91       	pop	r28
    300c:	1f 91       	pop	r17
    300e:	0f 91       	pop	r16
    3010:	08 95       	ret

00003012 <lcd_scroll>:
    3012:	0e 94 ef 17 	call	0x2fde	; 0x2fde <_ZN12OrangutanLCD6scrollEhhj>
    3016:	08 95       	ret

00003018 <__vector_11>:
    3018:	2f 92       	push	r2
    301a:	8f 93       	push	r24
    301c:	9f 93       	push	r25
    301e:	2f b6       	in	r2, 0x3f	; 63
    3020:	80 91 4c 03 	lds	r24, 0x034C
    3024:	90 91 4d 03 	lds	r25, 0x034D
    3028:	01 96       	adiw	r24, 0x01	; 1
    302a:	80 93 4c 03 	sts	0x034C, r24
    302e:	90 93 4d 03 	sts	0x034D, r25
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	80 91 4e 03 	lds	r24, 0x034E
    3038:	89 1f       	adc	r24, r25
    303a:	80 93 4e 03 	sts	0x034E, r24
    303e:	90 91 54 03 	lds	r25, 0x0354
    3042:	9c 5f       	subi	r25, 0xFC	; 252
    3044:	90 93 54 03 	sts	0x0354, r25
    3048:	80 91 53 03 	lds	r24, 0x0353
    304c:	80 51       	subi	r24, 0x10	; 16
    304e:	97 42       	sbci	r25, 0x27	; 39
    3050:	c0 f0       	brcs	.+48     	; 0x3082 <end>
    3052:	90 93 54 03 	sts	0x0354, r25
    3056:	80 93 53 03 	sts	0x0353, r24
    305a:	80 91 4f 03 	lds	r24, 0x034F
    305e:	90 91 50 03 	lds	r25, 0x0350
    3062:	01 96       	adiw	r24, 0x01	; 1
    3064:	80 93 4f 03 	sts	0x034F, r24
    3068:	90 93 50 03 	sts	0x0350, r25
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	80 91 51 03 	lds	r24, 0x0351
    3072:	89 1f       	adc	r24, r25
    3074:	80 93 51 03 	sts	0x0351, r24
    3078:	80 91 52 03 	lds	r24, 0x0352
    307c:	89 1f       	adc	r24, r25
    307e:	80 93 52 03 	sts	0x0352, r24

00003082 <end>:
    3082:	2f be       	out	0x3f, r2	; 63
    3084:	9f 91       	pop	r25
    3086:	8f 91       	pop	r24
    3088:	2f 90       	pop	r2
    308a:	18 95       	reti

0000308c <ticks_to_microseconds>:
    308c:	6f 5f       	subi	r22, 0xFF	; 255
    308e:	7f 4f       	sbci	r23, 0xFF	; 255
    3090:	8f 4f       	sbci	r24, 0xFF	; 255
    3092:	9f 4f       	sbci	r25, 0xFF	; 255
    3094:	66 0f       	add	r22, r22
    3096:	77 1f       	adc	r23, r23
    3098:	88 1f       	adc	r24, r24
    309a:	99 1f       	adc	r25, r25
    309c:	25 e0       	ldi	r18, 0x05	; 5
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e0       	ldi	r20, 0x00	; 0
    30a2:	50 e0       	ldi	r21, 0x00	; 0
    30a4:	0e 94 44 19 	call	0x3288	; 0x3288 <__udivmodsi4>
    30a8:	ca 01       	movw	r24, r20
    30aa:	b9 01       	movw	r22, r18
    30ac:	08 95       	ret

000030ae <delay_ms>:
    30ae:	28 ee       	ldi	r18, 0xE8	; 232
    30b0:	33 e0       	ldi	r19, 0x03	; 3
    30b2:	09 c0       	rjmp	.+18     	; 0x30c6 <delay_ms+0x18>
    30b4:	f9 01       	movw	r30, r18
    30b6:	6f 93       	push	r22
    30b8:	64 e0       	ldi	r22, 0x04	; 4
    30ba:	6a 95       	dec	r22
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <delay_ms+0xc>
    30be:	6f 91       	pop	r22
    30c0:	31 97       	sbiw	r30, 0x01	; 1
    30c2:	c9 f7       	brne	.-14     	; 0x30b6 <delay_ms+0x8>
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	00 97       	sbiw	r24, 0x00	; 0
    30c8:	a9 f7       	brne	.-22     	; 0x30b4 <delay_ms+0x6>
    30ca:	08 95       	ret

000030cc <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    30cc:	6f 5f       	subi	r22, 0xFF	; 255
    30ce:	7f 4f       	sbci	r23, 0xFF	; 255
    30d0:	8f 4f       	sbci	r24, 0xFF	; 255
    30d2:	9f 4f       	sbci	r25, 0xFF	; 255
    30d4:	66 0f       	add	r22, r22
    30d6:	77 1f       	adc	r23, r23
    30d8:	88 1f       	adc	r24, r24
    30da:	99 1f       	adc	r25, r25
    30dc:	25 e0       	ldi	r18, 0x05	; 5
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	40 e0       	ldi	r20, 0x00	; 0
    30e2:	50 e0       	ldi	r21, 0x00	; 0
    30e4:	0e 94 44 19 	call	0x3288	; 0x3288 <__udivmodsi4>
    30e8:	ca 01       	movw	r24, r20
    30ea:	b9 01       	movw	r22, r18
    30ec:	08 95       	ret

000030ee <_ZN13OrangutanTime17delayMillisecondsEj>:
    30ee:	28 ee       	ldi	r18, 0xE8	; 232
    30f0:	33 e0       	ldi	r19, 0x03	; 3
    30f2:	09 c0       	rjmp	.+18     	; 0x3106 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    30f4:	f9 01       	movw	r30, r18
    30f6:	6f 93       	push	r22
    30f8:	64 e0       	ldi	r22, 0x04	; 4
    30fa:	6a 95       	dec	r22
    30fc:	f1 f7       	brne	.-4      	; 0x30fa <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    30fe:	6f 91       	pop	r22
    3100:	31 97       	sbiw	r30, 0x01	; 1
    3102:	c9 f7       	brne	.-14     	; 0x30f6 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	00 97       	sbiw	r24, 0x00	; 0
    3108:	a9 f7       	brne	.-22     	; 0x30f4 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    310a:	08 95       	ret

0000310c <_ZN13OrangutanTime5init2Ev>:
    310c:	a0 e7       	ldi	r26, 0x70	; 112
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	8c 91       	ld	r24, X
    3112:	8e 7f       	andi	r24, 0xFE	; 254
    3114:	8c 93       	st	X, r24
    3116:	e0 eb       	ldi	r30, 0xB0	; 176
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	83 60       	ori	r24, 0x03	; 3
    311e:	80 83       	st	Z, r24
    3120:	e1 eb       	ldi	r30, 0xB1	; 177
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	80 7f       	andi	r24, 0xF0	; 240
    3128:	80 83       	st	Z, r24
    312a:	80 81       	ld	r24, Z
    312c:	82 60       	ori	r24, 0x02	; 2
    312e:	80 83       	st	Z, r24
    3130:	b8 9a       	sbi	0x17, 0	; 23
    3132:	8c 91       	ld	r24, X
    3134:	81 60       	ori	r24, 0x01	; 1
    3136:	8c 93       	st	X, r24
    3138:	78 94       	sei
    313a:	08 95       	ret

0000313c <_ZN13OrangutanTime4initEv>:
    313c:	80 91 55 03 	lds	r24, 0x0355
    3140:	88 23       	and	r24, r24
    3142:	29 f4       	brne	.+10     	; 0x314e <_ZN13OrangutanTime4initEv+0x12>
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	80 93 55 03 	sts	0x0355, r24
    314a:	0e 94 86 18 	call	0x310c	; 0x310c <_ZN13OrangutanTime5init2Ev>
    314e:	08 95       	ret

00003150 <_ZN13OrangutanTime2msEv>:
    3150:	0e 94 9e 18 	call	0x313c	; 0x313c <_ZN13OrangutanTime4initEv>
    3154:	e0 e7       	ldi	r30, 0x70	; 112
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	8e 7f       	andi	r24, 0xFE	; 254
    315c:	80 83       	st	Z, r24
    315e:	20 91 4f 03 	lds	r18, 0x034F
    3162:	30 91 50 03 	lds	r19, 0x0350
    3166:	40 91 51 03 	lds	r20, 0x0351
    316a:	50 91 52 03 	lds	r21, 0x0352
    316e:	80 81       	ld	r24, Z
    3170:	81 60       	ori	r24, 0x01	; 1
    3172:	80 83       	st	Z, r24
    3174:	b9 01       	movw	r22, r18
    3176:	ca 01       	movw	r24, r20
    3178:	08 95       	ret

0000317a <get_ms>:
    317a:	0e 94 a8 18 	call	0x3150	; 0x3150 <_ZN13OrangutanTime2msEv>
    317e:	08 95       	ret

00003180 <_ZN13OrangutanTime5ticksEv>:
    3180:	0e 94 9e 18 	call	0x313c	; 0x313c <_ZN13OrangutanTime4initEv>
    3184:	80 91 70 00 	lds	r24, 0x0070
    3188:	8e 7f       	andi	r24, 0xFE	; 254
    318a:	80 93 70 00 	sts	0x0070, r24
    318e:	60 91 b2 00 	lds	r22, 0x00B2
    3192:	80 91 4b 03 	lds	r24, 0x034B
    3196:	90 91 4c 03 	lds	r25, 0x034C
    319a:	a0 91 4d 03 	lds	r26, 0x034D
    319e:	b0 91 4e 03 	lds	r27, 0x034E
    31a2:	b8 99       	sbic	0x17, 0	; 23
    31a4:	05 c0       	rjmp	.+10     	; 0x31b0 <_ZN13OrangutanTime5ticksEv+0x30>
    31a6:	26 2f       	mov	r18, r22
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	40 e0       	ldi	r20, 0x00	; 0
    31ac:	50 e0       	ldi	r21, 0x00	; 0
    31ae:	11 c0       	rjmp	.+34     	; 0x31d2 <_ZN13OrangutanTime5ticksEv+0x52>
    31b0:	80 91 b2 00 	lds	r24, 0x00B2
    31b4:	20 91 4b 03 	lds	r18, 0x034B
    31b8:	30 91 4c 03 	lds	r19, 0x034C
    31bc:	40 91 4d 03 	lds	r20, 0x034D
    31c0:	50 91 4e 03 	lds	r21, 0x034E
    31c4:	20 50       	subi	r18, 0x00	; 0
    31c6:	3f 4f       	sbci	r19, 0xFF	; 255
    31c8:	4f 4f       	sbci	r20, 0xFF	; 255
    31ca:	5f 4f       	sbci	r21, 0xFF	; 255
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	a0 e0       	ldi	r26, 0x00	; 0
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	28 2b       	or	r18, r24
    31d4:	39 2b       	or	r19, r25
    31d6:	4a 2b       	or	r20, r26
    31d8:	5b 2b       	or	r21, r27
    31da:	80 91 70 00 	lds	r24, 0x0070
    31de:	81 60       	ori	r24, 0x01	; 1
    31e0:	80 93 70 00 	sts	0x0070, r24
    31e4:	b9 01       	movw	r22, r18
    31e6:	ca 01       	movw	r24, r20
    31e8:	08 95       	ret

000031ea <get_ticks>:
    31ea:	0e 94 c0 18 	call	0x3180	; 0x3180 <_ZN13OrangutanTime5ticksEv>
    31ee:	08 95       	ret

000031f0 <_ZN13OrangutanTime5resetEv>:
    31f0:	0e 94 9e 18 	call	0x313c	; 0x313c <_ZN13OrangutanTime4initEv>
    31f4:	e0 e7       	ldi	r30, 0x70	; 112
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	80 81       	ld	r24, Z
    31fa:	8e 7f       	andi	r24, 0xFE	; 254
    31fc:	80 83       	st	Z, r24
    31fe:	10 92 4f 03 	sts	0x034F, r1
    3202:	10 92 50 03 	sts	0x0350, r1
    3206:	10 92 51 03 	sts	0x0351, r1
    320a:	10 92 52 03 	sts	0x0352, r1
    320e:	10 92 54 03 	sts	0x0354, r1
    3212:	10 92 53 03 	sts	0x0353, r1
    3216:	80 81       	ld	r24, Z
    3218:	81 60       	ori	r24, 0x01	; 1
    321a:	80 83       	st	Z, r24
    321c:	08 95       	ret

0000321e <time_reset>:
    321e:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <_ZN13OrangutanTime5resetEv>
    3222:	08 95       	ret

00003224 <__mulsi3>:
    3224:	62 9f       	mul	r22, r18
    3226:	d0 01       	movw	r26, r0
    3228:	73 9f       	mul	r23, r19
    322a:	f0 01       	movw	r30, r0
    322c:	82 9f       	mul	r24, r18
    322e:	e0 0d       	add	r30, r0
    3230:	f1 1d       	adc	r31, r1
    3232:	64 9f       	mul	r22, r20
    3234:	e0 0d       	add	r30, r0
    3236:	f1 1d       	adc	r31, r1
    3238:	92 9f       	mul	r25, r18
    323a:	f0 0d       	add	r31, r0
    323c:	83 9f       	mul	r24, r19
    323e:	f0 0d       	add	r31, r0
    3240:	74 9f       	mul	r23, r20
    3242:	f0 0d       	add	r31, r0
    3244:	65 9f       	mul	r22, r21
    3246:	f0 0d       	add	r31, r0
    3248:	99 27       	eor	r25, r25
    324a:	72 9f       	mul	r23, r18
    324c:	b0 0d       	add	r27, r0
    324e:	e1 1d       	adc	r30, r1
    3250:	f9 1f       	adc	r31, r25
    3252:	63 9f       	mul	r22, r19
    3254:	b0 0d       	add	r27, r0
    3256:	e1 1d       	adc	r30, r1
    3258:	f9 1f       	adc	r31, r25
    325a:	bd 01       	movw	r22, r26
    325c:	cf 01       	movw	r24, r30
    325e:	11 24       	eor	r1, r1
    3260:	08 95       	ret

00003262 <__divmodhi4>:
    3262:	97 fb       	bst	r25, 7
    3264:	09 2e       	mov	r0, r25
    3266:	07 26       	eor	r0, r23
    3268:	0a d0       	rcall	.+20     	; 0x327e <__divmodhi4_neg1>
    326a:	77 fd       	sbrc	r23, 7
    326c:	04 d0       	rcall	.+8      	; 0x3276 <__divmodhi4_neg2>
    326e:	65 d0       	rcall	.+202    	; 0x333a <__udivmodhi4>
    3270:	06 d0       	rcall	.+12     	; 0x327e <__divmodhi4_neg1>
    3272:	00 20       	and	r0, r0
    3274:	1a f4       	brpl	.+6      	; 0x327c <__divmodhi4_exit>

00003276 <__divmodhi4_neg2>:
    3276:	70 95       	com	r23
    3278:	61 95       	neg	r22
    327a:	7f 4f       	sbci	r23, 0xFF	; 255

0000327c <__divmodhi4_exit>:
    327c:	08 95       	ret

0000327e <__divmodhi4_neg1>:
    327e:	f6 f7       	brtc	.-4      	; 0x327c <__divmodhi4_exit>
    3280:	90 95       	com	r25
    3282:	81 95       	neg	r24
    3284:	9f 4f       	sbci	r25, 0xFF	; 255
    3286:	08 95       	ret

00003288 <__udivmodsi4>:
    3288:	a1 e2       	ldi	r26, 0x21	; 33
    328a:	1a 2e       	mov	r1, r26
    328c:	aa 1b       	sub	r26, r26
    328e:	bb 1b       	sub	r27, r27
    3290:	fd 01       	movw	r30, r26
    3292:	0d c0       	rjmp	.+26     	; 0x32ae <__udivmodsi4_ep>

00003294 <__udivmodsi4_loop>:
    3294:	aa 1f       	adc	r26, r26
    3296:	bb 1f       	adc	r27, r27
    3298:	ee 1f       	adc	r30, r30
    329a:	ff 1f       	adc	r31, r31
    329c:	a2 17       	cp	r26, r18
    329e:	b3 07       	cpc	r27, r19
    32a0:	e4 07       	cpc	r30, r20
    32a2:	f5 07       	cpc	r31, r21
    32a4:	20 f0       	brcs	.+8      	; 0x32ae <__udivmodsi4_ep>
    32a6:	a2 1b       	sub	r26, r18
    32a8:	b3 0b       	sbc	r27, r19
    32aa:	e4 0b       	sbc	r30, r20
    32ac:	f5 0b       	sbc	r31, r21

000032ae <__udivmodsi4_ep>:
    32ae:	66 1f       	adc	r22, r22
    32b0:	77 1f       	adc	r23, r23
    32b2:	88 1f       	adc	r24, r24
    32b4:	99 1f       	adc	r25, r25
    32b6:	1a 94       	dec	r1
    32b8:	69 f7       	brne	.-38     	; 0x3294 <__udivmodsi4_loop>
    32ba:	60 95       	com	r22
    32bc:	70 95       	com	r23
    32be:	80 95       	com	r24
    32c0:	90 95       	com	r25
    32c2:	9b 01       	movw	r18, r22
    32c4:	ac 01       	movw	r20, r24
    32c6:	bd 01       	movw	r22, r26
    32c8:	cf 01       	movw	r24, r30
    32ca:	08 95       	ret

000032cc <__prologue_saves__>:
    32cc:	2f 92       	push	r2
    32ce:	3f 92       	push	r3
    32d0:	4f 92       	push	r4
    32d2:	5f 92       	push	r5
    32d4:	6f 92       	push	r6
    32d6:	7f 92       	push	r7
    32d8:	8f 92       	push	r8
    32da:	9f 92       	push	r9
    32dc:	af 92       	push	r10
    32de:	bf 92       	push	r11
    32e0:	cf 92       	push	r12
    32e2:	df 92       	push	r13
    32e4:	ef 92       	push	r14
    32e6:	ff 92       	push	r15
    32e8:	0f 93       	push	r16
    32ea:	1f 93       	push	r17
    32ec:	cf 93       	push	r28
    32ee:	df 93       	push	r29
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    32f4:	ca 1b       	sub	r28, r26
    32f6:	db 0b       	sbc	r29, r27
    32f8:	0f b6       	in	r0, 0x3f	; 63
    32fa:	f8 94       	cli
    32fc:	de bf       	out	0x3e, r29	; 62
    32fe:	0f be       	out	0x3f, r0	; 63
    3300:	cd bf       	out	0x3d, r28	; 61
    3302:	09 94       	ijmp

00003304 <__epilogue_restores__>:
    3304:	2a 88       	ldd	r2, Y+18	; 0x12
    3306:	39 88       	ldd	r3, Y+17	; 0x11
    3308:	48 88       	ldd	r4, Y+16	; 0x10
    330a:	5f 84       	ldd	r5, Y+15	; 0x0f
    330c:	6e 84       	ldd	r6, Y+14	; 0x0e
    330e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3310:	8c 84       	ldd	r8, Y+12	; 0x0c
    3312:	9b 84       	ldd	r9, Y+11	; 0x0b
    3314:	aa 84       	ldd	r10, Y+10	; 0x0a
    3316:	b9 84       	ldd	r11, Y+9	; 0x09
    3318:	c8 84       	ldd	r12, Y+8	; 0x08
    331a:	df 80       	ldd	r13, Y+7	; 0x07
    331c:	ee 80       	ldd	r14, Y+6	; 0x06
    331e:	fd 80       	ldd	r15, Y+5	; 0x05
    3320:	0c 81       	ldd	r16, Y+4	; 0x04
    3322:	1b 81       	ldd	r17, Y+3	; 0x03
    3324:	aa 81       	ldd	r26, Y+2	; 0x02
    3326:	b9 81       	ldd	r27, Y+1	; 0x01
    3328:	ce 0f       	add	r28, r30
    332a:	d1 1d       	adc	r29, r1
    332c:	0f b6       	in	r0, 0x3f	; 63
    332e:	f8 94       	cli
    3330:	de bf       	out	0x3e, r29	; 62
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	cd bf       	out	0x3d, r28	; 61
    3336:	ed 01       	movw	r28, r26
    3338:	08 95       	ret

0000333a <__udivmodhi4>:
    333a:	aa 1b       	sub	r26, r26
    333c:	bb 1b       	sub	r27, r27
    333e:	51 e1       	ldi	r21, 0x11	; 17
    3340:	07 c0       	rjmp	.+14     	; 0x3350 <__udivmodhi4_ep>

00003342 <__udivmodhi4_loop>:
    3342:	aa 1f       	adc	r26, r26
    3344:	bb 1f       	adc	r27, r27
    3346:	a6 17       	cp	r26, r22
    3348:	b7 07       	cpc	r27, r23
    334a:	10 f0       	brcs	.+4      	; 0x3350 <__udivmodhi4_ep>
    334c:	a6 1b       	sub	r26, r22
    334e:	b7 0b       	sbc	r27, r23

00003350 <__udivmodhi4_ep>:
    3350:	88 1f       	adc	r24, r24
    3352:	99 1f       	adc	r25, r25
    3354:	5a 95       	dec	r21
    3356:	a9 f7       	brne	.-22     	; 0x3342 <__udivmodhi4_loop>
    3358:	80 95       	com	r24
    335a:	90 95       	com	r25
    335c:	bc 01       	movw	r22, r24
    335e:	cd 01       	movw	r24, r26
    3360:	08 95       	ret

00003362 <malloc>:
    3362:	cf 93       	push	r28
    3364:	df 93       	push	r29
    3366:	bc 01       	movw	r22, r24
    3368:	82 30       	cpi	r24, 0x02	; 2
    336a:	91 05       	cpc	r25, r1
    336c:	10 f4       	brcc	.+4      	; 0x3372 <malloc+0x10>
    336e:	62 e0       	ldi	r22, 0x02	; 2
    3370:	70 e0       	ldi	r23, 0x00	; 0
    3372:	a0 91 58 03 	lds	r26, 0x0358
    3376:	b0 91 59 03 	lds	r27, 0x0359
    337a:	ed 01       	movw	r28, r26
    337c:	e0 e0       	ldi	r30, 0x00	; 0
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	40 e0       	ldi	r20, 0x00	; 0
    3382:	50 e0       	ldi	r21, 0x00	; 0
    3384:	21 c0       	rjmp	.+66     	; 0x33c8 <malloc+0x66>
    3386:	88 81       	ld	r24, Y
    3388:	99 81       	ldd	r25, Y+1	; 0x01
    338a:	86 17       	cp	r24, r22
    338c:	97 07       	cpc	r25, r23
    338e:	69 f4       	brne	.+26     	; 0x33aa <malloc+0x48>
    3390:	8a 81       	ldd	r24, Y+2	; 0x02
    3392:	9b 81       	ldd	r25, Y+3	; 0x03
    3394:	30 97       	sbiw	r30, 0x00	; 0
    3396:	19 f0       	breq	.+6      	; 0x339e <malloc+0x3c>
    3398:	93 83       	std	Z+3, r25	; 0x03
    339a:	82 83       	std	Z+2, r24	; 0x02
    339c:	04 c0       	rjmp	.+8      	; 0x33a6 <malloc+0x44>
    339e:	90 93 59 03 	sts	0x0359, r25
    33a2:	80 93 58 03 	sts	0x0358, r24
    33a6:	fe 01       	movw	r30, r28
    33a8:	34 c0       	rjmp	.+104    	; 0x3412 <malloc+0xb0>
    33aa:	68 17       	cp	r22, r24
    33ac:	79 07       	cpc	r23, r25
    33ae:	38 f4       	brcc	.+14     	; 0x33be <malloc+0x5c>
    33b0:	41 15       	cp	r20, r1
    33b2:	51 05       	cpc	r21, r1
    33b4:	19 f0       	breq	.+6      	; 0x33bc <malloc+0x5a>
    33b6:	84 17       	cp	r24, r20
    33b8:	95 07       	cpc	r25, r21
    33ba:	08 f4       	brcc	.+2      	; 0x33be <malloc+0x5c>
    33bc:	ac 01       	movw	r20, r24
    33be:	fe 01       	movw	r30, r28
    33c0:	8a 81       	ldd	r24, Y+2	; 0x02
    33c2:	9b 81       	ldd	r25, Y+3	; 0x03
    33c4:	9c 01       	movw	r18, r24
    33c6:	e9 01       	movw	r28, r18
    33c8:	20 97       	sbiw	r28, 0x00	; 0
    33ca:	e9 f6       	brne	.-70     	; 0x3386 <malloc+0x24>
    33cc:	41 15       	cp	r20, r1
    33ce:	51 05       	cpc	r21, r1
    33d0:	a9 f1       	breq	.+106    	; 0x343c <malloc+0xda>
    33d2:	ca 01       	movw	r24, r20
    33d4:	86 1b       	sub	r24, r22
    33d6:	97 0b       	sbc	r25, r23
    33d8:	04 97       	sbiw	r24, 0x04	; 4
    33da:	08 f4       	brcc	.+2      	; 0x33de <malloc+0x7c>
    33dc:	ba 01       	movw	r22, r20
    33de:	e0 e0       	ldi	r30, 0x00	; 0
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	2a c0       	rjmp	.+84     	; 0x3438 <malloc+0xd6>
    33e4:	8d 91       	ld	r24, X+
    33e6:	9c 91       	ld	r25, X
    33e8:	11 97       	sbiw	r26, 0x01	; 1
    33ea:	84 17       	cp	r24, r20
    33ec:	95 07       	cpc	r25, r21
    33ee:	f9 f4       	brne	.+62     	; 0x342e <malloc+0xcc>
    33f0:	64 17       	cp	r22, r20
    33f2:	75 07       	cpc	r23, r21
    33f4:	81 f4       	brne	.+32     	; 0x3416 <malloc+0xb4>
    33f6:	12 96       	adiw	r26, 0x02	; 2
    33f8:	8d 91       	ld	r24, X+
    33fa:	9c 91       	ld	r25, X
    33fc:	13 97       	sbiw	r26, 0x03	; 3
    33fe:	30 97       	sbiw	r30, 0x00	; 0
    3400:	19 f0       	breq	.+6      	; 0x3408 <malloc+0xa6>
    3402:	93 83       	std	Z+3, r25	; 0x03
    3404:	82 83       	std	Z+2, r24	; 0x02
    3406:	04 c0       	rjmp	.+8      	; 0x3410 <malloc+0xae>
    3408:	90 93 59 03 	sts	0x0359, r25
    340c:	80 93 58 03 	sts	0x0358, r24
    3410:	fd 01       	movw	r30, r26
    3412:	32 96       	adiw	r30, 0x02	; 2
    3414:	4f c0       	rjmp	.+158    	; 0x34b4 <malloc+0x152>
    3416:	ca 01       	movw	r24, r20
    3418:	86 1b       	sub	r24, r22
    341a:	97 0b       	sbc	r25, r23
    341c:	fd 01       	movw	r30, r26
    341e:	e8 0f       	add	r30, r24
    3420:	f9 1f       	adc	r31, r25
    3422:	61 93       	st	Z+, r22
    3424:	71 93       	st	Z+, r23
    3426:	02 97       	sbiw	r24, 0x02	; 2
    3428:	8d 93       	st	X+, r24
    342a:	9c 93       	st	X, r25
    342c:	43 c0       	rjmp	.+134    	; 0x34b4 <malloc+0x152>
    342e:	fd 01       	movw	r30, r26
    3430:	82 81       	ldd	r24, Z+2	; 0x02
    3432:	93 81       	ldd	r25, Z+3	; 0x03
    3434:	9c 01       	movw	r18, r24
    3436:	d9 01       	movw	r26, r18
    3438:	10 97       	sbiw	r26, 0x00	; 0
    343a:	a1 f6       	brne	.-88     	; 0x33e4 <malloc+0x82>
    343c:	80 91 56 03 	lds	r24, 0x0356
    3440:	90 91 57 03 	lds	r25, 0x0357
    3444:	89 2b       	or	r24, r25
    3446:	41 f4       	brne	.+16     	; 0x3458 <malloc+0xf6>
    3448:	80 91 33 03 	lds	r24, 0x0333
    344c:	90 91 34 03 	lds	r25, 0x0334
    3450:	90 93 57 03 	sts	0x0357, r25
    3454:	80 93 56 03 	sts	0x0356, r24
    3458:	40 91 35 03 	lds	r20, 0x0335
    345c:	50 91 36 03 	lds	r21, 0x0336
    3460:	41 15       	cp	r20, r1
    3462:	51 05       	cpc	r21, r1
    3464:	41 f4       	brne	.+16     	; 0x3476 <malloc+0x114>
    3466:	4d b7       	in	r20, 0x3d	; 61
    3468:	5e b7       	in	r21, 0x3e	; 62
    346a:	80 91 31 03 	lds	r24, 0x0331
    346e:	90 91 32 03 	lds	r25, 0x0332
    3472:	48 1b       	sub	r20, r24
    3474:	59 0b       	sbc	r21, r25
    3476:	20 91 56 03 	lds	r18, 0x0356
    347a:	30 91 57 03 	lds	r19, 0x0357
    347e:	24 17       	cp	r18, r20
    3480:	35 07       	cpc	r19, r21
    3482:	b0 f4       	brcc	.+44     	; 0x34b0 <malloc+0x14e>
    3484:	ca 01       	movw	r24, r20
    3486:	82 1b       	sub	r24, r18
    3488:	93 0b       	sbc	r25, r19
    348a:	86 17       	cp	r24, r22
    348c:	97 07       	cpc	r25, r23
    348e:	80 f0       	brcs	.+32     	; 0x34b0 <malloc+0x14e>
    3490:	ab 01       	movw	r20, r22
    3492:	4e 5f       	subi	r20, 0xFE	; 254
    3494:	5f 4f       	sbci	r21, 0xFF	; 255
    3496:	84 17       	cp	r24, r20
    3498:	95 07       	cpc	r25, r21
    349a:	50 f0       	brcs	.+20     	; 0x34b0 <malloc+0x14e>
    349c:	42 0f       	add	r20, r18
    349e:	53 1f       	adc	r21, r19
    34a0:	50 93 57 03 	sts	0x0357, r21
    34a4:	40 93 56 03 	sts	0x0356, r20
    34a8:	f9 01       	movw	r30, r18
    34aa:	61 93       	st	Z+, r22
    34ac:	71 93       	st	Z+, r23
    34ae:	02 c0       	rjmp	.+4      	; 0x34b4 <malloc+0x152>
    34b0:	e0 e0       	ldi	r30, 0x00	; 0
    34b2:	f0 e0       	ldi	r31, 0x00	; 0
    34b4:	cf 01       	movw	r24, r30
    34b6:	df 91       	pop	r29
    34b8:	cf 91       	pop	r28
    34ba:	08 95       	ret

000034bc <free>:
    34bc:	cf 93       	push	r28
    34be:	df 93       	push	r29
    34c0:	00 97       	sbiw	r24, 0x00	; 0
    34c2:	09 f4       	brne	.+2      	; 0x34c6 <free+0xa>
    34c4:	50 c0       	rjmp	.+160    	; 0x3566 <free+0xaa>
    34c6:	ec 01       	movw	r28, r24
    34c8:	22 97       	sbiw	r28, 0x02	; 2
    34ca:	1b 82       	std	Y+3, r1	; 0x03
    34cc:	1a 82       	std	Y+2, r1	; 0x02
    34ce:	a0 91 58 03 	lds	r26, 0x0358
    34d2:	b0 91 59 03 	lds	r27, 0x0359
    34d6:	10 97       	sbiw	r26, 0x00	; 0
    34d8:	09 f1       	breq	.+66     	; 0x351c <free+0x60>
    34da:	40 e0       	ldi	r20, 0x00	; 0
    34dc:	50 e0       	ldi	r21, 0x00	; 0
    34de:	ac 17       	cp	r26, r28
    34e0:	bd 07       	cpc	r27, r29
    34e2:	08 f1       	brcs	.+66     	; 0x3526 <free+0x6a>
    34e4:	bb 83       	std	Y+3, r27	; 0x03
    34e6:	aa 83       	std	Y+2, r26	; 0x02
    34e8:	fe 01       	movw	r30, r28
    34ea:	21 91       	ld	r18, Z+
    34ec:	31 91       	ld	r19, Z+
    34ee:	e2 0f       	add	r30, r18
    34f0:	f3 1f       	adc	r31, r19
    34f2:	ae 17       	cp	r26, r30
    34f4:	bf 07       	cpc	r27, r31
    34f6:	79 f4       	brne	.+30     	; 0x3516 <free+0x5a>
    34f8:	8d 91       	ld	r24, X+
    34fa:	9c 91       	ld	r25, X
    34fc:	11 97       	sbiw	r26, 0x01	; 1
    34fe:	28 0f       	add	r18, r24
    3500:	39 1f       	adc	r19, r25
    3502:	2e 5f       	subi	r18, 0xFE	; 254
    3504:	3f 4f       	sbci	r19, 0xFF	; 255
    3506:	39 83       	std	Y+1, r19	; 0x01
    3508:	28 83       	st	Y, r18
    350a:	12 96       	adiw	r26, 0x02	; 2
    350c:	8d 91       	ld	r24, X+
    350e:	9c 91       	ld	r25, X
    3510:	13 97       	sbiw	r26, 0x03	; 3
    3512:	9b 83       	std	Y+3, r25	; 0x03
    3514:	8a 83       	std	Y+2, r24	; 0x02
    3516:	41 15       	cp	r20, r1
    3518:	51 05       	cpc	r21, r1
    351a:	71 f4       	brne	.+28     	; 0x3538 <free+0x7c>
    351c:	d0 93 59 03 	sts	0x0359, r29
    3520:	c0 93 58 03 	sts	0x0358, r28
    3524:	20 c0       	rjmp	.+64     	; 0x3566 <free+0xaa>
    3526:	12 96       	adiw	r26, 0x02	; 2
    3528:	8d 91       	ld	r24, X+
    352a:	9c 91       	ld	r25, X
    352c:	13 97       	sbiw	r26, 0x03	; 3
    352e:	ad 01       	movw	r20, r26
    3530:	00 97       	sbiw	r24, 0x00	; 0
    3532:	11 f0       	breq	.+4      	; 0x3538 <free+0x7c>
    3534:	dc 01       	movw	r26, r24
    3536:	d3 cf       	rjmp	.-90     	; 0x34de <free+0x22>
    3538:	fa 01       	movw	r30, r20
    353a:	d3 83       	std	Z+3, r29	; 0x03
    353c:	c2 83       	std	Z+2, r28	; 0x02
    353e:	21 91       	ld	r18, Z+
    3540:	31 91       	ld	r19, Z+
    3542:	e2 0f       	add	r30, r18
    3544:	f3 1f       	adc	r31, r19
    3546:	ce 17       	cp	r28, r30
    3548:	df 07       	cpc	r29, r31
    354a:	69 f4       	brne	.+26     	; 0x3566 <free+0xaa>
    354c:	88 81       	ld	r24, Y
    354e:	99 81       	ldd	r25, Y+1	; 0x01
    3550:	28 0f       	add	r18, r24
    3552:	39 1f       	adc	r19, r25
    3554:	2e 5f       	subi	r18, 0xFE	; 254
    3556:	3f 4f       	sbci	r19, 0xFF	; 255
    3558:	fa 01       	movw	r30, r20
    355a:	31 83       	std	Z+1, r19	; 0x01
    355c:	20 83       	st	Z, r18
    355e:	8a 81       	ldd	r24, Y+2	; 0x02
    3560:	9b 81       	ldd	r25, Y+3	; 0x03
    3562:	93 83       	std	Z+3, r25	; 0x03
    3564:	82 83       	std	Z+2, r24	; 0x02
    3566:	df 91       	pop	r29
    3568:	cf 91       	pop	r28
    356a:	08 95       	ret

0000356c <fdevopen>:
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	8c 01       	movw	r16, r24
    3576:	eb 01       	movw	r28, r22
    3578:	00 97       	sbiw	r24, 0x00	; 0
    357a:	31 f4       	brne	.+12     	; 0x3588 <fdevopen+0x1c>
    357c:	61 15       	cp	r22, r1
    357e:	71 05       	cpc	r23, r1
    3580:	19 f4       	brne	.+6      	; 0x3588 <fdevopen+0x1c>
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	38 c0       	rjmp	.+112    	; 0x35f8 <fdevopen+0x8c>
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	6e e0       	ldi	r22, 0x0E	; 14
    358e:	70 e0       	ldi	r23, 0x00	; 0
    3590:	0e 94 02 1b 	call	0x3604	; 0x3604 <calloc>
    3594:	fc 01       	movw	r30, r24
    3596:	9c 01       	movw	r18, r24
    3598:	00 97       	sbiw	r24, 0x00	; 0
    359a:	71 f1       	breq	.+92     	; 0x35f8 <fdevopen+0x8c>
    359c:	80 e8       	ldi	r24, 0x80	; 128
    359e:	83 83       	std	Z+3, r24	; 0x03
    35a0:	20 97       	sbiw	r28, 0x00	; 0
    35a2:	71 f0       	breq	.+28     	; 0x35c0 <fdevopen+0x54>
    35a4:	d3 87       	std	Z+11, r29	; 0x0b
    35a6:	c2 87       	std	Z+10, r28	; 0x0a
    35a8:	81 e8       	ldi	r24, 0x81	; 129
    35aa:	83 83       	std	Z+3, r24	; 0x03
    35ac:	80 91 5a 03 	lds	r24, 0x035A
    35b0:	90 91 5b 03 	lds	r25, 0x035B
    35b4:	89 2b       	or	r24, r25
    35b6:	21 f4       	brne	.+8      	; 0x35c0 <fdevopen+0x54>
    35b8:	f0 93 5b 03 	sts	0x035B, r31
    35bc:	e0 93 5a 03 	sts	0x035A, r30
    35c0:	01 15       	cp	r16, r1
    35c2:	11 05       	cpc	r17, r1
    35c4:	c9 f0       	breq	.+50     	; 0x35f8 <fdevopen+0x8c>
    35c6:	11 87       	std	Z+9, r17	; 0x09
    35c8:	00 87       	std	Z+8, r16	; 0x08
    35ca:	83 81       	ldd	r24, Z+3	; 0x03
    35cc:	82 60       	ori	r24, 0x02	; 2
    35ce:	83 83       	std	Z+3, r24	; 0x03
    35d0:	80 91 5c 03 	lds	r24, 0x035C
    35d4:	90 91 5d 03 	lds	r25, 0x035D
    35d8:	89 2b       	or	r24, r25
    35da:	71 f4       	brne	.+28     	; 0x35f8 <fdevopen+0x8c>
    35dc:	f0 93 5d 03 	sts	0x035D, r31
    35e0:	e0 93 5c 03 	sts	0x035C, r30
    35e4:	80 91 5e 03 	lds	r24, 0x035E
    35e8:	90 91 5f 03 	lds	r25, 0x035F
    35ec:	89 2b       	or	r24, r25
    35ee:	21 f4       	brne	.+8      	; 0x35f8 <fdevopen+0x8c>
    35f0:	f0 93 5f 03 	sts	0x035F, r31
    35f4:	e0 93 5e 03 	sts	0x035E, r30
    35f8:	c9 01       	movw	r24, r18
    35fa:	df 91       	pop	r29
    35fc:	cf 91       	pop	r28
    35fe:	1f 91       	pop	r17
    3600:	0f 91       	pop	r16
    3602:	08 95       	ret

00003604 <calloc>:
    3604:	0f 93       	push	r16
    3606:	1f 93       	push	r17
    3608:	cf 93       	push	r28
    360a:	df 93       	push	r29
    360c:	68 9f       	mul	r22, r24
    360e:	80 01       	movw	r16, r0
    3610:	69 9f       	mul	r22, r25
    3612:	10 0d       	add	r17, r0
    3614:	78 9f       	mul	r23, r24
    3616:	10 0d       	add	r17, r0
    3618:	11 24       	eor	r1, r1
    361a:	c8 01       	movw	r24, r16
    361c:	0e 94 b1 19 	call	0x3362	; 0x3362 <malloc>
    3620:	ec 01       	movw	r28, r24
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	29 f0       	breq	.+10     	; 0x3630 <calloc+0x2c>
    3626:	60 e0       	ldi	r22, 0x00	; 0
    3628:	70 e0       	ldi	r23, 0x00	; 0
    362a:	a8 01       	movw	r20, r16
    362c:	0e 94 1e 1b 	call	0x363c	; 0x363c <memset>
    3630:	ce 01       	movw	r24, r28
    3632:	df 91       	pop	r29
    3634:	cf 91       	pop	r28
    3636:	1f 91       	pop	r17
    3638:	0f 91       	pop	r16
    363a:	08 95       	ret

0000363c <memset>:
    363c:	dc 01       	movw	r26, r24
    363e:	01 c0       	rjmp	.+2      	; 0x3642 <memset+0x6>
    3640:	6d 93       	st	X+, r22
    3642:	41 50       	subi	r20, 0x01	; 1
    3644:	50 40       	sbci	r21, 0x00	; 0
    3646:	e0 f7       	brcc	.-8      	; 0x3640 <memset+0x4>
    3648:	08 95       	ret

0000364a <_exit>:
    364a:	f8 94       	cli

0000364c <__stop_program>:
    364c:	ff cf       	rjmp	.-2      	; 0x364c <__stop_program>
