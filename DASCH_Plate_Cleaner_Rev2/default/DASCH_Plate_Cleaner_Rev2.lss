
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ce  00800100  000038ce  00003962  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  008003ce  008003ce  00003c30  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  00003c30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002591  00000000  00000000  000063f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00008981  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000045e  00000000  00000000  000089c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001722  00000000  00000000  00008e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003fb  00000000  00000000  0000a541  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f13  00000000  00000000  0000a93c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c850  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e3f  00000000  00000000  0000ca10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000125f  00000000  00000000  0000d84f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  0000eaae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 01 	jmp	0x208	; 0x208 <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <__vector_11>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      48:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      6c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	ab 08       	sbc	r10, r11
      8e:	bc 08       	sbc	r11, r12
      90:	d4 08       	sbc	r13, r4
      92:	e7 08       	sbc	r14, r7
      94:	fb 08       	sbc	r15, r11
      96:	0e 09       	sbc	r16, r14
      98:	22 09       	sbc	r18, r2
      9a:	37 09       	sbc	r19, r7
      9c:	4b 09       	sbc	r20, r11
      9e:	59 09       	sbc	r21, r9
      a0:	5f 09       	sbc	r21, r15
      a2:	6d 09       	sbc	r22, r13
      a4:	71 09       	sbc	r23, r1
      a6:	7f 09       	sbc	r23, r15
      a8:	83 09       	sbc	r24, r3
      aa:	91 09       	sbc	r25, r1
      ac:	95 09       	sbc	r25, r5
      ae:	a4 09       	sbc	r26, r4
      b0:	a8 09       	sbc	r26, r8
      b2:	b6 09       	sbc	r27, r6
      b4:	b9 09       	sbc	r27, r9
      b6:	c8 09       	sbc	r28, r8
      b8:	cc 09       	sbc	r28, r12
      ba:	eb 09       	sbc	r30, r11
      bc:	dc 09       	sbc	r29, r12
      be:	ef 09       	sbc	r30, r15
      c0:	f3 09       	sbc	r31, r3
      c2:	01 0a       	sbc	r0, r17
      c4:	04 0a       	sbc	r0, r20
      c6:	13 0a       	sbc	r1, r19
      c8:	17 0a       	sbc	r1, r23
      ca:	25 0a       	sbc	r2, r21
      cc:	2b 0a       	sbc	r2, r27
      ce:	41 0a       	sbc	r4, r17
      d0:	4d 0a       	sbc	r4, r29
      d2:	6a 0a       	sbc	r6, r26
      d4:	76 0a       	sbc	r7, r22
      d6:	91 0a       	sbc	r9, r17
      d8:	99 0a       	sbc	r9, r25
      da:	b2 0a       	sbc	r11, r18
      dc:	bc 0a       	sbc	r11, r28
      de:	d5 0a       	sbc	r13, r21
      e0:	df 0a       	sbc	r13, r31
      e2:	fb 0a       	sbc	r15, r27
      e4:	45 0c       	add	r4, r5
      e6:	6f 0c       	add	r6, r15
      e8:	8e 0c       	add	r8, r14
      ea:	d3 0c       	add	r13, r3
      ec:	9b 0c       	add	r9, r11
      ee:	a8 0c       	add	r10, r8
      f0:	d3 0c       	add	r13, r3
      f2:	b3 0c       	add	r11, r3
      f4:	be 0c       	add	r11, r14
      f6:	c9 0c       	add	r12, r9
      f8:	e9 0c       	add	r14, r9
      fa:	d3 0c       	add	r13, r3
      fc:	d7 0c       	add	r13, r7
      fe:	23 0d       	add	r18, r3
     100:	e9 0c       	add	r14, r9
     102:	6a 0d       	add	r22, r10
     104:	6a 0d       	add	r22, r10
     106:	6a 0d       	add	r22, r10
     108:	6a 0d       	add	r22, r10
     10a:	6a 0d       	add	r22, r10
     10c:	6a 0d       	add	r22, r10
     10e:	6a 0d       	add	r22, r10
     110:	6a 0d       	add	r22, r10
     112:	f4 0c       	add	r15, r4
     114:	ff 0c       	add	r15, r15
     116:	39 0d       	add	r19, r9
     118:	07 0d       	add	r16, r7
     11a:	10 0d       	add	r17, r0
     11c:	1d 0d       	add	r17, r13
     11e:	23 0d       	add	r18, r3
     120:	26 0d       	add	r18, r6
     122:	34 0d       	add	r19, r4
     124:	39 0d       	add	r19, r9
     126:	3e 0d       	add	r19, r14
     128:	49 0d       	add	r20, r9
     12a:	53 0d       	add	r21, r3
     12c:	3d 0e       	add	r3, r29
     12e:	67 0e       	add	r6, r23
     130:	86 0e       	add	r8, r22
     132:	ab 0e       	add	r10, r27
     134:	93 0e       	add	r9, r19
     136:	a0 0e       	add	r10, r16
     138:	ab 0e       	add	r10, r27
     13a:	6a 0f       	add	r22, r26
     13c:	6a 0f       	add	r22, r26
     13e:	6a 0f       	add	r22, r26
     140:	6a 0f       	add	r22, r26
     142:	6a 0f       	add	r22, r26
     144:	6a 0f       	add	r22, r26
     146:	6a 0f       	add	r22, r26
     148:	6a 0f       	add	r22, r26
     14a:	af 0e       	add	r10, r31
     14c:	b6 0e       	add	r11, r22
     14e:	c5 0e       	add	r12, r21
     150:	ce 0e       	add	r12, r30
     152:	3a 0f       	add	r19, r26
     154:	d9 0e       	add	r13, r25
     156:	c5 0e       	add	r12, r21
     158:	ef 0e       	add	r14, r31
     15a:	c5 0e       	add	r12, r21
     15c:	03 0f       	add	r16, r19
     15e:	3a 0f       	add	r19, r26
     160:	0b 0f       	add	r16, r27
     162:	14 0f       	add	r17, r20
     164:	21 0f       	add	r18, r17
     166:	c5 0e       	add	r12, r21
     168:	27 0f       	add	r18, r23
     16a:	35 0f       	add	r19, r21
     16c:	3a 0f       	add	r19, r26
     16e:	3e 0f       	add	r19, r30
     170:	49 0f       	add	r20, r25
     172:	53 0f       	add	r21, r19
     174:	3c 10       	cpse	r3, r12
     176:	66 10       	cpse	r6, r6
     178:	85 10       	cpse	r8, r5
     17a:	d6 10       	cpse	r13, r6
     17c:	92 10       	cpse	r9, r2
     17e:	9f 10       	cpse	r9, r15
     180:	d6 10       	cpse	r13, r6
     182:	aa 10       	cpse	r10, r10
     184:	b5 10       	cpse	r11, r5
     186:	c0 10       	cpse	r12, r0
     188:	ec 10       	cpse	r14, r12
     18a:	d6 10       	cpse	r13, r6
     18c:	da 10       	cpse	r13, r10
     18e:	66 11       	cpse	r22, r6
     190:	ec 10       	cpse	r14, r12
     192:	f7 10       	cpse	r15, r7
     194:	fe 10       	cpse	r15, r14
     196:	66 11       	cpse	r22, r6
     198:	0d 11       	cpse	r16, r13
     19a:	7c 11       	cpse	r23, r12
     19c:	18 11       	cpse	r17, r8
     19e:	66 11       	cpse	r22, r6
     1a0:	2e 11       	cpse	r18, r14
     1a2:	66 11       	cpse	r22, r6
     1a4:	42 11       	cpse	r20, r2
     1a6:	7c 11       	cpse	r23, r12
     1a8:	4a 11       	cpse	r20, r10
     1aa:	53 11       	cpse	r21, r3
     1ac:	60 11       	cpse	r22, r0
     1ae:	66 11       	cpse	r22, r6
     1b0:	69 11       	cpse	r22, r9
     1b2:	77 11       	cpse	r23, r7
     1b4:	7c 11       	cpse	r23, r12
     1b6:	81 11       	cpse	r24, r1
     1b8:	8c 11       	cpse	r24, r12
     1ba:	96 11       	cpse	r25, r6
     1bc:	82 12       	cpse	r8, r18
     1be:	ab 12       	cpse	r10, r27
     1c0:	ca 12       	cpse	r12, r26
     1c2:	11 13       	cpse	r17, r17
     1c4:	d7 12       	cpse	r13, r23
     1c6:	e4 12       	cpse	r14, r20
     1c8:	11 13       	cpse	r17, r17
     1ca:	ef 12       	cpse	r14, r31
     1cc:	fa 12       	cpse	r15, r26
     1ce:	01 13       	cpse	r16, r17
     1d0:	06 13       	cpse	r16, r22
     1d2:	11 13       	cpse	r17, r17
     1d4:	15 13       	cpse	r17, r21
     1d6:	27 13       	cpse	r18, r23
     1d8:	06 13       	cpse	r16, r22
     1da:	34 13       	cpse	r19, r20
     1dc:	3b 13       	cpse	r19, r27
     1de:	67 13       	cpse	r22, r23
     1e0:	46 13       	cpse	r20, r22
     1e2:	d7 13       	cpse	r29, r23
     1e4:	51 13       	cpse	r21, r17
     1e6:	67 13       	cpse	r22, r23
     1e8:	74 13       	cpse	r23, r20
     1ea:	88 13       	cpse	r24, r24
     1ec:	8b 13       	cpse	r24, r27
     1ee:	d7 13       	cpse	r29, r23
     1f0:	91 13       	cpse	r25, r17
     1f2:	9c 13       	cpse	r25, r28
     1f4:	a5 13       	cpse	r26, r21
     1f6:	af 13       	cpse	r26, r31
     1f8:	bc 13       	cpse	r27, r28
     1fa:	d2 13       	cpse	r29, r18
     1fc:	d7 13       	cpse	r29, r23
     1fe:	e1 13       	cpse	r30, r17
     200:	ec 13       	cpse	r30, r28
     202:	f6 13       	cpse	r31, r22
     204:	0d 14       	cp	r0, r13
     206:	79 12       	cpse	r7, r25

00000208 <__ctors_end>:
     208:	11 24       	eor	r1, r1
     20a:	1f be       	out	0x3f, r1	; 63
     20c:	cf ef       	ldi	r28, 0xFF	; 255
     20e:	d0 e4       	ldi	r29, 0x40	; 64
     210:	de bf       	out	0x3e, r29	; 62
     212:	cd bf       	out	0x3d, r28	; 61

00000214 <__do_copy_data>:
     214:	13 e0       	ldi	r17, 0x03	; 3
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	ee ec       	ldi	r30, 0xCE	; 206
     21c:	f8 e3       	ldi	r31, 0x38	; 56
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ae 3c       	cpi	r26, 0xCE	; 206
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>

0000022e <__do_clear_bss>:
     22e:	13 e0       	ldi	r17, 0x03	; 3
     230:	ae ec       	ldi	r26, 0xCE	; 206
     232:	b3 e0       	ldi	r27, 0x03	; 3
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	a6 3f       	cpi	r26, 0xF6	; 246
     23a:	b1 07       	cpc	r27, r17
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 b3 05 	call	0xb66	; 0xb66 <main>
     242:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <_ZN16OrangutanDigital11isInputHighEh>:


	// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
	// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
	// the pin.
	inline static unsigned char isInputHigh(unsigned char pin)
     24a:	48 2f       	mov	r20, r24
		io->pinRegister = 0;
		io->portRegister = 0;
		io->ddrRegister = 0;
		io->bitmask = 0;

		if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     24c:	88 30       	cpi	r24, 0x08	; 8
     24e:	58 f4       	brcc	.+22     	; 0x266 <_ZN16OrangutanDigital11isInputHighEh+0x1c>
		{
			io->pinRegister = (unsigned char*)&PIND;
			io->portRegister = (unsigned char*)&PORTD;
			io->ddrRegister = (unsigned char*)&DDRD;
			io->bitmask = 1 << pin;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	02 c0       	rjmp	.+4      	; 0x25a <_ZN16OrangutanDigital11isInputHighEh+0x10>
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	4a 95       	dec	r20
     25c:	e2 f7       	brpl	.-8      	; 0x256 <_ZN16OrangutanDigital11isInputHighEh+0xc>
     25e:	98 2f       	mov	r25, r24
     260:	e9 e2       	ldi	r30, 0x29	; 41
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	36 c0       	rjmp	.+108    	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)

		else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     266:	80 31       	cpi	r24, 0x10	; 16
     268:	78 f4       	brcc	.+30     	; 0x288 <_ZN16OrangutanDigital11isInputHighEh+0x3e>
		{
			io->pinRegister = (unsigned char*)&PINB;
			io->portRegister = (unsigned char*)&PORTB;
			io->ddrRegister = (unsigned char*)&DDRB;
			io->bitmask = 1 << (pin - 8);
     26a:	28 2f       	mov	r18, r24
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	28 50       	subi	r18, 0x08	; 8
     270:	30 40       	sbci	r19, 0x00	; 0
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	02 c0       	rjmp	.+4      	; 0x27c <_ZN16OrangutanDigital11isInputHighEh+0x32>
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	2a 95       	dec	r18
     27e:	e2 f7       	brpl	.-8      	; 0x278 <_ZN16OrangutanDigital11isInputHighEh+0x2e>
     280:	98 2f       	mov	r25, r24
     282:	e3 e2       	ldi	r30, 0x23	; 35
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	25 c0       	rjmp	.+74     	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     288:	88 31       	cpi	r24, 0x18	; 24
     28a:	78 f4       	brcc	.+30     	; 0x2aa <_ZN16OrangutanDigital11isInputHighEh+0x60>
		{
			io->pinRegister = (unsigned char*)&PINC;
			io->portRegister = (unsigned char*)&PORTC;
			io->ddrRegister = (unsigned char*)&DDRC;
			io->bitmask = 1 << (pin - 16);
     28c:	28 2f       	mov	r18, r24
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	20 51       	subi	r18, 0x10	; 16
     292:	30 40       	sbci	r19, 0x00	; 0
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	02 c0       	rjmp	.+4      	; 0x29e <_ZN16OrangutanDigital11isInputHighEh+0x54>
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	2a 95       	dec	r18
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <_ZN16OrangutanDigital11isInputHighEh+0x50>
     2a2:	98 2f       	mov	r25, r24
     2a4:	e6 e2       	ldi	r30, 0x26	; 38
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	14 c0       	rjmp	.+40     	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     2aa:	80 32       	cpi	r24, 0x20	; 32
     2ac:	20 f0       	brcs	.+8      	; 0x2b6 <_ZN16OrangutanDigital11isInputHighEh+0x6c>
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	e0 e0       	ldi	r30, 0x00	; 0
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	0e c0       	rjmp	.+28     	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		{
			io->pinRegister = (unsigned char*)&PINA;
			io->portRegister = (unsigned char*)&PORTA;
			io->ddrRegister = (unsigned char*)&DDRA;
			io->bitmask = 1 << (31 - pin);
     2b6:	2f e1       	ldi	r18, 0x1F	; 31
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	28 1b       	sub	r18, r24
     2bc:	31 09       	sbc	r19, r1
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <_ZN16OrangutanDigital11isInputHighEh+0x7e>
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	2a 95       	dec	r18
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <_ZN16OrangutanDigital11isInputHighEh+0x7a>
     2cc:	98 2f       	mov	r25, r24
     2ce:	e0 e2       	ldi	r30, 0x20	; 32
     2d0:	f0 e0       	ldi	r31, 0x00	; 0

	// low-level method for reading the value of the PIN register for an pin or set of pins
	// described by an IOStruct pointer.
	inline static unsigned char getInputValue(struct IOStruct* ioPin)
	{
		return *(ioPin->pinRegister) & ioPin->bitmask;
     2d2:	80 81       	ld	r24, Z
	inline static unsigned char isInputHigh(unsigned char pin)
	{
		struct IOStruct registers;
		getIORegisters(&registers, pin);
		return getInputValue(&registers);
	}
     2d4:	89 23       	and	r24, r25
     2d6:	08 95       	ret

000002d8 <__cxa_guard_acquire>:

extern "C" int __cxa_guard_acquire(__guard *); 
extern "C" void __cxa_guard_release (__guard *); 
extern "C" void __cxa_guard_abort (__guard *); 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);}; 
     2d8:	fc 01       	movw	r30, r24
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	88 23       	and	r24, r24
     2e2:	11 f4       	brne	.+4      	; 0x2e8 <__cxa_guard_acquire+0x10>
     2e4:	21 e0       	ldi	r18, 0x01	; 1
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	c9 01       	movw	r24, r18
     2ea:	08 95       	ret

000002ec <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;}; 
     2ec:	fc 01       	movw	r30, r24
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	80 83       	st	Z, r24
     2f2:	08 95       	ret

000002f4 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
     2f4:	08 95       	ret

000002f6 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void); 
void __cxa_pure_virtual(void) {}; 
     2f6:	08 95       	ret

000002f8 <_Z13brush1_actioniiPiS_S_S_S_>:
			break;
	}
}

void brush1_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
}
     2f8:	08 95       	ret

000002fa <_Z13brush2_actioniiPiS_S_S_S_>:

void brush2_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
}
     2fa:	08 95       	ret

000002fc <_Z10dry_actioniiPiS_S_S_S_>:

void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor){
}
     2fc:	08 95       	ret

000002fe <_Z15button_debounceiPi>:

bool button_debounce(int counter, int *pstateButton)
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	8c 01       	movw	r16, r24
     308:	eb 01       	movw	r28, r22
{
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && OrangutanDigital::isInputHigh(IO_D0)){
     30a:	88 81       	ld	r24, Y
     30c:	99 81       	ldd	r25, Y+1	; 0x01
     30e:	89 2b       	or	r24, r25
     310:	69 f4       	brne	.+26     	; 0x32c <_Z15button_debounceiPi+0x2e>
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     318:	88 23       	and	r24, r24
     31a:	41 f0       	breq	.+16     	; 0x32c <_Z15button_debounceiPi+0x2e>
		counterRefPush = counter;
     31c:	10 93 d7 03 	sts	0x03D7, r17
     320:	00 93 d6 03 	sts	0x03D6, r16
		*pstateButton = PRESSED;
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	99 83       	std	Y+1, r25	; 0x01
     32a:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     32c:	88 81       	ld	r24, Y
     32e:	99 81       	ldd	r25, Y+1	; 0x01
     330:	01 97       	sbiw	r24, 0x01	; 1
     332:	f9 f4       	brne	.+62     	; 0x372 <_Z15button_debounceiPi+0x74>
		if(counter - counterRefPush > 15){
     334:	80 91 d6 03 	lds	r24, 0x03D6
     338:	90 91 d7 03 	lds	r25, 0x03D7
     33c:	98 01       	movw	r18, r16
     33e:	28 1b       	sub	r18, r24
     340:	39 0b       	sbc	r19, r25
     342:	20 31       	cpi	r18, 0x10	; 16
     344:	31 05       	cpc	r19, r1
     346:	74 f0       	brlt	.+28     	; 0x364 <_Z15button_debounceiPi+0x66>
			if(!OrangutanDigital::isInputHigh(IO_D0)){
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     34e:	88 23       	and	r24, r24
     350:	81 f4       	brne	.+32     	; 0x372 <_Z15button_debounceiPi+0x74>
				counterRefRel = counter;
     352:	10 93 d5 03 	sts	0x03D5, r17
     356:	00 93 d4 03 	sts	0x03D4, r16
				*pstateButton = RELEASED;
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	99 83       	std	Y+1, r25	; 0x01
     360:	88 83       	st	Y, r24
     362:	07 c0       	rjmp	.+14     	; 0x372 <_Z15button_debounceiPi+0x74>
			}
		}
		else if(!OrangutanDigital::isInputHigh(IO_D0)){
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     36a:	88 23       	and	r24, r24
     36c:	11 f4       	brne	.+4      	; 0x372 <_Z15button_debounceiPi+0x74>
			*pstateButton = NONE;
     36e:	19 82       	std	Y+1, r1	; 0x01
     370:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     372:	88 81       	ld	r24, Y
     374:	99 81       	ldd	r25, Y+1	; 0x01
     376:	02 97       	sbiw	r24, 0x02	; 2
     378:	d9 f4       	brne	.+54     	; 0x3b0 <_Z15button_debounceiPi+0xb2>
		if(OrangutanDigital::isInputHigh(IO_D0)){
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     380:	88 23       	and	r24, r24
     382:	49 f0       	breq	.+18     	; 0x396 <_Z15button_debounceiPi+0x98>
			*pstateButton = PRESSED;
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	99 83       	std	Y+1, r25	; 0x01
     38a:	88 83       	st	Y, r24
			counterRefPush = counter;
     38c:	10 93 d7 03 	sts	0x03D7, r17
     390:	00 93 d6 03 	sts	0x03D6, r16
     394:	0d c0       	rjmp	.+26     	; 0x3b0 <_Z15button_debounceiPi+0xb2>
		}
		else if(counter - counterRefRel > 15){
     396:	80 91 d4 03 	lds	r24, 0x03D4
     39a:	90 91 d5 03 	lds	r25, 0x03D5
     39e:	08 1b       	sub	r16, r24
     3a0:	19 0b       	sbc	r17, r25
     3a2:	00 31       	cpi	r16, 0x10	; 16
     3a4:	11 05       	cpc	r17, r1
     3a6:	24 f0       	brlt	.+8      	; 0x3b0 <_Z15button_debounceiPi+0xb2>
			*pstateButton = NONE;
     3a8:	19 82       	std	Y+1, r1	; 0x01
     3aa:	18 82       	st	Y, r1
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <_Z15button_debounceiPi+0xb4>
			return true;
     3b0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	08 95       	ret

000003bc <_Z10init_transibii>:

bool init_trans(int state, bool buttonTriggered, int counter, int counterRef){
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	dc 01       	movw	r26, r24
     3c2:	86 2f       	mov	r24, r22
     3c4:	fa 01       	movw	r30, r20
     3c6:	b9 01       	movw	r22, r18
	return((state == INIT && buttonTriggered)||(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/)||(state == RAISEL1 && counter - counterRef > pWait)||(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0)||(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0)||(state == LOWERL2 && counter - counterRef > pWait));
     3c8:	10 97       	sbiw	r26, 0x00	; 0
     3ca:	19 f4       	brne	.+6      	; 0x3d2 <_Z10init_transibii+0x16>
     3cc:	88 23       	and	r24, r24
     3ce:	21 f1       	breq	.+72     	; 0x418 <_Z10init_transibii+0x5c>
     3d0:	3c c0       	rjmp	.+120    	; 0x44a <_Z10init_transibii+0x8e>
     3d2:	a1 30       	cpi	r26, 0x01	; 1
     3d4:	b1 05       	cpc	r27, r1
     3d6:	b1 f4       	brne	.+44     	; 0x404 <_Z10init_transibii+0x48>
     3d8:	42 1b       	sub	r20, r18
     3da:	53 0b       	sbc	r21, r19
     3dc:	20 91 b3 03 	lds	r18, 0x03B3
     3e0:	30 91 b4 03 	lds	r19, 0x03B4
     3e4:	80 91 a5 03 	lds	r24, 0x03A5
     3e8:	90 91 a6 03 	lds	r25, 0x03A6
     3ec:	ec 01       	movw	r28, r24
     3ee:	2c 9f       	mul	r18, r28
     3f0:	c0 01       	movw	r24, r0
     3f2:	2d 9f       	mul	r18, r29
     3f4:	90 0d       	add	r25, r0
     3f6:	3c 9f       	mul	r19, r28
     3f8:	90 0d       	add	r25, r0
     3fa:	11 24       	eor	r1, r1
     3fc:	84 17       	cp	r24, r20
     3fe:	95 07       	cpc	r25, r21
     400:	b4 f4       	brge	.+44     	; 0x42e <_Z10init_transibii+0x72>
     402:	23 c0       	rjmp	.+70     	; 0x44a <_Z10init_transibii+0x8e>
     404:	a2 30       	cpi	r26, 0x02	; 2
     406:	b1 05       	cpc	r27, r1
     408:	b1 f0       	breq	.+44     	; 0x436 <_Z10init_transibii+0x7a>
     40a:	a3 30       	cpi	r26, 0x03	; 3
     40c:	b1 05       	cpc	r27, r1
     40e:	21 f4       	brne	.+8      	; 0x418 <_Z10init_transibii+0x5c>
     410:	20 91 d2 03 	lds	r18, 0x03D2
     414:	26 95       	lsr	r18
     416:	08 c0       	rjmp	.+16     	; 0x428 <_Z10init_transibii+0x6c>
     418:	a4 30       	cpi	r26, 0x04	; 4
     41a:	b1 05       	cpc	r27, r1
     41c:	41 f4       	brne	.+16     	; 0x42e <_Z10init_transibii+0x72>
     41e:	20 91 d2 03 	lds	r18, 0x03D2
     422:	26 95       	lsr	r18
     424:	26 95       	lsr	r18
     426:	26 95       	lsr	r18
     428:	20 95       	com	r18
     42a:	21 70       	andi	r18, 0x01	; 1
     42c:	0f c0       	rjmp	.+30     	; 0x44c <_Z10init_transibii+0x90>
     42e:	15 97       	sbiw	r26, 0x05	; 5
     430:	11 f0       	breq	.+4      	; 0x436 <_Z10init_transibii+0x7a>
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	0b c0       	rjmp	.+22     	; 0x44c <_Z10init_transibii+0x90>
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	e6 1b       	sub	r30, r22
     43a:	f7 0b       	sbc	r31, r23
     43c:	80 91 95 03 	lds	r24, 0x0395
     440:	90 91 96 03 	lds	r25, 0x0396
     444:	8e 17       	cp	r24, r30
     446:	9f 07       	cpc	r25, r31
     448:	0c f4       	brge	.+2      	; 0x44c <_Z10init_transibii+0x90>
     44a:	21 e0       	ldi	r18, 0x01	; 1
}
     44c:	82 2f       	mov	r24, r18
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	08 95       	ret

00000454 <_Z12firstB_transiii>:

bool firstB_trans(int state, int counter, int counterRef){
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	fc 01       	movw	r30, r24
     45a:	da 01       	movw	r26, r20
	//Had references to counterRef14...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/)||(state == B1SET && counter - counterRef > mWait)||(state == B1START1 && counter - counterRef > pWait)||(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||(state == B1STOP1 && counter - counterRef > pWait)||(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/)||(state == B1START2 && counter - counterRef > pWait)||(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate));
     45c:	86 30       	cpi	r24, 0x06	; 6
     45e:	91 05       	cpc	r25, r1
     460:	b9 f4       	brne	.+46     	; 0x490 <_Z12firstB_transiii+0x3c>
     462:	ab 01       	movw	r20, r22
     464:	4a 1b       	sub	r20, r26
     466:	5b 0b       	sbc	r21, r27
     468:	20 91 b7 03 	lds	r18, 0x03B7
     46c:	30 91 b8 03 	lds	r19, 0x03B8
     470:	80 91 a7 03 	lds	r24, 0x03A7
     474:	90 91 a8 03 	lds	r25, 0x03A8
     478:	ec 01       	movw	r28, r24
     47a:	2c 9f       	mul	r18, r28
     47c:	c0 01       	movw	r24, r0
     47e:	2d 9f       	mul	r18, r29
     480:	90 0d       	add	r25, r0
     482:	3c 9f       	mul	r19, r28
     484:	90 0d       	add	r25, r0
     486:	11 24       	eor	r1, r1
     488:	84 17       	cp	r24, r20
     48a:	95 07       	cpc	r25, r21
     48c:	bc f5       	brge	.+110    	; 0x4fc <_Z12firstB_transiii+0xa8>
     48e:	75 c0       	rjmp	.+234    	; 0x57a <_Z12firstB_transiii+0x126>
     490:	87 30       	cpi	r24, 0x07	; 7
     492:	91 05       	cpc	r25, r1
     494:	59 f4       	brne	.+22     	; 0x4ac <_Z12firstB_transiii+0x58>
     496:	9b 01       	movw	r18, r22
     498:	24 1b       	sub	r18, r20
     49a:	35 0b       	sbc	r19, r21
     49c:	80 91 97 03 	lds	r24, 0x0397
     4a0:	90 91 98 03 	lds	r25, 0x0398
     4a4:	82 17       	cp	r24, r18
     4a6:	93 07       	cpc	r25, r19
     4a8:	64 f5       	brge	.+88     	; 0x502 <_Z12firstB_transiii+0xae>
     4aa:	67 c0       	rjmp	.+206    	; 0x57a <_Z12firstB_transiii+0x126>
     4ac:	88 30       	cpi	r24, 0x08	; 8
     4ae:	91 05       	cpc	r25, r1
     4b0:	59 f4       	brne	.+22     	; 0x4c8 <_Z12firstB_transiii+0x74>
     4b2:	9b 01       	movw	r18, r22
     4b4:	24 1b       	sub	r18, r20
     4b6:	35 0b       	sbc	r19, r21
     4b8:	80 91 95 03 	lds	r24, 0x0395
     4bc:	90 91 96 03 	lds	r25, 0x0396
     4c0:	82 17       	cp	r24, r18
     4c2:	93 07       	cpc	r25, r19
     4c4:	ac f5       	brge	.+106    	; 0x530 <_Z12firstB_transiii+0xdc>
     4c6:	59 c0       	rjmp	.+178    	; 0x57a <_Z12firstB_transiii+0x126>
     4c8:	89 30       	cpi	r24, 0x09	; 9
     4ca:	91 05       	cpc	r25, r1
     4cc:	b9 f4       	brne	.+46     	; 0x4fc <_Z12firstB_transiii+0xa8>
     4ce:	ab 01       	movw	r20, r22
     4d0:	4a 1b       	sub	r20, r26
     4d2:	5b 0b       	sbc	r21, r27
     4d4:	20 91 af 03 	lds	r18, 0x03AF
     4d8:	30 91 b0 03 	lds	r19, 0x03B0
     4dc:	80 91 a7 03 	lds	r24, 0x03A7
     4e0:	90 91 a8 03 	lds	r25, 0x03A8
     4e4:	ec 01       	movw	r28, r24
     4e6:	2c 9f       	mul	r18, r28
     4e8:	c0 01       	movw	r24, r0
     4ea:	2d 9f       	mul	r18, r29
     4ec:	90 0d       	add	r25, r0
     4ee:	3c 9f       	mul	r19, r28
     4f0:	90 0d       	add	r25, r0
     4f2:	11 24       	eor	r1, r1
     4f4:	84 17       	cp	r24, r20
     4f6:	95 07       	cpc	r25, r21
     4f8:	34 f5       	brge	.+76     	; 0x546 <_Z12firstB_transiii+0xf2>
     4fa:	3f c0       	rjmp	.+126    	; 0x57a <_Z12firstB_transiii+0x126>
     4fc:	ea 30       	cpi	r30, 0x0A	; 10
     4fe:	f1 05       	cpc	r31, r1
     500:	d1 f0       	breq	.+52     	; 0x536 <_Z12firstB_transiii+0xe2>
     502:	eb 30       	cpi	r30, 0x0B	; 11
     504:	f1 05       	cpc	r31, r1
     506:	a1 f4       	brne	.+40     	; 0x530 <_Z12firstB_transiii+0xdc>
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	6a 1b       	sub	r22, r26
     50c:	7b 0b       	sbc	r23, r27
     50e:	80 91 af 03 	lds	r24, 0x03AF
     512:	90 91 b0 03 	lds	r25, 0x03B0
     516:	20 91 a7 03 	lds	r18, 0x03A7
     51a:	30 91 a8 03 	lds	r19, 0x03A8
     51e:	fc 01       	movw	r30, r24
     520:	e2 9f       	mul	r30, r18
     522:	c0 01       	movw	r24, r0
     524:	e3 9f       	mul	r30, r19
     526:	90 0d       	add	r25, r0
     528:	f2 9f       	mul	r31, r18
     52a:	90 0d       	add	r25, r0
     52c:	11 24       	eor	r1, r1
     52e:	22 c0       	rjmp	.+68     	; 0x574 <_Z12firstB_transiii+0x120>
     530:	ec 30       	cpi	r30, 0x0C	; 12
     532:	f1 05       	cpc	r31, r1
     534:	41 f4       	brne	.+16     	; 0x546 <_Z12firstB_transiii+0xf2>
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	6a 1b       	sub	r22, r26
     53a:	7b 0b       	sbc	r23, r27
     53c:	80 91 95 03 	lds	r24, 0x0395
     540:	90 91 96 03 	lds	r25, 0x0396
     544:	17 c0       	rjmp	.+46     	; 0x574 <_Z12firstB_transiii+0x120>
     546:	3d 97       	sbiw	r30, 0x0d	; 13
     548:	11 f0       	breq	.+4      	; 0x54e <_Z12firstB_transiii+0xfa>
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	17 c0       	rjmp	.+46     	; 0x57c <_Z12firstB_transiii+0x128>
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	6a 1b       	sub	r22, r26
     552:	7b 0b       	sbc	r23, r27
     554:	80 91 af 03 	lds	r24, 0x03AF
     558:	90 91 b0 03 	lds	r25, 0x03B0
     55c:	20 91 a7 03 	lds	r18, 0x03A7
     560:	30 91 a8 03 	lds	r19, 0x03A8
     564:	ec 01       	movw	r28, r24
     566:	c2 9f       	mul	r28, r18
     568:	c0 01       	movw	r24, r0
     56a:	c3 9f       	mul	r28, r19
     56c:	90 0d       	add	r25, r0
     56e:	d2 9f       	mul	r29, r18
     570:	90 0d       	add	r25, r0
     572:	11 24       	eor	r1, r1
     574:	86 17       	cp	r24, r22
     576:	97 07       	cpc	r25, r23
     578:	0c f4       	brge	.+2      	; 0x57c <_Z12firstB_transiii+0x128>
     57a:	41 e0       	ldi	r20, 0x01	; 1
}
     57c:	84 2f       	mov	r24, r20
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <_Z13secondB_transiii>:

bool secondB_trans(int state, int counter, int counterRef){
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	fc 01       	movw	r30, r24
     58a:	da 01       	movw	r26, r20
	return((state == B2SET && counter - counterRef > mWait)||(state == B2START1 && counter - counterRef > pWait)||(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||(state == B2STOP1 && counter - counterRef > pWait)||(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/)||(state == B2START2 && counter - counterRef > pWait)||(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate)||(state == B2STOP2 && counter - counterRef > pWait)||(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/));
     58c:	8f 30       	cpi	r24, 0x0F	; 15
     58e:	91 05       	cpc	r25, r1
     590:	59 f4       	brne	.+22     	; 0x5a8 <_Z13secondB_transiii+0x24>
     592:	9b 01       	movw	r18, r22
     594:	24 1b       	sub	r18, r20
     596:	35 0b       	sbc	r19, r21
     598:	80 91 97 03 	lds	r24, 0x0397
     59c:	90 91 98 03 	lds	r25, 0x0398
     5a0:	82 17       	cp	r24, r18
     5a2:	93 07       	cpc	r25, r19
     5a4:	c4 f5       	brge	.+112    	; 0x616 <_Z13secondB_transiii+0x92>
     5a6:	90 c0       	rjmp	.+288    	; 0x6c8 <_Z13secondB_transiii+0x144>
     5a8:	80 31       	cpi	r24, 0x10	; 16
     5aa:	91 05       	cpc	r25, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <_Z13secondB_transiii+0x42>
     5ae:	9b 01       	movw	r18, r22
     5b0:	24 1b       	sub	r18, r20
     5b2:	35 0b       	sbc	r19, r21
     5b4:	80 91 95 03 	lds	r24, 0x0395
     5b8:	90 91 96 03 	lds	r25, 0x0396
     5bc:	82 17       	cp	r24, r18
     5be:	93 07       	cpc	r25, r19
     5c0:	0c f0       	brlt	.+2      	; 0x5c4 <_Z13secondB_transiii+0x40>
     5c2:	43 c0       	rjmp	.+134    	; 0x64a <_Z13secondB_transiii+0xc6>
     5c4:	81 c0       	rjmp	.+258    	; 0x6c8 <_Z13secondB_transiii+0x144>
     5c6:	81 31       	cpi	r24, 0x11	; 17
     5c8:	91 05       	cpc	r25, r1
     5ca:	b9 f4       	brne	.+46     	; 0x5fa <_Z13secondB_transiii+0x76>
     5cc:	ab 01       	movw	r20, r22
     5ce:	4a 1b       	sub	r20, r26
     5d0:	5b 0b       	sbc	r21, r27
     5d2:	20 91 af 03 	lds	r18, 0x03AF
     5d6:	30 91 b0 03 	lds	r19, 0x03B0
     5da:	80 91 a7 03 	lds	r24, 0x03A7
     5de:	90 91 a8 03 	lds	r25, 0x03A8
     5e2:	ec 01       	movw	r28, r24
     5e4:	2c 9f       	mul	r18, r28
     5e6:	c0 01       	movw	r24, r0
     5e8:	2d 9f       	mul	r18, r29
     5ea:	90 0d       	add	r25, r0
     5ec:	3c 9f       	mul	r19, r28
     5ee:	90 0d       	add	r25, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	84 17       	cp	r24, r20
     5f4:	95 07       	cpc	r25, r21
     5f6:	64 f5       	brge	.+88     	; 0x650 <_Z13secondB_transiii+0xcc>
     5f8:	67 c0       	rjmp	.+206    	; 0x6c8 <_Z13secondB_transiii+0x144>
     5fa:	82 31       	cpi	r24, 0x12	; 18
     5fc:	91 05       	cpc	r25, r1
     5fe:	59 f4       	brne	.+22     	; 0x616 <_Z13secondB_transiii+0x92>
     600:	9b 01       	movw	r18, r22
     602:	24 1b       	sub	r18, r20
     604:	35 0b       	sbc	r19, r21
     606:	80 91 95 03 	lds	r24, 0x0395
     60a:	90 91 96 03 	lds	r25, 0x0396
     60e:	82 17       	cp	r24, r18
     610:	93 07       	cpc	r25, r19
     612:	ac f5       	brge	.+106    	; 0x67e <_Z13secondB_transiii+0xfa>
     614:	59 c0       	rjmp	.+178    	; 0x6c8 <_Z13secondB_transiii+0x144>
     616:	e3 31       	cpi	r30, 0x13	; 19
     618:	f1 05       	cpc	r31, r1
     61a:	b9 f4       	brne	.+46     	; 0x64a <_Z13secondB_transiii+0xc6>
     61c:	ab 01       	movw	r20, r22
     61e:	4a 1b       	sub	r20, r26
     620:	5b 0b       	sbc	r21, r27
     622:	20 91 af 03 	lds	r18, 0x03AF
     626:	30 91 b0 03 	lds	r19, 0x03B0
     62a:	80 91 a7 03 	lds	r24, 0x03A7
     62e:	90 91 a8 03 	lds	r25, 0x03A8
     632:	ec 01       	movw	r28, r24
     634:	2c 9f       	mul	r18, r28
     636:	c0 01       	movw	r24, r0
     638:	2d 9f       	mul	r18, r29
     63a:	90 0d       	add	r25, r0
     63c:	3c 9f       	mul	r19, r28
     63e:	90 0d       	add	r25, r0
     640:	11 24       	eor	r1, r1
     642:	84 17       	cp	r24, r20
     644:	95 07       	cpc	r25, r21
     646:	34 f5       	brge	.+76     	; 0x694 <_Z13secondB_transiii+0x110>
     648:	3f c0       	rjmp	.+126    	; 0x6c8 <_Z13secondB_transiii+0x144>
     64a:	e4 31       	cpi	r30, 0x14	; 20
     64c:	f1 05       	cpc	r31, r1
     64e:	d1 f0       	breq	.+52     	; 0x684 <_Z13secondB_transiii+0x100>
     650:	e5 31       	cpi	r30, 0x15	; 21
     652:	f1 05       	cpc	r31, r1
     654:	a1 f4       	brne	.+40     	; 0x67e <_Z13secondB_transiii+0xfa>
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	6a 1b       	sub	r22, r26
     65a:	7b 0b       	sbc	r23, r27
     65c:	80 91 af 03 	lds	r24, 0x03AF
     660:	90 91 b0 03 	lds	r25, 0x03B0
     664:	20 91 a7 03 	lds	r18, 0x03A7
     668:	30 91 a8 03 	lds	r19, 0x03A8
     66c:	fc 01       	movw	r30, r24
     66e:	e2 9f       	mul	r30, r18
     670:	c0 01       	movw	r24, r0
     672:	e3 9f       	mul	r30, r19
     674:	90 0d       	add	r25, r0
     676:	f2 9f       	mul	r31, r18
     678:	90 0d       	add	r25, r0
     67a:	11 24       	eor	r1, r1
     67c:	22 c0       	rjmp	.+68     	; 0x6c2 <_Z13secondB_transiii+0x13e>
     67e:	e6 31       	cpi	r30, 0x16	; 22
     680:	f1 05       	cpc	r31, r1
     682:	41 f4       	brne	.+16     	; 0x694 <_Z13secondB_transiii+0x110>
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	6a 1b       	sub	r22, r26
     688:	7b 0b       	sbc	r23, r27
     68a:	80 91 95 03 	lds	r24, 0x0395
     68e:	90 91 96 03 	lds	r25, 0x0396
     692:	17 c0       	rjmp	.+46     	; 0x6c2 <_Z13secondB_transiii+0x13e>
     694:	77 97       	sbiw	r30, 0x17	; 23
     696:	11 f0       	breq	.+4      	; 0x69c <_Z13secondB_transiii+0x118>
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	17 c0       	rjmp	.+46     	; 0x6ca <_Z13secondB_transiii+0x146>
     69c:	40 e0       	ldi	r20, 0x00	; 0
     69e:	6a 1b       	sub	r22, r26
     6a0:	7b 0b       	sbc	r23, r27
     6a2:	80 91 bb 03 	lds	r24, 0x03BB
     6a6:	90 91 bc 03 	lds	r25, 0x03BC
     6aa:	20 91 a7 03 	lds	r18, 0x03A7
     6ae:	30 91 a8 03 	lds	r19, 0x03A8
     6b2:	ec 01       	movw	r28, r24
     6b4:	c2 9f       	mul	r28, r18
     6b6:	c0 01       	movw	r24, r0
     6b8:	c3 9f       	mul	r28, r19
     6ba:	90 0d       	add	r25, r0
     6bc:	d2 9f       	mul	r29, r18
     6be:	90 0d       	add	r25, r0
     6c0:	11 24       	eor	r1, r1
     6c2:	86 17       	cp	r24, r22
     6c4:	97 07       	cpc	r25, r23
     6c6:	0c f4       	brge	.+2      	; 0x6ca <_Z13secondB_transiii+0x146>
     6c8:	41 e0       	ldi	r20, 0x01	; 1
}
     6ca:	84 2f       	mov	r24, r20
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <_Z9dry_transiiii>:

bool dry_trans(int state, int counter, int counterRef, int counterRefFive){
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	fc 01       	movw	r30, r24
     6d8:	da 01       	movw	r26, r20
	//Had references to counterRef26, 30...not used in any transitions, though...unecessary?  replaced with counterRef - don't know how it will work
	return((state == D1START && counter - counterRef > kWait)||(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate)||(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/)||(state == D2START && counter - counterRefFive > mWait)||(state == D2RAISE && counter - counterRef > pWait)||(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate)||(state == D2STOP && counter - counterRef > totalStepLength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/)||(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/)||(state == FIXH && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/)||(state == LOWERL3 && counter - counterRef > pWait)||(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate));
     6da:	88 31       	cpi	r24, 0x18	; 24
     6dc:	91 05       	cpc	r25, r1
     6de:	61 f4       	brne	.+24     	; 0x6f8 <_Z9dry_transiiii+0x26>
     6e0:	9b 01       	movw	r18, r22
     6e2:	24 1b       	sub	r18, r20
     6e4:	35 0b       	sbc	r19, r21
     6e6:	80 91 99 03 	lds	r24, 0x0399
     6ea:	90 91 9a 03 	lds	r25, 0x039A
     6ee:	82 17       	cp	r24, r18
     6f0:	93 07       	cpc	r25, r19
     6f2:	0c f0       	brlt	.+2      	; 0x6f6 <_Z9dry_transiiii+0x24>
     6f4:	45 c0       	rjmp	.+138    	; 0x780 <_Z9dry_transiiii+0xae>
     6f6:	ce c0       	rjmp	.+412    	; 0x894 <_Z9dry_transiiii+0x1c2>
     6f8:	89 31       	cpi	r24, 0x19	; 25
     6fa:	91 05       	cpc	r25, r1
     6fc:	b9 f4       	brne	.+46     	; 0x72c <_Z9dry_transiiii+0x5a>
     6fe:	ab 01       	movw	r20, r22
     700:	4a 1b       	sub	r20, r26
     702:	5b 0b       	sbc	r21, r27
     704:	20 91 b1 03 	lds	r18, 0x03B1
     708:	30 91 b2 03 	lds	r19, 0x03B2
     70c:	80 91 a7 03 	lds	r24, 0x03A7
     710:	90 91 a8 03 	lds	r25, 0x03A8
     714:	ec 01       	movw	r28, r24
     716:	2c 9f       	mul	r18, r28
     718:	c0 01       	movw	r24, r0
     71a:	2d 9f       	mul	r18, r29
     71c:	90 0d       	add	r25, r0
     71e:	3c 9f       	mul	r19, r28
     720:	90 0d       	add	r25, r0
     722:	11 24       	eor	r1, r1
     724:	84 17       	cp	r24, r20
     726:	95 07       	cpc	r25, r21
     728:	d4 f5       	brge	.+116    	; 0x79e <_Z9dry_transiiii+0xcc>
     72a:	b4 c0       	rjmp	.+360    	; 0x894 <_Z9dry_transiiii+0x1c2>
     72c:	8a 31       	cpi	r24, 0x1A	; 26
     72e:	91 05       	cpc	r25, r1
     730:	b9 f4       	brne	.+46     	; 0x760 <_Z9dry_transiiii+0x8e>
     732:	ab 01       	movw	r20, r22
     734:	4a 1b       	sub	r20, r26
     736:	5b 0b       	sbc	r21, r27
     738:	20 91 bd 03 	lds	r18, 0x03BD
     73c:	30 91 be 03 	lds	r19, 0x03BE
     740:	80 91 a7 03 	lds	r24, 0x03A7
     744:	90 91 a8 03 	lds	r25, 0x03A8
     748:	ec 01       	movw	r28, r24
     74a:	2c 9f       	mul	r18, r28
     74c:	c0 01       	movw	r24, r0
     74e:	2d 9f       	mul	r18, r29
     750:	90 0d       	add	r25, r0
     752:	3c 9f       	mul	r19, r28
     754:	90 0d       	add	r25, r0
     756:	11 24       	eor	r1, r1
     758:	84 17       	cp	r24, r20
     75a:	95 07       	cpc	r25, r21
     75c:	d4 f5       	brge	.+116    	; 0x7d2 <_Z9dry_transiiii+0x100>
     75e:	9a c0       	rjmp	.+308    	; 0x894 <_Z9dry_transiiii+0x1c2>
     760:	8b 31       	cpi	r24, 0x1B	; 27
     762:	91 05       	cpc	r25, r1
     764:	69 f4       	brne	.+26     	; 0x780 <_Z9dry_transiiii+0xae>
     766:	cb 01       	movw	r24, r22
     768:	82 1b       	sub	r24, r18
     76a:	93 0b       	sbc	r25, r19
     76c:	9c 01       	movw	r18, r24
     76e:	80 91 97 03 	lds	r24, 0x0397
     772:	90 91 98 03 	lds	r25, 0x0398
     776:	82 17       	cp	r24, r18
     778:	93 07       	cpc	r25, r19
     77a:	0c f0       	brlt	.+2      	; 0x77e <_Z9dry_transiiii+0xac>
     77c:	44 c0       	rjmp	.+136    	; 0x806 <_Z9dry_transiiii+0x134>
     77e:	8a c0       	rjmp	.+276    	; 0x894 <_Z9dry_transiiii+0x1c2>
     780:	ec 31       	cpi	r30, 0x1C	; 28
     782:	f1 05       	cpc	r31, r1
     784:	61 f4       	brne	.+24     	; 0x79e <_Z9dry_transiiii+0xcc>
     786:	9b 01       	movw	r18, r22
     788:	2a 1b       	sub	r18, r26
     78a:	3b 0b       	sbc	r19, r27
     78c:	80 91 95 03 	lds	r24, 0x0395
     790:	90 91 96 03 	lds	r25, 0x0396
     794:	82 17       	cp	r24, r18
     796:	93 07       	cpc	r25, r19
     798:	0c f0       	brlt	.+2      	; 0x79c <_Z9dry_transiiii+0xca>
     79a:	40 c0       	rjmp	.+128    	; 0x81c <_Z9dry_transiiii+0x14a>
     79c:	7b c0       	rjmp	.+246    	; 0x894 <_Z9dry_transiiii+0x1c2>
     79e:	ed 31       	cpi	r30, 0x1D	; 29
     7a0:	f1 05       	cpc	r31, r1
     7a2:	b9 f4       	brne	.+46     	; 0x7d2 <_Z9dry_transiiii+0x100>
     7a4:	ab 01       	movw	r20, r22
     7a6:	4a 1b       	sub	r20, r26
     7a8:	5b 0b       	sbc	r21, r27
     7aa:	20 91 b1 03 	lds	r18, 0x03B1
     7ae:	30 91 b2 03 	lds	r19, 0x03B2
     7b2:	80 91 a7 03 	lds	r24, 0x03A7
     7b6:	90 91 a8 03 	lds	r25, 0x03A8
     7ba:	ec 01       	movw	r28, r24
     7bc:	2c 9f       	mul	r18, r28
     7be:	c0 01       	movw	r24, r0
     7c0:	2d 9f       	mul	r18, r29
     7c2:	90 0d       	add	r25, r0
     7c4:	3c 9f       	mul	r19, r28
     7c6:	90 0d       	add	r25, r0
     7c8:	11 24       	eor	r1, r1
     7ca:	84 17       	cp	r24, r20
     7cc:	95 07       	cpc	r25, r21
     7ce:	ec f5       	brge	.+122    	; 0x84a <_Z9dry_transiiii+0x178>
     7d0:	61 c0       	rjmp	.+194    	; 0x894 <_Z9dry_transiiii+0x1c2>
     7d2:	ee 31       	cpi	r30, 0x1E	; 30
     7d4:	f1 05       	cpc	r31, r1
     7d6:	b9 f4       	brne	.+46     	; 0x806 <_Z9dry_transiiii+0x134>
     7d8:	ab 01       	movw	r20, r22
     7da:	4a 1b       	sub	r20, r26
     7dc:	5b 0b       	sbc	r21, r27
     7de:	20 91 bf 03 	lds	r18, 0x03BF
     7e2:	30 91 c0 03 	lds	r19, 0x03C0
     7e6:	80 91 a7 03 	lds	r24, 0x03A7
     7ea:	90 91 a8 03 	lds	r25, 0x03A8
     7ee:	ec 01       	movw	r28, r24
     7f0:	2c 9f       	mul	r18, r28
     7f2:	c0 01       	movw	r24, r0
     7f4:	2d 9f       	mul	r18, r29
     7f6:	90 0d       	add	r25, r0
     7f8:	3c 9f       	mul	r19, r28
     7fa:	90 0d       	add	r25, r0
     7fc:	11 24       	eor	r1, r1
     7fe:	84 17       	cp	r24, r20
     800:	95 07       	cpc	r25, r21
     802:	74 f5       	brge	.+92     	; 0x860 <_Z9dry_transiiii+0x18e>
     804:	47 c0       	rjmp	.+142    	; 0x894 <_Z9dry_transiiii+0x1c2>
     806:	ef 31       	cpi	r30, 0x1F	; 31
     808:	f1 05       	cpc	r31, r1
     80a:	41 f4       	brne	.+16     	; 0x81c <_Z9dry_transiiii+0x14a>
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	6a 1b       	sub	r22, r26
     810:	7b 0b       	sbc	r23, r27
     812:	69 5e       	subi	r22, 0xE9	; 233
     814:	73 40       	sbci	r23, 0x03	; 3
     816:	0c f4       	brge	.+2      	; 0x81a <_Z9dry_transiiii+0x148>
     818:	3e c0       	rjmp	.+124    	; 0x896 <_Z9dry_transiiii+0x1c4>
     81a:	3c c0       	rjmp	.+120    	; 0x894 <_Z9dry_transiiii+0x1c2>
     81c:	e0 32       	cpi	r30, 0x20	; 32
     81e:	f1 05       	cpc	r31, r1
     820:	a1 f4       	brne	.+40     	; 0x84a <_Z9dry_transiiii+0x178>
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	6a 1b       	sub	r22, r26
     826:	7b 0b       	sbc	r23, r27
     828:	80 91 b5 03 	lds	r24, 0x03B5
     82c:	90 91 b6 03 	lds	r25, 0x03B6
     830:	20 91 a7 03 	lds	r18, 0x03A7
     834:	30 91 a8 03 	lds	r19, 0x03A8
     838:	ec 01       	movw	r28, r24
     83a:	c2 9f       	mul	r28, r18
     83c:	c0 01       	movw	r24, r0
     83e:	c3 9f       	mul	r28, r19
     840:	90 0d       	add	r25, r0
     842:	d2 9f       	mul	r29, r18
     844:	90 0d       	add	r25, r0
     846:	11 24       	eor	r1, r1
     848:	22 c0       	rjmp	.+68     	; 0x88e <_Z9dry_transiiii+0x1bc>
     84a:	e1 32       	cpi	r30, 0x21	; 33
     84c:	f1 05       	cpc	r31, r1
     84e:	41 f4       	brne	.+16     	; 0x860 <_Z9dry_transiiii+0x18e>
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	6a 1b       	sub	r22, r26
     854:	7b 0b       	sbc	r23, r27
     856:	80 91 95 03 	lds	r24, 0x0395
     85a:	90 91 96 03 	lds	r25, 0x0396
     85e:	17 c0       	rjmp	.+46     	; 0x88e <_Z9dry_transiiii+0x1bc>
     860:	b2 97       	sbiw	r30, 0x22	; 34
     862:	11 f0       	breq	.+4      	; 0x868 <_Z9dry_transiiii+0x196>
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	17 c0       	rjmp	.+46     	; 0x896 <_Z9dry_transiiii+0x1c4>
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	6a 1b       	sub	r22, r26
     86c:	7b 0b       	sbc	r23, r27
     86e:	80 91 b3 03 	lds	r24, 0x03B3
     872:	90 91 b4 03 	lds	r25, 0x03B4
     876:	20 91 a5 03 	lds	r18, 0x03A5
     87a:	30 91 a6 03 	lds	r19, 0x03A6
     87e:	fc 01       	movw	r30, r24
     880:	e2 9f       	mul	r30, r18
     882:	c0 01       	movw	r24, r0
     884:	e3 9f       	mul	r30, r19
     886:	90 0d       	add	r25, r0
     888:	f2 9f       	mul	r31, r18
     88a:	90 0d       	add	r25, r0
     88c:	11 24       	eor	r1, r1
     88e:	86 17       	cp	r24, r22
     890:	97 07       	cpc	r25, r23
     892:	0c f4       	brge	.+2      	; 0x896 <_Z9dry_transiiii+0x1c4>
     894:	41 e0       	ldi	r20, 0x01	; 1
}
     896:	84 2f       	mov	r24, r20
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <_Z11init_actioniiPiS_S_S_S_S_>:
	i2c_write(u_outputByte0.outputByte0);
	i2c_write(u_outputByte1.outputByte1);
	i2c_stop();
}

void init_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor, int *pprint0){
     89e:	af 92       	push	r10
     8a0:	bf 92       	push	r11
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	ea 01       	movw	r28, r20
     8a8:	f9 01       	movw	r30, r18
	switch(state){
     8aa:	83 30       	cpi	r24, 0x03	; 3
     8ac:	91 05       	cpc	r25, r1
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <_Z11init_actioniiPiS_S_S_S_S_+0x14>
     8b0:	85 c0       	rjmp	.+266    	; 0x9bc <_Z11init_actioniiPiS_S_S_S_S_+0x11e>
     8b2:	84 30       	cpi	r24, 0x04	; 4
     8b4:	91 05       	cpc	r25, r1
     8b6:	5c f4       	brge	.+22     	; 0x8ce <_Z11init_actioniiPiS_S_S_S_S_+0x30>
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	91 05       	cpc	r25, r1
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <_Z11init_actioniiPiS_S_S_S_S_+0x22>
     8be:	3d c0       	rjmp	.+122    	; 0x93a <_Z11init_actioniiPiS_S_S_S_S_+0x9c>
     8c0:	82 30       	cpi	r24, 0x02	; 2
     8c2:	91 05       	cpc	r25, r1
     8c4:	0c f0       	brlt	.+2      	; 0x8c8 <_Z11init_actioniiPiS_S_S_S_S_+0x2a>
     8c6:	5a c0       	rjmp	.+180    	; 0x97c <_Z11init_actioniiPiS_S_S_S_S_+0xde>
     8c8:	89 2b       	or	r24, r25
     8ca:	69 f0       	breq	.+26     	; 0x8e6 <_Z11init_actioniiPiS_S_S_S_S_+0x48>
     8cc:	85 c0       	rjmp	.+266    	; 0x9d8 <_Z11init_actioniiPiS_S_S_S_S_+0x13a>
     8ce:	85 30       	cpi	r24, 0x05	; 5
     8d0:	91 05       	cpc	r25, r1
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <_Z11init_actioniiPiS_S_S_S_S_+0x38>
     8d4:	6d c0       	rjmp	.+218    	; 0x9b0 <_Z11init_actioniiPiS_S_S_S_S_+0x112>
     8d6:	85 30       	cpi	r24, 0x05	; 5
     8d8:	91 05       	cpc	r25, r1
     8da:	0c f4       	brge	.+2      	; 0x8de <_Z11init_actioniiPiS_S_S_S_S_+0x40>
     8dc:	5c c0       	rjmp	.+184    	; 0x996 <_Z11init_actioniiPiS_S_S_S_S_+0xf8>
     8de:	06 97       	sbiw	r24, 0x06	; 6
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <_Z11init_actioniiPiS_S_S_S_S_+0x46>
     8e2:	7a c0       	rjmp	.+244    	; 0x9d8 <_Z11init_actioniiPiS_S_S_S_S_+0x13a>
     8e4:	6b c0       	rjmp	.+214    	; 0x9bc <_Z11init_actioniiPiS_S_S_S_S_+0x11e>
		case INIT:
			if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
     8e6:	80 91 d2 03 	lds	r24, 0x03D2
     8ea:	90 91 ce 03 	lds	r25, 0x03CE
     8ee:	82 ff       	sbrs	r24, 2
     8f0:	07 c0       	rjmp	.+14     	; 0x900 <_Z11init_actioniiPiS_S_S_S_S_+0x62>
				u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
     8f2:	9f 7e       	andi	r25, 0xEF	; 239
     8f4:	90 93 ce 03 	sts	0x03CE, r25
				u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     8f8:	80 91 d0 03 	lds	r24, 0x03D0
     8fc:	87 7f       	andi	r24, 0xF7	; 247
     8fe:	55 c0       	rjmp	.+170    	; 0x9aa <_Z11init_actioniiPiS_S_S_S_S_+0x10c>
			}
			else{
				u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     900:	9f 7d       	andi	r25, 0xDF	; 223
     902:	90 93 ce 03 	sts	0x03CE, r25
				*pfixtureMotor = 0;
     906:	11 82       	std	Z+1, r1	; 0x01
     908:	10 82       	st	Z, r1
				u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     90a:	80 91 d0 03 	lds	r24, 0x03D0
     90e:	8f 7e       	andi	r24, 0xEF	; 239
				u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     910:	88 60       	ori	r24, 0x08	; 8
     912:	80 93 d0 03 	sts	0x03D0, r24
				if(*pprint0 == 1){
     916:	f5 01       	movw	r30, r10
     918:	80 81       	ld	r24, Z
     91a:	91 81       	ldd	r25, Z+1	; 0x01
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	09 f0       	breq	.+2      	; 0x922 <_Z11init_actioniiPiS_S_S_S_S_+0x84>
     920:	5b c0       	rjmp	.+182    	; 0x9d8 <_Z11init_actioniiPiS_S_S_S_S_+0x13a>
					OrangutanLCD::gotoXY(0,1);
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("PUSH TO START");
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
					*pprint0 = 0;
     932:	f5 01       	movw	r30, r10
     934:	11 82       	std	Z+1, r1	; 0x01
     936:	10 82       	st	Z, r1
     938:	4f c0       	rjmp	.+158    	; 0x9d8 <_Z11init_actioniiPiS_S_S_S_S_+0x13a>
				}
			}
			break;
		case LOAD:
			u_outputByte0.bits_in_outputByte0.ACPower = 0;
     93a:	20 91 d0 03 	lds	r18, 0x03D0
     93e:	32 2f       	mov	r19, r18
     940:	3e 7f       	andi	r19, 0xFE	; 254
			if((counter % 200) < 100){
     942:	cb 01       	movw	r24, r22
     944:	68 ec       	ldi	r22, 0xC8	; 200
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__divmodhi4>
     94c:	84 36       	cpi	r24, 0x64	; 100
     94e:	91 05       	cpc	r25, r1
     950:	24 f4       	brge	.+8      	; 0x95a <_Z11init_actioniiPiS_S_S_S_S_+0xbc>
				u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     952:	2c 7f       	andi	r18, 0xFC	; 252
     954:	20 93 d0 03 	sts	0x03D0, r18
     958:	03 c0       	rjmp	.+6      	; 0x960 <_Z11init_actioniiPiS_S_S_S_S_+0xc2>
			}
			else{
				u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     95a:	32 60       	ori	r19, 0x02	; 2
     95c:	30 93 d0 03 	sts	0x03D0, r19
			}
			*pplateLoadMotor = 1;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	99 83       	std	Y+1, r25	; 0x01
     966:	88 83       	st	Y, r24
			u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
     968:	80 91 ce 03 	lds	r24, 0x03CE
     96c:	8d 7f       	andi	r24, 0xFD	; 253
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     96e:	84 60       	ori	r24, 0x04	; 4
     970:	80 93 ce 03 	sts	0x03CE, r24
			u_outputByte0.bits_in_outputByte0.plateStop = 0;
     974:	80 91 d0 03 	lds	r24, 0x03D0
     978:	8b 7f       	andi	r24, 0xFB	; 251
     97a:	17 c0       	rjmp	.+46     	; 0x9aa <_Z11init_actioniiPiS_S_S_S_S_+0x10c>
			break;
		case RAISEL1:
			u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     97c:	80 91 d0 03 	lds	r24, 0x03D0
			u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
			u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     980:	81 7e       	andi	r24, 0xE1	; 225
			u_outputByte0.bits_in_outputByte0.plateStop = 1;
     982:	86 61       	ori	r24, 0x16	; 22
     984:	80 93 d0 03 	sts	0x03D0, r24
			*pplateLoadMotor = 0;
     988:	19 82       	std	Y+1, r1	; 0x01
     98a:	18 82       	st	Y, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     98c:	80 91 ce 03 	lds	r24, 0x03CE
     990:	80 62       	ori	r24, 0x20	; 32
			u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
     992:	8b 7f       	andi	r24, 0xFB	; 251
     994:	1f c0       	rjmp	.+62     	; 0x9d4 <_Z11init_actioniiPiS_S_S_S_S_+0x136>
		case FIXL:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		case LOWERL1:
			*pfixtureMotor = 0;
     996:	11 82       	std	Z+1, r1	; 0x01
     998:	10 82       	st	Z, r1
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     99a:	80 91 ce 03 	lds	r24, 0x03CE
     99e:	8f 7d       	andi	r24, 0xDF	; 223
     9a0:	80 93 ce 03 	sts	0x03CE, r24
			u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     9a4:	80 91 d0 03 	lds	r24, 0x03D0
     9a8:	88 60       	ori	r24, 0x08	; 8
     9aa:	80 93 d0 03 	sts	0x03D0, r24
     9ae:	14 c0       	rjmp	.+40     	; 0x9d8 <_Z11init_actioniiPiS_S_S_S_S_+0x13a>
			break;
		case LOWERL2:
			u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     9b0:	80 91 d0 03 	lds	r24, 0x03D0
     9b4:	8f 7e       	andi	r24, 0xEF	; 239
     9b6:	80 93 d0 03 	sts	0x03D0, r24
     9ba:	09 c0       	rjmp	.+18     	; 0x9ce <_Z11init_actioniiPiS_S_S_S_S_+0x130>
			u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			break;
		//*********************************************
		case MOVEC1:
			u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
     9bc:	80 91 ce 03 	lds	r24, 0x03CE
     9c0:	80 61       	ori	r24, 0x10	; 16
     9c2:	80 93 ce 03 	sts	0x03CE, r24
			*pfixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	91 83       	std	Z+1, r25	; 0x01
     9cc:	80 83       	st	Z, r24
     9ce:	80 91 ce 03 	lds	r24, 0x03CE
     9d2:	80 62       	ori	r24, 0x20	; 32
     9d4:	80 93 ce 03 	sts	0x03CE, r24
			break;
	}
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	bf 90       	pop	r11
     9de:	af 90       	pop	r10
     9e0:	08 95       	ret

000009e2 <_Z15motor_and_writeiiiiiiii>:
	OrangutanLCD::print("END");
	}
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor)
     9e2:	6f 92       	push	r6
     9e4:	7f 92       	push	r7
     9e6:	8f 92       	push	r8
     9e8:	9f 92       	push	r9
     9ea:	af 92       	push	r10
     9ec:	bf 92       	push	r11
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	4c 01       	movw	r8, r24
     a00:	3a 01       	movw	r6, r20
     a02:	e9 01       	movw	r28, r18
{
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     a04:	fc 01       	movw	r30, r24
     a06:	e6 1b       	sub	r30, r22
     a08:	f7 0b       	sbc	r31, r23
     a0a:	60 91 a5 03 	lds	r22, 0x03A5
     a0e:	70 91 a6 03 	lds	r23, 0x03A6
     a12:	cf 01       	movw	r24, r30
     a14:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__divmodhi4>
     a18:	20 91 9b 03 	lds	r18, 0x039B
     a1c:	30 91 9c 03 	lds	r19, 0x039C
     a20:	82 17       	cp	r24, r18
     a22:	93 07       	cpc	r25, r19
     a24:	34 f4       	brge	.+12     	; 0xa32 <_Z15motor_and_writeiiiiiiii+0x50>
     a26:	cd 2b       	or	r28, r29
     a28:	21 f0       	breq	.+8      	; 0xa32 <_Z15motor_and_writeiiiiiiii+0x50>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     a2a:	80 91 ce 03 	lds	r24, 0x03CE
     a2e:	81 60       	ori	r24, 0x01	; 1
     a30:	03 c0       	rjmp	.+6      	; 0xa38 <_Z15motor_and_writeiiiiiiii+0x56>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     a32:	80 91 ce 03 	lds	r24, 0x03CE
     a36:	8e 7f       	andi	r24, 0xFE	; 254
     a38:	80 93 ce 03 	sts	0x03CE, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     a3c:	60 91 a7 03 	lds	r22, 0x03A7
     a40:	70 91 a8 03 	lds	r23, 0x03A8
     a44:	cf 01       	movw	r24, r30
     a46:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__divmodhi4>
     a4a:	20 91 9d 03 	lds	r18, 0x039D
     a4e:	30 91 9e 03 	lds	r19, 0x039E
     a52:	82 17       	cp	r24, r18
     a54:	93 07       	cpc	r25, r19
     a56:	34 f4       	brge	.+12     	; 0xa64 <_Z15motor_and_writeiiiiiiii+0x82>
     a58:	01 2b       	or	r16, r17
     a5a:	21 f0       	breq	.+8      	; 0xa64 <_Z15motor_and_writeiiiiiiii+0x82>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     a5c:	80 91 ce 03 	lds	r24, 0x03CE
     a60:	88 60       	ori	r24, 0x08	; 8
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <_Z15motor_and_writeiiiiiiii+0x88>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     a64:	80 91 ce 03 	lds	r24, 0x03CE
     a68:	87 7f       	andi	r24, 0xF7	; 247
     a6a:	80 93 ce 03 	sts	0x03CE, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     a6e:	60 91 a9 03 	lds	r22, 0x03A9
     a72:	70 91 aa 03 	lds	r23, 0x03AA
     a76:	cf 01       	movw	r24, r30
     a78:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__divmodhi4>
     a7c:	20 91 9f 03 	lds	r18, 0x039F
     a80:	30 91 a0 03 	lds	r19, 0x03A0
     a84:	82 17       	cp	r24, r18
     a86:	93 07       	cpc	r25, r19
     a88:	34 f4       	brge	.+12     	; 0xa96 <_Z15motor_and_writeiiiiiiii+0xb4>
     a8a:	ef 28       	or	r14, r15
     a8c:	21 f0       	breq	.+8      	; 0xa96 <_Z15motor_and_writeiiiiiiii+0xb4>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     a8e:	80 91 ce 03 	lds	r24, 0x03CE
     a92:	80 64       	ori	r24, 0x40	; 64
     a94:	03 c0       	rjmp	.+6      	; 0xa9c <_Z15motor_and_writeiiiiiiii+0xba>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     a96:	80 91 ce 03 	lds	r24, 0x03CE
     a9a:	8f 7b       	andi	r24, 0xBF	; 191
     a9c:	80 93 ce 03 	sts	0x03CE, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     aa0:	60 91 ab 03 	lds	r22, 0x03AB
     aa4:	70 91 ac 03 	lds	r23, 0x03AC
     aa8:	cf 01       	movw	r24, r30
     aaa:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__divmodhi4>
     aae:	20 91 a1 03 	lds	r18, 0x03A1
     ab2:	30 91 a2 03 	lds	r19, 0x03A2
     ab6:	82 17       	cp	r24, r18
     ab8:	93 07       	cpc	r25, r19
     aba:	34 f4       	brge	.+12     	; 0xac8 <_Z15motor_and_writeiiiiiiii+0xe6>
     abc:	cd 28       	or	r12, r13
     abe:	21 f0       	breq	.+8      	; 0xac8 <_Z15motor_and_writeiiiiiiii+0xe6>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     ac0:	80 91 cf 03 	lds	r24, 0x03CF
     ac4:	82 60       	ori	r24, 0x02	; 2
     ac6:	03 c0       	rjmp	.+6      	; 0xace <_Z15motor_and_writeiiiiiiii+0xec>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     ac8:	80 91 cf 03 	lds	r24, 0x03CF
     acc:	8d 7f       	andi	r24, 0xFD	; 253
     ace:	80 93 cf 03 	sts	0x03CF, r24
	}

	if( ((counter - counterRefFive) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     ad2:	60 91 ad 03 	lds	r22, 0x03AD
     ad6:	70 91 ae 03 	lds	r23, 0x03AE
     ada:	c4 01       	movw	r24, r8
     adc:	86 19       	sub	r24, r6
     ade:	97 09       	sbc	r25, r7
     ae0:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__divmodhi4>
     ae4:	20 91 a3 03 	lds	r18, 0x03A3
     ae8:	30 91 a4 03 	lds	r19, 0x03A4
     aec:	82 17       	cp	r24, r18
     aee:	93 07       	cpc	r25, r19
     af0:	34 f4       	brge	.+12     	; 0xafe <_Z15motor_and_writeiiiiiiii+0x11c>
     af2:	ab 28       	or	r10, r11
     af4:	21 f0       	breq	.+8      	; 0xafe <_Z15motor_and_writeiiiiiiii+0x11c>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     af6:	80 91 cf 03 	lds	r24, 0x03CF
     afa:	80 61       	ori	r24, 0x10	; 16
     afc:	03 c0       	rjmp	.+6      	; 0xb04 <_Z15motor_and_writeiiiiiiii+0x122>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     afe:	80 91 cf 03 	lds	r24, 0x03CF
     b02:	8f 7e       	andi	r24, 0xEF	; 239
     b04:	80 93 cf 03 	sts	0x03CF, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     b08:	80 e4       	ldi	r24, 0x40	; 64
     b0a:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
	i2c_write(0x2);									// write command byte
     b0e:	82 e0       	ldi	r24, 0x02	; 2
     b10:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     b14:	80 91 ce 03 	lds	r24, 0x03CE
     b18:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     b1c:	80 91 cf 03 	lds	r24, 0x03CF
     b20:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
	i2c_stop();                            // set stop conditon = release bus
     b24:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>

	i2c_start(I2C2+I2C_WRITE);
     b28:	82 e4       	ldi	r24, 0x42	; 66
     b2a:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
	i2c_write(0x2);
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
	i2c_write(u_outputByte0.outputByte0);
     b34:	80 91 d0 03 	lds	r24, 0x03D0
     b38:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
	i2c_write(u_outputByte1.outputByte1);
     b3c:	80 91 d1 03 	lds	r24, 0x03D1
     b40:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
	i2c_stop();
     b44:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>
}
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	ff 90       	pop	r15
     b52:	ef 90       	pop	r14
     b54:	df 90       	pop	r13
     b56:	cf 90       	pop	r12
     b58:	bf 90       	pop	r11
     b5a:	af 90       	pop	r10
     b5c:	9f 90       	pop	r9
     b5e:	8f 90       	pop	r8
     b60:	7f 90       	pop	r7
     b62:	6f 90       	pop	r6
     b64:	08 95       	ret

00000b66 <main>:

void brush2_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor);

void dry_action(int state, int counter, int *pplateLoadMotor, int *pfixtureMotor, int *pbrush1Motor, int *pbrush2Motor, int *ppaperTowelMotor);

int main()   
     b66:	2f 92       	push	r2
     b68:	3f 92       	push	r3
     b6a:	4f 92       	push	r4
     b6c:	5f 92       	push	r5
     b6e:	6f 92       	push	r6
     b70:	7f 92       	push	r7
     b72:	8f 92       	push	r8
     b74:	9f 92       	push	r9
     b76:	af 92       	push	r10
     b78:	bf 92       	push	r11
     b7a:	cf 92       	push	r12
     b7c:	df 92       	push	r13
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	c2 54       	subi	r28, 0x42	; 66
     b90:	d0 40       	sbci	r29, 0x00	; 0
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
	//the ones with numbers correspond to run mode states, and Five refers to motor 5 (paper towel roller)
	counterRef = 0;
	counterRefFive = 0;
		
	//holds wait times for various actions in ms
	pWait = 100;
     b9c:	84 e6       	ldi	r24, 0x64	; 100
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	90 93 96 03 	sts	0x0396, r25
     ba4:	80 93 95 03 	sts	0x0395, r24
	mWait = 100;
     ba8:	90 93 98 03 	sts	0x0398, r25
     bac:	80 93 97 03 	sts	0x0397, r24
	kWait = 100;
     bb0:	90 93 9a 03 	sts	0x039A, r25
     bb4:	80 93 99 03 	sts	0x0399, r24

	//hold the length of the high and high-low periods for the various motors - this controls their speed
	highLength1 = 1;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	90 93 9c 03 	sts	0x039C, r25
     bc0:	80 93 9b 03 	sts	0x039B, r24
	highLength2 = 1;
     bc4:	90 93 9e 03 	sts	0x039E, r25
     bc8:	80 93 9d 03 	sts	0x039D, r24
	highLength3 = 1;
     bcc:	90 93 a0 03 	sts	0x03A0, r25
     bd0:	80 93 9f 03 	sts	0x039F, r24
	highLength4 = 1;
     bd4:	90 93 a2 03 	sts	0x03A2, r25
     bd8:	80 93 a1 03 	sts	0x03A1, r24
	highLength5 = 1;
     bdc:	90 93 a4 03 	sts	0x03A4, r25
     be0:	80 93 a3 03 	sts	0x03A3, r24
	totalStepLength1 = 2;
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	90 93 a6 03 	sts	0x03A6, r25
     bec:	80 93 a5 03 	sts	0x03A5, r24
	totalStepLength2 = 2;
     bf0:	90 93 a8 03 	sts	0x03A8, r25
     bf4:	80 93 a7 03 	sts	0x03A7, r24
	totalStepLength3 = 2;
     bf8:	90 93 aa 03 	sts	0x03AA, r25
     bfc:	80 93 a9 03 	sts	0x03A9, r24
	totalStepLength4 = 2;
     c00:	90 93 ac 03 	sts	0x03AC, r25
     c04:	80 93 ab 03 	sts	0x03AB, r24
	totalStepLength5 = 2;
     c08:	90 93 ae 03 	sts	0x03AE, r25
     c0c:	80 93 ad 03 	sts	0x03AD, r24
	print35 = 1;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     c10:	1a 82       	std	Y+2, r1	; 0x02
     c12:	19 82       	std	Y+1, r1	; 0x01
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     c14:	10 92 ce 03 	sts	0x03CE, r1
	u_motorByte1.motorByte1 = 0;  // initialize motorByte1
     c18:	10 92 cf 03 	sts	0x03CF, r1
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	80 93 d0 03 	sts	0x03D0, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
     c22:	80 93 d1 03 	sts	0x03D1, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
     c26:	10 92 d2 03 	sts	0x03D2, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
     c2a:	10 92 d3 03 	sts	0x03D3, r1
	
	OrangutanLCD::clear();
     c2e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("DASCH CLEANER 2");
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
	OrangutanLCD::gotoXY(0,1);
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
	OrangutanLCD::print("REV: 29");
     c42:	8e e1       	ldi	r24, 0x1E	; 30
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
// another C++ file.
inline unsigned long get_ms() { return OrangutanTime::ms(); }
inline unsigned long millis() { return OrangutanTime::ms(); }

inline void delay(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
inline void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
     c4a:	80 ed       	ldi	r24, 0xD0	; 208
     c4c:	97 e0       	ldi	r25, 0x07	; 7
     c4e:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>
	delay_ms(2000);
	
	OrangutanLCD::clear();
     c52:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("BEGIN ");
     c56:	86 e2       	ldi	r24, 0x26	; 38
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
     c5e:	88 ee       	ldi	r24, 0xE8	; 232
     c60:	93 e0       	ldi	r25, 0x03	; 3
     c62:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>
	
	delay_ms(1000);

    i2c_init();                                // init I2C interface
     c66:	0e 94 71 14 	call	0x28e2	; 0x28e2 <_Z8i2c_initv>
	
    OrangutanLCD::print("INIT ");
     c6a:	8d e2       	ldi	r24, 0x2D	; 45
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
     c72:	80 e4       	ldi	r24, 0x40	; 64
     c74:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
     c78:	c8 2e       	mov	r12, r24
	i2c_stop();
     c7a:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
     c7e:	82 e4       	ldi	r24, 0x42	; 66
     c80:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
     c84:	08 2f       	mov	r16, r24
	i2c_stop();
     c86:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
     c8a:	84 e4       	ldi	r24, 0x44	; 68
     c8c:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
     c90:	e8 2e       	mov	r14, r24
	i2c_stop();
     c92:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>
    
	OrangutanLCD::clear();
     c96:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("START ");
     c9a:	83 e3       	ldi	r24, 0x33	; 51
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
     ca2:	10 e0       	ldi	r17, 0x00	; 0
     ca4:	dd 24       	eor	r13, r13
     ca6:	0c 29       	or	r16, r12
     ca8:	1d 29       	or	r17, r13
     caa:	ff 24       	eor	r15, r15
     cac:	0e 29       	or	r16, r14
     cae:	1f 29       	or	r17, r15
     cb0:	01 2b       	or	r16, r17
     cb2:	61 f0       	breq	.+24     	; 0xccc <main+0x166>
        /* failed to issue start condition(s), possibly no device found */
        
		OrangutanLCD::print("NAK ");
     cb4:	8a e3       	ldi	r24, 0x3A	; 58
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
		i2c_stop();
     cbc:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>
		OrangutanLCD::print("STOP ");
     cc0:	8f e3       	ldi	r24, 0x3F	; 63
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
     cc8:	0c 94 42 14 	jmp	0x2884	; 0x2884 <main+0x1d1e>
    }
	else {
		OrangutanLCD::print("ACK ");
     ccc:	85 e4       	ldi	r24, 0x45	; 69
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
        /* issuing start conditions ok, devices accessible */
		OrangutanLCD::print("BINIT ");
     cd4:	8a e4       	ldi	r24, 0x4A	; 74
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
     cdc:	80 e4       	ldi	r24, 0x40	; 64
     cde:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
		i2c_write(0x6);
     ce2:	86 e0       	ldi	r24, 0x06	; 6
     ce4:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
		i2c_write(0x0);
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
		i2c_write(0x0);
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
		i2c_stop();
     cf4:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>

		i2c_start(I2C1+I2C_WRITE);
     cf8:	80 e4       	ldi	r24, 0x40	; 64
     cfa:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
		i2c_write(0x2);
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
     d04:	80 91 ce 03 	lds	r24, 0x03CE
     d08:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
     d0c:	80 91 cf 03 	lds	r24, 0x03CF
     d10:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
		i2c_stop();
     d14:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>

		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
     d18:	82 e4       	ldi	r24, 0x42	; 66
     d1a:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
		i2c_write(0x6);
     d1e:	86 e0       	ldi	r24, 0x06	; 6
     d20:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
		i2c_write(0x0);
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
		i2c_write(0x0);
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
		i2c_stop();
     d30:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>

		u_motorByte1.bits_in_motorByte1.enableAll = 0;	//Enables all motor drivers after startup
     d34:	80 91 cf 03 	lds	r24, 0x03CF
     d38:	8f 77       	andi	r24, 0x7F	; 127
     d3a:	80 93 cf 03 	sts	0x03CF, r24
		i2c_start(I2C2+I2C_WRITE);
     d3e:	82 e4       	ldi	r24, 0x42	; 66
     d40:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
		i2c_write(0x2);
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
		i2c_write(u_outputByte0.outputByte0);
     d4a:	80 91 d0 03 	lds	r24, 0x03D0
     d4e:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
		i2c_write(u_outputByte1.outputByte1);
     d52:	80 91 d1 03 	lds	r24, 0x03D1
     d56:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
		i2c_stop();
     d5a:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>
     d5e:	88 ee       	ldi	r24, 0xE8	; 232
     d60:	93 e0       	ldi	r25, 0x03	; 3
     d62:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>
		
		//Registers default to input, so I2C3 is fine already


		delay_ms(1000);
		OrangutanLCD::clear();
     d66:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("SELECT MODE");
     d6a:	81 e5       	ldi	r24, 0x51	; 81
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
     d72:	ee 24       	eor	r14, r14
     d74:	ff 24       	eor	r15, r15
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     d76:	c7 01       	movw	r24, r14
     d78:	be 01       	movw	r22, r28
     d7a:	6f 5f       	subi	r22, 0xFF	; 255
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z15button_debounceiPi>
     d82:	18 2f       	mov	r17, r24
			counter++;
     d84:	08 94       	sec
     d86:	e1 1c       	adc	r14, r1
     d88:	f1 1c       	adc	r15, r1
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		OrangutanLCD::clear();
		OrangutanLCD::print("SELECT MODE");
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
     d92:	11 23       	and	r17, r17
     d94:	81 f3       	breq	.-32     	; 0xd76 <main+0x210>
			counter++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		OrangutanLCD::clear();
     d96:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>


		if(OrangutanDigital::isInputHigh(IO_D3))							//Tests if the switch is set to Maintenance Mode
     d9a:	83 e0       	ldi	r24, 0x03	; 3
     d9c:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     da0:	88 23       	and	r24, r24
     da2:	09 f4       	brne	.+2      	; 0xda6 <main+0x240>
     da4:	6c c4       	rjmp	.+2264   	; 0x167e <main+0xb18>
		{
			OrangutanLCD::print("MAINTENANCE");
     da6:	8d e5       	ldi	r24, 0x5D	; 93
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
     dae:	88 ee       	ldi	r24, 0xE8	; 232
     db0:	93 e0       	ldi	r25, 0x03	; 3
     db2:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>
			
			//initialize
			int print = 0;
			int submode = -1;

			OrangutanLCD::clear();
     db6:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
			OrangutanLCD::print("SELECT SUB");
     dba:	89 e6       	ldi	r24, 0x69	; 105
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
     dc2:	ee 24       	eor	r14, r14
     dc4:	ff 24       	eor	r15, r15
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     dc6:	c7 01       	movw	r24, r14
     dc8:	be 01       	movw	r22, r28
     dca:	6f 5f       	subi	r22, 0xFF	; 255
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z15button_debounceiPi>
     dd2:	18 2f       	mov	r17, r24
				counter++;
     dd4:	08 94       	sec
     dd6:	e1 1c       	adc	r14, r1
     dd8:	f1 1c       	adc	r15, r1
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>

			OrangutanLCD::clear();
			OrangutanLCD::print("SELECT SUB");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
     de2:	11 23       	and	r17, r17
     de4:	81 f3       	breq	.-32     	; 0xdc6 <main+0x260>
				counter++;
				delay_ms(1);
			}
			buttonTriggered = false;
			counter = 0;
			OrangutanLCD::clear();
     de6:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
     dea:	23 96       	adiw	r28, 0x03	; 3
     dec:	1f ae       	std	Y+63, r1	; 0x3f
     dee:	1e ae       	std	Y+62, r1	; 0x3e
     df0:	23 97       	sbiw	r28, 0x03	; 3
     df2:	21 96       	adiw	r28, 0x01	; 1
     df4:	1f ae       	std	Y+63, r1	; 0x3f
     df6:	1e ae       	std	Y+62, r1	; 0x3e
     df8:	21 97       	sbiw	r28, 0x01	; 1
     dfa:	1c ae       	std	Y+60, r1	; 0x3c
     dfc:	1b ae       	std	Y+59, r1	; 0x3b
     dfe:	1a ae       	std	Y+58, r1	; 0x3a
     e00:	19 ae       	std	Y+57, r1	; 0x39
     e02:	66 24       	eor	r6, r6
     e04:	77 24       	eor	r7, r7
     e06:	44 24       	eor	r4, r4
     e08:	55 24       	eor	r5, r5
     e0a:	22 24       	eor	r2, r2
     e0c:	33 24       	eor	r3, r3
     e0e:	88 24       	eor	r8, r8
     e10:	99 24       	eor	r9, r9
     e12:	6f ef       	ldi	r22, 0xFF	; 255
     e14:	7f ef       	ldi	r23, 0xFF	; 255
     e16:	78 ab       	std	Y+48, r23	; 0x30
     e18:	6f a7       	std	Y+47, r22	; 0x2f
     e1a:	1e ae       	std	Y+62, r1	; 0x3e
     e1c:	1d ae       	std	Y+61, r1	; 0x3d
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     e1e:	84 e4       	ldi	r24, 0x44	; 68
     e20:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     e2a:	85 e4       	ldi	r24, 0x45	; 69
     e2c:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     e30:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_Z11i2c_readAckv>
     e34:	80 93 d2 03 	sts	0x03D2, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     e38:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_Z11i2c_readNakv>
     e3c:	80 93 d3 03 	sts	0x03D3, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     e40:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     e44:	c2 01       	movw	r24, r4
     e46:	be 01       	movw	r22, r28
     e48:	6f 5f       	subi	r22, 0xFF	; 255
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255
     e4c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z15button_debounceiPi>
     e50:	08 2f       	mov	r16, r24
							Output 			--     starts testing each output individually and ends after testing all outputs
							Motor			--     starts testing each motor individually and ends after testing all motors
							Multi motor		--     starts testing each the fixture motor with each of the brush motors

				*/
				if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != INPUT){
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     e58:	88 23       	and	r24, r24
     e5a:	11 f0       	breq	.+4      	; 0xe60 <main+0x2fa>
     e5c:	0c 94 48 14 	jmp	0x2890	; 0x2890 <main+0x1d2a>
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     e66:	88 23       	and	r24, r24
     e68:	11 f0       	breq	.+4      	; 0xe6e <main+0x308>
     e6a:	0c 94 48 14 	jmp	0x2890	; 0x2890 <main+0x1d2a>
     e6e:	8f a5       	ldd	r24, Y+47	; 0x2f
     e70:	98 a9       	ldd	r25, Y+48	; 0x30
     e72:	89 2b       	or	r24, r25
     e74:	11 f4       	brne	.+4      	; 0xe7a <main+0x314>
     e76:	0c 94 48 14 	jmp	0x2890	; 0x2890 <main+0x1d2a>
					state = S0;
					submode = INPUT;
					OrangutanLCD::clear();
     e7a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     e7e:	84 e7       	ldi	r24, 0x74	; 116
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	61 e0       	ldi	r22, 0x01	; 1
     e8a:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
     e8e:	66 24       	eor	r6, r6
     e90:	77 24       	eor	r7, r7
     e92:	11 e0       	ldi	r17, 0x01	; 1
     e94:	88 24       	eor	r8, r8
     e96:	99 24       	eor	r9, r9
     e98:	18 aa       	std	Y+48, r1	; 0x30
     e9a:	1f a6       	std	Y+47, r1	; 0x2f
					print = 0;
					switched = true;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != OUTPUT){
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     ea2:	88 23       	and	r24, r24
     ea4:	f1 f0       	breq	.+60     	; 0xee2 <main+0x37c>
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     eac:	88 23       	and	r24, r24
     eae:	c9 f4       	brne	.+50     	; 0xee2 <main+0x37c>
     eb0:	6f a5       	ldd	r22, Y+47	; 0x2f
     eb2:	78 a9       	ldd	r23, Y+48	; 0x30
     eb4:	61 30       	cpi	r22, 0x01	; 1
     eb6:	71 05       	cpc	r23, r1
     eb8:	a1 f0       	breq	.+40     	; 0xee2 <main+0x37c>
					state = O0_ON;
					submode = OUTPUT;
					OrangutanLCD::clear();
     eba:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("OUTPUTS");
     ebe:	8c e7       	ldi	r24, 0x7C	; 124
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
     ece:	58 e0       	ldi	r21, 0x08	; 8
     ed0:	65 2e       	mov	r6, r21
     ed2:	71 2c       	mov	r7, r1
     ed4:	11 e0       	ldi	r17, 0x01	; 1
     ed6:	88 24       	eor	r8, r8
     ed8:	99 24       	eor	r9, r9
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	98 ab       	std	Y+48, r25	; 0x30
     ee0:	8f a7       	std	Y+47, r24	; 0x2f
					print = 0;
					switched = true;
				}
				if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != MOTOR){
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     ee8:	88 23       	and	r24, r24
     eea:	19 f5       	brne	.+70     	; 0xf32 <main+0x3cc>
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     ef2:	88 23       	and	r24, r24
     ef4:	f1 f0       	breq	.+60     	; 0xf32 <main+0x3cc>
     ef6:	6f a5       	ldd	r22, Y+47	; 0x2f
     ef8:	78 a9       	ldd	r23, Y+48	; 0x30
     efa:	62 30       	cpi	r22, 0x02	; 2
     efc:	71 05       	cpc	r23, r1
     efe:	c9 f0       	breq	.+50     	; 0xf32 <main+0x3cc>
					state = M1_F;
					submode = MOTOR;
					OrangutanLCD::clear();
     f00:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MOTORS ");
     f04:	84 e8       	ldi	r24, 0x84	; 132
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
					print = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     f14:	80 91 ce 03 	lds	r24, 0x03CE
     f18:	84 60       	ori	r24, 0x04	; 4
     f1a:	80 93 ce 03 	sts	0x03CE, r24
     f1e:	40 e2       	ldi	r20, 0x20	; 32
     f20:	64 2e       	mov	r6, r20
     f22:	71 2c       	mov	r7, r1
     f24:	11 e0       	ldi	r17, 0x01	; 1
     f26:	88 24       	eor	r8, r8
     f28:	99 24       	eor	r9, r9
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	98 ab       	std	Y+48, r25	; 0x30
     f30:	8f a7       	std	Y+47, r24	; 0x2f
					switched = true;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != MULTI){
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     f38:	88 23       	and	r24, r24
     f3a:	11 f4       	brne	.+4      	; 0xf40 <main+0x3da>
     f3c:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <main+0x1d30>
     f40:	82 e0       	ldi	r24, 0x02	; 2
     f42:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     f46:	88 23       	and	r24, r24
     f48:	11 f4       	brne	.+4      	; 0xf4e <main+0x3e8>
     f4a:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <main+0x1d30>
     f4e:	6f a5       	ldd	r22, Y+47	; 0x2f
     f50:	78 a9       	ldd	r23, Y+48	; 0x30
     f52:	63 30       	cpi	r22, 0x03	; 3
     f54:	71 05       	cpc	r23, r1
     f56:	11 f4       	brne	.+4      	; 0xf5c <main+0x3f6>
     f58:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <main+0x1d30>
					state = M2_AND_M3;
					submode = MULTI;
					OrangutanLCD::clear();
     f5c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MULTI ");
     f60:	8c e8       	ldi	r24, 0x8C	; 140
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	61 e0       	ldi	r22, 0x01	; 1
     f6c:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
					print = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     f70:	3a e2       	ldi	r19, 0x2A	; 42
     f72:	63 2e       	mov	r6, r19
     f74:	71 2c       	mov	r7, r1
     f76:	88 24       	eor	r8, r8
     f78:	99 24       	eor	r9, r9
     f7a:	83 e0       	ldi	r24, 0x03	; 3
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	98 ab       	std	Y+48, r25	; 0x30
     f80:	8f a7       	std	Y+47, r24	; 0x2f
					plateLoadMotor = 0;
					fixtureMotor = 0;
					brush1Motor = 0;
					brush2Motor = 0;
					paperTowelMotor = 0;
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	80 93 d0 03 	sts	0x03D0, r24
					u_outputByte1.outputByte1 = 255;  // reset outputByte1
     f88:	80 93 d1 03 	sts	0x03D1, r24
					u_motorByte0.motorByte0 = 0;	  // reset motorByte0
     f8c:	10 92 ce 03 	sts	0x03CE, r1
					u_motorByte1.motorByte1 = 0;	  // reset motorByte1
     f90:	10 92 cf 03 	sts	0x03CF, r1
     f94:	23 96       	adiw	r28, 0x03	; 3
     f96:	1f ae       	std	Y+63, r1	; 0x3f
     f98:	1e ae       	std	Y+62, r1	; 0x3e
     f9a:	23 97       	sbiw	r28, 0x03	; 3
     f9c:	21 96       	adiw	r28, 0x01	; 1
     f9e:	1f ae       	std	Y+63, r1	; 0x3f
     fa0:	1e ae       	std	Y+62, r1	; 0x3e
     fa2:	21 97       	sbiw	r28, 0x01	; 1
     fa4:	1c ae       	std	Y+60, r1	; 0x3c
     fa6:	1b ae       	std	Y+59, r1	; 0x3b
     fa8:	1a ae       	std	Y+58, r1	; 0x3a
     faa:	19 ae       	std	Y+57, r1	; 0x39
     fac:	1e ae       	std	Y+62, r1	; 0x3e
     fae:	1d ae       	std	Y+61, r1	; 0x3d
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
     fb0:	00 23       	and	r16, r16
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <main+0x450>
     fb4:	c3 c0       	rjmp	.+390    	; 0x113c <main+0x5d6>
					if(state <= S7){				//if it's doing the sensors
     fb6:	98 e0       	ldi	r25, 0x08	; 8
     fb8:	69 16       	cp	r6, r25
     fba:	71 04       	cpc	r7, r1
     fbc:	6c f4       	brge	.+26     	; 0xfd8 <main+0x472>
						OrangutanLCD::gotoXY(0,1);
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	61 e0       	ldi	r22, 0x01	; 1
     fc2:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
						buttonTriggered = false;
						state ++;
     fc6:	08 94       	sec
     fc8:	61 1c       	adc	r6, r1
     fca:	71 1c       	adc	r7, r1
						counterRef = counter;
						print = 0;
						if(state == S7 + 1){		//accounts for end of maintenance mode after sensors
     fcc:	68 e0       	ldi	r22, 0x08	; 8
     fce:	66 16       	cp	r6, r22
     fd0:	71 04       	cpc	r7, r1
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <main+0x470>
     fd4:	b0 c0       	rjmp	.+352    	; 0x1136 <main+0x5d0>
     fd6:	1b c0       	rjmp	.+54     	; 0x100e <main+0x4a8>
							OrangutanLCD::clear();
							state = DONEM;
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
     fd8:	70 e2       	ldi	r23, 0x20	; 32
     fda:	67 16       	cp	r6, r23
     fdc:	71 04       	cpc	r7, r1
     fde:	dc f4       	brge	.+54     	; 0x1016 <main+0x4b0>
						if(state % 2 == 0){			//current state is an 'on' state
     fe0:	60 fc       	sbrc	r6, 0
     fe2:	09 c0       	rjmp	.+18     	; 0xff6 <main+0x490>
							OrangutanLCD::gotoXY(13,1);
     fe4:	8d e0       	ldi	r24, 0x0D	; 13
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("OFF");
     fec:	83 e9       	ldi	r24, 0x93	; 147
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <main+0x498>
						}
						else{						//current state is an 'off' state
							OrangutanLCD::gotoXY(0,1);
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	61 e0       	ldi	r22, 0x01	; 1
     ffa:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
						}
						buttonTriggered = false;
						state ++;
     ffe:	08 94       	sec
    1000:	61 1c       	adc	r6, r1
    1002:	71 1c       	adc	r7, r1
						counterRef = counter;
						print = 0;
						if(state == O11_OFF + 1){	//accounts for end of maintenance mode after outputs
    1004:	80 e2       	ldi	r24, 0x20	; 32
    1006:	68 16       	cp	r6, r24
    1008:	71 04       	cpc	r7, r1
    100a:	09 f0       	breq	.+2      	; 0x100e <main+0x4a8>
    100c:	94 c0       	rjmp	.+296    	; 0x1136 <main+0x5d0>
							OrangutanLCD::clear();
    100e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
    1012:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <main+0x1d60>
    1016:	83 01       	movw	r16, r6
    1018:	0f 5f       	subi	r16, 0xFF	; 255
    101a:	1f 4f       	sbci	r17, 0xFF	; 255
							state = DONEM;
						}
					}
					else if(state <= M5_B){							//if it's doing the motors
    101c:	9a e2       	ldi	r25, 0x2A	; 42
    101e:	69 16       	cp	r6, r25
    1020:	71 04       	cpc	r7, r1
    1022:	0c f0       	brlt	.+2      	; 0x1026 <main+0x4c0>
    1024:	5f c0       	rjmp	.+190    	; 0x10e4 <main+0x57e>
						buttonTriggered = false;
						state ++;
						counterRef = counter;
						print = 0;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
    1026:	60 fc       	sbrc	r6, 0
    1028:	09 c0       	rjmp	.+18     	; 0x103c <main+0x4d6>
							OrangutanLCD::gotoXY(11,1);
    102a:	8b e0       	ldi	r24, 0x0B	; 11
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("BACK ");
    1032:	87 e9       	ldi	r24, 0x97	; 151
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    103a:	13 c0       	rjmp	.+38     	; 0x1062 <main+0x4fc>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
    103c:	06 32       	cpi	r16, 0x26	; 38
    103e:	11 05       	cpc	r17, r1
    1040:	71 f1       	breq	.+92     	; 0x109e <main+0x538>
    1042:	07 32       	cpi	r16, 0x27	; 39
    1044:	11 05       	cpc	r17, r1
    1046:	3c f4       	brge	.+14     	; 0x1056 <main+0x4f0>
    1048:	02 32       	cpi	r16, 0x22	; 34
    104a:	11 05       	cpc	r17, r1
    104c:	61 f0       	breq	.+24     	; 0x1066 <main+0x500>
    104e:	04 32       	cpi	r16, 0x24	; 36
    1050:	11 05       	cpc	r17, r1
    1052:	39 f4       	brne	.+14     	; 0x1062 <main+0x4fc>
    1054:	14 c0       	rjmp	.+40     	; 0x107e <main+0x518>
    1056:	08 32       	cpi	r16, 0x28	; 40
    1058:	11 05       	cpc	r17, r1
    105a:	69 f1       	breq	.+90     	; 0x10b6 <main+0x550>
    105c:	0a 32       	cpi	r16, 0x2A	; 42
    105e:	11 05       	cpc	r17, r1
    1060:	b1 f1       	breq	.+108    	; 0x10ce <main+0x568>
    1062:	38 01       	movw	r6, r16
    1064:	68 c0       	rjmp	.+208    	; 0x1136 <main+0x5d0>
								case M1_B + 1:
									OrangutanLCD::gotoXY(0,1);
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	61 e0       	ldi	r22, 0x01	; 1
    106a:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    106e:	80 91 ce 03 	lds	r24, 0x03CE
    1072:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1074:	80 62       	ori	r24, 0x20	; 32
    1076:	80 93 ce 03 	sts	0x03CE, r24
    107a:	12 01       	movw	r2, r4
    107c:	11 c2       	rjmp	.+1058   	; 0x14a0 <main+0x93a>
									break;
								case M2_B + 1:
									OrangutanLCD::gotoXY(0,1);
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	61 e0       	ldi	r22, 0x01	; 1
    1082:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1086:	80 91 ce 03 	lds	r24, 0x03CE
    108a:	8f 7d       	andi	r24, 0xDF	; 223
    108c:	80 93 ce 03 	sts	0x03CE, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    1090:	80 91 cf 03 	lds	r24, 0x03CF
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	80 93 cf 03 	sts	0x03CF, r24
    109a:	12 01       	movw	r2, r4
    109c:	2a c2       	rjmp	.+1108   	; 0x14f2 <main+0x98c>
									break;
								case M3_B + 1:
									OrangutanLCD::gotoXY(0,1);
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    10a6:	80 91 cf 03 	lds	r24, 0x03CF
    10aa:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    10ac:	88 60       	ori	r24, 0x08	; 8
    10ae:	80 93 cf 03 	sts	0x03CF, r24
    10b2:	12 01       	movw	r2, r4
    10b4:	41 c2       	rjmp	.+1154   	; 0x1538 <main+0x9d2>
									break;
								case M4_B + 1:
									OrangutanLCD::gotoXY(0,1);
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    10be:	80 91 cf 03 	lds	r24, 0x03CF
    10c2:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    10c4:	80 64       	ori	r24, 0x40	; 64
    10c6:	80 93 cf 03 	sts	0x03CF, r24
    10ca:	12 01       	movw	r2, r4
    10cc:	58 c2       	rjmp	.+1200   	; 0x157e <main+0xa18>
									break;
								case M5_B + 1:
									OrangutanLCD::clear();
    10ce:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    10d2:	80 91 cf 03 	lds	r24, 0x03CF
    10d6:	8f 7b       	andi	r24, 0xBF	; 191
    10d8:	80 93 cf 03 	sts	0x03CF, r24
    10dc:	1a ae       	std	Y+58, r1	; 0x3a
    10de:	19 ae       	std	Y+57, r1	; 0x39
    10e0:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <main+0x1d60>
							}
						}
					}
					else{
						buttonTriggered = false;
						state ++;
    10e4:	38 01       	movw	r6, r16
						counterRef = counter;
						print = 0;
						switch(state){
    10e6:	0b 32       	cpi	r16, 0x2B	; 43
    10e8:	11 05       	cpc	r17, r1
    10ea:	21 f0       	breq	.+8      	; 0x10f4 <main+0x58e>
    10ec:	0c 32       	cpi	r16, 0x2C	; 44
    10ee:	11 05       	cpc	r17, r1
    10f0:	11 f5       	brne	.+68     	; 0x1136 <main+0x5d0>
    10f2:	0d c0       	rjmp	.+26     	; 0x110e <main+0x5a8>
							case M2_AND_M3 + 1:
								u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    10f4:	90 91 cf 03 	lds	r25, 0x03CF
    10f8:	9e 7f       	andi	r25, 0xFE	; 254
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    10fa:	80 91 ce 03 	lds	r24, 0x03CE
    10fe:	80 62       	ori	r24, 0x20	; 32
    1100:	80 93 ce 03 	sts	0x03CE, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    1104:	98 60       	ori	r25, 0x08	; 8
    1106:	90 93 cf 03 	sts	0x03CF, r25
    110a:	12 01       	movw	r2, r4
    110c:	82 c2       	rjmp	.+1284   	; 0x1612 <main+0xaac>
								break;
							case M2_AND_M4 + 1:
								OrangutanLCD::clear();
    110e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1112:	80 91 ce 03 	lds	r24, 0x03CE
    1116:	8f 7d       	andi	r24, 0xDF	; 223
    1118:	80 93 ce 03 	sts	0x03CE, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    111c:	80 91 cf 03 	lds	r24, 0x03CF
    1120:	87 7f       	andi	r24, 0xF7	; 247
    1122:	80 93 cf 03 	sts	0x03CF, r24
    1126:	21 96       	adiw	r28, 0x01	; 1
    1128:	1f ae       	std	Y+63, r1	; 0x3f
    112a:	1e ae       	std	Y+62, r1	; 0x3e
    112c:	21 97       	sbiw	r28, 0x01	; 1
    112e:	1c ae       	std	Y+60, r1	; 0x3c
    1130:	1b ae       	std	Y+59, r1	; 0x3b
    1132:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <main+0x1d60>
    1136:	12 01       	movw	r2, r4
    1138:	88 24       	eor	r8, r8
    113a:	99 24       	eor	r9, r9
						}
					}
				}

				//state actions
				switch (state) {
    113c:	f3 01       	movw	r30, r6
    113e:	ec 32       	cpi	r30, 0x2C	; 44
    1140:	f1 05       	cpc	r31, r1
    1142:	08 f0       	brcs	.+2      	; 0x1146 <main+0x5e0>
    1144:	7a c2       	rjmp	.+1268   	; 0x163a <main+0xad4>
    1146:	ea 5b       	subi	r30, 0xBA	; 186
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	ee 0f       	add	r30, r30
    114c:	ff 1f       	adc	r31, r31
    114e:	05 90       	lpm	r0, Z+
    1150:	f4 91       	lpm	r31, Z+
    1152:	e0 2d       	mov	r30, r0
    1154:	09 94       	ijmp
					case S0:
						if(print == 0){
    1156:	81 14       	cp	r8, r1
    1158:	91 04       	cpc	r9, r1
    115a:	39 f4       	brne	.+14     	; 0x116a <main+0x604>
							OrangutanLCD::print("SENSOR 0");
    115c:	8d e9       	ldi	r24, 0x9D	; 157
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1164:	21 e0       	ldi	r18, 0x01	; 1
    1166:	82 2e       	mov	r8, r18
    1168:	91 2c       	mov	r9, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
    116a:	8f e0       	ldi	r24, 0x0F	; 15
    116c:	61 e0       	ldi	r22, 0x01	; 1
    116e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
	// position and will not span lines.
	static void print(unsigned long value);
	static void print(long value);
	static inline void print(unsigned int value)
	{
		print((unsigned long)value);
    1172:	60 91 d2 03 	lds	r22, 0x03D2
    1176:	11 c0       	rjmp	.+34     	; 0x119a <main+0x634>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.plate);
						break;
					case S1:
						if(print == 0){
    1178:	81 14       	cp	r8, r1
    117a:	91 04       	cpc	r9, r1
    117c:	39 f4       	brne	.+14     	; 0x118c <main+0x626>
							OrangutanLCD::print("SENSOR 1");
    117e:	86 ea       	ldi	r24, 0xA6	; 166
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	89 2e       	mov	r8, r25
    118a:	91 2c       	mov	r9, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
    118c:	8f e0       	ldi	r24, 0x0F	; 15
    118e:	61 e0       	ldi	r22, 0x01	; 1
    1190:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
    1194:	60 91 d2 03 	lds	r22, 0x03D2
    1198:	66 95       	lsr	r22
    119a:	61 70       	andi	r22, 0x01	; 1
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <_ZN12OrangutanLCD5printEm>
    11a6:	49 c2       	rjmp	.+1170   	; 0x163a <main+0xad4>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureLift);
						break;
					case S2:
						if(print == 0){
    11a8:	81 14       	cp	r8, r1
    11aa:	91 04       	cpc	r9, r1
    11ac:	39 f4       	brne	.+14     	; 0x11bc <main+0x656>
							OrangutanLCD::print("SENSOR 2");
    11ae:	8f ea       	ldi	r24, 0xAF	; 175
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	88 2e       	mov	r8, r24
    11ba:	91 2c       	mov	r9, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
    11bc:	8f e0       	ldi	r24, 0x0F	; 15
    11be:	61 e0       	ldi	r22, 0x01	; 1
    11c0:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
    11c4:	60 91 d2 03 	lds	r22, 0x03D2
    11c8:	66 95       	lsr	r22
    11ca:	66 95       	lsr	r22
    11cc:	e6 cf       	rjmp	.-52     	; 0x119a <main+0x634>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureHome);
						break;
					case S3:
						if(print == 0){
    11ce:	81 14       	cp	r8, r1
    11d0:	91 04       	cpc	r9, r1
    11d2:	39 f4       	brne	.+14     	; 0x11e2 <main+0x67c>
							OrangutanLCD::print("SENSOR 3");
    11d4:	88 eb       	ldi	r24, 0xB8	; 184
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    11dc:	01 e0       	ldi	r16, 0x01	; 1
    11de:	80 2e       	mov	r8, r16
    11e0:	91 2c       	mov	r9, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
    11e2:	8f e0       	ldi	r24, 0x0F	; 15
    11e4:	61 e0       	ldi	r22, 0x01	; 1
    11e6:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
    11ea:	60 91 d2 03 	lds	r22, 0x03D2
    11ee:	66 95       	lsr	r22
    11f0:	66 95       	lsr	r22
    11f2:	66 95       	lsr	r22
    11f4:	d2 cf       	rjmp	.-92     	; 0x119a <main+0x634>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixturePlate);
						break;
					case S4:
						if(print == 0){
    11f6:	81 14       	cp	r8, r1
    11f8:	91 04       	cpc	r9, r1
    11fa:	39 f4       	brne	.+14     	; 0x120a <main+0x6a4>
							OrangutanLCD::print("SENSOR 4");
    11fc:	81 ec       	ldi	r24, 0xC1	; 193
    11fe:	91 e0       	ldi	r25, 0x01	; 1
    1200:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1204:	11 e0       	ldi	r17, 0x01	; 1
    1206:	81 2e       	mov	r8, r17
    1208:	91 2c       	mov	r9, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
    120a:	8f e0       	ldi	r24, 0x0F	; 15
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
    1212:	60 91 d2 03 	lds	r22, 0x03D2
    1216:	62 95       	swap	r22
    1218:	6f 70       	andi	r22, 0x0F	; 15
    121a:	bf cf       	rjmp	.-130    	; 0x119a <main+0x634>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
						break;
					case S5:
						if(print == 0){
    121c:	81 14       	cp	r8, r1
    121e:	91 04       	cpc	r9, r1
    1220:	39 f4       	brne	.+14     	; 0x1230 <main+0x6ca>
							OrangutanLCD::print("SENSOR 5");
    1222:	8a ec       	ldi	r24, 0xCA	; 202
    1224:	91 e0       	ldi	r25, 0x01	; 1
    1226:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    122a:	b1 e0       	ldi	r27, 0x01	; 1
    122c:	8b 2e       	mov	r8, r27
    122e:	91 2c       	mov	r9, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
    1230:	8f e0       	ldi	r24, 0x0F	; 15
    1232:	61 e0       	ldi	r22, 0x01	; 1
    1234:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
    1238:	60 91 d2 03 	lds	r22, 0x03D2
    123c:	62 95       	swap	r22
    123e:	66 95       	lsr	r22
    1240:	67 70       	andi	r22, 0x07	; 7
    1242:	ab cf       	rjmp	.-170    	; 0x119a <main+0x634>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
						break;
					case S6:
						if(print == 0){
    1244:	81 14       	cp	r8, r1
    1246:	91 04       	cpc	r9, r1
    1248:	39 f4       	brne	.+14     	; 0x1258 <main+0x6f2>
							OrangutanLCD::print("SENSOR 6");
    124a:	83 ed       	ldi	r24, 0xD3	; 211
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1252:	a1 e0       	ldi	r26, 0x01	; 1
    1254:	8a 2e       	mov	r8, r26
    1256:	91 2c       	mov	r9, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
    1258:	8f e0       	ldi	r24, 0x0F	; 15
    125a:	61 e0       	ldi	r22, 0x01	; 1
    125c:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
    1260:	60 91 d2 03 	lds	r22, 0x03D2
    1264:	62 95       	swap	r22
    1266:	66 95       	lsr	r22
    1268:	66 95       	lsr	r22
    126a:	63 70       	andi	r22, 0x03	; 3
    126c:	96 cf       	rjmp	.-212    	; 0x119a <main+0x634>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry1);
						break;
					case S7:
						if(print == 0){
    126e:	81 14       	cp	r8, r1
    1270:	91 04       	cpc	r9, r1
    1272:	39 f4       	brne	.+14     	; 0x1282 <main+0x71c>
							OrangutanLCD::print("SENSOR 7");
    1274:	8c ed       	ldi	r24, 0xDC	; 220
    1276:	91 e0       	ldi	r25, 0x01	; 1
    1278:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    127c:	f1 e0       	ldi	r31, 0x01	; 1
    127e:	8f 2e       	mov	r8, r31
    1280:	91 2c       	mov	r9, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
    1282:	8f e0       	ldi	r24, 0x0F	; 15
    1284:	61 e0       	ldi	r22, 0x01	; 1
    1286:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
    128a:	60 91 d2 03 	lds	r22, 0x03D2
    128e:	66 1f       	adc	r22, r22
    1290:	66 27       	eor	r22, r22
    1292:	66 1f       	adc	r22, r22
    1294:	83 cf       	rjmp	.-250    	; 0x119c <main+0x636>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry2);
						break;
					case O0_ON:
						if(print == 0){
    1296:	81 14       	cp	r8, r1
    1298:	91 04       	cpc	r9, r1
    129a:	39 f4       	brne	.+14     	; 0x12aa <main+0x744>
							OrangutanLCD::print("AC POWER     ON ");
    129c:	85 ee       	ldi	r24, 0xE5	; 229
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    12a4:	e1 e0       	ldi	r30, 0x01	; 1
    12a6:	8e 2e       	mov	r8, r30
    12a8:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
    12aa:	80 91 d0 03 	lds	r24, 0x03D0
    12ae:	8e 7f       	andi	r24, 0xFE	; 254
    12b0:	03 c0       	rjmp	.+6      	; 0x12b8 <main+0x752>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
    12b2:	80 91 d0 03 	lds	r24, 0x03D0
    12b6:	81 60       	ori	r24, 0x01	; 1
    12b8:	80 93 d0 03 	sts	0x03D0, r24
    12bc:	be c1       	rjmp	.+892    	; 0x163a <main+0xad4>
						break;
					case O1_ON:
						if(print == 0){
    12be:	81 14       	cp	r8, r1
    12c0:	91 04       	cpc	r9, r1
    12c2:	39 f4       	brne	.+14     	; 0x12d2 <main+0x76c>
							OrangutanLCD::print("BLOWER       ON  ");
    12c4:	86 ef       	ldi	r24, 0xF6	; 246
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    12cc:	71 e0       	ldi	r23, 0x01	; 1
    12ce:	87 2e       	mov	r8, r23
    12d0:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    12d2:	80 91 d0 03 	lds	r24, 0x03D0
    12d6:	8d 7f       	andi	r24, 0xFD	; 253
    12d8:	ef cf       	rjmp	.-34     	; 0x12b8 <main+0x752>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    12da:	80 91 d0 03 	lds	r24, 0x03D0
    12de:	82 60       	ori	r24, 0x02	; 2
    12e0:	eb cf       	rjmp	.-42     	; 0x12b8 <main+0x752>
						break;
					case O2_ON:
						if(print == 0){
    12e2:	81 14       	cp	r8, r1
    12e4:	91 04       	cpc	r9, r1
    12e6:	39 f4       	brne	.+14     	; 0x12f6 <main+0x790>
							OrangutanLCD::print("PLATE STOP   ON ");
    12e8:	88 e0       	ldi	r24, 0x08	; 8
    12ea:	92 e0       	ldi	r25, 0x02	; 2
    12ec:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	86 2e       	mov	r8, r22
    12f4:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
    12f6:	80 91 d0 03 	lds	r24, 0x03D0
    12fa:	8b 7f       	andi	r24, 0xFB	; 251
    12fc:	dd cf       	rjmp	.-70     	; 0x12b8 <main+0x752>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
    12fe:	80 91 d0 03 	lds	r24, 0x03D0
    1302:	84 60       	ori	r24, 0x04	; 4
    1304:	d9 cf       	rjmp	.-78     	; 0x12b8 <main+0x752>
						break;
					case O3_ON:
						if(print == 0){
    1306:	81 14       	cp	r8, r1
    1308:	91 04       	cpc	r9, r1
    130a:	39 f4       	brne	.+14     	; 0x131a <main+0x7b4>
							OrangutanLCD::print("PLATE RAISE  ON ");
    130c:	89 e1       	ldi	r24, 0x19	; 25
    130e:	92 e0       	ldi	r25, 0x02	; 2
    1310:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1314:	51 e0       	ldi	r21, 0x01	; 1
    1316:	85 2e       	mov	r8, r21
    1318:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    131a:	80 91 d0 03 	lds	r24, 0x03D0
    131e:	87 7f       	andi	r24, 0xF7	; 247
    1320:	15 c0       	rjmp	.+42     	; 0x134c <main+0x7e6>
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1322:	80 91 d0 03 	lds	r24, 0x03D0
    1326:	88 60       	ori	r24, 0x08	; 8
    1328:	c7 cf       	rjmp	.-114    	; 0x12b8 <main+0x752>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(print == 0){
    132a:	81 14       	cp	r8, r1
    132c:	91 04       	cpc	r9, r1
    132e:	39 f4       	brne	.+14     	; 0x133e <main+0x7d8>
							OrangutanLCD::print("PLATE LOWER  ON ");
    1330:	8a e2       	ldi	r24, 0x2A	; 42
    1332:	92 e0       	ldi	r25, 0x02	; 2
    1334:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1338:	41 e0       	ldi	r20, 0x01	; 1
    133a:	84 2e       	mov	r8, r20
    133c:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    133e:	80 91 d0 03 	lds	r24, 0x03D0
    1342:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1344:	8f 7e       	andi	r24, 0xEF	; 239
    1346:	b8 cf       	rjmp	.-144    	; 0x12b8 <main+0x752>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1348:	80 91 d0 03 	lds	r24, 0x03D0
    134c:	80 61       	ori	r24, 0x10	; 16
    134e:	b4 cf       	rjmp	.-152    	; 0x12b8 <main+0x752>
						break;
					case O5_ON:
						if(print == 0){
    1350:	81 14       	cp	r8, r1
    1352:	91 04       	cpc	r9, r1
    1354:	39 f4       	brne	.+14     	; 0x1364 <main+0x7fe>
							OrangutanLCD::print("BRUSH1 RAISE ON ");
    1356:	8b e3       	ldi	r24, 0x3B	; 59
    1358:	92 e0       	ldi	r25, 0x02	; 2
    135a:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    135e:	31 e0       	ldi	r19, 0x01	; 1
    1360:	83 2e       	mov	r8, r19
    1362:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    1364:	80 91 d0 03 	lds	r24, 0x03D0
    1368:	8f 7d       	andi	r24, 0xDF	; 223
    136a:	14 c0       	rjmp	.+40     	; 0x1394 <main+0x82e>
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    136c:	80 91 d0 03 	lds	r24, 0x03D0
    1370:	0d c0       	rjmp	.+26     	; 0x138c <main+0x826>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(print == 0){
    1372:	81 14       	cp	r8, r1
    1374:	91 04       	cpc	r9, r1
    1376:	39 f4       	brne	.+14     	; 0x1386 <main+0x820>
							OrangutanLCD::print("BRUSH1 LOWER ON ");
    1378:	8c e4       	ldi	r24, 0x4C	; 76
    137a:	92 e0       	ldi	r25, 0x02	; 2
    137c:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1380:	21 e0       	ldi	r18, 0x01	; 1
    1382:	82 2e       	mov	r8, r18
    1384:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1386:	80 91 d0 03 	lds	r24, 0x03D0
    138a:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    138c:	80 62       	ori	r24, 0x20	; 32
    138e:	94 cf       	rjmp	.-216    	; 0x12b8 <main+0x752>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1390:	80 91 d0 03 	lds	r24, 0x03D0
    1394:	80 64       	ori	r24, 0x40	; 64
    1396:	90 cf       	rjmp	.-224    	; 0x12b8 <main+0x752>
						break;
					case O7_ON:
						if(print == 0){
    1398:	81 14       	cp	r8, r1
    139a:	91 04       	cpc	r9, r1
    139c:	39 f4       	brne	.+14     	; 0x13ac <main+0x846>
							OrangutanLCD::print("BRUSH2 RAISE ON ");
    139e:	8d e5       	ldi	r24, 0x5D	; 93
    13a0:	92 e0       	ldi	r25, 0x02	; 2
    13a2:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	89 2e       	mov	r8, r25
    13aa:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    13ac:	80 91 d0 03 	lds	r24, 0x03D0
    13b0:	8f 77       	andi	r24, 0x7F	; 127
    13b2:	80 93 d0 03 	sts	0x03D0, r24
    13b6:	13 c0       	rjmp	.+38     	; 0x13de <main+0x878>
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(print == 0){
    13b8:	81 14       	cp	r8, r1
    13ba:	91 04       	cpc	r9, r1
    13bc:	39 f4       	brne	.+14     	; 0x13cc <main+0x866>
							OrangutanLCD::print("BRUSH2 LOWER ON ");
    13be:	8e e6       	ldi	r24, 0x6E	; 110
    13c0:	92 e0       	ldi	r25, 0x02	; 2
    13c2:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	88 2e       	mov	r8, r24
    13ca:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    13cc:	80 91 d1 03 	lds	r24, 0x03D1
    13d0:	8e 7f       	andi	r24, 0xFE	; 254
    13d2:	80 93 d1 03 	sts	0x03D1, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    13d6:	80 91 d0 03 	lds	r24, 0x03D0
    13da:	80 68       	ori	r24, 0x80	; 128
    13dc:	6d cf       	rjmp	.-294    	; 0x12b8 <main+0x752>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    13de:	80 91 d1 03 	lds	r24, 0x03D1
    13e2:	81 60       	ori	r24, 0x01	; 1
    13e4:	35 c0       	rjmp	.+106    	; 0x1450 <main+0x8ea>
						break;
					case O9_ON:
						if(print == 0){
    13e6:	81 14       	cp	r8, r1
    13e8:	91 04       	cpc	r9, r1
    13ea:	39 f4       	brne	.+14     	; 0x13fa <main+0x894>
							OrangutanLCD::print("PAPER RAISE  ON ");
    13ec:	8f e7       	ldi	r24, 0x7F	; 127
    13ee:	92 e0       	ldi	r25, 0x02	; 2
    13f0:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    13f4:	01 e0       	ldi	r16, 0x01	; 1
    13f6:	80 2e       	mov	r8, r16
    13f8:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    13fa:	80 91 d1 03 	lds	r24, 0x03D1
    13fe:	8d 7f       	andi	r24, 0xFD	; 253
    1400:	14 c0       	rjmp	.+40     	; 0x142a <main+0x8c4>
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1402:	80 91 d1 03 	lds	r24, 0x03D1
    1406:	0d c0       	rjmp	.+26     	; 0x1422 <main+0x8bc>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(print == 0){
    1408:	81 14       	cp	r8, r1
    140a:	91 04       	cpc	r9, r1
    140c:	39 f4       	brne	.+14     	; 0x141c <main+0x8b6>
							OrangutanLCD::print("PAPER LOWER  ON ");
    140e:	80 e9       	ldi	r24, 0x90	; 144
    1410:	92 e0       	ldi	r25, 0x02	; 2
    1412:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1416:	11 e0       	ldi	r17, 0x01	; 1
    1418:	81 2e       	mov	r8, r17
    141a:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
    141c:	80 91 d1 03 	lds	r24, 0x03D1
    1420:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1422:	82 60       	ori	r24, 0x02	; 2
    1424:	15 c0       	rjmp	.+42     	; 0x1450 <main+0x8ea>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
    1426:	80 91 d1 03 	lds	r24, 0x03D1
    142a:	84 60       	ori	r24, 0x04	; 4
    142c:	11 c0       	rjmp	.+34     	; 0x1450 <main+0x8ea>
						break;
					case O11_ON:
						if(print == 0){
    142e:	81 14       	cp	r8, r1
    1430:	91 04       	cpc	r9, r1
    1432:	39 f4       	brne	.+14     	; 0x1442 <main+0x8dc>
							OrangutanLCD::print("AIR KNIFE    ON ");
    1434:	81 ea       	ldi	r24, 0xA1	; 161
    1436:	92 e0       	ldi	r25, 0x02	; 2
    1438:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    143c:	b1 e0       	ldi	r27, 0x01	; 1
    143e:	8b 2e       	mov	r8, r27
    1440:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1442:	80 91 d1 03 	lds	r24, 0x03D1
    1446:	87 7f       	andi	r24, 0xF7	; 247
    1448:	03 c0       	rjmp	.+6      	; 0x1450 <main+0x8ea>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
    144a:	80 91 d1 03 	lds	r24, 0x03D1
    144e:	88 60       	ori	r24, 0x08	; 8
    1450:	80 93 d1 03 	sts	0x03D1, r24
    1454:	f2 c0       	rjmp	.+484    	; 0x163a <main+0xad4>
						break;
					case M1_F:
						if(print == 0){
    1456:	81 14       	cp	r8, r1
    1458:	91 04       	cpc	r9, r1
    145a:	39 f4       	brne	.+14     	; 0x146a <main+0x904>
							OrangutanLCD::print("LOADING    FRONT");
    145c:	82 eb       	ldi	r24, 0xB2	; 178
    145e:	92 e0       	ldi	r25, 0x02	; 2
    1460:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1464:	a1 e0       	ldi	r26, 0x01	; 1
    1466:	8a 2e       	mov	r8, r26
    1468:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    146a:	80 91 ce 03 	lds	r24, 0x03CE
    146e:	8d 7f       	andi	r24, 0xFD	; 253
    1470:	80 93 ce 03 	sts	0x03CE, r24
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	23 96       	adiw	r28, 0x03	; 3
    147a:	9f af       	std	Y+63, r25	; 0x3f
    147c:	8e af       	std	Y+62, r24	; 0x3e
    147e:	23 97       	sbiw	r28, 0x03	; 3
    1480:	dc c0       	rjmp	.+440    	; 0x163a <main+0xad4>
						plateLoadMotor =  1;
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
    1482:	80 91 ce 03 	lds	r24, 0x03CE
    1486:	82 60       	ori	r24, 0x02	; 2
    1488:	80 93 ce 03 	sts	0x03CE, r24
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	23 96       	adiw	r28, 0x03	; 3
    1492:	7f af       	std	Y+63, r23	; 0x3f
    1494:	6e af       	std	Y+62, r22	; 0x3e
    1496:	23 97       	sbiw	r28, 0x03	; 3
    1498:	d0 c0       	rjmp	.+416    	; 0x163a <main+0xad4>
						plateLoadMotor =  1;
						break;
					case M2_F:
						if(print == 0){
    149a:	81 14       	cp	r8, r1
    149c:	91 04       	cpc	r9, r1
    149e:	39 f4       	brne	.+14     	; 0x14ae <main+0x948>
							OrangutanLCD::print("DRIVE      FRONT");
    14a0:	83 ec       	ldi	r24, 0xC3	; 195
    14a2:	92 e0       	ldi	r25, 0x02	; 2
    14a4:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    14a8:	f1 e0       	ldi	r31, 0x01	; 1
    14aa:	8f 2e       	mov	r8, r31
    14ac:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    14ae:	80 91 ce 03 	lds	r24, 0x03CE
    14b2:	8f 7e       	andi	r24, 0xEF	; 239
    14b4:	80 93 ce 03 	sts	0x03CE, r24
    14b8:	23 96       	adiw	r28, 0x03	; 3
    14ba:	1f ae       	std	Y+63, r1	; 0x3f
    14bc:	1e ae       	std	Y+62, r1	; 0x3e
    14be:	23 97       	sbiw	r28, 0x03	; 3
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	21 96       	adiw	r28, 0x01	; 1
    14c6:	9f af       	std	Y+63, r25	; 0x3f
    14c8:	8e af       	std	Y+62, r24	; 0x3e
    14ca:	21 97       	sbiw	r28, 0x01	; 1
    14cc:	e2 e2       	ldi	r30, 0x22	; 34
    14ce:	6e 2e       	mov	r6, r30
    14d0:	71 2c       	mov	r7, r1
    14d2:	b3 c0       	rjmp	.+358    	; 0x163a <main+0xad4>
						fixtureMotor =  1;
						plateLoadMotor = 0;
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
    14d4:	80 91 ce 03 	lds	r24, 0x03CE
    14d8:	80 61       	ori	r24, 0x10	; 16
    14da:	80 93 ce 03 	sts	0x03CE, r24
    14de:	61 e0       	ldi	r22, 0x01	; 1
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	21 96       	adiw	r28, 0x01	; 1
    14e4:	7f af       	std	Y+63, r23	; 0x3f
    14e6:	6e af       	std	Y+62, r22	; 0x3e
    14e8:	21 97       	sbiw	r28, 0x01	; 1
    14ea:	a7 c0       	rjmp	.+334    	; 0x163a <main+0xad4>
						fixtureMotor =  1;
						break;
					case M3_F:
						if(print == 0){
    14ec:	81 14       	cp	r8, r1
    14ee:	91 04       	cpc	r9, r1
    14f0:	39 f4       	brne	.+14     	; 0x1500 <main+0x99a>
							OrangutanLCD::print("BRUSH1     FRONT");
    14f2:	84 ed       	ldi	r24, 0xD4	; 212
    14f4:	92 e0       	ldi	r25, 0x02	; 2
    14f6:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    14fa:	71 e0       	ldi	r23, 0x01	; 1
    14fc:	87 2e       	mov	r8, r23
    14fe:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
    1500:	80 91 ce 03 	lds	r24, 0x03CE
    1504:	8f 77       	andi	r24, 0x7F	; 127
    1506:	80 93 ce 03 	sts	0x03CE, r24
    150a:	21 96       	adiw	r28, 0x01	; 1
    150c:	1f ae       	std	Y+63, r1	; 0x3f
    150e:	1e ae       	std	Y+62, r1	; 0x3e
    1510:	21 97       	sbiw	r28, 0x01	; 1
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9e af       	std	Y+62, r25	; 0x3e
    1518:	8d af       	std	Y+61, r24	; 0x3d
    151a:	64 e2       	ldi	r22, 0x24	; 36
    151c:	66 2e       	mov	r6, r22
    151e:	71 2c       	mov	r7, r1
    1520:	8c c0       	rjmp	.+280    	; 0x163a <main+0xad4>
						brush1Motor =  1;
						fixtureMotor = 0;
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
    1522:	80 91 ce 03 	lds	r24, 0x03CE
    1526:	80 68       	ori	r24, 0x80	; 128
    1528:	80 93 ce 03 	sts	0x03CE, r24
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	5f c0       	rjmp	.+190    	; 0x15f0 <main+0xa8a>
						brush1Motor =  1;
						break;
					case M4_F:
						if(print == 0){
    1532:	81 14       	cp	r8, r1
    1534:	91 04       	cpc	r9, r1
    1536:	39 f4       	brne	.+14     	; 0x1546 <main+0x9e0>
							OrangutanLCD::print("BRUSH2     FRONT");
    1538:	85 ee       	ldi	r24, 0xE5	; 229
    153a:	92 e0       	ldi	r25, 0x02	; 2
    153c:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1540:	51 e0       	ldi	r21, 0x01	; 1
    1542:	85 2e       	mov	r8, r21
    1544:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
    1546:	80 91 cf 03 	lds	r24, 0x03CF
    154a:	8b 7f       	andi	r24, 0xFB	; 251
    154c:	80 93 cf 03 	sts	0x03CF, r24
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9c af       	std	Y+60, r25	; 0x3c
    1556:	8b af       	std	Y+59, r24	; 0x3b
    1558:	1e ae       	std	Y+62, r1	; 0x3e
    155a:	1d ae       	std	Y+61, r1	; 0x3d
    155c:	46 e2       	ldi	r20, 0x26	; 38
    155e:	64 2e       	mov	r6, r20
    1560:	71 2c       	mov	r7, r1
    1562:	6b c0       	rjmp	.+214    	; 0x163a <main+0xad4>
						brush2Motor =  1;
						brush1Motor = 0;
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
    1564:	80 91 cf 03 	lds	r24, 0x03CF
    1568:	84 60       	ori	r24, 0x04	; 4
    156a:	80 93 cf 03 	sts	0x03CF, r24
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	7c af       	std	Y+60, r23	; 0x3c
    1574:	6b af       	std	Y+59, r22	; 0x3b
    1576:	61 c0       	rjmp	.+194    	; 0x163a <main+0xad4>
						brush2Motor =  1;
						break;
					case M5_F:
						if(print == 0){
    1578:	81 14       	cp	r8, r1
    157a:	91 04       	cpc	r9, r1
    157c:	39 f4       	brne	.+14     	; 0x158c <main+0xa26>
							OrangutanLCD::print("PAPER      FRONT");
    157e:	86 ef       	ldi	r24, 0xF6	; 246
    1580:	92 e0       	ldi	r25, 0x02	; 2
    1582:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1586:	31 e0       	ldi	r19, 0x01	; 1
    1588:	83 2e       	mov	r8, r19
    158a:	91 2c       	mov	r9, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    158c:	80 91 cf 03 	lds	r24, 0x03CF
    1590:	8f 7d       	andi	r24, 0xDF	; 223
    1592:	80 93 cf 03 	sts	0x03CF, r24
    1596:	1c ae       	std	Y+60, r1	; 0x3c
    1598:	1b ae       	std	Y+59, r1	; 0x3b
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9a af       	std	Y+58, r25	; 0x3a
    15a0:	89 af       	std	Y+57, r24	; 0x39
    15a2:	28 e2       	ldi	r18, 0x28	; 40
    15a4:	62 2e       	mov	r6, r18
    15a6:	71 2c       	mov	r7, r1
    15a8:	48 c0       	rjmp	.+144    	; 0x163a <main+0xad4>
						paperTowelMotor =  1;
						brush2Motor = 0;
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
    15aa:	80 91 cf 03 	lds	r24, 0x03CF
    15ae:	80 62       	ori	r24, 0x20	; 32
    15b0:	80 93 cf 03 	sts	0x03CF, r24
    15b4:	61 e0       	ldi	r22, 0x01	; 1
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	7a af       	std	Y+58, r23	; 0x3a
    15ba:	69 af       	std	Y+57, r22	; 0x39
    15bc:	3e c0       	rjmp	.+124    	; 0x163a <main+0xad4>
						paperTowelMotor =  1;
						break;
					case M2_AND_M3:
						if(print == 0){
    15be:	81 14       	cp	r8, r1
    15c0:	91 04       	cpc	r9, r1
    15c2:	49 f0       	breq	.+18     	; 0x15d6 <main+0xa70>
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	21 96       	adiw	r28, 0x01	; 1
    15ca:	9f af       	std	Y+63, r25	; 0x3f
    15cc:	8e af       	std	Y+62, r24	; 0x3e
    15ce:	21 97       	sbiw	r28, 0x01	; 1
    15d0:	9e af       	std	Y+62, r25	; 0x3e
    15d2:	8d af       	std	Y+61, r24	; 0x3d
    15d4:	32 c0       	rjmp	.+100    	; 0x163a <main+0xad4>
							OrangutanLCD::print("FIXTURE AND BRUSH1");
    15d6:	87 e0       	ldi	r24, 0x07	; 7
    15d8:	93 e0       	ldi	r25, 0x03	; 3
    15da:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    15de:	61 e0       	ldi	r22, 0x01	; 1
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	21 96       	adiw	r28, 0x01	; 1
    15e4:	7f af       	std	Y+63, r23	; 0x3f
    15e6:	6e af       	std	Y+62, r22	; 0x3e
    15e8:	21 97       	sbiw	r28, 0x01	; 1
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	89 2e       	mov	r8, r25
    15ee:	91 2c       	mov	r9, r1
    15f0:	7e af       	std	Y+62, r23	; 0x3e
    15f2:	6d af       	std	Y+61, r22	; 0x3d
    15f4:	22 c0       	rjmp	.+68     	; 0x163a <main+0xad4>
						}
						fixtureMotor = 1;
						brush1Motor = 1;
						break;
					case M2_AND_M4:
						if(print == 0){
    15f6:	81 14       	cp	r8, r1
    15f8:	91 04       	cpc	r9, r1
    15fa:	59 f0       	breq	.+22     	; 0x1612 <main+0xaac>
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	21 96       	adiw	r28, 0x01	; 1
    1602:	9f af       	std	Y+63, r25	; 0x3f
    1604:	8e af       	std	Y+62, r24	; 0x3e
    1606:	21 97       	sbiw	r28, 0x01	; 1
    1608:	9c af       	std	Y+60, r25	; 0x3c
    160a:	8b af       	std	Y+59, r24	; 0x3b
    160c:	1e ae       	std	Y+62, r1	; 0x3e
    160e:	1d ae       	std	Y+61, r1	; 0x3d
    1610:	14 c0       	rjmp	.+40     	; 0x163a <main+0xad4>
							OrangutanLCD::print("FIXTURE AND BRUSH2");
    1612:	8a e1       	ldi	r24, 0x1A	; 26
    1614:	93 e0       	ldi	r25, 0x03	; 3
    1616:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    161a:	61 e0       	ldi	r22, 0x01	; 1
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	21 96       	adiw	r28, 0x01	; 1
    1620:	7f af       	std	Y+63, r23	; 0x3f
    1622:	6e af       	std	Y+62, r22	; 0x3e
    1624:	21 97       	sbiw	r28, 0x01	; 1
    1626:	7c af       	std	Y+60, r23	; 0x3c
    1628:	6b af       	std	Y+59, r22	; 0x3b
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	88 2e       	mov	r8, r24
    162e:	91 2c       	mov	r9, r1
    1630:	1e ae       	std	Y+62, r1	; 0x3e
    1632:	1d ae       	std	Y+61, r1	; 0x3d
    1634:	0b e2       	ldi	r16, 0x2B	; 43
    1636:	60 2e       	mov	r6, r16
    1638:	71 2c       	mov	r7, r1
						brush1Motor = 0;
						brush2Motor = 1;
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    163a:	c2 01       	movw	r24, r4
    163c:	b1 01       	movw	r22, r2
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	23 96       	adiw	r28, 0x03	; 3
    1644:	2e ad       	ldd	r18, Y+62	; 0x3e
    1646:	3f ad       	ldd	r19, Y+63	; 0x3f
    1648:	23 97       	sbiw	r28, 0x03	; 3
    164a:	21 96       	adiw	r28, 0x01	; 1
    164c:	0e ad       	ldd	r16, Y+62	; 0x3e
    164e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1650:	21 97       	sbiw	r28, 0x01	; 1
    1652:	ed ac       	ldd	r14, Y+61	; 0x3d
    1654:	fe ac       	ldd	r15, Y+62	; 0x3e
    1656:	cb ac       	ldd	r12, Y+59	; 0x3b
    1658:	dc ac       	ldd	r13, Y+60	; 0x3c
    165a:	a9 ac       	ldd	r10, Y+57	; 0x39
    165c:	ba ac       	ldd	r11, Y+58	; 0x3a
    165e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z15motor_and_writeiiiiiiii>
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>
			counter = 0;
			OrangutanLCD::clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
    166a:	7c e2       	ldi	r23, 0x2C	; 44
    166c:	67 16       	cp	r6, r23
    166e:	71 04       	cpc	r7, r1
    1670:	11 f4       	brne	.+4      	; 0x1676 <main+0xb10>
    1672:	0c 94 28 14 	jmp	0x2850	; 0x2850 <main+0x1cea>
				}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				counter ++;
    1676:	08 94       	sec
    1678:	41 1c       	adc	r4, r1
    167a:	51 1c       	adc	r5, r1
    167c:	d0 cb       	rjmp	.-2144   	; 0xe1e <main+0x2b8>
				delay_ms(1);
			}
		}
		else{										//If switch is set to Run Mode
		
		OrangutanLCD::print("NORMAL");
    167e:	8d e2       	ldi	r24, 0x2D	; 45
    1680:	93 e0       	ldi	r25, 0x03	; 3
    1682:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1686:	88 ee       	ldi	r24, 0xE8	; 232
    1688:	93 e0       	ldi	r25, 0x03	; 3
    168a:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
    168e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("SELECT CYCLE");
    1692:	84 e3       	ldi	r24, 0x34	; 52
    1694:	93 e0       	ldi	r25, 0x03	; 3
    1696:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    169a:	ee 24       	eor	r14, r14
    169c:	ff 24       	eor	r15, r15
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    169e:	c7 01       	movw	r24, r14
    16a0:	be 01       	movw	r22, r28
    16a2:	6f 5f       	subi	r22, 0xFF	; 255
    16a4:	7f 4f       	sbci	r23, 0xFF	; 255
    16a6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z15button_debounceiPi>
    16aa:	18 2f       	mov	r17, r24
			counter++;
    16ac:	08 94       	sec
    16ae:	e1 1c       	adc	r14, r1
    16b0:	f1 1c       	adc	r15, r1
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
		OrangutanLCD::print("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    16ba:	11 23       	and	r17, r17
    16bc:	81 f3       	breq	.-32     	; 0x169e <main+0xb38>
			counter++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		OrangutanLCD::clear();
    16be:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("CYCLE:");
    16c2:	81 e4       	ldi	r24, 0x41	; 65
    16c4:	93 e0       	ldi	r25, 0x03	; 3
    16c6:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>

		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    16ca:	80 91 ce 03 	lds	r24, 0x03CE
    16ce:	80 62       	ori	r24, 0x20	; 32
    16d0:	80 93 ce 03 	sts	0x03CE, r24

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    16da:	88 23       	and	r24, r24
    16dc:	11 f0       	breq	.+4      	; 0x16e2 <main+0xb7c>
    16de:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <main+0x1d3c>
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    16e8:	88 23       	and	r24, r24
    16ea:	11 f0       	breq	.+4      	; 0x16f0 <main+0xb8a>
    16ec:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <main+0x1d3c>
			OrangutanLCD::gotoXY(7,0);
    16f0:	87 e0       	ldi	r24, 0x07	; 7
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("FIRST B");
    16f8:	88 e4       	ldi	r24, 0x48	; 72
    16fa:	93 e0       	ldi	r25, 0x03	; 3
    16fc:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1700:	80 91 ce 03 	lds	r24, 0x03CE
    1704:	80 62       	ori	r24, 0x20	; 32
    1706:	80 93 ce 03 	sts	0x03CE, r24
    170a:	1e a6       	std	Y+46, r1	; 0x2e
    170c:	1d a6       	std	Y+45, r1	; 0x2d
    170e:	11 e0       	ldi	r17, 0x01	; 1
    1710:	81 2e       	mov	r8, r17
    1712:	91 2c       	mov	r9, r1
    1714:	18 a2       	std	Y+32, r1	; 0x20
    1716:	1f 8e       	std	Y+31, r1	; 0x1f
    1718:	66 24       	eor	r6, r6
    171a:	77 24       	eor	r7, r7
    171c:	44 24       	eor	r4, r4
    171e:	55 24       	eor	r5, r5
    1720:	22 24       	eor	r2, r2
    1722:	33 24       	eor	r3, r3
    1724:	1e aa       	std	Y+54, r1	; 0x36
    1726:	1d aa       	std	Y+53, r1	; 0x35
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9c ab       	std	Y+52, r25	; 0x34
    172e:	8b ab       	std	Y+51, r24	; 0x33
    1730:	9a ab       	std	Y+50, r25	; 0x32
    1732:	89 ab       	std	Y+49, r24	; 0x31
    1734:	18 86       	std	Y+8, r1	; 0x08
    1736:	1f 82       	std	Y+7, r1	; 0x07
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1738:	84 e4       	ldi	r24, 0x44	; 68
    173a:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1744:	85 e4       	ldi	r24, 0x45	; 69
    1746:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    174a:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_Z11i2c_readAckv>
    174e:	80 93 d2 03 	sts	0x03D2, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1752:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_Z11i2c_readNakv>
    1756:	80 93 d3 03 	sts	0x03D3, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    175a:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>
				
				if(state != INIT){
    175e:	61 14       	cp	r6, r1
    1760:	71 04       	cpc	r7, r1
    1762:	79 f0       	breq	.+30     	; 0x1782 <main+0xc1c>
					OrangutanLCD::gotoXY(0,1);
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	61 e0       	ldi	r22, 0x01	; 1
    1768:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    176c:	80 e5       	ldi	r24, 0x50	; 80
    176e:	93 e0       	ldi	r25, 0x03	; 3
    1770:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
	};
	static inline void print(int value)
	{
		print((long)value);
    1774:	b3 01       	movw	r22, r6
    1776:	88 27       	eor	r24, r24
    1778:	77 fd       	sbrc	r23, 7
    177a:	80 95       	com	r24
    177c:	98 2f       	mov	r25, r24
    177e:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <_ZN12OrangutanLCD5printEl>
					OrangutanLCD::print(state);
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1782:	c2 01       	movw	r24, r4
    1784:	be 01       	movw	r22, r28
    1786:	6f 5f       	subi	r22, 0xFF	; 255
    1788:	7f 4f       	sbci	r23, 0xFF	; 255
    178a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z15button_debounceiPi>
    178e:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1790:	c3 01       	movw	r24, r6
    1792:	a2 01       	movw	r20, r4
    1794:	91 01       	movw	r18, r2
    1796:	0e 94 de 01 	call	0x3bc	; 0x3bc <_Z10init_transibii>
    179a:	88 23       	and	r24, r24
    179c:	21 f0       	breq	.+8      	; 0x17a6 <main+0xc40>
					buttonTriggered = false;
					state ++;
    179e:	08 94       	sec
    17a0:	61 1c       	adc	r6, r1
    17a2:	71 1c       	adc	r7, r1
    17a4:	12 01       	movw	r2, r4
					counterRef = counter;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    17a6:	c3 01       	movw	r24, r6
    17a8:	b2 01       	movw	r22, r4
    17aa:	a1 01       	movw	r20, r2
    17ac:	0e 94 2a 02 	call	0x454	; 0x454 <_Z12firstB_transiii>
    17b0:	88 23       	and	r24, r24
    17b2:	61 f0       	breq	.+24     	; 0x17cc <main+0xc66>
					state ++;
    17b4:	08 94       	sec
    17b6:	61 1c       	adc	r6, r1
    17b8:	71 1c       	adc	r7, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    17ba:	9a e0       	ldi	r25, 0x0A	; 10
    17bc:	69 16       	cp	r6, r25
    17be:	71 04       	cpc	r7, r1
    17c0:	b9 f1       	breq	.+110    	; 0x1830 <main+0xcca>
    17c2:	6d e0       	ldi	r22, 0x0D	; 13
    17c4:	66 16       	cp	r6, r22
    17c6:	71 04       	cpc	r7, r1
    17c8:	99 f1       	breq	.+102    	; 0x1830 <main+0xcca>
    17ca:	12 01       	movw	r2, r4
						counterRef = counter;
				}

				if(state == B1STOP2 && counter - counterRef > pWait){
    17cc:	7e e0       	ldi	r23, 0x0E	; 14
    17ce:	67 16       	cp	r6, r23
    17d0:	71 04       	cpc	r7, r1
    17d2:	61 f4       	brne	.+24     	; 0x17ec <main+0xc86>
    17d4:	92 01       	movw	r18, r4
    17d6:	22 19       	sub	r18, r2
    17d8:	33 09       	sbc	r19, r3
    17da:	80 91 95 03 	lds	r24, 0x0395
    17de:	90 91 96 03 	lds	r25, 0x0396
    17e2:	82 17       	cp	r24, r18
    17e4:	93 07       	cpc	r25, r19
    17e6:	24 f5       	brge	.+72     	; 0x1830 <main+0xcca>
    17e8:	12 01       	movw	r2, r4
    17ea:	04 c0       	rjmp	.+8      	; 0x17f4 <main+0xc8e>
					state = MOVED1;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    17ec:	87 e1       	ldi	r24, 0x17	; 23
    17ee:	68 16       	cp	r6, r24
    17f0:	71 04       	cpc	r7, r1
    17f2:	f1 f4       	brne	.+60     	; 0x1830 <main+0xcca>
    17f4:	a2 01       	movw	r20, r4
    17f6:	42 19       	sub	r20, r2
    17f8:	53 09       	sbc	r21, r3
    17fa:	20 91 c1 03 	lds	r18, 0x03C1
    17fe:	30 91 c2 03 	lds	r19, 0x03C2
    1802:	80 91 a7 03 	lds	r24, 0x03A7
    1806:	90 91 a8 03 	lds	r25, 0x03A8
    180a:	bc 01       	movw	r22, r24
    180c:	26 9f       	mul	r18, r22
    180e:	c0 01       	movw	r24, r0
    1810:	27 9f       	mul	r18, r23
    1812:	90 0d       	add	r25, r0
    1814:	36 9f       	mul	r19, r22
    1816:	90 0d       	add	r25, r0
    1818:	11 24       	eor	r1, r1
    181a:	84 17       	cp	r24, r20
    181c:	95 07       	cpc	r25, r21
    181e:	2c f4       	brge	.+10     	; 0x182a <main+0xcc4>
    1820:	12 01       	movw	r2, r4
    1822:	b8 e1       	ldi	r27, 0x18	; 24
    1824:	6b 2e       	mov	r6, r27
    1826:	71 2c       	mov	r7, r1
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <main+0xcca>
    182a:	a7 e1       	ldi	r26, 0x17	; 23
    182c:	6a 2e       	mov	r6, r26
    182e:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1830:	c3 01       	movw	r24, r6
    1832:	b2 01       	movw	r22, r4
    1834:	a1 01       	movw	r20, r2
    1836:	2d a9       	ldd	r18, Y+53	; 0x35
    1838:	3e a9       	ldd	r19, Y+54	; 0x36
    183a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z9dry_transiiii>
    183e:	88 23       	and	r24, r24
    1840:	49 f0       	breq	.+18     	; 0x1854 <main+0xcee>
					state ++;
    1842:	08 94       	sec
    1844:	61 1c       	adc	r6, r1
    1846:	71 1c       	adc	r7, r1
					if(state != D1STOP)
    1848:	7a e1       	ldi	r23, 0x1A	; 26
    184a:	67 16       	cp	r6, r23
    184c:	71 04       	cpc	r7, r1
    184e:	09 f4       	brne	.+2      	; 0x1852 <main+0xcec>
    1850:	dc c0       	rjmp	.+440    	; 0x1a0a <main+0xea4>
    1852:	12 01       	movw	r2, r4
						counterRef = counter;
					if(state == D1STOP)
						counterRefFive = counter;
				}

				if(state == END && counter - counterRef > 10){
    1854:	83 e2       	ldi	r24, 0x23	; 35
    1856:	68 16       	cp	r6, r24
    1858:	71 04       	cpc	r7, r1
    185a:	51 f4       	brne	.+20     	; 0x1870 <main+0xd0a>
    185c:	c2 01       	movw	r24, r4
    185e:	82 19       	sub	r24, r2
    1860:	93 09       	sbc	r25, r3
    1862:	0b 97       	sbiw	r24, 0x0b	; 11
    1864:	0c f4       	brge	.+2      	; 0x1868 <main+0xd02>
    1866:	1f c1       	rjmp	.+574    	; 0x1aa6 <main+0xf40>
    1868:	f4 e2       	ldi	r31, 0x24	; 36
    186a:	6f 2e       	mov	r6, r31
    186c:	71 2c       	mov	r7, r1
    186e:	32 c1       	rjmp	.+612    	; 0x1ad4 <main+0xf6e>
				}


				//state actions
						
			switch (state){
    1870:	f3 01       	movw	r30, r6
    1872:	e4 32       	cpi	r30, 0x24	; 36
    1874:	f1 05       	cpc	r31, r1
    1876:	08 f0       	brcs	.+2      	; 0x187a <main+0xd14>
    1878:	2d c1       	rjmp	.+602    	; 0x1ad4 <main+0xf6e>
    187a:	ee 58       	subi	r30, 0x8E	; 142
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	ee 0f       	add	r30, r30
    1880:	ff 1f       	adc	r31, r31
    1882:	05 90       	lpm	r0, Z+
    1884:	f4 91       	lpm	r31, Z+
    1886:	e0 2d       	mov	r30, r0
    1888:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    188a:	80 91 d2 03 	lds	r24, 0x03D2
    188e:	90 91 ce 03 	lds	r25, 0x03CE
    1892:	20 91 d0 03 	lds	r18, 0x03D0
    1896:	82 ff       	sbrs	r24, 2
    1898:	08 c0       	rjmp	.+16     	; 0x18aa <main+0xd44>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    189a:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    189c:	27 7f       	andi	r18, 0xF7	; 247
    189e:	20 93 d0 03 	sts	0x03D0, r18
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    18a2:	90 62       	ori	r25, 0x20	; 32
    18a4:	90 93 ce 03 	sts	0x03CE, r25
    18a8:	15 c1       	rjmp	.+554    	; 0x1ad4 <main+0xf6e>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    18aa:	9f 7d       	andi	r25, 0xDF	; 223
    18ac:	90 93 ce 03 	sts	0x03CE, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    18b0:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    18b2:	28 60       	ori	r18, 0x08	; 8
    18b4:	20 93 d0 03 	sts	0x03D0, r18
						if(print0 == 1){
    18b8:	6b a9       	ldd	r22, Y+51	; 0x33
    18ba:	7c a9       	ldd	r23, Y+52	; 0x34
    18bc:	61 30       	cpi	r22, 0x01	; 1
    18be:	71 05       	cpc	r23, r1
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <main+0xd5e>
    18c2:	43 c0       	rjmp	.+134    	; 0x194a <main+0xde4>
							OrangutanLCD::gotoXY(0,1);
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	61 e0       	ldi	r22, 0x01	; 1
    18c8:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	91 e0       	ldi	r25, 0x01	; 1
    18d0:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    18d4:	88 24       	eor	r8, r8
    18d6:	99 24       	eor	r9, r9
    18d8:	1c aa       	std	Y+52, r1	; 0x34
    18da:	1b aa       	std	Y+51, r1	; 0x33
    18dc:	fb c0       	rjmp	.+502    	; 0x1ad4 <main+0xf6e>
							print0 = 0;
						}
					}
					break;
				case LOAD:
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    18de:	20 91 d0 03 	lds	r18, 0x03D0
    18e2:	32 2f       	mov	r19, r18
    18e4:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    18e6:	c2 01       	movw	r24, r4
    18e8:	68 ec       	ldi	r22, 0xC8	; 200
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__divmodhi4>
    18f0:	84 36       	cpi	r24, 0x64	; 100
    18f2:	91 05       	cpc	r25, r1
    18f4:	24 f4       	brge	.+8      	; 0x18fe <main+0xd98>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    18f6:	2c 7f       	andi	r18, 0xFC	; 252
    18f8:	20 93 d0 03 	sts	0x03D0, r18
    18fc:	03 c0       	rjmp	.+6      	; 0x1904 <main+0xd9e>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    18fe:	32 60       	ori	r19, 0x02	; 2
    1900:	30 93 d0 03 	sts	0x03D0, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    1904:	80 91 ce 03 	lds	r24, 0x03CE
    1908:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    190a:	84 60       	ori	r24, 0x04	; 4
    190c:	80 93 ce 03 	sts	0x03CE, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1910:	80 91 d0 03 	lds	r24, 0x03D0
    1914:	8b 7f       	andi	r24, 0xFB	; 251
    1916:	80 93 d0 03 	sts	0x03D0, r24
    191a:	c0 c0       	rjmp	.+384    	; 0x1a9c <main+0xf36>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    191c:	80 91 d0 03 	lds	r24, 0x03D0
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1920:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1922:	86 61       	ori	r24, 0x16	; 22
    1924:	80 93 d0 03 	sts	0x03D0, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1928:	80 91 ce 03 	lds	r24, 0x03CE
    192c:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    192e:	8b 7f       	andi	r24, 0xFB	; 251
    1930:	80 93 ce 03 	sts	0x03CE, r24
    1934:	c2 c0       	rjmp	.+388    	; 0x1aba <main+0xf54>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1936:	80 91 ce 03 	lds	r24, 0x03CE
    193a:	8f 7d       	andi	r24, 0xDF	; 223
    193c:	80 93 ce 03 	sts	0x03CE, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1940:	80 91 d0 03 	lds	r24, 0x03D0
    1944:	88 60       	ori	r24, 0x08	; 8
    1946:	80 93 d0 03 	sts	0x03D0, r24
    194a:	88 24       	eor	r8, r8
    194c:	99 24       	eor	r9, r9
    194e:	c2 c0       	rjmp	.+388    	; 0x1ad4 <main+0xf6e>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1950:	80 91 d0 03 	lds	r24, 0x03D0
    1954:	8f 7e       	andi	r24, 0xEF	; 239
    1956:	80 93 d0 03 	sts	0x03D0, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    195a:	80 91 ce 03 	lds	r24, 0x03CE
    195e:	80 62       	ori	r24, 0x20	; 32
    1960:	80 93 ce 03 	sts	0x03CE, r24
    1964:	b7 c0       	rjmp	.+366    	; 0x1ad4 <main+0xf6e>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    1966:	80 91 cf 03 	lds	r24, 0x03CF
    196a:	81 60       	ori	r24, 0x01	; 1
    196c:	80 93 cf 03 	sts	0x03CF, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    1970:	80 91 ce 03 	lds	r24, 0x03CE
    1974:	8f 77       	andi	r24, 0x7F	; 127
    1976:	80 93 ce 03 	sts	0x03CE, r24
    197a:	e7 cf       	rjmp	.-50     	; 0x194a <main+0xde4>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    197c:	80 91 d0 03 	lds	r24, 0x03D0
    1980:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    1982:	8f 7d       	andi	r24, 0xDF	; 223
    1984:	80 93 d0 03 	sts	0x03D0, r24
    1988:	61 e0       	ldi	r22, 0x01	; 1
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	78 87       	std	Y+8, r23	; 0x08
    198e:	6f 83       	std	Y+7, r22	; 0x07
    1990:	a1 c0       	rjmp	.+322    	; 0x1ad4 <main+0xf6e>
					break;
				case CLEAN1_1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1992:	80 91 ce 03 	lds	r24, 0x03CE
    1996:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1998:	8f 7e       	andi	r24, 0xEF	; 239
    199a:	80 93 ce 03 	sts	0x03CE, r24
    199e:	e1 e0       	ldi	r30, 0x01	; 1
    19a0:	8e 2e       	mov	r8, r30
    19a2:	91 2c       	mov	r9, r1
    19a4:	97 c0       	rjmp	.+302    	; 0x1ad4 <main+0xf6e>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    19a6:	80 91 ce 03 	lds	r24, 0x03CE
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    19aa:	80 63       	ori	r24, 0x30	; 48
    19ac:	f6 cf       	rjmp	.-20     	; 0x199a <main+0xe34>
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    19ae:	80 91 ce 03 	lds	r24, 0x03CE
    19b2:	8f 77       	andi	r24, 0x7F	; 127
    19b4:	80 93 ce 03 	sts	0x03CE, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    19b8:	80 91 d0 03 	lds	r24, 0x03D0
    19bc:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    19be:	8f 7d       	andi	r24, 0xDF	; 223
    19c0:	80 93 d0 03 	sts	0x03D0, r24
    19c4:	88 24       	eor	r8, r8
    19c6:	99 24       	eor	r9, r9
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	98 87       	std	Y+8, r25	; 0x08
    19ce:	8f 83       	std	Y+7, r24	; 0x07
    19d0:	81 c0       	rjmp	.+258    	; 0x1ad4 <main+0xf6e>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    19d2:	80 91 d0 03 	lds	r24, 0x03D0
    19d6:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    19d8:	80 62       	ori	r24, 0x20	; 32
    19da:	80 93 d0 03 	sts	0x03D0, r24
    19de:	88 24       	eor	r8, r8
    19e0:	99 24       	eor	r9, r9
    19e2:	18 86       	std	Y+8, r1	; 0x08
    19e4:	1f 82       	std	Y+7, r1	; 0x07
    19e6:	76 c0       	rjmp	.+236    	; 0x1ad4 <main+0xf6e>
				
					break;
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    19e8:	80 91 ce 03 	lds	r24, 0x03CE
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    19ec:	80 63       	ori	r24, 0x30	; 48
    19ee:	80 93 ce 03 	sts	0x03CE, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    19f2:	80 91 cf 03 	lds	r24, 0x03CF
    19f6:	8e 7f       	andi	r24, 0xFE	; 254
    19f8:	80 93 cf 03 	sts	0x03CF, r24
    19fc:	d0 cf       	rjmp	.-96     	; 0x199e <main+0xe38>
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    19fe:	80 91 d1 03 	lds	r24, 0x03D1
    1a02:	87 7f       	andi	r24, 0xF7	; 247
    1a04:	80 93 d1 03 	sts	0x03D1, r24
    1a08:	a0 cf       	rjmp	.-192    	; 0x194a <main+0xde4>
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
    1a0a:	5e aa       	std	Y+54, r5	; 0x36
    1a0c:	4d aa       	std	Y+53, r4	; 0x35
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1a0e:	80 91 d1 03 	lds	r24, 0x03D1
    1a12:	88 60       	ori	r24, 0x08	; 8
    1a14:	80 93 d1 03 	sts	0x03D1, r24
    1a18:	7a e1       	ldi	r23, 0x1A	; 26
    1a1a:	67 2e       	mov	r6, r23
    1a1c:	71 2c       	mov	r7, r1
    1a1e:	5a c0       	rjmp	.+180    	; 0x1ad4 <main+0xf6e>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    1a20:	80 91 cf 03 	lds	r24, 0x03CF
    1a24:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1a26:	8f 7d       	andi	r24, 0xDF	; 223
    1a28:	80 93 cf 03 	sts	0x03CF, r24
    1a2c:	88 24       	eor	r8, r8
    1a2e:	99 24       	eor	r9, r9
    1a30:	61 e0       	ldi	r22, 0x01	; 1
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	78 a3       	std	Y+32, r23	; 0x20
    1a36:	6f 8f       	std	Y+31, r22	; 0x1f
    1a38:	4d c0       	rjmp	.+154    	; 0x1ad4 <main+0xf6e>
					paperTowelMotor = 1;
					break;
				case D2RAISE:
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1a3a:	80 91 d1 03 	lds	r24, 0x03D1
    1a3e:	8d 7f       	andi	r24, 0xFD	; 253
    1a40:	80 93 d1 03 	sts	0x03D1, r24
    1a44:	47 c0       	rjmp	.+142    	; 0x1ad4 <main+0xf6e>
					break;
				case DRY2:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1a46:	80 91 ce 03 	lds	r24, 0x03CE
    1a4a:	16 c0       	rjmp	.+44     	; 0x1a78 <main+0xf12>
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    1a4c:	80 91 cf 03 	lds	r24, 0x03CF
    1a50:	8f 7b       	andi	r24, 0xBF	; 191
    1a52:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1a56:	80 91 d1 03 	lds	r24, 0x03D1
    1a5a:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1a5c:	8b 7f       	andi	r24, 0xFB	; 251
    1a5e:	80 93 d1 03 	sts	0x03D1, r24
    1a62:	18 a2       	std	Y+32, r1	; 0x20
    1a64:	1f 8e       	std	Y+31, r1	; 0x1f
    1a66:	36 c0       	rjmp	.+108    	; 0x1ad4 <main+0xf6e>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1a68:	80 91 d0 03 	lds	r24, 0x03D0
    1a6c:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1a6e:	80 61       	ori	r24, 0x10	; 16
    1a70:	6a cf       	rjmp	.-300    	; 0x1946 <main+0xde0>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1a72:	80 91 ce 03 	lds	r24, 0x03CE
    1a76:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1a78:	80 62       	ori	r24, 0x20	; 32
    1a7a:	8f cf       	rjmp	.-226    	; 0x199a <main+0xe34>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1a7c:	80 91 ce 03 	lds	r24, 0x03CE
    1a80:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1a82:	84 60       	ori	r24, 0x04	; 4
    1a84:	80 93 ce 03 	sts	0x03CE, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1a88:	80 91 d0 03 	lds	r24, 0x03D0
    1a8c:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1a8e:	8f 7e       	andi	r24, 0xEF	; 239
    1a90:	5a cf       	rjmp	.-332    	; 0x1946 <main+0xde0>
					break;
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1a92:	80 91 ce 03 	lds	r24, 0x03CE
    1a96:	8d 7f       	andi	r24, 0xFD	; 253
    1a98:	80 93 ce 03 	sts	0x03CE, r24
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9e a7       	std	Y+46, r25	; 0x2e
    1aa2:	8d a7       	std	Y+45, r24	; 0x2d
    1aa4:	17 c0       	rjmp	.+46     	; 0x1ad4 <main+0xf6e>
					plateLoadMotor = 1;
					break;
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1aa6:	80 91 ce 03 	lds	r24, 0x03CE
    1aaa:	8b 7f       	andi	r24, 0xFB	; 251
    1aac:	80 93 ce 03 	sts	0x03CE, r24
					if(print35 == 1){
    1ab0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab4:	61 30       	cpi	r22, 0x01	; 1
    1ab6:	71 05       	cpc	r23, r1
    1ab8:	19 f0       	breq	.+6      	; 0x1ac0 <main+0xf5a>
    1aba:	1e a6       	std	Y+46, r1	; 0x2e
    1abc:	1d a6       	std	Y+45, r1	; 0x2d
    1abe:	0a c0       	rjmp	.+20     	; 0x1ad4 <main+0xf6e>
						OrangutanLCD::clear();
    1ac0:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1ac4:	87 e5       	ldi	r24, 0x57	; 87
    1ac6:	93 e0       	ldi	r25, 0x03	; 3
    1ac8:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1acc:	1e a6       	std	Y+46, r1	; 0x2e
    1ace:	1d a6       	std	Y+45, r1	; 0x2d
    1ad0:	1a aa       	std	Y+50, r1	; 0x32
    1ad2:	19 aa       	std	Y+49, r1	; 0x31
					}
					break;
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1ad4:	c2 01       	movw	r24, r4
    1ad6:	b1 01       	movw	r22, r2
    1ad8:	4d a9       	ldd	r20, Y+53	; 0x35
    1ada:	5e a9       	ldd	r21, Y+54	; 0x36
    1adc:	2d a5       	ldd	r18, Y+45	; 0x2d
    1ade:	3e a5       	ldd	r19, Y+46	; 0x2e
    1ae0:	84 01       	movw	r16, r8
    1ae2:	ef 80       	ldd	r14, Y+7	; 0x07
    1ae4:	f8 84       	ldd	r15, Y+8	; 0x08
    1ae6:	cc 24       	eor	r12, r12
    1ae8:	dd 24       	eor	r13, r13
    1aea:	af 8c       	ldd	r10, Y+31	; 0x1f
    1aec:	b8 a0       	ldd	r11, Y+32	; 0x20
    1aee:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z15motor_and_writeiiiiiiii>
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("FIRST B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1afa:	74 e2       	ldi	r23, 0x24	; 36
    1afc:	67 16       	cp	r6, r23
    1afe:	71 04       	cpc	r7, r1
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <main+0xf9e>
    1b02:	a6 c6       	rjmp	.+3404   	; 0x2850 <main+0x1cea>
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				counter ++;
    1b04:	08 94       	sec
    1b06:	41 1c       	adc	r4, r1
    1b08:	51 1c       	adc	r5, r1
    1b0a:	16 ce       	rjmp	.-980    	; 0x1738 <main+0xbd2>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    1b12:	88 23       	and	r24, r24
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <main+0xfb2>
    1b16:	cb c6       	rjmp	.+3478   	; 0x28ae <main+0x1d48>
			OrangutanLCD::gotoXY(7,0);
    1b18:	87 e0       	ldi	r24, 0x07	; 7
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("SECOND B");
    1b20:	84 e6       	ldi	r24, 0x64	; 100
    1b22:	93 e0       	ldi	r25, 0x03	; 3
    1b24:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1b28:	80 91 ce 03 	lds	r24, 0x03CE
    1b2c:	80 62       	ori	r24, 0x20	; 32
    1b2e:	80 93 ce 03 	sts	0x03CE, r24
    1b32:	1c a6       	std	Y+44, r1	; 0x2c
    1b34:	1b a6       	std	Y+43, r1	; 0x2b
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	86 2e       	mov	r8, r22
    1b3a:	91 2c       	mov	r9, r1
    1b3c:	1e a2       	std	Y+38, r1	; 0x26
    1b3e:	1d a2       	std	Y+37, r1	; 0x25
    1b40:	1e 8e       	std	Y+30, r1	; 0x1e
    1b42:	1d 8e       	std	Y+29, r1	; 0x1d
    1b44:	66 24       	eor	r6, r6
    1b46:	77 24       	eor	r7, r7
    1b48:	44 24       	eor	r4, r4
    1b4a:	55 24       	eor	r5, r5
    1b4c:	22 24       	eor	r2, r2
    1b4e:	33 24       	eor	r3, r3
    1b50:	18 8a       	std	Y+16, r1	; 0x10
    1b52:	1f 86       	std	Y+15, r1	; 0x0f
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9e 8b       	std	Y+22, r25	; 0x16
    1b5a:	8d 8b       	std	Y+21, r24	; 0x15
    1b5c:	9e 87       	std	Y+14, r25	; 0x0e
    1b5e:	8d 87       	std	Y+13, r24	; 0x0d
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1b60:	84 e4       	ldi	r24, 0x44	; 68
    1b62:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1b6c:	85 e4       	ldi	r24, 0x45	; 69
    1b6e:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1b72:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_Z11i2c_readAckv>
    1b76:	80 93 d2 03 	sts	0x03D2, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1b7a:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_Z11i2c_readNakv>
    1b7e:	80 93 d3 03 	sts	0x03D3, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1b82:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>
				
				if(state != INIT){
    1b86:	61 14       	cp	r6, r1
    1b88:	71 04       	cpc	r7, r1
    1b8a:	79 f0       	breq	.+30     	; 0x1baa <main+0x1044>
					OrangutanLCD::gotoXY(0,1);
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	61 e0       	ldi	r22, 0x01	; 1
    1b90:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1b94:	80 e5       	ldi	r24, 0x50	; 80
    1b96:	93 e0       	ldi	r25, 0x03	; 3
    1b98:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1b9c:	b3 01       	movw	r22, r6
    1b9e:	88 27       	eor	r24, r24
    1ba0:	77 fd       	sbrc	r23, 7
    1ba2:	80 95       	com	r24
    1ba4:	98 2f       	mov	r25, r24
    1ba6:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <_ZN12OrangutanLCD5printEl>
					OrangutanLCD::print(state);
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1baa:	c2 01       	movw	r24, r4
    1bac:	be 01       	movw	r22, r28
    1bae:	6f 5f       	subi	r22, 0xFF	; 255
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z15button_debounceiPi>
    1bb6:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1bb8:	c3 01       	movw	r24, r6
    1bba:	a2 01       	movw	r20, r4
    1bbc:	91 01       	movw	r18, r2
    1bbe:	0e 94 de 01 	call	0x3bc	; 0x3bc <_Z10init_transibii>
    1bc2:	88 23       	and	r24, r24
    1bc4:	21 f0       	breq	.+8      	; 0x1bce <main+0x1068>
					buttonTriggered = false;
					state ++;
    1bc6:	08 94       	sec
    1bc8:	61 1c       	adc	r6, r1
    1bca:	71 1c       	adc	r7, r1
    1bcc:	12 01       	movw	r2, r4
					counterRef = counter;
				}

				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1bce:	96 e0       	ldi	r25, 0x06	; 6
    1bd0:	69 16       	cp	r6, r25
    1bd2:	71 04       	cpc	r7, r1
    1bd4:	d1 f4       	brne	.+52     	; 0x1c0a <main+0x10a4>
    1bd6:	a2 01       	movw	r20, r4
    1bd8:	42 19       	sub	r20, r2
    1bda:	53 09       	sbc	r21, r3
    1bdc:	20 91 c3 03 	lds	r18, 0x03C3
    1be0:	30 91 c4 03 	lds	r19, 0x03C4
    1be4:	80 91 a7 03 	lds	r24, 0x03A7
    1be8:	90 91 a8 03 	lds	r25, 0x03A8
    1bec:	bc 01       	movw	r22, r24
    1bee:	26 9f       	mul	r18, r22
    1bf0:	c0 01       	movw	r24, r0
    1bf2:	27 9f       	mul	r18, r23
    1bf4:	90 0d       	add	r25, r0
    1bf6:	36 9f       	mul	r19, r22
    1bf8:	90 0d       	add	r25, r0
    1bfa:	11 24       	eor	r1, r1
    1bfc:	84 17       	cp	r24, r20
    1bfe:	95 07       	cpc	r25, r21
    1c00:	24 f4       	brge	.+8      	; 0x1c0a <main+0x10a4>
    1c02:	12 01       	movw	r2, r4
    1c04:	5f e0       	ldi	r21, 0x0F	; 15
    1c06:	65 2e       	mov	r6, r21
    1c08:	71 2c       	mov	r7, r1
					state = B2SET;
					counterRef = counter;
				}

				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    1c0a:	c3 01       	movw	r24, r6
    1c0c:	b2 01       	movw	r22, r4
    1c0e:	a1 01       	movw	r20, r2
    1c10:	0e 94 c2 02 	call	0x584	; 0x584 <_Z13secondB_transiii>
    1c14:	88 23       	and	r24, r24
    1c16:	21 f0       	breq	.+8      	; 0x1c20 <main+0x10ba>
					state ++;
    1c18:	08 94       	sec
    1c1a:	61 1c       	adc	r6, r1
    1c1c:	71 1c       	adc	r7, r1
    1c1e:	12 01       	movw	r2, r4
					counterRef = counter;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    1c20:	c3 01       	movw	r24, r6
    1c22:	b2 01       	movw	r22, r4
    1c24:	a1 01       	movw	r20, r2
    1c26:	2f 85       	ldd	r18, Y+15	; 0x0f
    1c28:	38 89       	ldd	r19, Y+16	; 0x10
    1c2a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z9dry_transiiii>
    1c2e:	88 23       	and	r24, r24
    1c30:	49 f0       	breq	.+18     	; 0x1c44 <main+0x10de>
					state ++;
    1c32:	08 94       	sec
    1c34:	61 1c       	adc	r6, r1
    1c36:	71 1c       	adc	r7, r1
					if(state != D1STOP)
    1c38:	7a e1       	ldi	r23, 0x1A	; 26
    1c3a:	67 16       	cp	r6, r23
    1c3c:	71 04       	cpc	r7, r1
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <main+0x10dc>
    1c40:	e8 c0       	rjmp	.+464    	; 0x1e12 <main+0x12ac>
    1c42:	12 01       	movw	r2, r4
						counterRef = counter;
					if(state == D1STOP)
						counterRefFive = counter;
				}

				if(state == END && counter - counterRef > 10){
    1c44:	83 e2       	ldi	r24, 0x23	; 35
    1c46:	68 16       	cp	r6, r24
    1c48:	71 04       	cpc	r7, r1
    1c4a:	51 f4       	brne	.+20     	; 0x1c60 <main+0x10fa>
    1c4c:	c2 01       	movw	r24, r4
    1c4e:	82 19       	sub	r24, r2
    1c50:	93 09       	sbc	r25, r3
    1c52:	0b 97       	sbiw	r24, 0x0b	; 11
    1c54:	0c f4       	brge	.+2      	; 0x1c58 <main+0x10f2>
    1c56:	27 c1       	rjmp	.+590    	; 0x1ea6 <main+0x1340>
    1c58:	44 e2       	ldi	r20, 0x24	; 36
    1c5a:	64 2e       	mov	r6, r20
    1c5c:	71 2c       	mov	r7, r1
    1c5e:	3a c1       	rjmp	.+628    	; 0x1ed4 <main+0x136e>
				}


				//state actions
						
				switch (state){
    1c60:	f3 01       	movw	r30, r6
    1c62:	e4 32       	cpi	r30, 0x24	; 36
    1c64:	f1 05       	cpc	r31, r1
    1c66:	08 f0       	brcs	.+2      	; 0x1c6a <main+0x1104>
    1c68:	35 c1       	rjmp	.+618    	; 0x1ed4 <main+0x136e>
    1c6a:	ea 56       	subi	r30, 0x6A	; 106
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	ee 0f       	add	r30, r30
    1c70:	ff 1f       	adc	r31, r31
    1c72:	05 90       	lpm	r0, Z+
    1c74:	f4 91       	lpm	r31, Z+
    1c76:	e0 2d       	mov	r30, r0
    1c78:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    1c7a:	80 91 d2 03 	lds	r24, 0x03D2
    1c7e:	90 91 ce 03 	lds	r25, 0x03CE
    1c82:	20 91 d0 03 	lds	r18, 0x03D0
    1c86:	82 ff       	sbrs	r24, 2
    1c88:	08 c0       	rjmp	.+16     	; 0x1c9a <main+0x1134>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    1c8a:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1c8c:	27 7f       	andi	r18, 0xF7	; 247
    1c8e:	20 93 d0 03 	sts	0x03D0, r18
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1c92:	90 62       	ori	r25, 0x20	; 32
    1c94:	90 93 ce 03 	sts	0x03CE, r25
    1c98:	1d c1       	rjmp	.+570    	; 0x1ed4 <main+0x136e>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1c9a:	9f 7d       	andi	r25, 0xDF	; 223
    1c9c:	90 93 ce 03 	sts	0x03CE, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1ca0:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1ca2:	28 60       	ori	r18, 0x08	; 8
    1ca4:	20 93 d0 03 	sts	0x03D0, r18
						if(print0 == 1){
    1ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    1caa:	7e 89       	ldd	r23, Y+22	; 0x16
    1cac:	61 30       	cpi	r22, 0x01	; 1
    1cae:	71 05       	cpc	r23, r1
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <main+0x114e>
    1cb2:	43 c0       	rjmp	.+134    	; 0x1d3a <main+0x11d4>
							OrangutanLCD::gotoXY(0,1);
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1cc4:	88 24       	eor	r8, r8
    1cc6:	99 24       	eor	r9, r9
    1cc8:	1e 8a       	std	Y+22, r1	; 0x16
    1cca:	1d 8a       	std	Y+21, r1	; 0x15
    1ccc:	03 c1       	rjmp	.+518    	; 0x1ed4 <main+0x136e>
							print0 = 0;
						}
					}
					break;
				case LOAD:
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1cce:	20 91 d0 03 	lds	r18, 0x03D0
    1cd2:	32 2f       	mov	r19, r18
    1cd4:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    1cd6:	c2 01       	movw	r24, r4
    1cd8:	68 ec       	ldi	r22, 0xC8	; 200
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__divmodhi4>
    1ce0:	84 36       	cpi	r24, 0x64	; 100
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	24 f4       	brge	.+8      	; 0x1cee <main+0x1188>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1ce6:	2c 7f       	andi	r18, 0xFC	; 252
    1ce8:	20 93 d0 03 	sts	0x03D0, r18
    1cec:	03 c0       	rjmp	.+6      	; 0x1cf4 <main+0x118e>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1cee:	32 60       	ori	r19, 0x02	; 2
    1cf0:	30 93 d0 03 	sts	0x03D0, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    1cf4:	80 91 ce 03 	lds	r24, 0x03CE
    1cf8:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1cfa:	84 60       	ori	r24, 0x04	; 4
    1cfc:	80 93 ce 03 	sts	0x03CE, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1d00:	80 91 d0 03 	lds	r24, 0x03D0
    1d04:	8b 7f       	andi	r24, 0xFB	; 251
    1d06:	80 93 d0 03 	sts	0x03D0, r24
    1d0a:	c8 c0       	rjmp	.+400    	; 0x1e9c <main+0x1336>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1d0c:	80 91 d0 03 	lds	r24, 0x03D0
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1d10:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1d12:	86 61       	ori	r24, 0x16	; 22
    1d14:	80 93 d0 03 	sts	0x03D0, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d18:	80 91 ce 03 	lds	r24, 0x03CE
    1d1c:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1d1e:	8b 7f       	andi	r24, 0xFB	; 251
    1d20:	80 93 ce 03 	sts	0x03CE, r24
    1d24:	ca c0       	rjmp	.+404    	; 0x1eba <main+0x1354>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1d26:	80 91 ce 03 	lds	r24, 0x03CE
    1d2a:	8f 7d       	andi	r24, 0xDF	; 223
    1d2c:	80 93 ce 03 	sts	0x03CE, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1d30:	80 91 d0 03 	lds	r24, 0x03D0
    1d34:	88 60       	ori	r24, 0x08	; 8
    1d36:	80 93 d0 03 	sts	0x03D0, r24
    1d3a:	88 24       	eor	r8, r8
    1d3c:	99 24       	eor	r9, r9
    1d3e:	ca c0       	rjmp	.+404    	; 0x1ed4 <main+0x136e>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1d40:	80 91 d0 03 	lds	r24, 0x03D0
    1d44:	8f 7e       	andi	r24, 0xEF	; 239
    1d46:	80 93 d0 03 	sts	0x03D0, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d4a:	80 91 ce 03 	lds	r24, 0x03CE
    1d4e:	80 62       	ori	r24, 0x20	; 32
    1d50:	80 93 ce 03 	sts	0x03CE, r24
    1d54:	bf c0       	rjmp	.+382    	; 0x1ed4 <main+0x136e>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1d56:	80 91 ce 03 	lds	r24, 0x03CE
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d5a:	80 63       	ori	r24, 0x30	; 48
    1d5c:	19 c0       	rjmp	.+50     	; 0x1d90 <main+0x122a>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    1d5e:	80 91 cf 03 	lds	r24, 0x03CF
    1d62:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1d64:	8b 7f       	andi	r24, 0xFB	; 251
    1d66:	80 93 cf 03 	sts	0x03CF, r24
    1d6a:	e7 cf       	rjmp	.-50     	; 0x1d3a <main+0x11d4>
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1d6c:	80 91 d1 03 	lds	r24, 0x03D1
    1d70:	81 60       	ori	r24, 0x01	; 1
    1d72:	80 93 d1 03 	sts	0x03D1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1d76:	80 91 d0 03 	lds	r24, 0x03D0
    1d7a:	8f 77       	andi	r24, 0x7F	; 127
    1d7c:	80 93 d0 03 	sts	0x03D0, r24
    1d80:	61 e0       	ldi	r22, 0x01	; 1
    1d82:	70 e0       	ldi	r23, 0x00	; 0
    1d84:	7e a3       	std	Y+38, r23	; 0x26
    1d86:	6d a3       	std	Y+37, r22	; 0x25
    1d88:	a5 c0       	rjmp	.+330    	; 0x1ed4 <main+0x136e>
					break;
				case CLEAN2_1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d8a:	80 91 ce 03 	lds	r24, 0x03CE
    1d8e:	80 62       	ori	r24, 0x20	; 32
    1d90:	80 93 ce 03 	sts	0x03CE, r24
    1d94:	31 e0       	ldi	r19, 0x01	; 1
    1d96:	83 2e       	mov	r8, r19
    1d98:	91 2c       	mov	r9, r1
    1d9a:	9c c0       	rjmp	.+312    	; 0x1ed4 <main+0x136e>
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1d9c:	80 91 d1 03 	lds	r24, 0x03D1
    1da0:	8e 7f       	andi	r24, 0xFE	; 254
    1da2:	80 93 d1 03 	sts	0x03D1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1da6:	80 91 d0 03 	lds	r24, 0x03D0
    1daa:	80 68       	ori	r24, 0x80	; 128
    1dac:	80 93 d0 03 	sts	0x03D0, r24
    1db0:	25 c0       	rjmp	.+74     	; 0x1dfc <main+0x1296>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1db2:	80 91 cf 03 	lds	r24, 0x03CF
    1db6:	8b 7f       	andi	r24, 0xFB	; 251
    1db8:	80 93 cf 03 	sts	0x03CF, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1dbc:	80 91 d1 03 	lds	r24, 0x03D1
    1dc0:	81 60       	ori	r24, 0x01	; 1
    1dc2:	80 93 d1 03 	sts	0x03D1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1dc6:	80 91 d0 03 	lds	r24, 0x03D0
    1dca:	8f 77       	andi	r24, 0x7F	; 127
    1dcc:	80 93 d0 03 	sts	0x03D0, r24
    1dd0:	88 24       	eor	r8, r8
    1dd2:	99 24       	eor	r9, r9
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9e a3       	std	Y+38, r25	; 0x26
    1dda:	8d a3       	std	Y+37, r24	; 0x25
    1ddc:	7b c0       	rjmp	.+246    	; 0x1ed4 <main+0x136e>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1dde:	80 91 d1 03 	lds	r24, 0x03D1
    1de2:	8e 7f       	andi	r24, 0xFE	; 254
    1de4:	80 93 d1 03 	sts	0x03D1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1de8:	80 91 d0 03 	lds	r24, 0x03D0
    1dec:	80 68       	ori	r24, 0x80	; 128
    1dee:	80 93 d0 03 	sts	0x03D0, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    1df2:	80 91 cf 03 	lds	r24, 0x03CF
    1df6:	87 7f       	andi	r24, 0xF7	; 247
    1df8:	80 93 cf 03 	sts	0x03CF, r24
    1dfc:	88 24       	eor	r8, r8
    1dfe:	99 24       	eor	r9, r9
    1e00:	1e a2       	std	Y+38, r1	; 0x26
    1e02:	1d a2       	std	Y+37, r1	; 0x25
    1e04:	67 c0       	rjmp	.+206    	; 0x1ed4 <main+0x136e>
				case MOVED1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1e06:	80 91 d1 03 	lds	r24, 0x03D1
    1e0a:	87 7f       	andi	r24, 0xF7	; 247
    1e0c:	80 93 d1 03 	sts	0x03D1, r24
    1e10:	94 cf       	rjmp	.-216    	; 0x1d3a <main+0x11d4>
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
    1e12:	58 8a       	std	Y+16, r5	; 0x10
    1e14:	4f 86       	std	Y+15, r4	; 0x0f
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1e16:	80 91 d1 03 	lds	r24, 0x03D1
    1e1a:	88 60       	ori	r24, 0x08	; 8
    1e1c:	80 93 d1 03 	sts	0x03D1, r24
    1e20:	2a e1       	ldi	r18, 0x1A	; 26
    1e22:	62 2e       	mov	r6, r18
    1e24:	71 2c       	mov	r7, r1
    1e26:	56 c0       	rjmp	.+172    	; 0x1ed4 <main+0x136e>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    1e28:	80 91 cf 03 	lds	r24, 0x03CF
    1e2c:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1e2e:	8f 7d       	andi	r24, 0xDF	; 223
    1e30:	80 93 cf 03 	sts	0x03CF, r24
    1e34:	88 24       	eor	r8, r8
    1e36:	99 24       	eor	r9, r9
    1e38:	61 e0       	ldi	r22, 0x01	; 1
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	7e 8f       	std	Y+30, r23	; 0x1e
    1e3e:	6d 8f       	std	Y+29, r22	; 0x1d
    1e40:	49 c0       	rjmp	.+146    	; 0x1ed4 <main+0x136e>
					paperTowelMotor = 1;
					break;
				case D2RAISE:
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1e42:	80 91 d1 03 	lds	r24, 0x03D1
    1e46:	8d 7f       	andi	r24, 0xFD	; 253
    1e48:	80 93 d1 03 	sts	0x03D1, r24
    1e4c:	43 c0       	rjmp	.+134    	; 0x1ed4 <main+0x136e>
				case DRY2:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    1e4e:	80 91 cf 03 	lds	r24, 0x03CF
    1e52:	8f 7b       	andi	r24, 0xBF	; 191
    1e54:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1e58:	80 91 d1 03 	lds	r24, 0x03D1
    1e5c:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1e5e:	8b 7f       	andi	r24, 0xFB	; 251
    1e60:	80 93 d1 03 	sts	0x03D1, r24
    1e64:	1e 8e       	std	Y+30, r1	; 0x1e
    1e66:	1d 8e       	std	Y+29, r1	; 0x1d
    1e68:	35 c0       	rjmp	.+106    	; 0x1ed4 <main+0x136e>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1e6a:	80 91 d0 03 	lds	r24, 0x03D0
    1e6e:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1e70:	80 61       	ori	r24, 0x10	; 16
    1e72:	61 cf       	rjmp	.-318    	; 0x1d36 <main+0x11d0>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1e74:	80 91 ce 03 	lds	r24, 0x03CE
    1e78:	8f 7e       	andi	r24, 0xEF	; 239
    1e7a:	89 cf       	rjmp	.-238    	; 0x1d8e <main+0x1228>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1e7c:	80 91 ce 03 	lds	r24, 0x03CE
    1e80:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1e82:	84 60       	ori	r24, 0x04	; 4
    1e84:	80 93 ce 03 	sts	0x03CE, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1e88:	80 91 d0 03 	lds	r24, 0x03D0
    1e8c:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1e8e:	8f 7e       	andi	r24, 0xEF	; 239
    1e90:	52 cf       	rjmp	.-348    	; 0x1d36 <main+0x11d0>
					break;
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1e92:	80 91 ce 03 	lds	r24, 0x03CE
    1e96:	8d 7f       	andi	r24, 0xFD	; 253
    1e98:	80 93 ce 03 	sts	0x03CE, r24
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	9c a7       	std	Y+44, r25	; 0x2c
    1ea2:	8b a7       	std	Y+43, r24	; 0x2b
    1ea4:	17 c0       	rjmp	.+46     	; 0x1ed4 <main+0x136e>
					plateLoadMotor = 1;
					break;
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1ea6:	80 91 ce 03 	lds	r24, 0x03CE
    1eaa:	8b 7f       	andi	r24, 0xFB	; 251
    1eac:	80 93 ce 03 	sts	0x03CE, r24
					if(print35 == 1){
    1eb0:	6d 85       	ldd	r22, Y+13	; 0x0d
    1eb2:	7e 85       	ldd	r23, Y+14	; 0x0e
    1eb4:	61 30       	cpi	r22, 0x01	; 1
    1eb6:	71 05       	cpc	r23, r1
    1eb8:	19 f0       	breq	.+6      	; 0x1ec0 <main+0x135a>
    1eba:	1c a6       	std	Y+44, r1	; 0x2c
    1ebc:	1b a6       	std	Y+43, r1	; 0x2b
    1ebe:	0a c0       	rjmp	.+20     	; 0x1ed4 <main+0x136e>
						OrangutanLCD::clear();
    1ec0:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1ec4:	87 e5       	ldi	r24, 0x57	; 87
    1ec6:	93 e0       	ldi	r25, 0x03	; 3
    1ec8:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1ecc:	1c a6       	std	Y+44, r1	; 0x2c
    1ece:	1b a6       	std	Y+43, r1	; 0x2b
    1ed0:	1e 86       	std	Y+14, r1	; 0x0e
    1ed2:	1d 86       	std	Y+13, r1	; 0x0d
					}
					break;
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    1ed4:	c2 01       	movw	r24, r4
    1ed6:	b1 01       	movw	r22, r2
    1ed8:	4f 85       	ldd	r20, Y+15	; 0x0f
    1eda:	58 89       	ldd	r21, Y+16	; 0x10
    1edc:	2b a5       	ldd	r18, Y+43	; 0x2b
    1ede:	3c a5       	ldd	r19, Y+44	; 0x2c
    1ee0:	84 01       	movw	r16, r8
    1ee2:	ee 24       	eor	r14, r14
    1ee4:	ff 24       	eor	r15, r15
    1ee6:	cd a0       	ldd	r12, Y+37	; 0x25
    1ee8:	de a0       	ldd	r13, Y+38	; 0x26
    1eea:	ad 8c       	ldd	r10, Y+29	; 0x1d
    1eec:	be 8c       	ldd	r11, Y+30	; 0x1e
    1eee:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z15motor_and_writeiiiiiiii>
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>

		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("SECOND B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1efa:	74 e2       	ldi	r23, 0x24	; 36
    1efc:	67 16       	cp	r6, r23
    1efe:	71 04       	cpc	r7, r1
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <main+0x139e>
    1f02:	a6 c4       	rjmp	.+2380   	; 0x2850 <main+0x1cea>
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				counter ++;
    1f04:	08 94       	sec
    1f06:	41 1c       	adc	r4, r1
    1f08:	51 1c       	adc	r5, r1
    1f0a:	2a ce       	rjmp	.-940    	; 0x1b60 <main+0xffa>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    1f12:	88 23       	and	r24, r24
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <main+0x13b2>
    1f16:	d1 c4       	rjmp	.+2466   	; 0x28ba <main+0x1d54>
			OrangutanLCD::gotoXY(7,0);
    1f18:	87 e0       	ldi	r24, 0x07	; 7
    1f1a:	60 e0       	ldi	r22, 0x00	; 0
    1f1c:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("BOTH B");
    1f20:	8d e6       	ldi	r24, 0x6D	; 109
    1f22:	93 e0       	ldi	r25, 0x03	; 3
    1f24:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1f28:	80 91 ce 03 	lds	r24, 0x03CE
    1f2c:	80 62       	ori	r24, 0x20	; 32
    1f2e:	80 93 ce 03 	sts	0x03CE, r24
    1f32:	1a a6       	std	Y+42, r1	; 0x2a
    1f34:	19 a6       	std	Y+41, r1	; 0x29
    1f36:	91 e0       	ldi	r25, 0x01	; 1
    1f38:	89 2e       	mov	r8, r25
    1f3a:	91 2c       	mov	r9, r1
    1f3c:	1c a2       	std	Y+36, r1	; 0x24
    1f3e:	1b a2       	std	Y+35, r1	; 0x23
    1f40:	1c 8e       	std	Y+28, r1	; 0x1c
    1f42:	1b 8e       	std	Y+27, r1	; 0x1b
    1f44:	66 24       	eor	r6, r6
    1f46:	77 24       	eor	r7, r7
    1f48:	44 24       	eor	r4, r4
    1f4a:	55 24       	eor	r5, r5
    1f4c:	22 24       	eor	r2, r2
    1f4e:	33 24       	eor	r3, r3
    1f50:	18 8e       	std	Y+24, r1	; 0x18
    1f52:	1f 8a       	std	Y+23, r1	; 0x17
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	9c 8b       	std	Y+20, r25	; 0x14
    1f5a:	8b 8b       	std	Y+19, r24	; 0x13
    1f5c:	9c 87       	std	Y+12, r25	; 0x0c
    1f5e:	8b 87       	std	Y+11, r24	; 0x0b
    1f60:	1e 82       	std	Y+6, r1	; 0x06
    1f62:	1d 82       	std	Y+5, r1	; 0x05
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    1f64:	84 e4       	ldi	r24, 0x44	; 68
    1f66:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1f70:	85 e4       	ldi	r24, 0x45	; 69
    1f72:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    1f76:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_Z11i2c_readAckv>
    1f7a:	80 93 d2 03 	sts	0x03D2, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1f7e:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_Z11i2c_readNakv>
    1f82:	80 93 d3 03 	sts	0x03D3, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    1f86:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>
				
				if(state != INIT){
    1f8a:	61 14       	cp	r6, r1
    1f8c:	71 04       	cpc	r7, r1
    1f8e:	b9 f0       	breq	.+46     	; 0x1fbe <main+0x1458>
					OrangutanLCD::gotoXY(6,1);
    1f90:	86 e0       	ldi	r24, 0x06	; 6
    1f92:	61 e0       	ldi	r22, 0x01	; 1
    1f94:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("       ");
    1f98:	84 e7       	ldi	r24, 0x74	; 116
    1f9a:	93 e0       	ldi	r25, 0x03	; 3
    1f9c:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	61 e0       	ldi	r22, 0x01	; 1
    1fa4:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    1fa8:	80 e5       	ldi	r24, 0x50	; 80
    1faa:	93 e0       	ldi	r25, 0x03	; 3
    1fac:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    1fb0:	b3 01       	movw	r22, r6
    1fb2:	88 27       	eor	r24, r24
    1fb4:	77 fd       	sbrc	r23, 7
    1fb6:	80 95       	com	r24
    1fb8:	98 2f       	mov	r25, r24
    1fba:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <_ZN12OrangutanLCD5printEl>
					OrangutanLCD::print(state);
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1fbe:	c2 01       	movw	r24, r4
    1fc0:	be 01       	movw	r22, r28
    1fc2:	6f 5f       	subi	r22, 0xFF	; 255
    1fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z15button_debounceiPi>
    1fca:	68 2f       	mov	r22, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    1fcc:	c3 01       	movw	r24, r6
    1fce:	a2 01       	movw	r20, r4
    1fd0:	91 01       	movw	r18, r2
    1fd2:	0e 94 de 01 	call	0x3bc	; 0x3bc <_Z10init_transibii>
    1fd6:	88 23       	and	r24, r24
    1fd8:	21 f0       	breq	.+8      	; 0x1fe2 <main+0x147c>
					buttonTriggered = false;
					state ++;
    1fda:	08 94       	sec
    1fdc:	61 1c       	adc	r6, r1
    1fde:	71 1c       	adc	r7, r1
    1fe0:	12 01       	movw	r2, r4
					counterRef = counter;
				}

				
				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    1fe2:	c3 01       	movw	r24, r6
    1fe4:	b2 01       	movw	r22, r4
    1fe6:	a1 01       	movw	r20, r2
    1fe8:	0e 94 2a 02 	call	0x454	; 0x454 <_Z12firstB_transiii>
    1fec:	88 23       	and	r24, r24
    1fee:	61 f0       	breq	.+24     	; 0x2008 <main+0x14a2>
					state ++;
    1ff0:	08 94       	sec
    1ff2:	61 1c       	adc	r6, r1
    1ff4:	71 1c       	adc	r7, r1
					if(state != B1STOP1 && state != CLEAN1_3)
    1ff6:	9a e0       	ldi	r25, 0x0A	; 10
    1ff8:	69 16       	cp	r6, r25
    1ffa:	71 04       	cpc	r7, r1
    1ffc:	29 f0       	breq	.+10     	; 0x2008 <main+0x14a2>
    1ffe:	6d e0       	ldi	r22, 0x0D	; 13
    2000:	66 16       	cp	r6, r22
    2002:	71 04       	cpc	r7, r1
    2004:	09 f0       	breq	.+2      	; 0x2008 <main+0x14a2>
    2006:	12 01       	movw	r2, r4
						counterRef = counter;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    2008:	c3 01       	movw	r24, r6
    200a:	b2 01       	movw	r22, r4
    200c:	a1 01       	movw	r20, r2
    200e:	0e 94 c2 02 	call	0x584	; 0x584 <_Z13secondB_transiii>
    2012:	88 23       	and	r24, r24
    2014:	21 f0       	breq	.+8      	; 0x201e <main+0x14b8>
					state ++;
    2016:	08 94       	sec
    2018:	61 1c       	adc	r6, r1
    201a:	71 1c       	adc	r7, r1
    201c:	12 01       	movw	r2, r4
					counterRef = counter;
				}

				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    201e:	c3 01       	movw	r24, r6
    2020:	b2 01       	movw	r22, r4
    2022:	a1 01       	movw	r20, r2
    2024:	2f 89       	ldd	r18, Y+23	; 0x17
    2026:	38 8d       	ldd	r19, Y+24	; 0x18
    2028:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z9dry_transiiii>
    202c:	88 23       	and	r24, r24
    202e:	49 f0       	breq	.+18     	; 0x2042 <main+0x14dc>
					state ++;
    2030:	08 94       	sec
    2032:	61 1c       	adc	r6, r1
    2034:	71 1c       	adc	r7, r1
					if(state != D1STOP)
    2036:	7a e1       	ldi	r23, 0x1A	; 26
    2038:	67 16       	cp	r6, r23
    203a:	71 04       	cpc	r7, r1
    203c:	09 f4       	brne	.+2      	; 0x2040 <main+0x14da>
    203e:	28 c1       	rjmp	.+592    	; 0x2290 <main+0x172a>
    2040:	12 01       	movw	r2, r4
						counterRef = counter;
					if(state == D1STOP)
						counterRefFive = counter;
				}

				if(state == END && counter - counterRef > 10){
    2042:	83 e2       	ldi	r24, 0x23	; 35
    2044:	68 16       	cp	r6, r24
    2046:	71 04       	cpc	r7, r1
    2048:	51 f4       	brne	.+20     	; 0x205e <main+0x14f8>
    204a:	c2 01       	movw	r24, r4
    204c:	82 19       	sub	r24, r2
    204e:	93 09       	sbc	r25, r3
    2050:	0b 97       	sbiw	r24, 0x0b	; 11
    2052:	0c f4       	brge	.+2      	; 0x2056 <main+0x14f0>
    2054:	6b c1       	rjmp	.+726    	; 0x232c <main+0x17c6>
    2056:	84 e2       	ldi	r24, 0x24	; 36
    2058:	68 2e       	mov	r6, r24
    205a:	71 2c       	mov	r7, r1
    205c:	7e c1       	rjmp	.+764    	; 0x235a <main+0x17f4>
				}


				//state actions
						
			switch (state){
    205e:	f3 01       	movw	r30, r6
    2060:	e4 32       	cpi	r30, 0x24	; 36
    2062:	f1 05       	cpc	r31, r1
    2064:	08 f0       	brcs	.+2      	; 0x2068 <main+0x1502>
    2066:	79 c1       	rjmp	.+754    	; 0x235a <main+0x17f4>
    2068:	e6 54       	subi	r30, 0x46	; 70
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	05 90       	lpm	r0, Z+
    2072:	f4 91       	lpm	r31, Z+
    2074:	e0 2d       	mov	r30, r0
    2076:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    2078:	80 91 d2 03 	lds	r24, 0x03D2
    207c:	90 91 ce 03 	lds	r25, 0x03CE
    2080:	20 91 d0 03 	lds	r18, 0x03D0
    2084:	82 ff       	sbrs	r24, 2
    2086:	08 c0       	rjmp	.+16     	; 0x2098 <main+0x1532>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    2088:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    208a:	27 7f       	andi	r18, 0xF7	; 247
    208c:	20 93 d0 03 	sts	0x03D0, r18
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2090:	90 62       	ori	r25, 0x20	; 32
    2092:	90 93 ce 03 	sts	0x03CE, r25
    2096:	61 c1       	rjmp	.+706    	; 0x235a <main+0x17f4>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2098:	9f 7d       	andi	r25, 0xDF	; 223
    209a:	90 93 ce 03 	sts	0x03CE, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    209e:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    20a0:	28 60       	ori	r18, 0x08	; 8
    20a2:	20 93 d0 03 	sts	0x03D0, r18
						if(print0 == 1){
    20a6:	6b 89       	ldd	r22, Y+19	; 0x13
    20a8:	7c 89       	ldd	r23, Y+20	; 0x14
    20aa:	61 30       	cpi	r22, 0x01	; 1
    20ac:	71 05       	cpc	r23, r1
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <main+0x154c>
    20b0:	43 c0       	rjmp	.+134    	; 0x2138 <main+0x15d2>
							OrangutanLCD::gotoXY(0,1);
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	91 e0       	ldi	r25, 0x01	; 1
    20be:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    20c2:	88 24       	eor	r8, r8
    20c4:	99 24       	eor	r9, r9
    20c6:	1c 8a       	std	Y+20, r1	; 0x14
    20c8:	1b 8a       	std	Y+19, r1	; 0x13
    20ca:	47 c1       	rjmp	.+654    	; 0x235a <main+0x17f4>
							print0 = 0;
						}
					}
					break;
				case LOAD:
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    20cc:	20 91 d0 03 	lds	r18, 0x03D0
    20d0:	32 2f       	mov	r19, r18
    20d2:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    20d4:	c2 01       	movw	r24, r4
    20d6:	68 ec       	ldi	r22, 0xC8	; 200
    20d8:	70 e0       	ldi	r23, 0x00	; 0
    20da:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__divmodhi4>
    20de:	84 36       	cpi	r24, 0x64	; 100
    20e0:	91 05       	cpc	r25, r1
    20e2:	24 f4       	brge	.+8      	; 0x20ec <main+0x1586>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    20e4:	2c 7f       	andi	r18, 0xFC	; 252
    20e6:	20 93 d0 03 	sts	0x03D0, r18
    20ea:	03 c0       	rjmp	.+6      	; 0x20f2 <main+0x158c>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    20ec:	32 60       	ori	r19, 0x02	; 2
    20ee:	30 93 d0 03 	sts	0x03D0, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    20f2:	80 91 ce 03 	lds	r24, 0x03CE
    20f6:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    20f8:	84 60       	ori	r24, 0x04	; 4
    20fa:	80 93 ce 03 	sts	0x03CE, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    20fe:	80 91 d0 03 	lds	r24, 0x03D0
    2102:	8b 7f       	andi	r24, 0xFB	; 251
    2104:	80 93 d0 03 	sts	0x03D0, r24
    2108:	0c c1       	rjmp	.+536    	; 0x2322 <main+0x17bc>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    210a:	80 91 d0 03 	lds	r24, 0x03D0
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    210e:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    2110:	86 61       	ori	r24, 0x16	; 22
    2112:	80 93 d0 03 	sts	0x03D0, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2116:	80 91 ce 03 	lds	r24, 0x03CE
    211a:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    211c:	8b 7f       	andi	r24, 0xFB	; 251
    211e:	80 93 ce 03 	sts	0x03CE, r24
    2122:	0e c1       	rjmp	.+540    	; 0x2340 <main+0x17da>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2124:	80 91 ce 03 	lds	r24, 0x03CE
    2128:	8f 7d       	andi	r24, 0xDF	; 223
    212a:	80 93 ce 03 	sts	0x03CE, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    212e:	80 91 d0 03 	lds	r24, 0x03D0
    2132:	88 60       	ori	r24, 0x08	; 8
    2134:	80 93 d0 03 	sts	0x03D0, r24
    2138:	88 24       	eor	r8, r8
    213a:	99 24       	eor	r9, r9
    213c:	0e c1       	rjmp	.+540    	; 0x235a <main+0x17f4>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    213e:	80 91 d0 03 	lds	r24, 0x03D0
    2142:	8f 7e       	andi	r24, 0xEF	; 239
    2144:	80 93 d0 03 	sts	0x03D0, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2148:	80 91 ce 03 	lds	r24, 0x03CE
    214c:	80 62       	ori	r24, 0x20	; 32
    214e:	80 93 ce 03 	sts	0x03CE, r24
    2152:	03 c1       	rjmp	.+518    	; 0x235a <main+0x17f4>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    2154:	80 91 cf 03 	lds	r24, 0x03CF
    2158:	81 60       	ori	r24, 0x01	; 1
    215a:	80 93 cf 03 	sts	0x03CF, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    215e:	80 91 ce 03 	lds	r24, 0x03CE
    2162:	8f 77       	andi	r24, 0x7F	; 127
    2164:	80 93 ce 03 	sts	0x03CE, r24
    2168:	e7 cf       	rjmp	.-50     	; 0x2138 <main+0x15d2>
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    216a:	80 91 d0 03 	lds	r24, 0x03D0
    216e:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2170:	8f 7d       	andi	r24, 0xDF	; 223
    2172:	80 93 d0 03 	sts	0x03D0, r24
    2176:	61 e0       	ldi	r22, 0x01	; 1
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	7e 83       	std	Y+6, r23	; 0x06
    217c:	6d 83       	std	Y+5, r22	; 0x05
    217e:	ed c0       	rjmp	.+474    	; 0x235a <main+0x17f4>
					break;
				case CLEAN1_1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2180:	80 91 ce 03 	lds	r24, 0x03CE
    2184:	80 62       	ori	r24, 0x20	; 32
    2186:	80 93 ce 03 	sts	0x03CE, r24
					OrangutanLCD::gotoXY(0,1);
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	61 e0       	ldi	r22, 0x01	; 1
    218e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("SET MOTOR HIGH");
    2192:	8c e7       	ldi	r24, 0x7C	; 124
    2194:	93 e0       	ldi	r25, 0x03	; 3
    2196:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    219a:	80 91 ce 03 	lds	r24, 0x03CE
    219e:	8f 7e       	andi	r24, 0xEF	; 239
    21a0:	80 93 ce 03 	sts	0x03CE, r24
    21a4:	01 e0       	ldi	r16, 0x01	; 1
    21a6:	80 2e       	mov	r8, r16
    21a8:	91 2c       	mov	r9, r1
    21aa:	d7 c0       	rjmp	.+430    	; 0x235a <main+0x17f4>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    21ac:	80 91 ce 03 	lds	r24, 0x03CE
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    21b0:	80 63       	ori	r24, 0x30	; 48
    21b2:	f6 cf       	rjmp	.-20     	; 0x21a0 <main+0x163a>
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    21b4:	80 91 ce 03 	lds	r24, 0x03CE
    21b8:	8f 77       	andi	r24, 0x7F	; 127
    21ba:	80 93 ce 03 	sts	0x03CE, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    21be:	80 91 d0 03 	lds	r24, 0x03D0
    21c2:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    21c4:	8f 7d       	andi	r24, 0xDF	; 223
    21c6:	80 93 d0 03 	sts	0x03D0, r24
    21ca:	88 24       	eor	r8, r8
    21cc:	99 24       	eor	r9, r9
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	c1 c0       	rjmp	.+386    	; 0x235a <main+0x17f4>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    21d8:	80 91 d0 03 	lds	r24, 0x03D0
    21dc:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    21de:	80 62       	ori	r24, 0x20	; 32
    21e0:	80 93 d0 03 	sts	0x03D0, r24
    21e4:	88 24       	eor	r8, r8
    21e6:	99 24       	eor	r9, r9
    21e8:	1e 82       	std	Y+6, r1	; 0x06
    21ea:	1d 82       	std	Y+5, r1	; 0x05
    21ec:	b6 c0       	rjmp	.+364    	; 0x235a <main+0x17f4>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    21ee:	80 91 cf 03 	lds	r24, 0x03CF
    21f2:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    21f4:	8b 7f       	andi	r24, 0xFB	; 251
    21f6:	80 93 cf 03 	sts	0x03CF, r24
    21fa:	9e cf       	rjmp	.-196    	; 0x2138 <main+0x15d2>
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    21fc:	80 91 d1 03 	lds	r24, 0x03D1
    2200:	81 60       	ori	r24, 0x01	; 1
    2202:	80 93 d1 03 	sts	0x03D1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2206:	80 91 d0 03 	lds	r24, 0x03D0
    220a:	8f 77       	andi	r24, 0x7F	; 127
    220c:	80 93 d0 03 	sts	0x03D0, r24
    2210:	61 e0       	ldi	r22, 0x01	; 1
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	7c a3       	std	Y+36, r23	; 0x24
    2216:	6b a3       	std	Y+35, r22	; 0x23
    2218:	a0 c0       	rjmp	.+320    	; 0x235a <main+0x17f4>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    221a:	80 91 d1 03 	lds	r24, 0x03D1
    221e:	8e 7f       	andi	r24, 0xFE	; 254
    2220:	80 93 d1 03 	sts	0x03D1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2224:	80 91 d0 03 	lds	r24, 0x03D0
    2228:	80 68       	ori	r24, 0x80	; 128
    222a:	80 93 d0 03 	sts	0x03D0, r24
    222e:	25 c0       	rjmp	.+74     	; 0x227a <main+0x1714>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2230:	80 91 cf 03 	lds	r24, 0x03CF
    2234:	8b 7f       	andi	r24, 0xFB	; 251
    2236:	80 93 cf 03 	sts	0x03CF, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    223a:	80 91 d1 03 	lds	r24, 0x03D1
    223e:	81 60       	ori	r24, 0x01	; 1
    2240:	80 93 d1 03 	sts	0x03D1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2244:	80 91 d0 03 	lds	r24, 0x03D0
    2248:	8f 77       	andi	r24, 0x7F	; 127
    224a:	80 93 d0 03 	sts	0x03D0, r24
    224e:	88 24       	eor	r8, r8
    2250:	99 24       	eor	r9, r9
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	9c a3       	std	Y+36, r25	; 0x24
    2258:	8b a3       	std	Y+35, r24	; 0x23
    225a:	7f c0       	rjmp	.+254    	; 0x235a <main+0x17f4>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    225c:	80 91 d1 03 	lds	r24, 0x03D1
    2260:	8e 7f       	andi	r24, 0xFE	; 254
    2262:	80 93 d1 03 	sts	0x03D1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2266:	80 91 d0 03 	lds	r24, 0x03D0
    226a:	80 68       	ori	r24, 0x80	; 128
    226c:	80 93 d0 03 	sts	0x03D0, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    2270:	80 91 cf 03 	lds	r24, 0x03CF
    2274:	87 7f       	andi	r24, 0xF7	; 247
    2276:	80 93 cf 03 	sts	0x03CF, r24
    227a:	88 24       	eor	r8, r8
    227c:	99 24       	eor	r9, r9
    227e:	1c a2       	std	Y+36, r1	; 0x24
    2280:	1b a2       	std	Y+35, r1	; 0x23
    2282:	6b c0       	rjmp	.+214    	; 0x235a <main+0x17f4>
				case MOVED1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2284:	80 91 d1 03 	lds	r24, 0x03D1
    2288:	87 7f       	andi	r24, 0xF7	; 247
    228a:	80 93 d1 03 	sts	0x03D1, r24
    228e:	54 cf       	rjmp	.-344    	; 0x2138 <main+0x15d2>
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
    2290:	58 8e       	std	Y+24, r5	; 0x18
    2292:	4f 8a       	std	Y+23, r4	; 0x17
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    2294:	80 91 d1 03 	lds	r24, 0x03D1
    2298:	88 60       	ori	r24, 0x08	; 8
    229a:	80 93 d1 03 	sts	0x03D1, r24
    229e:	1a e1       	ldi	r17, 0x1A	; 26
    22a0:	61 2e       	mov	r6, r17
    22a2:	71 2c       	mov	r7, r1
    22a4:	5a c0       	rjmp	.+180    	; 0x235a <main+0x17f4>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    22a6:	80 91 cf 03 	lds	r24, 0x03CF
    22aa:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    22ac:	8f 7d       	andi	r24, 0xDF	; 223
    22ae:	80 93 cf 03 	sts	0x03CF, r24
    22b2:	88 24       	eor	r8, r8
    22b4:	99 24       	eor	r9, r9
    22b6:	61 e0       	ldi	r22, 0x01	; 1
    22b8:	70 e0       	ldi	r23, 0x00	; 0
    22ba:	7c 8f       	std	Y+28, r23	; 0x1c
    22bc:	6b 8f       	std	Y+27, r22	; 0x1b
    22be:	4d c0       	rjmp	.+154    	; 0x235a <main+0x17f4>
					paperTowelMotor = 1;
					break;
				case D2RAISE:
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    22c0:	80 91 d1 03 	lds	r24, 0x03D1
    22c4:	8d 7f       	andi	r24, 0xFD	; 253
    22c6:	80 93 d1 03 	sts	0x03D1, r24
    22ca:	47 c0       	rjmp	.+142    	; 0x235a <main+0x17f4>
					break;
				case DRY2:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    22cc:	80 91 ce 03 	lds	r24, 0x03CE
    22d0:	16 c0       	rjmp	.+44     	; 0x22fe <main+0x1798>
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    22d2:	80 91 cf 03 	lds	r24, 0x03CF
    22d6:	8f 7b       	andi	r24, 0xBF	; 191
    22d8:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    22dc:	80 91 d1 03 	lds	r24, 0x03D1
    22e0:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    22e2:	8b 7f       	andi	r24, 0xFB	; 251
    22e4:	80 93 d1 03 	sts	0x03D1, r24
    22e8:	1c 8e       	std	Y+28, r1	; 0x1c
    22ea:	1b 8e       	std	Y+27, r1	; 0x1b
    22ec:	36 c0       	rjmp	.+108    	; 0x235a <main+0x17f4>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    22ee:	80 91 d0 03 	lds	r24, 0x03D0
    22f2:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    22f4:	80 61       	ori	r24, 0x10	; 16
    22f6:	1e cf       	rjmp	.-452    	; 0x2134 <main+0x15ce>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    22f8:	80 91 ce 03 	lds	r24, 0x03CE
    22fc:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    22fe:	80 62       	ori	r24, 0x20	; 32
    2300:	4f cf       	rjmp	.-354    	; 0x21a0 <main+0x163a>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2302:	80 91 ce 03 	lds	r24, 0x03CE
    2306:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    2308:	84 60       	ori	r24, 0x04	; 4
    230a:	80 93 ce 03 	sts	0x03CE, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    230e:	80 91 d0 03 	lds	r24, 0x03D0
    2312:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2314:	8f 7e       	andi	r24, 0xEF	; 239
    2316:	0e cf       	rjmp	.-484    	; 0x2134 <main+0x15ce>
					break;
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    2318:	80 91 ce 03 	lds	r24, 0x03CE
    231c:	8d 7f       	andi	r24, 0xFD	; 253
    231e:	80 93 ce 03 	sts	0x03CE, r24
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	9a a7       	std	Y+42, r25	; 0x2a
    2328:	89 a7       	std	Y+41, r24	; 0x29
    232a:	17 c0       	rjmp	.+46     	; 0x235a <main+0x17f4>
					plateLoadMotor = 1;
					break;
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    232c:	80 91 ce 03 	lds	r24, 0x03CE
    2330:	8b 7f       	andi	r24, 0xFB	; 251
    2332:	80 93 ce 03 	sts	0x03CE, r24
					if(print35 == 1){
    2336:	6b 85       	ldd	r22, Y+11	; 0x0b
    2338:	7c 85       	ldd	r23, Y+12	; 0x0c
    233a:	61 30       	cpi	r22, 0x01	; 1
    233c:	71 05       	cpc	r23, r1
    233e:	19 f0       	breq	.+6      	; 0x2346 <main+0x17e0>
    2340:	1a a6       	std	Y+42, r1	; 0x2a
    2342:	19 a6       	std	Y+41, r1	; 0x29
    2344:	0a c0       	rjmp	.+20     	; 0x235a <main+0x17f4>
						OrangutanLCD::clear();
    2346:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    234a:	87 e5       	ldi	r24, 0x57	; 87
    234c:	93 e0       	ldi	r25, 0x03	; 3
    234e:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    2352:	1a a6       	std	Y+42, r1	; 0x2a
    2354:	19 a6       	std	Y+41, r1	; 0x29
    2356:	1c 86       	std	Y+12, r1	; 0x0c
    2358:	1b 86       	std	Y+11, r1	; 0x0b
					}
					break;
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    235a:	c2 01       	movw	r24, r4
    235c:	b1 01       	movw	r22, r2
    235e:	4f 89       	ldd	r20, Y+23	; 0x17
    2360:	58 8d       	ldd	r21, Y+24	; 0x18
    2362:	29 a5       	ldd	r18, Y+41	; 0x29
    2364:	3a a5       	ldd	r19, Y+42	; 0x2a
    2366:	84 01       	movw	r16, r8
    2368:	ed 80       	ldd	r14, Y+5	; 0x05
    236a:	fe 80       	ldd	r15, Y+6	; 0x06
    236c:	cb a0       	ldd	r12, Y+35	; 0x23
    236e:	dc a0       	ldd	r13, Y+36	; 0x24
    2370:	ab 8c       	ldd	r10, Y+27	; 0x1b
    2372:	bc 8c       	ldd	r11, Y+28	; 0x1c
    2374:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z15motor_and_writeiiiiiiii>
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>

		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("BOTH B");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    2380:	74 e2       	ldi	r23, 0x24	; 36
    2382:	67 16       	cp	r6, r23
    2384:	71 04       	cpc	r7, r1
    2386:	09 f4       	brne	.+2      	; 0x238a <main+0x1824>
    2388:	63 c2       	rjmp	.+1222   	; 0x2850 <main+0x1cea>
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				counter ++;
    238a:	08 94       	sec
    238c:	41 1c       	adc	r4, r1
    238e:	51 1c       	adc	r5, r1
    2390:	e9 cd       	rjmp	.-1070   	; 0x1f64 <main+0x13fe>
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    2392:	82 e0       	ldi	r24, 0x02	; 2
    2394:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    2398:	88 23       	and	r24, r24
    239a:	09 f4       	brne	.+2      	; 0x239e <main+0x1838>
    239c:	59 c2       	rjmp	.+1202   	; 0x2850 <main+0x1cea>
			OrangutanLCD::gotoXY(7,0);
    239e:	87 e0       	ldi	r24, 0x07	; 7
    23a0:	60 e0       	ldi	r22, 0x00	; 0
    23a2:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("DEBUG");
    23a6:	8b e8       	ldi	r24, 0x8B	; 139
    23a8:	93 e0       	ldi	r25, 0x03	; 3
    23aa:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    23ae:	80 91 ce 03 	lds	r24, 0x03CE
    23b2:	80 62       	ori	r24, 0x20	; 32
    23b4:	80 93 ce 03 	sts	0x03CE, r24
    23b8:	18 a6       	std	Y+40, r1	; 0x28
    23ba:	1f a2       	std	Y+39, r1	; 0x27
    23bc:	b1 e0       	ldi	r27, 0x01	; 1
    23be:	8b 2e       	mov	r8, r27
    23c0:	91 2c       	mov	r9, r1
    23c2:	1a a2       	std	Y+34, r1	; 0x22
    23c4:	19 a2       	std	Y+33, r1	; 0x21
    23c6:	1a 8e       	std	Y+26, r1	; 0x1a
    23c8:	19 8e       	std	Y+25, r1	; 0x19
    23ca:	66 24       	eor	r6, r6
    23cc:	77 24       	eor	r7, r7
    23ce:	44 24       	eor	r4, r4
    23d0:	55 24       	eor	r5, r5
    23d2:	18 ae       	std	Y+56, r1	; 0x38
    23d4:	1f aa       	std	Y+55, r1	; 0x37
    23d6:	22 24       	eor	r2, r2
    23d8:	33 24       	eor	r3, r3
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9a 8b       	std	Y+18, r25	; 0x12
    23e0:	89 8b       	std	Y+17, r24	; 0x11
    23e2:	9a 87       	std	Y+10, r25	; 0x0a
    23e4:	89 87       	std	Y+9, r24	; 0x09
    23e6:	1c 82       	std	Y+4, r1	; 0x04
    23e8:	1b 82       	std	Y+3, r1	; 0x03
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    23ea:	84 e4       	ldi	r24, 0x44	; 68
    23ec:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    23f6:	85 e4       	ldi	r24, 0x45	; 69
    23f8:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    23fc:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_Z11i2c_readAckv>
    2400:	80 93 d2 03 	sts	0x03D2, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2404:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_Z11i2c_readNakv>
    2408:	80 93 d3 03 	sts	0x03D3, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    240c:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>
				
				if(state != INIT){
    2410:	61 14       	cp	r6, r1
    2412:	71 04       	cpc	r7, r1
    2414:	79 f0       	breq	.+30     	; 0x2434 <main+0x18ce>
					OrangutanLCD::gotoXY(0,1);
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	61 e0       	ldi	r22, 0x01	; 1
    241a:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    241e:	80 e5       	ldi	r24, 0x50	; 80
    2420:	93 e0       	ldi	r25, 0x03	; 3
    2422:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    2426:	b3 01       	movw	r22, r6
    2428:	88 27       	eor	r24, r24
    242a:	77 fd       	sbrc	r23, 7
    242c:	80 95       	com	r24
    242e:	98 2f       	mov	r25, r24
    2430:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <_ZN12OrangutanLCD5printEl>
					OrangutanLCD::print(state);
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    2434:	c2 01       	movw	r24, r4
    2436:	be 01       	movw	r22, r28
    2438:	6f 5f       	subi	r22, 0xFF	; 255
    243a:	7f 4f       	sbci	r23, 0xFF	; 255
    243c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z15button_debounceiPi>
    2440:	18 2f       	mov	r17, r24

				//state transitions
	
				//Init
				if(init_trans(state, buttonTriggered, counter, counterRef)){
    2442:	c3 01       	movw	r24, r6
    2444:	61 2f       	mov	r22, r17
    2446:	a2 01       	movw	r20, r4
    2448:	91 01       	movw	r18, r2
    244a:	0e 94 de 01 	call	0x3bc	; 0x3bc <_Z10init_transibii>
    244e:	88 23       	and	r24, r24
    2450:	29 f0       	breq	.+10     	; 0x245c <main+0x18f6>
    2452:	12 01       	movw	r2, r4
    2454:	a5 e2       	ldi	r26, 0x25	; 37
    2456:	6a 2e       	mov	r6, r26
    2458:	71 2c       	mov	r7, r1
    245a:	10 e0       	ldi	r17, 0x00	; 0
					state = WAIT;
					counterRef = counter;
				}

				//First Brush
				if(firstB_trans(state, counter, counterRef)){
    245c:	c3 01       	movw	r24, r6
    245e:	b2 01       	movw	r22, r4
    2460:	a1 01       	movw	r20, r2
    2462:	0e 94 2a 02 	call	0x454	; 0x454 <_Z12firstB_transiii>
    2466:	88 23       	and	r24, r24
    2468:	21 f0       	breq	.+8      	; 0x2472 <main+0x190c>
    246a:	12 01       	movw	r2, r4
    246c:	f5 e2       	ldi	r31, 0x25	; 37
    246e:	6f 2e       	mov	r6, r31
    2470:	71 2c       	mov	r7, r1
						counterRef = counter;
				}

				
				//Brush2
				if(secondB_trans(state, counter, counterRef)){
    2472:	c3 01       	movw	r24, r6
    2474:	b2 01       	movw	r22, r4
    2476:	a1 01       	movw	r20, r2
    2478:	0e 94 c2 02 	call	0x584	; 0x584 <_Z13secondB_transiii>
    247c:	88 23       	and	r24, r24
    247e:	21 f0       	breq	.+8      	; 0x2488 <main+0x1922>
    2480:	12 01       	movw	r2, r4
    2482:	e5 e2       	ldi	r30, 0x25	; 37
    2484:	6e 2e       	mov	r6, r30
    2486:	71 2c       	mov	r7, r1
					state = WAIT;
					counterRef = counter;
				}
				
				//Dry
				if(dry_trans(state, counter, counterRef, counterRefFive)){
    2488:	c3 01       	movw	r24, r6
    248a:	b2 01       	movw	r22, r4
    248c:	a1 01       	movw	r20, r2
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z9dry_transiiii>
    2496:	88 23       	and	r24, r24
    2498:	11 f0       	breq	.+4      	; 0x249e <main+0x1938>
    249a:	12 01       	movw	r2, r4
    249c:	11 c0       	rjmp	.+34     	; 0x24c0 <main+0x195a>
						counterRef = counter;
					if(state == D1STOP)
						counterRefFive = counter;
				}

				if(state == END && counter - counterRef > 10){
    249e:	93 e2       	ldi	r25, 0x23	; 35
    24a0:	69 16       	cp	r6, r25
    24a2:	71 04       	cpc	r7, r1
    24a4:	49 f4       	brne	.+18     	; 0x24b8 <main+0x1952>
    24a6:	c2 01       	movw	r24, r4
    24a8:	82 19       	sub	r24, r2
    24aa:	93 09       	sbc	r25, r3
    24ac:	0b 97       	sbiw	r24, 0x0b	; 11
    24ae:	a4 f0       	brlt	.+40     	; 0x24d8 <main+0x1972>
    24b0:	74 e2       	ldi	r23, 0x24	; 36
    24b2:	67 2e       	mov	r6, r23
    24b4:	71 2c       	mov	r7, r1
    24b6:	10 c0       	rjmp	.+32     	; 0x24d8 <main+0x1972>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    24b8:	65 e2       	ldi	r22, 0x25	; 37
    24ba:	66 16       	cp	r6, r22
    24bc:	71 04       	cpc	r7, r1
    24be:	61 f4       	brne	.+24     	; 0x24d8 <main+0x1972>
    24c0:	11 23       	and	r17, r17
    24c2:	21 f4       	brne	.+8      	; 0x24cc <main+0x1966>
    24c4:	65 e2       	ldi	r22, 0x25	; 37
    24c6:	66 2e       	mov	r6, r22
    24c8:	71 2c       	mov	r7, r1
    24ca:	13 c0       	rjmp	.+38     	; 0x24f2 <main+0x198c>
					state = ++last;
    24cc:	8f a9       	ldd	r24, Y+55	; 0x37
    24ce:	98 ad       	ldd	r25, Y+56	; 0x38
    24d0:	01 96       	adiw	r24, 0x01	; 1
    24d2:	98 af       	std	Y+56, r25	; 0x38
    24d4:	8f ab       	std	Y+55, r24	; 0x37
    24d6:	3c 01       	movw	r6, r24
				}


				//state actions
						
			switch (state){
    24d8:	f3 01       	movw	r30, r6
    24da:	e6 32       	cpi	r30, 0x26	; 38
    24dc:	f1 05       	cpc	r31, r1
    24de:	08 f0       	brcs	.+2      	; 0x24e2 <main+0x197c>
    24e0:	9c c1       	rjmp	.+824    	; 0x281a <main+0x1cb4>
    24e2:	e2 52       	subi	r30, 0x22	; 34
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	ee 0f       	add	r30, r30
    24e8:	ff 1f       	adc	r31, r31
    24ea:	05 90       	lpm	r0, Z+
    24ec:	f4 91       	lpm	r31, Z+
    24ee:	e0 2d       	mov	r30, r0
    24f0:	09 94       	ijmp
    24f2:	18 a6       	std	Y+40, r1	; 0x28
    24f4:	1f a2       	std	Y+39, r1	; 0x27
    24f6:	88 24       	eor	r8, r8
    24f8:	99 24       	eor	r9, r9
    24fa:	1a a2       	std	Y+34, r1	; 0x22
    24fc:	19 a2       	std	Y+33, r1	; 0x21
    24fe:	1a 8e       	std	Y+26, r1	; 0x1a
    2500:	19 8e       	std	Y+25, r1	; 0x19
    2502:	8c c0       	rjmp	.+280    	; 0x261c <main+0x1ab6>
					brush1Motor = 0;
					brush2Motor = 0;
					paperTowelMotor = 0;
					break;
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    2504:	80 91 d2 03 	lds	r24, 0x03D2
    2508:	90 91 ce 03 	lds	r25, 0x03CE
    250c:	20 91 d0 03 	lds	r18, 0x03D0
    2510:	82 ff       	sbrs	r24, 2
    2512:	07 c0       	rjmp	.+14     	; 0x2522 <main+0x19bc>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    2514:	9f 7e       	andi	r25, 0xEF	; 239
    2516:	90 93 ce 03 	sts	0x03CE, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    251a:	27 7f       	andi	r18, 0xF7	; 247
    251c:	20 93 d0 03 	sts	0x03D0, r18
    2520:	7c c1       	rjmp	.+760    	; 0x281a <main+0x1cb4>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2522:	9f 7d       	andi	r25, 0xDF	; 223
    2524:	90 93 ce 03 	sts	0x03CE, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2528:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    252a:	28 60       	ori	r18, 0x08	; 8
    252c:	20 93 d0 03 	sts	0x03D0, r18
						if(print0 == 1){
    2530:	69 89       	ldd	r22, Y+17	; 0x11
    2532:	7a 89       	ldd	r23, Y+18	; 0x12
    2534:	61 30       	cpi	r22, 0x01	; 1
    2536:	71 05       	cpc	r23, r1
    2538:	09 f0       	breq	.+2      	; 0x253c <main+0x19d6>
    253a:	43 c0       	rjmp	.+134    	; 0x25c2 <main+0x1a5c>
							OrangutanLCD::gotoXY(0,1);
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	61 e0       	ldi	r22, 0x01	; 1
    2540:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	91 e0       	ldi	r25, 0x01	; 1
    2548:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    254c:	88 24       	eor	r8, r8
    254e:	99 24       	eor	r9, r9
    2550:	1a 8a       	std	Y+18, r1	; 0x12
    2552:	19 8a       	std	Y+17, r1	; 0x11
    2554:	62 c1       	rjmp	.+708    	; 0x281a <main+0x1cb4>
							print0 = 0;
						}
					}
					break;
				case LOAD:
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    2556:	20 91 d0 03 	lds	r18, 0x03D0
    255a:	32 2f       	mov	r19, r18
    255c:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    255e:	c2 01       	movw	r24, r4
    2560:	68 ec       	ldi	r22, 0xC8	; 200
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__divmodhi4>
    2568:	84 36       	cpi	r24, 0x64	; 100
    256a:	91 05       	cpc	r25, r1
    256c:	24 f4       	brge	.+8      	; 0x2576 <main+0x1a10>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    256e:	2c 7f       	andi	r18, 0xFC	; 252
    2570:	20 93 d0 03 	sts	0x03D0, r18
    2574:	03 c0       	rjmp	.+6      	; 0x257c <main+0x1a16>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2576:	32 60       	ori	r19, 0x02	; 2
    2578:	30 93 d0 03 	sts	0x03D0, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    257c:	80 91 ce 03 	lds	r24, 0x03CE
    2580:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    2582:	84 60       	ori	r24, 0x04	; 4
    2584:	80 93 ce 03 	sts	0x03CE, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    2588:	80 91 d0 03 	lds	r24, 0x03D0
    258c:	8b 7f       	andi	r24, 0xFB	; 251
    258e:	80 93 d0 03 	sts	0x03D0, r24
    2592:	27 c1       	rjmp	.+590    	; 0x27e2 <main+0x1c7c>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2594:	80 91 d0 03 	lds	r24, 0x03D0
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2598:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    259a:	86 61       	ori	r24, 0x16	; 22
    259c:	80 93 d0 03 	sts	0x03D0, r24
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    25a0:	80 91 ce 03 	lds	r24, 0x03CE
    25a4:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    25a6:	8b 7f       	andi	r24, 0xFB	; 251
    25a8:	80 93 ce 03 	sts	0x03CE, r24
    25ac:	29 c1       	rjmp	.+594    	; 0x2800 <main+0x1c9a>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    25ae:	80 91 ce 03 	lds	r24, 0x03CE
    25b2:	8f 7d       	andi	r24, 0xDF	; 223
    25b4:	80 93 ce 03 	sts	0x03CE, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    25b8:	80 91 d0 03 	lds	r24, 0x03D0
    25bc:	88 60       	ori	r24, 0x08	; 8
    25be:	80 93 d0 03 	sts	0x03D0, r24
    25c2:	88 24       	eor	r8, r8
    25c4:	99 24       	eor	r9, r9
    25c6:	29 c1       	rjmp	.+594    	; 0x281a <main+0x1cb4>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    25c8:	80 91 d0 03 	lds	r24, 0x03D0
    25cc:	8f 7e       	andi	r24, 0xEF	; 239
    25ce:	80 93 d0 03 	sts	0x03D0, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    25d2:	80 91 ce 03 	lds	r24, 0x03CE
    25d6:	80 62       	ori	r24, 0x20	; 32
    25d8:	80 93 ce 03 	sts	0x03CE, r24
    25dc:	1e c1       	rjmp	.+572    	; 0x281a <main+0x1cb4>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    25de:	80 91 cf 03 	lds	r24, 0x03CF
    25e2:	81 60       	ori	r24, 0x01	; 1
    25e4:	80 93 cf 03 	sts	0x03CF, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    25e8:	80 91 ce 03 	lds	r24, 0x03CE
    25ec:	8f 77       	andi	r24, 0x7F	; 127
    25ee:	80 93 ce 03 	sts	0x03CE, r24
    25f2:	e7 cf       	rjmp	.-50     	; 0x25c2 <main+0x1a5c>
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    25f4:	80 91 d0 03 	lds	r24, 0x03D0
    25f8:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    25fa:	8f 7d       	andi	r24, 0xDF	; 223
    25fc:	80 93 d0 03 	sts	0x03D0, r24
    2600:	21 c0       	rjmp	.+66     	; 0x2644 <main+0x1ade>
					break;
				case CLEAN1_1:
					brush1Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2602:	80 91 ce 03 	lds	r24, 0x03CE
    2606:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2608:	8f 7e       	andi	r24, 0xEF	; 239
    260a:	24 c0       	rjmp	.+72     	; 0x2654 <main+0x1aee>
					break;
				case B1STOP1:
					fixtureMotor = 0;
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    260c:	80 91 d0 03 	lds	r24, 0x03D0
    2610:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2612:	80 62       	ori	r24, 0x20	; 32
    2614:	80 93 d0 03 	sts	0x03D0, r24
    2618:	88 24       	eor	r8, r8
    261a:	99 24       	eor	r9, r9
    261c:	1c 82       	std	Y+4, r1	; 0x04
    261e:	1b 82       	std	Y+3, r1	; 0x03
    2620:	fc c0       	rjmp	.+504    	; 0x281a <main+0x1cb4>
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2622:	80 91 ce 03 	lds	r24, 0x03CE
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2626:	80 63       	ori	r24, 0x30	; 48
    2628:	c6 c0       	rjmp	.+396    	; 0x27b6 <main+0x1c50>
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    262a:	80 91 ce 03 	lds	r24, 0x03CE
    262e:	8f 77       	andi	r24, 0x7F	; 127
    2630:	80 93 ce 03 	sts	0x03CE, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2634:	80 91 d0 03 	lds	r24, 0x03D0
    2638:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    263a:	8f 7d       	andi	r24, 0xDF	; 223
    263c:	80 93 d0 03 	sts	0x03D0, r24
    2640:	88 24       	eor	r8, r8
    2642:	99 24       	eor	r9, r9
    2644:	61 e0       	ldi	r22, 0x01	; 1
    2646:	70 e0       	ldi	r23, 0x00	; 0
    2648:	7c 83       	std	Y+4, r23	; 0x04
    264a:	6b 83       	std	Y+3, r22	; 0x03
    264c:	e6 c0       	rjmp	.+460    	; 0x281a <main+0x1cb4>
					break;
				case CLEAN1_3:
					brush1Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    264e:	80 91 ce 03 	lds	r24, 0x03CE
    2652:	80 62       	ori	r24, 0x20	; 32
    2654:	80 93 ce 03 	sts	0x03CE, r24
    2658:	51 e0       	ldi	r21, 0x01	; 1
    265a:	85 2e       	mov	r8, r21
    265c:	91 2c       	mov	r9, r1
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	9c 83       	std	Y+4, r25	; 0x04
    2664:	8b 83       	std	Y+3, r24	; 0x03
    2666:	d9 c0       	rjmp	.+434    	; 0x281a <main+0x1cb4>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    2668:	80 91 cf 03 	lds	r24, 0x03CF
    266c:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    266e:	8b 7f       	andi	r24, 0xFB	; 251
    2670:	80 93 cf 03 	sts	0x03CF, r24
    2674:	a6 cf       	rjmp	.-180    	; 0x25c2 <main+0x1a5c>
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2676:	80 91 d1 03 	lds	r24, 0x03D1
    267a:	81 60       	ori	r24, 0x01	; 1
    267c:	80 93 d1 03 	sts	0x03D1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2680:	80 91 d0 03 	lds	r24, 0x03D0
    2684:	8f 77       	andi	r24, 0x7F	; 127
    2686:	80 93 d0 03 	sts	0x03D0, r24
    268a:	1c c0       	rjmp	.+56     	; 0x26c4 <main+0x1b5e>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    268c:	80 91 d1 03 	lds	r24, 0x03D1
    2690:	8e 7f       	andi	r24, 0xFE	; 254
    2692:	80 93 d1 03 	sts	0x03D1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2696:	80 91 d0 03 	lds	r24, 0x03D0
    269a:	80 68       	ori	r24, 0x80	; 128
    269c:	80 93 d0 03 	sts	0x03D0, r24
    26a0:	32 c0       	rjmp	.+100    	; 0x2706 <main+0x1ba0>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    26a2:	80 91 cf 03 	lds	r24, 0x03CF
    26a6:	8b 7f       	andi	r24, 0xFB	; 251
    26a8:	80 93 cf 03 	sts	0x03CF, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    26ac:	80 91 d1 03 	lds	r24, 0x03D1
    26b0:	81 60       	ori	r24, 0x01	; 1
    26b2:	80 93 d1 03 	sts	0x03D1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    26b6:	80 91 d0 03 	lds	r24, 0x03D0
    26ba:	8f 77       	andi	r24, 0x7F	; 127
    26bc:	80 93 d0 03 	sts	0x03D0, r24
    26c0:	88 24       	eor	r8, r8
    26c2:	99 24       	eor	r9, r9
    26c4:	61 e0       	ldi	r22, 0x01	; 1
    26c6:	70 e0       	ldi	r23, 0x00	; 0
    26c8:	7a a3       	std	Y+34, r23	; 0x22
    26ca:	69 a3       	std	Y+33, r22	; 0x21
    26cc:	a6 c0       	rjmp	.+332    	; 0x281a <main+0x1cb4>
					break;
				case CLEAN2_3:
					brush2Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    26ce:	80 91 ce 03 	lds	r24, 0x03CE
    26d2:	80 62       	ori	r24, 0x20	; 32
    26d4:	80 93 ce 03 	sts	0x03CE, r24
    26d8:	41 e0       	ldi	r20, 0x01	; 1
    26da:	84 2e       	mov	r8, r20
    26dc:	91 2c       	mov	r9, r1
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	9a a3       	std	Y+34, r25	; 0x22
    26e4:	89 a3       	std	Y+33, r24	; 0x21
    26e6:	99 c0       	rjmp	.+306    	; 0x281a <main+0x1cb4>
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    26e8:	80 91 d1 03 	lds	r24, 0x03D1
    26ec:	8e 7f       	andi	r24, 0xFE	; 254
    26ee:	80 93 d1 03 	sts	0x03D1, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    26f2:	80 91 d0 03 	lds	r24, 0x03D0
    26f6:	80 68       	ori	r24, 0x80	; 128
    26f8:	80 93 d0 03 	sts	0x03D0, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    26fc:	80 91 cf 03 	lds	r24, 0x03CF
    2700:	87 7f       	andi	r24, 0xF7	; 247
    2702:	80 93 cf 03 	sts	0x03CF, r24
    2706:	88 24       	eor	r8, r8
    2708:	99 24       	eor	r9, r9
    270a:	1a a2       	std	Y+34, r1	; 0x22
    270c:	19 a2       	std	Y+33, r1	; 0x21
    270e:	85 c0       	rjmp	.+266    	; 0x281a <main+0x1cb4>
					break;
				//*************************************************
				case MOVED1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2710:	80 91 ce 03 	lds	r24, 0x03CE
    2714:	4f c0       	rjmp	.+158    	; 0x27b4 <main+0x1c4e>
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2716:	80 91 d1 03 	lds	r24, 0x03D1
    271a:	87 7f       	andi	r24, 0xF7	; 247
    271c:	80 93 d1 03 	sts	0x03D1, r24
    2720:	50 cf       	rjmp	.-352    	; 0x25c2 <main+0x1a5c>
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1STOP:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2722:	80 91 ce 03 	lds	r24, 0x03CE
    2726:	80 62       	ori	r24, 0x20	; 32
    2728:	80 93 ce 03 	sts	0x03CE, r24
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    272c:	80 91 d1 03 	lds	r24, 0x03D1
    2730:	88 60       	ori	r24, 0x08	; 8
    2732:	80 93 d1 03 	sts	0x03D1, r24
    2736:	41 c0       	rjmp	.+130    	; 0x27ba <main+0x1c54>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    2738:	80 91 cf 03 	lds	r24, 0x03CF
    273c:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    273e:	8f 7d       	andi	r24, 0xDF	; 223
    2740:	80 93 cf 03 	sts	0x03CF, r24
    2744:	88 24       	eor	r8, r8
    2746:	99 24       	eor	r9, r9
    2748:	12 c0       	rjmp	.+36     	; 0x276e <main+0x1c08>
					paperTowelMotor = 1;
					break;
				case D2RAISE:
					paperTowelMotor = 1;
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    274a:	80 91 d1 03 	lds	r24, 0x03D1
    274e:	8d 7f       	andi	r24, 0xFD	; 253
    2750:	80 93 d1 03 	sts	0x03D1, r24
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	9a 8f       	std	Y+26, r25	; 0x1a
    275a:	89 8f       	std	Y+25, r24	; 0x19
    275c:	5e c0       	rjmp	.+188    	; 0x281a <main+0x1cb4>
					break;
				case DRY2:
					paperTowelMotor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    275e:	80 91 ce 03 	lds	r24, 0x03CE
    2762:	80 62       	ori	r24, 0x20	; 32
    2764:	80 93 ce 03 	sts	0x03CE, r24
    2768:	31 e0       	ldi	r19, 0x01	; 1
    276a:	83 2e       	mov	r8, r19
    276c:	91 2c       	mov	r9, r1
    276e:	61 e0       	ldi	r22, 0x01	; 1
    2770:	70 e0       	ldi	r23, 0x00	; 0
    2772:	7a 8f       	std	Y+26, r23	; 0x1a
    2774:	69 8f       	std	Y+25, r22	; 0x19
    2776:	51 c0       	rjmp	.+162    	; 0x281a <main+0x1cb4>
					break;
				case D2STOP:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2778:	80 91 ce 03 	lds	r24, 0x03CE
    277c:	80 62       	ori	r24, 0x20	; 32
    277e:	80 93 ce 03 	sts	0x03CE, r24
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    2782:	80 91 cf 03 	lds	r24, 0x03CF
    2786:	8f 7b       	andi	r24, 0xBF	; 191
    2788:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    278c:	80 91 d1 03 	lds	r24, 0x03D1
    2790:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    2792:	8b 7f       	andi	r24, 0xFB	; 251
    2794:	80 93 d1 03 	sts	0x03D1, r24
    2798:	21 e0       	ldi	r18, 0x01	; 1
    279a:	82 2e       	mov	r8, r18
    279c:	91 2c       	mov	r9, r1
    279e:	1a 8e       	std	Y+26, r1	; 0x1a
    27a0:	19 8e       	std	Y+25, r1	; 0x19
    27a2:	3b c0       	rjmp	.+118    	; 0x281a <main+0x1cb4>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    27a4:	80 91 d0 03 	lds	r24, 0x03D0
    27a8:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    27aa:	80 61       	ori	r24, 0x10	; 16
    27ac:	08 cf       	rjmp	.-496    	; 0x25be <main+0x1a58>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    27ae:	80 91 ce 03 	lds	r24, 0x03CE
    27b2:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    27b4:	80 62       	ori	r24, 0x20	; 32
    27b6:	80 93 ce 03 	sts	0x03CE, r24
    27ba:	91 e0       	ldi	r25, 0x01	; 1
    27bc:	89 2e       	mov	r8, r25
    27be:	91 2c       	mov	r9, r1
    27c0:	2c c0       	rjmp	.+88     	; 0x281a <main+0x1cb4>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    27c2:	80 91 ce 03 	lds	r24, 0x03CE
    27c6:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    27c8:	84 60       	ori	r24, 0x04	; 4
    27ca:	80 93 ce 03 	sts	0x03CE, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    27ce:	80 91 d0 03 	lds	r24, 0x03D0
    27d2:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    27d4:	8f 7e       	andi	r24, 0xEF	; 239
    27d6:	f3 ce       	rjmp	.-538    	; 0x25be <main+0x1a58>
					break;
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    27d8:	80 91 ce 03 	lds	r24, 0x03CE
    27dc:	8d 7f       	andi	r24, 0xFD	; 253
    27de:	80 93 ce 03 	sts	0x03CE, r24
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	98 a7       	std	Y+40, r25	; 0x28
    27e8:	8f a3       	std	Y+39, r24	; 0x27
    27ea:	17 c0       	rjmp	.+46     	; 0x281a <main+0x1cb4>
					plateLoadMotor = 1;
					break;
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    27ec:	80 91 ce 03 	lds	r24, 0x03CE
    27f0:	8b 7f       	andi	r24, 0xFB	; 251
    27f2:	80 93 ce 03 	sts	0x03CE, r24
					if(print35 == 1){
    27f6:	69 85       	ldd	r22, Y+9	; 0x09
    27f8:	7a 85       	ldd	r23, Y+10	; 0x0a
    27fa:	61 30       	cpi	r22, 0x01	; 1
    27fc:	71 05       	cpc	r23, r1
    27fe:	19 f0       	breq	.+6      	; 0x2806 <main+0x1ca0>
    2800:	18 a6       	std	Y+40, r1	; 0x28
    2802:	1f a2       	std	Y+39, r1	; 0x27
    2804:	0a c0       	rjmp	.+20     	; 0x281a <main+0x1cb4>
						OrangutanLCD::clear();
    2806:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    280a:	87 e5       	ldi	r24, 0x57	; 87
    280c:	93 e0       	ldi	r25, 0x03	; 3
    280e:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    2812:	18 a6       	std	Y+40, r1	; 0x28
    2814:	1f a2       	std	Y+39, r1	; 0x27
    2816:	1a 86       	std	Y+10, r1	; 0x0a
    2818:	19 86       	std	Y+9, r1	; 0x09
					}
					break;
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);
    281a:	c2 01       	movw	r24, r4
    281c:	b1 01       	movw	r22, r2
    281e:	40 e0       	ldi	r20, 0x00	; 0
    2820:	50 e0       	ldi	r21, 0x00	; 0
    2822:	2f a1       	ldd	r18, Y+39	; 0x27
    2824:	38 a5       	ldd	r19, Y+40	; 0x28
    2826:	84 01       	movw	r16, r8
    2828:	eb 80       	ldd	r14, Y+3	; 0x03
    282a:	fc 80       	ldd	r15, Y+4	; 0x04
    282c:	c9 a0       	ldd	r12, Y+33	; 0x21
    282e:	da a0       	ldd	r13, Y+34	; 0x22
    2830:	a9 8c       	ldd	r10, Y+25	; 0x19
    2832:	ba 8c       	ldd	r11, Y+26	; 0x1a
    2834:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_Z15motor_and_writeiiiiiiii>
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    2840:	74 e2       	ldi	r23, 0x24	; 36
    2842:	67 16       	cp	r6, r23
    2844:	71 04       	cpc	r7, r1
    2846:	21 f0       	breq	.+8      	; 0x2850 <main+0x1cea>
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor);

				counter ++;
    2848:	08 94       	sec
    284a:	41 1c       	adc	r4, r1
    284c:	51 1c       	adc	r5, r1
    284e:	cd cd       	rjmp	.-1126   	; 0x23ea <main+0x1884>
				delay_ms(1);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2850:	80 91 ce 03 	lds	r24, 0x03CE
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2854:	8b 7d       	andi	r24, 0xDB	; 219
    2856:	80 93 ce 03 	sts	0x03CE, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    285a:	80 91 cf 03 	lds	r24, 0x03CF
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    285e:	86 7b       	andi	r24, 0xB6	; 182
    2860:	80 93 cf 03 	sts	0x03CF, r24
		
		i2c_start(I2C1+I2C_WRITE);
    2864:	80 e4       	ldi	r24, 0x40	; 64
    2866:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>
		i2c_write(0x2);
    286a:	82 e0       	ldi	r24, 0x02	; 2
    286c:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
    2870:	80 91 ce 03 	lds	r24, 0x03CE
    2874:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
    2878:	80 91 cf 03 	lds	r24, 0x03CF
    287c:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_Z9i2c_writeh>
		i2c_stop();
    2880:	0e 94 c8 14 	call	0x2990	; 0x2990 <_Z8i2c_stopv>
	}
	OrangutanLCD::print("END");
    2884:	81 e9       	ldi	r24, 0x91	; 145
    2886:	93 e0       	ldi	r25, 0x03	; 3
    2888:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    288c:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <main+0x36>
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently

	bool buttonTriggered = false;	//buttonTriggered is false if it hasn't been triggered, true if it has;
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
    
	while(1){						//Repeats the entire program indefinitely (runs maintenance or normal each time)
    2890:	10 e0       	ldi	r17, 0x00	; 0
    2892:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <main+0x336>
					print = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
					switched = true;
				}
				if(switched){
    2896:	11 23       	and	r17, r17
    2898:	11 f4       	brne	.+4      	; 0x289e <main+0x1d38>
    289a:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <main+0x44a>
    289e:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <main+0x41c>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    28a8:	88 23       	and	r24, r24
    28aa:	09 f0       	breq	.+2      	; 0x28ae <main+0x1d48>
    28ac:	2f c9       	rjmp	.-3490   	; 0x1b0c <main+0xfa6>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    28b4:	88 23       	and	r24, r24
    28b6:	09 f4       	brne	.+2      	; 0x28ba <main+0x1d54>
    28b8:	29 cb       	rjmp	.-2478   	; 0x1f0c <main+0x13a6>
				counter ++;
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    28c0:	88 23       	and	r24, r24
    28c2:	31 f2       	breq	.-116    	; 0x2850 <main+0x1cea>
    28c4:	66 cd       	rjmp	.-1332   	; 0x2392 <main+0x182c>
    28c6:	12 01       	movw	r2, r4
    28c8:	88 24       	eor	r8, r8
    28ca:	99 24       	eor	r9, r9
    28cc:	8c e2       	ldi	r24, 0x2C	; 44
    28ce:	68 2e       	mov	r6, r24
    28d0:	71 2c       	mov	r7, r1
    28d2:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <main+0xad4>

000028d6 <_ZdlPv>:
  return malloc(size); 
} 

void operator delete(void * ptr) 
{ 
  free(ptr); 
    28d6:	0e 94 9e 1b 	call	0x373c	; 0x373c <free>
} 
    28da:	08 95       	ret

000028dc <_Znwj>:
void * operator new(size_t size); 
void operator delete(void * ptr); 

void * operator new(size_t size) 
{ 
  return malloc(size); 
    28dc:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <malloc>
} 
    28e0:	08 95       	ret

000028e2 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    28e2:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    28e6:	8c e0       	ldi	r24, 0x0C	; 12
    28e8:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    28ec:	08 95       	ret

000028ee <_Z9i2c_starth>:

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    28ee:	98 2f       	mov	r25, r24
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    28f0:	84 ea       	ldi	r24, 0xA4	; 164
    28f2:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    28f6:	80 91 bc 00 	lds	r24, 0x00BC
    28fa:	87 ff       	sbrs	r24, 7
    28fc:	fc cf       	rjmp	.-8      	; 0x28f6 <_Z9i2c_starth+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    28fe:	80 91 b9 00 	lds	r24, 0x00B9
    2902:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    2904:	88 30       	cpi	r24, 0x08	; 8
    2906:	21 f0       	breq	.+8      	; 0x2910 <_Z9i2c_starth+0x22>
    2908:	80 31       	cpi	r24, 0x10	; 16
    290a:	11 f0       	breq	.+4      	; 0x2910 <_Z9i2c_starth+0x22>
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	08 95       	ret

	// send device address
	TWDR = address;
    2910:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2914:	84 e8       	ldi	r24, 0x84	; 132
    2916:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    291a:	80 91 bc 00 	lds	r24, 0x00BC
    291e:	87 ff       	sbrs	r24, 7
    2920:	fc cf       	rjmp	.-8      	; 0x291a <_Z9i2c_starth+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    2922:	90 91 b9 00 	lds	r25, 0x00B9
    2926:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    2928:	98 31       	cpi	r25, 0x18	; 24
    292a:	11 f4       	brne	.+4      	; 0x2930 <_Z9i2c_starth+0x42>
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	08 95       	ret
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	90 34       	cpi	r25, 0x40	; 64
    2934:	09 f0       	breq	.+2      	; 0x2938 <_Z9i2c_starth+0x4a>
    2936:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    2938:	08 95       	ret

0000293a <_Z14i2c_start_waith>:
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
    293a:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    293c:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    293e:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2940:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2942:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2946:	80 91 bc 00 	lds	r24, 0x00BC
    294a:	87 ff       	sbrs	r24, 7
    294c:	fc cf       	rjmp	.-8      	; 0x2946 <_Z14i2c_start_waith+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    294e:	80 91 b9 00 	lds	r24, 0x00B9
    2952:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    2954:	88 30       	cpi	r24, 0x08	; 8
    2956:	11 f0       	breq	.+4      	; 0x295c <_Z14i2c_start_waith+0x22>
    2958:	80 31       	cpi	r24, 0x10	; 16
    295a:	99 f7       	brne	.-26     	; 0x2942 <_Z14i2c_start_waith+0x8>
    
    	// send device address
    	TWDR = address;
    295c:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2960:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2964:	80 91 bc 00 	lds	r24, 0x00BC
    2968:	87 ff       	sbrs	r24, 7
    296a:	fc cf       	rjmp	.-8      	; 0x2964 <_Z14i2c_start_waith+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    296c:	80 91 b9 00 	lds	r24, 0x00B9
    2970:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2972:	80 32       	cpi	r24, 0x20	; 32
    2974:	11 f0       	breq	.+4      	; 0x297a <_Z14i2c_start_waith+0x40>
    2976:	88 35       	cpi	r24, 0x58	; 88
    2978:	39 f4       	brne	.+14     	; 0x2988 <_Z14i2c_start_waith+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    297a:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    297e:	80 91 bc 00 	lds	r24, 0x00BC
    2982:	84 fd       	sbrc	r24, 4
    2984:	fc cf       	rjmp	.-8      	; 0x297e <_Z14i2c_start_waith+0x44>
    2986:	dd cf       	rjmp	.-70     	; 0x2942 <_Z14i2c_start_waith+0x8>
    2988:	08 95       	ret

0000298a <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    298a:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9i2c_starth>

}/* i2c_rep_start */
    298e:	08 95       	ret

00002990 <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2990:	84 e9       	ldi	r24, 0x94	; 148
    2992:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2996:	80 91 bc 00 	lds	r24, 0x00BC
    299a:	84 fd       	sbrc	r24, 4
    299c:	fc cf       	rjmp	.-8      	; 0x2996 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    299e:	08 95       	ret

000029a0 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    29a0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    29a4:	84 e8       	ldi	r24, 0x84	; 132
    29a6:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    29aa:	80 91 bc 00 	lds	r24, 0x00BC
    29ae:	87 ff       	sbrs	r24, 7
    29b0:	fc cf       	rjmp	.-8      	; 0x29aa <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    29b2:	80 91 b9 00 	lds	r24, 0x00B9
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	88 7f       	andi	r24, 0xF8	; 248
    29ba:	88 32       	cpi	r24, 0x28	; 40
    29bc:	09 f0       	breq	.+2      	; 0x29c0 <_Z9i2c_writeh+0x20>
    29be:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    29c0:	89 2f       	mov	r24, r25
    29c2:	08 95       	ret

000029c4 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    29c4:	84 ec       	ldi	r24, 0xC4	; 196
    29c6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    29ca:	80 91 bc 00 	lds	r24, 0x00BC
    29ce:	87 ff       	sbrs	r24, 7
    29d0:	fc cf       	rjmp	.-8      	; 0x29ca <_Z11i2c_readAckv+0x6>

    return TWDR;
    29d2:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    29d6:	08 95       	ret

000029d8 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    29d8:	84 e8       	ldi	r24, 0x84	; 132
    29da:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    29de:	80 91 bc 00 	lds	r24, 0x00BC
    29e2:	87 ff       	sbrs	r24, 7
    29e4:	fc cf       	rjmp	.-8      	; 0x29de <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    29e6:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    29ea:	08 95       	ret

000029ec <_ZN12OrangutanLCDC2Ev>:
    29ec:	08 95       	ret

000029ee <_ZN12OrangutanLCDC1Ev>:
    29ee:	08 95       	ret

000029f0 <void_getchar>:
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	08 95       	ret

000029f6 <_ZN12OrangutanLCD8busyWaitEv>:
    29f6:	ef 92       	push	r14
    29f8:	ff 92       	push	r15
    29fa:	0f 93       	push	r16
    29fc:	1f 93       	push	r17
    29fe:	67 b1       	in	r22, 0x07	; 7
    2a00:	3d 98       	cbi	0x07, 5	; 7
    2a02:	28 98       	cbi	0x05, 0	; 5
    2a04:	29 9a       	sbi	0x05, 1	; 5
    2a06:	e0 90 dc 03 	lds	r14, 0x03DC
    2a0a:	f0 90 dd 03 	lds	r15, 0x03DD
    2a0e:	00 91 de 03 	lds	r16, 0x03DE
    2a12:	10 91 df 03 	lds	r17, 0x03DF
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	41 e0       	ldi	r20, 0x01	; 1
    2a1c:	50 e0       	ldi	r21, 0x00	; 0
    2a1e:	ca 01       	movw	r24, r20
    2a20:	6f 93       	push	r22
    2a22:	64 e0       	ldi	r22, 0x04	; 4
    2a24:	6a 95       	dec	r22
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    2a28:	6f 91       	pop	r22
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	c9 f7       	brne	.-14     	; 0x2a20 <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    2a2e:	2a 9a       	sbi	0x05, 2	; 5
    2a30:	ca 01       	movw	r24, r20
    2a32:	6f 93       	push	r22
    2a34:	64 e0       	ldi	r22, 0x04	; 4
    2a36:	6a 95       	dec	r22
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    2a3a:	6f 91       	pop	r22
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	c9 f7       	brne	.-14     	; 0x2a32 <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    2a40:	86 b1       	in	r24, 0x06	; 6
    2a42:	2a 98       	cbi	0x05, 2	; 5
    2a44:	fa 01       	movw	r30, r20
    2a46:	6f 93       	push	r22
    2a48:	64 e0       	ldi	r22, 0x04	; 4
    2a4a:	6a 95       	dec	r22
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <_ZN12OrangutanLCD8busyWaitEv+0x54>
    2a4e:	6f 91       	pop	r22
    2a50:	31 97       	sbiw	r30, 0x01	; 1
    2a52:	c9 f7       	brne	.-14     	; 0x2a46 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    2a54:	2a 9a       	sbi	0x05, 2	; 5
    2a56:	fa 01       	movw	r30, r20
    2a58:	6f 93       	push	r22
    2a5a:	64 e0       	ldi	r22, 0x04	; 4
    2a5c:	6a 95       	dec	r22
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <_ZN12OrangutanLCD8busyWaitEv+0x66>
    2a60:	6f 91       	pop	r22
    2a62:	31 97       	sbiw	r30, 0x01	; 1
    2a64:	c9 f7       	brne	.-14     	; 0x2a58 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    2a66:	2a 98       	cbi	0x05, 2	; 5
    2a68:	2c 5f       	subi	r18, 0xFC	; 252
    2a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6c:	85 ff       	sbrs	r24, 5
    2a6e:	09 c0       	rjmp	.+18     	; 0x2a82 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    2a70:	c9 01       	movw	r24, r18
    2a72:	a0 e0       	ldi	r26, 0x00	; 0
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	8e 15       	cp	r24, r14
    2a78:	9f 05       	cpc	r25, r15
    2a7a:	a0 07       	cpc	r26, r16
    2a7c:	b1 07       	cpc	r27, r17
    2a7e:	08 f4       	brcc	.+2      	; 0x2a82 <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    2a80:	ce cf       	rjmp	.-100    	; 0x2a1e <_ZN12OrangutanLCD8busyWaitEv+0x28>
    2a82:	c9 01       	movw	r24, r18
    2a84:	a0 e0       	ldi	r26, 0x00	; 0
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	8e 15       	cp	r24, r14
    2a8a:	9f 05       	cpc	r25, r15
    2a8c:	a0 07       	cpc	r26, r16
    2a8e:	b1 07       	cpc	r27, r17
    2a90:	28 f0       	brcs	.+10     	; 0x2a9c <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    2a92:	82 e3       	ldi	r24, 0x32	; 50
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	a0 e0       	ldi	r26, 0x00	; 0
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	04 c0       	rjmp	.+8      	; 0x2aa4 <_ZN12OrangutanLCD8busyWaitEv+0xae>
    2a9c:	80 e3       	ldi	r24, 0x30	; 48
    2a9e:	95 e7       	ldi	r25, 0x75	; 117
    2aa0:	a0 e0       	ldi	r26, 0x00	; 0
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	80 93 dc 03 	sts	0x03DC, r24
    2aa8:	90 93 dd 03 	sts	0x03DD, r25
    2aac:	a0 93 de 03 	sts	0x03DE, r26
    2ab0:	b0 93 df 03 	sts	0x03DF, r27
    2ab4:	67 b9       	out	0x07, r22	; 7
    2ab6:	1f 91       	pop	r17
    2ab8:	0f 91       	pop	r16
    2aba:	ff 90       	pop	r15
    2abc:	ef 90       	pop	r14
    2abe:	08 95       	ret

00002ac0 <_ZN12OrangutanLCD8sendDataEh>:
    2ac0:	28 b1       	in	r18, 0x08	; 8
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	8f 70       	andi	r24, 0x0F	; 15
    2ac6:	90 70       	andi	r25, 0x00	; 0
    2ac8:	88 0f       	add	r24, r24
    2aca:	99 1f       	adc	r25, r25
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	23 7c       	andi	r18, 0xC3	; 195
    2ad2:	28 2b       	or	r18, r24
    2ad4:	28 b9       	out	0x08, r18	; 8
    2ad6:	2a 9a       	sbi	0x05, 2	; 5
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	fc 01       	movw	r30, r24
    2ade:	6f 93       	push	r22
    2ae0:	64 e0       	ldi	r22, 0x04	; 4
    2ae2:	6a 95       	dec	r22
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <_ZN12OrangutanLCD8sendDataEh+0x22>
    2ae6:	6f 91       	pop	r22
    2ae8:	31 97       	sbiw	r30, 0x01	; 1
    2aea:	c9 f7       	brne	.-14     	; 0x2ade <_ZN12OrangutanLCD8sendDataEh+0x1e>
    2aec:	2a 98       	cbi	0x05, 2	; 5
    2aee:	6f 93       	push	r22
    2af0:	64 e0       	ldi	r22, 0x04	; 4
    2af2:	6a 95       	dec	r22
    2af4:	f1 f7       	brne	.-4      	; 0x2af2 <_ZN12OrangutanLCD8sendDataEh+0x32>
    2af6:	6f 91       	pop	r22
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	c9 f7       	brne	.-14     	; 0x2aee <_ZN12OrangutanLCD8sendDataEh+0x2e>
    2afc:	08 95       	ret

00002afe <_ZN12OrangutanLCD10initPrintfEv>:
    2afe:	80 91 d8 03 	lds	r24, 0x03D8
    2b02:	90 91 d9 03 	lds	r25, 0x03D9
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	11 f0       	breq	.+4      	; 0x2b0e <_ZN12OrangutanLCD10initPrintfEv+0x10>
    2b0a:	0e 94 9e 1b 	call	0x373c	; 0x373c <free>
    2b0e:	80 91 c5 03 	lds	r24, 0x03C5
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	20 91 c6 03 	lds	r18, 0x03C6
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	ac 01       	movw	r20, r24
    2b1e:	42 9f       	mul	r20, r18
    2b20:	c0 01       	movw	r24, r0
    2b22:	43 9f       	mul	r20, r19
    2b24:	90 0d       	add	r25, r0
    2b26:	52 9f       	mul	r21, r18
    2b28:	90 0d       	add	r25, r0
    2b2a:	11 24       	eor	r1, r1
    2b2c:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <malloc>
    2b30:	90 93 d9 03 	sts	0x03D9, r25
    2b34:	80 93 d8 03 	sts	0x03D8, r24
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	29 f1       	breq	.+74     	; 0x2b86 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	70 e2       	ldi	r23, 0x20	; 32
    2b40:	08 c0       	rjmp	.+16     	; 0x2b52 <_ZN12OrangutanLCD10initPrintfEv+0x54>
    2b42:	e0 91 d8 03 	lds	r30, 0x03D8
    2b46:	f0 91 d9 03 	lds	r31, 0x03D9
    2b4a:	e4 0f       	add	r30, r20
    2b4c:	f5 1f       	adc	r31, r21
    2b4e:	70 83       	st	Z, r23
    2b50:	6f 5f       	subi	r22, 0xFF	; 255
    2b52:	46 2f       	mov	r20, r22
    2b54:	50 e0       	ldi	r21, 0x00	; 0
    2b56:	80 91 c5 03 	lds	r24, 0x03C5
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	20 91 c6 03 	lds	r18, 0x03C6
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	fc 01       	movw	r30, r24
    2b66:	e2 9f       	mul	r30, r18
    2b68:	c0 01       	movw	r24, r0
    2b6a:	e3 9f       	mul	r30, r19
    2b6c:	90 0d       	add	r25, r0
    2b6e:	f2 9f       	mul	r31, r18
    2b70:	90 0d       	add	r25, r0
    2b72:	11 24       	eor	r1, r1
    2b74:	48 17       	cp	r20, r24
    2b76:	59 07       	cpc	r21, r25
    2b78:	24 f3       	brlt	.-56     	; 0x2b42 <_ZN12OrangutanLCD10initPrintfEv+0x44>
    2b7a:	84 ee       	ldi	r24, 0xE4	; 228
    2b7c:	97 e1       	ldi	r25, 0x17	; 23
    2b7e:	68 ef       	ldi	r22, 0xF8	; 248
    2b80:	74 e1       	ldi	r23, 0x14	; 20
    2b82:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <fdevopen>
    2b86:	08 95       	ret

00002b88 <_ZN12OrangutanLCD10initPrintfEhh>:
    2b88:	80 93 c6 03 	sts	0x03C6, r24
    2b8c:	60 93 c5 03 	sts	0x03C5, r22
    2b90:	0e 94 7f 15 	call	0x2afe	; 0x2afe <_ZN12OrangutanLCD10initPrintfEv>
    2b94:	08 95       	ret

00002b96 <lcd_init_printf_with_dimensions>:
    2b96:	80 93 c6 03 	sts	0x03C6, r24
    2b9a:	60 93 c5 03 	sts	0x03C5, r22
    2b9e:	0e 94 7f 15 	call	0x2afe	; 0x2afe <_ZN12OrangutanLCD10initPrintfEv>
    2ba2:	08 95       	ret

00002ba4 <lcd_init_printf>:
    2ba4:	0e 94 7f 15 	call	0x2afe	; 0x2afe <_ZN12OrangutanLCD10initPrintfEv>
    2ba8:	08 95       	ret

00002baa <_ZN12OrangutanLCD5init2Ev>:
    2baa:	3d 98       	cbi	0x07, 5	; 7
    2bac:	45 9a       	sbi	0x08, 5	; 8
    2bae:	80 e3       	ldi	r24, 0x30	; 48
    2bb0:	95 e7       	ldi	r25, 0x75	; 117
    2bb2:	a0 e0       	ldi	r26, 0x00	; 0
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	80 93 dc 03 	sts	0x03DC, r24
    2bba:	90 93 dd 03 	sts	0x03DD, r25
    2bbe:	a0 93 de 03 	sts	0x03DE, r26
    2bc2:	b0 93 df 03 	sts	0x03DF, r27
    2bc6:	20 9a       	sbi	0x04, 0	; 4
    2bc8:	21 9a       	sbi	0x04, 1	; 4
    2bca:	22 9a       	sbi	0x04, 2	; 4
    2bcc:	8e e1       	ldi	r24, 0x1E	; 30
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>
    2bd4:	83 e0       	ldi	r24, 0x03	; 3
    2bd6:	0e 94 2a 19 	call	0x3254	; 0x3254 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2bda:	86 e0       	ldi	r24, 0x06	; 6
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>
    2be2:	83 e0       	ldi	r24, 0x03	; 3
    2be4:	0e 94 2a 19 	call	0x3254	; 0x3254 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2be8:	82 e0       	ldi	r24, 0x02	; 2
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>
    2bf0:	83 e0       	ldi	r24, 0x03	; 3
    2bf2:	0e 94 2a 19 	call	0x3254	; 0x3254 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2bf6:	82 e0       	ldi	r24, 0x02	; 2
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>
    2bfe:	82 e0       	ldi	r24, 0x02	; 2
    2c00:	0e 94 2a 19 	call	0x3254	; 0x3254 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2c04:	82 e0       	ldi	r24, 0x02	; 2
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>
    2c0c:	88 e2       	ldi	r24, 0x28	; 40
    2c0e:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_ZN12OrangutanLCD8send_cmdEh>
    2c12:	88 e0       	ldi	r24, 0x08	; 8
    2c14:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_ZN12OrangutanLCD8send_cmdEh>
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_ZN12OrangutanLCD8send_cmdEh>
    2c1e:	86 e0       	ldi	r24, 0x06	; 6
    2c20:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_ZN12OrangutanLCD8send_cmdEh>
    2c24:	8c e0       	ldi	r24, 0x0C	; 12
    2c26:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_ZN12OrangutanLCD8send_cmdEh>
    2c2a:	08 95       	ret

00002c2c <_ZN12OrangutanLCD4initEv>:
    2c2c:	80 91 e0 03 	lds	r24, 0x03E0
    2c30:	88 23       	and	r24, r24
    2c32:	29 f4       	brne	.+10     	; 0x2c3e <_ZN12OrangutanLCD4initEv+0x12>
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	80 93 e0 03 	sts	0x03E0, r24
    2c3a:	0e 94 d5 15 	call	0x2baa	; 0x2baa <_ZN12OrangutanLCD5init2Ev>
    2c3e:	08 95       	ret

00002c40 <_ZN12OrangutanLCD4sendEhhh>:
    2c40:	ff 92       	push	r15
    2c42:	0f 93       	push	r16
    2c44:	1f 93       	push	r17
    2c46:	08 2f       	mov	r16, r24
    2c48:	16 2f       	mov	r17, r22
    2c4a:	f4 2e       	mov	r15, r20
    2c4c:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN12OrangutanLCD4initEv>
    2c50:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <_ZN12OrangutanLCD8busyWaitEv>
    2c54:	37 b1       	in	r19, 0x07	; 7
    2c56:	28 b1       	in	r18, 0x08	; 8
    2c58:	29 98       	cbi	0x05, 1	; 5
    2c5a:	11 23       	and	r17, r17
    2c5c:	11 f0       	breq	.+4      	; 0x2c62 <_ZN12OrangutanLCD4sendEhhh+0x22>
    2c5e:	28 9a       	sbi	0x05, 0	; 5
    2c60:	01 c0       	rjmp	.+2      	; 0x2c64 <_ZN12OrangutanLCD4sendEhhh+0x24>
    2c62:	28 98       	cbi	0x05, 0	; 5
    2c64:	87 b1       	in	r24, 0x07	; 7
    2c66:	8c 63       	ori	r24, 0x3C	; 60
    2c68:	87 b9       	out	0x07, r24	; 7
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	f8 16       	cp	r15, r24
    2c6e:	e1 f0       	breq	.+56     	; 0x2ca8 <_ZN12OrangutanLCD4sendEhhh+0x68>
    2c70:	88 b1       	in	r24, 0x08	; 8
    2c72:	90 2f       	mov	r25, r16
    2c74:	92 95       	swap	r25
    2c76:	9f 70       	andi	r25, 0x0F	; 15
    2c78:	99 0f       	add	r25, r25
    2c7a:	99 0f       	add	r25, r25
    2c7c:	83 7c       	andi	r24, 0xC3	; 195
    2c7e:	98 2b       	or	r25, r24
    2c80:	98 b9       	out	0x08, r25	; 8
    2c82:	2a 9a       	sbi	0x05, 2	; 5
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	fc 01       	movw	r30, r24
    2c8a:	6f 93       	push	r22
    2c8c:	64 e0       	ldi	r22, 0x04	; 4
    2c8e:	6a 95       	dec	r22
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <_ZN12OrangutanLCD4sendEhhh+0x4e>
    2c92:	6f 91       	pop	r22
    2c94:	31 97       	sbiw	r30, 0x01	; 1
    2c96:	c9 f7       	brne	.-14     	; 0x2c8a <_ZN12OrangutanLCD4sendEhhh+0x4a>
    2c98:	2a 98       	cbi	0x05, 2	; 5
    2c9a:	6f 93       	push	r22
    2c9c:	64 e0       	ldi	r22, 0x04	; 4
    2c9e:	6a 95       	dec	r22
    2ca0:	f1 f7       	brne	.-4      	; 0x2c9e <_ZN12OrangutanLCD4sendEhhh+0x5e>
    2ca2:	6f 91       	pop	r22
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	c9 f7       	brne	.-14     	; 0x2c9a <_ZN12OrangutanLCD4sendEhhh+0x5a>
    2ca8:	88 b1       	in	r24, 0x08	; 8
    2caa:	0f 70       	andi	r16, 0x0F	; 15
    2cac:	00 0f       	add	r16, r16
    2cae:	00 0f       	add	r16, r16
    2cb0:	83 7c       	andi	r24, 0xC3	; 195
    2cb2:	80 2b       	or	r24, r16
    2cb4:	88 b9       	out	0x08, r24	; 8
    2cb6:	2a 9a       	sbi	0x05, 2	; 5
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	6f 93       	push	r22
    2cc0:	64 e0       	ldi	r22, 0x04	; 4
    2cc2:	6a 95       	dec	r22
    2cc4:	f1 f7       	brne	.-4      	; 0x2cc2 <_ZN12OrangutanLCD4sendEhhh+0x82>
    2cc6:	6f 91       	pop	r22
    2cc8:	31 97       	sbiw	r30, 0x01	; 1
    2cca:	c9 f7       	brne	.-14     	; 0x2cbe <_ZN12OrangutanLCD4sendEhhh+0x7e>
    2ccc:	2a 98       	cbi	0x05, 2	; 5
    2cce:	6f 93       	push	r22
    2cd0:	64 e0       	ldi	r22, 0x04	; 4
    2cd2:	6a 95       	dec	r22
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <_ZN12OrangutanLCD4sendEhhh+0x92>
    2cd6:	6f 91       	pop	r22
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	c9 f7       	brne	.-14     	; 0x2cce <_ZN12OrangutanLCD4sendEhhh+0x8e>
    2cdc:	37 b9       	out	0x07, r19	; 7
    2cde:	28 b9       	out	0x08, r18	; 8
    2ce0:	1f 91       	pop	r17
    2ce2:	0f 91       	pop	r16
    2ce4:	ff 90       	pop	r15
    2ce6:	08 95       	ret

00002ce8 <_ZN12OrangutanLCD8send_cmdEh>:
    2ce8:	60 e0       	ldi	r22, 0x00	; 0
    2cea:	42 e0       	ldi	r20, 0x02	; 2
    2cec:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZN12OrangutanLCD4sendEhhh>
    2cf0:	08 95       	ret

00002cf2 <_ZN12OrangutanLCD10moveCursorEhh>:
    2cf2:	0f 93       	push	r16
    2cf4:	1f 93       	push	r17
    2cf6:	08 2f       	mov	r16, r24
    2cf8:	16 2f       	mov	r17, r22
    2cfa:	08 c0       	rjmp	.+16     	; 0x2d0c <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    2cfc:	00 23       	and	r16, r16
    2cfe:	11 f4       	brne	.+4      	; 0x2d04 <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    2d00:	80 e1       	ldi	r24, 0x10	; 16
    2d02:	01 c0       	rjmp	.+2      	; 0x2d06 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    2d04:	84 e1       	ldi	r24, 0x14	; 20
    2d06:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_ZN12OrangutanLCD8send_cmdEh>
    2d0a:	11 50       	subi	r17, 0x01	; 1
    2d0c:	11 23       	and	r17, r17
    2d0e:	b1 f7       	brne	.-20     	; 0x2cfc <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    2d10:	1f 91       	pop	r17
    2d12:	0f 91       	pop	r16
    2d14:	08 95       	ret

00002d16 <lcd_move_cursor>:
    2d16:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <_ZN12OrangutanLCD10moveCursorEhh>
    2d1a:	08 95       	ret

00002d1c <_ZN12OrangutanLCD10hideCursorEv>:
    2d1c:	8c e0       	ldi	r24, 0x0C	; 12
    2d1e:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_ZN12OrangutanLCD8send_cmdEh>
    2d22:	08 95       	ret

00002d24 <lcd_hide_cursor>:
    2d24:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN12OrangutanLCD10hideCursorEv>
    2d28:	08 95       	ret

00002d2a <_ZN12OrangutanLCD10showCursorEh>:
    2d2a:	81 30       	cpi	r24, 0x01	; 1
    2d2c:	11 f4       	brne	.+4      	; 0x2d32 <_ZN12OrangutanLCD10showCursorEh+0x8>
    2d2e:	8f e0       	ldi	r24, 0x0F	; 15
    2d30:	01 c0       	rjmp	.+2      	; 0x2d34 <_ZN12OrangutanLCD10showCursorEh+0xa>
    2d32:	8e e0       	ldi	r24, 0x0E	; 14
    2d34:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_ZN12OrangutanLCD8send_cmdEh>
    2d38:	08 95       	ret

00002d3a <lcd_show_cursor>:
    2d3a:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN12OrangutanLCD10showCursorEh>
    2d3e:	08 95       	ret

00002d40 <_ZN12OrangutanLCD6gotoXYEhh>:
    2d40:	a4 e0       	ldi	r26, 0x04	; 4
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	e6 ea       	ldi	r30, 0xA6	; 166
    2d46:	f6 e1       	ldi	r31, 0x16	; 22
    2d48:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <__prologue_saves__+0x1c>
    2d4c:	18 2f       	mov	r17, r24
    2d4e:	06 2f       	mov	r16, r22
    2d50:	80 e8       	ldi	r24, 0x80	; 128
    2d52:	89 83       	std	Y+1, r24	; 0x01
    2d54:	80 ec       	ldi	r24, 0xC0	; 192
    2d56:	8a 83       	std	Y+2, r24	; 0x02
    2d58:	84 e9       	ldi	r24, 0x94	; 148
    2d5a:	8b 83       	std	Y+3, r24	; 0x03
    2d5c:	84 ed       	ldi	r24, 0xD4	; 212
    2d5e:	8c 83       	std	Y+4, r24	; 0x04
    2d60:	fe 01       	movw	r30, r28
    2d62:	e6 0f       	add	r30, r22
    2d64:	f1 1d       	adc	r31, r1
    2d66:	81 81       	ldd	r24, Z+1	; 0x01
    2d68:	81 0f       	add	r24, r17
    2d6a:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_ZN12OrangutanLCD8send_cmdEh>
    2d6e:	10 93 db 03 	sts	0x03DB, r17
    2d72:	00 93 da 03 	sts	0x03DA, r16
    2d76:	24 96       	adiw	r28, 0x04	; 4
    2d78:	e4 e0       	ldi	r30, 0x04	; 4
    2d7a:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__epilogue_restores__+0x1c>

00002d7e <lcd_goto_xy>:
    2d7e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
    2d82:	08 95       	ret

00002d84 <_ZN12OrangutanLCD5clearEv>:
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_ZN12OrangutanLCD8send_cmdEh>
    2d8a:	80 91 d8 03 	lds	r24, 0x03D8
    2d8e:	90 91 d9 03 	lds	r25, 0x03D9
    2d92:	89 2b       	or	r24, r25
    2d94:	19 f1       	breq	.+70     	; 0x2ddc <_ZN12OrangutanLCD5clearEv+0x58>
    2d96:	60 e0       	ldi	r22, 0x00	; 0
    2d98:	70 e2       	ldi	r23, 0x20	; 32
    2d9a:	08 c0       	rjmp	.+16     	; 0x2dac <_ZN12OrangutanLCD5clearEv+0x28>
    2d9c:	e0 91 d8 03 	lds	r30, 0x03D8
    2da0:	f0 91 d9 03 	lds	r31, 0x03D9
    2da4:	e4 0f       	add	r30, r20
    2da6:	f5 1f       	adc	r31, r21
    2da8:	70 83       	st	Z, r23
    2daa:	6f 5f       	subi	r22, 0xFF	; 255
    2dac:	46 2f       	mov	r20, r22
    2dae:	50 e0       	ldi	r21, 0x00	; 0
    2db0:	80 91 c5 03 	lds	r24, 0x03C5
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	20 91 c6 03 	lds	r18, 0x03C6
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	e2 9f       	mul	r30, r18
    2dc2:	c0 01       	movw	r24, r0
    2dc4:	e3 9f       	mul	r30, r19
    2dc6:	90 0d       	add	r25, r0
    2dc8:	f2 9f       	mul	r31, r18
    2dca:	90 0d       	add	r25, r0
    2dcc:	11 24       	eor	r1, r1
    2dce:	48 17       	cp	r20, r24
    2dd0:	59 07       	cpc	r21, r25
    2dd2:	24 f3       	brlt	.-56     	; 0x2d9c <_ZN12OrangutanLCD5clearEv+0x18>
    2dd4:	10 92 db 03 	sts	0x03DB, r1
    2dd8:	10 92 da 03 	sts	0x03DA, r1
    2ddc:	08 95       	ret

00002dde <clear>:
    2dde:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN12OrangutanLCD5clearEv>
    2de2:	08 95       	ret

00002de4 <_ZN12OrangutanLCD9send_dataEh>:
    2de4:	61 e0       	ldi	r22, 0x01	; 1
    2de6:	42 e0       	ldi	r20, 0x02	; 2
    2de8:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZN12OrangutanLCD4sendEhhh>
    2dec:	08 95       	ret

00002dee <_ZN12OrangutanLCD11printBinaryEh>:
    2dee:	0f 93       	push	r16
    2df0:	1f 93       	push	r17
    2df2:	cf 93       	push	r28
    2df4:	df 93       	push	r29
    2df6:	00 e0       	ldi	r16, 0x00	; 0
    2df8:	10 e8       	ldi	r17, 0x80	; 128
    2dfa:	c8 2f       	mov	r28, r24
    2dfc:	d0 e0       	ldi	r29, 0x00	; 0
    2dfe:	81 2f       	mov	r24, r17
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	8c 23       	and	r24, r28
    2e04:	9d 23       	and	r25, r29
    2e06:	89 2b       	or	r24, r25
    2e08:	11 f0       	breq	.+4      	; 0x2e0e <_ZN12OrangutanLCD11printBinaryEh+0x20>
    2e0a:	81 e3       	ldi	r24, 0x31	; 49
    2e0c:	01 c0       	rjmp	.+2      	; 0x2e10 <_ZN12OrangutanLCD11printBinaryEh+0x22>
    2e0e:	80 e3       	ldi	r24, 0x30	; 48
    2e10:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN12OrangutanLCD9send_dataEh>
    2e14:	0f 5f       	subi	r16, 0xFF	; 255
    2e16:	08 30       	cpi	r16, 0x08	; 8
    2e18:	11 f0       	breq	.+4      	; 0x2e1e <_ZN12OrangutanLCD11printBinaryEh+0x30>
    2e1a:	16 95       	lsr	r17
    2e1c:	f0 cf       	rjmp	.-32     	; 0x2dfe <_ZN12OrangutanLCD11printBinaryEh+0x10>
    2e1e:	df 91       	pop	r29
    2e20:	cf 91       	pop	r28
    2e22:	1f 91       	pop	r17
    2e24:	0f 91       	pop	r16
    2e26:	08 95       	ret

00002e28 <print_binary>:
    2e28:	0e 94 f7 16 	call	0x2dee	; 0x2dee <_ZN12OrangutanLCD11printBinaryEh>
    2e2c:	08 95       	ret

00002e2e <_ZN12OrangutanLCD14printHexNibbleEh>:
    2e2e:	8a 30       	cpi	r24, 0x0A	; 10
    2e30:	10 f4       	brcc	.+4      	; 0x2e36 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    2e32:	80 5d       	subi	r24, 0xD0	; 208
    2e34:	01 c0       	rjmp	.+2      	; 0x2e38 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    2e36:	89 5c       	subi	r24, 0xC9	; 201
    2e38:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN12OrangutanLCD9send_dataEh>
    2e3c:	08 95       	ret

00002e3e <_ZN12OrangutanLCD8printHexEh>:
    2e3e:	1f 93       	push	r17
    2e40:	18 2f       	mov	r17, r24
    2e42:	82 95       	swap	r24
    2e44:	8f 70       	andi	r24, 0x0F	; 15
    2e46:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN12OrangutanLCD14printHexNibbleEh>
    2e4a:	81 2f       	mov	r24, r17
    2e4c:	8f 70       	andi	r24, 0x0F	; 15
    2e4e:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN12OrangutanLCD14printHexNibbleEh>
    2e52:	1f 91       	pop	r17
    2e54:	08 95       	ret

00002e56 <_ZN12OrangutanLCD8printHexEj>:
    2e56:	1f 93       	push	r17
    2e58:	18 2f       	mov	r17, r24
    2e5a:	89 2f       	mov	r24, r25
    2e5c:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <_ZN12OrangutanLCD8printHexEh>
    2e60:	81 2f       	mov	r24, r17
    2e62:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <_ZN12OrangutanLCD8printHexEh>
    2e66:	1f 91       	pop	r17
    2e68:	08 95       	ret

00002e6a <print_hex>:
    2e6a:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <_ZN12OrangutanLCD8printHexEj>
    2e6e:	08 95       	ret

00002e70 <print_hex_byte>:
    2e70:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <_ZN12OrangutanLCD8printHexEh>
    2e74:	08 95       	ret

00002e76 <_ZN12OrangutanLCD5printEm>:
    2e76:	6f 92       	push	r6
    2e78:	7f 92       	push	r7
    2e7a:	8f 92       	push	r8
    2e7c:	9f 92       	push	r9
    2e7e:	af 92       	push	r10
    2e80:	bf 92       	push	r11
    2e82:	cf 92       	push	r12
    2e84:	df 92       	push	r13
    2e86:	ff 92       	push	r15
    2e88:	0f 93       	push	r16
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	2a 97       	sbiw	r28, 0x0a	; 10
    2e94:	0f b6       	in	r0, 0x3f	; 63
    2e96:	f8 94       	cli
    2e98:	de bf       	out	0x3e, r29	; 62
    2e9a:	0f be       	out	0x3f, r0	; 63
    2e9c:	cd bf       	out	0x3d, r28	; 61
    2e9e:	5b 01       	movw	r10, r22
    2ea0:	6c 01       	movw	r12, r24
    2ea2:	0a e0       	ldi	r16, 0x0A	; 10
    2ea4:	3e 01       	movw	r6, r28
    2ea6:	08 94       	sec
    2ea8:	61 1c       	adc	r6, r1
    2eaa:	71 1c       	adc	r7, r1
    2eac:	fa 2c       	mov	r15, r10
    2eae:	c6 01       	movw	r24, r12
    2eb0:	b5 01       	movw	r22, r10
    2eb2:	2a e0       	ldi	r18, 0x0A	; 10
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	40 e0       	ldi	r20, 0x00	; 0
    2eb8:	50 e0       	ldi	r21, 0x00	; 0
    2eba:	0e 94 84 1a 	call	0x3508	; 0x3508 <__udivmodsi4>
    2ebe:	c9 01       	movw	r24, r18
    2ec0:	da 01       	movw	r26, r20
    2ec2:	5c 01       	movw	r10, r24
    2ec4:	6d 01       	movw	r12, r26
    2ec6:	01 50       	subi	r16, 0x01	; 1
    2ec8:	43 01       	movw	r8, r6
    2eca:	80 0e       	add	r8, r16
    2ecc:	91 1c       	adc	r9, r1
    2ece:	80 e3       	ldi	r24, 0x30	; 48
    2ed0:	f8 0e       	add	r15, r24
    2ed2:	c6 01       	movw	r24, r12
    2ed4:	b5 01       	movw	r22, r10
    2ed6:	2a e0       	ldi	r18, 0x0A	; 10
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	40 e0       	ldi	r20, 0x00	; 0
    2edc:	50 e0       	ldi	r21, 0x00	; 0
    2ede:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__mulsi3>
    2ee2:	f6 1a       	sub	r15, r22
    2ee4:	f4 01       	movw	r30, r8
    2ee6:	f0 82       	st	Z, r15
    2ee8:	a1 14       	cp	r10, r1
    2eea:	b1 04       	cpc	r11, r1
    2eec:	c1 04       	cpc	r12, r1
    2eee:	d1 04       	cpc	r13, r1
    2ef0:	e9 f6       	brne	.-70     	; 0x2eac <_ZN12OrangutanLCD5printEm+0x36>
    2ef2:	08 c0       	rjmp	.+16     	; 0x2f04 <_ZN12OrangutanLCD5printEm+0x8e>
    2ef4:	f6 01       	movw	r30, r12
    2ef6:	e0 0f       	add	r30, r16
    2ef8:	f1 1d       	adc	r31, r1
    2efa:	80 81       	ld	r24, Z
    2efc:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN12OrangutanLCD9send_dataEh>
    2f00:	0f 5f       	subi	r16, 0xFF	; 255
    2f02:	04 c0       	rjmp	.+8      	; 0x2f0c <_ZN12OrangutanLCD5printEm+0x96>
    2f04:	6e 01       	movw	r12, r28
    2f06:	08 94       	sec
    2f08:	c1 1c       	adc	r12, r1
    2f0a:	d1 1c       	adc	r13, r1
    2f0c:	0a 30       	cpi	r16, 0x0A	; 10
    2f0e:	90 f3       	brcs	.-28     	; 0x2ef4 <_ZN12OrangutanLCD5printEm+0x7e>
    2f10:	2a 96       	adiw	r28, 0x0a	; 10
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	f8 94       	cli
    2f16:	de bf       	out	0x3e, r29	; 62
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	cd bf       	out	0x3d, r28	; 61
    2f1c:	cf 91       	pop	r28
    2f1e:	df 91       	pop	r29
    2f20:	0f 91       	pop	r16
    2f22:	ff 90       	pop	r15
    2f24:	df 90       	pop	r13
    2f26:	cf 90       	pop	r12
    2f28:	bf 90       	pop	r11
    2f2a:	af 90       	pop	r10
    2f2c:	9f 90       	pop	r9
    2f2e:	8f 90       	pop	r8
    2f30:	7f 90       	pop	r7
    2f32:	6f 90       	pop	r6
    2f34:	08 95       	ret

00002f36 <print_unsigned_long>:
    2f36:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <_ZN12OrangutanLCD5printEm>
    2f3a:	08 95       	ret

00002f3c <_ZN12OrangutanLCD5printEl>:
    2f3c:	ef 92       	push	r14
    2f3e:	ff 92       	push	r15
    2f40:	0f 93       	push	r16
    2f42:	1f 93       	push	r17
    2f44:	7b 01       	movw	r14, r22
    2f46:	8c 01       	movw	r16, r24
    2f48:	97 ff       	sbrs	r25, 7
    2f4a:	0b c0       	rjmp	.+22     	; 0x2f62 <_ZN12OrangutanLCD5printEl+0x26>
    2f4c:	10 95       	com	r17
    2f4e:	00 95       	com	r16
    2f50:	f0 94       	com	r15
    2f52:	e0 94       	com	r14
    2f54:	e1 1c       	adc	r14, r1
    2f56:	f1 1c       	adc	r15, r1
    2f58:	01 1d       	adc	r16, r1
    2f5a:	11 1d       	adc	r17, r1
    2f5c:	8d e2       	ldi	r24, 0x2D	; 45
    2f5e:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN12OrangutanLCD9send_dataEh>
    2f62:	c8 01       	movw	r24, r16
    2f64:	b7 01       	movw	r22, r14
    2f66:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <_ZN12OrangutanLCD5printEm>
    2f6a:	1f 91       	pop	r17
    2f6c:	0f 91       	pop	r16
    2f6e:	ff 90       	pop	r15
    2f70:	ef 90       	pop	r14
    2f72:	08 95       	ret

00002f74 <print_long>:
    2f74:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <_ZN12OrangutanLCD5printEl>
    2f78:	08 95       	ret

00002f7a <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    2f7a:	cf 93       	push	r28
    2f7c:	df 93       	push	r29
    2f7e:	ec 01       	movw	r28, r24
    2f80:	03 c0       	rjmp	.+6      	; 0x2f88 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    2f82:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN12OrangutanLCD9send_dataEh>
    2f86:	21 96       	adiw	r28, 0x01	; 1
    2f88:	fe 01       	movw	r30, r28
    2f8a:	84 91       	lpm	r24, Z+
    2f8c:	88 23       	and	r24, r24
    2f8e:	c9 f7       	brne	.-14     	; 0x2f82 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    2f90:	df 91       	pop	r29
    2f92:	cf 91       	pop	r28
    2f94:	08 95       	ret

00002f96 <print_from_program_space>:
    2f96:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    2f9a:	08 95       	ret

00002f9c <_ZN12OrangutanLCD5printEPKc>:
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	ec 01       	movw	r28, r24
    2fa2:	03 c0       	rjmp	.+6      	; 0x2faa <_ZN12OrangutanLCD5printEPKc+0xe>
    2fa4:	21 96       	adiw	r28, 0x01	; 1
    2fa6:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN12OrangutanLCD9send_dataEh>
    2faa:	88 81       	ld	r24, Y
    2fac:	88 23       	and	r24, r24
    2fae:	d1 f7       	brne	.-12     	; 0x2fa4 <_ZN12OrangutanLCD5printEPKc+0x8>
    2fb0:	df 91       	pop	r29
    2fb2:	cf 91       	pop	r28
    2fb4:	08 95       	ret

00002fb6 <print>:
    2fb6:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN12OrangutanLCD5printEPKc>
    2fba:	08 95       	ret

00002fbc <_ZN12OrangutanLCD5printEc>:
    2fbc:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN12OrangutanLCD9send_dataEh>
    2fc0:	08 95       	ret

00002fc2 <print_character>:
    2fc2:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN12OrangutanLCD9send_dataEh>
    2fc6:	08 95       	ret

00002fc8 <lcd_putchar>:
    2fc8:	a0 e0       	ldi	r26, 0x00	; 0
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	ea ee       	ldi	r30, 0xEA	; 234
    2fce:	f7 e1       	ldi	r31, 0x17	; 23
    2fd0:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <__prologue_saves__+0x14>
    2fd4:	e8 2e       	mov	r14, r24
    2fd6:	80 91 d8 03 	lds	r24, 0x03D8
    2fda:	90 91 d9 03 	lds	r25, 0x03D9
    2fde:	89 2b       	or	r24, r25
    2fe0:	09 f4       	brne	.+2      	; 0x2fe4 <lcd_putchar+0x1c>
    2fe2:	05 c1       	rjmp	.+522    	; 0x31ee <lcd_putchar+0x226>
    2fe4:	2a e0       	ldi	r18, 0x0A	; 10
    2fe6:	e2 16       	cp	r14, r18
    2fe8:	09 f4       	brne	.+2      	; 0x2fec <lcd_putchar+0x24>
    2fea:	46 c0       	rjmp	.+140    	; 0x3078 <lcd_putchar+0xb0>
    2fec:	38 e0       	ldi	r19, 0x08	; 8
    2fee:	e3 16       	cp	r14, r19
    2ff0:	c9 f4       	brne	.+50     	; 0x3024 <lcd_putchar+0x5c>
    2ff2:	80 91 db 03 	lds	r24, 0x03DB
    2ff6:	81 50       	subi	r24, 0x01	; 1
    2ff8:	80 93 db 03 	sts	0x03DB, r24
    2ffc:	8f 3f       	cpi	r24, 0xFF	; 255
    2ffe:	51 f4       	brne	.+20     	; 0x3014 <lcd_putchar+0x4c>
    3000:	80 91 da 03 	lds	r24, 0x03DA
    3004:	81 50       	subi	r24, 0x01	; 1
    3006:	80 93 da 03 	sts	0x03DA, r24
    300a:	80 91 c6 03 	lds	r24, 0x03C6
    300e:	81 50       	subi	r24, 0x01	; 1
    3010:	80 93 db 03 	sts	0x03DB, r24
    3014:	80 91 da 03 	lds	r24, 0x03DA
    3018:	8f 3f       	cpi	r24, 0xFF	; 255
    301a:	09 f0       	breq	.+2      	; 0x301e <lcd_putchar+0x56>
    301c:	e2 c0       	rjmp	.+452    	; 0x31e2 <lcd_putchar+0x21a>
    301e:	10 92 da 03 	sts	0x03DA, r1
    3022:	dd c0       	rjmp	.+442    	; 0x31de <lcd_putchar+0x216>
    3024:	8e 2d       	mov	r24, r14
    3026:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN12OrangutanLCD9send_dataEh>
    302a:	20 91 da 03 	lds	r18, 0x03DA
    302e:	22 23       	and	r18, r18
    3030:	c9 f0       	breq	.+50     	; 0x3064 <lcd_putchar+0x9c>
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	21 50       	subi	r18, 0x01	; 1
    3036:	30 40       	sbci	r19, 0x00	; 0
    3038:	80 91 c6 03 	lds	r24, 0x03C6
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	ac 01       	movw	r20, r24
    3040:	24 9f       	mul	r18, r20
    3042:	c0 01       	movw	r24, r0
    3044:	25 9f       	mul	r18, r21
    3046:	90 0d       	add	r25, r0
    3048:	34 9f       	mul	r19, r20
    304a:	90 0d       	add	r25, r0
    304c:	11 24       	eor	r1, r1
    304e:	20 91 db 03 	lds	r18, 0x03DB
    3052:	e0 91 d8 03 	lds	r30, 0x03D8
    3056:	f0 91 d9 03 	lds	r31, 0x03D9
    305a:	e8 0f       	add	r30, r24
    305c:	f9 1f       	adc	r31, r25
    305e:	e2 0f       	add	r30, r18
    3060:	f1 1d       	adc	r31, r1
    3062:	e0 82       	st	Z, r14
    3064:	80 91 db 03 	lds	r24, 0x03DB
    3068:	8f 5f       	subi	r24, 0xFF	; 255
    306a:	80 93 db 03 	sts	0x03DB, r24
    306e:	90 91 c6 03 	lds	r25, 0x03C6
    3072:	89 17       	cp	r24, r25
    3074:	09 f0       	breq	.+2      	; 0x3078 <lcd_putchar+0xb0>
    3076:	bb c0       	rjmp	.+374    	; 0x31ee <lcd_putchar+0x226>
    3078:	40 91 da 03 	lds	r20, 0x03DA
    307c:	24 2f       	mov	r18, r20
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	80 91 c5 03 	lds	r24, 0x03C5
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	28 17       	cp	r18, r24
    308a:	39 07       	cpc	r19, r25
    308c:	09 f0       	breq	.+2      	; 0x3090 <lcd_putchar+0xc8>
    308e:	a4 c0       	rjmp	.+328    	; 0x31d8 <lcd_putchar+0x210>
    3090:	c0 e0       	ldi	r28, 0x00	; 0
    3092:	d0 e0       	ldi	r29, 0x00	; 0
    3094:	44 c0       	rjmp	.+136    	; 0x311e <lcd_putchar+0x156>
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	6c 2f       	mov	r22, r28
    309a:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
    309e:	ff 24       	eor	r15, r15
    30a0:	6e 01       	movw	r12, r28
    30a2:	08 94       	sec
    30a4:	c1 1c       	adc	r12, r1
    30a6:	d1 1c       	adc	r13, r1
    30a8:	35 c0       	rjmp	.+106    	; 0x3114 <lcd_putchar+0x14c>
    30aa:	0f 2d       	mov	r16, r15
    30ac:	10 e0       	ldi	r17, 0x00	; 0
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	9c 01       	movw	r18, r24
    30b2:	c2 9f       	mul	r28, r18
    30b4:	c0 01       	movw	r24, r0
    30b6:	c3 9f       	mul	r28, r19
    30b8:	90 0d       	add	r25, r0
    30ba:	d2 9f       	mul	r29, r18
    30bc:	90 0d       	add	r25, r0
    30be:	11 24       	eor	r1, r1
    30c0:	e0 91 d8 03 	lds	r30, 0x03D8
    30c4:	f0 91 d9 03 	lds	r31, 0x03D9
    30c8:	e0 0f       	add	r30, r16
    30ca:	f1 1f       	adc	r31, r17
    30cc:	e8 0f       	add	r30, r24
    30ce:	f9 1f       	adc	r31, r25
    30d0:	80 81       	ld	r24, Z
    30d2:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN12OrangutanLCD9send_dataEh>
    30d6:	e0 91 d8 03 	lds	r30, 0x03D8
    30da:	f0 91 d9 03 	lds	r31, 0x03D9
    30de:	80 91 c6 03 	lds	r24, 0x03C6
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	c8 9f       	mul	r28, r24
    30e6:	d0 01       	movw	r26, r0
    30e8:	c9 9f       	mul	r28, r25
    30ea:	b0 0d       	add	r27, r0
    30ec:	d8 9f       	mul	r29, r24
    30ee:	b0 0d       	add	r27, r0
    30f0:	11 24       	eor	r1, r1
    30f2:	e0 0f       	add	r30, r16
    30f4:	f1 1f       	adc	r31, r17
    30f6:	ae 0f       	add	r26, r30
    30f8:	bf 1f       	adc	r27, r31
    30fa:	ac 01       	movw	r20, r24
    30fc:	c4 9e       	mul	r12, r20
    30fe:	c0 01       	movw	r24, r0
    3100:	c5 9e       	mul	r12, r21
    3102:	90 0d       	add	r25, r0
    3104:	d4 9e       	mul	r13, r20
    3106:	90 0d       	add	r25, r0
    3108:	11 24       	eor	r1, r1
    310a:	e8 0f       	add	r30, r24
    310c:	f9 1f       	adc	r31, r25
    310e:	80 81       	ld	r24, Z
    3110:	8c 93       	st	X, r24
    3112:	f3 94       	inc	r15
    3114:	80 91 c6 03 	lds	r24, 0x03C6
    3118:	f8 16       	cp	r15, r24
    311a:	38 f2       	brcs	.-114    	; 0x30aa <lcd_putchar+0xe2>
    311c:	e6 01       	movw	r28, r12
    311e:	60 91 c5 03 	lds	r22, 0x03C5
    3122:	86 2f       	mov	r24, r22
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	02 97       	sbiw	r24, 0x02	; 2
    3128:	c8 17       	cp	r28, r24
    312a:	d9 07       	cpc	r29, r25
    312c:	0c f4       	brge	.+2      	; 0x3130 <lcd_putchar+0x168>
    312e:	b3 cf       	rjmp	.-154    	; 0x3096 <lcd_putchar+0xce>
    3130:	62 30       	cpi	r22, 0x02	; 2
    3132:	08 f4       	brcc	.+2      	; 0x3136 <lcd_putchar+0x16e>
    3134:	40 c0       	rjmp	.+128    	; 0x31b6 <lcd_putchar+0x1ee>
    3136:	62 50       	subi	r22, 0x02	; 2
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
    313e:	ff 24       	eor	r15, r15
    3140:	40 e2       	ldi	r20, 0x20	; 32
    3142:	d4 2e       	mov	r13, r20
    3144:	34 c0       	rjmp	.+104    	; 0x31ae <lcd_putchar+0x1e6>
    3146:	0f 2d       	mov	r16, r15
    3148:	10 e0       	ldi	r17, 0x00	; 0
    314a:	80 91 c5 03 	lds	r24, 0x03C5
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	02 97       	sbiw	r24, 0x02	; 2
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	ac 01       	movw	r20, r24
    3156:	42 9f       	mul	r20, r18
    3158:	c0 01       	movw	r24, r0
    315a:	43 9f       	mul	r20, r19
    315c:	90 0d       	add	r25, r0
    315e:	52 9f       	mul	r21, r18
    3160:	90 0d       	add	r25, r0
    3162:	11 24       	eor	r1, r1
    3164:	e0 91 d8 03 	lds	r30, 0x03D8
    3168:	f0 91 d9 03 	lds	r31, 0x03D9
    316c:	e0 0f       	add	r30, r16
    316e:	f1 1f       	adc	r31, r17
    3170:	e8 0f       	add	r30, r24
    3172:	f9 1f       	adc	r31, r25
    3174:	80 81       	ld	r24, Z
    3176:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN12OrangutanLCD9send_dataEh>
    317a:	20 91 c5 03 	lds	r18, 0x03C5
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	22 50       	subi	r18, 0x02	; 2
    3182:	30 40       	sbci	r19, 0x00	; 0
    3184:	80 91 c6 03 	lds	r24, 0x03C6
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	ac 01       	movw	r20, r24
    318c:	24 9f       	mul	r18, r20
    318e:	c0 01       	movw	r24, r0
    3190:	25 9f       	mul	r18, r21
    3192:	90 0d       	add	r25, r0
    3194:	34 9f       	mul	r19, r20
    3196:	90 0d       	add	r25, r0
    3198:	11 24       	eor	r1, r1
    319a:	e0 91 d8 03 	lds	r30, 0x03D8
    319e:	f0 91 d9 03 	lds	r31, 0x03D9
    31a2:	e0 0f       	add	r30, r16
    31a4:	f1 1f       	adc	r31, r17
    31a6:	e8 0f       	add	r30, r24
    31a8:	f9 1f       	adc	r31, r25
    31aa:	d0 82       	st	Z, r13
    31ac:	f3 94       	inc	r15
    31ae:	20 91 c6 03 	lds	r18, 0x03C6
    31b2:	f2 16       	cp	r15, r18
    31b4:	40 f2       	brcs	.-112    	; 0x3146 <lcd_putchar+0x17e>
    31b6:	60 91 c5 03 	lds	r22, 0x03C5
    31ba:	61 50       	subi	r22, 0x01	; 1
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
    31c2:	00 e0       	ldi	r16, 0x00	; 0
    31c4:	04 c0       	rjmp	.+8      	; 0x31ce <lcd_putchar+0x206>
    31c6:	80 e2       	ldi	r24, 0x20	; 32
    31c8:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN12OrangutanLCD9send_dataEh>
    31cc:	0f 5f       	subi	r16, 0xFF	; 255
    31ce:	80 91 c6 03 	lds	r24, 0x03C6
    31d2:	08 17       	cp	r16, r24
    31d4:	c0 f3       	brcs	.-16     	; 0x31c6 <lcd_putchar+0x1fe>
    31d6:	03 c0       	rjmp	.+6      	; 0x31de <lcd_putchar+0x216>
    31d8:	4f 5f       	subi	r20, 0xFF	; 255
    31da:	40 93 da 03 	sts	0x03DA, r20
    31de:	10 92 db 03 	sts	0x03DB, r1
    31e2:	80 91 db 03 	lds	r24, 0x03DB
    31e6:	60 91 da 03 	lds	r22, 0x03DA
    31ea:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <_ZN12OrangutanLCD6gotoXYEhh>
    31ee:	2e 2d       	mov	r18, r14
    31f0:	33 27       	eor	r19, r19
    31f2:	27 fd       	sbrc	r18, 7
    31f4:	30 95       	com	r19
    31f6:	c9 01       	movw	r24, r18
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
    31fc:	e8 e0       	ldi	r30, 0x08	; 8
    31fe:	0c 94 cc 1a 	jmp	0x3598	; 0x3598 <__epilogue_restores__+0x14>

00003202 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    3202:	ef 92       	push	r14
    3204:	ff 92       	push	r15
    3206:	0f 93       	push	r16
    3208:	1f 93       	push	r17
    320a:	cf 93       	push	r28
    320c:	df 93       	push	r29
    320e:	7c 01       	movw	r14, r24
    3210:	06 2f       	mov	r16, r22
    3212:	10 e0       	ldi	r17, 0x00	; 0
    3214:	53 e0       	ldi	r21, 0x03	; 3
    3216:	00 0f       	add	r16, r16
    3218:	11 1f       	adc	r17, r17
    321a:	5a 95       	dec	r21
    321c:	e1 f7       	brne	.-8      	; 0x3216 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    321e:	c0 e0       	ldi	r28, 0x00	; 0
    3220:	d0 e0       	ldi	r29, 0x00	; 0
    3222:	9e 01       	movw	r18, r28
    3224:	20 0f       	add	r18, r16
    3226:	82 2f       	mov	r24, r18
    3228:	80 64       	ori	r24, 0x40	; 64
    322a:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_ZN12OrangutanLCD8send_cmdEh>
    322e:	f7 01       	movw	r30, r14
    3230:	ec 0f       	add	r30, r28
    3232:	fd 1f       	adc	r31, r29
    3234:	e4 91       	lpm	r30, Z+
    3236:	8e 2f       	mov	r24, r30
    3238:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN12OrangutanLCD9send_dataEh>
    323c:	21 96       	adiw	r28, 0x01	; 1
    323e:	c8 30       	cpi	r28, 0x08	; 8
    3240:	d1 05       	cpc	r29, r1
    3242:	79 f7       	brne	.-34     	; 0x3222 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    3244:	cd b7       	in	r28, 0x3d	; 61
    3246:	de b7       	in	r29, 0x3e	; 62
    3248:	e6 e0       	ldi	r30, 0x06	; 6
    324a:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <__epilogue_restores__+0x18>

0000324e <lcd_load_custom_character>:
    324e:	0e 94 01 19 	call	0x3202	; 0x3202 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    3252:	08 95       	ret

00003254 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    3254:	60 e0       	ldi	r22, 0x00	; 0
    3256:	41 e0       	ldi	r20, 0x01	; 1
    3258:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZN12OrangutanLCD4sendEhhh>
    325c:	08 95       	ret

0000325e <_ZN12OrangutanLCD6scrollEhhj>:
    325e:	0f 93       	push	r16
    3260:	1f 93       	push	r17
    3262:	cf 93       	push	r28
    3264:	df 93       	push	r29
    3266:	08 2f       	mov	r16, r24
    3268:	16 2f       	mov	r17, r22
    326a:	ea 01       	movw	r28, r20
    326c:	0b c0       	rjmp	.+22     	; 0x3284 <_ZN12OrangutanLCD6scrollEhhj+0x26>
    326e:	00 23       	and	r16, r16
    3270:	11 f4       	brne	.+4      	; 0x3276 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    3272:	88 e1       	ldi	r24, 0x18	; 24
    3274:	01 c0       	rjmp	.+2      	; 0x3278 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    3276:	8c e1       	ldi	r24, 0x1C	; 28
    3278:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_ZN12OrangutanLCD8send_cmdEh>
    327c:	ce 01       	movw	r24, r28
    327e:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN13OrangutanTime17delayMillisecondsEj>
    3282:	11 50       	subi	r17, 0x01	; 1
    3284:	11 23       	and	r17, r17
    3286:	99 f7       	brne	.-26     	; 0x326e <_ZN12OrangutanLCD6scrollEhhj+0x10>
    3288:	df 91       	pop	r29
    328a:	cf 91       	pop	r28
    328c:	1f 91       	pop	r17
    328e:	0f 91       	pop	r16
    3290:	08 95       	ret

00003292 <lcd_scroll>:
    3292:	0e 94 2f 19 	call	0x325e	; 0x325e <_ZN12OrangutanLCD6scrollEhhj>
    3296:	08 95       	ret

00003298 <__vector_11>:
    3298:	2f 92       	push	r2
    329a:	8f 93       	push	r24
    329c:	9f 93       	push	r25
    329e:	2f b6       	in	r2, 0x3f	; 63
    32a0:	80 91 e2 03 	lds	r24, 0x03E2
    32a4:	90 91 e3 03 	lds	r25, 0x03E3
    32a8:	01 96       	adiw	r24, 0x01	; 1
    32aa:	80 93 e2 03 	sts	0x03E2, r24
    32ae:	90 93 e3 03 	sts	0x03E3, r25
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	80 91 e4 03 	lds	r24, 0x03E4
    32b8:	89 1f       	adc	r24, r25
    32ba:	80 93 e4 03 	sts	0x03E4, r24
    32be:	90 91 ea 03 	lds	r25, 0x03EA
    32c2:	9c 5f       	subi	r25, 0xFC	; 252
    32c4:	90 93 ea 03 	sts	0x03EA, r25
    32c8:	80 91 e9 03 	lds	r24, 0x03E9
    32cc:	80 51       	subi	r24, 0x10	; 16
    32ce:	97 42       	sbci	r25, 0x27	; 39
    32d0:	c0 f0       	brcs	.+48     	; 0x3302 <end>
    32d2:	90 93 ea 03 	sts	0x03EA, r25
    32d6:	80 93 e9 03 	sts	0x03E9, r24
    32da:	80 91 e5 03 	lds	r24, 0x03E5
    32de:	90 91 e6 03 	lds	r25, 0x03E6
    32e2:	01 96       	adiw	r24, 0x01	; 1
    32e4:	80 93 e5 03 	sts	0x03E5, r24
    32e8:	90 93 e6 03 	sts	0x03E6, r25
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	80 91 e7 03 	lds	r24, 0x03E7
    32f2:	89 1f       	adc	r24, r25
    32f4:	80 93 e7 03 	sts	0x03E7, r24
    32f8:	80 91 e8 03 	lds	r24, 0x03E8
    32fc:	89 1f       	adc	r24, r25
    32fe:	80 93 e8 03 	sts	0x03E8, r24

00003302 <end>:
    3302:	2f be       	out	0x3f, r2	; 63
    3304:	9f 91       	pop	r25
    3306:	8f 91       	pop	r24
    3308:	2f 90       	pop	r2
    330a:	18 95       	reti

0000330c <ticks_to_microseconds>:
    330c:	6f 5f       	subi	r22, 0xFF	; 255
    330e:	7f 4f       	sbci	r23, 0xFF	; 255
    3310:	8f 4f       	sbci	r24, 0xFF	; 255
    3312:	9f 4f       	sbci	r25, 0xFF	; 255
    3314:	66 0f       	add	r22, r22
    3316:	77 1f       	adc	r23, r23
    3318:	88 1f       	adc	r24, r24
    331a:	99 1f       	adc	r25, r25
    331c:	25 e0       	ldi	r18, 0x05	; 5
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	40 e0       	ldi	r20, 0x00	; 0
    3322:	50 e0       	ldi	r21, 0x00	; 0
    3324:	0e 94 84 1a 	call	0x3508	; 0x3508 <__udivmodsi4>
    3328:	ca 01       	movw	r24, r20
    332a:	b9 01       	movw	r22, r18
    332c:	08 95       	ret

0000332e <delay_ms>:
    332e:	28 ee       	ldi	r18, 0xE8	; 232
    3330:	33 e0       	ldi	r19, 0x03	; 3
    3332:	09 c0       	rjmp	.+18     	; 0x3346 <delay_ms+0x18>
    3334:	f9 01       	movw	r30, r18
    3336:	6f 93       	push	r22
    3338:	64 e0       	ldi	r22, 0x04	; 4
    333a:	6a 95       	dec	r22
    333c:	f1 f7       	brne	.-4      	; 0x333a <delay_ms+0xc>
    333e:	6f 91       	pop	r22
    3340:	31 97       	sbiw	r30, 0x01	; 1
    3342:	c9 f7       	brne	.-14     	; 0x3336 <delay_ms+0x8>
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	00 97       	sbiw	r24, 0x00	; 0
    3348:	a9 f7       	brne	.-22     	; 0x3334 <delay_ms+0x6>
    334a:	08 95       	ret

0000334c <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    334c:	6f 5f       	subi	r22, 0xFF	; 255
    334e:	7f 4f       	sbci	r23, 0xFF	; 255
    3350:	8f 4f       	sbci	r24, 0xFF	; 255
    3352:	9f 4f       	sbci	r25, 0xFF	; 255
    3354:	66 0f       	add	r22, r22
    3356:	77 1f       	adc	r23, r23
    3358:	88 1f       	adc	r24, r24
    335a:	99 1f       	adc	r25, r25
    335c:	25 e0       	ldi	r18, 0x05	; 5
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e0       	ldi	r20, 0x00	; 0
    3362:	50 e0       	ldi	r21, 0x00	; 0
    3364:	0e 94 84 1a 	call	0x3508	; 0x3508 <__udivmodsi4>
    3368:	ca 01       	movw	r24, r20
    336a:	b9 01       	movw	r22, r18
    336c:	08 95       	ret

0000336e <_ZN13OrangutanTime17delayMillisecondsEj>:
    336e:	28 ee       	ldi	r18, 0xE8	; 232
    3370:	33 e0       	ldi	r19, 0x03	; 3
    3372:	09 c0       	rjmp	.+18     	; 0x3386 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3374:	f9 01       	movw	r30, r18
    3376:	6f 93       	push	r22
    3378:	64 e0       	ldi	r22, 0x04	; 4
    337a:	6a 95       	dec	r22
    337c:	f1 f7       	brne	.-4      	; 0x337a <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    337e:	6f 91       	pop	r22
    3380:	31 97       	sbiw	r30, 0x01	; 1
    3382:	c9 f7       	brne	.-14     	; 0x3376 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	00 97       	sbiw	r24, 0x00	; 0
    3388:	a9 f7       	brne	.-22     	; 0x3374 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    338a:	08 95       	ret

0000338c <_ZN13OrangutanTime5init2Ev>:
    338c:	a0 e7       	ldi	r26, 0x70	; 112
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	8c 91       	ld	r24, X
    3392:	8e 7f       	andi	r24, 0xFE	; 254
    3394:	8c 93       	st	X, r24
    3396:	e0 eb       	ldi	r30, 0xB0	; 176
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	83 60       	ori	r24, 0x03	; 3
    339e:	80 83       	st	Z, r24
    33a0:	e1 eb       	ldi	r30, 0xB1	; 177
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	80 81       	ld	r24, Z
    33a6:	80 7f       	andi	r24, 0xF0	; 240
    33a8:	80 83       	st	Z, r24
    33aa:	80 81       	ld	r24, Z
    33ac:	82 60       	ori	r24, 0x02	; 2
    33ae:	80 83       	st	Z, r24
    33b0:	b8 9a       	sbi	0x17, 0	; 23
    33b2:	8c 91       	ld	r24, X
    33b4:	81 60       	ori	r24, 0x01	; 1
    33b6:	8c 93       	st	X, r24
    33b8:	78 94       	sei
    33ba:	08 95       	ret

000033bc <_ZN13OrangutanTime4initEv>:
    33bc:	80 91 eb 03 	lds	r24, 0x03EB
    33c0:	88 23       	and	r24, r24
    33c2:	29 f4       	brne	.+10     	; 0x33ce <_ZN13OrangutanTime4initEv+0x12>
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	80 93 eb 03 	sts	0x03EB, r24
    33ca:	0e 94 c6 19 	call	0x338c	; 0x338c <_ZN13OrangutanTime5init2Ev>
    33ce:	08 95       	ret

000033d0 <_ZN13OrangutanTime2msEv>:
    33d0:	0e 94 de 19 	call	0x33bc	; 0x33bc <_ZN13OrangutanTime4initEv>
    33d4:	e0 e7       	ldi	r30, 0x70	; 112
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	80 81       	ld	r24, Z
    33da:	8e 7f       	andi	r24, 0xFE	; 254
    33dc:	80 83       	st	Z, r24
    33de:	20 91 e5 03 	lds	r18, 0x03E5
    33e2:	30 91 e6 03 	lds	r19, 0x03E6
    33e6:	40 91 e7 03 	lds	r20, 0x03E7
    33ea:	50 91 e8 03 	lds	r21, 0x03E8
    33ee:	80 81       	ld	r24, Z
    33f0:	81 60       	ori	r24, 0x01	; 1
    33f2:	80 83       	st	Z, r24
    33f4:	b9 01       	movw	r22, r18
    33f6:	ca 01       	movw	r24, r20
    33f8:	08 95       	ret

000033fa <get_ms>:
    33fa:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <_ZN13OrangutanTime2msEv>
    33fe:	08 95       	ret

00003400 <_ZN13OrangutanTime5ticksEv>:
    3400:	0e 94 de 19 	call	0x33bc	; 0x33bc <_ZN13OrangutanTime4initEv>
    3404:	80 91 70 00 	lds	r24, 0x0070
    3408:	8e 7f       	andi	r24, 0xFE	; 254
    340a:	80 93 70 00 	sts	0x0070, r24
    340e:	60 91 b2 00 	lds	r22, 0x00B2
    3412:	80 91 e1 03 	lds	r24, 0x03E1
    3416:	90 91 e2 03 	lds	r25, 0x03E2
    341a:	a0 91 e3 03 	lds	r26, 0x03E3
    341e:	b0 91 e4 03 	lds	r27, 0x03E4
    3422:	b8 99       	sbic	0x17, 0	; 23
    3424:	05 c0       	rjmp	.+10     	; 0x3430 <_ZN13OrangutanTime5ticksEv+0x30>
    3426:	26 2f       	mov	r18, r22
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	40 e0       	ldi	r20, 0x00	; 0
    342c:	50 e0       	ldi	r21, 0x00	; 0
    342e:	11 c0       	rjmp	.+34     	; 0x3452 <_ZN13OrangutanTime5ticksEv+0x52>
    3430:	80 91 b2 00 	lds	r24, 0x00B2
    3434:	20 91 e1 03 	lds	r18, 0x03E1
    3438:	30 91 e2 03 	lds	r19, 0x03E2
    343c:	40 91 e3 03 	lds	r20, 0x03E3
    3440:	50 91 e4 03 	lds	r21, 0x03E4
    3444:	20 50       	subi	r18, 0x00	; 0
    3446:	3f 4f       	sbci	r19, 0xFF	; 255
    3448:	4f 4f       	sbci	r20, 0xFF	; 255
    344a:	5f 4f       	sbci	r21, 0xFF	; 255
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	a0 e0       	ldi	r26, 0x00	; 0
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	28 2b       	or	r18, r24
    3454:	39 2b       	or	r19, r25
    3456:	4a 2b       	or	r20, r26
    3458:	5b 2b       	or	r21, r27
    345a:	80 91 70 00 	lds	r24, 0x0070
    345e:	81 60       	ori	r24, 0x01	; 1
    3460:	80 93 70 00 	sts	0x0070, r24
    3464:	b9 01       	movw	r22, r18
    3466:	ca 01       	movw	r24, r20
    3468:	08 95       	ret

0000346a <get_ticks>:
    346a:	0e 94 00 1a 	call	0x3400	; 0x3400 <_ZN13OrangutanTime5ticksEv>
    346e:	08 95       	ret

00003470 <_ZN13OrangutanTime5resetEv>:
    3470:	0e 94 de 19 	call	0x33bc	; 0x33bc <_ZN13OrangutanTime4initEv>
    3474:	e0 e7       	ldi	r30, 0x70	; 112
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
    347a:	8e 7f       	andi	r24, 0xFE	; 254
    347c:	80 83       	st	Z, r24
    347e:	10 92 e5 03 	sts	0x03E5, r1
    3482:	10 92 e6 03 	sts	0x03E6, r1
    3486:	10 92 e7 03 	sts	0x03E7, r1
    348a:	10 92 e8 03 	sts	0x03E8, r1
    348e:	10 92 ea 03 	sts	0x03EA, r1
    3492:	10 92 e9 03 	sts	0x03E9, r1
    3496:	80 81       	ld	r24, Z
    3498:	81 60       	ori	r24, 0x01	; 1
    349a:	80 83       	st	Z, r24
    349c:	08 95       	ret

0000349e <time_reset>:
    349e:	0e 94 38 1a 	call	0x3470	; 0x3470 <_ZN13OrangutanTime5resetEv>
    34a2:	08 95       	ret

000034a4 <__mulsi3>:
    34a4:	62 9f       	mul	r22, r18
    34a6:	d0 01       	movw	r26, r0
    34a8:	73 9f       	mul	r23, r19
    34aa:	f0 01       	movw	r30, r0
    34ac:	82 9f       	mul	r24, r18
    34ae:	e0 0d       	add	r30, r0
    34b0:	f1 1d       	adc	r31, r1
    34b2:	64 9f       	mul	r22, r20
    34b4:	e0 0d       	add	r30, r0
    34b6:	f1 1d       	adc	r31, r1
    34b8:	92 9f       	mul	r25, r18
    34ba:	f0 0d       	add	r31, r0
    34bc:	83 9f       	mul	r24, r19
    34be:	f0 0d       	add	r31, r0
    34c0:	74 9f       	mul	r23, r20
    34c2:	f0 0d       	add	r31, r0
    34c4:	65 9f       	mul	r22, r21
    34c6:	f0 0d       	add	r31, r0
    34c8:	99 27       	eor	r25, r25
    34ca:	72 9f       	mul	r23, r18
    34cc:	b0 0d       	add	r27, r0
    34ce:	e1 1d       	adc	r30, r1
    34d0:	f9 1f       	adc	r31, r25
    34d2:	63 9f       	mul	r22, r19
    34d4:	b0 0d       	add	r27, r0
    34d6:	e1 1d       	adc	r30, r1
    34d8:	f9 1f       	adc	r31, r25
    34da:	bd 01       	movw	r22, r26
    34dc:	cf 01       	movw	r24, r30
    34de:	11 24       	eor	r1, r1
    34e0:	08 95       	ret

000034e2 <__divmodhi4>:
    34e2:	97 fb       	bst	r25, 7
    34e4:	09 2e       	mov	r0, r25
    34e6:	07 26       	eor	r0, r23
    34e8:	0a d0       	rcall	.+20     	; 0x34fe <__divmodhi4_neg1>
    34ea:	77 fd       	sbrc	r23, 7
    34ec:	04 d0       	rcall	.+8      	; 0x34f6 <__divmodhi4_neg2>
    34ee:	65 d0       	rcall	.+202    	; 0x35ba <__udivmodhi4>
    34f0:	06 d0       	rcall	.+12     	; 0x34fe <__divmodhi4_neg1>
    34f2:	00 20       	and	r0, r0
    34f4:	1a f4       	brpl	.+6      	; 0x34fc <__divmodhi4_exit>

000034f6 <__divmodhi4_neg2>:
    34f6:	70 95       	com	r23
    34f8:	61 95       	neg	r22
    34fa:	7f 4f       	sbci	r23, 0xFF	; 255

000034fc <__divmodhi4_exit>:
    34fc:	08 95       	ret

000034fe <__divmodhi4_neg1>:
    34fe:	f6 f7       	brtc	.-4      	; 0x34fc <__divmodhi4_exit>
    3500:	90 95       	com	r25
    3502:	81 95       	neg	r24
    3504:	9f 4f       	sbci	r25, 0xFF	; 255
    3506:	08 95       	ret

00003508 <__udivmodsi4>:
    3508:	a1 e2       	ldi	r26, 0x21	; 33
    350a:	1a 2e       	mov	r1, r26
    350c:	aa 1b       	sub	r26, r26
    350e:	bb 1b       	sub	r27, r27
    3510:	fd 01       	movw	r30, r26
    3512:	0d c0       	rjmp	.+26     	; 0x352e <__udivmodsi4_ep>

00003514 <__udivmodsi4_loop>:
    3514:	aa 1f       	adc	r26, r26
    3516:	bb 1f       	adc	r27, r27
    3518:	ee 1f       	adc	r30, r30
    351a:	ff 1f       	adc	r31, r31
    351c:	a2 17       	cp	r26, r18
    351e:	b3 07       	cpc	r27, r19
    3520:	e4 07       	cpc	r30, r20
    3522:	f5 07       	cpc	r31, r21
    3524:	20 f0       	brcs	.+8      	; 0x352e <__udivmodsi4_ep>
    3526:	a2 1b       	sub	r26, r18
    3528:	b3 0b       	sbc	r27, r19
    352a:	e4 0b       	sbc	r30, r20
    352c:	f5 0b       	sbc	r31, r21

0000352e <__udivmodsi4_ep>:
    352e:	66 1f       	adc	r22, r22
    3530:	77 1f       	adc	r23, r23
    3532:	88 1f       	adc	r24, r24
    3534:	99 1f       	adc	r25, r25
    3536:	1a 94       	dec	r1
    3538:	69 f7       	brne	.-38     	; 0x3514 <__udivmodsi4_loop>
    353a:	60 95       	com	r22
    353c:	70 95       	com	r23
    353e:	80 95       	com	r24
    3540:	90 95       	com	r25
    3542:	9b 01       	movw	r18, r22
    3544:	ac 01       	movw	r20, r24
    3546:	bd 01       	movw	r22, r26
    3548:	cf 01       	movw	r24, r30
    354a:	08 95       	ret

0000354c <__prologue_saves__>:
    354c:	2f 92       	push	r2
    354e:	3f 92       	push	r3
    3550:	4f 92       	push	r4
    3552:	5f 92       	push	r5
    3554:	6f 92       	push	r6
    3556:	7f 92       	push	r7
    3558:	8f 92       	push	r8
    355a:	9f 92       	push	r9
    355c:	af 92       	push	r10
    355e:	bf 92       	push	r11
    3560:	cf 92       	push	r12
    3562:	df 92       	push	r13
    3564:	ef 92       	push	r14
    3566:	ff 92       	push	r15
    3568:	0f 93       	push	r16
    356a:	1f 93       	push	r17
    356c:	cf 93       	push	r28
    356e:	df 93       	push	r29
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	ca 1b       	sub	r28, r26
    3576:	db 0b       	sbc	r29, r27
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
    3582:	09 94       	ijmp

00003584 <__epilogue_restores__>:
    3584:	2a 88       	ldd	r2, Y+18	; 0x12
    3586:	39 88       	ldd	r3, Y+17	; 0x11
    3588:	48 88       	ldd	r4, Y+16	; 0x10
    358a:	5f 84       	ldd	r5, Y+15	; 0x0f
    358c:	6e 84       	ldd	r6, Y+14	; 0x0e
    358e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3590:	8c 84       	ldd	r8, Y+12	; 0x0c
    3592:	9b 84       	ldd	r9, Y+11	; 0x0b
    3594:	aa 84       	ldd	r10, Y+10	; 0x0a
    3596:	b9 84       	ldd	r11, Y+9	; 0x09
    3598:	c8 84       	ldd	r12, Y+8	; 0x08
    359a:	df 80       	ldd	r13, Y+7	; 0x07
    359c:	ee 80       	ldd	r14, Y+6	; 0x06
    359e:	fd 80       	ldd	r15, Y+5	; 0x05
    35a0:	0c 81       	ldd	r16, Y+4	; 0x04
    35a2:	1b 81       	ldd	r17, Y+3	; 0x03
    35a4:	aa 81       	ldd	r26, Y+2	; 0x02
    35a6:	b9 81       	ldd	r27, Y+1	; 0x01
    35a8:	ce 0f       	add	r28, r30
    35aa:	d1 1d       	adc	r29, r1
    35ac:	0f b6       	in	r0, 0x3f	; 63
    35ae:	f8 94       	cli
    35b0:	de bf       	out	0x3e, r29	; 62
    35b2:	0f be       	out	0x3f, r0	; 63
    35b4:	cd bf       	out	0x3d, r28	; 61
    35b6:	ed 01       	movw	r28, r26
    35b8:	08 95       	ret

000035ba <__udivmodhi4>:
    35ba:	aa 1b       	sub	r26, r26
    35bc:	bb 1b       	sub	r27, r27
    35be:	51 e1       	ldi	r21, 0x11	; 17
    35c0:	07 c0       	rjmp	.+14     	; 0x35d0 <__udivmodhi4_ep>

000035c2 <__udivmodhi4_loop>:
    35c2:	aa 1f       	adc	r26, r26
    35c4:	bb 1f       	adc	r27, r27
    35c6:	a6 17       	cp	r26, r22
    35c8:	b7 07       	cpc	r27, r23
    35ca:	10 f0       	brcs	.+4      	; 0x35d0 <__udivmodhi4_ep>
    35cc:	a6 1b       	sub	r26, r22
    35ce:	b7 0b       	sbc	r27, r23

000035d0 <__udivmodhi4_ep>:
    35d0:	88 1f       	adc	r24, r24
    35d2:	99 1f       	adc	r25, r25
    35d4:	5a 95       	dec	r21
    35d6:	a9 f7       	brne	.-22     	; 0x35c2 <__udivmodhi4_loop>
    35d8:	80 95       	com	r24
    35da:	90 95       	com	r25
    35dc:	bc 01       	movw	r22, r24
    35de:	cd 01       	movw	r24, r26
    35e0:	08 95       	ret

000035e2 <malloc>:
    35e2:	cf 93       	push	r28
    35e4:	df 93       	push	r29
    35e6:	bc 01       	movw	r22, r24
    35e8:	82 30       	cpi	r24, 0x02	; 2
    35ea:	91 05       	cpc	r25, r1
    35ec:	10 f4       	brcc	.+4      	; 0x35f2 <malloc+0x10>
    35ee:	62 e0       	ldi	r22, 0x02	; 2
    35f0:	70 e0       	ldi	r23, 0x00	; 0
    35f2:	a0 91 ee 03 	lds	r26, 0x03EE
    35f6:	b0 91 ef 03 	lds	r27, 0x03EF
    35fa:	ed 01       	movw	r28, r26
    35fc:	e0 e0       	ldi	r30, 0x00	; 0
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	40 e0       	ldi	r20, 0x00	; 0
    3602:	50 e0       	ldi	r21, 0x00	; 0
    3604:	21 c0       	rjmp	.+66     	; 0x3648 <malloc+0x66>
    3606:	88 81       	ld	r24, Y
    3608:	99 81       	ldd	r25, Y+1	; 0x01
    360a:	86 17       	cp	r24, r22
    360c:	97 07       	cpc	r25, r23
    360e:	69 f4       	brne	.+26     	; 0x362a <malloc+0x48>
    3610:	8a 81       	ldd	r24, Y+2	; 0x02
    3612:	9b 81       	ldd	r25, Y+3	; 0x03
    3614:	30 97       	sbiw	r30, 0x00	; 0
    3616:	19 f0       	breq	.+6      	; 0x361e <malloc+0x3c>
    3618:	93 83       	std	Z+3, r25	; 0x03
    361a:	82 83       	std	Z+2, r24	; 0x02
    361c:	04 c0       	rjmp	.+8      	; 0x3626 <malloc+0x44>
    361e:	90 93 ef 03 	sts	0x03EF, r25
    3622:	80 93 ee 03 	sts	0x03EE, r24
    3626:	fe 01       	movw	r30, r28
    3628:	34 c0       	rjmp	.+104    	; 0x3692 <malloc+0xb0>
    362a:	68 17       	cp	r22, r24
    362c:	79 07       	cpc	r23, r25
    362e:	38 f4       	brcc	.+14     	; 0x363e <malloc+0x5c>
    3630:	41 15       	cp	r20, r1
    3632:	51 05       	cpc	r21, r1
    3634:	19 f0       	breq	.+6      	; 0x363c <malloc+0x5a>
    3636:	84 17       	cp	r24, r20
    3638:	95 07       	cpc	r25, r21
    363a:	08 f4       	brcc	.+2      	; 0x363e <malloc+0x5c>
    363c:	ac 01       	movw	r20, r24
    363e:	fe 01       	movw	r30, r28
    3640:	8a 81       	ldd	r24, Y+2	; 0x02
    3642:	9b 81       	ldd	r25, Y+3	; 0x03
    3644:	9c 01       	movw	r18, r24
    3646:	e9 01       	movw	r28, r18
    3648:	20 97       	sbiw	r28, 0x00	; 0
    364a:	e9 f6       	brne	.-70     	; 0x3606 <malloc+0x24>
    364c:	41 15       	cp	r20, r1
    364e:	51 05       	cpc	r21, r1
    3650:	a9 f1       	breq	.+106    	; 0x36bc <malloc+0xda>
    3652:	ca 01       	movw	r24, r20
    3654:	86 1b       	sub	r24, r22
    3656:	97 0b       	sbc	r25, r23
    3658:	04 97       	sbiw	r24, 0x04	; 4
    365a:	08 f4       	brcc	.+2      	; 0x365e <malloc+0x7c>
    365c:	ba 01       	movw	r22, r20
    365e:	e0 e0       	ldi	r30, 0x00	; 0
    3660:	f0 e0       	ldi	r31, 0x00	; 0
    3662:	2a c0       	rjmp	.+84     	; 0x36b8 <malloc+0xd6>
    3664:	8d 91       	ld	r24, X+
    3666:	9c 91       	ld	r25, X
    3668:	11 97       	sbiw	r26, 0x01	; 1
    366a:	84 17       	cp	r24, r20
    366c:	95 07       	cpc	r25, r21
    366e:	f9 f4       	brne	.+62     	; 0x36ae <malloc+0xcc>
    3670:	64 17       	cp	r22, r20
    3672:	75 07       	cpc	r23, r21
    3674:	81 f4       	brne	.+32     	; 0x3696 <malloc+0xb4>
    3676:	12 96       	adiw	r26, 0x02	; 2
    3678:	8d 91       	ld	r24, X+
    367a:	9c 91       	ld	r25, X
    367c:	13 97       	sbiw	r26, 0x03	; 3
    367e:	30 97       	sbiw	r30, 0x00	; 0
    3680:	19 f0       	breq	.+6      	; 0x3688 <malloc+0xa6>
    3682:	93 83       	std	Z+3, r25	; 0x03
    3684:	82 83       	std	Z+2, r24	; 0x02
    3686:	04 c0       	rjmp	.+8      	; 0x3690 <malloc+0xae>
    3688:	90 93 ef 03 	sts	0x03EF, r25
    368c:	80 93 ee 03 	sts	0x03EE, r24
    3690:	fd 01       	movw	r30, r26
    3692:	32 96       	adiw	r30, 0x02	; 2
    3694:	4f c0       	rjmp	.+158    	; 0x3734 <malloc+0x152>
    3696:	ca 01       	movw	r24, r20
    3698:	86 1b       	sub	r24, r22
    369a:	97 0b       	sbc	r25, r23
    369c:	fd 01       	movw	r30, r26
    369e:	e8 0f       	add	r30, r24
    36a0:	f9 1f       	adc	r31, r25
    36a2:	61 93       	st	Z+, r22
    36a4:	71 93       	st	Z+, r23
    36a6:	02 97       	sbiw	r24, 0x02	; 2
    36a8:	8d 93       	st	X+, r24
    36aa:	9c 93       	st	X, r25
    36ac:	43 c0       	rjmp	.+134    	; 0x3734 <malloc+0x152>
    36ae:	fd 01       	movw	r30, r26
    36b0:	82 81       	ldd	r24, Z+2	; 0x02
    36b2:	93 81       	ldd	r25, Z+3	; 0x03
    36b4:	9c 01       	movw	r18, r24
    36b6:	d9 01       	movw	r26, r18
    36b8:	10 97       	sbiw	r26, 0x00	; 0
    36ba:	a1 f6       	brne	.-88     	; 0x3664 <malloc+0x82>
    36bc:	80 91 ec 03 	lds	r24, 0x03EC
    36c0:	90 91 ed 03 	lds	r25, 0x03ED
    36c4:	89 2b       	or	r24, r25
    36c6:	41 f4       	brne	.+16     	; 0x36d8 <malloc+0xf6>
    36c8:	80 91 c9 03 	lds	r24, 0x03C9
    36cc:	90 91 ca 03 	lds	r25, 0x03CA
    36d0:	90 93 ed 03 	sts	0x03ED, r25
    36d4:	80 93 ec 03 	sts	0x03EC, r24
    36d8:	40 91 cb 03 	lds	r20, 0x03CB
    36dc:	50 91 cc 03 	lds	r21, 0x03CC
    36e0:	41 15       	cp	r20, r1
    36e2:	51 05       	cpc	r21, r1
    36e4:	41 f4       	brne	.+16     	; 0x36f6 <malloc+0x114>
    36e6:	4d b7       	in	r20, 0x3d	; 61
    36e8:	5e b7       	in	r21, 0x3e	; 62
    36ea:	80 91 c7 03 	lds	r24, 0x03C7
    36ee:	90 91 c8 03 	lds	r25, 0x03C8
    36f2:	48 1b       	sub	r20, r24
    36f4:	59 0b       	sbc	r21, r25
    36f6:	20 91 ec 03 	lds	r18, 0x03EC
    36fa:	30 91 ed 03 	lds	r19, 0x03ED
    36fe:	24 17       	cp	r18, r20
    3700:	35 07       	cpc	r19, r21
    3702:	b0 f4       	brcc	.+44     	; 0x3730 <malloc+0x14e>
    3704:	ca 01       	movw	r24, r20
    3706:	82 1b       	sub	r24, r18
    3708:	93 0b       	sbc	r25, r19
    370a:	86 17       	cp	r24, r22
    370c:	97 07       	cpc	r25, r23
    370e:	80 f0       	brcs	.+32     	; 0x3730 <malloc+0x14e>
    3710:	ab 01       	movw	r20, r22
    3712:	4e 5f       	subi	r20, 0xFE	; 254
    3714:	5f 4f       	sbci	r21, 0xFF	; 255
    3716:	84 17       	cp	r24, r20
    3718:	95 07       	cpc	r25, r21
    371a:	50 f0       	brcs	.+20     	; 0x3730 <malloc+0x14e>
    371c:	42 0f       	add	r20, r18
    371e:	53 1f       	adc	r21, r19
    3720:	50 93 ed 03 	sts	0x03ED, r21
    3724:	40 93 ec 03 	sts	0x03EC, r20
    3728:	f9 01       	movw	r30, r18
    372a:	61 93       	st	Z+, r22
    372c:	71 93       	st	Z+, r23
    372e:	02 c0       	rjmp	.+4      	; 0x3734 <malloc+0x152>
    3730:	e0 e0       	ldi	r30, 0x00	; 0
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	cf 01       	movw	r24, r30
    3736:	df 91       	pop	r29
    3738:	cf 91       	pop	r28
    373a:	08 95       	ret

0000373c <free>:
    373c:	cf 93       	push	r28
    373e:	df 93       	push	r29
    3740:	00 97       	sbiw	r24, 0x00	; 0
    3742:	09 f4       	brne	.+2      	; 0x3746 <free+0xa>
    3744:	50 c0       	rjmp	.+160    	; 0x37e6 <free+0xaa>
    3746:	ec 01       	movw	r28, r24
    3748:	22 97       	sbiw	r28, 0x02	; 2
    374a:	1b 82       	std	Y+3, r1	; 0x03
    374c:	1a 82       	std	Y+2, r1	; 0x02
    374e:	a0 91 ee 03 	lds	r26, 0x03EE
    3752:	b0 91 ef 03 	lds	r27, 0x03EF
    3756:	10 97       	sbiw	r26, 0x00	; 0
    3758:	09 f1       	breq	.+66     	; 0x379c <free+0x60>
    375a:	40 e0       	ldi	r20, 0x00	; 0
    375c:	50 e0       	ldi	r21, 0x00	; 0
    375e:	ac 17       	cp	r26, r28
    3760:	bd 07       	cpc	r27, r29
    3762:	08 f1       	brcs	.+66     	; 0x37a6 <free+0x6a>
    3764:	bb 83       	std	Y+3, r27	; 0x03
    3766:	aa 83       	std	Y+2, r26	; 0x02
    3768:	fe 01       	movw	r30, r28
    376a:	21 91       	ld	r18, Z+
    376c:	31 91       	ld	r19, Z+
    376e:	e2 0f       	add	r30, r18
    3770:	f3 1f       	adc	r31, r19
    3772:	ae 17       	cp	r26, r30
    3774:	bf 07       	cpc	r27, r31
    3776:	79 f4       	brne	.+30     	; 0x3796 <free+0x5a>
    3778:	8d 91       	ld	r24, X+
    377a:	9c 91       	ld	r25, X
    377c:	11 97       	sbiw	r26, 0x01	; 1
    377e:	28 0f       	add	r18, r24
    3780:	39 1f       	adc	r19, r25
    3782:	2e 5f       	subi	r18, 0xFE	; 254
    3784:	3f 4f       	sbci	r19, 0xFF	; 255
    3786:	39 83       	std	Y+1, r19	; 0x01
    3788:	28 83       	st	Y, r18
    378a:	12 96       	adiw	r26, 0x02	; 2
    378c:	8d 91       	ld	r24, X+
    378e:	9c 91       	ld	r25, X
    3790:	13 97       	sbiw	r26, 0x03	; 3
    3792:	9b 83       	std	Y+3, r25	; 0x03
    3794:	8a 83       	std	Y+2, r24	; 0x02
    3796:	41 15       	cp	r20, r1
    3798:	51 05       	cpc	r21, r1
    379a:	71 f4       	brne	.+28     	; 0x37b8 <free+0x7c>
    379c:	d0 93 ef 03 	sts	0x03EF, r29
    37a0:	c0 93 ee 03 	sts	0x03EE, r28
    37a4:	20 c0       	rjmp	.+64     	; 0x37e6 <free+0xaa>
    37a6:	12 96       	adiw	r26, 0x02	; 2
    37a8:	8d 91       	ld	r24, X+
    37aa:	9c 91       	ld	r25, X
    37ac:	13 97       	sbiw	r26, 0x03	; 3
    37ae:	ad 01       	movw	r20, r26
    37b0:	00 97       	sbiw	r24, 0x00	; 0
    37b2:	11 f0       	breq	.+4      	; 0x37b8 <free+0x7c>
    37b4:	dc 01       	movw	r26, r24
    37b6:	d3 cf       	rjmp	.-90     	; 0x375e <free+0x22>
    37b8:	fa 01       	movw	r30, r20
    37ba:	d3 83       	std	Z+3, r29	; 0x03
    37bc:	c2 83       	std	Z+2, r28	; 0x02
    37be:	21 91       	ld	r18, Z+
    37c0:	31 91       	ld	r19, Z+
    37c2:	e2 0f       	add	r30, r18
    37c4:	f3 1f       	adc	r31, r19
    37c6:	ce 17       	cp	r28, r30
    37c8:	df 07       	cpc	r29, r31
    37ca:	69 f4       	brne	.+26     	; 0x37e6 <free+0xaa>
    37cc:	88 81       	ld	r24, Y
    37ce:	99 81       	ldd	r25, Y+1	; 0x01
    37d0:	28 0f       	add	r18, r24
    37d2:	39 1f       	adc	r19, r25
    37d4:	2e 5f       	subi	r18, 0xFE	; 254
    37d6:	3f 4f       	sbci	r19, 0xFF	; 255
    37d8:	fa 01       	movw	r30, r20
    37da:	31 83       	std	Z+1, r19	; 0x01
    37dc:	20 83       	st	Z, r18
    37de:	8a 81       	ldd	r24, Y+2	; 0x02
    37e0:	9b 81       	ldd	r25, Y+3	; 0x03
    37e2:	93 83       	std	Z+3, r25	; 0x03
    37e4:	82 83       	std	Z+2, r24	; 0x02
    37e6:	df 91       	pop	r29
    37e8:	cf 91       	pop	r28
    37ea:	08 95       	ret

000037ec <fdevopen>:
    37ec:	0f 93       	push	r16
    37ee:	1f 93       	push	r17
    37f0:	cf 93       	push	r28
    37f2:	df 93       	push	r29
    37f4:	8c 01       	movw	r16, r24
    37f6:	eb 01       	movw	r28, r22
    37f8:	00 97       	sbiw	r24, 0x00	; 0
    37fa:	31 f4       	brne	.+12     	; 0x3808 <fdevopen+0x1c>
    37fc:	61 15       	cp	r22, r1
    37fe:	71 05       	cpc	r23, r1
    3800:	19 f4       	brne	.+6      	; 0x3808 <fdevopen+0x1c>
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	38 c0       	rjmp	.+112    	; 0x3878 <fdevopen+0x8c>
    3808:	81 e0       	ldi	r24, 0x01	; 1
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	6e e0       	ldi	r22, 0x0E	; 14
    380e:	70 e0       	ldi	r23, 0x00	; 0
    3810:	0e 94 42 1c 	call	0x3884	; 0x3884 <calloc>
    3814:	fc 01       	movw	r30, r24
    3816:	9c 01       	movw	r18, r24
    3818:	00 97       	sbiw	r24, 0x00	; 0
    381a:	71 f1       	breq	.+92     	; 0x3878 <fdevopen+0x8c>
    381c:	80 e8       	ldi	r24, 0x80	; 128
    381e:	83 83       	std	Z+3, r24	; 0x03
    3820:	20 97       	sbiw	r28, 0x00	; 0
    3822:	71 f0       	breq	.+28     	; 0x3840 <fdevopen+0x54>
    3824:	d3 87       	std	Z+11, r29	; 0x0b
    3826:	c2 87       	std	Z+10, r28	; 0x0a
    3828:	81 e8       	ldi	r24, 0x81	; 129
    382a:	83 83       	std	Z+3, r24	; 0x03
    382c:	80 91 f0 03 	lds	r24, 0x03F0
    3830:	90 91 f1 03 	lds	r25, 0x03F1
    3834:	89 2b       	or	r24, r25
    3836:	21 f4       	brne	.+8      	; 0x3840 <fdevopen+0x54>
    3838:	f0 93 f1 03 	sts	0x03F1, r31
    383c:	e0 93 f0 03 	sts	0x03F0, r30
    3840:	01 15       	cp	r16, r1
    3842:	11 05       	cpc	r17, r1
    3844:	c9 f0       	breq	.+50     	; 0x3878 <fdevopen+0x8c>
    3846:	11 87       	std	Z+9, r17	; 0x09
    3848:	00 87       	std	Z+8, r16	; 0x08
    384a:	83 81       	ldd	r24, Z+3	; 0x03
    384c:	82 60       	ori	r24, 0x02	; 2
    384e:	83 83       	std	Z+3, r24	; 0x03
    3850:	80 91 f2 03 	lds	r24, 0x03F2
    3854:	90 91 f3 03 	lds	r25, 0x03F3
    3858:	89 2b       	or	r24, r25
    385a:	71 f4       	brne	.+28     	; 0x3878 <fdevopen+0x8c>
    385c:	f0 93 f3 03 	sts	0x03F3, r31
    3860:	e0 93 f2 03 	sts	0x03F2, r30
    3864:	80 91 f4 03 	lds	r24, 0x03F4
    3868:	90 91 f5 03 	lds	r25, 0x03F5
    386c:	89 2b       	or	r24, r25
    386e:	21 f4       	brne	.+8      	; 0x3878 <fdevopen+0x8c>
    3870:	f0 93 f5 03 	sts	0x03F5, r31
    3874:	e0 93 f4 03 	sts	0x03F4, r30
    3878:	c9 01       	movw	r24, r18
    387a:	df 91       	pop	r29
    387c:	cf 91       	pop	r28
    387e:	1f 91       	pop	r17
    3880:	0f 91       	pop	r16
    3882:	08 95       	ret

00003884 <calloc>:
    3884:	0f 93       	push	r16
    3886:	1f 93       	push	r17
    3888:	cf 93       	push	r28
    388a:	df 93       	push	r29
    388c:	68 9f       	mul	r22, r24
    388e:	80 01       	movw	r16, r0
    3890:	69 9f       	mul	r22, r25
    3892:	10 0d       	add	r17, r0
    3894:	78 9f       	mul	r23, r24
    3896:	10 0d       	add	r17, r0
    3898:	11 24       	eor	r1, r1
    389a:	c8 01       	movw	r24, r16
    389c:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <malloc>
    38a0:	ec 01       	movw	r28, r24
    38a2:	00 97       	sbiw	r24, 0x00	; 0
    38a4:	29 f0       	breq	.+10     	; 0x38b0 <calloc+0x2c>
    38a6:	60 e0       	ldi	r22, 0x00	; 0
    38a8:	70 e0       	ldi	r23, 0x00	; 0
    38aa:	a8 01       	movw	r20, r16
    38ac:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <memset>
    38b0:	ce 01       	movw	r24, r28
    38b2:	df 91       	pop	r29
    38b4:	cf 91       	pop	r28
    38b6:	1f 91       	pop	r17
    38b8:	0f 91       	pop	r16
    38ba:	08 95       	ret

000038bc <memset>:
    38bc:	dc 01       	movw	r26, r24
    38be:	01 c0       	rjmp	.+2      	; 0x38c2 <memset+0x6>
    38c0:	6d 93       	st	X+, r22
    38c2:	41 50       	subi	r20, 0x01	; 1
    38c4:	50 40       	sbci	r21, 0x00	; 0
    38c6:	e0 f7       	brcc	.-8      	; 0x38c0 <memset+0x4>
    38c8:	08 95       	ret

000038ca <_exit>:
    38ca:	f8 94       	cli

000038cc <__stop_program>:
    38cc:	ff cf       	rjmp	.-2      	; 0x38cc <__stop_program>
