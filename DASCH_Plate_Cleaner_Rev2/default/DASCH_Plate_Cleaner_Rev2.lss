
DASCH_Plate_Cleaner_Rev2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002cc  00800100  0000425a  000042ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000425a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  008003cc  008003cc  000045ba  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  000045bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002591  00000000  00000000  00006d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000930d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003db  00000000  00000000  0000934d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000014f4  00000000  00000000  00009728  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003ec  00000000  00000000  0000ac1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000020dc  00000000  00000000  0000b008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  0000d0e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d45  00000000  00000000  0000d224  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000010e1  00000000  00000000  0000df69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  0000f04a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 01 	jmp	0x208	; 0x208 <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 12 1e 	jmp	0x3c24	; 0x3c24 <__vector_11>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      48:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      6c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	68 05       	cpc	r22, r8
      8e:	79 05       	cpc	r23, r9
      90:	91 05       	cpc	r25, r1
      92:	a4 05       	cpc	r26, r4
      94:	b8 05       	cpc	r27, r8
      96:	cb 05       	cpc	r28, r11
      98:	df 05       	cpc	r29, r15
      9a:	f4 05       	cpc	r31, r4
      9c:	08 06       	cpc	r0, r24
      9e:	16 06       	cpc	r1, r22
      a0:	1c 06       	cpc	r1, r28
      a2:	2a 06       	cpc	r2, r26
      a4:	2e 06       	cpc	r2, r30
      a6:	3c 06       	cpc	r3, r28
      a8:	40 06       	cpc	r4, r16
      aa:	4e 06       	cpc	r4, r30
      ac:	52 06       	cpc	r5, r18
      ae:	61 06       	cpc	r6, r17
      b0:	65 06       	cpc	r6, r21
      b2:	73 06       	cpc	r7, r19
      b4:	76 06       	cpc	r7, r22
      b6:	85 06       	cpc	r8, r21
      b8:	89 06       	cpc	r8, r25
      ba:	a8 06       	cpc	r10, r24
      bc:	99 06       	cpc	r9, r25
      be:	ac 06       	cpc	r10, r28
      c0:	b0 06       	cpc	r11, r16
      c2:	be 06       	cpc	r11, r30
      c4:	c1 06       	cpc	r12, r17
      c6:	d0 06       	cpc	r13, r16
      c8:	d4 06       	cpc	r13, r20
      ca:	e2 06       	cpc	r14, r18
      cc:	e8 06       	cpc	r14, r24
      ce:	fe 06       	cpc	r15, r30
      d0:	0a 07       	cpc	r16, r26
      d2:	27 07       	cpc	r18, r23
      d4:	33 07       	cpc	r19, r19
      d6:	50 07       	cpc	r21, r16
      d8:	5c 07       	cpc	r21, r28
      da:	79 07       	cpc	r23, r25
      dc:	85 07       	cpc	r24, r21
      de:	a2 07       	cpc	r26, r18
      e0:	ae 07       	cpc	r26, r30
      e2:	ce 07       	cpc	r28, r30
      e4:	92 0a       	sbc	r9, r18
      e6:	bd 0a       	sbc	r11, r29
      e8:	e0 0a       	sbc	r14, r16
      ea:	2c 0b       	sbc	r18, r28
      ec:	ed 0a       	sbc	r14, r29
      ee:	fa 0a       	sbc	r15, r26
      f0:	05 0b       	sbc	r16, r21
      f2:	0f 0b       	sbc	r16, r31
      f4:	1a 0b       	sbc	r17, r26
      f6:	25 0b       	sbc	r18, r21
      f8:	40 0b       	sbc	r20, r16
      fa:	2c 0b       	sbc	r18, r28
      fc:	30 0b       	sbc	r19, r16
      fe:	7e 0b       	sbc	r23, r30
     100:	40 0b       	sbc	r20, r16
     102:	e8 0b       	sbc	r30, r24
     104:	e8 0b       	sbc	r30, r24
     106:	e8 0b       	sbc	r30, r24
     108:	e8 0b       	sbc	r30, r24
     10a:	e8 0b       	sbc	r30, r24
     10c:	e8 0b       	sbc	r30, r24
     10e:	e8 0b       	sbc	r30, r24
     110:	e8 0b       	sbc	r30, r24
     112:	49 0b       	sbc	r20, r25
     114:	58 0b       	sbc	r21, r24
     116:	5e 0b       	sbc	r21, r30
     118:	69 0b       	sbc	r22, r25
     11a:	6d 0b       	sbc	r22, r29
     11c:	78 0b       	sbc	r23, r24
     11e:	7e 0b       	sbc	r23, r30
     120:	88 0b       	sbc	r24, r24
     122:	96 0b       	sbc	r25, r22
     124:	a2 0b       	sbc	r26, r18
     126:	b0 0b       	sbc	r27, r16
     128:	c5 0b       	sbc	r28, r21
     12a:	d2 0b       	sbc	r29, r18
     12c:	39 0e       	add	r3, r25
     12e:	61 0e       	add	r6, r17
     130:	84 0e       	add	r8, r20
     132:	91 0e       	add	r9, r17
     134:	95 0e       	add	r9, r21
     136:	a2 0e       	add	r10, r18
     138:	ad 0e       	add	r10, r29
     13a:	99 0f       	add	r25, r25
     13c:	99 0f       	add	r25, r25
     13e:	99 0f       	add	r25, r25
     140:	99 0f       	add	r25, r25
     142:	99 0f       	add	r25, r25
     144:	99 0f       	add	r25, r25
     146:	99 0f       	add	r25, r25
     148:	99 0f       	add	r25, r25
     14a:	b7 0e       	add	r11, r23
     14c:	be 0e       	add	r11, r30
     14e:	09 0f       	add	r16, r25
     150:	cd 0e       	add	r12, r29
     152:	d8 0e       	add	r13, r24
     154:	e3 0e       	add	r14, r19
     156:	2e 0f       	add	r18, r30
     158:	f7 0e       	add	r15, r23
     15a:	09 0f       	add	r16, r25
     15c:	13 0f       	add	r17, r19
     15e:	d8 0e       	add	r13, r24
     160:	19 0f       	add	r17, r25
     162:	1d 0f       	add	r17, r29
     164:	28 0f       	add	r18, r24
     166:	2e 0f       	add	r18, r30
     168:	38 0f       	add	r19, r24
     16a:	46 0f       	add	r20, r22
     16c:	52 0f       	add	r21, r18
     16e:	60 0f       	add	r22, r16
     170:	75 0f       	add	r23, r21
     172:	82 0f       	add	r24, r18
     174:	72 12       	cpse	r7, r18
     176:	9a 12       	cpse	r9, r26
     178:	bd 12       	cpse	r11, r29
     17a:	0d 13       	cpse	r16, r29
     17c:	ca 12       	cpse	r12, r26
     17e:	d7 12       	cpse	r13, r23
     180:	e2 12       	cpse	r14, r18
     182:	e6 12       	cpse	r14, r22
     184:	f1 12       	cpse	r15, r17
     186:	fc 12       	cpse	r15, r28
     188:	2b 13       	cpse	r18, r27
     18a:	0d 13       	cpse	r16, r29
     18c:	11 13       	cpse	r17, r17
     18e:	21 13       	cpse	r18, r17
     190:	2b 13       	cpse	r18, r27
     192:	34 13       	cpse	r19, r20
     194:	3b 13       	cpse	r19, r27
     196:	4a 13       	cpse	r20, r26
     198:	54 13       	cpse	r21, r20
     19a:	5f 13       	cpse	r21, r31
     19c:	6a 13       	cpse	r22, r26
     19e:	7e 13       	cpse	r23, r30
     1a0:	88 13       	cpse	r24, r24
     1a2:	4a 13       	cpse	r20, r26
     1a4:	9a 13       	cpse	r25, r26
     1a6:	5f 13       	cpse	r21, r31
     1a8:	a0 13       	cpse	r26, r16
     1aa:	a4 13       	cpse	r26, r20
     1ac:	af 13       	cpse	r26, r31
     1ae:	7e 13       	cpse	r23, r30
     1b0:	b5 13       	cpse	r27, r21
     1b2:	c3 13       	cpse	r28, r19
     1b4:	cf 13       	cpse	r28, r31
     1b6:	dd 13       	cpse	r29, r29
     1b8:	f2 13       	cpse	r31, r18
     1ba:	ff 13       	cpse	r31, r31
     1bc:	ec 16       	cp	r14, r28
     1be:	12 17       	cp	r17, r18
     1c0:	35 17       	cp	r19, r21
     1c2:	7f 17       	cp	r23, r31
     1c4:	42 17       	cp	r20, r18
     1c6:	4f 17       	cp	r20, r31
     1c8:	5a 17       	cp	r21, r26
     1ca:	5e 17       	cp	r21, r30
     1cc:	69 17       	cp	r22, r25
     1ce:	74 17       	cp	r23, r20
     1d0:	9d 17       	cp	r25, r29
     1d2:	7f 17       	cp	r23, r31
     1d4:	83 17       	cp	r24, r19
     1d6:	93 17       	cp	r25, r19
     1d8:	9d 17       	cp	r25, r29
     1da:	a6 17       	cp	r26, r22
     1dc:	ad 17       	cp	r26, r29
     1de:	bc 17       	cp	r27, r28
     1e0:	c6 17       	cp	r28, r22
     1e2:	d1 17       	cp	r29, r17
     1e4:	dc 17       	cp	r29, r28
     1e6:	f0 17       	cp	r31, r16
     1e8:	fa 17       	cp	r31, r26
     1ea:	0c 18       	sub	r0, r12
     1ec:	16 18       	sub	r1, r6
     1ee:	d1 17       	cp	r29, r17
     1f0:	1c 18       	sub	r1, r12
     1f2:	27 18       	sub	r2, r7
     1f4:	32 18       	sub	r3, r2
     1f6:	3c 18       	sub	r3, r12
     1f8:	46 18       	sub	r4, r6
     1fa:	5d 18       	sub	r5, r13
     1fc:	62 18       	sub	r6, r2
     1fe:	6d 18       	sub	r6, r13
     200:	78 18       	sub	r7, r8
     202:	82 18       	sub	r8, r2
     204:	99 18       	sub	r9, r9
     206:	e5 16       	cp	r14, r21

00000208 <__ctors_end>:
     208:	11 24       	eor	r1, r1
     20a:	1f be       	out	0x3f, r1	; 63
     20c:	cf ef       	ldi	r28, 0xFF	; 255
     20e:	d0 e4       	ldi	r29, 0x40	; 64
     210:	de bf       	out	0x3e, r29	; 62
     212:	cd bf       	out	0x3d, r28	; 61

00000214 <__do_copy_data>:
     214:	13 e0       	ldi	r17, 0x03	; 3
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	ea e5       	ldi	r30, 0x5A	; 90
     21c:	f2 e4       	ldi	r31, 0x42	; 66
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ac 3c       	cpi	r26, 0xCC	; 204
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>

0000022e <__do_clear_bss>:
     22e:	13 e0       	ldi	r17, 0x03	; 3
     230:	ac ec       	ldi	r26, 0xCC	; 204
     232:	b3 e0       	ldi	r27, 0x03	; 3
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	a4 3f       	cpi	r26, 0xF4	; 244
     23a:	b1 07       	cpc	r27, r17
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 92 02 	call	0x524	; 0x524 <main>
     242:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <_ZN16OrangutanDigital11isInputHighEh>:


	// high-level method for reading the input value of the specified pin.  If the voltage on the pin is low,
	// this method will return 0.  Otherwise, it will return a non-zero result that depends on the value of
	// the pin.
	inline static unsigned char isInputHigh(unsigned char pin)
     24a:	48 2f       	mov	r20, r24
		io->pinRegister = 0;
		io->portRegister = 0;
		io->ddrRegister = 0;
		io->bitmask = 0;

		if (pin < 8)			// pin 0 = PD0, ..., 7 = PD7
     24c:	88 30       	cpi	r24, 0x08	; 8
     24e:	58 f4       	brcc	.+22     	; 0x266 <_ZN16OrangutanDigital11isInputHighEh+0x1c>
		{
			io->pinRegister = (unsigned char*)&PIND;
			io->portRegister = (unsigned char*)&PORTD;
			io->ddrRegister = (unsigned char*)&DDRD;
			io->bitmask = 1 << pin;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	02 c0       	rjmp	.+4      	; 0x25a <_ZN16OrangutanDigital11isInputHighEh+0x10>
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	4a 95       	dec	r20
     25c:	e2 f7       	brpl	.-8      	; 0x256 <_ZN16OrangutanDigital11isInputHighEh+0xc>
     25e:	98 2f       	mov	r25, r24
     260:	e9 e2       	ldi	r30, 0x29	; 41
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	36 c0       	rjmp	.+108    	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}

#if defined(_ORANGUTAN_SVP) || defined(_ORANGUTAN_X2)

		else if (pin < 16)		// pin 8 = PB0, ..., 15 = PB7
     266:	80 31       	cpi	r24, 0x10	; 16
     268:	78 f4       	brcc	.+30     	; 0x288 <_ZN16OrangutanDigital11isInputHighEh+0x3e>
		{
			io->pinRegister = (unsigned char*)&PINB;
			io->portRegister = (unsigned char*)&PORTB;
			io->ddrRegister = (unsigned char*)&DDRB;
			io->bitmask = 1 << (pin - 8);
     26a:	28 2f       	mov	r18, r24
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	28 50       	subi	r18, 0x08	; 8
     270:	30 40       	sbci	r19, 0x00	; 0
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	02 c0       	rjmp	.+4      	; 0x27c <_ZN16OrangutanDigital11isInputHighEh+0x32>
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	2a 95       	dec	r18
     27e:	e2 f7       	brpl	.-8      	; 0x278 <_ZN16OrangutanDigital11isInputHighEh+0x2e>
     280:	98 2f       	mov	r25, r24
     282:	e3 e2       	ldi	r30, 0x23	; 35
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	25 c0       	rjmp	.+74     	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 24)		// pin 16 = PC0, ..., 23 = PC7
     288:	88 31       	cpi	r24, 0x18	; 24
     28a:	78 f4       	brcc	.+30     	; 0x2aa <_ZN16OrangutanDigital11isInputHighEh+0x60>
		{
			io->pinRegister = (unsigned char*)&PINC;
			io->portRegister = (unsigned char*)&PORTC;
			io->ddrRegister = (unsigned char*)&DDRC;
			io->bitmask = 1 << (pin - 16);
     28c:	28 2f       	mov	r18, r24
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	20 51       	subi	r18, 0x10	; 16
     292:	30 40       	sbci	r19, 0x00	; 0
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	02 c0       	rjmp	.+4      	; 0x29e <_ZN16OrangutanDigital11isInputHighEh+0x54>
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	2a 95       	dec	r18
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <_ZN16OrangutanDigital11isInputHighEh+0x50>
     2a2:	98 2f       	mov	r25, r24
     2a4:	e6 e2       	ldi	r30, 0x26	; 38
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	14 c0       	rjmp	.+40     	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		}
		else if (pin < 32)		// pin 24 = PA7, ..., 31 = PA0
     2aa:	80 32       	cpi	r24, 0x20	; 32
     2ac:	20 f0       	brcs	.+8      	; 0x2b6 <_ZN16OrangutanDigital11isInputHighEh+0x6c>
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	e0 e0       	ldi	r30, 0x00	; 0
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	0e c0       	rjmp	.+28     	; 0x2d2 <_ZN16OrangutanDigital11isInputHighEh+0x88>
		{
			io->pinRegister = (unsigned char*)&PINA;
			io->portRegister = (unsigned char*)&PORTA;
			io->ddrRegister = (unsigned char*)&DDRA;
			io->bitmask = 1 << (31 - pin);
     2b6:	2f e1       	ldi	r18, 0x1F	; 31
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	28 1b       	sub	r18, r24
     2bc:	31 09       	sbc	r19, r1
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <_ZN16OrangutanDigital11isInputHighEh+0x7e>
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	2a 95       	dec	r18
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <_ZN16OrangutanDigital11isInputHighEh+0x7a>
     2cc:	98 2f       	mov	r25, r24
     2ce:	e0 e2       	ldi	r30, 0x20	; 32
     2d0:	f0 e0       	ldi	r31, 0x00	; 0

	// low-level method for reading the value of the PIN register for an pin or set of pins
	// described by an IOStruct pointer.
	inline static unsigned char getInputValue(struct IOStruct* ioPin)
	{
		return *(ioPin->pinRegister) & ioPin->bitmask;
     2d2:	80 81       	ld	r24, Z
	inline static unsigned char isInputHigh(unsigned char pin)
	{
		struct IOStruct registers;
		getIORegisters(&registers, pin);
		return getInputValue(&registers);
	}
     2d4:	89 23       	and	r24, r25
     2d6:	08 95       	ret

000002d8 <__cxa_guard_acquire>:

extern "C" int __cxa_guard_acquire(__guard *); 
extern "C" void __cxa_guard_release (__guard *); 
extern "C" void __cxa_guard_abort (__guard *); 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);}; 
     2d8:	fc 01       	movw	r30, r24
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	88 23       	and	r24, r24
     2e2:	11 f4       	brne	.+4      	; 0x2e8 <__cxa_guard_acquire+0x10>
     2e4:	21 e0       	ldi	r18, 0x01	; 1
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	c9 01       	movw	r24, r18
     2ea:	08 95       	ret

000002ec <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;}; 
     2ec:	fc 01       	movw	r30, r24
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	80 83       	st	Z, r24
     2f2:	08 95       	ret

000002f4 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
     2f4:	08 95       	ret

000002f6 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void); 
void __cxa_pure_virtual(void) {}; 
     2f6:	08 95       	ret

000002f8 <_Z15button_debounceiPi>:
	i2c_write(u_outputByte0.outputByte0);
	i2c_write(u_outputByte1.outputByte1);
	i2c_stop();
}

bool button_debounce(int counter, int *pstateButton)
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	8c 01       	movw	r16, r24
     302:	eb 01       	movw	r28, r22
{
	static int counterRefPush;
	static int counterRefRel;
	
	if(*pstateButton == NONE && OrangutanDigital::isInputHigh(IO_D0)){
     304:	88 81       	ld	r24, Y
     306:	99 81       	ldd	r25, Y+1	; 0x01
     308:	89 2b       	or	r24, r25
     30a:	69 f4       	brne	.+26     	; 0x326 <_Z15button_debounceiPi+0x2e>
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     312:	88 23       	and	r24, r24
     314:	41 f0       	breq	.+16     	; 0x326 <_Z15button_debounceiPi+0x2e>
		counterRefPush = counter;
     316:	10 93 d5 03 	sts	0x03D5, r17
     31a:	00 93 d4 03 	sts	0x03D4, r16
		*pstateButton = PRESSED;
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	99 83       	std	Y+1, r25	; 0x01
     324:	88 83       	st	Y, r24
	}
	if(*pstateButton == PRESSED){
     326:	88 81       	ld	r24, Y
     328:	99 81       	ldd	r25, Y+1	; 0x01
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f9 f4       	brne	.+62     	; 0x36c <_Z15button_debounceiPi+0x74>
		if(counter - counterRefPush > 15){
     32e:	80 91 d4 03 	lds	r24, 0x03D4
     332:	90 91 d5 03 	lds	r25, 0x03D5
     336:	98 01       	movw	r18, r16
     338:	28 1b       	sub	r18, r24
     33a:	39 0b       	sbc	r19, r25
     33c:	20 31       	cpi	r18, 0x10	; 16
     33e:	31 05       	cpc	r19, r1
     340:	74 f0       	brlt	.+28     	; 0x35e <_Z15button_debounceiPi+0x66>
			if(!OrangutanDigital::isInputHigh(IO_D0)){
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     348:	88 23       	and	r24, r24
     34a:	81 f4       	brne	.+32     	; 0x36c <_Z15button_debounceiPi+0x74>
				counterRefRel = counter;
     34c:	10 93 d3 03 	sts	0x03D3, r17
     350:	00 93 d2 03 	sts	0x03D2, r16
				*pstateButton = RELEASED;
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	99 83       	std	Y+1, r25	; 0x01
     35a:	88 83       	st	Y, r24
     35c:	07 c0       	rjmp	.+14     	; 0x36c <_Z15button_debounceiPi+0x74>
			}
		}
		else if(!OrangutanDigital::isInputHigh(IO_D0)){
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     364:	88 23       	and	r24, r24
     366:	11 f4       	brne	.+4      	; 0x36c <_Z15button_debounceiPi+0x74>
			*pstateButton = NONE;
     368:	19 82       	std	Y+1, r1	; 0x01
     36a:	18 82       	st	Y, r1
		}
	}
	if(*pstateButton == RELEASED){
     36c:	88 81       	ld	r24, Y
     36e:	99 81       	ldd	r25, Y+1	; 0x01
     370:	02 97       	sbiw	r24, 0x02	; 2
     372:	d9 f4       	brne	.+54     	; 0x3aa <_Z15button_debounceiPi+0xb2>
		if(OrangutanDigital::isInputHigh(IO_D0)){
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     37a:	88 23       	and	r24, r24
     37c:	49 f0       	breq	.+18     	; 0x390 <_Z15button_debounceiPi+0x98>
			*pstateButton = PRESSED;
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	99 83       	std	Y+1, r25	; 0x01
     384:	88 83       	st	Y, r24
			counterRefPush = counter;
     386:	10 93 d5 03 	sts	0x03D5, r17
     38a:	00 93 d4 03 	sts	0x03D4, r16
     38e:	0d c0       	rjmp	.+26     	; 0x3aa <_Z15button_debounceiPi+0xb2>
		}
		else if(counter - counterRefRel > 15){
     390:	80 91 d2 03 	lds	r24, 0x03D2
     394:	90 91 d3 03 	lds	r25, 0x03D3
     398:	08 1b       	sub	r16, r24
     39a:	19 0b       	sbc	r17, r25
     39c:	00 31       	cpi	r16, 0x10	; 16
     39e:	11 05       	cpc	r17, r1
     3a0:	24 f0       	brlt	.+8      	; 0x3aa <_Z15button_debounceiPi+0xb2>
			*pstateButton = NONE;
     3a2:	19 82       	std	Y+1, r1	; 0x01
     3a4:	18 82       	st	Y, r1
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <_Z15button_debounceiPi+0xb4>
			return true;
     3aa:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return false;
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	08 95       	ret

000003b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>:
	OrangutanLCD::print("END");
	}
}


void motor_and_write(int counter, int counterRef, int counterRefFive, int plateLoadMotor, int fixtureMotor, int brush1Motor, int brush2Motor, int paperTowelMotor, int totalStepLength1, int totalStepLength2, int totalStepLength3, int totalStepLength4, int totalStepLength5, int highLength1, int highLength2, int highLength3, int highLength4, int highLength5)
     3b6:	2f 92       	push	r2
     3b8:	3f 92       	push	r3
     3ba:	4f 92       	push	r4
     3bc:	5f 92       	push	r5
     3be:	6f 92       	push	r6
     3c0:	7f 92       	push	r7
     3c2:	8f 92       	push	r8
     3c4:	9f 92       	push	r9
     3c6:	af 92       	push	r10
     3c8:	bf 92       	push	r11
     3ca:	cf 92       	push	r12
     3cc:	df 92       	push	r13
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	df 93       	push	r29
     3d8:	cf 93       	push	r28
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	2c 01       	movw	r4, r24
     3e0:	1a 01       	movw	r2, r20
     3e2:	39 01       	movw	r6, r18
{
//motor and write
	if( ((counter - counterRef) % (totalStepLength1) ) < (highLength1) && plateLoadMotor)  //check if it is in the right period of the loop to send high
     3e4:	fc 01       	movw	r30, r24
     3e6:	e6 1b       	sub	r30, r22
     3e8:	f7 0b       	sbc	r31, r23
     3ea:	cf 01       	movw	r24, r30
     3ec:	b4 01       	movw	r22, r8
     3ee:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <__divmodhi4>
     3f2:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3f4:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3f6:	82 17       	cp	r24, r18
     3f8:	93 07       	cpc	r25, r19
     3fa:	34 f4       	brge	.+12     	; 0x408 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
     3fc:	67 28       	or	r6, r7
     3fe:	21 f0       	breq	.+8      	; 0x408 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x52>
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 1; // set bit 0
     400:	80 91 cc 03 	lds	r24, 0x03CC
     404:	81 60       	ori	r24, 0x01	; 1
     406:	03 c0       	rjmp	.+6      	; 0x40e <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x58>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.plateLoadMotorStep = 0; // set bit 0
     408:	80 91 cc 03 	lds	r24, 0x03CC
     40c:	8e 7f       	andi	r24, 0xFE	; 254
     40e:	80 93 cc 03 	sts	0x03CC, r24
	}
		if( ((counter - counterRef) % (totalStepLength2) ) < (highLength2) && fixtureMotor)
     412:	cf 01       	movw	r24, r30
     414:	6d 89       	ldd	r22, Y+21	; 0x15
     416:	7e 89       	ldd	r23, Y+22	; 0x16
     418:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <__divmodhi4>
     41c:	2f 8d       	ldd	r18, Y+31	; 0x1f
     41e:	38 a1       	ldd	r19, Y+32	; 0x20
     420:	82 17       	cp	r24, r18
     422:	93 07       	cpc	r25, r19
     424:	34 f4       	brge	.+12     	; 0x432 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
     426:	01 2b       	or	r16, r17
     428:	21 f0       	breq	.+8      	; 0x432 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x7c>
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 1; // set bit 1
     42a:	80 91 cc 03 	lds	r24, 0x03CC
     42e:	88 60       	ori	r24, 0x08	; 8
     430:	03 c0       	rjmp	.+6      	; 0x438 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x82>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.fixtureMotorStep = 0; // set bit 1
     432:	80 91 cc 03 	lds	r24, 0x03CC
     436:	87 7f       	andi	r24, 0xF7	; 247
     438:	80 93 cc 03 	sts	0x03CC, r24
	}
	if( ((counter - counterRef) % (totalStepLength3) ) < (highLength3) && brush1Motor)
     43c:	cf 01       	movw	r24, r30
     43e:	6f 89       	ldd	r22, Y+23	; 0x17
     440:	78 8d       	ldd	r23, Y+24	; 0x18
     442:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <__divmodhi4>
     446:	29 a1       	ldd	r18, Y+33	; 0x21
     448:	3a a1       	ldd	r19, Y+34	; 0x22
     44a:	82 17       	cp	r24, r18
     44c:	93 07       	cpc	r25, r19
     44e:	34 f4       	brge	.+12     	; 0x45c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
     450:	ef 28       	or	r14, r15
     452:	21 f0       	breq	.+8      	; 0x45c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xa6>
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 1; // set bit 1
     454:	80 91 cc 03 	lds	r24, 0x03CC
     458:	80 64       	ori	r24, 0x40	; 64
     45a:	03 c0       	rjmp	.+6      	; 0x462 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xac>
	}
	else
	{
		u_motorByte0.bits_in_motorByte0.brush1MotorStep = 0; // set bit 1
     45c:	80 91 cc 03 	lds	r24, 0x03CC
     460:	8f 7b       	andi	r24, 0xBF	; 191
     462:	80 93 cc 03 	sts	0x03CC, r24
	}

	if( ((counter - counterRef) % (totalStepLength4) ) < (highLength4) && brush2Motor)
     466:	cf 01       	movw	r24, r30
     468:	69 8d       	ldd	r22, Y+25	; 0x19
     46a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     46c:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <__divmodhi4>
     470:	2b a1       	ldd	r18, Y+35	; 0x23
     472:	3c a1       	ldd	r19, Y+36	; 0x24
     474:	82 17       	cp	r24, r18
     476:	93 07       	cpc	r25, r19
     478:	34 f4       	brge	.+12     	; 0x486 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
     47a:	cd 28       	or	r12, r13
     47c:	21 f0       	breq	.+8      	; 0x486 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd0>
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 1; // set bit 1
     47e:	80 91 cd 03 	lds	r24, 0x03CD
     482:	82 60       	ori	r24, 0x02	; 2
     484:	03 c0       	rjmp	.+6      	; 0x48c <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xd6>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.brush2MotorStep = 0; // set bit 1
     486:	80 91 cd 03 	lds	r24, 0x03CD
     48a:	8d 7f       	andi	r24, 0xFD	; 253
     48c:	80 93 cd 03 	sts	0x03CD, r24
	}

	if( ((counter - counterRefFive) % (totalStepLength5) ) < (highLength5) && paperTowelMotor)
     490:	c2 01       	movw	r24, r4
     492:	82 19       	sub	r24, r2
     494:	93 09       	sbc	r25, r3
     496:	6b 8d       	ldd	r22, Y+27	; 0x1b
     498:	7c 8d       	ldd	r23, Y+28	; 0x1c
     49a:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <__divmodhi4>
     49e:	2d a1       	ldd	r18, Y+37	; 0x25
     4a0:	3e a1       	ldd	r19, Y+38	; 0x26
     4a2:	82 17       	cp	r24, r18
     4a4:	93 07       	cpc	r25, r19
     4a6:	34 f4       	brge	.+12     	; 0x4b4 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
     4a8:	ab 28       	or	r10, r11
     4aa:	21 f0       	breq	.+8      	; 0x4b4 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0xfe>
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 1; // set bit 1
     4ac:	80 91 cd 03 	lds	r24, 0x03CD
     4b0:	80 61       	ori	r24, 0x10	; 16
     4b2:	03 c0       	rjmp	.+6      	; 0x4ba <_Z15motor_and_writeiiiiiiiiiiiiiiiiii+0x104>
	}
	else
	{
		u_motorByte1.bits_in_motorByte1.paperTowelMotorStep = 0; // set bit 1
     4b4:	80 91 cd 03 	lds	r24, 0x03CD
     4b8:	8f 7e       	andi	r24, 0xEF	; 239
     4ba:	80 93 cd 03 	sts	0x03CD, r24
	}

	i2c_start(I2C1+I2C_WRITE);
     4be:	80 e4       	ldi	r24, 0x40	; 64
     4c0:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
	i2c_write(0x2);									// write command byte
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
	i2c_write(u_motorByte0.motorByte0);                       // write first byte of output
     4ca:	80 91 cc 03 	lds	r24, 0x03CC
     4ce:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
	i2c_write(u_motorByte1.motorByte1);                       // write second byte of output
     4d2:	80 91 cd 03 	lds	r24, 0x03CD
     4d6:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
	i2c_stop();                            // set stop conditon = release bus
     4da:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>

	i2c_start(I2C2+I2C_WRITE);
     4de:	82 e4       	ldi	r24, 0x42	; 66
     4e0:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
	i2c_write(0x2);
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
	i2c_write(u_outputByte0.outputByte0);
     4ea:	80 91 ce 03 	lds	r24, 0x03CE
     4ee:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
	i2c_write(u_outputByte1.outputByte1);
     4f2:	80 91 cf 03 	lds	r24, 0x03CF
     4f6:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
	i2c_stop();
     4fa:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>
}
     4fe:	cf 91       	pop	r28
     500:	df 91       	pop	r29
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	df 90       	pop	r13
     50c:	cf 90       	pop	r12
     50e:	bf 90       	pop	r11
     510:	af 90       	pop	r10
     512:	9f 90       	pop	r9
     514:	8f 90       	pop	r8
     516:	7f 90       	pop	r7
     518:	6f 90       	pop	r6
     51a:	5f 90       	pop	r5
     51c:	4f 90       	pop	r4
     51e:	3f 90       	pop	r3
     520:	2f 90       	pop	r2
     522:	08 95       	ret

00000524 <main>:
//int button_debounce(int counter, int *pcounterRefPush, int *pcounterRefRel, int *pstateButton);

bool button_debounce(int counter, int *pstateButton);


int main()   
     524:	2f 92       	push	r2
     526:	3f 92       	push	r3
     528:	4f 92       	push	r4
     52a:	5f 92       	push	r5
     52c:	6f 92       	push	r6
     52e:	7f 92       	push	r7
     530:	8f 92       	push	r8
     532:	9f 92       	push	r9
     534:	af 92       	push	r10
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	df 93       	push	r29
     546:	cf 93       	push	r28
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	ce 54       	subi	r28, 0x4E	; 78
     54e:	d0 40       	sbci	r29, 0x00	; 0
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	print35 = 1;
	
	//initialize button variables
	button = 1;				//button = 0 means it has been debounced, button = 1 means it hasn't
	buttonTriggered = false;
	stateButton = NONE;		//holds the state in the button subroutine where the program is currently
     55a:	1a 82       	std	Y+2, r1	; 0x02
     55c:	19 82       	std	Y+1, r1	; 0x01
	u_motorByte0.motorByte0 = 0;  // initialize motorByte0
     55e:	10 92 cc 03 	sts	0x03CC, r1
	u_motorByte1.motorByte1 = 0;  // initialize motorByte1
     562:	10 92 cd 03 	sts	0x03CD, r1
	u_outputByte0.outputByte0 = 255;  // initialize outputByte0
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	80 93 ce 03 	sts	0x03CE, r24
	u_outputByte1.outputByte1 = 255;  // initialize outputByte1
     56c:	80 93 cf 03 	sts	0x03CF, r24
	u_inputByte0.inputByte0 = 0;  // initialize inputByte0
     570:	10 92 d0 03 	sts	0x03D0, r1
	u_inputByte1.inputByte1 = 0;  // initialize inputByte1
     574:	10 92 d1 03 	sts	0x03D1, r1
	
	OrangutanLCD::clear();
     578:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("DASCH CLEANER 2c");
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
	OrangutanLCD::gotoXY(0,1);
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	61 e0       	ldi	r22, 0x01	; 1
     588:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
	OrangutanLCD::print("REV: 29-1");
     58c:	81 e1       	ldi	r24, 0x11	; 17
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
// another C++ file.
inline unsigned long get_ms() { return OrangutanTime::ms(); }
inline unsigned long millis() { return OrangutanTime::ms(); }

inline void delay(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
inline void delay_ms(unsigned int milliseconds) { OrangutanTime::delayMilliseconds(milliseconds); }
     594:	80 ed       	ldi	r24, 0xD0	; 208
     596:	97 e0       	ldi	r25, 0x07	; 7
     598:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
	delay_ms(2000);
	
	OrangutanLCD::clear();
     59c:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("BEGIN ");
     5a0:	8b e1       	ldi	r24, 0x1B	; 27
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     5a8:	88 ee       	ldi	r24, 0xE8	; 232
     5aa:	93 e0       	ldi	r25, 0x03	; 3
     5ac:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
	
	delay_ms(1000);

    i2c_init();                                // init I2C interface
     5b0:	0e 94 37 19 	call	0x326e	; 0x326e <_Z8i2c_initv>
	
    OrangutanLCD::print("INIT ");
     5b4:	82 e2       	ldi	r24, 0x22	; 34
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
	
    ret1 = i2c_start(I2C1+I2C_WRITE);       // ret1 holds whether or not I2C1 started properly
     5bc:	80 e4       	ldi	r24, 0x40	; 64
     5be:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
     5c2:	c8 2e       	mov	r12, r24
	i2c_stop();
     5c4:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>
	ret2 = i2c_start(I2C2+I2C_WRITE);       // ret2 holds whether or not I2C2 started properly
     5c8:	82 e4       	ldi	r24, 0x42	; 66
     5ca:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
     5ce:	08 2f       	mov	r16, r24
	i2c_stop();
     5d0:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>
	ret3 = i2c_start(I2C3+I2C_WRITE);       // ret3 holds whether or not I2C3 started properly
     5d4:	84 e4       	ldi	r24, 0x44	; 68
     5d6:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
     5da:	e8 2e       	mov	r14, r24
	i2c_stop();
     5dc:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>
    
	OrangutanLCD::clear();
     5e0:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
	OrangutanLCD::print("START ");
     5e4:	88 e2       	ldi	r24, 0x28	; 40
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
	
	if ( ret1 | ret2 | ret3 ) {			// Check if all three I2C devices responded properly
     5ec:	10 e0       	ldi	r17, 0x00	; 0
     5ee:	dd 24       	eor	r13, r13
     5f0:	0c 29       	or	r16, r12
     5f2:	1d 29       	or	r17, r13
     5f4:	ff 24       	eor	r15, r15
     5f6:	0e 29       	or	r16, r14
     5f8:	1f 29       	or	r17, r15
     5fa:	01 2b       	or	r16, r17
     5fc:	61 f0       	breq	.+24     	; 0x616 <main+0xf2>
        /* failed to issue start condition(s), possibly no device found */
        
		OrangutanLCD::print("I2C BAD ");
     5fe:	8f e2       	ldi	r24, 0x2F	; 47
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
		i2c_stop();
     606:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>
		OrangutanLCD::print("STOP ");
     60a:	88 e3       	ldi	r24, 0x38	; 56
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     612:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <main+0x2cda>
    }
	else {
		OrangutanLCD::print("I2C OK ");
     616:	8e e3       	ldi	r24, 0x3E	; 62
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
        /* issuing start conditions ok, devices accessible */
		OrangutanLCD::print("BINIT ");
     61e:	86 e4       	ldi	r24, 0x46	; 70
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
		i2c_start(I2C1+I2C_WRITE);		//Configures I2C1 registers as outputs
     626:	80 e4       	ldi	r24, 0x40	; 64
     628:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
		i2c_write(0x6);
     62c:	86 e0       	ldi	r24, 0x06	; 6
     62e:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
		i2c_write(0x0);
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
		i2c_write(0x0);
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
		i2c_stop();
     63e:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>

		i2c_start(I2C1+I2C_WRITE);
     642:	80 e4       	ldi	r24, 0x40	; 64
     644:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
		i2c_write(0x2);
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
     64e:	80 91 cc 03 	lds	r24, 0x03CC
     652:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
     656:	80 91 cd 03 	lds	r24, 0x03CD
     65a:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
		i2c_stop();
     65e:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>

		i2c_start(I2C2+I2C_WRITE);		//Configures I2C2 registers as outputs
     662:	82 e4       	ldi	r24, 0x42	; 66
     664:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
		i2c_write(0x6);
     668:	86 e0       	ldi	r24, 0x06	; 6
     66a:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
		i2c_write(0x0);
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
		i2c_write(0x0);
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
		i2c_stop();
     67a:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>

		u_motorByte1.bits_in_motorByte1.enableAll = 0;	//Enables all motor drivers after startup
     67e:	80 91 cd 03 	lds	r24, 0x03CD
     682:	8f 77       	andi	r24, 0x7F	; 127
     684:	80 93 cd 03 	sts	0x03CD, r24
		i2c_start(I2C2+I2C_WRITE);
     688:	82 e4       	ldi	r24, 0x42	; 66
     68a:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
		i2c_write(0x2);
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
		i2c_write(u_outputByte0.outputByte0);
     694:	80 91 ce 03 	lds	r24, 0x03CE
     698:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
		i2c_write(u_outputByte1.outputByte1);
     69c:	80 91 cf 03 	lds	r24, 0x03CF
     6a0:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
		i2c_stop();
     6a4:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>
     6a8:	88 ee       	ldi	r24, 0xE8	; 232
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
		
		//Registers default to input, so I2C3 is fine already


		delay_ms(1000);
		OrangutanLCD::clear();
     6b0:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("INPUT RUN/DEBUG");
     6b4:	8d e4       	ldi	r24, 0x4D	; 77
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     6bc:	ee 24       	eor	r14, r14
     6be:	ff 24       	eor	r15, r15
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     6c0:	c7 01       	movw	r24, r14
     6c2:	be 01       	movw	r22, r28
     6c4:	6f 5f       	subi	r22, 0xFF	; 255
     6c6:	7f 4f       	sbci	r23, 0xFF	; 255
     6c8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>
     6cc:	18 2f       	mov	r17, r24
			counter++;
     6ce:	08 94       	sec
     6d0:	e1 1c       	adc	r14, r1
     6d2:	f1 1c       	adc	r15, r1
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		OrangutanLCD::clear();
		OrangutanLCD::print("INPUT RUN/DEBUG");
			
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
     6dc:	11 23       	and	r17, r17
     6de:	81 f3       	breq	.-32     	; 0x6c0 <main+0x19c>
			counter++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		OrangutanLCD::clear();
     6e0:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>


		if(OrangutanDigital::isInputHigh(IO_D3))							//Tests if the switch is set to Maintenance Mode
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     6ea:	88 23       	and	r24, r24
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <main+0x1cc>
     6ee:	db c4       	rjmp	.+2486   	; 0x10a6 <main+0xb82>
		{
			OrangutanLCD::print("DEBUG");
     6f0:	8d e5       	ldi	r24, 0x5D	; 93
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     6f8:	88 ee       	ldi	r24, 0xE8	; 232
     6fa:	93 e0       	ldi	r25, 0x03	; 3
     6fc:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
			
			//initialize
			int print = 0;
			int submode = -1;

			OrangutanLCD::clear();
     700:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
			OrangutanLCD::print("INPUT_MODE");
     704:	83 e6       	ldi	r24, 0x63	; 99
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     70c:	ee 24       	eor	r14, r14
     70e:	ff 24       	eor	r15, r15
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     710:	c7 01       	movw	r24, r14
     712:	be 01       	movw	r22, r28
     714:	6f 5f       	subi	r22, 0xFF	; 255
     716:	7f 4f       	sbci	r23, 0xFF	; 255
     718:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>
     71c:	18 2f       	mov	r17, r24
				counter++;
     71e:	08 94       	sec
     720:	e1 1c       	adc	r14, r1
     722:	f1 1c       	adc	r15, r1
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>

			OrangutanLCD::clear();
			OrangutanLCD::print("INPUT_MODE");
			
			//Repeats until user presses and releases button - waiting for user to select a mode
			while(!buttonTriggered){
     72c:	11 23       	and	r17, r17
     72e:	81 f3       	breq	.-32     	; 0x710 <main+0x1ec>
				counter++;
				delay_ms(1);
			}
			buttonTriggered = false;
			counter = 0;
			OrangutanLCD::clear();
     730:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
     734:	27 96       	adiw	r28, 0x07	; 7
     736:	1f ae       	std	Y+63, r1	; 0x3f
     738:	1e ae       	std	Y+62, r1	; 0x3e
     73a:	27 97       	sbiw	r28, 0x07	; 7
     73c:	44 24       	eor	r4, r4
     73e:	55 24       	eor	r5, r5
     740:	2f 96       	adiw	r28, 0x0f	; 15
     742:	1f ae       	std	Y+63, r1	; 0x3f
     744:	1e ae       	std	Y+62, r1	; 0x3e
     746:	2f 97       	sbiw	r28, 0x0f	; 15
     748:	2f ef       	ldi	r18, 0xFF	; 255
     74a:	3f ef       	ldi	r19, 0xFF	; 255
     74c:	3c af       	std	Y+60, r19	; 0x3c
     74e:	2b af       	std	Y+59, r18	; 0x3b
     750:	2b 96       	adiw	r28, 0x0b	; 11
     752:	1f ae       	std	Y+63, r1	; 0x3f
     754:	1e ae       	std	Y+62, r1	; 0x3e
     756:	2b 97       	sbiw	r28, 0x0b	; 11
     758:	29 96       	adiw	r28, 0x09	; 9
     75a:	1f ae       	std	Y+63, r1	; 0x3f
     75c:	1e ae       	std	Y+62, r1	; 0x3e
     75e:	29 97       	sbiw	r28, 0x09	; 9
     760:	18 8e       	std	Y+24, r1	; 0x18
     762:	1f 8a       	std	Y+23, r1	; 0x17
     764:	2d 96       	adiw	r28, 0x0d	; 13
     766:	1f ae       	std	Y+63, r1	; 0x3f
     768:	1e ae       	std	Y+62, r1	; 0x3e
     76a:	2d 97       	sbiw	r28, 0x0d	; 13
     76c:	22 24       	eor	r2, r2
     76e:	33 24       	eor	r3, r3
     770:	66 24       	eor	r6, r6
     772:	77 24       	eor	r7, r7
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){

				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
     774:	84 e4       	ldi	r24, 0x44	; 68
     776:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
     780:	85 e4       	ldi	r24, 0x45	; 69
     782:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
     786:	0e 94 a8 19 	call	0x3350	; 0x3350 <_Z11i2c_readAckv>
     78a:	80 93 d0 03 	sts	0x03D0, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
     78e:	0e 94 b2 19 	call	0x3364	; 0x3364 <_Z11i2c_readNakv>
     792:	80 93 d1 03 	sts	0x03D1, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
     796:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>

				//User presses button for each state transition
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
     79a:	c1 01       	movw	r24, r2
     79c:	be 01       	movw	r22, r28
     79e:	6f 5f       	subi	r22, 0xFF	; 255
     7a0:	7f 4f       	sbci	r23, 0xFF	; 255
     7a2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>
     7a6:	08 2f       	mov	r16, r24
							Output 			--     starts testing each output individually and ends after testing all outputs
							Motor			--     starts testing each motor individually and ends after testing all motors
							Multi motor		--     starts testing each the fixture motor with each of the brush motors

				*/
				if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != INPUT){
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     7ae:	88 23       	and	r24, r24
     7b0:	11 f0       	breq	.+4      	; 0x7b6 <main+0x292>
     7b2:	0c 94 05 19 	jmp	0x320a	; 0x320a <main+0x2ce6>
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     7bc:	88 23       	and	r24, r24
     7be:	11 f0       	breq	.+4      	; 0x7c4 <main+0x2a0>
     7c0:	0c 94 05 19 	jmp	0x320a	; 0x320a <main+0x2ce6>
     7c4:	4b ad       	ldd	r20, Y+59	; 0x3b
     7c6:	5c ad       	ldd	r21, Y+60	; 0x3c
     7c8:	45 2b       	or	r20, r21
     7ca:	11 f4       	brne	.+4      	; 0x7d0 <main+0x2ac>
     7cc:	0c 94 05 19 	jmp	0x320a	; 0x320a <main+0x2ce6>
					state = S0;
					submode = INPUT;
					OrangutanLCD::clear();
     7d0:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("INPUTS ");
     7d4:	8e e6       	ldi	r24, 0x6E	; 110
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
     7e4:	44 24       	eor	r4, r4
     7e6:	55 24       	eor	r5, r5
     7e8:	11 e0       	ldi	r17, 0x01	; 1
     7ea:	1c ae       	std	Y+60, r1	; 0x3c
     7ec:	1b ae       	std	Y+59, r1	; 0x3b
     7ee:	66 24       	eor	r6, r6
     7f0:	77 24       	eor	r7, r7
					print = 0;
					switched = true;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2) && submode != OUTPUT){
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     7f8:	88 23       	and	r24, r24
     7fa:	e9 f0       	breq	.+58     	; 0x836 <main+0x312>
     7fc:	82 e0       	ldi	r24, 0x02	; 2
     7fe:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     802:	88 23       	and	r24, r24
     804:	c1 f4       	brne	.+48     	; 0x836 <main+0x312>
     806:	8b ad       	ldd	r24, Y+59	; 0x3b
     808:	9c ad       	ldd	r25, Y+60	; 0x3c
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	a1 f0       	breq	.+40     	; 0x836 <main+0x312>
					state = O0_ON;
					submode = OUTPUT;
					OrangutanLCD::clear();
     80e:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("OUTPUTS");
     812:	86 e7       	ldi	r24, 0x76	; 118
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
     822:	38 e0       	ldi	r19, 0x08	; 8
     824:	43 2e       	mov	r4, r19
     826:	51 2c       	mov	r5, r1
     828:	11 e0       	ldi	r17, 0x01	; 1
     82a:	a1 e0       	ldi	r26, 0x01	; 1
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	bc af       	std	Y+60, r27	; 0x3c
     830:	ab af       	std	Y+59, r26	; 0x3b
     832:	66 24       	eor	r6, r6
     834:	77 24       	eor	r7, r7
					print = 0;
					switched = true;
				}
				if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != MOTOR){
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     83c:	88 23       	and	r24, r24
     83e:	19 f5       	brne	.+70     	; 0x886 <main+0x362>
     840:	82 e0       	ldi	r24, 0x02	; 2
     842:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     846:	88 23       	and	r24, r24
     848:	f1 f0       	breq	.+60     	; 0x886 <main+0x362>
     84a:	2b ad       	ldd	r18, Y+59	; 0x3b
     84c:	3c ad       	ldd	r19, Y+60	; 0x3c
     84e:	22 30       	cpi	r18, 0x02	; 2
     850:	31 05       	cpc	r19, r1
     852:	c9 f0       	breq	.+50     	; 0x886 <main+0x362>
					state = M1_F;
					submode = MOTOR;
					OrangutanLCD::clear();
     854:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MOTORS ");
     858:	8e e7       	ldi	r24, 0x7E	; 126
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
					print = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
     868:	80 91 cc 03 	lds	r24, 0x03CC
     86c:	84 60       	ori	r24, 0x04	; 4
     86e:	80 93 cc 03 	sts	0x03CC, r24
     872:	20 e2       	ldi	r18, 0x20	; 32
     874:	42 2e       	mov	r4, r18
     876:	51 2c       	mov	r5, r1
     878:	11 e0       	ldi	r17, 0x01	; 1
     87a:	42 e0       	ldi	r20, 0x02	; 2
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	5c af       	std	Y+60, r21	; 0x3c
     880:	4b af       	std	Y+59, r20	; 0x3b
     882:	66 24       	eor	r6, r6
     884:	77 24       	eor	r7, r7
					switched = true;
				}
				if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2) && submode != MULTI){
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     88c:	88 23       	and	r24, r24
     88e:	11 f4       	brne	.+4      	; 0x894 <main+0x370>
     890:	0c 94 08 19 	jmp	0x3210	; 0x3210 <main+0x2cec>
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
     89a:	88 23       	and	r24, r24
     89c:	11 f4       	brne	.+4      	; 0x8a2 <main+0x37e>
     89e:	0c 94 08 19 	jmp	0x3210	; 0x3210 <main+0x2cec>
     8a2:	8b ad       	ldd	r24, Y+59	; 0x3b
     8a4:	9c ad       	ldd	r25, Y+60	; 0x3c
     8a6:	03 97       	sbiw	r24, 0x03	; 3
     8a8:	11 f4       	brne	.+4      	; 0x8ae <main+0x38a>
     8aa:	0c 94 08 19 	jmp	0x3210	; 0x3210 <main+0x2cec>
					state = M2_AND_M3;
					submode = MULTI ;
					OrangutanLCD::clear();
     8ae:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
					OrangutanLCD::print("MULTI MOTOR");
     8b2:	86 e8       	ldi	r24, 0x86	; 134
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
					print = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     8c2:	9a e2       	ldi	r25, 0x2A	; 42
     8c4:	49 2e       	mov	r4, r25
     8c6:	51 2c       	mov	r5, r1
     8c8:	a3 e0       	ldi	r26, 0x03	; 3
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	bc af       	std	Y+60, r27	; 0x3c
     8ce:	ab af       	std	Y+59, r26	; 0x3b
     8d0:	66 24       	eor	r6, r6
     8d2:	77 24       	eor	r7, r7
					plateLoadMotor = 0;
					fixtureMotor = 0;
					brush1Motor = 0;
					brush2Motor = 0;
					paperTowelMotor = 0;
					u_outputByte0.outputByte0 = 255;  // reset outputByte0
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	80 93 ce 03 	sts	0x03CE, r24
					u_outputByte1.outputByte1 = 255;  // reset outputByte1
     8da:	80 93 cf 03 	sts	0x03CF, r24
					u_motorByte0.motorByte0 = 0;	  // reset motorByte0
     8de:	10 92 cc 03 	sts	0x03CC, r1
					u_motorByte1.motorByte1 = 0;	  // reset motorByte1
     8e2:	10 92 cd 03 	sts	0x03CD, r1
     8e6:	27 96       	adiw	r28, 0x07	; 7
     8e8:	1f ae       	std	Y+63, r1	; 0x3f
     8ea:	1e ae       	std	Y+62, r1	; 0x3e
     8ec:	27 97       	sbiw	r28, 0x07	; 7
     8ee:	2f 96       	adiw	r28, 0x0f	; 15
     8f0:	1f ae       	std	Y+63, r1	; 0x3f
     8f2:	1e ae       	std	Y+62, r1	; 0x3e
     8f4:	2f 97       	sbiw	r28, 0x0f	; 15
     8f6:	2b 96       	adiw	r28, 0x0b	; 11
     8f8:	1f ae       	std	Y+63, r1	; 0x3f
     8fa:	1e ae       	std	Y+62, r1	; 0x3e
     8fc:	2b 97       	sbiw	r28, 0x0b	; 11
     8fe:	29 96       	adiw	r28, 0x09	; 9
     900:	1f ae       	std	Y+63, r1	; 0x3f
     902:	1e ae       	std	Y+62, r1	; 0x3e
     904:	29 97       	sbiw	r28, 0x09	; 9
     906:	2d 96       	adiw	r28, 0x0d	; 13
     908:	1f ae       	std	Y+63, r1	; 0x3f
     90a:	1e ae       	std	Y+62, r1	; 0x3e
     90c:	2d 97       	sbiw	r28, 0x0d	; 13
				}

				//state transitions

				//Has button been pressed?
				if(buttonTriggered) {					//if a state conversion is in order (button press)
     90e:	00 23       	and	r16, r16
     910:	09 f4       	brne	.+2      	; 0x914 <main+0x3f0>
     912:	d1 c0       	rjmp	.+418    	; 0xab6 <main+0x592>
					if(state <= S7){				//if it's doing the sensors
     914:	b8 e0       	ldi	r27, 0x08	; 8
     916:	4b 16       	cp	r4, r27
     918:	51 04       	cpc	r5, r1
     91a:	6c f4       	brge	.+26     	; 0x936 <main+0x412>
						OrangutanLCD::gotoXY(0,1);
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	61 e0       	ldi	r22, 0x01	; 1
     920:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
						buttonTriggered = false;
						state ++;
     924:	08 94       	sec
     926:	41 1c       	adc	r4, r1
     928:	51 1c       	adc	r5, r1
						counterRef = counter;
						print = 0;
						if(state == S7 + 1){		//accounts for end of maintenance mode after sensors
     92a:	28 e0       	ldi	r18, 0x08	; 8
     92c:	42 16       	cp	r4, r18
     92e:	51 04       	cpc	r5, r1
     930:	09 f0       	breq	.+2      	; 0x934 <main+0x410>
     932:	bd c0       	rjmp	.+378    	; 0xaae <main+0x58a>
     934:	1b c0       	rjmp	.+54     	; 0x96c <main+0x448>
							OrangutanLCD::clear();
							state = DONEM;
						}
					}
					else if(state <= O11_OFF){		//if it's doing the outputs
     936:	30 e2       	ldi	r19, 0x20	; 32
     938:	43 16       	cp	r4, r19
     93a:	51 04       	cpc	r5, r1
     93c:	dc f4       	brge	.+54     	; 0x974 <main+0x450>
						if(state % 2 == 0){			//current state is an 'on' state
     93e:	40 fc       	sbrc	r4, 0
     940:	09 c0       	rjmp	.+18     	; 0x954 <main+0x430>
							OrangutanLCD::gotoXY(13,1);
     942:	8d e0       	ldi	r24, 0x0D	; 13
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("OFF");
     94a:	82 e9       	ldi	r24, 0x92	; 146
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     952:	04 c0       	rjmp	.+8      	; 0x95c <main+0x438>
						}
						else{						//current state is an 'off' state
							OrangutanLCD::gotoXY(0,1);
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
						}
						buttonTriggered = false;
						state ++;
     95c:	08 94       	sec
     95e:	41 1c       	adc	r4, r1
     960:	51 1c       	adc	r5, r1
						counterRef = counter;
						print = 0;
						if(state == O11_OFF + 1){	//accounts for end of maintenance mode after outputs
     962:	40 e2       	ldi	r20, 0x20	; 32
     964:	44 16       	cp	r4, r20
     966:	51 04       	cpc	r5, r1
     968:	09 f0       	breq	.+2      	; 0x96c <main+0x448>
     96a:	a1 c0       	rjmp	.+322    	; 0xaae <main+0x58a>
							OrangutanLCD::clear();
     96c:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
     970:	0c 94 28 19 	jmp	0x3250	; 0x3250 <main+0x2d2c>
     974:	82 01       	movw	r16, r4
     976:	0f 5f       	subi	r16, 0xFF	; 255
     978:	1f 4f       	sbci	r17, 0xFF	; 255
							state = DONEM;
						}
					}
					else if(state <= M5_B){							//if it's doing the motors
     97a:	5a e2       	ldi	r21, 0x2A	; 42
     97c:	45 16       	cp	r4, r21
     97e:	51 04       	cpc	r5, r1
     980:	0c f0       	brlt	.+2      	; 0x984 <main+0x460>
     982:	65 c0       	rjmp	.+202    	; 0xa4e <main+0x52a>
						buttonTriggered = false;
						state ++;
						counterRef = counter;
						print = 0;
						if((state - 1) % 2 == 0){	//if the current state is a 'front' state
     984:	40 fc       	sbrc	r4, 0
     986:	09 c0       	rjmp	.+18     	; 0x99a <main+0x476>
							OrangutanLCD::gotoXY(11,1);
     988:	8b e0       	ldi	r24, 0x0B	; 11
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("BACK ");
     990:	86 e9       	ldi	r24, 0x96	; 150
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     998:	13 c0       	rjmp	.+38     	; 0x9c0 <main+0x49c>
						}
						else{						//if the current state is a 'back' state
							switch (state) {
     99a:	06 32       	cpi	r16, 0x26	; 38
     99c:	11 05       	cpc	r17, r1
     99e:	81 f1       	breq	.+96     	; 0xa00 <main+0x4dc>
     9a0:	07 32       	cpi	r16, 0x27	; 39
     9a2:	11 05       	cpc	r17, r1
     9a4:	3c f4       	brge	.+14     	; 0x9b4 <main+0x490>
     9a6:	02 32       	cpi	r16, 0x22	; 34
     9a8:	11 05       	cpc	r17, r1
     9aa:	61 f0       	breq	.+24     	; 0x9c4 <main+0x4a0>
     9ac:	04 32       	cpi	r16, 0x24	; 36
     9ae:	11 05       	cpc	r17, r1
     9b0:	39 f4       	brne	.+14     	; 0x9c0 <main+0x49c>
     9b2:	15 c0       	rjmp	.+42     	; 0x9de <main+0x4ba>
     9b4:	08 32       	cpi	r16, 0x28	; 40
     9b6:	11 05       	cpc	r17, r1
     9b8:	81 f1       	breq	.+96     	; 0xa1a <main+0x4f6>
     9ba:	0a 32       	cpi	r16, 0x2A	; 42
     9bc:	11 05       	cpc	r17, r1
     9be:	d1 f1       	breq	.+116    	; 0xa34 <main+0x510>
     9c0:	28 01       	movw	r4, r16
     9c2:	75 c0       	rjmp	.+234    	; 0xaae <main+0x58a>
								case M1_B + 1:
									OrangutanLCD::gotoXY(0,1);
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
     9cc:	80 91 cc 03 	lds	r24, 0x03CC
     9d0:	8b 7f       	andi	r24, 0xFB	; 251
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     9d2:	80 62       	ori	r24, 0x20	; 32
     9d4:	80 93 cc 03 	sts	0x03CC, r24
     9d8:	38 8e       	std	Y+24, r3	; 0x18
     9da:	2f 8a       	std	Y+23, r2	; 0x17
     9dc:	1e c2       	rjmp	.+1084   	; 0xe1a <main+0x8f6>
									break;
								case M2_B + 1:
									OrangutanLCD::gotoXY(0,1);
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     9e6:	80 91 cc 03 	lds	r24, 0x03CC
     9ea:	8f 7d       	andi	r24, 0xDF	; 223
     9ec:	80 93 cc 03 	sts	0x03CC, r24
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
     9f0:	80 91 cd 03 	lds	r24, 0x03CD
     9f4:	81 60       	ori	r24, 0x01	; 1
     9f6:	80 93 cd 03 	sts	0x03CD, r24
     9fa:	38 8e       	std	Y+24, r3	; 0x18
     9fc:	2f 8a       	std	Y+23, r2	; 0x17
     9fe:	36 c2       	rjmp	.+1132   	; 0xe6c <main+0x948>
									break;
								case M3_B + 1:
									OrangutanLCD::gotoXY(0,1);
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
     a08:	80 91 cd 03 	lds	r24, 0x03CD
     a0c:	8e 7f       	andi	r24, 0xFE	; 254
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     a0e:	88 60       	ori	r24, 0x08	; 8
     a10:	80 93 cd 03 	sts	0x03CD, r24
     a14:	38 8e       	std	Y+24, r3	; 0x18
     a16:	2f 8a       	std	Y+23, r2	; 0x17
     a18:	52 c2       	rjmp	.+1188   	; 0xebe <main+0x99a>
									break;
								case M4_B + 1:
									OrangutanLCD::gotoXY(0,1);
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
									u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     a22:	80 91 cd 03 	lds	r24, 0x03CD
     a26:	87 7f       	andi	r24, 0xF7	; 247
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
     a28:	80 64       	ori	r24, 0x40	; 64
     a2a:	80 93 cd 03 	sts	0x03CD, r24
     a2e:	38 8e       	std	Y+24, r3	; 0x18
     a30:	2f 8a       	std	Y+23, r2	; 0x17
     a32:	6e c2       	rjmp	.+1244   	; 0xf10 <main+0x9ec>
									break;
								case M5_B + 1:
									OrangutanLCD::clear();
     a34:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
									u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
     a38:	80 91 cd 03 	lds	r24, 0x03CD
     a3c:	8f 7b       	andi	r24, 0xBF	; 191
     a3e:	80 93 cd 03 	sts	0x03CD, r24
     a42:	27 96       	adiw	r28, 0x07	; 7
     a44:	1f ae       	std	Y+63, r1	; 0x3f
     a46:	1e ae       	std	Y+62, r1	; 0x3e
     a48:	27 97       	sbiw	r28, 0x07	; 7
     a4a:	0c 94 28 19 	jmp	0x3250	; 0x3250 <main+0x2d2c>
							}
						}
					}
					else{
						buttonTriggered = false;
						state ++;
     a4e:	28 01       	movw	r4, r16
						counterRef = counter;
						print = 0;
						switch(state){
     a50:	0b 32       	cpi	r16, 0x2B	; 43
     a52:	11 05       	cpc	r17, r1
     a54:	21 f0       	breq	.+8      	; 0xa5e <main+0x53a>
     a56:	0c 32       	cpi	r16, 0x2C	; 44
     a58:	11 05       	cpc	r17, r1
     a5a:	49 f5       	brne	.+82     	; 0xaae <main+0x58a>
     a5c:	12 c0       	rjmp	.+36     	; 0xa82 <main+0x55e>
							case M2_AND_M3 + 1:
							    OrangutanLCD::gotoXY(0,1);
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	61 e0       	ldi	r22, 0x01	; 1
     a62:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
								u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
     a66:	90 91 cd 03 	lds	r25, 0x03CD
     a6a:	9e 7f       	andi	r25, 0xFE	; 254
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
     a6c:	80 91 cc 03 	lds	r24, 0x03CC
     a70:	80 62       	ori	r24, 0x20	; 32
     a72:	80 93 cc 03 	sts	0x03CC, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
     a76:	98 60       	ori	r25, 0x08	; 8
     a78:	90 93 cd 03 	sts	0x03CD, r25
     a7c:	38 8e       	std	Y+24, r3	; 0x18
     a7e:	2f 8a       	std	Y+23, r2	; 0x17
     a80:	9f c2       	rjmp	.+1342   	; 0xfc0 <main+0xa9c>
								break;
							case M2_AND_M4 + 1:
								OrangutanLCD::clear();
     a82:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
								u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
     a86:	80 91 cc 03 	lds	r24, 0x03CC
     a8a:	8f 7d       	andi	r24, 0xDF	; 223
     a8c:	80 93 cc 03 	sts	0x03CC, r24
								u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
     a90:	80 91 cd 03 	lds	r24, 0x03CD
     a94:	87 7f       	andi	r24, 0xF7	; 247
     a96:	80 93 cd 03 	sts	0x03CD, r24
     a9a:	29 96       	adiw	r28, 0x09	; 9
     a9c:	1f ae       	std	Y+63, r1	; 0x3f
     a9e:	1e ae       	std	Y+62, r1	; 0x3e
     aa0:	29 97       	sbiw	r28, 0x09	; 9
     aa2:	2d 96       	adiw	r28, 0x0d	; 13
     aa4:	1f ae       	std	Y+63, r1	; 0x3f
     aa6:	1e ae       	std	Y+62, r1	; 0x3e
     aa8:	2d 97       	sbiw	r28, 0x0d	; 13
     aaa:	0c 94 28 19 	jmp	0x3250	; 0x3250 <main+0x2d2c>
     aae:	38 8e       	std	Y+24, r3	; 0x18
     ab0:	2f 8a       	std	Y+23, r2	; 0x17
     ab2:	66 24       	eor	r6, r6
     ab4:	77 24       	eor	r7, r7
						}
					}
				}

				//state actions
				switch (state) {
     ab6:	f2 01       	movw	r30, r4
     ab8:	ec 32       	cpi	r30, 0x2C	; 44
     aba:	f1 05       	cpc	r31, r1
     abc:	08 f0       	brcs	.+2      	; 0xac0 <main+0x59c>
     abe:	98 c2       	rjmp	.+1328   	; 0xff0 <main+0xacc>
     ac0:	ea 5b       	subi	r30, 0xBA	; 186
     ac2:	ff 4f       	sbci	r31, 0xFF	; 255
     ac4:	ee 0f       	add	r30, r30
     ac6:	ff 1f       	adc	r31, r31
     ac8:	05 90       	lpm	r0, Z+
     aca:	f4 91       	lpm	r31, Z+
     acc:	e0 2d       	mov	r30, r0
     ace:	09 94       	ijmp
					case S0:
						if(print == 0){
     ad0:	61 14       	cp	r6, r1
     ad2:	71 04       	cpc	r7, r1
     ad4:	39 f4       	brne	.+14     	; 0xae4 <main+0x5c0>
							OrangutanLCD::print("SENSOR 0");
     ad6:	8c e9       	ldi	r24, 0x9C	; 156
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	68 2e       	mov	r6, r24
     ae2:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     ae4:	8f e0       	ldi	r24, 0x0F	; 15
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
	// position and will not span lines.
	static void print(unsigned long value);
	static void print(long value);
	static inline void print(unsigned int value)
	{
		print((unsigned long)value);
     aec:	60 91 d0 03 	lds	r22, 0x03D0
     af0:	11 c0       	rjmp	.+34     	; 0xb14 <main+0x5f0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.plate);
						break;
					case S1:
						if(print == 0){
     af2:	61 14       	cp	r6, r1
     af4:	71 04       	cpc	r7, r1
     af6:	39 f4       	brne	.+14     	; 0xb06 <main+0x5e2>
							OrangutanLCD::print("SENSOR 1");
     af8:	85 ea       	ldi	r24, 0xA5	; 165
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     b00:	01 e0       	ldi	r16, 0x01	; 1
     b02:	60 2e       	mov	r6, r16
     b04:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b06:	8f e0       	ldi	r24, 0x0F	; 15
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
     b0e:	60 91 d0 03 	lds	r22, 0x03D0
     b12:	66 95       	lsr	r22
     b14:	61 70       	andi	r22, 0x01	; 1
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 01 1c 	call	0x3802	; 0x3802 <_ZN12OrangutanLCD5printEm>
     b20:	67 c2       	rjmp	.+1230   	; 0xff0 <main+0xacc>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureLift);
						break;
					case S2:
						if(print == 0){
     b22:	61 14       	cp	r6, r1
     b24:	71 04       	cpc	r7, r1
     b26:	39 f4       	brne	.+14     	; 0xb36 <main+0x612>
							OrangutanLCD::print("SENSOR 2");
     b28:	8e ea       	ldi	r24, 0xAE	; 174
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     b30:	11 e0       	ldi	r17, 0x01	; 1
     b32:	61 2e       	mov	r6, r17
     b34:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b36:	8f e0       	ldi	r24, 0x0F	; 15
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
     b3e:	60 91 d0 03 	lds	r22, 0x03D0
     b42:	66 95       	lsr	r22
     b44:	66 95       	lsr	r22
     b46:	e6 cf       	rjmp	.-52     	; 0xb14 <main+0x5f0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureHome);
						break;
					case S3:
						if(print == 0){
     b48:	61 14       	cp	r6, r1
     b4a:	71 04       	cpc	r7, r1
     b4c:	39 f4       	brne	.+14     	; 0xb5c <main+0x638>
							OrangutanLCD::print("SENSOR 3");
     b4e:	87 eb       	ldi	r24, 0xB7	; 183
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     b56:	b1 e0       	ldi	r27, 0x01	; 1
     b58:	6b 2e       	mov	r6, r27
     b5a:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b5c:	8f e0       	ldi	r24, 0x0F	; 15
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
     b64:	60 91 d0 03 	lds	r22, 0x03D0
     b68:	66 95       	lsr	r22
     b6a:	66 95       	lsr	r22
     b6c:	66 95       	lsr	r22
     b6e:	d2 cf       	rjmp	.-92     	; 0xb14 <main+0x5f0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixturePlate);
						break;
					case S4:
						if(print == 0){
     b70:	61 14       	cp	r6, r1
     b72:	71 04       	cpc	r7, r1
     b74:	39 f4       	brne	.+14     	; 0xb84 <main+0x660>
							OrangutanLCD::print("SENSOR 4");
     b76:	80 ec       	ldi	r24, 0xC0	; 192
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     b7e:	a1 e0       	ldi	r26, 0x01	; 1
     b80:	6a 2e       	mov	r6, r26
     b82:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     b84:	8f e0       	ldi	r24, 0x0F	; 15
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
     b8c:	60 91 d0 03 	lds	r22, 0x03D0
     b90:	62 95       	swap	r22
     b92:	6f 70       	andi	r22, 0x0F	; 15
     b94:	bf cf       	rjmp	.-130    	; 0xb14 <main+0x5f0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush1);
						break;
					case S5:
						if(print == 0){
     b96:	61 14       	cp	r6, r1
     b98:	71 04       	cpc	r7, r1
     b9a:	39 f4       	brne	.+14     	; 0xbaa <main+0x686>
							OrangutanLCD::print("SENSOR 5");
     b9c:	89 ec       	ldi	r24, 0xC9	; 201
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     ba4:	f1 e0       	ldi	r31, 0x01	; 1
     ba6:	6f 2e       	mov	r6, r31
     ba8:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     baa:	8f e0       	ldi	r24, 0x0F	; 15
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
     bb2:	60 91 d0 03 	lds	r22, 0x03D0
     bb6:	62 95       	swap	r22
     bb8:	66 95       	lsr	r22
     bba:	67 70       	andi	r22, 0x07	; 7
     bbc:	ab cf       	rjmp	.-170    	; 0xb14 <main+0x5f0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureBrush2);
						break;
					case S6:
						if(print == 0){
     bbe:	61 14       	cp	r6, r1
     bc0:	71 04       	cpc	r7, r1
     bc2:	39 f4       	brne	.+14     	; 0xbd2 <main+0x6ae>
							OrangutanLCD::print("SENSOR 6");
     bc4:	82 ed       	ldi	r24, 0xD2	; 210
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     bcc:	e1 e0       	ldi	r30, 0x01	; 1
     bce:	6e 2e       	mov	r6, r30
     bd0:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     bd2:	8f e0       	ldi	r24, 0x0F	; 15
     bd4:	61 e0       	ldi	r22, 0x01	; 1
     bd6:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
     bda:	60 91 d0 03 	lds	r22, 0x03D0
     bde:	62 95       	swap	r22
     be0:	66 95       	lsr	r22
     be2:	66 95       	lsr	r22
     be4:	63 70       	andi	r22, 0x03	; 3
     be6:	96 cf       	rjmp	.-212    	; 0xb14 <main+0x5f0>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry1);
						break;
					case S7:
						if(print == 0){
     be8:	61 14       	cp	r6, r1
     bea:	71 04       	cpc	r7, r1
     bec:	39 f4       	brne	.+14     	; 0xbfc <main+0x6d8>
							OrangutanLCD::print("SENSOR 7");
     bee:	8b ed       	ldi	r24, 0xDB	; 219
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     bf6:	71 e0       	ldi	r23, 0x01	; 1
     bf8:	67 2e       	mov	r6, r23
     bfa:	71 2c       	mov	r7, r1
							print = 1;
						}
						OrangutanLCD::gotoXY(15,1);
     bfc:	8f e0       	ldi	r24, 0x0F	; 15
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
     c04:	60 91 d0 03 	lds	r22, 0x03D0
     c08:	66 1f       	adc	r22, r22
     c0a:	66 27       	eor	r22, r22
     c0c:	66 1f       	adc	r22, r22
     c0e:	83 cf       	rjmp	.-250    	; 0xb16 <main+0x5f2>
						OrangutanLCD::print(u_inputByte0.bits_in_inputByte0.fixtureDry2);
						break;
					case O0_ON:
						if(print == 0){
     c10:	61 14       	cp	r6, r1
     c12:	71 04       	cpc	r7, r1
     c14:	39 f4       	brne	.+14     	; 0xc24 <main+0x700>
							OrangutanLCD::print("AC POWER     ON ");
     c16:	84 ee       	ldi	r24, 0xE4	; 228
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	66 2e       	mov	r6, r22
     c22:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.ACPower = 0;
     c24:	80 91 ce 03 	lds	r24, 0x03CE
     c28:	8e 7f       	andi	r24, 0xFE	; 254
     c2a:	03 c0       	rjmp	.+6      	; 0xc32 <main+0x70e>
						break;
					case O0_OFF:
						u_outputByte0.bits_in_outputByte0.ACPower = 1;
     c2c:	80 91 ce 03 	lds	r24, 0x03CE
     c30:	81 60       	ori	r24, 0x01	; 1
     c32:	80 93 ce 03 	sts	0x03CE, r24
     c36:	dc c1       	rjmp	.+952    	; 0xff0 <main+0xacc>
						break;
					case O1_ON:
						if(print == 0){
     c38:	61 14       	cp	r6, r1
     c3a:	71 04       	cpc	r7, r1
     c3c:	39 f4       	brne	.+14     	; 0xc4c <main+0x728>
							OrangutanLCD::print("BLOWER       ON  ");
     c3e:	85 ef       	ldi	r24, 0xF5	; 245
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     c46:	51 e0       	ldi	r21, 0x01	; 1
     c48:	65 2e       	mov	r6, r21
     c4a:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
     c4c:	80 91 ce 03 	lds	r24, 0x03CE
     c50:	8d 7f       	andi	r24, 0xFD	; 253
     c52:	ef cf       	rjmp	.-34     	; 0xc32 <main+0x70e>
						break;
					case O1_OFF:
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
     c54:	80 91 ce 03 	lds	r24, 0x03CE
     c58:	82 60       	ori	r24, 0x02	; 2
     c5a:	eb cf       	rjmp	.-42     	; 0xc32 <main+0x70e>
						break;
					case O2_ON:
						if(print == 0){
     c5c:	61 14       	cp	r6, r1
     c5e:	71 04       	cpc	r7, r1
     c60:	39 f4       	brne	.+14     	; 0xc70 <main+0x74c>
							OrangutanLCD::print("PLATE STOP   ON ");
     c62:	87 e0       	ldi	r24, 0x07	; 7
     c64:	92 e0       	ldi	r25, 0x02	; 2
     c66:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	64 2e       	mov	r6, r20
     c6e:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.plateStop = 0;
     c70:	80 91 ce 03 	lds	r24, 0x03CE
     c74:	8b 7f       	andi	r24, 0xFB	; 251
     c76:	dd cf       	rjmp	.-70     	; 0xc32 <main+0x70e>
						break;
					case O2_OFF:
						u_outputByte0.bits_in_outputByte0.plateStop = 1;
     c78:	80 91 ce 03 	lds	r24, 0x03CE
     c7c:	84 60       	ori	r24, 0x04	; 4
     c7e:	d9 cf       	rjmp	.-78     	; 0xc32 <main+0x70e>
						break;
					case O3_ON:
						if(print == 0){
     c80:	61 14       	cp	r6, r1
     c82:	71 04       	cpc	r7, r1
     c84:	39 f4       	brne	.+14     	; 0xc94 <main+0x770>
							OrangutanLCD::print("PLATE RAISE  ON ");
     c86:	88 e1       	ldi	r24, 0x18	; 24
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     c8e:	31 e0       	ldi	r19, 0x01	; 1
     c90:	63 2e       	mov	r6, r19
     c92:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
     c94:	80 91 ce 03 	lds	r24, 0x03CE
     c98:	87 7f       	andi	r24, 0xF7	; 247
     c9a:	15 c0       	rjmp	.+42     	; 0xcc6 <main+0x7a2>
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
						break;
					case O3_OFF:
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     c9c:	80 91 ce 03 	lds	r24, 0x03CE
     ca0:	88 60       	ori	r24, 0x08	; 8
     ca2:	c7 cf       	rjmp	.-114    	; 0xc32 <main+0x70e>
						//u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
						break;
					case O4_ON:
						if(print == 0){
     ca4:	61 14       	cp	r6, r1
     ca6:	71 04       	cpc	r7, r1
     ca8:	39 f4       	brne	.+14     	; 0xcb8 <main+0x794>
							OrangutanLCD::print("PLATE LOWER  ON ");
     caa:	89 e2       	ldi	r24, 0x29	; 41
     cac:	92 e0       	ldi	r25, 0x02	; 2
     cae:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	62 2e       	mov	r6, r18
     cb6:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
     cb8:	80 91 ce 03 	lds	r24, 0x03CE
     cbc:	88 60       	ori	r24, 0x08	; 8
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
     cbe:	8f 7e       	andi	r24, 0xEF	; 239
     cc0:	b8 cf       	rjmp	.-144    	; 0xc32 <main+0x70e>
						break;
					case O4_OFF:
						u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
     cc2:	80 91 ce 03 	lds	r24, 0x03CE
     cc6:	80 61       	ori	r24, 0x10	; 16
     cc8:	b4 cf       	rjmp	.-152    	; 0xc32 <main+0x70e>
						break;
					case O5_ON:
						if(print == 0){
     cca:	61 14       	cp	r6, r1
     ccc:	71 04       	cpc	r7, r1
     cce:	39 f4       	brne	.+14     	; 0xcde <main+0x7ba>
							OrangutanLCD::print("BRUSH1 RAISE ON ");
     cd0:	8a e3       	ldi	r24, 0x3A	; 58
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	69 2e       	mov	r6, r25
     cdc:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
     cde:	80 91 ce 03 	lds	r24, 0x03CE
     ce2:	8f 7d       	andi	r24, 0xDF	; 223
     ce4:	14 c0       	rjmp	.+40     	; 0xd0e <main+0x7ea>
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
						break;
					case O5_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     ce6:	80 91 ce 03 	lds	r24, 0x03CE
     cea:	0d c0       	rjmp	.+26     	; 0xd06 <main+0x7e2>
						//u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
						break;
					case O6_ON:
						if(print == 0){
     cec:	61 14       	cp	r6, r1
     cee:	71 04       	cpc	r7, r1
     cf0:	39 f4       	brne	.+14     	; 0xd00 <main+0x7dc>
							OrangutanLCD::print("BRUSH1 LOWER ON ");
     cf2:	8b e4       	ldi	r24, 0x4B	; 75
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	68 2e       	mov	r6, r24
     cfe:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
     d00:	80 91 ce 03 	lds	r24, 0x03CE
     d04:	8f 7b       	andi	r24, 0xBF	; 191
						u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
     d06:	80 62       	ori	r24, 0x20	; 32
     d08:	94 cf       	rjmp	.-216    	; 0xc32 <main+0x70e>
						break;
					case O6_OFF:
						u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
     d0a:	80 91 ce 03 	lds	r24, 0x03CE
     d0e:	80 64       	ori	r24, 0x40	; 64
     d10:	90 cf       	rjmp	.-224    	; 0xc32 <main+0x70e>
						break;
					case O7_ON:
						if(print == 0){
     d12:	61 14       	cp	r6, r1
     d14:	71 04       	cpc	r7, r1
     d16:	39 f4       	brne	.+14     	; 0xd26 <main+0x802>
							OrangutanLCD::print("BRUSH2 RAISE ON ");
     d18:	8c e5       	ldi	r24, 0x5C	; 92
     d1a:	92 e0       	ldi	r25, 0x02	; 2
     d1c:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     d20:	01 e0       	ldi	r16, 0x01	; 1
     d22:	60 2e       	mov	r6, r16
     d24:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
     d26:	80 91 ce 03 	lds	r24, 0x03CE
     d2a:	8f 77       	andi	r24, 0x7F	; 127
     d2c:	80 93 ce 03 	sts	0x03CE, r24
     d30:	13 c0       	rjmp	.+38     	; 0xd58 <main+0x834>
					case O7_OFF:
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
						//u_outputByte0.bits_in_outputByte0.brush2Lower = 0;
						break;
					case O8_ON:
						if(print == 0){
     d32:	61 14       	cp	r6, r1
     d34:	71 04       	cpc	r7, r1
     d36:	39 f4       	brne	.+14     	; 0xd46 <main+0x822>
							OrangutanLCD::print("BRUSH2 LOWER ON ");
     d38:	8d e6       	ldi	r24, 0x6D	; 109
     d3a:	92 e0       	ldi	r25, 0x02	; 2
     d3c:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     d40:	11 e0       	ldi	r17, 0x01	; 1
     d42:	61 2e       	mov	r6, r17
     d44:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
     d46:	80 91 cf 03 	lds	r24, 0x03CF
     d4a:	8e 7f       	andi	r24, 0xFE	; 254
     d4c:	80 93 cf 03 	sts	0x03CF, r24
						u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
     d50:	80 91 ce 03 	lds	r24, 0x03CE
     d54:	80 68       	ori	r24, 0x80	; 128
     d56:	6d cf       	rjmp	.-294    	; 0xc32 <main+0x70e>
						break;
					case O8_OFF:
						u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
     d58:	80 91 cf 03 	lds	r24, 0x03CF
     d5c:	81 60       	ori	r24, 0x01	; 1
     d5e:	35 c0       	rjmp	.+106    	; 0xdca <main+0x8a6>
						break;
					case O9_ON:
						if(print == 0){
     d60:	61 14       	cp	r6, r1
     d62:	71 04       	cpc	r7, r1
     d64:	39 f4       	brne	.+14     	; 0xd74 <main+0x850>
							OrangutanLCD::print("PAPER RAISE  ON ");
     d66:	8e e7       	ldi	r24, 0x7E	; 126
     d68:	92 e0       	ldi	r25, 0x02	; 2
     d6a:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     d6e:	b1 e0       	ldi	r27, 0x01	; 1
     d70:	6b 2e       	mov	r6, r27
     d72:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptRaise = 0;
     d74:	80 91 cf 03 	lds	r24, 0x03CF
     d78:	8d 7f       	andi	r24, 0xFD	; 253
     d7a:	14 c0       	rjmp	.+40     	; 0xda4 <main+0x880>
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
						break;
					case O9_OFF:
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     d7c:	80 91 cf 03 	lds	r24, 0x03CF
     d80:	0d c0       	rjmp	.+26     	; 0xd9c <main+0x878>
						//u_outputByte1.bits_in_outputByte1.ptLower = 0;
						break;
					case O10_ON:
						if(print == 0){
     d82:	61 14       	cp	r6, r1
     d84:	71 04       	cpc	r7, r1
     d86:	39 f4       	brne	.+14     	; 0xd96 <main+0x872>
							OrangutanLCD::print("PAPER LOWER  ON ");
     d88:	8f e8       	ldi	r24, 0x8F	; 143
     d8a:	92 e0       	ldi	r25, 0x02	; 2
     d8c:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     d90:	a1 e0       	ldi	r26, 0x01	; 1
     d92:	6a 2e       	mov	r6, r26
     d94:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.ptLower = 0;
     d96:	80 91 cf 03 	lds	r24, 0x03CF
     d9a:	8b 7f       	andi	r24, 0xFB	; 251
						u_outputByte1.bits_in_outputByte1.ptRaise = 1;
     d9c:	82 60       	ori	r24, 0x02	; 2
     d9e:	15 c0       	rjmp	.+42     	; 0xdca <main+0x8a6>
						break;
					case O10_OFF:
						u_outputByte1.bits_in_outputByte1.ptLower = 1;
     da0:	80 91 cf 03 	lds	r24, 0x03CF
     da4:	84 60       	ori	r24, 0x04	; 4
     da6:	11 c0       	rjmp	.+34     	; 0xdca <main+0x8a6>
						break;
					case O11_ON:
						if(print == 0){
     da8:	61 14       	cp	r6, r1
     daa:	71 04       	cpc	r7, r1
     dac:	39 f4       	brne	.+14     	; 0xdbc <main+0x898>
							OrangutanLCD::print("AIR KNIFE    ON ");
     dae:	80 ea       	ldi	r24, 0xA0	; 160
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     db6:	f1 e0       	ldi	r31, 0x01	; 1
     db8:	6f 2e       	mov	r6, r31
     dba:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_outputByte1.bits_in_outputByte1.airKnife = 0;
     dbc:	80 91 cf 03 	lds	r24, 0x03CF
     dc0:	87 7f       	andi	r24, 0xF7	; 247
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <main+0x8a6>
						break;
					case O11_OFF:
						u_outputByte1.bits_in_outputByte1.airKnife = 1;
     dc4:	80 91 cf 03 	lds	r24, 0x03CF
     dc8:	88 60       	ori	r24, 0x08	; 8
     dca:	80 93 cf 03 	sts	0x03CF, r24
     dce:	10 c1       	rjmp	.+544    	; 0xff0 <main+0xacc>
						break;
					case M1_F:
						if(print == 0){
     dd0:	61 14       	cp	r6, r1
     dd2:	71 04       	cpc	r7, r1
     dd4:	39 f4       	brne	.+14     	; 0xde4 <main+0x8c0>
							OrangutanLCD::print("LOADING    FRONT");
     dd6:	81 eb       	ldi	r24, 0xB1	; 177
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     dde:	e1 e0       	ldi	r30, 0x01	; 1
     de0:	6e 2e       	mov	r6, r30
     de2:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
     de4:	80 91 cc 03 	lds	r24, 0x03CC
     de8:	8d 7f       	andi	r24, 0xFD	; 253
     dea:	80 93 cc 03 	sts	0x03CC, r24
     dee:	a1 e0       	ldi	r26, 0x01	; 1
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	2f 96       	adiw	r28, 0x0f	; 15
     df4:	bf af       	std	Y+63, r27	; 0x3f
     df6:	ae af       	std	Y+62, r26	; 0x3e
     df8:	2f 97       	sbiw	r28, 0x0f	; 15
     dfa:	fa c0       	rjmp	.+500    	; 0xff0 <main+0xacc>
						plateLoadMotor =  1;
						break;
					case M1_B:
						u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 1;
     dfc:	80 91 cc 03 	lds	r24, 0x03CC
     e00:	82 60       	ori	r24, 0x02	; 2
     e02:	80 93 cc 03 	sts	0x03CC, r24
     e06:	21 e0       	ldi	r18, 0x01	; 1
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	2f 96       	adiw	r28, 0x0f	; 15
     e0c:	3f af       	std	Y+63, r19	; 0x3f
     e0e:	2e af       	std	Y+62, r18	; 0x3e
     e10:	2f 97       	sbiw	r28, 0x0f	; 15
     e12:	ee c0       	rjmp	.+476    	; 0xff0 <main+0xacc>
						plateLoadMotor =  1;
						break;
					case M2_F:
						if(print == 0){
     e14:	61 14       	cp	r6, r1
     e16:	71 04       	cpc	r7, r1
     e18:	39 f4       	brne	.+14     	; 0xe28 <main+0x904>
							OrangutanLCD::print("DRIVE      FRONT");
     e1a:	82 ec       	ldi	r24, 0xC2	; 194
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     e22:	71 e0       	ldi	r23, 0x01	; 1
     e24:	67 2e       	mov	r6, r23
     e26:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
     e28:	80 91 cc 03 	lds	r24, 0x03CC
     e2c:	8f 7e       	andi	r24, 0xEF	; 239
     e2e:	80 93 cc 03 	sts	0x03CC, r24
     e32:	2f 96       	adiw	r28, 0x0f	; 15
     e34:	1f ae       	std	Y+63, r1	; 0x3f
     e36:	1e ae       	std	Y+62, r1	; 0x3e
     e38:	2f 97       	sbiw	r28, 0x0f	; 15
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	2d 96       	adiw	r28, 0x0d	; 13
     e40:	5f af       	std	Y+63, r21	; 0x3f
     e42:	4e af       	std	Y+62, r20	; 0x3e
     e44:	2d 97       	sbiw	r28, 0x0d	; 13
     e46:	62 e2       	ldi	r22, 0x22	; 34
     e48:	46 2e       	mov	r4, r22
     e4a:	51 2c       	mov	r5, r1
     e4c:	d1 c0       	rjmp	.+418    	; 0xff0 <main+0xacc>
						fixtureMotor =  1;
						plateLoadMotor = 0;
						break;
					case M2_B:
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;
     e4e:	80 91 cc 03 	lds	r24, 0x03CC
     e52:	80 61       	ori	r24, 0x10	; 16
     e54:	80 93 cc 03 	sts	0x03CC, r24
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	2d 96       	adiw	r28, 0x0d	; 13
     e5e:	9f af       	std	Y+63, r25	; 0x3f
     e60:	8e af       	std	Y+62, r24	; 0x3e
     e62:	2d 97       	sbiw	r28, 0x0d	; 13
     e64:	c5 c0       	rjmp	.+394    	; 0xff0 <main+0xacc>
						fixtureMotor =  1;
						break;
					case M3_F:
						if(print == 0){
     e66:	61 14       	cp	r6, r1
     e68:	71 04       	cpc	r7, r1
     e6a:	39 f4       	brne	.+14     	; 0xe7a <main+0x956>
							OrangutanLCD::print("BRUSH1     FRONT");
     e6c:	83 ed       	ldi	r24, 0xD3	; 211
     e6e:	92 e0       	ldi	r25, 0x02	; 2
     e70:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     e74:	51 e0       	ldi	r21, 0x01	; 1
     e76:	65 2e       	mov	r6, r21
     e78:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;
     e7a:	80 91 cc 03 	lds	r24, 0x03CC
     e7e:	8f 77       	andi	r24, 0x7F	; 127
     e80:	80 93 cc 03 	sts	0x03CC, r24
     e84:	a1 e0       	ldi	r26, 0x01	; 1
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	2b 96       	adiw	r28, 0x0b	; 11
     e8a:	bf af       	std	Y+63, r27	; 0x3f
     e8c:	ae af       	std	Y+62, r26	; 0x3e
     e8e:	2b 97       	sbiw	r28, 0x0b	; 11
     e90:	2d 96       	adiw	r28, 0x0d	; 13
     e92:	1f ae       	std	Y+63, r1	; 0x3f
     e94:	1e ae       	std	Y+62, r1	; 0x3e
     e96:	2d 97       	sbiw	r28, 0x0d	; 13
     e98:	44 e2       	ldi	r20, 0x24	; 36
     e9a:	44 2e       	mov	r4, r20
     e9c:	51 2c       	mov	r5, r1
     e9e:	a8 c0       	rjmp	.+336    	; 0xff0 <main+0xacc>
						brush1Motor =  1;
						fixtureMotor = 0;
						break;
					case M3_B:
						u_motorByte0.bits_in_motorByte0.brush1MotorDir = 1;
     ea0:	80 91 cc 03 	lds	r24, 0x03CC
     ea4:	80 68       	ori	r24, 0x80	; 128
     ea6:	80 93 cc 03 	sts	0x03CC, r24
     eaa:	21 e0       	ldi	r18, 0x01	; 1
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	2b 96       	adiw	r28, 0x0b	; 11
     eb0:	3f af       	std	Y+63, r19	; 0x3f
     eb2:	2e af       	std	Y+62, r18	; 0x3e
     eb4:	2b 97       	sbiw	r28, 0x0b	; 11
     eb6:	9c c0       	rjmp	.+312    	; 0xff0 <main+0xacc>
						brush1Motor =  1;
						break;
					case M4_F:
						if(print == 0){
     eb8:	61 14       	cp	r6, r1
     eba:	71 04       	cpc	r7, r1
     ebc:	39 f4       	brne	.+14     	; 0xecc <main+0x9a8>
							OrangutanLCD::print("BRUSH2     FRONT");
     ebe:	84 ee       	ldi	r24, 0xE4	; 228
     ec0:	92 e0       	ldi	r25, 0x02	; 2
     ec2:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     ec6:	31 e0       	ldi	r19, 0x01	; 1
     ec8:	63 2e       	mov	r6, r19
     eca:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;
     ecc:	80 91 cd 03 	lds	r24, 0x03CD
     ed0:	8b 7f       	andi	r24, 0xFB	; 251
     ed2:	80 93 cd 03 	sts	0x03CD, r24
     ed6:	2b 96       	adiw	r28, 0x0b	; 11
     ed8:	1f ae       	std	Y+63, r1	; 0x3f
     eda:	1e ae       	std	Y+62, r1	; 0x3e
     edc:	2b 97       	sbiw	r28, 0x0b	; 11
     ede:	41 e0       	ldi	r20, 0x01	; 1
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	29 96       	adiw	r28, 0x09	; 9
     ee4:	5f af       	std	Y+63, r21	; 0x3f
     ee6:	4e af       	std	Y+62, r20	; 0x3e
     ee8:	29 97       	sbiw	r28, 0x09	; 9
     eea:	26 e2       	ldi	r18, 0x26	; 38
     eec:	42 2e       	mov	r4, r18
     eee:	51 2c       	mov	r5, r1
     ef0:	7f c0       	rjmp	.+254    	; 0xff0 <main+0xacc>
						brush2Motor =  1;
						brush1Motor = 0;
						break;
					case M4_B:
						u_motorByte1.bits_in_motorByte1.brush2MotorDir = 1;
     ef2:	80 91 cd 03 	lds	r24, 0x03CD
     ef6:	84 60       	ori	r24, 0x04	; 4
     ef8:	80 93 cd 03 	sts	0x03CD, r24
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	29 96       	adiw	r28, 0x09	; 9
     f02:	9f af       	std	Y+63, r25	; 0x3f
     f04:	8e af       	std	Y+62, r24	; 0x3e
     f06:	29 97       	sbiw	r28, 0x09	; 9
     f08:	73 c0       	rjmp	.+230    	; 0xff0 <main+0xacc>
						brush2Motor =  1;
						break;
					case M5_F:
						if(print == 0){
     f0a:	61 14       	cp	r6, r1
     f0c:	71 04       	cpc	r7, r1
     f0e:	39 f4       	brne	.+14     	; 0xf1e <main+0x9fa>
							OrangutanLCD::print("PAPER      FRONT");
     f10:	85 ef       	ldi	r24, 0xF5	; 245
     f12:	92 e0       	ldi	r25, 0x02	; 2
     f14:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	69 2e       	mov	r6, r25
     f1c:	71 2c       	mov	r7, r1
							print = 1;
						}
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
     f1e:	80 91 cd 03 	lds	r24, 0x03CD
     f22:	8f 7d       	andi	r24, 0xDF	; 223
     f24:	80 93 cd 03 	sts	0x03CD, r24
     f28:	a1 e0       	ldi	r26, 0x01	; 1
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	27 96       	adiw	r28, 0x07	; 7
     f2e:	bf af       	std	Y+63, r27	; 0x3f
     f30:	ae af       	std	Y+62, r26	; 0x3e
     f32:	27 97       	sbiw	r28, 0x07	; 7
     f34:	29 96       	adiw	r28, 0x09	; 9
     f36:	1f ae       	std	Y+63, r1	; 0x3f
     f38:	1e ae       	std	Y+62, r1	; 0x3e
     f3a:	29 97       	sbiw	r28, 0x09	; 9
     f3c:	88 e2       	ldi	r24, 0x28	; 40
     f3e:	48 2e       	mov	r4, r24
     f40:	51 2c       	mov	r5, r1
     f42:	56 c0       	rjmp	.+172    	; 0xff0 <main+0xacc>
						paperTowelMotor =  1;
						brush2Motor = 0;
						break;
					case M5_B:
						u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 1;
     f44:	80 91 cd 03 	lds	r24, 0x03CD
     f48:	80 62       	ori	r24, 0x20	; 32
     f4a:	80 93 cd 03 	sts	0x03CD, r24
     f4e:	21 e0       	ldi	r18, 0x01	; 1
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	27 96       	adiw	r28, 0x07	; 7
     f54:	3f af       	std	Y+63, r19	; 0x3f
     f56:	2e af       	std	Y+62, r18	; 0x3e
     f58:	27 97       	sbiw	r28, 0x07	; 7
     f5a:	4a c0       	rjmp	.+148    	; 0xff0 <main+0xacc>
						paperTowelMotor =  1;
						break;
					case M2_AND_M3:
						if(print == 0){
     f5c:	61 14       	cp	r6, r1
     f5e:	71 04       	cpc	r7, r1
     f60:	59 f0       	breq	.+22     	; 0xf78 <main+0xa54>
     f62:	41 e0       	ldi	r20, 0x01	; 1
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	2b 96       	adiw	r28, 0x0b	; 11
     f68:	5f af       	std	Y+63, r21	; 0x3f
     f6a:	4e af       	std	Y+62, r20	; 0x3e
     f6c:	2b 97       	sbiw	r28, 0x0b	; 11
     f6e:	2d 96       	adiw	r28, 0x0d	; 13
     f70:	5f af       	std	Y+63, r21	; 0x3f
     f72:	4e af       	std	Y+62, r20	; 0x3e
     f74:	2d 97       	sbiw	r28, 0x0d	; 13
     f76:	3c c0       	rjmp	.+120    	; 0xff0 <main+0xacc>
							OrangutanLCD::print("FIXTURE&BRUSH1");
     f78:	86 e0       	ldi	r24, 0x06	; 6
     f7a:	93 e0       	ldi	r25, 0x03	; 3
     f7c:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	2b 96       	adiw	r28, 0x0b	; 11
     f86:	9f af       	std	Y+63, r25	; 0x3f
     f88:	8e af       	std	Y+62, r24	; 0x3e
     f8a:	2b 97       	sbiw	r28, 0x0b	; 11
     f8c:	2d 96       	adiw	r28, 0x0d	; 13
     f8e:	9f af       	std	Y+63, r25	; 0x3f
     f90:	8e af       	std	Y+62, r24	; 0x3e
     f92:	2d 97       	sbiw	r28, 0x0d	; 13
     f94:	01 e0       	ldi	r16, 0x01	; 1
     f96:	60 2e       	mov	r6, r16
     f98:	71 2c       	mov	r7, r1
     f9a:	2a c0       	rjmp	.+84     	; 0xff0 <main+0xacc>
						}
						fixtureMotor = 1;
						brush1Motor = 1;
						break;
					case M2_AND_M4:
						if(print == 0){
     f9c:	61 14       	cp	r6, r1
     f9e:	71 04       	cpc	r7, r1
     fa0:	79 f0       	breq	.+30     	; 0xfc0 <main+0xa9c>
     fa2:	2b 96       	adiw	r28, 0x0b	; 11
     fa4:	1f ae       	std	Y+63, r1	; 0x3f
     fa6:	1e ae       	std	Y+62, r1	; 0x3e
     fa8:	2b 97       	sbiw	r28, 0x0b	; 11
     faa:	a1 e0       	ldi	r26, 0x01	; 1
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	29 96       	adiw	r28, 0x09	; 9
     fb0:	bf af       	std	Y+63, r27	; 0x3f
     fb2:	ae af       	std	Y+62, r26	; 0x3e
     fb4:	29 97       	sbiw	r28, 0x09	; 9
     fb6:	2d 96       	adiw	r28, 0x0d	; 13
     fb8:	bf af       	std	Y+63, r27	; 0x3f
     fba:	ae af       	std	Y+62, r26	; 0x3e
     fbc:	2d 97       	sbiw	r28, 0x0d	; 13
     fbe:	18 c0       	rjmp	.+48     	; 0xff0 <main+0xacc>
							OrangutanLCD::print("FIXTURE&BRUSH2");
     fc0:	85 e1       	ldi	r24, 0x15	; 21
     fc2:	93 e0       	ldi	r25, 0x03	; 3
     fc4:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
     fc8:	2b 96       	adiw	r28, 0x0b	; 11
     fca:	1f ae       	std	Y+63, r1	; 0x3f
     fcc:	1e ae       	std	Y+62, r1	; 0x3e
     fce:	2b 97       	sbiw	r28, 0x0b	; 11
     fd0:	21 e0       	ldi	r18, 0x01	; 1
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	29 96       	adiw	r28, 0x09	; 9
     fd6:	3f af       	std	Y+63, r19	; 0x3f
     fd8:	2e af       	std	Y+62, r18	; 0x3e
     fda:	29 97       	sbiw	r28, 0x09	; 9
     fdc:	2d 96       	adiw	r28, 0x0d	; 13
     fde:	3f af       	std	Y+63, r19	; 0x3f
     fe0:	2e af       	std	Y+62, r18	; 0x3e
     fe2:	2d 97       	sbiw	r28, 0x0d	; 13
     fe4:	11 e0       	ldi	r17, 0x01	; 1
     fe6:	61 2e       	mov	r6, r17
     fe8:	71 2c       	mov	r7, r1
     fea:	bb e2       	ldi	r27, 0x2B	; 43
     fec:	4b 2e       	mov	r4, r27
     fee:	51 2c       	mov	r5, r1
						break;
				        }
			
  
				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
     ff0:	4d b7       	in	r20, 0x3d	; 61
     ff2:	5e b7       	in	r21, 0x3e	; 62
     ff4:	42 51       	subi	r20, 0x12	; 18
     ff6:	50 40       	sbci	r21, 0x00	; 0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	5e bf       	out	0x3e, r21	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	4d bf       	out	0x3d, r20	; 61
    1002:	ed b7       	in	r30, 0x3d	; 61
    1004:	fe b7       	in	r31, 0x3e	; 62
    1006:	31 96       	adiw	r30, 0x01	; 1
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	ad b7       	in	r26, 0x3d	; 61
    100e:	be b7       	in	r27, 0x3e	; 62
    1010:	12 96       	adiw	r26, 0x02	; 2
    1012:	9c 93       	st	X, r25
    1014:	8e 93       	st	-X, r24
    1016:	11 97       	sbiw	r26, 0x01	; 1
    1018:	93 83       	std	Z+3, r25	; 0x03
    101a:	82 83       	std	Z+2, r24	; 0x02
    101c:	95 83       	std	Z+5, r25	; 0x05
    101e:	84 83       	std	Z+4, r24	; 0x04
    1020:	97 83       	std	Z+7, r25	; 0x07
    1022:	86 83       	std	Z+6, r24	; 0x06
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	91 87       	std	Z+9, r25	; 0x09
    102a:	80 87       	std	Z+8, r24	; 0x08
    102c:	93 87       	std	Z+11, r25	; 0x0b
    102e:	82 87       	std	Z+10, r24	; 0x0a
    1030:	95 87       	std	Z+13, r25	; 0x0d
    1032:	84 87       	std	Z+12, r24	; 0x0c
    1034:	97 87       	std	Z+15, r25	; 0x0f
    1036:	86 87       	std	Z+14, r24	; 0x0e
    1038:	91 8b       	std	Z+17, r25	; 0x11
    103a:	80 8b       	std	Z+16, r24	; 0x10
    103c:	c1 01       	movw	r24, r2
    103e:	6f 89       	ldd	r22, Y+23	; 0x17
    1040:	78 8d       	ldd	r23, Y+24	; 0x18
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	2f 96       	adiw	r28, 0x0f	; 15
    1048:	2e ad       	ldd	r18, Y+62	; 0x3e
    104a:	3f ad       	ldd	r19, Y+63	; 0x3f
    104c:	2f 97       	sbiw	r28, 0x0f	; 15
    104e:	2d 96       	adiw	r28, 0x0d	; 13
    1050:	0e ad       	ldd	r16, Y+62	; 0x3e
    1052:	1f ad       	ldd	r17, Y+63	; 0x3f
    1054:	2d 97       	sbiw	r28, 0x0d	; 13
    1056:	2b 96       	adiw	r28, 0x0b	; 11
    1058:	ee ac       	ldd	r14, Y+62	; 0x3e
    105a:	ff ac       	ldd	r15, Y+63	; 0x3f
    105c:	2b 97       	sbiw	r28, 0x0b	; 11
    105e:	29 96       	adiw	r28, 0x09	; 9
    1060:	ce ac       	ldd	r12, Y+62	; 0x3e
    1062:	df ac       	ldd	r13, Y+63	; 0x3f
    1064:	29 97       	sbiw	r28, 0x09	; 9
    1066:	27 96       	adiw	r28, 0x07	; 7
    1068:	ae ac       	ldd	r10, Y+62	; 0x3e
    106a:	bf ac       	ldd	r11, Y+63	; 0x3f
    106c:	27 97       	sbiw	r28, 0x07	; 7
    106e:	a2 e0       	ldi	r26, 0x02	; 2
    1070:	8a 2e       	mov	r8, r26
    1072:	91 2c       	mov	r9, r1
    1074:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    1078:	2d b7       	in	r18, 0x3d	; 61
    107a:	3e b7       	in	r19, 0x3e	; 62
    107c:	2e 5e       	subi	r18, 0xEE	; 238
    107e:	3f 4f       	sbci	r19, 0xFF	; 255
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	3e bf       	out	0x3e, r19	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	2d bf       	out	0x3d, r18	; 61
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
			counter = 0;
			OrangutanLCD::clear();
			

			//Repeats entire maintenance mode cycle until it's finished
			while(state != DONEM){
    1092:	3c e2       	ldi	r19, 0x2C	; 44
    1094:	43 16       	cp	r4, r19
    1096:	51 04       	cpc	r5, r1
    1098:	11 f4       	brne	.+4      	; 0x109e <main+0xb7a>
    109a:	0c 94 e5 18 	jmp	0x31ca	; 0x31ca <main+0x2ca6>
			
  
				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    109e:	08 94       	sec
    10a0:	21 1c       	adc	r2, r1
    10a2:	31 1c       	adc	r3, r1
    10a4:	67 cb       	rjmp	.-2354   	; 0x774 <main+0x250>
				delay_ms(1);
			}
		}
		else{										//If switch is set to Run Mode
		
		OrangutanLCD::print("NORMAL");
    10a6:	84 e2       	ldi	r24, 0x24	; 36
    10a8:	93 e0       	ldi	r25, 0x03	; 3
    10aa:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
    10ae:	88 ee       	ldi	r24, 0xE8	; 232
    10b0:	93 e0       	ldi	r25, 0x03	; 3
    10b2:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
    10b6:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("SELECT CYCLE");
    10ba:	8b e2       	ldi	r24, 0x2B	; 43
    10bc:	93 e0       	ldi	r25, 0x03	; 3
    10be:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
    10c2:	ee 24       	eor	r14, r14
    10c4:	ff 24       	eor	r15, r15
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
			buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    10c6:	c7 01       	movw	r24, r14
    10c8:	be 01       	movw	r22, r28
    10ca:	6f 5f       	subi	r22, 0xFF	; 255
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>
    10d2:	18 2f       	mov	r17, r24
			counter++;
    10d4:	08 94       	sec
    10d6:	e1 1c       	adc	r14, r1
    10d8:	f1 1c       	adc	r15, r1
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
		delay_ms(1000);
		
		OrangutanLCD::clear();
		OrangutanLCD::print("SELECT CYCLE");
		//Repeats until user presses and releases button - waiting for user to select a mode
		while(!buttonTriggered){
    10e2:	11 23       	and	r17, r17
    10e4:	81 f3       	breq	.-32     	; 0x10c6 <main+0xba2>
			counter++;
			delay_ms(1);
		}
		buttonTriggered = false;
		counter = 0;
		OrangutanLCD::clear();
    10e6:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
		OrangutanLCD::print("CYCLE:");
    10ea:	88 e3       	ldi	r24, 0x38	; 56
    10ec:	93 e0       	ldi	r25, 0x03	; 3
    10ee:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>

		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    10f2:	80 91 cc 03 	lds	r24, 0x03CC
    10f6:	80 62       	ori	r24, 0x20	; 32
    10f8:	80 93 cc 03 	sts	0x03CC, r24

		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    1102:	88 23       	and	r24, r24
    1104:	11 f0       	breq	.+4      	; 0x110a <main+0xbe6>
    1106:	0c 94 0e 19 	jmp	0x321c	; 0x321c <main+0x2cf8>
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    1110:	88 23       	and	r24, r24
    1112:	11 f0       	breq	.+4      	; 0x1118 <main+0xbf4>
    1114:	0c 94 0e 19 	jmp	0x321c	; 0x321c <main+0x2cf8>
			OrangutanLCD::gotoXY(7,0);
    1118:	87 e0       	ldi	r24, 0x07	; 7
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("FIRST B");
    1120:	8f e3       	ldi	r24, 0x3F	; 63
    1122:	93 e0       	ldi	r25, 0x03	; 3
    1124:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
			OrangutanLCD::print("DEBUG");
    1128:	8d e5       	ldi	r24, 0x5D	; 93
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1130:	80 91 cc 03 	lds	r24, 0x03CC
    1134:	80 62       	ori	r24, 0x20	; 32
    1136:	80 93 cc 03 	sts	0x03CC, r24
    113a:	1a ae       	std	Y+58, r1	; 0x3a
    113c:	19 ae       	std	Y+57, r1	; 0x39
    113e:	66 24       	eor	r6, r6
    1140:	77 24       	eor	r7, r7
    1142:	1e 82       	std	Y+6, r1	; 0x06
    1144:	1d 82       	std	Y+5, r1	; 0x05
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	21 96       	adiw	r28, 0x01	; 1
    114c:	5f af       	std	Y+63, r21	; 0x3f
    114e:	4e af       	std	Y+62, r20	; 0x3e
    1150:	21 97       	sbiw	r28, 0x01	; 1
    1152:	1c a6       	std	Y+44, r1	; 0x2c
    1154:	1b a6       	std	Y+43, r1	; 0x2b
    1156:	1c a2       	std	Y+36, r1	; 0x24
    1158:	1b a2       	std	Y+35, r1	; 0x23
    115a:	22 24       	eor	r2, r2
    115c:	33 24       	eor	r3, r3
    115e:	5e 8b       	std	Y+22, r21	; 0x16
    1160:	4d 8b       	std	Y+21, r20	; 0x15
    1162:	44 24       	eor	r4, r4
    1164:	55 24       	eor	r5, r5
    1166:	5e af       	std	Y+62, r21	; 0x3e
    1168:	4d af       	std	Y+61, r20	; 0x3d
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    116a:	84 e4       	ldi	r24, 0x44	; 68
    116c:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    1176:	85 e4       	ldi	r24, 0x45	; 69
    1178:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    117c:	0e 94 a8 19 	call	0x3350	; 0x3350 <_Z11i2c_readAckv>
    1180:	80 93 d0 03 	sts	0x03D0, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    1184:	0e 94 b2 19 	call	0x3364	; 0x3364 <_Z11i2c_readNakv>
    1188:	80 93 d1 03 	sts	0x03D1, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    118c:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>
				
				if(state != INIT){
    1190:	61 14       	cp	r6, r1
    1192:	71 04       	cpc	r7, r1
    1194:	79 f0       	breq	.+30     	; 0x11b4 <main+0xc90>
					OrangutanLCD::gotoXY(0,1);
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    119e:	87 e4       	ldi	r24, 0x47	; 71
    11a0:	93 e0       	ldi	r25, 0x03	; 3
    11a2:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
	};
	static inline void print(int value)
	{
		print((long)value);
    11a6:	b3 01       	movw	r22, r6
    11a8:	88 27       	eor	r24, r24
    11aa:	77 fd       	sbrc	r23, 7
    11ac:	80 95       	com	r24
    11ae:	98 2f       	mov	r25, r24
    11b0:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <_ZN12OrangutanLCD5printEl>
					OrangutanLCD::print(state);
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    11b4:	c2 01       	movw	r24, r4
    11b6:	be 01       	movw	r22, r28
    11b8:	6f 5f       	subi	r22, 0xFF	; 255
    11ba:	7f 4f       	sbci	r23, 0xFF	; 255
    11bc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    11c0:	61 14       	cp	r6, r1
    11c2:	71 04       	cpc	r7, r1
    11c4:	29 f4       	brne	.+10     	; 0x11d0 <main+0xcac>
    11c6:	88 23       	and	r24, r24
    11c8:	09 f4       	brne	.+2      	; 0x11cc <main+0xca8>
    11ca:	43 c0       	rjmp	.+134    	; 0x1252 <main+0xd2e>
    11cc:	12 01       	movw	r2, r4
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <main+0xcb4>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    11d0:	51 e0       	ldi	r21, 0x01	; 1
    11d2:	65 16       	cp	r6, r21
    11d4:	71 04       	cpc	r7, r1
    11d6:	49 f4       	brne	.+18     	; 0x11ea <main+0xcc6>
    11d8:	c2 01       	movw	r24, r4
    11da:	82 19       	sub	r24, r2
    11dc:	93 09       	sbc	r25, r3
    11de:	81 5a       	subi	r24, 0xA1	; 161
    11e0:	9f 40       	sbci	r25, 0x0F	; 15
    11e2:	0c f4       	brge	.+2      	; 0x11e6 <main+0xcc2>
    11e4:	43 c0       	rjmp	.+134    	; 0x126c <main+0xd48>
    11e6:	12 01       	movw	r2, r4
    11e8:	04 c0       	rjmp	.+8      	; 0x11f2 <main+0xcce>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    11ea:	b2 e0       	ldi	r27, 0x02	; 2
    11ec:	6b 16       	cp	r6, r27
    11ee:	71 04       	cpc	r7, r1
    11f0:	49 f4       	brne	.+18     	; 0x1204 <main+0xce0>
    11f2:	c2 01       	movw	r24, r4
    11f4:	82 19       	sub	r24, r2
    11f6:	93 09       	sbc	r25, r3
    11f8:	85 36       	cpi	r24, 0x65	; 101
    11fa:	91 05       	cpc	r25, r1
    11fc:	0c f4       	brge	.+2      	; 0x1200 <main+0xcdc>
    11fe:	46 c0       	rjmp	.+140    	; 0x128c <main+0xd68>
    1200:	12 01       	movw	r2, r4
    1202:	04 c0       	rjmp	.+8      	; 0x120c <main+0xce8>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1204:	23 e0       	ldi	r18, 0x03	; 3
    1206:	62 16       	cp	r6, r18
    1208:	71 04       	cpc	r7, r1
    120a:	49 f4       	brne	.+18     	; 0x121e <main+0xcfa>
    120c:	c2 01       	movw	r24, r4
    120e:	82 19       	sub	r24, r2
    1210:	93 09       	sbc	r25, r3
    1212:	81 5a       	subi	r24, 0xA1	; 161
    1214:	9f 40       	sbci	r25, 0x0F	; 15
    1216:	0c f4       	brge	.+2      	; 0x121a <main+0xcf6>
    1218:	49 c0       	rjmp	.+146    	; 0x12ac <main+0xd88>
    121a:	12 01       	movw	r2, r4
    121c:	04 c0       	rjmp	.+8      	; 0x1226 <main+0xd02>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    121e:	44 e0       	ldi	r20, 0x04	; 4
    1220:	64 16       	cp	r6, r20
    1222:	71 04       	cpc	r7, r1
    1224:	49 f4       	brne	.+18     	; 0x1238 <main+0xd14>
    1226:	c2 01       	movw	r24, r4
    1228:	82 19       	sub	r24, r2
    122a:	93 09       	sbc	r25, r3
    122c:	89 5e       	subi	r24, 0xE9	; 233
    122e:	93 40       	sbci	r25, 0x03	; 3
    1230:	0c f4       	brge	.+2      	; 0x1234 <main+0xd10>
    1232:	4c c0       	rjmp	.+152    	; 0x12cc <main+0xda8>
    1234:	12 01       	movw	r2, r4
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <main+0xd1c>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    1238:	85 e0       	ldi	r24, 0x05	; 5
    123a:	68 16       	cp	r6, r24
    123c:	71 04       	cpc	r7, r1
    123e:	49 f4       	brne	.+18     	; 0x1252 <main+0xd2e>
    1240:	c2 01       	movw	r24, r4
    1242:	82 19       	sub	r24, r2
    1244:	93 09       	sbc	r25, r3
    1246:	85 36       	cpi	r24, 0x65	; 101
    1248:	91 05       	cpc	r25, r1
    124a:	0c f4       	brge	.+2      	; 0x124e <main+0xd2a>
    124c:	4d c0       	rjmp	.+154    	; 0x12e8 <main+0xdc4>
    124e:	12 01       	movw	r2, r4
    1250:	04 c0       	rjmp	.+8      	; 0x125a <main+0xd36>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    1252:	96 e0       	ldi	r25, 0x06	; 6
    1254:	69 16       	cp	r6, r25
    1256:	71 04       	cpc	r7, r1
    1258:	61 f4       	brne	.+24     	; 0x1272 <main+0xd4e>
    125a:	c2 01       	movw	r24, r4
    125c:	82 19       	sub	r24, r2
    125e:	93 09       	sbc	r25, r3
    1260:	81 5a       	subi	r24, 0xA1	; 161
    1262:	9f 40       	sbci	r25, 0x0F	; 15
    1264:	0c f4       	brge	.+2      	; 0x1268 <main+0xd44>
    1266:	50 c0       	rjmp	.+160    	; 0x1308 <main+0xde4>
    1268:	12 01       	movw	r2, r4
    126a:	07 c0       	rjmp	.+14     	; 0x127a <main+0xd56>
    126c:	f1 e0       	ldi	r31, 0x01	; 1
    126e:	6f 2e       	mov	r6, r31
    1270:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    1272:	b7 e0       	ldi	r27, 0x07	; 7
    1274:	6b 16       	cp	r6, r27
    1276:	71 04       	cpc	r7, r1
    1278:	61 f4       	brne	.+24     	; 0x1292 <main+0xd6e>
    127a:	c2 01       	movw	r24, r4
    127c:	82 19       	sub	r24, r2
    127e:	93 09       	sbc	r25, r3
    1280:	85 36       	cpi	r24, 0x65	; 101
    1282:	91 05       	cpc	r25, r1
    1284:	0c f4       	brge	.+2      	; 0x1288 <main+0xd64>
    1286:	50 c0       	rjmp	.+160    	; 0x1328 <main+0xe04>
    1288:	12 01       	movw	r2, r4
    128a:	07 c0       	rjmp	.+14     	; 0x129a <main+0xd76>
    128c:	e2 e0       	ldi	r30, 0x02	; 2
    128e:	6e 2e       	mov	r6, r30
    1290:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    1292:	28 e0       	ldi	r18, 0x08	; 8
    1294:	62 16       	cp	r6, r18
    1296:	71 04       	cpc	r7, r1
    1298:	61 f4       	brne	.+24     	; 0x12b2 <main+0xd8e>
    129a:	c2 01       	movw	r24, r4
    129c:	82 19       	sub	r24, r2
    129e:	93 09       	sbc	r25, r3
    12a0:	85 36       	cpi	r24, 0x65	; 101
    12a2:	91 05       	cpc	r25, r1
    12a4:	0c f4       	brge	.+2      	; 0x12a8 <main+0xd84>
    12a6:	4e c0       	rjmp	.+156    	; 0x1344 <main+0xe20>
    12a8:	12 01       	movw	r2, r4
    12aa:	07 c0       	rjmp	.+14     	; 0x12ba <main+0xd96>
    12ac:	73 e0       	ldi	r23, 0x03	; 3
    12ae:	67 2e       	mov	r6, r23
    12b0:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    12b2:	39 e0       	ldi	r19, 0x09	; 9
    12b4:	63 16       	cp	r6, r19
    12b6:	71 04       	cpc	r7, r1
    12b8:	61 f4       	brne	.+24     	; 0x12d2 <main+0xdae>
    12ba:	c2 01       	movw	r24, r4
    12bc:	82 19       	sub	r24, r2
    12be:	93 09       	sbc	r25, r3
    12c0:	81 5d       	subi	r24, 0xD1	; 209
    12c2:	97 40       	sbci	r25, 0x07	; 7
    12c4:	0c f4       	brge	.+2      	; 0x12c8 <main+0xda4>
    12c6:	4e c0       	rjmp	.+156    	; 0x1364 <main+0xe40>
    12c8:	12 01       	movw	r2, r4
    12ca:	07 c0       	rjmp	.+14     	; 0x12da <main+0xdb6>
    12cc:	64 e0       	ldi	r22, 0x04	; 4
    12ce:	66 2e       	mov	r6, r22
    12d0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    12d2:	5a e0       	ldi	r21, 0x0A	; 10
    12d4:	65 16       	cp	r6, r21
    12d6:	71 04       	cpc	r7, r1
    12d8:	51 f4       	brne	.+20     	; 0x12ee <main+0xdca>
    12da:	c2 01       	movw	r24, r4
    12dc:	82 19       	sub	r24, r2
    12de:	93 09       	sbc	r25, r3
    12e0:	85 36       	cpi	r24, 0x65	; 101
    12e2:	91 05       	cpc	r25, r1
    12e4:	44 f4       	brge	.+16     	; 0x12f6 <main+0xdd2>
    12e6:	4e c0       	rjmp	.+156    	; 0x1384 <main+0xe60>
    12e8:	55 e0       	ldi	r21, 0x05	; 5
    12ea:	65 2e       	mov	r6, r21
    12ec:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    12ee:	8b e0       	ldi	r24, 0x0B	; 11
    12f0:	68 16       	cp	r6, r24
    12f2:	71 04       	cpc	r7, r1
    12f4:	61 f4       	brne	.+24     	; 0x130e <main+0xdea>
    12f6:	c2 01       	movw	r24, r4
    12f8:	82 19       	sub	r24, r2
    12fa:	93 09       	sbc	r25, r3
    12fc:	81 5d       	subi	r24, 0xD1	; 209
    12fe:	97 40       	sbci	r25, 0x07	; 7
    1300:	0c f4       	brge	.+2      	; 0x1304 <main+0xde0>
    1302:	50 c0       	rjmp	.+160    	; 0x13a4 <main+0xe80>
    1304:	12 01       	movw	r2, r4
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <main+0xdf2>
    1308:	46 e0       	ldi	r20, 0x06	; 6
    130a:	64 2e       	mov	r6, r20
    130c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    130e:	bc e0       	ldi	r27, 0x0C	; 12
    1310:	6b 16       	cp	r6, r27
    1312:	71 04       	cpc	r7, r1
    1314:	61 f4       	brne	.+24     	; 0x132e <main+0xe0a>
    1316:	c2 01       	movw	r24, r4
    1318:	82 19       	sub	r24, r2
    131a:	93 09       	sbc	r25, r3
    131c:	85 36       	cpi	r24, 0x65	; 101
    131e:	91 05       	cpc	r25, r1
    1320:	0c f4       	brge	.+2      	; 0x1324 <main+0xe00>
    1322:	4e c0       	rjmp	.+156    	; 0x13c0 <main+0xe9c>
    1324:	12 01       	movw	r2, r4
    1326:	07 c0       	rjmp	.+14     	; 0x1336 <main+0xe12>
    1328:	37 e0       	ldi	r19, 0x07	; 7
    132a:	63 2e       	mov	r6, r19
    132c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    132e:	2d e0       	ldi	r18, 0x0D	; 13
    1330:	62 16       	cp	r6, r18
    1332:	71 04       	cpc	r7, r1
    1334:	51 f4       	brne	.+20     	; 0x134a <main+0xe26>
    1336:	c2 01       	movw	r24, r4
    1338:	82 19       	sub	r24, r2
    133a:	93 09       	sbc	r25, r3
    133c:	81 5d       	subi	r24, 0xD1	; 209
    133e:	97 40       	sbci	r25, 0x07	; 7
    1340:	44 f4       	brge	.+16     	; 0x1352 <main+0xe2e>
    1342:	4f c0       	rjmp	.+158    	; 0x13e2 <main+0xebe>
    1344:	28 e0       	ldi	r18, 0x08	; 8
    1346:	62 2e       	mov	r6, r18
    1348:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
					}
				if(state == B1STOP2 && counter - counterRef > pWait){
    134a:	4e e0       	ldi	r20, 0x0E	; 14
    134c:	64 16       	cp	r6, r20
    134e:	71 04       	cpc	r7, r1
    1350:	61 f4       	brne	.+24     	; 0x136a <main+0xe46>
    1352:	c2 01       	movw	r24, r4
    1354:	82 19       	sub	r24, r2
    1356:	93 09       	sbc	r25, r3
    1358:	85 36       	cpi	r24, 0x65	; 101
    135a:	91 05       	cpc	r25, r1
    135c:	0c f4       	brge	.+2      	; 0x1360 <main+0xe3c>
    135e:	53 c0       	rjmp	.+166    	; 0x1406 <main+0xee2>
    1360:	12 01       	movw	r2, r4
    1362:	07 c0       	rjmp	.+14     	; 0x1372 <main+0xe4e>
    1364:	99 e0       	ldi	r25, 0x09	; 9
    1366:	69 2e       	mov	r6, r25
    1368:	71 2c       	mov	r7, r1
					state = 23;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    136a:	57 e1       	ldi	r21, 0x17	; 23
    136c:	65 16       	cp	r6, r21
    136e:	71 04       	cpc	r7, r1
    1370:	61 f4       	brne	.+24     	; 0x138a <main+0xe66>
    1372:	c2 01       	movw	r24, r4
    1374:	82 19       	sub	r24, r2
    1376:	93 09       	sbc	r25, r3
    1378:	81 5a       	subi	r24, 0xA1	; 161
    137a:	9f 40       	sbci	r25, 0x0F	; 15
    137c:	0c f4       	brge	.+2      	; 0x1380 <main+0xe5c>
    137e:	53 c0       	rjmp	.+166    	; 0x1426 <main+0xf02>
    1380:	12 01       	movw	r2, r4
    1382:	07 c0       	rjmp	.+14     	; 0x1392 <main+0xe6e>
    1384:	8a e0       	ldi	r24, 0x0A	; 10
    1386:	68 2e       	mov	r6, r24
    1388:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    138a:	b8 e1       	ldi	r27, 0x18	; 24
    138c:	6b 16       	cp	r6, r27
    138e:	71 04       	cpc	r7, r1
    1390:	61 f4       	brne	.+24     	; 0x13aa <main+0xe86>
    1392:	c2 01       	movw	r24, r4
    1394:	82 19       	sub	r24, r2
    1396:	93 09       	sbc	r25, r3
    1398:	85 36       	cpi	r24, 0x65	; 101
    139a:	91 05       	cpc	r25, r1
    139c:	0c f4       	brge	.+2      	; 0x13a0 <main+0xe7c>
    139e:	51 c0       	rjmp	.+162    	; 0x1442 <main+0xf1e>
    13a0:	12 01       	movw	r2, r4
    13a2:	07 c0       	rjmp	.+14     	; 0x13b2 <main+0xe8e>
    13a4:	0b e0       	ldi	r16, 0x0B	; 11
    13a6:	60 2e       	mov	r6, r16
    13a8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    13aa:	29 e1       	ldi	r18, 0x19	; 25
    13ac:	62 16       	cp	r6, r18
    13ae:	71 04       	cpc	r7, r1
    13b0:	51 f4       	brne	.+20     	; 0x13c6 <main+0xea2>
    13b2:	c2 01       	movw	r24, r4
    13b4:	82 19       	sub	r24, r2
    13b6:	93 09       	sbc	r25, r3
    13b8:	81 5a       	subi	r24, 0xA1	; 161
    13ba:	9f 40       	sbci	r25, 0x0F	; 15
    13bc:	44 f4       	brge	.+16     	; 0x13ce <main+0xeaa>
    13be:	51 c0       	rjmp	.+162    	; 0x1462 <main+0xf3e>
    13c0:	1c e0       	ldi	r17, 0x0C	; 12
    13c2:	61 2e       	mov	r6, r17
    13c4:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    13c6:	4a e1       	ldi	r20, 0x1A	; 26
    13c8:	64 16       	cp	r6, r20
    13ca:	71 04       	cpc	r7, r1
    13cc:	69 f4       	brne	.+26     	; 0x13e8 <main+0xec4>
    13ce:	c2 01       	movw	r24, r4
    13d0:	82 19       	sub	r24, r2
    13d2:	93 09       	sbc	r25, r3
    13d4:	81 5a       	subi	r24, 0xA1	; 161
    13d6:	9f 40       	sbci	r25, 0x0F	; 15
    13d8:	0c f4       	brge	.+2      	; 0x13dc <main+0xeb8>
    13da:	53 c0       	rjmp	.+166    	; 0x1482 <main+0xf5e>
    13dc:	5e 82       	std	Y+6, r5	; 0x06
    13de:	4d 82       	std	Y+5, r4	; 0x05
    13e0:	07 c0       	rjmp	.+14     	; 0x13f0 <main+0xecc>
    13e2:	bd e0       	ldi	r27, 0x0D	; 13
    13e4:	6b 2e       	mov	r6, r27
    13e6:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    13e8:	8b e1       	ldi	r24, 0x1B	; 27
    13ea:	68 16       	cp	r6, r24
    13ec:	71 04       	cpc	r7, r1
    13ee:	71 f4       	brne	.+28     	; 0x140c <main+0xee8>
    13f0:	c2 01       	movw	r24, r4
    13f2:	ad 81       	ldd	r26, Y+5	; 0x05
    13f4:	be 81       	ldd	r27, Y+6	; 0x06
    13f6:	8a 1b       	sub	r24, r26
    13f8:	9b 0b       	sbc	r25, r27
    13fa:	85 36       	cpi	r24, 0x65	; 101
    13fc:	91 05       	cpc	r25, r1
    13fe:	0c f4       	brge	.+2      	; 0x1402 <main+0xede>
    1400:	50 c0       	rjmp	.+160    	; 0x14a2 <main+0xf7e>
    1402:	12 01       	movw	r2, r4
    1404:	07 c0       	rjmp	.+14     	; 0x1414 <main+0xef0>
    1406:	ae e0       	ldi	r26, 0x0E	; 14
    1408:	6a 2e       	mov	r6, r26
    140a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    140c:	bc e1       	ldi	r27, 0x1C	; 28
    140e:	6b 16       	cp	r6, r27
    1410:	71 04       	cpc	r7, r1
    1412:	61 f4       	brne	.+24     	; 0x142c <main+0xf08>
    1414:	c2 01       	movw	r24, r4
    1416:	82 19       	sub	r24, r2
    1418:	93 09       	sbc	r25, r3
    141a:	85 36       	cpi	r24, 0x65	; 101
    141c:	91 05       	cpc	r25, r1
    141e:	0c f4       	brge	.+2      	; 0x1422 <main+0xefe>
    1420:	50 c0       	rjmp	.+160    	; 0x14c2 <main+0xf9e>
    1422:	12 01       	movw	r2, r4
    1424:	07 c0       	rjmp	.+14     	; 0x1434 <main+0xf10>
    1426:	f7 e1       	ldi	r31, 0x17	; 23
    1428:	6f 2e       	mov	r6, r31
    142a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    142c:	2d e1       	ldi	r18, 0x1D	; 29
    142e:	62 16       	cp	r6, r18
    1430:	71 04       	cpc	r7, r1
    1432:	51 f4       	brne	.+20     	; 0x1448 <main+0xf24>
    1434:	c2 01       	movw	r24, r4
    1436:	82 19       	sub	r24, r2
    1438:	93 09       	sbc	r25, r3
    143a:	81 5a       	subi	r24, 0xA1	; 161
    143c:	9f 40       	sbci	r25, 0x0F	; 15
    143e:	44 f4       	brge	.+16     	; 0x1450 <main+0xf2c>
    1440:	50 c0       	rjmp	.+160    	; 0x14e2 <main+0xfbe>
    1442:	e8 e1       	ldi	r30, 0x18	; 24
    1444:	6e 2e       	mov	r6, r30
    1446:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && counter - counterRef > totalStepLength2*fixtureMotorLoadBack /*&& u_inputByte0.bits_in_inputByte0.fixturePlate == 0*/){
    1448:	4e e1       	ldi	r20, 0x1E	; 30
    144a:	64 16       	cp	r6, r20
    144c:	71 04       	cpc	r7, r1
    144e:	61 f4       	brne	.+24     	; 0x1468 <main+0xf44>
    1450:	c2 01       	movw	r24, r4
    1452:	82 19       	sub	r24, r2
    1454:	93 09       	sbc	r25, r3
    1456:	81 5a       	subi	r24, 0xA1	; 161
    1458:	9f 40       	sbci	r25, 0x0F	; 15
    145a:	0c f4       	brge	.+2      	; 0x145e <main+0xf3a>
    145c:	53 c0       	rjmp	.+166    	; 0x1504 <main+0xfe0>
    145e:	12 01       	movw	r2, r4
    1460:	07 c0       	rjmp	.+14     	; 0x1470 <main+0xf4c>
    1462:	79 e1       	ldi	r23, 0x19	; 25
    1464:	67 2e       	mov	r6, r23
    1466:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    1468:	8f e1       	ldi	r24, 0x1F	; 31
    146a:	68 16       	cp	r6, r24
    146c:	71 04       	cpc	r7, r1
    146e:	61 f4       	brne	.+24     	; 0x1488 <main+0xf64>
    1470:	c2 01       	movw	r24, r4
    1472:	82 19       	sub	r24, r2
    1474:	93 09       	sbc	r25, r3
    1476:	89 5e       	subi	r24, 0xE9	; 233
    1478:	93 40       	sbci	r25, 0x03	; 3
    147a:	0c f4       	brge	.+2      	; 0x147e <main+0xf5a>
    147c:	57 c1       	rjmp	.+686    	; 0x172c <main+0x1208>
    147e:	12 01       	movw	r2, r4
    1480:	07 c0       	rjmp	.+14     	; 0x1490 <main+0xf6c>
    1482:	6a e1       	ldi	r22, 0x1A	; 26
    1484:	66 2e       	mov	r6, r22
    1486:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && counter - counterRef > totalStepLength2*fixtureMotorHomeFix /*&& u_inputByte0.bits_in_inputByte0.fixtureHome == 0*/){
    1488:	b0 e2       	ldi	r27, 0x20	; 32
    148a:	6b 16       	cp	r6, r27
    148c:	71 04       	cpc	r7, r1
    148e:	61 f4       	brne	.+24     	; 0x14a8 <main+0xf84>
    1490:	c2 01       	movw	r24, r4
    1492:	82 19       	sub	r24, r2
    1494:	93 09       	sbc	r25, r3
    1496:	81 5a       	subi	r24, 0xA1	; 161
    1498:	9f 40       	sbci	r25, 0x0F	; 15
    149a:	0c f4       	brge	.+2      	; 0x149e <main+0xf7a>
    149c:	53 c1       	rjmp	.+678    	; 0x1744 <main+0x1220>
    149e:	12 01       	movw	r2, r4
    14a0:	07 c0       	rjmp	.+14     	; 0x14b0 <main+0xf8c>
    14a2:	5b e1       	ldi	r21, 0x1B	; 27
    14a4:	65 2e       	mov	r6, r21
    14a6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    14a8:	31 e2       	ldi	r19, 0x21	; 33
    14aa:	63 16       	cp	r6, r19
    14ac:	71 04       	cpc	r7, r1
    14ae:	61 f4       	brne	.+24     	; 0x14c8 <main+0xfa4>
    14b0:	c2 01       	movw	r24, r4
    14b2:	82 19       	sub	r24, r2
    14b4:	93 09       	sbc	r25, r3
    14b6:	85 36       	cpi	r24, 0x65	; 101
    14b8:	91 05       	cpc	r25, r1
    14ba:	0c f4       	brge	.+2      	; 0x14be <main+0xf9a>
    14bc:	51 c1       	rjmp	.+674    	; 0x1760 <main+0x123c>
    14be:	12 01       	movw	r2, r4
    14c0:	07 c0       	rjmp	.+14     	; 0x14d0 <main+0xfac>
    14c2:	4c e1       	ldi	r20, 0x1C	; 28
    14c4:	64 2e       	mov	r6, r20
    14c6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    14c8:	42 e2       	ldi	r20, 0x22	; 34
    14ca:	64 16       	cp	r6, r20
    14cc:	71 04       	cpc	r7, r1
    14ce:	61 f4       	brne	.+24     	; 0x14e8 <main+0xfc4>
    14d0:	c2 01       	movw	r24, r4
    14d2:	82 19       	sub	r24, r2
    14d4:	93 09       	sbc	r25, r3
    14d6:	81 5a       	subi	r24, 0xA1	; 161
    14d8:	9f 40       	sbci	r25, 0x0F	; 15
    14da:	0c f4       	brge	.+2      	; 0x14de <main+0xfba>
    14dc:	53 c1       	rjmp	.+678    	; 0x1784 <main+0x1260>
    14de:	12 01       	movw	r2, r4
    14e0:	07 c0       	rjmp	.+14     	; 0x14f0 <main+0xfcc>
    14e2:	3d e1       	ldi	r19, 0x1D	; 29
    14e4:	63 2e       	mov	r6, r19
    14e6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    14e8:	83 e2       	ldi	r24, 0x23	; 35
    14ea:	68 16       	cp	r6, r24
    14ec:	71 04       	cpc	r7, r1
    14ee:	69 f4       	brne	.+26     	; 0x150a <main+0xfe6>
    14f0:	c2 01       	movw	r24, r4
    14f2:	82 19       	sub	r24, r2
    14f4:	93 09       	sbc	r25, r3
    14f6:	0b 97       	sbiw	r24, 0x0b	; 11
    14f8:	0c f4       	brge	.+2      	; 0x14fc <main+0xfd8>
    14fa:	51 c1       	rjmp	.+674    	; 0x179e <main+0x127a>
    14fc:	24 e2       	ldi	r18, 0x24	; 36
    14fe:	62 2e       	mov	r6, r18
    1500:	71 2c       	mov	r7, r1
    1502:	66 c1       	rjmp	.+716    	; 0x17d0 <main+0x12ac>
    1504:	9e e1       	ldi	r25, 0x1E	; 30
    1506:	69 2e       	mov	r6, r25
    1508:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    150a:	f3 01       	movw	r30, r6
    150c:	e4 32       	cpi	r30, 0x24	; 36
    150e:	f1 05       	cpc	r31, r1
    1510:	08 f0       	brcs	.+2      	; 0x1514 <main+0xff0>
    1512:	5e c1       	rjmp	.+700    	; 0x17d0 <main+0x12ac>
    1514:	ee 58       	subi	r30, 0x8E	; 142
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	ee 0f       	add	r30, r30
    151a:	ff 1f       	adc	r31, r31
    151c:	05 90       	lpm	r0, Z+
    151e:	f4 91       	lpm	r31, Z+
    1520:	e0 2d       	mov	r30, r0
    1522:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    1524:	80 91 d0 03 	lds	r24, 0x03D0
    1528:	90 91 cc 03 	lds	r25, 0x03CC
    152c:	20 91 ce 03 	lds	r18, 0x03CE
    1530:	82 ff       	sbrs	r24, 2
    1532:	08 c0       	rjmp	.+16     	; 0x1544 <main+0x1020>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    1534:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1536:	27 7f       	andi	r18, 0xF7	; 247
    1538:	20 93 ce 03 	sts	0x03CE, r18
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    153c:	90 62       	ori	r25, 0x20	; 32
    153e:	90 93 cc 03 	sts	0x03CC, r25
    1542:	46 c1       	rjmp	.+652    	; 0x17d0 <main+0x12ac>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1544:	9f 7d       	andi	r25, 0xDF	; 223
    1546:	90 93 cc 03 	sts	0x03CC, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    154a:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    154c:	28 60       	ori	r18, 0x08	; 8
    154e:	20 93 ce 03 	sts	0x03CE, r18
						if(print0 == 1){
    1552:	21 96       	adiw	r28, 0x01	; 1
    1554:	ae ad       	ldd	r26, Y+62	; 0x3e
    1556:	bf ad       	ldd	r27, Y+63	; 0x3f
    1558:	21 97       	sbiw	r28, 0x01	; 1
    155a:	11 97       	sbiw	r26, 0x01	; 1
    155c:	09 f0       	breq	.+2      	; 0x1560 <main+0x103c>
    155e:	47 c0       	rjmp	.+142    	; 0x15ee <main+0x10ca>
							OrangutanLCD::gotoXY(0,1);
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	61 e0       	ldi	r22, 0x01	; 1
    1564:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1568:	8e e4       	ldi	r24, 0x4E	; 78
    156a:	93 e0       	ldi	r25, 0x03	; 3
    156c:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
    1570:	21 96       	adiw	r28, 0x01	; 1
    1572:	1f ae       	std	Y+63, r1	; 0x3f
    1574:	1e ae       	std	Y+62, r1	; 0x3e
    1576:	21 97       	sbiw	r28, 0x01	; 1
    1578:	3a c0       	rjmp	.+116    	; 0x15ee <main+0x10ca>
							print0 = 0;
						}
					}
					break;
				case LOAD:
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    157a:	20 91 ce 03 	lds	r18, 0x03CE
    157e:	32 2f       	mov	r19, r18
    1580:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    1582:	c2 01       	movw	r24, r4
    1584:	68 ec       	ldi	r22, 0xC8	; 200
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <__divmodhi4>
    158c:	84 36       	cpi	r24, 0x64	; 100
    158e:	91 05       	cpc	r25, r1
    1590:	24 f4       	brge	.+8      	; 0x159a <main+0x1076>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1592:	2c 7f       	andi	r18, 0xFC	; 252
    1594:	20 93 ce 03 	sts	0x03CE, r18
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <main+0x107c>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    159a:	32 60       	ori	r19, 0x02	; 2
    159c:	30 93 ce 03 	sts	0x03CE, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    15a0:	80 91 cc 03 	lds	r24, 0x03CC
    15a4:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    15a6:	84 60       	ori	r24, 0x04	; 4
    15a8:	80 93 cc 03 	sts	0x03CC, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    15ac:	80 91 ce 03 	lds	r24, 0x03CE
    15b0:	8b 7f       	andi	r24, 0xFB	; 251
    15b2:	80 93 ce 03 	sts	0x03CE, r24
    15b6:	21 e0       	ldi	r18, 0x01	; 1
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	3c a7       	std	Y+44, r19	; 0x2c
    15bc:	2b a7       	std	Y+43, r18	; 0x2b
    15be:	08 c1       	rjmp	.+528    	; 0x17d0 <main+0x12ac>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    15c0:	80 91 ce 03 	lds	r24, 0x03CE
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    15c4:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    15c6:	86 61       	ori	r24, 0x16	; 22
    15c8:	80 93 ce 03 	sts	0x03CE, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    15cc:	80 91 cc 03 	lds	r24, 0x03CC
    15d0:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    15d2:	8b 7f       	andi	r24, 0xFB	; 251
    15d4:	80 93 cc 03 	sts	0x03CC, r24
    15d8:	ee c0       	rjmp	.+476    	; 0x17b6 <main+0x1292>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    15da:	80 91 cc 03 	lds	r24, 0x03CC
    15de:	8f 7d       	andi	r24, 0xDF	; 223
    15e0:	80 93 cc 03 	sts	0x03CC, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    15e4:	80 91 ce 03 	lds	r24, 0x03CE
    15e8:	88 60       	ori	r24, 0x08	; 8
    15ea:	80 93 ce 03 	sts	0x03CE, r24
    15ee:	1e 8a       	std	Y+22, r1	; 0x16
    15f0:	1d 8a       	std	Y+21, r1	; 0x15
    15f2:	ee c0       	rjmp	.+476    	; 0x17d0 <main+0x12ac>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    15f4:	80 91 ce 03 	lds	r24, 0x03CE
    15f8:	8f 7e       	andi	r24, 0xEF	; 239
    15fa:	80 93 ce 03 	sts	0x03CE, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    15fe:	80 91 cc 03 	lds	r24, 0x03CC
    1602:	80 62       	ori	r24, 0x20	; 32
    1604:	80 93 cc 03 	sts	0x03CC, r24
    1608:	e3 c0       	rjmp	.+454    	; 0x17d0 <main+0x12ac>
				//*********************************************
					break;
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    160a:	80 91 cc 03 	lds	r24, 0x03CC
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    160e:	80 63       	ori	r24, 0x30	; 48
    1610:	80 93 cc 03 	sts	0x03CC, r24
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	9e 8b       	std	Y+22, r25	; 0x16
    161a:	8d 8b       	std	Y+21, r24	; 0x15
    161c:	d9 c0       	rjmp	.+434    	; 0x17d0 <main+0x12ac>
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    161e:	80 91 cd 03 	lds	r24, 0x03CD
    1622:	81 60       	ori	r24, 0x01	; 1
    1624:	80 93 cd 03 	sts	0x03CD, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    1628:	80 91 cc 03 	lds	r24, 0x03CC
    162c:	8f 77       	andi	r24, 0x7F	; 127
    162e:	80 93 cc 03 	sts	0x03CC, r24
    1632:	dd cf       	rjmp	.-70     	; 0x15ee <main+0x10ca>
						print6 = 0;
					}*/
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    1634:	80 91 ce 03 	lds	r24, 0x03CE
    1638:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    163a:	8f 7d       	andi	r24, 0xDF	; 223
    163c:	80 93 ce 03 	sts	0x03CE, r24
    1640:	a1 e0       	ldi	r26, 0x01	; 1
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	bc a3       	std	Y+36, r27	; 0x24
    1646:	ab a3       	std	Y+35, r26	; 0x23
    1648:	c3 c0       	rjmp	.+390    	; 0x17d0 <main+0x12ac>
					break;
				case CLEAN1_1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    164a:	80 91 cc 03 	lds	r24, 0x03CC
    164e:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1650:	8f 7e       	andi	r24, 0xEF	; 239
    1652:	80 93 cc 03 	sts	0x03CC, r24
    1656:	27 c0       	rjmp	.+78     	; 0x16a6 <main+0x1182>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1658:	80 91 cc 03 	lds	r24, 0x03CC
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    165c:	80 63       	ori	r24, 0x30	; 48
    165e:	32 c0       	rjmp	.+100    	; 0x16c4 <main+0x11a0>
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    1660:	80 91 cc 03 	lds	r24, 0x03CC
    1664:	8f 77       	andi	r24, 0x7F	; 127
    1666:	80 93 cc 03 	sts	0x03CC, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    166a:	80 91 ce 03 	lds	r24, 0x03CE
    166e:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    1670:	8f 7d       	andi	r24, 0xDF	; 223
    1672:	80 93 ce 03 	sts	0x03CE, r24
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	9c a3       	std	Y+36, r25	; 0x24
    167c:	8b a3       	std	Y+35, r24	; 0x23
    167e:	b7 cf       	rjmp	.-146    	; 0x15ee <main+0x10ca>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    1680:	80 91 ce 03 	lds	r24, 0x03CE
    1684:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    1686:	80 62       	ori	r24, 0x20	; 32
    1688:	80 93 ce 03 	sts	0x03CE, r24
    168c:	1c a2       	std	Y+36, r1	; 0x24
    168e:	1b a2       	std	Y+35, r1	; 0x23
    1690:	ae cf       	rjmp	.-164    	; 0x15ee <main+0x10ca>
				
					break;
				//*************************************************
				case MOVED1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1692:	80 91 cc 03 	lds	r24, 0x03CC
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1696:	80 63       	ori	r24, 0x30	; 48
    1698:	80 93 cc 03 	sts	0x03CC, r24
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    169c:	80 91 cd 03 	lds	r24, 0x03CD
    16a0:	8e 7f       	andi	r24, 0xFE	; 254
    16a2:	80 93 cd 03 	sts	0x03CD, r24
    16a6:	21 e0       	ldi	r18, 0x01	; 1
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	3e 8b       	std	Y+22, r19	; 0x16
    16ac:	2d 8b       	std	Y+21, r18	; 0x15
    16ae:	90 c0       	rjmp	.+288    	; 0x17d0 <main+0x12ac>
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    16b0:	80 91 cf 03 	lds	r24, 0x03CF
    16b4:	87 7f       	andi	r24, 0xF7	; 247
    16b6:	80 93 cf 03 	sts	0x03CF, r24
    16ba:	99 cf       	rjmp	.-206    	; 0x15ee <main+0x10ca>
					break;
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    16bc:	80 91 cc 03 	lds	r24, 0x03CC
    16c0:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    16c2:	80 62       	ori	r24, 0x20	; 32
    16c4:	80 93 cc 03 	sts	0x03CC, r24
    16c8:	41 e0       	ldi	r20, 0x01	; 1
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	5e 8b       	std	Y+22, r21	; 0x16
    16ce:	4d 8b       	std	Y+21, r20	; 0x15
    16d0:	7f c0       	rjmp	.+254    	; 0x17d0 <main+0x12ac>
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    16d2:	80 91 cf 03 	lds	r24, 0x03CF
    16d6:	88 60       	ori	r24, 0x08	; 8
    16d8:	0e c0       	rjmp	.+28     	; 0x16f6 <main+0x11d2>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    16da:	80 91 cd 03 	lds	r24, 0x03CD
    16de:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    16e0:	8f 7d       	andi	r24, 0xDF	; 223
    16e2:	80 93 cd 03 	sts	0x03CD, r24
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9a af       	std	Y+58, r25	; 0x3a
    16ec:	89 af       	std	Y+57, r24	; 0x39
    16ee:	7f cf       	rjmp	.-258    	; 0x15ee <main+0x10ca>
					paperTowelMotor = 1;
					break;
				case D2RAISE:
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    16f0:	80 91 cf 03 	lds	r24, 0x03CF
    16f4:	8d 7f       	andi	r24, 0xFD	; 253
    16f6:	80 93 cf 03 	sts	0x03CF, r24
    16fa:	6a c0       	rjmp	.+212    	; 0x17d0 <main+0x12ac>
					break;
				case DRY2:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    16fc:	80 91 cc 03 	lds	r24, 0x03CC
    1700:	80 62       	ori	r24, 0x20	; 32
    1702:	80 93 cc 03 	sts	0x03CC, r24
    1706:	a1 e0       	ldi	r26, 0x01	; 1
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	be 8b       	std	Y+22, r27	; 0x16
    170c:	ad 8b       	std	Y+21, r26	; 0x15
    170e:	60 c0       	rjmp	.+192    	; 0x17d0 <main+0x12ac>
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    1710:	80 91 cd 03 	lds	r24, 0x03CD
    1714:	8f 7b       	andi	r24, 0xBF	; 191
    1716:	80 93 cd 03 	sts	0x03CD, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    171a:	80 91 cf 03 	lds	r24, 0x03CF
    171e:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1720:	8b 7f       	andi	r24, 0xFB	; 251
    1722:	80 93 cf 03 	sts	0x03CF, r24
    1726:	1a ae       	std	Y+58, r1	; 0x3a
    1728:	19 ae       	std	Y+57, r1	; 0x39
    172a:	52 c0       	rjmp	.+164    	; 0x17d0 <main+0x12ac>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    172c:	80 91 ce 03 	lds	r24, 0x03CE
    1730:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1732:	80 61       	ori	r24, 0x10	; 16
    1734:	80 93 ce 03 	sts	0x03CE, r24
    1738:	1e 8a       	std	Y+22, r1	; 0x16
    173a:	1d 8a       	std	Y+21, r1	; 0x15
    173c:	8f e1       	ldi	r24, 0x1F	; 31
    173e:	68 2e       	mov	r6, r24
    1740:	71 2c       	mov	r7, r1
    1742:	46 c0       	rjmp	.+140    	; 0x17d0 <main+0x12ac>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1744:	80 91 cc 03 	lds	r24, 0x03CC
    1748:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    174a:	80 62       	ori	r24, 0x20	; 32
    174c:	80 93 cc 03 	sts	0x03CC, r24
    1750:	21 e0       	ldi	r18, 0x01	; 1
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	3e 8b       	std	Y+22, r19	; 0x16
    1756:	2d 8b       	std	Y+21, r18	; 0x15
    1758:	00 e2       	ldi	r16, 0x20	; 32
    175a:	60 2e       	mov	r6, r16
    175c:	71 2c       	mov	r7, r1
    175e:	38 c0       	rjmp	.+112    	; 0x17d0 <main+0x12ac>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1760:	80 91 cc 03 	lds	r24, 0x03CC
    1764:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1766:	84 60       	ori	r24, 0x04	; 4
    1768:	80 93 cc 03 	sts	0x03CC, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    176c:	80 91 ce 03 	lds	r24, 0x03CE
    1770:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1772:	8f 7e       	andi	r24, 0xEF	; 239
    1774:	80 93 ce 03 	sts	0x03CE, r24
    1778:	1e 8a       	std	Y+22, r1	; 0x16
    177a:	1d 8a       	std	Y+21, r1	; 0x15
    177c:	11 e2       	ldi	r17, 0x21	; 33
    177e:	61 2e       	mov	r6, r17
    1780:	71 2c       	mov	r7, r1
    1782:	26 c0       	rjmp	.+76     	; 0x17d0 <main+0x12ac>
					break;
    1784:	b2 e2       	ldi	r27, 0x22	; 34
    1786:	6b 2e       	mov	r6, r27
    1788:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    178a:	80 91 cc 03 	lds	r24, 0x03CC
    178e:	8d 7f       	andi	r24, 0xFD	; 253
    1790:	80 93 cc 03 	sts	0x03CC, r24
    1794:	41 e0       	ldi	r20, 0x01	; 1
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	5c a7       	std	Y+44, r21	; 0x2c
    179a:	4b a7       	std	Y+43, r20	; 0x2b
    179c:	19 c0       	rjmp	.+50     	; 0x17d0 <main+0x12ac>
					plateLoadMotor = 1;
					break;
    179e:	a3 e2       	ldi	r26, 0x23	; 35
    17a0:	6a 2e       	mov	r6, r26
    17a2:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    17a4:	80 91 cc 03 	lds	r24, 0x03CC
    17a8:	8b 7f       	andi	r24, 0xFB	; 251
    17aa:	80 93 cc 03 	sts	0x03CC, r24
					if(print35 == 1){
    17ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    17b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	19 f0       	breq	.+6      	; 0x17bc <main+0x1298>
    17b6:	1c a6       	std	Y+44, r1	; 0x2c
    17b8:	1b a6       	std	Y+43, r1	; 0x2b
    17ba:	0a c0       	rjmp	.+20     	; 0x17d0 <main+0x12ac>
						OrangutanLCD::clear();
    17bc:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    17c0:	8c e5       	ldi	r24, 0x5C	; 92
    17c2:	93 e0       	ldi	r25, 0x03	; 3
    17c4:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
    17c8:	1c a6       	std	Y+44, r1	; 0x2c
    17ca:	1b a6       	std	Y+43, r1	; 0x2b
    17cc:	1e ae       	std	Y+62, r1	; 0x3e
    17ce:	1d ae       	std	Y+61, r1	; 0x3d
					}
					break;
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    17d0:	ad b7       	in	r26, 0x3d	; 61
    17d2:	be b7       	in	r27, 0x3e	; 62
    17d4:	52 97       	sbiw	r26, 0x12	; 18
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	be bf       	out	0x3e, r27	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	ad bf       	out	0x3d, r26	; 61
    17e0:	ed b7       	in	r30, 0x3d	; 61
    17e2:	fe b7       	in	r31, 0x3e	; 62
    17e4:	31 96       	adiw	r30, 0x01	; 1
    17e6:	82 e0       	ldi	r24, 0x02	; 2
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	12 96       	adiw	r26, 0x02	; 2
    17ec:	9c 93       	st	X, r25
    17ee:	8e 93       	st	-X, r24
    17f0:	11 97       	sbiw	r26, 0x01	; 1
    17f2:	93 83       	std	Z+3, r25	; 0x03
    17f4:	82 83       	std	Z+2, r24	; 0x02
    17f6:	95 83       	std	Z+5, r25	; 0x05
    17f8:	84 83       	std	Z+4, r24	; 0x04
    17fa:	97 83       	std	Z+7, r25	; 0x07
    17fc:	86 83       	std	Z+6, r24	; 0x06
    17fe:	21 e0       	ldi	r18, 0x01	; 1
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	31 87       	std	Z+9, r19	; 0x09
    1804:	20 87       	std	Z+8, r18	; 0x08
    1806:	33 87       	std	Z+11, r19	; 0x0b
    1808:	22 87       	std	Z+10, r18	; 0x0a
    180a:	35 87       	std	Z+13, r19	; 0x0d
    180c:	24 87       	std	Z+12, r18	; 0x0c
    180e:	37 87       	std	Z+15, r19	; 0x0f
    1810:	26 87       	std	Z+14, r18	; 0x0e
    1812:	31 8b       	std	Z+17, r19	; 0x11
    1814:	20 8b       	std	Z+16, r18	; 0x10
    1816:	c2 01       	movw	r24, r4
    1818:	b1 01       	movw	r22, r2
    181a:	4d 81       	ldd	r20, Y+5	; 0x05
    181c:	5e 81       	ldd	r21, Y+6	; 0x06
    181e:	2b a5       	ldd	r18, Y+43	; 0x2b
    1820:	3c a5       	ldd	r19, Y+44	; 0x2c
    1822:	0d 89       	ldd	r16, Y+21	; 0x15
    1824:	1e 89       	ldd	r17, Y+22	; 0x16
    1826:	eb a0       	ldd	r14, Y+35	; 0x23
    1828:	fc a0       	ldd	r15, Y+36	; 0x24
    182a:	cc 24       	eor	r12, r12
    182c:	dd 24       	eor	r13, r13
    182e:	a9 ac       	ldd	r10, Y+57	; 0x39
    1830:	ba ac       	ldd	r11, Y+58	; 0x3a
    1832:	f2 e0       	ldi	r31, 0x02	; 2
    1834:	8f 2e       	mov	r8, r31
    1836:	91 2c       	mov	r9, r1
    1838:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    183c:	4d b7       	in	r20, 0x3d	; 61
    183e:	5e b7       	in	r21, 0x3e	; 62
    1840:	4e 5e       	subi	r20, 0xEE	; 238
    1842:	5f 4f       	sbci	r21, 0xFF	; 255
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	5e bf       	out	0x3e, r21	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	4d bf       	out	0x3d, r20	; 61
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
		if(!OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("FIRST B");
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1856:	54 e2       	ldi	r21, 0x24	; 36
    1858:	65 16       	cp	r6, r21
    185a:	71 04       	cpc	r7, r1
    185c:	11 f4       	brne	.+4      	; 0x1862 <main+0x133e>
    185e:	0c 94 e5 18 	jmp	0x31ca	; 0x31ca <main+0x2ca6>
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    1862:	08 94       	sec
    1864:	41 1c       	adc	r4, r1
    1866:	51 1c       	adc	r5, r1
    1868:	80 cc       	rjmp	.-1792   	; 0x116a <main+0xc46>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    186a:	82 e0       	ldi	r24, 0x02	; 2
    186c:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    1870:	88 23       	and	r24, r24
    1872:	11 f0       	breq	.+4      	; 0x1878 <main+0x1354>
    1874:	0c 94 15 19 	jmp	0x322a	; 0x322a <main+0x2d06>
			OrangutanLCD::gotoXY(7,0);
    1878:	87 e0       	ldi	r24, 0x07	; 7
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("SECOND B");
    1880:	89 e6       	ldi	r24, 0x69	; 105
    1882:	93 e0       	ldi	r25, 0x03	; 3
    1884:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
			OrangutanLCD::print("DEBUG");
    1888:	8d e5       	ldi	r24, 0x5D	; 93
    188a:	91 e0       	ldi	r25, 0x01	; 1
    188c:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1890:	80 91 cc 03 	lds	r24, 0x03CC
    1894:	80 62       	ori	r24, 0x20	; 32
    1896:	80 93 cc 03 	sts	0x03CC, r24
    189a:	18 ae       	std	Y+56, r1	; 0x38
    189c:	1f aa       	std	Y+55, r1	; 0x37
    189e:	66 24       	eor	r6, r6
    18a0:	77 24       	eor	r7, r7
    18a2:	23 96       	adiw	r28, 0x03	; 3
    18a4:	1f ae       	std	Y+63, r1	; 0x3f
    18a6:	1e ae       	std	Y+62, r1	; 0x3e
    18a8:	23 97       	sbiw	r28, 0x03	; 3
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9a ab       	std	Y+50, r25	; 0x32
    18b0:	89 ab       	std	Y+49, r24	; 0x31
    18b2:	1a a6       	std	Y+42, r1	; 0x2a
    18b4:	19 a6       	std	Y+41, r1	; 0x29
    18b6:	1e 8e       	std	Y+30, r1	; 0x1e
    18b8:	1d 8e       	std	Y+29, r1	; 0x1d
    18ba:	22 24       	eor	r2, r2
    18bc:	33 24       	eor	r3, r3
    18be:	9c 8b       	std	Y+20, r25	; 0x14
    18c0:	8b 8b       	std	Y+19, r24	; 0x13
    18c2:	44 24       	eor	r4, r4
    18c4:	55 24       	eor	r5, r5
    18c6:	9e 87       	std	Y+14, r25	; 0x0e
    18c8:	8d 87       	std	Y+13, r24	; 0x0d
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    18ca:	84 e4       	ldi	r24, 0x44	; 68
    18cc:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    18d6:	85 e4       	ldi	r24, 0x45	; 69
    18d8:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    18dc:	0e 94 a8 19 	call	0x3350	; 0x3350 <_Z11i2c_readAckv>
    18e0:	80 93 d0 03 	sts	0x03D0, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    18e4:	0e 94 b2 19 	call	0x3364	; 0x3364 <_Z11i2c_readNakv>
    18e8:	80 93 d1 03 	sts	0x03D1, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    18ec:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>
				
				if(state != INIT){
    18f0:	61 14       	cp	r6, r1
    18f2:	71 04       	cpc	r7, r1
    18f4:	79 f0       	breq	.+30     	; 0x1914 <main+0x13f0>
					OrangutanLCD::gotoXY(0,1);
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	61 e0       	ldi	r22, 0x01	; 1
    18fa:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    18fe:	87 e4       	ldi	r24, 0x47	; 71
    1900:	93 e0       	ldi	r25, 0x03	; 3
    1902:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
    1906:	b3 01       	movw	r22, r6
    1908:	88 27       	eor	r24, r24
    190a:	77 fd       	sbrc	r23, 7
    190c:	80 95       	com	r24
    190e:	98 2f       	mov	r25, r24
    1910:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <_ZN12OrangutanLCD5printEl>
					OrangutanLCD::print(state);
				}

				
				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    1914:	c2 01       	movw	r24, r4
    1916:	be 01       	movw	r22, r28
    1918:	6f 5f       	subi	r22, 0xFF	; 255
    191a:	7f 4f       	sbci	r23, 0xFF	; 255
    191c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    1920:	61 14       	cp	r6, r1
    1922:	71 04       	cpc	r7, r1
    1924:	21 f4       	brne	.+8      	; 0x192e <main+0x140a>
    1926:	88 23       	and	r24, r24
    1928:	e1 f1       	breq	.+120    	; 0x19a2 <main+0x147e>
    192a:	12 01       	movw	r2, r4
    192c:	04 c0       	rjmp	.+8      	; 0x1936 <main+0x1412>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    192e:	91 e0       	ldi	r25, 0x01	; 1
    1930:	69 16       	cp	r6, r25
    1932:	71 04       	cpc	r7, r1
    1934:	41 f4       	brne	.+16     	; 0x1946 <main+0x1422>
    1936:	c2 01       	movw	r24, r4
    1938:	82 19       	sub	r24, r2
    193a:	93 09       	sbc	r25, r3
    193c:	81 5a       	subi	r24, 0xA1	; 161
    193e:	9f 40       	sbci	r25, 0x0F	; 15
    1940:	ec f1       	brlt	.+122    	; 0x19bc <main+0x1498>
    1942:	12 01       	movw	r2, r4
    1944:	04 c0       	rjmp	.+8      	; 0x194e <main+0x142a>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    1946:	b2 e0       	ldi	r27, 0x02	; 2
    1948:	6b 16       	cp	r6, r27
    194a:	71 04       	cpc	r7, r1
    194c:	49 f4       	brne	.+18     	; 0x1960 <main+0x143c>
    194e:	c2 01       	movw	r24, r4
    1950:	82 19       	sub	r24, r2
    1952:	93 09       	sbc	r25, r3
    1954:	85 36       	cpi	r24, 0x65	; 101
    1956:	91 05       	cpc	r25, r1
    1958:	0c f4       	brge	.+2      	; 0x195c <main+0x1438>
    195a:	40 c0       	rjmp	.+128    	; 0x19dc <main+0x14b8>
    195c:	12 01       	movw	r2, r4
    195e:	04 c0       	rjmp	.+8      	; 0x1968 <main+0x1444>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    1960:	23 e0       	ldi	r18, 0x03	; 3
    1962:	62 16       	cp	r6, r18
    1964:	71 04       	cpc	r7, r1
    1966:	31 f4       	brne	.+12     	; 0x1974 <main+0x1450>
    1968:	80 91 d0 03 	lds	r24, 0x03D0
    196c:	81 fd       	sbrc	r24, 1
    196e:	46 c0       	rjmp	.+140    	; 0x19fc <main+0x14d8>
    1970:	12 01       	movw	r2, r4
    1972:	04 c0       	rjmp	.+8      	; 0x197c <main+0x1458>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    1974:	34 e0       	ldi	r19, 0x04	; 4
    1976:	63 16       	cp	r6, r19
    1978:	71 04       	cpc	r7, r1
    197a:	31 f4       	brne	.+12     	; 0x1988 <main+0x1464>
    197c:	80 91 d0 03 	lds	r24, 0x03D0
    1980:	83 fd       	sbrc	r24, 3
    1982:	4c c0       	rjmp	.+152    	; 0x1a1c <main+0x14f8>
    1984:	12 01       	movw	r2, r4
    1986:	04 c0       	rjmp	.+8      	; 0x1990 <main+0x146c>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    1988:	45 e0       	ldi	r20, 0x05	; 5
    198a:	64 16       	cp	r6, r20
    198c:	71 04       	cpc	r7, r1
    198e:	49 f4       	brne	.+18     	; 0x19a2 <main+0x147e>
    1990:	c2 01       	movw	r24, r4
    1992:	82 19       	sub	r24, r2
    1994:	93 09       	sbc	r25, r3
    1996:	85 36       	cpi	r24, 0x65	; 101
    1998:	91 05       	cpc	r25, r1
    199a:	0c f4       	brge	.+2      	; 0x199e <main+0x147a>
    199c:	4f c0       	rjmp	.+158    	; 0x1a3c <main+0x1518>
    199e:	12 01       	movw	r2, r4
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <main+0x1486>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush2StepWhole /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    19a2:	56 e0       	ldi	r21, 0x06	; 6
    19a4:	65 16       	cp	r6, r21
    19a6:	71 04       	cpc	r7, r1
    19a8:	61 f4       	brne	.+24     	; 0x19c2 <main+0x149e>
    19aa:	c2 01       	movw	r24, r4
    19ac:	82 19       	sub	r24, r2
    19ae:	93 09       	sbc	r25, r3
    19b0:	81 5a       	subi	r24, 0xA1	; 161
    19b2:	9f 40       	sbci	r25, 0x0F	; 15
    19b4:	0c f4       	brge	.+2      	; 0x19b8 <main+0x1494>
    19b6:	52 c0       	rjmp	.+164    	; 0x1a5c <main+0x1538>
    19b8:	12 01       	movw	r2, r4
    19ba:	07 c0       	rjmp	.+14     	; 0x19ca <main+0x14a6>
    19bc:	e1 e0       	ldi	r30, 0x01	; 1
    19be:	6e 2e       	mov	r6, r30
    19c0:	71 2c       	mov	r7, r1
					state = B2SET;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    19c2:	bf e0       	ldi	r27, 0x0F	; 15
    19c4:	6b 16       	cp	r6, r27
    19c6:	71 04       	cpc	r7, r1
    19c8:	61 f4       	brne	.+24     	; 0x19e2 <main+0x14be>
    19ca:	c2 01       	movw	r24, r4
    19cc:	82 19       	sub	r24, r2
    19ce:	93 09       	sbc	r25, r3
    19d0:	85 36       	cpi	r24, 0x65	; 101
    19d2:	91 05       	cpc	r25, r1
    19d4:	0c f4       	brge	.+2      	; 0x19d8 <main+0x14b4>
    19d6:	52 c0       	rjmp	.+164    	; 0x1a7c <main+0x1558>
    19d8:	12 01       	movw	r2, r4
    19da:	07 c0       	rjmp	.+14     	; 0x19ea <main+0x14c6>
    19dc:	72 e0       	ldi	r23, 0x02	; 2
    19de:	67 2e       	mov	r6, r23
    19e0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    19e2:	20 e1       	ldi	r18, 0x10	; 16
    19e4:	62 16       	cp	r6, r18
    19e6:	71 04       	cpc	r7, r1
    19e8:	61 f4       	brne	.+24     	; 0x1a02 <main+0x14de>
    19ea:	c2 01       	movw	r24, r4
    19ec:	82 19       	sub	r24, r2
    19ee:	93 09       	sbc	r25, r3
    19f0:	85 36       	cpi	r24, 0x65	; 101
    19f2:	91 05       	cpc	r25, r1
    19f4:	0c f4       	brge	.+2      	; 0x19f8 <main+0x14d4>
    19f6:	52 c0       	rjmp	.+164    	; 0x1a9c <main+0x1578>
    19f8:	12 01       	movw	r2, r4
    19fa:	07 c0       	rjmp	.+14     	; 0x1a0a <main+0x14e6>
    19fc:	63 e0       	ldi	r22, 0x03	; 3
    19fe:	66 2e       	mov	r6, r22
    1a00:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    1a02:	31 e1       	ldi	r19, 0x11	; 17
    1a04:	63 16       	cp	r6, r19
    1a06:	71 04       	cpc	r7, r1
    1a08:	61 f4       	brne	.+24     	; 0x1a22 <main+0x14fe>
    1a0a:	c2 01       	movw	r24, r4
    1a0c:	82 19       	sub	r24, r2
    1a0e:	93 09       	sbc	r25, r3
    1a10:	81 5d       	subi	r24, 0xD1	; 209
    1a12:	97 40       	sbci	r25, 0x07	; 7
    1a14:	0c f4       	brge	.+2      	; 0x1a18 <main+0x14f4>
    1a16:	52 c0       	rjmp	.+164    	; 0x1abc <main+0x1598>
    1a18:	12 01       	movw	r2, r4
    1a1a:	07 c0       	rjmp	.+14     	; 0x1a2a <main+0x1506>
    1a1c:	54 e0       	ldi	r21, 0x04	; 4
    1a1e:	65 2e       	mov	r6, r21
    1a20:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    1a22:	52 e1       	ldi	r21, 0x12	; 18
    1a24:	65 16       	cp	r6, r21
    1a26:	71 04       	cpc	r7, r1
    1a28:	61 f4       	brne	.+24     	; 0x1a42 <main+0x151e>
    1a2a:	c2 01       	movw	r24, r4
    1a2c:	82 19       	sub	r24, r2
    1a2e:	93 09       	sbc	r25, r3
    1a30:	85 36       	cpi	r24, 0x65	; 101
    1a32:	91 05       	cpc	r25, r1
    1a34:	0c f4       	brge	.+2      	; 0x1a38 <main+0x1514>
    1a36:	52 c0       	rjmp	.+164    	; 0x1adc <main+0x15b8>
    1a38:	12 01       	movw	r2, r4
    1a3a:	07 c0       	rjmp	.+14     	; 0x1a4a <main+0x1526>
    1a3c:	45 e0       	ldi	r20, 0x05	; 5
    1a3e:	64 2e       	mov	r6, r20
    1a40:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    1a42:	83 e1       	ldi	r24, 0x13	; 19
    1a44:	68 16       	cp	r6, r24
    1a46:	71 04       	cpc	r7, r1
    1a48:	61 f4       	brne	.+24     	; 0x1a62 <main+0x153e>
    1a4a:	c2 01       	movw	r24, r4
    1a4c:	82 19       	sub	r24, r2
    1a4e:	93 09       	sbc	r25, r3
    1a50:	81 5d       	subi	r24, 0xD1	; 209
    1a52:	97 40       	sbci	r25, 0x07	; 7
    1a54:	0c f4       	brge	.+2      	; 0x1a58 <main+0x1534>
    1a56:	52 c0       	rjmp	.+164    	; 0x1afc <main+0x15d8>
    1a58:	12 01       	movw	r2, r4
    1a5a:	07 c0       	rjmp	.+14     	; 0x1a6a <main+0x1546>
    1a5c:	36 e0       	ldi	r19, 0x06	; 6
    1a5e:	63 2e       	mov	r6, r19
    1a60:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    1a62:	b4 e1       	ldi	r27, 0x14	; 20
    1a64:	6b 16       	cp	r6, r27
    1a66:	71 04       	cpc	r7, r1
    1a68:	61 f4       	brne	.+24     	; 0x1a82 <main+0x155e>
    1a6a:	c2 01       	movw	r24, r4
    1a6c:	82 19       	sub	r24, r2
    1a6e:	93 09       	sbc	r25, r3
    1a70:	85 36       	cpi	r24, 0x65	; 101
    1a72:	91 05       	cpc	r25, r1
    1a74:	0c f4       	brge	.+2      	; 0x1a78 <main+0x1554>
    1a76:	50 c0       	rjmp	.+160    	; 0x1b18 <main+0x15f4>
    1a78:	12 01       	movw	r2, r4
    1a7a:	07 c0       	rjmp	.+14     	; 0x1a8a <main+0x1566>
    1a7c:	2f e0       	ldi	r18, 0x0F	; 15
    1a7e:	62 2e       	mov	r6, r18
    1a80:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    1a82:	25 e1       	ldi	r18, 0x15	; 21
    1a84:	62 16       	cp	r6, r18
    1a86:	71 04       	cpc	r7, r1
    1a88:	61 f4       	brne	.+24     	; 0x1aa2 <main+0x157e>
    1a8a:	c2 01       	movw	r24, r4
    1a8c:	82 19       	sub	r24, r2
    1a8e:	93 09       	sbc	r25, r3
    1a90:	81 5d       	subi	r24, 0xD1	; 209
    1a92:	97 40       	sbci	r25, 0x07	; 7
    1a94:	0c f4       	brge	.+2      	; 0x1a98 <main+0x1574>
    1a96:	53 c0       	rjmp	.+166    	; 0x1b3e <main+0x161a>
    1a98:	12 01       	movw	r2, r4
    1a9a:	07 c0       	rjmp	.+14     	; 0x1aaa <main+0x1586>
    1a9c:	90 e1       	ldi	r25, 0x10	; 16
    1a9e:	69 2e       	mov	r6, r25
    1aa0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    1aa2:	46 e1       	ldi	r20, 0x16	; 22
    1aa4:	64 16       	cp	r6, r20
    1aa6:	71 04       	cpc	r7, r1
    1aa8:	61 f4       	brne	.+24     	; 0x1ac2 <main+0x159e>
    1aaa:	c2 01       	movw	r24, r4
    1aac:	82 19       	sub	r24, r2
    1aae:	93 09       	sbc	r25, r3
    1ab0:	85 36       	cpi	r24, 0x65	; 101
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	0c f4       	brge	.+2      	; 0x1ab8 <main+0x1594>
    1ab6:	57 c0       	rjmp	.+174    	; 0x1b66 <main+0x1642>
    1ab8:	12 01       	movw	r2, r4
    1aba:	07 c0       	rjmp	.+14     	; 0x1aca <main+0x15a6>
    1abc:	81 e1       	ldi	r24, 0x11	; 17
    1abe:	68 2e       	mov	r6, r24
    1ac0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    1ac2:	57 e1       	ldi	r21, 0x17	; 23
    1ac4:	65 16       	cp	r6, r21
    1ac6:	71 04       	cpc	r7, r1
    1ac8:	61 f4       	brne	.+24     	; 0x1ae2 <main+0x15be>
    1aca:	c2 01       	movw	r24, r4
    1acc:	82 19       	sub	r24, r2
    1ace:	93 09       	sbc	r25, r3
    1ad0:	81 5a       	subi	r24, 0xA1	; 161
    1ad2:	9f 40       	sbci	r25, 0x0F	; 15
    1ad4:	0c f4       	brge	.+2      	; 0x1ad8 <main+0x15b4>
    1ad6:	57 c0       	rjmp	.+174    	; 0x1b86 <main+0x1662>
    1ad8:	12 01       	movw	r2, r4
    1ada:	07 c0       	rjmp	.+14     	; 0x1aea <main+0x15c6>
    1adc:	02 e1       	ldi	r16, 0x12	; 18
    1ade:	60 2e       	mov	r6, r16
    1ae0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    1ae2:	b8 e1       	ldi	r27, 0x18	; 24
    1ae4:	6b 16       	cp	r6, r27
    1ae6:	71 04       	cpc	r7, r1
    1ae8:	61 f4       	brne	.+24     	; 0x1b02 <main+0x15de>
    1aea:	c2 01       	movw	r24, r4
    1aec:	82 19       	sub	r24, r2
    1aee:	93 09       	sbc	r25, r3
    1af0:	85 36       	cpi	r24, 0x65	; 101
    1af2:	91 05       	cpc	r25, r1
    1af4:	0c f4       	brge	.+2      	; 0x1af8 <main+0x15d4>
    1af6:	55 c0       	rjmp	.+170    	; 0x1ba2 <main+0x167e>
    1af8:	12 01       	movw	r2, r4
    1afa:	07 c0       	rjmp	.+14     	; 0x1b0a <main+0x15e6>
    1afc:	13 e1       	ldi	r17, 0x13	; 19
    1afe:	61 2e       	mov	r6, r17
    1b00:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    1b02:	29 e1       	ldi	r18, 0x19	; 25
    1b04:	62 16       	cp	r6, r18
    1b06:	71 04       	cpc	r7, r1
    1b08:	51 f4       	brne	.+20     	; 0x1b1e <main+0x15fa>
    1b0a:	c2 01       	movw	r24, r4
    1b0c:	82 19       	sub	r24, r2
    1b0e:	93 09       	sbc	r25, r3
    1b10:	81 5a       	subi	r24, 0xA1	; 161
    1b12:	9f 40       	sbci	r25, 0x0F	; 15
    1b14:	44 f4       	brge	.+16     	; 0x1b26 <main+0x1602>
    1b16:	52 c0       	rjmp	.+164    	; 0x1bbc <main+0x1698>
    1b18:	b4 e1       	ldi	r27, 0x14	; 20
    1b1a:	6b 2e       	mov	r6, r27
    1b1c:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    1b1e:	4a e1       	ldi	r20, 0x1A	; 26
    1b20:	64 16       	cp	r6, r20
    1b22:	71 04       	cpc	r7, r1
    1b24:	79 f4       	brne	.+30     	; 0x1b44 <main+0x1620>
    1b26:	c2 01       	movw	r24, r4
    1b28:	82 19       	sub	r24, r2
    1b2a:	93 09       	sbc	r25, r3
    1b2c:	81 5a       	subi	r24, 0xA1	; 161
    1b2e:	9f 40       	sbci	r25, 0x0F	; 15
    1b30:	0c f4       	brge	.+2      	; 0x1b34 <main+0x1610>
    1b32:	51 c0       	rjmp	.+162    	; 0x1bd6 <main+0x16b2>
    1b34:	23 96       	adiw	r28, 0x03	; 3
    1b36:	5f ae       	std	Y+63, r5	; 0x3f
    1b38:	4e ae       	std	Y+62, r4	; 0x3e
    1b3a:	23 97       	sbiw	r28, 0x03	; 3
    1b3c:	07 c0       	rjmp	.+14     	; 0x1b4c <main+0x1628>
    1b3e:	a5 e1       	ldi	r26, 0x15	; 21
    1b40:	6a 2e       	mov	r6, r26
    1b42:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    1b44:	8b e1       	ldi	r24, 0x1B	; 27
    1b46:	68 16       	cp	r6, r24
    1b48:	71 04       	cpc	r7, r1
    1b4a:	81 f4       	brne	.+32     	; 0x1b6c <main+0x1648>
    1b4c:	c2 01       	movw	r24, r4
    1b4e:	23 96       	adiw	r28, 0x03	; 3
    1b50:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b52:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b54:	23 97       	sbiw	r28, 0x03	; 3
    1b56:	8a 1b       	sub	r24, r26
    1b58:	9b 0b       	sbc	r25, r27
    1b5a:	85 36       	cpi	r24, 0x65	; 101
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	0c f4       	brge	.+2      	; 0x1b62 <main+0x163e>
    1b60:	47 c0       	rjmp	.+142    	; 0x1bf0 <main+0x16cc>
    1b62:	12 01       	movw	r2, r4
    1b64:	07 c0       	rjmp	.+14     	; 0x1b74 <main+0x1650>
    1b66:	f6 e1       	ldi	r31, 0x16	; 22
    1b68:	6f 2e       	mov	r6, r31
    1b6a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    1b6c:	bc e1       	ldi	r27, 0x1C	; 28
    1b6e:	6b 16       	cp	r6, r27
    1b70:	71 04       	cpc	r7, r1
    1b72:	61 f4       	brne	.+24     	; 0x1b8c <main+0x1668>
    1b74:	c2 01       	movw	r24, r4
    1b76:	82 19       	sub	r24, r2
    1b78:	93 09       	sbc	r25, r3
    1b7a:	85 36       	cpi	r24, 0x65	; 101
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	0c f4       	brge	.+2      	; 0x1b82 <main+0x165e>
    1b80:	47 c0       	rjmp	.+142    	; 0x1c10 <main+0x16ec>
    1b82:	12 01       	movw	r2, r4
    1b84:	07 c0       	rjmp	.+14     	; 0x1b94 <main+0x1670>
    1b86:	e7 e1       	ldi	r30, 0x17	; 23
    1b88:	6e 2e       	mov	r6, r30
    1b8a:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    1b8c:	2d e1       	ldi	r18, 0x1D	; 29
    1b8e:	62 16       	cp	r6, r18
    1b90:	71 04       	cpc	r7, r1
    1b92:	51 f4       	brne	.+20     	; 0x1ba8 <main+0x1684>
    1b94:	c2 01       	movw	r24, r4
    1b96:	82 19       	sub	r24, r2
    1b98:	93 09       	sbc	r25, r3
    1b9a:	81 5a       	subi	r24, 0xA1	; 161
    1b9c:	9f 40       	sbci	r25, 0x0F	; 15
    1b9e:	44 f4       	brge	.+16     	; 0x1bb0 <main+0x168c>
    1ba0:	47 c0       	rjmp	.+142    	; 0x1c30 <main+0x170c>
    1ba2:	78 e1       	ldi	r23, 0x18	; 24
    1ba4:	67 2e       	mov	r6, r23
    1ba6:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && /*counter - counterRef > totalStepLength2*fixtureMotorLoadBack &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    1ba8:	4e e1       	ldi	r20, 0x1E	; 30
    1baa:	64 16       	cp	r6, r20
    1bac:	71 04       	cpc	r7, r1
    1bae:	49 f4       	brne	.+18     	; 0x1bc2 <main+0x169e>
    1bb0:	80 91 d0 03 	lds	r24, 0x03D0
    1bb4:	83 fd       	sbrc	r24, 3
    1bb6:	4d c0       	rjmp	.+154    	; 0x1c52 <main+0x172e>
    1bb8:	12 01       	movw	r2, r4
    1bba:	07 c0       	rjmp	.+14     	; 0x1bca <main+0x16a6>
    1bbc:	69 e1       	ldi	r22, 0x19	; 25
    1bbe:	66 2e       	mov	r6, r22
    1bc0:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    1bc2:	5f e1       	ldi	r21, 0x1F	; 31
    1bc4:	65 16       	cp	r6, r21
    1bc6:	71 04       	cpc	r7, r1
    1bc8:	49 f4       	brne	.+18     	; 0x1bdc <main+0x16b8>
    1bca:	80 91 d0 03 	lds	r24, 0x03D0
    1bce:	81 fd       	sbrc	r24, 1
    1bd0:	5d c1       	rjmp	.+698    	; 0x1e8c <main+0x1968>
    1bd2:	12 01       	movw	r2, r4
    1bd4:	07 c0       	rjmp	.+14     	; 0x1be4 <main+0x16c0>
    1bd6:	5a e1       	ldi	r21, 0x1A	; 26
    1bd8:	65 2e       	mov	r6, r21
    1bda:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureHome == 0){
    1bdc:	80 e2       	ldi	r24, 0x20	; 32
    1bde:	68 16       	cp	r6, r24
    1be0:	71 04       	cpc	r7, r1
    1be2:	49 f4       	brne	.+18     	; 0x1bf6 <main+0x16d2>
    1be4:	80 91 d0 03 	lds	r24, 0x03D0
    1be8:	82 fd       	sbrc	r24, 2
    1bea:	5c c1       	rjmp	.+696    	; 0x1ea4 <main+0x1980>
    1bec:	12 01       	movw	r2, r4
    1bee:	07 c0       	rjmp	.+14     	; 0x1bfe <main+0x16da>
    1bf0:	4b e1       	ldi	r20, 0x1B	; 27
    1bf2:	64 2e       	mov	r6, r20
    1bf4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    1bf6:	91 e2       	ldi	r25, 0x21	; 33
    1bf8:	69 16       	cp	r6, r25
    1bfa:	71 04       	cpc	r7, r1
    1bfc:	61 f4       	brne	.+24     	; 0x1c16 <main+0x16f2>
    1bfe:	c2 01       	movw	r24, r4
    1c00:	82 19       	sub	r24, r2
    1c02:	93 09       	sbc	r25, r3
    1c04:	85 36       	cpi	r24, 0x65	; 101
    1c06:	91 05       	cpc	r25, r1
    1c08:	0c f4       	brge	.+2      	; 0x1c0c <main+0x16e8>
    1c0a:	5a c1       	rjmp	.+692    	; 0x1ec0 <main+0x199c>
    1c0c:	12 01       	movw	r2, r4
    1c0e:	07 c0       	rjmp	.+14     	; 0x1c1e <main+0x16fa>
    1c10:	3c e1       	ldi	r19, 0x1C	; 28
    1c12:	63 2e       	mov	r6, r19
    1c14:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    1c16:	a2 e2       	ldi	r26, 0x22	; 34
    1c18:	6a 16       	cp	r6, r26
    1c1a:	71 04       	cpc	r7, r1
    1c1c:	61 f4       	brne	.+24     	; 0x1c36 <main+0x1712>
    1c1e:	c2 01       	movw	r24, r4
    1c20:	82 19       	sub	r24, r2
    1c22:	93 09       	sbc	r25, r3
    1c24:	81 5a       	subi	r24, 0xA1	; 161
    1c26:	9f 40       	sbci	r25, 0x0F	; 15
    1c28:	0c f4       	brge	.+2      	; 0x1c2c <main+0x1708>
    1c2a:	5c c1       	rjmp	.+696    	; 0x1ee4 <main+0x19c0>
    1c2c:	12 01       	movw	r2, r4
    1c2e:	07 c0       	rjmp	.+14     	; 0x1c3e <main+0x171a>
    1c30:	2d e1       	ldi	r18, 0x1D	; 29
    1c32:	62 2e       	mov	r6, r18
    1c34:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    1c36:	23 e2       	ldi	r18, 0x23	; 35
    1c38:	62 16       	cp	r6, r18
    1c3a:	71 04       	cpc	r7, r1
    1c3c:	69 f4       	brne	.+26     	; 0x1c58 <main+0x1734>
    1c3e:	c2 01       	movw	r24, r4
    1c40:	82 19       	sub	r24, r2
    1c42:	93 09       	sbc	r25, r3
    1c44:	0b 97       	sbiw	r24, 0x0b	; 11
    1c46:	0c f4       	brge	.+2      	; 0x1c4a <main+0x1726>
    1c48:	5a c1       	rjmp	.+692    	; 0x1efe <main+0x19da>
    1c4a:	94 e2       	ldi	r25, 0x24	; 36
    1c4c:	69 2e       	mov	r6, r25
    1c4e:	71 2c       	mov	r7, r1
    1c50:	70 c1       	rjmp	.+736    	; 0x1f32 <main+0x1a0e>
    1c52:	8e e1       	ldi	r24, 0x1E	; 30
    1c54:	68 2e       	mov	r6, r24
    1c56:	71 2c       	mov	r7, r1
				}


				//state actions
						
				switch (state){
    1c58:	f3 01       	movw	r30, r6
    1c5a:	e4 32       	cpi	r30, 0x24	; 36
    1c5c:	f1 05       	cpc	r31, r1
    1c5e:	08 f0       	brcs	.+2      	; 0x1c62 <main+0x173e>
    1c60:	68 c1       	rjmp	.+720    	; 0x1f32 <main+0x1a0e>
    1c62:	ea 56       	subi	r30, 0x6A	; 106
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	ee 0f       	add	r30, r30
    1c68:	ff 1f       	adc	r31, r31
    1c6a:	05 90       	lpm	r0, Z+
    1c6c:	f4 91       	lpm	r31, Z+
    1c6e:	e0 2d       	mov	r30, r0
    1c70:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    1c72:	80 91 d0 03 	lds	r24, 0x03D0
    1c76:	90 91 cc 03 	lds	r25, 0x03CC
    1c7a:	20 91 ce 03 	lds	r18, 0x03CE
    1c7e:	82 ff       	sbrs	r24, 2
    1c80:	08 c0       	rjmp	.+16     	; 0x1c92 <main+0x176e>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    1c82:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1c84:	27 7f       	andi	r18, 0xF7	; 247
    1c86:	20 93 ce 03 	sts	0x03CE, r18
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1c8a:	90 62       	ori	r25, 0x20	; 32
    1c8c:	90 93 cc 03 	sts	0x03CC, r25
    1c90:	50 c1       	rjmp	.+672    	; 0x1f32 <main+0x1a0e>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1c92:	9f 7d       	andi	r25, 0xDF	; 223
    1c94:	90 93 cc 03 	sts	0x03CC, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1c98:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1c9a:	28 60       	ori	r18, 0x08	; 8
    1c9c:	20 93 ce 03 	sts	0x03CE, r18
						if(print0 == 1){
    1ca0:	49 a9       	ldd	r20, Y+49	; 0x31
    1ca2:	5a a9       	ldd	r21, Y+50	; 0x32
    1ca4:	41 30       	cpi	r20, 0x01	; 1
    1ca6:	51 05       	cpc	r21, r1
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <main+0x1788>
    1caa:	49 c0       	rjmp	.+146    	; 0x1d3e <main+0x181a>
							OrangutanLCD::gotoXY(0,1);
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	61 e0       	ldi	r22, 0x01	; 1
    1cb0:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    1cb4:	8e e4       	ldi	r24, 0x4E	; 78
    1cb6:	93 e0       	ldi	r25, 0x03	; 3
    1cb8:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
    1cbc:	1a aa       	std	Y+50, r1	; 0x32
    1cbe:	19 aa       	std	Y+49, r1	; 0x31
    1cc0:	3e c0       	rjmp	.+124    	; 0x1d3e <main+0x181a>
							print0 = 0;
						}
					}
					break;
				case LOAD:
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    1cc2:	20 91 ce 03 	lds	r18, 0x03CE
    1cc6:	32 2f       	mov	r19, r18
    1cc8:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    1cca:	c2 01       	movw	r24, r4
    1ccc:	68 ec       	ldi	r22, 0xC8	; 200
    1cce:	70 e0       	ldi	r23, 0x00	; 0
    1cd0:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <__divmodhi4>
    1cd4:	84 36       	cpi	r24, 0x64	; 100
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	24 f4       	brge	.+8      	; 0x1ce2 <main+0x17be>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    1cda:	2c 7f       	andi	r18, 0xFC	; 252
    1cdc:	20 93 ce 03 	sts	0x03CE, r18
    1ce0:	03 c0       	rjmp	.+6      	; 0x1ce8 <main+0x17c4>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1ce2:	32 60       	ori	r19, 0x02	; 2
    1ce4:	30 93 ce 03 	sts	0x03CE, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    1ce8:	80 91 cc 03 	lds	r24, 0x03CC
    1cec:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1cee:	84 60       	ori	r24, 0x04	; 4
    1cf0:	80 93 cc 03 	sts	0x03CC, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    1cf4:	80 91 ce 03 	lds	r24, 0x03CE
    1cf8:	8b 7f       	andi	r24, 0xFB	; 251
    1cfa:	80 93 ce 03 	sts	0x03CE, r24
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9a a7       	std	Y+42, r25	; 0x2a
    1d04:	89 a7       	std	Y+41, r24	; 0x29
    1d06:	15 c1       	rjmp	.+554    	; 0x1f32 <main+0x1a0e>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    1d08:	80 91 ce 03 	lds	r24, 0x03CE
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1d0c:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    1d0e:	86 61       	ori	r24, 0x16	; 22
    1d10:	80 93 ce 03 	sts	0x03CE, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d14:	80 91 cc 03 	lds	r24, 0x03CC
    1d18:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1d1a:	8b 7f       	andi	r24, 0xFB	; 251
    1d1c:	80 93 cc 03 	sts	0x03CC, r24
    1d20:	fb c0       	rjmp	.+502    	; 0x1f18 <main+0x19f4>
					break;
				case FIXL:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
    1d22:	80 91 cc 03 	lds	r24, 0x03CC
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d26:	80 63       	ori	r24, 0x30	; 48
    1d28:	47 c0       	rjmp	.+142    	; 0x1db8 <main+0x1894>
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1d2a:	80 91 cc 03 	lds	r24, 0x03CC
    1d2e:	8f 7d       	andi	r24, 0xDF	; 223
    1d30:	80 93 cc 03 	sts	0x03CC, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1d34:	80 91 ce 03 	lds	r24, 0x03CE
    1d38:	88 60       	ori	r24, 0x08	; 8
    1d3a:	80 93 ce 03 	sts	0x03CE, r24
    1d3e:	1c 8a       	std	Y+20, r1	; 0x14
    1d40:	1b 8a       	std	Y+19, r1	; 0x13
    1d42:	f7 c0       	rjmp	.+494    	; 0x1f32 <main+0x1a0e>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1d44:	80 91 ce 03 	lds	r24, 0x03CE
    1d48:	8f 7e       	andi	r24, 0xEF	; 239
    1d4a:	80 93 ce 03 	sts	0x03CE, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d4e:	80 91 cc 03 	lds	r24, 0x03CC
    1d52:	80 62       	ori	r24, 0x20	; 32
    1d54:	80 93 cc 03 	sts	0x03CC, r24
    1d58:	ec c0       	rjmp	.+472    	; 0x1f32 <main+0x1a0e>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    1d5a:	80 91 cc 03 	lds	r24, 0x03CC
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1d5e:	80 63       	ori	r24, 0x30	; 48
    1d60:	80 93 cc 03 	sts	0x03CC, r24
    1d64:	21 e0       	ldi	r18, 0x01	; 1
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	3c 8b       	std	Y+20, r19	; 0x14
    1d6a:	2b 8b       	std	Y+19, r18	; 0x13
    1d6c:	e2 c0       	rjmp	.+452    	; 0x1f32 <main+0x1a0e>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    1d6e:	80 91 cd 03 	lds	r24, 0x03CD
    1d72:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1d74:	8b 7f       	andi	r24, 0xFB	; 251
    1d76:	80 93 cd 03 	sts	0x03CD, r24
    1d7a:	e1 cf       	rjmp	.-62     	; 0x1d3e <main+0x181a>
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1d7c:	80 91 cf 03 	lds	r24, 0x03CF
    1d80:	81 60       	ori	r24, 0x01	; 1
    1d82:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1d86:	80 91 ce 03 	lds	r24, 0x03CE
    1d8a:	8f 77       	andi	r24, 0x7F	; 127
    1d8c:	80 93 ce 03 	sts	0x03CE, r24
    1d90:	41 e0       	ldi	r20, 0x01	; 1
    1d92:	50 e0       	ldi	r21, 0x00	; 0
    1d94:	5e 8f       	std	Y+30, r21	; 0x1e
    1d96:	4d 8f       	std	Y+29, r20	; 0x1d
    1d98:	cc c0       	rjmp	.+408    	; 0x1f32 <main+0x1a0e>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1d9a:	80 91 cf 03 	lds	r24, 0x03CF
    1d9e:	8e 7f       	andi	r24, 0xFE	; 254
    1da0:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1da4:	80 91 ce 03 	lds	r24, 0x03CE
    1da8:	80 68       	ori	r24, 0x80	; 128
    1daa:	80 93 ce 03 	sts	0x03CE, r24
    1dae:	2e c0       	rjmp	.+92     	; 0x1e0c <main+0x18e8>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    1db0:	80 91 cc 03 	lds	r24, 0x03CC
    1db4:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1db6:	80 62       	ori	r24, 0x20	; 32
    1db8:	80 93 cc 03 	sts	0x03CC, r24
    1dbc:	a1 e0       	ldi	r26, 0x01	; 1
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	bc 8b       	std	Y+20, r27	; 0x14
    1dc2:	ab 8b       	std	Y+19, r26	; 0x13
    1dc4:	b6 c0       	rjmp	.+364    	; 0x1f32 <main+0x1a0e>
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    1dc6:	80 91 cd 03 	lds	r24, 0x03CD
    1dca:	8b 7f       	andi	r24, 0xFB	; 251
    1dcc:	80 93 cd 03 	sts	0x03CD, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    1dd0:	80 91 cf 03 	lds	r24, 0x03CF
    1dd4:	81 60       	ori	r24, 0x01	; 1
    1dd6:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    1dda:	80 91 ce 03 	lds	r24, 0x03CE
    1dde:	8f 77       	andi	r24, 0x7F	; 127
    1de0:	80 93 ce 03 	sts	0x03CE, r24
    1de4:	21 e0       	ldi	r18, 0x01	; 1
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	3e 8f       	std	Y+30, r19	; 0x1e
    1dea:	2d 8f       	std	Y+29, r18	; 0x1d
    1dec:	a8 cf       	rjmp	.-176    	; 0x1d3e <main+0x181a>
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    1dee:	80 91 cf 03 	lds	r24, 0x03CF
    1df2:	8e 7f       	andi	r24, 0xFE	; 254
    1df4:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    1df8:	80 91 ce 03 	lds	r24, 0x03CE
    1dfc:	80 68       	ori	r24, 0x80	; 128
    1dfe:	80 93 ce 03 	sts	0x03CE, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    1e02:	80 91 cd 03 	lds	r24, 0x03CD
    1e06:	87 7f       	andi	r24, 0xF7	; 247
    1e08:	80 93 cd 03 	sts	0x03CD, r24
    1e0c:	1e 8e       	std	Y+30, r1	; 0x1e
    1e0e:	1d 8e       	std	Y+29, r1	; 0x1d
    1e10:	96 cf       	rjmp	.-212    	; 0x1d3e <main+0x181a>
					break;
				//*************************************************
				case MOVED1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1e12:	80 91 cc 03 	lds	r24, 0x03CC
    1e16:	80 62       	ori	r24, 0x20	; 32
    1e18:	80 93 cc 03 	sts	0x03CC, r24
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	9c 8b       	std	Y+20, r25	; 0x14
    1e22:	8b 8b       	std	Y+19, r24	; 0x13
    1e24:	86 c0       	rjmp	.+268    	; 0x1f32 <main+0x1a0e>
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    1e26:	80 91 cf 03 	lds	r24, 0x03CF
    1e2a:	87 7f       	andi	r24, 0xF7	; 247
    1e2c:	80 93 cf 03 	sts	0x03CF, r24
    1e30:	86 cf       	rjmp	.-244    	; 0x1d3e <main+0x181a>
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    1e32:	80 91 cf 03 	lds	r24, 0x03CF
    1e36:	88 60       	ori	r24, 0x08	; 8
    1e38:	0e c0       	rjmp	.+28     	; 0x1e56 <main+0x1932>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    1e3a:	80 91 cd 03 	lds	r24, 0x03CD
    1e3e:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    1e40:	8f 7d       	andi	r24, 0xDF	; 223
    1e42:	80 93 cd 03 	sts	0x03CD, r24
    1e46:	21 e0       	ldi	r18, 0x01	; 1
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	38 af       	std	Y+56, r19	; 0x38
    1e4c:	2f ab       	std	Y+55, r18	; 0x37
    1e4e:	77 cf       	rjmp	.-274    	; 0x1d3e <main+0x181a>
					paperTowelMotor = 1;
					break;
				case D2RAISE:
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    1e50:	80 91 cf 03 	lds	r24, 0x03CF
    1e54:	8d 7f       	andi	r24, 0xFD	; 253
    1e56:	80 93 cf 03 	sts	0x03CF, r24
    1e5a:	6b c0       	rjmp	.+214    	; 0x1f32 <main+0x1a0e>
					break;
				case DRY2:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1e5c:	80 91 cc 03 	lds	r24, 0x03CC
    1e60:	80 62       	ori	r24, 0x20	; 32
    1e62:	80 93 cc 03 	sts	0x03CC, r24
    1e66:	41 e0       	ldi	r20, 0x01	; 1
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	5c 8b       	std	Y+20, r21	; 0x14
    1e6c:	4b 8b       	std	Y+19, r20	; 0x13
    1e6e:	61 c0       	rjmp	.+194    	; 0x1f32 <main+0x1a0e>
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    1e70:	80 91 cd 03 	lds	r24, 0x03CD
    1e74:	8f 7b       	andi	r24, 0xBF	; 191
    1e76:	80 93 cd 03 	sts	0x03CD, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    1e7a:	80 91 cf 03 	lds	r24, 0x03CF
    1e7e:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    1e80:	8b 7f       	andi	r24, 0xFB	; 251
    1e82:	80 93 cf 03 	sts	0x03CF, r24
    1e86:	18 ae       	std	Y+56, r1	; 0x38
    1e88:	1f aa       	std	Y+55, r1	; 0x37
    1e8a:	53 c0       	rjmp	.+166    	; 0x1f32 <main+0x1a0e>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    1e8c:	80 91 ce 03 	lds	r24, 0x03CE
    1e90:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    1e92:	80 61       	ori	r24, 0x10	; 16
    1e94:	80 93 ce 03 	sts	0x03CE, r24
    1e98:	1c 8a       	std	Y+20, r1	; 0x14
    1e9a:	1b 8a       	std	Y+19, r1	; 0x13
    1e9c:	0f e1       	ldi	r16, 0x1F	; 31
    1e9e:	60 2e       	mov	r6, r16
    1ea0:	71 2c       	mov	r7, r1
    1ea2:	47 c0       	rjmp	.+142    	; 0x1f32 <main+0x1a0e>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    1ea4:	80 91 cc 03 	lds	r24, 0x03CC
    1ea8:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1eaa:	80 62       	ori	r24, 0x20	; 32
    1eac:	80 93 cc 03 	sts	0x03CC, r24
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9c 8b       	std	Y+20, r25	; 0x14
    1eb6:	8b 8b       	std	Y+19, r24	; 0x13
    1eb8:	10 e2       	ldi	r17, 0x20	; 32
    1eba:	61 2e       	mov	r6, r17
    1ebc:	71 2c       	mov	r7, r1
    1ebe:	39 c0       	rjmp	.+114    	; 0x1f32 <main+0x1a0e>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    1ec0:	80 91 cc 03 	lds	r24, 0x03CC
    1ec4:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    1ec6:	84 60       	ori	r24, 0x04	; 4
    1ec8:	80 93 cc 03 	sts	0x03CC, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    1ecc:	80 91 ce 03 	lds	r24, 0x03CE
    1ed0:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    1ed2:	8f 7e       	andi	r24, 0xEF	; 239
    1ed4:	80 93 ce 03 	sts	0x03CE, r24
    1ed8:	1c 8a       	std	Y+20, r1	; 0x14
    1eda:	1b 8a       	std	Y+19, r1	; 0x13
    1edc:	b1 e2       	ldi	r27, 0x21	; 33
    1ede:	6b 2e       	mov	r6, r27
    1ee0:	71 2c       	mov	r7, r1
    1ee2:	27 c0       	rjmp	.+78     	; 0x1f32 <main+0x1a0e>
					break;
    1ee4:	a2 e2       	ldi	r26, 0x22	; 34
    1ee6:	6a 2e       	mov	r6, r26
    1ee8:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    1eea:	80 91 cc 03 	lds	r24, 0x03CC
    1eee:	8d 7f       	andi	r24, 0xFD	; 253
    1ef0:	80 93 cc 03 	sts	0x03CC, r24
    1ef4:	a1 e0       	ldi	r26, 0x01	; 1
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	ba a7       	std	Y+42, r27	; 0x2a
    1efa:	a9 a7       	std	Y+41, r26	; 0x29
    1efc:	1a c0       	rjmp	.+52     	; 0x1f32 <main+0x1a0e>
					plateLoadMotor = 1;
					break;
    1efe:	f3 e2       	ldi	r31, 0x23	; 35
    1f00:	6f 2e       	mov	r6, r31
    1f02:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    1f04:	80 91 cc 03 	lds	r24, 0x03CC
    1f08:	8b 7f       	andi	r24, 0xFB	; 251
    1f0a:	80 93 cc 03 	sts	0x03CC, r24
					if(print35 == 1){
    1f0e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f10:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f12:	21 30       	cpi	r18, 0x01	; 1
    1f14:	31 05       	cpc	r19, r1
    1f16:	19 f0       	breq	.+6      	; 0x1f1e <main+0x19fa>
    1f18:	1a a6       	std	Y+42, r1	; 0x2a
    1f1a:	19 a6       	std	Y+41, r1	; 0x29
    1f1c:	0a c0       	rjmp	.+20     	; 0x1f32 <main+0x1a0e>
						OrangutanLCD::clear();
    1f1e:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    1f22:	8c e5       	ldi	r24, 0x5C	; 92
    1f24:	93 e0       	ldi	r25, 0x03	; 3
    1f26:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
    1f2a:	1a a6       	std	Y+42, r1	; 0x2a
    1f2c:	19 a6       	std	Y+41, r1	; 0x29
    1f2e:	1e 86       	std	Y+14, r1	; 0x0e
    1f30:	1d 86       	std	Y+13, r1	; 0x0d
					}
					break;
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    1f32:	4d b7       	in	r20, 0x3d	; 61
    1f34:	5e b7       	in	r21, 0x3e	; 62
    1f36:	42 51       	subi	r20, 0x12	; 18
    1f38:	50 40       	sbci	r21, 0x00	; 0
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	5e bf       	out	0x3e, r21	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	4d bf       	out	0x3d, r20	; 61
    1f44:	ed b7       	in	r30, 0x3d	; 61
    1f46:	fe b7       	in	r31, 0x3e	; 62
    1f48:	31 96       	adiw	r30, 0x01	; 1
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	ad b7       	in	r26, 0x3d	; 61
    1f50:	be b7       	in	r27, 0x3e	; 62
    1f52:	12 96       	adiw	r26, 0x02	; 2
    1f54:	9c 93       	st	X, r25
    1f56:	8e 93       	st	-X, r24
    1f58:	11 97       	sbiw	r26, 0x01	; 1
    1f5a:	93 83       	std	Z+3, r25	; 0x03
    1f5c:	82 83       	std	Z+2, r24	; 0x02
    1f5e:	95 83       	std	Z+5, r25	; 0x05
    1f60:	84 83       	std	Z+4, r24	; 0x04
    1f62:	97 83       	std	Z+7, r25	; 0x07
    1f64:	86 83       	std	Z+6, r24	; 0x06
    1f66:	21 e0       	ldi	r18, 0x01	; 1
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	31 87       	std	Z+9, r19	; 0x09
    1f6c:	20 87       	std	Z+8, r18	; 0x08
    1f6e:	33 87       	std	Z+11, r19	; 0x0b
    1f70:	22 87       	std	Z+10, r18	; 0x0a
    1f72:	35 87       	std	Z+13, r19	; 0x0d
    1f74:	24 87       	std	Z+12, r18	; 0x0c
    1f76:	37 87       	std	Z+15, r19	; 0x0f
    1f78:	26 87       	std	Z+14, r18	; 0x0e
    1f7a:	31 8b       	std	Z+17, r19	; 0x11
    1f7c:	20 8b       	std	Z+16, r18	; 0x10
    1f7e:	c2 01       	movw	r24, r4
    1f80:	b1 01       	movw	r22, r2
    1f82:	23 96       	adiw	r28, 0x03	; 3
    1f84:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f86:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f88:	23 97       	sbiw	r28, 0x03	; 3
    1f8a:	29 a5       	ldd	r18, Y+41	; 0x29
    1f8c:	3a a5       	ldd	r19, Y+42	; 0x2a
    1f8e:	0b 89       	ldd	r16, Y+19	; 0x13
    1f90:	1c 89       	ldd	r17, Y+20	; 0x14
    1f92:	ee 24       	eor	r14, r14
    1f94:	ff 24       	eor	r15, r15
    1f96:	cd 8c       	ldd	r12, Y+29	; 0x1d
    1f98:	de 8c       	ldd	r13, Y+30	; 0x1e
    1f9a:	af a8       	ldd	r10, Y+55	; 0x37
    1f9c:	b8 ac       	ldd	r11, Y+56	; 0x38
    1f9e:	e2 e0       	ldi	r30, 0x02	; 2
    1fa0:	8e 2e       	mov	r8, r30
    1fa2:	91 2c       	mov	r9, r1
    1fa4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    1fa8:	4d b7       	in	r20, 0x3d	; 61
    1faa:	5e b7       	in	r21, 0x3e	; 62
    1fac:	4e 5e       	subi	r20, 0xEE	; 238
    1fae:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	5e bf       	out	0x3e, r21	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	4d bf       	out	0x3d, r20	; 61
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("SECOND B");
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    1fc2:	54 e2       	ldi	r21, 0x24	; 36
    1fc4:	65 16       	cp	r6, r21
    1fc6:	71 04       	cpc	r7, r1
    1fc8:	11 f4       	brne	.+4      	; 0x1fce <main+0x1aaa>
    1fca:	0c 94 e5 18 	jmp	0x31ca	; 0x31ca <main+0x2ca6>
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    1fce:	08 94       	sec
    1fd0:	41 1c       	adc	r4, r1
    1fd2:	51 1c       	adc	r5, r1
    1fd4:	7a cc       	rjmp	.-1804   	; 0x18ca <main+0x13a6>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    1fdc:	88 23       	and	r24, r24
    1fde:	11 f4       	brne	.+4      	; 0x1fe4 <main+0x1ac0>
    1fe0:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <main+0x2d14>
			OrangutanLCD::gotoXY(7,0);
    1fe4:	87 e0       	ldi	r24, 0x07	; 7
    1fe6:	60 e0       	ldi	r22, 0x00	; 0
    1fe8:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("BOTH B");
    1fec:	82 e7       	ldi	r24, 0x72	; 114
    1fee:	93 e0       	ldi	r25, 0x03	; 3
    1ff0:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
			OrangutanLCD::print("DEBUG");
    1ff4:	8d e5       	ldi	r24, 0x5D	; 93
    1ff6:	91 e0       	ldi	r25, 0x01	; 1
    1ff8:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    1ffc:	80 91 cc 03 	lds	r24, 0x03CC
    2000:	80 62       	ori	r24, 0x20	; 32
    2002:	80 93 cc 03 	sts	0x03CC, r24
    2006:	1e aa       	std	Y+54, r1	; 0x36
    2008:	1d aa       	std	Y+53, r1	; 0x35
    200a:	66 24       	eor	r6, r6
    200c:	77 24       	eor	r7, r7
    200e:	18 86       	std	Y+8, r1	; 0x08
    2010:	1f 82       	std	Y+7, r1	; 0x07
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	98 ab       	std	Y+48, r25	; 0x30
    2018:	8f a7       	std	Y+47, r24	; 0x2f
    201a:	18 a6       	std	Y+40, r1	; 0x28
    201c:	1f a2       	std	Y+39, r1	; 0x27
    201e:	1a a2       	std	Y+34, r1	; 0x22
    2020:	19 a2       	std	Y+33, r1	; 0x21
    2022:	1c 8e       	std	Y+28, r1	; 0x1c
    2024:	1b 8e       	std	Y+27, r1	; 0x1b
    2026:	22 24       	eor	r2, r2
    2028:	33 24       	eor	r3, r3
    202a:	9a 8b       	std	Y+18, r25	; 0x12
    202c:	89 8b       	std	Y+17, r24	; 0x11
    202e:	44 24       	eor	r4, r4
    2030:	55 24       	eor	r5, r5
    2032:	9c 87       	std	Y+12, r25	; 0x0c
    2034:	8b 87       	std	Y+11, r24	; 0x0b
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    2036:	84 e4       	ldi	r24, 0x44	; 68
    2038:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2042:	85 e4       	ldi	r24, 0x45	; 69
    2044:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    2048:	0e 94 a8 19 	call	0x3350	; 0x3350 <_Z11i2c_readAckv>
    204c:	80 93 d0 03 	sts	0x03D0, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2050:	0e 94 b2 19 	call	0x3364	; 0x3364 <_Z11i2c_readNakv>
    2054:	80 93 d1 03 	sts	0x03D1, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    2058:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>
				
				if(state != INIT){
    205c:	61 14       	cp	r6, r1
    205e:	71 04       	cpc	r7, r1
    2060:	b9 f0       	breq	.+46     	; 0x2090 <main+0x1b6c>
					OrangutanLCD::gotoXY(6,1);
    2062:	86 e0       	ldi	r24, 0x06	; 6
    2064:	61 e0       	ldi	r22, 0x01	; 1
    2066:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("       ");
    206a:	89 e7       	ldi	r24, 0x79	; 121
    206c:	93 e0       	ldi	r25, 0x03	; 3
    206e:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
					OrangutanLCD::gotoXY(0,1);
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	61 e0       	ldi	r22, 0x01	; 1
    2076:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    207a:	87 e4       	ldi	r24, 0x47	; 71
    207c:	93 e0       	ldi	r25, 0x03	; 3
    207e:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
    2082:	b3 01       	movw	r22, r6
    2084:	88 27       	eor	r24, r24
    2086:	77 fd       	sbrc	r23, 7
    2088:	80 95       	com	r24
    208a:	98 2f       	mov	r25, r24
    208c:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <_ZN12OrangutanLCD5printEl>
					OrangutanLCD::print(state);
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    2090:	c2 01       	movw	r24, r4
    2092:	be 01       	movw	r22, r28
    2094:	6f 5f       	subi	r22, 0xFF	; 255
    2096:	7f 4f       	sbci	r23, 0xFF	; 255
    2098:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>

				//state transitions
	
				if(state == INIT && buttonTriggered){
    209c:	61 14       	cp	r6, r1
    209e:	71 04       	cpc	r7, r1
    20a0:	21 f4       	brne	.+8      	; 0x20aa <main+0x1b86>
    20a2:	88 23       	and	r24, r24
    20a4:	e1 f1       	breq	.+120    	; 0x211e <main+0x1bfa>
    20a6:	12 01       	movw	r2, r4
    20a8:	04 c0       	rjmp	.+8      	; 0x20b2 <main+0x1b8e>
					buttonTriggered = false;
					state ++;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	69 16       	cp	r6, r25
    20ae:	71 04       	cpc	r7, r1
    20b0:	41 f4       	brne	.+16     	; 0x20c2 <main+0x1b9e>
    20b2:	c2 01       	movw	r24, r4
    20b4:	82 19       	sub	r24, r2
    20b6:	93 09       	sbc	r25, r3
    20b8:	81 5a       	subi	r24, 0xA1	; 161
    20ba:	9f 40       	sbci	r25, 0x0F	; 15
    20bc:	ec f1       	brlt	.+122    	; 0x2138 <main+0x1c14>
    20be:	12 01       	movw	r2, r4
    20c0:	04 c0       	rjmp	.+8      	; 0x20ca <main+0x1ba6>
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    20c2:	b2 e0       	ldi	r27, 0x02	; 2
    20c4:	6b 16       	cp	r6, r27
    20c6:	71 04       	cpc	r7, r1
    20c8:	49 f4       	brne	.+18     	; 0x20dc <main+0x1bb8>
    20ca:	c2 01       	movw	r24, r4
    20cc:	82 19       	sub	r24, r2
    20ce:	93 09       	sbc	r25, r3
    20d0:	85 36       	cpi	r24, 0x65	; 101
    20d2:	91 05       	cpc	r25, r1
    20d4:	0c f4       	brge	.+2      	; 0x20d8 <main+0x1bb4>
    20d6:	40 c0       	rjmp	.+128    	; 0x2158 <main+0x1c34>
    20d8:	12 01       	movw	r2, r4
    20da:	04 c0       	rjmp	.+8      	; 0x20e4 <main+0x1bc0>
					state ++;
					counterRef = counter;
				}
				if(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    20dc:	23 e0       	ldi	r18, 0x03	; 3
    20de:	62 16       	cp	r6, r18
    20e0:	71 04       	cpc	r7, r1
    20e2:	31 f4       	brne	.+12     	; 0x20f0 <main+0x1bcc>
    20e4:	80 91 d0 03 	lds	r24, 0x03D0
    20e8:	81 fd       	sbrc	r24, 1
    20ea:	46 c0       	rjmp	.+140    	; 0x2178 <main+0x1c54>
    20ec:	12 01       	movw	r2, r4
    20ee:	04 c0       	rjmp	.+8      	; 0x20f8 <main+0x1bd4>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    20f0:	34 e0       	ldi	r19, 0x04	; 4
    20f2:	63 16       	cp	r6, r19
    20f4:	71 04       	cpc	r7, r1
    20f6:	31 f4       	brne	.+12     	; 0x2104 <main+0x1be0>
    20f8:	80 91 d0 03 	lds	r24, 0x03D0
    20fc:	83 fd       	sbrc	r24, 3
    20fe:	4c c0       	rjmp	.+152    	; 0x2198 <main+0x1c74>
    2100:	12 01       	movw	r2, r4
    2102:	04 c0       	rjmp	.+8      	; 0x210c <main+0x1be8>
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    2104:	45 e0       	ldi	r20, 0x05	; 5
    2106:	64 16       	cp	r6, r20
    2108:	71 04       	cpc	r7, r1
    210a:	49 f4       	brne	.+18     	; 0x211e <main+0x1bfa>
    210c:	c2 01       	movw	r24, r4
    210e:	82 19       	sub	r24, r2
    2110:	93 09       	sbc	r25, r3
    2112:	85 36       	cpi	r24, 0x65	; 101
    2114:	91 05       	cpc	r25, r1
    2116:	0c f4       	brge	.+2      	; 0x211a <main+0x1bf6>
    2118:	4d c0       	rjmp	.+154    	; 0x21b4 <main+0x1c90>
    211a:	12 01       	movw	r2, r4
    211c:	04 c0       	rjmp	.+8      	; 0x2126 <main+0x1c02>
					state ++;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    211e:	56 e0       	ldi	r21, 0x06	; 6
    2120:	65 16       	cp	r6, r21
    2122:	71 04       	cpc	r7, r1
    2124:	61 f4       	brne	.+24     	; 0x213e <main+0x1c1a>
    2126:	c2 01       	movw	r24, r4
    2128:	82 19       	sub	r24, r2
    212a:	93 09       	sbc	r25, r3
    212c:	81 5a       	subi	r24, 0xA1	; 161
    212e:	9f 40       	sbci	r25, 0x0F	; 15
    2130:	0c f4       	brge	.+2      	; 0x2134 <main+0x1c10>
    2132:	50 c0       	rjmp	.+160    	; 0x21d4 <main+0x1cb0>
    2134:	12 01       	movw	r2, r4
    2136:	07 c0       	rjmp	.+14     	; 0x2146 <main+0x1c22>
    2138:	21 e0       	ldi	r18, 0x01	; 1
    213a:	62 2e       	mov	r6, r18
    213c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    213e:	b7 e0       	ldi	r27, 0x07	; 7
    2140:	6b 16       	cp	r6, r27
    2142:	71 04       	cpc	r7, r1
    2144:	61 f4       	brne	.+24     	; 0x215e <main+0x1c3a>
    2146:	c2 01       	movw	r24, r4
    2148:	82 19       	sub	r24, r2
    214a:	93 09       	sbc	r25, r3
    214c:	85 36       	cpi	r24, 0x65	; 101
    214e:	91 05       	cpc	r25, r1
    2150:	0c f4       	brge	.+2      	; 0x2154 <main+0x1c30>
    2152:	50 c0       	rjmp	.+160    	; 0x21f4 <main+0x1cd0>
    2154:	12 01       	movw	r2, r4
    2156:	07 c0       	rjmp	.+14     	; 0x2166 <main+0x1c42>
    2158:	92 e0       	ldi	r25, 0x02	; 2
    215a:	69 2e       	mov	r6, r25
    215c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    215e:	28 e0       	ldi	r18, 0x08	; 8
    2160:	62 16       	cp	r6, r18
    2162:	71 04       	cpc	r7, r1
    2164:	61 f4       	brne	.+24     	; 0x217e <main+0x1c5a>
    2166:	c2 01       	movw	r24, r4
    2168:	82 19       	sub	r24, r2
    216a:	93 09       	sbc	r25, r3
    216c:	85 36       	cpi	r24, 0x65	; 101
    216e:	91 05       	cpc	r25, r1
    2170:	0c f4       	brge	.+2      	; 0x2174 <main+0x1c50>
    2172:	4e c0       	rjmp	.+156    	; 0x2210 <main+0x1cec>
    2174:	12 01       	movw	r2, r4
    2176:	07 c0       	rjmp	.+14     	; 0x2186 <main+0x1c62>
    2178:	83 e0       	ldi	r24, 0x03	; 3
    217a:	68 2e       	mov	r6, r24
    217c:	71 2c       	mov	r7, r1
					state ++;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    217e:	39 e0       	ldi	r19, 0x09	; 9
    2180:	63 16       	cp	r6, r19
    2182:	71 04       	cpc	r7, r1
    2184:	61 f4       	brne	.+24     	; 0x219e <main+0x1c7a>
    2186:	c2 01       	movw	r24, r4
    2188:	82 19       	sub	r24, r2
    218a:	93 09       	sbc	r25, r3
    218c:	81 5d       	subi	r24, 0xD1	; 209
    218e:	97 40       	sbci	r25, 0x07	; 7
    2190:	0c f4       	brge	.+2      	; 0x2194 <main+0x1c70>
    2192:	4e c0       	rjmp	.+156    	; 0x2230 <main+0x1d0c>
    2194:	12 01       	movw	r2, r4
    2196:	07 c0       	rjmp	.+14     	; 0x21a6 <main+0x1c82>
    2198:	04 e0       	ldi	r16, 0x04	; 4
    219a:	60 2e       	mov	r6, r16
    219c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    219e:	5a e0       	ldi	r21, 0x0A	; 10
    21a0:	65 16       	cp	r6, r21
    21a2:	71 04       	cpc	r7, r1
    21a4:	51 f4       	brne	.+20     	; 0x21ba <main+0x1c96>
    21a6:	c2 01       	movw	r24, r4
    21a8:	82 19       	sub	r24, r2
    21aa:	93 09       	sbc	r25, r3
    21ac:	85 36       	cpi	r24, 0x65	; 101
    21ae:	91 05       	cpc	r25, r1
    21b0:	44 f4       	brge	.+16     	; 0x21c2 <main+0x1c9e>
    21b2:	4e c0       	rjmp	.+156    	; 0x2250 <main+0x1d2c>
    21b4:	15 e0       	ldi	r17, 0x05	; 5
    21b6:	61 2e       	mov	r6, r17
    21b8:	71 2c       	mov	r7, r1
					state ++;
				}
				if(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    21ba:	8b e0       	ldi	r24, 0x0B	; 11
    21bc:	68 16       	cp	r6, r24
    21be:	71 04       	cpc	r7, r1
    21c0:	61 f4       	brne	.+24     	; 0x21da <main+0x1cb6>
    21c2:	c2 01       	movw	r24, r4
    21c4:	82 19       	sub	r24, r2
    21c6:	93 09       	sbc	r25, r3
    21c8:	81 5d       	subi	r24, 0xD1	; 209
    21ca:	97 40       	sbci	r25, 0x07	; 7
    21cc:	0c f4       	brge	.+2      	; 0x21d0 <main+0x1cac>
    21ce:	50 c0       	rjmp	.+160    	; 0x2270 <main+0x1d4c>
    21d0:	12 01       	movw	r2, r4
    21d2:	07 c0       	rjmp	.+14     	; 0x21e2 <main+0x1cbe>
    21d4:	b6 e0       	ldi	r27, 0x06	; 6
    21d6:	6b 2e       	mov	r6, r27
    21d8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    21da:	bc e0       	ldi	r27, 0x0C	; 12
    21dc:	6b 16       	cp	r6, r27
    21de:	71 04       	cpc	r7, r1
    21e0:	61 f4       	brne	.+24     	; 0x21fa <main+0x1cd6>
    21e2:	c2 01       	movw	r24, r4
    21e4:	82 19       	sub	r24, r2
    21e6:	93 09       	sbc	r25, r3
    21e8:	85 36       	cpi	r24, 0x65	; 101
    21ea:	91 05       	cpc	r25, r1
    21ec:	0c f4       	brge	.+2      	; 0x21f0 <main+0x1ccc>
    21ee:	50 c0       	rjmp	.+160    	; 0x2290 <main+0x1d6c>
    21f0:	12 01       	movw	r2, r4
    21f2:	07 c0       	rjmp	.+14     	; 0x2202 <main+0x1cde>
    21f4:	a7 e0       	ldi	r26, 0x07	; 7
    21f6:	6a 2e       	mov	r6, r26
    21f8:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    21fa:	2d e0       	ldi	r18, 0x0D	; 13
    21fc:	62 16       	cp	r6, r18
    21fe:	71 04       	cpc	r7, r1
    2200:	51 f4       	brne	.+20     	; 0x2216 <main+0x1cf2>
    2202:	c2 01       	movw	r24, r4
    2204:	82 19       	sub	r24, r2
    2206:	93 09       	sbc	r25, r3
    2208:	81 5d       	subi	r24, 0xD1	; 209
    220a:	97 40       	sbci	r25, 0x07	; 7
    220c:	44 f4       	brge	.+16     	; 0x221e <main+0x1cfa>
    220e:	50 c0       	rjmp	.+160    	; 0x22b0 <main+0x1d8c>
    2210:	f8 e0       	ldi	r31, 0x08	; 8
    2212:	6f 2e       	mov	r6, r31
    2214:	71 2c       	mov	r7, r1
					state ++;
					counterRef14 = counter;
				}
				if(state == B1STOP2 && counter - counterRef > totalStepLength2*fixtureMotorBrush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    2216:	4e e0       	ldi	r20, 0x0E	; 14
    2218:	64 16       	cp	r6, r20
    221a:	71 04       	cpc	r7, r1
    221c:	61 f4       	brne	.+24     	; 0x2236 <main+0x1d12>
    221e:	c2 01       	movw	r24, r4
    2220:	82 19       	sub	r24, r2
    2222:	93 09       	sbc	r25, r3
    2224:	81 5a       	subi	r24, 0xA1	; 161
    2226:	9f 40       	sbci	r25, 0x0F	; 15
    2228:	0c f4       	brge	.+2      	; 0x222c <main+0x1d08>
    222a:	52 c0       	rjmp	.+164    	; 0x22d0 <main+0x1dac>
    222c:	12 01       	movw	r2, r4
    222e:	07 c0       	rjmp	.+14     	; 0x223e <main+0x1d1a>
    2230:	e9 e0       	ldi	r30, 0x09	; 9
    2232:	6e 2e       	mov	r6, r30
    2234:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    2236:	8f e0       	ldi	r24, 0x0F	; 15
    2238:	68 16       	cp	r6, r24
    223a:	71 04       	cpc	r7, r1
    223c:	61 f4       	brne	.+24     	; 0x2256 <main+0x1d32>
    223e:	c2 01       	movw	r24, r4
    2240:	82 19       	sub	r24, r2
    2242:	93 09       	sbc	r25, r3
    2244:	85 36       	cpi	r24, 0x65	; 101
    2246:	91 05       	cpc	r25, r1
    2248:	0c f4       	brge	.+2      	; 0x224c <main+0x1d28>
    224a:	52 c0       	rjmp	.+164    	; 0x22f0 <main+0x1dcc>
    224c:	12 01       	movw	r2, r4
    224e:	07 c0       	rjmp	.+14     	; 0x225e <main+0x1d3a>
    2250:	7a e0       	ldi	r23, 0x0A	; 10
    2252:	67 2e       	mov	r6, r23
    2254:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    2256:	90 e1       	ldi	r25, 0x10	; 16
    2258:	69 16       	cp	r6, r25
    225a:	71 04       	cpc	r7, r1
    225c:	61 f4       	brne	.+24     	; 0x2276 <main+0x1d52>
    225e:	c2 01       	movw	r24, r4
    2260:	82 19       	sub	r24, r2
    2262:	93 09       	sbc	r25, r3
    2264:	85 36       	cpi	r24, 0x65	; 101
    2266:	91 05       	cpc	r25, r1
    2268:	0c f4       	brge	.+2      	; 0x226c <main+0x1d48>
    226a:	52 c0       	rjmp	.+164    	; 0x2310 <main+0x1dec>
    226c:	12 01       	movw	r2, r4
    226e:	07 c0       	rjmp	.+14     	; 0x227e <main+0x1d5a>
    2270:	6b e0       	ldi	r22, 0x0B	; 11
    2272:	66 2e       	mov	r6, r22
    2274:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2276:	a1 e1       	ldi	r26, 0x11	; 17
    2278:	6a 16       	cp	r6, r26
    227a:	71 04       	cpc	r7, r1
    227c:	61 f4       	brne	.+24     	; 0x2296 <main+0x1d72>
    227e:	c2 01       	movw	r24, r4
    2280:	82 19       	sub	r24, r2
    2282:	93 09       	sbc	r25, r3
    2284:	81 5d       	subi	r24, 0xD1	; 209
    2286:	97 40       	sbci	r25, 0x07	; 7
    2288:	0c f4       	brge	.+2      	; 0x228c <main+0x1d68>
    228a:	52 c0       	rjmp	.+164    	; 0x2330 <main+0x1e0c>
    228c:	12 01       	movw	r2, r4
    228e:	07 c0       	rjmp	.+14     	; 0x229e <main+0x1d7a>
    2290:	5c e0       	ldi	r21, 0x0C	; 12
    2292:	65 2e       	mov	r6, r21
    2294:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    2296:	22 e1       	ldi	r18, 0x12	; 18
    2298:	62 16       	cp	r6, r18
    229a:	71 04       	cpc	r7, r1
    229c:	61 f4       	brne	.+24     	; 0x22b6 <main+0x1d92>
    229e:	c2 01       	movw	r24, r4
    22a0:	82 19       	sub	r24, r2
    22a2:	93 09       	sbc	r25, r3
    22a4:	85 36       	cpi	r24, 0x65	; 101
    22a6:	91 05       	cpc	r25, r1
    22a8:	0c f4       	brge	.+2      	; 0x22ac <main+0x1d88>
    22aa:	52 c0       	rjmp	.+164    	; 0x2350 <main+0x1e2c>
    22ac:	12 01       	movw	r2, r4
    22ae:	07 c0       	rjmp	.+14     	; 0x22be <main+0x1d9a>
    22b0:	4d e0       	ldi	r20, 0x0D	; 13
    22b2:	64 2e       	mov	r6, r20
    22b4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    22b6:	33 e1       	ldi	r19, 0x13	; 19
    22b8:	63 16       	cp	r6, r19
    22ba:	71 04       	cpc	r7, r1
    22bc:	61 f4       	brne	.+24     	; 0x22d6 <main+0x1db2>
    22be:	c2 01       	movw	r24, r4
    22c0:	82 19       	sub	r24, r2
    22c2:	93 09       	sbc	r25, r3
    22c4:	81 5d       	subi	r24, 0xD1	; 209
    22c6:	97 40       	sbci	r25, 0x07	; 7
    22c8:	0c f4       	brge	.+2      	; 0x22cc <main+0x1da8>
    22ca:	52 c0       	rjmp	.+164    	; 0x2370 <main+0x1e4c>
    22cc:	12 01       	movw	r2, r4
    22ce:	07 c0       	rjmp	.+14     	; 0x22de <main+0x1dba>
    22d0:	3e e0       	ldi	r19, 0x0E	; 14
    22d2:	63 2e       	mov	r6, r19
    22d4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    22d6:	54 e1       	ldi	r21, 0x14	; 20
    22d8:	65 16       	cp	r6, r21
    22da:	71 04       	cpc	r7, r1
    22dc:	61 f4       	brne	.+24     	; 0x22f6 <main+0x1dd2>
    22de:	c2 01       	movw	r24, r4
    22e0:	82 19       	sub	r24, r2
    22e2:	93 09       	sbc	r25, r3
    22e4:	85 36       	cpi	r24, 0x65	; 101
    22e6:	91 05       	cpc	r25, r1
    22e8:	0c f4       	brge	.+2      	; 0x22ec <main+0x1dc8>
    22ea:	50 c0       	rjmp	.+160    	; 0x238c <main+0x1e68>
    22ec:	12 01       	movw	r2, r4
    22ee:	07 c0       	rjmp	.+14     	; 0x22fe <main+0x1dda>
    22f0:	2f e0       	ldi	r18, 0x0F	; 15
    22f2:	62 2e       	mov	r6, r18
    22f4:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    22f6:	85 e1       	ldi	r24, 0x15	; 21
    22f8:	68 16       	cp	r6, r24
    22fa:	71 04       	cpc	r7, r1
    22fc:	61 f4       	brne	.+24     	; 0x2316 <main+0x1df2>
    22fe:	c2 01       	movw	r24, r4
    2300:	82 19       	sub	r24, r2
    2302:	93 09       	sbc	r25, r3
    2304:	81 5d       	subi	r24, 0xD1	; 209
    2306:	97 40       	sbci	r25, 0x07	; 7
    2308:	0c f4       	brge	.+2      	; 0x230c <main+0x1de8>
    230a:	51 c0       	rjmp	.+162    	; 0x23ae <main+0x1e8a>
    230c:	12 01       	movw	r2, r4
    230e:	07 c0       	rjmp	.+14     	; 0x231e <main+0x1dfa>
    2310:	90 e1       	ldi	r25, 0x10	; 16
    2312:	69 2e       	mov	r6, r25
    2314:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    2316:	b6 e1       	ldi	r27, 0x16	; 22
    2318:	6b 16       	cp	r6, r27
    231a:	71 04       	cpc	r7, r1
    231c:	61 f4       	brne	.+24     	; 0x2336 <main+0x1e12>
    231e:	c2 01       	movw	r24, r4
    2320:	82 19       	sub	r24, r2
    2322:	93 09       	sbc	r25, r3
    2324:	85 36       	cpi	r24, 0x65	; 101
    2326:	91 05       	cpc	r25, r1
    2328:	0c f4       	brge	.+2      	; 0x232c <main+0x1e08>
    232a:	53 c0       	rjmp	.+166    	; 0x23d2 <main+0x1eae>
    232c:	12 01       	movw	r2, r4
    232e:	07 c0       	rjmp	.+14     	; 0x233e <main+0x1e1a>
    2330:	81 e1       	ldi	r24, 0x11	; 17
    2332:	68 2e       	mov	r6, r24
    2334:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    2336:	27 e1       	ldi	r18, 0x17	; 23
    2338:	62 16       	cp	r6, r18
    233a:	71 04       	cpc	r7, r1
    233c:	61 f4       	brne	.+24     	; 0x2356 <main+0x1e32>
    233e:	c2 01       	movw	r24, r4
    2340:	82 19       	sub	r24, r2
    2342:	93 09       	sbc	r25, r3
    2344:	81 5a       	subi	r24, 0xA1	; 161
    2346:	9f 40       	sbci	r25, 0x0F	; 15
    2348:	0c f4       	brge	.+2      	; 0x234c <main+0x1e28>
    234a:	53 c0       	rjmp	.+166    	; 0x23f2 <main+0x1ece>
    234c:	12 01       	movw	r2, r4
    234e:	07 c0       	rjmp	.+14     	; 0x235e <main+0x1e3a>
    2350:	02 e1       	ldi	r16, 0x12	; 18
    2352:	60 2e       	mov	r6, r16
    2354:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    2356:	48 e1       	ldi	r20, 0x18	; 24
    2358:	64 16       	cp	r6, r20
    235a:	71 04       	cpc	r7, r1
    235c:	61 f4       	brne	.+24     	; 0x2376 <main+0x1e52>
    235e:	c2 01       	movw	r24, r4
    2360:	82 19       	sub	r24, r2
    2362:	93 09       	sbc	r25, r3
    2364:	85 36       	cpi	r24, 0x65	; 101
    2366:	91 05       	cpc	r25, r1
    2368:	0c f4       	brge	.+2      	; 0x236c <main+0x1e48>
    236a:	51 c0       	rjmp	.+162    	; 0x240e <main+0x1eea>
    236c:	12 01       	movw	r2, r4
    236e:	07 c0       	rjmp	.+14     	; 0x237e <main+0x1e5a>
    2370:	13 e1       	ldi	r17, 0x13	; 19
    2372:	61 2e       	mov	r6, r17
    2374:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2376:	59 e1       	ldi	r21, 0x19	; 25
    2378:	65 16       	cp	r6, r21
    237a:	71 04       	cpc	r7, r1
    237c:	51 f4       	brne	.+20     	; 0x2392 <main+0x1e6e>
    237e:	c2 01       	movw	r24, r4
    2380:	82 19       	sub	r24, r2
    2382:	93 09       	sbc	r25, r3
    2384:	81 5a       	subi	r24, 0xA1	; 161
    2386:	9f 40       	sbci	r25, 0x0F	; 15
    2388:	44 f4       	brge	.+16     	; 0x239a <main+0x1e76>
    238a:	4e c0       	rjmp	.+156    	; 0x2428 <main+0x1f04>
    238c:	b4 e1       	ldi	r27, 0x14	; 20
    238e:	6b 2e       	mov	r6, r27
    2390:	71 2c       	mov	r7, r1
					state ++;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    2392:	ba e1       	ldi	r27, 0x1A	; 26
    2394:	6b 16       	cp	r6, r27
    2396:	71 04       	cpc	r7, r1
    2398:	69 f4       	brne	.+26     	; 0x23b4 <main+0x1e90>
    239a:	c2 01       	movw	r24, r4
    239c:	82 19       	sub	r24, r2
    239e:	93 09       	sbc	r25, r3
    23a0:	81 5a       	subi	r24, 0xA1	; 161
    23a2:	9f 40       	sbci	r25, 0x0F	; 15
    23a4:	0c f4       	brge	.+2      	; 0x23a8 <main+0x1e84>
    23a6:	50 c0       	rjmp	.+160    	; 0x2448 <main+0x1f24>
    23a8:	58 86       	std	Y+8, r5	; 0x08
    23aa:	4f 82       	std	Y+7, r4	; 0x07
    23ac:	07 c0       	rjmp	.+14     	; 0x23bc <main+0x1e98>
    23ae:	a5 e1       	ldi	r26, 0x15	; 21
    23b0:	6a 2e       	mov	r6, r26
    23b2:	71 2c       	mov	r7, r1
					state ++;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    23b4:	3b e1       	ldi	r19, 0x1B	; 27
    23b6:	63 16       	cp	r6, r19
    23b8:	71 04       	cpc	r7, r1
    23ba:	71 f4       	brne	.+28     	; 0x23d8 <main+0x1eb4>
    23bc:	c2 01       	movw	r24, r4
    23be:	4f 81       	ldd	r20, Y+7	; 0x07
    23c0:	58 85       	ldd	r21, Y+8	; 0x08
    23c2:	84 1b       	sub	r24, r20
    23c4:	95 0b       	sbc	r25, r21
    23c6:	85 36       	cpi	r24, 0x65	; 101
    23c8:	91 05       	cpc	r25, r1
    23ca:	0c f4       	brge	.+2      	; 0x23ce <main+0x1eaa>
    23cc:	4a c0       	rjmp	.+148    	; 0x2462 <main+0x1f3e>
    23ce:	12 01       	movw	r2, r4
    23d0:	07 c0       	rjmp	.+14     	; 0x23e0 <main+0x1ebc>
    23d2:	f6 e1       	ldi	r31, 0x16	; 22
    23d4:	6f 2e       	mov	r6, r31
    23d6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    23d8:	5c e1       	ldi	r21, 0x1C	; 28
    23da:	65 16       	cp	r6, r21
    23dc:	71 04       	cpc	r7, r1
    23de:	61 f4       	brne	.+24     	; 0x23f8 <main+0x1ed4>
    23e0:	c2 01       	movw	r24, r4
    23e2:	82 19       	sub	r24, r2
    23e4:	93 09       	sbc	r25, r3
    23e6:	85 36       	cpi	r24, 0x65	; 101
    23e8:	91 05       	cpc	r25, r1
    23ea:	0c f4       	brge	.+2      	; 0x23ee <main+0x1eca>
    23ec:	4a c0       	rjmp	.+148    	; 0x2482 <main+0x1f5e>
    23ee:	12 01       	movw	r2, r4
    23f0:	07 c0       	rjmp	.+14     	; 0x2400 <main+0x1edc>
    23f2:	e7 e1       	ldi	r30, 0x17	; 23
    23f4:	6e 2e       	mov	r6, r30
    23f6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    23f8:	8d e1       	ldi	r24, 0x1D	; 29
    23fa:	68 16       	cp	r6, r24
    23fc:	71 04       	cpc	r7, r1
    23fe:	51 f4       	brne	.+20     	; 0x2414 <main+0x1ef0>
    2400:	c2 01       	movw	r24, r4
    2402:	82 19       	sub	r24, r2
    2404:	93 09       	sbc	r25, r3
    2406:	81 5a       	subi	r24, 0xA1	; 161
    2408:	9f 40       	sbci	r25, 0x0F	; 15
    240a:	44 f4       	brge	.+16     	; 0x241c <main+0x1ef8>
    240c:	4a c0       	rjmp	.+148    	; 0x24a2 <main+0x1f7e>
    240e:	78 e1       	ldi	r23, 0x18	; 24
    2410:	67 2e       	mov	r6, r23
    2412:	71 2c       	mov	r7, r1
					state ++;
					counterRef30 = counter;
				}
				if(state == D2STOP && /*counter - counterRef > totalStepLength2*fixtureMotorLoadBack &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    2414:	be e1       	ldi	r27, 0x1E	; 30
    2416:	6b 16       	cp	r6, r27
    2418:	71 04       	cpc	r7, r1
    241a:	49 f4       	brne	.+18     	; 0x242e <main+0x1f0a>
    241c:	80 91 d0 03 	lds	r24, 0x03D0
    2420:	83 fd       	sbrc	r24, 3
    2422:	50 c0       	rjmp	.+160    	; 0x24c4 <main+0x1fa0>
    2424:	12 01       	movw	r2, r4
    2426:	07 c0       	rjmp	.+14     	; 0x2436 <main+0x1f12>
    2428:	69 e1       	ldi	r22, 0x19	; 25
    242a:	66 2e       	mov	r6, r22
    242c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == RAISEL2 && counter - counterRef > 1000 /*&& u_inputByte0.bits_in_inputByte0.fixtureLift == 0*/){
    242e:	2f e1       	ldi	r18, 0x1F	; 31
    2430:	62 16       	cp	r6, r18
    2432:	71 04       	cpc	r7, r1
    2434:	61 f4       	brne	.+24     	; 0x244e <main+0x1f2a>
    2436:	c2 01       	movw	r24, r4
    2438:	82 19       	sub	r24, r2
    243a:	93 09       	sbc	r25, r3
    243c:	89 5e       	subi	r24, 0xE9	; 233
    243e:	93 40       	sbci	r25, 0x03	; 3
    2440:	0c f4       	brge	.+2      	; 0x2444 <main+0x1f20>
    2442:	a1 c1       	rjmp	.+834    	; 0x2786 <main+0x2262>
    2444:	12 01       	movw	r2, r4
    2446:	07 c0       	rjmp	.+14     	; 0x2456 <main+0x1f32>
    2448:	5a e1       	ldi	r21, 0x1A	; 26
    244a:	65 2e       	mov	r6, r21
    244c:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == FIXH && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureHome == 0){
    244e:	40 e2       	ldi	r20, 0x20	; 32
    2450:	64 16       	cp	r6, r20
    2452:	71 04       	cpc	r7, r1
    2454:	49 f4       	brne	.+18     	; 0x2468 <main+0x1f44>
    2456:	80 91 d0 03 	lds	r24, 0x03D0
    245a:	82 fd       	sbrc	r24, 2
    245c:	a0 c1       	rjmp	.+832    	; 0x279e <main+0x227a>
    245e:	12 01       	movw	r2, r4
    2460:	07 c0       	rjmp	.+14     	; 0x2470 <main+0x1f4c>
    2462:	4b e1       	ldi	r20, 0x1B	; 27
    2464:	64 2e       	mov	r6, r20
    2466:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    2468:	51 e2       	ldi	r21, 0x21	; 33
    246a:	65 16       	cp	r6, r21
    246c:	71 04       	cpc	r7, r1
    246e:	61 f4       	brne	.+24     	; 0x2488 <main+0x1f64>
    2470:	c2 01       	movw	r24, r4
    2472:	82 19       	sub	r24, r2
    2474:	93 09       	sbc	r25, r3
    2476:	85 36       	cpi	r24, 0x65	; 101
    2478:	91 05       	cpc	r25, r1
    247a:	0c f4       	brge	.+2      	; 0x247e <main+0x1f5a>
    247c:	9e c1       	rjmp	.+828    	; 0x27ba <main+0x2296>
    247e:	12 01       	movw	r2, r4
    2480:	07 c0       	rjmp	.+14     	; 0x2490 <main+0x1f6c>
    2482:	3c e1       	ldi	r19, 0x1C	; 28
    2484:	63 2e       	mov	r6, r19
    2486:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    2488:	82 e2       	ldi	r24, 0x22	; 34
    248a:	68 16       	cp	r6, r24
    248c:	71 04       	cpc	r7, r1
    248e:	61 f4       	brne	.+24     	; 0x24a8 <main+0x1f84>
    2490:	c2 01       	movw	r24, r4
    2492:	82 19       	sub	r24, r2
    2494:	93 09       	sbc	r25, r3
    2496:	81 5a       	subi	r24, 0xA1	; 161
    2498:	9f 40       	sbci	r25, 0x0F	; 15
    249a:	0c f4       	brge	.+2      	; 0x249e <main+0x1f7a>
    249c:	a0 c1       	rjmp	.+832    	; 0x27de <main+0x22ba>
    249e:	12 01       	movw	r2, r4
    24a0:	07 c0       	rjmp	.+14     	; 0x24b0 <main+0x1f8c>
    24a2:	2d e1       	ldi	r18, 0x1D	; 29
    24a4:	62 2e       	mov	r6, r18
    24a6:	71 2c       	mov	r7, r1
					state ++;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    24a8:	b3 e2       	ldi	r27, 0x23	; 35
    24aa:	6b 16       	cp	r6, r27
    24ac:	71 04       	cpc	r7, r1
    24ae:	69 f4       	brne	.+26     	; 0x24ca <main+0x1fa6>
    24b0:	c2 01       	movw	r24, r4
    24b2:	82 19       	sub	r24, r2
    24b4:	93 09       	sbc	r25, r3
    24b6:	0b 97       	sbiw	r24, 0x0b	; 11
    24b8:	0c f4       	brge	.+2      	; 0x24bc <main+0x1f98>
    24ba:	9e c1       	rjmp	.+828    	; 0x27f8 <main+0x22d4>
    24bc:	94 e2       	ldi	r25, 0x24	; 36
    24be:	69 2e       	mov	r6, r25
    24c0:	71 2c       	mov	r7, r1
    24c2:	b4 c1       	rjmp	.+872    	; 0x282c <main+0x2308>
    24c4:	8e e1       	ldi	r24, 0x1E	; 30
    24c6:	68 2e       	mov	r6, r24
    24c8:	71 2c       	mov	r7, r1
				}


				//state actions
						
			switch (state){
    24ca:	f3 01       	movw	r30, r6
    24cc:	e4 32       	cpi	r30, 0x24	; 36
    24ce:	f1 05       	cpc	r31, r1
    24d0:	08 f0       	brcs	.+2      	; 0x24d4 <main+0x1fb0>
    24d2:	ac c1       	rjmp	.+856    	; 0x282c <main+0x2308>
    24d4:	e6 54       	subi	r30, 0x46	; 70
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	ee 0f       	add	r30, r30
    24da:	ff 1f       	adc	r31, r31
    24dc:	05 90       	lpm	r0, Z+
    24de:	f4 91       	lpm	r31, Z+
    24e0:	e0 2d       	mov	r30, r0
    24e2:	09 94       	ijmp
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    24e4:	80 91 d0 03 	lds	r24, 0x03D0
    24e8:	90 91 cc 03 	lds	r25, 0x03CC
    24ec:	20 91 ce 03 	lds	r18, 0x03CE
    24f0:	82 ff       	sbrs	r24, 2
    24f2:	08 c0       	rjmp	.+16     	; 0x2504 <main+0x1fe0>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    24f4:	9f 7e       	andi	r25, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    24f6:	27 7f       	andi	r18, 0xF7	; 247
    24f8:	20 93 ce 03 	sts	0x03CE, r18
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    24fc:	90 62       	ori	r25, 0x20	; 32
    24fe:	90 93 cc 03 	sts	0x03CC, r25
    2502:	94 c1       	rjmp	.+808    	; 0x282c <main+0x2308>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2504:	9f 7d       	andi	r25, 0xDF	; 223
    2506:	90 93 cc 03 	sts	0x03CC, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    250a:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    250c:	28 60       	ori	r18, 0x08	; 8
    250e:	20 93 ce 03 	sts	0x03CE, r18
						if(print0 == 1){
    2512:	2f a5       	ldd	r18, Y+47	; 0x2f
    2514:	38 a9       	ldd	r19, Y+48	; 0x30
    2516:	21 30       	cpi	r18, 0x01	; 1
    2518:	31 05       	cpc	r19, r1
    251a:	09 f0       	breq	.+2      	; 0x251e <main+0x1ffa>
    251c:	45 c0       	rjmp	.+138    	; 0x25a8 <main+0x2084>
							OrangutanLCD::gotoXY(0,1);
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	61 e0       	ldi	r22, 0x01	; 1
    2522:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    2526:	8e e4       	ldi	r24, 0x4E	; 78
    2528:	93 e0       	ldi	r25, 0x03	; 3
    252a:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
    252e:	18 aa       	std	Y+48, r1	; 0x30
    2530:	1f a6       	std	Y+47, r1	; 0x2f
    2532:	3a c0       	rjmp	.+116    	; 0x25a8 <main+0x2084>
							print0 = 0;
						}
					}
					break;
				case LOAD:
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    2534:	20 91 ce 03 	lds	r18, 0x03CE
    2538:	32 2f       	mov	r19, r18
    253a:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    253c:	c2 01       	movw	r24, r4
    253e:	68 ec       	ldi	r22, 0xC8	; 200
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <__divmodhi4>
    2546:	84 36       	cpi	r24, 0x64	; 100
    2548:	91 05       	cpc	r25, r1
    254a:	24 f4       	brge	.+8      	; 0x2554 <main+0x2030>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    254c:	2c 7f       	andi	r18, 0xFC	; 252
    254e:	20 93 ce 03 	sts	0x03CE, r18
    2552:	03 c0       	rjmp	.+6      	; 0x255a <main+0x2036>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2554:	32 60       	ori	r19, 0x02	; 2
    2556:	30 93 ce 03 	sts	0x03CE, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    255a:	80 91 cc 03 	lds	r24, 0x03CC
    255e:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    2560:	84 60       	ori	r24, 0x04	; 4
    2562:	80 93 cc 03 	sts	0x03CC, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    2566:	80 91 ce 03 	lds	r24, 0x03CE
    256a:	8b 7f       	andi	r24, 0xFB	; 251
    256c:	80 93 ce 03 	sts	0x03CE, r24
    2570:	41 e0       	ldi	r20, 0x01	; 1
    2572:	50 e0       	ldi	r21, 0x00	; 0
    2574:	58 a7       	std	Y+40, r21	; 0x28
    2576:	4f a3       	std	Y+39, r20	; 0x27
    2578:	59 c1       	rjmp	.+690    	; 0x282c <main+0x2308>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    257a:	80 91 ce 03 	lds	r24, 0x03CE
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    257e:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    2580:	86 61       	ori	r24, 0x16	; 22
    2582:	80 93 ce 03 	sts	0x03CE, r24
						plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2586:	80 91 cc 03 	lds	r24, 0x03CC
    258a:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    258c:	8b 7f       	andi	r24, 0xFB	; 251
    258e:	80 93 cc 03 	sts	0x03CC, r24
    2592:	3f c1       	rjmp	.+638    	; 0x2812 <main+0x22ee>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2594:	80 91 cc 03 	lds	r24, 0x03CC
    2598:	8f 7d       	andi	r24, 0xDF	; 223
    259a:	80 93 cc 03 	sts	0x03CC, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    259e:	80 91 ce 03 	lds	r24, 0x03CE
    25a2:	88 60       	ori	r24, 0x08	; 8
    25a4:	80 93 ce 03 	sts	0x03CE, r24
    25a8:	1a 8a       	std	Y+18, r1	; 0x12
    25aa:	19 8a       	std	Y+17, r1	; 0x11
    25ac:	3f c1       	rjmp	.+638    	; 0x282c <main+0x2308>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    25ae:	80 91 ce 03 	lds	r24, 0x03CE
    25b2:	8f 7e       	andi	r24, 0xEF	; 239
    25b4:	80 93 ce 03 	sts	0x03CE, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    25b8:	80 91 cc 03 	lds	r24, 0x03CC
    25bc:	80 62       	ori	r24, 0x20	; 32
    25be:	80 93 cc 03 	sts	0x03CC, r24
    25c2:	34 c1       	rjmp	.+616    	; 0x282c <main+0x2308>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    25c4:	80 91 cc 03 	lds	r24, 0x03CC
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    25c8:	80 63       	ori	r24, 0x30	; 48
    25ca:	7d c0       	rjmp	.+250    	; 0x26c6 <main+0x21a2>
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    25cc:	80 91 cd 03 	lds	r24, 0x03CD
    25d0:	81 60       	ori	r24, 0x01	; 1
    25d2:	80 93 cd 03 	sts	0x03CD, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    25d6:	80 91 cc 03 	lds	r24, 0x03CC
    25da:	8f 77       	andi	r24, 0x7F	; 127
    25dc:	80 93 cc 03 	sts	0x03CC, r24
    25e0:	e3 cf       	rjmp	.-58     	; 0x25a8 <main+0x2084>
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    25e2:	80 91 ce 03 	lds	r24, 0x03CE
    25e6:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    25e8:	8f 7d       	andi	r24, 0xDF	; 223
    25ea:	80 93 ce 03 	sts	0x03CE, r24
    25ee:	21 e0       	ldi	r18, 0x01	; 1
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	3a a3       	std	Y+34, r19	; 0x22
    25f4:	29 a3       	std	Y+33, r18	; 0x21
    25f6:	1a c1       	rjmp	.+564    	; 0x282c <main+0x2308>
					break;
				case CLEAN1_1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    25f8:	80 91 cc 03 	lds	r24, 0x03CC
    25fc:	80 62       	ori	r24, 0x20	; 32
    25fe:	80 93 cc 03 	sts	0x03CC, r24
					OrangutanLCD::gotoXY(0,1);
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	61 e0       	ldi	r22, 0x01	; 1
    2606:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("SET MOTOR HIGH");
    260a:	81 e8       	ldi	r24, 0x81	; 129
    260c:	93 e0       	ldi	r25, 0x03	; 3
    260e:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2612:	80 91 cc 03 	lds	r24, 0x03CC
    2616:	8f 7e       	andi	r24, 0xEF	; 239
    2618:	74 c0       	rjmp	.+232    	; 0x2702 <main+0x21de>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    261a:	80 91 cc 03 	lds	r24, 0x03CC
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    261e:	80 63       	ori	r24, 0x30	; 48
    2620:	3c c0       	rjmp	.+120    	; 0x269a <main+0x2176>
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2622:	80 91 cc 03 	lds	r24, 0x03CC
    2626:	8f 77       	andi	r24, 0x7F	; 127
    2628:	80 93 cc 03 	sts	0x03CC, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    262c:	80 91 ce 03 	lds	r24, 0x03CE
    2630:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2632:	8f 7d       	andi	r24, 0xDF	; 223
    2634:	80 93 ce 03 	sts	0x03CE, r24
    2638:	a1 e0       	ldi	r26, 0x01	; 1
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	ba a3       	std	Y+34, r27	; 0x22
    263e:	a9 a3       	std	Y+33, r26	; 0x21
    2640:	b3 cf       	rjmp	.-154    	; 0x25a8 <main+0x2084>
					break;
				case CLEAN1_3:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2642:	80 91 cc 03 	lds	r24, 0x03CC
    2646:	80 62       	ori	r24, 0x20	; 32
    2648:	80 93 cc 03 	sts	0x03CC, r24
    264c:	21 e0       	ldi	r18, 0x01	; 1
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	3a 8b       	std	Y+18, r19	; 0x12
    2652:	29 8b       	std	Y+17, r18	; 0x11
    2654:	eb c0       	rjmp	.+470    	; 0x282c <main+0x2308>
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2656:	80 91 ce 03 	lds	r24, 0x03CE
    265a:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    265c:	80 62       	ori	r24, 0x20	; 32
    265e:	80 93 ce 03 	sts	0x03CE, r24
    2662:	1a a2       	std	Y+34, r1	; 0x22
    2664:	19 a2       	std	Y+33, r1	; 0x21
    2666:	a0 cf       	rjmp	.-192    	; 0x25a8 <main+0x2084>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    2668:	80 91 cd 03 	lds	r24, 0x03CD
    266c:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    266e:	8b 7f       	andi	r24, 0xFB	; 251
    2670:	80 93 cd 03 	sts	0x03CD, r24
    2674:	99 cf       	rjmp	.-206    	; 0x25a8 <main+0x2084>
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2676:	80 91 cf 03 	lds	r24, 0x03CF
    267a:	81 60       	ori	r24, 0x01	; 1
    267c:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2680:	80 91 ce 03 	lds	r24, 0x03CE
    2684:	8f 77       	andi	r24, 0x7F	; 127
    2686:	80 93 ce 03 	sts	0x03CE, r24
    268a:	41 e0       	ldi	r20, 0x01	; 1
    268c:	50 e0       	ldi	r21, 0x00	; 0
    268e:	5c 8f       	std	Y+28, r21	; 0x1c
    2690:	4b 8f       	std	Y+27, r20	; 0x1b
    2692:	cc c0       	rjmp	.+408    	; 0x282c <main+0x2308>
					break;
				case CLEAN2_1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2694:	80 91 cc 03 	lds	r24, 0x03CC
    2698:	80 62       	ori	r24, 0x20	; 32
    269a:	80 93 cc 03 	sts	0x03CC, r24
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	9a 8b       	std	Y+18, r25	; 0x12
    26a4:	89 8b       	std	Y+17, r24	; 0x11
    26a6:	c2 c0       	rjmp	.+388    	; 0x282c <main+0x2308>
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    26a8:	80 91 cf 03 	lds	r24, 0x03CF
    26ac:	8e 7f       	andi	r24, 0xFE	; 254
    26ae:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    26b2:	80 91 ce 03 	lds	r24, 0x03CE
    26b6:	80 68       	ori	r24, 0x80	; 128
    26b8:	80 93 ce 03 	sts	0x03CE, r24
    26bc:	38 c0       	rjmp	.+112    	; 0x272e <main+0x220a>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    26be:	80 91 cc 03 	lds	r24, 0x03CC
    26c2:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    26c4:	80 62       	ori	r24, 0x20	; 32
    26c6:	80 93 cc 03 	sts	0x03CC, r24
    26ca:	a1 e0       	ldi	r26, 0x01	; 1
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	ba 8b       	std	Y+18, r27	; 0x12
    26d0:	a9 8b       	std	Y+17, r26	; 0x11
    26d2:	ac c0       	rjmp	.+344    	; 0x282c <main+0x2308>
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    26d4:	80 91 cd 03 	lds	r24, 0x03CD
    26d8:	8b 7f       	andi	r24, 0xFB	; 251
    26da:	80 93 cd 03 	sts	0x03CD, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    26de:	80 91 cf 03 	lds	r24, 0x03CF
    26e2:	81 60       	ori	r24, 0x01	; 1
    26e4:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    26e8:	80 91 ce 03 	lds	r24, 0x03CE
    26ec:	8f 77       	andi	r24, 0x7F	; 127
    26ee:	80 93 ce 03 	sts	0x03CE, r24
    26f2:	21 e0       	ldi	r18, 0x01	; 1
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	3c 8f       	std	Y+28, r19	; 0x1c
    26f8:	2b 8f       	std	Y+27, r18	; 0x1b
    26fa:	56 cf       	rjmp	.-340    	; 0x25a8 <main+0x2084>
					break;
				case CLEAN2_3:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    26fc:	80 91 cc 03 	lds	r24, 0x03CC
    2700:	80 62       	ori	r24, 0x20	; 32
    2702:	80 93 cc 03 	sts	0x03CC, r24
    2706:	41 e0       	ldi	r20, 0x01	; 1
    2708:	50 e0       	ldi	r21, 0x00	; 0
    270a:	5a 8b       	std	Y+18, r21	; 0x12
    270c:	49 8b       	std	Y+17, r20	; 0x11
    270e:	8e c0       	rjmp	.+284    	; 0x282c <main+0x2308>
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2710:	80 91 cf 03 	lds	r24, 0x03CF
    2714:	8e 7f       	andi	r24, 0xFE	; 254
    2716:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    271a:	80 91 ce 03 	lds	r24, 0x03CE
    271e:	80 68       	ori	r24, 0x80	; 128
    2720:	80 93 ce 03 	sts	0x03CE, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    2724:	80 91 cd 03 	lds	r24, 0x03CD
    2728:	87 7f       	andi	r24, 0xF7	; 247
    272a:	80 93 cd 03 	sts	0x03CD, r24
    272e:	1c 8e       	std	Y+28, r1	; 0x1c
    2730:	1b 8e       	std	Y+27, r1	; 0x1b
    2732:	3a cf       	rjmp	.-396    	; 0x25a8 <main+0x2084>
				case MOVED1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    2734:	80 91 cf 03 	lds	r24, 0x03CF
    2738:	87 7f       	andi	r24, 0xF7	; 247
    273a:	80 93 cf 03 	sts	0x03CF, r24
    273e:	34 cf       	rjmp	.-408    	; 0x25a8 <main+0x2084>
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1STOP:
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    2740:	80 91 cf 03 	lds	r24, 0x03CF
    2744:	88 60       	ori	r24, 0x08	; 8
    2746:	0e c0       	rjmp	.+28     	; 0x2764 <main+0x2240>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    2748:	80 91 cd 03 	lds	r24, 0x03CD
    274c:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    274e:	8f 7d       	andi	r24, 0xDF	; 223
    2750:	80 93 cd 03 	sts	0x03CD, r24
    2754:	21 e0       	ldi	r18, 0x01	; 1
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	3e ab       	std	Y+54, r19	; 0x36
    275a:	2d ab       	std	Y+53, r18	; 0x35
    275c:	25 cf       	rjmp	.-438    	; 0x25a8 <main+0x2084>
					paperTowelMotor = 1;
					break;
				case D2RAISE:
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    275e:	80 91 cf 03 	lds	r24, 0x03CF
    2762:	8d 7f       	andi	r24, 0xFD	; 253
    2764:	80 93 cf 03 	sts	0x03CF, r24
    2768:	61 c0       	rjmp	.+194    	; 0x282c <main+0x2308>
				case DRY2:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D2STOP:
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    276a:	80 91 cd 03 	lds	r24, 0x03CD
    276e:	8f 7b       	andi	r24, 0xBF	; 191
    2770:	80 93 cd 03 	sts	0x03CD, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    2774:	80 91 cf 03 	lds	r24, 0x03CF
    2778:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    277a:	8b 7f       	andi	r24, 0xFB	; 251
    277c:	80 93 cf 03 	sts	0x03CF, r24
    2780:	1e aa       	std	Y+54, r1	; 0x36
    2782:	1d aa       	std	Y+53, r1	; 0x35
    2784:	53 c0       	rjmp	.+166    	; 0x282c <main+0x2308>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2786:	80 91 ce 03 	lds	r24, 0x03CE
    278a:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    278c:	80 61       	ori	r24, 0x10	; 16
    278e:	80 93 ce 03 	sts	0x03CE, r24
    2792:	1a 8a       	std	Y+18, r1	; 0x12
    2794:	19 8a       	std	Y+17, r1	; 0x11
    2796:	0f e1       	ldi	r16, 0x1F	; 31
    2798:	60 2e       	mov	r6, r16
    279a:	71 2c       	mov	r7, r1
    279c:	47 c0       	rjmp	.+142    	; 0x282c <main+0x2308>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    279e:	80 91 cc 03 	lds	r24, 0x03CC
    27a2:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    27a4:	80 62       	ori	r24, 0x20	; 32
    27a6:	80 93 cc 03 	sts	0x03CC, r24
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9a 8b       	std	Y+18, r25	; 0x12
    27b0:	89 8b       	std	Y+17, r24	; 0x11
    27b2:	10 e2       	ldi	r17, 0x20	; 32
    27b4:	61 2e       	mov	r6, r17
    27b6:	71 2c       	mov	r7, r1
    27b8:	39 c0       	rjmp	.+114    	; 0x282c <main+0x2308>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    27ba:	80 91 cc 03 	lds	r24, 0x03CC
    27be:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    27c0:	84 60       	ori	r24, 0x04	; 4
    27c2:	80 93 cc 03 	sts	0x03CC, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    27c6:	80 91 ce 03 	lds	r24, 0x03CE
    27ca:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    27cc:	8f 7e       	andi	r24, 0xEF	; 239
    27ce:	80 93 ce 03 	sts	0x03CE, r24
    27d2:	1a 8a       	std	Y+18, r1	; 0x12
    27d4:	19 8a       	std	Y+17, r1	; 0x11
    27d6:	b1 e2       	ldi	r27, 0x21	; 33
    27d8:	6b 2e       	mov	r6, r27
    27da:	71 2c       	mov	r7, r1
    27dc:	27 c0       	rjmp	.+78     	; 0x282c <main+0x2308>
					break;
    27de:	a2 e2       	ldi	r26, 0x22	; 34
    27e0:	6a 2e       	mov	r6, r26
    27e2:	71 2c       	mov	r7, r1
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    27e4:	80 91 cc 03 	lds	r24, 0x03CC
    27e8:	8d 7f       	andi	r24, 0xFD	; 253
    27ea:	80 93 cc 03 	sts	0x03CC, r24
    27ee:	a1 e0       	ldi	r26, 0x01	; 1
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	b8 a7       	std	Y+40, r27	; 0x28
    27f4:	af a3       	std	Y+39, r26	; 0x27
    27f6:	1a c0       	rjmp	.+52     	; 0x282c <main+0x2308>
					plateLoadMotor = 1;
					break;
    27f8:	f3 e2       	ldi	r31, 0x23	; 35
    27fa:	6f 2e       	mov	r6, r31
    27fc:	71 2c       	mov	r7, r1
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    27fe:	80 91 cc 03 	lds	r24, 0x03CC
    2802:	8b 7f       	andi	r24, 0xFB	; 251
    2804:	80 93 cc 03 	sts	0x03CC, r24
					if(print35 == 1){
    2808:	2b 85       	ldd	r18, Y+11	; 0x0b
    280a:	3c 85       	ldd	r19, Y+12	; 0x0c
    280c:	21 30       	cpi	r18, 0x01	; 1
    280e:	31 05       	cpc	r19, r1
    2810:	19 f0       	breq	.+6      	; 0x2818 <main+0x22f4>
    2812:	18 a6       	std	Y+40, r1	; 0x28
    2814:	1f a2       	std	Y+39, r1	; 0x27
    2816:	0a c0       	rjmp	.+20     	; 0x282c <main+0x2308>
						OrangutanLCD::clear();
    2818:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    281c:	8c e5       	ldi	r24, 0x5C	; 92
    281e:	93 e0       	ldi	r25, 0x03	; 3
    2820:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
    2824:	18 a6       	std	Y+40, r1	; 0x28
    2826:	1f a2       	std	Y+39, r1	; 0x27
    2828:	1c 86       	std	Y+12, r1	; 0x0c
    282a:	1b 86       	std	Y+11, r1	; 0x0b
					}
					break;
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    282c:	4d b7       	in	r20, 0x3d	; 61
    282e:	5e b7       	in	r21, 0x3e	; 62
    2830:	42 51       	subi	r20, 0x12	; 18
    2832:	50 40       	sbci	r21, 0x00	; 0
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	5e bf       	out	0x3e, r21	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	4d bf       	out	0x3d, r20	; 61
    283e:	ed b7       	in	r30, 0x3d	; 61
    2840:	fe b7       	in	r31, 0x3e	; 62
    2842:	31 96       	adiw	r30, 0x01	; 1
    2844:	82 e0       	ldi	r24, 0x02	; 2
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	ad b7       	in	r26, 0x3d	; 61
    284a:	be b7       	in	r27, 0x3e	; 62
    284c:	12 96       	adiw	r26, 0x02	; 2
    284e:	9c 93       	st	X, r25
    2850:	8e 93       	st	-X, r24
    2852:	11 97       	sbiw	r26, 0x01	; 1
    2854:	93 83       	std	Z+3, r25	; 0x03
    2856:	82 83       	std	Z+2, r24	; 0x02
    2858:	95 83       	std	Z+5, r25	; 0x05
    285a:	84 83       	std	Z+4, r24	; 0x04
    285c:	97 83       	std	Z+7, r25	; 0x07
    285e:	86 83       	std	Z+6, r24	; 0x06
    2860:	21 e0       	ldi	r18, 0x01	; 1
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	31 87       	std	Z+9, r19	; 0x09
    2866:	20 87       	std	Z+8, r18	; 0x08
    2868:	33 87       	std	Z+11, r19	; 0x0b
    286a:	22 87       	std	Z+10, r18	; 0x0a
    286c:	35 87       	std	Z+13, r19	; 0x0d
    286e:	24 87       	std	Z+12, r18	; 0x0c
    2870:	37 87       	std	Z+15, r19	; 0x0f
    2872:	26 87       	std	Z+14, r18	; 0x0e
    2874:	31 8b       	std	Z+17, r19	; 0x11
    2876:	20 8b       	std	Z+16, r18	; 0x10
    2878:	c2 01       	movw	r24, r4
    287a:	b1 01       	movw	r22, r2
    287c:	4f 81       	ldd	r20, Y+7	; 0x07
    287e:	58 85       	ldd	r21, Y+8	; 0x08
    2880:	2f a1       	ldd	r18, Y+39	; 0x27
    2882:	38 a5       	ldd	r19, Y+40	; 0x28
    2884:	09 89       	ldd	r16, Y+17	; 0x11
    2886:	1a 89       	ldd	r17, Y+18	; 0x12
    2888:	e9 a0       	ldd	r14, Y+33	; 0x21
    288a:	fa a0       	ldd	r15, Y+34	; 0x22
    288c:	cb 8c       	ldd	r12, Y+27	; 0x1b
    288e:	dc 8c       	ldd	r13, Y+28	; 0x1c
    2890:	ad a8       	ldd	r10, Y+53	; 0x35
    2892:	be a8       	ldd	r11, Y+54	; 0x36
    2894:	e2 e0       	ldi	r30, 0x02	; 2
    2896:	8e 2e       	mov	r8, r30
    2898:	91 2c       	mov	r9, r1
    289a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    289e:	4d b7       	in	r20, 0x3d	; 61
    28a0:	5e b7       	in	r21, 0x3e	; 62
    28a2:	4e 5e       	subi	r20, 0xEE	; 238
    28a4:	5f 4f       	sbci	r21, 0xFF	; 255
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	5e bf       	out	0x3e, r21	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	4d bf       	out	0x3d, r20	; 61
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("BOTH B");
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    28b8:	54 e2       	ldi	r21, 0x24	; 36
    28ba:	65 16       	cp	r6, r21
    28bc:	71 04       	cpc	r7, r1
    28be:	09 f4       	brne	.+2      	; 0x28c2 <main+0x239e>
    28c0:	84 c4       	rjmp	.+2312   	; 0x31ca <main+0x2ca6>
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    28c2:	08 94       	sec
    28c4:	41 1c       	adc	r4, r1
    28c6:	51 1c       	adc	r5, r1
    28c8:	b6 cb       	rjmp	.-2196   	; 0x2036 <main+0x1b12>
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    28ca:	82 e0       	ldi	r24, 0x02	; 2
    28cc:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    28d0:	88 23       	and	r24, r24
    28d2:	09 f4       	brne	.+2      	; 0x28d6 <main+0x23b2>
    28d4:	7a c4       	rjmp	.+2292   	; 0x31ca <main+0x2ca6>
			OrangutanLCD::gotoXY(7,0);
    28d6:	87 e0       	ldi	r24, 0x07	; 7
    28d8:	60 e0       	ldi	r22, 0x00	; 0
    28da:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
			OrangutanLCD::print("DEBUG");
    28de:	8d e5       	ldi	r24, 0x5D	; 93
    28e0:	91 e0       	ldi	r25, 0x01	; 1
    28e2:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    28e6:	80 91 cc 03 	lds	r24, 0x03CC
    28ea:	80 62       	ori	r24, 0x20	; 32
    28ec:	80 93 cc 03 	sts	0x03CC, r24
    28f0:	1c aa       	std	Y+52, r1	; 0x34
    28f2:	1b aa       	std	Y+51, r1	; 0x33
    28f4:	66 24       	eor	r6, r6
    28f6:	77 24       	eor	r7, r7
    28f8:	1c 82       	std	Y+4, r1	; 0x04
    28fa:	1b 82       	std	Y+3, r1	; 0x03
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	9e a7       	std	Y+46, r25	; 0x2e
    2902:	8d a7       	std	Y+45, r24	; 0x2d
    2904:	1e a2       	std	Y+38, r1	; 0x26
    2906:	1d a2       	std	Y+37, r1	; 0x25
    2908:	18 a2       	std	Y+32, r1	; 0x20
    290a:	1f 8e       	std	Y+31, r1	; 0x1f
    290c:	1a 8e       	std	Y+26, r1	; 0x1a
    290e:	19 8e       	std	Y+25, r1	; 0x19
    2910:	25 96       	adiw	r28, 0x05	; 5
    2912:	1f ae       	std	Y+63, r1	; 0x3f
    2914:	1e ae       	std	Y+62, r1	; 0x3e
    2916:	25 97       	sbiw	r28, 0x05	; 5
    2918:	22 24       	eor	r2, r2
    291a:	33 24       	eor	r3, r3
    291c:	98 8b       	std	Y+16, r25	; 0x10
    291e:	8f 87       	std	Y+15, r24	; 0x0f
    2920:	44 24       	eor	r4, r4
    2922:	55 24       	eor	r5, r5
    2924:	9a 87       	std	Y+10, r25	; 0x0a
    2926:	89 87       	std	Y+9, r24	; 0x09
			while(state != DONER)
			{
				i2c_start(I2C3+I2C_WRITE);						// first start condition (write)
    2928:	84 e4       	ldi	r24, 0x44	; 68
    292a:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
				i2c_write(0x0);								// write command byte
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
				i2c_start(I2C3+I2C_READ);						// second start condition (read)
    2934:	85 e4       	ldi	r24, 0x45	; 69
    2936:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
				u_inputByte0.inputByte0 = i2c_readAck();				// read first byte and send Ack, requesting more
    293a:	0e 94 a8 19 	call	0x3350	; 0x3350 <_Z11i2c_readAckv>
    293e:	80 93 d0 03 	sts	0x03D0, r24
   		     	u_inputByte1.inputByte1 = i2c_readNak();				// read second byte and send stop condition
    2942:	0e 94 b2 19 	call	0x3364	; 0x3364 <_Z11i2c_readNakv>
    2946:	80 93 d1 03 	sts	0x03D1, r24
  	 	     	i2c_stop();								// set stop conditon = release bus 		
    294a:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>
				
				if(state != INIT){
    294e:	61 14       	cp	r6, r1
    2950:	71 04       	cpc	r7, r1
    2952:	79 f0       	breq	.+30     	; 0x2972 <main+0x244e>
					OrangutanLCD::gotoXY(0,1);
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	61 e0       	ldi	r22, 0x01	; 1
    2958:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
					OrangutanLCD::print("STATE ");
    295c:	87 e4       	ldi	r24, 0x47	; 71
    295e:	93 e0       	ldi	r25, 0x03	; 3
    2960:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
    2964:	b3 01       	movw	r22, r6
    2966:	88 27       	eor	r24, r24
    2968:	77 fd       	sbrc	r23, 7
    296a:	80 95       	com	r24
    296c:	98 2f       	mov	r25, r24
    296e:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <_ZN12OrangutanLCD5printEl>
					OrangutanLCD::print(state);
				}

				buttonTriggered = button_debounce(counter, &stateButton);//, &counterRefPush, &counterRefRel, &stateButton);
    2972:	c2 01       	movw	r24, r4
    2974:	be 01       	movw	r22, r28
    2976:	6f 5f       	subi	r22, 0xFF	; 255
    2978:	7f 4f       	sbci	r23, 0xFF	; 255
    297a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z15button_debounceiPi>
    297e:	28 2f       	mov	r18, r24

				//state transitions
	
				if(state == INIT && buttonTriggered){
    2980:	61 14       	cp	r6, r1
    2982:	71 04       	cpc	r7, r1
    2984:	21 f4       	brne	.+8      	; 0x298e <main+0x246a>
    2986:	88 23       	and	r24, r24
    2988:	09 f0       	breq	.+2      	; 0x298c <main+0x2468>
    298a:	5c c4       	rjmp	.+2232   	; 0x3244 <main+0x2d20>
    298c:	5f c4       	rjmp	.+2238   	; 0x324c <main+0x2d28>
					buttonTriggered = false;
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate/*&& u_inputByte0.bits_in_inputByte0.plate == 0*/){
    298e:	91 e0       	ldi	r25, 0x01	; 1
    2990:	69 16       	cp	r6, r25
    2992:	71 04       	cpc	r7, r1
    2994:	59 f4       	brne	.+22     	; 0x29ac <main+0x2488>
    2996:	c2 01       	movw	r24, r4
    2998:	82 19       	sub	r24, r2
    299a:	93 09       	sbc	r25, r3
    299c:	81 5a       	subi	r24, 0xA1	; 161
    299e:	9f 40       	sbci	r25, 0x0F	; 15
    29a0:	a4 f0       	brlt	.+40     	; 0x29ca <main+0x24a6>
    29a2:	12 01       	movw	r2, r4
    29a4:	45 e2       	ldi	r20, 0x25	; 37
    29a6:	64 2e       	mov	r6, r20
    29a8:	71 2c       	mov	r7, r1
    29aa:	0f c0       	rjmp	.+30     	; 0x29ca <main+0x24a6>
					state = WAIT;
					counterRef = counter;
				}
				if(state == RAISEL1 && counter - counterRef > pWait){
    29ac:	b2 e0       	ldi	r27, 0x02	; 2
    29ae:	6b 16       	cp	r6, r27
    29b0:	71 04       	cpc	r7, r1
    29b2:	59 f4       	brne	.+22     	; 0x29ca <main+0x24a6>
    29b4:	c2 01       	movw	r24, r4
    29b6:	82 19       	sub	r24, r2
    29b8:	93 09       	sbc	r25, r3
    29ba:	85 36       	cpi	r24, 0x65	; 101
    29bc:	91 05       	cpc	r25, r1
    29be:	94 f0       	brlt	.+36     	; 0x29e4 <main+0x24c0>
    29c0:	12 01       	movw	r2, r4
    29c2:	35 e2       	ldi	r19, 0x25	; 37
    29c4:	63 2e       	mov	r6, r19
    29c6:	71 2c       	mov	r7, r1
    29c8:	0d c0       	rjmp	.+26     	; 0x29e4 <main+0x24c0>
					state = WAIT;
					counterRef = counter;
				}
				if(state == FIXL && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    29ca:	33 e0       	ldi	r19, 0x03	; 3
    29cc:	63 16       	cp	r6, r19
    29ce:	71 04       	cpc	r7, r1
    29d0:	49 f4       	brne	.+18     	; 0x29e4 <main+0x24c0>
    29d2:	80 91 d0 03 	lds	r24, 0x03D0
    29d6:	81 fd       	sbrc	r24, 1
    29d8:	12 c0       	rjmp	.+36     	; 0x29fe <main+0x24da>
    29da:	12 01       	movw	r2, r4
    29dc:	95 e2       	ldi	r25, 0x25	; 37
    29de:	69 2e       	mov	r6, r25
    29e0:	71 2c       	mov	r7, r1
    29e2:	0d c0       	rjmp	.+26     	; 0x29fe <main+0x24da>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL1 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    29e4:	44 e0       	ldi	r20, 0x04	; 4
    29e6:	64 16       	cp	r6, r20
    29e8:	71 04       	cpc	r7, r1
    29ea:	49 f4       	brne	.+18     	; 0x29fe <main+0x24da>
    29ec:	80 91 d0 03 	lds	r24, 0x03D0
    29f0:	83 fd       	sbrc	r24, 3
    29f2:	14 c0       	rjmp	.+40     	; 0x2a1c <main+0x24f8>
    29f4:	12 01       	movw	r2, r4
    29f6:	85 e2       	ldi	r24, 0x25	; 37
    29f8:	68 2e       	mov	r6, r24
    29fa:	71 2c       	mov	r7, r1
    29fc:	0f c0       	rjmp	.+30     	; 0x2a1c <main+0x24f8>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL2 && counter - counterRef > pWait){
    29fe:	55 e0       	ldi	r21, 0x05	; 5
    2a00:	65 16       	cp	r6, r21
    2a02:	71 04       	cpc	r7, r1
    2a04:	59 f4       	brne	.+22     	; 0x2a1c <main+0x24f8>
    2a06:	c2 01       	movw	r24, r4
    2a08:	82 19       	sub	r24, r2
    2a0a:	93 09       	sbc	r25, r3
    2a0c:	85 36       	cpi	r24, 0x65	; 101
    2a0e:	91 05       	cpc	r25, r1
    2a10:	a4 f0       	brlt	.+40     	; 0x2a3a <main+0x2516>
    2a12:	12 01       	movw	r2, r4
    2a14:	05 e2       	ldi	r16, 0x25	; 37
    2a16:	60 2e       	mov	r6, r16
    2a18:	71 2c       	mov	r7, r1
    2a1a:	0f c0       	rjmp	.+30     	; 0x2a3a <main+0x2516>
					state = WAIT;
					counterRef = counter;
				}
				if(state == MOVEC1 && counter - counterRef > totalStepLength2*fixtureMotorBrush1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    2a1c:	86 e0       	ldi	r24, 0x06	; 6
    2a1e:	68 16       	cp	r6, r24
    2a20:	71 04       	cpc	r7, r1
    2a22:	59 f4       	brne	.+22     	; 0x2a3a <main+0x2516>
    2a24:	c2 01       	movw	r24, r4
    2a26:	82 19       	sub	r24, r2
    2a28:	93 09       	sbc	r25, r3
    2a2a:	81 5a       	subi	r24, 0xA1	; 161
    2a2c:	9f 40       	sbci	r25, 0x0F	; 15
    2a2e:	a4 f0       	brlt	.+40     	; 0x2a58 <main+0x2534>
    2a30:	12 01       	movw	r2, r4
    2a32:	15 e2       	ldi	r17, 0x25	; 37
    2a34:	61 2e       	mov	r6, r17
    2a36:	71 2c       	mov	r7, r1
    2a38:	0f c0       	rjmp	.+30     	; 0x2a58 <main+0x2534>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1SET && counter - counterRef > mWait){
    2a3a:	b7 e0       	ldi	r27, 0x07	; 7
    2a3c:	6b 16       	cp	r6, r27
    2a3e:	71 04       	cpc	r7, r1
    2a40:	59 f4       	brne	.+22     	; 0x2a58 <main+0x2534>
    2a42:	c2 01       	movw	r24, r4
    2a44:	82 19       	sub	r24, r2
    2a46:	93 09       	sbc	r25, r3
    2a48:	85 36       	cpi	r24, 0x65	; 101
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	a4 f0       	brlt	.+40     	; 0x2a76 <main+0x2552>
    2a4e:	12 01       	movw	r2, r4
    2a50:	b5 e2       	ldi	r27, 0x25	; 37
    2a52:	6b 2e       	mov	r6, r27
    2a54:	71 2c       	mov	r7, r1
    2a56:	0f c0       	rjmp	.+30     	; 0x2a76 <main+0x2552>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1START1 && counter - counterRef > pWait){
    2a58:	38 e0       	ldi	r19, 0x08	; 8
    2a5a:	63 16       	cp	r6, r19
    2a5c:	71 04       	cpc	r7, r1
    2a5e:	59 f4       	brne	.+22     	; 0x2a76 <main+0x2552>
    2a60:	c2 01       	movw	r24, r4
    2a62:	82 19       	sub	r24, r2
    2a64:	93 09       	sbc	r25, r3
    2a66:	85 36       	cpi	r24, 0x65	; 101
    2a68:	91 05       	cpc	r25, r1
    2a6a:	a4 f0       	brlt	.+40     	; 0x2a94 <main+0x2570>
    2a6c:	12 01       	movw	r2, r4
    2a6e:	a5 e2       	ldi	r26, 0x25	; 37
    2a70:	6a 2e       	mov	r6, r26
    2a72:	71 2c       	mov	r7, r1
    2a74:	0f c0       	rjmp	.+30     	; 0x2a94 <main+0x2570>
					state = WAIT;
						counterRef = counter;
				}
				if(state == CLEAN1_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2a76:	49 e0       	ldi	r20, 0x09	; 9
    2a78:	64 16       	cp	r6, r20
    2a7a:	71 04       	cpc	r7, r1
    2a7c:	59 f4       	brne	.+22     	; 0x2a94 <main+0x2570>
    2a7e:	c2 01       	movw	r24, r4
    2a80:	82 19       	sub	r24, r2
    2a82:	93 09       	sbc	r25, r3
    2a84:	81 5d       	subi	r24, 0xD1	; 209
    2a86:	97 40       	sbci	r25, 0x07	; 7
    2a88:	9c f0       	brlt	.+38     	; 0x2ab0 <main+0x258c>
    2a8a:	12 01       	movw	r2, r4
    2a8c:	f5 e2       	ldi	r31, 0x25	; 37
    2a8e:	6f 2e       	mov	r6, r31
    2a90:	71 2c       	mov	r7, r1
    2a92:	0e c0       	rjmp	.+28     	; 0x2ab0 <main+0x258c>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1STOP1 && counter - counterRef > pWait){
    2a94:	8a e0       	ldi	r24, 0x0A	; 10
    2a96:	68 16       	cp	r6, r24
    2a98:	71 04       	cpc	r7, r1
    2a9a:	51 f4       	brne	.+20     	; 0x2ab0 <main+0x258c>
    2a9c:	c2 01       	movw	r24, r4
    2a9e:	82 19       	sub	r24, r2
    2aa0:	93 09       	sbc	r25, r3
    2aa2:	85 36       	cpi	r24, 0x65	; 101
    2aa4:	91 05       	cpc	r25, r1
    2aa6:	9c f0       	brlt	.+38     	; 0x2ace <main+0x25aa>
    2aa8:	e5 e2       	ldi	r30, 0x25	; 37
    2aaa:	6e 2e       	mov	r6, r30
    2aac:	71 2c       	mov	r7, r1
    2aae:	0f c0       	rjmp	.+30     	; 0x2ace <main+0x25aa>
					state = WAIT;
				}
				if(state == CLEAN1_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush1 == 0*/){
    2ab0:	9b e0       	ldi	r25, 0x0B	; 11
    2ab2:	69 16       	cp	r6, r25
    2ab4:	71 04       	cpc	r7, r1
    2ab6:	59 f4       	brne	.+22     	; 0x2ace <main+0x25aa>
    2ab8:	c2 01       	movw	r24, r4
    2aba:	82 19       	sub	r24, r2
    2abc:	93 09       	sbc	r25, r3
    2abe:	81 5d       	subi	r24, 0xD1	; 209
    2ac0:	97 40       	sbci	r25, 0x07	; 7
    2ac2:	a4 f0       	brlt	.+40     	; 0x2aec <main+0x25c8>
    2ac4:	12 01       	movw	r2, r4
    2ac6:	75 e2       	ldi	r23, 0x25	; 37
    2ac8:	67 2e       	mov	r6, r23
    2aca:	71 2c       	mov	r7, r1
    2acc:	0f c0       	rjmp	.+30     	; 0x2aec <main+0x25c8>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B1START2 && counter - counterRef > pWait){
    2ace:	bc e0       	ldi	r27, 0x0C	; 12
    2ad0:	6b 16       	cp	r6, r27
    2ad2:	71 04       	cpc	r7, r1
    2ad4:	59 f4       	brne	.+22     	; 0x2aec <main+0x25c8>
    2ad6:	c2 01       	movw	r24, r4
    2ad8:	82 19       	sub	r24, r2
    2ada:	93 09       	sbc	r25, r3
    2adc:	85 36       	cpi	r24, 0x65	; 101
    2ade:	91 05       	cpc	r25, r1
    2ae0:	9c f0       	brlt	.+38     	; 0x2b08 <main+0x25e4>
    2ae2:	12 01       	movw	r2, r4
    2ae4:	65 e2       	ldi	r22, 0x25	; 37
    2ae6:	66 2e       	mov	r6, r22
    2ae8:	71 2c       	mov	r7, r1
    2aea:	0e c0       	rjmp	.+28     	; 0x2b08 <main+0x25e4>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN1_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2aec:	3d e0       	ldi	r19, 0x0D	; 13
    2aee:	63 16       	cp	r6, r19
    2af0:	71 04       	cpc	r7, r1
    2af2:	51 f4       	brne	.+20     	; 0x2b08 <main+0x25e4>
    2af4:	c2 01       	movw	r24, r4
    2af6:	82 19       	sub	r24, r2
    2af8:	93 09       	sbc	r25, r3
    2afa:	81 5d       	subi	r24, 0xD1	; 209
    2afc:	97 40       	sbci	r25, 0x07	; 7
    2afe:	9c f0       	brlt	.+38     	; 0x2b26 <main+0x2602>
    2b00:	55 e2       	ldi	r21, 0x25	; 37
    2b02:	65 2e       	mov	r6, r21
    2b04:	71 2c       	mov	r7, r1
    2b06:	0f c0       	rjmp	.+30     	; 0x2b26 <main+0x2602>
					state = WAIT;
					counterRef14 = counter;
				}
				if(state == B1STOP2 && counter - counterRef > totalStepLength2*fixtureMotorBrush2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2*/){
    2b08:	5e e0       	ldi	r21, 0x0E	; 14
    2b0a:	65 16       	cp	r6, r21
    2b0c:	71 04       	cpc	r7, r1
    2b0e:	59 f4       	brne	.+22     	; 0x2b26 <main+0x2602>
    2b10:	c2 01       	movw	r24, r4
    2b12:	82 19       	sub	r24, r2
    2b14:	93 09       	sbc	r25, r3
    2b16:	81 5a       	subi	r24, 0xA1	; 161
    2b18:	9f 40       	sbci	r25, 0x0F	; 15
    2b1a:	a4 f0       	brlt	.+40     	; 0x2b44 <main+0x2620>
    2b1c:	12 01       	movw	r2, r4
    2b1e:	45 e2       	ldi	r20, 0x25	; 37
    2b20:	64 2e       	mov	r6, r20
    2b22:	71 2c       	mov	r7, r1
    2b24:	0f c0       	rjmp	.+30     	; 0x2b44 <main+0x2620>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2SET && counter - counterRef > mWait){
    2b26:	bf e0       	ldi	r27, 0x0F	; 15
    2b28:	6b 16       	cp	r6, r27
    2b2a:	71 04       	cpc	r7, r1
    2b2c:	59 f4       	brne	.+22     	; 0x2b44 <main+0x2620>
    2b2e:	c2 01       	movw	r24, r4
    2b30:	82 19       	sub	r24, r2
    2b32:	93 09       	sbc	r25, r3
    2b34:	85 36       	cpi	r24, 0x65	; 101
    2b36:	91 05       	cpc	r25, r1
    2b38:	a4 f0       	brlt	.+40     	; 0x2b62 <main+0x263e>
    2b3a:	12 01       	movw	r2, r4
    2b3c:	35 e2       	ldi	r19, 0x25	; 37
    2b3e:	63 2e       	mov	r6, r19
    2b40:	71 2c       	mov	r7, r1
    2b42:	0f c0       	rjmp	.+30     	; 0x2b62 <main+0x263e>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2START1 && counter - counterRef > pWait){
    2b44:	30 e1       	ldi	r19, 0x10	; 16
    2b46:	63 16       	cp	r6, r19
    2b48:	71 04       	cpc	r7, r1
    2b4a:	59 f4       	brne	.+22     	; 0x2b62 <main+0x263e>
    2b4c:	c2 01       	movw	r24, r4
    2b4e:	82 19       	sub	r24, r2
    2b50:	93 09       	sbc	r25, r3
    2b52:	85 36       	cpi	r24, 0x65	; 101
    2b54:	91 05       	cpc	r25, r1
    2b56:	a4 f0       	brlt	.+40     	; 0x2b80 <main+0x265c>
    2b58:	12 01       	movw	r2, r4
    2b5a:	95 e2       	ldi	r25, 0x25	; 37
    2b5c:	69 2e       	mov	r6, r25
    2b5e:	71 2c       	mov	r7, r1
    2b60:	0f c0       	rjmp	.+30     	; 0x2b80 <main+0x265c>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_1 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2b62:	41 e1       	ldi	r20, 0x11	; 17
    2b64:	64 16       	cp	r6, r20
    2b66:	71 04       	cpc	r7, r1
    2b68:	59 f4       	brne	.+22     	; 0x2b80 <main+0x265c>
    2b6a:	c2 01       	movw	r24, r4
    2b6c:	82 19       	sub	r24, r2
    2b6e:	93 09       	sbc	r25, r3
    2b70:	81 5d       	subi	r24, 0xD1	; 209
    2b72:	97 40       	sbci	r25, 0x07	; 7
    2b74:	a4 f0       	brlt	.+40     	; 0x2b9e <main+0x267a>
    2b76:	12 01       	movw	r2, r4
    2b78:	85 e2       	ldi	r24, 0x25	; 37
    2b7a:	68 2e       	mov	r6, r24
    2b7c:	71 2c       	mov	r7, r1
    2b7e:	0f c0       	rjmp	.+30     	; 0x2b9e <main+0x267a>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2STOP1 && counter - counterRef > pWait){
    2b80:	82 e1       	ldi	r24, 0x12	; 18
    2b82:	68 16       	cp	r6, r24
    2b84:	71 04       	cpc	r7, r1
    2b86:	59 f4       	brne	.+22     	; 0x2b9e <main+0x267a>
    2b88:	c2 01       	movw	r24, r4
    2b8a:	82 19       	sub	r24, r2
    2b8c:	93 09       	sbc	r25, r3
    2b8e:	85 36       	cpi	r24, 0x65	; 101
    2b90:	91 05       	cpc	r25, r1
    2b92:	a4 f0       	brlt	.+40     	; 0x2bbc <main+0x2698>
    2b94:	12 01       	movw	r2, r4
    2b96:	05 e2       	ldi	r16, 0x25	; 37
    2b98:	60 2e       	mov	r6, r16
    2b9a:	71 2c       	mov	r7, r1
    2b9c:	0f c0       	rjmp	.+30     	; 0x2bbc <main+0x2698>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_2 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate /*&& u_inputByte0.bits_in_inputByte0.fixtureBrush2 == 0*/){
    2b9e:	93 e1       	ldi	r25, 0x13	; 19
    2ba0:	69 16       	cp	r6, r25
    2ba2:	71 04       	cpc	r7, r1
    2ba4:	59 f4       	brne	.+22     	; 0x2bbc <main+0x2698>
    2ba6:	c2 01       	movw	r24, r4
    2ba8:	82 19       	sub	r24, r2
    2baa:	93 09       	sbc	r25, r3
    2bac:	81 5d       	subi	r24, 0xD1	; 209
    2bae:	97 40       	sbci	r25, 0x07	; 7
    2bb0:	a4 f0       	brlt	.+40     	; 0x2bda <main+0x26b6>
    2bb2:	12 01       	movw	r2, r4
    2bb4:	15 e2       	ldi	r17, 0x25	; 37
    2bb6:	61 2e       	mov	r6, r17
    2bb8:	71 2c       	mov	r7, r1
    2bba:	0f c0       	rjmp	.+30     	; 0x2bda <main+0x26b6>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2START2 && counter - counterRef > pWait){
    2bbc:	b4 e1       	ldi	r27, 0x14	; 20
    2bbe:	6b 16       	cp	r6, r27
    2bc0:	71 04       	cpc	r7, r1
    2bc2:	59 f4       	brne	.+22     	; 0x2bda <main+0x26b6>
    2bc4:	c2 01       	movw	r24, r4
    2bc6:	82 19       	sub	r24, r2
    2bc8:	93 09       	sbc	r25, r3
    2bca:	85 36       	cpi	r24, 0x65	; 101
    2bcc:	91 05       	cpc	r25, r1
    2bce:	a4 f0       	brlt	.+40     	; 0x2bf8 <main+0x26d4>
    2bd0:	12 01       	movw	r2, r4
    2bd2:	b5 e2       	ldi	r27, 0x25	; 37
    2bd4:	6b 2e       	mov	r6, r27
    2bd6:	71 2c       	mov	r7, r1
    2bd8:	0f c0       	rjmp	.+30     	; 0x2bf8 <main+0x26d4>
					state = WAIT;
					counterRef = counter;
				}
				if(state == CLEAN2_3 && counter - counterRef > totalStepLength2*fixtureMotorHalfPlate){
    2bda:	35 e1       	ldi	r19, 0x15	; 21
    2bdc:	63 16       	cp	r6, r19
    2bde:	71 04       	cpc	r7, r1
    2be0:	59 f4       	brne	.+22     	; 0x2bf8 <main+0x26d4>
    2be2:	c2 01       	movw	r24, r4
    2be4:	82 19       	sub	r24, r2
    2be6:	93 09       	sbc	r25, r3
    2be8:	81 5d       	subi	r24, 0xD1	; 209
    2bea:	97 40       	sbci	r25, 0x07	; 7
    2bec:	a4 f0       	brlt	.+40     	; 0x2c16 <main+0x26f2>
    2bee:	12 01       	movw	r2, r4
    2bf0:	a5 e2       	ldi	r26, 0x25	; 37
    2bf2:	6a 2e       	mov	r6, r26
    2bf4:	71 2c       	mov	r7, r1
    2bf6:	0f c0       	rjmp	.+30     	; 0x2c16 <main+0x26f2>
					state = WAIT;
					counterRef = counter;
				}
				if(state == B2STOP2 && counter - counterRef > pWait){
    2bf8:	56 e1       	ldi	r21, 0x16	; 22
    2bfa:	65 16       	cp	r6, r21
    2bfc:	71 04       	cpc	r7, r1
    2bfe:	59 f4       	brne	.+22     	; 0x2c16 <main+0x26f2>
    2c00:	c2 01       	movw	r24, r4
    2c02:	82 19       	sub	r24, r2
    2c04:	93 09       	sbc	r25, r3
    2c06:	85 36       	cpi	r24, 0x65	; 101
    2c08:	91 05       	cpc	r25, r1
    2c0a:	a4 f0       	brlt	.+40     	; 0x2c34 <main+0x2710>
    2c0c:	12 01       	movw	r2, r4
    2c0e:	f5 e2       	ldi	r31, 0x25	; 37
    2c10:	6f 2e       	mov	r6, r31
    2c12:	71 2c       	mov	r7, r1
    2c14:	0f c0       	rjmp	.+30     	; 0x2c34 <main+0x2710>
					state = WAIT;
					counterRef = counter;
				}
				if(state == MOVED1 && counter - counterRef > totalStepLength2*fixtureMotorDry1Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry1 == 0*/){
    2c16:	87 e1       	ldi	r24, 0x17	; 23
    2c18:	68 16       	cp	r6, r24
    2c1a:	71 04       	cpc	r7, r1
    2c1c:	59 f4       	brne	.+22     	; 0x2c34 <main+0x2710>
    2c1e:	c2 01       	movw	r24, r4
    2c20:	82 19       	sub	r24, r2
    2c22:	93 09       	sbc	r25, r3
    2c24:	81 5a       	subi	r24, 0xA1	; 161
    2c26:	9f 40       	sbci	r25, 0x0F	; 15
    2c28:	a4 f0       	brlt	.+40     	; 0x2c52 <main+0x272e>
    2c2a:	12 01       	movw	r2, r4
    2c2c:	e5 e2       	ldi	r30, 0x25	; 37
    2c2e:	6e 2e       	mov	r6, r30
    2c30:	71 2c       	mov	r7, r1
    2c32:	0f c0       	rjmp	.+30     	; 0x2c52 <main+0x272e>
					state = WAIT;
					counterRef = counter;
				}
				if(state == D1START && counter - counterRef > kWait){
    2c34:	b8 e1       	ldi	r27, 0x18	; 24
    2c36:	6b 16       	cp	r6, r27
    2c38:	71 04       	cpc	r7, r1
    2c3a:	59 f4       	brne	.+22     	; 0x2c52 <main+0x272e>
    2c3c:	c2 01       	movw	r24, r4
    2c3e:	82 19       	sub	r24, r2
    2c40:	93 09       	sbc	r25, r3
    2c42:	85 36       	cpi	r24, 0x65	; 101
    2c44:	91 05       	cpc	r25, r1
    2c46:	9c f0       	brlt	.+38     	; 0x2c6e <main+0x274a>
    2c48:	12 01       	movw	r2, r4
    2c4a:	75 e2       	ldi	r23, 0x25	; 37
    2c4c:	67 2e       	mov	r6, r23
    2c4e:	71 2c       	mov	r7, r1
    2c50:	0e c0       	rjmp	.+28     	; 0x2c6e <main+0x274a>
					state = WAIT;
					counterRef = counter;
				}
				if(state == DRY1 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2c52:	39 e1       	ldi	r19, 0x19	; 25
    2c54:	63 16       	cp	r6, r19
    2c56:	71 04       	cpc	r7, r1
    2c58:	51 f4       	brne	.+20     	; 0x2c6e <main+0x274a>
    2c5a:	c2 01       	movw	r24, r4
    2c5c:	82 19       	sub	r24, r2
    2c5e:	93 09       	sbc	r25, r3
    2c60:	81 5a       	subi	r24, 0xA1	; 161
    2c62:	9f 40       	sbci	r25, 0x0F	; 15
    2c64:	a4 f0       	brlt	.+40     	; 0x2c8e <main+0x276a>
    2c66:	65 e2       	ldi	r22, 0x25	; 37
    2c68:	66 2e       	mov	r6, r22
    2c6a:	71 2c       	mov	r7, r1
    2c6c:	10 c0       	rjmp	.+32     	; 0x2c8e <main+0x276a>
					state = WAIT;
					counterRef26 = counter;
				}
				if(state == D1STOP && counter - counterRef > totalStepLength2*fixtureMotorDry2Step /*&& u_inputByte0.bits_in_inputByte0.fixtureDry2 == 0*/){
    2c6e:	5a e1       	ldi	r21, 0x1A	; 26
    2c70:	65 16       	cp	r6, r21
    2c72:	71 04       	cpc	r7, r1
    2c74:	61 f4       	brne	.+24     	; 0x2c8e <main+0x276a>
    2c76:	c2 01       	movw	r24, r4
    2c78:	82 19       	sub	r24, r2
    2c7a:	93 09       	sbc	r25, r3
    2c7c:	81 5a       	subi	r24, 0xA1	; 161
    2c7e:	9f 40       	sbci	r25, 0x0F	; 15
    2c80:	bc f0       	brlt	.+46     	; 0x2cb0 <main+0x278c>
    2c82:	5c 82       	std	Y+4, r5	; 0x04
    2c84:	4b 82       	std	Y+3, r4	; 0x03
    2c86:	55 e2       	ldi	r21, 0x25	; 37
    2c88:	65 2e       	mov	r6, r21
    2c8a:	71 2c       	mov	r7, r1
    2c8c:	11 c0       	rjmp	.+34     	; 0x2cb0 <main+0x278c>
					state = WAIT;
					counterRefFive = counter;
				}
				if(state == D2START && counter - counterRefFive > mWait){
    2c8e:	bb e1       	ldi	r27, 0x1B	; 27
    2c90:	6b 16       	cp	r6, r27
    2c92:	71 04       	cpc	r7, r1
    2c94:	69 f4       	brne	.+26     	; 0x2cb0 <main+0x278c>
    2c96:	c2 01       	movw	r24, r4
    2c98:	4b 81       	ldd	r20, Y+3	; 0x03
    2c9a:	5c 81       	ldd	r21, Y+4	; 0x04
    2c9c:	84 1b       	sub	r24, r20
    2c9e:	95 0b       	sbc	r25, r21
    2ca0:	85 36       	cpi	r24, 0x65	; 101
    2ca2:	91 05       	cpc	r25, r1
    2ca4:	a4 f0       	brlt	.+40     	; 0x2cce <main+0x27aa>
    2ca6:	12 01       	movw	r2, r4
    2ca8:	45 e2       	ldi	r20, 0x25	; 37
    2caa:	64 2e       	mov	r6, r20
    2cac:	71 2c       	mov	r7, r1
    2cae:	0f c0       	rjmp	.+30     	; 0x2cce <main+0x27aa>
					state = WAIT;
					counterRef = counter;
				}
				if(state == D2RAISE && counter - counterRef > pWait){
    2cb0:	5c e1       	ldi	r21, 0x1C	; 28
    2cb2:	65 16       	cp	r6, r21
    2cb4:	71 04       	cpc	r7, r1
    2cb6:	59 f4       	brne	.+22     	; 0x2cce <main+0x27aa>
    2cb8:	c2 01       	movw	r24, r4
    2cba:	82 19       	sub	r24, r2
    2cbc:	93 09       	sbc	r25, r3
    2cbe:	85 36       	cpi	r24, 0x65	; 101
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	9c f0       	brlt	.+38     	; 0x2cea <main+0x27c6>
    2cc4:	12 01       	movw	r2, r4
    2cc6:	35 e2       	ldi	r19, 0x25	; 37
    2cc8:	63 2e       	mov	r6, r19
    2cca:	71 2c       	mov	r7, r1
    2ccc:	0e c0       	rjmp	.+28     	; 0x2cea <main+0x27c6>
					state = WAIT;
					counterRef = counter;
				}
				if(state == DRY2 && counter - counterRef > totalStepLength2*fixtureMotorWholePlate){
    2cce:	8d e1       	ldi	r24, 0x1D	; 29
    2cd0:	68 16       	cp	r6, r24
    2cd2:	71 04       	cpc	r7, r1
    2cd4:	51 f4       	brne	.+20     	; 0x2cea <main+0x27c6>
    2cd6:	c2 01       	movw	r24, r4
    2cd8:	82 19       	sub	r24, r2
    2cda:	93 09       	sbc	r25, r3
    2cdc:	81 5a       	subi	r24, 0xA1	; 161
    2cde:	9f 40       	sbci	r25, 0x0F	; 15
    2ce0:	8c f0       	brlt	.+34     	; 0x2d04 <main+0x27e0>
    2ce2:	95 e2       	ldi	r25, 0x25	; 37
    2ce4:	69 2e       	mov	r6, r25
    2ce6:	71 2c       	mov	r7, r1
    2ce8:	0d c0       	rjmp	.+26     	; 0x2d04 <main+0x27e0>
					state = WAIT;
					counterRef30 = counter;
				}
				if(state == D2STOP && /*counter - counterRef > totalStepLength2*fixtureMotorLoadBack &&*/ u_inputByte0.bits_in_inputByte0.fixturePlate == 0){
    2cea:	be e1       	ldi	r27, 0x1E	; 30
    2cec:	6b 16       	cp	r6, r27
    2cee:	71 04       	cpc	r7, r1
    2cf0:	49 f4       	brne	.+18     	; 0x2d04 <main+0x27e0>
    2cf2:	80 91 d0 03 	lds	r24, 0x03D0
    2cf6:	83 fd       	sbrc	r24, 3
    2cf8:	12 c0       	rjmp	.+36     	; 0x2d1e <main+0x27fa>
    2cfa:	12 01       	movw	r2, r4
    2cfc:	85 e2       	ldi	r24, 0x25	; 37
    2cfe:	68 2e       	mov	r6, r24
    2d00:	71 2c       	mov	r7, r1
    2d02:	0d c0       	rjmp	.+26     	; 0x2d1e <main+0x27fa>
					state = WAIT;
					counterRef = counter;
				}
				if(state == RAISEL2 && /*counter - counterRef > 1000 &&*/ u_inputByte0.bits_in_inputByte0.fixtureLift == 0){
    2d04:	3f e1       	ldi	r19, 0x1F	; 31
    2d06:	63 16       	cp	r6, r19
    2d08:	71 04       	cpc	r7, r1
    2d0a:	49 f4       	brne	.+18     	; 0x2d1e <main+0x27fa>
    2d0c:	80 91 d0 03 	lds	r24, 0x03D0
    2d10:	81 fd       	sbrc	r24, 1
    2d12:	12 c0       	rjmp	.+36     	; 0x2d38 <main+0x2814>
    2d14:	12 01       	movw	r2, r4
    2d16:	05 e2       	ldi	r16, 0x25	; 37
    2d18:	60 2e       	mov	r6, r16
    2d1a:	71 2c       	mov	r7, r1
    2d1c:	0d c0       	rjmp	.+26     	; 0x2d38 <main+0x2814>
					state = WAIT;
					counterRef = counter;
				}
				if(state == FIXH && /*counter - counterRef > totalStepLength2*fixtureMotorHomeFix &&*/ u_inputByte0.bits_in_inputByte0.fixtureHome == 0){
    2d1e:	40 e2       	ldi	r20, 0x20	; 32
    2d20:	64 16       	cp	r6, r20
    2d22:	71 04       	cpc	r7, r1
    2d24:	49 f4       	brne	.+18     	; 0x2d38 <main+0x2814>
    2d26:	80 91 d0 03 	lds	r24, 0x03D0
    2d2a:	82 fd       	sbrc	r24, 2
    2d2c:	14 c0       	rjmp	.+40     	; 0x2d56 <main+0x2832>
    2d2e:	12 01       	movw	r2, r4
    2d30:	15 e2       	ldi	r17, 0x25	; 37
    2d32:	61 2e       	mov	r6, r17
    2d34:	71 2c       	mov	r7, r1
    2d36:	0f c0       	rjmp	.+30     	; 0x2d56 <main+0x2832>
					state = WAIT;
					counterRef = counter;
				}
				if(state == LOWERL3 && counter - counterRef > pWait){
    2d38:	51 e2       	ldi	r21, 0x21	; 33
    2d3a:	65 16       	cp	r6, r21
    2d3c:	71 04       	cpc	r7, r1
    2d3e:	59 f4       	brne	.+22     	; 0x2d56 <main+0x2832>
    2d40:	c2 01       	movw	r24, r4
    2d42:	82 19       	sub	r24, r2
    2d44:	93 09       	sbc	r25, r3
    2d46:	85 36       	cpi	r24, 0x65	; 101
    2d48:	91 05       	cpc	r25, r1
    2d4a:	a4 f0       	brlt	.+40     	; 0x2d74 <main+0x2850>
    2d4c:	12 01       	movw	r2, r4
    2d4e:	b5 e2       	ldi	r27, 0x25	; 37
    2d50:	6b 2e       	mov	r6, r27
    2d52:	71 2c       	mov	r7, r1
    2d54:	0f c0       	rjmp	.+30     	; 0x2d74 <main+0x2850>
					state = WAIT;
					counterRef = counter;
				}
				if(state == UNLOAD && counter - counterRef > totalStepLength1*plateLoadMotorLoadPlate){
    2d56:	82 e2       	ldi	r24, 0x22	; 34
    2d58:	68 16       	cp	r6, r24
    2d5a:	71 04       	cpc	r7, r1
    2d5c:	59 f4       	brne	.+22     	; 0x2d74 <main+0x2850>
    2d5e:	c2 01       	movw	r24, r4
    2d60:	82 19       	sub	r24, r2
    2d62:	93 09       	sbc	r25, r3
    2d64:	81 5a       	subi	r24, 0xA1	; 161
    2d66:	9f 40       	sbci	r25, 0x0F	; 15
    2d68:	94 f0       	brlt	.+36     	; 0x2d8e <main+0x286a>
    2d6a:	12 01       	movw	r2, r4
    2d6c:	a5 e2       	ldi	r26, 0x25	; 37
    2d6e:	6a 2e       	mov	r6, r26
    2d70:	71 2c       	mov	r7, r1
    2d72:	0d c0       	rjmp	.+26     	; 0x2d8e <main+0x286a>
					state = WAIT;
					counterRef = counter;
				}
				if(state == END && counter - counterRef > 10){
    2d74:	b3 e2       	ldi	r27, 0x23	; 35
    2d76:	6b 16       	cp	r6, r27
    2d78:	71 04       	cpc	r7, r1
    2d7a:	49 f4       	brne	.+18     	; 0x2d8e <main+0x286a>
    2d7c:	c2 01       	movw	r24, r4
    2d7e:	82 19       	sub	r24, r2
    2d80:	93 09       	sbc	r25, r3
    2d82:	0b 97       	sbiw	r24, 0x0b	; 11
    2d84:	ac f0       	brlt	.+42     	; 0x2db0 <main+0x288c>
    2d86:	f4 e2       	ldi	r31, 0x24	; 36
    2d88:	6f 2e       	mov	r6, r31
    2d8a:	71 2c       	mov	r7, r1
    2d8c:	11 c0       	rjmp	.+34     	; 0x2db0 <main+0x288c>
					state = DONER;
				}
				if(state == WAIT && buttonTriggered){
    2d8e:	35 e2       	ldi	r19, 0x25	; 37
    2d90:	63 16       	cp	r6, r19
    2d92:	71 04       	cpc	r7, r1
    2d94:	69 f4       	brne	.+26     	; 0x2db0 <main+0x288c>
    2d96:	22 23       	and	r18, r18
    2d98:	c1 f0       	breq	.+48     	; 0x2dca <main+0x28a6>
					state = ++last;
    2d9a:	25 96       	adiw	r28, 0x05	; 5
    2d9c:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d9e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2da0:	25 97       	sbiw	r28, 0x05	; 5
    2da2:	4f 5f       	subi	r20, 0xFF	; 255
    2da4:	5f 4f       	sbci	r21, 0xFF	; 255
    2da6:	25 96       	adiw	r28, 0x05	; 5
    2da8:	5f af       	std	Y+63, r21	; 0x3f
    2daa:	4e af       	std	Y+62, r20	; 0x3e
    2dac:	25 97       	sbiw	r28, 0x05	; 5
    2dae:	3a 01       	movw	r6, r20
				}


				//state actions
						
			switch (state){
    2db0:	f3 01       	movw	r30, r6
    2db2:	e6 32       	cpi	r30, 0x26	; 38
    2db4:	f1 05       	cpc	r31, r1
    2db6:	08 f0       	brcs	.+2      	; 0x2dba <main+0x2896>
    2db8:	bc c1       	rjmp	.+888    	; 0x3132 <main+0x2c0e>
    2dba:	e2 52       	subi	r30, 0x22	; 34
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	ee 0f       	add	r30, r30
    2dc0:	ff 1f       	adc	r31, r31
    2dc2:	05 90       	lpm	r0, Z+
    2dc4:	f4 91       	lpm	r31, Z+
    2dc6:	e0 2d       	mov	r30, r0
    2dc8:	09 94       	ijmp
    2dca:	1c aa       	std	Y+52, r1	; 0x34
    2dcc:	1b aa       	std	Y+51, r1	; 0x33
    2dce:	1e a2       	std	Y+38, r1	; 0x26
    2dd0:	1d a2       	std	Y+37, r1	; 0x25
    2dd2:	18 a2       	std	Y+32, r1	; 0x20
    2dd4:	1f 8e       	std	Y+31, r1	; 0x1f
    2dd6:	1d c1       	rjmp	.+570    	; 0x3012 <main+0x2aee>
					brush1Motor = 0;
					brush2Motor = 0;
					paperTowelMotor = 0;
					break;
				case INIT:
					if(u_inputByte0.bits_in_inputByte0.fixtureHome == 1){
    2dd8:	80 91 d0 03 	lds	r24, 0x03D0
    2ddc:	90 91 cc 03 	lds	r25, 0x03CC
    2de0:	20 91 ce 03 	lds	r18, 0x03CE
    2de4:	82 ff       	sbrs	r24, 2
    2de6:	07 c0       	rjmp	.+14     	; 0x2df6 <main+0x28d2>
						u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  //********* 0 is used as fixture backward ?cc?, 1 as forward ?c? **********
    2de8:	9f 7e       	andi	r25, 0xEF	; 239
    2dea:	90 93 cc 03 	sts	0x03CC, r25
						u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2dee:	27 7f       	andi	r18, 0xF7	; 247
    2df0:	20 93 ce 03 	sts	0x03CE, r18
    2df4:	9e c1       	rjmp	.+828    	; 0x3132 <main+0x2c0e>
					}
					else{
						u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2df6:	9f 7d       	andi	r25, 0xDF	; 223
    2df8:	90 93 cc 03 	sts	0x03CC, r25
						fixtureMotor = 0;
						u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2dfc:	2f 7e       	andi	r18, 0xEF	; 239
						u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2dfe:	28 60       	ori	r18, 0x08	; 8
    2e00:	20 93 ce 03 	sts	0x03CE, r18
						if(print0 == 1){
    2e04:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e06:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	09 f0       	breq	.+2      	; 0x2e0e <main+0x28ea>
    2e0c:	45 c0       	rjmp	.+138    	; 0x2e98 <main+0x2974>
							OrangutanLCD::gotoXY(0,1);
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	61 e0       	ldi	r22, 0x01	; 1
    2e12:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
							OrangutanLCD::print("PUSH TO START");
    2e16:	8e e4       	ldi	r24, 0x4E	; 78
    2e18:	93 e0       	ldi	r25, 0x03	; 3
    2e1a:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
    2e1e:	1e a6       	std	Y+46, r1	; 0x2e
    2e20:	1d a6       	std	Y+45, r1	; 0x2d
    2e22:	3a c0       	rjmp	.+116    	; 0x2e98 <main+0x2974>
							print0 = 0;
						}
					}
					break;
				case LOAD:
					u_outputByte0.bits_in_outputByte0.ACPower = 0;
    2e24:	20 91 ce 03 	lds	r18, 0x03CE
    2e28:	32 2f       	mov	r19, r18
    2e2a:	3e 7f       	andi	r19, 0xFE	; 254
					if((counter % 200) < 100){
    2e2c:	c2 01       	movw	r24, r4
    2e2e:	68 ec       	ldi	r22, 0xC8	; 200
    2e30:	70 e0       	ldi	r23, 0x00	; 0
    2e32:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <__divmodhi4>
    2e36:	84 36       	cpi	r24, 0x64	; 100
    2e38:	91 05       	cpc	r25, r1
    2e3a:	24 f4       	brge	.+8      	; 0x2e44 <main+0x2920>
						u_outputByte0.bits_in_outputByte0.blowerPulse = 0;
    2e3c:	2c 7f       	andi	r18, 0xFC	; 252
    2e3e:	20 93 ce 03 	sts	0x03CE, r18
    2e42:	03 c0       	rjmp	.+6      	; 0x2e4a <main+0x2926>
					}
					else{
						u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2e44:	32 60       	ori	r19, 0x02	; 2
    2e46:	30 93 ce 03 	sts	0x03CE, r19
					}
					plateLoadMotor = 1;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;  //****** dir1 ******
    2e4a:	80 91 cc 03 	lds	r24, 0x03CC
    2e4e:	8d 7f       	andi	r24, 0xFD	; 253
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    2e50:	84 60       	ori	r24, 0x04	; 4
    2e52:	80 93 cc 03 	sts	0x03CC, r24
					u_outputByte0.bits_in_outputByte0.plateStop = 0;
    2e56:	80 91 ce 03 	lds	r24, 0x03CE
    2e5a:	8b 7f       	andi	r24, 0xFB	; 251
    2e5c:	80 93 ce 03 	sts	0x03CE, r24
    2e60:	a1 e0       	ldi	r26, 0x01	; 1
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	be a3       	std	Y+38, r27	; 0x26
    2e66:	ad a3       	std	Y+37, r26	; 0x25
    2e68:	64 c1       	rjmp	.+712    	; 0x3132 <main+0x2c0e>
					break;
				case RAISEL1:
					u_outputByte0.bits_in_outputByte0.blowerPulse = 1;
    2e6a:	80 91 ce 03 	lds	r24, 0x03CE
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    2e6e:	81 7e       	andi	r24, 0xE1	; 225
					u_outputByte0.bits_in_outputByte0.plateStop = 1;
    2e70:	86 61       	ori	r24, 0x16	; 22
    2e72:	80 93 ce 03 	sts	0x03CE, r24
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2e76:	80 91 cc 03 	lds	r24, 0x03CC
    2e7a:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    2e7c:	8b 7f       	andi	r24, 0xFB	; 251
    2e7e:	80 93 cc 03 	sts	0x03CC, r24
    2e82:	4a c1       	rjmp	.+660    	; 0x3118 <main+0x2bf4>
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ****** dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case LOWERL1:
						fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    2e84:	80 91 cc 03 	lds	r24, 0x03CC
    2e88:	8f 7d       	andi	r24, 0xDF	; 223
    2e8a:	80 93 cc 03 	sts	0x03CC, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    2e8e:	80 91 ce 03 	lds	r24, 0x03CE
    2e92:	88 60       	ori	r24, 0x08	; 8
    2e94:	80 93 ce 03 	sts	0x03CE, r24
    2e98:	18 8a       	std	Y+16, r1	; 0x10
    2e9a:	1f 86       	std	Y+15, r1	; 0x0f
    2e9c:	4a c1       	rjmp	.+660    	; 0x3132 <main+0x2c0e>
					break;
				case LOWERL2:
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    2e9e:	80 91 ce 03 	lds	r24, 0x03CE
    2ea2:	8f 7e       	andi	r24, 0xEF	; 239
    2ea4:	80 93 ce 03 	sts	0x03CE, r24
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2ea8:	80 91 cc 03 	lds	r24, 0x03CC
    2eac:	80 62       	ori	r24, 0x20	; 32
    2eae:	80 93 cc 03 	sts	0x03CC, r24
    2eb2:	3f c1       	rjmp	.+638    	; 0x3132 <main+0x2c0e>
					break;
				//*********************************************
				case MOVEC1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2eb4:	80 91 cc 03 	lds	r24, 0x03CC
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2eb8:	80 63       	ori	r24, 0x30	; 48
    2eba:	77 c0       	rjmp	.+238    	; 0x2faa <main+0x2a86>
					break;
				case B1SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
    2ebc:	80 91 cd 03 	lds	r24, 0x03CD
    2ec0:	81 60       	ori	r24, 0x01	; 1
    2ec2:	80 93 cd 03 	sts	0x03CD, r24
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2ec6:	80 91 cc 03 	lds	r24, 0x03CC
    2eca:	8f 77       	andi	r24, 0x7F	; 127
    2ecc:	80 93 cc 03 	sts	0x03CC, r24
    2ed0:	e3 cf       	rjmp	.-58     	; 0x2e98 <main+0x2974>
					break;
				case B1START1:
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2ed2:	80 91 ce 03 	lds	r24, 0x03CE
    2ed6:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2ed8:	8f 7d       	andi	r24, 0xDF	; 223
    2eda:	80 93 ce 03 	sts	0x03CE, r24
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	98 a3       	std	Y+32, r25	; 0x20
    2ee4:	8f 8f       	std	Y+31, r24	; 0x1f
    2ee6:	25 c1       	rjmp	.+586    	; 0x3132 <main+0x2c0e>
					break;
				case CLEAN1_1:
					brush1Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2ee8:	80 91 cc 03 	lds	r24, 0x03CC
    2eec:	80 62       	ori	r24, 0x20	; 32
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2eee:	8f 7e       	andi	r24, 0xEF	; 239
    2ef0:	80 93 cc 03 	sts	0x03CC, r24
    2ef4:	a1 e0       	ldi	r26, 0x01	; 1
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	b8 a3       	std	Y+32, r27	; 0x20
    2efa:	af 8f       	std	Y+31, r26	; 0x1f
    2efc:	eb c0       	rjmp	.+470    	; 0x30d4 <main+0x2bb0>
					brush1Motor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
					break;
				case CLEAN1_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 1;  // ******* dir2 *******
    2efe:	80 91 cc 03 	lds	r24, 0x03CC
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2f02:	80 63       	ori	r24, 0x30	; 48
    2f04:	8c c0       	rjmp	.+280    	; 0x301e <main+0x2afa>
					break;
				case B1START2:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.brush1MotorDir = 0;  // ******* dir3 *******
    2f06:	80 91 cc 03 	lds	r24, 0x03CC
    2f0a:	8f 77       	andi	r24, 0x7F	; 127
    2f0c:	80 93 cc 03 	sts	0x03CC, r24
					brush1Motor = 1;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 1;
    2f10:	80 91 ce 03 	lds	r24, 0x03CE
    2f14:	80 64       	ori	r24, 0x40	; 64
					u_outputByte0.bits_in_outputByte0.brush1Raise = 0;
    2f16:	8f 7d       	andi	r24, 0xDF	; 223
    2f18:	80 93 ce 03 	sts	0x03CE, r24
    2f1c:	41 e0       	ldi	r20, 0x01	; 1
    2f1e:	50 e0       	ldi	r21, 0x00	; 0
    2f20:	58 a3       	std	Y+32, r21	; 0x20
    2f22:	4f 8f       	std	Y+31, r20	; 0x1f
    2f24:	b9 cf       	rjmp	.-142    	; 0x2e98 <main+0x2974>
					break;
				case CLEAN1_3:
					brush1Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2f26:	80 91 cc 03 	lds	r24, 0x03CC
    2f2a:	80 62       	ori	r24, 0x20	; 32
    2f2c:	80 93 cc 03 	sts	0x03CC, r24
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	98 a3       	std	Y+32, r25	; 0x20
    2f36:	8f 8f       	std	Y+31, r24	; 0x1f
    2f38:	bd c0       	rjmp	.+378    	; 0x30b4 <main+0x2b90>
					break;
				case B1STOP2:
					brush1Motor = 0;
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.brush1Lower = 0;
    2f3a:	80 91 ce 03 	lds	r24, 0x03CE
    2f3e:	8f 7b       	andi	r24, 0xBF	; 191
					u_outputByte0.bits_in_outputByte0.brush1Raise = 1;
    2f40:	80 62       	ori	r24, 0x20	; 32
    2f42:	80 93 ce 03 	sts	0x03CE, r24
    2f46:	18 a2       	std	Y+32, r1	; 0x20
    2f48:	1f 8e       	std	Y+31, r1	; 0x1f
    2f4a:	a6 cf       	rjmp	.-180    	; 0x2e98 <main+0x2974>
				
					break;
				//*************************** may need to reverse order depending on dry station 1 positioning ***************************
				case B2SET:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 1;
    2f4c:	80 91 cd 03 	lds	r24, 0x03CD
    2f50:	88 60       	ori	r24, 0x08	; 8
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2f52:	8b 7f       	andi	r24, 0xFB	; 251
    2f54:	80 93 cd 03 	sts	0x03CD, r24
    2f58:	9f cf       	rjmp	.-194    	; 0x2e98 <main+0x2974>
					break;
				case B2START1:
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2f5a:	80 91 cf 03 	lds	r24, 0x03CF
    2f5e:	81 60       	ori	r24, 0x01	; 1
    2f60:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2f64:	80 91 ce 03 	lds	r24, 0x03CE
    2f68:	8f 77       	andi	r24, 0x7F	; 127
    2f6a:	80 93 ce 03 	sts	0x03CE, r24
    2f6e:	a1 e0       	ldi	r26, 0x01	; 1
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	ba 8f       	std	Y+26, r27	; 0x1a
    2f74:	a9 8f       	std	Y+25, r26	; 0x19
    2f76:	dd c0       	rjmp	.+442    	; 0x3132 <main+0x2c0e>
					break;
				case CLEAN2_1:
					brush2Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2f78:	80 91 cc 03 	lds	r24, 0x03CC
    2f7c:	80 62       	ori	r24, 0x20	; 32
    2f7e:	80 93 cc 03 	sts	0x03CC, r24
    2f82:	21 e0       	ldi	r18, 0x01	; 1
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	3a 8f       	std	Y+26, r19	; 0x1a
    2f88:	29 8f       	std	Y+25, r18	; 0x19
    2f8a:	4d c0       	rjmp	.+154    	; 0x3026 <main+0x2b02>
					break;
				case B2STOP1:
					fixtureMotor = 0;
					brush2Motor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2f8c:	80 91 cf 03 	lds	r24, 0x03CF
    2f90:	8e 7f       	andi	r24, 0xFE	; 254
    2f92:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2f96:	80 91 ce 03 	lds	r24, 0x03CE
    2f9a:	80 68       	ori	r24, 0x80	; 128
    2f9c:	80 93 ce 03 	sts	0x03CE, r24
    2fa0:	38 c0       	rjmp	.+112    	; 0x3012 <main+0x2aee>
					break;
				case CLEAN2_2:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
    2fa2:	80 91 cc 03 	lds	r24, 0x03CC
    2fa6:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2fa8:	80 62       	ori	r24, 0x20	; 32
    2faa:	80 93 cc 03 	sts	0x03CC, r24
    2fae:	41 e0       	ldi	r20, 0x01	; 1
    2fb0:	50 e0       	ldi	r21, 0x00	; 0
    2fb2:	58 8b       	std	Y+16, r21	; 0x10
    2fb4:	4f 87       	std	Y+15, r20	; 0x0f
    2fb6:	bd c0       	rjmp	.+378    	; 0x3132 <main+0x2c0e>
					break;
				case B2START2:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.brush2MotorDir = 0;  // ******* dir4 *******
    2fb8:	80 91 cd 03 	lds	r24, 0x03CD
    2fbc:	8b 7f       	andi	r24, 0xFB	; 251
    2fbe:	80 93 cd 03 	sts	0x03CD, r24
					brush2Motor = 1;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 1;
    2fc2:	80 91 cf 03 	lds	r24, 0x03CF
    2fc6:	81 60       	ori	r24, 0x01	; 1
    2fc8:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 0;
    2fcc:	80 91 ce 03 	lds	r24, 0x03CE
    2fd0:	8f 77       	andi	r24, 0x7F	; 127
    2fd2:	80 93 ce 03 	sts	0x03CE, r24
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	9a 8f       	std	Y+26, r25	; 0x1a
    2fdc:	89 8f       	std	Y+25, r24	; 0x19
    2fde:	5c cf       	rjmp	.-328    	; 0x2e98 <main+0x2974>
					break;
				case CLEAN2_3:
					brush2Motor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    2fe0:	80 91 cc 03 	lds	r24, 0x03CC
    2fe4:	80 62       	ori	r24, 0x20	; 32
    2fe6:	80 93 cc 03 	sts	0x03CC, r24
    2fea:	a1 e0       	ldi	r26, 0x01	; 1
    2fec:	b0 e0       	ldi	r27, 0x00	; 0
    2fee:	ba 8f       	std	Y+26, r27	; 0x1a
    2ff0:	a9 8f       	std	Y+25, r26	; 0x19
    2ff2:	70 c0       	rjmp	.+224    	; 0x30d4 <main+0x2bb0>
					break;
				case B2STOP2:
					brush2Motor = 0;
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.brush2Lower = 0;
    2ff4:	80 91 cf 03 	lds	r24, 0x03CF
    2ff8:	8e 7f       	andi	r24, 0xFE	; 254
    2ffa:	80 93 cf 03 	sts	0x03CF, r24
					u_outputByte0.bits_in_outputByte0.brush2Raise = 1;
    2ffe:	80 91 ce 03 	lds	r24, 0x03CE
    3002:	80 68       	ori	r24, 0x80	; 128
    3004:	80 93 ce 03 	sts	0x03CE, r24
					u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
    3008:	80 91 cd 03 	lds	r24, 0x03CD
    300c:	87 7f       	andi	r24, 0xF7	; 247
    300e:	80 93 cd 03 	sts	0x03CD, r24
    3012:	1a 8e       	std	Y+26, r1	; 0x1a
    3014:	19 8e       	std	Y+25, r1	; 0x19
    3016:	40 cf       	rjmp	.-384    	; 0x2e98 <main+0x2974>
					break;
				//*************************************************
				case MOVED1:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    3018:	80 91 cc 03 	lds	r24, 0x03CC
    301c:	80 62       	ori	r24, 0x20	; 32
    301e:	80 93 cc 03 	sts	0x03CC, r24
    3022:	21 e0       	ldi	r18, 0x01	; 1
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	38 8b       	std	Y+16, r19	; 0x10
    3028:	2f 87       	std	Y+15, r18	; 0x0f
    302a:	83 c0       	rjmp	.+262    	; 0x3132 <main+0x2c0e>
					break;
				case D1START:
					fixtureMotor = 0;
					u_outputByte1.bits_in_outputByte1.airKnife = 0;
    302c:	80 91 cf 03 	lds	r24, 0x03CF
    3030:	87 7f       	andi	r24, 0xF7	; 247
    3032:	80 93 cf 03 	sts	0x03CF, r24
    3036:	30 cf       	rjmp	.-416    	; 0x2e98 <main+0x2974>
				case DRY1:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;  // ******* dir2 *******
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					break;
				case D1STOP:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    3038:	80 91 cc 03 	lds	r24, 0x03CC
    303c:	80 62       	ori	r24, 0x20	; 32
    303e:	80 93 cc 03 	sts	0x03CC, r24
					u_outputByte1.bits_in_outputByte1.airKnife = 1;
    3042:	80 91 cf 03 	lds	r24, 0x03CF
    3046:	88 60       	ori	r24, 0x08	; 8
    3048:	80 93 cf 03 	sts	0x03CF, r24
    304c:	31 c0       	rjmp	.+98     	; 0x30b0 <main+0x2b8c>
					break;
				case D2START:
					fixtureMotor = 0;
					u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 1;
    304e:	80 91 cd 03 	lds	r24, 0x03CD
    3052:	80 64       	ori	r24, 0x40	; 64
					u_motorByte1.bits_in_motorByte1.paperTowelMotorDir = 0;
    3054:	8f 7d       	andi	r24, 0xDF	; 223
    3056:	80 93 cd 03 	sts	0x03CD, r24
    305a:	a1 e0       	ldi	r26, 0x01	; 1
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	bc ab       	std	Y+52, r27	; 0x34
    3060:	ab ab       	std	Y+51, r26	; 0x33
    3062:	1a cf       	rjmp	.-460    	; 0x2e98 <main+0x2974>
					paperTowelMotor = 1;
					break;
				case D2RAISE:
					paperTowelMotor = 1;
					u_outputByte1.bits_in_outputByte1.ptRaise = 0;
    3064:	80 91 cf 03 	lds	r24, 0x03CF
    3068:	8d 7f       	andi	r24, 0xFD	; 253
    306a:	80 93 cf 03 	sts	0x03CF, r24
    306e:	21 e0       	ldi	r18, 0x01	; 1
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	3c ab       	std	Y+52, r19	; 0x34
    3074:	2b ab       	std	Y+51, r18	; 0x33
    3076:	5d c0       	rjmp	.+186    	; 0x3132 <main+0x2c0e>
					break;
				case DRY2:
					paperTowelMotor = 1;
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    3078:	80 91 cc 03 	lds	r24, 0x03CC
    307c:	80 62       	ori	r24, 0x20	; 32
    307e:	80 93 cc 03 	sts	0x03CC, r24
    3082:	41 e0       	ldi	r20, 0x01	; 1
    3084:	50 e0       	ldi	r21, 0x00	; 0
    3086:	5c ab       	std	Y+52, r21	; 0x34
    3088:	4b ab       	std	Y+51, r20	; 0x33
    308a:	93 cf       	rjmp	.-218    	; 0x2fb2 <main+0x2a8e>
					break;
				case D2STOP:
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    308c:	80 91 cc 03 	lds	r24, 0x03CC
    3090:	80 62       	ori	r24, 0x20	; 32
    3092:	80 93 cc 03 	sts	0x03CC, r24
					paperTowelMotor = 0;
						u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower = 0;
    3096:	80 91 cd 03 	lds	r24, 0x03CD
    309a:	8f 7b       	andi	r24, 0xBF	; 191
    309c:	80 93 cd 03 	sts	0x03CD, r24
					u_outputByte1.bits_in_outputByte1.ptRaise = 1;
    30a0:	80 91 cf 03 	lds	r24, 0x03CF
    30a4:	82 60       	ori	r24, 0x02	; 2
					u_outputByte1.bits_in_outputByte1.ptLower = 0;
    30a6:	8b 7f       	andi	r24, 0xFB	; 251
    30a8:	80 93 cf 03 	sts	0x03CF, r24
    30ac:	1c aa       	std	Y+52, r1	; 0x34
    30ae:	1b aa       	std	Y+51, r1	; 0x33
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	98 8b       	std	Y+16, r25	; 0x10
    30b6:	8f 87       	std	Y+15, r24	; 0x0f
    30b8:	3c c0       	rjmp	.+120    	; 0x3132 <main+0x2c0e>
					break;
				case RAISEL2:
					fixtureMotor = 0;
					u_outputByte0.bits_in_outputByte0.raiseFixture = 0;
    30ba:	80 91 ce 03 	lds	r24, 0x03CE
    30be:	87 7f       	andi	r24, 0xF7	; 247
					u_outputByte0.bits_in_outputByte0.lowerFixture = 1;
    30c0:	80 61       	ori	r24, 0x10	; 16
    30c2:	e8 ce       	rjmp	.-560    	; 0x2e94 <main+0x2970>
					break;
				case FIXH:
					u_motorByte0.bits_in_motorByte0.fixtureMotorDir = 0;
    30c4:	80 91 cc 03 	lds	r24, 0x03CC
    30c8:	8f 7e       	andi	r24, 0xEF	; 239
					fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
    30ca:	80 62       	ori	r24, 0x20	; 32
    30cc:	80 93 cc 03 	sts	0x03CC, r24
    30d0:	a1 e0       	ldi	r26, 0x01	; 1
    30d2:	b0 e0       	ldi	r27, 0x00	; 0
    30d4:	b8 8b       	std	Y+16, r27	; 0x10
    30d6:	af 87       	std	Y+15, r26	; 0x0f
    30d8:	2c c0       	rjmp	.+88     	; 0x3132 <main+0x2c0e>
					break;
				case LOWERL3:
					fixtureMotor = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    30da:	80 91 cc 03 	lds	r24, 0x03CC
    30de:	8f 7d       	andi	r24, 0xDF	; 223
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 1;
    30e0:	84 60       	ori	r24, 0x04	; 4
    30e2:	80 93 cc 03 	sts	0x03CC, r24
					u_outputByte0.bits_in_outputByte0.raiseFixture = 1;
    30e6:	80 91 ce 03 	lds	r24, 0x03CE
    30ea:	88 60       	ori	r24, 0x08	; 8
					u_outputByte0.bits_in_outputByte0.lowerFixture = 0;
    30ec:	8f 7e       	andi	r24, 0xEF	; 239
    30ee:	d2 ce       	rjmp	.-604    	; 0x2e94 <main+0x2970>
					break;
				case UNLOAD:
					u_motorByte0.bits_in_motorByte0.plateLoadMotorDir = 0;
    30f0:	80 91 cc 03 	lds	r24, 0x03CC
    30f4:	8d 7f       	andi	r24, 0xFD	; 253
    30f6:	80 93 cc 03 	sts	0x03CC, r24
    30fa:	21 e0       	ldi	r18, 0x01	; 1
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	3e a3       	std	Y+38, r19	; 0x26
    3100:	2d a3       	std	Y+37, r18	; 0x25
    3102:	17 c0       	rjmp	.+46     	; 0x3132 <main+0x2c0e>
					plateLoadMotor = 1;
					break;
				case END:
					plateLoadMotor = 0;
					u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower = 0;
    3104:	80 91 cc 03 	lds	r24, 0x03CC
    3108:	8b 7f       	andi	r24, 0xFB	; 251
    310a:	80 93 cc 03 	sts	0x03CC, r24
					if(print35 == 1){
    310e:	49 85       	ldd	r20, Y+9	; 0x09
    3110:	5a 85       	ldd	r21, Y+10	; 0x0a
    3112:	41 30       	cpi	r20, 0x01	; 1
    3114:	51 05       	cpc	r21, r1
    3116:	19 f0       	breq	.+6      	; 0x311e <main+0x2bfa>
    3118:	1e a2       	std	Y+38, r1	; 0x26
    311a:	1d a2       	std	Y+37, r1	; 0x25
    311c:	0a c0       	rjmp	.+20     	; 0x3132 <main+0x2c0e>
						OrangutanLCD::clear();
    311e:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
						OrangutanLCD::print("END OF CYCLE");
    3122:	8c e5       	ldi	r24, 0x5C	; 92
    3124:	93 e0       	ldi	r25, 0x03	; 3
    3126:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
    312a:	1e a2       	std	Y+38, r1	; 0x26
    312c:	1d a2       	std	Y+37, r1	; 0x25
    312e:	1a 86       	std	Y+10, r1	; 0x0a
    3130:	19 86       	std	Y+9, r1	; 0x09
					}
					break;
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);
    3132:	8d b7       	in	r24, 0x3d	; 61
    3134:	9e b7       	in	r25, 0x3e	; 62
    3136:	42 97       	sbiw	r24, 0x12	; 18
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	f8 94       	cli
    313c:	9e bf       	out	0x3e, r25	; 62
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	8d bf       	out	0x3d, r24	; 61
    3142:	ed b7       	in	r30, 0x3d	; 61
    3144:	fe b7       	in	r31, 0x3e	; 62
    3146:	31 96       	adiw	r30, 0x01	; 1
    3148:	22 e0       	ldi	r18, 0x02	; 2
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	ad b7       	in	r26, 0x3d	; 61
    314e:	be b7       	in	r27, 0x3e	; 62
    3150:	12 96       	adiw	r26, 0x02	; 2
    3152:	3c 93       	st	X, r19
    3154:	2e 93       	st	-X, r18
    3156:	11 97       	sbiw	r26, 0x01	; 1
    3158:	33 83       	std	Z+3, r19	; 0x03
    315a:	22 83       	std	Z+2, r18	; 0x02
    315c:	35 83       	std	Z+5, r19	; 0x05
    315e:	24 83       	std	Z+4, r18	; 0x04
    3160:	37 83       	std	Z+7, r19	; 0x07
    3162:	26 83       	std	Z+6, r18	; 0x06
    3164:	41 e0       	ldi	r20, 0x01	; 1
    3166:	50 e0       	ldi	r21, 0x00	; 0
    3168:	51 87       	std	Z+9, r21	; 0x09
    316a:	40 87       	std	Z+8, r20	; 0x08
    316c:	53 87       	std	Z+11, r21	; 0x0b
    316e:	42 87       	std	Z+10, r20	; 0x0a
    3170:	55 87       	std	Z+13, r21	; 0x0d
    3172:	44 87       	std	Z+12, r20	; 0x0c
    3174:	57 87       	std	Z+15, r21	; 0x0f
    3176:	46 87       	std	Z+14, r20	; 0x0e
    3178:	51 8b       	std	Z+17, r21	; 0x11
    317a:	40 8b       	std	Z+16, r20	; 0x10
    317c:	c2 01       	movw	r24, r4
    317e:	b1 01       	movw	r22, r2
    3180:	4b 81       	ldd	r20, Y+3	; 0x03
    3182:	5c 81       	ldd	r21, Y+4	; 0x04
    3184:	2d a1       	ldd	r18, Y+37	; 0x25
    3186:	3e a1       	ldd	r19, Y+38	; 0x26
    3188:	0f 85       	ldd	r16, Y+15	; 0x0f
    318a:	18 89       	ldd	r17, Y+16	; 0x10
    318c:	ef 8c       	ldd	r14, Y+31	; 0x1f
    318e:	f8 a0       	ldd	r15, Y+32	; 0x20
    3190:	c9 8c       	ldd	r12, Y+25	; 0x19
    3192:	da 8c       	ldd	r13, Y+26	; 0x1a
    3194:	ab a8       	ldd	r10, Y+51	; 0x33
    3196:	bc a8       	ldd	r11, Y+52	; 0x34
    3198:	e2 e0       	ldi	r30, 0x02	; 2
    319a:	8e 2e       	mov	r8, r30
    319c:	91 2c       	mov	r9, r1
    319e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z15motor_and_writeiiiiiiiiiiiiiiiiii>
    31a2:	8d b7       	in	r24, 0x3d	; 61
    31a4:	9e b7       	in	r25, 0x3e	; 62
    31a6:	42 96       	adiw	r24, 0x12	; 18
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	9e bf       	out	0x3e, r25	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	8d bf       	out	0x3d, r24	; 61
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
			OrangutanLCD::gotoXY(7,0);
			OrangutanLCD::print("DEBUG");
			fixtureMotor = 1; u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
			while(state != DONER)
    31ba:	94 e2       	ldi	r25, 0x24	; 36
    31bc:	69 16       	cp	r6, r25
    31be:	71 04       	cpc	r7, r1
    31c0:	21 f0       	breq	.+8      	; 0x31ca <main+0x2ca6>
			}

				//determines which motors need to be sent which signals and writes the outputs and motors to the appropriate I2C expander
				motor_and_write(counter, counterRef, counterRefFive, plateLoadMotor, fixtureMotor, brush1Motor, brush2Motor, paperTowelMotor, totalStepLength1, totalStepLength2, totalStepLength3, totalStepLength4, totalStepLength5, highLength1, highLength2, highLength3, highLength4, highLength5);

				counter ++;
    31c2:	08 94       	sec
    31c4:	41 1c       	adc	r4, r1
    31c6:	51 1c       	adc	r5, r1
    31c8:	af cb       	rjmp	.-2210   	; 0x2928 <main+0x2404>
				delay_ms(1);
   		 	}
		}

		}
		u_motorByte0.bits_in_motorByte0.plateLoadMotorHighPower =0;
    31ca:	80 91 cc 03 	lds	r24, 0x03CC
		u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 0;
    31ce:	8b 7d       	andi	r24, 0xDB	; 219
    31d0:	80 93 cc 03 	sts	0x03CC, r24
		u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 0;
    31d4:	80 91 cd 03 	lds	r24, 0x03CD
		u_motorByte1.bits_in_motorByte1.brush2MotorHighPower = 0;
		u_motorByte1.bits_in_motorByte1.paperTowelMotorHighPower =0
		;
    31d8:	86 7b       	andi	r24, 0xB6	; 182
    31da:	80 93 cd 03 	sts	0x03CD, r24
		
		i2c_start(I2C1+I2C_WRITE);
    31de:	80 e4       	ldi	r24, 0x40	; 64
    31e0:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>
		i2c_write(0x2);
    31e4:	82 e0       	ldi	r24, 0x02	; 2
    31e6:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
		i2c_write(u_motorByte0.motorByte0);
    31ea:	80 91 cc 03 	lds	r24, 0x03CC
    31ee:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
		i2c_write(u_motorByte1.motorByte1);
    31f2:	80 91 cd 03 	lds	r24, 0x03CD
    31f6:	0e 94 96 19 	call	0x332c	; 0x332c <_Z9i2c_writeh>
		i2c_stop();
    31fa:	0e 94 8e 19 	call	0x331c	; 0x331c <_Z8i2c_stopv>
	}
	OrangutanLCD::print("END");
    31fe:	80 e9       	ldi	r24, 0x90	; 144
    3200:	93 e0       	ldi	r25, 0x03	; 3
    3202:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
    3206:	0c 94 ad 02 	jmp	0x55a	; 0x55a <main+0x36>
	int stateButton = NONE;			//holds the state in the button subroutine where the program is currently

	bool buttonTriggered = false;	//buttonTriggered is false if it hasn't been triggered, true if it has;
	bool switched = false;			//switched is false if the submode in maintenance mode wasn't just switched, true otherwise
    
	while(1){						//Repeats the entire program indefinitely (runs maintenance or normal each time)
    320a:	10 e0       	ldi	r17, 0x00	; 0
    320c:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <main+0x2ce>
					print = 0;
					u_motorByte0.bits_in_motorByte0.fixtureMotorHighPower = 1;
					u_motorByte1.bits_in_motorByte1.brush1MotorHighPower = 1;
					switched = true;
				}
				if(switched){
    3210:	11 23       	and	r17, r17
    3212:	11 f4       	brne	.+4      	; 0x3218 <main+0x2cf4>
    3214:	0c 94 87 04 	jmp	0x90e	; 0x90e <main+0x3ea>
    3218:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <main+0x3b0>
				delay_ms(1);
   		 	}
		}


		else if(OrangutanDigital::isInputHigh(IO_D1) && !OrangutanDigital::isInputHigh(IO_D2)){
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    3222:	88 23       	and	r24, r24
    3224:	11 f0       	breq	.+4      	; 0x322a <main+0x2d06>
    3226:	0c 94 35 0c 	jmp	0x186a	; 0x186a <main+0x1346>
				delay_ms(1);
   		 	}
		}


		else if(!OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    3230:	88 23       	and	r24, r24
    3232:	11 f4       	brne	.+4      	; 0x3238 <main+0x2d14>
    3234:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <main+0x1ab2>
				counter ++;
				delay_ms(1);
   		 	}
		}

		else if(OrangutanDigital::isInputHigh(IO_D1) && OrangutanDigital::isInputHigh(IO_D2)){
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN16OrangutanDigital11isInputHighEh>
    323e:	88 23       	and	r24, r24
    3240:	21 f2       	breq	.-120    	; 0x31ca <main+0x2ca6>
    3242:	43 cb       	rjmp	.-2426   	; 0x28ca <main+0x23a6>
    3244:	12 01       	movw	r2, r4
    3246:	95 e2       	ldi	r25, 0x25	; 37
    3248:	69 2e       	mov	r6, r25
    324a:	71 2c       	mov	r7, r1
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	ae cb       	rjmp	.-2212   	; 0x29ac <main+0x2488>
    3250:	38 8e       	std	Y+24, r3	; 0x18
    3252:	2f 8a       	std	Y+23, r2	; 0x17
    3254:	66 24       	eor	r6, r6
    3256:	77 24       	eor	r7, r7
    3258:	8c e2       	ldi	r24, 0x2C	; 44
    325a:	48 2e       	mov	r4, r24
    325c:	51 2c       	mov	r5, r1
    325e:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <main+0xacc>

00003262 <_ZdlPv>:
  return malloc(size); 
} 

void operator delete(void * ptr) 
{ 
  free(ptr); 
    3262:	0e 94 64 20 	call	0x40c8	; 0x40c8 <free>
} 
    3266:	08 95       	ret

00003268 <_Znwj>:
void * operator new(size_t size); 
void operator delete(void * ptr); 

void * operator new(size_t size) 
{ 
  return malloc(size); 
    3268:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <malloc>
} 
    326c:	08 95       	ret

0000326e <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    326e:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    3272:	8c e0       	ldi	r24, 0x0C	; 12
    3274:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
    3278:	08 95       	ret

0000327a <_Z9i2c_starth>:

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
    327a:	98 2f       	mov	r25, r24
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    327c:	84 ea       	ldi	r24, 0xA4	; 164
    327e:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3282:	80 91 bc 00 	lds	r24, 0x00BC
    3286:	87 ff       	sbrs	r24, 7
    3288:	fc cf       	rjmp	.-8      	; 0x3282 <_Z9i2c_starth+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    328a:	80 91 b9 00 	lds	r24, 0x00B9
    328e:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    3290:	88 30       	cpi	r24, 0x08	; 8
    3292:	21 f0       	breq	.+8      	; 0x329c <_Z9i2c_starth+0x22>
    3294:	80 31       	cpi	r24, 0x10	; 16
    3296:	11 f0       	breq	.+4      	; 0x329c <_Z9i2c_starth+0x22>
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	08 95       	ret

	// send device address
	TWDR = address;
    329c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    32a0:	84 e8       	ldi	r24, 0x84	; 132
    32a2:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    32a6:	80 91 bc 00 	lds	r24, 0x00BC
    32aa:	87 ff       	sbrs	r24, 7
    32ac:	fc cf       	rjmp	.-8      	; 0x32a6 <_Z9i2c_starth+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    32ae:	90 91 b9 00 	lds	r25, 0x00B9
    32b2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    32b4:	98 31       	cpi	r25, 0x18	; 24
    32b6:	11 f4       	brne	.+4      	; 0x32bc <_Z9i2c_starth+0x42>
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	08 95       	ret
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	90 34       	cpi	r25, 0x40	; 64
    32c0:	09 f0       	breq	.+2      	; 0x32c4 <_Z9i2c_starth+0x4a>
    32c2:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    32c4:	08 95       	ret

000032c6 <_Z14i2c_start_waith>:
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
    32c6:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    32c8:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    32ca:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    32cc:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    32ce:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    32d2:	80 91 bc 00 	lds	r24, 0x00BC
    32d6:	87 ff       	sbrs	r24, 7
    32d8:	fc cf       	rjmp	.-8      	; 0x32d2 <_Z14i2c_start_waith+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    32da:	80 91 b9 00 	lds	r24, 0x00B9
    32de:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    32e0:	88 30       	cpi	r24, 0x08	; 8
    32e2:	11 f0       	breq	.+4      	; 0x32e8 <_Z14i2c_start_waith+0x22>
    32e4:	80 31       	cpi	r24, 0x10	; 16
    32e6:	99 f7       	brne	.-26     	; 0x32ce <_Z14i2c_start_waith+0x8>
    
    	// send device address
    	TWDR = address;
    32e8:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    32ec:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    32f0:	80 91 bc 00 	lds	r24, 0x00BC
    32f4:	87 ff       	sbrs	r24, 7
    32f6:	fc cf       	rjmp	.-8      	; 0x32f0 <_Z14i2c_start_waith+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    32f8:	80 91 b9 00 	lds	r24, 0x00B9
    32fc:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    32fe:	80 32       	cpi	r24, 0x20	; 32
    3300:	11 f0       	breq	.+4      	; 0x3306 <_Z14i2c_start_waith+0x40>
    3302:	88 35       	cpi	r24, 0x58	; 88
    3304:	39 f4       	brne	.+14     	; 0x3314 <_Z14i2c_start_waith+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    3306:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    330a:	80 91 bc 00 	lds	r24, 0x00BC
    330e:	84 fd       	sbrc	r24, 4
    3310:	fc cf       	rjmp	.-8      	; 0x330a <_Z14i2c_start_waith+0x44>
    3312:	dd cf       	rjmp	.-70     	; 0x32ce <_Z14i2c_start_waith+0x8>
    3314:	08 95       	ret

00003316 <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    3316:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z9i2c_starth>

}/* i2c_rep_start */
    331a:	08 95       	ret

0000331c <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    331c:	84 e9       	ldi	r24, 0x94	; 148
    331e:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    3322:	80 91 bc 00 	lds	r24, 0x00BC
    3326:	84 fd       	sbrc	r24, 4
    3328:	fc cf       	rjmp	.-8      	; 0x3322 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
    332a:	08 95       	ret

0000332c <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    332c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    3330:	84 e8       	ldi	r24, 0x84	; 132
    3332:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    3336:	80 91 bc 00 	lds	r24, 0x00BC
    333a:	87 ff       	sbrs	r24, 7
    333c:	fc cf       	rjmp	.-8      	; 0x3336 <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    333e:	80 91 b9 00 	lds	r24, 0x00B9
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	88 7f       	andi	r24, 0xF8	; 248
    3346:	88 32       	cpi	r24, 0x28	; 40
    3348:	09 f0       	breq	.+2      	; 0x334c <_Z9i2c_writeh+0x20>
    334a:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    334c:	89 2f       	mov	r24, r25
    334e:	08 95       	ret

00003350 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3350:	84 ec       	ldi	r24, 0xC4	; 196
    3352:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    3356:	80 91 bc 00 	lds	r24, 0x00BC
    335a:	87 ff       	sbrs	r24, 7
    335c:	fc cf       	rjmp	.-8      	; 0x3356 <_Z11i2c_readAckv+0x6>

    return TWDR;
    335e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    3362:	08 95       	ret

00003364 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3364:	84 e8       	ldi	r24, 0x84	; 132
    3366:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    336a:	80 91 bc 00 	lds	r24, 0x00BC
    336e:	87 ff       	sbrs	r24, 7
    3370:	fc cf       	rjmp	.-8      	; 0x336a <_Z11i2c_readNakv+0x6>
	
    return TWDR;
    3372:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    3376:	08 95       	ret

00003378 <_ZN12OrangutanLCDC2Ev>:
    3378:	08 95       	ret

0000337a <_ZN12OrangutanLCDC1Ev>:
    337a:	08 95       	ret

0000337c <void_getchar>:
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	08 95       	ret

00003382 <_ZN12OrangutanLCD8busyWaitEv>:
    3382:	ef 92       	push	r14
    3384:	ff 92       	push	r15
    3386:	0f 93       	push	r16
    3388:	1f 93       	push	r17
    338a:	67 b1       	in	r22, 0x07	; 7
    338c:	3d 98       	cbi	0x07, 5	; 7
    338e:	28 98       	cbi	0x05, 0	; 5
    3390:	29 9a       	sbi	0x05, 1	; 5
    3392:	e0 90 da 03 	lds	r14, 0x03DA
    3396:	f0 90 db 03 	lds	r15, 0x03DB
    339a:	00 91 dc 03 	lds	r16, 0x03DC
    339e:	10 91 dd 03 	lds	r17, 0x03DD
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	41 e0       	ldi	r20, 0x01	; 1
    33a8:	50 e0       	ldi	r21, 0x00	; 0
    33aa:	ca 01       	movw	r24, r20
    33ac:	6f 93       	push	r22
    33ae:	64 e0       	ldi	r22, 0x04	; 4
    33b0:	6a 95       	dec	r22
    33b2:	f1 f7       	brne	.-4      	; 0x33b0 <_ZN12OrangutanLCD8busyWaitEv+0x2e>
    33b4:	6f 91       	pop	r22
    33b6:	01 97       	sbiw	r24, 0x01	; 1
    33b8:	c9 f7       	brne	.-14     	; 0x33ac <_ZN12OrangutanLCD8busyWaitEv+0x2a>
    33ba:	2a 9a       	sbi	0x05, 2	; 5
    33bc:	ca 01       	movw	r24, r20
    33be:	6f 93       	push	r22
    33c0:	64 e0       	ldi	r22, 0x04	; 4
    33c2:	6a 95       	dec	r22
    33c4:	f1 f7       	brne	.-4      	; 0x33c2 <_ZN12OrangutanLCD8busyWaitEv+0x40>
    33c6:	6f 91       	pop	r22
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	c9 f7       	brne	.-14     	; 0x33be <_ZN12OrangutanLCD8busyWaitEv+0x3c>
    33cc:	86 b1       	in	r24, 0x06	; 6
    33ce:	2a 98       	cbi	0x05, 2	; 5
    33d0:	fa 01       	movw	r30, r20
    33d2:	6f 93       	push	r22
    33d4:	64 e0       	ldi	r22, 0x04	; 4
    33d6:	6a 95       	dec	r22
    33d8:	f1 f7       	brne	.-4      	; 0x33d6 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    33da:	6f 91       	pop	r22
    33dc:	31 97       	sbiw	r30, 0x01	; 1
    33de:	c9 f7       	brne	.-14     	; 0x33d2 <_ZN12OrangutanLCD8busyWaitEv+0x50>
    33e0:	2a 9a       	sbi	0x05, 2	; 5
    33e2:	fa 01       	movw	r30, r20
    33e4:	6f 93       	push	r22
    33e6:	64 e0       	ldi	r22, 0x04	; 4
    33e8:	6a 95       	dec	r22
    33ea:	f1 f7       	brne	.-4      	; 0x33e8 <_ZN12OrangutanLCD8busyWaitEv+0x66>
    33ec:	6f 91       	pop	r22
    33ee:	31 97       	sbiw	r30, 0x01	; 1
    33f0:	c9 f7       	brne	.-14     	; 0x33e4 <_ZN12OrangutanLCD8busyWaitEv+0x62>
    33f2:	2a 98       	cbi	0x05, 2	; 5
    33f4:	2c 5f       	subi	r18, 0xFC	; 252
    33f6:	3f 4f       	sbci	r19, 0xFF	; 255
    33f8:	85 ff       	sbrs	r24, 5
    33fa:	09 c0       	rjmp	.+18     	; 0x340e <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    33fc:	c9 01       	movw	r24, r18
    33fe:	a0 e0       	ldi	r26, 0x00	; 0
    3400:	b0 e0       	ldi	r27, 0x00	; 0
    3402:	8e 15       	cp	r24, r14
    3404:	9f 05       	cpc	r25, r15
    3406:	a0 07       	cpc	r26, r16
    3408:	b1 07       	cpc	r27, r17
    340a:	08 f4       	brcc	.+2      	; 0x340e <_ZN12OrangutanLCD8busyWaitEv+0x8c>
    340c:	ce cf       	rjmp	.-100    	; 0x33aa <_ZN12OrangutanLCD8busyWaitEv+0x28>
    340e:	c9 01       	movw	r24, r18
    3410:	a0 e0       	ldi	r26, 0x00	; 0
    3412:	b0 e0       	ldi	r27, 0x00	; 0
    3414:	8e 15       	cp	r24, r14
    3416:	9f 05       	cpc	r25, r15
    3418:	a0 07       	cpc	r26, r16
    341a:	b1 07       	cpc	r27, r17
    341c:	28 f0       	brcs	.+10     	; 0x3428 <_ZN12OrangutanLCD8busyWaitEv+0xa6>
    341e:	82 e3       	ldi	r24, 0x32	; 50
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	a0 e0       	ldi	r26, 0x00	; 0
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	04 c0       	rjmp	.+8      	; 0x3430 <_ZN12OrangutanLCD8busyWaitEv+0xae>
    3428:	80 e3       	ldi	r24, 0x30	; 48
    342a:	95 e7       	ldi	r25, 0x75	; 117
    342c:	a0 e0       	ldi	r26, 0x00	; 0
    342e:	b0 e0       	ldi	r27, 0x00	; 0
    3430:	80 93 da 03 	sts	0x03DA, r24
    3434:	90 93 db 03 	sts	0x03DB, r25
    3438:	a0 93 dc 03 	sts	0x03DC, r26
    343c:	b0 93 dd 03 	sts	0x03DD, r27
    3440:	67 b9       	out	0x07, r22	; 7
    3442:	1f 91       	pop	r17
    3444:	0f 91       	pop	r16
    3446:	ff 90       	pop	r15
    3448:	ef 90       	pop	r14
    344a:	08 95       	ret

0000344c <_ZN12OrangutanLCD8sendDataEh>:
    344c:	28 b1       	in	r18, 0x08	; 8
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	8f 70       	andi	r24, 0x0F	; 15
    3452:	90 70       	andi	r25, 0x00	; 0
    3454:	88 0f       	add	r24, r24
    3456:	99 1f       	adc	r25, r25
    3458:	88 0f       	add	r24, r24
    345a:	99 1f       	adc	r25, r25
    345c:	23 7c       	andi	r18, 0xC3	; 195
    345e:	28 2b       	or	r18, r24
    3460:	28 b9       	out	0x08, r18	; 8
    3462:	2a 9a       	sbi	0x05, 2	; 5
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	fc 01       	movw	r30, r24
    346a:	6f 93       	push	r22
    346c:	64 e0       	ldi	r22, 0x04	; 4
    346e:	6a 95       	dec	r22
    3470:	f1 f7       	brne	.-4      	; 0x346e <_ZN12OrangutanLCD8sendDataEh+0x22>
    3472:	6f 91       	pop	r22
    3474:	31 97       	sbiw	r30, 0x01	; 1
    3476:	c9 f7       	brne	.-14     	; 0x346a <_ZN12OrangutanLCD8sendDataEh+0x1e>
    3478:	2a 98       	cbi	0x05, 2	; 5
    347a:	6f 93       	push	r22
    347c:	64 e0       	ldi	r22, 0x04	; 4
    347e:	6a 95       	dec	r22
    3480:	f1 f7       	brne	.-4      	; 0x347e <_ZN12OrangutanLCD8sendDataEh+0x32>
    3482:	6f 91       	pop	r22
    3484:	01 97       	sbiw	r24, 0x01	; 1
    3486:	c9 f7       	brne	.-14     	; 0x347a <_ZN12OrangutanLCD8sendDataEh+0x2e>
    3488:	08 95       	ret

0000348a <_ZN12OrangutanLCD10initPrintfEv>:
    348a:	80 91 d6 03 	lds	r24, 0x03D6
    348e:	90 91 d7 03 	lds	r25, 0x03D7
    3492:	00 97       	sbiw	r24, 0x00	; 0
    3494:	11 f0       	breq	.+4      	; 0x349a <_ZN12OrangutanLCD10initPrintfEv+0x10>
    3496:	0e 94 64 20 	call	0x40c8	; 0x40c8 <free>
    349a:	80 91 c4 03 	lds	r24, 0x03C4
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	20 91 c5 03 	lds	r18, 0x03C5
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	ac 01       	movw	r20, r24
    34aa:	42 9f       	mul	r20, r18
    34ac:	c0 01       	movw	r24, r0
    34ae:	43 9f       	mul	r20, r19
    34b0:	90 0d       	add	r25, r0
    34b2:	52 9f       	mul	r21, r18
    34b4:	90 0d       	add	r25, r0
    34b6:	11 24       	eor	r1, r1
    34b8:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <malloc>
    34bc:	90 93 d7 03 	sts	0x03D7, r25
    34c0:	80 93 d6 03 	sts	0x03D6, r24
    34c4:	00 97       	sbiw	r24, 0x00	; 0
    34c6:	29 f1       	breq	.+74     	; 0x3512 <_ZN12OrangutanLCD10initPrintfEv+0x88>
    34c8:	60 e0       	ldi	r22, 0x00	; 0
    34ca:	70 e2       	ldi	r23, 0x20	; 32
    34cc:	08 c0       	rjmp	.+16     	; 0x34de <_ZN12OrangutanLCD10initPrintfEv+0x54>
    34ce:	e0 91 d6 03 	lds	r30, 0x03D6
    34d2:	f0 91 d7 03 	lds	r31, 0x03D7
    34d6:	e4 0f       	add	r30, r20
    34d8:	f5 1f       	adc	r31, r21
    34da:	70 83       	st	Z, r23
    34dc:	6f 5f       	subi	r22, 0xFF	; 255
    34de:	46 2f       	mov	r20, r22
    34e0:	50 e0       	ldi	r21, 0x00	; 0
    34e2:	80 91 c4 03 	lds	r24, 0x03C4
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	01 97       	sbiw	r24, 0x01	; 1
    34ea:	20 91 c5 03 	lds	r18, 0x03C5
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	fc 01       	movw	r30, r24
    34f2:	e2 9f       	mul	r30, r18
    34f4:	c0 01       	movw	r24, r0
    34f6:	e3 9f       	mul	r30, r19
    34f8:	90 0d       	add	r25, r0
    34fa:	f2 9f       	mul	r31, r18
    34fc:	90 0d       	add	r25, r0
    34fe:	11 24       	eor	r1, r1
    3500:	48 17       	cp	r20, r24
    3502:	59 07       	cpc	r21, r25
    3504:	24 f3       	brlt	.-56     	; 0x34ce <_ZN12OrangutanLCD10initPrintfEv+0x44>
    3506:	8a ea       	ldi	r24, 0xAA	; 170
    3508:	9c e1       	ldi	r25, 0x1C	; 28
    350a:	6e eb       	ldi	r22, 0xBE	; 190
    350c:	79 e1       	ldi	r23, 0x19	; 25
    350e:	0e 94 bc 20 	call	0x4178	; 0x4178 <fdevopen>
    3512:	08 95       	ret

00003514 <_ZN12OrangutanLCD10initPrintfEhh>:
    3514:	80 93 c5 03 	sts	0x03C5, r24
    3518:	60 93 c4 03 	sts	0x03C4, r22
    351c:	0e 94 45 1a 	call	0x348a	; 0x348a <_ZN12OrangutanLCD10initPrintfEv>
    3520:	08 95       	ret

00003522 <lcd_init_printf_with_dimensions>:
    3522:	80 93 c5 03 	sts	0x03C5, r24
    3526:	60 93 c4 03 	sts	0x03C4, r22
    352a:	0e 94 45 1a 	call	0x348a	; 0x348a <_ZN12OrangutanLCD10initPrintfEv>
    352e:	08 95       	ret

00003530 <lcd_init_printf>:
    3530:	0e 94 45 1a 	call	0x348a	; 0x348a <_ZN12OrangutanLCD10initPrintfEv>
    3534:	08 95       	ret

00003536 <_ZN12OrangutanLCD5init2Ev>:
    3536:	3d 98       	cbi	0x07, 5	; 7
    3538:	45 9a       	sbi	0x08, 5	; 8
    353a:	80 e3       	ldi	r24, 0x30	; 48
    353c:	95 e7       	ldi	r25, 0x75	; 117
    353e:	a0 e0       	ldi	r26, 0x00	; 0
    3540:	b0 e0       	ldi	r27, 0x00	; 0
    3542:	80 93 da 03 	sts	0x03DA, r24
    3546:	90 93 db 03 	sts	0x03DB, r25
    354a:	a0 93 dc 03 	sts	0x03DC, r26
    354e:	b0 93 dd 03 	sts	0x03DD, r27
    3552:	20 9a       	sbi	0x04, 0	; 4
    3554:	21 9a       	sbi	0x04, 1	; 4
    3556:	22 9a       	sbi	0x04, 2	; 4
    3558:	8e e1       	ldi	r24, 0x1E	; 30
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
    3560:	83 e0       	ldi	r24, 0x03	; 3
    3562:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    3566:	86 e0       	ldi	r24, 0x06	; 6
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
    356e:	83 e0       	ldi	r24, 0x03	; 3
    3570:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    3574:	82 e0       	ldi	r24, 0x02	; 2
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
    357c:	83 e0       	ldi	r24, 0x03	; 3
    357e:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    3582:	82 e0       	ldi	r24, 0x02	; 2
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
    358a:	82 e0       	ldi	r24, 0x02	; 2
    358c:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    3590:	82 e0       	ldi	r24, 0x02	; 2
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
    3598:	88 e2       	ldi	r24, 0x28	; 40
    359a:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN12OrangutanLCD8send_cmdEh>
    359e:	88 e0       	ldi	r24, 0x08	; 8
    35a0:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN12OrangutanLCD8send_cmdEh>
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN12OrangutanLCD8send_cmdEh>
    35aa:	86 e0       	ldi	r24, 0x06	; 6
    35ac:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN12OrangutanLCD8send_cmdEh>
    35b0:	8c e0       	ldi	r24, 0x0C	; 12
    35b2:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN12OrangutanLCD8send_cmdEh>
    35b6:	08 95       	ret

000035b8 <_ZN12OrangutanLCD4initEv>:
    35b8:	80 91 de 03 	lds	r24, 0x03DE
    35bc:	88 23       	and	r24, r24
    35be:	29 f4       	brne	.+10     	; 0x35ca <_ZN12OrangutanLCD4initEv+0x12>
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	80 93 de 03 	sts	0x03DE, r24
    35c6:	0e 94 9b 1a 	call	0x3536	; 0x3536 <_ZN12OrangutanLCD5init2Ev>
    35ca:	08 95       	ret

000035cc <_ZN12OrangutanLCD4sendEhhh>:
    35cc:	ff 92       	push	r15
    35ce:	0f 93       	push	r16
    35d0:	1f 93       	push	r17
    35d2:	08 2f       	mov	r16, r24
    35d4:	16 2f       	mov	r17, r22
    35d6:	f4 2e       	mov	r15, r20
    35d8:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <_ZN12OrangutanLCD4initEv>
    35dc:	0e 94 c1 19 	call	0x3382	; 0x3382 <_ZN12OrangutanLCD8busyWaitEv>
    35e0:	37 b1       	in	r19, 0x07	; 7
    35e2:	28 b1       	in	r18, 0x08	; 8
    35e4:	29 98       	cbi	0x05, 1	; 5
    35e6:	11 23       	and	r17, r17
    35e8:	11 f0       	breq	.+4      	; 0x35ee <_ZN12OrangutanLCD4sendEhhh+0x22>
    35ea:	28 9a       	sbi	0x05, 0	; 5
    35ec:	01 c0       	rjmp	.+2      	; 0x35f0 <_ZN12OrangutanLCD4sendEhhh+0x24>
    35ee:	28 98       	cbi	0x05, 0	; 5
    35f0:	87 b1       	in	r24, 0x07	; 7
    35f2:	8c 63       	ori	r24, 0x3C	; 60
    35f4:	87 b9       	out	0x07, r24	; 7
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	f8 16       	cp	r15, r24
    35fa:	e1 f0       	breq	.+56     	; 0x3634 <_ZN12OrangutanLCD4sendEhhh+0x68>
    35fc:	88 b1       	in	r24, 0x08	; 8
    35fe:	90 2f       	mov	r25, r16
    3600:	92 95       	swap	r25
    3602:	9f 70       	andi	r25, 0x0F	; 15
    3604:	99 0f       	add	r25, r25
    3606:	99 0f       	add	r25, r25
    3608:	83 7c       	andi	r24, 0xC3	; 195
    360a:	98 2b       	or	r25, r24
    360c:	98 b9       	out	0x08, r25	; 8
    360e:	2a 9a       	sbi	0x05, 2	; 5
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	fc 01       	movw	r30, r24
    3616:	6f 93       	push	r22
    3618:	64 e0       	ldi	r22, 0x04	; 4
    361a:	6a 95       	dec	r22
    361c:	f1 f7       	brne	.-4      	; 0x361a <_ZN12OrangutanLCD4sendEhhh+0x4e>
    361e:	6f 91       	pop	r22
    3620:	31 97       	sbiw	r30, 0x01	; 1
    3622:	c9 f7       	brne	.-14     	; 0x3616 <_ZN12OrangutanLCD4sendEhhh+0x4a>
    3624:	2a 98       	cbi	0x05, 2	; 5
    3626:	6f 93       	push	r22
    3628:	64 e0       	ldi	r22, 0x04	; 4
    362a:	6a 95       	dec	r22
    362c:	f1 f7       	brne	.-4      	; 0x362a <_ZN12OrangutanLCD4sendEhhh+0x5e>
    362e:	6f 91       	pop	r22
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	c9 f7       	brne	.-14     	; 0x3626 <_ZN12OrangutanLCD4sendEhhh+0x5a>
    3634:	88 b1       	in	r24, 0x08	; 8
    3636:	0f 70       	andi	r16, 0x0F	; 15
    3638:	00 0f       	add	r16, r16
    363a:	00 0f       	add	r16, r16
    363c:	83 7c       	andi	r24, 0xC3	; 195
    363e:	80 2b       	or	r24, r16
    3640:	88 b9       	out	0x08, r24	; 8
    3642:	2a 9a       	sbi	0x05, 2	; 5
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	fc 01       	movw	r30, r24
    364a:	6f 93       	push	r22
    364c:	64 e0       	ldi	r22, 0x04	; 4
    364e:	6a 95       	dec	r22
    3650:	f1 f7       	brne	.-4      	; 0x364e <_ZN12OrangutanLCD4sendEhhh+0x82>
    3652:	6f 91       	pop	r22
    3654:	31 97       	sbiw	r30, 0x01	; 1
    3656:	c9 f7       	brne	.-14     	; 0x364a <_ZN12OrangutanLCD4sendEhhh+0x7e>
    3658:	2a 98       	cbi	0x05, 2	; 5
    365a:	6f 93       	push	r22
    365c:	64 e0       	ldi	r22, 0x04	; 4
    365e:	6a 95       	dec	r22
    3660:	f1 f7       	brne	.-4      	; 0x365e <_ZN12OrangutanLCD4sendEhhh+0x92>
    3662:	6f 91       	pop	r22
    3664:	01 97       	sbiw	r24, 0x01	; 1
    3666:	c9 f7       	brne	.-14     	; 0x365a <_ZN12OrangutanLCD4sendEhhh+0x8e>
    3668:	37 b9       	out	0x07, r19	; 7
    366a:	28 b9       	out	0x08, r18	; 8
    366c:	1f 91       	pop	r17
    366e:	0f 91       	pop	r16
    3670:	ff 90       	pop	r15
    3672:	08 95       	ret

00003674 <_ZN12OrangutanLCD8send_cmdEh>:
    3674:	60 e0       	ldi	r22, 0x00	; 0
    3676:	42 e0       	ldi	r20, 0x02	; 2
    3678:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <_ZN12OrangutanLCD4sendEhhh>
    367c:	08 95       	ret

0000367e <_ZN12OrangutanLCD10moveCursorEhh>:
    367e:	0f 93       	push	r16
    3680:	1f 93       	push	r17
    3682:	08 2f       	mov	r16, r24
    3684:	16 2f       	mov	r17, r22
    3686:	08 c0       	rjmp	.+16     	; 0x3698 <_ZN12OrangutanLCD10moveCursorEhh+0x1a>
    3688:	00 23       	and	r16, r16
    368a:	11 f4       	brne	.+4      	; 0x3690 <_ZN12OrangutanLCD10moveCursorEhh+0x12>
    368c:	80 e1       	ldi	r24, 0x10	; 16
    368e:	01 c0       	rjmp	.+2      	; 0x3692 <_ZN12OrangutanLCD10moveCursorEhh+0x14>
    3690:	84 e1       	ldi	r24, 0x14	; 20
    3692:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN12OrangutanLCD8send_cmdEh>
    3696:	11 50       	subi	r17, 0x01	; 1
    3698:	11 23       	and	r17, r17
    369a:	b1 f7       	brne	.-20     	; 0x3688 <_ZN12OrangutanLCD10moveCursorEhh+0xa>
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	08 95       	ret

000036a2 <lcd_move_cursor>:
    36a2:	0e 94 3f 1b 	call	0x367e	; 0x367e <_ZN12OrangutanLCD10moveCursorEhh>
    36a6:	08 95       	ret

000036a8 <_ZN12OrangutanLCD10hideCursorEv>:
    36a8:	8c e0       	ldi	r24, 0x0C	; 12
    36aa:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN12OrangutanLCD8send_cmdEh>
    36ae:	08 95       	ret

000036b0 <lcd_hide_cursor>:
    36b0:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <_ZN12OrangutanLCD10hideCursorEv>
    36b4:	08 95       	ret

000036b6 <_ZN12OrangutanLCD10showCursorEh>:
    36b6:	81 30       	cpi	r24, 0x01	; 1
    36b8:	11 f4       	brne	.+4      	; 0x36be <_ZN12OrangutanLCD10showCursorEh+0x8>
    36ba:	8f e0       	ldi	r24, 0x0F	; 15
    36bc:	01 c0       	rjmp	.+2      	; 0x36c0 <_ZN12OrangutanLCD10showCursorEh+0xa>
    36be:	8e e0       	ldi	r24, 0x0E	; 14
    36c0:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN12OrangutanLCD8send_cmdEh>
    36c4:	08 95       	ret

000036c6 <lcd_show_cursor>:
    36c6:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN12OrangutanLCD10showCursorEh>
    36ca:	08 95       	ret

000036cc <_ZN12OrangutanLCD6gotoXYEhh>:
    36cc:	a4 e0       	ldi	r26, 0x04	; 4
    36ce:	b0 e0       	ldi	r27, 0x00	; 0
    36d0:	ec e6       	ldi	r30, 0x6C	; 108
    36d2:	fb e1       	ldi	r31, 0x1B	; 27
    36d4:	0c 94 7a 1f 	jmp	0x3ef4	; 0x3ef4 <__prologue_saves__+0x1c>
    36d8:	18 2f       	mov	r17, r24
    36da:	06 2f       	mov	r16, r22
    36dc:	80 e8       	ldi	r24, 0x80	; 128
    36de:	89 83       	std	Y+1, r24	; 0x01
    36e0:	80 ec       	ldi	r24, 0xC0	; 192
    36e2:	8a 83       	std	Y+2, r24	; 0x02
    36e4:	84 e9       	ldi	r24, 0x94	; 148
    36e6:	8b 83       	std	Y+3, r24	; 0x03
    36e8:	84 ed       	ldi	r24, 0xD4	; 212
    36ea:	8c 83       	std	Y+4, r24	; 0x04
    36ec:	fe 01       	movw	r30, r28
    36ee:	e6 0f       	add	r30, r22
    36f0:	f1 1d       	adc	r31, r1
    36f2:	81 81       	ldd	r24, Z+1	; 0x01
    36f4:	81 0f       	add	r24, r17
    36f6:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN12OrangutanLCD8send_cmdEh>
    36fa:	10 93 d9 03 	sts	0x03D9, r17
    36fe:	00 93 d8 03 	sts	0x03D8, r16
    3702:	24 96       	adiw	r28, 0x04	; 4
    3704:	e4 e0       	ldi	r30, 0x04	; 4
    3706:	0c 94 96 1f 	jmp	0x3f2c	; 0x3f2c <__epilogue_restores__+0x1c>

0000370a <lcd_goto_xy>:
    370a:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
    370e:	08 95       	ret

00003710 <_ZN12OrangutanLCD5clearEv>:
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN12OrangutanLCD8send_cmdEh>
    3716:	80 91 d6 03 	lds	r24, 0x03D6
    371a:	90 91 d7 03 	lds	r25, 0x03D7
    371e:	89 2b       	or	r24, r25
    3720:	19 f1       	breq	.+70     	; 0x3768 <_ZN12OrangutanLCD5clearEv+0x58>
    3722:	60 e0       	ldi	r22, 0x00	; 0
    3724:	70 e2       	ldi	r23, 0x20	; 32
    3726:	08 c0       	rjmp	.+16     	; 0x3738 <_ZN12OrangutanLCD5clearEv+0x28>
    3728:	e0 91 d6 03 	lds	r30, 0x03D6
    372c:	f0 91 d7 03 	lds	r31, 0x03D7
    3730:	e4 0f       	add	r30, r20
    3732:	f5 1f       	adc	r31, r21
    3734:	70 83       	st	Z, r23
    3736:	6f 5f       	subi	r22, 0xFF	; 255
    3738:	46 2f       	mov	r20, r22
    373a:	50 e0       	ldi	r21, 0x00	; 0
    373c:	80 91 c4 03 	lds	r24, 0x03C4
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	01 97       	sbiw	r24, 0x01	; 1
    3744:	20 91 c5 03 	lds	r18, 0x03C5
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	fc 01       	movw	r30, r24
    374c:	e2 9f       	mul	r30, r18
    374e:	c0 01       	movw	r24, r0
    3750:	e3 9f       	mul	r30, r19
    3752:	90 0d       	add	r25, r0
    3754:	f2 9f       	mul	r31, r18
    3756:	90 0d       	add	r25, r0
    3758:	11 24       	eor	r1, r1
    375a:	48 17       	cp	r20, r24
    375c:	59 07       	cpc	r21, r25
    375e:	24 f3       	brlt	.-56     	; 0x3728 <_ZN12OrangutanLCD5clearEv+0x18>
    3760:	10 92 d9 03 	sts	0x03D9, r1
    3764:	10 92 d8 03 	sts	0x03D8, r1
    3768:	08 95       	ret

0000376a <clear>:
    376a:	0e 94 88 1b 	call	0x3710	; 0x3710 <_ZN12OrangutanLCD5clearEv>
    376e:	08 95       	ret

00003770 <_ZN12OrangutanLCD9send_dataEh>:
    3770:	61 e0       	ldi	r22, 0x01	; 1
    3772:	42 e0       	ldi	r20, 0x02	; 2
    3774:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <_ZN12OrangutanLCD4sendEhhh>
    3778:	08 95       	ret

0000377a <_ZN12OrangutanLCD11printBinaryEh>:
    377a:	0f 93       	push	r16
    377c:	1f 93       	push	r17
    377e:	cf 93       	push	r28
    3780:	df 93       	push	r29
    3782:	00 e0       	ldi	r16, 0x00	; 0
    3784:	10 e8       	ldi	r17, 0x80	; 128
    3786:	c8 2f       	mov	r28, r24
    3788:	d0 e0       	ldi	r29, 0x00	; 0
    378a:	81 2f       	mov	r24, r17
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	8c 23       	and	r24, r28
    3790:	9d 23       	and	r25, r29
    3792:	89 2b       	or	r24, r25
    3794:	11 f0       	breq	.+4      	; 0x379a <_ZN12OrangutanLCD11printBinaryEh+0x20>
    3796:	81 e3       	ldi	r24, 0x31	; 49
    3798:	01 c0       	rjmp	.+2      	; 0x379c <_ZN12OrangutanLCD11printBinaryEh+0x22>
    379a:	80 e3       	ldi	r24, 0x30	; 48
    379c:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN12OrangutanLCD9send_dataEh>
    37a0:	0f 5f       	subi	r16, 0xFF	; 255
    37a2:	08 30       	cpi	r16, 0x08	; 8
    37a4:	11 f0       	breq	.+4      	; 0x37aa <_ZN12OrangutanLCD11printBinaryEh+0x30>
    37a6:	16 95       	lsr	r17
    37a8:	f0 cf       	rjmp	.-32     	; 0x378a <_ZN12OrangutanLCD11printBinaryEh+0x10>
    37aa:	df 91       	pop	r29
    37ac:	cf 91       	pop	r28
    37ae:	1f 91       	pop	r17
    37b0:	0f 91       	pop	r16
    37b2:	08 95       	ret

000037b4 <print_binary>:
    37b4:	0e 94 bd 1b 	call	0x377a	; 0x377a <_ZN12OrangutanLCD11printBinaryEh>
    37b8:	08 95       	ret

000037ba <_ZN12OrangutanLCD14printHexNibbleEh>:
    37ba:	8a 30       	cpi	r24, 0x0A	; 10
    37bc:	10 f4       	brcc	.+4      	; 0x37c2 <_ZN12OrangutanLCD14printHexNibbleEh+0x8>
    37be:	80 5d       	subi	r24, 0xD0	; 208
    37c0:	01 c0       	rjmp	.+2      	; 0x37c4 <_ZN12OrangutanLCD14printHexNibbleEh+0xa>
    37c2:	89 5c       	subi	r24, 0xC9	; 201
    37c4:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN12OrangutanLCD9send_dataEh>
    37c8:	08 95       	ret

000037ca <_ZN12OrangutanLCD8printHexEh>:
    37ca:	1f 93       	push	r17
    37cc:	18 2f       	mov	r17, r24
    37ce:	82 95       	swap	r24
    37d0:	8f 70       	andi	r24, 0x0F	; 15
    37d2:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <_ZN12OrangutanLCD14printHexNibbleEh>
    37d6:	81 2f       	mov	r24, r17
    37d8:	8f 70       	andi	r24, 0x0F	; 15
    37da:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <_ZN12OrangutanLCD14printHexNibbleEh>
    37de:	1f 91       	pop	r17
    37e0:	08 95       	ret

000037e2 <_ZN12OrangutanLCD8printHexEj>:
    37e2:	1f 93       	push	r17
    37e4:	18 2f       	mov	r17, r24
    37e6:	89 2f       	mov	r24, r25
    37e8:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <_ZN12OrangutanLCD8printHexEh>
    37ec:	81 2f       	mov	r24, r17
    37ee:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <_ZN12OrangutanLCD8printHexEh>
    37f2:	1f 91       	pop	r17
    37f4:	08 95       	ret

000037f6 <print_hex>:
    37f6:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <_ZN12OrangutanLCD8printHexEj>
    37fa:	08 95       	ret

000037fc <print_hex_byte>:
    37fc:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <_ZN12OrangutanLCD8printHexEh>
    3800:	08 95       	ret

00003802 <_ZN12OrangutanLCD5printEm>:
    3802:	6f 92       	push	r6
    3804:	7f 92       	push	r7
    3806:	8f 92       	push	r8
    3808:	9f 92       	push	r9
    380a:	af 92       	push	r10
    380c:	bf 92       	push	r11
    380e:	cf 92       	push	r12
    3810:	df 92       	push	r13
    3812:	ff 92       	push	r15
    3814:	0f 93       	push	r16
    3816:	df 93       	push	r29
    3818:	cf 93       	push	r28
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
    381e:	2a 97       	sbiw	r28, 0x0a	; 10
    3820:	0f b6       	in	r0, 0x3f	; 63
    3822:	f8 94       	cli
    3824:	de bf       	out	0x3e, r29	; 62
    3826:	0f be       	out	0x3f, r0	; 63
    3828:	cd bf       	out	0x3d, r28	; 61
    382a:	5b 01       	movw	r10, r22
    382c:	6c 01       	movw	r12, r24
    382e:	0a e0       	ldi	r16, 0x0A	; 10
    3830:	3e 01       	movw	r6, r28
    3832:	08 94       	sec
    3834:	61 1c       	adc	r6, r1
    3836:	71 1c       	adc	r7, r1
    3838:	fa 2c       	mov	r15, r10
    383a:	c6 01       	movw	r24, r12
    383c:	b5 01       	movw	r22, r10
    383e:	2a e0       	ldi	r18, 0x0A	; 10
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	40 e0       	ldi	r20, 0x00	; 0
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <__udivmodsi4>
    384a:	c9 01       	movw	r24, r18
    384c:	da 01       	movw	r26, r20
    384e:	5c 01       	movw	r10, r24
    3850:	6d 01       	movw	r12, r26
    3852:	01 50       	subi	r16, 0x01	; 1
    3854:	43 01       	movw	r8, r6
    3856:	80 0e       	add	r8, r16
    3858:	91 1c       	adc	r9, r1
    385a:	80 e3       	ldi	r24, 0x30	; 48
    385c:	f8 0e       	add	r15, r24
    385e:	c6 01       	movw	r24, r12
    3860:	b5 01       	movw	r22, r10
    3862:	2a e0       	ldi	r18, 0x0A	; 10
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	40 e0       	ldi	r20, 0x00	; 0
    3868:	50 e0       	ldi	r21, 0x00	; 0
    386a:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <__mulsi3>
    386e:	f6 1a       	sub	r15, r22
    3870:	f4 01       	movw	r30, r8
    3872:	f0 82       	st	Z, r15
    3874:	a1 14       	cp	r10, r1
    3876:	b1 04       	cpc	r11, r1
    3878:	c1 04       	cpc	r12, r1
    387a:	d1 04       	cpc	r13, r1
    387c:	e9 f6       	brne	.-70     	; 0x3838 <_ZN12OrangutanLCD5printEm+0x36>
    387e:	08 c0       	rjmp	.+16     	; 0x3890 <_ZN12OrangutanLCD5printEm+0x8e>
    3880:	f6 01       	movw	r30, r12
    3882:	e0 0f       	add	r30, r16
    3884:	f1 1d       	adc	r31, r1
    3886:	80 81       	ld	r24, Z
    3888:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN12OrangutanLCD9send_dataEh>
    388c:	0f 5f       	subi	r16, 0xFF	; 255
    388e:	04 c0       	rjmp	.+8      	; 0x3898 <_ZN12OrangutanLCD5printEm+0x96>
    3890:	6e 01       	movw	r12, r28
    3892:	08 94       	sec
    3894:	c1 1c       	adc	r12, r1
    3896:	d1 1c       	adc	r13, r1
    3898:	0a 30       	cpi	r16, 0x0A	; 10
    389a:	90 f3       	brcs	.-28     	; 0x3880 <_ZN12OrangutanLCD5printEm+0x7e>
    389c:	2a 96       	adiw	r28, 0x0a	; 10
    389e:	0f b6       	in	r0, 0x3f	; 63
    38a0:	f8 94       	cli
    38a2:	de bf       	out	0x3e, r29	; 62
    38a4:	0f be       	out	0x3f, r0	; 63
    38a6:	cd bf       	out	0x3d, r28	; 61
    38a8:	cf 91       	pop	r28
    38aa:	df 91       	pop	r29
    38ac:	0f 91       	pop	r16
    38ae:	ff 90       	pop	r15
    38b0:	df 90       	pop	r13
    38b2:	cf 90       	pop	r12
    38b4:	bf 90       	pop	r11
    38b6:	af 90       	pop	r10
    38b8:	9f 90       	pop	r9
    38ba:	8f 90       	pop	r8
    38bc:	7f 90       	pop	r7
    38be:	6f 90       	pop	r6
    38c0:	08 95       	ret

000038c2 <print_unsigned_long>:
    38c2:	0e 94 01 1c 	call	0x3802	; 0x3802 <_ZN12OrangutanLCD5printEm>
    38c6:	08 95       	ret

000038c8 <_ZN12OrangutanLCD5printEl>:
    38c8:	ef 92       	push	r14
    38ca:	ff 92       	push	r15
    38cc:	0f 93       	push	r16
    38ce:	1f 93       	push	r17
    38d0:	7b 01       	movw	r14, r22
    38d2:	8c 01       	movw	r16, r24
    38d4:	97 ff       	sbrs	r25, 7
    38d6:	0b c0       	rjmp	.+22     	; 0x38ee <_ZN12OrangutanLCD5printEl+0x26>
    38d8:	10 95       	com	r17
    38da:	00 95       	com	r16
    38dc:	f0 94       	com	r15
    38de:	e0 94       	com	r14
    38e0:	e1 1c       	adc	r14, r1
    38e2:	f1 1c       	adc	r15, r1
    38e4:	01 1d       	adc	r16, r1
    38e6:	11 1d       	adc	r17, r1
    38e8:	8d e2       	ldi	r24, 0x2D	; 45
    38ea:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN12OrangutanLCD9send_dataEh>
    38ee:	c8 01       	movw	r24, r16
    38f0:	b7 01       	movw	r22, r14
    38f2:	0e 94 01 1c 	call	0x3802	; 0x3802 <_ZN12OrangutanLCD5printEm>
    38f6:	1f 91       	pop	r17
    38f8:	0f 91       	pop	r16
    38fa:	ff 90       	pop	r15
    38fc:	ef 90       	pop	r14
    38fe:	08 95       	ret

00003900 <print_long>:
    3900:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <_ZN12OrangutanLCD5printEl>
    3904:	08 95       	ret

00003906 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    3906:	cf 93       	push	r28
    3908:	df 93       	push	r29
    390a:	ec 01       	movw	r28, r24
    390c:	03 c0       	rjmp	.+6      	; 0x3914 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0xe>
    390e:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN12OrangutanLCD9send_dataEh>
    3912:	21 96       	adiw	r28, 0x01	; 1
    3914:	fe 01       	movw	r30, r28
    3916:	84 91       	lpm	r24, Z+
    3918:	88 23       	and	r24, r24
    391a:	c9 f7       	brne	.-14     	; 0x390e <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x8>
    391c:	df 91       	pop	r29
    391e:	cf 91       	pop	r28
    3920:	08 95       	ret

00003922 <print_from_program_space>:
    3922:	0e 94 83 1c 	call	0x3906	; 0x3906 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    3926:	08 95       	ret

00003928 <_ZN12OrangutanLCD5printEPKc>:
    3928:	cf 93       	push	r28
    392a:	df 93       	push	r29
    392c:	ec 01       	movw	r28, r24
    392e:	03 c0       	rjmp	.+6      	; 0x3936 <_ZN12OrangutanLCD5printEPKc+0xe>
    3930:	21 96       	adiw	r28, 0x01	; 1
    3932:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN12OrangutanLCD9send_dataEh>
    3936:	88 81       	ld	r24, Y
    3938:	88 23       	and	r24, r24
    393a:	d1 f7       	brne	.-12     	; 0x3930 <_ZN12OrangutanLCD5printEPKc+0x8>
    393c:	df 91       	pop	r29
    393e:	cf 91       	pop	r28
    3940:	08 95       	ret

00003942 <print>:
    3942:	0e 94 94 1c 	call	0x3928	; 0x3928 <_ZN12OrangutanLCD5printEPKc>
    3946:	08 95       	ret

00003948 <_ZN12OrangutanLCD5printEc>:
    3948:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN12OrangutanLCD9send_dataEh>
    394c:	08 95       	ret

0000394e <print_character>:
    394e:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN12OrangutanLCD9send_dataEh>
    3952:	08 95       	ret

00003954 <lcd_putchar>:
    3954:	a0 e0       	ldi	r26, 0x00	; 0
    3956:	b0 e0       	ldi	r27, 0x00	; 0
    3958:	e0 eb       	ldi	r30, 0xB0	; 176
    395a:	fc e1       	ldi	r31, 0x1C	; 28
    395c:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <__prologue_saves__+0x14>
    3960:	e8 2e       	mov	r14, r24
    3962:	80 91 d6 03 	lds	r24, 0x03D6
    3966:	90 91 d7 03 	lds	r25, 0x03D7
    396a:	89 2b       	or	r24, r25
    396c:	09 f4       	brne	.+2      	; 0x3970 <lcd_putchar+0x1c>
    396e:	05 c1       	rjmp	.+522    	; 0x3b7a <lcd_putchar+0x226>
    3970:	2a e0       	ldi	r18, 0x0A	; 10
    3972:	e2 16       	cp	r14, r18
    3974:	09 f4       	brne	.+2      	; 0x3978 <lcd_putchar+0x24>
    3976:	46 c0       	rjmp	.+140    	; 0x3a04 <lcd_putchar+0xb0>
    3978:	38 e0       	ldi	r19, 0x08	; 8
    397a:	e3 16       	cp	r14, r19
    397c:	c9 f4       	brne	.+50     	; 0x39b0 <lcd_putchar+0x5c>
    397e:	80 91 d9 03 	lds	r24, 0x03D9
    3982:	81 50       	subi	r24, 0x01	; 1
    3984:	80 93 d9 03 	sts	0x03D9, r24
    3988:	8f 3f       	cpi	r24, 0xFF	; 255
    398a:	51 f4       	brne	.+20     	; 0x39a0 <lcd_putchar+0x4c>
    398c:	80 91 d8 03 	lds	r24, 0x03D8
    3990:	81 50       	subi	r24, 0x01	; 1
    3992:	80 93 d8 03 	sts	0x03D8, r24
    3996:	80 91 c5 03 	lds	r24, 0x03C5
    399a:	81 50       	subi	r24, 0x01	; 1
    399c:	80 93 d9 03 	sts	0x03D9, r24
    39a0:	80 91 d8 03 	lds	r24, 0x03D8
    39a4:	8f 3f       	cpi	r24, 0xFF	; 255
    39a6:	09 f0       	breq	.+2      	; 0x39aa <lcd_putchar+0x56>
    39a8:	e2 c0       	rjmp	.+452    	; 0x3b6e <lcd_putchar+0x21a>
    39aa:	10 92 d8 03 	sts	0x03D8, r1
    39ae:	dd c0       	rjmp	.+442    	; 0x3b6a <lcd_putchar+0x216>
    39b0:	8e 2d       	mov	r24, r14
    39b2:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN12OrangutanLCD9send_dataEh>
    39b6:	20 91 d8 03 	lds	r18, 0x03D8
    39ba:	22 23       	and	r18, r18
    39bc:	c9 f0       	breq	.+50     	; 0x39f0 <lcd_putchar+0x9c>
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	21 50       	subi	r18, 0x01	; 1
    39c2:	30 40       	sbci	r19, 0x00	; 0
    39c4:	80 91 c5 03 	lds	r24, 0x03C5
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	ac 01       	movw	r20, r24
    39cc:	24 9f       	mul	r18, r20
    39ce:	c0 01       	movw	r24, r0
    39d0:	25 9f       	mul	r18, r21
    39d2:	90 0d       	add	r25, r0
    39d4:	34 9f       	mul	r19, r20
    39d6:	90 0d       	add	r25, r0
    39d8:	11 24       	eor	r1, r1
    39da:	20 91 d9 03 	lds	r18, 0x03D9
    39de:	e0 91 d6 03 	lds	r30, 0x03D6
    39e2:	f0 91 d7 03 	lds	r31, 0x03D7
    39e6:	e8 0f       	add	r30, r24
    39e8:	f9 1f       	adc	r31, r25
    39ea:	e2 0f       	add	r30, r18
    39ec:	f1 1d       	adc	r31, r1
    39ee:	e0 82       	st	Z, r14
    39f0:	80 91 d9 03 	lds	r24, 0x03D9
    39f4:	8f 5f       	subi	r24, 0xFF	; 255
    39f6:	80 93 d9 03 	sts	0x03D9, r24
    39fa:	90 91 c5 03 	lds	r25, 0x03C5
    39fe:	89 17       	cp	r24, r25
    3a00:	09 f0       	breq	.+2      	; 0x3a04 <lcd_putchar+0xb0>
    3a02:	bb c0       	rjmp	.+374    	; 0x3b7a <lcd_putchar+0x226>
    3a04:	40 91 d8 03 	lds	r20, 0x03D8
    3a08:	24 2f       	mov	r18, r20
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	80 91 c4 03 	lds	r24, 0x03C4
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	01 97       	sbiw	r24, 0x01	; 1
    3a14:	28 17       	cp	r18, r24
    3a16:	39 07       	cpc	r19, r25
    3a18:	09 f0       	breq	.+2      	; 0x3a1c <lcd_putchar+0xc8>
    3a1a:	a4 c0       	rjmp	.+328    	; 0x3b64 <lcd_putchar+0x210>
    3a1c:	c0 e0       	ldi	r28, 0x00	; 0
    3a1e:	d0 e0       	ldi	r29, 0x00	; 0
    3a20:	44 c0       	rjmp	.+136    	; 0x3aaa <lcd_putchar+0x156>
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	6c 2f       	mov	r22, r28
    3a26:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
    3a2a:	ff 24       	eor	r15, r15
    3a2c:	6e 01       	movw	r12, r28
    3a2e:	08 94       	sec
    3a30:	c1 1c       	adc	r12, r1
    3a32:	d1 1c       	adc	r13, r1
    3a34:	35 c0       	rjmp	.+106    	; 0x3aa0 <lcd_putchar+0x14c>
    3a36:	0f 2d       	mov	r16, r15
    3a38:	10 e0       	ldi	r17, 0x00	; 0
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	9c 01       	movw	r18, r24
    3a3e:	c2 9f       	mul	r28, r18
    3a40:	c0 01       	movw	r24, r0
    3a42:	c3 9f       	mul	r28, r19
    3a44:	90 0d       	add	r25, r0
    3a46:	d2 9f       	mul	r29, r18
    3a48:	90 0d       	add	r25, r0
    3a4a:	11 24       	eor	r1, r1
    3a4c:	e0 91 d6 03 	lds	r30, 0x03D6
    3a50:	f0 91 d7 03 	lds	r31, 0x03D7
    3a54:	e0 0f       	add	r30, r16
    3a56:	f1 1f       	adc	r31, r17
    3a58:	e8 0f       	add	r30, r24
    3a5a:	f9 1f       	adc	r31, r25
    3a5c:	80 81       	ld	r24, Z
    3a5e:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN12OrangutanLCD9send_dataEh>
    3a62:	e0 91 d6 03 	lds	r30, 0x03D6
    3a66:	f0 91 d7 03 	lds	r31, 0x03D7
    3a6a:	80 91 c5 03 	lds	r24, 0x03C5
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	c8 9f       	mul	r28, r24
    3a72:	d0 01       	movw	r26, r0
    3a74:	c9 9f       	mul	r28, r25
    3a76:	b0 0d       	add	r27, r0
    3a78:	d8 9f       	mul	r29, r24
    3a7a:	b0 0d       	add	r27, r0
    3a7c:	11 24       	eor	r1, r1
    3a7e:	e0 0f       	add	r30, r16
    3a80:	f1 1f       	adc	r31, r17
    3a82:	ae 0f       	add	r26, r30
    3a84:	bf 1f       	adc	r27, r31
    3a86:	ac 01       	movw	r20, r24
    3a88:	c4 9e       	mul	r12, r20
    3a8a:	c0 01       	movw	r24, r0
    3a8c:	c5 9e       	mul	r12, r21
    3a8e:	90 0d       	add	r25, r0
    3a90:	d4 9e       	mul	r13, r20
    3a92:	90 0d       	add	r25, r0
    3a94:	11 24       	eor	r1, r1
    3a96:	e8 0f       	add	r30, r24
    3a98:	f9 1f       	adc	r31, r25
    3a9a:	80 81       	ld	r24, Z
    3a9c:	8c 93       	st	X, r24
    3a9e:	f3 94       	inc	r15
    3aa0:	80 91 c5 03 	lds	r24, 0x03C5
    3aa4:	f8 16       	cp	r15, r24
    3aa6:	38 f2       	brcs	.-114    	; 0x3a36 <lcd_putchar+0xe2>
    3aa8:	e6 01       	movw	r28, r12
    3aaa:	60 91 c4 03 	lds	r22, 0x03C4
    3aae:	86 2f       	mov	r24, r22
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	02 97       	sbiw	r24, 0x02	; 2
    3ab4:	c8 17       	cp	r28, r24
    3ab6:	d9 07       	cpc	r29, r25
    3ab8:	0c f4       	brge	.+2      	; 0x3abc <lcd_putchar+0x168>
    3aba:	b3 cf       	rjmp	.-154    	; 0x3a22 <lcd_putchar+0xce>
    3abc:	62 30       	cpi	r22, 0x02	; 2
    3abe:	08 f4       	brcc	.+2      	; 0x3ac2 <lcd_putchar+0x16e>
    3ac0:	40 c0       	rjmp	.+128    	; 0x3b42 <lcd_putchar+0x1ee>
    3ac2:	62 50       	subi	r22, 0x02	; 2
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
    3aca:	ff 24       	eor	r15, r15
    3acc:	40 e2       	ldi	r20, 0x20	; 32
    3ace:	d4 2e       	mov	r13, r20
    3ad0:	34 c0       	rjmp	.+104    	; 0x3b3a <lcd_putchar+0x1e6>
    3ad2:	0f 2d       	mov	r16, r15
    3ad4:	10 e0       	ldi	r17, 0x00	; 0
    3ad6:	80 91 c4 03 	lds	r24, 0x03C4
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	02 97       	sbiw	r24, 0x02	; 2
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	ac 01       	movw	r20, r24
    3ae2:	42 9f       	mul	r20, r18
    3ae4:	c0 01       	movw	r24, r0
    3ae6:	43 9f       	mul	r20, r19
    3ae8:	90 0d       	add	r25, r0
    3aea:	52 9f       	mul	r21, r18
    3aec:	90 0d       	add	r25, r0
    3aee:	11 24       	eor	r1, r1
    3af0:	e0 91 d6 03 	lds	r30, 0x03D6
    3af4:	f0 91 d7 03 	lds	r31, 0x03D7
    3af8:	e0 0f       	add	r30, r16
    3afa:	f1 1f       	adc	r31, r17
    3afc:	e8 0f       	add	r30, r24
    3afe:	f9 1f       	adc	r31, r25
    3b00:	80 81       	ld	r24, Z
    3b02:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN12OrangutanLCD9send_dataEh>
    3b06:	20 91 c4 03 	lds	r18, 0x03C4
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	22 50       	subi	r18, 0x02	; 2
    3b0e:	30 40       	sbci	r19, 0x00	; 0
    3b10:	80 91 c5 03 	lds	r24, 0x03C5
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	ac 01       	movw	r20, r24
    3b18:	24 9f       	mul	r18, r20
    3b1a:	c0 01       	movw	r24, r0
    3b1c:	25 9f       	mul	r18, r21
    3b1e:	90 0d       	add	r25, r0
    3b20:	34 9f       	mul	r19, r20
    3b22:	90 0d       	add	r25, r0
    3b24:	11 24       	eor	r1, r1
    3b26:	e0 91 d6 03 	lds	r30, 0x03D6
    3b2a:	f0 91 d7 03 	lds	r31, 0x03D7
    3b2e:	e0 0f       	add	r30, r16
    3b30:	f1 1f       	adc	r31, r17
    3b32:	e8 0f       	add	r30, r24
    3b34:	f9 1f       	adc	r31, r25
    3b36:	d0 82       	st	Z, r13
    3b38:	f3 94       	inc	r15
    3b3a:	20 91 c5 03 	lds	r18, 0x03C5
    3b3e:	f2 16       	cp	r15, r18
    3b40:	40 f2       	brcs	.-112    	; 0x3ad2 <lcd_putchar+0x17e>
    3b42:	60 91 c4 03 	lds	r22, 0x03C4
    3b46:	61 50       	subi	r22, 0x01	; 1
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
    3b4e:	00 e0       	ldi	r16, 0x00	; 0
    3b50:	04 c0       	rjmp	.+8      	; 0x3b5a <lcd_putchar+0x206>
    3b52:	80 e2       	ldi	r24, 0x20	; 32
    3b54:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN12OrangutanLCD9send_dataEh>
    3b58:	0f 5f       	subi	r16, 0xFF	; 255
    3b5a:	80 91 c5 03 	lds	r24, 0x03C5
    3b5e:	08 17       	cp	r16, r24
    3b60:	c0 f3       	brcs	.-16     	; 0x3b52 <lcd_putchar+0x1fe>
    3b62:	03 c0       	rjmp	.+6      	; 0x3b6a <lcd_putchar+0x216>
    3b64:	4f 5f       	subi	r20, 0xFF	; 255
    3b66:	40 93 d8 03 	sts	0x03D8, r20
    3b6a:	10 92 d9 03 	sts	0x03D9, r1
    3b6e:	80 91 d9 03 	lds	r24, 0x03D9
    3b72:	60 91 d8 03 	lds	r22, 0x03D8
    3b76:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN12OrangutanLCD6gotoXYEhh>
    3b7a:	2e 2d       	mov	r18, r14
    3b7c:	33 27       	eor	r19, r19
    3b7e:	27 fd       	sbrc	r18, 7
    3b80:	30 95       	com	r19
    3b82:	c9 01       	movw	r24, r18
    3b84:	cd b7       	in	r28, 0x3d	; 61
    3b86:	de b7       	in	r29, 0x3e	; 62
    3b88:	e8 e0       	ldi	r30, 0x08	; 8
    3b8a:	0c 94 92 1f 	jmp	0x3f24	; 0x3f24 <__epilogue_restores__+0x14>

00003b8e <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    3b8e:	ef 92       	push	r14
    3b90:	ff 92       	push	r15
    3b92:	0f 93       	push	r16
    3b94:	1f 93       	push	r17
    3b96:	cf 93       	push	r28
    3b98:	df 93       	push	r29
    3b9a:	7c 01       	movw	r14, r24
    3b9c:	06 2f       	mov	r16, r22
    3b9e:	10 e0       	ldi	r17, 0x00	; 0
    3ba0:	53 e0       	ldi	r21, 0x03	; 3
    3ba2:	00 0f       	add	r16, r16
    3ba4:	11 1f       	adc	r17, r17
    3ba6:	5a 95       	dec	r21
    3ba8:	e1 f7       	brne	.-8      	; 0x3ba2 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x14>
    3baa:	c0 e0       	ldi	r28, 0x00	; 0
    3bac:	d0 e0       	ldi	r29, 0x00	; 0
    3bae:	9e 01       	movw	r18, r28
    3bb0:	20 0f       	add	r18, r16
    3bb2:	82 2f       	mov	r24, r18
    3bb4:	80 64       	ori	r24, 0x40	; 64
    3bb6:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN12OrangutanLCD8send_cmdEh>
    3bba:	f7 01       	movw	r30, r14
    3bbc:	ec 0f       	add	r30, r28
    3bbe:	fd 1f       	adc	r31, r29
    3bc0:	e4 91       	lpm	r30, Z+
    3bc2:	8e 2f       	mov	r24, r30
    3bc4:	0e 94 b8 1b 	call	0x3770	; 0x3770 <_ZN12OrangutanLCD9send_dataEh>
    3bc8:	21 96       	adiw	r28, 0x01	; 1
    3bca:	c8 30       	cpi	r28, 0x08	; 8
    3bcc:	d1 05       	cpc	r29, r1
    3bce:	79 f7       	brne	.-34     	; 0x3bae <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x20>
    3bd0:	cd b7       	in	r28, 0x3d	; 61
    3bd2:	de b7       	in	r29, 0x3e	; 62
    3bd4:	e6 e0       	ldi	r30, 0x06	; 6
    3bd6:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__epilogue_restores__+0x18>

00003bda <lcd_load_custom_character>:
    3bda:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    3bde:	08 95       	ret

00003be0 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    3be0:	60 e0       	ldi	r22, 0x00	; 0
    3be2:	41 e0       	ldi	r20, 0x01	; 1
    3be4:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <_ZN12OrangutanLCD4sendEhhh>
    3be8:	08 95       	ret

00003bea <_ZN12OrangutanLCD6scrollEhhj>:
    3bea:	0f 93       	push	r16
    3bec:	1f 93       	push	r17
    3bee:	cf 93       	push	r28
    3bf0:	df 93       	push	r29
    3bf2:	08 2f       	mov	r16, r24
    3bf4:	16 2f       	mov	r17, r22
    3bf6:	ea 01       	movw	r28, r20
    3bf8:	0b c0       	rjmp	.+22     	; 0x3c10 <_ZN12OrangutanLCD6scrollEhhj+0x26>
    3bfa:	00 23       	and	r16, r16
    3bfc:	11 f4       	brne	.+4      	; 0x3c02 <_ZN12OrangutanLCD6scrollEhhj+0x18>
    3bfe:	88 e1       	ldi	r24, 0x18	; 24
    3c00:	01 c0       	rjmp	.+2      	; 0x3c04 <_ZN12OrangutanLCD6scrollEhhj+0x1a>
    3c02:	8c e1       	ldi	r24, 0x1C	; 28
    3c04:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN12OrangutanLCD8send_cmdEh>
    3c08:	ce 01       	movw	r24, r28
    3c0a:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <_ZN13OrangutanTime17delayMillisecondsEj>
    3c0e:	11 50       	subi	r17, 0x01	; 1
    3c10:	11 23       	and	r17, r17
    3c12:	99 f7       	brne	.-26     	; 0x3bfa <_ZN12OrangutanLCD6scrollEhhj+0x10>
    3c14:	df 91       	pop	r29
    3c16:	cf 91       	pop	r28
    3c18:	1f 91       	pop	r17
    3c1a:	0f 91       	pop	r16
    3c1c:	08 95       	ret

00003c1e <lcd_scroll>:
    3c1e:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <_ZN12OrangutanLCD6scrollEhhj>
    3c22:	08 95       	ret

00003c24 <__vector_11>:
    3c24:	2f 92       	push	r2
    3c26:	8f 93       	push	r24
    3c28:	9f 93       	push	r25
    3c2a:	2f b6       	in	r2, 0x3f	; 63
    3c2c:	80 91 e0 03 	lds	r24, 0x03E0
    3c30:	90 91 e1 03 	lds	r25, 0x03E1
    3c34:	01 96       	adiw	r24, 0x01	; 1
    3c36:	80 93 e0 03 	sts	0x03E0, r24
    3c3a:	90 93 e1 03 	sts	0x03E1, r25
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	80 91 e2 03 	lds	r24, 0x03E2
    3c44:	89 1f       	adc	r24, r25
    3c46:	80 93 e2 03 	sts	0x03E2, r24
    3c4a:	90 91 e8 03 	lds	r25, 0x03E8
    3c4e:	9c 5f       	subi	r25, 0xFC	; 252
    3c50:	90 93 e8 03 	sts	0x03E8, r25
    3c54:	80 91 e7 03 	lds	r24, 0x03E7
    3c58:	80 51       	subi	r24, 0x10	; 16
    3c5a:	97 42       	sbci	r25, 0x27	; 39
    3c5c:	c0 f0       	brcs	.+48     	; 0x3c8e <end>
    3c5e:	90 93 e8 03 	sts	0x03E8, r25
    3c62:	80 93 e7 03 	sts	0x03E7, r24
    3c66:	80 91 e3 03 	lds	r24, 0x03E3
    3c6a:	90 91 e4 03 	lds	r25, 0x03E4
    3c6e:	01 96       	adiw	r24, 0x01	; 1
    3c70:	80 93 e3 03 	sts	0x03E3, r24
    3c74:	90 93 e4 03 	sts	0x03E4, r25
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	80 91 e5 03 	lds	r24, 0x03E5
    3c7e:	89 1f       	adc	r24, r25
    3c80:	80 93 e5 03 	sts	0x03E5, r24
    3c84:	80 91 e6 03 	lds	r24, 0x03E6
    3c88:	89 1f       	adc	r24, r25
    3c8a:	80 93 e6 03 	sts	0x03E6, r24

00003c8e <end>:
    3c8e:	2f be       	out	0x3f, r2	; 63
    3c90:	9f 91       	pop	r25
    3c92:	8f 91       	pop	r24
    3c94:	2f 90       	pop	r2
    3c96:	18 95       	reti

00003c98 <ticks_to_microseconds>:
    3c98:	6f 5f       	subi	r22, 0xFF	; 255
    3c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c9c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca0:	66 0f       	add	r22, r22
    3ca2:	77 1f       	adc	r23, r23
    3ca4:	88 1f       	adc	r24, r24
    3ca6:	99 1f       	adc	r25, r25
    3ca8:	25 e0       	ldi	r18, 0x05	; 5
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	40 e0       	ldi	r20, 0x00	; 0
    3cae:	50 e0       	ldi	r21, 0x00	; 0
    3cb0:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <__udivmodsi4>
    3cb4:	ca 01       	movw	r24, r20
    3cb6:	b9 01       	movw	r22, r18
    3cb8:	08 95       	ret

00003cba <delay_ms>:
    3cba:	28 ee       	ldi	r18, 0xE8	; 232
    3cbc:	33 e0       	ldi	r19, 0x03	; 3
    3cbe:	09 c0       	rjmp	.+18     	; 0x3cd2 <delay_ms+0x18>
    3cc0:	f9 01       	movw	r30, r18
    3cc2:	6f 93       	push	r22
    3cc4:	64 e0       	ldi	r22, 0x04	; 4
    3cc6:	6a 95       	dec	r22
    3cc8:	f1 f7       	brne	.-4      	; 0x3cc6 <delay_ms+0xc>
    3cca:	6f 91       	pop	r22
    3ccc:	31 97       	sbiw	r30, 0x01	; 1
    3cce:	c9 f7       	brne	.-14     	; 0x3cc2 <delay_ms+0x8>
    3cd0:	01 97       	sbiw	r24, 0x01	; 1
    3cd2:	00 97       	sbiw	r24, 0x00	; 0
    3cd4:	a9 f7       	brne	.-22     	; 0x3cc0 <delay_ms+0x6>
    3cd6:	08 95       	ret

00003cd8 <_ZN13OrangutanTime19ticksToMicrosecondsEm>:
    3cd8:	6f 5f       	subi	r22, 0xFF	; 255
    3cda:	7f 4f       	sbci	r23, 0xFF	; 255
    3cdc:	8f 4f       	sbci	r24, 0xFF	; 255
    3cde:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce0:	66 0f       	add	r22, r22
    3ce2:	77 1f       	adc	r23, r23
    3ce4:	88 1f       	adc	r24, r24
    3ce6:	99 1f       	adc	r25, r25
    3ce8:	25 e0       	ldi	r18, 0x05	; 5
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	40 e0       	ldi	r20, 0x00	; 0
    3cee:	50 e0       	ldi	r21, 0x00	; 0
    3cf0:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <__udivmodsi4>
    3cf4:	ca 01       	movw	r24, r20
    3cf6:	b9 01       	movw	r22, r18
    3cf8:	08 95       	ret

00003cfa <_ZN13OrangutanTime17delayMillisecondsEj>:
    3cfa:	28 ee       	ldi	r18, 0xE8	; 232
    3cfc:	33 e0       	ldi	r19, 0x03	; 3
    3cfe:	09 c0       	rjmp	.+18     	; 0x3d12 <_ZN13OrangutanTime17delayMillisecondsEj+0x18>
    3d00:	f9 01       	movw	r30, r18
    3d02:	6f 93       	push	r22
    3d04:	64 e0       	ldi	r22, 0x04	; 4
    3d06:	6a 95       	dec	r22
    3d08:	f1 f7       	brne	.-4      	; 0x3d06 <_ZN13OrangutanTime17delayMillisecondsEj+0xc>
    3d0a:	6f 91       	pop	r22
    3d0c:	31 97       	sbiw	r30, 0x01	; 1
    3d0e:	c9 f7       	brne	.-14     	; 0x3d02 <_ZN13OrangutanTime17delayMillisecondsEj+0x8>
    3d10:	01 97       	sbiw	r24, 0x01	; 1
    3d12:	00 97       	sbiw	r24, 0x00	; 0
    3d14:	a9 f7       	brne	.-22     	; 0x3d00 <_ZN13OrangutanTime17delayMillisecondsEj+0x6>
    3d16:	08 95       	ret

00003d18 <_ZN13OrangutanTime5init2Ev>:
    3d18:	a0 e7       	ldi	r26, 0x70	; 112
    3d1a:	b0 e0       	ldi	r27, 0x00	; 0
    3d1c:	8c 91       	ld	r24, X
    3d1e:	8e 7f       	andi	r24, 0xFE	; 254
    3d20:	8c 93       	st	X, r24
    3d22:	e0 eb       	ldi	r30, 0xB0	; 176
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	80 81       	ld	r24, Z
    3d28:	83 60       	ori	r24, 0x03	; 3
    3d2a:	80 83       	st	Z, r24
    3d2c:	e1 eb       	ldi	r30, 0xB1	; 177
    3d2e:	f0 e0       	ldi	r31, 0x00	; 0
    3d30:	80 81       	ld	r24, Z
    3d32:	80 7f       	andi	r24, 0xF0	; 240
    3d34:	80 83       	st	Z, r24
    3d36:	80 81       	ld	r24, Z
    3d38:	82 60       	ori	r24, 0x02	; 2
    3d3a:	80 83       	st	Z, r24
    3d3c:	b8 9a       	sbi	0x17, 0	; 23
    3d3e:	8c 91       	ld	r24, X
    3d40:	81 60       	ori	r24, 0x01	; 1
    3d42:	8c 93       	st	X, r24
    3d44:	78 94       	sei
    3d46:	08 95       	ret

00003d48 <_ZN13OrangutanTime4initEv>:
    3d48:	80 91 e9 03 	lds	r24, 0x03E9
    3d4c:	88 23       	and	r24, r24
    3d4e:	29 f4       	brne	.+10     	; 0x3d5a <_ZN13OrangutanTime4initEv+0x12>
    3d50:	81 e0       	ldi	r24, 0x01	; 1
    3d52:	80 93 e9 03 	sts	0x03E9, r24
    3d56:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_ZN13OrangutanTime5init2Ev>
    3d5a:	08 95       	ret

00003d5c <_ZN13OrangutanTime2msEv>:
    3d5c:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <_ZN13OrangutanTime4initEv>
    3d60:	e0 e7       	ldi	r30, 0x70	; 112
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	80 81       	ld	r24, Z
    3d66:	8e 7f       	andi	r24, 0xFE	; 254
    3d68:	80 83       	st	Z, r24
    3d6a:	20 91 e3 03 	lds	r18, 0x03E3
    3d6e:	30 91 e4 03 	lds	r19, 0x03E4
    3d72:	40 91 e5 03 	lds	r20, 0x03E5
    3d76:	50 91 e6 03 	lds	r21, 0x03E6
    3d7a:	80 81       	ld	r24, Z
    3d7c:	81 60       	ori	r24, 0x01	; 1
    3d7e:	80 83       	st	Z, r24
    3d80:	b9 01       	movw	r22, r18
    3d82:	ca 01       	movw	r24, r20
    3d84:	08 95       	ret

00003d86 <get_ms>:
    3d86:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <_ZN13OrangutanTime2msEv>
    3d8a:	08 95       	ret

00003d8c <_ZN13OrangutanTime5ticksEv>:
    3d8c:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <_ZN13OrangutanTime4initEv>
    3d90:	80 91 70 00 	lds	r24, 0x0070
    3d94:	8e 7f       	andi	r24, 0xFE	; 254
    3d96:	80 93 70 00 	sts	0x0070, r24
    3d9a:	60 91 b2 00 	lds	r22, 0x00B2
    3d9e:	80 91 df 03 	lds	r24, 0x03DF
    3da2:	90 91 e0 03 	lds	r25, 0x03E0
    3da6:	a0 91 e1 03 	lds	r26, 0x03E1
    3daa:	b0 91 e2 03 	lds	r27, 0x03E2
    3dae:	b8 99       	sbic	0x17, 0	; 23
    3db0:	05 c0       	rjmp	.+10     	; 0x3dbc <_ZN13OrangutanTime5ticksEv+0x30>
    3db2:	26 2f       	mov	r18, r22
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	40 e0       	ldi	r20, 0x00	; 0
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	11 c0       	rjmp	.+34     	; 0x3dde <_ZN13OrangutanTime5ticksEv+0x52>
    3dbc:	80 91 b2 00 	lds	r24, 0x00B2
    3dc0:	20 91 df 03 	lds	r18, 0x03DF
    3dc4:	30 91 e0 03 	lds	r19, 0x03E0
    3dc8:	40 91 e1 03 	lds	r20, 0x03E1
    3dcc:	50 91 e2 03 	lds	r21, 0x03E2
    3dd0:	20 50       	subi	r18, 0x00	; 0
    3dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd4:	4f 4f       	sbci	r20, 0xFF	; 255
    3dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	a0 e0       	ldi	r26, 0x00	; 0
    3ddc:	b0 e0       	ldi	r27, 0x00	; 0
    3dde:	28 2b       	or	r18, r24
    3de0:	39 2b       	or	r19, r25
    3de2:	4a 2b       	or	r20, r26
    3de4:	5b 2b       	or	r21, r27
    3de6:	80 91 70 00 	lds	r24, 0x0070
    3dea:	81 60       	ori	r24, 0x01	; 1
    3dec:	80 93 70 00 	sts	0x0070, r24
    3df0:	b9 01       	movw	r22, r18
    3df2:	ca 01       	movw	r24, r20
    3df4:	08 95       	ret

00003df6 <get_ticks>:
    3df6:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <_ZN13OrangutanTime5ticksEv>
    3dfa:	08 95       	ret

00003dfc <_ZN13OrangutanTime5resetEv>:
    3dfc:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <_ZN13OrangutanTime4initEv>
    3e00:	e0 e7       	ldi	r30, 0x70	; 112
    3e02:	f0 e0       	ldi	r31, 0x00	; 0
    3e04:	80 81       	ld	r24, Z
    3e06:	8e 7f       	andi	r24, 0xFE	; 254
    3e08:	80 83       	st	Z, r24
    3e0a:	10 92 e3 03 	sts	0x03E3, r1
    3e0e:	10 92 e4 03 	sts	0x03E4, r1
    3e12:	10 92 e5 03 	sts	0x03E5, r1
    3e16:	10 92 e6 03 	sts	0x03E6, r1
    3e1a:	10 92 e8 03 	sts	0x03E8, r1
    3e1e:	10 92 e7 03 	sts	0x03E7, r1
    3e22:	80 81       	ld	r24, Z
    3e24:	81 60       	ori	r24, 0x01	; 1
    3e26:	80 83       	st	Z, r24
    3e28:	08 95       	ret

00003e2a <time_reset>:
    3e2a:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <_ZN13OrangutanTime5resetEv>
    3e2e:	08 95       	ret

00003e30 <__mulsi3>:
    3e30:	62 9f       	mul	r22, r18
    3e32:	d0 01       	movw	r26, r0
    3e34:	73 9f       	mul	r23, r19
    3e36:	f0 01       	movw	r30, r0
    3e38:	82 9f       	mul	r24, r18
    3e3a:	e0 0d       	add	r30, r0
    3e3c:	f1 1d       	adc	r31, r1
    3e3e:	64 9f       	mul	r22, r20
    3e40:	e0 0d       	add	r30, r0
    3e42:	f1 1d       	adc	r31, r1
    3e44:	92 9f       	mul	r25, r18
    3e46:	f0 0d       	add	r31, r0
    3e48:	83 9f       	mul	r24, r19
    3e4a:	f0 0d       	add	r31, r0
    3e4c:	74 9f       	mul	r23, r20
    3e4e:	f0 0d       	add	r31, r0
    3e50:	65 9f       	mul	r22, r21
    3e52:	f0 0d       	add	r31, r0
    3e54:	99 27       	eor	r25, r25
    3e56:	72 9f       	mul	r23, r18
    3e58:	b0 0d       	add	r27, r0
    3e5a:	e1 1d       	adc	r30, r1
    3e5c:	f9 1f       	adc	r31, r25
    3e5e:	63 9f       	mul	r22, r19
    3e60:	b0 0d       	add	r27, r0
    3e62:	e1 1d       	adc	r30, r1
    3e64:	f9 1f       	adc	r31, r25
    3e66:	bd 01       	movw	r22, r26
    3e68:	cf 01       	movw	r24, r30
    3e6a:	11 24       	eor	r1, r1
    3e6c:	08 95       	ret

00003e6e <__divmodhi4>:
    3e6e:	97 fb       	bst	r25, 7
    3e70:	09 2e       	mov	r0, r25
    3e72:	07 26       	eor	r0, r23
    3e74:	0a d0       	rcall	.+20     	; 0x3e8a <__divmodhi4_neg1>
    3e76:	77 fd       	sbrc	r23, 7
    3e78:	04 d0       	rcall	.+8      	; 0x3e82 <__divmodhi4_neg2>
    3e7a:	65 d0       	rcall	.+202    	; 0x3f46 <__udivmodhi4>
    3e7c:	06 d0       	rcall	.+12     	; 0x3e8a <__divmodhi4_neg1>
    3e7e:	00 20       	and	r0, r0
    3e80:	1a f4       	brpl	.+6      	; 0x3e88 <__divmodhi4_exit>

00003e82 <__divmodhi4_neg2>:
    3e82:	70 95       	com	r23
    3e84:	61 95       	neg	r22
    3e86:	7f 4f       	sbci	r23, 0xFF	; 255

00003e88 <__divmodhi4_exit>:
    3e88:	08 95       	ret

00003e8a <__divmodhi4_neg1>:
    3e8a:	f6 f7       	brtc	.-4      	; 0x3e88 <__divmodhi4_exit>
    3e8c:	90 95       	com	r25
    3e8e:	81 95       	neg	r24
    3e90:	9f 4f       	sbci	r25, 0xFF	; 255
    3e92:	08 95       	ret

00003e94 <__udivmodsi4>:
    3e94:	a1 e2       	ldi	r26, 0x21	; 33
    3e96:	1a 2e       	mov	r1, r26
    3e98:	aa 1b       	sub	r26, r26
    3e9a:	bb 1b       	sub	r27, r27
    3e9c:	fd 01       	movw	r30, r26
    3e9e:	0d c0       	rjmp	.+26     	; 0x3eba <__udivmodsi4_ep>

00003ea0 <__udivmodsi4_loop>:
    3ea0:	aa 1f       	adc	r26, r26
    3ea2:	bb 1f       	adc	r27, r27
    3ea4:	ee 1f       	adc	r30, r30
    3ea6:	ff 1f       	adc	r31, r31
    3ea8:	a2 17       	cp	r26, r18
    3eaa:	b3 07       	cpc	r27, r19
    3eac:	e4 07       	cpc	r30, r20
    3eae:	f5 07       	cpc	r31, r21
    3eb0:	20 f0       	brcs	.+8      	; 0x3eba <__udivmodsi4_ep>
    3eb2:	a2 1b       	sub	r26, r18
    3eb4:	b3 0b       	sbc	r27, r19
    3eb6:	e4 0b       	sbc	r30, r20
    3eb8:	f5 0b       	sbc	r31, r21

00003eba <__udivmodsi4_ep>:
    3eba:	66 1f       	adc	r22, r22
    3ebc:	77 1f       	adc	r23, r23
    3ebe:	88 1f       	adc	r24, r24
    3ec0:	99 1f       	adc	r25, r25
    3ec2:	1a 94       	dec	r1
    3ec4:	69 f7       	brne	.-38     	; 0x3ea0 <__udivmodsi4_loop>
    3ec6:	60 95       	com	r22
    3ec8:	70 95       	com	r23
    3eca:	80 95       	com	r24
    3ecc:	90 95       	com	r25
    3ece:	9b 01       	movw	r18, r22
    3ed0:	ac 01       	movw	r20, r24
    3ed2:	bd 01       	movw	r22, r26
    3ed4:	cf 01       	movw	r24, r30
    3ed6:	08 95       	ret

00003ed8 <__prologue_saves__>:
    3ed8:	2f 92       	push	r2
    3eda:	3f 92       	push	r3
    3edc:	4f 92       	push	r4
    3ede:	5f 92       	push	r5
    3ee0:	6f 92       	push	r6
    3ee2:	7f 92       	push	r7
    3ee4:	8f 92       	push	r8
    3ee6:	9f 92       	push	r9
    3ee8:	af 92       	push	r10
    3eea:	bf 92       	push	r11
    3eec:	cf 92       	push	r12
    3eee:	df 92       	push	r13
    3ef0:	ef 92       	push	r14
    3ef2:	ff 92       	push	r15
    3ef4:	0f 93       	push	r16
    3ef6:	1f 93       	push	r17
    3ef8:	cf 93       	push	r28
    3efa:	df 93       	push	r29
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
    3f00:	ca 1b       	sub	r28, r26
    3f02:	db 0b       	sbc	r29, r27
    3f04:	0f b6       	in	r0, 0x3f	; 63
    3f06:	f8 94       	cli
    3f08:	de bf       	out	0x3e, r29	; 62
    3f0a:	0f be       	out	0x3f, r0	; 63
    3f0c:	cd bf       	out	0x3d, r28	; 61
    3f0e:	09 94       	ijmp

00003f10 <__epilogue_restores__>:
    3f10:	2a 88       	ldd	r2, Y+18	; 0x12
    3f12:	39 88       	ldd	r3, Y+17	; 0x11
    3f14:	48 88       	ldd	r4, Y+16	; 0x10
    3f16:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f18:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f20:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f22:	b9 84       	ldd	r11, Y+9	; 0x09
    3f24:	c8 84       	ldd	r12, Y+8	; 0x08
    3f26:	df 80       	ldd	r13, Y+7	; 0x07
    3f28:	ee 80       	ldd	r14, Y+6	; 0x06
    3f2a:	fd 80       	ldd	r15, Y+5	; 0x05
    3f2c:	0c 81       	ldd	r16, Y+4	; 0x04
    3f2e:	1b 81       	ldd	r17, Y+3	; 0x03
    3f30:	aa 81       	ldd	r26, Y+2	; 0x02
    3f32:	b9 81       	ldd	r27, Y+1	; 0x01
    3f34:	ce 0f       	add	r28, r30
    3f36:	d1 1d       	adc	r29, r1
    3f38:	0f b6       	in	r0, 0x3f	; 63
    3f3a:	f8 94       	cli
    3f3c:	de bf       	out	0x3e, r29	; 62
    3f3e:	0f be       	out	0x3f, r0	; 63
    3f40:	cd bf       	out	0x3d, r28	; 61
    3f42:	ed 01       	movw	r28, r26
    3f44:	08 95       	ret

00003f46 <__udivmodhi4>:
    3f46:	aa 1b       	sub	r26, r26
    3f48:	bb 1b       	sub	r27, r27
    3f4a:	51 e1       	ldi	r21, 0x11	; 17
    3f4c:	07 c0       	rjmp	.+14     	; 0x3f5c <__udivmodhi4_ep>

00003f4e <__udivmodhi4_loop>:
    3f4e:	aa 1f       	adc	r26, r26
    3f50:	bb 1f       	adc	r27, r27
    3f52:	a6 17       	cp	r26, r22
    3f54:	b7 07       	cpc	r27, r23
    3f56:	10 f0       	brcs	.+4      	; 0x3f5c <__udivmodhi4_ep>
    3f58:	a6 1b       	sub	r26, r22
    3f5a:	b7 0b       	sbc	r27, r23

00003f5c <__udivmodhi4_ep>:
    3f5c:	88 1f       	adc	r24, r24
    3f5e:	99 1f       	adc	r25, r25
    3f60:	5a 95       	dec	r21
    3f62:	a9 f7       	brne	.-22     	; 0x3f4e <__udivmodhi4_loop>
    3f64:	80 95       	com	r24
    3f66:	90 95       	com	r25
    3f68:	bc 01       	movw	r22, r24
    3f6a:	cd 01       	movw	r24, r26
    3f6c:	08 95       	ret

00003f6e <malloc>:
    3f6e:	cf 93       	push	r28
    3f70:	df 93       	push	r29
    3f72:	bc 01       	movw	r22, r24
    3f74:	82 30       	cpi	r24, 0x02	; 2
    3f76:	91 05       	cpc	r25, r1
    3f78:	10 f4       	brcc	.+4      	; 0x3f7e <malloc+0x10>
    3f7a:	62 e0       	ldi	r22, 0x02	; 2
    3f7c:	70 e0       	ldi	r23, 0x00	; 0
    3f7e:	a0 91 ec 03 	lds	r26, 0x03EC
    3f82:	b0 91 ed 03 	lds	r27, 0x03ED
    3f86:	ed 01       	movw	r28, r26
    3f88:	e0 e0       	ldi	r30, 0x00	; 0
    3f8a:	f0 e0       	ldi	r31, 0x00	; 0
    3f8c:	40 e0       	ldi	r20, 0x00	; 0
    3f8e:	50 e0       	ldi	r21, 0x00	; 0
    3f90:	21 c0       	rjmp	.+66     	; 0x3fd4 <malloc+0x66>
    3f92:	88 81       	ld	r24, Y
    3f94:	99 81       	ldd	r25, Y+1	; 0x01
    3f96:	86 17       	cp	r24, r22
    3f98:	97 07       	cpc	r25, r23
    3f9a:	69 f4       	brne	.+26     	; 0x3fb6 <malloc+0x48>
    3f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa0:	30 97       	sbiw	r30, 0x00	; 0
    3fa2:	19 f0       	breq	.+6      	; 0x3faa <malloc+0x3c>
    3fa4:	93 83       	std	Z+3, r25	; 0x03
    3fa6:	82 83       	std	Z+2, r24	; 0x02
    3fa8:	04 c0       	rjmp	.+8      	; 0x3fb2 <malloc+0x44>
    3faa:	90 93 ed 03 	sts	0x03ED, r25
    3fae:	80 93 ec 03 	sts	0x03EC, r24
    3fb2:	fe 01       	movw	r30, r28
    3fb4:	34 c0       	rjmp	.+104    	; 0x401e <malloc+0xb0>
    3fb6:	68 17       	cp	r22, r24
    3fb8:	79 07       	cpc	r23, r25
    3fba:	38 f4       	brcc	.+14     	; 0x3fca <malloc+0x5c>
    3fbc:	41 15       	cp	r20, r1
    3fbe:	51 05       	cpc	r21, r1
    3fc0:	19 f0       	breq	.+6      	; 0x3fc8 <malloc+0x5a>
    3fc2:	84 17       	cp	r24, r20
    3fc4:	95 07       	cpc	r25, r21
    3fc6:	08 f4       	brcc	.+2      	; 0x3fca <malloc+0x5c>
    3fc8:	ac 01       	movw	r20, r24
    3fca:	fe 01       	movw	r30, r28
    3fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3fce:	9b 81       	ldd	r25, Y+3	; 0x03
    3fd0:	9c 01       	movw	r18, r24
    3fd2:	e9 01       	movw	r28, r18
    3fd4:	20 97       	sbiw	r28, 0x00	; 0
    3fd6:	e9 f6       	brne	.-70     	; 0x3f92 <malloc+0x24>
    3fd8:	41 15       	cp	r20, r1
    3fda:	51 05       	cpc	r21, r1
    3fdc:	a9 f1       	breq	.+106    	; 0x4048 <malloc+0xda>
    3fde:	ca 01       	movw	r24, r20
    3fe0:	86 1b       	sub	r24, r22
    3fe2:	97 0b       	sbc	r25, r23
    3fe4:	04 97       	sbiw	r24, 0x04	; 4
    3fe6:	08 f4       	brcc	.+2      	; 0x3fea <malloc+0x7c>
    3fe8:	ba 01       	movw	r22, r20
    3fea:	e0 e0       	ldi	r30, 0x00	; 0
    3fec:	f0 e0       	ldi	r31, 0x00	; 0
    3fee:	2a c0       	rjmp	.+84     	; 0x4044 <malloc+0xd6>
    3ff0:	8d 91       	ld	r24, X+
    3ff2:	9c 91       	ld	r25, X
    3ff4:	11 97       	sbiw	r26, 0x01	; 1
    3ff6:	84 17       	cp	r24, r20
    3ff8:	95 07       	cpc	r25, r21
    3ffa:	f9 f4       	brne	.+62     	; 0x403a <malloc+0xcc>
    3ffc:	64 17       	cp	r22, r20
    3ffe:	75 07       	cpc	r23, r21
    4000:	81 f4       	brne	.+32     	; 0x4022 <malloc+0xb4>
    4002:	12 96       	adiw	r26, 0x02	; 2
    4004:	8d 91       	ld	r24, X+
    4006:	9c 91       	ld	r25, X
    4008:	13 97       	sbiw	r26, 0x03	; 3
    400a:	30 97       	sbiw	r30, 0x00	; 0
    400c:	19 f0       	breq	.+6      	; 0x4014 <malloc+0xa6>
    400e:	93 83       	std	Z+3, r25	; 0x03
    4010:	82 83       	std	Z+2, r24	; 0x02
    4012:	04 c0       	rjmp	.+8      	; 0x401c <malloc+0xae>
    4014:	90 93 ed 03 	sts	0x03ED, r25
    4018:	80 93 ec 03 	sts	0x03EC, r24
    401c:	fd 01       	movw	r30, r26
    401e:	32 96       	adiw	r30, 0x02	; 2
    4020:	4f c0       	rjmp	.+158    	; 0x40c0 <malloc+0x152>
    4022:	ca 01       	movw	r24, r20
    4024:	86 1b       	sub	r24, r22
    4026:	97 0b       	sbc	r25, r23
    4028:	fd 01       	movw	r30, r26
    402a:	e8 0f       	add	r30, r24
    402c:	f9 1f       	adc	r31, r25
    402e:	61 93       	st	Z+, r22
    4030:	71 93       	st	Z+, r23
    4032:	02 97       	sbiw	r24, 0x02	; 2
    4034:	8d 93       	st	X+, r24
    4036:	9c 93       	st	X, r25
    4038:	43 c0       	rjmp	.+134    	; 0x40c0 <malloc+0x152>
    403a:	fd 01       	movw	r30, r26
    403c:	82 81       	ldd	r24, Z+2	; 0x02
    403e:	93 81       	ldd	r25, Z+3	; 0x03
    4040:	9c 01       	movw	r18, r24
    4042:	d9 01       	movw	r26, r18
    4044:	10 97       	sbiw	r26, 0x00	; 0
    4046:	a1 f6       	brne	.-88     	; 0x3ff0 <malloc+0x82>
    4048:	80 91 ea 03 	lds	r24, 0x03EA
    404c:	90 91 eb 03 	lds	r25, 0x03EB
    4050:	89 2b       	or	r24, r25
    4052:	41 f4       	brne	.+16     	; 0x4064 <malloc+0xf6>
    4054:	80 91 c8 03 	lds	r24, 0x03C8
    4058:	90 91 c9 03 	lds	r25, 0x03C9
    405c:	90 93 eb 03 	sts	0x03EB, r25
    4060:	80 93 ea 03 	sts	0x03EA, r24
    4064:	40 91 ca 03 	lds	r20, 0x03CA
    4068:	50 91 cb 03 	lds	r21, 0x03CB
    406c:	41 15       	cp	r20, r1
    406e:	51 05       	cpc	r21, r1
    4070:	41 f4       	brne	.+16     	; 0x4082 <malloc+0x114>
    4072:	4d b7       	in	r20, 0x3d	; 61
    4074:	5e b7       	in	r21, 0x3e	; 62
    4076:	80 91 c6 03 	lds	r24, 0x03C6
    407a:	90 91 c7 03 	lds	r25, 0x03C7
    407e:	48 1b       	sub	r20, r24
    4080:	59 0b       	sbc	r21, r25
    4082:	20 91 ea 03 	lds	r18, 0x03EA
    4086:	30 91 eb 03 	lds	r19, 0x03EB
    408a:	24 17       	cp	r18, r20
    408c:	35 07       	cpc	r19, r21
    408e:	b0 f4       	brcc	.+44     	; 0x40bc <malloc+0x14e>
    4090:	ca 01       	movw	r24, r20
    4092:	82 1b       	sub	r24, r18
    4094:	93 0b       	sbc	r25, r19
    4096:	86 17       	cp	r24, r22
    4098:	97 07       	cpc	r25, r23
    409a:	80 f0       	brcs	.+32     	; 0x40bc <malloc+0x14e>
    409c:	ab 01       	movw	r20, r22
    409e:	4e 5f       	subi	r20, 0xFE	; 254
    40a0:	5f 4f       	sbci	r21, 0xFF	; 255
    40a2:	84 17       	cp	r24, r20
    40a4:	95 07       	cpc	r25, r21
    40a6:	50 f0       	brcs	.+20     	; 0x40bc <malloc+0x14e>
    40a8:	42 0f       	add	r20, r18
    40aa:	53 1f       	adc	r21, r19
    40ac:	50 93 eb 03 	sts	0x03EB, r21
    40b0:	40 93 ea 03 	sts	0x03EA, r20
    40b4:	f9 01       	movw	r30, r18
    40b6:	61 93       	st	Z+, r22
    40b8:	71 93       	st	Z+, r23
    40ba:	02 c0       	rjmp	.+4      	; 0x40c0 <malloc+0x152>
    40bc:	e0 e0       	ldi	r30, 0x00	; 0
    40be:	f0 e0       	ldi	r31, 0x00	; 0
    40c0:	cf 01       	movw	r24, r30
    40c2:	df 91       	pop	r29
    40c4:	cf 91       	pop	r28
    40c6:	08 95       	ret

000040c8 <free>:
    40c8:	cf 93       	push	r28
    40ca:	df 93       	push	r29
    40cc:	00 97       	sbiw	r24, 0x00	; 0
    40ce:	09 f4       	brne	.+2      	; 0x40d2 <free+0xa>
    40d0:	50 c0       	rjmp	.+160    	; 0x4172 <__stack+0x73>
    40d2:	ec 01       	movw	r28, r24
    40d4:	22 97       	sbiw	r28, 0x02	; 2
    40d6:	1b 82       	std	Y+3, r1	; 0x03
    40d8:	1a 82       	std	Y+2, r1	; 0x02
    40da:	a0 91 ec 03 	lds	r26, 0x03EC
    40de:	b0 91 ed 03 	lds	r27, 0x03ED
    40e2:	10 97       	sbiw	r26, 0x00	; 0
    40e4:	09 f1       	breq	.+66     	; 0x4128 <__stack+0x29>
    40e6:	40 e0       	ldi	r20, 0x00	; 0
    40e8:	50 e0       	ldi	r21, 0x00	; 0
    40ea:	ac 17       	cp	r26, r28
    40ec:	bd 07       	cpc	r27, r29
    40ee:	08 f1       	brcs	.+66     	; 0x4132 <__stack+0x33>
    40f0:	bb 83       	std	Y+3, r27	; 0x03
    40f2:	aa 83       	std	Y+2, r26	; 0x02
    40f4:	fe 01       	movw	r30, r28
    40f6:	21 91       	ld	r18, Z+
    40f8:	31 91       	ld	r19, Z+
    40fa:	e2 0f       	add	r30, r18
    40fc:	f3 1f       	adc	r31, r19
    40fe:	ae 17       	cp	r26, r30
    4100:	bf 07       	cpc	r27, r31
    4102:	79 f4       	brne	.+30     	; 0x4122 <__stack+0x23>
    4104:	8d 91       	ld	r24, X+
    4106:	9c 91       	ld	r25, X
    4108:	11 97       	sbiw	r26, 0x01	; 1
    410a:	28 0f       	add	r18, r24
    410c:	39 1f       	adc	r19, r25
    410e:	2e 5f       	subi	r18, 0xFE	; 254
    4110:	3f 4f       	sbci	r19, 0xFF	; 255
    4112:	39 83       	std	Y+1, r19	; 0x01
    4114:	28 83       	st	Y, r18
    4116:	12 96       	adiw	r26, 0x02	; 2
    4118:	8d 91       	ld	r24, X+
    411a:	9c 91       	ld	r25, X
    411c:	13 97       	sbiw	r26, 0x03	; 3
    411e:	9b 83       	std	Y+3, r25	; 0x03
    4120:	8a 83       	std	Y+2, r24	; 0x02
    4122:	41 15       	cp	r20, r1
    4124:	51 05       	cpc	r21, r1
    4126:	71 f4       	brne	.+28     	; 0x4144 <__stack+0x45>
    4128:	d0 93 ed 03 	sts	0x03ED, r29
    412c:	c0 93 ec 03 	sts	0x03EC, r28
    4130:	20 c0       	rjmp	.+64     	; 0x4172 <__stack+0x73>
    4132:	12 96       	adiw	r26, 0x02	; 2
    4134:	8d 91       	ld	r24, X+
    4136:	9c 91       	ld	r25, X
    4138:	13 97       	sbiw	r26, 0x03	; 3
    413a:	ad 01       	movw	r20, r26
    413c:	00 97       	sbiw	r24, 0x00	; 0
    413e:	11 f0       	breq	.+4      	; 0x4144 <__stack+0x45>
    4140:	dc 01       	movw	r26, r24
    4142:	d3 cf       	rjmp	.-90     	; 0x40ea <free+0x22>
    4144:	fa 01       	movw	r30, r20
    4146:	d3 83       	std	Z+3, r29	; 0x03
    4148:	c2 83       	std	Z+2, r28	; 0x02
    414a:	21 91       	ld	r18, Z+
    414c:	31 91       	ld	r19, Z+
    414e:	e2 0f       	add	r30, r18
    4150:	f3 1f       	adc	r31, r19
    4152:	ce 17       	cp	r28, r30
    4154:	df 07       	cpc	r29, r31
    4156:	69 f4       	brne	.+26     	; 0x4172 <__stack+0x73>
    4158:	88 81       	ld	r24, Y
    415a:	99 81       	ldd	r25, Y+1	; 0x01
    415c:	28 0f       	add	r18, r24
    415e:	39 1f       	adc	r19, r25
    4160:	2e 5f       	subi	r18, 0xFE	; 254
    4162:	3f 4f       	sbci	r19, 0xFF	; 255
    4164:	fa 01       	movw	r30, r20
    4166:	31 83       	std	Z+1, r19	; 0x01
    4168:	20 83       	st	Z, r18
    416a:	8a 81       	ldd	r24, Y+2	; 0x02
    416c:	9b 81       	ldd	r25, Y+3	; 0x03
    416e:	93 83       	std	Z+3, r25	; 0x03
    4170:	82 83       	std	Z+2, r24	; 0x02
    4172:	df 91       	pop	r29
    4174:	cf 91       	pop	r28
    4176:	08 95       	ret

00004178 <fdevopen>:
    4178:	0f 93       	push	r16
    417a:	1f 93       	push	r17
    417c:	cf 93       	push	r28
    417e:	df 93       	push	r29
    4180:	8c 01       	movw	r16, r24
    4182:	eb 01       	movw	r28, r22
    4184:	00 97       	sbiw	r24, 0x00	; 0
    4186:	31 f4       	brne	.+12     	; 0x4194 <fdevopen+0x1c>
    4188:	61 15       	cp	r22, r1
    418a:	71 05       	cpc	r23, r1
    418c:	19 f4       	brne	.+6      	; 0x4194 <fdevopen+0x1c>
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	38 c0       	rjmp	.+112    	; 0x4204 <fdevopen+0x8c>
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	6e e0       	ldi	r22, 0x0E	; 14
    419a:	70 e0       	ldi	r23, 0x00	; 0
    419c:	0e 94 08 21 	call	0x4210	; 0x4210 <calloc>
    41a0:	fc 01       	movw	r30, r24
    41a2:	9c 01       	movw	r18, r24
    41a4:	00 97       	sbiw	r24, 0x00	; 0
    41a6:	71 f1       	breq	.+92     	; 0x4204 <fdevopen+0x8c>
    41a8:	80 e8       	ldi	r24, 0x80	; 128
    41aa:	83 83       	std	Z+3, r24	; 0x03
    41ac:	20 97       	sbiw	r28, 0x00	; 0
    41ae:	71 f0       	breq	.+28     	; 0x41cc <fdevopen+0x54>
    41b0:	d3 87       	std	Z+11, r29	; 0x0b
    41b2:	c2 87       	std	Z+10, r28	; 0x0a
    41b4:	81 e8       	ldi	r24, 0x81	; 129
    41b6:	83 83       	std	Z+3, r24	; 0x03
    41b8:	80 91 ee 03 	lds	r24, 0x03EE
    41bc:	90 91 ef 03 	lds	r25, 0x03EF
    41c0:	89 2b       	or	r24, r25
    41c2:	21 f4       	brne	.+8      	; 0x41cc <fdevopen+0x54>
    41c4:	f0 93 ef 03 	sts	0x03EF, r31
    41c8:	e0 93 ee 03 	sts	0x03EE, r30
    41cc:	01 15       	cp	r16, r1
    41ce:	11 05       	cpc	r17, r1
    41d0:	c9 f0       	breq	.+50     	; 0x4204 <fdevopen+0x8c>
    41d2:	11 87       	std	Z+9, r17	; 0x09
    41d4:	00 87       	std	Z+8, r16	; 0x08
    41d6:	83 81       	ldd	r24, Z+3	; 0x03
    41d8:	82 60       	ori	r24, 0x02	; 2
    41da:	83 83       	std	Z+3, r24	; 0x03
    41dc:	80 91 f0 03 	lds	r24, 0x03F0
    41e0:	90 91 f1 03 	lds	r25, 0x03F1
    41e4:	89 2b       	or	r24, r25
    41e6:	71 f4       	brne	.+28     	; 0x4204 <fdevopen+0x8c>
    41e8:	f0 93 f1 03 	sts	0x03F1, r31
    41ec:	e0 93 f0 03 	sts	0x03F0, r30
    41f0:	80 91 f2 03 	lds	r24, 0x03F2
    41f4:	90 91 f3 03 	lds	r25, 0x03F3
    41f8:	89 2b       	or	r24, r25
    41fa:	21 f4       	brne	.+8      	; 0x4204 <fdevopen+0x8c>
    41fc:	f0 93 f3 03 	sts	0x03F3, r31
    4200:	e0 93 f2 03 	sts	0x03F2, r30
    4204:	c9 01       	movw	r24, r18
    4206:	df 91       	pop	r29
    4208:	cf 91       	pop	r28
    420a:	1f 91       	pop	r17
    420c:	0f 91       	pop	r16
    420e:	08 95       	ret

00004210 <calloc>:
    4210:	0f 93       	push	r16
    4212:	1f 93       	push	r17
    4214:	cf 93       	push	r28
    4216:	df 93       	push	r29
    4218:	68 9f       	mul	r22, r24
    421a:	80 01       	movw	r16, r0
    421c:	69 9f       	mul	r22, r25
    421e:	10 0d       	add	r17, r0
    4220:	78 9f       	mul	r23, r24
    4222:	10 0d       	add	r17, r0
    4224:	11 24       	eor	r1, r1
    4226:	c8 01       	movw	r24, r16
    4228:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <malloc>
    422c:	ec 01       	movw	r28, r24
    422e:	00 97       	sbiw	r24, 0x00	; 0
    4230:	29 f0       	breq	.+10     	; 0x423c <calloc+0x2c>
    4232:	60 e0       	ldi	r22, 0x00	; 0
    4234:	70 e0       	ldi	r23, 0x00	; 0
    4236:	a8 01       	movw	r20, r16
    4238:	0e 94 24 21 	call	0x4248	; 0x4248 <memset>
    423c:	ce 01       	movw	r24, r28
    423e:	df 91       	pop	r29
    4240:	cf 91       	pop	r28
    4242:	1f 91       	pop	r17
    4244:	0f 91       	pop	r16
    4246:	08 95       	ret

00004248 <memset>:
    4248:	dc 01       	movw	r26, r24
    424a:	01 c0       	rjmp	.+2      	; 0x424e <memset+0x6>
    424c:	6d 93       	st	X+, r22
    424e:	41 50       	subi	r20, 0x01	; 1
    4250:	50 40       	sbci	r21, 0x00	; 0
    4252:	e0 f7       	brcc	.-8      	; 0x424c <memset+0x4>
    4254:	08 95       	ret

00004256 <_exit>:
    4256:	f8 94       	cli

00004258 <__stop_program>:
    4258:	ff cf       	rjmp	.-2      	; 0x4258 <__stop_program>
